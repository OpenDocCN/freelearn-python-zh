- en: Legacy Modernization to Microservices-Centric Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统现代化到以微服务为中心的应用程序
- en: Legacy applications are typically monolithic, massive, and inflexible, comprising
    millions of lines of code. They are neither modular nor modern. It's very difficult
    to bring in any changes on particular portions of them. However, they have been
    contributing immensely in successfully running a majority of the business behemoths
    across the globe. Mainframe servers are the most powerful and high-performance
    IT infrastructures hosting and running a variety of complex legacy applications.
    Though mission-critical applications are being run on mainframes, modern-day computing
    mandates for a kind of marriage between mainframe computing and web-scale computing.
    That is, we need easily-manageable and -maintainable applications. On the infrastructure
    side, we need open, highly compartmentalized, programmable, optimized, and organized
    IT infrastructures.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用程序通常是单体、庞大且不灵活的，包含数百万行代码。它们既不模块化也不现代。在它们的特定部分进行任何更改都非常困难。然而，它们在全球范围内成功运行的大多数商业巨头中做出了巨大贡献。主机服务器是最强大和性能最高的IT基础设施，托管和运行各种复杂的传统应用程序。尽管关键任务应用程序正在主机上运行，但现代计算要求主机计算和Web规模计算之间的一种结合。也就是说，我们需要易于管理和维护的应用程序。在基础设施方面，我们需要开放、高度模块化、可编程、优化和组织的IT基础设施。
- en: Thus, there is a push for legacy applications to embrace the newly-introduced
    innovations in software engineering. There are many noteworthy architectural styles,
    process optimization techniques, and tools to speed up the transformation process.
    Digital transformation forces us to deliver faster. Every organization’s priority
    is to have well-designed
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，推动传统应用程序采用软件工程中引入的新创新。有许多值得注意的架构风格、流程优化技术和工具来加速转型过程。数字化转型迫使我们加快速度。每个组织的首要任务是拥有设计良好的
- en: applications, the ability to deploy to on-premise and cloud environments as
    well as deploy independently, update services, and deploy defect fixes and new
    features in hours or days, not months.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序，能够部署到本地和云环境，以及独立部署、更新服务、在数小时或数天内部署缺陷修复和新功能，而不是数月。
- en: In this chapter, we'll discuss how the **microservices architecture** (**MSA**)
    is the way forward for modern applications that are highly nimble, versatile,
    and resilient.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论**微服务架构**（**MSA**）是如何成为高度敏捷、灵活和有弹性的现代应用程序的前进方向的。
- en: 'The chapter objectives include the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章目标包括以下内容：
- en: Describing the needs for legacy application modernization
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述传统应用程序现代化的需求
- en: Delineating why applications have to be modernized to be migrated and run in
    cloud environments
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阐述为什么应用程序必须现代化才能迁移并在云环境中运行
- en: Depicting how the combination of microservices and containers is the preferred
    one for legacy modernization
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述微服务和容器的组合是传统现代化的首选方案
- en: Detailing the legacy modernization methodology
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 详细说明传统现代化方法
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Readers should be comfortable with the following popular technologies and tools:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 读者应熟悉以下流行的技术和工具：
- en: Docker-enabled containerization platforms
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 允许使用Docker的容器化平台
- en: The microservices architecture
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务架构
- en: API gateways and management suites
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API网关和管理套件
- en: Microservices design principles and patterns
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务设计原则和模式
- en: Microservices composition (orchestration and choreography)
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微服务组成（编排和协奏）
- en: Cloud operations
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云操作
- en: A preview of containers and microservices
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 容器和微服务的预览
- en: With the surging popularity of the open source Docker containerization platform,
    the domain of containerization has accelerated in an unprecedented manner. Today,
    use of containerization has become widespread among IT professionals. Any kind
    of software can be easily containerized through automated tools. Thus, there are
    container-ready images in standardized format made available in public and private
    repositories. To modernize legacy applications, the use of containers as the most
    efficient wrapping mechanism is emerging and evolving.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 随着开源Docker容器化平台的日益流行，容器化领域以前所未有的速度加速发展。如今，容器化在IT专业人员中得到了广泛应用。任何类型的软件都可以通过自动化工具轻松容器化。因此，在公共和私有存储库中提供了标准格式的容器就绪镜像。为了使传统应用程序现代化，使用容器作为最有效的包装机制正在兴起并不断发展。
- en: The use of containers to modernize legacy applications brings forth a few advantages.
    The main point of containerization is to remove the infrastructure dependency
    from legacy applications. That is, containerized applications can run on any platform
    and infrastructure without any tweaking. Any of the infrastructure's complexities
    are instantly eliminated with this containerization paradigm. Thus, legacy applications
    become portable and can be integrated with other applications easily.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用容器来现代化遗留应用程序带来了一些优势。容器化的主要目的是从遗留应用程序中去除基础设施依赖。也就是说，容器化应用程序可以在任何平台和基础设施上运行，而无需任何调整。使用这种容器化范式，基础设施的复杂性立即被消除。因此，遗留应用程序变得可移植，并且可以轻松与其他应用程序集成。
- en: Once containerized, any legacy application can interact with third-party applications.
    Enabling compatibility with web, cloud, and mobile platforms becomes easier and
    faster. With the aid of various platform solutions for delivering multi-container
    applications, legacy applications can be blended to become more relevant for their
    owners and end users. Migrating containerized legacy applications from a local
    cloud to remote clouds, or from one public cloud to another public cloud, becomes
    simple. The security, stability, and scalability of legacy applications can be
    strengthened by attaching additional capabilities from outside.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦容器化，任何遗留应用程序都可以与第三方应用程序交互。使与网页、云和移动平台兼容变得更容易、更快。借助各种用于交付多容器应用程序的平台解决方案，遗留应用程序可以融合以使其对其所有者和最终用户更加相关。将容器化的遗留应用程序从本地云迁移到远程云，或从一个公共云迁移到另一个公共云变得简单。通过附加外部能力，可以增强遗留应用程序的安全性、稳定性和可扩展性。
- en: Thus, the noteworthy advancements being brought into the containerization phenomenon
    directly and indirectly impact legacy modernization. There are several crucial
    advantages of the containerization movement, especially for the strategic and
    tough goal of legacy modernization. Legacy software can be subdivided into many
    different domains, and each of those modules is being deployed in different containers.
    Now, to guarantee higher performance and throughput, different containers can
    be run on different infrastructures. An I/O-intensive application module can be
    made to run on physical/**bare-metal** (**BM**) servers. Some containerized application
    services can be deployed in public clouds to take advantage of their availability,
    scalability, and security capabilities. Thus, legacy applications that are modernized
    through the use of containers are typically empowered to be modern, agile, and
    adaptive.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，容器化现象带来的显著进步直接和间接地影响了遗留系统的现代化。容器化运动有几个关键优势，特别是对于战略性和艰巨的遗留现代化目标。遗留软件可以被细分为许多不同的领域，而这些模块中的每一个都在不同的容器中部署。现在，为了保证更高的性能和吞吐量，不同的容器可以在不同的基础设施上运行。一个I/O密集型应用程序模块可以被配置在物理/**裸机**（**BM**）服务器上。一些容器化应用程序服务可以部署在公共云中，以利用其可用性、可扩展性和安全性功能。因此，通过使用容器进行现代化的遗留应用程序通常能够获得现代化、敏捷和适应性。
- en: 'Modernizing legacy applications is accomplished through the following methods:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下方法实现遗留应用程序的现代化：
- en: '**Rearchitecting the application**: A new appropriate and modern architecture
    is being produced and, accordingly, architectural decisions, components, connectivity,
    and capabilities are designed and implemented.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构应用程序**：正在产生一个新合适且现代的架构，因此，相应的架构决策、组件、连接性和能力被设计和实施。'
- en: '**Replatforming the application**: The legacy application can be deployed in
    newer platforms in order to be categorized as a modern application.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**迁移应用程序到新平台**：遗留应用程序可以部署在新平台上，以便被归类为现代应用程序。'
- en: '**Refactoring the application**: Applications are partitioned into many components,
    which target a specific business functionality. The identified business functionality
    is rewritten with microservices, which are then fused with one another to produce
    the desired application.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构应用程序**：应用程序被划分为许多组件，这些组件针对特定的业务功能。已识别的业务功能通过微服务进行重写，然后这些微服务相互融合以产生所需的应用程序。'
- en: Introducing the microservices architecture
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引入微服务架构
- en: As mentioned several times in this book, MSA is being positioned as the next-generation
    application architectural pattern. Microservices are constructed, compiled, and
    deployed as a separate project. Containers are the most optimal unit of microservices
    development and deployment. Every microservice is blessed with its own data store.
    They aren't compiled into software solutions. Instead, they're implemented as
    standalone services to be integrated and orchestrated via standards-based and
    communication protocols.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本书多次提到的，微服务架构（MSA）被定位为下一代应用架构模式。微服务作为独立的项目进行构建、编译和部署。容器是微服务开发和部署的最优单元。每个微服务都拥有自己的数据存储。它们不会被编译成软件解决方案。相反，它们作为独立的服务实现，通过基于标准和通信协议进行集成和编排。
- en: Every service is being given an interface using the simple-to-use RESTful APIs.
    Microservices are carefully versioned not to adversely affect any other user microservices
    and applications. For example, for a **business-to-consumer** (**B2C**) e-commerce
    application, a microservice may be developed to provide a products catalog. Another
    microservice takes care of procurement, another is for payment, and so on. Thus,
    microservices are independently developed by distributed teams and then deployed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 每个服务都通过简单易用的RESTful API提供了一个接口。微服务经过精心版本控制，以避免对任何其他用户微服务或应用程序产生不利影响。例如，对于一个**面向消费者**（**B2C**）的电子商务应用，可能开发一个微服务来提供产品目录。另一个微服务负责采购，另一个用于支付，等等。因此，微服务由分布式团队独立开发，然后部署。
- en: Complicated and sophisticated applications are being constructed through the
    leverage of microservices. On the other side, massive applications are being dismantled
    into a collection of microservices.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 通过利用微服务，正在构建复杂和高级的应用程序。另一方面，大型应用程序正在被拆分为一组微服务。
- en: Microservices are typically small and independent processes that communicate
    with one other using well-defined and language-agnostic APIs. They are usable,
    reusable, interoperable, dynamically-composable, and self-defined. Microservices
    expose their unique and business-centric capabilities through well-intended interfaces
    to the outside world. Thus software integration gets simplified and sped up in
    a formalized manner. There are cross-cutting concerns and horizontal (business-agnostic)
    functions that usually get replicated across the source code for any enterprise-grade
    software system. They can be centralized using microservices. Some functions have
    to be frequently updated and upgraded using advanced technologies. Thus, not only
    application development, but also the maintenance aspect are both worrisome factors
    for worldwide enterprises. These specialized functionalities can be built as microservices
    and then exposed so they can be easily found and bound in software applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务通常是小型且独立的进程，它们通过定义良好且语言无关的API相互通信。它们是可用的、可重用的、互操作的、动态可组合的，并且是自我定义的。微服务通过精心设计的接口向外界展示其独特且以业务为中心的能力。因此，软件集成以规范化的方式得到简化并加快。在任何一个企业级软件系统中，通常会在源代码中复制跨领域的关注点和水平（业务无关）的功能。这些功能可以通过微服务集中化。一些功能需要使用先进技术频繁更新和升级。因此，不仅应用开发，维护方面也是全球企业担忧的因素。这些专门的功能可以构建为微服务，然后暴露出来，以便在软件应用中轻松找到和绑定。
- en: Why legacy modernization?
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么需要遗留系统现代化？
- en: Legacy software applications were written decades ago using outdated programming
    languages and are usually run on mainframe servers. They are massive in size,
    and hence, the goals of modification and maneuverability are very tough to implement.
    Third-party integration is another difficult assignment. To incorporate changes
    (induced by business, technology, and user) is time-consuming and error-prone.
    They're tightly coupled and usually run in a single process. All these properties
    make them unamendable and unapproachable for any kind of crucial advancements.
    They are not modern in the sense that they are not generally web and mobile-enabled.
    Precisely speaking, they aren't agile or adaptive. They're resisting technology
    upgrades, which makes them very expensive to maintain. Thus, moving from legacy
    applications to modern applications by leveraging a bevy of pioneering technologies,
    programming languages, and development frameworks and platforms has gained a lot
    of attention. With newer architectural patterns and styles emerging and evolving,
    software architects and developers are keen to embrace them to bring forth competitive
    applications that can easily fulfil the varying expectations of businesses and
    people.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 遗留软件应用是几十年前使用过时的编程语言编写的，通常在大型机服务器上运行。它们体积庞大，因此修改和操作的目标非常难以实现。第三方集成是另一个难题。要整合变化（由业务、技术和用户引起）既耗时又容易出错。它们紧密耦合，通常在一个进程中运行。所有这些特性使它们无法修改，也无法进行任何关键性的进步。它们在意义上并不现代，因为它们通常不具备网页和移动功能。确切地说，它们并不敏捷或适应性差。它们抵制技术升级，这使得它们维护成本非常高。因此，通过利用一系列开创性的技术、编程语言、开发框架和平台，从遗留应用迁移到现代化应用已经引起了广泛关注。随着新的架构模式和风格的出现和演变，软件架构师和开发者热衷于采用它们，以推出能够轻松满足企业和人们不断变化期望的竞争性应用。
- en: The concept of DevOps is sweeping across IT organizations in order to eliminate
    any kind of friction between development teams and operation teams. Greenfield
    projects and cloud-native applications are being deployed and operated using this
    new concept. There are write-ups in this chapter about DevOps, which is being
    positioned as a must for the digital era. As there is constant chopping and changing
    being demanded in software solutions from various sources, the significance of
    DevOps is garnering more support.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps的概念正在席卷IT组织，以消除开发团队和运维团队之间的任何摩擦。绿色field项目和云原生应用正在使用这个新概念进行部署和运营。本章中有关DevOps的描述，DevOps被定位为数字时代的必备条件。由于来自各个来源的软件解决方案需要不断的调整和变化，DevOps的重要性正在获得更多的支持。
- en: For monolithic applications, functionalities are duplicated in the source code.
    Several units across the enterprise bring forth their functionalities, which have
    to be integrated with the core application. When a company buys another company,
    their source code has to be integrated. Such integrations ultimately lead to the
    duplication of the same functionality. If there's any modification to be incorporated
    in to a single functionality, the whole monolithic application has to be recompiled
    and redeployed. There are definitely some deficiencies as far as legacy applications
    are concerned. That's why modernization has started to gain attention.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于单体应用，功能在源代码中被重复。企业中的多个单元提供它们的功能，这些功能必须与核心应用集成。当一家公司收购另一家公司时，它们的源代码必须集成。这种集成最终导致相同功能的重复。如果需要对单个功能进行任何修改，整个单体应用都必须重新编译和重新部署。从遗留应用的角度来看，确实存在一些缺陷。这就是为什么现代化开始受到关注。
- en: Legacy-to-digital application modernization
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗留系统到数字化应用现代化
- en: Application modernization is all about empowering currently-running applications
    to meet business goals and customer expectations, which are constantly evolving.
    There are a number of digital technologies and **artificial intelligence** (**AI**)
    algorithms emerging, which are evolving quickly. We have scores of edge/digitization
    technologies, such as sensors, actuators, implants, wearables, stickers, tags,
    codes, chips, controllers, smart dust, specks, beacons, and LED elements, for
    creating digitized entities out of physical, mechanical, and electrical systems.
    That is, our ground-level physical systems become digitized, joining mainstream
    computing.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现代化关乎赋予当前运行的应用程序以满足不断变化的企业目标和客户期望的能力。有许多数字技术和**人工智能**（**AI**）算法正在涌现，它们发展迅速。我们有大量的边缘/数字化技术，如传感器、执行器、植入物、可穿戴设备、贴纸、标签、代码、芯片、控制器、智能尘埃、微粒、信标和LED元件，用于将物理、机械和电气系统数字化。也就是说，我们的底层物理系统实现了数字化，加入了主流计算。
- en: A bevy of digital technologies (cloud, mobility, social, IoT, and analytics)
    are gathering a lot of attention because they're capable of bringing in a dazzling
    array of digital innovations, disruptions, and transformations. With the maturity
    of AI algorithms, the domain of digital intelligence is gaining prominence in
    making sense of digital data. Thus, the real digital transformation involves digital
    and digital-intelligence technologies. Also, there are outdated and old-fashioned
    applications and technologies aplenty. To attain a real digital transformation,
    these old, yet currently-running, applications have to be modified using modernization
    and migration tools. The hugely popular digital technologies that we've mentioned
    have to be leveraged to bring advancement to legacy applications.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列数字技术（云、移动性、社交、物联网和数据分析）因其能够带来令人眼花缭乱的数字创新、颠覆和转型而受到广泛关注。随着AI算法的成熟，数字智能领域在理解数字数据方面越来越受到重视。因此，真正的数字化转型涉及数字和数字智能技术。此外，还有大量过时和陈旧的应用程序和技术。要实现真正的数字化转型，这些旧的应用程序必须使用现代化和迁移工具进行修改。我们提到的这些广受欢迎的数字技术必须被利用，以推动遗留应用程序的进步。
- en: Accomplishing modernization
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现现代化
- en: 'Many modernization and migration experts have spoken on how to accomplish modernization
    without bringing down existing business workloads and IT services. To perform
    modernization, whether to go for re-engineering, re-architecting, re-platforming,
    and so on, is the moot question to be answered. Other considerations include whether
    modernization helps applications maintain their original performance level and
    capabilities, such as scalability, availability, reliability, and security. The
    following diagram shows how a litany of application modernization and migration
    technologies come in handy for elevating legacy applications to newer applications
    that fulfill business needs, market demands, customer satisfaction, and higher
    productivity:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 许多现代化和迁移专家已经讨论了如何在不降低现有业务工作负载和IT服务的情况下实现现代化。进行现代化，无论是选择重新工程化、重新架构、重新平台化等等，都是需要回答的悬而未决的问题。其他考虑因素包括现代化是否有助于应用程序保持其原始的性能水平和能力，例如可扩展性、可用性、可靠性和安全性。以下图表展示了众多应用程序现代化和迁移技术如何有助于将遗留应用程序提升到满足业务需求、市场需求、客户满意度和更高生产力的新应用程序：
- en: '![](img/e9a041fd-2270-4e35-b5f8-e7ea232ce32a.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e9a041fd-2270-4e35-b5f8-e7ea232ce32a.png)'
- en: Source: https://www.winwire.com/wp-content/uploads/2018/07/Application-Modernization-Assess-Strategize-Modernize.png
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：https://www.winwire.com/wp-content/uploads/2018/07/Application-Modernization-Assess-Strategize-Modernize.png
- en: Path-breaking technologies and breakthrough tools enable the smooth transition
    toward newer applications that are knowledge-filled, event-driven, service-oriented,
    cloud-hosted, process-aware, and people-centric.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 开创性的技术和突破性工具使得向知识丰富、事件驱动、面向服务、云托管、流程感知和以人为本的新应用程序的平稳过渡成为可能。
- en: Approaching legacy application modernization
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 面向遗留应用程序的现代化方法
- en: Having realized the need to modernize legacy software packages in order to be
    relevant to their stakeholders, partners, employees, and consumers, business organizations
    are asking their IT teams to come with viable techniques to speed up and simplify
    the aspects of modernizing legacy applications. There are a few strategically-sound
    application architectures, scores of methodologies, and best practices toward
    application modernization. Modernized applications are being readied to work on
    cloud environments, which are generally consolidated, centralized, shared, virtualized
    and containerized, and automated ones. In short, cloud environments are highly
    optimized and organized in order to be extremely and elegantly agile and adaptive.
    Applications have to be readied to run in clouds without any problem and to reap
    all the originally envisaged benefits of the cloud. The emergence of MSA can help
    to accelerate legacy modernization.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使遗留软件包与利益相关者、合作伙伴、员工和消费者保持相关性，企业组织正要求他们的IT团队提供可行的技术来加速和简化遗留应用程序现代化的各个方面。在应用现代化方面，存在几种战略上可行的应用架构、众多方法和最佳实践。现代化的应用程序正在准备在云环境中运行，这些云环境通常是整合的、集中的、共享的、虚拟化的和容器化的，并且是自动化的。简而言之，云环境高度优化和组织，以便极其优雅和敏捷地适应。应用程序必须准备好在云中无任何问题地运行，并实现所有最初设想的好处。MSA的出现可以帮助加速遗留现代化。
- en: Microservices-centric legacy application modernization
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以微服务为中心的遗留应用程序现代化
- en: Microservices are fine-grained, self-defined, and autonomous services that produce
    and sustain next-generation, enterprise-grade applications. With MSA, every application
    is structured as a collection of microservices. In other words, when appropriately
    combining multiple microservices, we arrive at competent applications, which are
    cloud-hosted, service-oriented, event-driven, insight-filled, enterprise-grade,
    and people-centric. Software architects are very excited about the futuristic
    and artistic role of the MSA pattern in architecting production-ready software
    solutions. The design of complicated and sophisticated applications that leverage
    hundreds of different and distributed microservices as application modules is
    attracting a lot of attention. The MSA paradigm is being positioned as an agile
    application design methodology. This is being seen as a positive development in **software
    engineering** (**SE**), as there are many agile development techniques and frameworks.
    Also, the solidity of the DevOps culture in large-sized business enterprises is
    speeding up the rollout of applications into production environments. That is,
    issues and friction between development and deployment teams are being surmounted
    and this empowerment leads to speedier application deployment in various environments
    (development, testing, staging, and production). Thus, development and deployment
    are being augmented through a host of advancements in the IT field.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是细粒度、自我定义和自主的服务，它们产生并维持下一代企业级应用程序。使用MSA，每个应用程序都被构建为一个微服务的集合。换句话说，当适当地组合多个微服务时，我们得到的是能够胜任的应用程序，这些应用程序是云托管的、面向服务的、事件驱动的、充满洞察力的、企业级的和以人为本的。软件架构师对MSA模式在构建生产就绪软件解决方案中的未来派和艺术性角色感到非常兴奋。利用数百个不同和分布式微服务作为应用程序模块的复杂和复杂应用程序的设计吸引了大量关注。MSA范式被定位为敏捷应用设计方法。这被视为软件工程（SE）中的积极发展，因为有许多敏捷开发技术和框架。此外，大型企业中的DevOps文化的稳固性正在加快应用程序在生产环境中的部署。也就是说，开发和部署团队之间的问题和摩擦正在克服，这种赋权导致在各种环境中（开发、测试、预生产和生产）应用程序部署速度更快。因此，开发和部署通过IT领域的众多进步得到了增强。
- en: The flourishing MSA style significantly simplified designing and architecting
    applications. If our business workloads and IT services are made out of microservices,
    they become extremely flexible, scalable, customizable, and configurable. We've
    seen why worldwide enterprises are very serious in embracing the MSA pattern in
    order to be competitive in their day-to-day activities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 繁荣的MSA风格显著简化了应用程序的设计和架构。如果我们的业务工作负载和IT服务由微服务组成，它们将变得极其灵活、可扩展、可定制和可配置。我们已经看到了为什么全球企业都非常认真地采用MSA模式，以便在日常活动中保持竞争力。
- en: 'Architects and experts have come out with a few achievable mechanisms for smoothly
    transitioning from monolithic to microservices-based applications. The modernization
    steps are being accomplished through multiple phases. The first phase is illustrated
    in the following diagram (source: [https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy](https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy)).
    This talks about identifying the distinct business functionalities of the legacy
    application and separating them out to implement them as microservices by giving
    the underlying service implements, which are typically polyglot, a RESTful API.
    In the *Service composition* section, we talked about phase two of the following
    diagram:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师和专家已经提出了一些可行的机制，以实现从单体到基于微服务的应用程序的平稳过渡。现代化步骤正在通过多个阶段完成。第一阶段如图所示（来源：[https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy](https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy)）。这讨论了识别遗留应用程序的独特业务功能并将它们分离出来，通过提供底层服务实现，通常是多语言，一个RESTful
    API来实现微服务。在*服务组合*部分，我们讨论了以下图的第二阶段：
- en: '![](img/eb4a2506-cd05-4dc1-a181-e76d1cc2ea35.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/eb4a2506-cd05-4dc1-a181-e76d1cc2ea35.png)'
- en: Service extraction
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务提取
- en: At the end of the first phase, we get a number of microservices with their own
    data-storage facilities. These microservices are modular in nature and interoperable,
    and they are intrinsically capable of interacting with one another through the
    APIs. The widely-recommended design approach is to design and develop microservices
    for different domains. The widely-used aspect is **domain-driven design** (**DDD**).
    For example, take an e-commerce application. The domains include the shopping
    cart, payment, shipping, notifications, credit verification, and analytics. Every
    domain is looked at as a business functionality and hence implemented as a microservice.
    There can be multiple methods within a microservice. There can be intra- as well
    as inter-microservice communication and collaboration.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一阶段结束时，我们得到了一些具有自己数据存储设施的微服务。这些微服务本质上是模块化的、互操作的，并且它们本质上能够通过API相互交互。广泛推荐的设计方法是针对不同领域设计和开发微服务。广泛使用的是**领域驱动设计**（**DDD**）。例如，以电子商务应用程序为例。领域包括购物车、支付、运输、通知、信用验证和分析。每个领域都被视为一个业务功能，因此作为微服务实现。一个微服务内可以有多个方法。可以有微服务内和微服务间的通信和协作。
- en: The microservices within a domain are supposed to interact frequently. There
    are situations where microservices in a domain have to connect and correspond
    with microservices in other domains in order to fulfill different business processes
    and activities. Thus, an e-business and e-commerce application is bound to have
    several domains and hundreds of microservices. With containers emerging as the
    best fit for hosting and running microservices in a fault-tolerant manner, there
    can be thousands of containers to run microservices-centric applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个域内的微服务应该频繁交互。有时，一个域内的微服务需要与其他域的微服务连接和对应，以完成不同的业务流程和活动。因此，电子商务和电子商务应用程序必然会有几个域和数百个微服务。随着容器成为在容错方式下托管和运行微服务的最佳选择，可能会有数千个容器来运行以微服务为中心的应用程序。
- en: Service composition
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务组合
- en: The second phase ([https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy](https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy))
    is to go for service composition. In the other chapters, we discussed various
    composition techniques and tools; there are two approaches—orchestration and choreography.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 第二阶段（[https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy](https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy)）是进行服务组合。在其他章节中，我们讨论了各种组合技术和工具；有两种方法——编排和协奏。
- en: 'The following diagram conveys how a centralized broker/hub/bus comes in handy
    when establishing connectivity and accomplishing data processing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图说明了在建立连接和完成数据处理时，集中式代理/中心/总线如何派上用场：
- en: '![](img/2788cf20-7ff4-49bf-a318-bbce16c29b4e.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2788cf20-7ff4-49bf-a318-bbce16c29b4e.png)'
- en: Service migration
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务迁移
- en: The third phase is all about migrating microservices to cloud environments (private,
    public, and hybrid). There are several public cloud environments across the globe
    and they offer a number of benefits, such as affordability, scalability, availability,
    and security. Microservices can accommodate all kinds of changes induced by business
    needs, end users, expectations, and technology advancements. The scale and simplicity,
    along with frequent changes, make microservices the perfect tool for enterprise
    IT in fulfilling the various functional and non-functional requirements. Also,
    microservices enable the smooth transition from monolithic to microservices applications.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 第三阶段是关于将微服务迁移到云环境（私有、公共和混合）。全球有多个公共云环境，它们提供许多好处，如成本效益、可扩展性、可用性和安全性。微服务可以适应由业务需求、最终用户、期望和技术进步引起的所有变化。规模和简单性，以及频繁的变化，使微服务成为满足企业IT各种功能和非功能需求的完美工具。此外，微服务还使从单体应用平滑过渡到微服务应用成为可能。
- en: Not all applications are fit for modernization and migration to cloud environments.
    Applications have to be continuously subjected to a variety of investigations
    in order to double-check their value and validity. Application rationalization,
    optimization, and modernization are vital for applications to be continuously
    relevant for their administrators and users. With the arrival of highly-optimized
    and -organized IT infrastructures, applications need to be be able to work in
    newer environments while guaranteeing all the performance requirements. Some applications
    have to be meticulously refactored to be taken to the cloud. Experts prescribe
    a series of best practices for legacy modernization and migration. We'll look
    at one such approach in the following section; more details can be found at [https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy](https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有应用都适合现代化和迁移到云环境。应用必须持续接受各种调查，以确保其价值和有效性。应用合理化、优化和现代化对于应用持续与其管理员和用户相关至关重要。随着高度优化和组织良好的IT基础设施的出现，应用需要能够在新的环境中工作，同时保证所有性能要求。一些应用必须经过精心重构才能迁移到云端。专家们为传统现代化和迁移提出了一系列最佳实践。我们将在下一节中探讨这种方法；更多详情可以在[https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy](https://dzone.com/articles/choosing-a-legacy-software-modernization-strategy)找到。
- en: Container-centric legacy application modernization
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以容器为中心的传统应用现代化
- en: Legacy applications can be directly containerized to be presented as modernized
    applications for cloud environments. The other prominent option is to subdivide
    the legacy application into multiple components, where each component caters to
    a business functionality. Now every business functionality can be converted into
    a microservice. Thus, there are microservices-centric and container-centric methods
    for effecting legacy modernization and migration to cloud environments.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用可以直接容器化，以在云环境中呈现为现代化的应用。另一个突出的选择是将传统应用细分为多个组件，其中每个组件都服务于一种业务功能。现在，每个业务功能都可以转换为微服务。因此，有以微服务为中心和以容器为中心的方法来实现传统应用的现代化和迁移到云环境。
- en: Any application can be directly containerized, but this transition may not work
    in the long run. Hence, applications have to be segmented into smaller, more easily-manageable
    pieces. Then those segments have to be service-enabled and then containerized.
    There are best practices, enabling patterns, knowledge guides, success stories,
    case studies, optimized processes, integrated and insightful platforms, and proven
    procedures for smoothening this sort of legacy remediation. Best-in-class frameworks
    and automated tools are flourishing to tackle the complexities that are associated
    with legacy transformations. Here's a list expressed by one modernization expert.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 任何应用都可以直接容器化，但这种过渡可能不会长期有效。因此，应用必须分割成更小、更易于管理的部分。然后这些部分必须实现服务化，然后容器化。有最佳实践、启用模式、知识指南、成功案例、案例研究、优化流程、集成和有洞察力的平台以及经过验证的程序来简化这种类型的传统修复。一流的框架和自动化工具正在蓬勃发展，以应对与遗产转型相关的复杂性。以下是某位现代化专家列出的一份清单。
- en: The first step is to break the monolithic application into a group of distinguishable
    components. These components can be easily and elegantly service-enabled and containerized.
    Those containerized images are stocked in publicly-available image repositories.
    These components have to be extremely modular (loosely or lightly coupled and
    highly cohesive) in order to contribute to the goals of modernization and migration.
    These are the business functionalities, the typical middle-tier components in
    any three-tiered application.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是将单体应用程序分解成一组可区分的组件。这些组件可以轻松优雅地实现服务化和容器化。这些容器化镜像存储在公开可用的镜像仓库中。这些组件必须极其模块化（松散或轻度耦合且高度内聚），以便为现代化和迁移的目标做出贡献。这些是业务功能，是任何三层应用程序中典型的中间层组件。
- en: Having created a collection of microservices that together make up the business
    logic of the application, the second step is to build data access as a service.
    That is, develop data services and expose them so that any application can use
    them to get the right data to complete business tasks. This setup decouples business
    and data logic so that there's no possibility for any kind of dependency-initiated
    issues. This data-logic layer is the final one, as per the specifications of three-tier
    applications. In the first step, we focused on creating application containers.
    In the second step, we talked about volume containers in order to store data to
    empower applications accordingly.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了构成应用程序业务逻辑的微服务集合之后，第二步是构建数据访问服务。也就是说，开发数据服务并将它们公开，以便任何应用程序都可以使用它们来获取完成业务任务所需的数据。这种设置解耦了业务和数据逻辑，因此不会出现任何类型的依赖性引发的问题。根据三层应用程序的规范，数据逻辑层是最后一层。在第一步中，我们专注于创建应用程序容器。在第二步中，我们讨论了存储数据以相应地增强应用程序的卷容器。
- en: The last step is all about testing. For an enterprise-scale application, we
    can have several microservices and their instances. Also, containers as the service
    runtime are now manifold. Microservices and their many instances can be run in
    separate containers and hence there will be many containers in a typical IT environment;
    that is, for an application, there can be multiple interactive and collaborative
    microservices. Each microservice can be run in multiple containers in order to
    support redundancy. Widely-demanded high availability can be achieved through
    multiple containers for a single microservice. Due to the fickle nature of containers,
    architects recommend many containers for hosting one microservice. To ensure high
    availability, there can be many instances of microservices. This way, if one service
    or container goes down, its service instances deployed in other containers come
    to the rescue. However, the real difficulty lies in testing such an intertwined
    environment. Precisely speaking, monolithic applications need to be tuned to become
    distributed and complicated applications. Though modern applications are agile,
    affordable, and adaptive, the management and operational complexities of microservices-centric
    applications are bound to escalate. Further on, detecting errors and debugging
    them to make applications error-free is a tedious job indeed. There are a few
    automated testing tools emerging for testing microservices. Experts are unearthing
    various ways of testing distributed microservices. Also, the testing procedure
    is being illustrated for composite microservices.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步完全是关于测试。对于企业级应用程序，我们可以有多个微服务和它们的实例。此外，作为服务运行时的容器现在也变得多种多样。微服务和它们的许多实例可以在单独的容器中运行，因此在典型的IT环境中将会有许多容器；也就是说，对于应用程序，可以有多个交互式和协作的微服务。每个微服务都可以在多个容器中运行，以支持冗余。通过单个微服务的多个容器可以实现广泛需求的高可用性。由于容器的易变性，架构师建议为单个微服务托管多个容器。为了确保高可用性，可以有多个微服务的实例。这样，如果一个服务或容器崩溃，其在其他容器中部署的服务实例就会前来救援。然而，真正的困难在于测试这种相互交织的环境。确切地说，单体应用程序需要调整以成为分布式和复杂的应用程序。尽管现代应用程序是敏捷的、经济的和适应性强的，但以微服务为中心的应用程序的管理和运营复杂性必然会升级。进一步来说，检测错误并调试它们以使应用程序无错误确实是一项繁琐的工作。现在出现了几款用于测试微服务的自动化测试工具。专家们正在探索测试分布式微服务的各种方法。此外，复合微服务的测试流程正在被阐述。
- en: Refactoring and rewriting
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重构和重写
- en: We've been writing about how the powerful emergence of microservices architecture
    is instigating the need for legacy modernization in order to embrace modernity.
    As we all know, the key mitigation technique has been *divide and conquer*. This
    mantra has been shining not only to engineer fresh systems but also to disintegrate
    legacy systems. As legacy applications are hugely complicated, partitioning them
    into a number of smaller pieces is also being accomplished through segmentation
    approaches. Functionality-based segregation is one way of implementing disintegration.
    Once a legacy application is subdivided into a number of application modules,
    the real modernization begins; that is, there are many application services to
    be extricated out of archaic and massive applications.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在讨论微服务架构的强大出现是如何引发对传统系统现代化改造的需求，以便拥抱现代性。众所周知，关键缓解技术一直是**分而治之**。这个格言不仅适用于构建新的系统，也适用于分解传统系统。由于传统应用程序极其复杂，通过分段方法将它们分割成多个较小的部分也是通过这种方式实现的。基于功能性的隔离是实现分解的一种方式。一旦传统应用程序被细分为多个应用程序模块，真正的现代化改造就开始了；也就是说，有许多应用程序服务需要从陈旧和庞大的应用程序中提取出来。
- en: As mentioned previously, the extracted application components are made into
    microservices in order to easily migrate them to cloud environments. There is
    a big gap between application components and microservices. Functionally, they
    are almost the same. But the structure of application components is hugely different
    from microservices. Therefore, it's paramount to devise a viable mechanism to
    close the gulf between application components and microservices. Refactoring or
    rewriting is the recommended approach to achieve modern legacy applications. Refactoring
    legacy software into a suite of microservices and enabling them to talk to one
    another on a per-need basis is being promoted as one of the surest ways to achieve
    modernization. With the faster maturity and stability of the microservices architectural
    style and containerization-enabled platforms, refactoring large-scale applications
    into fine-grained and well-designed microservices is gaining prominence.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，提取的应用程序组件被制作成微服务，以便轻松地将它们迁移到云环境中。应用程序组件和微服务之间存在很大的差距。在功能上，它们几乎相同。但应用程序组件的结构与微服务大相径庭。因此，设计一个可行的机制来弥合应用程序组件和微服务之间的差距至关重要。重构或重写是推荐的方法，以实现现代传统应用程序。将传统软件重构为一系列微服务，并使它们能够根据需要相互通信，被推广为实现现代化的最可靠方法之一。随着微服务架构风格和容器化平台成熟度和稳定性的提高，将大规模应用程序重构为细粒度和精心设计的微服务越来越受到重视。
- en: Modernization technique terms
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代化技术术语
- en: 'Legacy modernization is being accomplished in several ways. Applications can
    be subdivided into a number of smaller service components and each service is
    being rewritten using a modern programming language while guaranteeing the legacy
    application''s functionality. Even the original architecture of the legacy application
    can be changed using the latest architectural styles, such as SOA, EDA, or a combination
    of both. The legacy applications currently running on centralized and mainframe
    servers can be modernized to run on completely new platforms and infrastructures,
    such as cloud environments. Thus, the modernization strategy development and planning
    are done by taking several principles, goals, technologies, and tools into account.
    At different layers and levels, the required modernization gets done in a risk-free
    and strategically sound manner:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 传统现代化可以通过多种方式实现。可以将应用程序细分为多个较小的服务组件，并且每个服务都使用现代编程语言进行重写，同时保证传统应用程序的功能。甚至可以使用最新的架构风格，如SOA、EDA或两者的组合，来改变传统应用程序的原始架构。目前运行在集中式和主机服务器上的传统应用程序可以被现代化，以在完全新的平台和基础设施上运行，例如云环境。因此，现代化策略的开发和规划需要考虑多个原则、目标、技术和工具。在不同的层次和水平上，所需的现代化以无风险和战略性的方式进行：
- en: '**Refactoring** typically refers to reorganizing an application''s source code
    in order to bring some clarity and changes. Suppose the code written isn''t modular,
    or the code has a lot of duplicated code as it''s been written by different teams
    over the years of its development and maintenance. The integration with newly-acquired
    company software may also bring in some complexities. There are several other
    reasons to modernize. So, factoring out the code in order to fulfill some new
    requirements (business, technology, and users) is being touted as code refactoring.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构**通常指的是重新组织应用程序的源代码，以便带来一些清晰度和变化。假设编写的代码不是模块化的，或者由于多年来由不同的团队编写，代码中存在大量重复代码。与新获得的公司软件的集成也可能带来一些复杂性。还有其他几个原因需要现代化。因此，提取代码以满足一些新的要求（业务、技术和用户）被宣传为代码重构。'
- en: '**Rearchitecting and redesigning** both mean the same thing. Legacy applications
    can be modernized by rearchitecting the application using newer technologies,
    such as middleware solutions, database systems, execution platforms, visualization
    toolkits, and software infrastructure solutions. Also, with newer patterns for
    designing application components, redesigning is gaining prominence. With these
    architectural and design changes, new applications can have higher performance,
    scalability, security, availability, resilience, and sustainability. With powerful
    message-oriented middleware platforms and newer databases, such as NoSQL and NewSQL,
    modernization is a continuous affair to satisfy evolving business needs and to
    ensure the delight of customers.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构和重新设计**都意味着同一件事。通过使用更新技术（如中间件解决方案、数据库系统、执行平台、可视化工具包和软件基础设施解决方案）重构应用程序，可以现代化遗留应用程序。此外，随着设计应用程序组件的新模式的出现，重新设计正在变得突出。随着这些架构和设计的变化，新应用程序可以具有更高的性能、可扩展性、安全性、可用性、弹性和可持续性。有了强大的面向消息的中间件平台和新的数据库，如NoSQL和NewSQL，现代化是一个持续的过程，以满足不断变化的企业需求，并确保客户的满意度。'
- en: '**Replatforming** involves taking the legacy application to be deployed and
    running it on newer platforms and infrastructures in order to accrue the platform''s
    and infrastructure''s benefits.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重构平台**涉及将待部署的遗留应用程序迁移到更新的平台和基础设施上，以便获得平台和基础设施的好处。'
- en: '**Rewriting** the application source code using modern programming languages
    is done in order to experience the distinct advantages of the new programming
    language. For example, **Ballerina** is a new programming language and is considered
    by some as the best-in-class language for coding microservices. This language
    simplifies service, data, and application integration.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重写**应用程序源代码使用现代编程语言是为了体验新编程语言的独特优势。例如，**Ballerina**是一种新的编程语言，有些人认为它是编写微服务的最佳语言。这种语言简化了服务、数据和应用程序的集成。'
- en: 'Here''s a list of a few best practices while performing modernization:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行现代化时，以下是一些最佳实践的列表：
- en: We must be sure that the refactoring technique works. After taking an easy-to-do
    application component out of the legacy application under transformation, then
    we must embark on refactoring or rewriting; that is, we can refactor the source
    code of the application component to convert it into a microservice. Otherwise,
    we can rewrite the code to craft a microservice without changing the functionality
    of the original application component. Then, the idea is to take the version that's
    very close to the final implementation.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们必须确保重构技术是有效的。在从正在转型的遗留应用程序中提取一个易于处理的应用组件之后，我们必须开始重构或重写；也就是说，我们可以重构应用程序组件的源代码，将其转换为微服务。否则，我们可以重写代码，创建一个不改变原始应用程序组件功能的微服务。然后，想法是采用与最终实现非常接近的版本。
- en: There's no need to refactor or rewrite the other components of the legacy application.
    Use the stub mechanism to check whether the refurbished or rewritten component
    mimics the old behavior; that is, it's mandatory to establish a seamless and spontaneous
    connectivity for the existing application components (not yet refactored or rewritten)
    with the newly-formulated service to understand whether there's any deviation
    or deficiency. This way, little wastage of time is guaranteed for legacy modernization,
    which happens to be a time-consuming job.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有必要重构或重写遗留应用程序的其他组件。使用存根机制来检查重构或重写的组件是否模仿了旧行为；也就是说，必须确保现有应用程序组件（尚未重构或重写）与新制定的服务之间建立无缝和自发的连接，以了解是否存在任何偏差或不足。这样，可以保证在遗留现代化过程中几乎不浪费任何时间，而这正是一项耗时的工作。
- en: Once a microservice is readied, it has to be taken to one or more software repositories
    (public and/or private) to enable access and usage by software developers and
    testers. This kind of centralized storage also contributes for source-code version
    control. There are **continuous integration** (**CI**) solutions to integrate,
    build, and test software services. With the overwhelming adoption of the enterprise
    DevOps concept, business applications get continuous and consistent integration,
    delivery, and deployment in order to take applications and services to their end
    users quickly, without any risk.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一旦微服务准备就绪，就必须将其放入一个或多个软件仓库（公共和/或私有）中，以便软件开发人员和测试人员能够访问和使用。这种集中式存储也有助于源代码版本控制。有**持续集成**（**CI**）解决方案来集成、构建和测试软件服务。随着企业DevOps概念的广泛应用，业务应用程序能够实现持续和一致的集成、交付和部署，以便快速将应用程序和服务推向最终用户，而没有任何风险。
- en: With the unprecedented popularity of the containerization movement, containerizing
    software applications has been getting more attention. Containerizing microservices
    brings a number of technical advantages to the table. There are write-ups and
    articles detailing how to quickly deliver and deploy microservices individually
    and collectively. With container clustering, orchestration, and management platform
    solutions emerging, the containerization paradigm is becoming penetrative, participative,
    and pervasive. There are a litany of automated tools to augment the various activities
    associated with cloud orchestration, realizing multi-cloud container applications,
    and infrastructure as code. The convergence of containers and microservices opens
    up a growing array of innovations, disruptions, and transformations. There are
    integrated platforms that enable the dream service era.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着容器化运动的空前普及，对软件应用进行容器化的关注度也在不断提升。容器化微服务带来了一系列技术优势。有许多文章详细介绍了如何快速交付和部署单个和集体的微服务。随着容器集群、编排和管理平台解决方案的出现，容器化范式正变得深入、参与和普遍。有众多自动化工具来增强与云编排、实现多云容器应用和基础设施即代码相关的各种活动。容器和微服务的融合开辟了日益增长的创新、颠覆和转型。有集成平台能够实现梦想服务时代。
- en: Application components have to be chosen for refactoring or rewriting using
    some priority factors. Not all components are suitable for modernization. There
    are a few important parameters required to do the prioritization properly. The
    key parameters to be considered include the ease of extraction, the roadmap, and
    possible risks. Some of the components may become obsolete. Thus, prioritization
    plays an important role in accomplishing the modernization job in an affordable,
    risk-free, and strategically-sound manner.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在重构或重写应用程序组件时，必须根据一些优先因素进行选择。并非所有组件都适合现代化。进行正确优先级排序需要一些重要参数。需要考虑的关键参数包括提取的简便性、路线图和可能的风险。一些组件可能会变得过时。因此，优先级在以经济、无风险和战略合理的方式完成现代化工作中起着重要作用。
- en: Data virtualization is the way forward for application modules to correspond
    realistically with the data sources of the legacy application. It's therefore
    recommended that instead of focusing on data-structure transformation, focus on
    creating and using appropriate proxies that can transform data from different
    databases into a standardized format. This standardization helps the newly-created
    microservices (whether through refactoring or rewriting) to connect and interact
    with the data without any major hitch.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据虚拟化是应用模块与遗留应用的数据源实现真实对应的方式。因此，建议不要专注于数据结构转换，而应专注于创建和使用适当的代理，这些代理可以将来自不同数据库的数据转换为标准格式。这种标准化有助于新创建的微服务（无论是通过重构还是重写）连接和交互数据，而不会出现任何重大问题。
- en: Microservices are small and accommodative. Fixing defects, security holes, and
    vulnerabilities is quite easy with microservices. Performance increments, root
    cause analysis, and unified threat management form composite applications that
    are business-critical, process-aware, and cloud-enabled. The faster deployment
    of microservices in production environments is another positive factor. Specific
    microservices in microservices-centric applications can be replaced with newer
    ones, whereas this sort of facility isn't available in monolithic applications.
    Adding features is therefore a smooth affair.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务小而灵活。使用微服务修复缺陷、安全漏洞和漏洞相当容易。性能提升、根本原因分析和统一威胁管理形成关键业务、流程感知和云启用的复合应用。微服务在生产环境中的快速部署是另一个积极因素。在以微服务为中心的应用中，可以替换特定的微服务以使用新的微服务，而在单体应用中这种功能不可用。因此，添加功能是一个顺畅的过程。
- en: Legacy modernization through microservices
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过微服务进行遗留应用现代化
- en: 'There are many real-world reasons why the industry is very optimistic about
    MSA for modernizing legacy applications. There are several valid differences between
    monolithic and microservices-centric applications, as represented in the following
    diagram:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 行业对MSA用于现代化遗留应用非常乐观，有许多现实原因。单体应用和以微服务为中心的应用之间存在几个有效差异，如下面的图表所示：
- en: '![](img/cc94cd4e-a4ef-4788-9d6f-7c9cdefb185b.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/cc94cd4e-a4ef-4788-9d6f-7c9cdefb185b.png)'
- en: Monolithic applications follow a heavily-centralized architecture, whereas **Microservices**
    go for a distributed architecture. Due to the exponential increase in data size
    and the usage of commodity servers, the IT world is leaning toward distributed
    computing. Also, services are being developed and deployed by worldwide software
    developers to geographically-distributed servers. Thus, distributed computing
    can't be taken lightly anymore. MSA intrinsically supports the distributed computing
    characteristics and hence, is flourishing.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 单体应用遵循高度集中的架构，而**微服务**则采用分布式架构。由于数据规模呈指数级增长以及通用服务器的使用，IT界正倾向于分布式计算。此外，服务正由全球软件开发者开发并在地理上分布的服务器上部署。因此，分布式计算不能再被轻视。MSA本质支持分布式计算特性，因此，它正在蓬勃发展。
- en: As previously explained, each microservice fulfills one or more business functionalities.
    That is, different business capabilities are implemented through separate microservices
    running on different processes. For an e-commerce application, we can have microservices
    for various modules, such as the shopping cart, customer analytics, the payment
    gateway, warehousing, shipping, replenishment, inventory management, and email
    notifications. Web-scale applications are embracing the MSA in order to be business-friendly.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，每个微服务完成一个或多个业务功能。也就是说，不同的业务能力是通过在不同的进程上运行的单独微服务实现的。对于电子商务应用，我们可以有购物车、客户分析、支付网关、仓储、运输、补给、库存管理和电子邮件通知等模块的微服务。Web规模应用正在采用MSA以实现业务友好性。
- en: For applications with frequently varying loads (where the number of users changes
    quickly and there can be sudden spikes in the number of messages with different
    data sizes), there is an insistence for mechanisms that innately support dynamic,
    horizontal, and real-time scalability. Through containerized microservices, we
    can achieve that kind of scalability, as containers are lightweight and can boot
    up in a matter of seconds.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对于经常变化负载的应用（用户数量变化快，可能会有不同数据大小的消息数量突然增加），需要机制来支持动态的、横向的、实时的可伸缩性。通过容器化的微服务，我们可以实现这种可伸缩性，因为容器轻量级且可以在几秒钟内启动。
- en: Microservices eliminate the problems associated with the tightly-coupled application
    components of monolithic applications. Microservices can be integrated through
    various middleware products (synchronous and asynchronous communication). Due
    to the decoupling nature of microservices, microservices can be independently
    designed, developed, and deployed in production environments. That is, updating
    and upgrading microservices dooesn't affect other components of a microservices-centric
    application. There are a few novel testing and deployment methods emerging and
    evolving in order to bring the utmost dynamism to microservices environments.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务消除了与单体应用程序紧密耦合的应用组件相关的问题。微服务可以通过各种中间件产品（同步和异步通信）进行集成。由于微服务的解耦特性，微服务可以独立设计、开发和部署在生产环境中。也就是说，更新和升级微服务不会影响以微服务为中心的应用程序的其他组件。一些新颖的测试和部署方法正在出现和演变，以给微服务环境带来最大的动态性。
- en: The distinctions of microservices
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务的区别
- en: Microservices are technology-agnostic, which means the technology lock-in problem
    gets resolved through the MSA style. Therefore, it's being touted as a solution
    that fully complies with the polyglot architecture pattern. And microservices
    can be coded using any programming language. There are several microservice development
    frameworks for speedy implementation and installation. MSA supports a number of
    the latest communication and data-transmission protocols. The service adapter
    ecosystem is continuously growing in order to integrate with disparate application
    services. The interfaces of microservices are very formalized and hence dependency
    issues don't rear their ugly heads.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务是技术无关的，这意味着通过MSA风格解决了技术锁定问题。因此，它被宣传为完全符合多语言架构模式的解决方案。并且可以使用任何编程语言编写微服务。有几种微服务开发框架用于快速实施和安装。MSA支持许多最新的通信和数据传输协议。服务适配器生态系统正在不断增长，以便与不同的应用程序服务集成。微服务的接口非常正式化，因此依赖性问题不会出现。
- en: Composite applications are quickly realized through static as well as dynamic
    service-composition methods. There are script languages for writing configuration
    and composition files. There are data representation, exchange, and persistence
    mechanisms. The closer association with the containerization movement has come
    at the right time for microservices to speed up software engineering tasks. On
    the other side, microservices emerge as the best at partitioning legacy and old-fashioned
    applications into multiple interactive and autonomous microservices. Thus, legacy
    modernization is being spruced up by business enterprises due to advancements
    in the MSA space.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 复合应用程序可以通过静态和动态服务组合方法快速实现。有用于编写配置和组合文件的脚本语言。有数据表示、交换和持久化机制。与容器化运动的紧密联系为微服务加快软件工程任务提供了合适的时间。另一方面，微服务在将遗留和过时应用程序分割成多个交互式和自主微服务方面表现出色。因此，由于MSA领域的进步，企业正在通过遗留现代化来提升业务。
- en: The code samples
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 代码示例
- en: In the GitHub repository, readers can find some examples for developing microservices
    using the Java language. Then, there are some examples of how to compose multiple
    microservices to produce process-aware and multi-container composite applications.
    Legacy refactoring is all about making changes in the code segments of a legacy
    function to present it as a microservice. The combination of such microservices
    results in microservices-centric modern applications. Microservices can be built
    from the ground up. Or, using automated tools, legacy application code snippets
    can be converted into microservices.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub仓库中，读者可以找到一些使用Java语言开发微服务的示例。然后，还有一些示例展示了如何组合多个微服务以生成过程感知和多容器复合应用程序。遗留重构主要涉及对遗留函数代码段进行更改，以将其呈现为微服务。这些微服务的组合导致了以微服务为中心的现代应用程序。微服务可以从零开始构建。或者，使用自动化工具，遗留应用程序代码片段可以被转换为微服务。
- en: The major hurdles to overcome
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 克服主要障碍
- en: 'However, there are certain hurdles to overcome. This section lists them out.
    Though the MSA style is being proclaimed as the most optimized and organized approach
    for legacy modernization, there are a few tricky issues confronting business and
    IT teams:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，还有一些障碍需要克服。本节将列出它们。尽管MSA风格被宣称为遗留现代化的最优化和有组织的途径，但商业和IT团队面临着一些棘手的问题：
- en: Microservices, as previously indicated, result in distributed systems and hence,
    developers have to explore how to extract the various business functions from
    the tightly-integrated monolithic applications, refactor or rewrite the chosen
    ones as microservices, and keep the newly-formed microservices linked to the remainder
    of the legacy application in order to verify whether everything works as wanted.
    This isn't an easy task and hence it's a definite obstacle on the modernization
    journey.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如前所述，微服务导致分布式系统，因此，开发者必须探索如何从紧密集成的单体应用程序中提取各种业务功能，将选定的部分重构或重写为微服务，并保持新形成的微服务与遗留应用程序的其余部分相连，以验证是否一切按预期工作。这不是一项容易的任务，因此它是现代化旅程中的一个明确的障碍。
- en: Previously, any monolithic application ran inside a single process. The participating
    application components talked to one another using the language feature. There
    are **remote procedure calls** (**RPCs**) and **remote method invocations** (**RMIs**);
    in-process communication is risk-free and fast. However, microservices' calls
    go over a network. RESTful interfaces are the dominant way of approaching distant
    microservices. Network latency and other network-related problems can damage the
    resilience of microservices. That is, inter-service communication can cause some
    network-associated issues. Microservices are being stuffed with APIs. APIs are
    the first point of contact for any microservice to interact with other microservices,
    which can be running in the same machine, rack, floor, or even in geographically-distributed
    cloud environments. API versions can differ, the data formats of messages getting
    exchanged between microservices APIs can create mismatch problems, network congestions
    can occur, and the varying loads on microservices may contribute for the slowdown
    and even failure of microservices.
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以前，任何单体应用程序都在单个进程中运行。参与的应用程序组件使用语言特性相互通信。有**远程过程调用（RPCs**）和**远程方法调用（RMIs**）；进程内通信是风险低且快速的。然而，微服务的调用是通过网络进行的。RESTful接口是访问远程微服务的占主导地位的方式。网络延迟和其他网络相关问题可能会损害微服务的弹性。也就是说，服务间的通信可能会引起一些与网络相关的问题。微服务被填充了API。API是任何微服务与其他微服务（可能运行在同一台机器、机架、楼层甚至地理上分布的云环境中）交互的第一个接触点。API版本可能不同，微服务API之间交换的消息的数据格式可能造成不匹配问题，网络拥塞可能发生，微服务上的不同负载可能导致微服务减速甚至失败。
- en: Testing microservices brings its own problems. Monolithic applications can be
    easily tested because they have a combined, single code base. That isn't the case
    with microservices. In the case of microservices, every microservice has to be
    individually tested. Further on, microservices also have to be tested collectively.
    There are newer approaches that simplify testing microservices.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试微服务带来了它自己的问题。单体应用程序可以很容易地测试，因为它们有一个结合的单一代码库。微服务的情况并非如此。在微服务的情况下，每个微服务都必须单独测试。进一步来说，微服务还必须集体测试。有一些新的方法可以简化微服务的测试。
- en: Microservices acquire special consideration because of the widespread adoption
    of DevOps tools. The aim of DevOps is to speed up service deployment. That is,
    specific services can be chosen and deployed. Thus, to avail of all the benefits
    of the MSA, business enterprises have to embrace DevOps.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于DevOps工具的广泛应用，微服务需要特别考虑。DevOps的目标是加快服务部署。也就是说，可以选择并部署特定的服务。因此，为了获得MSA的所有好处，企业必须接受DevOps。
- en: Without an ounce of doubt, microservices open up fresh possibilities and opportunities.
    Though there are a few options for legacy modernization, modernizing microservices-centric
    legacy applications is being pronounced as the best way forward. The microservices
    approach is the best way for enterprises to be digitally disrupted and transformed.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，微服务开辟了新的可能性和机会。尽管有几种针对遗留系统现代化的选择，但将以微服务为中心的遗留应用程序现代化被公认为前进的最佳方式。微服务方法是企业实现数字化颠覆和转型的最佳途径。
- en: Modernizing and migrating legacy applications – the role of cloud environments
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 现代化和迁移遗留应用程序——云环境的作用
- en: The technology space is continuously evolving, and is being strengthened with
    the adoption of newer technologies and tools. For example, the cloud paradigm
    has redefined the IT domain completely. Cloud technologies have made it possible
    to have highly optimized and organized IT to host any kind of business application.
    Hitherto unknown IT services are being formulated and delivered, and newer business
    models are emerging to cater to different sections and segments of the market,
    which is extremely knowledge-driven these days.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 技术领域正在不断演变，并且随着新技术的采用和工具的加强而得到巩固。例如，云计算范式已经完全重新定义了IT领域。云计算技术使得能够拥有高度优化和组织的IT来托管任何类型的业务应用程序成为可能。以前未知的IT服务正在被制定和交付，并且新的商业模式正在出现，以满足市场不同部分和细分市场的需求，而现在的市场极为知识驱动。
- en: In the recent past, we've heard about containers and microservices more often.
    They are showing a lot of promise in bringing advancements in software engineering.
    The cloud journey is also progressing speedily. This progress means old applications
    need to be refurbished using the latest technologies, so they can be hosted and
    managed in cloud environments. That is, massive applications are partitioned into
    a pool of microservices, then they are containerized, and stocked in container-image
    directories. Container orchestration platforms then provision container resources,
    fetch container images, and deploy them.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的一段时间里，我们经常听到关于容器和微服务的话题。它们在推动软件工程进步方面展现出巨大的潜力。云计算之旅也在迅速发展。这种进步意味着旧应用程序需要使用最新的技术进行翻新，以便它们可以在云环境中托管和管理。也就是说，大型应用程序被分割成一组微服务，然后它们被容器化，并存储在容器镜像目录中。容器编排平台随后提供容器资源，获取容器镜像，并将它们部署。
- en: The extensive use of DevOps concepts has accelerated IT operations. A kind of
    DevOps pipeline (the end-to-end workflow) gets created to sequence the actions
    to be taken to take the code to production environments. When the source code
    of any freshly-baked or changed microservice is committed into code repositories,
    typically a signal is sent to the chosen CI tool (such as Jenkins). CI tools are
    for building, testing, and integrating software applications. Then, continuous
    delivery and deployment tools take the application to production environments.
    In this chapter, we've talked extensively about how legacy applications are being
    modernized into a spectrum of microservices and then migrated to cloud environments.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps概念的广泛使用加速了IT运营。创建了一种DevOps管道（端到端的工作流程），以按顺序排列将代码带到生产环境所需采取的操作。当任何新制作或更改的微服务的源代码提交到代码仓库时，通常会向选定的CI工具（如Jenkins）发送信号。CI工具用于构建、测试和集成软件应用程序。然后，持续交付和部署工具将应用程序带到生产环境中。在本章中，我们广泛讨论了如何将传统应用程序现代化为一系列微服务，然后迁移到云环境中。
- en: The need for cloud environments
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对云环境的需求
- en: The cloud idea has brought a paradigm shift into the IT space. Businesses are
    consciously embracing this technology in order to be relevant to their customers
    and consumers. Cloud environments are software-defined and hence cloud infrastructures
    (server machines, storage appliances, and networking components) are programmable,
    network-accessible, remotely monitorable and manageable, and customizable. All
    kinds of infrastructures can be virtualized and containerizable. Thus, clouds
    are consolidated, centralized, and shareable. Increasingly, cloud environments
    are being integrated, allowing us to have hybrid and multi-cloud environments.
    Further on, with the steady growth of the device ecosystem, there's a rush toward
    setting up and sustaining fog or edge clouds in order to accomplish real-time
    data capture, processing, knowledge discovery, and dissemination and actuation.
    That is, our everyday environments (homes, hotels, hospitals, and so on) are being
    stuffed with a variety of heterogeneous devices. These devices are mainly resource-constrained
    and some are resource-intensive. These devices are deeply connected and embedded
    systems. There are solutions and approaches to dynamically create device clouds.
    Thus, edge clouds are expanding the cloud landscape. There are a litany of communication
    and data-transmission protocols for enabling **device-to-device** (**D2D**) integration.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算理念为IT领域带来了范式转变。企业有意识地采用这项技术，以便与他们的客户和消费者保持相关性。云环境是软件定义的，因此云基础设施（服务器机器、存储设备和网络组件）是可编程的、可网络访问的、可远程监控和管理，并且是可定制的。所有类型的架构都可以虚拟化和容器化。因此，云是整合的、集中的和可共享的。随着云环境的日益集成，我们能够拥有混合和多云环境。进一步来说，随着设备生态系统的稳步增长，人们纷纷建立和维持雾或边缘云，以便实现实时数据捕获、处理、知识发现、传播和执行。也就是说，我们的日常环境（家庭、酒店、医院等）正被各种异构设备所充斥。这些设备主要资源受限，其中一些资源密集。这些设备是深度连接和嵌入式系统。有解决方案和方法可以动态创建设备云。因此，边缘云正在扩展云的格局。有大量的通信和数据传输协议用于实现**设备到设备**（**D2D**）的集成。
- en: There are IoT gateway solutions and brokers for mediating between devices at
    the ground level and software applications getting hosted in faraway cloud environments;
    that is, device-to-cloud.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有物联网网关解决方案和代理，用于在底层设备与托管在遥远云环境中的软件应用之间进行调解；即设备到云。
- en: '**Device-to-cloud** (**D2C**) integration is gaining prominence these days
    with the increased availability and adoption of device middleware solutions. In
    short, there are new cloud environments emerging and evolving in order to cater
    to varying demands. That is, there are public, private, hybrid, and edge clouds.
    Multi-cloud environments are also being considered by enterprises to escape the
    vendor lock-in problem.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 随着**设备到云**（**D2C**）集成解决方案的可用性和采用率的提高，**设备到云**（**D2C**）集成正日益受到重视。简而言之，有新的云环境正在出现和演变，以满足不同的需求。也就是说，有公共云、私有云、混合云和边缘云。企业也在考虑多云环境，以避免供应商锁定问题。
- en: With enabling technologies being unearthed and supported, federated cloud environments
    may soon emerge to meet some special requirements. Clouds are highly optimized
    and organized IT infrastructures. Resource utilization has gone up significantly
    with cloudification. Appropriate cloud locations are chosen to guarantee higher
    performance. Clouds are intrinsically meeting various non-functional requirements,
    such as scalability, availability, security, and flexibility. Web-scale and customer-facing
    applications are already deployed in public cloud environments. Through extra
    security measures, such as **virtual private networks** (**VPNs**), firewall and
    load-balancing appliances, and intrusion-detection and prevention systems, public
    cloud environments are secured and made safe in order to boost the confidence
    of users and enterprises alike. Workloads are subjected to a variety of investigations
    and deployed in the most appropriate physical machines/BM servers, **virtual machines**
    (**VMs**), and containers. There are pioneering scheduling solutions and algorithms
    for tasks and resources; that is, scheduling resources for all kinds of incoming
    jobs is fully automated. Then, there are energy-efficiency methods being applied
    in order to ensure power conservation and reduce heat dissipation. There are cost
    efficiencies being accrued out of the cloudification movement.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 随着使能技术的挖掘和支持，联邦云环境可能很快就会出现以满足某些特殊需求。云是高度优化和组织的IT基础设施。资源利用率随着云化而显著提高。选择适当的云位置以确保更高的性能。云本质上满足了各种非功能性要求，如可伸缩性、可用性、安全性和灵活性。面向Web和客户的应用已经部署在公共云环境中。通过额外的安全措施，如**虚拟专用网络**（**VPNs**）、防火墙和负载均衡设备以及入侵检测和预防系统，公共云环境得到了保护并变得安全，以增强用户和企业的信心。工作负载受到各种调查并部署在最合适的物理机器/服务器、**虚拟机**（**VMs**）和容器中。有针对任务和资源的开创性调度解决方案和算法；也就是说，为所有类型的传入作业调度资源是完全自动化的。然后，还有应用节能方法以确保电力节约和减少散热。云化运动带来了成本效率。
- en: Thus, IT infrastructures are set to become agile, adaptive, and affordable in
    their offerings. These are the reasons why the cloud paradigm is becoming an important
    ingredient in the IT journey. Businesses are being automated and augmented through
    IT disruptions and transformations. People-empowerment through scores of innovations
    in the IT space is the next realistic target. Thus, we have clouds being formed
    out of commodity servers, appliances, and high-end server machines. There are
    converged and hyper-converged infrastructures to serve as cloud environments.
    In the recent past, it was forecast that the future belongs to networked and embedded
    devices that form ad hoc and purpose-specific clouds quickly to achieve specific
    data-processing requirements. Thus, applications are being modernized as pools
    of services, and these services are being taken to cloud environments (public,
    private, hybrid, and edge/fog). Due to the surging popularity of the cloud as
    the one-stop IT solution for all kinds of business needs, legacy modernization
    and migration is seeing heightened attention.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，IT基础设施将变得更加敏捷、适应性强且价格合理。这就是为什么云计算模式正成为IT旅程中的重要组成部分。企业正通过IT的颠覆和转型实现自动化和增强。通过IT领域的众多创新来赋权于人是下一个现实目标。因此，我们看到了由通用服务器、设备和高端服务器机组成的云正在形成。有融合和超融合基础设施作为云环境。在最近过去，预测称未来属于网络化和嵌入式设备，它们可以快速形成临时的和特定目的的云，以满足特定的数据处理需求。因此，应用正在作为服务池进行现代化，这些服务正被带到云环境中（公共、私有、混合以及边缘/雾计算）。由于云作为一站式IT解决方案在满足各种商业需求方面的日益流行，传统现代化和迁移正受到越来越多的关注。
- en: A case study for legacy modernization and migration
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 传统现代化和迁移案例研究
- en: Having understood the strategic significance of integrated and insightful applications,
    enterprises are strategizing and planning modernization and migration plans. As
    reported earlier, most of the enterprise, cloud, web, and embedded applications
    are being built as containerized and microservices-centric applications; legacy
    applications should be modified with a variety of automation processes and products.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 理解了集成和洞察性应用的战略意义后，企业正在制定现代化和迁移计划。如前所述，大多数企业级、云、Web和嵌入式应用正在被构建为以容器化和微服务为中心的应用；传统应用应通过各种自动化流程和产品进行修改。
- en: Blu Age Velocity ([https://www.bluage.com/products/blu-age-velocity](https://www.bluage.com/products/blu-age-velocity))
    is famous for automated modernization. This offering automates and accelerates
    modernizing legacy applications. It can do both reverse and forward engineering.
    That is, it can translate legacy applications into microservices-centric applications.
    Readers can find many case studies and references for automated application modernization
    at [https://www.bluage.com/references](https://www.bluage.com/references).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Blu Age Velocity ([https://www.bluage.com/products/blu-age-velocity](https://www.bluage.com/products/blu-age-velocity))
    以自动化现代化而闻名。这项服务自动化并加速了传统应用程序的现代化。它可以进行逆向和正向工程。也就是说，它可以翻译传统应用程序为以微服务为中心的应用程序。读者可以在
    [https://www.bluage.com/references](https://www.bluage.com/references) 找到许多自动化应用程序现代化的案例研究和参考资料。
- en: We all know that there are two key data-processing methods. Batch or bulk processing
    is all about batching or accumulating data to initiate the processing at scheduled
    hours. However, with the availability of real-time data-processing technologies
    and platforms, real-time data processing is picking up. Also, data starts to lose
    its value as time passes, and hence it should be collected, cleansed, and crunched
    immediately in order to extricate timely insights. In the mainframe era, batch
    processing was the main method for data processing due to inherent IT resource
    constraints. Legacy applications are predominantly single-threaded and hence parallel
    execution isn't possible at the language level. With multi-threaded languages
    and applications, parallel execution gains immense prominence. With multi-core
    and multi-processor computers becoming affordable, parallel processing at the
    infrastructure level is being achieved. With the emergence of virtual machines
    and containers, having multiple instances of these server resources leads us to
    fast-track the application's execution. Newer programming languages intrinsically
    support multi-threading and hence concurrent processing is prominent these days.
    With cloud infrastructures increasingly being compartmentalized, the goal of doing
    tasks in parallel has gained momentum. Now, with the surge of edge, local, and
    remote cloud environments, these restrictions are slowly fading away and real-time
    analytics is booming. That is, legacy applications that previously did batch processing
    are modernized to do real-time processing using cloud-based platforms.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道有两种主要的数据处理方法。批量或批量处理主要是将数据分批或累积，以便在预定时间开始处理。然而，随着实时数据处理技术和平台的可用性，实时数据处理正在兴起。此外，随着时间的推移，数据开始失去其价值，因此应该立即收集、清洗和压缩数据，以便提取及时见解。在主机时代，由于固有的IT资源限制，批量处理是数据处理的主要方法。传统应用程序主要是单线程的，因此在语言级别上无法实现并行执行。随着多线程语言和应用程序的出现，并行执行获得了极大的重视。随着多核和多处理器计算机的普及，基础设施级别的并行处理正在实现。随着虚拟机和容器的出现，拥有这些服务器资源的多个实例使我们能够快速跟踪应用程序的执行。较新的编程语言本质上支持多线程，因此并发处理在当今非常突出。随着云基础设施的不断细分，并行执行任务的目标正在加速。现在，随着边缘、本地和远程云环境的激增，这些限制正在逐渐消失，实时分析正在蓬勃发展。也就是说，以前进行批量处理的传统应用程序正在通过基于云的平台进行现代化，以实现实时处理。
- en: The combination of microservices and serverless computing speeds up legacy modernization
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务和无服务器计算的组合加速了传统系统的现代化
- en: As mentioned previously, microservices can be orchestrated to craft bigger and
    better applications. For legacy modernization, business capabilities are subdivided
    into discrete microservices. On the reverse side, these easily-manageable, independently-deployable,
    and autonomous services can be composed into process-aware, business-critical,
    and composite services. Microservices are operating in their own environments
    and interact with other services in a loosely-coupled manner. Thus, microservices
    are isolated and hence if there's a problem with one microservice, it doesn't
    affect other microservices. Because of this independence, microservices can be
    replaced and substituted by advanced services, replicated across, updated, and
    upgraded without impacting others.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，微服务可以被编排以构建更大、更好的应用程序。对于遗留系统的现代化，业务能力被细分为独立的微服务。相反，这些易于管理、独立部署和自主的服务可以组合成流程感知、业务关键和复合服务。微服务在其自己的环境中运行，并以松散耦合的方式与其他服务交互。因此，微服务是隔离的，所以如果某个微服务出现问题，不会影响其他微服务。正因为这种独立性，微服务可以被高级服务替换和替代，跨区域复制、更新和升级而不会影响其他服务。
- en: Serverless computing is a recent phenomenon unleashed by various public **cloud
    service providers** (**CSPs**), such as AWS, Azure, IBM, and Google. The server
    infrastructure is being readied and taken care of by CSPs for smoothly-running
    functions. That's why the buzzword **function as a service** (**FaaS**) is being
    widely reported. The idea is as follows. We started with bare-metal servers. Then
    virtual machines and containers came into the picture as the optimized resource
    and runtime for applications. Now, we are heading toward functions. Many developers
    started to create modular systems using code-level components (functions). These
    code-level components are attached to current applications on a per-need basis
    in order to enable applications to be relevant to their constituents. A library
    is a collection of functions. Then the empowered applications are compiled and
    deployed to be subscribed to and used for a small fee. This arrangement can guarantee
    high performance. But the reusability of functions is not up to the level of microservices.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算是各种公共**云服务提供商**（**CSPs**），如AWS、Azure、IBM和Google最近推出的一种现象。服务器基础设施正在由CSPs准备和照顾，以确保函数的平稳运行。这就是为什么**函数即服务**（**FaaS**）这个热门词汇被广泛报道的原因。其理念如下。我们最初从裸机服务器开始。然后虚拟机和容器作为应用程序优化的资源和运行时出现。现在，我们正朝着函数的方向发展。许多开发者开始使用代码级别的组件（函数）创建模块化系统。这些代码级别的组件根据需要附加到当前应用程序上，以便使应用程序与其用户相关。库是一系列函数的集合。然后，赋予权力的应用程序被编译和部署，以便以小额费用订阅和使用。这种安排可以保证高性能。但函数的重用性并没有达到微服务的水平。
- en: Primarily, the configuration management challenges of functions cause a lot
    of trouble. That is, different application projects may mandate different versions
    of the function. If a library of functions gets updated, all the applications
    that depend on the library have to go through a series of updates, recompiles,
    and redeployments. On the other hand, as repeatedly written in this book, microservices
    are self-contained and the goal of reusability is easily accomplished.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 主要来说，函数的配置管理挑战导致了许多麻烦。也就是说，不同的应用程序项目可能需要不同版本的函数。如果一个函数库被更新，所有依赖该库的应用程序都必须经历一系列的更新、重新编译和重新部署。另一方面，正如本书反复提到的，微服务是自包含的，重用性的目标很容易实现。
- en: Serverless computing is emerging as an ideal underpinning for hosting and running
    microservices. Thus, it's clear that the MSA and serverless computing will provide
    an extensible and scalable environment. With the automation level rising continuously
    in cloud environments, service developers and assemblers won't need to bother
    setting up infrastructural components in order to run, verify, and showcase their
    services. Through containers, functions are deployed as an accessible entity.
    Containers can be quickly created to run functions and microservices. Containers
    are famous for real-time horizontal scalability. When the number of users goes
    up, new instances get provisioned immediately in order to tackle the extra load.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器计算正逐渐成为托管和运行微服务的理想基础。因此，很明显，MSA和无服务器计算将提供一个可扩展和可伸缩的环境。随着云环境中自动化水平的持续提升，服务开发者和组装者无需烦恼设置基础设施组件以运行、验证和展示他们的服务。通过容器，函数被部署为一个可访问的实体。容器可以快速创建以运行函数和微服务。容器因其实时水平可伸缩性而闻名。当用户数量增加时，新实例会立即被配置以应对额外的负载。
- en: Summary
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Microservices enabled with RESTful APIs are the hot commodity these days. Microservices
    have emerged as the optimal unit of application development and deployment, not
    only for building and running enterprise-grade and production-ready applications,
    but also for modernizing currently-running applications. That is, legacy applications
    are being dismantled as a collection of microservices. Because of their unique
    features, microservices are becoming established as the most appropriate unit
    for migrating applications to cloud environments; that is, microservices contribute
    immensely to crafting and running cloud-enabled applications. Fresh applications
    are being directly developed in cloud environments, called cloud-native applications.
    This chapter discussed legacy modernization, why it's becoming essential, and
    how the MSA pattern assists in creating modern applications from outdated applications.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 配备RESTful API的微服务现在是热门商品。微服务已成为应用开发和部署的最优单元，不仅适用于构建和运行企业级和生产就绪的应用程序，也适用于现代化当前运行的应用程序。也就是说，遗留应用程序正被拆分为一组微服务。由于它们的独特特性，微服务正成为将应用程序迁移到云环境的最合适的单元；也就是说，微服务在构建和运行云启用应用程序方面做出了巨大贡献。新的应用程序正在云环境中直接开发，称为云原生应用程序。本章讨论了遗留现代化、为什么它变得至关重要以及MSA模式如何帮助从过时的应用程序创建现代应用程序。
- en: With the unprecedented adoption of the microservices architecture as the most
    beneficial architectural style for designing and developing next-generation business-critical
    and IoT applications, the RESTful paradigm has earned a new lease of life. That
    is, due to the simplicity and sustainability of RESTful APIs, microservices are
    increasingly stuffed with RESTful APIs. This book covered the practical and theoretical
    information aspects of how RESTful services and APIs contribute to futuristic
    and flexible web/cloud, mobile, and IoT applications.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 随着微服务架构作为设计和开发下一代业务关键和物联网应用程序最有益的架构风格的空前采用，RESTful范式获得了新生。也就是说，由于RESTful API的简单性和可持续性，微服务越来越多地包含RESTful
    API。本书涵盖了RESTful服务和API如何有助于未来和灵活的Web/云、移动和物联网应用程序的实用和理论信息方面。
