- en: Chapter 24
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第24章
- en: Pre-Test, Mid-Test and Post-Test Loop Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 预测试、中测试和后测试循环结构
- en: 24.1 The Pre-Test Loop Structure
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.1 预测试循环结构
- en: The pre-test loop structure is shown in the following flowchart.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 预测试循环结构如图所示。
- en: '![Image](img/chapter24-01.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter24-01.png)'
- en: Let's see what happens when the flow of execution reaches a pre-test loop structure.
    If Boolean_Expression evaluates to True, the statement or block of statements
    of the structure is executed and the flow of execution goes back to check Boolean_Expression
    once more. If Boolean_Expression evaluates to True again, the process repeats.
    The iterations stop when Boolean_Expression, at some point, evaluates to False
    and the flow of execution exits the loop.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当执行流程达到预测试循环结构时会发生什么。如果布尔表达式评估为真，则执行该结构中的语句或语句块，并且执行流程会再次检查布尔表达式。如果布尔表达式再次评估为真，则过程会重复。当布尔表达式在某个时刻评估为假时，执行流程将退出循环。
- en: '![](img/notice.jpg)The Decision symbol (the diamond, or rhombus) is used both
    in decision control structures and in loop control structures. However, in loop
    control structures, one of the diamond''s exits always has an upward direction.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)决策符号（菱形或菱形）在决策控制结构和循环控制结构中都使用。然而，在循环控制结构中，菱形的一个出口总是向上方向。'
- en: '![](img/notice.jpg)A “pre-test loop structure” is named this way because first
    the Boolean expression is evaluated, and afterwards the statement or block of
    statements of the structure is executed.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)“预测试循环结构”之所以被这样命名，是因为首先评估布尔表达式，然后执行该结构中的语句或语句块。'
- en: '![](img/notice.jpg)Because the Boolean expression is evaluated before entering
    the loop, a pre-test loop may perform from zero to many iterations.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)由于布尔表达式在进入循环之前被评估，预测试循环可能执行零次到多次迭代。'
- en: '![](img/notice.jpg)Each time the statement or block of statements of a loop
    control structure is executed, the term used in computer science is “the loop
    is iterating” or “the loop performs an iteration”.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)每次执行循环控制结构中的语句或语句块时，计算机科学中使用的术语是“循环迭代”或“循环执行迭代”。'
- en: The general form of the Python statement is
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python语句的一般形式是
- en: 'while Boolean_Expression:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 'while 布尔表达式:'
- en: A statement or block of statements
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: The following example displays the numbers 1 to 10.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示了从1到10的数字。
- en: '![](img/my_exercise_header.png) file_24.1'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_24.1'
- en: i = 1
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 10:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 10:'
- en: print(i)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(i)
- en: i += 1
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: '![](img/notice.jpg)Just as in decision control structures, the statements inside
    a loop control structure must be indented.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)就像在决策控制结构中一样，循环控制结构内的语句必须缩进。'
- en: In Python, while-loops can also be combined with an else keyword as shown here.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，while循环也可以与else关键字结合使用，如下所示。
- en: 'while Boolean_Expression:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 'while 布尔表达式:'
- en: A statement or block of statements 1
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块 1
- en: 'else:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: A statement or block of statements 2
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块 2
- en: However, this unusual feature is rarely used in practice, so it will not be
    further discussed in this book.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这个不寻常的特性在实践中很少使用，因此本书将不再进一步讨论。
- en: Exercise 24.1-1 Designing the Flowchart and Counting the Total Number of Iterations
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-1 设计流程图并计算总迭代次数
- en: Design the corresponding flowchart for the following code fragment. How many
    iterations does this Python code perform?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设计以下代码片段的相应流程图。这段Python代码执行了多少次迭代？
- en: i = 4
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: i = 4
- en: 'while i > 0:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i > 0:'
- en: i -= 1
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: print("The end")
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("结束")
- en: Solution
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The corresponding flowchart fragment is as follows.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的流程图片段如下。
- en: .![Image](img/chapter24-02.png)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter24-02.png)
- en: Next, a trace table can help you observe the flow of execution.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，一个跟踪表可以帮助你观察执行流程。
- en: '| Step | Statement | Notes | i |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | i |'
- en: '| 1 | i = 4 |   | 4 |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| 1 | i = 4 |   | 4 |'
- en: '| 2 | while i > 0: | This evaluates to True | 1^(st) | iteration |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| 2 | while i > 0: | 这评估为真 | 第1次 | 迭代 |'
- en: '| 3 | i = i ‑ 1 |   | 3 |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| 3 | i = i - 1 |   | 3 |'
- en: '| 4 | while i > 0: | This evaluates to True | 2^(nd) | iteration |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 4 | while i > 0: | 这评估为真 | 第2次 | 迭代 |'
- en: '| 5 | i = i ‑ 1 |   | 2 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 5 | i = i - 1 |   | 2 |'
- en: '| 6 | while i > 0: | This evaluates to True | 3^(rd) | iteration |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 6 | while i > 0: | 这评估为真 | 第3次 | 迭代 |'
- en: '| 7 | i = i ‑ 1 |   | 1 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 7 | i = i - 1 |   | 1 |'
- en: '| 8 | while i > 0: | This evaluates to True | 4^(th) | iteration |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 8 | while i > 0: | 这评估为真 | 第4次 | 迭代 |'
- en: '| 9 | i = i ‑ 1 |   | 0 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 9 | i = i - 1 |   | 0 |'
- en: '| 10 | while i > 0: | This evaluates to False |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 10 | while i > 0: | 这评估为假 |'
- en: '| 11 | print("The end") | It displays: The end |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 11 | print("The end") | 它显示：The end |'
- en: As you can see from the trace table, the total number of iterations is four.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从跟踪表中可以看出，总迭代次数是四次。
- en: '![](img/notice.jpg)When the statement or block of statements of a pre-test
    loop structure is executed N times, the Boolean expression is evaluated N+1 times.
    Therefore, to determine the total number of iterations, count the number of times
    the statement or block of statements is executed, not the number of times the
    Boolean expression is evaluated.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)当预测试循环结构的语句或语句块执行N次时，布尔表达式将被评估N+1次。因此，为了确定总迭代次数，应计算语句或语句块执行的次数，而不是布尔表达式评估的次数。'
- en: Exercise 24.1-2 Counting the Total Number of Iterations
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-2 计算总迭代次数
- en: How many iterations does this Python program perform?
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序执行了多少次迭代？
- en: i = 4
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: i = 4
- en: 'while i >= 0:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i >= 0:'
- en: print(i)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: i -= 1
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: print("The end")
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: print("The end")
- en: Solution
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This exercise is almost identical to the previous one. The main difference is
    that the Boolean expression here remains True, even for i = 0\. Therefore, it
    performs an additional iteration, that is, five iterations.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习几乎与上一个练习相同。主要区别在于这里的布尔表达式即使在i = 0时也保持为真，因此它执行了一个额外的迭代，即五次迭代。
- en: Exercise 24.1-3 Counting the Total Number of Iterations
  id: totrans-59
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-3 计算总迭代次数
- en: How many iterations does this Python program perform?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序执行了多少次迭代？
- en: i = 1
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i != 6:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i != 6:'
- en: i += 2
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: i += 2
- en: print("The end")
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: print("The end")
- en: Solution
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Let's create a trace table to observe the flow of execution.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个跟踪表来观察执行流程。
- en: '| Step | Statement | Notes | i |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | i |'
- en: '| 1 | i = 1 |   | 1 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 1 | i = 1 |   | 1 |'
- en: '| 2 | while i != 6: | This evaluates to True | 1^(st) | iteration |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 2 | while i != 6: | 这将评估为真 | 1^(st) | 迭代 |'
- en: '| 3 | i += 2 |   | 3 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 3 | i += 2 |   | 3 |'
- en: '| 4 | while i != 6: | This evaluates to True | 2^(nd) | iteration |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 4 | while i != 6: | 这将评估为真 | 2^(nd) | 迭代 |'
- en: '| 5 | i += 2 |   | 5 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 5 | i += 2 |   | 5 |'
- en: '| 6 | while i != 6: | This evaluates to True | 3^(rd) | iteration |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 6 | while i != 6: | 这将评估为真 | 3^(rd) | 迭代 |'
- en: '| 7 | i += 2 |   | 7 |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 7 | i += 2 |   | 7 |'
- en: '| 8 | while i != 6: | This evaluates to True | … |   |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 8 | while i != 6: | 这将评估为真 | … |   |'
- en: '| 9 | … | … |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 9 | … | … |'
- en: As you can see from the trace table, since the value 6 is never assigned to
    variable i, this code fragment will iterate for an infinite number of times! Obviously,
    this code does not satisfy the property of finiteness.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从跟踪表中可以看出，由于变量i从未被赋予值6，这个代码片段将无限次迭代！显然，这个代码不满足有限性的属性。
- en: Exercise 24.1-4 Counting the Total Number of Iterations
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-4 计算总迭代次数
- en: How many iterations does this Python program perform?
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序执行了多少次迭代？
- en: i = -10
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: i = -10
- en: 'while i > 0:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i > 0:'
- en: print(i)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: i -= 1
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: print("The end")
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: print("The end")
- en: Solution
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Initially, the value −10 is assigned to variable i. The Boolean expression directly
    evaluates to False and the flow of execution goes right to the print("The end")
    statement. Thus, this code fragment performs zero iterations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，变量i被赋予值-10。布尔表达式直接评估为假，执行流程直接跳转到print("The end")语句。因此，这个代码片段执行了零次迭代。
- en: Exercise 24.1-5 Finding the Sum of Four Numbers
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-5 找到四个数字的和
- en: Using a pre-test loop structure, write a Python program that lets the user enter
    four numbers and then calculates and displays their sum.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用预测试循环结构，编写一个Python程序，允许用户输入四个数字，然后计算并显示它们的和。
- en: Solution
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Do you remember the example in [Section 23.2](#toc_6) for calculating the sum
    of four numbers? At the end, after a little work, the proposed code fragment became
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得第23.2节中计算四个数字之和的例子吗？在稍作工作后，提出的代码片段变成了
- en: total = 0
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'execute_these_statements_4_times:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'execute_these_statements_4_times:'
- en: x = float(input())
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total = total + x
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: print(total)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Now, you need a way to “present” the statement execute_these_statements_4_times
    with real Python statements. The while statement can achieve this, but you need
    an additional variable to count the total number of iterations. This way, when
    the desired number of iterations has been performed, the flow of execution will
    exit the loop.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你需要一种方法来“呈现”execute_these_statements_4_times语句的真实Python语句。while语句可以实现这一点，但你需要一个额外的变量来计算总迭代次数。这样，当执行了所需的迭代次数后，执行流程将退出循环。
- en: Following is a general purpose code fragment that iterates for the number of
    times specified by total_number_of_iterations,
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个通用的代码片段，它根据指定的总迭代次数进行迭代，
- en: i = 1
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= total_number_of_iterations:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= total_number_of_iterations:'
- en: A statement or block of statements
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: i += 1
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: where total_number_of_iterations can be a constant value or even a variable
    or an expression.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 其中total_number_of_iterations可以是常量值，也可以是变量或表达式。
- en: After combining this code fragment with the previous one, the final program
    becomes
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码片段与前面的代码片段合并后，最终程序变为
- en: '![](img/my_exercise_header.png) file_24.1-5'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.1-5'
- en: total = 0
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: i = 1
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 4:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 4:'
- en: x = float(input())     [[More…]](more.html#more_24_1_5_1)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())     [[更多…]](more.html#more_24_1_5_1)
- en: total = total + x
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: total = total + x
- en: i += 1
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(total)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '![](img/notice.jpg)The name of the variable i is not binding. You can use any
    variable name you wish such as counter, count, k, and more.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)变量i的名称不是绑定性的。你可以使用任何你想要的变量名，例如counter、count、k等。'
- en: Exercise 24.1-6 Finding the Sum of Odd Numbers
  id: totrans-113
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-6 求奇数和
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter 20 integers, and then calculates and displays the sum of the odd numbers.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，允许用户输入20个整数，然后计算并显示奇数的和。
- en: Solution
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This is quite easy. What the program must do inside the loop is check whether
    or not a user-provided number is odd and, if it is, that number must accumulate
    in variable total; even numbers must be ignored. The flowchart is as follows.
    It includes a single-alternative decision structure nested within a pre-test loop
    structure.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单。程序在循环中必须执行的操作是检查用户提供的数字是否为奇数，如果是，则该数字必须累加到变量total中；偶数必须忽略。流程图如下。它包括一个嵌套在预测试循环结构中的单分支决策结构。
- en: '![Image](img/chapter24-03.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter24-03.png)'
- en: The corresponding Python program is as follows.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的Python程序如下。
- en: '![](img/my_exercise_header.png) file_24.1-6'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.1-6'
- en: total = 0
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: i = 1
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 20:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 20:'
- en: x = int(input())
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: 'if x % 2 != 0:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % 2 != 0:'
- en: total += x    #This is equivalent to total = total + x
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'total += x   # 这等价于 total = total + x'
- en: i += 1
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(total)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '![](img/notice.jpg)You can nest any decision control structure inside any loop
    control structure as long as you keep them syntactically and logically correct.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)只要保持它们在语法和逻辑上的正确性，你可以在任何循环控制结构内部嵌套任何决策控制结构。'
- en: Exercise 24.1-7 Finding the Sum of N Numbers
  id: totrans-129
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-7 求N个数字的和
- en: Write a Python program that lets the user enter N numbers and then calculates
    and displays their sum. The value of N must be provided by the user at the beginning
    of the program.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，允许用户输入N个数字，然后计算并显示它们的和。N的值必须在程序开始时由用户提供。
- en: Solution
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise, the total number of iterations depends on a value that the
    user must enter. Following is a general purpose code fragment that iterates for
    N times, where N is provided by the user.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，总迭代次数取决于用户必须输入的值。以下是一个通用的代码片段，它迭代N次，其中N由用户提供。
- en: n = int(input())
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: i = 1
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= n:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= n:'
- en: A statement or block of statements
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: i += 1
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: According to what you have learned so far, the final program becomes
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你所学到的知识，最终程序如下
- en: '![](img/my_exercise_header.png) file_24.1-7'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.1-7'
- en: total = 0
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: n = int(input())
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: i = 1
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= n:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= n:'
- en: x = float(input())
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: total += x
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: total += x
- en: i += 1
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(total)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Exercise 24.1-8 Finding the Sum of an Unknown Quantity of Numbers
  id: totrans-148
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.1-8 求未知数量数字的和
- en: Write a Python program that lets the user enter integer values repeatedly until
    the value −1 is entered. When data input is completed, the sum of the numbers
    entered must be displayed. (The value of −1 must not be included in the final
    sum). Next, create a trace table to check if your program operates properly using
    10, 20, 5, and −1 as input values.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，允许用户重复输入整数值，直到输入值是-1。当数据输入完成后，必须显示输入数字的总和。（-1的值不得包含在最终的总和中）。接下来，创建一个跟踪表来检查你的程序是否使用10、20、5和-1作为输入值正确运行。
- en: Solution
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise, the total number of iterations is unknown. If you were to
    use decision control structures, your program would look something like the code
    fragment that follows.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，总迭代次数是未知的。如果你使用决策控制结构，你的程序将类似于下面的代码片段。
- en: total = 0
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: x = int(input())
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: 'if x != -1:     #Check variable x           [[More…]](more.html#more_24_1_8_1)'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x != -1:     #检查变量 x           [[更多…]](more.html#more_24_1_8_1)'
- en: 'total += x           #and execute this statement'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'total += x           #并执行此语句'
- en: x = int(input())     #and this one
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())     #并执行此语句
- en: 'if x != -1:     #Check variable x'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x != -1:     #检查变量 x'
- en: 'total += x           #and execute this statement'
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'total += x           #并执行此语句'
- en: 'x = int(input())     #and this one'
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'x = int(input())     #并执行此语句'
- en: 'if x != -1:     #Check variable x'
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if x != -1:     #检查变量 x'
- en: 'total += x           #and execute this statement'
  id: totrans-161
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'total += x           #并执行此语句'
- en: 'x = int(input())     #and this one'
  id: totrans-162
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'x = int(input())     #并执行此语句'
- en: …
  id: totrans-163
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …
- en: …
  id: totrans-164
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …
- en: print(total)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Now let's rewrite this program using a loop control structure instead. The final
    program is presented next. If you try to follow the flow of execution, you will
    find that it operates equivalently to the previous one.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用循环控制结构重写此程序。最终的程序如下所示。如果您尝试跟随执行流程，您会发现它与之前的程序等效。
- en: '![](img/my_exercise_header.png) file_24.1-8'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_24.1-8'
- en: total = 0
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: x = int(input())
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: 'while x != -1:     #Check variable x'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'while x != -1:     #检查变量 x'
- en: 'total += x           #and execute this statement'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'total += x           #并执行此语句'
- en: 'x = int(input())     #and this one'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = int(input())     #并执行此语句'
- en: print(total)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Now let's create a trace table to determine if this program operates properly
    using 10, 20, 5, and −1 as input values.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们创建一个跟踪表，以确定使用 10、20、5 和 −1 作为输入值时，此程序是否正常工作。
- en: '| Step | Statement | Notes | x | total |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | x | total |'
- en: '| 1 | total = 0 |   | ? | 0 |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 1 | total = 0 |   | ? | 0 |'
- en: '| 2 | x = int(input()) |   | 10 | 0 |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| 2 | x = int(input()) |   | 10 | 0 |'
- en: '| 3 | while x != ‑1: | This evaluates to True |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| 3 | while x != ‑1: | 这将评估为 True |'
- en: '| 4 | total += x |   | 10 | 10 |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| 4 | total += x |   | 10 | 10 |'
- en: '| 5 | x = int(input()) |   | 20 | 10 |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| 5 | x = int(input()) |   | 20 | 10 |'
- en: '| 6 | while x != ‑1: | This evaluates to True |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| 6 | while x != ‑1: | 这将评估为 True |'
- en: '| 7 | total += x |   | 20 | 30 |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 7 | total += x |   | 20 | 30 |'
- en: '| 8 | x = int(input()) |   | 5 | 30 |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 8 | x = int(input()) |   | 5 | 30 |'
- en: '| 9 | while x != ‑1: | This evaluates to True |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 9 | while x != ‑1: | 这将评估为 True |'
- en: '| 10 | total += x |   | 5 | 35 |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 10 | total += x |   | 5 | 35 |'
- en: '| 11 | x = int(input()) |   | −1 | 35 |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| 11 | x = int(input()) |   | −1 | 35 |'
- en: '| 12 | while x != ‑1: | This evaluates to False |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 12 | while x != −1: | 这将评估为 False |'
- en: '| 13 | print(total) | It displays: 35 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 13 | print(total) | 它显示：35 |'
- en: As you can see, in the end, variable total contains the value 35, which is,
    indeed, the sum of the values 10 + 20 + 5\. Moreover, the final user-provided
    value of −1 does not participate in the final sum.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，最终，变量 total 包含的值是 35，这确实是 10 + 20 + 5 的和。此外，最终用户提供的值 −1 并未参与最终的总和。
- en: '![](img/notice.jpg)When the number of iterations is known before the loop starts
    iterating the loop is often called “definite loop”. In this exercise, however,
    the number of iterations is not known before the loop starts iterating, and it
    depends on a certain condition. This type of loop is often called “indefinite
    loop”.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)当在循环开始迭代之前已知迭代次数时，循环通常被称为“确定循环”。然而，在这个练习中，在循环开始迭代之前并不知道迭代次数，它取决于某个条件。这种类型的循环通常被称为“不确定循环”。'
- en: Exercise 24.1-9 Finding the Product of 20 Numbers
  id: totrans-191
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 24.1-9 求解 20 个数的乘积
- en: Write a Python program that lets the user enter 20 numbers and then calculates
    and displays their product.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，让用户输入 20 个数字，然后计算并显示它们的乘积。
- en: Solution
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: If you were to use a sequence control structure, it would be something like
    the next code fragment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您要使用一个序列控制结构，它将类似于以下代码片段。
- en: p = 1
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: p = 1
- en: x = float(input())     [[More…]](more.html#more_24_1_9_1)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())     [[更多…]](more.html#more_24_1_9_1)
- en: p = p * x
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * x
- en: x = float(input())
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: p = p * x
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * x
- en: …
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: …
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: x = float(input())
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: p = p * x
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * x
- en: '![](img/notice.jpg)Note that variable p is initialized to 1 instead of 0\.
    This is necessary for the statement p = p * x to operate properly; the final product
    would be zero otherwise.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意变量 p 被初始化为 1 而不是 0。这是为了使语句 p = p * x 正确运行；否则最终乘积将是零。'
- en: Using knowledge from the previous exercises, the final program becomes
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用之前练习中的知识，最终程序如下所示
- en: '![](img/my_exercise_header.png) file_24.1-9'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_24.1-9'
- en: p = 1
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: p = 1
- en: i = 1
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 20:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当 i <= 20 时：
- en: x = float(input())
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: p = p * x
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * x
- en: i += 1
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(p)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: print(p)
- en: 24.2 The Post-Test Loop Structure
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.2 后测试循环结构
- en: The post-test loop structure is shown in the following flowchart.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 后测试循环结构在以下流程图中显示。
- en: .![Image](img/chapter24-04.png)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter24-04.png)
- en: '![](img/remember.jpg)In loop control structures, one of the diamond''s exits
    always has an upward direction.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '![记住](img/remember.jpg)在循环控制结构中，菱形的一个出口总是向上方向。'
- en: Let's see what happens when the flow of execution reaches a post-test loop structure.
    The statement or block of statements of the structure is directly executed and
    if Boolean_Expression evaluates to False, the flow of execution goes back to the
    point just above the statement or block of statements of the structure. The statement
    or block of statements is executed once more and if Boolean_Expression evaluates
    to False again, the process repeats. The iterations stop when Boolean_Expression,
    at some point, evaluates to True and the flow of execution exits the loop.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当执行流程达到后测试循环结构时会发生什么。结构中的语句或语句块直接执行，如果布尔表达式评估为False，则执行流程返回到结构语句或语句块之上的点。语句或语句块再次执行，如果布尔表达式再次评估为False，则过程重复。当布尔表达式在某个时刻评估为True时，执行流程退出循环。
- en: '![](img/notice.jpg)The post-test loop differs from the pre-test loop in that
    first the statement or block of statements of the structure is executed and afterwards
    the Boolean expression is evaluated. Consequently, the post-test loop performs
    at least one iteration!'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)后测试循环与先测试循环的不同之处在于，首先执行结构中的语句或语句块，然后评估布尔表达式。因此，后测试循环至少执行一次迭代！'
- en: '![](img/remember.jpg)Each time the statement or block of statements of a loop
    control structure is executed, the term used in computer science is “the loop
    is iterating” or “the loop performs an iteration”.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '![记住](img/remember.jpg)每次执行循环控制结构的语句或语句块时，计算机科学中使用的术语是“循环正在迭代”或“循环执行迭代”。'
- en: 'Although the post-test loop structure is directly supported in most computer
    languages such as C, C++, C#, Java, PHP, and Visual Basic (to name a few), unfortunately
    this is not true for Python since there is no direct statement for this kind of
    structure. So now the question is: “What can you do if you still want to use post-test
    loop structures in your Python programs?”'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管大多数计算机语言（如C、C++、C#、Java、PHP和Visual Basic等）直接支持后测试循环结构，但不幸的是，Python并不支持这种结构，因为没有直接的表达式。所以现在的问题是：“如果你仍然想在Python程序中使用后测试循环结构，你能做什么？”
- en: In Python, you can still write post-test loops (indirectly, of course) using
    the while statement along with an if and a break statement. The main idea is to
    create an endless loop (also known as an infinite loop) and break out of it when
    the Boolean expression that exists at the end of the block of statements of the
    structure evaluates to True . The idea is shown in the following code fragment,
    given in general form.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，您仍然可以使用while语句以及if和break语句间接地编写后测试循环。主要思想是创建一个无限循环（也称为无限循环），当结构语句块末尾的布尔表达式评估为True时跳出循环。这个想法在以下代码片段中给出，以一般形式表示。
- en: 'while True:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: A statement or block of statements
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: 'if Boolean_Expression: break'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 布尔表达式: break'
- en: '![](img/notice.jpg)You can break out of a loop before it actually completes
    all of its iterations by using the break statement'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)您可以使用break语句在循环实际完成所有迭代之前跳出循环。'
- en: The following example displays the numbers 1 to 10.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示从1到10的数字。
- en: '![](img/my_exercise_header.png) file_24.2'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.2'
- en: i = 1
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(i)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: i += 1
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'if i > 10: break'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i > 10: break'
- en: Exercise 24.2-1 Designing the Flowchart and Counting the Total Number of Iterations
  id: totrans-234
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.2-1 设计流程图和计算总迭代次数
- en: Design the corresponding flowchart for the following Python program. How many
    iterations does this Python program perform?
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 设计以下Python程序的相应流程图。这个Python程序执行了多少次迭代？
- en: i = 3
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: i = 3
- en: 'while True:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: i = i - 1
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: i = i - 1
- en: 'if i <= 0: break'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i <= 0: break'
- en: print("The end")
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: print("结束")
- en: Solution
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The corresponding flowchart is as follows.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的流程图如下。
- en: .![Image](img/chapter24-05.png)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: .![图像](img/chapter24-05.png)
- en: Now, let's create a trace table to observe the flow of execution.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个跟踪表来观察执行流程。
- en: '| Step | Statement | Notes | i |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | i |'
- en: '| 1 | i = 3 |   | 3 |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| 1 | i = 3 |   | 3 |'
- en: '| 2 | i = i ‑ 1 |   | 2 | 1^(st) | iteration |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| 2 | i = i - 1 |   | 2 | 1^(st) | 迭代 |'
- en: '| 3 | if i <= 0: break | This evaluates to False |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if i <= 0: break | 这评估为False |'
- en: '| 4 | i = i ‑ 1 |   | 1 | 2^(nd) | iteration |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 4 | i = i - 1 |   | 1 | 2^(nd) | 迭代 |'
- en: '| 5 | if i <= 0: break | This evaluates to False |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| 5 | if i <= 0: break | 这评估为False |'
- en: '| 6 | i = i ‑ 1 |   | 0 | 3^(rd) | iteration |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| 6 | i = i - 1 |   | 0 | 第3次 | 迭代 |'
- en: '| 7 | if i <= 0: break | This evaluates to True |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| 7 | if i <= 0: break | 这将评估为True |'
- en: '| 8 | print("The end") | It displays: The end |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 打印("结束") | 它显示：结束 |'
- en: As you can see from the trace table, the total number of iterations is three.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 如从跟踪表所示，总迭代次数为三次。
- en: '![](img/notice.jpg)Both the statement or block of statements of a post-test
    loop structure is executed N times, and the Boolean expression is evaluated N
    times. Therefore, to determine the total number of iterations, you can count either
    the number of times the statement or block of statements is executed, or the number
    of times the Boolean expression is evaluated. Both counts are equal!'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)后测试循环结构的语句或语句块执行N次，布尔表达式评估N次。因此，要确定总迭代次数，可以计算语句或语句块执行的次数，或者布尔表达式评估的次数。这两个计数是相等的！'
- en: Exercise 24.2-2 Counting the Total Number of Iterations
  id: totrans-256
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.2-2 计算总迭代次数
- en: How many iterations does this Python program perform?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序执行了多少次迭代？
- en: i = 3
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: i = 3
- en: 'while True:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(i)
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(i)
- en: i -= 1
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: 'if i < 0: break'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i < 0: break'
- en: print("The end")
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("结束")
- en: Solution
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This exercise is almost identical to the previous one. The main difference is
    that the Boolean expression here remains False, even for i = 0\. Therefore, it
    performs an additional iteration, that is, four iterations.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习几乎与上一个练习相同。主要区别在于这里的布尔表达式即使在i = 0时也保持为False，因此它执行了一个额外的迭代，即四次迭代。
- en: Exercise 24.2-3 Designing the Flowchart and Counting the Total Number of Iterations
  id: totrans-266
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.2-3 设计流程图和计算总迭代次数
- en: Design the corresponding flowchart for the following code fragment. How many
    iterations does this code perform?
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 设计以下代码片段对应的流程图。这段代码执行了多少次迭代？
- en: i = -1
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: i = -1
- en: 'while True:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Hello there!")
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("你好！")
- en: i -= 1
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: 'if i <= 0: break'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i <= 0: break'
- en: print("The end")
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("结束")
- en: Solution
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The corresponding flowchart is as follows.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 对应的流程图如下。
- en: .![Image](img/chapter24-06.png)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter24-06.png)
- en: Initially the value −1 is assigned to the variable i. Inside the loop, the message
    “Hello there!” is displayed and variable i is decremented by one (resulting in
    the value −2). The Boolean expression i ≤ 0 evaluates to True, and the flow of
    execution proceeds directly to the Write ("The end") statement. Thus, this algorithm
    performs one iteration!
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，变量i被赋予值-1。在循环内部，显示消息“你好！”，并将变量i减一（结果为-2）。布尔表达式i ≤ 0评估为True，执行流程直接跳转到Write
    ("The end")语句。因此，这个算法执行了一次迭代！
- en: Exercise 24.2-4 Counting the Total Number of Iterations
  id: totrans-278
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.2-4 计算总迭代次数
- en: How many iterations does this code fragment program perform?
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段程序执行了多少次迭代？
- en: i = 1
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: i = i + 2
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: i = i + 2
- en: 'if i == 4: break'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i == 4: break'
- en: print("The end")
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("结束")
- en: Solution
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Let's create a trace table to observe the flow of execution.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个跟踪表来观察执行流程。
- en: '| Step | Statement | Notes | i |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | i |'
- en: '| 1 | i = 1 |   | 1 |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| 1 | i = 1 |   | 1 |'
- en: '| 2 | i = i + 2 |   | 3 | 1^(st) | iteration |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 2 | i = i + 2 |   | 3 | 第1次 | 迭代 |'
- en: '| 3 | if i == 4: break | This evaluates to False |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if i == 4: break | 这将评估为False |'
- en: '| 4 | i = i + 2 |   | 5 | 2^(nd) | iteration |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| 4 | i = i + 2 |   | 5 | 第2次 | 迭代 |'
- en: '| 5 | if i == 4: break | This evaluates to False |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| 5 | if i == 4: break | 这将评估为False |'
- en: '| 6 | i = i + 2 |   | 7 | 3^(rd) | iteration |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| 6 | i = i + 2 |   | 7 | 第3次 | 迭代 |'
- en: '| 7 | if i == 4: break | This evaluates to False |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| 7 | if i == 4: break | 这将评估为False |'
- en: '| 8 | … | … | … |   |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| 8 | … | … | … |   |'
- en: '| 9 | … | … |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| 9 | … | … |'
- en: As you can see from the trace table, since the value 4 is never assigned to
    variable i, this code fragment will iterate for an infinite number of times! Obviously,
    this code does not satisfy the property of finiteness.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如从跟踪表所示，由于从未将值4赋给变量i，这个代码片段将无限次迭代！显然，这个代码不满足有限性的属性。
- en: Exercise 24.2-5 Finding the Product of N Numbers
  id: totrans-298
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习24.2-5 求N个数的乘积
- en: Write a Python program that lets the user enter N numbers and then calculates
    and displays their product. The value of N must be provided by the user at the
    beginning of the program. What happens if you switch the post-test loop structure
    with a pre-test loop structure? Do both programs operate exactly the same way
    for all possible input values of N?
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，允许用户输入N个数字，然后计算并显示它们的乘积。N的值必须在程序开始时由用户提供。如果你将后测试循环结构与先测试循环结构交换，会发生什么？对于N的所有可能的输入值，这两个程序是否以完全相同的方式运行？
- en: Solution
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Both programs below let the user enter N numbers, calculate, and display their
    product. The left one uses a pre-test, while the right one uses a post-test loop
    structure. If you try to execute them and enter any value greater than zero for
    N, both programs operate exactly the same way!
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 以下两个程序都允许用户输入 N 个数字，计算并显示它们的乘积。左边的一个使用预测试，而右边的一个使用后测试循环结构。如果您尝试执行它们并输入 N 的任何大于零的值，这两个程序将完全以相同的方式运行！
- en: '![](img/my_exercise_header.png) file_24.2-5a'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.2-5a'
- en: n = int(input())
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: p = i = 1
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: p = i = 1
- en: 'while i <= n:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= n:'
- en: x = float(input())
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: p = p * x
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * x
- en: i += 1
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(p)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: print(p)
- en: '![](img/my_exercise_header.png) file_24.2-5b'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.2-5b'
- en: n = int(input())
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: p = i = 1
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: p = i = 1
- en: 'while True:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x = float(input())
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: p = p * x
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: p = p * x
- en: i += 1
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'if i > n: break'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i > n: break'
- en: print(p)
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: print(p)
- en: The two Python programs, however, operate in different ways when the user enters
    a non-positive^([[18]](footnotes.html#Endnote_18)) value for N. For example, if
    the value 0 is entered, the left program performs zero iterations whereas the
    right program performs one iteration. Obviously, the left program is the right
    choice to solve this exercise!
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，当用户为 N 输入非正值^([[18]](footnotes.html#Endnote_18))时，这两个 Python 程序的操作方式却不同。例如，如果输入值为
    0，则左边的程序执行零次迭代，而右边的程序执行一次迭代。显然，左边的程序是解决这个练习的正确选择！
- en: '![](img/notice.jpg)A pre-test loop structure may perform zero iterations in
    contrast to the post-test loop structure, which performs at least one iteration!'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)与后测试循环结构不同，预测试循环结构可能执行零次迭代！'
- en: 24.3 The Mid-Test Loop Structure
  id: totrans-321
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.3 中测试循环结构
- en: The mid-test loop structure is shown in the following flowchart.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 中测试循环结构在以下流程图中显示。
- en: '![Image](img/chapter24-07.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter24-07.png)'
- en: Let's see what happens when the flow of execution reaches a mid-test loop structure.
    The statement or block of statements 1 of the structure is directly executed and
    if Boolean_Expression evaluates to False, the statement or block of statements
    2 is executed and  the flow of execution goes back to the point just above the
    statement or block of statements 1 of the structure. The statement or block of
    statements 1 is executed once more and if Boolean_Expression evaluates to False
    again, the process repeats. The iterations stop when Boolean_Expression, at some
    point, evaluates to True and the flow of execution exits the loop.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当执行流程达到中测试循环结构时会发生什么。结构中的语句或语句块 1 直接执行，如果布尔表达式评估为假，则执行语句或语句块 2，执行流程回到结构中语句或语句块
    1 的上方。语句或语句块 1 再次执行，如果布尔表达式再次评估为假，则过程重复。当布尔表达式在某个时刻评估为真时，执行流程退出循环。
- en: Although this loop control structure is directly supported in some computer
    languages such as Ada, unfortunately this is not true for Python. However, you
    can still write mid-test loops using the while statement along with an if and
    a break statement. The main idea is to create an endless loop and break out of
    it when the Boolean expression that exists between the two statements (or block
    of statements) of the structure evaluates to True. The idea is shown in the code
    fragment given in general form that follows.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这种循环控制结构在某些计算机语言（如 Ada）中得到直接支持，但不幸的是，Python 并不支持。然而，您仍然可以使用 while 语句以及 if
    和 break 语句来编写中测试循环。主要思想是创建一个无限循环，并在两个语句（或语句块）之间的布尔表达式评估为真时跳出循环。这种思想在以下一般形式的代码片段中给出。
- en: 'while True:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: A statement or block of statements 1
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 语句或语句块 1
- en: 'if Boolean_Expression: break'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression: break'
- en: A statement or block of statements 2
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 语句或语句块 2
- en: '![](img/notice.jpg)You can break out of a loop before it actually completes
    all of its iterations by using the break statement.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)您可以使用 break 语句在循环实际完成所有迭代之前跳出循环。'
- en: The following example displays the numbers 1 to 10.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例显示数字 1 到 10。
- en: '![](img/my_exercise_header.png) file_24.3'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_24.3'
- en: i = 1
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(i)
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: 'if i >= 10: break'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i >= 10: break'
- en: i += 1
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: Exercise 24.3-1 Designing the Flowchart and Counting the Total Number of Iterations
  id: totrans-338
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 24.3-1 设计流程图和计算迭代总数
- en: Design the corresponding flowchart for the following code fragment and create
    a trace table to determine the values of variable i in each step.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 设计以下代码片段对应的流程图，并创建一个跟踪表以确定变量 i 在每一步的值。
- en: i = 10
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: i = 10
- en: 'while True:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(i)
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: i += 5
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: i += 5
- en: 'if i > 45: break'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i > 45: break'
- en: print(i ** 2)
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: print(i ** 2)
- en: i += 10
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: i += 10
- en: print("The end")
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: print("The end")
- en: Solution
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The corresponding flowchart fragment is as follows.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的流程图片段如下。
- en: '![Image](img/chapter24-08.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter24-08.png)'
- en: Now, let's create a trace table to observe the flow of execution.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个跟踪表来观察执行流程。
- en: '| Step | Statement | Notes | i |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | i |'
- en: '| 1 | i = 10 |   | 10 |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| 1 | i = 10 |   | 10 |'
- en: '| 2 | print(i) | It displays: 10 |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| 2 | print(i) | 它显示：10 |'
- en: '| 3 | i += 5 |   | 15 |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| 3 | i += 5 |   | 15 |'
- en: '| 4 | if i > 45: break | This evaluates to False |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| 4 | if i > 45: break | 这评估为False |'
- en: '| 5 | print(i ** 2) | It displays: 225 |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(i ** 2) | 它显示：225 |'
- en: '| 6 | i += 10 |   | 25 |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| 6 | i += 10 |   | 25 |'
- en: '| 7 | print(i) | It displays: 25 |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| 7 | print(i) | 它显示：25 |'
- en: '| 8 | i += 5 |   | 30 |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| 8 | i += 5 |   | 30 |'
- en: '| 9 | if i > 45: break | This evaluates to False |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| 9 | if i > 45: break | 这评估为False |'
- en: '| 10 | print(i ** 2) | It displays: 900 |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| 10 | print(i ** 2) | 它显示：900 |'
- en: '| 11 | i += 10 |   | 40 |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| 11 | i += 10 |   | 40 |'
- en: '| 12 | print(i) | It displays: 40 |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| 12 | print(i) | 它显示：40 |'
- en: '| 13 | i += 5 |   | 45 |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| 13 | i += 5 |   | 45 |'
- en: '| 14 | if i > 45: break | This evaluates to False |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| 14 | if i > 45: break | 这评估为False |'
- en: '| 15 | print(i ** 2) | It displays: 2025 |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| 15 | print(i ** 2) | 它显示：2025 |'
- en: '| 16 | i += 10 |   | 55 |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| 16 | i += 10 |   | 55 |'
- en: '| 17 | print(i) | It displays: 55 |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| 17 | print(i) | 它显示：55 |'
- en: '| 18 | i += 5 |   | 60 |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| 18 | i += 5 |   | 60 |'
- en: '| 19 | if i > 45: break | This evaluates to True |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| 19 | if i > 45: break | 这评估为True |'
- en: '| 20 | print("The end") | It displays: The end |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| 20 | print("The end") | 它显示：The end |'
- en: '24.4 Review Questions: True/False'
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.4 复习问题：真/假
- en: Choose true or false for each of the following statements.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择真或假。
- en: 1)A pre-test loop may perform zero iterations.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 1)前测试循环可能执行零次迭代。
- en: 2)In flowcharts, both exits of the diamond symbol in a pre-test loop structure,
    have an upwards direction.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 2)在流程图中，前测试循环结构中菱形符号的两个出口都向上。
- en: 3)The statement or block of statements of a pre-test loop structure is executed
    at least one time.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 3)前测试循环结构的语句或语句块至少执行一次。
- en: 4)A while statement stops iterating when its Boolean expression evaluates to
    True
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 4)while语句在其布尔表达式评估为True时停止迭代
- en: 5)In a pre-test loop structure, when the statement or block of statements of
    the structure is executed N times, the Boolean expression is evaluated N − 1 times.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在前测试循环结构中，当结构中的语句或语句块执行N次时，布尔表达式被评估N-1次。
- en: 6)A post-test loop may perform zero iterations.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 6)后测试循环可能执行零次迭代。
- en: 7)In a post-test loop structure, when the statement or block of statements of
    the structure is executed N times, its Boolean expression is evaluated N times
    as well.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在后测试循环结构中，当结构中的语句或语句块执行N次时，其布尔表达式也被评估N次。
- en: 8)You cannot nest a decision control structure inside a post-test loop structure.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 8)您不能在后测试循环结构内部嵌套决策控制结构。
- en: 9)In the mid-test loop structure, the statement or block of statements 1 is
    executed the same number of times as the statement or block of statements 2.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 9)在中测试循环结构中，语句或语句块1被执行的次数与语句或语句块2相同。
- en: 10)In the following code fragment the word “Hello” is displayed 10 times.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 10)在以下代码片段中，单词“Hello”被显示10次。
- en: i = 1
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 10:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 10:'
- en: print("Hello")
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello")
- en: i += 1
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 11)The following Python program does not satisfy the property of finiteness.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 11)以下Python程序不满足有限性的属性。
- en: i = 1
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i != 10:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i != 10:'
- en: print("Hello")
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello")
- en: i += 2
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: i += 2
- en: 12)In the following code fragment the word “Hello” is displayed an infinite
    number of times.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 12)在以下代码片段中，单词“Hello”被显示无限次。
- en: i = 1
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Hello")
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello")
- en: 'if i < 10: break'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i < 10: break'
- en: 13)The following Python program (not code fragment) satisfies the property of
    effectiveness.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 13)以下Python程序（不是代码片段）满足有效性的属性。
- en: 'while True:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Hello")
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello")
- en: i -= 2
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 2
- en: 'if i <= 10: break'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i <= 10: break'
- en: 14)The following Python program does not satisfy the property of definiteness.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 14)以下Python程序不满足确定性的属性。
- en: b = int(input())
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'if b != 1:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 'if b != 1:'
- en: 'while True:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: a = 1 / (b - 1)
  id: totrans-408
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = 1 / (b - 1)
- en: b += 1
  id: totrans-409
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b += 1
- en: 'if b > 10: break'
  id: totrans-410
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if b > 10: break'
- en: 15)In the following code fragment the word “Zeus” is displayed 10 times.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 15)在以下代码片段中，单词“Zeus”被显示10次。
- en: i = 1
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Zeus")
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: print("Zeus")
- en: 'if i > 10: break'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i > 10: break'
- en: i += 1
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: '24.5 Review Questions: Multiple Choice'
  id: totrans-417
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.5 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下每个陈述的正确答案。
- en: 1)In flowcharts, the diamond symbol is being used
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 1)在流程图中，菱形符号正在被使用
- en: a)in decision control structures.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: a)在决策控制结构中。
- en: b)in loop control structures.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: b)在循环控制结构中。
- en: c)all of the above
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: c)所有以上选项
- en: 2)A post-test loop structure
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 2)后测试循环结构
- en: a)performs one iteration more than the pre-test loop structure does.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: a)比预测试循环结构多执行一次迭代。
- en: b)performs the same number of iterations as the pre-test loop structure does.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: b)与预测试循环结构的迭代次数相同。
- en: c)it depends
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: c)取决于
- en: 3)In a post-test loop structure, the statement or block of statements of the
    structure
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 3)在后测试循环结构中，结构的语句或语句块
- en: a)are executed before the loop's Boolean expression is evaluated.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: a)在循环的布尔表达式评估之前执行。
- en: b)are executed after the loop's Boolean expression is evaluated.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: b)在循环的布尔表达式评估后执行。
- en: c)none of the above
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上都不是
- en: 4)In the following code fragment
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 4)在以下代码片段
- en: i = 1
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i < 10:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 10:'
- en: print("Hello Hermes")
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Hermes")
- en: i += 1
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: the message “Hello Hermes” is displayed
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Hermes”
- en: a)10 times.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: a)10次。
- en: b)9 times.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: b)9次。
- en: c)1 time.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: c)1次。
- en: d)0 times.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: d)0次。
- en: e)none of the above
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: e)以上都不是
- en: 5)In the following code fragment
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在以下代码片段
- en: i = 1
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i < 10:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 10:'
- en: print("Hi!")
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hi!")
- en: print("Hello Ares")
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Ares")
- en: i += 1
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: the message “Hello Ares” is displayed
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Ares”
- en: a)10 times.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: a)10次。
- en: b)11 time.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: b)11次。
- en: c)1 times.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: c)1次。
- en: d)0 times.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: d)0次。
- en: e)none of the above
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: e)以上都不是
- en: 6)In the following code fragment
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在以下代码片段
- en: i = 1
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i < 10:'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 10:'
- en: i += 1
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print("Hi!")
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hi!")
- en: print("Hello Aphrodite")
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Aphrodite")
- en: the message “Hello Aphrodite” is displayed
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Aphrodite”
- en: a)10 times.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: a)10次。
- en: b)1 time.
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: b)1次。
- en: c)0 times.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: c)0次。
- en: d)none of the above
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 7)In the following code fragment
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在以下代码片段
- en: i = 1
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i >= 10:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i >= 10:'
- en: print("Hi!")
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hi!")
- en: print("Hello Apollo")
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Apollo")
- en: i += 1
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: the message “Hello Apollo” is displayed
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Apollo”
- en: a)10 times.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: a)10次。
- en: b)1 time.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: b)1次。
- en: c)0 times.
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: c)0次。
- en: d)none of the above
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 8)The following Python program
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 8)以下Python程序
- en: n = int(input())
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: s = 0
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: i = 1
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i < n:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < n:'
- en: a = float(input())
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: s = s + a
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: s = s + a
- en: i += 1
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(s)
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(s)
- en: calculates and displays the sum of
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 计算并显示总和
- en: a)as many numbers as the value of variable n denotes.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: a)与变量n的值表示的数字一样多。
- en: b)as many numbers as the result of the expression n − 1 denotes.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: b)与表达式n - 1的结果表示的数字一样多。
- en: c)as many numbers as the value of variable i denotes.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: c)与变量i的值表示的数字一样多。
- en: d)none of the above
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 9)In the following code fragment
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 9)在以下代码片段
- en: i = 1
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Hello Poseidon")
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Poseidon")
- en: i += 1
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'if i <= 5: break'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i <= 5: break'
- en: the message “Hello Poseidon” is displayed
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Poseidon”
- en: a)5 times.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: a)5次。
- en: b)1 time.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: b)1次。
- en: c)0 times.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: c)0次。
- en: d)none of the above
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 10)In the following code fragment
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 10)在以下代码片段
- en: i = 1
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Hello Athena")
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Athena")
- en: i += 5
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: i += 5
- en: 'if i == 50: break'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i == 50: break'
- en: the message “Hello Athena” is displayed
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Athena”
- en: a)at least one time.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: a)至少一次。
- en: b)at least 10 times.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: b)至少10次。
- en: c)an infinite number of times.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: c)无限次数。
- en: d)all of the above
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: d)所有以上选项
- en: 11)In the following code fragment
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 11)在以下代码片段
- en: i = 0
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: 'while True:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print("Hello Apollo")
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Apollo")
- en: 'if i <= 10: break'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i <= 10: break'
- en: the message “Hello Apollo” is displayed
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Apollo”
- en: a)at least one time.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: a)至少一次。
- en: b)an infinite number of times.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: b)无限次数。
- en: c)none of the above
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上都不是
- en: 12)In the following code fragment
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 12)在以下代码片段
- en: i = 10
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: i = 10
- en: 'while True:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: i -= 1
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: 'if i > 0: break'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i > 0: break'
- en: print("Hello Aphrodite")
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 打印("Hello Aphrodite")
- en: the message “Hello Aphrodite” is displayed
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 显示消息“Hello Aphrodite”
- en: a)at least one time.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: a)至少一次。
- en: b)an infinite number of times.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: b)无限次数。
- en: c)ten times
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: c)十次
- en: d)none of the above
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 24.6 Review Exercises
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 24.6 复习练习
- en: Complete the following exercises.
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Identify the error(s) in the following Python program. It must display the
    numbers 3, 2, 1 and the message “The end”.
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 1)识别以下Python程序中的错误（错误）。它必须显示数字3、2、1和消息“The end”。
- en: i = 3
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: i = 3
- en: while True
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: while True
- en: print(i)
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(i)
- en: i -= 1
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: if i < 0 break
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: if i < 0 break
- en: print(The end)
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(The end)
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 2)创建一个跟踪表以确定下一个Python程序每一步中变量的值。这个Python程序执行了多少次迭代？
- en: i = 3
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: i = 3
- en: x = 0
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: x = 0
- en: 'while i >= 0:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i >= 0:'
- en: i -= 1
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: x += i
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: x += i
- en: print(x)
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 打印(x)
- en: 3)Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next Python program. How many iterations
    does this Python program perform?
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 3)设计相应的流程图并创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: i = -5
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: i = -5
- en: 'while i < 10:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 10:'
- en: i -= 1
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: print(i)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: 4)创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: a = 2
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2
- en: 'while a <= 10:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a <= 10:'
- en: b = a + 1
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: b = a + 1
- en: c = b * 2
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: c = b * 2
- en: d = c - b + 1
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: d = c - b + 1
- en: 'if d == 4:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 'if d == 4:'
- en: print(b, ",", c)
  id: totrans-560
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(b, ",", c)
- en: 'elif d == 5:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif d == 5:'
- en: print(c)
  id: totrans-562
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(c)
- en: 'elif d == 8:'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif d == 8:'
- en: print(a, ",", b)
  id: totrans-564
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a, ",", b)
- en: 'else:'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(a, ",", b, ",", d)
  id: totrans-566
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a, ",", b, ",", d)
- en: a += 4
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: a += 4
- en: 5)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 5)创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: a = 1
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: a = 1
- en: b = 1
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: b = 1
- en: c = 0
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: c = 0
- en: d = 0
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: d = 0
- en: 'while b < 2:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 'while b < 2:'
- en: x = a + b
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: x = a + b
- en: 'if x % 2 != 0:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % 2 != 0:'
- en: c = c + 1
  id: totrans-576
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: c = c + 1
- en: 'else:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: d = d + 1
  id: totrans-578
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: d = d + 1
- en: a = b
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: a = b
- en: b = c
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: b = c
- en: c = d
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: c = d
- en: 6)Fill in the gaps in the following code fragments so that all loops perform
    exactly four iterations.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在以下代码片段中填入空缺，以便所有循环都恰好执行四次迭代。
- en: i)
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: a = 3
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: a = 3
- en: 'while a > …… :'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a > …… :'
- en: print(a)
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a -= 1
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: a -= 1
- en: ii)
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: a = 5
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: 'while a < …… :'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a < …… :'
- en: print(a)
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a += 1
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: a += 1
- en: iii)
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: iii)
- en: a = 9
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: a = 9
- en: 'while a != 10:'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a != 10:'
- en: print(a)
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a = a + ……
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 'a = a + …… '
- en: iv)
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: iv)
- en: a = 1
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: a = 1
- en: 'while a != …… :'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a != …… :'
- en: print(a)
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a -= 2
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: a -= 2
- en: v)
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: v)
- en: a = 2
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2
- en: 'while a < …… :'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a < …… :'
- en: print(a)
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a = 2 * a
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2 * a
- en: vi)
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: vi)
- en: a = 1
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: a = 1
- en: 'while a < …… :'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a < …… :'
- en: print(a)
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a = a + 0.1
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: a = a + 0.1
- en: 7)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 7)创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: y = 5
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: y = 5
- en: x = 38
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: x = 38
- en: 'while True:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: y *= 2
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: y *= 2
- en: x += 1
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: x += 1
- en: print(y)
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 'if y >= x: break'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y >= x: break'
- en: 8)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 8)创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: x = 1
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: x = 1
- en: 'while True:'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: 'if x % 2 == 0:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % 2 == 0:'
- en: x += 1
  id: totrans-625
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x += 1
- en: 'else:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x += 3
  id: totrans-627
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x += 3
- en: print(x)
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: print(x)
- en: 'if x >= 12: break'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x >= 12: break'
- en: 9)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 9)创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: y = 2
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: y = 2
- en: x = 0
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: x = 0
- en: 'while True:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: y = y ** 2
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: y = y ** 2
- en: 'if x < 256:'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < 256:'
- en: x = x + y
  id: totrans-636
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x + y
- en: print(x, ",", y)
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, ",", y)
- en: 'if y >= 65535: break'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y >= 65535: break'
- en: 10)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 10)创建一个跟踪表以确定下一个Python程序中每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: a = 2
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2
- en: b = 4
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: b = 4
- en: c = 0
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: c = 0
- en: d = 0
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: d = 0
- en: 'while True:'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x = a + b
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: x = a + b
- en: 'if x % 2 != 0:'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % 2 != 0:'
- en: c = c + 5
  id: totrans-647
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: c = c + 5
- en: 'elif d % 2 == 0:'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif d % 2 == 0:'
- en: d = d + 5
  id: totrans-649
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: d = d + 5
- en: 'else:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: c = c + 3
  id: totrans-651
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: c = c + 3
- en: a = b
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: a = b
- en: b = d
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: b = d
- en: 'if c >= 11: break'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 'if c >= 11: break'
- en: 11)Fill in the gaps in the following code fragments so that all loops perform
    exactly six iterations.
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 11)在以下代码片段中填入空缺，以便所有循环都恰好执行六次迭代。
- en: i)
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: a = 5
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: 'while True:'
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(a)
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a -= 1
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: a -= 1
- en: 'if a <= …… : break'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a <= …… : break'
- en: ii)
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: a = 12
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: a = 12
- en: 'while True:'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(a)
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a += 1
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: a += 1
- en: 'if a >= …… : break'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a >= …… : break'
- en: iii)
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: iii)
- en: a = 20
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: a = 20
- en: 'while True:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(a)
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a = a + ……
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 'a = a + …… '
- en: 'if a == 23: break'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == 23: break'
- en: iv)
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: iv)
- en: a = 100
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: a = 100
- en: 'while True:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(a)
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a -= 20
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: a -= 20
- en: 'if a == …… : break'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == …… : break'
- en: v)
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: v)
- en: a = 2
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2
- en: 'while True:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(a)
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a = 2 * a
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: a = 2 * a
- en: 'if a == …… : break'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == …… : break'
- en: vi)
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: vi)
- en: a = 10
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: a = 10
- en: 'while True:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(a)
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: a = a + 0.25
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: a = a + 0.25
- en: 'if a > …… : break'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > …… : break'
- en: 12)Fill in the gaps in the following code fragments so that all display the
    value 10 at the end.
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 12)在以下代码片段中填入空缺，以便所有代码在最后都显示值10。
- en: i)
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: x = 0
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: x = 0
- en: y = 0
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: y = 0
- en: 'while True:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x += 1
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: x += 1
- en: y += 2
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: y += 2
- en: 'if x > …… : break'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x > …… : break'
- en: print(y)
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: ii)
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: x = 1
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: x = 1
- en: y = 20
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: y = 20
- en: 'while True:'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x -= 1
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: x -= 1
- en: y -= 2.5
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: y -= 2.5
- en: 'if x < …… : break'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < …… : break'
- en: print(y)
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: iii)
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: iii)
- en: x = 3
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: x = 3
- en: y = 2.5
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: y = 2.5
- en: 'while True:'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x -= 1
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: x -= 1
- en: y *= 2
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: y *= 2
- en: 'if x < …… : break'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < …… : break'
- en: print(y)
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: iv)
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: iv)
- en: x = 30
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: x = 30
- en: y = 101532
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: y = 101532
- en: 'while True:'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x -= ……
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: x -= ……
- en: y = y // 10
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: y = y // 10
- en: 'if x < 0: break'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < 0: break'
- en: print(y)
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 13)Using a pre-test loop structure, write a Python program that lets the user
    enter N numbers and then calculates and displays their sum and their average.
    The value of N must be provided by the user at the beginning of the program.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 13)使用预测试循环结构，编写一个Python程序，让用户输入N个数字，然后计算并显示它们的总和和平均值。N的值必须在程序开始时由用户提供。
- en: 14)Using a pre-test loop structure, write a Python program that lets the user
    enter N integers and then calculates and displays the product of those that are
    even. The value of N must be provided by the user at the beginning of the program.
    Moreover, if all user-provided integers are odd, the message “You entered no even
    integers” must be displayed.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 14)使用预测试循环结构，编写一个Python程序，让用户输入N个整数，然后计算并显示偶数的乘积。N的值必须在程序开始时由用户提供。此外，如果用户提供的所有整数都是奇数，则必须显示消息“你没有输入任何偶数整数”。
- en: 15)Using a pre-test loop structure, write a Python program that lets the user
    enter 100 integers and then calculates and displays the sum of those with a last
    digit of 0\. For example, the values 10, 2130, and 500 are such numbers.
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: 15)使用预测试循环结构，编写一个Python程序，让用户输入100个整数，然后计算并显示以0结尾的整数的总和。例如，10、2130和500都是这样的数。
- en: 'Hint: You can isolate the last digit of any integer using a modulus 10 operation.'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：您可以使用取模10操作来隔离任何整数的最后一位。
- en: 16)Using a pre-test loop structure, write a Python program that lets the user
    enter 20 integers and then calculates and displays the sum of those that consist
    of three digits.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 16)使用预测试循环结构，编写一个Python程序，让用户输入20个整数，然后计算并显示由三位数组成的总和。
- en: 'Hint: All three-digit integers are between 100 and 999.'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：所有三位整数都在100到999之间。
- en: 17)Using a pre-test loop structure, write a Python program that lets the user
    enter numeric values repeatedly until the value 0 is entered. When data input
    is completed, the product of the numbers entered must be displayed. (The last
    0 entered must not be included in the final product). Next, create a trace table
    to check if your program operates properly using 3, 2, 9, and 0 as input values.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 17)使用预测试循环结构，编写一个Python程序，让用户重复输入数值，直到输入值为0。当数据输入完成后，必须显示输入的数的乘积。（最后输入的0必须不包括在最终乘积中）。接下来，创建一个跟踪表来检查程序是否使用3、2、9和0作为输入值正确运行。
- en: 18)The population of a town is now at 30000 and is expanding at a rate of 3%
    per year. Using a pre-test loop structure, write a Python program to determine
    how many years it will take for the population to exceed 100000.
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: 18)一个城镇的人口现在为30000，每年增长率为3%。使用预测试循环结构，编写一个Python程序来确定人口超过100000需要多少年。
- en: 19)Using a post-test loop structure, design a flowchart and write the corresponding
    Python program that lets the user enter 50 integers and then calculates and displays
    the sum of those that are odd and the sum of those that are even.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 19)使用后测试循环结构，设计一个流程图并编写相应的Python程序，让用户输入50个整数，然后计算并显示奇数的总和和偶数的总和。
- en: 20)Using a post-test loop structure, write a Python program that lets the user
    enter N integers and then calculates and displays the product of those that are
    negative. The value of N must be provided by the user at the beginning of the
    program, and the final product must always be displayed as a positive value. Assume
    that the user enters a value greater than 0 for N.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 20)使用后测试循环结构，编写一个Python程序，让用户输入N个整数，然后计算并显示负数的乘积。N的值必须在程序开始时由用户提供，并且最终乘积必须始终以正值显示。假设用户为N输入的值大于0。
- en: 21)Using a post-test loop structure, write a Python program that prompts the
    user to enter five integers and then calculates and displays the product of all
    three-digit integers with a first digit of 5\. For example, the values 512, 555,
    and 593 are all such numbers
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 21)使用后测试循环结构，编写一个Python程序，提示用户输入五个整数，然后计算并显示所有以5开头的三位整数的乘积。例如，512、555和593都是这样的数。
- en: 'Hint: All three-digit integers with a first digit of 5 are between 500 and
    599.'
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：所有以5开头的三位整数都在500到599之间。
- en: 22)The current population of a beehive is 50,000\. Each year, the beehive experiences
    a 5% increase due to new births, but also faces a 15% mortality rate due to environmental
    reasons. Using a post-test loop structure, write a Python program to determine
    how many years it will take for the population to fall below 20,000.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 22) 蜂箱当前的人口为50,000。每年，蜂箱因新生而经历5%的增长，但也因环境原因面临15%的死亡率。使用后测试循环结构，编写一个Python程序来确定人口下降到20,000以下需要多少年。
