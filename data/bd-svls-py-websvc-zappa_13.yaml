- en: Assessments
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 评估
- en: Chapter 1, Amazon Web Services for Serverless
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章，无服务器的亚马逊网络服务
- en: 'Deploying your application on serverless architecture is nothing but handover
    your application to Amazon infrastructure. Hence, there are the following benefits:'
  id: totrans-2
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在无服务器架构上部署应用程序只是将应用程序交给亚马逊基础设施。因此，有以下好处：
- en: Amazon will take care of auto scalability
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊将负责自动扩展
- en: No server management process is required
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不需要服务器管理流程
- en: It also makes a huge difference in terms of cost, you pay as per usage which
    is based on the execution time
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在成本方面也有很大的差异，您按照基于执行时间的使用量付费。
- en: It provide high availability
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供高可用性
- en: '**Amazon Simple Storage Service** (**S3**) is a storage service provided by
    Amazon. AWS Lambda supports inline code execution, where you can directly write
    your code from its web interface. It also supports fetching the code base from
    an Amazon S3 bucket, where you can put your code base as a build package in ZIP
    format. Zappa has a command to generate the ZIP package of your application.'
  id: totrans-7
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Amazon Simple Storage Service** (**S3**)是亚马逊提供的存储服务。AWS Lambda支持内联代码执行，您可以直接从其Web界面编写代码。它还支持从Amazon
    S3存储桶中获取代码库，您可以将代码库放入ZIP格式的构建包中。Zappa有一个命令来生成应用程序的ZIP包。'
- en: Chapter 2, Getting Started with Zappa
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章，开始使用Zappa
- en: It's an open source tool developed by gun.io ([https://www.gun.io/](https://www.gun.io/))
    to automate the manual process of creating a serverless environment on AWS infrastructure.
  id: totrans-9
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是由gun.io ([https://www.gun.io/](https://www.gun.io/))开发的开源工具，用于自动化在AWS基础设施上创建无服务器环境的手动过程。
- en: Zappa provides an easy way to configure the AWS **VPC** (**Virtual Private Cloud**)
    by adding the AWS VPC subnets and security group ID in `zappa_setttings.json`.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zappa通过在`zappa_setttings.json`中添加AWS VPC子网和安全组ID来提供配置AWS **VPC** (**虚拟私有云**)的简单方法。
- en: Chapter 3, Building a Flask Application with Zappa
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章，使用Zappa构建Flask应用
- en: Amazon API Gateway is a service to connect with other AWS services. API Gateway
    provides a RESTful application interface for mobile and web applications to connect
    with other AWS services. In our case, Zappa configured the API Gateway interface
    with proxy requests to invoke AWS Lambda.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 亚马逊API Gateway是一个连接其他AWS服务的服务。API Gateway为移动和Web应用程序提供了与其他AWS服务连接的RESTful应用程序接口。在我们的案例中，Zappa配置了API
    Gateway接口，以代理请求来调用AWS Lambda。
- en: Zappa performs the deployment operation based on the `zappa_settings.json` file
    configuration. Zappa uses the `function_name` to point the Flask application object
    in order to configure the application on AWS Lambda and API Gateway.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zappa根据`zappa_settings.json`文件的配置执行部署操作。Zappa使用`function_name`指向Flask应用对象，以便在AWS
    Lambda和API Gateway上配置应用程序。
- en: Chapter 4, Building a Flask-Based REST API with Zappa
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章，使用Zappa构建基于Flask的REST API
- en: '**JWT** (**JSON Web Token**) provides an easy way to secure an application
    from unauthorized access. Access to the API can be authorized based on the JWT
    token provided in the authentication header.'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**JWT** (**JSON Web Token**)提供了一种简单的方式来保护应用程序免受未经授权的访问。根据身份验证标头中提供的JWT令牌，可以授权对API的访问。'
- en: The `function_name` indicated the module path of Flask application object. It
    helps Zappa to configure the Flask application and its routes with API Gateway.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`function_name`指示了Flask应用对象的模块路径。它帮助Zappa配置Flask应用程序及其路由与API Gateway。'
- en: Chapter 5, Building a Django Application with Zappa
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章，使用Zappa构建Django应用
- en: Amazon CloudFront is managed web service that delivers static and dynamic web
    content with high speed over the internet. Amazon has various data centers located
    worldwide, these data centers are referred to as edge locations, hence AWS CloudFront
    uses these edge locations to deliver the web content with minimal latency and
    boost the application's performance.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Amazon CloudFront是一个托管的网络服务，可以通过互联网高速传送静态和动态网络内容。亚马逊在全球各地有各种数据中心，这些数据中心被称为边缘位置，因此AWS
    CloudFront使用这些边缘位置以最小的延迟传送网络内容，并提高应用程序的性能。
- en: Pipenv is a packing tool used to manage Python packages. It is also recommended
    by the **Python.org** ([https://www.python.org/](https://www.python.org/)). It
    helps to maintain the packages and dependencies along with their versions. Thus
    it helps to develop and maintain a stable version application.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Pipenv是一个用于管理Python包的打包工具。它也被**Python.org** ([https://www.python.org/](https://www.python.org/))推荐。它有助于维护包和依赖项以及它们的版本。因此，它有助于开发和维护稳定版本的应用程序。
- en: Chapter 6, Building a Django REST API with Zappa
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章，使用Zappa构建Django REST API
- en: Django Rest Framework is a library for developing RESTful APIs with Django based
    application. It has a standard pattern to implement APIs over Django Models. It
    offers many features to developers for implementing and managing APIs in a simple
    way.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django Rest Framework是一个用于开发基于Django应用的RESTful API的库。它有一个标准模式来在Django模型上实现API。它为开发人员提供了许多功能，以简单的方式实现和管理API。
- en: Django-storage is a library for implementing custom storage for your Django
    application. It follows Django's standard in order to persist data.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django-storage是一个用于实现Django应用程序的自定义存储的库。它遵循Django的标准以持久化数据。
- en: Chapter 7, Building a Falcon Application with Zappa
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章，使用Zappa构建Falcon应用
- en: Falcon frameworks have a great benchmark as compare to other Python frameworks.
    It is intended to write RESTful API in a very optimized way.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与其他Python框架相比，Falcon框架具有很高的基准。它旨在以非常优化的方式编写RESTful API。
- en: Peewee library follows Django's model patterns to create database tables and
    performing the CRUD operations. It offers many features such as high performance,
    lightweight, and less complexity. SQLAlchemy has a little learning curve and complexity.
    Peewee can be considered a small/medium size of application or microservices.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Peewee库遵循Django的模式来创建数据库表并执行CRUD操作。它提供许多功能，如高性能、轻量级和较少的复杂性。SQLAlchemy有一点学习曲线和复杂性。Peewee可以被认为是一个小型/中型的应用程序或微服务。
- en: Scheduling is a defined mechanism for executing a program at a particular time
    period. Hence it used with many scenarios where we required to execute a program
    or script to perform a specific time. For example, updating a weather information,
    sending a notification alert, and more.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调度是在特定时间段执行程序的定义机制。因此，它与许多场景一起使用，其中我们需要执行程序或脚本以执行特定时间。例如，更新天气信息，发送通知警报等。
- en: Chapter 8, Custom Domain with SSL
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章，带SSL的自定义域
- en: AWS Route 53 is a managed service of Amazon. It offers services for domain registration,
    routing internet traffic to your AWS resource for a specific domain, and creating
    a health checkpoint for your running AWS resources.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Route 53是亚马逊的托管服务。它提供域名注册服务，将互联网流量路由到特定域的AWS资源，并为正在运行的AWS资源创建健康检查点。
- en: '**Domain name servers** (**DNS**) is a mechanism to maintain and translate
    the domain names into **Internet Protocol** (**IP**) because computers communicate
    with each through IP addresses and it is hard to remember. Hence DNS helps to
    manage domain names against IP addresses.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**域名服务器**（**DNS**）是一种维护和转换域名到**Internet Protocol**（**IP**）的机制，因为计算机通过IP地址进行通信并且很难记住。因此DNS有助于管理域名与IP地址的对应关系。'
- en: ACM generates the SSL certificate against a domain name. If you use an SSL certificate
    along with your domain name, it enables HTTPS protocol for transitioning through
    your domain. HTTPS is a secure protocol that encrypts the data over the internet
    and provides a security for your confidential information transfer through your
    domain.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ACM根据域名生成SSL证书。如果您在域名上使用SSL证书，它将启用HTTPS协议，用于通过您的域进行过渡。HTTPS是一种安全协议，它加密了互联网上传输的数据，并为通过您的域传输的机密信息提供了安全性。
- en: Chapter 9, Asynchronous Task Execution on AWS Lambda
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章，在AWS Lambda上执行异步任务
- en: AWS SNS is a web service provides a messaging implementation as a publish and
    subscribe pattern. It supports various resources to subscribe over a channel and
    get published messages. It can be used to manage and implement a notification
    service for your application. There are many other features, which can be considered
    to AWS SNS service for your application development.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS SNS是一个Web服务，提供发布和订阅模式的消息实现。它支持各种资源订阅通道并获取发布的消息。它可以用于管理和实现应用程序的通知服务。还有许多其他功能，可以考虑将AWS
    SNS服务用于应用程序开发。
- en: AWS SNS works on to publish and subscribe pattern. As it supports AWS Lambda
    to be registered as a subscriber. It can invoke the AWS Lambda function with the
    published message context.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS SNS用于发布和订阅模式。它支持将AWS Lambda注册为订阅者。它可以使用发布的消息上下文调用AWS Lambda函数。
- en: Chapter 10, Advanced Zappa Settings
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章，高级Zappa设置
- en: AWS Lambda is designed to provide a serverless infrastructure. It instantiates
    the context on invocation request and then destroys itself after serving the request.
    AWS Lambda adds a little time delay for the initial startup and setting up the
    context. To avoid it, you can keep the Lambda instance in a warm state by setting
    up the schedule trigger using AWS CloudWatch. Zappa provides this feature by default
    and you can turn off this feature by setting the `keep_warm` attribute to `false`.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda旨在提供无服务器基础架构。它在调用请求时实例化上下文，然后在提供请求后销毁自身。AWS Lambda会为初始启动和上下文设置添加一点时间延迟。为了避免这种情况，您可以通过使用AWS
    CloudWatch设置计划触发器来保持Lambda实例处于热状态。Zappa默认提供了这个功能，您可以通过将`keep_warm`属性设置为`false`来关闭此功能。
- en: '**Cross-Origin Resource Sharing** (**CORS**) is mechanism that allows a domain
    to access restricted resources from the different domain.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跨域资源共享**（**CORS**）是一种机制，允许一个域从不同的域访问受限资源。'
- en: Zappa provides an easy way of managing large size project as AWS Lambda has
    a limitation of uploading the build package with 50 MB but also have an option
    to service bigger size build packages from Amazon S3\. In Zappa setting, you can
    `slim_handler`to `true` which will upload the build package on Amazon S3 and then
    configure the AWS Lambda against the uploaded build package on Amazon S3.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Zappa提供了一种管理大型项目的简单方法，因为AWS Lambda在上传构建包时有50MB的限制，但也有一个选项可以从Amazon S3服务更大的构建包。在Zappa设置中，您可以将`slim_handler`设置为`true`，这将在Amazon
    S3上上传构建包，然后针对在Amazon S3上上传的构建包配置AWS Lambda。
- en: Chapter 11, Securing Serverless Applications with Zappa
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章，使用Zappa保护无服务器应用程序
- en: API Gateway authorizer is a mechanism to secure API resources. API Gateway authorizer
    generates an API Key that can bind with any resource. Once you bind the API resources
    then API Gateway will restrict any HTTP request with the API key in the `x-api-key`
    header.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API Gateway授权者是一种保护API资源的机制。API Gateway授权者生成一个API密钥，可以绑定到任何资源。一旦绑定了API资源，API
    Gateway将限制任何带有`x-api-key`头的HTTP请求。
- en: AWS Lambda has a feature of **Dead Letter Queue** (**DLQ**), which enables developers
    to monitor the unknown failure. It can be configured against the AWS SNS or SQS
    as a DLQ in the AWS Lambda function. AWS Lambda will publish the failure event
    over the configured AWS SNS or SQS ARN.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS Lambda具有**死信队列**（**DLQ**）的功能，它使开发人员能够监视未知的失败。它可以配置为AWS Lambda函数中的AWS SNS或SQS的DLQ。AWS
    Lambda将在配置的AWS SNS或SQS ARN上发布失败事件。
- en: AWS Virtual Private Cloud creates an isolated virtual network layer where you
    can configure all your AWS resources. AWS VPC will restrict the access from a
    outside the VPC network and enables the security layer.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: AWS虚拟私有云创建了一个隔离的虚拟网络层，您可以在其中配置所有AWS资源。AWS VPC将限制从VPC网络外部的访问，并启用安全层。
- en: Chapter 12, Zappa with Docker
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章，Zappa与Docker
- en: A Docker container is a virtual instance of a basic Linux system that enables
    you to perform operations in an isolated environment. Docker container has all
    basic configurations such as networking, filesystem and OS level utilities.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Docker容器是基本Linux系统的虚拟实例，它使您能够在隔离的环境中执行操作。Docker容器具有所有基本配置，如网络、文件系统和操作系统级实用程序。
- en: A Docker image is an actual OS image with the required packages. You can also
    create your own image and publish it on the Docker repository. A Docker container
    is an instance of the Docker image. You create *N* number of containers using
    a Docker image.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个Docker镜像是一个带有所需软件包的实际操作系统镜像。您也可以创建自己的镜像并将其发布到Docker仓库。一个Docker容器是Docker镜像的一个实例。您可以使用Docker镜像创建*N*个容器。
