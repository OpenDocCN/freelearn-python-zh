- en: Chapter 9. Extensions, How I Love Thee
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。扩展，我是如何爱你
- en: We have been using extensions to amplify our examples for a few chapters now;
    Flask-SQLAlchemy was used to connect to a relational database, Flask-MongoEngine
    to connect to MongoDB, Flask-WTF to create flexible reusable forms, and so on.
    Extensions are a great way to add functionality to your projects without adding
    anything *in the way* of your code and, if you like what we've done so far, you're
    going to love this chapter because it is dedicated to extensions!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在前几章中使用扩展来增强我们的示例；Flask-SQLAlchemy用于连接到关系数据库，Flask-MongoEngine用于连接到MongoDB，Flask-WTF用于创建灵活可重用的表单，等等。扩展是一种很好的方式，可以在不妨碍您的代码的情况下为项目添加功能，如果您喜欢我们迄今为止所做的工作，您会喜欢这一章，因为它专门介绍了扩展！
- en: In this chapter, we'll learn about a few very popular extensions we have neglected
    so far. Shall we begin?
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解一些迄今为止忽视的非常流行的扩展。我们要开始了吗？
- en: How to configure extensions
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何配置扩展
- en: Flask extensions are modules you import, (usually) initialize, and use to integrate
    with third-party libraries. They're (also) usually imported from `flask.ext.<extension_name>`
    (which is part of the extension pattern) and should be available in the PyPi repository
    under the BSD, MIT, or another less restrictive license.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: Flask扩展是您导入的模块，（通常）初始化，并用于与第三方库集成。它们通常是从`flask.ext.<extension_name>`（这是扩展模式的一部分）导入的，并应该在PyPi存储库中以BSD、MIT或其他不太严格的许可证下可用。
- en: 'It''s good practice for an extension to have two states: uninitialized and
    initialized. This is good practice because your Flask application may not be available
    at the time you instantiate your extension. Our example in the previous chapter
    only initializes Flask-SQLAlchemy after it is imported in the main module. Ok,
    nice to know but how is the initialization process important?'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展最好有两种状态：未初始化和已初始化。这是一个好的做法，因为在实例化扩展时，您的Flask应用程序可能不可用。我们在上一章的示例中只有在主模块中导入Flask-SQLAlchemy后才进行初始化。好的，知道了，但初始化过程为何重要呢？
- en: 'Well, it''s through the initialization that the extension fetches its configuration
    from the application. For example:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，正是通过初始化，扩展才能从应用程序中获取其配置。例如：
- en: '[PRE0]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the previous code, we create a configuration class and loaded it with `config.from_object`.
    This way, `LOG_LEVEL` became available to all extensions with a hold on the app
    instance through:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了一个配置类，并使用`config.from_object`加载了它。这样，`LOG_LEVEL`就可以在所有扩展中使用，通过对应用实例的控制。
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Another way to load a configuration into `app.config` is using environment
    variables. This approach is especially useful in deployment environments, because
    you don''t want to store a sensitive deployment configuration in your version
    control repository (it''s unsafe!). It works like this:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将配置加载到`app.config`的另一种方法是使用环境变量。这种方法在部署环境中特别有用，因为您不希望将敏感的部署配置存储在版本控制存储库中（这是不安全的！）。它的工作原理如下：
- en: '[PRE2]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If `PATH_TO_CONFIGURATION` is set to a Python file path such as `/home/youruser/someconfig.py`
    then `someconfig.py` will be loaded into config. Do it like this:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`PATH_TO_CONFIGURATION`设置为Python文件路径，例如`/home/youruser/someconfig.py`，那么`someconfig.py`将加载到配置中。像这样做：
- en: '[PRE3]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then create the configuration:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然后创建配置：
- en: '[PRE4]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Both the earlier configuration schemes have the same result.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 早期的配置方案都有相同的结果。
- en: Tip
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Be warned that `from_envvar` will load the environment variable from the user
    running the project. If you export the environment variable to your user and run
    your project as another, like www-data, it may not be able to find your configuration.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`from_envvar`将从运行项目的用户加载环境变量。如果将环境变量导出到您的用户并作为另一个用户（如www-data）运行项目，则可能无法找到您的配置。
- en: Flask-Principal and Flask-Login (aka Batman and Robin)
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-Principal和Flask-Login（又名蝙蝠侠和罗宾）
- en: As described in the project page ([https://pythonhosted.org/Flask-Principal/](https://pythonhosted.org/Flask-Principal/)),
    Flask-Principal is a permission extension. It manages who can access what and
    to what extent. You usually should use it with an authentication and session manager,
    as is the case of Flask-Login, another extension we'll learn in this section.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如项目页面所述（[https://pythonhosted.org/Flask-Principal/](https://pythonhosted.org/Flask-Principal/)），Flask-Principal是一个权限扩展。它管理谁可以访问什么以及在什么程度上。通常情况下，您应该与身份验证和会话管理器一起使用它，就像Flask-Login的情况一样，这是我们将在本节中学习的另一个扩展。
- en: 'Flask-Principal handles permissions through four simple entities: **Identity**,
    **IdentityContext**, **Need**, and **Permission**.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Principal通过四个简单的实体处理权限：**Identity**，**IdentityContext**，**Need**和**Permission**。
- en: '**Identity**: This implies the way Flask-Principal identifies a user.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Identity**：这意味着Flask-Principal识别用户的方式。'
- en: '**IdentityContext**: This implies the context of a user tested against Permission.
    It is used to verify whether the user has the right to do something. It can be
    used as a decorator (block unauthorized access) or as a context manager (only
    execute).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IdentityContext**：这意味着针对权限测试的用户上下文。它用于验证用户是否有权执行某些操作。它可以用作装饰器（阻止未经授权的访问）或上下文管理器（仅执行）。'
- en: 'A **Need** is a criterion you need (aha moment!) to satisfy in order to do
    something, such as having a role or a permission. There are a few preset needs
    available with Principal, but you may create your own easily, as a Need is just
    a named tuple such as this one:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**Need**是您需要满足的标准（啊哈时刻！），以便做某事，比如拥有角色或权限。Principal提供了一些预设的需求，但您也可以轻松创建自己的需求，因为Need只是一个命名元组，就像这样一个：'
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Permission**: This is a group of needs that should be satisfied in order
    to allow something. Interpret it as a guardian of resources.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限**：这是一组需要，应满足以允许某事。将其解释为资源的守护者。'
- en: 'Given that we have our authorization extension all set, we need to authorize
    against something. A usual scenario is to restrict access to an administrative
    interface to administrators (don''t say anything). To do that, we need to identify
    who is an administrator and who isn''t. Flask-Login can be of help here by providing
    us with user session management (login and logout). Let''s try an example. First,
    we make sure the required dependencies are installed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于我们已经设置好了我们的授权扩展，我们需要针对某些内容进行授权。一个常见的情况是将对管理界面的访问限制为管理员（不要说任何话）。为此，我们需要确定谁是管理员，谁不是。Flask-Login可以通过提供用户会话管理（登录和注销）来帮助我们。让我们尝试一个例子。首先，确保安装了所需的依赖项：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'And then:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE7]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As our example now is just too big, we'll understand it piecemeal. First, we
    make the necessary imports and create our extension instances. We set the `login_view`
    for the `login_manager` so that it knows where to redirect our user if he tries
    to access a page that requires user authentication. Be aware that Flask-Principal
    does not handle or keep track of logged users. That is Flask-Login abracadabra!
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的示例现在太大了，我们将逐步理解它。首先，我们进行必要的导入并创建我们的扩展实例。我们为`login_manager`设置`login_view`，以便它知道如果用户尝试访问需要用户身份验证的页面时应该重定向到哪里。请注意，Flask-Principal不处理或跟踪已登录的用户。这是Flask-Login的魔术！
- en: 'We also create our `admin_permission`. Our admin permission has only one need:
    the role admin. This way, we are defining that, for our permission to accept a
    user, this user needs to have the Role `admin`.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还创建了我们的`admin_permission`。我们的管理员权限只有一个需求：角色管理员。这样，我们定义了我们的权限接受用户时，这个用户需要拥有角色`admin`。
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We have two models here, one to hold our user information and another to hold
    our user roles. A role is usually used to categorize users, like `admin`; you
    may have three admins in your system and all of them will have the role admin.
    As a result, they will all be able to do "admin stuff", if the permissions are
    properly configured. Notice we define an `is_active` method for User. That method
    is required and I advise you to always overwrite it, even though `UserMixin` already
    provides an implementation. `is_active` is used to tell `login` whether the user
    is active or not; if not active, he may not log in.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里有两个模型，一个用于保存我们的用户信息，另一个用于保存我们的用户角色。角色通常用于对用户进行分类，比如`admin`；您的系统中可能有三个管理员，他们都将拥有管理员角色。因此，如果权限正确配置，他们都将能够执行“管理员操作”。请注意，我们为用户定义了一个`is_active`方法。该方法是必需的，我建议您始终覆盖它，即使`UserMixin`已经提供了实现。`is_active`用于告诉`login`用户是否活跃；如果不活跃，他可能无法登录。
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here we write the `LoginForm` ourselves. You could say: "Why not use `model_form`,
    dude?" Well, to use `model_form` here, you would have to initialize your database
    with your app (that you do not have yet) and set up a context. Just too much trouble.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们自己编写了`LoginForm`。你可能会说：“为什么不使用`model_form`呢？”嗯，在这里使用`model_form`，您将不得不使用您的应用程序初始化数据库（您目前还没有）并设置上下文。太麻烦了。
- en: We also define two custom validators, one to check if the `username` is valid
    and another to check if the `password` and `username` match.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了两个自定义验证器，一个用于检查`username`是否有效，另一个用于检查`password`和`username`是否匹配。
- en: Tip
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Notice we give very broad error messages for this particular form. We do this
    in order to avoid giving too much info to a possible attacker.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们为这个特定表单提供了非常广泛的错误消息。我们这样做是为了避免向可能的攻击者提供太多信息。
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Here we define our configuration objects, our `app` setup, and application
    factory. I would say the tricky part is the setup, as it registers views using
    an `app` method and not a decorator (yes, the same result as using `@app.route`)
    and we connect our `identity_loaded` signal to our app, so that the user identity
    is loaded and available in each request. We could also register it as a decorator,
    like this:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了我们的配置对象，我们的`app`设置和应用程序工厂。我会说，设置是棘手的部分，因为它使用`app`方法注册视图，而不是装饰器（是的，与使用`@app.route`相同的结果），并且我们将我们的`identity_loaded`信号连接到我们的应用程序，以便用户身份在每个请求中都被加载和可用。我们也可以将其注册为装饰器，就像这样：
- en: '[PRE11]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `load_user` function is required by Flask-Login to load the user using the
    `userid` stored in the session storage. It should return `None`, if the `userid`
    was not found. Do not throw an exception here.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`load_user` 函数是Flask-Login要求的，用于使用会话存储中存储的`userid`加载用户。如果没有找到`userid`，它应该返回`None`。不要在这里抛出异常。'
- en: '`on_identity_loaded` is registered with the `identity_loaded` signal and is
    used to load identity needs stored in your models. This is required because Flask-Principal
    is a generic solution and has no idea of how you have your permissions stored.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`on_identity_loaded` 被注册到 `identity_loaded` 信号，并用于加载存储在模型中的身份需求。这是必需的，因为Flask-Principal是一个通用解决方案，不知道您如何存储权限。'
- en: '[PRE12]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`login_view` and `logout_view` are just what is expected of them: a view to
    authenticate and another to unauthenticate the user. In both cases, you just have
    to make sure to call the appropriate Flask-Login functions (`login_user` and `logout_user`)
    and send an adequate Flask-Principal signal (and clean the session in the logout).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`login_view` 和 `logout_view` 就像它们的名字一样：一个用于认证，另一个用于取消认证用户。在这两种情况下，您只需确保调用适当的Flask-Login函数（`login_user`
    和 `logout_user`），并发送适当的Flask-Principal信号（并在注销时清除会话）。'
- en: '[PRE13]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we have our actual views: `admin_view` and `admin_only_view`. Both
    of them do the exact same thing, they check whether the user is logged with Flask-Login
    and then check if they have adequate permission to access the view. The difference
    here is that, in the first scenario, `admin_view` uses permission as a decorator
    to verify the user''s credentials and as a context in the second scenario.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有我们的实际视图：`admin_view` 和 `admin_only_view`。它们两者都做同样的事情，它们检查用户是否使用Flask-Login登录，然后检查他们是否有足够的权限来访问视图。这里的区别是，在第一种情况下，`admin_view`使用权限作为装饰器来验证用户的凭据，并在第二种情况下作为上下文。
- en: '[PRE14]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`populate` is used to add a proper user and role to our database in case you
    want to test it.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`populate` 用于在我们的数据库中添加适当的用户和角色，以便您进行测试。'
- en: Tip
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'A word of caution about our earlier example: we used plain text for the user
    database. In actual live code, you don''t want to do that because it is common
    practice for users to use the same password for multiple sites. If the password
    is in plain text, anyone with access to the database will be able know it and
    test it against sensitive sites. The solution provided in [http://flask.pocoo.org/snippets/54/](http://flask.pocoo.org/snippets/54/)
    might help you avoid this scenario.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们之前的例子需要注意的一点：我们在用户数据库中使用了纯文本。在实际的代码中，你不想这样做，因为用户通常会在多个网站使用相同的密码。如果密码是纯文本，任何访问数据库的人都能知道它并测试它是否与敏感网站匹配。[http://flask.pocoo.org/snippets/54/](http://flask.pocoo.org/snippets/54/)中提供的解决方案可能有助于避免这种情况。
- en: 'Now here is an example `base.html` template you could use with the preceding
    code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这是一个你可以与前面的代码一起使用的`base.html`模板的示例：
- en: '[PRE15]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice we use `current_user.is_authenticated()` to check if the user is authenticated
    in the template as `current_user` is available in all templates. Now, try writing
    `login.html` and `admin.html` on your own, extending `base.html`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们在模板中使用`current_user.is_authenticated()`来检查用户是否经过身份验证，因为`current_user`在所有模板中都可用。现在，尝试自己编写`login.html`和`admin.html`，并扩展`base.html`。
- en: Admin like a boss
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理员就像老板一样
- en: One of the reasons why Django got so famous is because it has a nice and flexible
    administrative interface and we want one too!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Django之所以如此出名的原因之一是因为它有一个漂亮而灵活的管理界面，我们也想要一个！
- en: Just like Flask-Principal and Flask-Login, Flask-Admin, the extension we'll
    use to build our administrative interface, does not require a particular database
    to work with. You may use MongoDB as a relational database (with SQLAlchemy or
    PeeWee), or another database you happen to like.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Flask-Principal和Flask-Login一样，我们将用来构建我们的管理界面的扩展Flask-Admin不需要特定的数据库来使用。你可以使用MongoDB作为关系数据库（与SQLAlchemy或PeeWee一起），或者你喜欢的其他数据库。
- en: Contrary to Django, where the admin interface is focused in the apps/models,
    Flask-Admin is focused in page/models. You cannot (without some heavy coding)
    load a whole blueprint (the Flask equivalent of a Django app) into the admin interface,
    but you can create a page for your blueprint and register the blueprint models
    with it. One advantage of this approach is that you may pick where all your models
    will be listed with ease.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 与Django相反，Django的管理界面专注于应用程序/模型，而Flask-Admin专注于页面/模型。你不能（没有一些重编码）将整个蓝图（Flask的Django应用程序等效）加载到管理界面中，但你可以为你的蓝图创建一个页面，并将蓝图模型注册到其中。这种方法的一个优点是你可以轻松选择所有模型将被列出的位置。
- en: 'In our previous example, we created two models to hold our user and role information,
    so, let''s create a simple admin interface for these two models. We make sure
    our dependency is installed:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们创建了两个模型来保存我们的用户和角色信息，所以，让我们为这两个模型创建一个简单的管理员界面。我们确保我们的依赖已安装：
- en: '[PRE16]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'And then:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后：
- en: '[PRE17]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this example, we create and initialize the `admin` extension and then register
    our models with it using `ModelView`, a special class that creates a **CRUD**
    for our model. Run this code and try to access `http://127.0.0.1:5000/admin/`;
    you'll see a nice administrative interface with a Home link at the top followed
    by a Profile drop-down with two links, **User** and **Role**, that point to our
    model CRUDs. That's a very basic example that does not amount to much, as you
    cannot have an administrative interface like that, open to all users.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建并初始化了`admin`扩展，然后使用`ModelView`向其注册我们的模型，这是一个为我们的模型创建**CRUD**的特殊类。运行此代码，尝试访问`http://127.0.0.1:5000/admin/`；您将看到一个漂亮的管理界面，顶部有一个主页链接，下面是一个包含两个链接的个人资料下拉菜单，指向我们的模型CRUDs的**用户**和**角色**。这只是一个非常基本的例子，不算太多，因为你不能拥有一个像那样对所有用户开放的管理界面。
- en: 'One way to add authentication and permission verification to our admin views
    is by extending `ModelView` and `IndexView`. We''ll also use a cool design pattern
    called `mixin`:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向管理员视图添加身份验证和权限验证的一种方法是通过扩展`ModelView`和`IndexView`。我们还将使用一个称为`mixin`的很酷的设计模式：
- en: '[PRE18]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: What are we doing here? We overwrite the `is_accessible` method, so that users
    without permission will receive a forbidden-access message, and overwrite the
    `index_view` for `AdminIndexView` and `ModelView`, adding the `login_required`
    decorator that will redirect unauthenticated users to the login page. `admin_permission`
    verifies that the given identity has the required set of permissions—`RoleNeed('admin')`,
    in our case.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里做什么？我们重写`is_accessible`方法，这样没有权限的用户将收到一个禁止访问的消息，并重写`AdminIndexView`和`ModelView`的`index_view`，添加`login_required`装饰器，将未经身份验证的用户重定向到登录页面。`admin_permission`验证给定的身份是否具有所需的权限集——在我们的例子中是`RoleNeed('admin')`。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you're wondering what a mixin is, try this link [http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful](http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道mixin是什么，请尝试这个链接[http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful](http://stackoverflow.com/questions/533631/what-is-a-mixin-and-why-are-they-useful)。
- en: As our model already has **Create, Read, Update, Delete** (**CRUD**) and permission
    control access, how could we modify our CRUD to show just certain fields, or prevent
    the addition of other fields?
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们的模型已经具有**创建、读取、更新、删除**（**CRUD**）和权限控制访问，我们如何修改我们的CRUD以仅显示特定字段，或阻止添加其他字段？
- en: 'Just like Django Admin, Flask-Admin allows you to change your ModelView behavior
    through setting class attributes. A few of my personal favorites are these:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像Django Admin一样，Flask-Admin允许你通过设置类属性来更改你的ModelView行为。我个人最喜欢的几个是这些：
- en: '`can_create`: This allows the user to create the model using CRUD.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`can_create`: 这允许用户使用CRUD创建模型。'
- en: '`can_edit`: This allows the user to update the model using CRUD.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`can_edit`: 这允许用户使用CRUD更新模型。'
- en: '`can_delete`: This allows the user to delete the model using CRUD.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`can_delete`: 这允许用户使用CRUD删除模型。'
- en: '`list_template`, `edit_template`, and `create_template`: These are default
    CRUD templates.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_template`、`edit_template`和`create_template`：这些是默认的CRUD模板。'
- en: '`list_columns`: This implies thats columns show in the list view.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_columns`: 这意味着列在列表视图中显示。'
- en: '`column_editable_list`: This indicates columns that can be edited in the list
    view.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column_editable_list`：这表示可以在列表视图中编辑的列。'
- en: '`form`: This is the form used by CRUD to edit and create views.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form`：这是CRUD用来编辑和创建视图的表单。'
- en: '`form_args`: This is used to pass form field arguments. Use it like this:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_args`：这用于传递表单字段参数。像这样使用它：'
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '`form_overrides`: use it to override a form field like this:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_overrides`：像这样使用它来覆盖表单字段：'
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '`form_choices`: allow you to define choices for a form field. Use it like this:'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`form_choices`：允许你为表单字段定义选择。像这样使用它：'
- en: '[PRE21]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'An example would look like this:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子看起来像这样：
- en: '[PRE22]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Custom pages
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义页面
- en: 'Now, were you willing to add a custom **reports page** to your administrative
    interface, you certainly would not use a model view for the task. For these cases,
    add a custom `BaseView` like this:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你想要在管理界面中添加一个自定义的**报告页面**，你肯定不会使用模型视图来完成这个任务。对于这些情况，像这样添加一个自定义的`BaseView`：
- en: '[PRE23]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now you have an admin interface with a nice Reports Page link at the top. Do
    not forget to write a `reports.html` page in order to make the preceding example
    work.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有了一个带有漂亮的报告页面链接的管理界面。不要忘记编写一个`reports.html`页面，以使前面的示例工作。
- en: 'Now, what if you don''t want the link to be shown in the navigation bar, because
    you have it somewhere else? Overwrite the `BaseView.is_visible` method as it controls
    whether the view will appear in the navigation bar. Do it like this:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，如果你不希望链接显示在导航栏中，因为你已经在其他地方有了它，怎么办？覆盖`BaseView.is_visible`方法，因为它控制视图是否会出现在导航栏中。像这样做：
- en: '[PRE24]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we just learned some tricks with regard to user authorization
    and authentication, and even had a go at creating an administrative interface.
    That was quite a lot of knowledge that will help you extensively in your daily
    coding, as security (and making sure people just interact with what they can and
    should interact with) is a quite common need.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们只是学习了一些关于用户授权和认证的技巧，甚至尝试创建了一个管理界面。这是相当多的知识，将在你日常编码中帮助你很多，因为安全性（确保人们只与他们可以和应该互动的内容进行互动）是一个非常普遍的需求。
- en: 'Rejoice, my friend, as now you know how to develop robust Flask applications,
    using MVC, TDD, relational, and NoSQL databases integrated with permissions and
    authentication control: forms; how to implement cross site forgery protection;
    and even how to use an administrative tool out-of-the-box.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我的朋友，你知道如何开发健壮的Flask应用程序，使用MVC、TDD、与权限和认证控制集成的关系型和NoSQL数据库；表单；如何实现跨站点伪造保护；甚至如何使用开箱即用的管理工具。
- en: The focus of our studies was on knowing all the most useful tools (in my opinion,
    of course) in the Flask development world and how to use them to some extent.
    We did not explore any of them in greater depth, because of scope restrictions,
    but the basics were certainly shown.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的研究重点是了解Flask开发世界中所有最有用的工具（当然是我认为的），以及如何在一定程度上使用它们。由于范围限制，我们没有深入探讨任何一个，但基础知识肯定是展示过的。
- en: Now, it is left for you to improve your understanding of each of the presented
    extensions and libraries and to for new ones. The next and final chapter tries
    to enlighten you in this journey, suggesting reading material, articles, and tutorials
    (among other things).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以进一步提高对每个介绍的扩展和库的理解，并寻找新的扩展。下一章也试图在这个旅程中启发你，建议阅读材料、文章和教程（等等）。
- en: I hope you've enjoyed the book so far and take great pleasure in the final notes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你到目前为止已经喜欢这本书，并且对最后的笔记感到非常愉快。
