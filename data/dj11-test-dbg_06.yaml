- en: Chapter 6. Django Debugging Overview
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章 Django调试概述
- en: The best test suite in the world won't save you from having to debug problems.
    Tests simply report whether code is working correctly. When there is a problem
    in the code, found either via a failing test or some other means, debugging is
    necessary to figure out what exactly has gone wrong. A good test suite, run regularly,
    can certainly help in debugging. The specifics of the error message from the failure,
    the aggregate information provided by what tests pass versus what tests fail,
    in addition to the knowledge of what code change introduced the problem, can all
    provide important clues for debugging. Sometimes those clues are enough to figure
    out what has gone wrong and how to fix it, but often it is necessary to perform
    additional debugging.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 世界上最好的测试套件也无法使您免受调试问题的困扰。测试只是报告代码是否正常工作。当代码出现问题时，无论是通过失败的测试还是其他方式发现的，都需要进行调试以弄清楚到底出了什么问题。一个良好的测试套件，定期运行，当然可以帮助调试。从失败的测试中得到的错误消息的具体信息，通过测试通过与测试失败提供的聚合信息，以及引入问题的代码更改的知识，都可以为调试提供重要线索。有时这些线索足以弄清楚出了什么问题以及如何解决，但通常需要进行额外的调试。
- en: 'This chapter introduces Django''s debugging support. It provides an overview
    of topics that will be covered in greater depth in subsequent chapters. Specifically,
    this chapter will:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了Django的调试支持。它概述了将在随后章节中更深入讨论的主题。具体来说，本章将：
- en: List the Django settings that control the collection and presentation of debugging
    information, and briefly describe the effects of enabling debug
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出控制调试信息收集和呈现的Django设置，并简要描述启用调试的影响
- en: Illustrate the results of running with debug enabled in the case of serious
    code failure
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在严重代码失败的情况下运行调试时的结果
- en: Describe the database query history that is collected with debug enabled, and
    show how to access it
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述了启用调试时收集的数据库查询历史记录，并显示如何访问它
- en: Discuss features of the development server that help in debugging
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论开发服务器的功能，以帮助调试
- en: Describe how errors are handled during production, when debug is off, and how
    to ensure that information about such errors is reported appropriately
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述了在生产过程中如何处理错误，当调试关闭时，以及如何确保适当地报告此类错误的信息
- en: Django debug settings
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django调试设置
- en: Django has a number of settings that control the collection and presentation
    of debug information. The primary one is named `DEBUG`; it broadly controls whether
    the server operates in development (if `DEBUG` is `True`) or production mode.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Django有许多设置，用于控制调试信息的收集和呈现。主要设置名为DEBUG；它广泛地控制服务器是在开发模式（如果DEBUG为True）还是生产模式下运行。
- en: In development mode, the end-user is expected to be a site developer. Thus,
    if an error arises during processing of a request, it is useful to include specific
    technical information about the error in the response sent to the web browser.
    This is not useful in production mode, when the user is expected to be simply
    a general site user.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发模式下，最终用户预期是站点开发人员。因此，如果在处理请求时出现错误，则在发送到Web浏览器的响应中包含有关错误的具体技术信息是有用的。但在生产模式下，当用户预期只是一般站点用户时，这是没有用的。
- en: This section describes three Django settings that are useful for debugging during
    development. Additional settings are used during production to control what errors
    should be reported, and where error reports should be sent. These additional settings
    will be discussed in the section on handling problems in production.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了在开发过程中用于调试的三个Django设置。在生产过程中使用其他设置来控制应该报告什么错误，以及错误报告应该发送到哪里。这些额外的设置将在处理生产中的问题部分中讨论。
- en: The DEBUG and TEMPLATE_DEBUG settings
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 调试和TEMPLATE_DEBUG设置
- en: '`DEBUG` is the main debug setting. One of the most obvious effects of setting
    this to `True` is that Django will generate fancy error page responses in the
    case of serious code problems, such as exceptions raised during processing of
    a request. If `TEMPLATE_DEBUG` is also `True`, and the exception raised is related
    to a template error, then the fancy error page will also include information about
    where in the template the error occurred.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: DEBUG是主要的调试设置。将其设置为True的最明显影响之一是，当Django在处理请求时出现严重代码问题，例如引发异常时，将生成花哨的错误页面响应。如果TEMPLATE_DEBUG也为True，并且引发的异常与模板错误有关，则花哨的错误页面还将包括有关错误发生位置的信息。
- en: 'The default value for both of these settings is `False`, but the `settings.py`
    file created by `manage.py startproject` turns both of them on by including these
    lines at the top of the file:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设置的默认值都是False，但由manage.py startproject创建的settings.py文件通过在文件顶部包含以下行来打开它们：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note that setting `TEMPLATE_DEBUG` to `True` when `DEBUG` is `False` isn't useful.
    The additional information collected with `TEMPLATE_DEBUG` turned on will never
    be displayed if the fancy error pages, controlled by the `DEBUG` setting, are
    not displayed. Similarly, setting `TEMPLATE_DEBUG` to `False` when `DEBUG` is
    `True` isn't very useful. In this case, for template errors, the fancy debug page
    will be lacking helpful information. Thus, it makes sense to keep these settings
    tied to each other, as previously shown.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，当DEBUG为False时，将TEMPLATE_DEBUG设置为True是没有用的。如果不显示由DEBUG设置控制的花哨错误页面，则打开TEMPLATE_DEBUG时收集的额外信息将永远不会显示。同样，当DEBUG为True时，将TEMPLATE_DEBUG设置为False也没有什么用。在这种情况下，对于模板错误，花哨的调试页面将缺少有用的信息。因此，保持这些设置彼此相关是有意义的，如之前所示。
- en: 'Details on the fancy error pages and when they are generated will be covered
    in the next section. Besides generating these special pages, turning `DEBUG` on
    has several other effects. Specifically, when `DEBUG` is on:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关于花哨的错误页面以及它们何时生成将在下一节中介绍。除了生成这些特殊页面之外，打开DEBUG还有其他一些影响。具体来说，当DEBUG打开时：
- en: A record is kept of all queries sent to the database. Details of what is recorded
    and how to access it will be covered in a subsequent section.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将记录发送到数据库的所有查询。记录的详细信息以及如何访问它将在随后的部分中介绍。
- en: 'For the MySQL database backend, warnings issued by the database will be turned
    into Python `Exceptions`. These MySQL warnings may indicate a serious problem,
    but a warning (which only results in a message printed to `stderr`) may pass unnoticed.
    Since most development is done with `DEBUG` turned on, raising exceptions for
    MySQL warnings then ensures that the developer is aware of the possible issue.
    We ran into this behavior back in [Chapter 3](ch03.html "Chapter 3. Testing 1,
    2, 3: Basic Unit Testing"), *Testing 1, 2, 3: Basic Unit Testing*, when we saw
    that the `testClosesReset` unit test produced different results depending on the
    `DEBUG` setting and the MySQL server configuration.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于MySQL数据库后端，数据库发出的警告将转换为Python`Exceptions`。这些MySQL警告可能表明存在严重问题，但警告（仅导致消息打印到`stderr`）可能会被忽略。由于大多数开发都是在打开`DEBUG`的情况下进行的，因此对MySQL警告引发异常可以确保开发人员意识到可能存在的问题。我们在[第3章](ch03.html
    "第3章。测试1、2、3：基本单元测试")中遇到了这种行为，*测试1、2、3：基本单元测试*，当我们看到`testClosesReset`单元测试根据`DEBUG`设置和MySQL服务器配置的不同而产生不同的结果时。
- en: The admin application performs extensive validation of the configuration of
    all registered models and raises an `ImproperlyConfigured` exception on the first
    attempt to access any admin page if an error is found in the configuration. This
    extensive validation is fairly expensive and not something you'd generally want
    done during production server start-up, when the admin configuration likely has
    not changed since the last start-up. When running with `DEBUG` on, though, it
    is possible that the admin configuration has changed, and thus it is useful and
    worth the cost to do the explicit validation and provide a specific error message
    about what is wrong if a problem is detected.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理应用程序对所有注册模型的配置进行了广泛的验证，并且在发现配置中存在错误时，在首次尝试访问任何管理页面时引发`ImproperlyConfigured`异常。这种广泛的验证相当昂贵，通常不希望在生产服务器启动期间进行，因为管理配置可能自上次启动以来没有更改。但是，在打开`DEBUG`的情况下，可能会发生管理配置的更改，因此进行显式验证并提供有关检测到问题的具体错误消息是有用且值得成本的。
- en: Finally, there are several places in Django code where an error will occur while
    `DEBUG` is on, and the generated response will contain specific information about
    the cause of the error, whereas when `DEBUG` is off the generated response will
    be a generic error page.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，在Django代码中有几个地方，当`DEBUG`打开时会发生错误，并且生成的响应将包含有关错误原因的特定信息，而当`DEBUG`关闭时，生成的响应将是一个通用错误页面。
- en: The TEMPLATE_STRING_IF_INVALID setting
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: TEMPLATE_STRING_IF_INVALID设置
- en: A third setting that can be useful for debugging during development is `TEMPLATE_STRING_IF_INVALID`.
    The default value for this setting is the empty string. This setting is used to
    control what gets inserted into a template in place of a reference to an invalid
    (for example, non-existent in the template context) variable. The default value
    of an empty string results in nothing visible taking the place of such invalid
    references, which can make them hard to notice. Setting `TEMPLATE_STRING_IF_INVALID`
    to some value can make tracking down such invalid references easier.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中进行调试时可能有用的第三个设置是`TEMPLATE_STRING_IF_INVALID`。此设置的默认值为空字符串。此设置用于控制在模板中插入无效引用（例如，在模板上下文中不存在的引用）的位置。将空字符串的默认值设置为结果中没有任何可见的东西代替这些无效引用，这可能使它们难以注意到。将`TEMPLATE_STRING_IF_INVALID`设置为某个值可以使跟踪此类无效引用更容易。
- en: However, some code that ships with Django (the admin application, in particular),
    relies on the default behavior of invalid references being replaced with an empty
    string. Running code like this with a non-empty `TEMPLATE_STRING_IF_INVALID` setting
    can produce unexpected results, so this setting is only useful when you are specifically
    trying to track down something like a misspelled template variable in code that
    always ensures that variables, even empty ones, are set in the template context.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Django附带的一些代码（特别是管理应用程序）依赖于无效引用的默认行为被替换为空字符串。使用非空的`TEMPLATE_STRING_IF_INVALID`设置运行此类代码可能会产生意外结果，因此此设置仅在您明确尝试跟踪诸如代码中始终确保变量（即使是空变量）在模板上下文中设置的拼写错误模板变量之类的内容时才有用。
- en: Debug error pages
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试错误页面
- en: 'With `DEBUG` on, Django generates fancy debug error pages in two circumstances:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DEBUG`，Django在两种情况下生成漂亮的调试错误页面：
- en: When a `django.http.Http404` exception is raised
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当引发`django.http.Http404`异常时
- en: When any other exception is raised and not handled by the regular view processing
    code
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当引发任何其他异常并且未被常规视图处理代码处理时
- en: In the latter case, the debug page contains a tremendous amount of information
    about the error, the request that caused it, and the environment at the time it
    occurred. Deciphering this page and making best use of the information it presents
    will be covered in the next chapter. The debug pages for `Http404` exceptions
    are considerably simpler and will be covered here.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在后一种情况下，调试页面包含大量关于错误、引发错误的请求以及发生错误时的环境的信息。解密此页面并充分利用其呈现的信息将在下一章中介绍。`Http404`异常的调试页面要简单得多，将在此处介绍。
- en: 'To see examples of the `Http404` debug pages, consider the `survey_detail`
    view from [Chapter 4](ch04.html "Chapter 4. Getting Fancier: Django Unit Test
    Extensions"):'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 查看`Http404`调试页面的示例，请考虑[第4章](ch04.html "第4章。变得更加花哨：Django单元测试扩展")中的`survey_detail`视图：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'There are two cases where this view may raise an `Http404` exception: when
    the requested survey is not found in the database, and when it is found but has
    not yet opened. Thus, we can see the debug 404 page by attempting to access the
    survey detail for a survey that does not exist, say survey number 24\. The result
    will be as follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图可能引发`Http404`异常的两种情况：当在数据库中找不到请求的调查时，以及当找到但尚未打开时。因此，我们可以通过尝试访问不存在的调查的调查详细信息，比如调查编号24，来查看调试404页面。结果将如下所示：
- en: '![Debug error pages](img/7566_06_01.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![调试错误页面](img/7566_06_01.jpg)'
- en: 'Notice there is a message in the middle of the page that describes the cause
    of the page not found response: **No Survey matches the given query**. This message
    was generated automatically by the `get_object_or_404` function. By contrast,
    the bare `raise Http404` in the case where the survey is found but not yet open
    does not look like it will have any descriptive message. To confirm this, add
    a survey that has an opens date in the future, and try to access its detail page.
    The result will be something like the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意页面中间有一条消息，描述了页面未找到响应的原因：**没有符合给定查询的调查**。这条消息是由`get_object_or_404`函数自动生成的。相比之下，在找到调查但尚未开放的情况下，裸露的`raise
    Http404`看起来不会有任何描述性消息。为了确认这一点，添加一个将来有开放日期的调查，并尝试访问其详细页面。结果将类似于以下内容：
- en: '![Debug error pages](img/7566_06_02.jpg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![调试错误页面](img/7566_06_02.jpg)'
- en: 'That is not a very helpful debug page, since it lacks any information about
    what was being searched for and why it could not be displayed. To make this page
    more useful, include a message when raising the `Http404` exception. For example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个非常有用的调试页面，因为它缺乏关于搜索内容和为什么无法显示的任何信息。为了使此页面更有用，在引发`Http404`异常时包含一条消息。例如：
- en: '[PRE2]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then an attempt to access this page will be a little more helpful:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试访问此页面将会更有帮助：
- en: '![Debug error pages](img/7566_06_03.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![调试错误页面](img/7566_06_03.jpg)'
- en: Note that the error message supplied with the `Http404` exception is only displayed
    on the debug 404 page; it would not appear on a standard 404 page. So you can
    make such messages as descriptive as you like and not worry that they will leak
    private or sensitive information to general users.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`Http404`异常附带的错误消息只会显示在调试404页面上；它不会出现在标准的404页面上。因此，您可以尽量使这些消息描述性，而不必担心它们会向普通用户泄露私人或敏感信息。
- en: 'Another thing to note is that a debug 404 page is only generated when an `Http404`
    exception is raised. If you manually construct an `HttpResponse` with a 404 status
    code, it will be returned, not the debug 404 page. Consider this code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的一点是，只有在引发`Http404`异常时才会生成调试404页面。如果您手动构造带有404状态代码的`HttpResponse`，它将被返回，而不是调试404页面。考虑以下代码：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If that code were used in place of the `raise Http404` variant, then the browser
    will simply display the passed message:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用这段代码来替代`raise Http404`变体，那么浏览器将简单地显示传递的消息：
- en: '![Debug error pages](img/7566_06_04.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![调试错误页面](img/7566_06_04.jpg)'
- en: Without the prominent **Page not found** message and distinctive error page
    formatting, this page isn't even obviously an error report. Note also that some
    browsers by default will replace the server-provided content with a supposedly
    "friendly" error page that tends to be even less informative. Thus, it is both
    easier and more useful to use the `Http404` exception instead of manually building
    `HttpResponse` objects with status code 404.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 没有显著的**页面未找到**消息和独特的错误页面格式，这个页面甚至不明显是一个错误报告。还要注意，一些浏览器默认会用所谓的“友好”错误页面替换服务器提供的内容，这些页面往往更加缺乏信息。因此，使用`Http404`异常而不是手动构建带有状态码404的`HttpResponse`对象既更容易又更有用。
- en: 'A final example of the debug 404 page that is very useful is the one that is
    generated when URL resolution fails. For example, if we add an extra space before
    the survey number in the URL, the debug 404 page generated will be as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 调试404页面的最后一个示例非常有用，当URL解析失败时会生成。例如，如果我们在URL中的调查号之前添加了额外的空格，生成的调试404页面将如下所示：
- en: '![Debug error pages](img/7566_06_05.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![调试错误页面](img/7566_06_05.jpg)'
- en: The message on this page includes all of the information necessary to figure
    out why URL resolution failed. It includes the current URL, the name of the base
    `URLConf` used for resolution, and all patterns that were tried, in order, for
    matching.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面上的消息包括了解析URL失败的所有必要信息。它包括当前URL，用于解析的基本`URLConf`的名称，以及按顺序尝试匹配的所有模式。
- en: 'If you do any significant amount of Django application programming, it''s highly
    likely that at some time this page will appear and you will be convinced that
    one of the listed patterns should match the given URL. You would be wrong. Do
    not waste energy trying to figure out how Django could be so broken. Rather, trust
    the error message, and focus your energies on figuring out why the pattern you
    think should match doesn''t in fact match. Look carefully at each element of the
    pattern and compare it to the actual element in the current URL: there will be
    something that doesn''t match.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您进行了大量的Django应用程序编程，很可能会在某个时候看到此页面，并且会相信其中列出的模式之一应该匹配给定的URL。你错了。不要浪费精力试图弄清楚Django怎么会出现这样的问题。相反，相信错误消息，并集中精力弄清楚为什么你认为应该匹配的模式实际上并没有匹配。仔细查看模式的每个元素，并将其与当前URL中的实际元素进行比较：总会有一些不匹配的地方。
- en: In this case, you might think the third listed pattern should match the current
    URL. The first element in the pattern is the capture of the primary key value,
    and the actual URL value does contain a number that could be a primary key. However,
    the capture is done using the pattern **\d+**. An attempt to match this against
    the actual URL characters—a space followed by **2**—fails because **\d** only
    matches numeric digits and the space character is not a numeric digit. There will
    always be something like this to explain why the URL resolution failed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您可能会认为第三个列出的模式应该与当前URL匹配。模式中的第一个元素是主键值的捕获，而实际的URL值确实包含可能是主键的数字。然而，捕获是使用模式**\d+**完成的。尝试将其与实际URL字符匹配——一个空格后跟着**2**——失败了，因为**\d**只匹配数字字符，而空格字符不是数字字符。总会有类似这样的东西来解释为什么URL解析失败。
- en: The next chapter will include many more examples of common errors that result
    in debug pages, and will delve into all of the information available on these
    pages. For now, we will leave the subject of debug pages and learn about accessing
    the history of database queries that is maintained when `DEBUG` is on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将包括更多导致调试页面的常见错误示例，并深入了解这些页面上提供的所有信息。现在，我们将离开调试页面的主题，学习在`DEBUG`打开时维护的数据库查询历史的访问。
- en: Database query history
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据库查询历史
- en: 'When `DEBUG` is `True`, Django maintains a history of all SQL commands sent
    to the database. This history is kept in a list, named `queries`, located in the
    `django.db.connection` module. The easiest way to see what is kept in this list
    is to examine it from a shell session:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当`DEBUG`为`True`时，Django会保留发送到数据库的所有SQL命令的历史记录。这个历史记录保存在名为`queries`的列表中，位于`django.db.connection`模块中。查看此列表中保存的内容最简单的方法是从shell会话中检查它。
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Here we see that `queries` is initially empty at the beginning of the shell
    session. We then retrieve a count of the number of `Survey` objects in the database,
    which comes back as **2**. When we again display the contents of `queries`, we
    see that there is now one query in the `queries` list. Each element in the list
    is a dictionary containing two keys: `time` and `sql`. The value of `time` is
    how long, in seconds, the query took to execute. The value of `sql` is the actual
    SQL query that was sent to the database.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到`queries`在shell会话开始时最初是空的。然后，我们检索数据库中`Survey`对象的数量，结果为**2**。当我们再次显示`queries`的内容时，我们看到`queries`列表中现在有一个查询。列表中的每个元素都是一个包含两个键的字典：`time`和`sql`。`time`的值是查询执行所需的时间（以秒为单位）。`sql`的值是实际发送到数据库的SQL查询。
- en: 'One thing to note about the SQL contained in `connection.queries`: it does
    not include quoting of query parameters. For example, consider the SQL shown for
    a query on `Surveys` with titles that start with `Christmas`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`connection.queries`中包含的SQL的一件事：它不包括查询参数的引用。例如，考虑对以`Christmas`开头的`Surveys`进行查询时显示的SQL：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the displayed SQL, `Christmas%` would need to be quoted in order for the
    SQL to be valid. However, we see here it is not quoted when stored in `connection.queries`.
    The reason is because Django does not actually pass the query in this form to
    the database backend. Rather, Django passes parameterized queries. That is, the
    passed query string contains parameter placeholders, and parameter values are
    passed separately. It is up to the database backend, then, to perform parameter
    substitution and proper quoting.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示的SQL中，`Christmas％`需要引用才能使SQL有效。然而，在存储在`connection.queries`中时，我们看到它没有被引用。原因是Django实际上并没有以这种形式将查询传递给数据库后端。相反，Django传递参数化查询。也就是说，传递的查询字符串包含参数占位符，并且参数值是分开传递的。然后，由数据库后端执行参数替换和适当的引用。
- en: 'For the debug information placed in `connection.queries`, Django does parameter
    substitution, but it does not attempt to do the quoting, as that varies from backend
    to backend. So do not be concerned by the lack of parameter quoting in `connection.queries`:
    it does not imply that parameters are not quoted correctly when they are actually
    sent to the database. It does mean, though, that the SQL from `connection.queries`
    cannot be successfully cut and pasted directly into a database shell program.
    If you want to use the SQL form `connection.queries` in a database shell, you
    will need to supply the missing parameter quoting.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于放置在`connection.queries`中的调试信息，Django进行参数替换，但不尝试进行引用，因为这取决于后端。因此，不要担心`connection.queries`中缺少参数引用：这并不意味着参数在实际发送到数据库时没有正确引用。但是，这意味着`connection.queries`中的SQL不能直接成功地剪切和粘贴到数据库shell程序中。如果要在数据库shell中使用`connection.queries`中的SQL形式，您需要提供缺失的参数引用。
- en: You might have noticed and may be curious about the `LIMIT 21` included in the
    previous SQL. The `QuerySet` requested did not include a limit, so why did the
    SQL include a limit? This is a feature of the `QuerySet repr` method, which is
    what the Python shell calls to display the value returned by the `Survey.objects.filter`
    call.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到并且可能对前面的SQL中包含的`LIMIT 21`感到好奇。所请求的`QuerySet`没有包括限制，那么为什么SQL包括了限制呢？这是`QuerySet
    repr`方法的一个特性，这是Python shell调用来显示`Survey.objects.filter`调用返回的值。
- en: A `QuerySet` may have many elements, and displaying the entire set, if it is
    quite large, is not particularly useful in Python shell sessions, for example.
    Therefore, `QuerySet repr` displays a maximum of 20 items. If there are more,
    `repr` will add an ellipsis to the end to indicate that the display is incomplete.
    Thus, the SQL resulting from a call to `repr` on a `QuerySet` will limit the result
    to 21 items, which is enough to determine if an ellipsis is needed to indicate
    that the printed result is incomplete.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`QuerySet`可能有许多元素，如果非常大，则在Python shell会话中显示整个集合并不特别有用。因此，`QuerySet repr`最多显示20个项目。如果有更多，`repr`将在末尾添加省略号，以指示显示不完整。因此，对`QuerySet`进行`repr`调用的结果的SQL将限制结果为21个项目，这足以确定是否需要省略号来指示打印的结果是不完整的。'
- en: Any time you see `LIMIT 21` included in a database query, that is a signal the
    query was likely the result of a call to `repr`. Since `repr` is not frequently
    called from application code, such queries are likely resulting from other code
    (such as the Python shell, here, or a graphical debugger variable display window)
    that may be automatically displaying the value of a `QuerySet` variable. Keeping
    this in mind can help reduce confusion when trying to figure out why some queries
    are appearing in `connection.queries`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您在数据库查询中看到包含`LIMIT 21`，这表明该查询很可能是对`repr`的调用的结果。由于应用程序代码不经常调用`repr`，因此这样的查询很可能是由其他代码（例如Python
    shell，或图形调试器变量显示窗口）导致的，这些代码可能会自动显示`QuerySet`变量的值。牢记这一点可以帮助减少在尝试弄清楚为什么某些查询出现在`connection.queries`中时的困惑。
- en: 'There is one final item to note about `connection.queries`: despite the name,
    it is not limited to just SQL queries. All SQL statements sent to the database,
    including updates and inserts, are stored in `connection.queries`. For example,
    if we create a new `Survey` from the shell session, we will see the resulting
    SQL INSERT stored in `connection.queries`:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 关于`connection.queries`还有一件事要注意：尽管名字是这样，它不仅限于SQL查询。所有发送到数据库的SQL语句，包括更新和插入，都存储在`connection.queries`中。例如，如果我们从shell会话中创建一个新的`Survey`，我们将看到生成的SQL
    INSERT存储在`connection.queries`中。
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here we have been accessing `connection.queries` from a shell session. Often,
    however, it may be useful to see what it contains after a request has been processed.
    That is, we might want to know what database traffic was generated during the
    creation of a page. Recreating the calling of a view function from within a Python
    shell and then manually examining `connection.queries` is not particularly convenient,
    however. Therefore, Django provides a context processor, `django.core.contextprocessors.debug`,
    that provides convenient access to the data stored in `connection.queries` from
    a template. In [Chapter 8](ch08.html "Chapter 8. When Problems Hide: Getting More
    Information"), *When Problems Hide: Getting More Information*, we will see how
    we can use this context processor to include information from `connection.queries`
    in our generated pages.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们一直在从shell会话中访问`connection.queries`。然而，通常在请求处理后查看它的内容可能是有用的。也就是说，我们可能想知道在创建页面期间生成了什么数据库流量。然而，在Python
    shell中重新创建视图函数的调用，然后手动检查`connection.queries`并不特别方便。因此，Django提供了一个上下文处理器`django.core.contextprocessors.debug`，它提供了方便的访问从模板中存储在`connection.queries`中的数据。在[第8章](ch08.html
    "第8章。问题隐藏时：获取更多信息")*问题隐藏时：获取更多信息*中，我们将看到如何使用这个上下文处理器将`connection.queries`中的信息包含在我们生成的页面中。
- en: Debug support in the development server
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发服务器中的调试支持
- en: 'The development server, which we have been using since [Chapter 3](ch03.html
    "Chapter 3. Testing 1, 2, 3: Basic Unit Testing"), has several characteristics
    which aid in debugging. First, it provides a console that allows for easy reporting,
    during development, of what is going on in Django application code. The development
    server itself reports general information about its operation to the console.
    For example, typical output from the development server looks like this:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用的开发服务器自[第3章](ch03.html "第3章。测试1, 2, 3：基本单元测试")以来，具有几个特点有助于调试。首先，它提供了一个控制台，允许在开发过程中轻松报告Django应用程序代码的情况。开发服务器本身向控制台报告其操作的一般信息。例如，开发服务器的典型输出如下：
- en: '[PRE7]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As you can see, the development server starts out by explicitly validating models.
    If any errors are found they will be prominently reported during server start-up,
    and will prevent the server from entering its request processing loop. This helps
    to ensure that any erroneous model changes made during development are noticed
    quickly.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，开发服务器首先通过显式验证模型来启动。如果发现任何错误，它们将在服务器启动期间得到突出报告，并且将阻止服务器进入请求处理循环。这有助于确保在开发过程中发现任何错误的模型更改。
- en: The server then reports the level of Django that is running, the settings file
    in use, and the host address and port it is listening on. The first of these,
    in particular, is very useful when you have multiple Django versions installed
    and are switching between them. For example, if you have the latest release installed
    in `site-packages` but also have an SVN checkout of current trunk that you use
    by explicitly setting `PYTHONPATH`, you can use the version reported by the development
    server to confirm (or not) that you are in fact using the version you intend to
    be using at the moment.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器然后报告正在运行的Django的级别，使用的设置文件，以及它正在侦听的主机地址和端口。其中的第一个在你安装了多个Django版本并在它们之间切换时非常有用。例如，如果你在`site-packages`中安装了最新版本，但也有一个当前主干的SVN检出，你可以通过开发服务器报告的版本来确认（或不确认）你当前使用的版本是否是你打算使用的版本。
- en: 'The final start-up message notes that you can terminate the server by pressing
    *Ctrl-C*. The server then enters its request processing loop and will proceed
    to report information on each request that it handles. The information printed
    for each request is:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 最后的启动消息指出，你可以通过按*Ctrl-C*来终止服务器。然后服务器进入请求处理循环，并将继续报告它处理的每个请求的信息。对于每个请求打印的信息是：
- en: The date and time the request was processed, in square brackets
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求被处理的日期和时间，用方括号括起来
- en: The request itself, which includes the HTTP method (for example, GET or POST),
    the path, and the HTTP version specified by the client, all enclosed in quotes
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求本身，其中包括HTTP方法（例如GET或POST）、路径和客户端指定的HTTP版本，全部用引号括起来
- en: The HTTP status code returned
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回的HTTP状态代码
- en: The number of bytes in the returned response
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 返回响应中的字节数
- en: In the previous example output, we can see that the server has responded to
    three `GET` requests, all specifying an HTTP version of `1.1`. First for the root
    URL `/`, which resulted in an HTTP `200` (OK) status code with a `480` byte response.
    The request for `/survey/1/` was similarly processed successfully and produced
    a `280` byte response, but `/survey/888/` resulted in a `404` HTTP status with
    a `1704` byte response. The `404` status was returned because no survey with primary
    key `888` existed in the database. Simply being able to see what requests, exactly,
    are being received by the development server, and what is being returned in response,
    often comes in handy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例输出中，我们可以看到服务器已经响应了三个`GET`请求，所有请求都指定了`1.1`的HTTP版本。首先是根URL`/`，导致HTTP`200`（OK）状态代码和`480`字节的响应。对`/survey/1/`的请求也被成功处理，并产生了`280`字节的响应，但`/survey/888/`导致了`404`的HTTP状态和`1704`字节的响应。返回`404`状态是因为数据库中不存在主键为`888`的调查。能够看到开发服务器实际接收到了什么请求，以及返回了什么响应，通常非常有用。
- en: 'There are some requests handled by the development server that are not shown
    on the console. First, requests for admin media files (that is, CSS, JavaScript,
    and images) are not logged. If you look at the HTML source for an admin page,
    you will see it does include links to CSS files in its `<head>` section. For example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 开发服务器处理的一些请求不会显示在控制台上。首先，不会记录对管理员媒体文件（即CSS、JavaScript和图像）的请求。如果查看管理员页面的HTML源代码，你会看到它在`<head>`部分包含了CSS文件的链接。例如：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: A web browser receiving this document will proceed to retrieve `/media/css/base.css`
    and `/media/css/dashboard.css` from the same server that produced the original
    page. The development server will receive and automatically serve these files,
    but it does not log that activity. Specifically, it will serve but not log requests
    for URLs that begin with the `ADMIN_MEDIA_PREFIX` setting. (This setting's default
    value is `/media/`).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接收此文档的Web浏览器将继续从生成原始页面的同一服务器检索`/media/css/base.css`和`/media/css/dashboard.css`。开发服务器将接收并自动提供这些文件，但不会记录这一活动。具体来说，它将提供但不记录以`ADMIN_MEDIA_PREFIX`设置开头的URL的请求。（此设置的默认值为`/media/`）。
- en: The second request that will not get logged by the development server is any
    request for `/favicon.ico`. This is a file automatically requested by many web
    browsers in order to associate an icon with a bookmarked page or to display an
    icon in the address bar. There is no point in cluttering up the output of the
    development server with requests for this file, so it is never logged.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 开发服务器不会记录的第二个请求是对`/favicon.ico`的任何请求。这是许多Web浏览器自动请求的文件，以便将图标与书签页面关联，或在地址栏中显示图标。没有必要用这个文件的请求来混淆开发服务器的输出，因此它永远不会被记录。
- en: Often when debugging a problem, the very basic information logged automatically
    by the development server will not be sufficient to figure out what is going on.
    When this happens, you may add logging to your application code. Assuming you
    route the log output you add to `stdout` or `stderr`, it will appear on the console
    of the development server along with the normal development server output.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在调试问题时，开发服务器自动记录的非常基本的信息可能不足以弄清楚发生了什么。当发生这种情况时，你可以向应用程序代码添加日志。假设你将添加的日志输出路由到`stdout`或`stderr`，它将与开发服务器的正常输出一起显示在控制台上。
- en: Note that some production deployment environments do not allow sending output
    to `stdout`. In such environments, a mistakenly leftover debugging print statement
    in the application code could cause a server failure in production. To avoid this,
    always route debug print statements to `stderr` instead of `stdout`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，一些生产部署环境不允许将输出发送到`stdout`。在这种环境中，应用程序代码中错误地留下的调试打印语句可能会导致生产中的服务器故障。为了避免这种情况，始终将调试打印语句路由到`stderr`而不是`stdout`。
- en: 'Also note that the request logging done by the development server happens at
    the very end of the request processing. The logged information includes the size
    of the response, so the response has been completely generated before this line
    appears. Thus, any logging added in application view functions, for example, will
    appear before the single line logged by the development server. Don''t get confused
    and think that prints from a view function are referring to the work done to service
    the request logged above them. More specifics on adding logging to application
    code will be discussed in [Chapter 8](ch08.html "Chapter 8. When Problems Hide:
    Getting More Information").'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的是，开发服务器进行的请求日志记录发生在请求处理的最后。记录的信息包括响应的大小，因此在此行出现之前，响应已经完全生成。因此，例如在应用程序视图函数中添加的任何日志都会出现在开发服务器记录的单行之前。不要混淆并认为视图函数中的打印是指上面记录的请求服务所做的工作。有关向应用程序代码添加日志的更多详细信息将在[第8章](ch08.html
    "第8章。问题隐藏时：获取更多信息")中讨论。
- en: 'A second feature of the development server that is useful when developing and
    debugging code is that it automatically notices when source code changes on disk
    and re-starts itself, so that it is always running current code. You can tell
    when this happens because when it restarts, it will again print the start-up messages.
    For example, consider this output:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 开发服务器的第二个功能是在开发和调试代码时非常有用的，它会自动注意到磁盘上的源代码更改并重新启动，以便始终运行当前的代码。当它重新启动时，会再次打印启动消息，你可以从中得知发生了什么。例如，考虑以下输出：
- en: '[PRE9]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here some code change was made that resulted in the development server restarting
    itself between the handling of the **GET /survey/888/** and the **GET /admin/**
    request.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里进行了一些代码更改，导致开发服务器在处理**GET /survey/888/**和**GET /admin/**请求之间重新启动。
- en: While this automatic restart behavior is convenient, it can sometimes run into
    trouble. This most frequently happens when code is edited and saved with an error.
    Sometimes, but not always, loading the erroneous file causes the development server
    to fail to notice subsequent changes in the file. Thus, the corrected version
    may not be automatically loaded even when the error is noticed and fixed. If it
    seems like the development server is not reloading when it should, it is a good
    idea to manually stop and restart it.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这种自动重新启动行为很方便，但有时也会遇到问题。这种情况最常发生在编辑并保存带有错误的代码时。有时，但并非总是，加载错误的文件会导致开发服务器无法注意到文件的后续更改。因此，即使错误被注意到并修复，修正版本也可能不会自动加载。如果看起来开发服务器没有在应该的时候重新加载，最好手动停止并重新启动它。
- en: 'This automatic reloading feature of the development server can be turned off
    by passing the `--noreload` option to `runserver`. You likely will not often want
    to specify this when running the development server on its own, but if you are
    running it under a debugger, you may need to specify this option in order for
    debugger breakpoints to be properly recognized. This is a final feature of the
    development server that makes it useful for debugging: it is easy to run under
    a debugger. Details on this will be covered in [Chapter 9](ch09.html "Chapter 9. When
    You Don''t Even Know What to Log: Using Debuggers"), *When You Don''t Even Know
    What to Log: Using Debuggers*.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 开发服务器的这种自动重新加载功能可以通过向`runserver`传递`--noreload`选项来关闭。当单独运行开发服务器时，您可能不经常想要指定这一点，但是如果您在调试器下运行它，您可能需要指定这个选项，以便调试器断点能够被正确识别。这是开发服务器的最后一个使其用于调试的特性：很容易在调试器下运行。关于这一点将在[第9章](ch09.html
    "第9章。当你甚至不知道要记录什么时：使用调试器")中进行详细介绍，*当你甚至不知道要记录什么时：使用调试器*。
- en: Handling problems in production
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理生产中的问题
- en: In an ideal world, all code problems would be found during development, and
    nothing would ever go wrong when the code was in production. However, despite
    best efforts, this ideal is rarely achieved in reality. We must prepare for the
    case where something will go seriously wrong while the code is running in production
    mode, and arrange to do something sensible when it happens.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在理想的世界中，所有的代码问题都会在开发过程中被发现，并且在代码运行在生产模式时永远不会出错。然而，尽管尽最大努力，这种理想在现实中很少实现。我们必须为代码在生产模式下运行时出现严重问题的情况做好准备，并在发生时安排做一些明智的事情。
- en: What's involved in doing something sensible? First some response must still
    be returned to the client that sent the request that resulted in the error. But
    the response should just be a general error indication, bare of the specific internal
    details found in the fancy debug error pages produced when `DEBUG` is active.
    At best, a Django debug error page might confuse a general web user, but at worst
    information gleaned from it might be used by some malicious user to attempt to
    break the site. Thus, the public response produced for a request that causes an
    error should be a generic error page.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 做一些明智的事情需要考虑什么？首先，仍然需要向发送引发错误请求的客户端返回一些响应。但是响应应该只是一个一般的错误指示，不包含在`DEBUG`激活时生成的复杂调试错误页面中找到的具体内部细节。在最好的情况下，Django调试错误页面可能会让一般的网络用户感到困惑，但在最坏的情况下，从中获取的信息可能会被一些恶意用户用来尝试破坏网站。因此，对于引发错误的请求产生的公共响应应该是一个通用的错误页面。
- en: The specific details of such errors, though, should still be made available
    to site administrators so that the problems can be analyzed and fixed. Django
    accomplishes this by e-mailing details of errors encountered when `DEBUG` is `False`
    to a list of e-mail addresses specified in `settings.py`. The information included
    in the e-mail is not as extensive as what would be found on a debug page, but
    it is often enough to get started on recreating and fixing the problem.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误的具体细节仍然应该提供给网站管理员，以便分析和修复问题。Django通过将`DEBUG`设置为`False`时遇到的错误详细信息发送到`settings.py`中指定的电子邮件地址列表来实现这一点。电子邮件中包含的信息并不像调试页面上所找到的那样详尽，但通常足以开始重新创建和修复问题。
- en: This section discusses the steps needed to handle errors encountered during
    production. First, what needs to be done to return generic error pages is described,
    and then the settings necessary to specify where to send more detailed error information
    are discussed.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了处理生产过程中遇到的错误所需的步骤。首先，描述了返回通用错误页面所需的操作，然后讨论了指定发送更详细错误信息的设置。
- en: Creating general error pages
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建通用错误页面
- en: 'As with the fancy error pages, there are two types of general error pages:
    one to report that a page does not exist on the site, and one to report that some
    internal server error occurred during processing of the request. Django provides
    default handlers for these error cases that automatically load and render templates
    named `404.html` and `500.html` respectively. A project that relies on the default
    handling of these errors must provide templates with these names to be loaded
    and rendered. No defaults for these files are created by `manage.py startproject`.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与复杂的错误页面一样，通用错误页面有两种类型：一种是报告网站上不存在页面的情况，另一种是报告在处理请求时发生了一些内部服务器错误。Django为这些错误情况提供了默认处理程序，自动加载和呈现名为`404.html`和`500.html`的模板。依赖于这些错误的默认处理的项目必须提供这些名称的模板以供加载和呈现。`manage.py
    startproject`不会创建这些文件的默认值。
- en: When the `404.html` template it rendered, it is passed a `RequestContext` in
    which a variable named `request_path` has been set to the value of the URL path
    that caused the `Http404` exception to be raised. The `404.html` template, then,
    can use the `request_path` value and the other variables set by context processors
    to tailor the specific response generated.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当呈现`404.html`模板时，它会传递一个`RequestContext`，其中一个名为`request_path`的变量被设置为引发`Http404`异常的URL路径的值。然后，`404.html`模板可以使用`request_path`值和上下文处理器设置的其他变量来定制生成的特定响应。
- en: The `500.html` template, on the other hand, is rendered with an empty context.
    When a internal server error occurs, something has gone seriously wrong with the
    server code. Attempting to process a `RequestContext` through context processors
    might well cause yet another exception to be raised. To attempt to ensure that
    the response will be generated without any further errors, then, the `500.html`
    template is rendered with an empty context. This means that the `500.html` template
    cannot rely on any context variables that are ordinarily set by context processors.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`500.html`模板是使用空上下文呈现的。当发生内部服务器错误时，服务器代码出现了严重问题。尝试通过上下文处理器处理`RequestContext`可能会导致另一个异常被引发。为了确保响应能够在没有进一步错误的情况下生成，`500.html`模板是使用空上下文呈现的。这意味着`500.html`模板不能依赖于通常由上下文处理器设置的任何上下文变量。
- en: It is possible to override the default error handling by providing custom error
    handlers for either one or both of these error situations. The Django documentation
    provides full details on how to do this; it is not covered here as the default
    handlers are fine for the vast majority of situations.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过为这两种错误情况中的任何一种或两种提供自定义错误处理程序来覆盖默认的错误处理。Django文档提供了如何执行此操作的详细信息；这里没有涵盖，因为默认处理程序对绝大多数情况都很好。
- en: Reporting production error information
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 报告生产错误信息
- en: 'Though it is good to avoid presenting detailed technical error information
    to general users, it is not good to lose such information entirely. Django supports
    notifying site administrators when errors are encountered in production. Settings
    related to these notifications are discussed in this section. [Chapter 11](ch11.html
    "Chapter 11. When it''s Time to Go Live: Moving to Production"), *When it''s Time
    to Go Live: Moving to Production*, provides more guidance on the task of moving
    to production and solving some common problems that are encountered along the
    way.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管最好避免向一般用户呈现详细的技术错误信息，但完全丢失这些信息也不好。Django支持在生产中遇到错误时通知站点管理员。与这些通知相关的设置在本节中讨论。[第11章](ch11.html
    "第11章。当是时候上线：转向生产")，“当是时候上线：转向生产”，提供了有关转向生产并解决沿途遇到的一些常见问题的更多指导。
- en: Internal server error notifications
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 内部服务器错误通知
- en: 'When a server error occurs, Django sends an e-mail containing details of the
    request that generated the error and the traceback from the error to all of the
    e-mail addresses listed in the `ADMINS` setting. `ADMINS` is a list of tuples
    containing names and e-mail addresses. The value set by `manage.py startproject`
    is:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当服务器发生错误时，Django会向`ADMINS`设置中列出的所有电子邮件地址发送一封包含生成错误的请求的详细信息和错误的回溯的电子邮件。`ADMINS`是包含名称和电子邮件地址的元组列表。由`manage.py
    startproject`设置的值是：
- en: '[PRE10]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The commented line shows the format you should use for adding values to this
    setting.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 注释行显示了您应该使用的格式来向此设置添加值。
- en: 'There is no setting to control whether server error notifications should be
    sent: Django will always attempt to send these notifications. However, if you
    really do not want e-mail notifications generated for internal server errors,
    you can leave the `ADMINS` setting empty. This is not a recommended practice,
    though, as you will not have any idea, unless your users complain to you, that
    your site is experiencing difficulty.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 没有设置来控制是否应发送服务器错误通知：Django将始终尝试发送这些通知。但是，如果您真的不希望为内部服务器错误生成电子邮件通知，可以将`ADMINS`设置为空。尽管这不是推荐的做法，因为除非您的用户向您抱怨，否则您将不知道您的网站是否遇到困难。
- en: 'Django uses Python''s SMTP support to send e-mail. In order for this to work,
    Django must be configured properly to communicate with an SMTP server. There are
    several settings that control sending mail which you may need to customize for
    your installation:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用Python的SMTP支持来发送电子邮件。为了使其工作，Django必须正确配置以与SMTP服务器通信。有几个设置可以控制发送邮件，您可能需要根据您的安装进行自定义：
- en: '`EMAIL_HOST` is the name of the host running the SMTP server. The default value
    for this setting is `localhost`, so if there is no SMTP server running on the
    same machine as the Django server, this will need to be set to a host running
    an SMTP server that can be used to send mail.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_HOST`是运行SMTP服务器的主机的名称。此设置的默认值为`localhost`，因此如果在与Django服务器相同的机器上没有运行SMTP服务器，则需要将其设置为运行SMTP服务器的主机，以便用于发送邮件。'
- en: '`EMAIL_HOST_USER` and `EMAIL_HOST_PASSWORD` together may be used to authenticate
    to the SMTP server. Both are set to an empty string by default. If either is set
    to the empty string, then Django does not attempt to authenticate to the SMTP
    server. If you are using a server that requires authentication, you will need
    to set these to valid values for the SMTP server in use.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_HOST_USER`和`EMAIL_HOST_PASSWORD`可以一起用于对SMTP服务器进行身份验证。默认情况下，两者都设置为空字符串。如果其中一个设置为空字符串，那么Django将不会尝试对SMTP服务器进行身份验证。如果您使用需要身份验证的服务器，则需要将其设置为正在使用的SMTP服务器的有效值。'
- en: '`EMAIL_USE_TLS` specifies whether to use a secure (Transport Layer Security)
    connection to the SMTP server. The default value is `False`. If you are using
    an SMTP server that requires a secure connection, you will need to set this to
    `True`.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_USE_TLS`指定是否使用安全（传输层安全）连接到SMTP服务器。默认值为`False`。如果您使用需要安全连接的SMTP服务器，则需要将其设置为`True`。'
- en: '`EMAIL_PORT` specifies the port to connect to. The default value is the default
    SMTP port, 25\. If your SMTP server is listening on a different port (typical
    when `EMAIL_USE_TLS` is `True`), you must specify it here.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_PORT`指定要连接的端口。默认值是默认的SMTP端口，25。如果您的SMTP服务器在不同的端口上监听（当`EMAIL_USE_TLS`为`True`时很典型），则必须在此处指定。'
- en: '`SERVER_EMAIL` is the e-mail address that will be used as the `From` address
    on the sent mail. The default value is `root@localhost`. Some e-mail providers
    refuse to accept mail that uses this default `From` address, so it is a good idea
    to set this to a value that is a valid `From` address for the e-mail server you
    are using.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERVER_EMAIL`是将用作发送邮件的`From`地址的电子邮件地址。默认值为`root@localhost`。一些电子邮件提供商拒绝接受使用此默认`From`地址的邮件，因此最好将其设置为电子邮件服务器的有效`From`地址。'
- en: '`EMAIL_SUBJECT_PREFIX` is a string that will be placed at the start of the
    `Subject` for the e-mail. The default value is `[Django]`. You might want to customize
    this to be something that is site-specific, so administrators that support multiple
    sites will be able to tell from a glance at the e-mail subject which site encountered
    the error.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EMAIL_SUBJECT_PREFIX`是一个字符串，将放在电子邮件的`Subject`开头。默认值为`[Django]`。您可能希望将其自定义为特定于站点的内容，以便支持多个站点的管理员可以从电子邮件主题一瞥中知道哪个站点遇到了错误。'
- en: Once you have set all of the values you believe are correct for the SMTP server
    you are using, it is a good idea to verify that mail is successfully sent. To
    do this, set `ADMINS` to include your own e-mail address. Then set `DEBUG=False`
    and do something that will cause a server error. One easy way to accomplish this
    is to rename the `404.html` template to something else and then attempt to access
    the server specifying a URL that will cause an `Http404` exception to be raised.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您设置了您认为对于正在使用的SMTP服务器正确的所有值，最好验证邮件是否成功发送。为此，将`ADMINS`设置为包括您自己的电子邮件地址。然后将`DEBUG=False`，并执行会导致服务器错误的操作。实现这一点的一种简单方法是将`404.html`模板重命名为其他内容，然后尝试访问服务器指定会引发`Http404`异常的URL。
- en: For example, attempt to access the detail page for a survey that does not exist
    or has an opens date in the future. This attempt should result in an e-mail getting
    sent to you. The subject will start with your server's `EMAIL_SUBJECT_PREFIX`
    and will include the URL path of the request that generated the error. The text
    of the e-mail will contain the traceback from the error followed by the details
    of the request that caused it.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，尝试访问不存在的调查详细页面或未来的开放日期。这个尝试应该会导致发送一封电子邮件给您。主题将以您服务器的`EMAIL_SUBJECT_PREFIX`开头，并包括生成错误的请求的URL路径。电子邮件的文本将包含错误的回溯，然后是导致错误的请求的详细信息。
- en: Page not found notifications
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 未找到页面通知
- en: Page not found errors are considerably less serious than server errors. In fact,
    they may not indicate errors in the code at all, since they can result from users
    incorrectly typing addresses in the browser address bar. If, however, they are
    the result of users attempting to follow links, you might want to know about that.
    This second case is termed a broken link and can usually be distinguished from
    the first by the presence of an HTTP `Referer` [sic] header in the request. Django
    supports sending e-mail notifications when it detects a user attempting to access
    a nonexistent page via a broken link.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 页面未找到错误比服务器错误要轻得多。实际上，它们可能根本不表示代码中的错误，因为它们可能是用户在浏览器地址栏中错误输入地址导致的。然而，如果它们是用户尝试跟随链接的结果，您可能想知道这一点。这种情况被称为损坏的链接，通常可以通过请求中的HTTP
    `Referer` [sic]标头来区分开第一种情况。Django支持在检测到用户通过损坏的链接尝试访问不存在的页面时发送电子邮件通知。
- en: Unlike internal server error notifications, sending broken link notifications
    is optional. The setting that controls whether Django sends e-mail notifications
    for broken links is `SEND_BROKEN_LINK_EMAILS`. The default value for this setting
    is `False`; you will need to set it to `True` if you want Django to generate these
    e-mails. In addition, the common middleware (`django.middleware.common.CommonMiddleware`)
    must be enabled in order for broken link e-mails to be sent. This middleware is
    enabled by default.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 与内部服务器错误通知不同，发送损坏的链接通知是可选的。控制Django是否发送损坏链接的电子邮件通知的设置是`SEND_BROKEN_LINK_EMAILS`。此设置的默认值为`False`；如果要Django生成这些电子邮件，则需要将其设置为`True`。此外，必须启用常见中间件（`django.middleware.common.CommonMiddleware`）才能发送损坏的链接电子邮件。此中间件默认启用。
- en: The e-mails generated by this setting are sent to the e-mail addresses found
    in the `MANAGERS` setting. Thus, you can send these notifications to a different
    set of people than the server error e-mails. If, however, you want to send these
    to the same set of people who receive the server error e-mails, simply set `MANAGERS
    = ADMINS` in `settings.py` after `ADMINS` has been set.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此设置生成的电子邮件将发送到`MANAGERS`设置中找到的电子邮件地址。因此，您可以将这些通知发送给不同的人员组，而不是服务器错误电子邮件。但是，如果您希望将这些发送给接收服务器错误电子邮件的相同人员组，只需在`settings.py`中的`ADMINS`设置后设置`MANAGERS
    = ADMINS`。
- en: Except for the e-mail recipients, all of the same e-mail settings will be used
    for sending broken link e-mails as are used for server error e-mails. So if you
    have verified that server error e-mails are successfully sent, broken link e-mails
    will also be successful.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除了电子邮件收件人之外，所有相同的电子邮件设置都将用于发送损坏的链接电子邮件，就像用于服务器错误电子邮件一样。因此，如果您已经验证了服务器错误电子邮件成功发送，损坏的链接电子邮件也将成功发送。
- en: Broken link e-mail notifications are only useful so long as reports of legitimate
    problems are not drowned in a sea of reports related to the activity of web crawlers,
    bots, and malicious people probing the site bent on mischief. To help ensure that
    the notifications sent are related to valid problems, there are a couple of additional
    settings that can be used to limit the URL paths reported as broken links. These
    are `IGNORABLE_404_STARTS` and `IGNORABLE_404_ENDS`. A broken link e-mail is only
    sent for request pages that do not start with `IGNORABLE_404_STARTS` and do not
    end with `IGNORABLE_404_ENDS`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 损坏的链接电子邮件通知只有在合法问题的报告没有被网页爬虫、机器人和恶意人员的活动淹没时才有用。为了确保发送的通知与有效问题相关，还有一些额外的设置可以用来限制报告为损坏链接的URL路径。这些是`IGNORABLE_404_STARTS`和`IGNORABLE_404_ENDS`。只有不以`IGNORABLE_404_STARTS`开头且不以`IGNORABLE_404_ENDS`结尾的请求页面才会发送损坏的链接电子邮件。
- en: 'The default value for `IGNORABLE_404_STARTS` is:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`IGNORABLE_404_STARTS`的默认值是：'
- en: '[PRE11]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The default value for `IGNORABLE_404_ENDS` is:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`IGNORABLE_404_ENDS`的默认值是：'
- en: '[PRE12]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: You can add to these as necessary to ensure that the e-mails generated for broken
    links are reporting actual problems.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据需要添加这些内容，以确保为损坏的链接生成的电子邮件报告实际问题。
- en: Summary
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: 'We have now completed the overview of debugging support in Django. In this
    chapter, many topics were introduced that will be covered in greater depth in
    subsequent chapters. Specifically, we have:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经完成了Django中的调试支持概述。在本章中，介绍了许多主题，这些主题将在后续章节中得到更深入的介绍。具体来说，我们有：
- en: Learned about the Django settings that control the collection and presentation
    of debug information
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了关于Django设置的知识，这些设置控制了调试信息的收集和展示
- en: Seen how when debug is turned on, special error pages are produced that help
    with the task of debugging problems
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 看到了当调试打开时，会生成特殊的错误页面，这有助于调试问题的任务。
- en: Learned about the history of database queries that is maintained when debugging
    is turned on, and saw how to access it
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解了在调试打开时维护的数据库查询历史，并看到如何访问它
- en: Discussed several features of the development server that are helpful when debugging
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 讨论了开发服务器的几个特性，在调试时非常有帮助
- en: Described how errors are handled in production, and the settings related to
    ensuring that helpful debug information is routed to the correct people
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述了在生产环境中如何处理错误，以及与确保有用的调试信息发送到正确人员相关的设置
- en: The next chapter will proceed to delve into the details of Django debug pages.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将继续深入探讨Django调试页面的细节。
