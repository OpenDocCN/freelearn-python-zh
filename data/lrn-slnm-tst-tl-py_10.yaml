- en: Chapter 10. Integration with Other Tools and Frameworks
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 10 章. 与其他工具和框架的集成
- en: Selenium WebDriver Python API is very powerful and flexible. So far we have
    learned how Selenium WebDriver integrates with the `unittest` library and creates
    a simple testing framework. However, this does not limit us to just using the
    `unittest` library. We can integrate Selenium WebDriver with lots of other tools
    and frameworks. There are a number of ready-to-use frameworks available along
    with Selenium WebDriver.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver Python API 非常强大和灵活。到目前为止，我们已经学习了如何将 Selenium WebDriver 与
    `unittest` 库集成并创建一个简单的测试框架。然而，这并不限制我们只使用 `unittest` 库。我们可以将 Selenium WebDriver
    与许多其他工具和框架集成。Selenium WebDriver 旁边有许多现成的框架可供使用。
- en: We can use Selenium WebDriver for applying **Behavior-Driven Development** (**BDD**)
    in your projects with various frameworks that support BDD.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用支持 BDD 的各种框架，在项目中使用 Selenium WebDriver 应用 **行为驱动开发** (**BDD**)。
- en: We can also integrate Selenium Python API with **Continuous Integration** (**CI**)
    and build tools that allow us to run the test immediately after the application
    is built. This provides an early feedback to developers about quality and stability
    of the application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以将 Selenium Python API 与 **持续集成** (**CI**) 和构建工具集成，允许我们在应用程序构建后立即运行测试。这为开发人员提供了关于应用程序质量和稳定性的早期反馈。
- en: 'In this chapter, you will learn some of the major integration examples including:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习一些主要的集成示例，包括：
- en: Downloading and installing Behave for BDD
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 Behave 用于 BDD
- en: Writing features with Behave
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Behave 编写特性
- en: Automating features with Behave and Selenium WebDriver
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Behave 和 Selenium WebDriver 自动化特性
- en: Downloading and installing Jenkins
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 Jenkins
- en: Setting up Jenkins to run Selenium tests
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Jenkins 以运行 Selenium 测试
- en: Configuring Jenkins to capture results from test runs
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Jenkins 以捕获测试运行的结果
- en: Behavior-Driven Development
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为驱动开发
- en: BDD is an agile software development method introduced by Dan North in his famous
    paper *Introducing* *BDD* ([http://dannorth.net/introducing-bdd/](http://dannorth.net/introducing-bdd/)).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: BDD 是 Dan North 在其著名的论文 *Introducing* *BDD* ([http://dannorth.net/introducing-bdd/](http://dannorth.net/introducing-bdd/))
    中引入的一种敏捷软件开发方法。
- en: BDD is also known as **Acceptance Test Driven Development** (**ATDD**), story
    testing, or specification by example. BDD encourages collaboration between developers,
    QAs, and nontechnical or business users in a software project to define specifications
    and decide acceptance criteria by writing test cases in a natural language that
    nonprogrammers can read.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: BDD 也被称为 **验收测试驱动开发** (**ATDD**)、故事测试或示例规格。BDD 鼓励开发人员、质量保证人员和非技术或业务用户在软件项目中协作，通过编写非程序员可读的自然语言测试用例来定义规格和决定验收标准。
- en: Note
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: There are a number of tools available in Python to implement BDD; the two major
    tools are **Behave** ([https://pythonhosted.org/behave/](https://pythonhosted.org/behave/))
    and **Lettuce** ([http://lettuce.it/](http://lettuce.it/)), which is inspired
    by the very famous BDD tool called **Cucumber** ([http://cukes.info/](http://cukes.info/))
    available in Ruby.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中有几种工具可用于实现 BDD；两个主要工具是 **Behave** ([https://pythonhosted.org/behave/](https://pythonhosted.org/behave/))
    和 **Lettuce** ([http://lettuce.it/](http://lettuce.it/))，后者受到非常著名的 BDD 工具 **Cucumber**
    ([http://cukes.info/](http://cukes.info/)) 的启发，该工具在 Ruby 中可用。
- en: You will learn how to use Behave to implement BDD for the sample application
    in the upcoming sections.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习如何使用 Behave 为示例应用程序实现 BDD。
- en: Installing Behave
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Behave
- en: 'Installing Behave is a simple process. We can download and install Behave with
    the following command line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Behave 是一个简单的过程。我们可以使用以下命令行下载和安装 Behave：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This will download and install Behave along with its dependencies. There are
    additional installation options available for Behave at [https://pythonhosted.org/behave/install.html](https://pythonhosted.org/behave/install.html).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将下载并安装 Behave 及其依赖项。在 [https://pythonhosted.org/behave/install.html](https://pythonhosted.org/behave/install.html)
    提供了 Behave 的附加安装选项。
- en: Writing the first feature in Behave
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Behave 中编写第一个特性
- en: The process starts with discussing and listing the features and user stories
    for these features for the application that is being developed. Various stakeholders
    meet together and create a list of features, user stories, and acceptance criteria
    in a ubiquitous language, which is understood by all the parties, including developers,
    testers, business analysts, and customers. Behave supports creating feature files
    in the Gherkin language in the **Given**, **When**, **Then** (**GWT**) format.
    Refer to [https://github.com/cucumber/cucumber/wiki/Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin)
    for more information on the Gherkin language.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程从讨论和列出正在开发的应用程序的功能和用户故事开始。各种利益相关者聚集在一起，以通用语言创建功能、用户故事和验收标准的列表，这种语言被所有各方理解，包括开发者、测试人员、业务分析师和客户。Behave支持以**Given**、**When**、**Then**（**GWT**）格式创建Gherkin语言的特性文件。有关Gherkin语言的更多信息，请参阅[https://github.com/cucumber/cucumber/wiki/Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin)。
- en: 'Let''s begin with a feature for the search functionality in the sample application.
    The search feature should enable users to search for products from the home page.
    The feature file provides a simple description for the user story and acceptance
    criteria as a scenario outline in the GWT format. These are also known as scenario
    steps, explained as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从样本应用程序中的搜索功能特性开始。搜索特性应该使用户能够从主页搜索产品。特性文件提供了一个简单的用户故事和验收标准的描述，以GWT格式的场景概述。这些也被称为场景步骤，如下所述：
- en: '**Given**: This sets a precondition to execute the scenario; navigate to the
    home page in this scenario'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Given**：这为执行场景设置先决条件；在这个场景中导航到主页'
- en: '**When**: This contains the actions for the scenario; search for a term in
    this example'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**：这包含场景的动作；在这个例子中搜索一个术语'
- en: '**Then**: This contains the outcome of the scenario; check whether the list
    of matching products is displayed in this example'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**：这包含场景的结果；检查是否在这个例子中显示了匹配产品的列表'
- en: 'We can have multiple `When` and `Then` steps in a scenario:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个场景中可以有多个`When`和`Then`步骤：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: To use this feature with Behave, we need to store this in a plain text file
    with a `.feature` extension. Let's create a folder named `bdd`/`feature` and save
    this file as `search.feature` in the folder.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Behave功能，我们需要将此存储在一个带有`.feature`扩展名的纯文本文件中。让我们创建一个名为`bdd/feature`的文件夹，并将此文件保存为`search.feature`。
- en: Implementing a step definition file for the feature
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现特性步骤定义文件
- en: 'Once we write the feature files, we need to create step definitions for the
    steps written in scenario outline. Step definitions are Python code blocks that
    understand the steps written in plain text format and contain the code to either
    call the API or Selenium WebDriver commands to execute the steps. The step definition
    files should be stored in a `steps` subfolder where feature files are stored.
    Let''s create a `search_steps.py` file with the following step definitions:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们编写了特性文件，我们需要为场景概述中编写的步骤创建步骤定义。步骤定义是理解以纯文本格式编写的步骤的Python代码块，并包含调用API或Selenium
    WebDriver命令以执行步骤的代码。步骤定义文件应存储在存储特性文件的`steps`子文件夹中。让我们创建一个`search_steps.py`文件，包含以下步骤定义：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For each GWT, we need to create a matching step definition. For example, for
    the given `I am on home page` step, we created the following step definition.
    Steps are identified using decorators that match the predicate from the feature
    file: `@given`, `@when`, and `@then`. The decorator accepts a string containing
    the rest of the phrase used in the scenario step it belongs to, in this case,
    `I am on home page`.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个GWT，我们需要创建一个匹配的步骤定义。例如，对于给定的`我正在主页上`步骤，我们创建了以下步骤定义。步骤是通过与特性文件中的谓词匹配的装饰器来识别的：`@given`、`@when`和`@then`。装饰器接受一个字符串，包含场景步骤中使用的其余短语，在这种情况下，`我正在主页上`。
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We can also pass parameters that are embedded in steps to the step definition.
    For example, for `@when` we are passing the search phrase as `when I search for
    "phone"`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以将步骤中嵌入的参数传递给步骤定义。例如，对于`@when`，我们传递搜索短语作为`当搜索"电话"`。
- en: 'We can read the value using `{text}` as shown in the following code sample:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`{text}`如以下代码示例中所示来读取值：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You can see the context variable passed to the step definitions. The context
    variable is used by Behave to store information to share around. It runs at three
    levels, automatically managed by Behave. We can also use the context variable
    to store and share information between the steps.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到传递给步骤定义的上下文变量。上下文变量由Behave用来存储要共享的信息。它在三个级别上运行，由Behave自动管理。我们还可以使用上下文变量在步骤之间存储和共享信息。
- en: Creating environment configurations
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建环境配置
- en: 'Before we can run the feature, we need to create an environment file that is
    used to set up common Behave settings and any code that will be shared between
    steps or step definition files. This is a great place to initialize the WebDriver
    to start Firefox, which will be used to run the steps using the Selenium WebDriver.
    Create an `environment.py` file by the side of the feature files and add the `before_all()`
    and `after_all()` methods, which will be executed before and after the features
    are executed, as shown in the following code:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们能够运行功能之前，我们需要创建一个环境文件，该文件用于设置常见的Behave设置以及将在步骤或步骤定义文件之间共享的任何代码。这是一个初始化WebDriver以启动Firefox的好地方，Firefox将被用来运行使用Selenium
    WebDriver的步骤。在功能文件旁边创建一个`environment.py`文件，并添加`before_all()`和`after_all()`方法，这些方法将在功能执行前后执行，如下面的代码所示：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Running features
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行功能
- en: 'Now, it''s time to run the features with Behave. This is really simple. Navigate
    to the `bdd` folder that we created in the earlier steps and execute the `behave`
    command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候使用Behave运行功能了。这真的很简单。导航到我们在早期步骤中创建的`bdd`文件夹，并执行`behave`命令：
- en: '[PRE6]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Behave will execute all the features that are written in the `bdd` folder.
    It will use the step definition and environment settings that we made to run the
    scenarios. At the end of execution, you will see a summary of the execution, as
    shown in the following screenshot:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Behave将执行`bdd`文件夹中编写的所有功能。它将使用我们为运行场景所做的步骤定义和环境设置。执行结束时，你将看到执行摘要，如下面的截图所示：
- en: '![Running features](img/3506OS_10_01.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![运行功能](img/3506OS_10_01.jpg)'
- en: Behave generates a summary at three levels, namely features, scenarios, and
    steps for pass and failure.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Behave在三个级别上生成摘要，即功能、场景和步骤的通过和失败。
- en: Using a scenario outline
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用场景概述
- en: Sometimes we might want to run scenario(s) with a number of variables giving
    a set of known states, actions to take, and expected outcomes, all using the same
    steps, something similar to data-driven tests. We can use a scenario outline for
    this.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们可能想要运行具有多个变量的一组场景，这些变量给出了一组已知状态、要采取的操作和预期结果，所有这些都使用相同的步骤，类似于数据驱动测试。我们可以为此使用场景概述。
- en: Let's rewrite the `search.feature` file with a scenario outline and examples
    as given in the following steps. The scenario outline works like a template, for
    example, given in the `Example` section.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤重写`search.feature`文件，包括场景概述和示例。场景概述就像一个模板，例如在`Example`部分中给出的。
- en: 'In this example, we create two examples to check the search functionality on
    the categories or for a specific product. The `Example` sections contain the search
    term and the expected results in a tabular format:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个例子中，我们创建了两个示例来检查分类或特定产品的搜索功能。`Example`部分以表格格式包含搜索词和预期结果：
- en: '[PRE7]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also, modify the `search_steps.py` file to match the text used in steps:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，修改`search_steps.py`文件以匹配步骤中使用的文本：
- en: '[PRE8]'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'When we execute this feature, Behave will automatically repeat the scenario
    outline for the number of rows it finds in the `Example` section that are written
    in the `search.feature` file. It passes the data from the example data to the
    scenario steps and executes the definition. You can see the outcome after Behave
    is run on the modified feature. Behave prints all the combinations it ran on the
    feature as shown in following screenshot:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们执行此功能时，Behave会自动重复执行`Example`部分中用`search.feature`文件编写的场景概述。它会将示例数据中的数据传递给场景步骤并执行定义。在Behave运行修改后的功能后，你可以看到结果。Behave会打印出它在功能上运行的所有组合，如下面的截图所示：
- en: '![Using a scenario outline](img/3506OS_10_02.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![使用场景概述](img/3506OS_10_02.jpg)'
- en: Tip
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Behave also supports report generation in JUnit format using the `–junit` switch.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Behave还支持使用`–junit`开关以JUnit格式生成报告。
- en: CI with Jenkins
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与Jenkins的CI
- en: Jenkins is a popular CI server written in Java. It is derived from the Hudson
    project. Both Jenkins and Hudson provide similar features.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个流行的Java编写的CI服务器。它源自Hudson项目。Jenkins和Hudson都提供类似的功能。
- en: Jenkins supports various version control tools such as CVS, SVN, Git, Mercurial,
    Perforce, and ClearCase, and can execute projects built with Apache Ant or Maven
    for Java. However, it can also build projects for other platforms using plugins,
    arbitrary shell scripts, and Windows' `batch` commands.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 支持各种版本控制工具，如 CVS、SVN、Git、Mercurial、Perforce 和 ClearCase，并且可以执行使用 Apache
    Ant 或 Maven 构建的 Java 项目。但是，它也可以使用插件、任意 shell 脚本和 Windows 的 `批处理` 命令为其他平台构建项目。
- en: Apart from building the software, Jenkins can be deployed to set up an automated
    testing environment where Selenium WebDriver tests can be run unattended based
    on a defined schedule, or every time changes are submitted to the version control
    system.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 除了构建软件外，Jenkins 还可以部署以设置一个自动化的测试环境，其中 Selenium WebDriver 测试可以根据定义的计划或每次提交更改到版本控制系统时无人在场运行。
- en: In the upcoming sections, you will learn how to set up Jenkins to run tests
    using a free-style project template.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，您将学习如何使用免费式项目模板设置 Jenkins 来运行测试。
- en: Preparing for Jenkins
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备 Jenkins
- en: Before we start using Jenkins to run our tests, we need to make few changes
    so that we can take advantage of Jenkins's capabilities. We will use Jenkins to
    run our tests on a pre-defined schedule and collect results from tests so that
    Jenkins can show them on a dashboard. We will reuse smoke tests that we created
    in [Chapter 2](ch02.html "Chapter 2. Writing Tests Using unittest"), *Writing
    Tests Using unittest*.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 Jenkins 运行我们的测试之前，我们需要进行一些更改，以便我们可以利用 Jenkins 的功能。我们将使用 Jenkins 在预定义的计划上运行我们的测试，并收集测试结果，以便
    Jenkins 可以在仪表板上显示它们。我们将重用我们在 [第 2 章](ch02.html "第 2 章。使用 unittest 编写测试") *使用 unittest
    编写测试* 中创建的烟雾测试。
- en: We used the `TestSuite` runner of `unittest` to execute the bunch of tests together.
    We will now output the results of these tests in the JUnit report format. For
    this, we need a Python library called `xmlrunner` from [https://pypi.python.org/pypi/xmlrunner/1.7.4](https://pypi.python.org/pypi/xmlrunner/1.7.4).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 `unittest` 的 `TestSuite` 运行器来一起执行一系列测试。现在，我们将以 JUnit 报告格式输出这些测试的结果。为此，我们需要一个名为
    `xmlrunner` 的 Python 库，它可以从 [https://pypi.python.org/pypi/xmlrunner/1.7.4](https://pypi.python.org/pypi/xmlrunner/1.7.4)
    获取。
- en: 'Download and install `xmlrunner` with the following command line:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令行下载并安装 `xmlrunner`：
- en: '[PRE9]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We will use `smoketests.py`, which uses the `TestSuite` runner to run the tests
    from `homepagetests.py` and `searchtest.py`. We will use the `xmlrunner.XML TestRunner`
    to run these tests and generate a test report in JUnit format. This report will
    be generated in XML format and kept in the `test-reports` subfolder. To use `xmlrunner`,
    please make the highlighted changes in `smoketest.py`, as shown in the following
    code example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `smoketests.py`，它使用 `TestSuite` 运行器从 `homepagetests.py` 和 `searchtest.py`
    运行测试。我们将使用 `xmlrunner.XML TestRunner` 来运行这些测试，并生成一个 JUnit 格式的测试报告。该报告将以 XML 格式生成并保存在
    `test-reports` 子目录中。要使用 `xmlrunner`，请在 `smoketest.py` 中进行以下突出显示的更改，如下面的代码示例所示：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Setting up Jenkins
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置 Jenkins
- en: 'Setting up Jenkins is fairly straightforward. You can download and install
    Jenkins using the installers available for various platforms. In following example,
    we will set up Jenkins and create a new build job to run the smoke tests on the
    sample application:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Jenkins 相对直接。您可以使用适用于各种平台的安装程序下载并安装 Jenkins。在以下示例中，我们将设置 Jenkins 并创建一个新的构建作业来在示例应用程序上运行烟雾测试：
- en: Download and install the Jenkins CI server from [http://jenkins-ci.org/](http://jenkins-ci.org/).
    For this recipe, the Jenkins Windows installer is used to set up Jenkins on a
    Windows 7 machine.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [http://jenkins-ci.org/](http://jenkins-ci.org/) 下载并安装 Jenkins CI 服务器。对于此配方，使用
    Jenkins Windows 安装程序在 Windows 7 机器上设置 Jenkins。
- en: Navigate to **Jenkins Dashboard** (`http://localhost:8080` by default) in the
    browser window.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器窗口中导航到 **Jenkins 仪表板**（默认为 `http://localhost:8080`）。
- en: On **Jenkins Dashboard**, click on **New Item** or **create new jobs** link
    to create a new Jenkins job as shown in the following screenshot:![Setting up
    Jenkins](img/3506OS_10_03.jpg)
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Jenkins 仪表板** 上，点击 **新建项目** 或 **创建新作业** 链接来创建一个新的 Jenkins 作业，如图所示：![设置 Jenkins](img/3506OS_10_03.jpg)
- en: Enter `Demo_App_Smoke_Test` in the **Item name** textbox and select the **Build
    a free-style software project** radio button as shown in the following screenshot:![Setting
    up Jenkins](img/3506OS_10_04.jpg)
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **项目名称** 文本框中输入 `Demo_App_Smoke_Test` 并选择 **构建一个免费式软件项目** 单选按钮，如图所示：![设置 Jenkins](img/3506OS_10_04.jpg)
- en: Click on the **OK** button. A new job will be created with the specified name.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **确定** 按钮。将创建一个具有指定名称的新作业。
- en: Note
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can connect to various version control or **Source Control Management** (**SCM**)
    tools such as SVN, GIT, Perforce, and so on to store the source and test code.
    We can then get the latest version of the code to build and test the software
    in the Jenkins workspace as part of building the steps. However, to keep things
    simple, in this example, we will copy the test scripts from a folder to the Jenkins
    workspace using the **Execute Windows batch command** build step as described
    in following set of steps.
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以连接到各种版本控制或**源代码管理**（**SCM**）工具，如SVN、GIT、Perforce等，以存储源代码和测试代码。然后，我们可以获取代码的最新版本，在Jenkins工作区中作为构建步骤的一部分构建和测试软件。然而，为了简化，在这个例子中，我们将使用**执行Windows批处理命令**构建步骤将测试脚本从文件夹复制到Jenkins工作区，具体步骤如下。
- en: In the **Build** section, click on **Add build step** and select the **Execute
    Windows batch command** option from the dropdown.![Setting up Jenkins](img/3506OS_10_05.jpg)
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建**部分，点击**添加构建步骤**，并从下拉菜单中选择**执行Windows批处理命令**选项，如图所示：![设置Jenkins](img/3506OS_10_05.jpg)
- en: 'Enter the following command in the **Command** textbox as shown in the following
    screenshot. Paths will be different in your case. This command will copy the Python
    files containing smoke tests to the Jenkins workspace and run `smoketest.py` as
    shown:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**命令**文本框中输入以下命令，如图所示。路径可能因你的情况而异。此命令将复制包含烟雾测试的Python文件到Jenkins工作区，并运行`smoketest.py`，如下所示：
- en: '[PRE11]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![Setting up Jenkins](img/3506OS_10_06.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置Jenkins](img/3506OS_10_06.jpg)'
- en: We configured `smoketest.py` to generate test results in JUnit format so that
    Jenkins can display the test results on its dashboard. To integrate these reports
    with Jenkins, click on **Add post-build action** and select the **Publish JUnit
    test result report** option from the dropdown as shown in the following screenshot:![Setting
    up Jenkins](img/3506OS_10_07.jpg)
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已将`smoketest.py`配置为以JUnit格式生成测试结果，以便Jenkins可以在其仪表板上显示测试结果。要将这些报告与Jenkins集成，请点击**添加构建后操作**，并从下拉菜单中选择**发布JUnit测试结果报告**选项，如图所示：![设置Jenkins](img/3506OS_10_07.jpg)
- en: In the **Post-build Actions** section, add `test-reports/*.xml` in the **Test
    report XMLs** textbox as shown in the following screenshot. Every time Jenkins
    runs the tests, it will read test results from the `test-report` subfolder.![Setting
    up Jenkins](img/3506OS_10_08.jpg)
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**构建后操作**部分，将`test-reports/*.xml`添加到**测试报告XML**文本框中，如图所示。每次Jenkins运行测试时，它将从`test-report`子文件夹中读取测试结果。![设置Jenkins](img/3506OS_10_08.jpg)
- en: To schedule tests for automatic execution in the **Build Triggers** section,
    select **Build periodically** and enter the data as shown in the following screenshot
    in the **Schedule** textbox. This will trigger the build process every day at
    10 p.m. and Jenkins will run the tests as part of the build process unattended
    so you can see the results next morning when you arrive at the office.![Setting
    up Jenkins](img/3506OS_10_09.jpg)
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在**构建触发器**部分安排测试以自动执行，请选择**定期构建**，并在**计划**文本框中输入如图所示的数据。这将每天晚上10点触发构建过程，Jenkins将在无人值守的情况下作为构建过程的一部分运行测试，以便你第二天早上到达办公室时可以看到结果。![设置Jenkins](img/3506OS_10_09.jpg)
- en: Click on the **Save** button to save the job configuration. Jenkins will display
    the project page for the newly created job.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮以保存作业配置。Jenkins将显示新创建作业的项目页面。
- en: We can check if everything is set to see if tests are executed. Click on the
    **Build Now** link to run the job manually as shown in the following screenshot:![Setting
    up Jenkins](img/3506OS_10_10.jpg)
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以检查一切是否设置正确，以查看测试是否执行。点击**立即构建**链接手动运行作业，如图所示：![设置Jenkins](img/3506OS_10_10.jpg)
- en: You can see the running status for the build in the **Build History** section
    as shown in the following screenshot:![Setting up Jenkins](img/3506OS_10_11.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在**构建历史**部分看到构建的运行状态，如图所示：![设置Jenkins](img/3506OS_10_11.jpg)
- en: Click on the running item in the **Build History** section, which will open
    the following page:![Setting up Jenkins](img/3506OS_10_12.jpg)
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**构建历史**部分的运行项目，这将打开以下页面：![设置Jenkins](img/3506OS_10_12.jpg)
- en: Apart from the status on Jenkins and the progress bar, we can also see what's
    happening behind the scenes by opening the **Console Output** link. This will
    open the **Console Output** page with the command-line output as shown in the
    following screenshot:![Setting up Jenkins](img/3506OS_10_13.jpg)
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了Jenkins上的状态和进度条外，我们还可以通过打开**控制台输出**链接来查看幕后发生的事情。这将打开**控制台输出**页面，显示命令行输出，如图所示：![设置Jenkins](img/3506OS_10_13.jpg)
- en: Once the build process is completed by Jenkins, we can see a build page similar
    to the one shown in the next screenshot.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦 Jenkins 完成构建过程，我们就可以看到类似于下一张截图所示的构建页面。
- en: Jenkins displays test results and various other metrics by reading the result
    files generated by the `unittest` frameworks. Jenkins also archives test results.
    To view the test results, click on the **Test Results** link on the build page.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Jenkins 通过读取由 `unittest` 框架生成的结果文件来显示测试结果和各种其他指标。Jenkins 还存档测试结果。要查看测试结果，请点击构建页面上的**测试结果**链接。
- en: We configured our tests to generate the test results in the JUnit format and
    when we click on **Test** **Results**, Jenkins will display the JUnit test results
    as shown in the following screenshot. It highlights the tests that are failed
    and a summary for the tests.![Setting up Jenkins](img/3506OS_10_14.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们配置了测试，使其以 JUnit 格式生成测试结果，当我们点击**测试结果**时，Jenkins 将显示以下截图所示的 JUnit 测试结果。它突出显示了失败的测试以及测试的摘要。![设置
    Jenkins](img/3506OS_10_14.jpg)
- en: We can drill down by clicking on the package names and see the results for individual
    tests as shown in the following screenshot:![Setting up Jenkins](img/3506OS_10_15.jpg)
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击包名，我们可以深入挖掘并查看以下截图所示的各个测试的结果：![设置 Jenkins](img/3506OS_10_15.jpg)
- en: 'Jenkins also shows a status on the Dashboard for the job with the status of
    the last build in the following format:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins 还在仪表板上显示作业的状态，以下列格式显示最后构建的状态：
- en: '![Setting up Jenkins](img/3506OS_10_16.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![设置 Jenkins](img/3506OS_10_16.jpg)'
- en: Summary
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to integrate Selenium with Behave for BDD and
    Jenkins for CI. You saw how to integrate Selenium WebDriver API with Behave to
    run automated acceptance tests by writing features and step definition files.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何将 Selenium 与 Behave 集成以进行 BDD，以及如何将 Jenkins 集成以进行 CI。您看到了如何通过编写特性和步骤定义文件来将
    Selenium WebDriver API 与 Behave 集成，以运行自动化验收测试。
- en: You set up Jenkins to run Selenium WebDriver tests so that you can run these
    tests while building the software or scheduling tests so they can be run nightly.
    Jenkins provides an easy-to-set-up model to run the build and test jobs for various
    application development platforms and environments.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 您设置了 Jenkins 来运行 Selenium WebDriver 测试，这样您就可以在构建软件时运行这些测试，或者安排测试以便它们可以在夜间运行。Jenkins
    提供了一个易于设置的模型来运行各种应用程序开发平台和环境的构建和测试作业。
- en: This completes your learning journey using Selenium WebDriver with Python. You
    learned some basic lessons on using Selenium WebDriver to automate browser interaction
    to create automated tests for web applications. You can use this knowledge and
    build your own testing framework.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了您使用 Selenium WebDriver 和 Python 的学习之旅。您学习了如何使用 Selenium WebDriver 自动化浏览器交互来为
    Web 应用程序创建自动化测试的一些基本课程。您可以使用这些知识来构建自己的测试框架。
