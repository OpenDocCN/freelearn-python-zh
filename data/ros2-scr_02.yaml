- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Introduction to ROS 2 – What Is ROS 2?
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ROS 2简介——什么是ROS 2？
- en: '**Robot Operating System** (**ROS**) can be confusing, as evidenced by its
    name. It’s difficult to know what it is exactly, what it contains, and what it
    does. Also, why do you even need ROS, and when should you use it?'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**机器人操作系统**（**ROS**）可能会让人困惑，正如其名称所示。很难知道它确切是什么，它包含什么，以及它能做什么。此外，为什么你需要ROS，以及何时应该使用它？'
- en: Before getting started, it is okay to be confused—most people are. Although
    ROS is one of the best tools to learn and develop robotics applications, it also
    comes with a steep learning curve, with the first roadblock being understanding
    what it is.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，感到困惑是正常的——大多数人都会这样。尽管ROS是学习和开发机器人应用的最佳工具之一，但它也伴随着陡峭的学习曲线，第一个障碍就是理解它是什么。
- en: In this quick first chapter, I will explain the terminology we will use throughout
    this book. You will then see why ROS exists, and what problems it can solve for
    you. After that, we will dive a bit deeper into the four pillars of ROS to understand
    what it is. You will also see a few examples of when and when not to use it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的第一章中，我将解释我们将在这本书中使用的术语。然后你会看到ROS为什么存在，以及它能为你解决什么问题。之后，我们将深入探讨ROS的四个支柱，以了解它是什么。你还会看到一些例子，说明何时以及何时不应使用它。
- en: By the end of this chapter, you will have a better understanding of the global
    picture behind ROS and be clear of the most common confusions. You will also understand
    what prerequisites you need before you get started with ROS, as well as how to
    follow this book to get the most out of it. This will help you get started on
    the right foot.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将更好地理解ROS背后的全局图景，并对最常见的困惑有清晰的认识。你还将了解在开始使用ROS之前你需要哪些先决条件，以及如何遵循这本书以充分利用它。这将帮助你迈出正确的第一步。
- en: 'In this chapter, we are going to cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Terminology
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 术语
- en: What is ROS, when should we use it, and why?
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是ROS，何时应该使用它，以及为什么？
- en: ROS 1 versus ROS 2
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROS 1与ROS 2的比较
- en: Prerequisites for starting with ROS 2
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用ROS 2的先决条件
- en: How to follow this book
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何遵循这本书
- en: Terminology
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 术语
- en: You might have seen the terms ROS, ROS 1, ROS 2, and other kinds of variations
    (with or without a space), which can be confusing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经看到过ROS、ROS 1、ROS 2以及其他各种变体（带或不带空格），这些可能会让人困惑。
- en: 'Let’s clear this up now:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们澄清一下：
- en: ROS 1 is (was) the first version of ROS
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROS 1是（曾是）ROS的第一个版本
- en: ROS 2 is the second and newer version of ROS and will be the focus of this book
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROS 2是ROS的第二个和更新的版本，并将成为本书的重点
- en: 'In this book, I will use the following convention:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我将使用以下约定：
- en: '**ROS**: When talking about general ROS concepts, philosophy, and so on'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ROS**：当谈论ROS的一般概念、哲学等时'
- en: '**ROS 1**: When talking specifically about the first version of ROS. However,
    this will be quite rare since the focus here is on ROS 2'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ROS 1**：当具体谈论ROS的第一个版本时。然而，这将会非常罕见，因为这里的重点是ROS 2'
- en: '**ROS 2**: When talking about the second version of ROS'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ROS 2**：当谈论ROS的第二版时'
- en: Note
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: I may sometimes write *ROS* or *ROS 2* interchangeably since we won’t be focusing
    on ROS 1 here.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能会在某些时候交替使用*ROS*或*ROS 2*，因为我们不会在这里关注ROS 1。
- en: It’s not impossible that, in the future (when ROS 1 has completely disappeared),
    the name ROS 2 becomes ROS again. If you’ve heard about Angular, it started as
    AngularJS, after which they released Angular2, and then a few years later, it
    simply became Angular. I guess that something similar will happen with ROS, although
    this is only a theory of mine for now.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来（当ROS 1完全消失时），ROS 2的名字可能再次变为ROS，这并非不可能。如果你听说过Angular，它最初是AngularJS，之后他们发布了Angular2，然后几年后，它简单地变成了Angular。我猜ROS也会发生类似的事情，尽管这目前只是我的一个理论。
- en: What is ROS, when should we use it, and why?
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是ROS，何时我们应该使用它，以及为什么？
- en: Before we start understanding what ROS is, let’s understand why we would need
    it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始理解ROS是什么之前，让我们先了解为什么我们需要它。
- en: Why ROS?
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么需要ROS？
- en: Let’s start with a big problem that occurs often in robotics.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从机器人中经常出现的一个大问题开始。
- en: Imagine that you just got a new project at your job, and you have to develop
    a robotics application, or you are doing a new research thesis. One very important
    thing to take into account is that in real life, any project or thesis will have
    a specific duration, from a few months to a few years.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，你刚刚在工作中接到了一个新的项目，你需要开发一个机器人应用，或者你正在进行一个新的研究论文。一个非常重要的事情是要考虑到，在现实生活中，任何项目或论文都将有一个特定的持续时间，从几个月到几年不等。
- en: Now, what will happen?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，接下来会发生什么？
- en: You start to design the robotics system you need for your project and soon realize
    that it will take a lot of time to develop the robot because all the existing
    solutions you found don’t match what you need. After a few weeks, you finalize
    the specifications, and you start building your robot. A few months in, you’re
    still developing the basic software for wheel control and navigation. You underestimated
    how much time it would take you to just get the robot running. After 1 or 2 years,
    you realize that all you’ve done for now is build a robotics system, and you still
    haven’t started the core functionality of your application or research. Now is
    the time to hurry.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始设计你项目所需的机器人系统，很快就会意识到开发机器人将花费大量时间，因为所有你找到的现有解决方案都不符合你的需求。几周后，你最终确定了规格，并开始构建你的机器人。几个月后，你仍在开发轮控和导航的基本软件。你低估了仅让机器人运行所需的时间。一年或两年后，你意识到到目前为止你所做的一切只是构建了一个机器人系统，而你还没有开始你的应用程序或研究的核心功能。现在是时候加快速度了。
- en: You finish the robot as well as you can, make some shortcuts, and publish your
    paper or present that prototype. In the best-case scenario, you could also share
    your code with an open-source license so that other people can use it, but probably
    not directly as it’s just code for your own need, not a complete framework or
    library with modular components, documentation, and so on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你尽可能地完成机器人，做一些捷径，发布你的论文或展示那个原型。在最佳情况下，你也可以通过开源许可分享你的代码，这样其他人就可以使用它，但可能不会直接使用，因为这只是满足你自身需求的代码，而不是一个包含模块化组件、文档等完整框架或库。
- en: Then, you move on to a new project, new job, and new research. Somebody else
    will take your place, read your code, and realize that it doesn’t help them build
    their application. Hence, they have to start from scratch.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你转向新的项目、新的工作和新的研究。别人会取代你的位置，阅读你的代码，并意识到它并不能帮助他们构建应用程序。因此，他们不得不从头开始。
- en: 'What just happened here is that you reinvented the wheel. The next person will
    repeat the same circle. And this is much more common than you think. People keep
    reinventing the wheel over and over again. This is the number one reason why ROS
    was created: to stop you from reinventing the wheel anytime you need to create
    a robot. Just like you have open-source frameworks, tools, and environments to
    develop websites or mobile applications, why not do the same for robotics? This
    is the philosophy behind ROS: to provide a *standard* for robotics applications
    that you can use on *any robot*.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生的事情是你重新发明了轮子。下一个人会重复同样的循环。这比你想象的要普遍得多。人们不断地重复发明轮子。这就是ROS被创造出来的首要原因：在你需要创建机器人时阻止你重新发明轮子。就像你有开源框架、工具和环境来开发网站或移动应用程序一样，为什么不为机器人做同样的事情呢？这就是ROS背后的哲学：为机器人应用程序提供一个*标准*，你可以在*任何机器人*上使用它。
- en: After you learn ROS, you can spend less time on the basics and focus on the
    key functionalities you want to add instead. You can program new robots in no
    time, join existing projects, and easily collaborate with a team.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在你学习ROS之后，你可以将更多时间投入到你想要添加的关键功能上，而不是基础的技能学习。你将能够迅速编程新的机器人，加入现有的项目，并且能够轻松地与团队协作。
- en: What is ROS?
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROS是什么？
- en: ROS is hard to define because it’s not just one thing. And to be honest, I don’t
    think you can truly understand what it is until you start to understand how to
    write code with it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: ROS难以定义，因为它不仅仅是一件事。坦白说，我认为你只有开始理解如何用它编写代码，才能真正理解ROS是什么。
- en: One thing we can start with is what ROS is not.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从ROS不是什么开始了解。
- en: 'ROS is not an operating system. It’s a combination of four main parts:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: ROS不是一个操作系统。它是四个主要部分的组合：
- en: Framework
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 框架
- en: Set of tools
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具集
- en: Plug-and-play plugins
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即插即用的插件
- en: An online community
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在线社区
- en: Let’s dive a bit more into each of these parts.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地探讨这些部分。
- en: ROS is a framework with plumbing
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ROS是一个具有管道的框架
- en: ROS comes with a set of rules on how to build an application. As we will see
    in this book, you will need to create packages, and then write programs inside
    those packages (nodes). There is a specific way to create and write them, as well
    as create tools to build and use them.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: ROS提供了一套构建应用程序的规则。正如我们将在本书中看到的，你需要创建包，然后在那些包（节点）内部编写程序。创建和编写它们以及创建工具来构建和使用它们都有特定的方式。
- en: Any framework comes with a specific set of rules. The remarkable thing about
    this is that after you’ve created a few projects, any new project is going to
    be easier and faster to set up. Also, as everyone is following the same set of
    rules, you can more easily work in a team or understand and use the code written
    by others.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 任何框架都附带一套特定的规则。令人印象深刻的是，在你创建了一些项目之后，任何新的项目都将更容易、更快地设置。此外，由于每个人都遵循相同的规则，你可以更轻松地在团队中工作或理解和使用他人编写的代码。
- en: As a direct consequence of using this framework, you get access to what is often
    referred to as **plumbing**, which means that the underlying communication between
    the nodes is managed for you. Imagine that you’re building a house, and the plumbing
    or electrical system is already done for you. This will save you a lot of development
    time, and you also don’t need to learn how to do it yourself (and thus, reinvent
    the wheel).
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此框架的直接结果是，你获得了通常被称为**plumbing**的访问权限，这意味着节点之间的底层通信由你管理。想象一下，你正在建造一栋房子，管道或电气系统已经为你准备好了。这将节省你大量的开发时间，而且你也不需要学习如何自己来做（因此，重新发明轮子）。
- en: To sum it up, with ROS, you can easily separate your application into different
    sub-programs (called **nodes**). The communication between nodes is handled for
    you. You can easily test one component, and if this component fails, it will not
    affect the other running components. ROS is a modular framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，使用ROS，你可以轻松地将你的应用程序分成不同的子程序（称为**nodes**）。节点之间的通信由你处理。你可以轻松测试一个组件，如果这个组件失败，它将不会影响其他正在运行的组件。ROS是一个模块化框架。
- en: A set of tools
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 一套工具
- en: ROS comes with a set of tools that allow you to develop faster. Among them,
    you can find command-line tools to build the application, introspection tools
    to monitor the flow of communication, logging functionalities, plots, and more.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: ROS附带一套工具，这些工具可以帮助你更快地开发。其中，你可以找到用于构建应用程序的命令行工具，用于监控通信流程的检查工具，日志功能，图表等等。
- en: You also get 3D visualization tools to see what your robot is doing, and even
    a complete simulator using real physics, named **Gazebo**, so that you can work
    on a realistic simulation before trying out your robot.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 你还获得了3D可视化工具来查看你的机器人正在做什么，甚至还有一个名为**Gazebo**的完整模拟器，它使用真实物理，这样你就可以在尝试你的机器人之前进行现实模拟。
- en: There are quite a lot of available tools, and we’ll discover many of them throughout
    this book. As an example of how useful it can be, there is one (called **bags**)
    that allows you to save communication streams so that they can be replayed later.
    Let’s say you build a mobile robot, and you need to test the robot outside when
    it’s raining, then continue to develop the software while taking the rain into
    account. You probably won’t have rain every day, or you won’t even have access
    to the robot any time you want. With this tool, you can run the experiment once,
    save the data, and replay it later to develop your application for a specific
    set of conditions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的工具相当多，我们将在本书中了解到其中许多。作为一个例子，有一个（称为**bags**）的功能允许你保存通信流，以便稍后回放。假设你构建了一个移动机器人，需要在下雨时进行测试，然后考虑雨水因素继续开发软件。你可能不会每天都下雨，或者你甚至无法随时接触到机器人。有了这个工具，你可以运行一次实验，保存数据，然后稍后回放以开发针对特定条件的应用程序。
- en: Capabilities – plug-and-play plugins and stacks
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 功能性 – 插件和堆栈即插即用
- en: 'This is probably where you will save hundreds of hours. Imagine two common
    scenarios:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是你将节省数百小时的地方。想象两个常见的场景：
- en: You develop a mobile robot and need the robot to navigate autonomously in a
    dynamic environment.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你开发了一个移动机器人，需要机器人能够在动态环境中自主导航。
- en: You develop a six-axis robotic arm and want to create motion planning to perform
    a smooth movement on all axes.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你开发了一个六轴机械臂，并希望创建运动规划以在所有轴上执行平滑运动。
- en: This looks quite complex and involves understanding and implementing several
    algorithms, as well as writing well-optimized and efficient code. This is where
    you would probably have to reinvent the wheel and waste lots of precious time.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来相当复杂，需要理解和实现几个算法，以及编写良好优化和高效的代码。这可能是你不得不重新发明轮子并浪费大量宝贵时间的地方。
- en: For those two scenarios, you can find existing plugins that do the job for you.
    All you need to do is install the plugins and configure your robot to make it
    compatible. Of course, this is easier said than done, but the workload can be
    counted in days/weeks, not months/years. And once again, once you know how to
    use those plugins, your next project will take much less time.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两种情况，你可以找到现有的插件来为你完成工作。你所需要做的就是安装插件，并配置你的机器人使其兼容。当然，这比说起来要难，但工作量可以按天/周计算，而不是按月/年计算。而且，一旦你学会了如何使用这些插件，你的下一个项目将花费的时间会少得多。
- en: There are many plugins that you can use. Some are quite simple, while others
    involve a collection of plugins and are also called frameworks or stacks. Your
    job as a ROS developer is to *glue* all those components together, and maybe create
    new components for functionalities that are not developed yet.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用许多插件。有些相当简单，而有些则涉及一系列插件，也被称为框架或堆栈。作为ROS开发者，你的工作是**粘合**所有这些组件，也许为尚未开发的特性创建新的组件。
- en: Online community
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在线社区
- en: 'This is the fourth pillar of ROS, and it’s quite an important one: the community.
    ROS is an open-source project with a permissive license. I can’t give you any
    legal advice on licensing, but you can use ROS in a commercial product without
    having to redistribute your code.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这是ROS的第四个支柱，它相当重要：社区。ROS是一个开源项目，拥有宽松的许可证。我无法就许可证提供任何法律建议，但你可以在商业产品中使用ROS而无需重新分发你的代码。
- en: You can find all the ROS code online, as well as the code for the plug-and-play
    plugins. Everything is easily accessible on GitHub.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在网上找到所有ROS代码，以及即插即用的插件代码。所有这些都可以在GitHub上轻松访问。
- en: 'The ROS project is also backed by an online community that you can most commonly
    find in the following areas:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: ROS项目还得到了一个在线社区的支持，你通常可以在以下区域找到它：
- en: '**Robotics Stack Exchange** ([https://robotics.stackexchange.com/](https://robotics.stackexchange.com/)):
    You can use this to ask technical questions. If you know Stack Overflow, as most
    developers do, well, this is Stack Overflow for robotics.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器人技术问答社区**([https://robotics.stackexchange.com/](https://robotics.stackexchange.com/))：你可以使用这个平台来提问技术问题。如果你熟悉Stack
    Overflow，就像大多数开发者一样，那么，这就是机器人领域的Stack Overflow。'
- en: '**ROS Discourse forums** ([https://discourse.ros.org/](https://discourse.ros.org/)):
    Here, you can get informed about the latest developments, jobs, community projects,
    new ideas, and more. I recommend checking this website often to stay up to date
    with where ROS is going.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ROS论坛**([https://discourse.ros.org/](https://discourse.ros.org/))：在这里，你可以了解最新的发展、工作、社区项目、新想法等。我建议你经常检查这个网站，以保持对ROS走向的了解。'
- en: When to use ROS
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 何时使用ROS
- en: Now that you understand a bit more what ROS is, should you use ROS whenever
    your project has something 'robotics' in it? In this section, I will give you
    some hints on when using ROS makes sense, backed by some examples to give you
    a better idea.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你对ROS有了更多的了解，那么在你的项目中只要有“机器人”这个词，你就应该使用ROS吗？在本节中，我将给你一些提示，说明何时使用ROS是有意义的，并通过一些例子来帮助你更好地理解。
- en: 'First, if you’re reading this book because you need to learn ROS for your work/university,
    then the question is easily answered: yes, you will use ROS for your project.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，如果你因为工作或大学需要学习ROS而阅读这本书，那么答案很简单：是的，你将在你的项目中使用ROS。
- en: But if you must make the decision yourself, what should you do?
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你必须自己做出决定，你应该怎么做？
- en: 'Let’s simplify robotics and say that a robotics system contains three categories
    of things: actuators, sensors, and controllers.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简化机器人技术，并说一个机器人系统包含三类事物：执行器、传感器和控制器。
- en: 'An **actuator** is something that creates movement (for example, a motor to
    rotate a wheel). A **sensor** will read data from the environment (for example,
    a camera, laser scan, or temperature sensor). A **controller** is something that
    is in between: it takes the data available from one or multiple sensors (input)
    and, through an algorithm, creates a command for the actuators of the robot (output).
    In a way, the controller is the *brain* or one of the brains of the robot.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行器**是产生运动的东西（例如，一个旋转轮子的电机）。**传感器**将从环境中读取数据（例如，摄像头、激光扫描或温度传感器）。**控制器**介于两者之间：它从一个或多个传感器（输入）获取可用的数据，并通过算法为机器人的执行器（输出）创建命令。从某种意义上说，控制器是机器人的**大脑**或大脑之一。'
- en: For very simple applications, when you just have a few sensors and actuators,
    you might not need ROS.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 对于非常简单的应用，当你只有几个传感器和执行器时，你可能不需要ROS。
- en: 'Here are a few examples where ROS isn’t needed:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些例子，说明ROS不是必需的：
- en: You just need to take a picture from a camera when a user presses a button,
    using a Raspberry Pi board, and send this picture to a web server. There’s no
    need to use ROS—you can just combine a few Python libraries in a script, and you’re
    done. Using ROS here would be a good example of over-engineering (unless you do
    this for learning purposes).
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当用户按下按钮时，你只需要使用 Raspberry Pi 板从相机中拍照，并将这张照片发送到网络服务器。没有必要使用 ROS——你只需在脚本中结合几个
    Python 库，就完成了。在这里使用 ROS 将是一个过度设计的例子（除非你这样做是为了学习目的）。
- en: You have to use a servo motor to open/close a door when a movement is detected,
    using an infrared sensor. This is a very simple application that can easily be
    programmed using a basic microcontroller board—and you can do a quick prototype
    with a board such as Arduino.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当检测到运动时，你需要使用红外传感器打开/关闭门，这是一个非常简单的应用，可以很容易地使用基本的微控制器板编程——你可以用 Arduino 这样的板快速原型。
- en: You have built a simple robot with two wheels and an infrared sensor, and you
    want to make the robot follow a line. This is a typical project that’s given to
    students in engineering school, and a simple algorithm on an Arduino board will
    do.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经用两个轮子和一个红外传感器构建了一个简单的机器人，并想使机器人跟随一条线。这是一个典型的工程项目，通常在工程学院的学生中给出，一个简单的 Arduino
    板上的算法就可以完成。
- en: 'Now, let’s consider some examples where ROS is needed:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们考虑一些需要 ROS 的例子：
- en: You have a new mobile robot with two wheels and a laser scan, and you want to
    read data from the laser scan, map the environment, make the robot move autonomously,
    and control the two wheels accordingly. On top of that, you want to simulate the
    robot in 3D with real physical properties. This is when ROS is going to become
    very handy. Not only will it help you to make all the components work together,
    but you can also use existing algorithms for path planning (through a ROS plugin)
    and simulation.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有一个新的两轮激光扫描移动机器人，你想从激光扫描中读取数据，绘制环境地图，使机器人自主移动，并相应地控制两个轮子。除此之外，你还想用真实的物理属性在
    3D 中模拟机器人。这时 ROS 就会变得非常有用。它不仅可以帮助你使所有组件协同工作，你还可以使用现有的路径规划算法（通过 ROS 插件）和模拟。
- en: You need to create a system that contains a six-axis robotic arm, or even multiple
    robotic arms working together, along with conveyor belts and mobile robots.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要创建一个包含六轴机械臂，甚至多个机械臂协同工作，以及传送带和移动机器人的系统。
- en: Your robotics application (not necessarily just one robot) contains lots of
    sensors and actuators that you want to develop separately and add them in a modular
    way.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的机器人应用（不一定是单个机器人）包含大量你想要单独开发并模块化添加的传感器和执行器。
- en: You want to create a hardware driver for a component and make this component
    easy to use by other robotics developers. By making the component *ROS-compatible*,
    anybody who knows ROS can integrate it into their application with low effort.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想为某个组件创建一个硬件驱动程序，并使其他机器人开发者能够轻松使用这个组件。通过使组件*与 ROS 兼容*，任何了解 ROS 的人都可以轻松将其集成到他们的应用中。
- en: As you can see from the former examples, ROS is not always needed whenever you
    need to program hardware or create a robotics system. Of course, you could use
    it for any application, but it’s like if you were to use a complete web framework
    (for example, Django) for a single static web page.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述示例所示，ROS 并非在每次需要编程硬件或创建机器人系统时都是必需的。当然，你可以为任何应用使用它，但这就好比你要为单个静态网页使用完整的网络框架（例如
    Django）一样。
- en: With the latter examples, you can see that if your system becomes more complex,
    if you want to easily collaborate with other developers, or if you realize that
    one big part of your system can be solved with one of the plug-and-play plugins,
    ROS may be the solution.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 从后面的示例中，你可以看到，如果你的系统变得更加复杂，如果你想与其他开发者轻松协作，或者如果你意识到系统的一个大块部分可以用一个即插即用的插件来解决，ROS
    可能就是解决方案。
- en: Of course, it takes time to learn it and your first project will take longer
    to complete, but then, with more experience, you will go much faster.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，学习它需要时间，你的第一个项目完成时间会更长，但随着经验的积累，你会变得更快。
- en: As an example, it could take less than a week for a senior ROS developer to
    write custom code for a robotic arm (including robot model, motion planning, and
    hardware control) and the same for a mobile robot with navigation capabilities
    (provided that the hardware already has a ROS driver). Less than a week and you
    get a working software prototype.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个经验丰富的ROS开发者可能不到一周就能为机械臂编写自定义代码（包括机器人模型、运动规划和硬件控制），同样，对于具有导航能力的移动机器人也是如此（前提是硬件已经有一个ROS驱动程序）。不到一周，你就能得到一个可工作的软件原型。
- en: ROS 1 versus ROS 2
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ROS 1与ROS 2的比较
- en: To be clear, this book is all about ROS 2, not ROS 1\. You will start learning
    ROS 2 from zero experience. This section is probably the only time I will be talking
    that much about ROS 1.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确，这本书完全是关于ROS 2的，而不是ROS 1。你将从零基础开始学习ROS 2。这个部分可能是唯一一次我会这么详细地谈论ROS 1。
- en: A quick story of ROS, and how we got to ROS 2
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROS的简要故事，以及我们如何到达ROS 2
- en: ROS 1 (originally called ROS) was first developed in 2007\. It quickly gained
    popularity and grew exponentially in the following years.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: ROS 1（最初被称为ROS）首次开发于2007年。它在接下来的几年里迅速获得了人气，并呈指数级增长。
- en: In 2014, the ROS 2 project was announced. Simply put, ROS 1 was a bit too limited
    for industrial applications (lack of real-time support, safety, and so on) and
    was only used in research/education. To solve this problem, the developers decided
    to make ROS more “industrial friendly,” as well as make it better, thanks to all
    the lessons learned from the beginning of ROS.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 2014年，宣布了ROS 2项目。简单来说，ROS 1对于工业应用来说有点过于局限（缺乏实时支持、安全性等），并且仅用于研究/教育。为了解决这个问题，开发者决定使ROS更加“适合工业”，同时也使它变得更好，这是从ROS开始以来学到的所有经验教训。
- en: Now, why create ROS 2 and not just continue ROS with some new changes? Well,
    the changes were too big, and they would have completely broken compatibility
    with older versions. Thus, it was decided to create a completely new ROS from
    scratch and name it ROS 2\. In 2014, ROS 2 was officially announced, and the development
    of the project started.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为什么创建ROS 2而不是仅仅对ROS进行一些新更改？因为更改太大，它们将完全破坏与旧版本的兼容性。因此，决定从头开始创建一个全新的ROS，并将其命名为ROS
    2。2014年，ROS 2正式宣布，项目开发开始。
- en: In December 2017, the first ROS 2 distribution was released, which meant that
    ROS 1 and ROS 2 started to co-exist. At this point, ROS 2 was lacking many core
    functionalities and plugins, making it unsuitable for serious projects. Most ROS
    developers were still using ROS 1.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 2017年12月，发布了第一个ROS 2发行版，这意味着ROS 1和ROS 2开始共存。在这个时候，ROS 2缺少许多核心功能性和插件，使其不适合严肃的项目。大多数ROS开发者仍在使用ROS
    1。
- en: Years passed by and ROS 2 got more development, plugins, and more. Its popularity
    started to grow.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 年复一年，ROS 2得到了更多的发展，插件也越来越多。它的受欢迎程度开始增长。
- en: I would say it was worth it to use ROS 2 (compared to ROS 1) starting from 2022\.
    This is probably more of a personal opinion and some people might disagree, but
    from 2022 and the release of **ROS 2 Humble** (more on distributions in [*Chapter
    2*](B22403_02.xhtml#_idTextAnchor048)), we had access to a long-term release that
    was stable, with all the major plugins and stacks working correctly, which is
    what you need to program a robot.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为从2022年开始使用ROS 2（与ROS 1相比）是值得的。这可能是个人观点，有些人可能不同意，但从2022年和**ROS 2 Humble**（更多关于发行版的内容见[*第2章*](B22403_02.xhtml#_idTextAnchor048)）的发布开始，我们有了长期稳定发布的版本，所有主要插件和堆栈都能正常工作，这正是编写机器人程序所需要的。
- en: In the meantime, it was announced that ROS 1 would end in May 2025\. After this
    date, ROS 1 would still exist, but it wouldn’t be supported anymore.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，宣布ROS 1将在2025年5月结束。在此日期之后，ROS 1仍然存在，但将不再提供支持。
- en: 2023 was the year with the most significant shift from ROS 1 to ROS 2 among
    the ROS community. It is now safe to say that ROS 2 is the way to go when developing
    new ROS applications.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 2023年是ROS社区从ROS 1转向ROS 2最显著的年份。现在可以肯定地说，当开发新的ROS应用程序时，ROS 2是必由之路。
- en: So, if you had previously heard about ROS 1 and ROS 2, now you know that ROS
    2 is what you need to learn, and we can say that ROS 1 is a dead project. But
    is that true?
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你之前听说过ROS 1和ROS 2，现在你知道ROS 2是你需要学习的，我们可以这样说，ROS 1是一个过时的项目。但这是真的吗？
- en: Is ROS 1 dead already?
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ROS 1已经过时了吗？
- en: In theory, yes, but in practice, it’s (always) a bit different. As you probably
    know, several companies are using obsolete and legacy technologies. The reason
    is that updating software to a new version is often quite expensive and can also
    be risky. That’s why you still see job offers from banking systems requiring skills
    in Cobol, a programming language from the 1960s that no one uses anymore.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上是这样，但在实践中，情况总有些不同。你可能知道，有几家公司仍在使用过时和遗留的技术。原因是将软件更新到新版本通常相当昂贵，也可能存在风险。这就是为什么你仍然会看到银行系统的工作机会要求具备Cobol语言技能，这是一种1960年代的编程语言，现在已经没有人使用了。
- en: In robotics, things are a bit similar. Some companies have released robots with
    a specific version of ROS 1, and while the robot is still on the market, the company
    will not upgrade and still use and maintain the previous version, also called
    *legacy*. Thus, the definitive transition in 2025 is going to take a few more
    years.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在机器人领域，情况有些相似。一些公司已经发布了使用特定版本的ROS 1的机器人，并且当机器人仍在市场上时，公司不会升级，仍然使用和维护之前的版本，这也被称为*遗留版本*。因此，2025年的最终过渡可能还需要几年时间。
- en: Why am I writing this? Simply to let you know that if you happen to get a job
    in a robotics company that has been using ROS already, you might encounter a few
    ROS 1 projects, even after ROS 1 is officially finished. However, be assured that
    all the ROS 2 knowledge you have can easily be ported to ROS 1 as the core concepts
    are the same.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我为什么要写这篇文章？简单来说，就是想让你知道，如果你在一家已经使用ROS的机器人公司找到工作，即使ROS 1已经正式结束，你可能会遇到一些ROS 1项目。然而，请放心，你拥有的所有ROS
    2知识都可以轻松迁移到ROS 1，因为核心概念是相同的。
- en: To conclude, for all new learnings, projects, studies, teaching, and startups,
    ROS 2 is what you need. I will now close this chapter of ROS 1 and focus on ROS
    2\. As mentioned previously, I might write *ROS* or *ROS 2* interchangeably as
    we aren’t targeting ROS 1 here.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，对于所有新的学习、项目、研究、教学和创业，ROS 2是你需要的。我现在将关闭ROS 1的这一章节，并专注于ROS 2。如前所述，我可能会交替使用*ROS*或*ROS
    2*，因为我们这里的目标不是ROS 1。
- en: Prerequisites for starting with ROS 2
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用ROS 2的先决条件
- en: To get started with ROS and this book, there are a few things you need to know.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用ROS和这本书，你需要了解一些事情。
- en: Knowledge prerequisites
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 知识先决条件
- en: 'It is best that you have some knowledge of the following:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最好你对以下内容有所了解：
- en: '**Linux command line**: Since we’ll be using **Ubuntu**, being familiar with
    Linux is mandatory. You don’t need to be an expert—you just need to know the basics.
    Many tools in ROS 2 involve the command line, so knowing how to open a Terminal
    and write basic commands will help you tremendously.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Linux命令行**：由于我们将使用**Ubuntu**，熟悉Linux是强制性的。你不需要成为专家——你只需要了解基础知识。ROS 2中的许多工具都涉及命令行，所以知道如何打开终端并编写基本命令将极大地帮助你。'
- en: '**Python programming**: The two most common languages for ROS are **Python**
    and C++. Python is easier to get started with and allows you to prototype things
    faster. Hence, this is the language we will use for all detailed explanations.
    You need to know Python basics, and **object-oriented programming** (**OOP**)
    is a good plus as ROS 2 is heavily using OOP everywhere.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python编程**：ROS最常用的两种语言是**Python**和C++。Python更容易上手，并且允许你更快地进行原型设计。因此，我们将使用这种语言进行所有详细解释。你需要了解Python基础知识，**面向对象编程**（**OOP**）是一个很好的加分项，因为ROS
    2在各个地方都大量使用OOP。'
- en: '**Optional**: **C++** programming. Even if the focus of the book is on Python,
    I still wanted to include C++ code for everything we do. If you only want to learn
    Python, you can ignore the C++ code, but of course, if you want to follow C++
    instructions, you need C++ basics (better with OOP).'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可选**：**C++**编程。尽管这本书的重点是Python，但我仍然想包括我们做的所有事情中的C++代码。如果你只想学习Python，你可以忽略C++代码，但当然，如果你想遵循C++指令，你需要C++基础知识（最好是面向对象编程）。'
- en: I want to emphasize that it will be much, much easier for you to learn ROS 2
    if you have good programming and Linux basics. Learning ROS is already quite challenging
    (though with this book, the goal is to reduce the learning curve), so if you’re
    starting ROS, Linux, and Python from scratch, this could be overwhelming.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我想强调，如果你有良好的编程和Linux基础知识，学习ROS 2将会容易得多。学习ROS本身就已经相当具有挑战性（尽管有了这本书，目标是降低学习曲线），所以如果你是从零开始学习ROS、Linux和Python，这可能会让你感到不知所措。
- en: If you’re reading these lines and you don’t know how to write a Python function
    or navigate to a directory in the Terminal, then I really recommend that you pause
    here, take some time to learn Python and Linux basics, and come back to this book.
    There’s no need to spend hundreds of hours doing this but investing some time
    to get the basics right will help you finish this ROS 2 book faster.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在阅读这些内容而你不知道如何编写 Python 函数或在终端中导航到目录，那么我真心建议你在这里暂停，花些时间学习 Python 和 Linux
    基础知识，然后再回到这本书。没有必要花数百小时来做这件事，但投入一些时间确保基础知识正确将帮助你更快地完成这本 ROS 2 书。
- en: Hardware and software
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件和软件
- en: You’ll need to have a computer to follow this book. Regarding the specifications,
    you don’t need anything fancy to get started with ROS 2\. If you can open a web
    browser with a few tabs and have a smooth experience, I would say that your computer
    is good enough to get started.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要一台计算机来阅读本书。关于规格，你不需要任何花哨的东西来开始使用 ROS 2。如果你可以打开带有几个标签的网页浏览器并且有顺畅的体验，那么我可以说你这台计算机足够开始使用了。
- en: Then, later, depending on what you want to do with ROS, you might need a better
    machine (for example, if you want to simulate multiple robots using lots of sensor
    and image processing). However, it’s probably better to wait until you need the
    extra power to upgrade. For now, the most important thing to do is start learning
    ROS.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，稍后，根据你想要用 ROS 做什么，你可能需要一个更好的机器（例如，如果你想要使用大量传感器和图像处理来模拟多个机器人）。然而，可能最好等到你需要额外的性能时再升级。现在，最重要的事情是开始学习
    ROS。
- en: For software requirements, I will give you the necessary installation instructions
    throughout this book. All the software we will be using is free to use and open
    source.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 对于软件要求，我将在本书的整个过程中提供必要的安装说明。我们将使用的所有软件都是免费使用和开源的。
- en: We will also use Ubuntu 24.04, in which we will run ROS 2\. Having Ubuntu installed
    is a requirement, but I will give you a recap in [*Chapter 2*](B22403_02.xhtml#_idTextAnchor048).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用 Ubuntu 24.04，在其中我们将运行 ROS 2。安装 Ubuntu 是一个要求，但我会给你一个在[*第二章*](B22403_02.xhtml#_idTextAnchor048)的回顾。
- en: How to follow this book
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何阅读本书
- en: The book is divided into three parts, including 14 chapters.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 本书分为三个部分，包括 14 章。
- en: Each chapter can be followed individually, although for one chapter, you need
    the knowledge from all previous chapters.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 每一章都可以单独阅读，尽管对于某一章，你需要所有之前章节的知识。
- en: 'If you got this book because you just want to get started from scratch, then
    it’s simple: follow the book in the order it’s been written. I have designed it
    specifically so that you learn the concepts one step at a time without having
    to think about what directions you should take.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是因为想要从头开始而得到这本书，那么很简单：按照书写的顺序阅读本书。我特意设计它，以便你一次学习一个概念，而不必考虑你应该采取什么方向。
- en: Then, as you progress, feel free to come back to any chapter to clear up doubts.
    I encourage you to do that. The first time you learn about a concept, you don’t
    necessarily grasp all the subtleties. As you continue with this book and use the
    concept along with other new concepts, you often have ‘epiphany moments’, when
    everything clicks together.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，随着你的进步，随时可以回到任何章节来消除疑惑。我鼓励你这样做。第一次学习一个概念时，你并不一定能够掌握所有的细微之处。随着你继续阅读本书并使用这个概念以及其他新概念，你经常会遇到“顿悟时刻”，那时一切都会变得清晰。
- en: If you already know some ROS 2 basics (or you’ve already read this book), then
    feel free to jump to any chapter. If a chapter starts from a code base that we
    developed in previous chapters, then you will be able to download the code and
    start from there.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经了解一些 ROS 2 基础知识（或者你已经阅读过这本书），那么你可以自由地跳到任何章节。如果一个章节是从我们在前几章中开发的代码库开始的，那么你将能够下载代码并从那里开始。
- en: 'There is a GitHub repository you can use to follow this book: [https://github.com/PacktPublishing/ROS-2-from-Scratch](https://github.com/PacktPublishing/ROS-2-from-Scratch).
    All the code we’ll write is hosted there, so be sure to use this GitHub repository
    closely while following along. I will explain how to use this repository a bit
    later in this book.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个 GitHub 仓库你可以用来阅读本书：[https://github.com/PacktPublishing/ROS-2-from-Scratch](https://github.com/PacktPublishing/ROS-2-from-Scratch)。我们将编写的所有代码都托管在那里，所以请确保在阅读本书时密切使用这个
    GitHub 仓库。我会在本书稍后解释如何使用这个仓库。
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this introductory chapter, we cleared up some of the most common confusion
    points regarding ROS: its name, what it is and isn’t, when to use it, and why.
    You also learned more about the different ROS versions (ROS 1 and ROS 2), and
    you learned what kind of prerequisites you need to get started with ROS 2.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的介绍部分，我们澄清了一些关于ROS（机器人操作系统）最常见的困惑点：它的名称、它是什么以及不是什么、何时使用它以及为什么。你还了解了不同版本的ROS（ROS
    1和ROS 2），以及你学习了开始使用ROS 2所需具备的先决条件。
- en: You should now have a better understanding of the big picture, and even if everything
    still seems a bit confusing, don’t worry too much—it will all make sense when
    you use the ROS 2 concepts and code with them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你应该对整体情况有了更好的理解，即使一切看起来仍然有些混乱，也不要过于担心——当你使用ROS 2的概念和代码时，一切都会变得清晰。
- en: Now, to be able to use ROS 2, we need to install it. This will be the focus
    of the next chapter and will help you get your environment 100% ready for ROS
    2.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了能够使用ROS 2，我们需要安装它。这将是下一章的重点，并帮助你将你的环境100%准备好用于ROS 2。
