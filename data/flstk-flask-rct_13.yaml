- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Error Handling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: '**Error handling** is a critical component in the user experience of any web
    application. **Flask** provides several built-in tools and options for handling
    errors in a clean and efficient manner. The goal of error handling is to catch
    and respond to errors that may occur during the execution of your application
    such as runtime errors, exceptions, and invalid user inputs.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误处理**是任何Web应用程序用户体验中的关键组件。**Flask**提供了几个内置的工具和选项，用于以干净和高效的方式处理错误。错误处理的目标是捕获和响应在应用程序执行过程中可能发生的错误，例如运行时错误、异常和无效的用户输入。'
- en: Flask provides a built-in debugger that can be used to catch and diagnose errors
    during development. So, why is the concept of error handling so important in any
    web application? An error-handling mechanism provides meaningful error messages
    to users when things go south when expected to go north, helping to maintain the
    overall quality of the user experience. Also, proactive error handling makes debugging
    easy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Flask提供了一个内置的调试器，可以在开发过程中用于捕获和诊断错误。那么，为什么错误处理在任何Web应用程序中都是一个如此重要的概念呢？错误处理机制在预期向北发展却向南发展时，向用户提供有意义的错误消息，有助于维护用户体验的整体质量。此外，主动的错误处理使得调试变得容易。
- en: If error-handling implementation is well thought out, then debugging issues
    and identifying the root causes of problems in the application becomes easier.
    As a developer, you would also want to increase the reliability of your application
    by anticipating and handling potential errors. This invariably makes your application
    more reliable and less likely to break under unexpected conditions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果错误处理实现得很好，那么调试问题和识别应用程序中问题的根本原因就会变得更容易。作为开发者，你也会希望通过预测和处理潜在的错误来提高应用程序的可靠性。这无疑使得你的应用程序更加可靠，并且不太可能在意外情况下崩溃。
- en: In this chapter, we will explore the different strategies and techniques for
    handling errors in Flask web applications. You will understand and learn how to
    use the built-in **Flask debugger**, implement **error handlers**, and create
    custom **error pages** in order to provide meaningful feedback to the user.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨处理Flask Web应用程序中错误的不同策略和技术。你将了解并学习如何使用内置的**Flask调试器**、实现**错误处理器**以及创建自定义的**错误页面**，以便向用户提供有意义的反馈。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Using the Flask debugger
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask调试器
- en: Creating error handlers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建错误处理器
- en: Creating custom error pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义错误页面
- en: Tracking events in your application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪应用程序中的事件
- en: Sending error emails to administrators
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向管理员发送错误邮件
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在GitHub上找到：[https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13)。
- en: Using the Flask debugger
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flask调试器
- en: Flask as a lightweight Python web framework is widely used for building web
    applications. One of the out-of-the-box benefits of using Flask is its built-in
    debugger, which provides a powerful tool for identifying and fixing errors in
    your application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Flask作为一个轻量级的Python网络框架，被广泛用于构建Web应用程序。使用Flask的一个即用即得的好处是其内置的调试器，它为识别和修复应用程序中的错误提供了一个强大的工具。
- en: When an error occurs in your Flask application, the debugger will automatically
    be activated. The debugger will provide detailed information about the error,
    including a stack trace, source code context, and any variables that were in scope
    at the time the error occurred. This information is golden for determining the
    root cause of the error and possible ideas for fixing it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的Flask应用程序发生错误时，调试器会自动激活。调试器将提供关于错误的详细信息，包括堆栈跟踪、源代码上下文以及错误发生时在作用域内的任何变量。这些信息对于确定错误的根本原因和修复它的可能想法至关重要。
- en: The Flask debugger also provides some interactive tools that can be used to
    inspect the state of your application and understand what is happening. For instance,
    you can evaluate expressions and examine the values of variables. You can also
    set breakpoints in your code, and step through your code line by line to see how
    it is executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Flask调试器还提供了一些交互式工具，可以用来检查应用程序的状态并理解正在发生什么。例如，你可以评估表达式并检查变量的值。你还可以在代码中设置断点，逐行执行代码以查看其执行情况。
- en: 'Let’s examine this code snippet for illustration:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下代码片段来进行分析：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this instance, you can set a breakpoint at the line before `c = a + b`, as
    done in the preceding code, and run the application. When the breakpoint is hit,
    you can enter the debugger and inspect the values of `a`, `b`, and `c`. You can
    also evaluate expressions and see their results. For instance, to evaluate the
    expression `a + b`, you can type `a + b` in the debugger’s command prompt and
    hit *Enter*. The result, `30`, will be displayed. You can also step through your
    code line by line by using the `n` command to go to the next line, and the `c`
    command to continue execution until the next breakpoint.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，你可以在`c = a + b`之前的行设置一个断点，就像前面的代码中所做的那样，并运行应用程序。当断点被触发时，你可以进入调试器并检查`a`、`b`和`c`的值。你还可以评估表达式并查看其结果。例如，要评估表达式`a
    + b`，你可以在调试器的命令提示符中输入`a + b`并按*Enter*。结果`30`将被显示。你还可以使用`n`命令逐行执行代码，使用`c`命令继续执行直到下一个断点。
- en: In this way, you can use the Flask debugger’s interactive tools to understand
    what is happening in your application and debug it more effectively. This can
    be especially useful when dealing with large or complex code bases. The Flask
    debugger’s interactive tools are useful when it is difficult to understand what
    is causing an error without additional tools and information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这种方式，你可以使用Flask调试器的交互式工具来了解应用程序中发生的情况，并更有效地进行调试。这对于处理大型或复杂的代码库特别有用。当没有额外工具和信息时，Flask调试器的交互式工具在难以理解导致错误的根本原因时非常有用。
- en: Aside from interactive tools, Flask also provides a debug mode that can be enabled
    to provide more detailed error messages. When the debug mode is enabled, Flask
    will display detailed error pages with information about the error including a
    stack trace and the source code context. This information can be extremely helpful
    for debugging complex issues.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 除了交互式工具之外，Flask还提供了一个可以启用的调试模式，可以提供更详细的错误信息。当启用调试模式时，Flask将显示包含错误信息、堆栈跟踪和源代码上下文的详细错误页面。这些信息对于调试复杂问题非常有帮助。
- en: To enable the Flask debugger, simply set the `debug` configuration value to
    `True` in your Flask application. In this book project, we set this parameter
    in the `.env` file. You should only use this in development, as it can reveal
    sensitive information about your application to anyone who has access to it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用Flask调试器，只需在你的Flask应用程序中将`debug`配置值设置为`True`。在本项目书中，我们在`.env`文件中设置了此参数。你应该只在开发中使用它，因为它可能会向任何有权访问它的人透露你应用程序的敏感信息。
- en: Additionally, Flask allows third-party extensions that can be used to enhance
    the debugging experience. For instance, `Flask-DebugToolbar` provides a toolbar
    that can be added to your application to display information about the current
    request and its context.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Flask还允许使用第三方扩展来增强调试体验。例如，`Flask-DebugToolbar`提供了一个工具栏，可以添加到你的应用程序中，以显示有关当前请求及其上下文的信息。
- en: Flask’s built-in debugger is a powerful tool that can help you quickly identify
    and fix errors in your application. Whether you are working on a small project
    or an enterprise-grade application, the debugger provides valuable information
    that can help you resolve issues and improve the reliability and performance of
    your application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Flask的内置调试器是一个强大的工具，可以帮助你快速识别和修复应用程序中的错误。无论你是在处理小型项目还是企业级应用程序，调试器都提供了有助于解决问题和提高应用程序可靠性和性能的有价值信息。
- en: Next, we will discuss and implement error handlers in Flask web applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论并实现Flask Web应用程序中的错误处理器。
- en: Creating error handlers
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建错误处理器
- en: Flask also provides a mechanism for handling errors called error handlers. Error
    handlers are functions that are invoked when a specific error occurs in your application.
    These functions can be used to return custom error pages, log information about
    the error, or perform any other action that is appropriate for the error. To define
    an error handler in the Flask web application, you need to use the `errorhandler`
    decorator.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Flask还提供了一个处理错误的机制，称为错误处理器。错误处理器是在你的应用程序中发生特定错误时被调用的函数。这些函数可以用来返回自定义错误页面、记录有关错误的日志，或者执行任何适合错误的操作。要在Flask
    Web应用程序中定义错误处理器，你需要使用`errorhandler`装饰器。
- en: The decorator takes the error code as its argument, and the function that it
    decorates is the error handler that will be invoked when that error occurs. The
    error handler function takes an error object as its argument, which provides information
    about the error that occurred. This information can be used to provide a more
    detailed error response to the client or to log additional information about the
    error for debugging purposes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 装饰器接受错误代码作为其参数，并装饰的函数是当发生该错误时将被调用的错误处理器。错误处理器函数接受一个错误对象作为参数，该对象提供了关于发生错误的信息。这些信息可以用来向客户端提供更详细的错误响应，或者为了调试目的记录有关错误的附加信息。
- en: In Flask backend and **React** frontend applications, error handling is a crucial
    step in ensuring a smooth user experience. As mentioned earlier, the goal of error
    handlers is to provide meaningful feedback to the user when something goes wrong,
    rather than simply returning a generic error message.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flask 后端和 **React** 前端应用程序中，错误处理是确保流畅用户体验的关键步骤。如前所述，错误处理器的目标是当出现问题时向用户提供有意义的反馈，而不仅仅是返回一个通用的错误消息。
- en: For instance, you can define error handlers for errors `400`, `404`, and `500`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以定义错误处理器来处理错误 `400`、`404` 和 `500`。
- en: Flask backend
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask 后端
- en: 'The following code shows error handlers that are created for the HTTP error
    codes `404` (not found), `400` (bad request), and `500` (internal server error):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了为 HTTP 错误代码 `404`（未找到）、`400`（错误请求）和 `500`（内部服务器错误）创建的错误处理器：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `not_found`, `bad_request`, and `internal_server_error` functions return
    a `JSON` response containing an error message, along with the corresponding HTTP
    error codes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`not_found`、`bad_request` 和 `internal_server_error` 函数返回包含错误消息的 `JSON` 响应，以及相应的
    HTTP 错误代码。'
- en: React frontend
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React 前端
- en: 'In the React frontend, you can handle these errors by making an HTTP request
    to the Flask backend and checking the response for errors. For example, you can
    use **Axios** in React:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 前端，您可以通过向 Flask 后端发送 HTTP 请求并检查响应中的错误来处理这些错误。例如，您可以在 React 中使用 **Axios**：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding error-handling code illustrates a React frontend communicating
    with a Flask backend API. The code imports `React`, `useState`, and `useEffect`
    hooks, as well as the `axios` library for making API requests. The code then defines
    a functional `Speakers` component that makes an API `GET` request to the `/api/v1/speakers`
    endpoint at the backend.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述错误处理代码展示了 React 前端与 Flask 后端 API 的通信。代码导入了 `React`、`useState` 和 `useEffect`
    钩子，以及用于发送 API 请求的 `axios` 库。然后，代码定义了一个功能组件 `Speakers`，该组件向后端的 `/api/v1/speakers`
    端点发送 API `GET` 请求。
- en: The `useEffect` hook is used to manage the API call, and the response is handled
    in a `.then()` block for success or a `.catch()` block for errors. In the `.catch()`
    block, the error response status is checked and a specific error message is set
    based on the status code. For instance, if the status code is `404`, `Resource
    not found` will be set as the error.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`useEffect` 钩子用于管理 API 调用，响应在 `.then()` 块中处理成功，在 `.catch()` 块中处理错误。在 `.catch()`
    块中，检查错误响应的状态并根据状态码设置特定的错误消息。例如，如果状态码是 `404`，则将“资源未找到”设置为错误。'
- en: The error message is then displayed in the UI using conditional rendering, with
    the `No error` text being displayed if there is no error. The error message is
    stored in the state using the `useState` hook, with the initial value being `null`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 错误信息随后通过条件渲染在 UI 中显示，如果没有错误，则显示“无错误”文本。错误信息使用 `useState` 钩子在状态中存储，初始值为 `null`。
- en: Next, we will discuss and implement custom error pages in Flask web applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论和实现 Flask 网络应用程序中的自定义错误页面。
- en: Creating custom error pages
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义错误页面
- en: In addition to error handlers in Flask, you can also create custom error pages
    that provide a better user experience. When an error occurs in your application,
    the error handler can return a custom error page with information about the error,
    instructions for resolving the issue, or any other content that may be appropriate.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Flask 中的错误处理器外，您还可以创建自定义错误页面，以提供更好的用户体验。当您的应用程序发生错误时，错误处理器可以返回一个包含错误信息、解决问题说明或任何其他适当内容的自定义错误页面。
- en: To create a custom error page in Flask, simply create an error handler as described
    in the preceding section and return a `JSON` response that contains the content
    for the error page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flask 中创建自定义错误页面，只需创建一个如前文所述的错误处理器，并返回一个包含错误页面内容的 `JSON` 响应。
- en: 'For instance, let’s take a look at the `JSON` response containing a custom
    error message in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一下以下代码中包含自定义错误消息的 `JSON` 响应：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code returns a `JSON` response containing an error message, along
    with the corresponding HTTP error codes, when a `404` error occurs. Let’s define
    the React frontend to handle the UI with an `ErrorPage` component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码在发生 `404` 错误时返回包含错误消息的 `JSON` 响应，以及相应的 HTTP 错误代码。让我们定义 React 前端以使用 `ErrorPage`
    组件处理 UI：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code shows the `ErrorPage` component that takes an error prop
    and displays it in the error message. You can use this component in your application
    to display the custom error page whenever an error occurs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码显示了 `ErrorPage` 组件，它接受一个错误属性并在错误消息中显示它。您可以在应用程序中使用此组件在发生错误时显示自定义错误页面。
- en: 'You can simply add the `ErrorPage` component to the rest of the application.
    For instance, use the following code to add the `ErrorPage` component to the `Speaker`
    component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以直接将 `ErrorPage` 组件添加到应用程序的其余部分。例如，使用以下代码将 `ErrorPage` 组件添加到 `Speaker` 组件：
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we will discuss how to track and log events in Flask web applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将讨论如何在 Flask 网络应用程序中跟踪和记录事件。
- en: Tracking events in your application
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的应用程序中跟踪事件
- en: Flask allows you to track events in your application in an elegant way. This
    is critical to identifying potential issues. By tracking events, you can get a
    better understanding of what is happening in your application and make informed
    decisions about how to improve the situation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 允许您以优雅的方式跟踪应用程序中的事件。这对于识别潜在问题至关重要。通过跟踪事件，您可以更好地了解应用程序中正在发生的事情，并就如何改善情况做出明智的决策。
- en: There are several ways to track events in Flask, including using built-in logging
    functionality, third-party logging services, or custom code tracking. For instance,
    you can use the Python `logging` module to log information about your application
    activities to a file or to the console.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flask 中跟踪事件有几种方法，包括使用内置的日志记录功能、第三方日志记录服务或自定义代码跟踪。例如，您可以使用 Python 的 `logging`
    模块将有关应用程序活动的信息记录到文件或控制台。
- en: 'Using the logging module is easy; simply import `logging` into your Flask application
    and configure it to log information at the appropriate level. For instance, the
    following code configures the logging module to log information to a file named
    `error.log`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用日志记录模块很简单；只需将 `logging` 导入到您的 Flask 应用程序中，并配置它以适当的级别记录信息。例如，以下代码配置了日志记录模块以将信息记录到名为
    `error.log` 的文件中：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code demonstrates the implementation of the logging module in
    a Flask web application. The code sets up a logger object using the `logging.getLogger(__name__)`
    method. The logger is set to the debug level with `logger.setLevel(logging.DEBUG)`.
    A `FileHandler` object is created with `file_handler = logging.FileHandler('error.log')`,
    and the handler is set to the debug level as well with `file_handler.setLevel(logging.DEBUG)`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码演示了在 Flask 网络应用程序中实现日志记录模块的方法。代码使用 `logging.getLogger(__name__)` 方法设置了一个日志记录器对象。日志记录器设置为调试级别，使用
    `logger.setLevel(logging.DEBUG)`。使用 `file_handler = logging.FileHandler('error.log')`
    创建了一个 `FileHandler` 对象，并将处理程序设置为调试级别，同样使用 `file_handler.setLevel(logging.DEBUG)`。
- en: The handler is added to the logger object with `logger.addHandler(file_handler)`.
    In the `logger()` function, there are four logging methods called `debug()`, `info()`,
    `warning()`, and `error()`. These methods log messages to the log file with the
    respective log levels (debug, info, warning, and error). The messages logged are
    simple string messages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `logger.addHandler(file_handler)` 将处理程序添加到日志记录器对象。在 `logger()` 函数中，调用了四个日志记录方法：`debug()`、`info()`、`warning()`
    和 `error()`。这些方法将消息记录到日志文件中，并带有相应的日志级别（调试、信息、警告和错误）。记录的消息是简单的字符串消息。
- en: Furthermore, when tracking events in Flask applications, you can use a third-party
    logging service. Using third-party logging services with Flask can provide more
    advanced logging features such as centralized log management, real-time log searching,
    and alerting.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在跟踪 Flask 应用程序中的事件时，您可以使用第三方日志记录服务。使用 Flask 与第三方日志记录服务结合可以提供更高级的日志记录功能，如集中式日志管理、实时日志搜索和警报。
- en: For instance, you can use cloud-based log management services such as **AWS
    CloudWatch**, **Loggly**, and **Papertrail**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用基于云的日志管理服务，如 **AWS CloudWatch**、**Loggly** 和 **Papertrail**。
- en: Let’s examine briefly the implementation of AWS CloudWatch. AWS CloudWatch is
    a logging service that provides log management and monitoring for AWS resources.
    To use AWS CloudWatch with Flask, you can use the **CloudWatch Logs** API to send
    log data directly to AWS CloudWatch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地考察一下 AWS CloudWatch 的实现。AWS CloudWatch 是一种日志服务，为 AWS 资源提供日志管理和监控。要使用 Flask
    与 AWS CloudWatch，你可以使用 **CloudWatch Logs** API 直接将日志数据发送到 AWS CloudWatch。
- en: 'The following steps implement logging in Flask applications using AWS CloudWatch:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤实现了使用 AWS CloudWatch 在 Flask 应用程序中进行日志记录：
- en: Set up an AWS account and create a **CloudWatch** **Log Group**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 AWS 账户并创建一个 **CloudWatch** **日志组**。
- en: Install the `boto3` library, which provides a Python interface to the AWS CloudWatch
    API. Install `Boto2` with `pip install boto3` and ensure your virtual environment
    is activated.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 `boto3` 库，它提供了对 AWS CloudWatch API 的 Python 接口。使用 `pip install boto3` 安装
    `Boto2` 并确保你的虚拟环境已激活。
- en: In your Flask application, import the `boto3` library and configure it with
    your AWS credentials.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的 Flask 应用程序中导入 `boto3` 库，并使用你的 AWS 凭据进行配置。
- en: Create a logger and set its log level to the desired level of verbosity.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个记录器并将其日志级别设置为所需的详细程度。
- en: In your application code, use the logger to log messages at various levels such
    as info, warning, error, and so on.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的应用程序代码中，使用记录器以各种级别（如 info、warning、error 等）记录消息。
- en: Configure the logger to send logs to AWS CloudWatch. This can be done by creating
    a custom handler that sends log messages to CloudWatch using the `boto3` library.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 配置记录器将日志发送到 AWS CloudWatch。这可以通过创建一个自定义处理程序来实现，该处理程序使用 `boto3` 库将日志消息发送到 CloudWatch。
- en: Deploy your Flask application and monitor your logs in AWS CloudWatch.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将你的 Flask 应用程序部署并监控 AWS CloudWatch 中的日志。
- en: 'Let’s explore the code implementation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看代码实现：
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The full source code can be found on GitHub.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 完整的源代码可以在 GitHub 上找到。
- en: 'The preceding code shows the implementation of how to use the `boto3` library
    to send logs from a Flask application to AWS CloudWatch. It works as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码展示了如何使用 `boto3` 库将 Flask 应用程序的日志发送到 AWS CloudWatch 的实现方式。它的工作原理如下：
- en: The `boto3` library is imported and a default session is set up with the specified
    `AWS access key ID`, `secret access key`, and `region name`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `boto3` 库并设置一个默认会话，指定 `AWS 访问密钥 ID`、`秘密访问密钥` 和 `区域名称`。
- en: A logger object is created using the `logging` module and the logging level
    is set to `DEBUG`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `logging` 模块创建一个记录器对象，并将日志级别设置为 `DEBUG`。
- en: A `CloudWatch` client object is created using the `boto3` library.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `boto3` 库创建一个 `CloudWatch` 客户端对象。
- en: A custom handler class named `CloudWatchHandler` is created that inherits from
    the `logging.Handler` class and overrides its `emit` method. In the `emit` method,
    the log message is formatted and sent to `AWS CloudWatch` using the `put_log_events`
    method of the `CloudWatch` client.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `CloudWatchHandler` 的自定义处理程序类，它继承自 `logging.Handler` 类并重写了其 `emit` 方法。在
    `emit` 方法中，将日志消息格式化并发送到 `AWS CloudWatch`，使用 `CloudWatch` 客户端的 `put_log_events`
    方法。
- en: An instance of the `CloudWatchHandler` class is created and its logging level
    is set to `DEBUG`. This handler is then added to the logger object.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `CloudWatchHandler` 类的实例，并将其日志级别设置为 `DEBUG`。然后将此处理程序添加到记录器对象。
- en: A route named `/logging_with_aws_cloudwatch` is created that generates log messages
    of different levels (`debug`, `info`, `warning`, and `error`) using the logger
    object.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `/logging_with_aws_cloudwatch` 的路由，该路由使用记录器对象生成不同级别（`debug`、`info`、`warning`
    和 `error`）的日志消息。
- en: Handling errors and tracking events in your Flask application is crucial to
    ensuring its reliability and robustness. With Flask’s built-in debugger, error
    handlers, custom error pages, logging, and third-party logging libraries, you
    can easily diagnose and resolve problems as they show up in Flask application
    development.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Flask 应用程序中处理错误和跟踪事件对于确保其可靠性和健壮性至关重要。有了 Flask 的内置调试器、错误处理器、自定义错误页面、日志记录和第三方日志库，你可以轻松诊断和解决在
    Flask 应用程序开发中出现的问题。
- en: Now that you are able to implement Flask’s built-in debugger, error handlers,
    custom error pages, logging, and third-party logging libraries, wouldn’t it be
    nice if you had the means for the admins to receive email messages about errors
    in your application logs in real time?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经能够实现 Flask 内置的调试器、错误处理器、自定义错误页面、日志记录和第三方日志库，如果管理员能够实时收到关于应用程序日志中错误的通知，那岂不是很好？
- en: Let’s work through how this can be implemented in Flask.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看如何在 Flask 中实现这一点。
- en: Sending error emails to administrators
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向管理员发送错误邮件
- en: Sending error emails to administrators provides an efficient way to notify them
    about errors and issues in your Flask application. This allows you to quickly
    identify and resolve problems before they escalate into bigger issues and negatively
    impact the user experience. The benefits include timely identification and resolution
    of errors, improved system reliability, and reduced downtime.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 向管理员发送错误邮件提供了一种高效的通知方式，让他们了解Flask应用程序中的错误和问题。这允许你在问题升级成更大问题并负面影响用户体验之前快速识别和解决问题。其好处包括及时识别和解决错误、提高系统可靠性和减少停机时间。
- en: 'Let’s delve into an example of sending error emails to administrators:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一个向管理员发送错误邮件的示例：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code demonstrates the implementation of sending error emails
    to notify administrators about errors in a Flask application. It works as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码展示了在Flask应用程序中发送错误邮件以通知管理员错误实现的示例。它的工作原理如下：
- en: The code uses the `smtplib` and `email.mime.text` libraries to create and send
    an email message.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该代码使用 `smtplib` 和 `email.mime.text` 库来创建和发送电子邮件消息。
- en: The `send_email(error)` function takes an error message as a parameter and creates
    an email message using the `MIMEText` object. The `subject`, `sender email address`,
    `recipient email address`, and `error message` are set for the email. The email
    is then sent using the `smtplib` library through the local email server.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`send_email(error)` 函数接受一个错误消息作为参数，并使用 `MIMEText` 对象创建一个电子邮件消息。邮件的主题、发件人电子邮件地址、收件人电子邮件地址和错误消息被设置为邮件内容。然后，通过本地邮件服务器使用
    `smtplib` 库发送邮件。'
- en: Flask’s `errorhandler` decorator is used to catch any `500` internal server
    errors that occur in the application. The `internal_server_error` function is
    called when an error `500` occurs, and it calls the `send_email` function with
    the error message passed as a parameter. The function returns a response to the
    user indicating that an error occurred and an email was sent to the administrator.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Flask的 `errorhandler` 装饰器用于捕获应用程序中发生的任何 `500` 内部服务器错误。当发生错误 `500` 时，会调用 `internal_server_error`
    函数，并使用错误消息作为参数调用 `send_email` 函数。该函数返回一个响应给用户，表明发生了错误，并向管理员发送了电子邮件。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Error handling has been an essential aspect of software development from time
    immemorial. It is crucial to ensure that your Flask web application can handle
    errors effectively. We discussed the Flask debugger, error handlers, and custom
    error pages. With these, you can provide meaningful feedback to users and help
    maintain the stability and reliability of your application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理自古以来就是软件开发的一个基本方面。确保你的Flask Web应用程序能够有效地处理错误至关重要。我们讨论了Flask调试器、错误处理程序和自定义错误页面。有了这些，你可以向用户提供有意义的反馈，并帮助维护应用程序的稳定性和可靠性。
- en: As full stack developers, we reinforced the importance of keeping in mind that
    error handling is a continuous process. You should regularly review and update
    your error-handling strategies to ensure that your application remains robust
    and resilient. We also considered logging errors and sending notifications to
    administrators so that you can quickly identify and resolve any issues that may
    arise.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全栈开发者，我们强调了持续关注错误处理的重要性。你应该定期审查和更新你的错误处理策略，以确保你的应用程序保持健壮和弹性。我们还考虑了记录错误并向管理员发送通知，以便你可以快速识别和解决可能出现的任何问题。
- en: In short, a bug-free development experience remains a mirage for any professional
    developer. You should be prepared to effectively handle expected and unexpected
    errors in your web applications. By doing so, your application will continue to
    deliver value to your users, even in the face of unexpected errors and failures.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，无bug的开发体验对于任何专业开发者来说都只是一个幻象。你应该准备好有效地处理你的Web应用程序中的预期和意外错误。通过这样做，即使面对意外错误和故障，你的应用程序也能继续为用户提供价值。
- en: Next, we will explore modular development in Flask using **Blueprints**. With
    Blueprints and modular architecture, you can easily maintain and scale your React-Flask
    web applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在Flask中使用 **Blueprints** 进行模块化开发。通过Blueprints和模块化架构，你可以轻松维护和扩展你的React-Flask
    Web应用程序。
