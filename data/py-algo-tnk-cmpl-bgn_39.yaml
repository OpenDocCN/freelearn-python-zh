- en: Chapter 27
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第27章
- en: More about Flowcharts with Loop Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于带有循环控制结构的流程图
- en: 27.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 27.1 简介
- en: By working through the previous chapters, you have become familiar with all
    the loop control structures. Since flowcharts are an ideal way to learn “Algorithmic
    Thinking” and to help you better understand specific control structures, this
    chapter will teach you how to convert a Python program to a flowchart as well
    as how to convert a flowchart to a Python program.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 通过学习前面的章节，你已经熟悉了所有的循环控制结构。由于流程图是学习“算法思维”和帮助你更好地理解特定控制结构的理想方式，本章将教你如何将Python程序转换为流程图，以及如何将流程图转换为Python程序。
- en: 27.2 Converting Python Programs to Flowcharts
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 27.2 将Python程序转换为流程图
- en: To convert a Python program to a flowchart, you need to recall all loop control
    structures and their corresponding flowcharts. Following you will find them all
    summarized.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 要将Python程序转换为流程图，你需要回忆所有循环控制结构及其相应的流程图。以下将总结它们。
- en: The Pre-Test Loop Structure
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 前测试循环结构
- en: 'while Boolean_Expression:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'while Boolean_Expression:'
- en: A statement or block of statements
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句
- en: '![Image](img/chapter24-01.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter24-01.png)'
- en: The Post-Test Loop Structure
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试后循环结构
- en: 'while True:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: A statement or block of statements
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句
- en: 'if Boolean_Expression: break'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression: break'
- en: '![Image](img/chapter24-04.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter24-04.png)'
- en: The Mid-Test Loop Structure
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 中间测试循环结构
- en: 'while True:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: A statement or block of statements 1
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 1
- en: 'if Boolean_Expression: break'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression: break'
- en: A statement or block of statements 2
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 2
- en: '![Image](img/chapter24-07.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter24-07.png)'
- en: The For-Loop
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: For循环
- en: 'for element in sequence:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in sequence:'
- en: A statement or block of statements
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句
- en: '![Image](img/chapter25-02.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter25-02.png)'
- en: Next, you will find many exercises that can clarify things that you might still
    need help understanding.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将找到许多练习，可以帮助你澄清你可能仍然需要帮助理解的事情。
- en: Exercise 27.2-1 Designing the Flowchart
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习27.2-1 设计流程图
- en: Design the flowchart that corresponds to the following Python program.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下Python程序相对应的流程图。
- en: i = 50
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: i = 50
- en: 'while i > 10:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i > 10:'
- en: 'if i % 2 == 1:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 2 == 1:'
- en: print(i)
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i)
- en: i -= 5
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 5
- en: Solution
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This Python program contains a pre-test loop structure which nests a single-alternative
    decision structure. The corresponding flowchart that follows includes what you
    have been taught so far.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序包含一个前测试循环结构，嵌套了一个单选择决策结构。相应的流程图包括你迄今为止所学的所有内容。
- en: '![Image](img/chapter27-01.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter27-01.png)'
- en: Exercise 27.2-2 Designing the Flowchart
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习27.2-2 设计流程图
- en: Design the flowchart that corresponds to the following code fragment.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下代码片段相对应的流程图。
- en: i = 30
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: i = 30
- en: 'while True:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: 'if i % 8 == 0:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 8 == 0:'
- en: print(i, "is a multiple of 8")
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i, "是8的倍数")
- en: 'if i % 4 == 0:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 4 == 0:'
- en: print(i, "is a multiple of 4")
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i, "是4的倍数")
- en: 'if i % 2 == 0:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 2 == 0:'
- en: print(i, "is a multiple of 2")
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i, "是2的倍数")
- en: i -= 2
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 2
- en: 'if i <= 0: break'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i <= 0: break'
- en: Solution
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This code fragment contains a post-test loop structure that nests three single-alternative
    decision structures. The corresponding flowchart fragment is as follows.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码片段包含一个后测试循环结构，嵌套了三个单选择决策结构。相应的流程图片段如下。
- en: '![Image](img/chapter27-02.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter27-02.png)'
- en: Exercise 27.2-3 Designing the Flowchart
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习27.2-3 设计流程图
- en: Design the flowchart that corresponds to the following Python program.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下Python程序相对应的流程图。
- en: 'for hour in range(1, 25):'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'for 小时 in range(1, 25):'
- en: print("Hour is", hour, ":00.")
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: print("小时是", 小时, ":00。")
- en: 'if hour >= 4 and hour < 12:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 小时 >= 4 且 小时 < 12:'
- en: print("Good Morning")
  id: totrans-56
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("早上好")
- en: 'elif hour >= 12 and hour < 20:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 小时 >= 12 且 小时 < 20:'
- en: print("Good Afternoon")
  id: totrans-58
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("下午好")
- en: 'elif hour >= 20 and hour < 24:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 小时 >= 20 且 小时 < 24:'
- en: print("Good Evening")
  id: totrans-60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("晚上好")
- en: 'else:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Good Night")
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("晚上好")
- en: Solution
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This Python program contains a for-loop that nests a multiple-alternative decision
    structure. The corresponding flowchart is as follows.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Python程序包含一个for循环，嵌套了多重选择决策结构。相应的流程图如下。
- en: '![Image](img/chapter27-03.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter27-03.png)'
- en: Exercise 27.2-4 Designing the Flowchart
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习27.2-4 设计流程图
- en: Design the flowchart that corresponds to the following Python program.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下Python程序相对应的流程图。
- en: a = int(input())
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a == 1:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == 1:'
- en: 'for i in range(1, 11, 2):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 11, 2):'
- en: print(i)
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i)
- en: 'elif a == 2:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 2:'
- en: 'for i in range(9, -1, -2):'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(9, -1, -2):'
- en: print(i)
  id: totrans-74
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i)
- en: 'else:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("nothing to do!")
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: print("没有事情要做！")
- en: print("The End!")
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: print("结束！")
- en: Solution
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This Python program contains a multiple-alternative decision structure that
    nests two for-loops. The corresponding flowchart is as follows.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Python 程序包含一个嵌套两个 for 循环的多分支决策结构。相应的流程图如下。
- en: '![Image](img/chapter27-04.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter27-04.png)'
- en: Exercise 27.2-5 Designing the Flowchart
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 27.2-5 设计流程图
- en: Design the flowchart that corresponds to the following Python program.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 设计与以下 Python 程序相对应的流程图。
- en: n = int(input())
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: n = int(input())
- en: m = int(input())
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: m = int(input())
- en: total = 0
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(n):'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(n):'
- en: 'for j in range(m):'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(m):'
- en: total += i * j + j
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += i * j + j
- en: print(total)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Solution
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This Python program contains nested loop control structures; a for-loop nested
    within another for-loop. The corresponding flowchart is as follows.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此 Python 程序包含嵌套的循环控制结构；一个 for 循环嵌套在另一个 for 循环中。相应的流程图如下。
- en: '![Image](img/chapter27-05.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter27-05.png)'
- en: 27.3 Converting Flowcharts to Python Programs
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 27.3 将流程图转换为 Python 程序
- en: This conversion is not always an easy one. There are cases in which the flowchart
    designers follow no particular rules, so the initial flowchart may need some modifications
    before it can be converted into a Python program. The following is an example
    of one such case.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种转换并不总是容易的。有些情况下，流程图设计者没有遵循特定的规则，因此初始流程图可能需要一些修改，才能将其转换为 Python 程序。以下是一个这样的例子。
- en: .![Image](img/chapter26-02.png)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter26-02.png)'
- en: As you can see, the loop control structures included in this flowchart fragment
    match none of the structures that you have already learned, such the pre-test,
    the post-test, the mid-test, or even the for-loop control structure. Thus, you
    have only one choice and this is to modify the flowchart by adding extra statements
    or removing existing ones until known loop control structures start to appear.
    Below are some exercises, and in some of them, the initial flowchart does need
    modification.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，此流程图片段中包含的循环控制结构与您已经学习过的任何结构都不匹配，例如预测试、后测试、中测试，甚至是 for 循环控制结构。因此，您只有一个选择，那就是通过添加额外的语句或删除现有的语句来修改流程图，直到出现已知的循环控制结构。以下是一些练习，其中一些练习的初始流程图确实需要修改。
- en: Exercise 27.3-1 Writing the Python Program
  id: totrans-97
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 27.3-1 编写 Python 程序
- en: Write the Python program that corresponds to the following flowchart fragment.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图片段相对应的 Python 程序。
- en: .![Image](img/chapter27-06.png)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter27-06.png)
- en: Solution
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This is an easy one. The only obstacle you have to overcome is that the true
    and false paths are not quite in the right position. You need the true and not
    the false path to actually iterate. As you already know, it is possible to switch
    the two paths but you need to negate the Boolean expression as well. Thus, the
    corresponding code fragment becomes
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的例子。你必须克服的唯一障碍是，真和假的路径并不完全在正确的位置。你需要真路径而不是假路径来实际迭代。正如你所知道的那样，你可以切换这两个路径，但你还需要否定布尔表达式。因此，相应的代码片段变为
- en: i = 0
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: 'while i <= 90:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 90:'
- en: print(i)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: i = i + 2
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: i = i + 2
- en: print("The End")
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: print("The End")
- en: Using a for-loop, this code fragment can equivalently be written as
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 for 循环，此代码片段可以等价地写成
- en: 'for i in range(0, 92, 2):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(0, 92, 2):'
- en: print(i)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: print("The End")
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: print("The End")
- en: Exercise 27.3-2 Writing the Python Program
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 27.3-2 编写 Python 程序
- en: Write the Python program that corresponds to the following flowchart.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图相对应的 Python 程序。
- en: '![Image](img/chapter27-07.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter27-07.png)'
- en: Solution
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This flowchart contains a post-test loop structure that nests a dual-alternative
    decision structure. The Python program is as follows.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此流程图包含一个后测试循环结构，嵌套一个双分支决策结构。相应的 Python 程序如下。
- en: i = 1
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while True:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: if i < 45:     [[More…]](more.html#more_27_3_2_1)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: if i < 45:     [[更多…]](more.html#more_27_3_2_1)
- en: print(i)
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i)
- en: 'else:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(-i)
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(-i)
- en: i += 1
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'if i >= 90: break'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i >= 90: break'
- en: print("The End")
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: print("The End")
- en: Exercise 27.3-3 Writing the Python Program
  id: totrans-125
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 27.3-3 编写 Python 程序
- en: Write the Python program that corresponds to the following flowchart.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图相对应的 Python 程序。
- en: '![Image](img/chapter27-08.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter27-08.png)'
- en: Solution
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Oops! What a mess! There are so many diamonds here! Be careful, though, as not
    all of them are decision control structures. In fact, two of them are loop control
    structures, and only one represents a decision control structure! Can you spot
    the latter?
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀！真乱！这里这么多菱形！不过，要小心，因为并非所有这些都是决策控制结构。实际上，有两个是循环控制结构，只有一个代表决策控制结构！你能找到后者吗？
- en: You should be quite familiar with loop control structures so far. As you already
    know, in loop control structures, one of the diamond's (rhombus's) exits always
    has an upward direction. Thus, the following flowchart fragment, extracted from
    the initial one, is obviously the decision control structure that you are looking
    for.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该已经非常熟悉循环控制结构了。正如你所知，在循环控制结构中，菱形（菱形）的一个出口总是向上方向。因此，从初始流程图中提取的以下流程图片段显然是你正在寻找的决策控制结构。
- en: .![Image](img/chapter27-09.png)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: .![图像](img/chapter27-09.png)
- en: And of course, it's a dual-alternative decision structure!
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这是一个双分支决策结构！
- en: Now, let's identify the rest of the structures. Right before the dual-alternative
    decision structure, there is a post-test loop structure. Its flowchart fragment
    is as follows.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们识别其余的结构。在双分支决策结构之前，有一个后测试循环结构。其流程图片段如下。
- en: .![Image](img/chapter27-10.png)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: .![图像](img/chapter27-10.png)
- en: And finally, both the dual-alternative decision structure and the post-test
    loop structure, mentioned before, are nested within the next flowchart fragment,
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，前面提到的双分支决策结构和后测试循环结构都嵌套在下一个流程图片段中，
- en: .![Image](img/chapter27-11.png)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: .![图像](img/chapter27-11.png)
- en: which happens to be a pre-test loop structure. The corresponding Python program
    is as follows.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这恰好是一个预测试循环结构。相应的Python程序如下。
- en: s = 0
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: i = 0
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: 'while i <= 99:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 99:'
- en: while True:           [[More…]](more.html#more_27_3_3_1)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: while True:           [[更多…]](more.html#more_27_3_3_1)
- en: n = float(input())
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n = float(input())
- en: 'if n >= 0: break'
  id: totrans-143
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if n >= 0: break'
- en: if n < 100:        [[More…]](more.html#more_27_3_3_2)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: if n < 100:        [[更多…]](more.html#more_27_3_3_2)
- en: s = s + n ** 2
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + n ** 2
- en: 'else:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: s = s + n ** 3
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + n ** 3
- en: i += 1
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(s)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: Or, you can even write it using a for-loop, as shown in the code that follows.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你甚至可以使用for循环来编写它，如下面的代码所示。
- en: s = 0
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(100):'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(100):'
- en: 'while True:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: n = float(input())
  id: totrans-154
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n = float(input())
- en: 'if n >= 0: break'
  id: totrans-155
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if n >= 0: break'
- en: 'if n < 100:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'if n < 100:'
- en: s = s + n ** 2
  id: totrans-157
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + n ** 2
- en: 'else:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: s = s + n ** 3
  id: totrans-159
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + n ** 3
- en: print(s)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: Wasn't so difficult after all, was it?
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 毕竟，并没有那么困难，对吧？
- en: Exercise 27.3-4 Writing the Python Program
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习27.3-4 编写Python程序
- en: Write the Python program that corresponds to the following flowchart.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 编写与以下流程图相对应的Python程序。
- en: '![Image](img/chapter27-12.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter27-12.png)'
- en: Solution
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: This is a mid-test loop structure. Since there is no direct Python statement
    for this structure, you can use the break statement—or you can even convert the
    flowchart to something more familiar as shown in the next two approaches
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个中间测试循环结构。由于没有直接对应的Python语句，你可以使用break语句——或者你可以将流程图转换为更熟悉的形式，如以下两种方法所示。
- en: First approach – Using the break statement
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 使用break语句
- en: The main idea is to create an endless loop (while True) and break out of it
    when the Boolean expression that exists between the two statements or blocks of
    statements evaluates to True (see [Section 24.3](chapter24.html#toc_17)).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是创建一个无限循环（while True），当两个语句或语句块之间的布尔表达式评估为真时退出循环（参见[第24.3节](chapter24.html#toc_17)）。
- en: According to this approach, the initial flowchart can be written in Python as
    follows.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这种方法，初始流程图可以用Python编写如下。
- en: i = 1
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: S = 0
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: S = 0
- en: 'while True:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: a = float(input())     [[More…]](more.html#more_27_3_4_1)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())     [[更多…]](more.html#more_27_3_4_1)
- en: i += 1
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'if i >= 90: break'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i >= 90: break'
- en: S = S + a * i     [[More…]](more.html#more_27_3_4_2)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: S = S + a * i     [[更多…]](more.html#more_27_3_4_2)
- en: print(S)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: print(S)
- en: '![](img/notice.jpg)Keep in mind that even though the break statement can sometimes
    be useful, it may also lead you to write code that is difficult to read and understand,
    especially when you make extensive use of it. So, please use it cautiously and
    sparingly!'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)请记住，尽管break语句有时可能很有用，但它也可能导致你编写难以阅读和理解的代码，尤其是在你大量使用它的时候。因此，请谨慎并适度地使用它！'
- en: Second approach – Converting the flowchart
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 – 转换流程图
- en: The mid-test loop structure and its equivalent, using a pre-test loop structure,
    are as follows.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 中间测试循环结构和其等价的预测试循环结构如下。
- en: '![Image](img/chapter27-13.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter27-13.png)'
- en: Accordingly, the initial flowchart becomes
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，初始流程图变为
- en: '![Image](img/chapter27-14.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter27-14.png)'
- en: Now, it's easy to write the corresponding Python program.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编写相应的Python程序很容易。
- en: i = 1
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: S = 0
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: S = 0
- en: a = float(input())     [[More…]](more.html#more_27_3_4_3)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())     [[更多…]](more.html#more_27_3_4_3)
- en: i += 1
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'while i < 90:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 90:'
- en: S = S + a * i     [[More…]](more.html#more_27_3_4_4)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: S = S + a * i     [[更多…]](more.html#more_27_3_4_4)
- en: a = float(input())     [[More…]](more.html#more_27_3_4_5)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())     [[更多…]](more.html#more_27_3_4_5)
- en: i += 1
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(S)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: print(S)
- en: 27.4 Review Exercises
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 27.4 复习练习
- en: Complete the following exercises.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Design the flowchart that corresponds to the following Python program.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 1)设计与以下Python程序对应的流程图。
- en: i = 35
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: i = 35
- en: 'while i > -35:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i > -35:'
- en: 'if i % 2 == 0:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 2 == 0:'
- en: print(2 * i)
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(2 * i)
- en: 'else:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(3 * i)
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(3 * i)
- en: i -= 1
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: i -= 1
- en: 2)Design the flowchart that corresponds to the following Python program.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 2)设计与以下Python程序对应的流程图。
- en: i = -20
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: i = -20
- en: 'while True:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: x = int(input())
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: 'if x == 0:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == 0:'
- en: print("Zero")
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Zero")
- en: 'elif x % 2 == 0:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x % 2 == 0:'
- en: print(2 * i)
  id: totrans-211
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(2 * i)
- en: 'else:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(3 * i)
  id: totrans-213
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(3 * i)
- en: i += 1
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: 'if i > 20: break'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i > 20: break'
- en: 3)Design the flowchart that corresponds to the following Python program.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 3)设计与以下Python程序对应的流程图。
- en: a = int(input())
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a > 0:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 0:'
- en: i = 0
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: 'while i <= a:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= a:'
- en: print(i)
  id: totrans-221
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i)
- en: i += 5
  id: totrans-222
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: i += 5
- en: 'else:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Non-Positive Entered!")
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: print("Non-Positive Entered!")
- en: 4)Design the flowchart that corresponds to the following Python program.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 4)设计与以下Python程序对应的流程图。
- en: a = int(input())
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a > 0:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 0:'
- en: i = 0
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: i = 0
- en: 'while i <= a:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= a:'
- en: print(3 * i + i / 2)
  id: totrans-230
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(3 * i + i / 2)
- en: i += 1
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: i += 1
- en: 'else:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: i = 10
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: i = 10
- en: 'while True:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: print(2 * i - i / 3)
  id: totrans-235
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(2 * i - i / 3)
- en: i -= 3
  id: totrans-236
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: i -= 3
- en: 'if i < a: break'
  id: totrans-237
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if i < a: break'
- en: 5)Design the flowchart that corresponds to the following Python program.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 5)设计与以下Python程序对应的流程图。
- en: a = int(input())
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a > 0:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 0:'
- en: 'for i in range(a + 1):'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(a + 1):'
- en: print(3 * i + i / 2)
  id: totrans-242
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(3 * i + i / 2)
- en: 'elif a == 0:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 0:'
- en: b = int(input())
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'while b > 0:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 'while b > 0:'
- en: b = int(input())
  id: totrans-246
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b = int(input())
- en: print(2 * a + b)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: print(2 * a + b)
- en: 'else:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: b = int(input())
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'while b < 0:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'while b < 0:'
- en: b = int(input())
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'for i in range(a, b + 1):'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(a, b + 1):'
- en: print(i)
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i)
- en: 6)Design the flowchart that corresponds to the following Python program.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 6)设计与以下Python程序对应的流程图。
- en: a = int(input())
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: c = int(input())
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: c = int(input())
- en: d = int(input())
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: d = int(input())
- en: total = 0
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(a, b):'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(a, b):'
- en: 'for j in range(c, d + 1, 2):'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(c, d + 1, 2):'
- en: total += i + j
  id: totrans-262
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += i + j
- en: print(total)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: 7)Design the flowchart that corresponds to the following code fragment.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 7)设计与以下代码片段对应的流程图。
- en: s = 0
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(100):'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(100):'
- en: n = float(input())
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: n = float(input())
- en: 'while n < 0:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 'while n < 0:'
- en: print("Error")
  id: totrans-269
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Error")
- en: n = float(input())
  id: totrans-270
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n = float(input())
- en: s += sqrt(n)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: s += sqrt(n)
- en: print(s)
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 8)Design the flowchart that corresponds to the following Python program.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 8)设计与以下Python程序对应的流程图。
- en: from math import sqrt
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: from math import sqrt
- en: s = 0
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(1, 51):'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 51):'
- en: 'while True:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: n = int(input())
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n = int(input())
- en: 'if n >= 0: break'
  id: totrans-279
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if n >= 0: break'
- en: s += sqrt(n)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: s += sqrt(n)
- en: print(s)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 9)Design the flowchart that corresponds to the following Python program.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 9)设计与以下Python程序对应的流程图。
- en: 'while True:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: 'while True:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: a = int(input())
  id: totrans-285
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a >= 0: break'
  id: totrans-286
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a >= 0: break'
- en: 'while True:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: b = int(input())
  id: totrans-288
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'if b >= 0: break'
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if b >= 0: break'
- en: print(abs(a - b))
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: print(abs(a - b))
- en: 'if abs(a − b) <= 100: break'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 'if abs(a − b) <= 100: break'
- en: 10)Design the flowchart that corresponds to the following Python program.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 10)设计与以下Python程序对应的流程图。
- en: 'while True:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: 'while True:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: a = int(input())
  id: totrans-295
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-296
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'if a >= 0 and b >= 0: break'
  id: totrans-297
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if a >= 0 and b >= 0: break'
- en: 'if a > b:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > b:'
- en: print(a - b)
  id: totrans-299
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a - b)
- en: 'else:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(a * b)
  id: totrans-301
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a * b)
- en: 'if abs(a − b) <= 100: break'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 'if abs(a − b) <= 100: break'
- en: 11)Write the Python program that corresponds to the following flowchart.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 11)编写与以下流程图对应的Python程序。
- en: .![Image](img/chapter27-15.png)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter27-15.png)
- en: 12)Write the Python program that corresponds to the following flowchart.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 12)编写与以下流程图对应的Python程序。
- en: '![Image](img/chapter27-16.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter27-16.png)'
- en: 13)Write the Python program that corresponds to the following flowchart.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 13)编写与以下流程图对应的Python程序。
- en: '![Image](img/chapter27-17.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter27-17.png)'
