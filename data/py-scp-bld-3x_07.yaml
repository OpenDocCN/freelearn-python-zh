- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: The Animation System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画系统
- en: 3D owes much of its popularity to the production of animated content. Its many
    advantages in terms of performance, quality, and scalability made it ubiquitous
    in motion pictures, cartoons, feature animation, and video games. With that comes
    the need for custom tools to ease animation-related tasks.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 3D的流行很大程度上归功于动画内容的制作。它在性能、质量和可扩展性方面的许多优势使其在电影、卡通、特技动画和视频游戏中无处不在。这随之而来的是需要定制工具来简化与动画相关的任务。
- en: 'Most applications handle animation similarly, in part inherited from hand-drawn
    workflows: a sequence is broken into frames, whose rapid succession creates the
    illusion of motion.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用程序以类似的方式处理动画，部分原因是从手绘工作流程中继承而来：一个序列被分解成帧，这些帧的快速连续出现产生了运动的错觉。
- en: A programmer working in 3D will have to account for animated values changing
    over time, and how such data is stored.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在3D领域工作的程序员必须考虑到动画值随时间变化，以及这些数据是如何存储的。
- en: That might change in the future, but at the time of writing, animation involves
    a huge amount of manual work, leaving much room for automation.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能在将来改变，但在撰写本文时，动画涉及大量的手动工作，为自动化留下了很大的空间。
- en: In this chapter, you will get acquainted with the Blender animation process,
    learn how to access animation data in Python, and build one tool that sets the
    playback range and another that animates objects.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将熟悉Blender的动画过程，学习如何在Python中访问动画数据，并构建一个设置播放范围的工具以及一个使对象动画化的工具。
- en: 'This chapter will cover the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the animation system
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解动画系统
- en: Changing the playback settings
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改播放设置
- en: Creating animations with Python
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python创建动画
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will use Blender and Visual Studio Code in this chapter. The examples created
    in this chapter can be found at [https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch7](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch7).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Blender和Visual Studio Code。本章创建的示例可以在[https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch7](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch7)找到。
- en: Understanding the animation system
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解动画系统
- en: 'While animations consist of a sequence of frames, only one frame is displayed
    on the screen at one time. Animators can scroll through these frames and play
    their animation like a video:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然动画由一系列帧组成，但屏幕上一次只显示一帧。动画师可以滚动这些帧，像播放视频一样播放他们的动画：
- en: '![Figure 7.1: Playing an animation in Blender](img/Figure_7.01_B18375.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1：在Blender中播放动画](img/Figure_7.01_B18375.jpg)'
- en: 'Figure 7.1: Playing an animation in Blender'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1：在Blender中播放动画
- en: The animation **Timeline**, at the bottom of the screen in the **Layout** workspace,
    controls and displays the current frame and the start/end of the sequence. It
    provides immediate visual feedback and is essential to animation.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在**布局**工作空间屏幕底部，动画**时间轴**控制并显示当前帧以及序列的开始/结束。它提供即时视觉反馈，对于动画至关重要。
- en: Timeline and Current Frame
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 时间轴和当前帧
- en: 'A **Timeline** is a Blender area for playing animations and changing the playback
    settings. It is marked with a clock icon and, because of its importance, is in
    more than one workspace: **Animation**, **Layout**, **Rendering**, and **Compositing**
    display a timeline.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**时间轴**是Blender中播放动画和更改播放设置的区域。它带有时钟图标，由于其重要性，它存在于多个工作空间中：**动画**、**布局**、**渲染**和**合成**都显示时间轴。'
- en: 'In addition to the frame **Start** and **End** values, there is a slider for
    the **Current Frame** area and a button bar with **Media Controls**:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帧的**开始**和**结束**值之外，还有一个用于**当前帧**区域的滑块和一个带有**媒体控制**按钮栏：
- en: '![Figure 7.2: Blender’s animation Timeline](img/Figure_7.02_B18375.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![图7.2：Blender的动画时间轴](img/Figure_7.02_B18375.jpg)'
- en: 'Figure 7.2: Blender’s animation Timeline'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.2：Blender的动画时间轴
- en: Besides frame range and controls, the timeline displays the **keyframes** –
    that is, frames that contain changes in the object properties.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 除了帧范围和控制之外，时间轴还显示**关键帧**——即包含对象属性变化的帧。
- en: The frame range information, which is relevant to other tasks, such as **Rendering**,
    is an attribute of the scene that can be also set in the scene properties.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 帧范围信息，这对于其他任务（如**渲染**）也相关，是场景的一个属性，也可以在场景属性中设置。
- en: Duration and Frame Rate
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 持续时间和帧率
- en: The duration of the current scene can be set in the **Format** and **Frame Range**
    panels in the **Output** properties, the second tab starting from above, marked
    with a printer icon.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当前场景的时长可以在**输出**属性的**格式**和**帧范围**面板中设置，从上面的第二个标签开始，带有打印机图标。
- en: One scene, four tabs!
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 一个场景，四个标签页！
- en: There are so many scene properties that they span the first four tabs. It can
    be confusing because all of them read **Scene** in their headers.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 场景属性如此之多，以至于它们跨越了前四个标签页。这可能会令人困惑，因为它们的所有标题都读作**场景**。
- en: 'These four categories are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这四个类别如下：
- en: '- **Render**, marked with a TV icon'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '- **渲染**，带有电视图标'
- en: '- **Output**, with a printer icon'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '- **输出**，带有打印机图标'
- en: '- **View Layers**, whose icon is a stack of pictures'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '- **视图层**，其图标是一堆图片'
- en: '- **Scene**, whose icon represents a cone and a sphere'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '- **场景**，其图标代表一个圆锥体和一个球体'
- en: Only the **Output** properties contain animation-related settings.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 只有**输出**属性包含与动画相关的设置。
- en: The **Frame Rate** property displays how many frames are contained in 1 second
    of animation and is also known as **frames per** **second** (**FPS**).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**帧率**属性显示动画每秒包含多少帧，也称为**每秒帧数**（**FPS**）。'
- en: 'The default value is `24 FPS`, the historical rate for feature films. Because
    of the frequency of the power grid, footage for American TV is usually shot at
    `30` FPS, while European TVs use `25` FPS. Motion capture or video game animations
    may have higher rates, such as `60` FPS:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 默认值是`24 FPS`，这是历史上有声电影的速率。由于电网的频率，美国电视的素材通常以`30` FPS拍摄，而欧洲电视使用`25` FPS。动作捕捉或视频游戏动画可能有更高的速率，例如`60`
    FPS：
- en: '![Figure 7.3: Scene range attributes](img/Figure_7.03_B18375.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图7.3：场景范围属性](img/Figure_7.03_B18375.jpg)'
- en: 'Figure 7.3: Scene range attributes'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.3：场景范围属性
- en: Raising the **Frame Rate** value makes the animation play more frames per second,
    so it shortens the playback duration as more frames are spent in less time.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 提高**帧率**值会使动画每秒播放更多帧，因此缩短了播放时长，因为更多的帧在更少的时间内完成。
- en: 'While the graphic interface allows the animator to either pick a frame rate
    from a list of presets or display an additional property for custom values, in
    Python, `fps` is a numeric attribute of the `scene.render` properties:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然图形界面允许动画师从预设列表中选择帧率或显示自定义值的附加属性，但在Python中，`fps`是`scene.render`属性的一个数值属性：
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By default, the first frame of a scene, `1` while the last frame, `250`. These
    values are arbitrary and are changed to the planned duration of a specific shot.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，场景的第一帧是`1`，而最后一帧是`250`。这些值是任意的，并且会根据特定镜头的计划时长进行更改。
- en: 'The first and last frame of the scene can be accessed in Python as scene attributes:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 场景的第一帧和最后一帧可以通过Python作为场景属性访问：
- en: '[PRE1]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`1`. It can be increased so that not all frames are rendered, a feature used
    by render managers to test the overall state of a sequence:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`。它可以增加，以便不是所有帧都被渲染，这是渲染管理器用来测试序列整体状态的功能：'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: While the start, end, and step of the sequence are available in the **Output**
    properties as well, the **current frame** and the **preview range** are displayed
    only in the **Timeline** view.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然序列的开始、结束和步长在**输出**属性中也是可用的，但**当前帧**和**预览范围**仅在**时间轴**视图中显示。
- en: Current frame and preview range
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 当前帧和预览范围
- en: 'Like `frame_start`, `frame_end`, and `frame_step`, the current frame is exposed
    as a Python attribute of the scene:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与`frame_start`、`frame_end`和`frame_step`一样，当前帧作为场景的Python属性公开：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the **Timeline** view, the button with a stopwatch icon on the left of **Start**/**End**
    toggles the preview range. It displays an alternate range, different from the
    render settings:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在**时间轴**视图中，位于**开始**/**结束**左侧带有计时器图标按钮切换预览范围。它显示一个不同的范围，与渲染设置不同：
- en: '![Figure 7.4: Enabling the preview range in the Timeline view](img/Figure_7.04_B18375.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图7.4：在时间轴视图中启用预览范围](img/Figure_7.04_B18375.jpg)'
- en: 'Figure 7.4: Enabling the preview range in the Timeline view'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.4：在时间轴视图中启用预览范围
- en: The region outside the preview range is marked in dark orange. Animators turn
    on the preview range to restrict the playback when they are working on a part
    of their assigned sequence.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 预览范围之外的区域用深橙色标记。动画师在处理分配序列的一部分时，会打开预览范围以限制播放。
- en: 'In Python, we can access `frame_preview_start` and `frame_preview_end` like
    so:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以这样访问`frame_preview_start`和`frame_preview_end`：
- en: '[PRE4]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: All the frames between `start` and `end` make the animated sequence, but not
    all frames must store information. Those that do are the keyframes of the animation.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`start`和`end`之间的所有帧构成了动画序列，但并非所有帧都必须存储信息。那些存储信息的帧是动画的关键帧。
- en: Animation keyframes
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画关键帧
- en: The position of objects at a certain moment is stored as **keyframes**. In this
    section, we will provide a brief overview of how keyframes are created and retrieved
    in the user interface, as well as with Python instructions.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在某一时刻物体的位置被存储为**关键帧**。在本节中，我们将简要介绍如何在用户界面以及使用Python指令创建和检索关键帧。
- en: Adding keyframes in Blender
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Blender中添加关键帧
- en: 'There are at least two ways to set keyframes in Blender:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在Blender中设置关键帧至少有两种方式：
- en: Right-click on a property, then click on **Insert Keyframe(s)** from the context
    menu
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右键单击一个属性，然后在上下文菜单中点击**插入关键帧(s)**。
- en: Press **I** in the Viewport to display the **Insert Keyframe Menu** area and
    select a property to animate
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在视图中按**I**显示**插入关键帧菜单**区域并选择要动画化的属性
- en: We can make changes and insert keyframes at different times to create an animation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在不同的时间进行更改和插入关键帧来创建动画。
- en: Animating objects
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画对象
- en: 'To get more familiar with animations, we can open Blender and add keyframes
    for the location of the default cube:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更熟悉动画，我们可以打开Blender并为默认立方体的位置添加关键帧：
- en: Open Blender and select an object. If there are none in the scene, we can use
    **Add** | **Mesh** | **Cube** from the top menu.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Blender并选择一个对象。如果场景中没有对象，我们可以从顶部菜单使用**添加** | **网格** | **立方体**。
- en: Press the *N* key to display the properties of the active object.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*N*键显示活动对象的属性。
- en: Right-click on any of the **Location** attributes.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击任何**位置**属性。
- en: Select **Insert Keyframes**.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**插入关键帧**。
- en: 'However, one keyframe is not enough to make the cube move on the screen. To
    create a proper animation, we need to do the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一个关键帧不足以让立方体在屏幕上移动。要创建合适的动画，我们需要做以下事情：
- en: Set a new value for the `24`.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`24`设置一个新值。
- en: Move the cube to a new location by pressing the *G* key and panning the mouse.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按下*G*键并将鼠标滚轮移动到新位置以移动立方体。
- en: Confirm the new position by left-clicking or pressing the *Enter* key.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过左键单击或按*Enter*键确认新位置。
- en: Press `I` to insert a **Location** keyframe.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按`I`插入一个**位置**关键帧。
- en: We can play our animation by pressing the *spacebar* or clicking the **Play**
    button. In some instances, we might want to restrict the frame range to watch
    our animation in loops. We can set the sequence’s **Start** and **End** manually,
    or we can write an add-on that sets them for us.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过按空格键或点击**播放**按钮来播放我们的动画。在某些情况下，我们可能想要限制帧范围以循环观看我们的动画。我们可以手动设置序列的**开始**和**结束**，或者我们可以编写一个插件为我们设置它们。
- en: Writing the Action to Range add-on
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写动作到范围插件
- en: Animators set the first and last frames of the scene according to the duration
    of the shot. If there are animated objects, this add-on can set the playback range
    automatically.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 动画师根据镜头的持续时间设置场景的第一帧和最后一帧。如果有动画对象，此插件可以自动设置播放范围。
- en: This operator will allow you to choose between the render and preview range.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此操作符将允许您在渲染和预览范围之间进行选择。
- en: Setting the environment
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: Let’s create a folder for this chapter in our project. Then, in the `ch7` folder
    as our **Scripts Folder**. We must restart Blender to update its search paths.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在项目中为这一章节创建一个文件夹。然后，在`ch7`文件夹中作为我们的**脚本文件夹**。我们必须重新启动Blender以更新其搜索路径。
- en: 'Our add-on contains an operator, like the ones from [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049),
    and [*Chapter 4*](B18375_04.xhtml#_idTextAnchor075):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的插件包含一个操作符，就像[第3章](B18375_03.xhtml#_idTextAnchor049)和[第4章](B18375_04.xhtml#_idTextAnchor075)中的那些：
- en: Select `PythonScriptingBlender/ch7/addons`.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`PythonScriptingBlender/ch7/addons`。
- en: Create a new file by clicking the **New** **File** icon.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**新建** **文件**图标创建一个新文件。
- en: Name the new file `action_to_range.py`.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为`action_to_range.py`。
- en: Open the file by double-clicking it.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击文件以打开它。
- en: We can now start writing our first animation add-on.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始编写我们的第一个动画插件。
- en: Writing the Action to Range information
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写动作到范围信息
- en: 'The operator will be invoked from the **View** menu of the **Timeline** view,
    as reported in the location information:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符将从**时间轴**视图的**视图**菜单中调用，如位置信息中所述：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The next steps are as follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步操作如下：
- en: Writing the operator.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写操作符。
- en: Writing its menu entry.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写其菜单条目。
- en: Registering the classes and user interface.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册类和用户界面。
- en: Let’s start with the operator class and its information.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从操作符类及其信息开始。
- en: Writing the Action to Range operator
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写动作到范围操作符
- en: 'As usual, the `ActionToSceneRange` operator derives from `bpy.types.Operator`
    and starts with the `bl_*` identifiers:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，`ActionToSceneRange`操作符从`bpy.types.Operator`派生，并以`bl_*`标识符开始：
- en: '[PRE6]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As noted in the *Understanding the animation system* section, there are two
    frame range settings in the scene: the main one affects the scene render, while
    the preview range only affects the Viewport playback.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如同在*理解动画系统*部分中提到的，场景中有两个帧范围设置：主范围影响场景渲染，而预览范围仅影响视口播放。
- en: 'We want a parameter to switch between the two. We will use a `BooleanProperty`
    so that we can affect either the main or preview range:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个参数在两个之间切换。我们将使用`BooleanProperty`，这样我们就可以影响主范围或预览范围：
- en: '[PRE7]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: That’s all for the static part of the operator. Adding a `poll` and an `execute`
    method will allow the operator to run.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是操作符静态部分的全部内容。添加`poll`和`execute`方法将允许操作符运行。
- en: Writing the operator methods
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写操作符方法
- en: As we learned in [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049), the `poll`
    method returns `False` when the conditions for running the operator are not met;
    it’s `True` otherwise. We need to determine the operator requirements and put
    them in Python form.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在[*第3章*](B18375_03.xhtml#_idTextAnchor049)中学到的，当操作符运行的条件不满足时，`poll`方法返回`False`；否则返回`True`。我们需要确定操作符的要求并将它们以Python形式表示。
- en: Checking the requirements in the poll() method
  id: totrans-105
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在`poll()`方法中检查要求
- en: 'To get the range of the active animation, we must verify the following conditions:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获取活动动画的范围，我们必须验证以下条件：
- en: There should be an active object
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 必须有一个活动对象
- en: The active object must be animated
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动对象必须是动画化的
- en: When an object is animated, its keyframes are grouped into an **action**, which,
    in turn, becomes the active action in the object’s **animation data**.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个对象被动画化时，其关键帧被分组到一个**动作**中，这个动作反过来又成为对象**动画数据**中的活动动作。
- en: 'We will explore these entities in more depth in the next section, *Accessing
    animation data in Python*. For now, we can just test their existence in the following
    code:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节更深入地探讨这些实体，*在Python中访问动画数据*。现在，我们可以在以下代码中测试它们的存在：
- en: '[PRE8]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When any of the `not` conditions are met, the operator is grayed out in the
    interface. Otherwise, the operator can be launched, and that will run its `execute`
    method.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 当任何`not`条件满足时，操作符在界面中变灰。否则，可以启动操作符，这将运行其`execute`方法。
- en: Writing the execute method
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写`execute`方法
- en: 'The `execute` method performs the operator activity. It does the following:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute`方法执行操作符活动。它执行以下操作：'
- en: Finds the frame range of the current action
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查找当前动作的帧范围
- en: Sets the first and last frame of the scene accordingly
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据场景相应地设置第一帧和最后一帧
- en: Fits the new frame range in the timeline visually
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在时间轴上可视地适应新的帧范围
- en: 'We already know how to access the active object’s action. Its `frame_range`
    attribute contains the first and last frame of the action:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经知道如何访问活动对象的动作。它的`frame_range`属性包含动作的第一帧和最后一帧：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get the current `scene` and perform *step 2*. If the timeline preview range
    is used, we should set the preview start/end frames. Frame values are stored as
    decimal floats, and we need to convert them into integers before using them for
    the `frame*` attributes:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们获取当前`scene`并执行*步骤2*。如果使用时间轴预览范围，我们应该设置预览的开始/结束帧。帧值存储为十进制浮点数，在使用它们之前我们需要将它们转换为整数：
- en: '[PRE10]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Otherwise, we must set the standard `frame_start` and `frame_end` of the scene:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，我们必须设置场景的标准`frame_start`和`frame_end`：
- en: '[PRE11]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now that we have set our values, we can invoke `ops.action.view_all()` to fit
    the **Timeline** view to the new range, and finish the execution:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了我们的值，我们可以调用`ops.action.view_all()`来使**时间轴**视图适应新的范围，并完成执行：
- en: '[PRE12]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We need to add `''UNDO''` to `bl_options` to affect the operator attributes
    after the execution, as we learned in [*Chapter 4*](B18375_04.xhtml#_idTextAnchor075):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将`'UNDO'`添加到`bl_options`中，以便在执行后影响操作符属性，正如我们在[*第4章*](B18375_04.xhtml#_idTextAnchor075)中学到的：
- en: '[PRE13]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Unfortunately, operators that are launched outside of the `use_preview` to `False`.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在`use_preview`设置为`False`之外启动的操作符。
- en: To work around that, we can create two entries in the **Timeline** | **View**
    menu.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们可以在**时间轴** | **视图**菜单中创建两个条目。
- en: Writing the menu function
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写菜单函数
- en: In [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049), we learned that adding a
    function to a menu class allows us to add elements to its layout.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B18375_03.xhtml#_idTextAnchor049)中，我们了解到向菜单类添加一个函数可以使我们向其布局中添加元素。
- en: Also, in [*Chapter 5*](B18375_05.xhtml#_idTextAnchor100), we learned that operator
    properties are returned by the `layout.operator` function and can be set programmatically.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在[*第5章*](B18375_05.xhtml#_idTextAnchor100)中，我们了解到操作符属性是由`layout.operator`函数返回的，并且可以编程设置。
- en: Combining these two techniques, we can create two menu entries that invoke the
    same operator, but we only enable `use_preview` on one of the two. This way, we
    end up with two menu items. They execute the same operator but with different
    settings and outcomes.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 结合这两种技术，我们可以创建两个菜单条目，它们调用相同的操作符，但我们只在一个条目上启用`use_preview`。这样，我们最终有两个菜单项。它们执行相同的操作符，但具有不同的设置和结果。
- en: 'To make sure that the difference is reflected in the operator label, we can
    change it using the `text=` parameter:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保差异反映在操作符标签上，我们可以使用`text=`参数来更改它：
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We have added `" (preview)"` to the operator label so that it’s clear that this
    is a variant of the `ActionToSceneRange` operator.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经将`" (preview)"`添加到操作符标签中，以便清楚地表明这是一个`ActionToSceneRange`操作符的变体。
- en: 'The default entry affects the actual scene range, so there is no need to specify
    the text label explicitly:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 默认条目影响实际场景范围，因此不需要显式指定文本标签：
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Menu entries are displayed with a **Last In First Out** (**LIFO**) policy. We
    added the (preview) item first, so it will be displayed after the default **Action
    to Scene** **Range** entry.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单条目按照**后进先出**（**LIFO**）策略显示。我们首先添加了（preview）项，所以它将在默认的**动作到场景** **范围**条目之后显示。
- en: It won’t default forever!
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会永远默认！
- en: '`ActionToSceneRange.use_preview` is already `False` by default, but we set
    `props.use_preview` to `False` anyway in `view_menu_items`.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActionToSceneRange.use_preview`默认为`False`，但在`view_menu_items`中我们仍然将`props.use_preview`设置为`False`。'
- en: Unless `is_skip_save` is used for a property, the default value only affects
    the first execution of an operator. From then on, the last user choice becomes
    the new default.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 除非`is_skip_save`用于一个属性，否则默认值只影响操作符的第一个执行。从那时起，最后的用户选择成为新的默认值。
- en: If an element of the interface matches specific operator settings, then we should
    set them explicitly in the code.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果界面元素与特定的操作符设置匹配，那么我们应该在代码中显式设置它们。
- en: Now that we’ve created the elements of the add-on, we need to register the operator
    and menu entries. Then, it will be ready to go.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了附加组件的元素，我们需要注册操作符和菜单条目。然后，它就可以使用了。
- en: Finishing the add-on
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完成附加组件
- en: We need the class name of the **Timeline** | **View** menu. To find it, we can
    look up the Python source of the Blender interface.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要**时间轴** | **查看**菜单的类名。为了找到它，我们可以查找Blender界面的Python源代码。
- en: Finding a menu’s Python class
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查找菜单的Python类
- en: 'We can right-click the **Timeline** | **View** menu and select **Edit Source**
    to find its Python name:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以右键点击**时间轴** | **查看**菜单，选择**编辑源**来找到它的Python名称：
- en: '![Figure 7.5: Opening Timeline | View](img/Figure_7.05_B18375.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图7.5：打开时间轴 | 查看](img/Figure_7.05_B18375.jpg)'
- en: 'Figure 7.5: Opening Timeline | View'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.5：打开时间轴 | 查看
- en: 'Then, in the `space_time.py` in the **Text** **Editor** area:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在**文本** **编辑器**区域的`space_time.py`中：
- en: '![Figure 7.6: space_time.py as a loaded text block](img/Figure_7.06_B18375.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![图7.6：space_time.py作为一个加载的文本块](img/Figure_7.06_B18375.jpg)'
- en: 'Figure 7.6: space_time.py as a loaded text block'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.6：space_time.py作为一个加载的文本块
- en: 'The script found in the `menu()` function is the class name we are looking
    for:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在`menu()`函数中找到的脚本就是我们正在寻找的类名：
- en: '[PRE16]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: We can use this name in our `register()` function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在我们的`register()`函数中使用这个名称。
- en: Writing the register/unregister functions
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写注册/注销函数
- en: 'We can use `register_class` to add `ActionToSceneRange` to the Blender operators,
    and we can append our items to `TIME_MT_view` to display our new entries in the
    **Timeline** | **View** menu:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`register_class`将`ActionToSceneRange`添加到Blender操作符中，并将我们的条目追加到`TIME_MT_view`以在**时间轴**
    | **查看**菜单中显示我们的新条目：
- en: '[PRE17]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Likewise, when the add-on is disabled, `unregister()` removes our items from
    the menu and the operator from Blender:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，当附加组件被禁用时，`unregister()`会从菜单中移除我们的条目，并从Blender中移除操作符：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now, the operator is ready. We can use it on the cube we animated earlier in
    this chapter or open one of the files contained in `ch7/_scenes_`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，操作符已经准备好了。我们可以用它来操作本章前面动画过的立方体，或者打开`ch7/_scenes_`中包含的其中一个文件。
- en: Enabling and running
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启用和运行
- en: 'If the `PythonScriptingBlender/ch7` folder was added to the `scripts` path,
    we can find and enable **Action to Range** in the **Add-ons** preferences:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`PythonScriptingBlender/ch7`文件夹被添加到`scripts`路径中，我们可以在**插件**首选项中找到并启用**动作到范围**：
- en: '![Figure 7.7: Enabling the Action to Range add-on](img/Figure_7.07_B18375.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图7.7：启用动作到范围插件](img/Figure_7.07_B18375.jpg)'
- en: 'Figure 7.7: Enabling the Action to Range add-on'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.7：启用动作到范围插件
- en: 'If the add-on was installed correctly, we will find two new entries in **Timeline**
    | **View**:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件安装正确，我们将在**时间线** | **视图**中找到两个新的条目：
- en: '![Figure 7.8: Action to Scene Range and its “preview” variant](img/Figure_7.08_B18375.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图7.8：动作到场景范围及其“预览”变体](img/Figure_7.08_B18375.jpg)'
- en: 'Figure 7.8: Action to Scene Range and its “preview” variant'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.8：动作到场景范围及其“预览”变体
- en: Clicking **Action to Scene Range** sets the scene range to 1-24, while **Action
    to Scene Range (preview)** sets the preview range.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**动作到场景范围**将场景范围设置为1-24，而**动作到场景范围（预览）**则设置预览范围。
- en: Since we have set `bl_options = {'REGISTER', 'UNDO'}` in the properties, we’ll
    look at how this operator supports the **Adjust Last** **Operation** window.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在属性中设置了`bl_options = {'REGISTER', 'UNDO'}`，我们将看看这个操作符如何支持**调整最后** **操作**窗口。
- en: Changing the parameters of the last operation
  id: totrans-172
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改最后操作的参数
- en: 'We can use **Edit** | **Adjust Last Operation** from the top menu bar to change
    the options in the last execution retroactively:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用顶部的菜单栏中的**编辑** | **调整最后操作**来更改上一次执行中的选项：
- en: '![Figure 7.9: Changing the outcome of the last operation](img/Figure_7.09_B18375.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图7.9：更改最后操作的结果](img/Figure_7.09_B18375.jpg)'
- en: 'Figure 7.9: Changing the outcome of the last operation'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.9：更改最后操作的结果
- en: 'A small window will appear, displaying the operator properties. Turning `use_preview`
    on and off changes the result of the operation:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 将出现一个小窗口，显示操作符属性。打开和关闭`use_preview`会改变操作的结果：
- en: '![Figure 7.10: The Action to Scene Range properties window](img/Figure_7.10_B18375.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图7.10：动作到场景范围属性窗口](img/Figure_7.10_B18375.jpg)'
- en: 'Figure 7.10: The Action to Scene Range properties window'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.10：动作到场景范围属性窗口
- en: The add-on is finished, but when it comes to recentering the `bpy.ops.action.view_all()`,
    a timeline operator. It is fine to call other operators in `execute`, but they
    can place additional restrictions on the validity of the context, so we must consider
    that their `poll` method might halt our script’s execution.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 插件已完成，但当涉及到重新居中`bpy.ops.action.view_all()`，一个时间线操作符时。在`execute`中调用其他操作符是可以的，但它们可能会对上下文的合法性施加额外的限制，因此我们必须考虑它们的`poll`方法可能会停止我们的脚本执行。
- en: For instance, by adding our operator to the `action.view_all()`, which requires
    it, will never fail.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过将我们的操作符添加到需要它的`action.view_all()`中，永远不会失败。
- en: 'But what if the `F3` `RuntimeError`:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果出现`F3` `RuntimeError`：
- en: '![Figure 7.11: Our script causes an error if the timeline is not displayed](img/Figure_7.11_B18375.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图7.11：如果时间线未显示，我们的脚本将引发错误](img/Figure_7.11_B18375.jpg)'
- en: 'Figure 7.11: Our script causes an error if the timeline is not displayed'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.11：如果时间线未显示，我们的脚本将引发错误
- en: 'We can just warn the user or check the presence timelines in our `poll` method,
    but usually, the best practice is as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以只是警告用户或在我们的`poll`方法中检查时间线的存在，但通常，最佳实践如下：
- en: Use a `try` statement when calling other operators
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在调用其他操作符时使用`try`语句
- en: If possible, if a `RuntimeError` occurs, create an alternate `context` for running
    the other operator
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果可能，如果发生`RuntimeError`，为运行其他操作符创建一个替代的`context`。
- en: This way, even if something goes wrong, our operator will carry on with its
    task.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，即使出了问题，我们的操作符也会继续执行其任务。
- en: Fixing context for other operators
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为其他操作符修复上下文
- en: We can prevent a Python script from stopping in case of errors by using `try`
    and `catch` statements. The code that risks causing errors goes under the `try`
    indent block, while the code to execute in case a specific error happens goes
    under the `except` `ErrorType` indent.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`try`和`catch`语句，我们可以防止Python脚本在出现错误时停止。可能引发错误的代码位于`try`缩进块下，而特定错误发生时执行的代码位于`except`
    `ErrorType`缩进下。
- en: 'In our case, the error message was raised when `RuntimeError`:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，当`RuntimeError`发生时，错误信息被触发：
- en: '[PRE19]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'To get past this issue, we must provide a plan B inside an `except RuntimeError`
    block. If we don’t want to do anything, we can use the empty `pass` instruction:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个问题，我们必须在`except RuntimeError`块中提供一个备用计划。如果我们不想做任何事情，我们可以使用空的`pass`指令：
- en: '[PRE20]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'But we can do better: we can look for a timeline in the window, override `context`,
    and pass it to the operator.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以做得更好：我们可以在窗口中查找时间轴，覆盖`context`，并将其传递给操作符。
- en: In [*Chapter 5*](B18375_05.xhtml#_idTextAnchor100), we learned that a Blender
    window is split into `screen`, `areas`, and `regions`. From the documentation,
    we know that timeline editors are of the `'``DOPESHEET_EDITOR'` type.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第5章*](B18375_05.xhtml#_idTextAnchor100)中，我们了解到Blender窗口被分为`screen`、`areas`和`regions`。从文档中，我们知道时间轴编辑器属于`'DOPESHEET_EDITOR'`类型。
- en: 'There might be more windows open. For each of them, we can get the screen attribute:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有更多窗口打开。对于每一个，我们可以获取屏幕属性：
- en: '[PRE21]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Then, we must look for a `''DOPESHEET_EDITOR''` among `areas` of the screen:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须在屏幕的`areas`中查找`'DOPESHEET_EDITOR'`：
- en: '[PRE22]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'By skipping every area that is *not* a `''DOPESHEET_EDITOR''`, we can ensure
    that the following lines are executed only if the area is a timeline. We need
    to look for its main region, which is of the `''``WINDOW''` type:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 通过跳过每个不是`'DOPESHEET_EDITOR'`的区域，我们可以确保以下行只在区域是时间轴时执行。我们需要查找其主区域，它属于`'WINDOW'`类型：
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The timeline’s `window`, `area`, and `region` are fed to `context.temp_override`
    inside a `with` statement.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 时间轴的`window`、`area`和`region`在`with`语句中传递到`context.temp_override`。
- en: 'In Python, `with` sets a condition that stays valid inside its scope – that
    is, indented lines of code. There, we can call `bpy.ops.action.view_all()`:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，`with`设置一个在它的作用域内保持有效的条件——即缩进的代码行。在那里，我们可以调用`bpy.ops.action.view_all()`：
- en: '[PRE24]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The two `break` statements stop the search after a timeline is found. We have
    made sure that `view_all` is called only if its conditions are met.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 两个`break`语句在找到时间轴后停止搜索。我们确保只有在满足条件时才调用`view_all`。
- en: Our add-on automated a tedious operation by checking the action frame range,
    without looking into the keyframes it contains. To understand how we can access
    and manipulate the animation data, next, we will learn how keyframes are displayed
    and edited.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过检查动作帧范围来自动化一项繁琐的操作，而不需要查看它包含的关键帧。为了了解我们如何访问和操作动画数据，接下来，我们将学习如何显示和编辑关键帧。
- en: Editing keyframes
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑关键帧
- en: Animation software gives visual cues of keyframe distribution. In Blender, keyframes
    are displayed with special colors in the interface and as diamond widgets in the
    animation editors.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 动画软件通过视觉提示关键帧分布。在Blender中，关键帧在界面中以特殊颜色显示，并在动画编辑器中以菱形小部件显示。
- en: 'Animated properties have colored backgrounds. If the current frame is a keyframe,
    the background is yellow; otherwise, it is green:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 动画属性有彩色背景。如果当前帧是关键帧，则背景为黄色；否则，为绿色：
- en: '![Figure 7.12: Location is animated; the current frame is the keyframe for
    X and Y](img/Figure_7.12_B18375.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图7.12：位置被动画化；当前帧是X和Y的关键帧](img/Figure_7.12_B18375.jpg)'
- en: 'Figure 7.12: Location is animated; the current frame is the keyframe for X
    and Y'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.12：位置被动画化；当前帧是X和Y的关键帧
- en: 'Keyframes of the selected objects are displayed as diamonds in the **Timeline**
    editor:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 选择对象的关键帧在**时间轴**编辑器中以菱形显示：
- en: '![Figure 7.13: The animation Timeline. Frames 1 and 24 have keyframes](img/Figure_7.13_B18375.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图7.13：动画时间轴。帧1和24有关键帧](img/Figure_7.13_B18375.jpg)'
- en: 'Figure 7.13: The animation Timeline. Frames 1 and 24 have keyframes'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.13：动画时间轴。帧1和24有关键帧
- en: Blender transitions from one keyframe to the other by tracing a graph between
    them. These graphs are referred to as **animation curves** or **f-curves**.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: Blender通过在两个关键帧之间绘制图表来从一个关键帧过渡到另一个。这些图表被称为**动画曲线**或**f曲线**。
- en: Animation curves and the Graph Editor
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动画曲线和图编辑器
- en: Like most animation software, Blender generates a transition between two animated
    values by inbetweening two or more keyframes. A keyframe contains two elements
    – a moment in time and the value of a property at that moment.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数动画软件一样，Blender通过在两个动画值之间插入两个或更多关键帧来生成过渡。关键帧包含两个元素——一个时间点和一个属性在该时间点的值。
- en: 'These changes in value over time are represented in the **Graph Editor** area,
    a coordinate system where the horizontal axis is the frame number and the vertical
    axis is the animated value at each frame:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这些随时间变化的价值在**图编辑器**区域中表示，这是一个坐标系统，其中水平轴是帧号，垂直轴是每帧的动画值：
- en: '![Figure 7.14: Values over time as animation curves in the Graph Editor](img/Figure_7.14_B18375.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图7.14：在图编辑器中的动画曲线上的时间值](img/Figure_7.14_B18375.jpg)'
- en: 'Figure 7.14: Values over time as animation curves in the Graph Editor'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.14：在图编辑器中的时间值作为动画曲线
- en: A keyframe created at frame `1` that sets a property to `0` is displayed as
    a dot with coordinates of `(``1, 0)`.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 在帧`1`创建的将属性设置为`0`的关键帧显示为一个坐标为`(``1, 0)`的点。
- en: Blender interpolates the transition between one keyframe and another. The transition
    between a keyframe and its neighbors is an **F-Curve** – that is, a continuous
    graph that connects two keyframes smoothly.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Blender在关键帧之间进行插值。关键帧及其邻居之间的过渡是一个**F曲线**——即连接两个关键帧的平滑连续图。
- en: Say his F-name!
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 说他的F名！
- en: F-curves are named after James Ferguson, a researcher at The Boeing Company
    who, in 1964, published a paper named *Multivariable Curve Interpolation*. His
    interpolation formulas have fueled the advancements in modern computer graphics.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: F曲线是以波音公司的研究员詹姆斯·弗格森的名字命名的，他在1964年发表了一篇名为*多变量曲线插值*的论文。他的插值公式推动了现代计算机图形学的发展。
- en: This way, every *animation curve*, or *F-Curve*, contains both the keyframes
    set by the animator and the transition generated by Blender, acting both as storage
    for the animation data and the interpolator that fills the parts where they are
    missing.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，每个**动画曲线**，或**F曲线**，都包含动画师设置的关键帧和Blender生成的过渡，既作为动画数据的存储，也作为填充它们缺失部分的插值器。
- en: Interpolations can make use of straight lines connecting the points, or curve
    lines with tangent handles – that is, **Bezier** curves.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 插值可以使用连接点的直线，或者带有切线手柄的曲线线——即**贝塞尔曲线**。
- en: Setting a **Location** keyframe creates curves for the **X**, **Y**, and **Z**
    channels.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 设置**位置**关键帧会为**X**、**Y**和**Z**通道创建曲线。
- en: 'Animation curves are displayed in the **Graph Editor** area. We can select
    **Graph Editor** from the drop-down list on the left of any area header:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 动画曲线在**图形编辑器**区域中显示。我们可以从任何区域标题左侧的下拉列表中选择**图形编辑器**：
- en: '![Figure 7.15: Selecting the Graph Editor as the content of a Blender area](img/Figure_7.15_B18375.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![图7.15：将图形编辑器作为Blender区域的内容](img/Figure_7.15_B18375.jpg)'
- en: 'Figure 7.15: Selecting the Graph Editor as the content of a Blender area'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.15：将图形编辑器作为Blender区域的内容
- en: The f-curves of an animation are stored in **actions**, which are the top containers
    in the animation data.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的f曲线存储在**动作**中，它们是动画数据中的顶级容器。
- en: The structure of the animation data can be summed up as **Action** | **F-Curves**
    | **Keyframes**.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 动画数据结构可以总结为**动作** | **F曲线** | **关键帧**。
- en: Traversing this hierarchy is done differently via Python, where we can retrieve
    the animation values in our scripts.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通过Python遍历这个层次结构的方式不同，我们可以从我们的脚本中检索动画值。
- en: Accessing animation data in Python
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Python中访问动画数据
- en: Let’s switch to the **Scripting Workspace** area to familiarize ourselves with
    the animation system API.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们切换到**脚本工作区**区域，以便熟悉动画系统API。
- en: Adding keyframes in Python
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Python中添加关键帧
- en: 'The Python class of every animatable object provides a method that we can use
    to insert keyframes, named `keyframe_insert`. It is very similar to the `data_path`
    string for specifying which property to animate. Optional parameters such as `index`
    and `frame` allow us to specify one of the channels of an aggregate property or
    a frame different from the current one:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 每个可动画对象的Python类都提供了一个我们可以用来插入关键帧的方法，名为`keyframe_insert`。它与指定要动画化的属性的`data_path`字符串非常相似。可选参数如`index`和`frame`允许我们指定一个聚合属性的某个通道或不同于当前帧的帧：
- en: '[PRE25]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The following lines set a keyframe for the active object’s location to `10.0,
    10.0, 10.0` at frame `1`:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行在帧`1`为活动物体的位置设置了`10.0, 10.0, 10.0`的关键帧：
- en: '[PRE26]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Animation requires a value to change over time, so just one keyframe is not
    enough. We will set another value for frame 24:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 动画需要随时间变化的值，所以一个关键帧是不够的。我们将在帧24设置另一个值：
- en: '[PRE27]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We have only set a keyframe at the start and one at the end of our animation,
    but by default, Blender generates a transition between two neighbor keyframes
    so that the object will move a little bit at each of the frames between 1 and
    24.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只在动画的开始和结束处设置了一个关键帧，但默认情况下，Blender会在两个相邻关键帧之间生成一个过渡，使得物体在1到24帧之间的每一帧都会稍微移动一点。
- en: Our object starts at the `10.0, 10.0, 10.0` coordinates of the `-10.0, -``10.0,
    -10.0`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的对象从`-10.0, -10.0, -10.0`的`10.0, 10.0, 10.0`坐标开始。
- en: Geometrically speaking, these coordinates mark the front top-right corner and
    bottom-left corner of a cube, implying that the motion happened along the diagonal
    of the three-dimensional space.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 从几何学角度来说，这些坐标标记了立方体的前上角和底左角，意味着运动发生在三维空间的对角线上。
- en: Retrieving keyframes in Python
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Python 中检索关键帧
- en: 'If the active object has keyframes, we can traverse its `animation_data`:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 如果活动对象有关键帧，我们可以遍历其 `animation_data`：
- en: '[PRE28]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Since `animation_data` contains the current action, all its f-curves, and keyframes,
    we are going to use this container a lot. It can be convenient to store it as
    a variable as this way, we can avoid long lines of code while we gather the data.
    Here’s how we get the current `action`:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 `animation_data` 包含当前动作、所有 f-curves 和关键帧，我们将大量使用此容器。将其存储为变量可能很方便，这样我们可以在收集数据时避免长代码行。以下是获取当前
    `action` 的方法：
- en: '[PRE29]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'From the action, we can retrieve the list of animation `fcurves`:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 从动作中，我们可以检索到动画 `fcurves` 列表：
- en: '[PRE30]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'For each curve, we can get the animated `data_path`. A data path identifies
    where a property is stored in Blender, but some properties, such as `location`,
    require an animation curve for each channel – for example, one curve for the *x*,
    one for *y*, and one for the *z* coordinate. For that reason, f-curves also have
    the `array_index` attribute, a number that designates the animated channel of
    an aggregate property. If we animate the three channels of `location` and scroll
    through the f-curves using Python, we will find three curves with the same path,
    `''location''`, each with a different index:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个曲线，我们可以获取动画的 `data_path`。数据路径标识了在 Blender 中属性存储的位置，但某些属性，如 `location`，需要每个通道的动画曲线
    – 例如，一个用于 *x*，一个用于 *y*，一个用于 *z* 坐标。因此，f-curves 也具有 `array_index` 属性，一个指定聚合属性动画通道的数字。如果我们动画
    `location` 的三个通道并使用 Python 滚动 f-curves，我们将找到三个具有相同路径 `'location'` 的曲线，每个曲线具有不同的索引：
- en: '[PRE31]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Every `keyframe_point` stores two coordinates in the `co` attribute. The first
    is the frame number, while the second is the value of that frame:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 `keyframe_point` 在 `co` 属性中存储两个坐标。第一个是帧号，而第二个是该帧的值：
- en: '[PRE32]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: While the current, first, and last frames of the scene are stored as integers,
    `co[0]` is a `float`. This allows us to insert animations between adjacent frames
    (subframe animation).
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 当前的、第一个和最后一个场景帧存储为整数，而 `co[0]` 是一个 `float`。这允许我们在相邻帧之间插入动画（子帧动画）。
- en: 'The curve interpolation mode is stored in the keyframe’s `interpolation` attribute.
    The most used interpolations are as follows:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线插值模式存储在关键帧的 `interpolation` 属性中。最常用的插值如下：
- en: '`''CONSTANT''`: No interpolation'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''CONSTANT''`: 无插值'
- en: '`''LINEAR''`: Interpolation using straight lines'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''LINEAR''`: 使用直线插值'
- en: '`''BEZIER''`: Interpolation using curves, weighted with *handles*'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`''BEZIER''`: 使用带 *handles* 的曲线插值'
- en: 'Bezier curves, named after the French engineer Pierre Bèzier, are widely used
    in computer graphics because of their smooth and controllable behavior. They are
    the default interpolation in Blender. The current `interpolation` between a keyframe
    and its neighbors is stored as an attribute of the keyframe:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 贝塞尔曲线，以法国工程师皮埃尔·贝塞尔的名字命名，由于它们的平滑和可控行为，在计算机图形学中得到了广泛应用。它们是 Blender 中的默认插值。关键帧与其邻居之间的当前
    `interpolation` 存储为关键帧的 `interpolation` 属性：
- en: '[PRE33]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Points of a Bezier curve have two additional coordinates – a left handle and
    a right one, both of which affect the interpolated path. To support curve interpolation,
    Blender keyframes contain two additional coordinates stored as the `handle_left`
    and `handle_right` attributes. Exactly like the `co` attribute, the curve handles
    are two-dimensional points:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 贝塞尔曲线的点有两个额外的坐标 – 一个左侧手柄和一个右侧手柄，它们都影响插值路径。为了支持曲线插值，Blender 关键帧包含两个额外的坐标，存储为
    `handle_left` 和 `handle_right` 属性。与 `co` 属性一样，曲线手柄是二维点：
- en: '[PRE34]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Blender supports other interpolations. They cover very specific cases and at
    the time of writing, they are not much used in animation. They are named after
    the mathematical function used in their computation, and they are described in
    the API documentation at [https://docs.blender.org/api/3.2/bpy.types.Keyframe.xhtml](https://docs.blender.org/api/3.2/bpy.types.Keyframe.xhtml)
    and #bpy.types.Keyframe.interpolation:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 'Blender 支持其他插值。它们覆盖非常特定的案例，并且在撰写本文时，它们在动画中并不常用。它们以用于其计算的数学函数命名，并在 API 文档中描述，在
    [https://docs.blender.org/api/3.2/bpy.types.Keyframe.xhtml](https://docs.blender.org/api/3.2/bpy.types.Keyframe.xhtml)
    和 #bpy.types.Keyframe.interpolation：'
- en: '`QUAD`: Quadratic easing'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QUAD`: 二次缓动'
- en: '`CUBIC`: Cubic easing'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CUBIC`: 三次缓动'
- en: '`QUART`: Quartic easing'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QUART`: 四次缓动'
- en: '`QUINT`: Quintic easing'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QUINT`: 五次缓动'
- en: '`SINE`: Sinusoidal easing (weakest, almost linear but with a slight curvature)'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SINE`: 正弦缓动（最弱，几乎线性但略有曲率）'
- en: '`EXPO`: Exponential easing (dramatic)'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EXPO`: 指数缓动（戏剧性）'
- en: '`CIRC`: Circular easing (strongest and most dynamic)'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CIRC`: 圆形缓动（最强且最动态）'
- en: '`BACK`: Cubic easing with overshoot and settle'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BACK`: 带有超调和稳定的立方缓动'
- en: '`BOUNCE`: Exponentially decaying parabolic bounce, like when objects collide'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BOUNCE`: 指数衰减的抛物线反弹，类似于物体碰撞时的情况'
- en: '`ELASTIC`: Exponentially decaying sine wave, like an elastic band'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ELASTIC`: 指数衰减的正弦波，类似于弹性带'
- en: We will get back to keyframes at the end of this chapter; in the meantime, we
    will build a tool that sets the scene playback based on the duration of the current
    animation.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章末尾回到关键帧；在此期间，我们将构建一个基于当前动画持续时间的场景播放设置工具。
- en: In these examples, our script uses the attributes of existing animations. In
    the next section, we are going to create animations with Python.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些示例中，我们的脚本使用现有动画的属性。在下一节中，我们将使用Python创建动画。
- en: Writing the Vert Runner add-on
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写 Vert Runner 附加组件
- en: 'In this section, we will write an add-on that animates the selected objects
    along the geometry of the active object. The animation will trace a path that
    connects the vertices of a mesh, hence the name *Vert Runner*:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将编写一个附加组件，该组件将选定的对象沿活动对象的几何形状动画化。动画将追踪连接网格顶点的路径，因此得名*Vert Runner*：
- en: '![Figure 7.16: Animating a toy along the vertices of a path](img/Figure_7.16_B18375.jpg)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![图 7.16：沿着路径顶点动画化玩具](img/Figure_7.16_B18375.jpg)'
- en: 'Figure 7.16: Animating a toy along the vertices of a path'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 图 7.16：沿着路径顶点动画化玩具
- en: This can be a basis for procedural walks or patrols, motion effects, or any
    other case where we have a geometrical path.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以作为程序化行走或巡逻、运动效果或任何其他具有几何路径的情况的基础。
- en: 'In this operator, the selected objects and the active ones are treated differently:
    the active object is the reference geometry on which the selected objects are
    moved.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在此操作符中，选定的对象和活动对象被区别对待：活动对象是选定对象移动的参考几何形状。
- en: Setting the environment
  id: totrans-285
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'Let’s start by adding a new script to our add-ons directory:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从向我们的附加组件目录添加一个新的脚本开始：
- en: Select `PythonScriptingBlender/ch7/addons` in **VS Code**.
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **VS Code** 中选择 `PythonScriptingBlender/ch7/addons`。
- en: Create a new file by clicking on the **New** **File** icon.
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**新建** **文件**图标创建一个新文件。
- en: Name the new file `vert_runner.py`.
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为`vert_runner.py`。
- en: Open the file by double-clicking it.
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击打开文件。
- en: As usual, we will start with the add-on information.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，我们将从附加信息开始。
- en: Writing the Vert Runner information
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 Vert Runner 信息
- en: 'Our new operator can be invoked by selecting `location` information:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新操作符可以通过选择`位置`信息来调用：
- en: '[PRE35]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'We will proceed with the usual steps:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续进行常规步骤：
- en: Writing the operator
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写操作符
- en: Writing the menu entry
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写菜单条目
- en: Registering the classes and interface
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册类和接口
- en: Writing the Vert Runner operator
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写 Vert Runner 操作符
- en: 'After the `import` section, we must create the `VertRunner` class and its `bl_*`
    identifiers:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在`import`部分之后，我们必须创建`VertRunner`类及其`bl_*`标识符：
- en: '[PRE36]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We set the distance between each keyframe with an `Integer` property:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个`整数`属性设置每个关键帧之间的距离：
- en: '[PRE37]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The next step is writing the `poll` and `execute` methods of this operator.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是编写此操作符的`poll`和`execute`方法。
- en: Writing the operator methods
  id: totrans-305
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写操作符方法
- en: We will write the `poll` method based on what is needed to run the desired operations.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据运行所需操作的需要编写`poll`方法。
- en: Requirements to check in the poll() method
  id: totrans-307
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在poll()方法中检查的要求
- en: 'To animate the selected objects over the geometry of the active object, we
    need the following:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在活动对象的几何形状上动画化选定的对象，我们需要以下内容：
- en: An active object
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 活动对象
- en: Mesh data
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格数据
- en: Selected objects
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选定的对象
- en: 'Using these conditions, to have the `poll()` method return `False`, they translate
    to the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些条件，要使`poll()`方法返回`False`，它们转换为以下内容：
- en: '[PRE38]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: If none of the `return False` conditions are met, the poll is successful. In
    that case, the operator can run its execute method.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有满足任何`return False`条件，则poll成功。在这种情况下，操作符可以运行其execute方法。
- en: Writing the execute() method
  id: totrans-315
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 编写 execute() 方法
- en: 'Breaking the operator’s goal into steps, we should do the following:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 将操作符的目标分解为步骤，我们应该做以下事情：
- en: Get a list of patrol points; in this case, the vertices of the active object.
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取巡逻点的列表；在这种情况下，活动对象的顶点。
- en: Scroll through the selected objects.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 滚动通过选定的对象。
- en: Move them through the patrol points and set the keyframes.
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将它们通过巡逻点移动并设置关键帧。
- en: 'We will start by storing the active object’s vertices in a `list`:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将活动对象的顶点存储在一个`列表`中：
- en: '[PRE39]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'When we iterate through the selected objects, we should make sure to skip the
    active one, which is likely selected:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们遍历选定的对象时，我们应该确保跳过活动对象，因为它可能被选中：
- en: '[PRE40]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, we must iterate through the vertices list and set keyframes for each
    coordinate, starting with the current frame. We must advance the `frame` number
    at every iteration:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须遍历顶点列表并为每个坐标设置关键帧，从当前帧开始。我们必须在每次迭代中递增 `frame` 数量：
- en: '[PRE41]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: When the for loop is over, we must return a `'FINISHED'` state and exit the
    operator. Now that the `VertRunner` class is complete, we can work on its menu
    entry.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 当 for 循环结束时，我们必须返回一个 `'FINISHED'` 状态并退出操作员。现在 `VertRunner` 类已经完成，我们可以开始处理其菜单条目。
- en: Writing the menu and register functions
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写菜单和注册函数
- en: 'Since menu elements are displayed in reverse order, we must add a `separator`
    first:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 由于菜单元素以相反的顺序显示，我们必须首先添加一个 `separator`：
- en: '[PRE42]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Now, it’s time to register the operator and menu so that it can run from the
    interface:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候注册操作员和菜单，以便它可以从界面运行：
- en: '[PRE43]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'If we refresh the **Add-ons** list, we will see **Vert Runner** in the **Learning**
    category. Enabling it adds **Vert Runner** to the **Object** | **Animation** menu:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们刷新 **插件** 列表，我们将在 **学习** 类别中看到 **Vert Runner**。启用它将 **Vert Runner** 添加到
    **对象** | **动画** 菜单：
- en: '![Figure 7.17: Object | Animation | Vert Runner animates the selected objects](img/Figure_7.17_B18375.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![图7.17：对象 | 动画 | Vert Runner 对选定的对象进行动画处理](img/Figure_7.17_B18375.jpg)'
- en: 'Figure 7.17: Object | Animation | Vert Runner animates the selected objects'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.17：对象 | 动画 | Vert Runner 对选定的对象进行动画处理
- en: Using **Vert Runner** after selecting at least two objects will animate the
    selected objects along the vertices of the active object. We can add an option
    to make the animation cyclic and animate the object rotation.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择至少两个对象后使用 **Vert Runner** 将会沿着活动对象顶点动画化选定的对象。我们可以添加一个选项来使动画循环，并动画化对象的旋转。
- en: Creating cyclic animations
  id: totrans-336
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建循环动画
- en: Sometimes, we want the first and last frame of an animation to match so that
    we can watch it in loops – for instance, an endless clip of a character running
    in circles.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，我们希望动画的第一帧和最后一帧匹配，这样我们就可以循环观看它——例如，一个角色在圆形中奔跑的无尽剪辑。
- en: In our case, an object passes through all the points of a mesh, starting with
    the first and ending with the last vertex, so the first and last frames of the
    animation will differ.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，一个对象穿过网格的所有点，从第一个点开始，以最后一个顶点结束，因此动画的第一帧和最后一帧将不同。
- en: To create an animation cycle, we need to add the extra step of going back to
    the first coordinates after we have passed the last vertex.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建动画循环，我们需要在通过最后一个顶点后添加一个额外的步骤，回到第一个坐标。
- en: 'The user must be able to choose whether they want a cyclic animation or not,
    so we will add an option to our operator. The `loop` attribute is a Boolean property
    – it can be enabled and disabled when the operator is run:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 用户必须能够选择他们是否想要循环动画，因此我们将向我们的操作员添加一个选项。`loop` 属性是一个布尔属性——当操作员运行时可以启用和禁用：
- en: '[PRE44]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The implementation is very easy: adding a copy of its first element at the
    end of `verts` brings the objects back to their initial position at the end of
    the animation:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 实现非常简单：在 `verts` 的末尾添加其第一个元素的副本，将对象在动画结束时带回到初始位置：
- en: '[PRE45]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Animating rotations is slightly more complex. With the help of a little math,
    at each frame, we can orient the object toward its next destination.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 动画化旋转稍微复杂一些。借助一点数学知识，在每一帧，我们可以将对象朝向其下一个目的地定位。
- en: Adding rotations
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加旋转
- en: The math behind rotations can be challenging at first, but since we just want
    to rotate the objects around their *Z*-axes, we can use basic **trigonometry**.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 旋转背后的数学知识一开始可能具有挑战性，但因为我们只想围绕对象的 *Z* 轴旋转对象，我们可以使用基本的 **三角学**。
- en: In trigonometry, angles can be represented as arcs of a circle of radius 1 and
    consequently, maximum length equal to two times π. The letter π (spelled pi) is
    the ratio between a circle and its diameter. Its approximate value is `3.14`.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在三角学中，角度可以表示为半径为1的圆的弧，因此最大长度等于两倍的 π。字母 π（发音为 pi）是圆与其直径的比例。其近似值是 `3.14`。
- en: Trigonometry is a framework that contains many useful functions regarding the
    relationships between angles, segments, and rotations. Among them, there is a
    function that answers the question we are posing – that is, how do we rotate an
    object so that it faces toward a point?
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 三角学是一个包含许多关于角度、线段和旋转之间关系的有用函数的框架。其中有一个函数回答了我们提出的问题——也就是说，我们如何旋转一个对象使其面向一个点？
- en: Representing rotation arcs
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 表示旋转弧
- en: Imagine rotating an object toward a point of known *X* and *Y* coordinates.
    If the rotation traces an arc over an imaginary circle, we can consider the `y`
    coordinate of our point as the *height* of that arc. This dimension is called
    the **sine** of the angle, and it is very useful when comparing angles and lengths.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 想象将一个物体旋转到一个已知的*X*和*Y*坐标点。如果旋转在想象中的圆上画出一个弧线，我们可以将我们点的`y`坐标视为该弧线的*高度*。这个维度被称为该角度的**正弦**，当比较角度和长度时非常有用。
- en: 'The inverse of *sine* is called **arcsine**. It is of interest to us because
    it is the rotation associated with a sine. In other words, if we want to measure
    an angle and we know its *sine*, we can find the rotation using the following
    expression:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 正弦的逆函数称为**反正弦**。它对我们来说很有趣，因为它与正弦相关的旋转。换句话说，如果我们想测量一个角度并且知道它的正弦值，我们可以使用以下表达式来找到旋转：
- en: '[PRE46]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We know the sine, which is the `y` coordinate of the point we want to look
    at:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道正弦，即我们想要观察的点`y`坐标：
- en: '![Figure 7.18: Trigonometric representation of a look-at rotation](img/Figure_7.18_B18375.jpg)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![图7.18：观察旋转的三角表示](img/Figure_7.18_B18375.jpg)'
- en: 'Figure 7.18: Trigonometric representation of a look-at rotation'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.18：观察旋转的三角表示
- en: So, *arcsine* is the trigonometric function we are looking for. It is shortened
    as `asin` in Python, and to use it, we must import it from the `math` module.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，*反正弦*是我们正在寻找的三角函数。在Python中简写为`asin`，要使用它，我们必须从`math`模块中导入。
- en: Implementing rotation
  id: totrans-357
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现旋转
- en: 'In trigonometry, we express rotations in `3.14` in our code, we can import
    the `pi` constant from the `math` module. So, besides `asin`, we need `pi` as
    well so that our import section looks like this:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在三角学中，我们在代码中以`3.14`表示旋转，我们可以从`math`模块中导入`pi`常量。因此，除了`asin`之外，我们还需要`pi`，这样我们的导入部分看起来就像这样：
- en: '[PRE47]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We will write the `VertRunner.aim_to_point` method to address object rotations
    separately. The first step to do that is subtracting the current position from
    the target coordinates so that we can get a direction:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写`VertRunner.aim_to_point`方法来单独处理物体旋转。为此，第一步是从目标坐标中减去当前位置，以便我们可以得到一个方向：
- en: '[PRE48]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, we must normalize the direction so that the result is not affected by
    distance:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须规范化方向，以确保结果不受距离的影响：
- en: '[PRE49]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The look-at rotation is returned by `asin(direction.y)`, but there is a catch:
    arcsine always assumes that it must cover the right-hand side of the circle –
    that is, positive values of `direction.x`. What happens when our direction falls
    on the other side?'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 观察旋转由`asin(direction.y)`返回，但有一个问题：反正弦始终假设它必须覆盖圆的右侧——即`direction.x`的正值。当我们的方向落在另一侧时会发生什么？
- en: '![Figure 7.19: Look-at rotation for negative values of x](img/Figure_7.19_B18375.jpg)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![图7.19：x值为负时的观察旋转](img/Figure_7.19_B18375.jpg)'
- en: 'Figure 7.19: Look-at rotation for negative values of x'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.19：x值为负时的观察旋转
- en: 'In that case, we can get to the other side of the circle by subtracting `pi`
    from the `asin` result since `pi` measures half of a unitary circumference length:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 在那种情况下，我们可以通过从`asin`结果中减去`pi`来到达圆的另一侧，因为`pi`表示单位圆周长的一半：
- en: '[PRE50]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: We must also account for the fact that, in Blender, objects at rest look in
    the opposite direction of the *Y*-axis, so we must add a 90 degrees clockwise
    rotation to the result.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还必须考虑到在Blender中，静止的物体看起来与*Y*轴的相反方向，因此我们必须在结果中添加一个顺时针旋转90度。
- en: 'In radians, that’s `pi /` `2`:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 以弧度计，这是`pi / 2`：
- en: '[PRE51]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'At this point, `arc` contains the rotation we are looking for. We could use
    it right away, but there is still a problem: there are two ways to interpolate
    from one rotation to another.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，`arc`包含了我们正在寻找的旋转。我们可以立即使用它，但还有一个问题：有两种方式可以从一个旋转插值到另一个旋转。
- en: Finding the shortest arc
  id: totrans-373
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 寻找最短弧
- en: 'Imagine rotating an object from 30° to 330°. The quickest way to do this is
    via a counterclockwise rotation that passes through 0° and stops at -30°, which
    is equivalent to 330°. The longest way is by passing clockwise from 30° to 180°
    and then, finally, 330°:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 想象将一个物体从30°旋转到330°。最快的方法是通过逆时针旋转，经过0°并停止在-30°，这相当于330°。最慢的方法是通过顺时针从30°旋转到180°，然后最终旋转到330°：
- en: '![Figure 7.20: Short and long arcs of rotation from 30 to 330 degrees](img/Figure_7.20_B18375.jpg)'
  id: totrans-375
  prefs: []
  type: TYPE_IMG
  zh: '![图7.20：从30度到330度的旋转的短弧和长弧](img/Figure_7.20_B18375.jpg)'
- en: 'Figure 7.20: Short and long arcs of rotation from 30 to 330 degrees'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.20：从30度到330度的旋转的短弧和长弧
- en: 'Both are a valid transition from 30° to 330°, but we might want to prefer the
    shortest rotation: doing otherwise would cause an object to spin on itself.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种都是从30°到330°的有效过渡，但我们可能希望选择最短的旋转：否则会导致对象自身旋转。
- en: 'To find the shortest arc away from the current rotation, we must store three
    possibilities in a tuple – the target orient, the same value after a complete
    clockwise rotation, and the same value rotated counterclockwise:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到远离当前旋转的最短弧线，我们必须在元组中存储三个可能性——目标方向、顺时针旋转一周后的相同值以及逆时针旋转后的相同值：
- en: '[PRE52]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Then, we must store the absolute rotational differences using a list comprehension.
    From there, we can get the shortest arc using `min`:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们必须使用列表推导存储绝对旋转差。从那里，我们可以使用`min`获取最短弧线：
- en: '[PRE53]'
  id: totrans-381
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We must use the arc associated with the minimum difference. Using that as a
    condition of the `next` statement, we can find it and assign it to `rotation_euler.z`:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用与最小差值相关的弧。将此用作`next`语句的条件，我们可以找到它并将其分配给`rotation_euler.z`：
- en: '[PRE54]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We can now animate rotations using the `aim_to_point` method inside `execute`.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以使用`execute`中的`aim_to_point`方法来动画旋转。
- en: Putting everything together
  id: totrans-385
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将所有这些放在一起
- en: 'The final version of `execute` is only slightly different. It starts in the
    same way: gathering the list of vertices, adding the first vertex again if we
    are animating a cycle, and skipping the active object:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute`的最终版本只有一点不同。它以相同的方式开始：收集顶点列表，如果我们在动画循环，则再次添加第一个顶点，并跳过活动对象：'
- en: '[PRE55]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Our orient method is based on the current object position, so before we start
    animating, we must move the object to the end of the path:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的方向方法基于当前对象位置，因此在开始动画之前，我们必须将对象移动到路径的末端：
- en: '[PRE56]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'This way, when the animation starts, `aim_to_point` orients the object toward
    the first vertex. Now, we must insert keyframes for `rotation_euler.z` as well
    and repeat the process until all the points have been reached. After that, we
    can finish the execution:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当动画开始时，`aim_to_point`会将对象朝向第一个顶点。现在，我们必须为`rotation_euler.z`插入关键帧，并重复此过程，直到所有点都被到达。之后，我们可以完成执行：
- en: '[PRE57]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: By enabling **Vert Runner** in the add-ons list or updating the scripts if it
    was enabled already, we can test our add-on on any pair of objects.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在附加组件列表中启用**Vert Runner**或更新脚本（如果已经启用），我们可以在任何一对对象上测试我们的附加组件。
- en: Using Vert Runner
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Vert Runner
- en: 'We can use this operator on every couple of objects. There is a peculiar entry
    among the solids available in Blender – a stylized head of a **Monkey** jokingly
    inserted among more common shapes such as **Cube**, **Plane**, **Sphere**, and
    so on. The monkey’s head, affectionately named **Suzanne**, makes rotations easier
    to visualize because of its obvious front side, so using it to test our add-on
    is a natural choice:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在每一对对象上使用这个操作符。在Blender中可用的实体中有一个独特的条目——一个风格化的**猴子**头，幽默地插入到更常见的形状如**立方体**、**平面**、**球体**等形状之间。由于猴子的头部有一个明显的正面，因此亲切地命名为**苏珊**，这使得旋转更容易可视化，因此用它来测试我们的附加组件是一个自然的选择：
- en: Add a monkey head to the scene via **Add** | **Mesh** | **Monkey** from the
    Viewport menu bar.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从视图菜单栏选择**添加** | **网格** | **猴子**，将猴子头添加到场景中。
- en: Add any other mesh to the scene or use the Cube shape from the default scene
    if present.
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将任何其他网格添加到场景中，或者如果默认场景中存在，则使用立方体形状。
- en: Keeping *Shift* pressed (multiple selection), select the monkey, then select
    the object to use as an animation guide.
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按住*Shift*（多选），选择猴子，然后选择用作动画向导的对象。
- en: From the Viewport menu bar, select **Object** | **Animation** | **Vert Runner**.
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从视图菜单栏选择**对象** | **动画** | **Vert Runner**。
- en: Play the animation with *Alt* + *A* or by clicking the media control button.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用*Alt* + *A*或点击媒体控制按钮播放动画。
- en: The cube will pass through each vertex of the active object. Speed and cyclic
    animation can be toggled in the options.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 立方体将穿过活动对象的每个顶点。速度和循环动画可以在选项中切换。
- en: Though relatively simple, this tool can be expanded and generate motion for
    vehicles or even articulated characters.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然相对简单，但这个工具可以扩展并生成车辆或甚至关节角色的动作。
- en: Programming for animation generally comes down to converting an intuitive concept,
    such as looking toward a direction, into mathematical terms, like we did when
    extrapolating rotations. Plus, we have investigated the geometry structure and
    gained access to the vertex coordinates.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 动画编程通常是将直观的概念，例如朝向一个方向，转化为数学术语，就像我们在外推旋转时做的那样。此外，我们还研究了几何结构并获取了顶点坐标。
- en: This brings us to the end of this chapter, where we learned how to affect the
    animation settings and the animation of objects.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们到达了本章的结尾，我们在这里学习了如何影响动画设置和对象的动画。
- en: Summary
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we became familiar with object animation, learned how animations
    are created and stored, and looked at which scene settings are directly related
    to the animation system. We also learned how animation can be partly automated
    and approached from a geometric perspective, with a glimpse at the trigonometric
    representation of rotation angles.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们熟悉了对象动画，学习了动画是如何创建和存储的，并查看哪些场景设置与动画系统直接相关。我们还学习了动画可以部分自动化，并从几何角度进行探讨，同时简要了解了旋转角度的三角函数表示。
- en: Being able to automate part of the animation process is a valuable skill. Sometimes,
    the math involved might emerge and require solving, but we should not fear that,
    as math usually comes with a set of ready-to-use solutions for most ordinary use
    cases.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 能够自动化动画过程的一部分是一项宝贵的技能。有时，涉及的数学问题可能会出现并需要解决，但我们不应害怕，因为数学通常为大多数普通用例提供了一套现成的解决方案。
- en: We have just started our journey into generated animation, which will continue
    in [*Chapter 8*](B18375_08.xhtml#_idTextAnchor206), where we will learn how to
    enrich animation curves with procedural effects.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚开始我们的生成动画之旅，这将在[*第8章*](B18375_08.xhtml#_idTextAnchor206)中继续，我们将学习如何通过程序效果丰富动画曲线。
- en: Questions
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How are animated values stored?
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画值是如何存储的？
- en: Can one animation curve contain the keyframes of an entire Vector property?
  id: totrans-410
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个动画曲线能否包含整个矢量属性的关键帧？
- en: How are animation curves grouped?
  id: totrans-411
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 动画曲线是如何分组的？
- en: The current frame number is 1\. Without changing that setting, can we insert
    a keyframe at frame 4 using the user interface?
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前帧编号是1。在不更改该设置的情况下，我们能否使用用户界面在帧4插入一个关键帧？
- en: The current frame number is 1\. Without changing that setting, can we insert
    a keyframe at frame 4 using the Python API?
  id: totrans-413
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当前帧编号是1。在不更改该设置的情况下，我们能否使用Python API在帧4插入一个关键帧？
- en: Does a smooth motion require a keyframe on every frame?
  id: totrans-414
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平滑运动是否需要在每一帧都有关键帧？
- en: How are keyframes interpolated?
  id: totrans-415
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键帧是如何插值的？
- en: Are there more ways to interpolate two rotations?
  id: totrans-416
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有没有更多种方法来插值两个旋转？
