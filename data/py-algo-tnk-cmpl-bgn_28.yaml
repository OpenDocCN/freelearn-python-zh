- en: Chapter 18
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第18章
- en: The Multiple-Alternative Decision Structure
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 多重条件决策结构
- en: 18.1 The Multiple-Alternative Decision Structure
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.1 多重条件决策结构
- en: The multiple-alternative decision structure is used to expand the number of
    alternatives, as shown in the following flowchart fragment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 多重条件决策结构用于扩展选择数量，如下面的流程图片段所示。
- en: '![Image](img/chapter18-01.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter18-01.png)'
- en: When a multiple-alternative decision structure is executed, Boolean_Expression_1
    is evaluated. If it evaluates to True, the corresponding statement or block of
    statements that immediately follows it is executed; then the rest of the structure
    is skipped, continuing to any remaining statements that may exist after the multiple-alternative
    decision structure. However, if Boolean_Expression_1 evaluates to False, the flow
    of execution evaluates Boolean_Expression_2\. If it evaluates to True, the corresponding
    statement or block of statements that immediately follows it is executed and the
    rest of the structure is skipped. This process continues until one Boolean expression
    evaluates to True or until no more Boolean expressions are left.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行多重条件决策结构时，会评估Boolean_Expression_1。如果评估为真，则执行紧随其后的相应语句或语句块；然后跳过结构的其余部分，继续执行多重条件决策结构之后可能存在的任何剩余语句。然而，如果Boolean_Expression_1评估为假，则执行流程会评估Boolean_Expression_2。如果它评估为真，则执行紧随其后的相应语句或语句块，并跳过结构的其余部分。这个过程会一直继续，直到有一个布尔表达式评估为真，或者直到没有更多的布尔表达式为止。
- en: The last statement or block of statements N + 1 is executed when none of the
    previous Boolean expressions has evaluated to True. Moreover, this last statement
    or block of statements N+1 is optional and can be omitted. It depends on the algorithm
    you are trying to solve.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 当之前的布尔表达式都没有评估为真时，执行最后一个语句或最后一个语句块 N + 1。此外，这个最后一个语句或语句块 N + 1 是可选的，并且可以省略。这取决于你试图解决的问题的算法。
- en: The general form of the Python statement is
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python语句的一般形式是
- en: 'if Boolean_Expression_1:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 'if Boolean_Expression_1:'
- en: A statement or block of statements 1
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 1
- en: 'elif Boolean_Expression_2:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif Boolean_Expression_2:'
- en: A statement or block of statements 2
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 2
- en: 'elif Boolean_Expression_3:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif Boolean_Expression_3:'
- en: A statement or block of statements 3
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 3
- en: .
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: 'elif Boolean_Expression_N:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif Boolean_Expression_N:'
- en: A statement or block of statements N
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 N
- en: 'else:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: A statement or block of statements N + 1
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个或多个语句 N + 1
- en: '![](img/notice.jpg)The keyword elif is an abbreviation for “else if”.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg) elif关键字是“else if”的缩写。'
- en: '![](img/notice.jpg)The last statement or last block of statements N + 1 is
    optional and can be omitted (you need to omit the keyword else as well).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg) 最后一个语句或最后一个语句块 N + 1 是可选的，并且可以省略（也需要省略else关键字）。'
- en: A simple example is shown here.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了一个简单的例子。
- en: '![](img/my_exercise_header.png) file_18.1'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_18.1'
- en: name = input("What is your name? ")
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: name = input("你叫什么名字？ ")
- en: 'if name == "John":'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'if name == "John":'
- en: print("You are my cousin!")
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: print("你是我的堂兄/堂姐！")
- en: 'elif name == "Aphrodite":'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif name == "Aphrodite":'
- en: print("You are my sister!")
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: print("你是我的姐姐！")
- en: 'elif name == "Loukia":'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif name == "Loukia":'
- en: print("You are my mom!")
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: print("你是我的妈妈！")
- en: 'else:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Sorry, I don't know you.")
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: print("对不起，我不认识你。")
- en: Exercise 18.1-1 Trace Tables and Multiple-Alternative Decision Structures
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习18.1-1 跟踪表和多重条件决策结构
- en: Create a trace table to determine the values of the variables in each step for
    three different executions of the next Python program.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个跟踪表，以确定在Python程序的下述三次执行中，每个步骤中变量的值。
- en: 'The input values for the three executions are: (i) 5, 8; (ii) −13, 0; and (iii)
    1, −1.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 三次执行的输入值分别为：(i) 5, 8；(ii) −13, 0；(iii) 1, −1。
- en: '![](img/my_exercise_header.png) file_18.1-1'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_18.1-1'
- en: a = int(input())
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: b = int(input())
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: b = int(input())
- en: 'if a > 3:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 3:'
- en: 'print("Message #1")'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #1")'
- en: 'elif a > 4 and b <= 10:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a > 4 and b <= 10:'
- en: 'print("Message #2")'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #2")'
- en: 'print("Message #3")'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #3")'
- en: 'elif a * 2 == -26:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a * 2 == -26:'
- en: 'print("Message #4")'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #4")'
- en: 'print("Message #5")'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #5")'
- en: b += 1
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: b += 1
- en: 'elif b == 1:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif b == 1:'
- en: 'print("Message #6")'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #6")'
- en: 'else:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'print("Message #7")'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #7")'
- en: 'print("Message #8")'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("消息 #8")'
- en: print("The end!")
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: print("结束！")
- en: Solution
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: i)For the input values of 5 and 8, the trace table looks like this.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: i)对于输入值5和8，跟踪表如下所示。
- en: '| Step | Statement | Notes | a | b |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | b |'
- en: '| 1 | a = int(input()) | User enters the value 5 | 5 | ? |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) | 用户输入值 5 | 5 | ? |'
- en: '| 2 | b = int(input()) | User enters the value 8 | 5 | 8 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = int(input()) | 用户输入值 8 | 5 | 8 |'
- en: '| 3 | if a > 3: | This evaluates to True |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if a > 3: | 这将评估为 True |'
- en: '| 4 | print("Message #1") | It displays: Message #1 |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 4 | print("消息 #1") | 它显示：消息 #1 |'
- en: '| 5 | print("The end!") | It displays: The end! |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print("结束！") | 它显示：结束！ |'
- en: '![](img/notice.jpg)Note that even though the second Boolean expression (a >
    4 and b <= 10) could also have evaluated to True, it was never checked.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)注意，尽管第二个布尔表达式（a > 4 and b <= 10）也可能评估为 True，但它从未被检查过。'
- en: ii)For the input values of −13 and 0, the trace table looks like this.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: ii)对于输入值 -13 和 0，跟踪表如下所示。
- en: '| Step | Statement | Notes | a | b |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | b |'
- en: '| 1 | a = int(input()) | User enters the value −13 | −13 | ? |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) | 用户输入值 -13 | -13 | ? |'
- en: '| 2 | b = int(input()) | User enters the value 0 | −13 | 0 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = int(input()) | 用户输入值 0 | -13 | 0 |'
- en: '| 3 | if a > 3: | This evaluates to False |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if a > 3: | 这将评估为 False |'
- en: '| 4 | elif a > 4 and b <= 10: | This evaluates to False |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 4 | elif a > 4 and b <= 10: | 这将评估为 False |'
- en: '| 5 | elif a * 2 == ‑26: | This evaluates to True |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 5 | elif a * 2 == -26: | 这将评估为 True |'
- en: '| 6 | print("Message #4") | It displays: Message #4 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 6 | print("消息 #4") | 它显示：消息 #4 |'
- en: '| 7 | print("Message #5") | It displays: Message #5 |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| 7 | print("消息 #5") | 它显示：消息 #5 |'
- en: '| 8 | b += 1 |   | −13 | 1 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| 8 | b += 1 |   | -13 | 1 |'
- en: '| 9 | print("The end!") | It displays: The end! |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 9 | print("结束！") | 它显示：结束！ |'
- en: '![](img/notice.jpg)Note that after step 8 the fourth Boolean expression (b
    == 1) could also have evaluated to True, but it was never checked.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)注意，在第 8 步之后，第四个布尔表达式（b == 1）也可能评估为 True，但它从未被检查过。'
- en: iii)For the input values of 1 and −1, the trace table looks like this.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: iii)对于输入值 1 和 -1，跟踪表如下所示。
- en: '| Step | Statement | Notes | a | b |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | b |'
- en: '| 1 | a = int(input()) | User enters the value 1 | 1 | ? |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = int(input()) | 用户输入值 1 | 1 | ? |'
- en: '| 2 | b = int(input()) | User enters the value −1 | 1 | −1 |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = int(input()) | 用户输入值 -1 | 1 | -1 |'
- en: '| 3 | if a > 3: | This evaluates to False |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if a > 3: | 这将评估为 False |'
- en: '| 4 | elif a > 4 and b <= 10: | This evaluates to False |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| 4 | elif a > 4 and b <= 10: | 这将评估为 False |'
- en: '| 5 | elif a * 2 == ‑26: | This evaluates to False |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| 5 | elif a * 2 == -26: | 这将评估为 False |'
- en: '| 6 | elif b == 1: | This evaluates to False |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| 6 | elif b == 1: | 这将评估为 False |'
- en: '| 7 | print("Message #7") | It displays: Message #7 |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 7 | print("消息 #7") | 它显示：消息 #7 |'
- en: '| 8 | print("Message #8") | It displays: Message #8 |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 8 | print("消息 #8") | 它显示：消息 #8 |'
- en: '| 9 | print("The end!") | It displays: The end! |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 9 | print("结束！") | 它显示：结束！ |'
- en: Exercise 18.1-2 The Days of the Week
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 18.1-2 星期几
- en: Design a flowchart and write the corresponding Python program that prompts the
    user to enter an integer between 1 and 5, and then displays the corresponding
    work day (Monday, Tuesday, Wednesday, Thursday, or Friday). If the value entered
    is invalid, an error message must be displayed.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的 Python 程序，提示用户输入一个介于 1 和 5 之间的整数，然后显示相应的工作日（星期一、星期二、星期三、星期四或星期五）。如果输入的值无效，必须显示错误消息。
- en: Solution
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The flowchart and the corresponding Python program that solve this exercise
    are presented below.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图和解决此练习的相应 Python 程序如下所示。
- en: '![Image](img/chapter18-02.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter18-02.png)'
- en: '![](img/my_exercise_header.png) file_18.1-2'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_18.1-2'
- en: 'day = int(input("Enter an integer between 1 and 5: "))'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: day = int(input("输入一个介于 1 和 5 之间的整数："))
- en: 'if day == 1:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 'if day == 1:'
- en: print("Monday")
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: print("星期一")
- en: 'elif day == 2:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif day == 2:'
- en: print("Tuesday")
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: print("星期二")
- en: 'elif day == 3:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif day == 3:'
- en: print("Wednesday")
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: print("星期三")
- en: 'elif day == 4:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif day == 4:'
- en: print("Thursday")
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: print("星期四")
- en: 'elif day == 5:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif day == 5:'
- en: print("Friday")
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: print("星期五")
- en: 'else:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Invalid Number")
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: print("无效数字")
- en: Exercise 18.1-3 Counting the Digits
  id: totrans-106
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 18.1-3 计数数字
- en: Write a Python program that prompts the user to enter an integer between 0 and
    999 and then counts its total number of digits. In the end, a message “You entered
    a N-digit number” must be displayed, where N is the total number of digits. Assume
    that the user enters a valid integer between 0 and 999.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入一个介于 0 和 999 之间的整数，然后计算它的总位数。最后，显示一条消息“你输入了一个 N 位数”，其中
    N 是总位数。假设用户输入了一个介于 0 和 999 之间的有效整数。
- en: Solution
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: You may be trying to figure out how to solve this exercise using DIV operations.
    You are probably thinking of dividing the user-provided integer by 10 and checking
    whether the integer quotient is 0\. If it is, this means that the user-provided
    integer is a one-digit integer. Then, you can divide it by 100 or by 1000 to check
    for two-digit and three-digit integers, respectively. Your thinking is partly
    true, and your thoughts are depicted in the following code fragment.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能正在试图找出如何使用除法操作来解决这个练习。你可能正在考虑将用户提供的整数除以10，并检查整数商是否为0。如果是，这意味着用户提供的整数是一位数。然后，你可以除以100或1000来检查两位数和三位数。你的想法部分是正确的，你的想法在下面的代码片段中得到了体现。
- en: 'if x // 10 == 0:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x // 10 == 0:'
- en: digits = 1
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: digits = 1
- en: 'elif x // 100 == 0:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x // 100 == 0:'
- en: digits = 2
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: digits = 2
- en: 'elif x // 1000 == 0:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x // 1000 == 0:'
- en: digits = 3
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: digits = 3
- en: If the user-provided integer (in variable x) has one digit, the first Boolean
    expression evaluates to True and the rest of the Boolean expressions are never
    checked! If the user-provided integer has two digits, the first Boolean expression
    evaluates to False, the second one evaluates to True, and the last one is never
    checked! Finally, if the user-provided integer has three digits, both the first
    and the second Boolean expressions evaluate to False and the last one evaluates
    to True!
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户提供的整数（变量x）是一位数，第一个布尔表达式计算结果为True，其余的布尔表达式永远不会被检查！如果用户提供的整数是两位数，第一个布尔表达式计算结果为False，第二个计算结果为True，最后一个永远不会被检查！最后，如果用户提供的整数是三位数，第一个和第二个布尔表达式都计算结果为False，最后一个计算结果为True！
- en: It seems accurate, doesn't it? So, where does the issue lie?
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎很准确，不是吗？那么，问题出在哪里？
- en: 'Consider if the wording of the exercise were “Write a Python program that prompts
    the user to enter an integer and displays a message when the user-provided integer
    consists of two digits”. In all likelihood, you would proceed as follows:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑如果练习的措辞是“编写一个Python程序，提示用户输入一个整数，当用户提供的整数由两位数字组成时显示一条消息”。很可能会按照以下步骤进行：
- en: 'x = int(input("Enter an integer: "))'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input("输入一个整数："))
- en: 'if x // 100 == 0:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x // 100 == 0:'
- en: print("A 2-digit integer entered")
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入了一个2位整数")
- en: However, this code is flawed! While the Boolean expression x // 100 == 0 works
    correctly for all user-provided integers with two digits or more, unfortunately,
    it fails for one-digit integers (as it does not evaluate to False for them). Therefore,
    using integer division is not the right approach. The correct solution is much
    simpler than you might believe!
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这段代码是有缺陷的！虽然布尔表达式x // 100 == 0对于所有两位数或更多位的用户提供的整数都工作得很好，但不幸的是，它对于一位数（因为它对于它们不计算为False）不起作用。因此，使用整数除法不是正确的方法。正确的解决方案比你想象的要简单得多！
- en: What is the smallest two-digit integer that you can think of? It is 10, right?
    And what is the greatest one that you can think of? It is 99, right? So, the proper
    solution is as follows.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你能想到的最小的两位整数是什么？是10，对吧？你能想到的最大的是多少？是99，对吧？所以，正确的解决方案如下。
- en: 'x = int(input("Enter an integer: "))'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input("输入一个整数："))
- en: 'if 10 <= x <= 99:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 10 <= x <= 99:'
- en: print("A 2-digit integer entered")
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入了一个2位整数")
- en: According to all these, the complete solution to the exercise is as follows!
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 根据所有这些，练习的完整解决方案如下！
- en: '![](img/my_exercise_header.png) file_18.1-3a'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_18.1-3a'
- en: 'x = int(input("Enter an integer (0 - 999): "))'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input("输入一个整数（0 - 999）："))
- en: 'if 0 <= x <= 9:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 0 <= x <= 9:'
- en: digits = 1
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: digits = 1
- en: 'elif 10 <= x <= 99:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 10 <= x <= 99:'
- en: digits = 2
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: digits = 2
- en: 'else:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: digits = 3
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: digits = 3
- en: print("A ", digits, "-digit integer entered", sep = "")
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入了一个{}位整数".format(digits), sep = "")
- en: 'And, if you wish to make your program even better and display an error message
    to the user when they enter a value that is not between 0 and 999, you can do
    something like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让你的程序更好，并在用户输入不在0到999之间的值时向用户显示错误消息，你可以这样做：
- en: '![](img/my_exercise_header.png) file_18.1-3b'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_18.1-3b'
- en: 'x = int(input("Enter an integer (0 - 999): "))'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input("输入一个整数（0 - 999）："))
- en: 'if 0 <= x <= 9:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 0 <= x <= 9:'
- en: print("A 1-digit integer entered")
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入了一个1位整数")
- en: 'elif 10 <= x <= 99:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 10 <= x <= 99:'
- en: print("A 2-digit integer entered")
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入了一个2位整数")
- en: 'elif 100 <= x <= 999:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 100 <= x <= 999:'
- en: print("A 3-digit integer entered")
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入了一个3位整数")
- en: 'else:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Wrong number!")
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入错误！")
- en: '18.2 Review Questions: True/False'
  id: totrans-148
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.2 复习问题：正确/错误
- en: Choose true or false for each of the following statements.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确或错误。
- en: 1)The multiple-alternative decision structure is used to expand the number of
    alternatives.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 1)多重选择决策结构用于扩展选择数量。
- en: 2)The multiple-alternative decision structure can have at most three alternatives.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 2)多重选择决策结构最多可以有三种选择。
- en: 3)In a multiple-alternative decision structure, once a Boolean expression evaluates
    to True, the next Boolean expression is also evaluated.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 3)在多重选择决策结构中，一旦布尔表达式评估为真，下一个布尔表达式也会被评估。
- en: 4)In a multiple-alternative decision structure, the last statement or block
    of statements N+1 (appearing below the else keyword) is always executed.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 4)在多重选择决策结构中，位于else关键字下面的最后一个语句或语句块N+1总是会被执行。
- en: 5)In a multiple-alternative decision structure, the last statement or block
    of statements N+1 (appearing below the else keyword) is executed when at least
    one of the previous Boolean expressions has evaluated to True.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在多重选择决策结构中，当至少一个之前的布尔表达式评估为真时，会执行最后一个语句或语句块N+1（位于else关键字下面）。
- en: 6)In a multiple-alternative decision structure, the last statement or block
    of statements N+1, and by extension the else keyword, can be omitted.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在多重选择决策结构中，最后一个语句或语句块N+1，以及扩展的else关键字，可以被省略。
- en: 7)In the following code fragment, the statement y += 1 is executed only when
    variable a contains a value other than 1, 2, or 3.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在以下代码片段中，只有当变量a包含的值不是1、2或3时，才会执行语句y += 1。
- en: 'if a == 1:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == 1:'
- en: x += 5
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: x += 5
- en: 'elif a == 2:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 2:'
- en: x -= 2
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: x -= 2
- en: 'elif a == 3:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 3:'
- en: x -= 9
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: x -= 9
- en: 'else:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x += 3
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: x += 3
- en: y += 1
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: y += 1
- en: 8)In the code fragment of the previous exercise, the statement x += 3 is executed
    only when variable a contains a value other than 1, 2, or 3.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 8)在上一个练习的代码片段中，只有当变量a包含的值不是1、2或3时，才会执行语句x += 3。
- en: 18.3 Review Exercises
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 18.3 复习练习
- en: Complete the following exercises.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Complete the following exercises.
- en: 1)Create a trace table to determine the values of the variables in each step
    for four different executions of the next Python program.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 1)创建一个跟踪表，以确定在下一个Python程序的四个不同执行中每一步的变量值。
- en: 'The input values for the four executions are: (i) 5, (ii) 150, (iii) 250, and
    (iv) −1.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'The input values for the four executions are: (i) 5, (ii) 150, (iii) 250, and
    (iv) −1.'
- en: q = int(input())
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: q = int(input())
- en: 'if 0 < q <= 50:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 0 < q <= 50:'
- en: b = 1
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: b = 1
- en: 'elif 50 < q <= 100:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 50 < q <= 100:'
- en: b = 2
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: b = 2
- en: 'elif 100 < q <= 200:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 100 < q <= 200:'
- en: b = 3
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: b = 3
- en: 'else:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: b = 4
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: b = 4
- en: print(b)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: print(b)
- en: 2)Create a trace table to determine the values of the variables in each step
    for three different executions of the next Python program.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 2)创建一个跟踪表，以确定在下一个Python程序的三个不同执行中每一步的变量值。
- en: 'The input values for the three executions are: (i) 5, (ii) 150, and (iii) −1.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'The input values for the three executions are: (i) 5, (ii) 150, and (iii) −1.'
- en: amount = float(input())
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: amount = float(input())
- en: discount = 0
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 0
- en: 'if amount < 20:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'if amount < 20:'
- en: discount = 0
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 0
- en: 'elif 20 <= amount < 60:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 20 <= amount < 60:'
- en: discount = 5
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 5
- en: 'elif 60 <= amount < 100:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 60 <= amount < 100:'
- en: discount = 10
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 10
- en: 'elif amount >= 100:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount >= 100:'
- en: discount = 15
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 15
- en: payment = amount - amount * discount / 100
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: payment = amount - amount * discount / 100
- en: print(discount, ",", payment)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: print(discount, ",", payment)
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. Then, design the corresponding
    flowchart.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 3)创建一个跟踪表，以确定在下一个Python程序的三个不同执行中每一步的变量值。然后，设计相应的流程图。
- en: 'The input values for the three executions are: (i) 1, (ii) 3, and (iii) 250.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'The input values for the three executions are: (i) 1, (ii) 3, and (iii) 250.'
- en: a = int(input())
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: x = 0
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: x = 0
- en: y = 0
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: y = 0
- en: 'if a == 1:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == 1:'
- en: x = x + 5
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: x = x + 5
- en: y = y + 5
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: y = y + 5
- en: 'elif a == 2:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 2:'
- en: x = x - 2
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: x = x - 2
- en: y -= 1
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: y -= 1
- en: 'elif a == 3:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 3:'
- en: x = x - 9
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: x = x - 9
- en: y = y + 3
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: y = y + 3
- en: 'else:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x = x + 3
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: x = x + 3
- en: y += 1
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: y += 1
- en: print(x, ",", y)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, ",", y)
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. Then, design the corresponding
    flowchart.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 4)创建一个跟踪表，以确定在下一个Python程序的三个不同执行中每一步的变量值。然后，设计相应的流程图。
- en: 'The input values for the three executions are: (i) 10, 2, 5; (ii) 5, 2, 3;
    and (iii) 4, 6, 2.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 'The input values for the three executions are: (i) 10, 2, 5; (ii) 5, 2, 3;
    and (iii) 4, 6, 2.'
- en: a = int(input())
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: x = int(input())
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: y = float(input())
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: y = float(input())
- en: 'if a == 10:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a == 10:'
- en: x = x % 2
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: x = x % 2
- en: y = y ** 2
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: y = y ** 2
- en: 'elif a == 3:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 3:'
- en: x = x * 2
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: x = x * 2
- en: y -= 1
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: y -= 1
- en: 'elif a == 5:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a == 5:'
- en: x = x + 4
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: x = x + 4
- en: y += 7
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: y += 7
- en: 'else:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x -= 3
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: x -= 3
- en: y += 1
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: y += 1
- en: print(x, ",", y)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, ",", y)
- en: 5)Write the following Python program using correct indentation.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 5)使用正确的缩进来编写以下Python程序。
- en: a = float(input())
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: 'if a < 1:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a < 1:'
- en: y = 5 + a
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: y = 5 + a
- en: print(y)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 'elif a < 5:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 5:'
- en: y = 23 / a
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: y = 23 / a
- en: print(y)
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 'elif a < 10:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 10:'
- en: y = 5 * a
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: y = 5 * a
- en: print(y)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 'else:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Error!")
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: print("Error!")
- en: 6)Write a Python program that prompts the user to enter two integers and then
    displays a message indicating whether both numbers are odd or both are even; otherwise
    the message “Nothing special” must be displayed.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 6)编写一个Python程序，提示用户输入两个整数，然后显示一条消息，指出两个数是否都是奇数或都是偶数；否则显示消息“没有特殊之处”。
- en: 7)Two football teams play against each other in the UEFA Champions League. Write
    a Python program that prompts the user to enter the names of the two teams and
    the goals each team scored and then displays the name of the winner or the message
    “It's a tie!” when both teams score equal number of goals. Assume that the user
    enters valid values.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 7)两支足球队在欧洲冠军联赛中对战。编写一个Python程序，提示用户输入两队的名称以及每队得分，然后当两队得分相等时显示获胜队的名称或消息“平局！”假设用户输入了有效的值。
- en: 8)Design a flowchart and write the corresponding Python program that lets the
    user enter an integer between −9999 and 9999, and then counts its total number
    of digits. In the end, a message “You entered a N-digit number” is displayed,
    where N is the total number of digits. Assume that the user enters a valid integer
    between −9999 and 9999.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 8)设计一个流程图并编写相应的Python程序，允许用户输入一个介于-9999和9999之间的整数，然后计算其总位数。最后，显示消息“您输入了一个N位数”，其中N是总位数。假设用户输入了-9999和9999之间的有效整数。
- en: 9)Rewrite the Python program of the previous exercise to validate the data input.
    An error message must be displayed when the user enters an invalid value.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 9)重写上一个练习的Python程序以验证数据输入。当用户输入无效值时，必须显示错误消息。
- en: '10)Write a Python program that displays the following menu:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 10)编写一个Python程序，显示以下菜单：
- en: 1)Convert USD to Euro (EUR)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将美元转换为欧元 (EUR)
- en: 2)Convert USD to British Pound Sterling (GBP)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将美元转换为英镑 (GBP)
- en: 3)Convert USD to Japanese Yen (JPY)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将美元转换为日元 (JPY)
- en: 4)Convert USD to Canadian Dollar (CAD)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 4)将美元转换为加拿大元 (CAD)
- en: It then prompts the user to enter a choice (of 1, 2, 3, or 4) and an amount
    in US dollars and calculates and displays the required value. Assume that the
    user enters valid values. It is given that
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 然后提示用户输入一个选择（1、2、3或4）和美元金额，计算并显示所需的价值。假设用户输入了有效的值。已知
- en: ►$1 = 0.94 EUR (€)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: ►$1 = 0.94 欧元 (EUR)
- en: ►$1 = 0.81 GBP (£)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: ►$1 = 0.81 英镑 (£)
- en: ►$1 = ¥ 149.11 JPY
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: ►$1 = ¥ 149.11 日元 (JPY)
- en: ►$1 = 1.36 CAD ($)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: ►$1 = 1.36 加拿大元 (CAD)
- en: 11)Write a Python program that prompts the user to enter the number of a month
    between 1 and 12, and then displays the corresponding season. Assume that the
    user enters a valid value. It is given that
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 11)编写一个Python程序，提示用户输入1到12月份的数字，然后显示相应的季节。假设用户输入了有效的值。已知
- en: ►Winter includes months 12, 1, and 2
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: ►冬季包括12月、1月和2月
- en: ►Spring includes months 3, 4, and 5
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ►春季包括3月、4月和5月
- en: ►Summer includes months 6, 7, and 8
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: ►夏季包括6月、7月和8月
- en: ►Fall (Autumn) includes months 9, 10, and 11
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: ►秋季包括9月、10月和11月
- en: 12)Rewrite the Python program of the previous exercise to validate the data
    input. An error message must be displayed when the user enters an invalid value.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 12)重写上一个练习的Python程序以验证数据输入。当用户输入无效值时，必须显示错误消息。
- en: 13)Write a Python program that prompts the user to enter the name of a month,
    and then displays the corresponding number (1 for January, 2 for February, and
    so on). If the value entered is invalid, an error message must be displayed.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 13)编写一个Python程序，提示用户输入月份的名称，然后显示相应的数字（1代表一月，2代表二月，依此类推）。如果输入的值无效，必须显示错误消息。
- en: 14)The most popular and commonly used grading system in the United States uses
    discrete evaluation in the form of letter grades. Design a flowchart and write
    the corresponding Python program that prompts the user to enter a letter between
    A and F, and then displays the corresponding percentage according to the following
    table.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 14)美国最流行和常用的评分系统使用字母等级的离散评估。设计一个流程图并编写相应的Python程序，提示用户输入一个介于A和F之间的字母，然后根据以下表格显示相应的百分比。
- en: '| Grade | Percentage |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 等级 | 百分比 |'
- en: '| A | 90 ‐ 100 |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| A | 90 ‐ 100 |'
- en: '| B | 80 ‐ 89 |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| B | 80 ‐ 89 |'
- en: '| C | 70 ‐ 79 |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| C | 70 ‐ 79 |'
- en: '| D | 60 ‐ 69 |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| D | 60 ‐ 69 |'
- en: '| E / F | 0 ‐ 59 |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| E / F | 0 ‐ 59 |'
- en: Assume that the user enters a valid value.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户输入了有效的值。
- en: '15)Design a flowchart and write the corresponding Python program that displays
    the following menu:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 15)设计一个流程图并编写相应的Python程序，显示以下菜单：
- en: 1)Convert Miles to Yards
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将英里转换为码
- en: 2)Convert Miles to Feet
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将英里转换为英尺
- en: 3)Convert Miles to Inches
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将英里转换为英寸
- en: It then prompts the user to enter a choice (of 1, 2, or 3) and a distance in
    miles. Then, it calculates and displays the required value. Assume that the user
    enters a valid value for the distance. However, if the choice entered is invalid,
    an error message must be displayed. It is given that
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 然后提示用户输入选择（1、2或3）和距离（英里）。然后，它计算并显示所需值。假设用户输入了有效的距离值。然而，如果输入的选择无效，必须显示错误信息。已知
- en: ►1 mile = 1760 yards
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: ►1英里 = 1760码
- en: ►1 mile = 5280 feet
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: ►1英里 = 5280英尺
- en: ►1 mile = 63360 inches
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: ►1英里 = 63360英寸
- en: 16)Roman numerals are shown in the following table.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 16)罗马数字如下表所示。
- en: '| Number | Roman Numeral |'
  id: totrans-282
  prefs: []
  type: TYPE_TB
  zh: '| 数字 | 罗马数字 |'
- en: '| 1 | I |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| 1 | I |'
- en: '| 2 | II |'
  id: totrans-284
  prefs: []
  type: TYPE_TB
  zh: '| 2 | II |'
- en: '| 3 | III |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 3 | III |'
- en: '| 4 | IV |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| 4 | IV |'
- en: '| 5 | V |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| 5 | V |'
- en: '| 6 | VI |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| 6 | VI |'
- en: '| 7 | VII |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| 7 | VII |'
- en: '| 8 | VIII |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| 8 | VIII |'
- en: '| 9 | IX |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| 9 | IX |'
- en: '| 10 | X |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| 10 | X |'
- en: Write a Python program that prompts the user to enter a Roman numeral between
    I and X, and then displays the corresponding number. However, if the choice entered
    is invalid, an error message must be displayed.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一个介于I和X之间的罗马数字，然后显示相应的数字。然而，如果输入的选择无效，必须显示错误信息。
- en: '17)An online supermarket awards points to its customers based on the total
    number of wine bottles purchased each month. The points are awarded as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 17)在线超市根据客户每月购买的酒瓶总数来奖励积分。积分的分配如下：
- en: ►If the customer purchases 1 bottle of wine, they are awarded 3 points.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果客户购买1瓶酒，他们将获得3分。
- en: ►If the customer purchases 2 bottles of wine, they are awarded 10 points.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果客户购买2瓶酒，他们将获得10分。
- en: ►If the customer purchases 3 bottles of wine, they are awarded 20 points.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果客户购买3瓶酒，他们将获得20分。
- en: ►If the customer purchases 4 bottles of wine or more, they are awarded 45 points.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: ►如果客户购买4瓶或更多的酒，他们将获得45分。
- en: Using a case decision structure, write a Python program that prompts the user
    to enter the total number of wine bottles they have purchased in a month and then
    displays the number of points awarded. Assume that the user enters a valid value.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 使用情况决策结构，编写一个Python程序，提示用户输入他们在一个月内购买的酒瓶总数，然后显示获得的积分数。假设用户输入了有效的值。
- en: 18)Write a Python program that prompts the user to enter their name, and then
    displays “Hello NN!” or “Hi NN!” or “What's up NN!”, where NN is the name of the
    user. The message to be displayed must be chosen randomly.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 18)编写一个Python程序，提示用户输入他们的名字，然后随机显示“Hello NN!”、“Hi NN!”或“What's up NN!”，其中NN是用户的名字。要显示的消息必须随机选择。
- en: 19)Write a Python program that lets the user enter a word such as "zero", “one”
    or "two", and then converts it into the corresponding digit, such as 0, 1, or
    2\. This must be done for the numbers 0 to 9\. Display "I don't know this number!"
    when the user enters an unknown.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 19)编写一个Python程序，允许用户输入一个如“zero”、“one”或“two”之类的单词，然后将其转换为相应的数字，如0、1或2。这必须对0到9的数字都这样做。当用户输入未知数字时，显示“I
    don't know this number!”。
- en: 20)The Beaufort^([[15]](footnotes.html#Endnote_15)) scale is an empirical measure
    that relates wind speed to observed conditions on land or at sea. Write a Python
    program that prompts the user to enter the Beaufort number, and then displays
    the corresponding description from the following table. However, if the number
    entered is invalid, an error message must be displayed.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 20)蒲福风级（^([[15]](footnotes.html#Endnote_15)))是一种经验测量方法，它将风速与陆地或海洋上的观察条件联系起来。编写一个Python程序，提示用户输入蒲福风级，然后显示以下表格中的相应描述。然而，如果输入的数字无效，必须显示错误信息。
- en: '| Beaufort Number | Description |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| 蒲福风级 | 描述 |'
- en: '| 0 | Calm |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| 0 | 平静 |'
- en: '| 1 | Light air |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 微风 |'
- en: '| 2 | Light breeze |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 微风 |'
- en: '| 3 | Gentle breeze |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 3 | 微风 |'
- en: '| 4 | Moderate breeze |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| 4 | 中等风 |'
- en: '| 5 | Fresh breeze |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| 5 | 新风 |'
- en: '| 6 | Strong breeze |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| 6 | 强风 |'
- en: '| 7 | Moderate gale |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| 7 | 中等风暴 |'
- en: '| 8 | Gale |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| 8 | 风暴 |'
- en: '| 9 | Strong gale |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| 9 | 强风暴 |'
- en: '| 10 | Storm |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 风暴 |'
- en: '| 11 | Violent storm |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| 11 | 狂风暴雨 |'
- en: '| 12 | Hurricane force |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| 12 | 飓风力量 |'
- en: 21)Write a Python program that prompts the user to enter a number with one decimal
    digit between 0.0 and 9.9, and then displays the number as English text. For example,
    if the user enters 2.3, the program must display “Two point three”. Assume that
    the user enters a valid value.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 21)编写一个Python程序，提示用户输入一个介于0.0和9.9之间的一位小数的数字，然后以英文文本的形式显示该数字。例如，如果用户输入2.3，程序必须显示“Two
    point three”。假设用户输入了有效的值。
- en: 'Hint: Avoid checking each real number individually, as this would require a
    multiple-alternative decision structure with 100 cases! Try to find a more efficient
    and clever approach instead!'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：避免逐个检查每个实数，因为这需要具有100个案例的多重选择决策结构！尝试找到更高效和巧妙的方法吧！
