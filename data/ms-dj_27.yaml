- en: Appendix F. Request and Response Objects
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录 F. 请求和响应对象
- en: Django uses request and response objects to pass state through the system.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用请求和响应对象通过系统传递状态。
- en: When a page is requested, Django creates an `HttpRequest` object that contains
    metadata about the request. Then Django loads the appropriate view, passing the
    `HttpRequest` as the first argument to the view function. Each view is responsible
    for returning an `HttpResponse` object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当请求页面时，Django会创建一个包含有关请求的元数据的`HttpRequest`对象。然后Django加载适当的视图，将`HttpRequest`作为第一个参数传递给视图函数。每个视图负责返回一个`HttpResponse`对象。
- en: This document explains the APIs for `HttpRequest` and `HttpResponse` objects,
    which are defined in the `django.http` module.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本文档解释了`django.http`模块中定义的`HttpRequest`和`HttpResponse`对象的API。
- en: HttpRequest objects
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HttpRequest对象
- en: Attributes
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: All attributes should be considered read-only, unless stated otherwise below.
    `session` is a notable exception.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 除非以下另有说明，否则应将所有属性视为只读。`session`是一个值得注意的例外。
- en: '**HttpRequest.scheme**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.scheme**'
- en: A string representing the scheme of the request (`http` or `https` usually).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 表示请求的方案（通常是`http`或`https`）的字符串。
- en: '**HttpRequest.body**'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.body**'
- en: 'The raw HTTP request body as a byte string. This is useful for processing data
    in different ways than conventional HTML forms: binary images, XML payload etc.
    For processing conventional form data, use `HttpRequest.POST`.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的HTTP请求正文作为字节字符串。这对于以不同于常规HTML表单的方式处理数据很有用：二进制图像，XML有效负载等。要处理常规表单数据，请使用`HttpRequest.POST`。
- en: You can also read from an HttpRequest using a file-like interface. See `HttpRequest.read()`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用类似文件的接口从HttpRequest中读取。请参阅`HttpRequest.read()`。
- en: '**HttpRequest.path**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.path**'
- en: A string representing the full path to the requested page, not including the
    domain.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 表示所请求页面的完整路径的字符串，不包括域名。
- en: 'Example: `/music/bands/the_beatles/`'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：`/music/bands/the_beatles/`
- en: '**HttpRequest.path_info**'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.path_info**'
- en: Under some web server configurations, the portion of the URL after the host
    name is split up into a script prefix portion and a path info portion. The `path_info`
    attribute always contains the path info portion of the path, no matter what web
    server is being used. Using this instead of `path` can make your code easier to
    move between test and deployment servers.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些Web服务器配置下，主机名后的URL部分被分成脚本前缀部分和路径信息部分。`path_info`属性始终包含路径信息部分的路径，无论使用的是哪个Web服务器。使用这个而不是`path`可以使您的代码更容易在测试和部署服务器之间移动。
- en: For example, if the `WSGIScriptAlias` for your application is set to `/minfo`,
    then `path` might be `/minfo/music/bands/the_beatles/` and `path_info` would be
    `/music/bands/the_beatles/`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您的应用程序的`WSGIScriptAlias`设置为`/minfo`，那么`path`可能是`/minfo/music/bands/the_beatles/`，而`path_info`将是`/music/bands/the_beatles/`。
- en: '**HttpRequest.method**'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.method**'
- en: 'A string representing the HTTP method used in the request. This is guaranteed
    to be uppercase. Example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 表示请求中使用的HTTP方法的字符串。这是保证大写的。例如：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**HttpRequest.encoding**'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.encoding**'
- en: A string representing the current encoding used to decode form submission data
    (or `None`, which means the `DEFAULT_CHARSET` setting is used). You can write
    to this attribute to change the encoding used when accessing the form data.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 表示用于解码表单提交数据的当前编码的字符串（或`None`，表示使用`DEFAULT_CHARSET`设置）。您可以写入此属性以更改访问表单数据时使用的编码。
- en: Any subsequent attribute accesses (such as reading from `GET` or `POST`) will
    use the new `encoding` value. Useful if you know the form data is not in the `DEFAULT_CHARSET`
    encoding.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 任何后续的属性访问（例如从`GET`或`POST`读取）将使用新的`encoding`值。如果您知道表单数据不是使用`DEFAULT_CHARSET`编码的，则这很有用。
- en: '**HttpRequest.GET**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.GET**'
- en: A dictionary-like object containing all given HTTP `GET` parameters. See the
    `QueryDict` documentation below.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有给定的HTTP `GET`参数的类似字典的对象。请参阅下面的`QueryDict`文档。
- en: '**HttpRequest.POST**'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.POST**'
- en: A dictionary-like object containing all given HTTP `POST` parameters, providing
    that the request contains form data. See the `QueryDict` documentation below.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有给定的HTTP `POST`参数的类似字典的对象，前提是请求包含表单数据。请参阅下面的`QueryDict`文档。
- en: If you need to access raw or non-form data posted in the request, access this
    through the `HttpRequest.body` attribute instead.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要访问请求中发布的原始或非表单数据，请通过`HttpRequest.body`属性访问。
- en: It's possible that a request can come in via `POST` with an empty `POST` dictionary-if,
    say, a form is requested via the `POST` HTTP method but does not include form
    data. Therefore, you shouldn't use `if request.POST` to check for use of the `POST`
    method; instead, use `if request.method == 'POST'` (see above).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会通过`POST`以空的`POST`字典形式进行请求-例如，通过`POST` HTTP方法请求表单，但不包括表单数据。因此，您不应该使用`if request.POST`来检查是否使用了`POST`方法；而是使用`if
    request.method == 'POST'`（见上文）。
- en: 'Note: `POST` does *not* include file-upload information. See `FILES`.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：`POST`不包括文件上传信息。请参阅`FILES`。
- en: '**HttpRequest.COOKIES**'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.COOKIES**'
- en: A standard Python dictionary containing all cookies. Keys and values are strings.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有cookie的标准Python字典。键和值都是字符串。
- en: '**HttpRequest.FILES**'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.FILES**'
- en: A dictionary-like object containing all uploaded files. Each key in `FILES`
    is the `name` from the `<input type="file" name="" />`. Each value in `FILES`
    is an `UploadedFile`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有上传文件的类似字典的对象。`FILES`中的每个键都是`<input type="file" name="" />`中的`name`。`FILES`中的每个值都是`UploadedFile`。
- en: Note that `FILES` will only contain data if the request method was `POST` and
    the `<form>` that posted to the request had `enctype="multipart/form-data"`. Otherwise,
    `FILES` will be a blank dictionary-like object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，如果请求方法是`POST`，并且`<form>`发布到请求的`enctype="multipart/form-data"`，则`FILES`将只包含数据。否则，`FILES`将是一个空的类似字典的对象。
- en: '**HttpRequest.META**'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.META**'
- en: 'A standard Python dictionary containing all available HTTP headers. Available
    headers depend on the client and server, but here are some examples:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 包含所有可用的HTTP标头的标准Python字典。可用的标头取决于客户端和服务器，但这里有一些示例：
- en: '`CONTENT_LENGTH`: The length of the request body (as a string)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTENT_LENGTH`：请求正文的长度（作为字符串）'
- en: '`CONTENT_TYPE`: The MIME type of the request body'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CONTENT_TYPE`: 请求主体的MIME类型'
- en: '`HTTP_ACCEPT_ENCODING`: Acceptable encodings for the response'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP_ACCEPT_ENCODING`: 响应的可接受编码'
- en: '`HTTP_ACCEPT_LANGUAGE`: Acceptable languages for the response'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP_ACCEPT_LANGUAGE`: 响应的可接受语言'
- en: '`HTTP_HOST`: The HTTP Host header sent by the client'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP_HOST`: 客户端发送的HTTP Host标头'
- en: '`HTTP_REFERER`: The referring page, if any'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP_REFERER`: 引用页面（如果有）'
- en: '`HTTP_USER_AGENT`: The client''s user-agent string'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HTTP_USER_AGENT`: 客户端的用户代理字符串'
- en: '`QUERY_STRING`: The query string, as a single (unparsed) string'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QUERY_STRING`: 查询字符串，作为单个（未解析的）字符串'
- en: '`REMOTE_ADDR`: The IP address of the client'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOTE_ADDR`: 客户端的IP地址'
- en: '`REMOTE_HOST`: The hostname of the client'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOTE_HOST`: 客户端的主机名'
- en: '`REMOTE_USER`: The user authenticated by the web server, if any'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REMOTE_USER`: 由Web服务器认证的用户（如果有）'
- en: '`REQUEST_METHOD`: A string such as "`GET`" or "`POST`"'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`REQUEST_METHOD`: 诸如"`GET`"或"`POST`"的字符串'
- en: '`SERVER_NAME`: The hostname of the server'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERVER_NAME`: 服务器的主机名'
- en: '`SERVER_PORT`: The port of the server (as a string)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SERVER_PORT`: 服务器的端口（作为字符串）'
- en: With the exception of `CONTENT_LENGTH` and `CONTENT_TYPE`, as given above, any
    HTTP headers in the request are converted to `META` keys by converting all characters
    to uppercase, replacing any hyphens with underscores and adding an `HTTP_` prefix
    to the name. So, for example, a header called `X-Bender` would be mapped to the
    `META` key `HTTP_X_BENDER`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`CONTENT_LENGTH`和`CONTENT_TYPE`之外，请求中的任何HTTP标头都会通过将所有字符转换为大写字母，将任何连字符替换为下划线，并在名称前添加`HTTP_`前缀来转换为`META`键。因此，例如，名为`X-Bender`的标头将被映射到`META`键`HTTP_X_BENDER`。
- en: '**HttpRequest.user**'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.user**'
- en: 'An object of type `AUTH_USER_MODEL` representing the currently logged-in user.
    If the user isn''t currently logged in, `user` will be set to an instance of `django.contrib.auth.models.AnonymousUser`.
    You can tell them apart with `is_authenticated()`, like so:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表示当前已登录用户的`AUTH_USER_MODEL`类型的对象。如果用户当前未登录，`user`将被设置为`django.contrib.auth.models.AnonymousUser`的实例。您可以使用`is_authenticated()`来区分它们，如下所示：
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`user` is only available if your Django installation has the `AuthenticationMiddleware`
    activated.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在您的Django安装已激活`AuthenticationMiddleware`时，`user`才可用。
- en: '**HttpRequest.session**'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.session**'
- en: A readable-and-writable, dictionary-like object that represents the current
    session. This is only available if your Django installation has session support
    activated.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可读写的类似字典的对象，表示当前会话。只有在您的Django安装已激活会话支持时才可用。
- en: '**HttpRequest.urlconf**'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.urlconf**'
- en: Not defined by Django itself, but will be read if other code (for example, a
    custom middleware class) sets it. When present, this will be used as the root
    URLconf for the current request, overriding the `ROOT_URLCONF` setting.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Django本身未定义，但如果其他代码（例如自定义中间件类）设置了它，它将被读取。当存在时，它将被用作当前请求的根URLconf，覆盖`ROOT_URLCONF`设置。
- en: '**HttpRequest.resolver_match**'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.resolver_match**'
- en: An instance of `ResolverMatch` representing the resolved url. This attribute
    is only set after url resolving took place, which means it's available in all
    views but not in middleware methods which are executed before url resolving takes
    place (like `process_request`, you can use `process_view` instead).
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 表示已解析URL的`ResolverMatch`的实例。此属性仅在URL解析发生后设置，这意味着它在所有视图中都可用，但在执行URL解析之前执行的中间件方法中不可用（例如`process_request`，您可以改用`process_view`）。
- en: Methods
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: '**HttpRequest.get_host()**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.get_host()**'
- en: Returns the originating host of the request using information from the `HTTP_X_FORWARDED_HOST`
    (if `USE_X_FORWARDED_HOST` is enabled) and `HTTP_HOST` headers, in that order.
    If they don't provide a value, the method uses a combination of `SERVER_NAME`
    and `SERVER_PORT` as detailed in PEP 3333.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`HTTP_X_FORWARDED_HOST`（如果启用了`USE_X_FORWARDED_HOST`）和`HTTP_HOST`标头的信息返回请求的原始主机，按顺序。如果它们没有提供值，该方法将使用`SERVER_NAME`和`SERVER_PORT`的组合，详见PEP
    3333。
- en: 'Example: `127.0.0.1:8000`'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：`127.0.0.1:8000`
- en: '**Note**'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**注意**'
- en: 'The `get_host()` method fails when the host is behind multiple proxies. One
    solution is to use middleware to rewrite the proxy headers, as in the following
    example:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当主机位于多个代理后面时，`get_host()`方法会失败。一个解决方案是使用中间件来重写代理标头，就像以下示例中的那样：
- en: '[PRE2]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This middleware should be positioned before any other middleware that relies
    on the value of `get_host()`-for instance, `CommonMiddleware` or `CsrfViewMiddleware`.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此中间件应该放置在依赖于`get_host()`值的任何其他中间件之前，例如`CommonMiddleware`或`CsrfViewMiddleware`。
- en: '**HttpRequest.get_full_path()**'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.get_full_path()**'
- en: Returns the `path`, plus an appended query string, if applicable.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`path`，以及附加的查询字符串（如果适用）。
- en: 'Example: `/music/bands/the_beatles/?print=true`'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：`/music/bands/the_beatles/?print=true`
- en: '**HttpRequest.build_absolute_uri(location)**'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.build_absolute_uri(location)**'
- en: Returns the absolute URI form of `location`. If no location is provided, the
    location will be set to `request.get_full_path()`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`location`的绝对URI形式。如果未提供位置，则位置将设置为`request.get_full_path()`。
- en: If the location is already an absolute URI, it will not be altered. Otherwise
    the absolute URI is built using the server variables available in this request.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果位置已经是绝对URI，则不会被改变。否则，将使用此请求中可用的服务器变量构建绝对URI。
- en: 'Example: `http://example.com/music/bands/the_beatles/?print=true`'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 示例：`http://example.com/music/bands/the_beatles/?print=true`
- en: '**HttpRequest.get_signed_cookie()**'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.get_signed_cookie()**'
- en: Returns a cookie value for a signed cookie, or raises a `django.core.signing.BadSignature`
    exception if the signature is no longer valid. If you provide the `default` argument
    the exception will be suppressed and that default value will be returned instead.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 返回已签名cookie的值，如果签名不再有效，则引发`django.core.signing.BadSignature`异常。如果提供`default`参数，异常将被抑制，而将返回该默认值。
- en: The optional `salt` argument can be used to provide extra protection against
    brute force attacks on your secret key. If supplied, the `max_age` argument will
    be checked against the signed timestamp attached to the cookie value to ensure
    the cookie is not older than `max_age` seconds.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 可选的`salt`参数可用于提供额外的保护，防止对您的秘密密钥进行暴力攻击。如果提供了`salt`参数，将根据附加到cookie值的签名时间戳检查`max_age`参数，以确保cookie的年龄不超过`max_age`秒。
- en: 'For example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**HttpRequest.is_secure()**'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.is_secure()**'
- en: Returns `True` if the request is secure; that is, if it was made with HTTPS.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求是安全的，则返回`True`；也就是说，如果是通过HTTPS发出的请求。
- en: '**HttpRequest.is_ajax()**'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.is_ajax()**'
- en: Returns `True` if the request was made via an `XMLHttpRequest`, by checking
    the `HTTP_X_REQUESTED_WITH` header for the string "`XMLHttpRequest`". Most modern
    JavaScript libraries send this header. If you write your own `XMLHttpRequest`
    call (on the browser side), you'll have to set this header manually if you want
    `is_ajax()` to work.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查`HTTP_X_REQUESTED_WITH`标头中的字符串"`XMLHttpRequest`"，如果请求是通过`XMLHttpRequest`发出的，则返回`True`。大多数现代JavaScript库都会发送此标头。如果您自己编写`XMLHttpRequest`调用（在浏览器端），如果要使`is_ajax()`起作用，您将不得不手动设置此标头。
- en: If a response varies on whether or not it's requested via AJAX and you are using
    some form of caching like Django's `cache middleware`, you should decorate the
    view with `vary_on_headers('HTTP_X_REQUESTED_WITH')` so that the responses are
    properly cached.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应因是否通过AJAX请求而有所不同，并且您正在使用类似Django的`cache middleware`的某种缓存形式，则应该使用`vary_on_headers('HTTP_X_REQUESTED_WITH')`装饰视图，以便正确缓存响应。
- en: '**HttpRequest.read(size=None)**'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.read(size=None)**'
- en: '**HttpRequest.readline()**'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.readline()**'
- en: '**HttpRequest.readlines()**'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.readlines()**'
- en: '**HttpRequest.xreadlines()**'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.xreadlines()**'
- en: '**HttpRequest.__iter__()**'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpRequest.__iter__()**'
- en: Methods implementing a file-like interface for reading from an `HttpRequest`
    instance. This makes it possible to consume an incoming request in a streaming
    fashion. A common use-case would be to process a big XML payload with iterative
    parser without constructing a whole XML tree in memory.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 实现从`HttpRequest`实例读取的类似文件的接口的方法。这使得可以以流式方式消耗传入的请求。一个常见的用例是使用迭代解析器处理大型XML有效负载，而不必在内存中构造整个XML树。
- en: 'Given this standard interface, an `HttpRequest` instance can be passed directly
    to an XML parser such as `ElementTree`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这个标准接口，可以直接将`HttpRequest`实例传递给诸如`ElementTree`之类的XML解析器：
- en: '[PRE4]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: QueryDict objects
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QueryDict对象
- en: In an `HttpRequest` object, the `GET` and `POST` attributes are instances of
    `django.http.QueryDict`, a dictionary-like class customized to deal with multiple
    values for the same key. This is necessary because some HTML form elements, notably
    `<select multiple>`, pass multiple values for the same key.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在`HttpRequest`对象中，`GET`和`POST`属性是`django.http.QueryDict`的实例，这是一个类似字典的类，专门用于处理同一键的多个值。这是必要的，因为一些HTML表单元素，特别是`<select
    multiple>`，会传递同一键的多个值。
- en: The `QueryDict`s at `request.POST` and `request.GET` will be immutable when
    accessed in a normal request/response cycle. To get a mutable version you need
    to use `.copy()`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在正常的请求/响应周期中，`request.POST`和`request.GET`中的`QueryDict`将是不可变的。要获得可变版本，您需要使用`.copy()`。
- en: Methods
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: '`QueryDict` implements all the standard dictionary methods because it''s a
    subclass of dictionary, with the following exceptions.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`QueryDict`实现了所有标准字典方法，因为它是字典的子类，但有以下例外。'
- en: '**QueryDict.__init__()**'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.__init__()**'
- en: Instantiates a `QueryDict` object based on `query_string`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`query_string`实例化一个`QueryDict`对象。
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If `query_string` is not passed in, the resulting `QueryDict` will be empty
    (it will have no keys or values).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 如果未传递`query_string`，则生成的`QueryDict`将为空（它将没有键或值）。
- en: Most `QueryDict`s you encounter, and in particular those at `request.POST` and
    `request.GET`, will be immutable. If you are instantiating one yourself, you can
    make it mutable by passing `mutable=True` to its `__init__()`.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 您遇到的大多数`QueryDict`，特别是`request.POST`和`request.GET`中的那些，将是不可变的。如果您自己实例化一个，可以通过在其`__init__()`中传递`mutable=True`来使其可变。
- en: Strings for setting both keys and values will be converted from `encoding` to
    Unicode. If encoding is not set, it defaults to `DEFAULT_CHARSET`.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设置键和值的字符串将从`encoding`转换为Unicode。如果未设置编码，则默认为`DEFAULT_CHARSET`。
- en: '**QueryDict.__getitem__(key)**'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.__getitem__(key)**'
- en: Returns the value for the given key. If the key has more than one value, `__getitem__()`
    returns the last value. Raises `django.utils.datastructures.MultiValueDictKeyError`
    if the key does not exist.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定键的值。如果键有多个值，`__getitem__()`将返回最后一个值。如果键不存在，则引发`django.utils.datastructures.MultiValueDictKeyError`。
- en: '**QueryDict.__setitem__(key, value)**'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.__setitem__(key, value)**'
- en: Sets the given key to `[value]` (a Python list whose single element is `value`).
    Note that this, as other dictionary functions that have side effects, can only
    be called on a mutable `QueryDict` (such as one that was created via `copy()`).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的键设置为`[value]`（一个Python列表，其单个元素为`value`）。请注意，像其他具有副作用的字典函数一样，只能在可变的`QueryDict`上调用（例如通过`copy()`创建的`QueryDict`）。
- en: '**QueryDict.__contains__(key)**'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.__contains__(key)**'
- en: Returns `True` if the given key is set. This lets you do, for example, `if "foo"
    in request.GET`.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果设置了给定的键，则返回`True`。这使您可以执行例如`if "foo" in request.GET`。
- en: '**QueryDict.get(key, default)**'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.get(key, default)**'
- en: Uses the same logic as `__getitem__()` above, with a hook for returning a default
    value if the key doesn't exist.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 使用与上面的`__getitem__()`相同的逻辑，具有返回默认值的钩子，如果键不存在。
- en: '**QueryDict.setdefault(key, default)**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.setdefault(key, default)**'
- en: Just like the standard dictionary `setdefault()` method, except it uses `__setitem__()`
    internally.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准字典的`setdefault()`方法一样，只是它在内部使用`__setitem__()`。
- en: '**QueryDict.update(other_dict)**'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.update(other_dict)**'
- en: 'Takes either a `QueryDict` or standard dictionary. Just like the standard dictionary
    `update()` method, except it appends to the current dictionary items rather than
    replacing them. For example:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接受`QueryDict`或标准字典。就像标准字典的`update()`方法一样，只是它将项目附加到当前字典项，而不是替换它们。例如：
- en: '[PRE6]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '**QueryDict.items()**'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.items()**'
- en: 'Just like the standard dictionary `items()` method, except this uses the same
    last-value logic as `__getitem__()`. For example:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准字典`items()`方法类似，只是这使用与`__getitem__()`相同的最后值逻辑。例如：
- en: '[PRE7]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**QueryDict.iteritems()**'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.iteritems()**'
- en: Just like the standard dictionary `iteritems()` method. Like `QueryDict.items()`
    this uses the same last-value logic as `QueryDict.__getitem__()`.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准字典`iteritems()`方法类似。与`QueryDict.items()`一样，这使用与`QueryDict.__getitem__()`相同的最后值逻辑。
- en: '**QueryDict.iterlists()**'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.iterlists()**'
- en: Like `QueryDict.iteritems()` except it includes all values, as a list, for each
    member of the dictionary.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 与`QueryDict.iteritems()`类似，只是它包括字典的每个成员的所有值作为列表。
- en: '**QueryDict.values()**'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.values()**'
- en: 'Just like the standard dictionary `values()` method, except this uses the same
    last-value logic as `__getitem__()`. For example:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准字典`values()`方法类似，只是这使用与`__getitem__()`相同的最后值逻辑。例如：
- en: '[PRE8]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**QueryDict.itervalues()**'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.itervalues()**'
- en: Just like `QueryDict.values()`, except an iterator.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 与`QueryDict.values()`类似，只是一个迭代器。
- en: 'In addition, `QueryDict` has the following methods:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`QueryDict`有以下方法：
- en: '**QueryDict.copy()**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.copy()**'
- en: Returns a copy of the object, using `copy.deepcopy()` from the Python standard
    library. This copy will be mutable even if the original was not.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 返回对象的副本，使用Python标准库中的`copy.deepcopy()`。即使原始对象不是可变的，此副本也将是可变的。
- en: '**QueryDict.getlist(key, default)**'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.getlist(key, default)**'
- en: Returns the data with the requested key, as a Python list. Returns an empty
    list if the key doesn't exist and no default value was provided. It's guaranteed
    to return a list of some sort unless the default value was no list.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 返回请求的键的数据，作为Python列表。如果键不存在且未提供默认值，则返回空列表。除非默认值不是列表，否则保证返回某种列表。
- en: '**QueryDict.setlist(key, list)**'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.setlist(key, list)**'
- en: Sets the given key to `list_` (unlike `__setitem__()`).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的键设置为`list_`（与`__setitem__()`不同）。
- en: '**QueryDict.appendlist(key, item)**'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.appendlist(key, item)**'
- en: Appends an item to the internal list associated with key.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将项目附加到与键关联的内部列表。
- en: '**QueryDict.setlistdefault(key, default_list)**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.setlistdefault(key, default_list)**'
- en: Just like `setdefault`, except it takes a list of values instead of a single
    value.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 与`setdefault`类似，只是它接受值的列表而不是单个值。
- en: '**QueryDict.lists()**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.lists()**'
- en: 'Like `items()`, except it includes all values, as a list, for each member of
    the dictionary. For example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与`items()`类似，只是它包括字典的每个成员的所有值作为列表。例如：
- en: '[PRE9]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**QueryDict.pop(key)**'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.pop(key)**'
- en: 'Returns a list of values for the given key and removes them from the dictionary.
    Raises `KeyError` if the key does not exist. For example:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定键的值列表并从字典中删除它们。如果键不存在，则引发`KeyError`。例如：
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**QueryDict.popitem()**'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.popitem()**'
- en: 'Removes an arbitrary member of the dictionary (since there''s no concept of
    ordering), and returns a two value tuple containing the key and a list of all
    values for the key. Raises `KeyError` when called on an empty dictionary. For
    example:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 删除字典的任意成员（因为没有排序的概念），并返回一个包含键和键的所有值的列表的两个值元组。在空字典上调用时引发`KeyError`。例如：
- en: '[PRE11]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '**QueryDict.dict()**'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.dict()**'
- en: 'Returns `dict` representation of `QueryDict`. For every (key, list) pair in
    `QueryDict`, `dict` will have (key, item), where item is one element of the list,
    using same logic as `QueryDict.__getitem__()`:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`QueryDict`的`dict`表示。对于`QueryDict`中的每个（key，list）对，`dict`将有（key，item），其中item是列表的一个元素，使用与`QueryDict.__getitem__()`相同的逻辑：
- en: '[PRE12]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**QueryDict.urlencode([safe])**'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '**QueryDict.urlencode([safe])**'
- en: 'Returns a string of the data in query-string format. Example:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 返回查询字符串格式的数据字符串。例如：
- en: '[PRE13]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Optionally, urlencode can be passed characters which do not require encoding.
    For example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 可选地，urlencode可以传递不需要编码的字符。例如：
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: HttpResponse objects
  id: totrans-160
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HttpResponse对象
- en: In contrast to `HttpRequest` objects, which are created automatically by Django,
    `HttpResponse` objects are your responsibility. Each view you write is responsible
    for instantiating, populating and returning an `HttpResponse`.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 与Django自动创建的`HttpRequest`对象相反，`HttpResponse`对象是您的责任。您编写的每个视图都负责实例化，填充和返回`HttpResponse`。
- en: The `HttpResponse` class lives in the `django.http` module.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpResponse`类位于`django.http`模块中。'
- en: Usage
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: '**Passing strings**'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '**传递字符串**'
- en: 'Typical usage is to pass the contents of the page, as a string, to the `HttpResponse`
    constructor:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 典型用法是将页面内容作为字符串传递给`HttpResponse`构造函数：
- en: '[PRE15]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'But if you want to add content incrementally, you can use `response` as a file-like
    object:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果您想逐步添加内容，可以将`response`用作类似文件的对象：
- en: '[PRE16]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Passing iterators**'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**传递迭代器**'
- en: Finally, you can pass `HttpResponse` an iterator rather than strings. `HttpResponse`
    will consume the iterator immediately, store its content as a string, and discard
    it.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以传递`HttpResponse`一个迭代器而不是字符串。`HttpResponse`将立即消耗迭代器，将其内容存储为字符串，并丢弃它。
- en: If you need the response to be streamed from the iterator to the client, you
    must use the `StreamingHttpResponse` class instead.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要响应从迭代器流式传输到客户端，则必须使用`StreamingHttpResponse`类。
- en: '**Setting header fields**'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置头字段**'
- en: 'To set or remove a header field in your response, treat it like a dictionary:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 要设置或删除响应中的头字段，请将其视为字典：
- en: '[PRE17]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Note that unlike a dictionary, `del` doesn't raise `KeyError` if the header
    field doesn't exist.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，与字典不同，如果头字段不存在，`del`不会引发`KeyError`。
- en: For setting the `Cache-Control` and `Vary` header fields, it is recommended
    to use the `patch_cache_control()` and `patch_vary_headers()` methods from `django.utils.cache`,
    since these fields can have multiple, comma-separated values. The patch methods
    ensure that other values, for example, added by a middleware, are not removed.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 为了设置`Cache-Control`和`Vary`头字段，建议使用`django.utils.cache`中的`patch_cache_control()`和`patch_vary_headers()`方法，因为这些字段可以有多个逗号分隔的值。修补方法确保其他值，例如中间件添加的值，不会被移除。
- en: HTTP header fields cannot contain newlines. An attempt to set a header field
    containing a newline character (CR or LF) will raise `BadHeaderError.`
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP头字段不能包含换行符。尝试设置包含换行符（CR或LF）的头字段将引发`BadHeaderError`。
- en: '**Telling the browser to treat the response as a file attachment**'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '**告诉浏览器将响应视为文件附件**'
- en: 'To tell the browser to treat the response as a file attachment, use the `content_type`
    argument and set the `Content-Disposition` header. For example, this is how you
    might return a Microsoft Excel spreadsheet:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉浏览器将响应视为文件附件，请使用`content_type`参数并设置`Content-Disposition`标头。例如，这是如何返回Microsoft
    Excel电子表格的方式：
- en: '[PRE18]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There's nothing Django-specific about the `Content-Disposition` header, but
    it's easy to forget the syntax, so we've included it here.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`Content-Disposition`标头与Django无关，但很容易忘记语法，因此我们在这里包含了它。'
- en: Attributes
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: '**HttpResponse.content**'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.content**'
- en: A bytestring representing the content, encoded from a Unicode object if necessary.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 表示内容的字节串，如果需要，从Unicode对象编码而来。
- en: '**HttpResponse.charset**'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.charset**'
- en: A string denoting the charset in which the response will be encoded. If not
    given at `HttpResponse` instantiation time, it will be extracted from `content_type`
    and if that is unsuccessful, the `DEFAULT_CHARSET` setting will be used.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 表示响应将被编码的字符集的字符串。如果在`HttpResponse`实例化时未给出，则将从`content_type`中提取，如果不成功，则将使用`DEFAULT_CHARSET`设置。
- en: '**HttpResponse.status_code**'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.status_code**'
- en: The HTTP status code for the response.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 响应的HTTP状态码。
- en: '**HttpResponse.reason_phrase**'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.reason_phrase**'
- en: The HTTP reason phrase for the response.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 响应的HTTP原因短语。
- en: '**HttpResponse.streaming**'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.streaming**'
- en: This is always `False`.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这总是`False`。
- en: This attribute exists so middleware can treat streaming responses differently
    from regular responses.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此属性存在，以便中间件可以将流式响应与常规响应区分对待。
- en: '**HttpResponse.closed**'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.closed**'
- en: '`True` if the response has been closed.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果响应已关闭，则为`True`。
- en: Methods
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法
- en: '**HttpResponse.__init__()**'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.__init__()**'
- en: '[PRE19]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Instantiates an `HttpResponse` object with the given page content and content
    type. `content` should be an iterator or a string. If it''s an iterator, it should
    return strings, and those strings will be joined together to form the content
    of the response. If it is not an iterator or a string, it will be converted to
    a string when accessed. Has four parameters:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 使用给定的页面内容和内容类型实例化`HttpResponse`对象。`content`应该是迭代器或字符串。如果它是迭代器，它应该返回字符串，并且这些字符串将被连接在一起形成响应的内容。如果它不是迭代器或字符串，在访问时将被转换为字符串。有四个参数：
- en: '`content_type` is the MIME type optionally completed by a character set encoding
    and is used to fill the HTTP `Content-Type` header. If not specified, it is formed
    by the `DEFAULT_CONTENT_TYPE` and `DEFAULT_CHARSET` settings, by default: text/html;
    charset=utf-8.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`content_type`是可选地由字符集编码完成的MIME类型，并用于填充HTTP `Content-Type`标头。如果未指定，它将由`DEFAULT_CONTENT_TYPE`和`DEFAULT_CHARSET`设置形成，默认为：text/html;
    charset=utf-8。'
- en: '`status` is the HTTP status code for the response.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`status`是响应的HTTP状态码。'
- en: '`reason` is the HTTP response phrase. If not provided, a default phrase will
    be used.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reason`是HTTP响应短语。如果未提供，将使用默认短语。'
- en: '`charset` is the charset in which the response will be encoded. If not given
    it will be extracted from `content_type`, and if that is unsuccessful, the `DEFAULT_CHARSET`
    setting will be used.'
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`charset`是响应将被编码的字符集。如果未给出，将从`content_type`中提取，如果不成功，则将使用`DEFAULT_CHARSET`设置。'
- en: '**HttpResponse.__setitem__(header, value)**'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.__setitem__(header, value)**'
- en: Sets the given header name to the given value. Both `header` and `value` should
    be strings.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 将给定的标头名称设置为给定的值。`header`和`value`都应该是字符串。
- en: '**HttpResponse.__delitem__(header)**'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.__delitem__(header)**'
- en: Deletes the header with the given name. Fails silently if the header doesn't
    exist. Case-insensitive.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 删除具有给定名称的标头。如果标头不存在，则静默失败。不区分大小写。
- en: '**HttpResponse.__getitem__(header)**'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.__getitem__(header)**'
- en: Returns the value for the given header name. Case-insensitive.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定标头名称的值。不区分大小写。
- en: '**HttpResponse.has_header(header)**'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.has_header(header)**'
- en: Returns `True` or `False` based on a case-insensitive check for a header with
    the given name.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 基于对具有给定名称的标头进行不区分大小写检查，返回`True`或`False`。
- en: '**HttpResponse.setdefault(header, value)**'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.setdefault(header, value)**'
- en: Sets a header unless it has already been set.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 除非已经设置了标头，否则设置标头。
- en: '**HttpResponse.set_cookie()**'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.set_cookie()**'
- en: '[PRE20]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Sets a cookie. The parameters are the same as in the `Morsel` cookie object
    in the Python standard library.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 设置cookie。参数与Python标准库中的`Morsel` cookie对象中的参数相同。
- en: '`max_age` should be a number of seconds, or `None` (default) if the cookie
    should last only as long as the client''s browser session. If `expires` is not
    specified, it will be calculated.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`max_age`应该是秒数，或者`None`（默认），如果cookie只应该持续客户端浏览器会话的时间。如果未指定`expires`，将进行计算。'
- en: '`expires` should either be a string in the format `"Wdy, DD-Mon-YY HH:MM:SS
    GMT"` or a `datetime.datetime` object in UTC. If `expires` is a `datetime` object,
    the `max_age` will be calculated.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expires`应该是格式为`"Wdy, DD-Mon-YY HH:MM:SS GMT"`的字符串，或者是UTC中的`datetime.datetime`对象。如果`expires`是`datetime`对象，则将计算`max_age`。'
- en: Use `domain` if you want to set a cross-domain cookie. For example, `domain=".lawrence.com"`
    will set a cookie that is readable by the domains www.lawrence.com, blogs.lawrence.com
    and calendars.lawrence.com. Otherwise, a cookie will only be readable by the domain
    that set it.
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要设置跨域cookie，请使用`domain`。例如，`domain=".lawrence.com"`将设置一个可由www.lawrence.com、blogs.lawrence.com和calendars.lawrence.com读取的cookie。否则，cookie只能由设置它的域读取。
- en: Use `httponly=True` if you want to prevent client-side JavaScript from having
    access to the cookie.
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果要防止客户端JavaScript访问cookie，请使用`httponly=True`。
- en: '`HTTPOnly` is a flag included in a Set-Cookie HTTP response header. It is not
    part of the RFC 2109 standard for cookies, and it isn''t honored consistently
    by all browsers. However, when it is honored, it can be a useful way to mitigate
    the risk of client side script accessing the protected cookie data.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`HTTPOnly`是包含在Set-Cookie HTTP响应标头中的标志。它不是RFC 2109标准的一部分，并且并非所有浏览器都一致地遵守。但是，当它被遵守时，它可以是减轻客户端脚本访问受保护的cookie数据的有用方式。'
- en: '**HttpResponse.set_signed_cookie()**'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.set_signed_cookie()**'
- en: Like `set_cookie()`, but cryptographic signing the cookie before setting it.
    Use in conjunction with `HttpRequest.get_signed_cookie()`. You can use the optional
    `salt` argument for added key strength, but you will need to remember to pass
    it to the corresponding `HttpRequest.get_signed_cookie()` call.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 与`set_cookie()`类似，但在设置之前对cookie进行加密签名。与`HttpRequest.get_signed_cookie()`一起使用。您可以使用可选的`salt`参数来增加密钥强度，但您需要记住将其传递给相应的`HttpRequest.get_signed_cookie()`调用。
- en: '**HttpResponse.delete_cookie()**'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.delete_cookie()**'
- en: Deletes the cookie with the given key. Fails silently if the key doesn't exist.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 删除具有给定键的cookie。如果键不存在，则静默失败。
- en: Due to the way cookies work, `path` and `domain` should be the same values you
    used in `set_cookie()`-otherwise the cookie may not be deleted.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 由于cookie的工作方式，`path`和`domain`应该与您在`set_cookie()`中使用的值相同-否则可能无法删除cookie。
- en: '**HttpResponse.write(content)**'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.write(content)**'
- en: '**HttpResponse.flush()**'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.flush()**'
- en: '**HttpResponse.tell()**'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.tell()**'
- en: These methods implement a file-like interface with an `HttpResponse`. They work
    the same way as the corresponding Python file method.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法实现了与`HttpResponse`类似的文件接口。它们与相应的Python文件方法的工作方式相同。
- en: '**HttpResponse.getvalue()**'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.getvalue()**'
- en: Returns the value of `HttpResponse.content`. This method makes an `HttpResponse`
    instance a stream-like object.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`HttpResponse.content`的值。此方法使`HttpResponse`实例成为类似流的对象。
- en: '**HttpResponse.writable()**'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.writable()**'
- en: Always `True`. This method makes an `HttpResponse` instance a stream-like object.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 始终为`True`。此方法使`HttpResponse`实例成为类似流的对象。
- en: '**HttpResponse.writelines(lines)**'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponse.writelines(lines)**'
- en: Writes a list of lines to the response. Line separators are not added. This
    method makes an `HttpResponse` instance a stream-like object.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 将一系列行写入响应。不会添加行分隔符。此方法使`HttpResponse`实例成为类似流的对象。
- en: HttpResponse subclasses
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HttpResponse子类
- en: Django includes a number of `HttpResponse` subclasses that handle different
    types of HTTP responses. Like `HttpResponse`, these subclasses live in `django.http`.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: Django包括许多处理不同类型HTTP响应的`HttpResponse`子类。与`HttpResponse`一样，这些子类位于`django.http`中。
- en: '**HttpResponseRedirect**'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseRedirect**'
- en: The first argument to the constructor is required-the path to redirect to. This
    can be a fully qualified URL (for example, [http://www.yahoo.com/search/](http://www.yahoo.com/search/))
    or an absolute path with no domain (for example, `/search/`). See `HttpResponse`
    for other optional constructor arguments. Note that this returns an HTTP status
    code 302.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数的第一个参数是必需的-重定向的路径。这可以是一个完全合格的URL（例如，[http://www.yahoo.com/search/](http://www.yahoo.com/search/)）或者没有域的绝对路径（例如，`/search/`）。查看`HttpResponse`以获取其他可选的构造函数参数。请注意，这会返回一个HTTP状态码302。
- en: '**HttpResponsePermanentRedirect**'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponsePermanentRedirect**'
- en: Like `HttpResponseRedirect`, but it returns a permanent redirect (HTTP status
    code 301) instead of a found redirect (status code 302).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 与`HttpResponseRedirect`类似，但返回永久重定向（HTTP状态码301）而不是找到重定向（状态码302）。
- en: '**HttpResponseNotModified**'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseNotModified**'
- en: The constructor doesn't take any arguments and no content should be added to
    this response. Use this to designate that a page hasn't been modified since the
    user's last request (status code 304).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数不接受任何参数，也不应向此响应添加任何内容。使用此方法指定自上次用户请求以来页面未被修改（状态码304）。
- en: '**HttpResponseBadRequest**'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseBadRequest**'
- en: Acts just like `HttpResponse` but uses a 400 status code.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与`HttpResponse`相同，但使用400状态码。
- en: '**HttpResponseNotFound**'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseNotFound**'
- en: Acts just like `HttpResponse` but uses a 404 status code.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与`HttpResponse`相同，但使用404状态码。
- en: '**HttpResponseForbidden**'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseForbidden**'
- en: Acts just like `HttpResponse` but uses a 403 status code.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与`HttpResponse`相同，但使用403状态码。
- en: '**HttpResponseNotAllowed**'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseNotAllowed**'
- en: 'Like `HttpResponse`, but uses a 405 status code. The first argument to the
    constructor is required: a list of permitted methods (for example, `[''GET'',
    ''POST'']`).'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 与`HttpResponse`类似，但使用405状态码。构造函数的第一个参数是必需的：允许的方法列表（例如，`['GET', 'POST']`）。
- en: '**HttpResponseGone**'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseGone**'
- en: Acts just like `HttpResponse` but uses a 410 status code.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与`HttpResponse`相同，但使用410状态码。
- en: '**HttpResponseServerError**'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '**HttpResponseServerError**'
- en: Acts just like `HttpResponse` but uses a 500 status code.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 行为与`HttpResponse`相同，但使用500状态码。
- en: If a custom subclass of `HttpResponse` implements a `render` method, Django
    will treat it as emulating a `SimpleTemplateResponse`, and the `render` method
    must itself return a valid response object.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`HttpResponse`的自定义子类实现了`render`方法，Django将把它视为模拟`SimpleTemplateResponse`，并且`render`方法本身必须返回一个有效的响应对象。
- en: JsonResponse Objects
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JsonResponse对象
- en: '[PRE21]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'An `HttpResponse` subclass that helps to create a JSON-encoded response. It
    inherits most behavior from its superclass with some differences:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 帮助创建JSON编码响应的`HttpResponse`子类。它继承了大部分行为，但有一些不同之处：
- en: Its default `Content-Type` header is set to `application/json`.
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其默认的`Content-Type`头设置为`application/json`。
- en: The first parameter, `data`, should be a `dict` instance. If the `safe` parameter
    is set to `False` (see below) it can be any JSON-serializable object.
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个参数`data`应该是一个`dict`实例。如果将`safe`参数设置为`False`（见下文），则可以是任何可JSON序列化的对象。
- en: The `encoder`, which defaults to `django.core.serializers.json.DjangoJSONEncoder`,
    will be used to serialize the data.
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`encoder`默认为`django.core.serializers.json.DjangoJSONEncoder`，将用于序列化数据。'
- en: The `safe` boolean parameter defaults to `True`. If it's set to `False`, any
    object can be passed for serialization (otherwise only `dict` instances are allowed).
    If `safe` is `True` and a non-`dict` object is passed as the first argument, a
    `TypeError` will be raised.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`safe`布尔参数默认为`True`。如果设置为`False`，则可以传递任何对象进行序列化（否则只允许`dict`实例）。如果`safe`为`True`，并且将非`dict`对象作为第一个参数传递，将引发`TypeError`。'
- en: Usage
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 用法
- en: 'Typical usage could look like:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的用法可能如下：
- en: '[PRE22]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '**Serializing non-dictionary objects**'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '**序列化非字典对象**'
- en: 'In order to serialize objects other than `dict` you must set the `safe` parameter
    to `False`:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 为了序列化除`dict`之外的对象，您必须将`safe`参数设置为`False`：
- en: '[PRE23]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Without passing `safe=False`, a `TypeError` will be raised.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不传递`safe=False`，将引发`TypeError`。
- en: '**Changing the default JSON encoder**'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '**更改默认的JSON编码器**'
- en: 'If you need to use a different JSON encoder class, you can pass the `encoder`
    parameter to the constructor method:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要使用不同的JSON编码器类，可以将`encoder`参数传递给构造方法：
- en: '[PRE24]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: StreamingHttpResponse objects
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StreamingHttpResponse对象
- en: The `StreamingHttpResponse` class is used to stream a response from Django to
    the browser. You might want to do this if generating the response takes too long
    or uses too much memory. For instance, it's useful for generating large CSV files.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamingHttpResponse`类用于从Django向浏览器流式传输响应。如果生成响应需要太长时间或使用太多内存，你可能会想要这样做。例如，用于生成大型CSV文件非常有用。'
- en: Performance considerations
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 性能考虑
- en: Django is designed for short-lived requests. Streaming responses will tie a
    worker process for the entire duration of the response. This may result in poor
    performance.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: Django设计用于短暂的请求。流式响应将会绑定一个工作进程，直到响应完成。这可能导致性能不佳。
- en: Generally speaking, you should perform expensive tasks outside of the request-response
    cycle, rather than resorting to a streamed response.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，你应该在请求-响应周期之外执行昂贵的任务，而不是使用流式响应。
- en: 'The `StreamingHttpResponse` is not a subclass of `HttpResponse`, because it
    features a slightly different API. However, it is almost identical, with the following
    notable differences:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamingHttpResponse`不是`HttpResponse`的子类，因为它具有稍微不同的API。但是，它几乎是相同的，具有以下显着的区别：'
- en: It should be given an iterator that yields strings as content.
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该给出一个产生字符串作为内容的迭代器。
- en: You cannot access its content, except by iterating the response object itself.
    This should only occur when the response is returned to the client.
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了迭代响应对象本身，你无法访问它的内容。这只能在响应返回给客户端时发生。
- en: It has no `content` attribute. Instead, it has a `streaming_content` attribute.
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有`content`属性。相反，它有一个`streaming_content`属性。
- en: You cannot use the file-like object `tell()` or `write()` methods. Doing so
    will raise an exception.
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你不能使用类似文件的对象的`tell()`或`write()`方法。这样做会引发异常。
- en: '`StreamingHttpResponse` should only be used in situations where it is absolutely
    required that the whole content isn''t iterated before transferring the data to
    the client. Because the content can''t be accessed, many middlewares can''t function
    normally. For example, the `ETag` and `Content-Length` headers can''t be generated
    for streaming responses.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamingHttpResponse`应该只在绝对需要在将数据传输给客户端之前不迭代整个内容的情况下使用。因为无法访问内容，许多中间件无法正常工作。例如，对于流式响应，无法生成`ETag`和`Content-Length`标头。'
- en: Attributes
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 属性
- en: '`StreamingHttpResponse` has the following attributes:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`StreamingHttpResponse`具有以下属性：'
- en: '* `*.streaming_content.` An iterator of strings representing the content.'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '* `*.streaming_content.` 一个表示内容的字符串的迭代器。'
- en: '* `*.status_code.` The HTTP status code for the response.'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '* `*.status_code.` 响应的HTTP状态码。'
- en: '* `*.reason_phrase.` The HTTP reason phrase for the response.'
  id: totrans-290
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '* `*.reason_phrase.` 响应的HTTP原因短语。'
- en: '* `*.streaming.` This is always `True`.'
  id: totrans-291
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '* `*.streaming.` 这总是`True`。'
- en: FileResponse objects
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FileResponse对象
- en: '`FileResponse` is a subclass of `StreamingHttpResponse` optimized for binary
    files. It uses `wsgi.file_wrapper` if provided by the wsgi server, otherwise it
    streams the file out in small chunks.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileResponse`是针对二进制文件进行了优化的`StreamingHttpResponse`的子类。如果wsgi服务器提供了`wsgi.file_wrapper`，它将使用它，否则它会以小块流式传输文件。'
- en: '`FileResponse` expects a file open in binary mode like so:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`FileResponse`期望以二进制模式打开的文件，如下所示：'
- en: '[PRE25]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Error views
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误视图
- en: Django comes with a few views by default for handling HTTP errors. To override
    these with your own custom views, see customizing-error-views.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Django默认提供了一些视图来处理HTTP错误。要使用自定义视图覆盖这些视图，请参阅自定义错误视图。
- en: The 404 (page not found) view
  id: totrans-298
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 404（页面未找到）视图
- en: '`defaults.page_not_found(request, template_name=''404.html'')`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaults.page_not_found(request, template_name=''404.html'')`'
- en: When you raise `Http404` from within a view, Django loads a special view devoted
    to handling 404 errors. By default, it's the view `django.views.defaults.page_not_found()`,
    which either produces a very simple Not Found message or loads and renders the
    template `404.html` if you created it in your root template directory.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在视图中引发`Http404`时，Django会加载一个专门处理404错误的特殊视图。默认情况下，它是视图`django.views.defaults.page_not_found()`，它要么生成一个非常简单的未找到消息，要么加载和呈现模板`404.html`（如果你在根模板目录中创建了它）。
- en: 'The default 404 view will pass one variable to the template: `request_path`,
    which is the URL that resulted in the error.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的404视图将向模板传递一个变量：`request_path`，这是导致错误的URL。
- en: 'Three things to note about 404 views:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 关于404视图有三件事需要注意：
- en: The 404 view is also called if Django doesn't find a match after checking every
    regular expression in the URLconf.
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果Django在检查URLconf中的每个正则表达式后找不到匹配项，也会调用404视图。
- en: The 404 view is passed a `RequestContext` and will have access to variables
    supplied by your template context processors (for example, `MEDIA_URL`).
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 404视图传递一个`RequestContext`，并且将可以访问由你的模板上下文处理器提供的变量（例如`MEDIA_URL`）。
- en: If `DEBUG` is set to `True` (in your settings module), then your 404 view will
    never be used, and your URLconf will be displayed instead, with some debug information.
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`DEBUG`设置为`True`（在你的设置模块中），那么你的404视图将永远不会被使用，而且你的URLconf将被显示出来，带有一些调试信息。
- en: The 500 (server error) view
  id: totrans-306
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 500（服务器错误）视图
- en: '`defaults.server_error(request, template_name=''500.html'')`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaults.server_error(request, template_name=''500.html'')`'
- en: Similarly, Django executes special-case behavior in the case of runtime errors
    in view code. If a view results in an exception, Django will, by default, call
    the view `django.views.defaults.server_error`, which either produces a very simple
    Server Error message or loads and renders the template `500.html` if you created
    it in your root template directory.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，Django在视图代码运行时出现运行时错误的情况下执行特殊行为。如果视图导致异常，Django将默认调用视图`django.views.defaults.server_error`，它要么生成一个非常简单的服务器错误消息，要么加载和呈现模板`500.html`（如果你在根模板目录中创建了它）。
- en: The default 500 view passes no variables to the `500.html` template and is rendered
    with an empty `Context` to lessen the chance of additional errors.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的500视图不会向`500.html`模板传递任何变量，并且使用空的`Context`进行呈现，以减少额外错误的可能性。
- en: If `DEBUG` is set to `True` (in your settings module), then your 500 view will
    never be used, and the traceback will be displayed instead, with some debug information.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`DEBUG`设置为`True`（在您的设置模块中），则永远不会使用您的500视图，而是显示回溯信息，附带一些调试信息。
- en: The 403 (HTTP Forbidden) view
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 403（HTTP Forbidden）视图
- en: '`defaults.permission_denied(request, template_name=''403.html'')`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaults.permission_denied(request, template_name=''403.html'')`'
- en: In the same vein as the 404 and 500 views, Django has a view to handle 403 Forbidden
    errors. If a view results in a 403 exception then Django will, by default, call
    the view `django.views.defaults.permission_denied`.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 与404和500视图一样，Django还有一个视图来处理403 Forbidden错误。如果视图导致403异常，那么Django将默认调用视图`django.views.defaults.permission_denied`。
- en: This view loads and renders the template `403.html` in your root template directory,
    or if this file does not exist, instead serves the text 403 Forbidden, as per
    RFC 2616 (the HTTP 1.1 Specification).
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图加载并呈现根模板目录中的模板`403.html`，如果该文件不存在，则根据RFC 2616（HTTP 1.1规范）提供文本403 Forbidden。
- en: '`django.views.defaults.permission_denied` is triggered by a `PermissionDenied`
    exception. To deny access in a view you can use code like this:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.views.defaults.permission_denied`由`PermissionDenied`异常触发。要在视图中拒绝访问，可以使用以下代码：'
- en: '[PRE26]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The 400 (bad request) view
  id: totrans-317
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 400（错误请求）视图
- en: '`defaults.bad_request(request, template_name=''400.html'')`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`defaults.bad_request(request, template_name=''400.html'')`'
- en: When a `SuspiciousOperation` is raised in Django, it may be handled by a component
    of Django (for example resetting the session data). If not specifically handled,
    Django will consider the current request a 'bad request' instead of a server error.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 当Django中引发`SuspiciousOperation`时，可能会由Django的某个组件处理（例如重置会话数据）。如果没有特别处理，Django将认为当前请求是'bad
    request'而不是服务器错误。
- en: '`django.views.defaults.bad_request`, is otherwise very similar to the `server_error`
    view, but returns with the status code 400 indicating that the error condition
    was the result of a client operation.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.views.defaults.bad_request`，在其他方面与`server_error`视图非常相似，但返回状态码400，表示错误条件是客户端操作的结果。'
- en: '`bad_request` views are also only used when `DEBUG` is `False`.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 当`DEBUG`为`False`时，也只有`bad_request`视图才会被使用。
- en: Customizing error views
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义错误视图
- en: The default error views in Django should suffice for most web applications,
    but can easily be overridden if you need any custom behavior. Simply specify the
    handlers as seen below in your URLconf (setting them anywhere else will have no
    effect).
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: Django中的默认错误视图应该适用于大多数Web应用程序，但如果需要任何自定义行为，可以轻松地覆盖它们。只需在URLconf中指定处理程序（在其他任何地方设置它们都不会起作用）。
- en: 'The `page_not_found()` view is overridden by `handler404`:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`page_not_found()`视图被`handler404`覆盖：'
- en: '[PRE27]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The `server_error()` view is overridden by `handler500`:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`server_error()`视图被`handler500`覆盖：'
- en: '[PRE28]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `permission_denied()` view is overridden by `handler403`:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`permission_denied()`视图被`handler403`覆盖：'
- en: '[PRE29]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The `bad_request()` view is overridden by `handler400`:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`bad_request()`视图被`handler400`覆盖：'
- en: '[PRE30]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
