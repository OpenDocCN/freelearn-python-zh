- en: Chapter 10. Security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章 安全
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Various web attacks and countermeasures
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种Web攻击和对策
- en: Where Django can and cannot help
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django可以在哪些方面提供帮助，哪些方面不能提供帮助
- en: Security checks for Django applications
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django应用程序的安全检查
- en: Several prominent industry reports suggest that websites and web applications
    remain one of the primary targets of cyber attacks. Yet, about 86 percent of all
    websites, tested by a leading security firm in 2013, had at least one serious
    vulnerability.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一些知名的行业报告表明，网站和Web应用程序仍然是网络攻击的主要目标之一。然而，2013年一家领先的安全公司测试的所有网站中，约86%都存在至少一个严重的漏洞。
- en: Releasing your application to the wild is fraught with several dangers ranging
    from the leaking of confidential information to denial-of service attacks. Mainstream
    media headlines security flaws focusing on exploits, such as Heartbleed, Superfish,
    and POODLE, that have an adverse impact on critical website applications, such
    as e-mail and banking. Indeed, one often wonders if WWW stands for World Wide
    Web or the Wild Wild West.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序发布到公共网络中充满了许多危险，从泄露机密信息到拒绝服务攻击。主流媒体头条新闻关注的安全漏洞主要集中在一些漏洞利用上，比如Heartbleed、Superfish和POODLE，这些漏洞对关键的网站应用程序，比如电子邮件和银行业务，产生了不利影响。事实上，人们常常会想知道WWW是代表全球网络还是狂野的西部。
- en: One of the biggest selling points of Django is its strong focus on security.
    In this chapter, we will cover the top techniques that attackers use. As we will
    soon see, Django can protect you from most of them out of the box.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Django的最大卖点之一是其对安全性的高度关注。在本章中，我们将介绍攻击者使用的顶级技术。正如我们将很快看到的，Django可以在开箱即用的情况下保护您免受大多数攻击。
- en: I believe that to protect your site from attackers, you need to think like one.
    So, let's familiarize ourselves with the common attacks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信要保护您的网站免受攻击，您需要像攻击者一样思考。因此，让我们熟悉一下常见的攻击。
- en: Cross-site scripting (XSS)
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨站脚本（XSS）
- en: '**Cross-site scripting** (**XSS**), considered the most prevalent web application
    security flaw today, enables an attacker to execute his malicious scripts (usually
    JavaScript) on web pages viewed by users. Typically, the server is tricked into
    serving their malicious content along with the trusted content.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站脚本**（**XSS**）被认为是当今最普遍的Web应用程序安全漏洞，它使攻击者能够在用户查看的网页上执行其恶意脚本（通常是JavaScript）。通常，服务器会被欺骗以在受信任的内容中提供他们的恶意内容。'
- en: 'How does a malicious piece of code reach the server? The common means of entering
    external data into a website are as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 恶意代码如何到达服务器？将外部数据输入网站的常见方式如下：
- en: Form fields
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单字段
- en: URLs
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL
- en: Redirects
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向
- en: External scripts such as Ads or Analytics
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 诸如广告或分析之类的外部脚本
- en: 'None of these can be entirely avoided. The real problem is when outside data
    gets used without being validated or sanitized (as shown in the following screenshot).
    Never trust outside data:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都无法完全避免。真正的问题是当外部数据在未经验证或未经过滤的情况下被使用时（如下图所示）。永远不要相信外部数据：
- en: '![Cross-site scripting (XSS)](img/6644_10_02.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![跨站脚本（XSS）](img/6644_10_02.jpg)'
- en: 'For example, let''s take a look at a piece of vulnerable code, and how an XSS
    attack can be performed on it. It is strongly advised not to use this code in
    any form:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们看一下一段有漏洞的代码，以及如何对其进行XSS攻击。强烈建议不要在任何形式中使用此代码：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is a `View` class that shows a search form when accessed without any `GET`
    parameters. If the search form is submitted, it shows the search string entered
    by the user in the form.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`View`类，当没有任何`GET`参数访问时，它会显示一个搜索表单。如果提交搜索表单，它会显示用户在表单中输入的搜索字符串。
- en: 'Now open this view in a dated browser (say, IE 8), and enter the following
    search term in the form and submit it:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在一个过时的浏览器（比如IE 8）中打开这个视图，并在表单中输入以下搜索词并提交：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unsurprisingly, the browser will show an alert box with the ominous message.
    Note that this attack fails in the latest Webkit browsers such as Chrome with
    an error in the console—**Refused to execute a JavaScript script. Source code
    of script found within request**.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 毫不奇怪，浏览器将显示一个带有不祥消息的警报框。请注意，这种攻击在最新的Webkit浏览器（如Chrome）中会失败，并在控制台中显示错误——**拒绝执行JavaScript脚本。在请求中找到脚本的源代码**。
- en: 'In case, you are wondering what harm a simple alert message could cause, remember
    that any JavaScript code can be executed in the same manner. In the worst case,
    the user''s cookies can be sent to a site controlled by the attacker by entering
    the following search term:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道一个简单的警报消息会造成什么伤害，记住任何JavaScript代码都可以以相同的方式执行。在最坏的情况下，用户的Cookie可以通过输入以下搜索词被发送到攻击者控制的站点：
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once your cookies are sent, the attacker might be able to conduct a more serious
    attack.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的Cookie被发送，攻击者可能会进行更严重的攻击。
- en: Why are your cookies valuable?
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么你的Cookie很有价值？
- en: It might be worth understanding why cookies are the target of several attacks.
    Simply put, access to cookies allows attackers to impersonate you and even take
    control of your web account.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 值得了解的是，为什么Cookie是几种攻击的目标。简而言之，访问Cookie允许攻击者冒充您，甚至控制您的网络帐户。
- en: To understand this in detail, you need to understand the concept of sessions.
    HTTP is stateless. Be it an anonymous or an authenticated user, Django keeps track
    of their activities for a certain duration of time by managing sessions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解这一点，您需要了解会话的概念。HTTP是无状态的。无论是匿名用户还是经过身份验证的用户，Django都会在一定时间内跟踪他们的活动，管理会话。
- en: A session consists of a `session ID` at the client end, that is, the browser,
    and a dictionary-like object stored at the server end. The `session ID` is a random
    32-character string that is stored as a cookie in the browser. Each time a user
    makes a request to a website, all their cookies, including this `session ID`,
    are sent along with the request.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 会话由客户端端（即浏览器）的“会话ID”和服务器端存储的类似字典的对象组成。“会话ID”是一个随机的32个字符的字符串，存储为浏览器中的Cookie。每当用户向网站发出请求时，包括这个“会话ID”在内的所有Cookie都会随请求一起发送。
- en: At the server end, Django maintains a session store that maps this `session
    ID` to the session data. By default, Django stores the session data in the `django_session`
    database table.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器端，Django维护一个会话存储，将此`会话ID`映射到会话数据。默认情况下，Django将会话数据存储在`django_session`数据库表中。
- en: Once a user successfully logs in, the session will note that the authentication
    was successful and will keep track of the user. Therefore, the cookie becomes
    a temporary user authentication for subsequent transactions. Anyone who acquires
    this cookie can use this web application as that user, which is called **session
    hijacking**.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 用户成功登录后，会话将记录身份验证成功并跟踪用户。因此，cookie成为后续交易的临时用户身份验证。任何获得此cookie的人都可以使用该Web应用程序作为该用户，这称为**会话劫持**。
- en: How Django helps
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django如何帮助
- en: 'You might have observed that my example was an extremely unusual way of implementing
    a view in Django for two reasons: it did not use templates for rendering and form
    classes were not used. Both of them have XSS-prevention measures.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，我的示例是Django中实现视图的一种非常不寻常的方式，原因有两个：它没有使用模板进行渲染，也没有使用表单类。它们都有防止XSS的措施。
- en: By default, Django templates auto-escape HTML special characters. So, if you
    had displayed the search string in a template, all the tags would have been HTML
    encoded. This makes it impossible to inject scripts unless you explicitly turn
    them off by marking the content as safe.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django模板会自动转义HTML特殊字符。因此，如果您在模板中显示搜索字符串，所有标记都将被HTML编码。这使得无法注入脚本，除非您通过将内容标记为安全来明确关闭它们。
- en: Using forms in Django to validate and sanitize the input is also a very effective
    countermeasure. For example, if your application requires a numeric employee ID,
    then use an `IntegerField` class rather than the more permissive `CharField` class.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django中使用表单来验证和清理输入也是一种非常有效的对策。例如，如果您的应用程序需要数字员工ID，则使用`IntegerField`类而不是更宽松的`CharField`类。
- en: In our example, we can use a `RegexValidator` class in our search-term field
    to restrict the user to alphanumeric characters and allowed punctuation symbols
    recognized by your search module. Restrict the acceptable range of the user input
    as strictly as possible.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们可以在搜索词字段中使用`RegexValidator`类，以限制用户只能使用您的搜索模块识别的字母数字字符和允许的标点符号。尽可能严格地限制用户输入的可接受范围。
- en: Where Django might not help
  id: totrans-38
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django可能无法帮助的地方
- en: 'Django can prevent 80 percent of XSS attacks through auto-escaping in templates.
    For the remaining scenarios, you must take care to:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Django可以通过模板中的自动转义来防止80%的XSS攻击。对于剩下的情况，您必须注意：
- en: Quote all HTML attributes, for example, replace `<a href={{link}}>` with `<a
    href="{{link}}">`
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引用所有HTML属性，例如，用`<a href="{{link}}">`替换`<a href={{link}}>`
- en: Escape dynamic data in CSS or JavaScript using custom methods
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义方法在CSS或JavaScript中转义动态数据
- en: Validate all URLs, especially against unsafe protocols such as `javascript:`
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证所有URL，特别是针对不安全的协议，如`javascript:`
- en: Avoid client-side XSS (also, known as DOM-based XSS)
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免客户端XSS（也称为基于DOM的XSS）
- en: As a general rule against XSS, I suggest—filter on input and escape on output.
    Make sure that you validate and sanitize (filter) any data that comes in and transform
    (escape) it immediately before sending it to the user. Specifically, if you need
    to support the user input with HTML formatting such as comments, consider using
    Markdown instead.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对抗XSS的一般规则，我建议——输入时过滤，输出时转义。确保您验证和清理（过滤）任何输入的数据，并在发送给用户之前立即转换（转义）它。具体而言，如果您需要支持具有HTML格式的用户输入，例如评论，请考虑改用Markdown。
- en: Tip
  id: totrans-45
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Filter on input and escape on output.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 输入时过滤，输出时转义。
- en: Cross-Site Request Forgery (CSRF)
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站点请求伪造（CSRF）
- en: '**Cross-Site Request Forgery** (**CSRF**) is an attack that tricks a user into
    making unwanted actions on a website, where they are already authenticated, while
    they are visiting another site. Say, in a forum, an attacker can place an `IMG`
    or `IFRAME` tag within the page that makes a carefully crafted request to the
    authenticated site.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站点请求伪造**（**CSRF**）是一种欺骗用户在访问其他网站时对已经经过身份验证的网站进行不需要的操作的攻击。比如，在论坛中，攻击者可以在页面中放置一个`IMG`或`IFRAME`标记，向经过身份验证的网站发送一个精心制作的请求。'
- en: 'For instance the following fake 0x0 image can be embedded in a comment:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下假的0x0图像可以嵌入评论中：
- en: '[PRE3]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: If you were already signed into SuperBook in another tab, and if the site didn't
    have CSRF countermeasures, then a very embarrassing message will be posted. In
    other words, CSRF allows the attacker to perform actions by assuming your identity.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经在另一个标签中登录了SuperBook，并且网站没有CSRF对策，那么将会发布一个非常尴尬的消息。换句话说，CSRF允许攻击者以您的身份执行操作。
- en: How Django helps
  id: totrans-52
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django如何帮助
- en: The basic protection against CSRF is to use an HTTP `POST` (or `PUT` and `DELETE`,
    if supported) for any action that has side effects. Any `GET` (or `HEAD`) request
    must be used for information retrieval, for example, read-only.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 对抗CSRF的基本保护措施是对具有副作用的任何操作使用HTTP `POST`（或`PUT`和`DELETE`，如果支持）。任何`GET`（或`HEAD`）请求必须用于信息检索，例如只读。
- en: Django offers countermeasures against `POST`, `PUT`, or `DELETE` methods by
    embedding a token. You must already be familiar with the `{% csrf_token %}` mentioned
    inside each Django form template. This is a random value that must be present
    while submitting the form.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过嵌入令牌来提供对`POST`、`PUT`或`DELETE`方法的对策。您可能已经熟悉每个Django表单模板中提到的`{% csrf_token
    %}`。这是一个必须在提交表单时出现的随机值。
- en: The way this works is that the attacker will not be able to guess the token
    while crafting the request to your authenticated site. Since the token is mandatory
    and must match the value presented while displaying the form, the form submission
    fails and the attack is thwarted.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式是，攻击者在向您的经过身份验证的站点发送请求时无法猜到令牌。由于令牌是强制性的，并且必须与显示表单时呈现的值匹配，因此表单提交失败，攻击被挫败。
- en: Where Django might not help
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django可能无法帮助的地方
- en: Some people turn off CSRF checks in a view with the `@csrf_exempt` decorator,
    especially for AJAX form posts. This is not recommended unless you have carefully
    considered the security risks involved.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一些人使用`@csrf_exempt`装饰器在视图中关闭CSRF检查，特别是对于AJAX表单提交。除非您仔细考虑了涉及的安全风险，否则不建议这样做。
- en: SQL injection
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL注入
- en: '**SQL injection** is the second most common vulnerability of web applications,
    after XSS. The attack involves entering malicious SQL code into a query that gets
    executed on the database. It could result in data theft, by dumping database contents,
    or the distruction of data, say, by using the `DROP TABLE` command.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**SQL注入**是跨站脚本（XSS）之后Web应用程序的第二大常见漏洞。攻击涉及将恶意SQL代码输入到在数据库上执行的查询中。这可能导致数据盗窃，通过转储数据库内容，或数据的破坏，比如使用`DROP
    TABLE`命令。'
- en: 'If you are familiar with SQL, then you can understand the following piece of
    code. It looks up an e-mail address based on the given `username`:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您熟悉SQL，那么您可以理解以下代码片段。它根据给定的`username`查找电子邮件地址：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'At first glance, it might appear that only the e-mail address corresponding
    to the username mentioned as the `GET` parameter will be returned. However, imagine
    if an attacker entered `'' OR ''1''=''1` in the form field, then the SQL code
    would be as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 乍一看，似乎只会返回与作为`GET`参数提到的用户名对应的电子邮件地址。但是，想象一下，如果攻击者在表单字段中输入`' OR '1'='1`，那么SQL代码将如下所示：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Since this `WHERE` clause will be always true, the e-mails of all the users
    in your application will be returned. This can be a serious leak of confidential
    information.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个`WHERE`子句将始终为真，您应用程序中所有用户的电子邮件都将被返回。这可能是严重的机密信息泄漏。
- en: 'Again, if the attacker wishes, he could execute more dangerous queries like
    the following:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，如果攻击者愿意，他可以执行更危险的查询，如下所示：
- en: '[PRE6]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now all the user entries will be wiped off your database!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在所有用户条目都将从您的数据库中删除！
- en: How Django helps
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django如何帮助
- en: 'The countermeasure against a SQL injection is fairly simple. Use the Django
    ORM rather than crafting SQL statements by hand. The preceding example should
    be implemented as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 防范SQL注入的措施非常简单。使用Django ORM而不是手工编写SQL语句。前面的示例应该这样实现：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Here, Django's database drivers will automatically escape the parameters. This
    will ensure that they are treated as purely data and therefore, they are harmless.
    However, as we will soon see, even the ORM has a few escape latches.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，Django的数据库驱动程序将自动转义参数。这将确保它们被视为纯粹的数据，因此它们是无害的。然而，正如我们很快将看到的那样，即使ORM也有一些逃生口。
- en: Where Django might not help
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django可能无法帮助的地方
- en: There could be instances where people would need to resort to raw SQL, say,
    due to limitations of the Django ORM. For example, the `where` clause of the `extra()`
    method of a queryset allows raw SQL. This SQL code will not be escaped against
    SQL injections.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有一些情况需要使用原始SQL，比如由于Django ORM的限制。例如，查询集的`extra()`方法的`where`子句允许原始SQL。这些SQL代码不会受到SQL注入的影响。
- en: If you are using a low-level database operation, such as the `execute()` method,
    then you might want to pass bind parameters instead of interpolating the SQL string
    yourself. Even then, it is strongly recommended that you check whether each identifier
    has been properly escaped.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用低级数据库操作，比如`execute()`方法，那么您可能希望传递绑定参数，而不是自己插入SQL字符串。即使这样，强烈建议您检查每个标识符是否已经被正确转义。
- en: Finally, if you are using a third-party database API such as MongoDB, then you
    will need to manually check for SQL injections. Ideally, you would want to use
    only thoroughly sanitized data with such interfaces.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果您使用的是MongoDB等第三方数据库API，则需要手动检查SQL注入。理想情况下，您希望在这些接口中只使用经过彻底清理的数据。
- en: Clickjacking
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 点击劫持
- en: '**Clickjacking** is a means of misleading a user to click on a hidden link
    or button in the browser when they were intending to click on something else.
    This is typically implemented using an invisible IFRAME that contains the target
    website over a dummy web page(shown here) that the user is likely to click on:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**点击劫持**是一种误导用户在浏览器中点击隐藏的链接或按钮的手段，当他们本来打算点击其他东西时。这通常是通过使用包含目标网站的不可见IFRAME在用户可能点击的虚拟网页上实现的：'
- en: '![Clickjacking](img/6644_10_01.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![点击劫持](img/6644_10_01.jpg)'
- en: Since the action button in the invisible frame would be aligned exactly above
    the button in the dummy page, the user's click will perform an action on the target
    website instead.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 由于不可见框架中的操作按钮将与虚拟页面中的按钮完全对齐，用户的点击将在目标网站上执行操作，而不是在虚拟页面上。
- en: How Django helps
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django如何帮助
- en: Django protects your site from clickjacking by using middleware that can be
    fine-tuned using several decorators. By default, this `'django.middleware.clickjacking.XFrameOptionsMiddleware'`
    middleware will be included in your `MIDDLEWARE_CLASSES` within your settings
    file. It works by setting the `X-Frame-Options` header to `SAMEORIGIN` for every
    outgoing `HttpResponse`.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: Django通过使用可以使用几个装饰器进行微调的中间件来保护您的网站免受点击劫持的影响。默认情况下，`'django.middleware.clickjacking.XFrameOptionsMiddleware'`中间件将包含在您的设置文件中的`MIDDLEWARE_CLASSES`中。它通过为每个传出的`HttpResponse`设置`X-Frame-Options`头为`SAMEORIGIN`来工作。
- en: Most modern browsers recognize the header, which means that this page should
    not be inside a frame in other domains. The protection can be enabled and disabled
    for certain views using decorators, such as `@xframe_options_deny` and `@xframe_options_exempt`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代浏览器都识别该标头，这意味着该页面不应该在其他域中的框架内。可以使用装饰器（如`@xframe_options_deny`和`@xframe_options_exempt`）为某些视图启用和禁用保护。
- en: Shell injection
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Shell注入
- en: As the name suggests, **shell injection** or **command injection** allows an
    attacker to inject malicious code to a system shell such as `bash`. Even web applications
    use command-line programs for convenience and their functionality. Such processes
    are typically run within a shell.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 顾名思义，**shell注入**或**命令注入**允许攻击者向系统shell（如`bash`）注入恶意代码。即使Web应用程序也使用命令行程序来方便和实现功能。这些进程通常在shell中运行。
- en: 'For example, if you want to show all the details of a file whose name is given
    by the user, a naïve implementation would be as follows:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果要显示用户给定名称的文件的所有详细信息，一个天真的实现如下：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: An attacker can enter the `filename` as `manage.py; rm -rf *` and delete all
    the files in your directory. In general, it is not advisable to use `os.system`.
    The `subprocess` module is a safer alternative (or even better, you can use `os.stat()`
    to get the file's attributes).
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以将`filename`输入为`manage.py; rm -rf *`并删除目录中的所有文件。一般来说，不建议使用`os.system`。`subprocess`模块是一个更安全的选择（或者更好的是，您可以使用`os.stat()`来获取文件的属性）。
- en: Since a shell will interpret the command-line arguments and environment variables,
    setting malicious values in them can allow the attacker to execute arbitrary system
    commands.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 由于shell会解释命令行参数和环境变量，因此在其中设置恶意值可以允许攻击者执行任意系统命令。
- en: How Django helps
  id: totrans-89
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django如何帮助
- en: Django primarily depends on WSGI for deployment. Since WSGI, unlike CGI, does
    not set on environment variables based on the request, the framework itself is
    not vulnerable to shell injections in its default configuration.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Django主要依赖于WSGI进行部署。由于WSGI不像CGI那样根据请求设置环境变量，因此在默认配置中，该框架本身不容易受到shell注入的影响。
- en: However, if the Django application needs to run other executables, then care
    must be taken to run it in a restricted manner, that is, with least permissions.
    Any parameter originating externally must be sanitized before passing to such
    executables. Additionally, use `call()` from the `subprocess` module to run command-line
    programs with its default `shell=False` parameter to handle arguments securely
    if shell interpolation is not necessary.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果Django应用程序需要运行其他可执行文件，则必须小心以最少的权限运行它。任何外部来源的参数在传递给这些可执行文件之前必须经过清理。此外，如果不需要shell插值，可以使用`subprocess`模块的`call()`来以默认的`shell=False`参数安全地处理参数来运行命令行程序。
- en: And the list goes on
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表还在继续
- en: There are hundreds of attack techniques that we have not covered here, and the
    list keeps growing every day as new attacks are found. It is important to keep
    ourselves aware of them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有数百种攻击技术，我们没有涵盖到，而且随着新攻击的发现，这个列表每天都在增长。重要的是要保持对它们的了解。
- en: Django's official blog ([https://www.djangoproject.com/weblog/](https://www.djangoproject.com/weblog/))
    is a great place to find out about the latest exploits that have been discovered.
    Django maintainers proactively try to resolve them by releasing security releases.
    It is highly recommended that you install them as quickly as possible since they
    usually need very little or no changes to your source code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Django的官方博客([https://www.djangoproject.com/weblog/](https://www.djangoproject.com/weblog/))是了解最新发现的漏洞的好地方。Django的维护者们积极尝试通过发布安全更新来解决这些问题。强烈建议您尽快安装它们，因为它们通常对您的源代码需要很少或没有更改。
- en: The security of your application is only as strong as its weakest link. Even
    if your Django code might be completely secure, there are so many layers and components
    in your stack. Not to mention humans, who can be also tricked with various social-engineering
    techniques, such as phishing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序的安全性取决于它最薄弱的环节。即使你的Django代码可能完全安全，但你的堆栈中有很多层和组件。更不用说人类，他们也可以被各种社会工程技术欺骗，比如网络钓鱼。
- en: Vulnerabilities in one area, such as the OS, database, or web server, can be
    exploited to gain access to other parts of your system. Hence, it is best to have
    a holistic view of your stack rather than view each part separately.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一个领域的漏洞，比如操作系统、数据库或Web服务器，可以被利用来访问系统的其他部分。因此，最好对您的堆栈有一个整体的视图，而不是分别查看每个部分。
- en: Note
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**The safe room**'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 安全室
- en: 'As soon as Steve stepped outside the board room, he took out his phone and
    thumbed a crisp one-liner e-mail to his team: "It''s a go!" In the last 60 minutes,
    he had been grilled by the directors on every possible detail of the launch. Madam
    O, to Steve''s annoyance, maintained her stoic silence the entire time.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂夫一走出会议室，就拿出手机，给他的团队发了一封简洁的电子邮件：“可以了！”在过去的60分钟里，他被董事们询问了关于发布的每一个可能的细节。令史蒂夫恼火的是，Madam
    O在整个时间里保持着冷静的沉默。
- en: He entered his cabin and opened his slide printouts once more. The number of
    trivial bugs dropped sharply after the checklists were introduced. Essential features
    that were impossible to include in the release were worked out through early collaboration
    with helpful users, such as Hexa and Aksel.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 他走进自己的小屋，再次打开幻灯片。在引入清单后，琐碎错误的数量急剧下降。不可能在发布版中包含的基本功能是通过与Hexa和Aksel等乐于助人的用户进行早期合作解决的。
- en: The number of signups for the beta site had crossed 9,000, thanks to Sue's brilliant
    marketing campaign. Never in his career had Steve seen so much interest for a
    launch. It was then that he noticed something odd about the newspaper on his desk.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Sue出色的营销活动，Beta网站的注册人数已经超过了9,000人。史蒂夫在他的职业生涯中从未见过如此多的对于一个发布的兴趣。就在那时，他注意到桌子上的报纸有些奇怪。
- en: Fifteen minutes later, he rushed down the aisle in level-21\. At the very end,
    there was a door marked 2109\. When he opened it, he saw Evan working on what
    looked like a white plastic toy laptop. "Why did you circle the crossword clues?
    You could have just called me," asked Steve.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 十五分钟后，他冲下21楼的过道。最后，有一扇标有2109的门。当他打开门时，他看到埃文正在处理一个看起来像白色塑料玩具笔记本电脑的东西。“你为什么要圈出填字游戏的线索？你本可以打电话给我，”史蒂夫问道。
- en: '"I want to show you something," he replied with a grin. He grabbed his laptop
    and walked out. He stopped between room 2110 and the fire exit. He fell on his
    knees and with his right hand, he groped the faded wallpaper. "There has to be
    a latch here somewhere," he muttered.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: “我想给你看点东西，”他笑着回答道。他拿起笔记本电脑走了出去。他停在2110房间和消防出口之间。他跪下来，用右手摸索着褪色的墙纸。“这里一定有个门闩，”他喃喃自语。
- en: Then, his hand stopped and turned a handle barely protruding from the wall.
    A part of the wall swiveled and came to a halt. It revealed an entrance to a room
    lit with a red light. A sign inside dangling from the roof said "Safe room 21B."
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，他的手停了下来，转动了一把从墙上微微突出的把手。墙的一部分转动并停了下来。它露出了一个用红灯光照亮的房间的入口。屋顶上悬挂着一个标志，上面写着“21B安全室”。
- en: As they entered, numerous screens and lights flicked on by themselves. A large
    screen on the wall said "Authentication required. Insert key." Evan admired this
    briefly and began wiring up his laptop.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们进入时，许多屏幕和灯光自行打开。墙上的一个大屏幕上写着“需要验证。插入密钥。”埃文稍微欣赏了一下，然后开始连接他的笔记本电脑。
- en: '"Evan, what are we doing here?" asked Steve in a hushed voice. Evan stopped,
    "Oh, right. I guess we have some time before the tests finish." He took a deep
    breath.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: “埃文，我们在这里做什么？”史蒂夫压低声音问道。埃文停下来，“哦，对了。我想我们在测试完成之前还有一些时间。”他深吸了一口气。
- en: '"Remember when Madam O wanted me to look into the Sentinel codebase? I did.
    I realized that we were given censored source code. I mean I can understand removing
    some passwords here and there, but thousands of lines of code? I kept thinking—there
    had to be something going on.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: “还记得奥女士要我调查哨兵代码库吗？我做到了。我意识到我们得到的是经过审查的源代码。我是说我可以理解在某些地方删除一些密码，但成千上万行的代码呢？我一直在想——肯定有什么事情发生了。
- en: '"So, with my access to the archiver, I pulled some of the older backups. The
    odds of not erasing a magnetic medium are surprisingly high. Anyways, I could
    recover most of the erased code. You won''t believe what I saw.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: “所以，通过我的访问存档，我找到了一些旧的备份。磁介质未被擦除的几率出奇地高。无论如何，我能够恢复大部分被擦除的代码。你不会相信我看到了什么。
- en: '"Sentinel was not an ordinary social network project. It was a surveillance
    program. Perhaps the largest known to mankind. Post-Cold War, a group of nations
    joined to form a network to share the intelligence information. A network of humans
    and sentinels. Sentinels are semi-autonomous computers with unbelievable computing
    power. Some believe they are quantum computers.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: “哨兵不是一个普通的社交网络项目。它是一个监视计划。也许是人类已知的最大的监视计划。在冷战后，一群国家加入成立了一个网络，共享情报信息。一个由人类和哨兵组成的网络。哨兵是拥有难以置信的计算能力的半自主计算机。有人认为它们是量子计算机。
- en: '"Sentinels were inserted at thousands of strategic locations around the world—mostly
    ocean beds where major fiber optic cables are passed. Running on geothermal energy
    they were self-powered and practically indestructible. They had access to nearly
    every Internet communication in most countries.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: “哨兵被部署在世界各地的数千个战略位置——主要是海床，那里通过了主要的光纤电缆。它们以地热能源为动力，几乎不可摧毁。它们几乎可以访问大多数国家的几乎所有互联网通信。
- en: '"At some point in the nineties, perhaps fearing public scrutiny, the Sentinel
    program was shut down. This is where it gets really interesting. The code history
    suggests that the development on Sentinels was continued by someone named Cerebos.
    The code has been drastically enhanced from its surveillance abilities to form
    a sort of massively parallel supercomputer. A number-crunching beast for whom
    no encryption algorithm poses a significant challenge.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: “也许是在九十年代的某个时候，可能是出于对公众审查的担忧，哨兵计划被关闭了。这就是真正有趣的地方。代码历史表明，哨兵的开发是由一个名叫Cerebos的人继续的。代码已经从监视能力大大增强，发展成了一种类似于大规模并行超级计算机的东西。一个数值计算的野兽，对任何加密算法都构成了重大挑战。
- en: '"Remember the breach? I found it hard to believe that there was not a single
    offensive move before the superheroes arrived. So, I did some research. S.H.I.M.''s
    cyber security is designed as five concentric rings. We, the employees, are in
    the outermost, least privileged, ring protected by Sauron. Inner rings are designed
    with increasingly stronger cryptographic algorithms. This room is in Level 4.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: “还记得那次入侵吗？我觉得很难相信在超级英雄到达之前没有任何进攻性行动。所以，我做了一些研究。S.H.I.M.的网络安全设计为五个同心圆。我们，员工，处于最外层，权限最低的环，由索伦保护。内部环采用了越来越强大的加密算法。这个房间在4级。
- en: '"My guess is—long before we knew about the breach, all systems of SAURON were
    already compromised. Systems were down and it was practically a cakewalk for those
    robots to enter the campus. I just looked at the logs. The attack was extremely
    targeted—everything from IP addresses to logins were known beforehand."'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: “我猜——在我们知道入侵之前很久，SAURON的所有系统都已经被攻破了。系统崩溃，对那些机器人来说几乎是小菜一碟。我刚刚看了日志。这次攻击是极有针对性的——从IP地址到登录，所有的东西都是事先知道的。”
- en: '"Insider?" asked Steve in horror.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: “内鬼？”史蒂夫惊恐地问道。
- en: '"Yes. However, Sentinels needed help only for Level 5\. Once they acquired
    the public keys for Level 4, they began attacking Level 4 systems. It sounds insane
    but that was their strategy."'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: “是的。然而，哨兵只需要在5级时才需要帮助。一旦它们获得了4级的公钥，它们就开始攻击4级系统。听起来很疯狂，但这就是它们的策略。”
- en: '"Why is it insane?"'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: “为什么疯狂？”
- en: '"Well, most of world''s online security is based on public-key cryptography
    or asymmetric cryptography. It is based on two keys: one public and the other
    private. Although mathematically related—it is computationally impractical to
    find one key, if you have the other."'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: “嗯，世界上大部分的在线安全都是基于公钥密码学或非对称密码学。它基于两个密钥：一个公钥，一个私钥。尽管在数学上相关——如果你有另一个密钥，要找到一个密钥在计算上是不可行的。”
- en: '"Are you saying that the Sentinel network can?"'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: “你是说哨兵网络可以？”
- en: '"In fact, they can for smaller keys. Based on the tests I am running right
    now, their powers have grown significantly. At this rate, they should be ready
    for another attack in less than 24 hours."'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “事实上，它们可以用于更小的密钥。根据我现在正在进行的测试，它们的能力已经显著增长。按照这个速度，它们应该在不到24小时内准备好进行另一次攻击。”
- en: '"Damn, that''s when SuperBook goes live!"'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: “该死，那时候SuperBook上线了！”
- en: A handy security checklist
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个方便的安全清单。
- en: Security is not an afterthought but is instead integral to the way you write
    applications. However, being human, it is handy to have a checklist to remind
    you of the common omissions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 安全不是事后想到的，而是写应用程序的方式的一部分。然而，作为人类，有一个清单可以提醒你常见的遗漏是很方便的。
- en: 'The following points are a bare minimum of security checks that you should
    perform before making your Django application public:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点是在将Django应用程序公开之前应执行的最低安全检查：
- en: '**Don''t trust data from a browser, API, or any outside sources**: This is
    a fundamental rule. Make sure you validate and sanitize any outside data.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要相信来自浏览器、API或任何外部来源的数据：这是一个基本规则。确保验证和清理任何外部数据。
- en: '**Don''t keep** `SECRET_KEY` **in version control**: As a best practice, pick
    `SECRET_KEY` from the environment. Check out the `django-environ` package.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要将`SECRET_KEY`保存在版本控制中：作为最佳实践，从环境中选择`SECRET_KEY`。查看`django-environ`包。
- en: '**Don''t store passwords in plain text**: Store your application password hashes
    instead. Add a random salt as well.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要以纯文本形式存储密码：存储应用程序密码哈希。还要添加一个随机盐。
- en: '**Don''t log any sensitive data**: Filter out the confidential data such as
    credit card details or API keys from your log files.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要记录任何敏感数据：从日志文件中过滤掉机密数据，如信用卡详细信息或API密钥。
- en: '**Any secure transaction or login should use SSL**: Be aware that eavesdroppers
    in the same network as you are could listen to your web traffic if is not in HTTPS.
    Ideally, you ought to use HTTPS for the entire site.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何安全交易或登录都应使用SSL：请注意，与您在同一网络中的窃听者可能会监听您的Web流量，如果不是在HTTPS中。理想情况下，您应该为整个站点使用HTTPS。
- en: '**Avoid using redirects to user-supplied URLs**: If you have redirects such
    as `http://example.com/r?url=http://evil.com`, then always check against whitelisted
    domains.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 避免使用重定向到用户提供的URL：如果您有重定向，例如`http://example.com/r?url=http://evil.com`，则始终检查白名单域。
- en: '**Check authorization even for authenticated users**: Before performing any
    change with side effects, check whether the logged-in user is allowed to perform
    it.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使对已验证的用户也要检查授权：在执行任何具有副作用的更改之前，请检查已登录用户是否被允许执行。
- en: '**Use the strictest possible regular expressions**: Be it your `URLconf` or
    form validators, you must avoid lazy and generic regular expressions.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用最严格的正则表达式：无论是您的`URLconf`还是表单验证器，都必须避免懒惰和通用的正则表达式。
- en: '**Don''t keep your Python code in web root**: This can lead to an accidental
    leak of source code if it gets served as plain text.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不要将Python代码保存在Web根目录中：如果以纯文本形式提供，这可能导致源代码意外泄漏。
- en: '**Use Django templates instead of building strings by hand**: Templates have
    protection against XSS attacks.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django模板而不是手动构建字符串：模板具有防止XSS攻击的保护。
- en: '**Use Django ORM rather than SQL commands**: The ORM offers protection against
    SQL injection.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django ORM而不是SQL命令：ORM提供了防止SQL注入的保护。
- en: '**Use Django forms with** `POST` **input for any action with side effects**:
    It might seem like overkill to use forms for a simple vote button. Do it.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于具有副作用的任何操作，请使用Django表单和`POST`输入：对于简单的投票按钮使用表单可能看起来有些多余。但是请这样做。
- en: '**CSRF should be enabled and used**: Be very careful if you are exempting certain
    views using the `@csrf_exempt` decorator.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应启用和使用CSRF：如果您使用`@csrf_exempt`装饰器豁免某些视图，则要非常小心。
- en: '**Ensure that Django and all packages are the latest versions**: Plan for updates.
    They might need some changes to be made to your source code. However, they bring
    shiny new features and security fixes too.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保Django和所有软件包都是最新版本：计划更新。它们可能需要对您的源代码进行一些更改。但是它们也带来了全新的功能和安全修复。
- en: '**Limit the size and type of user-uploaded files**: Allowing large file uploads
    can cause denial-of-service attacks. Deny uploading of executables or scripts.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制用户上传文件的大小和类型：允许大文件上传可能会导致拒绝服务攻击。拒绝上传可执行文件或脚本。
- en: '**Have a backup and recovery plan**: Thanks to Murphy, you can plan for an
    inevitable attack, catastrophe, or any other kind of downtime. Make sure you take
    frequent backups to minimize data loss.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有备份和恢复计划：由于墨菲定律，您可以计划不可避免的攻击、灾难或任何其他类型的停机。确保您经常备份以最小化数据丢失。
- en: Some of these can be checked automatically using Erik's Pony Checkup at [http://ponycheckup.com/](http://ponycheckup.com/).
    However, I would recommend that you print or copy this checklist and stick it
    on your desk.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些可以使用Erik的Pony Checkup在[http://ponycheckup.com/](http://ponycheckup.com/)自动检查。但我建议您打印或复制此检查表并将其贴在您的桌子上。
- en: Remember that this list is by no means exhaustive and not a substitute for a
    proper security audit by a professional.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，这个列表绝不是详尽无遗的，也不能替代专业的安全审计。
- en: Summary
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we looked at the common types of attacks affecting websites
    and web applications. In many cases, the explanation of the techniques has been
    simplified for clarity at the cost of detail. However, once we understand the
    severity of the attack, we can appreciate the countermeasures that Django provides.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了影响网站和Web应用程序的常见攻击类型。在许多情况下，为了清晰起见，我们对技术的解释进行了简化，但这也牺牲了细节。然而，一旦我们了解了攻击的严重性，我们就能欣赏Django提供的对策。
- en: In our final chapter, we will take a look at pre-deployment activities in more
    detail. We will also take a look at the various deployment strategies, such as
    cloud-based hosting for deploying a Django application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的最后一章中，我们将更详细地查看预部署活动。我们还将研究各种部署策略，例如基于云的主机用于部署Django应用程序。
