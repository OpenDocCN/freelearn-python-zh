- en: Bells and Whistles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 花里胡哨
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using the Django shell
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django shell
- en: Using database query expressions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库查询表达式
- en: Monkey patching the `slugify()` function for better internationalization support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了更好地支持国际化，对`slugify()`函数进行猴子补丁
- en: Toggling the Debug toolbar
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换调试工具栏
- en: Using ThreadLocalMiddleware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ThreadLocalMiddleware
- en: Using signals to notify administrators about new entries
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信号通知管理员有关新条目的信息
- en: Checking for missing settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查缺少的设置
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will go over several important bits and pieces that will
    help you to better understand and utilize Django. We will provide an overview
    of how to use the Django shell to experiment with the code before writing it in
    the files. You will be introduced to monkey patching, also known as guerrilla
    patching, which is a powerful feature of dynamic languages, such as Python and
    Ruby. We will also talk about full-text search capabilities, and you will learn
    how to debug your code and check its performance. Then, you will learn how to
    access the currently logged-in user (and other request parameters) from any module.
    You will also learn how to handle signals and create system checks. Get ready
    for an interesting programming experience!
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍一些重要的要点，这些要点将帮助您更好地理解和利用Django。我们将概述如何使用Django shell在编写文件之前对代码进行实验。您将了解到猴子补丁，也称为游击补丁，这是Python和Ruby等动态语言的强大功能。我们还将讨论全文搜索功能，并学习如何调试代码并检查其性能。然后，您将学习如何从任何模块中访问当前登录的用户（以及其他请求参数）。您还将学习如何处理信号并创建系统检查。准备好迎接有趣的编程体验！
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To work with the code of this chapter, you will need the latest stable version
    of a Python, MySQL, or PostgreSQL database and a Django project with a virtual
    environment.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本章的代码，您需要最新稳定版本的Python、MySQL或PostgreSQL数据库以及一个带有虚拟环境的Django项目。
- en: You can find all the code for this chapter in the `ch10` directory of the GitHub
    repository at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库的`ch10`目录中找到本章的所有代码，网址为[https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)。
- en: Using the Django shell
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django shell
- en: 'With the virtual environment activated and your project directory selected
    as the current directory, enter the following command in your command-line tool:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在激活虚拟环境并选择项目目录作为当前目录后，在命令行工具中输入以下命令：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By executing the preceding command, you will enter an interactive Python shell,
    configured for your Django project, where you can play around with the code, inspect
    the classes, try out methods, or execute scripts on the fly. In this recipe, we
    will go over the most important functions that you need to know in order to work
    with the Django shell.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行上述命令，您将进入一个交互式的Python shell，为您的Django项目进行配置，在那里您可以玩弄代码，检查类，尝试方法或即时执行脚本。在本教程中，我们将介绍您在使用Django
    shell时需要了解的最重要的功能。
- en: Getting ready
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You can install either **IPython** or **bpython** to provide additional interface
    options for Python shells or you can install both if you want a choice. These
    will highlight the syntax for the output of your Django shell and will add some
    other helpers. Install them both by using the following commands for a virtual
    environment:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以安装**IPython**或**bpython**，以为Python shell提供额外的接口选项，或者如果需要选择，可以同时安装两者。这些将突出显示Django
    shell输出的语法，并添加一些其他辅助功能。通过使用以下命令为虚拟环境安装它们：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Learn the basics of using the Django shell by following these instructions:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按照以下说明学习使用Django shell的基础知识：
- en: 'Run the Django shell by typing the following command:'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过输入以下命令来运行Django shell：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If you have installed `IPython` or`bpython`, then whichever one you have installed
    will automatically become the default interface when you are entering the shell.
    You can also use a particular interface by adding the `-i <interface>` option
    to the preceding command. The prompt will change according to which interface
    you use. The following screenshot shows what an `IPython` shell might look like,
    starting with `In [1]:` as the prompt:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装了`IPython`或`bpython`，那么您安装的任何一个都将在您进入shell时自动成为默认接口。您还可以通过在前面的命令中添加`-i
    <interface>`选项来使用特定的接口。提示符将根据您使用的接口而更改。以下屏幕截图显示了`IPython` shell可能的外观，以`In [1]:`作为提示开始：
- en: '![](img/cee38439-ef1b-4683-9bd3-9a4bd12b37c4.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cee38439-ef1b-4683-9bd3-9a4bd12b37c4.png)'
- en: 'If you use `bpython`, the shell will be shown with the `>>>` prompt, along
    with code highlighting and text autocompletion when you type, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用`bpython`，则shell将显示为带有`>>>`提示，以及在输入时进行代码高亮和文本自动完成，如下所示：
- en: '![](img/1943fe09-c0c4-4e1e-902d-52888447be3c.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1943fe09-c0c4-4e1e-902d-52888447be3c.png)'
- en: 'The **default Python interface** shell looks as follows, also using the `>>>`
    prompt, but with a preamble that provides information about the system:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**默认的Python接口** shell如下所示，也使用`>>>`提示，但前言提供有关系统的信息：'
- en: '![](img/d462bac1-2f1a-47f3-95e5-723b4ccad356.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/d462bac1-2f1a-47f3-95e5-723b4ccad356.png)'
- en: 'Now you can import classes, functions, or variables, and play around with them.
    For example, to see the version of an installed module, you can import the module
    and then try to read its `__version__`, `VERSION`, or `version` attribute (shown
    using `bpython`, which will also demonstrate both its highlighting and autocompletion
    features), as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以导入类、函数或变量，并对它们进行操作。例如，要查看已安装模块的版本，您可以导入该模块，然后尝试读取其`__version__`、`VERSION`或`version`属性（使用`bpython`显示，它还将演示其高亮和自动完成功能），如下所示：
- en: '![](img/e1ec6437-bcc0-432d-8f95-ea0a9089f663.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e1ec6437-bcc0-432d-8f95-ea0a9089f663.png)'
- en: 'To get a comprehensive description of a module, class, function, method, keyword,
    or documentation topic, use the `help()` function. You can either pass a string
    with the path to a specific entity or the entity itself, as follows:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取模块、类、函数、方法、关键字或文档主题的全面描述，请使用`help()`函数。您可以传递一个包含特定实体路径的字符串，或者实体本身，如下所示：
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This will open the help page for the `django.forms` module. Use the arrow keys
    to scroll the page up and down. Press `Q` to get back to the shell. If you run
    `help()` without the parameters, it opens an interactive help page. There, you
    can enter any path of a module, class, function, and so on, and get information
    on what it does and how to use it. To quit the interactive help, press `Ctrl +
    D`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开`django.forms`模块的帮助页面。使用箭头键上下滚动页面。按`Q`键返回到shell。如果您运行`help()`而没有参数，它会打开一个交互式帮助页面。在那里，您可以输入模块、类、函数等的任何路径，并获取有关其功能和用法的信息。要退出交互式帮助，请按`Ctrl
    + D`。
- en: 'The following is an example of how to pass an entity to the `help()` function
    with IPython:'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下是如何将实体传递给`help()`函数的示例：
- en: '![](img/24b5ec75-ff8f-4aa0-8dac-9cca0983c654.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24b5ec75-ff8f-4aa0-8dac-9cca0983c654.png)'
- en: 'Doing this will open a help page for the `ModelForm` class, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个`ModelForm`类的帮助页面，如下所示：
- en: '![](img/9e660105-7b0f-4ee7-a7dd-275a31e0ee46.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9e660105-7b0f-4ee7-a7dd-275a31e0ee46.png)'
- en: 'To quickly see what fields and values are available for a model instance, use
    the `__dict__` attribute. You can use the `pprint()` function to print the dictionaries
    in a more readable format (not just one long line), as shown in the following
    screenshot. Note that when we use `__dict__`, we don''t get many-to-many relationships;
    however, this might be enough for a quick overview of the fields and values:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要快速查看模型实例可用的字段和值，可以使用`__dict__`属性。您可以使用`pprint()`函数以更可读的格式打印字典（不仅仅是一行长），如下面的屏幕截图所示。请注意，当我们使用`__dict__`时，我们不会得到多对多关系；但是，这可能足够快速概述字段和值：
- en: '![](img/1944ed9a-8ccd-4814-868d-1cbce7593817.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1944ed9a-8ccd-4814-868d-1cbce7593817.png)'
- en: 'To get all of the available properties and methods of an object, you can use
    the `dir()` function, as follows:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要获取对象的所有可用属性和方法，可以使用`dir()`函数，如下所示：
- en: '![](img/5b025518-cda4-4e34-8ec6-8f5d856a6674.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5b025518-cda4-4e34-8ec6-8f5d856a6674.png)'
- en: 'To print one attribute per line, you can use the code shown in the following
    screenshot:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要每行打印一个属性，可以使用以下屏幕截图中显示的代码：
- en: '![](img/f6dd409a-6e5c-48d6-9e54-9986f6050a6f.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f6dd409a-6e5c-48d6-9e54-9986f6050a6f.png)'
- en: 'The Django shell is useful for experimenting with `QuerySets` or regular expressions
    before putting them into your model methods, views, or management commands. For
    example, to check the email validation regular expression, you can type the following
    into the Django shell:'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django shell对于在将其放入模型方法、视图或管理命令之前尝试`QuerySets`或正则表达式非常有用。例如，要检查电子邮件验证正则表达式，可以在Django
    shell中输入以下内容：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you want to try out different `QuerySets`, use the following code:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您想尝试不同的`QuerySets`，请使用以下代码：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To exit the Django shell, press *Ctrl* + *D* or type the following command:'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要退出Django shell，请按*Ctrl* + *D*，或输入以下命令：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The difference between a normal Python shell and the Django shell is that when
    you run the Django shell, `manage.py` sets the `DJANGO_SETTINGS_MODULE` environment
    variable so that it points to the project's `settings.py` path, and then all of
    the code in the Django shell is handled in the context of your project. With the
    use of the third-party IPython or bpython interfaces, we can enhance the default
    Python shell further, with syntax highlighting, autocompletion, and more.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 普通Python shell和Django shell之间的区别在于，当您运行Django shell时，`manage.py`会设置`DJANGO_SETTINGS_MODULE`环境变量，以便它指向项目的`settings.py`路径，然后Django
    shell中的所有代码都在项目的上下文中处理。通过使用第三方IPython或bpython接口，我们可以进一步增强默认的Python shell，包括语法高亮、自动完成等。
- en: See also
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using database query expressions* recipe
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用数据库查询表达式*配方'
- en: The *Monkey patching the slugify() function for better internationalization
    support* recipe
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '*为更好的国际化支持修补slugify()函数*配方'
- en: Using database query expressions
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库查询表达式
- en: '**Django Object-Relational Mapping (ORM)** comes with special abstraction constructs
    that can be used to build complex database queries. They are called **query expressions**,
    and they allow you to filter data, order it, annotate new columns, and aggregate
    relations. In this recipe, you will see how these can be used in practice. We
    will create an app that shows viral videos and counts how many times each video
    has been seen by anonymous or logged-in users.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Django对象关系映射（ORM）**具有特殊的抽象构造，可用于构建复杂的数据库查询。它们称为**查询表达式**，它们允许您过滤数据、对其进行排序、注释新列并聚合关系。在这个配方中，您将看到这些如何在实践中使用。我们将创建一个应用程序，显示病毒视频，并计算每个视频被匿名用户或登录用户观看的次数。'
- en: Getting ready
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To start with, create a `viral_videos` app with a `ViralVideo` model and set
    up the system so that it logs to a log file by default:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个`viral_videos`应用程序，其中包含一个`ViralVideo`模型，并设置系统默认记录到日志文件：
- en: 'Create the `viral_videos` app and add it under `INSTALLED_APPS` in the settings:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`viral_videos`应用程序并将其添加到设置中的`INSTALLED_APPS`下：
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, create a model for viral videos with a **Universally Unique Identifier** (**UUID**)
    as a primary key, along with creation and modification timestamps, a title, embedded
    code, impressions by anonymous users, and impressions by authenticated users,
    as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个病毒视频的模型，其中包含**通用唯一标识符**（**UUID**）作为主键，以及创建和修改时间戳、标题、嵌入代码、匿名用户的印象和经过身份验证用户的印象，如下所示：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Make and run migrations for the new app so that your database will be ready
    to go:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为新应用程序创建并运行迁移，以便您的数据库准备就绪：
- en: '[PRE9]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add logging configuration to the settings:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将日志配置添加到设置中：
- en: '[PRE10]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This will log debugging information into a temporary file named `tmp/debug.log`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这将调试信息记录到名为`tmp/debug.log`的临时文件中。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To illustrate the query expressions, let''s create the viral video detail view
    and plug it into the URL configuration, as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明查询表达式，让我们创建病毒视频详细视图，并将其插入到URL配置中，如下所示：
- en: 'Create the viral video list and detail views in `views.py` as follows:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views.py`中创建病毒视频列表和详细视图如下：
- en: '[PRE11]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Define the URL configuration for the app as follows:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为应用程序定义URL配置如下：
- en: '[PRE12]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Include the URL configuration of the app in the project''s root URL configuration
    as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用程序的URL配置包含在项目的根URL配置中，如下所示：
- en: '[PRE13]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create a template for the viral video list view as follows:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下病毒视频列表视图的模板：
- en: '[PRE14]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Create a template for the viral video detail view as follows:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建以下病毒视频详细视图的模板：
- en: '[PRE15]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Set up the administration for the `viral_videos` app as follows, and add some videos
    to the database when you are finished:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置`viral_videos`应用程序的管理如下，并在完成后向数据库添加一些视频：
- en: '[PRE16]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'You might have noticed the `logger.debug()` statement in the view. If you run
    the server in `DEBUG` mode and access a video in the browser (for example, `http://127.0.0.1:8000/en/viral-videos/2b14ffd3-d1f1-4699-a07b-1328421d8312/`,
    in local development), you will see an SQL query like the following printed in
    the logs (`tmp/debug.log`):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到视图中的`logger.debug()`语句。如果以`DEBUG`模式运行服务器并在浏览器中访问视频（例如，在本地开发中访问`http://127.0.0.1:8000/en/viral-videos/2b14ffd3-d1f1-4699-a07b-1328421d8312/`），则会在日志中打印类似以下的SQL查询（`tmp/debug.log`）：
- en: '[PRE17]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, in the browser, you will see a simple page showing the following:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在浏览器中，您将看到一个简单的页面，显示如下内容：
- en: The title of the video
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频的标题
- en: The label of the video
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视频的标签
- en: The embedded video
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式视频
- en: The number of views from authenticated and anonymous users, and the number of
    views in total
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 经过身份验证和匿名用户的观看次数，以及总观看次数
- en: 'It will be similar to the following image:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 它将类似于以下图像：
- en: '![](img/4a1f0dea-f959-4597-879d-5e24a3470968.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/4a1f0dea-f959-4597-879d-5e24a3470968.png)
- en: The `annotate()` method in Django `QuerySets` allows you to add extra columns
    to the `SELECT` SQL statement, as well as properties that were created on the
    fly for the objects retrieved from `QuerySets`. With `models.F()`, we can reference
    different field values from the selected database table. In this example, we will
    create the `total_views` attribute, which is the sum of the views from authenticated
    and anonymous users.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Django `QuerySets`中的`annotate()`方法允许您向`SELECT` SQL语句添加额外的列，以及为从`QuerySets`检索的对象创建的临时属性。使用`models.F()`，我们可以引用所选数据库表中的不同字段值。在此示例中，我们将创建`total_views`属性，该属性是经过身份验证和匿名用户查看的总和。
- en: With `models.Case()` and `models.When()`, we can return the values according
    to different conditions. To mark the values, we are using `models.Value()`. In
    our example, we will create the `label` column for the SQL query and the property
    for the objects returned by `QuerySet`. It will be set to popular if it has more
    than 500 impressions, new if it was created in the last 24 hours, and cool otherwise.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`models.Case()`和`models.When()`，我们可以根据不同的条件返回值。为了标记这些值，我们使用`models.Value()`。在我们的示例中，我们将为SQL查询创建`label`列，并为`QuerySet`返回的对象创建属性。如果有超过500次印象，则将其设置为popular，如果在过去的24小时内创建，则设置为new，否则设置为cool。
- en: At the end of the view, we called the `qs.update()` methods. They increment
    the `authenticated_views` or `anonymous_views` of the current video, depending
    on whether the user looking at the video was logged in. The incrementation happens
    not at the Python level, but at the SQL level. This solves issues with so-called
    race conditions where two or more visitors are accessing the view at the same
    time, trying to increase the view count simultaneously.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的末尾，我们调用了`qs.update()`方法。它们会增加当前视频的`authenticated_views`或`anonymous_views`，具体取决于查看视频的用户是否已登录。增加不是在Python级别进行的，而是在SQL级别进行的。这解决了所谓的竞争条件问题，即两个或更多访问者同时访问视图，尝试同时增加视图计数的问题。
- en: See also
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using the Django shell* recipe
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Django shell中使用*的方法'
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中的*使用URL相关方法创建模型mixin*的方法'
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*, Models and Database
    Structure*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中的*创建处理创建和修改日期的模型mixin*的方法'
- en: Monkey patching the slugify() function for better internationalization support
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为了更好地支持国际化，对slugify()函数进行猴子补丁
- en: A monkey patch (or guerrilla patch) is a piece of code that extends or modifies
    another piece of code at runtime. It is not recommended that you use monkey patches
    often; however, sometimes, they are the only possible way to fix a bug in complex
    third-party modules without creating a separate branch of the module. Also, monkey
    patching can be used to prepare functional or unit tests without using complicated
    and time-consuming database or file manipulations.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 猴子补丁（或游击补丁）是一段代码，它在运行时扩展或修改另一段代码。不建议经常使用猴子补丁；但是，有时它们是修复复杂的第三方模块中的错误的唯一可能方法，而不是创建模块的单独分支。此外，猴子补丁可以用于准备功能或单元测试，而无需使用复杂和耗时的数据库或文件操作。
- en: In this recipe, you will learn how to exchange the default `slugify()` function
    with the one from the third-party `transliterate` package, which handles the conversion
    of Unicode characters to ASCII equivalents more intelligently and includes a number
    of language packs that provide even more specific transformations as needed. As
    a quick reminder, we use the `slugify()` utility to create a URL-friendly version
    of an object's title or uploaded filename. When processed, the function strips
    any leading and trailing whitespace, converts the text to lowercase, removes non-alphanumeric
    characters, and converts spaces to hyphens.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将学习如何使用第三方`transliterate`包中的函数来替换默认的`slugify()`函数，该函数更智能地处理Unicode字符到ASCII等效字符的转换，并包含许多语言包，根据需要提供更具体的转换。快速提醒，我们使用`slugify()`实用程序来创建对象标题或上传文件名的URL友好版本。处理时，该函数会删除任何前导和尾随空格，将文本转换为小写，删除非字母数字字符，并将空格转换为连字符。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'Let''s start with these small steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从这些小步骤开始：
- en: 'Install `transliterate` in your virtual environment as follows:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照以下方式在虚拟环境中安装`transliterate`：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Then, create a `guerrilla_patches` app in your project and put it under `INSTALLED_APPS`
    in the settings.
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在项目中创建一个`guerrilla_patches`应用，并将其放在设置中的`INSTALLED_APPS`下。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'In the `models.py` file of the `guerrilla_patches` app, overwrite the `slugify`
    function from `django.utils.text` with the one from the `transliterate` package:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在`guerrilla_patches`应用的`models.py`文件中，用`transliterate`包中的`slugify`函数覆盖`django.utils.text`中的`slugify`函数：
- en: '[PRE19]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The default Django `slugify()` function handles German diacritical symbols
    incorrectly. To see this for yourself, try to slugify a very long German word
    with all the German diacritical symbols. First, run the following code in the
    Django shell, without the monkey patch:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的Django `slugify()`函数不正确地处理德语变音符号。要自己看看，请尝试使用所有德语变音符号的非常长的德语单词进行slugify。首先，在Django
    shell中运行以下代码，不使用monkey patch：
- en: '[PRE20]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This is incorrect in German, as the letter `ß` is totally stripped out instead
    of being substituted for `ss` and the letters `ä`, `ö`, and `ü` are changed to
    `a`, `o`, and `u`, where they should have been substituted with `ae`, `oe`, and
    `ue`.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这在德语中是不正确的，因为字母`ß`被完全剥离，而不是被替换为`ss`，字母`ä`，`ö`和`ü`被改为`a`，`o`和`u`，而它们应该被替换为`ae`，`oe`和`ue`。
- en: 'The monkey patch that we created loads the `django.utils.text` module at initialization
    and reassigns `transliteration.slugify` in place of the core `slugify()` function.
    Now, if you run the same code in the Django shell, you will get the correct results,
    as follows:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的monkey patch在初始化时加载了`django.utils.text`模块，并在核心`slugify()`函数的位置重新分配了`transliteration.slugify`。现在，如果您在Django
    shell中运行相同的代码，您将得到正确的结果，如下所示：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: To read more about how to utilize the `transliterate` module, refer to [https://pypi.org/project/transliterate](https://pypi.org/project/transliterate/).
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用`transliterate`模块，请参阅[https://pypi.org/project/transliterate](https://pypi.org/project/transliterate/)。
- en: There's more...
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Before creating a monkey patch, we need to completely understand how the code
    that we want to modify works. This can be done by analyzing the existing code
    and inspecting the values of different variables. To do this, there is a useful
    built-in Python debugger module, **pdb,** that can be temporarily added to the
    Django code (or any third-party module) to stop the execution of a development
    server at any breakpoint. Use the following code to debug an unclear part of a
    Python module:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建monkey patch之前，我们需要完全了解要修改的代码的工作原理。这可以通过分析现有代码并检查不同变量的值来完成。为此，有一个有用的内置Python调试器模块**pdb**，可以临时添加到Django代码（或任何第三方模块）中，在任何断点处停止开发服务器的执行。使用以下代码调试Python模块中不清楚的部分：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This launches the interactive shell, where you can type in the variables in
    order to see their values. If you type `c` or `continue`, the code execution will
    continue until the next breakpoint. If you type `q` or `quit`, the management
    command will be aborted.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动交互式shell，您可以在其中输入变量以查看它们的值。如果输入`c`或`continue`，代码执行将继续直到下一个断点。如果输入`q`或`quit`，管理命令将被中止。
- en: You can learn more Python debugger commands and how to inspect the traceback
    of the code at [https://docs.python.org/3/library/pdb.html](https://docs.python.org/3/library/pdb.html).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.python.org/3/library/pdb.html](https://docs.python.org/3/library/pdb.html)了解更多Python调试器命令以及如何检查代码的回溯。
- en: 'Another quick way to see the value of a variable in the development server
    is to raise a warning with the variable as a message, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发服务器中查看变量值的另一种快速方法是通过引发带有变量作为消息的警告，如下所示：
- en: '[PRE23]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: When you are in `DEBUG` mode, the Django logger will provide you with the traceback
    and other local variables.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当您处于`DEBUG`模式时，Django记录器将为您提供回溯和其他本地变量。
- en: Don't forget to remove debugging code before committing your work to a repository.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在将工作提交到存储库之前，请不要忘记删除调试代码。
- en: If you are using the PyCharm interactive development environment, you can set
    breakpoints and debug variables there visually without modifying the source code.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用PyCharm交互式开发环境，可以在那里设置断点并直观地调试变量，而无需修改源代码。
- en: See also
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Using the Django shell* recipe
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django shell*示例'
- en: Toggling the Debug toolbar
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换调试工具栏
- en: While developing with Django, you may want to inspect request headers and parameters,
    check the current template context, or measure the performance of SQL queries.
    All of this and more is possible with the **Django Debug Toolbar**. It is a configurable
    set of panels that display various debugging information about the current request
    and response. In this recipe, we will guide you through how to toggle the visibility
    of the Debug toolbar, depending on a cookie whose value can be set by a bookmarklet.
    A bookmarklet is a bookmark with a small piece of JavaScript code that you can
    run on any page in a browser.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Django进行开发时，您可能希望检查请求标头和参数，检查当前模板上下文，或者测量SQL查询的性能。所有这些以及更多功能都可以通过**Django
    Debug Toolbar**实现。它是一组可配置的面板，显示有关当前请求和响应的各种调试信息。在本教程中，我们将指导您如何根据一个由书签工具设置的cookie的值来切换调试工具栏的可见性。书签工具是一个带有一小段JavaScript代码的书签，您可以在浏览器中的任何页面上运行它。
- en: Getting ready
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with toggling the visibility of the Debug toolbar, go through
    the following steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始切换调试工具栏的可见性，请按照以下步骤进行：
- en: 'Install the Django Debug Toolbar in your virtual environment:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在虚拟环境中安装Django Debug Toolbar：
- en: '[PRE24]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add `"debug_toolbar"` under `INSTALLED_APPS` in the settings:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置的`INSTALLED_APPS`下添加`"debug_toolbar"`：
- en: '[PRE25]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to set up the Django Debug Toolbar, which can be switched
    on or off using a bookmarklet in the browser:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置Django Debug Toolbar，可以使用浏览器中的书签工具切换开启或关闭：
- en: 'Add the following project settings:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下项目设置：
- en: '[PRE26]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the `core` app, create a `misc.py` file with the `custom_show_toolbar()` function,
    as follows:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`core`应用程序中，创建一个带有`custom_show_toolbar()`函数的`misc.py`文件，如下所示：
- en: '[PRE27]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `urls.py` of the project, add these configuration rules:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目的`urls.py`中，添加以下配置规则：
- en: '[PRE28]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open the Chrome or Firefox browser and go to the bookmark manager. Then, create
    two new bookmarks that contain JavaScript. The first link will show the toolbar,
    and will look similar to the following:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Chrome或Firefox浏览器，转到书签管理器。然后，创建两个包含JavaScript的新书签。第一个链接将显示工具栏，看起来类似于以下内容：
- en: '![](img/eb9e72cf-62f5-499f-80d5-af10e85065c7.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eb9e72cf-62f5-499f-80d5-af10e85065c7.png)'
- en: 'The JavaScript code is as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript代码如下：
- en: '[PRE29]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The second JavaScript link will hide the toolbar, and will look similar to
    the following:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个JavaScript链接将隐藏工具栏，看起来类似于以下内容：
- en: '![](img/1894ef15-be7e-4e6a-b76a-5b69c7d710c1.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1894ef15-be7e-4e6a-b76a-5b69c7d710c1.png)'
- en: 'This is the full JavaScript code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是完整的JavaScript代码：
- en: '[PRE30]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `DEBUG_TOOLBAR_PANELS` setting defines the panels to show in the toolbar.
    The `DEBUG_TOOLBAR_CONFIG` dictionary defines the configuration for the toolbar,
    including a path to the function that is used to check whether or not to show
    the toolbar.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEBUG_TOOLBAR_PANELS`设置定义了工具栏中要显示的面板。`DEBUG_TOOLBAR_CONFIG`字典定义了工具栏的配置，包括用于检查是否显示工具栏的函数的路径。'
- en: 'By default, when you browse through your project, the Django Debug Toolbar
    will not be shown; however, as you click on your bookmarklet, Debug Toolbar On,
    the `DebugToolbar` cookie will be set to `1`, the page will be refreshed, and
    you will see the toolbar with debugging panels—for example, you will be able to
    inspect the performance of SQL statements for optimization, as shown in the following
    screenshot:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当您浏览项目时，Django Debug Toolbar不会显示；但是，当您单击书签工具Debug Toolbar On时，`DebugToolbar`
    cookie将被设置为`1`，页面将被刷新，您将看到带有调试面板的工具栏，例如，您将能够检查SQL语句的性能以进行优化，如下面的屏幕截图所示：
- en: '![](img/522d836e-d3fa-4c80-8f8f-64fb91b4789e.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/522d836e-d3fa-4c80-8f8f-64fb91b4789e.png)'
- en: 'You will also be able to check the template context variables for the current
    view, as shown in the following screenshot:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以检查当前视图的模板上下文变量，如下面的屏幕截图所示：
- en: '![](img/fc773aa8-5179-435c-a50d-d4efc15bf495.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc773aa8-5179-435c-a50d-d4efc15bf495.png)'
- en: Clicking on the second bookmarklet, Debug Toolbar Off, will similarly set the
    `DebugToolbar` cookie to `0` and refresh the page, hiding the toolbar again.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 单击第二个书签工具Debug Toolbar Off，将类似地将`DebugToolbar` cookie设置为`0`并刷新页面，再次隐藏工具栏。
- en: See also
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Getting detailed error reporting via email* recipe in [Chapter 13](498be2b9-4d46-4b50-ab7a-27c535792ae6.xhtml)*,
    Maintenance*
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*通过电子邮件获取详细的错误报告*教程在[第13章](498be2b9-4d46-4b50-ab7a-27c535792ae6.xhtml)*维护*中'
- en: Using ThreadLocalMiddleware
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ThreadLocalMiddleware
- en: The `HttpRequest` object contains useful information about the current user,
    language, server variables, cookies, session, and so on. As a matter of fact,
    `HttpRequest` is provided in the views and middleware, and you can pass it (or
    its attribute values) to forms, model methods, model managers, templates, and
    so on. To make life easier, you can use a so-called `ThreadLocalMiddleware` that
    stores the current `HttpRequest` object in the globally accessible Python thread.
    Therefore, you can access it from model methods, forms, signal handlers, and other
    places that didn't have direct access to the `HttpRequest` object previously.
    In this recipe, we will define this middleware.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpRequest`对象包含有关当前用户、语言、服务器变量、cookie、会话等的有用信息。事实上，`HttpRequest`在视图和中间件中提供，并且您可以将其（或其属性值）传递给表单、模型方法、模型管理器、模板等。为了简化生活，您可以使用所谓的`ThreadLocalMiddleware`，它将当前的`HttpRequest`对象存储在全局可访问的Python线程中。因此，您可以从模型方法、表单、信号处理程序和以前无法直接访问`HttpRequest`对象的其他位置访问它。在本教程中，我们将定义这个中间件。'
- en: Getting ready
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create the `core` app and put it under `INSTALLED_APPS` in the settings, if
    you have not done so already.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未这样做，请创建`core`应用程序并将其放在设置的`INSTALLED_APPS`下。
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following two steps to set up `ThreadLocalMiddleware`, which can
    be used to get the current `HttpRequest` or user in any function or method of
    the project''s code:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下两个步骤来设置`ThreadLocalMiddleware`，它可以在项目代码的任何函数或方法中获取当前的`HttpRequest`或用户：
- en: 'Add a `middleware.py` file to the `core` app with the following content:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`core`应用程序中添加一个`middleware.py`文件，内容如下：
- en: '[PRE31]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add this middleware to `MIDDLEWARE` in the settings:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此中间件添加到设置中的`MIDDLEWARE`中：
- en: '[PRE32]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `ThreadLocalMiddleware` processes each request and stores the current `HttpRequest`
    object in the current thread. Each request–response cycle in Django is single
    threaded. We have created two functions: `get_current_request()` and `get_current_user()`.
    These functions can be used from anywhere to grab the current `HttpRequest` object
    or the current user, respectively.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThreadLocalMiddleware` 处理每个请求，并将当前的 `HttpRequest` 对象存储在当前线程中。Django 中的每个请求-响应周期都是单线程的。我们创建了两个函数：`get_current_request()`
    和 `get_current_user()`。这些函数可以从任何地方使用，以分别获取当前的 `HttpRequest` 对象或当前用户。'
- en: 'For example, you can use this middleware to develop and use `CreatorMixin`,
    which will save the current user as the creator of a new model object, as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您可以使用此中间件来开发和使用 `CreatorMixin`，它将保存当前用户作为新模型对象的创建者，如下所示：
- en: '[PRE33]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database **Structure*
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中的*创建一个具有与 URL
    相关方法的模型混合*教程'
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*, Models and Database
    Structure*
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中的*创建一个处理创建和修改日期的模型混合*教程'
- en: The *Creating a model mixin to take care of meta tags* recipe in [Chapter 2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*,
    Models and Database Structure*
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中的*创建一个处理元标签的模型混合*教程'
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*, Models and Database Structure*
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第2章](4d961db0-e9dd-4449-b140-41ea147bccb5.xhtml)*，模型和数据库结构*中的*创建一个处理通用关系的模型混合*教程'
- en: Using signals to notify administrators about new entries
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用信号通知管理员有关新条目
- en: The Django framework includes the concept of **signals**, which are similar
    to events in JavaScript. There are a handful of built-in signals. You can use
    them to trigger actions before and after the initialization of a model, saving
    or deleting an instance, migrating the database schema, handling a request, and
    so on. Moreover, you can create your own signals in your reusable apps and handle
    them in other apps. In this recipe, you will learn how to use signals to send
    emails to administrators whenever a specific model is saved.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Django 框架包括**信号**的概念，类似于 JavaScript 中的事件。有一些内置的信号。您可以使用它们在模型初始化之前和之后触发操作，保存或删除实例，迁移数据库模式，处理请求等。此外，您可以在可重用的应用程序中创建自己的信号，并在其他应用程序中处理它们。在本教程中，您将学习如何使用信号在特定模型保存时向管理员发送电子邮件。
- en: Getting ready
  id: totrans-185
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `viral_videos` app that we created in the *Using database
    query expressions* recipe.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从我们在*使用数据库查询表达式*教程中创建的 `viral_videos` 应用程序开始。
- en: How to do it...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create notifications for administrators:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为管理员创建通知：
- en: 'Create a `signals.py` file with the following content:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `signals.py` 的文件，内容如下：
- en: '[PRE34]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Then we need to create some templates. Start with the template for the email
    subject:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们需要创建一些模板。首先是电子邮件主题的模板：
- en: '[PRE35]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then create a template for a plain text message—something like the following:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个纯文本消息的模板，类似于以下内容：
- en: '[PRE36]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Then create a template for the HTML message as follows:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后创建一个 HTML 消息的模板如下：
- en: '[PRE37]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Create the `apps.py` file with the following content:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `apps.py` 的文件，内容如下：
- en: '[PRE38]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Update the `__init__.py` file with the following content:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容更新 `__init__.py` 文件：
- en: '[PRE39]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Make sure that you have `ADMINS` set in the project settings similar to the following:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在项目设置中设置了类似以下内容的 `ADMINS`：
- en: '[PRE40]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ViralVideosAppConfig` app configuration class has the `ready()` method,
    which will be called when all of the models of the project are loaded into the
    memory. According to the Django documentation, signals allow for certain senders
    to notify a set of receivers that an action has taken place. In the `ready()`
    method, therefore, we import the `inform_administrators()` function.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViralVideosAppConfig` 应用配置类具有 `ready()` 方法，当项目的所有模型加载到内存中时将调用该方法。根据 Django
    文档，信号允许特定发送者通知一组接收者发生了某个动作。因此，在 `ready()` 方法中，我们导入 `inform_administrators()` 函数。'
- en: Through the `@receiver` decorator, `inform_administrators()` is registered for
    the `post_save` signal, and we have limited it to handle only the signals where
    the `ViralVideo` model is `sender`. Therefore, whenever we save a `ViralVideo`
    object, the `receiver` function will be called. The `inform_administrators()`
    function checks whether a video is newly created. If it is, it sends an email
    to the system administrators that are listed in `ADMINS` in the settings.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `@receiver` 装饰器，`inform_administrators()` 被注册为 `post_save` 信号的接收者，并且我们将其限制为仅处理
    `ViralVideo` 模型为 `sender` 的信号。因此，每当我们保存 `ViralVideo` 对象时，将调用 `receiver` 函数。`inform_administrators()`
    函数检查视频是否是新创建的。如果是，它会向在设置中列出的系统管理员发送电子邮件。
- en: We use templates to generate the content of the `subject`, `plain_text_message`,
    and the `html_message` so that we can define default templates for each of these
    within our app. If we make our `viral_videos` app publicly available, those who
    pull it into their own projects can then customize the templates as desired, perhaps
    to wrap them in a company email template wrapper.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用模板生成 `subject`、`plain_text_message` 和 `html_message` 的内容，以便我们可以在我们的应用程序中为每个定义默认模板。如果我们将我们的
    `viral_videos` 应用程序公开可用，那些将其引入其自己项目的人可以根据需要自定义模板，也许将它们包装在公司电子邮件模板包装器中。
- en: You can learn more about the Django signals in the official documentation at
    [https://docs.djangoproject.com/en/3.0/topics/signals/](https://docs.djangoproject.com/en/3.0/topics/signals/).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档 [https://docs.djangoproject.com/en/3.0/topics/signals/](https://docs.djangoproject.com/en/3.0/topics/signals/)
    中了解有关 Django 信号的更多信息。
- en: See also
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating app configuration* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with Django
    3.0*中的*创建应用程序配置*配方
- en: The *Using database query expressions* recipe
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库查询表达式的配方
- en: The *Checking for missing settings* recipe
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查缺失设置的配方
- en: Checking for missing settings
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查缺失设置
- en: From Django 1.7 onward, you can use an extensible **system-check framework**,
    which replaces the old `validate` management command. In this recipe, you will
    learn how to create a check if the `ADMINS` setting is set. Similarly, you will
    be able to check whether different secret keys or access tokens are set for the
    APIs that you are using.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 从Django 1.7开始，您可以使用一个可扩展的**系统检查框架**，它取代了旧的`validate`管理命令。在这个配方中，您将学习如何创建一个检查，以查看`ADMINS`设置是否已设置。同样，您还可以检查您正在使用的API是否设置了不同的密钥或访问令牌。
- en: Getting ready
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `viral_videos` app that was created in the *Using database
    query expressions* recipe and was extended in the previous recipe.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在*使用数据库查询表达式*配方中创建并在上一个配方中扩展的`viral_videos`应用程序开始。
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To use the system-check framework, go through these steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用系统检查框架，请按照以下步骤进行：
- en: 'Create the `checks.py` file with the following content:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`checks.py`文件，内容如下：
- en: '[PRE41]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Import the checks in the `ready()` method of the app configuration as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用程序配置的`ready()`方法中导入检查，如下所示：
- en: '[PRE42]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'To try the check that you just created, remove or comment out the `ADMINS`
    setting and then run the `check` management command in your virtual environment:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要尝试刚刚创建的检查，删除或注释掉`ADMINS`设置，然后在虚拟环境中运行`check`管理命令：
- en: '[PRE43]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The system-check framework has a bunch of checks in the models, fields, databases,
    administration authentication configuration, content types, and security settings,
    where it raises errors or warnings if something in the project is not set correctly.
    Additionally, you can create your own checks, similar to what we did in this recipe.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 系统检查框架在模型、字段、数据库、管理身份验证配置、内容类型和安全设置中有一堆检查，如果项目中的某些内容设置不正确，它会引发错误或警告。此外，您可以创建自己的检查，类似于我们在这个配方中所做的。
- en: We have registered the `settings_check()` function, which returns a list with
    `Warning` if there is no `ADMINS` setting defined for the project.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经注册了`settings_check()`函数，如果项目中没有定义`ADMINS`设置，则返回一个带有`Warning`的列表。
- en: Aside from the `Warning` instances from the `django.core.checks` module, the
    returned list can also contain instances of the `Debug`, `Info`, `Error`, and
    `Critical` built-in classes or any other class inheriting from `django.core.checks.CheckMessage`.
    Logging at the debug, info, and warning levels would fail silently, whereas logging
    at the error and critical levels would prevent the project from running.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 除了来自`django.core.checks`模块的`Warning`实例外，返回的列表还可以包含`Debug`、`Info`、`Error`和`Critical`内置类的实例，或者继承自`django.core.checks.CheckMessage`的任何其他类。在调试、信息和警告级别记录会静默失败，而在错误和严重级别记录会阻止项目运行。
- en: 'In this example, the check is tagged as a compatibility check via the `Tags.compatibility`
    argument passed to the `@register` decorator. Other options provided in `Tags`
    include the following:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，通过将`Tags.compatibility`参数传递给`@register`装饰器，将检查标记为兼容性检查。`Tags`中提供的其他选项包括以下内容：
- en: '`admin` for checks related to the admin site'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`用于与管理员站点相关的检查'
- en: '`caches` for checks related to server caching'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`caches`用于与服务器缓存相关的检查'
- en: '`database` for checks related to the database configuration'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`database`用于与数据库配置相关的检查'
- en: '`models` for checks related to models, model fields, and managers'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models`用于与模型、模型字段和管理器相关的检查'
- en: '`security` for security-related checks'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`security`用于与安全相关的检查'
- en: '`signals` for checks related to signal declarations and handlers'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`信号`用于与信号声明和处理程序相关的检查'
- en: '`staticfiles` for static-file checks'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staticfiles`用于静态文件检查'
- en: '`templates` for template-related checks'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`templates`用于与模板相关的检查'
- en: '`translation` for checks related to string translations'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`translation`用于与字符串翻译相关的检查'
- en: '`url` for checks related to URL configuration'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`用于与URL配置相关的检查'
- en: Learn more about the system-check framework in the official documentation at
    [https://docs.djangoproject.com/en/3.0/topics/checks/](https://docs.djangoproject.com/en/3.0/topics/checks/)​.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方文档中了解有关系统检查框架的更多信息[https://docs.djangoproject.com/en/3.0/topics/checks/](https://docs.djangoproject.com/en/3.0/topics/checks/)​。
- en: See also
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating app configurations* recipe in [Chapter 1](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*,
    Getting Started with Django 3.0*
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第1章](87d1a2a0-31bb-4c77-ab38-98b738f55fa1.xhtml)*, Getting Started with Django
    3.0*中的*创建应用程序配置*配方
- en: The *Using database query expressions* recipe
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库查询表达式的配方
- en: The *Using signals to notify administrators about new entries* recipe
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信号通知管理员有关新条目的配方
