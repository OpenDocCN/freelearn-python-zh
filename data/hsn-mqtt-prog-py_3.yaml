- en: Securing an MQTT 3.1.1 Mosquitto Server
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护MQTT 3.1.1 Mosquitto服务器
- en: 'In this chapter, we will secure an MQTT 3.1.1 Mosquitto server. We will make
    all the configurations required to work with digital certificates to encrypt all
    the data sent between MQTT clients and the server. We will use TLS and we will
    learn to work with client certificates for each MQTT client. We will also learn
    to force the desired TLS protocol version. We will gain an understanding of the
    following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将保护MQTT 3.1.1 Mosquitto服务器。我们将进行所有必要的配置，以使用数字证书加密MQTT客户端和服务器之间发送的所有数据。我们将使用TLS，并学习如何为每个MQTT客户端使用客户端证书。我们还将学习如何强制所需的TLS协议版本。我们将了解以下内容：
- en: The importance of securing a Mosquitto server
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保护Mosquitto服务器的重要性
- en: Generating a private certificate authority to use TLS with Mosquitto
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成用于与Mosquitto使用TLS的私有证书颁发机构
- en: Creating a certificate for the Mosquitto server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Mosquitto服务器创建证书
- en: Configuring TLS transport security in Mosquitto
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mosquitto中配置TLS传输安全性
- en: Testing the MQTT TLS configuration with command-line tools
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具测试MQTT TLS配置
- en: Testing the MQTT TLS configuration with GUI tools
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUI工具测试MQTT TLS配置
- en: Creating a certificate for each MQTT client
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个MQTT客户端创建证书
- en: Configuring TLS client certificate authentication in Mosquitto
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Mosquitto中配置TLS客户端证书认证
- en: Testing the MQTT TLS client authentication with command-line tools
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行工具测试MQTT TLS客户端认证
- en: Testing the MQTT TLS configuration with GUI tools
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用GUI工具测试MQTT TLS配置
- en: Forcing the TLS protocol version to a specific number
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制TLS协议版本为特定数字
- en: Understanding the importance of securing a Mosquitto server
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解保护Mosquitto服务器的重要性
- en: Security for IoT applications is an extremely important topic that deserves
    many entire books dedicated to it. Each solution has its own security requirements
    and it is very important to consider all of them when developing each component
    of the solution.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网应用程序的安全性是一个非常重要的话题，值得有很多专门的书籍来讨论。每个解决方案都有自己的安全要求，当开发解决方案的每个组件时，考虑所有这些要求非常重要。
- en: If we use MQTT to publish values that are neither confidential nor critical
    for other applications, our only concern might be to keep control of the maximum
    number of subscribers to each topic to make sure messages are always available.
    This way, we can prevent the MQTT server failing to deliver messages to a huge
    number of subscribers.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用MQTT发布既不机密也不关键的值，我们唯一关心的可能是控制每个主题的最大订阅者数量，以确保消息始终可用。这样，我们可以防止MQTT服务器无法向大量订阅者传递消息。
- en: However, most of the time we won't be working on a solution that can share data
    with the entire world without limitations and doesn't need to care about data
    confidentiality and integrity, in addition to data availability. Imagine that
    we are working on a solution that allows users to control a huge octocopter drone.
    If the drone flies the wrong way, we can do harm to real people. We cannot allow
    any unknown publisher to be able to send messages to the topics that allow us
    to control the octocopter. We have to make sure that the right person is controlling
    the octocopter and that commands sent as part of messages cannot be altered by
    an intruder in the middle; that is, we need data integrity.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，大多数情况下，我们不会在一个可以无限制地与整个世界共享数据并且不需要关心数据机密性和完整性以及数据可用性的解决方案上工作。想象一下，我们正在开发一个允许用户控制一个巨大的八旋翼无人机的解决方案。如果无人机飞错了方向，我们可能会对真实的人造成伤害。我们不能允许任何未知的发布者能够向允许我们控制八旋翼的主题发送消息。我们必须确保正确的人在控制八旋翼，并且作为消息的一部分发送的命令不能被中间的入侵者更改；也就是说，我们需要数据完整性。
- en: The different levels of security come at a price; that is, there is always an
    additional overhead. Hence, we should always keep a balance to avoid overheads
    that can make the entire solution unfeasible and unusable. Whenever we add more
    security, we will require additional bandwidth and we will add a processing overhead
    in the clients and the server. We have to take into account that some cryptographic
    algorithms that work without problems in modern smartphones aren't suitable for
    IoT boards with constrained processing power. Sometimes, security requirements
    can force us to use specific hardware, such as more powerful IoT boards. We definitely
    have to consider security before purchasing all the hardware for our solution.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 不同级别的安全性都是有代价的；也就是说，总是会有额外的开销。因此，我们应该始终保持平衡，以避免可能使整个解决方案不可行和无法使用的开销。每当我们增加更多的安全性时，我们将需要额外的带宽，并且我们将在客户端和服务器中增加处理开销。我们必须考虑到，一些在现代智能手机上可以无问题运行的加密算法并不适合处理能力受限的物联网板。有时，安全要求可能会迫使我们使用特定的硬件，比如更强大的物联网板。在购买解决方案的所有硬件之前，我们绝对必须考虑安全性。
- en: Another important thing that we must take into account is that many security
    levels require maintenance tasks that might be unfeasible in certain cases or
    extremely difficult to achieve in other cases. For example, if we decide to use
    a certificate for each device that will become a client of the MQTT server, we
    will have to generate and distribute a certificate for each device. We have to
    access the filesystem for the device to copy new files to it. If we have to invalidate
    a certificate, it will be necessary to provide a new certificate to the affected
    device. Consider a situation in which all devices are distributed in different
    locations that are difficult to access; we must have a mechanism to remotely access
    a device and be able to provide it with the new certificate. This task will also
    require security because we don't want anybody to access the device's filesystem.
    Thus, things can become extremely complex once we start analyzing all the security
    requirements and possible and necessary maintenance tasks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须考虑的另一件重要事情是，许多安全级别需要维护任务，在某些情况下可能是不可行的，或者在其他情况下可能非常难以实现。例如，如果我们决定为每个将成为MQTT服务器客户端的设备使用证书，我们将不得不为每个设备生成和分发证书。我们必须访问设备的文件系统，将新文件复制到其中。如果我们必须使证书无效，就需要为受影响的设备提供新的证书。考虑一种情况，所有设备分布在难以访问的不同位置；我们必须有一种机制来远程访问设备，并能够为其提供新的证书。这项任务还需要安全性，因为我们不希望任何人都能访问设备的文件系统。因此，一旦我们开始分析所有安全要求和可能必要的维护任务，事情可能变得非常复杂。
- en: Each MQTT server or broker implementation can provide specific security features.
    We will work with some of the features provided by Mosquitto out of the box. Specific
    security requirements might make us decide to work with a specific MQTT server
    or broker implementation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 每个MQTT服务器或代理实现都可以提供特定的安全功能。我们将使用Mosquitto开箱即用提供的一些功能。特定的安全要求可能会使我们决定使用特定的MQTT服务器或代理实现。
- en: 'When we work with Mosquitto, we can implement security at the following levels:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用Mosquitto时，我们可以在以下级别实施安全性：
- en: '**Network**: We can use a **VPN** (short for **virtual private network**) to
    extend a private network across the internet.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网络**：我们可以使用VPN（虚拟专用网络）在互联网上扩展私有网络。'
- en: '**Transport**: MQTT uses TCP as the transport protocol, and therefore by default
    communications aren''t encrypted. **TLS** (short for **Transport Layer Security**) is
    usually referred to as TLS/SSL because **SSL** (short for **Secure Socket Layers**) is
    its predecessor. We can use TLS to secure and encrypt communications between MQTT
    clients and the MQTT server. The use of TLS with MQTT is sometimes referred to
    as MQTTS. TLS allows us to provide both privacy and data integrity. We can use
    TLS client certificates to provide authentication.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**传输**：MQTT使用TCP作为传输协议，因此默认情况下通信不加密。**TLS**（传输层安全）通常被称为TLS/SSL，因为**SSL**（安全套接字层）是其前身。我们可以使用TLS来保护和加密MQTT客户端和MQTT服务器之间的通信。使用TLS与MQTT有时被称为MQTTS。TLS允许我们同时提供隐私和数据完整性。我们可以使用TLS客户端证书来提供身份验证。'
- en: '**Application**: At this level, we can take advantage of features included
    in MQTT to provide application-level authentication and authorization. We can
    use the `ClientId` (client identifier) to identify each client and combine it
    with user name and password authentication. We can add additional security mechanisms
    at this level. For example, we can encrypt the message payload and/or add integrity
    checks to ensure data integrity. However, the topic will still be unencrypted,
    and therefore TLS is the only way of making sure everything is encrypted. We can
    work with plugins to provide more complex authentication and authorization mechanisms.
    We can grant or deny permissions to each user to control which topics they can
    subscribe to and which topics they can publish messages to.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用**：在这个级别，我们可以利用MQTT中包含的功能来提供应用级别的身份验证和授权。我们可以使用`ClientId`（客户端标识符）来标识每个客户端，并将其与用户名和密码身份验证结合使用。我们可以在这个级别添加额外的安全机制。例如，我们可以加密消息有效载荷和/或添加完整性检查以确保数据完整性。但是，主题仍将是未加密的，因此TLS是确保一切都加密的唯一方法。我们可以使用插件来提供更复杂的身份验证和授权机制。我们可以授予或拒绝每个用户的权限，以控制他们可以订阅哪些主题以及他们可以向哪些主题发布消息。'
- en: Most popular MQTT implementations provide support for TLS. However, make sure
    that you check the features before selecting the appropriate MQTT server for your
    solution.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数流行的MQTT实现都支持TLS。但是，在选择适合您解决方案的MQTT服务器之前，请确保您检查其功能。
- en: We won't cover all security topics, because it would require one or more entire
    books dedicated to these topics. Instead, we will focus on the most common features
    used in transport-level security first and then we will move on to application-level
    security. The use of VPNs is beyond the scope globally of this book. However,
    you must consider their use based on your specific needs. We will use Mosquitto
    for our examples, but you can follow many similar procedures for any other MQTT
    server you decide to use. Everything we will learn will be useful for any other
    MQTT server that provides support for the same security features that we will
    use with Mosquitto.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会涵盖所有安全主题，因为这将需要一个或多个专门致力于这些主题的整本书。相反，我们将首先专注于传输级别安全中最常用的功能，然后再转向应用级别安全。VPN的使用超出了本书的全局范围。但是，您必须根据您的特定需求考虑其使用。我们将在示例中使用Mosquitto，但您可以为任何其他决定使用的MQTT服务器遵循许多类似的程序。我们将学到的一切对于任何其他提供与我们将与Mosquitto一起使用的相同安全功能支持的MQTT服务器都将是有用的。
- en: Generating a private certificate authority to use TLS with Mosquitto
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Mosquitto生成私有证书颁发机构以使用TLS
- en: So far, we have been working with a Mosquitto server with its default configuration,
    which listens on port `1883` and uses plain TCP as the transport protocol. The
    data sent between each MQTT client and the MQTT server isn't encrypted. There
    are no restrictions on subscribers or publishers. If we open firewall ports and
    redirect ports in the router, or we configure port securities for a cloud-based
    virtual machine in which the MQTT server is running, any MQTT client that has
    the IP address or host name for the MQTT server can publish to any topic and can
    subscribe to any topic.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用其默认配置的Mosquitto服务器，它在端口`1883`上监听，并使用纯TCP作为传输协议。每个MQTT客户端和MQTT服务器之间发送的数据都没有加密。订阅者或发布者没有任何限制。如果我们打开防火墙端口并在路由器中重定向端口，或者为运行MQTT服务器的基于云的虚拟机配置端口安全性，任何具有MQTT服务器的IP地址或主机名的MQTT客户端都可以发布到任何主题并订阅任何主题。
- en: In our examples in [Chapter 2](790c1d9a-c895-481e-a1c1-94ea07694cb4.xhtml), *Using
    Command-Line and GUI Tools to Learn How MQTT Works*, we haven't made any changes
    in our configurations to allow incoming connections to port 1883, and therefore
    we haven't opened our Mosquitto server to the internet.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中[第2章](790c1d9a-c895-481e-a1c1-94ea07694cb4.xhtml)中，*使用命令行和GUI工具学习MQTT的工作原理*，我们没有对允许连接到端口1883的传入连接进行任何更改，因此我们没有将我们的Mosquitto服务器开放到互联网。
- en: We want to use TLS with MQTT and Mosquitto in our development environment. This
    way, we will make sure that we can trust the MQTT server because we have confidence
    it is who it says it is, our data will be private because it will be encrypted,
    and it will have integrity because it won't be altered. If you have experience
    with the *HTTP* protocol, you'll recognize that we make the same shift we do when
    we move from using *HTTP* to *HTTPS*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望在我们的开发环境中使用TLS与MQTT和Mosquitto。这样，我们将确保我们可以信任MQTT服务器，因为我们相信它是它所说的那样，我们的数据将是私密的，因为它将被加密，它将具有完整性，因为它不会被篡改。如果您有*HTTP*协议的经验，您会意识到我们所做的转变与我们从使用*HTTP*转移到*HTTPS*时所做的转变是一样的。
- en: Websites purchase certificates from major certificate authorities. If we want
    to use a purchased certificate for the server, we don't need to generate our own
    certificates. In fact, it is the most convenient option when we have an MQTT server
    made public and we move to a production environment.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 网站从主要的证书颁发机构购买证书。如果我们想为服务器使用购买的证书，我们就不需要生成自己的证书。事实上，当我们有一个公开的MQTT服务器并且转移到生产环境时，这是最方便的选择。
- en: In this case, we will use the free OpenSSL utility to generate the necessary
    certificates for the server to enable TLS with Mosquitto for our development environment.
    It is very important to notice that we won't generate a production-ready configuration
    and we are focusing on a secure development environment that will mimic a secure
    production environment.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将使用免费的OpenSSL实用程序为服务器生成必要的证书，以便在我们的开发环境中启用TLS与Mosquitto。非常重要的是要注意，我们不会生成一个生产就绪的配置，我们专注于一个安全的开发环境，它将模拟一个安全的生产环境。
- en: OpenSSL is already installed in macOS and most modern Linux distributions. In
    Windows, we have already installed OpenSSL as one of the prerequisites for Mosquitto.
    The use of the OpenSSL utility deserves an entire book, and therefore we will
    just focus on generating the certificate we need with the most common options.
    If you have specific security needs, make sure you explore the necessary options
    to achieve your goals with OpenSSL.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: OpenSSL已经安装在macOS和大多数现代Linux发行版中。在Windows中，我们已经将OpenSSL安装为Mosquitto的先决条件之一。使用OpenSSL实用程序需要一本完整的书，因此我们将专注于使用最常见的选项生成我们需要的证书。如果您有特定的安全需求，请确保您探索使用OpenSSL实现您的目标所需的选项。
- en: Specifically, we will generate an X.509 digital certificate that uses the X.509
    **PKI** (short for **public key infrastructure**) standard. This digital certificate
    allows us to confirm that a specific public key belongs to the subject included
    within the certificate. There is an identity that issues the certificate and its
    details are also included in the certificate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将生成一个使用X.509 **PKI**（公钥基础设施的缩写）标准的X.509数字证书。这个数字证书允许我们确认特定的公钥属于证书中包含的主体。有一个发行证书的身份，它的详细信息也包含在证书中。
- en: The digital certificate is valid only within a specific period, and therefore
    we must take into account that a digital certificate will expire some day and
    we will have to provide a new certificate to replace the expired one. There are
    specific data requirements for certificates based on the specific X.509 version
    that we use. According to the version and to the options we use to generate the
    certificates, we might need to provide specific data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 数字证书仅在特定期限内有效，因此我们必须考虑数字证书某一天会过期，我们将不得不提供新的证书来替换过期的证书。根据我们使用的特定X.509版本，证书有特定的数据要求。根据版本和我们用来生成证书的选项，我们可能需要提供特定的数据。
- en: We will be running commands to generate different X.509 digital certificates
    and we will provide all the necessary details that will be included in the certificate.
    We will understand all the data that the certificate will have when we create
    it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将运行命令来生成不同的X.509数字证书，并提供将包含在证书中的所有必要细节。我们将在创建证书时了解证书将具有的所有数据。
- en: We will create our own private certificate authority, also known as a CA. We
    will create a root certificate and then we will generate the server key.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建我们自己的私有证书颁发机构，也称为CA。我们将创建一个根证书，然后我们将生成服务器密钥。
- en: Check the directory or folder in which you installed OpenSSL.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 检查您安装OpenSSL的目录或文件夹。
- en: On macOS, OpenSSL is installed in `/usr/bin/openssl`. However, it is an old
    version and it is necessary to install a newer version before running the commands.
    It is possible to install the new version with the `homebrew` package manager
    and you will be able to run the new version in another directory. For example,
    the path for version 1.0.2n, installed with `homebrew`, will be in `/usr/local/Cellar/openssl/1.0.2n/bin/openssl`.
    Make sure you don't use the default old version.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS上，OpenSSL安装在`/usr/bin/openssl`中。但是，这是一个旧版本，需要在运行命令之前安装一个新版本。可以使用`homebrew`软件包管理器安装新版本，并且您将能够在另一个目录中运行新版本。例如，使用`homebrew`安装的版本1.0.2n的路径将在`/usr/local/Cellar/openssl/1.0.2n/bin/openssl`中。确保您不使用默认的旧版本。
- en: In Windows, the OpenSSL version we installed as a prerequisite for Mosquitto,
    in [Chapter 2](https://cdp.packtpub.com/hands_on_mqtt_programming_with_python/wp-admin/post.php?post=26&action=edit#post_25), *Using
    Command-Line and GUI Tools to Learn How MQTT Works*, has the `openssl.exe` executable
    file in the default `C:\OpenSSL-Win32\bin` folder. If you are working with Windows,
    you can use either the Command Prompt or Windows PowerShell.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，我们安装为Mosquitto先决条件的OpenSSL版本，在[第2章](https://cdp.packtpub.com/hands_on_mqtt_programming_with_python/wp-admin/post.php?post=26&action=edit#post_25)中，*使用命令行和GUI工具学习MQTT工作*，默认的`C:\OpenSSL-Win32\bin`文件夹中有`openssl.exe`可执行文件。如果您使用Windows，可以使用命令提示符或Windows
    PowerShell。
- en: In any operating system, use the full path to the appropriate OpenSSL version
    in each of the next commands that start with `openssl`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何操作系统中，使用下一个以`openssl`开头的命令中适当的OpenSSL版本的完整路径。
- en: Create a new directory named `mosquitto_certificates` and change the necessary
    permissions for this directory to make sure that you can only access its contents.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`mosquitto_certificates`的新目录，并更改此目录的必要权限，以确保您只能访问其内容。
- en: 'Open a Terminal in macOS or Linux, or a Command Prompt in Windows, and go to
    the previously created directory, `mosquitto_certificates`. Run the following
    command to create a 2,048-bit root key and save it in the `ca.key` file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS或Linux中打开终端，或者在Windows中打开命令提示符，并转到之前创建的`mosquitto_certificates`目录。运行以下命令来创建一个2,048位的根密钥，并将其保存在`ca.key`文件中：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following lines show sample output generated by the previous command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了上一个命令生成的示例输出：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous command will generate the private root key in the `ca.key` file.
    Make sure you keep this file private because anybody that has this file will be
    able to generate certificates. It is also possible to password-protect this file
    by using other options with `openssl`. However, as previously explained, we will
    follow the necessary steps to use TLS and you can explore additional options related
    to OpenSSL and certificates.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将在`ca.key`文件中生成私有根密钥。确保您保持此文件私密，因为任何拥有此文件的人都将能够生成证书。也可以使用`openssl`的其他选项来保护此文件的密码。但是，如前所述，我们将遵循使用TLS的必要步骤，您可以探索与OpenSSL和证书相关的其他选项。
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to self-sign the root certificate. The next command uses
    the previously created 2,048-bit private key saved in the `ca.key` file and generates
    a `ca.crt` file with the self-signed X.509 digital certificate. The command makes
    the self-signed certificate valid for `3650` days. The value is specified after
    the `-days` option:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 转到macOS或Linux中的终端，或者在Windows中的命令提示符中。运行以下命令以自签名根证书。下一个命令使用先前创建的2,048位私钥保存在`ca.key`文件中，并生成一个带有自签名X.509数字证书的`ca.crt`文件。该命令使自签名证书在`3650`天内有效。该值在`-days`选项之后指定：
- en: '[PRE2]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this case, we specified the `-sha256` option to use SHA-256 hash functions.
    If we want increased security, we can use the `-sha512` instead option of `-sha256`
    in all cases in which we are using `-sha256`. This way, we will use SHA-512 hash
    functions. However, we must take into account that SHA-512 might not be appropriate
    for certain power-constrained IoT devices.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们指定了`-sha256`选项来使用SHA-256哈希函数。如果我们想要增加安全性，我们可以在所有使用`-sha256`的情况下使用`-sha512`选项。这样，我们将使用SHA-512哈希函数。然而，我们必须考虑到SHA-512可能不适合某些功耗受限的物联网设备。
- en: After you enter the previous command, OpenSSL asks for information that will
    be incorporated into the certificate. You have to enter the information and press
    *Enter*. If you don't want to enter specific information, just enter a dot (`.`)
    and press *Enter*. It is possible to pass all the values as arguments for the
    `openssl` command, but it makes it a bit difficult to understand what we are doing.
    In fact, it is also possible to use fewer calls to the `openssl` command to perform
    the previous tasks. However, we run a few more steps to understand what we are
    doing.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入上述命令后，OpenSSL会要求输入将被合并到证书中的信息。您必须输入信息并按*Enter*。如果您不想输入特定信息，只需输入一个点(`.`)并按*Enter*。可以将所有值作为`openssl`命令的参数传递，但这样做会使我们难以理解我们正在做什么。事实上，也可以使用更少的调用`openssl`命令来执行前面的任务。但是，我们运行了更多的步骤来理解我们正在做什么。
- en: 'The following lines show sample output and questions with sample answers. Remember
    that we are generating our private certificate authority:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了示例输出和带有示例答案的问题。请记住，我们正在生成我们的私有证书颁发机构：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the following command to display the data and details for the recently
    generated certificate authority certificate file:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以显示最近生成的证书颁发机构证书文件的数据和详细信息：
- en: '[PRE4]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After running the previous commands, we will have the following two files in
    the `mqtt_certificates` directory:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行上述命令之后，我们将在`mqtt_certificates`目录中有以下两个文件：
- en: '`ca.key`: Certificate authority key'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca.key`：证书颁发机构密钥'
- en: '`ca.crt`: Certificate authority certificate file'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca.crt`：证书颁发机构证书文件'
- en: The certificate authority certificate file is in the **PEM** (short for **privacy
    enhanced mail**) format. We must remember this format because some MQTT utilities
    will require us to specify whether the certificate is in PEM format or not. A
    wrong value in this option won't allow the MQTT client to establish a connection
    with an MQTT server that uses a certificate in PEM format.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 证书颁发机构证书文件采用**PEM**（即**隐私增强邮件**）格式。我们必须记住这种格式，因为一些MQTT工具将要求我们指定证书是否采用PEM格式。在此选项中输入错误的值将不允许MQTT客户端与使用PEM格式证书的MQTT服务器建立连接。
- en: Creating a certificate for the Mosquitto server
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Mosquitto服务器创建证书
- en: Now that we have a private certificate authority, we can create the certificate
    for the Mosquitto server, that is, a certificate for the computer that will run
    the MQTT server.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个私有证书颁发机构，我们可以为Mosquitto服务器创建证书，也就是为将运行MQTT服务器的计算机创建证书。
- en: First, we must generate a new private key that will be different from the private
    key we generated for our own private certificate authority.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须生成一个新的私钥，该私钥将与我们为自己的私有证书颁发机构生成的私钥不同。
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to create a 2,048-bit key and save it in the `server.key`
    file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 转到macOS或Linux中的终端，或者Windows中的命令提示符。运行以下命令以创建一个2048位密钥并将其保存在`server.key`文件中：
- en: '[PRE5]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following lines show sample output generated by the previous command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了由上一个命令生成的示例输出：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The previous command will generate the private key in the `server.key` file.
    Go back to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to generate a certificate signing request. The next command
    uses the previously created 2,048-bit private key saved in the `server.key` file
    and generates a `server.csr` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将在`server.key`文件中生成私钥。返回到macOS或Linux中的终端，或者Windows中的命令提示符。运行以下命令以生成证书签名请求。下一个命令使用先前创建的2048位私钥保存在`server.key`文件中，并生成`server.csr`文件：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'After you enter the previous command, OpenSSL asks for information that will
    be incorporated in the certificate. You have to enter the information and press
    *Enter*. If you don''t want to enter specific information, just enter a dot (`.`)
    and press *Enter*. In this case, the most important value is Common Name. Enter
    the IPv4 or IPv6 address for the computer that is running the Mosquitto server
    in this field instead of the `192.168.1.1` value shown in the next lines. The
    following lines show the sample output and questions with sample answers. Do not
    forget to enter the appropriate value for Common Name:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 输入上述命令后，OpenSSL会要求输入将纳入证书中的信息。您必须输入信息并按*Enter*。如果您不想输入特定信息，只需输入一个点（`.`）并按*Enter*。在这种情况下，最重要的值是通用名称。在此字段中，输入运行Mosquitto服务器的计算机的IPv4或IPv6地址，而不是下一行中显示的`192.168.1.1`值。以下行显示了示例输出和示例答案的问题。不要忘记输入通用名称的适当值：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to sign the previously created certificate signing request,
    that is, the `server.csr` file. The next command also uses the self-signed X.509
    digital certificate for the certificate authority and its private key that we
    generated before: the `ca.crt` and `ca.key` files.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 转到macOS或Linux中的终端，或者Windows中的命令提示符。运行以下命令以签署先前创建的证书签名请求，即`server.csr`文件。下一个命令还使用了我们之前生成的自签名X.509数字证书的证书颁发机构和私钥：`ca.crt`和`ca.key`文件。
- en: 'The command generates a `server.crt` file with the signed X.509 digital certificate
    for the Mosquitto server. The command makes the signed certificate valid for 3,650
    days. The value is specified after the `-days` option:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令生成了一个带有Mosquitto服务器签名的X.509数字证书的`server.crt`文件。该命令使签名证书有效期为3650天。该值在`-days`选项之后指定：
- en: '[PRE9]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: As happened when we created the self-signed X.509 digital certificate for the
    certificate authority, we also specify the `-sha256` option to use SHA-256 hash
    functions for the Mosquitto server certificate. You can use `-sha512` instead
    option of `-sha256` if you want to use SHA-512 hash functions for increased security.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们为证书颁发机构创建自签名X.509数字证书时一样，我们还指定了`-sha256`选项，以便为Mosquitto服务器证书使用SHA-256哈希函数。如果您想要使用SHA-512哈希函数以增加安全性，可以使用`-sha512`选项代替`-sha256`。
- en: 'The following lines show sample output generated by the previous command. The
    values shown after `subject` will be different in your configuration because you
    entered your own values when you generated the certificate signing request that
    was saved in the `server.csr` file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了由上一个命令生成的示例输出。在`subject`之后显示的值将在您的配置中有所不同，因为您在生成证书签名请求时输入了自己的值，这些值保存在`server.csr`文件中：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following command to display data and details for the generated server
    certificate file:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以显示生成的服务器证书文件的数据和详细信息：
- en: '[PRE11]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following lines show sample output that displays details about the signature
    algorithm, the issuer, the validity, the subject, and the signature algorithms:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了显示有关签名算法、颁发者、有效性、主题和签名算法的详细信息的示例输出：
- en: '[PRE12]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'After running the previous commands, we will have the following three files
    in the `mqtt_certificates` directory:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，我们将在`mqtt_certificates`目录中有以下三个文件：
- en: '`server.key`: Server key'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.key`：服务器密钥'
- en: '`server.csr`: Server certificate signing request'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.csr`：服务器证书签名请求'
- en: '`server.crt`: Server certificate file'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.crt`：服务器证书文件'
- en: The server certificate file is in PEM format, as is the certificate authority
    certificate file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器证书文件采用PEM格式，证书颁发机构证书文件也是如此。
- en: Configuring TLS transport security in Mosquitto
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mosquitto中配置TLS传输安全
- en: Now, we will configure Mosquitto to use TLS transport security and work with
    encrypted communications with different clients. Notice that we haven't generated
    certificates for the clients, and therefore we won't use client certificates for
    authentication. This way, any client that has the `ca.crt` file will be able to
    establish communication with the Mosquitto server.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将配置Mosquitto使用TLS传输安全，并与不同客户端进行加密通信。请注意，我们尚未为客户端生成证书，因此我们不会使用客户端证书进行身份验证。这样，任何拥有`ca.crt`文件的客户端都将能够与Mosquitto服务器建立通信。
- en: Go to the Mosquitto installation directory and create a new sub-directory named
    `certificates`. In Windows, you will need administrator privileges to access the
    default installation folder.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Mosquitto安装目录，并创建一个名为`certificates`的新子目录。在Windows中，您需要管理员权限才能访问默认安装文件夹。
- en: 'Copy the following files from the `mqtt_certificates` directory, in which we
    saved the certificate authority certificate and the server certificate, to the
    `certificates` sub-directory we recently created within the Mosquitto installation
    directory:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 从`mqtt_certificates`目录中复制以下文件（我们在其中保存了证书颁发机构证书和服务器证书）到我们最近在Mosquitto安装目录中创建的`certificates`子目录：
- en: '`ca.crt`'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca.crt`'
- en: '`server.crt`'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.crt`'
- en: '`server.key`'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`server.key`'
- en: 'If you are running the Mosquitto server in a Terminal window in macOS or Linux,
    press *Ctrl* + *C* to stop it. In Windows, stop the appropriate service by using
    the *Services* app. If you are running the Mosquitto server in Linux, run the
    following command to stop the service:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在macOS或Linux的终端窗口中运行Mosquitto服务器，请按下*Ctrl* + *C*来停止它。在Windows中，使用*Services*应用程序停止适当的服务。如果您在Linux中运行Mosquitto服务器，请运行以下命令停止服务：
- en: '[PRE13]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Go to the Mosquitto installation directory and open the `mosquitto.conf` configuration
    file with your favorite text editor. By default, all the lines for this file are
    commented out; that is, they start with a hash sign (`#`). The default value for
    each setting is indicated and includes the appropriate comments. This way, we
    easily know all the default values. The settings are organized in different sections.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Mosquitto安装目录，并使用您喜欢的文本编辑器打开`mosquitto.conf`配置文件。默认情况下，此文件的所有行都被注释掉，即以井号(`#`)开头。每个设置的默认值已指示，并包括适当的注释。这样，我们很容易知道所有默认值。设置按不同部分组织。
- en: It is good practice to make a backup copy of the exiting `mosquitto.conf` configuration
    file before making changes to it. Whenever we make changes to `mosquitto.conf`,
    it is a good idea to be able to easily roll back to the previous configuration
    if something goes wrong.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在对其进行更改之前，最好先备份现有的`mosquitto.conf`配置文件。每当我们对`mosquitto.conf`进行更改时，如果出现问题，能够轻松回滚到先前的配置是一个好主意。
- en: 'On macOS or Linux, add the following lines at the end of the configuration
    file and make sure you replace `/usr/local/etc/mosquitto/certificates` with the
    full path to the `certificates` directory we created within the `Mosquitto` installation
    folder:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS或Linux中，在配置文件的末尾添加以下行，并确保将`/usr/local/etc/mosquitto/certificates`替换为我们在`Mosquitto`安装文件夹中创建的`certificates`目录的完整路径：
- en: '[PRE14]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In Windows, add the following lines at the end of the configuration file and
    make sure you replace `C:\Program Files (x86)\mosquitto\certificates` with the
    full path to the `certificates` directory we created within the `Mosquitto` installation
    folder. Notice that you will need administrator privileges when you run the text
    editor to open the file; that is, you will have to run the text editor as an administrator:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows中，在配置文件的末尾添加以下行，并确保将`C:\Program Files (x86)\mosquitto\certificates`替换为我们在`Mosquitto`安装文件夹中创建的`certificates`目录的完整路径。请注意，当您运行文本编辑器打开文件时，您将需要管理员权限；也就是说，您将需要以管理员身份运行文本编辑器：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We specified the `8883` value for the listener option to make Mosquitto listen
    for incoming network connections on TCP port number `8883`. This port is the default
    port number for MQTT with TLS.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为监听器选项指定了`8883`值，以使Mosquitto在TCP端口号`8883`上监听传入的网络连接。此端口是具有TLS的MQTT的默认端口号。
- en: 'The `cafile` option specifies the full path for the file that provides a PEM-encoded
    certificate authority certificate file: `ca.crt`.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`cafile`选项指定提供PEM编码证书颁发机构证书文件`ca.crt`的完整路径。'
- en: 'The `certfile` option specifies the full path for the file that provides a
    PEM encoded server certificate: `server.crt`.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`certfile`选项指定提供PEM编码服务器证书`server.crt`的完整路径。'
- en: 'Finally, the `keyfile` option specifies the full path for the file that provides
    a PEM-encoded server keyfile: `server.key`.'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，`keyfile`选项指定提供PEM编码服务器密钥文件`server.key`的完整路径。
- en: Save the changes to the `mosquitto.conf` configuration file and launch Mosquitto
    again with the same mechanism we learned for Linux, macOS, and Windows in the
    previous chapter. The Mosquitto server will be listening on port `8883` instead
    of `1883`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改到`mosquitto.conf`配置文件，并使用我们在上一章中学到的相同机制再次启动Mosquitto，以在端口`8883`而不是`1883`上监听Mosquitto服务器。
- en: Testing the MQTT TLS configuration with command-line tools
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行工具测试MQTT TLS配置
- en: 'We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to try to generate a simple MQTT client that subscribes to a topic and prints
    all the messages it receives. We will use the default configuration, to try to
    establish a communication with the Mosquitto server, by using the default `1883`
    port without a certificate authority certificate specified. Open a Terminal in
    macOS or Linux, or a Command Prompt in Windows, go to the directory in which Mosquitto
    is installed, and run the following command:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Mosquitto中包含的`mosquitto_sub`命令行实用程序尝试生成一个简单的MQTT客户端，该客户端订阅一个主题并打印其接收到的所有消息。我们将使用默认配置，尝试使用默认的`1883`端口与Mosquitto服务器建立通信，而不指定证书颁发机构证书。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到Mosquitto安装的目录，并运行以下命令：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `mosquitto_sub` utility will display the following error. The Mosquitto
    server is not accepting any connections on port `1883` anymore. Notice that the
    error message might be different depending on the platform:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`mosquitto_sub`实用程序将显示以下错误。Mosquitto服务器不再接受端口`1883`上的任何连接。请注意，错误消息可能因平台而异：'
- en: '[PRE17]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the following command using the `-p` option, followed by the port number
    that we want to use: `8883`. This way, we will try to connect to port `8883` instead
    of the default port `1883`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`-p`选项运行以下命令，后跟我们要使用的端口号：`8883`。这样，我们将尝试连接到端口`8883`，而不是默认端口`1883`：
- en: '[PRE18]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `mosquitto_sub` utility will display debug messages indicating it is sending
    the `CONNECT` packet to the MQTT server. However, the connection will never be
    established because the potential MQTT client isn''t providing the required certificate
    authority. Press *Ctrl* + *C* to stop the utility trying to connect. The following
    lines show the sample output generated by the previous command:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`mosquitto_sub`实用程序将显示调试消息，指示它正在向MQTT服务器发送`CONNECT`数据包。但是，连接将永远不会建立，因为潜在的MQTT客户端未提供所需的证书颁发机构。按下*Ctrl*
    + *C*停止实用程序尝试连接。以下行显示了上一个命令生成的示例输出：'
- en: '[PRE19]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following command uses the `-h` option followed by the MQTT server host.
    In this case, we specify the IPv4 address of the computer that is running the
    Mosquitto MQTT server: `192.168.1.1`. Notice that this value must match the IPv4
    or IPv6 address that we specified as the value in the Common Name field when we
    generated the `server.csr` file, that is, the server certificate signing request.
    If you used a host name as the value in the Common Name field instead of an IPv4
    or IPv6 address, you will have to use the same host name. If there is not match
    between the value specified for the `-h` option and the value indicated in the
    Common Name field, the Mosquitto server will reject the client. Thus, make sure
    you replace `192.168.1.1` in the next line with the appropriate value. In addition,
    the command specifies the certificate authority certificate file after the `--cafile`
    option and indicates that we want to use port `8883`. You just have to replace
    `ca.crt` with the full path to the `ca.crt` file you created in the `mqtt_certificates`
    directory. For example, it might be `C:\mqtt_certificates\ca.crt` in Windows or
    `/Users/gaston/mqtt_certificates/ca.crt` in macOS or Linux. The `mosquitto_sub`
    utility will create an MQTT subscriber that will establish an encrypted connection
    with Mosquitto:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令使用`-h`选项，后跟MQTT服务器主机。在这种情况下，我们指定运行Mosquitto MQTT服务器的计算机的IPv4地址：`192.168.1.1`。请注意，此值必须与我们在生成`server.csr`文件时指定为通用名称字段中的IPv4或IPv6地址相匹配，即服务器证书签名请求。如果您在通用名称字段中使用主机名作为值，而不是IPv4或IPv6地址，则必须使用相同的主机名。如果`-h`选项指定的值与通用名称字段中指示的值不匹配，则Mosquitto服务器将拒绝客户端。因此，请确保您在下一行中用适当的值替换`192.168.1.1`。此外，该命令在`--cafile`选项之后指定证书颁发机构证书文件，并指示我们要使用端口`8883`。您只需将`ca.crt`替换为您在`mqtt_certificates`目录中创建的`ca.crt`文件的完整路径。例如，在Windows中可能是`C:\mqtt_certificates\ca.crt`，在macOS或Linux中可能是`/Users/gaston/mqtt_certificates/ca.crt`。`mosquitto_sub`实用程序将创建一个与Mosquitto建立加密连接的MQTT订阅者：
- en: '[PRE20]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you specify a value for the `-h` option that doesn''t match the value specified
    in the Common Name field when you generated the `server.csr` file, you will see
    the following error message as a result of the previous command:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您为`-h`选项指定的值与您在生成`server.csr`文件时指定的通用名称字段中的值不匹配，则将看到以下错误消息作为上一个命令的结果：
- en: '[PRE21]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: If the command generates the previous error message, make sure you review the
    previous steps to generate the `server.csr` file. Make sure you don't use `localhost`
    as the value for the `-h` option.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果命令生成了上一个错误消息，请确保查看生成`server.csr`文件的先前步骤。确保不要将`localhost`用作`-h`选项的值。
- en: With a similar syntax, we will use the `mosquitto_pub` command-line utility
    included in Mosquitto to generate a simple MQTT client that publishes a message
    to a topic, with an encrypted connection. Open a Terminal in macOS or Linux, or
    a Command Prompt in Windows, go to the directory in which Mosquitto is installed,
    and run the following command.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似的语法，我们将使用Mosquitto中包含的`mosquitto_pub`命令行实用程序生成一个简单的MQTT客户端，该客户端将发布消息到一个主题，并使用加密连接。在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令。
- en: 'Remember to replace `192.168.1.1` in the next line with the appropriate value. In
    addition, replace `ca.crt` with the full path to the `ca.crt` file you created
    in the `mqtt_certificates` directory:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住在下一行中用适当的值替换`192.168.1.1`。此外，请用`mqtt_certificates`目录中创建的`ca.crt`文件的完整路径替换`ca.crt`：
- en: '[PRE22]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: After the command publishes the message, you will see it in the window that
    used the `mosquitto_sub` command to subscribe to the `sensors/octocopter01/altitude`
    topic.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令发布消息后，您将在使用`mosquitto_sub`命令订阅`sensors/octocopter01/altitude`主题的窗口中看到该消息。
- en: Testing the MQTT TLS configuration with GUI tools
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI工具测试MQTT TLS配置
- en: 'Now, we will use the MQTT.fx GUI utility to generate another MQTT client that
    uses an encrypted connection to publish messages to the same topic: `sensors/octocopter01/altitude`.
    We have to make changes to the connection options to enable TLS and specify the
    certificate authority certificate file. Follow these steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT.fx GUI实用程序生成另一个MQTT客户端，该客户端使用加密连接将消息发布到相同的主题：`sensors/octocopter01/altitude`。我们必须更改连接选项以启用TLS并指定证书颁发机构证书文件。请按照以下步骤操作：
- en: Launch MQTT.fx, select local mosquitto in the drop-down located at the upper-left
    corner, and click on the configuration icon at the right-hand side of this drop-down
    and at the left-hand side of the Connect button. MQTT.fx will display the Edit
    Connection Profiles dialog box with different options for the connection profile
    named local mosquitto.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MQTT.fx，在左上角的下拉菜单中选择本地mosquitto，并单击此下拉菜单右侧和连接按钮左侧的配置图标。MQTT.fx将显示带有不同连接配置文件选项的编辑连接配置文件对话框，名为本地mosquitto。
- en: Go to the Broker Address textbox and enter the IPv4 or IPv6 address that we
    specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name. If there is no match between the value specified
    in Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到经纪人地址文本框，并输入我们在生成`server.csr`文件时指定为通用名称字段值的IPv4或IPv6地址，即服务器证书签名请求。如果您在通用名称字段中使用的是主机名而不是IPv4或IPv6地址，您将需要使用相同的主机名。如果经纪人地址中指定的值与通用名称字段中指示的值不匹配，Mosquitto服务器将拒绝客户端。
- en: Go to the Broker Port textbook and enter 8883.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到经纪人端口文本框，并输入8883。
- en: Click the SSL/TLS button.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击SSL/TLS按钮。
- en: Activate the Enable SSL/TLS checkbox.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活启用SSL/TLS复选框。
- en: Activate the CA certificate file radio button.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活CA证书文件单选按钮。
- en: 'Enter or select the full path to the `ca.crt` file that you created in the
    `mqtt_certificates` folder in the CA Certificate File textbox and click OK. The
    following screenshot shows a dialog box with the selected options:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CA证书文件文本框中输入或选择您在CA证书文件夹中创建的`ca.crt`文件的完整路径，然后单击确定。以下屏幕截图显示了所选选项的对话框：
- en: '![](assets/83c21b8b-589b-446b-8a24-067dc32e5e6e.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/83c21b8b-589b-446b-8a24-067dc32e5e6e.png)'
- en: Click on the Connect button. MQTT.fx will establish an encrypted connection
    with the local Mosquitto server. Notice that the Connect button is disabled and
    the Disconnect button is enabled because the client is connected to the Mosquitto
    server.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击连接按钮。MQTT.fx将与本地Mosquitto服务器建立加密连接。请注意，连接按钮已禁用，断开按钮已启用，因为客户端已连接到Mosquitto服务器。
- en: Click Subscribe and enter `sensors/octocopter01/altitude` in the drop-down at
    the left-hand side of the Subscribe button. Then, click the Subscribe button.
    MQTT.fx will display a new panel at the left-hand side with the topic to which
    we have subscribed.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击订阅并在订阅按钮左侧的下拉菜单中输入`sensors/octocopter01/altitude`。然后，点击订阅按钮。MQTT.fx将在左侧显示一个新面板，显示我们已订阅的主题。
- en: Click Publish and enter `sensors/octocopter01/altitude` in the drop-down at
    the left-hand side of the Publish button.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击发布，并在发布按钮左侧的下拉菜单中输入`sensors/octocopter01/altitude`。
- en: 'Enter the following text in the textbox below the Publish button: `250 f`.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布按钮下方的文本框中输入以下文本：`250 f`。
- en: Then, click the Publish button. MQTT.fx will publish the entered text to the
    specified topic.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击发布按钮。MQTT.fx将发布输入的文本到指定的主题。
- en: Click Subscribe and you will see the published message.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击订阅，您将看到已发布的消息。
- en: With the configuration changes we have made to the Mosquitto server, any client
    that has the certificate authority certificate file, that is, the `ca.crt` file
    we generated, will be able to establish a connection with Mosquitto, subscribe,
    and publish to topics. The data sent between MQTT clients and the MQTT server
    is encrypted. In this configuration, we don't require the MQTT clients to provide
    certificates for authentication. However, don't forget that we are making configurations
    for our development environment. We should never use self-signed certificates
    for a production Mosquitto server.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们对Mosquitto服务器所做的配置更改，任何具有证书颁发机构证书文件（即我们生成的`ca.crt`文件）的客户端都将能够与Mosquitto建立连接，订阅和发布主题。
    MQTT客户端和MQTT服务器之间发送的数据是加密的。在此配置中，我们不需要MQTT客户端提供证书进行身份验证。但是，请不要忘记我们正在为开发环境进行配置。我们不应该在生产Mosquitto服务器上使用自签名证书。
- en: 'There is another very popular GUI utility we can use to generate MQTT clients
    that can subscribe to topics and publish to topics: MQTT-spy. This utility is
    open source and can run on any computer that has Java 8 or higher installed on
    it. You can find more information about MQTT-spy here: [https://github.com/eclipse/paho.mqtt-spy](https://github.com/eclipse/paho.mqtt-spy).
    The options to establish a connection with an MQTT server with a certificate authority
    certificate file are similar to the ones we analyzed for MQTT.fx. However, if
    you also want to work with this utility, it is convenient to analyze them in detail.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一个非常受欢迎的GUI实用程序，我们可以使用它来生成可以订阅主题和发布主题的MQTT客户端：MQTT-spy。该实用程序是开源的，可以在安装了Java
    8或更高版本的任何计算机上运行。您可以在此处找到有关MQTT-spy的更多信息：[https://github.com/eclipse/paho.mqtt-spy](https://github.com/eclipse/paho.mqtt-spy)。使用证书颁发机构证书文件与MQTT服务器建立连接的选项与我们为MQTT.fx分析的选项类似。但是，如果您还想使用此实用程序，最好详细分析这些选项。
- en: 'Now, we will use the MQTT-spy GUI utility to generate another MQTT client that
    uses an encrypted connection to publish messages to the same topic, `sensors/octocopter01/altitude`.
    Follow these steps:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT-spy GUI实用程序生成另一个使用加密连接发布消息到相同主题`sensors/octocopter01/altitude`的MQTT客户端。按照以下步骤：
- en: Launch MQTT-spy.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MQTT-spy。
- en: Select Connections | New connection. The Connection list dialog box will appear.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择连接 | 新连接。连接列表对话框将出现。
- en: Click on the Connectivity tab and select MQTT 3.1.1 in the Protocol version
    drop-down. We want to work with MQTT version 3.1.1.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击连接选项卡，并在协议版本下拉菜单中选择MQTT 3.1.1。我们希望使用MQTT版本3.1.1。
- en: Go to the Server URI(s) textbox and enter the IPv4 or IPv6 address that we specified
    as the value in the Common Name field when we generated the `server.csr` file,
    that is, the server certificate signing request. If you used a host name as the
    value in the Common Name field instead of an IPv4 or IPv6 address, you will have
    to use the same host name. If there is not match between the value specified in
    Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client generated by the MQTT-spy utility.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到服务器URI(s)文本框，并输入我们在生成`server.csr`文件时指定为通用名称字段值的IPv4或IPv6地址，即服务器证书签名请求。如果您在通用名称字段中使用的是主机名而不是IPv4或IPv6地址，您将需要使用相同的主机名。如果经纪人地址中指定的值与通用名称字段中指示的值不匹配，Mosquitto服务器将拒绝由MQTT-spy实用程序生成的客户端。
- en: Click on the Security tab and in the TLS tab below the User auth. tab.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击安全选项卡，在用户认证选项卡下方的TLS选项卡中。
- en: Select CA certificate in the TLS/SSL mode drop-down.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在TLS/SSL模式下拉菜单中选择CA证书。
- en: Select TLSv1.2 in the Protocol drop-down.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在协议下拉菜单中选择TLSv1.2。
- en: 'Enter or select the full path to the `ca.crt` file that you created in the
    `mqtt_certificates` folder and click Open connection. The following screenshot
    shows the dialog box with the selected options:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入或选择在`mqtt_certificates`文件夹中创建的`ca.crt`文件的完整路径，然后点击打开连接。以下屏幕截图显示了具有所选选项的对话框：
- en: '![](assets/d728a805-2bdb-4628-9282-39da7dab785e.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d728a805-2bdb-4628-9282-39da7dab785e.png)'
- en: MQTT-spy will close the dialog box and will display a new tab with a green background
    and the connection name that has appeared highlighted and selected at the left-hand
    side in the Connection list dialog. Make sure you click on the tab for the new
    connection.
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT-spy将关闭对话框，并显示一个具有绿色背景的新选项卡，连接名称已在连接列表对话框的左侧突出显示并被选中。确保点击新连接的选项卡。
- en: Enter `sensors/octocopter01/altitude` in the Topic drop-down.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主题下拉菜单中输入`sensors/octocopter01/altitude`。
- en: 'Enter the following text in the Data textbox: `178 f`. The following screenshot
    shows the tab for the new connection and the data entered in the different controls:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据文本框中输入以下文本：`178 f`。以下屏幕截图显示了新连接的选项卡以及在不同控件中输入的数据：
- en: '![](assets/6bef46e1-b6bf-40f3-8807-db4264417e38.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6bef46e1-b6bf-40f3-8807-db4264417e38.png)'
- en: Click the Publish button. MQTT-spy will publish the entered text to the specified
    topic and you will be able to see the message in both the MQTT.fx subscriber and
    the `mosquitto-sub` subscriber.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击发布按钮。MQTT-spy将向指定主题发布输入的文本，您将能够在MQTT.fx订阅者和`mosquitto-sub`订阅者中看到消息。
- en: Creating a certificate for each MQTT client
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为每个MQTT客户端创建证书
- en: Now, we want to require each MQTT client to provide a valid certificate to establish
    a connection with the MQTT server. This way, only clients that have a valid certificate
    will be able to publish or subscribe to topics. We will use the previously created
    private certificate authority to create client certificates for authentication.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们希望要求每个MQTT客户端提供有效的证书以建立与MQTT服务器的连接。这样，只有拥有有效证书的客户端才能发布或订阅主题。我们将使用先前创建的私有证书颁发机构来为认证创建客户端证书。
- en: We will generate a sample certificate for our local computer that will act as
    a client. We can follow the same procedure to generate additional certificates
    for additional devices that we want to connect to the Mosquitto server. We just
    need to use a different name for the file and use a different device name in the
    corresponding option.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的本地计算机生成一个样本证书，该证书将充当客户端。我们可以按照相同的步骤为我们想要连接到Mosquitto服务器的其他设备生成额外的证书。我们只需要为文件使用不同的名称，并在相应的选项中使用不同的设备名称。
- en: We must use the same certificate authority certificate that we used to generate
    the server certificate to generate the client certificates. As previously explained,
    for a production environment we shouldn't use self-signed certificates. This procedure is
    useful for development environments.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须使用与生成服务器证书相同的证书颁发机构证书来生成客户端证书。如前所述，对于生产环境，我们不应该使用自签名证书。这个过程对于开发环境是有用的。
- en: First, we must generate a new private key that will be different from the private
    keys we generated for our own private certificate authority and for the server
    certificate.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须生成一个新的私钥，该私钥将与我们为自己的私有证书颁发机构和服务器证书生成的私钥不同。
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to create a 2,048-bit key and save it in the `board001.key`
    file. To repeat this procedure for other devices, replace `board001` with any
    other name that identifies the device that will use the certificate. Do this in
    all the following commands that use `board001` for different filenames and values:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 转到macOS或Linux中的终端，或者Windows中的命令提示符。运行以下命令以创建一个2,048位的密钥，并将其保存在`board001.key`文件中。要为其他设备重复此过程，请将`board001`替换为标识将使用该证书的设备的任何其他名称。在所有使用`board001`的不同文件名和值的以下命令中都要这样做：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The following lines show sample output generated by the previous command:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了上一个命令生成的示例输出：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The previous command will generate the private key in the `board001.key` file.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令将在`board001.key`文件中生成私钥。
- en: 'Go back to the Terminal in macOS or Linux, or the Command Prompt in Windows.
    Run the following command to generate a certificate-signing request, also known
    as CSR. The next command uses the previously created 2,048-bit private key saved
    in the `board001.key` file and generates a `board001.csr` file:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到macOS或Linux中的终端，或者Windows中的命令提示符。运行以下命令以生成证书签名请求，也称为CSR。下一个命令使用先前创建的2,048位私钥，保存在`board001.key`文件中，并生成一个`board001.csr`文件：
- en: '[PRE25]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'After you enter the previous command, OpenSSL asks for information that will
    be incorporated in the certificate. You have to enter the information and press
    *Enter*. If you don''t want to enter specific information, just enter a dot (.)
    and press *Enter*. In this case, the most important value is Common Name. Enter
    the device name in this field:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入上一个命令后，OpenSSL会要求输入将被合并到证书中的信息。您必须输入信息并按*Enter*。如果您不想输入特定信息，只需输入一个点（.）并按*Enter*。在这种情况下，最重要的值是通用名称。在此字段中输入设备名称：
- en: '[PRE26]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Go to the Terminal in macOS or Linux, or the Command Prompt in Windows. Run
    the following command to sign the previously created certificate signing request,
    that is, the `board001.csr` file. The next command also uses the self-signed X.509
    digital certificate for the certificate authority and its private key that we
    generated before: the `ca.crt` and `ca.key` files. The command generates a `board001.crt`
    file with the signed X.509 digital certificate for the MQTT client. The command
    makes the signed certificate valid for 3,650 days, which is the value specified
    after the `-days` option. The `-addTrust clientAuth` option indicates that we
    want to use the certificate to authenticate a client:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 转到macOS或Linux中的终端，或者转到Windows中的命令提示符。运行以下命令以签署先前创建的证书签名请求，即`board001.csr`文件。下一个命令还使用我们之前生成的自签名X.509数字证书用于证书颁发机构和其私钥：`ca.crt`和`ca.key`文件。该命令生成一个带有MQTT客户端签名的X.509数字证书的`board001.crt`文件。该命令使签名证书在3,650天内有效，这是在`-days`选项之后指定的值。`-addTrust
    clientAuth`选项表示我们要使用证书来验证客户端：
- en: '[PRE27]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following lines show sample output generated by the previous command. The
    values shown after subject will be different in your configuration because you
    entered your own values when you generated the certificate signing request that
    was saved in the `board001.csr` file:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了先前命令生成的示例输出。在您的配置中，主题后显示的值将不同，因为在生成保存在`board001.csr`文件中的证书签名请求时，您输入了自己的值：
- en: '[PRE28]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the following command to display data and details for the generated server
    certificate file:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以显示生成的服务器证书文件的数据和详细信息：
- en: '[PRE29]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following lines show sample output that displays details about the signature
    algorithms, the issuer, the validity and the subject:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了显示有关签名算法、发行者、有效性和主题的详细信息的示例输出：
- en: '[PRE30]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'After running the previous commands, we will have the following three new files
    in the certificates directory:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述命令后，我们将在证书目录中有以下三个新文件：
- en: '`board001.key`: Client key'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`board001.key`: 客户端密钥'
- en: '`board001.csr`: Client certificate signing request'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`board001.csr`：客户端证书签名请求'
- en: '`board001.crt`: Client certificate file'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`board001.crt`：客户端证书文件'
- en: The client certificate file is in the PEM format, as are the certificate authority
    certificate file and the server certificate file.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端证书文件以PEM格式存储，证书颁发机构证书文件和服务器证书文件也是如此。
- en: 'We will have to provide the following three files to any device that we want
    to connect to the Mosquitto server:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将不得不向任何要连接到Mosquitto服务器的设备提供以下三个文件：
- en: '`ca.crt`'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ca.crt`'
- en: '`board001.crt`'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`board001.crt`'
- en: '`board001.key`'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`board001.key`'
- en: Never provide additional files to devices that have to establish a connection
    with the MQTT server. You don't want the devices to be able to generate additional
    certificates. You just want them to authenticate with a valid certificate.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 永远不要向必须与MQTT服务器建立连接的设备提供额外的文件。您不希望设备能够生成额外的证书。您只希望它们使用有效的证书进行身份验证。
- en: The `openssl` utility allows us to provide values for many parameters with additional
    command-line options. Hence, it is possible to automate many of the previous steps
    to make it easier to generate multiple device certificates.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`openssl`实用程序允许我们使用附加的命令行选项为许多参数提供值。因此，可以自动化许多先前的步骤，以便更容易生成多个设备证书。'
- en: Configuring TLS client certificate authentication in Mosquitto
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mosquitto中配置TLS客户端证书认证
- en: Now, we will configure Mosquitto to use TLS client certificate authentication.
    This way, any client will require the `ca.crt` file and a client certificate,
    such as the recently generated `board001.crt` file, to establish a communication
    with the Mosquitto server.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将配置Mosquitto以使用TLS客户端证书认证。这样，任何客户端都将需要`ca.crt`文件和客户端证书，例如最近生成的`board001.crt`文件，才能与Mosquitto服务器建立通信。
- en: If you are running the Mosquitto server in a Terminal window in macOS or Linux,
    press *Ctrl* + *C* to stop it. In Windows, stop the appropriate service.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在macOS或Linux的终端窗口中运行Mosquitto服务器，请按*Ctrl* + *C*停止它。在Windows中，请停止适当的服务。
- en: Go to the Mosquitto installation directory and open the `mosquitto.conf` configuration
    file.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Mosquitto安装目录并打开`mosquitto.conf`配置文件。
- en: 'In macOS, Linux, or Windows, add the following line at the end of the configuration
    file:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS、Linux或Windows中，在配置文件的末尾添加以下行：
- en: '[PRE31]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: We specified the `true` value for the `require_certificate` option to make Mosquitto
    require a valid client certificate for any client that requests a connection to
    Mosquitto.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`require_certificate`选项指定了`true`值，以使Mosquitto要求任何请求与Mosquitto建立连接的客户端都需要有效的客户端证书。
- en: Save the changes to the `mosquitto.conf` configuration file and launch Mosquitto
    again. We will use the `mosquitto_sub` command-line utility included in Mosquitto
    to generate a simple MQTT client that subscribes to a topic filter and prints
    all the messages it receives.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改到`mosquitto.conf`配置文件并重新启动Mosquitto。我们将使用Mosquitto中包含的`mosquitto_sub`命令行实用程序生成一个简单的MQTT客户端，该客户端订阅主题过滤器并打印其接收到的所有消息。
- en: Testing the MQTT TLS client authentication with command-line tools
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行工具测试MQTT TLS客户端认证
- en: Now, we will use the Mosquitto command-line tools to test the client authentication
    configuration.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用Mosquitto命令行工具来测试客户端认证配置。
- en: 'The following command specifies the certificate authority certificate file,
    the client certificate, and the client key. You have to replace `ca.crt`, `board001.crt`,
    and `board001.key` with the full path to these files created in the certificates
    directory. However, it is a better idea to copy these files to a new directory
    as if we were working with files that will be only available to the device that
    wants to establish a connection with Mosquitto. As with previous commands, this
    command uses the `-h` option followed by the MQTT server host. In this case, we
    specify the IPv4 address of the computer that is running the Mosquitto MQTT server:
    `192.168.1.1`. Notice that this value must match the IPv4 or IPv6 address that
    we specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name. The `mosquitto_sub` utility will create an
    MQTT subscriber that will establish an encrypted connection with Mosquitto and
    will provide the client certificate and client key to perform authentication:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令指定证书颁发机构证书文件、客户端证书和客户端密钥。您必须用证书目录中创建的这些文件的完整路径替换`ca.crt`，`board001.crt`和`board001.key`。但是，最好将这些文件复制到一个新目录，就好像我们正在处理的文件只能供希望与Mosquitto建立连接的设备使用。与以前的命令一样，此命令使用`-h`选项，后面跟着MQTT服务器主机。在这种情况下，我们指定运行Mosquitto
    MQTT服务器的计算机的IPv4地址：`192.168.1.1`。请注意，此值必须与我们在生成`server.csr`文件时指定为值的IPv4或IPv6地址相匹配，即服务器证书签名请求的`Common
    Name`字段。如果您在`Common Name`字段中使用主机名作为值，而不是IPv4或IPv6地址，您将不得不使用相同的主机名。`mosquitto_sub`实用程序将创建一个MQTT订阅者，将与Mosquitto建立加密连接，并提供客户端证书和客户端密钥以进行身份验证：
- en: '[PRE32]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'With a similar syntax, we will use the `mosquitto_pub` command-line utility
    included in Mosquitto to generate a simple MQTT client that publishes a message
    to a topic that will match the previously specified topic filter, with an encrypted
    connection and client authentication. Open a Terminal in macOS or Linux, or a
    Command Prompt in Windows, go to the directory in which Mosquitto is installed,
    and run the following command. Remember to replace `ca.crt`, `board001.crt`, and
    `board001.key` with the full path to these files created in the `mqtt_certificates`
    directory. In addition, replace 192.168.1.1 with the IPv4 or IPv6 address that
    we specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类似的语法，我们将使用Mosquitto中包含的`mosquitto_pub`命令行实用程序生成一个简单的MQTT客户端，该客户端将向与先前指定的主题过滤器匹配的主题发布消息，使用加密连接和客户端身份验证。在macOS或Linux中打开终端，或者在Windows中打开命令提示符，转到安装Mosquitto的目录，并运行以下命令。记得用`ca.crt`，`board001.crt`和`board001.key`替换`mqtt_certificates`目录中创建的这些文件的完整路径。此外，用我们在生成`server.csr`文件时指定为值的IPv4或IPv6地址替换192.168.1.1，即服务器证书签名请求的`Common
    Name`字段。如果您在`Common Name`字段中使用主机名作为值，而不是IPv4或IPv6地址，您将不得不使用相同的主机名：
- en: '[PRE33]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Sometimes, it is necessary to invalidate a client certificate. Mosquitto allows
    us to specify a PEM-encoded certificate revocation list file. We have to specify
    the path to this file as a value for the `crlfile` option in the Mosquitto configuration
    file.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，需要使客户端证书失效。Mosquitto允许我们指定一个PEM编码的证书吊销列表文件。我们必须在Mosquitto配置文件的`crlfile`选项的值中指定此文件的路径。
- en: Testing the MQTT TLS configuration with GUI tools
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用GUI工具测试MQTT TLS配置
- en: 'Now, we will use the MQTT.fx GUI utility to generate another MQTT client that
    uses an encrypted connection and TLS client authentication to publish messages
    to a topic that matches the topic filter we used for the subscription, `sensors/hexacopter25/altitude`.
    We have to make changes to the connection options we used when we enabled TLS.
    We have to specify the client certificate and client key files. Follow these steps:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT.fx GUI实用程序生成另一个MQTT客户端，该客户端使用加密连接和TLS客户端身份验证来发布消息到与我们用于订阅的主题过滤器匹配的主题`sensors/hexacopter25/altitude`。我们必须对启用TLS时使用的连接选项进行更改。我们必须指定客户端证书和客户端密钥文件。按照以下步骤操作：
- en: Launch MQTT.fx and click Disconnect if you were connected to the Mosquitto MQTT
    server.
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MQTT.fx，并在连接到Mosquitto MQTT服务器时单击断开连接。
- en: Select local mosquitto in the drop-down located in the upper-left corner and
    click on the configuration icon at the right-hand side of this drop-down and at
    the left-hand side of the Connect button. MQTT.fx will display the Edit Connection
    Profiles dialog box with different options for the connection profile named local
    mosquitto.
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左上角的下拉菜单中选择本地mosquitto，并单击该下拉菜单右侧和连接按钮左侧的配置图标。MQTT.fx将显示带有不同连接配置选项的编辑连接配置对话框，名称为本地mosquitto。
- en: Go to the Broker Address textbox and enter the IPv4 or IPv6 address that we
    specified as the value in the Common Name field when we generated the `server.csr`
    file, that is, the server certificate signing request. If you used a host name
    as the value in the Common Name field instead of an IPv4 or IPv6 address, you
    will have to use the same host name. If there is no match between the value specified
    in Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到Broker Address文本框，并输入我们在生成`server.csr`文件时指定为值的IPv4或IPv6地址，即服务器证书签名请求的`Common
    Name`字段。如果您在`Common Name`字段中使用主机名作为值，而不是IPv4或IPv6地址，您将不得不使用相同的主机名。如果Broker Address中指定的值与`Common
    Name`字段中指示的值不匹配，Mosquitto服务器将拒绝客户端。
- en: Click the SSL/TLS button.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击SSL/TLS按钮。
- en: Make sure the Enable SSL/TLS checkbox is activated.
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保启用SSL/TLS复选框已激活。
- en: Activate the Self signed certificates radio button.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活自签名证书单选按钮。
- en: Enter or select the full path to the `ca.crt` file that you created in the `mqtt_certificates`
    folder in the CA File textbox.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CA文件文本框中输入或选择您在`mqtt_certificates`文件夹中创建的`ca.crt`文件的完整路径。
- en: Enter or select the full path to the `board001.crt` file that you created in
    the `mqtt_ertificates` folder in the Client Certificate File textbox.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端证书文件文本框中输入或选择您在`mqtt_ertificates`文件夹中创建的`board001.crt`文件的完整路径。
- en: Enter or select the full path to the `board001.key` file that you created in
    the `mqtt_certificates` folder in the Client Key File textbox.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端密钥文件文本框中输入或选择您在`mqtt_certificates`文件夹中创建的`board001.key`文件的完整路径。
- en: 'Make sure the PEM Formatted checkbox is activated. The following screenshot
    shows a dialog box with the selected options and sample values for the different
    textboxes:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保激活PEM格式复选框。以下屏幕截图显示了具有所选选项和不同文本框的示例值的对话框：
- en: '![](assets/3093410b-c541-47f5-8e6d-0bc2abce3334.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3093410b-c541-47f5-8e6d-0bc2abce3334.png)'
- en: Click OK. Then, click on the Connect button. MQTT.fx will establish an encrypted
    connection with the local Mosquitto server by using the certificate and key files
    we have specified. Notice that the Connect button is disabled and the Disconnect
    button is enabled because the client is connected to the Mosquitto server.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击确定。然后，单击连接按钮。MQTT.fx将使用我们指定的证书和密钥文件与本地Mosquitto服务器建立加密连接。请注意，连接按钮被禁用，断开按钮被启用，因为客户端已连接到Mosquitto服务器。
- en: Click Subscribe and enter `sensors/+/altitude` in the drop-down at the left-hand
    side of the Subscribe button. Then, click the Subscribe button. MQTT.fx will display
    a new panel at the left-hand side with the topic filter to which we have subscribed.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击订阅并在订阅按钮左侧的下拉菜单中输入`sensors/+/altitude`。然后，单击订阅按钮。MQTT.fx将在左侧显示一个新面板，其中包含我们已订阅的主题过滤器。
- en: Click Publish and enter `sensors/hexacopter25/altitude` in the drop-down at
    the left-hand side of the Publish button.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击发布并在发布按钮左侧的下拉菜单中输入`sensors/hexacopter25/altitude`。
- en: 'Enter the following text in the textbox below the Publish button: `1153 f`.'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发布按钮下的文本框中输入以下文本：`1153 f`。
- en: Then, click the Publish button. MQTT.fx will publish the entered text to the
    specified topic.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，单击发布按钮。MQTT.fx将向指定的主题发布输入的文本。
- en: 'Click Subscribe and you will see the published message, as shown in the following
    screenshot:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击订阅，您将看到发布的消息，如下图所示：
- en: '![](assets/fcca001d-30a8-45c5-922b-61374483c7a3.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/fcca001d-30a8-45c5-922b-61374483c7a3.png)'
- en: 'Now, we will use the MQTT-spy GUI utility to generate another MQTT client that
    uses an encrypted connection to publish messages to another topic that will match
    the `sensors/+/altitude` topic filter: `sensors/quadcopter500/altitude`. Follow
    these steps:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将使用MQTT-spy GUI实用程序生成另一个MQTT客户端，该客户端使用加密连接发布消息到另一个与`sensors/+/altitude`主题过滤器匹配的主题：`sensors/quadcopter500/altitude`。按照以下步骤：
- en: Launch MQTT-spy.
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动MQTT-spy。
- en: Select Connections | New connection or Connections | Manage connections if you
    were already running MQTT-spy or saved the previous settings. The Connection list
    dialog box will appear.
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您已经在运行MQTT-spy或保存了以前的设置，请选择连接|新连接或连接|管理连接。连接列表对话框将出现。
- en: Click on the Connectivity tab and make sure MQTT 3.1.1 is selected in the Protocol
    version drop-down.
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击连接选项卡，确保在协议版本下拉菜单中选择了MQTT 3.1.1。
- en: Go to the Server URI(s) textbox and enter the IPv4 or IPv6 address that we specified
    as the value in the Common Name field when we generated the `server.csr` file,
    that is, the server certificate signing request. If you used a host name as the
    value in the Common Name field instead of an IPv4 or IPv6 address, you will have
    to use the same host name. If there is no match between the value specified in
    Broker Address and the value indicated in the Common Name field, the Mosquitto
    server will reject the client generated by the MQTT-spy utility.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到服务器URI(s)文本框，并输入我们在生成`server.csr`文件时指定为值的IPv4或IPv6地址，即通用名称字段。如果您在通用名称字段中使用主机名作为值，而不是IPv4或IPv6地址，则必须使用相同的主机名。如果在经纪人地址中指定的值与通用名称字段中指示的值不匹配，则Mosquitto服务器将拒绝MQTT-spy实用程序生成的客户端。
- en: Click on the Security tab and on the TLS tab below the User auth. tab.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击安全选项卡，然后单击用户auth.选项卡下方的TLS选项卡。
- en: Select CA certificate & client certificate/key in the TLS/SSL mode drop-down.
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在TLS/SSL模式下拉菜单中选择CA证书和客户端证书/密钥。
- en: Select TLSv1.2 in the Protocol drop-down.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在协议下拉菜单中选择TLSv1.2。
- en: Enter or select the full path to the `ca.crt` file that you created in the `mqtt_certificates`
    folder in the CA certificate file textbox.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在CA证书文件文本框中输入或选择您在`mqtt_certificates`文件夹中创建的`ca.crt`文件的完整路径。
- en: Enter or select the full path to the `board001.crt` file that you created in
    the `mqtt_ertificates` folder in the Client certificate file textbox.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端证书文件文本框中输入或选择您在`mqtt_ertificates`文件夹中创建的`board001.crt`文件的完整路径。
- en: Enter or select the full path to the `board001.key` file that you created in
    the `mqtt_certificates` folder in the Client key file textbox.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在客户端密钥文件文本框中输入或选择您在`mqtt_certificates`文件夹中创建的`board001.key`文件的完整路径。
- en: 'Activate the Client key in PEM format checkbox. Finally, click Open connection
    or Close and re-open existing connection. The following screenshot shows a dialog
    box with the selected options and sample values for the textboxes:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活PEM格式中的客户端密钥复选框。最后，单击打开连接或关闭并重新打开现有连接。以下屏幕截图显示了具有所选选项和文本框示例值的对话框：
- en: '![](assets/d1b1f37c-11cd-44e3-a5ee-168bbcfbb383.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/d1b1f37c-11cd-44e3-a5ee-168bbcfbb383.png)'
- en: MQTT-spy will close the dialog box and will display a new tab with a green background
    and the connection name that appeared highlighted and selected at the left-hand
    side in the Connection list dialog box. Make sure you click on the tab for the
    new connection.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT-spy将关闭对话框，并显示一个具有绿色背景和在连接列表对话框中出现的连接名称的新选项卡。确保单击新连接的选项卡。
- en: Enter `sensors/quadcopter500/altitude` in the Topic drop-down.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主题下拉菜单中输入`sensors/quadcopter500/altitude`。
- en: 'Enter the following text in the Data textbox: `1417 f`.'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“数据”文本框中输入以下文本：`1417 f`。
- en: Click the Publish button. MQTT-spy will publish the entered text to the specified
    topic and you will be able to see the message in both the MQTT.fx subscriber and
    the `mosquitto-sub` subscriber.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“发布”按钮。 MQTT-spy将输入的文本发布到指定的主题，您将能够在MQTT.fx订阅者和`mosquitto-sub`订阅者中看到消息。
- en: As happens with any security configuration, any checkbox that isn't activated
    based on the previous instructions won't allow the MQTT client to establish a
    connection with Mosquitto. It is very important to remember that the certificates
    use the PEM format.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 任何安全配置都会发生的情况，如果根据先前的说明未激活任何复选框，MQTT客户端将无法与Mosquitto建立连接。请记住证书使用PEM格式。
- en: Forcing the TLS protocol version to a specific number
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将TLS协议版本强制为特定数字
- en: It is good practice to use the highest possible TLS protocol version. By default,
    a Mosquitto server accepts TLS 1.0, 1.1, and 1.2\. If all the clients are capable
    of working with the highest TLS protocol version supported by Mosquitto, we should
    force Mosquitto to use only the highest version. This way, we make sure that we
    won't be vulnerable to attacks on previous TLS versions.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 使用最高可能的TLS协议版本是一个好习惯。默认情况下，Mosquitto服务器接受TLS 1.0、1.1和1.2。如果所有客户端都能够使用Mosquitto支持的最高TLS协议版本，我们应该强制Mosquitto仅使用最高版本。这样，我们可以确保不会受到先前TLS版本的攻击。
- en: Now, we will make the necessary changes in the configuration file to force the
    use of TLS 1.2\. If you are running the Mosquitto server in a Terminal window
    in macOS or Linux, press *Ctrl *+ *C* to stop it. In Windows, stop the appropriate
    service.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在配置文件中进行必要的更改以强制使用TLS 1.2。如果您在macOS或Linux的终端窗口中运行Mosquitto服务器，请按*Ctrl *+ *C*停止它。在Windows中，停止适当的服务。
- en: Go to the Mosquitto installation directory and open the `mosquitto.conf` configuration
    file.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 转到Mosquitto安装目录并打开`mosquitto.conf`配置文件。
- en: 'In macOS, Linux, or Windows, add the following line at the end of the configuration
    file:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS、Linux或Windows中，在配置文件的末尾添加以下行：
- en: '[PRE34]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: We specified the `tlsv1.2` value for the `tls_version` option to make Mosquitto
    work only with TLS 1.2\. Any client that uses a previous TLS version won't be
    able to establish a connection with the Mosquitto server.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为`tls_version`选项指定了`tlsv1.2`值，以便Mosquitto仅使用TLS 1.2。任何使用先前TLS版本的客户端将无法与Mosquitto服务器建立连接。
- en: Save the changes to the `mosquitto.conf` configuration file and launch Mosquitto
    again. We specified the TLS version when we configured the connection in both
    the MQTT.fx and MQTT-spy GUI utilities; specifically, we specified TLS 1.2 as
    the desired TLS version for the client, and therefore no additional changes are
    required. We must use the `--tls-version tlsv1.2` option in the `mosquitto_sub`
    and `mosquitto_pub` command-line utilities.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 保存更改到`mosquitto.conf`配置文件并重新启动Mosquitto。我们在MQTT.fx和MQTT-spy GUI实用程序中配置连接时指定了TLS版本；具体来说，我们为客户端指定了TLS
    1.2作为期望的TLS版本，因此不需要额外的更改。我们必须在`mosquitto_sub`和`mosquitto_pub`命令行实用程序中使用`--tls-version
    tlsv1.2`选项。
- en: 'Open a Terminal in macOS or Linux, or a Command Prompt in Windows, go to the
    directory in which Mosquitto is installed, and run the following command. Remember
    to use the full paths for the `ca.crt`, `device.001`, and `device.key` files.
    In addition, replace `192.168.1.1` with the IPv4 or IPv6 address that we specified
    as the value in the Common Name field when we generated the `server.csr` file,
    that is, the server certificate signing request. If you used a host name as the
    value in the Common Name field instead of an IPv4 or IPv6 address, you will have
    to use the same host name:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS或Linux中打开终端，或在Windows中打开命令提示符，转到Mosquitto安装的目录，并运行以下命令。记得使用`ca.crt`，`device.001`和`device.key`文件的完整路径。此外，将`192.168.1.1`替换为我们在生成`server.csr`文件时指定为“通用名称”字段值的IPv4或IPv6地址，即服务器证书签名请求。如果您在“通用名称”字段中使用主机名而不是IPv4或IPv6地址作为值，则必须使用相同的主机名：
- en: '[PRE35]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The previous command specified the use of TLS 1.2, and therefore the MQTT client
    can establish a connection with the Mosquitto server and publish the message.
    If we specify a different TLS version, the `mosquitto_pub` command won't be able
    to connect with the Mosquitto server.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 上一个命令指定了使用TLS 1.2，因此MQTT客户端可以与Mosquitto服务器建立连接并发布消息。如果我们指定不同的TLS版本，`mosquitto_pub`命令将无法连接到Mosquitto服务器。
- en: Test your knowledge
  id: totrans-253
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试您的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看您是否能正确回答以下问题：
- en: 'Which is the default port number for MQTT over TLS:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: MQTT上TLS的默认端口号是多少：
- en: '`1883`'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`1883`'
- en: '`5883`'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`5883`'
- en: '`8883`'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`8883`'
- en: 'Which of the following utilities allows us to generate an X.509 digital certificate:'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个实用程序允许我们生成X.509数字证书：
- en: OpenX509
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenX509
- en: TLS4Devs
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TLS4Devs
- en: OpenSSL
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: OpenSSL
- en: 'When we use MQTT over TLS:'
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们使用MQTT上的TLS时：
- en: There are both bandwidth and processing overheads compared to MQTT over TCP
    without TLS
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与没有TLS的MQTT上TCP相比，存在带宽和处理开销
- en: There is just a small bandwith overhead but no processing overhead at all compared
    to MQTT over TCP without TLS
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与没有TLS的MQTT上TCP相比，只有一点带宽开销，但没有处理开销
- en: There is no overhead compared to MQTT over TCP without TLS
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与没有TLS的MQTT上TCP相比，没有开销
- en: 'Which of the following can we use to secure and encrypt communications between
    the MQTT clients and the MQTT server:'
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪项可以用来保护和加密MQTT客户端和MQTT服务器之间的通信：
- en: TCPS
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TCPS
- en: TLS
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TLS
- en: HTTPS
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: HTTPS
- en: 'If we specify `true` as the value for the `require_certificate` option of the
    Mosquitto configuration file (`mosquitto.conf`):'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们在Mosquitto配置文件（`mosquitto.conf`）的`require_certificate`选项中指定`true`作为值：
- en: Clients that want to connect to the MQTT server will require a client certificate
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想要连接到MQTT服务器的客户端将需要一个客户端证书
- en: Clients that want to connect to the MQTT server won't require a client certificate
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想要连接到MQTT服务器的客户端不需要客户端证书
- en: Clients that want to connect to the MQTT server can provide an optional client
    certificate
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想要连接到MQTT服务器的客户端可以提供一个可选的客户端证书
- en: The rights answers are included in the [Appendix](d9cf708f-f027-4bfa-a2d2-9fd3653165d9.xhtml), *Solutions*.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 正确答案包括在[附录](d9cf708f-f027-4bfa-a2d2-9fd3653165d9.xhtml)中的*Solutions*中。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we generated a private certificate authority, a server certificate,
    and client certificates to enable TLS transport security and TLS client authentication
    with Mosquitto. Communications between MQTT clients and the MQTT server are encrypted.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们生成了一个私有证书颁发机构、一个服务器证书和客户端证书，以实现Mosquitto的TLS传输安全和TLS客户端认证。MQTT客户端和MQTT服务器之间的通信是加密的。
- en: We worked with OpenSSL to generate self-signed digital certificates for our
    development environment. We tested the MQTT TLS configuration with MQTT.fx, MQTT-spy,
    and Mosquitto command-line utilities. We forced Mosquitto to use only a specific
    TLS version.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 我们与OpenSSL合作为我们的开发环境生成自签名数字证书。我们使用MQTT.fx，MQTT-spy和Mosquitto命令行工具测试了MQTT TLS配置。我们强制Mosquitto仅使用特定的TLS版本。
- en: There are many other security topics related to MQTT servers and Mosquitto.
    We will work with some of them in forthcoming chapters, in which we will develop
    applications that will use MQTT with Python.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 与MQTT服务器和Mosquitto相关的许多其他安全主题。我们将在接下来的章节中处理其中一些，届时我们将开发将使用Python与MQTT的应用程序。
- en: Now that we understand how to encrypt communications between MQTT clients and
    the Mosquitto server, we will understand MQTT libraries and we will write Python
    code to control a vehicle with MQTT messages delivered through encrypted connections,
    which are the topics that we are going to discuss in [Chapter 4](87908cb8-83ed-4b74-bfc5-dd0c4ddd93aa.xhtml),
    *Writing Code to Control a Vehicle with Python and MQTT Messages*.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了如何加密MQTT客户端和Mosquitto服务器之间的通信，我们将了解MQTT库，并编写Python代码来通过加密连接传递MQTT消息来控制车辆，这是我们将在[第4章](87908cb8-83ed-4b74-bfc5-dd0c4ddd93aa.xhtml)中讨论的主题，*使用Python和MQTT消息编写控制车辆的代码*。
