- en: Collaborating and Communicating across Teams
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 跨团队合作和沟通
- en: As we discussed previously, the main characteristic of microservices is the
    ability to develop them in parallel. To ensure maximum efficiency, we need to
    coordinate our teams successfully to avoid clashes. In this chapter, we will talk
    about the different elements we need to understand to ensure that the different
    teams work together successfully.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前讨论的，微服务的主要特点是能够并行开发。为了确保最大效率，我们需要成功协调我们的团队，以避免冲突。在本章中，我们将讨论确保不同团队成功合作所需了解的不同元素。
- en: First, we will cover how to get a consistent vision across different microservices,
    how the different communication structures shape communication in the software
    elements, and how to ensure that we don't accumulate cruft in the software. Then,
    we will talk about how to ensure that teams coordinate themselves on releases
    and refine their processes and tools to make them more and more reliable.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将介绍如何在不同的微服务中获得一致的视野，不同的沟通结构如何塑造软件元素中的沟通，以及如何确保我们不会在软件中积累垃圾。然后，我们将讨论如何确保团队在发布和完善其流程和工具方面协调自己，使它们变得越来越可靠。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Keeping a consistent architectural vision
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保持一致的架构视野
- en: Dividing the workload and Conway's Law
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分工和康威定律
- en: Balancing new features and maintenance
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 平衡新功能和维护
- en: Designing a broader release process
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计更广泛的发布流程
- en: By the end of this chapter, we will know how to structure and coordinate different
    teams that work independently so that we can get the most out of them.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将知道如何构建和协调不同独立工作的团队，以便我们能够充分利用它们。
- en: Keeping a consistent architectural vision
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持一致的架构视野
- en: In a system structured on microservices, each team is able to perform most of
    the tasks on their own, independently from other teams. Designing the services
    so that they are as independent as possible and with minimal dependencies is key
    to achieving a good development speed.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于微服务的系统中，每个团队能够独立完成大部分任务，独立于其他团队。设计服务，使其尽可能独立并且具有最小的依赖性，对于实现良好的开发速度至关重要。
- en: Therefore, microservice separation allows teams to work independently and in
    parallel, while with monoliths, most of the people working on it keep track of
    what goes on, even to the point of being distracted with work out of the field
    of focus of a particular developer. They'll know when a new version is released
    and see new code being added to the same code base they are working on. However,
    that's not the case in the microservices architecture. Here, teams focus on their
    services and are not distracted by other features. This brings clarity and productivity.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，微服务的分离允许团队独立并行工作，而在单体系统中，大多数人都在关注发生的事情，甚至分散了特定开发人员关注领域之外的工作。他们会知道何时发布新版本，并看到新代码添加到他们正在工作的同一代码库中。然而，在微服务架构中并非如此。在这里，团队专注于他们的服务，不会被其他功能分散注意力。这带来了清晰和高效。
- en: However, a global vision of the system is still required. There's a need for
    a long-term view on how the architecture of the system should change over time
    so that it can be adapted. This vision (in monolithic systems) is implicit. Microservices
    need to have a better understanding of these changes so that they can work effectively,
    so a leading architect who can unify this global vision is very important.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仍然需要一个全局的系统视野。需要对系统的架构如何随时间变化而改变有一个长期的观点，以便能够适应。这种视野（在单片系统中）是隐含的。微服务需要更好地理解这些变化，以便能够有效地工作，因此一个能统一这种全局视野的领先架构师非常重要。
- en: The architect's role is a position in the software industry that isn't defined
    consistently.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 软件行业中的架构师角色并没有一致的定义。
- en: In this book, we will define it as a role that deals with the structure of APIs
    and services as a whole. Their main objective is to coordinate teams when it comes
    to technical issues, rather than dealing with code directly.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将其定义为处理API和服务整体结构的角色。他们的主要目标是在技术问题上协调团队，而不是直接处理代码。
- en: Explicitly naming someone who's responsible for the global architecture of the
    system helps us keep a long-term vision of how the system should evolve.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 明确指定一个负责系统全局架构的人有助于我们保持对系统如何发展的长期视野。
- en: In small companies, Chief Technical Officers may fulfill the architect's role,
    though they will also be busy handling elements that are related to managerial
    processes and costs.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在小公司中，首席技术官可能会担任架构师的角色，尽管他们还忙于处理与管理流程和成本相关的元素。
- en: The main responsibility of a leading architect is to ensure that the microservices
    division keeps making sense as it evolves and that the APIs that communicate between
    services are consistent. They should also try to facilitate the generation of
    standards across teams and share knowledge across the organization.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 领先架构师的主要责任是确保微服务划分在演变中仍然有意义，并且服务之间通信的API是一致的。他们还应该努力促进跨团队的标准生成，并在整个组织中分享知识。
- en: The architect should also be the final decision maker when it comes to any questions
    regarding what feature goes with what microservice, as well as any other conflicts
    that may arise that involve several teams. This role is of great help during the
    transition from a monolith to a microservice architecture, but after that process
    is completed, they can also ensure that the organization can adapt to new challenges
    and keep technical debt under control. A system working in a microservices architecture
    aims to create independent teams, but they all truly benefit from a shared global
    vision that's created by an external person.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 架构师在涉及哪个功能与哪个微服务相关的任何问题以及可能涉及多个团队的其他冲突时，也应该是最终的决策者。这个角色在从单体架构过渡到微服务架构时非常有帮助，但在这个过程完成后，他们也可以确保组织能够适应新的挑战，并控制技术债务。微服务架构系统旨在创建独立的团队，但他们都会从一个外部人员创造的共享全局愿景中受益。
- en: To allow for better coordination, how the teams are divided is highly important.
    Let's learn about some of the challenges that arise when we divide the development
    of a system into different teams.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地协调，团队如何分工是非常重要的。让我们了解一下当我们将系统开发分成不同团队时会出现的一些挑战。
- en: Dividing the workload and Conway's Law
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分工和康威定律
- en: Microservice architecture systems are adequate for big software systems, though
    companies tend to start with monolithic applications. This makes sense for any
    system that has small teams. As the system is explored and pivoted, it grows over
    time.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构系统适用于大型软件系统，尽管公司往往从单体应用程序开始。这对于任何有小团队的系统都是有意义的。随着系统的探索和转变，它会随着时间的推移而增长。
- en: But when monolith systems grow to a certain size, they become difficult to handle
    and develop. The internals become intertwined for historical reasons, and with
    increased complexity, the reliability of the system can become compromised. Finding
    the balance between flexibility and redundancy can be difficult.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 但当单体系统增长到一定规模时，它们变得难以处理和开发。由于历史原因，内部变得交织在一起，随着复杂性的增加，系统的可靠性可能会受到影响。在灵活性和冗余之间找到平衡可能很困难。
- en: Remember that microservices are useful when the development team is big. For
    small teams, a monolith is easier to develop and maintain. It's only when many
    developers work on the same system that dividing the work and accepting the overheads
    of a microservice architecture makes sense.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，当开发团队很大时，微服务是有用的。对于小团队来说，单体架构更容易开发和维护。只有当许多开发人员在同一个系统上工作时，分工和接受微服务架构的额外开销才是有意义的。
- en: Scaling the development team can become difficult as there will be too much
    old code there, and learning how to navigate through it is difficult and takes
    a lot of time. The developers (the ones who have been around for a long time)
    know what caveats can help, but they become bottlenecks. Increasing the size of
    the team doesn't help because making any change can become complicated. Therefore,
    every new developer needs a lot of training before they can get up to speed and
    be able to successfully work on bug fixes and new features.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展开发团队可能会变得困难，因为那里会有太多的旧代码，学习如何在其中导航是困难且需要很长时间。开发人员（那些在团队中待了很长时间的人）知道哪些注意事项可以帮助，但他们成为了瓶颈。增加团队的规模并不能帮助，因为任何改变都可能变得复杂。因此，每个新的开发人员在能够成功地进行错误修复和新功能开发之前都需要接受大量的培训。
- en: Teams also have a natural size limit. Growing beyond that limit can mean having
    to split them into smaller ones.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 团队也有一个自然的规模限制。超过这个限制可能意味着必须将其分成更小的团队。
- en: The size of a team is highly variable, but normally, the 7±2 components are
    considered as a rule of thumb for the ideal number of people who should be in
    a team.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的规模是非常灵活的，但通常来说，7±2个成员被认为是团队中理想人数的经验法则。
- en: Bigger groups tend to generate smaller groups on their own, but this means there
    will be too many to manage and some may not have a clear focus. It's difficult
    to know what the rest of the team is doing.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 更大的团体往往会自行生成更小的团体，但这意味着管理的任务会变得繁重，有些团队可能没有明确的焦点。很难知道其他团队在做什么。
- en: Smaller teams tend to create overhead in terms of management and inter-team
    communication. They'll develop faster with more members.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 较小的团队在管理和团队间沟通方面往往会产生额外的开销。他们会因为成员更多而开发更快。
- en: In a big monolith system, multiple independent teams will tend to mess around
    without a clear long-term view. This may be alleviated by designing a robust internal
    structure, but it will require huge up-front planning and strong policing to ensure
    it is being followed.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个大型单体系统中，多个独立团队往往会在没有明确的长期视野的情况下胡乱操作。通过设计一个健壮的内部结构可以缓解这种情况，但这需要巨大的前期规划和严格的监管来确保其得到遵守。
- en: The microservice architecture is a design that tackles these problems as it
    makes very strict boundaries between parts of the system. However, doing so requires
    the development team to be of a certain size so that they can work as several
    small teams working mostly independently. This is the main characteristic of a
    microservice architecture system. Each of the microservices that form it is an
    independent service that can be developed and released independently.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构是一种解决这些问题的设计，因为它在系统的各个部分之间建立了非常严格的边界。然而，这样做需要开发团队达到一定规模，以便他们可以像几个小团队一样独立工作。这是微服务架构系统的主要特点。构成它的每个微服务都是一个独立的服务，可以独立开发和发布。
- en: This way of working allows teams to work in parallel, without any interference.
    Their realm of action is clear, and any dependency is explicitly set. Due to this,
    the borders between the microservices are strong.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这种工作方式允许团队并行工作，没有任何干扰。他们的行动范围是明确的，任何依赖关系都是明确设定的。因此，微服务之间的边界是强大的。
- en: Just because a microservice is released independently doesn't imply that a single
    release is enough to release a full feature. As we've already seen, sometimes,
    a feature in a microservice requires that another microservice is worked on before
    it can be deployed. In this case, several microservices need to be worked on.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为一个微服务可以独立发布并不意味着单个发布就足以发布一个完整的功能。正如我们已经看到的，有时，一个微服务中的一个功能需要在部署之前对另一个微服务进行处理。在这种情况下，需要处理多个微服务。
- en: The most important idea to keep in mind when planning on how to divide teams
    is how the team's structure is reflected in software. This is described by Conway's
    Law.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在规划如何划分团队时，要牢记的最重要的想法是团队结构如何在软件中得到体现。这是由康威定律描述的。
- en: Describing Conway's Law
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述康威定律
- en: 'Conway''s Law is a software adage ([https://www.nagarro.com/en/blog/post/76/microservices-revisiting-conway-s-law](https://www.nagarro.com/en/blog/post/76/microservices-revisiting-conway-s-law)).
    In other words, in any organization that produces software, the software will
    replicate the communication structure of the organization. For example, in a very
    simplified way, an organization is divided in two departments: purchases and sales.
    This will generate two software blocks: one that''s focused on buying and another
    that''s focused on selling. They will communicate when required.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 康威定律是一个软件格言。换句话说，在任何生产软件的组织中，软件将复制组织的通信结构。例如，以一种非常简化的方式，一个组织被分为两个部门：采购和销售。这将产生两个软件模块：一个专注于购买，另一个专注于销售。它们将在需要时进行通信。
- en: In this section, we will talk about *software units*. This is a generic term
    that describes any software that's treated as a single cohesive element. It can
    be a module, a package, or a microservice.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将讨论*软件单元*。这是一个通用术语，用来描述任何被视为单一凝聚元素的软件。它可以是一个模块、一个包，或者一个微服务。
- en: In the microservice architecture, these software units are mainly microservices,
    but in some cases, there can be other types. We will see examples of this in the
    *Dividing the software into different kinds of software units* section.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务架构中，这些软件单元主要是微服务，但在某些情况下，也可能是其他类型。我们将在*将软件划分为不同类型的软件单元*部分看到这方面的例子。
- en: 'This may be unsurprising. It''s only natural that communication levels are
    different between teams, as well as within the same team. However, the implications
    of teamwork are enormous, some of which are as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能并不奇怪。不同团队之间的沟通水平以及同一个团队内部的沟通水平是不同的，这是很自然的。然而，团队合作的影响是巨大的，其中一些如下：
- en: Inter-team APIs are more expensive than intra-team APIs, both in terms of operating
    them as well as developing them since their communication is more complicated.
    It makes sense to make them generic and flexible so that they can be reused.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 团队间的API比团队内的API更昂贵，无论是在操作上还是在开发上，因为它们的通信更加复杂。将它们设计成通用和灵活的是有意义的，这样它们就可以被重复使用。
- en: If the communication structures replicate the human organization, it makes sense
    to be explicit. Inter-team APIs should be more visible, public, and documented
    than intra-team APIs.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果通信结构复制了人类组织，那么明确是有意义的。团队间的API应该比团队内的API更加可见、公开和有文档记录。
- en: When designing systems, dividing them across the lines of the layered team structure
    is the path of least resistance. Engineering them any other way would require
    organizational changes.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计系统时，将它们划分到分层团队结构的界线上是最不费力的路径。以其他方式对其进行工程设计将需要组织变革。
- en: On the other hand, changing the structure of an organization is a difficult
    and painful process. Anyone that has gone through a reorg knows this. The change
    will be reflected in the software, so plan accordingly.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一方面，改变组织结构是一个困难和痛苦的过程。任何经历过组织重组的人都知道这一点。这种变化将反映在软件中，因此要做好计划。
- en: Having two teams working on the same software unit will create problems because
    each one will try to pull it to their own goals.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 让两个团队共同处理同一个软件单元会产生问题，因为每个团队都会试图将其引向自己的目标。
- en: The owner of a software unit should be a single team. This shows everyone who's
    responsible for who has the final say on any change and helps us focus on our
    vision and reduce technical debt.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 软件单元的所有者应该是一个团队。这向每个人展示了谁对任何变化负责并有最终决定权，并帮助我们专注于我们的愿景并减少技术债务。
- en: Different physical locations impose communications restrictions, such as time
    differences, which will produce barriers when we're developing software across
    them. It is common to split teams by location, which creates the need to structure
    the communication (and therefore the APIs) between these teams.
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的物理位置会施加通信限制，比如时差，这将在我们跨地域开发软件时产生障碍。通常会根据地理位置划分团队，这就需要构建这些团队之间的通信（因此API）结构。
- en: Note that the DevOps movement is related to Conway's Law. The traditional way
    of dividing the work was to separate the software being developed from how it's
    run. This created a gap between both teams, as described by Conway's Law, which
    generates problems related to a lack of understanding between the two teams.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，DevOps运动与康威定律有关。传统的工作分工方式是将正在开发的软件与其运行方式分开。这在康威定律所描述的两个团队之间产生了鸿沟，从而产生了与两个团队之间缺乏理解相关的问题。
- en: The reaction to this problem was to create teams that could develop and operate
    their own software, as well as deploy it. This is called DevOps. It shifted the
    operational problems to the development team with the aim of creating a feedback
    loop to incentivize, understand, and fix them.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 对这个问题的反应是创建能够开发和运行自己软件的团队，并部署它。这就是所谓的DevOps。它将运营问题转移到开发团队，旨在创建一个反馈循环来激励、理解和解决问题。
- en: Conway's Law is not a bad thing to overcome. It's a reflection that any organizational
    structure has an impact on the structure of software.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 康威定律并不是一件需要克服的坏事。它反映了任何组织结构对软件结构的影响。
- en: Remembering this may help us design the system so that the communication flow
    makes sense for the organization and existing software.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 记住这一点可能有助于我们设计系统，使得组织和现有软件的通信流程合理。
- en: One of the key components of the DevOps movement was advancing the technology
    that built systems in order to simplify how production environments operated so
    that the deployment process was simpler. This allows us to structure teams in
    new ways, thereby leading to multiple teams being able to take control of releases.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: DevOps运动的一个关键组成部分是推进构建系统的技术，以简化生产环境的操作，使部署过程更简单。这使我们能够以新的方式组织团队，从而使多个团队能够控制发布。
- en: Now, let's talk about how the software can be structured into different divisions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们谈谈软件如何被结构化为不同的部门。
- en: Dividing the software into different kinds of software units
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将软件划分为不同类型的软件单元
- en: While the main objective of this book is to talk about the division of software
    in microservices, this isn't the only possible division. Other divisions can include
    modules inside a microservice or a shared package.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本书的主要目标是讨论微服务中软件的划分，但这并不是唯一可能的划分。其他划分可以包括微服务内的模块或共享包。
- en: The main characteristic of a microservice is that it is independent in terms
    of development and deployment, so full parallelization can be achieved. Other
    divisions may reduce this and introduce dependencies.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务的主要特点是在开发和部署方面是独立的，因此可以实现完全的并行化。其他划分可能会减少这一点并引入依赖关系。
- en: Ensure that you justify these changes.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你能够证明这些改变。
- en: In the example system that we introduced in this book, we introduced a module
    that verifies that a request is signed by a user. The Users Backend generates
    a signed header and the Thoughts Backend and Frontend verify it independently
    through the `token_validation.py` module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们在本书中介绍的示例系统中，我们引入了一个模块，用于验证请求是否由用户签名。用户后端生成一个签名头，思想后端和前端通过`token_validation.py`模块独立验证它。
- en: This module should be owned by the same team that owns the Users Backend since
    it's a natural extension of it. We need to verify that it generates the same tokens
    that the Users Backend generates.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个模块应该由拥有用户后端的同一个团队拥有，因为它是它的自然延伸。我们需要验证它是否生成与用户后端生成的相同的令牌。
- en: The best way to avoid duplication and to keep it always in sync is to generate
    a Python package that can be installed on the dependent microservices. Then, the
    packages can be treated like any other external dependency in the `requirements.txt`
    file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 避免重复并始终保持同步的最佳方法是生成一个Python软件包，可以安装在依赖的微服务上。然后，这些软件包可以像`requirements.txt`文件中的任何其他外部依赖一样对待。
- en: To package a library in Python, we can use several tools, including those in
    the official *Python Packaging User Guide* ([https://packaging.python.org/](https://packaging.python.org/))
    to newer tools such as Poetry ([https://poetry.eustace.io](https://poetry.eustace.io)),
    which are easier to use for a new project.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中打包一个库，我们可以使用几种工具，包括官方的*Python Packaging User Guide*（[https://packaging.python.org/](https://packaging.python.org/)）中的工具，以及较新的工具，如Poetry（[https://poetry.eustace.io](https://poetry.eustace.io)），这些工具对于新项目来说更容易使用。
- en: The package can be uploaded to PyPI if we want it to be publicly available.
    Alternatively, we can upload it to a private repository either using a tool such
    as Gemfury or by hosting our own repository if required. This makes an explicit
    division between the package and its maintainers, as well as the teams that are
    using it as a dependency.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望将软件包公开，可以将其上传到PyPI。或者，如果需要，我们可以将其上传到私有存储库，使用诸如Gemfury之类的工具，或者自己托管存储库。这将明确划分软件包及其维护者，以及使用它作为依赖项的团队之间的关系。
- en: Dividing the software units has implications in terms of team division. Now,
    let's take a look at how to structure teams.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 将软件单元划分成团队划分方面有着重要的影响。现在，让我们来看看如何组织团队。
- en: Designing working structures
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计工作结构
- en: Taking Conway's Law into account, dividing the software should reflect how the
    organization is structured. This is very relevant when we're migrating from a
    monolith to a microservice architecture.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到康威定律，划分软件应该反映组织的结构。当我们从单体架构迁移到微服务架构时，这一点非常重要。
- en: Remember, moving from a monolith to a microservice is a big change in terms
    of how we operate. It is as much an organizational change as it is a technology
    change. The main risks are in the human component, including challenges such as
    training people to use the new technologies and keeping the developers happy with
    the new area they'll be working in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，从单体架构迁移到微服务在我们操作方式上是一个重大的改变。这既是组织上的改变，也是技术上的改变。主要的风险在于人的因素，包括培训人员使用新技术以及让开发人员满意他们将要工作的新领域。
- en: Making a radical change to the organization's structure can be very difficult,
    but small tweaks will be required. When making a big change when migrating from
    a monolith to a microservice, the teams will need to be restructured.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 对组织结构进行根本性的改变可能非常困难，但将需要进行一些小的调整。当从单体架构迁移到微服务时，团队将需要重新调整。
- en: Keep in mind that a big reorg has the potential of getting people angry and
    causing political problems. Humans don't like change, and any decision needs to
    make sense. Expect to have to explain and clarify this move. Having clear objectives
    regarding what to achieve with the new structure will help give it purpose.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，大规模的重组可能会激怒人们并引发政治问题。人类不喜欢改变，任何决定都需要有意义。需要准备好解释和澄清这一举措。明确新结构的目标将有助于赋予其目的。
- en: Let's take a look at some examples of team divisions, as well as their pros
    and cons.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些团队划分的例子，以及它们的优缺点。
- en: Structuring teams around technologies
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 围绕技术构建团队
- en: In some cases, different skills related to technology may be relevant. Some
    parts of the system may deal with a technology that's totally different from anything
    else.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，与技术相关的不同技能可能是相关的。系统的某些部分可能涉及与其他任何东西完全不同的技术。
- en: A very good example is mobile applications since they are restrictive in terms
    of the languages they use (Java for Android and Objective-C or Swift for iOS).
    An application with a website and a mobile app may require a specific team to
    work on the mobile app's code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是移动应用程序，因为它们在使用的语言方面是受限制的（Android使用Java，iOS使用Objective-C或Swift）。一个具有网站和移动应用程序的应用可能需要一个专门的团队来处理移动应用程序的代码。
- en: A more traditional example is the database team, which was built around **Database
    Administrators** (**DBAs**). They would control access to databases and operate
    them to keep them in good shape. This structure is disappearing, though, since
    database operations are now easier and typically handled by most developers, and
    the infrastructure management for databases has been greatly simplified in recent
    years.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更传统的例子是围绕**数据库管理员**（**DBA**）构建的数据库团队。他们将控制对数据库的访问并操作它们以保持良好状态。然而，这种结构正在消失，因为数据库操作现在更容易，通常由大多数开发人员处理，并且近年来数据库的基础设施管理已大大简化。
- en: This may allow us to justify creating specific teams around certain areas. The
    technology's barriers ensure that the communication between systems is structured.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能使我们能够为特定领域创建特定团队。技术的障碍确保系统之间的通信是有结构的。
- en: 'The following diagram is an example of the kinds of teams we''ll come across.
    They''re grouped by technology and how they''ll communicate. The database team
    will communicate with the team that''s creating the web service backend, and they
    will communicate with the web and mobile teams:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下图是我们将遇到的团队类型的示例。它们按技术和沟通方式分组。数据库团队将与创建Web服务后端的团队进行通信，他们将与Web和移动团队进行通信：
- en: '![](img/f2a3000e-94ae-4c8a-8744-f1ba624daa79.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2a3000e-94ae-4c8a-8744-f1ba624daa79.png)'
- en: The main disadvantage of this model is that new features are likely to require
    multiple teams to work on them. Any change that's made to customer-facing code
    so that we can store a new value in the database requires work input from every
    team. These features require extra coordination, which can limit the speed of
    development.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这种模式的主要缺点是新功能可能需要多个团队共同努力。对客户端代码的任何更改，以便我们可以在数据库中存储新值，都需要每个团队的工作投入。这些功能需要额外的协调，这可能会限制开发速度。
- en: Structuring teams around domains
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 围绕领域构建团队
- en: Another structure is the one that surrounds different knowledge domains and
    is typically related to business areas in the company. Each knowledge domain has
    its own self-contained system, but they communicate with each other. Some parts
    may have an externally accessible interface, while others may not.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种结构是围绕不同的知识领域，通常与公司的业务领域相关。每个知识领域都有自己独立的系统，但它们彼此通信。一些部分可能具有外部可访问的接口，而其他部分可能没有。
- en: This kind of structure is typically found in established organizations that
    have different areas that they have been working successfully for years.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构通常在已经成功运作多年的成熟组织中找到。
- en: 'For example, an online retailer may be structured in three areas:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，一个在线零售商可能分为三个领域：
- en: '**Sales**: Handles the external website and marketing.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**销售**：负责外部网站和营销。'
- en: '**Inventory**: Purchases the merchandise so that it can be sold, and also handles
    stock.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**库存**：购买商品以便销售，并处理库存。'
- en: '**Shipping**: Delivers the product to the customers. The tracking information
    is displayed on the website.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**运输**：将产品送到客户手中。跟踪信息显示在网站上。'
- en: In this case, each area has its own database so that it can store the relevant
    data and its service. They communicate with each other with defined APIs, and
    the most frequent changes happen within a domain. This allows for quick releases
    and development within the domains.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，每个领域都有自己的数据库，以便存储相关数据和服务。它们通过定义的API相互通信，最频繁的变化发生在特定领域内。这允许在领域内快速发布和开发。
- en: Having new features across domains is also possible. For example, a change in
    the tracking information for shipping may require us to match the changes that
    are produced by sales. However, these changes should happen less often.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 跨领域拥有新功能也是可能的。例如，对运输跟踪信息的更改可能需要我们匹配销售产生的更改。然而，这些变化应该发生得更少。
- en: 'In this example, each of the teams will communicate with each other, as shown
    in the following diagram:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，每个团队将像下图所示相互通信：
- en: '![](img/fb8f03de-ec6a-4a07-a0d0-d80b85237018.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fb8f03de-ec6a-4a07-a0d0-d80b85237018.png)'
- en: The main inconvenience of this structure is the possibility of creating isolated
    teams and a silo mentality. Each system has its own way of doing things, so they
    can diverge to the point of not sharing the same basic language. When a cross-domain
    feature is required, it can lead to discussion and friction.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构的主要不便之处在于可能会创建孤立的团队和独立思维。每个系统都有自己的做事方式，因此它们可能会分歧到不共享相同的基本语言的程度。当需要跨领域功能时，可能会导致讨论和摩擦。
- en: Structuring teams around customers
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 围绕客户构建团队
- en: In some organizations, the main objective is to create custom work for customers.
    Maybe the customers need to integrate with the product in custom B2B ways. Being
    able to develop and run custom code is critical in this scenario.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些组织中，主要目标是为客户创建定制工作。也许客户需要以定制的B2B方式与产品集成。在这种情况下，能够开发和运行定制代码至关重要。
- en: The structure is focused on customers. Three teams (called red, gold, and blue)
    are assigned to customers and maintain a special service for each of them, including
    their custom code. Each customer team handles a couple of customers. Another team
    handles the product's backend, which contains the common code and infrastructure
    for the system. This team works separately from the customers but adds features
    from the customer teams when they are shared so that they're included in the product.
    General improvements are also shared.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 结构侧重于客户。三个团队（称为红色、金色和蓝色）分配给客户，并为每个客户维护特殊服务，包括他们的自定义代码。每个客户团队处理几个客户。另一个团队处理产品的后端，其中包含系统的通用代码和基础设施。这个团队与客户分开工作，但在共享时从客户团队添加功能，以便将其包含在产品中。一般的改进也是共享的。
- en: This creates two speeds in the organization. The customer teams are focused
    on the short-term demands of customers, while the product team is focused on the
    long-term demands of customers.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这在组织中形成了两种速度。客户团队专注于客户的短期需求，而产品团队专注于客户的长期需求。
- en: 'Here, the product team will talk to the customer teams, but the customer teams
    won''t talk to each other that much. This is shown in the following diagram:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，产品团队将与客户团队交谈，但客户团队之间的交流不会太多。这在下图中有所体现：
- en: '![](img/b45dc095-4b93-4176-8c33-1f04b767ad87.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b45dc095-4b93-4176-8c33-1f04b767ad87.png)'
- en: This structure works well for highly customized services so that they can contain
    the code that's been generated for a single customer that could make them lose
    focus on the general product. The main problem here is the high pressure that
    the customer teams may face as they are exposed to demanding customers, and that
    can be taxing for developers. The product team needs to ensure that they are making
    useful additions to the product and reducing their long-term problems as much
    as possible.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种结构对于高度定制的服务非常有效，以便它们可以包含为单个客户生成的代码，这可能会使它们失去对一般产品的关注。这里的主要问题是客户团队可能面临的高压力，因为他们面对苛刻的客户，这可能对开发人员造成负担。产品团队需要确保他们为产品做出有用的添加，并尽量减少他们的长期问题。
- en: Structuring teams around a mix
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 围绕混合结构团队
- en: The previous three examples are synthetic use cases. Real life is more complicated
    and may require a mix of all of them, or a new structure altogether.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的三个例子是合成用例。现实生活更加复杂，可能需要混合使用所有这些例子，或者完全新的结构。
- en: If the organization is big enough, there may be dozens of different teams and
    software units. Remember that a single team can handle more than one software
    unit if it is big enough. However, two teams shouldn't own the same software unit
    in order to avoid ownership and a lack of focus.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果组织足够大，可能会有数十个不同的团队和软件单元。请记住，如果团队足够大，一个团队可以处理多个软件单元。但是，为了避免所有权和缺乏重点，两个团队不应拥有相同的软件单元。
- en: Analyze the flow of communication in your organization in order to understand
    the pain points to address when you're moving to microservices and be sure that
    the human structure is taking designing the microservices and software units into
    account.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 分析组织中的沟通流程，以便了解在转向微服务时需要解决的痛点，并确保人员结构考虑了微服务和软件单元的设计。
- en: Another important element for teams is to find a proper balance between time
    that's spent on adding new features and time maintaining the existing code.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 团队的另一个重要元素是找到在添加新功能和维护现有代码之间花费的时间之间的适当平衡。
- en: Balancing new features and maintenance
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 平衡新功能和维护
- en: 'Every software service requires maintenance so that it stays in good shape,
    but don''t add evident external value. Maintenance tasks are critical for good
    operation, though, and can be divided into two categories: regular maintenance
    and managing technical debt.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 每个软件服务都需要维护，以保持良好状态，但不会增加明显的外部价值。维护任务对于良好的运行至关重要，可以分为两类：定期维护和管理技术债务。
- en: Technical debt is the one that will use most of the time and requires further
    discussion, but before that, let's take a look at regular maintenance.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务是将使用大部分时间并需要进一步讨论的部分，但在此之前，让我们先看看定期维护。
- en: Regular maintenance
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定期维护
- en: This kind of maintenance comes in the shape of tasks that are inherent to the
    nature of a software service. By running a service that depends on other components,
    such as underlying operative systems or the Python interpreter, we need to keep
    them up to date and upgrade them to new versions.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这种维护以与软件服务的性质固有的任务形式出现。通过运行依赖于其他组件的服务，例如底层操作系统或Python解释器，我们需要使它们保持最新并升级到新版本。
- en: In the context of using containers and Kubernetes, there are two systems that
    act as operating systems that we need to take into account. One is the OS from
    the containers; here, we used Alpine. The other is the OS that handles the Kubernetes
    nodes, in which AWS EKS is handled automatically, but needs to be upgraded to
    the Kubernetes version.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用容器和Kubernetes的情况下，有两个充当操作系统的系统需要考虑。一个是容器中的操作系统；在这里，我们使用了Alpine。另一个是处理Kubernetes节点的操作系统，在这里AWS
    EKS会自动处理，但需要升级到Kubernetes版本。
- en: 'The main reasons to keep the dependencies up to date are as follows, in their
    order of importance:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 保持依赖项最新的主要原因如下，按重要性排序：
- en: New versions fix security problems.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新版本修复安全问题。
- en: General performance improvements.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一般性能改进。
- en: New features can be added that enable new functionality.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以添加新功能以实现新功能。
- en: These kinds of tasks can be mitigated if we plan for them. For example, using
    a version of the operative system labeled **Long-Term Support** (**LTS**) can
    reduce problems when it comes to updating the system.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们计划进行这些任务，这些任务可以得到缓解。例如，使用标记为**长期支持**（**LTS**）的操作系统版本可以减少在更新系统时出现的问题。
- en: An LTS version of an OS is a version that receives support and critical updates
    during a long cycle. For example, a regular Ubuntu version is released every 6
    months and receives updates (including critical security updates) for 9 months.
    LTS versions are released every 2 years and receive support for 5 years.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统的LTS版本是在长周期内接收支持和关键更新的版本。例如，常规的Ubuntu版本每6个月发布一次，并在9个月内接收更新（包括关键安全更新）。LTS版本每2年发布一次，并获得5年的支持。
- en: When running services, it is recommended to use LTS versions in order to minimize
    required maintenance work.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 运行服务时，建议使用LTS版本，以最小化所需的维护工作。
- en: All of these packages and dependencies need to be updated to ensure that the
    OS works well. The alternative is to have open security holes or be left with
    an outdated system.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些软件包和依赖关系都需要更新，以确保操作系统正常工作。另一种选择是存在安全漏洞或者使用过时的系统。
- en: Updating dependencies could require us to adapt the code, depending on whether
    parts of it become deprecated or are removed. This can be costly in some cases.
    At the time of writing, the most famous migration has been the upgrade from Python
    2 to Python 3 by the Python community, a task that is taking multiple years.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 更新依赖关系可能需要我们调整代码，这取决于它的部分是否已被弃用或移除。在某些情况下，这可能是昂贵的。在撰写本文时，Python社区最著名的迁移是从Python
    2升级到Python 3，这是一个需要多年时间的任务。
- en: Most of the upgrades are normally pretty routine and require minimal work, though.
    Try to generate an upgrade plan that keeps pace in a sensible manner and produces
    solid guidelines; for example, rules such as *when a new operative system LTS
    version is released *and *all systems should be migrated in the following 3 months*.
    This produces predictability and gives everyone a clear objective that can be
    followed up and enforced.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数升级通常相当常规，需要很少的工作。尝试生成一个跟得上的升级计划，并制定明确的指导方针；例如，规则如*当新的操作系统LTS版本发布时*和*所有系统应在接下来的3个月内迁移*。这样可以产生可预测性，并给每个人一个明确的目标，可以跟进和执行。
- en: Continuous integration tools can help in this process. For example, GitHub automatically
    detects dependencies in files such as `requirements.txt` and notifies us when
    a vulnerability is detected. It's even possible to automatically generate pull
    requests when updating modules. Check out the documentation for more information: [https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-fixes](https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-fixes).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成工具可以帮助这个过程。例如，GitHub自动检测文件中的依赖关系，如`requirements.txt`，并在检测到漏洞时通知我们。甚至可以在更新模块时自动生成拉取请求。查看更多信息的文档：[https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-fixes](https://help.github.com/en/github/managing-security-vulnerabilities/configuring-automated-security-fixes)。
- en: 'Upgrading dependencies is probably the most common regular maintenance task,
    but there are other possibilities:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 升级依赖关系可能是最常见的定期维护任务，但还有其他可能性：
- en: To clean up or archive old data. These operations can normally be automated,
    saving a lot of time and reducing problems.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 清理或归档旧数据。这些操作通常可以自动化，节省大量时间并减少问题。
- en: To fix operations that are dependent on business processes, such as generating
    monthly reports, and so on. These should be automated when possible, or tools
    should be designed so that users can produce them automatically instead of relying
    on technical staff doing bespoke operations.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复依赖于业务流程的操作，比如生成月度报告等等。这些应该在可能的情况下自动化，或者设计工具，使用户可以自动产生它们，而不是依赖技术人员进行定制操作。
- en: To fix permanent problems that are produced by bugs or other errors. Bugs sometimes
    leave the system in a bad state; for example, there may be a corrupted entry in
    the database. While the bug is being fixed, we may need to resolve the situation
    by unblocking a process or a user.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修复由错误或其他错误产生的永久问题。错误有时会使系统处于糟糕的状态；例如，数据库中可能有损坏的条目。在修复错误时，我们可能需要通过解除进程或用户来解决这种情况。
- en: These processes can be annoying, especially if they are repetitive, but are
    normally well understood.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这些过程可能很烦人，特别是如果它们是重复的，但通常是被理解的。
- en: The other form of maintenance, which deals with technical debt, is more complicated,
    as it is introduced more gradually and is more difficult to detect clearly. Properly
    addressing technical debt is the most challenging maintenance task, but before
    we can do anything, we need to understand it.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种维护形式，涉及技术债务，更加复杂，因为它更逐渐地引入，并且更难以清晰地检测到。妥善解决技术债务是最具挑战性的维护任务，但在我们做任何事情之前，我们需要理解它。
- en: Understanding technical debt
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解技术债务
- en: Technical debt is a concept that's used in software development to describe
    additional costs that will be added in the future when a non-optimal solution
    is implemented. In other words, choosing the quick or easy choice means later
    features take longer and are more difficult to develop.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务是软件开发中使用的一个概念，用来描述当实施非最佳解决方案时将在未来增加的额外成本。换句话说，选择快速或简单的选择意味着以后的功能需要更长时间和更难开发。
- en: As a metaphor, technical debt has been around since the early 90s, but the concept
    has been described before then.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个隐喻，技术债务自上世纪90年代初就存在，但在此之前就已经描述了这个概念。
- en: Like any metaphor, it is useful, but it has limits. In particular, non-technical
    people tend to associate it with financial debt, even though they have different
    implications. For example, most technical debt is created without us even noticing
    it. Make sure that you don't take the metaphor too far.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 像任何隐喻一样，它是有用的，但也有局限性。特别是，非技术人员倾向于将其与财务债务联系起来，尽管它们有不同的含义。例如，大多数技术债务是在我们甚至没有注意到的情况下创建的。确保不要过分使用这个隐喻。
- en: Technical debt is unavoidable to a certain degree. There's no infinite time
    to research all the possibilities before implementing a feature and there's no
    perfect information at the time of making any decision. It is also a consequence
    of entropy growth in any complex system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务在一定程度上是不可避免的。在实施功能之前，没有无限的时间来研究所有可能性，也没有完美的信息。这也是任何复杂系统中熵增长的结果。
- en: Apart from being unavoidable, it can also be a deliberate choice. Development
    is constrained by time, so an imperfect quick solution to market may be preferable
    to missing a deadline.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 除了是不可避免的，技术债务也可以是一个有意识的选择。由于时间的限制，开发受到限制，因此对市场的不完美快速解决方案可能比错过截止日期更可取。
- en: Another sign of technical debt is concentrating on certain knowledge. In any
    case, technical debt keeps piling up over time, and this creates friction for
    new features. Complexity increases can also create reliability problems as bugs
    will be more and more difficult to understand and fix.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务的另一个迹象是专注于某些知识。无论如何，技术债务会随着时间的推移不断积累，并给新功能带来摩擦。复杂性的增加也可能会导致可靠性问题，因为错误会变得越来越难以理解和修复。
- en: Simplicity is the best friend of reliable systems. Simple code is easy to understand
    and correct and makes bugs either obvious or quick to detect. The microservice
    architecture aims to reduce the inherent complexity of a monolith by creating
    independent services that are smaller and have clear responsibilities assigned
    to them and that create explicit interfaces across them.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 简单是可靠系统的最好朋友。简单的代码易于理解和纠正，使错误要么显而易见，要么很容易检测到。微服务架构旨在通过创建独立的、更小的服务，并为它们分配明确的责任，并在它们之间创建明确的接口，来减少单体架构的固有复杂性。
- en: Technical debt can grow to a point where a big architecture is required. We've
    seen how moving from a monolith into a microservices architecture could be one
    of these moments.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 技术债务可能会增长到需要一个大型架构的程度。我们已经看到，从单体架构转移到微服务架构可能是其中一个时刻。
- en: An architectural migration such as this is a big effort and will require time
    to deliver. New microservices that are reproducing the features that already exist
    in the monolith may conflict with new features being introduced.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的架构迁移是一项艰巨的工作，需要时间来完成。在单体架构中已经存在的功能，新微服务可能会与引入的新功能发生冲突。
- en: This creates a moving target effect that can be very disruptive. Ensure that
    you identify these conflicting points and try to minimize them in your migration
    plan. Some new features may be able to be delayed until the new microservice is
    ready, for example.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这会产生一个移动目标效应，可能会带来很大的破坏性。确保你识别出这些冲突点，并尽量在迁移计划中将其最小化。例如，一些新功能可能可以推迟到新的微服务准备就绪的时候。
- en: However, instead of waiting until the technical debt is so big that only radical
    changes are good enough to address it, we need to be able to tackle technical
    debt earlier.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们不应该等到技术债务变得如此庞大，以至于只有激进的改变才足以解决它，我们需要能够更早地解决技术债务。
- en: Continuously addressing technical debt
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续解决技术债务
- en: Decreasing technical debt needs to be a continuous process and one that's introduced
    into the day-to-day operation of things. Agile techniques, which focus on continuous
    improvement, try to introduce this kind of mentality.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 减少技术债务需要是一个持续的过程，并且需要引入到日常运营中。专注于持续改进的敏捷技术试图引入这种思维方式。
- en: Detecting technical debt will typically come from within the development team
    since they are the ones closer to the code. Teams should be thinking about where
    operations could be smoother and have reserved time to perform those improvements.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 检测技术债务通常来自开发团队内部，因为他们更接近代码。团队应该考虑哪些地方的操作可以更顺畅，并留出时间进行改进。
- en: A great source of information that allows us to detect technical debt is metrics,
    such as the ones we set up in [Chapter 10](ca9b0606-730a-4006-a575-de8e897a19ba.xhtml),
    *Monitoring Logs and Metrics*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 允许我们检测技术债务的一个很好的信息来源是指标，比如我们在[第10章](ca9b0606-730a-4006-a575-de8e897a19ba.xhtml)中设置的监控日志和指标。
- en: The risk of neglecting to fix these issues is to fall into software rot when
    already existing features are slowly getting slower and less reliable. Over time,
    they'll be more and more obvious to customers and external partners. Way before
    that, working in this kind of environment will make a developer's life difficult,
    and there's a risk of burnout. Delays in new developments will also be common
    as code will be inherently difficult to work with.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 忽视解决这些问题的风险是陷入软件腐烂，已经存在的功能变得越来越慢和不太可靠。随着时间的推移，它们将对客户和外部合作伙伴变得越来越明显。在那之前，工作在这种环境中将使开发人员的生活变得困难，并存在燃尽的风险。新开发的延迟也会很常见，因为代码本身就很难处理。
- en: To avoid getting into this situation, time needs to be allocated to reduce technical
    debt in a continuous fashion, intercalated with new features and other work. A
    balance should be found between maintenance and technical debt reduction and new
    features.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免陷入这种情况，需要不断地分配时间来持续减少技术债务，交替进行新功能和其他工作。应该在维护和技术债务减少以及新功能之间找到平衡。
- en: A lot of the techniques we've talked about in this book help us improve the
    system in a continuous fashion, from the continuous integration techniques we
    described in [Chapter 4](872309f3-42ba-493c-8595-af1e610af61a.xhtml), *Creating
    a Pipeline and Workflow*, to the code reviews and approvals that we described
    in [Chapter 8](9a5c53a2-9131-4233-9e4f-992af51d8321.xhtml), *Using GitOps Principles*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书中讨论的许多技术手段都有助于我们以持续的方式改进系统，从我们在[第4章](872309f3-42ba-493c-8595-af1e610af61a.xhtml)中描述的持续集成技术，到我们在[第8章](9a5c53a2-9131-4233-9e4f-992af51d8321.xhtml)中描述的代码审查和批准，再到我们在[第10章](ca9b0606-730a-4006-a575-de8e897a19ba.xhtml)中设置的监控日志和指标。
- en: Distribution may be highly dependent on the current shape of the system, but
    it really helps that it is explicit and enforced. Something such as a specific
    time percentage to be spent on technical debt reduction could be helpful.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 分布可能高度依赖于系统的当前形状，但明确并强制执行这一点确实有帮助。例如，花费在技术债务减少上的特定时间百分比可能会有所帮助。
- en: Reducing technical debt is costly and difficult, so introducing as little as
    possible makes sense.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 减少技术债务是昂贵且困难的，因此尽量减少引入技术债务是有意义的。
- en: Avoiding technical debt
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 避免技术债务
- en: The best way to deal with technical debt is to not introduce it in the first
    place. However, this is easier said than done. There are multiple elements that
    can affect the quality of the decisions that lead to technical debt.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 处理技术债务的最佳方法是首先不引入技术债务。然而，这说起来容易做起来难。有多个因素可能影响导致技术债务的决策的质量。
- en: 'The most common causes are as follows:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的原因如下：
- en: '**Lack of a strategic, high-level plan to give direction**: This produces inconsistent
    results because each time the same problem is found, it will be resolved in a
    different way. We talked about how coordination across teams needs to address
    standards across the organization and ensure they are followed. Having someone
    acting as a software architect, looking for creating consistent guidelines across
    the board, should greatly improve this case.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缺乏战略性的高层计划来指导**：这会产生不一致的结果，因为每次发现相同的问题时，都会以不同的方式解决。我们谈到了跨团队协调需要解决组织内的标准，并确保它们得到遵守。有人担任软件架构师，寻求在整个组织中创建一致的指导方针，应该会极大地改善这种情况。'
- en: '**Not having the proper knowledge to choose the right option**: This is quite
    common. Sometimes, the people that need to make a decision don''t have all the
    relevant pieces of information due to miscommunication or simply lack of experience.
    This problem is typical of structures that lack experience in the problems at
    hand. Ensuring that you have a highly trained team and are creating a culture
    where more experienced members help and mentor junior members will reduce these
    cases. Documentation that keeps track of previous decisions and simplifies how
    to use other microservices will help us coordinate teams so that they have all
    the relevant parts of the puzzle. This helps them avoid making mistakes due to
    incorrect assumptions. Another important element is to ensure that teams have
    proper training in the tools they''re using so that they are fully aware of their
    capacities. This should be the case for external tools, such as being skilled
    in Python or SQL, and in any internal tool that requires training materials, documentation,
    and appointed points of contact.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有足够的知识来选择正确的选项**：这是相当常见的。有时，需要做决定的人由于沟通不畅或简单缺乏经验而没有所有相关信息。这个问题是缺乏处理当前问题经验的结构的典型问题。确保团队经过高度培训，并且正在创造一个更有经验的成员帮助和指导初级成员的文化，将减少这些情况。跟踪以前的决定并简化如何使用其他微服务的文档将帮助我们协调团队，使他们拥有所有相关的拼图部分。这有助于他们避免由于错误的假设而犯错。另一个重要因素是确保团队对他们使用的工具进行适当的培训，以便他们充分了解自己的能力。这对于外部工具来说应该是这样，比如熟练掌握Python或SQL，以及任何需要培训材料、文档和指定联系点的内部工具。'
- en: '**Not spending enough time investigating different options or planning**: This
    problem is created by pressure and by the need to make quick progress. This can
    be ingrained in the organization culture, and slowing down decision-making could
    be a challenging task when the organization grows since smaller organizations
    tend to require a faster process. Documenting the decision process and requiring
    it to be peer-reviewed or approved can help slow this down and ensure that work
    is thorough. It''s important to find a balance in terms of what decisions require
    more scrutiny and which ones don''t. For example, everything that fits neatly
    inside a microservice can be reviewed inside the team, but features that require
    multiple microservices and teams should be reviewed and approved externally. In
    this scenario, finding the proper balance between gathering information and making
    a decision is important. Document the decisions and the inputs so that you understand
    the process that got them there and refine your process.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**没有花足够的时间调查不同的选项或进行规划**：这个问题是由压力和迫切需要取得快速进展所造成的。这可能已经根深蒂固在组织文化中，当组织增长时，减缓决策过程可能是一项具有挑战性的任务，因为较小的组织往往需要更快的流程。记录决策过程并要求同行审查或批准可以帮助减缓这一过程，并确保工作是彻底的。在决定哪些决策需要更多审查和哪些不需要方面找到平衡是很重要的。例如，所有适合在一个微服务内的东西可以在团队内部进行审查，但需要多个微服务和团队的功能应该在外部进行审查和批准。在这种情况下，找到收集信息和做决定之间的适当平衡是重要的。记录决策和输入，以便了解得出这些决策的过程并完善你的流程。'
- en: The best way to avoid these problems is to reflect on previous errors and learn
    from mistakes.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 避免这些问题的最佳方法是反思以前的错误并从中吸取教训。
- en: Designing a broader release process
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计更广泛的发布流程
- en: While the ability to deploy each microservice independently is really a key
    element of the system, this doesn't mean that no coordination should be required.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然能够独立部署每个微服务确实是系统的关键要素，但这并不意味着不需要协调。
- en: First, there are still some features that need to be deployed in multiple microservices.
    We've already looked at how we can work on the development process, including
    details such as handle versioning and checking dependencies explicitly. So what
    now?
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，仍然有一些功能需要在多个微服务中部署。我们已经看过如何可以在开发过程中处理这些细节，包括处理版本和明确检查依赖关系。那么现在呢？
- en: In these situations, coordination between teams is required to ensure that the
    dependencies are implemented and that the different deployments are executed in
    an adequate order.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些情况下，需要团队之间的协调，以确保依赖关系得到实施，并且不同的部署按适当的顺序执行。
- en: While some coordination can be helped by the leading architect, the architecture
    role should be focused on long-term goals and not short-term releases. A good
    tool to allow self-coordination by teams is to inform the other teams in a meeting
    about releases.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然一些协调可以由主要架构师来协助，但架构角色应该专注于长期目标，而不是短期发布。允许团队自行协调的好工具是在会议上通知其他团队有关发布的情况。
- en: Planning in the weekly release meeting
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在每周发布会议中的规划
- en: When the release process is new and migrating from the monolith is still underway,
    it is a good idea to provide insight into every team is doing. A weekly release
    meeting that is attended by representatives of every team can be an excellent
    way of distributing knowledge regarding what is going on in other teams.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当发布流程是新的，并且从单体系统迁移仍在进行时，向每个团队提供他们正在做什么的见解是一个好主意。每周的发布会应该由每个团队的代表参加，这样可以很好地传播关于其他团队正在进行的工作的知识。
- en: 'The objectives for the release meeting should be as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 发布会的目标应该是：
- en: Planned releases for the next 7 days and rough times for when; for example,we
    plan to release a new version of the Users Backend on Wednesday.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个7天的计划发布和大致时间；例如，我们计划在周三发布新版本的用户后端。
- en: You should provide a heads-up for any important new feature, especially if other
    teams can use it. For example, if the new version improves authentication, make
    sure that you redirect your teams to the new API so that they can get these improvements
    as well.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于任何重要的新功能，尤其是其他团队可以使用的功能，你应该提前通知。例如，如果新版本改进了身份验证，请确保将你的团队重定向到新的API，以便他们也可以获得这些改进。
- en: State any blockers. For example, we can't release this version until the Thoughts
    Backend releases their version with feature A.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 说明任何阻碍因素。例如，我们无法发布这个版本，直到Thoughts后端发布带有功能A的版本。
- en: Raise any flags if there's critical maintenance or any changes that could affect
    the releases. For example, on Thursday morning, we need to do database maintenance,
    so please don't release anything until 12 o'clock. We will send an email when
    the work is done.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有关键维护或可能影响发布的任何更改，请提出警告。例如，周四早上，我们需要进行数据库维护，所以请不要在12点之前发布任何东西。工作完成后，我们会发送电子邮件通知。
- en: Review the release problems that happened the week prior. We'll talk about this
    in more detail later.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 回顾上周发生的发布问题。我们稍后会更详细地讨论这个问题。
- en: This is similar to the usual standup meetings that are present in many agile
    practices, such as SCRUM, but focused on releases. To be able to do this, we need
    to specify when the release is happening in advance.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这类似于许多敏捷实践中常见的站立会议，比如SCRUM，但专注于发布。为了能够做到这一点，我们需要提前指定发布时间。
- en: Given the asynchronous nature of microservices releases, and as continuous integration
    practices are implemented and speed up this process, there will be a lot of routine
    releases that won't be planned with that much time in advance. This is fine and
    means that the release process is being refined.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到微服务发布的异步性质，以及持续集成实践的实施和加速这一过程，将会有很多例行发布不会提前计划那么长时间。这是可以接受的，也意味着发布流程正在得到完善。
- en: Try to plan a bit in advance when it comes to riskier releases and use the release
    meeting to communicate with the rest of the teams effectively. The meeting is
    a tool that keeps the conversation open.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在涉及风险较高的发布时，尽量提前计划，并利用发布会有效地与其他团队沟通。这个会议是保持对话开放的工具。
- en: Over time, as continuous integration practices become more and more established
    and the releases become quicker and quicker, the weekly release meeting will slowly
    become less and less important, to the point that it may not need to be done anymore –
    at least not as regularly. This is part of reflecting on practices for continuous
    improvement, which is also achieved by identifying release problems.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 随着持续集成实践的不断确立和发布速度的不断加快，每周的发布会将逐渐变得越来越不重要，甚至可能不再需要定期举行。这是对持续改进实践的反思的一部分，也是通过识别发布问题来实现的。
- en: Reflecting on release problems
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反思发布问题
- en: Not every release will go perfectly fine. Some will fail due to problems in
    the tools or infrastructure, or maybe because there's a mistake in the process
    that's easy to make. The fact is that some releases will have issues. Unfortunately,
    it's not possible to avoid these situations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 并不是每次发布都会顺利进行。有些可能会因为工具或基础设施的问题而失败，或者可能是因为流程中存在易犯的错误。事实上，有些发布会出现问题。不幸的是，无法避免这些情况。
- en: To reduce and minimize release issues over time, each time a problem is found,
    it needs to be documented and brought up in the weekly release meeting or in an
    equivalent forum.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，减少和最小化发布问题，每次发现问题时，都需要将其记录并在每周的发布会或等价的论坛上提出。
- en: Some problems will be minor and require only a bit of extra work for the release
    to be successful; for example, a misconfiguration that avoids the new release
    from being started until it's fixed or a coordination problem where one service
    is deployed before its dependency.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 一些问题可能很小，只需要额外的一点工作，就可以成功发布；例如，一个错误的配置会导致新版本无法启动，直到修复，或者一个协调问题，导致一个服务在其依赖之前部署。
- en: Other problems will be greater, maybe even causing an outage due to a problem.
    Here, rollbacks will be useful so that we can quickly go back to a known state
    and plan again.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 其他问题可能更大，甚至可能导致故障。在这种情况下，回滚将非常有用，这样我们就可以快速返回到已知状态并重新规划。
- en: In any case, they should be properly documented, even if this is just briefly,
    and then shared so that the process can be refined. Analyzing what went wrong
    is key to keep improving your releases so that they're faster and less complicated.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，它们都应该被适当地记录，即使只是简要地记录，然后共享，以便流程得以完善。分析出了什么问题是关键，以便不断改进发布，使其更快速、更简单。
- en: Be open about these problems. Creating a culture where problems are openly debated
    and acknowledged is important if you wish to detect every single problem and quickly
    assess solutions.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些问题要坦诚。如果希望检测到每一个问题并快速评估解决方案，那么创建一个公开讨论和承认问题的文化是很重要的。
- en: Capturing problems is not, and should never be, about assigning blame. It's
    the organization's responsibility to detect and correct problems.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 捕捉问题并不是，也永远不应该是，归咎于谁的责任。检测和纠正问题是组织的责任。
- en: If this happens, not only will the environment become less attractive to work
    in, but problems will be hidden by teams so that they don't get blamed.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发生这种情况，环境不仅会变得不那么吸引人，而且团队会隐藏问题，以免受到指责。
- en: Unaddressed problems tend to be multiplicative, so reliability will suffer greatly.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 未解决的问题往往会成倍增加，因此可靠性将大大降低。
- en: Being able to release uneventfully is critical for quick deployments and to
    increase speed. Only light documentation is required when we're dealing with these
    kinds of problems since they are normally mild and, in the worst case, delay a
    release for a day or two.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 能够顺利发布对于快速部署和提高速度至关重要。当处理这类问题时，通常只需要轻量级文档，因为它们通常是轻微的，最坏的情况下可能会延迟一两天的发布。
- en: For bigger problems, when the external service is disrupted, it's better to
    have a more formal process to ensure that the problem is fixed properly.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更大的问题，当外部服务中断时，最好有一个更正式的流程来确保问题得到适当解决。
- en: Another way we can improve the process is to properly understand the causes
    of problems that interrupt the service in live systems. The most effective tools
    for this are post-mortem meetings.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改进的另一种方式是正确理解中断现场系统服务的问题的原因。这方面最有效的工具是事后总结会议。
- en: Running post-mortem meetings
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进行事后总结会议
- en: Not limited to releases, sometimes, there will be big events that interrupt
    the service and need major work so that they can be fixed. In these emergency
    situations, the first objective is to recover the service as soon as possible.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅限于发布，有时会发生中断服务并需要大量工作才能修复的重大事件。在这些紧急情况下，第一个目标是尽快恢复服务。
- en: After the service is stable again, to learn from this experience and to avoid
    it happening again, a post-mortem meeting should be attended by everyone that
    was involved in the incident. The objective of the post-mortem meeting is to create
    a series of follow-up tasks from the lessons that were learned during the emergency.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务恢复稳定后，为了从这次经历中吸取教训并避免再次发生，应该由参与事件的所有人参加事后总结会议。事后总结会议的目标是从紧急情况中学到的教训中创建一系列后续任务。
- en: 'To document this, you need to create a template. This will be filled in during the
    post-mortem meeting. The template should capture the following information:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 为了记录这一点，您需要创建一个模板。这将在事后总结会议期间填写。模板应该包括以下信息：
- en: '**What problem was detected?** Include how it was detected if this isn''t evident;
    for example, the website was down and was returning 500 errors. This shows that
    there was an increase in errors.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检测到了什么问题？** 如果这不明显，包括如何检测到的；例如，网站宕机并返回500错误。这表明错误增加了。'
- en: '**When did it start and finish?** A timeline of the incident; for example, Thursday
    from 3PM to 5PM.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它是什么时候开始和结束的？** 事件的时间轴；例如，周四下午3点到5点。'
- en: '**Who was involved in remediating the incident?** Either detecting the problem
    or fixing it. This helps us collect information about what happened.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**谁参与了解决这次事件？** 无论是检测问题还是解决问题。这有助于我们收集关于发生了什么的信息。'
- en: '**Why did it fail?** Go to the root cause and the chain of events leading to
    that; for example, the website was down because the application couldn''t connect
    to the database. The database was unresponsive because the hard drive was full.
    The hard drive was full because the local logs filled up the disk.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**为什么会失败？** 找到根本原因和导致这一结果的一系列事件；例如，网站宕机是因为应用程序无法连接到数据库。数据库无响应是因为硬盘已满。硬盘已满是因为本地日志填满了磁盘。'
- en: '**How was it fixed?** Steps were taken to solve the incident; for example,
    logs older than a week were deleted.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**它是如何修复的？** 采取了解决事件的步骤；例如，删除了一周前的日志。'
- en: '**What actions should follow up from this incident?** Actions that should remediate
    or fix the different issues. Ideally, they should include who will perform the
    action; for example, no local logs should be stored and they should be sent to
    the centralized log. The amount of hard disk space should be monitored and alert
    if less than 80% of the space is available.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从这次事件中应该采取哪些行动？** 应该采取纠正或修复不同问题的行动。理想情况下，它们应该包括谁将执行这些行动；例如，不应该存储本地日志，而应该将其发送到集中日志。应该监视硬盘空间的使用情况，并在空间少于80%时发出警报。'
- en: Some of these elements can be filled in immediately after the emergency, such
    as who was involved. However, it's good to schedule the post-mortem meeting one
    to three days after it happened to allow everyone to digest and process this data.
    The root cause can be different to what we initially thought, and spending some
    time thinking about what happened helps us come up with better solutions.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一些元素可以在紧急情况后立即填写，例如谁参与了。然而，最好是在事件发生后一到三天安排事后总结会议，以便每个人都有时间消化和处理这些数据。根本原因可能与我们最初的想法不同，花一些时间思考发生了什么有助于我们提出更好的解决方案。
- en: As we discussed in the *Reflecting on release problems* section, be sure to
    encourage open and candid discussion when you're dealing with service interruption
    incidents.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*反思发布问题*部分讨论的那样，在处理服务中断事件时，一定要鼓励开放和坦率的讨论。
- en: Post-mortem meetings are not there to blame anyone, but to improve the service
    and reduce risks when you're working as a team.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 事后总结会议并不是为了责怪任何人，而是为了改进服务并在团队合作时减少风险。
- en: The follow-up actions should be decided in the meeting and prioritized accordingly.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 应该在会议中决定后续行动，并相应地进行优先排序。
- en: Although detecting the root cause is very important, note that actions should
    be taken against other causes. Even if the root cause is one, there are also other
    preventive actions that can minimize the effect it has if it happens again.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管检测根本原因非常重要，但请注意应该采取针对其他原因的行动。即使根本原因只有一个，也有其他预防性行动可以最小化其再次发生时的影响。
- en: Actions that come about from post-mortem meetings are typically high priority
    and should be done as soon as possible.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 事后总结会议产生的行动通常具有很高的优先级，并应尽快完成。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we've looked at the different aspects of coordination across
    teams so that we can successfully manage an organization running a microservice
    architecture.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们看了团队之间协调的不同方面，以便成功管理运行微服务架构的组织。
- en: We started by talking about how keeping a global vision and coordination between
    parts is good. We talked about having an explicitly named leading architect that
    oversees the system and has a high-level view that allows them to ensure that
    teams aren't conflicting with each other.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先讨论了保持全局视野和各部分之间协调的好处。我们谈到了明确指定的领先架构师监督系统，并具有高层视图，使他们能够确保团队之间不会发生冲突。
- en: We described Conway's Law and how the communication structure ends up shaping
    the software's structure so any change made to the software should be reflected
    somehow in the organization and vice versa. Then, we learned how to divide areas
    of responsibility and provided some examples of possible divisions, based on different
    organizations.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述了康威定律以及沟通结构最终塑造了软件结构，因此对软件所做的任何更改都应在组织中得到反映，反之亦然。然后，我们学习了如何划分责任领域，并提供了一些可能的划分示例，基于不同的组织。
- en: Next, we introduced how technical debt slows down the ongoing development process
    and how it's important to introduce a mindset of continuously addressing it to
    avoid degrading the experience for the internal teams working on them and the
    customers who are using them.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们介绍了技术债务如何减缓持续开发过程，以及引入持续解决技术债务的思维方式对于避免降低内部团队和客户体验的重要性。
- en: Finally, we addressed some of the problems that releases may cause, both in
    terms of coordinating adequately between teams, especially in the early stages
    of working with GitOps, and making retrospective analysis when releases fail or
    when services are down.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们解决了发布可能引起的一些问题，无论是在团队之间进行充分协调方面，特别是在使用GitOps的早期阶段，还是在发布失败或服务中断时进行回顾分析。
- en: Questions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: Why is a leading architect convenient for a microservice-architecture system?
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么领先的架构师对微服务架构系统很方便？
- en: What is Conway's Law?
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 康威定律是什么？
- en: Why does technical debt get introduced?
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么会引入技术债务？
- en: Why is it important to create a culture where we can work continuously to reduce
    technical debt?
  id: totrans-207
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么重要创造一种文化，可以持续努力减少技术债务？
- en: Why is it important to document problems in releases and share them with every
    team?
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么重要记录发布中的问题并与每个团队分享？
- en: What is the main objective of a post-mortem meeting?
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事后总结会议的主要目标是什么？
- en: Further reading
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about the role of the architect, read *Software Architect's Handbook*
    ([https://www.packtpub.com/application-development/software-architects-handbook](https://www.packtpub.com/application-development/software-architects-handbook)),
    which includes chapters devoted to soft skills and architecture evolution. You
    can read more about Conway's Law and structuring digital businesses in *The New
    Engineering Game* ([https://www.packtpub.com/data/the-new-engineering-game](https://www.packtpub.com/data/the-new-engineering-game)).
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多有关架构师角色的信息，请阅读《软件架构师手册》（[https://www.packtpub.com/application-development/software-architects-handbook](https://www.packtpub.com/application-development/software-architects-handbook)），其中包括专门讨论软技能和架构演变的章节。您可以在《新工程游戏》（[https://www.packtpub.com/data/the-new-engineering-game](https://www.packtpub.com/data/the-new-engineering-game)）中了解更多有关康威定律和构建数字化业务的信息。
