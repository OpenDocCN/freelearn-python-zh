- en: Chapter 6
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 6 章
- en: Handling Input and Output
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 处理输入和输出
- en: 6.1 How to Output Messages and Results to a User's Screen?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.1 如何将消息和结果输出到用户的屏幕？
- en: A flowchart uses the oblique parallelogram and the reserved word “Write” to
    display a message or the final results to the user's screen.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图使用斜平行四边形和保留词“Write”来显示消息或最终结果到用户的屏幕上。
- en: .![Image](img/chapter06-01.png)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter06-01.png)'
- en: where arg1, arg2, and arg3 can be variables, expressions, constant values, or
    alphanumeric values enclosed in double quotes.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 arg1、arg2 和 arg3 可以是变量、表达式、常量值或双引号括起来的字母数字值。
- en: The oblique parallelogram that you have just seen is equivalent to the following
    flowchart fragment.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才看到的斜平行四边形等价于以下流程图片段。
- en: .![Image](img/chapter06-02.png)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter06-02.png)'
- en: In Python, you can achieve the same result by using the print statement. Its
    general form is
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，你可以通过使用 print 语句来实现相同的结果。其一般形式是
- en: print(arg1, arg2, arg3, …  [, sep = " "] [, end = "\n"])
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: print(arg1, arg2, arg3, …  [, sep = " "] [, end = "\n"])
- en: where
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►arg1, arg2, arg3, … are the arguments (values) to be printed. They can be variables,
    expressions, constant values, or strings enclosed in single or double quotes.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ►arg1、arg2、arg3、… 是要打印的参数（值）。它们可以是变量、表达式、常量值或单引号或双引号括起来的字符串。
- en: ►sep is the string inserted between arguments. It is optional and its default
    value is one space character.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ►sep 是插入在参数之间的字符串。它是可选的，默认值是一个空格字符。
- en: ►end is the string appended after the last argument. It is optional and its
    default value is one “line break”.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ►end 是附加在最后一个参数之后的字符串。它是可选的，默认值是一个“换行符”。
- en: 'The following code fragment:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段：
- en: a = 5
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: b = 6
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: b = 6
- en: c = a + b
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: c = a + b
- en: print("The sum of 5 and 6 is", c)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: print("5 和 6 的和是", c)
- en: display the message shown in Figure 6–1\.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 显示图 6–1 中所示的消息。
- en: .![Image](img/chapter06-03.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter06-03.png)'
- en: Figure 6–1 A string and an integer displayed on the screen
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–1 屏幕上显示的字符串和整数
- en: '![](img/remember.jpg)In Python, if you want to display a string on the screen,
    the string must be enclosed in single or double quotes.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)在 Python 中，如果你想将字符串显示在屏幕上，该字符串必须用单引号或双引号括起来。'
- en: '![](img/notice.jpg)Note the space inserted automatically on the screen between
    the first string and the value of variable c (just after the word “is”).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意屏幕上在第一个字符串和变量 c 的值（就在“是”这个词之后）之间自动插入的空格。'
- en: The result of a mathematical expression can also be calculated directly in a
    print statement. The following code fragment displays exactly the same message
    as in Figure 6–1.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 数学表达式的结果也可以直接在 print 语句中计算。以下代码片段显示的正是图 6–1 中的相同消息。
- en: a = 5
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: a = 5
- en: b = 6
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: b = 6
- en: print("The sum of 5 and 6 is", a + b)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: print("5 和 6 的和是", a + b)
- en: 6.2 How to Alter the Default Behavior of a print Statement?
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.2 如何修改 print 语句的默认行为？
- en: As already stated, Python automatically outputs a space between arguments. The
    following example
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Python 自动在参数之间输出一个空格。以下示例
- en: print("Morning", "Evening", "Night")
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: print("Morning", "Evening", "Night")
- en: displays
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 显示
- en: .![Image](img/chapter06-04.png)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter06-04.png)'
- en: Figure 6–2 The output result displays a space between arguments
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–2 输出结果显示参数之间有一个空格
- en: 'Also keep in mind that the following three statements produce the same output
    result no matter how many space characters exist after the comma ( , ) delimiter:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，以下三个语句无论逗号（,）分隔符之后有多少空格字符，都会产生相同的输出结果：
- en: print("Morning","Evening","Night")
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: print("Morning","Evening","Night")
- en: print("Morning", "Evening", "Night")
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: print("Morning", "Evening", "Night")
- en: print("Morning",   "Evening",   "Night")
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: print("Morning", "Evening", "Night")
- en: as shown in Figure 6–3.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如图 6–3 所示。
- en: .![Image](img/chapter06-05.png)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter06-05.png)'
- en: Figure 6–3 The output result always displays one space between arguments
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–3 输出结果始终在参数之间显示一个空格
- en: 'If you wish to customize the separator character, you need to use a value for
    argument sep as shown here:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想自定义分隔符字符，你需要像这里一样为参数 sep 使用一个值：
- en: print("Morning", "Evening", "Night", sep = "#")
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: print("Morning", "Evening", "Night", sep = "#")
- en: and the output result now becomes as shown in Figure 6–4.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 并且输出结果现在如图 6–4 所示。
- en: .![Image](img/chapter06-06.png)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '![Image](img/chapter06-06.png)'
- en: Figure 6–4 The output result with a customized separator
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–4 带有自定义分隔符的输出结果
- en: Now, look carefully at the following example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，仔细看看以下示例。
- en: a = "Ares"
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Ares"
- en: print("Hello", a)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello", a)
- en: print("Halo", a)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: print("Halo", a)
- en: print("Salut", a)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: print("Salut", a)
- en: The print statement in Python automatically appends a “line break” after the
    last argument (variable a); thus, these three messages are displayed one under
    the other as shown in Figure 6–5.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的 print 语句在最后一个参数（变量 a）之后自动添加一个“换行符”；因此，这三个消息像图 6–5 所示的那样一个接一个地显示。
- en: .![Image](img/chapter06-07.png)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter06-07.png)
- en: Figure 6–5 The output result displays on three lines
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–5 输出结果显示在三条线上
- en: 'You can customize the value of the end argument as shown here:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以自定义 end 参数的值，如下所示：
- en: a = "Ares"
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Ares"
- en: print("Hello", a, end = " - ")
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello", a, end = " - ")
- en: print("Halo", a, end = " - ")
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: print("Halo", a, end = " - ")
- en: print("Salut", a)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: print("Salut", a)
- en: The output result now becomes as shown in Figure 6–6.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果现在如图 6–6 所示。
- en: '![Image](img/chapter06-08.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter06-08.png)'
- en: Figure 6–6 The output result displays on one line
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–6 输出结果显示在一行上
- en: 'An interesting sequence of characters is the \n which can be used to create
    a custom “line break”. You can output a “line break” as shown here:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有趣的字符序列是 \n，它可以用来创建一个自定义的“换行符”。你可以像下面这样输出一个“换行符”：
- en: a = "Ares"
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Ares"
- en: print("Hello", a, "\nHalo", a, "\nSalut", a)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello", a, "\nHalo", a, "\nSalut", a)
- en: and the output result is shown in Figure 6–7.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 并且输出结果如图 6–7 所示。
- en: '![Image](img/chapter06-09.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter06-09.png)'
- en: Figure 6–7 The output result displays on three lines
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–7 输出结果显示在三条线上
- en: Another useful sequence of characters is the \t which can be used to create
    a “tab stop”. The tab character ( \t ) is useful for aligning output.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的字符序列是 \t，它可以用来创建一个“制表位”。制表符（\t）对于对齐输出很有用。
- en: print("John\tGeorge")
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: print("John\tGeorge")
- en: print("Sofia\tMary")
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: print("Sofia\tMary")
- en: The output result appears in Figure 6–8\.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如图 6–8 所示。
- en: .![Image](img/chapter06-10.png)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter06-10.png)
- en: Figure 6–8 The output result displays tab characters
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6–8 输出结果显示制表符
- en: Of course, the same result can be accomplished with one single statement.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，同样的结果可以用一个单独的语句实现。
- en: print("John\tGeorge\nSofia\tMary")
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: print("John\tGeorge\nSofia\tMary")
- en: 6.3 How to Prompt the User to Enter Data?
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.3 如何提示用户输入数据？
- en: Do you recall the three main stages involved in creating an algorithm or a computer
    program? The first stage was the “data input” stage, in which the computer lets
    the user enter data such as numbers, their name, their address, or their year
    of birth.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得创建算法或计算机程序涉及的主要三个阶段吗？第一个阶段是“数据输入”阶段，在这个阶段，计算机允许用户输入数据，如数字、他们的名字、他们的地址或他们的出生年份。
- en: A flowchart uses the oblique parallelogram and the reserved word “Read” to let
    a user enter their data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图使用斜平行四边形和保留词“Read”来让用户输入他们的数据。
- en: '![Image](img/chapter06-11.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter06-11.png)'
- en: where var_name1, var_name2, and var_name3 must be variables only.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 其中 var_name1、var_name2 和 var_name3 必须是变量。
- en: The oblique parallelogram that you have just seen is equivalent to the following
    flowchart fragment.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才看到的斜平行四边形等价于以下流程图片段。
- en: .![Image](img/chapter06-12.png)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter06-12.png)
- en: '![](img/notice.jpg)When a Read statement is executed, the flow of execution
    is interrupted until the user has entered all the data. When data entry is complete,
    the flow of execution continues to the next statement. Usually data are entered
    from a keyboard.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)当执行 Read 语句时，执行流程会中断，直到用户输入所有数据。当数据输入完成后，执行流程继续到下一个语句。通常数据是从键盘输入的。'
- en: 'In Python, data input is accomplished using one of the following statements:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，数据输入是通过以下语句之一完成的：
- en: '#Read a string from the keyboard'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '# 从键盘读取字符串'
- en: var_name_str = input([prompt])
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: var_name_str = input([prompt])
- en: '#Read an integer from the keyboard'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '# 从键盘读取整数'
- en: var_name_int = int(input([prompt]))
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: var_name_int = int(input([prompt]))
- en: '#Read a real from the keyboard'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '# 从键盘读取实际数据'
- en: var_name_float = float(input([prompt]))
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: var_name_float = float(input([prompt]))
- en: where
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►prompt is the prompt message to be displayed. It can be either a variable or
    a string enclosed in single or double quotes. The argument prompt is optional.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ►prompt 是要显示的提示信息。它可以是变量或用单引号或双引号括起来的字符串。prompt 参数是可选的。
- en: ►var_name_str can be any variable of type string.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ►var_name_str 可以是任何类型为字符串的变量。
- en: ►var_name_int can be any variable of type integer.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ►var_name_int 可以是任何类型为整数的变量。
- en: ►var_name_float can be any variable of type float (real).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ►var_name_float 可以是任何类型为 float（实数）的变量。
- en: '![](img/notice.jpg)Functions int() and float() are discussed later in this
    book.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)函数 int() 和 float() 将在本书的后面讨论。'
- en: Let's study the input() statement using the following example.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过以下示例来研究 input() 语句。
- en: name = input("What is your name? ")
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: name = input("What is your name? ")
- en: print("Hello", name)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: print("你好", name)
- en: When the input() statement of this example executes, the message “What is your
    name?” (without the double quotes) is displayed and the flow of execution stops,
    waiting for the user to enter their name. The print() statement is not yet executed!
    As long as the user doesn't enter anything, the computer just waits, as shown
    in Figure 6–9.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 当此示例中的input()语句执行时，会显示消息“你叫什么名字？”（不带双引号），执行流程会停止，等待用户输入他们的名字。print()语句尚未执行！只要用户没有输入任何内容，计算机就会等待，如图6–9所示。
- en: .![Image](img/chapter06-13.png)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter06-13.png)
- en: Figure 6–9 When an input() statement executes, the computer waits for data input.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 6–9 当input()语句执行时，计算机等待数据输入。
- en: When the user finally enters their name and hits the “Enter  ![Image](img/key_enter.png)”
    key, the flow of execution then continues to the next print() statement as shown
    in Figure 6–10.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户最终输入他们的名字并按下“Enter ![Image](img/key_enter.png)”键时，执行流程随后继续到下一个print()语句，如图6–10所示。
- en: .![Image](img/chapter06-14.png)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter06-14.png)
- en: Figure 6–10 The flow of execution continues when the user hits the “Enter ![Image](img/key_enter.png)”
    key.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 6–10 当用户按下“Enter ![Image](img/key_enter.png)”键时，执行流程继续。
- en: The following code fragment prompts the user to enter a string and a float,
    that is, a number that contains a fractional part.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段提示用户输入一个字符串和一个浮点数，即包含小数部分的数字。
- en: 'productName = input("Enter product name: ")'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 'productName = input("输入产品名称: ")'
- en: 'productPrice = float(input("Enter product price: "))'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'productPrice = float(input("输入产品价格: "))'
- en: The following program prompts the user to enter a string and an integer, that
    is, a number without a fractional part and then displays a message.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 以下程序提示用户输入一个字符串和一个整数，即不带小数部分的数字，然后显示一条消息。
- en: name = input("What is your name? ")
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: name = input("你叫什么名字？ ")
- en: age = int(input("What is your age? "))
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: age = int(input("你多大了？ "))
- en: print("Wow, you are already", age, "years old,", name, "!")
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: print("哇，你已经", age, "岁了，", name, "！")
- en: In Python (even though it is not frequently used), you can read two or more
    values using just one line of code, as shown here.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中（尽管不常用），你可以只用一行代码读取两个或更多值，如下所示。
- en: name, age = input("What is your name? "), int(input("What is your age? "))
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: name, age = input("你叫什么名字？ "), int(input("你多大了？ "))
- en: print("Wow, you are already", age, "years old,", name, "!")
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: print("哇，你已经", age, "岁了，", name, "！")
- en: The corresponding flowchart fragment, however, must look like this
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，相应的流程图片段必须看起来像这样
- en: '![Image](img/chapter06-15.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter06-15.png)'
- en: In Python, it is recommended to display the prompt messages using the input()
    statement. The following example is correct, but it is not frequently used.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，建议使用input()语句来显示提示信息。以下示例是正确的，但并不常用。
- en: print("What is your name? ", end = "")
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: print("你叫什么名字？ ", end = "")
- en: name = input()
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: name = input()
- en: print("What is your age? ", end = "")
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: print("你多大了？ ", end = "")
- en: age = int(input())
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: age = int(input())
- en: print("Wow, you are already", age, "years old,", name, "!")
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: print("哇，你已经", age, "岁了，", name, "！")
- en: In this book there is a slight difference between the words “prompts” and “lets”.
    When an exercise says “Write a Python program that prompts the user to enter…”
    this means that you must include a prompt message. However, when the exercise
    says “Write a Python program that lets the user enter…” this means that you are
    not actually required to include a prompt message; that is, it is not wrong to
    include one but you don't have to!  The following example lets the user enter
    their name and age (but does not prompt them to).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，“提示”和“允许”这两个词之间有一点区别。当一个练习说“编写一个Python程序，提示用户输入...”这意味着你必须包含一个提示信息。然而，当一个练习说“编写一个Python程序，允许用户输入...”这意味着实际上并不要求包含提示信息；也就是说，包含它是没有错的，但你不必这么做！以下示例允许用户输入他们的名字和年龄（但不提示他们）。
- en: name = input()
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: name = input()
- en: age = int(input())
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: age = int(input())
- en: What happens here (when the program is executed) is that the computer displays
    a text cursor without any prompt message and waits for the user to enter two values—one
    for name and one for age. The user, though, must be a prophet and guess what to
    enter! Do they have to enter their name first and then their age, or is it the
    opposite? So, obviously a prompt message is pretty much required, because it makes
    your program more user-friendly.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序执行时，这里发生的情况是计算机显示一个文本光标而没有任何提示信息，等待用户输入两个值——一个用于名字，一个用于年龄。然而，用户必须是一个先知，猜测要输入什么！他们必须先输入名字然后输入年龄，还是相反？所以，显然需要一个提示信息，因为它会使你的程序更加用户友好。
- en: '6.4 Review Questions: True/False'
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.4 复习问题：判断题
- en: Choose true or false for each of the following statements.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确或错误。
- en: 1)In Python, the word print is a reserved word.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 1)在Python中，单词print是一个保留字。
- en: 2)The print() statement can be used to display a message or the content of a
    variable.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 2)可以使用print()语句显示消息或变量的内容。
- en: 3)When the input() statement is executed, the flow of execution is interrupted
    until the user has entered a value.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 3)当执行input()语句时，执行流程会中断，直到用户输入一个值。
- en: 4)One single input() statement can be used to enter multiple data values.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 4)一个单独的input()语句可以用来输入多个数据值。
- en: 5)Before data input, a prompt message must always be displayed.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在数据输入之前，必须始终显示提示信息。
- en: '6.5 Review Questions: Multiple Choice'
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 6.5 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下每个陈述的正确答案。
- en: 1)The statement print(hello) displays
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 1)语句print(hello)显示
- en: a)the word “hello” (without the double quotes).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: a)单词“hello”（不使用双引号）。
- en: b)the word “hello” (including the double quotes).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: b)单词“hello”（包括双引号）。
- en: c)the content of the variable hello.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: c)变量hello的内容。
- en: d)none of the above
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 2)The statement print("HELLO") displays
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 2)语句print("HELLO")显示
- en: a)the word “HELLO” (without the double quotes).
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: a)单词“HELLO”（不使用双引号）。
- en: b)the word “HELLO” (including the double quotes).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: b)单词“HELLO”（包括双引号）。
- en: c)the content of the variable HELLO.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: c)变量HELLO的内容。
- en: d)none of the above
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 3)The statement print("Hello\nHermes") displays
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 3)语句print("Hello\nHermes")显示
- en: a)the message “Hello Hermes” (without the double quotes).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: a)输入消息“Hello Hermes”（不使用双引号）。
- en: b)the word “Hello” in one line and the word “Hermes” in the next one (without
    the double quotes).
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: b)在第一行输入单词“Hello”，在下一行输入单词“Hermes”（不使用双引号）。
- en: c)the message “HelloHermes” (without the double quotes).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: c)消息“HelloHermes”（不使用双引号）。
- en: d)the message “Hello\nHermes” (without the double quotes).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: d)消息“Hello\nHermes”（不使用双引号）。
- en: e)none of the above
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: e)以上都不是
- en: 4)The statement  data1data2 = input()
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 4)语句  data1data2 = input()
- en: a)lets the user enter a value and assigns it to variable data1\. Variable data2
    remains empty.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: a)允许用户输入一个值并将其分配给变量data1\. 变量data2保持为空。
- en: b)lets the user enter a value and assigns it to variable data1data2.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: b)允许用户输入一个值并将其分配给变量data1data2。
- en: c)lets the user enter two values and assigns them to variables data1 and data2.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: c)允许用户输入两个值并将它们分配给变量data1和data2。
- en: d)none of the above
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
