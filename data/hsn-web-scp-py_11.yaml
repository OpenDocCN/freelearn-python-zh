- en: Using Selenium to Scrape the Web
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium进行Web抓取
- en: So far, we have learned how to use a number of data finding techniques and how
    to access web content by implementing various Python libraries for web scraping.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何使用多种数据查找技术，并通过实现各种Python库来访问Web内容进行Web抓取。
- en: Selenium is a web application testing framework, which automates the browsing
    action and can be used for both easy and complex web scraping activities. Selenium
    provides a web browser as an interface or automated tool. Dynamic or secure web
    content that uses JavaScript, cookies, scripts, and so on are loaded, tested,
    and even scraped with the help of Selenium.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个Web应用程序测试框架，它自动化浏览操作，并可用于简单和复杂的Web抓取活动。 Selenium提供了一个Web浏览器作为接口或自动化工具。使用JavaScript、cookies、脚本等的动态或安全Web内容可以通过Selenium的帮助加载、测试，甚至抓取。
- en: There is so much to learn about the Selenium framework. In this chapter, we
    will be covering the major concepts of the framework that are relevant to web
    scraping.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 关于Selenium框架有很多东西要学习。在本章中，我们将介绍与Web抓取相关的框架的主要概念。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introduction to Selenium
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium简介
- en: Using Selenium for web scraping
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Selenium进行Web抓取
- en: Technical requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'A web browser (Google Chrome or Mozilla Firefox) is required for this chapter,
    and we will be using the following Python libraries:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章需要一个Web浏览器（Google Chrome或Mozilla Firefox），我们将使用以下Python库：
- en: '`selenium` (Python library)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`selenium`（Python库）'
- en: '`re`'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`re`'
- en: If these libraries are not present in your current Python setup, then you can
    set them up or install them by referring to the *Setting things up* section in [Chapter
    2](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml), *Python and the Web – Using urllib
    and Requests*.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您当前的Python设置中没有这些库，则可以通过参考[第2章](b9919ebf-2d5c-4721-aa76-5c1378262473.xhtml)中的*设置事物*部分来设置或安装它们。
- en: In addition to the Python libraries and web browsers mentioned, we will be using
    WebDriver for Google Chrome.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提到的Python库和Web浏览器之外，我们还将使用WebDriver for Google Chrome。
- en: Code files are available online at [https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter08).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 代码文件可在[https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter08](https://github.com/PacktPublishing/Hands-On-Web-Scraping-with-Python/tree/master/Chapter08)上找到。
- en: Introduction to Selenium
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium简介
- en: As I mentioned, Selenium is a web application framework that can be used for
    web scraping activities. It can also be used as a browser automation tool.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所提到的，Selenium是一个可以用于Web抓取活动的Web应用程序框架。它也可以用作浏览器自动化工具。
- en: 'The automation of tasks or activities related to web applications, such as
    those in the following list, involves those tasks being performed without the
    direct involvement of human beings:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 与Web应用程序相关的任务或活动的自动化，例如以下列表中的任务，涉及在没有人类直接参与的情况下执行这些任务：
- en: Browsing
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浏览
- en: Clicking links
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击链接
- en: Saving screenshots
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保存屏幕截图
- en: Downloading images
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载图像
- en: Filling out HTML `<form>` templates and many more activities
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 填写HTML `<form>` 模板和许多其他活动
- en: Selenium provides a web browser as an interface or automated tool. With the
    automation of the browsing action, Selenium can also be used in web scraping.
    Dynamic or secure web services that use JavaScript, cookies, scripts, and so on
    are loaded, tested, and even crawled and scraped with the help of Selenium.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium提供了一个Web浏览器作为接口或自动化工具。通过浏览操作的自动化，Selenium也可以用于Web抓取。使用JavaScript、cookies、脚本等的动态或安全Web服务可以通过Selenium的帮助加载、测试，甚至爬取和抓取。
- en: Selenium is open source and can be accessed across multiple platforms. Various
    web browsers can be used for testing using libraries that are available for programming
    languages such as Java, and Python. Libraries are used to create scripts that
    interact with Selenium to perform browser-based automation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是开源的，可以跨多个平台访问。可以使用各种Web浏览器进行测试，这些浏览器使用可用于编程语言（如Java和Python）的库。使用库创建脚本与Selenium交互以执行基于浏览器的自动化。
- en: Although using Selenium in application testing has many advantages when it comes
    to actions such as crawling and scraping, it also has its disadvantages, such
    as time and memory consumption. Selenium is extendable and effective, but is slow
    in performing its actions, and consumes large amounts of memory space.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在应用程序测试中使用Selenium在爬行和抓取等操作方面具有许多优势，但它也有其缺点，例如时间和内存消耗。 Selenium是可扩展和有效的，但在执行其操作时速度较慢，并且消耗大量内存空间。
- en: For more detailed information on Selenium, please visit [https://www.seleniumhq.org/](https://www.seleniumhq.org/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Selenium的更详细信息，请访问[https://www.seleniumhq.org/](https://www.seleniumhq.org/)。
- en: In the following section, we will set up Selenium WebDriver and test the setup
    with a Python library, which can be found at [https://selenium-python.readthedocs.io/](https://selenium-python.readthedocs.io/).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将设置Selenium WebDriver并使用Python库进行设置，该库可以在[https://selenium-python.readthedocs.io/](https://selenium-python.readthedocs.io/)找到。
- en: Selenium is a web testing framework, whereas Selenium ([https://pypi.org/project/selenium/](https://pypi.org/project/selenium/)) is
    a Python library that binds Selenium WebDriver or is used to create scripts to
    interact with Selenium.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个Web测试框架，而Selenium ([https://pypi.org/project/selenium/](https://pypi.org/project/selenium/))是一个绑定Selenium
    WebDriver或用于创建与Selenium交互的脚本的Python库。
- en: Application testing is performed to ensure that the requirements are met by
    the application and that bugs and errors are detected to ensure a quality product.
    It can be conducted either manually (with the help of users) or by using automated
    tools (such as Selenium). Testing web-based applications is done prior to the
    launch of the application over the internet.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序测试是为了确保应用程序满足要求，并检测错误和错误以确保产品质量而进行的。它可以通过手动（借助用户的帮助）或使用自动化工具（如Selenium）进行。在互联网上发布应用程序之前，会对基于Web的应用程序进行测试。
- en: Selenium projects
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium项目
- en: Selenium consists of multiple components or tools that are also known as Selenium
    projects, which makes it a complete framework for web-based application testing.
    We will now look at some of the major components of these Selenium projects.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 由多个组件或工具组成，也被称为 Selenium 项目，使其成为一个完整的基于 web 的应用程序测试框架。我们现在将看一些这些 Selenium
    项目的主要组件。
- en: Selenium WebDriver
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium WebDriver
- en: Selenium WebDriver is a component of Selenium that is used to automate the browser.
    Automating the browser can be conducted by providing commands with various language
    bindings available for Java, Python, JavaScript, and so on by using third-party
    drivers such as Google Chrome driver, Mozilla Gecko driver, and Opera ([https://github.com/mozilla/geckodriver/](https://github.com/mozilla/geckodriver/)).
    Selenium WebDriver has no external dependency on any other software or servers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium WebDriver 是 Selenium 的一个组件，用于自动化浏览器。通过提供各种语言绑定，如 Java、Python、JavaScript
    等，使用第三方驱动程序，如 Google Chrome 驱动程序、Mozilla Gecko 驱动程序和 Opera（[https://github.com/mozilla/geckodriver/](https://github.com/mozilla/geckodriver/)）来提供命令来进行浏览器自动化。Selenium
    WebDriver 不依赖于任何其他软件或服务器。
- en: WebDriver is an object-oriented API with updated features that overcomes and
    addresses the limitations of previous Selenium versions and Selenium **Remote
    Control** (**RC**). Please visit the Selenium WebDriver web page ([https://www.seleniumhq.org/projects/webdriver/](https://www.seleniumhq.org/projects/webdriver/))
    for more information.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WebDriver 是一个面向对象的 API，具有更新的功能，克服并解决了之前 Selenium 版本和 Selenium **Remote Control**
    (**RC**) 的限制。请访问 Selenium WebDriver 网页（[https://www.seleniumhq.org/projects/webdriver/](https://www.seleniumhq.org/projects/webdriver/)）获取更多信息。
- en: Selenium RC
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium RC
- en: Selenium RC is a server that is programmed in Java. It uses HTTP to accept commands
    for the browser and is used to test complex AJAX-based web applications.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium RC 是一个用 Java 编程的服务器。它使用 HTTP 接受浏览器的命令，用于测试复杂的基于 AJAX 的 web 应用程序。
- en: Selenium RC has been officially deprecated following the release of Selenium
    2 (Selenium version 2). However, WebDriver contains the major features of Selenium
    RC. Please visit [https://www.seleniumhq.org/projects/remote-control/](https://www.seleniumhq.org/projects/remote-control/) for
    more information.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium RC 在发布 Selenium 2（Selenium 版本 2）后已正式弃用。然而，WebDriver 包含了 Selenium RC
    的主要功能。请访问[https://www.seleniumhq.org/projects/remote-control/](https://www.seleniumhq.org/projects/remote-control/) 获取更多信息。
- en: Selenium Grid
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium Grid
- en: Selenium Grid is also a server that allows tests to run parallel on multiple
    machines across multiple browsers and operating systems, distributing the system
    load and cutting down performance issues, such as time consumption.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Grid 也是一个服务器，允许测试在多台机器上并行运行，跨多个浏览器和操作系统，分发系统负载并减少性能问题，如时间消耗。
- en: Complex tests were used to process Selenium RC and Selenium Grid together. Since
    the release of version 2.0, the Selenium server now has built-in support for WebDriver,
    Selenium RC, and Selenium Grid. Please visit the Selenium Grid web page ([https://www.seleniumhq.org/projects/grid/](https://www.seleniumhq.org/projects/grid/)) for
    more information.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的测试用于同时处理 Selenium RC 和 Selenium Grid。自 2.0 版本发布以来，Selenium 服务器现在内置支持 WebDriver、Selenium
    RC 和 Selenium Grid。请访问 Selenium Grid 网页（[https://www.seleniumhq.org/projects/grid/](https://www.seleniumhq.org/projects/grid/)）获取更多信息。
- en: Selenium IDE
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium IDE
- en: An open source Selenium **integrated development environment** (**IDE**) is
    used to build test cases with Selenium. It's basically a web browser extension
    available with features such as the ability to record and play back web automation
    through a **graphical user** **interface** (**GUI**).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个开源的 Selenium **集成开发环境** (**IDE**) 用于使用 Selenium 构建测试用例。它基本上是一个网页浏览器扩展，具有诸如记录和通过**图形用户** **界面**
    (**GUI**) 回放网页自动化等功能。
- en: 'The following are a few key features of the Selenium IDE:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Selenium IDE 的一些关键特性：
- en: Extendable and easy to use for debugging
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可扩展且易于调试
- en: Resilient tests
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 韧性测试
- en: Cross-browser support
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨浏览器支持
- en: Can create scripts that can run commands and support control-flow structures
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以创建可以运行命令并支持控制流结构的脚本
- en: Please visit the Selenium IDE web page ([https://www.seleniumhq.org/selenium-ide/](https://www.seleniumhq.org/selenium-ide/)) for
    more information and installation procedures. Please visit the Selenium projects
    web page ([https://www.seleniumhq.org/projects/](https://www.seleniumhq.org/projects/))
    for more information on Selenium components.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 请访问 Selenium IDE 网页（[https://www.seleniumhq.org/selenium-ide/](https://www.seleniumhq.org/selenium-ide/)）获取更多信息和安装程序。请访问
    Selenium 项目网页（[https://www.seleniumhq.org/projects/](https://www.seleniumhq.org/projects/)）获取有关
    Selenium 组件的更多信息。
- en: Now that we know what Selenium is used for and some of its major components,
    let's look at how we can install and perform general tests using Selenium WebDriver.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了 Selenium 的用途和一些主要组件，让我们看看如何安装和使用 Selenium WebDriver 进行一般测试。
- en: Setting things up
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置事物
- en: 'For the successful implementation of browser automation and application testing
    using Selenium, WebDriver needs to be set up. Let''s go through the following
    steps to set up WebDriver for Google Chrome:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了成功实现使用 Selenium 进行浏览器自动化和应用程序测试，需要设置 WebDriver。让我们通过以下步骤来设置 Google Chrome
    的 WebDriver：
- en: 'Visit [https://www.seleniumhq.org/](https://www.seleniumhq.org/):'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问[https://www.seleniumhq.org/](https://www.seleniumhq.org/)。
- en: '![](assets/89dd533f-86a7-4e6c-903a-5c2871c08465.png) SeleniumHQ Browser Automation
    main page'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/89dd533f-86a7-4e6c-903a-5c2871c08465.png) SeleniumHQ 浏览器自动化主页'
- en: Click Download (or browse to [https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)).
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击下载（或浏览至[https://www.seleniumhq.org/download/](https://www.seleniumhq.org/download/)）。
- en: 'Under the Third Party Drivers, Bindings, and Plugins section, click Google
    Chrome Driver (or browse to [https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/)):'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第三方驱动程序、绑定和插件部分，点击 Google Chrome Driver（或浏览至[https://sites.google.com/a/chromium.org/chromedriver/](https://sites.google.com/a/chromium.org/chromedriver/)）：
- en: '![](assets/3c2a948b-705e-484b-aa17-09037bc7600b.png) Third -party drivers,
    Selenium'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![](assets/3c2a948b-705e-484b-aa17-09037bc7600b.png) 第三方驱动程序，Selenium'
- en: 'From ChromeDriver - WebDriver for Chrome ([https://sites.google.com/a/chromium.org/chromedriver](https://sites.google.com/a/chromium.org/chromedriver/)),
    download the latest stable release of ChromeDriver, appropriate to the platform:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从ChromeDriver - WebDriver for Chrome ([https://sites.google.com/a/chromium.org/chromedriver](https://sites.google.com/a/chromium.org/chromedriver/))，下载适用于平台的最新稳定版本的ChromeDriver：
- en: '![](assets/1cb5ee93-dd5d-4666-97f0-9d19d5c799ed.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1cb5ee93-dd5d-4666-97f0-9d19d5c799ed.png)'
- en: ChromeDriver listings
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: ChromeDriver列表
- en: Unzip the downloaded `chromedriver*.zip`. An application file named `chromedriver.exe` should
    appear. We can place the `.exe` file on the main folder containing the codes.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压下载的`chromedriver*.zip`。应该出现一个名为`chromedriver.exe`的应用程序文件。我们可以将`.exe`文件放在包含代码的主文件夹中。
- en: We will be using Google Chrome and ChromeDriver throughout the chapter; for
    details about using other browsers, or more information on Selenium, please visit SeleniumHQ.
    For more information on the installation, please refer to [https://selenium-python.readthedocs.io/installation.html](https://selenium-python.readthedocs.io/installation.html).
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在整个章节中使用谷歌浏览器和ChromeDriver；有关使用其他浏览器的详细信息，或有关Selenium的更多信息，请访问SeleniumHQ。有关安装的更多信息，请参阅[https://selenium-python.readthedocs.io/installation.html](https://selenium-python.readthedocs.io/installation.html)。
- en: 'Now that we have completed the setup for WebDriver and the Selenium Python
    library, let''s verify this setup through the Python IDE. As shown in the following
    screenshot, `selenium` contains the `webdriver` module, with submodules such as `Chrome`,
    `Android`, `Firefox`, `Ie`, and `Opera`. The current version is `3.14.1`:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了WebDriver和Selenium Python库的设置，让我们通过Python IDE验证这个设置。如下面的屏幕截图所示，`selenium`包含`webdriver`模块，包括`Chrome`、`Android`、`Firefox`、`Ie`和`Opera`等子模块。当前版本是`3.14.1`：
- en: '![](assets/3c831b9c-ad14-4038-956d-7b7d7e81cc6d.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/3c831b9c-ad14-4038-956d-7b7d7e81cc6d.png)'
- en: Printing the selenium.webdriver version
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 打印selenium.webdriver版本
- en: 'We will be using Selenium with Google Chrome, so let''s explore the contents
    of `Chrome` inside `webdriver`:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Selenium与谷歌浏览器，因此让我们探索`webdriver`中`Chrome`的内容：
- en: '![](assets/1c169341-d09d-4daf-ba71-52e874b3e558.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1c169341-d09d-4daf-ba71-52e874b3e558.png)'
- en: Exploring Chrome from Selenium WebDriver.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 从Selenium WebDriver探索Chrome。
- en: As shown in the preceding screenshot, there are a number of functions that will
    be called and used to implement the browser automation. You can also see that
    there are many function names that begin with `find_element*`, similar to the
    traversing and parsing functions that we used and learned about in earlier chapters
    on the scraping activity.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，有许多函数将被调用和用于实现浏览器自动化。您还可以看到许多函数名称以`find_element*`开头，类似于我们在早期章节中用于爬取活动的遍历和解析函数。
- en: In the next section, we will learn about `selenium.webdriver`.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将学习关于`selenium.webdriver`。
- en: Exploring Selenium
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索Selenium
- en: In this section, we will use and introduce various properties for `webdriver`
    and `webdriver.Chrome`, while looking at some real cases. The following sections
    will illustrate the use of Selenium and explore its major properties.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将使用和介绍`webdriver`和`webdriver.Chrome`的各种属性，同时查看一些真实案例。接下来的章节将说明Selenium的使用并探索其主要属性。
- en: Accessing browser properties
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问浏览器属性
- en: In this section, we will demonstrate the use of Selenium and Chrome WebDriver
    to load Google Chrome with URLs and access certain browser-based features.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将演示使用Selenium和Chrome WebDriver加载谷歌浏览器的URL并访问某些基于浏览器的功能。
- en: 'To begin with, let''s import `webdriver` from `selenium` and set a path to `chromedriver.exe`—let''s
    call it `chromedriver_path`. The path created will be required to load Google
    Chrome. Depending on the application location, the complete path to `chromedriver.exe` should
    be mentioned, and is required for successful implementation:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从`selenium`中导入`webdriver`并设置到`chromedriver.exe`的路径，让我们称之为`chromedriver_path`。创建的路径将需要加载谷歌浏览器。根据应用程序位置，应提及`chromedriver.exe`的完整路径，并且对于成功实施是必需的：
- en: '[PRE0]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `selenium.webdriver` is used to implement various browsers, in this case,
    Google Chrome. The `webdriver.Chrome()` phrase is provided with the path of Chrome WebDriver
    so that `chromedriver_path` can be used for execution.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`selenium.webdriver`用于实现各种浏览器，在本例中是谷歌浏览器。`webdriver.Chrome()`短语提供了Chrome WebDriver的路径，以便`chromedriver_path`用于执行。'
- en: 'The phrase `driver`, which is an object of the `selenium.webdriver.chrome.webdriver.WebDriver` class, is
    created using `webdriver.Chrome()`, which will now provide access to the various
    attributes and properties from `webdriver`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 短语`driver`是`webdriver.chrome.webdriver.WebDriver`类的对象，使用`webdriver.Chrome()`创建，现在将提供对`webdriver`的各种属性和属性的访问：
- en: '[PRE1]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`chromedriver.exe` will be instantiated at this instance or upon creation of
    the `driver `object. The Terminal screen and an empty new window of Google Chrome
    will be loaded, as shown in the following screenshot:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`chromedriver.exe`将在此实例或在`driver`对象创建时实例化。终端屏幕和空白的新窗口将加载谷歌浏览器，如下面的屏幕截图所示：'
- en: '![](assets/579126b7-c2b6-4201-8489-75cb356740da.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/579126b7-c2b6-4201-8489-75cb356740da.png)'
- en: The Terminal screen and empty browser page
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 终端屏幕和空白浏览器页面
- en: 'If you encounter any error in executing the code so far, please go through
    the following steps, and then execute the code again:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在执行到目前为止的代码时遇到任何错误，请按照以下步骤执行代码：
- en: Obtain the latest ChromeDriver and replace the existing one
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取最新的ChromeDriver并替换现有的ChromeDriver
- en: Update and verify the `PATH` of `chromedriver_path`
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新和验证`chromedriver_path`的`PATH`
- en: The new window from Google Chrome is then provided with a URL using the `get()` function from
    `webdriver`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 然后使用`get()`函数从`webdriver`为谷歌浏览器提供一个URL。
- en: 'The `get()` phraseaccepts the URL that is to be loaded on the browser. Let''s
    provide [https://www.python.org](https://www.python.org) as an argument to `get()`;
    the browser will start loading the URL, as shown in the following screenshot:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`get()`短语接受要在浏览器上加载的URL。让我们将[https://www.python.org](https://www.python.org)作为`get()`的参数；浏览器将开始加载URL，如下面的屏幕截图所示：'
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see in the following screenshot, a notice is displayed just below
    the address bar with the message **Chrome is being controlled by automated test
    software**. This message also confirms the successful execution of the `selenium.webdriver`
    activity, and it can be provided with further codes to act on or automate the
    page that has been loaded:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在下面的截图中所见，地址栏下方显示了一个通知，其中包含消息**Chrome is being controlled by automated test
    software**。这条消息也确认了`selenium.webdriver`活动的成功执行，并且可以提供进一步的代码来操作或自动化加载的页面：
- en: '![](assets/455fd250-2530-46ec-8fba-27ae3ff539ec.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/455fd250-2530-46ec-8fba-27ae3ff539ec.png)'
- en: Chrome browser loaded with https://www.python.org
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Chrome浏览器加载了https://www.python.org
- en: 'Upon successful loading of the page, we can access and explore its properties
    using `driver`. To illustrate this, let''s extract or print the title from the
    HTML `<title>` tag and print the current URL that is accessible:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面成功加载后，我们可以使用`driver`访问和探索其属性。为了说明这一点，让我们从HTML `<title>`标签中提取或打印标题，并打印当前可访问的URL：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'As seen in the preceding code, the page title is available using `driver.title`,
    and the current page URL is found with `driver.current_url`. The `current_url` phrase
    can be used to verify whether any URL redirection has taken place after loading
    the initial URL. Let''s save a page screenshot with a condition that is verified
    using `search()` from the Python library, `re`:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，可以使用`driver.title`获取页面标题，使用`driver.current_url`找到当前页面的URL。`current_url`短语可用于验证在加载初始URL后是否发生了任何URL重定向。让我们使用Python库`re`的`search()`保存页面截图：
- en: '[PRE4]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `save_screenshot()` phrase is provided with the filename as an argument
    for the image, and it creates a PNG image. The image will be saved at the current
    code location; the full destination or desired path can also be provided.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_screenshot()`短语以文件名作为图像的参数，并创建一个PNG图像。图像将保存在当前代码位置；也可以提供完整的目标或所需路径。'
- en: 'To explore further, let''s collect the web cookies from [https://www.python.org](https://www.python.org).
    The `get_cookies()` phrase is used to retrieve cookies, as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步探索，让我们从[https://www.python.org](https://www.python.org)收集网页cookies。使用`get_cookies()`短语来检索cookies，如下所示：
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The page source can be obtained using `driver.page_source`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`driver.page_source`获取页面源。
- en: 'To obtain the page source manually, right-click on the page and click View
    page source, or press *Ctrl* + *U*:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动获取页面源，请右键单击页面，然后单击“查看页面源”，或按*Ctrl* + *U*：
- en: '[PRE6]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The page can be reloaded or refreshed using `driver.refresh()`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`driver.refresh()`重新加载或刷新页面。
- en: 'To refresh the page source manually, right-click on the page and click Reload, or
    press *Ctrl* + *R*:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 要手动刷新页面源，请右键单击页面，然后单击“重新加载”，或按*Ctrl* + *R*：
- en: '[PRE7]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'With the features that were accessed using `driver` in the preceding code,
    let''s continue loading, taking screenshots, and accessing cookies from [https://www.google.com](https://www.google.com) using
    the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 使用前面代码中的`driver`访问的功能，让我们继续加载、截图和访问[https://www.google.com](https://www.google.com)的cookies，使用以下代码：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The action performed with [http://google.com](http://google.com) will take
    place on the same browser window that was used for accessing [http://python.org](http://python.org).
    With this, we can now perform actions using the browser history (that is, we will
    use the Back and Forward buttons that are available in the web browser) and retrieve
    the URL, as shown in the following code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[http://google.com](http://google.com)执行的操作将在用于访问[http://python.org](http://python.org)的同一浏览器窗口上进行。有了这个，我们现在可以使用浏览器历史记录执行操作（即，我们将使用Web浏览器中可用的“返回”和“前进”按钮），并检索URL，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In the preceding code, `back()` takes the browser back a page, whereas `forward()` moves
    it a step forward along the browser history. The output received is as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，`back()`将浏览器返回到上一页，而`forward()`将其沿着浏览器历史向前移动一步。收到的输出如下：
- en: '[PRE10]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Following successful execution of the code, it is recommended that you close
    and quit the driver to free up system resources. We can perform the termination
    actions using the following functions:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功执行代码后，建议您关闭并退出驱动程序以释放系统资源。我们可以使用以下功能执行终止操作：
- en: '[PRE11]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The preceding code contains the following two phrases:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码包含以下两个短语：
- en: '`close()` terminates the loaded browser window'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`close()`终止加载的浏览器窗口'
- en: '`quit()` ends the WebDriver application'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quit()`结束WebDriver应用程序'
- en: 'The complete code we have executed so far in this particular section is as
    follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本节中我们执行的完整代码如下：
- en: '[PRE12]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The preceding code demonstrates the use of `selenium.webdriver` and its various
    properties. In the next section, we will demonstrate the use of `webdriver` and
    web elements (elements from the web page).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码演示了`selenium.webdriver`及其各种属性的使用。在下一节中，我们将演示`webdriver`和网页元素（网页中的元素）的使用。
- en: Locating web elements
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定位网页元素
- en: In this section, we will perform a search on [http://automationpractice.com](http://automationpractice.com) to
    obtain a list of products that match the search query, illustrating the use of
    `selenium.webdriver`. Web elements are elements that are listed in a web page
    or that are found in a page source. We also look at a class called `WebElement`,
    used as `selenium.webdriver.remote.webelement.WebElement`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将在[http://automationpractice.com](http://automationpractice.com)上进行搜索，以获取与搜索查询匹配的产品列表，演示`selenium.webdriver`的使用。网页元素是列在网页上或在页面源中找到的元素。我们还看一下一个名为`WebElement`的类，它被用作`selenium.webdriver.remote.webelement.WebElement`。
- en: The automation practice website ([http://automationpractice.com/](http://automationpractice.com/))
    is a sample e-commerce website from [http://www.seleniumframework.com](http://www.seleniumframework.com) that
    you can use for practice.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 自动化实践网站（[http://automationpractice.com/](http://automationpractice.com/)）是来自[http://www.seleniumframework.com](http://www.seleniumframework.com)的一个示例电子商务网站，您可以用来练习。
- en: 'To begin with, let''s import `webdriver` from `selenium`, set a path to `chromedriver.exe`,
    create an object of `webdriver`—that is, `driver`, as implemented in the previous
    section, *Accessing browser properties*—andload the URL, [http://automationpractice.com](http://automationpractice.com):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们从`selenium`中导入`webdriver`，设置`chromedriver.exe`的路径，创建`webdriver`的对象——也就是在前一节*访问浏览器属性*中实现的`driver`，并加载URL，[http://automationpractice.com](http://automationpractice.com)：
- en: '[PRE13]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The new Google Chrome window will be loaded with the URL provided. Find the
    search (input) box just above Cart, as shown in the following screenshot:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 新的Google Chrome窗口将加载提供的URL。如下图所示，找到位于购物车上方的搜索（输入）框：
- en: '![](assets/43ae769c-80e3-431a-807d-2097da75cebd.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/43ae769c-80e3-431a-807d-2097da75cebd.png)'
- en: Inspecting elements (search box) from http://automationpractice.com
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从http://automationpractice.com检查元素（搜索框）
- en: To continue searching through the script, we need to identify the element with
    the HTML `<input>`. Please refer to the *Using web browser developer tools for
    accessing web content *section in [Chapter 3,](9e1ad029-726f-4ed3-897a-c68bcd61f71e.xhtml) *Using
    LXML, XPath, and CSS Selectors*.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 要继续通过脚本搜索，我们需要识别具有HTML `<input>`的元素。请参阅[第3章](9e1ad029-726f-4ed3-897a-c68bcd61f71e.xhtml)中的*使用Web浏览器开发者工具访问Web内容*部分，*使用LXML、XPath和CSS选择器*。
- en: 'In our case, the search box can be identified by the attributes shown in the
    preceding screenshot, or even by using the XPath or CSS selectors:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，搜索框可以通过前面截图中显示的属性来识别，甚至可以使用XPath或CSS选择器：
- en: '`id="search_query_top"`'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id="search_query_top"`'
- en: '`name="search_query"`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name="search_query"`'
- en: '`class="search_query" `'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class="search_query"`'
- en: The `selenium.webdriver` provides lots of locators (methods that are used to
    locate elements) that can be applied conveniently as applicable to the cases encountered.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`selenium.webdriver`提供了许多定位器（用于定位元素的方法），可以方便地应用于遇到的情况。'
- en: 'Locators return single, multiple, or lists of WebElement instances, written
    as `selenium.webdriver.remote.webelement.WebElement`*.* The following are a few
    locators, along with a brief description:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 定位器返回单个、多个或WebElement实例的列表，写作`selenium.webdriver.remote.webelement.WebElement`。以下是一些定位器以及简要描述：
- en: '`find_element_by_id()`: This finds an element by its `id `attribute. This method
    returns a single WebElement*.*'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_id()`: 通过其`id`属性来查找元素。此方法返回单个WebElement。'
- en: '`find_element_by_name()`: This finds a single element by its `name` attribute.
    Multiple WebElements can be found or located using `find_elements_by_name()`*.*'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_name()`: 通过其`name`属性来查找单个元素。可以使用`find_elements_by_name()`来找到或定位多个WebElement。'
- en: '`find_element_by_tag_name()`: This finds a single element by the name of its
    HTML tag. Multiple WebElements can be located using `find_elements_by_tag_name()`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_tag_name()`: 通过其HTML标签的名称来查找单个元素。可以使用`find_elements_by_tag_name()`来定位多个WebElement。'
- en: '`find_element_by_class_name()`: This finds a single element by its class attribute.
    Multiple WebElements can be located using `find_elements_by_class_name()`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_class_name()`: 通过其`class`属性来查找单个元素。可以使用`find_elements_by_class_name()`来定位多个WebElement。'
- en: '`find_element_by_link_text()`: This finds a single element by a link identified
    by the link text. Multiple WebElements can be located using `find_elements_by_link_text()`*. *'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_link_text()`: 通过链接文本标识的链接来查找单个元素。可以使用`find_elements_by_link_text()`来定位多个WebElement。'
- en: '`find_element_by_partial_link_text()`:This finds a single element by a link
    identified by the partial text the element is carrying. Multiple WebElements can
    be located using `find_elements_by_partial_link_text()`.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_partial_link_text()`: 通过元素携带的部分文本来查找单个元素的链接。可以使用`find_elements_by_partial_link_text()`来定位多个WebElement。'
- en: '`find_element_by_xpath()`:This finds a single element by providing an XPath
    expression. Multiple WebElements can be located using `find_elements_by_xpath()`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_xpath()`: 通过提供XPath表达式来查找单个元素。可以使用`find_elements_by_xpath()`来定位多个WebElement。'
- en: '`find_element_by_css_selector()`: This finds a single element by providing
    CSS selectors. Multiple WebElements can be located using`find_elements_by_css_selector()`.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`find_element_by_css_selector()`: 通过提供CSS选择器来查找单个元素。可以使用`find_elements_by_css_selector()`来定位多个WebElement。'
- en: 'Now, let''s find the input box using `find_element_by_id()`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用`find_element_by_id()`来找到输入框：
- en: '[PRE14]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As you can see in the preceding code, `searchBox` can be located using any convenient
    locators that are provided with their respective arguments.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，`searchBox`可以使用任何方便的定位器来定位，这些定位器都提供了它们各自的参数。
- en: 'The WebElement that is obtained can be accessed for the following properties
    and general methods, as well as many more:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 获得的WebElement可以访问以下属性和一般方法，以及许多其他方法：
- en: '`get_attribute()`: This returns the attribute value for the key argument provided,
    such as `value`, `id`, `name`, and `class`.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_attribute()`: 返回提供的键参数的属性值，例如`value`、`id`、`name`和`class`。'
- en: '`tag_name`: This returns the HTML tag name of a particular WebElement.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tag_name`: 返回特定WebElement的HTML标签名称。'
- en: '`text`: This returns the text of the WebElement.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`text`: 返回WebElement的文本。'
- en: '`clear()`: This clears the text of HTML form elements.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`clear()`: 这会清除HTML表单元素的文本。'
- en: '`send_keys()`: This is used to fill with text and provide the key effect, such
    as pressing `ENTER`, `BACKSPACE`, and  `DELETE`, available from the `selenium.webdriver.common.keys` module in
    `selenium.webdriver.common` to the HTML form elements.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`send_keys()`: 用于填充文本并提供键效果，例如按下`ENTER`、`BACKSPACE`和`DELETE`，可从`selenium.webdriver.common`模块中的`selenium.webdriver.common.keys`模块中获得，应用于HTML表单元素。'
- en: '`click()`: This performs the clicking action to the WebElement. This is used
    for HTML elements such as Submit Button.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`click()`: 执行单击操作到WebElement。用于HTML元素，如提交按钮。'
- en: 'In the following code, we will be using the functions and properties listed
    previously in `searchBox`:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的代码中，我们将使用前面列出的`searchBox`中的函数和属性：
- en: '[PRE15]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Let''s clear the text inside `searchBox` and input the text `Dress` to be searched.
    We also need to submit the button located on the right-hand side of the `searchBox`
    and click it to execute the search using the WebElement method, `click()`:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们清除`searchBox`内的文本并输入要搜索的文本`Dress`。我们还需要提交位于`searchBox`右侧的按钮，并点击它以使用WebElement方法`click()`执行搜索：
- en: '[PRE16]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The browser will process the search action for the submitted text `Dress` and
    load the results page.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器将处理提交的文本`Dress`的搜索操作并加载结果页面。
- en: 'Now that the search action is complete, to verify the successful search, we
    will extract information regarding the product numbers and count using the following
    code:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在搜索操作完成，为了验证成功的搜索，我们将使用以下代码提取有关产品数量和计数的信息：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'With the number of items and the count of the products that were found, this
    conveys a successful message to our search process. Now, we can proceed with looking
    for products using XPath, CSS selectors, and so on:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过找到的项目数量和产品数量，这传达了我们搜索过程的成功信息。现在，我们可以继续使用XPath、CSS选择器等查找产品：
- en: '[PRE18]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: From the preceding code,  `products` obtained is iterated and an individual
    item is added to the Python list `foundProducts`. `product` is an object of WebElement,
    in other words, `selenium.webdriver.remote.webelement.WebElement`*,*  while properties
    are collected using `text` and `get_attribute()`*:*
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，对获得的`products`进行迭代，并将单个项目添加到Python列表`foundProducts`中。`product`是WebElement对象，换句话说，是`selenium.webdriver.remote.webelement.WebElement`，而属性是使用`text`和`get_attribute()`收集的：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In this section, we explored the various properties and methods from `selenium.webdriver`
    that are used to deal with the browser, use HTML forms, read page content, and
    so on. Please visit [https://selenium-python.readthedocs.io](https://selenium-python.readthedocs.io)
    for more detailed information on Python Selenium and its modules. In the next
    section, we will use most of the methodologies that were used in the current section
    to scrape information from a web page.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探索了`selenium.webdriver`中用于处理浏览器、使用HTML表单、读取页面内容等的各种属性和方法。请访问[https://selenium-python.readthedocs.io](https://selenium-python.readthedocs.io)了解有关Python
    Selenium及其模块的更详细信息。在下一节中，我们将使用本节中使用的大部分方法来从网页中抓取信息。
- en: Using Selenium for web scraping
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Selenium进行网页抓取
- en: Selenium is used to test web applications. It is mostly used to perform browser
    automation using various programming language-based libraries and browser drivers.
    As we saw in a previous section, *Exploring Selenium*, we can navigate and locate
    elements in a page using Selenium and perform crawling and scraping-related activities.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium用于测试Web应用程序。它主要用于使用各种基于编程语言的库和浏览器驱动程序执行浏览器自动化。正如我们在前面的*探索Selenium*部分中看到的，我们可以使用Selenium导航和定位页面中的元素，并执行爬取和抓取相关的活动。
- en: Let's look at a few examples of scraping contents from web pages using Selenium.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些使用Selenium从网页中抓取内容的示例。
- en: Example 1 – scraping product information
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例1 - 抓取产品信息
- en: In this example, we will continue using the search results obtained from `foundProducts` in
    the *Exploring Selenium* section.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将继续使用*探索Selenium*部分获得的`foundProducts`的搜索结果。
- en: 'We will extract some specific information from each individual product link
    found in `foundProducts`, listed as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`foundProducts`中找到的每个单独的产品链接中提取一些特定信息，列举如下：
- en: '`product_name` *:* Product name'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product_name`：产品名称'
- en: '`product_price`*:* Listed price'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product_price`：列出的价格'
- en: '`image_url`: URL of product''s main image'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_url`：产品主要图片的URL'
- en: '`item_condition`*:* Condition of product'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`item_condition`：产品的状态'
- en: '`product_description`*:* Short description of product'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`product_description`：产品的简短描述'
- en: 'Each individual product link from `foundProducts` is loaded using `driver.get()`:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`driver.get()`加载`foundProducts`中的每个单独的产品链接：
- en: '[PRE20]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Targeted fields or information to be extracted are obtained using XPath, and
    are appended to the `dataSet`*. *Please refer to the *Using web browser developer
    tools for accessing web content *section in [Chapter 3,](https://cdp.packtpub.com/hands_on_web_scraping_with_python/wp-admin/post.php?post=31&action=edit#post_26) *Using
    LXML, XPath, and CSS Selectors*.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XPath获取要提取的目标字段或信息，并将其附加到`dataSet`。请参考[第3章](https://cdp.packtpub.com/hands_on_web_scraping_with_python/wp-admin/post.php?post=31&action=edit#post_26)中的*使用Web浏览器开发者工具访问Web内容*部分，*使用LXML、XPath和CSS选择器*。
- en: 'The output from `dataSet` is obtained as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 从`dataSet`中获取的输出如下：
- en: '[PRE21]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, system resources are kept free using `close()` and `quit()`. The complete
    code for this example is listed as follows:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用`close()`和`quit()`保持系统资源空闲。此示例的完整代码如下：
- en: '[PRE22]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In this example, we performed HTML `<form>`- based action and extracted the
    required details from each individual page. Form processing is one of the major
    tasks performed during the testing of a web application.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们执行了基于HTML `<form>`的操作，并从每个单独的页面中提取所需的细节。表单处理是在测试Web应用程序期间执行的主要任务之一。
- en: Example 2 – scraping book information
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 示例2 - 抓取书籍信息
- en: In this example, we will automate the browser to process the category and pagination
    link from the main URL provided. We are interested in extracting details from the Food
    and Drink category across multiple pages from [http://books.toscrape.com/index.html](http://books.toscrape.com/index.html).
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将自动化浏览器来处理主URL提供的类别和分页链接。我们有兴趣从[http://books.toscrape.com/index.html](http://books.toscrape.com/index.html)跨多个页面提取*食品和饮料*类别的详细信息。
- en: 'An individual page from the category contains listings of products (Books),
    with certain information listed as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 类别中的单个页面包含产品（书籍）的列表，其中包含以下某些信息：
- en: '`title`: Title of the book listed'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`：书籍的标题'
- en: '`titleLarge`:Title of the book listed (complete title, found as a value to
    the `title ` attribute)'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`titleLarge`：列出的书籍标题（完整标题，作为`title`属性的值找到）'
- en: '`price`: Listed book price'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`price`：列出的书籍价格'
- en: '`stock`: Stock information relating to the listed book'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`stock`：与列出的书籍相关的库存信息'
- en: '`image`: URL of book image'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：书籍图片的URL'
- en: '`starRating`: Rating (number of stars found)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`starRating`：评级（找到的星星数量）'
- en: '`url`: URL of each listed book.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`：列出每本书的URL。'
- en: A similar example was also shown in [Chapter 3,](https://cdp.packtpub.com/hands_on_web_scraping_with_python/wp-admin/post.php?post=31&action=edit#post_26) *Using
    LXML, XPath and CSS Selectors* in the section named *Web Scraping Using LXML*,
    under the name *Example 2 – Looping with XPath and scraping data from multiple
    pages*. There, we used the Python library `lxml`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3章中还展示了一个类似的例子，*使用LXML、XPath和CSS选择器*中的*使用LXML进行网页抓取*部分，名称为*示例2 - 使用XPath循环并从多个页面抓取数据*。在那里，我们使用了Python库`lxml`。
- en: With `selenium.webdriver` imported and the Chrome driver path set up, let's
    start loading [http://books.toscrape.com/index.html](http://books.toscrape.com/index.html).
    As the main page gets loaded, we will see various categories appear, listed one
    below the other.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`selenium.webdriver`并设置Chrome驱动程序路径后，让我们开始加载[http://books.toscrape.com/index.html](http://books.toscrape.com/index.html)。当主页面加载时，我们将看到各种类别依次列出。
- en: 'The targeted category contains the text Food and Drink, and can be found using `find_element_by_link_text()` (we
    can use any applicable `find_element...` methods to find the particular category). The
    element found is processed further with `click()`—clicking on the element returned.
    This action will load the particular category URL in the browser:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 目标类别包含文本“食品和饮料”，可以使用`find_element_by_link_text()`找到（我们可以使用任何适用的`find_element...`方法来找到特定类别）。找到的元素进一步使用`click()`进行处理
    - 即点击返回的元素。此操作将在浏览器中加载特定类别的URL：
- en: '[PRE23]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To deal with multiple pages that are found during iteration, `NoSuchElementException`
    from `selenium.common.exceptions` will be imported:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理在迭代过程中找到的多个页面，将从`selenium.common.exceptions`导入`NoSuchElementException`：
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: As we will be using the pagination button next, `NoSuchElementException` will
    be helpful in dealing with the condition if no further next or pages are found.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将使用分页按钮next，`NoSuchElementException`将有助于处理如果没有找到进一步的next或页面的情况。
- en: 'As seen in the following code, the pagination option next is located in the
    page and processed with the `click() `action. This action will load the URL it
    contains to the browser, and the iteration will continue until next is not located
    or found in the page, caught by the `except` block in the code:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 如下代码所示，分页选项next位于页面中，并使用`click()`操作进行处理。此操作将加载它包含的URL到浏览器中，并且迭代将继续直到在页面中找不到或找到next，被代码中的`except`块捕获：
- en: '[PRE25]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The complete code for this example is listed as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例的完整代码如下所示：
- en: '[PRE26]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Finally, upon completion of the iteration, `dataSet` will contain the listing
    data for all pages, as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在迭代完成后，`dataSet`将包含所有页面的列表数据，如下所示：
- en: '[PRE27]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In this section, we explored the methods and properties from `selenium.webdriver`
    and implemented them for web scraping activity.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探索了来自`selenium.webdriver`的方法和属性，并将其用于网页抓取活动。
- en: Summary
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about Selenium and using the Python library for
    Selenium to perform browser automation, the scraping of web content, browser-based
    activities, and HTML `<form>` processing. Selenium can be used to process multiple
    activities, and it's one of the major advantages that Selenium holds over Python-dedicated
    libraries, such as `lxml`, `pyquery`, `bs4`, and `scrapy`.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了关于Selenium以及使用Python库进行浏览器自动化、网页内容抓取、基于浏览器的活动和HTML `<form>` 处理。 Selenium可以用于处理多种活动，这是Selenium相对于Python专用库（如`lxml`、`pyquery`、`bs4`和`scrapy`）的主要优势之一。
- en: In the next chapter, we will learn more about web-scraping techniques using
    regular expressions.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习更多关于使用正则表达式进行网页抓取的技术。
- en: Further reading
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '**SeleniumHQ: ** [https://www.seleniumhq.org/](https://www.seleniumhq.org/)'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SeleniumHQ: [https://www.seleniumhq.org/](https://www.seleniumhq.org/)
- en: '**Selenium with Python: **[https://selenium-python.readthedocs.io/](https://selenium-python.readthedocs.io/)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Selenium with Python: [https://selenium-python.readthedocs.io/](https://selenium-python.readthedocs.io/)
- en: '**Python Selenium:** [http://pypi.python.org/pypi/selenium](http://pypi.python.org/pypi/selenium)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python Selenium: [http://pypi.python.org/pypi/selenium](http://pypi.python.org/pypi/selenium)
