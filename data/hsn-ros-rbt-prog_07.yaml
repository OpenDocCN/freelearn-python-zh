- en: Simulating Robot Behavior with Gazebo
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Gazebo 模拟机器人行为
- en: This chapter deals with the dynamic simulation of a robot, which, conceptually,
    is a better approach to examining the actual behavior of the robot rather than
    just using software. Rigid body mechanics, including mass and inertia, friction,
    damping, motor controllers, sensor detection properties, noise signals, and every
    aspect of the robot and the environment that can be retained in a model with reasonable
    accuracy is much less expensive when replicated in a simulator than if you tried
    to do this with physical hardware.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章处理机器人的动态模拟，从概念上讲，这是检查机器人实际行为的一种更好的方法，而不是仅仅使用软件。当在模拟器中复制时，与尝试使用物理硬件实现相比，刚体力学（包括质量、惯性）、摩擦、阻尼、电机控制器、传感器检测特性、噪声信号以及模型中可以以合理精度保留的机器人和环境的各个方面都要便宜得多。
- en: By reading this chapter, you will learn how to plug the digital definition of
    your robot (the URDF file) into the simulation environment of **Gazebo**, which
    is powered with a physics engine that's able to emulate realistic behaviors. You
    will also extend your training by checking and testing the digital robot so that
    its behavior represents what should happen in the physical world.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本章，你将学习如何将你的机器人（URDF 文件）的数字定义插入到由物理引擎驱动的 **Gazebo** 模拟环境中，该引擎能够模拟真实行为。你还将通过检查和测试数字机器人来扩展你的训练，使其行为代表物理世界应该发生的情况。
- en: To achieve ROS integration with Gazebo, a set of ROS packages grouped under
    `gazebo_ros_pkgs` ([http://wiki.ros.org/gazebo_ros_pkgs](http://wiki.ros.org/gazebo_ros_pkgs))
    provides the required wrappers. These packages provide the interfaces that are
    used to simulate a robot in Gazebo using ROS messages, services, and reconfigurable
    ROS parameters.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现 ROS 与 Gazebo 的集成，一组名为 `gazebo_ros_pkgs` 的 ROS 软件包（[http://wiki.ros.org/gazebo_ros_pkgs](http://wiki.ros.org/gazebo_ros_pkgs)）提供了所需的包装器。这些软件包提供了用于在
    Gazebo 中使用 ROS 消息、服务和可重新配置的 ROS 参数来模拟机器人的接口。
- en: By following a guided path, you will become familiar with the ROS simulation
    environment of Gazebo. Specifically, you will learn how to prepare the model of
    a robot in order to simulate realistic behavior with the Gazebo physics engine.
    Finally, you will simulate the maximum weight that GoPiGo3 can carry and compare
    this with the real world.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循引导路径，你将熟悉 Gazebo 的 ROS 模拟环境。具体来说，你将学习如何准备机器人的模型，以便使用 Gazebo 物理引擎模拟真实行为。最后，你将模拟
    GoPiGo3 可以携带的最大重量，并将其与现实世界进行比较。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Getting started with the Gazebo simulator
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 Gazebo 模拟器
- en: Making modifications to the robot URDF
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对机器人 URDF 进行修改
- en: Verifying a Gazebo model and viewing the URDF
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证 Gazebo 模型并查看 URDF
- en: Moving your model around
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动你的模型
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files for this chapter can be found at [https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter5_Gazebo_basics](https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter5_Gazebo_basics).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在以下位置找到：[https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter5_Gazebo_basics](https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming/tree/master/Chapter5_Gazebo_basics)。
- en: 'By completing the previous chapter, you should have cloned this book''s code
    repository into the home folder of your laptop. In case you didn''t, we''ll go
    over this now. From a Terminal on your laptop, clone the repository into your
    home folder, like so:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 通过完成上一章，你应该已经将本书的代码仓库克隆到你的笔记本电脑的主文件夹中。如果你没有这样做，我们现在会讲解这个过程。在你的笔记本电脑的终端中，将仓库克隆到你的主文件夹，如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, we copy the code for this chapter to the ROS workspace. This way, you
    will have a cleaner ROS environment:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将本章的代码复制到 ROS 工作空间。这样，你将拥有一个更干净的 ROS 环境：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This chapter contains a new ROS package called `gazebo_basics`, so rebuild
    the workspace so that it is known to your ROS environment:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含一个名为 `gazebo_basics` 的新 ROS 软件包，因此请重新构建工作空间，以便 ROS 环境能够识别：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Check that the package is correctly installed by selecting it and listing its
    files:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择该软件包并列出其文件来检查软件包是否正确安装：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The output of the `pwd` command shows the location, as expected. Now, you are
    ready to complete this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`pwd` 命令的输出显示了预期的位置。现在，你已准备好完成本章。'
- en: Getting started with the Gazebo simulator
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 Gazebo 模拟器
- en: 'Let''s go through a quick tour so that you have a clear understanding of what
    you can expect when implementing a dynamic simulation for GoPiGo3. Gazebo is an
    open source 3D robotics simulator and includes an ODE physics engine and OpenGL rendering,
    and supports code integration for closed-loop control in robot drives—that is,
    sensor simulation and actuator control. There are two new concepts within this
    definition. Let''s explain each one:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们快速浏览一下，以便你对实现GoPiGo3动态模拟时可以期待的内容有一个清晰的理解。Gazebo是一个开源的3D机器人仿真器，包括一个ODE物理引擎和OpenGL渲染，并支持在机器人驱动中的闭环控制代码集成——即传感器模拟和执行器控制。在这个定义中有两个新概念。让我们分别解释一下：
- en: '**Open Dynamics Engine** (**ODE**), a physics engine written in C/C++ that
    includes two main components: rigid-body dynamics simulation and collision detection
    ([https://www.ode.org/](https://www.ode.org/)).'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Open Dynamics Engine**（**ODE**），一个用C/C++编写的物理引擎，包括两个主要组件：刚体动力学模拟和碰撞检测（[https://www.ode.org/](https://www.ode.org/))。'
- en: '**Open Graphics Library** (**OpenGL**), which is both a cross-language and cross-platform
    API for rendering 2D and 3D vector graphics. This API is typically used to interact
    with a GPU in order to achieve hardware-accelerated rendering. It is a specification
    that sets a standard for how the GPU of a PC has to display graphics on the screen
    by rendering 2D and 3D vector graphics. Being a specification, it is cross-platform
    by nature, and every manufacturer can make a different implementation with it
    (GPU driver). The point of this is that the functionality it provides has to be
    as it''s specified in the standard so that we can say that the driver is OpenGL
    compliant.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Open Graphics Library**（**OpenGL**），这是一个跨语言和跨平台的API，用于渲染2D和3D矢量图形。这个API通常用于与GPU交互，以实现硬件加速渲染。这是一个规范，它规定了PC的GPU如何通过渲染2D和3D矢量图形来在屏幕上显示图形。作为一个规范，它本质上具有跨平台性，每个制造商都可以使用它（GPU驱动程序）实现不同的实现。这个问题的关键在于它提供的功能必须符合标准中指定的功能，这样我们才能说该驱动程序是OpenGL兼容的。'
- en: 'Follow these steps to get started with Gazebo:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤开始使用Gazebo：
- en: 'Test the Gazebo installation by launching it with a premade environment:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过启动预制的环境来测试Gazebo的安装：
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `gazebo_ros` package is a ROS package that resides in the `/opt/ros/kinetic/share/` system
    folder. It comes with the installation of `ros-kinetic-desktop-full` (or `ros-melodic-desktop-full`,
    if you are in Ubuntu 18.04) that was detailed in [Chapter 3](f3ecc0de-28c4-4140-9a9c-ed351c68d121.xhtml), *Getting
    Started with ROS*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`gazebo_ros`包是一个位于`/opt/ros/kinetic/share/`系统文件夹中的ROS包。它随`ros-kinetic-desktop-full`（或如果你在Ubuntu
    18.04上，则为`ros-melodic-desktop-full`）的安装而来，这在[第3章](f3ecc0de-28c4-4140-9a9c-ed351c68d121.xhtml)，*ROS入门*中已有详细说明。'
- en: If you don't want to run a full installation of ROS, you can install the packages
    individually. In the case of Gazebo, the installation command is `$ sudo apt-get
    install ros-kinetic-gazebo-ros-pkgs ros-kinetic-gazebo-ros-control` if you're
    on Ubuntu 16.04 or `$ sudo apt-get install ros-melodic-gazebo-ros-pkgs ros-melodic-gazebo-ros-control` if
    you're on Ubuntu 18.04.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不想运行完整的ROS安装，你可以单独安装包。对于Gazebo，如果你使用的是Ubuntu 16.04，安装命令是`$ sudo apt-get install
    ros-kinetic-gazebo-ros-pkgs ros-kinetic-gazebo-ros-control`；如果你使用的是Ubuntu 18.04，安装命令是`$
    sudo apt-get install ros-melodic-gazebo-ros-pkgs ros-melodic-gazebo-ros-control`。
- en: 'Apart from `empty_world.launch`, you have additional world launch files available
    whose names can be found by using the following command, which lists the files
    inside the launch folder of the `gazebo_ros` package:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`empty_world.launch`之外，你还有其他可用的世界启动文件，其名称可以通过以下命令找到，该命令列出了`gazebo_ros`包的启动文件夹内的文件：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `&&` symbol is commonly used in bash to run two commands in the same line.
    They are executed in the same order that they''re written in. The output is as
    follows:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`&&`符号在bash中常用以在同一行运行两个命令。它们的执行顺序与它们书写的顺序相同。输出如下：'
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Launch `mud_world.launch` and be patient; it will take a few seconds to render
    since it contains mobile parts:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动`mud_world.launch`并耐心等待；由于它包含移动部件，渲染可能需要几秒钟：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The following screenshot shows the output of the preceding commands:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的截图显示了前面命令的输出：
- en: '![](img/31387efb-cd6c-46ae-820f-7383ac6498a6.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/31387efb-cd6c-46ae-820f-7383ac6498a6.png)'
- en: 'Using the mouse, you can move and rotate the world to change the perspective:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 使用鼠标，你可以移动和旋转世界以改变视角：
- en: Hold down the left button of the mouse when the Gazebo window is active. Moving
    the mouse will cause the world to move on the screen.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当Gazebo窗口处于活动状态时，按住鼠标左键。移动鼠标会导致世界在屏幕上移动。
- en: Hold down the central wheel button and move the mouse to turn the world. The
    point of rotation will be the one that the mouse pointer was in when you first
    pressed the wheel.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按住鼠标中间的滚轮按钮，并移动鼠标来旋转世界。旋转点将是您第一次按下滚轮时鼠标指针所在的位置。
- en: Hold down the right button of the mouse. By moving the mouse forward and backward,
    you will get to zoom in and zoom out, respectively.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按住鼠标的右键。通过前后移动鼠标，您可以分别实现放大和缩小。
- en: To stop Gazebo, you have to press *Ctrl* + *C* in the Terminal where you executed
    the command. It can take several seconds to stop this process. Be aware that closing
    the Gazebo window is not enough to end the simulation process.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止Gazebo，您必须在执行命令的终端中按*Ctrl* + *C*。这个过程可能需要几秒钟。请注意，关闭Gazebo窗口不足以结束模拟过程。
- en: 'A more complex version is `willowgarage_world`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更复杂的版本是`willowgarage_world`：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'This looks as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来如下所示：
- en: '![](img/84ecfade-282a-4c06-a53d-6e1fcff9c75f.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84ecfade-282a-4c06-a53d-6e1fcff9c75f.png)'
- en: 'As a brief insight into Gazebo, we are going to identify the panels in the
    user GUI—as depicted in the following screenshot—that you can reproduce with this
    command:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对Gazebo的简要了解，我们将识别用户GUI中的面板——如以下截图所示——您可以使用此命令进行复制：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'For this to work, you need to have copied the files in this chapter''s repository,
    as we explained in the *Technical requirements* section:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使这生效，您需要复制本章仓库中的文件，如我们在*技术要求*部分中解释的那样：
- en: '![](img/b075bd5b-6ff3-4f40-b725-9d05f0581ebf.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/b075bd5b-6ff3-4f40-b725-9d05f0581ebf.png)'
- en: 'Let''s have a look at the different fields that are available on the panel
    in the preceding screenshot in detail:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细看看前一张截图中的面板上可用的不同字段：
- en: '**Environment toolbar**: There are icons that you can use to change between
    different modes: selection, translation of an object/robot, rotation of the object,
    and scale (limited to simple shapes). There are also icons that you can use to
    create simple shapes, provide lighting characteristics, and change the perspective.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境工具栏**：有一些图标，您可以使用它们在以下不同模式之间切换：选择、对象/机器人的平移、对象的旋转和缩放（限于简单形状）。还有一些图标，您可以使用它们创建简单形状、提供照明特性以及改变视角。'
- en: '**World panel**: This provides us with access to all of the environment elements:
    Scene, Physics, Models, and Lights.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**世界面板**：这为我们提供了访问所有环境元素的方式：场景、物理、模型和灯光。'
- en: '**Joints panel**: This provides us with access to the locations that you can
    pick models up from. The first is `/home/<username>/.gazebo/models`, which is
    the user''s repository of Gazebo models that have been selected from the main
    Gazebo repository. This repository is the second option and is available at [http://models.gazebosim.org](http://models.gazebosim.org).'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关节面板**：这为我们提供了访问可以拾取模型的地点。第一个是`/home/<username>/.gazebo/models`，这是用户从主Gazebo仓库中选择的Gazebo模型的仓库。这个仓库是第二个选项，可在[http://models.gazebosim.org](http://models.gazebosim.org)找到。'
- en: '**Main window menu bar**: This provides options under the basic File, Edit,
    View, Window, and Help headings.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主窗口菜单栏**：这提供了在基本文件、编辑、查看、窗口和帮助标题下的选项。'
- en: '**Simulation panel**: Located at the bottom of the environment display, it
    is a handy tool that''s used to run simulation scripts and provide real-time information
    when recording or playing back a simulation.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模拟面板**：位于环境显示的底部，这是一个方便的工具，用于运行模拟脚本并提供在录制或回放模拟时的实时信息。'
- en: Now that we have understood how the Gazebo simulator works, let's make some
    modifications to the robot URDF.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了Gazebo模拟器的工作原理，让我们对机器人URDF进行一些修改。
- en: Making modifications to the robot URDF
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 修改机器人URDF
- en: 'URDF, as we explained in the previous chapter, stands for Unified Robot Description
    Format and has an XML-compliant syntax to simulate the visual properties of a
    robot. This format, fitting the scope it was conceived for, does not model some
    of the characteristics that are needed for a dynamic simulation. More precisely,
    it cannot specify the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在上一章中解释的，URDF代表统一机器人描述格式，具有符合XML语法的语法，用于模拟机器人的视觉属性。这个格式，符合其构思的范围，不模拟一些动态模拟所需的特性。更确切地说，它不能指定以下内容：
- en: The pose of the robot itself within a world.
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人在世界中的姿态。
- en: Joint loops (parallel linkages).
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关节环（平行连杆）。
- en: Friction and other properties.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 摩擦和其他属性。
- en: Things that are not robots, such as lights, height maps, and so on.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 非机器人事物，如灯光、高度图等。
- en: For such reasons, an evolved XML format called **Simulation Description Format** (**SDF**)
    started its development as part of the Gazebo robot simulator. SDF allows us to
    describe objects to the environments for robot simulators, visualization, and
    control. Over the years, SDF has become a stable, robust, and extensible format
    that's capable of describing all aspects of robots.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这些原因，一种名为 **Simulation Description Format**（**SDF**）的进化 XML 格式开始作为 Gazebo
    机器人模拟器的一部分进行开发。SDF 允许我们描述机器人模拟器、可视化和控制环境中的对象。多年来，SDF 已经成为稳定、健壮且可扩展的格式，能够描述机器人的所有方面。
- en: Extending URDF to produce an SDF robot definition
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 URDF 以生成 SDF 机器人定义
- en: The way to arrive at an SDF specification for your robot is quite straightforward
    if you start from the URDF definition we saw in the previous chapter.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从上一章中看到的 URDF 定义开始，为您的机器人获得 SDF 规范的方式相当直接。
- en: Always have the SDF format specification at hand ([http://sdformat.org/spec](http://sdformat.org/spec))
    since it offers an interactive tree so that you can navigate through all the tags,
    allowing you to understand the purpose of each one and how it relates to others.
    The open source code repository is located at [https://bitbucket.org/osrf/sdformat](https://bitbucket.org/osrf/sdformat).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 总是随身携带 SDF 格式规范（[http://sdformat.org/spec](http://sdformat.org/spec)），因为它提供了一个交互式树，您可以导航到所有标签，从而了解每个标签的目的以及它如何与其他标签相关。开源代码仓库位于
    [https://bitbucket.org/osrf/sdformat](https://bitbucket.org/osrf/sdformat)。
- en: 'To show that SDF extends and does not break URDF specification, here are some
    simple guidelines that allow you to convert your URDF model into a Gazebo-ready
    SDF description:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明 SDF 扩展而不破坏 URDF 规范，以下是一些简单的指南，允许您将您的 URDF 模型转换为 Gazebo 准备好的 SDF 描述：
- en: The minimum required adaptation is to include an `<inertia>` element within
    each `<link>` element. The goal of this new element is to include the mass and
    moment of inertia properties of all of the robot links, which is essential to
    carrying out a dynamic simulation. The rest of the adaptations that we'll list
    here are optional.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最基本的适应是每个 `<link>` 元素内包含一个 `<inertia>` 元素。这个新元素的目标是包含所有机器人连杆的质量和转动惯量属性，这对于进行动态模拟至关重要。我们在这里列出的其余适应都是可选的。
- en: Adding a `<gazebo>` element for every `<link>` provides the functionality of
    converting visual colors into Gazebo format and translating STL files into DAE
    files for better textures. Sensor plugins are placed inside this tag.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个 `<link>` 元素添加 `<gazebo>` 元素，可以提供将视觉颜色转换为 Gazebo 格式以及将 STL 文件转换为 DAE 文件以获得更好的纹理的功能。传感器插件放置在此标签内。
- en: Adding a `<gazebo>` element for every `<joint>` allows us to specify damping,
    friction, and spring stiffness, and also allows us to add actuator control plugins.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为每个 `<joint>` 元素添加 `<gazebo>` 元素，允许我们指定阻尼、摩擦和弹簧刚度，并允许我们添加执行器控制插件。
- en: Add a `<gazebo>` element for the `<robot>` element.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 `<robot>` 元素添加 `<gazebo>` 元素。
- en: Add a `<link name="world"/>` link if the robot should be rigidly attached to
    the `world`/`base_link`.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果机器人应该刚性连接到 `world`/`base_link`，请添加 `<link name="world"/>` 链接。
- en: You can find out more about this conversion by following the tutorial *Using
    a URDF in Gazebo* ([http://gazebosim.org/tutorials?tut=ros_urdf](http://gazebosim.org/tutorials?tut=ros_urdf)),
    along with the applied examples.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过遵循教程 *使用 URDF 在 Gazebo 中*（[http://gazebosim.org/tutorials?tut=ros_urdf](http://gazebosim.org/tutorials?tut=ros_urdf)）以及应用示例来了解更多关于这种转换的信息。
- en: The `<gazebo>` tag sets some default values that will be automatically included
    with your SDF description. This tag allows us to identify any elements that are
    found in SDF format that can't be found in URDF format. If a `<gazebo>` tag is
    used without a `reference=" "` property, it is assumed that the description inside
    refers to the whole robot model. The reference parameter usually refers to a specific
    robot link—that is, it defines its material.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`<gazebo>` 标签设置了一些默认值，这些值将自动包含在您的 SDF 描述中。此标签允许我们识别在 SDF 格式中找不到但在 URDF 格式中存在的任何元素。如果没有使用
    `reference=" "` 属性的 `<gazebo>` 标签，则假定描述内部指的是整个机器人模型。参考参数通常指的是特定的机器人连杆——即它定义了其材料。'
- en: Collisions and physical properties
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 碰撞和物理属性
- en: '**Collision** tags specify the volumes that need to be taken into account by
    the physics engine to detect interference/clearance between bodies. The visual
    tag from URDF is ignored for the purpose of this computation since it''s only
    used for visualization purposes. This means that, in general, you can decouple
    visible aspects of the robot (more detailed) from the envelope shapes that are
    used for computing interference (simpler shapes).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**碰撞** 标签指定了物理引擎需要考虑的体积，以检测物体之间的干涉/间隙。由于 URDF 中的视觉标签仅用于可视化目的，因此在此计算中忽略。这意味着，通常，你可以将机器人的可见部分（更详细）与用于计算干涉的包络形状（更简单的形状）解耦。'
- en: The **inertia** tag of a part specifies its mass and tensor of inertia (3 x
    3), along with all of its components (only six components are needed since the
    matrix is symmetrical).
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 部分的 **惯性** 标签指定了其质量和惯性张量（3 x 3），以及所有其组成部分（由于矩阵是对称的，只需要六个组成部分）。
- en: 'In the `gopigo.urdf` file under the `urdf` folder, you can find the blocks
    of XML for the `base_link` and caster (remember that the latter has been modeled
    as part of `base_link` as an acceptable simplification of the model). This first
    snippet corresponds to the `base_link` itself and specifies the collision and
    mass properties:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `urdf` 文件夹下的 `gopigo.urdf` 文件中，你可以找到 `base_link` 和 caster 的 XML 块（记住后者已被建模为
    `base_link` 的一部分，作为模型的可接受简化）。这个第一个片段对应于 `base_link` 本身，并指定了碰撞和质量属性：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This includes the frame origin and orientation (`<origin>` tag), the geometry
    of the element (`<geometry>`), the mass (`<mass`>), and the inertia tensor (`<inertia>`).
    The second part models the caster and closes the block with the `</link>` tag:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这包括框架原点和方向（`<origin>` 标签）、元素的几何形状（`<geometry>`）、质量（`<mass>`）和惯性张量（`<inertia>`）。第二部分建模了
    caster 并使用 `</link>` 标签关闭块：
- en: '[PRE11]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'These properties use the same tags we explained previously. For the right wheel,
    the following is the corresponding piece of code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性使用我们之前解释的相同标签。对于右轮，以下是对应的代码片段：
- en: '[PRE12]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: For the left wheel, the specification is exactly the same.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对于左轮，其规格完全相同。
- en: Gazebo tags
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Gazebo 标签
- en: 'As we mentioned previously, `<gazebo>` tags are used to specify the additional
    elements to URDF that are needed within the native Gazebo format, SDF. In the
    `gopigo.gazebo` file under the `URDF` folder, you can find the following blocks
    of code, which specify the material for each link:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，`<gazebo>` 标签用于指定在 Gazebo 的本地格式 SDF 中需要的 URDF 的附加元素。在 `URDF` 文件夹下的
    `gopigo.gazebo` 文件中，你可以找到以下代码块，指定了每个连接件的材质：
- en: 'The first is the robot body (`base_link`). This block specifies the color of
    the part, as well as its initial pose:'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是机器人本体（`base_link`）。此块指定了部件的颜色以及其初始姿态：
- en: '[PRE13]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next is the wheels. These blocks are only needed to specify the colors since
    the pose was defined in `base_link`:'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来是轮子。这些块只需要指定颜色，因为姿态已在 `base_link` 中定义：
- en: '[PRE14]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you plan to reuse this code or share it, it is recommended that you add
    the dependency to your `package.xml` file for the `gazebo_basics` package. The
    following statement should be added under the dependencies section of such a file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你计划重用此代码或分享它，建议你将依赖项添加到 `package.xml` 文件中的 `gazebo_basics` 包。以下语句应添加到此类文件的依赖项部分：
- en: '[PRE15]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This way, when building the ROS workspace, the requested dependencies will be
    taken into account, providing an output that permits the package to be executed
    when called from the runtime.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，在构建 ROS 工作空间时，会考虑所需的依赖项，从而提供一个允许在运行时调用时执行包的输出。
- en: Verifying a Gazebo model and viewing the URDF
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 验证 Gazebo 模型并查看 URDF
- en: 'Once the SDF definition has been completed in the `gopigo.urdf` file, you should
    perform some checks to ensure that the file can be read by Gazebo. To do so, navigate to
    the folder where the model resides:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在 `gopigo.urdf` 文件中完成 SDF 定义，你应该进行一些检查以确保文件可以被 Gazebo 读取。为此，导航到模型所在的文件夹：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `roscd` command is a very useful ROS command that's equivalent to the Linux
    `cd` command, but specifies the paths that are relative to a given package. It's
    also easier to use because all you have to do is provide the name of the package
    that you want to move to the Terminal. The first part, `gazebo_basics`, retrieves
    the absolute path of the package, as well as the second part of the folder or
    subfolder path you want to show. This ROS command, as well as other useful ones,
    will be covered in detail in the next chapter, under the *Shell commands* subsection.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`roscd` 命令是一个非常有用的 ROS 命令，它与 Linux 的 `cd` 命令等效，但指定了相对于给定包的路径。它也更易于使用，因为你只需要提供你想要移动到终端的包的名称。第一部分
    `gazebo_basics` 获取包的绝对路径，以及你想要显示的文件夹或子文件夹路径的第二部分。这个 ROS 命令，以及其他有用的命令，将在下一章的 *Shell
    命令* 子节中详细说明。'
- en: 'Use the following two commands to print and check the model, respectively:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下两个命令分别打印和检查模型：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The first command prints the XML file in the Terminal window so that you can
    inspect it. The second checks the syntax of such a file. Alternatively, you can
    do this with a single command, respectively (without needing the initial `roscd`):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条命令在终端窗口中打印 XML 文件，以便你可以检查它。第二条检查此类文件的语法。或者，你可以用单个命令完成这些操作，分别（不需要初始的 `roscd`）：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this case, we are using another ROS command, `rospack find`, to write the
    path of the model.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们使用另一个 ROS 命令 `rospack find` 来写入模型的路径。
- en: 'The `$` symbol before the opening bracket in bash is telling us this: `return
    me the path of the gazebo_basics package`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: bash 中开括号前的 `$` 符号告诉我们这个：`返回 gazebo_basics 包的路径`。
- en: After the closing bracket, there is the route inside the package—that is, `/urdf`—which
    is where `gopigo.gazebo` is located.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在关闭括号之后，是包内的路径——即 `/urdf`——这是 `gopigo.gazebo` 所在的位置。
- en: 'If everything goes well in the checking process, you will obtain a successful
    message:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果检查过程中一切顺利，你将获得一条成功消息：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'If you intentionally remove the closing `>` of a tag or a complete `<tag>`,
    the check command will throw the following error:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你故意移除标签的结尾 `>` 或完整的 `<tag>`，检查命令将抛出以下错误：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If you remove the opening `<link>` and closing `</link>`, you''ll obtain the
    following error:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你移除了开头的 `<link>` 和结尾的 `</link>`，你会得到以下错误：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Remove any incorrect syntax from the file and make sure it passes the check
    procedure. When you're ready, proceed to the next section, where we will see the
    model in action.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中删除任何错误的语法，并确保它通过检查程序。当你准备好后，继续下一节，我们将看到模型的实际应用。
- en: Launching the GoPiGo model in Gazebo
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Gazebo 中启动 GoPiGo 模型
- en: 'The single-launch file of this chapter can be found under the launch folder
    of the package and is called `gopigo_gazebo.launch`. We''ve divided its code into
    the following two snippets for explanation purposes:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的单个启动文件可以在包的启动文件夹中找到，并命名为 `gopigo_gazebo.launch`。为了解释目的，我们将它的代码分为以下两个片段：
- en: '[PRE22]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Here, you can see two new tags, `<include>` and `<arg>`. The former allows us
    to include launch files from other ROS packages, while the latter allows us to
    make the launch file configurable using local arguments. The `<arg>` tag will
    be explained in the *Explaining configurable launch files using the <arg> tag*
    section.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到两个新的标签，`<include>` 和 `<arg>`。前者允许我们包含来自其他 ROS 包的启动文件，而后者允许我们使用本地参数使启动文件可配置。《arg》标签将在
    *使用 <arg> 标签解释可配置启动文件* 部分中解释。
- en: 'The `<include>` block calls external files and defines the default values for
    the parameters. Its syntax can be clearly understood if we bear its equivalent
    command in mind when using the Terminal:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`<include>` 块调用外部文件并定义参数的默认值。如果我们记住在终端使用其等效命令时，其语法可以清楚地理解：'
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As you might have guessed, the `<include>` tag specifies the `empty_world.launch`
    file belonging to the `gazebo_ros` ROS package (which ships with the ROS installation,
    and is, therefore, a system package).
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所猜，`<include>` 标签指定了属于 `gazebo_ros` ROS 包（随 ROS 安装提供，因此是一个系统包）的 `empty_world.launch`
    文件。
- en: 'Regarding the file path, it is worth mentioning the mechanism that ROS uses
    to abstract the physical location of any package in the disk by using the `find`
    keyword:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 关于文件路径，值得提一下 ROS 使用 `find` 关键字来通过抽象任何包在磁盘上的物理位置来使用的机制：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Similar to the purpose of the `$` symbol in bash—that is, accessing the value
    of an environment variable—the preceding snippet provides us with a message stating `return
    me the path of the gazebo_basics package`. After the closing bracket, we can see
    the route inside the package—that is, `/launch`—which is where `empty_world.launch`
    is located.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于bash中的`$`符号的作用，即访问环境变量的值，前面的代码片段为我们提供了一个消息，声明“返回gazebo_basics包的路径”。在括号关闭后，我们可以看到包内的路径——即`/launch`——这是`empty_world.launch`所在的位置。
- en: 'You can explore its contents by listing the file, as usual:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过列出文件来探索其内容，就像平常一样：
- en: '[PRE25]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This is where the available worlds (that the line in bold letters refers to)
    are loaded from the Gazebo installation directory—`/usr/share/gazebo-7/worlds` if
    you are in Ubuntu 16.04 or `/usr/share/gazebo-9/worlds` if you are in Ubuntu 18.04\.
    In the case of our launch file, we are using `worlds/empty.world`. It''s marked
    in bold in the following code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的可用世界（即粗体字母所指的行）是从Gazebo安装目录加载的——如果你在Ubuntu 16.04上，则是`/usr/share/gazebo-7/worlds`；如果你在Ubuntu
    18.04上，则是`/usr/share/gazebo-9/worlds`。在我们的启动文件中，我们使用`worlds/empty.world`。在下面的代码中，它被加粗标记：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `<include>` tag is followed by the second snippet, which describes the
    Gazebo node to be launched:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`<include>`标签后面跟着第二个代码片段，描述了要启动的Gazebo节点：'
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This node spawns the GoPiGo3 model into Gazebo using the `spawn_model` script
    of the `gazebo_ros` package. So why aren't we using the `<include>` tag here?
    Because we are including an external single node. We reserve `<include>` for launch
    files, where there are more nodes and configuration options.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 该节点使用`gazebo_ros`包中的`spawn_model`脚本来将GoPiGo3模型放入Gazebo。那么为什么我们不在这里使用`<include>`标签呢？因为我们正在包含一个外部单个节点。我们保留`<include>`用于包含更多节点和配置选项的启动文件。
- en: 'Finally, issue the `roslaunch` command to start the simulation:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，发出`roslaunch`命令以启动模拟：
- en: '[PRE28]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'This will result in the following output (be patient; depending on your graphics
    card, the 3D scene can take several seconds to be launched in a Gazebo window):'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出（请耐心等待；根据你的显卡，3D场景可能需要几秒钟才能在Gazebo窗口中启动）：
- en: '![](img/6408f731-fee9-4e0c-a798-82da29fcfd5f.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6408f731-fee9-4e0c-a798-82da29fcfd5f.png)'
- en: We will conclude this section by explaining the `<arg>` tag that we skipped
    previously.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过解释之前跳过的`<arg>`标签来结束本节。
- en: Explaining configurable launch files using the <arg> tag
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用<arg>标签解释可配置的启动文件
- en: 'Arguments are a way to use variables in the scope of a launch file. Let''s
    take the example of the `world_name` argument inside the `include` tag:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 参数是在启动文件的作用域中使用变量的方式。让我们以`include`标签内的`world_name`参数为例：
- en: '[PRE29]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This tag tells us which Gazebo world to use—referenced by the `name` attribute—and
    specifies the path where the file for the world can be found—that is, `value="$(find
    gazebo_basics)/worlds/gopigo.world"`. Be aware that how you specify the file path
    is done in exactly the same way in which we tell it the launch file to include.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这个标签告诉我们使用哪个Gazebo世界——通过`name`属性引用——并指定可以找到世界文件的路径，即`value="$(find gazebo_basics)/worlds/gopigo.world"`。请注意，指定文件路径的方式与我们告诉它包含启动文件的方式完全相同。
- en: The syntax for the `<arg>` tag is neatly explained in the official documentation
    at [http://wiki.ros.org/roslaunch/XML/arg](http://wiki.ros.org/roslaunch/XML/arg).
    Remember that, in the *Controlling GoPiGo3 wheels from RViz* section of the previous
    chapter, we explained how to specify the argument values when issuing the `roslaunch`
    command while providing default values in the launch file.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`<arg>`标签的语法在官方文档中有详细的解释，请参阅[http://wiki.ros.org/roslaunch/XML/arg](http://wiki.ros.org/roslaunch/XML/arg)。记住，在前一章的“*从RViz控制GoPiGo3车轮*”部分，我们解释了在提供默认值的情况下，如何指定`roslaunch`命令的参数值。'
- en: At this point, you are ready to understand how the model simulates the dynamics
    of your robot.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经准备好理解模型是如何模拟你机器人动力学了。
- en: Moving your model around
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动你的模型
- en: 'Once the simulation has been launched, you can use the interaction icons in
    the Gazebo window. For example, you can play with the rotation tool of the environment
    toolbar to see how gravity affects the cone when you move it from its point of
    equilibrium:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦启动了模拟，你就可以使用Gazebo窗口中的交互图标。例如，你可以通过环境工具栏的旋转工具来玩，看看当你将圆锥从平衡点移动时重力是如何影响它的：
- en: '![](img/e6ba0155-324f-4808-ada4-464f055ee187.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e6ba0155-324f-4808-ada4-464f055ee187.png)'
- en: 'Also, you can access the Joints panel (drag from the right border of the Gazebo
    window if it is not visible), select the GoPiGo model from the left pane, and
    under the Force tab in the Joints panel, apply 1 N.m torque to the left wheel.
    You will see how the robot starts to rotate around the right wheel, where no external
    force is acting:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以访问关节面板（如果不可见，从Gazebo窗口的右侧拖动），从左侧面板中选择GoPiGo模型，然后在关节面板的力选项卡下，对左轮施加1 N.m的扭矩。你会看到机器人开始围绕没有外部力作用的右轮旋转：
- en: '![](img/6598f45d-8ad2-4c26-9261-fdf129332ff8.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6598f45d-8ad2-4c26-9261-fdf129332ff8.png)'
- en: These interactions are quite simple, and at this point, they should give you
    a good taste of what simulation can support your work as a robotics engineer.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这些交互相当简单，到目前为止，它们应该让你对模拟如何支持你作为机器人工程师的工作有一个很好的了解。
- en: Guidelines for tuning the Gazebo model
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整Gazebo模型的指南
- en: The general goal in simulation is to reproduce reality to some extent with minimal
    effort, and this approximation should serve to be your concrete goal of designing
    a robot or evaluating the performance of existing ones.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟的一般目标是尽可能以最小的努力重现现实，这种近似应该成为你设计机器人或评估现有机器人性能的具体目标。
- en: Digital models are an abstraction of reality. You don't need to reproduce every
    detail of the physical robot in its Gazebo model. If you tried to do so, the required
    workload would be so high that the benefits of simulation would not compensate
    for the effort. Instead, what you do is reproduce those characteristics to verify
    the robot. You should start by defining the concrete goals and then build the
    simplest model that will allow us to comply with them.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 数字模型是现实的抽象。你不需要在Gazebo模型中重现物理机器人的每一个细节。如果你尝试这样做，所需的工作量会非常高，以至于模拟的好处无法弥补这种努力。相反，你所做的是重现这些特性来验证机器人。你应该首先定义具体目标，然后构建最简单的模型，使我们能够满足这些目标。
- en: Let's go through an example to understand these concepts. In this chapter, you've
    seen that the GoPiGo3 model is just a box (robot body), a semisphere (caster),
    and two cylinders (left and right wheels). The real GoPiGo3 contains many more
    parts, including bolts, washers, and nuts, as you know from experience when you
    put the hardware together in [Chapter 1](9bb411d1-934c-4497-aad4-7ad770d3783c.xhtml), *Assembling
    the Robot*. If you try to reproduce all these elements in URDF, we are sure you
    would be discouraged from continuing to work on such a hard task. Instead of following
    that dead end, ask yourself what you want the model for. From now on, we will
    refer to the simulated model as the **digital twin**, which is the technical name
    we will use to refer to the digital replica of the physical robot.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解这些概念。在本章中，你已经看到GoPiGo3模型只是一个盒子（机器人本体）、一个半球（转向器）和两个圆柱（左右轮子）。真正的GoPiGo3包含许多更多部件，包括螺栓、垫圈和螺母，正如你在[第1章](9bb411d1-934c-4497-aad4-7ad770d3783c.xhtml)“组装机器人”中组装硬件时的经验一样。如果你试图在URDF中重现所有这些元素，我们确信你会因为这项艰巨的任务而感到沮丧。与其沿着这条死胡同走下去，不如问问自己你想要这个模型做什么。从现在开始，我们将把模拟模型称为**数字孪生**，这是我们用来指代物理机器人数字副本的技术名称。
- en: 'Here are two of the possible goals:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是两个可能的目标：
- en: Measure the actual maximum torque that servomotors can exert
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测量伺服电机能施加的实际最大扭矩
- en: Determine the weight of the heaviest object that GoPiGo3 can transport as a
    function of the slope of a ramp
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定GoPiGo3可以运输的最重物体的重量，作为斜坡坡度的函数
- en: 'Now, let''s think about the characteristics that the digital twin should have:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们思考数字孪生应该具备的特点：
- en: Since we are trying to measure dynamic features, we just have to reproduce the total
    mass of GoPiGo3 and the torque actuating on the wheels. Moments of inertia are
    not strictly necessary if the robot is going to follow a smooth path. For example,
    in the case of a spinning motion, the inertia tensor would need to be considered
    to simulate the maximum turning speed when the robot goes around without moving
    from its position. This would be accomplished by rotating the left and right wheels
    at maximum speed with opposite signs.
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于我们正在尝试测量动态特性，我们只需要重现GoPiGo3的总质量和作用在轮子上的扭矩。如果机器人要沿着平滑路径移动，惯性矩不是必需的。例如，在旋转运动的情况下，需要考虑惯性张量来模拟当机器人围绕位置不动的位置旋转时的最大转向速度。这可以通过以最大速度旋转左右轮子并使用相反的符号来实现。
- en: We will need `<visual>` tagged elements to see the digital model on the screen,
    but will not need `<collision>` elements since there is no need to include obstacles
    for our purposes.
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将需要 `<visual>` 标记的元素来在屏幕上看到数字模型，但不需要 `<collision>` 元素，因为我们不需要包括障碍物。
- en: 'With just those characteristics, you will have the minimum digital twin. The
    procedure to achieve these goals would be as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 只需这些特性，你将拥有最小的数字孪生。实现这些目标的过程如下：
- en: In the real world, take a ramp that you can manually change the slope of. Then,
    get GoPiGo3 to climb the ramp and determine the maximum slope it can deal with.
    You will reach a point where the robot stays almost still, without climbing or
    going backward. Let's say that this angle is *a*.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在现实世界中，取一个你可以手动改变坡度的斜坡。然后，让GoPiGo3爬上斜坡，并确定它能处理的最大的坡度。你会达到一个点，此时机器人几乎静止不动，既不爬坡也不后退。让我们假设这个角度是
    *a*。
- en: The force that the two motors are exerting is given by the formula ![](img/6fb8fee3-c112-4836-bd6b-409f857e7aca.png),
    where *m* is the robot's mass and *g* is the acceleration of gravity (9.8 m/s²).
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个电机施加的力由以下公式给出 ![](img/6fb8fee3-c112-4836-bd6b-409f857e7aca.png)，其中 *m* 是机器人的质量，*g*
    是重力加速度（9.8 m/s²）。
- en: The torque that's applied by each motor to produce such traction is given by
    the formula  ![](img/3d77e374-cb39-4dd7-b1b4-bbe4d3899fc4.png), where *r* is the
    radius of the wheels and the factor 2 means that we produce this force using two
    motors (one per wheel).
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个电机为了产生这种牵引力而施加的扭矩由以下公式给出 ![](img/3d77e374-cb39-4dd7-b1b4-bbe4d3899fc4.png)，其中
    *r* 是车轮的半径，系数2表示我们使用两个电机（每个车轮一个）来产生这种力量。
- en: Once you've determined the maximum torque, *T*, you can go to the simulation
    environment, apply it to each of the motors, and see the robot rolling on a ramp
    of a slope, α < *a*. By progressively increasing the mass of the robot body (concentrated
    in the `base_link` URDF element), you will find the total weight that makes the
    robot stop moving forward.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你确定了最大扭矩 *T*，你就可以进入仿真环境，将其应用于每个电机，并观察机器人在斜率为α < *a* 的斜坡上滚动。通过逐渐增加机器人身体的质量（集中在`base_link`
    URDF元素中），你会找到使机器人停止向前移动的总重量。
- en: Bear in mind that if the ramp had slope *a*, the force that the wheels have
    to exert to make the robot climb will correspond to the maximum motor torque,
    so it won't have the capacity to transport more weight. Therefore, you should
    always consider a slope, α, lower than *a*.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，如果斜坡的坡度为 *a*，车轮必须施加的力以使机器人爬坡将对应于最大电机扭矩，因此它将没有运输更多重量的能力。因此，你应该始终考虑一个低于 *a*
    的斜率，α。
- en: 'By doing this, you will obtain a good estimation of the maximum weight that
    GoPiGo3 can carry for a given maximum ramp slope, α. You can introduce this modification
    in Gazebo very easily by modifying the mass value of the `base_link` in the URDF
    file, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，你将获得GoPiGo3在给定最大斜率α时可以携带的最大重量的良好估计。你可以通过修改URDF文件中`base_link`的质量值，非常容易地在Gazebo中引入这种修改，如下所示：
- en: '[PRE30]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, `m + dm` represents the sum of two terms:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`m + dm` 表示两个项的和：
- en: '`m` is the mass of the unloaded robot.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m` 是无载机器人的质量。'
- en: '`dm` is the mass of the object to be transported. The value of `dm` (in kilograms)
    that makes sure the robot does not climb the ramp will be the maximum load for
    the slope, α. For a ramp slope equal to *a*, we have *dm = dm*= 0.*'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dm` 是要运输的物体的质量。确保机器人不爬坡的 `dm`（千克）值将是斜率α的最大载重。对于斜率等于 *a* 的斜坡，我们有 *dm = dm*=
    0*。'
- en: We'll cover how we can specify the maximum motor torque in Gazebo in [Chapter
    7](0653ab6b-8710-41e7-9c01-5024865e3e27.xhtml), *Robot Control and Simulation*,
    in the *Simulating GoPiGo3 with Gazebo* section. Here, you will see that there
    is a plugin element that can be used to simulate the motor controller that mobile
    robots such as GoPiGo3 have.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在第7章[0653ab6b-8710-41e7-9c01-5024865e3e27.xhtml]的“*机器人控制和仿真*”部分中介绍如何在Gazebo中指定最大电机扭矩。在这里，你会看到有一个插件元素可以用来模拟移动机器人（如GoPiGo3）所拥有的电机控制器。
- en: With these modifications to the URDF file, as well as the check we made in Gazebo
    regarding *dm*= 0* for a ramp slope equal to *a*, you have tuned the digital twin
    so that it can simulate freight transport and has the transport capability of
    *dm* kilograms for a maximum slope of α.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对URDF文件进行这些修改，以及我们在Gazebo中对斜坡坡度等于 *a* 时 *dm*= 0* 的检查，你已经调整了数字孪生，使其能够模拟货运运输，并且具有
    *dm* 千克的最大斜率α的运输能力。
- en: Summary
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced the simulation environment of ROS called Gazebo,
    a standalone simulator that also provides full integration with ROS.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: A) 它用于引用具有相同名称的其他ROS节点
- en: First, you learned about SDF, the standard XML format for robot simulation driven
    by Gazebo. SDF extends URDF and allows us to describe objects and environments
    for robot simulators, visualization, and control.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: Following a parallel process to that of [Chapter 4](742e6846-70e4-4bd4-8576-f3e4f445df3f.xhtml),
    *Creating the Virtual Two-Wheeled ROS Robot*, we produced a robot description
    within the `./urdf/gopigo.gazebo` file. The simulation was then started by running
    `./launch/gopigo_gazebo.launch`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 按照与[第4章](742e6846-70e4-4bd4-8576-f3e4f445df3f.xhtml)中“创建虚拟两轮ROS机器人”相同的并行过程，我们在`./urdf/gopigo.gazebo`文件中创建了一个机器人描述。然后通过运行`./launch/gopigo_gazebo.launch`来启动模拟。
- en: In this chapter, you were provided with an overview of how the Gazebo interface
    GUI is organized and performed some simple interactions with the GoPiGo3 model
    to see how it is affected by the gravity or the application of torque in the joint
    of one of its wheels.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨物理机器人并解释如何与之接口。你到目前为止在虚拟机器人上所做的工作将帮助你预测当你在其CPU上运行ROS程序时，实际的GoPiGo3会如何表现。
- en: By now, you should have started to develop a feeling of how to simulate realistic
    behavior with the robot with the physics engine of Gazebo. This will provide you
    with a powerful and cost-effective tool that you can use to troubleshoot the differences
    between the physical robot and its digital twin.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你应该已经开始学会如何使用Gazebo的物理引擎来模拟机器人现实行为的感觉了。这将为你提供一个强大且经济的工具，你可以用它来排查物理机器人和其数字孪生之间的差异。
- en: In the next chapter, we will look at the physical robot and explain how to interface
    with it. What you have done so far with the virtual robot will help you anticipate
    how the actual GoPiGo3 behaves when you run a ROS program in its CPU.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: C) 它允许你轻松地在ROS环境中找到任何文件
- en: Questions
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SDF的格式是什么？
- en: What is the format of the SDF?
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 模拟器Gazebo教程（ROS特定）：[http://wiki.ros.org/simulator_gazebo/Tutorials](http://wiki.ros.org/simulator_gazebo/Tutorials)
- en: A) It is a text file
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，你了解了SDF，这是由Gazebo驱动的机器人模拟的标准XML格式。SDF扩展了URDF，使我们能够描述机器人模拟器、可视化和控制中的对象和环境。
- en: B) JSON
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: B) JSON
- en: C) XML
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你被提供了Gazebo界面GUI组织的概述，并对GoPiGo3模型进行了一些简单的交互，以了解它如何受到重力或其一个车轮关节上扭矩应用的影响。
- en: Why can't the UDRF format be directly used by simulation for robots?
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么URDF格式不能直接用于机器人的模拟？
- en: A) Because URDF cannot specify the pose of the robot within a world
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: C) 在制造机器人之前检查机器人的外观
- en: B) Because it cannot specify the dynamic properties of joints, such as stiffness,
    damping, and/or friction
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: B) 它返回作为其参数指定的ROS包的绝对路径
- en: C) All of the above
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: A) 用于定义机器人必须避免的物理障碍
- en: What is the `<collision>` tag used for?
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<collision>`标签是用来做什么的？'
- en: A) For defining the physical obstacles the robot has to avoid
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: C) XML
- en: B) It is an optional tag for performing the interference checking of robot joints
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: B) 它是执行机器人关节干扰检查的可选标签
- en: C) To define the volume to be considered for the interference checking of robot
    links
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: C) 为了定义干扰检查中要考虑的机器人链接的体积
- en: What is the ROS `find` command used for?
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ROS的`find`命令是用来做什么的？
- en: A) It is used to refer to other ROS nodes with the same name
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Gazebo中的机器人模拟是用来做什么的？
- en: B) It returns the absolute path of the ROS package that is specified as its
    argumentC) It allows you to easily find any file within the ROS environment
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: A) 因为URDF不能指定机器人在世界中的姿态
- en: What is a robot simulation in Gazebo used for?
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Gazebo教程：[http://gazebosim.org/tutorials](http://gazebosim.org/tutorials)
- en: A) To find out more about a robot before purchasing it
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: A) 在购买机器人之前了解更多关于机器人的信息
- en: B) To develop functionality prior to applying it to the real robotC) To check
    the visual aspect of a robot before manufacturing it
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: B) 在将其应用于真实机器人之前开发功能
- en: Further reading
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C) 以上所有
- en: Gazebo tutorials: [http://gazebosim.org/tutorials](http://gazebosim.org/tutorials)
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: B) 因为它不能指定关节的动态属性，如刚度、阻尼和/或摩擦
- en: Simulator Gazebo tutorials (ROS-specific): [http://wiki.ros.org/simulator_gazebo/Tutorials](http://wiki.ros.org/simulator_gazebo/Tutorials)
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中，我们介绍了ROS的仿真环境Gazebo，它是一个独立的模拟器，同时也提供了与ROS的完全集成。
- en: '*ROS Robot Programming: A handbook Written by TurtleBot3 Developers*, YoonSeok
    Pyo, HanCheol Cho, RyuWoon Jung, TaeHoon Lim (2017), ROBOTIS Co. Ltd, first edition: [http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf](http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf),
    Chapter: *ROS Tools: RViz and rqt *and 10.9 *TurtleBot3 Simulation using Gazebo*'
  id: totrans-199
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《ROS机器人编程：由TurtleBot3开发者编写的手册》*，YoonSeok Pyo，HanCheol Cho，RyuWoon Jung，TaeHoon
    Lim（2017），ROBOTIS Co. Ltd，第一版：[http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf](http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf)，章节：*ROS工具：RViz和rqt*以及10.9
    *使用Gazebo的TurtleBot3仿真*'
