- en: Building WebViews with React
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React构建WebViews
- en: So far, we have been building our microservices and making our backend services
    more responsive and efficient. Also, we have been trying out different database
    services which can secure and increase the performance of the storage and retrieval
    of data, which is of essence here.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在构建我们的微服务，并使我们的后端服务更加响应和高效。此外，我们一直在尝试不同的数据库服务，这些服务可以保护并提高数据的存储和检索性能，这在这里是至关重要的。
- en: In this chapter, we will focus on building our frontend page using React and
    integrating these pages with the backend to form a complete application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于使用React构建我们的前端页面，并将这些页面与后端集成以形成一个完整的应用程序。
- en: 'The topics that we will cover in this chapter are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题如下：
- en: Setting up a React environment
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置React环境
- en: Creating a user authentication panel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户认证面板
- en: Integrating react with backend APIs
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将React与后端API集成
- en: Understanding React
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解React
- en: 'In simpler terms, React is the UI layer of your application. It is a Javascript
    library to build fast and quick user interfaces. React, basically, helps you to
    create awesome webViews for each state of your application. So, we are going to
    use React for this purpose. But before we do that, let''s understand a few concepts/key
    points of React, which are listed next:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 简单来说，React是你的应用程序的UI层。它是一个用于构建快速和快速用户界面的JavaScript库。React基本上帮助你为你的应用程序的每个状态创建令人惊叹的web视图。因此，我们将使用React来实现这个目的。但在我们这样做之前，让我们了解React的一些概念/关键点，下面列出了这些概念/关键点：
- en: '**Components**: All your collections of HTML and JavaScript are called **components**.
    React, basically, provides hooks to render HTML pages with JavaScript enabled.
    The important thing here is that React works as a controller to render different
    web pages for each state of your application.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：你的HTML和JavaScript的所有集合都被称为**组件**。React基本上提供了渲染启用JavaScript的HTML页面的钩子。这里的重要一点是，React作为控制器，用于渲染应用程序的不同状态的不同网页。'
- en: '**Props for static version in React**: Usually, in HTML, you need a lot of
    code for showing all the data on the frontend and, moreover, it''s repetitive.
    React props help you solve this problem. Props, basically, keep the state of data
    and pass values from the parent to the child.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React中静态版本的Props**：通常，在HTML中，你需要大量的代码来在前端显示所有数据，而且这是重复的。React的props帮助你解决了这个问题。props基本上保持数据的状态，并从父级传递值给子级。'
- en: '**Identifying the minimal state**: To build your app correctly, you first need
    to think of the minimal set of the mutable state that your app needs. Like, in
    our case, we need to keep the state of users always available during the different
    states of the application.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别最小状态**：为了正确构建你的应用程序，你首先需要考虑你的应用程序需要的最小可变状态集。比如，在我们的情况下，我们需要在应用程序的不同状态下始终保持用户状态可用。'
- en: '**Identifying active state**: React is all about one-way data flow down the
    component hierarchy. We need to understand every component that renders something
    based on that state. Also, we need to understand how states change at the level
    of component hierarchy.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**识别活动状态**：React的核心是组件层次结构中的单向数据流。我们需要了解每个基于该状态渲染内容的组件。此外，我们需要了解组件层次结构中状态如何改变。'
- en: '**React-DOM**: The react-dom is a combination of React and DOM. React contains
    the functionality utilized in web and mobile apps. The react-dom functionality
    is utilized only in web apps.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**React-DOM**：react-dom是React和DOM的组合。React包含在Web和移动应用程序中使用的功能。react-dom功能仅在Web应用程序中使用。'
- en: Setting up the React environment
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置React环境
- en: In order to run React, we need to set up an initial environment, which includes
    installing a couple of libraries of `node.js`.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行React，我们需要设置一个初始环境，其中包括安装一些`node.js`的库。
- en: Installing node
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装node
- en: Before we start installing React and the package list, we need to have `node.js`
    installed on our system.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始安装React和包列表之前，我们需要在系统上安装`node.js`。
- en: In Linux (Debian-based system), the process of installation is pretty simple.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux（基于Debian的系统）中，安装过程非常简单。
- en: 'First, we need to add PPA from the `node.js` official website by using the
    following commands:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要使用以下命令从`node.js`官方网站添加PPA：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once it is set up, we can install `node.js` with the following command:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置好，我们可以使用以下命令安装`node.js`：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Now let''s check the `node` and `npm` versions, as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们检查`node`和`npm`的版本，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In our setup, we use the aforementioned version, but the node version around
    v7.x should be fine, and for npm, v4.x should work fine.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的设置中，我们使用了上述版本，但是v7.x左右的node版本应该可以，对于npm，v4.x应该可以。
- en: Creating package.json
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建package.json
- en: This file is, basically, metadata for your application, which contains the complete
    libraries /dependencies that need to be installed for your application. Another
    real-world advantage is that it makes your build reproducible, which means that
    it's way easier to share it with other developers. There are different ways in
    which you can create your customized `package.json`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件基本上是你的应用程序的元数据，其中包含需要为你的应用程序安装的完整库/依赖项。另一个现实世界的优势是，它使你的构建可复制，这意味着与其他开发人员分享变得更容易。有不同的方式可以创建你定制的`package.json`。
- en: 'The following is the minimum information that needs to be provided in `packages.json`:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在`packages.json`中需要提供的最少信息：
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In order to create the `package.json` template, you can use the following command:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建`package.json`模板，你可以使用以下命令：
- en: '[PRE4]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: It will ask for values such as name, version, description, author, license,
    and so on; fill in the values, and it will generate `package.json`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它会要求填写诸如名称、版本、描述、作者、许可证等值；填写这些值，它将生成`package.json`。
- en: 'If you don''t want to fill the information in now, you can use the `--yes`
    or `-y` attribute to use the default values as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在不想填写信息，你可以使用`--yes`或`-y`属性使用默认值，如下所示：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'For our application, I have generated `package.json`, which looks something
    like this:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的应用程序，我已经生成了类似以下内容的`package.json`：
- en: '[PRE6]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, that we have generated `package.json`, we need to install these dependencies
    on our workstation using the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经生成了`package.json`，我们需要使用以下命令在我们的工作站上安装这些依赖项：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Please make sure that, when you execute the preceding command, `package.json`
    should be in the current working directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 请确保在执行上述命令时，`package.json`应该在当前工作目录中。
- en: Building webViews with React
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React构建webViews
- en: 'First of all, we will create a home view from which React will be called. So,
    let''s create `index.html`, which has the following contents, in the template
    directory:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个主页视图，从中将调用React。所以，让我们创建`index.html`，它在模板目录中有以下内容：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: As you can see in the preceding HTML page, we have defined `id ="react"`, which
    we will use to call the React main function based on the ID, and perform a certain
    operation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在前面的HTML页面中所看到的，我们已经定义了`id="react"`，我们将使用它来根据ID调用React的主要函数，并执行某些操作。
- en: 'So, let''s create our `main.js`, which will send a response, with the following
    code:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们创建我们的`main.js`，它将发送一个响应，代码如下：
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Now we have defined our basic structure of the React response. Since we are
    building an application with multiple views, we need a build tool which will help
    us put all our assets, including JavaScript, images, fonts, and CSS, under one
    package, and generate it into a single file.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了React响应的基本结构。由于我们正在构建具有多个视图的应用程序，我们需要一个构建工具，它将帮助我们将所有资产，包括JavaScript、图像、字体和CSS，放在一个包中，并将其生成为一个单一的文件。
- en: '**Webpack** is the tool which will help us solve this problem.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**Webpack**是将帮助我们解决这个问题的工具。'
- en: Webpack should already be available, as we defined the Webpack package as part
    of `package.json`, which we installed earlier.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack应该已经可用，因为我们在`package.json`中定义了Webpack包，我们之前安装过了。
- en: Webpack, basically, reads a single entry file, which could be the `.js` file,
    reads its child components, and then converts them into a single `.js` file.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Webpack基本上读取一个入口文件，它可以是`.js`文件，读取它的子组件，然后将它们转换成一个单一的`.js`文件。
- en: Since we have already defined it in `package.json`, it is already installed.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经在`package.json`中定义了它，它已经安装好了。
- en: In Webpack, we need to define a configuration which will help it to identify
    the entry file and the loader that is to be used to generate a single `.js` file.
    Also, you need to define the filename for the generated code.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在Webpack中，我们需要定义一个配置，它将帮助它识别入口文件和要用于生成单一`.js`文件的加载器。此外，你需要定义生成代码的文件名。
- en: 'Our Webpack configuration would be something like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的Webpack配置应该是这样的：
- en: '[PRE10]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You can extend the preceding configuration based on your use cases. Sometimes,
    developers try *.html as the entry point. In that case, you need to make appropriate
    changes.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以根据你的用例扩展前面的配置。有时，开发人员尝试使用*.html作为入口点。在这种情况下，你需要做出适当的更改。
- en: 'Let''s move on to build our first webView using the following command:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续使用以下命令构建我们的第一个webView：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `-d` attribute in the last command is used for debugging; it generates another
    file, `bundle.js.map`, which shows the activity of Webpack.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个命令中的`-d`属性用于调试；它生成另一个文件`bundle.js.map`，显示Webpack的活动。
- en: Since we are going to build the application repeatedly, we can use another flag,
    `--watch` or `-w`, which will keep track of the changes in the `main.js` file.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们将重复构建应用程序，我们可以使用另一个标志`--watch`或`-w`，它将跟踪`main.js`文件的更改。
- en: 'So, now our Webpack command should be something like the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，现在我们的Webpack命令应该是这样的：
- en: '[PRE12]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now we have built our application. Remember to change your routes in `app.py`
    so that home should be navigated as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了我们的应用程序。记得在`app.py`中更改你的路由，这样主页应该被导航如下：
- en: '[PRE13]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Let's check what our home page looks like now.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查一下我们的主页现在是什么样子的。
- en: '![](img/00061.jpeg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00061.jpeg)'
- en: You can also check whether we have React and react-dom running in the background
    in the inspect mode.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以检查一下我们是否在检查模式下后台运行着React和react-dom。
- en: This is a very basic structure to understand the workings of React. Let's move
    on to our use case, where we have created tweet webViews, and the user can view
    the old tweets as well.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个非常基本的结构，用于理解React的工作原理。让我们继续我们的用例，我们已经创建了tweet webViews，用户也可以查看旧的tweets。
- en: 'So, let''s create `Tweet.js`, which will have the basic structure of tweets,
    such as a textbox for contents, and a button to post tweets. Add the following
    code to `Tweet.js`:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，让我们创建`Tweet.js`，它将有tweets的基本结构，比如一个用于内容的文本框，和一个用于发布tweets的按钮。将以下代码添加到`Tweet.js`：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Let''s call this function from `main.js`, so that it is loaded on the home
    page, by updating the `render` function as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`main.js`中调用这个函数，这样它就会在主页上加载，通过更新`render`函数如下：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you load the page now, it will be pretty simple. Since we want to create
    a web application, which should be attractive, we will use a couple of CSS here
    to do so. In our case, we are using Materialize CSS ([http://materializecss.com/getting-started.html](http://materializecss.com/getting-started.html)).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在加载页面，它将会非常简单。由于我们想要创建一个吸引人的web应用程序，我们将在这里使用一些CSS来实现。在我们的情况下，我们使用Materialize
    CSS ([http://materializecss.com/getting-started.html](http://materializecss.com/getting-started.html))。
- en: 'Add the following block of code in `index.html`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在`index.html`中添加以下代码块：
- en: '[PRE16]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let's try to add tweets, and send them across with state so that some tweets
    should be shown.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试添加tweets，并通过状态发送它们，以便显示一些tweets。
- en: 'In the `Main` class of `main.js`, add the following constructor function to
    initialize the state:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main.js`的`Main`类中，添加以下构造函数来初始化状态：
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now update the `render` function as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在按照以下方式更新`render`函数：
- en: '[PRE18]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Let''s create another file, `TweetList.js`, which will show the tweets, with
    the following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建另一个文件`TweetList.js`，它将显示tweets，代码如下：
- en: '[PRE19]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Great! Now we have added this template. Let's check out our home page and see
    how the CSS works there. But before that, since we are using Webpack for building,
    make sure you add the following line to load `bundle.js` every time--this will
    run the webViews in the `index.html` file.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们已经添加了这个模板。让我们检查一下我们的主页，看看CSS是如何工作的。但在此之前，由于我们正在使用Webpack进行构建，请确保每次都添加以下行以加载`bundle.js`-这将在`index.html`文件中运行webView。
- en: '[PRE20]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Awesome! The home page should look something like this:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！主页应该是这样的：
- en: '![](img/00062.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00062.jpeg)'
- en: Let's move forward to post tweets--we should be able to add new tweets, and
    they should be updated in `TweetList.js` as well.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续发布推文-我们应该能够添加新的推文，并且它们也应该在`TweetList.js`中更新。
- en: 'Let''s update our `Tweet.js` code so that it sends the tweets to `main.js`
    to process them. Now, we need to send our tweets to `main.js`, in order to do
    so , we need to update our `Tweet.js` file with the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的`Tweet.js`代码，以便将推文发送到`main.js`进行处理。现在，我们需要将我们的推文发送到`main.js`，为此，我们需要使用以下代码更新我们的`Tweet.js`文件：
- en: '[PRE21]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Also, be sure to update the `render` function with the `form onSubmit` attribute
    as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 还要确保使用以下`form onSubmit`属性更新`render`函数：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: So, after adding content into the text area, it should submit the tweet as well.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在向文本区域添加内容后，它还应该提交推文。
- en: 'Now, let''s update the `render` function of `main.js` to add new tweets, as
    follows:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更新`main.js`的`render`函数以添加新的推文，如下所示：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We also need to add the `addTweet` function in the `Main` class, defined in
    the following:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在以下定义的`Main`类中添加`addTweet`函数：
- en: '[PRE24]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Your page, after adding the new tweet, should look something like this:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在添加新推文后，您的页面应该看起来像这样：
- en: '![](img/00063.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00063.jpeg)'
- en: Currently, we are using React to hold the data in an array. Since we have built
    our microservices to hold this kind of data, we should integrate our webView with
    the backend services.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们正在使用React来保存数组中的数据。由于我们已经构建了我们的微服务来保存这种数据，我们应该将我们的webView与后端服务集成。
- en: Integrating webView with microservices
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将webView与微服务集成
- en: In order to integrate our microservices with webViews, we will use AJAX to make
    API calls.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将我们的微服务与webView集成，我们将使用AJAX进行API调用。
- en: '[PRE25]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Similarly, we need to modify our `addTweet` function in our `main.js` as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，我们需要修改我们`main.js`中的`addTweet`函数，如下所示：
- en: '[PRE27]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Since there will be multiple tweets which need to be iterated with a similar
    template of tweet, let''s create another component called `templatetweet.js` with
    the following code:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于将有多条推文需要使用相似的推文模板进行迭代，让我们创建另一个名为`templatetweet.js`的组件，并使用以下代码：
- en: '[PRE28]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Remember, we have changed the field of props based on our database collection
    keys.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们已根据我们的数据库集合键更改了props字段。
- en: 'Also, we need to update our `TweetList.js` to use the preceding template by
    adding it as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要更新我们的`TweetList.js`，以使用前面的模板，通过以下方式添加它：
- en: '[PRE29]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Great! Your home page should look like this now:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您的主页现在应该是这样的：
- en: '![](img/00064.jpeg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00064.jpeg)'
- en: User authentication
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户身份验证
- en: All our tweets are protected, and should react only to the audience which we
    want to showcase them to. Also, anonymous users should not be allowed to tweet.
    For that, we will create a database and web pages to enable new users to sign
    in and log in to the tweet webView as well. Remember, we will use Flask to authenticate
    users, and also to post data to the backend user.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所有的推文都是受保护的，应该只对我们想展示给他们的观众做出反应。此外，匿名用户不应被允许发推文。为此，我们将创建一个数据库和网页，以使新用户能够登录并在推文webView中登录。请记住，我们将使用Flask来验证用户，并将数据发布到后端用户。
- en: Login user
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录用户
- en: 'Let''s create our login page template, where the existing users need to fill
    in their username and password to authenticate. The following is the code snippet:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的登录页面模板，现有用户需要填写他们的用户名和密码进行身份验证。以下是代码片段：
- en: '[PRE30]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We will post the data to the login page, which we will define in the `app.py`
    file.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向登录页面发布数据，我们将在`app.py`文件中定义。
- en: 'But first, check if the session is present or not. If not, then you will be
    redirected to the login page. Add the following code to `app.py`, which will validate
    session details for the user:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先，检查会话是否存在。如果没有，那么您将被重定向到登录页面。将以下代码添加到`app.py`中，它将验证用户的会话详细信息：
- en: '[PRE31]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Let's create the route for login, and validate the credentials to authenticate
    users to tweet.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为登录创建路由，并验证凭据以对用户进行身份验证。
- en: 'Here is the code snippet:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是代码片段：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Once you are done with this, your login page will appear at the root URL, and
    it should look something like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您的登录页面将显示在根URL，并且应该是这样的：
- en: '![](img/00065.jpeg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00065.jpeg)'
- en: As you can see, we have provided a link, Sign up now, to create an account for
    the new user.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们提供了一个链接“立即注册”，以为新用户创建帐户。
- en: Remember, we are using APIs to authenticate the user from the user collection
    in our database.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，我们正在使用API来从我们的数据库中的用户集合对用户进行身份验证。
- en: Sign up user
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注册用户
- en: Let's move on to create our sign up page to help register new users so that
    they can tweet as well.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续创建我们的注册页面，以帮助注册新用户，以便他们也可以发推文。
- en: 'Let''s create `signup.html`, which will ask for user details. Check the following
    code snippet for this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`signup.html`，它将要求用户提供详细信息。检查以下代码片段：
- en: '[PRE33]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding code is, basically, the template which needs the backend API to
    submit the data to the user.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码基本上是需要后端API将数据提交给用户的模板。
- en: '[PRE34]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Once the user has signed up, it will set the session, and redirect it to your
    home page.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 用户注册后，它将设置会话，并将其重定向到您的主页。
- en: 'Your Sign up page should look something like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您的注册页面应该看起来像这样：
- en: '![](img/00066.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00066.jpeg)'
- en: We have authenticated the user, but what if he wants to update his/her personal
    information? Let's create a profile page, which will help them do so.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经验证了用户，但如果他想要更新个人信息怎么办？让我们创建一个个人资料页面，以帮助他们这样做。
- en: User profile
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户资料
- en: Let's create a profile page (`profile.html`), which will be accessible by the
    user already logged in at the home page in the navigation panel.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个个人资料页面（`profile.html`），用户在主页登录后可以在导航面板中访问。
- en: 'Add the following code to `profile.html`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`profile.html`：
- en: '[PRE36]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Since we have created the profile, we need to create a route for the profile,
    which will read the database to get user details and POST back to the database
    as well.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经创建了个人资料，我们需要为个人资料创建一个路由，它将读取数据库以获取用户详细信息，并将POST回数据库。
- en: '[PRE37]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Once this last bit of code is added, your profile page should look something
    like this:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了这最后一部分代码，您的个人资料页面应该看起来像这样：
- en: '![](img/00067.jpeg)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00067.jpeg)'
- en: 'Also, we should add the profile link in `Tweet.js` in the navigation template
    by adding the following lines:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们应该在导航模板的`Tweet.js`中添加个人资料链接，添加以下几行：
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Now your home page will look something like this:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您的主页应该看起来像这样：
- en: '![](img/00068.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00068.jpeg)'
- en: Log out users
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登出用户
- en: '[PRE40]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Now our application is fully built-up, starting from the users logging in, to
    submitting their tweets, and then logging out.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序已经完全构建起来，从用户登录，到提交他们的推文，然后退出登录。
- en: Testing the React webViews
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试React webViews
- en: Since we are building webViews, we need to test them to catch some of the bugs
    before they happen. Also, testing will help you build better code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在构建webViews，我们需要测试它们以在发生之前捕捉一些错误。此外，测试将帮助您构建更好的代码。
- en: There are a number of UI-testing frameworks which could help you test your web
    apps. Two of them are discussed in the following section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多UI测试框架可以帮助您测试Web应用程序。以下部分讨论了其中两个。
- en: Jest
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jest
- en: Jest is a unit testing framework, which is provided by Facebook to test JavaScript.
    It is used to test individual components. It is simple, standard, and standalone.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: Jest是一个单元测试框架，由Facebook提供用于测试JavaScript。它用于测试单个组件。它简单、标准且独立。
- en: It tests your components based on fake DOM implementations, and runs different
    tests to check the functionalities. It automatically resolves dependencies. Also,
    you can run all the tests in parallel.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 它基于虚拟DOM实现测试组件，并运行不同的测试来检查功能。它会自动解决依赖关系。此外，您可以并行运行所有测试。
- en: 'You can refer to the following link, which could help you write test cases
    for your React application:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以参考以下链接，这可以帮助您为React应用编写测试用例：
- en: '[https://facebook.github.io/jest/docs/tutorial-react.html](https://facebook.github.io/jest/docs/tutorial-react.html)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://facebook.github.io/jest/docs/tutorial-react.html](https://facebook.github.io/jest/docs/tutorial-react.html)'
- en: Selenium
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium
- en: Selenium is an open source and portable automated software testing tool for
    testing web applications. It provides end-to-end testing, which means that it
    is a process of executing test scenarios against a real browser to test the entire
    stack of a multi-tiered application.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium是一个开源的、可移植的自动化软件测试工具，用于测试Web应用程序。它提供端到端测试，这意味着它是针对真实浏览器执行测试场景来测试多层应用程序堆栈的过程。
- en: 'It has the following different components:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下不同的组件：
- en: '**IDE**: This helps you describe the testing workflow.'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IDE**：这可以帮助您描述测试工作流程。'
- en: '**Selenium WebDriver**: This automates browser testing. It sends commands directly
    to the browser and receives the results.'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium WebDriver**：这可以自动化浏览器测试。它直接发送命令到浏览器并接收结果。'
- en: '**Selenium RC**: This remote control helps you to create test cases.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Selenium RC**：这个远程控制器可以帮助您创建测试用例。'
- en: '**Grid**: This runs test cases across different browsers, and in parallel.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网格**：这在不同浏览器和并行运行测试用例。'
- en: This is one of the best tools you can use to test our web application, which
    I would recommend.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您可以用来测试我们的Web应用程序的最佳工具之一，我强烈推荐使用。
- en: You can gather more about Selenium at [http://www.seleniumhq.org/docs/](http://www.seleniumhq.org/docs/).
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[http://www.seleniumhq.org/docs/](http://www.seleniumhq.org/docs/)了解更多关于Selenium的信息。
- en: Summary
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, our focus was on creating frontend user webViews and how to
    improve them to attract consumers. You also learnt how React can help us to build
    these webViews and implement interactions with backend services. In the upcoming
    chapter, things will get more interesting, as we will play around with our frontend
    application, and will explain how we scale it using Flux to handle a large number
    of incoming requests from the internet.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们的重点是创建前端用户webViews以及如何改进它们以吸引消费者。您还学会了React如何帮助我们构建这些webViews并实现与后端服务的交互。在接下来的章节中，事情将变得更有趣，因为我们将玩转我们的前端应用程序，并解释如何使用Flux来处理来自互联网的大量请求。
