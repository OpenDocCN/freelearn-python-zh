- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Python’s Integration with Blender
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 与 Blender 的集成
- en: 'Blender accepts code instructions in the same way as it interacts: via a graphical
    user interface.. That allows artists and studios to implement their own features
    and automation.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 接受代码指令的方式与它交互的方式相同：通过图形用户界面。这允许艺术家和工作室实现他们自己的功能和自动化。
- en: Python, a highly extensible programming language with low barriers to entry,
    is widely used in computer graphics.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python，一种高度可扩展且入门门槛低的编程语言，在计算机图形学中得到了广泛应用。
- en: Though Blender’s core is written in C and C++, menus and graphic elements use
    Python. That allows custom and factory functionalities to share the same look
    and feel.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Blender 的核心是用 C 和 C++ 编写的，但菜单和图形元素使用 Python。这允许自定义和工厂功能具有相同的视觉和感觉。
- en: In this chapter, we’ll learn how to run Python commands in Blender and where
    to look for their outcome. We will also see where a history of past instructions
    is found and how to use that to our advantage. Lastly, we will introduce a code
    editor and a version control system and see how they help make our work easier.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何在 Blender 中运行 Python 命令以及在哪里查找它们的输出。我们还将了解过去指令的历史记录在哪里，以及如何利用这一点。最后，我们将介绍代码编辑器和版本控制系统，并看看它们如何帮助我们简化工作。
- en: By the end of this chapter, you will understand how a programmer works and why
    it is not so different from using software in the first place.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解程序员是如何工作的，以及为什么这与最初使用软件并没有那么不同。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: The scripting workspace
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本工作区
- en: Python execution
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 执行
- en: Version control
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 版本控制
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Besides Blender 3.3+ or in this case, Blender 3.3 ([https://www.blender.org/download/lts/3-3](https://www.blender.org/download/lts/3-3)),
    you will require the following free tools:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 除了 Blender 3.3+ 或在这种情况下，Blender 3.3 ([https://www.blender.org/download/lts/3-3](https://www.blender.org/download/lts/3-3))，你还需要以下免费工具：
- en: Visual Studio Code, available at [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download).
    Version 1.66 is used in this book, and is available at [https://code.visualstudio.com/updates/v1_66](https://code.visualstudio.com/updates/v1_66)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Visual Studio Code，可在 [https://code.visualstudio.com/Download](https://code.visualstudio.com/Download)
    下载。本书使用的是版本 1.66，可在 [https://code.visualstudio.com/updates/v1_66](https://code.visualstudio.com/updates/v1_66)
    找到。
- en: Git (optional), found at [https://git-scm.com/downloads](https://git-scm.com/downloads)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Git（可选），可在 [https://git-scm.com/downloads](https://git-scm.com/downloads) 找到。
- en: 'You are encouraged to write your own code; the examples for this chapter can
    be found at the following URL: [https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch1](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch1).'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励你编写自己的代码；本章的示例可在以下 URL 找到：[https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch1](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch1)。
- en: Since it is a free, open source software, there are plenty of ways to install
    Blender. We are going to look at the most common install solutions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它是免费的开源软件，安装 Blender 有很多种方法。我们将探讨最常见的安装解决方案。
- en: Installing Blender
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Blender
- en: The procedure for installing Blender varies with the operating system. Like
    most applications, installers for *Microsoft Windows* and *Apple macOS* are provided.
    Also, portable versions, such as archives that can be uncompressed and executed
    everywhere in the system, are available for *Linux* and Windows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Blender 的过程因操作系统而异。像大多数应用程序一样，为 *Microsoft Windows* 和 *Apple macOS* 提供了安装程序。此外，适用于
    *Linux* 和 Windows 的便携式版本，例如可以解压缩并在系统中的任何地方执行的存档，也是可用的。
- en: The version of Blender used in this book, 3.3, might differ from other versions
    already installed on the system. In that case, we can install different versions
    of Blender on the same machine.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用的 Blender 版本 3.3 可能与系统上已安装的其他版本不同。在这种情况下，我们可以在同一台机器上安装不同版本的 Blender。
- en: Installing Blender on Windows
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Blender
- en: 'There are more ways to install a program on Microsoft Windows: Windows Installer,
    *Microsoft Store*, and *using a portable archive*. While most application publishers
    choose one of those options, all of them are available for Blender.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上安装程序有多种方式：Windows 安装程序、*Microsoft Store* 和 *使用便携式存档*。虽然大多数应用程序发布者会选择其中之一，但所有这些选项都适用于
    Blender。
- en: Installing multiple versions via Windows Installer
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通过 Windows 安装程序安装多个版本
- en: The most common way to install Blender on Windows is to download `.msi` file
    installs Blender. Before Blender 3.4, only one of the multiple installed versions
    was available in the **Start** menu.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Blender 最常见的方式是下载 `.msi` 文件来安装 Blender。在 Blender 3.4 之前，**开始**
    菜单中只能使用多个安装版本中的一个。
- en: If that is the case for you, the other versions can be accessed by navigating
    to the `Program Files` folder, usually `C:\Program Files\Blender Foundation`,
    using Windows Explorer.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的情况是这样，其他版本可以通过导航到 `Program Files` 文件夹来访问，通常是 `C:\Program Files\Blender Foundation`，使用
    Windows 资源管理器。
- en: 'We can execute `blender.exe` directly from the `Blender 3.3` folder or use
    right-click > **New** > **Shortcut** in Windows Explorer and create a shortcut
    to it:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以直接从 `Blender 3.3` 文件夹中执行 `blender.exe`，或者在 Windows 资源管理器中使用右键点击 > **新建**
    > **快捷方式**来创建一个快捷方式：
- en: '![Figure 1.1: Multiple versions of Blender in Program Files](img/Figure_1.1_B18375.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1：程序文件中 Blender 的多个版本](img/Figure_1.1_B18375.jpg)'
- en: 'Figure 1.1: Multiple versions of Blender in Program Files'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：程序文件中 Blender 的多个版本
- en: Alternatively, since version 3.3 is a *Long-term Support* version, it is also
    available in the Microsoft Store.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，由于 3.3 是一个 *长期支持* 版本，它也可在 Microsoft Store 中找到。
- en: Installing Blender from the Microsoft Store
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从 Microsoft Store 安装 Blender
- en: 'The download page of Blender 3.3 provides a link to the Microsoft Store installer.
    Alternatively, we can start `blender` in the top bar. Once we get to the **Blender**
    page, we make sure that it’s published by **Blender Foundation** and click the
    **Get** button:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 3.3 的下载页面提供了一个链接到 Microsoft Store 安装程序。或者，我们可以在顶部栏中启动 `blender`。一旦我们到达
    **Blender** 页面，我们确保它是由 **Blender Foundation** 发布的，然后点击 **获取** 按钮：
- en: '![Figure 1.2: Installing Blender from the Microsoft Store](img/Figure_1.02_B18375.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2：从 Microsoft Store 安装 Blender](img/Figure_1.02_B18375.jpg)'
- en: 'Figure 1.2: Installing Blender from the Microsoft Store'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：从 Microsoft Store 安装 Blender
- en: 'That will add a Blender 3.3 entry in the **Start** menu:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在 **开始** 菜单中添加一个 Blender 3.3 条目：
- en: '![Figure 1.3: Multiple versions in the Start menu](img/Figure_1.03_B18375.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3：开始菜单中的多个版本](img/Figure_1.03_B18375.jpg)'
- en: 'Figure 1.3: Multiple versions in the Start menu'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：开始菜单中的多个版本
- en: Microsoft Store gives the advantage of always adding a shortcut for the installed
    version. If, for some reason, Microsoft Store is not an option, we can download
    a portable archive.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Store 的优势是始终为安装的版本添加快捷方式。如果出于某种原因 Microsoft Store 不是一个选项，我们可以下载一个可移植的归档。
- en: Downloading a portable archive
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 下载可移植归档
- en: To avoid any application packaging, we can download a Windows portable `.zip`
    file, or a Linux `.``tar.xz` archive.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免任何应用程序打包，我们可以下载一个 Windows 可移植的 `.zip` 文件，或者 Linux 的 `.tar.xz` 归档。
- en: Portable versions can be used from any location of the system, even removable
    drives. We only need to extract the archive in a directory of choice via right-clicking
    -> `blender.exe` or `blender` executable in the unpacked folder.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 可移植版本可以从系统的任何位置使用，甚至是可移动驱动器。我们只需要通过右键点击 -> `blender.exe` 或解压文件夹中的 `blender`
    可执行文件来在选择的目录中解压归档。
- en: Installing multiple versions on macOS
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 macOS 上安装多个版本
- en: We can download the `.dmg` packages for *Apple Intel* or *Apple Silicon* computers.
    Once downloaded, double-clicking the file will open the installer window. If another
    version of Blender is already present in the system, a prompt dialog will ask
    whether we want to keep both or replace the installed version with the new one.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以下载适用于 *Apple Intel* 或 *Apple Silicon* 计算机的 `.dmg` 包。下载后，双击文件将打开安装程序窗口。如果系统中已经存在另一个
    Blender 版本，将弹出一个提示对话框，询问我们是否想保留两个版本或用新版本替换已安装的版本。
- en: 'Selecting `Blender 3.3` using right-click -> **Rename** on the **Application**
    entry in the file manager:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在文件管理器中应用程序条目上右键点击 -> **重命名** 来选择 `Blender 3.3`：
- en: '![Figure 1.4: Installing an additional version of Blender on macOS](img/Figure_1.4_B18375.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4：在 macOS 上安装 Blender 的附加版本](img/Figure_1.4_B18375.jpg)'
- en: 'Figure 1.4: Installing an additional version of Blender on macOS'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：在 macOS 上安装 Blender 的附加版本
- en: 'There are many other ways to install Blender: a link to stores such as *Steam*
    (Windows, macOS, or Linux) or *Snapcraft* (Linux only) is provided on the download
    page, not to mention the package manager of Linux distribution (*apt* on *Ubuntu*,
    *yum* on *CentOS*, and so on). It is worth mentioning that it is possible to build
    Blender from the source code, but that’s an advanced topic beyond the scope of
    this book.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Blender 的方法有很多：下载页面提供了一个链接到如 *Steam*（Windows、macOS 或 Linux）或 *Snapcraft*（仅限
    Linux）的商店，更不用说 Linux 发行版的包管理器（例如 *Ubuntu* 上的 *apt*、*CentOS* 上的 *yum* 等）。值得一提的是，可以从源代码构建
    Blender，但这超出了本书的范围。
- en: While this book sticks to version 3.3, the examples should work on future releases
    of the 3.x series with minor corrections at worst.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这本书坚持使用版本 3.3，但示例应该可以在 3.x 系列的未来版本上运行，最多只需进行一些小的修正。
- en: A future major release, such as Blender 4 or 5, is almost guaranteed to break
    compatibility with past scripts. Still, the knowledge from this book about best
    practices and thought patterns will stand the test of time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 未来的一次重大发布，如 Blender 4 或 5，几乎可以保证与过去的脚本不兼容。尽管如此，本书关于最佳实践和思维模式的知识将经得起时间的考验。
- en: Now that we have installed Blender on our system, we can dive into its scripting
    capabilities.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在我们系统上安装了 Blender，我们可以深入探索其脚本功能。
- en: The Scripting workspace – first steps with Python
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 脚本工作区 – 使用 Python 的第一步
- en: A sequence of Python instructions is often referred to as a **script**. Likewise,
    the activity of producing Python code is usually called **Scripting**.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一系列 Python 指令通常被称为 **脚本**。同样，生成 Python 代码的活动通常被称为 **脚本编写**。
- en: Blender’s interface consists of different **workspaces**. Each of them is a
    tab meant for a different activity. At the time of writing, the **Scripting**
    tab is the last on the right side of the screen. Clicking on it switches to the
    interface designed for Python users.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 的界面由不同的 **工作区** 组成。每个工作区都是一个标签页，用于不同的活动。在撰写本文时，**脚本** 标签位于屏幕右侧的最末尾。点击它将切换到为
    Python 用户设计的界面。
- en: 'The most significant elements are the **Python console**, the **Info Log**,
    and the **Text Editor**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最显著的部分是 **Python 控制台**、**信息日志** 和 **文本编辑器**：
- en: '![Figure 1.5: Blender scripting interface](img/Figure_1.05_B18375.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5：Blender 脚本界面](img/Figure_1.05_B18375.jpg)'
- en: 'Figure 1.5: Blender scripting interface'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：Blender 脚本界面
- en: We will start our journey in Python by typing commands in the Python console.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在 Python 控制台中输入命令来开始我们的 Python 之旅。
- en: The Python console
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 控制台
- en: 'The console is an interactive terminal with a header that displays the current
    version of Python (`3.10.2`, at the time of writing) and a `>>>` prompt sign to
    advertise that it’s waiting for interactive text. All we need to do is hover the
    cursor on it and type an instruction:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台是一个交互式终端，其标题栏显示当前 Python 的版本（撰写本文时为 `3.10.2`）和一个 `>>>` 提示符，表明它正在等待交互式文本。我们只需将光标悬停在它上面并输入指令：
- en: '![Figure 1.6: The Python console](img/Figure_1.6_B18375_New.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6：Python 控制台](img/Figure_1.6_B18375_New.jpg)'
- en: 'Figure 1.6: The Python console'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6：Python 控制台
- en: “Hello World!” from the console
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: “Hello World！”来自控制台
- en: The practice called *Hello World!* is a way to familiarize yourself with a new
    programming language. It’s about displaying the titular phrase using a command.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为 *Hello World!* 的实践是一种熟悉新编程语言的方式。它涉及到使用命令显示标题短语。
- en: 'We will use the `print` function for that. Example code for the interactive
    console starts with the `>>>` prompt symbol. We don’t need to type that as well
    in the console: it is already there. We click on the console area and type `print("Hello
    World")`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `print` 函数来做这件事。交互式控制台的示例代码以 `>>>` 提示符开始。我们不需要在控制台中输入那个，它已经在那里了。我们点击控制台区域并输入
    `print("Hello World")`：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then press *Enter*. The console output is displayed in a different color and
    doesn’t start with the prompt:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按 *Enter*。控制台输出将以不同的颜色显示，并且不以提示符开头：
- en: '![Figure 1.7: Displaying our output on the console](img/Figure_1.7_B18375.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7：在控制台上显示我们的输出](img/Figure_1.7_B18375.jpg)'
- en: 'Figure 1.7: Displaying our output on the console'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7：在控制台上显示我们的输出
- en: We can use the Python console to query information about the Python version.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Python 控制台查询有关 Python 版本的信息。
- en: Checking the Python release
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查 Python 版本
- en: 'The current version of Python can be displayed anytime using the `sys` module.
    We need to import this module and look for its `version` attribute. That takes
    the following two lines:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `sys` 模块在任何时候显示当前 Python 的版本。我们需要导入这个模块并查找其 `version` 属性。这需要以下两行：
- en: '[PRE1]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The console prints out verbose information about the version in use:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台会打印出关于正在使用版本的详细信息：
- en: '[PRE2]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The three digits of the version number stand for *major*, *minor*, and *micro*
    versions. A different major release number implies heavy changes in the language
    syntax: *Python 3.0* is very different from any Python 2.x releases. A minor release
    introduces new features but doesn’t break compatibility with older code. A micro
    release doesn’t bring changes to the language; it consists of bug fixes and other
    forms of maintenance.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 版本号的三个数字代表 *主版本*、*次版本* 和 *修订版本*。不同的主版本号意味着语言语法的重大变化：*Python 3.0* 与任何 Python
    2.x 版本有很大不同。次版本引入了新特性，但不会破坏与旧代码的兼容性。修订版本不会对语言进行更改；它仅包括错误修复和其他维护形式。
- en: 'The changes brought with each new Python version are available as *Release
    Notes* on the download page of the **Python** **Software Foundation**:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 每个新 Python 版本带来的更改都可以在 **Python 软件基金会** 的下载页面上的 *发布说明* 中找到：
- en: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.python.org/downloads/](https://www.python.org/downloads/)'
- en: 'If our script relies on a feature introduced with a minor release, we can check
    the version numbers individually using `version_info`, as seen here:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的脚本依赖于次版本引入的特性，我们可以使用 `version_info` 单独检查版本号，如下所示：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Compared with other software, Blender follows the Python release cycle very
    tightly. This is done mostly to take advantage of the latest improvements in terms
    of performance and bug fixes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他软件相比，Blender 非常紧密地遵循 Python 发布周期。这主要是为了利用性能和错误修复方面的最新改进。
- en: Checking the Blender release
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 检查 Blender 版本
- en: The current Blender release can be checked in the graphical user interface or
    in Python scripts.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当前 Blender 版本可以在图形用户界面或 Python 脚本中进行检查。
- en: Checking the Blender release in the interface
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在界面中检查 Blender 版本
- en: 'Starting from version 3.0, the most immediate place to check for the version
    number of Blender is in the lower-right corner of the window. In version 3.3,
    the version number is followed by the current time and frame set for the scene:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从 3.0 版本开始，检查 Blender 版本号最直接的地方是窗口的右下角。在 3.3 版本中，版本号后面跟着场景的当前时间和帧设置：
- en: '![Figure 1.8: Blender version number in the status bar](img/Figure_1.08_B18375.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8：状态栏中的 Blender 版本号](img/Figure_1.08_B18375.jpg)'
- en: 'Figure 1.8: Blender version number in the status bar'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8：状态栏中的 Blender 版本号
- en: Another way to display the version number is by clicking the Blender icon in
    the top-right corner of the menu bar and then selecting **About Blender** from
    the menu.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种显示版本号的方法是点击菜单栏右上角的 Blender 图标，然后从菜单中选择 **关于 Blender**。
- en: We can also get Blender’s version number via Python scripts.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过 Python 脚本来获取 Blender 的版本号。
- en: Checking the Blender release in Python scripts
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 在 Python 脚本中检查 Blender 版本
- en: 'If our scripts rely on features from a specific version, they must be able
    to determine on which release of Blender it is running. That information is contained
    in the `bpy.app` module. We can display the current version by typing these lines
    in the console:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的脚本依赖于特定版本的特性，它们必须能够确定正在运行的 Blender 版本。这些信息包含在 `bpy.app` 模块中。我们可以在控制台中输入以下行来显示当前版本：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In *Blender 3.3.2*, the console returns the following:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *Blender 3.3.2* 中，控制台返回以下信息：
- en: '[PRE5]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Unlike `sys.version_info`, `bpy.app.version` doesn’t contain names, just numbers.
    Nevertheless, we can store them in variables using the Python syntax:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 与 `sys.version_info` 不同，`bpy.app.version` 不包含名称，只有数字。尽管如此，我们可以使用 Python 语法将它们存储在变量中：
- en: '[PRE6]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Then, we can use `print` to display the single version numbers:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用 `print` 来显示单个版本号：
- en: '[PRE7]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: A new major release of Blender brings drastic changes to the interface and workflow,
    while a minor release introduces new tools for animation or for generating images.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 的新主版本会对界面和工作流程带来重大变化，而次版本会引入用于动画或生成图像的新工具。
- en: To display the information, we have used the `print` function. Since functions
    are the first step toward structured programming, we will have a better look at
    how they work and how we can change the `"Hello World!"` message to something
    else.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示这些信息，我们使用了 `print` 函数。由于函数是结构化编程的第一步，我们将更深入地了解它们的工作原理以及如何将 `"Hello World!"`
    消息更改为其他内容。
- en: Invoking functions
  id: totrans-98
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用函数
- en: 'When we use a *function*, we say that we *call* or *invoke* that function.
    To do that, we type its name, followed by parentheses. Between parentheses, there
    is the function’s *argument*, such as the input on which it operates:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用一个 *函数* 时，我们说我们 *调用* 或 *调用* 那个函数。为此，我们输入其名称，然后跟随着括号。括号之间是函数的 *参数*，例如它操作的输入：
- en: '![Figure 1.9: Function and argument in a Python script](img/Figure_1.09_B18375.jpg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9：Python 脚本中的函数和参数](img/Figure_1.09_B18375.jpg)'
- en: 'Figure 1.9: Function and argument in a Python script'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9：Python 脚本中的函数和参数
- en: When invoked, the `print` function reads the argument and displays it on a new
    line.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用时，`print` 函数读取参数并在新行上显示它。
- en: 'The `"Hello World!"` argument is a *string literal*: it can be any sequence
    of characters enclosed between quotation marks (`""`).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`"Hello World!"` 参数是一个 *字符串字面量*：它可以是被引号 (`""`) 包围的任何字符序列。'
- en: 'We can feed any other message to `print`; the output will vary accordingly:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将任何其他消息传递给 `print`；输出将相应地变化：
- en: '![Figure 1.10: Printing text in the Blender Python console](img/Figure_1.10_B18375.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10：在 Blender Python 控制台中打印文本](img/Figure_1.10_B18375.jpg)'
- en: 'Figure 1.10: Printing text in the Blender Python console'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10：在 Blender Python 控制台中打印文本
- en: Now that we have gained confidence, we will look at some Blender commands.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经获得了信心，我们将查看一些 Blender 命令。
- en: The Info Log
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 信息日志
- en: 'The user activity is displayed as Python commands in the log area, at the bottom
    left of the **Scripting** workspace. We can open Blender and perform the following
    operations:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 用户活动以 Python 命令的形式显示在日志区域，位于 **脚本** 工作区的左下角。我们可以打开 Blender 并执行以下操作：
- en: Delete the default cube in the Viewport via right-click -> **Delete**.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过右键单击 -> **删除** 删除视口中的默认立方体。
- en: From the Viewport top bar, click **Add** -> **Mesh** -> **Cylinder**.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从视口顶部栏，点击 **添加** -> **网格** -> **圆柱体**。
- en: 'From the Viewport top bar, click **Add** -> **Mesh** -> **UV Sphere**. We will
    find these three lines in the Info Log area:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从视口顶部栏，点击 **添加** -> **网格** -> **UV 球体**。我们将在信息日志区域找到这三行：
- en: '![Figure 1.11: History of actions in the Info Log area](img/Figure_1.11_B18375.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11：信息日志区域中的操作历史](img/Figure_1.11_B18375.jpg)'
- en: 'Figure 1.11: History of actions in the Info Log area'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11：信息日志区域中的操作历史
- en: The entries of the Info Log are the Python commands triggered by our recent
    activity. We can copy those lines and use them in our scripts.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 信息日志的条目是我们最近活动触发的 Python 命令。我们可以复制这些行并将它们用于我们的脚本中。
- en: Using the lines from the log
  id: totrans-116
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用日志中的行
- en: 'Clicking or dragging with the left mouse button selects the log lines. We can
    copy them to the clipboard via right-click -> **Copy**:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 使用左鼠标按钮单击或拖动选择日志行。我们可以通过右键单击 -> **复制** 将它们复制到剪贴板：
- en: '![Figure 1.12: Copying Python commands from the Info Log](img/Figure_1.12_B18375.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12：从信息日志复制 Python 命令](img/Figure_1.12_B18375.jpg)'
- en: 'Figure 1.12: Copying Python commands from the Info Log'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12：从信息日志复制 Python 命令
- en: 'We can go back to the startup scene and paste them into the console:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回到启动场景并将它们粘贴到控制台：
- en: Restart Blender or click **File** -> **New** -> **General**.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 Blender 或点击 **文件** -> **新建** -> **通用**。
- en: Go to the **Scripting** workspace.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到 **脚本** 工作区。
- en: In the Python console, right-click -> **Paste**, and press *Enter*.
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 控制台中，右键单击 -> **粘贴**，然后按 *Enter*。
- en: 'Executing those lines will delete the initial cube, then add two objects: the
    same steps run manually earlier. We will see how we can change their content and
    affect the outcome.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 执行这些行将删除初始立方体，然后添加两个对象：之前手动运行的相同步骤。我们将看到如何更改它们的内容并影响结果。
- en: Changing parameters
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更改参数
- en: 'Let’s not focus too much on the code for now: it will be clearer in the next
    chapter. Anyway, we might recognize a pattern from the `"Hello` `World!"` example:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们暂时不要过于关注代码：它将在下一章中更加清晰。无论如何，我们可能会从 `"Hello` `World!"` 示例中识别出一个模式：
- en: '[PRE8]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And at least one argument is self-explanatory in its purpose:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 至少有一个参数在其目的上是一目了然的：
- en: '[PRE9]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`location=(x, y, z)` represents the 3D coordinates where a new object is added.
    We can change the last line and create our sphere just above the cylinder.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`location=(x, y, z)` 表示添加新对象的三维坐标。我们可以更改最后一行，并在圆柱体上方创建我们的球体。'
- en: 'Let’s revert to the startup scene once more and paste our lines again, but
    before we press *Enter*, this time, we change the last zero to `2`:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次回到启动场景，并将我们的行粘贴进去，但这次在我们按下 *Enter* 键之前，我们将最后一个零改为 `2`：
- en: '[PRE10]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We have just run our first script. It deletes the selected objects and stacks
    two new shapes on top of each other:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚运行了我们的第一个脚本。它删除了选定的对象，并在彼此之上堆叠了两个新形状：
- en: '![Figure 1.13: Cylinder and Sphere primitives, created via Python](img/Figure_1.13_B18375.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.13：通过 Python 创建的圆柱体和球体原语](img/Figure_1.13_B18375.jpg)'
- en: 'Figure 1.13: Cylinder and Sphere primitives, created via Python'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.13：通过 Python 创建的圆柱体和球体原语
- en: The Python console can execute code with immediacy but is not very practical
    for more than a few lines. We will now see how to run Python scripts as documents.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Python 控制台可以立即执行代码，但不太适用于超过几行的代码。我们现在将看到如何将 Python 脚本作为文档运行。
- en: The Text Editor
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: This is the largest element in the **Scripting** workspace. It can be used for
    writing text and scripts.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 **脚本** 工作区中最大的元素。它可以用来编写文本和脚本。
- en: 'To add a new script, we click the **+ New** button in the top bar and create
    a new text:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加新的脚本，我们点击顶部栏中的 **+ 新建**（**+ New**）按钮并创建一个新的文本：
- en: '![Figure 1.14: Creating a new text object in the Text Editor](img/Figure_1.14_B18375.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.14：在文本编辑器中创建新的文本对象](img/Figure_1.14_B18375.jpg)'
- en: 'Figure 1.14: Creating a new text object in the Text Editor'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.14：在文本编辑器中创建新的文本对象
- en: 'Let’s type some words, for instance, a more verbose version of *“Hello World!”*.
    Like many programmer editors, Blender displays the line numbers on the left:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们输入一些单词，例如，*“Hello World！”* 的更冗长的版本。像许多程序员编辑器一样，Blender 在左侧显示行号：
- en: '![](img/Figure_1.15_B18375.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_1.15_B18375.jpg)'
- en: 'Figure 1.15: Writing scripts in the Text Editor'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.15：在文本编辑器中编写脚本
- en: 'Also, the words have different colors according to their Python meaning: white
    for the function, yellow for the string, and red for the parenthesis. This feature
    is called **syntax highlighting** and gives useful visual feedback: the color
    of the words depends on their role in the programming language.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，单词根据其 Python 意义有不同的颜色：函数为白色，字符串为黄色，括号为红色。这个功能被称为 **语法高亮**，提供了有用的视觉反馈：单词的颜色取决于其在编程语言中的作用。
- en: Running text documents
  id: totrans-146
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行文本文档
- en: 'If the current text is a Python script, we can execute it from the Text Editor:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果当前文本是 Python 脚本，我们可以从文本编辑器中执行它：
- en: Click on **Run Script** from the **Text** menu in the Text Editor menu bar.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在文本编辑器的菜单栏中，点击 **运行脚本**（**Run Script**）菜单下的 **文本**（**Text**）。
- en: 'Look for the execution outcome info in the Info Log:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在信息日志中查找执行结果信息：
- en: '![Figure 1.16: Executing scripts in the Text Editor](img/Figure_1.16_B18375.jpg)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.16：在文本编辑器中执行脚本](img/Figure_1.16_B18375.jpg)'
- en: 'Figure 1.16: Executing scripts in the Text Editor'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.16：在文本编辑器中执行脚本
- en: 'The Info Log confirms that something has happened:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 信息日志确认了有事情发生：
- en: '![Figure 1.17: The script execution mentioned in the Info Log](img/Figure_1.17_B18375.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.17：信息日志中提到的脚本执行](img/Figure_1.17_B18375.jpg)'
- en: 'Figure 1.17: The script execution mentioned in the Info Log'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.17：信息日志中提到的脚本执行
- en: But we might be disappointed, as the printout text is apparently nowhere to
    be found!
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可能会失望，因为打印出的文本似乎无处可寻！
- en: The reason is that the output of the Text Editor goes straight to the **System
    Console**, the *operating system’s* command line.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 原因是文本编辑器的输出直接进入 **系统控制台**，即 *操作系统的* 命令行。
- en: On Windows, we can display it using **Window** ->**Toggle System Console** from
    Blender’s top bar. To read system messages on a Unix-based system (Linux or macOS),
    we must start Blender from a command line in the first place.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上，我们可以通过从 Blender 的顶部栏选择 **窗口**（**Window**）->**切换系统控制台** 来显示它。要在基于
    Unix 的系统（Linux 或 macOS）上读取系统消息，我们必须首先从命令行启动 Blender。
- en: 'Once brought up, **System Console** displays the output printed by the Text
    Editor:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦打开，**系统控制台** 将显示文本编辑器打印的输出：
- en: '![Figure 1.18: Displaying the System Console on Windows](img/Figure_1.18_B18375.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.18：在 Windows 上显示系统控制台](img/Figure_1.18_B18375.jpg)'
- en: 'Figure 1.18: Displaying the System Console on Windows'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.18：在 Windows 上显示系统控制台
- en: 'The default name for our text block is `Text`. It can be renamed by clicking
    on it. We’ll better add the `.py` suffix as an extension to make it clear that
    it’s a Python script:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们文本块的默认名称是 `Text`。可以通过点击它来重命名。我们最好添加 `.py` 后缀作为扩展名，使其更清楚地表明它是一个 Python 脚本：
- en: '![Figure 1.19: Renaming text blocks in Blender](img/Figure_1.19_B18375.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.19：在 Blender 中重命名文本块](img/Figure_1.19_B18375.jpg)'
- en: 'Figure 1.19: Renaming text blocks in Blender'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.19：在 Blender 中重命名文本块
- en: Copying the Python console as script
  id: totrans-164
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 将 Python 控制台作为脚本复制
- en: Remember the lines we entered in the Python console earlier? If we haven’t closed
    Blender or loaded a new scene, we can copy them to the *clipboard* at once.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 记得我们之前在 Python 控制台中输入的代码吗？如果我们没有关闭 Blender 或加载新的场景，我们可以立即将它们复制到 *剪贴板*。
- en: From the **Console** menu in the Python console top bar, select **Copy** **as
    Script**.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Python 控制台顶部的 **控制台** 菜单中选择 **复制** **为脚本**。
- en: Create another text block using **Text** > **New** from the Text Editor menu.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用文本编辑器菜单中的 **文本** > **新建** 创建另一个文本块。
- en: Give the text a new name, such as `OurFirstScript.py`.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给文本起一个新的名字，例如 `OurFirstScript.py`。
- en: Paste the lines from the clipboard via right-click -> **Paste** in the text
    area.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在文本区域右键点击 -> **粘贴** 将剪贴板中的行粘贴到文本区域。
- en: 'Looking at the Text Editor, it turns out that the full version of the script
    is a little bit longer than our three lines:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 看看文本编辑器，我们发现脚本的完整版本比我们的三行要长一些：
- en: '![Figure 1.20: The Python console input copied to the Text Editor](img/Figure_1.20_B18375.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.20：Python 控制台输入复制到文本编辑器](img/Figure_1.20_B18375.jpg)'
- en: 'Figure 1.20: The Python console input copied to the Text Editor'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.20：Python 控制台输入复制到文本编辑器
- en: The first five rows set up the console environment. They are executed behind
    the scenes when Blender starts.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 前五行设置控制台环境。它们在 Blender 启动时在幕后执行。
- en: 'Lines starting with a hash (`#`) are *comments*: they are ignored by Python
    and contain reminders or explanations meant for human readers.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 以哈希 (`#`) 开头的行是 *注释*：它们被 Python 忽略，包含为人类读者提供的提醒或解释。
- en: Our own instructions are respectively at lines **13**, **17**, and **21**. This
    script can be executed via **Text** -> **Run Script** as we did before or via
    the *Alt* + *P* keys combination.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们自己的指令分别位于第 **13**、**17** 和 **21** 行。此脚本可以通过 **文本** -> **运行脚本** 如我们之前所做的那样执行，或者通过按
    *Alt* + *P* 键组合。
- en: Exporting text files
  id: totrans-176
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 导出文本文件
- en: 'The notepad icon lets us switch between different text blocks via a drop-down
    list:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 笔记本图标让我们可以通过下拉列表在不同的文本块之间切换：
- en: '![Figure 1.21: Switching between text blocks in Blender](img/Figure_1.21_B18375.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.21：在 Blender 之间切换文本块](img/Figure_1.21_B18375.jpg)'
- en: 'Figure 1.21: Switching between text blocks in Blender'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.21：在 Blender 之间切换文本块
- en: 'Selecting **Text** | **Save As…** from the editor menu bar saves the current
    text to disk. A new window lets us select a folder and confirm the filename:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 从编辑器菜单栏中选择 **文本** | **另存为…** 将当前文本保存到磁盘。一个新窗口让我们选择文件夹并确认文件名：
- en: '![Figure 1.22: Saving the content of the Text Editor to file](img/Figure_1.22_B18375.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.22：将文本编辑器的内容保存到文件](img/Figure_1.22_B18375.jpg)'
- en: 'Figure 1.22: Saving the content of the Text Editor to file'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.22：将文本编辑器的内容保存到文件
- en: Blender’s Text Editor is great for quick tests, but a programmer text editor
    is usually preferred for more serious tasks. We are going to use *Visual Studio
    Code* in the next section.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Blender 的文本编辑器非常适合快速测试，但程序员文本编辑器通常更适合更严肃的任务。我们将在下一节中使用 *Visual Studio Code*。
- en: External editor – Visual Studio Code
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 外部编辑器 - Visual Studio Code
- en: '**Visual Studio Code** (**VS Code**), is a fast, multiplatform, free editor
    from Microsoft, available for Windows, macOS, and Linux. Using an external editor
    makes our code independent from a session of Blender. Also, a programmer text
    editor offers many utilities besides syntax highlighting.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code** （**VS Code**）是微软的一个快速、多平台、免费的编辑器，适用于 Windows、macOS 和
    Linux。使用外部编辑器可以使我们的代码独立于 Blender 的会话。此外，程序员文本编辑器除了语法高亮外，还提供了许多实用工具。'
- en: 'VS Code 1.66 is used in this book. It is a fast, lightweight editor available
    for most platforms, but there are plenty of alternatives – most notably, the following:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本书使用 VS Code 1.66。这是一个快速、轻量级的编辑器，适用于大多数平台，但有很多替代品 - 最值得注意的是以下这些：
- en: '**Notepad++**: This is a fast but powerful editor for Windows, available at
    [https://notepad-plus-plus.org.](https://notepad-plus-plus.org%0D)'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Notepad++**：这是一个快速但强大的 Windows 编辑器，可在 [https://notepad-plus-plus.org.](https://notepad-plus-plus.org%0D)
    找到。'
- en: '**PyCharm**: This is a Python **integrated development environment** (**IDE**)
    by **JetBrains**. A free community version can be found at [https://www.jetbrains.com/pycharm.](https://www.jetbrains.com/pycharm%0D)'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm**：这是一个由 **JetBrains** 提供的 Python **集成开发环境** （**IDE**）。可以在 [https://www.jetbrains.com/pycharm.](https://www.jetbrains.com/pycharm%0D)
    找到免费的社区版本。'
- en: '**LightTable**: This is an interesting open source editor, available at [http://lighttable.com.](http://lighttable.com%0D)'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LightTable**：这是一个有趣的开源编辑器，可在 [http://lighttable.com.](http://lighttable.com%0D)
    找到。'
- en: '**Sublime**: This is a commercial text editor, found at [https://www.sublimetext.com.](https://www.sublimetext.com%0D)'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime**：这是一个商业文本编辑器，可在 [https://www.sublimetext.com.](https://www.sublimetext.com%0D)
    找到。'
- en: Most Linux distributions come with at least one decent, ready-to-use, text editor.
    We encourage you to experiment and find the text editor of your choice.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数 Linux 发行版都至少包含一个不错的、现成的文本编辑器。我们鼓励您尝试并找到您喜欢的文本编辑器。
- en: In this section, we will set up VS Code for Python scripting.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置 VS Code 以进行 Python 脚本编写。
- en: Pick the right studio!
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 选择合适的录音室！
- en: '*VS Code* and *Visual Studio* have a similar name but are two different products
    from Microsoft. While VS Code is a programmer text editor, Visual Studio is a
    full development environment for advanced languages such as *C++*. While C++ projects
    may require a specific version of the building environment, it is safe to use
    any version of VS Code as long as Python is a supported language.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '*VS Code* 和 *Visual Studio* 名称相似，但它们是微软的两个不同的产品。虽然 VS Code 是程序员文本编辑器，但 Visual
    Studio 是用于高级语言（如 *C++*）的完整开发环境。虽然 C++ 项目可能需要特定的构建环境版本，但只要 Python 是受支持的语言，就可以安全地使用任何版本的
    VS Code。'
- en: Loading our scripts folder
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 加载我们的脚本文件夹
- en: We can load the folder that contains our script files using the `.py` file opens
    the script for editing.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `.py` 文件打开脚本文件夹来加载包含我们的脚本文件。
- en: 'Additional Python support can be installed by clicking **Install** on the bottom-right
    notification:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过点击右下角的**安装**来安装额外的 Python 支持：
- en: '![Figure 1.23: Our Python script in VS Code](img/Figure_1.23_B18375.jpg)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.23：我们的 Python 脚本在 VS Code 中](img/Figure_1.23_B18375.jpg)'
- en: 'Figure 1.23: Our Python script in VS Code'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.23：我们的 Python 脚本在 VS Code 中
- en: Keeping Blender’s text blocks in sync
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保持 Blender 的文本块同步
- en: 'When a text file open in Blender is changed by another application, a red question
    mark appears to the left of the filename:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Blender 中打开的文本文件被另一个应用程序更改时，文件名左侧会出现一个红色的问号：
- en: '![Figure 1.24: Blender detects changes in a saved script](img/Figure_1.24_B18375.jpg)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.24：Blender 检测已保存脚本中的更改](img/Figure_1.24_B18375.jpg)'
- en: 'Figure 1.24: Blender detects changes in a saved script'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.24：Blender 检测已保存脚本中的更改
- en: 'Clicking the question mark displays the viable actions:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 点击问号会显示可行的操作：
- en: '**Reload from disk**: This loads and displays the up-to-date file'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**从磁盘重新加载**：这将加载并显示最新的文件'
- en: '**Make text internal (separate copy)**: The displayed text is now part of the
    Blender session, no longer tied to any text file on disk'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使文本内部（单独的副本）**：显示的文本现在是 Blender 会话的一部分，不再与磁盘上的任何文本文件相关联'
- en: '**Ignore**: Changes are ignored; Blender will still display the old text and
    keep reporting that it’s out of sync with the text saved on disk'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**忽略**：更改被忽略；Blender 仍会显示旧文本并继续报告它与磁盘上保存的文本不同步'
- en: To have additional help, we can add versioning to our files. That allows us
    to make changes without worrying about breaking things or losing our work.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 为了获得额外的帮助，我们可以对我们的文件添加版本控制。这允许我们进行更改而不用担心破坏东西或丢失我们的工作。
- en: Version control and backup
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制和备份
- en: '**Version control** helps to keep track of file changes, save snapshots of
    the code, and roll back to older versions if necessary. **Git** is the most used
    versioning system at present; it is free and integrated into most editors. In
    this section, we will use version control in combination with VS Code.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '**版本控制**有助于跟踪文件更改，保存代码的快照，并在必要时回滚到旧版本。**Git**是目前最常用的版本控制系统；它是免费的，并集成到大多数编辑器中。在本节中，我们将结合使用版本控制和
    VS Code。'
- en: Initializing the repository
  id: totrans-211
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化存储库
- en: 'Once Git is installed, it can be used from VS Code, by activating the **Source
    Control** tab using the *branch* icon on the left column bar. The **Initialize
    Repository** button adds versioning to our folder:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Git 后，可以通过 VS Code 使用它，通过在左侧列栏上的 *分支* 图标激活 **源代码管理** 选项卡。**初始化存储库**按钮将版本控制添加到我们的文件夹：
- en: '![Figure 1.25: Adding version control in VS Code](img/Figure_1.25_B18375.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.25：在 VS Code 中添加版本控制](img/Figure_1.25_B18375.jpg)'
- en: 'Figure 1.25: Adding version control in VS Code'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.25：在 VS Code 中添加版本控制
- en: 'The icon will change and warn us about the presence of files. We click the
    **+** icon next to the filename to add them to versioning. In Git terminology,
    we are going to **Stage** the current changes:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 图标将改变，并警告我们文件的存在。我们点击文件名旁边的 **+** 图标将它们添加到版本控制中。在 Git 术语中，我们将当前更改**暂存**：
- en: '![Figure 1.26: Staging changes in VS Code](img/Figure_1.26_B18375.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.26：在 VS Code 中暂存更改](img/Figure_1.26_B18375.jpg)'
- en: 'Figure 1.26: Staging changes in VS Code'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.26：在 VS Code 中暂存更改
- en: 'The editor shows the before/after conditions of our files. We can add a message
    in the text field on the top left and click the *tick* icon. This will **Commit**
    our changes to the project history:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器显示了我们的文件的前/后条件。我们可以在左上角的文本框中添加一条消息并单击 *勾选* 图标。这将 **提交** 我们的变化到项目历史记录：
- en: '![Figure 1.27: Commit changes in VS Code](img/Figure_1.27_B18375.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.27：在 VS Code 中提交更改](img/Figure_1.27_B18375.jpg)'
- en: 'Figure 1.27: Commit changes in VS Code'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.27：在 VS Code 中提交更改
- en: Making changes
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 进行更改
- en: 'Let’s say we don’t want our script to delete the current objects. To do that,
    we delete line number **13**:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们不想我们的脚本删除当前对象。为此，我们删除行号 **13**：
- en: '[PRE11]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'When the file is saved, version control detects this change. We can stage that
    by clicking the `OurFirstScript.py` in the left column, VS Code highlights the
    current changes. We add a message for this new commit and click the **tick** button
    again:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 当文件被保存时，版本控制会检测到这个更改。我们可以通过在左侧列中单击 `OurFirstScript.py` 来暂存它，VS Code 会突出显示当前更改。我们为这个新提交添加一条消息并再次单击
    **勾选** 按钮：
- en: '![Figure 1.28: Displaying changes in VS Code](img/Figure_1.28_B18375.jpg)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.28：在 VS Code 中显示更改](img/Figure_1.28_B18375.jpg)'
- en: 'Figure 1.28: Displaying changes in VS Code'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.28：在 VS Code 中显示更改
- en: 'If we go back to the **Explorer** tab and select our script, we will see that
    a section called **Timeline** can be expanded: it contains a list of our commit
    messages. Selecting a commit displays the related changes, allowing us to restore
    old lines of code. Every change that is not committed can be easily undone using
    the *Revert* function.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回到 **资源管理器** 选项卡并选择我们的脚本，我们将看到有一个名为 **时序线** 的部分可以被展开：它包含我们的提交消息列表。选择一个提交将显示相关更改，允许我们恢复旧代码行。每个未提交的更改都可以通过使用
    *撤销* 功能轻松撤销。
- en: Reverting uncommitted changes
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 撤销未提交的更改
- en: 'Let’s add some incorrect text at line **7** and save. If, for any reason, we
    cannot undo that, we can right-click our file in the **Version Control** tab and
    select **Discard Changes**:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在行 **7** 添加一些错误文本并保存。如果由于任何原因我们无法撤销，我们可以在 **版本控制** 选项卡中右键单击我们的文件并选择 **丢弃更改**：
- en: '![Figure 1.29: Discarding uncommitted changes in VS Code](img/Figure_1.29_B18375.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.29：在 VS Code 中丢弃未提交的更改](img/Figure_1.29_B18375.jpg)'
- en: 'Figure 1.29: Discarding uncommitted changes in VS Code'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.29：在 VS Code 中丢弃未提交的更改
- en: The importance of version control can be underestimated at first but becomes
    vital in more complex projects. It’s a wide topic that goes beyond the scope of
    this book, but it’s important to grasp at least the basics of it.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制的重要性一开始可能被低估，但在更复杂的项目中变得至关重要。这是一个广泛的话题，超出了本书的范围，但至少掌握其基础知识是很重要的。
- en: Summary
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we gained confidence with *scripting* and introduced the fundamental
    tools for Python programming. You learned how to look for Python commands in the
    Blender log and execute them in different contexts, and how to set up a coding
    environment. We also learned how to keep track of our code and edits.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过 *脚本编写* 增强了信心，并介绍了 Python 编程的基本工具。你学习了如何在 Blender 日志中查找 Python 命令并在不同上下文中执行它们，以及如何设置编码环境。我们还学习了如何跟踪我们的代码和编辑。
- en: In [*Chapter 2*](B18375_02.xhtml#_idTextAnchor033), we will refine our knowledge
    of Python. We will meet the most common entities and learn how to use the programming
    logic to write more useful scripts.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 2 章*](B18375_02.xhtml#_idTextAnchor033) 中，我们将深化我们对 Python 的知识。我们将遇到最常见的实体，并学习如何使用编程逻辑编写更有用的脚本。
- en: Questions
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: How do we display the sections of Blender that accept Python input?
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 Blender 中显示接受 Python 输入的部分？
- en: How can we read the output and printout from Python execution?
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何读取 Python 执行的输出和打印输出？
- en: Does Blender use Python to carry on the user actions?
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Blender 是否使用 Python 来执行用户操作？
- en: How can we look at Blender’s Python activity log?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何查看 Blender 的 Python 活动日志？
- en: How do we write scripts in Blender? Can we edit them in other applications?
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 Blender 中编写脚本？我们能否在其他应用程序中编辑它们？
- en: How and in which tab can we initialize version control in VS Code?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在哪个选项卡中初始化 VS Code 中的版本控制？
- en: How can we access a script’s timeline in VS Code?
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在 VS Code 中访问脚本的时序线？
