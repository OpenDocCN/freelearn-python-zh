- en: Chapter 2. Getting Started with Our Headlines Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。开始我们的头条项目
- en: Now that our Hello World application is up and running, we have all the groundwork
    in place to create a more useful application. Over the next few chapters, we'll
    create a Headlines application that displays up-to-date news headlines, weather
    information, and currency exchange rates to our users.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的Hello World应用程序已经启动运行，我们已经完成了所有必要的工作，可以创建一个更有用的应用程序。在接下来的几章中，我们将创建一个头条应用程序，向用户显示最新的新闻头条，天气信息和货币汇率。
- en: In this chapter, we'll introduce RSS feeds and show how to use them to automatically
    retrieve recent news articles from specific publications. In the next chapter,
    we'll discuss how to use templates to display headlines and summaries of the retrieved
    articles to our users. [Chapter 4](ch04.html "Chapter 4. User Input for Our Headlines
    Project"), *User Input for Our Headlines Page Project,* will show you how to get
    input from users so that they can customize their experience and will also look
    at how to add weather and currency data to our application. We'll finish off the
    project in [Chapter 5](ch05.html "Chapter 5. Improving the User Experience of
    Our Headlines Project"), *Improving the User Experience of Our Headlines Project,*
    by adding some CSS styles and looking at how to remember our users' preferences
    from one visit to the next.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍RSS订阅，并展示如何使用它们自动检索特定出版物的最新新闻文章。在下一章中，我们将讨论如何使用模板向用户显示检索到的文章的标题和摘要。[第4章](ch04.html
    "第4章。我们头条项目的用户输入")，*我们头条项目的用户输入*，将向您展示如何从用户那里获取输入，以便他们可以自定义他们的体验，并且还将讨论如何向我们的应用程序添加天气和货币数据。我们将在[第5章](ch05.html
    "第5章。改善我们头条项目的用户体验")中完成项目，*改善我们头条项目的用户体验*，通过添加一些CSS样式，并研究如何在用户的下一次访问中记住他们的偏好。
- en: By the end of this chapter, you'll have learned how to create a more complex
    Flask application. We'll pull raw data from real-world news stories and build
    up HTML formatting to display this to our user. You'll also learn more about routing—that
    is, having different URLs trigger different parts of our application's code.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，您将学会如何创建一个更复杂的Flask应用程序。我们将从真实世界的新闻故事中提取原始数据，并构建HTML格式以向用户显示这些内容。您还将了解更多关于路由的知识，即不同的URL触发应用程序代码的不同部分。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一章中，我们将涵盖以下主题：
- en: Setting up our project and a Git repository
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搭建我们的项目和Git仓库
- en: Creating a new Flask application
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个新的Flask应用程序
- en: Introduction to RSS and RSS feeds
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍RSS和RSS订阅
- en: Setting up our project and a Git repository
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置我们的项目和Git仓库
- en: We could simply edit our Hello World application to add the desired functionality,
    but it's cleaner to start a new project. We'll create a new Git repository, a
    new Python file, a new `.wsgi` file, and a new Apache configuration file. We'll
    do this for each of the projects in the book, which means that all three of the
    projects as well as the original Hello World application will be accessible from
    our web server.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以简单地编辑我们的Hello World应用程序以添加所需的功能，但更干净的做法是开始一个新项目。我们将为每个项目创建一个新的Git仓库，一个新的Python文件，一个新的`.wsgi`文件和一个新的Apache配置文件。这意味着书中的所有三个项目以及原始的Hello
    World应用程序都可以从我们的Web服务器访问。
- en: 'Setting up is very similar to what we did for our Hello World application in
    [Chapter 1](ch01.html "Chapter 1. Hello, World!"), *Hello, World!* but we''ll
    briefly go through the steps again as we don''t have to repeat a lot of the configuration
    and installation, as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 设置与我们在[第1章](ch01.html "第1章。你好，世界！")中为我们的Hello World应用程序所做的非常相似，但我们将再次简要地介绍这些步骤，因为我们不必重复大部分配置和安装，如下所示：
- en: Log in to your GitHub or BitBucket account and create a new repository called
    `headlines`. Take note of the URL you're given for this blank repository.
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的GitHub或BitBucket帐户，并创建一个名为`headlines`的新存储库。记下您获得的此空存储库的URL。
- en: On your local machine, create a new directory called `headlines` in your home
    directory or wherever you put the `firstapp` directory.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的本地计算机上，在您的主目录或者您放置`firstapp`目录的任何地方创建一个名为`headlines`的新目录。
- en: Create a new file in this directory called `headlines.py`.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录中创建一个名为`headlines.py`的新文件。
- en: 'In your terminal, change the directory to the `headlines` directory and initialize
    the Git repository by executing the following commands:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的终端中，将目录更改为`headlines`目录，并通过执行以下命令初始化Git存储库：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, we're almost ready to push code to our new repository; we just need to
    write it first.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们几乎准备好将代码推送到我们的新仓库；我们只需要先编写它。
- en: Creating a new Flask application
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的Flask应用程序
- en: 'To begin with, we''ll create the skeleton of our new Flask application, which
    is pretty much the same as our Hello World application. Open `headlines.py` in
    your editor and write the following code:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建新的Flask应用程序的框架，这与我们的Hello World应用程序几乎相同。在编辑器中打开`headlines.py`并写入以下代码：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This works exactly as before. You can run it in your terminal with `python`
    `headlines.py`. Open a browser and navigate to `localhost:5000` to see the **no
    news is good news** string displayed. However, although the old adage may be true,
    it's bad news that our app does not do anything more useful than this. Let's make
    it display actual news to our users.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这与以前完全一样。您可以在终端中使用`python headlines.py`运行它。打开浏览器并导航到`localhost:5000`，以查看显示的**没有新闻就是好消息**字符串。然而，尽管这句古话可能是真的，但糟糕的消息是我们的应用程序除了这个之外没有做任何更有用的事情。让我们让它向用户显示实际的新闻。
- en: Introduction to RSS and RSS feeds
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍RSS和RSS订阅
- en: RSS is an old but still widely used technology to manage content feeds. It's
    been around for such a long time that there's some debate as to what the letters
    RSS actually stand for, with some saying Really Simple Syndication and others
    Rich Site Summary. It's a bit of a moot point as everyone just calls it RSS.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: RSS是一种古老但仍然广泛使用的技术，用于管理内容订阅。它已经存在了很长时间，以至于有人争论RSS这几个字母实际上代表什么，有人说是真正简单的聚合，有人说是丰富的站点摘要。这有点无关紧要，因为每个人都只是称它为RSS。
- en: RSS presents content in an ordered and structured format using XML. It has several
    uses, with one of the more common uses being for people to consume news articles.
    On news websites, news is usually laid out similarly to a print newspaper with
    more important articles being given more space and also staying on the page for
    longer. This means that frequent visitors to the page will see some content repeatedly
    and have to look out for new content. On the other hand, some web pages are updated
    only very infrequently, such as some authors' blogs. Users have to keep on checking
    these pages to see whether they are updated, even when they haven't changed most
    of the time. RSS feeds solve both of these problems. If a website is configured
    to use RSS feeds, all new content is published to a feed. A user can subscribe
    to the feeds of his or her choice and consume these using an RSS reader. New stories
    from all feeds he or she has subscribed to will appear in the reader and disappear
    once they are marked as read.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: RSS使用XML以有序和结构化的格式呈现内容。它有几种用途，其中较常见的用途之一是供人们消费新闻文章。在新闻网站上，新闻通常以类似于印刷报纸的方式布局，重要的文章会占用更多的空间，并且会在页面上停留更长的时间。这意味着经常访问页面的用户会重复看到一些内容，并且必须寻找新内容。另一方面，有些网页更新非常不频繁，比如一些作者的博客。用户必须继续检查这些页面，看它们是否有更新，即使它们大部分时间都没有变化。RSS源解决了这两个问题。如果网站配置为使用RSS源，所有新内容都会发布到一个源中。用户可以订阅他或她选择的源，并使用RSS阅读器来消费这些内容。他或她订阅的所有源的新故事将出现在阅读器中，并在标记为已读后消失。
- en: As RSS feeds have a formal structure, they allow us to easily parse the headline,
    article text, and date programmatically in Python. We'll use some RSS feeds from
    major news publications to display news to our application's users.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 由于RSS源具有正式的结构，它们允许我们在Python中以编程方式轻松解析标题、文章文本和日期。我们将使用一些主要新闻出版物的RSS源来向我们应用程序的用户显示新闻。
- en: Although RSS follows a strict format and we could, with not too much trouble,
    write the logic to parse the feeds ourselves, we'll use a Python library to do
    this. The library abstracts away things such as different versions of RSS and
    allows us to access the data we need in a completely consistent fashion.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管RSS遵循严格的格式，我们可以不费太多力气地编写逻辑来解析源，但我们将使用Python库来完成这项工作。该库将抽象出诸如不同版本的RSS之类的东西，并允许我们以完全一致的方式访问所需的数据。
- en: 'There are several Python libraries that we could use to achieve this. We''ll
    select `feedparser`. To install it, open your terminal and type the following:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个Python库可以用来实现这一点。我们将选择`feedparser`。要安装它，打开你的终端并输入以下内容：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, let''s go find an RSS feed to parse! Most major publications offer RSS
    feeds, and smaller sites built on popular platforms, such as WordPress and Blogger,
    will often have RSS included by default as well. Sometimes, a bit of effort is
    required to find the RSS feed; however, as there is no standard as to where it
    should be located, you''ll often see the RSS icon somewhere on the homepage (look
    at the headers and footers), which looks similar to this:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们去找一个要解析的RSS源！大多数主要出版物都提供RSS源，而建立在流行平台上的较小网站，如WordPress和Blogger，通常也会默认包含RSS。有时需要一点努力才能找到RSS源；然而，由于没有关于它应该位于何处的标准，你经常会在主页的某个地方看到RSS图标（查看页眉和页脚），它看起来类似于这样：
- en: '![Introduction to RSS and RSS feeds](img/B04312_02_01.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![RSS和RSS源简介](img/B04312_02_01.jpg)'
- en: Also, look for links saying **RSS** or **Feed**. If this fails, try going to
    [site.com/rss](http://site.com/rss) or [site.com/feed](http://site.com/feed),
    where `site.com` is the root URL of the site for which you're looking for RSS
    feeds.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，寻找标有**RSS**或**Feed**的链接。如果这种方法失败，尝试访问[site.com/rss](http://site.com/rss)或[site.com/feed](http://site.com/feed)，其中`site.com`是你正在寻找RSS源的网站的根URL。
- en: 'We''ll use the RSS feed for the main BBC news page. At the time of writing,
    it is located at [http://feeds.bbci.co.uk/news/rss.xml](http://feeds.bbci.co.uk/news/rss.xml).
    If you''re curious, you can open the URL in your browser, right-click somewhere
    on the page, and click on **View Source** or an equivalent. You should see some
    structured XML with a format similar to the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用主要BBC新闻页面的RSS源。在撰写本文时，它位于[http://feeds.bbci.co.uk/news/rss.xml](http://feeds.bbci.co.uk/news/rss.xml)。如果你感兴趣，你可以在浏览器中打开这个URL，在页面的某个地方右键单击，然后点击**查看源代码**或等效选项。你应该会看到一些结构化的XML，格式类似于以下内容：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: At the very top of the feed, you'll see a line or two that describes the feed
    itself, such as which version of RSS it uses and possibly some information about
    the styles. After this, you'll see information relating to the publisher of the
    feed followed by a list of `<item>` tags. Each of these represents a *story*—in
    our case, a news article. These items contain information such as the headline,
    a summary, the date of publication, and a link to the full story. Let's get parsing!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在源的顶部，你会看到一两行描述源本身的内容，比如它使用的RSS版本以及可能一些关于样式的信息。之后，你会看到与源的发布者相关的信息，然后是一系列`<item>`标签。其中每个代表一个*故事*——在我们的情况下，是一篇新闻文章。这些项目包含诸如标题、摘要、发布日期和完整故事的链接等信息。让我们开始解析吧！
- en: Using RSS from Python
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python从RSS获取信息
- en: In our `headlines.py` file, we'll make modifications to import the `feedparser`
    library we installed, parse the feed, and grab the first article. We'll build
    up HTML formatting around the first article and show this in our application.
    If you're not familiar with HTML, it stands for **Hyper Text Markup Language**
    and is used to define the look and layout of text in web pages. It's pretty straightforward,
    but if it's completely new to you, you should take a moment now to go through
    a beginner tutorial to get familiar with its most basic usage. There are many
    free tutorials online, and a quick search should bring up dozens. A popular and
    very beginner-friendly one can be found at [http://www.w3schools.com/html/](http://www.w3schools.com/html/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`headlines.py`文件中，我们将进行修改以导入我们安装的`feedparser`库，解析feed，并获取第一篇文章。我们将围绕第一篇文章构建HTML格式，并在我们的应用程序中显示这个。如果你对HTML不熟悉，它代表**超文本标记语言**，用于定义网页中文本的外观和布局。它非常简单，但如果对你来说完全是新的，你应该花一点时间去学习一下初学者教程，以熟悉它的最基本用法。有许多免费的在线教程，快速搜索应该能找到几十个。一个受欢迎且非常适合初学者的教程可以在[http://www.w3schools.com/html/](http://www.w3schools.com/html/)找到。
- en: 'Our new code adds the import for the new library, defines a new global variable
    for the RSS feed URL, and further adds a few lines of logic to parse the feed,
    grab the data we''re interested in, and insert this into some very basic HTML.
    It looks similar to this:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的新代码添加了新库的导入，定义了一个新的全局变量用于RSS feed URL，并进一步添加了一些逻辑来解析feed，获取我们感兴趣的数据，并将其插入到一些非常基本的HTML中。它看起来类似于这样：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The first line of this function passes the BBC feed URL to our `feedparser`
    library, which downloads the feed, parses it, and returns a Python dictionary.
    In the second line, we grabbed just the first article from the feed and assigned
    it to a variable. The `entries` entry in the dictionary returned by `feedparser`
    contains a list of all the items that include the news stories we spoke about
    earlier, so we took the first one of these and got the headline or `title,` the
    date or the `published` field, and the summary of the article (that is, `summary`)
    from this. In the `return` statement, we built a basic HTML page all within a
    single triple-quoted Python string, which includes the `<html>` and `<body>` tags
    that all HTML pages have as well as an `<h1>` heading that describes what our
    page is; `<b>`, which is a *bold* tag that shows the news headline; `<i>`, which
    stands for the *italics* tag that shows the date of the article; and `<p>`, which
    is a paragraph tag to show the summary of the article. As nearly all items in
    an RSS feed are optional, we used the `python.get()` operator instead of using
    index notation (square brackets), meaning that if any information is missing,
    it'll simply be omitted from our final HTML rather than causing a runtime error.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的第一行将BBC的feed URL传递给我们的`feedparser`库，该库下载feed，解析它，并返回一个Python字典。在第二行，我们仅从feed中获取了第一篇文章并将其分配给一个变量。`feedparser`返回的字典中的`entries`条目包含了包括我们之前提到的新闻故事的所有项目的列表，因此我们从中取出了第一个，并从中获取了标题或`title`，日期或`published`字段以及文章的摘要（即`summary`）。在`return`语句中，我们在一个三引号的Python字符串中构建了一个基本的HTML页面，其中包括所有HTML页面都有的`<html>`和`<body>`标签，以及描述我们页面的`<h1>`标题；`<b>`，这是一个*加粗*标签，显示新闻标题；`<i>`，代表*斜体*标签，显示文章的日期；和`<p>`，这是一个段落标签，用于显示文章的摘要。由于RSS
    feed中几乎所有项目都是可选的，我们使用了`python.get()`运算符而不是使用索引表示法（方括号），这意味着如果有任何信息缺失，它将简单地从我们最终的HTML中省略，而不会导致运行时错误。
- en: 'For the sake of clarity, we didn''t do any exception handling in this example;
    however, note that `feedparser` may well throw an exception on attempting to parse
    the BBC URL. If your local Internet connection is unavailable, the BBC server
    is down, or the provided feed is malformed, then `feedparser` will not be able
    to turn the feed into a Python dictionary. In a real application, we would add
    some exception handling and retry the logic here. In a real application, we''d
    also never build HTML within a Python string. We''ll look at how to handle HTML
    properly in the next chapter. Fire up your web browser and take a look at the
    result. You should see a very basic page that looks similar to the following (although
    your news story will be different):'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰起见，我们在这个例子中没有进行任何异常处理；但是请注意，`feedparser`在尝试解析BBC URL时可能会抛出异常。如果你的本地互联网连接不可用，BBC服务器宕机，或者提供的feed格式不正确，那么`feedparser`将无法将feed转换为Python字典。在一个真实的应用程序中，我们会添加一些异常处理并在这里重试逻辑。在一个真实的应用程序中，我们也绝不会在Python字符串中构建HTML。我们将在下一章中看看如何正确处理HTML。打开你的网络浏览器，看看结果。你应该看到一个非常基本的页面，看起来类似于以下内容（尽管你的新闻故事将是不同的）：
- en: '![Using RSS from Python](img/B04312_02_02.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python的RSS](img/B04312_02_02.jpg)'
- en: This is a great start, and we're now serving dynamic content (that is, content
    that changes automatically in response to user or external events) to our application's
    hypothetical users. However, ultimately, it's not much more useful than the static
    string. Who wants to see a single news story from a single publication that they
    have no control over?
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的开始，我们现在为我们应用程序的假设用户提供了动态内容（即根据用户或外部事件自动更改的内容）。然而，最终，它并不比静态字符串更有用。谁想要看到来自他们无法控制的单一出版物的单一新闻故事呢？
- en: To finish off this chapter, we'll look at how to show an article from different
    publications based on URL routing. That is, our user will be able to navigate
    to different URLs on our site and view an article from any of several publications.
    Before we do this, let's take a slightly more detailed look at how Flask handles
    URL routing.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本章，我们将看看如何根据URL路由从不同的出版物中显示文章。也就是说，我们的用户将能够在我们的网站上导航到不同的URL，并查看来自几种出版物中的文章。在此之前，让我们稍微详细地看一下Flask如何处理URL路由。
- en: URL routing in Flask
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask中的URL路由
- en: Do you remember that we briefly mentioned Python decorators in the previous
    chapter? They're represented by the funny `@app.route("/")` line we had above
    our main function, and they indicate to Flask which parts of our application should
    be triggered by which URLs. Our base URL, which is usually something similar to
    `site.com` but in our case is the IP address of our VPS, is omitted, and we will
    specify the rest of the URL (that is, the path) in the decorator. Earlier, we
    used a single slash, indicating that the function should be triggered whenever
    our base URL was visited with no path specified. Now, we will set up our application
    so that users can visit URLs such as [site.com/bbc](http://site.com/bbc) or [site.com/cnn](http://site.com/cnn)
    to choose which publication they want to see an article from.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你还记得我们在上一章中简要提到了Python装饰器吗？它们由我们主要函数上面的有趣的`@app.route("/")`行表示，它们指示Flask应用程序的哪些部分应该由哪些URL触发。我们的基本URL通常类似于`site.com`，但在我们的情况下是我们VPS的IP地址，它被省略了，我们将在装饰器中指定剩下的URL（即路径）。之前，我们使用了一个斜杠，表示当我们的基本URL被访问时，没有指定路径时应该触发该函数。现在，我们将设置我们的应用程序，以便用户可以访问类似[site.com/bbc](http://site.com/bbc)或[site.com/cnn](http://site.com/cnn)的URL，选择他们想要看到文章的出版物。
- en: 'The first thing we need to do is collect a few RSS URLs. At the time of writing,
    all of the following are valid:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要做的第一件事是收集一些RSS URL。在撰写本文时，以下所有内容都是有效的：
- en: '**CNN**: [http://rss.cnn.com/rss/edition.rss](http://rss.cnn.com/rss/edition.rss)'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'CNN: [http://rss.cnn.com/rss/edition.rss](http://rss.cnn.com/rss/edition.rss)'
- en: '**Fox News**: [http://feeds.foxnews.com/foxnews/latest](http://feeds.foxnews.com/foxnews/latest)'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Fox News: [http://feeds.foxnews.com/foxnews/latest](http://feeds.foxnews.com/foxnews/latest)'
- en: '**IOL**: [http://www.iol.co.za/cmlink/1.640](http://www.iol.co.za/cmlink/1.640)'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'IOL: [http://www.iol.co.za/cmlink/1.640](http://www.iol.co.za/cmlink/1.640)'
- en: First, we will consider how we might achieve our goals using static routing.
    It's by no means the best solution, so we'll implement static routing for only
    two of our publications. Once we get this working, we'll consider how to use dynamic
    routing instead, which is a simpler and more generic solution to many problems.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将考虑如何使用静态路由来实现我们的目标。这绝不是最好的解决方案，因此我们将仅为我们的两个出版物实现静态路由。一旦我们完成这项工作，我们将考虑如何改用动态路由，这是许多问题的更简单和更通用的解决方案。
- en: 'Instead of declaring a global variable for each of our RSS feeds, we''ll build
    a Python dictionary that encapsulates them all. We''ll make our `get_news()` method
    generic and have our decorated methods call this with the relevant publication.
    Our modified code looks as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将建立一个Python字典，封装所有的RSS订阅，而不是为每个RSS订阅声明一个全局变量。我们将使我们的`get_news()`方法通用化，并让我们装饰的方法使用相关的出版物调用它。我们修改后的代码如下：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Common mistakes**:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 'Common mistakes:'
- en: Tip
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you're copying or pasting functions and editing the `@app.route` decorator,
    it's easy to forget to edit the function name. Although the name of our functions
    is largely irrelevant as we don't call them directly, we can't have different
    functions share the same name as the latest definition will always override any
    previous ones.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您复制或粘贴函数并编辑`@app.route`装饰器，很容易忘记编辑函数名。虽然我们的函数名在很大程度上是无关紧要的，因为我们不直接调用它们，但我们不能让不同的函数共享与最新定义相同的名称，因为最新的定义将始终覆盖任何先前的定义。
- en: We still return the BBC news feed by default, but if our user visits the CNN
    or BBC routes, we will explicitly take the top article from respective publication.
    Note that we can have more than one decorator per function so that our `bbc()`
    function gets triggered by a visit to our base URL or to the `/bbc` path. Also,
    note that the function name does not need to be the same as the path, but it is
    a common convention that we followed in the preceding example.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然默认返回BBC新闻订阅，但如果用户访问CNN或BBC路由，我们将明确从各自的出版物中获取头条新闻。请注意，我们可以在一个函数中有多个装饰器，这样我们的`bbc()`函数就会在访问我们的基本URL或`/bbc`路径时触发。另外，请注意函数名不需要与路径相同，但在前面的例子中我们遵循了这个常见的约定。
- en: Following this, we can see the output for our application when the user visits
    the `/cnn` page. The headline displayed is now from the CNN feed.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当用户访问`/cnn`页面时，我们可以看到我们应用程序的输出。显示的标题现在来自CNN订阅。
- en: '![URL routing in Flask](img/B04312_02_03.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![Flask中的URL路由](img/B04312_02_03.jpg)'
- en: Now that we know how routing works in Flask, wouldn't it be nice if it could
    be even simpler? We don't want to define a new function for each of our feeds.
    What we need is for the function to dynamically grab the right URL based on the
    path. This is exactly what dynamic routing does.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了Flask中路由的工作原理，如果能更简单就好了，不是吗？我们不想为我们的每个订阅定义一个新的函数。我们需要的是函数根据路径动态获取正确的URL。这正是动态路由所做的事情。
- en: 'In Flask, if we specify a part of our URL path in angle brackets `<` `>`, then
    it is taken as a variable and is passed to our application code. Therefore, we
    can go back to having a single `get_news()` function and pass in a `<publication>`
    variable, which can be used to make the selection from our dictionary. Any variables
    specified by the decorator must be accounted for in our function''s definition.
    The first few lines of the updated `get_news()` function are shown as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flask中，如果我们在URL路径的一部分中使用尖括号`<` `>`，那么它将被视为一个变量，并传递给我们的应用程序代码。因此，我们可以重新使用单个`get_news()`函数，并传入一个`<publication>`变量，该变量可用于从我们的字典中进行选择。装饰器指定的任何变量都必须在我们函数的定义中考虑到。更新后的`get_news()`函数的前几行如下所示：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the code shown earlier, we added `<publication>` to the route definition.
    This creates an argument called `publication`, which we need to add as a parameter
    of the function directly below the route. Thus, we can keep our default value
    for the publication parameter as `bbc`, but if the user visits CNN, Flask will
    pass the `cnn` value as the publication argument instead.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面显示的代码中，我们将`<publication>`添加到路由定义中。这将创建一个名为`publication`的参数，我们需要将其作为函数的参数直接添加到路由下面。因此，我们可以保留出版物参数的默认值为`bbc`，但如果用户访问CNN，Flask将传递`cnn`值作为出版物参数。
- en: The rest of the code remains unchanged, but it's important to delete the now
    unused `bbc()` and `cnn()` function definitions as we need the default route to
    activate our `get_news()` function instead.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的其余部分保持不变，但是删除现在未使用的`bbc()`和`cnn()`函数定义非常重要，因为我们需要默认路由来激活我们的`get_news()`函数。
- en: It's easy to forget to *catch* the URL variables in the function definition.
    Any dynamic part of the route must contain a parameter of the same name in the
    function in order to use the value, so look out for this. Note that we gave our
    publication variable a default value of `bbc` so that we don't need to worry about
    it being undefined when the user visits our base URL. However, again, our code
    will throw an exception if the user visits any URL that we don't have as a key
    in our dictionary of feeds. In a real web application, we'd catch cases such as
    this and show an error to the user, but we'll leave error handling for later chapters.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 很容易忘记在函数定义中*catch* URL变量。路由的任何动态部分都必须在函数中包含同名的参数才能使用该值，因此要注意这一点。请注意，我们给我们的publication变量一个默认值`bbc`，这样当用户访问我们的基本URL时，我们就不需要担心它未定义。但是，再次强调，如果用户访问我们字典中没有的任何URL，我们的代码将抛出异常。在真实的Web应用程序中，我们会捕获这种情况并向用户显示错误，但我们将把错误处理留到以后的章节。
- en: Publishing our Headlines application
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 发布我们的头条应用程序
- en: This is as far as we'll take our application in this chapter. Let's push the
    results to our server and configure Apache to display our headlines application
    instead of our Hello World application by default.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在本章中将应用的最远程度。让我们将结果推送到我们的服务器，并配置Apache默认显示我们的头条新闻应用程序，而不是我们的Hello World应用程序。
- en: 'First, add your changes to the Git repository, commit them, and push them to
    the remote. You can do this by running the following commands (after opening a
    terminal and changing directory to the headlines directory):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将更改添加到Git存储库中，对其进行提交，并将其推送到远程。您可以通过运行以下命令来完成此操作（在打开终端并切换到头条目录后）：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, connect to the VPS with SSH and clone the new project there using the
    following commands:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令通过SSH连接到VPS并在那里克隆新项目：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Don''t forget to install the new library that we now depend on. Forgetting
    to install dependencies on your server is a common error that can lead to a frustrating
    debugging. Keep this in mind. The following is the command for this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记安装我们现在依赖的新库。在服务器上忘记安装依赖关系是一个常见的错误，可能会导致令人沮丧的调试。请记住这一点。以下是此命令：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, create the `.wsgi` file. I assume that you named your Git project `headlines`
    when creating the remote repository and that a directory named `headlines` was
    created in your `/var/www` directory when you did the preceding Git clone command.
    If you called your project something else and now have a directory with a different
    name, rename it to headlines (otherwise, you''ll have to adapt a lot of the configuration
    we''re about to do accordingly). To rename a directory in Linux, use the following
    command:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建`.wsgi`文件。我假设您在创建远程存储库时将Git项目命名为`headlines`，并且在执行前面的Git克隆命令时，在您的`/var/www`目录中创建了一个名为`headlines`的目录。如果您将项目命名为其他名称，并且现在有一个具有不同名称的目录，请将其重命名为headlines（否则，您将不得不相应地调整我们即将进行的大部分配置）。在Linux中重命名目录，请使用以下命令：
- en: '[PRE10]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The command used earlier will rename the directory called `myflaskproject`
    to `headlines`, which will ensure that all the configuration to follow will work.
    Now, run the following:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 之前使用的命令将目录称为`myflaskproject`重命名为`headlines`，这将确保接下来的所有配置都能正常工作。现在，运行以下命令：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then, insert the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，插入以下内容：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Exit Nano by hitting the *Ctrl* + *X* key combo and enter *Y* when prompted
    to save changes.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按下*Ctrl* + *X*键组合退出Nano，并在提示保存更改时输入*Y*。
- en: 'Now, navigate to the `sites-available` directory in Apache and create the new
    `.conf` file using the following commands:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，转到Apache中的`sites-available`目录，并使用以下命令创建新的`.conf`文件：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, enter the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，输入以下内容：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Save the file and quit nano. Now, disable our old site, enable the new one,
    and restart Apache by running the following commands:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 保存文件并退出nano。现在，通过运行以下命令禁用我们的旧站点，启用新站点，并重新启动Apache：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Try and visit the IP address of your VPS from your local machine, and if all
    went as expected, you should see the news headline as before! If not, don''t worry.
    It''s easy to make a mistake in some piece of configuration. It''s most likely
    that your `headlines.wsgi` or `headlines.conf` file has a small error. The easiest
    way to find this is by looking at the most recent errors in your Apache error
    log, which would have been triggered when you attempted to visit the site. View
    this again with the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试从本地机器访问VPS的IP地址，如果一切如预期般进行，您应该像以前一样看到新闻标题！如果没有，不要担心。在某些配置中犯错误是很容易的。最有可能的是您的`headlines.wsgi`或`headlines.conf`文件有一个小错误。找到这个最简单的方法是查看Apache错误日志中的最近错误，这些错误在您尝试访问站点时会触发。使用以下命令再次查看：
- en: '[PRE16]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Summary
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: That's it for this chapter. The major takeaways of this chapter were taking
    a look at how routing, both static and dynamic, are handled in Flask. You also
    learned a fairly messy way of formatting data using HTML and returning this to
    the user.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是本章的全部内容。本章的主要要点是看一下Flask如何处理静态和动态路由。您还学会了一种相当混乱的使用HTML格式化数据并将其返回给用户的方法。
- en: In the next chapter, we'll take a look at cleaner ways to separate our HTML
    code from our Python code using Jinja templates. We'll also have our app display
    more than a single news story.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看一下使用Jinja模板更清晰地分离HTML代码和Python代码的方法。我们还将让我们的应用程序显示不止一个新闻故事。
