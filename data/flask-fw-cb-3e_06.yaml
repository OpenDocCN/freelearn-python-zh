- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Authenticating in Flask
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Flask 中进行身份验证
- en: Authentication is an important part of any application, be it web-based, desktop,
    or mobile. Each kind of application has certain best practices when it comes to
    handling user authentication. In web-based applications, especially **Software-as-a-Service**
    (**SaaS**) applications, this process is of utmost importance, as it acts as the
    thin red line between the application being secure and insecure.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证是任何应用程序的重要组成部分，无论是基于 Web、桌面还是移动应用程序。每种类型的应用程序在处理用户身份验证方面都有一定的最佳实践。在基于 Web
    的应用程序中，特别是 **软件即服务**（**SaaS**）应用程序，这个过程至关重要，因为它充当着应用程序安全与不安全的薄红线。
- en: To keep things simple and flexible, Flask, by default, does not provide any
    mechanism for authentication. It always has to be implemented by us, the developers,
    as per our requirements and the application’s requirements.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持简单和灵活，Flask 默认不提供任何身份验证机制。它必须由我们，即开发者，根据我们的需求和应用程序的需求来实现。
- en: Authenticating users for your application can be done in multiple ways. It can
    be a simple session-based implementation or a more secure approach using the `Flask-Login`
    extension. We can also implement authentication by integrating popular third-party
    services such as the **Lightweight Directory Access Protocol** (**LDAP**) or social
    logins such as Facebook, Google, and so on. In this chapter, we will go through
    all of these methods.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的应用程序进行用户身份验证可以有多种方式。它可以是一个简单的基于会话的实现，或者是一个更安全的通过 `Flask-Login` 扩展的方法。我们还可以通过集成流行的第三方服务，如
    **轻量级目录访问协议**（**LDAP**）或社交登录，如 Facebook、Google 等，来实现身份验证。在本章中，我们将介绍所有这些方法。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Creating a simple session-based authentication
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建简单的基于会话的身份验证
- en: Authenticating using the Flask-Login extension
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Flask-Login 扩展进行身份验证
- en: Using Facebook for authentication
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Facebook 进行身份验证
- en: Using Google for authentication
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Google 进行身份验证
- en: Using Twitter for authentication
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Twitter 进行身份验证
- en: Authenticating with LDAP
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 LDAP 进行身份验证
- en: Creating a simple session-based authentication
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建简单的基于会话的身份验证
- en: In session-based authentication, when the user logs in for the first time, the
    user details are set in the session of the application’s server side and stored
    in a cookie on the browser.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在基于会话的身份验证中，当用户首次登录时，用户详细信息被设置在应用程序服务器的会话中，并存储在浏览器的 cookie 中。
- en: After that, when the user opens the application, the details stored in the cookie
    are used to check against the session, and the user is automatically logged in
    if the session is alive.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，当用户打开应用程序时，存储在 cookie 中的详细信息将用于与会话进行核对，如果会话仍然活跃，用户将自动登录。
- en: Info
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: '`SECRET_KEY` is an application configuration setting that should always be
    specified in your application’s configuration; otherwise, the data stored in the
    cookie, as well as the session on the server side, will be in plain text, which
    is highly insecure.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`SECRET_KEY` 是一个应用程序配置设置，应始终在您的应用程序配置中指定；否则，存储在 cookie 中的数据以及服务器端的会话都将以纯文本形式存在，这非常不安全。'
- en: We will implement a simple mechanism to do this ourselves.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个简单的机制来自行完成。
- en: Tip
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The implementation done in this recipe is designed to explain how authentication
    works at a lower level. This approach should *not* be adopted in any production-level
    application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中实现的方案旨在解释身份验证在较低级别是如何工作的。这种方法**不应**在任何生产级应用程序中采用。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start with a Flask app configuration, as seen in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273),
    *Web Forms**with WTForms*.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从 Flask 应用程序配置开始，正如在 [*第 5 章*](B19111_05.xhtml#_idTextAnchor273) 中所看到的，*使用
    WTForms 的 Web 表单*。
- en: How to do it...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Configure the application to use the SQLAlchemy and WTForms extensions (refer
    to the previous chapter for details). Follow these steps to understand how:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 配置应用程序以使用 SQLAlchemy 和 WTForms 扩展（有关详细信息，请参阅上一章）。按照以下步骤了解如何操作：
- en: 'Before starting with authentication, first, create a model to store the user
    details. This is achieved by creating models in `flask_authentication/my_app/auth/models.py`,
    as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开始进行身份验证之前，首先创建一个模型来存储用户详细信息。这通过在 `flask_authentication/my_app/auth/models.py`
    中创建模型来实现，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding code is the `User` model, which has two fields: `username` and
    `pwdhash`. The `username` field works as its name suggests. The `pwdhash` field
    stores the salted hash of the password because it is not recommended that you
    store passwords directly in databases.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是`User`模型，它有两个字段：`username`和`pwdhash`。`username`字段正如其名所示。`pwdhash`字段存储密码的加盐散列，因为直接在数据库中存储密码是不推荐的。
- en: 'Then, create two forms in f`lask_authentication/my_app/auth/models.py` – one
    for user registration and the other for login. In `RegistrationForm`, create two
    fields of the `PasswordField` type, just like any other website’s registration;
    this is to make sure that the user enters the same password in both fields, as
    shown in the following snippet:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`flask_authentication/my_app/auth/models.py`中创建两个表单 – 一个用于用户注册，另一个用于登录。在`RegistrationForm`中创建两个`PasswordField`类型的字段，就像任何其他网站的注册一样；这是为了确保用户在两个字段中输入相同的密码，如下面的代码片段所示：
- en: '[PRE14]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Next, create views in `flask_authentication/my_app/auth/views.py` to handle
    the user requests for registration and login, as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`flask_authentication/my_app/auth/views.py`中创建视图来处理用户对注册和登录的请求，如下所示：
- en: '[PRE27]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The preceding method handles user registration. On a `GET` request, the registration
    form is shown to the user; this form asks for the `username` and `password`. Then,
    on a `POST` request, the `username` is checked for its uniqueness after the form
    validation is complete. If the `username` is not unique, the user is asked to
    choose a new `username`; otherwise, a new user is created in the database and
    redirected to the login page.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法处理用户注册。在`GET`请求中，向用户显示注册表单；这个表单要求输入`username`和`password`。然后，在`POST`请求中，在表单验证完成后检查`username`的唯一性。如果`username`不唯一，用户会被要求选择一个新的`username`；否则，在数据库中创建一个新的用户，并将其重定向到登录页面。
- en: 'After successful registration, the user is redirected to log in, which is handled
    as shown in the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注册成功后，用户会被重定向到登录页面，这由以下代码处理：
- en: '[PRE63]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'The preceding method handles the user login. After form validation, it first
    checks whether the `username` exists in the database. If not, it asks the user
    to enter the correct username. Similarly, it checks whether the `password` is
    correct. If not, it asks the user for the correct password. If all the checks
    pass, the session is populated with a `username` key, which holds the username
    of the user. The presence of this key on the session indicates that the user is
    logged in. Consider the following code:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的方法处理用户登录。在表单验证后，它首先检查数据库中是否存在`username`。如果不存在，它会要求用户输入正确的用户名。同样，它检查密码是否正确。如果不正确，它会要求用户输入正确的密码。如果所有检查都通过，会话中就会填充一个`username`键，它包含用户的用户名。这个键在会话中的存在表示用户已登录。考虑以下代码：
- en: '[PRE64]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The preceding method becomes self-implied once we’ve understood the `login()`
    method. Here, we just popped out the `username` key from the session, and the
    user got logged out automatically.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们理解了`login()`方法，前面的方法就变得不言而喻了。在这里，我们只是从会话中弹出了`username`键，用户就自动登出了。
- en: Next, create the templates that are rendered by the `register()` and `login()`
    handlers for the registration and login, respectively, created previously.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建由之前创建的注册和登录处理程序渲染的模板。
- en: The `flask_authentication/my_app/templates/base.html` template remains almost
    the same as it was in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273), *Web Forms*
    *with WTForms*. The only change will be with the routing, where `catalog` will
    be replaced by `auth`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`flask_authentication/my_app/templates/base.html`模板几乎与[*第5章*](B19111_05.xhtml#_idTextAnchor273)中“使用WTForms的Web表单”相同。唯一的改变将是路由，其中`catalog`将被替换为`auth`。'
- en: 'First, create a simple home page, `flask_authentication/my_app/templates/home.html`,
    as shown in the following code. This reflects whether the user is logged in or
    not and also shows links for registration and login if the user is not logged
    in:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个简单的首页，`flask_authentication/my_app/templates/home.html`，如下代码所示。这反映了用户是否已登录，如果用户未登录，则显示注册和登录链接：
- en: '[PRE65]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Now create a registration page, `flask_authentication/my_app/templates/register.html`,
    as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在创建一个注册页面，`flask_authentication/my_app/templates/register.html`，如下：
- en: '[PRE66]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Finally, create a simple login page, `flask_authentication/my_app/templates/login.html`,
    with the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，创建一个简单的登录页面，`flask_authentication/my_app/templates/login.html`，以下代码：
- en: '[PRE67]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: How it works...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The working of this application is demonstrated with the help of the screenshots
    in this section.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过截图展示了该应用程序的工作原理。
- en: 'The following screenshot displays the home page that comes up on opening `http://127.0.0.1:5000/home`:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在打开 `http://127.0.0.1:5000/home` 时出现的首页：
- en: '![Figure 6.1 – Home page visible to a user who is not logged in](img/B19111_06_01.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 对未登录用户可见的首页](img/B19111_06_01.jpg)'
- en: Figure 6.1 – Home page visible to a user who is not logged in
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – 对未登录用户可见的首页
- en: 'The registration page that comes up on opening `http://127.0.0.1:5000/register`
    looks like the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在打开 `http://127.0.0.1:5000/register` 时出现的注册页面如下截图所示：
- en: '![Figure 6.2 – The registration form](img/B19111_06_02.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 注册表单](img/B19111_06_02.jpg)'
- en: Figure 6.2 – The registration form
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2 – 注册表单
- en: 'After registration, the login page will be shown on opening `http://127.0.0.1:5000/login`,
    as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注册后，在打开 `http://127.0.0.1:5000/login` 时将显示登录页面，如下截图所示：
- en: '![Figure 6.3 – Login page rendered after successful registration](img/B19111_06_03.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 成功注册后渲染的登录页面](img/B19111_06_03.jpg)'
- en: Figure 6.3 – Login page rendered after successful registration
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – 成功注册后渲染的登录页面
- en: 'Finally, the home page is shown to the logged-in user at `http://127.0.0.1:5000/home`,
    as shown in the following screenshot:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在 `http://127.0.0.1:5000/home` 上向已登录用户展示首页，如下截图所示：
- en: "![Figure 6.4 – Home page as shown to a logged-in \uFEFFuser](img/B19111_06_04.jpg)"
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – 展示给已登录用户的首页](img/B19111_06_04.jpg)'
- en: Figure 6.4 – Home page as shown to a logged-in user
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – 展示给已登录用户的首页
- en: See also
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The next recipe, *Authenticating using the Flask-Login extension*, will cover
    a more secure and production-ready method of performing user authentication.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个菜谱，*使用 Flask-Login 扩展进行身份验证*，将介绍一种更安全和适用于生产的用户身份验证方法。
- en: Authenticating using the Flask-Login extension
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Flask-Login 扩展进行身份验证
- en: In our previous recipe, we learned how to implement session-based authentication
    ourselves. `Flask-Login` is a popular extension that handles a lot of the same
    stuff in a helpful and efficient way and thus saves us from reinventing the wheel
    all over again. In addition, `Flask-Login` will not bind us to any specific database
    or limit us to using any specific fields or methods for authentication. It can
    also handle the `Flask-Login` with our application.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的菜谱中，我们学习了如何自己实现基于会话的身份验证。`Flask-Login` 是一个流行的扩展，以有用且高效的方式处理了许多相同的事情，因此我们不必再次从头开始重新发明轮子。此外，`Flask-Login`
    不会将我们绑定到任何特定的数据库，也不会限制我们使用任何特定的字段或方法进行身份验证。它还可以处理 `Flask-Login` 与我们的应用程序。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: Modify the application created in the previous recipe to accommodate the changes
    to be done by the `Flask-Login` extension.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 修改上一道菜谱中创建的应用程序，以适应 `Flask-Login` 扩展所做的更改。
- en: 'Before that, we have to install the extension itself with the following command:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之前，我们必须使用以下命令安装该扩展本身：
- en: '[PRE68]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to understand how `Flask-Login` can be integrated with a
    Flask application:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤了解如何将 `Flask-Login` 集成到 Flask 应用程序中：
- en: 'To use `Flask-Login`, first, modify the application’s configuration, which
    is in `flask_authentication/my_app/__init__.py`, as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用 `Flask-Login`，首先，修改应用程序的配置，该配置位于 `flask_authentication/my_app/__init__.py`
    中，如下所示：
- en: '[PRE69]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In the preceding code snippet, after importing the `LoginManager` class from
    the extension, we created an object of this class. Then, we configured the `app`
    object for use with `LoginManager` using `init_app()`. There are then multiple
    configurations that can be done in the `login_manager` object, as and when needed.
    Here, we have just demonstrated one basic and compulsory configuration, that is,
    `login_view`, which points to the view handler for login requests. In addition,
    we can also configure messages to be shown to the users, such as how long a session
    will last, handling logins using request headers, and so on. Refer to the `Flask-Login`
    documentation at [https://flask-login.readthedocs.org/en/latest/#customizing-the-login-process](https://flask-login.readthedocs.org/en/latest/#customizing-the-login-process)
    for more details.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，在从扩展中导入 `LoginManager` 类之后，我们创建了该类的对象。然后，我们使用 `init_app()` 配置 `app`
    对象以与 `LoginManager` 一起使用。在 `login_manager` 对象中，可以根据需要执行多个配置。在这里，我们只演示了一个基本且必需的配置，即
    `login_view`，它指向登录请求的处理视图。此外，我们还可以配置显示给用户的消息，例如会话将持续多长时间，使用请求头处理登录等。有关更多详细信息，请参阅
    [https://flask-login.readthedocs.org/en/latest/#customizing-the-login-process](https://flask-login.readthedocs.org/en/latest/#customizing-the-login-process)
    的 `Flask-Login` 文档。
- en: '`Flask-Login` calls for some additional methods to be added to the `User` model/class
    in `my_app/auth/models.py`, as shown in the following snippet:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Flask-Login`要求在`my_app/auth/models.py`中的`User`模型/类中添加一些额外的方法，如下面的代码片段所示：'
- en: '[PRE76]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'In the preceding code, we added four methods, which are explained as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们添加了四个方法，下面将逐一解释：
- en: '`is_authenticated()`: This property returns `True`. This should return `False`
    only in cases where we do not want a user to be authenticated.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_authenticated()`: 这个属性返回`True`。只有在不想让用户认证的情况下，它才应该返回`False`。'
- en: '`is_active()`: This property returns `True`. This should return `False` only
    in cases where we have blocked or banned a user.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_active()`: 这个属性返回`True`。只有在用户被阻止或禁止的情况下，它才应该返回`False`。'
- en: '`is_anonymous()`: This property is used to indicate a user who is not supposed
    to be logged in to the system and should access the application as anonymous.
    This should return `False` for regular logged-in users.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_anonymous()`: 这个属性用于指示不应登录到系统并应作为匿名用户访问应用程序的用户。对于常规登录用户，它应该返回`False`。'
- en: '`get_id()`: This method represents the unique `ID` used to identify the user.
    This should be a Unicode value.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_id()`: 这个方法代表用于识别用户的唯一`ID`。这应该是一个Unicode值。'
- en: Information
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: It is not necessary to implement all of the methods and properties discussed
    while implementing a `user` class. To make things easier, you can always subclass
    the `UserMixin` class from `flask_login`, which has default implementations already
    done for the methods and properties we mentioned. For more information on this,
    visit [https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin](https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin).
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现`用户`类时，没有必要实现所有讨论的方法和属性。为了简化操作，你可以始终从`flask_login`中的`UserMixin`类进行子类化，该类已经为我们提到的方法和属性提供了默认实现。有关更多信息，请访问[https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin](https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin)。
- en: 'Next, make the following changes to the views in `my_app/auth/views.py`:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，对`my_app/auth/views.py`中的视图进行以下修改：
- en: '[PRE87]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE96]'
- en: In the preceding method, the `@auth.before_request` decorator implies that the
    method will be called before the view function whenever a request is received.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的方法中，`@auth.before_request`装饰器意味着每当收到请求时，该方法将在视图函数之前被调用。
- en: 'In the following snippet, we have memorized our logged-in user:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码片段中，我们已经记录了我们的登录用户：
- en: '[PRE97]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE123]'
- en: Notice that now, in `login()`, we check whether the `current_user` is authenticated
    before doing anything else. Here, `current_user` is a proxy that represents the
    object for the currently logged-in `User` record. After all validations and checks
    are done, the user is then logged in using the `login_user()` method. This method
    accepts the `user` object and handles all of the session-related activities required
    to log in a user.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，现在在`login()`中，我们在做其他任何事情之前都会检查`current_user`是否已认证。在这里，`current_user`是一个代理，代表当前登录的`User`记录的对象。在完成所有验证和检查后，用户将使用`login_user()`方法登录。此方法接受`user`对象，并处理登录用户所需的全部会话相关活动。
- en: Now, if we move on to the `logout()` method, we can see that a decorator has
    been added for `login_required()`. This decorator makes sure that the user is
    logged in before this method is executed. It can be used for any view method in
    our application. To log a user out, we just have to call `logout_user()`, which
    will clean up the session for the currently logged-in user and, in turn, log the
    user out of the application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们继续到`logout()`方法，我们可以看到为`login_required()`添加了一个装饰器。这个装饰器确保在执行此方法之前用户已经登录。它可以用于我们应用程序中的任何视图方法。要注销用户，我们只需调用`logout_user()`，这将清理当前登录用户的会话，从而注销用户。
- en: 'As we do not handle sessions ourselves, a minor change in the templates is
    required, as shown in the following snippet. This happens whenever we want to
    check whether a user is logged in and whether particular content needs to be shown
    to them:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们不自行处理会话，因此需要根据以下代码片段对模板进行一些小的修改。这发生在我们想要检查用户是否已登录以及是否需要向他们显示特定内容时：
- en: '[PRE124]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: How it works…
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The demonstration in this recipe works exactly as it did in the previous recipe,
    *Creating a simple session-based authentication*. Only the implementation differs,
    but the end result remains the same.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中的演示与上一个食谱中创建的简单基于会话的认证完全相同，*创建一个简单的基于会话的认证*。只有实现方式不同，但最终结果保持不变。
- en: There’s more…
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `Flask-Login` extension makes the implementation of the `remember=True`
    to the `login_user()` method. This will save a cookie on the user’s computer,
    and `Flask-Login` will use this to log the user in automatically if the session
    is active. You should try implementing this on your own.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`Flask-Login`扩展使得将`remember=True`参数应用到`login_user()`方法上成为可能。这将在一个用户的电脑上保存一个cookie，如果会话是活跃的，`Flask-Login`将使用这个cookie自动登录用户。你应该尝试自己实现这一功能。'
- en: See also
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 另请参阅
- en: See the previous recipe, *Creating a simple session-based authentication*, to
    understand the complete working of this recipe.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 参考之前的食谱，*创建简单的基于会话的认证*，以了解本食谱的完整工作原理。
- en: Flask provides a special object called `g`. You can read more about this at
    [https://flask.palletsprojects.com/en/2.2.x/api/#flask.g](https://flask.palletsprojects.com/en/2.2.x/api/#flask.g).
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Flask提供了一个名为`g`的特殊对象。你可以在[https://flask.palletsprojects.com/en/2.2.x/api/#flask.g](https://flask.palletsprojects.com/en/2.2.x/api/#flask.g)了解更多相关信息。
- en: Another interesting way of authentication is using JWT tokens, which work in
    a way that is very similar to `Flask-Login`. See more details at [https://flask-jwt-extended.readthedocs.io/en/stable/](https://flask-jwt-extended.readthedocs.io/en/stable/).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种有趣的认证方式是使用JWT令牌，其工作方式与`Flask-Login`非常相似。更多详情请参阅[https://flask-jwt-extended.readthedocs.io/en/stable/](https://flask-jwt-extended.readthedocs.io/en/stable/)。
- en: Using Facebook for authentication
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Facebook进行认证
- en: You will have noticed that many websites provide an option to log in to their
    own site using third-party authentication, such as Facebook, Google, Twitter,
    LinkedIn, and so on. This has been made possible by **OAuth 2**, which is an open
    standard for authorization. It allows the client site to use an access token to
    access the protected information and resources provided by the resource server.
    In this recipe, we will show you how to implement OAuth-based authorization via
    Facebook. In later recipes, we will do the same using other providers.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到许多网站提供了使用第三方身份验证（如Facebook、Google、Twitter、LinkedIn等）登录自己网站的选择。这是通过**OAuth
    2**实现的，它是一个授权的开放标准。它允许客户端站点使用访问令牌来访问资源服务器（如Google、Facebook等）提供的受保护信息和资源。在本食谱中，我们将向你展示如何通过Facebook实现基于OAuth的授权。在后续的食谱中，我们将使用其他提供者做同样的事情。
- en: Information
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: OAuth is a mechanism that allows users to grant websites or applications access
    to their information on other websites (such as Google, Facebook, Twitter, etc.)
    without sharing the password. It essentially means that the third-party client
    application (your Flask application) gets access to data stored on the resource
    server (Google, Facebook, etc.) by means of an access token, which is issued by
    the resource server’s authentication engine on approval of the resource owner
    (the user).
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth是一种机制，允许用户在不共享密码的情况下，授予网站或应用程序访问其他网站（如Google、Facebook、Twitter等）上其信息的能力。本质上意味着第三方客户端应用程序（你的Flask应用程序）通过资源服务器（Google、Facebook等）的认证引擎在资源所有者（用户）批准后，通过访问令牌获取存储在资源服务器上的数据。
- en: Getting ready
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'OAuth 2 only works with SSL, so the application should run with HTTPS. To do
    this on a local machine, please follow these steps:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth 2仅与SSL一起工作，因此应用程序应该使用HTTPS运行。要在本地机器上这样做，请按照以下步骤操作：
- en: Install `pyopenssl` using the `$ pip3 install` `pyopenssl` command.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`$ pip3 install`命令安装`pyopenssl`。
- en: 'Add additional options to `app.run()`, including `ssl_context` with the `adhoc`
    value. The completed `app.run` should look as follows: `app.run(debug=True, ssl_context=''adhoc'')`.'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`app.run()`添加额外的选项，包括带有`adhoc`值的`ssl_context`。完成的`app.run`应该如下所示：`app.run(debug=True,
    ssl_context='adhoc')`。
- en: Once these changes have been made, run the application using the URL `https://localhost:5000/`.
    Before the app loads, your browser will display warnings about the certificate
    not being safe. Just accept the warning and proceed.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦进行了这些更改，请使用URL `https://localhost:5000/` 运行应用程序。在应用程序加载之前，你的浏览器将显示有关证书不安全的警告。只需接受警告并继续即可。
- en: Tip
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: This is not a recommended method. In production systems, SSL certificates should
    be obtained from a proper certifying authority.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个推荐的方法。在生产系统中，SSL证书应该从适当的认证机构获取。
- en: To install `Flask-Dance` and generate Facebook credentials, follow these step:.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装`Flask-Dance`并生成Facebook凭证，请按照以下步骤操作：
- en: 'First, install the `Flask-Dance` extension and its dependencies with the following
    command:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，使用以下命令安装`Flask-Dance`扩展及其依赖项：
- en: '[PRE125]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'Next, register for a Facebook application that will be used for login. Although
    the process for registration on the Facebook app is pretty straightforward and
    self-explanatory, in this case, we are only concerned with the **App ID**, **App
    secret**, and **Site URL** options, as shown in the following screenshot (more
    information on this can be found on the Facebook developer pages at [https://developers.facebook.com/](https://developers.facebook.com/)):'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，注册一个用于登录的 Facebook 应用程序。尽管在 Facebook 应用程序上注册的过程相当直接且易于理解，但在此情况下，我们只关注以下截图中的
    **App ID**、**App secret** 和 **Site URL** 选项（更多信息可以在 Facebook 开发者页面 [https://developers.facebook.com/](https://developers.facebook.com/)
    上找到）：
- en: '![Figure 6.5 – Facebook app credentials](img/B19111_06_05.jpg)'
  id: totrans-224
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.5 – Facebook 应用程序凭据](img/B19111_06_05.jpg)'
- en: Figure 6.5 – Facebook app credentials
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.5 – Facebook 应用程序凭据
- en: 'While configuring Facebook, make sure to configure the site URL to `https://localhost:5000/`
    for the purpose of this recipe, and the valid OAuth redirect URIs, as shown in
    the following screenshots:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置 Facebook 时，请确保将网站 URL 配置为 `https://localhost:5000/` 以完成本食谱，并配置有效的 OAuth
    重定向 URI，如下截图所示：
- en: '![Figure 6.6 – Facebook site URL config](img/B19111_06_06.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.6 – Facebook 网站URL配置](img/B19111_06_06.jpg)'
- en: Figure 6.6 – Facebook site URL config
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.6 – Facebook 网站URL配置
- en: "![Figure 6.7 – Facebook OAu\uFEFFth Redirect URIs config](img/B19111_06_07.jpg)"
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: "![图 6.7 – Facebook OAu\uFEFFth 重定向 URI 配置](img/B19111_06_07.jpg)"
- en: Figure 6.7 – Facebook OAuth Redirect URIs config
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.7 – Facebook OAuth 重定向 URI 配置
- en: How to do it...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To enable Facebook authentication for your application, follow these steps:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的应用程序启用 Facebook 认证，请按照以下步骤操作：
- en: 'As always, start with the configuration part in `my_app/__init__.py`. Add the
    following lines of code; do not remove or edit anything else unless you are confident
    of the change:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如往常一样，从 `my_app/__init__.py` 中的配置部分开始。添加以下代码行；除非你确信更改，否则不要删除或编辑其他任何内容：
- en: '[PRE126]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE126]'
- en: '[PRE127]'
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE130]'
- en: In the preceding code snippet, we used Flask-Dance with our application for
    authentication. This blueprint will be created in the `views` file, which we will
    cover next.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用 Flask-Dance 和我们的应用程序进行认证。这个蓝图将在 `views` 文件中创建，我们将在下一节中介绍。
- en: 'Now modify the views, that is, `my_app/auth/views.py`, as follows:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在修改视图，即 `my_app/auth/views.py`，如下所示：
- en: '[PRE131]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '`make_facebook_blueprint` reads `FACEBOOK_OAUTH_CLIENT_ID` and `FACEBOOK_OAUTH_CLIENT_SECRET`
    from the application configuration and takes care of all the OAuth-related handling
    in the background. While making the Facebook blueprint, we set `scope` to `email`,
    so that an email address can be used as a unique username. We also set `redirect_to`
    to `auth.facebook_login`, so Facebook routes the application back to this URL
    once authentication succeeds. If this option is not set, the application will
    be automatically redirected to the home page, that is, `/`.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_facebook_blueprint` 从应用程序配置中读取 `FACEBOOK_OAUTH_CLIENT_ID` 和 `FACEBOOK_OAUTH_CLIENT_SECRET`，并在后台处理所有
    OAuth 相关操作。在创建 Facebook 蓝图时，我们将 `scope` 设置为 `email`，这样电子邮件地址就可以用作唯一的用户名。我们还设置了
    `redirect_to` 为 `auth.facebook_login`，这样一旦认证成功，Facebook 就会将应用程序重定向回这个 URL。如果没有设置此选项，应用程序将自动重定向到主页，即
    `/`。'
- en: 'Now, create a new route handler to handle the login using Facebook, as follows:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，创建一个新的路由处理程序来处理使用 Facebook 的登录，如下所示：
- en: '[PRE136]'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE152]'
- en: This method first checks whether a user is already authorized with Facebook.
    If not, it redirects the app to Facebook’s login handler, where the user will
    need to follow the steps outlined by Facebook and give the necessary permissions
    to our application in order to access the requested user details, as per the settings
    in `make_facebook_blueprint`. Once the user is authorized with Facebook, the method
    then requests a user’s details, such as their name and email address, from Facebook.
    Using these user details, it is determined whether a user already exists with
    the email entered or not. If not, a new user is created and logged in; otherwise,
    the existing user is directly logged in.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法首先检查用户是否已经通过 Facebook 授权。如果没有，它将应用程序重定向到 Facebook 的登录处理程序，在那里用户需要遵循 Facebook
    提出的步骤，并授予我们的应用程序必要的权限以访问请求的用户详细信息，如 `make_facebook_blueprint` 中的设置。一旦用户通过 Facebook
    授权，该方法随后将从 Facebook 请求用户的详细信息，例如他们的姓名和电子邮件地址。使用这些用户详细信息，确定是否已存在使用输入的电子邮件地址的用户。如果没有，则创建并登录新用户；否则，直接登录现有用户。
- en: 'Finally, modify the `login.html` template to allow for broader social login
    functionality. This will act as a placeholder for the Facebook login, as well
    as a number of alternative social logins, which we will cover later. The code
    for the updated `login.html` template is as follows:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改 `login.html` 模板以允许更广泛的社会登录功能。这将为 Facebook 登录以及多个替代社交登录充当占位符，我们将在后面介绍。更新后的
    `login.html` 模板的代码如下：
- en: '[PRE153]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE170]'
- en: '[PRE171]'
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE175]'
- en: '[PRE176]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE180]'
- en: '[PRE181]'
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE184]'
- en: In the preceding code, we created a tabbed structure in which the first tab
    is our conventional login and the second tab corresponds to social logins.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在其中创建了一个标签结构，其中第一个标签是我们的传统登录，第二个标签对应于社交登录。
- en: Currently, there is just one option for Facebook available. More options will
    be added in upcoming recipes. Note that the link is currently simple; we can always
    add styles and buttons as needed later on.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，仅提供一种 Facebook 登录选项。在未来的菜谱中还将添加更多选项。请注意，链接目前很简单；我们可以在以后根据需要添加样式和按钮。
- en: How it works…
  id: totrans-301
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The login page has a new tab that provides an option for the user to log in
    using **Social Logins**, as shown in the following screenshot:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 登录页面有一个新的标签页，提供用户使用 **社交登录** 登录的选项，如下面的截图所示：
- en: '![Figure 6.8 – Social Logins page](img/B19111_06_08.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – 社交登录页面](img/B19111_06_08.jpg)'
- en: Figure 6.8 – Social Logins page
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – 社交登录页面
- en: When we click on the **Login via Facebook** link, the application is taken to
    Facebook, where the user will be asked for their login details and permission.
    Once the permission is granted, the user will be logged in to the application.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们点击 **通过 Facebook 登录** 链接时，应用程序将跳转到 Facebook，用户将被要求提供他们的登录详情和权限。一旦权限被授予，用户将登录到应用程序。
- en: Using Google for authentication
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Google 进行身份验证
- en: Just like we did for Facebook, we can integrate our application to enable login
    using Google.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们对 Facebook 所做的那样，我们可以将我们的应用程序集成以启用使用 Google 的登录。
- en: Getting ready
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Start by building over the last recipe. It is easy to implement Google authentication
    by simply leaving out the Facebook-specific elements as it is.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 从上一个菜谱开始构建。通过简单地省略 Facebook 特定的元素，很容易实现 Google 身份验证。
- en: 'Now, create a new project from the Google developer console ([https://console.developers.google.com](https://console.developers.google.com)).
    In the **APIs and Services** section, click on **Credentials**. Then, create a
    new client ID for the web application; this ID will provide the credentials needed
    for OAuth 2 to work. You will also need to configure the OAuth consent screen
    before a client ID can be created, as shown in the following screenshot:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从 Google 开发者控制台（[https://console.developers.google.com](https://console.developers.google.com)）创建一个新项目。在
    **APIs and Services** 部分中，点击 **Credentials**。然后，为网络应用程序创建一个新的客户端 ID；此 ID 将提供 OAuth
    2.0 运作所需的凭据。在创建客户端 ID 之前，您还需要配置 OAuth 授权屏幕，如下面的截图所示：
- en: "![Figu\uFEFFre 6.9 – Google app configuration](img/B19111_06_09.jpg)"
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – Google 应用配置](img/B19111_06_09.jpg)'
- en: Figure 6.9 – Google app configuration
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – Google 应用配置
- en: How to do it…
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To enable Google authentication in your application, follow these steps:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的应用程序中启用 Google 身份验证，请按照以下步骤操作：
- en: 'As always, start with the configuration part in `my_app/__init__.py`, as follows:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和往常一样，从 `my_app/__init__.py` 中的配置部分开始，如下所示：
- en: '[PRE185]'
  id: totrans-316
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-318
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE187]'
- en: '[PRE188]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-320
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-321
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE192]'
- en: In the preceding code snippet, we registered the Google blueprint provided by
    Flask-Dance with our application for authentication. This blueprint will be created
    in the `views` file, which we will take a look at next. Note the additional configuration
    option, `OAUTHLIB_RELAX_TOKEN_SCOPE`. This is suggested for use when implementing
    Google authentication because Google tends to provide data that sometimes diverges
    from the scope mentioned.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们将 Flask-Dance 提供的 Google 蓝图注册到我们的应用程序以进行身份验证。这个蓝图将在 `views` 文件中创建，我们将在下一部分查看。注意额外的配置选项
    `OAUTHLIB_RELAX_TOKEN_SCOPE`。这建议在实现 Google 身份验证时使用，因为 Google 有时会提供与提到的范围不一致的数据。
- en: 'Next, modify the views, that is, `my_app/auth/views.py`, as follows:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改视图，即 `my_app/auth/views.py`，如下所示：
- en: '[PRE193]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-327
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-328
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-329
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-330
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-331
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE199]'
- en: '[PRE200]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-334
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE202]'
- en: In the preceding code snippet, `make_google_blueprint` reads `GOOGLE_OAUTH_CLIENT_ID`
    and `GOOGLE_OAUTH_CLIENT_SECRET` from the application configuration and takes
    care of all the OAuth-related handling in the background. While making the Google
    blueprint, we set `scope` to `openid`, `https://www.googleapis.com/auth/userinfo.email`,
    and `https://www.googleapis.com/auth/userinfo.profile`, because we want to use
    a user’s email address as their unique username and display name after login.
    `openid` is required in `scope` because Google prefers it.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`make_google_blueprint`从应用程序配置中读取`GOOGLE_OAUTH_CLIENT_ID`和`GOOGLE_OAUTH_CLIENT_SECRET`，并在后台处理所有OAuth相关操作。在创建Google蓝图时，我们将`scope`设置为`openid`、`https://www.googleapis.com/auth/userinfo.email`和`https://www.googleapis.com/auth/userinfo.profile`，因为我们想使用用户的电子邮件地址作为他们的唯一用户名和登录后的显示名。`openid`在`scope`中是必需的，因为Google更喜欢它。
- en: We also set `redirect_to` to `auth.google_login` so Google is able to route
    the application back to this URL after authentication has succeeded. If this option
    is not set, the application will be automatically redirected to the home page,
    that is, `/`.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`redirect_to`设置为`auth.google_login`，这样Google在身份验证成功后能够将应用程序路由回此URL。如果没有设置此选项，应用程序将自动重定向到主页，即`/`。
- en: 'Next, create a new route handler that handles the login using Google with the
    following code:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的路由处理程序，用于处理使用以下代码的Google登录：
- en: '[PRE203]'
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE206]'
- en: '[PRE207]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE210]'
- en: '[PRE211]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE218]'
- en: '[PRE219]'
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE219]'
- en: Here, the method first checks whether the user is already authorized with Google.
    If not, it redirects the app to the Google login handler, where the user will
    need to follow the steps outlined by Google and give permission to our application
    so it can access the requested user details. Once the user is authorized with
    Google, the method requests the user’s details, including their name and email
    address, from Google. Using these user details, it is determined whether a user
    already exists with this email or not. If not, a new user is created and logged
    in; otherwise, the existing user is directly logged in.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，该方法首先检查用户是否已经通过Google授权。如果没有，它将应用重定向到Google登录处理程序，在那里用户需要遵循Google概述的步骤，并允许我们的应用程序访问请求的用户详细信息。一旦用户通过Google授权，该方法将从Google请求用户的详细信息，包括他们的姓名和电子邮件地址。使用这些用户详细信息，可以确定是否已经存在具有此电子邮件地址的用户。如果没有，将创建一个新用户并登录；否则，将直接登录现有用户。
- en: 'Finally, modify the login template, `login.html`, to allow the Google login.
    Add the following line inside the `social-logins` tab:'
  id: totrans-357
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改登录模板`login.html`，以允许Google登录。在`social-logins`标签内添加以下行：
- en: '[PRE220]'
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE222]'
- en: How it works…
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The Google login works in a manner similar to the Facebook login from the previous
    recipe.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: Google登录的方式与前面食谱中的Facebook登录类似。
- en: Using Twitter for authentication
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Twitter进行身份验证
- en: OAuth was actually born while writing the OpenID API for Twitter. In this recipe,
    we will integrate Twitter login with our application.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: OAuth实际上是在编写Twitter OpenID API时诞生的。在这个食谱中，我们将集成Twitter登录到我们的应用程序中。
- en: Getting ready
  id: totrans-365
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue by building over the *Using Google for authentication* recipe.
    It is easy to implement Twitter authentication – simply leave out the Facebook
    or Google-specific parts from the previous authentication recipes.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续构建在*使用Google进行身份验证*食谱之上。实现Twitter身份验证很容易 – 简单地从前一个身份验证食谱中省略Facebook或Google特定的部分。
- en: 'First, we have to create an application from the Twitter **Application Management**page
    ([https://developer.twitter.com/en/portal/dashboard](https://developer.twitter.com/en/portal/dashboard)).
    It will automatically create consumer API keys (**API Key** and **API Key Secret**)
    for us to use, as shown in the following screenshot:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须从Twitter**应用管理**页面([https://developer.twitter.com/en/portal/dashboard](https://developer.twitter.com/en/portal/dashboard))创建一个应用程序。它将自动为我们创建消费者API密钥（**API
    Key**和**API Key Secret**），如下面的截图所示：
- en: '![Figure 6.10 – Twitter app configuration](img/B19111_06_10.jpg)'
  id: totrans-368
  prefs: []
  type: TYPE_IMG
  zh: '![图6.10 – Twitter应用配置](img/B19111_06_10.jpg)'
- en: Figure 6.10 – Twitter app configuration
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – Twitter应用配置
- en: How to do it...
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'To enable Twitter authentication for your application, follow these steps:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 要为您的应用程序启用Twitter身份验证，请按照以下步骤操作：
- en: 'First, start with the configuration part in `my_app/__init__.py`, as follows:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从`my_app/__init__.py`中的配置部分开始，如下所示：
- en: '[PRE223]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE223]'
- en: '[PRE224]'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE228]'
- en: In the preceding code snippet, we registered the Twitter blueprint provided
    by Flask-Dance with our application for authentication. This blueprint will be
    created in the `views` file, which we will take a look at next.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们使用Flask-Dance提供的Twitter蓝图在我们的应用程序中进行身份验证注册。这个蓝图将在`views`文件中创建，我们将在下一节查看。
- en: 'Next, modify the views, that is, `my_app/auth/views.py`, as follows:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改视图，即`my_app/auth/views.py`，如下所示：
- en: '[PRE229]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE232]'
- en: In the preceding code, `make_twitter_blueprint` reads `TWITTER_OAUTH_CLIENT_KEY`
    and `TWITTER_OAUTH_CLIENT_SECRET` from the application configuration and takes
    care of all the OAuth-related handling in the background. There is no need to
    set `scope`, as we did during Facebook and Google authentication, as this recipe
    will use a Twitter handle as the username, which is provided by default.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`make_twitter_blueprint`从应用程序配置中读取`TWITTER_OAUTH_CLIENT_KEY`和`TWITTER_OAUTH_CLIENT_SECRET`，并在后台处理所有OAuth相关操作。不需要设置`scope`，因为我们之前在Facebook和Google身份验证中做的那样，因为这个配方将使用Twitter昵称作为用户名，这是默认提供的。
- en: We also set `redirect_to` to `auth.twitter_login` so that Twitter can route
    the application back to this URL after authentication has succeeded. If this option
    is not set, the application will be automatically redirected to the home page,
    that is, `/`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将`redirect_to`设置为`auth.twitter_login`，以便Twitter在身份验证成功后可以将应用程序路由回此URL。如果不设置此选项，应用程序将自动重定向到主页，即`/`。
- en: 'Next, create a new route handler that handles the login using Twitter, as follows:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，创建一个新的路由处理程序，用于处理使用Twitter的登录，如下所示：
- en: '[PRE233]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-398
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE243]'
- en: '[PRE244]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-400
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-401
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-403
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-404
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE250]'
- en: The preceding method first checks whether the user is already authorized with
    Twitter. If not, it redirects the app to the Twitter login handler, where the
    user will need to follow the steps outlined by Twitter and give permission to
    our application so it can access the requested user details. Once the user is
    authorized with Twitter, the method requests the user’s details, including their
    screen name or handle from Twitter. Using these user details, it is determined
    whether a user already exists with this Twitter handle or not. If not, a new user
    is created and logged in; otherwise, the existing user is directly logged in.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 上述方法首先检查用户是否已经通过Twitter授权。如果没有，它将应用重定向到Twitter登录处理程序，在那里用户需要遵循Twitter概述的步骤并允许我们的应用程序访问请求的用户详细信息。一旦用户通过Twitter授权，该方法将请求用户的详细信息，包括他们的Twitter屏幕名或昵称。使用这些用户详细信息，可以确定是否已经存在具有此Twitter昵称的用户。如果没有，将创建一个新用户并登录；否则，现有用户将直接登录。
- en: 'Finally, modify the login template, `login.html`, to allow the Twitter login.
    Add the following line inside the `social-logins` tab:'
  id: totrans-407
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改登录模板`login.html`，以允许Twitter登录。在`social-logins`选项卡内添加以下行：
- en: '[PRE251]'
  id: totrans-408
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE252]'
- en: How it works…
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe works in a manner similar to the Facebook and Google logins from
    previous recipes.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方的工作方式与之前配方中的Facebook和Google登录类似。
- en: Information
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 信息
- en: 'Similarly, we can integrate LinkedIn, GitHub, and scores of other third-party
    providers that provide support for login and authentication using OAuth. It’s
    up to you to implement any more integrations. The following links have been added
    for your reference:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们可以集成LinkedIn、GitHub和其他数百个提供OAuth登录和身份验证支持的第三方提供者。是否实现更多集成取决于您。以下链接已添加供您参考：
- en: '*LinkedIn*: [https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication)'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '*领英*：[https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication)'
- en: '*GitHub*: [https://docs.github.com/en/developers/apps/building-oauth-apps](https://docs.github.com/en/developers/apps/building-oauth-apps)'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '*GitHub*：[https://docs.github.com/en/developers/apps/building-oauth-apps](https://docs.github.com/en/developers/apps/building-oauth-apps)'
- en: Authenticating with LDAP
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用LDAP进行身份验证
- en: LDAP is essentially an internet protocol for looking up contact information
    about users, certificates, network pointers, and more from a server, where the
    data is stored in a directory-style structure. Of LDAP’s multiple use cases, the
    most popular is the single sign-on functionality, where a user can access multiple
    services by logging in to just one, as the credentials are shared across the system.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: LDAP本质上是一种互联网协议，用于从服务器查找有关用户、证书、网络指针等信息，其中数据存储在目录式结构中。在LDAP的多个用例中，最流行的是单点登录功能，用户只需登录一次即可访问多个服务，因为凭据在整个系统中是共享的。
- en: Getting ready
  id: totrans-418
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will create a login page similar to the one we created in
    the first recipe of this chapter, *Creating a simple session-based authentication*.
    The user can log in using their LDAP credentials. If the credentials are successfully
    authenticated on the provided LDAP server, the user is logged in.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将创建一个登录页面，类似于我们在本章第一篇配方*创建简单的基于会话的认证*中创建的页面。用户可以使用他们的LDAP凭证登录。如果凭证在提供的LDAP服务器上成功认证，用户将被登录。
- en: If you already have an LDAP server that you can access, feel free to skip the
    LDAP setup instructions explained in this section.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经有可以访问的LDAP服务器，可以自由跳过本节中解释的LDAP设置说明。
- en: The first step is to get access to an LDAP server. This can be a server already
    hosted somewhere, or you can create your own local LDAP server. The easiest way
    to spawn a demo LDAP server is by using Docker.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是获取访问LDAP服务器的权限。这可以是一个已经托管在某处的服务器，或者你可以创建自己的本地LDAP服务器。启动演示LDAP服务器的最简单方法是通过使用Docker。
- en: Important
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 重要
- en: Here, we are assuming that you have prior experience in Docker and have Docker
    installed on your machine. If not, please refer to [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/).
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们假设你之前有Docker的经验，并且已经在你的机器上安装了Docker。如果没有，请参阅[https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)。
- en: 'To create an LDAP server using Docker, run the following command on the terminal:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Docker创建LDAP服务器，请在终端运行以下命令：
- en: '[PRE253]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: 'Once the preceding command has successfully executed, test the server by searching
    for an example user with the username and password `admin` and `admin`, as follows:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦前面的命令成功执行，通过以下方式测试服务器，搜索用户名为`admin`和密码为`admin`的示例用户：
- en: '[PRE254]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: The successful execution of the preceding command indicates that the LDAP server
    is running and is ready for use.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 前面命令的成功执行表明LDAP服务器正在运行，并准备好使用。
- en: Tip
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Refer to `https:/``/``github.``com/``osixia/``docker-``openldap` for more information
    on the OpenLDAP Docker image.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于OpenLDAP Docker镜像的信息，请参阅`https:/``/``github.``com/``osixia/``docker-``openldap`。
- en: 'Now, install the Python library that will help our application talk to the
    LDAP server with the following code:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下代码安装将帮助我们的应用程序与LDAP服务器通信的Python库：
- en: '[PRE255]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: How to do it...
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To enable LDAP authentication for your application, follow these steps:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用应用程序的LDAP认证，请按照以下步骤操作：
- en: 'As always, start with the configuration part in `my_app/__init__.py`, as follows:'
  id: totrans-435
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 和往常一样，从`my_app/__init__.py`中的配置部分开始，如下所示：
- en: '[PRE256]'
  id: totrans-436
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-437
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-438
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-439
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-441
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE261]'
- en: In the preceding code snippet, we imported `ldap`, then created an app configuration
    option that points to the LDAP server address. This is followed by the creation
    of a simple function, `get_ldap_connection`, which creates the LDAP connection
    object on the server and then returns that connection object.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们导入了`ldap`，然后创建了一个指向LDAP服务器地址的应用配置选项。这之后是创建一个简单的函数`get_ldap_connection`，该函数在服务器上创建LDAP连接对象，然后返回该连接对象。
- en: 'Next, modify the views, that is, `my_app/auth/views.py`, where a new route,
    `ldap_login`, is created to facilitate login via LDAP, as follows:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，修改视图，即`my_app/auth/views.py`，在这里创建了一个新的路由`ldap_login`，以便通过LDAP进行登录，如下所示：
- en: '[PRE262]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-445
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE263]'
- en: '[PRE264]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-447
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-448
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-449
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-450
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-451
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-452
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-453
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-454
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-455
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-456
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-457
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-458
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-459
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE277]'
- en: '[PRE278]'
  id: totrans-460
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-461
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-462
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-463
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-464
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-465
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-466
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-467
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE286]'
- en: '[PRE287]'
  id: totrans-469
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-470
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-471
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-472
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-473
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-475
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-477
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE295]'
- en: '[PRE296]'
  id: totrans-478
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE297]'
- en: Here, we first checked whether the user is already authenticated. If they were,
    we redirected them to the home page; otherwise, we moved ahead. We then used `LoginForm`,
    which we created in the *Creating a simple session-based authentication* recipe,
    as we also require a username and password. Next, we validated the form and then
    fetched the connection object using `get_ldap_connection`. After, the application
    tried to authenticate the user from the LDAP server using `simple_bind_s`. Notice
    the string inside this method, `'cn=%s,dc=example,dc=org'` – this string might
    vary for each LDAP server depending on the configurations internal to the server.
    You are urged to contact your LDAP server admin if these details are not known.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们首先检查用户是否已经认证。如果已经认证，我们将他们重定向到主页；否则，我们继续前进。然后我们使用了`LoginForm`，这是我们之前在*创建简单的基于会话的认证*配方中创建的，因为我们也需要用户名和密码。接下来，我们验证了表单，然后使用`get_ldap_connection`获取连接对象。之后，应用程序尝试使用`simple_bind_s`从LDAP服务器认证用户。注意这个方法内部的字符串`'cn=%s,dc=example,dc=org'`，这个字符串可能因服务器内部配置的不同而有所不同。如果你不知道这些细节，请务必联系你的LDAP服务器管理员。
- en: If the user is successfully authenticated, then a new user record is created
    in our local database and the user is logged in. Otherwise, the LDAP connection
    fails and throws the error `INVALID_CREDENTIALS`, which is then caught and the
    user is notified accordingly.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户成功认证，那么在我们的本地数据库中创建一个新的用户记录，并且用户将被登录。否则，LDAP连接失败并抛出错误`INVALID_CREDENTIALS`，然后被捕获并相应地通知用户。
- en: Tip
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: We just witnessed the power of reusable components! As you can see, `LoginForm`
    has now been used for two different purposes. This is a good coding practice.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚见证了可重用组件的力量！正如你所见，`LoginForm`现在已被用于两个不同的目的。这是一个好的编程实践。
- en: 'Finally, modify the login template, `login.html`, to allow the LDAP login,
    as follows:'
  id: totrans-484
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，修改登录模板`login.html`以允许LDAP登录，如下所示：
- en: '[PRE298]'
  id: totrans-485
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-486
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-488
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-490
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-492
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-493
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-494
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-495
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE308]'
- en: '[PRE309]'
  id: totrans-496
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: '[PRE310]'
  id: totrans-497
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: '[PRE311]'
  id: totrans-498
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: '[PRE312]'
  id: totrans-499
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE312]'
- en: '[PRE313]'
  id: totrans-500
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE313]'
- en: '[PRE314]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE314]'
- en: '[PRE315]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE315]'
- en: '[PRE316]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE316]'
- en: '[PRE317]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE317]'
- en: '[PRE318]'
  id: totrans-505
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE318]'
- en: '[PRE319]'
  id: totrans-506
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE319]'
- en: '[PRE320]'
  id: totrans-507
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE320]'
- en: '[PRE321]'
  id: totrans-508
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE321]'
- en: '[PRE322]'
  id: totrans-509
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE322]'
- en: '[PRE323]'
  id: totrans-510
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE323]'
- en: '[PRE324]'
  id: totrans-511
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE324]'
- en: '[PRE325]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE325]'
- en: '[PRE326]'
  id: totrans-513
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE326]'
- en: '[PRE327]'
  id: totrans-514
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE327]'
- en: '[PRE328]'
  id: totrans-515
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE328]'
- en: '[PRE329]'
  id: totrans-516
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE329]'
- en: '[PRE330]'
  id: totrans-517
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE330]'
- en: '[PRE331]'
  id: totrans-518
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE331]'
- en: '[PRE332]'
  id: totrans-519
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE332]'
- en: '[PRE333]'
  id: totrans-520
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE333]'
- en: '[PRE334]'
  id: totrans-521
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE334]'
- en: '[PRE335]'
  id: totrans-522
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE335]'
- en: '[PRE336]'
  id: totrans-523
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE336]'
- en: '[PRE337]'
  id: totrans-524
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE337]'
- en: '[PRE338]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE338]'
- en: '[PRE339]'
  id: totrans-526
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE339]'
- en: '[PRE340]'
  id: totrans-527
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE340]'
- en: '[PRE341]'
  id: totrans-528
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE341]'
- en: '[PRE342]'
  id: totrans-529
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE342]'
- en: '[PRE343]'
  id: totrans-530
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE343]'
- en: '[PRE344]'
  id: totrans-531
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE344]'
- en: '[PRE345]'
  id: totrans-532
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE345]'
- en: '[PRE346]'
  id: totrans-533
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE346]'
- en: '[PRE347]'
  id: totrans-534
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE347]'
- en: '[PRE348]'
  id: totrans-535
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE348]'
- en: '[PRE349]'
  id: totrans-536
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE349]'
- en: '[PRE350]'
  id: totrans-537
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE350]'
- en: '[PRE351]'
  id: totrans-538
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE351]'
- en: '[PRE352]'
  id: totrans-539
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE352]'
- en: '[PRE353]'
  id: totrans-540
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE353]'
- en: '[PRE354]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE354]'
- en: '[PRE355]'
  id: totrans-542
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE355]'
- en: How it works…
  id: totrans-543
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The new login screen with the LDAP tab should look like the following screenshot:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 带有LDAP标签的新登录屏幕应如下截图所示：
- en: '![Figure 6.11 – LDAP Login screen](img/B19111_06_11.jpg)'
  id: totrans-545
  prefs: []
  type: TYPE_IMG
  zh: '![图6.11 – LDAP登录屏幕](img/B19111_06_11.jpg)'
- en: Figure 6.11 – LDAP Login screen
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11 – LDAP登录屏幕
- en: Here, the user simply needs to enter their username and password. If the credentials
    are correct, the user will be logged in and taken to the home screen; otherwise,
    an error will occur.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，用户只需输入他们的用户名和密码。如果凭证正确，用户将被登录并带到主屏幕；否则，将发生错误。
- en: See also
  id: totrans-548
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can read more about LDAP at [https://en.wikipedia.org/wiki/Lightweight_
    Directory_Access_Protocol](https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol)
    and [https://www.python-ldap.org](https://www.python-ldap.org).
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol](https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol)和[https://www.python-ldap.org](https://www.python-ldap.org)了解更多关于LDAP的信息。
