- en: Chapter 13
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 13 章
- en: Exercises With a Quotient and a Remainder
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 带有商和余数的练习
- en: 13.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.1 简介
- en: 'What types of problems might require the use of the quotient and the remainder
    of an integer division? While there may not be a simple answer to this question,
    quotients and remainders can be used to:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在整数除法中，可能需要使用商和余数的哪些类型的问题？虽然这个问题可能没有简单的答案，但商和余数可以用来：
- en: ►split a number into individual digits
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: ►将一个数字拆分为单独的数字
- en: ►examine if an integer is odd or even
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: ►检查一个整数是奇数还是偶数
- en: ►examine if a number is a multiple of another number
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: ►检查一个数是否是另一个数的倍数
- en: ►convert an elapsed time (in seconds) to hours, minutes, and seconds
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: ►将经过的时间（以秒为单位）转换为小时、分钟和秒
- en: ►convert an amount of money (in USD) to a number of $100 notes, $50 notes, $20
    notes, and such
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: ►将金额（以美元为单位）转换为100美元纸币、50美元纸币、20美元纸币等数量
- en: ►calculate the greatest common divisor
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ►计算最大公约数
- en: ►determine if a number is a palindrome
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ►确定一个数是否是回文数
- en: ►count the number of digits within a number
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ►计算一个数字中数字的数量
- en: ►determine how many times a specific digit occurs within a number
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: ►确定一个特定数字在数字中出现的次数
- en: Of course, these are some of the uses and certainly you can find so many others.
    Next you will see some exercises that make use of the quotient and the remainder
    of integer division.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这些只是一些用途，你肯定可以找到更多。接下来，你将看到一些利用整数除法商和余数的练习。
- en: Exercise 13.1-1 Calculating the Quotient and Remainder of Integer Division
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 13.1-1 计算整数除法的商和余数
- en: Write a Python program that prompts the user to enter two integers and then
    calculates the quotient and the remainder of the integer division.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入两个整数，然后计算整数除法的商和余数。
- en: Solution
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: You can use the ( // ) and the ( % ) operators of Python. The former performs
    an integer division and returns the integer quotient whereas the latter performs
    an integer division and returns the integer remainder. The solution is presented
    here.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 Python 的 ( // ) 和 ( % ) 运算符。前者执行整数除法并返回整数商，而后者执行整数除法并返回整数余数。解决方案在此处展示。
- en: '![](img/my_exercise_header.png) file_13.1-1a'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-1a'
- en: 'number1 = int(input("Enter first number: "))'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'number1 = int(input("Enter first number: "))'
- en: 'number2 = int(input("Enter second number: "))'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'number2 = int(input("Enter second number: "))'
- en: q = number1 // number2
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: q = number1 // number2
- en: r = number1 % number2
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: r = number1 % number2
- en: print("Integer Quotient:", q, "\nInteger Remainder:", r)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: print("Integer Quotient:", q, "\nInteger Remainder:", r)
- en: '![](img/notice.jpg)In flowcharts, in order to calculate the quotient and the
    remainder of an integer division, you can use the popular DIV and MOD operators.
    An example is shown here.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在流程图中，为了计算整数除法的商和余数，你可以使用流行的 DIV 和 MOD 运算符。以下是一个示例。'
- en: .![Image](img/chapter13-01.png)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter13-01.png)
- en: A more “Pythonic” way is to use the divmod() function as shown in the example
    that follows.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 更“Pythonic”的方法是使用 divmod() 函数，如下面的示例所示。
- en: '![](img/my_exercise_header.png) file_13.1-1b'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-1b'
- en: 'number1 = int(input("Enter first number: "))'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'number1 = int(input("Enter first number: "))'
- en: 'number2 = int(input("Enter second number: "))'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'number2 = int(input("Enter second number: "))'
- en: q, r = divmod(number1, number2)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: q, r = divmod(number1, number2)
- en: print("Integer Quotient:", q, "\nInteger Remainder:", r)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: print("Integer Quotient:", q, "\nInteger Remainder:", r)
- en: Exercise 13.1-2 Finding the Sum of Digits
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 13.1-2 求数字之和
- en: Write a Python program that prompts the user to enter a four-digit integer and
    then calculates the sum of its digits.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入一个四位数，然后计算其数字之和。
- en: Solution
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: What you should keep in mind here is that statements like this one
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你应该记住的是，像这样的语句
- en: 'number = int(input("Enter a four-digit integer: "))'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'number = int(input("Enter a four-digit integer: "))'
- en: assign the user-provided four-digit integer to one single variable, number,
    and not to four individual variables. So, after the user enters the four-digit
    integer, the program must split the integer into its four digits and assign each
    digit to a separate variable. Then it can calculate the sum of these four variables
    and get the required result. There are two approaches available.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将用户提供的四位数分配给一个单独的变量，number，而不是分配给四个单独的变量。因此，在用户输入四位数后，程序必须将整数拆分为其四个数字，并将每个数字分配给一个单独的变量。然后它可以计算这些四个变量的和，得到所需的结果。有两种方法可用。
- en: First approach
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: Let's try to understand the first approach using an arithmetic example. Take
    the number 6753, for example.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试通过一个算术示例来理解第一种方法。以数字 6753 为例。
- en: '| First digit = 6 | The first digit can be isolated if you divide the user‑provided
    number by 1000 using the ( // ) operator to get the integer quotient digit1 =
    6753 // 1000 |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| 第一位数字 = 6 | 如果使用 ( // ) 运算符将用户提供的数字除以 1000，则可以隔离第一位数字 digit1 = 6753 // 1000'
- en: '| Remaining digits = 753 | The remaining digits can be isolated if you divide
    the user‑provided number by 1000 again, this time using the ( % ) operator to
    get the integer remainder r = 6753 % 1000 |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 剩余数字 = 753 | 如果再次将用户提供的数字除以 1000，这次使用 ( % ) 运算符来获取整数余数 r = 6753 % 1000，则可以隔离剩余的数字'
- en: '| Second digit = 7 | The second digit can be isolated if you divide the remaining
    digits by 100 using the ( // ) operator to get the integer quotient digit2 = 753
    // 100 |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 第二位数字 = 7 | 如果使用 ( // ) 运算符将剩余的数字除以 100，则可以隔离第二位数字 digit2 = 753 // 100'
- en: '| Remaining digits = 53 | The remaining digits are now r = 753 % 100 |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| 剩余数字 = 53 | 现在的剩余数字是 r = 753 % 100'
- en: '| Third digit = 5 | The third digit can be isolated if you divide the remaining
    digits by 10 using the ( // ) operator to get the integer quotient digit3 = 53
    // 10 |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| 第三位数字 = 5 | 如果使用 ( // ) 运算符将剩余的数字除以 10，则可以隔离第三位数字 digit3 = 53 // 10'
- en: '| Fourth digit = 3 | The last remaining digit, which happens to be the fourth
    digit, is digit4 = 53 % 10 |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| 第四位数字 = 3 | 最后剩下的数字，恰好是第四位数字，是 digit4 = 53 % 10'
- en: The Python program that solves this algorithm is shown here.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此算法的 Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_13.1-2a'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-2a'
- en: 'number = int(input("Enter a four-digit integer: "))'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("输入一个四位整数："))
- en: digit1 = number // 1000
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = number // 1000
- en: r = number % 1000
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: r = number % 1000
- en: digit2 = r // 100
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = r // 100
- en: r = r % 100
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: r = r % 100
- en: digit3 = r // 10
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = r // 10
- en: digit4 = r % 10
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: digit4 = r % 10
- en: total = digit1 + digit2 + digit3 + digit4
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: total = digit1 + digit2 + digit3 + digit4
- en: print(total)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: The trace table for the program that you have just seen is shown here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚才看到的程序的跟踪表如下所示。
- en: '| Step | Statement | Notes | number | digit1 | digit2 | digit3 | digit4 | r
    | total |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | number | digit1 | digit2 | digit3 | digit4 | r | total |'
- en: '| 1 | number = int(input("Enter … | User enters 6753 | 6753 | ? | ? | ? | ?
    | ? | ? |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 | number = int(input("Enter … | 用户输入 6753 | 6753 | ? | ? | ? | ? | ? |
    ? |'
- en: '| 2 | digit1 = number // 1000 |   | 6753 | 6 | ? | ? | ? | ? | ? |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 2 | digit1 = number // 1000 |   | 6753 | 6 | ? | ? | ? | ? | ? |'
- en: '| 3 | r = number % 1000 |   | 6753 | 6 | ? | ? | ? | 753 | ? |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 3 | r = number % 1000 |   | 6753 | 6 | ? | ? | ? | 753 | ? |'
- en: '| 4 | digit2 = r // 100 |   | 6753 | 6 | 7 | ? | ? | 753 | ? |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 4 | digit2 = r // 100 |   | 6753 | 6 | 7 | ? | ? | 753 | ? |'
- en: '| 5 | r = r % 100 |   | 6753 | 6 | 7 | ? | ? | 53 | ? |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 5 | r = r % 100 |   | 6753 | 6 | 7 | ? | ? | 53 | ? |'
- en: '| 6 | digit3 = r // 10 |   | 6753 | 6 | 7 | 5 | ? | 53 | ? |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 6 | digit3 = r // 10 |   | 6753 | 6 | 7 | 5 | ? | 53 | ? |'
- en: '| 7 | digit4 = r % 10 |   | 6753 | 6 | 7 | 5 | 3 | 53 | ? |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| 7 | digit4 = r % 10 |   | 6753 | 6 | 7 | 5 | 3 | 53 | ? |'
- en: '| 8 | total = digit1 + digit2 + digit3 + digit4 |   | 6753 | 6 | 7 | 5 | 3
    | 53 | 21 |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 8 | total = digit1 + digit2 + digit3 + digit4 |   | 6753 | 6 | 7 | 5 | 3
    | 53 | 21 |'
- en: '| 9 | print(total) | It displays: 21 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 9 | print(total) | 它显示：21 |'
- en: To further help you, find below a general purpose Python program that can be
    used to split any given integer. Since the length of your program depends on the
    number of digits, N, all you have to do is write N−1 pairs of statements.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步帮助你，下面是一个通用的 Python 程序，可以用来分割任何给定的整数。由于程序长度取决于数字的个数 N，你只需要编写 N-1 对语句。
- en: 'number = int(input("Enter an N-digit integer: "))'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'number = int(input("Enter an N-digit integer: "))'
- en: digit1 = number // 10^(N-1)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = number // 10^(N-1)
- en: r = number % 10^(N-1)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: r = number % 10^(N-1)
- en: digit2 = r // 10^(N-2)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = r // 10^(N-2)
- en: r = r % 10^(N-2)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: r = r % 10^(N-2)
- en: .
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: digit(N-2) = r // 100
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: digit(N-2) = r // 100
- en: r = r % 100
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: r = r % 100
- en: digit(N-1) = r // 10
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: digit(N-1) = r // 10
- en: digit(N) = r % 10
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: digit(N) = r % 10
- en: For example, if you want to split a six-digit integer, you need to write five
    pairs of statements as shown in the program that follows.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你想分割一个六位整数，你需要编写五对如程序中所示的状态语句。
- en: '![](img/my_exercise_header.png) file_13.1-2b'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-2b'
- en: 'number = int(input("Enter an six-digit integer: "))'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("输入一个六位整数："))
- en: digit1 = number // 100000
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = number // 100000
- en: r = number % 100000
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: r = number % 100000
- en: digit2 = r // 10000
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = r // 10000
- en: r = r % 10000
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: r = r % 10000
- en: digit3 = r // 1000
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = r // 1000
- en: r = r % 1000
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: r = r % 1000
- en: digit4 = r // 100
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: digit4 = r // 100
- en: r = r % 100
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: r = r % 100
- en: digit5 = r // 10
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: digit5 = r // 10
- en: digit6 = r % 10
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: digit6 = r % 10
- en: print(digit1, digit2, digit3, digit4, digit5, digit6)
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: print(digit1, digit2, digit3, digit4, digit5, digit6)
- en: This approach, however, can be refined a little using the divmod() function.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法，然而，可以通过使用 divmod() 函数进行一点改进。
- en: '![](img/my_exercise_header.png) file_13.1-2c'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-2c'
- en: 'number = int(input("Enter an six-digit integer: "))'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("请输入一个六位数整数："))
- en: digit1, r = divmod(number, 100000)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: digit1, r = divmod(number, 100000)
- en: digit2, r = divmod(r, 10000)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: digit2, r = divmod(r, 10000)
- en: digit3, r = divmod(r, 1000)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: digit3, r = divmod(r, 1000)
- en: digit4, r = divmod(r, 100)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: digit4, r = divmod(r, 100)
- en: digit5, digit6 = divmod(r, 10)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: digit5, digit6 = divmod(r, 10)
- en: print(digit1, digit2, digit3, digit4, digit5, digit6)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: print(digit1, digit2, digit3, digit4, digit5, digit6)
- en: Second approach
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: 'For a four-digit given integer, the first approach performs three pairs of
    divisions—first by 1000, then by 100, and finally by 10—isolating the digits from
    left to right. In contrast, the three pairs of divisions in this second approach
    are all by 10, isolating the digits from right to left. Once again, to delve deeper
    into this approach, let''s use an arithmetic example. Consider the same user-provided
    number: 6753.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个四位数的给定整数，第一种方法执行了三对除法——首先除以1000，然后除以100，最后除以10——从左到右隔离数字。相比之下，第二种方法中的三对除法都是除以10，从右到左隔离数字。再次深入探讨这种方法，让我们用一个算术例子来说明。考虑相同的用户提供的数字：6753。
- en: '| Fourth digit = 3 | The fourth digit can be isolated if you divide the user‑provided
    number by 10 using the ( % ) operator to get the integer remainder digit4 = 6753
    % 10 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 第四位数字 = 3 | 如果您使用(%)运算符将用户提供的数字除以10，以获取整数余数digit4 = 6753 % 10，可以隔离第四位数字|'
- en: '| Remaining digits = 675 | The remaining digits can be isolated if you divide
    the user‑provided number by 10 again, this time using the ( // ) operator to get
    the integer quotient r = 6753 // 10 |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 剩余数字 = 675 | 如果您再次将用户提供的数字除以10，这次使用(//)运算符来获取整数商r = 6753 // 10，可以隔离剩余的数字|'
- en: '| Third digit = 5 | The third digit can be isolated if you divide the remaining
    digits by 10 using the ( % ) operator to get the integer remainder digit3 = 675
    % 10 |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| 第三位数字 = 5 | 如果您使用(%)运算符将剩余的数字除以10，以获取整数余数digit3 = 675 % 10，可以隔离第三位数字|'
- en: '| Remaining digits = 67 | The remaining digits are now r = 675 // 10 |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| 剩余数字 = 67 | 现在的剩余数字是r = 675 // 10|'
- en: '| Second digit = 7 | The second digit can be isolated if you divide the remaining
    digits by 10 using the ( % ) operator to get the integer remainder digit2 = 67
    % 10 |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| 第二位数字 = 7 | 如果您使用(%)运算符将剩余的数字除以10，以获取整数余数digit2 = 67 % 10，可以隔离第二位数字|'
- en: '| First digit = 6 | The last remaining digit, which happens to be the first
    digit, is digit1 = 67 // 10 |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| 第一位数字 = 6 | 最后剩下的数字，恰好是第一位数字，是digit1 = 67 // 10|'
- en: The Python program for this algorithm is shown here.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了该算法的Python程序。
- en: '![](img/my_exercise_header.png) file_13.1-2d'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-2d'
- en: 'number = int(input("Enter a four-digit integer: "))'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("请输入一个四位数整数："))
- en: digit4 = number % 10
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: digit4 = number % 10
- en: r = number // 10
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: r = number // 10
- en: digit3 = r % 10
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = r % 10
- en: r = r // 10
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: r = r // 10
- en: digit2 = r % 10
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = r % 10
- en: digit1 = r // 10
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = r // 10
- en: total = digit1 + digit2 + digit3 + digit4
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: total = digit1 + digit2 + digit3 + digit4
- en: print(total)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: To further help you, find below a general purpose Python program that can be
    used to split any given integer. This program uses the second approach. Once again,
    since the length of your program depends on the number of the digits, N, all you
    have to do is write N−1 pairs of statements.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进一步帮助您，下面是一个通用的Python程序，可以用来分割任何给定的整数。这个程序使用第二种方法。同样，由于您程序的长度取决于数字的个数N，您只需编写N-1对语句。
- en: 'number = int(input("Enter a N-digit integer: "))'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("请输入一个N位数整数："))
- en: digit(N) = number % 10
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: digit(N) = number % 10
- en: r = number // 10
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: r = number // 10
- en: digit(N-1) = r % 10
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: digit(N-1) = r % 10
- en: r = r // 10
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: r = r // 10
- en: .
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: .
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: .
- en: digit3 = r % 10
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = r % 10
- en: r = r // 10
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: r = r // 10
- en: digit2 = r % 10
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = r % 10
- en: digit1 = r // 10
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = r // 10
- en: For example, if you want to split a five-digit integer, you must use four pairs
    of statements as shown in the program that follows.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您想分割一个五位数整数，您必须使用程序中显示的四对语句。
- en: '![](img/my_exercise_header.png) file_13.1-2e'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-2e'
- en: 'number = int(input("Enter a five-digit integer: "))'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("请输入一个五位数整数："))
- en: digit5 = number % 10
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: digit5 = number % 10
- en: r = number // 10
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: r = number // 10
- en: digit4 = r % 10
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: digit4 = r % 10
- en: r = r // 10
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: r = r // 10
- en: digit3 = r % 10
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = r % 10
- en: r = r // 10
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: r = r // 10
- en: digit2 = r % 10
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = r % 10
- en: digit1 = r // 10
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = r // 10
- en: print(digit1, digit2, digit3, digit4, digit5)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: print(digit1, digit2, digit3, digit4, digit5)
- en: As with the previous example, this approach can be refined a little, using the
    divmod() function.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 与前面的例子一样，这种方法可以稍微改进，使用divmod()函数。
- en: '![](img/my_exercise_header.png) file_13.1-2f'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-2f'
- en: 'number = int(input("Enter an five-digit integer: "))'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("请输入一个五位数整数："))
- en: r, digit5 = divmod(number, 10)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: r, digit5 = divmod(number, 10)
- en: r, digit4 = divmod(r, 10)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: r, digit4 = divmod(r, 10)
- en: r, digit3 = divmod(r, 10)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: r, digit3 = divmod(r, 10)
- en: digit1, digit2 = divmod(r, 10)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: digit1, digit2 = divmod(r, 10)
- en: print(digit1, digit2, digit3, digit4, digit5)
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: print(digit1, digit2, digit3, digit4, digit5)
- en: Exercise 13.1-3 Displaying an Elapsed Time
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 13.1-3 显示经过的时间
- en: Write a Python program that prompts the user to enter an integer that represents
    an elapsed time in seconds and then displays it in the format “DD day(s) HH hour(s)
    MM minute(s) and SS second(s)”. For example, if the user enters the number 700005,
    the message “8 day(s) 2 hours 26 minute(s) and 45 second(s)” must be displayed.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入一个表示经过时间的整数（以秒为单位），然后以“DD 天 HH 小时 MM 分钟和 SS 秒”的格式显示它。例如，如果用户输入数字
    700005，则必须显示消息“8 天 2 小时 26 分钟和 45 秒”。
- en: Solution
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: As you may already know, there are 60 seconds in a minute, 3600 seconds in an
    hour (60 × 60), and 86400 seconds in a day (3600 × 24). Let's try to analyze the
    number 700005 using the first approach that you learned in the previous exercise.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如您可能已经知道，一分钟有 60 秒，一小时有 3600 秒（60 × 60），一天有 86400 秒（3600 × 24）。让我们尝试使用您在之前练习中学到的第一种方法来分析数字
    700005。
- en: '| Days = 8 | The number of days can be isolated if you divide the user‑provided
    integer by 86400 using the ( // ) operator to get the integer quotient days =
    700005 // 86400 |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 天数 = 8 | 如果您使用整数除法运算符（//）将用户提供的整数除以 86400，可以得到天数 days = 700005 // 86400，从而可以单独计算出天数
    |'
- en: '| Remaining seconds = 8805 | The remaining seconds can be isolated if you divide
    the user‑provided integer by 86400 again, this time using the ( % ) operator to
    get the integer remainder r = 700005 % 86400 |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 剩余秒数 = 8805 | 如果您再次将用户提供的整数除以 86400，这次使用取模运算符（%），可以得到余数 r = 700005 % 86400，从而可以单独计算出剩余秒数
    |'
- en: '| Hours = 2 | The number of hours can be isolated if you divide the remaining
    seconds by 3600 using the ( // ) operator to get the integer quotient hours =
    8805 // 3600 |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| 小时数 = 2 | 如果您使用整数除法运算符（//）将剩余秒数除以 3600，可以得到小时数 hours = 8805 // 3600 |'
- en: '| Remaining seconds = 1605 | The remaining seconds are now r = 8805 % 3600
    |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 剩余秒数 = 1605 | 现在的剩余秒数是 r = 8805 % 3600 |'
- en: '| Minutes = 26 | The number of minutes can be isolated if you divide the remaining
    seconds by 60 using the ( // ) operator to get the integer quotient minutes =
    1605 // 60 |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| 分钟数 = 26 | 如果您使用整数除法运算符（//）将剩余秒数除以 60，可以得到分钟数 minutes = 1605 // 60 |'
- en: '| Seconds = 45 | The last remainder, which happens to be the number of seconds
    left, is seconds = 1605 % 60 |'
  id: totrans-164
  prefs: []
  type: TYPE_TB
  zh: '| 秒数 = 45 | 最后的余数，恰好是剩余的秒数，是 seconds = 1605 % 60 |'
- en: The Python program for this algorithm is as follows.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 此算法的 Python 程序如下。
- en: '![](img/my_exercise_header.png) file_13.1-3a'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-3a'
- en: 'number = int(input("Enter a period of time in seconds: "))'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'number = int(input("Enter a period of time in seconds: "))'
- en: 'days, r = divmod(number, 86400)   # 60 * 60 * 24 = 86400'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'days, r = divmod(number, 86400)   # 60 * 60 * 24 = 86400'
- en: hours, r = divmod(r, 3600)        # 60 * 60 = 3600
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 'hours, r = divmod(r, 3600)      # 60 * 60 = 3600'
- en: minutes, seconds = divmod(r, 60)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: minutes, seconds = divmod(r, 60)
- en: print(days, "day(s)", hours, "hour(s)")
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: print(days, "day(s)", hours, "hour(s)")
- en: print(minutes, "minute(s) and", seconds, "second(s)")
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: print(minutes, "minute(s) and", seconds, "second(s)")
- en: You can also solve this exercise using the second approach from the previous
    exercise. All you have to do is first divide by 60, then divide by 60 again, and
    finally divide by 24, as shown here.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以使用之前练习中的第二种方法来解决此题。您只需首先除以 60，然后再次除以 60，最后除以 24，如下所示。
- en: '![](img/my_exercise_header.png) file_13.1-3b'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-3b'
- en: 'number = int(input("Enter a period of time in seconds: "))'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'number = int(input("Enter a period of time in seconds: "))'
- en: r, seconds = divmod(number, 60)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: r, seconds = divmod(number, 60)
- en: r, minutes = divmod(r, 60)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: r, minutes = divmod(r, 60)
- en: days, hours = divmod(r, 24)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: days, hours = divmod(r, 24)
- en: print(days, "day(s)", hours, "hour(s)")
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: print(days, "day(s)", hours, "hour(s)")
- en: print(minutes, "minute(s) and", seconds, "second(s)")
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: print(minutes, "minute(s) and", seconds, "second(s)")
- en: Exercise 13.1-4 Reversing a Number
  id: totrans-181
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 13.1-4 反转一个数字
- en: Write a Python program that prompts the user to enter a three-digit integer
    and then builds and displays its reverse. For example, if the user enters the
    number 875, the program must display 578.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，提示用户输入一个三位整数，然后构建并显示其反转。例如，如果用户输入数字 875，则程序必须显示 578。
- en: Solution
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: To isolate the three digits of the user-provided integer, you can use either
    first or second approach. Afterward, the only difficulty in this exercise is to
    build the reversed number.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要单独计算出用户提供的整数的三个数字，您可以使用第一种或第二种方法。之后，此练习中的唯一困难是构建反转的数字。
- en: 'Take the number 875, for example. The three digits, after isolation, will be:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 以数字875为例。隔离后的三位数字将是：
- en: digit1 = 8
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = 8
- en: digit2 = 7
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: digit2 = 7
- en: digit3 = 5
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = 5
- en: 'You can then build the reversed number by simply calculating the sum of the
    products:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以通过简单地计算乘积的和来构建反转的数字：
- en: digit3 × 100 + digit2 × 10 + digit1 × 1 = 5 × 100 + 7 × 10 + 8 × 1 = 578
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 × 100 + digit2 × 10 + digit1 × 1 = 5 × 100 + 7 × 10 + 8 × 1 = 578
- en: For a change, let's split the user-provided number using the second approach.
    The Python program will look like this.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 为了改变一下，让我们使用第二种方法来分割用户提供的数字。Python程序将如下所示。
- en: '![](img/my_exercise_header.png) file_13.1-4'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_13.1-4'
- en: 'number = int(input("Enter a three-digit integer: "))'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: number = int(input("请输入一个三位整数："))
- en: digit3 = number % 10    #This is the rightmost digit
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: digit3 = number % 10    # 这是右边的数字
- en: r = number // 10
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: r = number // 10
- en: 'digit2 = r % 10         #This is the digit in the middle'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 'digit2 = r % 10         # 这是中间的数字'
- en: digit1 = r // 10        #This is the leftmost digit
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: digit1 = r // 10        # 这是左边的数字
- en: reversedNumber = digit3 * 100 + digit2 * 10 + digit1
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: reversedNumber = digit3 * 100 + digit2 * 10 + digit1
- en: print(reversedNumber)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: print(reversedNumber)
- en: 13.2 Review Exercises
  id: totrans-200
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 13.2 复习练习
- en: Complete the following exercises.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Write a Python program that prompts the user to enter any integer and then
    multiplies its last digit by 8 and displays the result.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 1)编写一个Python程序，提示用户输入任何整数，然后将其最后一位数字乘以8并显示结果。
- en: 'Hint: It is not necessary to know the exact number of digits. You can isolate
    the last digit of any integer using a modulus 10 operation.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：没有必要知道确切的数字位数。你可以使用取模10操作来隔离任何整数的最后一位数字。
- en: 2)Write a Python program that prompts the user to enter a five-digit integer.
    The program must then find and display the sum of the original number and its
    reverse. For example, if the user enters the number 32675, the program must display
    the message “32675 + 57623 = 90298”.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 2)编写一个Python程序，提示用户输入一个五位数整数。程序必须然后找到并显示原始数字和其反转的和。例如，如果用户输入数字32675，程序必须显示消息“32675
    + 57623 = 90298”。
- en: 3)Write a Python program that prompts the user to enter an integer and then
    it displays 1 when the number is odd; otherwise, it displays 0\. Try not to use
    any decision control structures since you haven't learned anything about them
    yet!
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 3)编写一个Python程序，提示用户输入一个整数，然后当数字是奇数时显示1；否则显示0。尽量不使用任何决策控制结构，因为你还没有学习过它们！
- en: 4)Write a Python program that prompts the user to enter an integer and then
    it displays 1 when the number is even; otherwise, it displays 0\. Try not to use
    any decision control structures since you haven't learned anything about them
    yet!
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 4)编写一个Python程序，提示用户输入一个整数，然后当数字是偶数时显示1；否则显示0。尽量不使用任何决策控制结构，因为你还没有学习过它们！
- en: 5)Write a Python program that prompts the user to enter an integer representing
    an elapsed time in seconds and then displays it in the format “WW week(s) DD day(s)
    HH hour(s) MM minute(s) and SS second(s)”. For example, if the user enters the
    number 2000000, the message “3 week(s) 2 day(s) 3 hour(s) 33 minute(s) and 20
    second(s)” must be displayed.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 5)编写一个Python程序，提示用户输入表示已过时间的秒数的整数，然后以“WW周（s）DD天（s）HH小时（s）MM分钟（s）和SS秒（s）”的格式显示它。例如，如果用户输入数字2000000，必须显示消息“3周（s）2天（s）3小时（s）33分钟（s）和20秒（s）”。
- en: 6)Inside an ATM bank machine there are notes of $20, $10, $5, and $1\. Write
    a Python program that prompts the user to enter the amount of money they want
    to withdraw (using an integer value) and then displays the least number of notes
    the ATM must give. For example, if the user enters an amount of $76, the program
    must display the message “3 note(s) of $20, 1 note(s) of $10, 1 note(s) of $5,
    and 1 note(s) of $1”.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在自动柜员机（ATM）银行机器中，有$20、$10、$5和$1的纸币。编写一个Python程序，提示用户输入他们想要取出的金额（使用整数值），然后显示ATM必须给出的最少纸币数量。例如，如果用户输入$76，程序必须显示消息“3张$20的纸币，1张$10的纸币，1张$5的纸币和1张$1的纸币”。
- en: 7)A robot arrives on the moon in order to perform some experiments. Each of
    the robot's steps is 25 inches long. Write a Python program that prompts the user
    to enter the number of steps the robot made and then calculates and displays the
    distance traveled in miles, feet, yards, and inches. For example, if the distance
    traveled is 100000 inches, the program must display the message “1 mile(s), 1017
    yard(s), 2 foot/feet, and 4 inch(es)”.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 7)一个机器人到达月球以执行一些实验。机器人的每一步长为 25 英寸。编写一个 Python 程序，提示用户输入机器人迈出的步数，然后计算并显示机器人行走的距离（以英里、英尺、码和英寸为单位）。例如，如果行走的距离是
    100000 英寸，程序必须显示消息“1 英里(s)，1017 码(s)，2 英尺/feet，和 4 英寸(es)”。
- en: It is given that
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 已知
- en: ►1 mile = 63360 inches
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: ►1 英里 = 63360 英寸
- en: ►1 yard = 36 inches
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: ►1 码 = 36 英寸
- en: ►1 foot = 12 inches
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: ►1 英尺 = 12 英寸
