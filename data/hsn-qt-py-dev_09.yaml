- en: Using Comboboxes and List Views
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Combobox和列表视图
- en: The components of the GUI that will be discussed in this chapter are somewhat
    mixed in nature. They are text fields and can be used to control elements in the
    application. In other words, the user can input text in these fields and then
    make a choice via a drop-down menu that is provided with additional functionality.
    Using these components helps make the GUI application more compact and informative.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将要讨论的GUI组件在性质上有些混合。它们是文本字段，可以用来控制应用程序中的元素。换句话说，用户可以在这些字段中输入文本，然后通过提供额外功能的下拉菜单进行选择。使用这些组件有助于使GUI应用程序更加紧凑和富有信息量。
- en: The components within this chapter represent the model-view paradigm of the
    Qt framework. In short, the line edit field can also be implemented using the
    list view.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的组件代表了Qt框架中的模型-视图范式。简而言之，行编辑字段也可以使用列表视图实现。
- en: 'In this chapter, the following topics will be covered:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Model-view architecture
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型-视图架构
- en: Combobox
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Combobox
- en: Simple list view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 简单列表视图
- en: Table
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格
- en: Model-view architecture
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模型-视图架构
- en: 'The Qt framework has a set of classes that utilize a model-view paradigm to
    regulate the relationship between the data and the representation of the data
    known as the **Model-View-Controller** (**MVC**) paradigm. MVC is a design pattern
    that''s often used while establishing user interfaces. MVC has three kinds of
    objects:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Qt框架有一组类，它们利用模型-视图范式来调节数据与其表示之间的关系，称为**模型-视图-控制器**（**MVC**）范式。MVC是一种在建立用户界面时经常使用的模式。MVC有三个类型的对象：
- en: The model (application object)
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型（应用程序对象）
- en: The view (screen presentation)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图（屏幕展示）
- en: The controller (defines the action on the user interface on user input)
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器（定义用户界面上的用户输入动作）
- en: 'The following diagram depicts the interactions among the model, view, and controller:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表展示了模型、视图和控制器之间的交互：
- en: '![](img/331fcf00-26d2-4857-bb54-effe5c8b3299.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/331fcf00-26d2-4857-bb54-effe5c8b3299.png)'
- en: In the Qt framework, when the view and controller are combined, this creates
    the model-view architecture. To create the model with Qt, the framework uses the
    classes of the `QtCore` module, such as `QAbstractItemModel`, the base class,
    and the classes that inherit this class, such as `QAbstractListModel` and `QAbstractTableModel`.
    The classes that represent the views use the views from the `QtWidgets` module,
    such as `QListView`, `QTableView`, and `QTreeView`, and they inherit the base
    class, `QAbstractItemView`. Here, we will describe just a few of them, including the
    basics for implementing the model-view architecture with the application. Refer
    to the documentations ([https://doc.qt.io/qt-5/model-view-programming.html](https://doc.qt.io/qt-5/model-view-programming.html))
    for a more in-depth understanding.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt框架中，当视图和控制器结合时，这创建了模型-视图架构。要使用Qt创建模型，框架使用`QtCore`模块的类，如基类`QAbstractItemModel`及其继承此类的类，如`QAbstractListModel`和`QAbstractTableModel`。表示视图的类使用`QtWidgets`模块中的视图，如`QListView`、`QTableView`和`QTreeView`，并继承基类`QAbstractItemView`。在这里，我们将仅描述其中的一些，包括使用应用程序实现模型-视图架构的基本知识。有关更深入的了解，请参阅文档（[https://doc.qt.io/qt-5/model-view-programming.html](https://doc.qt.io/qt-5/model-view-programming.html)）。
- en: QAbstractItemModel
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QAbstractItemModel
- en: 'This class realizes the abstract interface for model classes. The full list
    of functions to manipulate the model part of the model-view architecture is available
    in the documentation. The construction syntax of this class is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现了模型类的抽象接口。模型-视图架构中用于操作模型部分的函数的完整列表可在文档中找到。此类的构造语法如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The functions that need to be overridden are as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 需要重写的函数如下：
- en: '`columnCount(QtCore.QModelIndex)`: This returns the number of columns under
    the parent specified in the parameter.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`columnCount(QtCore.QModelIndex)`: 这返回参数中指定的父项下的列数。'
- en: '`data(QtCore.QModelIndex, int)`: This returns the data stored under the role
    (the second parameter) for the item specified as the first parameter.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`data(QtCore.QModelIndex, int)`: 这返回第一个参数指定的项在角色（第二个参数）下存储的数据。'
- en: '`index(int, int, QtCore.QModelIndex)`: This returns the item''s index in the
    model specified by the row (the first parameter), column (the second parameter),
    and parent (the third parameter).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`index(int, int, QtCore.QModelIndex)`: 这返回由行（第一个参数）、列（第二个参数）和父项（第三个参数）指定的模型中项的索引。'
- en: '`rowCount(QtCore.QModelIndex)`: This returns the number of rows under the parent
    specified in the parameter.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`rowCount(QtCore.QModelIndex)`: 这返回参数中指定的父项下的行数。'
- en: 'The most useful functions are as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的函数如下：
- en: '`insertColumn(int, QtCore.QModelIndex)`: This inserts the column before the
    column specified as the first parameter in the child items of the parent (the
    second parameter).'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertColumn(int, QtCore.QModelIndex)`: 这在父项（第二个参数）的子项中指定为第一个参数的列之前插入列。'
- en: '`insertColumns(int, int, QtCore.QModelIndex)`: This inserts the number of new
    columns (the second parameter) before the column (the first parameter) related
    to the item represented by the parent model index (the third parameter).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertColumns(int, int, QtCore.QModelIndex)`: 这将在由父模型索引（第三个参数）表示的项目相关列（第一个参数）之前插入指定数量的新列（第二个参数）。'
- en: '`insertRow(int, QtCore.QModelIndex)`: This inserts the row before the row specified as the
    first parameter in the child items of the parent (the second parameter).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertRow(int, QtCore.QModelIndex)`: 这在父项（第二个参数）的子项中指定为第一个参数的行之前插入行。'
- en: '`insertRows(int, int, QtCore.QModelIndex)`: This inserts the number of new
    rows (the second parameter) before the row (the first parameter) related to the
    item represented by the parent model index (the third parameter).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertRows(int, int, QtCore.QModelIndex)`: 这将在由父模型索引（第三个参数）表示的项目相关行（第一个参数）之前插入指定数量的新行（第二个参数）。'
- en: '`moveColumn(QtCore.QModelIndex, int, QtCore.QModelIndex, int)`: This moves
    the source column (the second parameter) from the source parent (the first parameter)
    to the destination child (the fourth parameter) under the destination parent (the
    third parameter).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveColumn(QtCore.QModelIndex, int, QtCore.QModelIndex, int)`: 这将源列（第二个参数）从源父项（第一个参数）移动到目标父项（第三个参数）下的目标子项（第四个参数）。'
- en: '`moveColumns(QtCore.QModelIndex, int, int, QtCore.QModelIndex, int)`: This
    moves the number of columns specified as the third parameter, starting with the
    source column (the second parameter), from the source parent (the first parameter)
    to the destination child (the fifth parameter) under the destination parent (the
    fourth parameter).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveColumns(QtCore.QModelIndex, int, int, QtCore.QModelIndex, int)`: 这将根据第三个参数指定的列数，从源列（第二个参数）开始，从源父项（第一个参数）移动到目标父项（第四个参数）下的目标子项（第五个参数）。'
- en: '`moveRow(QtCore.QModelIndex, int, QtCore.QModelIndex, int)`: This moves the
    source row (the second parameter) from the source parent (the first parameter)
    to the destination child (the fourth parameter) under the destination parent (the
    third parameter).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveRow(QtCore.QModelIndex, int, QtCore.QModelIndex, int)`: 这将源行（第二个参数）从源父项（第一个参数）移动到目标父项（第三个参数）下的目标子项（第四个参数）。'
- en: '`moveRows(QtCore.QModelIndex, int, int, QtCore.QModelIndex, int)`: This moves
    the number of rows specified as the third parameter, starting with the source
    row (the second parameter), from the source parent (the first parameter) to the
    destination child (the fifth parameter) under the destination parent (the fourth
    parameter).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveRows(QtCore.QModelIndex, int, int, QtCore.QModelIndex, int)`: 这将根据第三个参数指定的行数，从源行（第二个参数）开始，从源父项（第一个参数）移动到目标父项（第四个参数）下的目标子项（第五个参数）。'
- en: '`removeColumn(int, QtCore.QModelIndex)`: This removes the column (the first
    parameter) of the parent (the second parameter).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeColumn(int, QtCore.QModelIndex)`: 这将移除父项（第二个参数）的列（第一个参数）。'
- en: '`removeColumns(int, int, QtCore.QModelIndex)`: This removes the number of columns
    specified as the second parameter, starting with the column (the first parameter)
    of the parent (the third parameter).'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeColumns(int, int, QtCore.QModelIndex)`: 这将根据第二个参数指定的列数，从父项（第三个参数）的列（第一个参数）开始移除。'
- en: '`removeRow(int, QtCore.QModelIndex)`: This removes the row (the first parameter)
    of the parent (the second parameter).'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeRow(int, QtCore.QModelIndex)`: 这将移除父项（第二个参数）的行（第一个参数）。'
- en: '`removeRows(int, int, QtCore.QModelIndex)`: This removes the number of rows
    specified as the second parameter, starting with the row (the first parameter)
    of the parent (the third parameter).'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeRows(int, int, QtCore.QModelIndex)`: 这将根据第二个参数指定的行数，从父项（第三个参数）的行（第一个参数）开始移除。'
- en: '`sort(int, QtCore.Qt.SortOrder)`: This sorts the model by columns (the first
    parameter) according to the order specified as the second parameter.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort(int, QtCore.Qt.SortOrder)`: 这根据第二个参数指定的顺序对模型按列（第一个参数）进行排序。'
- en: '`setData(QtCore.QModelIndex, object, int)`: This sets the data for the item
    with a specified role (the third parameter) and index (the first parameter) to
    a specified value (the second parameter).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`setData(QtCore.QModelIndex, object, int)`: 这将使用指定的角色（第三个参数）和索引（第一个参数）将项目的数据设置为一个指定的值（第二个参数）。'
- en: '`setHeaderData(int, QtCore.Qt.Orientation, object, int)`: This sets the header
    data with a specified role (the fourth parameter), section (the first parameter),
    and orientation (the second parameter) to a specified value (the third parameter).'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`setHeaderData(int, QtCore.Qt.Orientation, object, int)`: 这将使用指定的角色（第四个参数）、部分（第一个参数）和方向（第二个参数）将头部数据设置为一个指定的值（第三个参数）。'
- en: QAbstractTableModel
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QAbstractTableModel
- en: 'This class provides a standard interface that represents the data as a two-dimensional
    array in the model. The `QAbstractTableModel` class inherits from the `QAbstractItemModel`
    class. The construction syntax of this class is as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了一个标准接口，将数据作为二维数组在模型中表示。`QAbstractTableModel`类继承自`QAbstractItemModel`类。此类的构造语法如下：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: QAbstractItemView
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QAbstractItemView
- en: 'This is a base abstract class that provides the basic functionality for view
    classes in the Qt framework. Usually, this class is reimplemented with the `QListView`,
    `QTreeView`, and `QTableView` classes in the GUI application construction. The
    inheritance scheme for this class is as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个提供Qt框架中视图类基本功能的基类。通常，这个类在GUI应用程序构建中会通过`QListView`、`QTreeView`和`QTableView`类进行重实现。这个类的继承方案如下：
- en: '![](img/daf5fded-0f44-4173-aea4-d4d6c25c4822.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/daf5fded-0f44-4173-aea4-d4d6c25c4822.png)'
- en: 'Functions that are commonly used with the GUI application include the following
    (the full list is available in the documentation):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 与GUI应用程序一起常用的函数包括以下（完整列表可在文档中找到）：
- en: '`setDragEnabled(bool)`: If the parameter is `True`, the view will support the
    dragging of items.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDragEnabled(bool)`: 如果参数为`True`，视图将支持项目的拖动。'
- en: '`setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode)`: This sets the
    drag and drop mode; by default, dragging or dropping is not supported in the view.
    The available modes are as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDragDropMode(QtWidgets.QAbstractItemView.DragDropMode)`: 这将设置拖放模式；默认情况下，视图不支持拖放。可用的模式如下：'
- en: '`QtWidgets.QAbstractItemView.NoDragDrop`—`0`: This view doesn''t support dragging
    and dropping.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.NoDragDrop`—`0`：此视图不支持拖放。'
- en: '`QtWidgets.QAbstractItemView.DragOnly`—`1`: This view supports dragging.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.DragOnly`—`1`：此视图支持拖动。'
- en: '`QtWidgets.QAbstractItemView.DropOnly`—`2`: This view supports dropping.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.DropOnly`—`2`：此视图支持放下。'
- en: '`QtWidgets.QAbstractItemView.DragDrop`—`3`: This view supports dragging and
    dropping.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.DragDrop`—`3`：此视图支持拖放。'
- en: '`QtWidgets.QAbstractItemView.InternalMove`—`4`: This view will accept moving
    operations, excluding copying.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.InternalMove`—`4`：此视图将接受移动操作，不包括复制。'
- en: '`setDropIndicatorShown(bool)`: If the parameter is `True`, this sets the drop
    indicator, as demonstrated when used with the dragging and dropping of items.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`setDropIndicatorShown(bool)`: 如果参数为`True`，这将设置放下指示器，如在使用拖放项目时所示。'
- en: '`setModel(QtCore.QAbstractItemModel)`: This sets the model that will be represented
    with the view.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`setModel(QtCore.QAbstractItemModel)`: 这将设置视图将表示的模型。'
- en: '`setRootIndex(QtCore.QModelIndex)`: This sets the root item to the item according
    to the index specified in the parameter.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`setRootIndex(QtCore.QModelIndex)`: 这将根据参数中指定的索引设置根项。'
- en: '`setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior)`: This
    sets the selection behavior that will be used by the view. The available behaviors
    are as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSelectionBehavior(QtWidgets.QAbstractItemView.SelectionBehavior)`: 这将设置视图将使用的选择行为。可用的行为如下：'
- en: '`QtWidgets.QAbstractItemView.SelectItems`—`0`: Single items.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.SelectItems`—`0`：单个项目。'
- en: '`QtWidgets.QAbstractItemView.SelectRows`—`1`: Only rows.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.SelectRows`—`1`：仅行。'
- en: '`QtWidgets.QAbstractItemView.SelectColumns`—`2`: Only columns.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.SelectColumns`—`2`：仅列。'
- en: '`setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode)`: This sets how
    the view will respond to selections. The selection modes that are available are
    as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSelectionMode(QtWidgets.QAbstractItemView.SelectionMode)`: 这将设置视图对选择如何响应。可用的选择模式如下：'
- en: '`QtWidgets.QAbstractItemView.NoSelection`—`0`: The items are not selected.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.NoSelection`—`0`：项目未被选中。'
- en: '`QtWidgets.QAbstractItemView.SingleSelection`—`1`: An item that has already
    been selected will be deselected.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.SingleSelection`—`1`: 已选中的项目将被取消选中。'
- en: '`QtWidgets.QAbstractItemView.MultiSelection`—`2`: The selected item is toggled,
    and the other items are left alone. Multiple items can be toggled by dragging
    the mouse over them.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.MultiSelection`—`2`: 选中的项目将被切换，其他项目保持不变。可以通过拖动鼠标在它们上方来切换多个项目。'
- en: '`QtWidgets.QAbstractItemView.ExtendedSelection`—`3`: An item that has already
    been selected will be selected and deselected using the *Shift* key, or using
    the *Ctrl* key, the clicked item gets toggled and all other items are left untouched.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.ExtendedSelection`—`3`: 已选中的项目将被选中并取消选中，使用 *Shift*
    键或 *Ctrl* 键，点击的项目将被切换，而其他项目保持不变。'
- en: '`QtWidgets.QAbstractItemView.ContiguousSelection`—`4`: An item that has already
    been selected will be deselected, and not deselected using the *Shift* key.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.ContiguousSelection`—`4`: 已选中的项目将被取消选中，且使用 *Shift*
    键不会取消选中。'
- en: '`setSelectionModel(QtCore.QItemSelectionModel)`: Sets the selection model specified
    in the parameter.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSelectionModel(QtCore.QItemSelectionModel)`: 设置参数中指定的选择模型。'
- en: '`setState(QtWidgets.QAbstractItemView.State)`: Sets the item views state specified
    in the parameter. The states are as follows:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`setState(QtWidgets.QAbstractItemView.State)`: 设置参数中指定的项目视图状态。状态如下：'
- en: '`QtWidgets.QAbstractItemView.NoState`—`0`: Default.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.NoState`—`0`: 默认状态。'
- en: '`QtWidgets.QAbstractItemView.DraggingState`—`1`: The items are dragged by the
    user.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.DraggingState`—`1`: 用户正在拖动项目。'
- en: '`QtWidgets.QAbstractItemView.DragSelectingState`—`2`: The items are selected
    by the user.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.DragSelectingState`—`2`: 用户正在选择项目。'
- en: '`QtWidgets.QAbstractItemView.EditingState`—`3`: The items are edited by the
    user.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.EditingState`—`3`: 用户正在编辑项目。'
- en: '`QtWidgets.QAbstractItemView.ExpandingState`—`4`: The items are opened in a
    branch by the user.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.ExpandingState`—`4`: 用户通过分支打开项目。'
- en: '`QtWidgets.QAbstractItemView.CollapsingState`—`5`: The branch of items is closed
    by the user.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.CollapsingState`—`5`: 用户关闭了项目分支。'
- en: '`QtWidgets.QAbstractItemView.AnimatingState`—`6`: This is the view performing
    the animation.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QAbstractItemView.AnimatingState`—`6`: 这是执行动画的视图。'
- en: '`edit(QtCore.QModelIndex)`: This begins editing the item according to the index
    specified in the parameter.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`edit(QtCore.QModelIndex)`: 根据参数中指定的索引开始编辑项目。'
- en: '`model()`: This returns the model of the `QtCore.QAbstractItemModel` type that''s
    represented in the view.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`model()`: 返回在视图中表示的 `QtCore.QAbstractItemModel` 类型的模型。'
- en: '`selectAll()`: This selects all the items represented in the view.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectAll()`: 选择视图中表示的所有项目。'
- en: '`startDrag(QtCore.Qt.DropActions)`: This starts a drag process by calling drag
    with `exec()`, which is related to the drop actions specified in the parameter.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`startDrag(QtCore.Qt.DropActions)`: 通过调用带有 `exec()` 的拖动操作来启动拖动过程，这与参数中指定的放置动作相关。'
- en: '`update(QtCore.QModelIndex)`: This updates the area occupied by the index specified
    in the parameter.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`update(QtCore.QModelIndex)`: 更新参数中指定的索引所占据的区域。'
- en: QComboBox
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QComboBox
- en: 'The combobox widget, which is constructed with the `QComboBox` class, provides
    the combined button and pop-up list. This widget contains the field where current
    text is displayed (or can be edited), a pop-up list containing some values, and
    the option to make a choice and select a number of control elements. This can
    be used in the GUIs, where there is a need to represent numerous values with options
    in order to choose something from the popup, and that may imply another functionality.
    Developers create the comboboxes where places inside the graphical window are
    limited and many values need to be displayed. The `QComboBox` class has a declaration
    syntax in the application that looks like this:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `QComboBox` 类构建的组合框小部件提供了组合按钮和弹出列表。此小部件包含显示当前文本的字段（或可以编辑），包含一些值的弹出列表，以及进行选择和选择多个控件选项的选项。这可以在需要用选项表示多个值以从弹出窗口中选择某物，并且可能意味着其他功能的
    GUI 中使用。开发者在图形窗口内部空间有限且需要显示许多值的地方创建组合框。`QComboBox` 类在应用程序中的声明语法如下：
- en: '[PRE2]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: QComboBox functions
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QComboBox 函数
- en: '`QComboBox` inherits the `QWidget` class and improves functionality with the
    following functions.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`QComboBox` 继承了 `QWidget` 类，并通过以下函数增强了功能。'
- en: add
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加
- en: 'These are functions related to the addition of the elements or actions to the
    combobox:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与向组合框添加元素或动作相关的函数：
- en: '`combo_box.addItem("item", object)`: This adds the item (the first parameter)
    of the Unicode string type and optional user data with a second parameter (the
    default is `None`) to the end of this combobox pop-up list.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.addItem("item", object)`: 这将在组合框弹出列表的末尾添加项目（第一个参数）为Unicode字符串类型和可选的用户数据（第二个参数，默认为`None`）。'
- en: '`combo_box.addItem(QtGui.QIcon, "item", object)`: This adds the item (the second
    parameter) of the Unicode string type and optional user data with a third parameter
    (the default is `None`) to the end of this combobox pop-up list. The item''s text
    will be displayed with the icon (the first parameter).'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.addItem(QtGui.QIcon, "item", object)`: 这将在组合框弹出列表的末尾添加项目（第二个参数）为Unicode字符串类型和可选的用户数据（第三个参数，默认为`None`）。项目的文本将显示为图标（第一个参数）。'
- en: '`combo_box.addItems(["item"])`: This adds several items with the text of the
    Unicode string type to the end of this combobox pop-up list. Each item of the
    list, specified in the parameter, will be appended as the new line of the pop-up
    list.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.addItems(["item"])`: 这将添加多个具有Unicode字符串类型文本的项目到组合框弹出列表的末尾。参数中指定的列表的每个项目都将作为弹出列表的新行附加。'
- en: set
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the combobox, including the setting of text, alignment, or functionality:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与组合框相关的参数/属性设置相关的函数，包括文本、对齐或功能设置：
- en: '`combo_box.setCompleter(QtWidgets.QCompleter)`: This sets the completer that
    will be used with the combobox.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setCompleter(QtWidgets.QCompleter)`: 这将设置与组合框一起使用的补全器。'
- en: '`combo_box.setCurrentIndex(int)`: This sets the current index specified in
    the parameter of the item in the combobox. The item with this index will be marked
    as current and visible.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setCurrentIndex(int)`: 这将设置组合框中参数指定的项目索引。具有此索引的项目将被标记为当前项并可见。'
- en: '`combo_box.setCurrentText("Item")`: This sets the current text specified in
    the parameter of the item in the combobox. The item with this text will be marked
    as current and visible.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setCurrentText("Item")`: 这将设置组合框中参数指定的当前文本。具有此文本的项目将被标记为当前项并可见。'
- en: '`combo_box.setDuplicatesEnabled(bool)`: If the parameter is `True`, sets are
    allowed to enter duplicate items into the combobox.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setDuplicatesEnabled(bool)`: 如果参数为`True`，则允许将重复的项目输入到组合框中。'
- en: '`combo_box.setEditable(bool)`: If the parameter is `True`, this sets the combobox
    as being available to edit with the line edit field.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setEditable(bool)`: 如果参数为`True`，则设置组合框可以使用行编辑字段进行编辑。'
- en: '`combo_box.setEditText("Text")`: This sets the text in the line edit field
    of the combobox.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setEditText("Text")`: 这将设置组合框行编辑字段中的文本。'
- en: '`combo_box.setFrame(bool)`: If the parameter is `True`, this sets the frame
    around the combobox.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setFrame(bool)`: 如果参数为`True`，则设置组合框周围的框架。'
- en: '`combo_box.setIconSize(QtCore.QSize)`: This sets the size of the icons that
    will be displayed in the combobox.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setIconSize(QtCore.QSize)`: 这将设置组合框中显示的图标的大小。'
- en: '`combo_box.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy)`: This sets the
    insert policy for this combobox. The policies that are available are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setInsertPolicy(QtWidgets.QComboBox.InsertPolicy)`: 这将设置此组合框的插入策略。可用的策略如下：'
- en: '`QtWidgets.QComboBox.NoInsert`—`0`: The items will not be inserted.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.NoInsert`—`0`: 项目将不会被插入。'
- en: '`QtWidgets.QComboBox.InsertAtTop`—`1`: The current item will be inserted as
    the first item.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.InsertAtTop`—`1`: 当前项目将被插入为第一个项目。'
- en: '`QtWidgets.QComboBox.InsertAtCurrent`—`2`: The current item in the combobox
    will be replaced by the new item.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.InsertAtCurrent`—`2`: 组合框中的当前项目将被新项目替换。'
- en: '`QtWidgets.QComboBox.InsertAtBottom`—`3`: The current item will be inserted
    after the last item.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.InsertAtBottom`—`3`: 当前项目将被插入到最后一个项目之后。'
- en: '`QtWidgets.QComboBox.InsertAfterCurrent`—`4`: This item will be inserted after
    the current item.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.InsertAfterCurrent`—`4`: 此项目将被插入到当前项目之后。'
- en: '`QtWidgets.QComboBox.InsertBeforeCurrent`—`5`: This item will be inserted before
    the current item.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.InsertBeforeCurrent`—`5`: 此项目将被插入到当前项目之前。'
- en: '`QtWidgets.QComboBox.InsertAlphabetically`—`6`: This item will be inserted
    in alphabetical order.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.InsertAlphabetically`—`6`: 此项目将按字母顺序插入。'
- en: '`combo_box.setItemData(int, object, int)`: This sets the data role (the third
    parameter) for the item with an index (the first parameter) to the value specified
    as the second parameter.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setItemData(int, object, int)`: 这将为具有索引（第一个参数）的项目设置数据角色（第三个参数），其值为第二个参数指定的值。'
- en: '`combo_box.setItemDelegate(QtWidgets.QAbstractItemDelegate)`: This sets the
    pop-up list view item delegate.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setItemDelegate(QtWidgets.QAbstractItemDelegate)`: 这将为弹出列表视图项目设置代理。'
- en: '`combo_box.setItemIcon(int, QtGui.QIcon)`: This sets the icon (the second parameter)
    for the item specified by the index (the first parameter).'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setItemIcon(int, QtGui.QIcon)`: 这将为由索引（第一个参数）指定的项目设置图标（第二个参数）。'
- en: '`combo_box.setItemText(int, "Item")`: This sets the text (the second parameter)
    for the item specified by the index (the first parameter).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setItemText(int, "Item")`: 这将为由索引（第一个参数）指定的项目设置文本（第二个参数）。'
- en: '`combo_box.setLineEdit(QtWidgets.QLineEdit)`: This sets the line edit field
    that will be used with this combobox.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setLineEdit(QtWidgets.QLineEdit)`: 这将为这个组合框设置将使用的行编辑字段。'
- en: '`combo_box.setMaxCount(int)`: This sets the maximum number of items that will
    be used in this combobox.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setMaxCount(int)`: 这将为这个组合框设置将使用的最大项目数。'
- en: '`combo_box.setMaxVisibleItems(int)`: This sets the maximum number of items
    that will be visible in the combobox screen without scrolling.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setMaxVisibleItems(int)`: 这将设置组合框屏幕中不滚动时将可见的最大项目数。'
- en: '`combo_box.setMinimumContentsLength(int)`: This sets the minimum number of
    characters for the item that will be represented with the combobox screen.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setMinimumContentsLength(int)`: 这将设置用组合框屏幕表示的项目所需的最小字符数。'
- en: '`combo_box.setModel(QtCore.QAbstractItemModel)`: This sets the model for this
    combobox.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setModel(QtCore.QAbstractItemModel)`: 这将为这个组合框设置模型。'
- en: '`combo_box.setModelColumn(int)`: This sets the visible column in the combobox
    model.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setModelColumn(int)`: 这将为组合框模型设置可见列。'
- en: '`combo_box.setRootModelIndex(QtCore.QModelIndex)`: This sets the root model
    item as an index in the parameter for the combobox items.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setRootModelIndex(QtCore.QModelIndex)`: 这将为组合框项的参数设置根模型项作为索引。'
- en: '`combo_box.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy)`: This
    sets the size adjust policy for this combobox. The policies that are available are
    as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setSizeAdjustPolicy(QtWidgets.QComboBox.SizeAdjustPolicy)`: 这将为这个组合框设置大小调整策略。可用的策略如下：'
- en: '`QtWidgets.QComboBox.AdjustToContents`—`0`: Will always adjust to the content.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.AdjustToContents`—`0`: 总是调整到内容。'
- en: '`QtWidgets.QComboBox.AdjustToContentsOnFirstShow`—`1`: Will adjust to the content
    the first time it is shown.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.AdjustToContentsOnFirstShow`—`1`: 第一次显示时将调整到内容。'
- en: '`QtWidgets.QComboBox.AdjustToMinimumContentsLength`—`2`: Will adjust to the
    minimum content length.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.AdjustToMinimumContentsLength`—`2`: 将调整到最小内容长度。'
- en: '`QtWidgets.QComboBox.AdjustToMinimumContentsLengthWithIcon`—`3`: Will adjust
    to the minimum content length, plus space for the icon.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QComboBox.AdjustToMinimumContentsLengthWithIcon`—`3`: 将调整到最小内容长度，加上图标的空白。'
- en: '`combo_box.setValidator(QtGui.QValidator)`: This sets the validator that will
    be used with this combobox.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setValidator(QtGui.QValidator)`: 这将为这个组合框设置将使用的验证器。'
- en: '`combo_box.setView(QtWidgets.QAbstractItemView)`: This sets the view that will
    be used in the combobox pop-up list.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.setView(QtWidgets.QAbstractItemView)`: 这将为组合框弹出列表设置视图。'
- en: edit
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: edit
- en: 'These are functions that make some changes to the current content of the combobox,
    including clear, undo, and redo:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是进行一些更改当前组合框内容的函数，包括清除、撤销和重做：
- en: '`combo_box.clear()`: This clears the pop-up list items from the combobox.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.clear()`: 这将从组合框中清除弹出列表项。'
- en: '`combo_box.clearEditText()`: This clears the text of the edited field of the
    combobox. The line edit text of the combobox will be cleared.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.clearEditText()`: 这将清除组合框编辑字段的文本。组合框的行编辑文本将被清除。'
- en: '`combo_box.hidePopup()`: This hides the combobox pop-up list; the list will
    be reset.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.hidePopup()`: 这将隐藏组合框弹出列表；列表将被重置。'
- en: '`combo_box.showPopup()`: This shows the combobox pop-up list.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.showPopup()`: 这将显示组合框弹出列表。'
- en: is/has
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is/has
- en: 'These are functions that return a Boolean value (`bool`) related to the combobox
    states, for example, to check for availability:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与组合框状态相关的布尔值（`bool`）的函数，例如，检查可用性：
- en: '`combo_box.hasFrame()`: This returns `True` if the combobox has a surrounding
    frame.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.hasFrame()`: 如果组合框有一个周围的框架，则返回`True`。'
- en: '`combo_box.isEditable()`: This returns `True` if the line field of this combobox
    can be edited.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.isEditable()`: 如果这个组合框的行字段可以编辑，则返回`True`。'
- en: functional
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'The following are functions related to the current values of the combobox being
    returned, changes in functionality, and so on:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是与当前组合框返回的值、功能变化等相关联的函数：
- en: '`combo_box.completer()`: This returns the completer for autocompletion of the
    text input for this combobox.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.completer()`: 这返回用于此组合框文本输入自动完成的补全器。'
- en: '`combo_box.count()`: This counts the items of the pop-up list and returns the
    integer value.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.count()`: 这计算弹出列表的项目数量并返回整数值。'
- en: '`combo_box.currentData(int)`: This returns the object that describes the current
    data of the pop-up list item, with a `QtCore.Qt.UserRole` parameter type.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.currentData(int)`: 这返回描述弹出列表当前数据的对象，具有 `QtCore.Qt.UserRole` 参数类型。'
- en: '`combo_box.currentIndex()`:This returns the current index of the item (integer
    value) from the pop-up list that may have been chosen by the user.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.currentIndex()`: 这返回用户可能选择的弹出列表中当前项的索引（整数值）。'
- en: '`combo_box.currentText()`: This returns the current text of the item (`string`)
    from the pop-up list that may have been chosen by the user.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.currentText()`: 这返回用户可能选择的弹出列表中当前项的文本（字符串）。'
- en: '`combo_box.duplicatesEnabled()`: This returns `True` if it is possible to enter
    duplicate items in the combobox.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.duplicatesEnabled()`: 如果可以在组合框中输入重复项，则返回 `True`。'
- en: '`combo_box.findData(object, int, QtCore.Qt.MatchFlags)`: This returns the index
    of the item that contains the specified data (the first parameter), role (the
    second parameter), and flags (the third parameter). Otherwise, it returns a value
    of `-1`.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.findData(object, int, QtCore.Qt.MatchFlags)`: 这返回包含指定数据（第一个参数）、角色（第二个参数）和标志（第三个参数）的项目索引。否则，它返回
    `-1` 的值。'
- en: '`combo_box.findText("Text to find", QtCore.Qt.MatchFlags)`: This returns the
    index of the item that contains the text (the first parameter) with flags (the
    second parameter), such as `QtCore.Qt.MatchCaseSensitive`. Otherwise, it returns
    a value of `-1`.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.findText("Text to find", QtCore.Qt.MatchFlags)`: 这返回包含文本（第一个参数）和标志（第二个参数）的项目索引，例如
    `QtCore.Qt.MatchCaseSensitive`。否则，它返回 `-1` 的值。'
- en: '`combo_box.iconSize()`: This returns the icon size of the `QtCore.QSize` type.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.iconSize()`: 这返回 `QtCore.QSize` 类型的图标大小。'
- en: '`combo_box.initStyleOption(QtWidgets.QStyleOptionFrame)`: This initializes
    style options with the values from the parameter.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.initStyleOption(QtWidgets.QStyleOptionFrame)`: 这使用参数中的值初始化样式选项。'
- en: '`combo_box.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: This is used
    to query a set of properties of the combobox to enable support for complex input
    method operations, such as support for surrounding text and reconversions.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: 这用于查询组合框的属性集，以启用对复杂输入方法操作的支持，例如支持周围文本和重转换。'
- en: '`combo_box.insertItem(int, "Item text", object)`: This inserts the item in
    the position (the first parameter) of the pop-up list with text (the second parameter)
    and user data (the third parameter).'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.insertItem(int, "Item text", object)`: 这在弹出列表的位置（第一个参数）插入带有文本（第二个参数）和用户数据（第三个参数）的项目。'
- en: '`combo_box.insertItem(int, QtGui.QIcon, "Item text", object)`: This inserts
    the item in the position (the first parameter) of the pop-up list with text (the
    third parameter) that will be displayed with the icon (the second parameter) and
    user data (the fourth parameter).'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.insertItem(int, QtGui.QIcon, "Item text", object)`: 这在弹出列表的位置（第一个参数）插入带有文本（第三个参数）的项目，该文本将使用图标（第二个参数）和用户数据（第四个参数）显示。'
- en: '`combo_box.insertItems(int, ["Item text"])`: This inserts several items with
    Unicode string type text in the position (the first parameter) of the combobox
    pop-up list. Each item from the iterable (the second parameter) will be inserted
    as the new line of the pop-up list and will begin from the given position index.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.insertItems(int, ["Item text"])`: 这将在组合框弹出列表的位置（第一个参数）插入多个具有 Unicode
    字符串类型文本的项目。可迭代对象（第二个参数）中的每个项目都将作为弹出列表的新行插入，并从给定的位置索引开始。'
- en: '`combo_box.insertPolicy()`: This returns the policy of the `QtWidgets.QComboBox.InsertPolicy`
    type that was used when inserting the policy into the combobox.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.insertPolicy()`: 这返回在将策略插入组合框时使用的 `QtWidgets.QComboBox.InsertPolicy`
    类型的策略。'
- en: '`combo_box.insertSeparator(int)`: This inserts the separator for these combobox
    items in the position specified in the parameter.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.insertSeparator(int)`: 这在参数指定的位置插入这些组合框项目的分隔符。'
- en: '`combo_box.itemData(int, int)`: This returns the item''s data according to
    the index (the first parameter) for the given role (the second parameter) in the
    combobox.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.itemData(int, int)`: 这根据索引（第一个参数）和给定的角色（第二个参数）返回组合框中项的数据。'
- en: '`combo_box.itemDelegate()`: This returns the delegate of the item of the `QtWidgets.QAbstractItemDelegate`
    type that''s used by the pop-up list view.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.itemDelegate()`: 这返回用于弹出列表视图的 `QtWidgets.QAbstractItemDelegate`
    类型的项目代理。'
- en: '`combo_box.itemIcon(int)`: This returns the icon of the `QtGui.QIcon` type
    for the item with the index specified in the parameter, inside the combobox.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.itemIcon(int)`: 这返回参数中指定的索引在 combobox 内的项目 `QtGui.QIcon` 类型的图标。'
- en: '`combo_box.itemText(int)`: This returns the text of the item with the index
    in the combobox specified in the parameter.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.itemText(int)`: 这返回参数中指定的索引在 combobox 中的项目的文本。'
- en: '`combo_box.lineEdit()`: This returns the line edit field used to edit items
    in the combobox, if the combobox is editable.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.lineEdit()`: 如果 combobox 可编辑，则此返回用于编辑 combobox 中项目的行编辑字段。'
- en: '`combo_box.maxCount()`: This returns the maximum number of items that can be
    used with the combobox.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.maxCount()`: 这返回可以与 combobox 一起使用的最大项目数。'
- en: '`combo_box.maxVisibleItems()`: This returns the maximum number of items that
    can be displayed as a combobox pop-up list. If there are more elements than this,
    they will be visible if you scroll through the combobox screen.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.maxVisibleItems()`: 这返回可以显示为 combobox 弹出列表的最大项目数。如果有更多元素，则可以通过滚动
    combobox 屏幕使它们可见。'
- en: '`combo_box.minimumContentsLength()`: This returns the minimum number of characters
    that will be represented with the combobox screen (default `0`).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.minimumContentsLength()`: 这返回将用 combobox 屏幕表示的最小字符数（默认 `0`）。'
- en: '`combo_box.model()`: This returns the model for the combobox.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.model()`: 这返回 combobox 的模型。'
- en: '`combo_box.modelColumn()`: This returns the visible column in the combobox
    model.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.modelColumn()`: 这返回 combobox 模型中的可见列。'
- en: '`combo_box.removeItem(int)`: This removes the item from the combobox with the
    index specified in the parameter.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.removeItem(int)`: 这从 combobox 中移除由参数指定的索引的项目。'
- en: '`combo_box.rootModelIndex()`: This returns the root model item index for the
    combobox item.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.rootModelIndex()`: 这返回 combobox 项目的根模型项索引。'
- en: '`combo_box.sizeAdjustPolicy()`: This returns the adjusted size of the `QtWidgets.QComboBox.SizeAdjustPolicy`
    type that''s used with the combobox.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.sizeAdjustPolicy()`: 这返回与 combobox 一起使用的 `QtWidgets.QComboBox.SizeAdjustPolicy`
    类型的调整大小策略。'
- en: '`combo_box.validator()`: This returns the validator for the text input of the
    combobox.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.validator()`: 这返回 combobox 文本输入的验证器。'
- en: '`combo_box.view()`: This returns the pop-up list view that''s used for the
    combobox.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.view()`: 这返回用于 combobox 的弹出列表视图。'
- en: events
  id: totrans-170
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These are functions that are related to the events, such as event handlers:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`combo_box.changeEvent(QtCore.QEvent)`: This handles state changes within the
    combobox.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.changeEvent(QtCore.QEvent)`: 这处理 combobox 内的状态变化。'
- en: '`combo_box.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler is
    designed to receive combobox context menu events.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.contextMenuEvent(QtGui.QContextMenuEvent)`: 此事件处理程序旨在接收 combobox
    的上下文菜单事件。'
- en: '`combo_box.event(QtCore.QEvent)`: This receives events for the object and should
    return `True` if the event is recognized and processed.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.event(QtCore.QEvent)`: 这接收对象的事件，如果事件被识别并处理，则应返回 `True`。'
- en: '`combo_box.focusOutEvent(QtGui.QFocusEvent)`: This event handler is designed
    to receive the combobox keyboard focus events that are passed with event parameters
    when the focus is lost.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.focusOutEvent(QtGui.QFocusEvent)`: 此事件处理程序旨在接收在失去焦点时通过事件参数传递的 combobox
    键盘焦点事件。'
- en: '`combo_box.focusInEvent(QtGui.QFocusEvent)`: This event handler is designed
    to receive the comb box keyboard focus events that are passed with event parameters
    when the focus is received.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.focusInEvent(QtGui.QFocusEvent)`: 此事件处理程序旨在接收在获得焦点时通过事件参数传递的 comb
    box 键盘焦点事件。'
- en: '`combo_box.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler is
    designed to receive input method composition events that are passed with event
    parameters.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.inputMethodEvent(QtGui.QInputMethodEvent)`: 此事件处理程序旨在接收通过事件参数传递的输入法组合事件。'
- en: '`combo_box.keyPressEvent(QtGui.QKeyEvent)`: This event handler is designed to
    receive key press events for the combobox that is passed with event parameters.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.keyPressEvent(QtGui.QKeyEvent)`: 此事件处理程序旨在接收通过事件参数传递的 combobox 键按下事件。'
- en: '`combo_box.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler is designed to
    receive key release events for the combobox that is passed with event parameters.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.keyReleaseEvent(QtGui.QKeyEvent)`: 此事件处理程序旨在接收通过事件参数传递的 combobox
    键释放事件。'
- en: '`combo_box.mousePressEvent(QtGui.QMouseEvent)`: This event handler is designed
    to receive mouse press events for the combobox that is passed with event parameters.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.mousePressEvent(QtGui.QMouseEvent)`: 此事件处理器旨在接收带有事件参数的combobox的鼠标按下事件。'
- en: '`combo_box.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler is designed
    to receive mouse release events for the combobox that this passed with event parameters.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.mouseReleaseEvent(QtGui.QMouseEvent)`: 此事件处理器旨在接收带有事件参数的combobox的鼠标释放事件。'
- en: '`combo_box.paintEvent(QtGui.QPaintEvent)`: This event handler is designed to
    receive paint events for the combobox that is passed with event parameters.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.paintEvent(QtGui.QPaintEvent)`: 此事件处理器旨在接收带有事件参数的combobox的绘制事件。'
- en: '`combo_box.resizeEvent(QtGui.QResizeEvent)`: This event handler is designed
    to receive and resize events for the combobox that is passed with event parameters.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.resizeEvent(QtGui.QResizeEvent)`: 此事件处理器旨在接收和带有事件参数的combobox的调整大小事件。'
- en: '`combo_box.showEvent(QtGui.QShowEvent)`: This event handler is designed to
    receive show events for the combobox that is passed with event parameters.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.showEvent(QtGui.QShowEvent)`: 此事件处理器旨在接收带有事件参数的combobox的显示事件。'
- en: '`combo_box.wheelEvent(QtGui.QWheelEvent)`: This event handler is designed to
    receive mouse wheel events for the combobox that is passed with event parameters.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.wheelEvent(QtGui.QWheelEvent)`: 此事件处理器旨在接收带有事件参数的combobox的鼠标滚轮事件。'
- en: signals
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The available signals for the `QComboBox` class are as follows:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`QComboBox` 类可用的信号如下：'
- en: '`combo_box.activated(int)`: This signal is emitted when the item is chosen in
    the combobox with the index of the item passed in the parameter.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.activated(int)`: 当在combobox中选择项时，会发出此信号，其中包含传递的参数中的项的索引。'
- en: '`combo_box.activated(str)`: This signal is emitted when the item is chosen
    in the combobox with the text of the item passed in the parameter.'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.activated(str)`: 当在combobox中选择项时，会发出此信号，其中包含传递的参数中的项的文本。'
- en: '`combo_box.currentIndexChanged(int)`: This signal is emitted when the item
    is chosen in the combobox and the current index of the item is changed, with the
    index that was passed in the parameter.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.currentIndexChanged(int)`: 当在combobox中选择项并且项的当前索引发生变化时，会发出此信号，其中包含传递的参数中的索引。'
- en: '`combo_box.currentIndexChanged(str)`: This signal is emitted when the item
    is chosen in the combobox and the current index of the item is changed, with the
    item''s text that is passed in the parameter.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.currentIndexChanged(str)`: 当在combobox中选择项时，会发出此信号，并且项的当前索引发生变化，其中包含传递的参数中的项的文本。'
- en: '`combo_box.currentTextChanged(str)`: This signal is emitted when the item is chosen
    in the combobox and the current text of the item is changed, with the item''s
    text that is passed in the parameter.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.currentTextChanged(str)`: 当在combobox中选择项并且项的当前文本发生变化时，会发出此信号，其中包含传递的参数中的项的文本。'
- en: '`combo_box.editTextChanged(str)`: This signal is emitted when the text of the
    editable line field is changed, with text that is passed in the parameter.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.editTextChanged(str)`: 当可编辑行字段中的文本发生变化时，会发出此信号，其中包含传递的文本。'
- en: '`combo_box.highlighted(int)`: This signal is emitted when the item is highlighted
    by the user, with the item''s index that is passed in the parameter.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.highlighted(int)`: 当用户突出显示项时，会发出此信号，其中包含传递的参数中的项的索引。'
- en: '`combo_box.highlighted(str)`: This signal is emitted when the item is highlighted
    by the user, with the item''s text that is passed in the parameter.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_box.highlighted(str)`: 当用户突出显示项时，会发出此信号，其中包含传递的参数中的项的文本。'
- en: QFontComboBox
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFontComboBox
- en: 'PyQt5 and PySide2 provide the completed combobox so that you can choose the
    font family in regard to text in the text field (for example). We can use this
    combobox in the application by typing the following line:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: PyQt5 和 PySide2 提供了完整的 combobox，以便您可以根据文本字段中的文本（例如）选择字体家族。我们可以在应用程序中使用以下行来使用此
    combobox：
- en: '[PRE3]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`QFontComboBox` inherits `QComboBox` with the following functions.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`QFontComboBox` 继承了 `QComboBox` 并具有以下功能。'
- en: set
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the font combobox, such as setting text, alignment, and so on:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与字体 combobox 相关的参数/属性设置相关的函数，例如设置文本、对齐方式等：
- en: '`combo_boxf.setCurrentFont(QtGui.QFont)`: This sets the current font family
    for this combobox. The name of the font family, such as Helvetica or Times New
    Roman, which is passed to the parameter, can be used.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.setCurrentFont(QtGui.QFont)`: 这为此组合框设置当前字体家族。传递给参数的字体家族名称，如Helvetica或Times
    New Roman，可以用于。'
- en: '`combo_boxf.setFontFilters(QtWidgets.QFontComboBox.FontFilters)`: This sets
    the filters that will be used with this combobox. The available filters are as
    follows:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.setFontFilters(QtWidgets.QFontComboBox.FontFilters)`: 这设置将与此组合框一起使用的过滤器。可用的过滤器如下：'
- en: '`QtWidgets.QFontComboBox.AllFonts`: Shows all fonts.'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFontComboBox.AllFonts`: 显示所有字体。'
- en: '`QtWidgets.QFontComboBox.ScalableFonts`: Shows scalable fonts.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFontComboBox.ScalableFonts`: 显示可缩放字体。'
- en: '`QtWidgets.QFontComboBox.NonScalableFonts`: Non-scalable fonts in the combobox.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFontComboBox.NonScalableFonts`: 组合框中的非可缩放字体。'
- en: '`QtWidgets.QFontComboBox.MonospacedFonts`: Monospaced fonts in the combobox.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFontComboBox.MonospacedFonts`: 组合框中的等宽字体。'
- en: '`QtWidgets.QFontComboBox.ProportionalFonts`: Proportional fonts in the combobox.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFontComboBox.ProportionalFonts`: 组合框中的比例字体。'
- en: '`combo_boxf.setWritingSystem(QtGui.QFontDatabase.WritingSystem)`: This sets
    the writing system that serves as a filter for this combobox.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.setWritingSystem(QtGui.QFontDatabase.WritingSystem)`: 这设置作为此组合框过滤器的书写系统。'
- en: functional
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that return the current values of the font combobox, changes
    in functionality, and so on:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回字体组合框的当前值、功能变化等：
- en: '`combo_boxf.currentFont()`: This returns the current font family of the `QtGui.QFont`
    type that is displayed/selected with the font combobox.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.currentFont()`: 这返回由字体组合框显示/选择的`QtGui.QFont`类型的当前字体家族。'
- en: '`combo_boxf.fontFilters()`: This returns the filters of the `QtWidgets.QFontComboBox.FontFilters`
    type for the combobox.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.fontFilters()`: 这返回组合框的`QtWidgets.QFontComboBox.FontFilters`类型的过滤器。'
- en: '`combo_boxf.writingSystem()`: This returns the writing system for the combobox.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.writingSystem()`: 这返回组合框的书写系统。'
- en: events
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'This function is related to the events, such as event handler:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与事件相关，例如事件处理程序：
- en: '`combo_boxf.event(QtCore.QEvent)`: This receives events for the object and
    should return `True` if the event is recognized and processed.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.event(QtCore.QEvent)`: 这接收对象的事件，如果事件被识别并处理，则应返回`True`。'
- en: signals
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The following is the available signal for the `QFontComboBox` class:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为`QFontComboBox`类提供的可用信号：
- en: '`combo_boxf.currentFontChanged(QtGui.QFont)`: This signal is emitted when the
    current font family of the combobox changes, and occurs when a new font is passed
    in the parameter.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`combo_boxf.currentFontChanged(QtGui.QFont)`: 当组合框的当前字体家族更改时，会发出此信号，并且当在参数中传递新字体时发生。'
- en: QComboBox example
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QComboBox 示例
- en: 'Let''s implement the comboboxes we described previously in the application.
    We are creating the combobox so that we can choose between different fields that
    will be visualized—text field and table. Add the `QComboBox` class to the `u_style.py` files:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在应用程序中实现之前描述的组合框。我们正在创建组合框，以便可以在将可视化的不同字段之间进行选择——文本字段和表格。将`QComboBox`类添加到`u_style.py`文件中：
- en: 'Add the `UComBox` class using the following lines:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下行添加`UComBox`类：
- en: '[PRE4]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This combobox has styling properties that can be reimplemented. Now, we need
    to add this class to the `u_app.py` files so that we can use them in the application.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 此组合框具有可重写的样式属性。现在，我们需要将其添加到`u_app.py`文件中，以便我们可以在应用程序中使用它们。
- en: 'Add the following to the import section of the `u_app.py` files:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下内容添加到`u_app.py`文件的导入部分：
- en: '[PRE5]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, add the following lines to the `__init__()`  function of the `u_app.py`
    files:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将以下行添加到`u_app.py`文件的`__init__()`函数中：
- en: '[PRE6]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is the combobox instance with the list of items that will be displayed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将显示项目列表的组合框实例。
- en: 'To change the arrow of the combobox button to an icon, we can change the following
    line, as follows:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将组合框按钮的箭头更改为图标，我们可以更改以下行，如下所示：
- en: '[PRE7]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This will add the icon with a specified path and will change the default arrow
    icon.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加指定路径的图标，并将默认箭头图标更改。
- en: QListView
  id: totrans-234
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QListView
- en: 'This class provides a list or icon view that''s implemented on the model. `QListView`
    is used to display the items as a simple non-hierarchical list. With the help
    of the list view, the combobox pop-up list can be represented in another way.
    The inheritance scheme of `QListView` is as follows:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了一个在模型上实现的列表或图标视图。`QListView`用于将项目显示为简单的非层次列表。借助列表视图，组合框弹出列表可以以另一种方式表示。`QListView`的继承方案如下：
- en: '![](img/daec193a-99b6-4c24-84cf-73f62fe3da1a.png)'
  id: totrans-236
  prefs: []
  type: TYPE_IMG
  zh: '![](img/daec193a-99b6-4c24-84cf-73f62fe3da1a.png)'
- en: 'The following is the declaration statement of this class in the application:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在应用程序中此类的声明语句：
- en: '[PRE8]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Functions of the QListView class
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QListView 类的函数
- en: The `QListView` class improves functionality by means of the following functions.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`QListView` 类通过以下函数提高功能。'
- en: set
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting parameters/properties in relation to
    the list view:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与列表视图相关的参数/属性相关的函数。
- en: '`list_view.setBatchSize(int)`: This sets the number of items of each batch
    if the layout mode is set to `Batched`.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setBatchSize(int)`: 如果布局模式设置为 `Batched`，则此方法设置每个批次的项数。'
- en: '`list_view.setFlow(QtWidgets.QListView.Flow)`: This sets the flow of the content
    that''s used with the list view. The flows that are available are as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setFlow(QtWidgets.QListView.Flow)`: 这将设置与列表视图一起使用的内容的流动方式。可用的流动方式如下：'
- en: '`QtWidgets.QListView.LeftToRight`—`0`: The items will be laid out from left
    to right.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.LeftToRight`—`0`: 项目将从左到右进行布局。'
- en: '`QtWidgets.QListView.TopToBottom`—`1`: The items will be laid out from top
    to bottom.'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.TopToBottom`—`1`: 项目将从上到下进行布局。'
- en: '`list_view.setGridSize(QtCore.QSize)`: This sets the size of the layout grid.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setGridSize(QtCore.QSize)`: 这将设置布局网格的大小。'
- en: '`list_view.setLayoutMode(QtWidgets.QListView.LayoutMode)`: This sets the mode
    of the layout for this list view. The modes that are available are as follows:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setLayoutMode(QtWidgets.QListView.LayoutMode)`: 这将设置此列表视图的布局模式。可用的模式如下：'
- en: '`QtWidgets.QListView.SinglePass`—`0`: All items are laid out simultaneously.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.SinglePass`—`0`: 所有项目将同时布局。'
- en: '`QtWidgets.QListView.Batched`—`1`: Items are laid out in batches.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.Batched`—`1`: 项目将分批布局。'
- en: '`list_view.setModelColumn(int)`: This sets the column in the model specified
    in the parameter that will be visible.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setModelColumn(int)`: 这将设置参数指定的模型中的列，该列将可见。'
- en: '`list_view.setMovement(QtWidgets.QListView.Movement)`: This sets the movement
    for items in this list view. The movements that are available are as follows:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setMovement(QtWidgets.QListView.Movement)`: 这将设置此列表视图中项目的移动方式。可用的移动方式如下：'
- en: '`QtWidgets.QListView.Static`—`0`: Items cannot be moved.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.Static`—`0`: 项目不能被移动。'
- en: '`QtWidgets.QListView.Free`—`1`: Items can be moved.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.Free`—`1`: 项目可以被移动。'
- en: '`QtWidgets.QListView.Snap`—`2`: Items will be moved when they''re snapped to
    the specified grid.'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.Snap`—`2`: 当项目被吸附到指定的网格时，项目将被移动。'
- en: '`list_view.setPositionForIndex(QtCore.QPoint, QtCore.QModelIndex)`: This sets
    the content position of the item at the index (the second parameter) in the model
    in relation to the position specified as the first parameter.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setPositionForIndex(QtCore.QPoint, QtCore.QModelIndex)`: 这将设置模型中索引（第二个参数）指定的项目的位置，相对于第一个参数指定的位置。'
- en: '`list_view.setResizeMode(QtWidgets.QListView.ResizeMode)`: This sets the resize
    mode for the model of the list view. The resizing that''s available is as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setResizeMode(QtWidgets.QListView.ResizeMode)`: 这将设置列表视图模型的调整大小模式。可用的调整大小方式如下：'
- en: '`QtWidgets.QListView.Fixed`—`0`: The items will be laid out for the first time
    when the list view is shown.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.Fixed`—`0`: 项目将在列表视图显示时首次布局。'
- en: '`QtWidgets.QListView.Adjust`—`1`: The items will be laid out every time the
    list view is resized.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.Adjust`—`1`: 每次列表视图大小调整时，项目都将进行布局。'
- en: '`list_view.setRowHidden(int, bool)`: This sets the row (the first parameter)
    to hidden if the second parameter is set to `True`.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setRowHidden(int, bool)`: 如果第二个参数设置为 `True`，则将行（第一个参数）设置为隐藏。'
- en: '`list_view.setSelectionRectVisible(bool)`: If the parameter is `True`, this
    sets the selection rectangle as visible.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setSelectionRectVisible(bool)`: 如果参数为 `True`，则将选择矩形设置为可见。'
- en: '`list_view.setSpacing(int)`: This sets the space around all the sides of the
    items represented in the layout.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setSpacing(int)`: 这将设置布局中表示的项目的所有边框的空间。'
- en: '`list_view.setUniformItemSizes(bool)`: If the parameter is `True`, all items
    are supposed to be the same size in the list view.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setUniformItemSizes(bool)`: 如果参数为 `True`，则列表视图中的所有项目都应具有相同的大小。'
- en: '`list_view.setViewMode(QtWidgets.QListView.ViewMode)`: This sets the view mode
    for this list view. The view modes that are available are as follows:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setViewMode(QtWidgets.QListView.ViewMode)`: 这将设置此列表视图的视图模式。可用的视图模式如下：'
- en: '`QtWidgets.QListView.ListMode`—`0`: Items will be laid out using static movement,
    a `TopToBottom` flow, with a small size.'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.ListMode`—`0`: 项目将使用静态移动、`TopToBottom` 流和较小的尺寸进行布局。'
- en: '`QtWidgets.QListView.IconMode`—`1`: Items will be laid out using free movement,
    a `LeftToRight` flow, with a large size.'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QListView.IconMode`—`1`: 项将使用自由移动、`LeftToRight` 流和较大大小进行布局。'
- en: '`list_view.setWordWrap(bool)`: If the parameter is `True`, the item text will
    be wrapped at word breaks.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setWordWrap(bool)`: 如果参数为 `True`，则项文本将在单词断点处换行。'
- en: '`list_view.setWrapping(bool)`: If the parameter is `True`, the item layout
    will wrap when the space in the visible area is insufficient.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.setWrapping(bool)`: 如果参数为 `True`，则当可见区域的空间不足时，项布局将自动换行。'
- en: is/has
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is/has
- en: 'These are functions that return a Boolean value (`bool`) related to the list
    view states, for example, to check visibility:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与列表视图状态相关的布尔值 (`bool`) 的函数，例如，用于检查可见性：
- en: '`list_view.isRowHidden(int)`: This returns `True` if the row, specified in
    the parameter, is hidden in the list view; otherwise, it returns `False`.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_view.isRowHidden(int)`: 如果参数中指定的行在列表视图中被隐藏，则此函数返回 `True`；否则，它返回 `False`。'
- en: '`list_view.isSelectionRectVisible()`: This returns `True` if the selection
    rectangle is visible; otherwise, the selection rectangle is hidden.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_view.isSelectionRectVisible()`: 如果选择矩形可见，则此函数返回 `True`；否则，选择矩形被隐藏。'
- en: '`list_view.isWrapping()`: This returns `True` if the layout will wrap when
    the space in the visible area is insufficient.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_view.isWrapping()`: 如果布局将在可见区域的空间不足时自动换行，则此函数返回 `True`。'
- en: functional
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current list view:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前列表视图的返回值相关的函数：
- en: '`list_view.batchSize()`: This returns the number of items of each batch if
    the layout mode is set to `Batched`.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.batchSize()`: 如果布局模式设置为 `Batched`，则此函数返回每个批次的项数。'
- en: '`list_view.clearPropertyFlags()`: This clears the property flags from the list
    view.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.clearPropertyFlags()`: 这清除列表视图中的属性标志。'
- en: '`list_view.flow()`: This returns the flow of the content that''s used with
    a list view of the `QtWidgets.QListView.Flow` type.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.flow()`: 这返回与 `QtWidgets.QListView.Flow` 类型的列表视图一起使用的内容的流动。'
- en: '`list_view.gridSize()`: This returns the size of the layout grid that''s used
    with a list view of the `QtCore.QSize` type.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.gridSize()`: 这返回与 `QtCore.QSize` 类型的列表视图一起使用的布局网格的大小。'
- en: '`list_view.layoutMode()`: This returns the layout mode of the `QtWidgets.QListView.LayoutMode`
    type.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.layoutMode()`: 这返回了 `QtWidgets.QListView.LayoutMode` 类型的布局模式。'
- en: '`list_view.modelColumn()`: This returns the number of columns that are visible
    in the model.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.modelColumn()`: 这返回模型中可见的列数。'
- en: '`list_view.movement()`: This returns the movement of the `QtWidgets.QListView.Movement`
    type, describing whether the items can be moved, snapped to a grid, or cannot
    be moved.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.movement()`: 这返回 `QtWidgets.QListView.Movement` 类型的移动，描述了项是否可以移动、吸附到网格或不能移动。'
- en: '`list_view.rectForIndex(QtCore.QModelIndex)`: This returns the rectangle of
    the `QtCore.QRect` type for the item at the position index in the model, as specified
    in the parameter.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.rectForIndex(QtCore.QModelIndex)`: 此函数返回模型中指定位置索引的项的 `QtCore.QRect`
    类型的矩形，如参数中指定。'
- en: '`list_view.resizeMode()`: This returns the resize mode of the `QtWidgets.QListView.ResizeMode`
    type or how the items are laid out when the list view is resized.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.resizeMode()`: 这返回了 `QtWidgets.QListView.ResizeMode` 类型的调整大小模式，或当列表视图调整大小时项的布局方式。'
- en: '`list_view.spacing()`: This returns the space around all the sides of the items
    in the layout.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.spacing()`: 这返回布局中所有项周围的空间。'
- en: '`list_view.uniformItemSizes()`: This returns `True` if all the items have the
    same size in this list view.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.uniformItemSizes()`: 如果在此列表视图中所有项的大小都相同，则此函数返回 `True`。'
- en: '`list_view.viewMode()`: This returns the view mode of the `QtWidgets.QListView.ViewMode`
    type for this list view.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.viewMode()`: 这返回此列表视图的 `QtWidgets.QListView.ViewMode` 类型的视图模式。'
- en: '`list_view.wordWrap()`: This returns `True` if the item text is wrapped at
    word breaks.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.wordWrap()`: 如果项文本在单词断点处换行，则此函数返回 `True`。'
- en: events
  id: totrans-289
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These are functions that are related to events, such as event handlers:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理器：
- en: '`list_view.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with the event parameter when the mouse leaves the list view and a drag operation
    is in progress.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.dragLeaveEvent(QtGui.QDragLeaveEvent)`: 当鼠标离开列表视图且正在执行拖动操作时，此事件处理器会使用事件参数被调用。'
- en: '`list_view.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with the event parameter when conditions occur, such as the cursor entering or moving
    within the view, the modifier key is clicked on the keyboard while the list view
    has focus, or if a drag operation is in progress.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.dragMoveEvent(QtGui.QDragMoveEvent)`: 当发生条件时，例如光标进入或移动到视图内，键盘上的修改键在列表视图有焦点时被点击，或者如果有一个拖动操作正在进行，这个事件处理程序会使用事件参数被调用。'
- en: '`list_view.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    the event parameter when the drag is dropped on the list view.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.dropEvent(QtGui.QDropEvent)`: 当拖动操作在列表视图上放下时，这个事件处理程序会使用事件参数被调用。'
- en: '`list_view.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.event(QtCore.QEvent)`: 这个接收对象的事件，如果事件被识别并处理，则应返回`True`。'
- en: '`list_view.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse move events for the list view, along with the mouse event that''s passed
    in the parameter.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.mouseMoveEvent(QtGui.QMouseEvent)`: 这个事件处理程序接收列表视图的鼠标移动事件，以及传递给参数的鼠标事件。'
- en: '`list_view.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse release events for the list view, along with the mouse event that''s passed
    in the parameter.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.mouseReleaseEvent(QtGui.QMouseEvent)`: 这个事件处理程序接收列表视图的鼠标释放事件，以及传递给参数的鼠标事件。'
- en: '`list_view.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for the list view, along with the paint event that''s passed in the parameter.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.paintEvent(QtGui.QPaintEvent)`: 这个事件处理程序接收列表视图的绘制事件，以及传递给参数的绘制事件。'
- en: '`list_view.resizeEvent(QtGui.QResizeEvent)`: This event handler receives resize
    events for the list view, along with the resize event that''s passed in the parameter.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.resizeEvent(QtGui.QResizeEvent)`: 这个事件处理程序接收列表视图的调整大小事件，以及传递给参数的调整大小事件。'
- en: '`list_view.timerEvent(QtCore.QTimerEvent)`: This event handler receives timer
    events for the list view, along with the timer event that''s passed in the parameter.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.timerEvent(QtCore.QTimerEvent)`: 这个事件处理程序接收列表视图的计时器事件，以及传递给参数的计时器事件。'
- en: '`list_view.wheelEvent(QtGui.QWheelEvent)`: This event handler receives mouse
    wheel events for the list view, along with the wheel event that''s passed in the
    parameter.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.wheelEvent(QtGui.QWheelEvent)`: 这个事件处理程序接收列表视图的鼠标滚轮事件，以及传递给参数的滚轮事件。'
- en: signals
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal for the `QListView` class is as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`QListView`类可用的信号如下：'
- en: '`list_view.indexesMoved(QtCore.QModelIndexList)`: This signal is emitted when
    the indexes specified in the parameter are moved in the view.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_view.indexesMoved(QtCore.QModelIndexList)`: 当参数中指定的索引在视图中移动时，会发出这个信号。'
- en: QListView example
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QListView 示例
- en: 'Now, we will create the `UListV` class in the `u_style.py` files of the PySide2
    and PyQt5 apps. This class will demonstrate utilization of the list view with
    the combobox that we created previously:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将在PySide2和PyQt5应用程序的`u_style.py`文件中创建`UListV`类。这个类将展示如何使用我们之前创建的组合框与列表视图：
- en: 'Add the `UListV` class to the `u_style.py` files:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`UListV`类添加到`u_style.py`文件中：
- en: '[PRE9]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This list view will be used in the combobox to display the popup. To implement
    this list view with a combobox in the application, we need to add some lines in
    the `u_app.py` files.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这个列表视图将在组合框中用于显示弹出窗口。为了在应用程序中将这个列表视图与组合框实现，我们需要在`u_app.py`文件中添加一些行。
- en: 'Add the `UListV` class to the import section of the `u_app.py` files, in keeping
    with the `UCombo` class:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_app.py`文件的导入部分添加`UListV`类，与`UCombo`类保持一致：
- en: '[PRE10]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In addition, change the lines of the combobox, as follows:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，修改组合框的行，如下：
- en: '[PRE11]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This sets the list view for the combobox element. By doing this, we can style
    and add functionality to the combobox pop-up list.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了组合框元素的列表视图。通过这样做，我们可以为组合框弹出列表设置样式并添加功能。
- en: QTableView
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTableView
- en: 'Let''s describe table implementation in the GUI application. The `QTableView`
    class provides the representation of the data in table form. In accordance with
    the paradigm of the Qt framework, this class (including the list view) provides
    a default model-view implementation of the table view. To fill the table with
    some data, you need to use models such as the `QAbstractTableModel` class of the
    `QtCore` module. The `QTableView` class has the following inheritance scheme:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述在 GUI 应用程序中的表格实现。`QTableView` 类提供了以表格形式表示数据。根据 Qt 框架的范式，此类（包括列表视图）提供了表格视图的默认模型-视图实现。要填充表格中的数据，您需要使用
    `QtCore` 模块中的 `QAbstractTableModel` 类等模型。`QTableView` 类具有以下继承方案：
- en: '![](img/e485f97c-0a08-4fbc-be61-167e48d8a5bc.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e485f97c-0a08-4fbc-be61-167e48d8a5bc.png)'
- en: 'The declaration statement of this class in the application is as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中此类的声明如下：
- en: '[PRE12]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: QTableView functions
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTableView 函数
- en: The `QTableView` class improves functionality with the following functions.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTableView` 类通过以下函数增强了功能。'
- en: set
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting parameters/properties in relation
    to the table view:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与表格视图相关的参数/属性相关的函数：
- en: '`table_view.setColumnHidden(int, bool)`: If the second parameter is `True`,
    this sets the column specified in the parameter as hidden.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setColumnHidden(int, bool)`: 如果第二个参数为 `True`，则将参数指定的列设置为隐藏。'
- en: '`table_view.setColumnWidth(int, int)`: This sets the width (the second parameter)
    of the column that''s specified as the first parameter.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setColumnWidth(int, int)`: 这将设置第一个参数指定的列的宽度（第二个参数）。'
- en: '`table_view.setCornerButtonEnabled(bool)`: If the parameter is `True`, this
    sets the button in the top-left corner of this table to select all of the table.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setCornerButtonEnabled(bool)`: 如果参数为 `True`，则将此表左上角的按钮设置为选择整个表。'
- en: '`table_view.setGridStyle(QtCore.Qt.PenStyle)`: This sets the pen style that
    will be used to draw the grid for this table. The styles that are available are
    as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setGridStyle(QtCore.Qt.PenStyle)`: 这将设置用于绘制此表网格的笔风格。可用的样式如下：'
- en: '`QtCore.Qt.NoPen`—`0`: No pen.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.NoPen`—`0`: 无笔。'
- en: '`QtCore.Qt.SolidLine`—`1`: Plain line.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.SolidLine`—`1`: 实线。'
- en: '`QtCore.Qt.DashLine`—`2`: Dashed line.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DashLine`—`2`: 虚线。'
- en: '`QtCore.Qt.DotLine`—`3`: Dotted line.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DotLine`—`3`: 点划线。'
- en: '`QtCore.Qt.DashDotLine`—`4`: Dashed-dotted line.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DashDotLine`—`4`: 虚线点划线。'
- en: '`QtCore.Qt.DashDotDotLine`—`5`: Dashed and double-dotted line.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DashDotDotLine`—`5`: 虚线双点划线。'
- en: '`QtCore.Qt.CustomDashLine`—`6`: Customized dashed line, which is defined by
    using the `QtGui.QPainterPathStroker` custom pattern.'
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.CustomDashLine`—`6`: 自定义虚线，通过使用 `QtGui.QPainterPathStroker` 自定义图案定义。'
- en: '`table_view.setHorizontalHeader(QtWidgets.QHeaderView)`: This sets the header
    specified in the parameter that will be used as a horizontal header.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setHorizontalHeader(QtWidgets.QHeaderView)`: 这将设置参数中指定的用作水平表头的表头。'
- en: '`table_view.setModel(QtCore.QAbstractItemModel)`: This sets the model with
    data that will be used for the table view.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setModel(QtCore.QAbstractItemModel)`: 这将设置用于表视图的数据模型。'
- en: '`table_view.setRowHeight(int, int)`: This sets the height (the second parameter)
    of the row specified as the first parameter.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setRowHeight(int, int)`: 这将设置第一个参数指定的行的宽度（第二个参数）。'
- en: '`table_view.setRowHidden(int, bool)`: If the second parameter is `True`, this
    sets the row (the first parameter) as hidden.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setRowHidden(int, bool)`: 如果第二个参数为 `True`，则将行（第一个参数）设置为隐藏。'
- en: '`table_view.setShowGrid(bool)`: If the parameter is `True`, the grid will be
    shown with this table.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setShowGrid(bool)`: 如果参数为 `True`，则将使用此表显示网格。'
- en: '`table_view.setSortingEnabled(bool)`: If the parameter is `True`, this sets
    the sorting for the table as enabled.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setSortingEnabled(bool)`: 如果参数为 `True`，则将表格的排序设置为启用。'
- en: '`table_view.setSpan(int, int, int, int)`: This sets the span for the element
    in the row (the first parameter) and column (the second parameter) to the number
    of rows (the third parameter) and columns (the fourth parameter).'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setSpan(int, int, int, int)`: 这将设置行（第一个参数）和列（第二个参数）中元素的跨距为行数（第三个参数）和列数（第四个参数）。'
- en: '`table_view.setVerticalHeader(QtWidgets.QHeaderView)`: This sets the header
    that''s specified in the parameter and will be used as a vertical header.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setVerticalHeader(QtWidgets.QHeaderView)`: 这将设置参数中指定的用作垂直表头的表头。'
- en: '`table_view.setWordWrap(bool)`: If the parameter is `True`, this sets the word
    wrapping policy for the item''s text.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.setWordWrap(bool)`: 如果参数为`True`，则为此项的文本设置自动换行策略。'
- en: is
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These are functions that return a Boolean value (`bool`) related to the table
    view states, for example, to check visibility:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与表格视图状态相关的布尔值（`bool`）的函数，例如，用于检查可见性：
- en: '`table_view.isColumnHidden(int)`: This returns `True` if the column specified
    in the parameter is hidden.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.isColumnHidden(int)`: 如果参数中指定的列被隐藏，则返回`True`。'
- en: '`table_view.isCornerButtonEnabled()`: This returns `True` if the button displayed
    in the top-left corner of the table view is enabled.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.isCornerButtonEnabled()`: 如果表格视图左上角显示的按钮被启用，则返回`True`。'
- en: '`table_view.isRowHidden(int)`: This returns `True` if the row specified in
    the parameter is hidden.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.isRowHidden(int)`: 如果参数中指定的行被隐藏，则返回`True`。'
- en: '`table_view.isSortingEnabled()`: This returns `True` if sorting is enabled
    for this table.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.isSortingEnabled()`: 如果此表格启用了排序，则返回`True`。'
- en: functional
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that return the current table view values, changes in functionality,
    and so on:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回当前表格视图值、功能变化等的函数：
- en: '`table_view.clearSpans()`: This removes all row/column spans in the table view.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.clearSpans()`: 这从表格视图中移除所有行/列跨度。'
- en: '`table_view.columnAt(int)`: This returns the column that is located by the
    *y* coordinate that''s specified in the parameter in the content coordinates.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnAt(int)`: 这返回在内容坐标中通过参数指定的 *y* 坐标定位的列。'
- en: '`table_view.columnCountChanged(int, int)`: This is the slot that''s called
    when columns are added or deleted. The previous number of columns is specified
    as the first parameter, while the new number of columns is specified as the second
    parameter.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnCountChanged(int, int)`: 当列被添加或删除时调用此槽。之前的列数作为第一个参数指定，而新的列数作为第二个参数指定。'
- en: '`table_view.columnMoved(int, int, int)`: This is the slot that''s called to
    change the index of the column that''s specified as the first parameter. The previous
    index is specified as the second parameter, while the new index is specified as
    the third parameter.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnMoved(int, int, int)`: 这是当指定为第一个参数的列的索引改变时被调用的槽。之前的索引作为第二个参数指定，而新的索引作为第三个参数指定。'
- en: '`table_view.columnResized(int, int, int)`: This is the slot that''s called
    to change the width of the column that''s specified as the first parameter. The
    previous width is specified as the second parameter, while the new width is specified
    as the third parameter.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnResized(int, int, int)`: 这是当指定为第一个参数的列的宽度改变时被调用的槽。之前的宽度作为第二个参数指定，而新的宽度作为第三个参数指定。'
- en: '`table_view.columnSpan(int, int)`: This returns the column span of the element
    in the table in the specified row (the first parameter) and column (the second
    parameter).'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnSpan(int, int)`: 这返回在指定的行（第一个参数）和列（第二个参数）中表格中元素的列跨度。'
- en: '`table_view.columnViewportPosition(int)`: This returns the *x* coordinate of
    the column specified in the parameter in the content coordinates.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnViewportPosition(int)`: 这返回参数中指定的列在内容坐标中的 *x* 坐标。'
- en: '`table_view.columnWidth(int)`: This returns the width of the column specified
    in the parameter.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.columnWidth(int)`: 这返回参数中指定的列的宽度。'
- en: '`table_view.gridStyle()`: This returns the style of the `QtCore.Qt.PenStyle`
    type for the table grid.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.gridStyle()`: 这返回表格网格的`QtCore.Qt.PenStyle`类型的样式。'
- en: '`table_view.hideColumn(int)`: This hides the column of the table specified
    in the parameter.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.hideColumn(int)`: 这隐藏参数中指定的表格列。'
- en: '`table_view.hideRow(int)`: This hides the row specified in the parameter.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.hideRow(int)`: 这将隐藏参数中指定的行。'
- en: '`table_view.horizontalHeader()`: This returns the horizontal header of the
    `QtWidgets.QHeaderView` type for the table view.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.horizontalHeader()`: 这返回表格视图的`QtWidgets.QHeaderView`类型的水平表头。'
- en: '`table_view.resizeColumnsToContents()`: This resizes all columns to the size
    based on the size hints of the delegate that''s used for each item in the columns.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.resizeColumnsToContents()`: 这将所有列的大小调整为基于用于列中每个项目的代理的大小提示。'
- en: '`table_view.resizeColumnToContents(int)`: This resizes the column that''s specified
    in the parameter to the size based on the size hint of the delegate that''s used
    for each item in the column.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.resizeColumnToContents(int)`: 这将参数中指定的列的大小调整为基于用于列中每个项目的代理的大小提示。'
- en: '`table_view.resizeRowsToContents()`: This resizes all rows to the size based
    on the size hints of the delegate that''s used for each item in the rows.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.resizeRowsToContents()`: 这将所有行的大小调整为基于用于每行中每个项目的代理的大小提示。'
- en: '`table_view.resizeRowToContents(int)`: This resizes the row that''s specified
    in the parameter to the size based on the size hint of the delegate that''s used
    for each item in the row.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.resizeRowToContents(int)`: 这将参数指定的行的大小调整为基于该行中每个项目的代理的大小提示。'
- en: '`table_view.rowAt(int)`: This returns the row that is located by the *y* coordinate
    that''s specified in the parameter in the content coordinates.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowAt(int)`: 这返回在内容坐标中通过参数指定的 *y* 坐标定位的行。'
- en: '`table_view.rowCountChanged(int, int)`: This is the slot that''s called when
    columns are added or deleted, that is, the previous number of rows (the first
    parameter) and the new number of rows (the second parameter).'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowCountChanged(int, int)`: 当添加或删除列时调用此槽，即上一个行数（第一个参数）和新的行数（第二个参数）。'
- en: '`table_view.rowHeight(int)`: This returns the height of the row specified in
    the parameter.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowHeight(int)`: 这返回参数指定的行的长度。'
- en: '`table_view.rowMoved(int, int, int)`: This is the slot that''s called to change
    the index of the row that''s specified as the first parameter. The previous index
    is specified as the second parameter, while the new index is specified as the
    third parameter.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowMoved(int, int, int)`: 这是调用以更改第一个参数指定的行索引的槽。上一个索引由第二个参数指定，而新索引由第三个参数指定。'
- en: '`table_view.rowResized(int, int, int)`: This is the slot that''s called to
    change the width of the row that''s specified as the first parameter. The previous
    width is specified as the second parameter, while the new width is specified as
    the third parameter.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowResized(int, int, int)`: 这是调用以更改第一个参数指定的行宽度的槽。上一个宽度由第二个参数指定，而新宽度由第三个参数指定。'
- en: '`table_view.rowSpan(int, int)`: This returns the row span of the element in
    the table that is in the specified row (the first parameter) and column (the second
    parameter).'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowSpan(int, int)`: 这返回在指定的行（第一个参数）和列（第二个参数）中的表格元素的水平跨行数。'
- en: '`table_view.rowViewportPosition(int)`: This returns the *y* coordinate of the
    row that''s specified in the parameter in the content coordinates.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.rowViewportPosition(int)`: 这返回参数指定的行在内容坐标中的 *y* 坐标。'
- en: '`table_view.selectColumn(int)`: This selects the column that''s specified in
    the parameter of this table view.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.selectColumn(int)`: 这将选择由该表格视图参数指定的列。'
- en: '`table_view.selectRow(int)`: This selects the row that''s specified in the
    parameter of this table view.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.selectRow(int)`: 这将选择由该表格视图参数指定的行。'
- en: '`table_view.showColumn(int)`: This shows the column that''s specified in the
    parameter.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.showColumn(int)`: 这将显示参数指定的列。'
- en: '`table_view.showGrid()`: This returns `True` if the table is displayed in grid
    mode.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.showGrid()`: 如果表格以网格模式显示，则返回 `True`。'
- en: '`table_view.showRow(int)`: This shows the row that''s specified in the parameter.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.showRow(int)`: 这将显示由参数指定的行。'
- en: '`table_view.sortByColumn(int, QtCore.Qt.SortOrder)`: This sorts the model by
    the column specified as the first parameter in the order (the second parameter).'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.sortByColumn(int, QtCore.Qt.SortOrder)`: 这将根据第一个参数指定的列按顺序（第二个参数）对模型进行排序。'
- en: '`table_view.verticalHeader()`: This returns the vertical header of the `QtWidgets.QHeaderView`
    type that''s used for this table view.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.verticalHeader()`: 这返回用于此表格视图的 `QtWidgets.QHeaderView` 类型的垂直标题。'
- en: '`table_view.wordWrap()`: This returns `True` if the word wrapping policy is
    enabled for the item''s text.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.wordWrap()`: 如果启用了项目文本的自动换行策略，则返回 `True`。'
- en: events
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'This is function that is related to events such as event handler, and so on:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个与事件处理程序、等等相关联的函数：
- en: '`table_view.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for this table view with events passed in the parameter.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`table_view.paintEvent(QtGui.QPaintEvent)`: 此事件处理程序接收传递给参数的 paint 事件，用于此表格视图。'
- en: QTableView example
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTableView 示例
- en: 'To demonstrate the table in the application, we need to create the table data
    model and view for the table. First, let''s create the model with the `QAbstractTableModel`
    class from the `QtCore` module. Create files named `u_table.py` in both the `App/App_PyQt5/`
    and `App/App_PySide2/` directories and include the following lines inside them:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 要在应用程序中演示表格，我们需要为表格创建数据模型和视图。首先，让我们使用来自 `QtCore` 模块的 `QAbstractTableModel` 类来创建模型。在
    `App/App_PyQt5/` 和 `App/App_PySide2/` 目录中创建名为 `u_table.py` 的文件，并在其中包含以下行：
- en: 'In the case of PyQt5, add the following to the import section of the `u_table.py`
    file:'
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyQt5 的情况下，将以下内容添加到 `u_table.py` 文件的导入部分：
- en: '[PRE13]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'In the case of PySide2, add the following to the import section of the `u_table.py`
    file:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PySide2 的情况下，将以下内容添加到 `u_table.py` 文件的导入部分：
- en: '[PRE14]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, add the `UTModel` class to the `u_table.py` files:'
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将 `UTModel` 类添加到 `u_table.py` 文件中：
- en: '[PRE15]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These methods are required in the abstract class. They describe the total number
    of rows and columns in the table, as well as the data for each cell. Now, we need
    to add some style for this table using the `u_style.py` files.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法在抽象类中是必需的。它们描述了表格中的总行数和列数，以及每个单元格的数据。现在，我们需要使用 `u_style.py` 文件为这个表格添加一些样式。
- en: 'Create a class called `UTabView` in the `u_style.py` files:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `u_style.py` 文件中创建一个名为 `UTabView` 的类：
- en: '[PRE16]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This table view will be used to style the table with custom properties and will
    allow us to reimplement them if needed.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格视图将用于使用自定义属性来样式化表格，并允许我们在需要时重新实现它们。
- en: 'Now, add some lines to the `u_app.py` files:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，向 `u_app.py` 文件中添加一些行：
- en: 'In the import section of the `u_app.py` file, add the `UTabView` class, as
    follows:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `u_app.py` 文件的导入部分添加 `UTabView` 类，如下所示：
- en: '[PRE17]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, inside the `__init__()` function of the `UApp` class, add the table and
    set the model. Finally, add the signal of the combobox with the function that
    will be called:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在 `UApp` 类的 `__init__()` 函数内部，添加表格并设置模型。最后，添加组合框的信号和将调用的函数：
- en: '[PRE18]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'We''re using the table view to represent the table in the application and using
    the model to represent the data in the table (following the model-view paradigm). As
    a result, if the table in the combobox is selected, the table will appear as follows:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用表格视图来表示应用程序中的表格，并使用模型来表示表格中的数据（遵循模型-视图范式）。因此，如果组合框中选择了表格，表格将如下所示：
- en: '![](img/8939828d-9409-4163-8c82-a4af8b178155.png)'
  id: totrans-403
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/8939828d-9409-4163-8c82-a4af8b178155.png)'
- en: Each cell of this table uses the random number as a value.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表格的每个单元格都使用随机数作为值。
- en: Summary
  id: totrans-405
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we described the basic paradigms of the Qt framework known
    as the model-view. In a broad sense, the MVC architecture provides us with an
    opportunity to use data and represent this data in a flexible form; in other words,
    to split the model with the data and views of the data model. In this way, almost
    any type of data can be implemented with a GUI application. In regard to the development
    process, some features, such as tree views and list views, were not shown, but
    these can be used in conjunction with documentation in a broad area of software
    development. In the chapters that follow, models with data will be modernized
    and demonstrated in greater detail.
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们描述了 Qt 框架的基本范式，即模型-视图。从广义上讲，MVC 架构为我们提供了使用数据和以灵活形式表示数据的机会；换句话说，将模型与数据模型的数据视图分开。这样，几乎任何类型的数据都可以用
    GUI 应用程序实现。在开发过程中，一些功能，如树视图和列表视图，没有展示，但可以在广泛的软件开发领域中与文档结合使用。在接下来的章节中，将详细介绍具有数据的模型。
- en: The next chapter will describe the basic construction of the different kinds
    of buttons that are used with Python bindings to create GUI apps.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将描述使用 Python 绑定创建 GUI 应用程序时使用的不同类型按钮的基本结构。
