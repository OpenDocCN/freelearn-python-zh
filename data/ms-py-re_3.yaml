- en: Chapter 3. Grouping
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。分组
- en: 'Grouping is a powerful tool that allows you to perform operations such as:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 分组是一个强大的工具，允许您执行诸如以下操作：
- en: Creating subexpressions to apply quantifiers. For instance, repeating a subexpression
    rather than a single character.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建子表达式以应用量词。例如，重复子表达式而不是单个字符。
- en: Limiting the scope of the alternation. Instead of alternating the whole expression,
    we can define exactly what has to be alternated.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制交替的范围。我们可以定义确切需要交替的内容，而不是整个表达式交替。
- en: Extracting information from the matched pattern. For example, extracting a date
    from lists of orders.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从匹配的模式中提取信息。例如，从订单列表中提取日期。
- en: Using the extracted information again in the regex, which is probably the most
    useful property. One example would be to detect repeated words.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 再次在正则表达式中使用提取的信息，这可能是最有用的属性。一个例子是检测重复的单词。
- en: Throughout this chapter, we will explore groups, from the simplest to the most
    complex ones. We'll review some of the previous examples in order to bring clarity
    to how these operations work.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨分组，从最简单的到最复杂的。我们将回顾一些先前的示例，以便清楚地了解这些操作的工作原理。
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: 'We''ve already used groups in several examples throughout [Chapter 2](ch02.html
    "Chapter 2. Regular Expressions with Python") *Regular Expressions with Python*.
    Grouping is accomplished through two metacharacters, the parentheses `()`. The
    simplest example of the use of parentheses would be building a subexpression.
    For example, imagine you have a list of products, the ID for each product being
    made up of two or three sequences of one digit followed by a dash and followed
    by one alphanumeric character, 1-a2-b:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第2章](ch02.html "第2章。使用Python的正则表达式") *使用Python的正则表达式*中的几个示例中使用了分组。分组是通过两个元字符`()`来完成的。使用括号的最简单示例将构建子表达式。例如，假设您有一个产品列表，每个产品的ID由一个数字序列和一个字母数字字符组成，例如1-a2-b：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: As you can see in the preceding example, the parentheses indicate to the regex
    engine that the pattern inside them has to be treated like a unit.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的示例中所见，括号指示正则表达式引擎，其中它们内部的模式必须被视为一个单元。
- en: 'Let''s see another example; in this case, we need to match whenever there is
    one or more `ab` followed by `c`:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看另一个例子；在这种情况下，我们需要匹配每当有一个或多个`ab`后跟`c`时：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: So, you could use parentheses whenever you want to group meaningful subpatterns
    inside the main pattern.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以在主模式中使用括号来分组有意义的子模式。
- en: Another simple example of their use is limiting the scope of alternation. For
    example, let's say we would like to write an expression to match if someone is
    from Spain. In Spanish, the country is spelled España and Spaniard is spelled
    Español. So, we want to match España and Español. The Spanish letter ñ can be
    confusing for non-Spanish speakers, so in order to avoid confusion we'll use Espana
    and Espanol instead of España and Español.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以用来限制交替的范围。例如，假设我们想要编写一个表达式来匹配是否有人来自西班牙。在西班牙语中，国家名称是España，西班牙人是Español。因此，我们想要匹配España和Español。西班牙字母ñ对于非西班牙人来说可能会令人困惑，因此为了避免混淆，我们将使用Espana和Espanol代替España和Español。
- en: 'We can achieve it with the following alternation:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下交替实现：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The problem is that this also matches `ol`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是这也匹配了`ol`：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'So, let''s try character classes as in the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们尝试字符类，如下面的代码所示：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It works, but here we have another problem: It also matches `"Espano"` and
    `"Espanl"` that doesn''t mean anything in Spanish:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效，但这里我们有另一个问题：它还匹配了`"Espano"`和`"Espanl"`，这在西班牙语中没有任何意义：
- en: '[PRE5]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The solution here is to use parentheses:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案是使用括号：
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Let's see another key feature of grouping, **capturing**. Groups also capture
    the matched pattern, so you can use them later in several operations, such as
    `sub` or in the regex itself.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看分组的另一个关键特性，**捕获**。组还捕获匹配的模式，因此您可以在以后的几个操作中使用它们，例如`sub`或正则表达式本身。
- en: 'For example, imagine you have a list of products, the IDs of which are made
    up of digits representing the country of the product, a dash as a separator, and
    one or more alphanumeric characters as the ID in the DB. You''re requested to
    extract the country codes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设您有一个产品列表，其ID由代表产品国家的数字、作为分隔符的破折号和一个或多个字母数字字符组成。您被要求提取国家代码：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In the preceding example, we've created a pattern to match the IDs, but we're
    only capturing a group made up of the country digits. Remember that when working
    with the `group` method, the index 0 returns the whole match, and the groups start
    at index 1.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们创建了一个模式来匹配ID，但我们只捕获了由国家数字组成的一个组。请记住，在使用`group`方法时，索引0返回整个匹配，而组从索引1开始。
- en: Capturing groups give a huge range of possibilities due to which they can also
    be used with several operations, which we would discuss in the upcoming sections.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获组由于可以与几个操作一起使用而提供了广泛的可能性，我们将在接下来的部分中讨论它们的使用。
- en: Backreferences
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反向引用
- en: 'As we''ve mentioned previously, one of the most powerful functionalities that
    grouping gives us is the possibility of using the captured group inside the regex
    or other operations. That''s exactly what backreferences provide. Probably the
    best known example to bring some clarity is the regex to find duplicated words,
    as shown in the following code:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，分组给我们提供的最强大的功能之一是可以在正则表达式或其他操作中使用捕获的组。这正是反向引用提供的。为了带来一些清晰度，可能最为人熟知的例子是查找重复单词的正则表达式，如下面的代码所示：
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Here, we're capturing a group made up of one or more alphanumeric characters,
    after which the pattern tries to match a whitespace, and finally we have the `\1`
    backreference. You can see it highlighted in the code, meaning that it must exactly
    match the same thing it matched as the first group.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们捕获了一个由一个或多个字母数字字符组成的组，然后模式尝试匹配一个空格，最后我们有`\1`反向引用。您可以在代码中看到它被突出显示，这意味着它必须与第一个组匹配的内容完全相同。
- en: 'Backreferences can be used with the first 99 groups .Obviously, with an increase
    in the number of groups, you will find the task of reading and maintaining the
    regex more complex. This is something that can be reduced with named groups; we''ll
    see them in the following section. But before that, we still have a lot of things
    to learn with backreferences. So, let''s continue with another operation in which
    backreferences really come in handy. Recall the previous example, in which we
    had a list of products. Now, let''s try to change the order of the ID, so we have
    the ID in the DB, a dash, and the country code:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 反向引用可以与前99个组一起使用。显然，随着组数的增加，阅读和维护正则表达式的任务会变得更加复杂。这是可以通过命名组来减少的，我们将在下一节中看到它们。但在那之前，我们还有很多关于反向引用的东西要学习。所以，让我们继续进行另一个操作，其中反向引用真的非常方便。回想一下之前的例子，其中我们有一个产品列表。现在，让我们尝试改变ID的顺序，这样我们就有了数据库中的ID，一个破折号和国家代码：
- en: '[PRE9]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That's it. Easy, isn't it? Note that we're also capturing the ID in the DB,
    so we can use it later. With the highlighted code, we're saying, "Replace what
    you've matched with the second group, a dash, and the first group".
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。很简单，不是吗？请注意，我们还捕获了数据库中的ID，所以我们以后可以使用它。通过突出显示的代码，我们在说，“用你匹配到的第二组、一个破折号和第一组来替换”。
- en: As with the previous example, using numbers can be difficult to follow and to
    maintain. So, let's see what Python, through the `re` module, offers to help with
    this.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 与之前的例子一样，使用数字可能难以跟踪和维护。因此，让我们看看Python通过`re`模块提供的帮助。
- en: Named groups
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 命名组
- en: Remember from the previous chapter when we got a group through an index?
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还记得上一章中我们通过索引获取组的时候吗？
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We just learnt how to access the groups using indexes to extract information
    and to use it as backreferences. Using numbers to refer to groups can be tedious
    and confusing, and the worst thing is that it doesn't allow you to give meaning
    or context to the group. That's why we have named groups.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚学会了如何使用索引访问组来提取信息并将其用作反向引用。使用数字来引用组可能会很繁琐和令人困惑，最糟糕的是它不允许你给组赋予含义或上下文。这就是为什么我们有命名组。
- en: Imagine a regex in which you have several backreferences, let's say 10, and
    you find out that the third one is invalid, so you remove it from the regex. That
    means you have to change the index for every backreference starting from that
    one onwards. In order to solve this problem, in 1997, Guido Van Rossum designed
    named groups for Python 1.5\. This feature was offered to Perl for cross-pollination.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下一个正则表达式，其中有几个反向引用，比如说10个，然后你发现第三个是无效的，所以你从正则表达式中删除它。这意味着你必须更改从那个位置开始的每个反向引用的索引。为了解决这个问题，1997年，Guido
    Van Rossum为Python 1.5设计了命名组。这个功能被提供给了Perl进行交叉传播。
- en: Nowadays, it can be found in almost any flavor. Basically it allows us to give
    names to the groups, so we can refer to them by their names in any operation where
    groups are involved.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它几乎可以在任何风格中找到。基本上它允许我们给组命名，这样我们可以在任何涉及组的操作中通过它们的名称来引用它们。
- en: In order to use it, we have to use the syntax,`(?P<name>pattern)`, where the
    `P` comes from Python-specific extensions (as you can read in the e-mail Guido
    sent to Perl developers at [http://markmail.org/message/oyezhwvefvotacc3](http://markmail.org/message/oyezhwvefvotacc3))
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用它，我们必须使用`(?P<name>pattern)`的语法，其中`P`来自于Python特定的扩展（正如你可以在Guido发送给Perl开发人员的电子邮件中所读到的那样[http://markmail.org/message/oyezhwvefvotacc3](http://markmail.org/message/oyezhwvefvotacc3)）
- en: 'Let''s see how it works with the previous example in the following code snippet:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何在以下代码片段中与之前的例子一起工作的：
- en: '[PRE11]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'So, backreferences are now much simpler to use and maintain as is evident in
    the following example:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，反向引用现在使用起来更简单，更容易维护，正如下面的例子所示：
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As we see in the previous example, in order to reference a group by the name
    in the `sub` operation, we have to use \`g<name>`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的例子中看到的，为了在`sub`操作中通过名称引用组，我们必须使用\`g<name>\`。
- en: 'We can also use named groups inside the pattern itself, as seen in the following
    example:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在模式内部使用命名组，就像下面的例子中所示的那样：
- en: '[PRE13]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is simpler and more readable than using numbers.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这比使用数字更简单和更易读。
- en: 'Through these examples, we''ve used the following three different ways to refer
    to named groups:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些例子，我们使用了以下三种不同的方式来引用命名组：
- en: '| Use | Syntax |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 使用 | 语法 |'
- en: '| --- | --- |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Inside a pattern | (?P=name) |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 在模式内 | (?P=name) |'
- en: '| In the `repl` string of the `sub` operation | \g<name> |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 在`sub`操作的`repl`字符串中 | \g<name> |'
- en: '| In any of the operations of the `MatchObject` | match.group(''name'') |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 在`MatchObject`的任何操作中 | match.group(''name'') |'
- en: Non-capturing groups
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非捕获组
- en: 'As we''ve mentioned before, capturing content is not the only use of groups.
    There are cases when we want to use groups, but we''re not interested in extracting
    the information; alternation would be a good example. That''s why we have a way
    to create groups without capturing. Throughout this book, we''ve been using groups
    to create subexpressions, as can be seen in the following example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前提到的，捕获内容并不是组的唯一用途。有时我们想要使用组，但并不想提取信息；交替是一个很好的例子。这就是为什么我们有一种方法可以创建不捕获的组。在本书中，我们一直在使用组来创建子表达式，就像下面的例子中所示的那样：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'You can see that we''ve captured a group even though we''re not interested
    in the content of the group. So, let''s try it without capturing, but first we
    have to know the syntax, which is almost the same as in normal groups, `(?:pattern)`.
    As you can see, we''ve only added `?:`. Let''s see the following example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，即使我们对组的内容不感兴趣，我们仍然捕获了一个组。所以，让我们尝试一下不捕获，但首先我们必须知道语法，它几乎与普通组的语法相同，`(?:pattern)`。如你所见，我们只是添加了`?:`。让我们看看下面的例子：
- en: '[PRE15]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: After using the new syntax, we have the same functionality as before, but now
    we're saving resources and the regex is easier to maintain. Note that the group
    cannot be referenced.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的语法后，我们拥有了与以前相同的功能，但现在我们节省了资源，正则表达式更容易维护。请注意，该组不能被引用。
- en: Atomic groups
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原子组
- en: They're a special case of non-capturing groups; they're usually used to improve
    performance. It disables backtracking, so with them you can avoid cases where
    trying every possibility or path in the pattern doesn't make sense. This concept
    is difficult to understand, so stay with me up to the end of the section.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是非捕获组的特殊情况；它们通常用于提高性能。它禁用回溯，因此您可以避免在模式中尝试每种可能性或路径都没有意义的情况。这个概念很难理解，所以请跟我一直看到本节的结束。
- en: 'The `re` module doesn''t support atomic groups. So, in order to see an example,
    we''re going to use the regex module: [https://pypi.python.org/pypi/regex](https://pypi.python.org/pypi/regex).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`re`模块不支持原子组。因此，为了看一个例子，我们将使用regex模块：[https://pypi.python.org/pypi/regex](https://pypi.python.org/pypi/regex)。'
- en: 'Imagine we have to look for an ID made up of one or more alphanumeric characters
    followed by a dash and by a digit:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们要寻找由一个或多个字母数字字符组成的ID，后面跟着一个破折号和一个数字：
- en: '[PRE16]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let''s see step by step what''s happening here:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地看看这里发生了什么：
- en: The regex engine matches the first `a`.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正则表达式引擎匹配了第一个`a`。
- en: It then matches every character up to the end of the string.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后它匹配直到字符串的末尾的每个字符。
- en: It fails because it doesn't find the dash.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它失败了，因为它找不到破折号。
- en: So, the engine does backtracking and tries the same with the following `a`.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，引擎进行回溯，并尝试下一个`a`。
- en: Start the same process again.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次开始相同的过程。
- en: 'It tries this with every character. If you think about what we''re doing, it
    doesn''t make any sense to keep trying once you have failed the first time. And
    that''s exactly what an atomic group is useful for. For example:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它尝试了每个字符。如果您考虑我们正在做的事情，一旦第一次失败，继续尝试就没有任何意义。这正是原子组的用处。例如：
- en: '[PRE17]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here we've added `?>`, which indicates an atomic group, so once the regex engine
    fails to match`,` it doesn't keep trying with every character in the data.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了`?>`，这表示一个原子组，因此一旦正则表达式引擎无法匹配`,`，它就不会继续尝试数据中的每个字符。
- en: Special cases with groups
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组的特殊情况
- en: Python provides us with some forms of groups that can help us to modify the
    regular expressions or even to match a pattern only when a previous group exists
    in the match, such as an `if` statement.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Python为我们提供了一些形式的组，可以帮助我们修改正则表达式，甚至只有在匹配前一个组存在于匹配中时才匹配模式，比如`if`语句。
- en: Flags per group
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 每组的标志
- en: 'There is a way to apply the flags we''ve seen in [Chapter 2](ch02.html "Chapter 2. Regular
    Expressions with Python") *Regular Expressions with Python*, using a special form
    of grouping: `(?iLmsux)`.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以应用我们在[第2章](ch02.html "第2章。使用Python进行正则表达式")*使用Python进行正则表达式*中看到的标志，使用一种特殊的分组形式：`(?iLmsux)`。
- en: '| Letter | Flag |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| Letter | Flag |'
- en: '| --- | --- |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| **i** | re.IGNORECASE |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| **i** | re.IGNORECASE |'
- en: '| **L** | re.LOCALE |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| **L** | re.LOCALE |'
- en: '| **m** | re.MULTILINE |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| **m** | re.MULTILINE |'
- en: '| **s** | re.DOTALL |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| **s** | re.DOTALL |'
- en: '| **u** | re.UNICODE |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| **u** | re.UNICODE |'
- en: '| **x** | re.VERBOSE |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| **x** | re.VERBOSE |'
- en: 'For example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE18]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The above example is the same as:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的例子与以下相同：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We've seen what these examples do several times in the previous chapter.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一章中多次看到了这些例子的作用。
- en: Remember that a flag is applied to the whole expression.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，标志适用于整个表达式。
- en: yes-pattern|no-pattern
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: yes-pattern|no-pattern
- en: 'This is a very useful case of groups. It tries to match a pattern in case a
    previous one was found. On the other hand, it doesn''t try to match a pattern
    in case a previous group was not found. In short, it''s like an if-else statement.
    The syntax for this operation is as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这是组的一个非常有用的情况。它尝试在找到前一个的情况下匹配模式。另一方面，它不会在找不到前一个组的情况下尝试匹配模式。简而言之，它就像一个if-else语句。此操作的语法如下：
- en: '[PRE20]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This expression means: if the group with this ID has already been matched,
    then at this point of the string, the `yes-pattern` pattern has to match. If the
    group hasn''t been matched, then the `no-pattern` pattern has to match.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表达式的意思是：如果具有此ID的组已经匹配，那么在字符串的这一点，`yes-pattern`模式必须匹配。如果组尚未匹配，则`no-pattern`模式必须匹配。
- en: 'Let''s see how it works continuing with our trite example. We have a list of
    products, but in this case the ID can be made in two different ways:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续看看它是如何工作的。我们有一个产品列表，但在这种情况下，ID可以用两种不同的方式制作：
- en: 'The country code (two digits), a dash, three or four alphanumeric characters,
    a dash, and the area code (2 digits). For example: `34-adrl-01`.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家代码（两位数字），一个破折号，三个或四个字母数字字符，一个破折号，和区号（2位数字）。例如：`34-adrl-01`。
- en: 'Three or four alphanumeric characters. For example: `adrl`.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个或四个字母数字字符。例如：`adrl`。
- en: 'So, when there is a country code, we need to match the country area:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当有国家代码时，我们需要匹配国家地区：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'As you can see in the previous example, there is a match when we have a country
    code and area code. Note that when there is a country code but no area code, there
    is no match:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的例子中所看到的，当我们有国家代码和区号时，就会有匹配。请注意，当有国家代码但没有区号时，就没有匹配：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'And what''s `no-pattern` for? Let''s add another constraint to the previous
    example: if there is no country code there has to be a name at the end of the
    string:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`no-pattern`是用来做什么的？让我们在前面的例子中添加另一个约束：如果没有国家代码，字符串的末尾必须有一个名字：'
- en: 'The country code (2 digits), a dash, three or four alphanumeric characters,
    a dash, and the area code (2 digits). For example: `34-adrl-01`'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国家代码（2位数字），一个破折号，三个或四个字母数字字符，一个破折号，和区号（2位数字）。例如：`34-adrl-01`
- en: 'Three or four alphanumeric characters, followed by three or four characters.
    For example: `adrl-sala`.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三个或四个字母数字字符，后面跟着三个或四个字符。例如：`adrl-sala`。
- en: 'Let''s see it in action:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看它是如何运作的：
- en: '[PRE23]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As expected, if there is a country code and an area code, there is a match.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期的那样，如果有国家代码和区号，就会有匹配。
- en: '[PRE24]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding example, we do have a country area, but there is no area code,
    so there is no match.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们确实有国家地区，但没有区号，因此没有匹配。
- en: '[PRE25]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: And finally, when there is no country area, there must be a name, so we have
    a match.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，当没有国家地区时，必须有一个名字，所以我们有一个匹配。
- en: Note that `no-pattern` is optional, so in the first example, we've omitted it.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，`no-pattern`是可选的，因此在第一个例子中，我们省略了它。
- en: Overlapping groups
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重叠组
- en: 'Throughout [Chapter 2](ch02.html "Chapter 2. Regular Expressions with Python"),
    *Regular Expressions with Python*, we''ve seen several operations where there
    was a warning about overlapping groups: for example, the `findall` operation.
    This is something that seems to confuse a lot of people. So, let''s try to bring
    some clarity with a simple example:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章. 使用Python进行正则表达式")*使用Python进行正则表达式*中，我们看到了几个操作，其中有关重叠组的警告：例如，`findall`操作。这似乎让很多人感到困惑。因此，让我们尝试通过一个简单的例子来带来一些清晰度：
- en: '[PRE26]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: What's happening here? Why does the following expression give us `'a'` and `'a'`
    instead of `'aba'` and `'a'`?
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？为什么以下表达式给出了`'a'`和`'a'`而不是`'aba'`和`'a'`？
- en: 'Let''s look at it step by step to understand the solution:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地看看解决方案：
- en: '![Overlapping groups](graphics/3156OS_03_01.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![重叠组](graphics/3156OS_03_01.jpg)'
- en: Overlapping groups matching process
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 重叠组匹配过程
- en: 'As we can see in the preceding figure, the characters `aba` are matched, but
    the captured group is only formed by `a`. This is because even though our regex
    is grouping every character, it stays with the last `a`. Keep this in mind because
    it''s the key to understanding how it works. Stop for a moment and think about
    it, we''re requesting the regex engine to capture all the groups made up of `a`
    or `b`, but just for one of the characters and that''s the key. So, how can you
    capture the groups made of several `''a''` or `''b''` in any order? The following
    expression does the trick:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的图中看到的，字符`aba`被匹配，但捕获的组只由`a`组成。这是因为即使我们的正则表达式将每个字符分组，它仍然保留最后的`a`。请记住这一点，因为这是理解它如何工作的关键。停下来思考一下，我们要求正则表达式引擎捕获由`a`或`b`组成的所有组，但只对一个字符进行分组，这就是关键。那么，如何捕获由多个`'a'`或`'b'`组成的组，而且顺序无关呢？以下表达式可以实现：
- en: '[PRE27]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We're asking the regex engine to capture every group made up of the subexpression
    (`a|b`) and not to group just one character.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要求正则表达式引擎捕获由子表达式（`a|b`）组成的每个组，而不是仅对一个字符进行分组。
- en: 'One last thing on this— if we would want to obtain every group made of `a`
    or `b` with `findall`, we could write this simple expression:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一件事——如果我们想要用`findall`获得由`a`或`b`组成的每个组，我们可以写下这个简单的表达式：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this case, we're asking the regex engine to capture a group made of `a` or
    `b`. As we're using `findall`, we get every pattern matched, so we get four groups.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们要求正则表达式引擎捕获由`a`或`b`组成的组。由于我们使用了`findall`，我们得到了每个匹配的模式，所以我们得到了四个组。
- en: Tip
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Rule of Thumb**'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**经验法则**'
- en: It's better to keep regular expressions as simple as you can. So, you should
    begin with the simplest expression and then build more complex expressions step
    by step and not the other way around.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最好尽可能简化正则表达式。因此，你应该从最简单的表达式开始，然后逐步构建更复杂的表达式，而不是相反。
- en: Summary
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Don't allow the simplicity of the chapter to fool you, what we have learned
    throughout this chapter will be very useful in your day-to-day work with regex,
    and it'll give you a lot of leverage.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 不要让本章的简单性愚弄你，我们在本章学到的东西将在你日常使用正则表达式的工作中非常有用，并且会给你很大的优势。
- en: Let's summarize what we have learned so far. First, we have seen how a group
    can help us when we need to apply quantifiers to only some part of the expression.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下到目前为止我们学到的东西。首先，我们看到了当我们需要对表达式的某些部分应用量词时，组如何帮助我们。
- en: We have also learned how to use the captured groups in the pattern again or
    even in the replacement string in the `sub` operation, thanks to **backreferences**.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学会了如何再次在模式中使用捕获的组，甚至在`sub`操作中使用替换字符串，这要归功于**反向引用**。
- en: In this chapter, we have also viewed named groups, a tool for improving the
    readability and future maintenance of the regex.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们还查看了命名组，这是一种改进正则表达式可读性和未来维护的工具。
- en: Later on, we have learned to match a subexpression just in case a previous group
    exists or on the other hand, to match it when a previous group doesn't exist.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 后来，我们学会了只有在先前存在一个组的情况下才匹配子表达式，或者另一方面，只有在先前不存在一个组的情况下才匹配它。
- en: Now that we know how to use groups, it's time to learn a more complex subject
    very close to groups; look around!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道如何使用组，是时候学习一个与组非常接近的更复杂的主题了；四处看看吧！
