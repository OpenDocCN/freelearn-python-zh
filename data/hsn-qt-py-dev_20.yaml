- en: Completing the Application, Embedded Devices, and Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成应用程序、嵌入式设备和测试
- en: 'This chapter will complete this book. All of the main GUI elements that can
    be used at the start of development practice are described. Of course, the Qt
    library has more than 1,500 classes, and tools may vary depending on the GUI application
    tasks. However, the implementation principles are similar and the reader can implement
    them with ease. Within this book, we have created and demonstrated an application
    that provides the most useful functionality, and this chapter will pack this GUI
    app for presentation. We will also discuss mechanisms for realizing the GUI on
    the different devices and platforms and, where possible, without additional modifications.
    Qt currently supports the most popular and modern platforms and provides additional
    mechanisms for deploying the application with embedded devices. In addition, we
    will cover classes for implementing unit testing of Qt-based applications and
    libraries, using Qt library tools. This chapter will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将完成本书。描述了在开发初期可以使用的主要GUI元素。当然，Qt库有超过1,500个类，工具可能根据GUI应用任务的不同而有所变化。然而，实现原理是相似的，读者可以轻松实现它们。在本书中，我们创建并演示了一个提供最有用功能的应用程序，本章将打包这个GUI应用程序以供展示。我们还将讨论在不同设备和平台上实现GUI的机制，并在可能的情况下，无需额外修改。Qt目前支持最流行和最现代的平台，并为使用嵌入式设备部署应用程序提供了额外的机制。此外，我们将涵盖使用Qt库工具实现基于Qt的应用程序和库的单元测试的类。本章将涵盖以下主题：
- en: Completing the application
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成应用程序
- en: Embedded devices
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 嵌入式设备
- en: Tests
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试
- en: Completing the application
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成应用程序
- en: To complete the application, we need to run the `u_app.py` file and look at
    what sections/features are not completed. As we can see, some options in the top
    panel bar have not been completed, so let's do this.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成应用程序，我们需要运行`u_app.py`文件并查看哪些部分/功能尚未完成。正如我们所看到的，顶部面板栏中的一些选项尚未完成，所以让我们来完成这些。
- en: '![](img/4e90404c-b505-4b35-8664-720fbc51fd0f.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4e90404c-b505-4b35-8664-720fbc51fd0f.png)'
- en: In the preceding screenshot, we have `Edit`, `Options`, `Help` and `Visualization`
    options which will be constructed as we proceed in the chapter.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，我们看到了`Edit`、`Options`、`Help`和`Visualization`选项，这些选项将在本章的后续内容中构建。
- en: The Edit option
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编辑选项
- en: The `Edit` option in the top panel is usually used for editing some text in
    the text edit fields with simple operations such as undoing/redoing previous operations,
    cutting selected text from the text field, and copying and pasting to/from the
    buffer.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部面板中的`Edit`选项通常用于使用简单的操作（如撤销/重做之前的操作、从文本字段中剪切选定文本、复制和粘贴到/从缓冲区）编辑文本编辑字段中的某些文本。
- en: 'Some of the editing options are standard and replicate the option of the default
    popups, but we add the `Alignment` option with a sub-menu and font/color changing
    options for the text of the text edit field. First of all, open the `u_window.py`
    files and add/change the following lines:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 一些编辑选项是标准的，并复制了默认弹出窗口的选项，但我们添加了带有子菜单的`Alignment`选项以及文本编辑字段文本的字体/颜色更改选项。首先，打开`u_window.py`文件并添加/更改以下行：
- en: 'Add new options to the `Edit` menu and add a sub-menu, as follows:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`Edit`菜单添加新选项并添加一个子菜单，如下所示：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `"&Alignment"` option is added as a sub-menu of the `Edit` option. Options
    in terms of color and font of the selected text in the text field are also added.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 将`"&Alignment"`选项添加为`Edit`选项的子菜单。还添加了关于文本字段中选定文本的颜色和字体的选项。
- en: Now we need to make some additions/changes to the `UApp` class of the `u_app.py`
    files.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要对`u_app.py`文件中的`UApp`类进行一些添加/更改。
- en: 'Make some changes to the signals of the `UApp` class for the `Edit` option:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对`UApp`类的`Edit`选项的信号进行一些修改：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `Edit` option (`self.mb2`) will connect the `triggered()` signal to the
    `edit()` function, and the `Alignment` sub-menu option will connect to the `edit_align()`
    function.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`Edit`选项（`self.mb2`）将`triggered()`信号连接到`edit()`函数，而`Alignment`子菜单选项将连接到`edit_align()`函数。'
- en: 'Now add the `edit()` function to the `UApp` class, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将`edit()`函数添加到`UApp`类中，如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This function will operate with simple edit options and incorporate functionality
    for changing the font/color of the selected text in the text edit field.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将使用简单的编辑选项操作，并包含更改文本编辑字段中选定文本的字体/颜色的功能。
- en: 'Now add the `edit_align()` function to the `UApp` class, as follows:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将`edit_align()`函数添加到`UApp`类中，如下所示：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In connection with this option, the text alignment of the text edit field will
    be changed with the `Alignment` flag of the `Qt` namespace of the `QtCore` module.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 与此选项相关联，文本编辑字段的文本对齐将使用`QtCore`模块的`Qt`命名空间的`Alignment`标志进行更改。
- en: The Options option
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选项“选项”
- en: 'The next option is a `Run` sub-option. This can realize some functionality
    of the Python standard library in that part of script execution straight from
    the text edit field. This will demonstrate the essence of the Python interpreter
    very clearly. We will save the content of the text field to the file and run with
    it using the `subprocess` module. We will also realize another construction of
    the thread that was described previously. Let''s implement the following steps:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个选项是“运行”子选项。这可以在脚本执行部分的文本编辑字段中直接实现Python标准库的一些功能。这将非常清楚地展示Python解释器的本质。我们将把文本字段的内容保存到文件中，并使用`subprocess`模块运行它。我们还将实现之前描述的线程的另一种构建。让我们实施以下步骤：
- en: 'First of all, we need to add some lines to the `u_tools.py` files. Change the
    line of the `import` section by adding the `QObject` class as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要在`u_tools.py`文件中添加一些行。通过添加`QObject`类来更改`import`部分的行，如下所示：
- en: 'In the case of the PyQt5 `u_tools.py` file, add this line:'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_tools.py`文件的情况下，添加以下行：
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'And, in the case of the PySide2 `u_tools.py` file, add this line:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且，在PySide2的`u_tools.py`文件的情况下，添加以下行：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add the `RunThread` class that will realize the functionality:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将实现功能的`RunThread`类：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is a simple class that inherits the `QObject` class of the **`QtCore`**
    module. When the `on_run_code()` function is called, it will write to the file
    and run the file with a sub-process.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的类，继承自**`QtCore`**模块的`QObject`类。当`on_run_code()`函数被调用时，它将写入文件并使用子进程运行文件。
- en: 'Add the `run_code()` function to the `UTools` class of the `u_tools.py` files,
    as follows:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`run_code()`函数添加到`u_tools.py`文件的`UTools`类中，如下所示：
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This function, in relation to threads created previously, uses the `moveToThread()`
    method of the **`QObject`** class. It is important to note that we can see the
    need to start the `on_run_code()` function of the `RunThread` class using the `started()`
    signal of the thread.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与之前创建的线程相关联，使用`QObject`类的`moveToThread()`方法。重要的是要注意，我们可以看到需要使用线程的`started()`信号来启动`RunThread`类的`on_run_code()`函数。
- en: 'Now we can realize the option in the `UApp` class of the `u_app.py` files.
    We need to add to the `import` section of the `u_app.py` files, the standard library
    time module for working with time and data, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在`u_app.py`文件的`UApp`类中实现此选项。我们需要在`u_app.py`文件的`import`部分添加标准库的time模块，用于处理时间和数据，如下所示：
- en: 'Add the `time` module to the `u_app.py` files:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`time`模块添加到`u_app.py`文件中：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'And now, we can add the new option to the `options()` function of the `UApp`
    class:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以将新选项添加到`UApp`类的`options()`函数中：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this option, we disable the `"Run"` item in the top panel menu. Then, we
    retrieve the text from the text field, call the function of the `UTools` class
    from the `u_tools.py` files, and receive a tuple that contains threads and used
    classes. We create two nested functions that receive the signals. The first receives
    signals from the `RunThread` class, and the second from the thread with the `finished()`
    signal.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在此选项中，我们禁用了顶部面板菜单中的“运行”项。然后，我们从文本字段中检索文本，从`u_tools.py`文件中调用`UTools`类的函数，并接收一个包含线程和所用类的元组。我们创建了两个嵌套函数来接收信号。第一个接收来自`RunThread`类的信号，第二个接收具有`finished()`信号的线程的信号。
- en: The Configuration option
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置选项
- en: 'The `Configuration` item is optional and the reader can add their own favorite
    functionality. Using this option, we will provide some information about Python
    and its installed packages. For this, create the `u_widget.py` file in both the `App/App_PyQt5/`
    and `App/App_PySide2/` directories, and incorporate therein the widget that will
    be used for additional informative tasks in the application:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: “配置”项是可选的，读者可以添加他们自己的喜欢的功能。使用此选项，我们将提供有关Python及其已安装包的一些信息。为此，在`App/App_PyQt5/`和`App/App_PySide2/`目录中创建`u_widget.py`文件，并在其中包含用于应用程序中附加信息任务的控件：
- en: 'We need to add the following lines to the `import` section of this file:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要向此文件的`import`部分添加以下行：
- en: 'In the case of the PyQt5 `u_widget.py` file, add this:'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_widget.py`文件的情况下，添加以下内容：
- en: '[PRE10]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'And, in the case of the PySide2 `u_widget.py` file, add this:'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且，在PySide2的`u_widget.py`文件的情况下，添加以下内容：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The only difference entails the importing of the `QtWidgets` module.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一的区别是导入`QtWidgets`模块。
- en: 'Now add the `UWidget` class to these `u_widget.py` files, as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将 `UWidget` 类添加到这些 `u_widget.py` 文件中，如下所示：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The simple class for a widget to be used depends on tasks.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 用于小部件的简单类取决于任务。
- en: 'Now add the lines to the `u_app.py` files of the application:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将行添加到应用程序的 `u_app.py` 文件中：
- en: 'In the `import` section, add the line that will import the widget, as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `import` 部分，添加将导入小部件的行，如下所示：
- en: '[PRE13]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, add the option to the `options()` function of the `UApp` class that will
    show information about the version of Python used:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，向 `UApp` 类的 `options()` 函数添加选项，以显示有关使用的 Python 版本的信息：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Selecting this option will show the imported widget with the title of the window
    set. Add the items to the combobox with options to run commands with subprocesses
    of your choice. If Anaconda is installed and used with this application, the `conda`
    packages will be shown, or the Python packages can be checked using the `pip` option.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 选择此选项将显示带有窗口标题的导入小部件。将选项添加到组合框中，以便使用您选择的子进程运行命令。如果已安装并使用 Anaconda 与此应用程序，将显示
    `conda` 软件包，或者可以使用 `pip` 选项检查 Python 软件包。
- en: The Help option
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 帮助选项
- en: 'The next step that you need to complete is a `Help` option in the top panel.
    We will use some of the web functionality of the Qt library to demonstrate additional
    features. First, the `Online Help` sub-option will set HTML tags and then will
    load URLs. Let''s implement the following steps:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要完成的下一步是在顶部面板中添加一个 `Help` 选项。我们将使用 Qt 库的一些网页功能来演示附加功能。首先，`Online Help` 子选项将设置
    HTML 标签，然后加载 URL。让我们实现以下步骤：
- en: 'First of all, we need to add some lines to the `u_widget.py` files. In the
    `import` section, add the following line as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要向 `u_widget.py` 文件中添加一些行。在 `import` 部分，按照以下方式添加以下行：
- en: 'In the case of the PyQt5 `u_widget.py` file, add this:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PyQt5 的 `u_widget.py` 文件的情况下，添加以下内容：
- en: '[PRE15]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'And, in the case of the PySide2 `u_widget.py` file, add this:'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并且，在 PySide2 的 `u_widget.py` 文件的情况下，添加以下内容：
- en: '[PRE16]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The `QtWebEngineWidgets` module realizes web functionality in the Qt library
    by providing classes to represent content in the widget and additional settings.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtWebEngineWidgets` 模块通过提供表示小部件内容和附加设置的类，在 Qt 库中实现了网页功能。'
- en: 'Now we need to add the following lines to the `UWidget` class:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要向 `UWidget` 类添加以下行：
- en: '[PRE17]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Add the **`QWebEngineView`** with settings to the layout in the first position.
    Also, this renders this view invisible.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将带有设置的 `**QWebEngineView**` 添加到布局中的第一个位置。这也使此视图不可见。
- en: For the realization of the `Help` option in the application, we need to add
    the signal and function to the `UApp` class of the `u_app.py` files.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了在应用程序中实现 `Help` 选项，我们需要向 `u_app.py` 文件中的 `UApp` 类添加信号和函数。
- en: 'Add the signal to the `UApp` class, as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 向 `UApp` 类添加信号，如下所示：
- en: '[PRE18]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This signal will connect to the `on_help()` function when the `Help` option
    is selected. Now, we need to add the `on_help()` function to the `UApp` class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 此信号将在选择 `Help` 选项时连接到 `on_help()` 函数。现在，我们需要向 `UApp` 类添加 `on_help()` 函数。
- en: 'Add the `on_help()` function and the first `Online Help` option, as follows:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `on_help()` 函数和第一个 `Online Help` 选项，如下所示：
- en: '[PRE19]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This option selection will set HTML from the file and show the widget. The `help.html`
    file can be any created HTML file that represents a link to some helpful resources.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项选择将设置来自文件的 HTML 并显示小部件。`help.html` 文件可以是任何创建的 HTML 文件，它代表指向某些有用资源的链接。
- en: 'And now, complete the `on_help()` function by adding the `Documentation` option:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过添加 `Documentation` 选项来完成 `on_help()` 函数：
- en: '[PRE20]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This option will load URLs according to the combo box options selected and visualize
    these sources in the widget. These examples are use cases that we have not covered
    before, such as the web functionality of Qt, and it is recommended that you learn
    about these classes using the related documentation. Moreover, depending on the
    environment used, additional configurations and settings may be required.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将根据组合框中选择的选项加载 URL 并在控件中可视化这些来源。这些示例是我们之前没有涵盖的使用案例，例如 Qt 的网页功能，建议您使用相关文档了解这些类。此外，根据使用的环境，可能还需要额外的配置和设置。
- en: The `help.html` file can be found on the GitHub repository of this book at: [https://github.com/PacktPublishing/Hands-On-Qt-for-Python-Developers/tree/master/Chapter17/App/App_PyQt5](https://github.com/PacktPublishing/Hands-On-Qt-for-Python-Developers/tree/master/Chapter17/App/App_PyQt5).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 该 `help.html` 文件可以在本书的 GitHub 仓库中找到：[https://github.com/PacktPublishing/Hands-On-Qt-for-Python-Developers/tree/master/Chapter17/App/App_PyQt5](https://github.com/PacktPublishing/Hands-On-Qt-for-Python-Developers/tree/master/Chapter17/App/App_PyQt5)。
- en: The Visualization tab
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可视化标签页
- en: 'We will consolidate the material of this book by adding a simple example of
    the possibility of viewing the data used by the application and fill the `Visualization` tab
    component. This is a demonstration of data visualization and can be further improved
    at any time. To create this data visualization, we will use an existing CSV file
    and use the values from one of its columns. Let''s implement the following steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过添加一个查看应用程序使用的数据的可能性的简单示例来整合这本书的材料，并填充`Visualization`标签组件。这是一个数据可视化的演示，可以随时进一步改进。为了创建这个数据可视化，我们将使用一个现有的CSV文件，并使用其某一列的值。让我们实施以下步骤：
- en: 'Open the `u_tools.py` file and add the following lines after all the used classes
    with threading implementations:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`u_tools.py`文件，并在所有使用线程实现的类之后添加以下行：
- en: '[PRE21]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This  `PaintThread` class will realize the thread that will read data with pandas,
    transform the received data into a form that can interpret the position from these
    values, and emit these values for the realization on the graphical scene of the
    application.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`PaintThread`类将实现一个线程，该线程将使用pandas读取数据，将接收到的数据转换成可以从中解释位置的格式，并将这些值发出以在应用程序的图形场景上实现。
- en: 'Add the signal to the `UTools` class of the `u_tools.py` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将信号添加到`u_tools.py`文件中的`UTools`类：
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This signal will be used to emit data to the `PaintThread` class, such as width
    and height.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此信号将用于向`PaintThread`类发出数据，例如宽度和高度。
- en: 'Now, add the `draws()` function to the `UTools` class. This will manipulate
    and communicate with the `PaintThread` class:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`draws()`函数添加到`UTools`类中。这将操作并与`PaintThread`类通信：
- en: '[PRE23]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This function will start the thread and get it to draw on the graphics scene,
    while emitting data with the width and height that was retrieved from the `PaintThread` class.
    This construction of threading is similar to the previous constructions.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将启动线程，使其在图形场景上绘制，同时发出从`PaintThread`类检索到的宽度和高度的数据。这种线程的构建与之前的构建类似。
- en: 'Now, we need to open the `u_app.py` file and complete this task by adding some
    lines. Let''s add the scene, view, and painter to the `__init__()` function of
    the `UApp` class:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要打开`u_app.py`文件，通过添加一些行来完成此任务。让我们将场景、视图和画家添加到`UApp`类的`__init__()`函数中：
- en: '[PRE24]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will declare the graphics scene, graphics view, the painter that can be
    used, and will add a scene with a view to the second tab widget, and arrange these
    elements with a grid layout. We also need to change the calling function of the
    second push button signal connection.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这将声明图形场景、图形视图、可用的画家，并将一个带有视图的场景添加到第二个标签小部件中，并使用网格布局排列这些元素。我们还需要更改第二个按钮信号连接的调用函数。
- en: 'Now, add the `vis()` function to the `UApp` class:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将`vis()`函数添加到`UApp`类中：
- en: '[PRE25]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This function will set the second tab widget as the current tab widget. The
    geometry of the application will be changed to the desktop device’s available
    size. We will run this function to visualize data.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将设置第二个标签小部件为当前标签小部件。应用程序的几何形状将更改为桌面设备的可用大小。我们将运行此函数来可视化数据。
- en: 'Finally, add the `visualize()` function to the `UApp` class:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`visualize()`函数添加到`UApp`类中：
- en: '[PRE26]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This function will use the graphics view and graphics scene to visualize data
    on the tab widget. Lines will be added to the scene with the color specified in
    the pen, position, and height that have been interpreted from data values. On
    clicking the Ok, we can see the following result:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将使用图形视图和图形场景在标签小部件上可视化数据。将使用在笔中指定的颜色、位置和从数据值解释的高度在场景中添加线条。在点击“确定”后，我们可以看到以下结果：
- en: '![](img/e61983d1-ff6c-4652-b590-e3cea26518b2.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e61983d1-ff6c-4652-b590-e3cea26518b2.png)'
- en: Since we only have linear data, the visualization will be somewhat ordinary,
    but, if some data is to be used with various values and not in such a linear form,
    we will get a different result.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们只有线性数据，可视化将相对普通，但如果某些数据要使用各种值而不是这种线性形式，我们将得到不同的结果。
- en: Deploying to embedded devices
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署到嵌入式设备
- en: 'The Qt library provides a varied toolset that supports the realization of the
    GUI application with most modern platforms and embedded devices. For example,
    on Linux systems, we can easily create the desktop file and start this file, if
    necessary, to run the application from the desktop workplace or any favorite folder.
    The `uapp.desktop` file looks like the following example, which realizes desktop
    entry for the application:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 库提供了一套丰富的工具集，支持在大多数现代平台和嵌入式设备上实现 GUI 应用程序。例如，在 Linux 系统上，我们可以轻松创建桌面文件并启动此文件，如果需要，从桌面工作区或任何喜欢的文件夹中运行应用程序。`uapp.desktop`
    文件看起来像以下示例，它实现了应用程序的桌面入口：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: In terms of the binding used, PyQt5 can be changed to PySide2\. On Windows systems,
    this can be done (not so simply) by using third-party Python packages such as
    PyInstaller and py2exe, which convert Python scripts to executable (`.exe` files)
    and realize functionality accordingly. Also, the PyInstaller tool can be used
    for macOS X systems. It is recommended that you become familiar with the documentation
    pertaining to PyInstaller by visiting [https://pythonhosted.org/PyInstaller/](https://pythonhosted.org/PyInstaller/).
    These tools provide simple operations to create the executable quickly and easily.
    Another case involves deploying applications to mobile devices. The tools and
    libraries that can help to do this are usually available under a commercial license
    and, actually, PyQt and PySide bindings are not so well suited to these tasks.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在绑定使用方面，PyQt5 可以更改为 PySide2。在 Windows 系统上，这可以通过使用第三方 Python 包（如 PyInstaller
    和 py2exe）来实现，这些包将 Python 脚本转换为可执行文件（`.exe` 文件）并相应地实现功能。此外，PyInstaller 工具也可以用于
    macOS X 系统。建议您通过访问 [https://pythonhosted.org/PyInstaller/](https://pythonhosted.org/PyInstaller/)
    了解 PyInstaller 相关文档。这些工具提供简单的操作，以便快速轻松地创建可执行文件。另一种情况是部署应用程序到移动设备。可以帮助完成这些任务的工具和库通常在商业许可下提供，实际上，PyQt
    和 PySide 绑定并不非常适合这些任务。
- en: A better way to realize mobile versions of the application is to use the Kivy
    framework, the Toga cross-platform GUI toolkit, and so on, which specialize in
    mobile development. The official Qt source provides embedded tooling and solutions
    under a commercial license that help to build and deploy Qt GUI applications with
    Android and iOS mobile platforms. The QML-based applications can easily be implemented
    with Qt, incidentally, along the lines of the example provided in the [Chapter
    1](9de812dc-9446-4955-8437-4aebb2d991b3.xhtml), *Introduction to Python and Qt*.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 实现应用程序移动版本的一个更好的方法是使用 Kivy 框架、Toga 跨平台 GUI 工具包等，这些框架专门从事移动开发。官方 Qt 源代码在商业许可下提供嵌入式工具和解决方案，有助于在
    Android 和 iOS 移动平台上构建和部署 Qt GUI 应用程序。顺便提一下，基于 QML 的应用程序可以很容易地使用 Qt 实现，例如在 [第 1
    章](9de812dc-9446-4955-8437-4aebb2d991b3.xhtml) “Python 和 Qt 简介”中提供的示例。
- en: 'The source at [https://www.riverbankcomputing.com](https://www.riverbankcomputing.com) provides
    mobile solutions with the `pyqtdeploy` library for PyQt5 GUIs accordingly. This
    realizes deployment of the PyQt5 application on the iOS and Android platforms.
    The `pyqtdeploy` library is realized in order to convert the Python GUI application,
    the Python interpreter, the Python standard library, Python C extensions, and
    third-party extensions and packages, to the single, target-specific executable
    that can be run with most popular desktop and mobile platforms. The `pyqtdeploy`
    mechanism is released under the BSD license and will be demonstrated in detail. To
    use it, we need to install this package with `pip` on the Python installation
    that contains the PyQt5 binding:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.riverbankcomputing.com](https://www.riverbankcomputing.com) 提供了带有
    `pyqtdeploy` 库的 PyQt5 GUI 移动解决方案。这实现了 PyQt5 应用程序在 iOS 和 Android 平台上的部署。`pyqtdeploy`
    库是为了将 Python GUI 应用程序、Python 解释器、Python 标准库、Python C 扩展和第三方扩展和包转换为单一、针对特定目标的可执行文件，该文件可以在大多数流行的桌面和移动平台上运行。`pyqtdeploy`
    机制在 BSD 许可下发布，并将详细介绍。要使用它，我们需要在包含 PyQt5 绑定的 Python 安装上使用 `pip` 安装此包：'
- en: 'Install `pyqtdeploy` in Anaconda using the Python 3.x version and PyQt5 with
    `pip`, as follows:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 Python 3.x 版本和 PyQt5 通过 `pip` 在 Anaconda 中安装 `pyqtdeploy`，如下所示：
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Then, we need to create, for example, in the `App/` folder (optional), the
    `pyqtdeploy` project by typing these commands in the command line/Terminal:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在 `App/` 文件夹中（可选）创建 `pyqtdeploy` 项目，在命令行/Terminal 中输入以下命令：
- en: '[PRE29]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`pqtd`is the name of the project and `pqtd.pdy` is a file with this project.
    When hitting the *Enter* button, the `pyqtdeploy` GUI window will be displayed
    with the option to include the parameters required, such as the following:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`pqtd`是项目的名称，`pqtd.pdy`是这个项目的文件。当点击*Enter*按钮时，`pyqtdeploy` GUI窗口将显示，可以选择所需的参数，如下所示：'
- en: 'Name: The name of the application executable that will be created.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称：将要创建的应用程序可执行文件的名字。
- en: 'Main script file: The filename of the executable Python script file that will
    be used to invoke this application.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主脚本文件：将被用于调用此应用程序的可执行Python脚本文件的文件名。
- en: 'Entry point: The entry point of a Setuptools-based application that should
    not be specified if the main script file is specified.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 入口点：基于Setuptools的应用程序的入口点，如果指定了主脚本文件，则不需要指定。
- en: 'sys.path: Additional paths that will be used to specify additional directories
    for `sys.path`, such as application directories, ZIP files, and EGG. The list
    contains strings of paths, such as `[''/Path/to/the/App'', ''/path/to/the/App/App_PyQt5'',
    ''/path/to/the/App/App_PyQt5/qmls'', ...]`, and so on.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: sys.path：用于指定`sys.path`的附加路径，例如应用程序目录、ZIP文件和EGG。列表包含路径字符串，例如`['/Path/to/the/App',
    '/path/to/the/App/App_PyQt5', '/path/to/the/App/App_PyQt5/qmls', ...]`等等。
- en: 'Now we need to hit the Scan... button, select the `App/App_PyQt5/` directory,
    and push Include all. We will have the application directory trees similar to
    the following screenshot:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要点击Scan...按钮，选择`App/App_PyQt5/`目录，并点击Include all。我们将得到类似以下截图的应用程序目录树：
- en: '![](img/b299594d-87f5-4b0d-8b8f-2eb5ae60b042.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b299594d-87f5-4b0d-8b8f-2eb5ae60b042.png)'
- en: 'Uncheck the `data` folder of this tree. Then, we need to define the PyQt5 modules
    that will be used. For this, select the ***PyQt Modules*** tab and choose modules
    that were used in the application, similar to the following:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 取消勾选此树中的`data`文件夹。然后，我们需要定义将要使用的PyQt5模块。为此，选择***PyQt Modules***标签并选择在应用程序中使用过的模块，类似于以下内容：
- en: '![](img/5c12dc17-e7e2-4746-b83a-7d02935e38f4.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5c12dc17-e7e2-4746-b83a-7d02935e38f4.png)'
- en: 'Some of them are selected by hints, and this is easy to do. Go to the Standard
    Library tab and select all the Python standard library modules and packages that
    will be used, as shown in the following screenshot:'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 其中一些是通过提示选择的，这很容易做到。转到Standard Library标签并选择所有将要使用的Python标准库模块和包，如图所示：
- en: '![](img/5ed21215-ee72-40c9-aabf-c313482aa76b.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5ed21215-ee72-40c9-aabf-c313482aa76b.png)'
- en: We can choose all and uncheck the `sysconfig` module.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以选择全部并取消勾选`sysconfig`模块。
- en: 'Then, go to the Other Packages tab and select all the additional packages that
    are required for the application. As we recall, there are `pymysql`, `couchdb`,
    and so on. For this, click on the top of the Packages Directory section, open
    the directory that will be scanned for packages (usually, this is `/Path/to/the/installed/Python/site-packages`),
    look at the ones available, and select what is needed. Then, hit Scan, and all
    packages of the `site-packages/directory` will be shown. We need to select the
    packages that were used, such as `pandas`, `pymysql`, `psycopg2`, `pymongo`, and
    `couchdb`:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，转到Other Packages标签并选择应用程序所需的附加包。正如我们回忆的那样，有`pymysql`、`couchdb`等。为此，点击Packages
    Directory部分顶部，打开将扫描包的目录（通常，这是`/Path/to/the/installed/Python/site-packages`），查看可用的包，并选择所需的包。然后，点击Scan，`site-packages/directory`的所有包都将显示出来。我们需要选择使用的包，如`pandas`、`pymysql`、`psycopg2`、`pymongo`和`couchdb`：
- en: '![](img/0c72d238-6eee-4263-8760-23faf3157e9b.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0c72d238-6eee-4263-8760-23faf3157e9b.png)'
- en: 'In the Locations tab, we will configure the host and target Python locations
    similar to the following:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在位置标签中，我们将配置主机和目标Python位置，类似于以下内容：
- en: '![](img/ef8b3120-83a5-45f3-a98e-94afb2d05faa.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ef8b3120-83a5-45f3-a98e-94afb2d05faa.png)'
- en: Your paths will be relative to the installed Python interpreter directories.
    And now, we need to save previous operations to the XML document by clicking the
    Save option of the File menu. This file will be saved to the `App/` folder with
    the name `pqtd.pdy`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 您的路径将与已安装的Python解释器目录相关。现在，我们需要通过点击文件菜单中的Save选项来保存之前的操作到XML文档。此文件将保存到`App/`文件夹，文件名为`pqtd.pdy`。
- en: 'So, now that the features are selected and saved, we need to build this project
    using commands in the cmd/Terminal as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，现在特征已经选择并保存，我们需要使用cmd/Terminal中的命令来构建此项目，如下所示：
- en: '[PRE30]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The architectures that can be used with the `--target` option are the `android-32`,
    `android-64`, `ios-64`, `linux-64`, `macos-64`, `win-32`, and `win-64` platforms.
    Now the generated package can be used for further deployment with different platforms.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 可以与`--target`选项一起使用的架构有`android-32`、`android-64`、`ios-64`、`linux-64`、`macos-64`、`win-32`和`win-64`平台。现在生成的包可以用于在不同平台上进一步部署。
- en: Tests
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试
- en: Any completed application requires testing of the working parts and components
    inside. In this section, we will cover unit testing of the created application
    with Qt's library instruments, such as the **`QtTest`** module. In addition, this
    module allows extensions for testing GUIs. The Python standard library unit testing
    framework, `unittest`, or third-party tools, such as `pytest`, can also be used.
    In the real world of testing, the `unittest` module is usually used in conjunction
    with the **`QtTest`** module. The **`QSignalSpy`** class of PyQt5's **`QtTest`**
    module introspects the emissions of the signals.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 任何完成的应用程序都需要测试其内部的工作部分和组件。在本节中，我们将介绍使用Qt库工具（如**`QtTest`**模块）创建的应用程序的单元测试。此外，此模块还允许对GUI进行测试扩展。Python标准库单元测试框架`unittest`或第三方工具，如`pytest`，也可以使用。在实际测试中，通常将`unittest`模块与**`QtTest`**模块结合使用。PyQt5的**`QSignalSpy`**类可以内省信号的发射。
- en: QtTest
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QtTest
- en: 'This module provides a realization of the unit testing of Qt applications and
    libraries. To use this module, we need to add the following import statements
    to the files where testing functions will be used. The best way is to create the
    `u_tests.py` files in both the `App/App_PyQt5/` and `App/App_PySide2/` directories
    of the applications and add the `import` sections, respectively, as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了Qt应用程序和库的单元测试实现。要使用此模块，我们需要将以下导入语句添加到将使用测试函数的文件中。最佳做法是在应用程序的`App/App_PyQt5/`和`App/App_PySide2/`目录中创建`u_tests.py`文件，并分别添加以下`import`部分，如下所示：
- en: 'In the case of the PyQt5 `u_tests.py` file, add this:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_tests.py`文件中，添加以下内容：
- en: '[PRE31]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'And, in the case of the PySide2 `u_tests.py` file, add this:'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PySide2的`u_tests.py`文件中，添加以下内容：
- en: '[PRE32]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `QtTest` module provides the `QTest` class that can be used for the unit
    testing of the application. It should be noted that the PySide2 `QTest` namespace
    and the PyQt5 `QTest` class are different. The `QTest` namespace of the PySide2
    binding realizes functions and declarations of the framework for unit testing
    Qt-based applications and libraries with extensions for GUIs. The PyQt5's `QTest`
    class does not implement the complete Qt unit test framework and assumes that
    Python's `stdlib` `unittest` module will be used with `QTest`. Therefore, PyQt5's
    `QTest` cannot be instantiated.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtTest`模块提供了`QTest`类，可用于应用程序的单元测试。需要注意的是，PySide2的`QTest`命名空间和PyQt5的`QTest`类是不同的。PySide2的`QTest`命名空间实现了用于单元测试基于Qt的应用程序和库的框架功能，并扩展了GUI。PyQt5的`QTest`类没有实现完整的Qt单元测试框架，并假设将使用Python的`stdlib`
    `unittest`模块与`QTest`一起使用。因此，PyQt5的`QTest`不能实例化。'
- en: QTest (PySide2)
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTest (PySide2)
- en: 'This namespace realizes the unit testing framework of the Qt library. The declaration
    syntax is as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 此命名空间实现了Qt库的单元测试框架。声明语法如下：
- en: '[PRE33]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `QTest` improves functionality by means of the following commonly used
    functions. A full list is available with the official PySide2 documentation ([https://doc.qt.io/qtforpython/PySide2/QtTest/index.html](https://doc.qt.io/qtforpython/PySide2/QtTest/index.html)):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`QTest`通过以下常用函数改进了功能。完整的列表可以在官方PySide2文档中找到（[https://doc.qt.io/qtforpython/PySide2/QtTest/index.html](https://doc.qt.io/qtforpython/PySide2/QtTest/index.html)）：'
- en: '`test.asciiToKey("ascii")`: This converts the ASCII character key value, specified
    in the parameter, to a Qt key value.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.asciiToKey("ascii")`: 将参数中指定的ASCII字符键值转换为Qt键值。'
- en: '`test.currentAppName()`: This returns the name of the currently executed binary.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.currentAppName()`: 返回当前执行的二进制文件名称。'
- en: '`test.currentDataTag()`: This returns the name of the current test data.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.currentDataTag()`: 返回当前测试数据名称。'
- en: '`test.currentTestFailed()`: This returns `True` if the test function failed.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.currentTestFailed()`: 如果测试函数失败，则返回`True`。'
- en: '`test.currentTestFunction()`: This returns the name of the current test function.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.currentTestFunction()`: 这将返回当前测试函数的名称。'
- en: '`test.ignoreMessage(QtMsgType, message)`: This ignores `qDebug()`, `qInfo()`,
    or `qWarning()` messages. In the instance when a message (the second parameter)
    of the global type (the first parameter) is returned in the output, it will be
    removed from the test log. If the test finishes and the message was not displayed
    in the output, it will be appended to the test log.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.ignoreMessage(QtMsgType, message)`: 这忽略 `qDebug()`、`qInfo()` 或 `qWarning()`
    消息。在全局类型（第一个参数）的消息（第二个参数）返回到输出时，它将从测试日志中删除。如果测试完成且消息未在输出中显示，它将被附加到测试日志中。'
- en: '`test.keyToAscii(key)`: This converts the Qt key value, specified in the parameter,
    to the ASCII character key value.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.keyToAscii(key)`: 这将参数中指定的 Qt 键值转换为 ASCII 字符键值。'
- en: '`test.qExtractTestData("dirName")`: This extracts a directory, specified in
    the parameter, from resources to disk.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.qExtractTestData("dirName")`: 这从资源中提取指定在参数中的目录到磁盘。'
- en: '`test.setBenchmarkResult(float, QTest.QBenchmarkMetric)`: This sets the benchmark
    result (the first parameter) with a metric (the second parameter) that specifies
    how the Qt test should interpret the results in relation to this test function.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.setBenchmarkResult(float, QTest.QBenchmarkMetric)`: 这设置基准结果（第一个参数），带有指标（第二个参数），该指标指定
    Qt 测试应该如何解释与该测试函数相关的结果。'
- en: '`test.toPrettyCString(str, int)`: This returns the same `QtCore.QByteArray`,
    but with only the ASCII characters.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.toPrettyCString(str, int)`: 这返回相同的 `QtCore.QByteArray`，但只包含 ASCII 字符。'
- en: QTest (PyQt5)
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTest (PyQt5)
- en: 'This class contains functions that enable unit testing of the PyQt5 applications.
    The `QTest` class improves functionality by means of the following commonly used
    functions. A full list is available with the official PyQt5 documentation ([https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/)):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '此类包含使 PyQt5 应用程序能够进行单元测试的函数。`QTest` 类通过以下常用函数提高了功能。完整的列表可以在官方 PyQt5 文档中找到 ([https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/)):'
- en: '`test.keyClick(QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: This simulates clicking a key (the second parameter) with a modifier (the
    third parameter) on a widget (the first parameter), with a test delay (the fourth
    parameter) in milliseconds.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.keyClick(QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: 这模拟在控件（第一个参数）上点击一个键（第二个参数），带有修饰符（第三个参数），并带有测试延迟（第四个参数）以毫秒为单位。'
- en: '`test.keyClicks(QtWidgets.QWidget, str, QtCore.Qt.KeyboardModifiers, int)`:
    This simulates clicking a sequence of keys (the second parameter) with a modifier
    (the third parameter) on a widget (the first parameter), with a test delay (the
    fourth parameter) in milliseconds.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.keyClicks(QtWidgets.QWidget, str, QtCore.Qt.KeyboardModifiers, int)`:
    这模拟在控件（第一个参数）上按下一个键序列（第二个参数），带有修饰符（第三个参数），并带有测试延迟（第四个参数）以毫秒为单位。'
- en: '`test.keyEvent(QtTest.QTest.KeyAction, QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: This sends a Qt key event to a widget (the second parameter) with a key
    (the third parameter) and associated action (the first parameter), as well as
    with a modifier (the fourth parameter), and a test delay (the fifth parameter)
    in milliseconds.'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.keyEvent(QtTest.QTest.KeyAction, QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: 这向控件（第二个参数）发送一个 Qt 键事件，带有键（第三个参数）和相关的动作（第一个参数），以及修饰符（第四个参数），以及测试延迟（第五个参数）以毫秒为单位。'
- en: '`test.keyPress(QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: This simulates pressing a key (the second parameter) with a modifier (the
    third parameter) on a widget (the first parameter), with a test delay (the fourth
    parameter) in milliseconds.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.keyPress(QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: 这模拟在控件（第一个参数）上按下一个键（第二个参数），带有修饰符（第三个参数），并带有测试延迟（第四个参数）以毫秒为单位。'
- en: '`test.keyRelease(QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: This simulates releasing a key (the second parameter) with a modifier (the
    third parameter) on a widget (the first parameter), with a test delay (the fourth
    parameter) in milliseconds.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.keyRelease(QtWidgets.QWidget, QtCore.Qt.Key, QtCore.Qt.KeyboardModifiers,
    int)`: 这模拟在控件（第一个参数）上释放一个键（第二个参数），带有修饰符（第三个参数），并带有测试延迟（第四个参数）以毫秒为单位。'
- en: '`test.mouseClick(QtWidgets.QWidget, QtCore.Qt.MouseButton, QtCore.Qt.KeyboardModifiers,
    QtCore.QPoint, int)`: This simulates clicking a mouse button (the second parameter)
    with a modifier (the third parameter) on a widget (the first parameter), with
    a test delay (the fifth parameter) in milliseconds. The position of the click
    (the fourth parameter), by default, is the center of the widget.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.mouseClick(QtWidgets.QWidget, QtCore.Qt.MouseButton, QtCore.Qt.KeyboardModifiers,
    QtCore.QPoint, int)`: 这模拟了在控件（第一个参数）上使用修饰符（第三个参数）点击鼠标按钮（第二个参数），并带有测试延迟（第五个参数）以毫秒为单位。点击的位置（第四个参数），默认情况下，是控件的中心。'
- en: '`test.mouseDClick(QtWidgets.QWidget, QtCore.Qt.MouseButton, QtCore.Qt.KeyboardModifiers,
    QtCore.QPoint, int)`: This simulates double-clicking a mouse button (the second
    parameter) with a modifier (the third parameter) on a widget (the first parameter),
    with a test delay (the fifth parameter) in milliseconds. The position (the fourth
    parameter), by default, is the center of the widget.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.mouseDClick(QtWidgets.QWidget, QtCore.Qt.MouseButton, QtCore.Qt.KeyboardModifiers,
    QtCore.QPoint, int)`: 这模拟了在控件（第一个参数）上使用修饰符（第三个参数）双击鼠标按钮（第二个参数），并带有测试延迟（第五个参数）以毫秒为单位。默认情况下，位置（第四个参数）是控件的中心。'
- en: '`test.mouseMove(QtWidgets.QWidget, QtCore.QPoint, int)`: This moves the mouse
    pointer to a widget (the first parameter), with a test delay (the fifth parameter)
    in milliseconds. It will be moved to a position (the fourth parameter), by default,
    to the center of the widget.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.mouseMove(QtWidgets.QWidget, QtCore.QPoint, int)`: 这将鼠标指针移动到控件（第一个参数），带有测试延迟（第五个参数）以毫秒为单位。它将被移动到位置（第四个参数），默认情况下，是控件的中心。'
- en: '`test.mouseRelease(QtWidgets.QWidget, QtCore.Qt.MouseButton, QtCore.Qt.KeyboardModifiers,
    QtCore.QPoint, int)`: This simulates releasing a mouse button (the second parameter)
    with a modifier (the third parameter) on a widget (the first parameter), with
    a test delay (the fifth parameter) in milliseconds. The position (the fourth parameter),
    by default, is the center of the widget.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.mouseRelease(QtWidgets.QWidget, QtCore.Qt.MouseButton, QtCore.Qt.KeyboardModifiers,
    QtCore.QPoint, int)`: 这模拟了在控件（第一个参数）上使用修饰符（第三个参数）释放鼠标按钮（第二个参数），并带有测试延迟（第五个参数）以毫秒为单位。默认情况下，位置（第四个参数）是控件的中心。'
- en: '`test.qSleep(int)`: This sleeps for a number of milliseconds, specified in
    the parameter, blocking execution of this test.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.qSleep(int)`: 这将暂停一定数量的毫秒，由参数指定，阻塞此测试的执行。'
- en: '`test.qWait(int)`: This waits for a number of milliseconds, specified in the
    parameter; the events will be processed and this test will stay responsive to
    events.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.qWait(int)`: 这等待一定数量的毫秒，由参数指定；事件将被处理，并且此测试将保持对事件的响应。'
- en: '`test.qWaitForWindowActive(QtWidgets.QWidget, int)`: This waits for a number
    of milliseconds (the second parameter) until the widget''s window (the first parameter)
    is active.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.qWaitForWindowActive(QtWidgets.QWidget, int)`: 这等待一定数量的毫秒（第二个参数），直到控件的窗口（第一个参数）变得活跃。'
- en: '`test.qWaitForWindowExposed(QtWidgets.QWidget, int)`: This waits for a number
    of milliseconds (the second parameter) until the widget''s window (the first parameter)
    is exposed.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.qWaitForWindowExposed(QtWidgets.QWidget, int)`: 这等待一定数量的毫秒（第二个参数），直到控件的窗口（第一个参数）被暴露。'
- en: '`test.touchEvent(QtWidgets.QWidget, QtGui.QTouchDevice)`: This creates and
    returns a sequence of the  `QtTest.QTest.QTouchEventSequence` type for the device
    (the second parameter) to simulate events for the widget (the first parameter).'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`test.touchEvent(QtWidgets.QWidget, QtGui.QTouchDevice)`: 这为设备（第二个参数）创建并返回一个`QtTest.QTest.QTouchEventSequence`类型的序列，以模拟控件（第一个参数）的事件。'
- en: QTest examples
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QTest示例
- en: 'As we can see, the PyQt5 binding realizes just a part of the Qt test framework.
    The tests of the GUI app can be demonstrated with PyQt5-related construction of
    the simple example, which can also be used with the PySide2 binding. It should
    be noted that the methods described in the *QTest (PyQt5)* section are available
    for the PySide2 binding. By way of a simple example, add the following lines to
    the `import` sections of the `u_tests.py` files:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，PyQt5绑定仅实现了Qt测试框架的一部分。GUI应用的测试可以通过PyQt5相关的简单示例构建来演示，这也可以与PySide2绑定一起使用。需要注意的是，*QTest
    (PyQt5)*部分中描述的方法对PySide2绑定也是可用的。通过一个简单的示例，将以下行添加到`u_tests.py`文件的`import`部分：
- en: 'In the case of the PyQt5 `u_tests.py` file, add this:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_tests.py`文件中，添加以下内容：
- en: '[PRE34]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'And, in the case of the PySide2 `u_tests.py` file, add this:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PySide2的`u_tests.py`文件中，添加以下内容：
- en: '[PRE35]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The test element will be elements of the `UWindow` class that realizes the application
    window of the GUI. We can add any widget to this import line.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 测试元素将是实现GUI应用程序窗口的`UWindow`类的元素。我们可以在这一行添加任何小部件。
- en: Now add to the `u_tests.py` files the class that inherits the `TestCase` base class
    of the Python standard library `unittest` module.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将继承Python标准库`unittest`模块的`TestCase`基类的类添加到`u_tests.py`文件中。
- en: 'Add the `UTests` class to the `u_tests.py` files by completing the file with
    the line that will call the `main()` function of the `unittest` module:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 将`UTests`类添加到`u_tests.py`文件中，通过在文件中添加调用`unittest`模块的`main()`函数的行来完成文件：
- en: '[PRE36]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The `setUp()` method operates with instances that are required to start the
    test, such as application, the class instance of the imported `UWindow` class,
    and the window menu bar. The `test_menu()` function realizes this test and completes
    it with `tear_down()`.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`setUp()`方法使用启动测试所需的实例操作，例如应用程序、导入的`UWindow`类的类实例以及窗口菜单栏。`test_menu()`函数实现并完成这个测试，通过`tearDown()`。'
- en: 'Now we can run the `u_tests.py` files in the cmd/Terminal by typing the following
    command:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们可以在cmd/Terminal中通过输入以下命令来运行`u_tests.py`文件：
- en: '[PRE37]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'And we will see output similar to the following:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看到类似以下的输出：
- en: '![](img/c3b47eff-7d52-4c81-877d-cf35eb5d7aa8.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c3b47eff-7d52-4c81-877d-cf35eb5d7aa8.png)'
- en: We can test any widget in this way, and enhance the current construction depending
    on our own tasks.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用这种方式测试任何小部件，并根据我们的任务增强当前的结构。
- en: Summary
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter completes the GUI application that we created within this book.
    This application does not pretend to be a special tool to solve special tasks,
    but it can be easily extended and modernized for almost all GUI implementations
    commonly used today. Almost all of the useful graphical elements were described
    previously in this book. The process of deploying the GUI to the various platforms
    and architectures is not easy, and requires additional knowledge of the material
    and examples. Also, some restrictions may arise, depending on the versions and
    supported environments of the device. Hence, learning the requirements related
    to using the devices is recommended. Testing the application requires a thorough
    understanding of the elements that can be tested, and why, and how. Correct implementation
    of the tests can help to avoid a lot of the mistakes and errors associated with
    application development.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了本书中创建的GUI应用程序。这个应用程序并不假装是解决特殊任务的专用工具，但它可以很容易地扩展和现代化，适用于今天几乎所有常用的GUI实现。本书之前已经描述了几乎所有有用的图形元素。将GUI部署到各种平台和架构的过程并不容易，需要额外的材料和示例知识。也可能出现一些限制，这取决于设备的版本和支持的环境。因此，建议学习与使用设备相关的需求。测试应用程序需要彻底理解可以测试的元素、为什么以及如何测试。正确实施测试可以帮助避免与应用程序开发相关的大量错误和错误。
- en: This chapter completes this book, and the reader must know what to learn next.
    Moreover, the Python world is so very vast.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了这本书的内容，读者必须知道接下来要学习什么。此外，Python的世界非常广阔。
