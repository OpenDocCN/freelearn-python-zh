- en: The Software Development Life Cycle
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发生命周期
- en: All software development, Python or otherwise, above a certain level of complexity
    follows repeatable patterns, or has a life cycle. A **Software** (or **System**)
    **Development Life-Cycle** (**SDLC**) might be used as its own distinct development
    methodology, providing a set of tasks and activities that apply to the development
    process. That is, even if there is no formal process wrapped around an SDLC, any
    or all of the activities that go on through one may still take place, and any
    or all of the artifacts that come out of them may be available during the development
    of a project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 所有软件开发，包括Python或其他语言，都遵循可重复的模式，或者有一个生命周期。软件（或系统）开发生命周期（SDLC）可以作为自己独特的开发方法论，提供适用于开发过程的一系列任务和活动。也就是说，即使没有正式的SDLC包裹着一个开发过程，任何或所有通过SDLC进行的活动仍然可能发生，并且其中产生的任何或所有工件可能在项目开发过程中可用。
- en: From the perspective of the actual development, not all of the artifacts resulting
    from an SDLC, formal or otherwise, may be significantly useful, either, particularly
    those coming out of the first few phases of the life cycle's process. Even so,
    the more knowledge that is available during the development process, the less
    likely it is that development efforts will go in directions that run contrary
    to the intentions of the system on a longer-term basis.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 从实际发展的角度来看，无论是正式的还是非正式的软件开发生命周期（SDLC）产生的所有工件，可能都不会特别有用，特别是那些在生命周期过程的最初几个阶段产生的工件。即便如此，在开发过程中获得的知识越多，开发工作就越不太可能朝着与系统长期意图相悖的方向发展。
- en: 'In order to fully explore what an SDLC might provide, we''ll use one of the
    more detailed ones that can be found on the internet. It breaks the life cycle
    down into ten phases, which would be executed in the following order, barring
    process alterations from a development methodology:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分探索SDLC可能提供的内容，我们将使用互联网上可以找到的更详细的SDLC之一。它将生命周期分解为十个阶段，按照以下顺序执行，除非开发方法论进行了流程调整：
- en: Initial concept/vision
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始概念/愿景
- en: Concept development
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 概念开发
- en: Project management planning
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目管理规划
- en: Requirements analysis and definition
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求分析和定义
- en: System architecture and design
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统架构和设计
- en: Development (writing code) and quality assurance
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发（编写代码）和质量保证
- en: System integration, testing, and acceptance
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统集成、测试和验收
- en: Implementation/installation/distribution
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实施/安装/分发
- en: Operations/use and maintenance
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作/使用和维护
- en: Decommissioning
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 退役
- en: Many of these individual phases can be merged together, or might be broken out
    into smaller sub-phases, but this breakdown—these ten phases—is a useful grouping
    of similar activities with similar scopes.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多这些单独的阶段可以合并在一起，或者可以分解成更小的子阶段，但是这种分解——这十个阶段——是一组具有相似范围的相似活动的有用分组。
- en: The first three phases may all occur before any code is written, defining the
    high-level concepts and goals, and planning for how to accomplish those goals.
    The last three generally happen after code is complete, though as new features
    are thought of, or as bugs surface, code development may restart to address those
    items. The balance, phases 4 through 7, are loosely classifiable as **d****uring
    development**, though, except for the actual writing of code in phase 6, that
    classification may depend on what development processes or methodologies are in
    play, something that is likely decided during phase 3 if it isn't already determined
    by external policies or forces.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 前三个阶段可能都发生在编写任何代码之前，定义高层概念和目标，并计划如何实现这些目标。最后三个通常发生在代码完成后，尽管随着新功能的想法或错误的出现，代码开发可能会重新启动以解决这些问题。平衡的4到7阶段，大致可分类为**开发过程**，尽管除了第6阶段的实际编写代码之外，这种分类可能取决于正在进行的开发过程或方法论，这可能在第3阶段决定，如果没有由外部政策或力量决定的话。
- en: Different software development methodologies (Agile ones in particular) may
    well address these in more of an on-demand manner, grouping phase activities iteration
    by iteration, story by story, or out of the sequence they are listed in here.
    A deeper exploration of these variations can be found in [Chapter 4](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=28&action=edit), *Methodologies,
    Paradigms, and Practices.*
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的软件开发方法论（特别是敏捷方法）可能更多地以按需方式处理这些问题，通过迭代或故事的方式分组阶段活动，或者按照这里列出的顺序进行。这些变化的更深入探讨可以在[第4章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=28&action=edit)中找到，*方法论、范式和实践*。
- en: Pre-development phases of the SDLC
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SDLC的预开发阶段
- en: Before the first line of code is written, there is the potential for a fair
    amount of thought and work going into a project. Not all of the work is going
    to be visible by the time development starts, and, realistically, not all of what
    could be produced pre-development will be, in many cases. Even those artifacts
    that are created may not have any formal structure or documentation around them,
    or may not be as complete or detailed as might be desired. Despite all of that,
    knowing what might be available that is of use or interest during development
    can at least help answer questions that can arise during the actual writing-of-code
    portion of a system/project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写第一行代码之前，项目可能需要进行大量的思考和工作。在开发开始时，不是所有的工作都会被看到，而且实际上，在许多情况下，可能不会产生所有可能的预开发工作。即使创建了这些工件，它们可能没有任何正式的结构或文档，或者可能不像所期望的那样完整或详细。尽管如此，了解在开发过程中可能可用的有用或有趣的内容，至少可以帮助回答在实际编写代码部分出现的问题。
- en: Initial concept/vision
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始概念/愿景
- en: The very first thing that happens in a project's or system's life is its conception.
    Behind the scenes, that usually involves the recognition of some unfulfilled need,
    or something that isn't working the way it should, though other variations might
    occur as well. As part of that realization, there will frequently be a collection
    of capabilities that the conceived system will provide, benefits or functionality
    that will drive the system's development, and determine when that development
    is complete. At this initial, very high-level overview, there may not be much
    in the way of detail—we need a better way to manage inventory, maybe for the entire
    vision, for example—but it's possible that more detail will enter the picture,
    too.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 项目或系统生命周期中的第一件事通常是其构想。在幕后，这通常涉及对某种未满足的需求的认识，或者某些东西不按预期运行，尽管也可能出现其他变化。作为这种认识的一部分，通常会有一系列构想系统将提供的功能、好处或功能，这将推动系统的开发，并确定开发何时完成。在这个最初的、非常高层次的概述中，可能没有太多细节——我们需要更好的库存管理方式，也许是整个愿景，例如——但也可能会出现更多细节。
- en: 'The concept and the benefits might come from anyone with a stake in the system:
    business staff who are looking for a better way of doing things, developers who
    perhaps recognize that an existing system isn''t as effective as it could be,
    or maybe that it''s difficult to maintain. System administrators might have concerns
    about how easily managed an in-place system is and want a newer, better approach
    taken, or the initial vision might be for something completely new, at least in
    the context of the business setting—we need a way to keep track of fuel efficiency
    across our delivery truck fleet, maybe. What about if our customers could order
    our products online?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 概念和好处可能来自于系统利益相关者：寻求更好工作方式的业务人员，也许意识到现有系统并不如预期那样有效的开发人员，或者难以维护。系统管理员可能担心现有系统的管理难度，并希望采取一种更新、更好的方法，或者最初的愿景可能是完全新的，至少在业务环境中是这样——我们需要一种方式来跟踪交付卡车车队的燃油效率，也许我们的客户可以在线订购我们的产品？
- en: Hopefully, if off-the-shelf solutions or products are available that meet parts
    of these needs, those options will have been investigated in some detail—maybe
    even to the point where the vision owner would be able to point to some feature
    set(s) of those products and say, "We want something like this." Having examples
    of functionality that's close to what's actually wanted can be a significant time-saver
    during pre-development design and development alike, and it's almost always worth
    asking if there are examples of what's wanted as the design and development processes
    move along. If that sort of investigation was undertaken and no options were found
    that were even close, that, too, has useful information embedded in it—what was
    missing? What did product X do that wasn't meeting the needs in the concept? If
    no investigation was undertaken, or if nothing came out of an investigation, it's
    quite possible that the initial concept would be no more than a sentence or two.
    That's alright, though, since more detail will be extracted later on as the concept
    development gets underway.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 希望如果有现成的解决方案或产品可以满足这些需求的部分，那么这些选项将会被进行详细调查——甚至可能到达愿景所有者能够指出这些产品的某些功能集，并说：“我们想要类似的东西。”拥有接近实际需求的功能示例可以在预开发设计和开发过程中节省大量时间，几乎总是值得询问是否有所需功能的示例随着设计和开发过程的进行而出现。如果进行了这种调查，却没有找到任何接近的选项，那么其中也蕴含着有用的信息——缺少了什么？产品X做了什么不能满足概念中的需求？如果没有进行调查，或者调查没有结果，那么最初的概念很可能只是一两句话。不过，这没关系，因为随着概念的开发，更多的细节将在后期提取出来。
- en: The "no investigation was undertaken" scenario, in the author's experience,
    happens more frequently than might be expected, particularly in businesses that
    are heavily invested in the development of their own products, or where there
    is a desire to own all the code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在作者的经验中，“没有进行调查”的情况发生的频率比预期的要高，特别是在那些大力投资于自己产品开发的企业，或者希望拥有所有代码的企业中。
- en: 'In more formal processes, other analyses may also take place, looking for things
    such as the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在更正式的流程中，可能还会进行其他分析，寻找以下内容：
- en: '**Specific user needs**: What users must be able to do within the system, and
    probably what they should be able to do. There may also be a collection of nice-to-have
    features—things that users would like to be able to do, but that are not a functional
    necessity.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定用户需求：系统内用户必须能够做什么，可能还有他们应该能够做什么。可能还有一系列好有的功能——用户希望能够做的事情，但并非功能上的必要性。
- en: '**Specific functional needs**: What problems the system needs to solve, or
    at least mitigate in a significant fashion.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具体功能需求：系统需要解决的问题，或者至少在重大程度上缓解的问题。
- en: '**Risks**: Usually business-process-related risks, but those may also serve
    to guide design and development in later phases.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险：通常是与业务流程相关的风险，但这些风险也可能在后期指导设计和开发。
- en: '**Costs**: Both in money and resources. Odds are that this information won''t
    yield much use from a development process perspective, but it''s not impossible
    for an occasional significant nugget of information to come out of this either.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 成本：无论是金钱还是资源。很可能这些信息从开发过程的角度来看并不会产生太多用处，但也不排除偶尔会有重要信息出现的可能。
- en: '**Operational feasibility**: Examining how well the conceptual system addresses
    the needs it''s been thought up to address. Like with cost analysis, the odds
    are good that there won''t be much that comes out of this that''s directly useful
    for development purposes, but it might identify operational or design areas where
    there is doubt about feasibility, and those doubts, in turn, may well shape design
    and/or implementation by the time the system is in development.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作可行性**：检查概念系统如何满足其被构想出来的需求。与成本分析一样，很可能不会有太多直接有用于开发目的的东西，但它可能会确定操作或设计领域存在可行性疑虑，并且这些疑虑可能会在系统开发时塑造设计和/或实施。'
- en: 'At best, then, given either a formal process, or sufficient attention to detail
    in an informal one, the initial concept might produce information or documentation
    about the following:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最好的情况是，无论是正式流程还是非正式流程中对细节的足够关注，初始概念可能会产生有关以下内容的信息或文档：
- en: 'Benefits or functionality expected from the system (usually at a high level,
    at least to start with):'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统预期的收益或功能（通常至少从高层次开始）
- en: A collection of specific, high-level functional needs
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列具体的高级功能需求
- en: A collection of specific user needs
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列具体的用户需求
- en: Specific features or functionality that were not provided by an off-the-shelf
    system (thus justifying custom development effort)
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未由现成系统提供的具体功能或功能（从而证明了定制开发的努力）
- en: Specific risks to mitigate against
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要减轻的具体风险
- en: Specific functional or feasibility concerns to address
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要解决的具体功能或可行性问题
- en: All of these have at least some value once development is underway and will
    hopefully make their way into design or requirements, and from there into development.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些在开发进行时都至少有一定价值，并希望它们能够融入设计或需求，然后进入开发。
- en: Concept development
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概念开发
- en: Concept development is concerned mostly with fleshing out some of the high-level
    details that come out of the initial concept, providing details and direction
    for efforts later in the life cycle. One of the more significant aspects of this
    step is the generation of various System Modeling artifacts—and there's enough
    involved in those efforts that they'll be covered in a separate chapter. The balance
    of the development-related information that comes out of this phase is probably
    focused more on marrying business processes and system functionality, and providing
    some detail around system goals. There is also room here for a definition of at
    least a basic user experience and/or user interface, especially as they connect
    to the process/functionality.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 概念开发主要关注于深化初始概念中出现的一些高级细节，为后续生命周期的努力提供细节和方向。这一步的更重要方面之一是生成各种系统建模工件，这些工作涉及的内容足够多，将在单独的章节中进行介绍。这一阶段产生的与开发相关的信息的平衡可能更多地集中在将业务流程与系统功能结合起来，并提供一些关于系统目标的细节。在这里还有空间至少定义基本的用户体验和/或用户界面，特别是它们与流程/功能的连接。
- en: Defining the business processes embedded in a system includes identifying the
    business objects that the system keeps track of, the actions that can be taken
    with respect to those objects, and the outcomes of those actions, at a minimum.
    Applying of the sort of questioning described earlier in [Chapter 1](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=25&action=edit),
    *Programming versus Software Engineering,* can yield a fair bit of that information,
    if more detail is needed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中嵌入的业务流程的定义包括识别系统跟踪的业务对象，可以针对这些对象采取的行动以及这些行动的结果，至少是这样。如果需要更多细节，可以应用前面描述的那种质疑，[第1章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=25&action=edit)，*编程与软件工程*中可以得到大量信息。
- en: This same system concept will be revisited in [Chapter 3](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=27&action=edit),
    *System Modeling*, to illustrate how fleshing out the high-level technical design
    aspects of a system might progress.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个系统概念将在[第3章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=27&action=edit)，*系统建模*中重新讨论，以说明如何深化系统的高级技术设计方面可能会取得进展。
- en: 'By way of example, consider a system whose concept begins with the knowledge
    that they need a way to keep track of fuel efficiency across their delivery truck
    fleet. Working out the business objects and activities from there could answer
    some very basic questions, such as the following:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑一个系统的概念，该概念始于他们需要一种方法来跟踪交付卡车车队的燃油效率。从那里开始解决业务对象和活动可能会回答一些非常基本的问题，比如以下问题：
- en: '**What is the system keeping track of?**: The individual trucks in the fleet,
    the mileage on the odometers of those trucks at irregular intervals, and the refueling
    of those trucks, at a minimum.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统跟踪什么？**：车队中的各辆卡车，这些卡车不定期的里程表里程，以及这些卡车的加油，至少是这些。'
- en: '**What does a refueling look like?**: A fuel quantity and the odometer reading
    at the time of refueling, to start with. Those two data points would allow for
    the calculation of fuel efficiency, which is calculated in whatever units each
    uses (gallons or liters for fuel, miles or kilometers for the odometer). Fuel
    efficiency becomes a calculation of any given refueling for any given truck, and
    the current odometer reading for any given truck can be retrieved from the odometer
    reading at its last refueling.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 加油看起来是什么样子？：首先是加油时的燃料数量和里程表读数。这两个数据点可以用来计算燃油效率，燃油效率是用各自的单位（加仑或升，英里或公里）计算的。燃油效率成为任何给定卡车的任何给定加油的计算，任何给定卡车的当前里程表读数可以从其上次加油的里程表读数中获取。
- en: '**How many refuelings should be kept for any given truck?**: If one of the
    goals of the system is to detect when a truck''s fuel efficiency has dropped,
    in order to flag it for maintenance, perhaps, or to trigger a review of the delivery
    scheduling associated with it, then there is an obvious need to keep track of
    more than one such refueling—maybe all of them.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于任何给定的卡车应该保留多少次加油？：如果系统的目标之一是检测卡车的燃油效率下降，以便标记维护，或者触发与之相关的交付调度的审查，那么显然需要跟踪不止一次这样的加油
    - 也许是所有的加油。
- en: '**Who will be using the system, how, and where?**: There would need to be at
    least two types of physical access point: one from mobile devices (when fueling
    a truck), and one from in-office computers (for reporting purposes, if nothing
    else). That set of use cases tells us that we''re looking at either a web application,
    or some sort of dedicated phone and computer application set, with access to some
    common data stores, possibly through a service layer.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁将使用系统，如何以及在哪里？：至少需要两种类型的物理访问点：一个是来自移动设备的（给卡车加油时），另一个是来自办公室电脑的（用于报告目的，如果没有其他）。这一系列使用案例告诉我们，我们要么在看一个网络应用程序，要么是一些专门的电话和电脑应用程序集，可以通过服务层访问一些共同的数据存储。
- en: 'There may be other questions that could be asked, but these four alone probably
    give enough information to make the most of major concept design decisions, though
    the latter may require a bit more exploration before they can be finalized. Similar
    questioning, asking things such as What can (a specific type of user) do with
    the system until there aren''t any more users and activities, can also yield more
    specific system goals:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有其他问题可以提出，但仅这四个问题可能就提供了足够的信息来充分利用主要概念设计决策，尽管后者可能需要更多的探索才能最终确定。类似的质疑，询问诸如特定类型的用户可以对系统做什么，直到没有更多的用户和活动，也可以产生更具体的系统目标：
- en: 'Various users can log refuelings, providing the current odometer reading, and
    the quantity of fuel involved:'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 各种用户可以记录加油，提供当前里程表读数和涉及的燃料数量：
- en: Delivery drivers (at local fuel stations)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 交付司机（在当地加油站）
- en: Fleet maintenance staff (at the main office, where there is a company fuel station)
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 车队维护人员（在主办公室，那里有公司加油站）
- en: Fleet maintenance staff will be alerted when a truck's calculated fuel efficiency
    drops to lower than 90% of its average, so that the truck can be scheduled for
    an examination
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当卡车的计算燃油效率下降到其平均值的90％以下时，车队维护人员将收到警报，以便安排卡车进行检查
- en: Office staff will also be alerted when a truck's calculated fuel efficiency
    drops to lower than 90% of its average, so that the truck's delivery rounds can
    be examined
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 办公室工作人员还将在卡车的计算燃油效率下降到其平均值的90％以下时收到警报，以便检查卡车的交付轮次
- en: 'The question of how and where users will interact with the system may well
    spark some discussion and design decisions around user experience and interface
    design as well. In this case, perhaps after discussion about whether the system
    is a web application or dedicated phone and desktop application, the decision
    is made to make it a web application and to use the **Clarity Design System**
    for the UI, because the primary stakeholder in the system''s vision likes the
    way it handles on-screen cards:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将如何以及在哪里与系统交互的问题可能会引发一些关于用户体验和界面设计的讨论和设计决策。在这种情况下，也许在讨论系统是网络应用程序还是专门的电话和桌面应用程序之后，决定将其制作成网络应用程序，并使用Clarity
    Design System作为UI，因为系统愿景的主要利益相关者喜欢它在屏幕上处理卡片的方式：
- en: '![](assets/8816e272-9acf-4a26-beb4-4b90b1e9267f.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/8816e272-9acf-4a26-beb4-4b90b1e9267f.png)'
- en: Project management planning
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目管理规划
- en: 'This phase of the life cycle is where all of the conceptual items come together,
    hopefully in a form or fashion that''s ready for  the actual creation of code
    to start. If there is a formal PMP document as a result, its outline might look
    something like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 生命周期的这个阶段是所有概念项目希望以一种形式或方式汇聚在一起，准备开始实际编码的阶段。如果有一个正式的PMP文件作为结果，其大纲可能看起来像这样：
- en: Business purpose
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务目的
- en: Objectives
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标
- en: Goals
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 目标
- en: What's included
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括什么
- en: What's excluded
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不包括什么
- en: Key assumptions
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键假设
- en: 'Project organization:'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目组织：
- en: Roles and responsibilities
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 角色和责任
- en: Stakeholders
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利益相关者
- en: Communication
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 沟通
- en: Risks, issues, and dependencies
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险、问题和依赖关系
- en: Preliminary schedule of deliverables
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可交付成果的初步时间表
- en: Change management
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变更管理
- en: Risk and issue management
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 风险和问题管理
- en: 'Developers won''t need all of these items, but knowing where to look for various
    bits and pieces of the information they will need (or, in some cases, who to contact
    for information) is advantageous, so:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员不需要所有这些项目，但知道在哪里寻找各种信息碎片和他们需要的信息（或者在某些情况下，联系谁获取信息）是有利的，因此：
- en: The **Business purpose**, **Objectives**, and **Goals** sections should, ideally,
    collect all of the original vision information (from the initial concept/vision
    phase) with whatever details have been added or changes made after the concept design
    was complete. These will, in all probability, include the starting points for
    the **Requirements analysis and definition** efforts that go on during the development-specific
    phases of the life cycle. In addition, the **What's included**, **What's excluded**, and
    **Key assumptions** sections, between them, should expose what the actual scope
    of development looks like, as well as providing high-level design decisions and
    any relevant high-level system modeling information. **Risks, issues,** and **dependencies**
    may provide specific items of concern or other interests that will help shape
    the development efforts. Finally, **Change management** will set expectations
    (at a high level, at least) for what processes are expected or planned for as
    changes to the system are made.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**业务目的**，**目标**和**目标**部分应该理想地收集所有原始愿景信息（从最初的概念/愿景阶段开始），以及在**概念**设计完成后添加或更改的任何细节。这些很可能包括**需求分析和定义**工作的起点，这些工作在生命周期的开发特定阶段进行。此外，**包括什么**，**不包括什么**和**关键假设**部分应该揭示开发的实际范围，同时提供高层设计决策和任何相关的高层系统建模信息。**风险，问题**和**依赖关系**可能提供特定的关注事项或其他利益，这将有助于塑造开发工作。最后，**变更管理**将设定期望（至少在高层次上）对系统进行更改时预期或计划的流程。'
- en: People in a position to answer questions or make decisions about the system's
    implementation that fall outside the scope of pure development will probably be
    listed in the **Roles and responsibilities** and/or **Stakeholders** sections,
    though there may be specific established processes for raising those questions
    in the **Communication** section.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 能够回答关于系统实施的问题或做出决策的人员，这些问题超出了纯开发范围的人员可能会列在**角色和责任**和/或**利益相关者**部分，尽管可能会有特定的建立流程来提出这些问题在**沟通**部分。
- en: Even without formal documentation around project management expectations, much
    of the information noted previously should still be made known to development
    staff—the less time spent having to track down who can answer a question, the
    more time can be devoted to actually writing code, after all.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在项目管理期望周围没有正式文档，先前提到的大部分信息仍应该为开发人员所知—毕竟，不用花时间去追踪谁可以回答问题，就可以把更多时间用于实际编写代码。
- en: Development – specific phases of the SDLC
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SDLC的开发特定阶段
- en: Since the advent of Agile methodologies, and the widespread adoption of many
    of them, the specific shapes of the development-specific phases of an SDLC can
    vary substantially. Different methodologies make different decisions about what
    to prioritize or emphasize, and those differences can, in turn, yield significantly
    different processes and artifacts to accomplish the goals of formal SDLC phases
    that focus directly on developer needs and activities. Whole books have been written
    about several of the Agile processes, so a complete discussion of them is well
    beyond the scope of this book, but all of them address the following activities.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 自敏捷方法论问世以来，以及许多敏捷方法论的广泛采用，软件开发生命周期（SDLC）的开发特定阶段的具体形式可以有很大的变化。不同的方法论对于优先考虑或强调什么做出了不同的决定，这些差异反过来会产生明显不同的流程和工件，以完成直接关注开发人员需求和活动的正式SDLC阶段的目标。已经有很多关于几种敏捷过程的书籍，因此完整讨论它们远远超出了本书的范围，但它们都涉及以下活动。
- en: Requirements analysis and definition
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 需求分析和定义
- en: Requirements analysis and definition are concerned with discovering and detailing
    the specific requirements of a system—what the system needs to allow users to
    do with it. Users obviously includes end users, ranging from office workers using
    the system to conduct day-to-day business, to external end users such as customers.
    Less obviously, users should also include system administrators, staff who receive
    data from the system through some reporting processes, and perhaps any number
    of other people who interact with the system in any fashion, or who are acted
    upon by it—including the developers themselves.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 需求分析和定义涉及发现和详细说明系统的具体需求—系统需要允许用户如何使用它。用户显然包括最终用户，从使用系统进行日常业务的办公室工作人员，到外部最终用户，如客户。不那么明显的是，用户还应该包括系统管理员，通过某些报告流程从系统接收数据的工作人员，以及可能以任何方式与系统互动的其他人，或者被系统所影响的人—包括开发人员自己。
- en: Requirements are, first and foremost, about those interactions, and developers
    have to know what is expected of the system in order to write code to provide
    those capabilities.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，需求是关于这些交互的，开发人员必须知道系统期望的是什么，以便编写代码来提供这些功能。
- en: System architecture and design
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统架构和设计
- en: If requirements analysis and definition are about what a system provides, system
    architecture and design are primarily about how those capabilities work. The differences
    in how various development methodologies deal with architecture and design is
    less about that how and more about when they are defined. Essentially, given a
    set of requirements (the intentions behind the system, or the why), the implementation
    details (the how) will almost certainly be determined more by those requirements
    and the specifics of how best to implement them in the programming language than
    by when they are identified, consolidated, or formalized.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需求分析和定义是关于系统提供什么，系统架构和设计主要是关于这些功能如何工作。各种开发方法论处理架构和设计的差异不太在于如何，而更多地在于何时定义它们。基本上，给定一组需求（系统背后的意图，或者为什么），实现细节（如何）几乎肯定会更多地由这些需求和如何最好地在编程语言中实现它们的具体细节决定，而不是由它们何时被确定，整合或正式化。
- en: Developers need to know how best to implement the required functionality, and
    that is what this phase is concerned with.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员需要知道如何最好地实现所需的功能，这就是这个阶段关注的内容。
- en: Development and quality assurance
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发和质量保证
- en: 'The development part of this phase probably requires the least explanation:
    it''s when the actual code gets written, using the defined requirements to determine
    what the goals of the code are, and the architecture/design to determine how to
    write the code. An argument could probably be made that the quality assurance
    part of this phase should be broken out into its own grouping, if only because
    many of the activities involved are substantially different—there''s less code
    authoring going on, if there is any at all, in executing a manual test plan, after
    all. That said, the concept of automated testing, which may be able to replace
    a lot of the old-style manual test plan execution activities, does require a substantial
    amount of code, at least at first. Once those test suites are established, regression
    testing becomes much simpler and less time-consuming. Development methodologies''
    concerns with the QA aspects of this phase are usually centered around when QA
    activities take place, while the actual expectations of those activities are usually
    a combination of development standards and best practices.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个阶段的开发部分可能需要最少的解释：这是实际编写代码的时候，使用定义的需求来确定代码的目标，使用架构/设计来确定如何编写代码。可以说，这个阶段的质量保证部分应该被单独分组，因为其中涉及的许多活动实质上是不同的——毕竟，在执行手动测试计划时，很少有代码编写，如果有的话。也就是说，自动化测试的概念，可能能够取代许多旧式手动测试计划执行活动，至少起初需要大量的代码。一旦建立了这些测试套件，回归测试就变得简单得多，耗时也变少。开发方法论对这个阶段的质量保证方面的关注通常集中在质量保证活动何时进行，而这些活动的实际期望通常是开发标准和最佳实践的结合。
- en: Developers need to know what quality assurance efforts are expected of them,
    and plan (and perhaps write code) accordingly during development.Automated testing
    is also a critical foundation for increasingly popular Continuous Integration
    (CI) and Continuous Delivery/Deployment (CD) practices.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员需要知道他们所期望的质量保证工作，并在开发过程中进行规划（也许编写代码）。自动化测试也是日益流行的持续集成（CI）和持续交付/部署（CD）实践的关键基础。
- en: System integration, testing, and acceptance
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统集成、测试和验收
- en: If a system is above a certain size or degree of complexity, it's just a matter
    of time before new code coming out of development efforts will have to be incorporated
    into the larger system environment. Attention may also need to be paid to interactions
    with other systems, and any of the implications that are raised in those scenarios.
    In smaller, less complex systems, this integration may be achievable during development.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果系统的规模或复杂程度超过一定程度，那么开发工作中产生的新代码必须被纳入更大的系统环境中只是时间问题。还需要注意与其他系统的交互，以及在这些场景中引发的任何影响。在规模较小、复杂程度较低的系统中，这种集成可能在开发过程中实现。
- en: In either case, the integration of new (or modified) functionality needs to
    be tested to assure that it hasn't broken anything, both in the local system and
    in any other systems that interact with it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种情况，新功能（或修改后的功能）的集成需要进行测试，以确保它没有破坏任何东西，无论是在本地系统还是与其交互的任何其他系统中。
- en: Developers need to know how and where their code fits into the larger system,
    and thus how to integrate it. As with the Quality Assurance portion of the previous
    phase, developers also need to know what testing efforts are expected of them,
    for much the same reasons.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员需要知道他们的代码如何以及在何处适应更大的系统，以及如何集成它。与前一阶段的质量保证部分一样，开发人员还需要知道他们所期望的测试工作，出于同样的原因。
- en: Post-development phases of the SDLC
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SDLC的开发后阶段
- en: The portions of the SDLC that happen after the core code of a system is written
    can still have significant impacts on the development cycle. Historically, they
    might not involve a lot of real development effort—some code may be written as
    a one-off for various specific purposes such as packaging the system's code, or
    facilitating its installation on a target environment, for example. If the structure
    of the system's code base or, rarely, the language that the system is written
    in doesn't somehow prevent it, most of any code that was written in support of
    post-development activities would probably be created very early on in the development
    process in order to meet some other need.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC的部分在系统的核心代码编写完成后发生的，仍然会对开发周期产生重大影响。从历史上看，它们可能并不涉及大量的实际开发工作——一些代码可能是为了各种特定目的而编写的，比如打包系统的代码，或者在目标环境中进行安装。例如，如果系统的代码结构或者很少情况下系统编写的语言并不会阻止它，那么大部分为了支持开发后活动而编写的代码可能会在开发过程的早期阶段就被创建，以满足其他需求。
- en: As a case in point, packaging the code-base, and/or the creation of some installation
    mechanism is pretty likely to be undertaken the first time the code-base needs
    to be installed on an environment for user acceptance testing. If that expectation
    is known ahead of time—and it should be, at some level—then efforts to write the
    packaging process in order to write the installer may well start before any real
    code is created. After that point, further efforts will usually happen infrequently,
    as new components need to be added to a package structure, or changes to an installation
    process need to be undertaken. Changes at that level will often be minor, and
    typically needed with less and less frequency as the process matures and the code
    base installation. This sort of process evolution is at least a starting point
    for DevOps and some Continuous Delivery practices.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，打包代码库和/或创建一些安装机制很可能会在第一次需要在用户验收测试环境中安装代码库时进行。如果提前知道这种期望——在某种程度上应该知道的——那么为了编写安装程序可能会在任何真正的代码被创建之前就开始。在那之后，进一步的努力通常会不经常发生，因为需要向包结构添加新组件，或者需要进行安装过程的更改。在这个层面上的更改通常会很小，并且通常会随着过程的成熟和代码库的安装而越来越少。这种过程演变至少是DevOps和一些持续交付实践的起点。
- en: Developers will need to know how the system is supposed to be distributed and
    installed so that they can plan around those needs, writing code to facilitate
    them as required.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员需要知道系统应该如何分发和安装，以便他们可以根据这些需求进行规划，根据需要编写代码来促进这些过程。
- en: The last two phases of the SDLC, concerned with the day-to-day use of the system
    and with its eventual retirement, will have less relevance to the core development
    process in general. The most likely exception to that would be re-entry into the
    development cycle phases in order to handle bugs or add new features or functionality
    (the *Use and Maintenance* part of the *Operations/Use and Maintenance* phase).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC的最后两个阶段，涉及系统的日常使用和最终退役，对于核心开发过程来说通常不太相关。最可能的例外情况是重新进入开发周期阶段，以处理错误或添加新功能或功能（*操作/使用和维护*阶段的*使用和维护*部分）。
- en: From the perspective of system administrators, the staff responsible for the
    execution of activities in those phases, developers are contributors to the knowledge
    and processes they need in much the same way that all of the pre-development contributors
    to the system's development were with respect to developer knowledge and processes.
    System administration and maintenance staff will be looking for and using various
    artifacts that come out of the development process in order to be able to execute
    their day-to-day efforts with respect to the system. The odds are good that those
    artifacts will mostly be knowledge, in the form of documentation, and perhaps
    the occasional system administration tool.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从系统管理员的角度来看，负责执行各个阶段活动的工作人员，开发人员对他们所需的知识和流程的贡献方式与所有前期开发人员对开发者知识和流程的贡献方式非常相似。系统管理和维护人员将寻找并使用开发过程中产生的各种工件，以便能够执行他们与系统相关的日常工作。这些工件很可能大部分是知识，以文档形式存在，也许偶尔会有系统管理工具。
- en: Developers will need to know what kind of information is needed for post-development
    activities in order to be able to provide the relevant documentation or to write
    code to facilitate common or expected tasks.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员需要知道在后期开发活动中需要哪些信息，以便能够提供相关文档或编写代码来促进常见或预期的任务。
- en: 'Finally, with respect to the process of decommissioning a system, taking it
    offline, presumably never to be used again: someone, probably at a business decision
    level, will have to provide direction, or even formal business policies and procedures
    around what needs to happen. At a minimum, those will likely include the following'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于系统停用的过程，将其下线，可能永远不再使用：某人，可能是在业务决策层，将不得不提供指导，甚至是关于需要发生什么的正式业务政策和程序。至少，这些可能包括以下内容
- en: Requirements for preserving and archiving system data (or how it should be disposed
    of, if it's sensitive data)
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 保留和归档系统数据的要求（或者如果是敏感数据，应该如何处理）
- en: Requirements for notifying users of the system's decommissioning
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知用户系统停用的要求
- en: There may well be more, even a lot more—it's very dependent on the system itself,
    both structurally and functionally, as well as any business policies that might
    apply.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可能还有更多，甚至更多——这非常依赖于系统本身，无论是结构上还是功能上，以及可能适用的任何业务政策。
- en: Developers will need to know what should happen when the system is finally shut
    down for good so that they can plan and document accordingly.Knowing how things
    will be handled during a complete and permanent shutdown may give significant
    insight into how system processes and data can or should be handled when normal
    data deletion is executed during normal system operation.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 开发人员需要知道当系统最终永久关闭时应该发生什么，以便他们可以进行相应的规划和文档记录。了解在完全和永久关闭期间如何处理事务可能会对系统流程和数据在正常系统操作期间执行正常数据删除时的处理方式提供重要见解。
- en: Summary
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Even if there is no formal SDLC in place, a lot of the information that would
    come out of one is still advantageous for developers to have access to. If enough
    of it is available, and if it's sufficiently detailed, readily accessible, and,
    above all, accurate, it can certainly help make the difference between a project
    just being programmed and being well-engineered software.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 即使没有正式的SDLC，很多SDLC中产生的信息对开发人员来说仍然是有利的。如果足够的信息可用，并且足够详细、易于访问，并且最重要的是准确的，它肯定可以帮助区分项目只是编程和真正是良好工程软件之间的差异。
- en: Another significant contributor to making that difference is the availability
    of similar information about the system itself, in any or all of several *System
    Model* artifacts. Those provide more implementation-oriented details that should
    be at least as useful as the policy and procedure-level information from the various
    SDLC artifacts. We’ll take a look at those next.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个对于产生这种差异的重要贡献者是关于系统本身的类似信息的可用性，以及任何或所有几个*系统模型*工件。这些提供了更多面向实施的细节，应该至少和各种SDLC工件中的政策和程序级别信息一样有用。接下来我们将看看这些。
