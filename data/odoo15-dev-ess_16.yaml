- en: '[*Chapter 15*](B16119_15_Final_PD_ePub.xhtml#_idTextAnchor410): Deploying and
    Maintaining Production Instances'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第 15 章*](B16119_15_Final_PD_ePub.xhtml#_idTextAnchor410)：部署和维护生产实例'
- en: In this chapter, you'll learn the basics of preparing an Odoo server for use
    in a production environment.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何为生产环境准备 Odoo 服务器的基础知识。
- en: Setting up and maintaining servers is a non-trivial topic in itself and should
    be done by specialists. The information given here is not enough to ensure an
    average user can create a resilient and secure environment that hosts sensitive
    data and services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 设置和维护服务器本身就是一个非平凡的话题，应由专业人士完成。这里提供的信息不足以确保普通用户能够创建一个能够承载敏感数据和服务的弹性且安全的环境。
- en: The goal of this chapter is to introduce the most important configuration aspects
    and the best practices specific to Odoo deployments. This will help system administrators
    prepare their Odoo server hosts.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是介绍最重要的配置方面和针对 Odoo 部署的最佳实践。这将帮助系统管理员为他们的 Odoo 服务器主机做好准备。
- en: You will start by setting up the host system, and then you will install the
    Odoo prerequisites and Odoo itself. **Ubuntu** is a popular choice for cloud servers,
    and it will be used here. Then, the Odoo configuration file needs to be prepared.
    Until this point, the setup is similar to the one used for the development environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 您将首先设置主机系统，然后安装 Odoo 的先决条件和 Odoo 本身。**Ubuntu** 是云服务器的流行选择，这里将使用它。然后，需要准备 Odoo
    配置文件。到目前为止，设置与开发环境使用的设置类似。
- en: Next, Odoo needs to be configured as a system service so that it is automatically
    started when the server starts.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，需要将 Odoo 配置为系统服务，以便在服务器启动时自动启动。
- en: For servers hosted on a public cloud, Odoo should be served through **HTTPS**.
    For this, you will learn how to install and configure an **Nginx** reverse proxy
    by using a self-signed certificate.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于托管在公共云上的服务器，Odoo 应通过 **HTTPS** 提供服务。为此，您将学习如何使用自签名证书安装和配置 **Nginx** 反向代理。
- en: The final section discusses how to perform server upgrades and prepare a staging
    environment that will allow us to perform dry-runs before the actual updates are
    applied.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个部分讨论了如何执行服务器升级并准备一个预演环境，以便在实际更新应用之前进行测试运行。
- en: 'The topics discussed in this chapter are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论的主题如下：
- en: Preparing the host system
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备主机系统
- en: Installing Odoo from source code
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从源代码安装 Odoo
- en: Configuring Odoo
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 Odoo
- en: Setting up Odoo as a system service
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Odoo 配置为系统服务
- en: Setting up an Nginx reverse proxy
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Nginx 反向代理
- en: Configuring and enforcing HTTPS
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置和强制执行 HTTPS
- en: Maintaining the Odoo service and modules
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护 Odoo 服务和模块
- en: By the end of this chapter, you will be able to set up a reasonably secure Odoo
    server that is good enough for low-profile production use. However, the recipes
    given in this chapter aren't the only valid way to deploy Odoo – other approaches
    are also possible.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够设置一个相当安全的 Odoo 服务器，这对于低调的生产使用已经足够好。然而，本章中给出的食谱并不是部署 Odoo 的唯一有效方法——还有其他方法也是可能的。
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow this chapter, you will need a clean Ubuntu 20.04 server – for example,
    a **virtual private server** (**VPS**) hosted on the cloud.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟随本章，您需要一个干净的 Ubuntu 20.04 服务器——例如，一个在云上托管的 **虚拟专用服务器**（**VPS**）。
- en: The code and scripts used in this chapter can be found in the `ch15/` directory
    of the **GitHub** repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码和脚本可以在 [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)
    的 **GitHub** 仓库的 `ch15/` 目录中找到。
- en: Preparing the host system
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备主机系统
- en: Odoo is usually deployed on **Debian**-based **Linux** systems. Ubuntu is a
    popular choice, and the latest **long-term support** (**LTS**) version is 20.04
    **Focal Fossa**.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 通常部署在基于 **Debian** 的 **Linux** 系统上。Ubuntu 是一个流行的选择，最新的 **长期支持**（**LTS**）版本是
    20.04 **Focal Fossa**。
- en: Other Linux distributions can also be used. The **CentOS**/**Red Hat Enterprise
    Linux** (**RHEL**) system is also popular in corporate circles.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 其他 Linux 发行版也可以使用。在商业领域，**CentOS**/**Red Hat Enterprise Linux**（**RHEL**）系统也很受欢迎。
- en: The installation process requires elevated access, using the `root` superuser
    or the `sudo` command. When using a Debian distribution, the default login is
    `root`, which has administration access, and the command prompt shows `#`. On
    Ubuntu systems, the `root` account is disabled. Instead, the initial user is configured
    during the installation process and is a `sudo` command to elevate access and
    run commands with the `root` privileges.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 安装过程需要提升访问权限，使用`root`超级用户或`sudo`命令。在Debian发行版中，默认登录是`root`，它具有管理访问权限，命令提示符显示`#`。在Ubuntu系统上，`root`账户被禁用。相反，在安装过程中配置了初始用户，并且是`sudo`命令来提升访问权限并使用`root`权限运行命令。
- en: Before starting the Odoo installation, the host system dependencies must be
    installed, and a specific user should be created to run the Odoo service.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始Odoo安装之前，必须在主机系统上安装系统依赖，并创建一个特定的用户来运行Odoo服务。
- en: The next section explains the required system dependencies on a Debian system.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个部分解释了在Debian系统上所需的系统依赖。
- en: Installing the system dependencies
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装系统依赖
- en: When running Odoo from the source, some dependencies need to be installed in
    the system.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当从源运行Odoo时，需要安装一些系统依赖。
- en: 'Before starting, it is a good practice to update the package index and then
    perform an upgrade to ensure that all installed programs are up to date, as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始之前，更新软件包索引并执行升级以确保所有已安装的程序都是最新的，这是一个好习惯，如下所示：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, the **PostgreSQL** database can be installed. Our user should be made
    a database superuser so that they have administration access to the database.
    These are the commands for this:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，可以安装**PostgreSQL**数据库。我们的用户应该被设置为数据库超级用户，以便他们能够获得对数据库的管理访问权限。以下是这些命令：
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Odoo can use an existing PostgreSQL database, which is installed in its own
    server. If this is the case, the PostgreSQL service does not need to be installed
    in the Odoo server and the corresponding connection details should be set in the
    Odoo configuration file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo可以使用安装在它自己的服务器上的现有PostgreSQL数据库。如果是这种情况，则不需要在Odoo服务器上安装PostgreSQL服务，并且应在Odoo配置文件中设置相应的连接详情。
- en: 'These are the Debian dependencies required to run Odoo:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是运行Odoo所需的Debian依赖项：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: To have report printing capabilities, `wkhtmltox` must be installed. The recommended
    version for Odoo 10 and later is 0.12.5-1\. The download links can be found at
    [https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5](https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5).
    The Ubuntu **code names** are **bionic** for version 18.04 and **focal** for version
    20.04.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了拥有报表打印功能，必须安装`wkhtmltox`。对于Odoo 10及以后的版本，推荐的版本是0.12.5-1。下载链接可以在[https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5](https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5)找到。Ubuntu的**代号**对于18.04版本是**bionic**，对于20.04版本是**focal**。
- en: 'The following commands perform this installation for Ubuntu 20.04 Focal:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令为Ubuntu 20.04 Focal版本执行此安装：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The package installation may report missing dependencies errors. In this case,
    the last command will force the installation of those dependencies and correctly
    complete the installation.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 软件包安装可能会报告缺少依赖项错误。在这种情况下，最后一个命令将强制安装这些依赖项并正确完成安装。
- en: Next, you will create a system user to be used for the Odoo processes.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将创建一个系统用户用于Odoo进程。
- en: Preparing a dedicated system user
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备专用系统用户
- en: A good security practice is to run Odoo using a dedicated user, who has no special
    privileges on the host system.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的安全实践是使用一个专用用户来运行Odoo，该用户在主机系统上没有特殊权限。
- en: 'A popular choice for this username is `odoo`. This is the command to create
    it:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于用户名的一个流行选择是`odoo`。这是创建它的命令：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Linux system users can have a `home` directory. For the Odoo user, this is a
    convenient place to store the Odoo files. A popular choice for this is `/opt/odoo`.
    The `--home` option used automatically creates this directory and sets it as the
    `odoo` user home.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Linux系统用户可以有一个`家`目录。对于Odoo用户来说，这是一个方便的地方来存储Odoo文件。这个选择的流行选项是`/opt/odoo`。自动使用的`--home`选项会创建这个目录并将其设置为`odoo`用户的家目录。
- en: 'This user does not have access to the PostgreSQL database yet. The following
    commands add that access and create the database for it to initialize the Odoo
    production environment:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 此用户目前还没有访问PostgreSQL数据库的权限。以下命令添加了这种访问权限并为它创建数据库以初始化Odoo生产环境：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `odoo` is the username and `odoo-prod` is the name of the database to
    support our Odoo instance. The `odoo` user was made the owner of the `odoo-prod`
    database. This means that it has *create and drop* privileges over that database,
    including the ability to drop it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`odoo` 是用户名，`odoo-prod` 是支持我们的 Odoo 实例的数据库名称。`odoo` 用户被设置为 `odoo-prod` 数据库的所有者。这意味着它对该数据库具有
    *创建和删除* 权限，包括删除它的能力。
- en: Tip
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: To run, Odoo does not require elevated privileges to the database being used.
    These may only be needed for some maintenance operations, such as installing or
    upgrading modules. So, for improved security, the Odoo system user can be a non-owner
    database user. Note that in this case, the maintenance should be done running
    Odoo with a different user than the owner of the database.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行，Odoo 不需要使用数据库的特权权限。这些权限可能仅在某些维护操作中需要，例如安装或升级模块。因此，为了提高安全性，Odoo 系统用户可以是非所有者数据库用户。请注意，在这种情况下，维护应使用与数据库所有者不同的用户运行
    Odoo。
- en: 'To start a session with the Odoo system user, use the following command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Odoo 系统用户启动会话，请使用以下命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This will be used to run installation steps as the Odoo user. When done, the
    `exit` command terminates that session and returns to the original user.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这将用于以 Odoo 用户身份运行安装步骤。完成后，`exit` 命令将终止该会话并返回到原始用户。
- en: In the next section, we will continue with the installation of the Odoo code
    and `/opt/odoo` directory.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将继续安装 Odoo 代码和 `/opt/odoo` 目录。
- en: Installing Odoo from source code
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从源代码安装 Odoo
- en: While Odoo provides Debian/Ubuntu and CentOS/RHEL system packages, installing
    from source code is a popular option due to the flexibility and control it provides.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Odoo 提供了 Debian/Ubuntu 和 CentOS/RHEL 系统包，但由于其提供的灵活性和控制，从源代码安装是一个流行的选项。
- en: Using source code provides better control over what is deployed and makes it
    easier to manage changes and fixes once in production. For example, it allows
    us to tie the deployment process to a Git workflow.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 使用源代码可以更好地控制部署的内容，并在生产环境中更容易地管理更改和修复。例如，它允许我们将部署过程与 Git 工作流程相关联。
- en: At this point, the Odoo system dependencies are already installed, and the database
    is ready to use. Now, the Odoo source code can be downloaded and installed, along
    with the required Python dependencies.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Odoo 的系统依赖项已经安装，数据库已准备好使用。现在，可以下载并安装 Odoo 源代码，以及所需的 Python 依赖项。
- en: Let's see how to download the Odoo source code.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何下载 Odoo 源代码。
- en: Downloading the Odoo source code
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载 Odoo 源代码
- en: Sooner or later, your server will need upgrades and patches. A version control
    repository can be of great help when this time comes. We use `git` to get our
    code from a repository, just like we did when installing the development environment.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 总有一天，您的服务器将需要升级和补丁。在需要的时候，版本控制仓库可以提供极大的帮助。我们使用 `git` 从仓库获取代码，就像我们在安装开发环境时做的那样。
- en: 'Next, we''ll impersonate the `odoo` user and download the code into its home
    directory, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将模拟 `odoo` 用户，并将代码下载到其主目录中，如下所示：
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `-b` option ensures that we get the right branch, and the `--depth=1` option
    retrieves only the latest code revision, ignoring the (long) change history and
    making the download smaller and faster.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`-b` 选项确保我们获取正确的分支，而 `--depth=1` 选项仅检索最新的代码修订版，忽略（长）变更历史，使下载更小、更快。'
- en: Tip
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: '**Git** is an important tool to manage code versions of your Odoo deployments.
    If you''re not familiar with Git, it is worth learning more about it. A good starting
    point is [http://git-scm.com/doc](http://git-scm.com/doc).'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git** 是管理 Odoo 部署代码版本的重要工具。如果您不熟悉 Git，值得了解更多关于它的信息。一个好的起点是 [http://git-scm.com/doc](http://git-scm.com/doc)。'
- en: 'Custom modules will usually also be managed with Git and should also be cloned
    to the production server. For example, the following code will add the library
    custom modules into the `/opt/odoo/odoo15/library` directory:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自定义模块通常也会使用 Git 管理，并且也应该克隆到生产服务器上。例如，以下代码将库自定义模块添加到 `/opt/odoo/odoo15/library`
    目录：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The Odoo source code is available on the server, but it can't run yet because
    the required Python dependencies are not installed yet. Let's install these in
    the next section.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 源代码已位于服务器上，但还不能运行，因为所需的 Python 依赖项尚未安装。让我们在下一节中安装这些依赖项。
- en: Installing the Python dependencies
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Python 依赖项
- en: Once the Odoo source code is downloaded, the Python packages required by Odoo
    should be installed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Odoo 源代码后，应安装 Odoo 所需的 Python 包。
- en: 'Many of them also have Debian or Ubuntu system packages. The official Odoo
    installation package for Debian uses them, and the dependency package names can
    be found in the Odoo source code in the `debian/control` file: [https://github.com/odoo/odoo/blob/15.0/debian/control](https://github.com/odoo/odoo/blob/15.0/debian/control).'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其中许多也都有 Debian 或 Ubuntu 系统包。官方 Odoo Debian 安装包使用它们，依赖包的名称可以在 Odoo 源代码的 `debian/control`
    文件中找到：[https://github.com/odoo/odoo/blob/15.0/debian/control](https://github.com/odoo/odoo/blob/15.0/debian/control)。
- en: These Python dependencies can also be installed directly from the **Python Package
    Index** (**PyPI**). Doing this using a Python **virtual environment** provides
    better protection from changes being made to the host system.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 Python 依赖项也可以直接从 **Python 包索引**（**PyPI**）安装。使用 Python **虚拟环境**来做这件事可以更好地保护主机系统免受更改的影响。
- en: 'The following commands create a virtual environment, activate it, and then
    install Odoo from source, along with all the required Python dependencies:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令创建一个虚拟环境，激活它，然后从源代码安装 Odoo 以及所有必需的 Python 依赖项：
- en: '[PRE9]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'And Odoo should be ready now. Any of the following commands can be used to
    confirm this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Odoo 应该已经准备好了。可以使用以下任何命令来确认这一点：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s understand these commands one by one:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐个理解这些命令：
- en: The first command relies on the `odoo` command made available by `pip install
    -e /opt/odoo/odoo15`.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个命令依赖于由 `pip install -e /opt/odoo/odoo15` 提供的 `odoo` 命令。
- en: The second command does not rely on the `odoo` command, and it directly calls
    the Odoo start script, `/opt/odoo/odoo15/odoo-bin`.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个命令不依赖于 `odoo` 命令，它直接调用 Odoo 启动脚本，`/opt/odoo/odoo15/odoo-bin`。
- en: The third command does not need the virtual environment to be activated beforehand,
    as it uses the corresponding Python executable directly, which has the same effect.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个命令不需要事先激活虚拟环境，因为它直接使用相应的 Python 可执行文件，这具有相同的效果。
- en: The final command does the same in a more compact way. It uses directly the
    `odoo` command available in that virtual environment. This can be useful for some
    scripts.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个命令以更紧凑的方式执行相同的操作。它直接使用该虚拟环境中可用的 `odoo` 命令。这对某些脚本可能很有用。
- en: Odoo is now ready to run. The next step is to take care of the configuration
    file to use, which we will explain in the following section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Odoo 已经准备好运行了。下一步是注意要使用的配置文件，我们将在下一节中解释。
- en: Configuring Odoo
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 Odoo
- en: Once Odoo is installed, the configuration file to be used by the production
    service needs to be prepared.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Odoo，就需要准备用于生产服务的配置文件。
- en: The next sub-section provides guidance on how to do this.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个子节提供了如何做到这一点的指导。
- en: Setting up the configuration file
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置配置文件
- en: Configuration files are expected to be in the `/etc` system directory. So, the
    Odoo production configuration file will be stored at `/etc/odoo/odoo.conf`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 预期配置文件位于 `/etc` 系统目录中。因此，Odoo 生产配置文件将存储在 `/etc/odoo/odoo.conf`。
- en: To make it easier to see all of the available options, a default configuration
    file can be generated. This should be done by the user that will run the service.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更容易地看到所有可用的选项，可以生成一个默认配置文件。这应该由将运行该服务的用户来完成。
- en: 'If not done yet, create a session for the `odoo` user and activate the virtual
    environment:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尚未完成，为 `odoo` 用户创建一个会话并激活虚拟环境：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, the following command can be used to create a default configuration file:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以使用以下命令创建一个默认配置文件：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the previous command, the `-c` option sets the location of the configuration
    file. If not given, it defaults to `~/.odoorc`. The `--save` option writes the
    options to it. If the file does not exist, it will be created with all default
    options. If it already exists, it will be updated with the options used in the
    command.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个命令中，`-c` 选项设置配置文件的位置。如果没有提供，则默认为 `~/.odoorc`。`--save` 选项将选项写入其中。如果文件不存在，它将使用所有默认选项创建。如果它已经存在，它将使用命令中使用的选项进行更新。
- en: 'The following commands set a few important options for it:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令设置了该文件的一些重要选项：
- en: '[PRE13]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The options set are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 设置的选项如下：
- en: '`-d`: This is the default database to use.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`-d`: 这是默认要使用的数据库。'
- en: '`--db-filter`: This is a regular expression filtering the databases available
    for the Odoo service. The expression used makes available only the `odoo-prod`
    database.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--db-filter`: 这是一个正则表达式，用于过滤 Odoo 服务可用的数据库。使用的表达式仅使 `odoo-prod` 数据库可用。'
- en: '`--without-demo=all`: This disables demonstration data so that the Odoo initialized
    databases start clean.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--without-demo=all`: 这将禁用演示数据，以便 Odoo 初始化数据库从零开始。'
- en: '`--proxy-mode`: This enables the proxy mode, meaning that Odoo should expect
    requests forwarded from a reverse proxy.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--proxy-mode`：这启用了代理模式，意味着 Odoo 应该期望来自反向代理的请求。'
- en: 'The next step is to copy this default file to the `/etc` directory and set
    the necessary access rights so that the Odoo user can read it:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将此默认文件复制到 `/etc` 目录，并设置必要的访问权限，以便 Odoo 用户可以读取它：
- en: '[PRE14]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The last command ensures that the user running the Odoo process can read but
    can't change the configuration file, thereby providing better security.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令确保运行 Odoo 进程的用户可以读取但不能更改配置文件，从而提供更好的安全性。
- en: 'The Odoo log file directory also needs to be created and given access to the
    `odoo` user. This should go inside the `/var/log` directory. The following commands
    do this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要创建 Odoo 日志文件目录，并授予 `odoo` 用户访问权限。这应该在 `/var/log` 目录内完成。以下命令可以完成此操作：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Finally, the Odoo configuration file should be edited to ensure that a few
    important parameters are correctly configured. For example, the following command
    opens the file using the `nano` editor:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应该编辑 Odoo 配置文件，以确保一些重要的参数被正确配置。例如，以下命令使用 `nano` 编辑器打开文件：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'These are the suggested values for some of the most important parameters:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些最重要的参数的建议值：
- en: '[PRE17]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s explain them in detail:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细解释一下：
- en: '`addons_path`: This is a comma-separated list of the paths where add-on modules
    will be looked up. It''s read from left to right, with the leftmost directories
    considered a higher priority.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addons_path`：这是一个逗号分隔的路径列表，其中将查找附加模块。它从左到右读取，最左边的目录被视为优先级更高。'
- en: '`admin_passwd`: This is the master password used to access the web client database
    management functions. It''s critical to set this with a strong password or, even
    better, to set it to `False` to deactivate the function.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin_passwd`：这是用于访问网络客户端数据库管理功能的密码。使用强密码设置此密码至关重要，或者更好的是将其设置为 `False` 以禁用此功能。'
- en: '`db_name`: This is the database instance to initialize during the server startup
    sequence.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db_name`：这是在服务器启动序列中初始化的数据库实例。'
- en: '`dbfilter`: This is a filter for the databases to be made accessible. It''s
    a Python-interpreted regex expression. For the user not to be prompted to select
    a database and for unauthenticated URLs to work properly, it should be set with
    `^dbname$`, for example, `dbfilter=^odoo-prod$`. It supports the `%h` and `%d`
    placeholders, which are replaced by the HTTP request hostname and subdomain name.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dbfilter`：这是用于使数据库可访问的过滤器。它是一个 Python 解释的正则表达式表达式。为了用户不被提示选择数据库，并且未认证的 URL
    能够正常工作，它应该设置为 `^dbname$`，例如，`dbfilter=^odoo-prod$`。它支持 `%h` 和 `%d` 占位符，它们将被 HTTP
    请求的主机名和子域名名称替换。'
- en: '`http_interface`: This is the TCP/IP address Odoo will listen to. By default,
    it is `0.0.0.0`, meaning all addresses. For a deployment behind a reverse proxy,
    this can be set to the reverse proxy address so that only requests from there
    are considered. Use `127.0.0.1` if the reverse proxy is in the same server as
    the Odoo service.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_interface`：这是 Odoo 将监听的 TCP/IP 地址。默认情况下，它是 `0.0.0.0`，意味着所有地址。对于位于反向代理后面的部署，可以将它设置为反向代理地址，以便只考虑来自那里的请求。如果反向代理与
    Odoo 服务在同一服务器上，请使用 `127.0.0.1`。'
- en: '`http_port`: This is the port number at which the server will listen. By default,
    port `8069` is used.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_port`：这是服务器将监听的端口号。默认情况下，使用端口号 `8069`。'
- en: '`limit_time_cpu` / `limit_time_real`: This sets CPU time limits for the workers.
    The default settings, `60` and `120`, may be too low, and it could be convenient
    to increase them.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit_time_cpu` / `limit_time_real`：这为工作者设置了 CPU 时间限制。默认设置 `60` 和 `120` 可能太低，可能需要将它们提高。'
- en: '`list_db = False`: This blocks database listing, both at the **remote procedure
    calls** (**RPCs**)-level and in the UI, and it blocks the database management
    screens and the underlying RPC functions.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list_db = False`：这阻止了数据库列表，无论是在远程过程调用（RPC）级别还是在 UI 中，它还阻止了数据库管理屏幕和底层的 RPC
    函数。'
- en: '`logfile`:  This is where the server log should be written. For system services,
    the expected location is somewhere inside `/var/log`. If left empty, the log prints
    to standard output instead.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`logfile`：这是服务器日志应该写入的位置。对于系统服务，预期的位置是在 `/var/log` 内的某个地方。如果为空，则日志将打印到标准输出。'
- en: '`proxy_mode`: This should be set to `True` when Odoo is accessed behind a reverse
    proxy, as we will be doing.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`proxy_mode`：当 Odoo 通过反向代理访问时，应该将其设置为 `True`，正如我们将要做的。'
- en: '`without_demo`: This should be set to `all` in production environments so that
    new databases don''t have demo data on them.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`without_demo`：在生产环境中，此选项应设置为`all`，以便新数据库上不包含演示数据。'
- en: '`workers`: This, with a value of two or more, enables the multiprocessing mode.
    We''ll discuss this in more detail shortly.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`workers`：此选项，当值为两个或更多时，启用多进程模式。我们将在稍后详细讨论这一点。'
- en: From a security point of view, the `admin_passwd` and `list_db=False` options
    are particularly important. They block web access to the database management features
    and should be set in any production or internet-facing Odoo server.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从安全角度考虑，`admin_passwd`和`list_db=False`选项尤为重要。它们阻止对数据库管理功能的Web访问，并且应在任何生产或面向互联网的Odoo服务器上设置。
- en: Tip
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `openssl rand -base64 32` command can be used to generate a random password
    in the command line. Change the `32` number to whatever password size you prefer.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`openssl rand -base64 32`命令在命令行中生成随机密码。将`32`数字更改为您喜欢的密码大小。
- en: 'The following parameters can also be helpful:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 以下参数也可能很有帮助：
- en: '`data_dir`: This is the path where session data and attachment files are stored;
    remember to keep backups of this directory.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data_dir`：这是会话数据和附件文件存储的路径；请记住备份此目录。'
- en: '`http_interface`: This sets the addresses that will be listened to. By default,
    it listens to `0.0.0.0`, but when using a reverse proxy, it can be set to `127.0.0.1`
    in order to respond to local requests only.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http_interface`：此选项设置将监听的地址。默认情况下，它监听`0.0.0.0`，但在使用反向代理时，可以将其设置为`127.0.0.1`以仅响应本地请求。'
- en: 'We can check the effect of the configuration made by running the Odoo manually,
    as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式运行Odoo手动检查配置的效果：
- en: '[PRE18]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The last command will not display any output to the console, as log messages
    are being written to the log file instead of to the standard output.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一条命令不会在控制台显示任何输出，因为日志消息正在写入日志文件而不是标准输出。
- en: 'To follow the log for a running Odoo server, the `tail` command can be used:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 要跟踪运行中的Odoo服务器的日志，可以使用`tail`命令：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This can be done from a different terminal window while the manual command is
    running in the original terminal.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以在运行手动命令的原终端窗口之外的不同终端窗口中完成。
- en: To run multiple terminal sessions on the same terminal window, you can use `tmux`
    or `screen`. Ubuntu also has available the `tmux` or `screen`. For more details,
    see [https://help.ubuntu.com/community/Byobu](https://help.ubuntu.com/community/Byobu).
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要在同一终端窗口中运行多个终端会话，可以使用`tmux`或`screen`。Ubuntu还提供了`tmux`或`screen`。有关更多详细信息，请参阅[https://help.ubuntu.com/community/Byobu](https://help.ubuntu.com/community/Byobu)。
- en: Note
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Unfortunately, the `logfile` configuration option can't be unset directly from
    the Odoo command. If we want to temporarily send the log output back to the standard
    output, the best solution is to use a copy of the configuration file without the
    `logfile` option set.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，无法直接从Odoo命令中取消`logfile`配置选项。如果我们想暂时将日志输出发送回标准输出，最佳解决方案是使用未设置`logfile`选项的配置文件副本。
- en: 'It may be the case that the `odoo-prod` database has not been initialized by
    Odoo and that this needs to be done manually. In this case, the initialization
    can be done by installing the `base` module:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的情况是`odoo-prod`数据库尚未由Odoo初始化，这需要手动完成。在这种情况下，可以通过安装`base`模块来完成初始化：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: At this point, the Odoo configuration should be ready. Before continuing, it
    is worth learning more about the multiprocessing workers in Odoo.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Odoo配置应该已经准备好了。在继续之前，值得了解更多关于Odoo中的多进程工作者的信息。
- en: Understanding multiprocessing workers
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解多进程工作者
- en: A production instance is expected to handle a significant workload. By default,
    the server runs one process and can use only one CPU core for processing due to
    the Python language **Global Interpreter Lock** (**GIL**). However, a multiprocessing
    mode is available so that concurrent requests can be handled, allowing us to take
    advantage of multiple cores.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 预期的生产实例应处理大量的工作负载。由于Python语言的**全局解释器锁**（**GIL**），默认情况下，服务器运行一个进程，并且只能使用一个CPU核心进行处理。然而，有一个多进程模式可供使用，以便可以处理并发请求，从而让我们可以利用多个核心。
- en: The `workers=N` option sets the number of worker processes to use. As a guideline,
    it can be set to `1+2*P`, where `P` is the number of processor cores. Finding
    the best setting might involve some experimentation by using different numbers
    and checking how busy the server processors are. Having PostgreSQL running on
    the same machine also has an impact on this, and this will reduce the number of
    workers that should be enabled.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`workers=N` 选项设置要使用的工人数。作为一个指导原则，它可以设置为 `1+2*P`，其中 `P` 是处理器核心数。找到最佳设置可能需要通过使用不同的数字并检查服务器处理器的繁忙程度进行一些实验。在同一台机器上运行
    PostgreSQL 也会对此产生影响，这将减少应该启用的工人数。'
- en: It is better to set workers that are too high for the load rather than too low.
    The minimum should be six, due to the parallel connections used by most browsers.
    The maximum is generally limited by the amount of RAM on the machine, as each
    worker will consume some server memory. As a rule of thumb for normal usage patterns,
    the Odoo server should be able to handle `(1+2*P)*6` simultaneous users, where
    `P` is the number of processors.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 对于负载过高的情况，设置过多的工人数比设置过少的情况更好。最小值应该是六个，因为大多数浏览器使用的并行连接数。最大值通常由机器上的 RAM 量限制，因为每个工人都将消耗一些服务器内存。对于正常的使用模式，Odoo
    服务器应该能够处理 `(1+2*P)*6` 个并发用户，其中 `P` 是处理器的数量。
- en: There are a few `limit-` configuration parameters that can be used to tune workers.
    Workers are recycled when they reach these limits, where the corresponding process
    is stopped and a new one is started. This protects the server from memory leaks
    and particular processes overloading the server resources.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个 `limit-` 配置参数可以用来调整工作参数。当工人数达到这些限制时，会回收工人数，相应的进程将被停止并启动一个新的进程。这可以保护服务器免受内存泄漏和特定进程过载服务器资源的影响。
- en: The official documentation provides additional advice on how to tune the worker
    parameters. It can be found at [https://www.odoo.com/documentation/15.0/setup/deploy.html#builtin-server](https://www.odoo.com/documentation/15.0/setup/deploy.html#builtin-server).
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档提供了关于如何调整工作参数的额外建议。可以在 [https://www.odoo.com/documentation/15.0/setup/deploy.html#builtin-server](https://www.odoo.com/documentation/15.0/setup/deploy.html#builtin-server)
    找到。
- en: At this point, Odoo is installed, configured, and ready to run. The next step
    is to have it running as an unattended system service. Let's look at this in detail
    in the next section.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Odoo 已经安装、配置并准备好运行。下一步是让它作为无人值守的系统服务运行。我们将在下一节中详细探讨这一点。
- en: Setting up Odoo as a system service
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Odoo 为系统服务
- en: Odoo should run as a system service so that it is automatically started when
    the system boots and runs unattended, not requiring a user session.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 应该作为系统服务运行，以便在系统启动时自动启动并无人值守运行，不需要用户会话。
- en: In Debian/Ubuntu systems, the `init` system is responsible for starting services.
    Historically, Debian and its derived operating systems used `sysvinit`. This has
    changed, and recent Debian/Ubuntu systems use `systemd`. This is true for Ubuntu
    16.04 and later.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Debian/Ubuntu 系统中，`init` 系统负责启动服务。历史上，Debian 及其衍生操作系统使用 `sysvinit`。但现在已经改变，最近的
    Debian/Ubuntu 系统使用 `systemd`。这同样适用于 Ubuntu 16.04 及以后的版本。
- en: 'To confirm that `systemd` is used in your system, try the following command:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认您的系统中使用的是 `systemd`，请尝试以下命令：
- en: '[PRE21]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This command opens the documentation for the current `init` system in use, so
    you can check what is being used. At the top of the manual page, you should see
    `SYSTEMD` mentioned.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将打开当前正在使用的 `init` 系统的文档，以便您可以检查正在使用的内容。在手册页的顶部，您应该看到提到了 `SYSTEMD`。
- en: Let's continue with the `systemd` service configuration.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续配置 `systemd` 服务。
- en: Creating a systemd service
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 systemd 服务
- en: If the operating system is recent – such as Debian 8 and Ubuntu 16.04 or later
    – `systemd` should be the `init` system being used.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作系统较新，例如 Debian 8 和 Ubuntu 16.04 或更新的版本，`systemd` 应该是正在使用的 `init` 系统。
- en: 'To add a new service to the system, simply create a file describing it. Create
    a `/lib/systemd/system/odoo.service` file with the following content:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要向系统中添加新的服务，只需创建一个描述它的文件。创建一个包含以下内容的 `/lib/systemd/system/odoo.service` 文件：
- en: '[PRE22]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This service configuration file is based on the sample provided in the Odoo
    source code, which can be found at [https://github.com/odoo/odoo/blob/15.0/debian/odoo.service](https://github.com/odoo/odoo/blob/15.0/debian/odoo.service).
    The `ExecStart` option should be adjusted to the specific paths to use in this
    system.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此服务配置文件基于 Odoo 源代码中提供的示例，可以在 [https://github.com/odoo/odoo/blob/15.0/debian/odoo.service](https://github.com/odoo/odoo/blob/15.0/debian/odoo.service)
    找到。`ExecStart` 选项应调整为此系统要使用的特定路径。
- en: 'Next, the new service can be registered with the following command:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，可以使用以下命令将新服务注册：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To start this new service, run the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动这个新服务，请运行以下命令：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To check its status, use the following:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查其状态，请使用以下命令：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'And it can be stopped using the following command:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令停止它：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: When running Odoo as a system service, it is useful to confirm that the client
    can access it. Let's see how that can be done from the command line.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当以系统服务运行Odoo时，确认客户端可以访问它是有用的。让我们看看如何在命令行中做到这一点。
- en: Checking the Odoo service from the command line
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从命令行检查Odoo服务
- en: To confirm that the Odoo service is up and responsive, we can check that it
    is responding to requests. We should be able to get a response from it and see
    no errors in the log file.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认Odoo服务运行良好且响应迅速，我们可以检查它是否正在响应请求。我们应该能够从它那里获得响应，并在日志文件中看不到错误。
- en: 'We can check whether Odoo is responding to HTTP requests inside the server
    by using the following command:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令检查Odoo是否在服务器内部响应HTTP请求：
- en: '[PRE27]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In addition, to see what is in the `log` file, use the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要查看`log`文件中的内容，请使用以下命令：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To follow what is being added to the log file live, `tail -f` can be used,
    as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要实时跟踪添加到日志文件的内容，可以使用`tail -f`，如下所示：
- en: '[PRE29]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Odoo is now installed and running as a service. Next, the setup can be improved
    by adding a reverse proxy. The next section explains this.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo现在已安装并作为服务运行。接下来，可以通过添加反向代理来改进设置。下一节将解释这一点。
- en: Setting up an Nginx reverse proxy
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Nginx反向代理
- en: While Odoo itself can serve web pages, it is recommended to have a reverse proxy
    in front of it. A reverse proxy receives the traffic from the clients and then
    forwards it to the Odoo servers responding to them. Doing this has several benefits.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Odoo本身可以提供网页服务，但建议在其前面设置一个反向代理。反向代理接收来自客户端的流量，然后将它转发到响应客户端的Odoo服务器。这样做有几个好处。
- en: 'On the security side, it can provide the following:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在安全方面，它可以提供以下功能：
- en: Handle (and enforce) HTTPS protocols to encrypt traffic.
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理（并强制执行）HTTPS协议以加密流量。
- en: Hide the internal network characteristics.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 隐藏内部网络特征。
- en: Act as an application firewall, limiting the URLs accepted for processing.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充当应用程序防火墙，限制接受处理的URL。
- en: 'On the performance side, it can provide the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在性能方面，它可以提供以下功能：
- en: Cache static content, avoiding burdening the Odoo services with these requests
    and thereby reducing their load.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存静态内容，避免让Odoo服务承受这些请求的负担，从而减少其负载。
- en: Compress content to speed up loading time.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 压缩内容以加快加载时间。
- en: Act as a load balancer, distributing load between several Odoo services.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 充当负载均衡器，在多个Odoo服务之间分配负载。
- en: There are several options that can serve as a reverse proxy. Historically, **Apache**
    has been a popular choice. In recent years, Nginx has become widely used and is
    referred to in the Odoo official documentation. In our example, Nginx will be
    used for a reverse proxy, and the presented security and performance features
    will be implemented with it.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种选项可以作为反向代理使用。历史上，**Apache**是一个流行的选择。近年来，Nginx已被广泛使用，并在Odoo官方文档中提到。在我们的示例中，将使用Nginx进行反向代理，并使用它实现所提供的安全和性能功能。
- en: 'First, Nginx should be installed and set to be listening on the default HTTP
    port. It is possible that this port is already being used by another installed
    service. To ensure that the port is free and available, use the following command,
    which should result in an error:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，Nginx应该被安装并设置为监听默认的HTTP端口。可能这个端口已经被另一个已安装的服务占用。为确保端口空闲且可用，请使用以下命令，它应该导致错误：
- en: '[PRE30]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: If it does not return the previous error message, an installed service is using
    port `80` and should be disabled or uninstalled.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它没有返回之前的错误消息，则已安装的服务正在使用端口`80`，应该被禁用或卸载。
- en: For example, if an Apache server is installed, use the `sudo service apache2
    stop` command to stop it, or even uninstall it with the `sudo apt remove apache2`
    command.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果已安装Apache服务器，请使用`sudo service apache2 stop`命令停止它，或者甚至使用`sudo apt remove
    apache2`命令将其卸载。
- en: 'With port `80` free, Nginx can be installed and configured. The following command
    installs Nginx:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在端口`80`空闲的情况下，可以安装和配置Nginx。以下命令安装Nginx：
- en: '[PRE31]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: To confirm that `nginx` is working correctly, visit the server address with
    a browser or with the `curl http://localhost` command in the server. This should
    return a **Welcome to nginx** page.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 要确认`nginx`运行正确，请使用浏览器访问服务器地址或使用服务器上的`curl http://localhost`命令。这应该返回一个**欢迎来到nginx**页面。
- en: The Nginx configuration files are stored at `/etc/nginx/available-sites/` and
    are activated by adding them to `/etc/nginx/enabled-sites/`, which is usually
    done with a symbolic link to the file in the available sites directory.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx配置文件存储在`/etc/nginx/available-sites/`，通过将它们添加到`/etc/nginx/enabled-sites/`来激活，这通常是通过在可用站点目录中的文件创建符号链接来完成的。
- en: 'To prepare for the Odoo Nginx configuration, the default configuration should
    be removed and an Odoo configuration file added, as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备Odoo Nginx配置，应删除默认配置并添加Odoo配置文件，如下所示：
- en: '[PRE32]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Next, using an editor such as `nano` or `vi`, edit the configuration file as
    follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，使用`nano`或`vi`等编辑器，按照以下方式编辑配置文件：
- en: '[PRE33]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following example provides a basic Nginx configuration for Odoo:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例提供了一个基本的Nginx配置，用于Odoo：
- en: '[PRE34]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: At the top of the configuration file, there are the `upstream` configuration
    sections. These point to the Odoo service, which is listening on ports `8069`
    and `8072` by default. The `8069` port serves the web client and RPC requests,
    and `8072` serves the long polling requests used by instant messaging features.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件顶部，有`upstream`配置部分。这些指向默认监听端口`8069`和`8072`的Odoo服务。`8069`端口服务于Web客户端和RPC请求，而`8072`服务于即时消息功能使用的长轮询请求。
- en: The `server` configuration section defines what happens to the traffic received
    on the `80` default HTTP port. Here, it is redirected to upstream Odoo services
    with the `proxy_pass` configuration directive. Any traffic for the `/longpolling`
    address is passed on to the `odoochat` upstream, and the `/` remaining traffic
    is passed on to the `odoo` upstream.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`server`配置部分定义了在`80`默认HTTP端口上接收到的流量将发生什么。在这里，它通过`proxy_pass`配置指令重定向到上游Odoo服务。任何针对`/longpolling`地址的流量都会传递给`odoochat`上游，而剩余的`/`流量会传递给`odoo`上游。'
- en: A few `proxy_set_header` directives add information to the request header to
    let the Odoo backend service know that it is being proxied.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 几个`proxy_set_header`指令向请求头添加信息，以便让Odoo后端服务知道它正在被代理。
- en: Tip
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: For security reasons, it is important for Odoo to ensure that the `proxy_mode`
    parameter is set to `True`. The reason for this is that with Nginx, all requests
    hitting Odoo are coming from the Nginx server instead of the original remote IP
    address. Setting the `X-Forwarded-For` header in the proxy and enabling `--proxy-mode`
    allows Odoo to be aware of the original source of the request. Note that enabling
    `--proxy-mode` without forcing the header at the proxy level allows malicious
    clients to spoof their request address.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，确保Odoo的`proxy_mode`参数设置为`True`非常重要。这样做的原因是，在Nginx中，所有击中Odoo的请求都来自Nginx服务器，而不是原始的远程IP地址。在代理中设置`X-Forwarded-For`头并启用`--proxy-mode`允许Odoo了解请求的原始来源。请注意，在没有在代理级别强制设置头的情况下启用`--proxy-mode`允许恶意客户端伪造其请求地址。
- en: At the end of the configuration file, a couple of `gzip`-related directives
    can be found. These enable the compression of some files, thereby improving performance.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件的末尾，可以找到一些与`gzip`相关的指令。这些指令启用了某些文件的压缩，从而提高了性能。
- en: 'Once edited and saved, the Nginx configuration can be verified for correctness
    with the following command:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦编辑并保存，可以使用以下命令验证Nginx配置的正确性：
- en: '[PRE35]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Now, the Nginx service can reload the new configuration, using one of the following
    commands, depending on the `init` system used:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以使用以下命令之一重新加载Nginx服务的新配置，具体取决于使用的`init`系统：
- en: '[PRE36]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will have Nginx reload the configuration used without interrupting the
    service, as would have happened if `restart` was used instead of `reload`.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使Nginx在不中断服务的情况下重新加载配置，而如果使用`restart`而不是`reload`，则可能会发生中断。
- en: To be properly secured, Odoo should be accessed through HTTPS. The next section
    will address this.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保安全，应通过HTTPS访问Odoo。下一节将讨论这个问题。
- en: Configuring and enforcing HTTPS
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置和强制执行HTTPS
- en: Web traffic should not travel through the internet in plain text. When exposing
    the Odoo server on a network, HTTPS should be used to encrypt the traffic.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 网络流量不应以纯文本形式通过互联网传输。当在网络上公开Odoo服务器时，应使用HTTPS加密流量。
- en: In some cases, it might be acceptable to use a self-signed certificate. Keep
    in mind that using a self-signed certificate provides limited security. While
    it allows for traffic to be encrypted, it has some security limitations, such
    as not being able to prevent man-in-the-middle attacks, or not being able to present
    security warnings on recent web browsers.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，使用自签名证书可能是可接受的。请记住，使用自签名证书提供有限的安全性。虽然它允许加密流量，但它有一些安全限制，例如无法防止中间人攻击，或者无法在最新的网页浏览器上显示安全警告。
- en: A more robust solution is to use a certificate signed by a recognized authority.
    This is particularly important when running e-commerce websites. Another option
    is to use a **Let's Encrypt** certificate, and the **Certbot** program automates
    getting SSL certificates for it. See [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)
    to learn more.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更稳健的解决方案是使用由认可机构签发的证书。这在运行电子商务网站时尤为重要。另一个选项是使用 **Let's Encrypt** 证书，**Certbot**
    程序可以自动化获取该证书的 SSL 证书。有关更多信息，请参阅 [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)。
- en: Next, we will see how to create a self-signed certificate, in case this is the
    preferred choice.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何创建自签名证书，以防这是首选的选择。
- en: Creating a self-signed SSL certificate
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建自签名 SSL 证书
- en: A certificate needs to be installed on Nginx to enable SSL. We can either have
    one provided by a certificate authority or generate a self-signed one.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx 需要安装一个证书来启用 SSL。我们可以选择使用证书机构提供的证书，或者生成一个自签名的证书。
- en: 'To create a self-signed certificate, use these commands:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建自签名证书，请使用以下命令：
- en: '[PRE37]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding code creates an `/etc/ssl/nginx` directory and a passwordless
    SSL certificate. When running the `openssl` command, the user will be asked for
    some additional information, and then a certificate and key files will be generated.
    Finally, the ownership of these files is given to the `www-data` user, which is
    used to run the web server.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码创建了一个 `/etc/ssl/nginx` 目录和一个无密码的 SSL 证书。当运行 `openssl` 命令时，用户将被要求提供一些额外的信息，然后生成证书和密钥文件。最后，这些文件的拥有权被赋予
    `www-data` 用户，该用户用于运行网页服务器。
- en: With an SSL certificate ready to be used, the next step is to install it on
    the Nginx service.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好要使用的 SSL 证书后，下一步是将它安装到 Nginx 服务上。
- en: Configuring HTTPS access on Nginx
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Nginx 上配置 HTTPS 访问
- en: To enforce HTTPS, an SSL certificate is needed. The Nginx service will use it
    to encrypt the traffic between the server and the web browser.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为了强制使用 HTTPS，需要一个 SSL 证书。Nginx 服务将使用它来加密服务器和网页浏览器之间的流量。
- en: 'For this, the Odoo Nginx configuration file needs to be revisited. Edit it
    to replace the `server` directive with the following:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一点，需要重新检查 Odoo Nginx 的配置文件。编辑它，将 `server` 指令替换为以下内容：
- en: '[PRE38]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: With this change, requests for the `http://` address are converted into `https://`
    equivalent addresses, ensuring that the non-secure transport is not used by accident.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个更改，对 `http://` 地址的请求将被转换为 `https://` 相应的地址，确保不会意外地使用非安全传输。
- en: 'The HTTPS service still needs to be configured. This can be done by adding
    the following `server` directive to the configuration:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS 服务仍然需要配置。这可以通过向配置中添加以下 `server` 指令来完成：
- en: '[PRE39]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This additional `server` directive listens to the HTTPS port and uses the certificate
    files at `/etc/ssl/nginx/` to encrypt the traffic.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这个额外的 `server` 指令监听 HTTPS 端口，并使用 `/etc/ssl/nginx/` 下的证书文件来加密流量。
- en: Note
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The Nginx configuration proposed here is based on the official documentation
    found at [https://www.odoo.com/documentation/15.0/administration/install/deploy.html#https](https://www.odoo.com/documentation/15.0/administration/install/deploy.html#https).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这里提出的 Nginx 配置基于在 [https://www.odoo.com/documentation/15.0/administration/install/deploy.html#https](https://www.odoo.com/documentation/15.0/administration/install/deploy.html#https)
    找到的官方文档。
- en: 'Once this configuration is reloaded, Odoo should work through HTTPS only, as
    shown in the following commands:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦重新加载此配置，Odoo 应该只通过 HTTPS 运行，如下面的命令所示：
- en: '[PRE40]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Encrypting the web traffic is not the only thing Nginx can do for us. It can
    also help to reduce the load on the Odoo upstream service. Let's look at this
    in detail in the next section.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 加密网络流量并不是 Nginx 为我们做的唯一事情。它还可以帮助我们减少 Odoo 上游服务的负载。让我们在下一节中详细探讨这一点。
- en: Caching static content
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 缓存静态内容
- en: Nginx can cache the static files served – this means that later requests for
    the cached files are served directly from Nginx and don't need to be requested
    by the upstream Odoo service.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Nginx可以缓存提供的静态文件——这意味着后续对缓存文件的请求将直接由Nginx提供，无需上游Odoo服务请求。
- en: This not only improves response time but also improves the Odoo service capacity
    to serve more users, as it is now focused on responding to dynamic requests.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅提高了响应时间，还提高了Odoo服务能力，以服务更多用户，因为它现在专注于响应动态请求。
- en: 'To enable static content caching, add the following section to the Nginx configuration
    file after the `# comming gzip` directives:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用静态内容缓存，请在Nginx配置文件中`# comming gzip`指令之后添加以下部分：
- en: '[PRE41]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: With this configuration, static data is cached for 60 minutes. Odoo static content
    is defined as any file served from the `/web/static` path.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此配置，静态数据将缓存60分钟。Odoo静态内容定义为从`/web/static`路径提供的任何文件。
- en: At this point, the server should be fully functional, with Nginx handling requests
    through HTTPS and then handing them over to the Odoo service for processing.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 到这一点，服务器应该完全功能，Nginx通过HTTPS处理请求，然后将它们传递给Odoo服务进行处理。
- en: The Odoo service will require maintenance and updates, so the next section discusses
    how to do this.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo服务需要维护和更新，所以下一节将讨论如何进行此操作。
- en: Maintaining the Odoo service and modules
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 维护Odoo服务和模块
- en: Once the Odoo server is up and running, it is expected for some maintenance
    to be needed – for example, installing or updating modules.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Odoo服务器启动并运行，预计需要一些维护工作——例如，安装或更新模块。
- en: These actions involve some risk for the production system, and it is best to
    test them in a staging environment before applying in production. Let's start
    with a basic recipe to create a staging environment.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作涉及生产系统的一些风险，因此在生产环境中应用之前，最好在预发布环境中进行测试。让我们从一个基本的配方开始，创建一个预发布环境。
- en: Creating a staging environment
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建预发布环境
- en: The staging environment should be a copy of the production system and ideally
    should have its own dedicated server.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 预发布环境应该是生产系统的副本，理想情况下应该有自己的专用服务器。
- en: A simplification, which is safe enough for most cases, is to have the staging
    environment in the same server as the production system.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 一种简化方法，对于大多数情况来说足够安全，是将预发布环境放在与生产系统相同的服务器上。
- en: 'To create a copy of the `odoo-prod` production database as the `odoo-stage`
    database, use the following commands:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要将`odoo-prod`生产数据库的副本作为`odoo-stage`数据库创建，请使用以下命令：
- en: '[PRE42]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Note that some configurations are copied over, such as the connections to email
    servers, and you may want to have additional commands disabling them. The specific
    actions needed to do this depend on the database setup, but it's likely they can
    be automated by a script. For this, it is good to know that the `psql` command
    can be used to run SQL directly from the command line, for example, `psql -d odoo-stage
    -c "<SQL command>"`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，一些配置被复制过来，例如连接到电子邮件服务器，您可能希望有额外的命令来禁用它们。具体需要采取的操作取决于数据库设置，但很可能可以通过脚本自动化。为此，了解`psql`命令可以直接从命令行运行SQL很有用，例如，`psql
    -d odoo-stage -c "<SQL command>"`。
- en: Tip
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'A database copy can be made in a much faster way using the following command:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令以更快的速度创建数据库副本：
- en: '`$ createdb --owner=odoo --template=odoo-prod odoo-stage`.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`$ createdb --owner=odoo --template=odoo-prod odoo-stage`。'
- en: The caveat here is that in order for it to run, there can't be any open connections
    to the `odoo-prod` database, so the Odoo production server needs to be stopped
    before the command can be used.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的是，为了使其运行，不能有任何对`odoo-prod`数据库的开放连接，因此在使用命令之前，需要停止Odoo生产服务器。
- en: Now that we have a copy of the production database for staging, the next step
    is to create a copy of the source to be used. This can be in a subdirectory called
    `/opt/odoo/stage`, for example.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有了生产数据库的副本用于预发布，下一步是创建要使用的源副本。例如，这可以放在名为`/opt/odoo/stage`的子目录中。
- en: 'The following shell commands copy the relevant files and create the staging
    environment:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 以下shell命令复制相关文件并创建预发布环境：
- en: '[PRE43]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Finally, a specific Odoo configuration file should be prepared for the staging
    environment, as the path to the files used is different. The HTTP ports used should
    also be changed so that the staging environment can run at the same time as the
    main production service.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，应该为预发布环境准备一个特定的Odoo配置文件，因为文件使用的路径不同。使用的HTTP端口也应更改，以便预发布环境可以与主生产服务同时运行。
- en: This staging environment can now be used for testing purposes. So, the next
    section describes how a production update would be applied.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个预演环境可以用于测试目的。因此，下一节将描述如何应用生产更新。
- en: Updating Odoo source code
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更新Odoo源代码
- en: Odoo and custom module code will usually have versions managed through Git.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo和自定义模块的代码通常通过Git进行版本管理。
- en: 'To get the latest Odoo source code from the GitHub repository, use the `git
    pull` command. Before doing that, the `git tag` command can be used to create
    a tag for the current commit being used so that it''s easier to revert the code
    update, as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 要从GitHub仓库获取最新的Odoo源代码，请使用`git pull`命令。在此之前，可以使用`git tag`命令为当前使用的提交创建一个标签，以便更容易回滚代码更新，如下所示：
- en: '[PRE44]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: For code changes to take effect, the Odoo service should be restarted. For data
    file changes to take effect, an upgrade to the modules is needed.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 要使代码更改生效，应重启Odoo服务。要使数据文件更改生效，需要升级模块。
- en: Tip
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: As a general rule, changes to Odoo stable versions are considered code fixes,
    and it's therefore not often worth the risk of performing module upgrades. If
    you need to perform a module upgrade, however, this can be achieved using the
    `-u <module>` additional option (or `-u base`), which upgrades all modules.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一般规则，对Odoo稳定版本的更改被认为是代码修复，因此通常不值得冒进行模块升级的风险。然而，如果你需要执行模块升级，可以使用`-u <module>`附加选项（或`-u
    base`），这将升级所有模块。
- en: 'We can test the actions using the staging database before applying them in
    the production database, as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 在将操作应用到生产数据库之前，我们可以使用预演数据库来测试这些操作，如下所示：
- en: '[PRE45]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This Odoo staging server was configured to listen on port `8080`. We can navigate
    there with our web browser to check whether the upgraded code works correctly.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Odoo预演服务器被配置为监听端口`8080`。我们可以用我们的网络浏览器导航到那里，检查升级后的代码是否正确工作。
- en: 'If something goes wrong, we can revert the code to an earlier version with
    the following commands:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现问题，可以使用以下命令将代码回滚到早期版本：
- en: '[PRE46]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'If everything works as expected, it should be safe to perform an upgrade on
    the production service, which is usually done by restarting it. If you want to
    perform an actual module upgrade, the suggested approach is to stop the server,
    run the upgrade, and then restart the service, as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切按预期进行，那么在生产服务上执行升级应该是安全的，这通常是通过重启来完成的。如果你想执行实际的模块升级，建议的方法是停止服务器，运行升级，然后重启服务，如下所示：
- en: '[PRE47]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Making a backup of the database before running an upgrade is also advised.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行升级之前备份数据库也是建议的。
- en: In this section, you learned how to create a staging environment alongside the
    main Odoo environment to be used for testing. Updates to Odoo code or to custom
    modules can be tried on the staging environment before applying them in the production
    system. This allows us to identify and correct any issues you might find with
    the upgrades ahead of time.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你学习了如何创建一个与主Odoo环境并行的预演环境，用于测试。在将更新应用到生产系统之前，可以在预演环境中尝试对Odoo代码或自定义模块的更新。这使我们能够在升级前识别并纠正可能发现的问题。
- en: Summary
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the additional steps required for setting
    up and running Odoo on a Debian-based production server. We looked at the most
    important settings in the configuration file, and we learned how to take advantage
    of the multiprocessing mode.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了在基于Debian的生产服务器上设置和运行Odoo所需的额外步骤。我们查看配置文件中的最重要的设置，并学习了如何利用多进程模式。
- en: For improved security and scalability, we also learned how to use Nginx as a
    reverse proxy in front of Odoo server processes and how to configure it to use
    HTTPS-encrypted traffic.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 为了提高安全性和可扩展性，我们还学习了如何在前端Odoo服务器进程前使用Nginx作为反向代理，以及如何配置它以使用HTTPS加密流量。
- en: Finally, some advice was provided on how to create a staging environment and
    perform updates to Odoo code or custom modules.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，提供了一些关于如何创建预演环境以及如何对Odoo代码或自定义模块进行更新的建议。
- en: This covers the essentials of what's needed to run an Odoo server and provide
    a reasonably stable and secure service to your users. We can now use it to host
    our library management system!
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这涵盖了运行Odoo服务器和为用户提供一个相对稳定和安全的服务所需的基本要素。现在我们可以用它来托管我们的图书馆管理系统！
- en: Further reading
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: To learn more about Odoo, you should take a look at the official documentation
    at [https://www.odoo.com/documentation](https://www.odoo.com/documentation). Some
    topics are covered in more detail there, and you'll find topics not covered in
    this book.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 Odoo 的信息，你应该查看官方文档 [https://www.odoo.com/documentation](https://www.odoo.com/documentation)。那里有更详细的某些主题，你还会发现本书未涉及的主题。
- en: There are also other published books on Odoo that you might find useful. **Packt
    Publishing** has a few in its catalog, and in particular, *Odoo Development Cookbook*
    provides more advanced material on topics not discussed in this book. At the time
    of writing, the last edition available was for Odoo 14, which is available at
    [https://www.packtpub.com/product/odoo-14-development-cookbook-fourth-edition/9781800200319](https://www.packtpub.com/product/odoo-14-development-cookbook-fourth-edition/9781800200319).
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一些关于 Odoo 的已出版书籍可能对你有帮助。**Packt Publishing** 在其目录中收录了一些，特别是 *Odoo 开发食谱*
    提供了更多关于本书未讨论主题的进阶材料。在撰写本文时，可用的最后一版是为 Odoo 14 定制的，可在 [https://www.packtpub.com/product/odoo-14-development-cookbook-fourth-edition/9781800200319](https://www.packtpub.com/product/odoo-14-development-cookbook-fourth-edition/9781800200319)
    获取。
- en: Finally, Odoo is an open source product with a vibrant community. Getting involved,
    asking questions, and contributing is a great way not only to learn but also to
    build a business network. With this in mind, we should also mention the **Odoo
    Community Association** (**OCA**), which promotes collaboration and quality open
    source code. You can learn more about it at [https://odoo-community.org/](https://odoo-community.org/)
    or [https://github.com/OCA](https://github.com/OCA).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Odoo 是一个具有活跃社区的开源产品。参与其中，提问和贡献是一个不仅能够学习，还能建立商业网络的绝佳方式。考虑到这一点，我们还应该提到 **Odoo
    社区协会**（**OCA**），它促进协作和高质量的开源代码。你可以在 [https://odoo-community.org/](https://odoo-community.org/)
    或 [https://github.com/OCA](https://github.com/OCA) 上了解更多信息。
- en: Enjoy your Odoo journey!
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 享受你的 Odoo 之旅！
