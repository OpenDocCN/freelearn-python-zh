- en: Chapter 4. The Façade Pattern – Being Adaptive with Façade
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章. 外观模式 – 使用外观实现适应性
- en: In the previous chapter, you learned about the Factory design pattern. We discussed
    about three variations—Simple Factory, Factory method, and Abstract Factory pattern.
    You also learned how each of them is used in the real world and looked at Python
    implementations. We also compared the Factory method with Abstract Factory patterns
    and listed the pros and cons. As we are now aware, both the Factory design pattern
    and Singleton design pattern ([Chapter 2](part0022_split_000.html#KVCC1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 2. The Singleton Design Pattern"), *The Singleton Design Pattern*) are
    classified as Creational design patterns.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了工厂设计模式。我们讨论了三种变体——简单工厂、工厂方法和抽象工厂模式。你还学习了它们在现实世界中的应用，并查看了解决方案。我们还比较了工厂方法和抽象工厂模式，并列出了它们的优缺点。正如我们所知，工厂设计模式和单例设计模式（[第2章](part0022_split_000.html#KVCC1-5ae934a69a004514b92177e2702ed0a9
    "第2章. 单例设计模式")，*单例设计模式*）都被归类为创建型设计模式。
- en: In this chapter, we will move ahead and learn about another type of design pattern,
    the Structural design pattern. We will get introduced to the Façade design pattern
    and how it is used in software application development. We will work with a sample
    use case and implement it in Python v3.5.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续学习另一种类型的设计模式，即结构设计模式。我们将介绍外观设计模式及其在软件开发中的应用。我们将通过一个示例用例并使用Python v3.5来实现它。
- en: 'In brief, we will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简要来说，在本章中我们将涵盖以下主题：
- en: An introduction to Structural design patterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构设计模式的简介
- en: An understanding of the Façade design pattern with a UML diagram
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用UML图理解外观设计模式
- en: A real-world use case with the Python v3.5 code implementation
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个带有Python v3.5代码实现的现实世界用例
- en: The Façade pattern and principle of least knowledge
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外观模式与最少知识原则
- en: Understanding Structural design patterns
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解结构设计模式
- en: 'The following points will help us understand more about Structural patterns:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点将帮助我们更好地理解结构模式：
- en: Structural patterns describe how objects and classes can be combined to form
    larger structures.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构模式描述了对象和类如何组合成更大的结构。
- en: Structural patterns can be thought of as design patterns that ease the design
    by identifying simpler ways to realize or demonstrate relationships between entities.
    Entities mean objects or classes in the object-oriented world.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构模式可以被视为通过识别实现或展示实体之间关系更简单的方法来简化设计的设计模式。实体在面向对象世界中意味着对象或类。
- en: While the Class patterns describe abstraction with the help of inheritance and
    provide a more useful program interface, Object patterns describe how objects
    can be associated and composed to form larger objects. Structural patterns are
    a combination of Class and Object patterns.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当类模式通过继承帮助描述抽象并提供更有用的程序接口时，对象模式描述了对象如何关联和组合以形成更大的对象。结构模式是类模式和对象模式的结合。
- en: The following are a few examples of different Structural design patterns. You'd
    notice how each of these involve interaction between objects or classes to achieve
    high-level design or architectural goals.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些不同结构模式的示例。你会注意到，这些模式中的每一个都涉及到对象或类之间的交互，以实现高级设计或架构目标。
- en: 'Some of the examples of Structural design patterns are as follows:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 结构设计模式的以下是一些示例：
- en: '**Adapter pattern**: Adapting an interface to another one so that it meets
    the client''s expectations. It tries to match interfaces of different classes
    based on the client''s needs.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**适配器模式**：将一个接口适配到另一个接口，以满足客户端的期望。它试图根据客户端的需求匹配不同类的接口。'
- en: '**Bridge pattern**: This decouples an object''s interface from its implementation
    so that both can work independently.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**桥接模式**：将对象的接口与其实现解耦，以便它们可以独立工作。'
- en: '**Decorator pattern**: This defines additional responsibilities for an object
    at runtime or dynamically. We add certain attributes to objects with an interface.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**装饰器模式**：在运行时或动态地为对象定义额外的职责。我们通过接口为对象添加某些属性。'
- en: There are a few more Structural patterns that you will learn in this book. So,
    let's start by first taking up the Façade design pattern.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，你还将学习到一些更多的结构模式。因此，让我们首先从外观设计模式开始。
- en: Understanding the Façade design pattern
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解外观设计模式
- en: The façade is generally referred to as the face of the building, especially
    an attractive one. It can be also referred to as a behavior or appearance that
    gives a false idea of someone's true feelings or situation. When people walk past
    a façade, they can appreciate the exterior face but aren't aware of the complexities
    of the structure within. This is how a façade pattern is used. Façade hides the
    complexities of the internal system and provides an interface to the client that
    can access the system in a very simplified way.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 门面通常被称为建筑的立面，尤其是吸引人的立面。它也可以指一种行为或外观，给人一种关于某人真实感受或情况的错误印象。当人们走过门面时，他们可以欣赏到外观，但并不了解内部结构的复杂性。这就是门面模式的使用方式。门面隐藏了内部系统的复杂性，并为客户端提供了一个可以非常简化的方式访问系统的接口。
- en: Consider the example of a storekeeper. Now, when you, as a customer, visit a
    store to buy certain items, you're not aware of the layout of the store. You typically
    approach the storekeeper, who is well aware of the store system. Based on your
    requirements, the storekeeper picks up items and hands them over to you. Isn't
    this easy? The customer need not know how the store looks and s/he gets the stuff
    done through a simple interface, the storekeeper.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个店主的例子。现在，当你作为顾客去商店购买某些商品时，你并不了解商店的布局。你通常会去找店主，店主对商店系统非常了解。根据你的需求，店主挑选商品并将其交给你。这不是很容易吗？顾客不需要知道商店的外观，他们可以通过一个简单的接口，即店主，来完成所需的事情。
- en: 'The Façade design pattern essentially does the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 门面设计模式本质上执行以下操作：
- en: It provides a unified interface to a set of interfaces in a subsystem and defines
    a high-level interface that helps the client use the subsystem in an easy way.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一个统一的接口，用于访问子系统中的多个接口，并定义了一个高级接口，帮助客户端以简单的方式使用子系统。
- en: Façade discusses representing a complex subsystem with a single interface object.
    It doesn't **encapsulate** the subsystem but actually combines the underlying
    subsystems.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 门面讨论了用一个单一的接口对象来表示复杂的子系统。它并不**封装**子系统，而是实际上组合了底层子系统。
- en: It promotes the decoupling of the implementation with multiple clients.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它促进了实现与多个客户端的解耦。
- en: A UML class diagram
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UML类图
- en: 'We will now discuss the Façade pattern with the help of the following UML diagram:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将借助以下UML图来讨论门面模式：
- en: '![A UML class diagram](img/00015.jpeg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![UML类图](img/00015.jpeg)'
- en: 'As we observe the UML diagram, you''ll realize that there are three main participants
    in this pattern:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们观察UML图时，你会意识到在这个模式中有三个主要参与者：
- en: '**Façade**: The main responsibility of a façade is to wrap up a complex group
    of subsystems so that it can provide a pleasing look to the outside world.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**门面**：门面的主要责任是将一组复杂的子系统封装起来，以便它可以为外界提供一个令人愉悦的外观。'
- en: '**System**: This represents a set of varied subsystems that make the whole
    system compound and difficult to view or work with.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**系统**：这代表了一组不同的子系统，使整个系统变得复杂，难以观察或操作。'
- en: '**Client**: The client interacts with the Façade so that it can easily communicate
    with the subsystem and get the work completed. It doesn''t have to bother about
    the complex nature of the system.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：客户端与门面交互，以便它可以轻松地与子系统通信并完成工作。它不必担心系统的复杂性质。'
- en: You will now learn a little more about the three main participants from the
    data structure's perspective.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在将从数据结构的角度了解三个主要参与者的一些更多信息。
- en: Façade
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 门面
- en: 'The following points will give us a better idea of Façade:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下要点将使我们更好地了解门面：
- en: It is an interface that knows which subsystems are responsible for a request
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个接口，知道哪些子系统负责处理请求
- en: It delegates the client's requests to the appropriate subsystem objects using
    composition
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过组合使用将客户端的请求委派给适当的子系统对象。
- en: For example, if the client is looking for some work to be accomplished, it need
    not have to go to individual subsystems but can simply contact the interface (Façade)
    that gets the work done.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果客户端需要完成某些工作，它不需要去访问各个子系统，而可以直接联系完成工作的接口（门面）。
- en: System
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统
- en: 'In the Façade world, System is an entity that performs the following:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在门面世界中，系统是一个执行以下功能的实体：
- en: It implements subsystem functionality and is represented by a class. Ideally,
    a System is represented by a group of classes that are responsible for different
    operations.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它实现了子系统功能，并由一个类表示。理想情况下，系统由一组负责不同操作的类组成。
- en: It handles the work assigned by the Façade object but has no knowledge of the
    façade and keeps no reference to it.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它处理外观对象分配的工作，但没有关于外观的知识，也不保留对其的引用。
- en: For instance, when the client requests the Façade for a certain service, Façade
    chooses the right subsystem that delivers the service based on the type of service.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当客户端请求外观提供某种服务时，外观会根据服务类型选择提供该服务的正确子系统。
- en: Client
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端
- en: 'Here''s how we can describe the client:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面我们来描述一下客户端：
- en: The client is a class that instantiates the Façade
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端是一个实例化外观的类
- en: It makes requests to the Façade to get the work done from the subsystems
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户端会向外观发送请求，以从子系统完成工作
- en: Implementing the Façade pattern in the real world
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在现实世界中实现外观模式
- en: To demonstrate the applications of the Façade pattern, let's take an example
    that we'd have experienced in our lifetime.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示外观模式的用途，让我们举一个我们在生活中可能遇到过的例子。
- en: Consider that you have a marriage in your family and you are in charge of all
    the arrangements. Whoa! That's a tough job on your hands. You have to book a hotel
    or place for marriage, talk to a caterer for food arrangements, organize a florist
    for all the decorations, and finally handle the musical arrangements expected
    for the event.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你家里有一场婚礼，你负责所有的安排。哇！这是一项艰巨的任务。你必须预订婚礼的酒店或场所，与餐饮服务商沟通食物安排，组织花卉装饰，最后处理活动所需的音乐安排。
- en: In yesteryears, you'd have done all this by yourself, for example by talking
    to the relevant folks, coordinating with them, negotiating on the pricing, but
    now life is simpler. You go and talk to an event manager who handles this for
    you. S/he will make sure that they talk to the individual service providers and
    get the best deal for you.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，你可能需要自己完成所有这些工作，例如通过与相关人员交谈、与他们协调、协商价格，但现在生活更简单了。你去找一个活动经理，他会为你处理这些事情。他/她会确保与个别服务提供商交谈，为你争取到最好的交易。
- en: 'Putting it in the Façade pattern perspective:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从外观模式的角度来看：
- en: '**Client**: It''s you who need all the marriage preparations to be completed
    in time before the wedding. They should be top class and guests should love the
    celebrations.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端**：就是你，需要在婚礼前及时完成所有的婚礼准备工作。这些准备工作应该是顶级的，客人应该喜欢庆祝活动。'
- en: '**Façade**: The event manager who''s responsible for talking to all the folks
    that need to work on specific arrangements such as food, and flower decorations,
    among others'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**外观**：负责与所有需要处理特定安排的人（如食物、花卉装饰等）进行沟通的事件经理'
- en: '**Subsystems**: They represent the systems that provide services such as catering,
    hotel management, and flower decorations'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**子系统**：它们代表提供餐饮、酒店管理和花卉装饰等服务系统'
- en: Let's develop an application in Python v3.5 and implement this use case. We
    start with the client first. It's you! Remember, you're the one who has been given
    the responsibility to make sure that the marriage preparations are done and the
    event goes fine!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用Python 3.5开发一个应用程序并实现这个用例。我们首先从客户端开始。记住，你就是那个被赋予确保婚礼准备工作完成并确保活动顺利进行的人！
- en: 'Let''s now move ahead and talk about the Façade class. As discussed earlier,
    the Façade class simplifies the interface for the client. In this case, `EventManager`
    acts as a façade and simplifies the work for `You`. Façade talks to the subsystems
    and does all the booking and preparations for the marriage on your behalf. Here
    is the Python code for the `EventManager` class:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续前进，谈谈外观类。如前所述，外观类简化了客户端的接口。在这种情况下，`EventManager`充当外观，简化了你的工作。外观与子系统交谈，代表你完成婚礼的所有预订和准备工作。以下是`EventManager`类的Python代码：
- en: '[PRE0]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that we''re done with the Façade and client, let''s dive into the subsystems.
    We have developed the following classes for this scenario:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经完成了外观和客户端的开发，让我们深入到子系统。为此场景，我们已经开发了以下类：
- en: '`Hotelier` is for the hotel bookings. It has a method to check whether the
    hotel is free on that day (`__isAvailable`).'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Hotelier`用于酒店预订。它有一个方法来检查那天酒店是否空闲（`__isAvailable`）。'
- en: The `Florist` class is responsible for flower decorations. Florist has the `setFlowerRequirements()`
    method to be used to set the expectations on the kind of flowers needed for the
    marriage decoration.
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Florist`类负责花卉装饰。Florist类有`setFlowerRequirements()`方法，用于设置对婚礼装饰所需花卉的期望。'
- en: The `Caterer` class is used to deal with the caterer and is responsible for
    the food arrangements. Caterer exposes the `setCuisine()` method to accept the
    type of cuisine to be served at the marriage.
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Caterer` 类用于处理餐饮服务，并负责食物安排。Caterer 提供了 `setCuisine()` 方法来接受婚礼上要提供的菜系。'
- en: The `Musician` class is designed for musical arrangements at the marriage. It
    uses the `setMusicType()` method to understand the music requirements for the
    event.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Musician` 类是为婚礼音乐编排设计的。它使用 `setMusicType()` 方法来理解活动的音乐需求。'
- en: 'Let us now look at the `Hotelier` object, followed by `Florist` object and
    their methods:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们现在看看 `Hotelier` 对象，然后是 `Florist` 对象及其方法：
- en: '[PRE1]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, you're being clever here and passing on the responsibility to the event
    manager, aren't you? Let's now look at the `You` class. In this example, you create
    an object of the `EventManager` class so that the manager can work with the relevant
    folks on marriage preparations while you relax.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你在这里很聪明，把责任转给了事件经理，不是吗？现在让我们看看 `You` 类。在这个例子中，你创建了一个 `EventManager` 类的实例，这样经理就可以在婚礼准备期间与相关人员合作，而你则可以放松。
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The output of the preceding code is given here:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下所示：
- en: '![Implementing the Façade pattern in the real world](img/00016.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![在现实世界中实现外观模式](img/00016.jpeg)'
- en: 'We can relate to the Facade pattern with the real world scenario, in the following
    way:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过以下方式将外观模式与现实世界场景联系起来：
- en: The `EventManager` class is the Façade that simplifies the interface for `You`
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventManager` 类是简化 `You` 接口的外观'
- en: '`EventManager` uses composition to create objects of the subsystems such as
    `Hotelier`, `Caterer`, and others'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`EventManager` 使用组合来创建子系统如 `Hotelier`、`Caterer` 等的对象'
- en: The principle of least knowledge
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最少知识原则
- en: As you have learned in the initial parts of the chapter, the Façade provides
    a unified system that makes subsystems easy to use. It also decouples the client
    from the subsystem of components. The design principle that is employed behind
    the Façade pattern is the **principle of least knowledge**.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在本章的初始部分所学的，外观提供了一个统一的系统，使得子系统易于使用。它还使客户端与组件子系统解耦。外观模式背后的设计原则是**最少知识原则**。
- en: 'The principle of least knowledge guides us to reduce the interactions between
    objects to just a few *friends* that are close enough to you. In real terms, it
    means the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 最少知识原则引导我们减少对象之间的交互，仅限于几个足够接近你的“朋友”。在实际情况中，这意味着以下内容：
- en: When designing a system, for every object created, one should look at the number
    of classes that it interacts with and the way in which the interaction happens.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设计系统时，对于每个创建的对象，都应该考虑它与多少个类交互以及交互的方式。
- en: Following the principle, make sure that we avoid situations where there are
    many classes created that are tightly coupled to each other.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵循此原则，确保我们避免出现创建许多紧密耦合的类的情况。
- en: If there are a lot of dependencies between classes, the system becomes hard
    to maintain. Any changes in one part of the system can lead to unintentional changes
    to other parts of the system, which means that the system is exposed to regressions
    and this should be avoided.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果类之间存在很多依赖关系，系统就难以维护。系统任何一部分的变化都可能导致其他部分出现意外的变化，这意味着系统容易受到回归的影响，这应该避免。
- en: Frequently asked questions
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常见问题
- en: Q1\. What is the Law of Demeter and how is it related to the Factory pattern?
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Q1. 迪米特法则是什么，它与工厂模式有何关系？
- en: 'A: The Law of Demeter is a design guideline that talks about the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: A：迪米特法则是一种设计指南，它讨论以下内容：
- en: Each unit should have only limited knowledge of other units in the system
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个单元应该只对系统中的其他单元有有限的知识
- en: A unit should talk to its friends only
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个单元应该只与其朋友交流
- en: A unit should not know about the internal details of the object that it manipulates
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个单元不应该了解它所操作对象的内部细节
- en: The principle of least knowledge and Law of Demeter are the same and both point
    to the philosophy of *loose coupling*. The principle of least knowledge fits the
    use case of the Façade pattern as the name is intuitive and the word principle
    acts as a guideline, not being strict, and being useful only when needed.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最少知识原则和迪米特法则相同，两者都指向松耦合的哲学。最少知识原则符合外观模式的使用场景，因为名称直观，原则一词作为指导，不是严格的，只有在需要时才有用。
- en: Q2\. Can there be multiple Façades for a subsystem?
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Q2. 一个子系统可以有多个外观吗？
- en: 'A: Yes, one could implement more than one façade for a group of subsystem components.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 是的，可以为一组子系统实现多个外观。'
- en: Q3\. What are the disadvantages of the principle of least knowledge?
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Q3. 最少知识原则的缺点是什么？
- en: 'A: A Façade provides a simplified interface for the clients to interact with
    subsystems. In the spirit of providing a simplified interface, an application
    can have multiple unnecessary interfaces that add to the complexity of the system
    and reduce runtime performance.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 面向对象提供了一个简化的接口，供客户端与子系统交互。在提供简化接口的精神下，一个应用程序可能包含多个不必要的接口，这些接口增加了系统的复杂性并降低了运行时性能。'
- en: Q4\. Can the client access the subsystems independently?
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Q4. 客户能否独立访问子系统？
- en: 'A: Yes, in fact, the Façade pattern provides simplified interfaces so that
    the client need not be bothered about the complexity of the subsystems.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 是的，事实上，外观模式提供了简化的接口，这样客户端就不必担心子系统的复杂性。'
- en: Q5\. Does the Façade add any functionality of its own?
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Q5. 外观是否添加了任何自己的功能？
- en: 'A: A Façade can add its "thinking" to the subsystems, such as making sure that
    the order of innovation for subsystems can be decided by the Façade.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'A: 外观可以为子系统添加其“思考”，例如确保子系统的创新顺序可以由外观来决定。'
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We began the chapter by first understanding the Structural design patterns.
    You then learned about the Façade design pattern and the context in which it's
    used. We understood the basis of Façade and how it is effectively used in software
    architecture. We looked at how Façade design patterns create a simplified interface
    for clients to use. They simplify the complexity of subsystems so that the client
    benefits.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先通过理解结构设计模式开始了本章。然后，您学习了外观设计模式及其使用场景。我们了解了外观的基础以及它在软件架构中的有效应用。我们探讨了外观设计模式如何为客户创建一个简化的接口。它们简化了子系统的复杂性，从而使客户端受益。
- en: The Façade doesn't encapsulate the subsystem, and the client is free to access
    the subsystems even without going through the Façade. You also learned the pattern
    with a UML diagram and sample code implementation in Python v3.5\. We understood
    the principle of least knowledge and how its philosophy governs the Façade design
    patterns.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 外观并没有封装子系统，客户端可以自由访问子系统，甚至无需通过外观。您还通过UML图和Python 3.5的示例代码实现了该模式。我们理解了最少知识原则及其哲学如何指导外观设计模式。
- en: We also covered a section on FAQs that would help you get more ideas on the
    pattern and its possible disadvantages. We're now geared up to learn more Structural
    patterns in the chapters to come.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还涵盖了一个关于常见问题解答的部分，这将帮助您获得更多关于该模式和其可能缺点的想法。我们现在准备在接下来的章节中学习更多的结构模式。
