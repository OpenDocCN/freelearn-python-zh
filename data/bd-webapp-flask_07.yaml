- en: Chapter 7. If Ain't Tested, It Ain't Game, Bro!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。如果没有经过测试，那就不是游戏，兄弟！
- en: Does the software you write have quality? How do you attest that?
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 您编写的软件是否具有质量？您如何证明？
- en: Software is usually written according to certain requested needs, be it bug
    reports, feature and enhancement tickets, or whatever. To have quality, the software
    must satisfy these needs wholly and precisely; that is, it should do what is expected
    of it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通常根据特定的需求编写软件，无论是错误报告、功能和增强票据，还是其他。为了具有质量，软件必须完全和准确地满足这些需求；也就是说，它应该做到符合预期。
- en: Just as you would push a button to know what it does (given you do not have
    a manual), you have to test your code to know what it does or to attest what it
    should do. That's how you assure **software quality**.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 就像您会按下按钮来了解它的功能一样（假设您没有手册），您必须测试您的代码以了解它的功能或证明它应该做什么。这就是您确保**软件质量**的方式。
- en: During the course of a software development, it is usual to have many features
    that share some code base or library. You could, for example, change a piece of
    code to fix a bug and create another bug in another point in your code. Software
    tests also help with that as they assure that your code does what it should do;
    if you change a piece of broken code and break another piece of code, you'll also
    be breaking a test. In this scenario, if you make use of **continuous integration**,
    the broken code will never reach your production environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发过程中，通常会有许多共享某些代码库或库的功能。例如，您可以更改一段代码以修复错误，并在代码的另一个点上创建另一个错误。软件测试也有助于解决这个问题，因为它们确保您的代码执行了应该执行的操作；如果您更改了一段错误的代码并且破坏了另一段代码，您也将破坏一个测试。在这种情况下，如果您使用**持续集成**，则破损的代码将永远不会到达生产环境。
- en: Tip
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Don't know what continuous integration is? Refer to [http://www.martinfowler.com/articles/continuousIntegration.html](http://www.martinfowler.com/articles/continuousIntegration.html)
    and [https://jenkins-ci.org/](https://jenkins-ci.org/).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道什么是持续集成？请参考[http://www.martinfowler.com/articles/continuousIntegration.html](http://www.martinfowler.com/articles/continuousIntegration.html)和[https://jenkins-ci.org/](https://jenkins-ci.org/)。
- en: Tests are so important that there is a software development process called **Test
    Driven Development** (**TDD**), which states that the test should be written before
    the actual code, and that the actual code is only *ready* when the test itself
    is satisfied. TDD is quite common among senior developers and beyond. Just for
    the fun of it, we'll be using TDD in this chapter, from top to toe.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是如此重要，以至于有一个称为**测试驱动开发**（**TDD**）的软件开发过程，它规定测试应该在实际代码之前编写，并且只有当测试本身得到满足时，实际代码才是*准备就绪*。TDD在高级开发人员及以上中非常常见。就为了好玩，我们将在本章中从头到尾使用TDD。
- en: What kinds of test are there?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有哪些测试类型？
- en: We want tests, and we want them now; but what kind of test do we want?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要测试，我们现在就想要；但是我们想要什么样的测试呢？
- en: 'There are two major classifications for tests, based on how much access to
    the internal code you have: **black-box** and **white-box** tests.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 测试有两种主要分类，根据你对内部代码的访问程度：**黑盒**和**白盒**测试。
- en: Black-box tests are where the testers do not have knowledge of, and/or access
    to, the actual code he/she is testing. In these cases, the test consists of checking
    whether the system states before and after the code execution are as expected
    or whether the given output corresponds to the given input.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 黑盒测试是指测试人员对其正在测试的实际代码没有知识和/或访问权限。在这些情况下，测试包括检查代码执行前后的系统状态是否符合预期，或者给定的输出是否对应于给定的输入。
- en: White-box tests are a little different as you will have access to the actual
    code internals that you're testing as well as the system expected states before
    and after code execution and the expected output for a given input. This kind
    of test has a stronger subjective goal, usually related to performance and software
    quality.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 白盒测试有所不同，因为您将可以访问您正在测试的实际代码内部，以及代码执行前后的系统预期状态和给定输入的预期输出。这种测试具有更强烈的主观目标，通常与性能和软件质量有关。
- en: In this chapter, we will cover how to implement black-box tests as they are
    more accessible to others and easier to implement. On the other hand, we'll overview
    the tools for executing white-box tests.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍如何实施黑盒测试，因为它们更容易让其他人接触并且更容易实施。另一方面，我们将概述执行白盒测试的工具。
- en: 'There are many ways a code base may be tested. We''ll focus our efforts on
    two types of automated tests (we will not cover manual testing techniques), each
    with a different goal: **unit testing** and **behavior testing**. Each of these
    tests has a different purpose and complements the other. Let''s take a look at
    what these tests are, when to use them, and how to run them with Flask.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码库可能经过多种方式测试。我们将专注于两种类型的自动化测试（我们不会涵盖手动测试技术），每种测试都有不同的目标：**单元测试**和**行为测试**。这些测试各自有不同的目的，并相互补充。让我们看看这些测试是什么，何时使用它们以及如何在Flask中运行它们。
- en: Unit testing
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单元测试
- en: Unit testing is a technique where you test the smallest piece of code that has
    meaningful functionality (called a **unit**) against an input and the expected
    output. You usually run unit tests against functions and methods in your code
    base that do not rely on other functions and methods that you've also written.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 单元测试是一种技术，您可以针对具有有意义功能的最小代码片段（称为**单元**）对输入和预期输出进行测试。通常，您会对代码库中不依赖于您编写的其他函数和方法的函数和方法运行单元测试。
- en: In a sense, testing is actually the art of stacking unit tests together (first
    test a function, then functions that interact with each other, then functions
    that interact with other systems) in a way that the whole system eventually becomes
    fully tested.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，测试实际上是将单元测试堆叠在一起的艺术（首先测试一个函数，然后相互交互的函数，然后与其他系统交互的函数），以便整个系统最终得到充分测试。
- en: 'For unit testing with Python, we may use the `doctest` or `unittest` built-in
    modules. The `doctest` module is useful for running embedded interactive code
    examples from an object documentation as test cases. Doctests are a nice complement
    to Unittest, which is a more robust module focused on helping you write unit tests
    (as the name implies), and should, preferably, not be used alone. Let''s see an
    example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Python的单元测试，我们可以使用内置模块`doctest`或`unittest`。`doctest`模块用于作为测试用例运行来自对象文档的嵌入式交互式代码示例。Doctests是Unittest的一个很好的补充，Unittest是一个更健壮的模块，专注于帮助您编写单元测试（正如其名称所暗示的那样），最好不要单独使用。让我们看一个例子：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In the preceding example, we define a simple `sum_fnc` function, which receives
    two parameters and returns its sum. The `sum_fnc` function has a docstring explaining
    itself. In this docstring, we have an interactive code example of the function
    call and output. This code example is invoked by `doctest.testmod()`, which checks
    whether the given output is correct for the function called.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个简单的`sum_fnc`函数，它接收两个参数并返回它们的和。`sum_fnc`函数有一个解释自身的文档字符串。在这个文档字符串中，我们有一个函数调用和输出的交互式代码示例。这个代码示例是由`doctest.testmod()`调用的，它检查给定的输出是否对于调用的函数是正确的。
- en: Next, we have a `TestCase` called `TestSumFnc`, which defines three test methods
    (`test_<test_name>`) and does almost exactly what our docstring test does. The
    difference of this approach is that we are capable of discovering what is wrong
    without the test result, *if* something is wrong. If we wished, for both our docstring
    and test case, to do exactly the same, we would have used the `assert` Python
    keyword to compare the result with the expected result in the test methods. Instead,
    we used the `assertEqual` method, which not only tells us that something is wrong
    with the result if something is wrong, but also informs us that the problem is
    that both the result and the expected values are not equal.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们有一个名为`TestSumFnc`的`TestCase`，它定义了三个测试方法（`test_<test_name>`），并且几乎完全与我们的文档字符串测试相同。这种方法的不同之处在于，我们能够在没有测试结果的情况下发现问题，*如果*有问题。如果我们希望对我们的文档字符串和测试用例做完全相同的事情，我们将在测试方法中使用`assert`
    Python关键字来将结果与预期结果进行比较。相反，我们使用了`assertEqual`方法，它不仅告诉我们如果结果有问题，还告诉我们问题是结果和预期值都不相等。
- en: If we wished to check whether our result is, for example, larger than a certain
    value, we would have used the method `assertGreater` or `assertGreaterEqual` so
    that an assertion error would have also told us what kind of error we had.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望检查我们的结果是否大于某个值，我们将使用`assertGreater`或`assertGreaterEqual`方法，这样断言错误也会告诉我们我们有什么样的错误。
- en: Tip
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Good tests are independent from each other so that a failed test may never prevent
    another test from running. Importing the test dependencies from within the test
    and cleaning the database are common ways to do that.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的测试彼此独立，以便一个失败的测试永远不会阻止另一个测试的运行。从测试中导入测试依赖项并清理数据库是常见的做法。
- en: The preceding case is common when writing scripts or desktop applications. A
    web application has different needs regarding the tests. A web application code
    usually runs in response to user interaction through a browser request and returns
    a response as the output. To test in this kind of environment, we have to simulate
    requests and properly test the response content, which is usually not as straightforward
    as the output of our `sum_fnc`. A response may be any kind of document and it
    may have different sizes and content, and you even have to worry about the response
    HTTP code, which holds a lot of contextual meaning.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本或桌面应用程序时，前面的情况很常见。Web应用程序对测试有不同的需求。Web应用程序代码通常是响应通过浏览器请求的用户交互而运行，并返回响应作为输出。要在这种环境中进行测试，我们必须模拟请求并正确测试响应内容，这通常不像我们的`sum_fnc`的输出那样直截了当。响应可以是任何类型的文档，它可能具有不同的大小和内容，甚至您还必须担心响应的HTTP代码，这包含了很多上下文含义。
- en: 'To help you test your views and simulate user interaction with your web application,
    Flask gives you a test client tool through which you can send requests in any
    valid HTTP method to your application. For example, You may consult a service
    through a `PUT` request, or a regular view through `GET`. Here''s an example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助您测试视图并模拟用户与您的Web应用程序的交互，Flask为您提供了一个测试客户端工具，通过它您可以向您的应用程序发送任何有效的HTTP方法的请求。例如，您可以通过`PUT`请求查询服务，或者通过`GET`请求查看常规视图。这是一个例子：
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding example is a complete one. We use the `app_factory` pattern to
    create our application, then we create an app and client inside `setUp`, which
    is run before every test method, and we create two tests, one for when the request
    receives a name parameter and another for when it doesn't. As we do not create
    any persistent resources, our `tearDown` method is empty. If we had we a database
    connection with fixtures of any kind, we would have to reset the database state
    inside `tearDown` or even drop the database.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子是一个完整的例子。我们使用`app_factory`模式来创建我们的应用程序，然后我们在`setUp`中创建一个应用程序和客户端，这在每个测试方法运行之前运行，我们创建了两个测试，一个是当请求接收到一个名称参数时，另一个是当请求没有接收到名称参数时。由于我们没有创建任何持久资源，我们的`tearDown`方法是空的。如果我们有任何类型的数据库连接和固定装置，我们将不得不在`tearDown`中重置数据库状态，甚至删除数据库。
- en: Also, be aware of `test_request_context`, which is used to create a request
    context inside our tests. We create this context so that `url_for`, which requires
    a request context if `SERVER_NAME` config is not set, is able to return our view
    path.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，要注意`test_request_context`，它用于在我们的测试中创建一个请求上下文。我们创建这个上下文，以便`url_for`能够返回我们的视图路径，如果没有设置`SERVER_NAME`配置，它需要一个请求上下文。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Set the `SERVER_NAME` config if your website uses a subdomain.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的网站使用子域，设置`SERVER_NAME`配置。
- en: Behavior testing
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行为测试
- en: 'In unit testing, we tested the output of functions against an expected result.
    If that result was not what we were waiting for, an assertion exception would
    be raised to notify a problem. It''s a simple black-box test. Now, some weird
    questions: did you notice your test is written in a way different from how a bug
    report or feature request is written? Did you notice that your test cannot be
    read by nontech people because it is, actually, code?'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在单元测试中，我们测试函数的输出与预期结果。如果结果不是我们等待的结果，将引发断言异常以通知问题。这是一个简单的黑盒测试。现在，一些奇怪的问题：您是否注意到您的测试是以与错误报告或功能请求不同的方式编写的？您是否注意到您的测试不能被非技术人员阅读，因为它实际上是代码？
- en: I would like to introduce you to lettuce ([http://lettuce.it/](http://lettuce.it/)),
    a tool capable of converting the **Gherkin** language tests into actual tests.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我想向您介绍lettuce（[http://lettuce.it/](http://lettuce.it/)），这是一个能够将**Gherkin**语言测试转换为实际测试的工具。
- en: Tip
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: For an overview on the Gherkin language, visit [https://github.com/cucumber/cucumber/wiki/Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Gherkin语言的概述，请访问[https://github.com/cucumber/cucumber/wiki/Gherkin](https://github.com/cucumber/cucumber/wiki/Gherkin)。
- en: 'Lettuce helps you translate the actual user-written features into test method
    calls. This way, a feature request like:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Lettuce可以帮助您将实际用户编写的功能转换为测试方法调用。这样，一个功能请求就像：
- en: 'Feature: compute sum'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 功能：计算总和
- en: In order to compute a sum
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了计算总和
- en: As student
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 作为学生
- en: Implement `sum_fnc`
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 实现`sum_fnc`
- en: '**Scenario**: Sum of positives'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**：正数之和'
- en: '**Given** I have the numbers 10 and 20'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假设**我有数字10和20'
- en: '**When** I sum them'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**我把它们加起来'
- en: '**Then** I see the result 30'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**我看到结果30'
- en: '**Scenario**: Sum of negatives'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**：负数之和'
- en: '**Given** I have the numbers -10 and -20'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假设**我有数字-10和-20'
- en: '**When** I sum them'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**我把它们加起来'
- en: '**Then** I see the result -30'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**我看到结果-30'
- en: '**Scenario**: Sum with mixed signals'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**场景**：混合信号之和'
- en: '**Given** I have the numbers 10 and -20'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**假设**我有数字10和-20'
- en: '**When** I sum them'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**当**我把它们加起来'
- en: '**Then** I see the result -10'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**然后**我看到结果-10'
- en: 'The feature could be translated into the actual code that will test our software.
    Make sure lettuce is properly installed:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 该功能可以转换为将测试软件的实际代码。确保lettuce已正确安装：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Create a `features` directory and place a `steps.py` (or any other Python filename
    you like) there with the following code:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`features`目录，并在其中放置一个`steps.py`（或者您喜欢的任何其他Python文件名），其中包含以下代码：
- en: '[PRE3]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: What did we just do now? We defined three test functions, have_the_numbers,
    compute_sum and check_number, where each receives as first argument a `step` instance
    and other parameters for the actual test. The step decorator, used to decorate
    our functions, is used to map a string pattern parsed from our Gherkin text into
    the function itself. Another responsibility for our decorator is to parse the
    arguments mapped from the step argument to the function as a parameter.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚做了什么？我们定义了三个测试函数，have_the_numbers，compute_sum和check_number，其中每个函数都接收一个`step`实例作为第一个参数，以及用于实际测试的其他参数。用于装饰我们的函数的step装饰器用于将从我们的Gherkin文本解析的字符串模式映射到函数本身。我们的装饰器的另一个职责是将从步骤参数映射到函数的参数的参数解析为参数。
- en: For example, the step for `have_the_numbers` has a regular expression pattern
    (`\-?\d+`) and (`\-?\d+`), which maps two numbers to the `numbers` parameter of
    our function. These values are fetched from our Gherkin input text. For the given
    scenarios, these numbers would be [10, 20], [-10, -20], and [10, -20], respectively.
    At last, `world` is a global variable you may use to share values between the
    steps.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`have_the_numbers`的步骤具有正则表达式模式（`\-?\d+`）和（`\-?\d+`），它将两个数字映射到我们函数的`numbers`参数。这些值是从我们的Gherkin输入文本中获取的。对于给定的场景，这些数字分别是[10,
    20]，[-10, -20]和[10, -20]。最后，`world`是一个全局变量，您可以在步骤之间共享值。
- en: Using features to describe behavior is very healthy for the development process
    because it brings business people closer to what is being created, though it is
    quite verbose. Also, because it is verbose, its use is not advised for testing
    isolated functions as we did in our preceding example. As behavior should be written
    preferably by business people, it should also test behavior the person writing
    can visually attest. For example, "If I click on a button, I get the lowest price
    for something" or "Given I access a certain page, I see some message or some links".
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用功能描述行为对开发过程非常有益，因为它使业务人员更接近正在创建的内容，尽管它相当冗长。另外，由于它冗长，不建议在测试孤立的函数时使用，就像我们在前面的例子中所做的那样。行为应该由业务人员编写，也应该测试编写人员可以直观证明的行为。例如，“如果我点击一个按钮，我会得到某物的最低价格”或“假设我访问某个页面，我会看到一些消息或一些链接”。
- en: '"Click here, and something happens there". Checking rendered request responses
    is kind of tricky, if you ask me. Why? In our second example, we verify if a given
    string value is inside our `resp.data`, and that was OK because our response is
    returned `complete`. We do not use JavaScript to render anything after the page
    is loaded or to show messages. If this had been the case, our verification would
    have probably returned a wrong result because the JavaScript code would not have
    been executed.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: “点击这里，然后那里发生了什么”。检查渲染的请求响应有点棘手，如果您问我的话。为什么？在我们的第二个例子中，我们验证了给定的字符串值是否在我们的`resp.data`中，这是可以的，因为我们的响应返回`complete`。我们不使用JavaScript在页面加载后渲染任何内容或显示消息。如果是这种情况，我们的验证可能会返回错误的结果，因为JavaScript代码不会被执行。
- en: To correctly render and verify a `view` response, we may use a headless browser
    such as **Selenium** or **PhantomJS** (refer to [https://pythonhosted.org/Flask-Testing/#testing-with-liveserver](https://pythonhosted.org/Flask-Testing/#testing-with-liveserver)).
    The **Flask-testing** extension will be of help too.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了正确呈现和验证`view`响应，我们可以使用无头浏览器，如**Selenium**或**PhantomJS**（参见[https://pythonhosted.org/Flask-Testing/#testing-with-liveserver](https://pythonhosted.org/Flask-Testing/#testing-with-liveserver)）。**Flask-testing**扩展也会有所帮助。
- en: Flask-testing
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Flask-testing
- en: 'Like most Flask extensions, Flask-testing does not do much, but what it does,
    it does beautifully! We will discuss some very useful features that Flask-testing
    gives you out of the box: LiveServer setup, extra assertions, and the JSON response
    handle. Make sure it is installed before continuing:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数Flask扩展一样，Flask-testing并没有做太多事情，但它所做的事情都做得很好！我们将讨论Flask-testing提供的一些非常有用的功能：LiveServer设置，额外的断言和JSON响应处理。在继续之前，请确保已安装：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: LiveServer
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LiveServer
- en: LiveServer is a Flask-testing tool that allows you to connect to headless browsers,
    a browser that do not render the content visually (such as Firefox or Chrome)
    but executes all scripts and styling and simulates user interaction. Use LiveServer
    whenever you need to evaluate the page content after JavaScript interaction. We'll
    use PhantomJS as our headless browser. My advice to you is that you install the
    old browser, like our ancestors did, compiling it from source. Follow these instructions
    at [http://phantomjs.org/build.html](http://phantomjs.org/build.html) (you may
    have to install a few extra libraries in order to get full functionality from
    phantom). The `build.sh` file will advise you to install it when necessary).
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: LiveServer是一个Flask-testing工具，允许您连接到无头浏览器，即不会将内容可视化呈现的浏览器（如Firefox或Chrome），但会执行所有脚本和样式，并模拟用户交互。每当您需要在JavaScript交互后评估页面内容时，请使用LiveServer。我们将使用PhantomJS作为我们的无头浏览器。我给您的建议是，您像我们的祖先一样安装旧浏览器，从源代码编译它。请按照[http://phantomjs.org/build.html](http://phantomjs.org/build.html)上的说明进行操作（您可能需要安装一些额外的库以获得phantom的全部功能）。`build.sh`文件将在必要时建议您安装它。
- en: Tip
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: After compiling **PhantomJS**, make sure it is found in by your PATH by moving
    the binary `bin/phantomjs` to `/usr/local/bin`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 编译**PhantomJS**后，确保它在您的PATH中被找到，将二进制文件`bin/phantomjs`移动到`/usr/local/bin`。
- en: 'Make sure Selenium is installed:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 确保安装了Selenium：
- en: '[PRE5]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'And our code will look like this:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的代码将如下所示：
- en: '[PRE6]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `templates/js_index.html` file should look like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`templates/js_index.html`文件应如下所示：'
- en: '[PRE7]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding example is quite simple. We define our factory, which creates
    our app with the two views attached. One returns a `js_index.html` that has a
    script that consults our second view for a phrase and populates the `fillme` HTML
    element, and the second view returns a phrase in JSON format, chosen randomly
    from a predefined list.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子非常简单。我们定义了我们的工厂，它创建了我们的应用程序并附加了两个视图。一个返回一个带有脚本的`js_index.html`，该脚本查询我们的第二个视图以获取短语，并填充`fillme`
    HTML元素，第二个视图以JSON格式返回一个从预定义列表中随机选择的短语。
- en: We then define `IndexTest` that extends `LiveServerTestCase`, a special class
    we use to run our live server tests. We set our live server to run on a different
    port from the default, but that's not required.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义`IndexTest`，它扩展了`LiveServerTestCase`，这是一个特殊的类，我们用它来运行我们的实时服务器测试。我们将我们的实时服务器设置为在不同的端口上运行，但这并不是必需的。
- en: Inside `setUp`, we create a `driver` with selenium WebDriver. The driver is
    something similar to a browser. We'll use it to access and inspect our application
    through the LiveServer. The `tearDown` makes sure our driver is closed after each
    test and resources are released.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在`setUp`中，我们使用selenium WebDriver创建一个`driver`。该驱动程序类似于浏览器。我们将使用它通过LiveServer访问和检查我们的应用程序。`tearDown`确保每次测试后关闭我们的驱动程序并释放资源。
- en: '`test_server_is_up_and_running` is self explanatory and not actually necessary
    in real-world tests.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_server_is_up_and_running`是不言自明的，在现实世界的测试中实际上是不必要的。'
- en: Then we have `test_random_text_was_loaded`, which is a pretty busy test. We
    use `test_request_context` in order to create a request context to generate our
    URL paths with `url_open. get_server_url`, which will return us our live server
    URL; we join this with our view path and load it into our driver.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有`test_random_text_was_loaded`，这是一个非常繁忙的测试。我们使用`test_request_context`来创建一个请求上下文，以便使用`url_open.get_server_url`生成我们的URL路径，这将返回我们的实时服务器URL；我们将这个URL与我们的视图路径连接起来并加载到我们的驱动程序中。
- en: With the URL loaded (be aware that the URL was not only loaded, but the scripts
    were also executed), we use `find_element_by_id` to look for the element `fillme`
    and assert that its text context has one of the expected values. This is a simple
    example. You can, for example, test for whether a button is in the expected place;
    submit a form; and trigger a JavaScript function. Selenium plus PhantomJS is a
    powerful combination.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用加载的URL（请注意，URL不仅加载了，而且脚本也执行了），我们使用`find_element_by_id`来查找元素`fillme`并断言其文本内容具有预期值之一。这是一个简单的例子。例如，您可以测试按钮是否在预期位置；提交表单；并触发JavaScript函数。Selenium加上PhantomJS是一个强大的组合。
- en: Tip
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: When your development is driven by feature testing, you're actually not using
    **TDD**, but **Behavior Driven Development** (**BDD**). A mix of both techniques
    is, usually, what you want.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当您的开发是由功能测试驱动时，您实际上并没有使用**TDD**，而是**行为驱动开发**（**BDD**）。通常，两种技术的混合是您想要的。
- en: Extra assertions
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外的断言
- en: 'When testing your code, you''ll notice a few tests are kind of repetitive.
    To handle this scenario, one would create a custom TestCases with specific routines
    and extend the tests accordingly. With Flask-testing, you still have to do that,
    but will have to code a little less to test your Flask views as `flask.ext.testing.TestCase`
    is bundled with common assertions, many found in frameworks such as Django. Let''s
    see the most important (in my opinion, of course) assertions:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试代码时，您会注意到一些测试有点重复。为了处理这种情况，可以创建一个具有特定例程的自定义TestCases，并相应地扩展测试。使用Flask-testing，您仍然需要这样做，但是要编写更少的代码来测试您的Flask视图，因为`flask.ext.testing.TestCase`捆绑了常见的断言，许多在Django等框架中找到。让我们看看最重要的（在我看来，当然）断言：
- en: '`assert_context(name, value)`: This asserts that a variable is in the template
    context. Use it to verify that a given response context has the right values for
    a variable.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_context(name, value)`: 这断言一个变量是否在模板上下文中。用它来验证给定的响应上下文对于一个变量具有正确的值。'
- en: '`assert_redirects(response, location)`: This asserts that the response is a
    redirect and gives its location. It''s a good practice to redirect after writing
    to storage, like after a successful POST, which is a good use case for this assertion.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_redirects(response, location)`: 这断言了响应是一个重定向，并给出了它的位置。在写入存储后进行重定向是一个很好的做法，比如在成功的
    POST 后，这是这个断言的一个很好的使用案例。'
- en: '`assert_template_used(name, tmpl_name_attribute=''name'')`: This asserts that
    a given template is used in the request (`tmpl_name_attribute` is only needed
    if you''re not using Jinja2; not in our case); use it whenever you render an HTML
    template, really!'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert_template_used(name, tmpl_name_attribute=''name'')`：这断言了请求中使用了给定的模板（如果您没有使用
    Jinja2，则需要 `tmpl_name_attribute`；在我们的情况下不需要）；无论何时您渲染一个 HTML 模板，都可以使用它！'
- en: '`assert404(response, message=None)`: This asserts that the response has the
    404 HTTP code; it is useful for "rainy day" scenarios; that is, when someone is
    trying to access something that does not exist. It is very useful.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assert404(response, message=None)`: 这断言了响应具有 404 HTTP 状态码；它对于“雨天”场景非常有用；也就是说，当有人试图访问不存在的内容时。它非常有用。'
- en: JSON handle
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: JSON 处理
- en: 'Here is a lovely trick Flask-testing has for you. Whenever you return a JSON
    response from your views, your response will have an extra attribute called `json`.
    That''s your JSON-converted response! Here is an example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-testing 为您提供了一个可爱的技巧。每当您从视图返回一个 JSON 响应时，您的响应将有一个额外的属性叫做 `json`。那就是您的
    JSON 转换后的响应！以下是一个例子：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Fixtures
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 固定装置
- en: Good tests are always executed considering a predefined, reproducible application
    state; that is, whenever you run a test in the chosen state, the result will always
    be equivalent. Usually, this is achieved by setting your database data yourself
    and clearing your cache and any temporary files (if you make use of external services,
    you should mock them) for each test. Clearing cache and temporary files is not
    hard, while setting your database data, on the other hand, is.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 良好的测试总是在考虑预定义的、可重现的应用程序状态下执行；也就是说，无论何时您在选择的状态下运行测试，结果都将是等价的。通常，这是通过自己设置数据库数据并清除缓存和任何临时文件（如果您使用外部服务，您应该模拟它们）来实现的。清除缓存和临时文件并不难，而设置数据库数据则不然。
- en: 'If you''re using **Flask-SQLAlchemy** to hold your data, you would need to
    hardcode, somewhere in your tests as follows:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 **Flask-SQLAlchemy** 来保存您的数据，您需要在您的测试中某个地方硬编码如下：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This approach does not scale as it is not easily reusable (when you define
    this as a function and a method, define it for each test). There are two ways
    to populate your database for testing: **fixtures** and **pseudo-random data**.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不易扩展，因为它不容易重复使用（当您将其定义为一个函数和一个方法时，为每个测试定义它）。有两种方法可以为测试填充您的数据库：**固定装置** 和
    **伪随机数据**。
- en: Using pseudo-random data is usually library-specific and produces better test
    data as the generated data is context-specific, not static, but it may require
    specific coding now and then, just like when you define your own fields or need
    a different value range for a field.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用伪随机数据通常是特定于库的，并且生成的数据是上下文特定的，而不是静态的，但有时可能需要特定的编码，就像当您定义自己的字段或需要字段的不同值范围时一样。
- en: 'Fixtures are the most straightforward way as you just have to define your data
    in a file and load it at each test. You can do that by exporting your database
    data, editing at your convenience, or writing it yourself. The JSON format is
    quite popular for this. Let''s take a look on how to implement both:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 固定装置是最直接的方法，因为您只需在文件中定义您的数据，并在每个测试中加载它。您可以通过导出数据库数据，根据您的方便进行编辑，或者自己编写。JSON 格式在这方面非常受欢迎。让我们看看如何实现这两种方法：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The preceding code is simple. We create a SQLAlchemy model, link it to our app,
    and, during the setup, we load our fixture. In `tearDow`n, we make sure our database
    and SQLAlchemy session are brand new for the next test. Our fixture is written
    using JSON format because it is fast enough and readable.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码很简单。我们创建一个 SQLAlchemy 模型，将其链接到我们的应用程序，并在设置期间加载我们的固定装置。在 `tearDow`n 中，我们确保我们的数据库和
    SQLAlchemy 会话对于下一个测试来说是全新的。我们的固定装置是使用 JSON 格式编写的，因为它足够快速且可读。
- en: 'Were we to use pseudo-random generators to create our users, (look up Google
    **fuzzy testing** for more on the subject), we could do it like this:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用伪随机生成器来创建我们的用户（查找 Google 上关于这个主题的 **模糊测试**），我们可以这样做：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Be aware that our tests would also have to change as we are not testing against
    a static scenario. As a rule, fixtures will be enough in most cases, but pseudo-random
    test data is better in most cases as it forces your application to handle real
    scenarios, which are, usually left out.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们不是针对静态场景进行测试，我们的测试也会发生变化。通常情况下，固定装置在大多数情况下就足够了，但伪随机测试数据在大多数情况下更好，因为它迫使您的应用处理真实场景，而这些通常被忽略。
- en: Extra – integration testing
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 额外 - 集成测试
- en: Integration testing is a very widely used term/concept with a very narrow meaning.
    It is used to refer to the act of testing multiple modules together to test their
    integration. As testing multiple modules together from the same code base with
    Python is usually trivial and transparent (an import here, a call there, and some
    output checking), you'll usually hear people using the term **integration testing**
    while referring to testing their code against a different code base, an application
    they did not create or maintain, or when a new key functionality was added to
    the system.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 集成测试是一个非常常用的术语/概念，但其含义非常狭窄。它用于指代测试多个模块一起测试它们的集成。由于使用 Python 从同一代码库中测试多个模块通常是微不足道且透明的（这里导入，那里调用，以及一些输出检查），您通常会听到人们在指代测试他们的代码与不同代码库进行集成测试时使用术语
    **集成测试**，或者当系统添加了新的关键功能时。
- en: Summary
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Whoa! We just survived a chapter about testing software! That's something to
    be proud of. We learned a few concepts such as TDD, white-box, and black-box testing.
    We also learned how to create unit tests; test our views; write features using
    the Gherkin language and test them using lettuce; use Flask-testing, Selenium
    with PhantomJS to test a HTML response from the user perspective; also how to
    use fixtures to control our application state for proper reproducible testing.
    Now you are capable of testing Flask applications in different ways using the
    correct techniques for different scenarios and needs.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！我们刚刚度过了一章关于软件测试的内容！这是令人自豪的成就。我们学到了一些概念，比如TDD、白盒测试和黑盒测试。我们还学会了如何创建单元测试；测试我们的视图；使用Gherkin语言编写功能并使用lettuce进行测试；使用Flask-testing、Selenium和PhantomJS来测试用户角度的HTML响应；还学会了如何使用固定装置来控制我们应用程序的状态，以进行正确可重复的测试。现在，您可以使用不同的技术以正确的方式测试Flask应用程序，以满足不同的场景和需求。
- en: In the next chapter, things are gonna go wild really fast as our subject of
    study will be tricks with Flask. Blueprints, sessions, logging, debugging, and
    so on, will be covered in the next chapter, allowing you to create even more robust
    software. See you there!
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，事情会变得非常疯狂，因为我们的研究对象将是使用Flask的技巧。下一章将涵盖蓝图、会话、日志记录、调试等内容，让您能够创建更加健壮的软件。到时见！
