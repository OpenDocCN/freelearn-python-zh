- en: Chapter 13. The Art of Debugging
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第13章。调试的艺术
- en: 'In this chapter, you will learn three important things about Django''s web
    development, which every programmer should know about. These are the concepts
    and techniques that you would need when your code goes wrong:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习关于Django的Web开发的三个重要内容，每个程序员都应该了解。这些是您在代码出错时需要的概念和技术：
- en: Logging
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录
- en: Debugging
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试
- en: IPDB – interactive way of busting bugs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPDB-消除错误的交互方式
- en: Logging
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 记录
- en: Every application that runs on production must have some logging enabled; if
    not, then it will be very difficult to figure out what and where something went
    wrong.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个在生产环境中运行的应用程序都必须启用一些日志记录；如果没有启用，那么很难弄清楚出了什么问题以及问题出现在哪里。
- en: Django uses Python's basic logging, thus we will go through the Python logging
    in detail in the following section and see how we can use the logging service
    to log in Django.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用Python的基本日志记录，因此我们将在以下部分详细介绍Python日志记录，并看看我们如何在Django中使用日志记录服务。
- en: The formal definition of logging is the tracking of events in a software. Developers
    call the logging service to state that an event has occurred, or is going to occur.
    Logging can consist of some description or value of any important variable that
    needs to be tracked.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 日志的正式定义是软件中事件的跟踪。开发人员调用日志服务来说明事件已经发生或将要发生。日志可以包括需要跟踪的某些重要变量的描述或值。
- en: The `logging` module of Python comes with five logging functions that are categorized
    based on the severity of an event. These are `debug()`, `info()`, `warning()`,
    `error()`, and `critical()`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python的`logging`模块带有五个基于事件严重性分类的日志函数。这些是`debug（）`，`info（）`，`warning（）`，`error（）`和`critical（）`。
- en: 'These are categorized in a tabular form in order of their severity (starting
    from the least severe to the most severe):'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这些按严重性分类在表格中，从最不严重到最严重：
- en: '`debug()`: This is used while fixing bugs and generally has detailed information
    of the data.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug（）`：在修复错误时使用，通常包含数据的详细信息。'
- en: '`info()`: This makes a log when things work as they are supposed to. This basically
    tells whether an execution was successful or not.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info（）`：当事情按照预期进行时，会记录日志。这基本上告诉执行是否成功。'
- en: '`warning()`: This is raised when some unexpected event occurs. This does not
    actually halt the execution, but it might stop the execution in future. For example,
    ''low disk space''.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 警告（）：当发生意外事件时会引发此警告。这实际上并不会停止执行，但可能会在将来停止执行。例如，“磁盘空间不足”。
- en: '`error()`: This is the next level of warning, which states that the execution
    of some function might have halted.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error（）`：这是警告的下一个级别，表示某个函数的执行可能已经停止。'
- en: '`critical()`: This is the highest level of any logging function. This is raised
    when a very serious error occurs, which might stop the execution of an entire
    program.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`critical（）`：这是任何日志函数的最高级别。当发生非常严重的错误时，可能会停止整个程序的执行。'
- en: 'The `logging` module is divided into the following four categories:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`logging`模块分为以下四个类别：'
- en: '**Loggers**: Logger is the entry point for the log message of a system. Programs
    write logging information to loggers, which then process whether it has to be
    given to a console for output or should be written to file.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**记录器**：记录器是系统日志消息的入口点。程序将日志信息写入记录器，然后处理是否将其输出到控制台或写入文件。'
- en: Every logger comprises of the preceding five logging functions. Every message
    that is written to the logger is called a log record. A log record contains the
    severity of the log as well as the important log variable or details, such as
    an error code or a complete stack trace.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 每个记录器包括前面五个日志函数。写入记录器的每条消息称为日志记录。日志记录包含日志的严重性以及重要的日志变量或详细信息，例如错误代码或完整的堆栈跟踪。
- en: 'Loggers themselves have a log level, which works as: if the log level of the
    log message is greater than or equal to the log level of the logger, then the
    message will be further processed for logging; otherwise, it will be ignored by
    the logger.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 记录器本身具有日志级别，其工作原理是：如果日志消息的日志级别大于或等于记录器的日志级别，则消息将进一步进行日志记录；否则，记录器将忽略该消息。
- en: When a logger's preprocessing for a log's evaluation is done and the resulting
    log has to be processed, then the message is passed to the handler.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当记录器对日志的评估进行预处理并且需要处理生成的日志时，消息将传递给处理程序。
- en: '**Handlers**: Handlers actually decide what to do with the log message. They
    are responsible for taking actions for the log record, such as writing to the
    console or to a file, or sending it over the network.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**处理程序**：处理程序实际上决定如何处理日志消息。它们负责对日志记录采取行动，例如写入控制台或文件，或通过网络发送。'
- en: The same as loggers, handlers also have a log level. Log messages are ignored
    by the handler if the log level of a log record is not greater than or equal to
    the level of handler.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与记录器一样，处理程序也有日志级别。如果日志记录的日志级别不大于或等于处理程序的级别，则处理程序将忽略日志消息。
- en: Multiple handlers can be binned to a logger, for example, there can be a handler
    for a logger that sends ERROR and CRITICAL messages over an e-mail, whereas another
    handler can write the same log to a file for a later debug analysis.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将多个处理程序绑定到记录器，例如，可以为将ERROR和CRITICAL消息发送到电子邮件的记录器添加一个处理程序，而另一个处理程序可以将相同的日志写入文件以供以后调试分析。
- en: '**Filters**: A filter adds an extra evaluation when a log record is passed
    from a logger to handler. The default behavior is that it will start processing
    the mails when a log message level has met the level of a handler.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤器**：当日志记录从记录器传递到处理程序时，过滤器会添加额外的评估。默认行为是当日志消息级别达到处理程序级别时开始处理邮件。'
- en: This process can be interrupted further for extra evaluation by applying filter.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程可以通过应用过滤器进一步中断进行额外评估。
- en: For example, a filter allows only one source to log the ERROR message to a handler.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，过滤器只允许一个来源将ERROR消息记录到处理程序。
- en: A filter can also be used to alter the priority of the log record, so that the
    logger and handler are triggered accordingly.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤器还可以用于改变日志记录的优先级，以便相应地触发记录器和处理器。
- en: '**Formatters**: The final step before the log message actually gets logged,
    which will be in a text format, is that the formatter actually formats the log
    record that consists of the Python formatting string.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**格式化程序**：在实际记录日志消息之前的最后一步是格式化程序实际格式化由Python格式化字符串组成的日志记录。'
- en: To enable logging in our application, we will create a logger first. We need
    to create the LOGGING dictionary in the `settings.py` file, which describes loggers,
    handlers, filters, and formatters.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在我们的应用程序中启用日志记录，我们首先需要创建一个记录器。我们需要在`settings.py`文件中创建描述记录器、处理器、过滤器和格式化程序的LOGGING字典。
- en: The full documentation about the logging setup can be found at [https://docs.python.org/2/library/logging.config.html](https://docs.python.org/2/library/logging.config.html).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 有关日志设置的完整文档可以在[https://docs.python.org/2/library/logging.config.html](https://docs.python.org/2/library/logging.config.html)找到。
- en: 'The following is an example of a simple logging setup:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单日志设置的示例：
- en: '[PRE0]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This logger setup defines one logger (Django) that is for Django request, and
    a handler (file) that writes to the log file with a formatter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个日志设置定义了一个用于Django请求的记录器（Django），以及一个写入日志文件的处理器（文件）和一个格式化程序。
- en: We will use the same to test the logging for our `mytweet` project.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的方法来测试我们的`mytweet`项目的日志记录。
- en: Now, we need to make the logger's entry to the view, where we want to track
    the event.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要将记录器的条目添加到我们想要跟踪事件的视图中。
- en: To test the project, we will update our user profile redirection class to make
    a log whenever an unauthorized user tries to access it, and, also, when a registered
    user tries to open the URL.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试项目，我们将更新我们的用户资料重定向类，以便在未经授权的用户尝试访问时进行日志记录，以及在注册用户尝试打开URL时也进行日志记录。
- en: 'Open the `tweet/view.py` file and change the `UserRedirect` class to the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`tweet/view.py`文件，并将`UserRedirect`类更改为以下内容：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Also, initialize the logger with an `import` statement and add the following
    code to the preceding code:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 还要用`import`语句初始化记录器，并将以下代码添加到前面的代码中：
- en: '[PRE2]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That is it. Now, open the browser and click on the URL `http://localhost:8000/profile`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在，打开浏览器，单击URL `http://localhost:8000/profile`。
- en: You will be redirected to the login page if you're not already logged in.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未登录，将被重定向到登录页面。
- en: 'Now, open the `debug.log` file. It contains `INFO` of an unauthorized user,
    which means that our logger is working perfectly fine:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，打开`debug.log`文件。它包含未经授权用户的`INFO`，这意味着我们的记录器工作正常：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Debugging
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试
- en: Debugging is the process of finding and removing bugs (error). When we develop
    the web application with Django, we often need a case where we need to know the
    variables submitted in an Ajax request.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 调试是查找和消除错误（bug）的过程。当我们使用Django开发Web应用程序时，我们经常需要知道在Ajax请求中提交的变量。
- en: 'The tools for debugging are:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 调试工具有：
- en: The Django debug toolbar
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django调试工具栏
- en: IPDB ( interactive debugger)
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IPDB（交互式调试器）
- en: The Django debug toolbar
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django调试工具栏
- en: This is a set of panels that is used to display various information about the
    current page's request/response, and in more detail when the panel is clicked
    on.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一组面板，用于显示当前页面请求/响应的各种信息，当单击面板时会显示更详细的信息。
- en: Rather than simply displaying the debug information in HTML comments, the **Django
    debug tool** displays it in a more advanced way.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 与其简单地在HTML注释中显示调试信息，**Django调试工具**以更高级的方式显示它。
- en: Installing the Django debug toolbar
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Django调试工具栏
- en: 'To install the Django debug toolbar, run the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装Django调试工具栏，请运行以下命令：
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: After the installation, we need to do basic configuration changes to see the
    Django debug toolbar.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们需要进行基本配置更改以查看Django调试工具栏。
- en: 'Add the `debug_toolbar` parameter to the `INSTALLED_APPS` variable in the `settings.py`
    file:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings.py`文件的`INSTALLED_APPS`变量中添加`debug_toolbar`参数：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This is more than enough for a simple Django project. The Django debug toolbar
    will automatically adjust itself when a server runs in development mode.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一个简单的Django项目来说，这已经足够了。当服务器运行在开发模式下时，Django调试工具栏将自动调整自己。
- en: 'Restart the server to see the Django debug toolbar, as shown in the following
    screenshot:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器以查看Django调试工具栏，如下截图所示：
- en: '![Installing the Django debug toolbar](img/image00322.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![安装Django调试工具栏](img/image00322.jpeg)'
- en: As you can see, there is a toolbar on the right-hand side of the profile page.
    The Django debug toolbar has many panels, of which a few are installed as default,
    which you can see in the preceding screenshot, and other third-party panels can
    also be installed here as well.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，个人资料页面右侧有一个工具栏。Django调试工具栏有许多面板，默认安装了一些，您可以在前面的截图中看到，还可以在此安装其他第三方面板。
- en: 'Now, we will discuss the panels that are enabled by default:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将讨论默认启用的面板：
- en: '**VersionPath**: `debug_toolbar.panels.versions.VersionsPanel`. This panel
    shows the basic information, such as the versions of Python, Django, and of other
    installed applications, if the information is available:![Installing the Django
    debug toolbar](img/image00323.jpeg)'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**VersionPath**：`debug_toolbar.panels.versions.VersionsPanel`。该面板显示了基本信息，例如Python、Django的版本以及其他已安装应用的版本，如果信息可用：![安装Django调试工具栏](img/image00323.jpeg)'
- en: '**TimerPath**: `debug_toolbar.panels.timer.TimerPanel`![Installing the Django
    debug toolbar](img/image00324.jpeg)'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TimerPath**：`debug_toolbar.panels.timer.TimerPanel`![安装Django调试工具栏](img/image00324.jpeg)'
- en: This panel contains some very important stats for the Django development. It
    shows two tables, as you can see in the preceding screenshot, which are **Resource
    usage** and **Browser timing**.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 该面板包含了Django开发的一些非常重要的统计信息。它显示了两个表，如前面的截图所示，分别是**资源使用**和**浏览器定时**。
- en: '**Resource usage**: This shows the Django resource consumption on the server
    machine.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源使用**：显示服务器机器上Django的资源消耗。'
- en: '**Browser timing**: This shows the details on the client-side. The request
    and response times are vital for knowing whether a piece of code can be optimized,
    and domLoading can be looked up if too much of rendering slows the page from getting
    loaded.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浏览器时间**：这显示了客户端的详细信息。请求和响应时间对于了解代码是否可以优化至关重要，如果渲染过多导致页面加载缓慢，可以查看domLoading。'
- en: '**SettingsPath**: `debug_toolbar.panels.settings.SettingsPanel`. A list of
    settings that are defined in the `settings.py` file are **headers**'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SettingsPath**：`debug_toolbar.panels.settings.SettingsPanel`。`settings.py`文件中定义的设置列表为**headers**'
- en: '**Path**: `debug_toolbar.panels.headers.HeadersPanel`![Installing the Django
    debug toolbar](img/image00325.jpeg)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**路径**：`debug_toolbar.panels.headers.HeadersPanel`![安装Django调试工具栏](img/image00325.jpeg)'
- en: This panel shows the HTTP request and response headers and variables from the
    WSGI environment.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 该面板显示WSGI环境中的HTTP请求和响应头和变量。
- en: '**Request Path**: `debug_toolbar.panels.request.RequestPanel`![Installing the
    Django debug toolbar](img/image00326.jpeg)'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求路径**：`debug_toolbar.panels.request.RequestPanel`![安装Django调试工具栏](img/image00326.jpeg)'
- en: This panel shows the variables from the framework, starting from the view variables,
    which also has the **ratancs** argument variable; then, the **Cookies**, **Session**,
    and GET, and POST variables, as these are very helpful to debug the form submission.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 该面板显示了从框架中的变量，从视图变量开始，还有**ratancs**参数变量；然后是**Cookies**，**Session**，以及GET和POST变量，因为这些对调试表单提交非常有帮助。
- en: '**SQL Path**: `debug_toolbar.panels.sql.SQLPanel`![Installing the Django debug
    toolbar](img/image00327.jpeg)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQL路径**：`debug_toolbar.panels.sql.SQLPanel`![安装Django调试工具栏](img/image00327.jpeg)'
- en: This panel is also very important as it shows the SQL queries made to the database
    for the page's response. This helps a lot at the time of scaling the application,
    as queries can be thoroughly examined and combined together to reduce database
    hits and improve the page response performance.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这个面板也非常重要，因为它显示了页面响应的数据库查询。这在应用程序扩展时非常有帮助，因为可以彻底检查查询并将其组合在一起，以减少数据库访问并改善页面响应性能。
- en: This also shows the code snippet that makes that SQL call, which is also very
    helpful while debugging the application.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这还显示了生成SQL调用的代码片段，这在调试应用程序时也非常有帮助。
- en: '**Static files Path**: `debug_toolbar.panels.staticfiles.StaticFilesPanel`![Installing
    the Django debug toolbar](img/image00328.jpeg)'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态文件路径**：`debug_toolbar.panels.staticfiles.StaticFilesPanel`![安装Django调试工具栏](img/image00328.jpeg)'
- en: This will list all the static files used from the static files location that
    we had set in the `settings.py` file.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出从我们在`settings.py`文件中设置的静态文件位置使用的所有静态文件。
- en: '**Template Path**: `debug_toolbar.panels.templates.TemplatesPanel`![Installing
    the Django debug toolbar](img/image00329.jpeg)'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板路径**：`debug_toolbar.panels.templates.TemplatesPanel`![安装Django调试工具栏](img/image00329.jpeg)'
- en: This will list down the templates and context used for the current request.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出当前请求使用的模板和上下文。
- en: '**Cache Path**: `debug_toolbar.panels.cache.CachePanel`![Installing the Django
    debug toolbar](img/image00330.jpeg)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存路径**：`debug_toolbar.panels.cache.CachePanel`![安装Django调试工具栏](img/image00330.jpeg)'
- en: If we enable the cache, then this will show the details of the cache hit for
    the given URL.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们启用了缓存，那么这将显示给定URL的缓存命中的详细信息。
- en: '**Signal Path**: `debug_toolbar.panels.signals.SignalsPanel`![Installing the
    Django debug toolbar](img/image00331.jpeg)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**信号路径**：`debug_toolbar.panels.signals.SignalsPanel`![安装Django调试工具栏](img/image00331.jpeg)'
- en: This panel shows the list of signals and their args and receivers.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 该面板显示信号列表及其参数和接收器。
- en: '**Logging Path**: `debug_toolbar.panels.logging.LoggingPanel`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**日志路径**：`debug_toolbar.panels.logging.LoggingPanel`'
- en: 'If you have enabled logging, then this panel will show the log''s messages,
    as shown in the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果启用了日志记录，那么该面板将显示日志消息，如下截图所示：
- en: '![Installing the Django debug toolbar](img/image00332.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![安装Django调试工具栏](img/image00332.jpeg)'
- en: '**Redirects Path**: `debug_toolbar.panels.redirects.RedirectsPanel`'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重定向路径**：`debug_toolbar.panels.redirects.RedirectsPanel`'
- en: When there is a page redirection on a URL, enable this to debug the intermediate
    page. Generally, you don't debug the redirect URL, so, by default, this is disabled.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当URL发生页面重定向时，启用此功能以调试中间页面。通常不调试重定向URL，因此默认情况下此功能已禁用。
- en: '![Installing the Django debug toolbar](img/image00333.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![安装Django调试工具栏](img/image00333.jpeg)'
- en: IPDB – interactive way of busting bugs
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IPDB - 消灭错误的交互方式
- en: '**Ipdb** is an interactive source code debugger for Python programs.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**Ipdb**是Python程序的交互式源代码调试器。'
- en: 'Run the following command to install Ipdb:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装Ipdb：
- en: '[PRE6]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Ipdb is the interactive way of debugging Python application. After installing
    Ipdb, to use it in any function, just write the following code:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Ipdb是调试Python应用程序的交互方式。安装Ipdb后，要在任何函数中使用它，只需编写以下代码：
- en: '[PRE7]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This magical line will halt the whole Django execution at the point where this
    code is present, and will give you an active console, where you can find out the
    bugs or check the variable's value in real time.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这行神奇的代码将在代码出现的地方停止整个Django执行，并为您提供一个活动控制台，在那里您可以实时查找错误或检查变量的值。
- en: 'The shortcuts for ipdb (when you are in the active console) are:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在活动控制台中，Ipdb的快捷键是：
- en: '`n`: This refers to next'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：这表示下一个'
- en: '`ENTER`: This refers to repeat previous'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENTER`：这表示重复上一个'
- en: '`q`: This refers to quit'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`q`：这表示退出'
- en: '`p <variable>`: This is the print value'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p <variable>`：这是打印值'
- en: '`c`: This refers to continue'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`：这表示继续'
- en: '`l`: This is the list where you are'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`：这是你所在的列表'
- en: '`s`: This is to step into a subroutine'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`：这是进入子程序的步骤'
- en: '`r`: This means to continue till the end of the subroutine'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：这意味着继续执行子程序直到结束'
- en: '`! <python command>`: To run Python command inside the active console'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`！<python命令>`：在活动控制台中运行Python命令'
- en: Summary
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There is more to do than what is covered in this chapter. These were just the
    basics of debugging that we are going to use in our Django projects. You learned
    how to log and debug our code for a better and more efficient coding practice.
    We also saw how to use Ipdb for more debugging.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这一章涵盖的内容远不止这些。这些只是我们在Django项目中要使用的调试基础知识。你学会了如何记录和调试我们的代码，以便更好地进行高效编码实践。我们还看到了如何使用Ipdb进行更多的调试。
- en: In the next chapter, you will learn the various ways to deploy our Django projects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习部署Django项目的各种方法。
