- en: Chapter 15. What's Next?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第15章。接下来是什么？
- en: Web development has evolved over time and so have the devices where users consume
    information. The Web was designed for large-screen devices earlier, but recent
    trends show that consumption of the devices with small screen size and the devices
    that can be held in hand has increased. Thus, here arises the need to mold the
    Web to serve small-screen devices, but these devices are very power sensitive.
    So, there is the need to separate the backend functions from the frontend functions
    in Django.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 网络开发随着时间的推移发生了变化，用户消费信息的设备也发生了变化。网络最初是为大屏设备设计的，但最近的趋势表明，小屏设备和手持设备的使用量增加了。因此，有必要调整网络以适应小屏设备，但这些设备对功耗非常敏感。因此，在Django中有必要将后端功能与前端功能分开。
- en: One such most widely used solution is to use Django backend with an API enabled
    at the frontend to use it with Django. Using **AngularJS** for such a situation
    is most suited.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个最广泛使用的解决方案是在Django后端使用启用了API的前端来使用它。对于这种情况，使用**AngularJS**是最合适的。
- en: REST has been the future of web development and REST APIs are rather an integral
    part of the modern Web. As the fragmentation across a device increases, there
    arises a need of single minimal endpoint, which does not perform any presentation
    operation. For instance, the information retrieval or commutation could be as
    fast as possible and could also be scaled, and the presentation or business logic
    for this is left in the hands of modern browsers using a frontend framework.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: REST一直是Web开发的未来，REST API是现代Web的一个组成部分。随着设备之间的碎片化增加，出现了需要一个单一的最小端点的需求，该端点不执行任何呈现操作。例如，信息检索或通信可能尽可能快，也可能扩展，而这方面的呈现或业务逻辑则由现代浏览器使用前端框架来处理。
- en: AngularJS meets Django
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AngularJS满足Django
- en: AngularJS is a modern JavaScript framework used to create complex web applications
    within a browser.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS是一个现代的JavaScript框架，用于在浏览器中创建复杂的Web应用程序。
- en: Since the birth of AngularJS in 2009, it has been evolving very fast and is
    being widely accepted as a production-grade frontend framework. It is now maintained
    by Google.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 自2009年以来，AngularJS一直在快速发展，并被广泛接受为生产级前端框架。现在由Google维护。
- en: AngularJS has a very interesting birth story. It got its big attention when
    one of the creators of angular recreated a web application in 3 weeks, which initially
    took 6 months to develop, by reducing the number of lines of code from 17,000
    to 1,000.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS有一个非常有趣的诞生故事。当angular的一位创始人在3周内重新创建了一个网页应用程序时，引起了很大的关注，而最初开发这个应用程序需要6个月的时间，通过将代码行数从17,000行减少到1,000行。
- en: AngularJS has many features over conventional web development frameworks. Among
    them, a few unique and innovative features are two-way data bindings, dependency
    injection, easy-to-test code, and extending the HTML dialect using directives.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS在传统Web开发框架上有许多特点。其中，一些独特和创新的特点是双向数据绑定、依赖注入、易于测试的代码以及使用指令扩展HTML方言。
- en: For the server side, we can use the **Django REST Framework** or **Tastypie**
    for REST endpoints. Then, we can use AngularJS, which focuses on the MVC model,
    to encourage the creation of easily maintainable modules.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器端，我们可以使用**Django REST框架**或**Tastypie**来进行REST端点。然后，我们可以使用AngularJS，它专注于MVC模型，以鼓励创建易于维护的模块。
- en: Web technologies have evolved from synchronous to asynchronous, that is, the
    website requests now heavily use asynchronous calls to refresh its content without
    reloading the page, an example of which is your Facebook wall.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Web技术已经从同步发展到异步，也就是说，网站请求现在大量使用异步调用来刷新内容，而不重新加载页面，一个例子就是你的Facebook动态。
- en: AngularJS is one of the solutions for the asynchronous need in a better way
    for Django web development.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: AngularJS是Django Web开发中更好的异步需求解决方案之一。
- en: In the following example, we will use AngularJS to create a single page, which
    uses the tweet's API that we already created.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们将使用AngularJS创建一个单页面，该页面使用我们已经创建的推文API。
- en: 'We will use AngulaJS to list all the tweets, but before that, we need to get
    familiarized with AngularJS''s key terms:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用AngulaJS列出所有推文，但在此之前，我们需要熟悉AngularJS的关键术语：
- en: '**Directives**: For this, the HTML file is extended with custom attributes
    and elements. AngularJS extends the HTML with **ng-directives**. The **ng-app**
    directive is used to define AngularJS''s application. The **ng-model** directive
    binds the value of HTML controls (input, checkbox, radio, select, and text area)
    to the application. The **data.ng-bind** directive binds the application data
    to the HTML view.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**指令**：为此，HTML文件使用自定义属性和元素进行扩展。AngularJS使用**ng-directives**扩展HTML。**ng-app**指令用于定义AngularJS的应用程序。**ng-model**指令将HTML控件（输入、复选框、单选按钮、选择和文本区域）的值绑定到应用程序。**data.ng-bind**指令将应用程序数据绑定到HTML视图。'
- en: '**Model**: This is the data shown to the user in the view and with which the
    user interacts.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型**：这是向用户显示的数据，用户与之交互。'
- en: '**Scope**: This is the context where the model is stored, so that controllers,
    directives, and expressions can access it.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**作用域**：这是存储模型的上下文，以便控制器、指令和表达式可以访问它。'
- en: '**Controller**: This is the main business logic behind views.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制器**：这是视图背后的主要业务逻辑。'
- en: When we design an API-based web application, there is a high chance that both
    (the API's backend and the webapp frontend) of them reside on different servers.
    Thus, there arises a need to configure Django for **Cross-origin resource sharing**.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们设计基于API的Web应用程序时，很有可能（API的后端和Web应用程序的前端）它们位于不同的服务器上。因此，有必要为**跨域资源共享**配置Django。
- en: 'From the definition explained on Wikipedia:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科上的定义：
- en: '*Cross-origin resource sharing (CORS) is a mechanism that allows many resources
    (for example, fonts, JavaScript, and so on) on a web page to be requested from
    another domain outside the domain from which the resource originated.*'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*跨域资源共享（CORS）是一种机制，允许从资源原始域之外的另一个域请求网页上的许多资源（例如字体、JavaScript等）*'
- en: 'We need to alter our Django API to allow requests from other servers as well.
    We will now update the `api.py` file of the `tweets` application to allow `the
    requests` to the server cross-site request:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要修改我们的Django API，以允许来自其他服务器的请求。我们现在将更新`tweets`应用程序的`api.py`文件，以允许对服务器的跨站点请求：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: After adding this class, we can create a subclass of any resource that we want
    to expose for a cross-domain request. We will now change our `Tweet` class to
    make it available for cross-site access.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了这个类之后，我们可以创建任何资源的子类，以便为跨域请求公开。我们现在将更改我们的`Tweet`类，以便可以跨站点访问。
- en: 'Let''s update the `Tweet` class to the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将`Tweet`类更新为以下内容：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, the tweet resource is ready for access from different domains.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，推文资源已准备好从不同的域访问。
- en: 'The following is a basic AngularJS example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个基本的AngularJS示例：
- en: 'Create a single HTML file called `app.html` (as this file is independent of
    our existing Django project, we can create it outside the project folder) with
    the following content. Currently, this page uses AngularJS from a local disk,
    you can import the page from a CDN as well:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`app.html`的单个HTML文件（由于此文件与我们现有的Django项目无关，因此可以在项目文件夹之外创建），内容如下。当前，此页面使用来自本地磁盘的AngularJS，您也可以从CDN导入页面：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the following code, the `ng-controller` directive is triggered at its render
    time, which processes any business logic and injects the calculated models inside
    the scope.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下代码中，`ng-controller`指令在其渲染时触发，它处理任何业务逻辑，并将计算的模型注入作用域内。
- en: The `<div ng-controller="tweetController">` tag is one example where the `tweetController`
    parameter is processed before its `div` is rendered.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`<div ng-controller="tweetController">`标签是一个例子，其中`tweetController`参数在其`div`呈现之前被处理。'
- en: 'We have our business logic completely in JavaScript in the `app.js` file:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的业务逻辑完全在`app.js`文件中的JavaScript中：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This `app.js` file makes a request to the API endpoint of tweets and injects
    the `tweets` object to the scope, which is rendered by the AngularJS in view (`app.html`)
    with the `ng-repeat` loop directive:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此`app.js`文件向推文的API端点发出请求，并将`tweets`对象注入到作用域中，由AngularJS在视图（`app.html`）中使用`ng-repeat`循环指令呈现：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The output of the preceding code is shown in the following figure, which shows
    the country and tweets:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下图所示，显示了国家和推文：
- en: '![AngularJS meets Django](img/image00343.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![AngularJS meets Django](img/image00343.jpeg)'
- en: This is just a basic AngularJS application, as advanced web development has
    moved from backend to frontend completely. An AngularJS-based application is best
    suited for a complete single-page application.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个基本的AngularJS应用程序，因为高级Web开发已完全从后端转移到前端。基于AngularJS的应用程序最适合完整的单页应用程序。
- en: Django search with Elasticsearch
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Elasticsearch的Django搜索
- en: Search has become an integral part of most of the applications we deal with
    nowadays. From Facebook, to search for a friend, to Google, where you search the
    whole Web, everything from blog to log needs a search capability to unlock the
    hidden information on a website.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索已成为我们现在处理的大多数应用程序的一个组成部分。从Facebook，搜索朋友，到Google，在那里您搜索整个Web，从博客到日志，一切都需要搜索功能来解锁网站上的隐藏信息。
- en: The Web is evolving at an exponential rate. A GB of data is now obsolete and
    hundreds of terabytes of both structured and unstructured data is generated every
    day.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Web正以指数速度发展。现在，1GB的数据已经过时，每天产生数百TB的结构化和非结构化数据。
- en: '**Elasticsearch** (**ES**) is better than other alternatives because, in addition
    to providing full-text search, it provides meaningful real-time data analytics
    and is highly scalable with a strong support for clustered data infrastructure.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Elasticsearch**（**ES**）比其他替代方案更好，因为除了提供全文搜索外，它还提供有意义的实时数据分析，并且在集群数据基础设施方面具有高度可扩展性的强大支持。'
- en: Elasticsearch also gives you a simple REST API that can easily integrate with
    any custom application and a Django (and more broadly, Python) development environment
    gives a lot of cool, out-of-the-box tools to implement Elasticsearch.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch还为您提供了一个简单的REST API，可以轻松集成到任何自定义应用程序和Django（更广泛地说，Python）开发环境中，提供了许多很酷的开箱即用的工具来实现Elasticsearch。
- en: The Elasticsearch website ([http://www.elasticsearch.org/](http://www.elasticsearch.org/))
    contains a thorough documentation and there are lots of great examples online
    that will help you build any kind of search you need. By making full use of Elasticsearch,
    you can probably build your own "Google" with it.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch网站（[http://www.elasticsearch.org/](http://www.elasticsearch.org/)）包含详尽的文档，网上还有很多很好的例子，这些例子将帮助您构建任何您需要的搜索。通过充分利用Elasticsearch，您可能可以用它构建自己的“Google”。
- en: Installing an Elasticsearch server
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Elasticsearch服务器
- en: 'First, install Java. Then, download and extract Elasticsearch. You can either
    run ES as a service or you can start an ES server using the following Shell commands
    (change paths in accordance with your system):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 首先安装Java。然后，下载并提取Elasticsearch。您可以将ES作为服务运行，也可以使用以下Shell命令启动ES服务器（根据您的系统更改路径）：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If it is done correctly, you can call the following URL in your browser:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果做得正确，您可以在浏览器中调用以下URL：
- en: '`http://127.0.0.1:9200/`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://127.0.0.1:9200/`'
- en: 'It will give you a response in the following way, but with a different `build_hash`
    parameter:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 它将以以下方式给出响应，但`build_hash`参数不同：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Elasticsearch comes with basic configurations for basic deployment. However,
    if you want to tweak the configuration, then refer to its online documents and
    change the Elasticsearch configuration in the `elasticsearch.yml` file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch带有基本的部署配置。但是，如果您想调整配置，那么请参考其在线文档，并在`elasticsearch.yml`文件中更改Elasticsearch配置。
- en: Communication between Elasticsearch and Django
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Elasticsearch与Django之间的通信
- en: 'Django can be seamlessly integrated with Elasticsearch using basic Python programming.
    In this example, we will use the Python requests library to make the request from
    Django to Elasticsearch We can install requests by typing the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Django可以使用基本的Python编程与Elasticsearch无缝集成。在此示例中，我们将使用Python请求库从Django向Elasticsearch发出请求。我们可以通过输入以下代码来安装请求：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'For the search functionality, there are mainly three operations that we need
    to execute:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 对于搜索功能，我们主要需要执行三个操作：
- en: Create an Elasticsearch index.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Elasticsearch索引。
- en: Feed the index with data.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向索引提供数据。
- en: Retrieve the search results.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检索搜索结果。
- en: Creating an Elasticsearch index
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创建Elasticsearch索引
- en: Before loading an Elasticsearch index with text and retrieving the search results,
    Elasticsearch has to know some details about your content and how data should
    be treated. Therefore, we create an ES index that consists of settings and mappings.
    **Mappings** are the ES equivalents of Django's models—data field definitions
    for your content.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载Elasticsearch索引并检索搜索结果之前，Elasticsearch必须了解有关您的内容以及数据处理方式的一些详细信息。因此，我们创建了一个包含设置和映射的ES索引。**映射**是ES中Django模型的等价物-用于定义内容的数据字段。
- en: Although mappings are completely optional, as Elasticsearch dynamically creates
    a mapping from the information that it has got for indexing, but it is advised
    that you predefine the data map for indexing.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然映射是完全可选的，因为Elasticsearch会根据其用于索引的信息动态创建映射，但建议您预定义用于索引的数据映射。
- en: 'A Python example for creating an ES index is as follows:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个ES索引的Python示例如下：
- en: '[PRE8]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output of the preceding code is shown in the following figure:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出如下图所示：
- en: '![Creating an Elasticsearch index](img/image00344.jpeg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![创建Elasticsearch索引](img/image00344.jpeg)'
- en: For every operation done with Elasticearch, it gives a response message such
    as `{"acknowledged":true}`, which means that our index has been created successfully
    by Elasticsearch.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 对于使用Elasticearch进行的每个操作，它都会给出一个响应消息，例如`{"acknowledged":true}`，这意味着我们的索引已成功由Elasticsearch创建。
- en: 'We can check whether the mapping has actually been updated or not by making
    a query command such as:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过执行查询命令来检查映射是否实际已更新：
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The following figure shows that Elasticsearch has been updated with the new
    mapping:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图显示了Elasticsearch已更新了新的映射：
- en: '![Creating an Elasticsearch index](img/image00345.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![创建Elasticsearch索引](img/image00345.jpeg)'
- en: After we created our first Elasticsearch index, we created the JSON dictionary
    with the information and dumped this information into Elasticsearch via Python
    requests. The **"contacts"** parameter is the index name we have choosen and we
    will use this name to feed and retrieve data from the Elasticsearch server. The
    **"mappings"** key describes what data your index will hold. We can have as many
    different mappings as we like. Every mapping contains a field in which data is
    stored, exactly, like a Django model. Some of the basic core fields are string,
    number, data, Boolean, and so on. The full list is given in the Elasticsearch
    documentation. The "shards" and "replicas" parameters are explained in the ES
    glossary. Without the "settings" key, ES would simply use the default values—which
    in most cases is perfectly fine.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了我们的第一个Elasticsearch索引之后，我们创建了包含信息的JSON字典，并通过Python请求将此信息转储到Elasticsearch中。**"contacts"**参数是我们选择的索引名称，我们将使用这个名称来向Elasticsearch服务器提供和检索数据。**"mappings"**键描述了您的索引将保存的数据。我们可以有尽可能多的不同映射。每个映射都包含一个字段，其中存储数据，就像Django模型一样。一些基本的核心字段是字符串、数字、日期、布尔值等等。完整的列表在Elasticsearch文档中给出。"shards"和"replicas"参数在ES术语表中有解释。没有"settings"键，ES将简单地使用默认值-在大多数情况下这是完全可以的。
- en: Feeding the index with data
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 向索引提供数据
- en: 'Now that you have created an index, let''s store content inside it. An example
    Python code for our imaginary BlogPost model that contains a title, description,
    and content as text fields is as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经创建了一个索引，让我们将内容存储在其中。一个包含标题、描述和内容作为文本字段的虚构BlogPost模型的示例Python代码如下：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You will see the output, which is shown as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到如下所示的输出：
- en: '![Feeding the index with data](img/image00346.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![向索引提供数据](img/image00346.jpeg)'
- en: This acknowledgment shows that our contact data has been indexed. Of course,
    indexing a single data and searching it does not makes much sense, so we will
    index more contacts before we make a retrieval query.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个确认显示我们的联系人数据已被索引。当然，索引单个数据并搜索它并没有太多意义，所以在进行检索查询之前，我们将索引更多的联系人。
- en: 'Elasticsearch also provides bulk indexing, which can be used as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Elasticsearch还提供了批量索引，可以按如下方式使用：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Let''s take a look at the following screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下以下的屏幕截图：
- en: '![Feeding the index with data](img/image00347.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![向索引提供数据](img/image00347.jpeg)'
- en: 'As you can see in the preceding screenshot, the **"status": 201** parameter,
    which in the HTTP status means that the record is successfully created. Elasticsearch
    reads data line by line, so we used **"\n"** at the end of every dataset. Bulk
    operations are much faster than running the multiple single request.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '正如您在前面的屏幕截图中所看到的，**"status": 201**参数在HTTP状态中表示记录已成功创建。Elasticsearch逐行读取数据，因此我们在每个数据集的末尾使用了**"\n"**。批量操作比运行多个单个请求要快得多。'
- en: This example is a simple JSON example. When we use Elasticsearch with our Django
    application, the same JSON object can be replaced by the Django model and to index
    the model, you can get all the Django model objects from the `ModelName.objects.all()`
    query and then parse and save it. Also, in the case of the manual ID, as we used
    in the preceding example, which is the index count, it will be much more convenient
    if you use a primary key to index it as an Elasticsearch ID. This will help us
    to directly query for a result object if we are not passing the object information
    as a payload.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子是一个简单的JSON例子。当我们在Django应用程序中使用Elasticsearch时，相同的JSON对象可以被Django模型替换，并且可以通过`ModelName.objects.all()`查询获取所有Django模型对象，然后解析并保存它。此外，在手动ID的情况下，正如我们在前面的例子中使用的那样，它是索引计数，如果您将主键用作Elasticsearch
    ID进行索引，那将更加方便。这将帮助我们直接查询结果对象，如果我们没有将对象信息作为有效负载传递。
- en: Retrieving search results from the index
  id: totrans-85
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 从索引中检索搜索结果
- en: 'Searching an index is rather simple. Again, we use Python requests to send
    a JSON-encoded data string to our ES endpoint:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索索引相当简单。同样，我们使用Python请求将JSON编码的数据字符串发送到我们的ES端点：
- en: '[PRE12]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This gives a result, as shown in the following figure:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这给出了如下图所示的结果：
- en: '![Retrieving search results from the index](img/image00348.jpeg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![从索引中检索搜索结果](img/image00348.jpeg)'
- en: In the example, we are looking for the term **"raj"** in our contacts index.
    ES returns all the hits ordered by relevancy in the JSON-encoded format. Each
    of these hits contains an **"_id"** field that gives you the primary key of the
    concerned blog post. Using Django's ORM, it's now simple to retrieve the actual
    objects from the database.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在示例中，我们正在搜索我们的联系人索引中的术语**"raj"**。ES以JSON编码格式返回所有按相关性排序的命中。每个命中都包含一个**"_id"**字段，该字段提供了所关联博客文章的主键。使用Django的ORM，现在可以简单地从数据库中检索实际对象。
- en: Note
  id: totrans-91
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The ES search endpoint offers an unlimited set of options and filters; fast
    retrieval from huge datasets, pagination, and everything you need to build a powerful
    search engine.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ES搜索端点提供了无限的选项和过滤器；从大型数据集中快速检索、分页以及构建强大搜索引擎所需的一切。
- en: This is just the tip of the iceberg. When you will build your Django application
    with Elasticsearch, you will explore many interesting features, such as aggregation,
    which can be used in the preceding example. It lists all the contact information
    of Ratan and autocomplete, which will be used to suggest a user the complete name
    from Elasticsearch, as they start typing in the search box for a contact.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是冰山一角。当您使用Elasticsearch构建Django应用程序时，您将探索许多有趣的功能，例如聚合，可以在前面的示例中使用。它列出了Ratan的所有联系信息和自动完成，该功能将用于建议用户在搜索联系人的搜索框中开始输入时从Elasticsearch中完整地名称。
- en: Summary
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the two important components that are used
    most often when the Django project is involved, namely, AngularJS and Elasticsearch.
    As frontend framework, AngularJS not only decreases the load from the server by
    pushing the render logic to a browser, it also gives a rich experience to the
    users when using an AngularJS-powered application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们了解了在涉及Django项目时最常用的两个重要组件，即AngularJS和Elasticsearch。作为前端框架，AngularJS不仅通过将渲染逻辑推送到浏览器来减少服务器的负载，还为用户在使用基于AngularJS的应用程序时提供丰富的体验。
- en: Elasticsearch, on the other hand, is one of the most popular search engines
    used, which is open source as well. The ease of setting up and scaling Elasticsearch
    is what makes it the choice for any search engine requirement. You learnt a bit
    about Django as well. As the chapter started, we're sure that you'll had the aim
    of learning a skill and of becoming experts in it. Well, this is just the beginning;
    there are more things that you need to explore to reach at the expert level in
    each topic that was discussed in this chapter. We have reached at the end of this
    book. In this book, we went through the process of building a micro blogging application
    from scratch using Django as our framework. We covered a lot of topics related
    to Web 2.0 and social applications, as well as many Django components. You can
    always refer to the online documentation of Django. If you want to learn more
    about a particular feature or component, visit [https://docs.djangoproject.com](https://docs.djangoproject.com).
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Elasticsearch是最流行的搜索引擎之一，也是开源的。设置和扩展Elasticsearch的便利性使其成为任何搜索引擎需求的选择。您也学到了一些关于Django的知识。正如本章开始时所说，我们相信您的目标是学习一项技能并成为其中的专家。好吧，这只是开始；还有更多的事情需要您去探索，以达到本章讨论的每个主题的专家级水平。我们已经到达了本书的结尾。在本书中，我们从头开始构建了一个微型博客应用程序的过程，使用Django作为我们的框架。我们涵盖了许多与Web
    2.0和社交应用程序相关的主题，以及许多Django组件。您可以随时参考Django的在线文档。如果您想了解特定功能或组件的更多信息，请访问[https://docs.djangoproject.com](https://docs.djangoproject.com)。
- en: Thanks for choosing this book to learn the Django web development basics. We
    wish you all the success in your professional life.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 感谢选择本书来学习Django Web开发基础知识。我们祝愿您在职业生涯中取得成功。
