- en: High-Level Customer Scenarios with Acceptance Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用验收测试编写高级客户场景
- en: 'In this chapter, we will cover the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Installing Pyccuracy
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Pyccuracy
- en: Testing the basics with Pyccuracy
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pyccuracy测试基础知识
- en: Using Pyccuracy to verify web app security
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pyccuracy验证Web应用程序安全性
- en: Installing Robot Framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装机器人框架
- en: Creating a data-driven test suite with Robot Framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robot框架创建数据驱动的测试套件
- en: Writing a testable story using Robot Framework
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robot框架编写可测试的故事
- en: Tagging Robot Framework tests and running a subset
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给Robot框架测试打标签并运行子集
- en: Testing web basics with Robot Framework
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robot框架测试Web基础知识
- en: Using Robot Framework to verify web app security
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robot框架验证Web应用程序安全性
- en: Creating a project-level script to run this chapter's acceptance tests
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个项目级脚本来运行本章的验收测试
- en: Introduction
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Acceptance testing involves writing tests to prove that our code is, well, acceptable!
    However, what does this mean? The context implies acceptable from a customer's
    perspective. Customers are usually more interested in what the software does,
    not how it does it. This means that tests are aimed at inputs and outputs and
    tend to be at a higher level than unit testing. This has sometimes been called
    black box testing and is usually more system oriented. At the end of the day,
    it is often associated with testing that asserts whether or not the customer will
    accept the software.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 验收测试涉及编写测试来证明我们的代码是可以接受的！但是，这是什么意思？上下文意味着从客户的角度来看是可以接受的。客户通常更感兴趣的是软件的功能，而不是它的工作方式。这意味着测试的目标是输入和输出，并且往往比单元测试更高级。这有时被称为黑盒测试，并且通常更加系统化。在一天结束时，它通常与断言客户是否接受软件有关。
- en: There is an assumption among some developers that acceptance testing involves
    verifying the frontend of web applications. In fact, several testing tools, including
    Pyccuracy, are built on the sole premise of testing web applications. When viewed
    from the perspective of whether or not a customer will accept the software, this
    will quite literally fit into acceptable from a customer's perspective.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发人员假设验收测试涉及验证Web应用程序的前端。实际上，包括Pyccuracy在内的几个测试工具都是基于测试Web应用程序的唯一前提构建的。从客户是否接受软件的角度来看，这实际上符合客户的接受标准。
- en: However, web testing isn't the only form of acceptance testing. Not all systems
    are web-based. If a subsystem is to be built by one team and handed off to another
    team that plans to build another layer on top of it, an acceptance test may be
    required before the second team will accept it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Web测试并不是唯一形式的验收测试。并非所有系统都是基于Web的。如果一个子系统由一个团队构建并交给另一个计划在其上构建另一层的团队，那么在第二个团队接受之前可能需要进行验收测试。
- en: For this chapter, we will dig into some recipes that involve both web and non-web
    application acceptance testing.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨涉及Web和非Web应用程序验收测试的一些方法。
- en: 'To create an e-store web application for testing, follow these steps:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个用于测试的电子商店Web应用程序，请按照以下步骤进行：
- en: 'Ensure that you have `mercurial` installed on your system:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保您的系统上已安装`mercurial`：
- en: For macOS, use either MacPorts or Homebrew
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于macOS，请使用MacPorts或Homebrew
- en: For Ubuntu/Debian, use `sudo apt-get install mercurial`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Ubuntu/Debian，请使用`sudo apt-get install mercurial`
- en: For other systems, you will need to do extra research in installing `mercurial`
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他系统，您需要额外研究安装`mercurial`
- en: 'This also requires having compilable tools installed, such as `gcc`:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这还需要安装可编译的工具，如`gcc`：
- en: For Ubuntu, use `sudo apt-get install build-essential`
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于Ubuntu，请使用`sudo apt-get install build-essential`
- en: For other systems, you will need to do extra research in installing `gcc`
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于其他系统，您需要额外研究安装`gcc`
- en: If you have other issues installing Satchmo in the following steps, visit the
    project site at [http://www.satchmoproject.com](http://www.satchmoproject.com)
    and possibly their support group at [http://groups.google.com/group/satchmo-users](http://groups.google.com/group/satchmo-users).
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在按照以下步骤安装Satchmo时遇到其他问题，请访问项目网站[http://www.satchmoproject.com](http://www.satchmoproject.com)，可能还要访问他们的支持小组[http://groups.google.com/group/satchmo-users](http://groups.google.com/group/satchmo-users)。
- en: 'Install Satchmo, an e-commerce website builder, by typing the following commands:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令安装Satchmo，一个电子商务网站构建器：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Install Python's `PIL` library for image processing with `pip install PIL`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip install PIL`安装Python的`PIL`库进行图像处理。
- en: Edit `<virtualenv root>/lib/python2.6/site-packages/django/contrib/admin/templates/admin/login.html`
    to add `id="login"` to the `Log in<input>` tag. This allows Pyccuracy to grab
    the `Log in` button and click it.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`<virtualenv root>/lib/python2.6/site-packages/django/contrib/admin/templates/admin/login.html`，将`id="login"`添加到`Log
    in<input>`标记。这允许Pyccuracy抓取`Log in`按钮并单击它。
- en: 'Run the Satchmo script to create store application: `clonesatchmo.py`.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行Satchmo脚本以创建商店应用程序：`clonesatchmo.py`。
- en: When prompted about creating a super-user, say `yes`.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示是否创建超级用户时，选择`yes`。
- en: When prompted, enter a `username`.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时，输入一个`用户名`。
- en: When prompted, enter an `e-mail address`.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时，输入一个`电子邮件地址`。
- en: When prompted, enter a `password`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在提示时，输入一个`密码`。
- en: 'Go into store directory: `cd store`.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 进入store目录：`cd store`。
- en: 'Start up the store app: `python manage.py runserver`.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动商店应用程序：`python manage.py runserver`。
- en: If you have issues installing Satchmo with these steps, visit the project site
    at [http://www.satchmoproject.com](http://www.satchmoproject.com) and possibly
    their support group at [https://groups.google.com/forum/#!forum/satchmo-users](https://groups.google.com/forum/#!forum/satchmo-users).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在按照这些步骤安装Satchmo时遇到问题，请访问项目网站[http://www.satchmoproject.com](http://www.satchmoproject.com)，可能还要访问他们的支持小组[https://groups.google.com/forum/#!forum/satchmo-users](https://groups.google.com/forum/#!forum/satchmo-users)。
- en: 'To create a non-web shopping cart application for testing, create `cart.py`
    with the following code:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个用于测试的非Web购物车应用程序，请创建`cart.py`，其中包含以下代码：
- en: '[PRE1]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This shopping cart has the following characteristics:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个购物车具有以下特点：
- en: Is 1-based, meaning that the first item and price are at `[1]` not `[0]`
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从`[1]`开始，这意味着第一个项目和价格不是`[0]`
- en: Includes the ability to have multiples of the same item
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包括具有相同项目的多个能力
- en: Will calculate total price and then add taxes
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将计算总价格，然后添加税金
- en: This application isn't complex. Maybe it doesn't look exactly at a system level,
    but it does provide an easy application to write acceptance tests against.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用程序并不复杂。也许它并不完全看起来像一个系统级别，但它确实提供了一个易于编写验收测试的应用程序。
- en: Installing Pyccuracy
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Pyccuracy
- en: Pyccuracy is a useful tool for writing web acceptance tests using a BDD-style
    language. This recipe shows all the steps needed to install it and set it up for
    later recipes.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Pyccuracy是使用BDD风格语言编写Web验收测试的有用工具。本食谱展示了安装它并为后续食谱设置它所需的所有步骤。
- en: How to do it...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With these steps, we will install Pyccuracy and all the tools needed to run
    the scenarios later in this chapter:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们将安装Pyccuracy和运行本章后续场景所需的所有工具：
- en: Install `Pyccuracy` by typing `pip install pyccuracy`.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pip install pyccuracy`来安装`Pyccuracy`。
- en: Download `selenium-server.jar` from [http://github.com/heynemann/pyccuracy/raw/master/lib/selenium-server.jar](http://github.com/heynemann/pyccuracy/raw/master/lib/selenium-server.jar).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从[http://github.com/heynemann/pyccuracy/raw/master/lib/selenium-server.jar](http://github.com/heynemann/pyccuracy/raw/master/lib/selenium-server.jar)下载`selenium-server.jar`。
- en: Start it up by typing `java -jar selenium-server.jar`. Note that if you don't
    have Java installed, you definitely need to download and install it as well.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`java -jar selenium-server.jar`来启动它。请注意，如果您没有安装Java，您肯定需要下载并安装它。
- en: Install `lxml` by typing `pip install lxml`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pip install lxml`来安装`lxml`。
- en: 'Create a simple test file called `recipe35.acc` and enter the following code:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe35.acc`的简单测试文件，并输入以下代码：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Run it by typing `pyccuracy_console -p test.acc`. The following screenshot
    shows it being run with Firefox (default for this system):'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入`pyccuracy_console -p test.acc`来运行。以下截图显示它在Firefox中运行（系统默认）：
- en: '![](../images/00077.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00077.jpeg)'
- en: 'Run it again, using a different web browser such as Safari, by typing `pyccuracy_console
    -p test.acc -b safari`:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次运行，使用不同的网页浏览器，如Safari，输入`pyccuracy_console -p test.acc -b safari`：
- en: '![](../images/00078.jpeg)At the time of writing, Selenium supports Firefox,
    Safari, Opera, and IE 7+, but not Chrome.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![](../images/00078.jpeg)在撰写本文时，Selenium支持Firefox、Safari、Opera和IE 7+，但不支持Chrome。'
- en: 'In the folder where we ran the test, there should now be a `report.html` file.
    Open it up using a browser to view the results. Then, click on Expand All:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行测试的文件夹中，现在应该有一个`report.html`文件。使用浏览器打开它以查看结果。然后，点击展开全部：
- en: '![](../images/00079.jpeg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00079.jpeg)'
- en: How it works...
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Pyccuracy uses Selenium, a popular browser-driving application tester to run
    its scenarios. Pyccuracy provides an out-of-the-box **Domain Specific Language**
    (**DSL**) to write tests. The DSL provides the means to send commands to a test
    browser and also check the results, verifying web application behavior.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Pyccuracy使用Selenium，一个流行的浏览器驱动应用程序测试工具来运行其场景。Pyccuracy提供了一个开箱即用的**领域特定语言**（**DSL**）来编写测试。DSL提供了发送命令到测试浏览器并检查结果的手段，验证Web应用程序的行为。
- en: Later on in this chapter, there are several recipes that show more details of
    Pyccuracy.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章后面，还有几个食谱展示了Pyccuracy的更多细节。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Testing the basics with Pyccuracy*'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Pyccuracy测试基础知识*'
- en: '*Using Pyccuracy to verify web app security*'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Pyccuracy验证Web应用程序安全*'
- en: Testing the basics with Pyccuracy
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pyccuracy测试基础知识
- en: Pyccuracy provides an easy-to-read set of operations to drive the frontend of
    a web application. This recipe shows how to use it to drive a shopping cart application
    and verify application functionality.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Pyccuracy提供了一套易于阅读的操作，用于驱动Web应用程序的前端。本食谱展示了如何使用它来驱动购物车应用程序并验证应用程序功能。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If it isn''t already running, start up the Selenium server in another shell
    or window by typing `java -jar selenium-server.jar`:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，请在另一个shell或窗口中输入`java -jar selenium-server.jar`启动Selenium服务器：
- en: '![](../images/00080.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00080.jpeg)'
- en: If the Satchmo store application isn't already running, start it up in another
    shell or window by typing python manage.py runserver.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Satchmo商店应用尚未运行，请在另一个shell或窗口中输入python manage.py runserver启动它。
- en: This must run inside the `virtualenv` environment.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须在`virtualenv`环境中运行。
- en: How to do it...
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With these steps, we will explore the basics of writing a Pyccuracy test:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些步骤，我们将探索编写Pyccuracy测试的基础知识：
- en: Create a new file called `recipe36.acc`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe36.acc`的新文件。
- en: 'Create a story for loading items into the shopping cart:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个加载商品到购物车的故事：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a scenario where the empty cart is looked at in detail, with a confirmed
    balance of `$0.00`:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个场景，其中详细查看了空购物车，并确认余额为`$0.00`：
- en: '[PRE4]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add another scenario where a book is selected and two of them are added to
    the cart:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个场景，其中选择了一本书，并将其中两本添加到购物车中：
- en: '[PRE5]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the story by typing `pyccuracy_console -p recipe36.acc`:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pyccuracy_console -p recipe36.acc`来运行故事：
- en: '![](../images/00081.jpeg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00081.jpeg)'
- en: How it works...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Pyccuracy has a lot of built-in actions based on driving the browser or reading
    the page. These actions are patterns used to parse the story file and generate
    commands sent to the Selenium server, which in turn drives the browser and then
    reads the results of the page.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Pyccuracy具有许多基于驱动浏览器或读取页面的内置操作。这些操作是用于解析故事文件并生成发送到Selenium服务器的命令的模式，然后驱动浏览器，然后读取页面的结果。
- en: The key is picking the right text to identify the element being actioned or
    read.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是选择正确的文本来识别正在操作或阅读的元素。
- en: Web apps that are missing ID tags are much hard to read.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 缺少ID标签的Web应用程序更难阅读。
- en: There's more...
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The key is picking the right identifier and element type. With good identifiers,
    it is easy to do things like—*I **click **on **Cart **link*. Did you note the
    issue we had with drilling into the shopping cart table? The HTML `<table>` tag
    had no identifier, which made it impossible for us to pick. Instead, we had to
    look at the whole page and do a global search for some markup.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 关键是选择正确的标识符和元素类型。有了良好的标识符，就可以轻松地执行诸如—*我**点击**购物车**链接*之类的操作。你注意到我们在查看购物车表时遇到的问题了吗？HTML
    `<table>`标签没有标识符，这使我们无法选择。相反，我们不得不查看整个页面并全局搜索一些标记。
- en: This makes it more difficult to read the test. A good solution is to alter the
    web app to include an ID in the `<table>` tag. Then, we narrow down our acceptance
    criteria to just the table. With this application it was okay, but with complex
    web applications, it will surely be much more difficult to find the exact bit
    of text we are looking for without good IDs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这使得测试变得更加困难。一个好的解决方案是修改Web应用程序以在`<table>`标签中包含一个ID。然后，我们将我们的验收标准缩小到只有表格。对于这个应用程序来说还好，但对于复杂的Web应用程序来说，如果没有良好的ID，要找到我们正在寻找的确切文本将会更加困难。
- en: This raises an interesting question—should an application be amended to support a test?
    Simply put, yes. It isn't a major upheaval to add some good identifiers to key
    HTML elements to support testing. It didn't involve major design changes to the
    application. The net result was easier to read test cases and better-automated
    testing.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这提出了一个有趣的问题——应该修改应用程序以支持测试吗？简单地说，是的。为关键的HTML元素添加一些良好的标识符以支持测试并不是一个重大的动荡。这并没有对应用程序进行重大的设计更改。最终结果是更容易阅读的测试用例和更好的自动化测试。
- en: This begs another question—what if making the application more testable did
    involve major design changes? This can be viewed as a major interruption in work.
    Alternatively, maybe it's a strong hint that our design has components that are
    too tightly coupled or not cohesive enough.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这引出了另一个问题——如果使应用程序更易于测试确实涉及重大设计更改怎么办？这可以被视为工作中的一个重大干扰。或者，也许这是一个强烈的暗示，我们的设计组件耦合过于紧密或者不够内聚。
- en: In software development, **coupling** and **cohesiveness** are subjective terms
    that aren't very measurable. What can be said is that applications that don't
    lend themselves to testing are often monolithic, hard to maintain, and probably
    have circular dependencies, which implies that it will be much harder for us to
    make changes (as developers) to meet needs without impacting the entire system.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件开发中，**耦合**和**内聚性**是主观的术语，很难衡量。可以说的是，不易于测试的应用程序通常是单片的，难以维护，并且可能存在循环依赖，这意味着我们作为开发人员很难进行更改，以满足需求而不影响整个系统。
- en: Of course, all of this would be a big leap from our recipe's situation, where
    we simply lack an identifier for an HTML table. However, it's important to ask
    this question—what if we need more changes than something so small?
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这与我们配方的情况有很大的不同，我们只是缺少HTML表的标识符。然而，重要的是要问这个问题——如果我们需要的变化比这么小的东西更多呢？
- en: See also
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing Pyccuracy*'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '*安装Pyccuracy*'
- en: Using Pyccuracy to verify web app security
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Pyccuracy来验证Web应用程序的安全性
- en: Applications often have login screens. Testing a secured web application requires
    us to capture the login process as a custom action. That way, we can reuse it
    repeatedly for as many scenarios as we need.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序通常有登录屏幕。测试安全的Web应用程序要求我们将登录过程作为自定义操作进行捕捉。这样，我们可以重复使用它，直到我们需要的场景为止。
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If it isn't already running, start up the Selenium server in another shell or
    window by typing `java -jar selenium-server.jar`.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，请在另一个shell或窗口中输入`java -jar selenium-server.jar`来启动Selenium服务器。
- en: If the Satchmo store application isn't already running, start it up in another
    shell or window by typing python manage.py runserver.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Satchmo商店应用程序尚未运行，请在另一个shell或窗口中输入python manage.py runserver来启动它。
- en: This must run inside the `virtualenv` environment.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这必须在`virtualenv`环境中运行。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With the following steps, we will exercise a web application''s security and
    then see how to extend Pyccuracy by creating a custom action that does so:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤，我们将练习一个Web应用程序的安全性，然后看看如何通过创建自定义操作来扩展Pyccuracy：
- en: Create a new file called `recipe37.acc` to put this recipe's scenario into.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe37.acc`的新文件，将此配方的场景放入其中。
- en: 'Create a story for exercising Django''s admin application:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为练习Django的管理员应用程序创建一个故事：
- en: '[PRE6]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Add a scenario that logs in to the admin application:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个登录到管理员应用程序的场景：
- en: '[PRE7]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Add a scenario that inspects the product catalog, using the custom login action:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个检查产品目录的场景，使用自定义登录操作：
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Create a matching file called `recipe37.py` containing a custom-defined action.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe37.py`的匹配文件，其中包含自定义定义的操作。
- en: 'Code the custom action of logging in to the admin action:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写登录到管理员操作的自定义操作：
- en: '[PRE9]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the story by typing `pyccuracy_console -p recipe37.acc`:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pyccuracy_console -p recipe37.acc`来运行故事：
- en: '![](../images/00082.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00082.jpeg)'
- en: How it works...
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first scenario shows the simple steps needed to exercise the login screen.
    After having proven that the login screen works, it becomes cumbersome to repeat
    this procedure for more scenarios.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个场景展示了练习登录屏幕所需的简单步骤。在证明登录屏幕有效之后，重复这个过程以进行更多场景变得繁琐。
- en: To handle this, we create a custom action in Python by extending `ActionBase`.
    Custom actions require a regular expression to define the DSL text. Next, we define
    an `execute` method to include a combination of application logic and Pyccuracy
    steps to execute. Essentially, we can define a set of steps to automatically execute
    actions and dynamically handle different situations.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这个问题，我们通过扩展`ActionBase`在Python中创建一个自定义操作。自定义操作需要一个正则表达式来定义DSL文本。接下来，我们定义一个`execute`方法，包括应用逻辑和Pyccuracy步骤的组合来执行。基本上，我们可以定义一组步骤来自动执行操作并动态处理不同的情况。
- en: In our situation, we coded it to handle whether or not the user was already
    logged in. With this custom action, we built the second scenario and handled logging
    in with a single statement, allowing us to move on and test the core part of our
    scenario.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的情况下，我们编写了代码来处理用户是否已经登录。通过这个自定义操作，我们构建了第二个场景，并用一个语句处理了登录，使我们能够继续测试我们场景的核心部分。
- en: See also
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing Pyccuracy*'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*安装Pyccuracy*'
- en: Installing Robot Framework
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Robot Framework
- en: Robot Framework is a useful framework for writing acceptance tests using the
    **keyword** approach. Keywords are shorthand commands that are provided by various
    libraries and can also be user defined. This easily supports BDD-style `Given`-`When`-`Then`
    keywords. It also opens the door to third-party libraries defining custom keywords
    to integrate with other test tools, such as Selenium. It also means that acceptance
    tests written using Robot Framework aren't confined to web applications.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework是一个有用的框架，用于使用**关键字**方法编写验收测试。关键字是各种库提供的简写命令，也可以是用户定义的。这很容易支持BDD风格的`Given`-`When`-`Then`关键字。它还为第三方库定义自定义关键字打开了大门，以与其他测试工具（如Selenium）集成。这也意味着使用Robot
    Framework编写的验收测试不局限于Web应用程序。
- en: This recipe shows all the steps needed to install Robot Framework as well as
    the third-party Robot Framework Selenium library for use in later recipes.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本配方展示了安装Robot Framework以及后续配方中使用的第三方Robot Framework Selenium库的所有步骤。
- en: How to do it...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: Ensure that you activate your `virtualenv` sandbox.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保激活您的`virtualenv`沙箱。
- en: Install by typing `easy_install robotframework`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`easy_install robotframework`进行安装。
- en: At the time of writing, Robot Framework was not able to be installed using `pip`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，Robot Framework无法使用`pip`安装。
- en: Using any type of window navigator, go to `<virtualenvroot>/build/robotframework/doc/quickstart`
    and open `quickstart.html` with your favorite browser. This is not only a guide
    but also a runnable test suite.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用任何类型的窗口导航器，转到`<virtualenvroot>/build/robotframework/doc/quickstart`并用您喜欢的浏览器打开`quickstart.html`。这不仅是一个指南，也是一个可运行的测试套件。
- en: 'Switch to your virtualenv''s build directory for Robot Framework: `cd<virtualenvroot>/build/robotframework/doc/quickstart`.'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到Robot Framework的虚拟环境构建目录：`cd<virtualenvroot>/build/robotframework/doc/quickstart`。
- en: 'Run the Quick Start manual through `pybot` to verify installation with `pybot
    quickstart.html`:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`pybot quickstart.html`运行快速入门手册以验证安装：
- en: '![](../images/00083.jpeg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00083.jpeg)'
- en: Inspect the `report.html`, `log.html`, and `output.xml` files generated by the
    test run.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查测试运行生成的`report.html`、`log.html`和`output.xml`文件。
- en: Install the Robot Framework Selenium library to allow integration with Selenium
    by first downloading [http://robotframework-seleniumlibrary.googlecode.com/files/robotframework-seleniumlibrary-2.5.tar.gz](http://robotframework-seleniumlibrary.googlecode.com/files/robotframework-seleniumlibrary-2.5.tar.gz).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装Robot Framework Selenium库，以便首先下载[http://robotframework-seleniumlibrary.googlecode.com/files/robotframework-seleniumlibrary-2.5.tar.gz](http://robotframework-seleniumlibrary.googlecode.com/files/robotframework-seleniumlibrary-2.5.tar.gz)进行集成。
- en: Unpack the tarball.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解压tarball。
- en: Switch to the directory with `cd robotframework-seleniumlibrary-2.5`.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到带有`cd robotframework-seleniumlibrary-2.5`的目录。
- en: Install the package with `python setup.py install`.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python setup.py install`安装软件包。
- en: Switch to the demo directory with `cd demo`.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到演示目录，使用`cd demo`。
- en: Start up the demo web app with `python run demo.py demoapp start`.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python run demo.py demoapp start`启动演示Web应用程序。
- en: Start up the Selenium server with `python run demo.py selenium start`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python run demo.py selenium start`启动Selenium服务器。
- en: 'Run the demo tests with `pybot login_tests`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pybot login_tests`运行演示测试：
- en: '![](../images/00084.jpeg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00084.jpeg)'
- en: Shut down the demo web app with `python run demo.py demoapp stop`.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python run demo.py demoapp stop`关闭演示Web应用程序。
- en: Shut down the Selenium server with `python run demo.py selenium stop`.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`python run demo.py selenium stop`关闭Selenium服务器。
- en: Inspect the `report.html`, `log.html`, `output.xml`, and `selenium_log.txt`
    files generated by the test run.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查测试运行生成的`report.html`、`log.html`、`output.xml`和`selenium_log.txt`文件。
- en: There's more...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: With this recipe, we have installed Robot Framework and one third-party library
    that integrates Robot Framework with Selenium.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个配方，我们已经安装了Robot Framework和一个与Selenium集成的第三方库。
- en: There are many more third-party libraries that provide enhanced functionality
    to Robot Framework. The options have enough potential to fill an entire book.
    So, we must narrow our focus to some of the core features provided by Robot Framework,
    including both web and non-web testing.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多第三方库为Robot Framework提供了增强功能。这些选项有足够的潜力填满一本书。因此，我们必须把焦点缩小到Robot Framework提供的一些核心功能，包括Web和非Web测试。
- en: Creating a data-driven test suite with Robot Framework
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Robot Framework创建数据驱动的测试套件
- en: Robot Framework uses **keywords** to define tests, test steps, variables, and
    other testing components. Keywords are shorthand commands that are provided by
    various libraries and can also be custom-defined. This allows many different ways
    of writing and organizing tests.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework使用**关键字**来定义测试、测试步骤、变量和其他测试组件。关键字是各种库提供的简写命令，也可以是自定义的。这允许以许多不同的方式编写和组织测试。
- en: In this recipe, we'll explore how to run the same test procedure with varying
    inputs and outputs. These can be described as data-driven tests.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将探讨如何使用不同的输入和输出运行相同的测试过程。这些可以被描述为数据驱动测试。
- en: Getting ready
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We first need to activate our `virtualenv` setup
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要激活我们的`virtualenv`设置
- en: For this recipe, we will use the shopping cart application
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用购物车应用程序
- en: Next, we need to install Robot Framework, as shown in the previous recipe
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装Robot Framework，如前一个配方所示
- en: How to do it...
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will show us how to write a simple acceptance test using
    HTML tables:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将向我们展示如何使用HTML表编写简单的验收测试：
- en: Create a new file called `recipe39.html` to capture the tests and configurations.
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe39.html`的新文件来捕捉测试和配置。
- en: 'Add an HTML paragraph and table that contains a set of data-driven test cases,
    as shown in the following browser screenshot:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个包含一组数据驱动测试用例的HTML段落和表，如下所示的浏览器截图：
- en: '![](../images/00085.jpeg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00085.jpeg)'
- en: 'Add another HTML paragraph and table defining the custom keywords Adding items to cart
    and Add item:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个HTML段落和表，定义自定义关键字Adding items to cart和Add item：
- en: '![](../images/00086.jpeg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00086.jpeg)'
- en: Create a new file called `recipe39.py` to contain Python code that is wired
    into our custom keywords.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe39.py`的新文件，其中包含与我们的自定义关键字相关联的Python代码。
- en: 'Create an old-style Python class that implements the custom keywords needed
    for the scenarios:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个旧式的Python类，实现所需场景的自定义关键字：
- en: '[PRE10]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: It's important to define the class *old-**style*. If we define it as *new-**style*
    by subclassing `object`, Robot Framework's runner, `pybot`, won't find the methods
    and associate them with our HTML keywords.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要定义类为*旧式*。如果我们将其定义为*新式*，即通过子类化`object`，Robot Framework的运行器`pybot`将无法找到这些方法并将它们与我们的HTML关键字关联起来。
- en: 'Add a third HTML paragraph and table that loads our Python code to implement
    Add item to cart and Get total:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第三个HTML段落和表，加载我们的Python代码来实现Add item to cart和Get total：
- en: '![](../images/00087.jpeg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00087.jpeg)'
- en: 'View the HTML file in your favorite browser:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您喜欢的浏览器中查看HTML文件：
- en: '![](../images/00088.jpeg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00088.jpeg)'
- en: 'Run the HTML file through `pybot` to exercise the tests by typing `pybot recipe39.html`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端输入`pybot recipe39.html`来运行HTML文件以执行测试：
- en: '![](../images/00089.jpeg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00089.jpeg)'
- en: You can inspect `report.html` and `log.html` using your favorite browser for
    more details about the results.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用您喜欢的浏览器检查`report.html`和`log.html`，以获取有关结果的更多详细信息。
- en: How it works...
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Robot Framework uses HTML tables to define test components. The header row of
    the table identifies what type of component the table defines.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework使用HTML表来定义测试组件。表的标题行标识了表定义的组件类型。
- en: The first table we created was a set of test cases. Robot Framework spots this
    by seeing `Test Case` in the first cell of the header row. The rest of the header
    cells aren't parsed, which leaves us free to put in descriptive text. In this
    recipe, each of our test cases is defined with one-line. The second column has
    `Adding items to cart` on every row, which is a custom keyword defined in the
    second table. The rest of the columns are arguments for this custom keywords.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的第一个表是一组测试用例。Robot Framework通过在标题行的第一个单元格中看到`Test Case`来识别这一点。标题的其余单元格不会被解析，这使我们可以自由地输入描述性文本。在这个示例中，我们的每个测试用例都是用一行定义的。第二列在每一行上都有`Adding
    items to cart`，这是在第二个表中定义的自定义关键字。其余的列是这些自定义关键字的参数。
- en: 'The second table we wrote is used to define custom keywords. Robot Framework
    figures this out by seeing `Keyword` in the first cell of the header row. Our
    table defines two keywords:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的第二个表用于定义自定义关键字。Robot Framework通过在标题行的第一个单元格中看到`Keyword`来确定这一点。我们的表定义了两个关键字：
- en: '`Adding items to cart`:'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Adding items to cart`：'
- en: 'The first line defines the arguments by starting with `[Arguments]` and six
    input variables: `${item1}`, `${price1}`, `${item2}`, `${price2}`, `${tax}`, and
    `${total}`'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行通过以`[Arguments]`开头来定义参数，有六个输入变量：`${item1}`、`${price1}`、`${item2}`、`${price2}`、`${tax}`和`${total}`
- en: The next set of lines are actions
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来的一组行是操作
- en: 'Lines two and three use another custom keyword: `Add item` with two arguments'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行和第三行使用了另一个自定义关键字：`Add item`，带有两个参数。
- en: Line four defines a new variable, `${calculated total}`, which is assigned the
    results of another keyword, `Get total` with one argument, `${tax},` that is defined
    in our Python module
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四行定义了一个新变量`${calculated total}`，它被赋予了另一个关键字`Get total`的结果，该关键字带有一个参数`${tax}`，该参数在我们的Python模块中定义。
- en: The last line uses a built-in keyword, `Should Be Equal`, to confirm that the
    output of `Get total` matches the original `${total}`
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一行使用了一个内置关键字`Should Be Equal`，来确认`Get total`的输出是否与原始`${total}`匹配。
- en: '`Add item`:'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Add item`：'
- en: 'The first line defines arguments by starting with `[Arguments]` and two input
    variables: `${description}` and `${price}`.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一行通过以`[Arguments]`开头来定义参数，有两个输入变量：`${description}`和`${price}`。
- en: 'The second line uses another keyword, `Add item to cart`, that is defined in
    our Python module, with two named arguments: `${description}` and `${price}`.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二行使用了另一个关键字`Add item to cart`，该关键字在我们的Python模块中定义，带有两个命名参数：`${description}`和`${price}`。
- en: The third table we made contains settings. This is identified by seeing `Setting`
    in the first cell of the header row. This table is used to import Python code
    that contains the final keywords using the built-in keyword `Library`.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作的第三个表包含设置。通过在标题行的第一个单元格中看到`Setting`来识别。该表用于导入包含最终关键字的Python代码，使用内置关键字`Library`。
- en: There's more...
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Robot Framework maps our keywords to our Python code by a very simple convention:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework通过一个非常简单的约定将我们的关键字映射到我们的Python代码：
- en: '`Get total ${tax}` maps to `get_total(self,tax)`'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Get total ${tax}`映射到`get_total(self,tax)`'
- en: '`Add item to cart ${description} ${price}` maps to `add_item_to_cart(self,
    description, price)`'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Add item to cart ${description} ${price}`映射到`add_item_to_cart(self, description,
    price)`'
- en: The reason we need `add_item_to_cart` and couldn't have just written `add_item`
    to tie in to the `Add item` keyword is because Robot Framework uses named arguments
    when connecting to Python code. Since each usage of `Add item` in our tables had
    a different variable name, we needed a separate keyword with distinct arguments.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要`add_item_to_cart`而不能只写`add_item`来连接`Add item`关键字的原因是因为Robot Framework在连接Python代码时使用命名参数。由于我们表中每次使用`Add
    item`都有不同的变量名，我们需要一个带有不同参数的单独关键字。
- en: Do I have to write HTML tables?
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我必须写HTML表吗？
- en: Robot Framework is driven by HTML tables, but it doesn't matter how the tables
    are generated. Many projects use tools like **reStructuredText** ([http://docutils.sourceforge.net/rst.html](http://docutils.sourceforge.net/rst.html))
    to write tables in a less verbose way, and then have a parser that converts it
    into HTML. A useful tool for converting `.rst` to HTML is **docutils** ([http://docutils.sourceforge.net/](http://docutils.sourceforge.net/)).
    It provides a convenient `rst2html.py` script that will convert all the `.rst`
    tables into HTML.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework由HTML表格驱动，但表格的生成方式并不重要。许多项目使用诸如**reStructuredText** ([http://docutils.sourceforge.net/rst.html](http://docutils.sourceforge.net/rst.html))之类的工具以更简洁的方式编写表格，然后使用转换器将其转换为HTML。将`.rst`转换为HTML的有用工具是**docutils**
    ([http://docutils.sourceforge.net/](http://docutils.sourceforge.net/))。它提供了一个方便的`rst2html.py`脚本，可以将所有`.rst`表格转换为HTML。
- en: Unfortunately, the format of this book makes it hard to present `.rst` as either
    code or with a screenshot.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，本书的格式使得很难将`.rst`呈现为代码或屏幕截图。
- en: What are the best ways to write the code that implements our custom keywords?
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写实现我们自定义关键字的代码的最佳方法是什么？
- en: We wrote a chunk of Python code to tie in our custom keywords with the `ShoppingCart`
    application. It is important to make this as light as possible. *Why?* It's because
    when we deploy the actual application, this bridge shouldn't be a part of it.
    It may be tempting to use this bridge as an opportunity to bundle things up or
    to transform things, but this should be avoided.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写了一大块Python代码，将我们的自定义关键字与`ShoppingCart`应用程序联系起来。使其尽可能轻量化非常重要。*为什么？*因为当我们部署实际应用程序时，这个桥梁不应该是其中的一部分。可能会诱人将此桥梁用作捆绑事物或转换事物的机会，但应该避免这样做。
- en: Instead, it is better to include these functions in the software application
    itself. Then, this extra functionality becomes a part of the tested, deployed
    software functionality.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，最好将这些功能包含在软件应用程序本身中。然后，这个额外的功能就成为经过测试、部署的软件功能的一部分。
- en: If we don't invest too heavily in the bridging code, it helps us avoid making
    the software dependent on the test framework. For some reason, if we ever decided
    to switch to something other than Robot Framework, we wouldn't be tied into that
    particular tool due to having too much invested in the bridging code.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不过多地投资于桥接代码，可以帮助我们避免使软件依赖于测试框架。出于某种原因，如果我们决定切换到Robot Framework之外的其他东西，由于在桥接代码中投入了太多，我们不会被束缚在特定工具中。
- en: Robot Framework variables are Unicode
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Robot Framework变量是Unicode
- en: Another critical factor in making our Python code work is recognizing that the
    input values are Unicode strings. Since `ShoppingCart` is based on floating point
    values, we had to use Python's `float(input)` function to convert inputs, and
    `format(output, ".2f")` to convert outputs.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在使我们的Python代码工作的过程中，另一个关键因素是认识到输入值是Unicode字符串。由于`ShoppingCart`是基于浮点值的，我们必须使用Python的`float(input)`函数来转换输入，以及`format(output,
    ".2f")`来转换输出。
- en: Does this contradict the previous section where we discussed keeping this bridge as light as possible?
    It doesn't. By using pure, built-in Python functions that have no side effects,
    we aren't getting in deep, and instead are only messaging the formats to line
    things up. If we started manipulating containers, or converting strings to lists,
    and vice versa, or even defining new classes, then that would definitely be getting
    too heavy for this bridge.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是否与前面讨论的尽可能保持轻量级的桥梁相矛盾？并不是。通过使用纯粹的内置Python函数，没有副作用，我们不会陷入困境，而只是将格式消息传递给排列事物。如果我们开始操纵容器，或将字符串转换为列表，反之亦然，甚至定义新类，那肯定会对这个桥梁太重了。
- en: See also
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing Robot Framework*'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*安装Robot Framework*'
- en: Writing a testable story with Robot Framework
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Robot Framework编写可测试的故事
- en: As discussed earlier in this chapter, Robot Framework lets us use custom-defined
    keywords.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 正如本章前面讨论的那样，Robot Framework让我们可以使用自定义定义的关键字。
- en: This gives us the ability to structure keywords in any style. In this recipe,
    we will define custom keywords that implement the BDD-`Given`-`When`-`Then`-style
    of specification.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这使我们能够以任何风格构建关键字。在这个配方中，我们将定义实现BDD-`Given`-`When`-`Then`风格规范的自定义关键字。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We first need to activate our `virtualenv` setup.
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要激活我们的`virtualenv`设置。
- en: For this recipe, we will use the shopping cart application.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用购物车应用程序。
- en: Next, we need to install Robot Framework, as shown in the previous sections
    of this chapter.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装Robot Framework，就像本章的前几节所示。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will explore how to write a BDD-`Given-When-Then`-style
    acceptance test:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将探讨如何编写BDD-`Given-When-Then`风格的验收测试：
- en: Create a new file called `recipe40.html` to put our HTML tables.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe40.html`的新文件，放入我们的HTML表格。
- en: 'Create a story file in HTML with an opening statement:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在HTML中创建一个带有开头声明的故事文件：
- en: '![](../images/00090.jpeg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00090.jpeg)'
- en: 'Add a table with several scenarios used to exercise the shopping cart application
    with a series of `Given`-`When`-`Then` keywords:'
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个包含几个场景的表格，用于使用一系列`Given`-`When`-`Then`关键字来执行购物车应用程序。
- en: '![](../images/00091.jpeg)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00091.jpeg)'
- en: 'Add a second table that defines all of our custom `Given-When-Then` custom
    keywords:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加第二个表格，定义我们所有自定义的`Given-When-Then`自定义关键字。
- en: '![](../images/00092.jpeg)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00092.jpeg)'
- en: 'Create a new file called `recipe40.py` to put Python code that links the custom
    keywords to the `ShoppingCart` application:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe40.py`的新文件，将自定义关键字与`ShoppingCart`应用程序链接起来的Python代码放入其中。
- en: '[PRE11]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: It is critical that this class is implemented old-style. If implemented new-style
    by extending `object`, Robot Framework will not link the keywords.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类实现为旧式是至关重要的。如果通过扩展`object`实现为新式，Robot Framework将无法链接关键字。
- en: 'Add a third table to our `recipe40.html` file to import our Python module:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的`recipe40.html`文件中添加第三个表格来导入我们的Python模块。
- en: '![](../images/00093.jpeg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00093.jpeg)'
- en: 'Run the story by typing `pybot recipe40.html`:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pybot recipe40.html`来运行故事：
- en: '![](../images/00094.jpeg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00094.jpeg)'
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Robot Framework uses HTML tables to define test components. The header row of
    the table identifies what type of component the table defines.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework使用HTML表来定义测试组件。表的标题行标识了表定义的组件类型。
- en: The first table we created was a set of test cases. Robot Framework spots this
    by seeing `Test Case` in the first cell of the header row. The rest of the header
    cells aren't parsed, which leaves us free to put in descriptive text.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的第一个表是一组测试用例。Robot Framework通过在标题行的第一个单元格中看到`Test Case`来识别这一点。标题行的其余单元格不被解析，这使我们可以自由地放入描述性文本。
- en: In this recipe, each of our test cases comprised several custom keywords using
    the `Given-When-Then`-style familiar to BDD testers. Many of these keywords have
    one or more arguments.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们的每个测试用例都包含了使用BDD测试人员熟悉的`Given-When-Then`风格的几个自定义关键字。许多这些关键字有一个或多个参数。
- en: The second table we wrote was used to define our custom `Given-When-Then`-keywords.
    Robot Framework figures this out by seeing `Keyword` in the first cell of the
    header row.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的第二个表用于定义我们的自定义`Given-When-Then`关键字。Robot Framework通过在标题行的第一个单元格中看到`Keyword`来解决了这个问题。
- en: The third table we made contains settings. This is identified by seeing `Setting`
    in the first cell of the header row. This table is used to import Python code
    that contains the final keywords using the built-in keyword `Library`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们制作的第三个表包含设置。通过在标题行的第一个单元格中看到`Setting`来识别。这个表用于导入包含最终关键字的Python代码，使用内置关键字`Library`。
- en: 'An important aspect of our custom keywords, in this recipe, is that we wrote
    them in a natural, flowing language:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们自定义关键字的一个重要方面是，我们用自然流畅的语言编写了它们：
- en: '[PRE12]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is broken up into four HTML cells in order to parameterize the inputs
    and make the keywords reusable for several test steps:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 为了参数化输入并使关键字可重用于多个测试步骤，这被分解为四个HTML单元格：
- en: '![](../images/00095.jpeg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00095.jpeg)'
- en: 'Robot Framework sees this as a custom keyword, `When``I``add``a`, with three
    arguments: `carton of milk`, `for`, and `2.50`.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework将其视为一个自定义关键字`When``I``add``a`，有三个参数：`carton of milk`，`for`和`2.50`。
- en: Later on, we fill in the actual steps involved with this keyword. In doing so,
    we are really only concerned with using `carton of milk` and `2.50`, but we still
    have to treat `for` like an input variable. We do this using a place holder variable,
    `${noop}`, which we will simply not use in any following keyword steps.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 稍后，我们将填写与此关键字相关的实际步骤。这样做时，我们只关心使用`carton of milk`和`2.50`，但我们仍然必须将`for`视为输入变量。我们使用一个占位符变量`${noop}`来实现这一点，在任何后续关键字步骤中我们将简单地不使用它。
- en: In this recipe, we call the throwaway variable, `${noop}`. We could have called
    it anything. We can also reuse it if we have more than one throwaway argument
    in the same keyword. This is because Robot Framework doesn't engage in strong
    type checks.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们称这个临时变量为`${noop}`。我们可以随意命名它。如果在同一个关键字中有多个临时参数，我们也可以重复使用它。这是因为Robot
    Framework不进行强类型检查。
- en: There's more...
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This entire chunk of HTML that we had to write starts to feel a bit heavy. As
    mentioned in the *Creating **a **data*-*driven **test **suite **with **Robot Framework*
    recipe, `.rst` is a great alternative. Unfortunately, writing this recipe using
    `.rst` is too wide for the format of this book. Refer to that recipe for more
    details about writing `.rst` and getting the tools to convert `.rst` to HTML.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不得不编写的整个HTML块开始感觉有点沉重。如*使用Robot Framework创建数据驱动测试套件*中所述，`.rst`是一个很好的替代方案。不幸的是，使用`.rst`编写这个示例对于这本书的格式来说太宽了。有关使用`.rst`编写更多详细信息和获取工具将`.rst`转换为HTML，请参阅该示例。
- en: Given-When-Then results in duplicate rules
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Given-When-Then导致重复规则
- en: It's true that we had to define both `Then item` and `Add item`, which are basically
    the same, in order to support two different test scenarios. In other BDD tools,
    these would have been automatically spotted as the same clause. Robot Framework
    doesn't directly provide a BDD domain specific language, so we had to fill this
    in for ourselves.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们不得不定义`Then item`和`Add item`，它们基本上是相同的，以支持两种不同的测试场景。在其他BDD工具中，这些将自动被识别为相同的从句。Robot
    Framework并没有直接提供BDD领域特定的语言，所以我们不得不自己填写这部分。
- en: The most efficient way to handle this was to define `Then item` in detail with
    all the steps needed, and then code `And item` to just call `Then item`.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个问题的最有效方法是详细定义`Then item`所需的所有步骤，然后编写`And item`来调用`Then item`。
- en: In contrast, `When I add a` and `And I add a` were implemented by calling `add
    item`. Since this clause was a simpler pass-through to our Python module, it wasn't
    necessary to chain them together like the previous example.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，“当我添加一个”和“而我添加一个”是通过调用“添加项目”来实现的。由于这个从句只是一个简单的传递到我们的Python模块，所以不需要像前面的例子那样将它们链接在一起。
- en: Another option would be to investigate coding our own BDD plugin library to
    simplify all of this.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是调查编写我们自己的BDD插件库，以简化所有这些。
- en: Do the try-except blocks violate the idea of keeping things light?
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: try-except块是否违反了保持轻量的想法？
- en: In the *Creating **a **data*-*driven **test **suite **with Robot* *Framework*
    recipe, I mentioned that the code that bridges the HTML tables with the `ShoppingCart`
    application should be kept as light as possible and avoid transformations and
    other manipulations.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用Robot Framework创建数据驱动测试套件*的示例中，我提到了将HTML表与`ShoppingCart`应用程序连接的代码应尽可能保持轻量，并避免转换和其他操作。
- en: It is quite possible to view trapping of an expected exception and returning
    a string as crossing this line. In our case, the solution was to define a single
    clause that could handle errors and legitimate values. The clause takes whatever
    is returned and verifies it using the built-in `Should Be Equal` keyword.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获预期异常并返回字符串可能会越过这条线。在我们的情况下，解决方案是定义一个可以处理错误和合法值的单个从句。该从句接受返回的任何内容，并使用内置的`Should
    Be Equal`关键字进行验证。
- en: If this wasn't the case, it may have been smoother to not have the try-expect
    block, and instead use the built-in `Run Keyword And Expect Error` keyword linked
    to another custom Python keyword. However, in this situation, I think the goal
    of keeping things light was satisfied.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果情况不是这样，可能更顺利的做法是不使用try-expect块，而是使用内置的`Run Keyword And Expect Error`关键字链接到另一个自定义的Python关键字。然而，在这种情况下，我认为保持事情简单的目标得到了满足。
- en: See also
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing the Robot Framework*'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装Robot Framework*'
- en: '*Creating a data-driven test suite with Robot Framework*'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Robot Framework创建数据驱动的测试套件*'
- en: Tagging Robot Framework tests and running a subset
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标记Robot Framework测试并运行子集
- en: Robot Framework provides a comprehensive way to capture test scenarios using
    table-driven structures. This includes the ability to add metadata in the form
    of tagging as well as documentation.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework提供了一种全面的方式来使用表驱动结构捕获测试场景。这包括添加标记和文档的元数据的能力。
- en: Tagging allows including or excluding tags for testing. Documentation appears
    on the command line and also in the outcome reports. This recipe will demonstrate
    both of these keen features.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 标记允许包括或排除用于测试的标记。文档出现在命令行上，也出现在结果报告中。本教程将演示这两个关键特性。
- en: Finally, HTML tables aren't the only way to define data tables with Robot Framework.
    In this recipe, we will explore using double-space-separated entries. While this
    isn't the only non-HTML way to write stories, it is the easiest non-HTML way to
    demonstrate that still fits within the font size limits of this book in printed
    form.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，HTML表格并不是使用Robot Framework定义数据表的唯一方式。在本教程中，我们将探讨使用双空格分隔的条目。虽然这不是编写故事的唯一非HTML方式，但它是最容易的非HTML方式，可以在印刷形式的本书的字体大小限制内进行演示。
- en: Getting ready
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We first need to activate our `virtualenv` setup.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要激活我们的`virtualenv`设置。
- en: Create a new file called `cart41.py` to put an alternate version of the shopping
    cart application.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`cart41.py`的新文件，以放置购物车应用程序的备用版本。
- en: 'Type in the following code that stores the cart to a database:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下代码，将购物车存储到数据库中：
- en: '[PRE13]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This version of the shopping cart has two extra methods: `store` and `retrieve`.
    They don''t actually talk to a database, but instead create an empty `cart.db` file. *Why?*
    The purpose is to simulate interaction with a database. Later in the recipe, we
    will show how to tag test cases that involve this operation and easily exclude
    them from test runs.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这个版本的购物车有两个额外的方法：`store`和`retrieve`。它们实际上并不与数据库交互，而是创建一个空的`cart.db`文件。*为什么？*目的是模拟与数据库的交互。在本教程的后面，我们将展示如何标记涉及此操作的测试用例，并轻松地将它们排除在测试运行之外。
- en: Next, we need to install Robot Framework, as shown in the earlier sections of
    this chapter.
  id: totrans-267
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要安装Robot Framework，就像本章前面的部分所示。
- en: How to do it...
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤如下...
- en: 'The following steps will show how to write scenarios in a format other than
    HTML tables and also how to tag tests to allow picking and choosing which tests
    are run on the command line:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将展示如何以HTML表格之外的格式编写场景，以及如何标记测试以允许在命令行上选择运行哪些测试：
- en: 'Create a new file called `recipe41.txt` using plain text and space-separated
    entries that has a couple of test cases: a simple one and another a more complex
    one with documentation and tags:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用纯文本和空格分隔的条目创建一个名为`recipe41.txt`的新文件，其中包含一些测试用例：一个简单的测试用例和另一个更复杂的测试用例，带有文档和标记：
- en: '[PRE14]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'It''s important to note that two spaces at the minimum are required to identify
    breaks between one cell and the next. The line with `When I add a carton of milk
    for 2.50` actually has four cells of information: `| When I add a | carton of
    milk | for | 2.50 |`. There is actually a fifth, empty cell that prefixes this
    row indicated by the two-space indentation. It is necessary to mark this row as
    a step in test case `Simple check of adding one item` rather than another test
    case.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，至少需要两个空格来标识一个单元格和下一个单元格之间的间隔。具有`When I add a carton of milk for 2.50`的行实际上有四个单元格的信息：`|
    When I add a | carton of milk | for | 2.50 |`。实际上，这一行的前缀有一个空的第五个单元格，由两个空格缩进表示。必须将此行标记为测试用例`Simple
    check of adding one item`中的一步，而不是另一个测试用例。
- en: 'Add a table for custom keyword definitions using plain text and space-separated
    values:'
  id: totrans-273
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用纯文本和空格分隔的值创建自定义关键字定义的表：
- en: '[PRE15]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new file called `recipe41.py` that contains Python code that bridges
    some of the keywords with the shopping cart application:'
  id: totrans-275
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe41.py`的新文件，其中包含Python代码，用于将一些关键字与购物车应用程序连接起来：
- en: '[PRE16]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add a last table to `recipe41.txt` that imports our Python code as a library
    to provide the last set of needed keywords:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`recipe41.txt`添加最后一个表，导入我们的Python代码作为库，以提供所需关键字的最后一组：
- en: '[PRE17]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the test scenario as if we are on a machine that has database support by
    typing `pybot recipe41.txt`:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pybot recipe41.txt`来运行测试场景，就好像我们在一个具有数据库支持的机器上一样：
- en: '![](../images/00096.jpeg)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00096.jpeg)'
- en: 'Run the test scenario, excluding tests that were tagged `database`, by typing
    `pybot -exclude database recipe41.txt`:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pybot -exclude database recipe41.txt`来运行测试场景，排除了被标记为`database`的测试。
- en: '![](../images/00097.jpeg)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00097.jpeg)'
- en: 'Run the test scenario, including tests that were tagged `database`, by typing
    `pybot -include database recipe41.txt`:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pybot -include database recipe41.txt`来运行测试场景，包括被标记为`database`的测试：
- en: '![](../images/00098.jpeg)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00098.jpeg)'
- en: 'Look at `report.html`, and observe where the extra `[Documentation]` text appears
    as well as our `database` tag:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`report.html`，观察额外的`[Documentation]`文本出现的位置，以及我们的`database`标记：
- en: '![](../images/00099.jpeg)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00099.jpeg)'
- en: How it works...
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In this recipe, we added an extra section to the second test case, including
    both documentation and a tag:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们为第二个测试用例添加了一个额外的部分，包括文档和标记：
- en: '[PRE18]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Tags are usable on the command line, as shown in the previous example. It provides
    a useful way to organize test cases. Test cases can have as many tags as needed.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 标记可在命令行上使用，就像前面的示例中所示的那样。它提供了一种有用的方式来组织测试用例。测试用例可以有尽可能多的标记。
- en: 'We showed earlier that this provides a convenient command-line option to include
    or exclude based on tags. Tags also provide useful documentation, and the previous
    screenshot of `report.html` shows that test results are also subtotaled by tag:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前展示了这提供了一个方便的命令行选项，可以根据标签包含或排除。标签还提供有用的文档，`report.html`的上一个截图显示了测试结果也按标签进行了小计：
- en: Tags can be used to identify different layers of testing, such as smoke, integration,
    and customer-facing layers
  id: totrans-292
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签可用于标识不同层次的测试，例如冒烟测试、集成测试和面向客户的测试
- en: Tags can also be used to mark subsystems such as databases, invoicing, customer-service,
    and billing
  id: totrans-293
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标签还可以用于标记子系统，如数据库、发票、客户服务和结算
- en: There's more...
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe demonstrates plain text formatting. Triple asterisks are used to
    surround header cells, and two spaces are used to designate a break between two
    cells.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例演示了纯文本格式。三个星号用于包围标题单元格，两个空格用于指定两个单元格之间的间隔。
- en: It is debatable as to whether this is more difficult to read than HTML. It may
    not be as crisp as reading the HTML markup, but I personally preferred this to
    angle tax of reading HTML. It's possible to add more spaces so that the table's
    cells are clearer, but I didn't, because the font sizes of this book don't work
    very well with it.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这是否比HTML更难阅读存在争议。它可能不像阅读HTML标记那样清晰，但我个人更喜欢这种方式而不是阅读HTML的角度。可以添加更多的空格，以使表格的单元格更清晰，但我没有这样做，因为这本书的字体大小与之不太匹配。
- en: What about documentation?
  id: totrans-297
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 文档呢？
- en: We also added a little bit of documentation for demonstration purposes. A piece
    of the text appears when `pybot` runs, and it also appears in the resulting artifacts.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一点演示目的的文档。当`pybot`运行时，一段文本会出现，并且也会出现在生成的工件中。
- en: See also
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing Robot Framework*'
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装Robot Framework*'
- en: '*Creating a data-driven test suite with Robot Framework*'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Robot Framework创建数据驱动的测试套件*'
- en: '*Writing a testable story using Robot Framework*'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Robot Framework编写可测试的故事
- en: Testing web basics with Robot Framework
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Robot Framework测试Web基础知识
- en: Web testing is a common style of acceptance testing, because the customer wants
    to know whether the system is acceptable, and this is a perfect way to demonstrate
    it.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Web测试是一种常见的验收测试风格，因为客户想知道系统是否可接受，这是展示它的完美方式。
- en: In the previous recipes, we have explored writing tests against non-web applications.
    In this recipe, let's see how to use a third-party Robot Framework plugin to use
    Selenium to test a shopping cart web application.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的示例中，我们已经探索了针对非Web应用程序编写测试的方法。在这个示例中，让我们看看如何使用第三方Robot Framework插件来使用Selenium测试购物车Web应用程序。
- en: Getting ready...
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备好了...
- en: We first need to activate our `virtualenv` setup.
  id: totrans-307
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要激活我们的`virtualenv`设置。
- en: For this recipe, we are using the Satchmo shopping cart web application. To
    start it, switch to the store directory and type python manage.py runserver. You
    can explore it by visiting http://localhost:8000.
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个示例，我们使用的是Satchmo购物车Web应用程序。要启动它，请切换到store目录并输入python manage.py runserver。您可以通过访问http://localhost:8000来探索它。
- en: Next, install Robot Framework and the third-party Selenium plugin, as shown
    in the *Installing **Robot **Framework* recipe.
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照*安装**Robot**Framework*示例中所示，安装Robot Framework和第三方Selenium插件。
- en: How to do it...
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With the following steps, we will see how to get going with using some of the
    basic Robot commands for driving a web application:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下步骤，我们将看到如何使用一些基本的Robot命令来驱动Web应用程序：
- en: 'Create a plain text story file called `recipe42.txt`, with an opening description
    of the story:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe42.txt`的纯文本故事文件，其中包含故事的开头描述：
- en: '[PRE19]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Create a section for test cases, and add a scenario that verifies that there
    is an empty shopping cart and captures a screenshot:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个测试用例部分，并添加一个验证购物车为空并捕获屏幕截图的场景：
- en: '[PRE20]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add another scenario that picks a book, adds two copies of the cart, and confirms
    the total cart value:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个场景，选择一本书，将两本书添加到购物车中，并确认总购物车价值：
- en: '[PRE21]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a section of keywords and define a keyword for inspecting the raw HTML
    of the page:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个关键字部分，并定义一个用于检查页面原始HTML的关键字：
- en: '[PRE22]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`Get Source` is a Selenium Library keyword that fetches the raw HTML of the
    entire page. `Start Selenium Server` is another keyword to launch the Selenium
    server. A built-in `Sleep` call is included to avoid startup/shutdown timing issues,
    if this test happens before or after another one Selenium-based test suite.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`Get Source`是一个Selenium库关键字，用于获取整个页面的原始HTML。`Start Selenium Server`是另一个用于启动Selenium服务器的关键字。还包括内置的`Sleep`调用，以避免启动/关闭时序问题，如果这个测试在另一个基于Selenium的测试套件之前或之后发生。'
- en: 'Add a section that imports the Selenium library and also defines a setup and
    teardown process for launching and shutting down the browser for each test case:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个导入Selenium库的部分，并为每个测试用例启动和关闭浏览器定义一个设置和拆卸过程：
- en: '[PRE23]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '`Test Setup` is a built-in keyword that defines steps executed before each
    test case. In this case, it uses the Selenium library keyword `Open Browser` to
    launch a browser pointed at the Satchmo application. Test Teardown is a built-in
    keyword that executes at the end of each test and closes the browsers launched
    by this test. Suite Setup is a built-in keyword that is only run before any tests
    are executed, and Suite Teardown is only run after all the tests in this suite.
    In this case, we use it to start and stop the Selenium library.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`Test Setup`是一个内置关键字，用于定义在每个测试用例之前执行的步骤。在这种情况下，它使用Selenium库关键字`Open Browser`来启动指向Satchmo应用程序的浏览器。`Test
    Teardown`是一个内置关键字，它在每个测试结束时执行，并关闭此测试启动的浏览器。`Suite Setup`是一个内置关键字，仅在执行任何测试之前运行，`Suite
    Teardown`仅在此套件中的所有测试之后运行。在这种情况下，我们用它来启动和停止Selenium库。'
- en: 'Run the test suite by typing `pybot recipe42.txt`:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pybot recipe42.txt`来运行测试套件：
- en: '![](../images/00100.jpeg)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00100.jpeg)'
- en: 'Open `log.html` and observe the details, including the captured screenshots
    in each scenario. The following screenshot is just one of the many captured screenshots.
    Feel free to inspect the rest of the screenshots as well as the logs:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`log.html`并观察细节，包括每个场景中捕获的屏幕截图。以下截图只是众多捕获的截图之一。随时可以检查其余的截图以及日志：
- en: '![](../images/00101.jpeg)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00101.jpeg)'
- en: How it works...
  id: totrans-328
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Robot Framework provides a powerful environment to define tests through keywords.
    The Selenium plugin interfaces with Selenium and provides a whole set of keywords
    that are focused on manipulating web applications and reading and confirming their
    outputs.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework提供了一个强大的环境来通过关键字定义测试。Selenium插件与Selenium进行接口，并提供一整套关键字，专注于操作Web应用程序并读取和确认它们的输出。
- en: An important part of web application testing is getting a hold of an element
    to manipulate it or test values. The most common way of doing this is by checking
    key attributes of the element, such as `id`, `name`, or `href`. For example, in
    our scenario, there is a button we need to click on to add the book to the cart.
    It can be identified by either the ID, `addcart`, or the displayed text, `Add
    to cart`.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序测试的一个重要部分是获得一个元素来操作它或测试值。这样做的最常见方式是通过检查元素的关键属性，例如`id`、`name`或`href`。例如，在我们的场景中，有一个按钮，我们需要点击它以将书添加到购物车中。它可以通过ID`addcart`或显示的文本`Add
    to cart`来识别。
- en: There's more...
  id: totrans-331
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: While Robot Framework is free compared to other commercial frontend test solutions,
    it is important to realize that the effort in writing automated tests isn't free
    and effortless. It takes effort to make this an active part of frontend design.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Robot Framework与其他商业前端测试解决方案相比是免费的，但重要的是要意识到编写自动化测试所需的工作量并不是免费且毫不费力的。要使其成为前端设计的一个积极部分需要付出努力。
- en: Incorporating tools like Robot and Selenium library early in the process of
    screen design will encourage good practices like tagging frames and elements so
    that they'll be testable early on. This is no different from attempting to write
    automated tests for a backend server system after it's already built. Both situations
    are much more costly, if they are introduced later. Making automated testing a
    part of backend systems early on encourages similar coding to support testability.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕设计的过程中早期引入Robot和Selenium库等工具将鼓励良好的实践，例如标记框架和元素，以便尽早进行测试。这与在构建后端服务器系统后尝试编写自动化测试没有什么不同。如果它们后来被引入，这两种情况都会更加昂贵。在后端系统的早期引入自动化测试鼓励类似的编码以支持可测试性。
- en: If we are looking at embracing acceptance testing late in our development cycle,
    or perhaps trying to test a system we inherited from another team, we need to
    include time to make changes to the web interface in order to add tags and identifiers
    to support writing the tests.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们试图在开发周期的后期接受验收测试，或者尝试测试我们从另一个团队继承的系统，我们需要包括时间来对Web界面进行更改，以添加标签和标识符以支持编写测试。
- en: Learn about timing configurations – they may be important!
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解定时配置-它们可能很重要！
- en: While the Satchmo shopping cart application didn't have any significant delays
    in the tests we wrote, it doesn't mean other applications won't. If your web application
    has certain parts that are noticeably slower, it is valuable to read the online
    documentation about configuring how long Selenium should wait for a response from
    your application.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Satchmo购物车应用程序在我们编写的测试中没有任何显着的延迟，但这并不意味着其他应用程序不会有。如果您的Web应用程序的某些部分明显较慢，那么阅读有关配置Selenium等待应用程序响应多长时间的在线文档是很有价值的。
- en: See also
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing Robot Framework*'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装Robot Framework*'
- en: '*Creating a data-driven test suite with Robot Framework*'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Robot Framework创建数据驱动的测试套件*'
- en: '*Writing a testable story using Robot Framework*'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Robot Framework编写可测试的故事*'
- en: Using Robot Framework to verify web app security
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Robot Framework来验证Web应用程序安全性
- en: Web applications often have some sort of security in place. This is often in
    the form of a login page. A well written test case should start a new browser
    session at the beginning and close it at the end. This results in the user logging
    in repeatedly for every test case.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序通常具有某种安全性。这通常以登录页面的形式存在。一个写得很好的测试用例应该在开始时启动一个新的浏览器会话，并在结束时关闭它。这导致用户在每个测试用例中重复登录。
- en: In this recipe, we will explore writing code to log in to Satchmo's admin page,
    as provided by Django. Then, we will show how to capture this entire login procedure
    into a single keyword, allowing us to smoothly write a test that visits the product
    catalog without getting encumbered by logging in.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将探讨编写代码以登录到Django提供的Satchmo的管理页面。然后，我们将展示如何将整个登录过程捕获到一个单一关键字中，从而使我们能够顺利地编写一个访问产品目录的测试，而不会被登录所拖累。
- en: Getting ready
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We first need to activate our `virtualenv` setup.
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要激活我们的`virtualenv`设置。
- en: For this recipe, we are using the Satchmo shopping cart web application. To
    start it, switch to the store directory and type `python manage.py runserver`.
    You can explore it by visiting `http://localhost:8000`.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个食谱，我们使用Satchmo购物车Web应用程序。要启动它，请切换到store目录并输入`python manage.py runserver`。您可以通过访问`http://localhost:8000`来探索它。
- en: Next, install Robot Framework and the third-party Selenium plugin, as shown
    in the *Installing **Robot **Framework* recipe.
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照*安装Robot Framework*食谱中所示，安装Robot Framework和第三方Selenium插件。
- en: How to do it...
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The following steps will highlight how to capture login steps and then encapsulate
    them in a single custom keyword:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤将突出显示如何捕获登录步骤，然后将其封装在一个自定义关键字中：
- en: 'Create a new file called `recipe43.txt`, and write a test story for exercising
    Django''s admin interface:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe43.txt`的新文件，并为练习Django的管理界面编写一个测试故事：
- en: '[PRE24]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add a section for test cases, and write a test case that exercises the login
    page:'
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为测试用例添加一个部分，并编写一个测试用例，测试登录页面：
- en: '[PRE25]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add another test case that inspects the product catalog and verifies a particular
    row of the table:'
  id: totrans-354
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加另一个测试用例，检查产品目录并验证表中的特定行：
- en: '[PRE26]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Create a keyword section that captures the login procedure as a single keyword:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个捕获登录过程的关键字部分，作为一个单一的关键字：
- en: '[PRE27]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: For your own testing, put in the username and password you used when installing
    Satchmo. The `Start Selenium Server` keyword is another keyword to launch the
    Selenium server. A built-in Sleep call is included to avoid startup/shutdown timing
    issues if this test happens before or after another one Selenium-based test suite.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您自己的测试，请输入您在安装Satchmo时使用的用户名和密码。`Start Selenium Server`关键字是另一个启动Selenium服务器的关键字。内置的Sleep调用用于避免启动/关闭时间问题，如果这个测试在另一个基于Selenium的测试套件之前或之后发生。
- en: 'Finally, add a settings section that imports Selenium library and also starts
    and stops the Selenium server at the beginning and end of the test suite:'
  id: totrans-359
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加一个设置部分，导入Selenium库，并在测试套件的开头和结尾启动和停止Selenium服务器：
- en: '[PRE28]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the test suite by typing `pybot recipe43.txt`:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`pybot recipe43.txt`来运行测试套件：
- en: '![](../images/00102.jpeg)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00102.jpeg)'
- en: How it works...
  id: totrans-363
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first test case shows how we input username and password data and then submit
    the form. SeleniumLibrary allows us to pick a form by name, but in the event we
    don't identify it, it picks the first HTML form it finds. Since there is only
    one form on the login page, this works fine for us.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个测试案例展示了我们如何输入用户名和密码数据，然后提交表单。SeleniumLibrary允许我们按名称选择表单，但如果我们没有识别它，它会选择它找到的第一个HTML表单。由于登录页面上只有一个表单，这对我们来说很好用。
- en: With the second test case, we want to navigate to the product catalog. Since
    it runs with a clean browser session, we are forced to deal with the login screen
    again. This means we need to include the same steps to log in again. For more
    comprehensive testing, we would probably write lots of test cases. *Why* *should*
    *we* *avoid* *copying* *and* pasting *the* *same* *login* *steps* *for* *every*
    *test* *case?* That's because it violates the **Don't Repeat Yourself** (**DRY**)
    principle. If the login page is modified, we might have to alter every instance.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第二个测试案例，我们想要导航到产品目录。由于它在一个干净的浏览器会话中运行，我们被迫再次处理登录界面。这意味着我们需要包括相同的步骤再次登录。为了进行更全面的测试，我们可能会编写很多测试案例。*为什么*
    *我们* *应该* *避免* *为* *每个* *测试* *案例* *复制* *和* *粘贴* *相同的* *登录* *步骤*？因为这违反了**不要重复自己**（**DRY**）原则。如果登录页面被修改，我们可能需要修改每个实例。
- en: Instead, we captured the login steps with `Given that I am logged in` keyword.
    This gives us a useful clause for many test cases, and lets us focus on the admin
    page.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，我们使用`Given that I am logged in`关键字捕获了登录步骤。这为我们提供了许多测试案例的有用子句，并让我们专注于管理页面。
- en: There's more...
  id: totrans-367
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we used some of Selenium library's table testing operations.
    We verified that a particular book exists both at the table level as well as the
    row level. We also verified the price of the book in that row.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们使用了一些Selenium库的表测试操作。我们验证了特定书籍在表级和行级都存在。我们还验证了该行中书籍的价格。
- en: Finally, we captured a screenshot of the product catalog. This screenshot gives
    us a quick, visual glance we can use to either manually confirm the product catalog,
    or use to plan our next test step.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们捕获了产品目录的屏幕截图。这个屏幕截图给了我们一个快速的、视觉的一瞥，我们可以用它来手动确认产品目录，或者用它来规划我们的下一个测试步骤。
- en: Why not use a "remember me" option?
  id: totrans-370
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么不使用“记住我”选项？
- en: Lots of websites include a "remember me" checkbox in order to save login credentials
    in a client-side cookie. The Django admin page doesn't have one, so why is this
    relevant*?* It's because many websites do, and we may be tempted to incorporate
    it into our tests to avoid logging in every time. Even if this option existed
    for the web app we want to test, it is not a good idea to use it. It creates a
    persistent state that can propagate from one test to the next. Different user
    accounts may have different roles, impacting what is visible. We may not know
    in what order test cases run and therefore have to add extra code to sniff what
    user we are logged in as.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 许多网站都包括一个“记住我”复选框，以便在客户端cookie中保存登录凭据。Django管理页面没有这个选项，那么这与我们有关吗？这是因为许多网站都有这个选项，我们可能会想要将其纳入我们的测试中，以避免每次都登录。即使我们要测试的Web应用程序有这个选项，使用它也不是一个好主意。它会创建一个持久状态，可以从一个测试传播到下一个测试。不同的用户账户可能有不同的角色，影响可见内容。我们可能不知道测试案例的运行顺序，因此必须添加额外的代码来嗅探我们登录的用户是谁。
- en: Instead, it is much easier and cleaner to *not* persist this information. Instead,
    explicitly logging in through a single keyword provides a clearer intent. This
    doesn't mean we shouldn't test and confirm the remember checkbox of our particular
    web application. On the contrary, we should actually test both good and bad accounts
    to ensure that the login screen works as expected. However, beyond that, it is
    best to not confuse future test cases with persisted results of the current test
    case.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，更容易和更清晰的方法是*不*持久化这些信息。相反，通过单个关键字明确登录提供了更清晰的意图。这并不意味着我们不应该测试和确认特定网页应用的记住复选框。相反，我们实际上应该测试好账户和坏账户，以确保登录界面按预期工作。然而，除此之外，最好不要用当前测试案例的持久化结果混淆未来的测试案例。
- en: Shouldn't we refactor the first test scenario to use the keyword?
  id: totrans-373
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们不应该重构第一个测试场景来使用这个关键字吗？
- en: To uphold the DRY principle, we should have the login procedure in only one
    place inside our test story. However, for demonstration purposes, we coded it
    at the top, and then later copied the same code into a keyword. The best solution
    would be to encapsulate it into a single keyword that can be reused in either
    a test case or to define other custom keywords like `Given I am logged in`.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵守DRY原则，我们应该在测试故事中的一个地方进行登录过程。然而，出于演示目的，我们将其编码在顶部，然后将相同的代码复制到一个关键字中。最好的解决方案是将其封装成一个单一的关键字，可以在测试案例中重复使用，也可以用来定义其他自定义关键字，比如`Given
    I am logged in`。
- en: Would arguments make the login keyword more flexible?
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录关键字更灵活吗？
- en: Absolutely—in this test story, we hardcoded the username as well as the password.
    However, good testing of the login page would involve a data-driven table with
    lots of combinations of good and bad accounts along with valid and invalid passwords.
    This drives the need for some sort of login keyword that would accept username
    and password as arguments.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对地——在这个测试故事中，我们硬编码了用户名和密码。然而，对登录页面进行良好的测试将涉及到一个数据驱动的表格，其中包含大量的良好和不良账户的组合，以及有效和无效的密码。这就需要一种接受用户名和密码作为参数的登录关键字。
- en: See also
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: '*Installing Robot Framework*'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*安装Robot Framework*'
- en: '*Using Pyccuracy to verify web app security*'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Pyccuracy验证Web应用程序安全性*'
- en: '*Creating a data-driven test suite with Robot Framework*'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Robot Framework创建一个数据驱动的测试套件*'
- en: Creating a project-level script to verify this chapter's acceptance tests
  id: totrans-381
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个项目级别的脚本来验证本章的验收测试
- en: We have used `pyccuracy_console` and `pybot` to run various test recipes. However,
    management of a Python project involves more than just running tests. Things like
    packaging, registering with the Python Project Index, and pushing to deployment
    sites are important procedures to manage.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用了`pyccuracy_console`和`pybot`来运行各种测试配方。然而，管理一个Python项目涉及的不仅仅是运行测试。像打包、在Python项目索引中注册以及推送到部署站点等事情都是重要的管理程序。
- en: Building a command-line script to encapsulate all this is very convenient. With
    this recipe, we will run a script that runs all the tests covered in this chapter.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 构建一个命令行脚本来封装所有这些非常方便。通过这个配方，我们将运行一个运行本章中所有测试的脚本。
- en: Getting ready
  id: totrans-384
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: We first need to activate our `virtualenv` setup.
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先需要激活我们的`virtualenv`设置。
- en: For this recipe, we are using the Satchmo shopping cart web application. To
    start it, switch to the store directory and type `python manage.py runserver`.
    You can explore it by visiting `http://localhost:8000`.
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于这个配方，我们使用了Satchmo购物车Web应用程序。要启动它，切换到store目录，然后输入`python manage.py runserver`。您可以通过访问`http://localhost:8000`来探索它。
- en: Next, install Robot Framework and the third-party Selenium plugin, as shown
    in the *Installing **Robot **Framework* recipe.
  id: totrans-387
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，按照*安装**Robot**Framework*配方中所示，安装Robot Framework和第三方Selenium插件。
- en: This recipe assumes that all the various recipes from this chapter have been
    coded.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个配方假设本章中的各种配方都已经编码完成。
- en: How to do it...
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'With these steps, we will see how to programmatically run all the tests in
    this chapter:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些步骤，我们将看到如何以编程方式运行本章中的所有测试：
- en: Create a new file called `recipe44.py` to contain the code for this recipe.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`recipe44.py`的新文件，以包含这个配方的代码。
- en: 'Create a command-line script that defines several options:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个命令行脚本，定义几个选项：
- en: '[PRE29]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add a method that starts Selenium, runs the Pyccuracy-based tests, and then
    shuts down Selenium:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来启动Selenium，运行基于Pyccuracy的测试，然后关闭Selenium：
- en: '[PRE30]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a method that runs the Robot Framework tests:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个运行Robot Framework测试的方法：
- en: '[PRE31]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add a method to run both of these test methods:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法来运行这两个测试方法：
- en: '[PRE32]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add some stubbed out methods for the other project functions:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为其他项目函数添加一些存根方法：
- en: '[PRE33]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Add some code that parses the options:'
  id: totrans-402
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一些解析选项的代码：
- en: '[PRE34]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the script with the testing flag by typing `python``recipe44 -test`. In
    the following screenshot, we can see that all the Pyccuracy tests passed:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入`python``recipe44 -test`来运行带有测试标志的脚本。在下面的截图中，我们可以看到所有的Pyccuracy测试都通过了：
- en: '![](../images/00103.jpeg)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00103.jpeg)'
- en: 'In the next screenshot, we can see that the Robot Framework tests passed as
    well:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个截图中，我们可以看到Robot Framework测试也通过了：
- en: '![](../images/00104.jpeg)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![](../images/00104.jpeg)'
- en: How it works...
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We use Python''s `getopt` module to define command-line options:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Python的`getopt`模块来定义命令行选项：
- en: '[PRE35]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This maps the following:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这将映射以下内容：
- en: '`"h"`: `-h`'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"h"`: `-h`'
- en: '`"help"`: `--help`'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"help"`: `--help`'
- en: '`"test"`: `--test`'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"test"`: `--test`'
- en: '`"package"`: `--package`'
  id: totrans-415
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"package"`: `--package`'
- en: '`"publish"`: `--publish`'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"publish"`: `--publish`'
- en: '`"register"`: `--register`'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`"register"`: `--register`'
- en: 'We scan the list of received arguments and call the appropriate functions.
    For our test functions, we used Python''s `subprocess` module to call `pyccuracy_console`.
    We could have done the same to call `pybot`, but Robot Framework provides a convenient
    API to call it directly:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 我们扫描接收到的参数列表，并调用相应的函数。对于我们的测试函数，我们使用Python的`subprocess`模块来调用`pyccuracy_console`。我们也可以用同样的方法调用`pybot`，但是Robot
    Framework提供了一个方便的API来直接调用它：
- en: '[PRE36]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This lets us use it inside our code.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 这让我们可以在我们的代码中使用它。
- en: There's more
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多
- en: To run these tests, we need Selenium running. Our Robot Framework tests are
    built to run Selenium on their own. Pyccuracy doesn't have such a feature, so
    it needed another means. In those recipes, we used `java -jar selenium-server.jar`.
    We could try to manage this, but it is easier to use Selenium library's API to
    start and stop Selenium.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行这些测试，我们需要运行Selenium。我们的Robot Framework测试是构建在自己运行Selenium的基础上的。Pyccuracy没有这样的功能，所以它需要另一种方法。在那些配方中，我们使用了`java
    -jar selenium-server.jar`。我们可以尝试管理这个，但使用Selenium库的API来启动和停止Selenium更容易。
- en: This is where writing code in pure Python gives us the most options. We are
    able to empower Pyccuracy with parts of another library that was never intended
    to work with it.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是在纯Python中编写代码给我们最多选择的地方。我们能够使用另一个本来不打算与之一起工作的库的部分来增强Pyccuracy的功能。
- en: Can we only use getopt?
  id: totrans-424
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们只能使用getopt吗？
- en: Python 2.7 introduces `argparse` as an alternative. Current documentation has
    no indication that `getopt` is deprecated, so it's safe to use it as we have just
    done. The `getopt` module is a nice, easy-to-use command-line parser.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.7引入了`argparse`作为一种替代方法。当前的文档没有表明`getopt`已经被弃用，所以我们可以像刚才做的那样安全地使用它。`getopt`模块是一个很好的、易于使用的命令行解析器。
- en: What's wrong with using the various command-line tools?
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用各种命令行工具有什么问题？
- en: There is nothing wrong with using tools like `pyccuracy_console`, `pybot`, `nosetests`,
    and many other tools that come with the Python libraries. The purpose of this
    recipe is to offer a convenient, alternative approach that brings all these tools
    into one central script. By investing a little bit of time in this script, we
    don't have to remember how to use all these features; instead, we can develop
    our script to support the development workflow of our project.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 使用诸如`pyccuracy_console`、`pybot`、`nosetests`等工具并没有错，这些工具都是Python库中自带的。这个教程的目的是提供一种方便的替代方法，将所有这些工具整合到一个中心脚本中。通过在这个脚本上投入一点时间，我们就不必记住如何使用所有这些功能；相反，我们可以开发我们的脚本来支持项目的开发工作流程。
