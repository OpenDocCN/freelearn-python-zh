- en: RESTful API Design Tips
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RESTful API设计技巧
- en: Enterprise-scale applications across industry verticals are being increasingly
    built as a collection of polyglot microservices. Due to the surging popularity
    of the **microservices architecture** (**MSA**) as the most optimized and organized
    application architecture, most business-critical applications are being meticulously
    designed, developed, and deployed as a set of independent, yet interactive, microservices.
    Another noteworthy trend is the tremendous success of REST APIs for services and
    applications. All kinds of applications (operational, transactional, and analytical)
    are being fitted with REST APIs in order to simplify application integration.
    Further down the line, web, cloud, mobile, and IoT applications are being stuffed
    with REST APIs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 行业垂直领域的企业级应用正越来越多地被构建为一个多语言微服务的集合。由于**微服务架构**（**MSA**）作为最优化和最有序的应用架构而日益流行，大多数业务关键型应用正被精心设计、开发和部署为一系列独立但交互的微服务。另一个值得注意的趋势是REST
    API在服务和应用中的巨大成功。各种应用（操作、交易和分析）都被配备了REST API，以便简化应用集成。进一步来说，Web、云、移动和物联网应用都充满了REST
    API。
- en: Modern application platforms for design, development, debugging, delivery, deployment,
    and decommissioning purposes are also attached to REST APIs. Integration, orchestration,
    governance, brokerage, compliance, and management platforms are being exposed
    to the outside world through REST APIs. Because of its simplicity and lightweight
    nature, the REST paradigm has captured both minds and market share in large quantities.
    Precisely speaking, every worthwhile microservice, application, and platform is
    being frontended with a REST interface. Without a shred of doubt, RESTful APIs
    have become penetrative, pervasive, and persuasive. That is, RESTful APIs play
    a vital role in building and integrating applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 用于设计、开发、调试、交付、部署和退役的现代应用平台也附加到REST API上。集成、编排、治理、经纪、合规和管理平台正通过REST API向外界公开。由于其简单和轻量级特性，REST范式大量地吸引了人们的注意力和市场份额。精确地说，每个有价值的微服务、应用和平台都通过REST接口进行前端处理。毫无疑问，RESTful
    API已经变得深入、普遍和有说服力。也就是说，RESTful API在构建和集成应用中发挥着至关重要的作用。
- en: This chapter is dedicated to discussing the design patterns and best practices
    to build competent and compatible REST APIs that can easily cope with technological
    and business changes.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章致力于讨论设计模式和最佳实践，以构建能够轻松应对技术和业务变化的强大且兼容的REST API。
- en: 'This chapter will deal with the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涉及以下主题：
- en: Articulating the importance of APIs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 阐述API的重要性
- en: Accentuating API design patterns and best practices
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 突出API设计模式和最佳实践
- en: Enumerating API security guidelines
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列举API安全指南
- en: Explaining the various tools and platforms associated with API design, development,
    integration, security, and management
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释与API设计、开发、集成、安全和管理工作相关的各种工具和平台
- en: Tending toward the API-driven digital world
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 趋向API驱动的数字世界
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter details the various best practices for designing efficient RESTful
    APIs. Readers are expected to have some knowledge of, and basic programming experience
    in, the REST architectural style in order to fully grasp and implement the best
    practices discussed in this chapter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章详细介绍了设计高效RESTful API的各种最佳实践。读者应具备对REST架构风格的一些了解，以及基本的编程经验，以便充分理解和实施本章讨论的最佳实践。
- en: Beginning with APIs
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从API开始
- en: The concept of the **application pr****ogramm****ing interface** (**API**) is
    gaining dominance due to its significant contribution toward exposing any application
    or service to the outside world to find and use its unique business and technical
    competencies. To enable application, service, and data integration, APIs are being
    widely recognized as the way forward. Data gets exchanged between different applications
    and services. There are mandates for bringing forth highly integrated systems.
    This means that a variety of third-party applications and backend systems have
    to be systematically integrated. The middleware solutions, in the form of enterprise
    application hubs, enterprise service buses, message brokers and queues, API gateways
    and management suites, and service meshes, are seeing significant utilization
    toward local as well as remote application integration. All these integration
    engines are being fitted with well-intended and -designed APIs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**应用程序编程接口**（API）的概念正因其对将任何应用程序或服务暴露给外界以寻找和使用其独特的商业和技术能力所做出的重大贡献而日益占据主导地位。为了实现应用程序、服务和数据的集成，APIs正被广泛认可为前进的道路。不同应用程序和服务之间进行数据交换。有要求推出高度集成的系统。这意味着必须系统地集成各种第三方应用程序和后端系统。以企业应用中心、企业服务总线、消息代理和队列、API网关和管理套件以及服务网格形式出现的中间件解决方案，正在显著地用于本地和远程应用程序集成。所有这些集成引擎都配备了精心设计和意图良好的APIs。'
- en: As we all know, the device ecosystem grows rapidly with the availability of
    scores of slim and sleek, handy and trendy, and purpose-agnostic, as well as specific,
    devices in large quantities; that is, connected devices are increasingly participating
    in mainstream computing. Here, too, the contributions of APIs for enabling devices,
    data sources, and services toward data and logic exchange are growing steadily.
    APIs hide the heterogeneity and multiplicity of devices to the outside world.
    That is, every device is expressed and exposed as a service, and every service
    is getting partitioned into an interface and implementation. This segregation
    goes a long way in maintaining up devices for longer periods of time. When it
    comes to dynamically equipping devices with additional capabilities, APIs are
    indispensable.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，随着大量轻薄、时尚、便携、用途无关以及特定设备的出现，设备生态系统正迅速增长；也就是说，连接设备越来越多地参与主流计算。在这里，API在使设备、数据源和服务实现数据与逻辑交换方面的贡献也在稳步增长。API隐藏了设备的外部异构性和多样性。也就是说，每个设备都表达和暴露为一个服务，每个服务都被分割为一个接口和实现。这种隔离在很大程度上有助于设备长时间运行。当涉及到动态地为设备配备额外功能时，API是不可或缺的。
- en: In short, an API is a kind of a messenger that receives and processes requests
    and ensures it runs enterprise systems successfully. Social networking sites,
    such as Facebook and Twitter, are a few of the companies that use open or public
    APIs for the benefit of their business. A start-up can open its APIs in order
    to enable third-party software to use its software. For an integrated world, setting
    up, composing, securing, controlling, and enhancing APIs becomes paramount for
    global enterprises in showcasing their distinct capabilities to their customers,
    partners, and employees. With digital technologies taking center stage in the
    IT world, the elegance of APIs is assuming top spot.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，API是一种信使，它接收并处理请求，并确保企业系统成功运行。社交网站，如Facebook和Twitter，是少数使用开放或公共API以利于其业务的公司之一。一个初创公司可以开放其API，以便第三方软件可以使用其软件。对于集成世界，对于全球企业来说，建立、组合、保护、控制和增强API对于向客户、合作伙伴和员工展示其独特能力变得至关重要。随着数字技术在IT世界的中心地位，API的优雅性正占据首位。
- en: Learning about application programming interfaces
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解应用程序编程接口
- en: According to accomplished experts, an API is a set of rules and tools for initiating
    and governing how business workloads interact. Now, with the faster proliferation
    of the cloud, the interaction level has gone up and beyond business applications.
    That is, scores of IT optimization and automation services also have to interact
    with one another in order to simplify and streamline business-process automation.
    APIs have to uniquely and uniformly find one another, initiate data interchange,
    and verify information for software applications to leverage one another for their
    business benefits. Let's use a few comparisons to explain APIs and their roles
    and responsibilities in our increasingly connected world.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 根据成就卓著的专家们，API是一套规则和工具，用于启动和监管业务工作负载之间的交互。现在，随着云的快速普及，交互水平已经超越了商业应用。也就是说，大量的IT优化和自动化服务也需要相互交互，以便简化并精简业务流程自动化。API必须独特且统一地找到彼此，启动数据交换，并验证信息，以便软件应用程序能够利用彼此的业务优势。让我们用几个比较来解释API及其在我们日益互联的世界中的角色和职责。
- en: If applications were vehicles on the road, APIs would be the traffic rules.
    The rules prescribe how vehicles must behave on the road.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序是道路上的车辆，那么API就是交通规则。规则规定了车辆在道路上必须如何行为。
- en: If applications were food items, APIs would be recipes. APIs specify and govern
    how various ingredients fuse together to create tasty and trendy meals.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序是食品，那么API就是食谱。API指定并管理各种成分如何融合在一起以创造出美味时尚的菜肴。
- en: If applications were houses, APIs would be the blueprint, which articulate how
    different construction artifacts blend to form a house.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用程序是房屋，那么API就是蓝图，它阐述了不同的建筑构件如何融合在一起形成一个房屋。
- en: Why have APIs become a mainstream concept?
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么API成为了一个主流概念？
- en: Having understood the crucial roles of APIs in our increasingly software-defined
    and -designed world, faster API production becomes a crucial task for API developers.
    That is, forming appropriate rules for the intended success of the APIs is vital.
    API designers create and publish APIs, which allow other applications to find
    and interact with them.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们日益软件定义和设计的世界中，API（应用程序编程接口）扮演着至关重要的角色，因此加快API的生产成为API开发者的一项关键任务。也就是说，为API的成功制定适当的规则至关重要。API设计者创建并发布API，使其他应用程序能够找到并与之交互。
- en: Suppose you are exposing one or more customer-facing web and mobile applications
    that run on cloud environments. These applications are diligently being fitted
    with one or more APIs. Now, having API-attached applications enables other developers
    to build their own applications that can easily be integrated with the web and
    mobile applications. This integration makes applications bigger and better. Implementing
    business processes becomes easier, faster, risk-free, and rewarding. The customer
    experience with the omni-channel aggregation capability goes up significantly.
    There's no need for a web-scale company to devise and design APIs. Even for an
    idea, an application gets built and decorated with a simple API. Application developers
    are becoming accustomed to creating and sustaining APIs in order to expose their
    applications to a larger audience.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在公开一个或多个面向客户的Web和移动应用程序，这些应用程序运行在云环境中。这些应用程序正被勤奋地配备一个或多个API。现在，拥有API附加的应用程序使得其他开发者能够构建自己的应用程序，这些应用程序可以轻松地与Web和移动应用程序集成。这种集成使得应用程序更加庞大和优秀。实施业务流程变得更加容易、快速、无风险且富有成效。客户体验由于全渠道聚合能力的提升而显著提高。无需一个规模庞大的网络公司来设计和开发API。即使是对于一个想法，一个应用程序也可以通过一个简单的API来构建和装饰。应用程序开发者正逐渐习惯于创建和维护API，以便将他们的应用程序展示给更广泛的受众。
- en: As we've emphasized several times, application integration becomes simpler with
    APIs. There were other options for enterprise integration, but they were insufficient
    in many ways. APIs have emerged as the standard for process integration. When
    an API designer releases an officially accepted and clearly defined set of rules,
    others can confidently embark on API-inspired application and platform integration.
    Thus, APIs provide fresh possibilities and opportunities. APIs grant developers
    the requisite power to control not only what others can do with their applications,
    but also prescribe what others can't do with their applications.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们多次强调的，API使应用集成变得更加简单。企业集成有其他选择，但在许多方面都显得不足。API已成为流程集成的标准。当API设计者发布一套官方接受且明确定义的规则时，其他人可以自信地开始进行API启发的应用程序和平台集成。因此，API提供了新的可能性和机会。API赋予开发者控制他人如何使用他们的应用程序的必要权力，同时也规定了他人不能如何使用他们的应用程序。
- en: APIs have become indispensable
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API已成为不可或缺的
- en: Path-breaking technologies are emerging and evolving fast toward digital innovation,
    disruption, and transformation. A variety of breakthroughs are being unearthed
    and popularized in order to bring in a variety of acceleration, automation, and
    augmentation in IT and business spaces. We are being bombarded with a number of
    application architectures, ranging from **service-oriented architecture** (**SOA**),
    **event-driven architecture** (**EDA**), and **resource-oriented architecture**
    (**ROA**) to MSA. Containers have become the default runtime for services. Cloud
    servers are being expressed and exposed as a collection of containers. With the
    surging popularity of container-orchestration platforms, creating container clusters
    and using them to run software applications and services has become the most prominent
    way to develop, deploy, and manage software. The cool convergence, as explained
    elsewhere in this book, between containers and microservices has propelled the
    next generation of application delivery. Each microservice is being fitted with
    one or more APIs. Further on, each microservice has its own data store. For data
    security and effective data management, each database is also being given an API
    to perform data operations with confidence and clarity.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 开创性的技术正在迅速出现并演变，朝着数字化创新、颠覆和转型发展。各种突破正在被发现并普及，以在IT和商业领域带来各种加速、自动化和增强。我们正被各种应用架构所淹没，从**面向服务的架构**（**SOA**）、**事件驱动架构**（**EDA**）和**面向资源的架构**（**ROA**）到MSA。容器已成为服务的默认运行时。云服务器正被表示和暴露为一组容器。随着容器编排平台的日益流行，创建容器集群并使用它们来运行软件应用程序和服务已成为开发、部署和管理软件最显著的方式。正如本书其他地方所解释的，容器和微服务的酷炫融合推动了下一代应用交付。每个微服务都配备了一个或多个API。进一步来说，每个微服务都有自己的数据存储。为了数据安全和有效数据管理，每个数据库也被赋予了执行数据操作的API，以确保操作的信心和清晰度。
- en: The other prominent advancements are the faster proliferation of cloud environments
    and the fact that each cloud center is being stuffed with thousands of applications
    and platforms. Cloud-hosted platforms enable third-party application developers
    not only to develop newer applications, but also facilitate a seamless and spontaneous
    integration with their applications. As we are heading toward federated cloud
    environments to create composite applications, APIs emerge as the most crucial
    entity toward fulfilling the fast-emerging multi-cloud idea. **Device-to-device**
    (**D2D**), **device-to-cloud** (**D2C**), and **cloud-to-cloud** (**C2C**) integration
    gets facilitated through APIs.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 另一项显著的进步是云环境的快速普及以及每个云中心都挤满了数千个应用程序和平台。云托管平台不仅允许第三方应用程序开发者开发新的应用程序，还促进了与他们的应用程序的无缝和自发的集成。随着我们朝着联邦云环境前进以创建复合应用程序，API已成为实现快速出现的多云理念最关键实体。**设备到设备**（**D2D**）、**设备到云**（**D2C**）和**云到云**（**C2C**）的集成通过API得到促进。
- en: Learning about the major types of APIs
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解主要类型的API
- en: There are a few API types. **Remote procedure call** (**RPC**) is the one that
    enables applications to call one or more functions in other applications remotely.
    XML and JSON are the content types and there are RPC APIs for both XML and JSON.
    In the web services world, SOAP has been ruling the world with a number of standard
    specifications for different purposes. But then, due to the extreme complexity,
    the adoption rate has come down sharply. Now, with the lightweight REST architectural
    style, every service, application, platform, middleware, and database is exposing
    RESTful APIs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种API类型。**远程过程调用**（**RPC**）是允许应用程序远程调用其他应用程序中的一个或多个函数的一种。XML和JSON是内容类型，并且为XML和JSON都有RPC
    API。在Web服务领域，SOAP凭借针对不同目的的多个标准规范统治着世界。但随后，由于极端复杂性，采用率急剧下降。现在，随着轻量级的REST架构风格，每个服务、应用程序、平台、中间件和数据库都在公开RESTful
    API。
- en: Describing API platforms
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述API平台
- en: Considering the importance of APIs for the forthcoming digital era, tool and
    product vendors have come out with a variety of integrated platforms to enable
    API life cycle activities. The following sections discuss different platform solutions
    that empower the API world.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到API对于即将到来的数字时代的重要性，工具和产品供应商推出了各种集成平台，以实现API生命周期活动。以下各节讨论了不同的平台解决方案，这些解决方案赋予了API世界权力。
- en: Creating API development platforms
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建API开发平台
- en: There are several ways to produce high-quality APIs. Creating new APIs from
    the ground up, refurbishing the existing ones, and automatically generating APIs
    out of currently-running integration are the well-known ways. Here, we need platform
    support to create APIs in other ways. There are API design and integration platforms
    available for accomplishing this need. We now have thousands of **software as
    a service** (**SaaS**) applications being delivered through cloud environments.
    These services are generally API-attached. These APIs can be reused across. However,
    these APIs could be limited in their functionality. Thus, APIs have to be customized
    and enhanced in order to fulfill our requirements. Building fresh APIs from scratch
    is time-consuming and error-prone. Freshly-built APIs have to go through several
    iterations in order to be categorized as reasonably stable and mature.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以产生高质量的API。从头开始创建新的API，翻新现有的API，以及从当前运行的集成中自动生成API，这些是众所周知的方法。在这里，我们需要平台支持以其他方式创建API。有API设计和集成平台可以满足这一需求。我们现在有数千个**软件即服务**（**SaaS**）应用程序通过云环境交付。这些服务通常是API附加的。这些API可以在多个地方重复使用。然而，这些API在功能上可能有限。因此，API必须定制和增强以满足我们的需求。从头开始构建新的API既耗时又容易出错。新构建的API必须经过多次迭代才能被归类为相对稳定和成熟。
- en: However, with high-end API design and integration platforms, it's possible to
    speed up the creation of APIs from an existing integration with a few clicks.
    This way, we aren't discarding the functioning applications and can save a lot
    of time by leveraging the existing investments. That is, API platforms enhance
    the **return on investment** (**RoI**).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用高端API设计和集成平台，通过几点击就能加快从现有集成创建API的速度。这样，我们不会丢弃功能性的应用程序，并且可以通过利用现有投资节省大量时间。也就是说，API平台提高了**投资回报率**（**RoI**）。
- en: 'Typically, the client-side team designs and develops the application, the server-side
    team readies the backend IT infrastructure for application deployment, and the
    testing team is mandated to test client as well as server-side output. These teams
    should work in a collaborative manner to develop a REST API for the project:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，客户端团队设计和开发应用程序，服务器端团队为应用程序部署准备后端IT基础设施，测试团队被要求测试客户端以及服务器端输出。这些团队应该以协作的方式为项目开发REST
    API：
- en: '![](img/de6a4d80-b000-4838-98c7-db4a2c0629fb.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/de6a4d80-b000-4838-98c7-db4a2c0629fb.png)'
- en: REST APIs are changing frequently with the insights being put forward by business
    consumers, partners, and employees. These changes have to be incorporated into
    the APIs and their mapped services. This definitely takes up time and, hence,
    the time-to-market is bound to increase. In order to accelerate and augment the
    REST API design, development, documentation, and testing, a number of automated
    solutions are available that enhance team collaboration substantially.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: REST API正随着业务消费者、合作伙伴和员工提出的见解而频繁变化。这些变化必须纳入API及其映射的服务中。这无疑会占用时间，因此上市时间必然会增加。为了加速和增强REST
    API的设计、开发、文档和测试，有几种自动化解决方案可供选择，这些解决方案可以显著增强团队协作。
- en: '**RestCase** is a cloud-based API development platform. This unique platform
    empowers developers to collaboratively create REST APIs. This enablement is being
    achieved through a number of distinct platform modules. The key modules include
    an intuitive browser-based interface, which automatically generates documentation,
    tests, and mocks. This platform enables rapid iterations and testing by creating
    a mock of the API.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**RestCase**是一个基于云的API开发平台。这个独特的平台使开发者能够协作创建REST API。这种能力是通过一系列独特的平台模块实现的。关键模块包括一个直观的基于浏览器的界面，该界面可以自动生成文档、测试和模拟。该平台通过创建API的模拟来促进快速迭代和测试。'
- en: In order for development teams to work with QA and operation teams, the API
    development platform comes to the rescue. This platform helps development teams
    to build better APIs with ease. Developers' productivity goes up significantly
    when they are being empowered through an API-development platform. The development
    time and costs will come down. The API platform increases innovation through sharing
    and collaboration with the distributed research and development teams.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让开发团队能够与QA和运营团队协作，API开发平台提供了帮助。这个平台帮助开发团队轻松构建更好的API。当开发者通过API开发平台获得支持时，他们的生产力显著提高。开发时间和成本将降低。API平台通过共享和与分布式研发团队的协作来增加创新。
- en: API-integration platforms
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API集成平台
- en: We are steadily moving toward the digital era. Everyday objects are being empowered
    with digitization and edge technologies in order to become digital. That is, everything
    in our everyday environments becomes computational, communicative, sensitive,
    responsive, and active. Every digital artifact is being fitted with an appropriate
    API to be publicly found, network-accessible, and easily usable. For simplifying
    API integration, the most competent solution is API integration platforms. There
    are several use cases being mentioned by integration experts and architects as
    to why enterprises should adopt API-integration platforms.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正稳步迈向数字时代。日常物品正通过数字化和边缘技术被赋予数字化能力，以成为数字化产品。也就是说，我们日常环境中的每一件事都变得可计算、可通信、敏感、响应和活跃。每个数字产品都被配备了一个合适的API，以便公开发现、网络访问和易于使用。为了简化API集成，最有效的解决方案是API集成平台。集成专家和架构师提到了几个用例，说明了为什么企业应该采用API集成平台。
- en: With the emergence of cloud environments as the one-stop IT solution for all
    kinds of business offerings and operations, it's projected that in the years ahead,
    most enterprise, personal, mobile, and web applications will reside in clouds
    (public, private, hybrid, and edge). The popular enterprise-grade applications
    are **enterprise resource planning** (**ERP**), **supply chain management** (**SCM**),
    knowledge and content management, HR, finance and facility management, and asset
    management. Besides, all kinds of operational, transactional, and analytical applications
    are also being modernized and migrated to cloud environments in order to reap
    the benefits (user, technical, and business) of the cloud.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 随着云计算环境作为一站式IT解决方案的出现，为各种商业服务和运营提供支持，预计在未来几年，大多数企业级、个人、移动和Web应用程序都将驻留在云端（包括公有云、私有云、混合云和边缘云）。流行的企业级应用包括**企业资源规划**（ERP）、**供应链管理**（SCM）、知识和内容管理、人力资源、财务和设施管理，以及资产管理。此外，各种运营、交易和分析应用也在被现代化并迁移到云端环境中，以获得云带来的好处（用户、技术和商业）。
- en: Thus, it's becoming mandatory for IoT devices, desktop, wearable, and smartphone
    applications to connect with cloud applications and databases. Cloud applications,
    platforms, and infrastructures are predominantly API-enabled. That is, D2D, D2C,
    and C2C integration requirements grow sharply in the extremely connected world.
    To gain best-in-class applications, the role of API integration platforms is simply
    awe-inspiring.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，物联网设备、桌面、可穿戴设备和智能手机应用程序连接到云应用程序和数据库变得强制性的。云应用程序、平台和基础设施主要是API启用。也就是说，D2D、D2C和C2C集成需求在高度互联的世界中急剧增长。为了获得最佳级的应用程序，API集成平台的作用是令人敬畏的。
- en: Legacy integration
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遗留集成
- en: We've inherited a lot from the mainframe era. We have a number of legacy applications
    running in various industry verticals. Banking applications are still running
    legacy code. No one can dispute that the mainframe computer gives the highest
    performance. Typically, legacy applications follow the monolithic architecture.
    Also, legacy applications are massive. There are several other drawbacks associated
    with the legacy era. Still, due to their unique capabilities, enterprises are
    pretty slow to modernize their legacy investments. This encourages to bring an
    integration pipeline between modern and legacy applications. Legacy systems carry
    and store a lot of business transaction data. The API-integration platform enables
    data integration. That is, data can be extracted, transformed, and loaded into
    databases and warehouses associated with, and attached to, new applications. To
    produce and sustain integrated systems, it's mandatory to get and use legacy data.
    API-integration platforms are handy for this persisting need.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从主机时代继承了大量的东西。我们在各个行业垂直领域运行着许多遗留应用程序。银行应用程序仍在运行遗留代码。没有人能否认主机计算机提供了最高的性能。通常，遗留应用程序遵循单体架构。此外，遗留应用程序规模庞大。与遗留时代相关联的还有几个其他缺点。尽管如此，由于它们的独特能力，企业对现代化遗留投资的步伐相当缓慢。这促使在现代和遗留应用程序之间建立集成管道。遗留系统携带和存储大量的业务交易数据。API集成平台使数据集成成为可能。也就是说，数据可以被提取、转换并加载到与相关联的新应用程序关联的数据库和仓库中。为了生产和维持集成系统，获取和使用遗留数据是强制性的。API集成平台对于这种持续的需求非常有用。
- en: API integration platforms facilitate the formation of composite applications.
    With MSA becoming the shrewdest choice of application architectures, composing
    (through orchestration, choreography, or hybrid methods) is an important job for
    producing process-aware and business-critical applications. As we all know, every
    microservice exposes an API. Thus, to combine multiple microservices to produce
    composite applications, the contributions of API integration platforms are manifold.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: API集成平台促进了复合应用程序的形成。随着MSA成为应用架构中最明智的选择，通过编排、编排或混合方法进行组合是生产过程感知和业务关键应用程序的重要任务。众所周知，每个微服务都暴露了一个API。因此，为了将多个微服务组合成复合应用程序，API集成平台的贡献是多方面的。
- en: 'API integration platforms ensure faster cloud adoption and future-proof enterprise
    integration. You need an API-integration platform to future-proof enterprise integration.
    The following is forecast in years to come:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: API集成平台确保了更快的云采用和未来保障的企业集成。您需要一个API集成平台来保障企业集成。以下是在未来几年内的预测：
- en: Millions of software services
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数以百万计的软件服务
- en: Billions of connected devices
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数以亿计的连接设备
- en: Trillions of digitized artifacts
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数以万亿计的数字化文物
- en: As every physical, mechanical, electrical, and electronic system is fitted with
    APIs and presented as services, the adoption of API integration platform solutions
    is bound to escalate in the years to come.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 随着每个物理的、机械的、电的和电子系统都配备了API并以服务的形式呈现，API集成平台解决方案的采用率在未来几年必将上升。
- en: API management platforms
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API管理平台
- en: As businesses build enterprise and mobile applications for their end users,
    partners, and employees, APIs are becoming indispensable. Applications have to
    perform well over any kind of network. APIs provide design time and runtime access
    to data services hosted in cloud infrastructures. Enterprises are predominantly
    transactional. Increasingly, mobile commerce and business applications are transactional.
    Thus, we need API management platforms in order to precisely manage APIs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 随着企业为最终用户、合作伙伴和员工构建企业级和移动应用程序，API变得不可或缺。应用程序必须在任何类型的网络上表现良好。API提供了对托管在云基础设施中的数据服务的设计时间和运行时访问。企业主要是交易性的。移动商务和业务应用程序的交易性日益增加。因此，我们需要API管理平台来精确管理API。
- en: 'We have discussed the various features and needs for API development and integration
    platforms, and how they assist software developers and integrators in arriving
    at integrated systems with confidence and clarity. Now, we are moving toward API
    management and its automation through management platforms. Generally, API management
    is all about designing high-quality APIs, and then publishing and analyzing them
    in order to continuously track their usage. There can be both internal as well
    as external-looking APIs, which have to be search-friendly and consumable. As
    the world is tending toward embracing the API economy, there are several products
    and platforms that simplify and streamline API-management activities. The primary
    purposes of an API-management solution are as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了API开发和集成平台的各种特性和需求，以及它们如何帮助软件开发人员和集成人员自信且清晰地构建集成系统。现在，我们正朝着API管理和通过管理平台实现其自动化迈进。一般来说，API管理涉及设计高质量的API，然后发布和分析它们，以便持续跟踪其使用情况。API可以是面向内部或外部的，它们必须易于搜索和消费。随着世界越来越倾向于拥抱API经济，有多个产品和平台简化并优化了API管理活动。API管理解决方案的主要目的如下：
- en: '**API design**: API-management solutions empower developers and external parties
    with all the requisite knowledge and capability to design, produce, and deploy
    APIs. Further down the line, it helps in making API documents, and setting security
    policies, service levels, and runtime capabilities.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API设计**：API管理解决方案赋予开发人员和外部各方设计、生产和部署API所需的所有知识和能力。进一步来说，它有助于制作API文档，设置安全策略、服务级别和运行时能力。'
- en: '**API gateway**: We have allocated a separate chapter to describe the various
    functionalities of API gateways and how microservices benefit through the leveraging
    of API gateway solutions. These days, API-management solutions are also empowered
    to contribute as an API gateway, which is a centralized and clustered frontend
    for any service user to leverage distributed microservices. API gateways function
    as a gatekeeper for all downstream APIs and regulate service interactions in a
    secure manner.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API网关**：我们专门分配了一章来描述API网关的各种功能以及微服务如何通过利用API网关解决方案受益。如今，API管理解决方案也被赋予了作为API网关的能力，这为任何服务用户提供了一个集中式和集群式的前端，以便利用分布式微服务。API网关充当所有下游API的守门人，并以安全的方式调节服务交互。'
- en: '**API store**: APIs should be stored in a centralized place so that internal
    and external users can leverage them. Thus, as service marketplaces, API marketplaces
    are evolving fast.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API存储**：API应该存储在集中位置，以便内部和外部用户可以利用它们。因此，作为服务市场，API市场正在快速发展。'
- en: '**API analytics**: With the heightened usage of APIs, it''s important to track
    key metrics, such as API usage, transactions, and performance. Capturing this
    decision-enabling and value-adding data, and processing it, helps to extract useful
    insights to improve service quality.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API分析**：随着API使用量的增加，跟踪关键指标，如API使用情况、交易和性能，变得非常重要。捕捉这些决策支持和增值数据，并对其进行处理，有助于提取有用见解，以提升服务质量。'
- en: The end-to-end API life cycle activities (authentication, provisioning roles
    for users, policy establishment and enforcement, rate limiting of user requests,
    API data analytics, and monitoring) are being taken care of by management platform
    solutions. These solutions also enable and enhance API consumption by developers,
    external parties, and employees. API documentation is also being automated. The
    API-management suite uses caching to lessen the load on services. API log, operational,
    performance, scalability, and security data gets collected and subjected to a
    variety of investigations through the API analytics feature in order to understand
    the service state so we can perform tuning. Almost all enterprises are embracing
    APIs in order to be online and strive for improved market reach. Further on, the
    API catalogue is being published in the company portal. The versatile solution
    is to deploy API-management platforms to substantially increase business agility
    and adaptability.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 端到端API生命周期活动（如身份验证、为用户提供角色配置、政策建立和执行、用户请求速率限制、API数据分析、监控）正由管理平台解决方案负责处理。这些解决方案还通过开发人员、外部方和员工来启用和增强API的使用。API文档也正在实现自动化。API管理套件使用缓存来减轻服务负载。API日志、运营、性能、可扩展性和安全数据通过API分析功能收集并受到各种调查，以便了解服务状态，从而进行调优。几乎所有的企业都在拥抱API，以在线运营并追求市场覆盖率的提升。进一步来说，API目录正在在公司门户中发布。灵活的解决方案是部署API管理平台，以显著提高业务敏捷性和适应性。
- en: APIs have to be artistically architected. APIs aren't just to enable every software
    package to have a frontend toward integration, they have to be extremely user-friendly.
    API endpoints have to be easy to understand and use for performing basic tasks.
    APIs are expected to remarkably enhance developers' productivity. Learning design
    patterns has to be fast and easy in order to empower developers to create well-designed
    APIs. APIs have to be designed to be long-lasting. That is, API consistency has
    to be ensured. API quality also has to be seriously verified and validated, otherwise,
    defective APIs waste a lot of time for developers. Both API providers and consumers
    demand top-quality APIs. With automated tools for API design, deployment, and
    management, better and more consistent results are being realized by enterprises
    across the globe.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: API必须进行艺术化的架构设计。API不仅仅是为了使每个软件包都能有一个面向集成的前端，它们还必须极其用户友好。API端点必须易于理解和使用，以便执行基本任务。API预计将显著提高开发者的生产力。学习设计模式必须快速且简单，以便赋予开发者创建良好设计的API的能力。API必须设计成持久性的。也就是说，必须确保API的一致性。API质量也必须进行严格的验证和验证，否则，有缺陷的API会浪费开发者大量时间。API提供者和消费者都要求高质量的API。通过API设计、部署和管理自动化工具，全球企业正在实现更好和更一致的结果。
- en: APIs have shown glimpses of successes and are used to fulfil application integration,
    which has been a hassle for business-enterprise IT teams. APIs are positioned
    as the proven way forward for all kinds of integration requirements. Besides web
    and cloud enablement, the process of mobile enablement is gaining a lot of mind
    and market shares in order to provide any time, anywhere, any device, and any
    network information and service access. APIs have to be designed not only to tackle
    currently available devices, but also futuristic devices. There are a number of
    artistically designed I/O devices hitting the market consistently. Every connected
    device and clustered infrastructure, besides software systems, is being enabled
    by attaching efficient and extensible APIs in order to be found and bound to create
    business value.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: API已经展现出了成功的曙光，并被用于满足应用集成，这对于企业IT团队来说一直是个头疼的问题。API被视为满足各种集成需求的既定前进方式。除了网络和云服务能力之外，移动服务能力的实现过程正在获得越来越多的关注和市场份额，以便提供随时随地、任何设备、任何网络的信息和服务访问。API的设计不仅要应对现有设备，还要考虑未来设备。市场上不断涌现出许多艺术设计的I/O设备。除了软件系统之外，每个连接的设备和集群基础设施都通过附加高效且可扩展的API来实现，以便被发现和绑定，从而创造商业价值。
- en: There are a multitude of techniques and tools you can use to speed up API-based
    integration in a risk-free and rewarding manner. As previously discussed, we have
    integrated platform solutions (open source as well as commercial-grade) aplenty
    toward the API economy. These platforms intrinsically guarantee the quality of
    the APIs being produced and used. The quality is mandated to attain the benefits
    of the API phenomenon.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用多种技术和工具来安全且高效地加快基于API的集成。如前所述，我们已整合了大量的平台解决方案（包括开源和商业级）以促进API经济。这些平台本质上保证了所产生和使用的API的质量。这种质量是强制性的，以获得API现象的好处。
- en: Demystifying the RESTful services paradigm
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 揭秘RESTful服务范式
- en: This book takes a deep dive into RESTful services and APIs. Despite being simple,
    REST is a fully-featured architectural style. Producing, exposing, and sustaining
    high-quality RESTful APIs to achieve smooth functional integration is a crucial
    yet challenging job for IT professionals. Predominantly, REST is implemented with
    the HTTP protocol. However, REST is not tied to HTTP alone. REST APIs are implemented
    for a *resource*,and the resource can be an entity or a service. These APIs provide
    a way to identify a resource by its URI. URIs can be used to transfer the current
    state of a resource representation. APIs can be represented as a set of endpoints
    stuffed with verbs and nouns. A verb typically represents an action, such as get,
    put, or delete, while the nouns indicate arguments appropriate to the action.
    It's always a good practice to have a mechanism to communicate error messages
    and successful execution. APIs have to clearly articulate their services and parameters
    in order to lessen developer errors. The error messages also have to be comprehensive
    in order to unambiguously convey what's happening to the end users.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 本书深入探讨了RESTful服务和API。尽管REST风格简单，但它是一个功能齐全的架构风格。对于IT专业人员来说，生产、公开和维护高质量的RESTful
    API以实现平滑的功能集成是一项关键且具有挑战性的工作。主要来说，REST是通过HTTP协议实现的。然而，REST并不局限于HTTP。REST API是为*资源*实现的，资源可以是实体或服务。这些API提供了一种通过其URI来识别资源的方法。URI可以用来传输资源表示的当前状态。API可以表示为一组端点，其中包含动词和名词。动词通常表示一个动作，如get、put或delete，而名词则表示与动作相关的参数。始终有一个机制来传达错误消息和成功的执行是一个好习惯。API必须清楚地阐述其服务和参数，以减少开发者的错误。错误消息也必须全面，以便明确地向最终用户传达正在发生的情况。
- en: With the widespread usage of the service paradigm, there has been a surge popularity
    for RESTful services, which are quite lightweight compared to SOAP services. Service-oriented
    application development and assembly have become the *de facto* standard in software
    engineering. For developing and deploying internet applications, leveraging RESTful
    services as application components has grown sharply. RESTful applications and
    services are fitted with compatible and competent APIs. RESTful services bring
    up the much-needed agility, adaptability, and simplicity for application development.
    APIs have become so common across IT services and business workloads. In addition,
    APIs are the most common elements for software infrastructure, middleware solutions,
    integration servers, containerization platforms, and backend database systems.
    APIs come as a standardization mechanism for enterprise applications to interact
    in a consistent and cognitive manner.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 随着服务范式的广泛应用，RESTful服务的需求激增，与SOAP服务相比，RESTful服务相当轻量。面向服务的应用程序开发和组装已成为软件工程的*事实标准*。对于开发和部署互联网应用程序，利用RESTful服务作为应用程序组件的需求急剧增长。RESTful应用程序和服务配备了兼容且高效的API。RESTful服务为应用程序开发带来了急需的敏捷性、适应性和简单性。API已成为IT服务和业务工作负载中如此常见的元素。此外，API是软件基础设施、中间件解决方案、集成服务器、容器化平台和后端数据库系统中最常见的元素。API作为企业应用程序以一致和认知方式交互的标准化机制。
- en: Due to the phenomenal growth of cloud-native and enabled applications, there
    is a need to establish a seamless and spontaneous link between enterprise and
    personal applications with cloud-hosted applications and data sources. Here, the
    REST paradigm scores well over other options. We have a bevy of programming and
    scripting languages for the client- and server-side applications. Not only desktop
    and laptop computers, but also handhelds, wearable, portables, nomadic, wireless,
    and mobile devices are becoming integrated with web applications. The environments
    become highly complicated and heterogeneous. Also, many devices and services have
    to collaborate to fulfill business processes. The REST paradigm comes to the rescue
    here. The REST concept is an abstraction for running web applications on different
    environments, such as Windows or Linux.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 由于云原生和启用应用程序的显著增长，有必要在云托管应用程序和数据源与企业和个人应用程序之间建立无缝和自发的链接。在这里，REST范式在其它选项中表现良好。我们有大量的编程和脚本语言用于客户端和服务器端应用程序。不仅桌面和笔记本电脑，还有手持设备、可穿戴设备、便携式设备、游牧设备、无线设备和移动设备正在与Web应用程序集成。环境变得高度复杂和异构。此外，许多设备和服务必须协作以完成业务流程。REST范式在这里提供了帮助。REST概念是在不同环境中运行Web应用程序的抽象，例如Windows或Linux。
- en: RESTful services guarantee the much-needed flexibility to host and run applications
    coded using different programming languages and platforms. Heterogeneous applications
    are being enabled to interoperate with one another through the power of RESTful
    services. Devices are being exposed as device services, which are being frontended
    with a RESTful API. Another widespread trend is that cloud applications are REST
    API-driven. Not only resource-intensive systems, but also resource-constraint
    embedded devices, are benefitting from the RESTful services paradigm in order
    to be connected. There are several device-centric communication and data transmission
    protocols, and the REST phenomenon is using them to become the favorite of service
    developers and users. There are several constraints imposed on this service implementation
    concept in order to be hugely benevolent for a number of usage scenarios.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful服务保证了使用不同编程语言和平台编写的应用程序所需的灵活性，以托管和运行这些应用程序。异构应用程序正在通过RESTful服务的力量实现相互操作。设备正被暴露为设备服务，并通过RESTful
    API进行前端处理。另一个普遍的趋势是云应用程序由REST API驱动。不仅资源密集型系统，而且资源受限的嵌入式设备，都从RESTful服务的范式中受益，以便连接。存在几种以设备为中心的通信和数据传输协议，REST现象正在使用它们成为服务开发者和用户的宠儿。为了在许多使用场景中实现巨大的善意，对这种服务实现概念施加了几个约束。
- en: Characterizing the REST architecture style
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 特征化REST架构风格
- en: First and foremost, the REST paradigm is an architectural pattern. There were
    a number of design patterns published by experts in order to design and develop
    RESTful services. There are integration and deployment patterns for the quick
    realization of the pioneering REST paradigm.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，REST范式是一种架构模式。专家们发布了许多设计模式，以设计和开发RESTful服务。有集成和部署模式，可以快速实现开创性的REST范式。
- en: 'The REST paradigm is compliant with the famous RoA pattern. The application
    state and functionality are methodically divided into distributed resources. These
    resources are available online and, hence, each resource can be accessed and used
    with the ubiquitous HTTP commands (`GET`, `PUT`, `POST`, and `Delete`). If we
    want to put a file in a file server, we need to use `PUT` or `POST`. If we want
    to get a file from the server, we can use the `GET` command. If we want to delete
    the file, the `DELETE` command is our go-to option. The REST architecture, is
    as usual, client-server and layered. It supports caching on the client side. Also,
    REST applications are stateless. This means they don''t store the state of the
    application. The distinct characteristics are explained as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: REST范式符合著名的RoA模式。应用程序状态和功能被系统地划分为分布式资源。这些资源在线可用，因此每个资源都可以使用普遍的HTTP命令（`GET`、`PUT`、`POST`和`DELETE`）进行访问和使用。如果我们想在文件服务器上放置一个文件，我们需要使用`PUT`或`POST`。如果我们想从服务器获取文件，我们可以使用`GET`命令。如果我们想删除文件，`DELETE`命令是我们的首选选项。REST架构，像往常一样，是客户端-服务器和分层的。它支持客户端缓存。此外，REST应用程序是无状态的。这意味着它们不存储应用程序的状态。以下是对其独特特征的解释：
- en: '**Client-server**: The client can be anything that sends a service request
    to the server. The server side will host a RESTful service, which provides the
    business functionality to the client.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端-服务器**：客户端可以是任何向服务器发送服务请求的东西。服务器端将托管 RESTful 服务，为客户端提供业务功能。'
- en: '**Stateless**: The server doesn''t store the client session information. Clients
    have to share all the required details with the server to get the appropriate
    answer. That is, RESTful services are self-defined, self-contained, autonomous,
    highly scalable, and performing.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：服务器不存储客户端会话信息。客户端必须与服务器共享所有必要细节以获得适当的答案。也就是说，RESTful 服务是自我定义的、自包含的、自主的、高度可扩展的，并且性能良好。'
- en: '**Cache**: As the server doesn''t store the client information, it''s the responsibility
    of clients to keep all the relevant information. Thus, the concept of the cache
    has emerged and become popular. Sometimes, the client sends the same request to
    the server again. As REST services are independent, the client would get the same
    response. In order to reduce network traffic, the idea of a cache got introduced
    on the client side. The speed of getting the service response is quicker here
    as the cache is storing the previous response and the cache is positioned on the
    client side.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存**：由于服务器不存储客户端信息，因此客户端有责任保留所有相关信息。因此，缓存的概念应运而生并变得流行。有时，客户端会再次向服务器发送相同的请求。由于
    REST 服务是独立的，客户端将得到相同的响应。为了减少网络流量，客户端侧引入了缓存的概念。由于缓存存储了之前的响应，并且缓存位于客户端侧，因此获取服务响应的速度更快。'
- en: '**Caching** is all about storing copies of frequently-accessed data in several
    locations along the client and server route. Typically, a client request gets
    passed to the server on the other side of the world. However, a series of caches
    are being incorporated between client and server components. That is, the request
    first knocks the local cache at the client side, and then the reverse proxy at
    the server side. If any of the caches have the latest resource representation,
    it can be used by the client. If not, the request will be sent to the server component
    to fetch the latest information.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**缓存**就是将频繁访问的数据的副本存储在客户端和服务器路径上的多个位置。通常，客户端请求会被传递到世界另一端的服务器。然而，一系列的缓存被整合在客户端和服务器组件之间。也就是说，请求首先敲打客户端侧的本地缓存，然后是服务器侧的反向代理。如果任何一个缓存有最新的资源表示，它就可以被客户端使用。如果没有，请求将被发送到服务器组件以获取最新信息。'
- en: '**Layered system**: Due to the growing complexity of enterprise applications,
    layering was introduced. This means it''s possible to incorporate additional modules
    between the client and server. We''re comfortable with three-tier and multi-tier
    applications. This is a complexity-mitigation technique.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层系统**：由于企业应用复杂性的不断增加，引入了分层。这意味着可以在客户端和服务器之间集成额外的模块。我们熟悉三层和多层应用。这是一种复杂性缓解技术。'
- en: REST Resource Representation Compression
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST 资源表示压缩
- en: REST APIs can return the resource representations in a variety of formats (XML,
    JSON, HTML, and text). Resource representations can be compressed to save network
    bandwidth and storage requirements. There are different transmission protocols
    that enable compression, and clients are accordingly notified about the compression
    algorithm used.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: REST API 可以以多种格式（XML、JSON、HTML 和文本）返回资源表示。资源表示可以被压缩以节省网络带宽和存储需求。存在不同的传输协议可以实现压缩，并且客户端相应地被通知所使用的压缩算法。
- en: '**Hypermedia as the Engine of Application State** (**HATEOAS**) is an important
    constraint of the REST paradigm. The term *hypermedia *refers to the links that
    point to various types of multimedia content (images, videos, audios, or text).
    This architectural style helps to use hypermedia links in the response message
    so that clients can dynamically go to the correct resource.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**超媒体作为应用状态引擎**（**HATEOAS**）是 REST 范式的一个重要约束。术语 *超媒体* 指的是指向各种类型的多媒体内容（图像、视频、音频或文本）的链接。这种架构风格有助于在响应消息中使用超媒体链接，以便客户端可以动态地访问正确的资源。'
- en: Idempotent REST APIs
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 允许幂等的 REST API
- en: If we make multiple identical requests and receive the same response every time,
    the APIs are generally called **idempotent**. Some API consumers knowingly or
    unknowingly make the same request twice or thrice. The APIs have to understand
    this and reply with the same response.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们多次发送相同的请求并且每次都收到相同的响应，这些 API 通常被称为 **幂等**。一些 API 消费者有意或无意地两次或三次发送相同的请求。API
    必须理解这一点，并以相同的响应进行回复。
- en: The point is that we have to build and deploy *intelligent APIs. One trait of
    them is the idempotent APIs.* We have to have *idempotent REST APIs* for all the
    standard HTTP operations, such as `GET`, `PUT`, and `DELETE`. Only `POST` APIs
    will not be idempotent.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 重点是，我们必须构建和部署 *智能 API。它们的一个特点是幂等 API。* 我们必须为所有标准 HTTP 操作，如 `GET`、`PUT` 和 `DELETE`，拥有
    *幂等的 REST API。只有 `POST` API 不会是幂等的。
- en: As previously mentioned, RESTful communication takes place on the HTTP protocol,
    and the HTTP commands are being used by the REST client to interact with the REST
    server. This uniformity and simplicity works wonders for the faster and easier
    adoption of the REST paradigm, which becomes an important concept in the increasingly
    connected world.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，RESTful 通信发生在 HTTP 协议上，HTTP 命令正被 REST 客户端用于与 REST 服务器交互。这种一致性和简单性对于更快、更轻松地采用
    REST 架构模式大有裨益，这在日益互联的世界中成为一个重要的概念。
- en: REST API design considerations
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST API 设计考虑因素
- en: With the usage of APIs increasing rapidly, the API design process is getting
    a lot of attention from a variety of sources these days. Not only is it important
    to insightfully blueprint and implement highly-optimized and -organized APIs,
    but we also need to empower them to be resilient, robust, and versatile for the
    web, mobile, and cloud worlds. The availability of APIs for the continued function
    of applications is essential. The high performance and throughput of APIs is vital.
    The number of user requests, the number of transactions, and the amount of data
    getting processed are critical for APIs to contribute their might to the application
    world. APIs have to scale well in order to tackle extra user and data loads automatically
    in order to be relevant for their consumers and stakeholders. There shouldn't
    be any API-induced application slowdown and breakdown. We discussed the importance
    of API security in a separate section. Any kinds of internal errors, security
    holes, or vulnerabilities in APIs have to be weeded out through testing procedures
    and tools. Any kind of outsider attack also needs to be given sufficient consideration.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 随着 API 的使用量迅速增加，API 设计过程现在正受到来自各种来源的广泛关注。不仅需要深入规划和实施高度优化和有序的 API，还需要使它们能够适应
    Web、移动和云世界，具有弹性、健壮性和多功能性。API 的可用性对于应用程序的持续运行至关重要。API 的高性能和吞吐量至关重要。用户请求的数量、交易的数量以及处理的数据量对于
    API 为应用世界贡献力量至关重要。API 必须具有良好的可扩展性，以便自动处理额外的用户和数据负载，从而对消费者和利益相关者具有相关性。不应有任何由 API
    引起的应用程序速度减慢和崩溃。我们已在单独的部分讨论了 API 安全性的重要性。任何类型的内部错误、安全漏洞或 API 的漏洞都必须通过测试程序和工具进行清除。任何类型的外部攻击也需要给予足够的考虑。
- en: 'Applications have to fully comply with all the stated API requirements. That
    is, applications have to send correct data and protocols, as etched in the API
    rulebook. If there''s any deliberate deviation, the result can be irreparable
    damage. Thus, API monitoring, log collection, and adept management are necessary
    for success. When designing APIs, service architects and API developers have to
    take the following into serious consideration. APIs play a  crucial role in fulfilling
    the **non-functional requirements** (**NFRs**)/**quality of service** (**QoS**)
    attributes for RESTful services. As we all know, RESTful services guarantee simplicity
    and ubiquity. Thus, when designing REST APIs, architects and designers have to
    give special importance to the following NFRs:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序必须完全遵守所有声明的 API 要求。也就是说，应用程序必须发送正确的数据和协议，正如 API 规则手册中所刻画的。如果存在任何故意的偏差，结果可能是无法修复的损害。因此，API
    监控、日志收集和熟练的管理对于成功至关重要。在设计 API 时，服务架构师和 API 开发者必须认真考虑以下因素。API 在满足 RESTful 服务的 **非功能性需求**（**NFRs**）/**服务质量**（**QoS**）属性方面发挥着至关重要的作用。众所周知，RESTful
    服务保证了简单性和普遍性。因此，在设计 REST API 时，架构师和设计师必须特别重视以下 NFRs：
- en: '**Performance**: This is an important parameter when designing APIs for RESTful
    services to interact and collaborate.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：这是设计用于 RESTful 服务交互和协作的 API 时的一个重要参数。'
- en: '**Scalability**: RESTful APIs have to be designed to support a large number
    of application components. The number of interactions among those components should
    also be on the higher side.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：RESTful API 必须设计成支持大量应用程序组件。这些组件之间的交互数量也应该相对较高。'
- en: '**Modifiability**: Newer technologies keep coming up, business sentiments keep
    being chopped and changed, and user expectations are also evolving. Since *change
    is the only constant*, APIs have to be built to be adaptive to changing requirements.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可修改性**：新技术不断涌现，商业情绪不断变化，用户期望也在不断演变。由于*变化是唯一的不变因素*，API必须构建以适应不断变化的需求。'
- en: '**Portability**: APIs are being used, tested, refined, and deployed in API
    stores. APIs have to be made portable to work across systems.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**便携性**：API正在API存储库中被使用、测试、精炼和部署。API必须具备便携性才能在各个系统间工作。'
- en: '**Reliability**: APIs have to be reliable to withstand any kind of failures
    and faults at the system level. There may be failures at the component and data
    levels, but the system should still continue to function and deliver its obligations.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可靠性**：API必须可靠，以承受系统级别的任何类型的故障和错误。组件和数据级别可能存在故障，但系统仍应继续运行并履行其义务。'
- en: As we struggle to build and deploy highly-scalable, -available, and -reliable
    systems with high performance, the arrival of APIs as a soothing element toward
    fulfilling the previous NFRs is being viewed and welcomed with appreciation.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们努力构建和部署高度可扩展、可用和可靠的系统时，API作为满足先前NFRs的舒缓元素的出现，正受到赞赏和欢迎。
- en: Enumerating RESTful API design patterns
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 枚举RESTful API设计模式
- en: 'API design is turning out to be a core pillar for any API product strategy
    to attain the desired success for software products. Any software package has
    to be attached with appropriate APIs in order to be found and bound remotely.
    Exposing APIs helps any third-party service or software provider to get linked
    and used. Therefore, producing easy-to-use, forward-looking, and sustainable APIs
    is vital for the API-driven world. Good API design considerably enhances the **developer
    experience** (**DX**) and can improve performance and long-term maintainability.
    The API implementation is typically hidden from API clients. Such a separation
    brings much-needed flexibility for any kind of advancements to be brought to the
    API implementation without affecting any API client. A well-designed API has to
    have the following properties:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: API设计正成为任何API产品战略的核心支柱，以实现软件产品的预期成功。任何软件包都必须附加适当的API才能远程被发现和绑定。公开API有助于任何第三方服务或软件提供商建立联系并被使用。因此，生产易于使用、前瞻性和可持续的API对于API驱动世界至关重要。良好的API设计可以显著提高**开发者体验**（**DX**），并可以提高性能和长期可维护性。API实现通常对API客户端隐藏。这种分离为API实现带来的任何进步提供了所需的灵活性，而不会影响任何API客户端。一个设计良好的API必须具有以下属性：
- en: APIs have to support all standard and mutually-agreed platforms
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API必须支持所有标准和相互同意的平台
- en: With the growing device ecosystem, any client can call and use APIs
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 随着设备生态系统的不断增长，任何客户端都可以调用和使用API
- en: Nothing is going to be static
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么都不会是静态的
- en: API changes are mandated then and there, as applications and services are bound
    to be constantly modernized
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API更改是强制性的，因为应用程序和服务注定要不断现代化
- en: API design and modification has to be done in such a way that clients aren't
    negatively impacted
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API设计和修改必须以这种方式进行，以确保客户端不受负面影响
- en: Media types
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 媒体类型
- en: As everyone knows, clients and servers normally exchange resource representations.
    Typically, in a `POST` request, the request body contains a representation for
    a resource to be created. On the reverse side, in a `GET` request, the response
    body contains a representation of the received resource. Generally, formats are
    specified through the use of *media types* (alternatively termed MIME types).
    For non-binary data, it's JSON (`media type = application/json`) and XML (`media
    type = application/xml`). The Content-Type header in a request or response specifies
    the format of the representation.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 正如众所周知，客户端和服务器通常交换资源表示。通常，在`POST`请求中，请求体包含要创建的资源表示。相反，在`GET`请求中，响应体包含接收到的资源表示。通常，格式通过使用*媒体类型*（也称为MIME类型）来指定。对于非二进制数据，它是JSON（媒体类型=application/json）和XML（媒体类型=application/xml）。请求或响应中的Content-Type头指定了表示的格式。
- en: 'Having understood the relevance of APIs for creating composite enterprises,
    IT professionals have unearthed a number of API design patterns, which are easy
    for API designers and developers to understand and use:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在理解了API对于创建复合企业的重要性之后，IT专业人士已经挖掘出许多API设计模式，这些模式易于API设计者和开发者理解和使用：
- en: '**Statelessness**: For web-scale applications, the number of users employing
    a variety of client devices to get served through REST services is in the millions
    at any point in time. Web applications made through RESTful services have to be
    internally and externally scalable. Thus, storing client session information in
    an application server can degrade application performance. That is, application
    servers have to be stateless. APIs have to be designed to support the statelessness
    property.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**：对于 Web 规模的应用程序，在任何时候，使用各种客户端设备通过 REST 服务获得服务的用户数量都在数百万。通过 RESTful 服务创建的
    Web 应用程序必须内部和外部可扩展。因此，在应用程序服务器中存储客户端会话信息可能会降低应用程序性能。也就是说，应用程序服务器必须是无状态的。API 必须设计成支持无状态属性。'
- en: '**Content-negotiation**: We know that a resource can have multiple representations
    in order to fulfill the varied needs of different client devices. Requesting a
    suitable presentation by a client is termed content-negotiation. Another option
    is that different representation can be referred to using different URLs.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容协商**：我们知道，一个资源可以有多种表示形式，以满足不同客户端设备的不同需求。客户端请求合适的表示形式被称为内容协商。另一种选择是，可以使用不同的
    URL 来引用不同的表示形式。'
- en: '**Uniform resource identifier** (**URI**) **templates**: The URIs with placeholders
    in them. By using named substitution variables, the templates can be used to create
    URIs for specific resources. The templates are used in specification documents
    to describe where resources reside. Clients should be aware of these templates
    to generate the full URI for any resource. This is due to the fact that resources
    are not typically linked to other resources. It''s the responsibility of clients
    to decide on a resource''s URI manually. The proper solution to this predicament
    is to link those resources from a known place. Individual product offerings have
    to be linked from a centralized product listing resource. Thus, URI templates
    come in handy for unambiguously identifying the URI for any resource.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一资源标识符**（**URI**）**模板**：包含占位符的 URIs。通过使用命名替换变量，模板可以用来为特定资源创建 URIs。模板用于规范文档中描述资源的位置。客户端应该了解这些模板，以生成任何资源的完整
    URI。这是由于资源通常不会链接到其他资源。决定资源 URI 的责任在于客户端手动。解决这种困境的正确方法是，从已知位置链接这些资源。单个产品提供必须从中央产品列表资源链接。因此，URI
    模板对于明确标识任何资源的 URI 非常有用。'
- en: '**Versioning**: This is an important practice. APIs keep changing to accommodate
    business and technology changes. API compatibility is a serious stuff. Developers
    are being continuously pressed to bring in verified changes on APIs. Occasionally,
    backward compatibility is being required in order to enable work with older versions
    of APIs. The idea is that if the version number is attached with an API, there''s
    no conflict and it makes light of users'' tasks. API versioning also helps to
    precisely track the API''s evolution.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制**：这是一个重要的实践。APIs 不断变化以适应商业和技术变化。API 兼容性是一个严肃的问题。开发者们持续地被要求在 APIs 上引入经过验证的更改。有时，为了能够与较旧版本的
    APIs 一起工作，需要向后兼容。其理念是，如果版本号与 API 相关联，则不会有冲突，并且简化了用户的工作。API 版本控制也有助于精确跟踪 API 的演变。'
- en: '**Bulk operations**: Services are being decorated with fine-grained and coarse-grained
    methods. Bulk operations are being typically implemented through coarse-grained
    methods. API designers have to take care of this thing. Fine-grained methods typically
    demand multiple requests and responses, which wastes a lot of network bandwidth
    resources. With a few requests, bigger and better operations can be accomplished.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**批量操作**：服务正在通过细粒度和粗粒度方法进行装饰。批量操作通常通过粗粒度方法实现。API 设计者必须注意这一点。细粒度方法通常需要多个请求和响应，这浪费了大量的网络带宽资源。通过少数几个请求，可以完成更大更好的操作。'
- en: '**Pagination**: Exposing a variety of resources through a single URI can lead
    to applications fetching a large amount of data for the client. It''s not possible
    to show all the representation details in a single page. Pagination comes to the
    rescue here in reducing the amount of data that will be communicated to the client,
    so the network bandwidth can be conserved. This pattern also avoids any unnecessary
    processing at the server side. During the API design phase, though it’s a challenging
    task to foresee the amount of data that will be returned as part of response,
    its necessary for API designers to anticipate and planned for the paging resources
    requirements'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分页**: 通过单个URI暴露多种资源可能导致应用程序为客户端获取大量数据。不可能在单页面上显示所有表示细节。分页在这里发挥作用，可以减少将传递给客户端的数据量，从而节省网络带宽。这种模式还可以避免服务器端不必要的处理。在API设计阶段，尽管预测作为响应返回的数据量是一项具有挑战性的任务，但对于API设计者来说，预测和规划分页资源需求是必要的。'
- en: '**Sorting**: Sorting is an important feature for any API endpoint that returns
    a large quantity of data to the client. To facilitate the sorting functionality,
    many APIs add a *sort* or *sort_by* URL parameter, which can take a field name
    as the value. Good API designs let you specify *ascending *or *descending *order
    when sorting. A sort parameter should contain the names of the attributes on which
    the sorting is performed, separated by a comma.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**排序**: 对于返回大量数据给客户端的任何API端点，排序都是一个重要的功能。为了便于排序功能，许多API添加了*sort*或*sort_by*
    URL参数，它可以接受字段名作为值。好的API设计允许您在排序时指定*升序*或*降序*。排序参数应包含执行排序的属性名称，用逗号分隔。'
- en: '**Filtering**: It''s an accepted statement that URL parameters is the way to
    go for embedding basic filtering to REST APIs. If we have a `/products` endpoint,
    which is products for sale, we can filter via the property name, such as `GET
    /products?state=active` or `GET /products?state=active&seller_id=1234`. The problem
    here is that this only works for exact matches. If we want to filter for a range
    (price, or date), there is a challenge. URL parameters typically have a key and
    a value, but for performing advanced filtering, we need a minimum of three components:
    the property/field name, the operator, and the filter value.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**过滤**: 这是一个公认的说法，即URL参数是嵌入基本过滤到REST API的方式。如果我们有一个`/products`端点，它是销售的产品，我们可以通过属性名进行过滤，例如`GET
    /products?state=active`或`GET /products?state=active&seller_id=1234`。这里的问题是这仅适用于精确匹配。如果我们想要过滤范围（价格或日期），就存在挑战。URL参数通常有一个键和一个值，但为了执行高级过滤，我们需要至少三个组件：属性/字段名、运算符和过滤值。'
- en: 'There are ways to encode these components into URL parameter keys/values. You
    can find more details on the options here: [https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/](https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/).
    Restricting resources or responses by restricting number of queries (resources)
    with specific and limited attributes along with their expected values is called
    filtering. So it would be possible that one can apply filters in a collection
    on multiple attributes or allowing several values for one filtered attribute.:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 有方法将这些组件编码到URL参数键/值中。您可以在以下链接中找到更多详细信息：[https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/](https://www.moesif.com/blog/technical/api-design/REST-API-Design-Filtering-Sorting-and-Pagination/)。通过限制具有特定和有限属性及其预期值的查询（资源）数量来限制资源或响应称为过滤。因此，可以在多个属性上应用过滤器，或者允许一个过滤属性有多个值。
- en: '**Unicode**: Modern-day APIs have to support more than English characters.
    If Unicode characters are embedded in a URL, the API has to be developed accordingly.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Unicode**: 当今的API必须支持比英语字符更多的字符。如果URL中嵌入Unicode字符，API必须相应地开发。'
- en: '**Error logging**: All kinds of error messages have to be meticulously collected
    and subjected to a variety of investigations to extract any useful insights from
    logs. The client request may have errors. There may be errors being caused by
    the API itself. Thus, log collection is an important process for error analytics.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**错误日志**: 必须仔细收集各种错误消息，并对其进行各种调查，以从日志中提取任何有用的见解。客户端请求可能有错误。可能是由API本身引起的错误。因此，日志收集是错误分析的重要过程。'
- en: '**Stateless authentication and authorization**: As mentioned many times, REST
    APIs have to be designed to be stateless. Each request has to be self-contained
    to fulfill user requests without the knowledge of clients. If the primary service
    fails to transact, its various instances have to come to life to implement requests
    in time. Not just for service requests, but also for authenticating and authorizing
    users, stateless services need to be involved and invoked. Typically, user information
    gets stored on the server side so that the subsequent requests don''t need to
    go to the authentication service. However, this approach fails the scalability
    test, and hence, every request has to carry all the relevant information in order
    to be authenticated and authorized. This isn''t restricted to users—service-to-service
    authorization is also being facilitated through this approach.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态身份验证和授权**: 如多次提及，REST API必须设计为无状态的。每个请求都必须是自包含的，以便在没有客户端知识的情况下满足用户请求。如果主要服务无法进行交易，其各种实例必须及时启动以实现请求。这不仅适用于服务请求，也适用于用户身份验证和授权，无状态服务需要参与和调用。通常，用户信息存储在服务器端，以便后续请求不需要访问身份验证服务。然而，这种方法未能通过可扩展性测试，因此每个请求都必须携带所有相关信息，以便进行身份验证和授权。这不仅仅限于用户——服务到服务的授权也通过这种方法得到促进。'
- en: 'The expert recommendation is to use JWT with OAuth2 for user authentication.
    For service-to-service communication, it''s paramount to have the encrypted API
    key in the header component of the request message:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 专家建议使用JWT与OAuth2进行用户身份验证。对于服务到服务的通信，在请求消息的头部组件中具有加密的API密钥至关重要：
- en: '**Swagger for documentation**: API documentation is very important for developers
    to gain a deeper understanding of APIs and their unique capabilities. The accuracy
    of API documents is far more important for the envisioned success. Instead of
    using human resources to generate API documents, it''s easier and faster to employ
    automation techniques and tools to create API documents. APIs, along with the
    annotations and metadata, contribute to producing documents in an automated manner.
    Swagger is a widely-used tool for documenting REST APIs. The document generated
    contains the details regarding the usage of a specific API. It also provides the
    relevant details of the input and output information for a method in the API.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Swagger用于文档**: API文档对于开发者深入了解API及其独特功能非常重要。API文档的准确性对于预期的成功至关重要。与其使用人力资源生成API文档，不如使用自动化技术和工具来创建API文档更简单、更快。API、注释和元数据共同促进了文档的自动化生成。Swagger是广泛使用的用于记录REST
    API的工具。生成的文档包含有关特定API使用的详细信息。它还提供了API中方法输入和输出信息的相关细节。'
- en: '**HTTP status codes**: There are many articles and blogs in the web that table
    HTTP status codes. These help clients to understand the real situation facing
    servers. That is, when a client request reaches server-side services, the server
    will generate a litany of responses back to the client. There may be a failure
    or success. The status codes sheds some light on what happened at the server side.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HTTP状态码**: 网上有很多文章和博客列出了HTTP状态码。这些帮助客户端了解服务器面临的实际情况。也就是说，当客户端请求到达服务器端服务时，服务器将向客户端生成一系列响应。可能会有失败或成功。状态码提供了一些关于服务器端发生情况的线索。'
- en: '**HATEOAS**: Each HTTP `GET` request has to supply all the information in the
    response message. These details help to find the various resources related directly
    to the requested object through hyperlinks, which are embedded in the response.
    Also, it has to have all the details that describe the pertinent operations being
    made available on each of those resources. This is termed HATEOAS. HATEOAS simplifies
    the navigation through a resource and its available actions. This facilitates
    clients interaction with an application for different actions. All the metadata
    is getting embedded in responses from the server.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**HATEOAS**: 每个HTTP `GET`请求都必须提供响应消息中的所有信息。这些详细信息有助于通过嵌入在响应中的超链接找到与请求对象直接相关的各种资源。此外，它还必须包含描述在每个资源上可用的相关操作的详细信息。这被称为HATEOAS。HATEOAS简化了通过资源及其可用操作的导航。这促进了客户端与应用程序进行不同操作的交互。所有元数据都嵌入在服务器的响应中。'
- en: We have discussed most of the API design patterns, which are sourced from multiple
    sources, such as blogs written by experienced practitioners. There are design
    patterns, best practices, metrics, and other knowledge guides for risk-free and
    rewarding experiences in relation to application, service, device, middleware,
    and database APIs.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了大多数API设计模式，这些模式来源于多个来源，例如经验丰富的从业者撰写的博客。有关应用、服务、设备、中间件和数据库API的风险免费和有价值的体验，有设计模式、最佳实践、指标和其他知识指南。
- en: API security design patterns
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API安全设计模式
- en: 'API security is essential. If there''s any manipulation allowed on APIs, the
    results may be catastrophic. Here''s an article that enumerates all the things
    an API developer has to minutely make in order to arrive at impenetrable and unbreakable
    APIs: [https://dzone.com/articles/top-5-rest-api-security-guidelines](https://dzone.com/articles/top-5-rest-api-security-guidelines).
    First, the identification and authentication are being performed in order to empower
    users to access RESTful APIs. Next in line is none other than authorization. The
    RESTful API design has to be done in such a way that it''s possible to establish
    and enforce authorization rights. Also, bringing the correct changes into authorization
    policies/rules also has to be part of the API design. The rights-based access
    of resources has to be made mandatory.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: API安全至关重要。如果允许对API进行任何操作，结果可能是灾难性的。以下是一篇文章，列举了API开发者必须细致入微地做的事情，以便达到无法渗透和无法破解的API：[https://dzone.com/articles/top-5-rest-api-security-guidelines](https://dzone.com/articles/top-5-rest-api-security-guidelines)。首先，正在进行身份验证和认证，以便用户能够访问RESTful
    API。接下来是授权。RESTful API设计必须以这种方式进行，以便可以建立和执行授权权利。此外，将正确的更改引入授权策略/规则也必须是API设计的一部分。必须强制执行基于权利的资源访问。
- en: It's API designer/developer responsibility to ensure the design is mandating
    the API key or session token validation for the specific resource collection and
    action. For an example, if there is an API exposed for a book, then allowing any
    user to delete the entries is not prudent.. But it's OK to allow anyone to get
    a book catalogue entry. Further down the line, the session token or API key has
    to be embedded in the message body or sent as a cookie to diligently protect privileged
    collections or actions from any unauthorized use.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 确保设计要求对特定资源集合和操作进行API密钥或会话令牌验证是API设计者/开发者的责任。例如，如果有一个针对书籍的API，那么允许任何用户删除条目是不明智的。但是，允许任何人获取书籍目录条目是可以接受的。进一步来说，会话令牌或API密钥必须嵌入到消息体中或作为cookie发送，以仔细保护特权集合或操作免受未经授权的使用。
- en: Whitelist allowable methods
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 白名单允许的方法
- en: 'We all know that REST services allow multiple methods for performing different
    operations on a resource. To avoid any kind of conflicts, RESTful services have
    to be developed and deployed to ensure that only correct methods are accepted
    for processing. Other methods automatically are made to get an appropriate error
    message. The key security attacks are detailed as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道REST服务允许对资源执行多种操作的方法。为了避免任何冲突，RESTful服务必须开发和部署，以确保只接受正确的处理方法。其他方法会自动返回适当的错误消息。关键的安全攻击如下详细说明：
- en: '**Cross-site request forgery**: Resources are being exposed by REST services
    to the outside, along with a well-designed API. It is crucial to protect `PUT`,
    `POST`, and `DELETE` request **cross-site request forgery** (**CSRF**). The standard
    protection approach is to use one of the token-based approaches. If there''s any
    **cross-site scripting** (**XSS**) in our application, CSRF can still be easily
    done even if we use random tokens, hence, experts recommend leveraging viable
    mechanisms to prevent XSS.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**：REST服务向外部公开资源，以及一个精心设计的API。保护`PUT`、`POST`和`DELETE`请求的**跨站请求伪造**（**CSRF**）至关重要。标准的保护方法是使用基于令牌的方法之一。如果我们的应用程序中存在任何**跨站脚本**（**XSS**），即使我们使用随机令牌，CSRF仍然可以轻易完成，因此，专家建议利用可行的机制来防止XSS。'
- en: '**Input validation**: We execute validation both on the client and the server
    side. The client- and server-side script languages have innate capabilities to
    properly validate requests and responses. If there''s an incorrect user input,
    it''s better to reject that. Also, it''s better to log input validation failures.
    If there are more failed input validations, the option to consider is rate limiting
    the API.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**输入验证**：我们在客户端和服务器端都执行验证。客户端和服务器端的脚本语言具有验证请求和响应的内在能力。如果存在不正确的用户输入，最好拒绝它。此外，记录输入验证失败也是更好的做法。如果有更多的输入验证失败，可以考虑对
    API 进行速率限制。'
- en: '**URL validations**: It''s possible for attackers to tamper with any part of
    an HTTP request to break into the employed security methods. The key parts making
    up an HTTP request include the URL, query string, headers, cookies, form, and
    hidden fields.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL 验证**：攻击者可能篡改 HTTP 请求的任何部分以破坏所采用的安全方法。构成 HTTP 请求的关键部分包括 URL、查询字符串、头、cookie、表单和隐藏字段。'
- en: '**Secure parsing**: All incoming messages have to be systematically parsed
    for any security violations. It''s true that REST can accept messages being framed
    through multiple mechanisms, including XML and JSON.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全解析**：所有传入的消息都必须系统地解析以检查任何安全违规行为。确实，REST 可以接受通过多种机制（包括 XML 和 JSON）封装的消息。'
- en: '**Validate incoming content types**: When we use the `POST` and `PUT` methods
    for submitting new data, the client is expected to clearly specify the content-type
    (such as XML or Java).'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证传入的内容类型**：当我们使用 `POST` 和 `PUT` 方法提交新数据时，客户端应明确指定内容类型（如 XML 或 Java）。'
- en: '**The servers never assume the content type**: Servers always have to verify
    whether the content type and the content are the same. If they don''t match, an
    appropriate error message has to be communicated back.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器永不假设内容类型**：服务器始终需要验证内容类型和内容是否相同。如果它们不匹配，必须返回适当的错误消息。'
- en: '**Validate response types**: This is another validation. REST services allow
    multiple response types and, hence, the client has to articulate the preferred
    order of response types in the Accept header, which is part of the request message.
    Also, there are many MIME types for the typical response types, so clients have
    to specify which MIME types should be used in the reply message.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证响应类型**：这是另一种验证。REST 服务允许多种响应类型，因此客户端必须在请求消息的 Accept 标头中明确说明响应类型的首选顺序。此外，对于典型的响应类型有许多
    MIME 类型，因此客户端必须指定在回复消息中应使用哪些 MIME 类型。'
- en: '**XML input validation**: There are XML-specific attacks (XML External Entity
    and XML signature wrapping) and hence, XML-based services have to securely parse
    XML messages to be protected against attacks.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML 输入验证**：存在针对 XML 的特定攻击（如 XML 外部实体和 XML 签名包装），因此基于 XML 的服务必须安全地解析 XML 消息以防止攻击。'
- en: '**Security headers**: To correctly interpret server messages, the server has
    to embed the content-type header with the correct content type.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全头**：为了正确解释服务器消息，服务器必须将正确的内容类型嵌入到内容类型头中。'
- en: '**XML encoding**: XML messages should be constructed using an XML serializer.
    Then, only the XML content can be parsed by the browser and be devoid of any XML
    injection errors.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**XML 编码**：应使用 XML 序列化器构建 XML 消息。然后，只有浏览器可以解析 XML 内容，并且不会出现任何 XML 注入错误。'
- en: '**Cryptography**: When data is getting transmitted, it gets encrypted. That
    is, the **transport-level security** (**TLS**) has to be enabled. TLS is important
    when credentials, updates, deletions, and any other value-added information get
    transmitted across. Even experts recommend using mutually-authenticated client-side
    certificates to guarantee the utmost security to RESTful web services. Similarly,
    when data gets persisted, the data has to be encrypted, and when data is being
    used by any application, appropriate security measures have to be in place.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**加密**：当数据正在传输时，它会被加密。也就是说，必须启用传输层安全（**TLS**）。当凭证、更新、删除以及其他增值信息传输时，TLS 非常重要。即使是专家也推荐使用相互认证的客户端证书来确保
    RESTful 网络服务的最高安全性。同样，当数据被持久化时，数据必须被加密，当任何应用程序使用数据时，必须采取适当的安全措施。'
- en: '**Message integrity**: Cryptography ensures confidentiality, but we need message
    integrity. That is, we leverage the message digest/hashing algorithms toward message
    integrity. A **JSON web token** (**JWT**) is a standardized, optionally validated,
    and/or encrypted container format. This is used to securely transfer information
    between two parties.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息完整性**：密码学确保了机密性，但我们还需要消息完整性。也就是说，我们利用消息摘要/哈希算法来实现消息完整性。**JSON Web Token（JWT**）是一种标准化的、可选验证的、加密的容器格式。它用于在双方之间安全地传输信息。'
- en: 'JWT defines the structure of the information that''s being communicated across
    the network and it comes in two forms: serialized and deserialized. The serialized
    form is used to transfer data through the network with each request and response.
    The deserialized form is used to read and write data to the token. JWT is useful
    for the following scenarios:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: JWT定义了在网络中传输的信息的结构，它有两种形式：序列化和反序列化。序列化形式用于通过网络在每个请求和响应中传输数据。反序列化形式用于读取和写入令牌中的数据。JWT在以下场景中很有用：
- en: '**Authorization: **JWT (Jason Web Tokens) enables logged in user to access
    routes, services and resources as the JWT tokens would be part of subsequent incoming
    requests (after the initial request), and JWT is a popular adoption for SSO (Single
    Sign On) implementations as well.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '**授权**：JWT（Jason Web Tokens）允许登录用户访问路由、服务和资源，因为JWT令牌将是后续传入请求（在初始请求之后）的一部分，JWT也是SSO（单点登录）实现的热门选择。'
- en: '**Information Exchange**: JWT is emerging as a way to securely transmit information
    across parties. JWTs can be signed using public and private keys, so it''s easy
    to understand who the senders are. Also, through message digest, it''s proved
    that the message wasn''t tampered with along the way.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '**信息交换**：JWT（JSON Web Tokens）正在成为一种在各方之间安全传输信息的方式。JWT可以使用公钥和私钥进行签名，因此很容易理解发送者是谁。此外，通过消息摘要，可以证明消息在传输过程中没有被篡改。'
- en: API security is an important phenomenon. There is a growing array of best practices
    and patterns for securing APIs. Collecting error logs comes in handy when visualizing
    any kind of security implications, In time, this is the surest way forward to
    guarantee fool-proof security for APIs being designed, published, and maintained.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: API安全性是一个重要的现象。有越来越多的最佳实践和模式用于保护API。在可视化任何类型的安全影响时，收集错误日志很有用。随着时间的推移，这是确保API设计、发布和维护无懈可击安全性的最可靠途径。
- en: In conclusion, developers should try to understand the prevailing context and
    the future. It's not easy to come out with a strategically sound API off the bat.
    APIs can make or mark the whole scenario if done with passion and discussion.
    API designers have to start thinking in terms of user perspectives. A robust design
    is a key factor in producing and sustaining state-of-the-art and multifaceted
    APIs. A poorly designed API may lead to failure or the customer may not be satisfied
    with the applications and services.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，开发者应该努力理解当前的环境和未来趋势。一开始就提出一个战略上可行的API并不容易。如果充满热情并经过讨论，API可以成就或标记整个场景。API设计者必须从用户的角度开始思考。稳健的设计是生产并维持最先进和多功能API的关键因素。设计不佳的API可能会导致失败，或者客户可能对应用程序和服务不满意。
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: The microservices architecture is the prime architectural pattern and style
    for producing multifaceted and enterprise-scale applications to be elegantly hosted
    and run on cloud environments (local and remote). Microservices are lightweight,
    simple to build and deploy, self-defined, fine-grained, and network accessible.
    They also follow the single functionality principle.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务架构是生产多功能和企业级应用程序的主要架构模式和风格，这些应用程序可以优雅地托管和运行在云环境中（本地和远程）。微服务轻量级、易于构建和部署、自我定义、细粒度，并且可网络访问。它们还遵循单一功能原则。
- en: Nowadays, everything that communicates over HTTP and uses JSON- or XML-formatted
    messages or the HTTP methods (`GET`, `POST`, `PUT`, or `DELETE`) gets called a
    RESTful API. RESTful APIs are easy to design and build. The seamless and spontaneous
    combination of microservices and RESTful APIs opens up fresh possibilities and
    opportunities. Hence, designing high-quality RESTful APIs acquires special significance
    in our increasingly connected and services-oriented world. This chapter provided
    the relevant patterns, best practices, and general guidelines to come up with
    top-quality RESTful APIs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，所有通过HTTP通信并使用JSON或XML格式消息或HTTP方法（`GET`、`POST`、`PUT`或`DELETE`）的都被称为RESTful
    API。RESTful API易于设计和构建。微服务和RESTful API的无缝和自发的结合开辟了新的可能性和机会。因此，在我们的日益互联和以服务为导向的世界中，设计高质量的RESTful
    API具有特殊的重要性。本章提供了相关模式、最佳实践和一般指南，以制定高质量的RESTful API。
- en: Further reading
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://www.packtpub.com/application-development/hands-restful-python-web-services-second-edition](https://www.packtpub.com/application-development/hands-restful-python-web-services-second-edition)'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/hands-restful-python-web-services-second-edition](https://www.packtpub.com/application-development/hands-restful-python-web-services-second-edition)'
- en: '[https://www.packtpub.com/application-development/building-restful-apis-go-video](https://www.packtpub.com/application-development/building-restful-apis-go-video)'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/building-restful-apis-go-video](https://www.packtpub.com/application-development/building-restful-apis-go-video)'
- en: '[https://www.packtpub.com/web-development/restful-web-services-scala](https://www.packtpub.com/web-development/restful-web-services-scala)'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/web-development/restful-web-services-scala](https://www.packtpub.com/web-development/restful-web-services-scala)'
