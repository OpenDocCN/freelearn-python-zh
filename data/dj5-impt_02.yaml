- en: <st c="0">2</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '2'
- en: <st c="2">Understanding the Project Structure and Creating Our First App</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目结构和创建我们的第一个应用
- en: <st c="64">Django projects contain a predefined structure with some key folders
    and files.</st> <st c="145">In this chapter, we will discuss the Django project
    structure and how some of those folders and files are used to configure our web
    applications.</st> <st c="291">Furthermore, Django projects are composed of one
    or more apps.</st> <st c="354">We will learn how to create a “home” app, composed
    of “home” and “about” sections, and how to register it inside our</st> <st c="471">Django
    project.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目包含一个预定义的结构，其中包含一些关键文件夹和文件。在本章中，我们将讨论Django项目结构以及如何使用这些文件夹和文件来配置我们的Web应用。此外，Django项目由一个或多个应用组成。我们将学习如何创建一个由“主页”和“关于”部分组成的“主页”应用，以及如何在我们的Django项目中注册它。
- en: <st c="486">In this chapter, we will cover the</st> <st c="522">following topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: <st c="539">Understanding the</st> <st c="558">project structure</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解项目结构
- en: <st c="575">Creating our</st> <st c="589">first app</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个应用
- en: <st c="598">Creating a</st> <st c="610">home page</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个主页
- en: <st c="619">Creating an</st> <st c="632">about page</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个关于页面
- en: <st c="642">With all of these topics completed, you will know how to create
    Django apps and</st> <st c="723">web pages.</st>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 完成所有这些主题后，您将了解如何创建Django应用和Web页面。
- en: <st c="733">Technical requirements</st>
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: <st c="756">In this chapter, we will be using Python 3.10+.</st> <st c="805">Additionally,
    we will be using the</st> **<st c="840">Visual Studio (VS) Code</st>** <st c="863">editor
    in this book, which you can download</st> <st c="908">from</st> [<st c="913">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="943">.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python 3.10+。此外，我们将在本书中使用**《Visual Studio (VS) Code》**编辑器，您可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载。
- en: <st c="944">The code for this chapter is located</st> <st c="982">at</st> [<st
    c="985">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter02/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter02/moviesstore)<st
    c="1093">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于[https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter02/moviesstore](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter02/moviesstore)。
- en: <st c="1094">The CiA video for this chapter can be found</st> <st c="1139">at</st>
    [<st c="1142">https://packt.link/rzU25</st>](https://packt.link/rzU25)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的CiA视频可以在[https://packt.link/rzU25](https://packt.link/rzU25)找到。
- en: <st c="1166">Understanding the project structure</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解项目结构
- en: <st c="1202">Let’s look at the</st> <st c="1220">project files that were created
    for us in</st> [*<st c="1263">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014)<st
    c="1272">, in the</st> *<st c="1281">Creating and running a Django project</st>*
    <st c="1318">section.</st> <st c="1328">Open the</st> `<st c="1337">moviesstore</st>`
    <st c="1348">project folder in VS Code.</st> <st c="1376">You will see the elements
    shown in</st> *<st c="1411">Figure 2</st>**<st c="1419">.1</st>*<st c="1421">:</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为我们创建的[第1章](B22457_01.xhtml#_idTextAnchor014)项目文件，在*《创建和运行Django项目》*部分。[图2.1.1](img/B22457_02_01.jpg)中展示了这些元素：
- en: '![Figure 2.1 – The MOVIESSTORE directory structure](img/B22457_02_01.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1.1 – MOVIESSTORE目录结构](img/B22457_02_01.jpg)'
- en: <st c="1455">Figure 2.1 – The MOVIESSTORE directory structure</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – MOVIESSTORE目录结构
- en: <st c="1503">Let’s learn about each of</st> <st c="1530">these elements.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解这些元素中的每一个。
- en: <st c="1545">The moviesstore folder</st>
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MOVIESSTORE文件夹
- en: <st c="1568">As you can</st> <st c="1580">see</st> <st c="1584">in</st> *<st
    c="1587">Figure 2</st>**<st c="1595">.1</st>*<st c="1597">, there is a folder
    with the same name as the folder we opened in VS Code originally –</st> `<st c="1684">moviesstore</st>`<st
    c="1695">. The</st> `<st c="1701">moviesstore</st>` <st c="1712">folder contains
    a set of files to configure the Django project.</st> *<st c="1777">Figure 2</st>**<st
    c="1785">.2</st>* <st c="1787">shows the content of the</st> `<st c="1813">moviesstore</st>`
    <st c="1824">folder:</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1568">正如您</st> <st c="1580">在</st> <st c="1584">*<st c="1587">图2</st>**<st
    c="1595">.1</st>*<st c="1597">中看到的，有一个文件夹与我们在VS Code中最初打开的文件夹同名 –</st> `<st c="1684">moviesstore</st>`<st
    c="1695">。 The</st> `<st c="1701">moviesstore</st>` <st c="1712">文件夹包含一组用于配置Django项目的文件。</st>
    *<st c="1777">图2</st>**<st c="1785">.2</st>* <st c="1787">显示了</st> `<st c="1813">moviesstore</st>`
    <st c="1824">文件夹的内容：</st>
- en: '![Figure 2.2 – The moviesstore folder content structure](img/B22457_02_02.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图2.2 – moviesstore文件夹内容结构](img/B22457_02_02.jpg)'
- en: <st c="1952">Figure 2.2 – The moviesstore folder content structure</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1952">图2.2 – moviesstore文件夹内容结构</st>
- en: <st c="2005">Let’s briefly look at</st> <st c="2027">all the</st> <st c="2035">elements
    under the</st> `<st c="2055">moviesstore</st>` <st c="2066">folder:</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2005">让我们简要地看看</st> <st c="2027">moviesstore</st> <st c="2035">文件夹下的所有</st>
    <st c="2055">元素：</st>
- en: '`<st c="2074">__pycache__</st>`<st c="2086">: This folder</st> <st c="2100">stores
    compiled bytecode when we generate our project.</st> <st c="2156">You can largely
    ignore this folder.</st> <st c="2192">Its purpose is to make your project start
    up a little faster by caching the compiled code, which can then be</st> <st c="2301">readily
    executed.</st>'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2074">__pycache__</st>`<st c="2086">: 这个文件夹</st> <st c="2100">在生成我们的项目时存储编译后的字节码。</st>
    <st c="2156">您可以基本上忽略这个文件夹。</st> <st c="2192">它的目的是通过缓存编译代码来使您的项目启动稍微快一点，这些代码可以</st>
    <st c="2301">被轻松执行。</st>'
- en: '`<st c="2318">__init__.py</st>`<st c="2330">: This file indicates to Python
    that this directory should be considered a Python package.</st> <st c="2422">We
    can ignore</st> <st c="2436">this file.</st>'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2318">__init__.py</st>`<st c="2330">: 这个文件指示Python将这个目录视为一个Python包。</st>
    <st c="2422">我们可以忽略</st> <st c="2436">这个文件。</st>'
- en: '`<st c="2446">asgi.py</st>`<st c="2454">: Django, being a web framework, needs
    a web server to operate.</st> <st c="2519">And since most web servers don’t natively
    speak Python, we need an interface to make that communication happen.</st> <st
    c="2631">Django currently supports two interfaces –</st> `<st c="2766">asgi.py</st>`
    <st c="2773">file contains an entry point for ASGI-compatible web servers to serve
    your</st> <st c="2849">project asynchronously.</st>'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2446">asgi.py</st>`<st c="2454">: Django作为一个Web框架，需要Web服务器来运行。</st>
    <st c="2519">由于大多数Web服务器本身不支持Python，我们需要一个接口来实现这种通信。</st> <st c="2631">Django目前支持两个接口
    –</st> `<st c="2766">asgi.py</st>` <st c="2773">文件包含一个入口点，用于ASGI兼容的Web服务器异步地为您</st>
    <st c="2849">项目提供服务。</st>'
- en: '`<st c="2872">settings.py</st>`<st c="2884">: The</st> `<st c="2891">settings.py</st>`
    <st c="2902">file is an important file that controls our project’s settings.</st>
    <st c="2967">It contains several properties; let’s analyze some</st> <st c="3018">of
    them:</st>'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="2872">settings.py</st>`<st c="2884">: The</st> `<st c="2891">settings.py</st>`
    <st c="2902">文件是一个重要的文件，它控制着我们的项目设置。</st> <st c="2967">它包含几个属性；让我们分析一些</st> <st
    c="3018">它们：</st>'
- en: '`<st c="3026">BASE_DIR</st>`<st c="3035">: Determines where on your machine
    the project</st> <st c="3083">is situated.</st>'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3026">BASE_DIR</st>`<st c="3035">: 确定项目</st> <st c="3083">在您的机器上的位置。</st>'
- en: '`<st c="3095">SECRET_KEY</st>`<st c="3106">: This is a secret key for a particular
    Django project.</st> <st c="3163">It is used to provide cryptographic signing
    and should be set to a unique, unpredictable value.</st> <st c="3259">In a production
    environment, it should be replaced with a securely</st> <st c="3326">generated
    key.</st>'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3095">SECRET_KEY</st>`<st c="3106">: 这是一个特定Django项目的密钥。</st> <st c="3163">它用于提供加密签名，应设置为唯一、不可预测的值。</st>
    <st c="3259">在生产环境中，它应该被一个安全</st> <st c="3326">生成的密钥所替换。</st>'
- en: '`<st c="3340">DEBUG</st>`<st c="3346">: Our site can run in debug mode or not.</st>
    <st c="3388">In debug mode, we get detailed information on errors, which is very
    useful when we develop our applications.</st> <st c="3497">For instance, if we
    try to run</st> `<st c="3528">http://localhost:8000/123</st>` <st c="3553">in
    the browser, we will see a</st> **<st c="3584">Page not found (404)</st>** <st
    c="3604">error (see</st> *<st c="3616">Figure 2.3</st>*<st c="3626">):</st>'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="3340">DEBUG</st>`<st c="3346">: 我们网站可以运行在调试模式或非调试模式。</st> <st c="3388">在调试模式下，我们可以获得有关错误的详细信息，这在开发我们的应用程序时非常有用。</st>
    <st c="3497">例如，如果我们尝试在浏览器中运行</st> `<st c="3528">http://localhost:8000/123</st>`
    <st c="3553">，我们将看到一个</st> **<st c="3584">页面未找到 (404)</st>** <st c="3604">错误（见</st>
    *<st c="3616">图 2.3</st>*<st c="3626">）：</st>'
- en: '![Figure 2.3 – Accessing an invalid application route](img/B22457_02_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.3 – 访问无效的应用程序路由](img/B22457_02_03.jpg)'
- en: <st c="4091">Figure 2.3 – Accessing an invalid application route</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4091">图 2.3 – 访问无效的应用程序路由</st>
- en: '`<st c="4142">INSTALLED_APPS</st>`<st c="4157">: This</st> <st c="4164">setting
    specifies the</st> <st c="4186">list of all Django applications that are enabled
    for this project.</st> <st c="4254">Each string in the list represents the Python
    path to a Django application.</st> <st c="4330">By default, Django includes several
    built-in applications, such as admin, auth, contenttypes, and sessions.</st> <st
    c="4438">We will see later in this chapter how to create our own applications
    and how to include them in</st> <st c="4534">this configuration.</st>'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4142">INSTALLED_APPS</st>`<st c="4157">: 这个</st> <st c="4164">设置指定了</st>
    <st c="4186">所有启用在此项目中的 Django 应用程序的列表。</st> <st c="4254">列表中的每个字符串都代表一个 Django
    应用的 Python 路径。</st> <st c="4330">默认情况下，Django 包含了几个内置应用程序，例如 admin、auth、contenttypes
    和 sessions。</st> <st c="4438">在本章的后面，我们将看到如何创建我们自己的应用程序以及如何将它们包含在这个配置中。</st>'
- en: '`<st c="4553">MIDDLEWARE</st>`<st c="4564">: Middleware in Django intercepts
    and manages the request and response processing flow.</st> <st c="4653">The listed
    middleware is provided by Django and handles various aspects of request/response
    processing, including security, session management, authentication,</st> <st c="4813">and
    more.</st>'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4553">MIDDLEWARE</st>`<st c="4564">: Django 中的中间件拦截并管理请求和响应处理流程。</st>
    <st c="4653">列出的中间件由 Django 提供，并处理请求/响应处理的各个方面，包括安全、会话管理、身份验证等。</st>'
- en: '`<st c="4822">ROOT_URLCONF</st>`<st c="4835">: Specifies the Python path to
    the root URL configuration for the</st> <st c="4902">Django project.</st>'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4822">ROOT_URLCONF</st>`<st c="4835">: 指定 Django 项目的根 URL 配置的 Python
    路径。</st>'
- en: '`<st c="4917">TEMPLATES</st>`<st c="4927">: Defines the configuration for Django’s
    template system.</st> <st c="4986">It includes information regarding the list
    of directories that the system should look in for template source files and other
    specific</st> <st c="5120">template settings.</st>'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="4917">TEMPLATES</st>`<st c="4927">: 定义 Django 模板系统的配置。</st> <st c="4986">它包括有关系统应查找模板源文件和其他特定</st>
    <st c="5120">模板设置的信息。</st>'
- en: <st c="5138">There are some other properties in</st> `<st c="5174">settings.py</st>`<st
    c="5185">, such as</st> `<st c="5195">DATABASES</st>`<st c="5204">,</st> `<st
    c="5206">LANGUAGE_CODE</st>`<st c="5219">, and</st> `<st c="5225">TIME_ZONE</st>`<st
    c="5234">, but we focused on the more important properties in the preceding list.</st>
    <st c="5307">We will later revisit this file and see how relevant it is when developing</st>
    <st c="5382">our site.</st>
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5138">在</st> `<st c="5174">settings.py</st>`<st c="5185">》中还有一些其他属性，例如</st>
    `<st c="5195">DATABASES</st>`<st c="5204">》、《st c="5206">LANGUAGE_CODE</st>`<st
    c="5219">》和`<st c="5225">TIME_ZONE</st>`<st c="5234">》，但我们专注于前面列表中更重要的属性。</st>
    <st c="5307">我们将在稍后重新访问此文件，并查看它在开发我们的网站时有多相关。</st>
- en: '`<st c="5391">urls.py</st>`<st c="5399">: This file contains the URL declarations
    for this Django project.</st> <st c="5467">It could link specific URL paths to
    functions, classes, or other URL files to generate a response, or to render a
    page in response to a browser or URL request.</st> <st c="5627">We will later
    add paths to this file and better understand how</st> <st c="5690">it works.</st>'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="5391">urls.py</st>`<st c="5399">: 此文件包含此 Django 项目的 URL 声明。</st> <st
    c="5467">它可以链接特定的 URL 路径到函数、类或其他 URL 文件以生成响应，或者根据浏览器或 URL 请求渲染页面。</st> <st c="5627">我们将在稍后添加路径到该文件，并更好地理解它是如何工作的。</st>'
- en: '`<st c="5699">wsgi.py</st>`<st c="5707">: This file contains an entry point
    for WSGI-compatible web servers to serve your project.</st> <st c="5799">By</st>
    <st c="5802">default, when we run the server with</st> <st c="5839">the</st> `<st
    c="5843">python manage.py runserver</st>` <st c="5869">command, it uses the</st>
    <st c="5891">WSGI configuration.</st>'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="5699">wsgi.py</st>`<st c="5707">：此文件包含一个 WSGI 兼容的 Web 服务器用于服务项目的入口点。</st>
    <st c="5799">默认情况下，当我们使用</st> <st c="5802">`python manage.py runserver`</st> <st
    c="5839">命令运行服务器时，它使用 WSGI 配置。</st>'
- en: <st c="5910">manage.py</st>
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5910">manage.py</st>
- en: <st c="5920">The</st> `<st c="5925">manage.py</st>` <st c="5934">file</st> <st
    c="5940">seen</st> <st c="5945">in</st> *<st c="5948">Figure 2</st>**<st c="5956">.1</st>*
    <st c="5958">and</st> *<st c="5963">Figure 2</st>**<st c="5971">.2</st>* <st c="5973">is
    a crucial element that we will extensively use throughout this book.</st> <st
    c="6046">This file provides a command-line utility that lets you interact with
    a Django project and perform some administrative operations.</st> <st c="6177">For
    example, we earlier ran the following command in</st> [*<st c="6230">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014)<st
    c="6239">, in the</st> *<st c="6248">Creating and running a Django</st>* *<st
    c="6278">project</st>* <st c="6285">section:</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5920">The</st> `<st c="5925">manage.py</st>` <st c="5934">file</st> <st
    c="5940">seen</st> <st c="5945">in</st> *<st c="5948">图 2.1</st>**<st c="5956">和</st>
    *<st c="5963">图 2.2</st>**<st c="5971">是本书中将广泛使用的关键元素。</st> <st c="6046">此文件提供了一种命令行工具，允许您与
    Django 项目交互并执行一些管理操作。</st> <st c="6177">例如，我们之前在</st> [*<st c="6230">第 1 章</st>*](B22457_01.xhtml#_idTextAnchor014)<st
    c="6239">的</st> *<st c="6248">创建和运行 Django</st>* *<st c="6278">项目</st>* <st c="6285">部分</st>中运行了以下命令：</st>
- en: '[PRE0]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="6321">The purpose of the command was to start the local web server.</st>
    <st c="6384">We will later illustrate more administrative</st> <st c="6428">functions,
    such as one to create</st> <st c="6461">a new app –</st> `<st c="6474">python</st>`
    `<st c="6481">manage.py startapp</st>`<st c="6499">.</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6321">该命令的目的是启动本地 Web 服务器。</st> <st c="6384">我们将稍后展示更多管理</st> <st c="6428">功能，例如创建新应用的一个命令
    –</st> `<st c="6474">python</st>` `<st c="6481">manage.py startapp</st>`<st c="6499">。</st>
- en: <st c="6500">db.sqlite3</st>
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6500">db.sqlite3</st>
- en: <st c="6511">The</st> `<st c="6516">db.sqlite3</st>` <st c="6526">file is the</st>
    <st c="6538">default SQLite database</st> <st c="6562">file that Django uses for
    development purposes.</st> `<st c="6840">db.sqlite3</st>` <st c="6850">file).</st>
    <st c="6858">We will not use this file for now; however, we will discuss it in</st>
    [*<st c="6924">Chapter 5</st>*](B22457_05.xhtml#_idTextAnchor088)<st c="6933">.</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6511">The</st> `<st c="6516">db.sqlite3</st>` <st c="6526">file is the</st>
    <st c="6538">default SQLite database</st> <st c="6562">file that Django uses for
    development purposes.</st> `<st c="6840">db.sqlite3</st>` <st c="6850">文件）。</st>
    <st c="6858">目前我们不会使用此文件；然而，我们将在</st> [*<st c="6924">第 5 章</st>*](B22457_05.xhtml#_idTextAnchor088)<st
    c="6933">中讨论它。</st>
- en: <st c="6934">We have learned about the Django project structure and some of
    its main elements.</st> <st c="7017">Now, let’s create our first</st> <st c="7045">Django
    app.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6934">我们已经了解了 Django 项目结构和其主要元素。</st> <st c="7017">现在，让我们创建我们的第一个</st>
    <st c="7045">Django 应用。</st>
- en: <st c="7056">Creating our first app</st>
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="7056">创建我们的第一个应用</st>
- en: <st c="7079">A</st> **<st c="7082">Django app</st>** <st c="7092">is a self-contained</st>
    <st c="7113">package of code that performs a specific functionality or serves
    a particular purpose within a</st> <st c="7208">Django project.</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7079">一个</st> **<st c="7082">Django 应用</st>** <st c="7092">是一个包含特定功能或服务于
    Django 项目中特定目的的自包含</st> <st c="7113">代码包。</st>
- en: <st c="7223">A single Django project can contain one or more apps that work
    together to power a web application.</st> <st c="7324">Django uses the concept
    of projects and apps to keep code clean</st> <st c="7388">and readable.</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7223">一个 Django 项目可以包含一个或多个应用，这些应用协同工作以支持一个 Web 应用程序。</st> <st c="7324">Django
    使用项目和应用的概念来保持代码整洁</st> <st c="7388">和可读性。</st>
- en: <st c="7401">For example, on a movie review site such as</st> *<st c="7446">Rotten
    Tomatoes</st>*<st c="7461">, as shown in</st> *<st c="7475">Figure 2</st>**<st
    c="7483">.4</st>*<st c="7485">, we can have an app for listing movies, an app
    for listing news, an app for payments, an app for user authentication, and</st>
    <st c="7608">so on:</st>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7401">例如，在一个电影评论网站如</st> *<st c="7446">烂番茄</st>*<st c="7461">上，如图</st>
    *<st c="7475">图 2</st>**<st c="7483">.4</st>**<st c="7485">所示，我们可以有一个用于列出电影的 app，一个用于列出新闻的
    app，一个用于支付的 app，一个用于用户认证的 app，等等：</st>
- en: '![Figure 2.4 – The Rotten Tomatoes website](img/B22457_02_04.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.4 – Rotten Tomatoes 网站](img/B22457_02_04.jpg)'
- en: <st c="7753">Figure 2.4 – The Rotten Tomatoes website</st>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9111">图 2.4 – Rotten Tomatoes 网站</st>
- en: <st c="7793">Apps in Django are like pieces of a website.</st> <st c="7839">You
    can create an entire website with one single app, but it is useful to break it
    up into different apps, each representing a</st> <st c="7966">clear function.</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7793">Django 中的应用就像网站的一部分。</st> <st c="7839">你可以用一个单一的应用创建整个网站，但将其拆分成不同的应用，每个应用代表一个</st>
    <st c="7966">明确的功能。</st>
- en: <st c="7981">Our</st> *<st c="7986">Movies Store</st>* <st c="7998">site will
    begin with one app.</st> <st c="8029">We will later add more as we progress.</st>
    <st c="8068">To add an app, in the Terminal, stop the server by pressing</st>
    *<st c="8128">Cmd</st>*<st c="8131">+</st> *<st c="8134">C</st>*<st c="8135">.
    Navigate to the top</st> `<st c="8157">moviesstore</st>` <st c="8168">folder (the
    one that contains the</st> `<st c="8203">manage.py</st>` <st c="8212">file) and
    run the following in</st> <st c="8244">the Terminal:</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7981">我们的</st> *<st c="7986">电影商店</st>* <st c="7998">网站将从一个应用开始。</st>
    <st c="8029">随着我们的进展，我们将添加更多。</st> <st c="8068">要添加应用，在终端中，通过按</st> *<st c="8128">Cmd</st>*<st
    c="8131">+</st> *<st c="8134">C</st>*<st c="8135">停止服务器。导航到顶级</st> `<st c="8157">moviesstore</st>`
    <st c="8168">文件夹（包含</st> `<st c="8203">manage.py</st>` <st c="8212">文件的文件夹）并在终端中运行以下命令：</st>
- en: <st c="8257">For macOS, run the</st> <st c="8277">following command:</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8257">对于 macOS，运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="8327">For Windows, run the</st> <st c="8349">following command:</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8327">对于 Windows，运行以下命令：</st>
- en: '[PRE2]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="8398">A new folder,</st> `<st c="8413">home</st>`<st c="8417">, will
    be added to the project (see</st> *<st c="8453">Figure 2</st>**<st c="8461">.5</st>*<st
    c="8463">).</st> <st c="8467">As we progress in the book, we will explain</st>
    <st c="8511">the files that are inside</st> <st c="8537">the folder.</st>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8398">将在项目中添加一个新的文件夹，</st> `<st c="8413">home</st>`<st c="8417">（见</st>
    *<st c="8453">图 2</st>**<st c="8461">.5</st>*<st c="8463">）。</st> <st c="8467">随着我们在本书中的进展，我们将解释</st>
    <st c="8511">文件夹内的文件。</st>
- en: '![Figure 2.5 – The MOVIESSTORE project structure containing the home app](img/B22457_02_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图 2.5 – 包含主页应用的 MOVIESSTORE 项目结构](img/B22457_02_05.jpg)'
- en: <st c="8683">Figure 2.5 – The MOVIESSTORE project structure containing the home
    app</st>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8683">图 2.5 – 包含主页应用的 MOVIESSTORE 项目结构</st>
- en: <st c="8753">Although our new</st> `<st c="8771">home</st>` <st c="8775">app
    exists in our Django project, Django doesn’t recognize it till we explicitly add
    it.</st> <st c="8865">To do so, we need to specify it in</st> `<st c="8900">settings.py</st>`<st
    c="8911">. So, go to</st> `<st c="8923">/moviesstore/settings.py</st>`<st c="8947">,
    under</st> `<st c="8955">INSTALLED_APPS</st>`<st c="8969">, and you will see six
    built-in apps</st> <st c="9006">already there.</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8753">尽管我们的新</st> `<st c="8771">主页</st>` <st c="8775">应用存在于我们的 Django
    项目中，但 Django 不会识别它，直到我们明确添加它。</st> <st c="8865">为此，我们需要在</st> `<st c="8900">settings.py</st>`<st
    c="8911">中指定它。所以，前往</st> `<st c="8923">/moviesstore/settings.py</st>`<st c="8947">，在</st>
    `<st c="8955">INSTALLED_APPS</st>`<st c="8969">下，你会看到已经存在六个内置应用</st> <st c="9006">。</st>
- en: <st c="9020">Add the app name, as highlighted in the following (this should
    be done whenever a new app</st> <st c="9111">is created):</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9020">添加应用名称，如下所示高亮显示（每次创建新应用时都应这样做）：</st>
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="9317">We have successfully</st> <st c="9339">created our first app and
    included it in our Django settings project.</st> <st c="9409">Now, we are going
    to create and serve two pages inside</st> <st c="9464">this app.</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9317">我们已经成功</st> <st c="9339">创建了我们的第一个应用，并将其包含在我们的 Django 设置项目中。</st>
    <st c="9409">现在，我们将在该应用内部创建和提供两个页面。</st>
- en: <st c="9473">Creating a home page</st>
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="9473">创建主页</st>
- en: <st c="9494">Creating a simple</st> <st c="9512">page or section in Django usually
    involves</st> <st c="9556">three steps:</st>
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9494">在 Django 中创建一个简单的</st> <st c="9512">页面或部分通常涉及</st> <st c="9556">三个步骤：</st>
- en: <st c="9568">Configure</st> <st c="9579">a URL.</st>
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9568">配置</st> <st c="9579">一个 URL。</st>
- en: <st c="9585">Define a view function</st> <st c="9609">or class.</st>
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9585">定义一个视图函数</st> <st c="9609">或类。</st>
- en: <st c="9618">Create</st> <st c="9626">a template.</st>
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="9618">创建</st> <st c="9626">一个模板。</st>
- en: <st c="9637">Let’s see how to apply those steps to create a simple “home” page
    that will display a “welcome” message to</st> <st c="9744">the</st> <st c="9749">final
    user.</st>
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9637">让我们看看如何应用这些步骤来创建一个简单的“主页”，它将向</st> <st c="9744">最终用户</st> <st c="9749">显示“欢迎”信息。</st>
- en: <st c="9760">Configuring an URL</st>
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="9760">配置 URL</st>
- en: '**<st c="9779">Django URLs</st>** <st c="9791">(</st>**<st c="9793">Uniform
    Resource Locators</st>**<st c="9818">) are</st> <st c="9824">patterns used to
    map incoming HTTP requests to</st> <st c="9871">the appropriate view functions
    or classes that handle those requests.</st> <st c="9942">They define the routing
    mechanism for your Django project, specifying which views should be called for</st>
    <st c="10045">different URLs.</st>'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="9779">Django URL</st>** <st c="9791">(**<st c="9793">统一资源定位符</st>**)是用于将传入的HTTP请求映射到处理这些请求的适当视图函数或类的模式。</st>
    <st c="9824">它们定义了Django项目的路由机制，指定了不同URL应调用哪些视图。</st> <st c="9942">它们定义了Django项目的路由机制，指定了不同URL应调用哪些视图。</st>'
- en: <st c="10060">There is a main URL configuration file located at</st> `<st c="10111">/moviesstore/urls.py</st>`
    <st c="10131">that currently has the</st> <st c="10155">following code:</st>
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10060">位于</st> `<st c="10111">/moviesstore/urls.py</st>` <st c="10131">的主URL配置文件目前包含以下代码：</st>
    <st c="10155">以下代码：</st>
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="10284">When a user types a URL (related to our Django application) in
    the browser, a request first passes through the</st> `<st c="10396">/moviesstore/urls.py</st>`
    <st c="10416">file, and it will try to match a</st> `<st c="10450">path</st>`
    <st c="10454">object in</st> `<st c="10465">urlpatterns</st>` <st c="10476">–
    for example, if a user enters</st> `<st c="10509">http://localhost:8000/admin</st>`
    <st c="10536">into the browser, the URL will match the</st> `<st c="10578">admin/</st>`
    <st c="10584">path.</st> <st c="10591">The server will then respond with the Django
    admin page (as shown in</st> *<st c="10660">Figure 2</st>**<st c="10668">.6</st>*<st
    c="10670">), which we will</st> <st c="10688">explore later:</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10284">当用户在浏览器中输入URL（与我们的Django应用相关）时，请求首先通过</st> `<st c="10396">/moviesstore/urls.py</st>`
    <st c="10416">文件，它将尝试匹配</st> `<st c="10450">path</st>` <st c="10454">对象在</st>
    `<st c="10465">urlpatterns</st>` <st c="10476">中 – 例如，如果用户在浏览器中输入</st> `<st c="10509">http://localhost:8000/admin</st>`
    <st c="10536">，URL将匹配</st> `<st c="10578">admin/</st>` <st c="10584">路径。</st>
    <st c="10591">服务器将随后响应Django管理页面（如图**<st c="10660">图2</st>**<st c="10668">.6**<st
    c="10670">所示），我们将在稍后探讨：</st>
- en: '![Figure 2.6 – The /admin route – the admin page](img/B22457_02_06.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图2.6 – /admin路由 – 管理页面](img/B22457_02_06.jpg)'
- en: <st c="10799">Figure 2.6 – The /admin route – the admin page</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10799">图2.6 – /admin路由 – 管理页面</st>
- en: <st c="10845">Conversely, if a user enters</st> `<st c="10875">localhost:8000/hello</st>`<st
    c="10895">, Django will return a</st> `<st c="10918">404 not found</st>` <st c="10931">page
    because</st> <st c="10945">there aren’t any matching paths</st> <st c="10976">in
    the URL</st> <st c="10988">configuration file.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10845">相反，如果用户输入</st> `<st c="10875">localhost:8000/hello</st>`<st c="10895">，Django将返回一个</st>
    `<st c="10918">404 not found</st>` <st c="10931">页面，因为</st> <st c="10945">URL配置文件中没有匹配的路径</st>
    <st c="10976">。</st>
- en: <st c="11007">Creating a path for the home page</st>
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="11007">创建主页的路径</st>
- en: <st c="11041">There are two</st> <st c="11056">ways to create a custom path
    for</st> <st c="11089">a page:</st>
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11041">创建页面自定义路径有两种方法：</st> <st c="11056">以下方法：</st>
- en: <st c="11096">Create the path in the project-level URL file (</st><st c="11144">in</st>
    `<st c="11148">/moviesstore/urls.py</st>`<st c="11168">)</st>
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11096">在项目级别的URL文件中创建路径（</st><st c="11144">在</st> `<st c="11148">/moviesstore/urls.py</st>`<st
    c="11168">）</st>
- en: <st c="11170">Create the path in a</st> `<st c="11191">urls.py</st>` <st c="11198">file,
    defined at the app level (</st><st c="11231">in</st> `<st c="11235">/home/urls.py</st>`<st
    c="11248">).</st>
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11170">在应用级别的</st> `<st c="11191">urls.py</st>` <st c="11198">文件中创建路径，该文件定义在应用级别（</st><st
    c="11231">在</st> `<st c="11235">/home/urls.py</st>`<st c="11248">）</st>
- en: <st c="11251">We will use the second option in this book, since it allows us
    to keep our URLs separate</st> <st c="11341">and organized.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11251">本书中我们将使用第二种选项，因为它允许我们保持URL的分离和有序。</st> <st c="11341">。</st>
- en: <st c="11355">In</st> `<st c="11359">/home/</st>`<st c="11365">, create a new
    file called</st> `<st c="11392">urls.py</st>`<st c="11399">. This file will contain
    the path relating to the URLs of the home app.</st> <st c="11471">For now, fill
    it in with</st> <st c="11496">the following:</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11355">在</st> `<st c="11359">/home/</st>`<st c="11365">中，创建一个名为</st>
    `<st c="11392">urls.py</st>`<st c="11399">的新文件。此文件将包含与主页应用URL相关的路径。</st> <st c="11471">目前，请用以下内容填充它：</st>
    <st c="11496">以下内容：</st>
- en: '[PRE5]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="11619">Let’s explain the</st> <st c="11638">previous code:</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11619">让我们解释一下</st> `<st c="11638">之前的代码：</st>
- en: <st c="11652">We import the</st> `<st c="11667">path</st>` <st c="11671">function,
    which is used to define URL patterns</st> <st c="11719">in Django.</st>
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11652">我们导入</st> `<st c="11667">path</st>` <st c="11671">函数，该函数用于在Django中定义URL模式</st>
    <st c="11719">。</st>
- en: <st c="11729">We import the</st> `<st c="11744">views</st>` <st c="11749">file.</st>
    <st c="11756">In the next section, we will implement an</st> `<st c="11798">index</st>`
    <st c="11803">function inside the</st> `<st c="11824">views</st>` <st c="11829">file.</st>
    <st c="11836">That function will render a template that contains a “</st><st c="11890">welcome”
    message.</st>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11729">我们导入</st> `<st c="11744">views</st>` <st c="11749">文件。</st> <st
    c="11756">在下一节中，我们将在</st> `<st c="11798">views</st>` <st c="11829">文件中实现一个</st>
    `<st c="11824">index</st>` <st c="11829">函数。</st> <st c="11836">该函数将渲染一个包含“</st><st
    c="11890">欢迎”消息的模板。</st>
- en: <st c="11908">We define the</st> `<st c="11923">urlpatterns</st>` <st c="11934">for
    the home app.</st> <st c="11953">In this case, inside the</st> `<st c="11978">urlpatterns</st>`
    <st c="11989">list, we add a new path object with</st> <st c="12026">three arguments:</st>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="11908">我们定义了</st> `<st c="11923">urlpatterns</st>` <st c="11934">的 home
    应用。</st> <st c="11953">在这种情况下，在</st> `<st c="11978">urlpatterns</st>` <st c="11989">列表中，我们添加了一个带有</st>
    <st c="12026">三个参数</st> 的新路径对象：
- en: <st c="12042">The first argument,</st> `<st c="12063">''</st>`<st c="12065">,
    represents the URL pattern itself.</st> <st c="12102">In this case, it’s an empty
    string, indicating the root URL.</st> <st c="12163">This means that when the root
    URL of the application is accessed (</st>`<st c="12229">localhost:8000/</st>`<st
    c="12245">), it will match</st> <st c="12263">this path.</st>
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12042">第一个参数,</st> `<st c="12063">''</st>`<st c="12065">, 代表 URL 模式本身。</st>
    <st c="12102">在这种情况下，它是一个空字符串，表示根 URL。</st> <st c="12163">这意味着当访问应用程序的根 URL（</st>`<st
    c="12229">localhost:8000/</st>`<st c="12245">）时，它将匹配</st> <st c="12263">此路径。</st>
- en: <st c="12273">The second argument,</st> `<st c="12295">views.index</st>`<st
    c="12306">, refers to the view function that will handle the HTTP request.</st>
    <st c="12371">Here,</st> `<st c="12377">views.index</st>` <st c="12388">indicates
    that the</st> `<st c="12408">index</st>` <st c="12413">function in the</st> `<st
    c="12430">views</st>` <st c="12435">file is responsible for processing</st> <st
    c="12471">the request.</st>
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12273">第二个参数,</st> `<st c="12295">views.index</st>`<st c="12306">, 指的是将处理
    HTTP 请求的视图函数。</st> <st c="12371">在这里，</st> `<st c="12377">views.index</st>` <st
    c="12388">表示</st> `<st c="12408">index</st>` <st c="12413">函数位于</st> `<st c="12430">views</st>`
    <st c="12435">文件中，负责处理</st> <st c="12471">请求。</st>
- en: <st c="12483">The third argument,</st> `<st c="12504">name='home.index'</st>`<st
    c="12521">, is the name of the URL pattern.</st> <st c="12555">This name is used
    to uniquely identify the URL pattern and can be referenced in</st> <st c="12635">other
    parts of the Django project, such as templates or other</st> <st c="12697">URL
    patterns.</st>
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="12483">第三个参数,</st> `<st c="12504">name='home.index'</st>`<st c="12521">,
    是 URL 模式的名称。</st> <st c="12555">此名称用于唯一标识 URL 模式，并可以在</st> <st c="12635">Django
    项目的其他部分中引用，例如模板或其他</st> <st c="12697">URL 模式。</st>
- en: <st c="12710">Now, let’s proceed to define the</st> `<st c="12744">views.index</st>`
    <st c="12755">function code.</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12710">现在，让我们继续定义</st> `<st c="12744">views.index</st>` <st c="12755">函数代码。</st>
- en: <st c="12770">Defining a view function</st>
  id: totrans-94
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="12770">定义视图函数</st>
- en: '**<st c="12795">Django views</st>** <st c="12808">are Python</st> <st c="12820">functions
    or classes that receive web requests and return web responses.</st> <st c="12893">They
    contain the logic to process HTTP requests and generate appropriate HTTP responses,
    typically in the form of HTML content to be rendered in the user’s</st> <st c="13049">web
    browser.</st>'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="12795">Django 视图</st>** <st c="12808">是 Python</st> <st c="12820">函数或类，它们接收网络请求并返回网络响应。</st>
    <st c="12893">它们包含处理 HTTP 请求并生成适当 HTTP 响应的逻辑，通常是用于在用户</st> <st c="13049">的网页浏览器中渲染的
    HTML 内容。</st>'
- en: <st c="13061">Our home app already includes a</st> `<st c="13094">views.py</st>`
    <st c="13102">file; let’s take advantage of it and make a simple modification.</st>
    <st c="13168">In</st> `<st c="13171">/home/views.py</st>`<st c="13185">, add the
    following</st> <st c="13205">in</st> **<st c="13208">bold</st>**<st c="13212">:</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13061">我们的 home 应用已经包含一个</st> `<st c="13094">views.py</st>` <st c="13102">文件；让我们利用它并做一些简单的修改。</st>
    <st c="13168">在</st> `<st c="13171">/home/views.py</st>`<st c="13185">中，添加以下</st>
    <st c="13205">在</st> **<st c="13208">粗体</st>**<st c="13212">中：</st>
- en: '[PRE6]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="13312">Let’s explain the</st> <st c="13331">previous code:</st>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13312">让我们解释一下</st> <st c="13331">之前的代码：</st>
- en: <st c="13345">By default, the</st> `<st c="13362">views</st>` <st c="13367">file
    imports the</st> `<st c="13385">render</st>` <st c="13391">function, which is
    used to render templates and return an HTTP response with the</st> <st c="13473">rendered
    content.</st>
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="13345">默认情况下，</st> `<st c="13362">views</st>` <st c="13367">文件导入</st>
    `<st c="13385">render</st>` <st c="13391">函数，该函数用于渲染模板并返回包含</st> `<st c="13473">渲染内容</st>`
    的 HTTP 响应。
- en: <st c="13490">We define an</st> `<st c="13504">index</st>` <st c="13509">function.</st>
    <st c="13520">This function takes one parameter,</st> `<st c="13555">request</st>`<st
    c="13562">, which represents the HTTP request received by</st> <st c="13610">the
    server.</st>
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义一个`<index>`函数。该函数接受一个参数，`<request>`，它代表服务器接收到的HTTP请求。
- en: <st c="13621">Finally, the</st> `<st c="13635">index</st>` <st c="13640">function
    returns a rendered template.</st> <st c="13679">The</st> `<st c="13683">render</st>`
    <st c="13689">function takes the</st> `<st c="13709">request</st>` <st c="13716">as
    the first argument, and the second argument (</st>`<st c="13765">'home/index.html'</st>`<st
    c="13783">) represents the path to the template file to be rendered.</st> <st
    c="13843">In the next section, we will create</st> <st c="13879">that template.</st>
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，`<index>`函数返回一个渲染的模板。`<render>`函数将`<request>`作为第一个参数，第二个参数（`<'home/index.html'>`）表示要渲染的模板文件的路径。在下一节中，我们将创建该模板。
- en: <st c="13893">We have now connected the</st> `<st c="13920">''</st>` <st c="13922">path
    with the proper</st> `<st c="13944">views.index</st>` <st c="13955">function,
    but we are missing the</st> <st c="13988">connection between the</st> `<st c="14012">views.index</st>`
    <st c="14023">function and the</st> `<st c="14041">'home/index.html'</st>` <st
    c="14058">template.</st> <st c="14069">So, let’s implement</st> <st c="14089">the
    template.</st>
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经将`''`路径与适当的`<views.index>`函数连接起来，但我们缺少`<views.index>`函数和`<home/index.html>`模板之间的连接。所以，让我们实现模板。
- en: <st c="14102">Creating a template</st>
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建一个模板
- en: '**<st c="14122">Django templates</st>** <st c="14139">are text</st> <st c="14149">files
    containing HTML, along with</st> **<st c="14183">Django template language</st>**
    <st c="14207">(</st>**<st c="14209">DTL</st>**<st c="14212">) syntax, which describes
    the structure of a web page.</st> <st c="14268">Django templates allow you to
    dynamically generate HTML content by inserting variables, loops, conditionals,
    and other logic into the</st> <st c="14402">HTML markup.</st>'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Django模板**是包含HTML和**Django模板语言**（**DTL**）语法的文本文件，它描述了网页的结构。Django模板允许你通过在HTML标记中插入变量、循环、条件和其他逻辑来动态生成HTML内容。'
- en: <st c="14414">Our “home” app doesn’t include a location to store templates,
    so let’s create it.</st> <st c="14497">In</st> `<st c="14500">/home/</st>`<st
    c="14506">, create a</st> `<st c="14517">templates</st>` <st c="14526">folder.</st>
    <st c="14535">Then, in</st> `<st c="14544">/home/templates/</st>`<st c="14560">,
    create a</st> `<st c="14571">home</st>` <st c="14575">folder.</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的“主页”应用不包括存储模板的位置，所以让我们创建它。在`<home>`中，创建一个`<templates>`文件夹。然后，在`<home/templates>`中，创建一个`<home>`文件夹。
- en: <st c="14583">Now, in</st> `<st c="14592">/home/templates/home/</st>`<st c="14613">,
    create a</st> <st c="14624">new file,</st> `<st c="14634">index.html</st>`<st
    c="14644">. This will be the full HTML page for the “home” page.</st> <st c="14699">For
    now, fill it in with</st> <st c="14724">the following:</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`<home/templates/home>`中，创建一个新文件，`<index.html>`。这将是我们“主页”的完整HTML页面。目前，用以下内容填充它：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="14858">This file contains a simple HTML code with a “</st><st c="14905">welcome”
    message.</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 该文件包含一个简单的HTML代码，带有“欢迎”消息。
- en: <st c="14923">Note</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: <st c="14928">We suggest storing your app templates under the next directory
    structure –</st> `<st c="15004">app_name/templates/app_name/my_template.html</st>`<st
    c="15048">. Sometimes, different apps can contain templates with the same name,
    which could lead to potential name conflicts in template resolution.</st> <st
    c="15187">By using the previous strategy, you can define templates with the same
    name in different Django apps without any potential</st> <st c="15310">name conflict.</st>
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14928">我们建议将您的应用程序模板存储在以下目录结构下</st> – `<st c="15004">app_name/templates/app_name/my_template.html</st>`<st
    c="15048">。有时，不同的应用程序可能包含具有相同名称的模板，这可能导致模板解析中的潜在名称冲突。</st> <st c="15187">通过使用之前的策略，您可以在不同的Django应用程序中定义具有相同名称的模板，而不会出现任何潜在的</st>
    <st c="15310">名称冲突。</st>
- en: <st c="15324">We have completed the connection between the URL, view function,
    and template.</st> <st c="15404">However, Django</st> <st c="15420">doesn’t know
    how to use our</st> `<st c="15448">/home/urls.py</st>` <st c="15461">file.</st>
    <st c="15468">So, let’s connect this file to our main URL configuration file,
    and then we will have completed</st> <st c="15564">the puzzle.</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15324">我们已经完成了URL、视图函数和模板之间的连接。</st> <st c="15404">然而，Django</st> <st
    c="15420">不知道如何使用我们的</st> `<st c="15448">/home/urls.py</st>` <st c="15461">文件。</st>
    <st c="15468">所以，让我们将此文件连接到我们的主要URL配置文件，然后我们将完成</st> <st c="15564">拼图。</st>
- en: <st c="15575">Connecting a project-level URL file with an app-level URL file</st>
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="15575">将项目级URL文件与应用程序级URL文件连接</st>
- en: <st c="15638">In</st> `<st c="15642">/moviesstore/urls.py</st>`<st c="15662">,
    add</st> <st c="15668">the following</st> <st c="15682">in</st> **<st c="15685">bold</st>**<st
    c="15689">:</st>
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15638">在</st> `<st c="15642">/moviesstore/urls.py</st>`<st c="15662">中，添加以下</st>
    <st c="15668">在</st> **<st c="15685">粗体</st>**<st c="15689">：</st>
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="15846">Let’s explain the</st> <st c="15864">previous code:</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15846">让我们解释一下</st> <st c="15864">之前的代码：</st>
- en: <st c="15878">We modify the code to also import the</st> `<st c="15917">include</st>`
    <st c="15924">function, which is used to include URLs from other URL</st> <st
    c="15980">configuration files.</st>
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="15878">我们修改代码以导入</st> `<st c="15917">include</st>` <st c="15924">函数，该函数用于包含来自其他URL</st>
    <st c="15980">配置文件的URL。</st>
- en: <st c="16000">We add a new path object to the</st> `<st c="16033">urlpatterns</st>`
    <st c="16044">list.</st> <st c="16051">The empty string,</st> `<st c="16069">''</st>`<st
    c="16071">, represents the base URL to include the URLs from the</st> `<st c="16126">home.urls</st>`
    <st c="16135">file.</st>
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="16000">我们将一个新的路径对象添加到</st> `<st c="16033">urlpatterns</st>` <st c="16044">列表中。</st>
    <st c="16051">空字符串</st> `<st c="16069">''</st>`<st c="16071">表示包含来自</st> `<st
    c="16126">home.urls</st>` <st c="16135">文件》的URL的基本URL。</st>
- en: <st c="16141">Now, save those files, run the server, and go back to</st> `<st
    c="16196">http://localhost:8000</st>`<st c="16217">; you should</st> <st c="16231">see
    the home page displayed (</st>*<st c="16260">Figure 2</st>**<st c="16269">.7</st>*<st
    c="16271">):</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16141">现在，保存这些文件，运行服务器，然后返回到</st> `<st c="16196">http://localhost:8000</st>`<st
    c="16217">；你应该</st> <st c="16231">看到显示的主页（</st>*<st c="16260">图2</st>**<st c="16269">.7</st>*<st
    c="16271">）：</st>
- en: '![Figure 2.7 – The home page](img/B22457_02_07.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图2.7 – 主页](img/B22457_02_07.jpg)'
- en: <st c="16324">Figure 2.7 – The home page</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16324">图2.7 – 主页</st>
- en: <st c="16350">Note</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16350">注意</st>
- en: <st c="16355">When we make changes to a file and save it, Django observes the
    file changes and reloads the server with them.</st> <st c="16467">Therefore, we
    don’t have to manually restart the server each time there is a</st> <st c="16544">code
    change.</st>
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16355">当我们对文件进行更改并保存时，Django会观察文件更改并使用它们重新加载服务器。</st> <st c="16467">因此，每次代码更改时，我们不必手动重新启动服务器。</st>
- en: <st c="16556">Now that we have our “home” page up and running, let’s repeat
    the process to create the “</st><st c="16646">about” page.</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16556">现在我们的“主页”已经启动并运行，让我们重复这个过程来创建“</st><st c="16646">关于”页面。</st>
- en: <st c="16659">Creating an about page</st>
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="16659">创建关于页面</st>
- en: <st c="16682">Now that we learned how to</st> <st c="16710">create a simple
    page, let’s repeat the process</st> <st c="16757">to create the about page.</st>
    <st c="16783">We will follow these</st> <st c="16804">three steps:</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16682">现在我们学习了如何</st> <st c="16710">创建一个简单的页面，让我们重复这个过程</st> <st c="16757">来创建关于页面。</st>
    <st c="16783">我们将遵循以下</st> <st c="16804">三个步骤：</st>
- en: <st c="16816">Configure the</st> <st c="16831">about URL.</st>
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="16816">配置</st> <st c="16831">关于URL。</st>
- en: <st c="16841">Define the</st> <st c="16853">about function.</st>
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="16841">定义</st> <st c="16853">关于函数。</st>
- en: <st c="16868">Create the</st> <st c="16880">about template.</st>
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: <st c="16868">创建关于模板。</st>
- en: <st c="16895">Let’s start.</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16895">让我们开始。</st>
- en: <st c="16908">Configuring the about URL</st>
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="16908">配置关于页面的URL</st>
- en: <st c="16934">In</st> `<st c="16938">/home/urls.py</st>`<st c="16951">, add
    the</st> <st c="16960">following path</st> <st c="16976">in</st> **<st c="16979">bold</st>**<st
    c="16983">:</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16934">在</st> `<st c="16938">/home/urls.py</st>`<st c="16951">中，添加以下路径</st>
    <st c="16960">（以下内容加粗）</st> **<st c="16979">bold</st>**<st c="16983">：</st>
- en: '[PRE9]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="17141">So, if a URL matches the</st> `<st c="17166">/about</st>` <st
    c="17172">path, it will execute the</st> `<st c="17199">about</st>` <st c="17204">function
    defined in the</st> `<st c="17229">views</st>` <st c="17234">file.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17141">因此，如果URL与</st> `<st c="17166">/about</st>` <st c="17172">路径匹配，它将执行</st>
    `<st c="17199">about</st>` <st c="17204">函数，该函数定义在</st> `<st c="17229">views</st>`
    <st c="17234">文件中。</st>
- en: <st c="17240">Defining about function</st>
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="17240">定义关于函数</st>
- en: <st c="17264">In</st> `<st c="17268">/home/views.py</st>`<st c="17282">, add</st>
    <st c="17288">the following</st> <st c="17302">in</st> **<st c="17305">bold</st>**<st
    c="17309">:</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17264">在</st> `<st c="17268">/home/views.py</st>`<st c="17282">中，添加以下内容</st>
    <st c="17288">（以下内容加粗）</st> **<st c="17305">bold</st>**<st c="17309">：</st>
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <!DOCTYPE html>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE html>
- en: <html>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <html>
- en: <head>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <head>
- en: <title>About page</title>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <title>关于页面</title>
- en: </head>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: </head>
- en: <body>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: <body>
- en: <h1>Welcome to the About Page</h1>
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: <h1>欢迎使用关于页面</h1>
- en: </body>
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: </body>
- en: </html>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: </html>
- en: '[PRE11]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
