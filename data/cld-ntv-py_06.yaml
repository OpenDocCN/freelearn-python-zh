- en: Creating UIs to Scale with Flux
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flux创建可扩展的UI
- en: In the last chapter, we created webViews for our application and also saw the
    integration between our frontend and backend application, which was very important
    to understand.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们为我们的应用程序创建了Web视图，还看到了前端和后端应用程序之间的集成，这对理解是非常重要的。
- en: In this chapter, we will focus on structuring our frontend. Ideally, each module
    should be responsible for a single thing. As in our main components, we are running
    too many operations within single modules. Besides rendering the different views,
    we have code to make an API request to endpoints and receive, handle, and format
    the response.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于构建我们的前端。理想情况下，每个模块应该负责一件事。就像我们的主要组件一样，我们在单个模块中运行了太多操作。除了渲染不同的视图之外，我们还有代码来向端点发出API请求并接收、处理和格式化响应。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding Flux
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解Flux
- en: Implementing Flux on React
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在React上实现Flux
- en: Understanding Flux
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Flux
- en: '**Flux** is a pattern that Facebook created to build consistent and stable
    webapps with React. React doesn''t give you the ability to manage data; rather,
    it simply accepts data through props and components, and further, the components
    process the data.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flux**是Facebook创建的一种模式，用于使用React构建一致和稳定的Web应用程序。React并不给你管理数据的能力；相反，它只是通过props和组件接受数据，而组件进一步处理数据。'
- en: The React library doesn't really tell you how to get the components, or where
    to store the data, that's why it's called the **view layer**. In React, we don't
    have a framework as we have in the case of Angular or Backbone. That's where Flux
    comes in. Flux is not really a framework, but it's a pattern that will have you
    building your own views.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: React库并不真正告诉你如何获取组件，或者在哪里存储数据，这就是为什么它被称为**视图层**。在React中，我们没有像Angular或Backbone那样的框架。这就是Flux的用武之地。Flux并不是一个真正的框架，而是一种模式，它将让你构建自己的视图。
- en: 'What is a Flux pattern? We have your React components, such as a Tweet component
    and so on, and these components do two things in the Flux pattern--they either
    perform actions or they listen to stores. In our use case, if a user wants to
    post a tweet, the components need to perform actions and actions then interact
    with stores, update the pattern to the API, and give a response to the components.
    The following diagram will give you more clarity on Flux:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是Flux模式？我们有你的React组件，比如Tweet组件等等，在Flux模式中，这些组件会做两件事--它们要么执行动作，要么监听存储器。在我们的用例中，如果用户想要发布推文，组件需要执行动作，然后动作与存储器交互，更新模式到API，并将响应给组件。以下图表将让你更清楚地了解Flux：
- en: '![](img/00069.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00069.jpeg)'
- en: Flux concepts
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flux概念
- en: 'The following are the Flux concepts that you need to understood before moving
    ahead:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，以下是你需要了解的Flux概念：
- en: '**Actions**: This is the way components interact with API endpoints and update
    them. In our case, we post new tweets using it. Actions pipe the action to the
    dispatcher. It might create multiple actions.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动作**：这是组件与API端点交互并更新它们的方式。在我们的情况下，我们使用它发布新推文。动作将动作传输到调度器。它可能创建多个动作。'
- en: '**Dispatcher**: This dispatches every single event that comes in and sends
    it across to every single subscriber, which are basically stores.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调度器**：这会分发每一个事件，并将其发送给每一个订阅者，基本上就是存储器。'
- en: '**Stores**: This is an important part of Flux. Components always listen to
    stores for any changes. Say, if you wrote a new tweet, that''s an action, and
    wherever the tweet is updated in the store, an event is fired and the component
    is made aware that it has to be updated with the latest data. If you come from
    the AngularJS world, store is a service, or if you are of Backbone.js, stores
    are nothing but a collection.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**存储器**：这是Flux的一个重要部分。组件总是监听存储器的任何更改。比如，如果你写了一条新推文，那就是一个动作，无论推文在存储器中更新到哪里，都会触发一个事件，并且组件会意识到它必须使用最新的数据进行更新。如果你来自AngularJS世界，存储器就是一个服务，或者如果你是Backbone.js的话，存储器只是一个集合。'
- en: '**Components**: This is used to store the action names.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**组件**：这用于存储动作名称。'
- en: We will be using the `JSX` file instead of `JS`, as there is not much difference--`JS`
    is a standard Javascript and `JSX` is an HTML-like syntax that you can use with
    React to create React components easily and perceptively.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`JSX`文件而不是`JS`，因为它们之间没有太大的区别--`JS`是标准的Javascript，而`JSX`是一种类似HTML的语法，你可以在React中使用它来轻松而直观地创建React组件。
- en: Adding dates to UI
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向UI添加日期
- en: Before we deep dive into Flux, a little thing we need to add to our views is
    the date feature. Earlier, you were seeing the timing of the tweets that are stored
    in the database as the **TZ** format; however, ideally, it should be compared
    with current timings and should be shown in reference to it.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入研究Flux之前，我们需要向我们的视图添加一个小功能，即日期功能。之前，你看到的是存储在数据库中的推文的时间，格式为**TZ**；然而，理想情况下，它应该与当前时间进行比较，并应该以此为参考显示。
- en: 'In order to do that, we will need to update our `main.jsx` file so that it
    will format our tweets. Add the following code to `main.jsx`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要更新我们的`main.jsx`文件，以便它可以格式化我们的推文。将以下代码添加到`main.jsx`中：
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Our work is done here. Now, our tweet should look something like this:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的工作到此为止。现在，我们的推文应该看起来像这样：
- en: '![](img/00070.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00070.jpeg)'
- en: Building user interfaces with Flux
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flux构建用户界面
- en: In Flux, we will be defining the responsibility of every module, and it should
    also be single. The React responsibility is to re-render the view when that data
    changes, which is good for us. All we need to do is listen to these data events
    using something like Flux, which will manage our data.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flux中，我们将定义每个模块的责任，并且它也应该是单一的。React的责任是在数据发生变化时重新渲染视图，这对我们来说是很好的。我们所需要做的就是使用类似Flux这样的东西来监听这些数据事件，它将管理我们的数据。
- en: With Flux, you not only separate the responsibility of modules, but also get
    to do a unidirectional flow within your app, and that's why Flux is so popular.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Flux，你不仅分离了模块的责任，还可以在应用程序中实现单向流动，这就是为什么Flux如此受欢迎。
- en: In the Flux loop, for every module, there's always one direction to go through.
    This intentional constraint on the flow is what makes the Flux applications easy
    to design, easy to grow, and easy to manage and maintain.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flux循环中，对于每个模块，总是有一个方向要遵循。这种对流程的有意约束是使Flux应用程序易于设计、易于增长、易于管理和维护的原因。
- en: 'The following diagram will give you more clarity on the Flux architecture:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表将让您更清楚地了解Flux架构：
- en: '![](img/00071.jpeg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00071.jpeg)'
- en: For the diagram, I have taken reference from the Flux repository ([https://github.com/facebook/flux](https://github.com/facebook/flux)).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图表，我参考了Flux存储库（[https://github.com/facebook/flux](https://github.com/facebook/flux)）。
- en: Actions and dispatcher
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Actions和dispatcher
- en: To begin with Flux, we have to pick a starting point. It could be anything.
    I find it good to start with the actions. You'll also have to pick a direction
    of flow. You could go clockwise or counterclockwise. Clockwise is probably good
    for you as a starting point, so we'll do that.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始使用Flux，我们必须选择一个起点。可以是任何东西。我发现从actions开始是个不错的选择。您还必须选择一个流向。您可以顺时针或逆时针。顺时针对您来说可能是一个不错的起点，所以我们将这样做。
- en: 'Don''t forget to install the Flux library directly using the following command:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记使用以下命令直接安装Flux库：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the preceding command should be executed from our application directory,
    or you can add it in `package.json` and execute `npm install` to install the packages.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，上述命令应该从我们的应用程序目录中执行，或者您可以将其添加到`package.json`中，并执行`npm install`来安装包。
- en: Now, let's begin with action as our starting point, where we will be following
    a single responsibility principle. We'll be creating an actions library to communicate
    with the API, and another action to communicate with the dispatcher.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从action作为起点开始，我们将遵循单一职责原则。我们将创建一个actions库来与API通信，并创建另一个action来与dispatcher通信。
- en: Let's begin by creating the `actions` folder in the static directory. We will
    be saving all our actions in this directory.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从静态目录中创建`actions`文件夹开始。我们将在这个目录中保存所有的actions。
- en: 'Since we have two actions that need to be performed--it could be listing the
    tweets or adding new tweets--we''ll start with listing the tweets. Create a `Tactions`
    file with the `getAllTweets` function, which should be calling REST API''s to
    get all the tweets, as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们有两个需要执行的actions--可能是列出tweets或添加新tweets--我们将从列出tweets开始。创建一个`Tactions`文件，其中包含`getAllTweets`函数，该函数应该调用REST
    API来获取所有的tweets，如下所示：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: I mentioned that Flux-based applications are easy to design, right? Here's why.
    Because we know this actions module has a single responsibility with a single
    flow--either we provide the API call here or it's better to invoke a module that
    will make all API calls for the application.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我提到过基于Flux的应用程序易于设计，对吧？这就是原因。因为我们知道这个actions模块具有单一职责和单一流程--要么我们在这里提供API调用，要么最好调用一个模块来为应用程序进行所有API调用。
- en: 'Update the `Tactions.jsx` file as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`Tactions.jsx`文件如下：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see, we imported the API module, which will invoke the API's to get
    the tweets.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们导入了API模块，它将调用API来获取tweets。
- en: 'So, let''s create `API.jsx` in the static directory with the following code
    snippet to get tweets from the backend server:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们在静态目录中创建`API.jsx`，其中包含以下代码片段来从后端服务器获取tweets：
- en: '[PRE4]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Create the `Sactions` file in the actions directory, which will call the dispatcher
    and define the `actionType`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在actions目录中创建`Sactions`文件，它将调用dispatcher并定义`actionType`：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: As you can see, we still need to define the dispatcher. Luckily, Facebook created
    a dispatcher that comes along with the Flux packages.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们仍然需要定义dispatcher。幸运的是，Facebook创建了一个随Flux包一起提供的dispatcher。
- en: 'As mentioned earlier, **Dispatcher** is the central hub for your application,
    which dispatched the **Actions** and data for registered callbacks. You can refer
    to the following diagram for a better understanding of the data flow:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，**Dispatcher**是您的应用程序的中央枢纽，它分发**Actions**和注册回调的数据。您可以参考以下图表更好地理解数据流：
- en: '![](img/00072.jpeg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00072.jpeg)'
- en: 'Create a new file named `dispatcher.jsx`, which will create an instance of
    dispatcher with the following lines of code:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为`dispatcher.jsx`的新文件，其中将使用以下代码创建一个dispatcher的实例：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: That's it. Now you can import this dispatcher anywhere in your application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。现在您可以在应用程序的任何地方导入这个dispatcher。
- en: 'So, let''s update our `Sactions.jsx` file, in which you will find the `receivedTweets`
    function, as shown in the following code snippet:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们更新我们的`Sactions.jsx`文件，其中您将找到`receivedTweets`函数，如下所示的代码片段：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In the `receivedTweets` function , there are three things to be described.
    Firstly, `rawTweets` will be received from the `getAllTweets` function in `API.jsx`,
    which we need to update as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在`receivedTweets`函数中，有三件事需要描述。首先，`rawTweets`将从`API.jsx`中的`getAllTweets`函数接收，我们需要按照以下方式进行更新：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Stores
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Stores
- en: Stores manage the application state by taking control of the data within your
    application, which means stores manage the data, data retrieval methods, dispatcher
    callbacks, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Stores通过控制应用程序内的数据来管理应用程序状态，这意味着stores管理数据、数据检索方法、dispatcher回调等。
- en: 'For a better understanding, refer to the following diagram:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解，请参考以下图表：
- en: '![](img/00073.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00073.jpeg)'
- en: Now that we have defined our dispatcher, next, we need to identify the subscriber's
    for the change provided by the dispatcher.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了我们的dispatcher，接下来，我们需要确定订阅者对dispatcher提供的更改。
- en: Create a separate directory in stores in the static directory, which will contain
    all the store definitions.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在静态目录中的stores中创建一个单独的目录，其中将包含所有的store定义。
- en: 'Let''s create a `TStore` file that will subscribe to any changes emitted by
    the dispatcher. Add the following code to the `TStore` file which does so:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`TStore`文件，它将订阅dispatcher发出的任何更改。将以下代码添加到`TStore`文件中：
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: At this point, we have started the tweet action, which sent the API module a
    message to get all the tweets. The API did that and then invoked the server actions
    to pass on the data to the dispatcher. The dispatcher then labeled the data and
    dispatched it. We also created stores that basically manage the data and request
    data from the dispatcher.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我们已经开始了推文操作，向API模块发送消息以获取所有推文。API执行了这一操作，然后调用服务器操作将数据传递给调度程序。然后，调度程序标记了数据并将其分发。我们还创建了基本上管理数据并从调度程序请求数据的存储。
- en: Currently, your stores are not connected with our app. The stores are supposed
    to emit changes whenever they occur and, based on that, views will be changed
    as well.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您的存储尚未与我们的应用程序连接。存储应该在发生更改时发出更改，并且基于此，视图也将发生更改。
- en: So, our main component is interested in changes emitted events by the store.
    For now, let's import our store.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们的主要组件对存储发出的更改事件感兴趣。现在，让我们导入我们的存储。
- en: 'Before we move forward, let''s see if our complete flow of application is working
    fine. It should be something like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续之前，让我们看看我们的应用程序的完整流程是否正常工作。应该是这样的：
- en: '![](img/00074.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00074.jpeg)'
- en: It's good practice to keep on checking the user interfaces after you have reached
    a certain stable state of your application creation.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在达到应用程序创建的一定稳定状态后，继续检查用户界面是一个很好的做法。
- en: Let's move on. Currently, we are just dispatching the tweets, next, we need
    to decide what we need to do with these tweets. So, let's first receive the tweets
    and then emit changes to the views accordingly. We will be using emitter to do
    that.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续。目前，我们只是分发推文，接下来，我们需要决定如何处理这些推文。因此，让我们首先接收推文，然后相应地向视图发出更改。我们将使用发射器来做到这一点。
- en: '**Emitter** is a part of the events library that we previously installed using
    `npm`. So, we can import it from there. Note how it is not the default export,
    but rather the destructed property on it. Then, our store will be an instance
    of this tweet `EventEmitter` class.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Emitter**是我们之前使用`npm`安装的事件库的一部分。因此，我们可以从那里导入它。请注意，它不是默认导出，而是它的解构属性。然后，我们的存储将是此推文`EventEmitter`类的实例。'
- en: 'Let''s update our `TStore.jsx` file as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下方式更新我们的`TStore.jsx`文件：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Wow, that's a lot of code to understand at one time! Let's understand it part
    by part, and the flow of the code as well.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，一次理解这么多代码！让我们一部分一部分地理解它，以及代码的流程。
- en: 'Firstly, we will import the `EventEmitter` library from the events packages
    by using the following import utility:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将使用以下导入实用程序从事件包中导入`EventEmitter`库：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Next, we will store the received tweets in `_tweets` and update the tweets
    in the `getAll()` function so that, in views, it will show the tweet''s timing
    with reference to the current system time:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将在`_tweets`中存储接收到的推文，并更新`getAll()`函数中的推文，以便在视图中显示推文的时间与当前系统时间的参考：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We have also created functions for the views to add and remove the change event
    listener. These two functions will also be just a wrap around the `EventEmitter`
    syntax.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还为视图创建了添加和删除更改事件侦听器的函数。这两个函数也只是围绕`EventEmitter`语法的包装。
- en: 'These functions take `callback` arguments that will be sent by views. These
    functions are basically to add or remove listener for the views to start or stop
    listening to these changes in the store. Add the following code to `TStore.jsx`
    to do so:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数接受由视图发送的`callback`参数。这些函数基本上是为了向视图添加或删除侦听器，以便开始或停止监听存储中的这些更改。将以下代码添加到`TStore.jsx`中以执行此操作：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Make sure you have no errors in the console with all the updated code.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 确保在控制台中没有任何更新后的代码错误。
- en: Let's move on to views, that is, the main component where we will create a function
    to pull data from the store and prepare an object for the state of component.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续前进，即在主要组件中创建一个函数，从存储中提取数据并为组件的状态准备一个对象。
- en: 'Let''s write `getAppState()` function in `main.jsx`, which maintains the state
    of the app, as shown in the following code:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`main.jsx`中编写`getAppState()`函数，该函数维护应用程序的状态，如下所示：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: As mentioned earlier, the file extension doesn't really matter, whether it is
    `.js` or `.jsx`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，文件扩展名实际上并不重要，无论是`.js`还是`.jsx`。
- en: 'Now, we will be calling this function from the `Main` class, and we will also
    call the add and remove listener functions that we created in `main.jsx`, using
    the following code block:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将从`Main`类中调用此函数，并且还将调用我们在`main.jsx`中创建的添加和删除侦听器函数，使用以下代码块：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Also, we have to update the `render` function to get the `Tweetslist` state
    to show in view, and it is done using the following code snippet:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们必须更新`render`函数以获取`Tweetslist`状态以在视图中显示，可以使用以下代码片段完成：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Great, we have done pretty much everything now; our tweet should be shown without
    any problems, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 很棒，我们现在已经做了几乎所有的事情；我们的推文应该可以正常显示，如下所示：
- en: '![](img/00075.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00075.jpeg)'
- en: Awesome! Our application is working fine.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们的应用程序运行正常。
- en: If you look at the architecture diagram of Flux, we have completed the flow
    of Flux once, but we still need to complete the cycle by creating the API's to
    add new tweets.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您查看Flux的架构图，我们已经完成了Flux的流程一次，但我们仍然需要通过创建API来完成循环，以添加新推文。
- en: 'Let''s implement it by sending a new tweet feature using Flux. We will be making
    a couple of changes in `main.jsx`. In the `render` function, the `Tweetcall` to
    `addTweet` function into following line:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用Flux发送新推文功能来实现它。我们将在`main.jsx`中进行一些更改。在`render`函数中，将`Tweetcall`更改为以下行的`addTweet`函数：
- en: '[PRE17]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Instead, we will call the `Tweet` component without a parameter, as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是使用参数调用`Tweet`组件，如下所示：
- en: '[PRE18]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Moreover, in the `Tweet` component, we will call the `TActions` module to add
    new tweets. Update the code in the `Tweet` component as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在`Tweet`组件中，我们将调用`TActions`模块来添加新推文。更新`Tweet`组件中的代码如下：
- en: '[PRE19]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `Render` function in the `Tweet` component remains the same.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`Tweet`组件中的`Render`函数保持不变。'
- en: Let's add a new `sendTweet` function that will invoke an API call to the endpoint
    URL of the backend application and add it to the backend database.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的 `sendTweet` 函数，它将调用后端应用程序的端点URL进行API调用，并将其添加到后端数据库。
- en: 'Now, our `Taction.jsx` file should look like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的 `Taction.jsx` 文件应该是这样的：
- en: '[PRE20]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, add the `API.addTweet` function in `API.jsx`, which will make an API call
    and also update the state of tweetlists as well. Add the following `addTweet`
    function to the `API.jsx` file:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `API.jsx` 中添加 `API.addTweet` 函数，它将进行API调用，并且还会更新推文列表的状态。将以下 `addTweet`
    函数添加到 `API.jsx` 文件中：
- en: '[PRE21]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Also, we are passing the newly added tweets to the server actions to get them
    dispatched and available for stores.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们正在将新添加的推文传递给服务器操作，以便将它们分派并可用于存储。
- en: 'Let''s add a new function, `receivedTweet`, which will dispatch them. Use the
    following code snippet to do so:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个新的函数 `receivedTweet`，它将分派它们。使用以下代码片段来实现：
- en: '[PRE22]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '`ActionTypes` are constantly defined in `constants.jsx` in the static directory.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`ActionTypes` 经常在静态目录的 `constants.jsx` 中定义。'
- en: 'Now, let''s define the `RECEIVED_TWEET``actiontype` case in the tweet store
    to emit changes for the view to take further action. The following is the updated
    `Appdispatcher.register` function defined in `TStore.jsx`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在推文存储中定义 `RECEIVED_TWEET` 的 `actiontype` case，以便发出更改，以便视图进一步采取行动。以下是在
    `TStore.jsx` 中定义的更新的 `Appdispatcher.register` 函数：
- en: '[PRE23]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, we are pretty much done with adding a new tweet module using Flux and
    it should work totally fine, as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们基本上已经完成了使用Flux添加新的推文模块，它应该完全正常工作，如下面的截图所示：
- en: '![](img/00076.jpeg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00076.jpeg)
- en: 'Now, if we click on the Tweet Now button, the tweet should be added and it
    should project in the following panel, as shown here:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们点击“立即推文”按钮，推文应该被添加，并且应该在下面的面板中显示，如下所示：
- en: '![](img/00077.jpeg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00077.jpeg)
- en: Summary
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to structure our application by using the Flux
    pattern, and we also got an understanding of the different concepts of Flux, such
    as dispatcher, stores, and so on. Flux gives you good patterns to distribute responsibility
    between modules, which really needs to be understood, as we are developing an
    application for the cloud platform, such as AWS, Azure, and so on, so our application
    should be highly responsive. That's all we have from the building user interfaces
    side, but in the coming chapter, we will understand a few important concepts,
    such as event sourcing, and how we can make the application more secure by using
    different authentication methods.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用Flux模式来构建我们的应用程序，并且我们也了解了Flux的不同概念，比如分发器、存储等。Flux为您提供了良好的模式来在模块之间分配责任，这确实需要被理解，因为我们正在为云平台开发应用程序，比如AWS、Azure等，所以我们的应用程序应该具有高度的响应性。这就是我们从构建用户界面方面所拥有的一切，但在接下来的章节中，我们将了解一些重要的概念，比如事件溯源，以及如何通过使用不同的身份验证方法使应用程序更加安全。
