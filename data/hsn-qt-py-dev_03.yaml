- en: An Overview of QML
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML概述
- en: There are various approaches that you can take and design decisions that you
    can make when creating a GUI. One of them is creating a GUI with the **Qt Modeling
    Language **(**QML**) implementation. This chapter will explore the basics of QML,
    uncover the most commonly used types, and conclude with some practice of using
    the QML when building applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建图形用户界面（GUI）时，你可以采取各种方法并做出设计决策。其中之一是使用**Qt建模语言**（**QML**）实现来创建GUI。本章将探讨QML的基础知识，揭示最常用的类型，并以一些使用QML构建应用程序的实践结束。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Introduction to QML
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QML简介
- en: The basic syntax of QML
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QML的基本语法
- en: Language and engine
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 语言和引擎
- en: QML styling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QML样式
- en: QML animation
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QML动画
- en: About QML
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于QML
- en: QML is a UI markup language and a multi-paradigm declarative language that's
    similar to CSS and JSON. It is used for designing applications with a GUI. QML
    is popular and is very important for creating high quality GUIs. QML is a language
    that allows developers to describe different interfaces in terms of their visual
    components and how they interact with and relate to each other.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: QML是一种UI标记语言，是一种类似于CSS和JSON的多范式声明性语言。它用于设计具有GUI的应用程序。QML很受欢迎，对于创建高质量的GUI非常重要。QML是一种允许开发者用其视觉组件以及它们如何相互交互和关联来描述不同界面的语言。
- en: QML is a highly readable language that allows the components to be interconnected
    dynamically. In this sense, components will be reused and customized within a
    UI. QML provides a readable and declarative JSON-like syntax with support for
    imperative JavaScript expressions, combined with dynamic property bindings. Application
    functionality can be scripted through JavaScript. QML uses Qt, which lets Qt features
    to be attainable from QML applications. In the Qt framework, the QML language
    and engine infrastructure is provided by the `QtQml` module. To fully understand
    QML, it is recommended to read the official Qt documentation ([https://doc.qt.io](https://doc.qt.io)).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: QML是一种高度可读的语言，允许组件动态地相互连接。在这种情况下，组件将在UI中重用和定制。QML提供了一种可读的、类似JSON的声明性语法，并支持命令式JavaScript表达式，结合动态属性绑定。应用程序功能可以通过JavaScript进行脚本化。QML使用Qt，这使得Qt功能可以从QML应用程序中访问。在Qt框架中，QML语言和引擎基础设施由`QtQml`模块提供。为了完全理解QML，建议阅读官方Qt文档（[https://doc.qt.io](https://doc.qt.io)）。
- en: 'This chapter will present many examples of QML that will be shown as a script
    in a QML file. Commonly used modules such as `QtQML` and `QtQuick` (which will
    be discussed in [Chapter 3](519d24a6-7d2c-4f82-8c24-da4460c1ed29.xhtml), *Qt Quick
    Library* ) illustrate QML implementation with Qt. To run QML scripts and display
    the results, you can use the Qt Creator. To do this, you need to implement the
    following steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将展示许多QML示例，这些示例将以QML文件中的脚本形式展示。常用的模块如`QtQML`和`QtQuick`（将在第3章“Qt Quick库”中讨论）将展示如何使用Qt实现QML。要运行QML脚本并显示结果，你可以使用Qt
    Creator。为此，你需要执行以下步骤：
- en: Create a directory with the name `Qt/` inside the `App/` folder, for example, `App/Qt/`.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App/`文件夹内创建一个名为`Qt/`的目录，例如，`App/Qt/`。
- en: 'Open Qt Creator and navigate to File | New File or Project:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Qt Creator并导航到文件 | 新文件或项目：
- en: '![](img/ac4e56db-f0eb-460e-946d-14230c9b4ba3.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ac4e56db-f0eb-460e-946d-14230c9b4ba3.png)'
- en: 'Navigate to Choose a template | Application | Qt Quick Application - Empty
    and click on Choose...:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到选择模板 | 应用程序 | 空Qt Quick应用程序并点击“选择...”：
- en: '![](img/6ec963e2-d83f-4620-aff0-05cf2fa48dda.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6ec963e2-d83f-4620-aff0-05cf2fa48dda.png)'
- en: 'Set the Name as `qml1` and enter `Path/To/The/App/Qt/` in the Create in field:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将名称设置为`qml1`并在“创建在”字段中输入`Path/To/The/App/Qt/`：
- en: '![](img/31a05958-73f2-42ec-b751-1f2fd9589ff6.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/31a05958-73f2-42ec-b751-1f2fd9589ff6.png)'
- en: Click Next through the windows that follow and select all kits when you reach
    the Kits window. Then, click Next and Finish.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击后续窗口中的“下一步”，并在到达“工具包”窗口时选择所有工具包。然后，点击“下一步”和“完成”。
- en: Add the `Rectangle` QML type to the `Window` QML type inside the `main.qml`
    file.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Rectangle` QML类型添加到`main.qml`文件中的`Window` QML类型内。
- en: Click on the Build Project button.
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“构建项目”按钮。
- en: 'Finally, click on the Run button:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击“运行”按钮：
- en: '![](img/458e7492-ad0a-413b-a33f-d561823ba054.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/458e7492-ad0a-413b-a33f-d561823ba054.png)'
- en: 'The following screenshot depicts the output of the preceding code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了前面代码的输出：
- en: '![](img/7654cf0c-65a3-4c48-9519-26b9c6b70833.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7654cf0c-65a3-4c48-9519-26b9c6b70833.png)'
- en: Alternatively, you can use Python. To run these examples using Python and PyQt5
    binding (PySide2 can be used), you need to create a file, for example, `u_qml.qml`,
    inside the `App/` directory, as described in [Chapter 1](9de812dc-9446-4955-8437-4aebb2d991b3.xhtml),
    *Introduction to Python and Qt*, and then make some changes in the `u_app.py`
    and `u_tools.py` files.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您也可以使用Python。要使用Python和PyQt5绑定（也可以使用PySide2）运行这些示例，您需要在`App/`目录内创建一个文件，例如`u_qml.qml`，如[第1章](9de812dc-9446-4955-8437-4aebb2d991b3.xhtml)，“Python和Qt介绍”中所述，然后在`u_app.py`和`u_tools.py`文件中进行一些更改。
- en: 'The changes in the `u_tools.py` file are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`u_tools.py`文件中的更改如下：'
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `u_qml()` function that's created in this class will be used to display
    the QML application. Using the QML application engine will load the QML file with
    a specified URL.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中创建的`u_qml()`函数将被用来显示QML应用程序。使用QML应用程序引擎将加载指定URL的QML文件。
- en: 'The changes in the `u_app.py` file are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`u_app.py`文件中的更改如下：'
- en: '[PRE1]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `start_qml()`function will start the `u_qml()` function of the `UTools`
    class, which will display the QML application. Then, we need to create the `u_qml.qml`
    file in the `App/` folder, which will be the QML application.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`start_qml()`函数将启动`UTools`类的`u_qml()`函数，这将显示QML应用程序。然后，我们需要在`App/`文件夹中创建`u_qml.qml`文件，这将作为QML应用程序。'
- en: 'The `u_qml.qml`file looks like this:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`u_qml.qml`文件看起来是这样的：'
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You should see a blank window with the title First Qml.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到一个标题为“First Qml”的空白窗口。
- en: Basics of the syntax
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 语法基础
- en: Let's describe the basics of the QML syntax, step by step.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步描述QML语法的要点。
- en: Import statements
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入语句
- en: 'A QML document may have one or more imports at the beginning of the file. An
    import can be any one of the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个QML文档可以在文件开头有一个或多个导入。导入可以是以下任何一个：
- en: 'A namespace into which types have been registered:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已将类型注册到其中的命名空间：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The version number of the `QtQuick` module and other QML-related modules may
    vary, depending on your installed Qt version.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtQuick`模块和其他与QML相关的模块的版本号可能因您安装的Qt版本而异。'
- en: 'A directory that contains type definitions as QML documents:'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个包含类型定义的QML文档的目录：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'A JavaScript file:'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript文件：
- en: '[PRE5]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Import types
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入类型
- en: QML has three different types of imports. Each import type has a slightly different
    syntax and semantics.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: QML有三种不同类型的导入。每种导入类型都有略微不同的语法和语义。
- en: Module namespace imports
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 模块命名空间导入
- en: 'Module namespace imports are imported QML modules that register QML object
    types and JavaScript resources into a given namespace. An example is `import <ModuleIdentifier>
    <Version.Number> [as <Qualifier>]`. Here is an example of an unqualified module
    import:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 模块命名空间导入是导入到给定命名空间中的QML模块，这些模块将QML对象类型和JavaScript资源注册到该命名空间中。一个例子是`import <ModuleIdentifier>
    <Version.Number> [as <Qualifier>]`。以下是一个无限定符模块导入的例子：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This allows us to use all types of `QtQuick 2.7` without specifying a qualifier.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许我们使用所有类型的`QtQuick 2.7`，而无需指定限定符。
- en: 'The `u_qml.qml` file demonstrates using the imports in QML:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`u_qml.qml`文件演示了在QML中使用导入：'
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here''s a qualified module import:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个合格的模块导入：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This code imports `QtQuick.Window` as `UQml` and declares a window with properties.
    This prevents conflicting type names from being imported.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将`QtQuick.Window`导入为`UQml`并声明了一个具有属性的窗口。这防止了导入冲突的类型名称。
- en: Non-module namespace imports
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 非模块命名空间导入
- en: Types can also be registered into namespaces in C++ with registration functions
    such as `qmlRegisterType()`. If we import a namespace as if it were a module identifier,
    then these types can be imported. Similar to importing into a qualified local
    namespace, the `import` statement can use the `as` keyword to indicate that the
    types should be imported into a specific document-local namespace. Any references
    to the types that are made accessible by the import must be prefixed by the local
    namespace qualifier if a namespace is defined.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 类型也可以使用如`qmlRegisterType()`之类的注册函数在C++的命名空间中注册。如果我们像导入模块标识符一样导入一个命名空间，那么这些类型就可以被导入。类似于导入到限定本地命名空间，`import`语句可以使用`as`关键字来指示类型应该导入到特定的文档本地命名空间。如果定义了命名空间，则必须使用本地命名空间限定符来前缀通过导入可访问的类型引用。
- en: 'Here''s an example in the `u_qml.qml`file:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`u_qml.qml`文件中有一个示例：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: First is the declaration of the `Rectangle` QML type. Then, the hexadecimal
    value for the `color` of the `Rectangle` is set, along with the `width` and the
    `height`. Then, the hexadecimal value for the color of border is set, including
    the `border.width` of the `Rectangle` and the `radius`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`Rectangle` QML类型的声明。然后，设置`Rectangle`的`color`的十六进制值，以及`width`和`height`。接着，设置边框颜色的十六进制值，包括`Rectangle`的`border.width`和`radius`。
- en: Directory imports
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 目录导入
- en: These import a directory containing QML documents that provides segmentation
    for QML types into reusable groups and directories in the filesystem.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些导入了一个包含QML文档的目录，这些文档提供了对QML类型进行分割的功能，以便在文件系统中形成可重用的组和目录。
- en: 'An example of these imports is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这些导入的例子如下：
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: To demonstrate this, divide the `u_qml.qml` file into two parts. The first part
    creates a window, while the second part creates a circle. Create the `qmls/` directory
    inside `App/` and put the `UCircle.qml` file inside it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，将`u_qml.qml`文件分为两部分。第一部分创建一个窗口，而第二部分创建一个圆形。在`App/`内部创建`qmls/`目录，并将`UCircle.qml`文件放入其中。
- en: 'The content of the `UCircle.qml` file looks like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`UCircle.qml`文件的内容如下：'
- en: '[PRE11]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: First is the declaration of the `Rectangle` QML type. Then, the RGBA value for
    the color of the `Rectangle`, the `width` of the `Rectangle`, the `height` of
    the `Rectangle`, the `border.width` of the `Rectangle`, and the `radius` for the
    change of the rectangle to the circle are set.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是`Rectangle` QML类型的声明。然后，设置`Rectangle`的颜色RGBA值、`Rectangle`的`width`、`Rectangle`的`height`、`Rectangle`的`border.width`以及将矩形变为圆形的`radius`。
- en: 'In the `u_qml.qml` file, we can add this circle by importing the `App/qmls/`
    folder:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在`u_qml.qml`文件中，我们可以通过导入`App/qmls/`文件夹来添加这个圆形：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We used the circle that was created in a separate QML file.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了在单独的QML文件中创建的圆形。
- en: JavaScript resource imports
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript资源导入
- en: 'These imports can import JavaScript resources directly into a QML document.
    Each JavaScript resource must have an identifier that it can be accessed with
    the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些导入可以直接将JavaScript资源导入到QML文档中。每个JavaScript资源都必须有一个标识符，可以通过以下方式访问：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'To demonstrate this, let''s create a directory inside our `App/` folder called `App/jscripts/`
    and put the `u_js.js` file there:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，让我们在`App/`文件夹内创建一个名为`App/jscripts/`的目录，并将`u_js.js`文件放在那里：
- en: '[PRE14]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the `u_qml.qml` file, we can add an import of JavaScript:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在`u_qml.qml`文件中，我们可以添加对JavaScript的导入：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The following code shows how to add the circle and the mouse area to `UQml.Window`
    in the `u_qml.qml` file:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了如何在`u_qml.qml`文件中将圆形和鼠标区域添加到`UQml.Window`：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, we imported JavaScript to resize the circle. The `MouseArea`
    QML type realizes the area that can be clicked.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们导入JavaScript来调整圆形的大小。`MouseArea` QML类型实现了可点击的区域。
- en: QML object declaration
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML对象声明
- en: QML has the following object declaration syntax in the QML document.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: QML文档中的对象声明语法如下。
- en: Objects
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象
- en: 'Objects are specified by the type, with a pair of braces. Each object type
    begins with a capital letter. Inside the curly brackets, we can specify information
    about the object, such as its properties. Properties are set as `property: value`. Each
    object may declare a child object as a nested object and may contain any number
    of child objects, as shown in the preceding examples. Let''s see some new examples:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '对象通过类型指定，用一对花括号括起来。每个对象类型以大写字母开头。在大括号内，我们可以指定有关对象的信息，例如其属性。属性设置为`property:
    value`。每个对象可以声明一个嵌套的子对象作为子对象，并且可以包含任意数量的子对象，如前例所示。让我们看看一些新的例子：'
- en: 'Create a new QML file in the `qmls/` directory called `URect.qml` – this will
    be a rectangle. Add the following lines:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`qmls/`目录下创建一个新的QML文件，命名为`URect.qml`——这将是一个矩形。添加以下行：
- en: '[PRE17]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the `u_qml.qml` file, add the created rectangle:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_qml.qml`文件中，添加创建的矩形：
- en: '[PRE18]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We're rewriting the previously created lines and adding the `Window` QML type
    and new properties.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在重写之前创建的行，并添加`Window` QML类型和新属性。
- en: 'Now,`rect1` will be added to the bottom of `UQml.Window`:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，`rect1`将被添加到`UQml.Window`的底部：
- en: '[PRE19]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We added the rectangle that was created in `URect.qml` file with the `id`, `width`,
    `height`, and `color` properties. The `MouseArea` QML type is used to click on
    the rectangle and, as a result, changes its color.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`URect.qml`文件中添加了具有`id`、`width`、`height`和`color`属性的矩形。使用`MouseArea` QML类型来点击矩形，从而改变其颜色。
- en: 'Then, add `rect2` after the first rectangle:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在第一个矩形之后添加`rect2`：
- en: '[PRE20]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The second rectangle is the nested object of the window. The `id` attribute
    must be unique. The position of `rect2` is dependent on the position of `rect1` .
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个矩形是窗口的嵌套对象。`id`属性必须是唯一的。`rect2`的位置依赖于`rect1`的位置。
- en: Comments
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 注释
- en: QML comments can be both single and multilined. A single comment starts with
    `//` and ends at the end of the line. Multiline comments begin with `/*` and end
    with `*/`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: QML注释可以是单行或多行的。单行注释以`//`开头，并在行尾结束。多行注释以`/*`开头，以`*/`结束。
- en: Object attributes
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象属性
- en: 'Each QML object type has a set of attributes. The instance of an object type
    is built with the set of attributes that has been defined for that object type. The
    QML object attribute types are as follows:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每个QML对象类型都有一组属性。对象类型的实例是用为该对象类型定义的属性集构建的。QML对象属性类型如下：
- en: The `id` attribute
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`属性'
- en: '`property` attributes'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`property`属性'
- en: '`signal` attributes'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`signal`属性'
- en: Signal handler attributes
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号处理程序属性
- en: Method attributes
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法属性
- en: Attached properties and attached signal handler attributes
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加属性和附加信号处理程序属性
- en: id attribute
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: id属性
- en: Every QML object type has an `id` attribute that is provided by the language
    itself, and it can't be redefined or overridden by any object type. A value can
    be assigned to the `id` attribute of an object instance, which identifies the
    object and allows it to be referred to by other objects.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个QML对象类型都有一个由语言本身提供的`id`属性，并且不能被任何对象类型重新定义或覆盖。可以为对象实例的`id`属性赋值，这可以标识对象并允许其他对象引用它。
- en: 'An `id` attribute must begin with a lowercase letter or an underscore and can
    include characters such as numbers, letters, and underscores. Objects can be referred
    to by `id` from anywhere within the component scope in which it is declared. It
    is important that the `id` value is always unique. When an object is created,
    the value of its `id` attribute cannot be changed. To demonstrate this, implement
    the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`属性必须以小写字母或下划线开头，可以包含数字、字母和下划线等字符。可以在声明它的组件作用域内的任何地方通过`id`引用对象。`id`值始终唯一是很重要的。当创建对象时，其`id`属性的值不能更改。为了演示这一点，请执行以下步骤：'
- en: 'Create a file called `UText.qml` inside the `qmls/` directory, and add the
    following lines:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`qmls/`目录内创建一个名为`UText.qml`的文件，并添加以下行：
- en: '[PRE21]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This code creates text that will be displayed with a white color.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建将显示为白色的文本。
- en: 'Add `Uqmls.UText` at the bottom of `rect1` in the `u_qml.qml` file:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_qml.qml`文件的`rect1`底部添加`Uqmls.UText`：
- en: '[PRE22]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This demonstrates properties such as font family and font size.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这演示了字体家族和字体大小等属性。
- en: 'Add the second rectangle, which will be used as a right panel, to `UQml.Window`:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个矩形（将用作右侧面板）添加到`UQml.Window`：
- en: '[PRE23]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'This code will add new features that will be used when `rect2` is clicked,
    such as changing the color and setting text of `rect2`. We can see the result
    of this QML as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将为点击`rect2`时使用的新功能添加新功能，例如更改颜色和设置`rect2`的文本。我们可以如下看到这个QML的结果：
- en: '![](img/61b9adc1-8b19-436e-a290-7110291a5759.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61b9adc1-8b19-436e-a290-7110291a5759.png)'
- en: If we click on the left area of this window, the color of this area will change.
    If the right area is clicked, two pieces of text will be displayed, and the color
    of the right panel will change.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击这个窗口的左侧区域，这个区域的颜色将会改变。如果点击右侧区域，将显示两段文本，并且右侧面板的颜色将改变。
- en: Property attributes
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 属性属性
- en: 'Properties in QML are attributes of an object that can be assigned as static
    values or can be bound to a dynamic expression. You can define a property for
    a type in C++ by registering a `Q_PROPERTY()` macro and registering it with the
    QML type system. As described in the preceding examples, a custom property can
    be defined in an object declaration with the following syntax: `property propertyType
    propertyName`. The name of the declared property must begin with a lowercase letter
    and can contain letters, numbers, and underscores. It is not permitted to use
    reserved JavaScript words as property names. Custom properties implicitly create
    a value-change signal for that property. The signal handler associated with this
    property will be in the form of `onPropertyNameChanged`, where `PropertyName` is the
    name of the property, with the first letter capitalized. One of the main features
    of QML is the binding of properties. Binding allows us to use dynamic object behavior
    by specifying relationships between object properties, depending on changes. Let''s
    implement the following steps:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: QML中的属性是对象的属性，可以是静态值或绑定到动态表达式。您可以通过注册`Q_PROPERTY()`宏并在QML类型系统中注册它来在C++中为类型定义属性。如前所述的示例中，可以在对象声明中使用以下语法定义自定义属性：`property
    propertyType propertyName`。声明的属性名称必须以小写字母开头，可以包含字母、数字和下划线。不允许使用保留的JavaScript单词作为属性名称。自定义属性隐式创建一个值更改信号。与此属性关联的信号处理程序将采用`onPropertyNameChanged`的形式，其中`PropertyName`是属性名称，首字母大写。QML的一个主要特性是属性的绑定。绑定允许我们通过指定对象属性之间的关系，根据变化使用动态对象行为。让我们实现以下步骤：
- en: 'Create the `UButton.qml` file in the `qmls/` directory with a simple `Button`
    type inside it:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`qmls/`目录中创建`UButton.qml`文件，并在其中包含一个简单的`Button`类型：
- en: '[PRE24]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will create the standard QML button.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建标准的QML按钮。
- en: Look at the features in the `u_qml.qml` file. Change some lines and add the
    standard QML button.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 查看`u_qml.qml`文件中的功能。更改一些行并添加标准的QML按钮。
- en: 'Add a custom property to the first rectangle and change the `MouseArea` so
    that you have something similar to the following code:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 向第一个矩形添加一个自定义属性，并更改`MouseArea`，使其类似于以下代码：
- en: '[PRE25]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '`rzwidth` is a custom property on the initialization.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`rzwidth`是在初始化时定义的自定义属性。'
- en: 'Change the second rectangle and add the button:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改第二个矩形并添加按钮：
- en: '[PRE26]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Setting the visible property to `false` means that `rect2` will not be visible.
    When the button is clicked, the imperative value assignment is used for resizing
    `rect1`. The result looks as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 将可见属性设置为`false`意味着`rect2`将不可见。当按钮被点击时，使用命令值赋值来调整`rect1`的大小。结果如下所示：
- en: '![](img/df329f31-a3cf-4d1a-8790-ae90c4d0a025.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df329f31-a3cf-4d1a-8790-ae90c4d0a025.png)'
- en: 'QML allows the following valid types with custom property definitions:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: QML允许使用自定义属性定义以下有效类型：
- en: '`int 1`'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int 1`'
- en: '`string "String"`'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string "String"`'
- en: '`url "https://doc.qt.io"`'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url "https://doc.qt.io"`'
- en: Any QML object type can be used as a property type, for example, `property Rectangle
    YouRectangle`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 任何QML对象类型都可以用作属性类型，例如，`property Rectangle YouRectangle`。
- en: 'The value of the property of the object instance may be specified as a value
    assignment on initialization or by imperative value assignment. Assigning a value
    to a property on initialization will be done in the following form:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实例的属性值可以在初始化时指定为值赋值或通过命令值赋值。在初始化时对属性赋值将采用以下形式：
- en: '[PRE27]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Imperative value assignment is where a property value is assigned to a property
    using imperative JavaScript code:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 命令值赋值是在使用命令JavaScript代码将属性值赋给属性时：
- en: '[PRE28]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Values that can be assigned to a property can be in static or binding expression
    form. A static value is a constant value that does not depend on other properties,
    and a binding expression is a JavaScript expression that describes the binding
    of a property with other properties. The property value must match the property
    type. Also, it can be assigned a list type property, where the list consists of
    QML object-type values as states, for example, `[State {name: "value1"}, State
    {name: "value2"}]`.  Properties can be grouped like so for `font` values of the
    `Text` object:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '可以分配给属性的值可以是静态或绑定表达式形式。静态值是一个不依赖于其他属性的常量值，绑定表达式是一个描述属性与其他属性之间绑定关系的JavaScript表达式。属性值必须匹配属性类型。此外，还可以分配列表类型属性，其中列表由QML对象类型值作为状态组成，例如，`[State
    {name: "value1"}, State {name: "value2"}]`。属性可以像这样按`font`值对`Text`对象的属性进行分组：'
- en: '[PRE29]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The property can be declared as an alias property, which means that the property
    connects the aliasing property as a reference to the aliased property. A property
    alias declaration is similar to an ordinary property definition with an added
    alias keyword and valid alias reference.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 属性可以声明为别名属性，这意味着属性将别名属性作为对被别名属性的引用连接起来。属性别名声明类似于普通属性定义，只是添加了别名关键字和有效的别名引用。
- en: Signal attributes
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号属性
- en: 'A **signal** is a notification from an emitter object stating that an event
    has occurred. This may be a change in text, pressing a button, moving the cursor,
    and so on. Through the signal handler, some objects can be notified that a signal
    has been emitted. Signal declarations can be in the following forms:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '**信号**是从发射对象发出的通知，表明已发生事件。这可能包括文本的变化、按钮的按下、光标的移动等等。通过信号处理程序，某些对象可以被通知已发出信号。信号声明可以以下列形式存在：'
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: With such a property, a signal may be defined for a type in C++ by registering
    a `Q_SIGNAL` macro with the QML type system. Also, a custom signal can be defined
    in a QML document. Typically, a QML signal handler definition is provided inside
    the object where the signal will be issued, as in the preceding `MouseArea` example.
    Also, QML allows us to use signals separately from the object with the `Connections` type.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这样的属性，可以通过在QML类型系统中注册一个`Q_SIGNAL`宏来为C++中的类型定义一个信号。此外，也可以在QML文档中定义自定义信号。通常，QML信号处理程序定义位于将发出信号的物体内部，如前面的`MouseArea`示例所示。此外，QML还允许我们使用`Connections`类型独立于对象使用信号。
- en: Signal handler attributes
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号处理程序属性
- en: 'To demonstrate the implementation of signal handlers, let''s look at the `u_qml.qml`
    file:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示信号处理程序的实现，让我们看看`u_qml.qml`文件：
- en: '[PRE31]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This adds a background color to the application window. Now, let''s perform
    the following steps:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这为应用程序窗口添加了背景颜色。现在，让我们执行以下步骤：
- en: 'Add a `Connections` type and a custom handler to the first rectangle:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为第一个矩形添加一个`Connections`类型和自定义处理程序：
- en: '[PRE32]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This adds the `onColored`signal handler and creates the connections for the
    mouse area of the rectangle. It also sets the target for `Connections` as the
    mouse area of `rect1`.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这添加了`onColored`信号处理程序并创建了矩形的鼠标区域连接。它还将`Connections`的目标设置为`rect1`的鼠标区域。
- en: 'Add some additional properties for the button of the second rectangle:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为第二个矩形的按钮添加一些额外的属性：
- en: '[PRE33]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This code adds the `width` and `height` properties to the button with the `id`
    specified. We can see the result of this if we run the `u_app.py` file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码为具有指定`id`的按钮添加了`width`和`height`属性。如果我们运行`u_app.py`文件，我们可以看到此结果：
- en: '![](img/ab46069b-b525-4e78-a569-7b8c3a56fb33.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ab46069b-b525-4e78-a569-7b8c3a56fb33.png)'
- en: As we can see, the `colored()` signal was declared in the `rect1` object, and
    then was emitted with the `onPressed` signal handler of the `Connections` related
    to the `MouseArea` by `id`. This signal was received by the `onColored` signal
    handler of `rect1`.  A lot of QML types have defined signals. For example, text
    fields have `accepted()`, `editingFinished()`, `textEdited()`; buttons have `Button`,
    `RadioButton`, and `CheckBox`, while `ComboBox` has `clicked()`, `accepted()`,
    and `activated()` signals, respectively. Signals will be described in more detail
    in [Chapter 15](a3094641-a532-4f1a-adf1-72c85526f7bf.xhtml), *Signals, Slots,
    and Event Handler*s, along with how they are related to PyQt and PySide, but their
    logic is similar.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，`colored()`信号在`rect1`对象中声明，然后通过`id`与`MouseArea`相关的`Connections`的`onPressed`信号处理程序一起发出。此信号被`rect1`的`onColored`信号处理程序接收。许多QML类型都定义了信号。例如，文本字段有`accepted()`、`editingFinished()`、`textEdited()`；按钮有`Button`、`RadioButton`和`CheckBox`，而`ComboBox`分别有`clicked()`、`accepted()`和`activated()`信号。信号将在第15章中更详细地描述，*信号、槽和事件处理程序*，以及它们与PyQt和PySide的关系，但它们的逻辑是相似的。
- en: Method attributes
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法属性
- en: Some functions can be defined to realize a certain functionality. Methods can
    be registered with the QML type system with the `Q_INVOKABLE` macro or by registering
    it as a `Q_SLOT` macro, such as with signals. A custom method can be defined by
    adding `function functionName(parameterName) {body of the function}` to the object
    declaration. Usually, methods provide some functionality related to the calculation
    or usage of the JavaScript code. Let's look at an example of using this function
    with QML.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 可以定义一些函数以实现特定的功能。方法可以通过`Q_INVOKABLE`宏或将其注册为`Q_SLOT`宏（例如，与信号一起）与QML类型系统注册。可以通过在对象声明中添加`function
    functionName(parameterName) {函数体}`来定义自定义方法。通常，方法提供与JavaScript代码的计算或使用相关的某些功能。让我们看看使用此函数与QML的示例。
- en: 'Let''s add a method to `rect1`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`rect1`中添加一个方法：
- en: '[PRE34]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The `onUcolor` function will return a white color if `rect1` is not white and
    return *shuttle* color (the color that looks similar to dark blue) if the color
    is white.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`rect1`不是白色，`onUcolor`函数将返回白色，如果颜色是白色，则返回*shuttle*颜色（看起来类似于深蓝色的颜色）。
- en: JavaScript and QML
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript和QML
- en: One of the strongest features of QML is the ability to provide JavaScript functionality.
    This allows us to use various expressions and methods as JavaScript functions.
    QML has deep JavaScript integration, which allows it to use the definitions of
    methods and signal handlers in JavaScript form. We discussed using JavaScript
    as an imported resource in the *Import statements* section. Let's take a look
    at the JavaScript host environment and the restrictions of its use.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: QML最强大的功能之一是提供JavaScript功能。这允许我们使用各种表达式和方法作为JavaScript函数。QML具有深度的JavaScript集成，这使得它能够使用JavaScript形式的函数定义和信号处理器。我们在*导入语句*部分讨论了将JavaScript作为导入资源的使用。让我们看看JavaScript宿主环境和其使用的限制。
- en: 'The QML engine provides a JavaScript environment, and this environment is slightly
    different from the environments provided by web browsers. QML documents may contain
    JavaScript code in the following forms:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: QML引擎提供了一个JavaScript环境，并且这个环境与网络浏览器提供的环境略有不同。QML文档可能包含以下形式的JavaScript代码：
- en: With property bindings, where the code describes relationships between QML object
    properties.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在属性绑定中，代码描述了QML对象属性之间的关系。
- en: With the implementation of the signal handlers.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在实现信号处理器后。
- en: In the definition of the custom methods, where functions are defined within
    the body of a QML object and may consist of the variable setting, arrays, loops,
    and conditional operators.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在自定义方法的定义中，函数在QML对象的主体内部定义，可能包括变量设置、数组、循环和条件运算符。
- en: As an import of the standalone JavaScript files.
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为独立JavaScript文件的导入。
- en: 'There are environment restrictions for JavaScript code:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript代码存在环境限制：
- en: JavaScript code cannot modify the global object if this code is located inside
    `somefile.qml`, and can modify the global object from `somefile.js`.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果此代码位于`somefile.qml`内部，JavaScript代码不能修改全局对象，但可以从`somefile.js`修改全局对象。
- en: Global code is run in a reduced scope, except for code with local script variables.
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 除了具有本地脚本变量的代码外，全局代码在缩减的作用域中运行。
- en: The `this` keyword is only available with binding properties and is not defined
    in QML.
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`this`关键字仅在绑定属性中可用，在QML中未定义。'
- en: Type system and QML documents
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类型系统和QML文档
- en: 'In QML, types can be used in the definition of an object natively by the QML
    language, registered via C++, or QML documents. This can be represented as follows:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在QML中，类型可以在对象定义中使用QML语言本地化，通过C++注册，或通过QML文档注册。这可以表示如下：
- en: '**Basic types**:'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基本类型**：'
- en: '`bool`: `true`/`false` values.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bool`: `true`/`false`值。'
- en: '`double`: Decimal numbers with double precision.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`double`: 双精度小数。'
- en: '`enumeration`: Named values.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enumeration`: 命名值。'
- en: '`int`: Integer numbers.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int`: 整数。'
- en: '`list`: Lists of QML objects.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`list`: QML对象的列表。'
- en: '`real`: Decimal numbers.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`real`: 小数。'
- en: '`string`: Text strings.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`: 文本字符串。'
- en: '`url`: Universal resource locators.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 通用资源定位符。'
- en: '`var`: Generic property.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`var`: 通用属性。'
- en: '**JavaScript types**: Any JavaScript objects allowed by the QML engine.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**JavaScript类型**：QML引擎允许的任何JavaScript对象。'
- en: '**QML object types**: Modules provided by QML, such as the `QtQuick` module.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**QML对象类型**：由QML提供的模块，例如`QtQuick`模块。'
- en: A QML document, represented as a string, written using the syntactical rules
    of a QML document, has a file extension of `.qml` and contains a validated structure.
    The structure of the document is usually in two parts. The first part is an `import`
    section while the second part is an object declaration section, separated by an
    empty line. Since QML is transparent to the network, this makes it possible to
    import QML documents from local and remote paths.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一个以QML文档的语法规则编写的字符串表示的QML文档，具有`.qml`文件扩展名，并包含一个经过验证的结构。文档的结构通常分为两部分。第一部分是`import`部分，而第二部分是对象声明部分，由一个空行分隔。由于QML对网络是透明的，这使得可以从本地和远程路径导入QML文档。
- en: The QtQml module
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QtQml模块
- en: 'In contrast with the `QtQuick` module, which provides the UI components and
    functionality, the `QtQml` module provides a framework for developing applications
    with QML and realizes the language and engine infrastructure. This module provides
    an API to extend QML with custom type implementation and allows us to integrate
    QML with JavaScript and C++. Some of the types that are usually used with `QtQml`
    are described here. The module has the `import` statement:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 与提供UI组件和功能的`QtQuick`模块相比，`QtQml`模块提供了一个使用QML开发应用程序的框架，并实现了语言和引擎基础设施。此模块提供了一个API，用于通过自定义类型实现扩展QML，并允许我们将QML与JavaScript和C++集成。这里描述了一些通常与`QtQml`一起使用的类型。模块具有`import`语句：
- en: '[PRE35]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This can be interpreted as a C++ preprocessor:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以解释为C++预处理器：
- en: '[PRE36]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Let's go over the types of infrastructure objects that ` QtQml` includes.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下`QtQml`包含的基础对象类型。
- en: Component
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组件
- en: 'A QML component definition has the following properties:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: QML组件定义具有以下属性：
- en: '`progress`: A `real` value that shows the progress of loading the component,
    and can range from `0.0` to `1.0`.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress`: 一个表示组件加载进度的`实数`值，范围从`0.0`到`1.0`。'
- en: '`status`: This `enumeration` shows the status of the component loading.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`status`: 这是一个`枚举`，显示组件加载的状态。'
- en: '`url`: This is the **Universal Resource Locator** (**URL**) that''s used for
    component construction.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`url`: 这是用于组件构造的**统一资源定位符**（**URL**）。'
- en: QtObject
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QtObject
- en: 'This type contains the `objectName` property:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型包含`objectName`属性：
- en: '`objectName`: This is the name of the object for a specific string.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`objectName`: 这是特定字符串的对象名称。'
- en: Binding
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绑定
- en: 'This type is for creating property bindings. This type has the following properties:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于创建属性绑定。此类型具有以下属性：
- en: '`delayed`: This can be `true` or `false`. If it''s `true`, the binding will
    be delayed.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`delayed`: 这可以是`true`或`false`。如果是`true`，则绑定将被延迟。'
- en: '`property`: This can be any string and specifies the name of the property to
    be updated.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`property`: 这可以是任何字符串，并指定要更新的属性的名称。'
- en: '`target`: This is the object to be updated.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`target`: 这是需要更新的对象。'
- en: '`value`: This can be any object or property and sets the value for the target
    object and property.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`: 这可以是任何对象或属性，并为目标对象和属性设置值。'
- en: '`when`: This can be `true` or `false` and is set when a binding is active.
    An expression should return `true` or `false`.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`when`: 这可以是`true`或`false`，并在绑定活动时设置。表达式应返回`true`或`false`。'
- en: Connections
  id: totrans-216
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接
- en: 'This type provides connections to signals. These are the available properties:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供对信号的连接。这些是可用的属性：
- en: '`enabled`: This can be `true` or `false`. Connections and events are enabled
    for an item.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`enabled`: 这可以是`true`或`false`。对于项目，连接和事件被启用。'
- en: '`ignoreUnknownSignals`: This can be `true` or `false` and allows us to ignore
    unknown signals, such as errors.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`ignoreUnknownSignals`: 这可以是`true`或`false`，并允许我们忽略未知信号，例如错误。'
- en: '`target`: This is an object, and the emitter of the signal.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`target`: 这是一个对象，也是信号的发射者。'
- en: Timer
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定时器
- en: 'This QML type provides the timer that triggers an action with an interval.
    It has the following properties:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 此QML类型提供了触发动作的定时器。它具有以下属性：
- en: '`interval`: This integer sets the interval in milliseconds (the default is
    `1000` ms).'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`interval`: 这是一个整数，用于设置毫秒间隔（默认为`1000`毫秒）。'
- en: '`repeat`: This can be `true` or `false`, and repeats this trigger if this property
    is `true`.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`repeat`: 这可以是`true`或`false`，如果此属性为`true`，则重复此触发器。'
- en: '`running`: This can be `true` or `false`. If the property is `true`, it starts
    the timer.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`running`: 这可以是`true`或`false`。如果属性为`true`，则启动定时器。'
- en: '`triggeredOnStart`: This can be `true` or `false`. If the property is `true`,
    it starts the trigger when the timer starts.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`triggeredOnStart`: 这可以是`true`或`false`。如果属性为`true`，则在定时器开始时启动触发器。'
- en: In addition, `QtQml` includes a submodule, `QtQml.Models`, that defines data
    models in QML.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`QtQml` 包含一个子模块 `QtQml.Models`，它定义了 QML 中的数据模型。
- en: Styling in QML
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QML 中的样式
- en: We've completed the short introduction to QML syntax. Let's try to implement
    some of the properties of objects to better visualize the elements and improve
    their style.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了对 QML 语法简介的简短介绍。让我们尝试实现一些对象的属性，以更好地可视化元素并改进它们的样式。
- en: Item
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Item
- en: 'The most commonly used QML type that is inherited by almost all geometrical
    visualized object types is `Item`. This is a base type for all visual items in
    `QtQuick`. The `import` statement that''s used in QML is as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 最常用的由几乎所有几何可视化对象类型继承的 QML 类型是 `Item`。这是 `QtQuick` 中所有可视项的基础类型。在 QML 中使用的 `import`
    语句如下：
- en: '[PRE37]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Note that versions of `QtQuick` can vary, depending on the version of Qt that
    you have installed.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`QtQuick` 的版本可能因你安装的 Qt 版本而异。
- en: 'The properties of the item type are as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 项类型的属性如下：
- en: '`enabled`: This can be `true` or `false`. The item is enabled to receive mouse
    and keyboard events (the default is `true`).'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`enabled`：这可以是 `true` 或 `false`。项被启用以接收鼠标和键盘事件（默认为 `true`）。'
- en: '`x`: This is a `real` number that sets the position of this item on the *x*
    axis (the default is `0.0`).'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`：这是一个设置此项在 *x* 轴上位置的 `real` 数值（默认为 `0.0`）。'
- en: '`y`: This is a `real` number that sets the position of this item on the *y*
    axis (the default is `0.0`).'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`y`：这是一个设置此项在 *y* 轴上位置的 `real` 数值（默认为 `0.0`）。'
- en: '`z`: This is a `real` number that sets the stacking order of sibling items.
    Items with a `z` that are higher than other items will cover other items (the
    default is `0.0`).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`z`：这是一个设置兄弟项堆叠顺序的 `real` 数值。具有高于其他项的 `z` 值的项将覆盖其他项（默认为 `0.0`）。'
- en: '`width`: This is a `real` number that sets the width of this item.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`：这是一个设置此项宽度的 `real` 数值。'
- en: '`height`: This is a `real` number that sets the height of this item.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`：这是一个设置此项高度的 `real` 数值。'
- en: '`implicitWidth`: This is a `real` number that sets the natural width of this
    item.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`implicitWidth`：这是一个设置此项自然宽度的 `real` 数值。'
- en: '`implicitHeight`:  This is a `real` number that sets the natural height of
    this item.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`implicitHeight`：这是一个设置此项自然高度的 `real` 数值。'
- en: '`opacity`:  This is a `real` number that sets the opacity of this item. `0.0`
    is fully transparent and `1.0` is fully opaque (the default is `1.0`).'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity`：这是一个设置此项不透明度的 `real` 数值。`0.0` 表示完全透明，`1.0` 表示完全不透明（默认为 `1.0`）。'
- en: '`parent`: This (name of the parent) sets the parent for this item.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`parent`：此（父项名称）设置此项的父项。'
- en: '`resources`: This is the resources list for this item.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`resources`：这是此项的资源列表。'
- en: '`clip`: This can be `true` or `false` and allows this item to clip its own
    painting. Clipping will be enabled (the default is `false`).'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`clip`：这可以是 `true` 或 `false`，并允许此项剪切其自己的绘制。剪切将启用（默认为 `false`）。'
- en: '`rotation`: This is a `real` number that rotates this item in degrees clockwise
    around its own axis (the default is `0`).'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotation`：这是一个 `real` 数值，将此项顺时针旋转一定角度（默认为 `0`）。'
- en: '`scale`: This is a real number and is the scale factor for this item (the default
    is `1.0`).'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale`：这是一个 `real` 数值，是此项的缩放因子（默认为 `1.0`）。'
- en: '`smooth`: This can be `true` or `false`. If `true`, smooth sampling will be
    used.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`smooth`：这可以是 `true` 或 `false`。如果为 `true`，则将使用平滑采样。'
- en: '`state`: This string sets the name of the current state of this item.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`：此字符串设置此项当前状态的名称。'
- en: '`states`: This is the list of possible states for this item.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`states`：这是此项可能的州列表。'
- en: '`transform`: This is the list of transformations to apply to this item.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform`：这是应用于此项的变换列表。'
- en: '`transformOrigin`: This `enumeration` sets the origin point around which scaling
    and rotation will transform this item (the default is `Item.Center`).'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformOrigin`：此 `enumeration` 设置缩放和旋转将转换此项的基点（默认为 `Item.Center`）。'
- en: '`transitions`:This is the list of transitions for this item.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitions`：这是此项的过渡列表。'
- en: '`visible`: This can be `true` or `false` and sets this item to be visible (the
    default is `true`).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`visible`：这可以是 `true` 或 `false`，并设置此项是否可见（默认为 `true`）。'
- en: '`visibleChildren`: This is the list of children that will be visible.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`visibleChildren`：这是将可见的子项列表。'
- en: '`antialiasing`**:** This can be `true` or `false` and provides antialiasing
    for this item.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`antialiasing`**：**这可以是 `true` 或 `false`，并为此项提供抗锯齿。'
- en: '`activeFocus`: This can be `true` or `false` and sets whether this item will
    have active focus or not.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocus`：这可以是 `true` 或 `false`，并设置此项是否具有活动焦点。'
- en: '`activeFocusOnTab`: This can be `true` or `false` and sets whether the item
    will have active focus in the tab focus chain (the default is `false`).'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnTab`: 这可以是 `true` 或 `false`，并设置项目是否将在标签焦点链中具有活动焦点（默认为 `false`）。'
- en: '`focus`: This can be `true` or `false`. If `true`, it will gain active focus
    when the enclosing `FocusScope` gains active focus.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`focus`: 这可以是 `true` 或 `false`。如果为 `true`，当包含的 `FocusScope` 获得活动焦点时，它将获得活动焦点。'
- en: '`anchors.top`: This `AnchorLine` is the relationship between the top position
    of an item to this item.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.top`: 这个 `AnchorLine` 是项目与此项目顶部位置之间的关系。'
- en: '`anchors.bottom`: This `AnchorLine` is the relationship between the bottom
    position of an item to this item.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.bottom`: 这个 `AnchorLine` 是项目与此项目底部位置之间的关系。'
- en: '`anchors.left`: This `AnchorLine` is the relationship between the left position
    of an item to this item.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.left`: 这个 `AnchorLine` 是项目与此项目左侧位置之间的关系。'
- en: '`anchors.right`: This `AnchorLine` is the relationship between the right position
    of the item to this item.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.right`: 这个 `AnchorLine` 是项目与此项目右侧位置之间的关系。'
- en: '`anchors.horizontalCenter`: This `AnchorLine` is the relationship between the
    horizontal center position of an item to this item.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.horizontalCenter`: 这个 `AnchorLine` 是项目与此项目水平中心位置之间的关系。'
- en: '`anchors.verticalCenter`: This `AnchorLine` is the relationship between the
    vertical center position of an item to this item.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.verticalCenter`: 这个 `AnchorLine` 是项目与此项目垂直中心位置之间的关系。'
- en: '`anchors.baseline`: This `AnchorLine` is the relationship between the positions
    of the imaginary line of text of this item and another item. If the text does
    not exist, this will be same as `anchors.top`.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.baseline`: 这个 `AnchorLine` 是此项目的文本假想线与另一个项目位置之间的关系。如果文本不存在，这将与 `anchors.top`
    相同。'
- en: '`anchors.fill`: This `Item` is the relationship between the positions that makes the
    geometry of one item the same as another item.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.fill`: 这个 `Item` 是设置一个项目的几何形状与另一个项目相同的锚点关系。'
- en: '`anchors.centerIn`: This `Item` in the relationship between the positions that sets
    the position of this item to the center of the specified `Item`.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.centerIn`: 这个 `Item` 在设置此项目位置为指定 `Item` 中心位置的关系中。'
- en: '`anchors.margins`: This is a `real` number that sets the margins between anchors
    of the related items.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.margins`: 这是一个设置相关项目锚点之间边距的 `real` 数值。'
- en: '`anchors.topMargin`: This is a `real` number that sets the top margin between
    this item and another.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.topMargin`: 这是一个设置此项目与另一个项目之间顶部边距的 `real` 数值。'
- en: '`anchors.bottomMargin`: This is a `real` number that sets the bottom margin
    between this item and another.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.bottomMargin`: 这是一个设置此项目与另一个项目之间底部边距的 `real` 数值。'
- en: '`anchors.leftMargin`: This is a `real` number that sets the left margin between
    this item and another.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.leftMargin`: 这是一个设置此项目与另一个项目之间左边距的 `real` 数值。'
- en: '`anchors.rightMargin`: This is a `real` number that sets the right margin between
    this item and another.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.rightMargin`: 这是一个设置此项目与另一个项目之间右边距的 `real` 数值。'
- en: '`anchors.horizontalCenterOffset`: This is a `real` number that sets the offset
    of the horizontal center position of the related item.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.horizontalCenterOffset`: 这是一个设置相关项目水平中心位置偏移的 `real` 数值。'
- en: '`anchors.verticalCenterOffset`: This is a `real` number that sets the offset
    of the vertical center position of the related item.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.verticalCenterOffset`: 这是一个设置相关项目垂直中心位置偏移的 `real` 数值。'
- en: '`anchors.baselineOffset`: This is a `real` number that sets the offset to the
    imaginary line of the text.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.baselineOffset`: 这是一个设置文本假想线偏移的 `real` 数值。'
- en: '`anchors.alignWhenCentered`: This can be `true` or `false` and centers anchors
    to align to a whole pixel (the default is `true`).'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.alignWhenCentered`: 这可以是 `true` 或 `false`，并将锚点居中以便对齐到整个像素（默认为 `true`）。'
- en: '`baselineOffset`: This integer is the position of the item''s baseline in local
    coordinates. For text items, it is the imaginary line where the text is located.
    For non-text items, it is `0` (the default is `0`).'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`baselineOffset`: 这个整数是项目基线在局部坐标中的位置。对于文本项，它是文本所在的假想线。对于非文本项，它是 `0`（默认为 `0`）。'
- en: '`children`: This is a list of the children of this item.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`children`: 这是一个包含此项目子项的列表。'
- en: '`childrenRect.x`: This is a `real` number and is the *x* axis coordinate of
    the children of this item.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`childrenRect.x`: 这是一个 `real` 数值，是此项目子项的 *x* 轴坐标。'
- en: '`childrenRect.y`: This is a `real` number and is the *y* axis coordinate of
    the children of this item.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`childrenRect.y`: 这是一个 `real` 数值，是此项目子项的 *y* 轴坐标。'
- en: '`childrenRect.width`: This is a `real` number and is the width of the children
    of this item.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`childrenRect.width`: 这是一个`real`数字，是此项目子项的宽度。'
- en: '`childrenRect.height`**:** This is a `real` number and is the height of the
    children of this item.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`childrenRect.height`**:** 这是一个`real`数字，是此项目子项的高度。'
- en: '`data`: This list allows us to mix visual children and resources in an item.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`: 此列表允许我们在一个项目中混合视觉子项和资源。'
- en: '`layer.effect`: The component has the effect (for example, the `ShaderEffect` component)
    applied to the layer.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.effect`: 组件具有应用于层的效果（例如，`ShaderEffect`组件）。'
- en: '`layer.enabled`: This can be `true` or `false`. If `true`, it allows this item
    to be layered (the default is `false`).'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.enabled`: 这可以是`true`或`false`。如果为`true`，则允许此项目分层（默认为`false`）。'
- en: '`layer.format`: This `enumeration` defines the internal OpenGL format of the
    texture.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.format`: 这个`枚举`定义了纹理的内部OpenGL格式。'
- en: '`layer.mipmap`: This can be `true` or `false`. If `true`, it generates mipmaps for
    the texture.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.mipmap`: 这可以是`true`或`false`。如果为`true`，则为纹理生成米普贴图。'
- en: '`layer.samplerName`: This string is the name of the effect''s source texture
    property.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.samplerName`: 此字符串是效果的源纹理属性的名称。'
- en: '`layer.smooth`: This can be `true` or `false`. If `true`, it smoothly transforms
    the layer.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.smooth`: 这可以是`true`或`false`。如果为`true`，则平滑地转换层。'
- en: '`layer.sourceRect`: This `Rectangle` is the rectangular area of this item that
    should be rendered into the texture.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.sourceRect`: 此`Rectangle`是应渲染到纹理中的此项目的矩形区域。'
- en: '`layer.textureMirroring`: This `enumeration` sets how the OpenGL texture will
    be mirrored (the default is `ShaderEffectSource.MirrorVertically`).'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.textureMirroring`: 此`枚举`设置OpenGL纹理的镜像方式（默认为`ShaderEffectSource.MirrorVertically`）。'
- en: '`layer.textureSize`: This `size` is the pixel size of the layer''s texture.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.textureSize`: 此`size`是层的纹理的像素大小。'
- en: '`layer.wrapMode`: This `enumeration` is the OpenGL wrap modes associated with
    the texture.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`layer.wrapMode`: 此`枚举`是与纹理关联的OpenGL包装模式。'
- en: 'The following lines of code partially explain the features of `Item`. Create
    a file called `UItem.qml` in the `qmls/` directory and add the code that follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码行部分解释了`Item`的功能。在`qmls/`目录下创建一个名为`UItem.qml`的文件，并添加以下代码：
- en: '`main_item` is the parent item of all the items inside this `Item`:'
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`main_item`是此`Item`内部所有项目的父项目：'
- en: '[PRE38]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `id` of this item is `main_item`. This item will have a size that's similar
    to the `parent`, with a margin of `20` pixels.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 此项目的`id`是`main_item`。此项目将具有与`parent`相似的大小，并具有`20`像素的边距。
- en: 'Add the first item to the `Item` with `id: main_item`:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将第一个项目添加到具有`id: main_item`的`Item`中：'
- en: '[PRE39]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This `Item` describes properties such as the `z` index (this item will cover
    the item with less index), `opacity` (this item will be half opaque), and so on.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 此`Item`描述了诸如`z`索引（此项目将覆盖索引较小的项目）、`opacity`（此项目将半透明）等属性。
- en: 'Add the second item to the `Item` with `id: main_item`:'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将第二个项目添加到具有`id: main_item`的`Item`中：'
- en: '[PRE40]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The second item has `parent` and `scale` properties. The `parent` property sets
    the `parent` for this item and the `scale` property sets the size, which will
    be two times more than the `parent` item's size.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个项目具有`parent`和`scale`属性。`parent`属性为此项目设置`parent`，而`scale`属性设置大小，将是父项目大小的两倍。
- en: 'Add the third item to the `Item` with `id: main_item`:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将第三个项目添加到具有`id: main_item`的`Item`中：'
- en: '[PRE41]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: The third item has the `anchors.centerIn` and `rotation` properties. The `anchors.centerIn` property
    sets this item to the center of the `parent`, and the `rotation` property will
    rotate this item by `90` degrees. This item is almost opaque.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 第三项具有`anchors.centerIn`和`rotation`属性。`anchors.centerIn`属性将此项目设置为`parent`的中心，而`rotation`属性将此项目旋转`90`度。此项目几乎不透明。
- en: 'Then, add the fourth item to `main_item`:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将第四个项目添加到`main_item`：
- en: '[PRE42]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `rotation` property will rotate this item by `45` degrees clockwise, while
    the `scale` factor sets the size of this item equal to 70% of the parent item.
    The `antialiasing` property has been added to the rectangle of this item to get
    the best performance of the element visualization.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotation`属性将按顺时针方向旋转此项目`45`度，而`scale`因子将此项目的大小设置为父项目大小的70%。已将`antialiasing`属性添加到此项目的矩形中，以获得最佳元素可视化性能。'
- en: 'To run this file, you can use Qt Creator or add the following lines to the
    `u_qml.qml` file, somewhere after the first rectangle. Add the items to the QML
    application:'
  id: totrans-312
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行此文件，您可以使用Qt Creator或将以下行添加到`u_qml.qml`文件中，在第一个矩形之后某处。将项目添加到QML应用程序中：
- en: '[PRE43]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The main item will be visible, with a `width` and `height` related to `rect1`. This
    is the result:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 主要项将是可见的，其`width`和`height`与`rect1`相关。这是结果：
- en: '![](img/8284f7ec-03e6-4ddc-84a6-dcad336b0325.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8284f7ec-03e6-4ddc-84a6-dcad336b0325.png)'
- en: Rectangle
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Rectangle
- en: The `Rectangle` type is a popular type when creating QML objects. `Rectangle`
    inherits from the `Item` type.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rectangle`类型是在创建QML对象时常用的类型。`Rectangle`从`Item`类型继承。'
- en: 'The `import` statement for using the `Rectangle` QML type is as follows:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Rectangle` QML类型的`import`语句如下：
- en: '[PRE44]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The `Rectangle` properties are as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`Rectangle`的属性如下：'
- en: '`antialiasing`: This can be `true` or `false`. It is provided if the rectangle
    should use antialiasing.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`antialiasing`: 这可以是`true`或`false`。如果矩形应该使用抗锯齿，则提供此选项。'
- en: '`border.width`: This `int` is the width of the rectangle''s borders.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`border.width`: 这是一个`int`类型的数字，表示矩形的边框宽度。'
- en: '`border.color`:  This is the color of the rectangle''s borders.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`border.color`: 这是矩形边框的颜色。'
- en: '`color`: This is the color of the rectangle.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`color`: 这是矩形的颜色。'
- en: '`gradient`: This is the gradient color of the rectangle.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient`: 这是矩形的渐变颜色。'
- en: '`radius`: This is the radius of the rectangle item.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`radius`: 这是矩形项的半径。'
- en: RectangularGlow
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RectangularGlow
- en: 'This is used to create a blurred and colorized rectangle with a glowing effect.
    The import statement is as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于创建一个具有发光效果的模糊和着色矩形。以下是导入语句：
- en: '[PRE45]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The properties of `RectangularGlow` are as follows:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`RectangularGlow`的属性如下：'
- en: '`color`: This is the color that''s used for the glow.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`color`: 这是用于发光的颜色。'
- en: '`cornerRadius`: This is a `real` number to set the radius that is used to draw
    a glow with rounded corners.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`cornerRadius`: 这是一个用于绘制带圆角的发光的`real`类型的数字。'
- en: '`glowRadius`: This is a `real` number  that sets the radius in pixels that
    is reached by the glow.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`glowRadius`: 这是一个`real`类型的数字，用于设置发光到达的像素半径。'
- en: '`spread`: This is a `real` number that sets the strength of the glow color
    near the edges of the source.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`spread`: 这是一个`real`类型的数字，用于设置源边缘附近发光颜色的强度。'
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`cached`: 这可以是`true`或`false`。它允许效果的输出像素被缓存以提高性能。'
- en: 'To demonstrate this effect, create a file called `URectGlow.qml` in the `qmls/`
    directory and implement the following steps:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这个效果，在`qmls/`目录中创建一个名为`URectGlow.qml`的文件，并执行以下步骤：
- en: 'Add the parent rectangle and rectangular glow to the `URectGlow.qml` file:'
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将父矩形和矩形发光添加到`URectGlow.qml`文件中：
- en: '[PRE46]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This code imports the graphical effects and adds the custom properties `glowcolor`
    and `txglow`. The `glowcolor` property is used to specify the color of the glow,
    while `txglow` is used for the color of the text glow.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码导入图形效果并添加自定义属性`glowcolor`和`txglow`。`glowcolor`属性用于指定发光颜色，而`txglow`用于文本发光的颜色。
- en: 'Then, add the central rectangle after the `RectangularGlow`:'
  id: totrans-340
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在`RectangularGlow`之后添加中心矩形：
- en: '[PRE47]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The rectangle will have a glow effect with a color that's similar to the parent's
    rectangle color. Set the radius of the rectangle corners.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形将具有与父矩形颜色相似的发光效果。设置矩形角落的半径。
- en: 'Add the `Text` and `Glow` types to the central rectangle:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Text`和`Glow`类型添加到中心矩形：
- en: '[PRE48]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: The preceding code adds the `Text` and `Glow` QML types to the central rectangle.
    `Text` is used to display the text on the rectangle, while `Glow` is used to make
    the text inside the rectangle glow.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码将`Text`和`Glow` QML类型添加到中心矩形中。`Text`用于在矩形上显示文本，而`Glow`用于使矩形内的文本发光。
- en: Gradients
  id: totrans-346
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 渐变
- en: Gradients are used to visualize objects better. They provide more effective
    colors than using a simple color property.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 渐变用于更好地可视化对象。它们提供的颜色比使用简单的颜色属性更有效。
- en: Gradient
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 梯度
- en: 'This QML type provides a gradient color for the element. Here''s the `import`
    statement:'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 这个QML类型为元素提供渐变颜色。以下是`import`语句：
- en: '[PRE49]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: It has a property called `stops` that provides a list of the stops for the gradient.
    You can do this by using `GradientStop`.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个名为`stops`的属性，提供了渐变停止点的列表。你可以通过使用`GradientStop`来实现这一点。
- en: GradientStop
  id: totrans-352
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GradientStop
- en: 'This type defines the color at a position in a gradient. Here''s the `import`
    statement:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类型定义了在渐变中的位置的颜色。以下是`import`语句：
- en: '[PRE50]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The properties are as follows:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 属性如下：
- en: '`color`: This is the color of the gradient. It allows named, hexadecimal, and
    RGBA colors.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`color`: 这是指定渐变颜色的颜色。它允许使用命名、十六进制和RGBA颜色。'
- en: '`position`: This is the position of the color in the gradient in a range from
    `0.0` to `1.0`.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`position`: 这是渐变中颜色的位置，范围从`0.0`到`1.0`。'
- en: 'Let''s create a directory inside `App/qmls/` called `gradients/` and make a
    file called `UGradient1.qml` inside it. Then, add the gradient colors using the
    `Gradient` and `GradientStop` types:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在`App/qmls/`目录内创建一个名为`gradients/`的目录，并在其中创建一个名为`UGradient1.qml`的文件。然后，使用`Gradient`和`GradientStop`类型添加渐变颜色：
- en: '[PRE51]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The first gradient stop and last gradient stop `position` properties must equal
    `0.0` and `1.0`, respectively. All gradient stops between these positions realize
    the gradient color. Named, RGB, and RGBA colors can be used.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个渐变停止和最后一个渐变停止的`position`属性必须分别等于`0.0`和`1.0`。在这两个位置之间的所有渐变停止实现渐变颜色。可以使用命名、RGB和RGBA颜色。
- en: 'Now, all you need to do is change the `UCircle.qml` file by adding a gradient
    color to the rectangle:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你只需要通过向矩形添加渐变颜色来更改`UCircle.qml`文件：
- en: '[PRE52]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The created circle will have a gradient color instead of a simple color.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的圆将具有渐变颜色而不是简单的颜色。
- en: LinearGradient
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: LinearGradient
- en: 'This gradient object provides some extended features. With `LinearGradient`,
    colors start at the start point and end at the end point. Here''s the `import`
    statement that we need:'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 此渐变对象提供了一些扩展功能。使用`LinearGradient`，颜色从起点开始，到终点结束。以下是所需的`import`语句：
- en: '[PRE53]'
  id: totrans-366
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'These are the properties it takes:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是它所接受的属性：
- en: '`start`: The starting point in pixels where the color at position `0.0` is
    rendered (the default is `Qt.point(0, 0)`).'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`start`：颜色在位置`0.0`处渲染的像素起点（默认为`Qt.point(0, 0)`）。'
- en: '`end`: The ending point in pixels where the color at position `1.0` is rendered
    (the default is `Qt.point(0, height)`).'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`end`：颜色在位置`1.0`处渲染的像素终点（默认为`Qt.point(0, height)`）。'
- en: '`gradient`: The gradient, of the gradient type, with two or more colors.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient`：渐变类型，包含两种或更多颜色的渐变。'
- en: '`source`: The item that is going to be filled with the gradient (such as an
    image or QML type).'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`：将要填充渐变的项（例如图像或QML类型）。'
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`cached`：这可以是`true`或`false`。它允许效果的输出像素被缓存以提高性能。'
- en: 'Here''s an example. Create a file called `URectLG.qml` in the `qmls/` directory
    and add the following code to it:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个例子。在`qmls/`目录下创建一个名为`URectLG.qml`的文件，并将以下代码添加到其中：
- en: '[PRE54]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In the linear gradient, use start and end points as Qt points. The gradient
    can only be defined with visual type objects, such as rectangle, and can blend
    two or more colors seamlessly.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 在线性渐变中，使用起点和终点作为Qt点。渐变只能用视觉类型对象定义，例如矩形，可以无缝混合两种或多种颜色。
- en: RadialGradient
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RadialGradient
- en: 'This type provides radial gradients. The following  `import` statement is used
    for radial gradient:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供径向渐变。以下`import`语句用于径向渐变：
- en: '[PRE55]'
  id: totrans-378
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'These are the properties:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是属性：
- en: '`angle`: This is a `real` number, and the angle of rotation of the gradient
    around the center point (the default is `0.0`).'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`angle`：这是一个`real`数，是围绕中心点旋转的渐变角度（默认为`0.0`）。'
- en: '`gradient`: This is a gradient of the gradient type, with two or more colors.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient`：这是一个渐变类型的渐变，包含两种或更多颜色。'
- en: '`source`: This is an item that is going to be filled with the gradient.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`：这是一个将要填充渐变的项。'
- en: '`horizontalRadius`: This is a `real` number,  that is, the shape and size of
    the gradient.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalRadius`：这是一个`real`数，即渐变的形状和大小。'
- en: '`verticalRadius`: This is a `real` number, that is, the shape and size of the
    gradient.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalRadius`：这是一个`real`数，即渐变的形状和大小。'
- en: '`horizontalOffset`: This is a `real` number, that is, the offset in pixels
    from the center point of the gradient compared to the item center (the default
    is `0.0`).'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalOffset`：这是一个`real`数，即从渐变中心点到项中心的像素偏移（默认为`0.0`）。'
- en: '`verticalOffset`: This is a `real` number, that is, the offset in pixels from
    the center point of the gradient compared to the item center (the default is `0.0`).'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalOffset`：这是一个`real`数，即从渐变中心点到项中心的像素偏移（默认为`0.0`）。'
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`cached`：这可以是`true`或`false`。它允许效果的输出像素被缓存以提高性能。'
- en: 'Here''s an example of a radial gradient. Create a file called `URectRG.qml`
    inside the `qmls/` directory and add the following code:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个径向渐变的例子。在`qmls/`目录内创建一个名为`URectRG.qml`的文件，并添加以下代码：
- en: '[PRE56]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The source for this radial gradient is a parent rectangle. We've set the `angle`
    rotation around the center.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 此径向渐变的源是一个父矩形。我们已经设置了围绕中心的`angle`旋转。
- en: ConicalGradient
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ConicalGradient
- en: 'This type provides a conical gradient. The `import` statement for this type
    is as follows:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供圆锥形梯度。此类型的`import`语句如下：
- en: '[PRE57]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The properties of this type are as follows:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型的属性如下：
- en: '`angle`: This is a `real` number and sets the angle of the gradient around
    the center point (the default is `0.0`).'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`angle`：这是一个`实数`，用于设置中心点周围梯度的角度（默认值为`0.0`）。'
- en: '`gradient`: The gradient of the `Gradient` type, with two or more colors.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient`：`Gradient`类型的梯度，包含两种或更多颜色。'
- en: '`source`:  The item that is going to be filled with a gradient.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`source`：将要填充梯度的项目。'
- en: '`horizontalOffset`: This is a `real` number, that is, the offset in pixels
    from the center point of the gradient compared to the item center (the default
    is `0.0`).'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalOffset`：这是一个`实数`，即梯度中心点相对于项目中心的像素偏移量（默认值为`0.0`）。'
- en: '`verticalOffset`: This is a `real` number, that is, the offset in pixels for
    the center point of the gradient compared to the item center (the default is `0.0`).'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalOffset`：这是一个`实数`，即梯度中心点相对于项目中心的像素偏移量（默认值为`0.0`）。'
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`cached`：这可以是`true`或`false`。它允许缓存效果的输出像素以改善性能。'
- en: 'Here''s an example. Create a file called`URectCG.qml` inside the `qmls/` directory
    and add the following code:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个示例。在`qmls/`目录内创建一个名为`URectCG.qml`的文件，并添加以下代码：
- en: '[PRE58]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The gradient of the color will be conical. The `source` is also the parent rectangle.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色的梯度将是圆锥形。`source`也是父矩形。
- en: Completion of the examples
  id: totrans-404
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成示例
- en: 'To complete the examples in this section, let''s combine them into one grid
    and look at the result. To do this, add the grid somewhere after `rect1` in the
    `u_qml.qml` file:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本节中的示例，让我们将它们组合成一个网格并查看结果。为此，在`u_qml.qml`文件中`rect1`之后添加网格：
- en: 'Adding the grid positioning mechanism of the items:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加项目的网格定位机制：
- en: '[PRE59]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: We've used the `Grid` type to arrange items in the grid. Here, we've created
    four circles with gradients such as  `UCircle`, `URectLG`, `URectRG`, and `URectCG`,
    and four `URectGlow` items that can be added.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用`Grid`类型来排列项目。在这里，我们创建了四个具有梯度如`UCircle`、`URectLG`、`URectRG`和`URectCG`的圆，以及四个可以添加的`URectGlow`项目。
- en: 'In the *Item* section where we created items, we need to change the `visible`
    property to `false`:'
  id: totrans-409
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建项目的*Item*部分，我们需要将`visible`属性更改为`false`：
- en: '[PRE60]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: With the addition of these lines, the gradient elements will be visible, whereas previously
    created items will be invisible. The full file with some changes to the background
    color is available at [https://github.com/PacktPublishing/Hands-On-QT-for-Python-developers](https://github.com/PacktPublishing/Hands-On-QT-for-Python-developers).
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 添加这些行后，梯度元素将可见，而之前创建的项目将不可见。带有一些背景色更改的完整文件可在[https://github.com/PacktPublishing/Hands-On-QT-for-Python-developers](https://github.com/PacktPublishing/Hands-On-QT-for-Python-developers)找到。
- en: 'If we click on the top-right corner of the application window, we will see
    the following result:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们点击应用程序窗口的右上角，我们将看到以下结果：
- en: '![](img/b5b79a26-a863-4086-9162-4ef19e2b120c.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b5b79a26-a863-4086-9162-4ef19e2b120c.png)'
- en: We've looked at a short explanation of styling with QML. In the next chapter,
    will continue learning about Qt Quick and will learn about important positioning
    instruments, such as layouts.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经简要介绍了使用 QML 进行样式设置。在下一章中，我们将继续学习 Qt Quick，并学习重要的定位工具，例如布局。
- en: Animations with QML
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 QML 创建动画
- en: Qt Quick is a standard library for creating user interfaces with QML, and it
    gives you the ability to implement animations. This animation can be implemented
    in several ways, such as states, transitions, and animation property changes.
    Animation can also be implemented with other animation-related approaches.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick 是一个用于使用 QML 创建用户界面的标准库，它为您提供了实现动画的能力。这种动画可以通过多种方式实现，例如状态、转换和动画属性变化。动画也可以通过其他与动画相关的技术实现。
- en: State and transition objects
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 状态和转换对象
- en: This way of creating animations with QML uses the `State` object to declare
    the state of an object, and the `Transition` object to declare properties of the
    state changes during the animation process.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 这种使用 QML 创建动画的方式使用`State`对象来声明对象的当前状态，以及使用`Transition`对象来声明动画过程中的状态变化属性。
- en: 'This approach can be described with the following lines:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法可以用以下几行来描述：
- en: '[PRE61]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '`Item` has `states` and `transitions` properties. `states` has a `State` object,
    and `transitions` has a list of `Transition` objects.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`Item`具有`states`和`transitions`属性。`states`有一个`State`对象，而`transitions`有一个`Transition`对象的列表。'
- en: State
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: State
- en: 'As part of the `QtQuick` module, the QML `State` type provides a set of changes
    related to the configuration of objects and properties. It has the following `import`
    statement:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 作为`QtQuick`模块的一部分，QML的`State`类型提供了一组与对象和属性配置相关的更改。它有以下`import`语句：
- en: '[PRE62]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'These are its properties:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是其属性：
- en: '`name`: `string` (the name of the state).'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`：`string`（状态的名称）。'
- en: '`changes`: List (changes to apply for the state).'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`changes`：列表（应用于状态的更改）。'
- en: '`extend`: `string` (the name of the state); state extends as the state.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend`：`string`（状态的名称）；状态扩展为状态。'
- en: '`when`: This can be `true` or `false` and sets when the state will be applied.
    An object for this property should return a Boolean value. For example, if `MouseArea.pressed` is
    pressed, then it returns `true`.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`when`：这可以是`true`或`false`，并设置状态何时应用。此属性的值应为返回布尔值的对象。例如，如果`MouseArea.pressed`被按下，则返回`true`。'
- en: PropertyChanges
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PropertyChanges
- en: '`PropertyChanges` is used to define the property values in the state. This
    allows us to define new properties of the target object. The `import` statement
    is as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`PropertyChanges`用于在状态中定义属性值。这允许我们定义目标对象的新属性。`import`语句如下：'
- en: '[PRE63]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'It has the following properties:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`target`: An object whose properties need to be changed.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`target`：需要更改属性的对象。'
- en: '`explicit`: Can be `true` or `false`. It provides explicit bindings of the
    properties (the default is `false`).'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`explicit`：可以是`true`或`false`。它提供属性的显式绑定（默认为`false`）。'
- en: '`restoreEntryValues`: Can be `true` or `false`. If it''s `true`, the previous
    values should be restored when leaving the state.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`restoreEntryValues`：可以是`true`或`false`。如果是`true`，离开状态时应恢复之前的值。'
- en: 'Here''s an example. Open the `UItem.qml` file and add this `MouseArea` to the
    rectangle with  `id: r1`, as follows:'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '以下是一个示例。打开`UItem.qml`文件，并将此`MouseArea`添加到具有`id: r1`的矩形中，如下所示：'
- en: 'Add the states of the item with `id: i1`to the mouse area''s `onClicked` signal
    handler:'
  id: totrans-438
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将`id: i1`的项状态添加到鼠标区域的`onClicked`信号处理程序：'
- en: '[PRE64]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: When `MouseArea` is clicked, the states of `Item` will be changed.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 当`MouseArea`被点击时，`Item`的状态将发生变化。
- en: 'Add the states and transitions properties to the bottom of the `Item` with
    `id: i1`:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将状态和转换属性添加到`Item`的底部，其中`id: i1`：'
- en: '[PRE65]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In the `states` property, the `State` type with the `name` and `PropertyChanges`
    have been added, which will be used for the target item's *x* axis. The `transitions`
    property realizes animations.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在`states`属性中，已添加具有`name`和`PropertyChanges`的`State`类型，它将被用于目标项的*x*轴。`transitions`属性实现动画。
- en: AnchorChanges
  id: totrans-444
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AnchorChanges
- en: 'This type is used when you need to change the anchors of an item in the `State`
    of the object. The `import` statement of this type is as follows:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于需要更改对象`State`中项的锚点时。此类型的`import`语句如下：
- en: '[PRE66]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The following properties are available:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 以下属性可用：
- en: '`target`: The item for which anchors will be changed.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`target`：要更改锚的项。'
- en: '`anchors.left`: This `AnchorLine` will modify the left anchor.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.left`：此`AnchorLine`将修改左锚。'
- en: '`anchors.right`: This `AnchorLine` will modify the right anchor.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.right`：此`AnchorLine`将修改右锚。'
- en: '`anchors.horizontalCenter`: This `AnchorLine` will modify the horizontal center
    anchor''s position relation.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.horizontalCenter`：此`AnchorLine`将修改水平中心锚的位置关系。'
- en: '`anchors.top`: This `AnchorLine` will modify the top anchor.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.top`：此`AnchorLine`将修改顶部锚。'
- en: '`anchors.bottom`: This `AnchorLine` will modify the bottom anchor.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.bottom`：此`AnchorLine`将修改底部锚。'
- en: '`anchors.verticalCenter`: This `AnchorLine` will modify the vertical center
    anchor position relation.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.verticalCenter`：此`AnchorLine`将修改垂直中心锚的位置关系。'
- en: '`anchors.baseline`: This `AnchorLine` will modify the baseline anchors.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`anchors.baseline`：此`AnchorLine`将修改基线锚。'
- en: StateChangeScript
  id: totrans-456
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StateChangeScript
- en: 'The `StateChangeScript` QML type is used to run a script in the state. The
    `import` statement is as follows:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`StateChangeScript` QML类型用于在状态中运行脚本。`import`语句如下：'
- en: '[PRE67]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'It has the following properties:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`name`: This is a string, which is the name of the script. Use it with `ScriptAction`
    to target a specific script.'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`：这是一个字符串，是脚本的名称。与`ScriptAction`一起使用以定位特定的脚本。'
- en: '`script`: The script that will be used, such as function.'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`script`：将要使用的脚本，例如函数。'
- en: StateGroup
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StateGroup
- en: 'With this type, QML provides support for non-item types. The `import` statement
    is the same as before:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此类型，QML为非项类型提供了支持。`import`语句与之前相同：
- en: '[PRE68]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'It has the following properties:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`state`:  This is a `string`. It''s the name of the state for this state group.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`state`：这是一个`string`。它是此状态组的名称。'
- en: '`states`: This is a list that defines the list of the states related to the
    state group.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`states`：这是一个列表，定义了与状态组相关的状态列表。'
- en: '`transitions`: This is a list. It provides the list of the transition objects
    for the state group.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`transitions`：这是一个列表。它提供了状态组的过渡对象列表。'
- en: 'The `QtQml` module also provides the `state` type, which is a part of the declarative
    State Machine framework. This is the `import` statement:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtQml`模块还提供了`state`类型，它是声明性状态机框架的一部分。这是`import`语句：'
- en: '[PRE69]'
  id: totrans-470
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'It has the following properties:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`childMode`: This is an `enumeration` that specifies how states are treated.
    It can be `QState.ExclusiveStates` (states are mutually exclusive) or `QState.ParallelStates`
    (states are parallel).'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`childMode`：这是一个枚举，指定了如何处理状态。它可以是指`QState.ExclusiveStates`（状态是互斥的）或`QState.ParallelStates`（状态是并行的）。'
- en: '`errorState`: This `QAbstractState` is the error state.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`errorState`：这是`QAbstractState`的错误状态。'
- en: '`initialState`:This `QAbstractState` is the initial state.'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`initialState`：这是`QAbstractState`的初始状态。'
- en: This type is related to the QML language infrastructure.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型与QML语言基础设施相关。
- en: Transition
  id: totrans-476
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过渡
- en: 'This QML type is used to implement the animations of the state changes and
    define animated transitions. The `import` statement is as follows:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 此QML类型用于实现状态变化的动画并定义动画过渡。`import`语句如下：
- en: '[PRE70]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'It has the following properties:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`animations`: This is a list of the animations that are provided in list form.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`animations`：这是一个动画列表，以列表形式提供。'
- en: '`enabled`: This can be `true` or `false` (the default is `true`) and shows
    whether the transition is enabled.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`enabled`：这可以是`true`或`false`（默认为`true`），表示过渡是否启用。'
- en: '`running`: This can be `true` or `false` and shows whether the transition is
    currently running.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`running`：这可以是`true`或`false`，表示过渡是否正在运行。'
- en: '`from`: This is a `string` and shows that the transition is from these state
    changes.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`：这是一个`string`，表示过渡是从这些状态变化开始的。'
- en: '`to`: This is a `string` and shows that the transition is to these state changes.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`：这是一个`string`，表示过渡是到这些状态变化的。'
- en: '`reversible`: This can be `true` or `false`. If it''s `true`, the transition
    is automatically applied when a state change is reversed.'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`reversible`：这可以是`true`或`false`。如果是`true`，则在状态变化反转时自动应用过渡。'
- en: Animating property changes
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画属性变化
- en: Another approach to implementing animations with QML is to use behaviors.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 实现动画的另一种方法是使用行为。
- en: Behavior
  id: totrans-488
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行为
- en: 'This QML type provides a default animation that will be applied if a property
    value changes. The `import` statement is as follows:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 此QML类型提供默认动画，如果属性值更改，则应用此动画。`import`语句如下：
- en: '[PRE71]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'It has the following properties:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`animation`: This sets the animation to run when the behavior is triggered.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation`：这设置了当行为被触发时运行的动画。'
- en: '`enabled`: This can be `true` or `false`. This enables the type for use (the
    default is `true`).'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`enabled`：这可以是`true`或`false`。这启用了类型以供使用（默认为`true`）。'
- en: 'The syntax is as follows:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE72]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: Here, the construction is using the `Behavior` of the `width` property. The
    animation will run depending on the behaviors of width.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，构造使用的是`width`属性的`Behavior`。动画将根据宽度的行为运行。
- en: 'Open the `UItem.qml` file and add the `MouseArea` and `Behavior` types to the
    rectangle with `id: r2`:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '打开`UItem.qml`文件，并将`MouseArea`和`Behavior`类型添加到具有`id: r2`的矩形中：'
- en: '[PRE73]'
  id: totrans-498
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: If `MouseArea` is clicked, the green rectangle will move. We've set `Behavior`
    on the *y* axis, which will use an animation as the green rectangle falls down with
    a duration of seven seconds and the type of easing curve set to elastic (an exponentially
    decaying sine wave).
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击`MouseArea`，绿色矩形将移动。我们已经在`y`轴上设置了`Behavior`，这将使用一个动画，绿色矩形在七秒内落下，并且缓动曲线设置为弹性（指数衰减的正弦波）。
- en: Animation types
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画类型
- en: '`QtQuick` provides the following types to implement animations.'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtQuick`提供了以下类型来实现动画。'
- en: Animation
  id: totrans-502
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画
- en: 'This is the base type for all QML animations. It has the following `import`
    statement:'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有QML动画的基类型。它具有以下`import`语句：
- en: '[PRE74]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'It has the following properties:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`alwaysRunToEnd`: This can be `true` or `false`. If the animation is stopped,
    the animation loop should be completed.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`alwaysRunToEnd`: 这可以是`true`或`false`。如果动画被停止，动画循环应该完成。'
- en: '`loops`: This is an `int` and sets how many times the animation will play.'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`loops`: 这是一个`int`，设置动画将播放多少次。'
- en: '`paused`: This is `true` or `false`. If `true`, the animation will pause.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`paused`: 这是一个布尔值。如果为`true`，则动画将暂停。'
- en: '`running`: This is `true` or `false`. If `true`, the animation is running.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`running`: 这是一个布尔值。如果为`true`，则动画正在运行。'
- en: 'The following signals are available:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信号可用：
- en: '`started()`: This is emitted when the animation begins.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`started()`: 当动画开始时发出此信号。'
- en: '`stopped()`: This is emitted when the animation stops.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '`stopped()`: 当动画停止时发出此信号。'
- en: 'The following methods are available:'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法可用：
- en: '`complete()`: Jumps to the final property values.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`complete()`: 跳转到最终属性值。'
- en: '`pause()`: Pauses the animation.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`pause()`: 暂停动画。'
- en: '`restart()`: Restarts the animation.'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`restart()`: 重新启动动画。'
- en: '`resume()`: Starts the paused animation.'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`resume()`: 开始暂停的动画。'
- en: '`start()`: Starts the animation.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`start()`: 开始动画。'
- en: '`stop()`: Stops the animation.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`stop()`: 停止动画。'
- en: AnimationController
  id: totrans-520
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AnimationController
- en: 'This allows the manual control of animations. This is the required `import`
    statement:'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 这允许手动控制动画。这是必需的`import`语句：
- en: '[PRE75]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'It has the following properties:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`animation`: The  `Animation` to be controlled.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`animation`: 要控制`Animation`。'
- en: '`progress`: The animation progresses between the values `0.0` and `1.0`.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`progress`: 动画在`0.0`和`1.0`之间进行。'
- en: PropertyAnimation
  id: totrans-526
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PropertyAnimation
- en: 'This is a useful type for animating changes to a property''s value. The `import`
    statement is as follows:'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于动画属性值变化的实用类型。`import`语句如下：
- en: '[PRE76]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'It has the following properties:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`duration`: This `int` is the duration of the animation in milliseconds.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '`duration`: 这个`int`是动画的持续时间（以毫秒为单位）。'
- en: '`target`: This object sets the item whose properties need to be animated.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`target`: 这个对象设置了需要动画化的项目。'
- en: '`targets`: This list sets the items whose properties need to be animated.'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`targets`: 这个列表设置了需要动画化的项目。'
- en: '`property`: This `string` sets the property to be animated.'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '`property`: 这个`string`设置了要动画化的属性。'
- en: '`properties`: This `string` sets the properties to be animated.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`properties`: 这个`string`设置了要动画化的属性。'
- en: '`from`: This is the starting value of the animation.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`: 这是动画的起始值。'
- en: '`to`:  This is the end value of the animation.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`: 这是动画的结束值。'
- en: '`exclude`: This is a list of objects that will not be animated.'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclude`: 这是一个不会进行动画的对象列表。'
- en: '`easing.type`: This is an `enumeration` and is the type of easing curve that
    is used for the animation.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.type`: 这是一个枚举，是用于动画的缓动曲线类型。'
- en: '`easing.amplitude`: This is the amplitude of the easing curve.'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.amplitude`: 这是缓动曲线的振幅。'
- en: '`easing.overshoot`: This is the overshoot of the easing curve.'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.overshoot`: 这是缓动曲线的超出量。'
- en: '`easing.period`: This is the period of the easing curve.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.period`: 这是缓动曲线的周期。'
- en: '`easing.bezierCurve`: This list is applicable if the easing type is `Easing.Bezier`.
    It''s a list of `real` numbers containing groups of three points defining a curve
    from (0,0) to (1,1)—[x1, y1, x2, y2, endx, endy]. The last point must be (1,1).'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.bezierCurve`: 如果缓动类型是`Easing.Bezier`，则适用此列表。它是一个包含定义从（0,0）到（1,1）曲线的三点组的`real`数列表——[x1,
    y1, x2, y2, endx, endy]。最后一个点必须是（1,1）。'
- en: NumberAnimation
  id: totrans-543
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: NumberAnimation
- en: 'This is used to animate properties with numerical values. Use the following `import`
    statement:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于动画数值属性。使用以下`import`语句：
- en: '[PRE77]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'It has the following properties:'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`from`: This is a `real` number, and is the starting value of the animation.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`: 这是一个`real`数，是动画的起始值。'
- en: '`to`: This is a `real` number, and is the end value of the animation.'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`: 这是一个`real`数，是动画的结束值。'
- en: SequentialAnimation
  id: totrans-549
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SequentialAnimation
- en: 'This animation is used to run multiple animations, one after the other. This
    is the `import` statement:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 此动画用于依次运行多个动画。这是`import`语句：
- en: '[PRE78]'
  id: totrans-551
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'Here''s an example of the syntax:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个语法示例：
- en: '[PRE79]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: This realizes a sequential animation of the specified animations.
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 这实现了指定动画的顺序动画。
- en: ParallelAnimation
  id: totrans-555
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ParallelAnimation
- en: 'Similar to `SequentialAnimation`, this type is used to run multiple animations
    together, but they will run at the same time. Use the following `import` statement:'
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 与`SequentialAnimation`类似，此类型用于同时运行多个动画，但它们将同时运行。使用以下`import`语句：
- en: '[PRE80]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'Here''s an example of the syntax:'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个语法示例：
- en: '[PRE81]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: This realizes the parallel animation of the specified animations.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 这实现了指定动画的并行动画。
- en: PauseAnimation
  id: totrans-561
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PauseAnimation
- en: 'This type is used to set a pause between animations. Use the following `import`
    statement:'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于在动画之间设置暂停。使用以下`import`语句：
- en: '[PRE82]'
  id: totrans-563
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'It has one property:'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 它有一个属性：
- en: '`duration`: This is an `int` that sets the duration of the pause between animations
    in milliseconds'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '`duration`: 这是一个设置动画之间暂停时间的`int`值，单位为毫秒。'
- en: ColorAnimation
  id: totrans-566
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ColorAnimation
- en: 'This is a specialized property animation that will be applied when a color
    value changes. You need this `import` statement:'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于在颜色值更改时应用的专用属性动画。你需要以下`import`语句：
- en: '[PRE83]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'It has the following properties:'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`from`: This is the color of the animation when it begins.'
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`: 这是动画开始时的颜色。'
- en: '`to`: This is the color of the animation when it ends.'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`: 这是动画结束时颜色的颜色。'
- en: CoordinateAnimation
  id: totrans-572
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CoordinateAnimation
- en: 'This is an animation for geographical coordinate properties that are implemented
    between two coordinates. You need to use the following `import` statement:'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在两个坐标之间实现的地理坐标属性动画。你需要使用以下`import`语句：
- en: '[PRE84]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'It has the following properties:'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`direction`: This is an `enumeration` of the direction of the longitude animation
    of the coordinate.'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '`direction`: 这是一个表示经度动画方向的`enumeration`。'
- en: '`from`: This is the coordinate where the animation begins.'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`: 这是动画开始时的坐标。'
- en: '`to`: This is the coordinate where the animation ends.'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`: 这是动画结束时的坐标。'
- en: RotationAnimation
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RotationAnimation
- en: 'This type is used to control the direction of rotation during an animation.
    Use the following  `import` statement:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于在动画期间控制旋转方向。使用以下`import`语句：
- en: '[PRE85]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'It has the following properties:'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`direction`: This is an `enumeration` of the direction of rotation (the default
    is `RotationAnimation.Numerical`).'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '`direction`: 这是一个表示旋转方向的`enumeration`（默认为`RotationAnimation.Numerical`）。'
- en: '`from`: This `real` number is the starting value of the rotation of the animation.'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '`from`: 这个`real`数字是动画旋转的起始值。'
- en: '`to`: This `real` number is the end value of the rotation of the animation.'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '`to`: 这是一个表示动画旋转结束值的`real`数字。'
- en: AnchorAnimation
  id: totrans-586
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AnchorAnimation
- en: 'This type animates anchors. You need the following `import` statement:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型用于动画锚点。你需要以下`import`语句：
- en: '[PRE86]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'It has the following properties:'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`targets`: This is a list of the items to reanchor.'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '`targets`: 这是一个要重新锚定的项目列表。'
- en: '`duration`: This `int` is the duration of the animation in milliseconds.'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '`duration`: 这是一个表示动画持续时间的`int`值，单位为毫秒。'
- en: '`easing.type`: This `enumeration` is the type of easing curve that''s used
    for the animation.'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.type`: 这个`enumeration`是用于动画的缓动曲线类型。'
- en: '`easing.amplitude`: This `real` number is the amplitude of the easing curve.'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.amplitude`: 这个`real`数字是缓动曲线的振幅。'
- en: '`easing.overshoot`: This `real` number is the overshoot of the easing curve.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.overshoot`: 这个`real`类型的数字是缓动曲线的过冲量。'
- en: '`easing.period`: This `real` number is the period of the easing curve.'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '`easing.period`: 这个`real`数字是缓动曲线的周期。'
- en: These types are not a complete list of the animation instruments available in
    `QtQuick`.
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类型不是`QtQuick`中可用的所有动画工具的完整列表。
- en: Animation examples
  id: totrans-597
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画示例
- en: 'Now, we need to practice using the animations types that we''ve looked at:'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要练习使用我们查看过的动画类型：
- en: 'Open the `UItem.qml` file and add the following lines to the bottom of the
    rectangle with `id: r3`:'
  id: totrans-599
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '打开`UItem.qml`文件，并在具有`id: r3`的矩形底部添加以下行：'
- en: '[PRE87]'
  id: totrans-600
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: The sequential animation is used for two `NumberAnimation` implementations.
    Animations will change the position of the rectangles with some pause specified
    with the `PauseAnimation` type.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: 顺序动画用于两个`NumberAnimation`实现。动画将改变矩形的某些位置，并使用`PauseAnimation`类型指定一些暂停。
- en: 'Add the following animation to the bottom of the rectangle with `id: r4`:'
  id: totrans-602
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '将以下动画添加到具有`id: r4`的矩形底部：'
- en: '[PRE88]'
  id: totrans-603
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: The parallel animation is used for two `PropertyAnimation` implementations.
    These animations will rotate the rectangles. To view these animations, we need
    to make some changes in the `u_qml.qml` file with the visible properties of the
    items and set the visible property of the `Grid` to `false`.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 并行动画用于两个`PropertyAnimation`实现。这些动画将旋转矩形。要查看这些动画，我们需要在`u_qml.qml`文件中对项目的可见属性进行一些更改，并将`Grid`的可见属性设置为`false`。
- en: 'Set the `visible` property of the group of animated items to `true`:'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将动画项目的`visible`属性设置为`true`：
- en: '[PRE89]'
  id: totrans-606
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The group of items will be visible.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 项组将可见。
- en: 'Set the `visible` property of the `Grid` to `false`:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `Grid` 的 `visible` 属性设置为 `false`：
- en: '[PRE90]'
  id: totrans-609
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The grid with items will be invisible. We have successfully implemented several
    animations with different approaches. The result is as follows:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: 包含项目的网格将不可见。我们已经成功实现了多种不同方法的几个动画。结果如下：
- en: '![](img/023c580e-0aa9-4740-a5ce-909b8ea99823.png)'
  id: totrans-611
  prefs: []
  type: TYPE_IMG
  zh: '![](img/023c580e-0aa9-4740-a5ce-909b8ea99823.png)'
- en: Summary
  id: totrans-612
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter has covered QML and its basic syntax. QML is useful when creating
    a GUI. Qt provides instruments to make GUIs, such as the `QtQml` and `QtQuick`
    modules. `QtQml` is more of a tool for working with the language and the QML engine
    infrastructure, but the `QtQuick` module provides libraries that help us to construct
    GUIs with wide functionality and visualization instruments. The language and QML
    engine infrastructure represent the core functionality of the library, and includes
    elements such as signal construction, binding properties, and running QML applications
    with Python. Almost all of the examples in this chapter use the `QtQuick` module
    to implement the visual components and functionality of the QML application.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 本章已涵盖 QML 及其基本语法。当创建 GUI 时，QML 非常有用。Qt 提供了制作 GUI 的工具，例如 `QtQml` 和 `QtQuick`
    模块。`QtQml` 更多的是用于处理语言和 QML 引擎基础设施的工具，但 `QtQuick` 模块提供了帮助我们构建具有广泛功能和可视化工具的 GUI
    的库。语言和 QML 引擎基础设施代表了库的核心功能，包括信号构建、属性绑定以及使用 Python 运行 QML 应用程序等元素。本章中的几乎所有示例都使用了
    `QtQuick` 模块来实现 QML 应用的视觉组件和功能。
- en: The next chapter will be devoted to the `QtQuick` module and submodules, with
    a focus on control elements, positioning, layouts, and visualization.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将专注于 `QtQuick` 模块及其子模块，重点介绍控制元素、定位、布局和可视化。
