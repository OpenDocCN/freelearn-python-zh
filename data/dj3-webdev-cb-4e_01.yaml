- en: Getting Started with Django 3.0
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用Django 3.0
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Working with a virtual environment
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: Creating a project file structure
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建项目文件结构
- en: Handling project dependencies with pip
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pip处理项目依赖关系
- en: Configuring settings for development, testing, staging, and production environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为开发、测试、暂存和生产环境配置设置
- en: Defining relative paths in the settings
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在设置中定义相对路径
- en: Handling sensitive settings
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理敏感设置
- en: Including external dependencies in your project
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中包含外部依赖项
- en: Setting up `STATIC_URL` dynamically
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态设置`STATIC_URL`
- en: Setting UTF-8 as the default encoding for the MySQL configuration
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将UTF-8设置为MySQL配置的默认编码
- en: Creating the Git `ignore` file
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Git的`ignore`文件
- en: Deleting Python-compiled files
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 删除Python编译文件
- en: Respecting the import order in Python files
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遵守Python文件中的导入顺序
- en: Creating an app configuration
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建应用程序配置
- en: Defining overwritable app settings
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义可覆盖的应用程序设置
- en: Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker容器处理Django、Gunicorn、Nginx和PostgreSQL
- en: Introduction
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: In this chapter, we will see a few valuable practices to follow when starting
    a new project with Django 3.0 using Python 3\. We have picked the most useful
    ways to deal with scalable project layout, settings, and configurations, whether
    using virtualenv or Docker to manage your project.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将看到一些有价值的实践，用于使用Python 3在Django 3.0中启动新项目时遵循。我们选择了处理可扩展项目布局、设置和配置的最有用的方法，无论是使用virtualenv还是Docker来管理您的项目。
- en: We are assuming that you are already familiar with the basics of Django, Git
    version control, MySQL as well as PostgreSQL databases, and command-line usage.
    We also assume that you are using a Unix-based operating system, such as macOS
    or Linux. It makes more sense to develop with Django on Unix-based platforms as
    the Django websites will most likely be published on a Linux server, meaning that
    you can establish routines that work in the same way, whether you're developing
    or deploying. If you are locally working with Django on Windows, the routines
    are similar; however, they are not *always* the same.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设您已经熟悉Django、Git版本控制、MySQL以及PostgreSQL数据库和命令行使用的基础知识。我们还假设您使用的是基于Unix的操作系统，如macOS或Linux。在Unix-based平台上开发Django更有意义，因为Django网站很可能会发布在Linux服务器上，这意味着您可以建立在开发或部署时都能工作的例行程序。如果您在Windows上本地使用Django，例行程序是类似的；但是它们并不总是相同的。
- en: Using Docker for your development environment, regardless of your local platform,
    can improve the portability of your applications through deployment since the
    environment within the Docker container can be matched precisely to that of your
    deployment server. We should also mention that for the recipes in this chapter,
    we are assuming that you have the appropriate version control system and database
    server already installed on your local machine, whether you are developing with
    Docker or not.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您的本地平台如何，使用Docker作为开发环境都可以通过部署改善应用程序的可移植性，因为Docker容器内的环境可以精确匹配部署服务器的环境。我们还应该提到，在本章的配方中，我们假设您已经在本地机器上安装了适当的版本控制系统和数据库服务器，无论您是否使用Docker进行开发。
- en: Technical requirements
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To work with the code of this book, you will need the latest stable version
    of Python, which can be downloaded from [https://www.python.org/downloads/](https://www.python.org/downloads/).
    At the time of writing, the latest version is 3.8.X. You will also need a MySQL
    or PostgreSQL database. You can download the MySQL database server from [https://dev.mysql.com/downloads/](https://dev.mysql.com/downloads/).
    The PostgreSQL database server can be downloaded from [https://www.postgresql.org/download/](https://www.postgresql.org/download/).
    Other requirements will be requested in specific recipes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用本书的代码，您将需要最新稳定版本的Python，可以从[https://www.python.org/downloads/](https://www.python.org/downloads/)下载。在撰写本文时，最新版本为3.8.X。您还需要MySQL或PostgreSQL数据库。您可以从[https://dev.mysql.com/downloads/](https://dev.mysql.com/downloads/)下载MySQL数据库服务器。PostgreSQL数据库服务器可以从[https://www.postgresql.org/download/](https://www.postgresql.org/download/)下载。其他要求将在特定的配方中提出。
- en: You can find all the code for this chapter at the `ch01` directory of the GitHub
    repository at [https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition).
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub存储库的`ch01`目录中找到本章的所有代码，网址为[https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition](https://github.com/PacktPublishing/Django-3-Web-Development-Cookbook-Fourth-Edition)。
- en: Working with a virtual environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟环境
- en: It is very likely that you will develop multiple Django projects on your computer.
    Some modules, such as virtualenv, setuptools, wheel, or Ansible, can be installed
    once and then shared for all projects. Other modules, such as Django, third-party
    Python libraries, and Django apps, will need to be kept isolated from each other.
    The virtualenv tool is a utility that separates all of the Python projects and
    keeps them in their own realms. In this recipe, we will see how to use it.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能您会在计算机上开发多个Django项目。某些模块，如virtualenv、setuptools、wheel或Ansible，可以安装一次，然后为所有项目共享。其他模块，如Django、第三方Python库和Django应用程序，需要保持彼此隔离。virtualenv工具是一个实用程序，它将所有Python项目分开，并将它们保留在自己的领域中。在本配方中，我们将看到如何使用它。
- en: Getting ready
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To manage Python packages, you will need pip. If you are using Python 3.4+,
    then it will be included in your Python installation. If you are using another
    version of Python, you can install pip by executing the installation instructions
    at [http:/​/​pip.​readthedocs.​org/​en/​stable/installing/](https://pip.pypa.io/en/stable/installing/)​.
    Let''s upgrade the shared Python modules, pip, setuptools, and wheel:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 要管理Python包，您将需要pip。如果您使用的是Python 3.4+，则它将包含在您的Python安装中。如果您使用的是其他版本的Python，可以通过执行[http:/​/​pip.​readthedocs.​org/​en/​stable/installing/](https://pip.pypa.io/en/stable/installing/)的安装说明来安装pip。让我们升级共享的Python模块、pip、setuptools和wheel：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The virtual environment has been built into Python since version 3.3.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境已经内置到Python 3.3版本以来。
- en: How to do it...
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Once you have your prerequisites installed, create a directory where all your
    Django projects will be stored—for example, `projects` under your home directory.
    Go through the following steps after creating the directory:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完先决条件后，创建一个目录，其中将存储所有Django项目，例如，在您的主目录下创建`projects`。创建目录后，请按以下步骤进行：
- en: 'Go to the newly created directory and create a virtual environment that uses
    the shared system site packages:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到新创建的目录并创建一个使用共享系统站点包的虚拟环境：
- en: '[PRE1]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To use your newly created virtual environment, you need to execute the activation
    script in your current shell. This can be done with the following command:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使用您新创建的虚拟环境，您需要在当前shell中执行激活脚本。可以使用以下命令完成：
- en: '[PRE2]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Depending on the shell you are using, the `source` command may not be available.
    Another way to source a file is with the following command, which has the same
    result (note the space between the dot and `env`):'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据您使用的shell，`source`命令可能不可用。另一种使用以下命令来源文件的方法是具有相同结果的（注意点和`env`之间的空格）：
- en: '[PRE3]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will see that the prompt of the command-line tool gets a prefix of the
    project name, as follows:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您将看到命令行工具的提示前缀为项目名称，如下所示：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To get out of the virtual environment, type the following command:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要退出虚拟环境，请输入以下命令：
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you create a virtual environment, a few specific directories (`bin`, `include`,
    and `lib`) are created in order to store a copy of the Python installation, and
    some shared Python paths are defined. When the virtual environment is activated,
    whatever you install with `pip` or `easy_install` will be put in and used by the
    site packages of the virtual environment, and not the global site packages of
    your Python installation.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟环境时，会创建一些特定目录（`bin`、`include`和`lib`），以存储Python安装的副本，并定义一些共享的Python路径。激活虚拟环境后，您使用`pip`或`easy_install`安装的任何内容都将放在虚拟环境的站点包中，并且不会放在Python安装的全局站点包中。
- en: 'To install the latest Django 3.0.x in your virtual environment, type the following
    command:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 要在虚拟环境中安装最新的Django 3.0.x，请输入以下命令：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: See also
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a project file structure* recipe
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*食谱'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)中的*使用Docker容器进行Django、Gunicorn、Nginx和PostgreSQL部署*食谱'
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml), *Deployment*
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)中的*使用mod_wsgi在Apache上部署分段环境*食谱，*部署*'
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, 部署*中的*使用Apache和mod_wsgi部署生产环境*食谱'
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, 部署*中的*在Nginx和Gunicorn上部署分段环境*食谱'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, 部署*中的*在Nginx和Gunicorn上部署生产环境*食谱'
- en: Creating a project file structure
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建项目文件结构
- en: A consistent file structure for your projects makes you well organized and more
    productive. When you have the basic workflow defined, you can get stuck into the
    business logic more quickly and create awesome projects.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的项目保持一致的文件结构可以使您更有条理、更高效。当您定义了基本工作流程后，您可以更快地进入业务逻辑并创建出色的项目。
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: If you haven't done it yet, create a `~/projects` directory, where you will
    keep all your Django projects (you can read about this in the *Working with a
    virtual environment* recipe).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果还没有，请创建一个`~/projects`目录，您将在其中保存所有Django项目（您可以在*使用虚拟环境*食谱中了解更多信息）。
- en: Then, create a directory for your specific project—for example, `myproject_website`.
    Start the virtual environment in an `env` directory there. Activate it and install
    Django there, as described in the previous recipe. We would suggest adding a `commands`
    directory for local shell scripts that are related to the project, a `db_backups`
    directory for database dumps, a `mockups` directory for website design files,
    and, most importantly, an `src` directory for your Django project.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为您的特定项目创建一个目录，例如`myproject_website`。在那里的`env`目录中启动虚拟环境。激活它并在其中安装Django，如前面的食谱中所述。我们建议添加一个`commands`目录，用于与项目相关的本地shell脚本，一个用于数据库转储的`db_backups`目录，一个用于网站设计文件的`mockups`目录，最重要的是一个用于您的Django项目的`src`目录。
- en: How to do it...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create a file structure for your project:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为您的项目创建文件结构：
- en: 'With the virtual environment activated, go to the `src` directory and start
    a new Django project, as follows:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 激活虚拟环境后，转到`src`目录并启动一个新的Django项目，如下所示：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The executed command will create a directory called `myproject`, with project
    files inside. This directory will contain a Python module, also called `myproject`.
    For clarity and convenience, we will rename the top-level directory as `django-myproject`.
    It is the directory that you will put under version control, and so it will have
    a `.git` or similarly named subdirectory.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 执行的命令将创建一个名为`myproject`的目录，其中包含项目文件。该目录将包含一个名为`myproject`的Python模块。为了清晰和方便起见，我们将顶级目录重命名为`django-myproject`。这是您将放入版本控制的目录，因此它将有一个`.git`或类似命名的子目录。
- en: In the `django-myproject` directory, create a `README.md` file to describe your
    project to the new developdjango-admin.py startproject myprojecters.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`django-myproject`目录中，创建一个`README.md`文件，以向新的开发者描述您的项目。
- en: 'The `django-myproject` directory will also contain the following:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`django-myproject`目录还将包含以下内容：'
- en: Your project's Python package, named `myproject`.
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您项目的Python包名为`myproject`。
- en: Your project's pip requirements with the Django framework and other external
    dependencies (read about this in the *Handling project dependencies with pip* recipe).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的项目的pip要求与Django框架和其他外部依赖项（在*使用pip处理项目依赖*食谱中了解更多）。
- en: The project license in a `LICENSE` file. If your project is open source, you
    can choose one of the most popular licenses from [https://choosealicense.com](https://choosealicense.com).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LICENSE`文件中的项目许可证。如果您的项目是开源的，可以从[https://choosealicense.com](https://choosealicense.com)中选择最受欢迎的许可证之一。'
- en: 'In your project''s root, `django-myproject`, create the following:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目的根目录`django-myproject`中，创建以下内容：
- en: A `media` directory for project uploads
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于项目上传的`media`目录
- en: A `static` directory for collected static files
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于收集静态文件的`static`目录
- en: A `locale` directory for project translations
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于项目翻译的`locale`目录
- en: An `externals` directory for external dependencies that are included in this
    project when you can't use the pip requirements
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于无法使用pip要求的项目中包含的外部依赖的`externals`目录
- en: 'The `myproject` directory should contain these directories and files:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`myproject`目录应包含以下目录和文件：'
- en: The `apps` directory where you will put all your in-house Django apps for the
    project. It is recommended that you have one app called `core` or `utils` for
    the projects' shared functionality.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apps`目录，您将在其中放置项目的所有内部Django应用程序。建议您有一个名为`core`或`utils`的应用程序，用于项目的共享功能。'
- en: The `settings` directory for your project settings (read about this in the *Configuring
    settings for development, testing, staging, and production environments* recipe).
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于项目设置的`settings`目录（在*配置开发、测试、暂存和生产环境的设置*食谱中了解更多）。
- en: The `site_static` directory for project-specific static files.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于特定项目的静态文件的`site_static`目录。
- en: The `templates` directory for the project's HTML templates.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的HTML模板的`templates`目录。
- en: The `urls.py` file for the project's URL configuration.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的URL配置的`urls.py`文件。
- en: The `wsgi.py` file for the project's web server configuration.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的Web服务器配置的`wsgi.py`文件。
- en: 'In your `site_static` directory, create the `site` directory as a namespace
    for site-specific static files. Then, we will divide the static files between
    the categorized subdirectories within it. For instance, see the following:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的`site_static`目录中，创建`site`目录作为站点特定静态文件的命名空间。然后，我们将在其中的分类子目录之间划分静态文件。例如，参见以下内容：
- en: '`scss` for Sass files (optional)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sass文件的`scss`（可选）
- en: '`css` for the generated minified **Cascading Style Sheets** (**CSS**)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于生成压缩的**层叠样式表**（**CSS**）的`css`
- en: '`img` for styling images, favicons, and logos'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于样式图像、网站图标和标志的`img`
- en: '`js` for the project''s JavaScriptdjango-admin.py startproject myproject'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目的JavaScript的`js`
- en: '`vendor` for any third-party module combining all types of files, such as the
    TinyMCE rich-text editor'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vendor`用于任何第三方模块，结合所有类型的文件，例如TinyMCE富文本编辑器'
- en: Besides the `site` directory, the `site_static` directory might also contain
    overwritten static directories of third-party apps—for example, it might contain `cms`,
    which overwrites the static files from Django CMS. To generate the CSS files from
    Sass and minify the JavaScript files, you can use the CodeKit ([https://codekitapp.com/](https://codekitapp.com/))
    or Prepros ([https://prepros.io/](https://prepros.io/)) applications with a graphical
    user interface.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除了`site`目录，`site_static`目录还可能包含第三方应用程序的覆盖静态目录，例如，它可能包含`cms`，它会覆盖Django CMS的静态文件。要从Sass生成CSS文件并压缩JavaScript文件，您可以使用带有图形用户界面的CodeKit
    ([https://codekitapp.com/](https://codekitapp.com/))或Prepros ([https://prepros.io/](https://prepros.io/))应用程序。
- en: Put your templates that are separated by the apps in your `templates` directory.
    If a template file represents a page (for example, `change_item.html` or `item_list.html`),
    then put it directly in the app's template directory. If the template is included
    in another template (for example, `similar_items.html`), put it in the `includes`
    subdirectory. Also, your templates directory can contain a directory called `utils`
    for globally reusable snippets, such as pagination and the language chooser.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按应用程序分隔的模板放在您的`templates`目录中。如果模板文件表示页面（例如，`change_item.html`或`item_list.html`），则直接将其放在应用程序的模板目录中。如果模板包含在另一个模板中（例如，`similar_items.html`），则将其放在`includes`子目录中。此外，您的模板目录可以包含一个名为`utils`的目录，用于全局可重用的片段，例如分页和语言选择器。
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The whole file structure for a complete project will look similar to the following:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 完整项目的整个文件结构将类似于以下内容：
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There's more...
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: To speed up the creation of a project in the way we just described, you can
    use the project's boilerplate from [https://github.com/archatas/django-myproject](https://github.com/archatas/django-myproject).
    After downloading the code, perform a global search and replace `myproject` with
    a meaningful name for your project, and you should be good to go.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 为了加快按照我们刚刚描述的方式创建项目的速度，您可以使用来自[https://github.com/archatas/django-myproject](https://github.com/archatas/django-myproject)的项目样板。下载代码后，执行全局搜索并替换`myproject`为您的项目的有意义的名称，然后您就可以开始了。
- en: See also
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Handling project dependencies with pip* recipe
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pip处理项目依赖的食谱
- en: The *Including external dependencies in your project* recipe
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中包含外部依赖的食谱
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置开发、测试、暂存和生产环境的设置
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)**, Deployment**
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)**部署**中的*在Apache上使用mod_wsgi部署暂存环境*食谱'
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Apache上使用mod_wsgi部署生产环境*食谱'
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*部署*中的*在Nginx和Gunicorn上部署暂存环境*食谱'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*中的*在Nginx和Gunicorn上部署生产环境*配方
- en: Handling project dependencies with pip
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip处理项目依赖关系
- en: The most convenient tool to install and manage Python packages is pip. Rather
    than installing the packages one by one, it is possible to define a list of packages
    that you want to install as the contents of a text file. We can pass the text
    file into the pip tool, which will then handle the installation of all packages
    in the list automatically. An added benefit to this approach is that the package
    list can be stored in version control.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 安装和管理Python包的最方便的工具是pip。与逐个安装包不同，可以将要安装的包的列表定义为文本文件的内容。我们可以将文本文件传递给pip工具，然后pip工具将自动处理列表中所有包的安装。采用这种方法的一个附加好处是，包列表可以存储在版本控制中。
- en: Generally speaking, it is ideal and often sufficient to have a single requirements
    file that directly matches your production environment. You can change versions
    or add and remove dependencies on a development machine and then manage them through
    version control. This way, going from one set of dependencies (and associated
    code changes) to another can be as simple as switching branches.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，拥有一个与您的生产环境直接匹配的单个要求文件是理想的，通常也足够了。您可以在开发机器上更改版本或添加和删除依赖项，然后通过版本控制进行管理。这样，从一个依赖项集（和相关的代码更改）到另一个依赖项集的转换可以像切换分支一样简单。
- en: 'In some cases, environments differ enough that you will need to have at least
    two different instances of your project:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，环境的差异足够大，您将需要至少两个不同的项目实例：
- en: The development environment, where you create new features
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这里创建新功能的开发环境
- en: The public website environment, which is usually called the production environment
    in a hosted server
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通常称为托管服务器中的生产环境的公共网站环境
- en: There might be development environments for other developers, or special tools
    that are needed during development but that are unnecessary in production. You
    might also have a testing and staging environment in order to test the project
    locally and in a public website-like setup.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有其他开发人员的开发环境，或者在开发过程中需要的特殊工具，但在生产中是不必要的。您可能还需要测试和暂存环境，以便在本地测试项目和在类似公共网站的设置中进行测试。
- en: For good maintainability, you should be able to install the required Python
    modules for development, testing, staging, and production environments. Some of
    the modules will be shared and some of them will be specific to a subset of the
    environments. In this recipe, we will learn how to organize the project dependencies
    for multiple environments and manage them with pip.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 为了良好的可维护性，您应该能够为开发、测试、暂存和生产环境安装所需的Python模块。其中一些模块将是共享的，而另一些将特定于一部分环境。在本配方中，我们将学习如何为多个环境组织项目依赖项，并使用pip进行管理。
- en: Getting ready
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Before using this recipe, you need to have a Django project ready with pip installed
    and a virtual environment activated. For more information on how to do this, read
    the *Working with a virtual environment* recipe.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用此配方之前，您需要准备好一个已安装pip并激活了虚拟环境的Django项目。有关如何执行此操作的更多信息，请阅读*使用虚拟环境*配方。
- en: How to do it...
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps one by one to prepare pip requirements for your
    virtual environment Django project:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步执行以下步骤，为您的虚拟环境Django项目准备pip要求：
- en: 'Let''s go to the Django project that you have under version control and create
    a `requirements` directory with the following text files:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进入您正在版本控制下的Django项目，并创建一个包含以下文本文件的 `requirements` 目录：
- en: '`_base.txt` for shared modules'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_base.txt` 用于共享模块'
- en: '`dev.txt` for the development environment'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev.txt` 用于开发环境'
- en: '`test.txt` for the testing environment'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.txt` 用于测试环境'
- en: '`staging.txt` for the staging environment'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staging.txt` 用于暂存环境'
- en: '`production.txt` for production'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`production.txt` 用于生产环境'
- en: 'Edit `_base.txt` and add the Python modules that are shared in all environments,
    line by line:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `_base.txt` 并逐行添加在所有环境中共享的Python模块：
- en: '[PRE9]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the requirements of a specific environment are the same as in `_base.txt`,
    add the line including `_base.txt` in the requirements file of that environment,
    as shown in the following example:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果特定环境的要求与 `_base.txt` 中的要求相同，请在该环境的要求文件中添加包括 `_base.txt` 的行，如下例所示：
- en: '[PRE10]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If there are specific requirements for an environment, add them after the `_base.txt`
    inclusion, as shown in the following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果环境有特定要求，请在 `_base.txt` 包含之后添加它们，如下面的代码所示：
- en: '[PRE11]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You can run the following command in a virtual environment in order to install
    all of the required dependencies for the development environment (or an analogous
    command for other environments), as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在虚拟环境中运行以下命令，以安装开发环境所需的所有依赖项（或其他环境的类似命令），如下所示：
- en: '[PRE12]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: How it works...
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding `pip install` command, whether it is executed explicitly in a
    virtual environment or at the global level, downloads and installs all of your
    project dependencies from `requirements/_base.txt` and `requirements/dev.txt`.
    As you can see, you can specify a version of the module that you need for the
    Django framework and even directly install it from a specific commit at the Git
    repository, as is done for `python-social-auth` in our example.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的 `pip install` 命令，无论是在虚拟环境中显式执行还是在全局级别执行，都会从 `requirements/_base.txt` 和 `requirements/dev.txt`
    下载并安装所有项目依赖项。如您所见，您可以指定您需要的Django框架的模块版本，甚至可以直接从Git存储库的特定提交中安装，就像我们的示例中对 `python-social-auth`
    所做的那样。
- en: When you have many dependencies in your project, it is good practice to stick
    to a narrow range of release versions for Python module release versions. Then
    you can have greater confidence that the project integrity will not be broken
    because of updates in your dependencies, which might contain conflicts or backward
    incompatibility. This is particularly important when deploying your project or
    handing it off to a new developer.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目中有很多依赖项时，最好坚持使用Python模块发布版本的狭窄范围。然后，您可以更有信心地确保项目的完整性不会因依赖项的更新而受到破坏，这可能会导致冲突或向后不兼容。当部署项目或将其移交给新开发人员时，这一点尤为重要。
- en: 'If you have already manually installed the project requirements with pip one
    by one, you can generate the `requirements/_base.txt` file using the following
    command within your virtual environment:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经手动逐个使用pip安装了项目要求，您可以在虚拟环境中使用以下命令生成`requirements/_base.txt`文件：
- en: '[PRE13]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: There's more...
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you want to keep things simple and are sure that, for all environments,
    you will be using the same dependencies, you can use just one file for your requirements
    named `requirements.txt`, generated by definition, as shown in the following:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想保持简单，并确信对于所有环境，您将使用相同的依赖项，您可以使用名为`requirements.txt`的一个文件来定义生成要求，如下所示：
- en: '[PRE14]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To install the modules in a new virtual environment, simply use the following
    command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在新的虚拟环境中安装模块，只需使用以下命令：
- en: '[PRE15]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: If you need to install a Python library from another version control system,
    or on a local path, then you can learn more about pip from the official documentation
    at [https://pip.pypa.io/en/stable/user_guide/](https://pip.pypa.io/en/stable/user_guide/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要从另一个版本控制系统或本地路径安装Python库，则可以从官方文档[https://pip.pypa.io/en/stable/user_guide/](https://pip.pypa.io/en/stable/user_guide)了解有关pip的更多信息。
- en: Another approach to managing Python dependencies that is getting more and more
    popular is Pipenv. You can get it and learn about it at [https://github.com/pypa/pipenv](https://github.com/pypa/pipenv).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种越来越受欢迎的管理Python依赖项的方法是Pipenv。您可以在[https://github.com/pypa/pipenv](https://github.com/pypa/pipenv)获取并了解它。
- en: See also
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Working with a virtual environment* recipe
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用虚拟环境* 教程'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Django，Gunicorn，Nginx和PostgreSQL的Docker容器工作* 教程'
- en: The *Including external dependencies in your project* recipe
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在项目中包含外部依赖项* 教程'
- en: The *Configuring settings for development, testing, staging, and production
    environments* recipe
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*配置开发、测试、暂存和生产环境的设置* 教程'
- en: Configuring settings for development, testing, staging, and production environments
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置开发、测试、暂存和生产环境的设置
- en: As noted earlier, you will be creating new features in the development environment,
    testing them in the testing environment, and then putting the website onto a staging
    server to let other people try the new features. Then, the website will be deployed
    to the production server for public access. Each of these environments can have
    specific settings, and you will learn how to organize them in this recipe.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，您将在开发环境中创建新功能，在测试环境中测试它们，然后将网站放到暂存服务器上，让其他人尝试新功能。然后，网站将部署到生产服务器供公众访问。每个环境都可以有特定的设置，您将在本教程中学习如何组织它们。
- en: Getting ready
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'In a Django project, we''ll create settings for each environment: development,
    testing, staging, and production.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django项目中，我们将为每个环境创建设置：开发、测试、暂存和生产。
- en: How to do it...
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Follow these steps to configure the project settings:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置项目设置：
- en: 'In the `myproject` directory, create a `settings` Python module with the following
    files:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`myproject`目录中，创建一个`settings` Python模块，并包含以下文件：
- en: '`__init__.py` makes the settings directory a Python module.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__init__.py` 使设置目录成为Python模块。'
- en: '`_base.py` for shared settings'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`_base.py` 用于共享设置'
- en: '`dev.py` for development settings'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dev.py` 用于开发设置'
- en: '`test.py` for testing settings'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`test.py` 用于测试设置'
- en: '`staging.py` for staging settings'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`staging.py` 用于暂存设置'
- en: '`production.py` for production settings'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`production.py` 用于生产设置'
- en: Copy the contents of `settings.py`, which was automatically created when you
    started a new Django project, to `settings/_base.py`. Then, delete `settings.py`.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将自动在启动新的Django项目时创建的`settings.py`的内容复制到`settings/_base.py`。然后，删除`settings.py`。
- en: 'Change the `BASE_DIR` in the `settings/_base.py` to point one level up. It
    should first look as follows:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`settings/_base.py`中的`BASE_DIR`更改为指向上一级。它应该首先如下所示：
- en: '[PRE16]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After changing it, it should look like the following:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 更改后，它应如下所示：
- en: '[PRE17]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: If the settings of an environment are the same as the shared settings, then
    just
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个环境的设置与共享设置相同，那么只需
- en: 'import everything from `_base.py` there, as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 从`_base.py`中导入所有内容，如下所示：
- en: '[PRE18]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Apply the settings that you want to attach or overwrite for your specific environment
    in the other files—for example, the development environment settings should go
    to `dev.py`, as shown in the following code snippet:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其他文件中应用您想要附加或覆盖的特定环境的设置，例如，开发环境设置应该放在`dev.py`中，如下面的代码片段所示：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Modify the `manage.py` and `myproject/wsgi.py` files to use one of the environment
    settings by default by changing the following line:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`manage.py`和`myproject/wsgi.py`文件，以默认使用其中一个环境设置，方法是更改以下行：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'You should change this line to the following:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该将此行更改为以下内容：
- en: '[PRE21]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, the Django management commands use the settings from `myproject/settings.py`.
    Using the method that is defined in this recipe, we can keep all of the required
    nonsensitive settings for all environments under version control in the `config`
    directory. On the other hand, the `settings.py` file itself would be ignored by
    version control and will only contain the settings that are necessary for the
    current development, testing, staging, or production environments.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django管理命令使用`myproject/settings.py`中的设置。使用此食谱中定义的方法，我们可以将所有环境中所需的非敏感设置保留在`config`目录中，并将`settings.py`文件本身忽略在版本控制中，它只包含当前开发、测试、暂存或生产环境所需的设置。
- en: For each environment, it is recommended that you set the `DJANGO_SETTINGS_MODULE` environment
    variable individually, either in PyCharm settings, the `env/bin/activate` script,
    or in `.bash_profile`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个环境，建议您单独设置`DJANGO_SETTINGS_MODULE`环境变量，可以在PyCharm设置中、`env/bin/activate`脚本中或`.bash_profile`中设置。
- en: See also
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL* recipe
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为Django、Gunicorn、Nginx和PostgreSQL工作的Docker容器*食谱'
- en: The *Handling sensitive settings* recipe
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*处理敏感设置*食谱'
- en: The *Defining relative paths in the settings* recipe
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在设置中定义相对路径*食谱'
- en: The *Creating a Git ignore file* recipe
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建Git忽略文件*食谱'
- en: Defining relative paths in the settings
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在设置中定义相对路径
- en: Django requires you to define different file paths in the settings, such as
    the root of your media, the root of your static files, the path to templates,
    and the path to translation files. For each developer of your project, the paths
    may differ as the virtual environment can be set up anywhere and the user might
    be working on macOS, Linux, or Windows. Even when your project is wrapped in a
    Docker container, it reduces the maintainability and portability to define absolute
    paths. In any case, there is a way to define these paths dynamically so that they
    are relative to your Django project directory.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Django要求您在设置中定义不同的文件路径，例如媒体的根目录、静态文件的根目录、模板的路径和翻译文件的路径。对于项目的每个开发者，路径可能会有所不同，因为虚拟环境可以设置在任何地方，用户可能在macOS、Linux或Windows上工作。即使您的项目包装在Docker容器中，定义绝对路径会降低可维护性和可移植性。无论如何，有一种方法可以动态定义这些路径，使它们相对于您的Django项目目录。
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Have a Django project started and open `settings/_base.py`.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 已经启动了一个Django项目并打开了`settings/_base.py`。
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Modify your path-related settings accordingly, instead of hardcoding the paths
    to your local directories, as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 相应地修改您的与路径相关的设置，而不是将路径硬编码到本地目录中，如下所示：
- en: '[PRE22]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, Django settings include a `BASE_DIR` value, which is an absolute
    path to the directory containing `manage.py` (usually one level higher than the
    `settings.py` file or two levels higher than `settings/_base.py`). Then, we set
    all of the paths relative to `BASE_DIR` using the `os.path.join()` function.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django设置包括`BASE_DIR`值，这是一个绝对路径，指向包含`manage.py`的目录（通常比`settings.py`文件高一级，或比`settings/_base.py`高两级）。然后，我们使用`os.path.join()`函数将所有路径设置为相对于`BASE_DIR`。
- en: Based on the directory layout we set down in the *Creating a project file structure*
    recipe, we would insert `'myproject'` as an intermediary path segment for some
    of the previous examples since the associated folders were created within this.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们在*创建项目文件结构*食谱中设置的目录布局，我们将在一些先前的示例中插入`'myproject'`作为中间路径段，因为相关文件夹是在其中创建的。
- en: See also
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a project file structure* recipe
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*食谱'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为Django、Gunicorn、Nginx和PostgreSQL工作的Docker容器*食谱'
- en: The *Including external dependencies in your project* recipe
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在项目中包含外部依赖项*食谱'
- en: Handling sensitive settings
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理敏感设置
- en: 'When working when configuring a Django project, you will surely deal with some
    sensitive information, such as passwords and API keys. It is not recommended that
    you put that information under version control. There are two main ways to store
    that information: in environment variables and in separate untracked files. In
    this recipe, we will explore both cases.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置Django项目时，您肯定会处理一些敏感信息，例如密码和API密钥。不建议将这些信息放在版本控制下。存储这些信息的主要方式有两种：在环境变量中和在单独的未跟踪文件中。在这个食谱中，我们将探讨这两种情况。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Most of the settings for a project will be shared across all environments and
    saved in version control. These can be defined directly within the settings files;
    however, there will be some settings that are specific to the environment of the
    project instance or that are sensitive and require additional security, such as
    database or email settings. We will expose these using environment variables.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 项目的大多数设置将在所有环境中共享并保存在版本控制中。这些可以直接在设置文件中定义；但是，将有一些设置是特定于项目实例的环境或敏感的，并且需要额外的安全性，例如数据库或电子邮件设置。我们将使用环境变量来公开这些设置。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To read sensitive settings from the environment variables, perform these steps:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 从环境变量中读取敏感设置，执行以下步骤：
- en: 'At the beginning of `settings/_base.py`, define the `get_secret()` function
    as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`settings/_base.py`的开头，定义`get_secret()`函数如下：
- en: '[PRE23]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, whenever you need to define a sensitive value, use the `get_secret()`
    function, as shown in the following example:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，每当您需要定义敏感值时，使用`get_secret()`函数，如下例所示：
- en: '[PRE24]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: If you run a Django management command without the environment variable set,
    you will see an error raised with a message, such as Set the DJANGO_SECRET_KEY
    environment variable.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在没有设置环境变量的情况下运行Django管理命令，您将看到一个错误消息，例如设置`DJANGO_SECRET_KEY`环境变量。
- en: 'You can set the environment variables in the PyCharm configuration, remote
    server configuration consoles, in the `env/bin/activate` script, `.bash_profile`,
    or directly in the Terminal like this:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在PyCharm配置、远程服务器配置控制台、`env/bin/activate`脚本、`.bash_profile`或直接在终端中设置环境变量，如下所示：
- en: '[PRE25]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Note that you should use the `get_secret()` function for all passwords, API
    keys, and any other sensitive information that you need in your Django project
    configuration.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，您应该在Django项目配置中使用`get_secret()`函数来获取所有密码、API密钥和任何其他敏感信息。
- en: There's more...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Instead of environment variables, you can also use text files with sensitive
    information that won''t be tracked under version control. They can be YAML, INI,
    CSV, or JSON files, placed somewhere on the hard disk. For example, for a JSON
    file, you would have the `get_secret()` function, like this:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用包含敏感信息的文本文件，这些文件不会被版本控制跟踪，而不是环境变量。它们可以是YAML、INI、CSV或JSON文件，放置在硬盘的某个位置。例如，对于JSON文件，您可以有`get_secret()`函数，如下所示：
- en: '[PRE26]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This reads a `secrets.json` file from the settings directory and expects it
    to have at least the following structure:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从设置目录中的`secrets.json`文件中读取，并期望它至少具有以下结构：
- en: '[PRE27]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Make sure that the `secrets.json` file is ignored from the version control,
    but for convenience, you can create `sample_secrets.json` with empty values and
    put it under version control:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`secrets.json`文件被版本控制忽略，但为了方便起见，您可以创建带有空值的`sample_secrets.json`并将其放在版本控制下：
- en: '[PRE28]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: See also
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a project file structure* recipe
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*配方'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker容器中的Django、Gunicorn、Nginx和PostgreSQL*配方'
- en: Including external dependencies in your project
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在项目中包含外部依赖项
- en: 'Sometimes, you can''t install an external dependency with pip and have to include
    it directly within your project, such as in the following cases:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您无法使用pip安装外部依赖项，必须直接将其包含在项目中，例如以下情况：
- en: When you have a patched third-party app where you yourself fixed a bug or added
    a feature that did not get accepted by project owners
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您有一个修补过的第三方应用程序，您自己修复了一个错误或添加了一个未被项目所有者接受的功能时
- en: When you need to use private apps that are not accessible at the **Python Package
    Index** (**PyPI**) or public version control repositories
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您需要使用无法在**Python软件包索引**（**PyPI**）或公共版本控制存储库中访问的私有应用程序时
- en: When you need to use legacy versions of dependencies that are not available
    at PyPI anymore
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当您需要使用PyPI中不再可用的依赖项的旧版本时
- en: '*Including external dependencies in your project* ensures that whenever a developer
    upgrades the dependent modules, all of the other developers will receive the upgraded
    version in the next update from the version control system.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '*在项目中包含外部依赖项*可以确保每当开发人员升级依赖模块时，所有其他开发人员都将在版本控制系统的下一个更新中收到升级后的版本。'
- en: Getting ready
  id: totrans-224
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You should start with a Django project under a virtual environment.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该从虚拟环境下的Django项目开始。
- en: How to do it...
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Execute the following steps one by one for a virtual environment project:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 逐步执行以下步骤，针对虚拟环境项目：
- en: If you haven't done so already, create an `externals` directory under your Django
    project directory, `django-myproject`.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未这样做，请在Django项目目录`django-myproject`下创建一个`externals`目录。
- en: Then, create the `libs` and `apps` directories under it. The `libs` directory
    is for the Python modules that are required by your project—for example, Boto,
    Requests, Twython, and Whoosh. The `apps` directory is for third-party Django
    apps—for example, Django CMS, Django Haystack, and django-storages.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在其中创建`libs`和`apps`目录。`libs`目录用于项目所需的Python模块，例如Boto、Requests、Twython和Whoosh。`apps`目录用于第三方Django应用程序，例如Django
    CMS、Django Haystack和django-storages。
- en: We highly recommend that you create `README.md` files in the `libs` and `apps`
    directories, where you mention what each module is for, what the used version
    or revision is, and where it is taken from.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们强烈建议您在`libs`和`apps`目录中创建`README.md`文件，其中提到每个模块的用途、使用的版本或修订版本以及它来自哪里。
- en: 'The directory structure should look something similar to the following:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 目录结构应该类似于以下内容：
- en: '[PRE29]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The next step is to put the external libraries and apps under the Python path
    so that they are recognized as if they were installed. This can be done by adding
    the following code in the settings:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下一步是将外部库和应用程序放在Python路径下，以便它们被识别为已安装。这可以通过在设置中添加以下代码来完成：
- en: '[PRE30]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'A module is meant to be under the Python path if you can run Python and import
    that module. One of the ways to put a module under the Python path is to modify
    the `sys.path` variable before importing a module that is in an unusual location.
    The value of `sys.path`, as specified by the settings file, is a list of directories
    starting with an empty string for the current directory, followed by the directories
    in the project, and finally the globally shared directories of the Python installation.
    You can see the value of `sys.path` in the Python shell, as follows:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您可以运行Python并导入该模块，则模块应该位于Python路径下。将模块放在Python路径下的一种方法是在导入位于不寻常位置的模块之前修改`sys.path`变量。根据设置文件指定的`sys.path`的值是一个目录列表，以空字符串开头表示当前目录，然后是项目中的目录，最后是Python安装的全局共享目录。您可以在Python
    shell中看到`sys.path`的值，如下所示：
- en: '[PRE31]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: When trying to import a module, Python searches for the module in this list
    and returns the first result that is found.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试导入模块时，Python会在此列表中搜索模块，并返回找到的第一个结果。
- en: Therefore, we first define the `BASE_DIR` variable, which is the absolute path
    of `django-myproject` or three levels higher than `myproject/settings/_base.py`.
    Then, we define the `EXTERNAL_LIBS_PATH` and `EXTERNAL_APPS_PATH` variables, which
    are relative to `BASE_DIR`. Lastly, we modify the `sys.path` property, adding
    new paths to the beginning of the list. Note that we also add an empty string
    as the first path to search, which means that the current directory of any module
    should always be checked first before checking other Python paths.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们首先定义`BASE_DIR`变量，它是`django-myproject`的绝对路径，或者比`myproject/settings/_base.py`高三级。然后，我们定义`EXTERNAL_LIBS_PATH`和`EXTERNAL_APPS_PATH`变量，它们是相对于`BASE_DIR`的。最后，我们修改`sys.path`属性，将新路径添加到列表的开头。请注意，我们还将空字符串添加为第一个搜索路径，这意味着始终应首先检查任何模块的当前目录，然后再检查其他Python路径。
- en: This way of including external libraries doesn't work cross-platform with the
    Python packages that have C language bindings—for example, `lxml`. For such dependencies,
    we would recommend using the pip requirements that were introduced in the *Handling
    project dependencies with pip* recipe.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这种包含外部库的方式无法跨平台使用具有C语言绑定的Python软件包，例如`lxml`。对于这样的依赖关系，我们建议使用在*使用pip处理项目依赖关系*配方中介绍的pip要求。
- en: See also
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a project file structure* recipe
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*配方'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL* recipe
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Docker容器处理Django、Gunicorn、Nginx和PostgreSQL*配方'
- en: The *Handling project dependencies with pip* recipe
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用pip处理项目依赖关系*配方'
- en: The *Defining relative paths in the settings* recipe
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在设置中定义相对路径*配方'
- en: The *Using the Django shell* recipe in [Chapter 10](http://bells)*, Bells and
    Whistles*
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在[第10章](http://bells)*中的*Django shell*配方，铃声和口哨*'
- en: Setting up STATIC_URL dynamically
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态设置STATIC_URL
- en: If you set `STATIC_URL` to a static value, then each time you update a CSS file,
    a JavaScript file, or an image, you and your website visitors will need to clear
    the browser cache in order to see the changes. There is a trick to work around
    clearing the browser's cache. It is to have the timestamp of the latest changes
    shown in `STATIC_URL`. Whenever the code is updated, the visitor's browser will
    force the loading of all new static files.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将`STATIC_URL`设置为静态值，则每次更新CSS文件、JavaScript文件或图像时，您和您的网站访问者都需要清除浏览器缓存才能看到更改。有一个绕过清除浏览器缓存的技巧，就是在`STATIC_URL`中显示最新更改的时间戳。每当代码更新时，访问者的浏览器将强制加载所有新的静态文件。
- en: In this recipe, we will see how to put a timestamp in `STATIC_URL` for Git users.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将看到如何在`STATIC_URL`中放置Git用户的时间戳。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that your project is under Git version control and that you have `BASE_DIR`
    defined in your settings, as shown in the *Defining relative paths in the settings*
    recipe.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的项目处于Git版本控制下，并且在设置中定义了`BASE_DIR`，如*在设置中定义相对路径*配方中所示。
- en: How to do it...
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'The procedure to put the Git timestamp in the `STATIC_URL` setting consists
    of the following two steps:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 将Git时间戳放入`STATIC_URL`设置的过程包括以下两个步骤：
- en: 'If you haven''t done so yet, create the `myproject.apps.core` app in your Django
    project. You should also create a `versioning.py` file there:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未这样做，请在Django项目中创建`myproject.apps.core`应用。您还应该在那里创建一个`versioning.py`文件：
- en: '[PRE32]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Import the newly created `get_git_changeset_timestamp()` function in the settings
    and use it for the `STATIC_URL` path, as follows:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置中导入新创建的`get_git_changeset_timestamp()`函数，并将其用于`STATIC_URL`路径，如下所示：
- en: '[PRE33]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: How it works...
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `get_git_changeset_timestamp()` function takes the `absolute_path` directory
    as a parameter and calls the `git log` shell command with the parameters to show
    the Unix timestamp of the HEAD revision in the directory. We pass `BASE_DIR` to
    the function, as we are sure that it is under version control. The timestamp is
    parsed, converted to a string consisting of the year, month, day, hour, minutes,
    and seconds returned, and is then included in the definition of the `STATIC_URL`.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_git_changeset_timestamp()`函数以`absolute_path`目录作为参数，并调用`git log` shell命令，参数是显示目录中HEAD修订的Unix时间戳。我们将`BASE_DIR`传递给函数，因为我们确信它处于版本控制之下。时间戳被解析，转换为由年、月、日、小时、分钟和秒组成的字符串，然后包含在`STATIC_URL`的定义中。'
- en: There's more...
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This method works only if each of your environments contains the full Git repository
    of the project—in some cases, for example, when you use Heroku or Docker for deployments—you
    don't have access to a Git repository and the `git log` command in the remote
    servers. In order to have the `STATIC_URL` with a dynamic fragment, you have to
    read the timestamp from a text file—for example, `myproject/settings/last-modified.txt`—that
    should be updated with each commit.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法仅在您的每个环境中包含项目的完整Git存储库时才有效——在某些情况下，例如当您使用Heroku或Docker进行部署时，您无法访问远程服务器中的Git存储库和`git
    log`命令。为了使`STATIC_URL`具有动态片段，您必须从文本文件中读取时间戳，例如`myproject/settings/last-modified.txt`，并且应该在每次提交时更新该文件。
- en: 'In this case, your settings would contain the following lines:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您的设置将包含以下行：
- en: '[PRE34]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'You can make your Git repository update `last-modified.txt` with a pre-commit
    hook. This is an executable bash script that should be called `pre-commit` and
    placed under `django-myproject/.git/hooks/`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过预提交挂钩使Git存储库更新`last-modified.txt`。这是一个可执行的bash脚本，应该被称为`pre-commit`，并放置在`django-myproject/.git/hooks/`下：
- en: '[PRE35]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This script will update `last-modified.txt` whenever you commit to the Git repository
    and will add that file to the Git index.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 每当您提交到Git存储库时，此脚本将更新`last-modified.txt`并将该文件添加到Git索引中。
- en: See also
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating the Git ignore file* recipe
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建Git忽略文件*配方'
- en: Setting UTF-8 as the default encoding for the MySQL configuration
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将UTF-8设置为MySQL配置的默认编码
- en: MySQL describes itself as the most popular open source database. In this recipe,
    we will tell you how to set UTF-8 as the default encoding for it. Note that if
    you don't set this encoding in the database configuration, you might get into
    a situation where LATIN1 is used by default with your UTF-8-encoded data. This
    will lead to database errors whenever symbols such as € are used. This recipe
    will also save you from the difficulties of converting the database data from
    LATIN1 to UTF-8, especially when you have some tables encoded in LATIN1 and others
    in UTF-8.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL自称是最流行的开源数据库。在这个食谱中，我们将告诉你如何将UTF-8设置为它的默认编码。请注意，如果你不在数据库配置中设置这个编码，你可能会遇到这样的情况，即默认情况下使用LATIN1编码你的UTF-8编码数据。这将导致数据库错误，每当使用€等符号时。这个食谱还将帮助你免于在将数据库数据从LATIN1转换为UTF-8时遇到困难，特别是当你有一些表以LATIN1编码，另一些表以UTF-8编码时。
- en: Getting ready
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that the MySQL database management system and the **mysqlclient**
    Python module are installed and that you are using the MySQL engine in your project's
    settings.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 确保MySQL数据库管理系统和**mysqlclient** Python模块已安装，并且在项目设置中使用了MySQL引擎。
- en: How to do it...
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Open the `/etc/mysql/my.cnf` MySQL configuration file in your favorite editor
    and ensure that the following settings are set in the `[client]`, `[mysql]`, and
    `[mysqld]` sections, as follows:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 在你喜欢的编辑器中打开`/etc/mysql/my.cnf` MySQL配置文件，并确保以下设置在`[client]`、`[mysql]`和`[mysqld]`部分中设置如下：
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'If any of the sections don''t exist, create them in the file. If the sections
    already exist, add these settings to the existing configurations, and then restart
    MySQL in your command-line tool, as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何部分不存在，就在文件中创建它们。如果部分已经存在，就将这些设置添加到现有的配置中，然后在命令行工具中重新启动MySQL，如下所示：
- en: '[PRE37]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: How it works...
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now, whenever you create a new MySQL database, the databases and all of their
    tables will be set in UTF-8 encoding by default. Don't forget to set this up on
    all computers on which your project is developed or published.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，每当你创建一个新的MySQL数据库时，数据库和所有的表都将默认设置为UTF-8编码。不要忘记在开发或发布项目的所有计算机上设置这一点。
- en: There's more...
  id: totrans-280
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In PostgreSQL, the default server encoding is already UTF-8, but if you want
    to explicitly create a PostgreSQL database with UTF-8 encoding, then you can do
    that with the following command:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 在PostgreSQL中，默认的服务器编码已经是UTF-8，但如果你想显式地创建一个带有UTF-8编码的PostgreSQL数据库，那么你可以使用以下命令来实现：
- en: '[PRE38]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: See also
  id: totrans-283
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a project file structure* recipe
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*食谱'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Docker容器进行Django、Gunicorn、Nginx和PostgreSQL开发*食谱'
- en: Creating the Git ignore file
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Git忽略文件
- en: Git is the most popular distributed version control system, and you are probably
    already using it for your Django project. Although you are tracking file changes
    for most of your files, it's recommended that you keep some specific files and
    folders out of version control. Usually, caches, compiled code, log files, and
    hidden system files should not be tracked in the Git repository.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: Git是最流行的分布式版本控制系统，你可能已经在你的Django项目中使用它。尽管你正在跟踪大部分文件的更改，但建议你将一些特定的文件和文件夹排除在版本控制之外。通常情况下，缓存、编译代码、日志文件和隐藏系统文件不应该在Git仓库中被跟踪。
- en: Getting ready
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that your Django project is under Git version control.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你的Django项目在Git版本控制下。
- en: How to do it...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Using your favorite text editor, create a `.gitignore` file at the root of
    your Django project and put the following files and directories there:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的文本编辑器，在你的Django项目的根目录创建一个`.gitignore`文件，并将以下文件和目录放在其中：
- en: '[PRE39]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: How it works...
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: "The `.gitignore` file specifies patterns that should intentionally be untracked\
    \ by the \LGit version control system. The `.gitignore` file that we created in\
    \ this recipe will ignore the Python-compiled files, local settings, collected\
    \ static files, \Land media directory with the uploaded files."
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`.gitignore`文件指定了应该被Git版本控制系统有意忽略的模式。我们在这个食谱中创建的`.gitignore`文件将忽略Python编译文件、本地设置、收集的静态文件和上传文件的媒体目录。'
- en: 'Note that we have exceptional syntax with exclamation marks for media and static
    files:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们对媒体和静态文件有特殊的叹号语法：
- en: '[PRE40]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This tells Git to ignore the `/media/` directory but keep the `/media/.gitkeep` file
    tracked under version control. As Git version control tracks files, but not directories,
    we use `.gitkeep` to make sure that the `media` directory will be created in each
    environment, but not tracked.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 这告诉Git忽略`/media/`目录，但保持`/media/.gitkeep`文件在版本控制下被跟踪。由于Git版本控制跟踪文件，而不是目录，我们使用`.gitkeep`来确保`media`目录将在每个环境中被创建，但不被跟踪。
- en: See also
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a project file structure* recipe
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*食谱'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Docker容器进行Django、Gunicorn、Nginx和PostgreSQL开发*食谱'
- en: Deleting Python-compiled files
  id: totrans-301
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 删除Python编译文件
- en: When you run your project for the first time, Python compiles all of your `*.py`
    code in bytecode-compiled files, `*.pyc`, which are used later for execution.
    Normally, when you change the `*.py` files, `*.pyc` is recompiled; however, sometimes
    when you switch branches or move the directories, you need to clean up the compiled
    files manually.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 当你第一次运行项目时，Python会将所有的`*.py`代码编译成字节编译文件`*.pyc`，以便后续执行。通常情况下，当你改变`*.py`文件时，`*.pyc`会被重新编译；然而，有时当你切换分支或移动目录时，你需要手动清理编译文件。
- en: Getting ready
  id: totrans-303
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Use your favorite editor and edit or create a `.bash_profile` file in your home
    directory.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 使用你喜欢的编辑器，在你的主目录中编辑或创建一个`.bash_profile`文件。
- en: How to do it...
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Add this alias at the end of `.bash_profile`, as follows:'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`.bash_profile`的末尾添加这个别名，如下所示：
- en: '[PRE41]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Now, to clean the Python-compiled files, go to your project directory and type
    the following command on the command line:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要清理Python编译文件，进入你的项目目录，在命令行上输入以下命令：
- en: '[PRE42]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: At first, we create a Unix alias that searches for the `*.pyc` and `*.pyo` files
    and `__pycache__` directories and deletes them in the current directory, as well
    as its children. The `.bash_profile` file is executed when you start a new session
    in the command-line tool.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们创建一个Unix别名，用于搜索当前目录及其子目录中的`*.pyc`和`*.pyo`文件和`__pycache__`目录，并将其删除。当您在命令行工具中启动新会话时，将执行`.bash_profile`文件。
- en: There's more...
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: If you want to avoid creating Python-compiled files altogether, you can set
    an environment variable, `PYTHONDONTWRITEBYTECODE=1`, in your `.bash_profile`,
    `env/bin/activate` script, or PyCharm configuration.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想完全避免创建Python编译文件，可以在`.bash_profile`、`env/bin/activate`脚本或PyCharm配置中设置环境变量`PYTHONDONTWRITEBYTECODE=1`。
- en: See also
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating the Git ignore file* recipe
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Git忽略文件的方法
- en: Respecting the import order in Python files
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 尊重Python文件中的导入顺序
- en: When you create the Python modules, it is good practice to stay consistent with
    the structure in the files. This makes it easier for both you and other developers
    to read the code. This recipe will show you how to structure your imports.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建Python模块时，保持与文件结构一致是一个良好的做法。这样可以使您和其他开发人员更容易阅读代码。本方法将向您展示如何构建导入结构。
- en: Getting ready
  id: totrans-318
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Create a virtual environment and create a Django project in it.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟环境并在其中创建Django项目。
- en: How to do it...
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Use the following structure for each Python file that you are creating. Categorize
    the imports into sections, as follows:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 对于您正在创建的每个Python文件，请使用以下结构。将导入分类为以下几个部分：
- en: '[PRE43]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: How it works...
  id: totrans-323
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We have five main categories for the imports, as follows:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有五个主要的导入类别，如下所示：
- en: '**System libraries** for packages in the default installation of Python'
  id: totrans-325
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 系统库用于Python默认安装的软件包
- en: '**Third-party libraries** for the additional installed Python packages'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三方库用于额外安装的Python包
- en: '**Django modules** for different modules from the Django framework'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django模块用于Django框架中的不同模块
- en: '**Django apps** for third-party and local apps'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django应用程序用于第三方和本地应用程序
- en: '**Current-app modules** for relative imports from the current app'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前应用程序模块用于从当前应用程序进行相对导入
- en: There's more...
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When coding in Python and Django, use the official style guide for Python code,
    PEP 8\. You can find it at [https:/​/​www.​python.​org/​dev/​peps/​pep-​0008/](https://www.python.org/dev/peps/pep-0008/)​.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python和Django中编码时，请使用Python代码的官方样式指南PEP 8。您可以在[https:/​/​www.​python.​org/​dev/​peps/​pep-​0008/](https://www.python.org/dev/peps/pep-0008/)找到它。
- en: See also
  id: totrans-332
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Handling project dependencies with pip* recipe
  id: totrans-333
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用pip处理项目依赖的方法
- en: The *Including external dependencies in your project* recipe
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在项目中包含外部依赖的方法
- en: Creating an app configuration
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建应用程序配置
- en: Django projects consist of multiple Python modules called applications (or,
    more commonly, apps) that combine different modular functionalities. Each app
    can have models, views, forms, URL configurations, management commands, migrations,
    signals, tests, context processors, middlewares, and so on. The Django framework
    has an application registry, where all apps and models are collected and later
    used for configuration and introspection. Since Django 1.7, metainformation about
    apps can be saved in the `AppConfig` instance for each app. Let's create a sample
    `magazine` app to take a look at how to use the app configuration there.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目由称为应用程序（或更常见的应用程序）的多个Python模块组成，这些模块结合了不同的模块化功能。每个应用程序都可以有模型、视图、表单、URL配置、管理命令、迁移、信号、测试、上下文处理器、中间件等。Django框架有一个应用程序注册表，其中收集了所有应用程序和模型，稍后用于配置和内省。自Django
    1.7以来，有关应用程序的元信息可以保存在每个应用程序的`AppConfig`实例中。让我们创建一个名为`magazine`的示例应用程序，看看如何在那里使用应用程序配置。
- en: Getting ready
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: 'You can create a Django app either by calling the `startapp` management command
    or by creating the app module manually:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过调用`startapp`管理命令或手动创建应用程序模块来创建Django应用程序：
- en: '[PRE44]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: With your `magazine` app created, add a `NewsArticle` model to `models.py`,
    create administration for the model in `admin.py`, and put `"myproject.apps.magazine"`
    in `INSTALLED_APPS` in the settings. If you are not yet familiar with these tasks,
    study the official Django tutorial at [https://docs.djangoproject.com/en/3.0/intro/tutorial01/](https://docs.djangoproject.com/en/3.0/intro/tutorial01/)[.](https://docs.djangoproject.com/en/2.2/intro/tutorial01/)
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`magazine`应用程序后，在`models.py`中添加`NewsArticle`模型，在`admin.py`中为模型创建管理，并在设置中的`INSTALLED_APPS`中放入`"myproject.apps.magazine"`。如果您还不熟悉这些任务，请学习官方的Django教程[https://docs.djangoproject.com/en/3.0/intro/tutorial01/](https://docs.djangoproject.com/en/3.0/intro/tutorial01/)。
- en: How to do it...
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create and use the app configuration:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建和使用应用程序配置：
- en: 'Modify the `apps.py` file and insert the following content into it, as follows:'
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`apps.py`文件并插入以下内容：
- en: '[PRE45]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Edit the `__init__.py` file in the `magazine` module to contain the following
    content:'
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`magazine`模块中的`__init__.py`文件，包含以下内容：
- en: '[PRE46]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Let''s create a `signals.py` file and add some signal handlers there:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个`signals.py`文件并在其中添加一些信号处理程序：
- en: '[PRE47]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: How it works...
  id: totrans-349
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you run an HTTP server or invoke a management command, `django.setup()`
    is called. It loads the settings, sets up logging, and prepares the app registry.
    This registry is initialized in three steps. Django first imports the configurations
    for each item from `INSTALLED_APPS` in the settings. These items can point to
    app names or configurations directly—for example, `"myproject.apps.magazine"`
    or `"myproject.apps.magazine.apps.MagazineAppConfig"`.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 当您运行HTTP服务器或调用管理命令时，会调用`django.setup()`。它加载设置，设置日志记录，并准备应用程序注册表。此注册表分为三个步骤初始化。Django首先从设置中的`INSTALLED_APPS`导入每个项目的配置。这些项目可以直接指向应用程序名称或配置，例如`"myproject.apps.magazine"`或`"myproject.apps.magazine.apps.MagazineAppConfig"`。
- en: Django then tries to import `models.py` from each app in `INSTALLED_APPS` and
    collect all of the models.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 然后Django尝试从`INSTALLED_APPS`中的每个应用程序导入`models.py`并收集所有模型。
- en: Finally, Django runs the `ready()` method for each app configuration. This method
    presents a good point in the development process to register signal handlers,
    if you have any. The `ready()` method is optional.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，Django 运行 `ready()` 方法以进行每个应用程序配置。如果有的话，此方法在开发过程中是注册信号处理程序的好时机。`ready()`
    方法是可选的。
- en: In our example, the `MagazineAppConfig` class sets the configuration for the
    `magazine` app. The `name` parameter defines the module of the current app. The
    `verbose_name` parameter defines a human name that is used in the Django model
    administration, where models are presented and grouped by apps. The `ready()`
    method imports and activates the signal handlers that, when in DEBUG mode, print
    in the terminal that a `NewsArticle` object was saved or deleted.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，`MagazineAppConfig` 类设置了 `magazine` 应用程序的配置。`name` 参数定义了当前应用程序的模块。`verbose_name`
    参数定义了在 Django 模型管理中使用的人类名称，其中模型按应用程序进行呈现和分组。`ready()` 方法导入并激活信号处理程序，当处于 DEBUG
    模式时，它会在终端中打印出 `NewsArticle` 对象已保存或已删除的消息。
- en: There's more...
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'After calling `django.setup()`, you can load the app configurations and models
    from the registry as follows:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用 `django.setup()` 后，您可以按如下方式从注册表中加载应用程序配置和模型：
- en: '[PRE48]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: You can read more about app configuration in the official Django documentation
    at
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方 Django 文档中阅读有关应用程序配置的更多信息
- en: '[https://docs.djangoproject.com/en/2.2/ref/applications/](https://docs.djangoproject.com/en/2.2/ref/applications/)​.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.djangoproject.com/en/2.2/ref/applications/](https://docs.djangoproject.com/en/2.2/ref/applications/)​。'
- en: See also
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Working with a virtual environment* recipe
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用虚拟环境* 配方'
- en: The *Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL*
    recipe
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 Docker 容器进行 Django、Gunicorn、Nginx 和 PostgreSQL* 配方'
- en: The *Defining overwritable app settings* recipe
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*定义可覆盖的应用程序设置* 配方'
- en: '[Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*, Model Administration*'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 6 章](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)*，模型管理*'
- en: Defining overwritable app settings
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义可覆盖的应用程序设置
- en: This recipe will show you how to define settings for your app that can then
    be overwritten in your project's settings file. This is especially useful for
    reusable apps that you can customize by adding a configuration.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将向您展示如何定义应用程序的设置，然后可以在项目的设置文件中进行覆盖。这对于可重用的应用程序特别有用，您可以通过添加配置来自定义它们。
- en: Getting ready
  id: totrans-366
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: Follow the steps in the *Getting ready* in the *Creating app configuration*
    recipe to create your Django app.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 按照*准备工作*中*创建应用程序配置* 配方中的步骤来创建您的 Django 应用程序。
- en: How to do it...
  id: totrans-368
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Define your app settings using the `getattr()` pattern in `models.py` if you
    just have one or two settings, or in the `app_settings.py` file if the settings
    are extensive and you want to organize them better:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果只有一两个设置，可以在 `models.py` 中使用 `getattr()` 模式定义应用程序设置，或者如果设置很多并且想要更好地组织它们，可以在
    `app_settings.py` 文件中定义：
- en: '[PRE49]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '`models.py` will contain the `NewsArticle` model, like this:'
  id: totrans-371
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`models.py` 将包含以下 `NewsArticle` 模型：'
- en: '[PRE50]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Next, in `admin.py`, we will import and use the settings from `app_settings.py`,
    as follows:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在 `admin.py` 中，我们将从 `app_settings.py` 导入并使用设置，如下所示：
- en: '[PRE51]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'If you want to overwrite the `ARTICLE_THEME_CHOICES` settings for a given project,
    you should add `MAGAZINE_ARTICLE_THEME_CHOICES` in the project settings:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果要覆盖给定项目的 `ARTICLE_THEME_CHOICES` 设置，应在项目设置中添加 `MAGAZINE_ARTICLE_THEME_CHOICES`：
- en: '[PRE52]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: How it works...
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `getattr(object, attribute_name[, default_value])` Python function tries
    to get the `attribute_name` attribute from `object` and returns `default_value`
    if it is not found. We try to read different settings from the Django project
    settings module or, if they don't exist there, the default values are used.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`getattr(object, attribute_name[, default_value])` Python 函数尝试从 `object` 获取
    `attribute_name` 属性，并在找不到时返回 `default_value`。我们尝试从 Django 项目设置模块中读取不同的设置，如果在那里找不到，则使用默认值。'
- en: Note that we could have defined the `choices` for the `theme` field in `models.py`,
    but instead we created a custom `ModelForm` in administration and set the choices
    there. This was done to avoid the creation of new database migrations whenever
    the `ARTICLE_THEME_CHOICES` is changed.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，我们本可以在 `models.py` 中为 `theme` 字段定义 `choices`，但我们改为在管理中创建自定义 `ModelForm`
    并在那里设置 `choices`。这样做是为了避免在更改 `ARTICLE_THEME_CHOICES` 时创建新的数据库迁移。
- en: See also
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating app configuration* recipe
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建应用程序配置* 配方'
- en: '[Chapter 6](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml), *Model Administration*'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 6 章](8b8138c4-c364-4616-8a81-b2f369cf870b.xhtml)，*模型管理*'
- en: Working with Docker containers for Django, Gunicorn, Nginx, and PostgreSQL
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 容器进行 Django、Gunicorn、Nginx 和 PostgreSQL
- en: Django projects depend not only on Python requirements, but also on many system
    requirements, such as a web server, database, server cache, and mail server. When
    developing a Django project, you need to ensure that all environments and all
    developers will have all the same requirements installed. One way to keep those
    dependencies in sync is to use Docker. With Docker, you can have different versions
    of the database, web, or other servers required individually for each project.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Django 项目不仅依赖于 Python 要求，还依赖于许多系统要求，如 Web 服务器、数据库、服务器缓存和邮件服务器。在开发 Django 项目时，您需要确保所有环境和所有开发人员都安装了相同的要求。保持这些依赖项同步的一种方法是使用
    Docker。使用 Docker，您可以为每个项目单独拥有数据库、Web 或其他服务器的不同版本。
- en: Docker is a system for creating configured, customized virtual machines called
    containers. It allows us to duplicate the setup of any production environment
    precisely. Docker containers are created from so-called Docker images. Images
    consist of layers (or instructions) on how to build the container. There can be
    an image for PostgreSQL, an image for Redis, an image for Memcached, and a custom
    image for your Django project, and all those images can be combined into accompanying containers
    with Docker Compose.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 是用于创建配置、定制的虚拟机的系统，称为容器。它允许我们精确复制任何生产环境的设置。Docker 容器是从所谓的 Docker 镜像创建的。镜像由层（或指令）组成，用于构建容器。可以有一个用于
    PostgreSQL 的镜像，一个用于 Redis 的镜像，一个用于 Memcached 的镜像，以及一个用于您的 Django 项目的自定义镜像，所有这些镜像都可以与
    Docker Compose 结合成相应的容器。
- en: In this recipe, we will use a project boilerplate to set up a Django project
    with a PostgreSQL database, served by Nginx and Gunicorn, and manage all of them
    with Docker Compose.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将使用项目模板来设置一个Django项目，其中包括一个由Nginx和Gunicorn提供的PostgreSQL数据库，并使用Docker
    Compose来管理它们。
- en: Getting ready
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: First, you will need to install the Docker Engine, following the instructions
    at [https://www.docker.com/get-started](https://www.docker.com/get-started). This
    usually includes the Compose tool, which makes it possible to manage systems that
    require multiple containers, ideal for a fully isolated Django project. If it
    is needed separately, installation details for Compose are available at [https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)​.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要安装Docker Engine，按照[https://www.docker.com/get-started](https://www.docker.com/get-started)上的说明进行操作。这通常包括Compose工具，它可以管理需要多个容器的系统，非常适合完全隔离的Django项目。如果需要单独安装，Compose的安装详细信息可在[https://docs.docker.com/compose/install/](https://docs.docker.com/compose/install/)上找到。
- en: How to do it...
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s explore the Django and Docker boilerplate:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来探索Django和Docker模板：
- en: Download the code from [https://github.com/archatas/django_docker](https://github.com/archatas/django_docker)
    to your computer to the `~/projects/django_docker` directory, for example.
  id: totrans-391
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 例如，从[https://github.com/archatas/django_docker](https://github.com/archatas/django_docker)下载代码到您的计算机的`~/projects/django_docker`目录。
- en: If you choose another directory, for example, `myproject_docker`, then you will
    have to do a global search and replace `django_docker` with `myproject_docker`.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您选择另一个目录，例如`myproject_docker`，那么您将需要全局搜索和替换`django_docker`为`myproject_docker`。
- en: 'Open the `docker-compose.yml` file. There are three containers that need to
    be created: `nginx`, `gunicorn`, and `db`. Don''t worry if it looks complicated;
    we''ll describe it in detail later:'
  id: totrans-393
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`docker-compose.yml`文件。需要创建三个容器：`nginx`，`gunicorn`和`db`。如果看起来很复杂，不用担心；我们稍后会详细描述它：
- en: '[PRE53]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Open and read through the `Dockerfile` file. These are the layers (or instructions)
    that are needed to create the `gunicorn` container:'
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开并阅读`Dockerfile`文件。这些是创建`gunicorn`容器所需的层（或指令）：
- en: '[PRE54]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Copy the `build_dev_example.sh` script to `build_dev.sh` and edit its content.
    These are environment variables to pass to the `docker-compose` script:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`build_dev_example.sh`脚本复制到`build_dev.sh`并编辑其内容。这些是要传递给`docker-compose`脚本的环境变量：
- en: '[PRE55]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'In a command-line tool, add execution permissions to `build_dev.sh` and run
    it to build the containers:'
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在命令行工具中，为`build_dev.sh`添加执行权限并运行它以构建容器：
- en: '[PRE56]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: If you now go to `http://0.0.0.0/en/`, you should see a Hello, World! page there.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您现在转到`http://0.0.0.0/en/`，您应该会在那里看到一个Hello, World!页面。
- en: 'When navigating to `http://0.0.0.0/en/admin/`, you should see the following:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到`http://0.0.0.0/en/admin/`时，您应该会看到以下内容：
- en: '[PRE57]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This means that you have to create the database user and the database in the
    Docker container.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你必须在Docker容器中创建数据库用户和数据库。
- en: 'Let''s SSH to the `db` container and create the database user, password, and
    the database itself in the Docker container:'
  id: totrans-405
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们SSH到`db`容器中，在Docker容器中创建数据库用户、密码和数据库本身：
- en: '[PRE58]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: When asked, enter the same password for the database as in the `build_dev.sh` script.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 当询问时，输入与`build_dev.sh`脚本中数据库相同的密码。
- en: Press [*Ctrl* + *D*] twice to log out of the PostgreSQL user and Docker container.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 按下[*Ctrl* + *D*]两次以注销PostgreSQL用户和Docker容器。
- en: 'If you now go to `http://0.0.0.0/en/admin/`, you should see the following:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在转到`http://0.0.0.0/en/admin/`，您应该会看到以下内容：
- en: '[PRE59]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: This means that you have to run migrations to create the database schema.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您必须运行迁移以创建数据库架构。
- en: 'SSH into the `gunicorn` container and run the necessary Django management commands:'
  id: totrans-412
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: SSH到`gunicorn`容器中并运行必要的Django管理命令：
- en: '[PRE60]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Answer all the questions that are asked by the management commands.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 回答管理命令提出的所有问题。
- en: Press [*Ctrl* + *D*] twice to log out of the Docker container.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 按下[*Ctrl* + *D*]两次以退出Docker容器。
- en: If you now navigate to `[http://0.0.0.0/en/admin/](http://0.0.0.0/en/admin/)`,
    you should see the Django administration, where you can log in with the super
    user's credentials that you have just created.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在导航到`[http://0.0.0.0/en/admin/](http://0.0.0.0/en/admin/)`，您应该会看到Django管理界面，您可以使用刚刚创建的超级用户凭据登录。
- en: Create analogous scripts, `build_test.sh`, `build_staging.sh`, and `build_production.sh`,
    where only the environment variables differ.
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建类似的脚本`build_test.sh`，`build_staging.sh`和`build_production.sh`，只有环境变量不同。
- en: How it works...
  id: totrans-418
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The structure of the code in the boilerplate is similar to the one in a virtual
    environment. The project source files are in the `src` directory. We have the `git-hooks`
    directory for the pre-commit hook that is used to track the last modification
    date and the `config` directory for the configurations of the services used in
    the containers:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 模板中的代码结构类似于虚拟环境中的代码结构。项目源文件位于`src`目录中。我们有`git-hooks`目录用于预提交挂钩，用于跟踪最后修改日期和`config`目录用于容器中使用的服务的配置：
- en: '[PRE61]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: The main Docker-related configurations are at `docker-compose.yml` and `Dockerfile`.
    Docker Compose is a wrapper around Docker's command-line API. The `build_dev.sh`
    script builds and runs the Django project under the Gunicorn WSGI HTTP server
    at port `8000`, Nginx at port `80` (serving static and media files and proxying
    other requests to Gunicorn), and the PostgreSQL database at port `5432`.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的与Docker相关的配置位于`docker-compose.yml`和`Dockerfile`。Docker Compose是Docker命令行API的包装器。`build_dev.sh`脚本构建并在端口`8000`下运行Django项目下的Gunicorn
    WSGI HTTP服务器，端口`80`下的Nginx（提供静态和媒体文件并代理其他请求到Gunicorn），以及端口`5432`下的PostgreSQL数据库。
- en: 'In the `docker-compose.yml` file, the creation of three Docker containers is
    requested:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 在`docker-compose.yml`文件中，请求创建三个Docker容器：
- en: '`nginx` for the Nginx web server'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`nginx`用于Nginx Web服务器'
- en: '`gunicorn` for the Django project with the Gunicorn web server'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gunicorn`用于Django项目的Gunicorn Web服务器'
- en: '`db` for the PostgreSQL database'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`用于PostgreSQL数据库'
- en: The `nginx` and `db` containers will be created from the official images located
    at [https://hub.docker.com](https://hub.docker.com). They have specific configuration
    parameters, such as the ports they are running on, environment variables, dependencies
    on other containers, and volumes.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`nginx`和`db`容器将从位于[https://hub.docker.com](https://hub.docker.com)的官方镜像创建。它们具有特定的配置参数，例如它们运行的端口，环境变量，对其他容器的依赖以及卷。'
- en: Docker volumes are specific directories that stay untouched when you rebuild
    the Docker containers. Volumes need to be defined for the database data files,
    media, static, and the like.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: Docker卷是在重新构建Docker容器时保持不变的特定目录。需要为数据库数据文件，媒体，静态文件等定义卷。
- en: 'The `gunicorn` container will be built from the instructions at the `Dockerfile`,
    defined by the build context in the `docker-compose.yml` file. Let''s examine
    each layer (or instruction) there:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`gunicorn`容器将根据`Dockerfile`中的指令构建，该指令由`docker-compose.yml`文件中的构建上下文定义。让我们检查每个层（或指令）：'
- en: The `gunicorn` container will be based on the `python:3.7` image
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`gunicorn`容器将基于`python:3.7`镜像'
- en: It will take `PIP_REQUIREMENTS` as an argument from the `docker-compose.yml`
    file
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将从`docker-compose.yml`文件中获取`PIP_REQUIREMENTS`作为参数
- en: It will set environment variables for the container
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将为容器设置环境变量
- en: It will install and upgrade pip, setuptools, and virtualenv
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将安装并升级pip，setuptools和virtualenv
- en: It will create a system user named `myproject` for the Django project
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将为Django项目创建一个名为`myproject`的系统用户
- en: It will set `myproject` as the current user
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将把`myproject`设置为当前用户
- en: It will set the home directory of the `myproject` user as the current working
    directory
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将把`myproject`用户的主目录设置为当前工作目录
- en: It will create a virtual environment there
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将在那里创建一个虚拟环境
- en: It will copy pip requirements from the base computer to the Docker container
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将从基础计算机复制pip要求到Docker容器
- en: It will install the pip requirements for the current environment defined by
    the `PIP_REQUIREMENTS` variable
  id: totrans-438
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将安装当前环境的pip要求，由`PIP_REQUIREMENTS`变量定义
- en: It will copy the source of the entire Django project
  id: totrans-439
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将复制整个Django项目的源代码
- en: 'The content of `config/nginx/conf.d/myproject.conf` will be saved under `/etc/nginx/conf.d/` in
    the `nginx` container. This is the configuration of the Nginx web server telling
    it to listen to port `80` (the default HTTP port) and forward requests to the
    Gunicorn server on port `8000`, except for requests asking for static or media
    content:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`config/nginx/conf.d/myproject.conf`的内容将保存在`nginx`容器中的`/etc/nginx/conf.d/`下。这是Nginx
    Web服务器的配置，告诉它监听端口`80`（默认的HTTP端口）并将请求转发到端口`8000`上的Gunicorn服务器，除了请求静态或媒体内容：'
- en: '[PRE62]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: You can learn more about Nginx and Gunicorn configurations in the *Deploying
    on Nginx and Gunicorn for the staging environment* and *Deploying on Nginx and
    Gunicorn for the production environment *recipes in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*,
    Deployment*.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*中的*在Nginx和Gunicorn上部署暂存环境*和*在Nginx和Gunicorn上部署生产环境*配方中了解更多关于Nginx和Gunicorn配置的信息。
- en: There's more...
  id: totrans-443
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can destroy Docker containers with the `docker-compose down` command and
    rebuild them with your build script:'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`docker-compose down`命令销毁Docker容器，并使用构建脚本重新构建它们：
- en: '[PRE63]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'If something is not working as expected, you can inspect the logs with the
    `docker-compose logs` command:'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 如果某些内容不符合预期，您可以使用`docker-compose logs`命令检查日志：
- en: '[PRE64]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'To connect to any of the containers via SSH, you should use one of the following:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过SSH连接到任何容器，您应该使用以下之一：
- en: '[PRE65]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'You can copy files and directories to and from volumes on Docker containers
    using the `docker cp` command:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`docker cp`命令将文件和目录复制到Docker容器上的卷中，并从中复制出来：
- en: '[PRE66]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: If you want to get better a understanding of Docker and Docker Compose, check
    out the official documentation at [https://docs.docker.com/](https://docs.docker.com/),
    and specifically [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想更好地了解Docker和Docker Compose，请查看官方文档[https://docs.docker.com/](https://docs.docker.com/)，特别是[https://docs.docker.com/compose/](https://docs.docker.com/compose/)。
- en: See also
  id: totrans-453
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: The *Creating a project file structure* recipe
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建项目文件结构*配方'
- en: The *Deploying on Apache with mod_wsgi for the staging environment* recipe in [Chapter
    12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml), *Deployment*
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Apache上使用mod_wsgi部署暂存环境*配方在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*'
- en: The *Deploying on Apache with mod_wsgi for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Apache上使用mod_wsgi部署生产环境*配方在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*'
- en: The *Deploying on Nginx and Gunicorn for the staging environment* recipe in
    [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Nginx和Gunicorn上部署暂存环境*配方在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*'
- en: The *Deploying on Nginx and Gunicorn for the production environment* recipe
    in [Chapter 12](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*, Deployment*
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在Nginx和Gunicorn上部署生产环境*配方在[第12章](9465e564-5eb5-4089-ad11-3bd2f49d5235.xhtml)*，部署*'
