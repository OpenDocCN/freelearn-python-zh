- en: Deploying Serverless APIs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署无服务器API
- en: So far, we have come a long way in our journey of learning about serverless
    applications and building serverless engineering. We have learned what the serverless
    paradigm actually is, how the AWS Lambda function works, understanding the internals
    of AWS Lambda, along with a detailed understanding of how several triggers work.
    We have also done several mini projects around experimenting with triggers and
    deploying them as end-to-end serverless pipelines.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们在学习无服务器应用程序和构建无服务器工程方面已经走了很长一段路。我们已经了解了无服务器范例的实际含义，AWS Lambda函数的工作原理，了解了AWS
    Lambda的内部工作原理，以及对多个触发器的详细了解。我们还围绕尝试触发器并将它们部署为端到端无服务器流水线进行了几个迷你项目。
- en: In this chapter, you will be learning how to build efficient and scalable serverless
    APIs, using the AWS Lambda and AWS API Gateway services. We will start with understanding
    how the API Gateway works, instead of diving directly to building the serverless
    API. After that, we will understand how API Gateway and AWS Lambda integrate with
    each other. And finally, we will be creating and deploying a fully functional
    serverless API, as part of your learning from this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何使用AWS Lambda和AWS API网关服务构建高效可扩展的无服务器API。我们将从了解API网关的工作原理开始，而不是直接构建无服务器API。之后，我们将了解API网关和AWS
    Lambda如何相互集成。最后，作为本章学习的一部分，我们将创建和部署一个完全功能的无服务器API。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: API methods and resources
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API方法和资源
- en: Setting up integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置集成
- en: Deploying the Lambda function for API execution
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署用于API执行的Lambda函数
- en: Handling authentication and user controls
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理身份验证和用户控制
- en: API methods and resources
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API方法和资源
- en: 'In this section, we will be learning about the API service of AWS, which is
    the API Gateway, and understanding the components and settings available in the
    console for the user who is creating APIs. We will go through all of the components
    and understand the API Gateway better. The steps to create the serverless APIs
    are as follows:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习AWS的API服务，即API网关，并了解控制台中为创建API的用户提供的组件和设置。我们将浏览所有组件并更好地了解API网关。创建无服务器API的步骤如下：
- en: 'We will start by opening the API Gateway console, which looks like this:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从打开API网关控制台开始，它看起来像这样：
- en: '![](img/77983079-abbd-4875-851d-6e09321bdc6c.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/77983079-abbd-4875-851d-6e09321bdc6c.png)'
- en: 'In the API Gateway console, click on the Get Started button to start creating
    an API. It will take you to an API creation wizard with a popup saying Create
    Example API:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在API网关控制台上，单击“开始”按钮开始创建API。它将带您进入一个API创建向导，弹出窗口上显示“创建示例API”：
- en: '![](img/8453d058-8208-40d0-8c88-c518a75b43d0.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8453d058-8208-40d0-8c88-c518a75b43d0.png)'
- en: 'Once you click on the OK button, you will be redirected to a page where the
    Example API is shown, from which you can get an idea of what an API response looks
    like:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”按钮后，您将被重定向到一个页面，显示示例API，从中您可以了解API响应的样子：
- en: '![](img/8a58f0ab-0c83-4c3b-a724-d6b68316d241.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8a58f0ab-0c83-4c3b-a724-d6b68316d241.png)'
- en: 'The API we are building in this example is for a pet store and for maintaining
    the pets inside the store. By going through the API, you will see what the bits
    and pieces of an API looks like. The API looks like this:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此示例中构建的API是用于宠物商店和维护商店内宠物的。通过浏览API，您将看到API的各个部分是什么样子。API如下所示：
- en: '![](img/1850eb9c-f409-44c6-a7a8-56e6754e29bf.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1850eb9c-f409-44c6-a7a8-56e6754e29bf.png)'
- en: 'Once you click on the Import button at the end, you will be redirected to the
    PetStore (b7exp0d681) API page that we have just created. The API page with all
    the components looks like this:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击末尾的“导入”按钮后，您将被重定向到我们刚刚创建的PetStore（b7exp0d681）API页面。具有所有组件的API页面如下所示：
- en: '![](img/314f78ff-589d-4cd6-b632-7989087b0f9c.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/314f78ff-589d-4cd6-b632-7989087b0f9c.png)'
- en: 'The resources in this API are the GET and POST resources, where you can add
    pets and view the pets, which are available as a list. The list of resources from
    the API we have created is as follows:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该API中的资源是GET和POST资源，您可以在其中添加宠物并查看宠物，它们作为列表可用。我们创建的API的资源列表如下：
- en: '![](img/6cf3936a-cc2f-46cf-b706-090012aee0ea.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cf3936a-cc2f-46cf-b706-090012aee0ea.png)'
- en: 'By clicking on the first GET resource, we can see a detailed execution flow
    from the client to the endpoint and back to the client. The execution flow of
    the resource looks like this:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击第一个GET资源，我们可以看到从客户端到端点再返回客户端的详细执行流程。资源的执行流程如下所示：
- en: '![](img/f473698f-c3d1-4c97-a106-a7d2eebecb55.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f473698f-c3d1-4c97-a106-a7d2eebecb55.png)'
- en: 'Now, if we click on the POST resource, we will find a similar model execution
    flow for the POST resource. It looks very similar to that of the GET resource,
    however, here the API endpoint is mentioned as a URL, as we are trying to retrieve
    the result from it. The execution model looks as follows:'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们单击POST资源，我们将找到与POST资源相似的模型执行流程。它看起来与GET资源非常相似，但是这里API端点被指定为URL，因为我们正在尝试从中检索结果。执行模型如下所示：
- en: '![](img/0c4d2b07-3fa4-4230-ad87-fda3eb91fb73.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0c4d2b07-3fa4-4230-ad87-fda3eb91fb73.png)'
- en: 'In the API Gateway, there is something called Stages, which can be used as
    versioning models for an API. Some common names for Stages in practice are **test**, **development**,
    and **production**. The Stages menu looks like this:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在API网关中，有一种称为Stages的东西，可以用作API的版本模型。实际上，Stages的一些常见名称是**测试**，**开发**和**生产**。Stages菜单如下所示：
- en: '![](img/862e05dd-969e-43ee-8d11-87e3174223fd.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/862e05dd-969e-43ee-8d11-87e3174223fd.png)'
- en: 'When you click on the Create option, it will open a creation wizard for the
    stage. This looks as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建”选项后，将打开一个阶段的创建向导。如下所示：
- en: '![](img/24dfbf47-6fa7-4e7a-bce3-c019246ad81c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/24dfbf47-6fa7-4e7a-bce3-c019246ad81c.png)'
- en: 'You can select any name for the Stage name value, and add the Stage description value
    according to the name you have assigned and the purpose you have in mind for this
    stage. Before that, you need to deploy the API that you have created. This can
    be selected in the Actions drop-down menu as the Deploy API button, as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以为阶段名称值选择任何名称，并根据您分配的名称和此阶段的目的添加阶段描述值。在此之前，您需要部署已创建的API。这可以在“操作”下拉菜单中选择“部署API”按钮来完成：
- en: '![](img/1f42a071-fc01-4eff-b37c-5f3c41c299d3.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f42a071-fc01-4eff-b37c-5f3c41c299d3.png)'
- en: 'In the next menu, you can choose the Stage name and other details, before finally
    clicking on the Deploy button, which will deploy your API with that particular
    stage. This can be seen as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个菜单中，您可以选择阶段名称和其他详细信息，然后最终单击“部署”按钮，这将使用特定阶段部署您的API。如下所示：
- en: '![](img/f694b7f3-ae32-4f2e-9f5b-5bf35a054543.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f694b7f3-ae32-4f2e-9f5b-5bf35a054543.png)'
- en: 'The deployed stage would look as follows:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 部署的阶段如下所示：
- en: '![](img/13c5a18c-5468-4bce-9a6b-5b38c41659ca.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/13c5a18c-5468-4bce-9a6b-5b38c41659ca.png)'
- en: Setting up integration
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置集成
- en: As we now understand how the AWS API Gateway service works at a basic level,
    we will move on to use that knowledge for building an end-to-end project which
    involves deploying a completely serverless API.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经了解了AWS API Gateway服务的基本工作原理，我们将继续使用这些知识来构建一个涉及部署完全无服务器API的端到端项目。
- en: 'In this section, we will be building and deploying a completely serverless
    API function from scratch, along with learning the internals and other implementation
    details of the AWS Lambda—AWS API Gateway integrations. We will be building the
    serverless API step-by-step. So, follow along with the steps in this order. The
    procedure is as follows:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将从头开始构建和部署一个完全无服务器的API函数，并学习AWS Lambda与AWS API Gateway集成的内部和其他实现细节。我们将逐步构建无服务器API。因此，请按照以下顺序进行操作。该过程如下：
- en: 'Firstly, we will start by creating a new API. This can be done via the Lambda
    console which looks like this:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将开始创建一个新的API。这可以通过Lambda控制台完成，如下所示：
- en: '![](img/70ae1912-ad8b-499f-a057-7643a4028bb5.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/70ae1912-ad8b-499f-a057-7643a4028bb5.png)'
- en: 'Once you have clicked on the +Create API button, you will be redirected to
    the API creation wizard, where you will be asked to enter the name and description
    of the API you are intending to build. For now, I have entered the name as `TestLambdaAPI`.
    However, you are free to add whatever name and description you would like to enter.
    The API creation console looks like this:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“+创建API”按钮后，您将被重定向到API创建向导页面，在那里您将被要求输入您打算构建的API的名称和描述。目前，我已将名称输入为“TestLambdaAPI”。但是，您可以自由添加任何名称和描述。API创建控制台如下所示：
- en: '![](img/547a9a71-871c-4385-b1e4-af300a8f7980.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/547a9a71-871c-4385-b1e4-af300a8f7980.png)'
- en: 'Once you click on the Create API button, you will be redirected to the page
    of the API you have created. The API page would look similar to this:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建API”按钮后，您将被重定向到您创建的API页面。API页面看起来类似于这样：
- en: '![](img/9062284a-2428-4469-b50b-b3d75a24e582.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9062284a-2428-4469-b50b-b3d75a24e582.png)'
- en: 'Now that we have successfully created an API, we will now go ahead and create
    resources in the API. You can do that by clicking on the Create Resource option
    in the Actions drop-down menu:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了一个API，我们现在将继续在API中创建资源。您可以通过单击“操作”下拉菜单中的“创建资源”选项来执行此操作：
- en: '![](img/91bb7f8c-6aa0-42cd-9657-d7d3d26a801d.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/91bb7f8c-6aa0-42cd-9657-d7d3d26a801d.png)'
- en: 'This would open up a resource creation wizard where you can add the name and
    resource path of the API resource which we are intending to build. After creating
    the resource, click on the Create Resource button for your settings for the API
    resource to be created accordingly. For the sake of this tutorial, I have named
    it `LambdaAPI`. However, you can give it any name you want. The API creation wizard
    looks like this:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将打开一个资源创建向导，在这里您可以添加我们打算构建的API资源的名称和资源路径。创建资源后，单击“创建资源”按钮，以便相应地创建API资源的设置。出于本教程的目的，我将其命名为“LambdaAPI”。但是，您可以随意命名。API创建向导如下所示：
- en: '![](img/c1399e16-8ea2-4093-9731-40da3feafbd5.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1399e16-8ea2-4093-9731-40da3feafbd5.png)'
- en: 'The resource that you have just created is now live in the API console; you
    can see it under the Resources section:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您刚刚创建的资源现在在API控制台中处于活动状态；您可以在“资源”部分下看到它：
- en: '![](img/8d176ac4-5444-4d97-908b-377d008e9bf9.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d176ac4-5444-4d97-908b-377d008e9bf9.png)'
- en: 'You can create versions of a resource or even just a resource under a resource.
    Let''s go ahead and create one. For this, you need to click on the resource that
    you have already created. Then, click on the Create Resource option in the drop-down
    menu in the Actions menu:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以创建资源的版本，甚至只是资源下的资源。让我们继续创建一个。为此，您需要单击已创建的资源，然后单击“操作”菜单中的下拉菜单中的“创建资源”选项：
- en: '![](img/7133db2c-ff1c-4d50-9f16-4ec673ec2f21.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7133db2c-ff1c-4d50-9f16-4ec673ec2f21.png)'
- en: 'This would open up a similar resource creation wizard under the resource which
    we have already created. You can name that resource as `version1` or just as `v1`
    which is a regular software practice. I have named it `v1`. However, you can name
    it whatever you want to:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在我们已经创建的资源下打开一个类似的资源创建向导。您可以将该资源命名为“version1”或只是“v1”，这是一种常规的软件实践。我将其命名为“v1”。但是，您可以根据需要命名它：
- en: '![](img/ee774cc7-8eaa-4cfe-9b61-51654b86ffd6.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ee774cc7-8eaa-4cfe-9b61-51654b86ffd6.png)'
- en: 'Now, we have a resource named `v1` under the already existing resource, `/lambdaapi`.
    We can see this under our Resources section. So, now the resources hierarchy of
    our API looks like this:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在已有资源“/lambdaapi”下有一个名为“v1”的资源。我们可以在“资源”部分中看到这一点。因此，现在我们的API的资源层次结构如下：
- en: '![](img/3f05ee06-fdd4-4f28-9089-254cd78b0b5e.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f05ee06-fdd4-4f28-9089-254cd78b0b5e.png)'
- en: 'We will be creating a serverless API for getting and querying the list of pets
    in a pet store. So, the following steps will be aligned accordingly. The API should
    return the name of the pets. So, we will have a new resource for pets for that
    purpose. We will be creating a resource for this under the `/v1` resource:'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将为宠物商店创建一个无服务器API，用于获取和查询宠物列表。因此，以下步骤将相应地对齐。API应返回宠物的名称。因此，我们将为此创建一个新的宠物资源。我们将在`/v1`资源下创建一个资源：
- en: '![](img/942939eb-4f65-48bf-b506-3b0fb5a7bbb1.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/942939eb-4f65-48bf-b506-3b0fb5a7bbb1.png)'
- en: 'The resulting hierarchical structure for our API looks like this, after adding
    the `/pets` resource under the `/v1` resource:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将`/pets`资源添加到`/v1`资源下后，我们的API的层次结构如下：
- en: '![](img/c04c2044-ddb5-42ca-b54c-2ddd1236f97f.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c04c2044-ddb5-42ca-b54c-2ddd1236f97f.png)'
- en: 'Now, we will add a custom resource which enables us to query the API. By custom,
    we mean that any string can be added to the resource when sending a request to
    this API, and the API would send back a request after checking and querying for
    that string via a Lambda code. The custom resources can be differentiated from
    the normal ones, as they can be created with curly braces. The following screenshot
    will help you understand how to create them:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加一个自定义资源，使我们能够查询API。通过自定义，我们的意思是在向此API发送请求时，可以添加任何字符串到资源中，并且API会通过Lambda代码检查和查询该字符串后发送回一个请求。自定义资源可以与普通资源区分开，因为它们可以用大括号创建。以下截图将帮助您了解如何创建它们：
- en: '![](img/5664f793-4837-4cd6-856f-e83a0541f088.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5664f793-4837-4cd6-856f-e83a0541f088.png)'
- en: 'After clicking on the Create Resource button, the new custom child resource
    for `/pets` will be created. The hierarchy of the resources is now as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“创建资源”按钮后，将创建`/pets`的新自定义子资源。现在资源的层次结构如下：
- en: '![](img/48c41ba6-1303-4315-a62f-d2861059cf79.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/48c41ba6-1303-4315-a62f-d2861059cf79.png)'
- en: 'The overall structure of the API looks like this, as specified in the top-right
    part of the following screenshot:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: API的整体结构如下，如下截图右上角所示：
- en: '![](img/783da33a-f27a-4981-965d-5d5fcf215529.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/783da33a-f27a-4981-965d-5d5fcf215529.png)'
- en: 'Now, we will add methods to this custom resource. As we will only be querying
    the list of pets, we will only add the GET method. This can be done by clicking
    on the {type} resource and clicking on Create Method in the drop-down Actions menu
    in the top panel:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将为此自定义资源添加方法。因为我们只会查询宠物列表，所以我们只会添加GET方法。这可以通过单击{type}资源并在顶部面板的下拉“操作”菜单中单击“创建方法”来完成：
- en: '![](img/fc5dcff4-b616-48f4-a946-c1d94f887678.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/fc5dcff4-b616-48f4-a946-c1d94f887678.png)'
- en: 'This would create a small drop-down style menu under the {type} resource where
    you can select a method from the available methods:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将在{type}资源下创建一个小的下拉样式菜单，您可以从可用方法中选择一个方法：
- en: '![](img/f86516df-6431-4f81-8d74-837a5b629442.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f86516df-6431-4f81-8d74-837a5b629442.png)'
- en: 'We need to select the GET option from the available options. This would look
    as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要从可用选项中选择“GET”选项。这将如下所示：
- en: '![](img/7415aff4-6d63-4832-8736-fb8a7877e7e9.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7415aff4-6d63-4832-8736-fb8a7877e7e9.png)'
- en: 'After selecting the GET option and clicking on the small tick button beside
    it, we will have created the GET method under our {type} resource. The hierarchy
    now looks like this:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择“GET”选项并单击旁边的小勾按钮后，我们将在我们的{type}资源下创建GET方法。现在的层次结构如下：
- en: '![](img/ef4c6cd9-0912-4457-8dec-95c6acf52921.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef4c6cd9-0912-4457-8dec-95c6acf52921.png)'
- en: Deploying the Lambda function for API execution
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署Lambda函数以执行API
- en: 'In this section, we will have a look at the steps to deploy the Lambda function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将看一下部署Lambda函数的步骤：
- en: 'The details of the GET method can also be seen on the right-hand side of the
    API console, when you click on that method. The details look as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您单击该方法时，还可以在API控制台的右侧看到GET方法的详细信息。详细信息如下：
- en: '![](img/6c67dfce-45f9-4648-8922-7b02b8eb568e.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6c67dfce-45f9-4648-8922-7b02b8eb568e.png)'
- en: 'In the GET method console, click on the Lambda Function option. Select any
    one region depending on your preference. I have chosen us-east-1 as the region
    as shown in the following screenshot:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在GET方法控制台中，单击“Lambda函数”选项。根据您的偏好选择任何一个地区。我选择了us-east-1作为地区，如下截图所示：
- en: '![](img/4ab15692-b5bf-4825-9b11-e15eef1bdd6f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4ab15692-b5bf-4825-9b11-e15eef1bdd6f.png)'
- en: 'As expected, it says we do not have a Lambda function in that region. So, we
    need to go ahead and create one. Click on the Create a Lambda Function link. This
    will take you to the Lambda creation console which we are already comfortable
    with:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 正如预期的那样，它说我们在该地区没有Lambda函数。因此，我们需要继续创建一个。单击“创建Lambda函数”链接。这将带您到Lambda创建控制台，我们已经熟悉：
- en: '![](img/27281b9e-3209-4530-8784-256f386b2f18.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/27281b9e-3209-4530-8784-256f386b2f18.png)'
- en: 'From here, choose the keyword : hello-world-python blueprint from the list
    of blueprints:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从这里，从蓝图列表中选择关键字：hello-world-python蓝图：
- en: '![](img/cc88530b-ba15-4927-8a60-a196fc2219da.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cc88530b-ba15-4927-8a60-a196fc2219da.png)'
- en: 'In the next console, choose the basic information for the Lambda function as
    we have done in the previous chapters:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个控制台中，选择Lambda函数的基本信息，就像我们在之前的章节中所做的那样：
- en: '![](img/2983dee9-a909-4091-b017-3316de0044ef.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2983dee9-a909-4091-b017-3316de0044ef.png)'
- en: 'After adding the relevant details, click on the orange Create function button.
    That will take you to the page of the Lambda function you have just created. The
    code can be edited from there onwards:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加相关细节后，单击橙色的“创建函数”按钮。这将带您到刚刚创建的Lambda函数的页面。代码可以从那里开始编辑：
- en: '![](img/96a0e196-367d-4920-8553-2a3e28bf186a.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/96a0e196-367d-4920-8553-2a3e28bf186a.png)'
- en: 'In the function''s code, use this code instead of the one which is provided
    along with the blueprint:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在函数的代码中，使用这段代码，而不是与蓝图一起提供的代码：
- en: '![](img/e675ac9d-79e7-4a7a-bb1f-b6decc56f2ce.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e675ac9d-79e7-4a7a-bb1f-b6decc56f2ce.png)'
- en: 'We are now done with tweaking the function code. Now, you can go ahead and
    save the function:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在已经调整了函数代码。现在，您可以继续保存函数：
- en: '![](img/aacde03a-2d88-4c33-8949-74da00fed010.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/aacde03a-2d88-4c33-8949-74da00fed010.png)'
- en: 'Now, head back to the API Gateway console to the GET method page. Here, under
    the Lambda functions in the us-east-1 region, I start getting the Lambda function
    which I have just created (serverless-api) as an option:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回API网关控制台，转到GET方法页面。在此，在“us-east-1”区域的Lambda函数下，我开始获得刚刚创建的Lambda函数（无服务器API）作为选项：
- en: '![](img/6e6d06af-02dc-4b95-ac11-a7e242aca617.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6e6d06af-02dc-4b95-ac11-a7e242aca617.png)'
- en: 'On clicking Save, you will see a popup asking you to confirm that you are giving
    API Gateway permission to invoke your Lambda function, you can acknowledge it
    by clicking on OK:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“保存”后，您将看到一个弹出窗口，询问您是否确认授予API网关调用Lambda函数的权限，您可以单击“确定”来确认：
- en: '![](img/852f0f08-5d10-41e9-b073-94f4f2e49223.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/852f0f08-5d10-41e9-b073-94f4f2e49223.png)'
- en: 'After clicking on OK, you will be redirected to the data flow page of the GET method,
    that looks like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“确定”后，您将被重定向到GET方法的数据流页面，看起来像这样：
- en: '![](img/c1f73f62-da07-4029-a727-ee926996d125.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c1f73f62-da07-4029-a727-ee926996d125.png)'
- en: Handling authentication and user controls
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理身份验证和用户控件
- en: 'After deploying, next we will discuss how to handle the authentication and
    user controls. The steps are as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 部署后，接下来我们将讨论如何处理身份验证和用户控件。步骤如下：
- en: 'Now that we have successfully created the skeleton of our serverless API, we
    will now work on the nitty-gritty details which are needed to make it a fully
    functional API. We will start with applying the mapping templates. This can be
    done in the Integration Request menu. Clicking on the Integration Request link
    will take you to a console which looks like this:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们已经成功创建了无服务器API的框架，我们现在将致力于使其成为一个完全功能的API所需的细节。我们将从应用映射模板开始。这可以在“集成请求”菜单中完成。单击“集成请求”链接将带您到一个看起来像这样的控制台：
- en: '![](img/5251a40d-48d2-48c1-a7af-f649a985fce3.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5251a40d-48d2-48c1-a7af-f649a985fce3.png)'
- en: 'If you scroll down a bit in the same console, you will notice the Body Mapping
    Templates section at the end:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您在同一控制台中向下滚动一点，您会注意到“Body Mapping Templates”部分在最后：
- en: '![](img/8f301f36-d13b-43be-8435-b925bd566be2.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8f301f36-d13b-43be-8435-b925bd566be2.png)'
- en: 'Clicking on the Body Mapping Templates will unfurl the options available in
    that particular section:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“Body Mapping Templates”将展开该特定部分中的可用选项：
- en: '![](img/f52aa43b-becc-406a-84e5-51ad7dab2f78.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f52aa43b-becc-406a-84e5-51ad7dab2f78.png)'
- en: 'Select the second option which says When there are no templates defined (recommended).
    And then, click on the Add mapping template option and add `application/json`, and
    click on the small grey tick symbol beside it:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择第二个选项，即“当未定义模板时（推荐）”。然后，单击“添加映射模板”选项，添加`application/json`，然后单击其旁边的小灰色勾号：
- en: '![](img/ef5353b2-1f3a-4e5e-acc0-e515394882af.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef5353b2-1f3a-4e5e-acc0-e515394882af.png)'
- en: 'After clicking the small grey tick symbol beside it, the Body Mapping Templates
    section space will look like this:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击其旁边的小灰色勾号后，“Body Mapping Templates”部分的空间将如下所示：
- en: '![](img/094fc096-36f9-4054-b7bd-b13d313773a6.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/094fc096-36f9-4054-b7bd-b13d313773a6.png)'
- en: 'Now, in the template textbox, add the following code and click the Save button
    underneath the text box:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在模板文本框中，添加以下代码并单击文本框下方的“保存”按钮：
- en: '![](img/480207dc-5a03-4384-af3e-3b5c9bc224ba.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/480207dc-5a03-4384-af3e-3b5c9bc224ba.png)'
- en: 'So, after all these steps, the resulting Body Mapping Templates section will
    look like this:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，在所有这些步骤之后，生成的“Body Mapping Templates”部分将如下所示：
- en: '![](img/e9e666be-3cb8-4849-9ef0-18d743d2949b.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e9e666be-3cb8-4849-9ef0-18d743d2949b.png)'
- en: 'Now, going back to the Method Execution page, we can see the TEST option on
    the left with a lightning bolt symbol beneath it:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，返回到方法执行页面，我们可以看到左侧的“测试”选项，下面是一个闪电符号：
- en: '![](img/ff995a15-e50f-49e0-b231-2780b4d09551.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ff995a15-e50f-49e0-b231-2780b4d09551.png)'
- en: 'Clicking on the TEST button on the left-side in the Client section and above
    the thunderbolt option will take you to a page where you can test the API that
    you''ve just created:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“客户端”部分左侧的“测试”按钮上方和“雷电”选项上单击，将带您到一个页面，您可以在该页面上测试您刚刚创建的API：
- en: '![](img/88b995a6-60cf-4c81-9957-29eda8e0c2b2.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/88b995a6-60cf-4c81-9957-29eda8e0c2b2.png)'
- en: 'Now, let''s type `Exotic` in the textbox below {type} and click on the Test button
    at the bottom. If everything goes right, we should see the list of all the exotic
    pets we have entered in the function code of our Lambda function:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在{type}下方的文本框中键入“异国情调”，然后单击底部的“测试”按钮。如果一切顺利，我们应该看到我们在Lambda函数的函数代码中输入的所有异国情调宠物的列表：
- en: '![](img/849e6fda-c63d-42d8-90be-e4a32cb2fd18.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/849e6fda-c63d-42d8-90be-e4a32cb2fd18.png)'
- en: And rightly so, we did get the list of all of the exotic pets in the catalog.
    So, this brings this chapter to an end, where you have learned how to build a
    fully fledged serverless API from scratch, including how to deploy it.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确实如此，我们确实得到了目录中所有异国情调的宠物的列表。因此，本章到此结束，您已经学会了如何从头开始构建一个完全成熟的无服务器API，包括如何部署它。
- en: 'In addition, if you want to add additional security settings, such as Authorizations
    and API Key Required, you can do it in the Method Request menu:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，如果您想添加额外的安全设置，如授权和API密钥要求，您可以在“方法请求”菜单中进行设置：
- en: '![](img/1387a18f-b76d-4345-a542-94ee7923f244.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1387a18f-b76d-4345-a542-94ee7923f244.png)'
- en: Summary
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how to build a completely serverless API from
    scratch. We have also learned how to add more resources and methods for the API,
    as well as how to deploy it successfully to multiple stages of development and
    how to add additional security settings such as authorization and API keys for
    authentication purposes.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何从头开始构建一个完全无服务器的API。我们还学习了如何为API添加更多资源和方法，以及如何成功将其部署到多个开发阶段，并如何添加额外的安全设置，如授权和API密钥，以进行身份验证。
- en: We then learned how to associate a Lambda function with our API Gateway's API
    service for handling the computational tasks of our API.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们学会了如何将Lambda函数与API网关的API服务关联起来，以处理API的计算任务。
- en: In the next chapter, we will be learning about logging and monitoring serverless
    applications. In that chapter, we will learn about the logging and monitoring
    services of AWS such as CloudWatch Metrics, CloudWatch Logs, and CloudWatch Dashboards
    in detail, and try to set them up for our serverless applications. We will also
    learn how to create a logging and monitoring pipeline from AWS Lambda to these
    monitoring tools using some AWS services.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习有关无服务器应用程序的日志记录和监控。在该章节中，我们将详细了解AWS的日志记录和监控服务，如CloudWatch指标、CloudWatch日志和CloudWatch仪表板，并尝试为我们的无服务器应用程序设置它们。我们还将学习如何使用一些AWS服务从AWS
    Lambda创建日志记录和监控管道到这些监控工具。
