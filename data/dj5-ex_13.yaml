- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Creating a Content Management System
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个内容管理系统
- en: In the previous chapter, you created the application models for the e-learning
    platform and learned how to create and apply data fixtures for models. You created
    a custom model field to order objects and implemented user authentication.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你为在线学习平台创建了应用程序模型，并学习了如何为模型创建和应用数据固定值。你创建了一个自定义模型字段来排序对象，并实现了用户认证。
- en: In this chapter, you will learn how to build the functionality for instructors
    to create courses and manage the contents of those courses in a versatile and
    efficient manner.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何以灵活和高效的方式为讲师构建创建课程和管理课程内容的功能。
- en: You will be introduced to class-based views, which offer a new perspective to
    build your application compared to the function-based views you have built in
    previous examples. You will also explore code reusability and modularity through
    the use of mixins, which are techniques that you can apply in future projects.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将介绍基于类的视图，与你在前例中构建的基于函数的视图相比，它为你构建应用程序提供了新的视角。你还将通过使用混合类来探索代码的可重用性和模块化，这些是你可以应用于未来项目的技术。
- en: 'In this chapter, you will learn how to:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何：
- en: Create a **content management system** (**CMS**) using class-based views and
    mixins
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基于类的视图和混合类创建一个 **内容管理系统**（**CMS**）
- en: Build formsets and model formsets to edit course modules and module contents
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建表单集和模型表单集以编辑课程模块和模块内容
- en: Manage groups and permissions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理组和权限
- en: Implement a drag-and-drop functionality to reorder modules and content
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现一个拖放功能以重新排序模块和内容
- en: Functional overview
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 13.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '*图13.1* 展示了本章将构建的视图、模板和功能：'
- en: '![](img/B21088_13_01.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_13_01.png)'
- en: 'Figure 13.1: Diagram of functionalities built in Chapter 13'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.1：第13章构建的功能图
- en: In this chapter, you will implement different class-based views. You will create
    the mixin classes `OwnerMixin`, `OwnerEditMixin`, and `OwnerCourseMixin`, which
    will contain common functionality that you will reuse in other classes. You will
    create **CRUD** (**Create**, **Read**, **Update**, **Delete**) views for the `Course`
    model by implementing `ManageCourseListView` to list courses, `CourseCreateView`
    to create courses, `CourseUpdateView` to update courses, and `CourseDeleteView`
    to delete courses. You will build the `CourseModuleUpdateView` view to add/edit/delete
    course modules and `ModuleContentListView` to list the module’s contents. You
    will also implement `ContentCreateUpdateView` to create and update course contents
    and `ContentDeleteView` to delete contents. You will finally implement a drag-and-drop
    functionality to reorder course modules and contents using the `ModuleOrderView`
    and `ContentOrderView` views, respectively.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将实现不同的基于类的视图。你将创建混合类 `OwnerMixin`、`OwnerEditMixin` 和 `OwnerCourseMixin`，这些类将包含你将在其他类中重用的常见功能。你将通过实现
    `ManageCourseListView` 来列出课程、`CourseCreateView` 来创建课程、`CourseUpdateView` 来更新课程和
    `CourseDeleteView` 来删除课程，为 `Course` 模型创建 **CRUD**（**创建**、**读取**、**更新**、**删除**）视图。你将构建
    `CourseModuleUpdateView` 视图来添加/编辑/删除课程模块，以及 `ModuleContentListView` 来列出模块的内容。你还将实现
    `ContentCreateUpdateView` 来创建和更新课程内容，以及 `ContentDeleteView` 来删除内容。你最终将通过使用 `ModuleOrderView`
    和 `ContentOrderView` 视图来实现拖放功能，分别重新排序课程模块和内容。
- en: Note that all views that inherit the mixin `OwnerCourseMixin` redirect the user
    back to the `ManageCourseListView` view after a successful action. These redirects
    have not been added to the diagram for simplicity.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，所有继承自混合类 `OwnerCourseMixin` 的视图在成功执行操作后都会将用户重定向回 `ManageCourseListView` 视图。为了简化，这些重定向并未添加到图中。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在 [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13)
    找到。
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes along with this chapter. You can follow the
    instructions to install each Python module below or you can install all the requirements
    at once with the command `python -m pip install -r requirements.txt`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有 Python 模块都包含在本章源代码中的 `requirements.txt` 文件中。你可以按照以下说明安装每个 Python 模块，或者你可以使用命令
    `python -m pip install -r requirements.txt` 一次性安装所有依赖。
- en: Creating a CMS
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个 CMS
- en: 'Now that you have created a versatile data model, you are going to build the
    CMS. The CMS will allow instructors to create courses and manage their content.
    You need to provide the following functionality:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经创建了一个通用的数据模型，你将构建CMS。CMS将允许讲师创建课程并管理其内容。你需要提供以下功能：
- en: List the courses created by the instructor
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出讲师创建的课程
- en: Create, edit, and delete courses
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建、编辑和删除课程
- en: Add modules to a course and reorder them
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向课程添加模块并重新排序它们
- en: Add different types of content to each module
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向每个模块添加不同类型的内容
- en: Reorder course modules and content
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重新排序课程模块和内容
- en: Let’s start with the basic CRUD views.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从基本的CRUD视图开始。
- en: Creating class-based views
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基于类的视图
- en: 'You are going to build views to create, edit, and delete courses. You will
    use class-based views for this. Edit the `views.py` file of the `courses` application
    and add the following code:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 你将构建视图来创建、编辑和删除课程。你将使用基于类的视图来完成这项工作。编辑`courses`应用的`views.py`文件，并添加以下代码：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This is the `ManageCourseListView` view. It inherits from Django’s generic `ListView`.
    You override the `get_queryset()` method of the view to retrieve only courses
    created by the current user. To prevent users from editing, updating, or deleting
    courses they didn’t create, you will also need to override the `get_queryset()`
    method in the create, update, and delete views. When you need to provide a specific
    behavior for several class-based views, it is recommended that you use *mixins*.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ManageCourseListView`视图。它继承自Django的通用`ListView`。你将覆盖视图的`get_queryset()`方法，以检索由当前用户创建的课程。为了防止用户编辑、更新或删除他们未创建的课程，你还需要在创建、更新和删除视图中覆盖`get_queryset()`方法。当你需要为多个基于类的视图提供特定行为时，建议使用*mixins*。
- en: Using mixins for class-based views
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用*mixins*为基于类的视图
- en: Mixins are a special kind of multiple inheritance for a class. If you are new
    to mixins in Python, all you need to understand is that they are a type of class
    designed to supply methods to other classes but aren’t intended to be used independently.
    This allows you to develop shared functionalities that can be incorporated into
    various classes in a modular manner, simply by having those classes inherit from
    mixins. The concept is similar to a base class but you can use multiple mixins
    to extend the functionality of a given class.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Mixins是一种特殊的类多重继承。如果你对Python中的mixins还不熟悉，你需要了解的是，它们是一种旨在为其他类提供方法但不是为了独立使用的类。这允许你通过让这些类从mixins继承来以模块化的方式开发共享功能。这个概念类似于基类，但你可以使用多个mixins来扩展给定类的功能。
- en: 'There are two main situations for using mixins:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用mixins主要有两种情况：
- en: You want to provide multiple optional features for a class
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想为类提供多个可选功能
- en: You want to use a particular feature in several classes
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想在几个类中使用特定的功能
- en: Django comes with several mixins that provide additional functionality to your
    class-based views. You can learn more about mixins at [https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/](https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Django附带了一些mixins，它们为你的基于类的视图提供了额外的功能。你可以在[https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/](https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/)了解更多关于mixins的信息。
- en: 'You are going to implement a common behavior for multiple views in mixin classes
    and use it for the course views. Edit the `views.py` file of the `courses` application
    and modify it as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在混合类中实现多个视图的通用行为，并将其用于课程视图。编辑`courses`应用的`views.py`文件，并按以下方式修改它：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this code, you create the `OwnerMixin` and `OwnerEditMixin` mixins. You will
    use these mixins together with the `ListView`, `CreateView`, `UpdateView`, and
    `DeleteView` views provided by Django. `OwnerMixin` implements the `get_queryset()`
    method, which is used by the views to get the base QuerySet. Your mixin will override
    this method to filter objects by the `owner` attribute to retrieve objects that
    belong to the current user (`request.user`).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，你创建了`OwnerMixin`和`OwnerEditMixin`混合类。你将使用这些混合类与Django提供的`ListView`、`CreateView`、`UpdateView`和`DeleteView`视图一起使用。`OwnerMixin`实现了`get_queryset()`方法，该方法由视图用于获取基础QuerySet。你的混合类将覆盖此方法，通过`owner`属性过滤对象以检索属于当前用户（`request.user`）的对象。
- en: '`OwnerEditMixin` implements the `form_valid()` method, which is used by views
    that use Django’s `ModelFormMixin` mixin – that is, views with forms or model
    forms such as `CreateView` – and `UpdateView`. `form_valid()` is executed when
    the submitted form is valid.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`OwnerEditMixin`实现了`form_valid()`方法，该方法由使用Django的`ModelFormMixin`混合类（即具有表单或模型表单的视图，如`CreateView`和`UpdateView`）使用的视图调用。当提交的表单有效时执行`form_valid()`。'
- en: The default behavior for this method is saving the instance (for model forms)
    and redirecting the user to `success_url`. You override this method to automatically
    set the current user in the `owner` attribute of the object being saved. By doing
    so, you set the owner for an object automatically when it is saved.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的默认行为是保存实例（对于模型表单）并将用户重定向到`success_url`。您重写此方法来自动设置正在保存的对象的`owner`属性中的当前用户。通过这样做，您在对象保存时自动设置对象的拥有者。
- en: Your `OwnerMixin` class can be used for views that interact with any model that
    contains an `owner` attribute.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 您的`OwnerMixin`类可用于与任何包含`owner`属性的模型交互的视图。
- en: 'You also define an `OwnerCourseMixin` class that inherits `OwnerMixin` and
    provides the following attributes for child views:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您还定义了一个继承自`OwnerMixin`的`OwnerCourseMixin`类，为子视图提供了以下属性：
- en: '`model`: The model used for QuerySets; it is used by all views.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：用于查询集的模型；它被所有视图使用。'
- en: '`fields`: The fields of the model to build the model form of the `CreateView`
    and `UpdateView` views.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`：用于构建`CreateView`和`UpdateView`视图模型表单的模型字段。'
- en: '`success_url`: Used by `CreateView`, `UpdateView`, and `DeleteView` to redirect
    the user after the form is successfully submitted or the object is deleted. You
    use a URL with the name `manage_course_list`, which you are going to create later.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success_url`：由`CreateView`、`UpdateView`和`DeleteView`使用，在表单成功提交或对象被删除后将用户重定向到。您使用一个名为`manage_course_list`的URL，您将在稍后创建。'
- en: 'You define an `OwnerCourseEditMixin` mixin with the following attribute:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下属性定义一个`OwnerCourseEditMixin`混合类：
- en: '`template_name`: The template you will use for the `CreateView` and `UpdateView`
    views.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：您将用于`CreateView`和`UpdateView`视图的模板。'
- en: 'Finally, you create the following views that subclass `OwnerCourseMixin`:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您创建了以下继承自`OwnerCourseMixin`的视图：
- en: '`ManageCourseListView`: Lists the courses created by the user. It inherits
    from `OwnerCourseMixin` and `ListView`. It defines a specific `template_name`
    attribute for a template to list courses.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ManageCourseListView`：列出用户创建的课程。它继承自`OwnerCourseMixin`和`ListView`，并为列出课程定义了特定的`template_name`属性。'
- en: '`CourseCreateView`: Uses a model form to create a new `Course` object. It uses
    the fields defined in `OwnerCourseMixin` to build a model form and also subclasses
    `CreateView`. It uses the template defined in `OwnerCourseEditMixin`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CourseCreateView`：使用模型表单创建新的`Course`对象。它使用在`OwnerCourseMixin`中定义的字段来构建模型表单，并且继承自`CreateView`。它使用`OwnerCourseEditMixin`中定义的模板。'
- en: '`CourseUpdateView`: Allows the editing of an existing `Course` object. It uses
    the fields defined in `OwnerCourseMixin` to build a model form and also subclasses
    `UpdateView`. It uses the template defined in `OwnerCourseEditMixin`.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CourseUpdateView`：允许编辑现有的`Course`对象。它使用在`OwnerCourseMixin`中定义的字段来构建模型表单，并且继承自`UpdateView`。它使用`OwnerCourseEditMixin`中定义的模板。'
- en: '`CourseDeleteView`: Inherits from `OwnerCourseMixin` and the generic `DeleteView`.
    It defines a specific `template_name` attribute for a template to confirm the
    course deletion.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CourseDeleteView`：继承自`OwnerCourseMixin`和通用`DeleteView`，并为确认课程删除定义了特定的`template_name`属性。'
- en: You have created the basic views to manage courses. While you have implemented
    CRUD views on your own, the third-party application Neapolitan allows you to implement
    the standard list, detail, create, and delete views within a single view. You
    can learn more about Neapolitan at [https://github.com/carltongibson/neapolitan](https://github.com/carltongibson/neapolitan).
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您已创建了管理课程的基本视图。虽然您已经实现了自己的CRUD视图，但第三方应用程序Neapolitan允许您在单个视图中实现标准列表、详情、创建和删除视图。您可以在[https://github.com/carltongibson/neapolitan](https://github.com/carltongibson/neapolitan)了解更多关于Neapolitan的信息。
- en: Next, you are going to use Django authentication groups and permissions to limit
    access to these views.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将使用Django认证组和权限来限制对这些视图的访问。
- en: Working with groups and permissions
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与组和权限一起工作
- en: Currently, any user can access the views to manage courses. You want to restrict
    these views so that only instructors have permission to create and manage courses.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，任何用户都可以访问管理课程的视图。您希望限制这些视图，以便只有讲师才有权创建和管理课程。
- en: 'Django’s authentication framework includes a permission system. By default,
    Django generates four permissions for each model in the installed applications:
    `add`, `view`, `change`, and `delete`. These permissions correspond to the actions
    of creating new instances, viewing existing ones, editing, and deleting instances
    of a model.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Django的认证框架包括一个权限系统。默认情况下，Django为安装的应用程序中的每个模型生成四个权限：`add`、`view`、`change`和`delete`。这些权限对应于创建新实例、查看现有实例、编辑和删除模型实例的操作。
- en: Permissions can be assigned directly to individual users or groups of users.
    This approach simplifies user management by grouping permissions and enhances
    the security of your application.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 权限可以直接分配给单个用户或用户组。这种方法通过分组权限简化了用户管理，并增强了您应用程序的安全性。
- en: You are going to create a group for instructor users and assign permissions
    to create, update, and delete courses.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你将创建一个用于讲师用户的组，并分配创建、更新和删除课程的权限。
- en: 'Run the development server using the following command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行开发服务器：
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Open `http://127.0.0.1:8000/admin/auth/group/add/` in your browser to create
    a new `Group` object. Add the name `Instructors` and choose all permissions of
    the `courses` application, except those of the `Subject` model, as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://127.0.0.1:8000/admin/auth/group/add/`以创建一个新的`Group`对象。添加名称`Instructors`并选择`courses`应用的所有权限，除了`Subject`模型的权限，如下所示：
- en: '![](img/B21088_13_02.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_13_02.png)'
- en: 'Figure 13.2: The Instructors group permissions'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2：讲师组权限
- en: 'As you can see, there are four different permissions for each model: *can view*,
    *can add*, *can change*, and *can delete*. After choosing permissions for this
    group, click the **SAVE** button.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，每个模型都有四种不同的权限：*可以查看*、*可以添加*、*可以更改*和*可以删除*。在选择此组的权限后，点击**保存**按钮。
- en: Django creates permissions for models automatically but you can also create
    custom permissions. You will learn how to create custom permissions in *Chapter
    15,* *Building an API*. You can read more about adding custom permissions at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Django会自动为模型创建权限，但您也可以创建自定义权限。您将在第15章“构建API”中学习如何创建自定义权限。您可以在[https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions)了解更多关于添加自定义权限的信息。
- en: 'Open `http://127.0.0.1:8000/admin/auth/user/add/` and create a new user. Edit
    the user and add it to the **Instructors** group, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`http://127.0.0.1:8000/admin/auth/user/add/`并在浏览器中创建一个新用户。编辑用户并将其添加到**讲师**组，如下所示：
- en: '![](img/B21088_13_03.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_13_03.png)'
- en: 'Figure 13.3: User group selection'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3：用户组选择
- en: Users inherit the permissions of the groups they belong to, but you can also
    add individual permissions to a single user using the administration site. Users
    that have `is_superuser` set to `True` have all permissions automatically.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用户继承他们所属组的权限，但您也可以使用管理站点为单个用户添加单独的权限。将`is_superuser`设置为`True`的用户将自动拥有所有权限。
- en: Next, you will apply permissions in practice by incorporating them into our
    views.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将通过将它们整合到我们的视图中来实际应用权限。
- en: Restricting access to class-based views
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 限制基于类的视图的访问
- en: 'You are going to restrict access to the views so that only users with the appropriate
    permissions can add, change, or delete `Course` objects. You are going to use
    the following two mixins provided by `django.contrib.auth` to limit access to
    views:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您将限制对视图的访问，以便只有具有适当权限的用户才能添加、更改或删除`Course`对象。您将使用`django.contrib.auth`提供的以下两个mixins来限制对视图的访问：
- en: '`LoginRequiredMixin`: Replicates the `login_required` decorator’s functionality.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoginRequiredMixin`：复制`login_required`装饰器的功能。'
- en: '`PermissionRequiredMixin`: Grants access to the view to users with a specific
    permission. Remember that superusers automatically have all permissions.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PermissionRequiredMixin`：授予具有特定权限的用户访问视图的权限。请记住，超级用户自动拥有所有权限。'
- en: 'Edit the `views.py` file of the `courses` application and add the following
    import:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`views.py`文件，并添加以下导入：
- en: '[PRE3]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Make `OwnerCourseMixin` inherit `LoginRequiredMixin` and `PermissionRequiredMixin`,
    like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让`OwnerCourseMixin`继承`LoginRequiredMixin`和`PermissionRequiredMixin`，如下所示：
- en: '[PRE4]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, add a `permission_required` attribute to the course views, as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`permission_required`属性添加到课程视图中，如下所示：
- en: '[PRE5]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`PermissionRequiredMixin` checks that the user accessing the view has the permission
    specified in the `permission_required` attribute. Your views are now only accessible
    to users with the proper permissions.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`PermissionRequiredMixin`检查访问视图的用户是否具有`permission_required`属性中指定的权限。您的视图现在仅对具有适当权限的用户可访问。'
- en: 'Let’s create URLs for these views. Create a new file inside the `courses` application
    directory and name it `urls.py`. Add the following code to it:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这些视图创建URL。在`courses`应用程序目录内创建一个新文件，并将其命名为`urls.py`。向其中添加以下代码：
- en: '[PRE6]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: These are the URL patterns for the list, create, edit, and delete course views.
    The `pk` parameter refers to the primary key field. Remember that **pk is short
    for primary key**. Every Django model has a field that serves as its primary key.
    By default, the primary key is the automatically generated `id` field. The Django
    generic views for single objects retrieve an object by its `pk` field. Edit the
    main `urls.py` file of the `educa` project and include the URL patterns of the
    `courses` application, as follows.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是列表、创建、编辑和删除课程视图的URL模式。`pk`参数指的是主键字段。请记住，**pk是主键的缩写**。每个Django模型都有一个作为其主键的字段。默认情况下，主键是自动生成的`id`字段。Django的单个对象通用视图通过其`pk`字段检索对象。编辑`educa`项目的主体`urls.py`文件，并包含`courses`应用程序的URL模式，如下所示。
- en: 'New code is highlighted in bold:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码以粗体突出显示：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You need to create the templates for these views. Create the following directories
    and files inside the `templates/` directory of the `courses` application:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要为这些视图创建模板。在`courses`应用程序的`templates/`目录内创建以下目录和文件：
- en: '[PRE8]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Edit the `courses/manage/course/list.html` template and add the following code
    to it:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/manage/course/list.html`模板并向其中添加以下代码：
- en: '[PRE9]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This is the template for the `ManageCourseListView` view. In this template,
    you list the courses created by the current user. You include links to edit or
    delete each course and a link to create new courses.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ManageCourseListView`视图的模板。在这个模板中，您列出当前用户创建的课程。您包括编辑或删除每个课程的链接以及创建新课程的链接。
- en: 'Run the development server using the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令运行开发服务器：
- en: '[PRE10]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open `http://127.0.0.1:8000/accounts/login/?next=/course/mine/` in your browser
    and log in with a user belonging to the `Instructors` group. After logging in,
    you will be redirected to the `http://127.0.0.1:8000/course/mine/` URL and you
    should see the following page:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/accounts/login/?next=/course/mine/`并使用属于`Instructors`组的用户登录。登录后，您将被重定向到`http://127.0.0.1:8000/course/mine/`
    URL，并且您应该看到以下页面：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_13_04.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，聊天或文本消息，自动生成描述](img/B21088_13_04.png)'
- en: 'Figure 13.4: The instructor courses page with no courses'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.4：没有课程的讲师课程页面
- en: This page will display all courses created by the current user.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此页面将显示当前用户创建的所有课程。
- en: 'Let’s create the template that displays the form for the create and update
    course views. Edit the `courses/manage/course/form.html` template and write the
    following code:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建用于创建和更新课程视图的模板。编辑`courses/manage/course/form.html`模板并写入以下代码：
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `form.html` template is used for both the `CourseCreateView` and `CourseUpdateView`
    views. In this template, you check whether an `object` variable is in the context.
    If `object` exists in the context, you know that you are updating an existing
    course and you use it in the page title. Otherwise, you are creating a new `Course`
    object.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`form.html`模板用于`CourseCreateView`和`CourseUpdateView`视图。在这个模板中，您检查上下文中是否存在`object`变量。如果`object`存在于上下文中，您知道您正在更新现有课程，并在页面标题中使用它。否则，您正在创建一个新的`Course`对象。'
- en: 'Open `http://127.0.0.1:8000/course/mine/` in your browser and click the **CREATE
    NEW COURSE** button. You will see the following page:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/course/mine/`并点击**创建新课程**按钮。您将看到以下页面：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_05.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，自动生成描述](img/B21088_13_05.png)'
- en: 'Figure 13.5: The form to create a new course'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.5：创建新课程的表单
- en: 'Fill in the form and click the **SAVE COURSE** button. The course will be saved
    and you will be redirected to the course list page. It should look as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 填写表格并点击**保存课程**按钮。课程将被保存，并将您重定向到课程列表页面。它应该看起来如下所示：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_13_06.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、聊天或短信 描述自动生成](img/B21088_13_06.png)'
- en: 'Figure 13.6: The instructor courses page with one course'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.6：包含一个课程的教师课程页面
- en: Then, click the **Edit** link for the course you have just created. You will
    see the form again but, this time, you are editing an existing `Course` object
    instead of creating one.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击你刚刚创建的课程**编辑**链接。你将再次看到表单，但这次，你是在编辑现有的`Course`对象，而不是创建一个新对象。
- en: 'Finally, edit the `courses/manage/course/delete.html` template and add the
    following code:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编辑`courses/manage/course/delete.html`模板，并添加以下代码：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is the template for the `CourseDeleteView` view. This view inherits from
    `DeleteView`, provided by Django, which expects user confirmation to delete an
    object.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`CourseDeleteView`视图的模板。这个视图继承自Django提供的`DeleteView`，它期望用户确认以删除对象。
- en: 'Open the course list in the browser and click the **Delete** link of your course.
    You should see the following confirmation page:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开课程列表，点击你课程的**删除**链接。你应该看到以下确认页面：
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_13_07.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、聊天或短信 描述自动生成](img/B21088_13_07.png)'
- en: 'Figure 13.7: The Delete course confirmation page'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.7：删除课程确认页面
- en: Click the **CONFIRM** button. The course will be deleted and you will be redirected
    to the course list page again.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**确认**按钮。课程将被删除，你将被重定向回课程列表页面。
- en: Instructors can now create, edit, and delete courses. Next, you need to provide
    them with a CMS to add course modules and their contents. You will start by managing
    course modules.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，教师可以创建、编辑和删除课程。接下来，你需要为他们提供一个CMS来添加课程模块及其内容。你将首先管理课程模块。
- en: Managing course modules and their contents
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理课程模块及其内容
- en: You are going to build a system to manage course modules and their contents.
    You will need to build forms that can be used for managing multiple modules per
    course and different types of content for each module. Both modules and their
    contents will have to follow a specific order and you should be able to reorder
    them using the CMS.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你将构建一个系统来管理课程模块及其内容。你需要构建可以用于管理每个课程中的多个模块以及每个模块的不同类型内容的表单。模块及其内容都需要遵循特定的顺序，并且你应该能够使用CMS重新排序它们。
- en: Using formsets for course modules
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用表单集管理课程模块
- en: Django comes with an abstraction layer to work with multiple forms on the same
    page. These groups of forms are known as *formsets*. Formsets manage multiple
    instances of a certain `Form` or `ModelForm`. All forms are submitted at once
    and the formset takes care of the initial number of forms to display, limiting
    the maximum number of forms that can be submitted and validating all the forms.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了一个抽象层，用于在同一页面上处理多个表单。这些表单组被称为*表单集*。表单集管理特定`Form`或`ModelForm`的多个实例。所有表单都会一次性提交，表单集负责显示表单的初始数量，限制可以提交的最大表单数量，并验证所有表单。
- en: Formsets include an `is_valid()` method to validate all forms at once. You can
    also provide initial data for the forms and specify how many additional empty
    forms to display. You can learn more about formsets at [https://docs.djangoproject.com/en/5.0/topics/forms/formsets/](https://docs.djangoproject.com/en/5.0/topics/forms/formsets/)
    and about model formsets at [https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets](https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets).
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 表单集包含一个`is_valid()`方法，可以一次性验证所有表单。你也可以为表单提供初始数据，并指定要显示的额外空表单的数量。你可以在[https://docs.djangoproject.com/en/5.0/topics/forms/formsets/](https://docs.djangoproject.com/en/5.0/topics/forms/formsets/)了解更多关于表单集的信息，以及在[https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets](https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets)了解更多关于模型表单集的信息。
- en: 'Since a course is divided into a variable number of modules, it makes sense
    to use formsets to manage them. Create a `forms.py` file in the `courses` application
    directory and add the following code to it:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于课程被划分为可变数量的模块，因此使用表单集来管理它们是有意义的。在`courses`应用程序目录中创建一个`forms.py`文件，并将以下代码添加到其中：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This is the `ModuleFormSet` formset. You build it using the `inlineformset_factory()`
    function provided by Django. Inline formsets are a small abstraction on top of
    formsets that simplify working with related objects. This function allows you
    to build a model formset dynamically for the `Module` objects related to a `Course`
    object.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `ModuleFormSet` 表单集。你使用 Django 提供的 `inlineformset_factory()` 函数构建它。内联表单集是在表单集之上的一小部分抽象，它简化了与相关对象一起工作。此函数允许你动态地为与
    `Course` 对象相关的 `Module` 对象构建模型表单集。
- en: 'You use the following parameters to build the formset:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下参数来构建表单集：
- en: '`fields`: The fields that will be included in each form of the formset.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`：将包含在表单集中的每个表单中的字段。'
- en: '`extra`: Allows you to set the number of empty extra forms to display in the
    formset.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`extra`：允许你设置在表单集中显示的空额外表单的数量。'
- en: '`can_delete`: If you set this to `True`, Django will include a Boolean field
    for each form that will be rendered as a checkbox input. It allows you to mark
    the objects that you want to delete.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`can_delete`：如果你将其设置为 `True`，Django 将为每个表单包含一个布尔字段，该字段将渲染为复选框输入。它允许你标记你想要删除的对象。'
- en: 'Edit the `views.py` file of the `courses` application and add the following
    code to it:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses` 应用程序的 `views.py` 文件，并向其中添加以下代码：
- en: '[PRE14]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `CourseModuleUpdateView` view handles the formset to add, update, and delete
    modules for a specific course. This view inherits from the following mixins and
    views:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`CourseModuleUpdateView` 视图处理表单集，为特定课程添加、更新和删除模块。此视图继承以下混合类和视图：'
- en: '`TemplateResponseMixin`: This mixin takes charge of rendering templates and
    returning an HTTP response. It requires a `template_name` attribute that indicates
    the template to be rendered and provides the `render_to_response()` method to
    pass it a context and render the template.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TemplateResponseMixin`：此混合类负责渲染模板并返回 HTTP 响应。它需要一个 `template_name` 属性，该属性指示要渲染的模板，并提供
    `render_to_response()` 方法，将上下文传递给它并渲染模板。'
- en: '`View`: The basic class-based view provided by Django.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`View`：Django 提供的基本基于类的视图。'
- en: 'In this view, you implement the following methods:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在此视图中，你实现以下方法：
- en: '`get_formset()`: You define this method to avoid repeating the code to build
    the formset. You create a `ModuleFormSet` object for the given `Course` object
    with optional data.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_formset()`：你定义此方法以避免重复构建表单集的代码。你为给定的 `Course` 对象使用可选数据创建一个 `ModuleFormSet`
    对象。'
- en: '`dispatch()`: This method is provided by the `View` class. It takes an HTTP
    request and its parameters and attempts to delegate to a lowercase method that
    matches the HTTP method used. A `GET` request is delegated to the `get()` method
    and a `POST` request to `post()`, respectively. In this method, you use the `get_object_or_404()`
    shortcut function to get the `Course` object for the given `id` parameter that
    belongs to the current user. You include this code in the `dispatch()` method
    because you need to retrieve the course for both `GET` and `POST` requests. You
    save it into the `course` attribute of the view to make it accessible to other
    methods.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dispatch()`：此方法由 `View` 类提供。它接受 HTTP 请求及其参数，并尝试将请求委派给与 HTTP 方法匹配的小写方法。`GET`
    请求委派给 `get()` 方法，`POST` 请求委派给 `post()`，分别。在此方法中，你使用 `get_object_or_404()` 快捷函数获取属于当前用户的给定
    `id` 参数的 `Course` 对象。你将此代码包含在 `dispatch()` 方法中，因为你需要为 `GET` 和 `POST` 请求检索课程。你将其保存到视图的
    `course` 属性中，以便其他方法可以访问它。'
- en: '`get()`: Executed for `GET` requests. You build an empty `ModuleFormSet` formset
    and render it to the template together with the current `Course` object, using
    the `render_to_response()` method provided by `TemplateResponseMixin`.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`：用于 `GET` 请求。你使用 `TemplateResponseMixin` 提供的 `render_to_response()`
    方法构建一个空的 `ModuleFormSet` 表单集，并将其与当前 `Course` 对象一起渲染到模板中。'
- en: '`post()`: Executed for `POST` requests. In this method, you perform the following
    actions:'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post()`：用于 `POST` 请求。在此方法中，你执行以下操作：'
- en: You build a `ModuleFormSet` instance using the submitted data.
  id: totrans-139
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用提交的数据创建一个 `ModuleFormSet` 实例。
- en: You execute the `is_valid()` method of the formset to validate all of its forms.
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你执行表单集的 `is_valid()` 方法来验证其所有表单。
- en: If the formset is valid, you save it by calling the `save()` method. At this
    point, any changes made, such as adding, updating, or marking modules for deletion,
    are applied to the database. Then, you redirect users to the `manage_course_list`
    URL. If the formset is not valid, you render the template to display any errors
    instead.
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果表单集有效，您通过调用`save()`方法来保存它。此时，任何更改，如添加、更新或标记模块为删除，都将应用到数据库中。然后，您将用户重定向到`manage_course_list`
    URL。如果表单集无效，您将渲染模板以显示任何错误。
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL pattern to it:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`urls.py`文件，并向其中添加以下URL模式：
- en: '[PRE15]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Create a new directory inside the `courses/manage/` template directory and
    name it `module`. Create a `courses/manage/module/formset.html` template and add
    the following code to it:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在`courses/manage/`模板目录内创建一个新目录，命名为`module`。创建一个`courses/manage/module/formset.html`模板，并向其中添加以下代码：
- en: '[PRE16]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this template, you create a `<form>` HTML element in which you include `formset`.
    You also include the management form for the formset with the variable `{{ formset.management_form
    }}`. The management form includes hidden fields to control the initial, total,
    minimum, and maximum number of forms.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模板中，您创建一个包含`formset`的`<form>` HTML元素。您还包含表单集的管理表单，变量为`{{ formset.management_form
    }}`。管理表单包括隐藏字段，用于控制表单的初始、总数、最小和最大数量。
- en: 'Edit the `courses/manage/course/list.html` template and add the following link
    for the `course_module_update` URL below the course **Edit** and **Delete** links:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/manage/course/list.html`模板，并在课程**编辑**和**删除**链接下方添加以下链接到`course_module_update`
    URL：
- en: '[PRE17]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You have included the link to edit the course modules.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 您已包含编辑课程模块的链接。
- en: 'Open `http://127.0.0.1:8000/course/mine/` in your browser. Create a course
    and click the **Edit modules** link for it. You should see a formset, as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/course/mine/`。创建一个课程并点击其**编辑模块**链接。您应该看到一个表单集，如下所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_08.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B21088_13_08.png)'
- en: 'Figure 13.8: The course edit page, including the formset for course modules'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.8：课程编辑页面，包括课程模块的表单集
- en: The formset includes a form for each `Module` object contained in the course.
    After these, two empty extra forms are displayed because you set `extra=2` for
    `ModuleFormSet`. When you save the formset, Django will include another two extra
    fields to add new modules.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 表单集包含课程中每个`Module`对象对应的表单。之后，会显示两个额外的空表单，因为您为`ModuleFormSet`设置了`extra=2`。当您保存表单集时，Django会包含另外两个额外的字段来添加新模块。
- en: You can see that formsets are incredibly useful for managing multiple instances
    of forms on a single page. Formsets simplify the process of collecting and validating
    data from sets of similar forms efficiently.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到，表单集对于在单个页面上管理多个表单实例来说非常有用。表单集简化了从类似表单集中收集和验证数据的过程。
- en: After understanding how formsets work, you will explore advanced form capabilities
    by creating forms dynamically that adapt to the various types of content that
    will be added to course modules.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在了解表单集的工作原理后，您将通过创建动态表单来探索高级表单功能，这些表单可以适应将要添加到课程模块的各种内容类型。
- en: Adding content to course modules
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加课程模块内容
- en: 'Now, you need a way to add content to course modules. You have four different
    types of content: text, video, image, and file. You could consider creating four
    different views to create content, with one form for each model. However, you
    are going to take a more versatile approach and create a view that handles creating
    or updating the objects of any content model. You will build the form for this
    view dynamically, according to the type of content the instructor wants to add
    to the course: `Text`, `Video`, `Image`, or `File`.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您需要一种方法来添加课程模块的内容。您有四种不同类型的内容：文本、视频、图像和文件。您可以考虑创建四个不同的视图来创建内容，每个模型一个表单。然而，您将采取更灵活的方法，创建一个可以处理任何内容模型对象的创建或更新视图。您将根据讲师想要添加到课程中的内容类型（`Text`、`Video`、`Image`或`File`）动态构建此视图的表单。
- en: 'Edit the `views.py` file of the `courses` application and add the following
    code to it:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses`应用的`views.py`文件，并向其中添加以下代码：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This is the first part of `ContentCreateUpdateView`. It will allow you to create
    and update different models’ contents. This view defines the following methods:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ContentCreateUpdateView`的第一部分。它将允许您创建和更新不同模型的内 容。此视图定义了以下方法：
- en: '`get_model()`: Here, you check that the given model name is one of the four
    content models: `Text`, `Video`, `Image`, or `File`. Then, you use Django’s `apps`
    module to obtain the actual class for the given model name. If the given model
    name is not one of the valid ones, you return `None`.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_model()`: 在这里，你检查给定的模型名称是否是以下四种内容模型之一：`Text`、`Video`、`Image` 或 `File`。然后，你使用
    Django 的 `apps` 模块来获取给定模型名称的实际类。如果给定的模型名称不是有效的之一，你返回 `None`。'
- en: '`get_form()`: You build a dynamic form using the `modelform_factory()` function
    of the form’s framework. Since you are going to build a form for the `Text`, `Video`,
    `Image`, and `File` models, you use the `exclude` parameter to specify the common
    fields to exclude from the form and let all other attributes be included automatically.
    By doing so, you don’t have to know which fields to include depending on the model.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_form()`: 你使用表单框架的 `modelform_factory()` 函数构建一个动态表单。由于你将构建 `Text`、`Video`、`Image`
    和 `File` 模型的表单，你使用 `exclude` 参数指定要排除的公共字段，并让所有其他属性自动包含。这样做，你不必知道根据模型要包含哪些字段。'
- en: '`dispatch()`: This receives the following URL parameters and stores the corresponding
    module, model, and content object as class attributes:'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dispatch()`: 这接收以下 URL 参数并将相应的模块、模型和内容对象存储为类属性：'
- en: '`module_id`: The ID for the module that the content is/will be associated with.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module_id`: 与内容关联的模块的 ID。'
- en: '`model_name`: The model name of the content to create/update.'
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_name`: 要创建/更新的内容的模型名称。'
- en: '`id`: The ID of the object that is being updated. It’s `None` to create new
    objects.'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`: 正在更新的对象的 ID。创建新对象时为 `None`。'
- en: 'Add the following `get()` and `post()` methods to `ContentCreateUpdateView`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下 `get()` 和 `post()` 方法添加到 `ContentCreateUpdateView`：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'These methods are as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法如下：
- en: '`get()`: Executed when a `GET` request is received. You build the model form
    for the `Text`, `Video`, `Image`, or `File` instance that is being updated. Otherwise,
    you pass no instance to create a new object since `self.obj` is `None` if no ID
    is provided.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get()`: 当接收到 `GET` 请求时执行。你为正在更新的 `Text`、`Video`、`Image` 或 `File` 实例构建模型表单。否则，由于没有提供
    ID，`self.obj` 为 `None`，因此不传递任何实例以创建新对象。'
- en: '`post()`: Executed when a `POST` request is received. You build the model form,
    passing any submitted data and files to it. Then, you validate it. If the form
    is valid, you create a new object and assign `request.user` as its owner before
    saving it to the database. You check for the `id` parameter. If no ID is provided,
    you know the user is creating a new object instead of updating an existing one.
    If this is a new object, you create a `content` object for the given module and
    associate the new content with it.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`post()`: 当接收到 `POST` 请求时执行。你构建模型表单，将任何提交的数据和文件传递给它。然后，你验证它。如果表单有效，你创建一个新的对象，并将
    `request.user` 分配为其所有者，然后将其保存到数据库中。你检查 `id` 参数。如果没有提供 ID，你知道用户正在创建一个新的对象而不是更新现有的一个。如果是新对象，你为给定的模块创建一个
    `content` 对象，并将新的内容与之关联。'
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL patterns to it:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses` 应用程序的 `urls.py` 文件，并向其中添加以下 URL 模式：
- en: '[PRE20]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The new URL patterns are as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 新的 URL 模式如下：
- en: '`module_content_create`: To create new text, video, image, or file objects
    and add them to a module. It includes the `module_id` and `model_name` parameters.
    The first one allows you to link the new content object to the given module. The
    latter specifies the content model for which to build the form.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module_content_create`: 创建新的文本、视频、图像或文件对象并将它们添加到模块中。它包括 `module_id` 和 `model_name`
    参数。前者允许你将新的内容对象链接到给定的模块。后者指定要构建表单的内容模型。'
- en: '`module_content_update`: To update an existing text, video, image, or file
    object. It includes the `module_id` and `model_name` parameters and an `id` parameter
    to identify the content that is being updated.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`module_content_update`: 更新现有的文本、视频、图像或文件对象。它包括 `module_id` 和 `model_name`
    参数以及一个 `id` 参数来标识正在更新的内容。'
- en: 'Create a new directory inside the `courses/manage/` template directory and
    name it `content`. Create the template `courses/manage/content/form.html` and
    add the following code to it:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `courses/manage/` 模板目录内创建一个新的目录，并命名为 `content`。创建模板 `courses/manage/content/form.html`
    并向其中添加以下代码：
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is the template for the `ContentCreateUpdateView` view. In this template,
    you check whether an `object` variable is in the context. If `object` exists in
    the context, you are updating an existing object. Otherwise, you are creating
    a new object.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `ContentCreateUpdateView` 视图的模板。在此模板中，你检查 `object` 变量是否存在于上下文中。如果 `object`
    存在于上下文中，你正在更新现有对象。否则，你正在创建一个新对象。
- en: You include `enctype="multipart/form-data"` in the `<form>` HTML element because
    the form contains a file upload for the `File` and `Image` content models.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 你在 `<form>` HTML 元素中包含 `enctype="multipart/form-data"`，因为表单包含用于 `File` 和 `Image`
    内容模型的文件上传。
- en: Run the development server, open `http://127.0.0.1:8000/course/mine/`, click
    **Edit modules** for an existing course, and create a module.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器，打开 `http://127.0.0.1:8000/course/mine/`，点击现有课程的 **编辑模块**，创建一个模块。
- en: 'Then, open the Python shell with the following command:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，使用以下命令打开 Python shell：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Obtain the ID of the most recently created module, as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下方式获取最近创建的模块的 ID：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the development server and open `http://127.0.0.1:8000/course/module/6/content/image/create/`
    in your browser, replacing the module ID with the one you obtained before. You
    will see the form to create an `Image` object, as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 运行开发服务器，并在浏览器中打开 `http://127.0.0.1:8000/course/module/6/content/image/create/`，将模块
    ID 替换为你之前获得的 ID。你将看到创建 `Image` 对象的表单，如下所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_09.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成描述](img/B21088_13_09.png)'
- en: 'Figure 13.9: The course Add new content form'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.9：课程添加新内容表单
- en: Don’t submit the form yet. If you try to do so, it will fail because you haven’t
    defined the `module_content_list` URL yet. You are going to create it in a bit.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 还未提交表单。如果你这样做，它将失败，因为你还没有定义 `module_content_list` URL。你将在稍后创建它。
- en: 'You also need a view for deleting content. Edit the `views.py` file of the
    `courses` application and add the following code:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要一个用于删除内容的视图。编辑 `courses` 应用程序的 `views.py` 文件，并向其中添加以下代码：
- en: '[PRE24]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `ContentDeleteView` class retrieves the `content` object with the given
    ID. It deletes the related `Text`, `Video`, `Image`, or `File` object. Finally,
    it deletes the `content` object and redirects the user to the `module_content_list`
    URL to list the other contents of the module.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`ContentDeleteView` 类通过给定的 ID 获取 `content` 对象。它删除相关的 `Text`、`Video`、`Image`
    或 `File` 对象。最后，它删除 `content` 对象并将用户重定向到 `module_content_list` URL 以列出模块的其他内容。'
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL pattern to it:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses` 应用程序的 `urls.py` 文件，并向其中添加以下 URL 模式：
- en: '[PRE25]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Now, instructors can create, update, and delete content easily. The approach
    you have learned in this section is very useful for managing forms with diverse
    data in a generic manner. This method can be applied in other situations where
    a flexible solution is needed to handle data inputs.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，讲师可以轻松地创建、更新和删除内容。在本节中学到的这种方法对于以通用方式管理具有多种数据的形式非常有用。此方法可以应用于需要灵活解决方案来处理数据输入的其他情况。
- en: In the next section, we are going to create the views and templates to display
    course modules and contents.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将创建用于显示课程模块和内容的视图和模板。
- en: Managing modules and their contents
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理模块及其内容
- en: You have built views to create, edit, and delete course modules and their contents.
    Next, you need a view to display all modules for a course and list the contents
    of a specific module.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经创建了用于创建、编辑和删除课程模块及其内容的视图。接下来，你需要一个视图来显示课程的所有模块并列出特定模块的内容。
- en: 'Edit the `views.py` file of the `courses` application and add the following
    code to it:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses` 应用程序的 `views.py` 文件，并向其中添加以下代码：
- en: '[PRE26]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This is the `ModuleContentListView` view. This view gets the `Module` object
    with the given ID that belongs to the current user and renders a template with
    the given module.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `ModuleContentListView` 视图。此视图获取属于当前用户的给定 ID 的 `Module` 对象，并渲染一个包含给定模块的模板。
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL pattern to it:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses` 应用程序的 `urls.py` 文件，并向其中添加以下 URL 模式：
- en: '[PRE27]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Create a new template inside the `templates/courses/manage/module/` directory
    and name it `content_list.html`. Add the following code to it:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `templates/courses/manage/module/` 目录中创建一个新的模板，并将其命名为 `content_list.html`。向其中添加以下代码：
- en: '[PRE28]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Make sure that no template tag is split over multiple lines; the Django template
    engine expects the tags to be clearly defined and uninterrupted.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 确保没有模板标签被拆分到多行；Django 模板引擎期望标签被明确定义且不间断。
- en: This is the template that displays all modules for a course and the contents
    of the selected module. You iterate over the course modules to display them in
    a sidebar. You iterate over a module’s contents and access `content.item` to get
    the related `Text`, `Video`, `Image`, or `File` object. You also include links
    to create new text, video, image, or file content.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示课程所有模块及其所选模块内容的模板。你遍历课程模块以在侧边栏中显示它们。你遍历模块的内容并访问`content.item`以获取相关的`Text`、`Video`、`Image`或`File`对象。你还可以包括创建新的文本、视频、图像或文件内容的链接。
- en: 'You want to know which type of object each of the `item` objects is: `Text`,
    `Video`, `Image`, or `File`. You need the model name to build the URL to edit
    the object. Besides this, you could display each item in the template differently
    based on the type of content it is. You can get the model name for an object from
    the model’s `Meta` class by accessing the object’s `_meta` attribute. However,
    Django doesn’t allow you to access variables or attributes starting with an underscore
    in templates to prevent retrieving private attributes or calling private methods.
    You can solve this by writing a custom template filter.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你想知道每个`item`对象是哪种类型：`Text`、`Video`、`Image`或`File`。你需要模型名称来构建编辑对象的URL。除此之外，你还可以根据内容类型在模板中不同地显示每个项目。你可以从模型的`Meta`类通过访问对象的后缀`_meta`属性来获取对象的模型名称。然而，Django不允许你在模板中访问以下划线开头的变量或属性，以防止检索私有属性或调用私有方法。你可以通过编写自定义模板过滤器来解决这个问题。
- en: 'Create the following file structure inside the `courses` application directory:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在`courses`应用程序目录内创建以下文件结构：
- en: '[PRE29]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Edit the `course.py` module and add the following code to it:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`course.py`模块并向其中添加以下代码：
- en: '[PRE30]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This is the `model_name` template filter. You can apply it in templates as `object|model_name`
    to get the model name for an object.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`model_name`模板过滤器。你可以在模板中将其应用为`object|model_name`以获取对象的模型名称。
- en: 'Edit the `templates/courses/manage/module/content_list.html` template and add
    the following line below the `{% extends %}` template tag:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`templates/courses/manage/module/content_list.html`模板并在`{% extends %}`模板标签下方添加以下行：
- en: '[PRE31]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will load the `course` template tags. Then, find the following lines:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这将加载`course`模板标签。然后，找到以下行：
- en: '[PRE32]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Replace them with the following ones:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们替换为以下内容：
- en: '[PRE33]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, you display the item model name in the template and also
    use the model name to build the link to edit the object.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你在模板中显示项目模型名称，并使用模型名称来构建编辑对象的链接。
- en: 'Edit the `courses/manage/course/list.html` template and add a link to the `module_content_list`
    URL, like this:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/manage/course/list.html`模板并添加对`module_content_list` URL的链接，如下所示：
- en: '[PRE34]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The new link allows users to access the contents of the first module of the
    course if there are any.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 新的链接允许用户访问课程的第一个模块内容（如果有）。
- en: 'Stop the development server and run it again using the following command:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 停止开发服务器并使用以下命令重新运行它：
- en: '[PRE35]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: By stopping and running the development server, you make sure that the `course`
    template tags file gets loaded.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 通过停止并运行开发服务器，你可以确保`course`模板标签文件被加载。
- en: 'Open `http://127.0.0.1:8000/course/mine/` and click the **Manage contents**
    link for a course that contains at least one module. You will see a page like
    the following one:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`http://127.0.0.1:8000/course/mine/`并点击包含至少一个模块的课程中的**管理内容**链接。你会看到一个如下所示的页面：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_10.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_13_10.png)'
- en: 'Figure 13.10: The page to manage course module contents'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.10：管理课程模块内容页面
- en: When you click on a module in the left sidebar, its contents are displayed in
    the main area. The template also includes links to add new text, video, image,
    or file content for the module being displayed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在左侧侧边栏中点击一个模块时，其内容将在主区域中显示。模板还包括为显示的模块添加新的文本、视频、图像或文件内容的链接。
- en: 'Add a couple of different types of content to the module and look at the result.
    Module contents will appear below **Module contents**:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 向模块添加几种不同类型的内容并查看结果。模块内容将出现在**模块内容**下方：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_11.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_13_11.png)'
- en: 'Figure 13.11: Managing different module contents'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.11：管理不同的模块内容
- en: Next, we will allow course instructors to reorder modules and module contents
    with a simple drag-and-drop functionality.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将允许课程讲师通过简单的拖放功能重新排序模块和模块内容。
- en: Reordering modules and their contents
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 重新排序模块及其内容
- en: We will implement a JavaScript drag-and-drop functionality to let course instructors
    reorder the modules of a course by dragging them. Drag-and-drop enhances the user
    interface, offering a natural way to reorder elements that is more intuitive than
    using numbers or clicking buttons. It is also a time-saver for course instructors,
    who will be able to reorganize course modules and their contents easily.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现一个JavaScript拖放功能，允许课程讲师通过拖动来重新排序课程模块。拖放功能增强了用户界面，提供了一种比使用数字或点击按钮更直观的自然排序元素方式。它也是课程讲师的省时工具，使他们能够轻松重新组织课程模块及其内容。
- en: To implement this feature, we will use the HTML5 Sortable library, which simplifies
    the process of creating sortable lists using the native HTML5 Drag and Drop API.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个功能，我们将使用HTML5 Sortable库，它简化了使用原生HTML5拖放API创建可排序列表的过程。
- en: When users finish dragging a module, you will use the JavaScript Fetch API to
    send an asynchronous HTTP request to the server that stores the new module order.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户完成拖动模块后，您将使用JavaScript Fetch API向存储新模块顺序的服务器发送异步HTTP请求。
- en: You can read more information about the HTML5 Drag and Drop API at [https://www.w3schools.com/html/html5_draganddrop.asp](https://www.w3schools.com/html/html5_draganddrop.asp).
    You can find examples built with the HTML5 Sortable library at [https://lukasoppermann.github.io/html5sortable/](https://lukasoppermann.github.io/html5sortable/).
    Documentation for the HTML5 Sortable library is available at [https://github.com/lukasoppermann/html5sortable](https://github.com/lukasoppermann/html5sortable).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://www.w3schools.com/html/html5_draganddrop.asp](https://www.w3schools.com/html/html5_draganddrop.asp)上阅读有关HTML5拖放API的更多信息。您可以在[https://lukasoppermann.github.io/html5sortable/](https://lukasoppermann.github.io/html5sortable/)找到使用HTML5
    Sortable库构建的示例。HTML5 Sortable库的文档可在[https://github.com/lukasoppermann/html5sortable](https://github.com/lukasoppermann/html5sortable)找到。
- en: Let’s implement the views to update the order of course modules and module contents.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现更新课程模块和模块内容顺序的视图。
- en: Using mixins from django-braces
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`django-braces`的混入类
- en: '`django-braces` is a third-party module that contains a collection of generic
    mixins for Django. These mixins provide additional features for class-based views
    that are useful for various common scenarios. You can see a list of all mixins
    provided by `django-braces` at [https://django-braces.readthedocs.io/](https://django-braces.readthedocs.io/).'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-braces`是一个第三方模块，其中包含了一组Django通用的混入类。这些混入类为基于类的视图提供了额外的功能，这些功能在多种常见场景中非常有用。您可以在[https://django-braces.readthedocs.io/](https://django-braces.readthedocs.io/)查看`django-braces`提供的所有混入类的列表。'
- en: 'You will use the following mixins of `django-braces`:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 您将使用以下`django-braces`的混入类：
- en: '`CsrfExemptMixin`: Used to avoid checking the **cross-site request forgery**
    (**CSRF**) token in the `POST` requests. You need this to perform AJAX `POST`
    requests without the need to pass a `csrf_token`.'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CsrfExemptMixin`：用于避免在`POST`请求中检查**跨站请求伪造**（**CSRF**）令牌。您需要这个混入类来执行不需要传递`csrf_token`的AJAX
    `POST`请求。'
- en: '`JsonRequestResponseMixin`: Parses the request data as JSON and also serializes
    the response as JSON and returns an HTTP response with the `application/json`
    content type.'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`JsonRequestResponseMixin`：将请求数据解析为JSON，并将响应序列化为JSON，并返回一个带有`application/json`内容类型的HTTP响应。'
- en: 'Install `django-braces` via `pip` using the following command:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令通过`pip`安装`django-braces`：
- en: '[PRE36]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You need a view that receives the new order of module IDs encoded in JSON and
    updates the order accordingly. Edit the `views.py` file of the `courses` application
    and add the following code to it:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要一个视图来接收编码为JSON的模块ID的新顺序，并相应地更新顺序。编辑`courses`应用的`views.py`文件，并向其中添加以下代码：
- en: '[PRE37]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This is the `ModuleOrderView` view, which allows you to update the order of
    course modules.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`ModuleOrderView`视图，它允许您更新课程模块的顺序。
- en: 'You can build a similar view to order a module’s contents. Add the following
    code to the `views.py` file:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以构建一个类似的视图来排序模块的内容。将以下代码添加到`views.py`文件中：
- en: '[PRE38]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Now, edit the `urls.py` file of the `courses` application and add the following
    URL patterns to it:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，编辑`courses`应用的`urls.py`文件，并向其中添加以下URL模式：
- en: '[PRE39]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Finally, you need to implement the drag-and-drop functionality in the template.
    We will use the HTML5 Sortable library, which simplifies the creation of sortable
    elements using the standard HTML Drag and Drop API. There are other JavaScript
    libraries that will allow you to achieve the same, but we chose HTML5 Sortable
    because it is lightweight and leverages the native HTML5 Drag and Drop API.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你需要在模板中实现拖放功能。我们将使用 HTML5 Sortable 库，它简化了使用标准 HTML 拖放 API 创建可排序元素。还有其他 JavaScript
    库可以实现相同的功能，但我们选择了 HTML5 Sortable，因为它轻量级且利用了原生的 HTML5 拖放 API。
- en: 'Edit the `base.html` template located in the `templates/` directory of the
    `courses` application and add the following block highlighted in bold:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑位于 `courses` 应用程序 `templates/` 目录中的 `base.html` 模板，并添加以下加粗显示的块：
- en: '[PRE40]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This new block named `include_js` will allow you to insert JavaScript files
    into any template that extends the `base.html` template.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名为 `include_js` 的新块将允许你在扩展 `base.html` 模板的任何模板中插入 JavaScript 文件。
- en: 'Next, edit the `courses/manage/module/content_list.html` template and add the
    following code highlighted in bold to the bottom of the template:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，编辑 `courses/manage/module/content_list.html` 模板，并将以下加粗显示的代码添加到模板底部：
- en: '[PRE41]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In this code, you load the HTML5 Sortable library from a public **content delivery
    network** (**CDN**). Remember you loaded a JavaScript library from a CDN before
    in *Chapter 6,* *Sharing Content on Your Website*.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在此代码中，你从公共 **内容分发网络**（**CDN**）加载了 HTML5 Sortable 库。记住，你在 *第 6 章*，*在您的网站上共享内容*
    中之前已经从一个 CDN 加载了一个 JavaScript 库。
- en: 'Now add the following `domready` block highlighted in bold to the `courses/manage/module/content_list.html`
    template:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下加粗显示的 `domready` 块添加到 `courses/manage/module/content_list.html` 模板中：
- en: '[PRE42]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In these new lines, you add JavaScript code to the `{% block domready %}` block
    that was defined in the event listener for the `DOMContentLoaded` event in the
    `base.html` template. This guarantees that your JavaScript code will be executed
    once the page has been loaded. With this code, you define the options for the
    HTTP request to reorder modules that you will implement next. You will send a
    `POST` request using the Fetch API to update the module order. The `module_order`
    URL path is built and stored in the JavaScript constant `moduleOrderUrl`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些新行中，你向在 `base.html` 模板中 `DOMContentLoaded` 事件监听器中定义的 `{% block domready %}`
    块中添加 JavaScript 代码。这保证了你的 JavaScript 代码将在页面加载后执行。使用此代码，你定义了将实现模块排序的 HTTP 请求的选项。你将使用
    Fetch API 发送 `POST` 请求来更新模块顺序。`module_order` URL 路径由 JavaScript 常量 `moduleOrderUrl`
    构建。
- en: 'Add the following code highlighted in bold to the `domready` block:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下加粗显示的代码添加到 `domready` 块中：
- en: '[PRE43]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the new code, you define a `sortable` element for the HTML element with `id="modules"`,
    which is the module list in the sidebar. Remember that you use a CSS selector
    `#` to select the element with the given `id`. When you start dragging an item,
    the HTML5 Sortable library creates a placeholder item so that you can easily see
    where the element will be placed.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，你为具有 `id="modules"` 的 HTML 元素定义了一个 `sortable` 元素，这是侧边栏中的模块列表。记住，你使用 CSS
    选择器 `#` 来选择具有给定 `id` 的元素。当你开始拖动一个项目时，HTML5 Sortable 库创建一个占位符项目，这样你可以轻松地看到元素将被放置的位置。
- en: You set the `forcePlacehoderSize` option to `true`, to force the placeholder
    element to have a height, and you use `placeholderClass` to define the CSS class
    for the placeholder element. You use the class named `placeholder` that is defined
    in the `css/base.css` static file loaded in the `base.html` template.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 你将 `forcePlacehoderSize` 选项设置为 `true`，以强制占位符元素具有高度，并使用 `placeholderClass` 来定义占位符元素的
    CSS 类。你使用在 `base.html` 模板中加载的 `css/base.css` 静态文件中定义的名为 `placeholder` 的类。
- en: 'Open `http://127.0.0.1:8000/course/mine/` in your browser and click on **Manage
    contents** for any course. Now, you can drag and drop the course modules in the
    left sidebar, as in *Figure 13.12*:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开 `http://127.0.0.1:8000/course/mine/`，然后点击任何课程的 **管理内容**。现在，你可以将课程模块拖放到左侧边栏中，如图
    *13.12* 所示：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_12.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B21088_13_12.png)'
- en: 'Figure 13.12: Reordering modules with the drag-and-drop functionality'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.12：使用拖放功能重新排序模块
- en: While you drag the element, you will see the placeholder item created by the
    Sortable library, which has a dashed-line border. The placeholder element allows
    you to identify the position in which the dragged element will be dropped.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当你拖动元素时，你会看到 Sortable 库创建的占位符项，它有一个虚线边框。占位符元素允许你识别拖动元素将要放置的位置。
- en: When you drag a module to a different position, you need to send an HTTP request
    to the server to store the new order. This can be done by attaching an event handler
    to the sortable element and sending a request to the server using the JavaScript
    Fetch API.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将模块拖动到不同的位置时，你需要向服务器发送一个 HTTP 请求来存储新的顺序。这可以通过将事件处理器附加到可排序元素，并使用 JavaScript
    Fetch API 向服务器发送请求来实现。
- en: 'Edit the `domready` block of the `courses/manage/module/content_list.html`
    template and add the following code highlighted in bold:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `courses/manage/module/content_list.html` 模板的 `domready` 块，并添加以下加粗代码：
- en: '[PRE44]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the new code, an event listener is created for the `sortupdate` event of
    the sortable element. The `sortupdate` event is triggered when an element is dropped
    in a different position. The following tasks are performed in the event function:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 在新代码中，为可排序元素的 `sortupdate` 事件创建了一个事件监听器。当元素被拖放到不同的位置时，会触发 `sortupdate` 事件。在事件函数中执行以下任务：
- en: An empty `modulesOrder` dictionary is created. The keys for this dictionary
    will be the module IDs, and the values will contain the index of each module.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个空的 `modulesOrder` 字典。这个字典的键将是模块 ID，值将包含每个模块的索引。
- en: The list elements of the `#modules` HTML element are selected with `document.querySelectorAll()`,
    using the `#modules li` CSS selector.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `document.querySelectorAll()` 选择 `#modules` HTML 元素的列表项，使用 `#modules li`
    CSS 选择器。
- en: '`forEach()` is used to iterate over each list element.'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`forEach()` 用于遍历列表中的每个元素。'
- en: The new index for each module is stored in the `modulesOrder` dictionary. The
    ID of each module is retrieved from the HTML `data-id` attribute by accessing
    `module.dataset.id`. You use the ID as the key of the `modulesOrder` dictionary
    and the new index of the module as the value.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将每个模块的新索引存储在 `modulesOrder` 字典中。通过访问 `module.dataset.id` 从 HTML 的 `data-id`
    属性中检索每个模块的 ID。你使用 ID 作为 `modulesOrder` 字典的键，并将模块的新索引作为值。
- en: The order displayed for each module is updated by selecting the element with
    the `order` CSS class. Since the index is zero-based and we want to display a
    one-based index, we add `1` to `index`.
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择具有 `order` CSS 类的元素来更新每个模块显示的顺序。由于索引是从零开始的，而我们想显示基于一的索引，所以我们向 `index` 添加
    `1`。
- en: A key named `body` is added to the `options` dictionary with the new order contained
    in `modulesOrder`. The `JSON.stringify()` method converts the JavaScript object
    into a JSON string. This is the body for the HTTP request to update the module
    order.
  id: totrans-282
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `options` 字典中添加一个名为 `body` 的键，其中包含 `modulesOrder` 中的新顺序。`JSON.stringify()`
    方法将 JavaScript 对象转换为 JSON 字符串。这是更新模块顺序的 HTTP 请求的正文。
- en: The Fetch API is used by creating a `fetch()` HTTP request to update the module
    order. The `ModuleOrderView` view that corresponds to the `module_order` URL takes
    care of updating the order of the modules.
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过创建一个 `fetch()` HTTP 请求来更新模块顺序。与 `module_order` URL 对应的 `ModuleOrderView` 视图负责更新模块的顺序。
- en: 'You can now drag and drop modules. When you finish dragging a module, an HTTP
    request is sent to the `module_order` URL to update the order of the modules.
    If you refresh the page, the latest module order will be kept because it was updated
    in the database. *Figure 13.13* shows a different order for the modules in the
    sidebar after sorting them using drag and drop:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以拖放模块。当你完成模块的拖动后，会向 `module_order` URL 发送一个 HTTP 请求来更新模块的顺序。如果你刷新页面，最新的模块顺序将被保留，因为它已在数据库中更新。*图
    13.13* 展示了使用拖放排序后侧边栏中模块的不同顺序：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_13.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_13_13.png)'
- en: 'Figure 13.13: New order for modules after reordering them with drag and drop'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.13：重新排列模块后的新顺序
- en: If you run into any issues, remember to use your browser’s developer tools to
    debug JavaScript and HTTP requests. Usually, you can right-click anywhere on the
    website to open the contextual menu and click on **Inspect** or **Inspect Element**
    to access the web developer tools of your browser.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遇到任何问题，请记住使用浏览器开发者工具来调试 JavaScript 和 HTTP 请求。通常，你可以在网站上任何地方右键单击以打开上下文菜单，然后单击
    **Inspect** 或 **Inspect Element** 以访问浏览器的网络开发者工具。
- en: Let’s add the same drag-and-drop functionality to allow course instructors to
    sort module contents as well.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加相同的拖放功能，以便课程讲师可以排序模块内容。
- en: 'Edit the `domready` block of the `courses/manage/module/content_list.html`
    template and add the following code highlighted in bold:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`courses/manage/module/content_list.html`模板中的`domready`块，并添加以下加粗的代码：
- en: '[PRE45]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In this case, you use the `content_order` URL instead of `module_order` and
    build the `sortable` functionality on the HTML element with the ID `module-contents`.
    The functionality is mainly the same as for ordering course modules. In this case,
    you don’t need to update the numbering of the contents because they don’t include
    any visible index.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，您使用`content_order` URL而不是`module_order`，并在具有ID `module-contents`的HTML元素上构建`sortable`功能。该功能与排序课程模块的功能基本相同。在这种情况下，您不需要更新内容的编号，因为它们不包含任何可见的索引。
- en: 'Now, you can drag and drop both modules and module contents, as in *Figure
    13.14*:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以拖放模块和模块内容，如图13.14所示：
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_14.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B21088_13_14.png)'
- en: 'Figure 13.14: Reordering module contents with the drag-and-drop functionality'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.14：使用拖放功能重新排序模块内容
- en: Great! You built a very versatile CMS for the course instructors.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！您为课程讲师构建了一个非常通用的CMS。
- en: Summary
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to use class-based views and mixins to create
    a CMS. You acquired knowledge about reusability and modularity that you can apply
    to your future applications. You also worked with groups and permissions to restrict
    access to your views, gaining insights into security and how to control actions
    on data. You learned how to use formsets and model formsets to manage course modules
    and their content in a flexible manner. You also built a drag-and-drop functionality
    with JavaScript to reorder course modules and their contents with an improved
    user interface.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您学习了如何使用基于类的视图和混入创建CMS。您获得了可重用性和模块化知识，这些知识可以应用于您未来的应用程序。您还与组和权限一起工作，以限制对视图的访问，深入了解安全性和如何控制数据上的操作。您学习了如何使用表单集和模型表单集以灵活的方式管理课程模块及其内容。您还使用JavaScript构建了拖放功能，以改进用户界面重新排序课程模块及其内容。
- en: In the next chapter, you will create a student registration system and manage
    student enrollment in courses. You will also learn how to render different types
    of content and improve the performance of your application by caching content
    using Django’s cache framework.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将创建学生注册系统并管理学生课程的注册。您还将学习如何渲染不同类型的内容，并通过使用Django的缓存框架缓存内容来提高应用程序的性能。
- en: Additional resources
  id: totrans-299
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他资源
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 以下资源提供了与本章涵盖主题相关的额外信息：
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13)'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章源代码：[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13)
- en: 'Django mixins documentation: [https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/](https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/)'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django混入文档：[https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/](https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/)
- en: 'Neapolitan package to create CRUD views: [https://github.com/carltongibson/neapolitan](https://github.com/carltongibson/neapolitan)'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Neapolitan包用于创建CRUD视图：[https://github.com/carltongibson/neapolitan](https://github.com/carltongibson/neapolitan)
- en: 'Creating custom permissions: [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions)'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义权限：[https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions)
- en: 'Django formsets: [https://docs.djangoproject.com/en/5.0/topics/forms/formsets/](https://docs.djangoproject.com/en/5.0/topics/forms/formsets/)'
  id: totrans-305
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django表单集：[https://docs.djangoproject.com/en/5.0/topics/forms/formsets/](https://docs.djangoproject.com/en/5.0/topics/forms/formsets/)
- en: 'Django model formsets: [https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets](https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets)'
  id: totrans-306
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django模型表单集：[https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets](https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets)
- en: 'HTML5 Drag and Drop API: [https://www.w3schools.com/html/html5_draganddrop.asp](https://www.w3schools.com/html/html5_draganddrop.asp)'
  id: totrans-307
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 拖放 API：[https://www.w3schools.com/html/html5_draganddrop.asp](https://www.w3schools.com/html/html5_draganddrop.asp)
- en: 'HTML5 Sortable library documentation: [https://github.com/lukasoppermann/html5sortable](https://github.com/lukasoppermann/html5sortable)'
  id: totrans-308
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 可排序库文档：[https://github.com/lukasoppermann/html5sortable](https://github.com/lukasoppermann/html5sortable)
- en: 'HTML5 Sortable library examples: [https://lukasoppermann.github.io/html5sortable](https://lukasoppermann.github.io/html5sortable)/'
  id: totrans-309
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML5 可排序库示例：[https://lukasoppermann.github.io/html5sortable](https://lukasoppermann.github.io/html5sortable)/
- en: '`django-braces` documentation: [https://django-braces.readthedocs.io/](https://django-braces.readthedocs.io/)'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-braces` 文档：[https://django-braces.readthedocs.io/](https://django-braces.readthedocs.io/)'
