- en: Chapter 3. Using Templates in Our Headlines Project
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。在我们的头条项目中使用模板
- en: 'In the last chapter, we saw one way of combining static HTML with dynamic content
    for creating a web page. But it''s messy, and we don''t want to hack away at Python
    strings for building our web pages. Mixing HTML and Python is not ideal for a
    few reasons: for one, it means if we ever want to change static text, such as
    that which appears in our headings, we have to edit our Python files, which also
    involves reloading these files into Apache. If we hire frontend developers to
    work on HTML, we run the risk of them breaking the unfamiliar Python code by mistake,
    and it''s far more difficult to structure any other frontend code such as JavaScript
    and CSS correctly. Ideally, we should aim for complete segregation between the
    frontend and backend components. We can achieve this to a large extent using Jinja,
    but as with most aspects of life, some compromise will be necessary.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们看到了一种将静态HTML与动态内容结合起来创建网页的方法。但这很混乱，我们不想在Python字符串中构建我们的网页。混合HTML和Python并不理想，原因有几个：首先，这意味着如果我们想要更改静态文本，比如出现在标题中的文本，我们必须编辑我们的Python文件，这也涉及重新加载这些文件到Apache。如果我们雇佣前端开发人员来处理HTML，他们有可能会不小心破坏陌生的Python代码，并且更难以正确地构建任何其他前端代码，比如JavaScript和CSS。理想情况下，我们应该在前端和后端组件之间实现完全的隔离。我们可以在很大程度上使用Jinja来实现这一点，但与生活的大多数方面一样，一些妥协是必要的。
- en: 'By the end of this chapter, we''ll have extended our application to display
    more than a single headline for the chosen publication. We''ll display several
    articles for each publication, each one having a link to the original article,
    and our logic and view components will largely be separated. In this chapter,
    we''ll cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，我们将扩展我们的应用程序，以显示所选出版物的不止一个头条新闻。我们将为每个出版物显示多篇文章，每篇文章都有一个指向原始文章的链接，我们的逻辑和视图组件将在很大程度上分离。在本章中，我们将涵盖以下主题：
- en: Introducing Jinja
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Jinja
- en: Basic use of Jinja templates
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jinja模板的基本用法
- en: Advanced use of Jinja templates
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Jinja模板的高级用法
- en: Introducing Jinja
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Jinja
- en: Jinja is a Python template engine. It allows us to easily define dynamic blocks
    of HTML which are populated by Python. HTML templates are useful even for static
    websites which have multiple pages. Usually, there are some common elements, such
    as headers and footers, on every page. Although it is possible to maintain each
    page individually for static websites, this requires that a single change be made
    in multiple places if the change is made to a shared section. Flask was built
    on top of Jinja, so although it is possible to use Jinja without Flask, Jinja
    is still an inherent part of Flask, and Flask provides several methods to work
    directly with Jinja. Generally, Flask assumes nothing about the structure of your
    application except what you tell it, and prefers providing functionality through
    optional plugins. Jinja is somewhat of an exception to this. Flask gives you Jinja
    by default, and assumes that you store all your Jinja templates in a subdirectory
    of your application named `templates`.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Jinja是一个Python模板引擎。它允许我们轻松地定义由Python填充的动态HTML块。HTML模板即使对于具有多个页面的静态网站也是有用的。通常，每个页面都有一些共同的元素，比如标题和页脚。虽然对于静态网站来说，可以维护每个页面，但如果对共享部分进行更改，则需要在多个位置进行单个更改。Flask是建立在Jinja之上的，因此虽然可以在没有Flask的情况下使用Jinja，但Jinja仍然是Flask的固有部分，并且Flask提供了几种直接与Jinja一起工作的方法。一般来说，Flask对于应用程序的结构假设没有任何东西，除了你告诉它的内容，并且更喜欢通过可选插件提供功能。Jinja在某种程度上是一个例外。Flask默认为您提供Jinja，并假设您将所有Jinja模板存储在名为`templates`的应用程序子目录中。
- en: Once we've created templates, we'll make calls from our Flask app to render
    these templates. Rendering involves parsing the Jinja code, inserting any dynamic
    data, and creating pure HTML to be returned to a user's browser. All of this is
    done behind the scenes though, so it can get a bit confusing as to what is being
    done where. We'll take things one step at a time.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 创建模板后，我们将从我们的Flask应用程序中调用渲染这些模板。渲染涉及解析Jinja代码，插入任何动态数据，并创建纯HTML以返回给用户的浏览器。尽管所有这些都是在幕后完成的，但可能会让人有点困惑，不知道在哪里完成了什么。我们将一步一步地进行。
- en: Basic use of Jinja templates
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jinja模板的基本用法
- en: The first step to using Jinja templates is creating a directory in our application
    to contain our template files, so navigate to your `headlines` directory, and
    create a directory called `templates`. Unlike the previous steps, this name is
    expected by other parts of the application and is case sensitive, so take care
    while creating it. At the most basic level, a Jinja template can just be an HTML
    file, and we'll use the `.html` extension for all our Jinja templates. Create
    a new file in the `templates` directory called `home.html`. This will be the page
    that our users see when visiting our application, and will contain all the HTML
    that we previously had in a Python string.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Jinja模板的第一步是在我们的应用程序中创建一个目录来包含我们的模板文件，所以导航到您的`headlines`目录，并创建一个名为`templates`的目录。与之前的步骤不同，这个名称是应用程序的其他部分所期望的，并且区分大小写，因此在创建时要小心。在最基本的级别上，Jinja模板可以只是一个HTML文件，我们将为所有的Jinja模板使用`.html`扩展名。在`templates`目录中创建一个名为`home.html`的新文件。这将是我们的用户访问我们的应用程序时看到的页面，并且将包含我们以前在Python字符串中的所有HTML。
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We'll only be using Jinja to build HTML files in this book, but Jinja is flexible
    enough for use in generating any text-based format. Although we use the `.html`
    extension for our Jinja templates, the files themselves will not always be pure
    HTML.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们只会使用Jinja来构建HTML文件，但Jinja足够灵活，可以用于生成任何基于文本的格式。虽然我们使用`.html`扩展名来命名我们的Jinja模板，但这些文件本身并不总是纯HTML。
- en: For now, put the following static HTML code into this file. We'll look at how
    to pass dynamic data between Python and our templates in the next step.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下静态HTML代码放入此文件中。我们将在下一步中看如何在Python和我们的模板之间传递动态数据。
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now in our Python code, instead of building up the string and returning that
    in our routing function, we''ll render this template and return it. In `headlines.py`,
    add an import at the top:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在我们的Python代码中，我们将渲染这个模板并返回它，而不是在我们的路由函数中构建字符串并返回它。在`headlines.py`中，在顶部添加一个导入：
- en: '[PRE1]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `render_template` function is the magic which takes a Jinja template as
    input and produces pure HTML, capable of being read by any browser, as the output.
    For now, some of the magic is lost, as we'll give it pure HTML as input and view
    the same as output in our browser.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`render_template`函数是一个魔术，它以Jinja模板作为输入，并产生纯HTML作为输出，可以被任何浏览器读取。目前，一些魔术已经失去了，因为我们将纯HTML作为输入，并在浏览器中查看相同的输出。'
- en: Rendering a basic template
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渲染基本模板
- en: In your `get_news()` function, remove the `return` statement, which contains
    our triple-quoted HTML string as well. Leave the previous lines which grab the
    data from `feedparser`, as we'll be using that again soon.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的`get_news()`函数中，删除包含我们三引号HTML字符串的`return`语句。保留之前从`feedparser`获取数据的行，因为我们很快会再次使用它。
- en: 'Update the `return` statement, so that the `get_news()` function now looks
    as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`return`语句，使得`get_news()`函数现在如下所示：
- en: '[PRE2]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Although our current HTML file is pure HTML and not yet using any of the Jinja
    syntax that we'll see later, we're actually already doing quite a bit of magic.
    This call looks in our `templates` directory for a file named `home.html`, reads
    this, parses any Jinja logic, and creates an HTML string to return to the user.
    Once you've made both the preceding changes, run your application again with `python
    headlines.py`, and navigate to `localhost:5000` in your browser.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们当前的HTML文件是纯HTML，还没有使用我们稍后将看到的Jinja语法，但实际上我们已经做了相当多的魔术。这个调用在我们的`templates`目录中查找名为`home.html`的文件，读取它，解析任何Jinja逻辑，并创建一个HTML字符串返回给用户。一旦你做了以上两个更改，再次用`python
    headlines.py`运行你的应用程序，并在浏览器中导航到`localhost:5000`。
- en: 'Again, we''ve gone a step backwards in order to advance. If you run the app
    and view the result in your browser now, you should see something similar to our
    original page, except that instead of the real news data, you''ll just see the
    strings **title**, **published**, and **summary** as seen in the following image:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们为了前进而后退了一步。如果你现在运行应用程序并在浏览器中查看结果，你应该会看到与我们原始页面类似的东西，只是现在你会看到字符串**title**，**published**和**summary**，如下图所示：
- en: '![Rendering a basic template](img/B04312_03_01.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![渲染基本模板](img/B04312_03_01.jpg)'
- en: Let's take a look at how to populate these fields inside our `render_template`
    call so that we can see real news content again.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在`render_template`调用中填充这些字段，以便我们可以再次看到真实的新闻内容。
- en: Passing dynamic data to our template
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将动态数据传递给我们的模板
- en: 'First, in our Python file, we''ll pass each of these as named variables. Update
    the `get_news()` function again, and pass all the data that you need to display
    to the user as arguments to `render_template()`, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的Python文件中，我们将把每个作为命名变量传递。再次更新`get_news()`函数，并将所有需要显示给用户的数据作为参数传递给`render_template()`，如下所示：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `render_template` function takes the filename of the template as its first
    argument, and can then take an arbitrary number of named variables as subsequent
    arguments. The data in each of these variables will be available to the template,
    using the variable name.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`render_template`函数以模板的文件名作为第一个参数，然后可以接受任意数量的命名变量作为后续参数。每个变量中的数据将在模板中使用变量名可用。'
- en: Displaying dynamic data in our template
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在我们的模板中显示动态数据
- en: 'In our `home.html` file, we simply need to put two braces on either side of
    our placeholders. Change it to look like the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的`home.html`文件中，我们只需要在占位符的两侧放上两个大括号。更改后的样子如下：
- en: '[PRE4]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Double braces, {{ }}, indicate to Jinja that anything inside them should not
    be taken as literal HTML code. Because our *placeholders*, *title*, *published*,
    and *summary*, are the same as our Python variable names passed into the `render_template`
    call, just adding the surrounding braces means that the `render_template` call
    will substitute these for the real data, returning a pure HTML page. Try it out
    to make sure that we can see real news data again, as seen in the following image:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 双大括号，{{ }}, 表示对Jinja来说，它们内部的任何内容都不应被视为字面HTML代码。因为我们的*占位符*，*title*，*published*和*summary*与我们传递给`render_template`调用的Python变量名相同，只需添加周围的大括号，`render_template`调用将用真实数据替换这些，返回一个纯HTML页面。试一下，确保我们可以再次看到真实的新闻数据，如下图所示：
- en: '![Displaying dynamic data in our template](img/B04312_03_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![在我们的模板中显示动态数据](img/B04312_03_02.jpg)'
- en: Advanced use of Jinja templates
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jinja模板的高级用法
- en: Now we have perfect separation of our backend and frontend components, but our
    application doesn't do anything more than it did before. Let's take a look at
    how to display multiple news articles from a selected publication. We don't want
    to add three new arguments to our `render_template` call for each article (or
    dozens of additional arguments if we ever decide that we want to display more
    than just the title, date, and summary of an article).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们完全分离了后端和前端组件，但我们的应用程序并没有比以前做更多的事情。让我们看看如何从所选出版物中显示多个新闻文章。我们不想为每篇文章的`render_template`调用添加三个新参数（或者如果我们决定要显示的不仅仅是文章的标题、日期和摘要，那么可能会添加几十个额外的参数）。
- en: 'Fortunately, Jinja can take over some of the logic from Python. This is where
    we have to be careful: we spent all that effort to separate our logic and view
    components, and when we discover how powerful the Jinja language actually is,
    it''s tempting to move a lot of the logic into our template files. This would
    leave us back where we started with code that is difficult to maintain. However,
    in some cases it''s necessary for our frontend code to handle some logic, such
    as now where we don''t want to pollute our backend code with too many repeated
    arguments.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Jinja可以接管Python的一些逻辑。这就是我们需要小心的地方：我们花了很多精力来分离逻辑和视图组件，当我们发现Jinja语言实际上有多么强大时，很容易将大部分逻辑移到我们的模板文件中。这将使我们回到最初的状态，代码难以维护。然而，在某些情况下，我们的前端代码需要处理一些逻辑，比如现在我们不想用太多重复的参数来污染我们的后端代码。
- en: Using Jinja objects
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Jinja对象
- en: The first thing to learn is how Jinja handles objects. All of the basic Python
    data structures, such as variables, objects, lists, and dictionaries, can be understood
    by Jinja and can be processed in a very similar way to what we are used to in
    Python. For example, instead of passing each of the three components of our article
    separately to our template, we could have passed in the `first_article` object
    and dealt with the separation in Jinja. Let's see how to do that. Change the Python
    code to pass in a single-named argument to `render_template`, that is `first_article`,
    and the frontend code to grab the bits we need from this.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要学习的是Jinja如何处理对象。所有基本的Python数据结构，如变量、对象、列表和字典，Jinja都能理解，并且可以以与Python非常相似的方式进行处理。例如，我们可以将`first_article`对象传递给模板，而不是将文章的三个组件分别传递给模板，然后在Jinja中处理分离。让我们看看如何做到这一点。将Python代码更改为向`render_template`传递单个命名参数，即`first_article`，并将前端代码更改为从中提取所需的部分。
- en: 'The `render_template` call should now look like this:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`render_template`调用现在应该是这样的：'
- en: '[PRE5]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The template now has a reference called `article`, which we can use to get
    the same result as before. Change the relevant part of the home.html to read as
    follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 模板现在有一个名为`article`的引用，我们可以使用它来获得与之前相同的结果。更改home.html中相关部分如下：
- en: '[PRE6]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that accessing items from a dictionary is slightly different in Jinja as
    compared to Python. We use a full stop to access properties, so to access the
    title of the article, we use `{{article.title}}` as in the preceding example,
    instead of the Python equivalent `article["title"]` or `article.get("title")`.
    Our code is again neater, but yet again has no additional functionality.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在Jinja中访问字典中的项与Python中略有不同。我们使用句点来访问属性，因此要访问文章的标题，我们使用`{{article.title}}`，而不是Python中的`article["title"]`或`article.get("title")`。我们的代码再次更整洁，但没有额外的功能。
- en: Adding looping logic to our template
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的模板添加循环逻辑
- en: 'Without much extra effort, we can make the whole list of articles available
    to Jinja. In the Python code, change the `render_template` call to read as follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎没有额外的努力，我们可以使所有文章列表可用于Jinja。在Python代码中，更改`render_template`调用如下：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You can remove the line directly above the preceding one in the code which defines
    the `first_article` variable, as we won't need it any more. Our template now has
    access to the full list of articles that we fetch through `feedparser`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以删除代码中直接在前一行上定义`first_article`变量的行，因为我们不再需要它。我们的模板现在可以访问我们通过`feedparser`获取的完整文章列表。
- en: In our Jinja template, we could now `add {{articles}}` or `{{articles[0]}}`
    to see a full dump of all the information we're now passing, or just a dump of
    the first article respectively. You can try this as an intermediate step if you're
    curious, but in our next step we'll be looping through all the articles and displaying
    the information we want.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Jinja模板中，我们现在可以`添加{{articles}}`或`{{articles[0]}}`来查看我们现在传递的所有信息的完整转储，或者仅查看第一篇文章的转储。如果您感兴趣，可以尝试这个中间步骤，但在下一步中，我们将循环遍历所有文章并显示我们想要的信息。
- en: 'By giving our template more data to work with, we''re passing along some of
    the logic responsibility that should ideally be handled by our Python code, but
    we can also deal with this very cleanly in Jinja. Similar to the way we use double
    braces, `{{` `}}`, to indicate variables, we use the brace and percentage combination,
    `{% %}`, to indicate control logic. This will be clearer by looking at an example.
    Change the `<body>` part of the template code to read as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向模板提供更多数据，我们传递了一些理想情况下应该由Python代码处理的逻辑责任，但我们也可以在Jinja中处理得非常干净。类似于我们使用双大括号`{{`
    `}}`表示变量的方式，我们使用大括号和百分号的组合`{% %}`表示控制逻辑。通过示例来看会更清楚。更改模板代码中的`<body>`部分如下：
- en: '[PRE8]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can see that the Jinja for loop is similar to Python. It loops through the
    *articles* list that we've passed in from the Python code, and creates a new variable,
    `article`, for each iteration of the loop, each time referring to the next item
    in the list. The `article` variable can then be used like any other Jinja variable
    (using the double braces). Because whitespace in Jinja is irrelevant, unlike Python,
    we must define where our loop ends with the `{% endfor %}` line. Finally, the
    `<hr />` in HTML creates a horizontal line which acts as a separator between each
    article.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到Jinja的for循环与Python类似。它循环遍历我们从Python代码传递进来的*articles*列表，并为循环的每次迭代创建一个新变量`article`，每次引用列表中的下一个项目。然后可以像其他Jinja变量一样使用`article`变量（使用双大括号）。因为Jinja中的空格是无关紧要的，不像Python，我们必须用`{%
    endfor %}`行定义循环的结束位置。最后，在HTML中的`<hr />`创建一个作为每篇文章之间分隔符的水平线。
- en: 'Run the application locally with the new template file, and view the results
    in your browser. You should see something similar to the following image:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 使用新的模板文件在本地运行应用程序，并在浏览器中查看结果。您应该看到类似以下图片的东西：
- en: '![Adding looping logic to our template](img/B04312_03_03.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的模板添加循环逻辑](img/B04312_03_03.jpg)'
- en: Adding hyperlinks to our template
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向我们的模板添加超链接
- en: Now we want to link each headline to the original article. Our user will probably
    find this useful—if a headline seems interesting, he or she can easily get to
    the full text of the article to read it. The owner of the RSS feed will also often
    require or request that anyone who uses the feed links back to the original articles.
    (Again, check for terms and conditions as published along with most big feeds.)
    Because we're passing the whole `article` object to our template already, we won't
    need to make any further changes to our Python code to achieve this; we simply
    need to make use of the extra data already available to us.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们想要将每个标题链接到原始文章。我们的用户可能会发现这很有用 - 如果一个标题看起来有趣，他或她可以轻松地获取文章的全文来阅读。RSS订阅的所有者通常也会要求或要求使用该订阅的任何人链接回原始文章。（再次检查大多数大型订阅发布的条款和条件。）因为我们已经将整个“article”对象传递给我们的模板，所以我们不需要对我们的Python代码进行进一步的更改来实现这一点；我们只需要利用我们已经可用的额外数据。
- en: 'In the template file, search for the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板文件中，搜索以下内容：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Change this line to the following:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将此行更改为以下内容：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'If you''re new to HTML, then there''s quite a bit going on here. Let''s pull
    it apart: the `<a>` tag in HTML indicates a hyperlink (usually displayed by default
    as blue and underlined in most browsers), the `href` attribute specifies the destination
    or URL of the link, and the link ends with the `</a>` tag. That is, any text between
    `<a>` and `</a>` will be clickable, and will be displayed differently by our user''s
    browser. Note that we can use the double braces to indicate a variable even within
    the double quotation marks used to define the destination attribute.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对HTML不熟悉，那么这里有很多事情要做。让我们分解一下：HTML中的“<a>”标签表示超链接（通常在大多数浏览器中默认显示为蓝色并带有下划线），“href”属性指定链接的目的地或URL，并且链接以“</a>”标签结束。也就是说，“<a>”和“</a>”之间的任何文本都将是可点击的，并且将由我们用户的浏览器以不同的方式显示。请注意，我们可以在双引号中使用双大括号来指示变量，即使在用于定义目标属性的双引号内也可以。
- en: If you refresh the page in your browser, you should now see the headlines as
    bold links, as in the following image, and clicking on one of the links should
    take you to the original article.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中刷新页面，现在应该看到标题是粗体链接，如下图所示，并且点击其中一个链接应该会带您到原始文章。
- en: '![Adding hyperlinks to our template](img/B04312_03_04.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![向我们的模板添加超链接](img/B04312_03_04.jpg)'
- en: Pushing our code to the server
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将我们的代码推送到服务器
- en: 'Now is a good time to push the code to our VPS. This is the last time we''ll
    break down the steps of how to do this, but hopefully, you''d be familiar enough
    with Git and Apache by now that there won''t be anything unexpected. On your local
    machine, from the `headlines` directory, run:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是将代码推送到我们的VPS的好时机。这是我们将分解如何做这件事的最后一次，但希望你现在对Git和Apache已经很熟悉，不会有任何意外发生。在本地机器上，从“headlines”目录运行：
- en: '[PRE11]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And on your VPS (SSH into it as usual), change to the appropriate directory,
    pull the updates from the Git repository, and restart Apache to reload the code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在您的VPS上（像往常一样通过SSH登录），切换到适当的目录，从Git存储库中拉取更新，并重新启动Apache以重新加载代码：
- en: '[PRE12]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Make sure everything has worked by visiting the IP address of your VPS from
    the web browser on your local machine and checking that you see the same output
    that we saw locally, as seen in the following image:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 确保一切都已经通过从本地机器的网络浏览器访问VPS的IP地址并检查是否看到与我们在本地看到的相同的输出来运行，如下图所示：
- en: '![Pushing our code to the server](img/B04312_03_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![将我们的代码推送到服务器](img/B04312_03_05.jpg)'
- en: Summary
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We now have a basic news summary site! You can display recent news from a number
    of different websites, see the headline, date, and summary for each recent article,
    and can click on any headline to visit the original article. You've only seen
    a tiny sample of the power of the Jinja language though—as we expand this project
    and other projects in future chapters, you'll see how it can be used for inheritance,
    conditional statements, and more.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一个基本的新闻摘要网站！您可以从许多不同的网站显示最近的新闻，查看每篇最近文章的标题，日期和摘要，并且可以点击任何标题访问原始文章。不过，您只看到了Jinja语言的一小部分功能
    - 随着我们扩展这个项目和将来章节中的其他项目，您将看到它如何用于继承、条件语句等等。
- en: In the next chapter, we'll add weather and currency information to our application,
    and look at ways to interact with our users.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向我们的应用程序添加天气和货币信息，并探讨与用户互动的方式。
