- en: Chapter 8. Talking to Bots
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. 与机器人对话
- en: Wow, bots?! Really? Will I learn to build bots for fun or my business use case?
    Yes, of course this chapter takes you to the brand new world of bots with Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 哇，机器人？！真的吗？我会学习如何为娱乐或商业用途构建机器人吗？当然，本章将带你进入使用Python的全新机器人世界。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Building a moody Telegram bot
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个情绪化的Telegram机器人
- en: 'Different types of bots: stateless, stateful, and smart'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同类型的机器人：无状态、有状态和智能型
- en: A smart bot with artificial intelligence
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 拥有人工智能的智能机器人
- en: Automating business processes with bots
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用机器人自动化业务流程
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引言
- en: The last couple of decades have been an age of digital transformation and automation.
    Most businesses today prefer an online sales model rather than the traditional
    brick-and-mortar way of selling products.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 过去的几十年是数字转型和自动化的时代。如今，大多数企业更倾向于选择线上销售模式，而不是传统的实体销售方式。
- en: Websites have not only helped companies increase their reach, but have also
    made it cheaper (no fixed costs such as rentals) for them to sell their products.
    A responsive **graphical user interface** (**GUI**), combined with the power of
    real-time technologies, has made the process of selling easier; now executives
    can just chat with potential customers and guide them to buy products, increasing
    conversions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 网站不仅帮助公司扩大了其影响力，还降低了他们销售产品的成本（没有固定的成本，如租金）。一个响应式的**图形用户界面**（**GUI**），结合实时技术的力量，使得销售过程变得更加容易；现在高管们可以直接与潜在客户聊天，并引导他们购买产品，从而提高转化率。
- en: With advancements in **artificial intelligence** (**AI**) and language processing
    techniques, businesses are slowly but steadily adopting conversational interfaces
    to automate their processes. A conversational user interface refers to an interface
    that has free-form text for natural languages. With conversational interfaces
    and natural language processing techniques, businesses feel that a machine can
    respond to certain customer queries by analyzing the context. These machines,
    in today's world, are referred to as **chatbots**.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 随着人工智能（**AI**）和语言处理技术的进步，企业正在缓慢但稳步地采用对话界面来自动化他们的业务流程。对话用户界面是指具有自由文本的自然语言界面。通过对话界面和自然语言处理技术，企业认为机器可以通过分析上下文来响应某些客户查询。在当今世界，这些机器被称为**聊天机器人**。
- en: In this chapter, you will learn about the different types of bots, look at how
    to develop simple chatbots, and learn about how bots can be used to automate business
    processes. Also, note that when we refer to bots in this chapter, we're talking
    about chatbots or text-based bots.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将了解不同类型的机器人，学习如何开发简单的聊天机器人，以及了解机器人如何用于自动化业务流程。此外，请注意，在本章中提到机器人时，我们指的是聊天机器人或基于文本的机器人。
- en: What are bots?
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人是什么？
- en: OK, let's take a simple example. Say you want to order a pizza from **Pizza
    Hut** for an evening get-together with friends this coming weekend. Usually, you'd
    go to the Pizza Hut website, spend time looking for a certain type of pizza or
    that particular topping you like, and place an order. More often than not, you
    already know what you want to order; then the question really is, why take the
    pain to look for it on the Pizza Hut website?
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们来看一个简单的例子。假设你想要在下个周末和朋友们的聚会上订购必胜客的披萨。通常情况下，你会去必胜客的网站，花时间寻找你喜欢的某种披萨或特定的配料，然后下单。很多时候，你其实已经知道你想要订购什么；那么真正的问题其实是，为什么还要在必胜客网站上费劲去找呢？
- en: Worry no more! Just log in to **Facebook** and use the Facebook Messenger chatbot
    to buy what you need from Pizza Hut. Not just this, the chatbot will also keep
    you posted on the latest offers and updates from Pizza Hut. So a chatbot can give
    you the same experience of visiting a website from your favorite social networking
    platform. Look at [http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/](http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/)
    for the announcement [Pizza Hut](http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/) made
    regarding collaborating with Facebook Messenger.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 别再担心了！只需登录**Facebook**并使用Facebook Messenger聊天机器人从必胜客购买你需要的东西。不仅如此，聊天机器人还会告诉你必胜客的最新优惠和更新。所以聊天机器人可以给你在最喜欢的社交网络平台上访问网站的同一种体验。看看[http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/](http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/)上的公告，[必胜客](http://blog.pizzahut.com/press-center/pizza-hut-announces-new-social-ordering-platform/)宣布与Facebook
    Messenger合作。
- en: You may say, "Yes, we understand the use case, but what exactly is a chatbot?"
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会说：“是的，我们理解了使用场景，但聊天机器人到底是什么？”
- en: A chatbot is a service powered by rules and AI that you, as a customer, interact
    with via a chat (text) interface. Bots carry out semi-intelligent or mundane tasks
    and run them as software applications. Chatbots can provide you with multiple
    services and can run on social platforms such as **Facebook**, **Telegram**, **Slack**,
    and many more. Chatbots are still in active research and are an emerging computer
    science field.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 聊天机器人是由规则和人工智能驱动的服务，作为客户，你可以通过聊天（文本）界面与之互动。机器人执行半智能或日常任务，并以软件应用的形式运行。聊天机器人可以提供多种服务，并且可以在**Facebook**、**Telegram**、**Slack**等社交平台上运行。聊天机器人仍在积极研究中，是一个新兴的计算机科学领域。
- en: How do bots work?
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器人是如何工作的？
- en: 'Based on what we have discussed so far, you might be thinking, "How these bots
    function? How do they understand human words or sentiments? How do they understand
    the context?" So here''s the answer. There are typically two types of chatbots:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我们迄今为止的讨论，你可能正在想：“这些机器人是如何工作的？它们如何理解人类的语言或情感？它们如何理解上下文？”那么，这就是答案。通常有两种类型的聊天机器人：
- en: '**Bots that work on a rule engine**: This type of bot understands certain words
    or commands (so to speak) and has very limited behavior. It is pretty straightforward:
    if *x* is the input, then *y* should be the output. They''re very useful in cases
    where there are fixed sets of questions or when questions act as queries. For
    example, the CNN chatbot helps you get the top stories for that moment, and furthermore,
    you have the luxury of asking the bot about the top stories on certain topics,
    such as **politics** or **business**. (Great! Then why should I even go to the
    CNN website?) Look at some of the screenshots that I took from my Facebook Messenger
    app regarding my interaction with the CNN chatbot. The first screen asks you to
    click on **GET ****STARTED**, and when you do this, the bot takes you to the next
    screen where it gives you an option to look at the top stories:![How do bots work?](img/image_09_0011.jpg)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**基于规则引擎的机器人**：这种类型的机器人理解某些词语或命令（可以说是这样的）并且行为非常有限。它非常直接：如果*x*是输入，那么*y*应该是输出。它们在存在固定问题集或问题作为查询的情况下非常有用。例如，CNN聊天机器人可以帮助你获取那一刻的头条新闻，而且你还可以选择询问有关特定主题（如**政治**或**商业**）的头条新闻。！（太好了！那么我为什么还要去CNN网站呢？）看看我从我的Facebook
    Messenger应用中拍摄的关于我与CNN聊天机器人交互的一些截图。第一个屏幕要求你点击**GET STARTED**，当你这样做时，机器人会带你到下一个屏幕，在那里它给你一个查看头条新闻的选项：![机器人是如何工作的？](img/image_09_0011.jpg)'
- en: 'When you click on **TOP ** **STORIES**, it shows you the **Yahoo!** story and
    asks you whether you''re interested in certain topics, politics for example:'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当你点击**TOP STORIES**时，它会显示**Yahoo**新闻，并询问你是否对某些主题感兴趣，例如**政治**：
- en: '![How do bots work?](img/image_09_0012.jpg)'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![机器人是如何工作的？](img/image_09_0012.jpg)'
- en: '**A smart bot that works on machine learning**: Smart bots use AI and sentiment
    analysis to understand the context of a conversation and respond to language semantics.
    They are hence applicable to sophisticated use cases, such as purchasing products
    or answering customer support queries. What''s more, these bots can learn from
    past interactions. Amazing, isn''t it?'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个基于机器学习的智能机器人**：智能机器人利用人工智能和情感分析来理解对话的上下文，并响应语言语义。因此，它们适用于复杂的使用场景，例如购买产品或回答客户支持查询。更重要的是，这些机器人可以从过去的交互中学习。这不是很神奇吗？'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Sentiment analysis is also referred to as opinion mining and aims at identifying
    and extracting subjective information from the available text and determining
    the emotion of the writer, taking care of the contextual properties of the text.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 情感分析也被称为意见挖掘，旨在从可用的文本中识别和提取主观信息，并确定作者的情绪，同时注意文本的上下文属性。
- en: Why bots now?
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为什么现在要使用机器人？
- en: 'You may ask, "The world has been talking about machine learning for a while
    now and the chat feature has been around a long time now, so why are bots becoming
    so relevant now?" That''s because of the following reasons:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会问，“世界已经谈论机器学习有一段时间了，聊天功能也已经存在很长时间了，那么为什么机器人现在变得如此重要？”这是因为以下原因：
- en: '**Usage patterns**: Companies have figured out that users tend to spend more
    time on chats than on social media platforms or websites. Hence, businesses can
    engage with users in better ways via a chat platform.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用模式**：公司已经发现，用户在聊天平台上花费的时间比在社交媒体平台或网站上更多。因此，企业可以通过聊天平台以更好的方式与用户互动。'
- en: '**Cost-effective**: No need for humans--sounds like no cost at all! Businesses
    are taking advantage of bots to automate processes, such as customer service,
    without human resource investments.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**成本效益**：不需要人力——听起来似乎没有成本！企业正在利用机器人来自动化流程，如客户服务，而不需要人力资源投资。'
- en: '**Scale**: It''s easy to reach out to millions of users through Facebook or
    Telegram, which act as distribution channels for bots. This way, businesses can
    target as many potential customers as possible without looking at the human costs
    involved.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**：通过Facebook或Telegram等作为机器人分发渠道的社交平台，很容易接触到数百万用户。这样，企业可以在不考虑人力成本的情况下，尽可能多地吸引潜在客户。'
- en: '**Efficient technology**: Growth in AI or **Natural Language Processing** (**NLP**)
    has made it even easier to plug algorithms into these bots. Algorithms can, or
    will, mature over time, and they will serve customers even better.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**高效技术**：人工智能或**自然语言处理（NLP**）的增长使得将这些算法插入这些机器人变得更加容易。算法会随着时间的推移而成熟，并将更好地服务于客户。'
- en: OK, great! Now that we understand bots and their utility much better, let's
    get our hands dirty and develop our own bot.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，太棒了！既然我们已经更好地理解了机器人和它们的实用性，那就让我们动手开发自己的机器人吧。
- en: Building a moody Telegram bot
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个情绪化的Telegram机器人
- en: 'Before we start developing a bot, we should be clear about our objectives:
    what is my bot going to do? We take a simple example of creating a bot that would
    respond with an emoji based on the user''s mood. It''s a moody bot for the simple
    reason that it represents the mood of the user. Sounds like an interesting use
    case? Let''s go for it!'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始开发机器人之前，我们应该清楚我们的目标：我的机器人将要做什么？我们以创建一个根据用户情绪返回表情的机器人为例。它之所以被称为情绪化机器人，是因为它代表了用户的情绪。听起来像是一个有趣的用例？让我们试试吧！
- en: 'In this recipe, we shall use the `python-telegram-bot` ([https://github.com/python-telegram-bot/](https://github.com/python-telegram-bot/))
    library to develop a Telegram bot. So, let''s get started by first installing
    the `python-telegram-bot` module with our favorite utility, namely python `pip`:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用`python-telegram-bot` ([https://github.com/python-telegram-bot/](https://github.com/python-telegram-bot/))
    库来开发Telegram机器人。所以，让我们首先使用我们最喜欢的工具，即python `pip`来安装`python-telegram-bot`模块：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We also install the `emoji` ([https://github.com/carpedm20/emoji](https://github.com/carpedm20/emoji))
    library to work with emoji icons so that we can return appropriate expressions
    to the user based on their mood:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还安装了`emoji` ([https://github.com/carpedm20/emoji](https://github.com/carpedm20/emoji))
    库来处理表情符号，这样我们就可以根据用户的情绪返回适当的表达：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Have you installed the modules already? Cool! Let's move ahead.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经安装了模块吗？太酷了！让我们继续前进。
- en: How to do it...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To develop a bot of your own, first download the Telegram app on your mobile.
    Sign up for an account and verify your number. Assuming you have done this, congrats!
    You are one step closer to creating a Telegram bot.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开发自己的机器人，首先在手机上下载Telegram应用。注册一个账户并验证你的手机号码。假设你已经这样做，恭喜你！你离创建一个Telegram机器人又近了一步。
- en: Now, the next thing you need to do to register your bot is to contact another
    bot called **BotFather**. On your Telegram app, search for **BotFather** and click
    on it to start a conversation with it (or him?). This is how it will look:![How
    to do it...](img/image_09_004-1.jpg)
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要做的下一件事是联系另一个名为**BotFather**的机器人。在你的Telegram应用中搜索**BotFather**并点击它，开始与之对话（或他？）。它看起来是这样的：![如何操作...](img/image_09_004-1.jpg)
- en: Once you start the conversation with **BotFather**, follow the steps and use
    commands such as `/newbot` or `/enable` to configure your bot. Follow the steps
    carefully and you'll create a new bot. The following screenshot will guide you
    through the process of creating a new bot:![How to do it...](img/image_09_005-1.jpg)
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你与**BotFather**开始对话，按照步骤操作，并使用如`/newbot`或`/enable`等命令来配置你的机器人。仔细遵循步骤，你将创建一个新的机器人。以下截图将指导你完成创建新机器人的过程：![如何操作...](img/image_09_005-1.jpg)
- en: When you create a new bot, you'll get a token specific to your bot. Keep this
    handy and safe with you; do not share it with anybody. The following screenshot
    shows how **BotFather** works and how the token looks:![How to do it...](img/image_09_006-1.jpg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你创建一个新的机器人时，你会得到一个特定于你的机器人的令牌。请妥善保管并安全地保存它；不要与任何人分享。以下截图显示了**BotFather**的工作方式和令牌的外观：![如何操作...](img/image_09_006-1.jpg)
- en: 'Nice! So you have created your own bot. But the bot is not functional and doesn''t
    do anything spectacular yet. Let''s make it do some cool stuff like we planned
    at the beginning of the recipe. Create a file called `bot.py` and copy the following
    code to it. Also, make sure you change the **token** to your bot''s token ID:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 很好！所以你已经创建了自己的机器人。但机器人目前还没有功能，也没有做什么引人注目的东西。让我们按照菜谱开头计划的那样，让它做一些酷的事情。创建一个名为`bot.py`的文件，并将以下代码复制到其中。同时，确保将**令牌**更改为你的机器人令牌ID：
- en: '[PRE2]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'OK, cool! We have now added the required functionality to our bot and we expect
    it to run well. But how do we test it? First, run the Python file with the following
    command:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，太棒了！我们现在已经为我们机器人添加了所需的功能，并期待它能良好运行。但我们如何测试它呢？首先，使用以下命令运行Python文件：
- en: '[PRE3]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: We then search for our bot and start a conversation with it. In my case, the
    bot is called **Chetbot**, and I started a conversation with it using the standard
    `/start` command:![How to do it...](img/image_09_007-2.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们接下来搜索我们的机器人，并与之开始对话。在我的情况下，这个机器人叫做**Chetbot**，我使用标准的`/start`命令与之开始了对话：![如何操作...](img/image_09_007-2.jpg)
- en: In the preceding screenshot, when I started the conversation with my bot, it
    asked me about my mood for the day and gave me three options. The three options
    were **Happy**, **Whatever**, and **Sad**.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的截图中，当我开始与我的机器人对话时，它询问我当天的情绪，并给了我三个选项。这三个选项是**快乐**、**随便**和**悲伤**。
- en: That's neat! But what happens when I click on one of these options? Voila! It
    returns me my mood for the day with an emoticon. Awesome!![How to do it...](img/image_09_008-1.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真不错！但当我点击这些选项之一时会发生什么？哇！它会返回我当天的情绪表情符号。太棒了！！[如何操作...](img/image_09_008-1.jpg)
- en: Observe that if I have to start the conversation again, I would need to reenter
    the `/start` command to converse with the bot. In the following screenshot, the
    bot recognizes the start command and asks me my mood again. Neat, huh?![How to
    do it...](img/image_09_009-2.jpg)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注意，如果我需要再次开始对话，我需要重新输入`/start`命令来与机器人交谈。在以下截图中，机器人识别了启动命令，并再次询问我的情绪。不错，对吧？![如何操作...](img/image_09_009-2.jpg)
- en: How it works...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `python-telegram-bot` module works on standard event-driven philosophy.
    A bot can be considered as a single-threaded event loop, which keeps polling for
    events. An event loop is also registered with command handlers, also referred
    to as dispatchers. As soon as an event gets triggered, a callback handles the
    event and returns the desired response to the user.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`python-telegram-bot`模块基于标准的事件驱动哲学。一个机器人可以被视为一个单线程的事件循环，它持续轮询事件。事件循环也与命令处理器（也称为分发器）注册。一旦事件被触发，回调就会处理事件并返回给用户期望的响应。'
- en: 'In the preceding code snippet, we registered two command handlers: `start()`
    and `help()`. The `start()` method gets called when a user starts the conversation
    with the bot (the `/start` command) or asks for help (the `/help` command).'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们注册了两个命令处理器：`start()`和`help()`。当用户与机器人开始对话（`/start`命令）或请求帮助（`/help`命令）时，会调用`start()`方法。
- en: We have also added a callback query handler with `button()` as the callback
    method; this gets invoked when the user responds to the bot's options.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个带有`button()`作为回调方法的回调查询处理器；当用户对机器人的选项做出响应时，它会调用这个方法。
- en: 'So, initially, the bot is running, waiting for an input. When a user says `/start`,
    the request is dispatched to the `start()` method, which in turn asks the user
    **Hey there! How do you feel today?** and presents an inline keyboard with three
    options: **Happy**, **Whatever**, or **Sad**.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最初，机器人正在运行，等待输入。当用户说`/start`时，请求会被分发到`start()`方法，该方法反过来会询问用户**嗨，你今天感觉怎么样？**并展示一个内联键盘，有三个选项：**快乐**、**随便**或**悲伤**。
- en: When the user selects either of the options, an event gets generated, which
    is handled by the callback method `button()`. The callback has preloaded data
    that acts according to the option that is chosen. Based on the choice made by
    the user, the bot sends back the right emotion to the user. Emoticons are retuned
    to the user with the help of the `emoji` library that has all the expressions
    implemented.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户选择任何一个选项时，会生成一个事件，该事件由`button()`回调方法处理。回调方法预先加载了数据，根据选择的选项进行操作。根据用户的选择，机器人会向用户发送正确的情绪。通过包含所有表情的`emoji`库，表情符号被发送回用户。
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Cool! Have you created your own bot already? Can you think of other simple examples
    where Telegram bots will be useful? There are many Python modules using which
    you can develop bots with Telegram, such as `telepot` ([https://github.com/nickoala/telepot](https://github.com/nickoala/telepot))
    or `twx.botapi` ([https://github.com/datamachine/twx.botapi](https://github.com/datamachine/twx.botapi));
    both are good. You can use either one of them to get your bot up and running.
    Why not try them and see what they have to offer?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！你已经创建了自己的机器人了吗？你能想到其他简单的例子，说明Telegram机器人会有用吗？有很多Python模块可以用来开发Telegram机器人，例如`telepot`([https://github.com/nickoala/telepot](https://github.com/nickoala/telepot))或`twx.botapi`([https://github.com/datamachine/twx.botapi](https://github.com/datamachine/twx.botapi))；两者都很好。你可以使用其中任何一个来让你的机器人启动并运行。为什么不试试看它们能提供什么？
- en: Different types of bots
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不同的机器人类型
- en: Taking confidence from having built a bot ourselves, let's take a step forward
    and look at how bots can be classified.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 从我们自己构建机器人的自信中汲取力量，让我们更进一步，看看机器人可以如何分类。
- en: The bot we developed in the last recipe can be tagged unintelligent. By unintelligent,
    I mean it questioned the user, and based on the option, responded with an emoji.
    But when the user says `/start` again, the bot asked the same question. Not helpful,
    is it?
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中我们开发的机器人可能被标记为不智能。这里的“不智能”是指它会质疑用户，并根据选项以表情符号的形式做出回应。但是当用户再次输入`/start`时，机器人会提出同样的问题。这有帮助吗？
- en: How about a scenario where the bot would remember your previous choice and try
    to motivate you with some nice articles or places you can go to within the city?
    Just to change your mood? How about actually increasing the happiness quotient?
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 那么设想一下这样的场景：机器人会记住你的之前的选项，并尝试通过一些美好的文章或你可以在城市中去的地点来激励你？只是为了改变你的心情？或者实际上提高你的幸福感？
- en: 'To put the preceding discussion in perspective, bots can be classified into three
    different categories based on the implementation:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使前面的讨论更有意义，根据实现方式，机器人可以分为三类：
- en: '**Stateless ****bots**: These can also be referred to as don''t-remember-anything
    bots. They don''t persist information; that is, for them, every interaction is
    a new session, and they treat every question in isolation. For example, a news
    bot can keep returning updates on the latest stories or return the top stories
    in the *politics* category all the time; however, if it doesn''t remember the
    state of the conversation, it will be deemed stateless and will not be considered
    useful. Most bots built today come under this category, because of which the value
    offered by them is very limited.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态**机器人：这些也可以被称为“不记得任何东西”的机器人。它们不持续信息；也就是说，对于它们来说，每一次交互都是一个新会话，并且它们会独立处理每一个问题。例如，一个新闻机器人可以持续提供最新故事的更新，或者总是返回政治类别的头条新闻；然而，如果它不记得对话的状态，它将被视为无状态的，并且不会被认为是有用的。大多数今天构建的机器人都属于这一类别，这也是它们提供的价值非常有限的原因。'
- en: '**Stateful ****bots**: We discussed the news bot in the preceding point. What
    if the news bot remembers the news category of the user''s interest and accordingly
    recommends more stories from the past, which the user may find interesting to
    read? Yeah, now we''re talking business. This way, we keep the user engaged with
    the bot for a longer period of time.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有状态**机器人：我们在前面讨论了新闻机器人。如果新闻机器人能记住用户感兴趣的新闻类别，并据此推荐更多过去的故事，用户可能会觉得有趣，那么我们现在就进入正题了。这样，我们可以让用户与机器人保持更长时间的互动。'
- en: Such bots keep track of the user's identity and also persist information of
    the current and previous sessions. For example, these bots may store the news
    categories searched today and from the past, and can then recommend users news
    feeds that match the searched categories.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种机器人会跟踪用户的身份，并持续记录当前和之前的会话信息。例如，这些机器人可能会存储今天和过去搜索的新闻类别，然后可以推荐与搜索类别匹配的新闻源。
- en: Such bots are useful, but they are not smart; they don't understand context
    and language semantics.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这样的机器人很有用，但它们并不聪明；它们不理解上下文和语言语义。
- en: '**Smart ****bots**: Smart bots have many batteries plugged in. They use machine
    learning, understand language semantics, and can build predictive algorithms based
    on the data they have.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**智能机器人**：智能机器人插入了多个电池。它们使用机器学习，理解语言语义，并可以根据它们拥有的数据构建预测算法。'
- en: Let's take the famous example of diaper and beer. It is said that if you analyze
    the pattern of purchase, there is a high correlation between the purchase of beer
    and that of the diaper, which means a person who buys a diaper more or less definitely
    buys beer. Smart bots can persist data and come up with such patterns that will
    result in meaningful insights into conversations. Let's take another example of
    language semantics. Think about the phrase "*filthy awesome*"; now filthy, means
    dirty and awesome is a very positive word. Smart bots will understand these phrases
    and can comprehend the users' context much better.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 让我们以尿布和啤酒的著名例子为例。据说，如果你分析购买模式，啤酒和尿布的购买之间存在高度相关性，这意味着购买尿布的人或多或少肯定会购买啤酒。智能机器人可以持续数据并找出这样的模式，从而对对话产生有意义的见解。让我们再举一个语言语义的例子。想想看“*脏得要命*”这个短语；现在，脏意味着肮脏，而“要命”是一个非常积极的词。智能机器人将理解这些短语，并能更好地理解用户的上下文。
- en: Based on the preceding categorization, it's up to us to decide what kind of
    bot we need to develop for a particular use case. Smart bots are often needed
    in cases where interaction is far more humane and involved, as in the case of
    customer support, but imagine the productivity gains a business can harness by
    using smart bots.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 根据前面的分类，决定我们为特定用例开发哪种类型的机器人就取决于我们了。在需要远比人类互动更人性化、更复杂的场合，例如客户支持，通常需要智能机器人，但想象一下企业通过使用智能机器人可以获得的效率提升。
- en: A smart bot with artificial intelligence
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 拥有人工智能的智能机器人
- en: With the knowledge of different types of bots in the previous section, let's
    try to write a bot that uses artificial intelligence and sentiment analysis in
    Python. But before that, let's understand both these fields in brief.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中了解了不同类型的机器人之后，让我们尝试编写一个使用Python中的人工智能和情感分析的机器人。但在那之前，让我们简要了解这两个领域。
- en: '**Artificial intelligence** (**AI**) is an area of computer science that emphasizes
    on the creation of machines that can react like humans. Essentially, artificial
    intelligence relates to machines that perceive its context and take an action
    relevant to the content in order to maximize the chances of success. For instance,
    a machine can take decisions based on certain rules and a certain context to maximize
    the results of the decision.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**人工智能**（**AI**）是计算机科学的一个领域，强调创建能够像人类一样反应的机器。本质上，人工智能与能够感知其上下文并采取与内容相关的行动以最大化成功机会的机器相关。例如，机器可以根据某些规则和上下文做出决策，以最大化决策的结果。'
- en: '**Sentiment analysis**, on the other hand, is about identifying and categorizing
    a piece of text to determine whether the opinion or attitude of the person involved
    is positive, neutral, or negative to a product or event. It refers to the use
    of natural language processing algorithms to perform text analysis and extract
    subjective information, or the sentiment, of the content.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '**情感分析**，另一方面，是关于识别和分类一段文本，以确定涉及人员的观点或态度是对产品或事件的正面、中性还是负面。它指的是使用自然语言处理算法进行文本分析并提取内容的主观信息，或情感。'
- en: I think, by now, you must have already started thinking of how AI and sentiment
    analysis can be used in our bots for various needs. In this recipe, let's build
    a smart bot with these technologies.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我想，到现在为止，你一定已经开始思考如何将人工智能和情感分析用于我们的机器人以满足各种需求了。在这个菜谱中，让我们构建一个拥有这些技术的智能机器人。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Smart bots can be built on multiple technologies, such as predictive intelligence,
    AI, NLP, and more; however, it's completely up to you to decide which technology
    you need to use to meet your objectives. Also, bots don't need to be on the Web
    or an app; they can be simple CLI-based bots. A web UI, CLI, or a mobile app can
    be used as a distributor for a bot, but it is not a necessity to build a bot.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 智能机器人可以建立在多种技术之上，如预测智能、人工智能、自然语言处理等；然而，完全取决于你决定使用哪种技术来满足你的目标。此外，机器人不需要在网络上或应用中；它们可以是简单的基于命令行的机器人。一个Web用户界面、命令行界面或移动应用可以用作机器人的分发渠道，但这并不是构建机器人的必要条件。
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To include AI in our bot, we will use a well-known Python module called `aiml`.
    **AIML** stands for **Artificial Intelligence Markup Language**, but it''s essentially
    an XML file. AIML is a form of XML that defines the rules for matching patterns
    and determining responses. So, let''s get started by installing the `aiml` module:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要在我们的机器人中包含人工智能，我们将使用一个名为 `aiml` 的知名 Python 模块。**AIML** 代表 **人工智能标记语言**，但它本质上是一个
    XML 文件。AIML 是一种 XML，它定义了匹配模式和确定响应的规则。因此，让我们开始安装 `aiml` 模块：
- en: '[PRE4]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'As step 1, we start by creating the AIML file. Go to your favorite editor and
    create an AIML file, just like a normal XML file, with the following content:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为第一步，我们首先创建 AIML 文件。前往你喜欢的编辑器并创建一个 AIML 文件，就像一个普通的 XML 文件一样，内容如下：
- en: '[PRE5]'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Next, we create a startup XML file that will load the AIML file; this will
    also load the artificial intelligence we added to the preceding AIML file. Let''s
    call this file `init.xml`:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们创建一个启动 XML 文件，该文件将加载 AIML 文件；这也会加载我们添加到前面 AIML 文件中的人工智能。让我们称这个文件为 `init.xml`：
- en: '[PRE6]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now let''s develop the Python code to run our chatbot. The following code does
    exactly what we need. We call this file `aibot.py`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们开发运行我们的聊天机器人的 Python 代码。以下代码正好是我们需要的。我们称这个文件为 `aibot.py`：
- en: '[PRE7]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: If we run this bot with the `python aibot.py` command, it presents an input
    screen, waiting for a user's input. Look at the following screenshot to see how
    it works:![How to do it...](img/image_09_010-1.jpg)
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们使用 `python aibot.py` 命令运行这个机器人，它会显示一个输入屏幕，等待用户的输入。查看以下截图以了解其工作原理：![如何操作...](img/image_09_010-1.jpg)
- en: How it works...
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The preceding Python code mimics a typical bot built on AI. When we run the
    Python code, `amil.Kernel()` will load the AI kernel.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 上述 Python 代码模拟了一个基于人工智能的典型机器人。当我们运行 Python 代码时，`amil.Kernel()` 将加载 AI 内核。
- en: Once the kernel is loaded, `kernel.learn()` will call the start up `xml` file.
    The AIML rule engine is loaded when the `load aiml b` command is sent to the kernel.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦内核被加载，`kernel.learn()` 将调用启动 `xml` 文件。当向内核发送 `load aiml b` 命令时，AIML 规则引擎被加载。
- en: Once the engine is loaded into the kernel, we are free to chat with the bot.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦引擎被加载到内核中，我们就可以自由地与机器人聊天。
- en: In the preceding screenshot, when we say **hello**, the bot understands it (from
    the `chat.aiml` file) and responds to it with **Hi, hello!**, which is configured
    in `chat.aiml`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的截图中，当我们说 **你好** 时，机器人理解它（来自 `chat.aiml` 文件）并以配置在 `chat.aiml` 中的 **嗨，你好**
    响应。
- en: In the second case, the AI bot matches the pattern `WHO ARE *` when **who are
    you?** is asked by the user; the pattern is again defined in `chat.aiml`.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二种情况下，当用户询问 **你是谁** 时，AI 机器人会匹配 `WHO ARE *` 模式；该模式再次在 `chat.aiml` 中定义。
- en: If you observe, the `WHO ARE *` pattern is configured for multiple responses
    in the `chat.aiml` file, so the bot, at runtime, chooses a random response and
    returns **My name is superman!**.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你观察，`WHO ARE *` 模式在 `chat.aiml` 文件中配置为多个响应，因此，在运行时，机器人会随机选择一个响应并返回 **我的名字是超人！**。
- en: Automating business processes with bots
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用机器人自动化业务流程
- en: So far in this chapter, you have learned what bots are, how they are built,
    and a few simple use cases where bots can be used. Let's see how we can solve
    Jay's problem with the knowledge we have developed so far and maybe learn more
    about building bots.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，在本章中，你已经学习了什么是机器人，它们是如何构建的，以及一些简单的机器人使用案例。让我们看看我们如何利用我们至今为止的知识来解决杰伊的问题，也许还能更多地了解如何构建机器人。
- en: Jay is a marketing manager at a famous book publishing company, *MyBooks*. His
    task is to come up with book promotion e-mails. He feels that the promotional
    e-mails he sends are too generic and are not targeted to the readers effectively.
    For instance, an e-mail on the Python learning path may not encourage a Java developer
    to spend money. He thinks he can do a much better job if he understands the interests
    of the audience and makes his interaction more relevant; the reader would be much
    more inclined to buy the book this way. He also feels that a lot of readers (potential
    buyers) are on Facebook, but they are not currently being reached out to by the
    publishing house. Can we help Jay here?
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 杰伊是一家著名图书出版公司的市场营销经理，在 *MyBooks* 公司。他的任务是想出图书推广电子邮件。他觉得他发送的推广电子邮件太通用，没有有效地针对读者。例如，关于
    Python 学习路径的电子邮件可能不会鼓励 Java 开发者花钱。他认为，如果他了解受众的兴趣并使他的互动更加相关，他可以做得更好；读者更有可能以这种方式购买书籍。他还觉得很多读者（潜在买家）在
    Facebook 上，但出版社目前还没有接触到他们。我们能帮杰伊解决这个问题吗？
- en: Getting ready
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Yes, let's help Jay by developing a fantastic bot for him. If you look into
    Jay's problem, he needs to understand the audience (in this case, the readers
    who would be interested in buying a book) and suggest them books based on their
    interest. So, our bot should be smart enough to get the relevant information from
    the readers.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，让我们通过开发一个出色的机器人来帮助Jay。如果你研究Jay的问题，他需要了解受众（在这种情况下，对购买书籍感兴趣的读者）并根据他们的兴趣向他们推荐书籍。因此，我们的机器人应该足够智能，能够从读者那里获取相关信息。
- en: Also, since the readers are already on Facebook, we can create a MyBooks Facebook
    page and build a Facebook Messenger bot so that the readers can be contacted.
    Let's see how to do this.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，由于读者已经在Facebook上，我们可以创建一个MyBooks Facebook页面并构建一个Facebook Messenger机器人，以便联系读者。让我们看看如何操作。
- en: 'Before we get into building the bot, let''s install a few Python modules that
    will be needed for this exercise. We install the `flask` and `requests` module
    using the Python `pip`:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建机器人之前，让我们安装一些将在这个练习中需要的Python模块。我们使用Python的`pip`安装`flask`和`requests`模块：
- en: '[PRE8]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: To develop a Facebook Messenger bot, first create a Facebook account (who doesn't
    have a Facebook account?). Log in to your account and go to [https://www.facebook.com/pages/create/](https://www.facebook.com/pages/create/)
    to create a new page.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要开发一个Facebook Messenger机器人，首先创建一个Facebook账号（谁没有Facebook账号呢？）。登录您的账号，并前往[https://www.facebook.com/pages/create/](https://www.facebook.com/pages/create/)创建一个新的页面。
- en: In our case, since we're building a page for MyBook's company, we can call our
    page **MyBooks** and choose an appropriate organization type, which is **Media/news
    company**. This is how the page will look:![How to do it...](img/B05370_08_new.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的案例中，因为我们正在为MyBook公司建立一个页面，我们可以将我们的页面命名为**MyBooks**，并选择一个合适的组织类型，即**媒体/新闻公司**。以下是页面的样子：![如何操作...](img/B05370_08_new.jpg)
- en: 'The second step in creating the Facebook page is to fill out the other details
    requested by Facebook, as shown in the following screenshot. We have given a nice
    description to our page: `Get updates on our latest books`:![How to do it...](img/image_09_012-1.jpg)'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建Facebook页面的第二步是填写Facebook请求的其他详细信息，如下面的截图所示。我们为我们的页面提供了一个很好的描述：“获取我们最新书籍的更新”：![如何操作...](img/image_09_012-1.jpg)
- en: We have filled in all the details for Jay, and the MyBooks Facebook page is
    ready and looks smashing:![How to do it...](img/image_09_013-1.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经为Jay填写了所有详细信息，MyBooks的Facebook页面已经准备好，看起来很棒：![如何操作...](img/image_09_013-1.jpg)
- en: Now, that's a good start. Readers will start following this page, but we really
    need to add the ability for our readers to converse via a Facebook page; we do
    this with a Facebook Messenger bot. So let's go ahead and work on this aspect
    of our solution.
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，这是一个良好的开始。读者们将开始关注这个页面，但我们真的需要添加让我们的读者通过Facebook页面进行交流的能力；我们通过Facebook Messenger机器人来实现这一点。所以，让我们继续工作，解决我们解决方案的这个方面。
- en: To create a Facebook Messenger bot, we need a Facebook app. We will create an
    app by navigating to [https://developers.facebook.com/quickstarts/?platform=web](https://developers.facebook.com/quickstarts/?platform=web)
    and clicking on **Skip and Create App ID**, as shown in the following screenshot:![How
    to do it...](img/image_09_014-1.jpg)
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个Facebook Messenger机器人，我们需要一个Facebook应用。我们将通过导航到[https://developers.facebook.com/quickstarts/?platform=web](https://developers.facebook.com/quickstarts/?platform=web)并点击**跳过并创建App
    ID**来创建一个应用，如下面的截图所示：![如何操作...](img/image_09_014-1.jpg)
- en: We now fill out the required details and push the **Create App ID** button to
    create the app. The following screenshot shows the details we added to create
    an app:![How to do it...](img/image_09_015-1.jpg)
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在填写所需的详细信息，并点击**创建App ID**按钮来创建应用。以下截图显示了创建应用时添加的详细信息：![如何操作...](img/image_09_015-1.jpg)
- en: As soon as we fill out the details and click on **Create App ID**, a new app
    gets created for us. This Facebook app is for our bot. We see the app ID on the
    top-right section of our page, but to get associated with the bot, we scroll down
    and click on **Get ****Started** in the **Messenger** section:![How to do it...](img/image_09_016-1.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦我们填写了详细信息并点击**创建App ID**，就会为我们创建一个新的应用。这个Facebook应用是为我们的机器人准备的。我们在页面的右上角可以看到应用ID，但要与机器人关联，我们需要向下滚动并点击**开始**部分中的**Get
    Started**：![如何操作...](img/image_09_016-1.jpg)
- en: To let the bot access Messenger, we will generate **Page Access Token**, like
    in the following screenshot.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了让机器人访问Messenger，我们将生成**页面访问令牌**，如下面的截图所示。
- en: Tip
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Keep this token safe with you and don't share it with anyone.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请妥善保管此令牌，不要与任何人分享。
- en: This token is used to respond to the readers who initiate a conversation with
    the bot from the **MyBooks** Facebook page:![How to do it...](img/image_09_017-1.jpg)
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此令牌用于响应从**MyBooks** Facebook页面与机器人开始对话的读者：![如何操作...](img/image_09_017-1.jpg)
- en: 'OK, there''s one last thing pending. We also need to receive messages from
    the readers; only then can we respond to them. For this, we go to the **Webhooks**
    section and add a few settings:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 好的，还有最后一件事待办。我们还需要接收读者的消息；只有在这种情况下，我们才能回应他们。为此，我们进入**Webhooks**部分并添加一些设置：
- en: '**Callback URL**: This is a link to our server where we receive messages from
    our readers via the Facebook page'
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**回调URL**：这是我们的服务器链接，我们通过Facebook页面从读者那里接收消息'
- en: '**Verification Token**: Any set of characters can be used here, say `token`'
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**验证令牌**：这里可以使用任何一组字符，比如`token`'
- en: '**Subscription Fields**: We choose **messages** as subscription fields for
    our bot (this can be changed later)'
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订阅字段**：我们选择**消息**作为我们机器人的订阅字段（这可以在以后更改）'
- en: 'As you see, we need to have a callback URL. This will be used by Facebook to
    verify whether our callback URL is set up fine. For this, we create a Flask server
    and configure the route to be used for **Callback URL**. The following code creates
    a route called `/bot` that is used as **Callback URL** for verification:'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如你所见，我们需要有一个回调URL。这将由Facebook用来验证我们的回调URL是否设置正确。为此，我们创建一个Flask服务器并配置用于**回调URL**的路由。以下代码创建了一个名为`/bot`的路由，用作**回调URL**进行验证：
- en: '[PRE9]'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If we run the server on port 5000 and also use `ngrok` to run on the same port,
    we get a callback URL that can be placed in the **Webhook** settings. This is
    how callback URL looks:'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果我们在5000端口运行服务器，并且也使用`ngrok`在相同端口运行，我们将得到一个可以放置在**Webhook**设置中的回调URL。这是回调URL的样式：
- en: '![How to do it...](img/image_09_018-1.jpg)'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_018-1.jpg)'
- en: 'The settings can be verified and saved by clicking on the button, as shown
    in the following screenshot:'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以通过点击按钮来验证和保存设置，如下面的截图所示：
- en: '![How to do it...](img/image_09_019-1.jpg)'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_019-1.jpg)'
- en: 'When we verify and save the settings, a `GET` request is sent to our Flask
    server with the `hub.challenge` code. We return this code to Facebook from the
    `flask` route and verify the **Webhook** setting:'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当我们验证并保存设置时，会向我们的Flask服务器发送一个带有`hub.challenge`代码的`GET`请求。我们从`flask`路由返回此代码给Facebook，并验证**Webhook**设置：
- en: '[PRE10]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'For the bot to work fine we also need to make sure that the Facebook page allows
    certain events like reading or echoing messages. We enable these settings in the
    **Webhooks** section:'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 为了让机器人正常工作，我们还需要确保Facebook页面允许某些事件，如阅读或回显消息。我们在**Webhooks**部分启用这些设置：
- en: '![How to do it...](img/image_09_020-1.jpg)'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_020-1.jpg)'
- en: 'Cool! So now we''re ready with a **Webhook** to receive messages from readers
    and also have an access token to respond to users. If you realize, **Webhook**
    is going to be our bot server! Let''s just go ahead and make our bot do smarter
    things. The following code will make our bot do all the great things that Jay
    needs:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太好了！所以现在我们已经准备好了一个**Webhook**来接收读者的消息，并且还有一个访问令牌来回应用户。如果你意识到，**Webhook**将成为我们的机器人服务器！让我们继续让我们的机器人做更智能的事情。以下代码将使我们的机器人完成Jay需要的所有伟大事情：
- en: '[PRE11]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We run the preceding Flask server to activate our bot. Now, let's see how the
    bot works by navigating to the Facebook page. On the Facebook page, if we click
    on **Message**, we can start chatting with the bot on the **MyBooks** page:![How
    to do it...](img/image_09_021.jpg)
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们运行前面的Flask服务器来激活我们的机器人。现在，让我们通过导航到Facebook页面来看看机器人是如何工作的。在Facebook页面上，如果我们点击**消息**，我们就可以在**MyBooks**页面上与机器人开始聊天：![如何操作...](img/image_09_021.jpg)
- en: Let's start the conversation with the bot using a simple `Hi` message. The bot
    responds to us with a question about whether we'd like information on Python or
    Java books. Nice!![How to do it...](img/image_09_022-1.jpg)
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们用简单的`Hi`消息开始与机器人的对话。机器人会向我们提出关于我们是否需要有关Python或Java书籍信息的问题。太棒了！！[如何操作...](img/image_09_022-1.jpg)
- en: Now, if we click on **Python**, the bot recommends an architectural book written
    in Python and encourages the readers to buy it. This also happens when the reader
    clicks on **Java**. See the following screenshot:![How to do it...](img/image_09_023.jpg)
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果我们点击**Python**，机器人会推荐一本用Python编写的架构书籍，并鼓励读者购买。当读者点击**Java**时，也会发生这种情况。请看以下截图：![如何操作...](img/image_09_023.jpg)
- en: 'The following screenshot demonstrates a Java example where the *RESTful Java
    Patterns and Best Practices* book is recommended when the user selects **Java**:'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图演示了一个Java示例，其中当用户选择**Java**时，推荐了**RESTful Java Patterns and Best Practices**这本书：
- en: '![How to do it...](img/image_09_024.jpg)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![如何操作...](img/image_09_024.jpg)'
- en: Cool, right? This is what Jay needed. So, when the readers arrive at the **MyBooks**
    page, they get to talk to the bot and the bot recommends them a book based on
    their interest. Since the suggestion made by the bot is much more relevant to
    the reader, compared to a generic promotional e-mail, the chances of the reader
    buying a book are higher. Awesome!
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 太酷了，对吧？这正是Jay所需要的。所以，当读者到达**MyBooks**页面时，他们可以与机器人交谈，机器人根据他们的兴趣推荐一本书。由于机器人提出的建议与读者的相关性比通用促销电子邮件要高得多，读者购买书籍的可能性也更高。太棒了！
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'We first created a Facebook page for Jay''s publishing house: MyBooks. We then
    associated a Facebook Messenger bot with this page and got **Access Token** to
    send the message back to the readers who chat with the bot. We also set up **Webhooks**
    so that our bot would receive messages from the readers and use **Access Token**
    to post messages back to them. Here, **Webhook** is the brains behind the bot.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先为Jay的出版社创建了一个Facebook页面：MyBooks。然后我们将一个Facebook Messenger机器人与这个页面关联起来，并获得了**访问令牌**，以便向与机器人聊天的读者发送消息。我们还设置了**Webhooks**，以便我们的机器人能够接收读者的消息，并使用**访问令牌**向他们发送消息。在这里，**Webhook**是机器人的大脑。
- en: When the reader reaches the **MyBooks** page, they click on **Messenger** to
    start a conversation with the bot. When he or she says `Hi`, HTTP's `POST` request
    is sent to the **Webhook ** [`https://2d7d823f.ngrok.io/bot/`](https://2d7d823f.ngrok.io/bot/)
    with the message.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 当读者到达**MyBooks**页面时，他们点击**消息传递者**与机器人开始对话。当他或她说“Hi”时，HTTP的`POST`请求会发送到**Webhook**
    [`https://2d7d823f.ngrok.io/bot/`](https://2d7d823f.ngrok.io/bot/)，并带有消息。
- en: The bot reads the message from the reader and sends a *generic template* message
    to the reader with `postback` options. The bot sends this message using Facebook's
    Graph APIs.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 机器人读取读者的消息，并向读者发送带有`postback`选项的**通用模板**消息。机器人使用Facebook的Graph APIs发送此消息。
- en: Note
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Facebook has template messages for sending `postback` messages, buttons, images,
    URLs, and audio/video media files.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Facebook有模板消息用于发送`postback`消息、按钮、图片、URL和音频/视频媒体文件。
- en: When the reader chooses **Python**, the bot receives this message and, based
    on the payload, returns the image of the book along with the URL so users can
    buy it. Users can then click on **Buy** to go to the book's URL and buy the book
    from there, exactly what Jay hoped for!
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 当读者选择**Python**时，机器人收到这条消息，并根据有效载荷返回书籍的图片以及URL，以便用户购买。用户然后可以点击**购买**按钮，进入书籍的URL并从那里购买书籍，这正是Jay所希望的！
- en: There's more...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In this chapter, we build bots based on CLI, Web UI, and mobile apps. The bots
    can reside on other chat systems, such as Slack, which has a nice set of APIs.
    You may want to try writing one. If you do write one, send me the pointers; I
    would love to try them out.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们基于CLI、Web UI和移动应用构建机器人。这些机器人可以驻留在其他聊天系统中，例如拥有良好API集的Slack。你可能想尝试编写一个。如果你写了，请把链接发给我；我很乐意尝试它们。
- en: Note
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You can reach out to me on Twitter or send me a direct message and I will get
    back to you.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过Twitter联系我，或者直接给我发消息，我会回复你。
