- en: Chapter 7. Working with Django Forms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章。使用Django表单
- en: We all know about HTML forms. This is a `<form>` tag that contains the `<input>`
    and `<select>` tags. The user can fill in or edit these items and return them
    to the server. This is the preferred way to store data provided by the client.
    Frameworks such as Django seized the HTML form to make it better.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道HTML表单。这是一个包含`<input>`和`<select>`标签的`<form>`标签。用户可以填写或编辑这些项目并将它们返回到服务器。这是存储客户端提供的数据的首选方式。像Django这样的框架利用了HTML表单来使其更好。
- en: A Django form is inherited from the `Form` class object. It is an object in
    which we will set properties. These properties will be the fields in the form,
    and we will define their type.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Django表单继承自`Form`类对象。这是一个我们将设置属性的对象。这些属性将是表单中的字段，我们将定义它们的类型。
- en: 'In this chapter, we will learn how to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何执行以下操作：
- en: Create an HTML form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建HTML表单
- en: Handle the data sent by a form
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理表单发送的数据
- en: Create a Django form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建Django表单
- en: Validate and manipulate data sent from a Django form
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证和操作从Django表单发送的数据
- en: Create forms based on models
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于模型创建表单
- en: Customize error messages and use widgets
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义错误消息并使用小部件
- en: 'The advantages of Django forms are as follows:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Django表单的优点如下：
- en: Protection against CSRF vulnerabilities can be easily implemented. We'll talk
    about CSRF vulnerabilities thereafter.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对抗CSRF漏洞可以很容易地实现。我们将在此后讨论CSRF漏洞。
- en: Data validation is automatic.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据验证是自动的。
- en: Forms are easily customizable.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表单可以很容易地定制。
- en: 'But the best way to compare a standard HTML form and a Django form is to practice
    it with an example: the form to add a developer.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但比较标准HTML表单和Django表单的最佳方法是通过一个例子来练习：添加开发者的表单。
- en: Adding a developer without using Django forms
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 不使用Django表单添加开发者
- en: In this section, we will show you how to add a developer without using Django
    forms. This example will show the time that can be saved by using Django.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将向您展示如何在不使用Django表单的情况下添加开发者。这个例子将展示使用Django可以节省多少时间。
- en: 'Add the following URL to your `urls.py` file:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下URL添加到您的`urls.py`文件中：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Template of an HTML form
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML表单模板
- en: 'We will create a template before the view. Indeed, we are going to fill the
    view with the template that contains the form. We do not put all the fields in
    the model because the code is too long. It is better to learn using shorter code.
    The following is our template in `template/en/public/create_developer.html`:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在视图之前创建一个模板。实际上，我们将用包含表单的模板填充视图。我们没有把所有字段都放在模型中，因为代码太长了。使用更短的代码学习更好。以下是我们的模板`template/en/public/create_developer.html`：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note that the template is impressive and yet it is a minimalist form.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，模板令人印象深刻，但它是一个极简的表单。
- en: The view using the POST data reception
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 视图使用POST数据接收
- en: 'The following screenshot shows the web page that we will create:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了我们将创建的网页：
- en: '![The view using the POST data reception](img/00020.jpeg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![使用POST数据接收的视图](img/00020.jpeg)'
- en: 'The view that will process this form will be as follows. Save the view in the
    file `views/create_developer.py`:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将处理此表单的视图如下。将视图保存在文件`views/create_developer.py`中：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In this view, we haven't even checked whether the supervisor exists. Even if
    the code is functional, note that it requires a lot of lines and we haven't verified
    the contents of the transmitted data.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，我们甚至没有检查监督员是否存在。即使代码是功能性的，注意它需要很多行，而且我们没有验证传输数据的内容。
- en: We used the `HttpResponse()` method so that we do not have to create additional
    templates. We also have no details about client errors when a field is entered
    incorrectly.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`HttpResponse()`方法，这样我们就不必创建额外的模板。当字段输入不正确时，我们也没有关于客户端错误的详细信息。
- en: If you want to verify whether your code works properly, do not forget to check
    the data in the administration module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想验证您的代码是否正常工作，请不要忘记在管理模块中检查数据。
- en: 'To try this form, you can add the following line in the block `article_content`
    of the `index.html` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要尝试这个表单，您可以在`index.html`文件的`article_content`块中添加以下行：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding a developer with Django forms
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django表单添加开发者
- en: Django forms work with an object that inherits from the `Form` class. This object
    will handle much of the work we have done manually in the previous example.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Django表单使用从`Form`类继承的对象。这个对象将处理我们在前面的例子中手动完成的大部分工作。
- en: When displaying the form, it will generate the contents of the form template.
    We may change the type of field that the object sends to the template if needed.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在显示表单时，它将生成表单模板的内容。如果需要，我们可以更改对象发送到模板的字段类型。
- en: While receiving the data, the object will check the contents of each form element.
    If there is an error, the object will send a clear error to the client. If there
    is no error, we are certain that the form data is correct.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在接收数据时，对象将检查每个表单元素的内容。如果有错误，对象将向客户端发送明确的错误。如果没有错误，我们可以确定表单数据是正确的。
- en: CSRF protection
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSRF保护
- en: '**Cross-Site Request Forgery** (**CSRF**) is an attack that targets a user
    who is loading a page that contains a malicious request. The malicious script
    uses the authentication of the victim to perform unwanted actions, such as changing
    data or access to sensitive data.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站请求伪造**（**CSRF**）是一种针对加载包含恶意请求的页面的用户的攻击。恶意脚本利用受害者的身份验证执行不需要的操作，如更改数据或访问敏感数据。'
- en: 'The following steps are executed during a CSRF attack:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSRF攻击期间执行以下步骤：
- en: Script injection by the attacker.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者进行脚本注入。
- en: An HTTP query is performed to get a web page.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行HTTP查询以获取网页。
- en: Downloading the web page that contains the malicious script.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载包含恶意脚本的网页。
- en: Malicious script execution.![CSRF protection](img/00021.jpeg)
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 恶意脚本执行。![CSRF保护](img/00021.jpeg)
- en: In this kind of attack, the hacker can also modify information that may be critical
    for the users of the website. Therefore, it is important for a web developer to
    know how to protect their site from this kind of attack, and Django will help
    with this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种攻击中，黑客还可以修改对网站用户可能至关重要的信息。因此，对于Web开发人员来说，了解如何保护他们的网站免受这种攻击是非常重要的，而Django将在此方面提供帮助。
- en: 'To re-enable CSRF protection, we must edit the `settings.py` file and uncomment
    the following line:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要重新启用CSRF保护，我们必须编辑`settings.py`文件，并取消以下行的注释：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'This protection ensures that the data that has been sent is really sent from
    a specific property page. You can check this in two easy steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 此保护确保已发送的数据确实是从特定属性页面发送的。您可以通过两个简单的步骤来检查：
- en: When creating an HTML or Django form, we insert a CSRF token that will store
    the server. When the form is sent, the CSRF token will be sent too.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建HTML或Django表单时，我们插入一个将存储在服务器上的CSRF令牌。当表单被发送时，CSRF令牌也将被发送。
- en: When the server receives the request from the client, it will check the CSRF
    token. If it is valid, it validates the request.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当服务器接收到来自客户端的请求时，它将检查CSRF令牌。如果有效，它将验证请求。
- en: 'Do not forget to add the CSRF token in all the forms of the site where protection
    is enabled. HTML forms are also involved, and the one we have just made does not
    include the token. For the previous form to work with CSRF protection, we need
    to add the following line in the form of tags and `<form> </form>`:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记在启用保护的站点的所有表单中添加CSRF令牌。HTML表单也涉及其中，我们刚刚创建的表单不包括令牌。为了使先前的表单与CSRF保护一起工作，我们需要在标签和`<form>
    </form>`中添加以下行：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The view with a Django form
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带有Django表单的视图
- en: 'We will first write the view that contains the form because the template will
    display the form defined in the view. Django forms can be stored in other files
    as `forms.py` at the root of the project file. We include them directly in our
    view because the form will only be used on this page. Depending on the project,
    you must choose which architecture suits you best. We will create our view in
    the `views/create_developer.py` file with the following lines:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先编写包含表单的视图，因为模板将显示在视图中定义的表单。Django表单可以存储在项目文件的根目录下的`forms.py`等其他文件中。我们直接将它们包含在视图中，因为表单只会在此页面上使用。根据项目，您必须选择最适合您的架构。我们将在`views/create_developer.py`文件中创建我们的视图，代码如下：
- en: '[PRE6]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This screenshot shows the display of the form with the display of an error
    message:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 此截图显示了表单的显示以及错误消息的显示：
- en: '![The view with a Django form](img/00022.jpeg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![带有Django表单的视图](img/00022.jpeg)'
- en: Template of a Django form
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django表单的模板
- en: 'We set the template for this view. The template will be much shorter:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为此视图设置模板。模板将会更短：
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: As the complete form operation is in the view, the template simply executes
    the `as_table()` method to generate the HTML form.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于完整的表单操作在视图中，模板只需执行`as_table()`方法来生成HTML表单。
- en: 'The previous code displays data in tabular form. The three methods to generate
    an HTML form structure are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 先前的代码以表格形式显示数据。生成HTML表单结构的三种方法如下：
- en: '`as_table`: This displays fields in the `<tr> <td>` tags'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_table`：这会在`<tr> <td>`标签中显示字段'
- en: '`as_ul`: This displays the form fields in the `<li>` tags'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_ul`：这会在`<li>`标签中显示表单字段'
- en: '`as_p`: This displays the form fields in the `<p>` tags'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`as_p`：这会在`<p>`标签中显示表单字段'
- en: So, we quickly wrote a secure form with error handling and CSRF protection through
    Django forms. In the [Appendix](part0090.html#page "Appendix A. Cheatsheet"),
    *Cheatsheet*, you can find the different possible fields in a form.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们通过Django表单快速编写了一个带有错误处理和CSRF保护的安全表单。在[附录](part0090.html#page "附录 A. 速查表")中，*速查表*，您可以找到表单中不同可能的字段。
- en: The form based on a model
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于模型的表单
- en: ModelForms are Django forms based on models. The fields of these forms are automatically
    generated from the model that we have defined. Indeed, developers are often required
    to create forms with fields that correspond to those in the database to a non-MVC
    website.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ModelForms是基于模型的Django表单。这些表单的字段是从我们定义的模型自动生成的。实际上，开发人员经常需要创建与数据库中的字段对应的表单，以适应非MVC网站。
- en: These particular forms have a `save()` method that will save the form data in
    a new record.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特殊的表单有一个`save()`方法，将在新记录中保存表单数据。
- en: The supervisor creation form
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 监督员创建表单
- en: 'To broach, we will take, for example, the addition of a supervisor. For this,
    we will create a new page. For this, we will create the following URL:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将以添加监督员为例。为此，我们将创建一个新页面。为此，我们将创建以下URL：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Our view will contain the following code:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的视图将包含以下代码：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'As seen in the line `exclude = (''date_created'', ''last_connexion'', )`, it
    is possible to restrict the form fields. Both the `exclude` and `fields` properties
    must be used correctly. Indeed, these properties receive a tuple of the fields
    to exclude or include as arguments. They can be described as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 如在`exclude = ('date_created', 'last_connexion', )`行中所示，可以限制表单字段。`exclude`和`fields`属性都必须正确使用。实际上，这些属性接收要排除或包括的字段的元组作为参数。它们可以描述如下：
- en: '`exclude`: This is used in the case of an accessible form by the administrator.
    Because, if you add a field in the model, it will be included in the form.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`exclude`：这在管理员可访问的表单的情况下使用。因为，如果您在模型中添加一个字段，它将包含在表单中。'
- en: '`fields`: This is used in cases in which the form is accessible to users. Indeed,
    if we add a field in the model, it will not be visible to the user.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`：这在表单对用户可访问的情况下使用。实际上，如果我们在模型中添加一个字段，用户将看不到它。'
- en: For example, we have a website selling royalty-free images with a registration
    form based on ModelForm. The administrator adds a credit field in the extended
    model of the user. If the developer has used an `exclude` property in some of
    the fields and did not add credits, the user will be able to take as many credits
    as he/she wants.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个网站，销售免版税图像，其中有一个基于ModelForm的注册表单。管理员在用户的扩展模型中添加了一个信用字段。如果开发人员在某些字段中使用了`exclude`属性，并且没有添加信用，用户将能够获取他/她想要的信用。
- en: 'We will resume our previous template, where we will change the URL present
    in the attribute action of the `<form>` tag:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将恢复我们之前的模板，在那里我们将更改`<form>`标签的`action`属性中存在的URL：
- en: '[PRE10]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This example shows us that ModelForms can save you a lot of time in development
    by having a form that can be customized (by modifying the validation, for example).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子向我们展示了ModelForms可以通过拥有一个可以定制的表单（例如修改验证）来节省大量开发时间。
- en: In the next chapter, we will see how to be faster with the class-based views.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何通过基于类的视图更快。
- en: Advanced usage of Django forms
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django表单的高级用法
- en: We have studied the basics of the forms that allow you to create simple forms
    with little customization. Sometimes, it is useful to customize aspects such as
    data validation and error display, or use special graphics.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了允许您创建简单表单并进行少量定制的表单的基础知识。有时，定制数据验证和错误显示，或使用特殊图形等方面是有用的。
- en: Extending the validation form
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展验证表单
- en: It is useful to perform specific validation of the form fields. Django makes
    this easy while reminding you of the advantages of the forms. We will take the
    example of the addition of a developer form, where we will conduct an audit of
    the password.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 对表单字段执行特定验证是有用的。Django使这变得容易，同时提醒您表单的优势。我们将以添加开发者表单的例子来说明密码的审核。
- en: 'For this, we will change the form in our view (in the `create_developer.py`
    file) in the following manner:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们将以以下方式更改我们视图中的表单（在`create_developer.py`文件中）：
- en: '[PRE11]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: With this example, we can see that Django is very flexible in the management
    of forms and audits. It also allows you to customize the display of errors.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个例子，我们可以看到Django在表单和审核管理方面非常灵活。它还允许您定制错误的显示。
- en: Customizing the display of errors
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定制错误的显示
- en: Sometimes, it may be important to display user-specific error messages. For
    example, a company may request for a password that must contain certain types
    of characters; for example, the password must contain at least one number and
    many letters. In such cases, it would be preferable to also indicate this in the
    error message. Indeed, users read more carefully the error messages than help
    messages.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，显示特定于用户的错误消息可能很重要。例如，公司可能要求密码必须包含某些类型的字符；例如，密码必须至少包含一个数字和多个字母。在这种情况下，最好也在错误消息中指出这一点。实际上，用户更仔细地阅读错误消息而不是帮助消息。
- en: To do this, you must use the `error_messages` property in the form fields and
    set the error message as a text string.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，您必须在表单字段中使用`error_messages`属性，并将错误消息设置为文本字符串。
- en: 'It is also possible to define different messages depending on the type of error.
    We will create a dictionary of the two most common mistakes and give them a message.
    We can define this dictionary as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以根据错误类型定义不同的消息。我们将创建一个包含两种常见错误的字典，并为它们提供消息。我们可以定义这个字典如下：
- en: '[PRE12]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We will modify the name field of the `Form_inscription` form of `create_developer.py`:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将修改`create_developer.py`中`Form_inscription`表单的名称字段：
- en: '[PRE13]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This way, if the user doesn''t fill the `name` field, he/she will see the following
    message: **You must type a name!**.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，如果用户没有填写`name`字段，他/她将看到以下消息：**您必须输入一个名称！**。
- en: To apply this message to ModelForm, we have to go to the `models.py` file and
    modify the line that contains the `name` field.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要将此消息应用于ModelForm，我们必须转到`models.py`文件并修改包含`name`字段的行。
- en: '[PRE14]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When editing `models.py`, we should not forget to specify the `error_name` dictionary.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在编辑`models.py`时，我们不应忘记指定`error_name`字典。
- en: These error messages improve the quality of the website by informing the user
    of his/her mistakes. It is very important to use custom errors on fields when
    validation is complex. However, do not overdo it on the basic fields as this would
    be a waste of time for the developer.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这些错误消息通过通知用户他/她的错误来提高网站的质量。当验证复杂时，使用自定义字段上的自定义错误非常重要。然而，不要在基本字段上过度使用，因为这对开发人员来说会浪费时间。
- en: Using widgets
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用小部件
- en: Widgets are an effective way to customize the display of the form elements.
    Indeed, in some cases, it may be helpful to specify a text area field with particular
    dimensions in ModelForm.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 小部件是定制表单元素显示的有效方式。实际上，在某些情况下，指定具有特定尺寸的文本区域字段在ModelForm中可能是有帮助的。
- en: To learn the practice of using widgets and continue the development of our application,
    we will create the page of the creation of projects. This page will contain a
    Django form, and we'll set the `description` field in the HTML `<textarea>` tag.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习使用小部件的实践并继续开发我们的应用程序，我们将创建项目创建页面。这个页面将包含一个Django表单，并且我们将在HTML的`<textarea>`标签中设置`description`字段。
- en: 'We need to add the following URL to the `urls.py` file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将以下URL添加到`urls.py`文件中：
- en: '[PRE15]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, create our view in the `create_project.py` file with the following code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在`create_project.py`文件中创建我们的视图，代码如下：
- en: '[PRE16]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It is possible to take one of the templates that we have created and adapted.
    This form will work the same way as all the Django forms that we have created.
    After copying a template that we have already created, we only need to change
    the title and URL of the `action` property of the `<form>` tag. By visiting the
    page, we notice that the widget works well and displays a text area more suitable
    for long text.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用我们创建和调整的模板之一。这个表单将与我们创建的所有Django表单一样工作。在复制我们已经创建的模板之后，我们只需要更改`<form>`标签的`action`属性的标题和URL。通过访问页面，我们注意到小部件运行良好，并显示更适合长文本的文本区域。
- en: There are many other widgets to customize forms. A great quality of Django is
    that it is generic and totally adaptable with time.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多其他小部件可以定制表单。Django的一个很大的特点是它是通用的，并且随着时间的推移完全可适应。
- en: Setting initial data in a form
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在表单中设置初始数据
- en: There are two ways to declare the initial value of form fields with Django.
    The following examples take place in the `create_developer.py` file.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以使用Django声明表单字段的初始值。以下示例发生在`create_developer.py`文件中。
- en: When instantiating the form
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在实例化表单时
- en: 'The following code will display `new` in the `name` field and will select the
    first supervisor in the `<select>` field that defines the supervisor. These fields
    are editable by the user:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码将在`name`字段中显示`new`，并在定义主管的`<select>`字段中选择第一个主管。这些字段可由用户编辑：
- en: '[PRE17]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This line must replace the following line in the `create_developer.py` view:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行必须替换`create_developer.py`视图中的以下行：
- en: '[PRE18]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: When defining fields
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在定义字段时
- en: 'To get the same effect as in the previous section, display `new` in the `name`
    field and select the first supervisor in the corresponding field; you must change
    the declaration `name` and `supervisor` fields with the following code:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要达到与上一节相同的效果，在`name`字段中显示`new`并选择相应字段中的第一个主管；您必须使用以下代码更改声明`name`和`supervisor`字段：
- en: '[PRE19]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use Django forms. These forms allow you to
    save a lot of time with automatic data validation and error display.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用Django表单。这些表单可以通过自动数据验证和错误显示来节省大量时间。
- en: In the next chapter, we will go further into the generic actions and save even
    more time with the forms.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将进一步探讨通用操作，并通过表单节省更多时间。
