- en: Chapter 2. Python Tools in Visual Studio
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章. Visual Studio中的Python工具
- en: 'Now that we have our tools up and running, we can start to take a deeper look
    into one of the most important features of PTVS: the intelligent code completion
    feature or IntelliSense of Visual Studio.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了我们的工具，我们可以开始深入探讨PTVS最重要的功能之一：智能代码补全功能或Visual Studio的IntelliSense。
- en: In this chapter, we will dig deeper into the automatic syntax and hierarchic
    analysis tools of Visual Studio that we can use with Python. Essentially, these
    are IntelliSense and navigation tools, which are really helpful for a Python developer
    during the coding process.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入了解Visual Studio的自动语法和层次分析工具，这些工具可以与Python一起使用。本质上，这些是IntelliSense和导航工具，对于Python开发者在编码过程中非常有帮助。
- en: Furthermore, we will see how to maximize the capabilities of Visual Studio in
    conjunction with the inner REPL tool for quick and useful code testing and debugging.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将看到如何结合Visual Studio的内部REPL工具来最大化其功能，以便进行快速且有用的代码测试和调试。
- en: Mastering IntelliSense with Python
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python精通IntelliSense
- en: As shown in the **Python Environments** tab, Visual Studio analyzes the Python
    code that is available in the current solution and the installed libraries to
    populate the internal database. By doing so, we are able to gain a better understanding
    of the available classes, methods, and field descriptions. This is done in a way
    that can help the developer speed up the coding process.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如**Python环境**选项卡所示，Visual Studio分析当前解决方案中可用的Python代码和已安装的库，以填充内部数据库。通过这样做，我们能够更好地理解可用的类、方法和字段描述。这是以帮助开发者加快编码过程的方式进行的。
- en: 'The IntelliSense context-aware code completion feature can be recalled in line
    using the *Ctrl* + Space bar or *Ctrl* + *J* shortcuts. The *Ctrl* + *J* shortcut
    displays the list even when there''s only one possibility. This is what happens
    when you call it in the middle of a command:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense上下文感知代码补全功能可以通过*Ctrl* + 空格键或*Ctrl* + *J*快捷键在行中调用。*Ctrl* + *J*快捷键即使在只有一个可能性的情况下也会显示列表。这是当你在一个命令的中间调用它时发生的情况：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_01.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python精通IntelliSense](img/8687OS_02_01.jpg)'
- en: IntelliSense shows all the available methods, classes, and fields available
    in the current code, ordered in alphabetical order. Besides showing them from
    the list of available commands, it also provides you with a quick documentation.
    In our example, for the `range` method, IntelliSense shows the list of its overloaded
    methods and its signature.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense会显示当前代码中所有可用的方法、类和字段，并按字母顺序排列。除了从可用命令列表中显示它们之外，它还为你提供快速文档。在我们的例子中，对于`range`方法，IntelliSense会显示其重载方法的列表及其签名。
- en: If you are aware of the method that you are searching for but want a little
    help with the list of parameters available, just recall the IntelliSense window
    either through the parameter parenthesis when you open it or with the *Ctrl* +
    *Shift* + Space bar shortcut.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经知道你正在寻找的方法，但需要一点帮助来查看可用的参数列表，只需在打开它时通过参数括号回忆IntelliSense窗口，或者使用*Ctrl* +
    *Shift* + 空格键快捷键。
- en: '![Mastering IntelliSense with Python](img/8687OS_02_02.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python精通IntelliSense](img/8687OS_02_02.jpg)'
- en: In this case, IntelliSense will show possible combinations of the parameters
    and a quick documentation for each one, given by the position of the parameter
    in the list as shown in preceding screenshot.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，IntelliSense将显示参数的可能组合以及每个参数的快速文档，这些文档由参数在列表中的位置给出，如前一张截图所示。
- en: The automatic importing of modules is another interesting functionality that
    helps in speeding up development. It also provides the functionality of automatic
    inclusion when you use a class from another Python file.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 模块的自动导入是另一个有趣的功能，有助于加快开发速度。它还提供了当你从一个Python文件中使用类时自动包含的功能。
- en: 'As shown in the preceding screenshot, if you have a `Paging` class in one of
    your Python files in your project, IntelliSense can recognize it as a class that
    is reachable from your project; also, it will suggest further operations by showing
    a smart tag under the first character of the classname:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，如果你在你的项目中的一个Python文件中有一个`Paging`类，IntelliSense可以将其识别为从你的项目可访问的类；它还会通过在类名第一个字符下显示智能标签来建议进一步的操作：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![使用Python精通IntelliSense](img/8687OS_02_03.jpg)'
- en: IntelliSense in action on a classname for importing. The little blue rectangle
    under the classname means there are functions available from Visual Studio
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense 在导入类名时处于活动状态。类名下方的蓝色小矩形表示 Visual Studio 中有可用的函数
- en: 'When it''s clicked, an action pop up is shown. You can choose the operation
    to execute along with its ability to reference the source/originated file into
    the current code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击时，会显示一个动作弹出窗口。你可以选择要执行的操作，以及将其源文件/原始文件引用到当前代码中的能力：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_04.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_04.jpg)'
- en: 'If you click on one of the two options, an inclusion statement will be added
    as the header of your code file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击其中的一个选项，将添加包含语句作为代码文件的标题：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_05.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_05.jpg)'
- en: After selecting the "from Paging import Paging" option, the inclusion statement
    is generated at the top of the code file
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 选择“从 Paging 导入 Paging”选项后，包含语句将生成在代码文件顶部
- en: 'Once the class is visible in your code, Visual Studio is able to inspect the
    referenced class. You will start seeing the class in the IntelliSense window when
    it''s called, as shown in the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦类在你的代码中可见，Visual Studio 就能够检查引用的类。当你调用它时，你将在 IntelliSense 窗口中看到该类，如下面的截图所示：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_06.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_06.jpg)'
- en: IntelliSense showing the methods available in the Paging class
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense 显示了 Paging 类中的可用方法
- en: 'IntelliSense can be extended even further. In the following example, when the
    `foo` class is defined with the `bar` method, IntelliSense will fetch the class
    structure to display the helper to be used in the code:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense 可以进一步扩展。在下面的示例中，当使用 `bar` 方法定义 `foo` 类时，IntelliSense 将检索类结构以显示在代码中使用的辅助工具：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_07.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_07.jpg)'
- en: 'IntelliSense is able to provide us with an insight into the structure of the
    class and the available elements of it, but without any documentation. To have
    the documentation shown in the code, we can simply add it to the code of the class
    as follows:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense 能够让我们洞察类的结构和其可用元素，但没有任何文档。为了在代码中显示文档，我们只需将其添加到类的代码中，如下所示：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_08.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_08.jpg)'
- en: IntelliSense showing the class or method documentation
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: IntelliSense 显示类或方法文档
- en: It's really straightforward and simple. Any element in the Python project is
    automatically analyzed and fed into the reference database of Visual Studio without
    having to rework the code or execute external tools during the coding session.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它非常直接且简单。在编码会话中，Python 项目的任何元素都会自动分析并输入到 Visual Studio 的参考数据库中，无需重新工作代码或执行外部工具。
- en: 'IntelliSense can also help when the code is referenced, giving us an overview
    of all the modules that are available, all the PythonPath-referenced modules,
    the modules you are going to reference in your solution, and the modules that
    are part of your project:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当代码被引用时，IntelliSense 也可以提供帮助，为我们提供所有可用模块的概述，所有 PythonPath 引用的模块，你将在解决方案中引用的模块，以及项目中的模块：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_09.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_09.jpg)'
- en: 'Furthermore, IntelliSense is useful not only to select the module, but also
    to select the import part:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，IntelliSense 不仅有助于选择模块，还可以选择导入部分：
- en: '![Mastering IntelliSense with Python](img/8687OS_02_10.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Python 掌握 IntelliSense](img/8687OS_02_10.jpg)'
- en: Using REPL in Visual Studio
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中使用 REPL
- en: In this section, we will explore the usage of the standard **read–eval–print
    loop** (**REPL**) tool for Python inside Visual Studio. As mentioned in the introduction,
    PTVS has an enhanced version of REPL. Besides the standard Python commands in
    the REPL version of PTVS—the Interactive Python window—there are some added commands
    and functionalities that can help speed up the debugging process and also enable
    simple testing of your code.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨在 Visual Studio 中使用标准的 **读取-评估-打印循环**（**REPL**）工具的 Python 应用。如介绍中所述，PTVS
    有一个增强版的 REPL。除了 PTVS REPL 版本中的标准 Python 命令——交互式 Python 窗口之外，还有一些额外的命令和功能可以帮助加快调试过程，并允许对代码进行简单的测试。
- en: 'The enhanced commands are shown by typing `$help` in REPL, as shown in the
    following screenshot:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在 REPL 中输入 `$help`，可以显示增强的命令，如下面的截图所示：
- en: '![Using REPL in Visual Studio](img/8687OS_02_11.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![在 Visual Studio 中使用 REPL](img/8687OS_02_11.jpg)'
- en: We'll go into detail on the most used and interesting commands. The `$cls` command
    cleans up the command line, while the `$reset` command cleans up the engine in
    a way that you can restart with a clean REPL environment.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将详细介绍最常用和有趣的操作命令。`$cls`命令清理命令行，而`$reset`命令以清理引擎的方式，您可以以干净的REPL环境重新启动。
- en: 'The most interesting functions are `$load` and `$mod`. The `$load` command
    permits you to execute the content of a given Python file inside REPL:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最有趣的功能是`$load`和`$mod`。`$load`命令允许您在REPL中执行给定Python文件的内容：
- en: '![Using REPL in Visual Studio](img/8687OS_02_12.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![在Visual Studio中使用REPL](img/8687OS_02_12.jpg)'
- en: An example of the $load function in the REPL tool
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: REPL工具中$load函数的示例
- en: These functions are useful as they provide an on-the-fly view of the execution
    cycle of your code.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能很有用，因为它们提供了代码执行周期的即时视图。
- en: The `$mod` command gives you the opportunity to change the scope on which the
    REPL tool is operating.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`$mod`命令为您提供了更改REPL工具操作作用域的机会。'
- en: When REPL starts, it's automatically set on the main module of the opened project,
    `(__main__)`. Typing `$mod` followed by the name of the module allows you to switch
    to another module of the same project, giving access to the module and its content.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当REPL启动时，它自动设置为打开项目的主体模块`(__main__)`。输入`$mod`后跟模块名称，允许您切换到同一项目的另一个模块，从而访问模块及其内容。
- en: '![Using REPL in Visual Studio](img/8687OS_02_13.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![在Visual Studio中使用REPL](img/8687OS_02_13.jpg)'
- en: As we can see in the preceding screenshot, the user interface of the REPL window
    has a combobox at the top, which allows us to interactively switch the scope.
    IntelliSense is also managed in REPL.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，REPL窗口的用户界面顶部有一个组合框，允许我们交互式地切换作用域。IntelliSense也在REPL中管理。
- en: 'We can execute every piece of code in our project using the **Send to Interactive**
    command in the context menu under the coding panel (or, use the *Ctrl* + *E* shortcut):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用编码面板上下文菜单中的**发送到交互**命令（或使用*Ctrl* + *E*快捷键）执行项目中每一块代码：
- en: '![Using REPL in Visual Studio](img/8687OS_02_14.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![在Visual Studio中使用REPL](img/8687OS_02_14.jpg)'
- en: We can also instruct the debugger to use REPL as the output of the application
    by selecting the **Execute Project in Python Interactive** option from the **DEBUG**
    menu (or by using the *Shift* + *Alt* + *F5* shortcut).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过从**DEBUG**菜单中选择**执行Python交互式项目**选项（或使用*Shift* + *Alt* + *F5*快捷键）来指示调试器使用REPL作为应用程序的输出。
- en: 'It''s also possible to tell the debugger to use REPL as the output of the application
    instead of the standard console output; to do this, just click on the **Execute
    Project in Python Interactive** entry in the **DEBUG** menu or use the *Shift*
    + *Alt* + *F5* shortcut:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以指示调试器将REPL作为应用程序的输出而不是标准控制台输出；为此，只需在**DEBUG**菜单中点击**执行Python交互式项目**条目或使用*Shift*
    + *Alt* + *F5*快捷键：
- en: '![Using REPL in Visual Studio](img/8687OS_02_15.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![在Visual Studio中使用REPL](img/8687OS_02_15.jpg)'
- en: This is particularly useful when developing back-office modules in a web application
    for which the debugging and testing of the code is particularly difficult if you
    wish to do this directly in the browser. Using the REPL tool, you can achieve
    a much more productive and quicker process.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这在开发Web应用程序的后台模块时尤其有用，因为如果您希望在浏览器中直接进行调试和测试，代码的调试和测试特别困难。使用REPL工具，您可以实现更高效和更快捷的过程。
- en: Navigating code with ease
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 轻松导航代码
- en: 'Visual Studio provides lots of features to speed up the process of code navigation;
    at the same time, these features allow Visual Studio to have a streamlined coding
    process with a more holistic view of the project. This is particularly useful
    when you need to switch to a module to see the actual implementation or to update
    some parts of it, even when it is located somewhere else in the project. Some
    of the most important features for code navigation are reachable from the context
    menu in the coding panel:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio提供了许多功能来加速代码导航的过程；同时，这些功能使得Visual Studio能够以更全面的视角进行流畅的编码过程。这在您需要切换到模块以查看其实际实现或更新其某些部分时尤其有用，即使它位于项目的其他位置。代码导航的一些最重要的功能可以从编码面板的上下文菜单中访问：
- en: '![Navigating code with ease](img/8687OS_02_16.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_16.jpg)'
- en: As shown in the preceding screenshot, when the cursor is over a method and the
    contextual menu is opened, the command **Go To Definition** can be found. The
    **Go To Definition** command moves the view to the implemented code of the method
    inside the referenced module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个屏幕截图所示，当光标位于一个方法上并且打开上下文菜单时，可以找到**转到定义**命令。**转到定义**命令将视图移动到引用模块中方法的实现代码。
- en: 'Another useful debugging function is the **Find All References** command (the
    *Shift* + *F12* shortcut). It shows all the points inside the project where the
    method is used:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的调试功能是**查找所有引用**命令（*Shift* + *F12*快捷键）。它显示了项目中使用该方法的全部点：
- en: '![Navigating code with ease](img/8687OS_02_17.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_17.jpg)'
- en: The result of the execution of the **Find All References** command will be shown
    in a new tool window, **Find Symbol Results**. It shows both the definition of
    the method and the actual references inside the project in which the method is
    actually used.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 执行**查找所有引用**命令的结果将在新的工具窗口**查找符号结果**中显示。它显示了方法的定义以及方法实际在项目中使用的实际引用。
- en: Furthermore, the code panel provides tools to quickly navigate to any given
    point of the code. Because of the fact that Visual Studio dynamically analyzes
    the code when a Python file is opened in the code editor panel, the IDE automatically
    creates a hierarchal index of it. To navigate the index, use the two comboboxes
    with the navigation bar that are located at the top of the window.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，代码面板提供了一些工具，可以快速导航到代码的任何给定点。由于 Visual Studio 在代码编辑器面板中打开 Python 文件时动态分析代码，因此
    IDE 会自动创建其层次索引。要导航索引，请使用位于窗口顶部的导航栏上的两个组合框。
- en: The first one shows all the global reachable elements in the file, while the
    second one shows all the inner elements of the item selected in the first combobox.
    The selection of an element in comboboxes controls the view of the code editor
    and jumps to the referenced code.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个显示文件中所有可访问的全局元素，而第二个显示在第一个组合框中选择的项目的所有内部元素。在组合框中选择一个元素控制代码编辑器的视图并跳转到引用的代码。
- en: 'In the following screenshot, we can see how navigation of the comboboxes works,
    showing the hierarchal view by displaying all the inner components of the `html2text`
    class in the second combobox:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的屏幕截图中，我们可以看到组合框的导航方式，通过显示第二个组合框中`html2text`类的所有内部组件来展示层次视图：
- en: '![Navigating code with ease](img/8687OS_02_18.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_18.jpg)'
- en: To easily go back and forward while navigating the code, especially when jumping
    between modules, there are two useful buttons in the toolbar that allow you to
    jump back to the starting point. Look for the two arrow-shaped buttons at the
    very left-hand side of the toolbar. The arrow pointing to the left is to move
    backward, which is accessible through the *Ctrl* + *-* shortcut; the arrow pointing
    to the right is used to move forward, which is accessible through the *Shift*
    + *Ctrl* + *-* shortcut.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在导航代码时，特别是跳转到模块之间时，可以通过工具栏中的两个有用的按钮轻松地前后移动。查找位于工具栏最左侧的两个箭头形状的按钮。指向左边的箭头用于后退，可以通过*Ctrl*
    + *-*快捷键访问；指向右边的箭头用于前进，可以通过*Shift* + *Ctrl* + *-*快捷键访问。
- en: '![Navigating code with ease](img/8687OS_02_19.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_19.jpg)'
- en: The navigation buttons in blue on the left side of the toolbar, are a good way
    to quickly navigate through the code
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 工具栏左侧的蓝色导航按钮是快速导航代码的好方法
- en: The editor window provides a way to navigate the files that are already opened
    through the file tabs located at the top of the window. As of the time of writing
    this book, Visual Studio has refined the features available for this. So now,
    even for PTVS, there are many possibilities to do so. You can close the tabs and
    move them around. A single tab can be shown in an independent window or side-by-side
    with another one.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器窗口提供了一种通过位于窗口顶部文件标签来导航已打开文件的方法。截至本书编写时，Visual Studio 已经对该功能进行了优化。因此，即使是 PTVS，也有许多可能性来实现这一点。您可以关闭标签并将它们移动到其他位置。单个标签可以显示在一个独立的窗口中，或者与另一个窗口并排显示。
- en: '![Navigating code with ease](img/8687OS_02_20.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_20.jpg)'
- en: Visual Studio offers a powerful window management, providing a full set of alignment
    option on every window in the IDE by simply dragging them from the tab
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 提供了强大的窗口管理功能，通过简单地将它们从标签拖动到每个窗口，在 IDE 中为每个窗口提供了一套完整的对齐选项。
- en: 'Tabs can be pinned to the leftmost position of the tab bar so they can be easily
    reached when many files are opened in the code editor. The tab itself has a contextual
    menu with more commands for the file:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 标签可以固定在标签栏的最左侧位置，这样在代码编辑器中打开多个文件时可以轻松访问。标签本身有一个上下文菜单，包含更多针对文件的命令：
- en: '![Navigating code with ease](img/8687OS_02_21.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_21.jpg)'
- en: From the tab contextual menu, you are able to manage the tabs or directly execute
    the code inside the tabs. The **Copy Full Path** and **Open Containing Folder**
    options are very handy during the coding process.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从标签页上下文菜单中，你可以管理标签页或直接在标签页中执行代码。在编码过程中，**复制完整路径**和**打开包含文件夹**选项非常实用。
- en: It is also possible to navigate through the files of the project through the
    **Solution Explorer** window. Clicking on the file of interest will open the file
    in the code editor window. A single click opens the file in a temporary state,
    which means that the file will be opened in a tab at the right end of the tab
    bar. This is really useful when going through various files without working with
    them.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过**解决方案资源管理器**窗口在项目文件之间导航。点击感兴趣的文件将在代码编辑器窗口中打开该文件。单击打开文件处于临时状态，这意味着文件将在标签栏最右端的新标签页中打开。这在浏览多个文件而不进行操作时非常有用。
- en: Unlike a permanent tab, the temporary tab will remain open until you navigate
    to another file through the **Solution Explorer** window. This trims down the
    amount of tabs open in the code editor. As we all know, it will become difficult
    to manage and navigate a huge number of open tabs.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 与永久标签页不同，临时标签页将保持打开状态，直到你通过**解决方案资源管理器**窗口导航到另一个文件。这减少了代码编辑器中打开的标签页数量。众所周知，管理大量打开的标签页将变得困难。
- en: 'Double-clicking on a file in the **Solution Explorer** window opens it in a
    permanent tab in the code editor, which is indicated with a pin icon:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**窗口中双击文件将在代码编辑器中打开一个永久标签页，这由图钉图标表示：
- en: '![Navigating code with ease](img/8687OS_02_22.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![轻松导航代码](img/8687OS_02_22.jpg)'
- en: The "Solution Explorer" window, on the right, is a powerful tool to navigate
    through the files of the projects. Open a file in temporary tab by clicking on
    it. Double-click opens a permanent tab which is indicated with a pin icon
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的“解决方案资源管理器”窗口是一个强大的工具，可以导航项目文件。通过点击文件在临时标签页中打开文件。双击打开一个带有图钉图标的永久标签页。
- en: Object Browser
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对象浏览器
- en: Another way to have a high-level clear view of the project and the elements
    that compose it is to use the **Object Browser** tool. This tool gives you a more
    hierarchal view of the entire project. There are two different ways to access
    the view; let's take a look at both of them.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种以高层次的清晰视角查看项目和组成它的元素的方法是使用**对象浏览器**工具。这个工具为你提供了整个项目的更层次化的视图。有两种不同的方式来访问这个视图；让我们来看看这两种方法。
- en: The first way is to open the full version of the **Object Browser** tool, which
    is accessible from the **VIEW** menu through the main toolbar, or by using the
    *Alt* + *Ctrl* + *J* shortcut.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是打开**对象浏览器**工具的完整版本，它可以通过主工具栏上的**视图**菜单访问，或者使用*Alt* + *Ctrl* + *J*快捷键。
- en: 'Using the shortcut will open a new tab in the code editor window, which will
    present us with the following view:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用快捷键将在代码编辑器窗口中打开一个新标签页，它将显示以下视图：
- en: '![Object Browser](img/8687OS_02_23.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![对象浏览器](img/8687OS_02_23.jpg)'
- en: The **Object Browser** tool is a three-pane window. The top-left pane shows
    a list of all the Python files that compose the project. The top-right pane shows
    a list of elements that compose the selected file (methods, fields, and so on).
    The bottom pane shows the element footprint and related documentation (if available)
    of the selected element.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象浏览器**工具是一个三栏窗口。左上栏显示组成项目的所有Python文件列表。右上栏显示组成所选文件的元素列表（方法、字段等）。下栏显示所选元素的足迹和相关文档（如果有的话）。'
- en: Any of the elements in the **Object Browser** tool are clickable. A double-click
    will open the code file and jump to the code that implements the clicked element.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**对象浏览器**工具中的任何元素都是可点击的。双击将打开代码文件并跳转到实现所选元素的代码。'
- en: 'It is also possible to filter the kind of elements to be shown using the **Object
    Browser** settings icon in the toolbar at the top of the window. It is also possible
    to perform an actual search using the top search bar, which will show all the
    references of the searched text in the underlying panels:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过窗口顶部的工具栏中的**对象浏览器**设置图标来过滤显示的元素类型。您还可以使用顶部的搜索栏进行实际搜索，这将显示在底层面板中搜索文本的所有引用：
- en: '![Object Browser](img/8687OS_02_24.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![对象浏览器](img/8687OS_02_24.jpg)'
- en: 'Besides using the full **Object Browser** tool, we can traverse the project
    hierarchy through the **Class View** window, which is normally located in the
    same window as that of **Solution Explorer**. Switching to the **Class View**
    tab shows the reduced **Object Browser** tool, which is practically the same but
    without the documentation panel. The **Class View** tab is shown as follows:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用完整的**对象浏览器**工具外，我们还可以通过**类视图**窗口遍历项目层次结构，该窗口通常位于与**解决方案资源管理器**相同的窗口中。切换到**类视图**选项卡将显示简化的**对象浏览器**工具，实际上它与完整工具相同，但没有文档面板。**类视图**选项卡显示如下：
- en: '![Object Browser](img/8687OS_02_25.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![对象浏览器](img/8687OS_02_25.jpg)'
- en: This tool gives the exact same functionalities as the full-fledged **Object
    Browser** tool, including the search and filter capabilities. Double-clicking
    on the element will jump to the code at the exact point of the implementation
    as well.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具提供了与完整功能的**对象浏览器**工具完全相同的功能，包括搜索和过滤功能。双击元素将跳转到实现的确切代码点。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced a wide range of usage of IntelliSense with Python,
    including working with classes between project files with simple importing and
    referencing capabilities. We also learned how to use REPL for a more streamlined
    debugging and testing process.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了IntelliSense在Python中的广泛用途，包括使用简单导入和引用功能在项目文件之间处理类。我们还学习了如何使用REPL以更流畅的调试和测试过程。
- en: Now you are familiarized with the different code navigation functionalities
    that can help you find code references using filtering as well as tabs. Combined
    with the **Object Browser** tool, you are able to view your Python project with
    a high-level view of all methods, classes, fields, elements, related documents,
    and so on.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经熟悉了不同的代码导航功能，这些功能可以帮助您使用过滤和选项卡查找代码引用。结合**对象浏览器**工具，您能够以所有方法、类、字段、元素、相关文档等的高级视图查看您的Python项目。
- en: In the next chapter, we will dive into the day-to-day coding tools to guide
    you through the whole programming lifecycle.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将深入探讨日常编码工具，以引导您通过整个编程生命周期。
