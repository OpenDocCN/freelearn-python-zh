- en: Tying It All Together - An IoT Christmas Tree
  id: totrans-0
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有内容联系在一起-物联网圣诞树
- en: Welcome to our final chapter! We will round out this book by pulling together
    various topics and ideas from earlier chapters to build a multifaceted IoT program.
    Specifically, we will be building an internet-controllable Christmas tree, an
    *IoTree,* if you don't mind the pun!
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到我们的最后一章！我们将通过整合前几章的各种主题和想法来完成本书，以构建一个多方面的物联网程序。具体来说，我们将构建一个可以通过互联网控制的圣诞树，一个*IoTree*，如果你不介意的话！
- en: Our approach in this chapter will be to reuse two circuits from previous chapters
    to create Christmas tree lighting (using an APA102 LED strip) and a rocking mechanism
    to make the tree shake (we will use a servo) and jingle (well, it'll jingle as
    it shakes if you decorate the tree with bells!). We will then revisit and adapt
    our learning about RESTful APIs and MQTT to create two ways in which we can control
    the lighting and servo over a network or the internet. We will then revisit dweet.io
    and **If-This-Then-That** (**IFTTT**)and build IFTTT Applets to control the tree
    via email and your voice using Google Assistant!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们的方法是重用前几章的两个电路，以创建圣诞树灯光（使用APA102 LED灯带）和一个摇摆机制来使树摇晃（我们将使用舵机）和发出叮当声（好吧，如果你用铃铛装饰树，它会在摇晃时发出叮当声！）。然后我们将重新审视和调整我们关于RESTful
    API和MQTT的学习，以创建两种方式来通过网络或互联网控制灯光和舵机。然后我们将重新审视dweet.io和**If-This-Then-That**（**IFTTT**）并构建IFTTT
    Applets来通过电子邮件和您的声音使用Google助手来控制树！
- en: 'Here is what we will cover in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章将涵盖的内容：
- en: Overview of the IoT Christmas tree
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物联网圣诞树概述
- en: Building the IoTree circuit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建IoTree电路
- en: Configuring, running, and using the Tree API service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置、运行和使用Tree API服务
- en: Configuring, running, and using the Tree MQTT service
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置、运行和使用Tree MQTT服务
- en: Integrating the IoTree with dweet.io
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将IoTree与dweet.io集成
- en: Integrating with email and Google Assistant via IFTTT
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与电子邮件和Google助手通过IFTTT集成
- en: Ideas and suggestions to extend your IoTree
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展您的IoTree的想法和建议
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To perform the exercises in this chapter, you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行本章的练习，您需要以下内容：
- en: Raspberry Pi 4 Model B
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 树莓派4 Model B
- en: Raspbian OS Buster (with desktop and recommended software)
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspbian OS Buster（带桌面和推荐软件）
- en: Minimum Python version 3.5
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最低Python版本3.5
- en: These requirements are what the code examples in this book are based on. It's
    reasonable to expect that the code examples should work without modification on
    a Raspberry Pi 3 Model B or a different version of Raspbian OS as long as your
    Python version is 3.5 or higher.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些要求是本书中代码示例的基础。可以合理地期望，只要您的Python版本是3.5或更高，代码示例应该可以在树莓派3 Model B或不同版本的Raspbian
    OS上无需修改地工作。
- en: 'To complete the section titled *Integration with Google Assistant*, at a minimum,
    you will need the following prerequisites:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成标题为*与Google助手集成*的部分，至少需要以下先决条件：
- en: A Google account (if you have a Gmail email account, that's all you need)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个Google账户（如果您有Gmail邮箱账户，那就是您需要的全部）
- en: An Android phone or the *Google Assistant* app for iOS
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓手机或iOS的*Google助手*应用
- en: You will find this chapter's source code in the `chapter14` folder in the GitHub
    repository available here: [https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT](https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在GitHub存储库的`chapter14`文件夹中找到本章的源代码，链接在这里：[https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT](https://github.com/PacktPublishing/Practical-Python-Programming-for-IoT)。
- en: 'You will need to execute the following commands in a terminal to set up a virtual
    environment and install the Python libraries required for the code in this chapter:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在终端中执行以下命令来设置虚拟环境并安装本章代码所需的Python库：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following dependencies are installed from `requirements.txt`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下依赖项从`requirements.txt`中安装：
- en: '**PiGPIO**: The PiGPIO GPIO library ([https://pypi.org/project/pigpio](https://pypi.org/project/pigpio))'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PiGPIO**：PiGPIO GPIO库（[https://pypi.org/project/pigpio](https://pypi.org/project/pigpio)）'
- en: '**Flask-RESTful**: A Flask extension for creating RESTful API services ([https://pypi.org/project/Flask-RESTful](https://pypi.org/project/Flask-RESTful))'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Flask-RESTful**：用于创建RESTful API服务的Flask扩展（[https://pypi.org/project/Flask-RESTful](https://pypi.org/project/Flask-RESTful)）'
- en: '**The Paho MQTT** **client**: [https://pypi.org/project/paho-mqtt](https://pypi.org/project/paho-mqtt)'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Paho MQTT** **客户端**：[https://pypi.org/project/paho-mqtt](https://pypi.org/project/paho-mqtt)'
- en: '**Pillow**: **Python Imaging Library** (**PIL**) ([https://pypi.org/project/Pillow](https://pypi.org/project/Pillow))'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Pillow**：**Python Imaging Library**（**PIL**）（[https://pypi.org/project/Pillow](https://pypi.org/project/Pillow)）'
- en: '**The Luma LED Matrix library**: [https://pypi.org/project/luma.led_matrix](https://pypi.org/project/luma.led_matrix)'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Luma LED Matrix库**：[https://pypi.org/project/luma.led_matrix](https://pypi.org/project/luma.led_matrix)'
- en: '**Requests**: A high-level Python library for making HTTP requests ([https://pypi.org/project/requests](https://pypi.org/project/requests))'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Requests**：用于发出HTTP请求的高级Python库（[https://pypi.org/project/requests](https://pypi.org/project/requests)）'
- en: '**PyPubSub**: In-process messaging and events ([https://pypi.org/project/PyPubSub](https://pypi.org/project/PyPubSub))'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyPubSub**：进程内消息传递和事件（[https://pypi.org/project/PyPubSub](https://pypi.org/project/PyPubSub)）'
- en: 'The electronic components we will need for this chapter''s exercises are as
    follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 本章练习所需的电子元件如下：
- en: 1 x MG90S hobby servo (or equivalent 3-wire, 5-volt hobby servo)
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x MG90S爱好舵机（或等效的3线、5伏特爱好舵机）
- en: 1 x APA102 RGB LED strip
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x APA102 RGB LED灯带
- en: 1 x logic level shifter module
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1 x 逻辑电平转换模块
- en: External power supply (at a minimum a 3.3 V/5 V breadboard-mountable power supply)
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 外部电源供应（至少是3.3V/5V面包板可安装的电源供应）
- en: A video showing this tree in action is available at [https://youtu.be/15Xfuf_99Io](https://youtu.be/15Xfuf_99Io). Please
    note that this tree uses RGB LEDs and an alternating blinking animation for the
    lights. We'll be using an APA102 LED strip in this chapter that is capable of
    creating more animation effects. The demo tree can also play a tune, which we
    will not cover in this chapter (although you'll easily be able to add that feature
    if you wish by adopting the RTTTL example from [Chapter 8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml), *Lights,
    Indicators, and Displaying Information*).
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 视频展示了这棵树的运作情况，网址是[https://youtu.be/15Xfuf_99Io](https://youtu.be/15Xfuf_99Io)。请注意，这棵树使用RGB
    LED和交替闪烁的灯光动画。在本章中，我们将使用APA102 LED灯带，它能够创建更多的动画效果。演示树还可以演奏曲调，但我们在本章不会涉及（尽管您可以轻松地通过采用[第8章](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml)中的RTTTL示例来添加该功能）。
- en: Overview of the IoT Christmas tree
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: IoT圣诞树概述
- en: 'Before we commence our chapter by building circuits and looking at code, let''s
    take a moment to understand what our IoTree will do and how we will be building
    it. The tree pictured in *Figure 14.1* is representative of what you could create
    after completing this chapter:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们通过构建电路和查看代码来开始本章之前，让我们花一点时间了解一下我们的IoTree将会做什么以及我们将如何构建它。*图14.1*中的树代表了您在完成本章后可能创建的东西：
- en: '![](assets/2af4c674-ab83-40e1-9837-9b9aae3983d3.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2af4c674-ab83-40e1-9837-9b9aae3983d3.png)'
- en: Figure 14.1 – IoTree example
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 - IoTree示例
- en: Now, I'll need to let you know up front that we're only covering the electronics
    and programming of the IoTree. You'll need to apply your initiative and bring
    your maker skills to the table to build the tree and bring it to life. I suggest
    using a small table-top Christmas tree since part of our build involves a servo
    to *shake* the tree. Our hobby-grade servo is powerful enough to shake a small
    tree; however, it's unlikely that it could shake a full-size Christmas tree (you'll
    need to research and get a more powerful servo if you aspire to upgrade our build
    to a larger tree – and please send me a picture if you do!).
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我需要提前告诉您，我们只会涵盖IoTree的电子和编程部分。您需要发挥自己的主动性，并发挥您的制造技能来建造这棵树并让它活起来。我建议使用一棵小桌面圣诞树，因为我们的构建部分涉及使用伺服机来*摇晃*树。我们的业余级伺服机足够强大，可以摇动一棵小树；但是，它不太可能能够摇动一棵全尺寸的圣诞树（如果您希望将我们的构建升级到更大的树，请研究并获得更强大的伺服机，并且如果您这样做，请给我发一张照片！）。
- en: 'Our base-level tree will comprise the following electronic components:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的基本树将包括以下电子组件：
- en: An APA102 LED light strip for the tree lights (we covered the APA102 LED strip
    in [Chapter 8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml), *Lights, Indicators,
    and Displaying Information*).
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于树灯的APA102 LED灯带（我们在[第8章](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml)中介绍了APA102
    LED灯带，*灯光、指示灯和信息显示*）。
- en: A servo to make the tree *shake* and *jingle –* for this, you will need some
    bell ornaments on the tree that will *jingle* when the tree shakes (we covered
    servos in [Chapter 10](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml), *Movement
    with Servos, Motors, and Steppers*).
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个伺服机使树*摇晃*和*叮当作响* - 为此，您需要在树上放一些铃铛装饰品，当树摇晃时它们会*叮当作响*（我们在[第10章](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml)中介绍了伺服机，*使用伺服机、电机和步进电机进行运动*）。
- en: 'Programmatically and structurally, our tree program will be drawing on the
    following concepts we''ve learned about:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序和结构上，我们的树程序将借鉴我们学到的以下概念：
- en: '**The dweet.io service**: First covered in [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml),
    *Getting Started with Python and IoT*, and revisited in [Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml), *IoT
    Visualization and Automation Platforms*'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dweet.io服务**：首次介绍于[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)，*Python和IoT入门*，并在[第13章](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)，*IoT可视化和自动化平台*中重新讨论'
- en: '**RESTful API with Flask-RESTful**: From [Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml),
    *Networking with RESTful APIs and Web Sockets Using Flask*'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**使用Flask-RESTful的RESTful API**：来自[第3章](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml)，*使用Flask进行RESTful
    API和Web套接字进行网络连接*'
- en: '**Message Queue Telemetry Transport (MQTT)**: Covered in [Chapter 4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml),
    *Networking with MQTT, Python, and the Mosquitto MQTT Broker*.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**消息队列遥测传输（MQTT）**：在[第4章](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml)中介绍，*使用MQTT、Python和Mosquitto
    MQTT代理进行网络连接*。'
- en: '**A thread and Publisher-Subscriber (PubSub) approach to IoT programs**: Covered
    in [Chapter 12](b2a583d8-ea6d-4e0e-9018-26997fbdda4e.xhtml), *Advanced IoT Programming
    Concepts – Threads, AsyncIO, and Event Loops*'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IoT程序的线程和发布-订阅（PubSub）方法**：在[第12章](b2a583d8-ea6d-4e0e-9018-26997fbdda4e.xhtml)中介绍，*高级IoT编程概念-线程、AsyncIO和事件循环*'
- en: '**The IFTTT IoT platform**: Covered in [Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml),* IoT
    Visualization and Automation Platforms*'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**IFTTT IoT平台**：在[第13章](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)中介绍，*IoT可视化和自动化平台*'
- en: As we proceed through this chapter, we are going to assume you have an understanding
    of the concepts from each of the aforementioned chapters, and that you have performed
    the exercises presented in each chapter, including building the circuits and understanding
    the circuit and code-level concepts that make the circuits work.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续本章之前，我们将假设您已经理解了前述每一章的概念，并且已经完成了每一章中提出的练习，包括构建电路和理解使电路工作的电路和代码级概念。
- en: Our first task will be to build the circuit needed for our IoTree, which we
    will do next.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个任务将是构建IoTree所需的电路，接下来我们将进行。
- en: Building the IoTree circuit
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建IoTree电路
- en: 'It''s time to get building! Please construct the circuit illustrated in *Figure
    14.2*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候开始建设了！请构建*图14.2*中所示的电路：
- en: '![](assets/9ee79d65-a7e4-46a2-9fbd-6d89308d52be.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/9ee79d65-a7e4-46a2-9fbd-6d89308d52be.png)'
- en: Figure 14.2 – IoTree circuit schematic diagram
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 - IoTree电路原理图
- en: 'This circuit hopefully looks familiar. It''s a combination of two circuits
    that we have seen before:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个电路应该看起来很熟悉。它是我们之前见过的两个电路的组合：
- en: The APA102 (with a logic level shifter) circuit from *Figure 8.4*, in [Chapter
    8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml), *Lights, Indicators, and Displaying
    Information*
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自*图8.4*的APA102（带逻辑电平转换器）电路，位于[第8章](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml)中，*灯光、指示灯和信息显示*
- en: The servo circuit from *Figure 10.2, *in [Chapter 10](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml),
    *Movement with Servos, Motors, and Steppers*
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自*图10.2*的舵机电路，位于[第10章](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml)中，*使用舵机、电机和步进电机进行运动*
- en: Please consult these respective chapters if you need step-by-step instructions
    on building this circuit on your breadboard.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要逐步构建面包板上的电路的说明，请参阅相应的章节。
- en: Please remember that you will need to use an external power supply to power
    your APA102 and servo, as they will draw too much current to use the 5-volt pin
    on your Raspberry Pi.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您需要使用外部电源来为APA102和舵机供电，因为它们会吸取太多的电流，无法使用树莓派的5伏引脚。
- en: When you have completed your circuit build, next let's briefly discuss three
    programs that can be used to control this circuit.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 当您完成电路构建后，接下来让我们简要讨论三个可以用来控制此电路的程序。
- en: Three IoTree service programs
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三个IoTree服务程序
- en: 'There are three separate programs to accompany our IoTree, each taking a slightly
    different approach to work with our lights and servo. The programs are as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个单独的程序来配合我们的IoTree，每个程序都采用了稍微不同的方法来处理我们的灯光和舵机。这些程序如下：
- en: '**The Tree API service **(found in the `chapter14/tree_api_service` folder):
    This program provides a RESTful API created with Flask-RESTful to control the
    lights and servo. It also includes a basic HTML and JavaScript web app that uses
    the API. We will discuss the Tree API service further in the section titled *Configuring,
    running, and using the Tree API service*.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tree API服务**（位于`chapter14/tree_api_service`文件夹中）：此程序提供了一个使用Flask-RESTful创建的RESTful
    API，用于控制灯光和舵机。它还包括一个使用API的基本HTML和JavaScript Web应用程序。我们将在标题为*配置、运行和使用Tree API服务*的部分进一步讨论Tree
    API服务。'
- en: '**The Tree MQTT service **(found in the `chapter14/tree_mqtt_service` folder):
    This program will allow us to control the lights and servo by publishing MQTT
    messages. We will discuss the Tree MQTT service further in the section titled
    *Configuring, running, and using the Tree MQTT service*.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Tree MQTT服务**（位于`chapter14/tree_mqtt_service`文件夹中）：此程序将允许我们通过发布MQTT消息来控制灯光和舵机。我们将在标题为*配置、运行和使用Tree
    MQTT服务*的部分进一步讨论Tree MQTT服务。'
- en: '**The dweet integration service **(found in the `chapter14/dweet_integration_service` folder):
    This program receives dweets and republishes them as MQTT messages. We can use
    this program together with the *Tree MQTT service* program to control our lights
    and servo using dweet.io, which thus provides us with an easy way to integrate
    our IoTree with a service such as IFTTT. We will discuss the dweet integration
    service more in the section titled *Integrating the IoTree with dweet.io*.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**dweet集成服务**（位于`chapter14/dweet_integration_service`文件夹中）：此程序接收dweets并将它们重新发布为MQTT消息。我们可以将此程序与*Tree
    MQTT服务*程序一起使用，以使用dweet.io来控制我们的灯光和舵机，从而为我们提供了一种将IoTree与IFTTT等服务集成的简单方法。我们将在标题为*将IoTree与dweet.io集成*的部分进一步讨论dweet集成服务。'
- en: Now that we have briefly discussed the programs that make up this chapter's
    examples, let's configure and run our Tree API service and use it to make the
    lights and servo work.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经简要讨论了构成本章示例的程序，让我们配置和运行我们的Tree API服务，并使用它来使灯光和舵机工作。
- en: Configuring, running, and using the Tree API service
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置、运行和使用Tree API服务
- en: 'The Tree API service program provides a RESTful API service for controlling
    our IoTree''s APA102 LED strip and servo. You can find the Tree API service program
    in the `chapter14/tree_api_service` folder. It contains the following files:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Tree API服务程序为控制我们的IoTree的APA102 LED灯带和舵机提供了一个RESTful API服务。您可以在`chapter14/tree_api_service`文件夹中找到Tree
    API服务程序。它包含以下文件：
- en: '`README.md`: The full API documentation with examples for the Tree API service
    program.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：Tree API服务程序的完整API文档，包括示例。'
- en: '`main.py`: This is the program''s main entry point.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.py`：这是程序的主要入口点。'
- en: '`config.py`: Program configuration.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.py`：程序配置。'
- en: '`apa102.py`: A Python class that integrates with the APA102 LED strip. The
    core of this code is very similar to the APA102 Python code we explored back in [Chapter
    8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml), *Lights, Indicators, and Displaying
    Information***,** only now it is structured as a Python class, uses a thread to
    run light animations, plus has a few other small additions, such as code to make
    the LEDs blink.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apa102.py`：与APA102 LED灯带集成的Python类。这段代码的核心与我们在[第8章](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml)中探讨的APA102
    Python代码非常相似，只是现在它被构造为Python类，使用线程来运行灯光动画，还有一些其他小的添加，比如让LED闪烁的代码。'
- en: '`apa102_api.py`: Flask-RESTful resource classes that provide the APA102 API.
    It draws upon the Flask-RESTful code and examples from [Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml),
    *Networking with RESTful APIs and Web Sockets Using Flask*.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apa102_api.py`：提供APA102 API的Flask-RESTful资源类。它借鉴了[第3章](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml)中Flask-RESTful代码和示例，*使用Flask进行RESTful
    API和Web套接字的网络*'
- en: '`servo.py`: A Python class for controlling the servo. It draws upon the servo
    code we covered back in [Chapter 10](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml),
    *Movement with Servos, Motors, and Steppers*.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servo.py`：用于控制舵机的Python类。它借鉴了我们在[第10章](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml)中介绍的舵机代码。'
- en: '`servo_api.py`: Flask-RESTful resource classes that provide the servo API.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servo_api.py`：提供舵机API的Flask-RESTful资源类。'
- en: '`templates`: This folder contains the example web app''s `index.html` file.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`模板`：此文件夹包含示例Web应用程序的`index.html`文件。'
- en: '`static`: This folder contains the static JavaScript libraries and an image
    used by the web app.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`static`：此文件夹包含Web应用程序使用的静态JavaScript库和图像。'
- en: 'A diagram depicting the Tree API service program architecture is shown in *Figure
    14.3*:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3显示了Tree API服务程序架构的图表：
- en: '![](assets/2ad54f4a-949b-4ead-a32f-55220cd18170.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2ad54f4a-949b-4ead-a32f-55220cd18170.png)'
- en: Figure 14.3 – Tree API service architecture block diagram
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 - Tree API服务架构块图
- en: 'Here is the high-level operation of the Tree API service for the API request
    shown by the dotted line in the preceding diagram:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Tree API服务的高级操作，用于前面图表中显示的API请求：
- en: 'An external client makes a POST request to the `/lights/colors` endpoint at
    #1.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 外部客户端向#1处的`/lights/colors`端点发出POST请求。
- en: 'The request is handled by the Flask framework/server at #2. (The Flask and
    Flask-RESTful setup can be found in `main.py`.)'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请求由Flask框架/服务器在#2处处理。（Flask和Flask-RESTful的设置可以在`main.py`中找到。）
- en: 'The `/lights/*` endpoint is routed to the appropriate Flask-RESTful resource
    at #3 (APA102 – that is, the *light* – resources are defined in `apa102_api.py`). The
    endpoint setup and resource registration with Flask-RESTful are found in `main.py`.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`/lights/*`端点被路由到适当的Flask-RESTful资源#3（APA102 - 也就是*light* - 资源在`apa102_api.py`中定义）。端点设置和资源注册在`main.py`中找到。'
- en: 'At #4, the appropriate resource is invoked (in this example, it will be `ColorControl.post()`),
    which then parses and validates the query string parameters (that is, `colors=red%20blue&pattern=yes`).'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在#4处，调用适当的资源（在本例中，将是`ColorControl.post()`），然后解析和验证查询字符串参数（即`colors=red%20blue&pattern=yes`）。
- en: 'Finally, at #5, `ColorControl.post()` then calls the appropriate methods in
    an instance of APA102 (defined in `apa102.py`, and set up in `main.py`) that directly
    interfaces with and updates the physical APA102 LED strip with the repeating pattern
    of red and blue.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在#5处，`ColorControl.post()`调用APA102的实例中的适当方法（在`apa102.py`中定义，并在`main.py`中设置），直接与物理APA102
    LED灯带接口并更新重复的红色和蓝色模式。
- en: Now that we have an understanding of how our Tree API service works, before
    we can run our Tree API service, first we need to check its configuration. We'll
    do that next.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了我们的Tree API服务的工作原理，在运行Tree API服务之前，首先需要检查它的配置。我们接下来会做这个。
- en: Configuring the Tree API service
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Tree API服务
- en: The Tree API service configuration is found in the `chapter14/tree_api_service/config.py` file.
    There are many configuration options in this file, and they mostly relate to the
    configuration of the APA102 (discussed in [Chapter 8](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml),
    *Lights, Indicators, and Displaying Information*) and the servo (discussed in [Chapter
    10,](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml) *Movement with Servos, Motors,
    and Steppers*). You will find this file and the configuration options well commented.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Tree API服务配置在`chapter14/tree_api_service/config.py`文件中。在这个文件中有许多配置选项，它们大多与APA102（在[第8章](d37dafc4-afc7-460c-b200-c2b6e19d0083.xhtml)中讨论）和舵机（在[第10章](8b0b4483-ccde-4a92-896b-039eb94d911a.xhtml)中讨论）的配置有关。你会发现这个文件和配置选项都有很好的注释。
- en: The default configuration will be adequate for running an example locally on
    your Raspberry Pi; however, the one configuration parameter you should check is
    `APA102_NUM_LEDS = 60`. If your APA102 LED strip contains a different number of
    LEDs, please update this configuration appropriately.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置足以在树莓派上本地运行示例；但是，你应该检查的一个配置参数是`APA102_NUM_LEDS = 60`。如果你的APA102 LED灯带包含不同数量的LED，那么请相应地更新此配置。
- en: Let's run the Tree API service program and create some light (and movement)!
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们运行Tree API服务程序并创建一些灯光（和移动）！
- en: Running the Tree API service
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Tree API服务
- en: 'It''s now time to run the Tree API service program and send it RESTful API
    requests to make it work. Here are the steps to run and test our Tree API service:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候运行Tree API服务程序并发送RESTful API请求使其工作了。以下是运行和测试我们的Tree API服务的步骤：
- en: 'Change into the `chapter14/tree_api_service` folder and start the `main.py`
    script, as shown:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`chapter14/tree_api_service`文件夹并启动`main.py`脚本，如下所示：
- en: '[PRE1]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, open a second terminal and run the following `curl` command to set the
    repeating light pattern sequence to `red, blue, black`:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开第二个终端并运行以下`curl`命令，将重复的灯光模式序列设置为`红色，蓝色，黑色`：
- en: '[PRE2]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also in *Terminal 2*, run this next command to start making the lights animate:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 同样在*终端2*中，运行下一个命令开始让灯光动画起来：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Other animation modes you can use for the `mode` parameter, in addition to `left`,
    include `right`, `blink`, `rainbow`, and `stop`. The `speed` parameter takes a
    value between `1` and `10`.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`left`，你还可以在`mode`参数中使用其他动画模式，包括`right`，`blink`，`rainbow`和`stop`。`speed`参数接受`1`到`10`之间的值。
- en: 'To clear or reset the LED strip, run the following command, again in *Terminal
    2*:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要清除或重置LED灯带，再次在*终端2*中运行以下命令：
- en: '[PRE4]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'To make the servo sweep (that is, to make the tree *shake),* run the following
    command in *Terminal 2*:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使舵机扫动（也就是使树摇晃），在*终端2*中运行以下命令：
- en: '[PRE5]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The servo should sweep back and forth a number of times. If you want to make
    the servo sweep more times or need to increase its range of movement, then you
    can adjust the `SERVO_SWEEP_COUNT` and `SERVO_SWEEP_DEGREES` configuration parameters in
    the `chapter14/tree_api_service/config.py` file.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机应该来回扫动几次。如果你想让舵机扫动更多次或需要增加其运动范围，那么你可以在`chapter14/tree_api_service/config.py`文件中调整`SERVO_SWEEP_COUNT`和`SERVO_SWEEP_DEGREES`配置参数。
- en: If you find your LEDs dimming, flickering, or otherwise behaving erratically
    when you make the servo move, or your servo twitches as you change the APA102
    LEDs, chances are that your external power supply cannot deliver enough current
    to run both the LEDs and servo simultaneously. As in interim measure, if you don't
    have another power supply, try reducing the number of LEDs (`APA102_NUM_LEDS`
    in `config.py`) and/or reducing the LED contrast (`APA102_DEFAULT_CONTRAST`, also
    in `config.py`). This will lower the current requirements of the LED strip.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果发现当你移动舵机时LED变暗、闪烁或者表现不稳定，或者当你改变APA102 LED时舵机抽搐，很可能是你的外部电源无法提供足够的电流来同时运行LED和舵机。作为临时措施，如果你没有另一个电源，可以尝试减少LED的数量（`config.py`中的`APA102_NUM_LEDS`）和/或减少LED对比度（`config.py`中的`APA102_DEFAULT_CONTRAST`）。这将降低LED灯带的电流需求。
- en: 'Finally, let''s run the web app and control our IoTree from a web browser by
    opening a web browser on your Raspberry Pi desktop and navigating to the URL `http://localhost:5000`.
    You should see a web page similar to the one pictured here:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，让我们运行Web应用程序，并通过在树莓派桌面上打开Web浏览器并导航到URL `http://localhost:5000`来控制我们的IoTree。您应该看到一个类似于这里图片的网页：
- en: '![](assets/a29059b1-831e-42cb-ae1f-fce5a7279e80.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a29059b1-831e-42cb-ae1f-fce5a7279e80.png)'
- en: Figure 14.4 – Example IoTree web app
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 - 示例IoTree Web应用程序
- en: 'Try the following actions:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试以下操作：
- en: Click on colors in the color bar and watch that color get pushed to the APA102
    LED strip.
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击颜色栏中的颜色，观察该颜色被推送到APA102 LED灯带。
- en: Click the Pattern Fill button to fill the APA102 LED strip with the selected
    colors.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击*Pattern Fill*按钮填充APA102 LED灯带的选定颜色。
- en: Click Left to start an animation.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 点击左侧开始动画。
- en: The JavaScript behind this web app (found in `chapter14/tree_api_service/templates/index.html`)
    is simply calling our IoTree API similar to what we have already done using `curl`,
    only it's doing it using jQuery. jQuery and JavaScript are beyond the scope of
    this book; however, they are briefly touched on in [Chapter 3](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml),
    *Networking with RESTful APIs and Web Sockets Using Flask.*
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 此Web应用程序背后的JavaScript（在`chapter14/tree_api_service/templates/index.html`中找到）只是调用我们的IoTree
    API，类似于我们已经使用`curl`做的事情，只是它使用jQuery来做。 jQuery和JavaScript超出了本书的范围；但是，在[第3章](b9f3d19f-a490-4752-ac4a-5607496dc3d9.xhtml)中简要介绍了它们，*使用Flask进行RESTful
    API和Web Sockets的网络*。
- en: You will find the full set of API documentation for the IoTree with `curl` examples
    in the `chapter14/tree_api_service/README.md` file.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`chapter14/tree_api_service/README.md`文件中找到IoTree的完整API文档集，其中包含`curl`示例。
- en: Our RESTful API implementation provides the basic API endpoints that we need
    for this chapter; however, I am more than confident that you will be able to expand
    and adapt this example for your own projects or add new functionality to your
    IoTree. I'll provide suggestions on how you can expand your IoTree based on what
    you have learned in this book toward the end of the chapter in the section titled *Ideas
    and suggestions to extend your IoTree*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的RESTful API实现提供了本章所需的基本API端点；但是，我非常有信心您将能够扩展和调整此示例以适应您自己的项目，或者向您的IoTree添加新功能。我将在本章末尾的*扩展您的IoTree的想法和建议*部分提供关于如何根据本书学到的知识扩展您的IoTree的建议。
- en: Now that we have run and seen how to control our IoTree's lights and servo with
    a RESTful API, next we will look at an alternative service implementation that
    will allow us to control our IoTree using MQTT.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行并看到如何使用RESTful API控制我们的IoTree的灯和舵机，接下来我们将看一种替代服务实现，它将允许我们使用MQTT控制我们的IoTree。
- en: Configuring, running, and using the Tree MQTT service
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置、运行和使用Tree MQTT服务
- en: 'The Tree MQTT service program provides an MQTT interface for controlling our
    tree''s APA102 LED strip and servo by publishing MQTT messages to MQTT topics. You
    can find the Tree MQTT service program in the `chapter14/tree_mqtt_service` folder,
    and it contains the following files:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Tree MQTT服务程序提供了一个MQTT接口，用于通过发布MQTT消息到MQTT主题来控制树的APA102 LED灯带和舵机。您可以在`chapter14/tree_mqtt_service`文件夹中找到Tree
    MQTT服务程序，并包含以下文件：
- en: '`README.md`: A full list of MQTT topics and message formats for controlling
    your IoTree.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`README.md`：控制您的IoTree的MQTT主题和消息格式的完整列表。'
- en: '`main.py`: This is the program''s main entry point.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.py`：这是程序的主要入口点。'
- en: '`config.py`: Program configuration.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.py`：程序配置。'
- en: '`apa102.py`: This is an exact copy of the `chapter14/tree_api_service/apa102.py`. file'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apa102.py`：这是`chapter14/tree_api_service/apa102.py`的精确副本。文件'
- en: '`servo.py`: This is an exact copy of the `chapter14/tree_api_service/servo.py` file.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servo.py`：这是`chapter14/tree_api_service/servo.py`文件的精确副本。'
- en: '`mqtt_listener_client.py`: This is a class that connects to an MQTT broker
    and subscribes to a topic that will receive messages to control the APA102 and
    servo. When MQTT messages are received, they are turned into a PubSub message
    and published using the `PyPubSub` library, which we discussed in [Chapter 12](b2a583d8-ea6d-4e0e-9018-26997fbdda4e.xhtml),
    *Advanced IoT Programming Concepts - Threads, AsyncIO, and Event Loops*.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mqtt_listener_client.py`：这是一个连接到MQTT代理并订阅将接收消息以控制APA102和舵机的主题的类。当接收到MQTT消息时，它们被转换为PubSub消息并使用`PyPubSub`库发布，我们在[第12章](b2a583d8-ea6d-4e0e-9018-26997fbdda4e.xhtml)中讨论过，*高级IoT编程概念-线程、AsyncIO和事件循环*。'
- en: '`apa102_controller.py`: This code receives PubSub messages sent by `mqtt_listener_client.py` and
    updates the APA102 LED strip as appropriate.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apa102_controller.py`：此代码接收由`mqtt_listener_client.py`发送的PubSub消息，并根据需要更新APA102
    LED灯带。'
- en: '`servo_controller.py`: This code receives PubSub messages sent by `mqtt_listener_client.py` and
    controls the servo.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servo_controller.py`：此代码接收由`mqtt_listener_client.py`发送的PubSub消息并控制舵机。'
- en: 'A diagram depicting the Tree MQTT service program architecture is shown in *Figure
    14.5*:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 显示了Tree MQTT服务程序架构的图表如*图14.5*所示：
- en: '![](assets/0cdf056b-bfbe-4b53-96f9-a8882011c8ba.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0cdf056b-bfbe-4b53-96f9-a8882011c8ba.png)'
- en: Figure 14.5 – Tree MQTT service architecture block diagram
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.5 - Tree MQTT服务架构块图
- en: 'Here is the high-level operation of the Tree MQTT service for the MQTT publication depicted
    by the dotted line in the preceding diagram:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是Tree MQTT服务的高级操作，用虚线表示在前面的图表中发布的MQTT发布：
- en: 'A `red blue` message is published on to the `tree/lights/pattern` topic at
    #1.'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`red blue`消息发布到`tree/lights/pattern`主题上＃1。'
- en: 'The message is received by the Paho-MQTT client at #2. The topic and message
    is parsed in the `on_message()` method in `mqtt_listener_client.py` and mapped
    into a local PubSub topic *pattern* using the `MQTT_TO_PUBSUB_TOPIC_MAPPINGS` mapping
    dictionary found in `config.py`.'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息由Paho-MQTT客户端在＃2处接收。主题和消息在`mqtt_listener_client.py`中的`on_message()`方法中进行解析，并使用`config.py`中的`MQTT_TO_PUBSUB_TOPIC_MAPPINGS`映射字典映射到本地PubSub主题*pattern*。
- en: 'The mapped message and parsed data are dispatched using the `PyPubSub` library
    at #3.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 映射的消息和解析的数据使用`PyPubSub`库在＃3处分发。
- en: 'The `PyPubSub` subscription in `apa102_controller.py` receives the *pattern*
    topic and its payload data at #4'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`apa102_controller.py`中的`PyPubSub`订阅接收*pattern*主题及其负载数据在#4处'
- en: '`apa102_controller.py` handles the message and data at #5 and calls the appropriate
    methods on an APA102 instance (defined in `apa102.py`) that directly interfaces
    and updates the physical APA102 LED strip with the repeating pattern of red and
    blue.'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`apa102_controller.py`处理#5处的消息和数据，并在APA102实例（在`apa102.py`中定义）上调用适当的方法，直接与重复的红色和蓝色模式的物理APA102
    LED灯带进行接口和更新。'
- en: In case you are wondering, the decision to use `PyPubSub` and re-dispatch MQTT
    messages in `mqtt_listener_client.py` was a design decision based on my personal
    preferences to decouple MQTT-related code and hardware control-related code, with
    the goal of making the application easier to read and maintain. An alternative
    – and equally valid – approach could have been to use `apa102.py` and `servo.py` within `mqtt_listener_client.py`
    in direct response to the MQTT messages received.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在想，使用`PyPubSub`并在`mqtt_listener_client.py`中重新分发MQTT消息是基于我个人偏好的设计决定，目的是将MQTT相关的代码和硬件控制相关的代码解耦，以使应用程序更易于阅读和维护。另一种同样有效的方法是在直接响应接收到的MQTT消息时在`mqtt_listener_client.py`中使用`apa102.py`和`servo.py`。
- en: Now that we have an understanding of how our Tree MQTT service works, before
    we can run our Tree MQTT service, first we need to check its configuration. We'll
    do that next.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了我们的Tree MQTT服务是如何工作的，在运行我们的Tree MQTT服务之前，首先我们需要检查它的配置。我们将在下一步进行。
- en: Configuring the Tree MQTT service
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Tree MQTT服务
- en: The Tree MQTT service configuration is found in the `chapter14/tree_mqtt_service/config.py` file.
    Similar to the Tree API service, they mostly relate to the configuration of the
    APA102 and the servo. You will also find this file and its configuration options
    well commented.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: Tree MQTT服务配置位于`chapter14/tree_mqtt_service/config.py`文件中。与Tree API服务类似，它们主要涉及APA102和伺服器的配置。您还会发现这个文件及其配置选项都有很好的注释。
- en: The default configuration will be adequate for running an example locally on
    your Raspberry Pi; however, just as we did for the Tree API service configuration,
    please check and update the `APA102_NUM_LEDS = 60` parameter as appropriate.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 默认配置将足以在树莓派上本地运行示例；但是，就像我们为Tree API服务配置所做的那样，请检查并更新`APA102_NUM_LEDS = 60`参数。
- en: If you also needed to change any of the `APA102_DEFAULT_CONTRAST`, `SERVO_SWEEP_COUNT`,
    or `SERVO_SWEEP_DEGREES` parameters while running the Tree API example, please
    also update these values now for the MQTT example.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在运行Tree API示例时还需要更改`APA102_DEFAULT_CONTRAST`、`SERVO_SWEEP_COUNT`或`SERVO_SWEEP_DEGREES`参数中的任何一个，请现在也更新这些值以供MQTT示例使用。
- en: Once you have made any necessary changes to the configuration, we will proceed
    and run our Tree MQTT service program and publish MQTT messages to make our IoTree
    work.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您对配置进行了任何必要的更改，我们将继续运行我们的Tree MQTT服务程序并发布MQTT消息以使我们的IoTree工作。
- en: Running the Tree MQTT service program
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Tree MQTT服务程序
- en: 'It''s now time to run the Tree MQTT service program and publish MQTT messages
    that will control our IoTree. Here are the steps to run and test our Tree MQTT
    service:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候运行Tree MQTT服务程序并发布MQTT消息来控制我们的IoTree了。以下是运行和测试我们的Tree MQTT服务的步骤：
- en: We must have the Mosquitto MQTT broker service installed and running on our
    Raspberry Pi, plus the Mosquitto MQTT clients tools. Please refer to [Chapter
    4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml), *Networking with MQTT, Python,
    and the Mosquitto MQTT Broker, *if you need to check your installation.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在树莓派上安装并运行Mosquitto MQTT代理服务以及Mosquitto MQTT客户端工具。如果您需要检查您的安装，请参阅[第4章](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml)，*使用MQTT、Python和Mosquitto
    MQTT代理进行网络连接*。
- en: 'Change into the `chapter14/tree_mqtt_service` folder and start the `main.py` script,
    as shown:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到`chapter14/tree_mqtt_service`文件夹并启动`main.py`脚本，如下所示：
- en: '[PRE6]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Next, open a second terminal and send an MQTT message using the following command:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，打开第二个终端并使用以下命令发送MQTT消息：
- en: '[PRE7]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The LED strip will light up with the repeating color pattern – red, blue, black
    (black means that the LED is off).
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: LED灯带将以重复的颜色模式（红色、蓝色、黑色（黑色表示LED关闭））点亮。
- en: Try experimenting with the `--retain` or `-r` retained message option to `mosquirro_pub`.
    If you publish a retained message, it gets re-delivered to your Tree MQTT services
    when it connects to the MQTT broker and subscribes to the `tree/#` topic. This
    provides a way for your IoTree to restore its last state in between restarts.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试使用`--retain`或`-r`保留消息选项来实验`mosquirro_pub`。如果您发布了一个保留消息，当它连接到MQTT代理并订阅`tree/#`主题时，它将被重新传递到您的Tree
    MQTT服务，这为您的IoTree在重新启动之间恢复其上次状态提供了一种方式。
- en: 'Now, run the following command in *Terminal 2* to make the LED strip animate:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在*终端2*中运行以下命令使LED灯带动画起来：
- en: '[PRE8]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'To clear or reset the LED strip, run the following command, again in *Terminal
    2*:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要清除或重置LED灯带，请在*终端2*中再次运行以下命令：
- en: '[PRE9]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In this example (and also the next one in *step 6*), we don't have any message
    content; however, we still need to pass an empty message with the `-m ""` option
    (or, alternatively, `-n`); otherwise, `mosquitto_pub` will abort.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子（以及*步骤6*中的下一个例子）中，我们没有任何消息内容；但是，我们仍然需要传递一个空消息，使用`-m ""`选项（或者，`-n`）；否则，`mosquitto_pub`将中止。
- en: 'Finally, try the following to sweep the servo:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，尝试以下命令来扫描伺服器：
- en: '[PRE10]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The servo will sweep back and forth according to the values set for `SERVO_SWEEP_COUNT` or `SERVO_SWEEP_DEGREES` in
    `chapter14/tree_mqtt_service/config.py`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 伺服器将根据`chapter14/tree_mqtt_service/config.py`中`SERVO_SWEEP_COUNT`或`SERVO_SWEEP_DEGREES`设置来来回扫动。
- en: You will find the full set of MQTT topics and message formats that are recognized
    by the Tree MQTT service, complete with `mosquitto_pub` examples, in the `chapter14/tree_mqtt_service/README.md` file.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`chapter14/tree_mqtt_service/README.md`文件中找到Tree MQTT服务识别的完整MQTT主题和消息格式的完整集合，包括`mosquitto_pub`示例。
- en: Similar to our RESTful API example, our MQTT example provides the minimum functionality
    that we need for this chapter but does provide a basic framework that you can
    expand on for your own future projects, or if you extend your IoTree's features.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 与我们的RESTful API示例类似，我们的MQTT示例提供了本章所需的最小功能，但提供了一个基本框架，您可以在自己的未来项目中扩展，或者如果您扩展了IoTree的功能。
- en: Now that we have run and seen how to control our IoTree's lights and servo with
    MQTT, let's look at an integration service that we can use to couple our Tree
    MQTT service with dweet.io.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经运行并看到如何使用MQTT控制IoTree的灯和伺服，让我们看看我们可以使用的集成服务，将我们的Tree MQTT服务与dweet.io耦合。
- en: Integrating the IoTree with dweet.io
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将IoTree与dweet.io集成
- en: The d*weet integration service*, found in the `chatper14/dweet_integration_service`
    folder, is a Python-based integration service that receives dweets and re-publishes
    them as messages to MQTT topics. This service provides us with a simple approach
    to integrate a service such as IFTTT with our Tree MQTT service program.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '*dweet集成服务*，位于`chatper14/dweet_integration_service`文件夹中，是一个基于Python的集成服务，它接收dweets并将它们重新发布为消息到MQTT主题。此服务为我们提供了一种简单的方法，将诸如IFTTT之类的服务与我们的Tree
    MQTT服务程序集成。'
- en: 'The dweet integration service is made up of the following files:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: dweet集成服务由以下文件组成：
- en: '`main.py`: The main program entry point.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`main.py`：主程序入口点。'
- en: '`config.py`: The configuration parameters.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`config.py`：配置参数。'
- en: '`thing_name.txt`: Where your thing name is saved. This file will be created
    when you first start the program.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`thing_name.txt`：保存您的物体名称的地方。当您第一次启动程序时，将创建此文件。'
- en: '`dweet_listener.py`: The core program code.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`dweet_listener.py`：核心程序代码。'
- en: The core of our dweet service is found in the `dweet_listener.py` file. If you
    inspect this file, you will notice that it is almost identical to the `dweet_led.py` file covered
    in both [Chapter 2](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml), *Getting Started
    with Python and IoT*, and *[Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml),
    IoT Visualization and Automation Platforms* (except it's now wrapped as a Python
    class).
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的dweet服务的核心部分位于`dweet_listener.py`文件中。如果您检查此文件，您会注意到它几乎与[第2章](9436dfb5-3c70-4aff-9f64-512b7843b0cb.xhtml)中涵盖的`dweet_led.py`文件以及*[第13章](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)*，IoT可视化和自动化平台中涵盖的文件几乎相同（除了现在它作为Python类包装）。
- en: 'The core difference is found in the `process_dweet()` method, shown at line
    (1) in the following code, where instead of directly controlling a LED, we instead
    intercept the dweet and then re-publish it to MQTT topics:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 核心区别在于`process_dweet()`方法，在下面的代码中显示为（1）行，这里我们不是直接控制LED，而是拦截dweet，然后重新发布到MQTT主题：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The `publish_mqtt()` method, shown at line (2) in the preceding code and at
    line (3) in the following code, then turns our parsed command string into an MQTT
    topic based on the `ACTION_TOPIC_MAPPINGS` setting found in `chapter14/dweet_mqtt_service/config.py`
    and publishes the message:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`publish_mqtt()`方法，在前面的代码中显示为（2）行，在下面的代码中显示为（3）行，然后根据`chapter14/dweet_mqtt_service/config.py`中的`ACTION_TOPIC_MAPPINGS`设置，将我们解析的命令字符串转换为基于MQTT主题的消息并发布：'
- en: '[PRE12]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Notice, at line (5), that we are using a Paho-MQTT `publish.single()` convenience
    method, rather that than the fully fledged MQTT client approach we used in [Chapter
    4](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml), *Networking with MQTT, Python,
    and the Mosquitto MQTT Broker* (and that was also used in the Tree MQTT service
    program).
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，在（5）行，我们使用了Paho-MQTT的`publish.single()`便利方法，而不是我们在[第4章](6947b564-6182-4ec9-998a-37f636c0bce6.xhtml)中使用的完整的MQTT客户端方法，*使用MQTT、Python和Mosquitto
    MQTT代理进行网络连接*（并且在Tree MQTT服务程序中也使用）。
- en: At the moment, I just want to point out line (4), where we set the `retain`
    variable (also notice its use in `publish.single()`). We will discuss this message
    retention more in the following section when we discuss the service configuration
    file.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我只想指出（4）行，我们在那里设置了`retain`变量（还注意到它在`publish.single()`中的使用）。在接下来的部分中，当我们讨论服务配置文件时，我们将更多地讨论此消息保留。
- en: 'A diagram depicting the Tree service program architecture is shown in *Figure
    14.6*:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6显示了树服务程序架构的图表：
- en: '![](assets/53f844ed-a48c-4006-a903-92e84dff021f.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/53f844ed-a48c-4006-a903-92e84dff021f.png)'
- en: Figure 14.6 – dweet integration service architecture block diagram
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.6 - dweet集成服务架构块图
- en: 'Here is the high-level operation of the dweet integration service for the request
    shown by the blue dotted line in the preceding diagram:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这是dweet集成服务的高级操作，由前面图中蓝色虚线所示的请求：
- en: 'A dweet is created at #1.'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在#1处创建了一个dweet。
- en: '`dweet_listener.py` receives the dweet at #2 and parses the data contained
    in the `command` parameter. The action contained within the commend is mapped
    into an MQTT topic using the `ACTION_TOPIC_MAPPINGS` mapping dictionary found
    in `config.py`.'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`dweet_listener.py`在#2处接收dweet并解析`command`参数中包含的数据。命令中包含的操作使用`config.py`中找到的`ACTION_TOPIC_MAPPINGS`映射字典映射为MQTT主题。'
- en: 'A message is published to the MQTT broker to the mapped MQTT topic at #3. The
    message''s *retained* flag is set according to the `TOPIC_RETAIN_MESSAGE` mapping
    dictionary found in `config.py`.'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 消息被发布到MQTT代理到映射的MQTT主题#3。根据`config.py`中找到的`TOPIC_RETAIN_MESSAGE`映射字典，设置消息的*保留*标志。
- en: After the publication of the MQTT message, if your Tree MQTT service is running
    and connected to the same MQTT broker, it will receive the MQTT message and update
    your IoTree accordingly.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 发布MQTT消息后，如果您的Tree MQTT服务正在运行并连接到相同的MQTT代理，它将接收MQTT消息并相应地更新您的IoTree。
- en: Now that we have an understanding of how our dweet integration service works,
    before we can run our dweet integration service, first we need to check its configuration.
    We'll do that next.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们了解了我们的dweet集成服务的工作原理，然后我们可以运行我们的dweet集成服务之前，首先需要检查其配置。我们接下来会做这个。
- en: Configuring the Tree MQTT service
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置Tree MQTT服务
- en: 'The dweet integration service configuration is found in the `chapter14/dweet_integration_service/config.py` file. 
    There are a number of configuration options relating to how the service works,
    and the defaults will be adequate for running this service locally on your Raspberry
    Pi where you also have your Mosquitto MQTT broker running. The configuration parameters
    are well commented in this file; however, I will make mention of the `ACTION_TOPIC_MAPPINGS`
    and `TOPIC_RETAIN_MESSAGE` parameters:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: dweet集成服务的配置位于`chapter14/dweet_integration_service/config.py`文件中。有许多与服务工作方式相关的配置选项，默认配置将足以在您的Raspberry
    Pi上本地运行此服务，同时您还在那里运行您的Mosquitto MQTT代理。这个文件中的配置参数有很好的注释；但是，我将提到`ACTION_TOPIC_MAPPINGS`和`TOPIC_RETAIN_MESSAGE`参数：
- en: '[PRE13]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The dweet integration service maps *dweeted commands* into *MQTT topics*. It's
    the `ACTION_TOPIC_MAPPINGS` configuration parameter that determines how commands
    are mapped into MQTT topics. We'll discuss this idea of *commands* in the next
    section.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: dweet集成服务将*dweeted命令*映射到*MQTT主题*。决定如何将命令映射到MQTT主题的是`ACTION_TOPIC_MAPPINGS`配置参数。我们将在下一节讨论这个*命令*的概念。
- en: The MQTT topics mapped and used by the dweet integration service must match
    those used by a Tree MQTT service. The default configurations for each service
    use the same topics.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 由dweet集成服务映射和使用的MQTT主题必须与Tree MQTT服务使用的主题相匹配。每个服务的默认配置都使用相同的主题。
- en: 'The `TOPIC_RETAIN_MESSAGE` configuration shown in the following code determines
    which MQTT topics will have their message''s *retained* flag set. It''s this configuration
    (`True` or `False`) that is used to set the `retained` parameter on `single.publish()`,
    as we pointed out in the previous section:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码中显示的`TOPIC_RETAIN_MESSAGE`配置确定了哪些MQTT主题将设置其消息的*保留*标志。正如我们在上一节中指出的那样，这个配置（`True`或`False`）用于在`single.publish()`上设置`retained`参数：
- en: '[PRE14]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Now that we have discussed the configuration file, let's start our dweet integration
    service and send it dweets that will control our IoTree.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经讨论了配置文件，让我们启动我们的dweet集成服务，并发送dweets来控制我们的IoTree。
- en: Running the dweet integration service program
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行dweet集成服务程序
- en: 'Our dweet integration service works by receiving dweets in a predefined format
    and turns them into MQTT topics and messages as per the configuration parameters
    we discussed in the previous section. We''ll discuss this dweet format shortly
    as we run and test the dweet integration service. Here are the steps we need to
    follow:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的dweet集成服务通过按照我们在上一节中讨论的配置参数将预定义格式的dweets转换为MQTT主题和消息来工作。当我们运行和测试dweet集成服务时，我们将很快讨论这个dweet格式。以下是我们需要遵循的步骤：
- en: Firstly, make sure you have the *Tree MQTT service* program from the previous
    section running in a terminal. It is the Tree MQTT service that will receive and
    process the MQTT messages published by the dweet integration service.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，请确保您在终端上运行了上一节中的*Tree MQTT服务*程序。正是Tree MQTT服务将接收并处理dweet集成服务发布的MQTT消息。
- en: 'Next, navigate to the `chapter14/dweet_integration_service` folder in a new
    terminal and start the `main.py` program, as shown (remember your thing name will
    be different):'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在新的终端中导航到`chapter14/dweet_integration_service`文件夹，并启动`main.py`程序，如下所示（请记住您的物体名称将不同）：
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Copy and paste the following URLs into a web browser to control your IoTree.
    Use the thing name shown in your output in place of the `<thing_name>` text:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下URL复制并粘贴到Web浏览器中以控制您的IoTree。使用您输出中显示的物体名称替换`<thing_name>`文本：
- en: '`https://dweet.io/dweet/for/<thing_name>?command=pattern%20red%20blue%20black`'
  id: totrans-203
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: dweet.io/dweet/for/<thing_name>?command=pattern%20red%20blue%20black
- en: '`https://dweet.io/dweet/for/<thing_name>?command=animation%20left`'
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dweet.io/dweet/for/<thing_name>?command=animation%20left
- en: '`https://dweet.io/dweet/for/<thing_name>?command=speed%2010`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dweet.io/dweet/for/<thing_name>?command=speed%2010
- en: '`https://dweet.io/dweet/for/<thing_name>?command=clear`'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dweet.io/dweet/for/<thing_name>?command=clear
- en: '`https://dweet.io/dweet/for/<thing_name>?command=sweep`'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: dweet.io/dweet/for/<thing_name>?command=sweep
- en: It may take a few moments between calling one of these URLs and it being received
    by your dweet integration service.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用这些URL之间可能需要一些时间，然后它将被您的dweet集成服务接收。
- en: As you will see in the `command` parameter in the preceding URLs, the format
    of our dweets is `<action> <data1> <data2> <dataN>`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在前面的URL中的`command`参数中所看到的，我们的dweet的格式是`<action> <data1> <data2> <dataN>`。
- en: You will find the full set of dweet command strings recognized by the default
    configuration in `config.py`, complete with example URLs, in the `chapter14/dweet_integration_service/README.md` file.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在`config.py`文件中，您将找到默认配置中识别的完整的dweet命令字符串集，包括示例URL，在`chapter14/dweet_integration_service/README.md`文件中。
- en: Well done! We've just created a simple integration service using dweet.io and
    MQTT and learned a simple and non-invasive approach that allows us to control
    our tree over the internet that did not require you to make any network or firewall
    configurations.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 干得好！我们刚刚使用dweet.io和MQTT创建了一个简单的集成服务，并学会了一种简单且非侵入式的方法，可以让我们在互联网上控制我们的tree，而无需进行任何网络或防火墙配置。
- en: When designing an IoT project and considering how data is moved around the internet
    and networks, it's common to find that you need to design and build some form
    of integration to bridge systems that are built on different transport mechanisms.
    Our example in this section illustrates a scenario where we bridge an MQTT service
    (our IoTree MQTT service) with a polling-based RESTful API service (dweet.io).
    While every integration has its own requirements, hopefully this example has provided
    you with a rough roadmap and approach that you can adapt and build upon in the
    future when you encounter these scenarios.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计物联网项目并考虑数据在互联网和网络中的传输方式时，通常会发现您需要设计和构建某种集成形式，以桥接建立在不同传输机制上的系统。本节中的示例说明了一个场景，我们在其中将MQTT服务（我们的IoTree
    MQTT服务）与基于轮询的RESTful API服务（dweet.io）进行了桥接。虽然每个集成都有自己的要求，但希望这个示例为您提供了一个大致的路线图和方法，以便在将来遇到这些情况时进行调整和构建。
- en: Now that we have our dweet integration service running and have tested that
    it's working, let's see how we can use it together with the IFTTT platform.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的dweet集成服务正在运行，并且已经测试过它正在工作，让我们看看如何将其与IFTTT平台一起使用。
- en: Integrating with email and Google Assistant via IFTTT
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过电子邮件和Google助手与IFTTT集成
- en: Now comes the really fun part – let's make our tree controllable over the internet.
    As a spoiler, I'm not going to hold your hand through this integration because
    the core concepts on using dweet.io and IFTTT together were explained in detail
    in [Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml), *IoT Visualization
    and Automation Platforms.* In particular, we learned how to integrate our Raspberry
    Pi with IFTTT and email to control a LED.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是真正有趣的部分——让我们使我们的树可以通过互联网进行控制。作为一个剧透，我不会在这个集成中手把手地指导您，因为在[第13章](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)中详细解释了使用dweet.io和IFTTT的核心概念，*IoT可视化和自动化平台*。特别是，我们学会了如何将我们的树莓派与IFTTT和电子邮件集成，以控制LED。
- en: What I will do, however, is give you screenshots of my IFTTT configuration so
    that you can verify what you set up. Plus, as a bonus, I'll also give you a tip
    and screenshot on how to integrate with Google Assistant so that you can voice-control
    your IoTree!
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我将给您我的IFTTT配置的截图，以便您可以验证您设置的内容。另外，作为一个额外的奖励，我还将给您一个关于如何与Google助手集成的提示和截图，以便您可以语音控制您的IoTree！
- en: At the time of writing, IFTTT has a Google Assistant service that can take arbitrary
    spoken text (in IFTTT lingo, an *ingredient).* I did check out Alexa integration
    but unfortunately, the Alexa IFTTT service could not take arbitrary input and
    so was not compatible with our example.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，IFTTT有一个Google助手服务，可以接受任意口头输入（在IFTTT术语中称为*成分*）。我确实尝试了Alexa集成，但不幸的是，Alexa
    IFTTT服务无法接受任意输入，因此与我们的示例不兼容。
- en: First, we will look at a few pointers on how to integrate our IoTree with email.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将看一下如何将我们的IoTree与电子邮件集成。
- en: Integration with email
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与电子邮件的集成
- en: 'The process for integrating with email or Twitter is the same as what we covered
    in [Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)*, IoT Visualization
    and Automation Platforms*, with the following changes:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 与电子邮件或Twitter集成的过程与我们在[第13章](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)*IoT可视化和自动化平台*中介绍的内容相同，只是有以下更改：
- en: Rather than using `LED` as the hashtag (the **Complete Trigger Fields Page**
    step in IFTTT), use `TREE`. This way, your email subject can be something such
    as `#TREE pattern red blue` or `#TREE animation blink`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不要使用`LED`作为标签（在IFTTT的**完成触发器字段页面**步骤中），使用`TREE`。这样，您的电子邮件主题可以是`#TREE模式红蓝`或`#TREE动画闪烁`之类的内容。
- en: 'When configuring the That webhook service, you need to use the dweet URL printed
    on the terminal previously when you ran the dweet integration service. An example
    from my configuration is shown in the following figure. Remember the *thing name*
    in your URL will be different:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在配置That webhook服务时，您需要使用之前在终端上运行dweet集成服务时打印的dweet URL。我的配置示例如下图所示。请记住，您URL中的*thing
    name*将是不同的：
- en: '![](assets/5e11ac9b-937c-47a4-8a18-90f29e95f3c5.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5e11ac9b-937c-47a4-8a18-90f29e95f3c5.png)'
- en: Figure 14.7 – Webhook configuration
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.7 – Webhook配置
- en: 'Once you have completed setting up your IFTTT Applet, try emailing `trigger@applet.ifttt.com`
    with the following subject:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成设置IFTTT Applet后，尝试发送电子邮件至`trigger@applet.ifttt.com`，主题如下：
- en: '`#TREE pattern red blue black`'
  id: totrans-226
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#TREE模式红蓝黑色`'
- en: '`#TREE animation left`'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`#TREE动画向左`'
- en: A few moments after emailing or tweeting the `#TREE pattern red blue black` command,
    your tree's lights will change to these colors in a repeating pattern. Similarly,
    a few moments after emailing or tweeting `#TREE animation left`, your tree lights
    will start animating.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 发送电子邮件或推文`#TREE模式红蓝黑色`命令后的几分钟内，您的树灯将以这些颜色进行重复变换。同样，发送电子邮件或推文`#TREE动画向左`后的几分钟内，您的树灯将开始动画。
- en: Remember, you will need to have both the Tree MQTT service and dweet integration
    service running in terminals for this example to work. It may also take a few
    moments after sending an email or posting a tweet before your IoTree changes.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，为了使此示例工作，您需要在终端上同时运行Tree MQTT服务和dweet集成服务。在发送电子邮件或发布推文后，您的IoTree更改可能需要一些时间。
- en: Once you have been able to control your IoTree with email, next we'll look at
    the steps necessary to add voice control using Google Assistant.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您能够通过电子邮件控制您的IoTree，接下来我们将看一下添加使用Google助手进行语音控制所需的步骤。
- en: Integration with Google Assistant
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与Google助手的集成
- en: Let's make our IoTree voice-controllable using Google Assistant.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用Google助手使我们的IoTree可以通过语音控制。
- en: '*Google Assistant* comes in many other forms, including Google Home, Google
    Nest, and Google Mini. These products will also work with the IFTTT Google Assistant
    integration and your IoTree as long as they are signed in to the same Google Account
    you use with IFTTT.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '*Google助手*有许多其他形式，包括Google Home、Google Nest和Google Mini。只要它们登录到与IFTTT使用的相同的Google帐户，这些产品也将与IFTTT
    Google助手集成和您的IoTree一起使用。'
- en: 'To create our integration, we need to link your Google account with the IFTTT
    Google Assistant service and call a dweet.io URL when it receives commands. Here
    are the high-level steps to follow:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的集成，我们需要将您的Google帐户与IFTTT Google助手服务链接，并在接收命令时调用dweet.io URL。以下是要遵循的高级步骤：
- en: Log in to your IFTTT account.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录到您的IFTTT帐户。
- en: Create a new Applet.
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的Applet。
- en: For the This part of the Applet, use Google Assistant Service.
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Applet的这一部分，请使用Google助手服务。
- en: Next, you will be asked to connect and allow IFTTT to use your Google account.
    Follow the on-screen instructions to connect IFTTT and your Google account.
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您将被要求连接并允许IFTTT使用您的Google帐户。按照屏幕上的说明连接IFTTT和您的Google帐户。
- en: 'Now it''s time to select the Google Assistant trigger. Choose Say a phrase
    with a text ingredient. A sample trigger configuration is shown in *Figure 14.8*:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是选择Google助手触发器的时候了。选择“说一个带有文本成分的短语”。示例触发器配置如*图14.8*所示：
- en: '![](assets/5df6808b-bafd-4740-9c73-09ba7a5e7273.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5df6808b-bafd-4740-9c73-09ba7a5e7273.png)'
- en: Figure 14.8 – Google Assistant trigger example
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.8 - Google助手触发器示例
- en: It's the $ sign in Tree $ shown in the preceding screenshot that gets turned
    into an IFTTT ingredient that we will use with our webhook service (which we'll
    see in a later step).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中显示的Tree $中的$符号被转换为我们将与我们的webhook服务一起使用的IFTTT成分（我们将在后面的步骤中看到）。
- en: 'With this trigger configuration, you can say commands such as the following
    to control your IoTree:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这个触发器配置，你可以说出像以下这样的命令来控制你的IoTree：
- en: '"Tree pattern red blue black"'
  id: totrans-244
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Tree pattern red blue black"'
- en: '"Set tree animation blink"'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Set tree animation blink"'
- en: '"Tree clear"'
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Tree clear"'
- en: It's time to configure the That part of the IFTTT Applet. Search for and select
    WebHook.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在是配置IFTTT Applet的那部分的时间。搜索并选择WebHook。
- en: Configuration of the webhook service is the same as the process we covered previously
    under the *Integration with email *heading in *step 2*, and as shown in *Figure
    14.7.*
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: webhook服务的配置与我们在*步骤2*中之前介绍的*与电子邮件集成*标题下的过程相同，并且如*图14.7.*所示。
- en: Continue and complete the creation of your IFTTT Applet.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 继续并完成创建你的IFTTT Applet。
- en: 'Ask your Google Assistant the following commands:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 询问你的Google助手以下命令：
- en: '"Tree pattern red blue black"'
  id: totrans-251
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Tree pattern red blue black"'
- en: '"Tree animation blink"'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Tree animation blink"'
- en: '"Tree clear"'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Tree clear"'
- en: '"Tree sweep" (or "tree jingle")'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '"Tree sweep"（或“tree jingle”）'
- en: Or any other command documented in the `chapter14/dweet_integration_service/README.md` file
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 或者`chapter14/dweet_integration_service/README.md`文件中记录的任何其他命令
- en: Remember, it may take a moment after Google Assistant acknowledges your request
    for your IoTree to start changing.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，Google助手承认你的请求后，你的IoTree可能需要一会儿才能开始改变。
- en: 'Here is a screenshot of my Google Assistant dialog on my iPhone:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我在iPhone上的Google助手对话框的屏幕截图：
- en: '![](assets/67a87536-2224-4688-9c18-4d3ef28ecff6.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/67a87536-2224-4688-9c18-4d3ef28ecff6.png)'
- en: Figure 14.9 – Google Assistant dialog to control the IoTree
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.9 - 用于控制IoTree的Google助手对话框
- en: If the integration is working, Google Assistant will respond with "*Ok, Updating
    Tree*"(or whatever text you used at *step 5*), and moments later, your IoTree
    will respond.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 如果集成工作正常，Google助手将回复“好的，正在更新树”（或者你在*步骤5*中使用的任何文本），然后几分钟后，你的IoTree将做出响应。
- en: The important thing to remember is that we must speak commands exactly as they
    are interpreted by the dweet integration service – for example, as they would
    appear in the command parameter to a dweet URL, such as `https://dweet.io/dweet/for/<thing_name>?command=pattern
    red blue black`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要记住，我们必须准确地说出命令，就像它们被dweet集成服务解释的那样 - 例如，它们会出现在dweet URL的命令参数中，如`https://dweet.io/dweet/for/<thing_name>?command=pattern
    red blue black`。
- en: Remember to prefix them with the word "Tree" (or "Set Tree"). This text is what
    triggers your IFTTT Applet. Just speaking a command alone will not trigger your
    Applet.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 记得在它们之前加上“Tree”（或“Set Tree”）这个词。这个文本是触发你的IFTTT Applet的。只说一个命令本身不会触发你的Applet。
- en: If you use an Android phone or the Google Assistant app for iOS, you will be
    able to see how your spoken words are turned into textual commands, which can
    help you troubleshoot commands that are not working or are misunderstood.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用安卓手机或iOS的Google助手应用程序，你将能够看到你说出的话是如何转换为文本命令的，这可以帮助你排除不起作用或被误解的命令。
- en: You've just learned how to create three IFTTT integrations to control your IoTree
    using email and your voice, and you can easily adapt the same basic ideas and
    processes to control and automate other electronic circuits we've seen in this
    book.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 你刚刚学会了如何创建三个IFTTT集成，以使用电子邮件和语音控制你的IoTree，并且你可以轻松地将相同的基本思想和流程适应于控制和自动化本书中所见的其他电子电路。
- en: Furthermore, as we discussed in [Chapter 13](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml),
    *IoT Visualization and Automation Platforms*, IFTTT provides many *triggers* and
    *actions* that you can combine to build automation workflow *Applets.* Between
    this chapter and the previous one, you have now created several Applets, so I
    have every confidence that you'll be able to explore the IFTTT ecosystem and create
    all sorts of interesting Applets that work together with your Raspberry Pi.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，正如我们在[第13章](861a1e79-2f40-4a60-bb40-82101ee42e63.xhtml)中讨论的那样，*物联网可视化和自动化平台*，IFTTT提供了许多*触发器*和*操作*，你可以组合起来构建自动化工作流*Applets*。在本章和上一章之间，你现在已经创建了几个Applets，所以我完全相信你将能够探索IFTTT生态系统，并创建各种有趣的Applets，这些Applets可以与你的树莓派一起工作。
- en: Before we conclude this chapter (and the book!), I want to leave you with a
    few ideas and experiments you can conduct to further expand your IoTree's capabilities.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们结束本章（和本书！）之前，我想给你留下一些想法和实验，以进一步扩展你的IoTree的功能。
- en: Ideas and suggestions to extend your IoTree
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展你的IoTree的想法和建议
- en: The code and electronics we have used throughout this chapter have given us
    a foundation that we can build upon. This might be to extend your IoTree, or as
    the basis for other IoT projects.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章中使用的代码和电子设备为我们提供了一个基础，我们可以在此基础上构建。这可能是扩展你的IoTree，也可能是其他物联网项目的基础。
- en: 'Here are a few suggestions you can try:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些建议，你可以尝试：
- en: Add and integrate a PIR sensor that plays an RTTTL tune whenever anyone walks
    past your IoTree. After all, what electronic Christmas gadget is complete unless
    it drives everyone crazy by playing tunes over and over and over and over...
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加并集成一个PIR传感器，每当有人走过你的IoTree时，它就会播放一个RTTTL曲调。毕竟，如果不一遍又一遍地播放曲调，什么电子圣诞小工具才算完整呢...
- en: Add and integrate an RGB LED to the top of the tree (maybe inside a transparent
    star), or use RGB LEDs in place of – or together with – the APA102 LED strip.
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将RGB LED添加并集成到树的顶部（也许在透明的星星内），或者在APA102 LED条的位置使用RGB LED或与之一起使用。
- en: Build multiple IoTrees. If you use MQTT, they'll synchronize!
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建多个IoTree。如果你使用MQTT，它们将同步！
- en: Try to build a WebSocket integration and an accompanying web app.
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 尝试构建WebSocket集成和相应的Web应用程序。
- en: The current dweet Google Assistant integration requires you to speak commands
    exactly. Can you create an upgrade that is a little *fuzzier* – that is, that
    can parse spoken text and work out what command is spoken?
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当前的dweet Google助手集成要求您精确发出命令。您能否创建一个更模糊的升级-也就是说，可以解析口头文本并找出口头命令是什么？
- en: We used dweet.io (together with MQTT) in our IFTTT examples, so we did not have
    to worry about firewall configurations. You might want to investigate opening
    up a firewall port at your place or investigate services such as LocalTunnels
    ([https://localtunnel.github.io/www](https://localtunnel.github.io/www)) or ngrok
    ([https://ngrok.com](https://ngrok.com)). These approaches will allow you to use
    IFTTT webhooks to directly communicate with your IoTree's RESTful API. However,
    do remember that our RESTful API examples are not secured – they are not using
    HTTPS and there is no authentication mechanism such as a username and password
    to restrict access to the APIs, so you might want to also research how to secure
    a Flask-based API and perform these upgrades first.
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在我们的IFTTT示例中，我们使用了dweet.io（与MQTT一起），因此我们不必担心防火墙配置。您可能希望调查在您的位置打开防火墙端口或调查诸如LocalTunnels（https://localtunnel.github.io/www）或ngrok（https://ngrok.com）之类的服务。这些方法将允许您使用IFTTT
    Webhooks直接与您的IoTree的RESTful API进行通信。但是，请记住，我们的RESTful API示例没有得到保护-它们没有使用HTTPS，也没有身份验证机制，例如用户名和密码来限制对API的访问，因此您可能还希望研究如何保护基于Flask的API并首先执行这些升级。
- en: Obviously, these are just a few of my suggestions. We've covered many circuits
    during our journey, so use your imagination and see what you come up with – and
    have fun!
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，这些只是我的一些建议。在我们的旅程中，我们涵盖了许多电路，所以发挥你的想象力，看看你能想出什么-并且要玩得开心！
- en: Summary
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Congratulations! We have now reached the end of the chapter and the end of the
    book!
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们现在已经到达了本章和整本书的结尾！
- en: In this chapter, we ran through the electronics and tested programs that control
    those electronics that create the basis of an IoT Christmas tree. We've seen a
    RESTful API that can control our IoTree's lights and servo, as well as a comparable
    MQTT implementation. We also looked at a dweet.io-to-MQTT integration service,
    which we coupled with IFTTT to provide a mechanism to control out IoTree using
    email and Google Assistant.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们运行了电子设备并测试了控制这些电子设备的程序，这些程序构成了物联网圣诞树的基础。我们看到了一个可以控制我们IoTree的灯和伺服的RESTful
    API，以及一个类似的MQTT实现。我们还研究了一个dweet.io到MQTT的集成服务，我们将其与IFTTT配对，以提供一种使用电子邮件和Google助手来控制我们IoTree的机制。
- en: Throughout our journey in this book, we have covered many concepts and technologies,
    including a variety of networking techniques, electronic and interfacing fundamentals,
    and a range of practical examples using sensors and actuators with your Raspberry
    Pi. We have also looked at automation and visualization platforms and finished
    off, in this chapter, with one example of tying our learnings together.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中的旅程中，我们涵盖了许多概念和技术，包括各种网络技术，电子和接口基础知识，以及使用传感器和执行器与树莓派的一系列实际示例。我们还研究了自动化和可视化平台，并在本章中完成了一个将我们的学习结合在一起的示例。
- en: I had a couple of core intentions in mind when I wrote this book. One of my
    intentions was to share and explain the reasons behind *how* we connect sensors
    and actuators to a Raspberry Pi, and *why* we accompany them with additional components
    such as resistors to create voltage dividers. My second core intention was to provide
    you with a variety of networking techniques and options that are applicable to
    IoT projects.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 当我写这本书时，我有一些核心意图。我的一个意图是分享和解释我们如何将传感器和执行器连接到树莓派的原因，以及为什么我们要使用额外的组件，如电阻器来创建电压分压器。我的第二个核心意图是为您提供适用于物联网项目的各种网络技术和选项。
- en: I believe that the software and hardware fundamentals, together with practical
    examples you have learned throughout our journey, will provide you with many skills
    and insights to not only help you design and build your own complex IoT projects
    but to also understand, at a fundamental level, how existing IoT projects work
    at a software, networking and electronics level.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我相信，我们在旅程中学到的软件和硬件基础知识，以及实际示例，将为您提供许多技能和见解，不仅可以帮助您设计和构建自己的复杂物联网项目，还可以在软件、网络和电子方面在基本水平上理解现有的物联网项目是如何工作的。
- en: It is my sincere hope that you have enjoyed this book, learned a lot, and picked
    up many practical tips along the way! All the best on your IoT journey, and I
    hope you create some amazing things!
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 我真诚地希望你喜欢这本书，学到了很多，并且在阅读过程中获得了许多实用的技巧！祝你在物联网之旅中一切顺利，希望你能创造一些了不起的东西！
- en: Questions
  id: totrans-284
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: 'As we conclude, here is a list of questions for you to test your knowledge
    of this chapter''s material. You will find the answers in the *Assessments* section
    of the *Appendix*:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这里是一些问题供您测试对本章材料的了解。您将在附录的评估部分中找到答案：
- en: Why, in our MQTT service example, did we use `PyPubSub` to re-dispatch MQTT
    messages?
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们的MQTT服务示例中，为什么我们使用`PyPubSub`重新分发MQTT消息？
- en: Why is using the Google Assistant app on a phone (or tablet) useful during development
    when integrating with or debugging an IFTTT Google Assistant Applet?
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在与或调试IFTTT Google助手Applet集成时，为什么在手机（或平板电脑）上使用Google助手应用程序很有用？
- en: You are working on an existing weather monitoring project that uses MQTT as
    its network transport layer to connect many distributed devices. You have been
    asked to integrate the application with an IFTTT service. How do you do this?
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您正在处理一个现有的天气监测项目，该项目使用MQTT作为其网络传输层，以连接许多分布式设备。有人要求您将应用程序与IFTTT服务集成。您该如何做？
- en: You want to build multiple IoTrees and have them all work together in unison.
    What are two approaches you can take to achieve this outcome?
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您想要构建多个IoTree并使它们一起协同工作。您可以采取哪两种方法来实现这一目标？
- en: Why did we use the free [dweet.io](http://dweet.io) service in this chapter?
    Would you use this approach in a commercial IoT project?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么在本章中我们使用了免费的[dweet.io](http://dweet.io)服务？您会在商业物联网项目中使用这种方法吗？
- en: We want to test a RESTful API service from the command line. What command-line
    tool can we use?
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们想要从命令行测试一个RESTful API服务。我们可以使用什么命令行工具？
- en: What feature of MQTT can you use to have IoTrees initialize automatically when
    their Raspberry Pis are powered on or rebooted?
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以使用MQTT的哪个特性来在树莓派上电或重新启动时自动初始化IoTrees？
- en: Further to *Question 7*, what are some of the considerations you will need to
    make regarding the Mosquitto MQTT broker setup and deployments to achieve this
    outcome?
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关于*问题7*，在设置和部署Mosquitto MQTT代理以实现这一目标时，您需要考虑哪些因素？
