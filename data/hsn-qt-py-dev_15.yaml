- en: Creating Layouts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建布局
- en: This chapter will finalize our understanding of the concepts related to arranging
    and positioning items in our application. If elements have a fixed size and position
    and you need to resize the window, these elements will not resize accordingly
    and there will be a graphical representation fault. Also, if the application will
    be used with devices that have different resolutions (as is the case in real life),
    the results of the graphical visualization will vary (and this tends to err on
    the bad side). The construction of layouts for the items is one of the basic instruments
    for making an application independent from the resizing of windows and the native
    device resolution. Layouts play the role of geometry managers in applications
    with GUIs.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将最终确定我们对于在应用程序中排列和定位项目相关概念的理解。如果元素具有固定的大小和位置，并且需要调整窗口大小，则这些元素不会相应地调整大小，并且会出现图形表示错误。此外，如果应用程序将用于具有不同分辨率（如现实生活中那样）的设备，则图形可视化的结果将会有所不同（并且这往往偏向于不良的一侧）。为项目构建布局是使应用程序独立于窗口大小和原生设备分辨率的基本工具之一。布局在具有GUI的应用程序中扮演着几何管理器的角色。
- en: 'In the previous examples of application development, layouts have already been
    used, and we have some insight into this mechanism. This chapter will complete
    our understanding of the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的应用程序开发示例中，已经使用了布局，并且我们对这个机制有一些了解。本章将完成我们对以下主题的理解：
- en: Layouts
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: Box layouts
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Box布局
- en: Grid layout
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格布局
- en: Form layout
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 表格布局
- en: Stacked layout
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 堆叠布局
- en: Layouts
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: As we have seen in the examples, layouts are a convenient way to arrange items
    in an application, such as the arrangement of widgets and resizing items automatically
    according to device resolution, available space, size, and so on. In this section,
    we will cover the basics of layouts in the Qt library.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在示例中所见，布局是排列应用程序中项目的一种方便方式，例如小部件的排列和根据设备分辨率、可用空间、大小等自动调整大小。在本节中，我们将介绍Qt库中布局的基本知识。
- en: QLayout
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLayout
- en: 'This is an abstract base class for implementing layouts with the Qt framework.
    All the layouts in this chapter inherit the functionality of this class; `QLayout`
    is included in the `QtWidgets` module and can be reimplemented in a custom class.
    The syntax of the reimplementation is as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于实现Qt框架布局的抽象基类。本章中所有布局都继承了这个类的功能；`QLayout` 包含在 `QtWidgets` 模块中，并且可以在自定义类中重实现。重实现的语法如下：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `QLayout` class enhances functionality with the following functions.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLayout` 类通过以下函数增强了功能。'
- en: add
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加
- en: 'These functions add elements to the layout:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数向布局中添加元素：
- en: '`addChildLayout(QtWidgets.QLayout)`: This adds a sub-layout, specified in the
    parameter, as a child layout for this layout.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`addChildLayout(QtWidgets.QLayout)`: 这将添加由参数指定的子布局作为此布局的子布局。'
- en: '`addChildWidget(QtWidgets.QWidget)`: This adds a managed widget, specified
    in the parameter, to this layout.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`addChildWidget(QtWidgets.QWidget)`: 这将添加由参数指定的管理小部件到这个布局中。'
- en: '`addItem(QtWidgets.QLayoutItem)`: This adds an item, specified in the parameter,
    to this layout.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`addItem(QtWidgets.QLayoutItem)`: 这将添加由参数指定的一项到这个布局中。'
- en: '`addWidget(QtWidgets.QWidget)`: This adds the widget, specified in the parameter,
    to this layout.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`addWidget(QtWidgets.QWidget)`: 这将添加由参数指定的小部件到这个布局中。'
- en: set
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These functions set the parameters/properties of the layout:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置布局的参数/属性：
- en: '`setAlignment(QtWidgets.QWidget, QtCore.Qt.Alignment)`: This sets the alignment
    (the second parameter) for the widget (the first parameter).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAlignment(QtWidgets.QWidget, QtCore.Qt.Alignment)`: 这将为小部件（第一个参数）设置对齐（第二个参数）。'
- en: '`setAlignment(QtWidgets.QLayout, QtCore.Qt.Alignment)`: This sets the alignment
    (the second parameter) for the layout (the first parameter).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAlignment(QtWidgets.QLayout, QtCore.Qt.Alignment)`: 这将设置布局（第一个参数）的对齐（第二个参数）。'
- en: '`setContentsMargins(QtCore.QMargins)`: This sets the margins, specified in
    the parameter, that will be used around this layout.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`setContentsMargins(QtCore.QMargins)`: 这将设置由参数指定的边距，这些边距将用于围绕此布局。'
- en: '`setContentsMargins(int, int, int, int)`: This sets the margins for the left
    (the first parameter), top (the second parameter), right (the third parameter),
    and bottom (the fourth parameter) sides that will be used around this layout.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`setContentsMargins(int, int, int, int)`: 这将设置围绕此布局使用的左（第一个参数）、上（第二个参数）、右（第三个参数）和下（第四个参数）边的边距。'
- en: '`setEnabled(bool)`: If the parameter is `True`, it enables this layout.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`setEnabled(bool)`: 如果参数为 `True`，则启用此布局。'
- en: '`setMenuBar(QtWidgets.QWidget)`: This sets the menu bar widget, specified in
    the parameter, at the top of the parent widget.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`setMenuBar(QtWidgets.QWidget)`: 这将参数中指定的菜单栏控件设置在父控件的顶部。'
- en: '`setSizeConstraint(QtWidgets.QLayout.SizeConstraint)`: This sets the resize
    mode, specified in the parameter, for this layout. The available resizing modes
    are as follows:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSizeConstraint(QtWidgets.QLayout.SizeConstraint)`: 这为此布局设置参数中指定的调整大小模式。可用的调整大小模式如下：'
- en: '`QtWidgets.QLayout.SetDefaultConstraint`—`0`: The minimum size of the widget
    is set to `minimumSize()`.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLayout.SetDefaultConstraint`—`0`: 将控件的最低大小设置为`minimumSize()`。'
- en: '`QtWidgets.QLayout.SetNoConstraint`—`1`: The widget is not constrained.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLayout.SetNoConstraint`—`1`: 控件不受约束。'
- en: '`QtWidgets.QLayout.SetMinimumSize`—`2`: The minimum size of the widget is set
    to `minimumSize()`.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLayout.SetMinimumSize`—`2`: 将控件的最低大小设置为`minimumSize()`。'
- en: '`QtWidgets.QLayout.SetFixedSize`—`3`: The widget is set to `sizeHint()` and
    cannot be resized.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLayout.SetFixedSize`—`3`: 将控件设置为`sizeHint()`，并且不能调整大小。'
- en: '`QtWidgets.QLayout.SetMaximumSize`—`4`: The maximum size of the widget is set
    to `maximumSize()`.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLayout.SetMaximumSize`—`4`: 将控件的最大大小设置为`maximumSize()`。'
- en: '`QtWidgets.QLayout.SetMinAndMaxSize`—`5`: The maximum and minimum size of the
    widget are set to `maximumSize()` and `minimumSize()`.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QLayout.SetMinAndMaxSize`—`5`: 将控件的最大和最小大小设置为`maximumSize()`和`minimumSize()`。'
- en: '`setSpacing(int)`: This sets the spacing between widgets inside this layout.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSpacing(int)`: 这设置此布局内控件之间的间距。'
- en: is
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'This function returns a Boolean value (`bool`) related to this layout''s state:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回一个与布局状态相关的布尔值（`bool`）：
- en: '`isEnabled()`: This returns `True` if this layout is enabled. Otherwise, it
    returns `False`.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`isEnabled()`: 如果此布局启用，则返回`True`。否则，返回`False`。'
- en: functional
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions relate to the current values of the layout, changes in functionality,
    and so on:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与布局的当前值、功能变化等相关：
- en: '`activate()`: This redoes the layout for the parent widget of this layout.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`activate()`: 这将重新执行此布局的父控件的布局。'
- en: '`alignmentRect(QtCore.QRect)`: This returns a rectangle of the `QtCore.QRect`
    type that will be covered when this layout''s geometry is set to the rectangle
    specified in the parameter.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`alignmentRect(QtCore.QRect)`: 这返回一个`QtCore.QRect`类型的矩形，当此布局的几何形状设置为参数中指定的矩形时，该矩形将被覆盖。'
- en: '`closestAcceptableSize(QtWidgets.QWidget, QtCore.QSize)`: This returns the
    size that satisfies all the constraints on the widget (the first parameter) and
    is close to the size specified (the second parameter).'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`closestAcceptableSize(QtWidgets.QWidget, QtCore.QSize)`: 这返回一个大小，该大小满足对控件（第一个参数）的所有约束，并且接近指定的（第二个参数）大小。'
- en: '`contentsMargins()`: This returns the margins of the `QtCore.QMargins` type
    that are used around this layout.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentsMargins()`: 这返回围绕此布局的`QtCore.QMargins`类型的边距。'
- en: '`contentsRect()`: This returns a rectangle of the `QtCore.QRect` type of the
    layout''s geometry, with the content''s margins.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentsRect()`: 这返回布局几何形状的`QtCore.QRect`类型的矩形，带有内容边距。'
- en: '`count()`: This returns the number of items in this layout.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()`: 这返回此布局中的项数。'
- en: '`getContentsMargins()`: This returns the margins for the left, top, right,
    and bottom sides that are used around the layout.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`getContentsMargins()`: 这返回围绕布局的左、上、右和底部边距。'
- en: '`indexOf(QtWidgets.QWidget)`: This returns the index of the widget, specified
    in the parameter, that is found in this layout.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexOf(QtWidgets.QWidget)`: 这返回在布局中找到的、由参数指定的控件的索引。'
- en: '`indexOf(QtWidgets.QLayoutItem)`: This returns the index of the item''s layout,
    specified in the parameter, that is found in this layout.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`indexOf(QtWidgets.QLayoutItem)`: 这返回在布局中找到的、由参数指定的项的布局索引。'
- en: '`itemAt(int)`: This returns the item of the `QtWidgets.QLayoutItem` type at
    the index specified in the parameter.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemAt(int)`: 这返回在参数指定的索引处的`QtWidgets.QLayoutItem`类型的项。'
- en: '`menuBar()`: This returns the menu bar of the `QtWidgets.QWidget` type for
    this layout, if the menu bar exists.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`menuBar()`: 如果存在菜单栏，则返回此布局的`QtWidgets.QWidget`类型的菜单栏。'
- en: '`parentWidget()`: This returns the parent widget of the `QtWidgets.QWidget`
    type for this layout. It returns the parent widget of the parent layout, if this
    is a sub-layout.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`parentWidget()`: 这返回此布局的`QtWidgets.QWidget`类型的父控件。如果是子布局，则返回父布局的父控件。'
- en: '`removeItem(QtWidgets.QLayoutItem)`: This removes the layout item, specified
    in the parameter, from this layout.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeItem(QtWidgets.QLayoutItem)`: 这将从布局中删除由参数指定的布局项。'
- en: '`removeWidget(QtWidgets.QWidget)`: This removes the widget, specified in the
    parameter, from this layout.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeWidget(QtWidgets.QWidget)`: 这个函数从布局中移除指定的参数中的小部件。'
- en: '`replaceWidget(QtWidgets.QWidget, QtWidgets.QWidget, QtCore.Qt.FindChildOptions)`:
    This replaces a widget (the first parameter) with another widget (the second parameter)
    using options (the third parameter), and returns an item of the `QtWidgets.QLayoutItem`
    type that contains the new widget.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`replaceWidget(QtWidgets.QWidget, QtWidgets.QWidget, QtCore.Qt.FindChildOptions)`:
    使用选项（第三个参数）替换一个小部件（第一个参数）为另一个小部件（第二个参数），并返回一个包含新小部件的`QtWidgets.QLayoutItem`类型项。'
- en: '`sizeConstraint()`: This returns the resize mode of the `QtWidgets.QLayout.SizeConstraint`
    type for this layout.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`sizeConstraint()`: 这个函数返回`QtWidgets.QLayout.SizeConstraint`类型的调整模式，用于此布局。'
- en: '`spacing()`: This returns the spacing between the widgets inside this layout.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`spacing()`: 这个函数返回此布局内部小部件之间的间距。'
- en: '`takeAt(int)`: This returns the item of the `QtWidgets.QLayoutItem` type at
    the index specified in the parameter and removes it.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`takeAt(int)`: 这个函数返回参数中指定的索引处的`QtWidgets.QLayoutItem`类型项，并移除它。'
- en: '`update()`: This updates this layout for the parent widget.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`update()`: 这个函数更新此布局以适应父小部件。'
- en: events
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These are functions related to events, such as event handlers:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与事件相关的函数，例如事件处理程序：
- en: '`childEvent(QtCore.QChildEvent)`: This event handler receives child events
    of the layout, with the event passed in the parameter.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`childEvent(QtCore.QChildEvent)`: 这个事件处理程序接收布局的子事件，事件通过参数传入。'
- en: '`widgetEvent(QtCore.QEvent)`: This event handler receives parent widget resize
    events of the layout, with the event passed in the parameter.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`widgetEvent(QtCore.QEvent)`: 这个事件处理程序接收布局的父小部件调整大小事件，事件通过参数传入。'
- en: QLayoutItem
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLayoutItem
- en: 'This class creates an abstract item for the layout implementation with the
    Qt library. The layouts that will be described in this chapter and the `QLayout`
    class can use this functionality and manipulate these items in the custom layout
    constructions; `QLayoutItem` is included in the `QtWidgets` module and can be
    reimplemented in a custom class. The syntax of the reimplementation is as follows:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类使用Qt库创建了一个布局实现的抽象项。本章将描述的布局以及`QLayout`类可以使用此功能，并在自定义布局构造中操作这些项；`QLayoutItem`包含在`QtWidgets`模块中，可以在自定义类中重实现。重实现的语法如下：
- en: '[PRE1]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `QLayoutItem` class enhances functionality with the following functions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLayoutItem`类通过以下函数增强了功能。'
- en: set
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties of the layout item:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置布局项的参数/属性：
- en: '`setAlignment(QtCore.Qt.Alignment)`: This sets the alignment, specified in
    the parameter, for this layout item.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAlignment(QtCore.Qt.Alignment)`: 这个函数为此布局项设置参数中指定的对齐方式。'
- en: '`setGeometry(QtCore.QRect)`: This sets the geometry, specified in the parameter,
    for this layout item.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`setGeometry(QtCore.QRect)`: 这个函数为这个布局项设置参数中指定的几何形状。'
- en: has/is
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has/is
- en: 'These functions return a Boolean value, `bool`, related to this layout item''s
    state:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与这个布局项的状态相关的布尔值`bool`：
- en: '`hasHeightForWidth()`: This returns `True` if the preferred height of this
    layout depends on its width.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasHeightForWidth()`: 如果这个布局项的首选高度依赖于其宽度，则此函数返回`True`。'
- en: '`isEmpty()`: This returns `True` if this layout item is empty, or `False` if
    it contains any widgets.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`isEmpty()`: 如果这个布局项为空，则返回`True`；如果它包含任何小部件，则返回`False`。'
- en: functional
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions relate to the current values of the layout item, changes in
    functionality, and so on:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与布局项的当前值、功能变化等相关：
- en: '`alignment()`: This returns the alignment of the `QtCore.Qt.Alignment` type
    for this layout item.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`alignment()`: 这个函数返回此布局项的`QtCore.Qt.Alignment`类型的对齐方式。'
- en: '`controlTypes()`: This returns the control types of the **`QtWidgets.QSizePolicy.ControlTypes`**
    type for this layout item.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`controlTypes()`: 这个函数返回此布局项的`QtWidgets.QSizePolicy.ControlTypes`类型的控件类型。'
- en: '`expandingDirections()`: This returns the directions of the `QtCore.Qt.Orientations`
    type so that this layout item can make use of more space.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`expandingDirections()`: 这个函数返回`QtCore.Qt.Orientations`类型的方向，以便这个布局项可以利用更多空间。'
- en: '`geometry()`: This returns the rectangle of the `QtCore.QRect` type covered
    by this layout item.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`geometry()`: 这个函数返回被此布局项覆盖的`QtCore.QRect`类型的矩形。'
- en: '`heightForWidth(int)`: This returns the preferred height for this layout item
    in relation to the width specified in the parameter.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`heightForWidth(int)`: 这个函数返回与参数中指定的宽度相关的布局项的首选高度。'
- en: '`invalidate()`: This invalidates this layout item''s cached information.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`invalidate()`: 这个函数使这个布局项的缓存信息无效。'
- en: '`layout()`: This returns the layout of the `QtWidgets.QLayout` type if this
    item has a relative layout.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`layout()`: 如果此项具有相对布局，则返回`QtWidgets.QLayout`类型的布局。'
- en: '`maximumSize()`: This returns the maximum size of the `QtCore.QSize` type for
    this layout item.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumSize()`: 这个函数返回此布局项的`QtCore.QSize`类型的最大尺寸。'
- en: '`minimumHeightForWidth(int)`: This returns the minimum height for this widget
    relative to the width specified in the parameter.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumHeightForWidth(int)`: 这个函数返回相对于参数中指定的宽度的此小部件的最小高度。'
- en: '`minimumSize()`: This returns the minimum size of the `QtCore.QSize` type for
    this layout item.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumSize()`: 这个函数返回此布局项的`QtCore.QSize`类型的最小尺寸。'
- en: '`sizeHint()`: This returns the preferred size of the `QtCore.QSize` type for
    this layout item.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`sizeHint()`: 这个函数返回此布局项的`QtCore.QSize`类型的首选尺寸。'
- en: '`spacerItem()`: This returns a spacer item (a blank space) of the `QtWidgets.QSpacerItem`
    type if this item is a spacer item.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`spacerItem()`: 如果此项是间隔项（空白空间），则返回一个`QtWidgets.QSpacerItem`类型的间隔项。'
- en: '`widget()`: This returns widget of the `QtWidgets.QWidget` type if this item
    manages a widget.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget()`: 如果此项管理小部件，则返回`QtWidgets.QWidget`类型的小部件。'
- en: QSizePolicy
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSizePolicy
- en: 'This class can be used to set the resizing policy for the widgets in the layout.
    The size policy of a widget describes how it will be resized and treated by the
    layout engine. Usually, this policy attribute is used for widgets in layouts.
    The policy can be added by using `setSizePolicy()` with the parameter related
    to the size policy. The declaration syntax of this class is as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类可以用来设置布局中小部件的缩放策略。小部件的尺寸策略描述了它将被如何缩放以及如何被布局引擎处理。通常，这个策略属性用于布局中的小部件。可以通过使用带有与尺寸策略相关的参数的`setSizePolicy()`函数来添加策略。这个类的声明语法如下：
- en: '[PRE2]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `QSizePolicy` class enhances functionality with the following functions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSizePolicy`类通过以下函数增强了功能。'
- en: set
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties of the size policy:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置尺寸策略的参数/属性：
- en: '`size_policy.setControlType(QtWidgets.QSizePolicy.ControlType)`: This sets
    the control type for the associated widget to which the size policy will be applied.
    The available control types are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setControlType(QtWidgets.QSizePolicy.ControlType)`: 这个函数设置应用尺寸策略的相关小部件的控制类型。可用的控制类型如下：'
- en: '`QtWidgets.QSizePolicy.DefaultType`: The default type; `None` is specified.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.DefaultType`: 默认类型；指定为`None`。'
- en: '`QtWidgets.QSizePolicy.ButtonBox`: This is a `QtWidgets.QDialogButtonBox` instance.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.ButtonBox`: 这是一个`QtWidgets.QDialogButtonBox`实例。'
- en: '`QtWidgets.QSizePolicy.CheckBox`: This is a `QtWidgets.QCheckBox` instance.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.CheckBox`: 这是一个`QtWidgets.QCheckBox`实例。'
- en: '`QtWidgets.QSizePolicy.ComboBox`: This is a `QtWidgets.QComboBox` instance.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.ComboBox`: 这是一个`QtWidgets.QComboBox`实例。'
- en: '`QtWidgets.QSizePolicy.Frame`: This is a `QtWidgets.QFrame` instance.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Frame`: 这是一个`QtWidgets.QFrame`实例。'
- en: '`QtWidgets.QSizePolicy.GroupBox`: This is a `QtWidgets.QGroupBox` instance.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.GroupBox`: 这是一个`QtWidgets.QGroupBox`实例。'
- en: '`QtWidgets.QSizePolicy.Label`: This is a `QtWidgets.QLabel` instance.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Label`: 这是一个`QtWidgets.QLabel`实例。'
- en: '`QtWidgets.QSizePolicy.Line`: This is a `QtWidgets.QFrame.HLine` or `QtWidgets.QFrame.VLine` instance.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Line`: 这是一个`QtWidgets.QFrame.HLine`或`QtWidgets.QFrame.VLine`实例。'
- en: '`QtWidgets.QSizePolicy.LineEdit`: This is a `QtWidgets.QLineEdit` instance.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.LineEdit`: 这是一个`QtWidgets.QLineEdit`实例。'
- en: '`QtWidgets.QSizePolicy.PushButton`: This is a `QtWidgets.QPushButton` instance.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.PushButton`: 这是一个`QtWidgets.QPushButton`实例。'
- en: '`QtWidgets.QSizePolicy.RadioButton`: This is a `QtWidgets.QRadioButton` instance.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.RadioButton`: 这是一个`QtWidgets.QRadioButton`实例。'
- en: '`QtWidgets.QSizePolicy.Slider`: This is a `QtWidgets.QAbstractSlider` instance.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Slider`: 这是一个`QtWidgets.QAbstractSlider`实例。'
- en: '`QtWidgets.QSizePolicy.SpinBox`: This is a `QtWidgets.QAbstractSpinBox` instance.'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.SpinBox`: 这是一个`QtWidgets.QAbstractSpinBox`实例。'
- en: '`QtWidgets.QSizePolicy.TabWidget`: This is a `QtWidgets.QTabWidget` instance.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.TabWidget`: 这是一个`QtWidgets.QTabWidget`实例。'
- en: '`QtWidgets.QSizePolicy.ToolButton`: This is a `QtWidgets.QToolButton` instance.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.ToolButton`: 这是一个`QtWidgets.QToolButton`实例。'
- en: '`size_policy.setHeightForWidth(bool)`: If the parameter is `True`, it sets
    that the preferred height depends on the width of the widget.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setHeightForWidth(bool)`: 如果参数为`True`，则设置首选高度取决于小部件的宽度。'
- en: '`size_policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy)`: This sets
    the horizontal policy, specified in the parameter, for this size policy. The available
    policies are as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setHorizontalPolicy(QtWidgets.QSizePolicy.Policy)`: 这将为这个大小策略设置参数中指定的水平策略。可用的策略如下：'
- en: '**`QtWidgets.QSizePolicy.Fixed`**: The widget has a fixed-size policy; it can
    never grow or shrink.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`QtWidgets.QSizePolicy.Fixed`**: 小部件有一个固定大小策略；它永远不会增长或缩小。'
- en: '`QtWidgets.QSizePolicy.Minimum`: The widget can be expanded, but it cannot
    be smaller than the minimum `sizeHint()`.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Minimum`: 小部件可以被扩展，但不能小于最小 `sizeHint()`。'
- en: '`QtWidgets.QSizePolicy.Maximum`: The widget can be shrunk, but it cannot be
    larger than the maximum `sizeHint()`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Maximum`: 小部件可以被缩小，但不能大于最大 `sizeHint()`。'
- en: '`QtWidgets.QSizePolicy.Preferred`: The widget`s `sizeHint()` is as preferred.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Preferred`: 小部件的 `sizeHint()` 是首选的。'
- en: '`QtWidgets.QSizePolicy.Expanding`: The widget''s `sizeHint()` is a sensible
    size. The widget can be expanded.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Expanding`: 小部件的 `sizeHint()` 是一个合理的尺寸。小部件可以被扩展。'
- en: '`QtWidgets.QSizePolicy.MinimumExpanding`: The widget''s `sizeHint()` is minimal
    and sufficient.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.MinimumExpanding`: 小部件的 `sizeHint()` 是最小且足够的。'
- en: '`QtWidgets.QSizePolicy.Ignored`: The widget''s `sizeHint()` is ignored.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.Ignored`: 忽略小部件的 `sizeHint()`。'
- en: 'Also, the following flags can be used, combined together with the `|` operator:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，以下标志可以一起使用，与 `|` 运算符结合：
- en: '`QtWidgets.QSizePolicy.GrowFlag`—`1`: The widget can grow more than the size
    hint.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.GrowFlag`—`1`: 小部件可以比大小提示增长更多。'
- en: '`QtWidgets.QSizePolicy.ExpandFlag`—`2`: The widget can take as much space as
    is available.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.ExpandFlag`—`2`: 小部件可以占用尽可能多的空间。'
- en: '`QtWidgets.QSizePolicy.ShrinkFlag`—`4`: The widget can shrink more than the
    size hint.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.ShrinkFlag`—`4`: 小部件可以比大小提示缩小更多。'
- en: '`QtWidgets.QSizePolicy.IgnoreFlag`—`8`: The size hint is ignored. The widget
    will get as much space as possible.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QSizePolicy.IgnoreFlag`—`8`: 忽略大小提示。小部件将获得尽可能多的空间。'
- en: '`size_policy.setHorizontalStretch(int)`: This sets the horizontal stretch factor,
    specified in the parameter, for this size policy.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setHorizontalStretch(int)`: 这将为这个大小策略设置参数中指定的水平拉伸因子。'
- en: '`size_policy.setRetainSizeWhenHidden(bool)`: If the parameter is `True`, it
    determines that this layout will retain the size of the widget when it''s hidden.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setRetainSizeWhenHidden(bool)`: 如果参数为 `True`，则确定此布局在隐藏时将保留小部件的大小。'
- en: '`size_policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy)`: This sets the
    vertical policy, specified in the parameter, for this size policy. The available
    policies are described in the earlier bullets.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setVerticalPolicy(QtWidgets.QSizePolicy.Policy)`: 这将为这个大小策略设置参数中指定的垂直策略。可用的策略在前面的小点中描述。'
- en: '`size_policy.setVerticalStretch(int)`: This sets the vertical stretch factor,
    specified in the parameter, for this size policy.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setVerticalStretch(int)`: 这将为这个大小策略设置参数中指定的垂直拉伸因子。'
- en: '`size_policy.setWidthForHeight(bool)`: If the parameter is `True`, it sets
    that the preferred width depends on the height of this widget.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.setWidthForHeight(bool)`: 如果参数为 `True`，则设置首选宽度取决于此小部件的高度。'
- en: has
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has
- en: 'These functions return a Boolean value (`bool`) related to this size policy''s
    state:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与这个大小策略状态相关的布尔值 (`bool`)：
- en: '`size_policy.hasHeightForWidth()`: This returns `True` if the preferred height
    of the widget depends on its width.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.hasHeightForWidth()`: 如果小部件的首选高度取决于其宽度，则返回 `True`。'
- en: '`size_policy.hasWidthForHeight()`: This returns `True` if the preferred width
    of the widget depends on its height.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.hasWidthForHeight()`: 如果小部件的首选宽度取决于其高度，则返回 `True`。'
- en: functional
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions relate to the current values of the size policy, changes in
    functionality, and so on:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与大小策略的当前值、功能变化等相关：
- en: '`size_policy.controlType()`: This returns the control type of the `QtWidgets.QSizePolicy.ControlType`
    type that is associated with the widget to which the size policy will be applied.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.controlType()`: 返回与将要应用大小策略的小部件关联的 `QtWidgets.QSizePolicy.ControlType`
    类型的控制类型。'
- en: '`size_policy.expandingDirections()`: This returns the direction of the `QtCore.Qt.Orientations`
    type where the widget can make use of more space than is indicated in the `sizeHint()`
    function.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.expandingDirections()`: 这返回小部件可以比 `sizeHint()` 函数中指示的更多空间的方向，类型为
    `QtCore.Qt.Orientations`。'
- en: '`size_policy.horizontalPolicy()`: This returns the horizontal policy of the
    `QtWidgets.QSizePolicy.Policy` type of this size policy.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.horizontalPolicy()`: 这返回了此大小策略的 `QtWidgets.QSizePolicy.Policy`
    类型的水平策略。'
- en: '`size_policy.horizontalStretch()`: This returns the horizontal stretch factor
    used in this size policy.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.horizontalStretch()`: 这返回了在此大小策略中使用的水平拉伸因子。'
- en: '`size_policy.retainSizeWhenHidden()`: This returns `True`, if this layout retains
    the size of the widget when hidden. The default is `False`.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.retainSizeWhenHidden()`: 如果此布局在隐藏时保留小部件的大小，则返回 `True`。默认值为 `False`。'
- en: '`size_policy.transpose()`: This swaps the horizontal/vertical policies/stretches.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.transpose()`: 这交换了水平/垂直策略/拉伸。'
- en: '`size_policy.transposed()`: This returns the swapped size policy of the `QtWidgets.QSizePolicy`
    type with the horizontal/vertical policies/stretches.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.transposed()`: 这返回了`QtWidgets.QSizePolicy`类型的交换大小策略，带有水平/垂直策略/拉伸。'
- en: '`size_policy.verticalPolicy()`: This returns the vertical policy of the `QtWidgets.QSizePolicy.Policy`
    type for this size policy.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.verticalPolicy()`: 这返回了此大小策略的 `QtWidgets.QSizePolicy.Policy` 类型的垂直策略。'
- en: '`size_policy.verticalStretch()`: This returns the vertical stretch factor of
    this size policy.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`size_policy.verticalStretch()`: 这返回了此大小策略的垂直拉伸因子。'
- en: Box layouts
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 盒式布局
- en: The simplest way to arrange items in an application's widgets is to use a **box
    layout** construction. Box layouts arrange items horizontally or vertically. Horizontally,
    the items will be in a row, and vertically, they will be in a column. The class
    that provides the basic functionality is `QBoxLayout`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的小部件中排列项的最简单方法是使用 **box layout** 构造。盒式布局按水平或垂直排列项。水平排列时，项将成行排列，垂直排列时，项将成列排列。提供基本功能的是
    `QBoxLayout` 类。
- en: QBoxLayout
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QBoxLayout
- en: 'This is the basic class for box layouts. It can arrange items horizontally/vertically
    in a row/column arrangement. The direction of the box layout, such as left to
    right (row) or top to bottom (column), needs to be defined in the declaration
    of the class with the relevant parameter. The declaration syntax is as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这是盒式布局的基本类。它可以按行/列排列方式水平/垂直排列项。盒式布局的方向，如从左到右（行）或从上到下（列），需要在类的声明中通过相关参数定义。声明语法如下：
- en: '[PRE3]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '`QBoxLayout` inherits the `QLayout` class and enhances its functionality with
    the following functions:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBoxLayout` 继承了 `QLayout` 类，并通过以下函数增强了其功能：'
- en: add
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'These functions add elements to the layout:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将元素添加到布局中：
- en: '`box_layout.addLayout(QtWidgets.QLayout, int)`: This adds the layout (the first
    parameter) to this box layout using the stretch factor (the second parameter).'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.addLayout(QtWidgets.QLayout, int)`: 这会将布局（第一个参数）添加到这个盒式布局中，使用拉伸因子（第二个参数）。'
- en: '`box_layout.addSpacerItem(QtWidgets.QSpacerItem)`: This adds a spacer item,
    specified in the parameter, to this box layout.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.addSpacerItem(QtWidgets.QSpacerItem)`: 这将指定的参数中的间隔项添加到盒式布局中。'
- en: '`box_layout.addSpacing(int)`: This adds a non-stretchable space to this layout
    with the size specified in the parameter.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.addSpacing(int)`: 这会在布局中添加一个不可拉伸的空间，大小由参数指定。'
- en: '`box_layout.addStretch(int)`: This adds a stretchable space to this layout,
    with the stretch factor specified in the parameter.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.addStretch(int)`: 这会在布局中添加一个可拉伸的空间，拉伸因子由参数指定。'
- en: '`box_layout.addStrut(int)`: This adds the limits, specified in the parameter,
    for the perpendicular dimension of this box layout.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.addStrut(int)`: 这为盒式布局的垂直维度添加了由参数指定的限制。'
- en: '`box_layout.addWidget(QtWidgets.QWidget, int, QtCore.Qt.Alignment)`: This adds
    the widget (the first parameter) to this box layout, using the stretch factor
    (the second parameter) and alignment (the third parameter).'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.addWidget(QtWidgets.QWidget, int, QtCore.Qt.Alignment)`: 这会将小部件（第一个参数）添加到这个盒式布局中，使用拉伸因子（第二个参数）和对齐（第三个参数）。'
- en: insert
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: insert
- en: 'These functions insert elements into the layout:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将元素插入布局中：
- en: '`box_layout.insertItem(int, QtWidgets.QLayoutItem)`: This inserts an item (the
    second parameter) into this layout at the index (the first parameter).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.insertItem(int, QtWidgets.QLayoutItem)`: 这在索引（第一个参数）处将项（第二个参数）插入到此布局中。'
- en: '`box_layout.insertLayout(int, QtWidgets.QLayout, int)`: This inserts a layout
    (the second parameter) into this layout at the index (the first parameter) with
    a stretch factor (the third parameter).'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.insertLayout(int, QtWidgets.QLayout, int)`: 这在索引（第一个参数）处将布局（第二个参数）插入到此布局中，并带有拉伸因子（第三个参数）。'
- en: '`box_layout.insertSpacerItem(int, QtWidgets.QSpacerItem)`: This inserts a spacer
    item (the second parameter) into this layout at the index (the first parameter).'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.insertSpacerItem(int, QtWidgets.QSpacerItem)`: 这将在索引（第一个参数）处插入一个间隔项（第二个参数）到这个布局中。'
- en: '`box_layout.insertSpacing(int, int)`: This inserts a non-stretchable space
    with a certain size (the second parameter) into this layout at the index (the
    first parameter).'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.insertSpacing(int, int)`: 这将在索引（第一个参数）处插入一个具有特定大小（第二个参数）的非拉伸空间到这个布局中。'
- en: '`box_layout.insertStretch(int, int)`: This inserts a stretchable space with
    a certain size (the second parameter) into this layout at the index (the first
    parameter).'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.insertStretch(int, int)`: 这将在索引（第一个参数）处插入一个具有特定大小（第二个参数）的可拉伸空间到这个布局中。'
- en: '`box_layout.insertWidget(int, QtWidgets.QWidget, int, QtCore.Qt.Alignment)`:
    This inserts a widget (the second parameter) into this layout at the index (the
    first parameter) with a stretch factor (the third parameter) and alignment (the
    fourth parameter).'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.insertWidget(int, QtWidgets.QWidget, int, QtCore.Qt.Alignment)`:
    这将在索引（第一个参数）处插入一个小部件（第二个参数），并带有拉伸因子（第三个参数）和对齐方式（第四个参数）。'
- en: set
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These functions set the parameters/properties of the layout:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置布局的参数/属性：
- en: '`box_layout.setDirection(QtWidgets.QBoxLayout.Direction)`: This sets the direction,
    specified in the parameter, for this box layout. The available directions are
    as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.setDirection(QtWidgets.QBoxLayout.Direction)`: 这将为这个框布局设置参数中指定的方向。可用的方向如下：'
- en: '**`QtWidgets.QBoxLayout.LeftToRight`**—`0`: From left to right.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`QtWidgets.QBoxLayout.LeftToRight`**—`0`: 从左到右。'
- en: '`QtWidgets.QBoxLayout.RightToLeft`—`1`: From right to left.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QBoxLayout.RightToLeft`—`1`: 从右到左。'
- en: '`QtWidgets.QBoxLayout.TopToBottom`—`2`: From top to bottom.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QBoxLayout.TopToBottom`—`2`: 从上到下。'
- en: '`QtWidgets.QBoxLayout.BottomToTop`—`3`: From bottom to top.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QBoxLayout.BottomToTop`—`3`: 从下到上。'
- en: '`box_layout.setSpacing(int)`: This sets the spacing between widgets inside
    this box layout.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.setSpacing(int)`: 这将为这个框布局内的小部件之间的间距设置。'
- en: '`box_layout.setStretch(int, int)`: This sets the stretch factor (the second
    parameter) for this layout at the index (the first parameter).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.setStretch(int, int)`: 这将为这个布局在索引（第一个参数）处设置拉伸因子（第二个参数）。'
- en: '`box_layout.setStretchFactor(QtWidgets.QWidget, int)`: This sets the stretch
    factor (the second parameter) for the widget (the first parameter) in this box
    layout.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.setStretchFactor(QtWidgets.QWidget, int)`: 这将为这个框布局中的小部件（第一个参数）设置拉伸因子（第二个参数）。'
- en: '`box_layout.setStretchFactor(QtWidgets.QLayout, int)`: This sets the stretch
    factor (the second parameter) for the layout (the first parameter) in this box
    layout.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.setStretchFactor(QtWidgets.QLayout, int)`: 这将为这个框布局中的布局（第一个参数）设置拉伸因子（第二个参数）。'
- en: functional
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These functions relate to the current values of the layout, changes in functionality,
    and so on:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与布局的当前值、功能变化等相关：
- en: '`box_layout.direction()`: This returns the direction of the **`QtWidgets.QBoxLayout.Direction`**
    type used for this box layout.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.direction()`: 这返回用于这个框布局的 `QtWidgets.QBoxLayout.Direction` 类型的方向。'
- en: '`box_layout.stretch(int)`: This returns the stretch factor at the position
    specified by the index.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`box_layout.stretch(int)`: 这返回指定索引位置处的拉伸因子。'
- en: QHBoxLayout
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QHBoxLayout
- en: 'This class can be used to construct layouts that can arrange items horizontally
    in a row, placing the widgets inside the row. It is an additional class for implementing
    box layouts and can be used for horizontal arrangement. It is very useful when
    constructing a simple application window with some elements that will be arranged
    at the top or bottom, or with additional windows/widgets whose elements will have
    a similar direction. The available directions for this layout are `RightToLeft`
    and `LeftToRight` (the default). The declaration syntax of this class is as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类可以用来构建可以水平排列项的布局，将小部件放置在行内。它是实现框布局的附加类，可用于水平排列。当构建一个简单的应用程序窗口，其中一些元素将排列在顶部或底部，或者有额外的窗口/小部件，其元素将具有相似的方向时，非常有用。这个布局可用的方向是
    `RightToLeft` 和 `LeftToRight`（默认）。这个类的声明语法如下：
- en: '[PRE4]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '`QHBoxLayout` inherits `QBoxLayout` with features and functions that are available
    and can be implemented in the horizontal layout relatively.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`QHBoxLayout` 继承了 `QBoxLayout`，具有在水平布局中可用和可实现的特性和函数。'
- en: QVBoxLayout
  id: totrans-188
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QVBoxLayout
- en: 'This class can be used to construct layouts that can arrange items vertically
    in a column, placing the widgets inside the column. It is an additional class
    for implementing box layouts, and can be used for vertical arrangement. It is
    very useful when constructing a simple application window with some elements that
    will be arranged on the left or right side, or with additional windows/widgets
    whose elements have a similar direction. The available directions for this layout
    are `TopToBottom` (the default) and `BottomToTop`. The declaration syntax of this
    class is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类可以用来构建可以垂直排列项的布局，将小部件放置在列内。它是一个用于实现框布局的附加类，可用于垂直排列。当构建一个简单的应用程序窗口，其中包含将排列在左侧或右侧的元素，或者包含具有类似方向的额外窗口/小部件时，它非常有用。此布局的可用方向是
    `TopToBottom`（默认）和 `BottomToTop`。此类的声明语法如下：
- en: '[PRE5]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '`QVBoxLayout` inherits `QBoxLayout` with features and functions that are available
    and can be implemented in the vertical layout relatively.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`QVBoxLayout` 继承了 `QBoxLayout`，具有在垂直布局中可用和可实现的特性和功能。'
- en: QGridLayout
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGridLayout
- en: 'This class arranges items in a grid. The grid means that each item will be
    positioned in a specified row and column in relation to the cell. This is a very
    useful and popular layout for constructing applications with various elements
    that have different positions, directions, and sizes in relation to the application''s
    windows. The declaration syntax of this class is as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类以网格形式排列项。网格意味着每个项都将相对于单元格定位在指定的行和列。这是一个非常有用且流行的布局，用于构建具有不同位置、方向和大小的元素的应用程序，这些元素相对于应用程序窗口。此类的声明语法如下：
- en: '[PRE6]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: QGridLayout functions
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGridLayout 函数
- en: '`QGridLayout` inherits the `QLayout` class and enhances its functionality with
    the following functions.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGridLayout` 继承了 `QLayout` 类，并通过以下函数增强了其功能。'
- en: add
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'These functions add elements to the grid layout:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数向网格布局添加元素：
- en: '`grid_layout.addItem(QtWidgets.QLayoutItem, int, int, int, int, QtCore.Qt.Alignment)`:
    This adds the layout item (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter).
    It will occupy a number of rows (the fourth parameter) and columns (the fifth
    parameter), and it also has an alignment (sixth parameter).'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.addItem(QtWidgets.QLayoutItem, int, int, int, int, QtCore.Qt.Alignment)`:
    这会将布局项（第一个参数）添加到由行（第二个参数）和列（第三个参数）指定的位置。它将占用一定数量的行（第四个参数）和列（第五个参数），并且它还有一个对齐（第六个参数）。'
- en: '`grid_layout.addLayout(QtWidgets.QLayout, int, int, QtCore.Qt.Alignment)`:
    This adds the layout (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter),
    with an alignment (the fourth parameter).'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.addLayout(QtWidgets.QLayout, int, int, QtCore.Qt.Alignment)`:
    这会将布局（第一个参数）添加到由行（第二个参数）和列（第三个参数）指定的位置，并使用对齐（第四个参数）。'
- en: '`grid_layout.addLayout(QtWidgets.QLayout, int, int, int, int, QtCore.Qt.Alignment)`:
    This adds the layout (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter).
    It will occupy a number of rows (the fourth parameter) and columns (the fifth
    parameter), with an alignment (sixth parameter).'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.addLayout(QtWidgets.QLayout, int, int, int, int, QtCore.Qt.Alignment)`:
    这会将布局（第一个参数）添加到由行（第二个参数）和列（第三个参数）指定的位置。它将占用一定数量的行（第四个参数）和列（第五个参数），并使用对齐（第六个参数）。'
- en: '`grid_layout.addWidget(QtWidgets.QWidget, int, int, QtCore.Qt.Alignment)`:
    This adds the widget (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter),
    with an alignment (the fourth parameter).'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.addWidget(QtWidgets.QWidget, int, int, QtCore.Qt.Alignment)`:
    这会将小部件（第一个参数）添加到由行（第二个参数）和列（第三个参数）指定的位置，并使用对齐（第四个参数）。'
- en: '`grid_layout.addWidget(QtWidgets.QWidget, int, int, int, int, QtCore.Qt.Alignment)`:
    This adds the widget (the first parameter) to the position in this grid layout
    specified by the row (the second parameter) and column (the third parameter).
    It will occupy a number of rows (the fourth parameter) and columns (the fifth
    parameter), with an alignment (sixth parameter).'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.addWidget(QtWidgets.QWidget, int, int, int, int, QtCore.Qt.Alignment)`:
    这会将小部件（第一个参数）添加到由行（第二个参数）和列（第三个参数）指定的位置。它将占用一定数量的行（第四个参数）和列（第五个参数），并使用对齐（第六个参数）。'
- en: set
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties of the grid layout:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置网格布局的参数/属性：
- en: '`grid_layout.setColumnMinimumWidth(int, int)`: This sets the minimum width
    in pixels (the second parameter) for the columns (the first parameter) in this
    grid layout.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setColumnMinimumWidth(int, int)`: 这为此网格布局中的列（第一个参数）设置像素（第二个参数）的最小宽度。'
- en: '`grid_layout.setColumnStretch(int, int)`: This sets the stretch factor (the
    second parameter) for the columns (the first parameter) of this grid layout.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setColumnStretch(int, int)`: 这为此网格布局中的列（第一个参数）设置拉伸因子（第二个参数）。'
- en: '`grid_layout.setDefaultPositioning(int, QtCore.Qt.Orientation)`: This sets
    the positioning mode that expands this layout to the number of columns/rows (the
    first parameter). If the orientation (the second parameter) is `QtCore.Qt.Horizontal`,
    it will get expanded by columns. If the orientation is `QtCore.Qt.Vertical`, it
    will get expanded by rows.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setDefaultPositioning(int, QtCore.Qt.Orientation)`: 这设置布局定位模式，将此布局扩展到列/行数（第一个参数）。如果方向（第二个参数）是
    `QtCore.Qt.Horizontal`，它将通过列扩展。如果方向是 `QtCore.Qt.Vertical`，它将通过行扩展。'
- en: '`grid_layout.setHorizontalSpacing(int)`: This sets the horizontal spacing,
    specified in the parameter, between the widgets of this grid layout.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setHorizontalSpacing(int)`: 这为此网格布局中的小部件设置指定参数的水平间距。'
- en: '`grid_layout.setOriginCorner(QtCore.Qt.Corner)`: This sets the origin corner,
    specified in the parameter, for this grid layout.'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setOriginCorner(QtCore.Qt.Corner)`: 这为此网格布局设置指定参数的起始角落。'
- en: '`grid_layout.setRowMinimumHeight(int, int)`: This sets the minimum height in
    pixels (the second parameter) for the rows (the first parameter) of this grid
    layout.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setRowMinimumHeight(int, int)`: 这为此网格布局中的行（第一个参数）设置像素（第二个参数）的最小高度。'
- en: '`grid_layout.setRowStretch(int, int)`: This sets the stretch factor (the second
    parameter) for the rows (the first parameter) of this grid layout.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setRowStretch(int, int)`: 这为此网格布局中的行（第一个参数）设置拉伸因子（第二个参数）。'
- en: '`grid_layout.setVerticalSpacing(int)`: This sets the vertical spacing, specified
    in the parameter, between the widgets in this grid layout.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.setVerticalSpacing(int)`: 这为此网格布局中的小部件设置指定参数的垂直间距。'
- en: functional
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions relate to the current values of the grid layout:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与网格布局的当前值相关：
- en: '`grid_layout.cellRect(int, int)`: This returns the geometry of the cell as
    a `QtCore.QRect` type, with the row (the first parameter) and column (the second
    parameter) specified.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.cellRect(int, int)`: 这返回单元格的几何形状，以 `QtCore.QRect` 类型表示，其中指定了行（第一个参数）和列（第二个参数）。'
- en: '`grid_layout.columnCount()`: This returns the number of columns in this grid
    layout.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.columnCount()`: 这返回此网格布局中的列数。'
- en: '`grid_layout.columnMinimumWidth(int)`: This returns the minimum width, specified
    in the parameter, for the columns of this grid layout.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.columnMinimumWidth(int)`: 这返回指定参数的列的最小宽度，用于此网格布局。'
- en: '`grid_layout.columnStretch(int)`: This returns the stretch factor, specified
    in the parameter, for the columns in this grid layout.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.columnStretch(int)`: 这返回指定参数的列的拉伸因子。'
- en: '`grid_layout.getItemPosition(int)`: This returns the position of the item that
    has the index specified in the parameter in this grid layout.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.getItemPosition(int)`: 这返回在此网格布局中具有指定参数索引的项的位置。'
- en: '`grid_layout.horizontalSpacing()`: This returns the spacing between widgets
    that are laid horizontally.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.horizontalSpacing()`: 这返回水平排列的小部件之间的间距。'
- en: '`grid_layout.itemAtPosition(int, int)`: This returns the item of the `QtWidgets.QLayoutItem`
    type that occupies a row (the first parameter) and a column (the second parameter).'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.itemAtPosition(int, int)`: 这返回占据行（第一个参数）和列（第二个参数）的 `QtWidgets.QLayoutItem`
    类型的项。'
- en: '`grid_layout.originCorner()`: This returns the corner of the `QtCore.Qt.Corner`
    type used for the origin of this grid layout.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.originCorner()`: 这返回用于此网格布局原点的 `QtCore.Qt.Corner` 类型的角落。'
- en: '`grid_layout.rowCount()`: This returns the number of rows in this grid layout.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.rowCount()`: 这返回此网格布局中的行数。'
- en: '**`grid_layout.rowMinimumHeight(int)`**: This returns the minimum height, specified
    in the parameter, for the columns of this grid layout.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '**`grid_layout.rowMinimumHeight(int)`**: 这返回指定参数的最小高度，用于此网格布局的列。'
- en: '`grid_layout.rowStretch(int)`: This returns the stretch factor, specified in
    the parameter, for the rows of this grid layout.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.rowStretch(int)`: 这返回指定参数的行的拉伸因子。'
- en: '`grid_layout.verticalSpacing()`: This returns the spacing between widgets that
    are laid vertically.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`grid_layout.verticalSpacing()`：这返回垂直排列的小部件之间的间距。'
- en: QGridLayout example
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGridLayout示例
- en: In the earlier chapters of this book, we arranged the elements in the main application
    window, and additional widgets with the `QGridLayout` class. So, it is not necessary
    to provide examples of this class, because they were shown before.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们在主应用窗口中排列了元素，并使用`QGridLayout`类添加了额外的小部件。因此，没有必要提供这个类的示例，因为它们之前已经展示过了。
- en: 'Let''s add some properties to the layouts to demonstrate the features described,
    such as adding the content margins and modifying the spacing around layouts to
    make them more representative:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一些属性到布局中，以展示所描述的功能，例如添加内容边距和修改布局周围的间距，使它们更具代表性：
- en: 'In the `UApp` class of the `u_app.py` files, add these lines:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_app.py`文件中的`UApp`类中，添加以下行：
- en: '[PRE7]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Content margins for each side will be added for the layouts, and the spacing
    of the elements of the layout is `3` pixels. This doesn''t make any big changes,
    and the result will look like this:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个边的内容边距将添加到布局中，并且布局的元素间距为`3`像素。这不会造成太大的变化，结果将看起来像这样：
- en: '![](img/7ef52ff2-dfc0-40c8-811d-cbd65f9ab1f1.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7ef52ff2-dfc0-40c8-811d-cbd65f9ab1f1.png)'
- en: This is an optional example. You can experiment with some other features. Use
    them at your discretion.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个可选的示例。您可以尝试一些其他功能。根据您的判断使用它们。
- en: QFormLayout
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFormLayout
- en: 'This class provides layout constructions for various forms with items. The
    form layout includes input widgets and labels that are associated with these inputs.
    This form has two columns. The first column usually consists of labels, and the
    second column is an input widget. These similar form layouts give you the possibility
    of arranging the items in a simple form representation.  The declaration syntax
    of this class is as follows:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类为各种带有项的表单提供布局构造。表单布局包括与这些输入相关联的输入小部件和标签。这个表单有两个列。第一列通常由标签组成，第二列是一个输入小部件。这些类似的表单布局为您提供了以简单表单表示排列项的可能性。  这个类的声明语法如下：
- en: '[PRE8]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: QFormLayout functions
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFormLayout函数
- en: '`QFormLayout` inherits the `QLayout` class and enhances its functionality with
    the following functions.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`QFormLayout`继承自`QLayout`类，并通过以下函数增强了其功能。'
- en: add
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'These functions add elements to the form layout:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数向表单布局添加元素：
- en: '`form_layout.addRow(QtWidgets.QWidget)`: This adds a row with a widget, specified
    in the parameter, to this form layout. The added widget will occupy both columns
    in the row.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.addRow(QtWidgets.QWidget)`：这将在表单布局中添加一个由参数指定的小部件的行。添加的小部件将占据该行的两列。'
- en: '`form_layout.addRow(QtWidgets.QLayout)`: This adds a row with a layout, specified
    in the parameter, to this form layout. The added layout will occupy both columns
    in the row.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.addRow(QtWidgets.QLayout)`：这将在表单布局中添加一个由参数指定的布局的行。添加的布局将占据该行的两列。'
- en: '`form_layout.addRow(QtWidgets.QWidget, QtWidgets.QWidget)`: This adds a row
    with two columns to this form layout. The first widget (the first parameter) will
    occupy the first column and the second widget (the second parameter) will occupy
    the second column.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.addRow(QtWidgets.QWidget, QtWidgets.QWidget)`：这将在表单布局中添加一行，包含两列。第一个小部件（第一个参数）将占据第一列，第二个小部件（第二个参数）将占据第二列。'
- en: '`form_layout.addRow(QtWidgets.QWidget, QtWidgets.QLayout)`: This adds a row
    with two columns to this form layout. The widget (the first parameter) will occupy
    the first column and the layout (the second parameter) will occupy the second
    column.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.addRow(QtWidgets.QWidget, QtWidgets.QLayout)`：这将在表单布局中添加一行，包含两列。小部件（第一个参数）将占据第一列，布局（第二个参数）将占据第二列。'
- en: '**`form_layout.addRow(str, QtWidgets.QWidget)`**: This adds a row with two
    columns to this form layout. A label with text (the first parameter) will be added
    automatically and will occupy the first column, and a widget (the second parameter)
    will occupy the second column.'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '**`form_layout.addRow(str, QtWidgets.QWidget)`**：这将在表单布局中添加一行，包含两列。一个带有文本的标签（第一个参数）将自动添加并占据第一列，而一个小部件（第二个参数）将占据第二列。'
- en: '`form_layout.addRow(str, QtWidgets.QLayout)`: This adds a row with two columns
    to this form layout. A label with text (the first parameter) will be added automatically
    and will occupy the first column, and a layout (the second parameter) will occupy
    the second column.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.addRow(str, QtWidgets.QLayout)`：这将在表单布局中添加一行，包含两列。一个带有文本的标签（第一个参数）将自动添加并占据第一列，一个布局（第二个参数）将占据第二列。'
- en: insert
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: insert
- en: 'These functions insert elements into the form layout:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将元素插入到表单布局中：
- en: '`form_layout.insertRow(int, QtWidgets.QWidget)`: This inserts a row with two
    columns into this form layout at the index (the first parameter). The added widget
    (the second parameter) will occupy both columns in the row.'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.insertRow(int, QtWidgets.QWidget)`: 这将在表单布局中插入一行，包含两列，在索引（第一个参数）处。添加的控件（第二个参数）将占据该行的两列。'
- en: '`form_layout.insertRow(int, QtWidgets.QLayout)`: This inserts a row with two
    columns into this form layout at the index (the first parameter). The added layout
    (the second parameter) will occupy both columns in the row.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.insertRow(int, QtWidgets.QLayout)`: 这将在表单布局中插入一行，包含两列，在索引（第一个参数）处。添加的布局（第二个参数）将占据该行的两列。'
- en: '`form_layout.insertRow(int, QtWidgets.QWidget, QtWidgets.QWidget)`: This inserts
    a row with two columns into this form layout at the index (the first parameter).
    The first widget (the second parameter) will occupy the first column, and the
    second widget (the third parameter) will occupy the second column.'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.insertRow(int, QtWidgets.QWidget, QtWidgets.QWidget)`: 这将在表单布局中插入一行，包含两列，在索引（第一个参数）处。第一个控件（第二个参数）将占据第一列，第二个控件（第三个参数）将占据第二列。'
- en: '`form_layout.insertRow(int, QtWidgets.QWidget, QtWidgets.QLayout)`: This inserts
    a row with two columns into this form layout at the index (the first parameter).
    The widget (the second parameter) will occupy the first column, and the layout
    (the third parameter) will occupy the second column.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.insertRow(int, QtWidgets.QWidget, QtWidgets.QLayout)`: 这将在表单布局中插入一行，包含两列，在索引（第一个参数）处。控件（第二个参数）将占据第一列，布局（第三个参数）将占据第二列。'
- en: '`form_layout.insertRow(int, str, QtWidgets.QWidget)`: This inserts a row with
    two columns into this form layout at the index (the first parameter). A label
    with text (the second parameter) will be added automatically and will occupy the
    first column, and a widget (the third parameter) will occupy the second column.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.insertRow(int, str, QtWidgets.QWidget)`: 这将在表单布局中插入一行，包含两列，在索引（第一个参数）处。将自动添加带有文本的标签（第二个参数），并占据第一列，控件（第三个参数）将占据第二列。'
- en: '`form_layout.insertRow(int, str, QtWidgets.QLayout)`: This inserts a row with
    two columns into this form layout at the index (the first parameter). A label
    with text (the second parameter) will be added automatically and will occupy the
    first column, and a layout (the third parameter) will occupy the second column.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.insertRow(int, str, QtWidgets.QLayout)`: 这将在表单布局中插入一行，包含两列，在索引（第一个参数）处。将自动添加带有文本的标签（第二个参数），并占据第一列，布局（第三个参数）将占据第二列。'
- en: set
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties of the form layout:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置表单布局的参数/属性：
- en: '`form_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldGrowthPolicy)`:
    This sets the growth policy for the fields in this form layout. The available
    policies are as follows:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setFieldGrowthPolicy(QtWidgets.QFormLayout.FieldGrowthPolicy)`:
    这将设置表单布局中字段的增长策略。可用的策略如下：'
- en: '`QtWidgets.QFormLayout.FieldsStayAtSizeHint`—`0`: The fields never grow more
    than the effective size hint.'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.FieldsStayAtSizeHint`—`0`: 字段永远不会超过有效大小提示。'
- en: '`QtWidgets.QFormLayout.ExpandingFieldsGrow`—`1`: The fields with `Expanding`
    or `MinimumExpanding` will grow to fill the available space. Otherwise, they never
    grow more than the effective size hint.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.ExpandingFieldsGrow`—`1`: 具有扩展或`MinimumExpanding`属性的字段将扩展以填充可用空间。否则，它们永远不会超过有效大小提示。'
- en: '`QtWidgets.QFormLayout.AllNonFixedFieldsGrow`—`2`: The fields with a size policy
    will grow to fill the available space.'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.AllNonFixedFieldsGrow`—`2`: 具有大小策略的字段将扩展以填充可用空间。'
- en: '`form_layout.setFormAlignment(QtCore.Qt.Alignment)`: This sets the alignment
    for the contents of this form layout.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setFormAlignment(QtCore.Qt.Alignment)`: 这将设置表单布局内容的对齐方式。'
- en: '`form_layout.setHorizontalSpacing(int)`: This sets the horizontal spacing,
    specified in the parameter, between the widgets in this form layout.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setHorizontalSpacing(int)`: 这将设置表单布局中控件之间的水平间距，以参数指定的值为准。'
- en: '`form_layout.setItem(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QLayoutItem)`:
    This sets the item in the row (the first parameter) with the role (the second
    parameter) to an item (the third parameter).'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setItem(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QLayoutItem)`:
    这将设置行（第一个参数）中的项目，其角色（第二个参数）为项目（第三个参数）。'
- en: '`form_layout.setLabelAlignment(QtCore.Qt.Alignment)`: This sets the horizontal
    alignment, specified in the parameter, for the labels in this form layout.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setLabelAlignment(QtCore.Qt.Alignment)`: 这将此表单布局中标签的水平对齐方式设置为参数中指定的对齐方式。'
- en: '`form_layout.setLayout(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QLayout)`:
    This sets the sub-layout (the third parameter) in the row (the first parameter)
    for the role (the second parameter) of this form layout.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setLayout(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QLayout)`:
    这将为表单布局中的行（第一个参数）设置子布局（第三个参数），用于此表单布局的角色（第二个参数）。'
- en: '`form_layout.setRowWrapPolicy(QtWidgets.QFormLayout.RowWrapPolicy)`: This sets
    the row''s wrap policy, specified in the parameter, for the form of this layout.
    The available policies are as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setRowWrapPolicy(QtWidgets.QFormLayout.RowWrapPolicy)`: 这将为此布局的表单设置行换行策略，策略由参数指定。可用的策略如下：'
- en: '**`QtWidgets.QFormLayout.DontWrapRows`**—`0`: The rows don''t wrap.'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`QtWidgets.QFormLayout.DontWrapRows`**—`0`: 行不换行。'
- en: '`QtWidgets.QFormLayout.WrapLongRows`—`1`: There''s enough horizontal space
    to fit the widest label, and the rest of the space is for the fields.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.WrapLongRows`—`1`: 有足够的水平空间来容纳最宽的标签，其余空间用于字段。'
- en: '`QtWidgets.QFormLayout.WrapAllRows`—`2`: The fields are always below their
    labels.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.WrapAllRows`—`2`: 字段始终位于其标签下方。'
- en: '`form_layout.setVerticalSpacing(int)`: This sets the vertical spacing, specified
    in the parameter, between the widgets in this form layout.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setVerticalSpacing(int)`: 这将为此表单布局中的小部件设置参数中指定的垂直间距。'
- en: '`form_layout.setWidget(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QWidget)`:
    This sets the widget (the third parameter) in the row (the first parameter) for
    the role (the second parameter). The available item roles are as follows:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.setWidget(int, QtWidgets.QFormLayout.ItemRole, QtWidgets.QWidget)`:
    这将为行（第一个参数）设置小部件（第三个参数），用于角色（第二个参数）。可用的项目角色如下：'
- en: '`QtWidgets.QFormLayout.LabelRole`—`0`: A label widget.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.LabelRole`—`0`: 标签小部件。'
- en: '`QtWidgets.QFormLayout.FieldRole`—`1`: A field widget.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.FieldRole`—`1`: 字段小部件。'
- en: '`QtWidgets.QFormLayout.SpanningRole`—`2`: A widget that spans label and field
    columns.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QFormLayout.SpanningRole`—`2`: 一个跨越标签和字段列的小部件。'
- en: functional
  id: totrans-277
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions relate to the current values of the form layout, changes in
    functionality, and so on:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与表单布局的当前值、功能变化等相关：
- en: '`form_layout.fieldGrowthPolicy()`: This returns the growth policy of the `QtWidgets.QFormLayout.FieldGrowthPolicy`
    type.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.fieldGrowthPolicy()`: 这返回 `QtWidgets.QFormLayout.FieldGrowthPolicy`
    类型的增长策略。'
- en: '`form_layout.formAlignment()`: This returns the alignment of the `QtCore.Qt.Alignment`
    type used for this form layout.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.formAlignment()`: 这返回用于此表单布局的 `QtCore.Qt.Alignment` 类型的对齐方式。'
- en: '`form_layout.getItemPosition(int)`: This retrieves the row and role of the
    item specified by the index in the parameter.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.getItemPosition(int)`: 这检索由参数中的索引指定的项目的行和角色。'
- en: '`form_layout.getLayoutPosition(QtWidgets.QLayout)`: This retrieves the row
    and role of the child layout specified in the parameter.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.getLayoutPosition(QtWidgets.QLayout)`: 这检索参数中指定的子布局的行和角色。'
- en: '`form_layout.getWidgetPosition(QtWidgets.QWidget)`: This retrieves the row
    and role of the widget specified in the parameter.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.getWidgetPosition(QtWidgets.QWidget)`: 这检索参数中指定的小部件的行和角色。'
- en: '`form_layout.horizontalSpacing()`: This returns the spacing between widgets
    that are laid horizontally in this form layout.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.horizontalSpacing()`: 这返回在此表单布局中水平排列的小部件之间的间距。'
- en: '`form_layout.itemAt(int, QtWidgets.QFormLayout.ItemRole)`: This returns the
    layout item at the row (the first parameter) with the item''s role (the second
    parameter).'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.itemAt(int, QtWidgets.QFormLayout.ItemRole)`: 这返回行（第一个参数）中具有项目角色的布局项（第二个参数）。'
- en: '`form_layout.labelAlignment()`: This returns the horizontal alignment of the
    `QtCore.Qt.Alignment` type for the labels in this form layout.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.labelAlignment()`: 这返回此表单布局中标签的 `QtCore.Qt.Alignment` 类型的水平对齐方式。'
- en: '`form_layout.labelForField(QtWidgets.QWidget)`: This returns the label associated
    with the widget specified in the parameter.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.labelForField(QtWidgets.QWidget)`: 这返回与参数中指定的小部件关联的标签。'
- en: '`form_layout.labelForField(QtWidgets.QLayout)`: This returns the label associated
    with the layout specified in the parameter.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.labelForField(QtWidgets.QLayout)`: 这返回与参数中指定的布局关联的标签。'
- en: '`form_layout.removeRow(int)`: This removes the row specified in the parameter
    from this form layout.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.removeRow(int)`: 这将从表单布局中删除参数中指定的行。'
- en: '`form_layout.removeRow(QtWidgets.QWidget)`: This removes the row associated
    with the widget specified in the parameter from this form layout.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.removeRow(QtWidgets.QWidget)`: 这将从此表单布局中移除与指定小部件关联的行。'
- en: '**`form_layout.removeRow(QtWidgets.QLayout)`**: This removes the row associated
    with the layout specified in the parameter from this form layout.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '**`form_layout.removeRow(QtWidgets.QLayout)`**: 这将从此表单布局中移除与指定布局关联的行。'
- en: '`form_layout.rowCount()`: This returns the number of rows in this form layout.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.rowCount()`: 这返回此表单布局中的行数。'
- en: '`form_layout.rowWrapPolicy()`: This returns the row wrap policy of the `QtWidgets.QFormLayout.RowWrapPolicy`
    type in this layout.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.rowWrapPolicy()`: 这返回此布局中 `QtWidgets.QFormLayout.RowWrapPolicy`
    类型的行包装策略。'
- en: '`form_layout.takeRow(int)`: This removes the row specified in the parameter
    from this form layout without deleting it.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.takeRow(int)`: 这将从此表单布局中移除指定参数的行，但不删除它。'
- en: '`form_layout.takeRow(QtWidgets.QWidget)`: This removes the widget specified
    in the parameter from this form layout without deleting it.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.takeRow(QtWidgets.QWidget)`: 这将从此表单布局中移除指定的小部件，但不删除它。'
- en: '`form_layout.takeRow(QtWidgets.QLayout)`: This removes the layout specified
    in the parameter from this form layout without deleting it.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.takeRow(QtWidgets.QLayout)`: 这将从此表单布局中移除指定的布局，但不删除它。'
- en: '`form_layout.verticalSpacing()`: This returns the spacing between widgets that
    are laid vertically.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`form_layout.verticalSpacing()`: 这返回垂直排列的小部件之间的间距。'
- en: QFormLayout example
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFormLayout 示例
- en: 'Let''s look at an example of the form layout that will be used in this application.
    Let''s create the `Settings` option in the `Options` section at the top panel
    of the application:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个应用程序将使用的表单布局的示例。让我们在应用程序顶部面板的 `Options` 部分创建 `Settings` 选项：
- en: 'To do this, create two files called `u_settings.py`, one in `App/App_PySide2/`
    and one in `App/App_PyQt5/`, and add the following code:'
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要完成这个任务，请创建两个名为 `u_settings.py` 的文件，一个位于 `App/App_PySide2/`，另一个位于 `App/App_PyQt5/`，并在其中添加以下代码：
- en: 'Add the following to the `App_PySide2/u_settings.py`  file''s `import` section:'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `App_PySide2/u_settings.py` 文件中的 `import` 部分：
- en: '[PRE9]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Add the following to the `App_PyQt5/u_settings.py` file''s `import` section:'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将以下内容添加到 `App_PyQt5/u_settings.py` 文件中的 `import` 部分：
- en: '[PRE10]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the `USets` class to this file with lines that will open and read the `settings.txt`
    file:'
  id: totrans-305
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将打开并读取 `settings.txt` 文件的 `USets` 类添加到该文件中：
- en: '[PRE11]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This class inherits the `QWidget` class that will be displayed as a separate
    window of the application.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类继承自 `QWidget` 类，它将在应用程序中作为独立窗口显示。
- en: 'Add the first line edit field for the first background color of the app with
    the button to open the color dialog to the `__init__()` function of the `USets`
    class:'
  id: totrans-308
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于应用程序第一种背景颜色的第一个行编辑字段以及打开颜色对话框的按钮添加到 `USets` 类的 `__init__()` 函数中：
- en: '[PRE12]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We've made an instance of the first line edit field with some text of the first
    color from the `settings.txt` file, and a button to call the color dialog window.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个第一行编辑字段的实例，其中包含来自 `settings.txt` 文件的第一种颜色的文本，以及一个调用颜色对话框窗口的按钮。
- en: 'Add the second line edit field for the second background color of the app with
    the button to open a color dialog to the `__init__()` function of the `USets`
    class:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于应用程序第二个背景颜色的第二个行编辑字段以及打开颜色对话框的按钮添加到 `USets` 类的 `__init__()` 函数中：
- en: '[PRE13]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We've created an instance of the second line edit field with a text of the second
    color from the `settings.txt` file, and a button to call the color dialog window.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个第二行编辑字段的实例，其中包含来自 `settings.txt` 文件的第二种颜色的文本，以及一个调用颜色对话框窗口的按钮。
- en: 'Add the third line edit field for the first additional color (for the text,
    and for the hover effect) of the app with the button to open a color dialog to
    the `__init__()` function of the `USets` class:'
  id: totrans-314
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于应用程序第一种附加颜色（用于文本和悬停效果）的第三个行编辑字段以及打开颜色对话框的按钮添加到 `USets` 类的 `__init__()` 函数中：
- en: '[PRE14]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: We've added an instance of the third line edit field with a text of the third
    color from the `settings.txt` file, and a button to call the color dialog window.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经添加了一个第三行编辑字段的实例，其中包含来自 `settings.txt` 文件的第三种颜色的文本，以及一个调用颜色对话框窗口的按钮。
- en: 'Add the fourth line edit field for the second additional color (for the text,
    and for the hover effect) of the app with a button that opens a color dialog to
    the `__init__()` function of the `USets` class:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用于应用程序第二种附加颜色（用于文本和悬停效果）的第四个行编辑字段以及打开颜色对话框的按钮添加到 `USets` 类的 `__init__()` 函数中：
- en: '[PRE15]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: We've added an instance of the third line edit field with a text of the third
    color from the `settings.txt` file, and a button to call the color dialog window.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个实例的第三个行编辑字段，其文本为`settings.txt`文件中的第三个颜色，并添加了一个按钮来调用颜色对话框窗口。
- en: 'Add the `Reset` and `Save` buttons to this widget:'
  id: totrans-320
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Reset`和`Save`按钮添加到此小部件：
- en: '[PRE16]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: It is recommended to fix the size of the buttons. For the very best construction
    of your layouts, this is required.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 建议固定按钮的大小。为了最佳布局构造，这是必需的。
- en: 'Add the horizontal box layout for the label and buttons:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为标签和按钮添加水平框布局：
- en: '[PRE17]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will be an addition to the main form layout.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是主表单布局的一个补充。
- en: 'Add the form layout with text labels (automatically created) and line edit
    fields:'
  id: totrans-326
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加带有文本标签（自动创建）和行编辑字段的表单布局：
- en: '[PRE18]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This demonstrates the form layout construction in the application. Each row
    has a label and a line edit field.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 这演示了应用程序中的表单布局构造。每一行都有一个标签和一个行编辑字段。
- en: 'Add a vertical layout for the form layout and for the horizontal layout when
    adding this layout to the widget:'
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在将此布局添加到小部件时，为表单布局和水平布局添加垂直布局：
- en: '[PRE19]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: We've combined two layouts into one. This demonstrates that we can create any
    nesting layout constructions.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个布局合并为一个。这证明了我们可以创建任何嵌套布局构造。
- en: 'At the end of the `__init__()` function, add the signals:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`__init__()`函数的末尾，添加信号：
- en: '[PRE20]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: These signals will call the color dialog windows for each line of the form layout
    if the corresponding button is clicked.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 如果点击相应的按钮，这些信号将调用表单布局每一行的颜色对话框窗口。
- en: 'Now add the functions that will call the function that opens the color dialog
    when a button is clicked:'
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加将调用打开颜色对话框的功能，当按钮被点击时：
- en: '[PRE21]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Each function will call the color dialog window with the option to choose a
    color for the background of the application window and the text color of the elements.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 每个功能都会调用颜色对话框窗口，并可选择为应用程序窗口的背景和元素的文本颜色：
- en: 'Add the function that opens the color dialog and sets the text with the selected
    color to the related line edit field:'
  id: totrans-338
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加打开颜色对话框并将所选颜色设置为相关行编辑字段的文本的函数：
- en: '[PRE22]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This function will display the color dialog window. If a favorite color is chosen
    and a dialog window is accepted by clicking Ok, Accept, or another similar button,
    it will set the text to an RGBA color in the corresponding line edit field.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能将显示颜色对话框窗口。如果选择了喜欢的颜色，并且通过点击Ok、Accept或其他类似按钮接受对话框，它将设置相应行编辑字段中的文本为RGBA颜色。
- en: 'We can add the bottom section of the file if we use this widget separately
    from the application as a window:'
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们将此小部件作为窗口单独从应用程序中使用，我们可以添加文件的底部部分：
- en: '[PRE23]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now we need to add lines to the `u_app.py` file for running this settings widget
    from the application:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`u_app.py`文件中添加行以从应用程序运行此设置小部件：
- en: 'In the `UApp` class  `__init__()` function, at the bottom, add the following
    signal:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UApp`类的`__init__()`函数底部，添加以下信号：
- en: '[PRE24]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Using the `triggered()` signal of the third menu section, we will call the `settings()`
    function.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 使用第三个菜单部分的`triggered()`信号，我们将调用`settings()`函数。
- en: 'Then, add the function for the `Options` section of the top panel:'
  id: totrans-347
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加顶部面板`Options`部分的函数：
- en: '[PRE25]'
  id: totrans-348
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In the **`options()`** function, we created an instruction for the `Settings` option.
    We imported the `USets` class of the `u_settings.py` module, and then created
    the instance of this class and showed this window. Also, we added two `clicked()`
    signals of the `Save` and `Reset` buttons.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在`options()`函数中，我们为`Settings`选项创建了一个指令。我们导入了`u_settings.py`模块的`USets`类，然后创建了此类的实例并显示了此窗口。此外，我们还添加了`Save`和`Reset`按钮的两个`clicked()`信号。
- en: 'Add the function for clicking the `Save` button:'
  id: totrans-350
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加点击`Save`按钮的函数：
- en: '[PRE26]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This function will write the string with the chosen colors to the `settings.txt`
    file using the Python standard library's `open()` function.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能将使用Python标准库的`open()`函数将所选颜色的字符串写入`settings.txt`文件。
- en: 'Add the function for clicking the `Reset` button:'
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加点击`Reset`按钮的函数：
- en: '[PRE27]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This function will restore to the default colors of the application.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能将恢复应用程序的默认颜色。
- en: 'Add the function that will be called to run the new app:'
  id: totrans-356
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加将运行新应用程序的功能：
- en: '[PRE28]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function will open the new main application window as a sub-process and
    exit the previous window.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能将以子进程的形式打开新的主应用程序窗口并退出前一个窗口。
- en: 'Now add the following lines to the `u_style.py` file:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将以下行添加到`u_style.py`文件：
- en: 'We need to change the lines at the top of the file with the `color` variable
    to the following:'
  id: totrans-360
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将文件顶部的`color`变量所在的行更改为以下内容：
- en: '[PRE29]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: And now, we need to add the default color settings for the application, which
    will be installed when the application is launched. To do this, create `u_defaults.py`
    files in both the `App/App_PySide2/` and `App/App_PyQt5/` directories.
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要为应用程序添加默认颜色设置，这些设置将在应用程序启动时安装。为此，在`App/App_PySide2/`和`App/App_PyQt5/`目录中创建`u_defaults.py`文件。
- en: 'Then we can add these lines to these files:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以将这些行添加到这些文件中：
- en: '[PRE30]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note that the `colors` variable must contain a string with the color values,
    split by a space.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`colors`变量必须包含一个由空格分隔的颜色值的字符串。
- en: 'We need to add these lines to the `u_app.py` file for the application to run correctly. At
    the top of the `u_app.py` file, before all the imports, we need to add these lines:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将这些行添加到`u_app.py`文件中，以便应用程序能够正常运行。在`u_app.py`文件的顶部，在所有导入之前，我们需要添加以下行：
- en: '[PRE31]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'If this application starts for the first time, default colors will be used
    for the background and text. If we run the `u_app.py` file, we will see a simple
    widget with form, vertical box, and horizontal box layouts implemented:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个应用程序是第一次启动，背景和文本将使用默认颜色。如果我们运行`u_app.py`文件，我们将看到一个简单的带有表单、垂直框和水平框布局的小部件：
- en: '![](img/7504a260-74ae-4515-83f3-c2ad38271525.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7504a260-74ae-4515-83f3-c2ad38271525.png)'
- en: So, when we choose colors or type in RGBA values to the line edit fields, they
    will be saved in the simple text file. In reality, this is not a reliable way
    to save and hold default settings (and not just settings). This example is optional.
    Moreover, saving default settings to simple text files, and working in this manner
    in general, is not recommended at all. This piece of the application just allows
    us to play with colors. Furthermore, settings for fonts, sizes of elements, and
    more, can be added in a similar way. Which settings to use remains at the discretion
    of the user.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们选择颜色或在行编辑字段中输入RGBA值时，它们将被保存在简单的文本文件中。实际上，这不是保存和保留默认设置（不仅仅是设置）的可靠方式。这个应用程序的这部分只是允许我们玩颜色。此外，字体设置、元素大小等设置也可以以类似的方式添加。使用哪些设置由用户自行决定。
- en: 'We can just demonstrate, with a color selection, that the application will
    look like this:'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过颜色选择来演示，应用程序将看起来像这样：
- en: '![](img/069431b6-49a8-4a52-b4b2-f42141c6b6cd.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](img/069431b6-49a8-4a52-b4b2-f42141c6b6cd.png)'
- en: The color of the application now is white.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序现在的颜色是白色。
- en: QStackedLayout
  id: totrans-374
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QStackedLayout
- en: 'In addition, the Qt library provides stacked layouts. This class creates a
    layout that arranges items as a stack of widgets. By default, only one widget
    is visible at a time; the others are hidden. Similar to the stacked layout is
    the tab widget that was previously implemented in the application. The `QStackedWidget`
    class is also available and can be used as the top class of the stacked layout. The
    declaration syntax of this class is as follows:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Qt库提供了堆叠布局。此类创建一个将项目作为小部件堆栈排列的布局。默认情况下，一次只可见一个小部件；其他小部件被隐藏。与堆叠布局类似的是之前在应用程序中实现的标签小部件。`QStackedWidget`类也可用，可以用作堆叠布局的顶级类。此类的声明语法如下：
- en: '[PRE32]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: QStackedLayout functions
  id: totrans-377
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QStackedLayout函数
- en: '`QStackedLayout` inherits the `QLayout` class and enhances its functionality
    with the following functions.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`QStackedLayout`继承自`QLayout`类，并通过以下功能增强了其功能。'
- en: set
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties of the stacked layout:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 这些功能设置堆叠布局的参数/属性：
- en: '`stacked_layout.setCurrentIndex(int)`: This sets the index, specified in the
    parameter, of the widget that will be currently visible and active in this stacked
    layout.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.setCurrentIndex(int)`: 这将设置参数中指定的将在当前堆叠布局中可见和激活的小部件的索引。'
- en: '`stacked_layout.setCurrentWidget(QtWidgets.QWidget)`: This sets the widget,
    specified in the parameter, that will be currently visible and active in this
    stacked layout.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.setCurrentWidget(QtWidgets.QWidget)`: 这将设置参数中指定的将在当前堆叠布局中可见和激活的小部件。'
- en: '`stacked_layout.setStackingMode(QtWidgets.QStackedLayout.StackingMode)`: This
    sets the stacking mode, specified in the parameter, for this stacked layout. The
    available modes are as follows:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.setStackingMode(QtWidgets.QStackedLayout.StackingMode)`: 这将为此堆叠布局设置参数中指定的堆叠模式。可用的模式如下：'
- en: '`QtWidgets.QStackedLayout.StackOne`—`0`: Only one widget is visible.'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QStackedLayout.StackOne`—`0`: 只有一个小部件可见。'
- en: '`QtWidgets.QStackedLayout.StackAll`—`1`: All widgets are visible, and the current
    widget is raised and active.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QStackedLayout.StackAll`—`1`: 所有小部件都可见，当前小部件被提升并激活。'
- en: functional
  id: totrans-386
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These functions relate to the current values of the stacked layout, changes
    in functionality, and so on:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与堆叠布局的当前值、功能变化等相关：
- en: '`stacked_layout.currentIndex()`: This returns the index of the widget that
    is currently visible in this stacked layout.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.currentIndex()`: 这个函数返回当前在这个堆叠布局中可见的小部件的索引。'
- en: '`stacked_layout.currentWidget()`: This returns the widget of the `QtWidgets.QWidget`
    type that is currently visible in this stacked layout.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.currentWidget()`: 这个函数返回当前在这个堆叠布局中可见的`QtWidgets.QWidget`类型的小部件。'
- en: '`stacked_layout.insertWidget(int, QtWidgets.QWidget)`: This inserts the widget
    (the second parameter) at the index (the first parameter) of this stacked layout.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.insertWidget(int, QtWidgets.QWidget)`: 这个函数将小部件（第二个参数）插入到这个堆叠布局的索引位置（第一个参数）。'
- en: '`stacked_layout.stackingMode()`: This returns the current stacking mode of
    the `QtWidgets.QStackedLayout.StackingMode` type for this stacked layout.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.stackingMode()`: 这个函数返回这个堆叠布局的`QtWidgets.QStackedLayout.StackingMode`类型的当前堆叠模式。'
- en: '`stacked_layout.widget(int)`: This returns the widget at the index specified
    in the parameter.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.widget(int)`: 这个函数返回参数指定的索引位置的小部件。'
- en: signals
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'These signals are available for the `QStackedLayout` class:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信号对`QStackedLayout`类可用：
- en: '`stacked_layout.currentChanged(int)`: This signal is emitted when the current
    widget in the stacked layout changes, with the new current widget index passed
    in the parameter.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.currentChanged(int)`: 当堆叠布局中的当前小部件改变时，会发出这个信号，新的当前小部件索引通过参数传递。'
- en: '`stacked_layout.widgetRemoved(int)`: This signal is emitted when the widget
    is removed from the stacked layout, with the index of the widget passed in the
    parameter.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`stacked_layout.widgetRemoved(int)`: 当小部件从堆叠布局中移除时，会发出这个信号，小部件的索引通过参数传递。'
- en: Summary
  id: totrans-397
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter completes the part of the book dedicated to learning about the
    classes and properties of the Qt framework that help us to build a basic application
    with a GUI. Layouts in an application are a very important mechanism to arrange
    items in a user-friendly way. Note that layouts are not elements or items and
    that they provide functionality behind the scenes of the GUI app's windows and
    widgets. We need to remember this when we perform nesting of the layouts within
    each other multiple times. Also, the abstract base classes, described earlier
    in this chapter, allow us to construct various special layouts for the application.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了关于学习Qt框架中帮助我们构建具有GUI的基本应用程序的类和属性的书籍部分。在应用程序中，布局是一种非常重要的机制，用于以用户友好的方式排列项目。请注意，布局不是元素或项目，并且它们在GUI应用程序的窗口和控件的后台提供功能。当我们多次在布局之间进行嵌套时，我们需要记住这一点。此外，本章前面描述的抽象基类允许我们为应用程序构建各种特殊布局。
- en: The next chapter will start the section of the book about the functional features
    of the application. We will explore a very small set of related tools, from the
    giant set of tools on offer with Python that are available for implementation
    in the application for various purposes. We will be introduced to databases and
    their implementation.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将开始介绍关于应用程序功能特性的书籍章节。我们将探索一组非常小的相关工具，这些工具是从Python提供的巨大工具集中挑选出来的，可用于实现应用程序中的各种目的。我们将介绍数据库及其实现。
