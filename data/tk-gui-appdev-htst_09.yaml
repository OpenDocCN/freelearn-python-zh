- en: Appendix B. Quick Reference Sheets
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 快速参考表
- en: Large portions of the appendix have been generated from the built-in Tkinter
    documentation, and are accordingly copyright of Python Software Foundation (Copyright
    © 2001-2013 Python Software Foundation; All Rights Reserved).
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 附录的大部分内容是从内置Tkinter文档生成的，因此相应地归Python软件基金会版权所有（版权所有 © 2001-2013 Python软件基金会；版权所有）。
- en: Options common to widgets
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件共有选项
- en: 'The following table consists options common to most of the widgets their functionalities
    and the list of widgets to which the options are not applicable:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含大多数小部件共有的选项、它们的职能以及不适用于这些选项的小部件列表：
- en: '| Widget option | Function | Not applicable to widgets |'
  id: totrans-4
  prefs: []
  type: TYPE_TB
  zh: '| 小部件选项 | 功能 | 不适用于小部件 |'
- en: '| --- | --- | --- |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `background` (`bg`) | Picks background color. |   |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '| `background` (`bg`) | 选择背景颜色。 | （无内容） |'
- en: '| `borderwidth` (`bd`) | Defines width of border in pixel. |   |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '| `borderwidth` (`bd`) | 定义边框的像素宽度。 | （无内容） |'
- en: '| `cursor` | It is the mouse cursor to be used for the widget. |   |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '| `cursor` | 指定小部件使用的鼠标光标。 | （无内容） |'
- en: '| `relief` | It specifies the border style for a widget. |   |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '| `relief` | 指定小部件的边框样式。 | （无内容） |'
- en: '| `takefocus` | If window accepts focus during keyboard traversal. |   |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '| `takefocus` | 如果窗口在键盘遍历期间接受焦点。 | （无内容） |'
- en: '| `width` | An integer specifying the relative width of a widget. | Menu |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '| `width` | 一个整数，指定小部件的相对宽度。 | 菜单 |'
- en: '| `font` | It specifies font family and font size. | Toplevel, Canvas, Frame,
    and Scrollbar |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| `font` | 指定字体家族和字体大小。 | 最顶层、画布、框架和滚动条 |'
- en: '| `foreground` (`fg`) | It specifies foreground color. | Toplevel, Canvas,
    Frame, and Scrollbar |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '| `foreground` (`fg`) | 指定前景颜色。 | 最顶层、画布、框架和滚动条 |'
- en: '| `highlightbackground` | color | Menu |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| `highlightbackground` | 颜色 | 菜单 |'
- en: '| `highlightcolor` | color | Menu |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| `highlightcolor` | 颜色 | 菜单 |'
- en: '| `highlightthickness` | It is measured in pixels. | Menu |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `highlightthickness` | 以像素为单位进行测量。 | 菜单 |'
- en: '| `relief` | Specifies the 3D effect to be applied to a given widget. Valid
    values are `RAISED`, `SUNKEN`, `FLAT`, `RIDGE`, `SOLID`, and `GROOVE`. |   |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `relief` | 指定应用于给定小部件的3D效果。有效值有 `RAISED`、`SUNKEN`、`FLAT`、`RIDGE`、`SOLID`
    和 `GROOVE`。 | （无内容） |'
- en: '| `takefocus` | Specified as `1` or `0` representing whether or not a widget
    takes focus during keyboard tab-based traversal. |   |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| `takefocus` | 指定小部件在键盘标签遍历期间是否接受焦点。 | （无内容） |'
- en: '| `width` | Integer specifying the width of a widget. | Menu |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| `width` | 指定小部件宽度的整数。 | 菜单 |'
- en: 'The following table consists options common to most of the widgets their functionalities
    and the list of widgets to which the options are applicable:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格包含大多数小部件共有的选项、它们的职能以及适用于这些选项的小部件列表：
- en: '| Widget Option | Function | Applicable to |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| 小部件选项 | 功能 | 适用于 |'
- en: '| --- | --- | --- |'
  id: totrans-22
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `activebackground` | Color of background when widget is active. | Menu, Menubutton,
    Button, Checkbutton, Radiobutton, Scale, and Scrollbar |'
  id: totrans-23
  prefs: []
  type: TYPE_TB
  zh: '| `activebackground` | 当小部件处于活动状态时的背景颜色。 | 菜单、菜单按钮、按钮、复选框、单选按钮、刻度和滚动条 |'
- en: '| `activeforeground` | Color of foreground when widget is active. | Menu, Menubutton,
    Button, Checkbutton, and Radiobutton |'
  id: totrans-24
  prefs: []
  type: TYPE_TB
  zh: '| `activeforeground` | 当小部件处于活动状态时的前景颜色。 | 菜单、菜单按钮、按钮、复选框和单选按钮 |'
- en: '| `anchor` | Indicates where text or a bitmap would be displayed on a widget.
    Valid values are `n`, `ne`, `e`, `se`, `s`, `sw`, `w`, `nw`, or `center`. | Menubutton,
    Button, Checkbutton, Radiobutton, Label, and Message |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| `anchor` | 指示文本或位图在窗口组件上显示的位置。有效值有 `n`、`ne`、`e`、`se`、`s`、`sw`、`w`、`nw` 或
    `center`。 | 菜单按钮、按钮、复选框、单选按钮、标签和信息框 |'
- en: '| `bitmap` | Indicates a bitmap to display in the widget. | Menubutton, Button,
    Checkbutton, Radiobutton, and Label |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| `bitmap` | 指示在窗口组件中显示的位图。 | 菜单按钮、按钮、复选框、单选按钮和标签 |'
- en: '| `command` | Indicates a command callback to associate with the widget, which
    would be normally invoked on mouse button 1 release over the widget. | Button,
    Checkbutton, Radiobutton, Scale, and Scrollbar |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `command` | 指示与窗口关联的命令回调，通常在窗口上鼠标按钮1释放时调用。 | 按钮、复选框、单选按钮、刻度和滚动条 |'
- en: '| `disabledforeground` | Indicates the foreground color to display when a widget
    is in disabled state. | Menu, Menubutton, Button, Checkbutton, and Radiobutton
    |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `disabledforeground` | 当小部件处于禁用状态时显示的前景色。 | 菜单、菜单按钮、按钮、复选框和单选按钮 |'
- en: '| `height` | Indicates height of widget, in units in which the font has been
    specified for the given widget. | Toplevel, Menubutton, Button, Checkbutton, Radiobutton,
    Label, Frame, Listbox, and Canvas |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `height` | 表示小部件的高度，以给定小部件指定的字体单位表示。 | 最顶层、菜单按钮、按钮、复选框、单选按钮、标签、框架、列表框和画布
    |'
- en: '| `image` | Indicates an image to display in the widget. | Menubutton, Button,
    Checkbutton, Radiobutton, and Label |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `image` | 表示在部件中显示的图像。 | Menubutton、Button、Checkbutton、Radiobutton 和 Label
    |'
- en: '| `justify` | Applicable when multiple lines of text are displayed in a widget.
    This determines how the text lines line up with each other. Must be one of LEFT,
    CENTER, or RIGHT. | Menubutton, Button, Checkbutton, Radiobutton, Label, Entry,
    and Message |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `justify` | 当在部件中显示多行文本时适用。这决定了文本行之间的对齐方式。必须是 LEFT、CENTER 或 RIGHT 之一。 | Menubutton、Button、Checkbutton、Radiobutton、Label、Entry
    和 Message |'
- en: '| `selectbackground` | Indicates the background color to show when displaying
    selected items. | Text, Listbox, Entry, and Canvas |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `selectbackground` | 表示显示选中项时要显示的背景颜色。 | Text、Listbox、Entry 和 Canvas |'
- en: '| `selectborderwidth` | Indicates the border width to show when displaying
    selected items. | Text, Listbox, Entry, and Canvas |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `selectborderwidth` | 表示显示选中项时要显示的边框宽度。 | Text、Listbox、Entry 和 Canvas |'
- en: '| `selectforeground` | Indicates the foreground color to show when displaying
    selected items. | Text, Listbox, Entry, and Canvas |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `selectforeground` | 表示显示选中项时要显示的前景色。 | Text、Listbox、Entry 和 Canvas |'
- en: '| `state` | Indicates one of two or three states that a widget may be under.
    Valid values `normal`, `active`, or `disabled`. | Menubutton, Button, Checkbutton,
    Radiobutton, Text, Entry, and Scale |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `state` | 表示部件可能处于的两个或三个状态之一。有效值 `normal`、`active` 或 `disabled`。 | Menubutton、Button、Checkbutton、Radiobutton、Text、Entry
    和 Scale |'
- en: '| `text` | Indicates a string to be displayed inside the widget. | Menubutton,
    Button, Checkbutton, Radiobutton, Label, and Message |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `text` | 表示要在部件内显示的字符串。 | Menubutton、Button、Checkbutton、Radiobutton、Label
    和 Message |'
- en: '| `textvariable` | Indicates the name of a variable. The value of the variable
    is changed to string in order to be displayed in the widget. The widget automatically
    updates as and when the variable value changes. | Menubutton, Button, Checkbutton,
    Radiobutton, Label, Entry, and Message |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| `textvariable` | 表示变量的名称。变量的值被更改为字符串以便在部件中显示。当变量值改变时，部件会自动更新。 | Menubutton、Button、Checkbutton、Radiobutton、Label、Entry
    和 Message |'
- en: '| `underline` | Indicates the integer index of a character to underline in
    the widget. | Menubutton, Button, Checkbutton, Radiobutton, and Label |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| `underline` | 表示在部件中下划线的字符的整数索引。 | Menubutton、Button、Checkbutton、Radiobutton
    和 Label |'
- en: '| `wraplength` | Indicates the maximum line length for widgets that have word
    wrapping. | Menubutton, Button, Checkbutton, Radiobutton, and Label |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| `wraplength` | 表示具有单词换行的部件的最大行长度。 | Menubutton、Button、Checkbutton、Radiobutton
    和 Label |'
- en: Widget-specific options
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部件特定选项
- en: We do not reproduce all widget-specific options. You can obtain all available
    options for a given widget in the Python interactive shell using the help command.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并没有列出所有部件特定选项。您可以在 Python 交互式外壳中使用 help 命令获取给定部件的所有可用选项。
- en: 'To obtain help on any `Tkinter` class, you first import Tkinter into the namespace
    like:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取任何 `Tkinter` 类的帮助，首先将 Tkinter 导入命名空间，如下所示：
- en: '[PRE0]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following commands can then be used to get information on a particular
    widget:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用以下命令获取特定部件的信息：
- en: '| Widget Name | Getting Help |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| Widget Name | 获取帮助 |'
- en: '| --- | --- |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Label | `help(Tkinter.Label)` |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| Label | `help(Tkinter.Label)` |'
- en: '| Button | `help(Tkinter.Button)` |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| Button | `help(Tkinter.Button)` |'
- en: '| Canvas | `help(Tkinter.Canvas)` |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Canvas | `help(Tkinter.Canvas)` |'
- en: '| CheckButton | `help(Tkinter.Checkbutton)` |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| CheckButton | `help(Tkinter.Checkbutton)` |'
- en: '| Entry | `help(Tkinter.Entry)` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Entry | `help(Tkinter.Entry)` |'
- en: '| Frame | `help(Tkinter.Frame)` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Frame | `help(Tkinter.Frame)` |'
- en: '| LabelFrame | `help(Tkinter.LabelFrame)` |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| LabelFrame | `help(Tkinter.LabelFrame)` |'
- en: '| Listbox | `help(Tkinter.Listbox)` |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| Listbox | `help(Tkinter.Listbox)` |'
- en: '| Menu | `help(Tkinter.Menu)` |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| Menu | `help(Tkinter.Menu)` |'
- en: '| Menubutton | `help(Tkinter.Menubutton)` |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| Menubutton | `help(Tkinter.Menubutton)` |'
- en: '| Message | `help(Tkinter.Message)` |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| Message | `help(Tkinter.Message)` |'
- en: '| OptionMenu | `help(Tkinter.OptionMenu)` |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| OptionMenu | `help(Tkinter.OptionMenu)` |'
- en: '| PanedWindow | `help(Tkinter.PanedWindow)` |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| PanedWindow | `help(Tkinter.PanedWindow)` |'
- en: '| RadioButton | `help(Tkinter.Radiobutton)` |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| RadioButton | `help(Tkinter.Radiobutton)` |'
- en: '| Scale | `help(Tkinter.Scale)` |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| Scale | `help(Tkinter.Scale)` |'
- en: '| Scrollbar | `help(Tkinter.Scrollbar)` |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| Scrollbar | `help(Tkinter.Scrollbar)` |'
- en: '| Spinbox | `help(Tkinter.Spinbox)` |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| Spinbox | `help(Tkinter.Spinbox)` |'
- en: '| Text | `help(Tkinter.Text)` |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| Text | `help(Tkinter.Text)` |'
- en: '| Bitmap Class | `help(Tkinter.BitmapImage)` |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
  zh: '| Bitmap Class | `help(Tkinter.BitmapImage)` |'
- en: '| Image Class | `help(Tkinter.Image)` |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| Image Class | `help(Tkinter.Image)` |'
- en: The pack manager
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包管理器
- en: 'The pack geometry manager is the oldest geometry manager available with Tk
    and Tkinter. The pack geometry manager places slave widgets in a master widget,
    adding them one at a time in the order in which slaves are introduced. Following
    table shows the available `pack()` methods and options:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Pack几何管理器是Tk和Tkinter中可用的最古老的几何管理器。Pack几何管理器将子小部件放置在主小部件中，按照子小部件被引入的顺序逐个添加。下表显示了可用的`pack()`方法和选项：
- en: '| Methods | Description |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `config = configure = pack_configure(self, cnf={}, **kw)` | Pack a widget
    in the parent widget. Use as options:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '| `config = configure = pack_configure(self, cnf={}, **kw)` | 在父小部件中打包小部件。使用以下选项：'
- en: '`after=widget`: pack it after you have packed widget'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`after=widget`: 在打包小部件后打包它'
- en: '`anchor=NSEW` (or subset): position widget according to given direction'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anchor=NSEW` (或子集): 根据给定方向定位小部件'
- en: '`before=widget`: pack it before you will pack widget'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before=widget`: 在打包小部件之前打包它'
- en: '`expand=bool`: expand widget if parent size grows'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`expand=bool`: 如果父小部件大小增加，则扩展小部件'
- en: '`fill=NONE` (or `X` or `Y` or `BOTH`): fill widget if widget grows'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fill=NONE`（或`X`、`Y`或`BOTH`）：如果小部件增长，则填充小部件'
- en: '`in=master`: use master to contain this widget'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in=master`: 使用主小部件包含此小部件'
- en: '`in_=master`: see ''in'' option description'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_=master`: 查看`in`选项描述'
- en: '`ipadx=amount`: add internal padding in x direction'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipadx=amount`: 在x方向添加内部填充'
- en: '`ipady=amount`: add internal padding in y direction'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipady=amount`: 在y方向添加内部填充'
- en: '`padx=amount`: add padding in x direction'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padx=amount`: 在x方向添加填充'
- en: '`pady=amount`: add padding in y direction'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pady=amount`: 在y方向添加填充'
- en: '`side=TOP` (or `BOTTOM` or `LEFT` or `RIGHT`): where to add this widget'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`side=TOP`（或`BOTTOM`、`LEFT`或`RIGHT`）：添加此小部件的位置'
- en: '|'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `forget = pack_forget(self)` | Unmap this widget and do not use it for the
    packing order. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `forget = pack_forget(self)` | 解除映射此小部件，并不要用于打包顺序。 |'
- en: '| `info = pack_info(self)` | Return information about the packing options for
    this widget. |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| `info = pack_info(self)` | 返回此小部件的打包选项信息。 |'
- en: '| `propagate =pack_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc` |
    Set or get the status for propagation of geometry information.A Boolean argument
    specifies whether the geometry information of the slaves will determine the size
    of this widget. If no argument is given, the current setting will be returned.
    |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `propagate =pack_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc` |
    设置或获取几何信息传播的状态。布尔参数指定子小部件的几何信息是否将决定此小部件的大小。如果没有提供参数，则返回当前设置。'
- en: '| `slaves = pack_slaves(self) from Tkinter.Misc` | Return a list of all slaves
    of this widget in its packing order. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `slaves = pack_slaves(self) from Tkinter.Misc` | 返回此小部件所有子小部件的打包顺序列表。 |'
- en: The grid manager
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格管理器
- en: 'The grid is easy to implement and equally easy to modify, making it the most
    popular choice for most use cases. Following is a list of methods and options
    available for layout management with the `grid()` geometry manager:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 网格易于实现且易于修改，使其成为大多数用例中最受欢迎的选择。以下是使用`grid()`几何管理器进行布局管理可用的方法和选项列表：
- en: '| Methods defined here | Description |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| 在此处定义的方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None) from
    Tkinter.Misc` | Return a tuple of integer coordinates for the bounding box of
    this widget controlled by the geometry manager grid.If `column`, `row` is given,
    the bounding box applies from the cell with row and column 0 to the specified
    cell. If `col2` and `row2` are given, the bounding box starts at that cell.The
    returned integers specify the offset of the upper left corner in the master widget
    and the width and height. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None) from
    Tkinter.Misc` | 返回由几何管理器网格控制的小部件边界框的整数坐标元组。如果提供了`column`和`row`，则边界框适用于从行和列0的单元格到指定的单元格。如果提供了`col2`和`row2`，则边界框从该单元格开始。返回的整数指定了主小部件中上左角的偏移量以及宽度和高度。'
- en: '| `columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw) from Tkinter.Misc`
    | Configures column `index` of a grid.Valid resources are minsize (minimum size
    of the column),weight (how much does additional space propagate to this column),
    and pad (how much space to let additionally). |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw) from Tkinter.Misc`
    | 配置网格的`index`列。有效资源包括minsize（列的最小大小）、weight（额外空间传播到该列的程度）和pad（额外空间量）。 |'
- en: '| `grid = config = configure = grid_configure(self, cnf={}, **kw)` | Position
    a widget in the parent widget in a grid. Use as options:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '| `grid = config = configure = grid_configure(self, cnf={}, **kw)` | 在父小部件中按网格定位小部件。使用以下选项：'
- en: '`column=number`: use cell identified with given column (starting with 0)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`column=number`: 使用给定列标识的单元格（从0开始）'
- en: '`columnspan=number`: this widget will span several columns'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`columnspan=number`: 此部件将跨越多个列'
- en: '`in=master`: use master to contain this widget'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in=master`: 使用主部件包含此部件'
- en: '`in_=master`: see ''in'' option description'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_=master`: 查看''in''选项描述'
- en: '`ipadx=amount`: add internal padding in x direction'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipadx=amount`: 在x方向添加内部填充'
- en: '`ipady=amount`: add internal padding in y direction'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ipady=amount`: 在y方向添加内部填充'
- en: '`padx=amount`: add padding in x direction'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`padx=amount`: 在x方向添加填充'
- en: '`pady=amount`: add padding in y direction'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pady=amount`: 在y方向添加填充'
- en: '`row=number`: use cell identified with given row (starting with 0)'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`row=number`: 使用给定行标识的单元格（从0开始）'
- en: '`rowspan=number`: this widget will span several rows'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rowspan=number`: 此部件将跨越多个行'
- en: '`sticky=NSEW`: if cell is larger on which sides will this widget stick to the
    cell boundary'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sticky=NSEW`: 如果单元格在哪个方向上更大，则此部件将粘附到单元格边界'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `forget = grid_forget(self)` | Un-map this widget. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `forget = grid_forget(self)` | 取消映射此部件。|'
- en: '| `info = grid_info(self)` | Return information about the options for positioning
    this widget in a grid. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `info = grid_info(self)` | 返回有关在此网格中定位此部件的选项的信息。|'
- en: '| `grid_location(self, x, y) from Tkinter.Misc` | Return a tuple of column
    and row which identify the cell at which the pixel at position X and Y inside
    the master widget is located. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `grid_location(self, x, y) from Tkinter.Misc` | 返回一个元组，表示列和行，这些列和行标识了主部件内X和Y位置像素所在的单元格。|'
- en: '| `grid_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc` | Set or get
    the status for propagation of geometry information.A Boolean argument specifies
    whether the geometry information of the slaves will determine the size of this
    widget. If no argument is given, the current setting will be returned. |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `grid_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc` | 设置或获取几何信息传播的状态。一个布尔参数指定是否由从属部件的几何信息确定此部件的大小。如果没有给出参数，将返回当前设置。|'
- en: '| `grid_remove(self)` | Un-map this widget, but remember the grid options.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `grid_remove(self)` | 取消映射此部件，但记住网格选项。|'
- en: '| `grid_rowconfigure(self, index, cnf={}, **kw) from Tkinter.Misc` | Configure
    row `index` of a grid.Valid resources are minsize (minimum size of the row),weight
    (how much does additional space propagate to this row), and pad (how much space
    to let additionally). |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `grid_rowconfigure(self, index, cnf={}, **kw) from Tkinter.Misc` | 配置网格的`index`行。有效的资源有minsize（行的最小大小）、weight（额外空间传播到本行的程度）和pad（额外允许的空间）。|'
- en: '| `size = grid_size(self) from Tkinter.Misc` | Return a tuple of the number
    of column and rows in the grid. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `size = grid_size(self) from Tkinter.Misc` | 返回网格中列和行的数量 |'
- en: '| `slaves = grid_slaves(self, row=None, column=None) from Tkinter.Misc` | Return
    a list of all slaves of this widget in its packing order. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `slaves = grid_slaves(self, row=None, column=None) from Tkinter.Misc` | 返回此部件在其打包顺序中的所有从属部件的列表。|'
- en: '| `location = grid_location(self, x, y) from Tkinter.Misc` | Return a tuple
    of column and row which identify the cell at which the pixel at position X and
    Y inside the master widget is located. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `location = grid_location(self, x, y) from Tkinter.Misc` | 返回一个元组，表示列和行，这些列和行标识了主部件内X和Y位置像素所在的单元格。|'
- en: '| `propagate = grid_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc`
    | Set or get the status for propagation of geometry information.A Boolean argument
    specifies whether the geometry information of the slaves will determine the size
    of this widget. If no argument is given, the current setting will be returned.
    |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `propagate = grid_propagate(self, flag=[''_noarg_'']) from Tkinter.Misc`
    | 设置或获取几何信息传播的状态。一个布尔参数指定是否由从属部件的几何信息确定此部件的大小。如果没有给出参数，将返回当前设置。|'
- en: '| `rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw) from Tkinter.Misc`
    | Configure row `INDEX` of a grid.Valid resources are minsize (minimum size of
    the row),weight (how much does additional space propagate to this row), and pad
    (how much space to let additionally). |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw) from Tkinter.Misc`
    | 配置网格的`INDEX`行。有效的资源有minsize（行的最小大小）、weight（额外空间传播到本行的程度）和pad（额外允许的空间）。|'
- en: The place manager
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 位置管理器
- en: 'The `place()` geometry manager allows for precise positioning of widgets based
    on absolute or relative coordinates for a given window. The following table lists
    methods and options available under place geometry manager:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`place()`几何管理器允许基于给定窗口的绝对或相对坐标精确定位部件。以下表格列出了在位置几何管理器下可用的方法和选项：'
- en: '| Methods defined here | Description |'
  id: totrans-121
  prefs: []
  type: TYPE_TB
  zh: '| 在此处定义的方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-122
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `config = configure = place_configure(self, cnf={}, **kw)` | Place a widget
    in the parent widget. Use as options:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '| `config = configure = place_configure(self, cnf={}, **kw)` | 在父小部件中放置一个小部件。使用以下选项：'
- en: '`in=master`: master relative to which the widget is placed'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in=master`: 小部件放置的主控件相对位置'
- en: '`in_=master`: see ''in'' option description'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`in_=master`: 参见 ''in'' 选项描述'
- en: '`x=amount`: locate anchor of this widget at position x of master'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`x=amount`: 在主控件的x位置定位此小部件的锚点'
- en: '`y=amount`: locate anchor of this widget at position y of master'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y=amount`: 在主控件的y位置定位此小部件的锚点'
- en: '`relx=amount`: locate anchor of this widget between 0.0 and 1.0 relative to
    width of master (1.0 is right edge)'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relx=amount`: 在主控件的宽度范围内（0.0到1.0）定位此小部件的锚点（1.0是右边缘）'
- en: 'rely=amount: locate anchor of this widget between 0.0 and 1.0 relative to height
    of master (1.0 is bottom edge)'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'rely=amount: 在主控件的0.0到1.0之间定位此小部件的锚点（1.0是底部边缘）'
- en: '`anchor=NSEW` (or subset):position anchor according to given direction'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`anchor=NSEW`（或子集）：根据给定方向定位锚点'
- en: '`width=amount`: width of this widget in pixel'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`width=amount`: 此小部件的宽度（以像素为单位）'
- en: '`height=amount`: height of this widget in pixel'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`height=amount`: 此小部件的高度（以像素为单位）'
- en: '`relwidth=amount`: width of this widget between 0.0 and 1.0 relative to width
    of master (1.0 is the same width as the master)'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relwidth=amount`: 此小部件的宽度，相对于主控件的0.0到1.0（1.0与主控件相同宽度）'
- en: '`relheight=amount`: height of this widget between 0.0 and 1.0 relative to height
    of master (1.0 is the same height as the master)'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`relheight=amount`: 此小部件的高度，相对于主控件的0.0到1.0（1.0与主控件相同高度）'
- en: '`bordermode="inside"` (or `"outside"`): whether to take border width of master
    widget into account'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`bordermode="inside"`（或`"outside"`）：是否考虑主小部件的边框宽度'
- en: '|'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `forget = place_forget(self)` | Un-map this widget. |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `forget = place_forget(self)` | 取消映射此小部件。 |'
- en: '| `info = place_info(self)` | Return information about the placing options
    for this widget. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `info = place_info(self)` | 返回此小部件放置选项的信息。'
- en: '| `slaves = place_slaves(self) from Tkinter.Misc` | Return a list of all slaves
    of this widget in its packing order. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `slaves = place_slaves(self) from Tkinter.Misc` | 返回此小部件所有子部件的列表，按其打包顺序排列。'
- en: The event types
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件类型
- en: 'The general format for representing an event is as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 表示事件的通用格式如下：
- en: '[PRE1]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'It is compulsory to specify the event types for any event binding. Also note
    that event types, event modifier, and event details vary across platforms. The
    following table represents event types with their description:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何事件绑定，必须指定事件类型。此外，请注意，事件类型、事件修饰符和事件细节在不同平台上可能有所不同。以下表格表示事件类型及其描述：
- en: '| Event type | Description |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 事件类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Activate | Change in the state option of a widget from inactive (grayed out)
    to active. |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| Activate | 小部件的状态选项从非活动状态（灰色）变为活动状态。 |'
- en: '| Button | Press of a mouse button. The event detail part specifies which button.
    |'
  id: totrans-147
  prefs: []
  type: TYPE_TB
  zh: '| Button | 鼠标按钮按下。事件详细部分指定了哪个按钮。 |'
- en: '| ButtonRelease | Release of a pressed mouse button. |'
  id: totrans-148
  prefs: []
  type: TYPE_TB
  zh: '| ButtonRelease | 按下的鼠标按钮释放。'
- en: '| Configure | Change of size of a widget. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| Configure | 小部件大小的更改。 |'
- en: '| Deactivate | Change in the state option of a widget from active to inactive
    (grayed out). |'
  id: totrans-150
  prefs: []
  type: TYPE_TB
  zh: '| Deactivate | 小部件的状态选项从活动状态变为非活动状态（灰色）。 |'
- en: '| Destroy | Destruction of a widget using the `widget.destroy` method. |'
  id: totrans-151
  prefs: []
  type: TYPE_TB
  zh: '| Destroy | 使用 `widget.destroy` 方法销毁小部件。 |'
- en: '| Enter | Mouse pointer enters a visible part of a widget. |'
  id: totrans-152
  prefs: []
  type: TYPE_TB
  zh: '| Enter | 鼠标指针进入小部件的可见部分。 |'
- en: '| Expose | At least some part of widget becomes visible after remaining covered
    by another window. |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| Expose | 小部件至少有一部分在另一个窗口覆盖后变得可见。'
- en: '| FocusIn | Widget gets input focus either due to a user event (like using
    the *Tab* key or mouse click) or on call of `.focus_set()` on a widget |'
  id: totrans-154
  prefs: []
  type: TYPE_TB
  zh: '| FocusIn | 小部件由于用户事件（如使用*Tab*键或鼠标点击）或在小部件上调用`.focus_set()`而获得输入焦点 |'
- en: '| FocusOut | Focus moved out of a widget. |'
  id: totrans-155
  prefs: []
  type: TYPE_TB
  zh: '| FocusOut | 焦点从小部件中移出。 |'
- en: '| KeyPress/Key | Press of a key on the keyboard. The event-detail part specifies
    which key. |'
  id: totrans-156
  prefs: []
  type: TYPE_TB
  zh: '| KeyPress/Key | 按键盘中按键。事件详细部分指定了哪个键。 |'
- en: '| KeyRelease | Release of a pressed key. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| KeyRelease | 按下的键释放。'
- en: '| Leave | Mouse pointer moves out of a widget. |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| Leave | 鼠标指针从小部件中移出。 |'
- en: '| Map | Widget is mapped (made visible). Occurs say when you call a geometry
    manager on a widget. |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 地图 | 小部件被映射（显示）。例如，当你对一个小部件调用几何管理器时发生。'
- en: '| Motion | Mouse pointer moves entirely within a widget. |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| Motion | 鼠标指针完全在小部件内移动。 |'
- en: '| Un-map | Widget is unmapped (made invisible). For example, when you use the
    `remove()` method. |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| Un-map | 小部件取消映射（变为不可见）。例如，当你使用`remove()`方法时。 |'
- en: '| Visibility | At least a part of the window becomes visible. |'
  id: totrans-162
  prefs: []
  type: TYPE_TB
  zh: '| 可见性 | 窗口的一部分变为可见。 |'
- en: The event modifiers
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件修饰符
- en: The event modifiers are an optional component for creating an event binding.
    A list of event modifiers is listed as follows. However, note that most of the
    event modifiers are platform-specific and may not work across all platforms.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 事件修饰符是创建事件绑定时的一个可选组件。以下列出了事件修饰符列表。然而，请注意，大多数事件修饰符是平台特定的，可能不会在所有平台上工作。
- en: '| Modifier | Description |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 修饰符 | 描述 |'
- en: '| --- | --- |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Alt | True when *Alt* key is pressed. |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| Alt | 当按下 *Alt* 键时为真。 |'
- en: '| Any | Generalizes an event type. For example `<Any-KeyPress>` is True when
    any key is pressed. |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 任何 | 通用事件类型。例如 `<Any-KeyPress>` 在任何键被按下时为真。 |'
- en: '| Control | True when *Ctrl* (Control) key is pressed. |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 控制 | 当按下 *Ctrl* (控制) 键时为真。 |'
- en: '| Double | Specifies two events occurring in rapid succession. For example,
    `<Double-Button-1>`is double-click of mouse button 1. |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 双击 | 指定两个事件快速连续发生。例如，`<Double-Button-1>` 是鼠标按钮 1 的双击。 |'
- en: '| Lock | True if *Caps Lock*/*Shift* lock is pressed |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 锁定 | 如果按下 *Caps Lock*/*Shift* 锁则为真 |'
- en: '| Shift | True if *Shift* key is pressed |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| Shift | 如果按下 *Shift* 键则为真 |'
- en: '| Triple | Similar to Double (three events occurring in rapid succession) |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 三击 | 与双击类似（三个事件快速连续发生） |'
- en: The event details
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件详情
- en: Event details are optional components for creating an event binding. They generally
    denote the mouse button or details of a key stroke on the keyboard using a key
    symbol abbreviated as **keysym**.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 事件详情是创建事件绑定时的一个可选组件。它们通常使用缩写为 **keysym** 的键符号表示鼠标按钮或键盘按键的详细信息。
- en: '| List of all available event details is as follows:.keysym | .keycode | .keysym_num
    | Key |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| 所有可用事件详情列表如下:.keysym | .keycode | .keysym_num | 键 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-177
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `Alt_L` | 64 | 65513 | Left *Alt* key |'
  id: totrans-178
  prefs: []
  type: TYPE_TB
  zh: '| `Alt_L` | 64 | 65513 | 左 *Alt* 键 |'
- en: '| `Alt_R` | 113 | 65514 | Right *Alt* key |'
  id: totrans-179
  prefs: []
  type: TYPE_TB
  zh: '| `Alt_R` | 113 | 65514 | 右 *Alt* 键 |'
- en: '| `BackSpace` | 22 | 65288 | *Backspace* |'
  id: totrans-180
  prefs: []
  type: TYPE_TB
  zh: '| `BackSpace` | 22 | 65288 | *Backspace* |'
- en: '| `Cancel` | 110 | 65387 | Break |'
  id: totrans-181
  prefs: []
  type: TYPE_TB
  zh: '| `Cancel` | 110 | 65387 | 断开 |'
- en: '| `Caps_Lock` | 66 | 65549 | *CapsLock* |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| `Caps_Lock` | 66 | 65549 | *CapsLock* |'
- en: '| `Control_L` | 37 | 65507 | Left *Ctrl* key |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| `Control_L` | 37 | 65507 | 左 *Ctrl* 键 |'
- en: '| `Control_R` | 109 | 65508 | Right *Ctrl* key |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| `Control_R` | 109 | 65508 | 右 *Ctrl* 键 |'
- en: '| `Delete` | 107 | 65535 | *Delete* |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| `Delete` | 107 | 65535 | *Delete* |'
- en: '| `Down` | 104 | 65364 | Down arrow key |'
  id: totrans-186
  prefs: []
  type: TYPE_TB
  zh: '| `Down` | 104 | 65364 | 向下箭头键 |'
- en: '| `End` | 103 | 65367 | *End* |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| `End` | 103 | 65367 | *End* |'
- en: '| `Escape` | 9 | 65307 | *Esc* |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| `Escape` | 9 | 65307 | *Esc* |'
- en: '| `Execute` | 111 | 65378 | *SysRq* |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| `Execute` | 111 | 65378 | *SysRq* |'
- en: '| `F1 – F11` | 67 to 95 | 65470 to 65480 | Function key *F1* to *F11* |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| `F1 – F11` | 67 to 95 | 65470 to 65480 | 功能键 *F1* 到 *F11* |'
- en: '| `F12` | 96 | 65481 | Function key *F12* |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
  zh: '| `F12` | 96 | 65481 | 功能键 *F12* |'
- en: '| `Home` | 97 | 65360 | *Home* |'
  id: totrans-192
  prefs: []
  type: TYPE_TB
  zh: '| `Home` | 97 | 65360 | *Home* |'
- en: '| `Insert` | 106 | 65379 | *Insert* |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
  zh: '| `Insert` | 106 | 65379 | *Insert* |'
- en: '| `Left` | 100 | 65361 | Left side arrow key |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| `Left` | 100 | 65361 | 左侧箭头键 |'
- en: '| `Linefeed` | 54 | 106 | Linefeed/*Ctrl* + *J* |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| `Linefeed` | 54 | 106 | 换行符/*Ctrl* + *J* |'
- en: '| `KP_0` | 90 | 65438 | *0* on keypad |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `KP_0` | 90 | 65438 | 键盘上的 *0* |'
- en: '| `KP_1` | 87 | 65436 | *1* on keypad |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `KP_1` | 87 | 65436 | 键盘上的 *1* |'
- en: '| `KP_2` | 88 | 65433 | *2* on keypad |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `KP_2` | 88 | 65433 | 键盘上的 *2* |'
- en: '| `KP_3` | 89 | 65435 | *3* on keypad |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `KP_3` | 89 | 65435 | 键盘上的 *3* |'
- en: '| `KP_4` | 83 | 65430 | *4* on keypad |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `KP_4` | 83 | 65430 | 键盘上的 *4* |'
- en: '| `KP_5` | 84 | 65437 | *5* on keypad |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `KP_5` | 84 | 65437 | 键盘上的 *5* |'
- en: '| `KP_6` | 85 | 65432 | *6* on keypad |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `KP_6` | 85 | 65432 | 键盘上的 *6* |'
- en: '| `KP_7` | 79 | 65429 | *7* on keypad |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| `KP_7` | 79 | 65429 | 键盘上的 *7* |'
- en: '| `KP_8` | 80 | 65431 | *8* on keypad |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `KP_8` | 80 | 65431 | 键盘上的 *8* |'
- en: '| `KP_9` | 81 | 65434 | *9* on keypad |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `KP_9` | 81 | 65434 | 键盘上的 *9* |'
- en: '| `KP_Add` | 86 | 65451 | *+* on keypad |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Add` | 86 | 65451 | 键盘上的 *+* |'
- en: '| `KP_Begin` | 84 | 65437 | Center key on keypad (same as key *5*) |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Begin` | 84 | 65437 | 键盘上的中心键（与键 *5* 相同） |'
- en: '| `KP_Decimal` | 91 | 65439 | Decimal (*.*) key on keypad |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Decimal` | 91 | 65439 | 键盘上的小数 (*.*) 键 |'
- en: '| `KP_Delete` | 91 | 65439 | Delete (*Del*) key on keypad |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Delete` | 91 | 65439 | 键盘上的 Delete (*Del*) 键 |'
- en: '| `KP_Divide` | 112 | 65455 | */* on keypad |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Divide` | 112 | 65455 | 键盘上的 */* |'
- en: '| `KP_Down` | 88 | 65433 | Down arrow key on keypad |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Down` | 88 | 65433 | 键盘上的向下箭头键 |'
- en: '| `KP_End` | 87 | 65436 | *End* on keypad |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `KP_End` | 87 | 65436 | 键盘上的 *End* |'
- en: '| `KP_Enter` | 108 | 65421 | *Enter* on keypad |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Enter` | 108 | 65421 | 键盘上的 *Enter* |'
- en: '| `KP_Home` | 79 | 65429 | *Home* on keypad |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Home` | 79 | 65429 | 键盘上的 *Home* |'
- en: '| `KP_Insert` | 90 | 65438 | *Insert* on keypad |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Insert` | 90 | 65438 | 键盘上的 *Insert* |'
- en: '| `KP_Left` | 83 | 65430 | Left arrow key on keypad |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Left` | 83 | 65430 | 键盘上的左箭头键 |'
- en: '| `KP_Multiply` | 63 | 65450 | *** on keypad |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Multiply` | 63 | 65450 | 键盘上的 *** |'
- en: '| `KP_Next` | 89 | 65435 | *Page Down* on keypad |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Next` | 89 | 65435 | 键盘上的 *Page Down* |'
- en: '| `KP_Prior` | 81 | 65434 | *Page Up* on keypad |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Prior` | 81 | 65434 | 键盘上的 *Page Up* |'
- en: '| `KP_Right` | 85 | 65432 | Right arrow key on keypad |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Right` | 85 | 65432 | 键盘上的右箭头键 |'
- en: '| `KP_Subtract` | 82 | 65453 | *-* on keypad |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Subtract` | 82 | 65453 | 键盘上的 *-* |'
- en: '| `KP_Up` | 80 | 65431 | Up arrow key on keypad |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| `KP_Up` | 80 | 65431 | 键盘上的向上箭头键 |'
- en: '| `Next` | 105 | 65366 | *Page Down* |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| `Next` | 105 | 65366 | *Page Down* |'
- en: '| `Num_Lock` | 77 | 65407 | *Num Lock* |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| `Num_Lock` | 77 | 65407 | *Num Lock* |'
- en: '| `Pause` | 110 | 65299 | *Pause* |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| `Pause` | 110 | 65299 | *Pause* |'
- en: '| `Print` | 111 | 65377 | *Prt Scr* |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| `Print` | 111 | 65377 | *Prt Scr* |'
- en: '| `Prior` | 99 | 65365 | *Page Up* |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
  zh: '| `Prior` | 99 | 65365 | *Page Up* |'
- en: '| `Return` | 36 | 65293 | *Enter* key / *Ctrl* + *M* |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
  zh: '| `Return` | 36 | 65293 | *Enter* 键 / *Ctrl* + *M* |'
- en: '| `Right` | 102 | 65363 | Right arrow key |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| `Right` | 102 | 65363 | 右箭头键 |'
- en: '| `Scroll_Lock` | 78 | 65300 | *Scroll Lock* |'
  id: totrans-230
  prefs: []
  type: TYPE_TB
  zh: '| `Scroll_Lock` | 78 | 65300 | *Scroll Lock* |'
- en: '| `Shift_L` | 50 | 65505 | Left *Shift* key |'
  id: totrans-231
  prefs: []
  type: TYPE_TB
  zh: '| `Shift_L` | 50 | 65505 | 左 *Shift* 键 |'
- en: '| `Shift_R` | 62 | 65506 | Right *Shift* key |'
  id: totrans-232
  prefs: []
  type: TYPE_TB
  zh: '| `Shift_R` | 62 | 65506 | 右 *Shift* 键 |'
- en: '| `Tab` | 23 | 65289 | *Tab* key |'
  id: totrans-233
  prefs: []
  type: TYPE_TB
  zh: '| `Tab` | 23 | 65289 | *Tab* 键 |'
- en: '| `Up` | 98 | 65362 | Up arrow key |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| `Up` | 98 | 65362 | 向上箭头键 |'
- en: Other event-related methods
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他与事件相关的方法
- en: Binding of a handler to an event can happen at various levels using `bind`,
    `bind_all`, `bind_class`, and `tag_bind`.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `bind`、`bind_all`、`bind_class` 和 `tag_bind` 可以在各个级别将处理程序绑定到事件。
- en: 'If an event binding is registered to a callback function, the callback function
    is called with an Event as its first argument. The event argument has the following
    attributes:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果将事件绑定注册到回调函数，则回调函数将使用事件作为其第一个参数被调用。事件参数具有以下属性：
- en: '| Attribute | Description | Valid for event types |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 属性 | 描述 | 适用于事件类型 |'
- en: '| --- | --- | --- |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `event.serial` | Serial number of event. | All |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| `event.serial` | 事件的序列号。 | 所有 |'
- en: '| `event.num` | Mouse button pressed. | `ButtonPress` and `ButtonRelease` |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| `event.num` | 按下的鼠标按钮。 | `ButtonPress` 和 `ButtonRelease` |'
- en: '| `event.focus` | Whether the window has the focus. | `Enter` and `Leave` |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| `event.focus` | 窗口是否有焦点。 | `Enter` 和 `Leave` |'
- en: '| `event.height` | Height of the exposed window. | `Configure` and `Expose`
    |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| `event.height` | 暴露窗口的高度。 | `Configure` 和 `Expose` |'
- en: '| `event.width` | Width of the exposed window. | `Configure` and `Expose` |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| `event.width` | 暴露窗口的宽度。 | `Configure` 和 `Expose` |'
- en: '| `event.keycode` | Keycode of the pressed key. | `KeyPress` and `KeyRelease`
    |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| `event.keycode` | 按下的键的键码。 | `KeyPress` 和 `KeyRelease` |'
- en: '| `event.state` | State of the event as a number. | `ButtonPress`, `ButtonRelease`,
    `Enter`, `KeyPress`, `KeyRelease`, `Leave`, and `Motion` |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| `event.state` | 事件的状态作为数字。 | `ButtonPress`、`ButtonRelease`、`Enter`、`KeyPress`、`KeyRelease`、`Leave`
    和 `Motion` |'
- en: '| `event.state` | State as a string. | `Visibility` |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| `event.state` | 状态作为字符串。 | `Visibility` |'
- en: '| `event.time` | When the event occurred. | All |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| `event.time` | 事件发生的时间。 | 所有 |'
- en: '| `event.x` | It gives the x-position of the mouse. | All |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| `event.x` | 给出鼠标的 x 位置。 | 所有 |'
- en: '| `event.y` | It gives the y-position of the mouse. | All |'
  id: totrans-250
  prefs: []
  type: TYPE_TB
  zh: '| `event.y` | 给出鼠标的 y 位置。 | 所有 |'
- en: '| `event.x_root` | It gives the x-position of the mouse on the screen. | `ButtonPress`,
    `ButtonRelease`, `KeyPress`, `KeyRelease`, and `Motion` |'
  id: totrans-251
  prefs: []
  type: TYPE_TB
  zh: '| `event.x_root` | 给出鼠标在屏幕上的 x 位置。 | `ButtonPress`、`ButtonRelease`、`KeyPress`、`KeyRelease`
    和 `Motion` |'
- en: '| `event.y_root` | It gives the y-position of the mouse on the screen. | `ButtonPress`,
    `ButtonRelease`, `KeyPress`, `KeyRelease`, and `Motion` |'
  id: totrans-252
  prefs: []
  type: TYPE_TB
  zh: '| `event.y_root` | 给出鼠标在屏幕上的 y 位置。 | `ButtonPress`、`ButtonRelease`、`KeyPress`、`KeyRelease`
    和 `Motion` |'
- en: '| `event.char` | It gives the pressed character. | `KeyPress` and `KeyRelease`
    |'
  id: totrans-253
  prefs: []
  type: TYPE_TB
  zh: '| `event.char` | 给出按下的字符。 | `KeyPress` 和 `KeyRelease` |'
- en: '| `event.keysym` | It gives the `keysym` of the event as a string. | `KeyPress`
    and `KeyRelease` |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| `event.keysym` | 以字符串形式给出事件的 `keysym`。 | `KeyPress` 和 `KeyRelease` |'
- en: '| `event.keysym_num` | It gives the `keysym` of the event as a number. | `KeyPress`
    and `KeyRelease` |'
  id: totrans-255
  prefs: []
  type: TYPE_TB
  zh: '| `event.keysym_num` | 给出事件的 `keysym` 作为数字。 | `KeyPress` 和 `KeyRelease` |'
- en: '| `event.type` | Type of the event as a number. | All |'
  id: totrans-256
  prefs: []
  type: TYPE_TB
  zh: '| `event.type` | 事件类型作为数字。 | 所有 |'
- en: '| `event.widget` | Widget in which the event occurred. | All |'
  id: totrans-257
  prefs: []
  type: TYPE_TB
  zh: '| `event.widget` | 发生事件的窗口小部件。 | 所有 |'
- en: '| `event.delta` | Delta of wheel movement. | `MouseWheel` |'
  id: totrans-258
  prefs: []
  type: TYPE_TB
  zh: '| `event.delta` | 滚轮移动的增量。 | `MouseWheel` |'
- en: List of available cursor
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 可用光标列表
- en: 'The cursor widget option allows a Tk programmer to change the mouse cursor
    for a particular widget. The cursor names recognized by Tk on all platforms are:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 光标小部件选项允许 Tk 程序员更改特定小部件的鼠标光标。Tk 在所有平台上识别的光标名称是：
- en: '| `X_cursor` | `arrow` | `based_arrow_down` | `based_arrow_up` | `boat` | `bogosity`
    |'
  id: totrans-261
  prefs: []
  type: TYPE_TB
  zh: '| `X_cursor` | `arrow` | `based_arrow_down` | `based_arrow_up` | `boat` | `bogosity`
    |'
- en: '| `bottom_left_corner` | `bottom_right_corner` | `bottom_side` | `box_spiral`
    | `center_ptr` | `circle` |'
  id: totrans-262
  prefs: []
  type: TYPE_TB
  zh: '| `bottom_left_corner` | `bottom_right_corner` | `bottom_side` | `box_spiral`
    | `center_ptr` | `circle` |'
- en: '| `clock` | `coffee_mug` | `cross` | `cross_reverse` | `crosshair` | `diamond_cross`
    |'
  id: totrans-263
  prefs: []
  type: TYPE_TB
  zh: '| `clock` | `coffee_mug` | `cross` | `cross_reverse` | `crosshair` | `diamond_cross`
    |'
- en: '| `dot` | `dotbox` | `double_arrow` | `draft_large` | `draft_small` | `draped_box`
    |'
  id: totrans-264
  prefs: []
  type: TYPE_TB
  zh: '| `dot` | `dotbox` | `double_arrow` | `draft_large` | `draft_small` | `draped_box`
    |'
- en: '| `exchange` | `fleur` | `gobbler` | `gumby` | `hand1` | `hand2` |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| `exchange` | `fleur` | `gobbler` | `gumby` | `hand1` | `hand2` |'
- en: '| `heart` | `icon` | `iron_cross` | `left_ptr` | `left_side` | `left_tee` |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| `heart` | `icon` | `iron_cross` | `left_ptr` | `left_side` | `left_tee` |'
- en: '| `leftbutton` | `ll_angle` | `lr_angle` | `man` | `bottom_tee` | `middlebutton`
    |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| `leftbutton` | `ll_angle` | `lr_angle` | `man` | `bottom_tee` | `middlebutton`
    |'
- en: '| `mouse` | `pencil` | `pirate` | `plus` | `question_arrow` | `right_ptr` |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| `mouse` | `pencil` | `pirate` | `plus` | `question_arrow` | `right_ptr` |'
- en: '| `right_side` | `right_tee` | `rightbutton` | `rtl_logo` | `sailboat` | `sb_down_arrow`
    |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| `right_side` | `right_tee` | `rightbutton` | `rtl_logo` | `sailboat` | `sb_down_arrow`
    |'
- en: '| `sb_h_double_arrow` | `sb_left_arrow` | `sb_right_arrow` | `sb_up_arrow`
    | `sb_v_double_arrow` | `shuttle` |'
  id: totrans-270
  prefs: []
  type: TYPE_TB
  zh: '| `sb_h_double_arrow` | `sb_left_arrow` | `sb_right_arrow` | `sb_up_arrow`
    | `sb_v_double_arrow` | `shuttle` |'
- en: '| `sizing` | `spider` | `spraycan` | `star` | `target` | `tcross` |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| `sizing` | `spider` | `spraycan` | `star` | `target` | `tcross` |'
- en: '| `top_left_arrow` | `top_left_corner` | `top_right_corner` | `top_side` |
    `top_tee` | `trek` |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| `top_left_arrow` | `top_left_corner` | `top_right_corner` | `top_side` |
    `top_tee` | `trek` |'
- en: '| `ul_angle` | `umbrella` | `ur_angle` | `watch` | `xterm` |   |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| `ul_angle` | `umbrella` | `ur_angle` | `watch` | `xterm` |   |'
- en: '*See 9.01 all cursor demo.py* for a demonstration of all cross platform cursors.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*查看9.01所有光标演示.py* 以演示所有跨平台光标。'
- en: Potability issues
  id: totrans-275
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可携带性问题
- en: 'Windows: The cursors that have native mapping on Windows are, `arrow`, `center_ptr`,
    `crosshair`, `fleur`, `ibeam`, `icon`, `sb_h_double_arrow`, `sb_v_double_arrow`,
    `watch`, and `xterm`.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Windows：在Windows上有原生映射的光标有，`arrow`，`center_ptr`，`crosshair`，`fleur`，`ibeam`，`icon`，`sb_h_double_arrow`，`sb_v_double_arrow`，`watch`，和`xterm`。
- en: And the following additional cursors available are, `no`, `starting`, `size`,
    `size_ne_sw`, `size_ns`, `size_nw_se`, `size_we`, `uparrow`, `wait`.
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用的以下附加光标有，`no`，`starting`，`size`，`size_ne_sw`，`size_ns`，`size_nw_se`，`size_we`，`uparrow`，`wait`。
- en: The `no` cursor can be specified to eliminate the cursor.
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可以指定`no`光标来消除光标。
- en: 'Mac OS X: The cursors that have native mapping on Mac OS X systems are, `arrow`,
    `cross`, `crosshair`, `ibeam`, `plus`, `watch`, `xterm`.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Mac OS X：在Mac OS X系统上有原生映射的光标有，`arrow`，`cross`，`crosshair`，`ibeam`，`plus`，`watch`，`xterm`。
- en: And the following additional native cursors available are, `copyarrow`, `aliasarrow`,
    `contextualmenuarrow`, `text`, `cross-hair`, `closedhand`, `openhand`, `pointinghand`,
    `resizeleft`, `resizeright`, `resizeleftright`, `resizeup`, `resizedown`, `resizeupdown`,
    `none`, `notallowed`, `poof`, `countinguphand`, `countingdownhand`, `countingupanddownhand`,
    `spinning`.
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 可用的以下附加原生光标有，`copyarrow`，`aliasarrow`，`contextualmenuarrow`，`text`，`cross-hair`，`closedhand`，`openhand`，`pointinghand`，`resizeleft`，`resizeright`，`resizeleftright`，`resizeup`，`resizedown`，`resizeupdown`，`none`，`notallowed`，`poof`，`countinguphand`，`countingdownhand`，`countingupanddownhand`，`spinning`。
- en: The basic widget methods
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本小部件方法
- en: 'These methods are provided under class Widget in module Tkinter. You can view
    the documentation for these methods in your interactive shell using the following
    commands:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法在Tkinter模块的Widget类下提供。您可以使用以下命令在交互式shell中查看这些方法的文档：
- en: '[PRE2]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'A list of available methods under Widgets class is as follows:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: Widgets类下的可用方法如下：
- en: '| Method | Description |'
  id: totrans-285
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-286
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `after(self, ms, func=None, *args)` | Calls function once after given time.
    MS specifies the time in milliseconds. `FUNC` gives the function, which shall
    be called. Additional parameters are given as parameters to the function call.
    Return: identifier to cancel scheduling with `after_cancel`. |'
  id: totrans-287
  prefs: []
  type: TYPE_TB
  zh: '| `after(self, ms, func=None, *args)` | 在给定时间后调用函数一次。MS指定时间为毫秒。`FUNC`给出要调用的函数。其他参数作为函数调用的参数给出。返回：使用`after_cancel`取消调度的标识符。
    |'
- en: '| `after_cancel(self, id)` | Cancel scheduling of function identified with
    ID. Identifier returned by after or `after_idle` must be given as first parameter.
    |'
  id: totrans-288
  prefs: []
  type: TYPE_TB
  zh: '| `after_cancel(self, id)` | 取消与ID标识的函数的调度。由after或`after_idle`返回的标识符必须作为第一个参数给出。
    |'
- en: '| `after_idle(self, func, *args)` | Call FUNC once if the Tcl main loop has
    no event to process. Return an identifier to cancel the scheduling with `after_cancel`.
    |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| `after_idle(self, func, *args)` | 如果Tcl主循环没有事件要处理，则调用FUNC一次。返回一个标识符，用于使用`after_cancel`取消调度。
    |'
- en: '| `bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)` | Return
    a tuple of integer coordinates for the bounding box of this widget controlled
    by the geometry manager grid. If `COLUMN`, `ROW` are given, the bounding box applies
    from the cell with row and column 0 to the specified cell. If `COL2` and `ROW2`
    are given, the bounding box starts at that cell. The returned integers specify
    the offset of the upper left corner in the master widget and the width and height.
    |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `bbox = grid_bbox(self, column=None, row=None, col2=None, row2=None)` | 返回由几何管理器
    grid 控制的此小部件的边界框的整数坐标元组。如果提供了 `COLUMN` 和 `ROW`，则边界框适用于从行和列 0 的单元格到指定单元格的单元格。如果提供了
    `COL2` 和 `ROW2`，则边界框从该单元格开始。返回的整数指定了主小部件中右上角的位置以及宽度和高度。 |'
- en: '| `bind(self, sequence=None, func=None, add=None)` | Bind to this widget at
    event `SEQUENCE` a call to function `FUNC`. `SEQUENCE` is a string of concatenated
    event patterns. An event pattern is of the form `<MODIFIER-MODIFIER-TYPE-DETAIL>`.
    An event pattern can also be a virtual event of the form `<<AString>>` where `AString`
    can be arbitrary. This event can be generated by `event_generate`. If events are
    concatenated, they must appear shortly after each other.`FUNC` will be called
    if the event sequence occurs with an instance of Event as argument. If the return
    value of `FUNC` is "break", no further bound function is invoked.An additional
    Boolean parameter `ADD` specifies whether `FUNC` will be called additionally to
    the other bound function or whether it will replace the previous function. Bind
    will return an identifier to allow deletion of the bound function with unbind
    without memory leak.If `FUNC` or `SEQUENCE` is omitted, the bound function or
    list of bound events are returned. |'
  id: totrans-291
  prefs: []
  type: TYPE_TB
  zh: '| `bind(self, sequence=None, func=None, add=None)` | 在事件 `SEQUENCE` 上为此小部件绑定一个调用函数
    `FUNC`。`SEQUENCE` 是连接事件模式的字符串。事件模式的形式为 `<MODIFIER-MODIFIER-TYPE-DETAIL>`。事件模式也可以是形式为
    `<<AString>>` 的虚拟事件，其中 `AString` 可以是任意的。此事件可以通过 `event_generate` 生成。如果事件连接，它们必须彼此紧挨着。如果事件序列发生，并且以事件实例作为参数，则调用
    `FUNC`。如果 `FUNC` 的返回值为 "break"，则不会调用其他已绑定的函数。一个额外的布尔参数 `ADD` 指定 `FUNC` 是否将作为其他已绑定的函数调用，或者是否将替换先前的函数。bind
    将返回一个标识符，允许使用 unbind 删除已绑定的函数，而不会发生内存泄漏。如果省略 `FUNC` 或 `SEQUENCE`，则返回已绑定的函数或已绑定的事件列表。
    |'
- en: '| `bind_all(self, sequence=None, func=None, add=None)` | Bind to all widgets
    at an event `SEQUENCE` a call to function `FUNC`. An additional Boolean parameter
    `ADD` specifies whether `FUNC` will be called additionally to the other bound
    function, or whether it will replace the previous function. See bind for the return
    value. |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| `bind_all(self, sequence=None, func=None, add=None)` | 在所有小部件上绑定事件 `SEQUENCE`，调用函数
    `FUNC`。一个额外的布尔参数 `ADD` 指定 `FUNC` 是否将作为其他已绑定的函数调用，或者是否将替换先前的函数。参见 bind 了解返回值。 |'
- en: '| `bind_class(self, className, sequence=None, func=None, add=None)` | Bind
    to widgets with bind tag `CLASSNAME` at event `SEQUENCE` a call of function `FUNC`.
    An additional Boolean parameter `ADD` specifies whether `FUNC` will be called
    additionally to the other bound function or whether it will replace the previous
    function. See bind for the return value. |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| `bind_class(self, className, sequence=None, func=None, add=None)` | 在具有 bind
    标签 `CLASSNAME` 的小部件上，在事件 `SEQUENCE` 上绑定一个调用函数 `FUNC`。一个额外的布尔参数 `ADD` 指定 `FUNC`
    是否将作为其他已绑定的函数调用，或者是否将替换先前的函数。参见 bind 了解返回值。 |'
- en: '| `bindtags(self, tagList=None)` | Set or get the list of bindtags for this
    widget. With no argument, return the list of all bindtags associated with this
    widget. With a list of strings as argument the bindtags are set to this list.
    The bindtags determine in which order events are processed (see bind). |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `bindtags(self, tagList=None)` | 设置或获取此小部件的 bindtags 列表。如果没有参数，则返回与此小部件关联的所有
    bindtags 列表。如果有字符串列表作为参数，则将 bindtags 设置为此列表。bindtags 决定了事件处理的顺序（参见 bind）。 |'
- en: '| `cget(self, key)` | Return the resource value for a `Key` given as string.
    |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| `cget(self, key)` | 返回给定字符串形式的 `Key` 的资源值。 |'
- en: '| `clipboard_append(self, string, **kw)` | Append `String` to the `Tk` clipboard.
    A widget specified at the optional display of keyword argument specifies the target
    display. The clipboard can be retrieved with `selection_get`. |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| `clipboard_append(self, string, **kw)` | 将 `String` 添加到 `Tk` 剪贴板。关键字参数中指定的可选显示小部件指定了目标显示。可以通过
    `selection_get` 获取剪贴板。 |'
- en: '| `clipboard_clear(self, **kw)` | Clear the data in the Tk clipboard. A widget
    specified for the optional display of keyword argument specifies the target display.
    |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| `clipboard_clear(self, **kw)` | 清除 Tk 剪贴板中的数据。关键字参数中指定的可选显示小部件指定了目标显示。 |'
- en: '| `clipboard_get(self, **kw)` | Retrieve data from the clipboard on window''s
    display. The window keyword defaults to the root window of the Tkinter application.
    The type keyword specifies the form in which the data is to be returned, and should
    be an atom name, such as STRING or FILE_NAME. Type defaults to `String`. This
    command is equivalent to: `selection_get(CLIPBOARD)`. |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `clipboard_get(self, **kw)` | 从窗口的显示中检索剪贴板数据。窗口关键字默认为 Tkinter 应用程序的根窗口。类型关键字指定返回数据的形式，应为一个原子名称，例如
    STRING 或 FILE_NAME。类型默认为 `String`。此命令等同于：`selection_get(CLIPBOARD)`。 |'
- en: '| `columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)` | Configure
    column `Index` of a grid. Valid resources are minsize (minimum size of the column),weight
    (how much does additional space propagate to this column), and pad (how much space
    to let additionally). |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: '| `columnconfigure = grid_columnconfigure(self, index, cnf={}, **kw)` | 配置网格的
    `Index` 列。有效的资源有 minsize（列的最小大小）、weight（额外空间传播到该列的程度）和 pad（额外空间）。 |'
- en: '| `config = configure(self, cnf=None, **kw)` | Configure resources of a widget.
    The values for resources are specified as keyword arguments. To get an overview
    about the allowed keyword arguments, call the method keys. |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| `config = configure(self, cnf=None, **kw)` | 配置窗口的资源。资源值作为关键字参数指定。要获取允许的关键字参数的概述，请调用方法
    keys。 |'
- en: '| `event_add(self, virtual, *sequences)` | Bind a virtual event `virtual` (of
    the form `<<Name>>`) to an event `sequence` such that the virtual event is triggered
    whenever SEQUENCE occurs. |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| `event_add(self, virtual, *sequences)` | 将虚拟事件 `virtual`（形式为 `<<Name>>`）绑定到事件
    `sequence`，使得虚拟事件在 SEQUENCE 发生时被触发。 |'
- en: '| `event_delete(self, virtual, *sequences)` | Unbind a virtual event `virtual`
    from `sequence`. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `event_delete(self, virtual, *sequences)` | 从 `sequence` 解绑虚拟事件 `virtual`。
    |'
- en: '| `event_generate(self, sequence, **kw)` | Generate an event `sequence`. Additional
    keyword arguments specify parameter of the event(for example, x, y, rootx, and
    rooty). |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| `event_generate(self, sequence, **kw)` | 生成事件 `sequence`。额外的关键字参数指定事件的参数（例如，x、y、rootx
    和 rooty）。 |'
- en: '| `event_info(self, virtual=None)` | Return a list of all virtual events or
    the informationabout the `sequence` bound to the virtual event `virtual`. |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| `event_info(self, virtual=None)` | 返回所有虚拟事件列表或绑定到虚拟事件 `virtual` 的 `sequence`
    的信息。 |'
- en: '| `focus = focus_set(self)` | Direct input focus to this widget. If the application
    currently does not have the focus, this widget will get the focus if the application
    gets the focus through the window manager. |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| `focus = focus_set(self)` | 将输入焦点直接设置到这个小部件。如果应用程序当前没有焦点，并且通过窗口管理器获得焦点，则这个小部件将获得焦点。
    |'
- en: '| `focus_displayof(self)` | Return the widget which has currently the focus
    on the display where this widget is located. Return None if the application does
    not have the focus. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `focus_displayof(self)` | 返回在当前小部件所在显示上具有焦点的窗口小部件。如果没有应用程序具有焦点，则返回 None。
    |'
- en: '| `focus_force(self)` | Direct input focus to this widget even if the application
    does not have the focus. Use with caution! |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| `focus_force(self)` | 即使应用程序没有焦点，也将输入焦点直接设置到这个小部件。请谨慎使用！ |'
- en: '| `focus_get(self)` | Return the widget which has currently the focus in the
    application. Use `focus_displayof` to allow working with several displays. Return
    None if application does not have the focus. |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| `focus_get(self)` | 返回当前在应用程序中具有焦点的窗口小部件。使用 `focus_displayof` 允许与多个显示一起工作。如果没有应用程序具有焦点，则返回
    None。 |'
- en: '| `focus_lastfor(self)` | Return the widget which would have the focus if top
    level for this widget gets the focus from the window manager. |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| `focus_lastfor(self)` | 返回如果此小部件的顶层获得窗口管理器的焦点，则将具有焦点的窗口小部件。 |'
- en: '| `focus_set(self)` | Direct input focus to this widget. If the application
    currently does not have the focus this widget will get the focus if the application
    gets the focus through the window manager. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `focus_set(self)` | 将输入焦点直接设置到这个小部件。如果应用程序当前没有焦点，并且通过窗口管理器获得焦点，则这个小部件将获得焦点。
    |'
- en: '| `getboolean(self, s)` | Return a Boolean value for Tclboolean values true
    and false given as parameter. |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| `getboolean(self, s)` | 对于作为参数给出的 Tclboolean 值 true 和 false，返回一个布尔值。 |'
- en: '| `getvar(self, name=''PY_VAR'')` | Return value of Tcl variable `name`. |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: '| `getvar(self, name=''PY_VAR'')` | 返回 Tcl 变量 `name` 的值。 |'
- en: '| `grab_current(self)` | Return widget which has currently the grab in this
    application or None. |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| `grab_current(self)` | 返回在此应用程序中当前具有抓取的窗口小部件或 None。 |'
- en: '| `grab_release(self)` `)` | Release grab for this widget if currently set.
    |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `grab_release(self)` `)` | 如果当前设置了抓取，则释放此小部件的抓取。 |'
- en: '| `grab_set(self)` | Set grab for this widget. A grab directs all events to
    this and descendant widgets in the application. |'
  id: totrans-315
  prefs: []
  type: TYPE_TB
  zh: '| `grab_set(self)` | 为此小部件设置抓取。抓取将所有事件指向此小部件及其应用程序中的子小部件。 |'
- en: '| `grab_set_global(self)` | Set global grab for this widget. A global grab
    directs all events to this and descendant widgets on the display. Use with caution
    - other applications do not get events anymore. |'
  id: totrans-316
  prefs: []
  type: TYPE_TB
  zh: '| `grab_set_global(self)` | 为此小部件设置全局抓取。全局抓取将所有事件指向显示上的此小部件及其子小部件。请谨慎使用 - 其他应用程序不再接收事件。
    |'
- en: '| `grab_status(self)` | Return None, "local" or "global" if this widget has
    no, a local or a global grab. |'
  id: totrans-317
  prefs: []
  type: TYPE_TB
  zh: '| `grab_status(self)` | 如果此小部件没有、局部或全局抓取，则返回 None、"local" 或 "global"。 |'
- en: '| `grid_bbox(self, column=None, row=None, col2=None, row2=None)` | Return a
    tuple of integer coordinates for the bounding box of this widget controlled by
    the geometry manager grid. If `column`, `row` is given, the bounding box applies
    from the cell with row and column 0 to the specified cell. If `col2` and `row2`
    are given, the bounding box starts at that cell. The returned integers specify
    the offset of the upper left corner in the master widget and the width and height.
    |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `grid_bbox(self, column=None, row=None, col2=None, row2=None)` | 返回一个整数坐标元组，表示由网格管理器控制的此小部件的边界框。如果提供了
    `column` 和 `row`，则边界框适用于从行和列 0 开始的指定单元格。如果提供了 `col2` 和 `row2`，则边界框从该单元格开始。返回的整数指定了主小部件中左上角的偏移量以及宽度和高度。
    |'
- en: '| `grid_columnconfigure(self, index, cnf={}, **kw)` | Configure column `index`
    of a grid. Valid resources are minsize (minimum size of the column), weight (how
    much does additional space propagate to this column), and pad (how much space
    to let additionally). |'
  id: totrans-319
  prefs: []
  type: TYPE_TB
  zh: '| `grid_columnconfigure(self, index, cnf={}, **kw)` | 配置网格的列 `index`。有效的资源有
    minsize（列的最小大小）、weight（额外空间传播到本列的程度）和 pad（额外留出的空间）。 |'
- en: '| `grid_location(self, x, y)` | Return a tuple of column and row which identify
    the cell at which the pixel at position `x` and `y` inside the master widget is
    located. |'
  id: totrans-320
  prefs: []
  type: TYPE_TB
  zh: '| `grid_location(self, x, y)` | 返回一个元组，表示列和行，用于标识主小部件中位置在 `x` 和 `y` 的像素所在的单元格。
    |'
- en: '| `grid_propagate(self, flag=[''_noarg_''])` | Set or get the status for propagation
    of geometry information. A Boolean argument specifies whether the geometry information
    of the slaves will determine the size of this widget. If no argument is given,
    the current setting will be returned. |'
  id: totrans-321
  prefs: []
  type: TYPE_TB
  zh: '| `grid_propagate(self, flag=[''_noarg_''])` | 设置或获取几何信息传播的状态。布尔参数指定是否由子小部件的几何信息确定此小部件的大小。如果没有给出参数，则返回当前设置。
    |'
- en: '| `grid_rowconfigure(self, index, cnf={}, **kw)` | Configure row `index` of
    a grid. Valid resources are minsize (minimum size of the row),weight (how much
    does additional space propagate to this row), and pad (how much space to let additionally).
    |'
  id: totrans-322
  prefs: []
  type: TYPE_TB
  zh: '| `grid_rowconfigure(self, index, cnf={}, **kw)` | 配置网格的行 `index`。有效的资源有 minsize（行的最小大小）、weight（额外空间传播到本行的程度）和
    pad（额外留出的空间）。 |'
- en: '| `grid_size(self)` | Return a tuple of the number of column and rows in the
    grid. |'
  id: totrans-323
  prefs: []
  type: TYPE_TB
  zh: '| `grid_size(self)` | 返回网格中列和行的数量元组。 |'
- en: '| `grid_slaves(self, row=None, column=None)` | Return a list of all slaves
    of this widget in its packing order. |'
  id: totrans-324
  prefs: []
  type: TYPE_TB
  zh: '| `grid_slaves(self, row=None, column=None)` | 返回一个列表，包含此小部件在其包装顺序中的所有子小部件。
    |'
- en: '| `image_names(self)` | Return a list of all existing image names. |'
  id: totrans-325
  prefs: []
  type: TYPE_TB
  zh: '| `image_names(self)` | 返回所有现有图像名称列表。 |'
- en: '| `image_types(self)` | Return a list of all available image types (e.g. photo
    bitmap). |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| `image_types(self)` | 返回所有可用图像类型列表（例如 photo bitmap）。 |'
- en: '| `keys(self)` | Return a list of all resource names of this widget. |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| `keys(self)` | 返回此小部件的所有资源名称列表。 |'
- en: '| `lift = tkraise(self, aboveThis=None)` | Raise this widget in the stacking
    order. |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| `lift = tkraise(self, aboveThis=None)` | 在堆叠顺序中提升此小部件。 |'
- en: '| `lower(self, belowThis=None)` | Lower this widget in the stacking order.
    |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| `lower(self, belowThis=None)` | 在堆叠顺序中降低此小部件。 |'
- en: '| `mainloop(self, n=0)` | Call the `mainloop` of Tk. |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| `mainloop(self, n=0)` | 调用 Tk 的 `mainloop`。 |'
- en: '| `nametowidget(self, name)` | Return the Tkinter instance of a widget identified
    by its Tcl name NAME. |'
  id: totrans-331
  prefs: []
  type: TYPE_TB
  zh: '| `nametowidget(self, name)` | 返回由其 Tcl 名称 NAME 标识的 Tkinter 实例的小部件。 |'
- en: '| `option_add(self, pattern, value, priority=None)` | Set a `value` (second
    parameter) for an option PATTERN (first parameter). An optional third parameter
    gives the numeric priority (defaults to 80). |'
  id: totrans-332
  prefs: []
  type: TYPE_TB
  zh: '| `option_add(self, pattern, value, priority=None)` | 为选项模式 PATTERN（第一个参数）设置一个
    `value`（第二个参数）。可选的第三个参数给出数字优先级（默认为 80）。 |'
- en: '| `option_clear(self)` | Clear the option database. It will be reloaded if
    option_add is called. |'
  id: totrans-333
  prefs: []
  type: TYPE_TB
  zh: '| `option_clear(self)` | 清除选项数据库。如果调用 option_add，则将其重新加载。 |'
- en: '| `option_get(self, name, className)` | Return the value for an option NAME
    for this widget with `classname`. Values with higher priority override lower values.
    |'
  id: totrans-334
  prefs: []
  type: TYPE_TB
  zh: '| `option_get(self, name, className)` | 返回此小部件具有 `classname` 的选项 NAME 的值。优先级较高的值覆盖较低优先级的值。
    |'
- en: '| `option_readfile(self, fileName, priority=None)` | Read file `filename` into
    the option database. An optional second parameter gives the numeric priority.
    |'
  id: totrans-335
  prefs: []
  type: TYPE_TB
  zh: '| `option_readfile(self, fileName, priority=None)` | 将文件 `filename` 读取到选项数据库中。可选的第二个参数给出数字优先级。
    |'
- en: '| `propagate =pack_propagate(self, flag=[''_noarg_''])` | Set or get the status
    for propagation of geometry information. A Boolean argument specifies whether
    the geometry information of the slaves will determine the size of this widget.
    If no argument is given, the current setting will be returned. |'
  id: totrans-336
  prefs: []
  type: TYPE_TB
  zh: '| `propagate =pack_propagate(self, flag=[''_noarg_''])` | 设置或获取几何信息传播的状态。布尔参数指定奴隶的几何信息是否将决定此小部件的大小。如果没有给出参数，则返回当前设置。
    |'
- en: '| `pack_slaves(self)` | Return a list of all slaves of this widget in its packing
    order. |'
  id: totrans-337
  prefs: []
  type: TYPE_TB
  zh: '| `pack_slaves(self)` | 返回此小部件在其布局顺序中的所有奴隶列表。 |'
- en: '| `quit(self)` | Quit the Tcl interpreter. All widgets will be destroyed. |'
  id: totrans-338
  prefs: []
  type: TYPE_TB
  zh: '| `quit(self)` | 退出 Tcl 解释器。所有小部件将被销毁。 |'
- en: '| `register = _register(self, func, subst=None, needcleanup=1)` | Return a
    newly created Tcl function. If this function is called, the Python function `func`
    will be executed. An optional function `subst` can be given, which will be executed
    before `func`. |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| `register = _register(self, func, subst=None, needcleanup=1)` | 返回一个新创建的
    Tcl 函数。如果调用此函数，Python 函数 `func` 将被执行。可以提供一个可选的函数 `subst`，它将在 `func` 执行之前执行。 |'
- en: '| `rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)` | Configure
    row `index` of a grid. Valid resources are minsize (minimum size of the row),
    weight (how much does additional space propagate to this row), and pad (how much
    space to let additionally). |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| `rowconfigure = grid_rowconfigure(self, index, cnf={}, **kw)` | 配置网格的 `index`
    行。有效的资源有 minsize（行的最小大小）、weight（额外空间传播到本行的程度）和 pad（额外空间）。 |'
- en: '| `selection_clear(self, **kw)''` | Clear the current X selection. |'
  id: totrans-341
  prefs: []
  type: TYPE_TB
  zh: '| `selection_clear(self, **kw)` | 清除当前的 X 选择。 |'
- en: '| `selection_get(self, **kw)` | Return the contents of the current X selection.
    A keyword parameter selection specifies the name of the selection and defaults
    to PRIMARY. A keyword parameter display of specifies a widget on the display to
    use. |'
  id: totrans-342
  prefs: []
  type: TYPE_TB
  zh: '| `selection_get(self, **kw)` | 返回当前 X 选择的内容。关键字参数选择指定选择的名称，默认为 PRIMARY。关键字参数
    display 指定要使用的显示上的小部件。 |'
- en: '| `selection_handle(self, command, **kw)` | Specify a function `command` to
    call if the X selection owned by this widget is queried by another application.
    This function must return the contents of the selection. The function will be
    called with the arguments OFFSET and LENGTH, which allows the chunking of very
    long selections. The following keyword parameters can be provided: selection -
    name of the selection (default PRIMARY), type - type of the selection (for example,
    `string`, FILE_NAME). |'
  id: totrans-343
  prefs: []
  type: TYPE_TB
  zh: '| `selection_handle(self, command, **kw)` | 指定一个函数 `command`，如果此小部件拥有的 X 选择被另一个应用程序查询，则调用该函数。此函数必须返回选择的内
    容。该函数将使用 OFFSET 和 LENGTH 参数调用，允许对非常长的选择进行分块。以下关键字参数可以提供：选择 - 选择的名称（默认 PRIMARY），类型
    - 选择的类型（例如，`string`，FILE_NAME）。 |'
- en: '| `selection_own(self, **kw)` | Become owner of X selection. A keyword parameter
    selection specifies the name of the selection (default PRIMARY). |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| `selection_own(self, **kw)` | 成为 X 选择的所有者。关键字参数选择指定选择的名称（默认 PRIMARY）。 |'
- en: '| `selection_own_get(self, **kw)` | Return owner of X selection. The following
    keyword parameter can be provided: selection - name of the selection (default
    PRIMARY), type - type of the selection (e.g. STRING, FILE_NAME). |'
  id: totrans-345
  prefs: []
  type: TYPE_TB
  zh: '| `selection_own_get(self, **kw)` | 返回 X 选择的所有者。以下关键字参数可以提供：选择 - 选择的名称（默认 PRIMARY），类型
    - 选择的类型（例如，STRING，FILE_NAME）。 |'
- en: '| `send(self, interp, cmd, *args)` | Send Tcl command CMD to different interpreter
    INTERP to be executed. |'
  id: totrans-346
  prefs: []
  type: TYPE_TB
  zh: '| `send(self, interp, cmd, *args)` | 将 Tcl 命令 CMD 发送到不同的解释器 INTERP 执行。 |'
- en: '| `setvar(self, name=''PY_VAR'', value=''1'')` | Set Tcl variable NAME to VALUE.
    |'
  id: totrans-347
  prefs: []
  type: TYPE_TB
  zh: '| `setvar(self, name=''PY_VAR'', value=''1'')` | 将 Tcl 变量 NAME 设置为 VALUE。 |'
- en: '| `size = grid_size(self)` | Return a tuple of the number of column and rows
    in the grid. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| `size = grid_size(self)` | 返回网格中列和行的元组。 |'
- en: '| `slaves = pack_slaves(self)` | Return a list of all slaves of this widget
    in its packing order. |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| `slaves = pack_slaves(self)` | 返回此小部件在其布局顺序中的所有奴隶列表。 |'
- en: '| `tk_focusFollowsMouse(self)` | The widget under mouse will get automatically
    focus. Cannot be disabled easily. |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| `tk_focusFollowsMouse(self)` | 鼠标下的小部件将自动获得焦点。无法轻易禁用。 |'
- en: '| `tk_focusNext(self)` | Return the next widget in the focus order which follows
    widget which has currently the focus. The focus order first goes to the next child,
    then to the children of the child recursively and then to the next sibling which
    is higher in the stacking order. A widget is omitted if it has the takefocus resource
    set to 0. |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| `tk_focusNext(self)` | 返回当前具有焦点的控件之后的下一个控件。焦点顺序首先指向下一个子控件，然后递归地指向子控件的子控件，最后指向堆叠顺序中较高的下一个兄弟控件。如果控件具有设置为0的takefocus资源，则该控件将被忽略。
    |'
- en: '| `tk_focusPrev(self)` | Return previous widget in the focus order. See `tk_focusNext`
    for details. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| `tk_focusPrev(self)` | 返回焦点顺序中的上一个控件。有关详细信息，请参阅`tk_focusNext`。 |'
- en: '| `tk_setPalette(self, *args, **kw)` | Set a new color scheme for all widget
    elements. A single color as argument will cause that all colors of Tk widget elements
    are derived from this. Alternatively, several keyword parameters and its associated
    colors can be given. The following keywords are valid: `activeBackground`, `foreground`,
    `selectColor`, `activeForeground`, `highlightBackground`, `selectBackground`,
    `background`, `highlightColor`, `selectForeground`, `disabledForeground`, `insertBackground`,
    and `troughColor`. |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| `tk_setPalette(self, *args, **kw)` | 为所有控件元素设置新的颜色方案。作为参数的单个颜色将导致Tk控件元素的所有颜色都由此颜色派生。或者，可以给出多个关键字参数及其关联的颜色。以下关键字是有效的：`activeBackground`、`foreground`、`selectColor`、`activeForeground`、`highlightBackground`、`selectBackground`、`background`、`highlightColor`、`selectForeground`、`disabledForeground`、`insertBackground`和`troughColor`。
    |'
- en: '| `tkraise(self, aboveThis=None)` | Raise this widget in the stacking order.
    |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| `tkraise(self, aboveThis=None)` | 在堆叠顺序中提升此控件。 |'
- en: '| `unbind(self, sequence, funcid=None)` | Unbind for this widget for event
    SEQUENCE the function identified with FUNCID. |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| `unbind(self, sequence, funcid=None)` | 为此控件解绑事件SEQUENCE的由FUNCID标识的函数。 |'
- en: '| `unbind_all(self, sequence)''` | Unbind for all widgets for event SEQUENCE
    all functions. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| `unbind_all(self, sequence)''` | 为所有控件解绑事件SEQUENCE的所有函数。 |'
- en: '| `unbind_class(self, className, sequence)` | Unbind all widgets with bindtag
    `classname` for event `sequence` all functions. |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| `unbind_class(self, className, sequence)` | 解绑所有具有bindtag `classname`的控件的事件SEQUENCE的所有函数。
    |'
- en: '| `update(self)` | Enter event loop until all pending events have been processed
    by Tcl. |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| `update(self)` | 进入事件循环，直到所有挂起的事件都被Tcl处理。 |'
- en: '| `update_idletasks(self)` | Enter event loop until all idle callbacks have
    been called. This will update the display of windows, but not process events caused
    by the user. |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '| `update_idletasks(self)` | 进入事件循环，直到所有空闲回调都被调用。这将更新窗口的显示，但不会处理由用户引起的事件。 |'
- en: '| `wait_variable(self, name=''PY_VAR'')` | Wait until the variable is modified.
    A parameter of type `IntVar`, `StringVar`, `DoubleVar`, or `BooleanVar` must be
    given. |'
  id: totrans-360
  prefs: []
  type: TYPE_TB
  zh: '| `wait_variable(self, name=''PY_VAR'')` | 等待直到变量被修改。必须给出类型为`IntVar`、`StringVar`、`DoubleVar`或`BooleanVar`的参数。
    |'
- en: '| `wait_visibility(self, window=None)` | Wait until the visibility of a Widget
    changes(for example, it appears).If no parameter is given self is used. |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| `wait_visibility(self, window=None)` | 等待直到一个Widget的可见性发生变化（例如，它出现）。如果没有给出参数，则使用self。
    |'
- en: '| `wait_window(self, window=None)` | Wait until a Widget is destroyed. If no
    parameter is given, self is used. |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| `wait_window(self, window=None)` | 等待直到一个Widget被销毁。如果没有给出参数，则使用self。 |'
- en: '| `waitvar = wait_variable(self, name=''PY_VAR'')` | Wait until the variable
    is modified. A parameter of type `IntVar`, `StringVar`, `DoubleVar`, or `BooleanVar`
    must be given. |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| `waitvar = wait_variable(self, name=''PY_VAR'')` | 等待直到变量被修改。必须给出类型为`IntVar`、`StringVar`、`DoubleVar`或`BooleanVar`的参数。
    |'
- en: '| `winfo_atom(self, name, displayof=0)` | Return integer which represents atom
    name. |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_atom(self, name, displayof=0)` | 返回表示原子名称的整数。 |'
- en: '| `winfo_atomname(self, id, displayof=0)` | Return name of atom with identifier
    ID. |'
  id: totrans-365
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_atomname(self, id, displayof=0)` | 返回具有标识符ID的原子名称。 |'
- en: '| `winfo_cells(self)` | Return number of cells in the colormap for this widget.
    |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_cells(self)` | 返回此控件颜色映射中的单元格数。 |'
- en: '| `winfo_children(self)` | Return a list of all widgets which are children
    of this widget. |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_children(self)` | 返回此控件的子控件列表。 |'
- en: '| `winfo_class(self)` | Return window class name of this widget. |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_class(self)` | 返回此控件的窗口类名。 |'
- en: '| `winfo_colormapfull(self)` | Return true if at the last color request the
    `colormap` was full. |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_colormapfull(self)` | 如果在最后的颜色请求中`colormap`已满，则返回true。 |'
- en: '| `winfo_containing(self, rootX, rootY, displayof=0)` | Return the widget which
    is at the root coordinates root`X`, `rootY`. |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_containing(self, rootX, rootY, displayof=0)` | 返回在根坐标root`X`、`rootY`处的控件。
    |'
- en: '| `winfo_depth(self)` | Return the number of bits per pixel. |'
  id: totrans-371
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_depth(self)` | 返回每像素的位数。 |'
- en: '| `winfo_exists(self)` | Return true if this widget exists. |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_exists(self)` | 如果此小部件存在，则返回true。 |'
- en: '| `winfo_fpixels(self, number)` | Return the number of pixels for the given
    distance NUMBER (e.g. "3c") as float. |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_fpixels(self, number)` | 返回给定距离NUMBER（例如："3c"）的像素数，以浮点数形式返回。 |'
- en: '| `winfo_geometry(self)` | Return geometry string for this widget in the form
    "widthxheight+X+Y". |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_geometry(self)` | 返回此小部件的几何字符串，格式为"widthxheight+X+Y"。 |'
- en: '| `winfo_height(self)` | Return height of this widget. |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_height(self)` | 返回此小部件的高度。 |'
- en: '| `winfo_id(self)` | Return identifier ID for this widget. |'
  id: totrans-376
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_id(self)` | 返回此小部件的标识符ID。 |'
- en: '| `winfo_interps(self, displayof=0)` | Return the name of all Tcl interpreters
    for this display. |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_interps(self, displayof=0)` | 返回此显示的所有Tcl解释器的名称。 |'
- en: '| `winfo_ismapped(self)` | Return true if this widget is mapped. |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_ismapped(self)` | 如果此小部件已映射，则返回true。 |'
- en: '| `winfo_manager(self)` | Return the window manager name for this widget. |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_manager(self)` | 返回此小部件的窗口管理器名称。 |'
- en: '| `winfo_name(self)` | Return the name of this widget. |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_name(self)` | 返回此小部件的名称。 |'
- en: '| `winfo_parent(self)` | Return the name of the parent of this widget. |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_parent(self)` | 返回此小部件的父级名称。 |'
- en: '| `winfo_pathname(self, id, displayof=0)` | Return the pathname of the widget
    given by ID. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_pathname(self, id, displayof=0)` | 返回由ID指定的窗口的路径名。 |'
- en: '| `winfo_pixels(self, num)` | Rounded integer value of winfo_fpixels. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_pixels(self, num)` | winfo_fpixels的舍入整数值。 |'
- en: '| `winfo_pointerx(self)` | Return the x coordinate of the pointer on the root
    window. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_pointerx(self)` | 返回根窗口上指针的x坐标。 |'
- en: '| `winfo_pointerxy(self)` | Return a tuple of x and y coordinates of the pointer
    on the root window. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_pointerxy(self)` | 返回根窗口上指针的x和y坐标的元组。 |'
- en: '| `winfo_pointery(self)` | Return the y coordinate of the pointer on the root
    window. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_pointery(self)` | 返回根窗口上指针的y坐标。 |'
- en: '| `winfo_reqheight(self)` | Return requested height of this widget. |'
  id: totrans-387
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_reqheight(self)` | 返回此小部件请求的高度。 |'
- en: '| `winfo_reqwidth(self)` | Return requested width of this widget. |'
  id: totrans-388
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_reqwidth(self)` | 返回此小部件请求的宽度。 |'
- en: '| `winfo_rgb(self, color)` | Return tuple of decimal values for red, green,
    blue for `color` in this widget. |'
  id: totrans-389
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_rgb(self, color)` | 返回此小部件中颜色`color`的红色、绿色、蓝色十进制值的元组。 |'
- en: '| `winfo_rootx(self)` `/ winfo_rooty(self)` | Return x/y coordinate of upper
    left corner of this widget on the root window. |'
  id: totrans-390
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_rootx(self)` `/ winfo_rooty(self)` | 返回此小部件在根窗口上的左上角x/y坐标。 |'
- en: '| `winfo_screen(self)` | Return the screen name of this widget. |'
  id: totrans-391
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screen(self)` | 返回此小部件的屏幕名称。 |'
- en: '| `winfo_screencells(self)` | Return the number of the cells in the colormap
    of the screen of this widget. |'
  id: totrans-392
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screencells(self)` | 返回此小部件屏幕调色板中的单元格数。 |'
- en: '| `winfo_screendepth(self)` | Return the number of bits per pixel of the root
    window of the screen of this widget. |'
  id: totrans-393
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screendepth(self)` | 返回此小部件屏幕根窗口的每像素位数。 |'
- en: '| `winfo_screenheight(self)` | Return the number of pixels of the height of
    the screen of this widget in pixel. |'
  id: totrans-394
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screenheight(self)` | 返回此小部件屏幕高度（以像素为单位）的像素数。 |'
- en: '| `winfo_screenmmheight(self)` | Return the number of pixels of the height
    of the screen of this widget in mm. |'
  id: totrans-395
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screenmmheight(self)` | 返回此小部件屏幕高度（以毫米为单位）的像素数。 |'
- en: '| `winfo_screenmmwidth``(self)` | Return the number of pixels of the width
    of the screen of this widget in mm. |'
  id: totrans-396
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screenmmwidth(self)` | 返回此小部件屏幕宽度（以毫米为单位）的像素数。 |'
- en: '| `winfo_screenwidth(self)` | Return the number of pixels of the width of the
    screen of this widget in pixel. |'
  id: totrans-397
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_screenwidth(self)` | 返回此小部件屏幕宽度（以像素为单位）的像素数。 |'
- en: '| `winfo_toplevel(self)` | Return the Toplevel widget of this widget. |'
  id: totrans-398
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_toplevel(self)` | 返回此小部件的Toplevel小部件。 |'
- en: '| `winfo_viewable(self)` | Return true if the widget and all its higher ancestors
    are mapped. |'
  id: totrans-399
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_viewable(self)` | 如果小部件及其所有更高祖先都已映射，则返回true。 |'
- en: '| `winfo_visual(self) = winfo_screenvisual(self)` | Return one of the strings
    `directcolor`, `grayscale`, `pseudocolor`, `staticcolor`, `staticgray`, or `truecolor`
    for the `colormodel` of this widget. |'
  id: totrans-400
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_visual(self) = winfo_screenvisual(self)` | 返回字符串之一`directcolor`、`grayscale`、`pseudocolor`、`staticcolor`、`staticgray`或`truecolor`，表示此小部件的`colormodel`。
    |'
- en: '| `winfo_visualid(self)` | Return the X identifier for the visual for this
    widget. |'
  id: totrans-401
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_visualid(self)` | 返回此小部件视觉效果的X标识符。 |'
- en: '| `winfo_visualsavailable(self, includeids=0)` | Return a list of all visuals
    available for the screen of this widget. |'
  id: totrans-402
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_visualsavailable(self, includeids=0)` | 返回此小部件屏幕上所有可用的视觉效果的列表。 |'
- en: '| `winfo_vrootheight(self)` | Return the height of the virtual root window
    associated with this widget in pixels. If there is no virtual root window, return
    the height of the screen. |'
  id: totrans-403
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_vrootheight(self)` | 返回与此小部件关联的虚拟根窗口的高度（以像素为单位）。如果没有虚拟根窗口，则返回屏幕的高度。
    |'
- en: '| `winfo_vrootwidth(self)` | Return the width of the virtual root window associated
    with this widget in pixel. If there is no virtual root window, return the width
    of the screen. |'
  id: totrans-404
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_vrootwidth(self)` | 返回与此小部件关联的虚拟根窗口的宽度（以像素为单位）。如果没有虚拟根窗口，则返回屏幕的宽度。
    |'
- en: '| `winfo_vrootx(self)` | Return the x offset of the virtual root relative to
    the root window of the screen of this widget. |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_vrootx(self)` | 返回此小部件相对于屏幕根窗口的虚拟根的 x 偏移量。 |'
- en: '| `winfo_vrooty(self)` | Return the y offset of the virtual root relative to
    the root window of the screen of this widget. |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_vrooty(self)` | 返回此小部件相对于屏幕根窗口的虚拟根的 y 偏移量。 |'
- en: '| `winfo_width(self)` | Return the width of this widget. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_width(self)` | 返回此小部件的宽度。 |'
- en: '| `winfo_x(self)` | Return the x coordinate of the upper left corner of this
    widget in the parent. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_x(self)` | 返回此小部件在父窗口中的左上角 x 坐标。 |'
- en: '| `winfo_y(self)` | Return the y coordinate of the upper left corner of this
    widget in the parent. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| `winfo_y(self)` | 返回此小部件在父窗口中的左上角 y 坐标。 |'
- en: ttk widgets
  id: totrans-410
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ttk 小部件
- en: 'The ttk widget is based on a revised and enhanced version of TIP #48 ([http://tip.tcl.tk/48](http://tip.tcl.tk/48))
    specified style engine.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'ttk 小部件基于 TIP #48 ([http://tip.tcl.tk/48](http://tip.tcl.tk/48)) 指定的改进和增强版本的风格引擎。'
- en: 'FILE: `path\to\python27\\lib\lib-tk\ttk.py`'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 文件：`path\to\python27\\lib\lib-tk\ttk.py`
- en: The basic idea is to separate, to the extent possible, the code implementing
    a widget's behavior from the code implementing its appearance. Widget class bindings
    are primarily responsible for maintaining the widget state and invoking callbacks,
    and all aspects of the widgets appearance lies under themes.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 基本思想是在尽可能的程度上将实现小部件行为的代码与实现其外观的代码分开。小部件类绑定主要负责维护小部件状态和调用回调，而小部件外观的所有方面都位于主题之下。
- en: You can substitute some Tkinter widgets with their corresponding ttk widgets
    (Button, Checkbutton, Entry, Frame, Label, LabelFrame, Menubutton, PanedWindow,
    Radiobutton, Scale, and Scrollbar).
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将一些 Tkinter 小部件替换为其相应的 ttk 小部件（按钮、复选框、输入框、框架、标签、标签框架、菜单按钮、分割窗口、单选按钮、滑块和滚动条）。
- en: However, Tkinter and ttk widgets are not completely compatible. The main difference
    is that Tkinter widget styling options like `fg`, `bg`, `relief`, and others are
    not supported options for ttk widgets. These styling options are instead moved
    to `ttk.Style()`.
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Tkinter 和 ttk 小部件并不完全兼容。主要区别是 Tkinter 小部件的样式选项（如 `fg`、`bg`、`relief` 等）不是
    ttk 小部件的支持选项。这些样式选项被移动到 `ttk.Style()`。
- en: 'Here''s a small Tkinter code sample:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个小的 Tkinter 代码示例：
- en: '[PRE3]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And here''s its equivalent code in ttk:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它的等价 ttk 代码：
- en: '[PRE4]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ttk also provides six new widget classes which are not available in Tkinter.
    These are `Combob` `ox`, `Notebo` `ok`, `Progressb` `ar`, `Separator`, `Sizegrip`,
    and `Treevi` `ew`.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: ttk 还提供了六个新的小部件类，这些类在 Tkinter 中不可用。这些是 `Combobox`、`Notebook`、`Progressbar`、`Separator`、`Sizegrip`
    和 `Treeview`。
- en: 'ttk style names are as follows:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: ttk 风格名称如下：
- en: '| Widget class | Style name |'
  id: totrans-422
  prefs: []
  type: TYPE_TB
  zh: '| 小部件类 | 样式名称 |'
- en: '| --- | --- |'
  id: totrans-423
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `Button` | `TButton` |'
  id: totrans-424
  prefs: []
  type: TYPE_TB
  zh: '| `Button` | `TButton` |'
- en: '| `Checkbutto` `n` | `TCheckbutton` |'
  id: totrans-425
  prefs: []
  type: TYPE_TB
  zh: '| `Checkbutton` | `TCheckbutton` |'
- en: '| `Combobox` | `TCombobox` |'
  id: totrans-426
  prefs: []
  type: TYPE_TB
  zh: '| `Combobox` | `TCombobox` |'
- en: '| `Entry` | `TEntry` |'
  id: totrans-427
  prefs: []
  type: TYPE_TB
  zh: '| `Entry` | `TEntry` |'
- en: '| `Frame` | `TFrame` |'
  id: totrans-428
  prefs: []
  type: TYPE_TB
  zh: '| `Frame` | `TFrame` |'
- en: '| `Label` | `TLabel` |'
  id: totrans-429
  prefs: []
  type: TYPE_TB
  zh: '| `Label` | `TLabel` |'
- en: '| `LabelFrame` | `TLabelFrame` |'
  id: totrans-430
  prefs: []
  type: TYPE_TB
  zh: '| `LabelFrame` | `TLabelFrame` |'
- en: '| `Menubutton` | `TMenubutton` |'
  id: totrans-431
  prefs: []
  type: TYPE_TB
  zh: '| `Menubutton` | `TMenubutton` |'
- en: '| `Notebook` | `TNotebook` |'
  id: totrans-432
  prefs: []
  type: TYPE_TB
  zh: '| `Notebook` | `TNotebook` |'
- en: '| `PanedWindow` | `TPanedwindow` (note window is not capitalized!) |'
  id: totrans-433
  prefs: []
  type: TYPE_TB
  zh: '| `PanedWindow` | `TPanedwindow`（注意窗口名称不区分大小写！） |'
- en: '| `Progressbar` | `Horizontal.TProgressbar` or `Vertical.TProgressbar`, based
    on the orient option. |'
  id: totrans-434
  prefs: []
  type: TYPE_TB
  zh: '| `Progressbar` | `Horizontal.TProgressbar` 或 `Vertical.TProgressbar`，根据 orient
    选项。 |'
- en: '| `Radiobutton` | `TRadiobutton` |'
  id: totrans-435
  prefs: []
  type: TYPE_TB
  zh: '| `Radiobutton` | `TRadiobutton` |'
- en: '| `Scale` | `Horizontal.TScale` or `Vertical.TScale`, based on the orient option.
    |'
  id: totrans-436
  prefs: []
  type: TYPE_TB
  zh: '| `Scale` | `Horizontal.TScale` 或 `Vertical.TScale`，根据 orient 选项。 |'
- en: '| `Scrollbar` | `Horizontal.TScrollbar` or `Vertical.TScrollbar`, based on
    the orient option. |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| `Scrollbar` | `Horizontal.TScrollbar` 或 `Vertical.TScrollbar`，根据 orient 选项。
    |'
- en: '| `Separator` | `TSeparator` |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| `Separator` | `TSeparator` |'
- en: '| `Sizegrip` | `TSizegrip` |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| `Sizegrip` | `TSizegrip` |'
- en: '| `Treeview` | `Treeview` (note only single ''T'' meaning notTTreview!) |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| `Treeview` | `Treeview` (注意只有一个 ''T''，表示不是TTreview!) |'
- en: 'Options available to all ttk widgets are as follows:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 所有 ttk 小部件都有的选项如下：
- en: '| Option | Description |'
  id: totrans-442
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-443
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `class` | Specifies the window class. The class is used when querying the
    option database for the window''s other options, to determine the default bindtags
    for the window, and to select the widget''s default layout and style. This is
    a read-only option which may only be specified when the window is created. |'
  id: totrans-444
  prefs: []
  type: TYPE_TB
  zh: '| `class` | 指定窗口类。当查询选项数据库以获取窗口的其他选项、确定窗口的默认 bindtags 以及选择小部件的默认布局和样式时使用该类。这是一个只读选项，只能在创建窗口时指定。
    |'
- en: '| `cursor` | specifies mouse cursor to be displayed for the widget |'
  id: totrans-445
  prefs: []
  type: TYPE_TB
  zh: '| `cursor` | 指定小部件显示的鼠标光标 |'
- en: '| `takefocus` | Determines whether the window accepts the focus during keyboard
    traversal. 0, 1 or an empty string is returned. If 0, the window should be skipped
    entirely during keyboard traversal. If 1, the window should receive the input
    focus as long as it is viewable. An empty string means that the traversal scripts
    make the decision about whether or not to focus on the window. |'
  id: totrans-446
  prefs: []
  type: TYPE_TB
  zh: '| `takefocus` | 确定窗口在键盘遍历期间是否接受焦点。返回 0、1 或空字符串。如果为 0，则在键盘遍历期间应完全跳过窗口。如果为 1，则只要窗口是可见的，它就应该接收输入焦点。空字符串表示遍历脚本将决定是否将焦点放在窗口上。
    |'
- en: '| `style` | May be used to specify a custom widget style. |'
  id: totrans-447
  prefs: []
  type: TYPE_TB
  zh: '| `style` | 可用于指定自定义小部件样式。 |'
- en: 'Options accepted by all scrollable ttk widgets are as follows:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 所有可滚动 ttk 小部件接受的选项如下：
- en: '| Option | Description |'
  id: totrans-449
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-450
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `xscrollcommand` | Used to communicate with horizontal scrollbars. When the
    view in the widget''s window changes, the widget will generate a Tcl command based
    on the scrollcommand. Usually, this option consists of the Scrollbar.set() method
    of some scrollbar. This will cause the scrollbar to be updated whenever the view
    in the window changes. |'
  id: totrans-451
  prefs: []
  type: TYPE_TB
  zh: '| `xscrollcommand` | 用于与水平滚动条通信。当小部件窗口中的视图发生变化时，小部件将基于 scrollcommand 生成一个 Tcl
    命令。通常，此选项由某个滚动条的 Scrollbar.set() 方法组成。这将导致滚动条在窗口中的视图发生变化时更新。 |'
- en: '| `yscrollcommand` | Command for vertical scrollbars. |'
  id: totrans-452
  prefs: []
  type: TYPE_TB
  zh: '| `yscrollcommand` | 垂直滚动条的命令。 |'
- en: 'Methods from ttk.Widget class with their description are as follows:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: ttk.Widget 类的方法及其描述如下：
- en: '| Method | Description |'
  id: totrans-454
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-455
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `identify(self, x, y)` | Returns the name of the element at position x, y,
    or the empty string if the point does not lie within any element. x and y are
    pixel coordinates relative to the widget. |'
  id: totrans-456
  prefs: []
  type: TYPE_TB
  zh: '| `identify(self, x, y)` | 返回 x, y 位置处的元素名称，如果点不在任何元素内，则返回空字符串。x 和 y 是相对于小部件的像素坐标。
    |'
- en: '| `instate(self, statespec, callback=None, *args, **kw)` | Test the widget''s
    state. If callback is not specified, returns True if the widget state matches
    statespec and False otherwise. If callback is specified, then it will be invoked
    with `*args`, `**kw` if the widget state matches `statespec`. `statespec` is expected
    to be a sequence. |'
  id: totrans-457
  prefs: []
  type: TYPE_TB
  zh: '| `instate(self, statespec, callback=None, *args, **kw)` | 测试小部件的状态。如果没有指定回调函数，如果小部件状态与
    statespec 匹配则返回 True，否则返回 False。如果指定了回调函数，则当小部件状态与 `statespec` 匹配时，将使用 `*args`
    和 `**kw` 调用它。`statespec` 预期是一个序列。 |'
- en: '| `state(self, statespec=None)` | Modify or inquire widget state. Widget state
    is returned if statespec is None, otherwise it is set according to the `statespec`
    flags, and then a new state spec is returned, indicating which flags were changed.
    `statespec` is expected to be a sequence. |'
  id: totrans-458
  prefs: []
  type: TYPE_TB
  zh: '| `state(self, statespec=None)` | 修改或查询小部件状态。如果 statespec 为 None，则返回小部件状态，否则根据
    `statespec` 标志设置状态，然后返回一个新的状态规范，指示哪些标志已更改。`statespec` 预期是一个序列。 |'
- en: We will not show all ttk widget specific options here. To obtain a list of available
    options for a ttk widget, use the help command.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在此处不会显示所有 ttk 小部件特定选项。要获取 ttk 小部件可用选项的列表，请使用帮助命令。
- en: 'To obtain help on any ttk widget/class, import ttk into the namespace using
    following command:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 要获取任何 ttk 小部件/类的帮助，请使用以下命令将 ttk 导入命名空间：
- en: '[PRE5]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following commands can then be used to get information on a particular
    widget:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用以下命令获取特定小部件的信息：
- en: '| Widget Name | Getting Help |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| 小部件名称 | 获取帮助 |'
- en: '| --- | --- |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| Label | `help(ttk.Label)` |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| Label | `help(ttk.Label)` |'
- en: '| Button | `help(ttk.Button)` |'
  id: totrans-466
  prefs: []
  type: TYPE_TB
  zh: '| Button | `help(ttk.Button)` |'
- en: '| CheckButton | `help(ttk.Checkbutton)` |'
  id: totrans-467
  prefs: []
  type: TYPE_TB
  zh: '| CheckButton | `help(ttk.Checkbutton)` |'
- en: '| Entry | `help(ttk.Entry)` |'
  id: totrans-468
  prefs: []
  type: TYPE_TB
  zh: '| Entry | `help(ttk.Entry)` |'
- en: '| Frame | `help(ttk.Frame)` |'
  id: totrans-469
  prefs: []
  type: TYPE_TB
  zh: '| Frame | `help(ttk.Frame)` |'
- en: '| LabelFrame | `help(ttk.LabelFrame)` |'
  id: totrans-470
  prefs: []
  type: TYPE_TB
  zh: '| LabelFrame | `help(ttk.LabelFrame)` |'
- en: '| Menubutton | `help(ttk.Menubutton)` |'
  id: totrans-471
  prefs: []
  type: TYPE_TB
  zh: '| Menubutton | `help(ttk.Menubutton)` |'
- en: '| OptionMenu | `help(ttk.OptionMenu)` |'
  id: totrans-472
  prefs: []
  type: TYPE_TB
  zh: '| OptionMenu | `help(ttk.OptionMenu)` |'
- en: '| PanedWindow | `help(ttk.PanedWindow)` |'
  id: totrans-473
  prefs: []
  type: TYPE_TB
  zh: '| PanedWindow | `help(ttk.PanedWindow)` |'
- en: '| RadioButton | `help(ttk.Radiobutton)` |'
  id: totrans-474
  prefs: []
  type: TYPE_TB
  zh: '| 单选按钮 | `帮助(ttk.Radiobutton)` |'
- en: '| Scale | `help(ttk.Scale)` |'
  id: totrans-475
  prefs: []
  type: TYPE_TB
  zh: '| 滚动条 | `帮助(ttk.Scale)` |'
- en: '| Scrollbar | `help(ttk.Scrollbar)` |'
  id: totrans-476
  prefs: []
  type: TYPE_TB
  zh: '| 滚动条 | `帮助(ttk.Scrollbar)` |'
- en: '| Combobox | `help(ttk.Combobox)` |'
  id: totrans-477
  prefs: []
  type: TYPE_TB
  zh: '| 组合框 | `帮助(ttk.Combobox)` |'
- en: '| Notebook | `help(ttk.Notebook)` |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
  zh: '| 笔记本 | `帮助(ttk.Notebook)` |'
- en: '| Progressbar | `help(ttk.Progressbar)` |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
  zh: '| 进度条 | `帮助(ttk.Progressbar)` |'
- en: '| Separator | `help(ttk.Separator)` |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
  zh: '| 分隔符 | `帮助(ttk.Separator)` |'
- en: '| Sizegrip | `help(ttk.Sizegrip)` |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
  zh: '| 大小调整手柄 | `帮助(ttk.Sizegrip)` |'
- en: '| Treeview | `help(ttk.Treeview)` |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
  zh: '| 树形视图 | `帮助(ttk.Treeview)` |'
- en: 'The following given are some ttkVirtual events and situation when they are
    triggered:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些 ttkVirtual 事件及其触发情况：
- en: '| Virtual Event | Triggered when |'
  id: totrans-484
  prefs: []
  type: TYPE_TB
  zh: '| 虚拟事件 | 触发时 |'
- en: '| --- | --- |'
  id: totrans-485
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `<<ComboboxSelected>>` | The user selects an element from the list of values
    in the Combobox widget |'
  id: totrans-486
  prefs: []
  type: TYPE_TB
  zh: '| `<<ComboboxSelected>>` | 用户从 Combobox 小部件的值列表中选择了一个元素 |'
- en: '| `<<NotebookTabChanged>>` | A new tab is selected in the Notebook widget |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| `<<NotebookTabChanged>>` | 在 Notebook 小部件中选择了新标签页 |'
- en: '| `<<TreeviewSelect>>` | Selection changes in the Treeview widget. |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| `<<TreeviewSelect>>` | Treeview 小部件中的选择发生变化。|'
- en: '| `<<TreeviewOpen>>` | Just before settings the focus item to open = True.
    |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| `<<TreeviewOpen>>` | 在将焦点项设置为打开 = True 前立即。|'
- en: '| `<<TreeviewClose>>` | Just after setting the focus item to open = False.
    |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| `<<TreeviewClose>>` | 在将焦点项设置为打开 = False 后立即。|'
- en: Each widget in ttk is assigned a style, which specifies the set of elements
    making up the widget and how they are arranged, along with dynamic and default
    settings for element options.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: ttk 中的每个小部件都分配了一个样式，该样式指定了组成小部件的元素集合以及它们的排列方式，以及元素选项的动态和默认设置。
- en: 'By default, the style name is the same as the widget''s class name, but it
    may be overridden by the widget''s style option. If the class name of a widget
    is unknown, use the method `Misc.winfo_class()` (`somewidget.winfo_class()`).
    Following given are few methods with their description of ttk styling:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，样式名称与小部件的类名相同，但可能被小部件的样式选项覆盖。如果小部件的类名未知，请使用方法 `Misc.winfo_class()` (`somewidget.winfo_class()`)。以下是一些
    ttk 样式的方法及其描述：
- en: '| Method | Description |'
  id: totrans-493
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-494
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `configure(self, style, query_opt=None, **kw)` | Query or sets the default
    value of the specified option(s) in style. Each key in `kw` is an option, and
    each value is either a string or a sequence identifying the value for that option.
    |'
  id: totrans-495
  prefs: []
  type: TYPE_TB
  zh: '| `configure(self, style, query_opt=None, **kw)` | 查询或设置样式中指定选项的默认值。`kw` 中的每个键都是一个选项，每个值是标识该选项值的字符串或序列。|'
- en: '| `element_create(self, elementname, etype, *args, **kw)` | Create a new element
    in the current theme of given `etype`. |'
  id: totrans-496
  prefs: []
  type: TYPE_TB
  zh: '| `element_create(self, elementname, etype, *args, **kw)` | 在给定的 `etype` 当前主题中创建一个新元素。|'
- en: '| `element_names(self)` | Returns the list of elements defined in the current
    theme. |'
  id: totrans-497
  prefs: []
  type: TYPE_TB
  zh: '| `element_names(self)` | 返回当前主题中定义的元素列表。|'
- en: '| `element_options(self, elementname)` | Return the list of `elementname` options.
    |'
  id: totrans-498
  prefs: []
  type: TYPE_TB
  zh: '| `element_options(self, elementname)` | 返回 `elementname` 选项的列表。|'
- en: '| `layout(self, style, layoutspec=None)` | Define the widget layout for given
    style. If `layoutspec` is omitted, return the layout specification for given style.`layoutspec`
    is expected to be a list or an object different than None that evaluates to False
    if you want to "turn off" that style. If it is a list (or tuple, or something
    else), each item should be a tuple, where the first item is the layout name, and
    the second item should have the format described below |'
  id: totrans-499
  prefs: []
  type: TYPE_TB
  zh: '| `layout(self, style, layoutspec=None)` | 定义给定样式的小部件布局。如果省略 `layoutspec`，则返回给定样式的布局规范。`layoutspec`
    预期是一个列表或一个不同于 None 的对象，如果想要“关闭”该样式，则该对象应评估为 False。如果它是一个列表（或元组，或其他），则每个项应是一个元组，其中第一个项是布局名称，第二个项应具有以下描述的格式
    |'
- en: 'A layout can be just `None`, if it takes no options, or a dictionary of options
    specifying how to arrange the element. The layout mechanism uses a simplified
    version of the pack geometry manager: given an initial cavity, each element is
    allocated a parcel.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 布局可以是 `None`，如果它不包含选项，或者是一个选项字典，指定如何排列元素。布局机制使用简化版的 pack 几何管理器：给定一个初始内腔，每个元素都被分配一个包裹。
- en: '| Valid options: Values | Description |'
  id: totrans-501
  prefs: []
  type: TYPE_TB
  zh: '| 有效选项：值 | 描述 |'
- en: '| --- | --- |'
  id: totrans-502
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `side: whichside` | Specifies which side of the cavity to place the element;
    one of top, right, bottom or left. If omitted, the element occupies the entire
    cavity. |'
  id: totrans-503
  prefs: []
  type: TYPE_TB
  zh: '| `side: whichside` | 指定放置元素的内腔的哪一侧；top、right、bottom 或 left 之一。如果省略，则元素占据整个内腔。|'
- en: '| `sticky: nswe` | Specifies where the element is placed inside its allocated
    parcel. |'
  id: totrans-504
  prefs: []
  type: TYPE_TB
  zh: '| `sticky: nswe` | 指定元素在其分配的包裹内的放置位置。|'
- en: '| `children: [sublayout... ]` | Specifies a list of elements to place inside
    the element. Each element is a tuple (or other sequence) where the first item
    is the layout name, and the other is a layout. |'
  id: totrans-505
  prefs: []
  type: TYPE_TB
  zh: '| `children: [sublayout... ]` | 指定要放置在元素内部的元素列表。每个元素是一个元组（或其他序列），其中第一个项目是布局名称，其余的是布局。
    |'
- en: '| `lookup(self, style, option, state=None, default=None)` | Returns the value
    specified for option in style. If state is specified, it is expected to be a sequence
    of one or more states. If the default argument is set, it is used as a fallback
    value in case no specification for option is found. |'
  id: totrans-506
  prefs: []
  type: TYPE_TB
  zh: '| `lookup(self, style, option, state=None, default=None)` | 返回在样式中对选项指定的值。如果指定了状态，则它应是一个包含一个或多个状态的序列。如果设置了默认参数，则在找不到选项的指定时，它用作回退值。
    |'
- en: '| `map(self, style, query_opt=None, **kw)` | Query or sets dynamic values of
    the specified option(s) in style. Each key in kw is an option, and each value
    should be a list or a tuple (usually) containing `statespecs` grouped in tuples,
    or list, or something else of your preference. A `statespec` is compound of one
    or more states, and then a value. |'
  id: totrans-507
  prefs: []
  type: TYPE_TB
  zh: '| `map(self, style, query_opt=None, **kw)` | 查询或设置指定选项（s）在样式中的动态值。`kw` 中的每个键是一个选项，每个值应是一个列表或元组（通常是），其中包含按元组、列表或其他您偏好的方式分组的
    `statespecs`。`statespec` 是由一个或多个状态和值组成的复合体。 |'
- en: '| `theme_create(self, themename, parent=None, settings=None)` | Creates a new
    theme. It is an error if themename already exists. If parent is specified, the
    new theme will inherit styles, elements and layouts from the specified parent
    theme. If settings are present, they are expected to have the same syntax used
    for `theme_settings`. |'
  id: totrans-508
  prefs: []
  type: TYPE_TB
  zh: '| `theme_create(self, themename, parent=None, settings=None)` | 创建一个新的主题。如果
    `themename` 已经存在，则是一个错误。如果指定了 `parent`，则新主题将从指定的父主题继承样式、元素和布局。如果存在设置，则它们应使用与 `theme_settings`
    相同的语法。 |'
- en: '| `theme_names(self)` | Returns a list of all known themes. |'
  id: totrans-509
  prefs: []
  type: TYPE_TB
  zh: '| `theme_names(self)` | 返回所有已知主题的列表。 |'
- en: '| `theme_settings(self, themename, settings)` | Temporarily sets the current
    theme to `themename`, apply specified settings, and then restores the previous
    theme. Each key in settings is a style and each value may contain the keys `configure`,
    `map`, `layout`, and `element create` and they are expected to have the same format
    as specified by the methods `configure`, `map`, `layout`, and `element_create`
    respectively. |'
  id: totrans-510
  prefs: []
  type: TYPE_TB
  zh: '| `theme_settings(self, themename, settings)` | 临时将当前主题设置为 `themename`，应用指定的设置，然后恢复先前的主题。`settings`
    中的每个键是一个样式，每个值可能包含 `configure`、`map`、`layout` 和 `element create` 的键，并且它们应具有与 `configure`、`map`、`layout`
    和 `element_create` 方法指定的相同格式。 |'
- en: '| `theme_use(self, themename=None)` | If `themename` is None, returns the theme
    in use; otherwise, set the current theme to `themename`, refreshes all widgets
    and emits a `<<ThemeChanged>>` event. |'
  id: totrans-511
  prefs: []
  type: TYPE_TB
  zh: '| `theme_use(self, themename=None)` | 如果 `themename` 为 None，则返回正在使用的主题；否则，将当前主题设置为
    `themename`，刷新所有小部件并发出 `<<ThemeChanged>>` 事件。 |'
- en: The Toplevel window methods
  id: totrans-512
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Toplevel 窗口方法
- en: These methods enable communication with the window manager. They are available
    on the root window (Tk), and also on Toplevel instances.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 这些方法使与窗口管理器通信成为可能。它们在根窗口（Tk）和 Toplevel 实例上都是可用的。
- en: Note that different window managers behave in different ways. For example, some
    window managers don't support icon windows; some don't support window groups,
    and so on.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，不同的窗口管理器表现不同。例如，一些窗口管理器不支持图标窗口；一些不支持窗口组，等等。
- en: '| `aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)`
    | Instruct the window manager to set the aspect ratio (width/height) of this widget
    to be between `minNumer`/`minDenom` and `maxNumer`/`maxDenom`. Return a tuple
    of the actual values if no argument is given. |'
  id: totrans-515
  prefs: []
  type: TYPE_TB
  zh: '| `aspect = wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)`
    | 指示窗口管理器将此小部件的纵横比（宽度/高度）设置为介于 `minNumer`/`minDenom` 和 `maxNumer`/`maxDenom` 之间。如果没有提供参数，则返回实际值的元组。
    |'
- en: '| `attributes = wm_attributes(self, *args)` | This subcommand returns or sets
    platform-specific attributes. The first form returns a list of the platform specific
    flags and their values. The second form returns the value for the specific option.
    The third form sets one or more of the values. The values are as follows:On Windows,
    -disabled gets or sets whether the window is in a disabled state. -toolwindow
    gets or sets the style of the windowtotoolwindow (as defined in the MSDN). -topmost
    gets or sets whether this is a topmost window (displays above all other windows).On
    Macintosh, `XXXXX`On Unix, there are currently no special attribute values. |'
  id: totrans-516
  prefs: []
  type: TYPE_TB
  zh: '| `attributes = wm_attributes(self, *args)` | 此子命令返回或设置平台特定的属性。第一种形式返回平台特定标志及其值的列表。第二种形式返回特定选项的值。第三种形式设置一个或多个值。值如下：在Windows上，-disabled
    获取或设置窗口是否处于禁用状态。-toolwindow 获取或设置窗口转换为工具窗口的样式（如MSDN中定义）。-topmost 获取或设置此窗口是否为顶层窗口（显示在其他所有窗口之上）。在Macintosh上，`XXXXX`在Unix上，目前没有特殊的属性值。|'
- en: '| `client = wm_client(self, name=None)` | Store name in `WM_CLIENT_MACHINE`
    property of this widget. Return current value. |'
  id: totrans-517
  prefs: []
  type: TYPE_TB
  zh: '| `client = wm_client(self, name=None)` | 将名称存储在此小部件的 `WM_CLIENT_MACHINE` 属性中。返回当前值。|'
- en: '| `colormapwindows = wm_colormapwindows(self, *wlist)` | Store list of window
    names (wlist) into `WM_COLORMAPWINDOWS` property of this widget. This list contains
    windows whose `colormaps` differ from their parents. Return current list of widgets
    if wlist is empty. |'
  id: totrans-518
  prefs: []
  type: TYPE_TB
  zh: '| `colormapwindows = wm_colormapwindows(self, *wlist)` | 将窗口名称列表（`wlist`）存储在此小部件的
    `WM_COLORMAPWINDOWS` 属性中。此列表包含与父窗口 `colormaps` 不同的窗口。如果 `wlist` 为空，则返回当前小部件列表。|'
- en: '| `command = wm_command(self, value=None)` | Store `value` in `WM_COMMAND`
    property. It is the command which shall be used to invoke the application. Return
    current command if `value` is None. |'
  id: totrans-519
  prefs: []
  type: TYPE_TB
  zh: '| `command = wm_command(self, value=None)` | 在 `WM_COMMAND` 属性中存储 `value`。这是用于调用应用程序的命令。如果
    `value` 为 `None`，则返回当前命令。|'
- en: '| `deiconify = wm_deiconify(self)` | `deiconify` this widget. If it was never
    mapped, it will not be mapped. On Windows, it will raise this widget and give
    it the focus. |'
  id: totrans-520
  prefs: []
  type: TYPE_TB
  zh: '| `deiconify = wm_deiconify(self)` | `deiconify` 此小部件。如果它从未映射，则不会映射。在Windows上，它将提升此小部件并使其获得焦点。|'
- en: '| `focusmodel = wm_focusmodel(self, model=None)` | Set focus model to `model`,
    "active" means that this widget will claim the focus itself, "passive" means that
    the window manager shall give the focus. Return current focus model if `model`
    is None. |'
  id: totrans-521
  prefs: []
  type: TYPE_TB
  zh: '| `focusmodel = wm_focusmodel(self, model=None)` | 将焦点模型设置为 `model`，"active"
    表示此小部件将自行请求焦点，"passive" 表示窗口管理器应提供焦点。如果 `model` 为 `None`，则返回当前焦点模型。|'
- en: '| `frame = wm_frame(self)` | Return identifier for decorative frame of this
    widget if present. |'
  id: totrans-522
  prefs: []
  type: TYPE_TB
  zh: '| `frame = wm_frame(self)` | 如果存在，则返回此小部件装饰框架的标识符。|'
- en: '| `geometry = wm_geometry(self, newGeometry=None)` | Set `geometry` to `newgeometry`
    of the form `=widthxheight+x+y`. Return current value if None is given. |'
  id: totrans-523
  prefs: []
  type: TYPE_TB
  zh: '| `geometry = wm_geometry(self, newGeometry=None)` | 将 `geometry` 设置为 `newgeometry`，其形式为
    `=widthxheight+x+y`。如果未提供，则返回当前值。|'
- en: '| `grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)`
    | Instruct the window manager that this widget shall only be resized on grid boundaries.
    `widthInc` and `heightInc` are the width and height of a grid unit in pixels.
    `baseWidth` and `baseHeight` are the number of grid units requested in `Tk_GeometryRequest`.
    |'
  id: totrans-524
  prefs: []
  type: TYPE_TB
  zh: '| `grid = wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)`
    | 指示窗口管理器，此小部件只能在网格边界上调整大小。`widthInc` 和 `heightInc` 是网格单元的宽度和高度（以像素为单位）。`baseWidth`
    和 `baseHeight` 是在 `Tk_GeometryRequest` 中请求的网格单元数。|'
- en: '| `group = wm_group(self, pathName=None)` | Set the group leader widgets for
    related widgets to `pathName`. Return the group leader of this widget if None
    is given. |'
  id: totrans-525
  prefs: []
  type: TYPE_TB
  zh: '| `group = wm_group(self, pathName=None)` | 将相关小部件的组领导者小部件设置为 `pathName`。如果未提供，则返回此小部件的组领导者。|'
- en: '| `iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)` | Set bitmap
    for the iconified widget to BITMAP. Return the bitmap if None is given. Under
    Windows, the DEFAULT parameter can be used to set the icon for the widget and
    any descendants that don''t have an icon set explicitly. DEFAULT can be the relative
    path to a `.ico` file (example: `root.iconbitmap(default=''myicon.ico'')`). See
    Tkdocumentation for more information. |'
  id: totrans-526
  prefs: []
  type: TYPE_TB
  zh: '| `iconbitmap = wm_iconbitmap(self, bitmap=None, default=None)` | 将图标化小部件的位图设置为
    BITMAP。如果未提供，则返回位图。在Windows上，可以使用 DEFAULT 参数设置小部件及其未显式设置图标的任何后代的图标。DEFAULT 可以是到
    `.ico` 文件的相对路径（例如：`root.iconbitmap(default=''myicon.ico'')`）。有关更多信息，请参阅Tk文档。|'
- en: '| `iconify = wm_iconify(self)` | Display widget as icon. |'
  id: totrans-527
  prefs: []
  type: TYPE_TB
  zh: '| `iconify = wm_iconify(self)` | 将小部件显示为图标。|'
- en: '| `iconmask = wm_iconmask(self, bitmap=None)` | Set mask for the icon bitmap
    of this widget. Return the mask if None is given. |'
  id: totrans-528
  prefs: []
  type: TYPE_TB
  zh: '| `iconmask = wm_iconmask(self, bitmap=None)` | 设置此小部件图标位图的掩码。如果未提供，则返回掩码。
    |'
- en: '| `iconname = wm_iconname(self, newName=None)` | Set the name of the icon for
    this widget. Return the name if None is given. |'
  id: totrans-529
  prefs: []
  type: TYPE_TB
  zh: '| `iconname = wm_iconname(self, newName=None)` | 设置此小部件图标的名称。如果未提供，则返回名称。 |'
- en: '| `iconposition = wm_iconposition(self, x=None, y=None)` | Set the position
    of the icon of this widget to X and Y. Return a tuple of the current values of
    X and Y if None is given. |'
  id: totrans-530
  prefs: []
  type: TYPE_TB
  zh: '| `iconposition = wm_iconposition(self, x=None, y=None)` | 将此小部件图标的X和Y位置设置为X和Y。如果未提供，则返回X和Y的当前值。
    |'
- en: '| `iconwindow = wm_iconwindow(self, pathName=None)` | Set widget `pathName`
    to be displayed instead of icon. Return the current value if None is given. |'
  id: totrans-531
  prefs: []
  type: TYPE_TB
  zh: '| `iconwindow = wm_iconwindow(self, pathName=None)` | 将小部件`pathName`设置为显示图标。如果未提供，则返回当前值。
    |'
- en: '| `maxsize = wm_maxsize(self, width=None, height=None)` | Set max `width` and
    `height` for this widget. If the window is gridded, the values are given in grid
    units. Return the current values if None is given. |'
  id: totrans-532
  prefs: []
  type: TYPE_TB
  zh: '| `maxsize = wm_maxsize(self, width=None, height=None)` | 设置此小部件的最大`width`和`height`。如果窗口是网格化的，则值以网格单位给出。如果未提供，则返回当前值。
    |'
- en: '| `minsize = wm_minsize(self, width=None, height=None)` | Set min `width` and
    `height` for this widget. If the window is gridded, the values are given in grid
    units. Return the current values if None is given. |'
  id: totrans-533
  prefs: []
  type: TYPE_TB
  zh: '| `minsize = wm_minsize(self, width=None, height=None)` | 设置此小部件的最小`width`和`height`。如果窗口是网格化的，则值以网格单位给出。如果未提供，则返回当前值。
    |'
- en: '| `overrideredirect = wm_overrideredirect(self, boolean=None)` | Instruct the
    window manager to ignore this widget if Boolean is given with 1\. Return the current
    value if None is given. |'
  id: totrans-534
  prefs: []
  type: TYPE_TB
  zh: '| `overrideredirect = wm_overrideredirect(self, boolean=None)` | 指示窗口管理器在布尔值为1时忽略此小部件。如果未提供，则返回当前值。
    |'
- en: '| `positionfrom = wm_positionfrom(self, who=None)` | Instruct the window manager
    that the position of this widget shall be defined by the user if `who` is "user",
    and by its own policy if `who` is "program". |'
  id: totrans-535
  prefs: []
  type: TYPE_TB
  zh: '| `positionfrom = wm_positionfrom(self, who=None)` | 指示窗口管理器，如果`who`为"user"，则由用户定义此小部件的位置，如果`who`为"program"，则由其自身策略定义。
    |'
- en: '| `protocol = wm_protocol(self, name=None, func=None)` | Bind function `func`
    to command `name` for this widget. Return the function bound to `name` if None
    is given. `name` could be for example, `WM_SAVE_YOURSELF` or `WM_DELETE_WINDOW`.
    |'
  id: totrans-536
  prefs: []
  type: TYPE_TB
  zh: '| `protocol = wm_protocol(self, name=None, func=None)` | 将函数`func`绑定到此小部件的命令`name`。如果未提供，则返回绑定到`name`的函数。`name`可以是例如`WM_SAVE_YOURSELF`或`WM_DELETE_WINDOW`。
    |'
- en: '| `resizable = wm_resizable(self, width=None, height=None)` | Instruct the
    window manager whether this width can be resized in `width` or `height`. Both
    values are Boolean values. |'
  id: totrans-537
  prefs: []
  type: TYPE_TB
  zh: '| `resizable = wm_resizable(self, width=None, height=None)` | 指示窗口管理器是否可以在`width`或`height`中调整此宽度的大小。两个值都是布尔值。
    |'
- en: '| `sizefrom = wm_sizefrom(self, who=None)` | Instruct the window manager that
    the size of this widget shall be defined by the user if `who` is "user", and by
    its own policy if `who` is "program". |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| `sizefrom = wm_sizefrom(self, who=None)` | 指示窗口管理器，如果`who`为"user"，则由用户定义此小部件的大小，如果`who`为"program"，则由其自身策略定义。
    |'
- en: '| `state = wm_state(self, newstate=None)` | Query or set the state of this
    widget as one of normal, icon, iconic (see `wm_iconwindow`), withdrawn, or zoomed
    (Windows only). |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| `state = wm_state(self, newstate=None)` | 查询或设置此小部件的状态，可以是正常、图标、图标化（参见`wm_iconwindow`）、撤回或缩放（仅限Windows）。
    |'
- en: '| `title = wm_title(self, string=None)` | Set the title of this widget. |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| `title = wm_title(self, string=None)` | 设置此小部件的标题。 |'
- en: '| `transient = wm_transient(self, master=None)` | Instruct the window manager
    that this widget is transient with regard to widget `master`. |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| `transient = wm_transient(self, master=None)` | 指示窗口管理器，此小部件相对于小部件`master`是瞬时的。
    |'
- en: '| `withdraw = wm_withdraw(self)` | Withdraw this widget from the screen such
    that it is unmapped and forgotten by the window manager. Re-draw it with `wm_deiconify`.
    |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| `withdraw = wm_withdraw(self)` | 将此小部件从屏幕上撤回，使其未映射并被窗口管理器遗忘。使用`wm_deiconify`重新绘制它。
    |'
- en: '| `wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)`
    | Instruct the window manager to set the aspect ratio (width/height) of this widget
    to be between `minNumer`/`minDenom` and `maxNumer`/`maxDenom`. Return a tuple
    of the actual values if no argument is given. |'
  id: totrans-543
  prefs: []
  type: TYPE_TB
  zh: '| `wm_aspect(self, minNumer=None, minDenom=None, maxNumer=None, maxDenom=None)`
    | 指示窗口管理器将此小部件的宽高比（宽度/高度）设置为介于`minNumer`/`minDenom`和`maxNumer`/`maxDenom`之间。如果没有提供参数，则返回实际值。
    |'
- en: '| `wm_attributes(self, *args)` | This subcommand returns or sets platform-specific
    attributes. The first form returns a list of the platform specific flags and their
    values. The second form returns the value for the specific option. The third form
    sets one or more of the values. The values are as follows:On Windows, `-disabled`
    gets or sets whether the window is in a disabled state. `-toolwindow` gets or
    sets the style of the windowtotoolwindow (as defined in the MSDN). `-topmost`
    gets or sets whether this is a topmost window (displays above all other windows).On
    Macintosh, `XXXXX`On Unix, there are currently no special attribute values. |'
  id: totrans-544
  prefs: []
  type: TYPE_TB
  zh: '| `wm_attributes(self, *args)` | 此子命令返回或设置平台特定的属性。第一种形式返回平台特定标志及其值的列表。第二种形式返回特定选项的值。第三种形式设置一个或多个值。值如下：在Windows上，`-disabled`
    获取或设置窗口是否处于禁用状态。`-toolwindow` 获取或设置窗口到工具窗口的样式（如MSDN中定义）。`-topmost` 获取或设置此是否为顶层窗口（显示在其他所有窗口之上）。在Macintosh上，`XXXXX`。在Unix上，目前没有特殊的属性值。|'
- en: '| `wm_client(self, name=None)` | Store `name` in `WM_CLIENT_MACHINE` property
    of this widget. Return current value. |'
  id: totrans-545
  prefs: []
  type: TYPE_TB
  zh: '| `wm_client(self, name=None)` | 将 `name` 存储在此小部件的 `WM_CLIENT_MACHINE` 属性中。返回当前值。|'
- en: '| `wm_colormapwindows(self, *wlist)` | Store list of window names (wlist) into
    `WM_COLORMAPWINDOWS` property of this widget. This list contains windows whose
    `colormaps` differ from their parents. Return current list of widgets if wlist
    is empty. |'
  id: totrans-546
  prefs: []
  type: TYPE_TB
  zh: '| `wm_colormapwindows(self, *wlist)` | 将窗口名称列表（wlist）存储在此小部件的 `WM_COLORMAPWINDOWS`
    属性中。此列表包含与父窗口 `colormaps` 不同的窗口。如果 wlist 为空，则返回当前小部件的列表。|'
- en: '| `wm_command(self, value=None)` | Store `value` in `WM_COMMAND` property.
    It is the command which shall be used to invoke the application. Return current
    command if `value` is None. |'
  id: totrans-547
  prefs: []
  type: TYPE_TB
  zh: '| `wm_command(self, value=None)` | 将 `value` 存储在 `WM_COMMAND` 属性中。这是用于调用应用程序的命令。如果
    `value` 为 `None`，则返回当前命令。|'
- en: '| `wm_deiconify(self)` | Deiconify this widget. If it was never mapped, it
    will not be mapped. On Windows, it will raise this widget and give it the focus.
    |'
  id: totrans-548
  prefs: []
  type: TYPE_TB
  zh: '| `wm_deiconify(self)` | 取消图标化此小部件。如果它从未被映射，则不会进行映射。在Windows上，它将提升此小部件并使其获得焦点。|'
- en: '| `wm_focusmodel(self, model=None)` | Set focus model to model. "active" means
    that this widget will claim the focus itself, "passive" means that the window
    manager shall give the focus. Return current focus model if `model` is None. |'
  id: totrans-549
  prefs: []
  type: TYPE_TB
  zh: '| `wm_focusmodel(self, model=None)` | 将焦点模型设置为 `model`。"active" 表示此小部件将自行请求焦点，"passive"
    表示窗口管理器应提供焦点。如果 `model` 为 `None`，则返回当前焦点模型。|'
- en: '| `wm_frame(self)` | Return identifier for decorative frame of this widget
    if present. |'
  id: totrans-550
  prefs: []
  type: TYPE_TB
  zh: '| `wm_frame(self)` | 如果存在，则返回此小部件装饰框架的标识符。|'
- en: '| `wm_geometry(self, newGeometry=None)` | Set `geometry` to `newgeometry` of
    the form `=widthxheight+x+y`. Return current value if None is given. |'
  id: totrans-551
  prefs: []
  type: TYPE_TB
  zh: '| `wm_geometry(self, newGeometry=None)` | 将 `geometry` 设置为 `newgeometry` 的形式
    `=widthxheight+x+y`。如果未提供 `None`，则返回当前值。|'
- en: '| `wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)`
    | Instruct the window manager that this widget shall only be resized on grid boundaries.
    `widthInc` and `heightInc` are the width and height of a grid unit in pixels.
    `baseWidth` and `baseHeight` are the number of grid units requested in `Tk_GeometryRequest`.
    |'
  id: totrans-552
  prefs: []
  type: TYPE_TB
  zh: '| `wm_grid(self, baseWidth=None, baseHeight=None, widthInc=None, heightInc=None)`
    | 指示窗口管理器，此小部件只能在网格边界上调整大小。`widthInc` 和 `heightInc` 是像素中网格单元的宽度和高度。`baseWidth`
    和 `baseHeight` 是在 `Tk_GeometryRequest` 中请求的网格单元数。|'
- en: '| `wm_group(self, pathName=None)` | Set the group leader widgets for related
    widgets to `pathname`. Return the group leader of this widget if None is given.
    |'
  id: totrans-553
  prefs: []
  type: TYPE_TB
  zh: '| `wm_group(self, pathName=None)` | 将相关小部件的组领导者小部件设置为 `pathname`。如果未提供 `None`，则返回此小部件的组领导者。|'
- en: '| `wm_iconbitmap(self, bitmap=None, default=None)` | Set bitmap for the iconified
    widget to `bitmap`. Return the bitmap if None is given.Under Windows, the `default`
    parameter can be used to set the icon for the widget and any descendants that
    don''t have an icon set explicitly. DEFAULT can be the relative path to a `.ico`
    file (example: `root.iconbitmap(default=''myicon.ico'')`). See Tkdocumentation
    for more information. |'
  id: totrans-554
  prefs: []
  type: TYPE_TB
  zh: '| `wm_iconbitmap(self, bitmap=None, default=None)` | 将图标化小部件的位图设置为 `bitmap`。如果未提供
    `None`，则返回位图。在Windows上，可以使用 `default` 参数设置小部件及其未显式设置图标的任何后代的图标。DEFAULT 可以是 `.ico`
    文件的相对路径（例如：`root.iconbitmap(default=''myicon.ico'')`）。有关更多信息，请参阅Tk文档。|'
- en: '| `wm_iconify(self)` | Display widget as icon. |'
  id: totrans-555
  prefs: []
  type: TYPE_TB
  zh: '| `wm_iconify(self)` | 将小部件显示为图标。|'
- en: '| `wm_iconmask(self, bitmap=None)` | Set mask for the icon bitmap of this widget.
    Return the mask if None is given. |'
  id: totrans-556
  prefs: []
  type: TYPE_TB
  zh: '| `wm_iconmask(self, bitmap=None)` | 设置此小部件图标位图的掩码。如果未提供 `None`，则返回掩码。|'
- en: '| `wm_iconname(self, newName=None)` | Set the name of the icon for this widget.
    Return the name if None is given. |'
  id: totrans-557
  prefs: []
  type: TYPE_TB
  zh: '| `wm_iconname(self, newName=None)` | 设置这个小部件图标的名称。如果未提供`None`，则返回名称。|'
- en: '| `wm_iconposition(self, x=None, y=None)` | Set the position of the icon of
    this widget to X and Y. Return a tuple of the current values of X and X if None
    is given. |'
  id: totrans-558
  prefs: []
  type: TYPE_TB
  zh: '| `wm_iconposition(self, x=None, y=None)` | 将这个小部件图标的X和Y位置设置为X和Y。如果未提供`None`，则返回X和Y的当前值。|'
- en: '| `wm_iconwindow(self, pathName=None)` | Set widget `pathname` to be displayed
    instead of icon. Return the current value if None is given. |'
  id: totrans-559
  prefs: []
  type: TYPE_TB
  zh: '| `wm_iconwindow(self, pathName=None)` | 将小部件`pathname`设置为显示图标，而不是图标本身。如果未提供`None`，则返回当前值。|'
- en: '| `wm_maxsize(self, width=None, height=None)` | Set max `width` and `height`
    for this widget. If the window is gridded, the values are given in grid units.
    Return the current values if None is given. |'
  id: totrans-560
  prefs: []
  type: TYPE_TB
  zh: '| `wm_maxsize(self, width=None, height=None)` | 设置这个小部件的最大`width`和`height`。如果窗口是网格化的，则这些值以网格单位给出。如果未提供`None`，则返回当前值。|'
- en: '| `wm_minsize(self, width=None, height=None)` | Set min `width` and `height`
    for this widget. If the window is gridded the values are given in grid units.
    Return the current values if None is given. |'
  id: totrans-561
  prefs: []
  type: TYPE_TB
  zh: '| `wm_minsize(self, width=None, height=None)` | 设置这个小部件的最小`width`和`height`。如果窗口是网格化的，则这些值以网格单位给出。如果未提供`None`，则返回当前值。|'
- en: '| `wm_overrideredirect(self, boolean=None)` | Instruct the window manager to
    ignore this widget if Boolean is given with 1\. Return the current value if None
    is given. |'
  id: totrans-562
  prefs: []
  type: TYPE_TB
  zh: '| `wm_overrideredirect(self, boolean=None)` | 指示窗口管理器，如果提供了布尔值1，则忽略这个小部件。如果未提供`None`，则返回当前值。|'
- en: '| `wm_positionfrom(self, who=None)` | Instruct the window manager that the
    position of this widget shall be defined by the user if `who` is "user", and by
    its own policy if `who` is "program". |'
  id: totrans-563
  prefs: []
  type: TYPE_TB
  zh: '| `wm_positionfrom(self, who=None)` | 指示窗口管理器，如果`who`是"用户"，则由用户定义这个小部件的位置，如果`who`是"程序"，则由其自己的策略定义。|'
- en: '| `wm_protocol(self, name=None, func=None)` | Bind function `func` to command
    `name` for this widget. Return the function bound to name if None is given. Name
    could be for example, `WM_SAVE_YOURSELF` or `WM_DELETE_WINDOW`. |'
  id: totrans-564
  prefs: []
  type: TYPE_TB
  zh: '| `wm_protocol(self, name=None, func=None)` | 将函数`func`绑定到这个小部件的命令`name`。如果未提供`None`，则返回绑定到`name`的函数。名称可以是例如`WM_SAVE_YOURSELF`或`WM_DELETE_WINDOW`。|'
- en: '| `wm_resizable(self, width=None, height=None)` | Instruct the window manager
    whether this width can be resized in `width` or `height`. Both values are Boolean
    values. |'
  id: totrans-565
  prefs: []
  type: TYPE_TB
  zh: '| `wm_resizable(self, width=None, height=None)` | 指示窗口管理器是否允许在`width`或`height`中调整这个小部件的大小。两个值都是布尔值。|'
- en: '| `wm_sizefrom(self, who=None)` | Instruct the window manager that the size
    of this widget shall be defined by the user if `who` is "user", and by its own
    policy if `who` is "program". |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
  zh: '| `wm_sizefrom(self, who=None)` | 指示窗口管理器，如果`who`是"用户"，则由用户定义这个小部件的大小，如果`who`是"程序"，则由其自己的策略定义。|'
- en: '| `wm_state(self, newstate=None)` | Query or set the state of this widget as
    one of `normal`, `icon`, `iconic` (see `wm_iconwindow`), `withdrawn`, or `zoomed`
    (Windows only). |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
  zh: '| `wm_state(self, newstate=None)` | 查询或设置这个小部件的状态为`normal`、`icon`、`iconic`（见`wm_iconwindow`）、`withdrawn`或`zoomed`（仅限Windows）。|'
- en: '| `wm_title(self, string=None)` | Set the title of this widget. |'
  id: totrans-568
  prefs: []
  type: TYPE_TB
  zh: '| `wm_title(self, string=None)` | 设置这个小部件的标题。|'
- en: '| `wm_transient(self, master=None)` | Instruct the window manager that this
    widget is transient with regard to widget `master`. |'
  id: totrans-569
  prefs: []
  type: TYPE_TB
  zh: '| `wm_transient(self, master=None)` | 指示窗口管理器，这个小部件相对于小部件`master`是临时的。|'
- en: '| `wm_withdraw(self)` | Withdraw this widget from the screen such that it is
    unmapped and forgotten by the window manager. Re-draw it with `wm_deiconify`.
    |'
  id: totrans-570
  prefs: []
  type: TYPE_TB
  zh: '| `wm_withdraw(self)` | 将这个小部件从屏幕上移除，使其未被映射且被窗口管理器遗忘。使用`wm_deiconify`重新绘制它。|'
