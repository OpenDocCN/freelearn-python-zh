- en: Chapter 4. Please Fill in This Form, Madam
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4章。请填写这张表格，夫人
- en: Have you ever imagined what happens when you fill in a form on a website and
    click on that fancy **Send** button at the end of it? Well, all the data you wrote—comment,
    name, checkbox, or whatever—is encoded and sent through a protocol to the server,
    which then routes that information to the Web application. The Web application
    will validate the data origin, read the form, validate the data syntactically
    then semantically, and then decide what to do with it. Do you see that long chain
    of events where every link might be the cause of a problem? That's forms for you.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有想象过当你在网站上填写表单并点击最后的漂亮的**发送**按钮时会发生什么？好吧，你写的所有数据——评论、名称、复选框或其他任何东西——都会被编码并通过协议发送到服务器，然后服务器将这些信息路由到Web应用程序。Web应用程序将验证数据的来源，读取表单，验证数据的语法和语义，然后决定如何处理它。你看到了吗？那里有一长串事件，每个链接都可能是问题的原因？这就是表单。
- en: 'In any case, there is nothing to fear! Flask can help you in those steps but
    there are also tools specifically designed for this purpose. In this chapter,
    we will learn:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，没有什么可害怕的！Flask可以帮助你完成这些步骤，但也有专门为此目的设计的工具。在本章中，我们将学习：
- en: How to write and handle forms with Flask
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用Flask编写和处理表单
- en: How to validate form data
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何验证表单数据
- en: How to use WTForms to validate forms with Flask
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用WTForms验证Flask中的表单
- en: How to implement cross-site request forgery protection
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何实现跨站点请求伪造保护
- en: This will actually be a fairly smooth chapter, with lots of new info but nothing
    complex. Hope you enjoy it!
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上将是一个相当顺利的章节，有很多新信息，但没有复杂的东西。希望你喜欢！
- en: HTML forms for the faint of heart
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: HTML表单对于胆小的人
- en: HTML is, pretty much, the language in which the Web is written. With the help
    of special markups called **tags**, it's possible to add meaning and context to
    plain text, turning it into HTML. For us, HTML is a means to an end. So, if you
    want to learn more about it, please open [http://www.w3schools.com/html/](http://www.w3schools.com/html/)
    in your preferred browser. We are not covering HTML syntax fully, nor all the
    beautiful magic involved in the process.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: HTML基本上是Web编写的语言。借助称为**标签**的特殊标记，可以为纯文本添加含义和上下文，将其转换为HTML。对我们来说，HTML是达到目的的手段。因此，如果你想了解更多，请在你喜欢的浏览器中打开[http://www.w3schools.com/html/](http://www.w3schools.com/html/)。我们没有完全覆盖HTML语法，也没有涉及到整个过程中的所有美妙魔法。
- en: 'Although we will not cover HTML extensively, we will cover HTML specifically;
    by this, I refer to the `<form>` tag. Here is the deal: every time you open a
    webpage and there are a few blank fields for you to fill in, you''re most likely
    filling in an HTML form. That''s the plainest way to transfer data from your browser
    to a server. How does that work? Let''s see an example:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们不会详细介绍HTML，但我们会专门介绍HTML；我指的是`<form>`标签。事实是：每当你打开一个网页，有一些空白字段需要填写时，你很可能在填写HTML表单。这是从浏览器向服务器传输数据的最简单方式。这是如何工作的？让我们看一个例子：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, we have a full login form. Its beginning is defined
    by the `<form>` tag, which has two non-required attributes: `method` and `action`.
    The `method` attribute defines how you want your form data to be sent to the server
    when it is sent. Its value could be either `get` or `post`. You should use `get`,
    which is the default, only when the form data is small (a few hundred characters),
    not sensitive (it doesn''t matter if someone else sees it) and there are no files
    in the form. These requirements exist because when using `get`, all the form data
    will be appended to the current URL as encoded parameters before being sent. In
    our example, the chosen method is `post` because one of our input fields is a
    password and we don''t want other people looking into our password. A good use
    case for using the `get` method would be with search forms. For example:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，我们有一个完整的登录表单。它的开始由`<form>`标签定义，具有两个非必需的属性：`method`和`action`。`method`属性定义了当发送表单数据时你希望数据如何发送到服务器。它的值可以是`get`或`post`。只有当表单数据很小（几百个字符）、不敏感（如果其他人看到它并不重要）且表单中没有文件时，才应该使用`get`，这是默认值。这些要求存在的原因是，当使用`get`时，所有表单数据将被编码为参数附加到当前URL之后再发送。在我们的例子中，选择的方法是`post`，因为我们的输入字段之一是密码，我们不希望其他人查看我们的密码。使用`get`方法的一个很好的用例是搜索表单。例如：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In `example 2`, we have a simple search form. If we fill the `name` input with
    the search term `SearchItem` and hit *Enter*, the URL will look like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在`示例2`中，我们有一个简单的搜索表单。如果我们在`name`输入中填写搜索词`SearchItem`并点击*Enter*，URL将如下所示：
- en: '[http://mydomain.com/?search=SearchItem](http://mydomain.com/?search=SearchItem)'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://mydomain.com/?search=SearchItem](http://mydomain.com/?search=SearchItem)'
- en: The preceding URL would then be saved into the browser history and anyone with
    access to it would be able to see what the previous user was searching for. In
    the case of sensitive data, that's bad.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，前面的URL将保存到浏览器历史记录中，任何有权访问它的人都可以看到上一个用户在搜索什么。对于敏感数据来说，这是不好的。
- en: Anyway, back to *example 1*. The second attribute, `action`, is useful for telling
    the browser which URL should receive and respond to the form data. We used `'.'`
    as its value because we want the form data to be sent to the current URL.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，回到*示例1*。第二个属性`action`对于告诉浏览器应该接收和响应表单数据的URL非常有用。我们使用`'.'`作为它的值，因为我们希望表单数据被发送到当前URL。
- en: The next two lines are our input fields. Input fields are used to collect user
    data and, contrary to what the name may suggest, an input field may be an `input`,
    `textarea`, or `select` element. When using input fields, always remember to name
    them with the attribute `name` as it facilitates handling them in the Web application.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行是我们的输入字段。输入字段用于收集用户数据，与名称可能暗示的相反，输入字段可以是`input`、`textarea`或`select`元素。在使用输入字段时，始终记得使用属性`name`对它们进行命名，因为这有助于在Web应用程序中处理它们。
- en: In the third line we have a special input field, which does not necessarily
    have any data to be sent, the Submit input button. By default, a form will be
    sent if you press *Enter* while an `input` element has focus or when a Submit
    button is pressed. Our *example 1* is the latter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三行，我们有一个特殊的输入字段，它不一定有任何要发送的数据，即提交输入按钮。默认情况下，如果在`input`元素具有焦点时按下*Enter*，或者按下提交按钮，表单将被发送。我们的*示例1*是后者。
- en: Wow! Finally, our form is written and explained. For an extensive list of possible
    types for an input field, take a look at [http://www.w3schools.com/tags/tag_input.asp](http://www.w3schools.com/tags/tag_input.asp).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！终于，我们的表单已经编写和解释完毕。有关输入字段可能类型的详尽列表，请查看[http://www.w3schools.com/tags/tag_input.asp](http://www.w3schools.com/tags/tag_input.asp)。
- en: Handling forms
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理表单
- en: 'Now let''s see how to integrate our form from *example 1* with an application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看如何将*示例1*中的表单与应用程序集成：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the preceding example, we define a view called `login_view` that accepts
    `get` or `post` requests; when the request is `post` (we ignore the form if it
    was sent by a `get` request), we fetch the values for `username` and `passwd`;
    then we run a very simple validation and change the value of `msg` accordingly.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个名为`login_view`的视图，该视图接受`get`或`post`请求；当请求为`post`时（如果是由`get`请求发送的表单，则我们忽略该表单），我们获取`username`和`passwd`的值；然后我们运行一个非常简单的验证，并相应地更改`msg`的值。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'Beware: a view, in Flask, is not the same as a view in MVC. In Flask, a view
    is the component that receives a request and returns a response, which may be
    a function or a class.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：在Flask中，视图不同于MVC中的视图。在Flask中，视图是接收请求并返回响应的组件，可以是函数或类。
- en: Did you see the `request` variable we are handling in our example? That's a
    proxy to the current active `request` context. That's why `request.form` points
    to the sent form data.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 您看到我们在示例中处理的`request`变量了吗？这是当前活动`request`上下文的代理。这就是为什么`request.form`指向发送的表单数据。
- en: Now, what if you're receiving a parameter encoded in the URL? How will you get
    it, given that the request URL is `http://localhost:5000/?page=10`?
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您收到一个编码在URL中的参数，您将如何获取它，考虑到请求URL是`http://localhost:5000/?page=10`？
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding example is pretty common when paginating. Just as before, `request.args`
    is related to the current user request only. Easy!
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在分页时，前面的例子是非常常见的。与以前一样，`request.args`只与当前用户请求相关。很简单！
- en: So far, we have handled form validation pretty poorly with inline validation.
    No more! Let's try something fancier from now on.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们用内联验证处理表单验证非常糟糕。不再这样做了！让我们从现在开始尝试一些更花哨的东西。
- en: WTForms and you
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: WTForms和你
- en: WTForms ([https://github.com/wtforms/wtforms](https://github.com/wtforms/wtforms))
    is a standalone robust form handling library that allows you to generate HTML
    forms from form-like classes, implement fields and form validation, *and* include
    cross-source forgery protection (a nasty vulnerability that crackers may try to
    exploit in your Web applications). We certainly don't want that!
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: WTForms（[https://github.com/wtforms/wtforms](https://github.com/wtforms/wtforms)）是一个独立的强大的表单处理库，允许您从类似表单的类生成HTML表单，实现字段和表单验证，并包括跨源伪造保护（黑客可能尝试在您的Web应用程序中利用的一个恶意漏洞）。我们当然不希望发生这种情况！
- en: 'First, to install WTForms library, use the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要安装WTForms库，请使用以下命令：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now let''s write some forms. A WTForms form is a class that extends the `Form`
    class. As plain as that! Let''s create a login form that could be used with our
    previous login example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们编写一些表单。WTForms表单是扩展`Form`类的类。就是这么简单！让我们创建一个登录表单，可以与我们之前的登录示例一起使用：
- en: '[PRE5]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In the preceding code, we have a form with two fields, `username` and `passwd`,
    with no validation. It is just enough to build a form in a template, like this:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们有一个带有两个字段`username`和`passwd`的表单，没有验证。只需在模板中构建一个表单就足够了，就像这样：
- en: '[PRE6]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'As seen in the preceding code, you can iterate over the fields of a WTForms
    form and each field has a few useful attributes you can use to make your HTML
    look good, such as `label` and `errors`. `{{ field }}` will render a plain HTML
    input element for you. There are cases where you may want to set special attributes
    for the input element—for example, `required`, which tells your browser that the
    given field should not be submitted if empty. Call `field` as a function in order
    to achieve that, like so:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的代码所示，您可以迭代WTForms表单的字段，每个字段都有一些有用的属性，您可以使用这些属性使您的HTML看起来很好，比如`label`和`errors`。`{{
    field }}`将为您呈现一个普通的HTML输入元素。有些情况下，您可能希望为输入元素设置特殊属性，例如`required`，告诉浏览器如果为空，则不应提交给定字段。为了实现这一点，调用`field`作为一个函数，就像这样：
- en: '[PRE7]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: You could pass any desired argument, as `placeholder` or `alt`, in line with
    the example. Flask-Empty ([https://github.com/italomaia/flask-empty](https://github.com/italomaia/flask-empty))
    has a nice example within its macros.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以根据示例传递任何所需的参数，如`placeholder`或`alt`。Flask-Empty（[https://github.com/italomaia/flask-empty](https://github.com/italomaia/flask-empty)）在其宏中有一个很好的示例。
- en: WTForms uses a flag system in order to allow you to check when some validations
    are applied to a field. If a field has a "required" validation rule, a `required`
    flag would be set to true in the `fields.flags` attribute. But how does WTForms
    validation work?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: WTForms使用标志系统，以允许您检查何时对字段应用了一些验证。如果字段有一个“required”验证规则，`fields.flags`属性中的`required`标志将设置为true。但是WTForms验证是如何工作的呢？
- en: 'In Flask, a validator is a callable you add to your `validators` field, or
    a class method in the format `validate_<field>(form, field)`. It allows you to
    validate that the field data is as required or it raises a `ValidationError` explaining
    what went wrong. Let''s see how our nice login form example would look with some
    validation:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在Flask中，验证器是您添加到`validators`字段的可调用对象，或者是格式为`validate_<field>(form, field)`的类方法。它允许您验证字段数据是否符合要求，否则会引发`ValidationError`，解释出了什么问题。让我们看看我们漂亮的登录表单示例如何进行一些验证：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In the preceding code, we have a full form example, with validation, using classes,
    methods and functions as validators and a simple test. The first argument for
    each of our fields is the field label. The second argument is a list of validators
    you want run when the `form.validate` method is called (that's pretty much what
    `form.validate` does). Each field validator is run sequentially, raising a `ValidationError`
    (and stopping the validation chain call) if an error is found.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，我们有一个完整的表单示例，带有验证，使用类、方法和函数作为验证器以及一个简单的测试。我们的每个字段的第一个参数是字段标签。第二个参数是在调用`form.validate`方法时要运行的验证器列表（这基本上就是`form.validate`做的事情）。每个字段验证器都会按顺序运行，如果发现错误，则会引发`ValidationError`（并停止验证链调用）。
- en: Each validator receives the form and field as arguments and must do the validating
    *thing* with them. As seen with `validate_password`, which is called for the field
    `password` because of the naming convention. `field.data` holds the field input,
    so you can just validate that most of the time.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 每个验证器都接收表单和字段作为参数，并必须使用它们进行验证。如`validate_password`所示，它是因为命名约定而为字段`password`调用的。`field.data`保存字段输入，因此您通常可以只验证它。
- en: 'Let''s understand each validator:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们了解每个验证器：
- en: '`Length`: This validates that the input value length is within a given range
    (min, max).'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Length`：验证输入值的长度是否在给定范围内（最小、最大）。'
- en: '`InputRequired`: This validates that the field received a value, any value.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`InputRequired`：验证字段是否接收到值，任何值。'
- en: '`is_proper_username`: This validates that the field value matches a given regex.
    (There is also a built-in validator to match a regex to a given value, called
    **Regexp**. You should try it.)'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`is_proper_username`：验证字段值是否与给定的正则表达式匹配。（还有一个内置验证器，用于将正则表达式与给定值匹配，称为**Regexp**。您应该尝试一下。）'
- en: '`validate_password`: This validates that the field value matches a given group
    of regex rules.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`validate_password`：验证字段值是否符合给定的正则表达式规则组。'
- en: In our example test, you may have noticed the use of a special dictionary-like
    class called `MultiDict` from the `werkzeug` library. It is used because the `formdata`
    parameter, which may receive your `request.form` or `request.args`, must be a
    `multidict-type`. It pretty much means you can't use a plain dictionary here.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例测试中，您可能已经注意到了使用`werkzeug`库中称为`MultiDict`的特殊类似字典的类。它被使用是因为`formdata`参数，它可能接收您的`request.form`或`request.args`，必须是`multidict-type`。这基本上意味着您不能在这里使用普通字典。
- en: When `form.validate` is called, all the validators are called. First the field
    validators, then the `class` method field validators; `form.errors` is a dictionary
    populated with all the field errors found after validate is called. You can then
    iterate over it to show what you found in your templates, console, and so on.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`form.validate`时，将调用所有验证器。首先是字段验证器，然后是`class`方法字段验证器；`form.errors`是一个字典，其中包含在调用validate后找到的所有字段错误。然后您可以对其进行迭代，以在模板、控制台等中显示您找到的内容。
- en: Flask-WTF
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flask-WTF
- en: 'Flask uses extensions in order to integrate transparently with third party
    libraries. WTForms with Flask-WTF is a good example of that as we will soon see.
    And, by the way, a Flask extension is a piece of code that integrates its configuration,
    context, and usage with Flask in a predictable way. That means extension usage
    is pretty similar. Now make sure Flask-WTF is installed in your virtual environment
    before continuing:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Flask使用扩展以便与第三方库透明集成。WTForms与Flask-WTF是这样的一个很好的例子，我们很快就会看到。顺便说一句，Flask扩展是一段代码，以可预测的方式与Flask集成其配置、上下文和使用。这意味着扩展的使用方式非常相似。现在确保在继续之前在您的虚拟环境中安装了Flask-WTF：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From [http://flask-wtf.readthedocs.org/](http://flask-wtf.readthedocs.org/),
    the project website, we have the following list of features offered by Flask-WTF:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从[http://flask-wtf.readthedocs.org/](http://flask-wtf.readthedocs.org/)，项目网站，我们得到了Flask-WTF提供的以下功能列表：
- en: Integration with WTForms
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与WTForms集成
- en: Secure form with a CSRF token
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSRF令牌保护表单
- en: File upload that works with Flask-Uploads
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与Flask-Uploads一起工作的文件上传
- en: Global CSRF protection
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全局CSRF保护
- en: Recaptcha support
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Recaptcha支持
- en: Internationalization integration
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 国际化集成
- en: We'll see the first two features in this chapter while the third will be discussed
    in [Chapter 10](ch10.html "Chapter 10. What Now?"), *What Now?*. The last three
    features will not be covered in this book. We advise you to explore them as homework.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中看到前两个功能，而第三个将在[第10章](ch10.html "第10章。现在怎么办？")中讨论，*现在怎么办？*。最后三个功能将不在本书中涵盖。我们建议您将它们作为作业进行探索。
- en: Integration with WTForms
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与WTForms集成
- en: Flask-WTF uses a little trick regarding `request` in order to integrate. As
    `request` implements a proxy to your current request and request data, and it
    is available whenever you're inside a `request` context, the extension `Form`
    will just grab the `request.form` data by default, saving you some typing.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-WTF在集成时使用了关于`request`的小技巧。由于`request`实现了对当前请求和请求数据的代理，并且在`request`上下文中可用，扩展`Form`默认会获取`request.form`数据，节省了一些输入。
- en: 'Our `login_view` example could be rewritten taking into account what was discussed
    so far, like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`login_view`示例可以根据迄今为止讨论的内容进行重写，如下所示：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We could go even further, as we are, obviously, perfectionists:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以更进一步，因为我们显然是完美主义者：
- en: '[PRE11]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the template, exchange `{{ message }}` by:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，将`{{ message }}`替换为：
- en: '[PRE12]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`get_flashed_messages` is available in the template context by default and
    gives you all the flashed messages for the current user that have not yet been
    shown. We then cache it with `with`, check whether it is not empty, then iterate
    over it.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_flashed_messages`默认在模板上下文中可用，并为当前用户提供尚未显示的所有闪现消息。然后我们使用`with`缓存它，检查它是否不为空，然后对其进行迭代。'
- en: Tip
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Flashed messages are especially useful when redirecting, because they are not
    bound to the response context.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 闪现消息在重定向时特别有用，因为它们不受响应上下文的限制。
- en: Securing forms with a CSRF token
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用CSRF令牌保护表单
- en: '**Cross Site Request Forgery** (**CSRF**) happens when a site tries to exploit
    the trust another site has on your browser (given you''re the user). Basically,
    a site you''re visiting will try to get, or alter information of, a site you have
    already visited and authenticated. Imagine you''re visiting a website and that
    website has an image that loads a URL from another website you''ve already authenticated
    with; imagine that the given URL requests an action of the former website and
    that action changes something from your account—for example, its status is amended
    to inactive. Well, that''s a simple case of a CSRF attack. Another common case
    is when a JSONP request is sent. If the attacked site, the one you''re not visiting,
    accepts JSONP form substitution (JSONP is used for cross-domain requests) and
    does not have CRSF protection, well, then you''ll have an even nastier attack.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**跨站点请求伪造**（**CSRF**）发生在一个网站试图利用另一个网站对你的浏览器的信任（假设你是用户）时。基本上，你正在访问的网站会尝试获取或更改你已经访问并进行身份验证的网站的信息。想象一下，你正在访问一个网站，该网站有一张图片，加载了你已经进行身份验证的另一个网站的URL；想象一下，给定的URL请求了前一个网站的一个动作，并且该动作改变了你的账户的某些内容——例如，它的状态被修改为非活动状态。嗯，这就是CSRF攻击的一个简单案例。另一个常见的情况是发送JSONP请求。如果被攻击的网站，也就是你没有访问的那个网站，接受JSONP表单替换（JSONP用于跨域请求）并且没有CRSF保护，那么你将面临更加恶劣的攻击。'
- en: 'WTForms come with its own CSRF protection; Flask-WTF just glues the whole thing
    together with Flask, making your life easier. In order to have CSRF protection
    while using the extension, you need to have `secret_key` set, and that''s it:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: WTForms自带CSRF保护；Flask-WTF将整个过程与Flask粘合在一起，使你的生活更轻松。为了在使用该扩展时具有CSRF保护，你需要设置`secret_key`，就是这样：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, whenever you write a form that should have CSRF protection, just make
    sure to add the CSRF token to it, like this:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，每当你编写一个应该具有CSRF保护的表单时，只需确保向其中添加CSRF令牌，就像这样：
- en: '[PRE14]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: When the form is received, the CSRF token is checked against what is registered
    in the user session. If they match, the form's source is good. This is a safe
    approach because a website cannot read a cookie set by another website.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当表单被接收时，CSRF令牌会与用户会话中注册的内容进行检查。如果它们匹配，表单的来源就是安全的。这是一种安全的方法，因为一个网站无法读取另一个网站设置的cookie。
- en: 'In cases when you don''t want CSRF protection in a form, do not add the token.
    You will have to turn off the CSRF protection for the form if you wish to unprotect
    it, like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在不希望表单受到CSRF保护的情况下，不要添加令牌。如果希望取消对表单的保护，必须关闭表单的CSRF保护，就像这样：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You *may* need to unprotect a form in the case of search fields that use the
    `get` method but are also validated with a Form.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`get`方法但同时又使用表单进行验证的搜索字段的情况下，*可能*需要取消对表单的保护。
- en: Challenges
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 挑战
- en: 'Create a Web application that receives a name and then answers: `"Hello <NAME>"`.
    If the form is sent empty, an error message should be displayed. If the name given
    is "Chuck Norris", the answer should be "Roundhouse KICK!".'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Web应用程序，接收一个名字，然后回答：“你好，<NAME>”。如果表单为空发送，应显示错误消息。如果给定的名字是“查克·诺里斯”，答案应该是“旋风踢！”。
- en: Create a Web application that shows an image and asks the user what he sees.
    The application should then validate if the answer is correct. If it is not, show
    the user an error message. Otherwise, congratulate the user and show a new image.
    Use Flask-WTF.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Web应用程序，显示一张图片，并询问用户看到了什么。然后应用程序应验证答案是否正确。如果不正确，向用户显示错误消息。否则，祝贺用户并显示一张新图片。使用Flask-WTF。
- en: Create a calculator with the four operations. It should have all the numbers
    and operators for the user to click on. Make sure it looks like a calculator (because
    we are perfectionists!) and complains if the user tries something evil, such as
    dividing 0 by 0.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个具有四种运算的计算器。它应该有用户可以点击的所有数字和运算符。确保它看起来像一个计算器（因为我们是完美主义者！），并且在用户尝试一些恶意操作时进行投诉，比如将0除以0。
- en: Summary
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: So much learned... What can I say! No harm trying, right? Well, we have seen
    how to write HTML forms; read forms with Flask; write WTForms forms; validate
    form data with plain Python and form validators; and write custom validators.
    We also saw how to use Flask-WTF to write and validate our forms and how to protect
    our applications against CSRF attacks.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 学到了这么多...我能说什么呢！试试看也没什么坏处，对吧？嗯，我们已经学会了如何编写HTML表单；使用Flask读取表单；编写WTForms表单；使用纯Python和表单验证器验证表单数据；以及编写自定义验证器。我们还看到了如何使用Flask-WTF来编写和验证我们的表单，以及如何保护我们的应用程序免受CSRF攻击。
- en: In the next chapter, we'll look at how to store our Web application data in
    relational and non-relational databases using great, easy-to-use libraries and
    how to integrate them with Flask. A brief overview on databases will also take
    place to make for smoother knowledge absorption.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看看如何使用出色、易于使用的库将Web应用程序数据存储在关系型和非关系型数据库中，并如何将它们与Flask集成。还将进行数据库的简要概述，以便更顺畅地吸收知识。
