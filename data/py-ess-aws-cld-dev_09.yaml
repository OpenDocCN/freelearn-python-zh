- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Creating an API in AWS
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在AWS中创建API
- en: In this chapter, we are going to learn how to create an **application programming
    interface** (**API**) via **API Gateway**. API Gateway is an AWS service that
    allows you to create and maintain an API. With the API Gateway service, you don’t
    need to provision a server; AWS manages it in the backend. In addition to that,
    API Gateway helps you to monitor incoming and outgoing requests. Another advantage
    of API Gateway is to scale up your API services when there is a huge request from
    users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何通过API网关创建**应用程序编程接口**（**API**）。API网关是一个AWS服务，允许你创建和维护API。使用API网关服务，你不需要配置服务器；AWS在后台管理它。此外，API网关帮助你监控传入和传出的请求。API网关的另一个优点是在用户请求量巨大时扩展你的API服务。
- en: 'The chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: What is API Gateway?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是API网关？
- en: Creating an API using API Gateway
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用API网关创建API
- en: What is API Gateway?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是API网关？
- en: '**API Gateway** is an AWS service that is used to create, maintain, and publish
    an API. API Gateway supports multiple API protocols, such as **RESTful** (also
    known as the REST API) and **WebSocket**.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**API网关**是一个AWS服务，用于创建、维护和发布API。API网关支持多种API协议，如**RESTful**（也称为REST API）和**WebSocket**。'
- en: 'API Gateway is a single point of entry for the backend services. As you can
    see in the following architecture, API Gateway gets a request from a client and
    integrates the incoming request with microservices, databases, AWS Lambda, or
    another AWS service:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: API网关是后端服务的单一入口点。正如你在以下架构中可以看到的，API网关从客户端接收请求，并将传入的请求与微服务、数据库、AWS Lambda或其他AWS服务集成：
- en: '![](img/Figure_9.01_B19195.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_9.01_B19195.jpg)'
- en: Figure 9.1 – Architecture of API Gateway
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – API网关架构
- en: Now that we have a good idea of what API Gateway is, let’s have a look at its
    features.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对API网关有了很好的了解，让我们来看看它的功能。
- en: Features of API Gateway
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: API网关的功能
- en: 'The features of API Gateway are as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: API网关的功能如下：
- en: It supports different protocols, such as RESTful and WebSocket.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持不同的协议，例如RESTful和WebSocket。
- en: You can monitor incoming and outgoing API requests, which enhances the visibility
    of the service.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以监控传入和传出的API请求，这增强了服务的可见性。
- en: You can easily create and maintain the API. It can be created either in AWS
    Management Console or the AWS CLI.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以轻松创建和维护API。它可以在AWS管理控制台或AWS CLI中创建。
- en: Security is important for cloud services, as well as the API. You can create
    a key to enable secure access to the API. In addition to that, you can add an
    SSL certificate to verify the request.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于云服务以及API来说，安全性都很重要。你可以创建一个密钥来启用对API的安全访问。此外，你可以添加SSL证书来验证请求。
- en: It has built-in integration with AWS services. When you implement an API, you
    can easily integrate it with AWS services.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它与AWS服务内置集成。当你实现一个API时，你可以轻松地将其与AWS服务集成。
- en: It is a scalable service that adds more resources when you have more requests.
    For example, on Black Friday, there is more load on e-commerce websites. In these
    cases, API Gateway automatically scales your API requests. In this case, you can
    also define a **Cross-Origin Resource Sharing** (**CORS**) policy as a security
    feature that controls the HTTP request.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个可扩展的服务，当你有更多请求时，它会添加更多资源。例如，在黑色星期五，电子商务网站上有更多的负载。在这些情况下，API网关会自动扩展你的API请求。在这种情况下，你还可以定义一个**跨源资源共享**（**CORS**）策略作为安全功能，该策略控制HTTP请求。
- en: In this section, we have looked at the basic features of API Gateway, and now
    we will start to implement sample API applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了API网关的基本功能，现在我们将开始实现示例API应用程序。
- en: Creating an API using API Gateway
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用API网关创建API
- en: 'We are going to create a simple API that accepts a request from a client. The
    API accepts two numbers, sums up two numbers in a Lambda function, and returns
    the calculated values. AWS Lambda is going to be implemented via Python. You can
    see the high-level flow in the following architecture:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个简单的API，该API接受来自客户端的请求。API接受两个数字，在Lambda函数中将两个数字相加，并返回计算值。AWS Lambda将通过Python实现。你可以在以下架构中看到高级流程：
- en: '![](img/Figure_9.02_B19195.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_9.02_B19195.jpg)'
- en: Figure 9.2 – Data flow
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.2 – 数据流
- en: We are going to start with the Lambda function creation. After the Lambda function
    creation, API Gateway is going to be set up with Lambda integration.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从创建Lambda函数开始。在创建Lambda函数之后，API网关将与Lambda集成进行设置。
- en: 'Let’s create the Lambda function step by step:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地创建Lambda函数：
- en: 'Open the console and navigate to the **AWS** **Lambda** page:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并导航到 **AWS Lambda** 页面：
- en: '![](img/Figure_9.03_B19195.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.03_B19195](img/Figure_9.03_B19195.jpg)'
- en: Figure 9.3 – Lambda function
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3 – Lambda 函数
- en: 'Create a new Lambda function. Let’s name it `SumUpLambda`:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的 Lambda 函数。让我们称它为 `SumUpLambda`：
- en: '![](img/Figure_9.04_B19195.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.04_B19195](img/Figure_9.04_B19195.jpg)'
- en: Figure 9.4 – Creating a new Lambda function
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4 – 创建新的 Lambda 函数
- en: 'Click **Create function** and wait a few seconds while the function is created:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建函数** 并等待几秒钟，直到函数创建完成：
- en: '![](img/Figure_9.05_B19195.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.05_B19195](img/Figure_9.05_B19195.jpg)'
- en: Figure 9.5 – Clicking Create function
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5 – 点击创建函数
- en: 'A few seconds later, you will see the Lambda function has been created with
    the template code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 几秒钟后，你会看到已经使用模板代码创建了 Lambda 函数：
- en: '![](img/Figure_9.06_B19195.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.06_B19195](img/Figure_9.06_B19195.jpg)'
- en: Figure 9.6 – Lambda template
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6 – Lambda 模板
- en: 'Let’s create a Lambda function that sums up two values:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个求和两个值的 Lambda 函数：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This code snippet takes two numbers as parameters, such as `Number1` and `Number2`.
    The Lambda function calculates the sum of two values and returns a status code
    and the value of the sum. When we call this function from the API, it returns
    the sum value as well as `statusCode`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码片段接受两个参数，例如 `Number1` 和 `Number2`。Lambda 函数计算两个值的和，并返回状态码和求和的值。当我们从 API 调用此函数时，它返回求和值以及
    `statusCode`。
- en: 'Let’s paste this code block into the Lambda function:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 将此代码块粘贴到 Lambda 函数中：
- en: '![](img/Figure_9.07_B19195.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.07_B19195](img/Figure_9.07_B19195.jpg)'
- en: Figure 9.7 – Actual Lambda code
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.7 – 实际 Lambda 代码
- en: 'Now, let’s follow these steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们按照以下步骤进行：
- en: 'Click **Test**. A new panel opens in which Lambda asks for a test parameter:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **测试**。一个新的面板打开，其中 Lambda 请求一个测试参数：
- en: '![](img/Figure_9.08_B19195.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.08_B19195](img/Figure_9.08_B19195.jpg)'
- en: Figure 9.8 – Test event
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.8 – 测试事件
- en: 'As can be seen in the preceding figure, you can paste the following JSON to
    see whether the Lambda function is running properly before integrating with the
    API:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前图所示，你可以粘贴以下 JSON 来查看在集成 API 之前 Lambda 函数是否运行正常：
- en: '[PRE1]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Click **Save**, which is under the **Event** **JSON** panel:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **保存**，位于 **事件 JSON** 面板下：
- en: '![](img/Figure_9.09_B19195.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.09_B19195](img/Figure_9.09_B19195.jpg)'
- en: Figure 9.9 – Clicking on the Save button
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.9 – 点击保存按钮
- en: 'Deploy the changes by clicking **Deploy**:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击 **部署** 来部署更改：
- en: '![](img/Figure_9.10_B19195.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.10_B19195](img/Figure_9.10_B19195.jpg)'
- en: Figure 9.10 – Deploying Lambda
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.10 – 部署 Lambda
- en: After the Lambda deployment, we are going to integrate API Gateway with AWS
    Lambda. Lambda will be used as the backend for API Gateway.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 部署后，我们将集成 API Gateway 与 AWS Lambda。Lambda 将作为 API Gateway 的后端。
- en: 'Let’s create an API step by step:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们一步一步地创建一个 API：
- en: 'Open the console and search for `api gateway`:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开控制台并搜索 `api gateway`：
- en: '![](img/Figure_9.11_B19195.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.11_B19195](img/Figure_9.11_B19195.jpg)'
- en: Figure 9.11 – The console
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.11 – 控制台
- en: 'On the main screen, select **REST API**, and click **Build**:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主屏幕上，选择 **REST API**，然后点击 **构建**：
- en: '![](img/Figure_9.12_B19195.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.12_B19195](img/Figure_9.12_B19195.jpg)'
- en: Figure 9.12 – REST API
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.12 – REST API
- en: 'You will now see a new screen to be filled out. We will select **New API**
    in the **Create new API** section. Other options in this section allow you to
    create an example API or import a predefined API. In the **Settings** section,
    we will add the **API name** and **Description** details. In the **Endpoint Type**
    drop-down list, we will select **Regional**, which is used to create an API that
    is accessible from the same region:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你现在将看到一个需要填写的新屏幕。在 **创建新 API** 部分中，我们将选择 **新 API**。本节中的其他选项允许你创建示例 API 或导入预定义的
    API。在 **设置** 部分中，我们将添加 **API 名称** 和 **描述** 详细信息。在 **端点类型** 下拉列表中，我们将选择 **区域**，用于创建在同一区域可访问的
    API：
- en: '![](img/Figure_9.13_B19195.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.13_B19195](img/Figure_9.13_B19195.jpg)'
- en: Figure 9.13 – Form for API creation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.13 – API 创建表单
- en: 'Once you click **Create API** (as depicted in the preceding figure), you will
    be taken to a new page that allows you to define the details for a custom SumUp
    API:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你点击 **创建 API**（如前图所示），你将被带到一个新的页面，允许你定义自定义 SumUp API 的详细信息：
- en: '![](img/Figure_9.14_B19195.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.14_B19195](img/Figure_9.14_B19195.jpg)'
- en: Figure 9.14 – API form
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.14 – API 表单
- en: 'Now, we are going to define the API details. Click on the **Actions** dropdown
    and select **Create Method**:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将定义 API 的详细信息。点击 **操作** 下拉菜单并选择 **创建方法**：
- en: '![](img/Figure_9.15_B19195.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.15_B19195](img/Figure_9.15_B19195.jpg)'
- en: Figure 9.15 – Create Method
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.15 – 创建方法
- en: 'When we create a method, we select **POST** as the API type:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们创建一个方法时，我们选择 API 类型为 **POST**：
- en: '![](img/Figure_9.16_B19195.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.16_B19195](img/Figure_9.16_B19195.jpg)'
- en: Figure 9.16 – Selecting POST
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16 – 选择 POST
- en: 'While you implement an API, you can select API types. The following are the
    most used API types:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现API时，你可以选择API类型。以下是最常用的API类型：
- en: '**GET** is used to retrieve data from a source.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GET**用于从源检索数据。'
- en: '`SumUp` from Lambda.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 来自Lambda的`SumUp`。
- en: '**PUT** is used to update the data in a source.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PUT**用于更新源中的数据。'
- en: '**DELETE** is used to delete the data in a source.'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**DELETE**用于删除源中的数据。'
- en: 'When you select **POST**, you need to choose the integration type. For this
    example, we are going to select the **Lambda Function** integration type:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你选择**POST**时，你需要选择集成类型。在这个例子中，我们将选择**Lambda函数**集成类型：
- en: '![](img/Figure_9.17_B19195.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.17_B19195.jpg)'
- en: Figure 9.17 – Setting up the integration type
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.17 – 设置集成类型
- en: 'Select the **SumUpLambda** function that is implemented, and click **Save**,
    which is not depicted in the following figure but is situated at the bottom of
    the page:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择已实现的**SumUpLambda**函数，并点击**保存**，这在以下图中没有显示，但位于页面底部：
- en: '![](img/Figure_9.18_B19195.jpg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.18_B19195.jpg)'
- en: Figure 9.18 – Selecting Lambda
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.18 – 选择Lambda
- en: 'When you click **Save**, it asks for confirmation to allow the required permissions.
    Click **OK** and it will create the permissions:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你点击**保存**时，它会要求确认以允许所需的权限。点击**确定**，它将创建权限：
- en: '![](img/Figure_9.19_B19195.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.19_B19195.jpg)'
- en: Figure 9.19 – Permissions
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.19 – 权限
- en: 'After setting the permissions, you can see the data flow for the API:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 设置权限后，你可以看到API的数据流：
- en: '![](img/Figure_9.20_B19195.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.20_B19195.jpg)'
- en: Figure 9.20 – The API flow
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.20 – API流程
- en: 'Now, we need to add a CORS policy. CORS is a security policy that allows a
    particular origin (domain or port) to browse your resource. Let’s enable a CORS
    policy:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要添加一个CORS策略。CORS是一种安全策略，允许特定的源（域名或端口）浏览你的资源。让我们启用一个CORS策略：
- en: 'Click the **Actions** drop-down button to list the available actions, and then
    click **Enable CORS**:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**操作**下拉按钮以列出可用的操作，然后点击**启用CORS**：
- en: '![](img/Figure_9.21_B19195.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.21_B19195.jpg)'
- en: Figure 9.21 – List of actions
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.21 – 操作列表
- en: 'Fill out the form and click **Enable CORS and replace existing CORS headers**.
    You can retain the form details as is. The form defines the following:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写表格并点击**启用CORS并替换现有的CORS头**。你可以保留表单详情不变。该表单定义了以下内容：
- en: Which methods are allowed access to the API by selecting **Methods**
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**方法**允许哪些方法访问API
- en: Which request header is required via **Access-Control-Allow-Headers**
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过**Access-Control-Allow-Headers**需要哪些请求头
- en: Which origins are able to call the API via **Access-Control-Allow-Origin**
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些源能够通过**Access-Control-Allow-Origin**调用API
- en: 'Gateway response types by selecting the **DEFAULT 4XX** or **DEFAULT 5XX**
    port. You can see the list here: [https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.xhtml](https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.xhtml).'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过选择**默认4XX**或**默认5XX**端口来选择网关响应类型。你可以在这里看到列表：[https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.xhtml](https://docs.aws.amazon.com/apigateway/latest/developerguide/supported-gateway-response-types.xhtml)。
- en: '![](img/Figure_9.22_B19195.jpg)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.22_B19195.jpg)'
- en: Figure 9.22 – Enable CORS
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.22 – 启用CORS
- en: Congrats! You have successfully created the Lambda function and an API gateway.
    The next step is to test the API.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！你已经成功创建了Lambda函数和API网关。下一步是测试API。
- en: 'Let’s test the SumUp API:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试SumUp API：
- en: 'Click on the **Test** button in the flow:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击流程中的**测试**按钮：
- en: '![](img/Figure_9.23_B19195.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.23_B19195.jpg)'
- en: Figure 9.23 – Testing the API
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.23 – 测试API
- en: 'Enter the following code in the **Request Body** field to add a parameter for
    Lambda:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**请求体**字段中输入以下代码以添加Lambda的参数：
- en: '[PRE2]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Click **Test** and see the results:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**测试**并查看结果：
- en: '![](img/Figure_9.24_B19195.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.24_B19195.jpg)'
- en: Figure 9.24 – Adding a parameter
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.24 – 添加参数
- en: 'Here are the results:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是结果：
- en: '![](img/Figure_9.25_B19195.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_9.25_B19195.jpg)'
- en: Figure 9.25 – The result of the API response
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.25 – API响应的结果
- en: When you check the logs, you can see the results of the API response. As you
    can see, the sum of the values is `25`.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 当你检查日志时，你可以看到API响应的结果。正如你所看到的，值的总和是`25`。
- en: In this topic, we implemented an API that used Python in the Lambda code. As
    you saw, creating an API is an easy solution in AWS. This way, you can focus on
    the backend implementation instead of focusing on the infrastructure.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个主题中，我们实现了一个使用Python在Lambda代码中使用的API。正如你所看到的，在AWS中创建API是一个简单的解决方案。这样，你可以专注于后端实现，而不是关注基础设施。
- en: Summary
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to use the AWS API Gateway service and how to
    create an API gateway that has a backend service with Python Lambda. API Gateway
    is useful when you need to implement an API service with backend support via Python.
    It comes with scalability, logging, and monitoring advantages. In the next chapter,
    we will take a look at the basics of DynamoDB and NoSQL.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用 AWS API Gateway 服务以及如何创建一个后端服务为 Python Lambda 的 API 网关。当您需要通过
    Python 实现带有后端支持的 API 服务时，API Gateway 非常有用。它具有可扩展性、日志记录和监控优势。在下一章中，我们将探讨 DynamoDB
    和 NoSQL 的基础知识。
