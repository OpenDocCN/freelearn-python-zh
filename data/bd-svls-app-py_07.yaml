- en: Security in AWS Lambda
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS Lambda中的安全性
- en: We have learned how to build and configure serverless functions in AWS Lambda.
    We have learned how to scale them up using third-party tools. We have also had
    a close look at how microservices work and how to ensure security in them, while
    ensuring resilience and speed.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何在AWS Lambda中构建和配置无服务器函数。我们已经学会了如何使用第三方工具扩展它们。我们还仔细研究了微服务的工作原理以及如何在其中确保安全性，同时确保弹性和速度。
- en: In this chapter, we will understand security in the AWS environment, keeping
    in mind our Lambda functions. We will understand how services, such as AWS VPCs,
    security groups, and subnets work, with respect to Lambda functions.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将了解AWS环境中的安全性，牢记我们的Lambda函数。我们将了解AWS VPC、安全组和子网等服务与Lambda函数相关的工作原理。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖以下主题：
- en: Understanding AWS VPCs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解AWS VPCs
- en: Understanding subnets in VPCs
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解VPC中的子网
- en: Securing Lambda inside private subnets
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在私有子网中保护Lambda
- en: Controlling access to Lambda functions
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制对Lambda函数的访问
- en: Using STS inside Lambda for secure session-based execution
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Lambda中使用STS进行安全的基于会话的执行
- en: Understanding AWS Virtual Private Clouds (VPCs)
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解AWS虚拟私有云（VPC）
- en: 'In this section, we will understand AWS VPCs. **VPCs** are a very common component
    in the security layers of the AWS environment; they are isolated parts of the
    cloud where users can host their services and build their infrastructures. VPCs
    are the first layer of security. We will try to understand VPCs in the context
    of Lambda functions, in the form of bullet points, given here:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将了解AWS VPC。VPC是AWS环境安全层中非常常见的组件；它们是云中的隔离部分，用户可以在其中托管其服务并构建基础设施。VPC是安全的第一层。我们将尝试以项目符号的形式了解VPC在Lambda函数的上下文中的情况，如下所示：
- en: 'VPCs can be created and modified in the AWS''s VPC service dashboard, which
    looks like this:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VPC可以在AWS的VPC服务仪表板中创建和修改，看起来像这样：
- en: '![](img/3c3762c6-8790-4917-83b0-be9140b15f4d.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3c3762c6-8790-4917-83b0-be9140b15f4d.png)'
- en: 'Now, let''s quickly learn how to create a VPC of our own. For that, click on
    Create VPC. You will see a pop-up box which asks you to enter more meta information
    for your new VPC:'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们快速学习如何创建自己的VPC。为此，请单击“创建VPC”。您将看到一个弹出框，要求您为新VPC输入更多元信息：
- en: '![](img/05c269c0-509c-4726-884e-3d3d35591a58.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/05c269c0-509c-4726-884e-3d3d35591a58.png)'
- en: 'The Name tag box needs to have the name of the VPC. The IPv4 CIDR block is
    where you enter your IP range for classless inter-domain routing. Then, you can
    choose whether you want an IPv6 CIDR block or not. You can also select the Tenancy
    settings; this defines how your EC2 instances run within your VPC, and the resource
    sharing accordingly:'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 名称标签框需要有VPC的名称。IPv4 CIDR块是您为无类域间路由输入IP范围的地方。然后，您可以选择是否要IPv6 CIDR块。您还可以选择租户设置；这定义了您的EC2实例在VPC内的运行方式，以及相应的资源共享：
- en: '![](img/bfb7cd21-79f7-4ca8-b951-67ace4d70362.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bfb7cd21-79f7-4ca8-b951-67ace4d70362.png)'
- en: 'We have successfully created our VPC with the necessary settings and with the `Test-VPC`
    name. We can see this in our dashboard with all the corresponding meta settings:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已成功创建了具有必要设置和“Test-VPC”名称的VPC。我们可以在仪表板上看到所有相应的元设置：
- en: '![](img/8d2eafa5-fc67-4646-9bb3-ea6540b3ef71.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/8d2eafa5-fc67-4646-9bb3-ea6540b3ef71.png)'
- en: 'You can also see a summary of the VPC which includes the IPv4 settings, the
    **Network Access Control List** (**ACL**) settings, the **Dynamic Host Configuration
    Protocol** (**DHCP**) options, and also the DNS settings, all of which can also
    be configured later according to our needs. You can also see IPv4 CIDR blocks
    under the next CIDR Blocks tab:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以查看VPC的摘要，其中包括IPv4设置、网络访问控制列表（ACL）设置、动态主机配置协议（DHCP）选项以及DNS设置，所有这些都可以根据我们的需求稍后进行配置。您还可以在“下一个CIDR块”选项卡下看到IPv4
    CIDR块：
- en: '![](img/95d20d08-7ee2-46a2-9544-0a57761b849a.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/95d20d08-7ee2-46a2-9544-0a57761b849a.png)'
- en: 'We can also create VPC flow logs, which log traffic and data movements in and
    out of the VPC. This will promote better log management, ensuring security, and
    better monitoring. Currently, flow logs have not been set up:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以创建VPC流日志，记录进出VPC的流量和数据移动。这将促进更好的日志管理，确保安全性和更好的监控。目前，流日志尚未设置：
- en: '![](img/a5b7913b-6f53-4929-9df0-02f3822ad360.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a5b7913b-6f53-4929-9df0-02f3822ad360.png)'
- en: 'To create VPC flow logs, you can just click on the Create Flow Log button at
    the bottom. This will open up a flow log creation wizard where you can enter the
    details for the various settings, accordingly. The creation wizard looks like
    this:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建VPC流日志，您只需单击底部的“创建流日志”按钮。这将打开一个流日志创建向导，在其中您可以根据需要输入各种设置的详细信息。创建向导看起来像这样：
- en: '![](img/6ff42f25-88e5-4c11-8f2f-9951893653e0.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6ff42f25-88e5-4c11-8f2f-9951893653e0.png)'
- en: 'Once all the details have been entered, you can go ahead and click on the Create
    Flow Log option at the bottom, which will create the VPC flow log with the desired
    settings:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦输入了所有细节，您可以继续并点击底部的“创建流日志”选项，这将使用所需的设置创建VPC流日志：
- en: '![](img/f657e092-032b-4488-a685-aa60fbbb6414.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f657e092-032b-4488-a685-aa60fbbb6414.png)'
- en: 'Once created, you can see the newly created VPC flow log under the Flow Logs tab,
    as shown here:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建后，您可以在“流日志”选项卡下看到新创建的VPC流日志，如下所示：
- en: '![](img/c8f5cc05-8d7f-47d3-8e6f-1131ae27f94a.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8f5cc05-8d7f-47d3-8e6f-1131ae27f94a.png)'
- en: 'Now, let''s understand VPCs from AWS Lambda''s point of view. Just like any
    other AWS resource, Lambda functions can also be hosted inside VPCs. You can see
    that setting under the Network section of your AWS Lambda function. It looks like
    this:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们从AWS Lambda的角度了解VPCs。就像任何其他AWS资源一样，Lambda函数也可以托管在VPC内。您可以在AWS Lambda函数的“网络”部分中看到该设置。它看起来像这样：
- en: '![](img/f56b1d48-07c6-4632-a861-1dffa46dcfd4.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f56b1d48-07c6-4632-a861-1dffa46dcfd4.png)'
- en: 'From the drop-down list, you can select a VPC in which you want to host your
    Lambda function:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从下拉列表中，您可以选择要托管Lambda函数的VPC：
- en: '![](img/830ca55c-9173-4960-a2dd-b8ae008ab76e.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/830ca55c-9173-4960-a2dd-b8ae008ab76e.png)'
- en: 'Once you select a VPC, it will further ask you for details regarding subnets,
    security groups, and so on, as shown in the following screenshot. We will learn
    about them in the sections following this, so, we will configure the VPC for our
    Lambda function later:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择VPC后，它将进一步要求您输入有关子网、安全组等的详细信息，如下面的屏幕截图所示。我们将在接下来的部分中了解它们，因此，我们稍后将为Lambda函数配置VPC：
- en: '![](img/39fb6710-baff-401c-910a-e386c2af07e9.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39fb6710-baff-401c-910a-e386c2af07e9.png)'
- en: Understanding subnets in VPCs
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解VPC中的子网
- en: In this section, we will learn about and understand AWS subnets, which are subparts
    of AWS VPCs. VPCs can be further divided into multiple subnets. These subnets
    can either be public or private, depending on the security needs of your architecture.
    We will look at the concept of subnets from the point of view of AWS Lambda functions.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习和了解AWS子网，这些是AWS VPC的子部分。VPC可以进一步划分为多个子网。这些子网可以根据架构的安全需求分为公共或私有。我们将从AWS
    Lambda函数的角度来看子网的概念。
- en: 'We will perform the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将执行以下步骤：
- en: 'You can go to the Subnets menu via the VPC page itself. You need to click on
    the Subnets option under the Your VPCs option on the left:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以通过VPC页面本身转到子网菜单。您需要在左侧的“您的VPCs”选项下单击“子网”选项：
- en: '![](img/816d6fed-9461-4052-abf5-0ae138b16a8a.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/816d6fed-9461-4052-abf5-0ae138b16a8a.png)'
- en: 'This will take you to the subnets console, where you will see some already
    existing subnets. These are the default subnets for each availability zone in
    your region:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将带您进入子网控制台，在那里您将看到一些已经存在的子网。这些是您所在区域每个可用区的默认子网：
- en: '![](img/46cc3156-ead4-4571-a4cd-7338e9c1b7ec.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/46cc3156-ead4-4571-a4cd-7338e9c1b7ec.png)'
- en: 'Now, to create a new subnet, you need to click on the blue Create Subnet button
    on the top-left side of the console. In the creation wizard, you will be asked
    to enter the following details—the name of the subnet, the VPC you want to place
    it in, availability zones, and also preferred IPv4 CIDR blocks. I have placed
    this subnet inside the VPC we created in the previous section:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，要创建新的子网，您需要单击控制台左上角的蓝色“创建子网”按钮。在创建向导中，您将被要求输入以下详细信息-子网的名称、要放置的VPC、可用区以及首选的IPv4
    CIDR块。我已将此子网放在了我们在上一节中创建的VPC中：
- en: '![](img/e671fcdc-7f96-4d47-a99e-9d36d675418c.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e671fcdc-7f96-4d47-a99e-9d36d675418c.png)'
- en: 'When you click on the Yes, Create button on the bottom-right side of the creation
    wizard, the new subnet is created. You can see it listed in the list of your subnets
    on your console:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您在创建向导的右下方单击“是，创建”按钮时，新的子网将被创建。您可以在控制台上的子网列表中看到它：
- en: '![](img/39f11fcc-ef44-4aed-8850-169adf828115.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/39f11fcc-ef44-4aed-8850-169adf828115.png)'
- en: 'Now, we will fill in the security settings for our Lambda function with our
    VPC and subnets, which we have just created. Currently, this is what the Network
    setting for AWS Lambda looks like:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用刚刚创建的VPC和子网填写Lambda函数的安全设置。目前，AWS Lambda的网络设置如下：
- en: '![](img/ba7a0cd2-dc7a-4f33-bf3b-fac817f51bb1.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba7a0cd2-dc7a-4f33-bf3b-fac817f51bb1.png)'
- en: 'After adding in the required settings, which are the details of the VPC, subnet
    and security groups, the Network settings of our Lambda function will look like
    this:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在添加所需的设置后，即VPC、子网和安全组的详细信息后，我们的Lambda函数的网络设置将如下所示：
- en: '![](img/f566c9d4-69a5-4d3d-b0a1-8b77bc44dc2c.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f566c9d4-69a5-4d3d-b0a1-8b77bc44dc2c.png)'
- en: '...![](img/452cf8d2-5e41-489c-85d5-84ab3fae0f98.png)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '...![](img/452cf8d2-5e41-489c-85d5-84ab3fae0f98.png)'
- en: After setting up your network settings for your Lambda function, click on the
    orange Save button on the top-right of your Lambda console to save those settings
    to your Lambda function.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置Lambda函数的网络设置后，单击Lambda控制台右上角的橙色“保存”按钮，将这些设置保存到Lambda函数中。
- en: Securing Lambda inside private subnets
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在私有子网中保护Lambda
- en: '**Private subnets** are subnets that are not open to the internet. All of their
    traffic is routed via the public subnet in the same VPC using the concept of route
    tables. Let''s understand how to position our Lambda functions inside private
    subnets to add an extra layer of security:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**私有子网**是不对互联网开放的子网。它们的所有流量都通过同一VPC中的公共子网使用路由表的概念进行路由。让我们了解如何将我们的Lambda函数放在私有子网中以增加额外的安全层：'
- en: 'Subnets created in the AWS console are not private by default. Let''s evaluate
    and confirm this by going through the details of the subnet that we just created:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在AWS控制台中创建的子网默认情况下不是私有的。让我们通过查看刚刚创建的子网的详细信息来评估和确认这一点：
- en: '![](img/9aa312f6-84ce-4f26-a6ae-0bd9838d5fef.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aa312f6-84ce-4f26-a6ae-0bd9838d5fef.png)'
- en: 'Clicking on the Route Table tab will show us the routing settings of our subnet,
    which basically tells us what kind of traffic is allowed into it:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击“路由表”选项卡将显示子网的路由设置，基本上告诉我们允许进入子网的是什么类型的流量：
- en: '![](img/bcb498f4-e225-472c-998c-b38b7f44f5a8.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/bcb498f4-e225-472c-998c-b38b7f44f5a8.png)'
- en: 'In the Network ACL tab, you can see the network rules assigned for our subnet.
    Here, we can see that the subnet is open to all traffic (0.0.0.0/0). So, in order
    to make our subnet private, we need to fix this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在“网络ACL”选项卡中，您可以看到为我们的子网分配的网络规则。在这里，我们可以看到子网对所有流量（0.0.0.0/0）都是开放的。因此，为了使我们的子网变为私有，我们需要修复这个问题：
- en: '![](img/1f89e289-50ab-457d-80c5-6e55a940d56e.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1f89e289-50ab-457d-80c5-6e55a940d56e.png)'
- en: 'Go to the Network ACLs console by clicking on the link to the left side of
    your console. You will arrive at the following page:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过单击控制台左侧的链接，转到网络ACLs控制台。您将进入以下页面：
- en: '![](img/3f01d910-b977-4ef2-af40-71052ce5a097.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f01d910-b977-4ef2-af40-71052ce5a097.png)'
- en: 'Now, click on the blue Create Network ACL button to create a new ACL. Select
    our VPC and then enter a name for the ACL in the creation wizard:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，单击“创建网络ACL”蓝色按钮以创建新的ACL。在创建向导中选择我们的VPC，然后为ACL输入名称：
- en: '![](img/117d9fa7-b119-4019-bfe0-d5398ccfebb7.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/117d9fa7-b119-4019-bfe0-d5398ccfebb7.png)'
- en: 'Now, in the inbound rules of the new ACL, add in the following rule. In the
    Source section, add the IPv4 setting of any of your public subnets and click Save:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在新ACL的入站规则中，添加以下规则。在“来源”部分，添加任何公共子网的IPv4设置，然后单击保存：
- en: '![](img/eec95e92-7393-49bf-b225-ce3c956cca57.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/eec95e92-7393-49bf-b225-ce3c956cca57.png)'
- en: 'Now, replace the ACL of our current subnet with the new one that will make
    our subnet a private subnet:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，用新的ACL替换当前子网的ACL，使我们的子网成为私有子网：
- en: '![](img/4634f40c-262b-46f6-bf21-4da5234d2118.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4634f40c-262b-46f6-bf21-4da5234d2118.png)'
- en: Now, we have our Lambda function in a private subnet, making it more secure.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的Lambda函数位于私有子网中，使其更加安全。
- en: Controlling access to Lambda functions
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制对Lambda函数的访问
- en: 'We have gone through all the security settings needed to ensure that our Lambda
    functions and our serverless architectures are secure. So, an engineer working
    on serverless systems should keep the following points in mind while designing
    their infrastructure from a security point of view:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了确保Lambda函数和无服务器架构安全所需的所有安全设置。因此，从安全角度设计基于无服务器系统的工程师应该牢记以下几点：
- en: The VPC and the subnet settings can be added under the Network section of the
    Lambda function.
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VPC和子网设置可以添加到Lambda函数的“网络”部分。
- en: It is recommended that the Lambda function is placed across at least two subnets
    for fault tolerance purposes. However, this is not compulsory.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 建议将Lambda函数放置在至少两个子网中以实现容错目的。但这并非强制性要求。
- en: If you are placing your Lambda function inside a private subnet, you need to
    ensure that the private subnet is receiving the appropriate traffic from your
    public subnet(s) in that VPC. If not, then the Lambda function is essentially
    locked out.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您将Lambda函数放置在私有子网中，您需要确保私有子网从VPC中的公共子网中接收到适当的流量。如果没有，那么Lambda函数基本上被锁定了。
- en: Using STS inside Lambda for secure session-based execution
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Lambda中使用STS进行安全的基于会话的执行
- en: While accessing other AWS services and components from inside your Lambda functions,
    you can make use of **AWS's Simple Token Service** (**STS**) to ensure session-based
    access, which will essentially add an extra layer of security. As we have already
    discussed, and learned how to use, STS credentials in our code, we will skip over
    to the documentation links.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在Lambda函数内访问其他AWS服务和组件时，您可以利用**AWS的简单令牌服务**（**STS**）来确保基于会话的访问，这将在实质上增加一层额外的安全性。正如我们已经讨论过并学会如何在代码中使用STS凭据，我们将跳转到文档链接。
- en: The official documentation of AWS STS will help you understand how session-based
    access works: [https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html).
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: AWS STS的官方文档将帮助您了解会话访问的工作原理：[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html](https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_temp.html)。
- en: And this is the *Boto3 Python Documentation* for using STS credentials inside
    Python code: [http://boto3.readthedocs.io/en/latest/reference/services/sts.html](http://boto3.readthedocs.io/en/latest/reference/services/sts.html).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在Python代码中使用STS凭据的*Boto3 Python文档*：[http://boto3.readthedocs.io/en/latest/reference/services/sts.html](http://boto3.readthedocs.io/en/latest/reference/services/sts.html)。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we have learned how security works in Lambda functions in a
    deep-dive mode. We have understood how VPCs and subnets work in the AWS environment.
    We have learned to create a VPC and also created public and private subnets. This
    will give you a better understanding of how security works from the whole of the
    AWS perspective.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入学习了Lambda函数中的安全性工作原理。我们了解了VPC和子网在AWS环境中的工作原理。我们学会了创建VPC，并创建了公共和私有子网。这将让您更好地了解安全性是如何从整个AWS视角工作的。
- en: We have also learned how to place your Lambda functions inside the VPCs and
    the subnets we have created throughout this chapter. We understood how to handle
    and route traffic inside our VPCs and subnets.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学会了如何将Lambda函数放置在我们在本章中创建的VPC和子网中。我们了解了如何在VPC和子网内处理和路由流量。
- en: Finally, we also learned how to implement better security in our Python code
    using session-based access to other AWS components, thereby placing security in
    the control of the developer.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还学会了如何通过基于会话的访问实现Python代码的更好安全性，从而将安全性置于开发人员的控制之下。
- en: In the next chapter, you will learn about the **Serverless Application Model**
    (**SAM**) and how to write SAM models and deploy your Lambda applications through
    them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，您将学习**无服务器应用程序模型**（**SAM**）以及如何编写SAM模型并通过它们部署Lambda应用程序。
