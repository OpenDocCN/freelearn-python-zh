- en: Let's Move It, Move It
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们动起来
- en: In this chapter, you will learn how to control motors and servos. Using DC motors
    will help with projects where you need to control the wheels on a vehicle. The
    servos can help in your projects that need to control robotic arms to move around.
    Both of these devices will give us a way to create mechanical motion. Depending
    on what motion you are trying to create in your project, you may want to choose
    one over the other. How each of them functions, and where they are best suited,
    will be covered in the following sections.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何控制电机和舵机。使用直流电机将有助于需要控制车辆车轮的项目。舵机可以帮助您的项目控制机器人手臂的移动。这两种设备都将为我们提供创建机械运动的方式。根据您在项目中尝试创建的运动，您可能希望选择其中一种。它们各自的功能以及它们最适合的地方将在接下来的章节中介绍。
- en: By the end of this chapter, you will be able to use what you have learned to
    create projects that move around in all sorts of interesting ways. This opens
    up a whole new set of possibilities in terms of the types of projects that you
    will be able to build.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过本章结束时，您将能够利用所学知识创建各种有趣的项目。这将为您能够构建的项目类型开辟全新的可能性。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Tuning a servo to the correct pulse width
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调整舵机到正确的脉冲宽度
- en: Setting the actuation range of a servo
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置舵机的作用范围
- en: Setting the angle of a servo
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置舵机的角度
- en: Sweeping a servo
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扫描舵机
- en: Controlling a servo with buttons
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用按钮控制舵机
- en: Controlling multiple servos
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制多个舵机
- en: Turning on a DC motor
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开直流电机
- en: Setting the speed and direction of a DC motor
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置直流电机的速度和方向
- en: Controlling a DC motor with buttons
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用按钮控制直流电机
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code files from this chapter can be found in the `Chapter08` folder in the
    GitHub repository at [https://github.com/PacktPublishing/MicroPython-Cookbook](https://github.com/PacktPublishing/MicroPython-Cookbook).
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码文件可以在GitHub存储库的`Chapter08`文件夹中找到[https://github.com/PacktPublishing/MicroPython-Cookbook](https://github.com/PacktPublishing/MicroPython-Cookbook)。
- en: 'Many of the recipes in this chapter will make use of the Circuit Playground
    Express library, which will typically get imported in the first few lines of the
    script, with the following line of code:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的许多配方将使用Circuit Playground Express库，该库通常会在脚本的前几行导入，使用以下代码行：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This library will help us to interact with the buttons and switches that come
    with the board. There is another library that will be imported in many of the
    recipes in this chapter, using the following statement:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库将帮助我们与板上的按钮和开关进行交互。还有另一个库将在本章的许多配方中导入，使用以下语句：
- en: '[PRE1]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This library will help us to interact with the CRICKIT board, so that we can
    control the servos and DC motors.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库将帮助我们与CRICKIT板进行交互，以便我们可以控制舵机和直流电机。
- en: The recipes involving servos in this chapter expect the two servos to be connected
    to servo port 1 and servo port 2\. When connecting the servo cables, make sure
    the yellow wire is facing outward from the board.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中涉及舵机的配方期望两个舵机连接到舵机端口1和舵机端口2。连接舵机电缆时，请确保黄色电线朝向板外。
- en: The recipes in the chapter involving a DC motor expect the motor to be attached
    to driver 1 of the motor connections. The two wires can be attached to the two
    connectors in either direction. All that will happen is the direction of rotation
    will be flipped, depending on which way the wires are connected.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中涉及直流电机的配方期望电机连接的驱动器1上连接电机。两根电线可以连接到两个连接器中的任何一个方向。无论如何连接电线，旋转方向都会翻转，取决于电线连接的方式。
- en: DC motors
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直流电机
- en: 'DC motors take DC electricity and turn that energy into rotational motion.
    This is usually achieved through the use of electromagnets that drive the motion
    as their magnetic fields change. The following illustration shows how the internals
    of this type of motor appear:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机将直流电转换为旋转运动。通常是通过驱动运动的电磁体来实现的，因为它们的磁场发生变化。以下插图显示了这种类型电机的内部结构：
- en: '![](assets/c7e20f54-d436-4531-935c-a447b0e69f25.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c7e20f54-d436-4531-935c-a447b0e69f25.png)'
- en: 'Source: https://commons.wikimedia.org/wiki/File:Ejs_Open_Source_Direct_Current_Electrical_Motor_Model_Java_Applet_(_DC_Motor_)_80_degree_split_ring.gif'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：https://commons.wikimedia.org/wiki/File:Ejs_Open_Source_Direct_Current_Electrical_Motor_Model_Java_Applet_(_DC_Motor_)_80_degree_split_ring.gif
- en: DC motors work great in applications in which you need rotational motion at
    high speeds. They would be suitable for operating fans or wheels on a remote control
    car.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机在需要高速旋转运动的应用中表现出色。它们适用于操作遥控汽车上的风扇或车轮。
- en: Servos
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 舵机
- en: Servos are more complicated than DC motors and are more suitable for a situations
    in which you need more control over the exact position of something attached to
    the servo. A servo will usually contain a DC motor, gears, control circuits, and
    a sensor to detect the exact position of the servo. All these components come
    together in a device that lets you have more precise control over the exact angle
    that the servo is pointing at.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机比直流电机更复杂，更适合需要对连接到舵机的物体的确切位置进行更多控制的情况。舵机通常包含直流电机、齿轮、控制电路和传感器，用于检测舵机的确切位置。所有这些组件汇集在一起，形成一个设备，让您对舵机指向的确切角度有更精确的控制。
- en: 'The following image shows a disassembled servo in which you can see the DC
    motor, gears, and circuitry:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图像显示了一个拆卸的舵机，您可以看到其中的直流电机、齿轮和电路：
- en: '![](assets/56c95a65-31f3-4d92-b461-fef2e17f8338.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/56c95a65-31f3-4d92-b461-fef2e17f8338.png)'
- en: 'Source: https://commons.wikimedia.org/wiki/File:Exploded_Servo.jpg'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 来源：https://commons.wikimedia.org/wiki/File:Exploded_Servo.jpg
- en: Servos work great in applications in which you need exact control over the angle
    of a certain part; for example, where you need to control the angle of a robotic
    arm or the angle of a rudder on a boat.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机在需要对某个部件的角度进行精确控制的应用中表现出色；例如，需要控制机器人手臂的角度或船舶舵的角度。
- en: Adafruit CRICKIT
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Adafruit CRICKIT
- en: The Adafruit CRICKIT is a board that lets you control many different types of
    motors from a variety of hardware. Different CRICKIT models support the Raspberry
    Pi and the FeatherWing set of products.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'Adafruit CRICKIT是一个可以让您从各种硬件控制许多不同类型的电机的板。不同的CRICKIT型号支持树莓派和FeatherWing系列产品。 '
- en: 'In this chapter, we will be using the CRICKIT for Circuit Playground Express.
    The following image shows what the CRICKIT looks like before you attach the Circuit
    Playground Express:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用CRICKIT来控制Circuit Playground Express。以下图片显示了在连接Circuit Playground
    Express之前CRICKIT的样子：
- en: '![](assets/85d7a456-6976-4701-87f7-9b2d93851462.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/85d7a456-6976-4701-87f7-9b2d93851462.png)'
- en: Courtesy of adafruit.com
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: 'To connect these 2 devices together, you will require 6 hexagonal brass standoffs
    that will each be screwed into both devices with 12 screws. The following image
    shows what these standoffs and screws look like:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这两个设备连接在一起，您将需要6个六角黄铜支架，每个支架都将用12颗螺丝螺入两个设备。以下图片显示了这些支架和螺丝的样子：
- en: '![](assets/2e653d71-9c57-45b1-8bb8-c6cd11104b30.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e653d71-9c57-45b1-8bb8-c6cd11104b30.png)'
- en: Courtesy of adafruit.com
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: 'Once you have connected the two boards using these screws and standoffs, your
    two boards should look like the following image:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 连接这些螺丝和支架后，您的两个板应该看起来像下图所示：
- en: '![](assets/a01b9e38-edd4-4b3c-b7b4-00329a6e6fb8.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a01b9e38-edd4-4b3c-b7b4-00329a6e6fb8.png)'
- en: Courtesy of adafruit.com
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: 'Up to four separate servos can be attached to the board. Micro, mini, and standard
    servos are all supported. The servo''s three-pin connector should be connected
    to one of the available servo slots, as shown in the following image:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最多可以连接四个独立的舵机到板上。支持微型、迷你和标准舵机。舵机的三针连接器应连接到一个可用的舵机插槽，如下图所示：
- en: '![](assets/0823559f-3f26-4a54-9ad8-6c5b24c87980.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0823559f-3f26-4a54-9ad8-6c5b24c87980.png)'
- en: Courtesy of adafruit.com
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: 'Up to two DC motors can be attached to the board. Each motor will be connected
    to two pins. The pairs of pins for each of the two motor connections are shown
    in the following image:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 最多可以连接两个直流电机到板上。每个电机将连接到两个引脚。每个电机连接的引脚对在下图中显示：
- en: '![](assets/ec85cdb2-810f-47ab-a9e4-60f7cc8125cd.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec85cdb2-810f-47ab-a9e4-60f7cc8125cd.png)'
- en: Courtesy of adafruit.com
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: Once the two devices are connected, you can power each one on and connect the
    Circuit Playground Express to your computer using a USB cable, in the same way
    that we did in the previous chapters of this book. Once connected, you will need
    to flash the firmware with an image that has support for the CRICKIT hardware.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 连接两个设备后，您可以为每个设备供电，并使用USB电缆将Circuit Playground Express连接到计算机，方式与本书前几章相同。连接后，您需要使用支持CRICKIT硬件的固件刷新固件。
- en: The name of the UF2 file used in this chapter is for version 3.1.2 of CircuitPython
    that has CRICKIT support, and is called `adafruit-circuitpython-circuitplayground_express_crickit-3.1.2.uf2`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的UF2文件的版本是支持CRICKIT的CircuitPython 3.1.2版本，名为`adafruit-circuitpython-circuitplayground_express_crickit-3.1.2.uf2`。
- en: For details on how to flash the board with this firmware, please follow the
    instructions in [Chapter 1](1c277918-6daf-4a83-8a06-6012ceda9ac1.xhtml), *Getting
    Started with MicroPython*, regarding how to flash the microcontroller firmware.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 有关如何使用此固件刷新板的详细信息，请参阅[第1章](1c277918-6daf-4a83-8a06-6012ceda9ac1.xhtml)，*使用MicroPython入门*中有关如何刷新微控制器固件的说明。
- en: Where to buy
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 购买地址
- en: This chapter uses a number of components, which can all be purchased from the
    Adafruit online retailer.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用了许多组件，所有这些组件都可以从Adafruit在线零售商处购买。
- en: The Adafruit CRICKIT for Circuit Playground Express can be purchased directly
    from Adafruit ([https://www.adafruit.com/product/3093](https://www.adafruit.com/product/3093)).
    It can also be purchased from other online retailers, such as Pimoroni.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Adafruit CRICKIT for Circuit Playground Express可以直接从Adafruit购买（[https://www.adafruit.com/product/3093](https://www.adafruit.com/product/3093)）。也可以从其他在线零售商购买，如Pimoroni。
- en: The Circuit Playground Bolt-On Kit can be purchased directly from Adafruit ([https://www.adafruit.com/product/3816](https://www.adafruit.com/product/3816)).
    This kit includes the six hexagonal standoffs and 12 screws that are needed to
    attach the two boards together. The servo used in this chapter can be purchased
    directly from Adafruit ([https://www.adafruit.com/product/169](https://www.adafruit.com/product/169)).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Circuit Playground Bolt-On Kit可以直接从Adafruit购买（[https://www.adafruit.com/product/3816](https://www.adafruit.com/product/3816)）。该套件包括连接两个板所需的六个六角支架和12颗螺丝。本章使用的舵机可以直接从Adafruit购买（[https://www.adafruit.com/product/169](https://www.adafruit.com/product/169)）。
- en: The DC motor used in this chapter can be purchased directly from Adafruit ([https://www.adafruit.com/product/3777](https://www.adafruit.com/product/3777)).
    Adafruit also sells a number of optional wheel attachments, but none are required
    to follow along with the recipes in this chapter.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的直流电机可以直接从Adafruit购买（[https://www.adafruit.com/product/3777](https://www.adafruit.com/product/3777)）。Adafruit还出售许多可选的轮子附件，但在本章的示例中并不需要。
- en: The CRICKIT can be powered by a three-AA battery holder, which can be purchased
    directly from Adafruit ([https://www.adafruit.com/product/3842](https://www.adafruit.com/product/3842)).
    The benefit of this power supply, as compared to others, is its portability and
    low cost.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: CRICKIT可以通过一个三节AA电池盒供电，可以直接从Adafruit购买（[https://www.adafruit.com/product/3842](https://www.adafruit.com/product/3842)）。与其他电源相比，这种电源的好处在于便携和低成本。
- en: Tuning a servo to the correct pulse width
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调整舵机到正确的脉冲宽度
- en: Servos can have their arms rotated to specific angles by sending them different
    electrical pulses. The angle that the arm moves to will be controlled by the width
    of the electrical pulse. Before setting these angles, each servo must first be
    configured with the correct minimum and maximum width settings.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机可以通过发送不同的电脉冲来旋转其臂到特定角度。臂移动到的角度将由电脉冲的宽度控制。在设置这些角度之前，每个舵机必须首先配置正确的最小和最大宽度设置。
- en: This recipe will show you how to do that. This configuration will be required
    whenever you want to use servos in your projects.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本示例将向您展示如何做到这一点。每当您想在项目中使用舵机时，都需要进行此配置。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要访问Circuit Playground Express上的REPL来运行本示例中提供的代码。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重温一下本示例所需的步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE2]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'At this stage, we have imported the necessary libraries and have defined the
    minimum and maximum pulse width values we want for this specific set of servos.
    The following block of code will configure the servo connected to the first port
    with these settings:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，我们已经导入了必要的库，并定义了我们想要为这组特定舵机设置的最小和最大脉冲宽度值。以下代码块将使用这些设置配置连接到第一个端口的舵机：
- en: '[PRE3]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Run the next block of code to move the servo to the lowest angle:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行下一块代码将舵机移动到最低角度：
- en: '[PRE4]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The following block of code will move the arm to the middle position, exactly
    between the lowest and highest values:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将将臂移动到中间位置，即最低和最高值之间：
- en: '[PRE5]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Hold down your finger on touch pad A1 while running the next block of code:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行下一块代码时，按住手指在触摸板A1上：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The following code should be put into the `main.py` file, and, when executed,
    it will move servo 1 to the lowest angle for 3 seconds, and then move it to the
    middle range angle for 60 seconds:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应放入`main.py`文件中，当执行时，它将把舵机1移动到最低角度3秒，然后将其移动到中间范围角度60秒：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `crickit` object will be the way we can interact with all the servos and
    DC motors connected to the board. Each servo connection is numbered, so that you
    can control multiple servos through attributes on this single object. After saving
    the values for the minimum and maximum pulse widths in constants, we then apply
    these settings to the first servo motor by calling `set_pulse_width_range`.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`crickit`对象将是我们与连接到电路板的所有舵机和直流电机进行交互的方式。每个舵机连接都有编号，因此您可以通过这个单一对象的属性来控制多个舵机。在将最小和最大脉冲宽度的值保存为常量后，我们通过调用`set_pulse_width_range`将这些设置应用于第一个舵机电机。'
- en: We then set the value of the angle attribute on the first servo, which will
    move the servo into angle 0\. We pause for 3 seconds by calling the `sleep` method
    before changing the angle to 90, using the same angle attribute.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们设置第一个舵机的角度属性的值，这将使舵机移动到角度0。我们通过调用`sleep`方法暂停3秒，然后使用相同的角度属性将角度更改为90。
- en: There's more...
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Servo motors from different manufacturers will expect different settings for
    the minimum and maximum pulse widths. You can usually find the correct settings
    for a particular servo by checking the product's data sheet. The settings used
    in this recipe are specific to the servo models described at the start of the
    chapter. You can change these settings as required if you decide to use a different
    set of servos. The Python library for controlling the servos also lets you configure
    these settings for each servo. This lets you attach different servos with different
    settings at the same time by configuring each one separately.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 来自不同制造商的舵机电机将期望不同的最小和最大脉冲宽度设置。您通常可以通过查看产品的数据表来找到特定舵机的正确设置。本示例中使用的设置特定于本章开头描述的舵机型号。如果您决定使用不同的舵机组，可以根据需要更改这些设置。用于控制舵机的Python库还允许您为每个舵机配置这些设置。这样，您可以通过分别配置每个舵机，同时连接具有不同设置的不同舵机。
- en: The pulse widths are sometimes provided in milliseconds, and sometimes in microseconds.
    Just convert them to microseconds, as they are the units expected in this Python
    module. The servo used in this recipe was described as using 0.75 ms to 2.25 ms
    for its pulse width, which, when converted to microseconds, becomes 750 to 2,250.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 脉冲宽度有时以毫秒提供，有时以微秒提供。只需将它们转换为微秒，因为这是这个Python模块所期望的单位。本示例中使用的舵机被描述为使用0.75毫秒到2.25毫秒的脉冲宽度，转换为微秒后变为750到2,250。
- en: See also
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: An overview of the components found in servos can be found at [http://developer.wildernesslabs.co/Hardware/Reference/Peripherals/Servos/](http://developer.wildernesslabs.co/Hardware/Reference/Peripherals/Servos/).
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关舵机中发现的组件的概述可在[http://developer.wildernesslabs.co/Hardware/Reference/Peripherals/Servos/](http://developer.wildernesslabs.co/Hardware/Reference/Peripherals/Servos/)找到。
- en: An explanation of the inner workings of servos can be found at [https://www.pc-control.co.uk/servo_control.htm](https://www.pc-control.co.uk/servo_control.htm).
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关舵机内部工作原理的解释可在[https://www.pc-control.co.uk/servo_control.htm](https://www.pc-control.co.uk/servo_control.htm)找到。
- en: Setting the actuation range of a servo
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置舵机的作用范围
- en: Servos vary in the range of motion their arms have. For the angles, you make
    a request in your software to map correctly to the angles the servo actually moves
    in; you need to configure the servo with its actuation range. Once configured,
    you will be able to accurately move the arms connected to servos into their correct
    positions. This is an important step in configuring any project you plan to use
    servos in. If you don't do this, you will face a number of strange surprises where
    the servo arms keep moving to the wrong positions.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机的臂在其运动范围上有所不同。对于角度，您在软件中发出请求以正确映射到舵机实际移动的角度；您需要使用其作用范围配置舵机。一旦配置完成，您将能够准确地将连接到舵机的臂移动到其正确位置。这是配置您计划在其中使用舵机的任何项目中的重要步骤。如果不这样做，您将面临一些奇怪的惊喜，其中舵机臂会不断移动到错误的位置。
- en: Getting ready
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要访问Circuit Playground Express上的REPL来运行本示例中提供的代码。
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们重温一下本示例所需的步骤：
- en: 'Execute the next block of code in the REPL:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中执行下一块代码：
- en: '[PRE8]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The pulse widths are now configured for the servo. Execute the following block
    of code to move the servo to its lowest position:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在已配置了伺服的脉冲宽度。执行以下代码块将伺服移动到最低位置：
- en: '[PRE9]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Make note of the current position of the arm before running the next block
    of code. Run the next block of code to move the servo to the highest angle:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行下一个代码块之前，请记下臂的当前位置。运行下一个代码块将伺服移动到最高角度：
- en: '[PRE10]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Measure the angle between these two positions. You should find the angle to
    be 160 degrees. Run the next block of code to return the servo to angle 0 and
    configure the actuation range:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测量这两个位置之间的角度。您应该发现角度为160度。运行下一个代码块将伺服返回到0度角并配置执行范围：
- en: '[PRE11]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Run the next block of code, and the software angle and the real-world angle
    should both be 160 degrees:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行下一个代码块，软件角度和实际角度应该都是160度：
- en: '[PRE12]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The following code should be inserted into the `main.py` file:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应插入到`main.py`文件中：
- en: '[PRE13]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: When this script is executed, it will move servo 1 to the lowest angle for 3
    seconds, and then move it to an angle of 160 degrees for 60 seconds.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此脚本时，将伺服1移动到最低角度3秒，然后将其移动到160度角度60秒。
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first few lines of code will configure the pulse width settings for the
    servo. The angle will be set to 0 for 3 seconds before the actuation range is
    configured to the correct value for this specific servo as a value of 160 degrees.
    After this configuration, when the angle in the software is set as 160 degrees,
    the real-world movement should also be 160 degrees.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 前几行代码将配置伺服的脉冲宽度设置。在将执行范围配置为特定伺服的正确值（160度）之前，角度将设置为0，持续3秒。配置完成后，当软件中的角度设置为160度时，实际运动也应为160度。
- en: There's more...
  id: totrans-109
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Just as pulse widths vary between servos, so does the range of motion. Most
    servos won't give you a full 180 degrees of motion. One way to discover these
    settings is to not configure the actuation range, and then move the servo to 0
    degrees and 180 degrees in your software.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 就像脉冲宽度在伺服之间变化一样，运动范围也是如此。大多数伺服不会提供完整的180度运动。发现这些设置的一种方法是不配置执行范围，然后在软件中将伺服移动到0度和180度。
- en: 'You can then use a protractor to physically measure the angle moved by the
    servo. Once you have measured this value, you can then use this angle as the value
    for the actuation range. The following image shows the servo in this chapter being
    measured with a protractor at the lowest angle:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用量角器来物理测量伺服移动的角度。测量了这个值后，您可以将这个角度作为执行范围的值。以下图片显示了使用量角器测量本章中伺服的最低角度：
- en: '![](assets/1b83778d-0608-40c5-9646-16e51b8b2edc.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/1b83778d-0608-40c5-9646-16e51b8b2edc.png)'
- en: 'After the protractor has been put in place, the servo is moved to the highest
    angle. The following image shows the protractor measuring the angle as 160 degrees:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 放置量角器后，将伺服移动到最高角度。以下图片显示量角器测量角度为160度：
- en: '![](assets/5fd941b7-5863-4341-b671-6722501ab59f.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/5fd941b7-5863-4341-b671-6722501ab59f.png)'
- en: Protractors are the weapon of choice when you want to make accurate angle measurements
    in the real world.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想在现实世界中进行准确的角度测量时，量角器是最佳选择。
- en: See also
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: Some details on setting the actuation range can be found at [https://learn.adafruit.com/using-servos-with-circuitpython/circuitpython](https://learn.adafruit.com/using-servos-with-circuitpython/circuitpython).
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关设置执行范围的一些详细信息，请参阅[https://learn.adafruit.com/using-servos-with-circuitpython/circuitpython](https://learn.adafruit.com/using-servos-with-circuitpython/circuitpython)。
- en: A discussion of the range of motion of servos can be found at [https://learn.sparkfun.com/tutorials/hobby-servo-tutorial](https://learn.sparkfun.com/tutorials/hobby-servo-tutorial).
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关伺服运动范围的讨论，请参阅[https://learn.sparkfun.com/tutorials/hobby-servo-tutorial](https://learn.sparkfun.com/tutorials/hobby-servo-tutorial)。
- en: Setting the angle of a servo
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置伺服的角度
- en: Once you have a correctly configured servo, you will be able to move the servo
    arm to exact angle positions. This recipe will move a servo to a number of angles
    and show what happens when you try to move servos to angles beyond their allowed
    range of motion.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您正确配置了伺服，您将能够将伺服臂移动到精确的角度位置。本教程将移动伺服到多个角度，并展示当您尝试将伺服移动到超出其允许运动范围的角度时会发生什么。
- en: Once we have the power to move servos to specific angles, we can start incorporating
    them into our projects to control robotic arms or to move other servo attachments
    to specific positions.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有能力将伺服移动到特定角度，我们就可以开始将它们纳入我们的项目中，以控制机械臂或将其他伺服附件移动到特定位置。
- en: Getting ready
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL才能运行本教程中提供的代码。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个教程所需的步骤：
- en: 'Use the REPL to run the following lines of code:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REPL运行以下代码行：
- en: '[PRE14]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The servo should now be at the lowest angle. Execute the following block of
    code to move the servo to its highest position:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在伺服应该处于最低角度。执行以下代码块将伺服移动到最高位置：
- en: '[PRE15]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the following code to see what happens when you go past the maximum angle
    range:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码以查看当您超出最大角度范围时会发生什么：
- en: '[PRE16]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the following block of code to return the servo to angle 0 and configure
    the actuation range to 160 degrees:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块将伺服返回到0度角并将执行范围配置为160度：
- en: '[PRE17]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Run the following block of code to see that 180 degrees is now considered an
    angle beyond the servo''s range:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块，查看180度现在被认为是伺服的范围之外的角度：
- en: '[PRE18]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the following block of code, and the servo should move to its highest angle:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块，伺服应该移动到最高角度：
- en: '[PRE19]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The following code should be put into the `main.py` file, and, when executed,
    it will move the servo to angles of 0, 45, 90, and 160, with a three-second delay
    between each movement:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应放入`main.py`文件中，执行时将伺服移动到0、45、90和160度的角度，每次移动之间有3秒的延迟：
- en: '[PRE20]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first few lines of code will configure the pulse width settings and actuation
    range for the servo. Then, 4 different angles will be set on the servo. The angles
    are 0, 45, 90, and 160 degrees. After each angle is set, a delay of 3 seconds
    is applied by calling the `sleep` function on the time module.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的前几行将配置舵机的脉冲宽度设置和作用范围。然后，将在舵机上设置4个不同的角度。这些角度分别是0、45、90和160度。在设置每个角度之后，通过调用时间模块上的`sleep`函数应用3秒的延迟。
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we experimented to see what would happen when we tried to set
    the angles on the servo both when the actuation range had not been configured,
    and once it had been configured. The default setting for the actuation range is
    180 degrees. That is why, in all cases, a value of 190 degrees would be rejected.
    Once we configured the actuation range to 160, values such as 180 would, of course,
    be rejected, as they would be outside this range.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们试验了在配置作用范围之前和之后尝试设置舵机角度时会发生什么。作用范围的默认设置是180度。这就是为什么在所有情况下，190度的值都会被拒绝。一旦我们将作用范围配置为160，诸如180的值当然会被拒绝，因为它们超出了这个范围。
- en: It’s very helpful that the servo library has these checks, because if they weren’t
    performed, bugs in your software application that set servo angles outside of
    the correct range could damage your servo. Also, throwing a `ValueError` exception
    with a clear exception message makes it easier to debug applications that have
    these bugs in them.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 舵机库具有这些检查非常有帮助，因为如果不执行这些检查，设置舵机角度超出正确范围的软件应用程序中的错误可能会损坏您的舵机。此外，通过使用清晰的异常消息抛出`ValueError`异常，使得更容易调试这些错误的应用程序。
- en: See also
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: A project that controls the angles of servos using the CRICKIT can be found
    at [https://learn.adafruit.com/crickit-powered-owl-robot](https://learn.adafruit.com/crickit-powered-owl-robot).
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/crickit-powered-owl-robot](https://learn.adafruit.com/crickit-powered-owl-robot)找到使用CRICKIT控制舵机角度的项目。
- en: An example of creating motion with a servo and CircuitPython can be found at
    [https://learn.adafruit.com/hello-world-of-robotics-with-crickit](https://learn.adafruit.com/hello-world-of-robotics-with-crickit).
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关使用舵机和CircuitPython创建运动的示例，请访问[https://learn.adafruit.com/hello-world-of-robotics-with-crickit](https://learn.adafruit.com/hello-world-of-robotics-with-crickit)。
- en: Sweeping a servo
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扫描舵机
- en: In this recipe, you will learn how to create a script that continually moves
    a servo from the lowest to the highest angle and back again, in a sweeping motion.
    In some ways, the code is similar to the light animations that we have seen in
    previous chapters, as we will change the output of the board with time delays
    between each change to create an animated visual effect.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将学习如何创建一个脚本，不断地将舵机从最低角度移动到最高角度，然后再次返回，以扫描运动。在某些方面，这段代码类似于我们在前几章中看到的灯光动画，因为我们将改变板的输出，并在每次改变之间设置时间延迟，以创建动画视觉效果。
- en: In the case of servos, though, it is the attached arm that will become animated
    with a sweeping motion. The approach used in this recipe can be adapted to any
    number of projects in which you want some servo attachments to continually sweep
    from one position to another.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在舵机的情况下，动画效果将出现在连接的臂上，呈扫描运动。本示例中使用的方法可以适应任何想要一些舵机附件不断从一个位置扫到另一个位置的项目。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要访问Circuit Playground Express上的REPL来运行本示例中提供的代码。
- en: How to do it...
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个示例所需的步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码：
- en: '[PRE21]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'At this stage, the required Python libraries should be imported, and the different
    settings should be defined as constants for our script. Execute the following
    block of code to initialize the servo and move it to its lowest position:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个阶段，应该导入所需的Python库，并将不同的设置定义为我们脚本的常量。执行以下代码块来初始化舵机并将其移动到最低位置：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Run the following code to sweep the servo from angle `0` to `160`:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码，将舵机从角度`0`扫到`160`：
- en: '[PRE23]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Run the following code to sweep the servo from angle `160` to `0`:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码，将舵机从角度`160`扫到`0`：
- en: '[PRE24]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following code should be inserted into the `main.py` file, and, when executed,
    it will continually sweep the motor from angle `0` to `160`, and then back to
    `0`:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应该插入到`main.py`文件中，当执行时，它将不断地将电机从角度`0`扫到`160`，然后返回到`0`：
- en: '[PRE25]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: First, a function called `init` is defined, which expects the name of the servo
    to initialize as its first argument. When this function is called, it will set
    the minimum and maximum pulse widths, set the angle to 0, and set the actuation
    range. Next, a function called `sweep` is defined. This function expects the first
    argument to be the servo to control, and the second argument to be an integer
    with the value `1` or `-1`, indicating the direction of the sweep.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，定义了一个名为`init`的函数，它期望将要初始化的舵机的名称作为其第一个参数。当调用此函数时，它将设置最小和最大脉冲宽度，将角度设置为0，并设置作用范围。接下来，定义了一个名为`sweep`的函数。这个函数期望第一个参数是要控制的舵机，第二个参数是一个带有值`1`或`-1`的整数，表示扫描的方向。
- en: A value of `1` will make the the angle increase, while a value of `-1` will
    make the angle decrease. The first part of the sweep function will retrieve the
    current value of the servo's angle and type cast it to an integer and store it
    in a variable called `angle`. A loop is started, which will continue until the
    value of the angle has exceeded the allowed range of 0 to 160\. In each iteration
    of the loop, the current angle is printed, and then the angle is applied to the
    servo before a sleep is applied; then, the angle is changed by the defined step
    value.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 值为`1`将使角度增加，而值为`-1`将使角度减少。sweep函数的第一部分将检索舵机角度的当前值并将其强制转换为整数并存储在名为`angle`的变量中。然后启动一个循环，直到角度的值超出了0到160的允许范围。在循环的每次迭代中，都会打印当前角度，然后将角度应用于舵机，然后应用延迟；然后，角度将按照定义的步长值进行更改。
- en: The `main` function is then defined, which, when called, will initialize the
    servo and move it to angle 0\. Then, an infinite loop is started to perform two
    actions during each loop iteration. It will first call the sweep function to increase
    the angle from 0 to 160\. Then, it will call the sweep function again, but this
    time, to reduce the angle from 160 to 0.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 然后定义了`main`函数，当调用时，将初始化舵机并将其移动到角度0。然后，启动一个无限循环，在每次循环迭代期间执行两个操作。首先调用`sweep`函数来增加角度从0到160。然后再次调用`sweep`函数，但这次是将角度从160减少到0。
- en: There's more...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: As much as possible, no values are hardcoded in the `init` and `sweep` functions.
    Most of the values are provided as configurable constants set at the top of the
    script, or as arguments received as the function is called. This will make it
    much easier to tune the script for servos with other settings. You can also easily
    change the amount the angle changes during each `sweep` iteration and the speed
    at which the sweep is completed by increasing and lowering the values in these
    constants.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在`init`和`sweep`函数中尽可能不要硬编码任何值。大多数值都作为可配置的常量设置在脚本顶部，或者作为函数调用时接收的参数。这将使得调整脚本以适应其他设置的舵机变得更加容易。您还可以通过增加和降低这些常量中的值来轻松改变每次`sweep`迭代中角度变化的量以及完成扫描的速度。
- en: The program has also been broken into 3 different functions, in order to improve
    readability and encourage the reuse of different blocks of code into other projects.
    One of the interesting and relatively unique features of the Python programming
    language, which is fully supported in the MicroPython and CircuitPython editions,
    is the ability to chain comparison operations. This feature is used in the `sweep`
    function to check that the angle is between 0 and 160.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序还被分成了3个不同的函数，以提高可读性并鼓励将不同的代码块重用到其他项目中。Python编程语言的一个有趣且相对独特的特性是能够链式比较操作，这在MicroPython和CircuitPython版本中得到了充分支持。这个特性在`sweep`函数中用于检查角度是否在0到160之间。
- en: In other languages, you would usually have to express this using an `and` operator
    combined with two comparison operators. In Python, however, you can just chain
    the two comparison operators to achieve the same result in a more concise and
    readable way.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他语言中，您通常需要使用`and`运算符结合两个比较运算符来表达这一点。然而，在Python中，您可以简单地链式比较运算符以更简洁和可读的方式实现相同的结果。
- en: See also
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: Documentation describing how comparisons can be chained can be found at [https://docs.python.org/3/reference/expressions.html#comparisons](https://docs.python.org/3/reference/expressions.html#comparisons).
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何链式比较的文档可以在[https://docs.python.org/3/reference/expressions.html#comparisons](https://docs.python.org/3/reference/expressions.html#comparisons)找到。
- en: Documentation on the CRICKIT library can be found at [https://circuitpython.readthedocs.io/projects/crickit/en/latest/](https://circuitpython.readthedocs.io/projects/crickit/en/latest/).
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CRICKIT库的文档可以在[https://circuitpython.readthedocs.io/projects/crickit/en/latest/](https://circuitpython.readthedocs.io/projects/crickit/en/latest/)找到。
- en: Controlling servos with buttons
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮控制舵机
- en: In this recipe, you will learn how to use the two push buttons on the Circuit
    Playground Express to control the angle of a servo. The script in this recipe
    will increase the servo angle each time push button A is pressed, and will decrease
    the angle each time push button B is pressed. These types of scripts are very
    useful whenever you want to create a project where people can directly control
    servos using different input controls, such as push buttons.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，您将学习如何使用Circuit Playground Express上的两个按钮来控制舵机的角度。本食谱中的脚本将在按下按钮A时增加舵机角度，并在按下按钮B时减少角度。每当您想要创建一个项目，让人们可以直接使用不同的输入控件（如按钮）来控制舵机时，这些类型的脚本都非常有用。
- en: Getting ready
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本食谱中提供的代码。
- en: How to do it...
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个食谱所需的步骤：
- en: 'Execute the following block of code in the REPL:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中执行以下代码块：
- en: '[PRE26]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The initial imports are done, and we are ready to define our functions. The
    following block of code will define and call a function to initialize the servo:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始导入已完成，我们准备定义我们的函数。以下代码块将定义并调用一个初始化舵机的函数：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the following code to move the servo by 10 degrees and inspect the value
    of angle:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码将舵机移动10度并检查角度的值：
- en: '[PRE28]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Run the following code to move the servo again, by another 10 degrees:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码再次移动舵机，增加10度：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Run the following code to reduce the angle of the servo by 10 degrees:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码将减少舵机的角度10度：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following code should be inserted into the `main.py` file:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应插入到`main.py`文件中：
- en: '[PRE31]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The script, once executed, will move the servo to a lower or higher angle each
    time push buttons A and B are pressed.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦执行，该脚本将在按下按钮A和B时每次将舵机移动到较低或较高的角度。
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: After global constants and a servo initialization function are defined, we then
    continue to define two other functions. The `move` function accepts the servo,
    the current angle, and the movement direction as its three arguments. The expected
    new angle is then calculated based on the current angle step amount and the direction
    of movement. If this new angle is within the acceptable angle range, then its
    value is printed and applied to both the `servo` and the `angle` variable. Finally,
    the value of the `angle` variable is returned.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义全局常量和舵机初始化函数之后，我们继续定义另外两个函数。`move`函数接受舵机、当前角度和移动方向作为其三个参数。然后根据当前角度步进量和移动方向计算预期的新角度。如果这个新角度在可接受的角度范围内，则打印其值并应用于`servo`和`angle`变量。最后，返回`angle`变量的值。
- en: The `main` function that is defined and then called at the bottom of the script
    implements the main event loop. The `servo` variable is initialized and the `angle`
    variable is set to `0` before an infinite loop is started. During each iteration
    of the loop, if push button A is pressed, then the `move` function will be called
    to increase the servo angle. Then, push button B is checked, and, if it's pressed,
    the `move` function will be called to decrease the servo angle. Finally, a `sleep`
    function is applied at the end of each iteration of this loop.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本底部定义并调用的`main`函数实现了主事件循环。在初始化`servo`变量并将`angle`变量设置为`0`之后，开始了一个无限循环。在循环的每次迭代中，如果按下按钮A，则将调用`move`函数来增加舵机角度。然后，检查按钮B，如果按下，则调用`move`函数来减小舵机角度。最后，在此循环的每次迭代结束时应用`sleep`函数。
- en: There's more...
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This basic event loop allows us to react to user input by moving the servo in
    different directions. We can extend the logic of this script in many directions.
    We could reduce the step angle from 10 to 1, for example, to get very fine control
    of the servo and change the angle by one degree at a time. We could also reduce
    the delay to speed up the movement in reaction to each button press. We could
    take the base script and add code that controls the pixels, in addition to the
    servo angles, as you press each push button.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这个基本的事件循环允许我们通过将舵机移动到不同的方向来对用户输入做出反应。我们可以在许多方向上扩展此脚本的逻辑。例如，我们可以将步进角从10减少到1，以便非常精细地控制舵机，并每次改变一个度的角度。我们还可以减少延迟以加快对每次按钮按下的反应运动。我们可以拿基本脚本并添加控制像素的代码，除了舵机角度，当您按下每个按钮时。
- en: See also
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: A project that controls servos with push buttons can be found at [https://learn.adafruit.com/universal-marionette-with-crickit](https://learn.adafruit.com/universal-marionette-with-crickit).
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/universal-marionette-with-crickit](https://learn.adafruit.com/universal-marionette-with-crickit)找到使用按钮控制舵机的项目。
- en: The source code for the `servo` objects can be found at [https://github.com/adafruit/Adafruit_Circuitpython_Motor](https://github.com/adafruit/Adafruit_Circuitpython_Motor).
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`servo`对象的源代码可以在[https://github.com/adafruit/Adafruit_Circuitpython_Motor](https://github.com/adafruit/Adafruit_Circuitpython_Motor)找到。'
- en: Controlling multiple servos
  id: totrans-207
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制多个舵机
- en: In this recipe, you will learn how to combine the use of the push buttons and
    slide switch to control multiple servos. Essentially, we will use the push buttons
    to control the angle of a specific servo. We will then use the slide switch to
    select which of the two connected servos we want to control.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，您将学习如何结合使用按钮和滑动开关来控制多个舵机。基本上，我们将使用按钮来控制特定舵机的角度。然后，我们将使用滑动开关来选择我们想要控制的两个连接舵机中的哪一个。
- en: This recipe builds on some of the past recipes and adds additional data structures
    and controls to manage the additional logic that is required to control multiple
    servos. This recipe will be very useful whenever you need to find ways to control
    more than one servo at a time.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱建立在一些过去的食谱基础上，增加了额外的数据结构和控制，以管理控制多个舵机所需的额外逻辑。每当您需要找到控制多个舵机的方法时，这个食谱将非常有用。
- en: Getting ready
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行此食谱中呈现的代码。
- en: How to do it...
  id: totrans-212
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个食谱所需的步骤：
- en: 'Use the REPL to run the following lines of code:'
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REPL运行以下代码行：
- en: '[PRE32]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The initial imports are done, and we have defined the `init` function to help
    initialize the servos. The following block of code will set up some data structures
    that will keep track of our angles and servos:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 初始导入已完成，并且我们已经定义了`init`函数来帮助初始化舵机。以下代码块将设置一些数据结构，用于跟踪我们的角度和舵机：
- en: '[PRE33]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following block of code will initialize all the servos in our servos list:'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将初始化我们舵机列表中的所有舵机：
- en: '[PRE34]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Run the following code to set the switch variable, based on the slide switch
    position:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码以根据滑动开关位置设置开关变量：
- en: '[PRE35]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Run the following code to move the selected servo by 10 degrees:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码以将所选舵机移动10度：
- en: '[PRE36]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Run the following code to inspect the angle''s data structure before and after
    a call to the `move` function:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码以检查调用`move`函数之前和之后的角度数据结构：
- en: '[PRE37]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Change the slide switch position and run the following block of code to update
    the selected servo:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更改滑动开关位置并运行以下代码块以更新所选舵机：
- en: '[PRE38]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Run the following block of code to see how calling the `move` function moves
    the other servo:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块以查看调用`move`函数如何移动另一个舵机：
- en: '[PRE39]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The following code should be inserted into the `main.py` file:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应插入到`main.py`文件中：
- en: '[PRE40]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Executing this script will move different servos, depending on the position
    of the slide switch and the presses on the push buttons.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此脚本将移动不同的舵机，具体取决于滑动开关的位置和按钮的按压。
- en: How it works...
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: After global constants and a servo initialization function are defined, we will
    then continue to define two other functions. The `move` function follows the same
    structure that you saw in the previous recipe. The `main` function, however, has
    been expanded to have additional data structures and logic to handle dealing with
    multiple servos and the slide switch.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在定义全局常量和舵机初始化函数之后，我们将继续定义另外两个函数。`move`函数遵循了您在上一个示例中看到的相同结构。但是，`main`函数已扩展为具有处理多个舵机和滑动开关的附加数据结构和逻辑。
- en: In the `main` function, a list called `servos` is created to point to the two
    servos to be controlled. A list called `angles` will keep track of the angles
    for each servo. Each servo is then initialized before entering into an infinite
    loop.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数中，创建了一个名为`servos`的列表，指向要控制的两个舵机。一个名为`angles`的列表将跟踪每个舵机的角度。然后初始化每个舵机，然后进入无限循环。
- en: During each loop iteration, the value of the switch is converted from a Boolean
    value to the integer value 0 or 1\. This will allow us to switch control between
    the two servos. Then, depending on whether push button A or B is pressed, the
    `move` function is called, provided with the correct `servo` object and angle.
    Finally, `sleep` is applied at the end of each loop.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次循环迭代期间，开关的值将从布尔值转换为整数值0或1。这将允许我们在两个舵机之间切换控制。然后，根据按下按钮A还是B，将调用`move`函数，并提供正确的`servo`对象和角度。最后，在每个循环结束时应用`sleep`。
- en: There's more...
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we have combined three input controls and two output servos
    in a way that makes interacting with the board a natural process. Part of the
    reason for this is that different physical input controls lend themselves to be
    mapped to different logical controls.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们已经以一种使与板交互成为自然过程的方式将三个输入控件和两个输出舵机组合在一起。部分原因是不同的物理输入控件适合映射到不同的逻辑控件。
- en: A slide switch is ideal for switching between two options, so it makes sense
    to use a slide switch when selecting between two servos. Push buttons work well
    when you want to repeatedly increase or reduce a value through repeated button
    presses.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 滑动开关非常适合在两个选项之间切换，因此在选择两个舵机时使用滑动开关是合理的。当您希望通过重复按按钮来重复增加或减少值时，按钮可以很好地工作。
- en: See also
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: Examples of interacting with the slide switch can be found at [https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/slide-switch](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/slide-switch).
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/slide-switch](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/slide-switch)找到与滑动开关交互的示例。
- en: A number of Adafruit CRICKIT-related components can be found at [https://www.adafruit.com/category/972](https://www.adafruit.com/category/972).
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://www.adafruit.com/category/972](https://www.adafruit.com/category/972)找到一些与Adafruit
    CRICKIT相关的组件。
- en: Turning on a DC motor
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开直流电机
- en: In this recipe, you will learn how to control a DC motor using the Circuit Playground
    Express and CRICKIT board. DC motors are simpler to interact with than servos,
    since they don't need any initial configuration. This recipe will give you the
    basic skills required to turn DC motors on and off for your projects.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，您将学习如何使用Circuit Playground Express和CRICKIT板控制直流电机。与舵机相比，直流电机更容易交互，因为它们不需要任何初始配置。这个示例将为您提供打开和关闭直流电机所需的基本技能。
- en: Getting ready
  id: totrans-246
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本示例中提供的代码。
- en: How to do it...
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看完成此示例所需的步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE41]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The DC motor connected to the board should now start rotating at full speed.
    Run the following block of code to stop the DC motor from rotating:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 连接到板上的直流电机现在应该以全速旋转。运行以下代码块以停止直流电机的旋转：
- en: '[PRE42]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The following block of code will stop and start the motor with a one-second
    delay:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将停止并启动电机，并延迟一秒：
- en: '[PRE43]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following code should be inserted into the `main.py` file:'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应插入到`main.py`文件中：
- en: '[PRE44]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: This script, when executed, will start an infinite loop that keeps starting
    and stopping the motor.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行此脚本时，将启动一个无限循环，不断启动和停止电机。
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: DC motors differ from servos, and therefore, they require less code and interaction
    to get them moving. After the library imports, an infinite loop is started.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机与舵机不同，因此，它们需要更少的代码和交互来使它们运动。在库导入之后，将启动一个无限循环。
- en: In the first line of the loop, the `dc_motor_1` attribute on the `crickit` object
    is accessed. This object will let us interact with any DC motors connected to
    the first motor connection on the board. The `dc_motor_1` exposes an attribute
    called `throttle` that we can use to turn the motor on and off. If we set the
    value to `1`, the motor starts, and a value of `0` switches off the motor.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环的第一行，访问了`crickit`对象上的`dc_motor_1`属性。这个对象将让我们与连接到板上第一个电机连接的任何直流电机进行交互。`dc_motor_1`公开了一个名为`throttle`的属性，我们可以用它来打开和关闭电机。如果我们将值设置为`1`，电机就会启动，值为`0`则关闭电机。
- en: In this way, the throttle is first set to `1` to turn the motor on; a `1` second
    sleep is applied before the motor is turned off, and another sleep of `1` second
    is applied. The loop then starts again, repeating the process.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先将油门设置为`1`以打开电机；然后应用`1`秒的延迟，然后关闭电机，并再次应用`1`秒的延迟。然后循环重新开始，重复这个过程。
- en: There's more...
  id: totrans-263
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: DC motors are different than the servos in a number of ways, as demonstrated
    in this recipe. It is true that they are easier to get started with than servos,
    since they don't need any initial configuration. On the flip side, however, they
    don't provide any precise control of the exact position you’d like to put the
    motor in.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 直流电机在许多方面与舵机不同，正如本教程所示。它们确实比舵机更容易入门，因为它们不需要任何初始配置。然而，相反，它们不提供对您想要将电机放置在的确切位置的精确控制。
- en: There are, of course, things that DC motors are capable of doing that servos
    can't, such as a complete 360-degree rotational motion.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，直流电机能够做到舵机无法做到的事情，比如完全360度的旋转运动。
- en: See also
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: Documentation on using DC motors with the CRICKIT board can be found at [https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/circuitpython-dc-motors](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/circuitpython-dc-motors).
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/circuitpython-dc-motors](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/circuitpython-dc-motors)找到使用CRICKIT板与直流电机的文档。
- en: A number of chassis that can be used to house the DC motors can be found at
    [https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/recommended-chassis](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/recommended-chassis).
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/recommended-chassis](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/recommended-chassis)找到可用于安装直流电机的底盘。
- en: Setting the speed and direction of a DC motor
  id: totrans-270
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置直流电机的速度和方向
- en: In this recipe, you will learn how to control both the speed and the rotational
    direction of a specific DC motor. You will see that providing a positive or negative
    value to the throttle will let us control whether the motor will turn clockwise
    or counterclockwise. We can also provide fractional values to the throttle to
    control the power the motor is run at.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您将学习如何控制特定直流电机的速度和旋转方向。您将看到，向油门提供正值或负值将让我们控制电机是顺时针还是逆时针旋转。我们还可以向油门提供小数值，以控制电机的运行功率。
- en: When you use DC motors to control wheels on a MicroPython-powered, computer-controlled
    vehicle, the techniques in this recipe will be very useful. They will let you
    speed the car up or slow it down. You can also use them to make the car go in
    reverse or come to a full stop.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用直流电机控制MicroPython驱动的计算机控制车辆上的车轮时，本教程中的技术将非常有用。它们将让您加速或减速汽车。您还可以使用它们使汽车倒车或完全停止。
- en: Getting ready
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL，以运行本教程中提供的代码。
- en: How to do it....
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做....
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个教程所需的步骤：
- en: 'Execute the following block of code in the REPL:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中执行以下代码块：
- en: '[PRE45]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The DC motor will now run at 50% of its full speed. The following line of code
    will run the motor at a quarter of its full speed:'
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直流电机现在将以其全速的50%运行。以下代码将以其全速的四分之一运行电机：
- en: '[PRE46]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The following block of code will move the motors in the opposite direction,
    at full speed:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将以全速将电机移动到相反的方向：
- en: '[PRE47]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Run the following block of code to stop the motor:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块以停止电机：
- en: '[PRE48]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'When executed, the following block of code will define and call a function
    that will change the speed and direction of the motor from one direction to the
    opposite direction:'
  id: totrans-285
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码块时，将定义并调用一个函数，该函数将改变电机的速度和方向，从一个方向到相反的方向：
- en: '[PRE49]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'The following code should be inserted into the `main.py` file:'
  id: totrans-287
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应插入到`main.py`文件中：
- en: '[PRE50]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This script, when executed, will move the motor from one direction to the other,
    over and over again.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 执行此脚本将使电机一次又一次地从一个方向移动到另一个方向。
- en: How it works...
  id: totrans-290
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `change_throttle` function is defined, which will perform the bulk of the
    work in this recipe. It expects to receive the motor to control, the starting
    value for the throttle, and finally, the amount the throttle should be changed
    during each iteration. The function will initialize the `throttle` variable to
    the specified start value.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了`change_throttle`函数，它将在本教程中执行大部分工作。它期望接收要控制的电机、油门的起始值，最后是每次迭代期间油门应该改变的量。该函数将初始化`throttle`变量为指定的起始值。
- en: Then, a `for` loop will be started that will go from the lowest to the highest
    value of the throttle. It first prints the current throttle, and then applies
    the value of the `throttle` variable to the motor. The throttle is incremented
    and rounded to one decimal place. A delay is then applied before the next iteration.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将启动一个`for`循环，该循环将从油门的最低值到最高值。它首先打印当前油门，然后将`throttle`变量的值应用于电机。然后将油门增加并四舍五入到小数点后一位。然后应用延迟，然后进行下一次迭代。
- en: The `main` function will enter into an infinite loop that calls the `change_throttle`
    function twice during each iteration. The first call will move the throttle value
    from `-1.0` to `1.0`, in increments of `0.1`. The second call will move the throttle
    value from `1.0` to `-1.0`, in increments of `-0.1`.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`main`函数将进入一个无限循环，每次迭代调用`change_throttle`函数两次。第一次调用将油门值从`-1.0`移动到`1.0`，以`0.1`的增量。第二次调用将油门值从`1.0`移动到`-1.0`，以`-0.1`的增量。'
- en: There's more...
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe can be used to demonstrate running the motors at different speeds
    and different directions. It creates an almost visual animation, where you can
    see the motors slowing down and speeding up. You can see them moving at maximum
    speed in one direction, and then slowing down to move to the maximum speed in
    the other direction.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 此教程可用于演示以不同速度和不同方向运行电机。它创建了一个几乎可视化的动画，您可以看到电机减速和加速。您可以看到它们以一个方向以最大速度运行，然后减速以在另一个方向以最大速度运行。
- en: There are all sorts of creative experiments you can do to extend this recipe
    to new functionality. You could, for example, attach two wheels to the DC motor
    to make it move like a remote control car. You could configure the light sensor
    to react to a flashlight by
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 有各种各样的创意实验可以扩展这个功能。例如，你可以将两个车轮连接到直流电机上，使其像遥控汽车一样移动。你可以配置光传感器以对手电筒做出反应。
- en: speeding up the motor. Or, you could attach something else to the DC motor that
    turned based on a certain schedule. You could control the timing of when the motor
    is turned on, using the time module used in this recipe.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以将其他东西连接到直流电机上，根据一定的时间表转动。你可以控制电机启动的时间，使用这个配方中使用的时间模块。
- en: See also
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: A project that uses both servos and DC motors with the CRICKIT board can be
    found at [https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/bubble-bot](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/bubble-bot).
  id: totrans-300
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/bubble-bot](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/bubble-bot)找到一个使用CRICKIT板和舵机和直流电机的项目。
- en: Details on how to wire and control DC motors with the CRICKIT board can be found
    at [https://learn.adafruit.com/make-it-move-with-crickit/use-a-continuous-dc-motor-now](https://learn.adafruit.com/make-it-move-with-crickit/use-a-continuous-dc-motor-now).
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关如何使用CRICKIT板连接和控制直流电机的详细信息，请访问[https://learn.adafruit.com/make-it-move-with-crickit/use-a-continuous-dc-motor-now](https://learn.adafruit.com/make-it-move-with-crickit/use-a-continuous-dc-motor-now)。
- en: Controlling a DC motor with buttons
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用按钮控制直流电机
- en: In this recipe, we will use push buttons to increase and decrease the speed
    of the DC motor. We can use the same script to change the direction of rotation
    with the push buttons. Essentially, one push button will make the motor increase
    speed in one direction, and the other push button will make the motor move more
    in the other direction. In this way, we can use the pair of push buttons to set
    a range of speeds in either direction and to bring the motor to a full stop.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将使用按钮来增加和减少直流电机的速度。我们可以使用相同的脚本来使用按钮改变旋转方向。基本上，一个按钮会使电机在一个方向上增加速度，另一个按钮会使电机在另一个方向上移动更多。这样，我们可以使用一对按钮来设置任一方向的一系列速度，并将电机完全停止。
- en: As the script is run, the current speed and direction will be printed to the
    screen. This recipe can be useful in any project in which you want to have user
    input translated into motion. You could, for example, create a project in which
    you attach a pulley to a DC motor and use the push buttons to raise and lower
    the pulley.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 当脚本运行时，当前速度和方向将打印到屏幕上。这个配方可以在任何需要将用户输入转换为运动的项目中有用。例如，你可以创建一个项目，将滑轮连接到直流电机上，并使用按钮来提升和降低滑轮。
- en: Getting ready
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要访问Circuit Playground Express上的REPL来运行本配方中提供的代码。
- en: How to do it...
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Let''s go over the steps required for this recipe:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这个配方所需的步骤：
- en: 'Use the REPL to run the following lines of code:'
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用REPL运行以下代码行：
- en: '[PRE51]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The DC motor speed is set at `0` throttle. The following block of code will
    define a `move` function and call it three times, with parameters to increase
    the speed to 30% strength:'
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 直流电机速度设置为`0`油门。以下代码块将定义一个`move`函数，并调用它三次，参数是将速度增加到30%强度：
- en: '[PRE52]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The following block of code will call the `move` function three times, to reduce
    the speed until the motor comes to a full stop:'
  id: totrans-313
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将调用`move`函数三次，以减速直到电机完全停止：
- en: '[PRE53]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The following block of code will call the `move` function three more times,
    in the negative direction, to set the motor to 30% strength in the opposite direction:'
  id: totrans-315
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将调用`move`函数三次，以负方向移动，将电机设置为30%的强度，朝相反方向：
- en: '[PRE54]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'The following block of code will call the `move` function three times in a
    direction that takes the motor from the opposite direction down to a full stop:'
  id: totrans-317
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块将调用`move`函数三次，以一个方向将电机从相反方向减速到完全停止：
- en: '[PRE55]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The following code should be inserted into the `main.py` file, and, when executed,
    it will move the motor from one direction to the other, in response to presses
    on the push buttons:'
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应该插入到`main.py`文件中，当执行时，它将根据按下按钮的次数将电机从一个方向移动到另一个方向：
- en: '[PRE56]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: How it works...
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `move` function is defined to control changes in the direction of movement
    on the motor. It can be called to either increase or decrease the movement in
    a specific rotational direction. The function takes the motor object, the current
    throttle, and the desired direction of movement. The new throttle value is calculated,
    and, if it is found to be within the acceptable range of the motor, the value
    will then be printed and applied to the motor.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`move`函数被定义为控制电机运动方向的变化。它可以被调用来增加或减少特定旋转方向上的运动。该函数接受电机对象、当前油门和期望的运动方向。新的油门值被计算出来，如果发现在电机的可接受范围内，该值将被打印并应用于电机。'
- en: The latest value of the throttle is then returned so that the main event loop
    can keep track of it. The `main` function contains an infinite loop, which acts
    as the main event loop. In this loop, presses on push button A will increase the
    motor's speed in one direction, and presses on push button B will increase the
    motor's speed in the opposite direction.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 然后返回油门的最新值，以便主事件循环可以跟踪它。`main`函数包含一个无限循环，充当主事件循环。在这个循环中，按下按钮A会增加电机在一个方向上的速度，按下按钮B会增加电机在另一个方向上的速度。
- en: There's more...
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe provided the basic building blocks for taking user-generated input
    and generating output using DC motors. You can expand on this recipe in a similar
    way to others so that the slide switch will let you control more than one DC motor
    with the same script.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程提供了使用直流电机接收用户输入并生成输出的基本构建模块。您可以以类似的方式扩展此教程，以便滑动开关可以让您使用相同的脚本控制多个直流电机。
- en: You can change the step value in the script to make the motors change speed
    and direction faster. Or, maybe you would like to reduce the step value, giving
    you more fine-grained control over the speed, at the cost of additional button
    presses.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在脚本中更改步进值，以使电机更快地改变速度和方向。或者，也许您想减少步进值，以便更精细地控制速度，但需要额外的按钮按下成本。
- en: See also
  id: totrans-327
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'Here are a few references:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一些参考资料：
- en: A motor pulley that is compatible with the DC motors used in this chapter can
    be found at [https://www.adafruit.com/product/3789](https://www.adafruit.com/product/3789).
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与本章中使用的直流电机兼容的电机滑轮可在[https://www.adafruit.com/product/3789](https://www.adafruit.com/product/3789)找到。
- en: A project that uses DC motors with the CRICKIT board to control a pulley can
    be found at [https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/marble-madness](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/marble-madness).
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CRICKIT板和直流电机控制滑轮的项目可在[https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/marble-madness](https://learn.adafruit.com/adafruit-crickit-creative-robotic-interactive-construction-kit/marble-madness)找到。
