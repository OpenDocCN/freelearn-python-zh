- en: Chapter 12. Testing Flask Apps
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。测试Flask应用程序
- en: Throughout this book, every time that we have made a modification to our application's
    code, we have had to manually load the affected web pages into our browser to
    test if the code was working correctly. As the application grows, this process
    becomes more and more tedious, especially if you change something that is of low
    level and used everywhere, such as SQLAlchemy model code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，每当我们对应用程序的代码进行修改时，我们都必须手动将受影响的网页加载到浏览器中，以测试代码是否正确工作。随着应用程序的增长，这个过程变得越来越繁琐，特别是如果您更改了低级别且在各处都使用的东西，比如SQLAlchemy模型代码。
- en: In order to automate the process of verifying that our code works the way we
    want it to, we will use a built-in feature of Python that allows us to write tests,
    normally named unit tests, which are checked against our application's code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动验证我们的代码是否按预期工作，我们将使用Python的内置功能，通常称为单元测试，对我们应用程序的代码进行检查。
- en: What are unit tests?
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是单元测试？
- en: Testing a program is very simple. All it involves is running particular pieces
    of your program and saying what you expect the results to be and comparing it
    to what the results from the piece of the program actually are. If the results
    are the same, the test passes. If the results are different, the test fails. Typically,
    these tests are run before code is committed to the Git repository and before
    code is deployed to the live server in order to make sure that broken code doesn't
    make it into either of those systems.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 测试程序非常简单。它只涉及运行程序的特定部分，并说明您期望的结果，并将其与程序片段实际的结果进行比较。如果结果相同，则测试通过。如果结果不同，则测试失败。通常，在将代码提交到Git存储库之前以及在将代码部署到实时服务器之前运行这些测试，以确保破损的代码不会进入这两个系统。
- en: In program testing, there are three main types of tests. Unit tests are tests
    that verify the correctness of individual pieces of code, such as functions. Second
    is integration testing, which tests the correctness of various units of programs
    working in tandem. The last type of testing is system testing, which tests the
    correctness of the whole system at once rather than in individual pieces.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序测试中，有三种主要类型的测试。单元测试是验证单个代码片段（如函数）正确性的测试。第二种是集成测试，它测试程序中各个单元一起工作的正确性。最后一种测试类型是系统测试，它测试整个系统的正确性，而不是单独的部分。
- en: In this chapter, we will be using unit testing and system testing in order to
    verify that our code is working as planned. We will not do integration testing
    in this chapter because the way in which various parts of the code work in tandem
    are not handled by the code we have written. For example, the way SQLAlchemy worked
    with Flask is not handled by our code. Flask SQLAlchemy handles it.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用单元测试和系统测试来验证我们的代码是否按计划工作。在本章中，我们不会进行集成测试，因为代码中各部分的协同工作方式不是由我们编写的代码处理的。例如，SQLAlchemy与Flask的工作方式不是由我们的代码处理的，而是由Flask
    SQLAlchemy处理的。
- en: This brings us to one of the first rules of code testing. Write tests for code
    that you own. The first reason for this is it's very likely that a test for this
    could have already been written. The second reason is that any bugs in the libraries
    that you use will surface in your tests when you want to use that library's functionality.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这带我们来到代码测试的第一个规则之一。为自己的代码编写测试。这样做的第一个原因是很可能已经为此编写了测试。第二个原因是，您使用的库中的任何错误都将在您想要使用该库的功能时在您的测试中显现出来。
- en: How does testing work?
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试是如何工作的？
- en: Let's start with a very simple Python function for us to test.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从一个非常简单的Python函数开始进行测试。
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In order to verify the correctness of this code, we pass a value and we will
    test if the result of the function is what we expect. For example, we would give
    it an input of five and would expect the result to be 25.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证此代码的正确性，我们传递一个值，并测试函数的结果是否符合我们的期望。例如，我们会给它一个输入为5，并期望结果为25。
- en: 'To illustrate the concept, we can manually test this function in the command
    line using the `assert` statement. The `assert` statement in Python simply says
    that if the conditional statement after the `assert` keyword returns `False`,
    throw an exception as follows:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这个概念，我们可以在命令行中使用`assert`语句手动测试这个函数。Python中的`assert`语句简单地表示，如果`assert`关键字后的条件语句返回`False`，则抛出异常如下：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Using these `assert` statements, we verified that the square function was working
    as intended.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些`assert`语句，我们验证了平方函数是否按预期工作。
- en: Unit testing the application
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 单元测试应用程序
- en: Unit testing in Python works by combining `assert` statements into their own
    functions inside a class. This collection of testing functions inside the class
    is called a test case. Each function inside the test case should test only one
    thing, which is the main idea behind unit testing. Testing only one thing in your
    unit tests forces you to verify each piece of code individually and not gloss
    over any of the functionality of your code. If you write your unit tests correctly,
    you will end up with lots and lots of them. While this may seem overly verbose,
    it will save you from headaches down the road.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的单元测试通过将`assert`语句组合到它们自己的函数中的类中来工作。这个类中的测试函数集合被称为测试用例。测试用例中的每个函数应该只测试一件事，这是单元测试的主要思想。在单元测试中只测试一件事会迫使您逐个验证每个代码片段，而不会忽略代码的任何功能。如果编写单元测试正确，您最终会得到大量的单元测试。虽然这可能看起来过于冗长，但它将为您节省后续的麻烦。
- en: Before we can build our test cases, we need another configuration object specifically
    to set up the app for testing. In this configuration, we will use the Python `tempfile`
    module in the standard library in order to create a test SQLite database in a
    file that will automatically delete itself when the tests are over. This allows
    us to guarantee that the tests will not interfere with our actual database. Also,
    the configuration disables WTForms CSRF checks to allow us to submit forms from
    the tests without the CSRF token.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在构建测试用例之前，我们需要另一个配置对象，专门用于设置应用程序进行测试。在这个配置中，我们将使用Python标准库中的`tempfile`模块，以便在文件中创建一个测试SQLite数据库，当测试结束时会自动删除。这样可以确保测试不会干扰我们的实际数据库。此外，该配置禁用了WTForms
    CSRF检查，以允许我们在测试中提交表单而无需CSRF令牌。
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Testing the route functions
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试路由功能
- en: Let's build our first test case. In this test case, we will be testing if the
    route functions successfully return a response if we access their URL. In a new
    directory at the root of the project directory named `tests`, create a new file
    named `test_urls.py`, which will hold all of the unit tests for the routes. Each
    test case should have its own file, and each test case should focus on one area
    of the code you are testing.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建我们的第一个测试用例。在这个测试用例中，我们将测试如果我们访问它们的URL，路由函数是否成功返回响应。在项目目录的根目录中创建一个名为`tests`的新目录，然后创建一个名为`test_urls.py`的新文件，该文件将保存所有路由的单元测试。每个测试用例都应该有自己的文件，并且每个测试用例都应该专注于你正在测试的代码的一个区域。
- en: In `test_urls.py`, let's start creating what the built-in Python `unittest`
    library needs. The code will use the `unittest` library from Python in order to
    run all the tests that we create in the test case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在`test_urls.py`中，让我们开始创建内置的Python`unittest`库所需的内容。该代码将使用Python中的`unittest`库来运行我们在测试用例中创建的所有测试。
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let''s see what happens when this code is run. We will use the `unittest` library''s
    ability to automatically find our test cases to run the tests. The pattern the
    `unittest` library looks for is `test*.py`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看当运行这段代码时会发生什么。我们将使用`unittest`库的自动查找测试用例的能力来运行测试。`unittest`库查找的模式是`test*.py`：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Because there are no tests in the test case, the test case passed successfully.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 因为测试用例中没有测试，所以测试用例成功通过。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The test script was run from the parent directory of the script and not in the
    test folder itself. This is to allow imports of the application code inside the
    test scripts.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 测试脚本是从脚本的父目录而不是测试文件夹本身运行的。这是为了允许在测试脚本中导入应用程序代码。
- en: In order to test the URLs, we need to have a way to query the application's
    routes without actually running a server, so our requests are returned. Flask
    provides a way of accessing routes in tests named the test client. The test client
    gives methods to create HTTP requests on our routes without having to actually
    run the application with `app.run()`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试URL，我们需要一种在不实际运行服务器的情况下查询应用程序路由的方法，以便返回我们的请求。Flask提供了一种在测试中访问路由的方法，称为测试客户端。测试客户端提供了在我们的路由上创建HTTP请求的方法，而无需实际运行应用程序的`app.run()`。
- en: We will need the test client object for each of the tests in this test case,
    but adding in code in each `unittest` to create the test client doesn't make much
    sense when we have the `setUp` method. The `setUp` method is run before each unit
    test and can attach variables to self in order for the test method to have access
    to them. In our `setUp` method, we need to create the application object with
    our `TestConfig` object and create the test client.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试用例中，我们将需要测试客户端对象，但是在每个`unittest`中添加代码来创建测试客户端并没有太多意义，因为我们有`setUp`方法。`setUp`方法在每个单元测试之前运行，并且可以将变量附加到self上，以便测试方法可以访问它们。在我们的`setUp`方法中，我们需要使用我们的`TestConfig`对象创建应用程序对象，并创建测试客户端。
- en: 'Also, there are three bugs that we need to work around. The first two are in
    the Flask Admin and Flask Restful extensions, which do not remove the Blueprint
    objects stored internally when the application object they are applied to is destroyed.
    Third, Flask SQLAlchemy''s initializer doesn''t correctly add the application
    object while outside the `webapp` directory:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要解决三个问题。前两个在Flask Admin和Flask Restful扩展中，当应用程序对象被销毁时，它们内部存储的Blueprint对象不会被移除。第三，Flask
    SQLAlchemy的初始化程序在`webapp`目录之外时无法正确添加应用程序对象：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: All of the bugs previously listed exist at the time of writing and may no longer
    exist when you read this chapter.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，之前列出的所有错误都存在，但在阅读本章时可能已经不存在。
- en: Along with the `setUp` method, there is also the `tearDown` method, which is
    run every time a unit test ends. The `tearDown` method is to destroy any objects
    that were created in the `setUp` method that cannot be automatically garbage collected.
    In our case, we will use the `tearDown` method in order to delete the tables in
    the test database in order to have a clean slate for each test.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`setUp`方法之外，还有`tearDown`方法，它在每次单元测试结束时运行。`tearDown`方法用于销毁`setUp`方法中创建的任何无法自动垃圾回收的对象。在我们的情况下，我们将使用`tearDown`方法来删除测试数据库中的表，以便每个测试都有一个干净的起点。
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now we can create our first unit test. The first test will test whether accessing
    the root of our application will return a `302 redirect` to the blog home page
    as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建我们的第一个单元测试。第一个测试将测试访问我们应用程序的根目录是否会返回`302重定向`到博客主页，如下所示：
- en: '[PRE7]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Each unit test must start with the word `test` to tell the `unittest` library
    that the function is a unit test and not just some utility function inside the
    test case class.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 每个单元测试必须以单词`test`开头，以告诉`unittest`库该函数是一个单元测试，而不仅仅是测试用例类中的某个实用函数。
- en: 'Now if we run the tests again, we see our test being run and passing the checks:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们再次运行测试，我们会看到我们的测试被运行并通过检查：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The best way to write tests is to ask yourself what you are looking for ahead
    of time, write the `assert` statements, and write the code needed to execute those
    asserts. This forces you to ask what you are really testing before you start writing
    the test. It's also the best practice to write a Python doc string for each unit
    test, as it will be printed with the name of the test whenever the test fails,
    and after you write 50+ tests, it can be helpful to know exactly what the test
    is for.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 编写测试的最佳方法是事先询问自己要寻找什么，编写`assert`语句，并编写执行这些断言所需的代码。这迫使您在开始编写测试之前询问自己真正要测试什么。为每个单元测试编写Python文档字符串也是最佳实践，因为每当测试失败时，它将与测试名称一起打印，并且在编写50多个测试后，了解测试的确切目的可能会有所帮助。
- en: Rather than using the built-in `assert` keyword from Python, we can use some
    of the methods provided by the `unittest` library. These methods provide specialized
    error messages and debug information when the `assert` statements inside these
    functions fail.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与使用Python的内置`assert`关键字不同，我们可以使用`unittest`库提供的一些方法。当这些函数内部的`assert`语句失败时，这些方法提供了专门的错误消息和调试信息。
- en: 'The following is a list of all of the special `assert` statements given by
    the `unittest` library and what they do:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是`unittest`库提供的所有特殊`assert`语句及其功能列表：
- en: '`assertEqual(x, y)`: Assert `x == y`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertEqual(x, y)`: 断言 `x == y`'
- en: '`assertNotEqual(x, y)`: Assert `x != y`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotEqual(x, y)`: 断言 `x != y`'
- en: '`assertTrue(x)`: Assert `x` is `True`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertTrue(x)`: 断言 `x` 是 `True`'
- en: '`assertFalse(x)`: Assert `x` is `False`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertFalse(x)`: 断言 `x` 是 `False`'
- en: '`assertIs(x, y)`: Assert `x` is `y`'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIs(x, y)`: 断言 `x` 是 `y`'
- en: '`assertIsNot(x, y)`: Assert `x` is not `y`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIsNot(x, y)`: 断言 `x` 不是 `y`'
- en: '`assertIsNone(x)`: Assert `x` is `None`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIsNone(x)`: 断言 `x` 是 `None`'
- en: '`assertIsNotNone(x)`: Assert `x` is not `None`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIsNotNone(x)`: 断言 `x` 不是 `None`'
- en: '`assertIn(x, y)`: Assert `x` in `y`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIn(x, y)`: 断言 `x` 在 `y` 中'
- en: '`assertNotIn(x, y)`: Assert `x` not in `y`'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotIn(x, y)`: 断言 `x` 不在 `y` 中'
- en: '`assertIsInstance(x, y)`: Assert `isinstance(x, y)`'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertIsInstance(x, y)`: 断言 `isinstance(x, y)`'
- en: '`assertNotIsInstance(x, y)`: Assert not `isinstance(x, y)`'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`assertNotIsInstance(x, y)`: 断言不是 `isinstance(x, y)`'
- en: 'If we wanted to test the return value of a normal page, the unit test would
    look like this:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想测试普通页面的返回值，单元测试将如下所示：
- en: '[PRE9]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Remember that this code is only testing if the URLs give returns successfully.
    The content of the return to data is not part of these tests.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，此代码仅测试URL是否成功返回。返回数据的内容不是这些测试的一部分。
- en: 'If we wanted to test submitting a form like the login form, we can use the
    post method of the test client. Let''s create a `test_login` method to see if
    the login form works correctly:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想测试提交登录表单之类的表单，可以使用测试客户端的post方法。让我们创建一个`test_login`方法来查看登录表单是否正常工作：
- en: '[PRE10]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The additional check for the string in the return data exists because the return
    code is not affected by the validity of the entered data. The post method will
    work for testing any of the form objects we have created throughout the book.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 对返回数据中字符串的额外检查是因为返回代码不受输入数据有效性的影响。post方法将适用于测试本书中创建的任何表单对象。
- en: Now that you understand the mechanics of unit testing, you can use unit testing
    in order to test all the parts of your application. For example, testing all the
    routes in the application, testing any utility function that we have made like
    `sidebar_data`, testing if users with certain permissions can or cannot access
    a page, and so on.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您了解了单元测试的机制，可以使用单元测试来测试应用程序的所有部分。例如，测试应用程序中的所有路由，测试我们制作的任何实用函数，如`sidebar_data`，测试具有特定权限的用户是否可以访问页面等。
- en: If your application's code has a feature, no matter how small, you should have
    a test for it. Why? Because whatever can go wrong, will go wrong. If the validity
    of your application's code relies entirely on manual testing, then something is
    going to get overlooked as your app grows. When something gets overlooked, then
    broken code is deployed to live servers, which annoys your users.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的应用程序代码具有任何功能，无论多么小，都应该为其编写测试。为什么？因为任何可能出错的事情都会出错。如果您的应用程序代码的有效性完全依赖于手动测试，那么随着应用程序的增长，某些事情将被忽视。一旦有事情被忽视，就会将错误的代码部署到生产服务器上，这会让您的用户感到恼火。
- en: User interface testing
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户界面测试
- en: In order to test the high level of our application's code, and to create system
    tests, we will write tests that work with browsers and verify that the UI code
    is functioning properly. Using a tool called Selenium, we will create Python code
    that hooks into a browser and controls it purely from code. You find elements
    on the screen and then perform actions on those elements by having Selenium. Click
    on it or input keystrokes. Also, Selenium allows you to perform checks on the
    page content by giving you access to the elements' content, such as its attributes
    and its inner text. For more advanced checks, Selenium even gives an interface
    to run arbitrary JavaScript on the page. If the JavaScript returns a value, it
    is automatically converted into a Python type.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试应用程序代码的高级别，并创建系统测试，我们将编写与浏览器一起工作的测试，并验证UI代码是否正常工作。使用一个名为Selenium的工具，我们将创建Python代码，纯粹通过代码来控制浏览器。您可以在屏幕上找到元素，然后通过Selenium对这些元素执行操作。单击它或输入按键。此外，Selenium允许您通过访问元素的内容，例如其属性和内部文本，对页面内容执行检查。对于更高级的检查，Selenium甚至提供了一个接口来在页面上运行任意JavaScript。如果JavaScript返回一个值，它将自动转换为Python类型。
- en: 'Before we touch the code, Selenium needs to be installed:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在触及代码之前，需要安装Selenium：
- en: '[PRE11]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To begin with the code, our UI tests need a file of their own in the tests
    directory named `test_ui.py`. Because system tests do not test one specific thing,
    the best way to write user interface tests is to think of the test as going through
    a typical user''s flow. Before you write the test, write down specific steps that
    our fake user is going to simulate:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始编写代码，我们的UI测试需要在名为`test_ui.py`的测试目录中拥有自己的文件。因为系统测试不测试特定的事物，编写用户界面测试的最佳方法是将测试视为模拟典型用户流程。在编写测试之前，写下我们的虚拟用户将模拟的具体步骤：
- en: '[PRE12]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that we know exactly what our test is going to do, let's start adding in
    Selenium code. In the `setUp` and `tearDown` methods, we need code to start up
    a web browser that Selenium controls and then close it when the test is over.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了我们的测试要做什么，让我们开始添加Selenium代码。在`setUp`和`tearDown`方法中，我们需要代码来启动Selenium控制的Web浏览器，然后在测试结束时关闭它。
- en: '[PRE13]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code spawns a new Firefox window with Selenium controlling it. For this
    to work of course, you need Firefox installed on your computer. There is support
    for other browsers, but they all require an extra program for them to work correctly.
    Firefox has the best support out of all of the browsers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成一个由Selenium控制的新的Firefox窗口。当然，为了使其工作，你需要在计算机上安装Firefox。还有其他浏览器的支持，但它们都需要额外的程序才能正常工作。Firefox在所有浏览器中具有最好的支持。
- en: 'Before we write the code for the test, let''s explore the Selenium API as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试代码之前，让我们按照以下方式探索Selenium API：
- en: '[PRE14]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: These are the main functions from Selenium that we will be using, but there
    are many other ways to find and interact with elements on the web page. For the
    full list of available features, refer to the Selenium-Python documentation at
    [http://selenium-python.readthedocs.org](http://selenium-python.readthedocs.org).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将要使用的Selenium的主要功能，但还有许多其他方法可以查找和与网页上的元素进行交互。有关可用功能的完整列表，请参阅Selenium-Python文档[http://selenium-python.readthedocs.org](http://selenium-python.readthedocs.org)。
- en: 'There are two gotchas in Selenium that need to be kept in mind while writing
    your tests, or you will run into very odd bugs that are almost impossible to debug
    from their error messages:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写测试时，Selenium中有两个需要牢记的要点，否则你将遇到几乎无法从错误消息中调试的非常奇怪的错误：
- en: Selenium is designed to work like there is an actual person controlling the
    browser. This means that if an element cannot be seen on the page, Selenium cannot
    interact with it. For example, if an element covers another element you wish to
    click, say a modal window is in front of a button, then the button cannot be pushed.
    If the element's CSS has its display set to `none` or visibility set to `hidden`,
    the results will be the same.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Selenium的设计就像有一个实际的人控制浏览器一样。这意味着如果页面上看不到一个元素，Selenium就无法与其交互。例如，如果一个元素覆盖了你想点击的另一个元素，比如一个模态窗口在按钮前面，那么按钮就无法被点击。如果元素的CSS将其显示设置为`none`或可见性设置为`hidden`，结果将是一样的。
- en: All of the variables that point toward elements on the screen are stored as
    pointers to those elements in the browser, which means that they are not stored
    in Python's memory. If the page changes without using the `get` method, like when
    a link is clicked and a new element pointer is created, then the test will crash.
    This happens because the driver will be continuously looking for the elements
    on the previous page and not finding them on the new one. The `get` method of
    the driver clears out all those references.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 屏幕上指向元素的所有变量都存储为指向浏览器中这些元素的指针，这意味着它们不存储在Python的内存中。如果页面在不使用`get`方法的情况下发生更改，比如点击链接并创建新的元素指针时，测试将崩溃。这是因为驱动程序将不断寻找先前页面上的元素，而在新页面上找不到它们。驱动程序的`get`方法清除所有这些引用。
- en: 'In the previous tests, we used the test client in order to simulate a request
    to the application object. However, because we are now using something that needs
    to directly interface with the application through a web browser, we need an actual
    server to be running. This server needs to be run in a separate terminal window
    before the user interface tests are run so that they have something to request.
    To do this, we need a separate Python file in order to run the server with our
    test configuration, as well as setting up some models for our UI tests to use.
    In a new file at the root of the project directory named `run_test_server.py`,
    add the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在以前的测试中，我们使用测试客户端来模拟对应用程序对象的请求。然而，因为我们现在使用的是需要直接通过Web浏览器与应用程序进行交互的东西，我们需要一个实际运行的服务器。这个服务器需要在用户界面测试运行之前在一个单独的终端窗口中运行，以便它们有东西可以请求。为了做到这一点，我们需要一个单独的Python文件来使用我们的测试配置运行服务器，并设置一些模型供我们的UI测试使用。在项目目录的根目录下新建一个名为`run_test_server.py`的新文件，添加以下内容：
- en: '[PRE15]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Now that we have both the test server script and the knowledge of Selenium''s
    API, we can finally write the code for our test:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们既有了测试服务器脚本，又了解了Selenium的API，我们终于可以为我们的测试编写代码了：
- en: '[PRE16]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Most of this test uses the methods that we introduced earlier. However, there
    is a new method in this test named `switch_to`. The `switch_to` method is the
    context of the driver to allow the selection of elements inside an `iframe` element.
    Normally, it's impossible for the parent window to select any elements inside
    an `iframe` using JavaScript, but because we are directly interfacing into the
    browser itself, we can access `iframe` element's contents. We need to switch contacts
    like these because the WYSIWYG editor inside the post creation page uses `iframe`
    in order to create itself. After we are done with selecting elements within the
    `iframe`, we need to switch back to the parent context with the `parent_frame`
    method.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这个测试中使用了我们之前介绍的大部分方法。然而，在这个测试中有一个名为`switch_to`的新方法。`switch_to`方法是驱动程序的上下文，允许选择`iframe`元素内的元素。通常情况下，父窗口无法使用JavaScript选择`iframe`内的任何元素，但因为我们直接与浏览器进行交互，我们可以访问`iframe`元素的内容。我们需要像这样切换上下文，因为在创建页面内的WYSIWYG编辑器中使用`iframe`。在`iframe`内选择元素完成后，我们需要使用`parent_frame`方法切换回父上下文。
- en: You now have the tools that you need to test both your server code and your
    user interface code completely. For the rest of the chapter, we will focus on
    tools and methodologies in order to make your testing even more effective in ensuring
    your application's correctness.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经拥有了测试服务器代码和用户界面代码的测试工具。在本章的其余部分，我们将专注于工具和方法，以使您的测试更加有效，以确保应用程序的正确性。
- en: Test coverage
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试覆盖率
- en: 'Now that our tests have been written, we have to know whether our code is sufficiently
    tested. The concept of test coverage, also known as code coverage, was invented
    to solve this issue. In any project, the test coverage represents what percentage
    of the code in the project was executed when the tests were run, and which lines
    were never run. This gives an idea of what parts of the project aren''t being
    tested in our unit tests. To add coverage reports to our project, install the
    coverage library with pip as follows:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了测试，我们必须知道我们的代码是否经过了充分的测试。测试覆盖率的概念，也称为代码覆盖率，是为了解决这个问题而发明的。在任何项目中，测试覆盖率表示在运行测试时执行了项目中多少百分比的代码，以及哪些代码行从未运行过。这给出了项目中哪些部分在我们的单元测试中没有被测试的想法。要将覆盖报告添加到我们的项目中，请使用以下命令使用pip安装覆盖库：
- en: '[PRE17]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The coverage library can be run as a command-line program that will run your
    test suite and take its measurements while the tests are running.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖库可以作为一个命令行程序运行，它将在测试运行时运行您的测试套件并进行测量。
- en: '[PRE18]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `--source` flag tells coverage to only report on the coverage for the files
    in the `webapp` directory. If that weren't included, the percentages for all the
    libraries used in the app would be included as well. By default, if any code in
    an `if` statement is executed, the entire `if` statement is said to have executed.
    The `--branch` flag tells `coverage` to disable this and measure everything.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`--source`标志告诉覆盖仅报告`webapp`目录中文件的覆盖率。如果不包括这个标志，那么应用程序中使用的所有库的百分比也将被包括在内。默认情况下，如果执行了`if`语句中的任何代码，就会说整个`if`语句已经执行。`--branch`标志告诉`coverage`禁用这一点，并测量所有内容。'
- en: 'After `coverage` runs our tests and takes its measurements, we can see a report
    of its findings in two ways. The first is to see a print out of each file''s coverage
    percentage on the command line:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`coverage`运行我们的测试并进行测量后，我们可以以两种方式查看其发现的报告。第一种是在命令行上查看每个文件的覆盖百分比：
- en: '[PRE19]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The second is to use coverage's HTML generating ability to see a detailed breakdown
    of each file in the browser.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种是使用覆盖的HTML生成功能在浏览器中查看每个文件的详细信息。
- en: '[PRE20]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The preceding command creates a directory named `htmlcov`. When the `index.html`
    file is opened in the browser, each file name can be clicked on to reveal the
    breakdown of what lines were and were not run during the tests.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令创建了一个名为`htmlcov`的目录。当在浏览器中打开`index.html`文件时，可以单击每个文件名以显示测试期间运行和未运行的代码行的详细情况。
- en: '![Test coverage](img/B03929_12_01.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![测试覆盖率](img/B03929_12_01.jpg)'
- en: In the preceding screenshot, the `blog.py` file was opened, and the coverage
    report clearly shows that the post route was never executed. However, this also
    gives some false negatives. As the user interface tests are not testing code that
    is being run by the coverage program, it doesn't count toward our coverage report.
    In order to fix this, just to make sure that you have tests in your test cases,
    test each individual function that would have been tested in the user interface
    tests.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的截图中，打开了`blog.py`文件，覆盖报告清楚地显示了帖子路由从未执行过。然而，这也会产生一些错误的负面影响。由于用户界面测试未测试覆盖程序运行的代码，因此它不计入我们的覆盖报告。为了解决这个问题，只需确保测试用例中有测试，测试每个单独的函数，这些函数在用户界面测试中应该被测试。
- en: In most projects, the percentage to aim for is around 90% code coverage. It's
    very rare that a project will have 100% of its code testable, and this possibility
    decreases as the size of the project increases.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数项目中，目标百分比约为90%的代码覆盖率。很少有项目的100%代码是可测试的，随着项目规模的增加，这种可能性会减少。
- en: Test-driven development
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试驱动开发
- en: Now that we have our tests written, how can they be integrated into the development
    process? Currently, we are using our tests in order to ensure code correctness
    after we create some feature. But, what if we flipped the order and used tests
    in order to create correct code from the beginning? This is what **test-driven
    development** (**TDD**) advocates.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了测试，它们如何融入开发过程？目前，我们正在使用测试来确保在创建某些功能后代码的正确性。但是，如果我们改变顺序，使用测试来从一开始就创建正确的代码呢？这就是**测试驱动开发**（**TDD**）的主张。
- en: 'TDD follows a simple loop to write the code of a new feature in your application:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: TDD遵循一个简单的循环来编写应用程序中新功能的代码：
- en: '![Test-driven development](img/B03929_12_02.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![测试驱动开发](img/B03929_12_02.jpg)'
- en: Credit for this image goes to user Excirial on Wikipedia
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 此图像的来源是维基百科上的用户Excirial
- en: In a project that uses TDD, the first thing that you write, before any of the
    code that controls what you are actually building, is the tests. What this forces
    the programmers on the project to do is to plan out the project's scope, design,
    and requirements before writing any code. While designing APIs, it also forces
    the programmer to design the interface of the API from a consumer's perspective
    rather than design the interface after all the backend code has been written.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用TDD的项目中，你在实际构建任何控制你实际构建的代码之前，编写的第一件事是测试。这迫使项目中的程序员在编写任何代码之前规划项目的范围、设计和要求。在设计API时，它还迫使程序员从消费者的角度设计API的接口，而不是在编写所有后端代码之后设计接口。
- en: In TDD, tests are designed to fail the first time that you run them. There is
    a saying in TDD that if your tests don't fail the first time that you run them,
    you're not really testing anything. What this means is that you are most likely
    testing to what the tested unit gives rather than what it should give while writing
    tests after the fact.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在TDD中，测试旨在第一次运行时失败。TDD中有一句话，如果你的测试第一次运行时没有失败，那么你实际上并没有测试任何东西。这意味着你很可能在编写测试之后测试被测试单元给出的结果，而不是应该给出的结果。
- en: After your tests fail the first time, you continuously write code until all
    the tests pass. This process is repeated for each new feature.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一次测试失败后，您不断编写代码，直到所有测试通过。对于每个新功能，这个过程都会重复。
- en: Once all of the original tests pass and the code is cleaned up, TDD tells you
    to stop writing code. By only writing code until the tests pass, TDD also enforces
    the **You Aren't Going To Need It** (**YAGNI**) philosophy, which states that
    programmers should only implement what they actually need rather than what they
    perceive they will need. A huge amount of wasted effort is made during development
    when programmers try to preemptively add functionality when no one needed it.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有原始测试通过并且代码被清理干净，TDD告诉你停止编写代码。通过仅在测试通过时编写代码，TDD还强制执行“你不会需要它”（YAGNI）哲学，该哲学规定程序员只应实现他们实际需要的功能，而不是他们认为他们将需要的功能。在开发过程中，当程序员试图在没有人需要的情况下预先添加功能时，会浪费大量的精力。
- en: 'For example, on a PHP project that I worked on, I found the following code
    that looked for images in a directory:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在我参与的一个PHP项目中，我发现了以下代码，用于在目录中查找图像：
- en: '[PRE21]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In PHP, glob is a function that looks through the contents of a directory to
    find files that match the pattern. I confronted the programmer who wrote it. His
    explanation for all the different versions of the `.png` extension was that some
    user uploaded a file with a `.PNG` extension, and the function didn't find it
    because it was only looking for the lowercase versions of the extensions. Instead
    of adding the uppercase versions to fix the problem at hand, he tried to fix a
    problem that didn't exist to make sure that he didn't have to touch this code
    again. We may feel like wasting a small amount of time, but this code was a microcosm
    of the entire code base. If this project followed TDD, a test case would have
    been added for the uppercase file extensions, the code added to pass the test,
    and that would have been the end of it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，glob是一个函数，它查找目录中的内容，以找到与模式匹配的文件。我质问了编写它的程序员。他对`.png`扩展名的不同版本的解释是，某个用户上传了一个带有`.PNG`扩展名的文件，而函数没有找到它，因为它只寻找扩展名的小写版本。他试图解决一个不存在的问题，以确保他不必再次触及这段代码，我们可能会觉得浪费了一点时间，但这段代码是整个代码库的缩影。如果这个项目遵循TDD，就会为大写文件扩展名添加一个测试用例，添加代码以通过测试，然后问题就解决了。
- en: TDD also promotes the idea of **Keep It Simple, Stupid** (**KISS**), which dictates
    that simplicity should be a design goal from the beginning. TDD promotes KISS
    because it requires small, testable units of code that can be separated from each
    other and don't rely on a shared global state.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: TDD还提倡“保持简单，愚蠢”（KISS）的理念，这个理念规定从一开始就应该把简单作为设计目标。TDD提倡KISS，因为它需要小的、可测试的代码单元，这些单元可以相互分离，不依赖于共享的全局状态。
- en: Also, in projects that follow TDD, there is an always-current documentation
    through the tests. One of the axioms of programming is that with any sufficiently
    large program, the documentation will always be out of date. This is because the
    documentation is one of the last things on the mind of the programmer when he/she
    is changing the code. However, with tests there are clear examples of each piece
    of functionality in the project (if the project has a large code coverage percentage).
    The tests are updated all the time and therefore show good examples of how the
    functions and API of the program should work.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在遵循TDD的项目中，测试始终保持最新的文档。编程的一个公理是，对于任何足够大的程序，文档总是过时的。这是因为当程序员在更改代码时，文档是最后考虑的事情之一。然而，通过测试，项目中的每个功能都有清晰的示例（如果项目的代码覆盖率很高）。测试一直在更新，因此展示了程序的功能和API应该如何工作的良好示例。
- en: Now that you understand Flask's functionality and how to write tests for Flask,
    the next project that you create in Flask can be entirely made with TDD.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了Flask的功能以及如何为Flask编写测试，你在Flask中创建的下一个项目可以完全使用TDD。
- en: Summary
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Now that you understand testing and what it can do for your application, you
    can create applications that are guaranteed to be less bug-ridden. You will spend
    less time fixing bugs and more time adding features that are requested by your
    users.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了测试以及它对你的应用程序能做什么，你可以创建保证不会有太多错误的应用程序。你将花更少的时间修复错误，更多的时间添加用户请求的功能。
- en: In the next chapter, we will finish the book by going over ways to deploy your
    application into a production environment on a server.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过讨论在服务器上将应用程序部署到生产环境的方式来完成这本书。
- en: As a final challenge to the reader, before moving onto the next chapter try
    to get your code coverage over 95%.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 作为对读者的最后挑战，在进入下一章之前，尝试将你的代码覆盖率提高到95%以上。
