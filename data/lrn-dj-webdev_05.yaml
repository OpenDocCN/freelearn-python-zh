- en: Chapter 5. Introducing Hashtags
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。引入标签
- en: Tags are one of the most prominent features in Web 2.0 applications. A **tag**
    is a keyword associated with a piece of information, such as an article, image,
    or link. **Tagging** is the process of assigning tags to content. It is usually
    done by the author or users and allows for user-defined categorization of content.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 标签是Web 2.0应用程序中最突出的功能之一。**标签**是与信息（如文章、图片或链接）相关联的关键词。**标记**是将标签分配给内容的过程。通常由作者或用户完成，并允许用户定义的内容分类。
- en: We will also be using tags in our project, and we will be calling it **hashtags**.
    Tags have become very popular in web applications because they enable users to
    classify, view, and share content easily. If you are not familiar with tags, you
    can see examples by visiting social sites such as Twitter, Facebook, or Google
    Plus, where tags are pinned to each status or conversation to help us find trending
    topics. Since we are going to build a micro blogging site, tags will help us to
    categorize the conversations between users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在我们的项目中使用标签，并将其称为**hashtags**。标签在Web应用程序中变得非常流行，因为它们使用户能够轻松分类、查看和共享内容。如果您不熟悉标签，可以通过访问Twitter、Facebook或Google
    Plus等社交网站的示例来了解。在这些网站上，标签被固定到每个状态或对话中，以帮助我们找到热门话题。由于我们将构建一个微型博客网站，标签将帮助我们对用户之间的对话进行分类。
- en: To introduce tags into our system, we need a mechanism that enables users to
    submit tweets to the database along with hashtags. Later, we will also need a
    method for browsing tweets classified under a certain tag.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将标签引入我们的系统，我们需要一种机制，使用户能够将带有标签的tweet提交到数据库中。稍后，我们还需要一种浏览特定标签下分类的tweet的方法。
- en: 'In this chapter, you will learn about the following:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习以下内容：
- en: Designing a hashtag data model
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计标签数据模型
- en: Building an algorithm that separates hashtags from a tweet form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个从tweet表单中分离出标签的算法
- en: Creating pages for listing tweets under a certain hashtag
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为特定标签下的tweet列表创建页面
- en: Building a tag cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建标签云
- en: The hashtag data model
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 标签数据模型
- en: Hashtags need to be stored in the database and associated with tweets. So, the
    first step to introducing tags into our project is to create a data model for
    hashtags. A hashtag object will only hold one piece of data, a string that represents
    the hashtag. In addition, we need to maintain the list of hashtags associated
    with a particular tweet.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 标签需要存储在数据库中并与tweet关联。因此，引入标签到我们的项目的第一步是为标签创建一个数据模型。一个标签对象只会保存一个数据，一个代表标签的字符串。此外，我们需要维护与特定tweet关联的标签列表。
- en: You may recall from [Chapter 4](part0034.xhtml#aid-10DJ41 "Chapter 4. Building
    an Application Like Twitter"), *Building an Application Like Twitter*, that we
    used foreign keys to associate tweets with users, and we called this a one-to-many
    relationship. However, the relationship between hashtags and tweets is not one-to-many,
    because one hashtag can be associated with many tweets, and one tweet can also
    have many hashtags associated with it. This is called a many-to-many relationship,
    and it is represented in Django models using the `models.ManyToManyField` parameter.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还记得[第4章](part0034.xhtml#aid-10DJ41 "第4章。构建类似Twitter的应用程序")中，*构建类似Twitter的应用程序*，我们使用外键将tweet与用户关联起来，并将其称为一对多关系。然而，标签和tweet之间的关系不是一对多，因为一个标签可以与多个tweet关联，一个tweet也可以与多个标签关联。这被称为多对多关系，并且在Django模型中使用`models.ManyToManyField`参数表示。
- en: 'You should be well aware by now that data models go into the `mytweet` | `models.py`
    file. So, open the file and add the following `HashTag` class to it:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，您应该很清楚数据模型放在`mytweet` | `models.py`文件中。因此，打开文件并将以下`HashTag`类添加到其中：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Pretty straightforward, isn''t it? We simply defined a data model for hashtags.
    This model holds the tag name and its tweet in its `ManyToManyField` parameter.
    When you have finished entering the code, don''t forget to run the following command
    in order to create a table for the model in the database:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 相当简单，不是吗？我们只是为标签定义了一个数据模型。该模型在其`ManyToManyField`参数中保存了标签名称及其tweet。当您完成输入代码后，不要忘记运行以下命令，以便在数据库中为模型创建一个表：
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'output:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now, to see the detailed SQL query of how Django creates and implements all
    the relationships, and also how it creates the table for them, we can just issue
    the command `sql` with the model name to `manage.py`. It will show the SQL queries
    it will run to create the instance of the object. Those who are already familiar
    with SQL know that many-to-many relationships are usually implemented in SQL by
    creating a third table that connects the two related tables. Now, let''s see how
    Django implements this type of relationship. In the terminal, issue the following
    command:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，要查看Django如何创建和实现所有关系的详细SQL查询，以及如何为它们创建表，我们只需使用`manage.py`中的模型名称发出`sql`命令。它将显示要运行以创建对象实例的SQL查询。熟悉SQL的人都知道，多对多关系通常是通过创建连接两个相关表的第三个表来实现的。现在，让我们看看Django如何实现这种类型的关系。在终端中，发出以下命令：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'output:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 输出：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The output may slightly differ depending on your database engine. Indeed, Django
    automatically creates an extra table called `tweet_hashtag_tweet` to maintain
    the many-to-many relationship.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 输出可能会因您的数据库引擎而略有不同。事实上，Django会自动创建一个名为`tweet_hashtag_tweet`的额外表来维护多对多关系。
- en: It is worth noting that when we define a many-to-many relationship in Django's
    model API, the `models.ManyToMany` field can be placed in either of the two related
    models. We could have put this field in the tweet model instead of hashtag; since
    we created the hashtag model later, we put the `models.ManyToMany` field in it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Django的模型API中定义多对多关系时，值得注意的是，`models.ManyToMany`字段可以放置在两个相关模型中的任何一个。我们本可以将这个字段放在tweet模型中而不是hashtag；因为我们后来创建了hashtag模型，所以我们把`models.ManyToMany`字段放在了它里面。
- en: For testing purposes, we will move to the admin panel and create a tweet with
    hashtags, as we did for both user and tweet creation. But, first, we will have
    to register the hashtags for the administration panel in the `admin.py` file.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试目的，我们将转到管理面板并创建带有标签的推文，就像我们为用户和推文创建一样。但首先，我们需要在`admin.py`文件中为管理面板注册标签。
- en: 'The modified `admin.py` file will look like this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的`admin.py`文件将如下所示：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now we can move to the administration panel with /administration URL.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以转到/administration URL的管理面板。
- en: Before we create a hashtag for a tweet, we need to create a tweet with a hashtag.
    Later, we will write a program that will parse the tweet and automatically create
    the hashtag instance associated with it.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在为推文创建标签之前，我们需要创建一个带有标签的推文。稍后，我们将编写一个程序，它将解析推文并自动创建与之关联的标签实例。
- en: 'Refer to the demo diagram for creating the tweet that we have shown in [Chapter
    4](part0034.xhtml#aid-10DJ41 "Chapter 4. Building an Application Like Twitter"),
    *Building an Application Like Twitter*, and create a tweet with the following
    text:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 参考我们在[第4章](part0034.xhtml#aid-10DJ41 "第4章。构建类似Twitter的应用程序")中展示的创建推文的演示图，并创建一条带有以下文本的推文：
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: With the same user we used, `ratancs`, then move on to the hashtag model and
    create the hashtag `#Django` and associate it with the tweet we created. This
    will give you an idea of how we assign a hashtag to the tweet.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们之前使用的相同用户`ratancs`，然后转到标签模型并创建标签`#Django`并将其与我们创建的推文关联起来。这将让你了解我们如何将标签分配给推文。
- en: Let us create a proper tweet submission form, which will ask users to write
    the tweet as input. It will create all the hashtags associated with the tweet
    and will save the tweet.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个合适的推文提交表单，它将要求用户将推文写入输入框。它将创建与推文相关的所有标签，并保存推文。
- en: Have a look at the user profile page we have created. At the top center of the
    page, there will be an input box already associated with the user; thus, when
    he writes a tweet and hits the button to submit, the tweet will be saved with
    his ID.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 查看我们创建的用户个人资料页面。在页面的顶部中央，将有一个已与用户关联的输入框；因此，当他写一条推文并点击提交按钮时，推文将被保存与他的ID关联。
- en: 'Now, visit this URL: `http://localhost:8000/user/ratancs/`. You will see both
    the tweets we created earlier.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，访问这个URL：`http://localhost:8000/user/ratancs/`。你会看到我们之前创建的推文。
- en: '![The hashtag data model](img/image00299.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![标签数据模型](img/image00299.jpeg)'
- en: We will go back to the `profile.html` code and append a text area with a submit
    button to post a tweet for the user. The design will be the same as we chose to
    display the tweet–that is, we will be using the same well box of `Twitter bootstrap`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将返回到`profile.html`代码，并追加一个文本区域和一个提交按钮，为用户发布一条推文。设计将与我们选择显示推文的方式相同，也就是说，我们将使用`Twitter
    bootstrap`的相同的well box。
- en: 'Our `profile.html` file template is as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的`profile.html`文件模板如下：
- en: '[PRE7]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This `{%for ...}` block is used to represent multiple tweets, one below each
    other, as they have the `div` tag.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`{%for ...}`块用于表示多条推文，每条推文都在下面，因为它们有`div`标签。
- en: Now we will create a `div` tag just above the `{% for ...}` block, and will
    add our tweet submission form.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将在`{% for ...}`块的上方创建一个`div`标签，并添加我们的推文提交表单。
- en: Before we write out the form, let us understand about Django forms and how they
    can be used.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们编写表单之前，让我们了解一下Django表单以及它们的使用方法。
- en: Django forms
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django表单
- en: 'Creating, validating and processing forms is an all-too-common task. Web applications
    receive input and collect data from users by means of web forms. So, naturally,
    Django comes with its own library to handle these tasks. All you have to do is
    to import the library and start writing your forms:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 创建、验证和处理表单是一项非常常见的任务。Web应用程序通过Web表单接收输入并收集用户数据。因此，自然地，Django自带了处理这些任务的库。你所要做的就是导入这个库并开始编写你的表单：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The Django forms library handles three common tasks:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Django表单库处理三个常见任务：
- en: HTML form generation
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: HTML表单生成
- en: Server-side validation of user input
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户输入的服务器端验证
- en: HTML form redisplay in case of input errors
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在输入错误的情况下重新显示HTML表单
- en: The way in which this library works is similar to the way in which Django's
    data models work. You start by defining a class that represents your form. This
    class must be derived from the `forms.Form` base class. Attributes in this class
    represent form fields. The `forms` package provides many field types.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库的工作方式类似于Django的数据模型的工作方式。你首先定义一个代表你的表单的类。这个类必须派生自`forms.Form`基类。这个类中的属性代表表单字段。`forms`包提供了许多字段类型。
- en: When you create an object from a class that is derived from the `forms.Form`
    base class, you can interact with it using a variety of methods. There are methods
    for HTML code generation, methods to access the input data, and methods to validate
    the form.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当你从派生自`forms.Form`基类的类创建对象时，你可以使用各种方法与它交互。有用于生成HTML代码的方法，用于访问输入数据的方法，以及用于验证表单的方法。
- en: We will learn about the forms library by creating a tweet post form in the next
    section.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将通过创建一个推文发布表单来学习表单库。
- en: Designing the tweet post form
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计推文发布表单
- en: 'Let''s start by creating our first Django form. Create a new file in the tweets
    application folder and call it `forms.py`. Then, open the file in your code editor
    and enter the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从创建我们的第一个Django表单开始。在推文应用程序文件夹中创建一个新文件，命名为`forms.py`。然后，在代码编辑器中打开文件并输入以下代码：
- en: '[PRE9]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'After examining the code, you will notice that the way in which we defined
    this class is similar to the way in which we defined the model classes. We derived
    the `TweetForm` class from `forms.Form`. All form classes need to inherit from
    this class. Next, we define the fields that this form contains:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在检查了代码之后，你会注意到我们定义这个类的方式类似于我们定义模型类的方式。我们从`forms.Form`派生了`TweetForm`类。所有表单类都需要继承自这个类。接下来，我们定义这个表单包含的字段：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The form contains a text field which will have an HTML tag for text area, an
    additional attribute for rows and column, and a maximum size limit for input,
    which is same as the maximum length of the tweet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 表单包含一个文本字段，它将具有文本区域的HTML标签，一个用于行和列的附加属性，以及一个输入的最大大小限制，与tweet的最大长度相同。
- en: '[PRE11]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Please note that the form also contains a hidden field called `country`, which
    will be a char field.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，表单还包含一个名为`country`的隐藏字段，它将是一个char字段。
- en: There are many field types in the `forms` package. There are several parameters,
    listed as follows, which can be passed to the constructor of any field type. Some
    specialized field types can take other parameters in addition to these ones.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`forms`包中有许多字段类型。以下是一些参数，可以传递给任何字段类型的构造函数。一些专门的字段类型除了这些参数之外还可以接受其他参数。'
- en: '`label`: The label of the field when HTML code is generated.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`label`：生成HTML代码时字段的标签。'
- en: '`required`: Whether the user must enter a value or not. It is set to `True`
    by default. To change it, pass `required=False` to the constructor.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`required`：用户是否必须输入值。默认设置为`True`。要更改它，将`required=False`传递给构造函数。'
- en: '`widget`: This parameter lets you control how the field is rendered in HTML.
    We used it just now to make the `CharField` parameter of the password become a
    password input field.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widget`：这个参数让你控制字段在HTML中的呈现方式。我们刚刚用它来使密码的`CharField`参数成为密码输入字段。'
- en: '`help_text`: A description of the field will be displayed when the form is
    rendered.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help_text`：在表单呈现时，字段的描述将被显示。'
- en: 'The following is a table of commonly used field types:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是常用字段类型的表格：
- en: '| Field type | Description |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: 字段类型：描述
- en: '| --- | --- |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `CharField` | Returns a string. |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| `CharField`：返回一个字符串。'
- en: '| `IntegerField` | Returns an integer. |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| `IntegerField`：返回一个整数。|'
- en: '| `DateField` | Returns a Python `datetime.date` object. |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| `DateField`：返回Python的`datetime.date`对象。'
- en: '| `DateTimeField` | Returns a Python `datetime.datetime` object. |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| `DateTimeField`：返回Python的`datetime.datetime`对象。'
- en: '| `EmailField` | Returns a valid e-mail address as a string. |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '`EmailField`：返回一个有效的电子邮件地址字符串。'
- en: '| `URLField` | Returns a valid URL as a string. |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| `URLField`：返回一个有效的URL字符串。'
- en: 'Here is a partial list of available form widgets:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用的表单小部件的部分列表：
- en: '| Widget type | Description |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| 小部件类型 | 描述 |'
- en: '| --- | --- |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `PasswordInput` | A password text field. |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '`PasswordInput`：密码文本字段。'
- en: '| `HiddenInput` | A hidden input field. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `HiddenInput`：隐藏输入字段。'
- en: '| `Textarea` | A text area that enables text entry on multiple lines. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `Textarea`：允许在多行上输入文本的文本区域。'
- en: '| `FileInput` | A file upload field. |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `FileInput`：文件上传字段。'
- en: 'Now, we need to modify the `profile.html` file as per the `form.py` file. Update
    the `profile.html` file as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要根据`form.py`文件修改`profile.html`文件。更新`profile.html`文件如下：
- en: '[PRE12]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Posting the tweet is achieved by a simple form, which is `<form method="post"
    action="post/">{% csrf_token %}`. The method with which the form will be posted
    is `"post"` and the relative URL to post a tweet form will be `post/`,
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个简单的表单实现了发布tweet，即`<form method="post" action="post/">{% csrf_token %}`。表单将被提交的方法是`"post"`，发布tweet表单的相对URL将是`post/`，
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This code generated the CSRF token, which actually addresses a security issue;
    it protects this `post` URL from attacks from another server; details on this
    will be explained in a later section in this chapter.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码生成了CSRF令牌，实际上解决了一个安全问题；它保护这个`post` URL免受另一个服务器的攻击；关于这一点将在本章的后面部分进行解释。
- en: We have added a `div` tag just before the tweet `<div>`, and this `div` tag
    contains a form that will save the tweets when the post button is clicked on.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在tweet `<div>`之前添加了一个`div`标签，这个`div`标签包含一个表单，当单击发布按钮时将保存tweet。
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This `fieldWrapper` class in the `div` tag is used by Django's form library
    to render the HTML tag that we have mentioned for text in form class (which is
    Text area), followed by the cases of form renders for any error.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`fieldWrapper`类在`div`标签中被Django的表单库使用，用于呈现我们在表单类中提到的文本的HTML标签（即文本区域），随后是表单呈现的任何错误情况。'
- en: 'This will render the form as shown in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这将呈现如下截图所示的表单：
- en: '![Designing the tweet post form](img/image00300.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![设计推文发布表单](img/image00300.jpeg)'
- en: 'Now, we need to do two things to make this form work:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要做两件事来使这个表单工作：
- en: We have to define a method in a controller that is going to take this form submission
    request and save the tweet data to our tweet model class object.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须在控制器中定义一个方法，该方法将接受这个表单提交请求，并将tweet数据保存到我们的tweet模型类对象中。
- en: We have to define a URL pattern to which this form will be submitted with the
    tweet as content.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须定义一个URL模式，以便将该表单提交为tweet内容。
- en: To handle the request, we will add a new class which will accept the tweet from
    the form. We will name this class `PostTweet`. This class is added in `tweet/view.py`
    with an import dependency `from tweet.forms import TweetForm`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理请求，我们将添加一个新的类，该类将接受来自表单的tweet。我们将把这个类命名为`PostTweet`。这个类被添加在`tweet/view.py`中，有一个导入依赖`from
    tweet.forms import TweetForm`。
- en: '[PRE15]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We only need to define the post method as we only need this class to accept
    the data. This logic is pretty clear here; if the form is valid, only then will
    the data be persisted. Redirection always happens. The code also does one more
    special task; that is, the separation of all the hashtags from a tweet. This is
    done in a similar way to splitting all the words in a tweet, and if the word starts
    with `#` (hash), it will create a hashtag of that word (think of a regular expression
    here). For the second part, we are going to add an entry in our `urls.py` file,
    as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要定义post方法，因为我们只需要这个类来接受数据。这里的逻辑非常清楚；如果表单有效，那么数据才会被持久化。重定向总是发生。代码还执行了另一个特殊任务；即从tweet中分离出所有的hashtags。这与分割tweet中的所有单词的方式类似，如果单词以`#`（井号）开头，它将创建该单词的hashtag（在这里考虑一个正则表达式）。对于第二部分，我们将在我们的`urls.py`文件中添加一个条目，如下所示：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'If you look carefully at the last line, we have:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看最后一行，我们有：
- en: '[PRE17]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This means that all the requests of the form `/user/<username>/post` will be
    rendered by `PostTweet`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着所有形式为`/user/<username>/post`的请求将由`PostTweet`渲染。
- en: 'With this, we have made a simple Django form that can make the user post the
    tweet from his Twitter page, as shown in the following image:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个，我们已经制作了一个简单的Django表单，用户可以从他的Twitter页面发布推文，如下图所示：
- en: '![Designing the tweet post form](img/image00301.jpeg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![设计推文发布表单](img/image00301.jpeg)'
- en: 'Once the tweet is posted, the page will show all tweets, as shown in the following
    image:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦推文发布，页面将显示所有推文，如下图所示：
- en: '![Designing the tweet post form](img/image00302.jpeg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![设计推文发布表单](img/image00302.jpeg)'
- en: Creating a tag page
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建标签页面
- en: 'Next, we will create a page that is similar to the Twitter listing for hashtags.
    For this task, we will almost follow the same architecture that we followed for
    the user profile. Let''s start by adding a URL entry for the hashtag page. Open
    the `urls.py` file and insert the following entry (preferably below the user page
    entry so as to keep the table organized):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个类似于Twitter标签列表的页面。对于这个任务，我们几乎会遵循我们为用户个人资料所遵循的相同架构。让我们从为标签页面添加URL条目开始。打开`urls.py`文件并插入以下条目（最好是在用户页面条目下方，以保持表格有序）：
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The captured part of this regular expression is the same as that of the user
    page. We will only allow alphanumeric characters in a hashtag.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个正则表达式捕获的部分与用户页面的相同。我们只允许标签中包含字母数字字符。
- en: 'We will define the `hashtag` class in the controller as follows:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在控制器中定义`hashtag`类如下：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The HTML template page we will use will be almost the same as that of the profile,
    except for the form part that we used for posting the tweet.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用的HTML模板页面几乎与个人资料页面相同，除了我们用于发布推文的表单部分。
- en: 'We need to create the `hashtag.html` file with the following code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用以下代码创建`hashtag.html`文件：
- en: '[PRE20]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This will list all the tweets with the hashtag passed from the URL.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这将列出所有通过URL传递的标签的推文。
- en: Summary
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We have learned how to design a hashtag data model and an algorithm required
    to separate hashtags from a tweet form. Then, we created pages for listing tweets
    under a certain hashtag. We saw a code snippet for how to build a tweet with hashtag
    like a tag cloud seen in many blogging sites.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学会了如何设计标签数据模型以及从推文中分离标签所需的算法。然后，我们创建了用于列出特定标签下推文的页面。我们看到了如何构建带有标签的推文的代码片段，就像许多博客网站中看到的标签云一样。
- en: In the next chapter, we will see how to enhance the UI experience using AJAX
    with Django.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将看到如何使用Django和AJAX增强UI体验。
