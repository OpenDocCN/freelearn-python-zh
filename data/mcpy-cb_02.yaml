- en: Controlling LEDs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制LED
- en: In this chapter, we will introduce several methods of controlling the range
    of NeoPixel LEDs that come with the Adafruit Circuit Playground Express. In these
    recipes, we will examine various ways of setting the colors of the pixels, each
    with its own trade-off.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍控制Adafruit Circuit Playground Express附带的一系列NeoPixel LED的几种方法。在这些示例中，我们将研究设置像素颜色的各种方法，每种方法都有其自己的权衡。
- en: We will also demonstrate how to time operations so that fades and other light
    animation effects can be created. NeoPixels are a powerful way of allowing a richer
    visual interaction with your projects. These recipes will provide you with the
    necessary building blocks to incorporate these visual concepts into your own projects.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将演示如何计时操作，以便创建淡入淡出和其他光动画效果。NeoPixels是允许您的项目与丰富的视觉交互的强大方式。这些示例将为您提供必要的构建模块，以将这些视觉概念纳入您自己的项目中。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下示例：
- en: Turning on the pin 13 LED
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打开引脚13的LED
- en: Setting the brightness of the NeoPixel
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置NeoPixel的亮度
- en: Controlling the color of a single NeoPixel
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制单个NeoPixel的颜色
- en: Displaying an LED color using the RGB and hex code
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用RGB和十六进制代码显示LED颜色
- en: Setting an LED color using color names
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用颜色名称设置LED颜色
- en: Setting all NeoPixels to the same color
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有NeoPixels设置为相同的颜色
- en: Setting a range of NeoPixels to one color
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将一系列NeoPixels设置为一种颜色
- en: Generating random NeoPixel LED colors
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成随机的NeoPixel LED颜色
- en: Creating LED animations with random colors
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用随机颜色创建LED动画
- en: Creating LED animations with rainbow colors
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用彩虹颜色创建LED动画
- en: The Adafruit Circuit Playground Express layout
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Adafruit Circuit Playground Express布局
- en: 'The following diagram shows the locations of the LEDs that will be used in
    this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表显示了本章中将使用的LED的位置：
- en: '![](assets/7d6ba682-80e1-44fc-baee-79158532496b.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7d6ba682-80e1-44fc-baee-79158532496b.png)'
- en: Courtesy of adafruit.com
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: The pin 13 LED is a simple single red LED that will be used in the first recipe.
    There are a total of 10 NeoPixels on the board. Each NeoPixel is made up of a
    red, green, and blue LED. By controlling the individual brightness of each of
    these LEDs, you will be able to set any NeoPixel to a specific color.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 引脚13的LED是第一个示例中将使用的简单的单个红色LED。板上共有10个NeoPixels。每个NeoPixel由红色、绿色和蓝色LED组成。通过控制这些LED的各自亮度，您将能够将任何NeoPixel设置为特定颜色。
- en: Turning on the pin 13 LED
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开引脚13的LED
- en: In this recipe, we will learn how to turn the pin 13 LED on and off. This is
    the simplest LED available on the board as it has only one color, and interacting
    with it in Python is also very straightforward. For these reasons, the pin 13
    LED is a good starting point.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在本示例中，我们将学习如何打开和关闭引脚13的LED。这是板上最简单的LED，因为它只有一种颜色，并且在Python中与之交互也非常简单。出于这些原因，引脚13的LED是一个很好的起点。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL才能运行本示例中提供的代码。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You should see the pin 13 LED turn red at this stage.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此阶段应该看到引脚13的LED变红。
- en: 'Check the current state of the LED using the following code:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码检查LED的当前状态：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To turn off the LED, run the following code in the REPL:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要关闭LED，请在REPL中运行以下代码：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The light of the pin 13 LED will now be switched off.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在引脚13的LED灯将被关闭。
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first line of code imports the Circuit Playground Express library. This
    library contains an object class called `express`, which is the main class that
    we will use to interact with the hardware on this board. When the library is imported,
    it creates an instance of this class called `cpx`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行导入了Circuit Playground Express库。该库包含一个名为`express`的对象类，这是我们将用于与此板上的硬件进行交互的主要类。当导入库时，它会创建一个名为`cpx`的此类的实例。
- en: The `cpx` object exposes a property called `red_led`. This property can be used
    to retrieve the current value of the LED. If the LED is on, it will return the
    `True` value; otherwise, if the LED is off, it will return the `False` value.
    Setting the value of this property will turn the LED on or off depending on whether
    a `True` or `False` value is set.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`cpx`对象公开了一个名为`red_led`的属性。此属性可用于检索LED的当前值。如果LED打开，则返回`True`值；否则，如果LED关闭，则返回`False`值。设置此属性的值将打开或关闭LED，具体取决于设置`True`或`False`值。'
- en: There's more...
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This is one of the simplest LED lights on the board to deal with, because it
    is controlled by setting a value to either `True` or `False`. You cannot control
    the color or the brightness of this LED. The other recipes in this book will control
    the NeoPixel lights on the board, which have a richer range of functionality and
    as a result, a more complicated API is needed to control them.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这是板上最简单的LED灯之一，因为它是通过将值设置为`True`或`False`来控制的。您无法控制此LED的颜色或亮度。本书中的其他示例将控制板上的NeoPixel灯，这些灯具有更丰富的功能范围，因此需要更复杂的API来控制它们。
- en: See also
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the `red_led` property can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.red_led](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.red_led).
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`red_led`属性的文档可以在[https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.red_led](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.red_led)找到。
- en: Details on importing the `cpx` variable can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/#usage-example](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/#usage-example).
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关导入 `cpx` 变量的详细信息，请访问 [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/#usage-example](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/#usage-example)。
- en: Setting the brightness of the NeoPixel
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 NeoPixel 的亮度
- en: Controlling the brightness of the pixels will be the theme of this recipe. It
    is important to be able to set the brightness of the pixels depending on the need
    of the project. Note that you will have to change the brightness to a level that
    is bright enough so that the pixels are clearly visible, but not so bright that
    it causes discomfort.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 控制像素的亮度将是本教程的主题。根据项目的需要设置像素的亮度非常重要。请注意，您必须将亮度更改为足够明亮的级别，以便像素清晰可见，但不要太亮以至于引起不适。
- en: Getting ready
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问 Circuit Playground Express 上的 REPL，以运行本教程中提供的代码。
- en: How to do it...
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To do this, perform the following steps:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，请执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 REPL 中运行以下代码行：
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'At this point, the first pixel should be the color red with full brightness.
    Run the following line of code to set the brightness level to 50%:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此时，第一个像素应该是红色，并且亮度全开。运行以下代码行以将亮度级别设置为 50%：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The brightness level can be brought further down to 10% and still be comfortably
    visible. You can do this by running the following line of code:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 亮度级别可以进一步降至 10%，仍然可以舒适地看到。您可以通过运行以下代码行来实现：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `brightness` property accepts a value from `0` to `1.0`, which goes from
    least bright to most bright. Note that the NeoPixels on this board can be very
    bright, and they can strain your eyes if you look at them directly at the highest
    level of brightness.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`brightness` 属性接受从 `0` 到 `1.0` 的值，从最暗到最亮。请注意，此板上的 NeoPixels 可能非常明亮，如果您直接看最高亮度级别的话，可能会对您的眼睛造成压力。'
- en: I recommend that you set the brightness level to 10%, as this makes viewing
    the pixels more comfortable. Then, depending on the project, you can tweak the
    brightness to the most appropriate level.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议您将亮度级别设置为 10%，因为这样可以更舒适地查看像素。然后，根据项目的需要，您可以调整亮度到最合适的级别。
- en: There are times when the pixels will be underneath a thin covering of plastic
    and you will want to increase the brightness level. On the other hand, there will
    be times when you will be directly looking at them and you will want to decrease
    the brightness level.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有时像素将位于薄塑料覆盖物下，您将希望增加亮度级别。另一方面，有时您将直接看着它们，您将希望降低亮度级别。
- en: There's more...
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: It is important to note that the way the brightness levels are implemented means
    that you can only change all the NeoPixels at one time. That is, with the brightness
    property, you cannot make some pixels brighter and some pixels darker. So, whatever
    value you set for brightness will apply to all the pixels on the board.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，亮度级别的实现方式意味着您只能一次更改所有的 NeoPixels。也就是说，使用亮度属性，您不能使一些像素变亮，一些像素变暗。因此，您设置的亮度值将应用于板上的所有像素。
- en: 'The pixels have the capability of being very bright when they are left at the
    maximum level of 100% brightness. An example of where this setting is more suitable
    is when you embed your device in a plastic container. The following photograph
    is taken from a NeoPixel project, where the Circuit Playground Express board was
    placed inside the base of a snow globe:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 当像素保持在最大亮度级别的 100% 时，它们具有非常明亮的能力。这种设置更适合的一个例子是当您将设备嵌入塑料容器中。以下照片是从一个 NeoPixel
    项目中拍摄的，其中 Circuit Playground Express 板被放置在雪球的底座内部：
- en: '![](assets/cddce960-db40-45aa-a407-294794c2a227.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/cddce960-db40-45aa-a407-294794c2a227.png)'
- en: In this project, the base is made of white plastic. So, even though the board
    is not directly visible, the pixels are bright enough to shine through the white
    plastic and fill the whole globe with light.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个项目中，底座是由白色塑料制成的。因此，即使板不直接可见，像素也足够明亮，可以透过白色塑料照亮整个雪球。
- en: The DIY snow globe kit shown in this project can be found at [https://www.adafruit.com/product/3722](https://www.adafruit.com/product/3722).
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中展示的 DIY 雪球套件可以在 [https://www.adafruit.com/product/3722](https://www.adafruit.com/product/3722)
    找到。
- en: See also
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: The brightness property is documented at [https://circuitpython.readthedocs.io/projects/NeoPixel/en/latest/api.html#NeoPixel.NeoPixel.brightness](https://circuitpython.readthedocs.io/projects/neopixel/en/latest/api.html#neopixel.NeoPixel.brightness).
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亮度属性的文档位于 [https://circuitpython.readthedocs.io/projects/NeoPixel/en/latest/api.html#NeoPixel.NeoPixel.brightness](https://circuitpython.readthedocs.io/projects/neopixel/en/latest/api.html#neopixel.NeoPixel.brightness)。
- en: Examples of changing the brightness level can be found at [https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/NeoPixels](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/neopixels).
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关更改亮度级别的示例，请访问 [https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/NeoPixels](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/neopixels)。
- en: Controlling the color of a single NeoPixel
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制单个 NeoPixel 的颜色
- en: This recipe will show you how to set the a specific NeoPixel to different colors.
    It will then show you how to change the color of any of the 10 NeoPixels that
    come with the board. This will be a useful recipe to follow so that you can start
    unleashing the power and flexibility of these onboard pixels.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程将向您展示如何将特定的 NeoPixel 设置为不同的颜色。然后它将向您展示如何更改板上附带的 10 个 NeoPixels 中的任何一个的颜色。这将是一个有用的教程，因此您可以开始释放这些板载像素的强大和灵活性。
- en: Getting ready
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在Circuit Playground Express上访问REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now, you should see the first NeoPixel turn red.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你应该看到第一个NeoPixel变成红色。
- en: 'When you run the following code, you should see the first NeoPixel turn green:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行以下代码时，你应该看到第一个NeoPixel变成绿色：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When you run the following code, you should see the first NeoPixel turn blue:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你运行以下代码时，你应该看到第一个NeoPixel变成蓝色：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The following code should retrieve the current color value of the first NeoPixel:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码应该检索第一个NeoPixel的当前颜色值：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Run the following code to turn off the first NeoPixel:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码关闭第一个NeoPixel：
- en: '[PRE10]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Run the following code and the second NeoPixel should turn red:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码，第二个NeoPixel应该变成红色：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first line of code imports the `cpx` object that will be used to control
    the NeoPixels. This object has an attribute called `pixels`, which can be accessed
    like a list. The index that is used indicates which of the 10 NeoPixels is to
    be manipulated.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行代码导入了将用于控制NeoPixels的`cpx`对象。这个对象有一个名为`pixels`的属性，可以像列表一样访问。使用的索引表示要操作的10个NeoPixels中的哪一个。
- en: In the first code snippet, we set the value to a tuple that represents the desired
    color—it is comprised of red, green, and blue values. Each value should be represented
    as an integer from 0 to 255\. By setting the value to (255, 0, 0), the red LED
    will be at its highest value and the green and blue LEDs will be switched off.
    This will create the color red.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，我们将值设置为表示所需颜色的元组，它由红色、绿色和蓝色值组成。每个值应该表示为0到255之间的整数。通过将值设置为(255, 0,
    0)，红色LED将达到最高值，绿色和蓝色LED将关闭。这将创建红色。
- en: Following the same approach, the NeoPixel is then set to green and blue by providing
    the correct values for each of those colors. The current RGB values of a specific
    pixel can also be easily retrieved by simply accessing the value of any specific
    example.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 按照相同的方法，然后通过为每种颜色提供正确的值来将NeoPixel设置为绿色和蓝色。还可以通过简单地访问任何特定示例的值来轻松地检索特定像素的当前RGB值。
- en: A pixel can be switched off by setting all the RGB components to a value of
    0, as shown in the preceding code in this recipe. The final preceding code snippet
    just gives an example of setting the second pixel to the color red by referring
    to the correct index value.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将所有RGB分量设置为0，可以关闭像素，如本教程中的前面代码所示。最后一个前面的代码片段只是通过引用正确的索引值来将第二个像素设置为红色的示例。
- en: There's more...
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In older versions of the library, you could provide the colors as a list of
    three integers, instead of a tuple of three integers. It is best to avoid doing
    this and stick to using tuples instead of lists. This is because your code will
    work in both the newer and older versions of the library.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在旧版本的库中，你可以将颜色提供为三个整数的列表，而不是三个整数的元组。最好避免这样做，而是坚持使用元组而不是列表。这是因为你的代码将在新版本和旧版本的库中都能工作。
- en: 'Each NeoPixel is made up of a red, green, and blue LED. When you set the strength
    of each color in this recipe, it directly changes the brightness levels of these
    individual LEDs. It is a possible to use a consumer microscope to view each of
    the three individual LED lights that make up each NeoPixel. The following photograph
    is taken from one of these consumer grade microscopes with a magnification of
    200x. As you can see, the separate red, green, and blue LEDs are clearly visible:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个NeoPixel由红色、绿色和蓝色LED组成。当你在这个教程中设置每种颜色的强度时，它直接改变了这些单独LED的亮度级别。可以使用消费者显微镜来查看组成每个NeoPixel的三个单独的LED灯。以下照片是从这些消费者级显微镜中拍摄的，放大倍数为200倍。正如你所看到的，单独的红色、绿色和蓝色LED清晰可见：
- en: '![](assets/b25ccf3e-f210-4dab-b042-0457e92f2e5d.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/b25ccf3e-f210-4dab-b042-0457e92f2e5d.png)'
- en: See also
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下参考资料了解更多信息：
- en: Documentation on the pixels attribute can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.pixels](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.pixels).
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.pixels](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.pixels)找到有关像素属性的文档。
- en: Details on the NeoPixel can be found at [https://learn.adafruit.com/adafruit-NeoPixel-uberguide/the-magic-of-NeoPixels](https://learn.adafruit.com/adafruit-neopixel-uberguide/the-magic-of-neopixels).
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关NeoPixel的详细信息可以在[https://learn.adafruit.com/adafruit-NeoPixel-uberguide/the-magic-of-NeoPixels](https://learn.adafruit.com/adafruit-neopixel-uberguide/the-magic-of-neopixels)找到。
- en: Displaying an LED color using the RGB and hex code
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用RGB和十六进制代码显示LED颜色
- en: There is a common convention to express any color using the hex code, which
    works by representing the red, green, and blue components of the color. This recipe
    demonstrates how to set the color of a NeoPixel using this hex code convention.
    Using such a popular convention will be useful when you want to apply specific
    color settings from other applications on the web or your desktop.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个常见的约定，可以使用十六进制代码来表示任何颜色，它通过表示颜色的红色、绿色和蓝色组件来工作。这个教程演示了如何使用这个十六进制代码约定来设置NeoPixel的颜色。当你想要从网络或桌面上的其他应用程序应用特定的颜色设置时，使用这样一个流行的约定将是有用的。
- en: Getting ready
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在Circuit Playground Express上访问REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE12]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'You should see the first NeoPixel turn red. Run the following code to retrieve
    the color value of the first NeoPixel:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到第一个NeoPixel变成红色。运行以下代码来检索第一个NeoPixel的颜色值：
- en: '[PRE13]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Run the following code to set the next two pixels to green and blue:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码将接下来的两个像素设置为绿色和蓝色：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Use the following code to set the fourth pixel to yellow:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码将第四个像素设置为黄色：
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Use the following code to display the integer value for the color blue, and
    then set the next pixel to the color blue using this integer value:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码显示颜色蓝的整数值，然后使用这个整数值将下一个像素设置为蓝色：
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first code snippet sets the first pixel on the board to the color red using
    the hex notation for colors. The pixel's interface accepts color values to be
    given as either a tuple of three integers or as a hex value, which, in Python,
    correlates to an integer value.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个代码片段使用颜色的十六进制表示法将板上的第一个像素设置为红色。像素的接口接受颜色值，可以作为三个整数的元组或十六进制值给出，在Python中，这对应于一个整数值。
- en: Depending on the type of value given, the library extracts the correct values
    of the red, green, and blue components of the color and sets the pixel to that
    color. The second code snippet indicates that when reading back the values, they
    will always be retrieved as a tuple of the three color components.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 根据给定的值类型，库会提取颜色的红色、绿色和蓝色组件的正确值，并将像素设置为该颜色。第二个代码片段表明，当读取值时，它们将始终作为三个颜色组件的元组检索。
- en: The final code snippet demonstrates that the hex notation being used is a standard
    feature of the Python language, which is used to specify the value of an integer
    in terms of its hex values. The equivalent integer value can also be used to set
    a color.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个代码片段表明，正在使用的十六进制表示法是Python语言的一个标准特性，用于指定整数值的十六进制值。等效的整数值也可以用于设置颜色。
- en: There's more...
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The hex code notation system to describe a color''s red, green, and blue components
    is extremely popular. Due to its popularity, it is easy to find a variety of online
    tools and desktop applications that provide color pickers and color wheels, which
    represent colors as hex codes. You can simply choose you desired color in these
    programs and then copy and paste the hex values into your scripts. The following
    screenshot is taken from the popular open source image editor, GIMP:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 十六进制代码表示系统用于描述颜色的红色、绿色和蓝色组件，非常受欢迎。由于其受欢迎程度，很容易找到各种在线工具和桌面应用程序，提供颜色选择器和颜色轮，这些工具将颜色表示为十六进制代码。您可以在这些程序中简单地选择所需的颜色，然后将十六进制值复制并粘贴到您的脚本中。以下截图来自流行的开源图像编辑器GIMP：
- en: '![](assets/6918ea9c-b73f-4c25-9bd5-8456b961f999.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6918ea9c-b73f-4c25-9bd5-8456b961f999.png)'
- en: In the preceding screenshot, you can see the color wheel that is available in
    the application. This rich interface easily allows you to find the color that
    you are looking for by changing its hue or saturation. Once you have picked the
    color that you want, you can copy the hex code value, which is labeled as **HTML
    notation** in this application. This value can then be used in your script using
    the same technique shown in this recipe.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述截图中，您可以看到应用程序中提供的颜色轮。这个丰富的界面可以轻松地通过改变色调或饱和度找到您要找的颜色。一旦选择了您想要的颜色，您可以复制十六进制代码值，这在该应用程序中标记为**HTML表示法**。然后，您可以使用相同的技术在您的脚本中使用这个值。
- en: GIMP is available on Linux, macOS, and Windows and can be downloaded for free
    from [https://www.gimp.org](https://www.gimp.org).
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: GIMP可在Linux、macOS和Windows上使用，并可从[https://www.gimp.org](https://www.gimp.org)免费下载。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on integer literals in the Python language can be found at [https://docs.python.org/3/reference/lexical_analysis.html#integer-literals](https://docs.python.org/3/reference/lexical_analysis.html#integer-literals).
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Python语言中整数文字的文档可以在[https://docs.python.org/3/reference/lexical_analysis.html#integer-literals](https://docs.python.org/3/reference/lexical_analysis.html#integer-literals)找到。
- en: An interactive color wheel can be found at [https://www.sessions.edu/color-calculator/](https://www.sessions.edu/color-calculator/).
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://www.sessions.edu/color-calculator/](https://www.sessions.edu/color-calculator/)找到交互式颜色轮。
- en: Setting an LED color using color names
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用颜色名称设置LED颜色
- en: Using human-readable color names can make it much easier to keep track of what
    colors are in use in your application. This recipe demonstrates a technique that
    allows you to set pixel colors using regular color names. This feature of referring
    to colors by a standard set of color names is available in popular languages,
    including CSS. This recipe shows you how to bring this feature to your MicroPython
    scripts.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用易读的颜色名称可以使您更容易跟踪应用程序中使用的颜色。本文演示了一种允许您使用常规颜色名称设置像素颜色的技术。通过一组标准的颜色名称引用颜色的功能在流行的语言中可用，包括CSS。本文向您展示了如何将此功能引入到您的MicroPython脚本中。
- en: Getting ready
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL才能运行本文中提供的代码。
- en: How to do it...
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To do this, perform the following steps:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 要执行此操作，请执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE17]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You should see the first NeoPixel turn red.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到第一个NeoPixel变成红色。
- en: 'Use the following code to set the first eight pixels to one of the named colors
    in alphabetical order:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码将前八个像素按字母顺序设置为命名颜色之一：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: How it works...
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: A global variable called RGB is created; this is a dictionary that is used for
    matching color names to their RGB color codes. This allows the color values to
    be retrieved by their names, instead of directly specifying their hex codes every
    time they need to be used. The first snippet uses the RGB code to set the first
    pixel to the color red.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 创建了一个名为RGB的全局变量；这是一个用于将颜色名称与它们的RGB颜色代码匹配的字典。这允许通过它们的名称检索颜色值，而不是每次需要使用时直接指定它们的十六进制代码。第一个片段使用RGB代码将第一个像素设置为红色。
- en: The second block of code loops through each color name in alphabetical order
    and sets a pixel to that color. Since there are eight colors defined in the color
    lookup dictionary, the first eight pixels will have their colors set—each pixel
    will have its own color from the list of colors.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个代码块按字母顺序循环遍历每个颜色名称，并将一个像素设置为该颜色。由于颜色查找字典中定义了八种颜色，前八个像素将设置它们的颜色，每个像素将从颜色列表中选择自己的颜色。
- en: There's more...
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Using human-readable color names can improve code readability. The technique
    described in this recipe, however, requires you to specify each color name and
    its associated hex code manually. This is fine if you are only using a small number
    of colors, but if you want to support a large number of colors, then this can
    become very tedious. Another factor to bear in mind is that many of these boards
    have limited memory capacity, so creating very large dictionaries can cause the
    board to run out of memory. A small color lookup table, such as the one shown
    in this example, shouldn't cause these sorts of issues.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 使用人类可读的颜色名称可以提高代码的可读性。然而，本教程中描述的技术需要您手动指定每个颜色名称及其相关的十六进制代码。如果只使用少量颜色，这是可以接受的，但如果要支持大量颜色，那么这将变得非常繁琐。另一个需要考虑的因素是，许多这些板子的内存容量有限，因此创建非常大的字典可能会导致板子内存不足。像本例中展示的小颜色查找表不应该引起这些问题。
- en: When you are looking for color names and their associated hex codes, there are
    a number of standard sources that can be used. One popular list of color names
    is the **World Wide Web Consortium** (**W3C**), which is used in CSS. There is
    also a standard color list provided with the open source text editor, Vim. This
    list of color names is stored in a file called `rgb.txt`, which comes with each
    Vim installation.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在寻找颜色名称及其相关的十六进制代码时，有许多标准来源可供使用。一个流行的颜色名称列表是**万维网联盟**（**W3C**），它在CSS中使用。另一个标准颜色列表是开源文本编辑器Vim提供的。这个颜色名称列表存储在一个名为`rgb.txt`的文件中，它随每个Vim安装包提供。
- en: 'The benefit of using this color listing is that it comes in a machine-readable
    format, where each line represents one color and the color components and names
    are whitespace-delimited. This makes parsing and using these color names a relatively
    trivial process. The following screenshot shows the output of a useful Vim script
    that parses this file and presents each color name and its applied color for easy
    selection:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个颜色列表的好处在于它以一种机器可读的格式呈现，每一行代表一个颜色，颜色组件和名称以空格分隔。这使得解析和使用这些颜色名称变得相对简单。下面的截图显示了一个有用的Vim脚本的输出，该脚本解析了这个文件，并为每个颜色名称和其应用的颜色提供了便捷的选择：
- en: '![](assets/6c942081-50b5-4340-a7e3-35462c0e0f18.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/6c942081-50b5-4340-a7e3-35462c0e0f18.png)'
- en: This Vim color script can be found at [https://vim.fandom.com/wiki/View_all_colors_available_to_gvim](https://vim.fandom.com/wiki/View_all_colors_available_to_gvim).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这个Vim颜色脚本可以在[https://vim.fandom.com/wiki/View_all_colors_available_to_gvim](https://vim.fandom.com/wiki/View_all_colors_available_to_gvim)找到。
- en: See also
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: The W3C color names can be found at [https://www.w3.org/TR/css-color-3/](https://www.w3.org/TR/css-color-3/).
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: W3C颜色名称可以在[https://www.w3.org/TR/css-color-3/](https://www.w3.org/TR/css-color-3/)找到。
- en: An explanation of additive color theory can be found at [https://study.com/academy/lesson/additive-color-theory-definition.html](https://study.com/academy/lesson/additive-color-theory-definition.html).
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于加色法的解释可以在[https://study.com/academy/lesson/additive-color-theory-definition.html](https://study.com/academy/lesson/additive-color-theory-definition.html)找到。
- en: Setting all NeoPixels to the same color
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将所有NeoPixels设置为相同颜色
- en: This recipe explains how you can set all the pixels to one color through a single
    call, instead of looping through all the NeoPixels and setting their colors individually.
    You can use this technique to create a nice effect to set all 10 NeoPixels to
    the same color. They are arranged in a perfect circle, so it creates a ring of
    color when they are all set to the same color. It is also an easy way to turn
    all the NeoPixels off in one call.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程解释了如何通过一次调用将所有像素设置为一个颜色，而不是循环遍历所有NeoPixels并单独设置它们的颜色。您可以使用这种技术来创建一个很好的效果，将所有10个NeoPixels设置为相同的颜色。它们排列成一个完美的圆圈，所以当它们都设置为相同的颜色时，就会形成一个颜色的环。这也是一种一次性关闭所有NeoPixels的简单方法。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要访问Circuit Playground Express上的REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE19]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: You should see all 10 NeoPixels turn blue.
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你应该看到所有10个NeoPixels变成蓝色。
- en: 'Use the following code to turn off all 10 NeoPixels:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码关闭所有10个NeoPixels：
- en: '[PRE20]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: How it works...
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In the first code snippet, the `fill` method is called and the color value is
    provided as the first argument. The `fill` method will loop through all the pixels
    and set them to the desired color, which, in this case, is the color blue. This
    method accepts both the hex color notation and tuples of three integer values.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个代码片段中，调用了`fill`方法，并提供了颜色值作为第一个参数。`fill`方法将循环遍历所有像素，并将它们设置为所需的颜色，这种情况下是蓝色。该方法接受十六进制颜色表示法和三个整数值的元组。
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This operation of setting all the pixels to the same color is relatively popular,
    and the method has been provided for your convenience. However, it is important
    to note that the implementation of this method doesn't just take a simple loop
    and set the color for each pixel. Instead, it uses a feature where you can set
    all the color values before displaying them.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有像素设置为相同颜色的操作相对流行，该方法已经为您提供了便利。然而，重要的是要注意，这种方法的实现并不只是简单地循环并为每个像素设置颜色。相反，它使用了一个功能，可以在显示之前设置所有的颜色值。
- en: The advantage of this feature is that you can first set all the colors, and
    then make a single call to display them all at once. This is a better way of setting
    the pixels rather than with a simple `for` loop, so it provides another good reason
    to use the `fill` method.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 这个功能的优点是您可以先设置所有颜色，然后一次性调用显示它们。这是设置像素的更好方法，而不是用简单的`for`循环，因此它提供了另一个使用`fill`方法的充分理由。
- en: See also
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料找到更多信息：
- en: Documentation on the `fill` method can be found at [https://circuitpython.readthedocs.io/projects/NeoPixel/en/latest/api.html#NeoPixel.NeoPixel.fill](https://circuitpython.readthedocs.io/projects/neopixel/en/latest/api.html#neopixel.NeoPixel.fill).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://circuitpython.readthedocs.io/projects/neopixel/en/latest/api.html#neopixel.NeoPixel.fill](https://circuitpython.readthedocs.io/projects/neopixel/en/latest/api.html#neopixel.NeoPixel.fill)找到关于`fill`方法的文档。
- en: A list of products that work with the NeoPixel library can be found at [https://www.adafruit.com/category/168](https://www.adafruit.com/category/168).
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://www.adafruit.com/category/168](https://www.adafruit.com/category/168)找到与NeoPixel库兼容的产品列表。
- en: Setting a range of NeoPixels to one color
  id: totrans-173
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将一系列NeoPixel设置为一个颜色
- en: This recipe will explore how the slicing feature can be used to set a specific
    range of pixels to a specific color. This can be quite useful when you want to
    turn the ring of pixels into a gauge to show the level of a value from 1 to 10\.
    Essentially, it provides a clearer and simpler way of setting a range of pixels
    to a particular color.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将探讨如何使用切片功能将特定范围的像素设置为特定颜色。当您想要将像素环转换为显示值从1到10的值的仪表时，这可能非常有用。基本上，它提供了一种更清晰和简单的方式来将一系列像素设置为特定颜色。
- en: Getting ready
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要访问Circuit Playground Express上的REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE21]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: You should see the first two NeoPixels light up as red.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该看到前两个NeoPixels点亮为红色。
- en: 'Turn the next three pixels to green and the last five pixels to blue using
    the following code:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码将接下来的三个像素变为绿色，最后五个像素变为蓝色：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The `pixels` attribute understands when you set values using the `slice` method.
    However, it expects that if you set the color for two pixels, then you should
    provide a list of two color values, as was done in the first example.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixels`属性在使用`slice`方法设置值时会理解。但是，它期望如果您为两个像素设置颜色，那么您应该提供一个包含两个颜色值的列表，就像在第一个示例中所做的那样。'
- en: In Python, we can reduce this repetition by taking a list of the color values
    and multiplying it by the required number of values. This is the approach that
    is used to set the three pixels to the color green.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以通过取颜色值的列表并将其乘以所需数量的值来减少这种重复。这是用于将三个像素设置为绿色的方法。
- en: There's more...
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The slicing notation that is used in Python is concise and powerful. It is a
    very smart way to change the colors on a range of pixels in one line of code.
    This very much embraces the Python approach of keeping code short and concise
    without compromising on readability.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中使用的切片表示法简洁而强大。这是一种非常聪明的方式，可以在一行代码中改变一系列像素的颜色。这非常符合Python保持代码简短和简洁而不影响可读性的方法。
- en: See also
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料找到更多信息：
- en: Further details on using the `*` operator to repeat values in Python's lists
    can be found at [http://interactivepython.org/runestone/static/CS152f17/Lists/ConcatenationandRepetition.html](http://interactivepython.org/runestone/static/CS152f17/Lists/ConcatenationandRepetition.html).
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`*`运算符在Python的列表中重复值的更多细节可以在[http://interactivepython.org/runestone/static/CS152f17/Lists/ConcatenationandRepetition.html](http://interactivepython.org/runestone/static/CS152f17/Lists/ConcatenationandRepetition.html)找到。
- en: Documentation on Python string slicing can be found at [https://docs.python.org/3/tutorial/introduction.html#lists](https://docs.python.org/3/tutorial/introduction.html#lists).
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://docs.python.org/3/tutorial/introduction.html#lists](https://docs.python.org/3/tutorial/introduction.html#lists)找到有关Python字符串切片的文档。
- en: Generating random NeoPixel LED colors
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成随机NeoPixel LED颜色
- en: This recipe demonstrates a technique that can be used to endlessly generate
    random colors. We will then use these random colors on a specific NeoPixel. Adding
    randomness to the color section can make projects more interesting, as you can
    never predict the exact sequence of colors that will appear as your script executes.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程演示了一种可以无限生成随机颜色的技术。然后我们将在特定的NeoPixel上使用这些随机颜色。在颜色部分添加随机性可以使项目更有趣，因为您无法预测脚本执行时将出现的确切颜色序列。
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要访问Circuit Playground Express上的REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，请执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE23]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Each time you run the previous lines of code, you should get a random integer
    between the values of 0 and 255.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次运行前面的代码行时，您应该得到一个介于0和255之间的随机整数。
- en: 'Use the following code to define a function, and then call the function to
    confirm that it is working correctly:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码定义一个函数，然后调用该函数确认它是否正常工作：
- en: '[PRE24]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Call the following code repeatedly; the first NeoPixel should change to a random
    color on each call:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复调用以下代码；每次调用时，第一个NeoPixel应更改为随机颜色：
- en: '[PRE25]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Set all the pixels to the same random color on each call using the following
    code:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码在每次调用时将所有像素设置为相同的随机颜色：
- en: '[PRE26]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we use the `random` module, which is part of the Python standard
    library and CircuitPython. Calling `randint` and providing a range from 0 to 255
    will give us a random integer for each color component.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们使用了`random`模块，它是Python标准库和CircuitPython的一部分。调用`randint`并提供从0到255的范围将为每个颜色分量给我们一个随机整数。
- en: We then define the `get_random_color` function to randomly select each of the
    three color components and, therefore, make a random color. Now that we have this
    function, we can call it to set the color of a single pixel or all the pixels,
    as demonstrated in the final two code snippets in this recipe.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们定义`get_random_color`函数来随机选择三个颜色分量，因此产生一个随机颜色。现在我们有了这个函数，我们可以调用它来设置单个像素或所有像素的颜色，就像在这个配方的最后两个代码片段中演示的那样。
- en: There's more...
  id: totrans-211
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The use of the `random` module in MicroPython projects opens up a whole range
    of fun possibilities for unique and different projects. This recipe covered one
    example of combining the random library with code to specify a color so that random
    colors can be chosen. Over 16 million different colors might be randomly selected
    using this method.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在MicroPython项目中使用`random`模块打开了一系列有趣的可能性，可以创建独特和不同的项目。这个配方涵盖了一个例子，结合随机库和代码来指定颜色，以便可以选择随机颜色。使用这种方法可能会随机选择超过1600万种不同的颜色。
- en: See also
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the CircuitPython random library can be found at [https://circuitpython.readthedocs.io/en/3.x/shared-bindings/random/__init__.html](https://circuitpython.readthedocs.io/en/3.x/shared-bindings/random/__init__.html).
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircuitPython随机库的文档可以在[https://circuitpython.readthedocs.io/en/3.x/shared-bindings/random/__init__.html](https://circuitpython.readthedocs.io/en/3.x/shared-bindings/random/__init__.html)找到。
- en: A project using the `random` library and Circuit Playground Express to create
    electronic dice can be found at [https://learn.adafruit.com/circuit-playground-d6-dice/](https://learn.adafruit.com/circuit-playground-d6-dice/).
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`random`库和Circuit Playground Express创建电子骰子的项目可以在[https://learn.adafruit.com/circuit-playground-d6-dice/](https://learn.adafruit.com/circuit-playground-d6-dice/)找到。
- en: Creating LED animations with random colors
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用随机颜色创建LED动画
- en: This recipe will combine some aspects of the previous recipes in this chapter
    to create an animation using randomly selected colors. This recipe builds on the
    techniques of other recipes to create your first animation. With 10 pixels on
    the board, there are a lot of options for creating engaging visual animations
    on the board—this is just one of those.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将结合本章中以前配方的一些方面，使用随机选择的颜色创建动画。这个配方基于其他配方的技术来创建你的第一个动画。在板上有10个像素，有很多选项可以在板上创建引人入胜的视觉动画——这只是其中之一。
- en: Getting ready
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 做好准备
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本配方中提供的代码。
- en: How to do it...
  id: totrans-221
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE27]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Run the following block of code and a `10` second animation of colors should
    appear around the ring of pixels on the board:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下代码块，板上的像素环周围应该出现一个持续10秒的颜色动画：
- en: '[PRE28]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Next, run the animation for 30 seconds and cycle through all the pixels three
    times, with a 1-second delay between each light change:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，运行动画30秒，并循环三次所有像素，每次光变化之间延迟1秒：
- en: '[PRE29]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For this final animation, run the animation for five seconds and change all
    the pixel colors once a second:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于最后一个动画，运行动画5秒，并在每秒更改所有像素颜色一次：
- en: '[PRE30]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Three different animations are presented in this recipe. When it comes to light
    animations, the sky's the limit. There are so many different ways to control color
    change and timing and each different approach will create a slightly different
    visual effect. However, a key aspect of all animation is timing; we can control
    the pace of the animation by using the `sleep` call, which is part of the `time`
    module. In this way, we can slow down or speed up the animations we create.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方中介绍了三种不同的动画。在灯光动画方面，天空是极限。有很多不同的方法来控制颜色变化和时间，每种不同的方法都会产生略有不同的视觉效果。然而，所有动画的一个关键方面是时间；我们可以使用`sleep`调用来控制动画的节奏，这是`time`模块的一部分。通过这种方式，我们可以减慢或加快我们创建的动画的速度。
- en: The first animation in this recipe is a simple `for` loop, which sets the color
    of each pixel to a random color and pauses for one second between these color
    changes. The second animation builds on the first one by having an outer loop
    that loops 3 times and so changes the pixels 30 times.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方中的第一个动画是一个简单的`for`循环，它将每个像素的颜色设置为随机颜色，并在这些颜色变化之间暂停一秒。第二个动画在第一个动画的基础上进行了改进，通过一个外部循环循环3次，因此改变了像素30次。
- en: Finally, the last animation takes a different approach by setting all the pixels
    to the same color and then changing them together during each loop.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，最后一个动画采用了不同的方法，将所有像素设置为相同的颜色，然后在每个循环期间一起改变它们。
- en: There's more...
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The animations in this recipe can be tweaked to create a variety of different
    animations. For instance, you could change the speed of the animation or the number
    of times the animation loops around the pixels. The preceding code can be used
    in a function that receives these two parameters as arguments. This can then be
    used in a larger program, which will call the function to make animations with
    different settings.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方中的动画可以进行调整，以创建各种不同的动画。例如，您可以改变动画的速度或动画循环像素的次数。前面的代码可以用在一个接收这两个参数作为参数的函数中。然后可以在一个更大的程序中使用它，该程序将调用该函数以使用不同的设置制作动画。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the CircuitPython time library can be found at [https://circuitpython.readthedocs.io/en/3.x/shared-bindings/time/__init__.html](https://circuitpython.readthedocs.io/en/3.x/shared-bindings/time/__init__.html).
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CircuitPython时间库的文档可以在[https://circuitpython.readthedocs.io/en/3.x/shared-bindings/time/__init__.html](https://circuitpython.readthedocs.io/en/3.x/shared-bindings/time/__init__.html)找到。
- en: A project using the Circuit Playground Express to create an animated bike light
    can be found at [https://learn.adafruit.com/circuit-playground-bike-light](https://learn.adafruit.com/circuit-playground-bike-light).
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Circuit Playground Express创建动画自行车灯的项目可以在[https://learn.adafruit.com/circuit-playground-bike-light](https://learn.adafruit.com/circuit-playground-bike-light)找到。
- en: Creating LED animations with rainbow colors
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用彩虹颜色创建LED动画
- en: This recipe will produce a ring of colors following the same sequence of colors
    found in a rainbow. These colors will each appear after a certain delay, creating
    a rainbow animation effect. Using a sequence of colors that naturally fits together,
    like the ones found in the rainbow, can be both pleasing and engaging. The strength
    of this animation is in learning how to control the exact sequence of colors being
    animated, whether they be in a rainbow sequence or another sequence of your choosing.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这个方案将产生一个遵循彩虹中相同颜色顺序的颜色环。这些颜色将在一定的延迟后依次出现，产生彩虹动画效果。使用自然组合在一起的颜色序列，比如彩虹中找到的颜色，既令人愉悦又引人入胜。这个动画的优势在于学会如何控制正在动画中的确切颜色序列，无论是彩虹序列还是您选择的其他序列。
- en: Getting ready
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本方案中提供的代码。
- en: How to do it...
  id: totrans-245
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To do this, perform the following steps:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE31]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The following block of code defines a list of color values that have the same
    values and sequence as that which appears in a rainbow:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码块定义了一个颜色值列表，其值和顺序与彩虹中的相同：
- en: '[PRE32]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Then, set a more comfortable level of brightness and turn off all the pixels
    before starting the animation:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在开始动画之前，设置一个更舒适的亮度级别并关闭所有像素：
- en: '[PRE33]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Using the following block of code, loop through the seven colors in the rainbow
    and set one pixel to each color, with a brief delay of `0.2` seconds between each
    light change:'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块，循环遍历彩虹中的七种颜色，并将一个像素设置为每种颜色，每次灯光变化之间有短暂的`0.2`秒延迟：
- en: '[PRE34]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Use the following animation to go back to each pixel and turn it off at the
    same rate of `0.2` seconds per light change:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下动画返回到每个像素，并以每次灯光变化的相同速度`0.2`秒关闭它：
- en: '[PRE35]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The following code combines all the steps described and wraps these into one
    infinite `while` loop. Add this section of code to the `main.py` file, and then
    create a continuous rainbow animation:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码结合了描述的所有步骤，并将这些步骤包装成一个无限的`while`循环。将此代码部分添加到`main.py`文件中，然后创建一个连续的彩虹动画：
- en: '[PRE36]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'A rainbow in nature is made up of seven colors: red, orange, yellow, green,
    blue, indigo, and violet. We store these colors'' values, and their correct sequences
    as they appear in nature, in a list. The brightness level is set and then the
    `fill` method is called to turn off all the pixels on the board.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 自然界中的彩虹由七种颜色组成：红色、橙色、黄色、绿色、蓝色、靛蓝色和紫罗兰色。我们将这些颜色的值以及它们在自然界中出现的正确顺序存储在一个列表中。设置亮度级别，然后调用`fill`方法关闭板上的所有像素。
- en: An infinite loop is started that contains two loops. The first inner loop will
    loop through each color in the rainbow and set one pixel to each color. The second
    inner loop will then go back to the seven pixels that were colored and turn each
    one off.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 启动一个包含两个循环的无限循环。第一个内部循环将循环遍历彩虹中的每种颜色，并将一个像素设置为每种颜色。然后，第二个内部循环将返回到被着色的七个像素，并关闭每一个。
- en: There's more...
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The following photograph shows the rainbow animation from this recipe running
    on the Circuit Playground Express:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 以下照片显示了此处方案中的彩虹动画在Circuit Playground Express上运行：
- en: '![](assets/a153e9c0-d041-4160-b6ae-a24207d78566.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a153e9c0-d041-4160-b6ae-a24207d78566.png)'
- en: There are many ways to make further derivative animations from this rainbow
    animation. For instance, you could add more colors that are not part of the natural
    rainbow. We have defined 7 colors but there are 10 pixels on the board, so you
    could define another 3 different colors. You could also have the starting pixel
    be randomly selected in each loop, so that the animation starts at a different
    pixel in each loop.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以从这个彩虹动画中制作更多的衍生动画。例如，您可以添加更多不属于自然彩虹的颜色。我们定义了7种颜色，但板上有10个像素，所以您可以定义另外3种不同的颜色。您还可以使起始像素在每个循环中随机选择，这样动画在每个循环中都从不同的像素开始。
- en: See also
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: The sequence and names of the seven colors of the rainbow can be found at [https://sciencetrends.com/7-colors-rainbow-order/](https://sciencetrends.com/7-colors-rainbow-order/).
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 彩虹的七种颜色的顺序和名称可以在[https://sciencetrends.com/7-colors-rainbow-order/](https://sciencetrends.com/7-colors-rainbow-order/)找到。
- en: A different implementation of a rainbow animation can be found at [https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-NeoPixel](https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-neopixel).
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-neopixel](https://learn.adafruit.com/adafruit-circuit-playground-express/circuitpython-neopixel)找到彩虹动画的另一种实现。
