- en: Chapter 5. Matplotlib Charts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. Matplotlib图表
- en: In this chapter, we will create beautiful charts using Python 3 with the Matplotlib
    module.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Python 3和Matplotlib模块创建漂亮的图表。
- en: Creating beautiful charts using Matplotlib
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 创建漂亮的图表
- en: Matplotlib – downloading modules using pip
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib – 使用pip下载模块
- en: Matplotlib – downloading modules with whl extensions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Matplotlib – 使用 whl 扩展下载模块
- en: Creating our first chart
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的第一个图表
- en: Placing labels on charts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在图表上添加标签
- en: How to give the chart a legend
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何给图表添加图例
- en: Scaling charts
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比例图
- en: Adjusting the scale of charts dynamically
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 动态调整图表的缩放比例
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will create beautiful charts that visually represent data.
    Depending on the format of the data source, we can plot one or several columns
    of data in the same chart.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建美观的图表，以直观地展示数据。根据数据源格式，我们可以在同一图表中绘制一个或多个数据列。
- en: We will be using the Python Matplotlib module to create our charts.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 Python Matplotlib 模块来创建我们的图表。
- en: In order to create these graphical charts, we need to download additional Python
    modules and there are several ways to install them.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建这些图形图表，我们需要下载额外的 Python 模块，并且有几种安装它们的方法。
- en: This chapter will explain how to download the Matplotlib Python module, all
    other required Python modules, and the ways to do this.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解释如何下载Matplotlib Python模块、所有其他必需的Python模块以及完成这一任务的方法。
- en: After we have the required modules installed, we will then create our own Pythonic
    charts.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了所需的模块之后，我们将创建我们自己的Python图表。
- en: Creating beautiful charts using Matplotlib
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Matplotlib 创建漂亮的图表
- en: This recipe introduces us to the Matplotlib Python module, which enables us
    to create visual charts using Python 3.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这份食谱向我们介绍了 Matplotlib Python 模块，它使我们能够使用 Python 3 创建可视化图表。
- en: 'The following URL is a great place to start exploring the world of Matplotlib
    and will teach you how to create many charts that are not presented in this chapter:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以下网址是一个开始探索 Matplotlib 世界的好地方，它将教会你如何创建本章未展示的许多图表：
- en: '[http://matplotlib.org/users/screenshots.html](http://matplotlib.org/users/screenshots.html)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[matplotlib用户截图](http://matplotlib.org/users/screenshots.html)'
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In order to use the Matplotlib Python module, we first have to install this
    module, as well as several other related Python modules such as numpy.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 Matplotlib Python 模块，我们首先必须安装此模块，以及几个其他相关的 Python 模块，例如 numpy。
- en: If you are running a version of Python less than 3.4.3, I would encourage you
    to upgrade your version of Python as we will be using the Python pip module throughout
    this chapter to install the required Python modules, and pip is installed with
    3.4.3 and above.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用低于 3.4.3 版本的 Python，我建议你升级你的 Python 版本，因为在本章中我们将使用 Python pip 模块来安装所需的
    Python 模块，而 pip 是从 3.4.3 版本开始安装的。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: It is possible to install pip with earlier versions of Python 3 but the process
    is not very intuitive, so it is definitely better to upgrade to 3.4.3 or above.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用早期版本的 Python 3 可以安装 pip，但这个过程并不直观，因此肯定最好是升级到 3.4.3 或更高版本。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following picture is an example of what incredible graphical charts can
    be created using Python with the Matplotlib module.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片展示了使用Python和Matplotlib模块可以创建多么令人惊叹的图表。
- en: I have copied the following code from the [http://matplotlib.org/](http://matplotlib.org/)
    website, which creates this incredible chart. There are many examples available
    on this site and I encourage you to try them out until you find the kind of charts
    you like to create.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我已从[http://matplotlib.org/](http://matplotlib.org/)网站复制了以下代码，它创建了这张令人难以置信的图表。该网站上有很多示例，我鼓励您尝试它们，直到找到您喜欢创建的图表类型。
- en: Here is the code to create the chart, in less than 25 lines of Python code,
    including whitespaces.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是创建图表的代码，少于25行Python代码，包括空白字符。
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Running the code creates the chart pictured as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码将生成如下所示的图表：
- en: '![How to do it...](img/B04829_05_01.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_01.jpg)'
- en: Running the code using Python 3.4 or above with the Eclipse PyDev plugin might
    show some unresolved import errors. This seems to be a bug in PyDev or Java.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 3.4 或更高版本以及 Eclipse PyDev 插件运行代码可能会显示一些未解决的导入错误。这看起来像是 PyDev 或 Java
    中的一个错误。
- en: Just ignore those errors if you are developing using Eclipse, as the code will
    run successfully.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在使用 Eclipse 进行开发时遇到错误，请忽略它们，因为代码将能够成功运行。
- en: How it works...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to create beautiful graphs as shown in the preceding screenshot, we
    need to download several other Python modules.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建如图所示的前一个屏幕截图中的美丽图表，我们需要下载几个其他的Python模块。
- en: The following recipes will guide us through how to successfully download all
    the required modules, which enables us to create our own beautiful charts.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下食谱将指导我们如何成功下载所有必需的模块，这使我们能够创建我们自己的美丽图表。
- en: Matplotlib – downloading modules using pip
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib – 使用pip下载模块
- en: The usual way to download additional Python modules is by using pip. The pip
    module comes pre-installed with the latest version of Python (3.4 and above).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 下载额外的 Python 模块的常用方法是使用 pip。pip 模块随 Python 最新版（3.4 及以上版本）预装。
- en: Note
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: If you are using an older version of Python, you might have to download both
    pip and setuptools yourself.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用较旧的 Python 版本，你可能需要自己下载 pip 和 setuptools。
- en: In addition to using the Python installer, there are several other precompiled
    Windows executables that make it easy for us to install Python modules such as
    Matplotlib.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用 Python 安装程序外，还有几个预先编译的 Windows 可执行文件，这使得我们能够轻松安装 Python 模块，例如 Matplotlib。
- en: This recipe will show how to successfully install Matplotlib via a Windows executable,
    as well as using pip in order to install the additional modules that the Matplotlib
    library requires.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱将展示如何通过Windows可执行文件成功安装Matplotlib，以及如何使用pip来安装Matplotlib库所需的附加模块。
- en: Getting ready
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: All we need to do to download the required Python modules to use the Matplotlib
    module is to have a Python release of 3.4 (or later) installed on our PC.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要下载使用Matplotlib模块所需的Python模块，只需在我们的电脑上安装Python 3.4（或更高版本）即可。
- en: How to do it...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We can install Matplotlib via a Windows executable from the official Matplotlib
    website.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过从官方 Matplotlib 网站下载的 Windows 可执行文件来安装 Matplotlib。
- en: Make sure you install the Matplotlib version that matches the Python version
    you are using. For example, download and install `Matplotlib-1.4.3.win-amd64-py3.4.exe`
    if you have Python 3.4 installed on a 64-bit OS such as Microsoft Windows 7.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您安装的 Matplotlib 版本与您正在使用的 Python 版本相匹配。例如，如果您在 64 位操作系统（如 Microsoft Windows
    7）上安装了 Python 3.4，请下载并安装 `Matplotlib-1.4.3.win-amd64-py3.4.exe`。
- en: Note
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: The "amd64" in the middle of the executable name means you are installing the
    64-bit version. If you are using a 32-bit x86 system then installing amd64 will
    not work. Similar problems can occur if you have installed a 32-bit version of
    Python and download 64-bit Python modules.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可执行文件名中间的 "amd64" 表示您正在安装64位版本。如果您使用的是32位x86系统，那么安装amd64将不会生效。如果您已经安装了32位的Python版本并下载了64位的Python模块，也可能出现类似的问题。
- en: '![How to do it...](img/B04829_05_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_02.jpg)'
- en: 'Running the executable will get us started and looks like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行可执行文件将使我们开始，看起来是这样的：
- en: '![How to do it...](img/B04829_05_03.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_03.jpg)'
- en: We can verify that we have successfully installed Matplotlib by looking at our
    Python installation directory.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过查看我们的 Python 安装目录来验证我们已经成功安装了 Matplotlib。
- en: 'After a successful installation, the Matplotlib folder is added to site-packages.
    Using a default installation, the full path to the site-packages folder on Windows
    is:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，Matplotlib 文件夹将被添加到 site-packages 中。使用默认安装，Windows 上 site-packages 文件夹的完整路径为：
- en: '`C:\Python34\Lib\site-packages\matplotlib\`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`C:\Python34\Lib\site-packages\matplotlib\`'
- en: '![How to do it...](img/B04829_05_04.jpg)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_04.jpg)'
- en: The simplest plotting example on the official Matplotlib website requires the
    use of the Python numpy module, so let's download and install this module next.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在官方 Matplotlib 网站上的最简单绘图示例需要使用 Python numpy 模块，所以让我们接下来下载并安装这个模块。
- en: Note
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Numpy is a mathematical module that enables the graphing of the Matplotlib charts
    but goes well beyond Matplotlib. If the software you are developing requires a
    lot of mathematical computations, you definitely want to check out numpy.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Numpy是一个数学模块，它不仅能够实现Matplotlib图表的绘图，而且功能远超Matplotlib。如果你正在开发的软件需要大量的数学计算，你绝对应该检查一下numpy。
- en: There is one excellent website that gives us quick links to pretty much all
    the Python modules out there. It serves as a great time saver by pointing out
    which other Python modules are necessary to use Matplotlib successfully and gives
    us hyperlinks to download these modules, which enables us to install them quickly
    and easily.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个极好的网站为我们提供了快速链接，几乎涵盖了所有现有的Python模块。它通过指出哪些其他Python模块对于成功使用Matplotlib是必要的，并提供了下载这些模块的超链接，这使得我们能够快速且轻松地安装它们。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'Here is the link:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是链接：
- en: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
- en: '![How to do it...](img/B04829_05_05.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_05.jpg)'
- en: Notice how the file extensions of the installer packages all end in whl. In
    order to use them, we have to install the Python wheel module, and we do this
    using pip.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到安装包的文件扩展名都以whl结尾。为了使用它们，我们必须安装Python wheel模块，并且我们使用pip来完成这一操作。
- en: Note
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Wheels are the new standard of Python distribution and are intended to replace
    eggs.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 轮子（Wheels）是 Python 分发的最新标准，旨在取代 eggs。
- en: 'You can find more details at the following website:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下网站上找到更多详细信息：
- en: '[http://pythonwheels.com/](http://pythonwheels.com/)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://pythonwheels.com/](http://pythonwheels.com/)'
- en: It is best to run the Windows command processor as an administrator to avoid
    potential installation errors.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 最好以管理员身份运行 Windows 命令处理器，以避免潜在的安装错误。
- en: '![How to do it...](img/B04829_05_06.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_06.jpg)'
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The common way to download Python modules is by using pip, as shown above. In
    order to install all the modules that Matplotlib requires, the download format
    of the main website where we can download them has changed to using a whl format.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下载 Python 模块的常见方法是使用 pip，如上所示。为了安装 Matplotlib 所需的所有模块，我们可以下载它们的主网站上的下载格式已更改为使用
    whl 格式。
- en: The next recipe will explain how to install Python modules using wheel.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个菜谱将解释如何使用wheel安装Python模块。
- en: Matplotlib – downloading modules with whl extensions
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Matplotlib – 使用 whl 扩展下载模块
- en: We will use several additional Python modules that Matplotlib requires and,
    in this recipe, we will download them using Python's new module distribution standard,
    called wheel.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Matplotlib所需的几个额外的Python模块，在这个菜谱中，我们将使用Python的新模块分发标准，称为wheel，来下载它们。
- en: Note
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'You can find the Python Enhancement Proposal (PEP) for the new wheel standard
    at the following URL: [https://www.python.org/dev/peps/pep-0427/](https://www.python.org/dev/peps/pep-0427/)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下网址找到关于新轮标准（wheel standard）的Python增强提案（PEP）：[https://www.python.org/dev/peps/pep-0427/](https://www.python.org/dev/peps/pep-0427/)
- en: Getting ready
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In order to download Python modules with a whl extension, the Python wheel module
    has to be installed first, which was explained in the previous recipe.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 为了下载带有whl扩展名的Python模块，必须首先安装Python wheel模块，这在之前的菜谱中已有解释。
- en: How to do it...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's download `numpy-1.9.2+mkl-cp34-none-win_amd64.whl` from the web. After
    installing the wheel module, we can use pip to install packages with whl file
    extensions.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从网络上下载 `numpy-1.9.2+mkl-cp34-none-win_amd64.whl`。安装完轮子模块后，我们可以使用 pip 来安装带有
    whl 文件扩展名的包。
- en: Note
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Pip ships with Python 3.4.3 and above. If you are using an older version of
    Python, I would recommend installing pip because it makes installing all other
    additional Python modules so much easier.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Pip 与 Python 3.4.3 及以上版本兼容。如果你正在使用较旧的 Python 版本，我建议安装 pip，因为它使得安装所有其他额外的 Python
    模块变得容易得多。
- en: An even better suggestion might be to upgrade your Python version to the latest
    stable release. By the time you read this book, that most likely will be Python
    3.5.0 or above.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的建议可能是将您的 Python 版本升级到最新的稳定版本。到您阅读这本书的时候，那很可能将是 Python 3.5.0 或更高版本。
- en: Python is free software. It does not cost us anything to upgrade.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是免费软件。升级它对我们来说不花费任何费用。
- en: 'Browse to the folder where the package to be installed is located, and install
    it using the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览到要安装的软件包所在的文件夹，并使用以下命令进行安装：
- en: '[PRE1]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '![How to do it...](img/B04829_05_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_07.jpg)'
- en: Now we can create our first Matplotlib chart, using the simplest example application
    from the official website. After that, we will be creating our own charts.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以创建我们的第一个Matplotlib图表，使用官方网站上最简单的示例应用程序。之后，我们将创建自己的图表。
- en: '![How to do it...](img/B04829_05_08.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_08.jpg)'
- en: The fact that we are not quite ready to run the preceding code shows that we
    need to download more modules. While at first having to download more modules
    might seem to be a little bit annoying, it really is a form of code reuse.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有准备好运行前面的代码这一事实表明我们需要下载更多的模块。虽然一开始可能觉得下载更多模块有点烦人，但实际上这是一种代码复用的形式。
- en: So let's download and install the six and all the other required modules (dateutil,
    pyparsing, and so on) using pip with wheel until our code works and creates a
    nice chart from only a few lines of Python code.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们使用pip和wheel下载并安装所需的六个以及其他所有模块（如dateutil、pyparsing等），直到我们的代码运行正常并仅从几行Python代码中创建出一张漂亮的图表。
- en: We can download all the required modules from the same website we just used
    to install numpy. This website even lists all of the other modules the module
    we are installing depends on and has hyperlinks to jump to the installation software
    located in this very same website.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从刚刚用来安装numpy的同一网站下载所有所需的模块。这个网站甚至列出了我们正在安装的模块所依赖的所有其他模块，并且提供了超链接，可以直接跳转到位于该网站内的安装软件。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'As mentioned previously, the URL for installing Python modules is: [http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，安装 Python 模块的网址是：[http://www.lfd.uci.edu/~gohlke/pythonlibs/](http://www.lfd.uci.edu/~gohlke/pythonlibs/)
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The website that enables us to download many Python modules from one convenient
    place also provides other Python modules. Not all dependencies shown are required.
    It depends on what you are developing. You might have to download and install
    additional modules as your journey into using the Matplotlib library advances.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 该网站使我们能够从一个便捷的地方下载许多Python模块，同时也提供了其他Python模块。并非所有显示的依赖项都是必需的。这取决于你正在开发什么。随着你使用Matplotlib库的旅程不断深入，你可能需要下载并安装额外的模块。
- en: '![How it works...](img/B04829_05_09.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04829_05_09.jpg)'
- en: Creating our first chart
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的第一个图表
- en: Now that we have all of the required Python modules installed, we can create
    our own charts using Matplotlib.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了所有必需的 Python 模块，我们可以使用 Matplotlib 创建自己的图表。
- en: We can create charts from only a few lines of Python code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用几行Python代码就创建图表。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Using the code from the previous recipe, we can now create a chart that looks
    similar to the one shown next.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 使用上一道菜谱中的代码，我们现在可以创建一个看起来与下面展示的图表相似的图表。
- en: How to do it...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Using the minimum amount of code as presented on the official website, we can
    create our first chart. Well, almost. The sample code shown on the website does
    not work until we import the `show` method and then call it.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用官方网站上展示的最少代码量，我们可以创建我们的第一个图表。嗯，几乎是这样。网站上展示的示例代码在导入`show`方法并调用它之前是不工作的。
- en: '![How to do it...](img/B04829_05_10.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_10.jpg)'
- en: We can simplify the code and even improve it by using another of many examples
    provided on the official Matplotlib website.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用官方 Matplotlib 网站提供的众多示例之一来简化代码，甚至改进它。
- en: '![How to do it...](img/B04829_05_11.jpg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_11.jpg)'
- en: How it works...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Python Matplotlib module, combined with add-ons such as numpy, create a
    very rich programming environment that enables us to do mathematical computations
    and plot them in visual charts very easily.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的 Matplotlib 模块，结合如 numpy 等插件，创建了一个非常丰富的编程环境，使我们能够非常容易地进行数学计算并在可视化图表中绘制它们。
- en: The Python numpy method `arange` does not intend to arrange anything. It means
    to create "a range", which in Python is used for the built-in "range" operator.
    The `linspace` method can create similar confusion. Who is "lin" and in what "space"?
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Python numpy 方法 `arange` 并非用于排列任何东西。它的意思是创建“一个范围”，这在 Python 中用于内置的 “range” 操作符。`linspace`
    方法也可能造成类似的困惑。这里的 “lin” 是谁，又在什么 “空间” 中？
- en: As it turns out, the name means "linear spaced vector".
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这个名字的意思是“线性间隔向量”。
- en: The pyglet function `show` displays the graph we created. Calling `show()` has
    some side-effects when you try to plot another graph after successfully creating
    the first one.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet 函数 `show` 显示我们创建的图表。在成功创建第一个图表之后，尝试绘制另一个图表时调用 `show()` 会有一些副作用。
- en: Placing labels on charts
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在图表上放置标签
- en: So far, we have used the default Matplotlib GUI. Now we will create some tkinter
    GUIs using Matplotlib.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用了默认的Matplotlib GUI。现在我们将使用Matplotlib创建一些tkinter GUI。
- en: This will require a few more lines of Python code and importing some more libraries,
    and it is well worth the effort, because we are gaining control of our paintings
    using canvases.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这将需要几行额外的 Python 代码和导入一些更多的库，但这非常值得努力，因为我们正在通过画布来掌控我们的画作。
- en: We will position labels onto both the horizontal as well as the vertical axes,
    aka *x* and *y*.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将标签定位到水平轴以及垂直轴上，也就是所说的*x*轴和*y*轴。
- en: We will do this by creating a Matplotlib figure upon which we will draw.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过创建一个Matplotlib图形来实现这一点，然后我们在其上绘制。
- en: We will also learn how to use sub plots, which will enable us to draw more than
    one graph in the same window.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将学习如何使用子图，这将使我们能够在同一个窗口中绘制多个图表。
- en: Getting ready
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: With the necessary Python modules installed and knowing where to find the official
    online documentation and tutorials, we can now carry on with our creation of Matplotlib
    charts.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装了必要的Python模块，并知道如何找到官方在线文档和教程后，我们现在可以继续创建Matplotlib图表了。
- en: How to do it...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: While `plot` is the easiest way to create a Matplotlib chart, using `Figure`
    in combination with `Canvas` creates a more custom-made graph, which looks much
    better and also enables us to add buttons and other widgets to it.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`plot`是创建Matplotlib图表最简单的方式，但结合使用`Figure`和`Canvas`可以创建一个更加定制化的图表，看起来更加美观，同时也使我们能够向其中添加按钮和其他小部件。
- en: '[PRE2]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running the preceding code results in the following chart:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码将生成以下图表：
- en: '![How to do it...](img/B04829_05_12.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_12.jpg)'
- en: In the first line of code after the import statements, we create an instance
    of a `Figure` object. Next, we add sub plots to this figure by calling `add_subplot(211)`.
    The first number in 211 tells the figure how many plots to add, the second number
    determines the number of columns and the third tells the figure in which order
    to display the plots.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句之后的代码第一行，我们创建了一个`Figure`对象的实例。接下来，通过调用`add_subplot(211)`，我们将子图添加到这个图中。211中的第一个数字告诉图需要添加多少个绘图，第二个数字确定列数，第三个数字告诉图以何种顺序显示绘图。
- en: We also add a grid and change its default line style.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还添加了一个网格并更改了其默认的线条样式。
- en: Even though we only display one plot in the chart, by choosing 2 for the number
    of sub plots, we are moving the plot up, which results in extra whitespace at
    the bottom of the chart. This first plot now only occupies 50% of the screen,
    which affects how large the grid lines of this plot are when being displayed.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们在图表中只显示一个图表，通过选择2作为子图的数量，我们实际上是在将图表向上移动，这导致图表底部出现额外的空白。现在这个图表只占据了屏幕的50%，这影响了显示时该图表网格线的宽度。
- en: Note
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Experiment with the code by uncommenting the code for `axis =` and `axis.grid()`
    to see the different effects.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 通过取消注释`axis =`和`axis.grid()`的代码来实验，以查看不同的效果。
- en: We can add more sub plots by assigning them to the second position using `add_subplot(212)`.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过将它们分配到第二个位置来添加更多子图，使用`add_subplot(212)`。
- en: '[PRE3]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Running the slightly modified code now adds axis1 to the chart. For the grid
    of the bottom plot, we left the line style at its default.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行略微修改后的代码，将轴1添加到图表中。对于底部图表的网格，我们保留了默认的线条样式。
- en: '![How to do it...](img/B04829_05_13.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_13.jpg)'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We imported the necessary Matplotlib modules to create a figure and a canvas
    onto which to draw the chart. We gave it some values for the *x* and *y* axes
    and set a few of very many configuration options.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们导入了必要的Matplotlib模块来创建一个图表，并在其上绘制图表。我们为*x*和*y*轴赋予了一些值，并设置了一些众多配置选项中的几个。
- en: We created our own tkinter window in which to display the chart and customized
    the positioning of the plots.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了自己的tkinter窗口来显示图表，并自定义了图表的位置。
- en: As we have seen in previous chapters, in order to create a tkinter GUI, we first
    have to import the tkinter module and then create an instance of the `Tk` class.
    We assign this class instance to a variable we named `root`, which is a name that
    is often used in examples.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在前几章所见，为了创建一个tkinter图形用户界面，我们首先必须导入tkinter模块，然后创建`Tk`类的实例。我们将这个类的实例分配给一个我们命名为`root`的变量，这个名称在示例中经常被使用。
- en: Our tkinter GUI will not become visible until we start the main event loop and,
    to do that, we use `root.mainloop()`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的tkinter图形用户界面（GUI）将不会变得可见，直到我们启动主事件循环，为此，我们使用`root.mainloop()`。
- en: One important reason to avoid the Matplotlib default GUI here and instead create
    our own GUI using tkinter is that we wanted to improve the not very pretty appearance
    of the default Matplotlib GUI and we can very easily do this using tkinter.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 避免在这里使用Matplotlib默认的GUI，而是创建我们自己的GUI使用tkinter的一个重要原因是，我们希望改善默认Matplotlib GUI不太美观的外观，而我们可以非常容易地使用tkinter做到这一点。
- en: We no longer have those out-of-date looking buttons appearing at the bottom
    of the Matplotlib GUI if we build our GUI with tkinter.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用tkinter构建GUI，那么Matplotlib GUI底部将不再出现那些看起来过时的按钮。
- en: At the same time, the Matplotlib GUI has a feature our tkinter GUI does not
    have and that is that we can actually see the x and y coordinates in the Matplotlib
    GUI when we move our mouse around within the chart. The x and y coordinate positions
    are displayed in the bottom right corner.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，Matplotlib的GUI有一个我们的tkinter GUI没有的功能，那就是当我们把鼠标在图表内移动时，我们实际上可以看到Matplotlib
    GUI中的x和y坐标。x和y坐标的位置显示在右下角。
- en: How to give the chart a legend
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何给图表添加图例
- en: Once we start plotting more than one line of data points, things might become
    a little bit unclear. By adding a legend to our graphs, we can tell which data
    is what, and what it actually means.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们开始绘制多于一条的数据点线，事情可能会变得有些不清楚。通过在我们的图表中添加图例，我们可以知道哪些数据代表什么，以及它实际上意味着什么。
- en: We do not have to choose different colors to represent the different data. Matplotlib
    automatically assigns a different color to each line of data points.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不必选择不同的颜色来表示不同的数据。Matplotlib会自动为每条数据点线分配不同的颜色。
- en: All we have to do is create the chart and add a legend to it.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要创建图表并为其添加图例。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: In this recipe, we will enhance the chart from the previous recipe. We will
    only plot one chart.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将增强之前菜谱中的图表。我们只会绘制一个图表。
- en: How to do it...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: First, we will plot more lines of data in the same chart and then we will add
    a legend to the chart.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将在同一图表中绘制更多数据行，然后我们将为图表添加图例。
- en: We do this by modifying the code from the previous recipe.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过修改前一个菜谱中的代码来完成这项工作。
- en: '[PRE4]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Running the modified code creates the following chart, which has a legend in
    the upper right corner:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 运行修改后的代码会生成以下图表，其中图例位于右上角：
- en: '![How to do it...](img/B04829_05_14.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_14.jpg)'
- en: We are only plotting one graph in this recipe and we do this by changing `fig.add_subplot(111)`.
    We also slightly modify the size of the figure via the `figsize` property.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们只绘制一个图表，这是通过更改`fig.add_subplot(111)`来实现的。我们还通过`figsize`属性稍微修改了图表的大小。
- en: Next, we create three Python lists that contain the values to be plotted. When
    we plot the data, we save the references to the plots in local variables.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们创建三个包含要绘制值的 Python 列表。当我们绘制数据时，我们将绘图引用保存在局部变量中。
- en: We create the legend by passing in a tuple with the references to the three
    plots, another tuple that contains the strings that are then displayed in the
    legend, and in the third argument we position the legend within the chart.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过传入一个包含三个图表引用的元组、另一个包含随后在图例中显示的字符串的元组，以及在第三个参数中定位图例在图表中的位置，来创建图例。
- en: The default settings of Matplotlib assign a color scheme to the lines being
    plotted.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: Matplotlib的默认设置将颜色方案分配给正在绘制的线条。
- en: We can easily change this default setting of colors to the colors we prefer
    by setting a property when we plot each axis.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过在绘制每个轴时设置一个属性，轻松地将这个默认的颜色设置更改为我们喜欢的颜色。
- en: We do this by using the color property and assigning it an available color value.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过使用颜色属性并为其分配一个可用的颜色值来实现这一点。
- en: '[PRE5]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note how the comma after the variable assignments of t0, t1, and t2 is not a
    mistake but is required in order to create the legend.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到在 t0、t1 和 t2 的变量赋值之后的逗号不是一个错误，而是为了创建图例所必需的。
- en: The comma after each variable turns a list into a tuple. If we leave this out,
    our legend will not be displayed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 每个变量后面的逗号将列表转换为元组。如果我们省略这一点，我们的图例将不会显示。
- en: The code will still run, just without the intended legend.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 代码仍然会运行，只是没有预期的图例。
- en: Note
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: When we remove the comma after the t0 = assignment, we get an error and the
    first line no longer appears in the figure. The chart and legend still get created,
    but without the first line appearing in the legend.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在t0 =赋值之后删除逗号时，会出现错误，并且第一行不再出现在图中。图表和图例仍然会被创建，但图例中不会出现第一行。
- en: '![How to do it...](img/B04829_05_15.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_15.jpg)'
- en: How it works...
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We enhanced our chart by plotting three lines of data in the same chart and
    giving it a legend in order to distinguish the data that those three lines plot.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在同一图表中绘制三条数据线并添加图例来增强我们的图表，以便区分这三条线所表示的数据。
- en: Scaling charts
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比例图
- en: In the previous recipes, while creating our first charts and enhancing them,
    we hard-coded the scaling of how those values are visually represented.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，当我们创建第一个图表并增强它们时，我们硬编码了如何视觉表示这些值的缩放。
- en: While this served us well for the values we were using, we often plot charts
    from very large databases.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这对于我们使用的数值来说效果很好，但我们经常从非常大的数据库中绘制图表。
- en: Depending on the range of that data, our hard-coded values for the vertical
    y-dimension might not always be the best solution, which may make it hard to see
    the lines in our charts.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 根据数据范围的不同，我们硬编码的垂直y维度值可能并不总是最佳解决方案，这可能会导致我们在图表中难以看到线条。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will improve our code from the previous recipe. If you have not typed in
    all of the code from all of the previous recipes, just download the code for this
    chapter and it will get you started (and then you can have a lot of fun creating
    GUIs, charts, and so on, using Python).
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从之前的食谱中改进我们的代码。如果你还没有输入所有之前的食谱中的代码，只需下载本章的代码即可开始（然后你可以有很多乐趣，使用Python创建GUI、图表等等）。
- en: How to do it...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Modify the `yValues1` line of code from the previous recipe to use 50 as the
    third value.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 将前一个菜谱中的`yValues1`代码行修改为使用50作为第三个值。
- en: '[PRE6]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The only difference to the code that created the chart in the previous recipe
    is one data value.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一道菜谱中创建图表的代码相比，唯一的区别是一个数据值。
- en: By changing one value that is not close to the average range of all the other
    values for all plotted lines, the visual representation of data has dramatically
    changed and we lost a lot of details about the overall data and now mainly see
    one high spike.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 通过改变一个与其他所有绘制线条的平均值范围都不接近的值，数据的视觉表示发生了显著变化，我们失去了关于整体数据的大量细节，现在主要看到一个高峰。
- en: '![How to do it...](img/B04829_05_16.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_16.jpg)'
- en: So far, our charts have adjusted themselves according to the data they visually
    represent.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的图表已经根据它们所视觉表示的数据进行了调整。
- en: While this is a practical feature of Matplotlib, this is not always what we
    want. We can restrict the scale of the chart being represented by limiting the
    vertical y-dimension.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这是 Matplotlib 的一个实用功能，但这并不总是我们想要的。我们可以通过限制垂直的 y 轴维度来限制所表示图表的刻度。
- en: '[PRE7]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `axis.set_ylim(5, 8)` line of code now limits the beginning value to 5 and
    the ending value of the vertical display to 8.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '`axis.set_ylim(5, 8)` 这行代码现在将垂直显示的开始值限制为5，结束值限制为8。'
- en: Now, when we create our chart, the high value peak no longer has the impact
    it had before.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们创建图表时，高值峰值不再像以前那样有影响。
- en: '![How to do it...](img/B04829_05_17.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_17.jpg)'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We increased one value in the data, which resulted in a dramatic effect. By
    setting limits to the vertical and horizontal displays of the chart, we can see
    the data we are most interested in.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在数据中增加了一个值，这导致了显著的效果。通过设置图表的垂直和水平显示限制，我们可以看到我们最感兴趣的数据。
- en: Spikes such as the ones just shown, can be of great interest too. It all depends
    on what we are looking for. The visual representation of data is of great value.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 就像刚才展示的那些尖峰，也可能非常有意思。这完全取决于我们在寻找什么。数据的视觉表示非常有价值。
- en: Note
  id: totrans-193
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A picture is worth a thousand words.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一图胜千言。
- en: Adjusting the scale of charts dynamically
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动态调整图表的缩放比例
- en: In the previous recipe, we learned how we can limit the scaling of our charts.
    In this recipe, we will go one step further by dynamically adjusting the scaling
    by setting both a limit and analyzing our data before we represent it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们学习了如何限制图表的缩放。在这个菜谱中，我们将更进一步，通过设置限制并分析我们的数据，在表示之前动态调整缩放。
- en: Getting ready
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will enhance the code from the previous recipe by reading in the data we
    are plotting dynamically, averaging it, and then adjusting our chart.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过读取我们动态绘制的数据进行增强，计算平均值，然后调整我们的图表。
- en: While we would typically read in the data from an external source, in this recipe,
    we create the data we are plotting using Python lists, as can be seen in the following
    code.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们通常从外部源读取数据，但在本菜谱中，我们使用Python列表创建我们正在绘制的图形数据，如下面的代码所示。
- en: How to do it...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We are creating our own data in our Python module by assigning lists with data
    to the xvalues and yvalues variables.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过将包含数据的列表分配给xvalues和yvalues变量，在我们的Python模块中创建自己的数据。
- en: In many graphs, the beginning of the x and y coordinate system starts at (0,
    0). This is usually a good idea, so let's adjust our chart coordinate code accordingly.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多图表中，x轴和y轴坐标系统的起始点通常在(0, 0)。这通常是一个好主意，因此让我们相应地调整我们的图表坐标代码。
- en: 'Let''s modify the code to set limits on both the x and y dimensions:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改代码以设置x和y维度的限制：
- en: '[PRE8]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have set the same limits for x and y, our chart might look more
    balanced. When we run the modified code, we get the following result:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们为 x 和 y 设置了相同的限制，我们的图表可能看起来更平衡。当我们运行修改后的代码时，我们得到以下结果：
- en: '![How to do it...](img/B04829_05_18.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_18.jpg)'
- en: Maybe starting at (0, 0) was not such a great idea after all…
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 也许一开始从 (0, 0) 开始并不是一个很好的主意……
- en: What we really want to do is to adjust our chart dynamically according to the
    range of the data, while at the same time, restricting values that are too high
    or too low.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要做的是根据数据的范围动态调整我们的图表，同时限制过高或过低的值。
- en: We can do this by parsing all the data to be represented in the chart while
    at the same time, setting some explicit limits.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过解析图表中要表示的所有数据，同时设置一些明确的限制来实现这一点。
- en: 'Modify the code, as shown here:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 修改代码，如下所示：
- en: '[PRE9]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Running the code results in the following chart. We adjusted both its x and
    y dimensions dynamically. Note how the y-dimension now starts at 5.5 instead of
    5.0, as it did before. The chart also no longer starts at (0, 0), giving us more
    valuable information about our data.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 运行代码后得到以下图表。我们对其x轴和y轴的尺寸进行了动态调整。注意现在y轴的起始值是5.5而不是之前的5.0。此外，图表也不再从(0, 0)开始，这为我们提供了更多关于数据的有价值信息。
- en: '![How to do it...](img/B04829_05_19.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_05_19.jpg)'
- en: We are creating a list of lists for the y-dimension data and then using a list
    comprehension wrapped into a call to Python's `min()` and `max()` functions.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在创建一个用于y维度数据的列表列表，然后使用列表推导式将其包裹在调用Python的`min()`和`max()`函数中。
- en: If list comprehensions seem to be a little bit advanced, what they basically
    are is a very compressed loop.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果列表推导看起来有些高级，它们本质上是一个非常紧凑的循环。
- en: They are also designed to be faster than a regular programming loop.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也被设计成比常规编程循环更快。
- en: In the Python code that creates the preceding chart, we created three lists
    that hold the y-dimensional data to be plotted. We then created another list that
    holds those three lists, which created a list of lists.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建前面图表的 Python 代码中，我们创建了三个列表来存储要绘制的 y 维数据。然后我们创建了另一个列表来存储这三大列表，从而创建了一个列表的列表。
- en: 'Like this:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样：
- en: '[PRE10]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We are interested in getting both the minimum value of all of the y-dimensional
    data, as well as the maximum value contained within these three lists.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对获取所有y维数据的极小值以及这三个列表中包含的最大值都感兴趣。
- en: We can do this via a Python list comprehension.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过Python列表推导来完成这个操作。
- en: '[PRE11]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'After running the list comprehension, `minY` is: 5.5.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行列表推导后，`minY`的值是：5.5。
- en: The one line of code above is the list comprehension that runs through all the
    values of all the data contained within the three lists and finds the minimum
    value using the Python `min` keyword.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的单行代码是列表推导式，它遍历了包含在三个列表中的所有值，并使用Python的`min`关键字找到最小值。
- en: 'In the very same pattern, we find the maximum value contained in the data we
    wish to plot. This time, we also set a limit within our list comprehension that
    ignores all values that are above the limit we specified, like this:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在完全相同的模式中，我们找到了我们希望绘制的数据中的最大值。这次，我们在列表推导式中也设置了一个限制，忽略所有高于我们指定限制的值，如下所示：
- en: '[PRE12]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: After running the preceding code with our chosen restriction, `maxY` has the
    value of 8 (not 50).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行前面代码并应用我们选择的限制条件后，`maxY`的值为8（而不是50）。
- en: We applied a restriction for the max value, according to a predefined condition
    choosing 20 as the maximum value to be displayed in the chart.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们根据预定义的条件对最大值进行了限制，选择20作为图表中显示的最大值。
- en: For the x-dimension, we simply called `min()` and `max()` in the Matplotlib
    method to scale the limits of the chart dynamically.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 对于x轴维度，我们只需在Matplotlib方法中调用`min()`和`max()`函数来动态调整图表的界限。
- en: How it works...
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created several Matplotlib charts and adjusted some of the
    many available properties. We also used core Python to control the scaling of
    the charts dynamically.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了几个Matplotlib图表并调整了众多可用属性中的某些。我们还使用核心Python动态控制图表的缩放。
