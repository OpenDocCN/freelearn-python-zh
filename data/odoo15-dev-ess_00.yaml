- en: '[*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072): Your First Odoo
    Application'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)：您的第一个Odoo应用程序'
- en: Developing in Odoo usually means creating our own modules. In this chapter,
    we will create our first Odoo application, learn the steps needed to make it available
    to Odoo, and install it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中进行开发通常意味着创建我们自己的模块。在本章中，我们将创建我们的第一个Odoo应用程序，学习使其对Odoo可用所需的步骤，并安装它。
- en: We will get started by learning the basics of the development workflow—we'll
    create and install a new module and update it to apply the changes we make throughout
    the development iterations.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过学习开发工作流程的基础知识开始，我们将创建并安装一个新的模块，并在开发迭代过程中应用我们做出的更改。
- en: Odoo follows a **Model-View-Controller** (**MVC**)-like architecture, and we
    will go through the different layers to implement a library application.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo遵循类似于**模型-视图-控制器**（**MVC**）的架构，我们将遍历不同的层来实现一个库应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Overview of the library project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 库项目的概述
- en: Step 1 – Creating a new `addon` module
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1步 – 创建新的`addon`模块
- en: Step 2 – Creating a new application
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2步 – 创建新应用程序
- en: Step 3 – Adding automated tests
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3步 – 添加自动化测试
- en: Step 4 – Implementing the model layer
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4步 – 实现模型层
- en: Step 5 – Setting up access security
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第5步 – 设置访问安全
- en: Step 6 – Implementing the backend view layer
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第6步 – 实现后端视图层
- en: Step 7 – Implementing the business logic layer
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第7步 – 实现业务逻辑层
- en: Step 8 – Implementing the website **user interface** (**UI**)
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第8步 – 实现网站**用户界面**（**UI**）
- en: With this approach, you will be able to gradually learn about the basic building
    blocks that make up an application and experience the iterative process of building
    an Odoo module from scratch.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 采用这种方法，您将能够逐步了解构成应用程序的基本构建块，并体验从头开始构建Odoo模块的迭代过程。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to have an Odoo server installed and be able to start
    it from the command line to perform actions such as installing modules or running
    tests. If you don't have a working Odoo development environment, make sure you
    review [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *Preparing
    the Development Environment*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您已安装Odoo服务器，并能够从命令行启动它以执行安装模块或运行测试等操作。如果您没有可用的Odoo开发环境，请确保您已审查[*第2章*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049)，*准备开发环境*。
- en: In this chapter, we will create our first Odoo application from a blank slate,
    so we won't need any additional code to get started.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从一张白纸开始创建我们的第一个Odoo应用程序，因此我们不需要任何额外的代码来开始。
- en: The code for this chapter can be found in the book's GitHub repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials),
    in the `ch03` directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub仓库中找到，网址为[https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)，在`ch03`目录下。
- en: Overview of the library project
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 库项目的概述
- en: We will use a learning project to better explore the topics explained in this
    chapter, and see them work in practice. We will create a new Odoo app to manage
    a book library. We will use this project in all the following chapters, where
    each chapter will be an iteration, adding features to the app. Here, we will create
    a first iteration of the library app.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用学习项目来更好地探索本章中解释的主题，并看到它们在实际中的应用。我们将创建一个新的Odoo应用程序来管理图书库。我们将在这个项目中使用所有后续章节，其中每个章节都是一个迭代，向应用程序添加功能。在这里，我们将创建图书馆应用程序的第一个迭代。
- en: The first feature we will implement will be the book catalog. The catalog allows
    us to keep records of the books in our library, with their relevant details. We
    also want to make this catalog available through a public website, where the available
    books can be seen.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将实现的第一项功能将是图书目录。目录使我们能够记录图书馆中的书籍及其相关细节。我们还希望通过一个公开网站提供这个目录，以便可以看到可用的书籍。
- en: 'Library books should have the following data:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆书籍应具有以下数据：
- en: Title
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: Authors
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作者
- en: Publishing company
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 出版社
- en: Date published
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布日期
- en: Cover image
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封面图片
- en: '**International Standard Book Number** (**ISBN**), with check digit validation'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国际标准书号**（**ISBN**），带有校验位验证'
- en: Active flag, indicating the books that should be publicly available on the website
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 激活标志，指示应在网站上公开可用的书籍
- en: As is usual for the Odoo base apps, the Library app will have two user groups,
    the Library User and the Library Manager. The User level is expected to be able
    to perform all daily operations, and the Manager level is expected to additionally
    be able to edit the app's configurations.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Odoo基础应用来说，图书馆应用将有两个用户组，图书馆用户和图书馆管理员。预期用户级别能够执行所有日常操作，而管理员级别则预期能够额外编辑应用配置。
- en: 'For the book catalog feature, we will keep editing book records as a reserved
    feature for Managers. The following should apply:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图书目录功能，我们将继续编辑图书记录作为管理员保留的功能。以下应适用：
- en: Library Managers should be able to edit books.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书馆管理员应该能够编辑书籍。
- en: Library users and Public users using the website should be able to only view
    books.
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图书馆用户和通过网站使用的公共用户应该只能查看书籍。
- en: This simple project will allow us to cover all the main components involved
    in building an Odoo app. The first step is to create a module directory that will
    host the code and components for our app.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的项目将使我们能够涵盖构建Odoo应用所涉及的所有主要组件。第一步是创建一个模块目录，该目录将托管我们应用的代码和组件。
- en: Step 1 – Creating a new addon module
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一步 – 创建新的插件模块
- en: An addon module is a directory containing files that implement some Odoo features.
    It can add new features or modify existing ones. The addon module directory must
    contain a manifest file—or descriptor file—named `__manifest__.py`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 插件模块是一个包含实现某些Odoo功能的文件的目录。它可以添加新功能或修改现有功能。插件模块目录必须包含一个名为`__manifest__.py`的清单文件或描述文件。
- en: Some module addons are featured as an **app**. Apps are the top-level module
    for a feature area in Odoo, and we expect our module to be featured in the top-level
    **Apps** menu. Examples of apps in base Odoo include **CRM**, **Project**, and
    **HR**. A non-app **module addon** is expected to depend on an app, adding or
    extending features to it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一些模块插件被作为**应用**。应用是Odoo中功能区域的顶级模块，我们期望我们的模块在顶级**应用**菜单中有所体现。基础Odoo中的应用示例包括**CRM**、**项目**和**HR**。非应用**模块插件**预期将依赖于一个应用，向其添加或扩展功能。
- en: If a new module adds new or major functionality to Odoo, it probably should
    be an app. If the module just makes changes to an existing app, it probably should
    be a regular addon module.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新模块为Odoo添加了新的或主要的功能，它可能应该是一个应用。如果模块只是对现有应用进行了更改，它可能应该是一个常规的插件模块。
- en: 'To develop a new module, we will do the following:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 要开发新模块，我们将执行以下操作：
- en: Ensure that the directory where we will work is in the Odoo server addons path.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保我们将工作的目录位于Odoo服务器插件路径中。
- en: Create the module's directory, containing the manifest file.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模块的目录，包含清单文件。
- en: Choose a license for the module, if we intend to distribute it.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们打算分发模块，请选择模块的许可证。
- en: Add a module description.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加模块描述。
- en: Optionally, add an icon to represent the module.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可选地，添加一个图标以代表该模块。
- en: After this, we can install the module to confirm that it is available to the
    Odoo server and that it installs correctly.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后，我们可以安装该模块以确认它对Odoo服务器可用并且安装正确。
- en: Preparing the addons path
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备插件路径
- en: An **addon module** is a directory containing an Odoo **manifest** file providing
    features, such as a new app or additional features for an existing app. An **addons
    directory** contains several addon modules. The **addons path** is an Odoo configuration,
    with a list of directories where the Odoo server will look for available addons.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**插件模块**是一个包含Odoo**清单文件**的目录，提供了诸如新应用或现有应用的附加功能等特性。**插件目录**包含多个插件模块。**插件路径**是Odoo配置的一部分，列出了Odoo服务器将查找可用插件的目录列表。'
- en: By default, the addons path includes the base apps bundled with Odoo, in the
    `odoo/addons` directory, and the base module providing the core features, in the
    `odoo/odoo/addons` directory. The addons path is usually modified to add one or
    more directories for the custom-developed and community modules we want to use.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，插件路径包括与Odoo捆绑的基础应用，位于`odoo/addons`目录中，以及提供核心功能的基础模块，位于`odoo/odoo/addons`目录中。插件路径通常修改为添加一个或多个我们想要使用的自定义开发和社区模块的目录。
- en: The Library project will be composed of several modules. Doing so is a good
    practice since it promotes smaller more focused modules, helping reduce complexity.
    We will create an addons directory for the project's modules.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆项目将由几个模块组成。这样做是一个好习惯，因为它促进了更小、更专注的模块，有助于降低复杂性。我们将为项目的模块创建一个插件目录。
- en: If the instructions in [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049),
    *Preparing the Development Environment,* were followed, the Odoo server code should
    be at `~/work15/odoo/`. Custom addon modules should be kept in their own directory,
    separate from the Odoo code.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果遵循了 [*第 2 章*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049)，*准备开发环境*，的说明，Odoo
    服务器代码应在 `~/work15/odoo/`。自定义插件模块应保存在它们自己的目录中，与 Odoo 代码分开。
- en: 'For the Library, we will create a `~/work15/library` directory and include
    it in the addons path. We can do this by editing the configuration file directly
    or by using the Odoo **command-line interface** (**CLI**). Here is how to do the
    latter:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图书馆，我们将创建一个 `~/work15/library` 目录，并将其包含在插件路径中。我们可以通过直接编辑配置文件或使用 Odoo **命令行界面**（**CLI**）来完成此操作。以下是后者的操作方法：
- en: '[PRE0]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Right now, the Odoo command will return an error such as this: `odoo: error:
    option --addons-path: no such directory: ''/home/daniel/work15/library''`. This
    is because the directory is still empty, and Odoo is not able to find any addon
    module inside it. We won''t have this problem as soon as the skeleton for the
    first Library app module is created.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '目前，Odoo 命令将返回如下错误：`odoo: error: option --addons-path: no such directory: ''/home/daniel/work15/library''`。这是因为该目录仍然是空的，Odoo
    无法在其中找到任何插件模块。一旦创建了第一个图书馆应用程序模块的骨架，我们就不会遇到这个问题。'
- en: 'Here''s an explanation of the options used in the Odoo command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对 Odoo 命令中使用的选项的解释：
- en: The `--addons-path` option sets a list of all the directories to use for Odoo
    modules.
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--addons-path` 选项用于设置用于 Odoo 模块的所有目录列表。'
- en: The `--d` or `--database` option sets the database name to use. If the database
    doesn't exist, it will be created and initialized with Odoo's basic database schema.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--d` 或 `--database` 选项用于设置要使用的数据库名称。如果数据库不存在，它将被创建，并使用 Odoo 的基本数据库模式进行初始化。'
- en: The `--c` or `--config` option sets the configuration file to use.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--c` 或 `--config` 选项用于设置要使用的配置文件。'
- en: The `--save` option used along with `-c` saves the options used in the configuration
    file.
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与 `-c` 选项一起使用的 `--save` 选项将保存配置文件中使用的选项。
- en: The `--stop` option, short for `--stop-after-init`, stops the Odoo server and
    returns to the command line once all actions are done and the start sequence is
    done.
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--stop` 选项，即 `--stop-after-init`，在所有操作完成后停止 Odoo 服务器，并返回到命令行。'
- en: If relative paths are used for the addons path option, Odoo will convert them
    to absolute paths before storing them in the configuration file.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用了相对路径作为插件路径选项，Odoo 将在将其存储到配置文件之前将它们转换为绝对路径。
- en: Changes in Odoo 15
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 15 的变化
- en: The configuration file created will use the default configuration as a template.
    In Linux systems, the default configuration file is the one at `~/.odoorc`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的配置文件将使用默认配置作为模板。在 Linux 系统中，默认配置文件是位于 `~/.odoorc` 的文件。
- en: 'The Odoo `scaffold` command provides a quick way to create a new module skeleton.
    We can use it to populate the `library` addons directory with a valid module.
    To scaffold the `library_app` module directory, execute this code:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 的 `scaffold` 命令提供了一种快速创建新模块骨架的方法。我们可以用它来填充 `library` 插件目录，使其包含一个有效的模块。要构建
    `library_app` 模块目录，请执行以下代码：
- en: '[PRE1]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `scaffold` command expects two arguments—the module directory name and the
    path where to create it. For more details on the `scaffold` command, run `odoo
    scaffold --help`.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaffold` 命令期望两个参数——模块目录名称和创建它的路径。有关 `scaffold` 命令的更多详细信息，请运行 `odoo scaffold
    --help`。'
- en: Now, we can retry the command to save the configuration file, including the
    `~/work15/library/` addons directory, and it should run successfully now.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以重试命令以保存配置文件，包括 `~/work15/library/` 插件目录，并且它现在应该可以成功运行。
- en: 'The startup sequence''s first log messages summarize the settings being used.
    They include an `INFO ? odoo: Using configuration file at...` line identifying
    the configuration file being used and an `INFO ? odoo: addons paths: [...]` line
    listing the addons directories being considered. These are the first things to
    check when troubleshooting why Odoo is not discovering your custom module.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '启动序列的第一条日志消息总结了正在使用的设置。它们包括一个标识正在使用的配置文件的 `INFO ? odoo: Using configuration
    file at...` 行和一个列出正在考虑的插件目录的 `INFO ? odoo: addons paths: [...]` 行。在调试 Odoo 为什么无法发现您的自定义模块时，这些都是首先要检查的事项。'
- en: Creating a module directory
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建模块目录
- en: Following the previous section, we should now have the `~/work15/library` directory
    for our Odoo modules and have included it in the Odoo addons path so that the
    Odoo server will be able to find modules in it.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节之后，我们现在应该有`~/work15/library`目录用于我们的Odoo模块，并且已经将其包含在Odoo插件路径中，以便Odoo服务器能够找到其中的模块。
- en: 'In the previous section, we also used the Odoo `scaffold` command to automatically
    create a skeleton structure for the new `library_app` module directory, with a
    basic structure already in place. Remembering the `scaffold` command, it looks
    like this: `odoo scaffold <module> <addons-directory>`. The module directory created
    looks like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们也使用了Odoo `scaffold`命令来自动创建新`library_app`模块目录的骨架结构，其中已经放置了基本结构。记住`scaffold`命令，它看起来像这样：`odoo
    scaffold <module> <addons-directory>`。创建的模块目录看起来像这样：
- en: '[PRE2]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The module directory name is its technical name. In this case, we used `library_app`
    for it. The technical name must be a valid Python **identifier** (**ID**)—it should
    begin with a letter and can only contain letters, numbers, and the underscore
    character.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 模块目录名是其技术名称。在这种情况下，我们使用了`library_app`。技术名称必须是一个有效的Python **标识符**（**ID**）——它应该以字母开头，并且只能包含字母、数字和下划线字符。
- en: It contains several subdirectories for the different components of the module.
    This subdirectory structure is not required, but it is a widely used convention.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含几个子目录，用于模块的不同组件。这种子目录结构不是必需的，但它是一个广泛使用的约定。
- en: A valid Odoo `addon` module directory must contain a `__manifest__.py` descriptor
    file. It also needs to be Python-importable, so it must also have an `__init__.py`
    file. These are the two first files we see in the directory tree.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一个有效的Odoo `插件`模块目录必须包含一个`__manifest__.py`描述文件。它还需要是Python可导入的，因此它还必须有一个`__init__.py`文件。这两个文件是我们首先在目录树中看到的。
- en: Tip
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: In older Odoo versions, the module manifest file was named `__openerp__.py`.
    This filename is still supported but is deprecated.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在较旧的Odoo版本中，模块描述文件被命名为`__openerp__.py`。这个文件名仍然被支持，但已弃用。
- en: 'The manifest file contains a Python dictionary, with the attributes describing
    the module. The scaffold''s automatically generated manifest file should be similar
    to this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 描述文件包含一个Python字典，其中包含描述模块的属性。scaffold自动生成的描述文件应该类似于以下内容：
- en: '[PRE3]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The next section will discuss the manifest file in more detail.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将更详细地讨论描述文件。
- en: The `__init__.py` module file should trigger the import of all the module's
    Python files. More specifically, it should import the Python files at the module
    top level and import the subdirectories also containing Python files. Similarly,
    each of these subdirectories should also contain an `__init__.py` file, importing
    the Python assets in that subdirectory.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__.py`模块文件应该触发导入所有模块的Python文件。更具体地说，它应该导入模块顶层的Python文件，并导入也包含Python文件的子目录。同样，这些子目录中的每一个也应该包含一个`__init__.py`文件，导入该子目录中的Python资源。'
- en: 'This is the top `__init__.py` file generated by the `scaffold` command:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`scaffold`命令生成的顶级`__init__.py`文件：
- en: '[PRE4]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: There are no Python files at the top level, and two subdirectories with Python
    files, `controllers`, and `models`. Reviewing the module tree, we can see that
    these two directories contain Python files and an `__init__.py` file each.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在顶级没有Python文件，有两个包含Python文件的子目录，`controllers`和`models`。查看模块树，我们可以看到这两个目录包含Python文件和各自的`__init__.py`文件。
- en: Creating a manifest file
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建描述文件
- en: The `scaffold` command prepared a manifest file that can be used as a guideline,
    or we can create a manifest file from an empty file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`scaffold`命令准备了一个描述文件，可以用作指南，或者我们可以从一个空文件创建描述文件。'
- en: The manifest file should be a valid Python file containing a dictionary. None
    of the possible dictionary keys is required, so an empty dictionary, `{}`, would
    be a valid content for the file. In practice, we want to at least provide some
    basic description of the module, assert authorship, and choose a distribution
    license.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 描述文件应该是一个有效的Python文件，包含一个字典。没有可能的字典键是必需的，因此空字典`{}`将是文件的有效内容。在实践中，我们至少想要提供一些关于模块的基本描述，声明作者身份，并选择一个分发许可。
- en: 'The following should be a good starting point:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个良好的起点：
- en: '[PRE5]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The keys used here provide all the data presented in the main tab of the app
    form, as illustrated in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的键提供了在应用表单主选项卡中展示的所有数据，如下面的截图所示：
- en: '![Figure 3.1 – Library Management module app form'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.1 – 图书馆管理模块应用表单'
- en: '](img/Figure_3.1_B16119_B16119.jpg)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.1_B16119_B16119.jpg)'
- en: Figure 3.1 – Library Management module app form
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.1 – 图书馆管理模块应用表单
- en: 'We used the following keys:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了以下键：
- en: '`name`: For the module title.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 模块的标题。'
- en: '`summary`: For a one-line summary of the purpose of the module.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`summary`: 模块目的的一行总结。'
- en: '`author`: For the name of the copyright author. It is a string but can contain
    a comma-separated list of names.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`author`: 版权作者的姓名。它是一个字符串，但可以包含以逗号分隔的姓名列表。'
- en: '`license`: This identifies the license under which the author allows the module
    to be distributed. `AGPL-3` and `LGPL-3` are popular open source choices. Proprietary
    modules sold through the Odoo Apps Store usually use the `OPL-1` Odoo proprietary
    license. Licenses are discussed in more detail later in this chapter.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`license`: 这标识了作者允许模块以何种许可进行分发。`AGPL-3` 和 `LGPL-3` 是流行的开源选择。通过 Odoo Apps Store
    销售的专有模块通常使用 `OPL-1` Odoo 专有许可。许可将在本章后面更详细地讨论。'
- en: '`website`: A **Uniform Resource Locator** (**URL**) to get more information
    about the module. This can help people find more documentation or the issue tracker
    to file bugs and suggestions.'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`website`: 获取有关模块更多信息的一个 **统一资源定位符** (**URL**)。这可以帮助人们找到更多文档或问题跟踪器来提交错误和建议。'
- en: '`version`: The version of the module. It should follow semantic versioning
    rules (see [http://semver.org/](http://semver.org/) for details). It is a good
    practice to use the Odoo version before our module version since it helps identify
    the Odoo version the module targets. For example, a `1.0.0` module built for Odoo
    15.0 should carry version `15.0.1.0.0`.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`version`: 模块的版本。它应遵循语义版本控制规则（详情见 [http://semver.org/](http://semver.org/)）。使用
    Odoo 版本在我们模块版本之前是一个好习惯，因为它有助于识别模块针对的 Odoo 版本。例如，为 Odoo 15.0 构建的 `1.0.0` 模块应携带版本
    `15.0.1.0.0`。'
- en: '`depends`: A list of the addon modules it depends on. The installation of this
    module will trigger the installation of these dependencies. If the module has
    no particular dependencies, it is a common practice to have it depend on the `base`
    module, but this is not required.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`depends`: 依赖的插件模块列表。安装此模块将触发这些依赖项的安装。如果模块没有特定的依赖项，通常的做法是让它依赖于 `base` 模块，但这不是必需的。'
- en: '`application`: A flag, declaring whether the module should be featured as an
    app in the apps list. Most extension modules, adding features to existing apps,
    will have this set to `False`. The Library management module is a new app, so
    we used `True`.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`application`: 一个标志，声明模块是否应作为应用在应用列表中突出显示。大多数扩展模块，为现有应用程序添加功能，将此设置为 `False`。图书馆管理模块是一个新应用，所以我们使用了
    `True`。'
- en: The dependencies list is something to be careful about. We should ensure all
    dependencies are explicitly set here; otherwise, the module may fail to install
    in a clean database install due to missing dependencies or have loading errors
    if, by chance, the other required modules are loaded later than ours, in the Odoo
    startup sequence. Both these cases can happen when deploying your work on other
    machines and can be time-consuming to identify and solve.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 依赖项列表需要小心处理。我们应该确保在这里明确设置所有依赖项；否则，模块可能在干净的数据库安装中由于缺少依赖项而无法安装，或者在 Odoo 启动序列中，如果其他必需的模块偶然晚于我们的模块加载，可能会出现加载错误。这两种情况都可能发生在在其他机器上部署你的工作时，并且可能需要花费时间来识别和解决。
- en: The `<div class="document">` line seen in *Figure 3.1* is for the long module
    description, now empty. Adding a description is discussed in a later section,
    *Adding a description*.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *图 3.1* 中看到的 `<div class="document">` 行是用于长模块描述的，现在为空。添加描述将在后面的 *添加描述* 部分讨论。
- en: 'These other descriptor keys are also available, and used less often:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这些其他描述符键也可用，但使用较少：
- en: '`installable`: Indicates if this module is available for installation. The
    default value is `True`, so we don''t need to explicitly set it. It can be set
    to `False` if for some reason we need to disable it but still keep its files in
    the addon directory.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`installable`: 指示此模块是否可用于安装。默认值是 `True`，所以我们不需要明确设置它。如果出于某种原因需要禁用它但仍然保留其文件在插件目录中，则可以将其设置为
    `False`。'
- en: '`auto_install`: This can be set to `True`, and is used for **glue** modules.
    A glue module installation is triggered once all the dependencies are installed.
    For example, this can be used to automatically provide features that bridge two
    apps, once they are both installed in the same instance.'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auto_install`: 这可以设置为 `True`，并用于 **粘合** 模块。一旦所有依赖项安装完毕，就会触发粘合模块的安装。例如，这可以用于在两个应用程序都安装在同一实例中时自动提供连接两个应用程序的功能。'
- en: Setting the module category
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置模块类别
- en: Modules are grouped into categories, representing the function areas they relate
    to. These categories are used to group addon modules, and also the security groups.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 模块被分组到类别中，代表它们相关的功能区域。这些类别用于分组插件模块，以及安全组。
- en: If no category is set on the addon, the **Uncategorized** value will be assigned.
    This is right now the category for the Library app.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果插件没有设置类别，将分配**未分类**值。目前，这是图书馆应用的类别。
- en: 'We can see several categories on Odoo in the **Apps** menu, on the left side
    panel. There, we can see the categories that can be used for our modules, as illustrated
    in the following screenshot:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Odoo的**应用**菜单中看到几个类别，在左侧面板上。在那里，我们可以看到可以用于我们的模块的类别，如下面的屏幕截图所示：
- en: '![Figure 3.2 – Apps list with the CATEGORIES pane'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.2 – 带有类别窗格的应用列表'
- en: '](img/Figure_3.2_B16119_B16119.jpg)'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.2_B16119_B16119.jpg)'
- en: Figure 3.2 – Apps list with the CATEGORIES pane
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 带有类别窗格的应用列表
- en: The categories can have a hierarchy—for example, the **Project** apps belong
    to the **Services/Project** category.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 类别可以有层次结构——例如，**项目**应用属于**服务/项目**类别。
- en: 'If a non-existent category is used on an addon module, Odoo will automatically
    create it and make it available. We will take advantage of this to create a new
    category for the Library app: **Services/Library**.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在插件模块中使用了一个不存在的类别，Odoo将自动创建它并使其可用。我们将利用这一点为图书馆应用创建一个新的类别：**服务/图书馆**。
- en: 'Edit the `__manifest__.py` file thus to add a `category` key:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 修改`__manifest__.py`文件，以便添加一个`category`键：
- en: '[PRE6]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Categories are also relevant for organizing security groups, and to reference
    them in **Extensible Markup Language** (**XML**) data files, we will need to use
    the corresponding XML ID.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 类别对于组织安全组也很重要，并且要在**可扩展标记语言**（**XML**）数据文件中引用它们，我们需要使用相应的XML ID。
- en: The XML ID assigned to a module category is automatically generated from the
    `base.module_category_` prefix plus the category name. For example, for `base.module_category_services_library`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 分配给模块类别的XML ID是从`base.module_category_`前缀加上类别名称自动生成的。例如，对于`base.module_category_services_library`。
- en: We can confirm the XML ID for app categories by navigating to the corresponding
    form view and then using the **View Metadata** option in the developer menu.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过导航到相应的表单视图，然后在开发者菜单中使用**查看元数据**选项来确认应用类别的XML ID。
- en: 'There is no menu item for app categories, but the category form can be accessed
    from the security **Groups** form, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 没有应用类别的菜单项，但可以从安全**组**表单访问类别表单，如下所示：
- en: Open the **Settings** | **User** | **Groups** menu option and create a new test
    record.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**设置** | **用户** | **组**菜单选项，创建一个新的测试记录。
- en: Select an option from the **Application** field drop-down list, and save. The
    process is illustrated in the following screenshot:![Figure 3.3 – Application
    selection list, in the User Group form
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**应用**字段下拉列表中选择一个选项，并保存。这个过程在下面的屏幕截图中展示：![图3.3 – 应用选择列表，在用户组表单中
- en: '](img/Figure_3.3_B16119_B16119.jpg)'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/Figure_3.3_B16119_B16119.jpg)'
- en: Figure 3.3 – Application selection list, in the User Group form
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.3 – 应用选择列表，在用户组表单中
- en: Click on the **Application** link to open the selected category's corresponding
    details form.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**应用**链接以打开所选类别的对应详情表单。
- en: On the category form, select the **View Metadata** option in the developer menu
    to see the XML ID assigned to it.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在类别表单中，在开发者菜单中选择**查看元数据**选项，以查看分配给它的XML ID。
- en: You may want to delete the test group if it is no longer of use to you.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你不再需要测试组，你可以选择删除它。
- en: 'Alternatively, the list of built-in categories and their XML IDs can be found
    in the Odoo source code. The GitHub URL is provided here: [https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml](https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml).'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以在Odoo源代码中找到内置类别列表及其XML ID。GitHub URL如下：[https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml](https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/data/ir_module_category_data.xml).
- en: Choosing a license
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 选择许可证
- en: Choosing a license for your work is important, and you should carefully consider
    which is the best choice for you, and its implications.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为你的作品选择一个许可证非常重要，你应该仔细考虑哪个选项最适合你，以及它的含义。
- en: Software code is covered by copyright law, reserving to the authors the rights
    to use or modify the work. This will usually mean you individually or the company
    you are working for. For other parties to safely be allowed to use the work, they
    must have a license agreement with the code authors.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 软件代码受版权法保护，保留作者使用或修改作品的权利。这通常意味着你个人或你所在的公司。为了使其他方能够安全地使用作品，他们必须与代码作者签订许可协议。
- en: If you want to make your code freely available, it needs to carry a license,
    stating what other people are allowed to do with your code. Different licenses
    will state different terms.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望你的代码可以自由获取，它需要携带一个许可证，说明其他人可以对你的代码做什么。不同的许可证将规定不同的条款。
- en: The most-used licenses for Odoo modules are version 3 of the **GNU's Not Unix**
    (**GNU**) **Lesser General Public License** (**LGPL-3**) and the **Affero General
    Public License** (**AGPL-3**). Both allow you to freely distribute and modify
    the work, as long as the authors are credited and the derived works are distributed
    under the same license conditions.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 模块最常用的许可证是 **GNU's Not Unix** （**GNU**） **Lesser General Public License**
    （**LGPL-3**） 和 **Affero General Public License** （**AGPL-3**）。两者都允许你自由分发和修改作品，只要作者得到认可，并且派生作品在相同的许可证条件下分发。
- en: The AGPL is a strong open source license and requires online services using
    the code to share the source code with their users. This license is popular among
    the community because it forces derivative works to also be distributed under
    the AGPL terms. So, the open sourced code can't be incorporated in a closed commercial
    solution, and the original authors can benefit from the improvements made by other
    people.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: AGPL 是一种强大的开源许可证，要求使用该代码的在线服务必须将源代码与用户共享。这种许可证在社区中很受欢迎，因为它强制派生作品也必须在 AGPL 条件下分发。因此，开源代码不能被纳入封闭的商业解决方案中，原始作者可以从其他人的改进中受益。
- en: The LGPL is more permissive than AGPL and also allows commercial modifications,
    without the need to share the corresponding source code. This license is usually
    chosen for web and system integration components, where solutions might contain
    components under private licenses, or under terms incompatible with AGPL.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: LGPL 比 AGPL 更为宽松，也允许进行商业修改，无需共享相应的源代码。这种许可证通常用于网页和系统集成组件，其中解决方案可能包含在私人许可证下或与
    AGPL 不兼容的条款下的组件。
- en: You can learn more about the GNU licenses at [https://www.gnu.org/licenses/](https://www.gnu.org/licenses/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里了解更多关于 GNU 许可证的信息：[https://www.gnu.org/licenses/](https://www.gnu.org/licenses/)。
- en: While you can sell GPL licensed apps, this is not a popular business model since
    the license allows people to freely copy and distribute the code. For this reason,
    many modules sold in the Odoo App Store prefer to use a proprietary license. Odoo
    proposes the Odoo proprietary license, `OPL-1`, for this.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以出售 GPL 许可证的软件，但由于该许可证允许人们自由复制和分发代码，这并不是一个流行的商业模式。因此，Odoo 应用商店中出售的许多模块更喜欢使用专有许可证。为此，Odoo
    提出了 Odoo 专有许可证 `OPL-1`。
- en: More details on Odoo licenses can be found at [https://www.odoo.com/documentation/user/legal/licenses/licenses.html](https://www.odoo.com/documentation/user/legal/licenses/licenses.html).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Odoo 许可证的更多详细信息，请参阅 [https://www.odoo.com/documentation/user/legal/licenses/licenses.html](https://www.odoo.com/documentation/user/legal/licenses/licenses.html)。
- en: Adding a description
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加描述
- en: A description is a long text presenting the module features. The description
    text supports the **reStructuredText** (**RST**) format to produce a rich text
    document.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 描述是一段长文本，用于介绍模块功能。描述文本支持 **reStructuredText** （**RST**） 格式，以生成丰富的文本文档。
- en: 'You can learn more about RST here: [https://docutils.sourceforge.io/rst.html](https://docutils.sourceforge.io/rst.html).
    The page includes a quick reference link that is worth bookmarking: [https://docutils.sourceforge.io/docs/user/rst/quickstart.html](https://docutils.sourceforge.io/docs/user/rst/quickstart.html).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在这里了解更多关于 RST 的信息：[https://docutils.sourceforge.io/rst.html](https://docutils.sourceforge.io/rst.html)。页面包括一个值得书签的快速参考链接：[https://docutils.sourceforge.io/docs/user/rst/quickstart.html](https://docutils.sourceforge.io/docs/user/rst/quickstart.html)。
- en: 'Here is a short sample of an RST document:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个 RST 文档的简短示例：
- en: '[PRE7]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: One way to add a description is to use the `description` key in the module manifest.
    Since chances are the description text will span multiple lines, it is best added
    inside triple quotes, `"""`, the Python syntax for multiline strings.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 添加描述的一种方法是在模块清单中使用 `description` 键。由于描述文本很可能会跨越多行，最好使用三引号 `"""`，这是 Python 中的多行字符串语法。
- en: Source code published on websites such as GitHub is expected to include a README
    file, for visitors to easily find an introduction to the module. So, instead of
    the `description` manifest key, Odoo modules can have a `README.rst` or `README.md`
    file for the same purpose. This file should be placed at the root of the module
    directory, alongside the `__manifest__.py` file.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub等网站上发布的源代码应包含一个README文件，以便访客可以轻松找到模块的介绍。因此，而不是使用`description`清单密钥，Odoo模块可以有一个`README.rst`或`README.md`文件用于相同的目的。此文件应放置在模块目录的根目录中，与`__manifest__.py`文件并列。
- en: Another alternative is to provide a `index.html` HTML file should be located
    in the `static/description/` module subdirectory. Page assets, such as images
    and **Cascading Style Sheets** (**CSS**), should also be located in that same
    directory.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个选择是提供一个位于`static/description/`模块子目录中的`index.html` HTML文件。页面资源，如图像和**层叠样式表**（**CSS**），也应位于同一目录。
- en: Note
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For modules with the `application` key set to `True`, only the `index.html`
    description will be used, and the description key is ignored.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于将`application`密钥设置为`True`的模块，仅使用`index.html`描述，并忽略描述密钥。
- en: Adding an icon
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加图标
- en: Modules can optionally have an icon representing them. In the case of modules
    creating a new app, this is particularly important, since the app is expected
    to have an icon in the **Apps** menu.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 模块可以可选地有一个代表它们的图标。在创建新应用的情况下，这一点尤为重要，因为应用预期将在**应用**菜单中有一个图标。
- en: To add an icon, we need to add a `static/description/icon.png` file to the module,
    with the icon to be used.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加图标，我们需要在模块中添加一个`static/description/icon.png`文件，其中包含要使用的图标。
- en: For the Library app project, we will reuse an icon from the `library_app/static/description`
    directory.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图书馆应用项目，我们将重用`library_app/static/description`目录中的一个图标。
- en: 'From the command line, we would run the following:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 从命令行，我们会运行以下命令：
- en: '[PRE8]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Installing a new module
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装新模块
- en: We now have a minimal `addon` module. It doesn't implement any features yet,
    but we can install it to confirm that it is working properly so far.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个最小的`addon`模块。它还没有实现任何功能，但我们可以安装它以确认它到目前为止运行正常。
- en: To install a new module, we should start the server using both the `-d` and
    `-i` options. The `-d` or `--database` option ensures that we are working with
    the correct Odoo database. The `-i` or `--init` option accepts a comma-separated
    list of modules to install.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装一个新的模块，我们应该使用 `-d` 和 `-i` 选项启动服务器。`-d` 或 `--database` 选项确保我们正在使用正确的Odoo数据库。`-i`
    或 `--init` 选项接受一个由逗号分隔的模块列表，用于安装。
- en: Changes in Odoo 11
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 11中的变化
- en: When installing a new module, Odoo will automatically update the list of available
    modules from the currently configured addons paths. This was not so up to Odoo
    10, where the module list needed to be manually updated before a new addon module
    could be installed. The modules list is updated in the web client, from the menu
    option in the **Apps** list.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 当安装新模块时，Odoo会自动从当前配置的插件路径中更新可用模块的列表。在Odoo 10之前并非如此，那时在安装新的插件模块之前需要手动更新模块列表。模块列表在Web客户端中更新，从**应用**列表中的菜单选项。
- en: 'For the Odoo environment prepared earlier in this chapter and having activated
    the Python virtual environment, the following command installs the `library_app`
    module:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本章中较早准备好的Odoo环境，并且已经激活了Python虚拟环境，以下命令安装了`library_app`模块：
- en: '[PRE9]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: We added the `-d` library option to make sure that the correct database is selected
    for the installation. It could be the case that this option was already defined
    in the configuration file and is thus redundant. Even if that is the case, it
    is best to play safe and explicitly declare the database to install on in the
    command.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了 `-d` 库选项以确保为安装选择正确的数据库。可能的情况是，此选项已在配置文件中定义，因此是多余的。即使如此，最好还是谨慎行事，并在命令中明确声明要安装的数据库。
- en: Tip
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'Pay close attention to the server log messages to confirm that the module was
    correctly found and installed. You should see an `odoo.addons.base.models.ir_module:
    ALLOW access to module.button_install` message and no warnings.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '仔细关注服务器日志消息以确认模块已被正确找到并安装。你应该看到一个`odoo.addons.base.models.ir_module: ALLOW
    access to module.button_install`消息，没有警告。'
- en: 'For the module installation to be possible, the `addons` directory where the
    module is in should be known to the Odoo server. This can be confirmed by stopping
    and starting the Odoo server and looking at the `odoo: addons paths:` log message
    printed during the Odoo startup sequence.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '为了使模块安装成为可能，模块所在的 `addons` 目录应该为 Odoo 服务器所知。这可以通过停止和启动 Odoo 服务器，查看 Odoo 启动序列期间打印的
    `odoo: addons paths:` 日志消息来确认。'
- en: If the module is not found, that is often because the addons path is incorrect.
    Double-check that by taking a close look at the addons path being used.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果找不到模块，通常是因为插件路径不正确。通过仔细检查正在使用的插件路径来双重确认这一点。
- en: Upgrading modules
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 升级模块
- en: Developing a module is an iterative process, with changes made on source files
    that are then to be applied to Odoo.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 开发模块是一个迭代过程，对源文件所做的更改然后将应用于 Odoo。
- en: This can be done from the **graphical UI** (**GUI**) by looking up the module
    in the **Apps** list and clicking on the **Upgrade** button. This reloads the
    data files, applying the changes made, and updates the database schema definitions.
    However, when the changes are only in Python logic, the upgrade may not be sufficient.
    An Odoo server restart may be needed to reload the changed Python code. When the
    module changes are both data files and Python logic, both operations might be
    needed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过 **图形用户界面**（**GUI**）完成，通过在 **应用** 列表中查找模块并点击 **升级** 按钮来实现。这将重新加载数据文件，应用所做的更改，并更新数据库模式定义。然而，当更改仅限于
    Python 逻辑时，升级可能不足以完成。可能需要重启 Odoo 服务器以重新加载更改后的 Python 代码。当模块更改涉及数据文件和 Python 逻辑时，可能需要执行这两个操作。
- en: 'In summary, the following applies:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，以下适用：
- en: When modifying models or their fields, an upgrade is needed to apply the database
    schema changes.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当修改模型或其字段时，需要升级以应用数据库模式更改。
- en: When changing logic Python code, a restart is needed to reload the code files.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当更改 Python 代码的逻辑时，需要重启以重新加载代码文件。
- en: When changing XML or **comma-separated values** (**CSV**) files, an upgrade
    is needed to reapply the data in the files.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当更改 XML 或 **逗号分隔值**（**CSV**）文件时，需要升级以重新应用文件中的数据。
- en: To avoid any confusion or frustration related to having code changes applied
    to Odoo, the simplest solution is to restart the Odoo service with the module
    `upgrade` command after the code changes are made.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免将代码更改应用于 Odoo 相关的任何混淆或挫败感，最简单的解决方案是在代码更改完成后，使用模块 `upgrade` 命令重启 Odoo 服务。
- en: 'In the terminal where the server instance is running, use *Ctrl* + *C* to stop
    it. Then, start the server and upgrade the `library_app` module using the following
    command:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行服务器实例的终端中，使用 *Ctrl* + *C* 停止它。然后，启动服务器并使用以下命令升级 `library_app` 模块：
- en: '[PRE10]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `-u` option, `--update` in the long format, requires the `-d` option and
    accepts a comma-separated list of modules to update. For example, we could use
    `-u library_app,mail`. When a module is updated, all other installed modules depending
    on it are also updated.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`-u` 选项，长格式中的 `--update`，需要 `-d` 选项，并接受一个以逗号分隔的模块更新列表。例如，我们可以使用 `-u library_app,mail`。当一个模块被更新时，所有依赖它的已安装模块也会被更新。'
- en: Pressing the up arrow key brings to you the previous command that was used.
    So, most of the time, when repeating this action, you will find yourself using
    the *Ctrl* + *C*, up arrow, and *Enter* key combination.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 按下上箭头键将显示之前使用的命令。所以，大多数时候，当你重复此操作时，你会发现自己使用 *Ctrl* + *C*、上箭头和 *Enter* 键的组合。
- en: In recent Odoo versions, the `--dev=all` developer-friendly mode is available,
    automating this workflow.  When this option is used, changes to data files will
    instantly be available to the running Odoo service, and Python code changes will
    trigger an Odoo code reload. For more details on this option, please refer to
    the *Using the server development options* section of [*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049),
    *Preparing the Development Environment*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在最近的 Odoo 版本中，提供了 `--dev=all` 开发者友好模式，自动化了这个工作流程。当使用此选项时，数据文件更改将立即对正在运行的 Odoo
    服务可用，Python 代码更改将触发 Odoo 代码重新加载。有关此选项的更多详细信息，请参阅 [*第 2 章*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049)
    的 *使用服务器开发选项* 部分，*准备开发环境*。
- en: We now have a module directory ready to host the components that implement the
    app. Since this is an app, and not a technical module adding a feature, we will
    start by adding a few basic components expected for apps.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在有一个模块目录，准备托管实现应用的组件。由于这是一个应用，而不是添加功能的纯技术模块，我们将首先添加一些应用预期的基本组件。
- en: Step 2 – Creating a new application
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 步 – 创建新应用
- en: Some Odoo modules create new applications, and others add features or modify
    existing applications. While the technical components involved are about the same,
    an app is expected to include a few characteristic elements. Since the Library
    module is a new app, we should include them in our module.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 一些Odoo模块创建新的应用，而另一些则添加功能或修改现有应用。虽然涉及的技术组件大致相同，但一个应用应包括一些特征元素。由于图书馆模块是一个新应用，我们应该在我们的模块中包含它们。
- en: 'An app is expected to have the following:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 一个应用应该具备以下功能：
- en: An icon, to be presented in the app list
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个图标，用于在应用列表中展示
- en: A top-level menu item, under which all the app's menu items will be placed
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个顶级菜单项，所有应用菜单项都将放置于此之下
- en: Security groups for the app so that it can be enabled only for users that need
    it, and where access security will be set
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为应用设置安全组，以便它只能对需要它的用户启用，并且在此处设置访问安全。
- en: The app icon is an `icon.png` file in the module's `static/description/` subdirectory.
    This was done earlier, in the *Adding an icon* section.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 应用图标是模块的`static/description/`子目录中的一个`icon.png`文件。这已经在*添加图标*部分中完成。
- en: Next, we will take care of the app's top-level menu.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将处理应用的高级菜单。
- en: Adding a top menu item
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加顶级菜单项
- en: Since we are creating a new app, it should have a main menu item. On the **Community
    Edition** **(CE)**, this is shown as a new entry in the top-left drop-down menu.
    On the **Enterprise Edition** **(EE)**, it is shown as an additional icon in the
    **App Switcher** main menu.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在创建一个新应用，它应该有一个主菜单项。在**社区版**（**Community Edition** **(CE)**）中，这显示为右上角下拉菜单中的一个新条目。在**企业版**（**Enterprise
    Edition** **(EE)**）中，它显示为**应用切换器**主菜单中的一个附加图标。
- en: 'Menu items are view components added using XML data files. To define a menu
    item, create a `views/library_menu.xml` file with the following content:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单项是通过XML数据文件添加的视图组件。要定义一个菜单项，创建一个`views/library_menu.xml`文件，内容如下：
- en: '[PRE11]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The UI, including menu options and actions, has database stored records read
    and interpreted by the web client in real time.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: UI，包括菜单选项和操作，是数据库存储的记录，由Web客户端实时读取和解释。
- en: The aforementioned file describes records to load into the Odoo database. The
    `<menuitem>` element is an instruction to write a record on the `ir.ui.menu` model,
    where Odoo menu items are stored.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 所述文件描述了要加载到Odoo数据库中的记录。《<menuitem>`元素是在`ir.ui.menu`模型上写入记录的指令，其中Odoo菜单项被存储。
- en: The `id` attribute is also known as an `menu_library` XML ID.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`属性也称为`menu_library` XML ID。'
- en: 'The menu item added here is very simple and is using only one attribute: `name`.
    There are other attributes available that we didn''t use here. We will learn more
    about them later in this chapter, in the *Implementing the backend view layer*
    section.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这里添加的菜单项非常简单，只使用了一个属性：`name`。还有其他可用的属性我们没有在这里使用。我们将在本章的*实现后端视图层*部分中了解更多关于它们的信息。
- en: 'The Library module does not know about this new XML data file yet. To be known
    and loaded into the Odoo instance, it needs to be declared in the `data` attribute
    of the manifest file. Edit the `__manifest__.py` file dictionary to add this key,
    as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆模块尚不了解这个新的XML数据文件。为了使其被识别并加载到Odoo实例中，需要在清单文件的`data`属性中声明。编辑`__manifest__.py`文件字典以添加此键，如下所示：
- en: '[PRE12]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `data` manifest key is a list of the data files to be loaded by the module
    upon installation or upgrade. The file paths are relative to the module's root
    directory, where the manifest file is.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`清单键是模块在安装或升级时需要加载的数据文件的列表。文件路径相对于清单文件所在的模块根目录。'
- en: To load these menu configurations into our Odoo database, we need to upgrade
    the module. Doing that at this point won't have any visible effects. This menu
    item has no actionable submenu yet, and so won't be shown. It will be visible
    later, once we add submenus and the corresponding access permissions.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这些菜单配置加载到我们的Odoo数据库中，我们需要升级模块。在此阶段这样做不会产生任何可见效果。此菜单项还没有可操作的子菜单，因此不会显示。一旦我们添加子菜单和相应的访问权限，它将变得可见。
- en: Tip
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Items in the menu tree are only shown if there are any visible submenu items.
    The lower-level menu items that open views will only be visible if the user has
    access to the corresponding model.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 菜单树中的项目只有在存在可见的子菜单项时才会显示。打开视图的较低级菜单项只有在用户有权访问相应的模型时才会可见。
- en: Adding security groups
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加安全组
- en: Before features can be used by regular users, access must be granted to them.
    In Odoo, this is done using security **groups**. Access privileges are granted
    to security groups, and users are assigned security groups.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在常规用户可以使用功能之前，必须授予他们访问权限。在Odoo中，这是通过使用安全**组**来完成的。访问权限授予给安全组，用户被分配到安全组。
- en: 'Odoo apps typically provide two groups for two levels of access, as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo应用通常提供两个组，用于两个级别的访问，如下所示：
- en: A user access level, for users performing daily operations
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户访问级别，用于执行日常操作的用户
- en: A manager access level, with full access to all features, including configurations
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理员访问级别，具有对所有功能（包括配置）的完全访问权限
- en: The Library app will feature these two security groups. We will work on this
    next.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆应用将具有这两个安全组。我们将在下一部分进行工作。
- en: Access-security-related files are usually kept in a `security/` module subdirectory,
    so we should create a `security/library_security.xml` file for these definitions.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 与安全相关的文件通常保存在一个`security/`模块子目录中，因此我们应该为这些定义创建一个`security/library_security.xml`文件。
- en: Security groups are organized in the same categories used for addon modules.
    To assign a category to a security group, we should find the corresponding XML
    ID. The way this XML ID can be found was discussed earlier in this chapter, in
    the *Setting the module category* section. There, we can learn that the XML ID
    for the `base.module_category_services_library`.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组按照用于附加模块的相同类别组织。要将一个类别分配给安全组，我们应该找到相应的XML ID。关于如何找到这个XML ID，在本章的*设置模块类别*部分已经讨论过。在那里，我们可以了解到`base.module_category_services_library`的XML
    ID。
- en: Next, we will add the Library User security group. It belongs to the `module_library_category`,
    and it will inherit the internal user security permissions, building on top of
    them. If we open that group's form and use the developer menu `base.group_user`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加图书馆用户安全组。它属于`module_library_category`，并且将继承内部用户安全权限，在此基础上构建。如果我们打开该组的表单并使用开发者菜单`base.group_user`。
- en: 'Now, add to the `security/library_security.xml` file with the following XML:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，向`security/library_security.xml`文件添加以下XML：
- en: '[PRE13]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We have a lot going on here, so let''s slowly go through each of the elements
    here. This XML is adding one record to the groups model, `res.groups`. This record
    has values for three fields, as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里有很多事情要做，所以让我们慢慢地逐一查看这里的每个元素。这个XML正在向`res.groups`模型添加一条记录。这条记录有三个字段的值，如下所示：
- en: '`name` is the group title. This is a simple string value.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`是组标题。这是一个简单的字符串值。'
- en: '`category_id` is the related app. It is a relational field, so the `ref` attribute
    is used to link it to the category created before, using its XML ID.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category_id`是相关的应用程序。它是一个关系字段，因此使用`ref`属性将其链接到之前创建的类别，使用其XML ID。'
- en: '`implied_ids` is a one-to-many relational field and contains a list of groups
    that will also apply to users belonging to this group. To-many fields use a special
    syntax that is detailed in [*Chapter 5*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146),
    *Importing, Exporting, and Module Data*. In this case, we are using code `4` to
    add a link to the existing internal user XML ID, `base.group_user`.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implied_ids`是一个一对多关系字段，包含将也适用于属于此组的用户的组列表。多对多字段使用在[*第五章*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146)中详细说明的特殊语法，*导入、导出和模块数据*。在这种情况下，我们使用代码`4`来添加对现有内部用户XML
    ID，`base.group_user`的链接。'
- en: Changes in Odoo 12
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 12中的变化
- en: The **User** form has a **User Type** section, only visible when the Developer
    Mode is enabled. It allows us to select between the mutually exclusive options—**Internal
    User**, **Portal** (external users, such as customers), and **Public** (website
    anonymous visitors). This was changed to avoid misconfigurations found in previous
    Odoo versions, where internal users could accidentally be included in the **Portal**
    or **Public** groups, effectively reducing their access privileges.
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**用户**表单有一个**用户类型**部分，仅在开发者模式启用时可见。它允许我们在互斥选项之间进行选择——**内部用户**、**门户**（外部用户，如客户）和**公共**（网站匿名访客）。这是为了避免在之前的Odoo版本中发现的配置错误，其中内部用户可能会意外地包含在**门户**或**公共**组中，从而实际上减少了他们的访问权限。'
- en: Next, we will create a manager group. It should give us all the privileges of
    the user group, plus some additional access reserved to the manager. So, we want
    it to inherit from the `library_group_user` library user.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个管理组。它应该给我们用户组的所有权限，以及一些保留给管理员的额外访问权限。因此，我们希望它从`library_group_user`库用户继承。
- en: 'Editing the `security/library_security.xml` file, add the following XML inside
    the `<odoo>` element:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`security/library_security.xml`文件，在`<odoo>`元素内添加以下 XML：
- en: '[PRE14]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Here, we also see the `name`, `category_id`, and `implied_ids` fields, as before.
    The `implied_ids` field is set with a link to the **Library** user group, to inherit
    its privileges.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们同样看到了`name`、`category_id`和`implied_ids`字段，就像之前一样。`implied_ids`字段被设置为与**图书馆**用户组的链接，以继承其权限。
- en: It is also setting values on the `users` field. This has this group assigned
    to the Administrator (`admin`) and the Odoobot users.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这也在`users`字段上设置了值。这个组被分配给了管理员（`admin`）和 Odoobot 用户。
- en: Changes in Odoo 12
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: Since Odoo 12, we have a system root user, which is not shown in the user list
    and is used internally by the framework when privilege elevation is needed (`sudo`).
    The `admin` user can be used to log in to the server and should have full access
    to all features but does bypass access security, as the system root does. On Odoo
    versions up to 11, the `admin` user was also the internal root superuser.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Odoo 12 以来，我们有一个系统根用户，它不会显示在用户列表中，并在需要权限提升时（`sudo`）由框架内部使用。`admin` 用户可以用来登录服务器，并且应该能够访问所有功能，但与系统根用户一样，它绕过了访问安全。在
    Odoo 11 版本之前，`admin` 用户也是内部根超级用户。
- en: 'We also need to have this additional XML data file in the manifest file:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要在清单文件中添加这个额外的 XML 数据文件：
- en: '[PRE15]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Notice that the `library_security.xml` file was added before `library_menu.xml`.
    The order used to load data files is important since references can only use IDs
    that have already been defined. It is common for menu items to reference security
    groups, and so it is a good practice to add security definitions before menu and
    view definitions.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`library_security.xml`文件是在`library_menu.xml`之前添加的。由于引用只能使用已定义的 ID，所以加载数据文件的顺序很重要。通常，菜单项会引用安全组，因此，在菜单和视图定义之前添加安全定义是一种良好的实践。
- en: The next step is to add the Python code defining the app models. But before
    that, we will add some test cases, following a **test-driven development** (**TDD**)
    approach.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是添加定义应用模型的 Python 代码。但在那之前，我们将添加一些测试用例，遵循**测试驱动开发**（**TDD**）的方法。
- en: Step 3 – Adding automated tests
  id: totrans-232
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 3 步 – 添加自动化测试
- en: Programming best practices include having automated tests for your code. This
    is even more important for dynamic languages such as Python—since there is no
    compilation step, you can't be sure there are no syntactic errors until the interpreter
    runs the code. A good editor can help us detect some of these problems ahead of
    time but can't help us ensure the code performs as intended, as automated tests
    can.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 编程最佳实践包括为你的代码编写自动化测试。这对于像 Python 这样的动态语言来说尤为重要——由于没有编译步骤，你无法确定在解释器运行代码之前是否存在语法错误。一个好的编辑器可以帮助我们提前检测到一些这些问题，但它不能像自动化测试那样帮助我们确保代码按预期执行。
- en: The TDD method states that we should write tests upfront, check that they fail,
    then develop code that, in the end, should pass the tests. Inspired by this approach,
    we will add our module tests now before we add the actual features.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: TDD 方法指出，我们应该先编写测试，检查它们是否失败，然后开发代码，最终应该通过这些测试。受这种方法的启发，我们现在将在添加实际功能之前添加我们的模块测试。
- en: Odoo supports automated tests, based on Python's built-in `unittest` library.
    Here, we will have a quick introduction to automated tests, and a longer explanation
    is provided in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 支持基于 Python 内置的`unittest`库的自动化测试。在这里，我们将简要介绍自动化测试，更详细的解释可以在[*第 8 章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227)中找到，*业务逻辑
    – 支持业务流程*。
- en: Changes in Odoo 12
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12 的变化
- en: Until Odoo 11, tests could also be described using **YAML Ain't Markup Language**
    (**YAML**) data files. YAML data-file support was removed in Odoo 12, so this
    kind of test is not available anymore.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 直到 Odoo 11，测试也可以使用**YAML Ain't Markup Language**（**YAML**）数据文件来描述。在 Odoo 12
    中，YAML 数据文件支持被移除，因此这种测试方式不再可用。
- en: 'The tests need to meet a few requirements to be found and executed by the test
    runner, as follows:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 测试需要满足一些要求，以便测试运行器能够找到并执行它们，如下所述：
- en: Tests are placed in the `tests/` subdirectory. Unlike regular module Python
    code, this directory does not need to be imported into the top level `__init__.py`
    file. The test-running engine will look for these test directories in modules,
    and then run them.
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试被放置在`tests/`子目录中。与常规模块 Python 代码不同，这个目录不需要被导入到顶级`__init__.py`文件中。测试运行引擎将在模块中查找这些测试目录，然后运行它们。
- en: The test code files should have a name starting with `test_` and should be imported
    from `tests/__init__.py`. The test code will be in classes derived from one of
    the several test objects available in the Odoo framework, imported from `odoo.tests.common`.
    The most frequently used test class is `TransactionCase`. The test objects use
    the `setUp()` method to initialize the data used by the test cases.
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试代码文件应该以 `test_` 开头，并从 `tests/__init__.py` 中导入。测试代码将位于从 `odoo.tests.common`
    导入的 Odoo 框架中可用的几个测试对象之一派生的类中。最常用的测试类是 `TransactionCase`。测试对象使用 `setUp()` 方法来初始化测试用例所需的数据。
- en: Each test case is a method with a name starting with `test_`. For the `TrasactionCase`
    test object, each test is an independent transaction, running the setup step before,
    and rolling it back at the end. So, the next step won't see the changes made by
    the previous test.
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个测试用例都是一个以 `test_` 开头名称的方法。对于 `TrasactionCase` 测试对象，每个测试都是一个独立的交易，在开始前运行设置步骤，并在结束时回滚。因此，下一个步骤将看不到前一个测试所做的更改。
- en: Tip
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 小贴士
- en: Tests can use demonstration data for an easier setup phase, but this is not
    a good practice since test cases can then only run in databases with demo data
    installed. If all the test data is prepared in the test setup, then the test can
    run in any database, including empty databases or copies of production databases.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 测试可以使用演示数据来简化设置阶段，但这不是一种好做法，因为在这种情况下，测试用例只能在安装了演示数据的数据库中运行。如果所有测试数据都在测试设置中准备，那么测试可以在任何数据库中运行，包括空数据库或生产数据库的副本。
- en: We plan for our app to have a `library.book` model. Let's add a simple test
    to confirm that a new book has been created correctly.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划我们的应用程序有一个 `library.book` 模型。让我们添加一个简单的测试来确认新书是否正确创建。
- en: Adding test cases
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加测试用例
- en: We will add a simple test to check book creation. For this, we need to add some
    setup data and add a test case. The test case will just confirm that the `active`
    field has the expected default value, `True`.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个简单的测试来检查书籍的创建。为此，我们需要添加一些设置数据并添加一个测试用例。测试用例将仅确认 `active` 字段具有预期的默认值，即
    `True`。
- en: 'To do this, follow these steps:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成这个任务，请按照以下步骤操作：
- en: 'Add a `tests/__init__.py` file with the following code:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个包含以下代码的 `tests/__init__.py` 文件：
- en: '[PRE16]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Then, add the actual test code, available in the `tests/test_book.py` file,
    as follows:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加实际的测试代码，可在 `tests/test_book.py` 文件中找到，如下所示：
- en: '[PRE17]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `setUp()` function gets a pointer to the `Book` model object and uses it
    to create a new book.
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`setUp()` 函数获取 `Book` 模型对象的指针，并使用它来创建一本新书。'
- en: The `test_book_create` test case adds a simple test case, checking that the
    created book has the expected default value for the `active` field. It would make
    sense for the book to be created in the test case, instead of in the setup method.
    The reason we chose not to do this is that we want to also use this book for other
    test cases, and having it created in the setup avoids duplicating that code.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`test_book_create` 测试用例添加了一个简单的测试用例，检查创建的书籍 `active` 字段是否具有预期的默认值。在测试用例中而不是在设置方法中创建书籍是有意义的。我们选择不这样做的原因是我们还想使用这本书进行其他测试用例，而在设置中创建它避免了代码的重复。'
- en: Running tests
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行测试
- en: 'Tests are run starting the server with the `--test-enable` option while installing
    or upgrading the module, as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装或升级模块时，通过使用 `--test-enable` 选项启动服务器来运行测试，如下所示：
- en: '[PRE18]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The Odoo server will look for a `tests/` subdirectory in the upgraded modules
    and will run them. At this point, the tests are expected to throw an error, so
    you should see `ERROR` messages related to the tests in the server log. This should
    change once we add the book model to the module.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 服务器将在升级的模块中查找 `tests/` 子目录，并运行它们。在这个阶段，预期测试将抛出错误，因此你应该在服务器日志中看到与测试相关的 `ERROR`
    消息。这将在我们向模块添加书籍模型后改变。
- en: Now, we should add tests for the business logic. Ideally, we want every line
    of code to be covered by at least one test case.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们应该添加对业务逻辑的测试。理想情况下，我们希望每一行代码至少有一个测试用例覆盖。
- en: Testing business logic
  id: totrans-259
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试业务逻辑
- en: We plan to have logic checking for a valid ISBN. So, we will add a test case
    to check that the method correctly validates the ISBN for the *Odoo Development
    Essentials* first edition book. The check will be implemented by a `_check_isbn()`
    method, returning `True` or `False`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 我们计划对有效的 ISBN 进行逻辑检查。因此，我们将添加一个测试用例来检查该方法是否正确验证了第一版 *Odoo 开发基础* 书籍的 ISBN。检查将通过一个
    `_check_isbn()` 方法实现，返回 `True` 或 `False`。
- en: 'In `tests/test_book.py`, add a few more lines of code after the `test_create()`
    method, as follows:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `tests/test_book.py` 中，在 `test_create()` 方法之后添加几行代码，如下所示：
- en: '[PRE19]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: It is recommended to write a different test case for each action to check. Remember
    that when using the `TransactionCase` test, each test will run independently from
    the others, and the data created or changed during one test case is rolled back
    when it ends.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 建议为每个要检查的操作编写不同的测试用例。记住，当使用`TransactionCase`测试时，每个测试都将独立于其他测试运行，并且在一个测试用例中创建或更改的数据将在测试结束时回滚。
- en: Note that if we run the tests now they should fail, since the tested features
    have not been implemented yet.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，如果我们现在运行测试，它们应该失败，因为测试的功能尚未实现。
- en: Testing access security
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试访问安全性
- en: Access security can also be checked to confirm that users have the correct privileges
    granted.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以检查访问安全性，以确认用户是否被授予正确的权限。
- en: By default, tests are executed with the Odoo internal user, `__system__`, which
    bypasses access security. So, we need to change the user running the tests, to
    check whether the right access security has been given to them. This is done by
    modifying the execution environment, `self.env`, setting the `user` attribute
    to the user we want to run the tests with.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，测试使用Odoo内部用户`__system__`执行，它绕过了访问安全性。因此，我们需要更改运行测试的用户，以检查是否已为他们提供了正确的访问安全性。这是通过修改执行环境`self.env`，将`user`属性设置为我们要用其运行测试的用户来完成的。
- en: 'We can modify our tests to take this into account. Edit the `tests/test_book.py`
    file to add a `setUp` method, as follows:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以修改我们的测试以考虑这一点。编辑`tests/test_book.py`文件以添加一个`setUp`方法，如下所示：
- en: '[PRE20]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We added two lines to the `setUp` method. This first one finds the `admin` user
    record, using its XML ID. The second line modifies the environment used to run
    the tests, `self.env`, changing the active user to the `admin` user.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`setUp`方法中添加了两行。第一行使用其XML ID查找`admin`用户记录，第二行修改了用于运行测试的环境`self.env`，将活动用户更改为`admin`用户。
- en: No further changes are needed for the tests we already wrote. They will run
    in the same way, but now using the `admin` user, because of the modified environment.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们已编写的测试，不需要进一步更改。它们将以相同的方式运行，但现在使用`admin`用户，因为环境已修改。
- en: The Library app now has a couple of basic tests, but they are failing. Next,
    we should add the code implementing the features, to make the tests pass.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆应用程序现在有几个基本测试，但它们失败了。接下来，我们应该添加实现功能的代码，以便测试通过。
- en: Step 4 – Implementing the model layer
  id: totrans-273
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第4步 - 实现模型层
- en: Models describe and store business object data, such as a **customer relationship
    management** (**CRM**) opportunity, sales order, or a partner (customer, supplier,
    and so on). A **model** describes a list of **fields** and can also have specific
    business logic attached to it.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 模型描述和存储业务对象数据，例如**客户关系管理**（**CRM**）机会、销售订单或合作伙伴（客户、供应商等）。**模型**描述了一个**字段**列表，也可以附加特定的业务逻辑。
- en: Model data structure and attached business logic are described with Python code,
    using an object class derived from an Odoo template class. A model maps to a database
    table, and the Odoo framework takes care of all the database interactions, both
    in keeping the database structure in sync with the object and in translating all
    transactions to database instructions. The framework component responsible for
    this is the **object-relational mapping** (**ORM**) component.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 模型数据结构和附加的业务逻辑使用从Odoo模板类派生的对象类用Python代码描述。一个模型映射到一个数据库表，Odoo框架负责所有数据库交互，包括保持数据库结构与对象同步，以及将所有事务转换为数据库指令。负责这一功能的框架组件是**对象关系映射**（**ORM**）组件。
- en: Our application will be used to manage a library, and we need a model for the
    book catalog.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将用于管理图书馆，我们需要一个用于图书目录的模型。
- en: Creating a data model
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建数据模型
- en: Following the Odoo development guidelines, the Python files for models should
    be placed inside a `models` subdirectory, and there should be one file for each
    model. So, we will create a `models/library_book.py` file in the `library_app`
    module.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循Odoo开发指南，模型对应的Python文件应放置在`models`子目录中，并且每个模型应该有一个文件。因此，我们将在`library_app`模块中创建一个`models/library_book.py`文件。
- en: Tip
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The Odoo official coding guidelines can be found at [http://www.odoo.com/documentation/15.0/reference/guidelines.html](http://www.odoo.com/documentation/15.0/reference/guidelines.html).
    Another relevant coding standards document is the **Odoo Community Association**
    (**OCA**) coding guidelines, which can be found at https://odoo-community.org/page/contributing.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo官方编码指南可以在[http://www.odoo.com/documentation/15.0/reference/guidelines.html](http://www.odoo.com/documentation/15.0/reference/guidelines.html)找到。另一个相关的编码标准文档是**Odoo社区协会**（**OCA**）的编码指南，可以在https://odoo-community.org/page/contributing找到。
- en: 'The first thing is to have the `models/` directory used by our module. This
    means that it should be imported by Python when the module is loaded by Odoo.
    For this, edit the module''s main `__init__.py` file so that it contains this
    line:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 第一件事是确保我们的模块使用`models/`目录。这意味着当Odoo加载模块时，Python应该导入它。为此，编辑模块的主要`__init__.py`文件，使其包含以下行：
- en: '[PRE21]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Similarly, the `models/` subdirectory should contain an `__init__.py` file
    importing the code file to use. Add a `models/__init__.py` file containing the
    following code:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，`models/`子目录应该包含一个`__init__.py`文件，用于导入要使用的代码文件。添加一个包含以下代码的`models/__init__.py`文件：
- en: '[PRE22]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Next, we can create a `models/library_book.py` file with the following content:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们可以创建一个包含以下内容的`models/library_book.py`文件：
- en: '[PRE23]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The first line is a Python code `import` statement, to make the `models` and
    `fields` Odoo core objects available.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是Python代码`import`语句，用于使`models`和`fields` Odoo核心对象可用。
- en: The second line declares the new `library.book` model. This is a Python class
    derived from `models.Model`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行声明了新的`library.book`模型。这是一个从`models.Model`派生的Python类。
- en: The next lines are indented. Python code blocks are defined by indentation levels,
    so this means that these next lines are part of the `Book` class definition. The
    class name uses CamelCase, as that is the usual convention for Python. The actual
    Python class name used is irrelevant for the Odoo framework. The model ID relevant
    for Odoo is the `_name` attribute, declared in the next line.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的行是缩进的。Python代码块由缩进级别定义，这意味着这些下一行是`Book`类定义的一部分。类名使用驼峰式命名法，这是Python的常用约定。实际使用的Python类名对Odoo框架来说并不重要。与Odoo相关的模型ID是下一行中声明的`_name`属性。
- en: The two next lines start with an underscore and declare some Odoo class attributes.
    The `_name` attribute defines the `.`) to separate their keywords.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行以下划线开头，并声明了一些Odoo类属性。`_name`属性定义了模型名称，使用点（`.`）来分隔它们的键词。
- en: Tip
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: 'Model IDs use dot-separated words. Everything else uses underscores (`_`):
    addon module names, XML IDs, table names, and so on.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 模型ID使用点分隔的单词。其余所有内容使用下划线（`_`），例如插件模块名称、XML ID、表名称等。
- en: Then, we have the `_description` model attribute. This is a display name for
    the model records that can be used in some user messages to refer to a record.
    It is not mandatory but will display a warning message in the server log if it
    is missing.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们有`_description`模型属性。这是模型记录的显示名称，可以在某些用户消息中用来引用记录。这不是强制性的，但如果缺失，服务器日志中会显示警告信息。
- en: The last seven lines declare model fields. We can see a sample of the most frequently
    used field types. For scalar values, we can see the `Char`, `Boolean`, `Date`,
    and `Binary` field types being used. For relational fields, we can see `Many2one`
    and `Many2many`.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 最后七行声明了模型字段。我们可以看到最常用字段类型的示例。对于标量值，我们可以看到使用了`Char`、`Boolean`、`Date`和`Binary`字段类型。对于关系字段，我们可以看到`Many2one`和`Many2many`。
- en: The `name` field is used for the data record title—in this case, the book title.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`字段用于数据记录标题——在这种情况下，是书名。'
- en: The `active` field is used for active records. By default, only active records
    are shown, and inactive records are automatically hidden. This is useful on master
    data models to hide away records that are no longer in use but, for historical
    reasons, need to be kept in the database.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`active`字段用于活动记录。默认情况下，只显示活动记录，非活动记录会自动隐藏。这在主数据模型中很有用，可以隐藏不再使用但出于历史原因需要保留在数据库中的记录。'
- en: Tip
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: '`name` and `active` are special field names. By default, the Odoo framework
    makes special use of them. The `name` field is used by default for the record
    display name the text shows when a record is referenced from another model. The
    `active` field is used to filter out inactive records from the UI.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`和`active`是特殊的字段名称。默认情况下，Odoo框架会对它们进行特殊处理。`name`字段默认用于记录显示名称，即当从其他模型引用记录时显示的文本。`active`字段用于从UI中过滤掉非活动记录。'
- en: '`publisher_id` is a `res.partner` partner model in this case. It is used to
    reference the publishing company. The convention is for many-to-one field names
    to end with `_id`.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`publisher_id`是本例中的`res.partner`合作伙伴模型。它用于引用出版公司。对于多对一字段名称的约定是以`_id`结尾。'
- en: '`author_ids` is a `res.partner` partner model. At the database level, this
    data is not actually stored in a table field but in a helper table, automatically
    created to store the relations between records in the two tables. The convention
    is for to-many field names to end with `_ids`.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`author_ids`是`res.partner`合作伙伴模型。在数据库级别，这些数据实际上并没有存储在表字段中，而是在一个辅助表中存储，该表是自动创建的，用于存储两个表中的记录之间的关系。对于多对多字段名称的约定是以`_ids`结尾。'
- en: These are two different relations, both between the book and the partner models.
    The partner model is built into the Odoo framework and is where people, companies,
    and addresses should be stored. We are using it to store both our publishers and
    authors.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种关系都是书和合作伙伴模型之间的关系。合作伙伴模型内置在Odoo框架中，是存储人员、公司和地址的地方。我们正在使用它来存储我们的出版商和作者。
- en: 'Now, we make these changes effective in Odoo by upgrading the Library app module.
    Again, this is the command we can run to update the `library_app` module on the
    `library` database:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们通过升级图书馆应用程序模块在Odoo中使这些更改生效。同样，这是我们可以运行的命令来更新`library`数据库上的`library_app`模块：
- en: '[PRE24]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'There are no menu items yet to access the book model. These will be added later
    in the chapter. Still, to inspect the newly created model and confirm it was properly
    created in the database, we can use the `library.book` model and click on it to
    see its definition, as illustrated in the following screenshot:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 目前还没有菜单项可以访问书籍模型。这些将在本章后面添加。尽管如此，为了检查新创建的模型并确认它已在数据库中正确创建，我们可以使用`library.book`模型并点击它以查看其定义，如图下截图所示：
- en: '![Figure 3.4 – The library.book model view in the Technical menu'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 技术菜单中的library.book模型视图'
- en: '](img/Figure_3.4_B16119_B16119.jpg)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_3.4_B16119_B16119.jpg]'
- en: Figure 3.4 – The library.book model view in the Technical menu
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 技术菜单中的library.book模型视图
- en: We should be able to see the model listed, and confirm that it contains the
    fields we defined in the Python file. If you can't see this, try again a server
    restart with a module upgrade, and pay close attention to the server log, looking
    for the messages loading the Library app, and for any warnings reporting issues
    with the Odoo database.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该能够看到列出的模型，并确认它包含我们在Python文件中定义的字段。如果您看不到这些，请尝试再次重启服务器并升级模块，并密切注意服务器日志，寻找加载图书馆应用程序的消息以及任何报告Odoo数据库问题的警告。
- en: 'On the `library.book` field list, we can see some additional fields that we
    didn''t declare. These are special fields that Odoo automatically adds to every
    model. They are listed as follows:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在`library.book`字段列表中，我们可以看到一些我们没有声明的额外字段。这些是Odoo自动添加到每个模型中的特殊字段。如下所示：
- en: '`id` is a unique numeric database ID for each record.'
  id: totrans-310
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`是每个记录的唯一数字数据库ID。'
- en: '`create_date` and `create_uid` are the record creation timestamp and the user
    who created the record.'
  id: totrans-311
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create_date`和`create_uid`是记录创建的时间戳和创建记录的用户。'
- en: '`display_name` provides a textual representation for the record used—for example,
    when it is referenced in other records. It is a computed field and, by default,
    just uses the text in the `name` field, if available.'
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`display_name`为记录提供文本表示——例如，当它在其他记录中引用时。它是一个计算字段，默认情况下，如果可用，仅使用`name`字段中的文本。'
- en: '`write_date` and `write_uid` are the record''s last modification timestamp
    and the user who did that update.'
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`write_date`和`write_uid`是记录的最后修改时间戳和执行该更新的用户。'
- en: '`__last_update` is a computed field not stored in the database and is used
    for concurrency checks.'
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`__last_update`是一个不存储在数据库中的计算字段，用于并发检查。'
- en: The book model is now created in the database, but it is not yet available to
    users. We need a menu item for that, but that won't be enough. For the menu item
    to be visible, users first need to be granted access to the new model.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍模型现在已在数据库中创建，但尚未对用户可用。我们需要一个菜单项来实现这一点，但这还不够。为了使菜单项可见，用户首先需要被授予对新模型的访问权限。
- en: Step 5 – Setting up access security
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5步 – 设置访问安全
- en: 'The `library.book` model was created as the database, but you might have noticed
    that when it is loaded, it prints this warning message to the server log:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`library.book`模型已在数据库中创建，但您可能已经注意到，当它被加载时，它会将此警告消息打印到服务器日志：'
- en: '[PRE25]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The message is pretty clear—the new model has no access rules, and so it can't
    be used by anyone yet. Earlier, we created the security groups for this app, and
    we now need to give them access to the app's models.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 消息非常明确——新的模型没有访问规则，因此目前任何人还不能使用它。之前，我们为这个应用程序创建了安全组，我们现在需要给他们提供对应用程序模型的访问权限。
- en: Changes in Odoo 12
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12中的更改
- en: The `admin` user follows access security rules, just as with any other user,
    except for the root-like internal superuser. We need to grant it access to new
    models before it can use them. This was not the case up to Odoo 11\. In these
    earlier Odoo versions, the `admin` user was also the internal superuser and bypassed
    access security rules. This means that newly created models were automatically
    available and usable to it.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`admin`用户遵循访问安全规则，就像任何其他用户一样，除了类似root的内部超级用户。在它可以使用之前，我们需要授予它对新模型的访问权限。在Odoo
    11之前，这种情况并不存在。在这些早期的Odoo版本中，`admin`用户也是内部超级用户，并绕过了访问安全规则。这意味着新创建的模型自动对其可用并可使用。'
- en: Adding access control security
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加访问控制安全
- en: 'To get a picture of what information is needed to add access rules to a model,
    on the web client, navigate to **Settings** | **Technical** | **Security** | **Access
    Rights**, as illustrated in the following screenshot:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解添加访问规则到模型所需的信息，在Web客户端，导航到**设置** | **技术** | **安全** | **访问权限**，如图下所示：
- en: '![Figure 3.5 – Access Rights list, in the Technical menu'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5 – 技术菜单中的访问权限列表]'
- en: '](img/Figure_3.5_B16119_B16119.jpg)'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.5_B16119_B16119.jpg](img/Figure_3.5_B16119_B16119.jpg)'
- en: Figure 3.5 – Access Rights list, in the Technical menu
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 技术菜单中的访问权限列表
- en: 'These access rights are also referred to as an **access control list** or **ACL**.
    In the previous screenshot, we can see the ACL for some models. It indicates,
    for a security group, what kinds of actions are allowed on records: read, write,
    create, and delete.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这些访问权限也被称为**访问控制列表**或**ACL**。在之前的屏幕截图中，我们可以看到一些模型的ACL。它表示对于安全组，在记录上允许执行哪些类型的操作：读取、写入、创建和删除。
- en: Changes in Odoo 14
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 14中的更改
- en: Transient models, used for interactive wizards, now also need to be provided
    access rights to user groups. In previous Odoo versions, this was not so, and
    users had access to these models by default. The recommendation is to grant read,
    write and create rights and not grant delete/unlink rights (`1,1,1,0` on CSV files).
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 临时模型，用于交互式向导，现在也需要为用户组提供访问权限。在之前的Odoo版本中，情况并非如此，用户默认可以访问这些模型。建议授予读取、写入和创建权限，不授予删除/解除链接权限（CSV文件上的`1,1,1,0`）。
- en: For the Library app, we will grant library users access to read, write, and
    create book records, and grant full access to library managers, including deleting
    records.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 对于图书馆应用程序，我们将授予图书馆用户读取、写入和创建书籍记录的访问权限，并授予图书馆管理员完全访问权限，包括删除记录。
- en: This data can be provided by a module data file, loading records into the `ir.model.access`
    model. The filename for CSV data files must match the model ID we are loading
    data into.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这些数据可以由模块数据文件提供，将记录加载到`ir.model.access`模型中。CSV数据文件的名称必须与我们加载数据的模型ID匹配。
- en: 'So we should add the `security/ir.model.access.csv` file, with the following
    content:'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们应该添加`security/ir.model.access.csv`文件，内容如下：
- en: '[PRE26]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The first line of the file has the field names. These are the columns provided
    in our CSV file:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的第一行包含字段名。这些是我们CSV文件中提供的列：
- en: '`id` is the record''s external ID (also known as XML ID). It should be unique
    in our module.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`是记录的外部ID（也称为XML ID）。在我们的模块中应该是唯一的。'
- en: '`name` is a descriptive title. It is informative and it is recommended for
    it to be unique.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`是一个描述性标题。它具有信息性，并且建议它是唯一的。'
- en: '`model_id` is the external ID for the model we are giving access to. Models
    have XML IDs automatically generated by the ORM; for `library.book`, the ID is
    `model_library_book`.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_id`是我们赋予访问权限的模型的XML ID。模型由ORM自动生成XML ID；对于`library.book`，ID是`model_library_book`。'
- en: '`group_id` identifies the security group to give permissions to. We grant access
    to the security groups created before: `library_group_user` and `library_group_manager`.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_id`标识要赋予权限的安全组。我们授予了在之前创建的安全组：`library_group_user`和`library_group_manager`的访问权限。'
- en: The `perm_...` fields grant access to the `read`, `write`, `create`, or `unlink`
    (delete) operations. We used `1` for `yes`/`true` and `0` for `no`/`false`.
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perm_...`字段授予对`read`、`write`、`create`或`unlink`（删除）操作的访问权限。我们使用`1`表示`yes`/`true`，使用`0`表示`no`/`false`。'
- en: 'We must not forget to reference this new file in the `data` key in the `__manifest__.py`
    file. It should look like this:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不要忘记在`__manifest__.py`文件中的`data`键中引用这个新文件。它应该看起来像这样：
- en: '[PRE27]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: As before, upgrade the module to make these changes effective in the Odoo database.
    The warning message should be gone.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，升级模块以使这些更改在Odoo数据库中生效。警告信息应该已经消失。
- en: 'At this point, the books model is available and should be accessible to the
    `admin` user. So, the first of our tests should be passing. Let''s run it now,
    as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，书籍模型是可用的，并且应该对 `admin` 用户可访问。因此，我们的第一个测试应该通过。现在让我们运行它，如下所示：
- en: '[PRE28]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: We should see one test pass and one test fail.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该看到一个测试通过，一个测试失败。
- en: The ACL **Access Rights** option grants permissions at the model level, but
    Odoo also supports row-level access security, through **Record Rules**. This feature
    is explained in the following section.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: ACL **访问权限** 选项在模型级别授予权限，但Odoo还支持行级访问安全，通过 **记录规则**。此功能将在下一节中解释。
- en: Row-level access rules
  id: totrans-347
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行级访问规则
- en: Record rules define filters limiting the records a security group can access.
    For example, a salesperson could be limited to seeing only their own quotations,
    or an accounting user could be limited to seeing only accounting entries for the
    company they were given access to.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 记录规则定义了限制安全组可以访问的记录的过滤器。例如，销售人员可能只能看到他们自己的报价，或者会计用户可能只能看到他们被授予访问权限的公司会计分录。
- en: To showcase this feature, we will limit library users to not be able to see
    inactive books. It is true that by default these are hidden, but they are still
    accessible if we filter the records with an `active` equals `True` condition.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这个功能，我们将限制图书馆用户不能查看非活动书籍。默认情况下，这些书籍是隐藏的，但如果我们使用 `active` 等于 `True` 的条件过滤记录，它们仍然可以访问。
- en: '`ir.rule` model.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`ir.rule` 模型。'
- en: 'Record rule definition fields needed are outlined here:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 需要在此概述的记录规则定义字段：
- en: '`name`: A distinctive title, preferably unique.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：一个独特的标题，最好是唯一的。'
- en: '`model_id`: A reference to the model that the rule applies to.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_id`：规则应用的模型的引用。'
- en: '`groups`: A reference to the security group the rule applies to. This field
    is optional, and if not set it is considered a global rule (the `global` field
    is automatically set to `True`). Global rules behave differently—they impose restrictions
    that non-global rules can''t override. It uses a specific syntax to write on to-many
    fields.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups`：规则应用的权限组的引用。此字段是可选的，如果没有设置，则被视为全局规则（`global` 字段自动设置为 `True`）。全局规则的行为不同——它们施加的限制是非全局规则无法覆盖的。它使用特定的语法来写入多对多字段。'
- en: '`domain_force`: The domain filter to use for the access restriction, using
    a list of tuples syntax for filter expressions used by Odoo.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain_force`：用于访问限制的域过滤器，使用Odoo中用于过滤表达式的元组列表语法。'
- en: 'To add a record rule to the Library app, edit the `security/library_security.xml`
    file to add a second `<data>` section, just before the `</odoo>` final tag, as
    follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 要向图书馆应用添加记录规则，编辑 `security/library_security.xml` 文件，在 `</odoo>` 最终标签之前添加第二个
    `<data>` 部分，如下所示：
- en: '[PRE29]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The record rule is inside a `<data noupdate="1">` element, meaning that those
    records will be created on module install but won't be rewritten on module updates.
    The point is to allow these rules to be later customized without the risk of those
    customizations having a module upgrade.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 记录规则位于 `<data noupdate="1">` 元素内，这意味着这些记录将在模块安装时创建，但在模块更新时不会被重写。目的是允许稍后对这些规则进行自定义，而不会存在自定义更改因模块升级而风险增加。
- en: Tip
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: While developing, `noupdate="1"` data sections can be a nuisance since later
    fixes and changes won't be updated on module upgrade. There are two ways to work
    around this. One is to temporarily work with `noupdate="0"` during development,
    and change it to the final `noupdate="1"` when you're finished. The second way
    is to reinstall the module instead of upgrading. This is possible in the command
    line, using `-i` instead of `-u` on an already installed module.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发过程中，`noupdate="1"` 数据部分可能会造成不便，因为后续的修复和更改在模块升级时不会更新。有两种方法可以解决这个问题。一种是在开发期间暂时使用
    `noupdate="0"`，完成开发后将其更改为最终的 `noupdate="1"`。第二种方法是在不升级的情况下重新安装模块。这在命令行中是可能的，使用
    `-i` 而不是 `-u` 在已安装的模块上。
- en: The `groups` field is a many-to-many relation and uses a special syntax needed
    for the to-many fields. It is a list of tuples, where each tuple is a command.
    In this case, a `(4, x)` command was used, and the code `4` means that the record
    referenced next is to be appended to the values. The referenced record is `library_group_user`,
    the Library user group. The to-many field write syntax is discussed in more detail
    in [*Chapter 6*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164), *Models – Structuring
    the Application Data*.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`字段是多对多关系，并使用用于多对多字段的特殊语法。它是一个元组列表，其中每个元组是一个命令。在这种情况下，使用了`(4, x)`命令，代码`4`表示下一个引用的记录要追加到值中。引用的记录是`library_group_user`，图书馆用户组。多对多字段的写法在[*第6章*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164)中更详细地讨论，*模型
    – 结构化应用程序数据*。'
- en: The domain expression also uses a special syntax, with a list of triples, each
    specifying a filter condition. The domain filter syntax is explained in [*Chapter
    7*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194), *Recordsets — Working with
    Model Data*.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 域表达式也使用特殊的语法，包含一个三元组列表，每个三元组指定一个过滤条件。域过滤语法在[*第7章*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194)中解释，*记录集
    — 与模型数据交互*。
- en: Now that users can access the book model, we can go ahead with adding the UI,
    starting with the menu items.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用户可以访问书籍模型，我们可以继续添加UI，从菜单项开始。
- en: Step 6 – Implementing the backend view layer
  id: totrans-364
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6步 – 实现后端视图层
- en: The view layer describes the UI. Views are defined using XML, which is used
    by the web client framework to dynamically generate data-aware HTML views.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 视图层描述了UI。视图使用XML定义，该XML由Web客户端框架用于动态生成数据感知的HTML视图。
- en: '**Menu items** can execute **window actions** to render **views**. For example,
    the **Users** menu item processes a window action, also called **Users**, that
    in turn renders a **view** composition, with a **list** and a **form**.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '**菜单项**可以执行**窗口动作**以渲染**视图**。例如，**用户**菜单项处理一个名为**用户**的窗口动作，进而渲染一个**视图**组合，包括**列表**和**表单**。'
- en: Several view types are available. The three most commonly used views are the
    **List** (sometimes called **tree** for historical reasons), the **Form**, and
    the **Search** options available in the top-right search box.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 可用几种视图类型。最常用的三种视图是**列表**（有时由于历史原因称为**树**），**表单**和位于右上角搜索框中的**搜索**选项。
- en: Throughout the next sections, we will make gradual improvements and will need
    frequent module upgrades to make them available, or we can use the `--dev=all`
    server option, which spares us from module upgrades while developing. Using it,
    the view definitions are read directly from the XML files, and the changes made
    are immediately available to Odoo without the need for a module upgrade. In [*Chapter
    2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *Preparing the Development
    Environment*, more details are given on the `--dev` server option.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几节中，我们将逐步改进，并需要频繁地升级模块以使它们可用，或者我们可以使用`--dev=all`服务器选项，这使我们免于在开发时进行模块升级。使用它，视图定义直接从XML文件中读取，所做的更改立即对Odoo可用，无需进行模块升级。在[*第2章*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049)中，*准备开发环境*，提供了关于`--dev`服务器选项的更多详细信息。
- en: Tip
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: If a module upgrade fails because of an XML error, don't panic! Carefully read
    the error message in the server log. It should point you to where the problem
    is. If you feel in trouble, just comment out the last edited XML portions or remove
    the XML file from `__manifest__.py` and repeat the upgrade. The server should
    then start correctly.
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块升级因XML错误而失败，不要慌张！仔细阅读服务器日志中的错误消息。它应该指向问题所在之处。如果你感到困惑，只需注释掉最后编辑的XML部分或从`__manifest__.py`中删除XML文件，然后重复升级。然后服务器应该正确启动。
- en: Following the Odoo development guidelines, the XML files for the UI should be
    inside a `views/` subdirectory.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 遵循Odoo开发指南，UI的XML文件应位于`views/`子目录中。
- en: Let's start creating a UI for our to-do application.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始为我们的待办事项应用创建UI。
- en: Adding menu items
  id: totrans-373
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加菜单项
- en: The Library app now has the model to store book data, and we want to have it
    available on the UI. The first thing to do is add the corresponding menu options.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆应用现在有了存储书籍数据的模型，我们希望它在UI上可用。首先要做的事情是添加相应的菜单选项。
- en: 'Edit the `views/library_menu.xml` file and add the records for the window action
    and the menu item for the books model, as follows:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`views/library_menu.xml`文件，并添加窗口动作和书籍模型菜单项的记录，如下所示：
- en: '[PRE30]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This data file describes two records to add to Odoo, as follows:'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 此数据文件描述了两个要添加到Odoo中的记录，如下所示：
- en: The `<record>` element defines a client-side window action, to open the `library.book`
    model with the `tree` and `form` views enabled, in that order.
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<record>`元素定义了一个客户端窗口动作，以启用`tree`和`form`视图的顺序打开`library.book`模型。'
- en: The `<menuitem>` for `Books`, running the `action_library_book` action, defined
    before.
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Books`的`<menuitem>`，运行之前定义的`action_library_book`动作。'
- en: Upgrading the Library app now will make these changes available. A browser page
    reload might be needed to see the new menu items. Once this is done, the **Library**
    top menu should be available in Odoo, having a **Books** submenu option.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 现在升级图书馆应用将使这些更改可用。可能需要刷新浏览器页面才能看到新的菜单项。一旦完成，Odoo中的**图书馆**顶级菜单应该可用，并具有**书籍**子菜单选项。
- en: Even though we haven't defined our UI view, Odoo provides automatically generated
    views, allowing us to start browsing and editing data right away.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们尚未定义我们的UI视图，Odoo提供了自动生成的视图，使我们能够立即开始浏览和编辑数据。
- en: 'Clicking on the **Library** | **Books** menu item will display a basic list
    view, and clicking on the **Create** button will show a form like this:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**图书馆** | **书籍**菜单项将显示基本列表视图，点击**创建**按钮将显示如下表单：
- en: '![Figure 3.6 – Automatically generated form view for Library Books'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.6 – 图书馆书籍自动生成的表单视图'
- en: '](img/Figure_3.6_B16119_B16119.jpg)'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.6_B16119_B16119.jpg)'
- en: Figure 3.6 – Automatically generated form view for Library Books
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – 图书馆书籍自动生成的表单视图
- en: Odoo provides automatically generated views for us, but they're not that great.
    We might take this into our own hands and create our views, starting with the
    book form view.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo为我们提供了自动生成的视图，但它们并不那么出色。我们可能需要自己动手创建视图，从书籍表单视图开始。
- en: Creating a form view
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表单视图
- en: Views are data records stored in the database, in the `ir.ui.view` model. So,
    we need to add a data file, with a `<record>` element describing the view.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 视图是存储在数据库中的数据记录，在`ir.ui.view`模型中。因此，我们需要添加一个数据文件，其中包含一个`<record>`元素来描述视图。
- en: 'Add this new `views/book_view.xml` file to define the form view:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 将此新的`views/book_view.xml`文件添加到定义表单视图：
- en: '[PRE31]'
  id: totrans-390
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The `ir.ui.view` record has a record `id` field that defines an XML ID that
    can be used for other records to reference it. The view record sets values for
    three fields: `name`, `model`, and `arch`.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`ir.ui.view`记录有一个记录`id`字段，它定义了一个XML ID，可以供其他记录引用。视图记录为三个字段设置值：`name`、`model`和`arch`。'
- en: The view is for the `library.book` model and is named `Book Form`. The name
    is just for information purposes. It does not have to be unique, but it should
    allow you to easily identify which record it refers to. In fact, the name can
    be entirely omitted; in that case, it will be automatically generated from the
    model name and the view type.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 该视图是`library.book`模型，命名为`Book Form`。名称仅用于信息目的。它不必是唯一的，但它应该允许你轻松识别它所引用的记录。实际上，名称可以完全省略；在这种情况下，它将自动从模型名称和视图类型生成。
- en: The most important field is `arch` as it contains the actual view definition,
    and this needs closer examination.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的字段是`arch`，因为它包含实际的视图定义，这需要更仔细的检查。
- en: The first element of the view definition is the `<form>` tag. It declares the
    type of view we are defining and the remaining elements that should be contained
    in it.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 视图定义的第一个元素是`<form>`标签。它声明了我们正在定义的视图类型以及应该包含在其内的剩余元素。
- en: Next, we define sections inside the form, using  `<group>` elements. These may
    contain can contain `<field>` elements or other elements, including nested group
    elements. A group adds an invisible grid with two columns, perfect for fields
    because, by default, they occupy two columns, one for the label text, and another
    for the input field.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们使用`<group>`元素在表单内定义部分，这些部分可以包含`<field>`元素或其他元素，包括嵌套的组元素。一个组添加了一个带有两列的不可见网格，对于字段来说非常合适，因为默认情况下，它们占用两列，一列用于标签文本，另一列用于输入字段。
- en: Our simple form contains a single `<group>` element, and inside it, we added
    a `<field>` element for each of the fields to be presented. The fields automatically
    use an appropriate default widget, such as a date selection widget for date fields.
    In some cases, we might want to use a specific widget, adding the `widget` attribute.
    That was the case for `author_ids`, using a widget to display the authors as a
    list of tags, and the `image` field, using a widget appropriate for handling images.
    A detailed explanation of view elements is provided in [*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287),
    *Backend Views – Designing the User Interface*.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简单的表单包含一个单独的`<group>`元素，并在其中为要展示的每个字段添加了一个`<field>`元素。字段自动使用适当的默认小部件，例如日期字段使用日期选择小部件。在某些情况下，我们可能想使用特定的小部件，添加`widget`属性。这就是`author_ids`使用小部件以标签列表的形式显示作者，以及`image`字段使用处理图像的适当小部件的情况。视图元素的详细解释见[*第10章*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287)，*后端视图
    - 设计用户界面*。
- en: 'Remember to add this new file to the `data` key in the manifest file; otherwise,
    our module won''t know about it and it won''t be loaded. Here''s the code you''ll
    need to do this:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 记得将这个新文件添加到清单文件中的`data`键；否则，我们的模块将不知道它，并且它不会被加载。以下是您需要执行此操作的代码：
- en: '[PRE32]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The views will usually go after the security files, and before the menu file.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 视图通常位于安全文件之后，菜单文件之前。
- en: Remember that for the changes to be loaded to our Odoo database, a module upgrade
    is needed. To see the changes in the web client, the form needs to be reloaded.
    Either click again on the menu option that opens it or reload the browser page
    (*F5* in most browsers).
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，为了将更改加载到我们的Odoo数据库中，需要模块升级。要在Web客户端看到更改，需要重新加载表单。可以再次点击打开它的菜单选项，或者重新加载浏览器页面（在大多数浏览器中为*F5*）。
- en: Business document form views
  id: totrans-401
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 商业文档表单视图
- en: 'The preceding section provided a basic form view, but we can make some improvements
    to it. For document models, Odoo has a presentation style that mimics a paper
    page. This form contains two top elements: a `<header>` element, to contain action
    buttons, and a `<sheet>` element, to contain data fields.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节提供了一个基本表单视图，但我们可以对其进行一些改进。对于文档模型，Odoo有一个模仿纸张页面的展示风格。此表单包含两个顶部元素：一个`<header>`元素，用于包含操作按钮，以及一个`<sheet>`元素，用于包含数据字段。
- en: 'We can use this and modify the basic `<form>` element defined in the previous
    section with this one:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这个，并使用上一节中定义的基本`<form>`元素来修改它：
- en: '[PRE33]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Forms can feature buttons, used to perform actions. These buttons can run a
    window action, usually opening another form, or run a Python class method. Buttons
    can be placed inside a `<header>` section at the top, or anywhere inside a form.
    Let's see how.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 表单可以包含按钮，用于执行操作。这些按钮可以运行窗口动作，通常打开另一个表单，或者运行Python类方法。按钮可以放置在顶部的`<header>`部分内，或者表单内的任何位置。让我们看看如何。
- en: Adding action buttons
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加操作按钮
- en: We will showcase a button in the header that checks if the book ISBN is valid.
    The code for this will be in a method of the book model that we will name `button_check_isbn()`.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在页眉中展示一个按钮，用于检查书籍ISBN是否有效。这个功能的代码将位于我们命名为`button_check_isbn()`的书籍模型的方法中。
- en: 'We haven''t added the method, but we can already add the corresponding button
    to the form, as follows:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有添加方法，但我们可以先在表单中添加相应的按钮，如下所示：
- en: '[PRE34]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The basic attributes of a button are listed as follows:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的基本属性如下列出：
- en: '`string`: The UI text to display on the button'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`：按钮上显示的UI文本'
- en: '`type`: The type of action it performs, `object` or `action`.'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`：它执行的动作类型，`object`或`action`。'
- en: '`name`: This is the ID of the action that is run. For `object`, `type` is the
    method name; for `action`, this is the action record ID.'
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是运行动作的ID。对于`object`，`type`是方法名称；对于`action`，这是动作记录ID。'
- en: '`class`: This is an optional attribute to apply CSS styles, as in regular HTML.'
  id: totrans-414
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class`：这是一个可选属性，用于应用CSS样式，就像常规HTML一样。'
- en: Using groups to organize forms
  id: totrans-415
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用组来组织表单
- en: The `<group>` tag allows us to organize the form content. A `<group>` element
    creates an invisible grid with two columns. Field elements added inside it will
    be vertically stacked, as each field takes up two cells—one for the label and
    another for the input box. Adding two `<group>` elements inside a `<group>` element
    creates a layout with two columns of fields.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`<group>`标签允许我们组织表单内容。一个`<group>`元素创建一个包含两列的不可见网格。添加到其中的字段元素将垂直堆叠，因为每个字段占用两个单元格——一个用于标签，另一个用于输入框。在`<group>`元素内部添加两个`<group>`元素将创建一个包含字段两列的布局。'
- en: 'We will use this to organize the book form. We will change the `<sheet>` content
    to match this:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个来组织书籍表单。我们将更改`<sheet>`内容以匹配以下内容：
- en: '[PRE35]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `<group>` elements used have a `name` attribute assigning an ID to them.
    This is not required but is advised, since it makes it easier for them to be referenced
    by extension views.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的`<group>`元素具有一个`name`属性，为它们分配一个ID。这不是必需的，但建议这样做，因为它使得它们更容易被扩展视图引用。
- en: The complete form view
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 完整的表单视图
- en: 'At this point, the XML definition for the book form view should look like this:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，书籍表单视图的XML定义应该看起来像这样：
- en: '[PRE36]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The action buttons don't work yet, since we still need to add their business
    logic. This will be done later in this chapter.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 动作按钮目前不起作用，因为我们还需要添加它们的企业逻辑。这将在本章的后面完成。
- en: Adding list and search views
  id: totrans-424
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加列表和搜索视图
- en: List views are defined using a `<tree>` view type. Their structure is quite
    straightforward. The `<tree>` top element should include the fields to present
    as columns.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 列表视图使用`<tree>`视图类型定义。它们的结构相当简单。`<tree>`顶级元素应包含作为列呈现的字段。
- en: 'We can add the following `<tree>` view definition to `book_view.xml`:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将以下`<tree>`视图定义添加到`book_view.xml`中：
- en: '[PRE37]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This defines a list with four columns: `name`, `author_ids`, `publisher_id`,
    and `date_published`.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 这定义了一个包含四个列的列表：`name`、`author_ids`、`publisher_id`和`date_published`。
- en: At the top-right corner of the list, Odoo displays a search box. The fields
    it searches in and the available filters are defined by a `<search>` view.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表的右上角，Odoo显示一个搜索框。它搜索的字段和可用的过滤器由一个`<search>`视图定义。
- en: 'As before, we will add this to `book_view.xml`, as follows:'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们将将其添加到`book_view.xml`中，如下所示：
- en: '[PRE38]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This search view is using two different elements, `<field>` and `<filter>`.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这个搜索视图正在使用两个不同的元素，`<field>`和`<filter>`。
- en: The `<field>` elements define fields that are automatically searched when the
    user is typing in the search box. We added `publisher_id` to automatically show
    search results for the publisher field. The `<filter>` elements add predefined
    filter conditions, which can be toggled with a user click. The filter condition
    uses the Odoo domain filter syntax. Domain filters are addressed in more detail
    in [*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *Backend Views
    — Designing the User Interface.*
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`<field>`元素定义了当用户在搜索框中键入时自动搜索的字段。我们添加了`publisher_id`以自动显示出版商字段的搜索结果。《filter>`元素添加了预定义的过滤器条件，这些条件可以通过用户点击切换。过滤器条件使用Odoo域过滤器语法。域过滤器在[*第10章*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287)中更详细地介绍，*后端视图——设计用户界面*。'
- en: Changes in Odoo 12
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12中的更改
- en: '`<filter>` elements are now required to have a `name="..."` attribute, uniquely
    identifying each filter definition. If it''s missing, the XML validation will
    fail and the module will not install or upgrade.'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`<filter>`元素现在需要有一个`name="..."`属性，唯一标识每个过滤器定义。如果它缺失，XML验证将失败，模块将无法安装或升级。'
- en: We now have the Library app's basic components in place—the model and the view
    layers. Next, we add the business logic layer, adding the code that will make
    the **Check ISBN** button work.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经将图书馆应用程序的基本组件放好了——模型和视图层。接下来，我们添加业务逻辑层，添加将使**检查ISBN**按钮工作的代码。
- en: Step 7 – Implementing the business logic layer
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7步 – 实现业务逻辑层
- en: The business logic layer supports the application's business rules, such as
    validations and automation. We will now add the logic for the `library.book` model.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 业务逻辑层支持应用程序的业务规则，例如验证和自动化。我们现在将为`library.book`模型添加逻辑。
- en: Adding business logic
  id: totrans-439
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加业务逻辑
- en: 'Modern ISBNs have 13 digits, the last of which is a check digit computed from
    the first 12\. If `digits` contains the first 12 digits, this Python code returns
    the corresponding check digit:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 现代ISBN有13位数字，最后一位是计算自前12位的校验位。如果`digits`包含前12位数字，这段Python代码将返回相应的校验位：
- en: '[PRE39]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The preceding code, with some adjustments, will be at the heart of our validation
    function. It should be a method in the `class Book(...)` object. We will add a
    method that checks a record''s ISBN and returns `True` or `False`, as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码，经过一些调整，将成为我们验证函数的核心。它应该是`class Book(...)`对象中的一个方法。我们将添加一个方法来检查记录的ISBN，并返回`True`或`False`，如下所示：
- en: '[PRE40]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Note that this method is not directly usable from the **Form** button, because
    it doesn't provide any visual cue of the result. Next, we will add a second method
    for that.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这个方法不能直接从**表单**按钮使用，因为它不提供任何关于结果的可视提示。接下来，我们将添加第二个方法。
- en: Changes in Odoo 13
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 13中的更改
- en: The `@api.multi` decorator was removed from the Odoo **application programming
    interface** (**API**) and can't be used. Note that for previous Odoo versions,
    this decorator was available, but not necessary. Adding it or not would have the
    exact same effect.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`@api.multi`装饰器已从Odoo **应用程序编程接口**（**API**）中移除，无法使用。请注意，对于之前的Odoo版本，此装饰器是可用的，但不是必需的。添加或不添加它会产生完全相同的效果。'
- en: 'To report validation issues to the user, we will use the Odoo `ValidationError`
    exception, so the first thing to do is to make it available by importing it. Edit
    the `models/library_book.py` Python file to add this at the top of the file, as
    follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向用户报告验证问题，我们将使用Odoo的`ValidationError`异常，因此首先要做的是通过导入使其可用。编辑`models/library_book.py`Python文件，在文件顶部添加以下内容，如下所示：
- en: '[PRE41]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Next, still in the `models/library_book.py` file, add the following code to
    the `Book` class:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，仍然在`models/library_book.py`文件中，向`Book`类添加以下代码：
- en: '[PRE42]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Here, `self` represents a recordset, and we can loop through each record and
    perform a check on each.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`self`代表一个记录集，我们可以遍历每个记录并对每个执行检查。
- en: This method is used in a `self` to be a single record and have no need to use
    the `for` loop. In fact, we did something similar with the `_check_isbn()` helper
    method. If you're going this way, it is recommended to add `self.ensure_one()`
    at the beginning of the method, to fail early if for some reason `self` is not
    a single record.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法用于`self`以表示单个记录，并且不需要使用`for`循环。实际上，我们使用`_check_isbn()`辅助方法做了类似的事情。如果您选择这样做，建议在方法开始时添加`self.ensure_one()`，以便在`self`不是单个记录的情况下尽早失败。
- en: But we chose to use a `for` loop to support multiple records, making our code
    capable of performing mass validations if we want to have that feature later on.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们选择使用`for`循环来支持多个记录，使我们的代码能够在将来需要时执行批量验证。
- en: The code loops through all the selected book task records and, for each one,
    if the book ISBN has a value, it checks if it is valid. If not, a warning message
    is raised for the user.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 代码遍历所有选定的书籍任务记录，并对每个记录，如果书籍ISBN有值，它会检查其是否有效。如果不是，则会向用户发出警告信息。
- en: The `Model` method does not need to return anything, but we should have it at
    least return a `True` value. The reason is that not all client implementations
    of the XML-**Remote Procedure Call** (**RPC**) protocol support None/Null values,
    and may raise errors when such a value is returned by a method.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`Model`方法不需要返回任何内容，但我们至少应该让它返回一个`True`值。原因是并非所有客户端的XML-**远程过程调用**（**RPC**）协议实现都支持None/Null值，当方法返回此类值时可能会引发错误。'
- en: This is a good moment to upgrade the module and run the tests again, adding
    the `--test-enable` option to confirm that tests are now passing. You can also
    try it live, going into a book form and trying the button with both correct and
    incorrect ISBNs.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个升级模块并再次运行测试的好时机，添加`--test-enable`选项以确认测试现在正在通过。您也可以尝试实时操作，进入书籍表单并尝试带有正确和错误ISBN的按钮。
- en: 'The Library app has all the backend features we wanted to add for its first
    iteration, and we implemented the Odoo components at the several layers: model,
    view, and business logic. But Odoo also supports creating external-facing web
    pages. In the next section, we will create our first Odoo website page.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 图书馆应用具有我们想要在其第一次迭代中添加的所有后端功能，我们在多个层（模型、视图和业务逻辑）中实现了Odoo组件。但Odoo还支持创建面向外部的Web页面。在下一节中，我们将创建我们的第一个Odoo网站页面。
- en: Step 8 – Implementing the website UI
  id: totrans-458
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8步 – 实现网站UI
- en: Odoo also provides a web development framework, to develop website features
    closely integrated with the backend apps. We will take our first steps toward
    this by creating a simple web page to display a list of active books in our library.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo还提供了一个Web开发框架，用于开发与后端应用紧密集成的网站功能。我们将通过创建一个简单的网页来显示图书馆中活跃的书籍列表来迈出第一步。
- en: The book catalog page will respond to web requests at the `http://my-server/library/books`
    address, so `/library/books` is the URL endpoint we want to implement.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 图书目录页面将在`http://my-server/library/books`地址响应网络请求，因此`/library/books`是我们想要实现的URL端点。
- en: Web `http.Controller` derived class. The method is bound to one or more URL
    endpoints using the `@http.route` controller. When any of these URL endpoints
    are accessed, the controller code executes and returns the HTML to be presented
    to the user. The HTML rendering will usually be done using the QWeb templating
    engine.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: Web `http.Controller`派生类。该方法通过`@http.route`控制器绑定到一个或多个URL端点。当访问这些URL端点中的任何一个时，控制器代码将执行并返回要向用户展示的HTML。HTML渲染通常使用QWeb模板引擎完成。
- en: Adding the endpoint controller
  id: totrans-462
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加端点控制器
- en: 'Code for controllers is expected to be inside a `/controllers` subdirectory.
    To add a controller, first edit the  `library_app/__init__.py` file to have it
    also import the `controllers` subdirectory, as follows:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的代码预期应位于 `/controllers` 子目录中。要添加控制器，首先编辑 `library_app/__init__.py` 文件，使其也能导入
    `controllers` 子目录，如下所示：
- en: '[PRE43]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Then, add a `library_app/controllers/__init__.py` file so that this directory
    can be Python-imported, and add an `import` statement to it for the `main.py`
    Python file we will implement the controller with, as follows:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，添加一个 `library_app/controllers/__init__.py` 文件，以便这个目录可以被 Python 导入，并添加一个导入语句到其中，用于我们将实现控制器的
    `main.py` Python 文件，如下所示：
- en: '[PRE44]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, add the actual file for the controller, `library_app/controllers/main.py`,
    with the following code:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，添加控制器的实际文件 `library_app/controllers/main.py`，以下面的代码：
- en: '[PRE45]'
  id: totrans-468
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The first line imports the `odoo.http` module, the core framework component
    providing web-related features. Next, we create a controller object class, derived
    from `http.Controller`.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行导入 `odoo.http` 模块，这是提供网络相关功能的框架核心组件。接下来，我们创建一个控制器对象类，它从 `http.Controller`
    派生。
- en: The particular ID name we choose for the class and for its methods is not relevant.
    The `@http.route` decorator is important since it declares the URL endpoint to
    be bound—`/books` in this case. For now, the web page is using the default access
    control and requires a user login.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为类及其方法选择的特定 ID 名称并不重要。`@http.route` 装饰器很重要，因为它声明了要绑定的 URL 端点——在这种情况下是 `/books`。目前，网页正在使用默认的访问控制并需要用户登录。
- en: Inside the controller method, we can access the run environment using `http.request.env`.
    We use it to get a recordset with all active books in the catalog.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制器方法内部，我们可以使用 `http.request.env` 访问运行环境。我们用它来获取目录中所有活跃书籍的记录集。
- en: The final step is to use `http.request.render()` to process the `library_app.index_template`
    QWeb template and generate the output HTML. We can make values available to the
    template through a dictionary, and this was used to pass the `books` recordset.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一步是使用 `http.request.render()` 处理 `library_app.index_template` QWeb 模板并生成输出
    HTML。我们可以通过字典将值提供给模板，并且这是用来传递 `books` 记录集的。
- en: 'If we now restart the Odoo server to reload the Python code and try accessing
    the `/library/books` URL, we should get an error message in the server log: `ValueError:
    External ID not found in the system: library_app.book_list_template`. This is
    expected since we haven''t defined that template yet. That should be our next
    step.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '如果我们现在重新启动 Odoo 服务器以重新加载 Python 代码并尝试访问 `/library/books` URL，我们应该在服务器日志中看到一个错误消息：`ValueError:
    外部 ID 在系统中未找到：library_app.book_list_template`。这是预期的，因为我们还没有定义该模板。那应该是我们的下一步。'
- en: Adding a QWeb template
  id: totrans-474
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 QWeb 模板
- en: 'QWeb templates are also stored along with the other Odoo views, and the corresponding
    data files are usually stored in the  `/views` subdirectory. Let''s add the `views/book_list_template.xml`
    file, as follows:'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb 模板也与其他 Odoo 视图一起存储，对应的数据文件通常存储在 `/views` 子目录中。让我们添加 `views/book_list_template.xml`
    文件，如下所示：
- en: '[PRE46]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `<template>` element declares a QWeb template. In fact, it is a shortcut
    for an `ir.ui.view` record, the base model where templates are stored. The template
    contains the HTML to use and uses QWeb-specific tags and attributes.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`<template>` 元素声明了一个 QWeb 模板。实际上，它是一个 `ir.ui.view` 记录的快捷方式，这是模板存储的基本模型。该模板包含要使用的
    HTML 并使用 QWeb 特定的标签和属性。'
- en: The `t-foreach` attribute is used to loop through the items in the `books` variable
    that was made available to the template by the controller's `http.request.render()`
    call. The `t-field` attribute takes care of properly rendering the content of
    an Odoo record field.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-foreach` 属性用于遍历由控制器通过 `http.request.render()` 调用提供给模板的 `books` 变量中的项目。`t-field`
    属性负责正确渲染 Odoo 记录字段的内容。'
- en: 'The QWeb template data file needs to be declared in the module manifest, as
    with any other XML data file, so that it gets loaded and can be made available.
    So, the `__manifest__.py` file should be edited to add it, as shown next:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb 模板数据文件需要在模块清单中声明，就像任何其他 XML 数据文件一样，以便它被加载并可供使用。因此，应该编辑 `__manifest__.py`
    文件以添加它，如下所示：
- en: '[PRE47]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'After declaring the XML file in the manifest and performing a module upgrade,
    the web page should be working. Opening the `http://<my-server>:8069/library/books`
    URL with an active Odoo login should show us a simple list of the available books,
    as shown in the next screenshot:'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单中声明XML文件并执行模块升级后，网页应该可以正常工作。使用有效的Odoo登录打开`http://<my-server>:8069/library/books`
    URL应该会显示一个可用的书籍简单列表，如图下截图所示：
- en: '![Figure 3.7 – Web page with a book list'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.7 – 包含书籍列表的网页'
- en: '](img/Figure_3.7_B16119_B16119.jpg)'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_3.7_B16119_B16119.jpg)'
- en: Figure 3.7 – Web page with a book list
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – 包含书籍列表的网页
- en: This is a short overview of the Odoo web page features. These features are discussed
    in more depth in [*Chapter 13*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379),
    *Creating Web and Portal Frontend Features*.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对Odoo网页功能的简要概述。这些功能在[*第13章*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379)，*创建Web和门户前端功能*中进行了更深入的讨论。
- en: Quick reference
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 快速参考
- en: 'Most of the components are discussed in more detail in other chapters, and
    quick references are provided there, as follows:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数组件在其他章节中进行了更详细的讨论，并在那里提供了快速参考，如下所示：
- en: '[*Chapter 2*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *Preparing the
    Development Environment*, for the CLI `install` and `upgrade` modules'
  id: totrans-488
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第2章*](B16119_02_Final_PD_ePub.xhtml#_idTextAnchor049), *准备开发环境*, 用于CLI `install`
    和 `upgrade` 模块'
- en: '[*Chapter 5*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146), *Importing,
    Exporting, and Module Data*, for creating XML and CSV data files'
  id: totrans-489
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第5章*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146), *导入、导出和模块数据*, 用于创建XML和CSV数据文件'
- en: '[*Chapter 6*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164), *Models – Structuring
    the Application Data*, for the model layer, defining models and fields'
  id: totrans-490
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第6章*](B16119_06_Final_PD_ePub.xhtml#_idTextAnchor164), *模型 – 应用数据结构化*, 用于模型层，定义模型和字段'
- en: '[*Chapter 7*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194), *Recordsets
    – Working with Model Data*, for domain filter syntax and recordset manipulation'
  id: totrans-491
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第7章*](B16119_07_Final_PD_ePub.xhtml#_idTextAnchor194), *记录集 – 模型数据操作*, 用于域过滤语法和记录集操作'
- en: '[*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business Logic
    – Supporting Business Processes*, for Python method business logic'
  id: totrans-492
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第8章*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *业务逻辑 – 支持业务流程*, 用于Python方法业务逻辑'
- en: '[*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *Backend Views
    – Designing the User Interface*, for views, including window actions, menu items,
    forms, lists, and searches'
  id: totrans-493
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第10章*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *后端视图 – 设计用户界面*,
    用于视图，包括窗口操作、菜单项、表单、列表和搜索'
- en: '[*Chapter 13*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379), *Creating Web
    and Portal Frontend Features*, for web controllers and QWeb syntax'
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*第13章*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379), *创建Web和门户前端功能*, 用于Web控制器和QWeb语法'
- en: Not explained further elsewhere is access security, and we provide here a quick
    reference for those components.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 其他地方没有进一步解释的是访问安全，我们在此为这些组件提供快速参考。
- en: Access security
  id: totrans-496
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 访问安全
- en: 'Internal system models are listed here:'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 内部系统模型在此列出：
- en: '`res.groups`: `name`, `implied_ids`, `users`'
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.groups`: `name`, `implied_ids`, `users`'
- en: '`res.users`: `name`, `groups_id`'
  id: totrans-499
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res.users`: `name`, `groups_id`'
- en: '`ir.model.access`: `name`, `model_id`, `group_id`, `perm_read`, `perm_write`,
    `perm_create`, `perm_unlink`'
  id: totrans-500
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.model.access`: `name`, `model_id`, `group_id`, `perm_read`, `perm_write`,
    `perm_create`, `perm_unlink`'
- en: '`ir.access.rule`: `name`, `model_id`, `groups`, `domain_force`'
  id: totrans-501
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.access.rule`: `name`, `model_id`, `groups`, `domain_force`'
- en: 'XML IDs for the most relevant security groups are listed here:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 最相关的安全组XML ID在此列出：
- en: '`base.group_user`: **internal user**—any backend user'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.group_user`: **内部用户**—任何后端用户'
- en: '`base.group_system`: **Settings**—the Administrator belongs to this group'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.group_system`: **设置**—管理员属于此组'
- en: '`base.group_no_one`: **technical feature**, usually used to make features not
    visible to users'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.group_no_one`: **技术特性**，通常用于使功能对用户不可见'
- en: '`base.group_public`: **Public**, used to make features accessible to web anonymous
    users'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.group_public`: **公共**，用于使功能对Web匿名用户可访问'
- en: 'XML IDs for the default users provided by Odoo are listed here:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo提供的默认用户XML ID在此列出：
- en: '`base.user_root`: The root system superuser, also known as `OdooBot`.'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.user_root`: 根系统超级用户，也称为`OdooBot`。'
- en: '`base.user_admin`: The default user, by default named `Administrator`.'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.user_admin`: 默认用户，默认命名为`Administrator`。'
- en: '`base.default_user`: The template used for new backend users. It is a template
    and is inactive, but can be duplicated to create new users.'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.default_user`: 用于新后端用户的模板。它是一个模板，且处于非活动状态，但可以被复制以创建新用户。'
- en: '`base.default_public user`: The template used to create new portal users.'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.default_public user`：用于创建新门户用户的模板。'
- en: Summary
  id: totrans-512
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We created a new module from scratch, covering the essential components involved
    in a module—models, access security, menus, the three basic types of views (form,
    list, and search), and business logic in model methods. We also learned how to
    create web pages using web controllers and QWeb templates.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从头开始创建了一个新模块，涵盖了模块中涉及的基本组件——模型、访问安全、菜单、三种基本视图类型（表单、列表和搜索）以及模型方法中的业务逻辑。我们还学习了如何使用Web控制器和QWeb模板创建网页。
- en: In the process, we got familiar with the module-development process, which involves
    module upgrades and application-server restarts to make gradual changes effective
    in Odoo.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个过程中，我们熟悉了模块开发过程，这包括模块升级和应用服务器重启，以便在Odoo中逐步实施变更。
- en: 'Always remember, when adding model fields, an upgrade is needed. When changing
    Python code, including the manifest file, a restart is needed. When changing XML
    or CSV files, an upgrade is needed; also, when in doubt, do both: restart the
    server and upgrade the modules.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 总是记住，当添加模型字段时，需要进行升级。当更改Python代码，包括清单文件时，需要重启。当更改XML或CSV文件时，也需要进行升级；此外，如有疑问，请同时进行：重启服务器并升级模块。
- en: We've gone through the essential elements and steps to create a new Odoo app.
    But in most cases, our modules will be extending existing apps to add features.
    This is what we will learn about in the next chapter.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了创建新Odoo应用的基本要素和步骤。但在大多数情况下，我们的模块将扩展现有应用以添加功能。这就是我们在下一章将要学习的内容。
- en: Further reading
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: All of the Odoo-specific topics presented here will be covered in more depth
    in the remaining chapters of this book.
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 这里所展示的所有Odoo特定主题将在本书剩余章节中做更深入的探讨。
- en: 'The official documentation offers some relevant resources that make good complementary
    reading, as listed here:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 官方文档提供了一些相关的资源，这些资源可以作为良好的补充阅读材料，如下所示：
- en: 'The *Building a Module* tutorial: [https://www.odoo.com/documentation/15.0/howtos/backend.html](https://www.odoo.com/documentation/15.0/howtos/backend.html)'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*构建模块*教程：[https://www.odoo.com/documentation/15.0/howtos/backend.html](https://www.odoo.com/documentation/15.0/howtos/backend.html)'
- en: 'The *Odoo Guidelines* provide a list of code conventions and guidelines for
    module development: [https://www.odoo.com/documentation/15.0/reference/guidelines.html](https://www.odoo.com/documentation/15.0/reference/guidelines.html)'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Odoo指南*提供了一组代码约定和模块开发的指导原则：[https://www.odoo.com/documentation/15.0/reference/guidelines.html](https://www.odoo.com/documentation/15.0/reference/guidelines.html)'
- en: 'The *Odoo Community Association Guidelines* provide a good resource for Odoo
    development best practices: [https://odoo-community.org/page/contributing](https://odoo-community.org/page/contributing)'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Odoo社区协会指南*提供了Odoo开发最佳实践的宝贵资源：[https://odoo-community.org/page/contributing](https://odoo-community.org/page/contributing)'
- en: 'Learning Python is important for Odoo development. There are some good Python
    books from the *Packt* catalog, such as *Learn Python Programming – Second Edition*:
    [https://www.packtpub.com/application-development/learn-python-programming-second-edition](https://www.packtpub.com/application-development/learn-python-programming-second-edition).'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Python对于Odoo开发很重要。*Packt*目录中有一些好的Python书籍，例如*Learn Python Programming – Second
    Edition*：[https://www.packtpub.com/application-development/learn-python-programming-second-edition](https://www.packtpub.com/application-development/learn-python-programming-second-edition)。
