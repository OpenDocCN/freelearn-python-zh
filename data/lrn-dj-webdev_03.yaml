- en: Chapter 3. Code Style in Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。Django中的代码风格
- en: As you are coming from the Python background, you must already have written
    lots of code, and, of course have enjoyed it too.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您来自Python背景，您可能已经编写了大量的代码，并且当然也享受过。
- en: Python code is easy to maintain and works on both small projects or in solving
    any competitive programming contest; you can do either by storing Python code
    locally or by storing it in a public folder for easier sharing. But, if you are
    working on a collaborative project, especially web development, then it makes
    everything different from other traditional coding. This not only needs discipline,
    like following the project's code syntax, but you may also end up writing extensive
    documentation for your code. While working with any version control tools, such
    as GIT, your commit messages (which play an important role in making it easier
    for other developers to understand what you have been working on or have completed)
    also broadcast the current progress of project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Python代码易于维护，并且适用于小型项目或解决任何竞争性编程比赛；您可以通过将Python代码存储在本地或存储在公共文件夹中来实现。但是，如果您正在进行协作项目，特别是Web开发，那么这将使一切与传统编码不同。这不仅需要纪律，比如遵循项目的代码语法，还可能需要为您的代码编写大量的文档。在使用任何版本控制工具，比如GIT时，您的提交消息（在让其他开发人员更容易理解您正在做什么或已经完成的工作方面起着重要作用）也会广播项目的当前进展。
- en: This chapter will cover all the basic topics which you would require to follow,
    such as coding practices for better Django web development, which IDE to use,
    version control, and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖您需要遵循的所有基本主题，比如更好的Django Web开发的编码实践，使用哪个IDE，版本控制等等。
- en: 'We will learn the following topics in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章学习以下主题：
- en: Django coding style
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django编码风格
- en: Using IDE for Django web development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用IDE进行Django Web开发
- en: Django project structure
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django项目结构
- en: Best practices—using version control
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最佳实践——使用版本控制
- en: Django rescue team (where to ask Django questions)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django救援团队（在哪里提问Django问题）
- en: Faster web development—using Twitter-Bootstrap
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更快的Web开发——使用Twitter-Bootstrap
- en: Note
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This chapter is based on the important fact that code is read much more often
    than it is written. Thus, before you actually start building your projects, we
    suggest that you familiarize yourself with all the standard practices adopted
    by the Django community for web development.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章基于一个重要事实，即代码被阅读的次数远远多于被编写的次数。因此，在您真正开始构建项目之前，我们建议您熟悉Django社区为Web开发采用的所有标准实践。
- en: Django coding style
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django编码风格
- en: Most of Django's important practices are based on Python. Though chances are
    you already know them, we will still take a break and write all the documented
    practices so that you know these concepts even before you begin. Of course, you
    can come back to this chapter for a quick look when you are building your projects.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Django的大部分重要实践都是基于Python的。虽然您可能已经知道它们，但我们仍然会停下来写出所有记录的实践，以便您在开始之前就了解这些概念。当然，在构建项目时，您可以回到本章快速查看。
- en: To mainstream standard practices, Python enhancement proposals are made, and
    one such widely adopted standard practice for development is PEP8, the style guide
    for Python code–the best way to style the Python code authored by Guido van Rossum.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使标准实践成为主流，Python增强提案被提出，其中一个被广泛采用的开发标准实践是PEP8，Python代码的风格指南——Guido van Rossum编写的Python代码的最佳风格。
- en: The documentation says, "PEP8 deals with semantics and conventions associated
    with Python docstrings." For further reading, please visit [http://legacy.python.org/dev/peps/pep-0008/](http://legacy.python.org/dev/peps/pep-0008/).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 文档中说道，“PEP8处理与Python文档字符串相关的语义和约定。”更多阅读，请访问[http://legacy.python.org/dev/peps/pep-0008/](http://legacy.python.org/dev/peps/pep-0008/)。
- en: Understanding indentation in Python
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解Python中的缩进
- en: When you are writing Python code, indentation plays a very important role. It
    acts as a block like in other languages, such as **C** or **Perl**. But it's always
    a matter of discussion amongst programmers whether we should use tabs or spaces,
    and, if space, how many–two or four or eight. Using four spaces for indentation
    is better than eight, and if there are a few more nested blocks, using eight spaces
    for each indentation may take up more characters than can be shown in single line.
    But, again, this is the programmer's choice.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写Python代码时，缩进起着非常重要的作用。它就像其他语言中的块，比如C或Perl。但是程序员们总是在讨论是否应该使用制表符还是空格，以及如果使用空格，应该使用多少——两个、四个还是八个。使用四个空格进行缩进比使用八个更好，如果有更多的嵌套块，使用八个空格进行每次缩进可能会占用更多字符，无法在单行中显示。但是，这又是程序员的选择。
- en: 'The following is what incorrect indentation practices lead to:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是错误的缩进实践导致的结果：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'So, which one we should use: tabs or spaces?'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们应该使用哪个：制表符还是空格？
- en: Choose any *one* of them, but never mix up tabs and spaces in the same project
    or else it will be a nightmare for maintenance. The most popular way of indention
    in Python is with spaces; tabs come in second. If any code you have encountered
    has a mixture of tabs and spaces, you should convert it to using spaces exclusively.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 选择其中一个，但在同一个项目中不要混合使用制表符和空格，否则维护起来会是一场噩梦。Python中最流行的缩进方式是使用空格；制表符排在第二位。如果你遇到了混合使用制表符和空格的代码，你应该将其转换为只使用空格。
- en: Doing indentation right – do we need four spaces per indentation level?
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 正确的缩进——我们是否需要每次缩进级别四个空格？
- en: 'There has been a lot of confusion about it, as of course, Python''s syntax
    is all about indentation. Let''s be honest: in most cases, it is. So, what is
    highly recommended is to use four spaces per indentation level, and if you have
    been following the two-space method, stop using it. There is nothing wrong with
    it, but when you deal with multiple third party libraries, you might end up having
    a spaghetti of different versions, which will ultimately become hard to debug.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个问题已经有很多混淆，当然，Python的语法都是关于缩进的。坦率地说：在大多数情况下，确实是这样。因此，强烈建议每个缩进级别使用四个空格，如果你一直使用两个空格的方法，就停止使用它。这没有错，但是当你处理多个第三方库时，你可能最终会得到一个不同版本的代码混乱，最终会变得难以调试。
- en: Now for indentation. When your code is in a continuation line, you should wrap
    it vertically aligned, or you can go in for a hanging indent. When you are using
    a hanging indent, the first line should not contain any argument and further indentation
    should be used to clearly distinguish it as a continuation line.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是缩进的问题。当你的代码在一个连续的行中时，你应该垂直对齐，或者你可以选择悬挂缩进。当你使用悬挂缩进时，第一行不应包含任何参数，进一步的缩进应该用来清楚地区分它作为一个连续的行。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: A hanging indent (also known as a negative indent) is a style of indentation
    in which all lines are indented except for the first line of the paragraph. The
    preceding paragraph is the example of hanging indent.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 悬挂缩进（也称为负缩进）是一种缩进风格，其中所有行都缩进，除了段落的第一行。前面的段落就是悬挂缩进的例子。
- en: 'The following example illustrates how you should use a proper indentation method
    while writing the code:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例说明了在编写代码时应该如何使用适当的缩进方法：
- en: '[PRE1]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We do not encourage the following coding style, and it will not work in Python
    anyway:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不鼓励以下编码风格，而且在Python中也不起作用：
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Although extra indentation is not required, if you want to use extra indentation
    to ensure that the code will work, you can use the following coding style:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不需要额外的缩进，但如果你想使用额外的缩进来确保代码能够工作，你可以使用以下编码风格：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Tip
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Ideally, you should limit each line to a maximum of 79 characters. It allows
    for a `+` or `–` character used for viewing difference using version control.
    It is even better to limit lines to 79 characters for uniformity across editors.
    You can use the rest of the space for other purposes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，你应该将每行限制在最多79个字符。这允许使用`+`或`–`字符来查看使用版本控制的差异。为了编辑器的统一性，最好将行限制在79个字符。你可以利用剩余的空间做其他用途。
- en: The importance of blank lines
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 空行的重要性
- en: 'The importance of two blank lines and single blank lines are as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 两个空行和单个空行的重要性如下：
- en: '**Two blank lines**: A double blank lines can be used to separate top-level
    functions and the class definition, which enhances code readability.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**两个空行**：双空行可以用于分隔顶层函数和类定义，从而增强代码的可读性。'
- en: '**Single blank lines**: A single blank line can be used in the use cases–for
    example, each function inside a class can be separated by a single line, and related
    functions can be grouped together with a single line. You can also separate the
    logical section of source code with a single line.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单个空行**：单个空行可以用于以下用例--例如，类中的每个函数可以用单个空行分隔，相关函数可以用单个空行分组。你也可以用单个空行分隔源代码的逻辑部分。'
- en: Importing a package
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入一个包
- en: Importing a package is a direct implication of code reusability. Therefore,
    always place imports at the top of your source file, just after any module comments
    and document strings, and before the module's global and constants as variables.
    Each import should usually be on separate lines.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 导入一个包是代码可重用的直接影响。因此，总是将导入放在源文件的顶部，紧跟在任何模块注释和文档字符串之后，在模块的全局和常量变量之前。每个导入通常应该在单独的行上。
- en: 'The best way to import packages is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 导入包的最佳方式如下：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'It is not advisable to import more than one package in the same line, for example:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 不建议在同一行中导入多个包，例如：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You may import packages in the following fashion, although it is optional:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以按照以下方式导入包，尽管这是可选的：
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If your import gets longer, you can use the following method to declare them:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的导入变得更长，你可以使用以下方法来声明它们：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Grouping imported packages
  id: totrans-50
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分组导入的包
- en: 'Package imports can be grouped in the following ways:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 包的导入可以按以下方式分组：
- en: '**Standard library imports**: Such as `sys`, os, `subprocess`, and so on.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标准库导入**：比如`sys`，os，`subprocess`等。'
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**Related third party imports**: These are usually downloaded from the Python
    cheese shop, that is, **PyPy** (using pip install). Here is an example:'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**相关的第三方导入**：这些通常是从Python奶酪商店下载的，也就是**PyPy**（使用pip install）。这里有一个例子：'
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Local application / library-specific imports**: This included the local modules
    of your projects, such as models, views, and so on.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**本地应用/特定库的导入**：这包括你项目的本地模块，比如模型，视图等。'
- en: '[PRE10]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Naming conventions in Python/Django
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python/Django的命名约定
- en: Every programming language and framework has its own naming convention. The
    naming convention in Python/Django is more or less the same, but it is worth mentioning
    it here. You will need to follow this while creating a variable name or global
    variable name and when naming a class, package, modules, and so on.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言和框架都有自己的命名约定。Python/Django中的命名约定大体上是一样的，但是值得在这里提一下。在创建变量名或全局变量名以及命名类、包、模块等时，你需要遵循这个约定。
- en: 'This is the common naming convention that we should follow:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们应该遵循的常见命名约定：
- en: '**Name the variables properl**y: Never use single characters, for example,
    ''x'' or ''X'' as variable names. It might be okay for your normal Python scripts,
    but when you are building a web application, you must name the variable properly
    as it determines the readability of the whole project.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**正确命名变量**：永远不要使用单个字符，例如，''x''或''X''作为变量名。这在你平常的Python脚本中可能没问题，但是当你构建一个web应用程序时，你必须适当地命名变量，因为它决定了整个项目的可读性。'
- en: '**Naming of packages and modules**: Lowercase and short names are recommended
    for modules. Underscores can be used if their use would improve readability. Python
    packages should also have short, all-lowercase names, although the use of underscores
    is discouraged.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包和模块的命名**：建议模块使用小写和短名称。如果使用下划线可以提高可读性，则可以使用下划线。Python包也应具有短小写名称，尽管不鼓励使用下划线。'
- en: Since module names are mapped to file names (`models.py`, `urls.py`, and so
    on), it is important that module names be chosen to be fairly short as some file
    systems are case insensitive and truncate long names.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于模块名称映射到文件名（`models.py`，`urls.py`等），因此选择模块名称要相当简短是很重要的，因为一些文件系统不区分大小写并且会截断长名称。
- en: '**Naming a class**: Class names should follow the **CamelCase** naming convention,
    and classes for internal use can have a leading underscore in their name.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名类**：类名应遵循**CamelCase**命名约定，内部使用的类可以在其名称中加上下划线。'
- en: '**Global variable names**: First of all, you should avoid using global variables,
    but if you need to use them, prevention of global variables from getting exported
    can be done via `__all__`, or by defining them with a prefixed underscore (the
    old, conventional way).'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局变量名称**：首先，应避免使用全局变量，但如果需要使用它们，可以通过`__all__`来防止全局变量被导出，或者通过在名称中定义带有前缀下划线的方式（旧的传统方式）。'
- en: '**Function names and method argument**: Names of functions should be in lowercase
    and separated by an underscore and `self` as the first argument to instantiate
    methods. For classes or methods, use CLS or the objects for initialization.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数名称和方法参数**：函数名称应为小写，并用下划线分隔，`self`作为实例化方法的第一个参数。对于类或方法，使用CLS或对象进行初始化。'
- en: '**Method names and instance variables**: Use the function naming rules—lowercase
    with words separated by underscores as necessary to improve readability. Use one
    leading underscore only for non-public methods and instance variables.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**方法名称和实例变量**：使用函数命名规则，必要时使用下划线分隔单词以提高可读性。仅对非公共方法和实例变量使用一个前导下划线。'
- en: Using IDE for faster development
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用IDE进行更快的开发
- en: 'There are many options on the market when it comes to source code editors.
    Some people prefer full-fledged IDEs, whereas others like simple text editors.
    The choice is totally yours; pick up whatever feels more comfortable. If you already
    use a certain program to work with Python source files, I suggest that you stick
    to it as it will work just fine with Django. Otherwise, I can make a couple of
    recommendations, such as these:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在源代码编辑器方面市场上有很多选择。有些人喜欢全功能的集成开发环境（IDE），而其他人喜欢简单的文本编辑器。选择完全取决于您；选择您感觉更舒适的。如果您已经使用某个程序来处理Python源文件，我建议您继续使用，因为它将与Django一起很好地工作。否则，我可以提出一些建议，比如这些：
- en: '**SublimeText**: This editor is lightweight and very powerful. It is available
    for all major platforms, supports syntax highlighting and code completion, and
    works well with Python. The editor is open source and you can find it at [http://www.sublimetext.com/](http://www.sublimetext.com/)'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SublimeText**：这个编辑器非常轻巧而功能强大。它适用于所有主要平台，支持语法高亮和代码补全，并且与Python兼容。该编辑器是开源的，您可以在[http://www.sublimetext.com/](http://www.sublimetext.com/)找到它'
- en: '**PyCharm**: This, I would say, is most intelligent code editor of all and
    has advanced features, such as code refactoring and code analysis, which makes
    development cleaner. Features for Django include template debugging (which is
    a winner) and also quick documentation, so this look-up is a must for beginners.
    The community edition is free and you can sample a 30-day trial version before
    buying the professional edition.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PyCharm**：我要说，这是最智能的代码编辑器，具有高级功能，如代码重构和代码分析，使开发更清洁。Django的功能包括模板调试（这是一个赢家），还有快速文档，因此这种查找对于初学者来说是必不可少的。社区版是免费的，您可以在购买专业版之前试用30天。'
- en: Setting up your project with the Sublime text editor
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Sublime文本编辑器设置您的项目
- en: Most of the examples that we will show you in this book will be written using
    **Sublime text editor**. In this section, we will show how to install and set
    up the Django project.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中大多数示例将使用**Sublime文本编辑器**编写。在本节中，我们将展示如何安装和设置Django项目。
- en: '**Download and installation**: You can download Sublime from the download tab
    of the site [www.sublimetext.com](http://www.sublimetext.com). Click on the downloaded
    file option to install.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载和安装**：您可以从网站[www.sublimetext.com](http://www.sublimetext.com)的下载选项卡下载Sublime。单击下载文件选项进行安装。'
- en: '**Setting up for Django**: Sublime has a very extensive plug-in ecosystem,
    which means that once you have downloaded the editor, you can install plug-ins
    for adding more features to it.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为Django设置**：Sublime拥有非常庞大的插件生态系统，这意味着一旦您下载了编辑器，就可以安装插件以添加更多功能。'
- en: 'After successful installation, it will look like this:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安装成功后，它将如下所示：
- en: '![Setting up your project with the Sublime text editor](img/image00275.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sublime文本编辑器设置项目](img/image00275.jpeg)'
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Most important of all is **Package Control**, which is the manager for installing
    additional plugins directly from within Sublime. This will be your only manual
    installation of the package. It will take care of the rest of the package installation
    ahead.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 最重要的是**Package Control**，它是在Sublime内直接安装附加插件的管理器。这将是您唯一手动安装的软件包。它将处理其余的软件包安装。
- en: '![Setting up your project with the Sublime text editor](img/image00276.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![使用Sublime文本编辑器设置项目](img/image00276.jpeg)'
- en: 'Some of the recommendations for Python development using Sublime are as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Sublime进行Python开发的一些建议如下：
- en: '**Sublime Linter**: This gives instant feedback about the Python code as you
    write it. It also has PEP8 support; this plugin will highlight in real time the
    things we discussed about better coding in the previous section so that you can
    fix them.![Setting up your project with the Sublime text editor](img/image00277.jpeg)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Linter**：在您编写Python代码时，它会立即提供有关代码的反馈。它还支持PEP8；此插件将实时突出显示我们在前一节中讨论的有关更好编码的内容，以便您可以修复它们。![使用Sublime文本编辑器设置项目](img/image00277.jpeg)'
- en: '**Sublime CodeIntel**: This is maintained by the developer of **SublimeLint**.
    Sublime CodeIntel have some of advanced functionalities, such as directly go-to
    definition, intelligent code completion, and import suggestions.![Setting up your
    project with the Sublime text editor](img/image00278.jpeg)'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime CodeIntel**：这是由**SublimeLint**的开发人员维护的。Sublime CodeIntel具有一些高级功能，例如直接跳转到定义，智能代码完成和导入建议。![使用Sublime文本编辑器设置项目](img/image00278.jpeg)'
- en: You can also explore other plugins for Sublime to increase your productivity.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以探索其他Sublime插件，以提高您的生产力。
- en: Setting up the PyCharm IDE
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置PyCharm IDE
- en: You can use any of your favorite IDEs for Django project development. We will
    use pycharm IDE for this book. This IDE is recommended as it will help you at
    the time of debugging, using breakpoints that will save you a lot of time figuring
    out what actually went wrong.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用任何您喜欢的IDE进行Django项目开发。我们将在本书中使用pycharm IDE。建议使用此IDE，因为它将在调试时帮助您使用断点，这将节省您大量时间弄清楚实际出了什么问题。
- en: 'Here is how to install and set up **pycharm** IDE for Django:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是如何安装和设置**pycharm** IDE用于Django：
- en: '**Download and installation**: You can check the features and download the
    pycharm IDE from the following link:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**下载和安装**：您可以从以下链接检查功能并下载pycharm IDE：'
- en: '[http://www.jetbrains.com/pycharm/](http://www.jetbrains.com/pycharm/)'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://www.jetbrains.com/pycharm/](http://www.jetbrains.com/pycharm/)'
- en: '![Setting up the PyCharm IDE](img/image00279.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![设置PyCharm IDE](img/image00279.jpeg)'
- en: '**Setting up for Django**: Setting up pycharm for Django is very easy. You
    just have to import the project folder and give the `manage.py` path, as shown
    in the following figure:![Setting up the PyCharm IDE](img/image00280.jpeg)'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**为Django设置**：为Django设置pycharm非常容易。您只需导入项目文件夹并提供`manage.py`路径，如下图所示：![设置PyCharm
    IDE](img/image00280.jpeg)'
- en: The Django project structure
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django项目结构
- en: The Django project structure has been changed in the 1.6 release version. Django
    (`django-admin.py`) also has a `startapp` command to create an application, so
    it is high time to tell you the difference between an application and a project
    in Django.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目结构在1.6版本中已更改。Django（`django-admin.py`）还有一个`startapp`命令来创建一个应用程序，因此现在是时候告诉您Django中应用程序和项目之间的区别了。
- en: A **project** is a complete website or application, whereas an **application**
    is a small, self-contained Django application. An application is based on the
    principle that it should do one thing and do it right.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '**项目**是一个完整的网站或应用程序，而**应用程序**是一个小型的、独立的Django应用程序。应用程序基于这样一个原则，即它应该做一件事，并且做得正确。'
- en: To ease out the pain of building a Django project right from scratch, Django
    gives you an advantage by auto-generating the basic project structure files from
    which any project can be taken forward for its development and feature addition.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化从头开始构建Django项目的痛苦，Django通过自动生成基本项目结构文件来为您提供优势，从而可以将任何项目推进到其开发和功能添加阶段。
- en: Thus, to conclude, we can say that a project is a collection of applications,
    and an application can be written as a separate entity and can be easily exported
    to other applications for reusability.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，总之，我们可以说项目是应用程序的集合，应用程序可以作为一个独立实体编写，并且可以轻松地导出到其他应用程序以供重用。
- en: 'To create your first Django project, open a terminal (or Command Prompt for
    Windows users), type the following command, and hit *Enter*:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您的第一个Django项目，请打开终端（或Windows用户的命令提示符），输入以下命令，然后按*Enter*：
- en: '[PRE11]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This command will make a folder named `django_mytweets` in the current directory
    and create the initial directory structure inside it. Let's see what kind of files
    are created.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在当前目录中创建一个名为`django_mytweets`的文件夹，并在其中创建初始目录结构。让我们看看创建了哪些类型的文件。
- en: 'The new structure is as follows:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 新结构如下：
- en: '[PRE12]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This is the content of `django_mytweets/`:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`django_mytweets/`的内容：
- en: '[PRE13]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Here is a quick explanation of what these files are:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这些文件的快速解释：
- en: '`django_mytweets` (the outer folder): This folder is the project folder. Contrary
    to the earlier project structure in which the whole project was kept in a single
    folder, the new Django project structure somehow hints that every project is an
    application inside Django.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django_mytweets`（外部文件夹）：此文件夹是项目文件夹。与以前的项目结构相反，在以前的项目结构中，整个项目都保存在一个文件夹中，新的Django项目结构在某种程度上暗示着每个项目都是Django中的一个应用程序。'
- en: This means that you can import other third party applications on the same level
    as the Django project. This folder also contains the `manage.py` file, which include
    all the project management settings.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着您可以在与Django项目相同的级别上导入其他第三方应用程序。此文件夹还包含`manage.py`文件，其中包括所有项目管理设置。
- en: '`manage.py`: This is utility script is used to manage our project. You can
    think of it as your project''s version of `django-admin.py`. Actually, both `django-admin.py`
    and `manage.py` share the same backend code.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`manage.py`：这是用于管理我们的项目的实用程序脚本。您可以将其视为项目版本的`django-admin.py`。实际上，`django-admin.py`和`manage.py`共享相同的后端代码。'
- en: Note
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Further clarification about the settings will be provided when are going to
    tweak the changes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们要调整更改时，将提供有关设置的进一步澄清。
- en: 'Let''s have a look at the `manage.py` file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看`manage.py`文件：
- en: '[PRE14]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The source code of the `manage.py` file will be self-explanatory once you read
    the following code explanation.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦阅读以下代码解释，`manage.py`文件的源代码将不言自明。
- en: '[PRE15]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The first line is just the declaration that the following file is a Python file,
    followed by the import section in which `os` and `sys` modules are imported. These
    modules mainly contain system-related operations.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行只是声明接下来的文件是一个Python文件，然后是导入部分，其中导入了`os`和`sys`模块。这些模块主要包含与系统相关的操作。
- en: '[PRE16]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The next piece of code checks whether the file is executed by the main function,
    which is the first function to be executed, and then loads the Django setting
    module to the current path. As you are already running a virtual environment,
    this will set the path for all the modules to the path of the current running
    virtual environment.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 下一段代码检查文件是否由主函数执行，这是要执行的第一个函数，然后将Django设置模块加载到当前路径。由于您已经在运行虚拟环境，这将为所有模块设置路径为当前运行虚拟环境的路径。
- en: '[PRE17]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Django projects are Python packages, and this file is required to tell Python
    that this folder is to be treated as a package. A package in Python's terminology
    is a collection of modules, and they are used to group similar files together
    and prevent naming conflicts.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目是Python包，这个文件是必需的，用于告诉Python这个文件夹应该被视为一个包。在Python的术语中，包是模块的集合，它们用于将类似的文件分组在一起，并防止命名冲突。
- en: '`settings.py`: This is the main configuration file for your Django project.
    In it, you can specify a variety of options, including database settings, site
    language(s), what Django features need to be enabled, and so on. Various sections
    of this file will be explained as we progress with building our application during
    the following chapters.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`settings.py`：这是Django项目的主要配置文件。在其中，您可以指定各种选项，包括数据库设置、站点语言、需要启用的Django功能等。在接下来的章节中，随着我们构建应用程序的进展，将解释该文件的各个部分。'
- en: By default, the database is configured to use SQLite Database, which is advisable
    to use for testing purposes. Here, we will only see how to enter the database
    in the settings file; it also contains the basic setting configuration, and with
    slight modification in the `manage.py` file, it can be moved to another folder,
    such as `config` or `conf`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，数据库配置为使用SQLite数据库，这是用于测试目的的建议使用。在这里，我们将只看到如何在设置文件中输入数据库；它还包含基本的设置配置，并且在`manage.py`文件中稍作修改，它可以被移动到另一个文件夹，比如`config`或`conf`。
- en: 'To make every other third-party application a part of the project, we need
    to register it in the `settings.py` file. `INSTALLED_APPS` is a variable that
    contains all the entries about the installed application. As the project grows,
    it becomes difficult to manage; therefore, there are three logical partitions
    for the `INSTALLED_APPS` variable, as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 要使每个其他第三方应用程序成为项目的一部分，我们需要在`settings.py`文件中注册它。`INSTALLED_APPS`是一个包含所有已安装应用程序条目的变量。随着项目的增长，管理起来变得困难；因此，`INSTALLED_APPS`变量有三个逻辑分区，如下所示：
- en: '`DEFAULT_APPS`: This parameter contains the default Django installed applications
    (such as the admin)'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEFAULT_APPS`：此参数包含默认的Django已安装应用程序（如管理员）'
- en: '`THIRD_PARTY_APPS`: This parameter contains other application like **SocialAuth**
    used for social authentication'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`THIRD_PARTY_APPS`：此参数包含其他应用程序，比如**SocialAuth**，用于社交认证'
- en: '`LOCAL_APPS`: This parameter contains the applications that are created by
    you'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOCAL_APPS`：此参数包含您创建的应用程序'
- en: '`url.py`: This is another configuration file. You can think of it as a mapping
    between URLs and the Django view functions that handle them. This file is one
    of Django''s more powerful features, and we will see how to utilize it in the
    next chapter.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url.py`：这是另一个配置文件。您可以将其视为URL和Django视图函数之间的映射。这个文件是Django更强大的功能之一，我们将在下一章中看到如何利用它。'
- en: When we start writing code for our application, we will create new files inside
    the project's folder. So, the folder also serves as a container for our code.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始为我们的应用程序编写代码时，我们将在项目文件夹内创建新文件。因此，该文件夹也作为我们代码的容器。
- en: Now that you have a general idea of the structure of a Django project, let's
    configure our database system.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您对Django项目的结构有了一个大致的了解，让我们配置我们的数据库系统。
- en: Best practices – using version control
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最佳实践 - 使用版本控制
- en: Version control is a system that remembers all the changes you make to your
    projects as you keep progressing. At any point of time, you can see the changes
    made to a particular file; over a period of time, you can revert it or edit it
    further.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是一个系统，它会记住您在项目中所做的所有更改，随着您的不断进展。在任何时间点，您都可以查看对特定文件所做的更改；随着时间的推移，您可以还原它或进一步编辑它。
- en: It makes much more sense for a project that has multiple contributors, mainly
    for those working on the same file concurrently. Version control is a lifesaver
    because it keeps records of both the versions of files and allows options such
    as saving both by merging or discarding any one copy.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有多个贡献者的项目，特别是那些同时在同一文件上工作的项目，版本控制更有意义。版本控制是一个救命稻草，因为它记录了文件的各个版本，并允许选项，比如通过合并或丢弃任一副本来保存两个版本。
- en: We will be using distributed version control, that is, each developer has a
    complete copy of the project (contrary to subversion, where repositories are hosted
    on a system server).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用分布式版本控制，也就是说，每个开发人员都有项目的完整副本（与子版本控制相反，其中存储库托管在系统服务器上）。
- en: Git – the latest and most popular version control tool
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git - 最新和最流行的版本控制工具
- en: '**Git** is a version control tool we will be using for our projects. It is
    the best available tool out there for version control and is open source too.
    Git works well with other types of files, apart from source code files, life images,
    PDFs, and so on. You can download Git from the following URL:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git**是我们将用于项目的版本控制工具。它是目前最好的版本控制工具，也是开源的。Git除了源代码文件外，还可以很好地处理其他类型的文件，比如图像、PDF等。您可以从以下网址下载Git：'
- en: '[http://git-scm.com/downloads](http://git-scm.com/downloads)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://git-scm.com/downloads](http://git-scm.com/downloads)'
- en: Most of the modern IDEs already have built-in version control system support;
    like PyCharm, Sublime has a plugin that can integrate Git in the working directory.
    Git can be initialized form the terminal using the `git` command, and you can
    check out further options provided by it using the `git --help` command.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数现代集成开发环境已经内置了版本控制系统支持；像PyCharm、Sublime这样的IDE已经有了可以将Git集成到工作目录中的插件。Git可以使用`git`命令从终端初始化，并且您可以使用`git
    --help`命令查看它提供的更多选项。
- en: How Git works
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git的工作原理
- en: We, as developers, have a local copy of the project synchronized with a remote
    server (often called repository) and can send it to a remote repository. When
    the other developer wants to push changes to the remote repository, they have
    to pull your changes first. This minimizes chances of any conflict on the central
    repository where every developer is in sync. This whole work flow is shown in
    the next section.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发人员，我们有一个与远程服务器（通常称为存储库）同步的本地项目副本，并且可以将其发送到远程存储库。当其他开发人员想要将更改推送到远程存储库时，他们必须首先拉取您的更改。这最大程度地减少了中央存储库上的冲突机会，其中每个开发人员都是同步的。整个工作流程在下一节中显示。
- en: Setting up your Git
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置您的Git
- en: 'Any project can be added to Git for version control to creating a folder into
    a Git repository. To do this, use the following commands:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 任何项目都可以添加到Git进行版本控制，将文件夹创建为Git存储库。要做到这一点，使用以下命令：
- en: '`$git init`: If you want to copy an existing Git repository, which might be
    the case if your friend has already hosted it somewhere on **GitHub** or **Bitbucket**,
    use the following command:'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git init`：如果要复制现有的Git存储库，这可能是您的朋友已经在**GitHub**或**Bitbucket**上托管了它的情况，请使用以下命令：'
- en: '`$git clone URL`: The URL of the remote repository, like [https://github.com/AlienCoders/web-development.git](https://github.com/AlienCoders/web-development.git).'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git clone URL`：远程存储库的URL，如[https://github.com/AlienCoders/web-development.git](https://github.com/AlienCoders/web-development.git)。'
- en: '**Staging area**: The staging area is the place where all your files have to
    be listed first before you commit them. In short, staging is needed as an intermediate
    step, rather than a direct commit, because, when conflicts occur, they are flagged
    in the staging area. Only after the conflicts are resolved can the files be committed.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**暂存区**：暂存区是您在提交文件之前必须首先列出所有文件的地方。简而言之，暂存是需要作为中间步骤而不是直接提交的，因为当发生冲突时，它们会在暂存区中标记。只有在冲突解决后才能提交文件。'
- en: 'Let''s take a look at the following commands and their uses:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下命令及其用途：
- en: '`$git add <file-name>` or `$git add`: For adding all files to the staging area
    in bulk.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git add <file-name>`或`$git add`：用于批量将所有文件添加到暂存区。'
- en: '`$git status`: To know the status of your working directory, which files have
    been added, and which files have not been added.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git status`：了解您的工作目录的状态，已添加哪些文件，哪些文件尚未添加。'
- en: '`$git diff`: To get the status of what is modified and staged, or what is modified
    and has not been staged.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git diff`：获取已修改和已暂存的状态，或者获取已修改但尚未暂存的状态。'
- en: '`$ git commit -m`: To commit the changes made, first you have to add them to
    the staging area; then, you have to commit them using this command.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ git commit -m`：要提交所做的更改，首先必须将它们添加到暂存区；然后，您必须使用此命令提交它们。'
- en: '`$ git rm <file-name>`: If you have mistakenly added any file to the staging
    area, you can remove it from the staging area by using this command.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$ git rm <file-name>`：如果您错误地将任何文件添加到暂存区，可以使用此命令从暂存区中删除它。'
- en: '`$git stash`: Git doesn''t track the renamed files. In other words, if you
    have renamed already staged files, you will have to add them again to the staging
    and then commit. You can save the changes by not actually committing to the repository
    by using the following command.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git stash`: Git不跟踪重命名的文件。换句话说，如果您已经重命名了已经暂存的文件，您将不得不再次将它们添加到暂存区，然后提交。您可以通过使用以下命令将更改保存到存储库而不实际提交。'
- en: '`$git stash apply`: It takes all the current changes and saves it to the stack.
    Then, you can continue working with your changes. Once you are in a position to
    get your saved changes, you can do so using this command.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git stash apply`：它将所有当前更改保存到堆栈中。然后，您可以继续使用您的更改。一旦您有能力获取您保存的更改，您可以使用此命令。'
- en: Branching in Git
  id: totrans-151
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git中的分支
- en: Another concept of version control is **branching** (Git). A branch is like
    a path for your commits, and by default, all commits are made on the master branch.
    A branch is mainly used to track the feature in a project. Every feature can be
    made as branch to be worked on; once the feature is complete, it can be merged
    back to the master.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制的另一个概念是**分支**（Git）。分支就像您的提交路径，默认情况下，所有提交都在主分支上进行。分支主要用于跟踪项目中的功能。每个功能都可以作为分支进行工作；一旦功能完成，就可以将其合并回主分支。
- en: 'The basic work flow of branch is this: you initially have a master branch and
    make a new branch for each new feature. Changes are committed into the new branch,
    and once done with the feature, you can merge it back to the master branch. This
    can be visually represented as follows:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 分支的基本工作流程是这样的：您最初有一个主分支，并为每个新功能创建一个新分支。更改将提交到新分支，一旦完成功能，您可以将其合并回主分支。这可以用以下方式直观表示：
- en: '`$git branch`: To list an existing branch using Git, we need to use this command.![Branching
    in Git](img/image00281.jpeg)'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git branch`：要列出使用Git的现有分支，我们需要使用此命令。![Git中的分支](img/image00281.jpeg)'
- en: '`git checkout -b <new-branch-name>`: A new branch can be created in the existing
    repository using this command. We can see logically how it looks with the help
    of the following block diagram:![Branching in Git](img/image00282.jpeg)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git checkout -b <new-branch-name>`：使用此命令可以在现有存储库中创建一个新分支。我们可以通过以下块图逻辑地看到它的外观：![Git中的分支](img/image00282.jpeg)'
- en: 'You will get a message informing you that you have switched to the new branch.
    If you want to switch back to the old branch, you can use the following command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到一条消息，通知您已切换到新分支。如果要切换回旧分支，可以使用以下命令：
- en: '`$git checkout <old-branch-name>`: You will see the message `Switched to branch
    <old-branch-name>`.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git checkout <old-branch-name>`：您将看到消息`切换到分支<old-branch-name>`。'
- en: '`$git merge <branch-name>`: After the feature is complete, you can merge it
    to the branch of your choice using this command. This will merge the branch `<branch-name>`
    to your current branch. To sync the changes back to the `<branch-name>`, you can
    check out from your current branch to the branch `<branch-name>` and merge again.
    You can also mark the important points in your commit history by using tags.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`$git merge <branch-name>`：功能完成后，您可以使用此命令将其合并到您选择的分支。这将分支`<branch-name>`合并到当前分支。要将更改同步回`<branch-name>`，您可以从当前分支切换到分支`<branch-name>`并再次合并。您还可以使用标签在提交历史中标记重要的点。'
- en: After the commit, you can tag an important commit by using the `$git tag -a
    v1.0` command.
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交后，您可以使用`$git tag -a v1.0`命令标记重要的提交。
- en: To get new changes from the remote server, you can fetch the changes from Git
    using the `$git fetch` command.
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要从远程服务器获取新更改，您可以使用`$git fetch`命令从Git中获取更改。
- en: To merge the changes directly to your current branch, you can use the `$git
    pull` command.
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将更改直接合并到当前分支，您可以使用`$git pull`命令。
- en: After you are done with your changes, you can commit and push them to the remote
    repository using the `$git push` command.
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完成更改后，您可以使用`$git push`命令将其提交并推送到远程存储库。
- en: Setting up the database
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置数据库
- en: In this section, we will start working with code for the first time. Therefore,
    we will have to choose a source code editor to enter and edit code. You can use
    any of your favorite source code editors. As mentioned in the previous section,
    we have used the Sublime text editor to write code for this book.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将首次开始使用代码。因此，我们将不得不选择一个源代码编辑器来输入和编辑代码。您可以使用任何您喜欢的源代码编辑器。如前所述，我们已经使用Sublime文本编辑器来编写本书的代码。
- en: 'OK, now that you have a source code editor ready, let''s open `settings.py`
    in the project folder and see what it contains:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，现在您已经准备好一个源代码编辑器，让我们打开项目文件夹中的`settings.py`并查看其中包含的内容：
- en: '[PRE18]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: There are many more lines in the `settings.py` file, but we have trimmed the
    remaining contents of this file.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`settings.py`文件中还有许多行，但我们已经削减了此文件的其余内容。'
- en: As you may have already noticed, the file contains a number of variables that
    control various aspects of the application. Entering a new value for a variable
    is as simple as doing a Python assignment statement. In addition, the file is
    extensively commented, and comments explain what variables control in detail.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能已经注意到，该文件包含许多控制应用程序各个方面的变量。输入变量的新值就像执行Python赋值语句一样简单。此外，该文件有大量注释，并且注释详细解释了变量控制的内容。
- en: What concerns us now is configuring the database. As mentioned before, Django
    supports several database systems, so first of all, we have to specify what database
    system we are going to use. This is controlled by the `DATABASE_ENGINE` variable.
    If you have SQLite installed, set the variable to `sqlite3`. Otherwise, pick the
    value that matches your database engine from the comment next to the variable
    name.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们关注配置数据库。如前所述，Django支持多个数据库系统，因此，首先，我们必须指定要使用的数据库系统。这由`DATABASE_ENGINE`变量控制。如果安装了SQLite，请将变量设置为`sqlite3`。否则，从变量名称旁边的注释中选择与您的数据库引擎匹配的值。
- en: 'Next is the database name. We will choose a descriptive name for your database;
    edit `DATABASE_NAME` and set it to `django_mytweetsdb`. If you are using SQLite,
    this is all you need to do. On the other hand, if you are using a database server,
    follow these instructions:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是数据库名称。我们将为您的数据库选择一个描述性名称；编辑`DATABASE_NAME`并将其设置为`django_mytweetsdb`。如果您使用SQLite，这就是您需要做的。另一方面，如果您使用数据库服务器，请按照以下说明操作：
- en: Enter the relevant information for the database–the username, password, host,
    and port (SQLite does not require any of these).
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入数据库的相关信息-用户名、密码、主机和端口（SQLite不需要这些）。
- en: Create the actual database inside the database server, as Django won't do this
    by itself. In MySQL, for example, this is done through the `mysql` command-line
    utility or `phpMyAdmin`.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在数据库服务器中创建实际数据库，因为Django不会自行执行此操作。例如，在MySQL中，可以通过`mysql`命令行实用程序或`phpMyAdmin`来完成此操作。
- en: 'After these simple edits, the database section in `settings.py` now looks like
    this:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 进行这些简单的编辑后，`settings.py`中的数据库部分现在如下所示：
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Finally, we will tell Django to populate the configured database with tables.
    Although we haven''t created any tables for our data yet (and we won''t do so
    until the next chapter), Django requires several tables in the database for some
    of its features to function properly. Creating these tables is as easy as issuing
    the following command:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将告诉Django使用表填充配置的数据库。尽管我们尚未为我们的数据创建任何表（直到下一章我们才会这样做），但Django需要数据库中的一些表才能正常运行一些功能。创建这些表就像发出以下命令一样简单：
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If everything is correct, status messages will scroll on the screen, indicating
    that tables are being created. When prompted for the superuser account, enter
    your preferred username, e-mail, and password. If, on the other hand, the database
    is misconfigured, an error message will be printed to help you troubleshoot the
    issue.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切正确，状态消息将在屏幕上滚动，指示正在创建表。在提示超级用户帐户时，请输入您首选的用户名、电子邮件和密码。另一方面，如果数据库配置错误，将打印错误消息以帮助您排除故障。
- en: With this done, we are ready to launch our application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，我们准备启动我们的应用程序。
- en: Note
  id: totrans-179
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Using python manage.py**'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '**使用python manage.py**'
- en: When you run a command that starts with `python manage.py`, make sure that you
    are currently in the project's directory where the `manage.py` file is located.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以`python manage.py`开头的命令时，请确保您当前位于项目的目录中，其中包含`manage.py`文件。
- en: Launching the development server
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 启动开发服务器
- en: As discussed before, Django comes with a lightweight web server for developing
    and testing applications. This server is pre-configured to work with Django, and
    more importantly, it restarts whenever you modify the code.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Django带有一个轻量级的Web服务器，用于开发和测试应用程序。该服务器预先配置为与Django一起工作，更重要的是，每当您修改代码时，它都会重新启动。
- en: 'To start the server, run the following command:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动服务器，请运行以下命令：
- en: '[PRE21]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Next, open your browser and navigate to this URL: `http://localhost:8000/`.
    You should see a welcome message, as shown in the following screenshot:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，打开浏览器并导航到此URL：`http://localhost:8000/`。您应该会看到欢迎消息，如下面的截图所示：
- en: '![Launching the development server](img/image00283.jpeg)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![启动开发服务器](img/image00283.jpeg)'
- en: Congratulations! You have created and configured your first Django project.
    This project will be the basis on top of which we will build our bookmarking application.
    In the next chapter, we will start developing our application, and the page displayed
    by the web server will be replaced by something we wrote ourselves!
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您已经创建并配置了您的第一个Django项目。这个项目将是我们构建书签应用程序的基础。在下一章中，我们将开始开发我们的应用程序，Web服务器显示的页面将被我们自己编写的内容替换！
- en: 'As you may have noticed, the web server runs on port `8000` by default. If
    you want to change the port, you can specify it on the command line using the
    following command:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能已经注意到的，Web服务器默认在端口`8000`上运行。如果要更改端口，可以使用以下命令在命令行上指定：
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Also, the development server is only accessible from the local machine by default.
    If you want to access the development server from another machine on your network,
    use the following command line arguments:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，默认情况下，开发服务器只能从本地机器访问。如果要从网络上的另一台机器访问开发服务器，请使用以下命令行参数：
- en: '[PRE23]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Faster web development
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更快的Web开发
- en: When it comes to web development, one thing which majorly helps the success
    of the web project is its user interface and user experience. Although Django
    takes care of all the business logic at the backend, there is undoubtedly a need
    for an awesome frontend design framework that not only eases the developer's life
    while coding, but also enhances the user experience of the whole web project.
    Thus, we choose to explain **Twitter Bootstrap** here.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在Web开发中，对Web项目成功起到重要帮助的一件事是其用户界面和用户体验。尽管Django在后端处理所有业务逻辑，但无疑需要一个令人敬畏的前端设计框架，不仅可以在编码时简化开发人员的生活，而且还可以增强整个Web项目的用户体验。因此，我们选择在这里解释**Twitter
    Bootstrap**。
- en: Minimal Bootstrap
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小化的Bootstrap
- en: '**Bootstrap** is a complete frontend framework, and it''s beyond the scope
    of this book to familiarize you with each and every aspect of it. What you must
    be wondering is why we would discuss Bootstrap in Django book. You are being told
    about a frontend framework. The idea here is to help you build a web application
    that you can directly use in production, and which you will be deploying to clouds
    such as **AWS** and **Heroku**. You need your project to be of a production grade
    once you finish this book. Thus, by keeping Bootstrap as simple as possible, you
    can still build a great-looking Django web application.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '**Bootstrap**是一个完整的前端框架，超出了本书的范围，无法让您熟悉它的每个方面。您一定会想知道为什么我们会在Django书中讨论Bootstrap。您被告知了一个前端框架。这里的想法是帮助您构建一个可以直接用于生产的Web应用程序，并且您将部署到**AWS**和**Heroku**等云中。一旦您完成本书，您需要您的项目达到生产级别。因此，通过尽可能简化Bootstrap，您仍然可以构建一个外观出色的Django
    Web应用程序。'
- en: There are many ways to lay out your web pages based on the permutation and combination.
    To help you to get an understanding of that, we will take a look at a few examples.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多种方法可以根据排列和组合来布置您的网页。为了帮助您了解这一点，我们将看一些例子。
- en: '**Wire-framing** is the first step in the web development, which means it has
    to deal with the location of the content on the page. If you already know the
    basics of web designing, this section will make much more sense to you. If not,
    first do some reading to get a basic idea of web development. Look up the difference
    between `div` and `span`, and then everything will make sense to you. You can
    learn more from here: [https://developer.mozilla.org/en-US/Learn/HTML](https://developer.mozilla.org/en-US/Learn/HTML).
    Bootstrap basic page wire-framing is divided into rows and columns; each column
    is further divided into 12 sections. With these subsections, you can use the permutation
    to get your layout designed.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '**线框**是Web开发的第一步，这意味着它必须处理页面上内容的位置。如果您已经了解了Web设计的基础知识，那么这一部分对您来说将更有意义。如果没有，请先阅读一些内容，以对Web开发有一个基本的了解。查找`div`和`span`之间的区别，然后一切都会对您有意义。您可以从这里了解更多信息：[https://developer.mozilla.org/en-US/Learn/HTML](https://developer.mozilla.org/en-US/Learn/HTML)。Bootstrap基本页面线框分为行和列；每列进一步分为12个部分。通过这些子部分，您可以使用排列来设计您的布局。'
- en: When we see a website from a developer's perspective, the first thing we notice
    is the wire-frame being used. For example, when you visit [www.facebook.com](http://www.facebook.com),
    you see your news feed in the center of the page and other important links (such
    as links to messages, pages, and groups) on the left-hand side of the page. On
    the right-hand side, you see your friends who are available to chat.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从开发人员的角度看网站时，我们注意到的第一件事是使用的线框。例如，当您访问[www.facebook.com](http://www.facebook.com)时，您会在页面中央看到您的新闻订阅，左侧是其他重要链接（例如消息、页面和群组的链接）。在右侧，您会看到可以聊天的朋友。
- en: The same layout can be imagined in Bootstrap as 2-8-2\. The column for the left-hand
    side links will be a "2 column", the news feed will be an "8 column", and the
    chat section will be a "2 column". This is a basic wire-frame.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bootstrap中可以想象相同的布局为2-8-2。左侧链接的列将是“2列”，新闻订阅将是“8列”，聊天部分将是“2列”。这是一个基本的线框。
- en: Tip
  id: totrans-201
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Remember the sum always has to be 12, as a live fluid grid system in Bootstrap
    works on 12-grid column principle for better and flexible layout.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，总和始终必须为12，因为Bootstrap中的活动流体网格系统是基于12列网格原则的，以获得更好和更灵活的布局。
- en: Now, Bootstrap is not just for making a web page responsive–it has many other
    components to make web page look better and cleaner.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，Bootstrap不仅用于使网页响应式-它还有许多其他组件可以使网页看起来更好，更清洁。
- en: 'To use Bootstrap with Django, there are two ways:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Django中使用Bootstrap，有两种方式：
- en: '**The Django way**: `pip install django-bootstrap3`'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Django方式**：`pip install django-bootstrap3`'
- en: '**The Manual way**: Downloading the Bootstrap resources and copying them to
    a static location'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**手动方式**：下载Bootstrap资源并将其复制到静态位置'
- en: The Django way
  id: totrans-207
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Django方式
- en: If you want to install Bootstrap using a command, then you have to append the
    `INSTALLED_APPS` variable from the `settings.py` file with `bootstrap3`.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想使用命令安装Bootstrap，则必须将`settings.py`文件中的`INSTALLED_APPS`变量附加到`bootstrap3`。
- en: 'Here is a sample Django template using this method for a simple HTML form:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是使用此方法的简单HTML表单的示例Django模板：
- en: '[PRE24]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Tip
  id: totrans-211
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'To learn and explore more, you can refer to the following link:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多并进行探索，您可以参考以下链接：
- en: '[http://django-bootstrap3.readthedocs.org/](http://django-bootstrap3.readthedocs.org/)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://django-bootstrap3.readthedocs.org/](http://django-bootstrap3.readthedocs.org/)'
- en: Manual installation of Bootstrap
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动安装Bootstrap
- en: This method is recommended for beginners, but once you are confident, you can
    make shortcuts by following the command method.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法适合初学者，但一旦你有信心，你可以通过遵循命令方法来快捷操作。
- en: 'Here we will learn the basic inclusion for the project files, and the rest
    will be covered in the upcoming chapters. Once you have downloaded the Bootstrap
    from the online source ([http://getbootstrap.com](http://getbootstrap.com)), the
    unzipped folder structure looks something like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将学习项目文件的基本包含，并且其余内容将在即将到来的章节中涵盖。一旦您从在线来源（[http://getbootstrap.com](http://getbootstrap.com)）下载了Bootstrap，解压后的文件夹结构看起来像这样：
- en: '[PRE25]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'There are two types of local file conventions used in Django: one is "Static"
    and another is "media". Static files refers to the assets of your project, such
    as CSS, JavaScript, and so on. Media files are represented by uploaded files in
    the project, mainly consisting of images, video for display or download, and so
    on.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Django中使用的本地文件约定有两种类型：一种是“静态”，另一种是“媒体”。静态文件指的是项目的资产，如CSS，JavaScript等。媒体文件是项目中上传的文件，主要包括图片，用于显示或下载的视频等。
- en: 'Adding static files to your project can be done by adding following lines to
    the `setting.py` file:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将以下行添加到`setting.py`文件中，可以将静态文件添加到您的项目中：
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Now, all you have to do is to create a folder inside your project directory
    and copy all the Bootstrap resources.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您只需要在项目目录中创建一个文件夹，并复制所有Bootstrap资源。
- en: Summary
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: We prepared our development environment in this chapter, created our first project,
    set up the database, and learned how to launch the Django development server.
    We learned the best way to write code for our Django project and saw the default
    Django project structure. We learned about the naming convention, the significance
    of blank lines, and which style of import we should use and where.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们准备了开发环境，创建了我们的第一个项目，设置了数据库，并学会了如何启动Django开发服务器。我们学习了为我们的Django项目编写代码的最佳方式，并了解了默认的Django项目结构。我们学习了命名约定，空行的重要性，以及我们应该使用哪种导入风格以及在哪里使用。
- en: We saw which editor and which IDE would be better for Python- and Django-based
    web development. We learned how to use Git to keep our code updated at the repository.
    We learned a bit about Bootstrap to work on frontend development.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了哪种编辑器和哪种IDE更适合基于Python和Django的Web开发。我们学会了如何使用Git来保持我们的代码在存储库中更新。我们学习了一些关于Bootstrap来进行前端开发。
- en: The next chapter will take you through a tour of the main Django components
    and will help develop a working prototype for our Twitter application. It's going
    to be a fun chapter with many new things to learn, so keep reading!
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将带您了解主要的Django组件，并帮助开发我们的Twitter应用程序的工作原型。这将是一个有趣的章节，有许多新东西要学习，所以请继续阅读！
