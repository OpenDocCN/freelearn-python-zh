- en: Creating Sound and Music
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建声音和音乐
- en: This chapter will introduce methods of making sounds and playing music using
    the hardware that comes on the Adafruit Circuit Playground Express. The chapter
    will first introduce the basics of making the board beep at a certain frequency
    of sound and will then move on to more advanced topics, such as playing music
    files using the WAV file format and the board's built-in sound speakers. The techniques
    in this chapter can be used directly in a wide array of MicroPython projects that
    you might make. The options for producing audio output in this chapter range from
    producing simple beeping sounds to playing songs in your embedded projects.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍使用Adafruit Circuit Playground Express上的硬件制作声音和播放音乐的方法。本章首先介绍了让板子以特定频率发出蜂鸣声的基础知识，然后将进一步介绍更高级的主题，如使用WAV文件格式和板载扬声器播放音乐文件。本章的技术可以直接用于您可能制作的各种MicroPython项目中。本章中产生音频输出的选项范围从产生简单的蜂鸣声到在嵌入式项目中播放歌曲。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下教程：
- en: Making a beeping sound
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出蜂鸣声
- en: Controlling tone, frequency, and duration
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制音调、频率和持续时间
- en: Playing a musical note
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放音符
- en: Playing a melody
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放旋律
- en: Sounding the alarm
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发出警报
- en: Playing WAV files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 播放WAV文件
- en: Converting MP3 files to WAV files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将MP3文件转换为WAV文件
- en: Starting and stopping tones
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始和停止音调
- en: The Adafruit Circuit Playground Express layout
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Adafruit Circuit Playground Express布局
- en: 'The following photograph shows the locations of the speaker that is built into
    the board. All of the beeps and sounds covered in this chapter will use this speaker
    for playback:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下照片显示了板子上内置扬声器的位置。本章涵盖的所有蜂鸣声和声音都将使用此扬声器进行播放：
- en: '![](assets/7b610559-8dc7-4b1f-ba85-79f8b5c9f34c.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/7b610559-8dc7-4b1f-ba85-79f8b5c9f34c.png)'
- en: Courtesy of adafruit.com
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 由adafruit.com提供
- en: Making a beeping sound
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出蜂鸣声
- en: In this recipe, we will learn how to get the speakers to make a beeping sound
    at a specific sound frequency and for a specific duration of time. Audio output
    is a great way to get someone's attention; you can find it used everywhere from
    ringing phones to doorbells. This recipe will give you the skills that you need
    to add beeps to your embedded projects.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使扬声器以特定的声音频率发出蜂鸣声，并持续一定的时间。音频输出是引起某人注意的好方法；您可以在到处都能找到它，从响铃电话到门铃。本教程将为您提供向嵌入式项目添加蜂鸣声所需的技能。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备就绪
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s perform the following steps:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'Run the following lines of code in the REPL. You should hear a beeping sound
    at a frequency of 900 Hz played for 0.2 seconds:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行。您应该听到以900赫兹的频率播放0.2秒的蜂鸣声：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Execute the following code so that a lower frequency beep will be played for
    a longer duration:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行以下代码，以便以较低频率的蜂鸣声播放更长时间：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'The first line of code imports the Circuit Playground Express library. The
    `cpx` object exposes a method called `play_tone`. This method accepts two arguments:
    frequency and duration. These arguments specify the frequency of the sound in
    Hz, and how long the sound will be played in seconds.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行导入了Circuit Playground Express库。`cpx`对象公开了一个名为`play_tone`的方法。此方法接受两个参数：频率和持续时间。这些参数指定声音的频率（以赫兹为单位）以及声音将在多长时间内播放（以秒为单位）。
- en: The duration can be given as a floating point number. This means that a value
    such as `0.2` will correlate to 200 milliseconds. This method call is a blocking
    call. So, calling the method will start playing the audio and it won't return
    anything until the specified time has elapsed.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 持续时间可以以浮点数给出。这意味着诸如`0.2`之类的值将对应于200毫秒。此方法调用是一个阻塞调用。因此，调用该方法将开始播放音频，并且在指定的时间到达之前不会返回任何内容。
- en: There's more...
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The technique presented in this chapter is a very straightforward way of generating
    a beeping sound from the speakers on the board. However, under the hood, a lot
    is happening. When you specify the frequency and duration of a sound, it will
    build the sound wave programmatically, and then feed the audio data into the speaker
    to play the sound. The audio data is created by building a sine wave in Python
    code.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍的技术是从板子上的扬声器生成蜂鸣声的一种非常直接的方法。但是，在幕后，发生了很多事情。当您指定声音的频率和持续时间时，它将以编程方式构建声波，然后将音频数据输入扬声器以播放声音。音频数据是通过在Python代码中构建正弦波来创建的。
- en: 'The code that builds this audio data is part of the Circuit Playground Express
    library, which was imported in this recipe. You can download the code and read
    it to learn how this is done. It''s a great way to understand the mathematics
    of sound waves and how they can be created through software. The following screenshot
    shows what a computer-generated tone playing at 500 Hz looks like:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 构建此音频数据的代码是Circuit Playground Express库的一部分，该库已在本教程中导入。您可以下载代码并阅读以了解如何完成此操作。这是了解声波的数学和如何通过软件创建它们的绝佳方式。以下屏幕截图显示了计算机生成的以500赫兹播放的音调的外观：
- en: '![](assets/ea2fd2f8-ab5a-4f62-a3c4-d012bbb0de11.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ea2fd2f8-ab5a-4f62-a3c4-d012bbb0de11.png)'
- en: You can see clearly from the preceding screenshot that this looks just like
    a sine waveform. The screenshot was taken when we zoomed in to see an individual
    sound cycle. Since the sound is playing at 500 Hz, we would expect one cycle to
    be 1/500 of a second long. Here, we can see that this is where the first wave
    ends—at exactly 0.002 seconds.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以清楚地从前面的屏幕截图中看到，这看起来就像正弦波形。当我们放大以查看单个声音周期时，我们拍摄了该屏幕截图。由于声音以500赫兹播放，我们期望一个周期为1/500秒长。在这里，我们可以看到第一个波结束的地方——确切地说是在0.002秒处。
- en: See also
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the `play_tone` method can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_tone](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_tone).
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`play_tone`方法的文档可以在[https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_tone](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_tone)找到。
- en: More details on the audio spectrum that humans can hear can be found at [https://www.teachmeaudio.com/mixing/techniques/audio-spectrum/](https://www.teachmeaudio.com/mixing/techniques/audio-spectrum/).
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关人类可以听到的音频频谱的更多细节可以在[https://www.teachmeaudio.com/mixing/techniques/audio-spectrum/](https://www.teachmeaudio.com/mixing/techniques/audio-spectrum/)找到。
- en: Controlling tone, frequency, and duration
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控制音调、频率和持续时间
- en: In this recipe, we will learn how to play tones with a varying frequency and
    duration. By playing different tones repeatedly with a different duration each
    time, we can learn how to go beyond individual beeps. These steps will eventually
    lead to us playing melodies or varying tones that can make the same sound as an
    alarm.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何以不同的频率和持续时间播放音调。通过重复播放不同频率的音调，每次持续时间都不同，我们可以学会如何超越单个蜂鸣声。这些步骤最终将使我们能够演奏旋律或不同音调，可以发出与警报相同的声音。
- en: Getting ready
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL才能运行本示例中提供的代码。
- en: How to do it...
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s perform the following steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'Run the following lines of code in the REPL. You should hear five separate
    tones playing for 0.2 seconds each. The sounds will start at a lower pitch and
    gradually get higher and higher. As each tone plays, the frequency of the tone
    will be printed to the output in the REPL:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行。您应该听到五个单独的音调，每个音调都会播放0.2秒。声音将从较低的音调开始，逐渐变得更高。每次播放音调时，音调的频率将被打印到REPL中的输出中：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the following code to play three different tones. The tones will increase
    in pitch and will also increase in terms of duration of the playback:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码播放三种不同的音调。音调将提高音高，并且播放时间也会增加：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理…
- en: In the first block of code, the `for` loop will iterate over the frequency value,
    starting from 500 and raising the value in increments of 100 to end at 900\. This
    range and these steps will be easily audible to the human ear. In each iteration,
    the frequency to be played will be printed out and then played using the `play_tone`
    method. Only the frequency of the sound changes in each iteration; they will all
    play for 200 milliseconds.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一段代码中，`for`循环将迭代频率值，从500开始，每次增加100，直到结束于900。这个范围和这些步骤对人耳来说是很容易听到的。在每次迭代中，将打印要播放的频率，然后使用`play_tone`方法播放。每次迭代中只有声音的频率会改变；它们都会播放200毫秒。
- en: In the second block of code, the `for` loop will iterate over a lower sound
    pitch and through fewer tones. For each iteration, the frequency and duration
    of the tone increases. The frequency will be the exact value of the `i` variable,
    while the duration will be the value of `i` in terms of milliseconds. Since the
    `play_tone` method is expecting the value in seconds, we must divide it by 1,000.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二段代码中，`for`循环将迭代一个较低的音调，并且音调较少。对于每次迭代，音调的频率和持续时间都会增加。频率将是`i`变量的确切值，而持续时间将是以毫秒为单位的`i`的值。由于`play_tone`方法期望的值是以秒为单位的，所以我们必须将其除以1,000。
- en: There's more...
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The two `for` loops presented in this chapter vary the way tones are played
    over a brief duration of time. In both examples, the tones play within one second
    but they have three or more different tones playing.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍的两个`for`循环变化了在短暂的时间内播放音调的方式。在这两个示例中，音调在一秒钟内播放，但它们有三个或更多不同的音调。
- en: This is an excellent starting point to experiment with different variations
    of these loops. Because it only takes a second to play each loop, you can go through
    a fast cycle of experimentation and hear the results instantly. Try and experiment
    by changing the pitch or the pace at which the tones change.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的起点，可以尝试不同变化的循环。因为每个循环只需要一秒钟，所以你可以快速进行实验，立即听到结果。尝试通过改变音调或音调变化的速度来进行实验。
- en: In both loops, the pitch increased with each iteration. Try and experiment with
    a pitch that gets lower with each iteration.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在两个循环中，音调随着每次迭代而增加。尝试并实验一个音调，使其随着每次迭代而降低。
- en: See also
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the Python range function can be found at [https://docs.python.org/3/library/functions.html#func-range](https://docs.python.org/3/library/functions.html#func-range).
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Python range函数的文档可以在[https://docs.python.org/3/library/functions.html#func-range](https://docs.python.org/3/library/functions.html#func-range)找到。
- en: An explanation of pitch and frequency can be found at [https://www.le.ac.uk/se/centres/sci/selfstudy/snd5.htm](https://www.le.ac.uk/se/centres/sci/selfstudy/snd5.htm).
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关音调和频率的解释可以在[https://www.le.ac.uk/se/centres/sci/selfstudy/snd5.htm](https://www.le.ac.uk/se/centres/sci/selfstudy/snd5.htm)找到。
- en: Playing a musical note
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演奏一个音符
- en: In this recipe, we will learn how to define a number of global constants, each
    representing a specific musical note. Then, we can play these different musical
    notes by referring to their constants. Musical notes are the building blocks of
    melodies. This will be the first step toward playing a melody. Once we have learned
    how to play a musical note, we can then combine a number of notes in sequence
    to play a melody in future recipes.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们将学习如何定义一些全局常量，每个常量代表一个特定的音符。然后，我们可以通过引用它们的常量来演奏这些不同的音符。音符是旋律的基本组成部分。这将是演奏旋律的第一步。一旦我们学会了如何演奏一个音符，我们就可以在以后的示例中将多个音符组合在一起演奏旋律。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本食谱中提供的代码。
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s perform the following steps:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'Run the following lines of code in the REPL:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You should hear the `E5` musical note play on the speakers for 0.15 seconds.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该听到音箱播放`E5`音符，持续0.15秒。
- en: 'Use the following code to play the `C5` and `G5` musical notes for 0.15 seconds:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码播放`C5`和`G5`音符，持续0.15秒：
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The first line of code in this recipe imports the Circuit Playground Express
    library. Then, three global constants are defined and are named after their associated
    musical notes. The **scientific pitch notation** (**SPN**) is used in this recipe.
    This notation works by combining the name of a musical note with the number specifying
    the pitch's octave. In the case of E5, the note will be E and the octave will
    be 5\. Here, each note maps to a specific frequency of sound.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的第一行代码导入了Circuit Playground Express库。然后，定义了三个全局常量，并以它们关联的音符命名。本食谱使用**科学音高记谱法**（**SPN**）。这种记谱法通过将音符名称与指定音高的数字相结合来工作。在E5的情况下，音符将是E，音高将是5。在这里，每个音符都映射到特定的声音频率。
- en: In the first block of code, the `E5` note is played simply by referring to the
    `E5` global constant when calling the `play_tone` method. Setting the duration
    to `0.15` allows each note play for 150 milliseconds, which creates a comfortable
    pace to the music. Reducing or increasing this value can increase or reduce the
    pace that the musical tone will play. The second block of code plays the remaining
    two notes defined at the same speed.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一段代码块中，通过在调用`play_tone`方法时引用`E5`全局常量来简单地播放`E5`音符。将持续时间设置为`0.15`允许每个音符播放150毫秒，这样可以为音乐创造一个舒适的节奏。减少或增加此值可以增加或减少音乐音调的播放速度。第二段代码以相同的速度播放其余两个音符。
- en: The frequencies used in this chapter follow the standard piano key frequencies.
    This is equivalent to the standard concert pitch and the 12-tone equal temperament.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的频率遵循标准钢琴键频率。这相当于标准音乐音高和12平均律。
- en: There's more...
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this recipe, we used three musical notes to demonstrate the process of defining
    notes and then playing each note back. Of course, there are many more notes that
    can be defined.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们使用了三个音符来演示定义音符然后播放每个音符的过程。当然，还可以定义许多其他音符。
- en: A good learning exercise is to find the frequency of other popular notes and
    go through the process of defining them and playing them. Even though three notes
    seems like too few, they are enough to play a recognizable melody. We will see
    in the following recipe how these same three notes can be combined to play a popular
    melody.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的学习练习是找到其他流行音符的频率，并经历定义它们并播放它们的过程。尽管三个音符似乎太少，但足以演奏出一个可识别的旋律。在下一个食谱中，我们将看到这三个音符如何组合在一起演奏一首流行的旋律。
- en: See also
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: An explanation of the octave notation can be found at [http://www.flutopedia.com/octave_notation.html](http://www.flutopedia.com/octave_notation.html).
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 八度记谱法的解释可以在[http://www.flutopedia.com/octave_notation.html](http://www.flutopedia.com/octave_notation.html)找到。
- en: A Python-based software synthesizer can be found at [https://mdoege.github.io/PySynth/](https://mdoege.github.io/PySynth/).
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://mdoege.github.io/PySynth/](https://mdoege.github.io/PySynth/)找到基于Python的软件合成器。
- en: Playing a melody
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 演奏旋律
- en: In this recipe, we will learn how to play a melody by playing a sequence of
    musical notes. A single musical note on its own is rather boring. The real fun
    begins when you can combine a sequence of them and time them correctly to play
    a melody.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将学习如何通过播放一系列音符来演奏旋律。单独的音符本身相当无聊。真正的乐趣开始于您可以组合一系列音符并正确计时以演奏旋律。
- en: By following the standard musical notation, it will become possible to take
    popular melodies and specify them in Python in a way that the Circuit Playground
    Express will be able to play them back.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循标准的音乐记谱法，将能够以一种Circuit Playground Express能够播放的方式在Python中指定流行的旋律。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本食谱中提供的代码。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s perform the following steps:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'Run the following lines of code in the REPL. You should hear the `E5` musical
    note play on the speakers for 0.15 seconds:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行。您应该听到音箱播放`E5`音符，持续0.15秒：
- en: '[PRE6]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Use the following lines of code to play the same note at twice the speed, and
    then at half the speed:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码行以两倍速播放相同的音符，然后以一半的速度播放：
- en: '[PRE7]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Use the following line of code to play nothing and keep the speaker silent
    for the same period as one note playing at the normal speed:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码行播放空白，并使扬声器保持安静，持续时间与正常速度播放一个音符的时间相同：
- en: '[PRE8]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Use the following lines of code to play the initial part of the *Super Mario
    Bros.* theme song:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码行播放*超级马里奥兄弟*主题曲的开头部分：
- en: '[PRE9]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The code that follows combines all the code shown in this recipe to make one
    complete program. Add this to the `main.py` file and it will play the start of
    the *Super Mario Bros.* theme song every time you reload the code:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的代码将结合本食谱中显示的所有代码，以制作一个完整的程序。将其添加到`main.py`文件中，它将在重新加载代码时播放*超级马里奥兄弟*主题曲的开头部分：
- en: '[PRE10]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The initial lines of code import the necessary libraries and set up the constants
    that are required for the rest of the code in the program. The `MELODY` constant
    has the sequence of notes that make up the song. There are pauses of silence between
    certain notes; these are simply specified with a value of `0` to indicate that
    no notes should be played at this point. The `play_note` function expects to be
    given the frequency of the note to play and, optionally, the duration of time
    to play the note for. If a frequency of `0` is given, it will call the sleep function
    to stay silent; otherwise, it will play the note as a tone.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 初始的代码行导入必要的库并设置程序中其余代码所需的常量。`MELODY`常量包含构成歌曲的音符序列。在某些音符之间有静音暂停；这些暂停只需指定值为`0`，表示此时不应播放任何音符。`play_note`函数期望给出要播放的音符的频率，以及可选的音符播放时间。如果给出频率`0`，它将调用sleep函数保持静音；否则，它将播放音符作为音调。
- en: Finally, the `for` loop at the end of the program simply loops through each
    note defined in the melody and plays it by calling the `play_note` function. In
    this way, you can define many different melodies and songs, and play different
    songs depending on how the user interacts with the device.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，程序末尾的`for`循环简单地循环遍历旋律中定义的每个音符，并通过调用`play_note`函数来播放它。通过这种方式，您可以定义许多不同的旋律和歌曲，并根据用户与设备的交互方式播放不同的歌曲。
- en: There's more...
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有更多...
- en: 'This recipe is written in a generic fashion: you take a popular melody, provide
    the sequence of notes and each note''s associated frequency, and then add the
    melody to your project. The melody in this recipe has each note play for the same
    duration.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方是以通用方式编写的：您采用一首流行的旋律，提供音符序列和每个音符的相关频率，然后将旋律添加到您的项目中。这个配方中的旋律让每个音符以相同的持续时间播放。
- en: However, there are many melodies that might mix quarter notes and eighth notes.
    These melodies will require a different duration of time to be defined for each
    note. The recipe could be expanded so that we could keep track of each note to
    play and the duration that each note would need to play for.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有许多旋律可能混合四分音符和八分音符。这些旋律将需要为每个音符定义不同的持续时间。可以扩展该配方，以便我们可以跟踪要播放的每个音符以及每个音符需要播放的持续时间。
- en: See also
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: The playback of the *Super Mario Bros.* theme song on an Arduino device can
    be found at [https://www.princetronics.com/supermariothemesong/](https://www.princetronics.com/supermariothemesong/).
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://www.princetronics.com/supermariothemesong/](https://www.princetronics.com/supermariothemesong/)找到在Arduino设备上播放*超级马里奥兄弟*主题曲的示例。
- en: A discussion on sound and music with the Circuit Playground can be found at
    [https://learn.adafruit.com/circuit-playground-music](https://learn.adafruit.com/circuit-playground-music).
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关Circuit Playground声音和音乐的讨论可在[https://learn.adafruit.com/circuit-playground-music](https://learn.adafruit.com/circuit-playground-music)找到。
- en: An example of playing a melody on the Circuit Playground can be found at [https://learn.adafruit.com/circuit-playground-hot-potato/caternuson-playing-a-melody](https://learn.adafruit.com/circuit-playground-hot-potato/caternuson-playing-a-melody).
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[https://learn.adafruit.com/circuit-playground-hot-potato/caternuson-playing-a-melody](https://learn.adafruit.com/circuit-playground-hot-potato/caternuson-playing-a-melody)找到Circuit
    Playground上演奏旋律的示例。
- en: Sounding the alarm
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发出警报
- en: In this recipe, we will learn how to play low and high frequency sounds to create
    the sound of an alarm. Alarm sounds are very useful for alerting people to get
    their attention. This recipe demonstrates a very simple, but effective, way to
    create an alarm sound, which can then be taken and adapted to the needs of your
    project.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将学习如何播放低音和高音频率的声音，以创建警报声音。警报声音对于提醒人们引起他们的注意非常有用。这个配方演示了创建警报声音的一种非常简单但有效的方法，然后可以根据项目的需要进行调整。
- en: Getting ready
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本配方中提供的代码。
- en: How to do it...
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Let''s perform the following steps for this recipe:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个配方执行以下步骤：
- en: 'Run the following lines of code in the REPL. You should hear a high-pitched
    beeping sound for 0.5 seconds:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行。您应该听到高音的蜂鸣声持续0.5秒：
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Use the following code to play a low-pitched beeping sound for 0.5 seconds:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码播放低音的蜂鸣声0.5秒：
- en: '[PRE12]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Use the following code to play a siren that goes from a high to a low pitch
    through three cycles, playing for a total of three seconds:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码播放警报器，通过三个周期从高音到低音，总共播放三秒：
- en: '[PRE13]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The code that follows combines all the code shown in this recipe to make one
    complete program. Add this to the `main.py` file and it will play the siren alarm
    for three seconds every time you reload the code:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的代码将结合本配方中显示的所有代码，以制作一个完整的程序。将其添加到`main.py`文件中，每次重新加载代码时都会播放三秒的警报声音：
- en: '[PRE14]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The initial lines of code import the necessary libraries and set up the constants
    that are required for the rest of the code in the program. The script then loops
    for a total of three iterations, with each iteration playing sounds for a total
    of one second.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 初始的代码行导入必要的库并设置程序中其余代码所需的常量。然后，脚本循环三次，每次迭代都会播放一秒钟的声音。
- en: In each iteration, a high-pitched tone will be played for a half a second, followed
    by a low-pitched tone for half a second. In this way, a siren sound effect is
    created, similar to an alarm.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在每次迭代中，将播放高音持续半秒，然后低音持续半秒。通过这种方式，创建了一个警报声音效果，类似于警报声音。
- en: There's more...
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有更多...
- en: This code can be put into a function that receives an argument count, which
    specifies how many iterations or seconds the alarm is sounded for. Then, for any
    code in your project, you could call the function to make your board play an alarm
    for 10 seconds or 30 seconds. You could also combine this recipe with others in
    the book to make the pixels on the board flash red in the same way that an alarm
    would.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码可以放入一个接收参数计数的函数中，该参数指定警报响响多少次或多少秒。然后，对于项目中的任何代码，您都可以调用该函数，使您的板播放10秒或30秒的警报。您还可以将此教程与书中的其他教程结合起来，使板上的像素以与警报相同的方式闪烁为红色。
- en: See also
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Examples of changing the frequency when calling the `play_tone` method can be
    found at [https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-tone](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-tone).
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`play_tone`方法时更改频率的示例可以在[https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-tone](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-tone)中找到。
- en: A microcontroller project that makes a siren alarm sound can be found at [https://www.instructables.com/id/How-to-Make-a-Siren-Using-Arduino/](https://www.instructables.com/id/How-to-Make-a-Siren-Using-Arduino/).
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://www.instructables.com/id/How-to-Make-a-Siren-Using-Arduino/](https://www.instructables.com/id/How-to-Make-a-Siren-Using-Arduino/)找到制作警报声音的微控制器项目。
- en: Playing WAV files
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 播放WAV文件
- en: In this recipe, we will learn how to use the speakers to play a WAV file of
    your choice. There is a good amount of storage on the Circuit Playground Express
    to store short audio clips, which can be played back at certain times.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何使用扬声器播放您选择的WAV文件。Circuit Playground Express上有大量存储空间，可以存储短音频片段，并可以在特定时间播放。
- en: Tones, beeps, alarms, and melodies are great; however, once you can play WAV
    files, then you can play any type of sound.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 音调、蜂鸣、警报和旋律都很棒；但是，一旦您可以播放WAV文件，那么您就可以播放任何类型的声音。
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要访问Circuit Playground Express上的REPL来运行本教程中提供的代码。
- en: How to do it...
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 操作步骤...
- en: 'Let''s perform the following steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'Copy the `hello.wav` file to the device in the same folder as the `main.py`
    file. Then, run the following lines of code in the REPL:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`hello.wav`文件复制到与`main.py`文件相同的文件夹中的设备上。然后，在REPL中运行以下代码行：
- en: '[PRE15]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You should hear the board say *"**Hello"* as it plays back the audio file.
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您应该听到板子播放音频文件时说“**你好**”。
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The first line of code imports the Circuit Playground Express library. The `cpx`
    object exposes a property method called `play_file`. This method accepts one argument
    in the `.wav` filename, which will be played on the onboard speaker.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的第一行导入了Circuit Playground Express库。`cpx`对象公开了一个名为`play_file`的属性方法。该方法接受一个参数，即`.wav`文件名，该文件将在板上的扬声器上播放。
- en: The audio file should be in WAV file format; it should have a sample rate of
    22,050 kHz, be 16-bit format, and have a mono channel of audio. This method will
    open the audio file and start the playback on the speaker. It will also keep polling
    the audio device until the playback is finished and will return once the audio
    playback has completed.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 音频文件应该是WAV文件格式；它应该具有22,050 kHz的采样率，16位格式，并且具有单声道音频。此方法将打开音频文件并在扬声器上开始播放。它还将不断轮询音频设备，直到播放完成，并在音频播放完成后返回。
- en: There's more...
  id: totrans-144
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Due to hardware constraints on the board, you won't be able to play compressed
    music formats such as MP3\. The file will need to be in a specific uncompressed
    file format, which can be fed directly to the playback hardware that is on the
    board.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于板上的硬件限制，您将无法播放诸如MP3这样的压缩音乐格式。文件需要以特定的未压缩文件格式，直接输入到板上的播放硬件中。
- en: A consequence of this is that the uncompressed sound streams will be much larger,
    so only short audio clips will be able to be stored on the device. This still
    opens up a number of possibilities for playing sound effects or other short audio
    clips.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的一个后果是，未压缩的声音流会更大，因此只能存储短音频片段在设备上。这仍然为播放声音效果或其他短音频片段提供了许多可能性。
- en: See also
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the `play_file` method can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_file](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_file).
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在[https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_file](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.play_file)找到`play_file`方法的文档。
- en: Examples of calling the `play_file` method can be found at [https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-file](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-file).
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用`play_file`方法的示例可以在[https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-file](https://learn.adafruit.com/circuitpython-made-easy-on-circuit-playground-express/play-file)中找到。
- en: Converting MP3 files to WAV files
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将MP3文件转换为WAV文件
- en: In this recipe, we will learn how to convert an MP3 file to a WAV file, which
    can then be played on the Circuit Playground Express. MP3 files are one of the
    most popular sound file formats around. This recipe is very useful for when you
    have an audio clip that you want to include in your embedded project, but need
    to get it in the right format so that it can play back correctly.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何将MP3文件转换为WAV文件，然后可以在Circuit Playground Express上播放。MP3文件是最流行的声音文件格式之一。当您有一个要包含在嵌入式项目中的音频剪辑，但需要将其转换为正确的格式以便正确播放时，本教程非常有用。
- en: Getting ready
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need to download and install the open source audio editing software,
    Audacity. It is available for Windows, macOS, and Linux.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要下载并安装开源音频编辑软件Audacity。它适用于Windows、macOS和Linux。
- en: Audacity can be downloaded from the official website at [https://www.audacityteam.org/](https://www.audacityteam.org/).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: Audacity可以从官方网站[https://www.audacityteam.org/](https://www.audacityteam.org/)下载。
- en: How to do it...
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s perform the following steps:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: Start the Audacity software and select File | Open. Then, select the MP3 file
    and click on Open.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Audacity软件，然后选择文件|打开。然后，选择MP3文件并单击打开。
- en: 'Details of the audio file should appear in the application, as shown in the
    following screenshot:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序中应该显示音频文件的详细信息，如下面的屏幕截图所示：
- en: '![](assets/2e53af75-4de3-4618-ac25-0808b3010fc0.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/2e53af75-4de3-4618-ac25-0808b3010fc0.png)'
- en: 'Select Tracks | Resample and the following dialog box should appear:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择轨道|重新采样，然后应该出现以下对话框：
- en: '![](assets/ec025055-3467-4fd2-a993-26d6b45e3f27.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/ec025055-3467-4fd2-a993-26d6b45e3f27.png)'
- en: Set the new sample rate to `22050` and then click on OK.
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的采样率设置为`22050`，然后单击确定。
- en: 'Now, choose Tracks | Stereo Track to Mono. Instead of the stereo audio streams
    that were visible, there should only be one single mono channel on the screen:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，选择轨道|立体声轨道转换为单声道。屏幕上应该只有一个单声道，而不是可见的立体声音频流：
- en: '![](assets/a41bf509-b7ef-4be2-afa8-76a4c9ca5926.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a41bf509-b7ef-4be2-afa8-76a4c9ca5926.png)'
- en: The audio data is now ready to be exported to the WAV format.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 音频数据现在已准备好导出为WAV格式。
- en: Next, choose File | Export Audio.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，选择文件|导出音频。
- en: Set the file format drop-down menu to the value of WAV (Microsoft) signed 16-bit
    PCM.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件格式下拉菜单设置为WAV（Microsoft）签名16位PCM的值。
- en: Click on the Save button.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 单击保存按钮。
- en: You can now copy the WAV file to the board and play it back on the device.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，您可以将WAV文件复制到板上并在设备上播放它。
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The Circuit Playground Express board expects an audio file to be in the WAV
    file format and have a sample rate of 22,050 kHz, be in 16-bit format, and have
    a mono channel of audio data. Audacity is a versatile audio editor that can open
    any number of audio formats and perform the necessary changes to convert the audio
    data into the correct format.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: Circuit Playground Express板期望音频文件以WAV文件格式存在，并且采样率为22,050 kHz，采用16位格式，并且具有音频数据的单声道。Audacity是一款多功能音频编辑器，可以打开任意数量的音频格式，并执行必要的更改以将音频数据转换为正确的格式。
- en: The steps taken in this recipe resample the audio data and convert the audio
    channels to a single mono channel. Once that is done, the audio data can be exported
    to the correct WAV format. It is important to note that WAV files are not compressed
    like other audio formats, so they will take up much more space. This, combined
    with the storage constraints on this device, mean that only short audio clips
    should be used so that they can fit on the device.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中采取的步骤重新采样音频数据并将音频通道转换为单声道。完成后，音频数据可以导出到正确的WAV格式。重要的是要注意，WAV文件不像其他音频格式那样被压缩，因此它们将占用更多的空间。这与该设备上的存储限制相结合，意味着只能使用短音频剪辑，以便它们可以适应该设备。
- en: There's more...
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: This recipe focused on the MP3 file format as the input format. However, Audacity
    supports a wide range of input formats, so you are not limited to only that input
    format for conversion. Audacity also has extensive editing capabilities that will
    come in very handy when you want to prepare a short audio clip from a much bigger
    audio stream.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这个教程侧重于MP3文件格式作为输入格式。但是，Audacity支持广泛的输入格式，因此您不仅限于该输入格式进行转换。当您想要从更大的音频流中准备一个短音频剪辑时，Audacity还具有广泛的编辑功能，这将非常有用。
- en: A good example of this is when you have a song that might be five minutes long,
    but you only want a short five-second clip to be loaded on your board. You can
    then use the editing and conversion features of Audacity to achieve the final
    result.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 一个很好的例子是，当您有一首可能长达五分钟的歌曲，但您只想要一个短短的五秒钟的片段加载到您的板上。然后，您可以使用Audacity的编辑和转换功能来实现最终结果。
- en: See also
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: More details on the WAV PCM soundfile format can be found at [http://soundfile.sapp.org/doc/WaveFormat/](http://soundfile.sapp.org/doc/WaveFormat/).
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关WAV PCM音频文件格式的更多详细信息，请访问[http://soundfile.sapp.org/doc/WaveFormat/](http://soundfile.sapp.org/doc/WaveFormat/)。
- en: A guide to using Audacity for microcontroller audio projects can be found at
    [https://learn.adafruit.com/microcontroller-compatible-audio-file-conversion](https://learn.adafruit.com/microcontroller-compatible-audio-file-conversion).
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关在微控制器音频项目中使用Audacity的指南，请访问[https://learn.adafruit.com/microcontroller-compatible-audio-file-conversion](https://learn.adafruit.com/microcontroller-compatible-audio-file-conversion)。
- en: Starting and stopping tones
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始和停止音调
- en: In this recipe, we will learn how to use the `start_tone` and `stop_tone` calls
    to play tones in the background, and control other components on the board during
    the playback of the sound. The technique used in this recipe will essentially
    allow you to do more than one thing at an item when you play sounds.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个教程中，我们将学习如何使用`start_tone`和`stop_tone`调用在后台播放音调，并在播放声音时控制板上的其他组件。本教程中使用的技术基本上允许您在播放声音时做更多事情。
- en: One example of when you might want to implement this in a project is when you
    want to play an alarm sound and flash the lights at the same time.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 实施此项目的一个示例是当您想要播放警报声并同时闪烁灯光时。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备工作
- en: You will need access to the REPL on the Circuit Playground Express to run the
    code presented in this recipe.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要访问Circuit Playground Express上的REPL，以运行本教程中提供的代码。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Let''s perform the following steps:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们执行以下步骤：
- en: 'Run the following lines of code in the REPL. You should hear a high-pitched
    beeping sound for 0.5 seconds:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在REPL中运行以下代码行。您应该听到一个高音的尖叫声，持续0.5秒：
- en: '[PRE16]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Use the following code to play a beeping sound in the background while 10 pixels
    turn red at 0.1-second intervals. The beeping will then stop at the end of the
    animation:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码在后台播放蜂鸣声，同时以0.1秒的间隔将10个像素变红。然后在动画结束时蜂鸣声将停止：
- en: '[PRE17]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Use the following block of code to perform a similar operation, but with a
    lower pitch. Here, the pixel animation will turn off each pixel one by one, ending
    the tone at the end of the animation:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下代码块执行类似的操作，但音调较低。在这里，像素动画将逐个关闭每个像素，最终在动画结束时结束音调：
- en: '[PRE18]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The code that follows combines all the code shown in this recipe to make one
    complete program. Add this to the `main.py` file and it will play a siren alarm
    and animate the pixels on and off with the siren:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的代码将所有在本示例中显示的代码组合在一起，以制作一个完整的程序。将其添加到`main.py`文件中，它将播放警报声并以警报声开启和关闭像素动画。
- en: '[PRE19]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 工作原理...
- en: The initial lines of code import the necessary libraries and set up the constants
    that are required for the rest of the code in the program. The brightness of the
    pixels is also set to a more comfortable level. The script then starts playing
    the high-pitched beeping tone in the background. It does so while looping through
    the 10 pixels and turning each one red, with a 0.1-second delay between each loop.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 初始代码行导入必要的库并设置程序中其余代码所需的常量。像素的亮度也设置为更舒适的水平。然后脚本开始在后台播放高音调的蜂鸣声。在循环遍历10个像素并在每个循环之间以0.1秒的延迟将每个像素变红。
- en: Once the animation is complete, the tone playback is stopped and a lower tone
    is played. The pixels are once again looped through; however, this time, they
    are shut off one by one. Finally, once the loop ends, the tone playback is stopped.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 动画完成后，音调播放停止并播放较低的音调。像素再次被循环遍历；然而，这一次，它们逐个关闭。最后，一旦循环结束，音调播放停止。
- en: There's more...
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Even though using `start_tone` and `stop_tone` requires more lines of code than
    simply calling `play_tone`, they allow you to do things that wouldn't be possible
    with just `play_tone`. For example, you can use your script to perform other tasks
    while audio is playing in the background.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管使用`start_tone`和`stop_tone`需要比简单调用`play_tone`更多的代码行，但它们允许您做一些仅使用`play_tone`是不可能做到的事情。例如，您可以使用脚本在音频在后台播放时执行其他任务。
- en: In this recipe, the light and sound output were changed together. However, you
    could use the same technique to play a tone until someone presses a certain button.
    Alternatively, you could change the tones being played in reaction to different
    buttons being pressed.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，灯光和声音输出一起改变。但是，您可以使用相同的技术来播放音调，直到有人按下某个按钮。或者，您可以根据按下不同的按钮来改变正在播放的音调。
- en: See also
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 另请参阅
- en: 'You can find out more information using the following references:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下参考资料了解更多信息：
- en: Documentation on the `start_tone` method can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.start_tone](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.start_tone).
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`start_tone`方法的文档可在[https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.start_tone](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.start_tone)找到。
- en: Documentation on the `stop_tone` method can be found at [https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.stop_tone](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.stop_tone).
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关`stop_tone`方法的文档可在[https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.stop_tone](https://circuitpython.readthedocs.io/projects/circuitplayground/en/latest/api.html#adafruit_circuitplayground.express.Express.stop_tone)找到。
