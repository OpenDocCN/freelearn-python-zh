- en: Chapter 1. Hello, World!
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章。你好，世界！
- en: And hello, reader! Let's get started with building some Flask applications.
    Flask is minimalist enough to allow you choice and flexibility; unlike in larger
    frameworks, you choose what you want to do and then manipulate Flask to do your
    bidding, and it is complete enough to work right out of the box.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，读者！让我们开始构建一些Flask应用程序。Flask足够简约，以便为您提供选择和灵活性；与较大的框架不同，您可以选择要做什么，然后操纵Flask来完成您的要求，它足够完整，可以直接使用。
- en: We'll walk together through the development of three web applications; the first
    one is straightforward and will allow you to cut your teeth on Flask and get used
    to the new technologies and terminology while building a nontrivial web application;
    the second will get you started with building a web application that makes use
    of a traditional SQL database; and the final, which has the most features, will
    make use of a **NoSQL** database and a frontend framework to create a useful and
    good-looking web application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将一起开发三个Web应用程序；第一个很简单，将允许您在构建一个非平凡的Web应用程序时熟悉Flask和新技术和术语；第二个将让您开始构建一个使用传统SQL数据库的Web应用程序；最后一个将使用**NoSQL**数据库和前端框架来创建一个有用且外观良好的Web应用程序。
- en: In this chapter, we'll take a brief look at what Flask is and, perhaps more
    importantly, what it isn't. We'll move on to setting up our basic development
    environment as well as a web server, and we'll install a Python package manager
    as well as Flask itself. By the end of the chapter, we'll have the outlines of
    our first app, and, as dictated by age-old tradition, we'll use our new skills
    to display the text "Hello, World!".
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将简要介绍Flask是什么，也许更重要的是，它不是什么。我们将继续设置我们的基本开发环境以及Web服务器，并安装Python包管理器以及Flask本身。到本章结束时，我们将有我们第一个应用程序的轮廓，并且按照古老的传统，我们将使用我们的新技能来显示文本“Hello,
    World!”。
- en: 'In brief, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，我们将涵盖以下主题：
- en: Introducing Flask
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍Flask
- en: Creating our development environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建我们的开发环境
- en: Writing "Hello, World!"
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写“Hello, World！”
- en: Deploying our application to production
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 部署我们的应用程序到生产环境
- en: Introducing Flask
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍Flask
- en: Flask is a micro framework for Python web development. A framework, in the simplest
    terms, is a library or collection of libraries that aims to solve a part of a
    generic problem instead of a complete specific one. When building web applications,
    there are some problems that will always need to be solved, such as routing from
    URLs to resources, inserting dynamic data into HTML, and interacting with an end
    user.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Flask是Python Web开发的微框架。框架，简单来说，是一个库或一组库，旨在解决通用问题的一部分，而不是完全特定的问题。在构建Web应用程序时，总会有一些问题需要解决，例如从URL到资源的路由，将动态数据插入HTML，以及与最终用户交互。
- en: Flask is a micro framework because it implements only core functionality (including
    routing) but leaves more advanced functionality (including authentication and
    database ORMs) to extensions. The result of this is less initial setup for the
    first-time user and more choice and flexibility for the experienced user. This
    is in contrast with "fuller" frameworks, such as **Django**, which dictate their
    own ORM and authentication technologies.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Flask是微框架，因为它只实现了核心功能（包括路由），但将更高级的功能（包括身份验证和数据库ORM）留给了扩展。这样做的结果是对于第一次使用者来说初始设置更少，对于有经验的用户来说有更多的选择和灵活性。这与“更完整”的框架形成对比，例如**Django**，后者规定了自己的ORM和身份验证技术。
- en: As we'll discuss, our Hello World application in Flask can be written in only
    seven lines of code, with the entire application consisting of a single file.
    Does that sound good? Let's get going!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们将讨论的那样，在Flask中，我们的Hello World应用程序只需要七行代码就可以编写，整个应用程序只包含一个文件。听起来不错吗？让我们开始吧！
- en: Creating our development environment
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建我们的开发环境
- en: A development environment consists of all the software that a developer uses
    while building software. For starters, we'll install a Python package manager
    (**pip**) and the Flask package. In this book, we'll show detailed steps for developing
    using **Python 2.7** on a clean installation of **Ubuntu 14.04**, but everything
    should be easy to translate to Windows or OS X.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 开发环境包括开发人员在构建软件时使用的所有软件。首先，我们将安装Python包管理器（**pip**）和Flask包。在本书中，我们将展示在**Ubuntu
    14.04**的干净安装上使用**Python 2.7**进行开发的详细步骤，但是一切都应该很容易转换到Windows或OS X。
- en: Installing pip
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装pip
- en: For our Hello World application, we only need the Python Flask package, but
    we'll install several Python packages throughout the development process of our
    three applications. To manage these packages, we'll use the Python package manager
    pip. If you've developed in Python without a package manager until now, you'll
    love how easy it is to download, install, remove, and update packages using pip.
    If you already use it, then skip to the next step where we'll use it to install
    Flask.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Hello World应用程序，我们只需要Python Flask包，但在我们的三个应用程序的开发过程中，我们将安装几个Python包。为了管理这些包，我们将使用Python包管理器pip。如果您到目前为止一直在Python中开发而没有使用包管理器，您会喜欢使用pip下载、安装、删除和更新包的简便性。如果您已经使用它，那么跳到下一步，我们将使用它来安装Flask。
- en: 'The pip manager is included in Python''s 3.4+ and 2.7.9+ versions. For older
    versions of Python, pip needs to be installed. To install pip on Ubuntu, open
    a terminal and run the following command:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: pip管理器包含在Python的3.4+和2.7.9+版本中。对于较旧版本的Python，需要安装pip。要在Ubuntu上安装pip，请打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To install pip on Windows or OS X, you can download and run the `get-pip.py`
    file from the pip homepage at [https://pip.pypa.io/en/latest/installing/#install-or-upgrade-pip](https://pip.pypa.io/en/latest/installing/#install-or-upgrade-pip).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows或OS X上安装pip，您可以从pip主页[https://pip.pypa.io/en/latest/installing/#install-or-upgrade-pip](https://pip.pypa.io/en/latest/installing/#install-or-upgrade-pip)下载并运行`get-pip.py`文件。
- en: That's it! You can now easily install any Python package you need through pip.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在您可以通过pip轻松安装任何Python包。
- en: Installing Flask
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Flask
- en: 'Installing Flask through pip could not be more straightforward. Simply run
    the following:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过pip安装Flask再简单不过了。只需运行以下命令：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: You might see some warnings in your terminal, but at the end, you should also
    see **Successfully installed Flask**. Now, you can import Flask into a Python
    program just as with any other library.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会在终端中看到一些警告，但最后，您也应该看到**成功安装了Flask**。现在，您可以像导入其他库一样将Flask导入Python程序中。
- en: Note
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you're used to using VirtualEnv for Python development, you can install Flask
    inside a VirtualEnv environment. We will discuss this further in [Appendix](apa.html
    "Appendix A. A Sneak Peek into the Future"), *A Sneak Peek into the Future*.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您习惯于在Python开发中使用VirtualEnv，您可以在VirtualEnv环境中安装Flask。我们将在附录A.未来的一瞥中进一步讨论这个问题。
- en: Writing "Hello, World!"
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写“你好，世界！”
- en: Now, we'll create a basic web page and serve it using Flask's built-in server
    to `localhost`. This means that we'll run a web server on our local machine that
    we can easily make requests to from our local machine. This is very useful for
    development but not suited for production applications. Later on, we'll take a
    look at how to serve Flask web applications using the popular Apache web server.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '现在，我们将创建一个基本的网页，并使用Flask的内置服务器将其提供给`localhost`。这意味着我们将在本地机器上运行一个Web服务器，我们可以轻松地从本地机器上发出请求。这对开发非常有用，但不适用于生产应用程序。稍后，我们将看看如何使用流行的Apache
    Web服务器来提供Flask Web应用程序。 '
- en: Writing the code
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写代码
- en: 'Our application will be a single Python file. Create a directory in your home
    directory called `firstapp` and a file inside this called `hello.py`. In the `hello.py`
    file, we''ll write code to serve a web page comprising the static string "Hello,
    World!". The code looks as follows:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用程序将是一个单独的Python文件。在您的主目录中创建一个名为`firstapp`的目录，然后在其中创建一个名为`hello.py`的文件。在`hello.py`文件中，我们将编写代码来提供一个包含静态字符串“Hello,
    World!”的网页。代码如下所示：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Tip
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for this book from your account at [http://www.packtpub.com](http://www.packtpub.com).
    If you purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载本书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便直接将文件发送到您的电子邮件。
- en: 'You can download the code files by following these steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以按照以下步骤下载代码文件：
- en: Log in or register to our website using your e-mail address and password.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用您的电子邮件地址和密码登录或注册我们的网站。
- en: Hover the mouse pointer on the SUPPORT tab at the top.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将鼠标指针悬停在顶部的SUPPORT标签上。
- en: Click on Code Downloads & Errata.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击“代码下载和勘误”。
- en: Enter the name of the book in the Search box.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在搜索框中输入书名。
- en: Select the book for which you're looking to download the code files.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择您要下载代码文件的书籍。
- en: Choose from the drop-down menu where you purchased this book from.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从下拉菜单中选择您购买此书的地方。
- en: Click on Code Download.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单击“下载代码”。
- en: 'Once the file is downloaded, please make sure that you unzip or extract the
    folder using the latest version of:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 下载文件后，请确保使用最新版本的解压缩或提取文件夹：
- en: WinRAR / 7-Zip for Windows
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: WinRAR / 7-Zip for Windows
- en: Zipeg / iZip / UnRarX for Mac
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zipeg / iZip / UnRarX for Mac
- en: 7-Zip / PeaZip for Linux
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 7-Zip / PeaZip for Linux
- en: Let's break down what this does. The first line should be familiar; it simply
    imports Flask from the package `flask`. The second line creates an instance of
    the Flask object using our module's name as a parameter. Flask uses this to resolve
    resources, and in complex cases, one can use something other than `__name__` here.
    For our purposes, we'll always use `__name__`, which links our module to the Flask
    object.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来分解一下这段代码。第一行应该很熟悉；它只是从`flask`包中导入Flask。第二行使用我们模块的名称作为参数创建了一个Flask对象的实例。Flask使用这个来解析资源，在复杂的情况下，可以在这里使用其他东西而不是`__name__`。对于我们的目的，我们将始终使用`__name__`，这将我们的模块链接到Flask对象。
- en: Line 3 is a Python decorator. Flask uses decorators for URL routing, so this
    line of code means that the function directly below it should be called whenever
    a user visits the main *root* page of our web application (which is defined by
    the single forward slash). If you are not familiar with decorators, these are
    beautiful Python shortcuts that seem a bit like black magic at first. In essence,
    they call a function that takes the function defined under the decorator (in our
    case, `index()`) and returns a modified function.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第3行是一个Python装饰器。Flask使用装饰器进行URL路由，因此这行代码意味着直接下面的函数应该在用户访问我们网页应用程序的主*根*页面时被调用（由单个斜杠定义）。如果您不熟悉装饰器，这些是美丽的Python快捷方式，起初似乎有点像黑魔法。实质上，它们调用一个函数，该函数接受在装饰器下定义的函数（在我们的情况下是`index()`）并返回一个修改后的函数。
- en: The next two lines should also seem familiar. They define a very simple function
    that returns our message. As this function is called by Flask when a user visits
    our application, the return value of this will be what is sent in response to
    a user who requests our landing page.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两行也应该很熟悉。它们定义了一个非常简单的函数，返回我们的消息。由于这个函数是由Flask在用户访问我们的应用程序时调用的，因此这个返回值将是对请求我们的着陆页面的用户发送的响应。
- en: Line 6 is a Python idiom with which you are probably familiar. This is a simple
    conditional statement that evaluates to `True` if our application is run directly.
    It is used to prevent Python scripts from being unintentionally run when they
    are imported into other Python files.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 第6行是您可能熟悉的Python习语。这是一个简单的条件语句，如果我们的应用程序直接运行，则评估为`True`。它用于防止Python脚本在被导入其他Python文件时意外运行。
- en: The final line kicks off Flask's development server on our local machine. We
    set it to run on `port 5000` (we'll use `port 80` for production) and set debug
    to `True`, which will help us see detailed errors directly in our web browser.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行在我们的本地机器上启动了Flask的开发服务器。我们将其设置为在`端口5000`上运行（我们将在生产中使用`端口80`），并将调试设置为`True`，这将帮助我们在网页浏览器中直接查看详细的错误。
- en: Running the code
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行代码
- en: 'To run our development web server, simply fire up a terminal and run the `hello.py`
    file. If you used the same structure outlined in the previous section, the commands
    will be as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行我们的开发Web服务器，只需打开一个终端并运行`hello.py`文件。如果你使用了前一节中概述的相同结构，命令将如下所示：
- en: '[PRE3]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You should get an output similar to that in the following screenshot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该得到类似下面截图中的输出：
- en: '![Running the code](img/B04312_01_01.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![运行代码](img/B04312_01_01.jpg)'
- en: Also, you should see the process continue to run. This is our web server listening
    for requests. So, let's make a request!
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你应该看到进程继续运行。这是我们的网络服务器在等待请求。所以，让我们发出一个请求！
- en: Fire up a web browser—I use Firefox, which comes packaged with Ubuntu—and navigate
    to `localhost:5000`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器——我使用的是Ubuntu自带的Firefox——并导航到`localhost:5000`。
- en: The `localhost` part of the URL is a shortcut to the loopback address, usually
    `127.0.0.1`, which asks your computer to make the web request to itself. The number
    after the colon (`5000`) is the port it should make the request to. By default,
    all HTTP (web) traffic is carried over `port 80`. For now, we'll use `5000` as
    it is unlikely to conflict with any existing services, but we'll change over to
    `port 80` in production, which is conventional, so that you won't have to worry
    about the colon.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: URL中的`localhost`部分是指向回环地址的快捷方式，通常是`127.0.0.1`，它要求你的计算机向自己发出网络请求。冒号后面的数字（`5000`）是它应该发出请求的端口。默认情况下，所有HTTP（网络）流量都通过`端口80`进行传输。现在，我们将使用`5000`，因为它不太可能与任何现有服务冲突，但在生产环境中我们将切换到`端口80`，这是常规的，这样你就不必担心冒号了。
- en: You should see the "Hello, World!" string displayed in your browser as in the
    following screenshot. Congratulations, you've built your first web application
    using Flask!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在浏览器中看到“Hello, World!”字符串显示，就像下面的截图一样。恭喜，你已经使用Flask构建了你的第一个网络应用！
- en: '![Running the code](img/B04312_01_02.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![运行代码](img/B04312_01_02.jpg)'
- en: Deploying our application to production
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将我们的应用部署到生产环境
- en: It's great to have an application that runs, but inherent to the idea of a web
    application is the idea that we want others to be able to use it. As our application
    is Python-based, we are a bit limited in how we can run our application on a web
    server (many traditional web hosts are only configured to run PHP and/or .NET
    applications). Let's consider how to serve Flask applications using a **Virtual
    Private Server** (**VPS**) running Ubuntu Server, Apache, and WSGI.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一个运行的应用程序是很棒的，但作为网络应用程序的概念固有的是我们希望其他人能够使用它。由于我们的应用程序是基于Python的，我们在如何在Web服务器上运行我们的应用程序方面有一些限制（许多传统的Web主机只配置为运行PHP和/或.NET应用程序）。让我们考虑如何使用运行Ubuntu服务器、Apache和WSGI的**虚拟专用服务器**（**VPS**）来提供Flask应用程序。
- en: From this point on, we'll maintain *two* environments. The first is our **development**
    environment, which we just set up and where we'll write code and view its results
    using the Flask server running on `localhost` (as we just did). The second will
    be a **production** environment. This will be a server to which we can deploy
    our web applications and make them accessible to the world. When we install new
    Python libraries or other software on our development environment, we'll normally
    want to mirror our actions in the production environment.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从这一点开始，我们将维护*两个*环境。第一个是我们的**开发**环境，我们刚刚设置好，在这里我们将编写代码并使用在`localhost`上运行的Flask服务器查看其结果（就像我们刚刚做的那样）。第二个将是**生产**环境。这将是一个服务器，我们可以在其中部署我们的网络应用程序，并使它们对世界可访问。当我们在开发环境安装新的Python库或其他软件时，我们通常希望在生产环境中复制我们的操作。
- en: Setting up a Virtual Private Server
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置虚拟专用服务器
- en: Although you could, in theory, host your web application on your local machine
    and allow others to use it, this has some severe limitations. First of all, every
    time you turned off your computer, your app would not be available. Also, your
    computer probably connects to the Internet via an Internet Service Provider (ISP)
    and possibly a wireless router. This means that your IP address is dynamic and
    changes regularly, which makes it difficult for your applications' users to keep
    up! Finally, chances are that you have an asymmetrical connection to the Internet,
    which means that your upload speed is slower than your download speed.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管理论上你可以在本地主机上托管你的网络应用并允许其他人使用，但这有一些严重的限制。首先，每次关闭电脑时，你的应用都将不可用。此外，你的电脑可能通过互联网服务提供商（ISP）和可能的无线路由器连接到互联网。这意味着你的IP地址是动态的，经常会变化，这使得你的应用程序的用户难以跟上！最后，很可能你的互联网连接是不对称的，这意味着你的上传速度比下载速度慢。
- en: Hosting your application on a server solves all of these problems. Before "the
    cloud" became popular, the traditional way to host a web application was to buy
    a physical server and find a data center to host it. These days, things are far
    simpler. In a few minutes, you can fire up a virtual server, which to you seems
    just like a physical server—you can log in to it, configure it, and enjoy full
    control over it—but it is actually just a virtual "piece" of a machine owned and
    controlled by a cloud provider.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上托管你的应用程序可以解决所有这些问题。在“云”变得流行之前，托管网络应用的传统方式是购买一台物理服务器并找到一个数据中心来托管它。如今，情况简单得多。在几分钟内，你可以启动一个虚拟服务器，对你来说它看起来就像一台物理服务器——你可以登录、配置它，并完全控制它——但实际上它只是云提供商拥有和控制的一台虚拟“片”。
- en: At the time of writing, major players in the cloud provider field include Amazon
    Web Services, Microsoft Azure, Google Cloud Compute, and Digital Ocean. All of
    these companies allow you to hire a virtual server or servers upon paying by the
    hour. If you are learning Flask as a hobby and are unwilling to pay anyone to
    host your web applications, you'll probably find a free trial at one of the providers
    quite easily. The smallest offering by any provider is fine to host all the applications
    that we'll run.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本文时，云服务提供商领域的主要参与者包括亚马逊网络服务、微软Azure、谷歌云计算和Digital Ocean。所有这些公司都允许你按小时支付来租用一个虚拟服务器或多台虚拟服务器。如果你是作为爱好学习Flask，并且不愿意支付任何人来托管你的网络应用程序，你可能会很容易地在这些提供商中找到一个免费试用。任何提供商的最小服务都足以托管我们将运行的所有应用程序。
- en: 'Select one of the preceding providers or another of your choosing. If you''ve
    never done anything similar before, Digital Ocean is often cited to have the simplest
    process of signing up and creating a new machine. Once you select a provider,
    you should be able to follow their respective instructions to fire up a VPS that
    runs Ubuntu Server 14.04 and SSH into it. You''ll have full control over the machine
    with one slight difference: you won''t have a display or a mouse.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 选择前述提供商之一或您选择的其他提供商。如果您以前从未做过类似的事情，Digital Ocean通常被认为是注册并创建新机器的最简单过程。选择提供商后，您应该能够按照其各自的说明启动运行Ubuntu
    Server 14.04并通过SSH连接到它的VPS。您将完全控制该机器，只有一个细微的区别：您将没有显示器或鼠标。
- en: 'You''ll enter commands on your local terminal, which will in fact be run on
    the remote machine. Detailed instructions on how to connect to your VPS will be
    given by the provider, but if you use Ubuntu, it should be as simple as running
    the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在本地终端上输入命令，实际上将在远程机器上运行。有关如何连接到您的VPS的详细说明将由提供商提供，但如果您使用Ubuntu，只需运行以下命令即可：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, if you set it up with a public-private key authentication, where
    `yourkey.pem` is the full path to your private key file, here''s the command to
    run:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，如果您使用公共-私有密钥身份验证进行设置，其中`yourkey.pem`是您的私钥文件的完整路径，以下是要运行的命令：
- en: '[PRE5]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Here, `user` is the default user on the VPS, and `yourkey` is the name of your
    private key file.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，`user`是VPS上的默认用户，`yourkey`是您的私钥文件的名称。
- en: '**SSH from other operating systems:**'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**其他操作系统的SSH：**'
- en: Tip
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: SSH from OS X should be the same as Ubuntu, but if you're using Windows, you'll
    have to download PuTTY. Refer to [http://www.putty.org/](http://www.putty.org/)
    to download and for full usage instructions. Note that if you use key files for
    authentication, you'll have to convert them to a format compatible with PuTTY.
    A conversion tool can also be found on the PuTTY website.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 从OS X进行SSH应该与Ubuntu相同，但如果您使用Windows，您将需要下载PuTTY。请参阅[http://www.putty.org/](http://www.putty.org/)进行下载和完整的使用说明。请注意，如果您使用密钥文件进行身份验证，您将需要将其转换为与PuTTY兼容的格式。在PuTTY网站上也可以找到转换工具。
- en: 'Once we connect to the VPS, installing Flask is the same process as it was
    previously:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们连接到VPS，安装Flask的过程与以前相同：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To install our web server, Apache, and WSGI, we will run the following:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装我们的Web服务器Apache和WSGI，我们将运行以下命令：
- en: '[PRE7]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Apache is our web server. It will listen for web requests (which are generated
    by our users visiting our web application using their browsers) and hand these
    requests over to our Flask application. As our application is in Python, we also
    need **WSGI (Web Server Gateway Interface)**.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Apache是我们的Web服务器。它将监听Web请求（由我们的用户使用他们的浏览器访问我们的Web应用程序生成）并将这些请求交给我们的Flask应用程序。由于我们的应用程序是用Python编写的，我们还需要**WSGI（Web服务器网关接口）**。
- en: 'This is a common interface between web servers and Python applications, which
    allows Apache to talk to Flask and vice versa. An overview of the architecture
    can be seen in the following diagram:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Web服务器和Python应用程序之间的常见接口，它允许Apache与Flask进行通信，反之亦然。架构概述可以在以下图表中看到：
- en: '![Setting up a Virtual Private Server](img/B04312_01_03.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![设置虚拟专用服务器](img/B04312_01_03.jpg)'
- en: Configuring our server
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置我们的服务器
- en: 'Now that we''ve installed Apache, we can see our first results. You''re probably
    used to visiting websites using a URL, such as `http://example.com`. We''ll access
    our web applications using the IP address of our VPS directly. Your VPS should
    have a static public address. Static means that it doesn''t change periodically,
    and public means that it is globally unique. When you connected to the VPS via
    SSH, you probably used the public IP to do this. If you can''t find it, run the
    following on your VPS and you should see an `inet addr` section in the output,
    which contains your public IP:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了Apache，我们可以看到我们的第一个结果。您可能习惯于使用URL访问网站，例如`http://example.com`。我们将直接使用VPS的IP地址访问我们的Web应用程序。您的VPS应该有一个静态的公共地址。静态意味着它不会定期更改，公共意味着它是全局唯一的。当您通过SSH连接到VPS时，您可能使用了公共IP地址。如果找不到它，请在VPS上运行以下命令，您应该会在输出中看到一个包含您的公共IP的`inet
    addr`部分：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The IP address should look similar to `123.456.78.9`. Enter your IP address
    into your browser''s address bar, and you should see a page saying "**Apache2
    Ubuntu Default Page: It Works!**" or something similar, as in the following screenshot:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: IP地址应该类似于`123.456.78.9`。将您的IP地址输入到浏览器的地址栏中，您应该会看到一个页面，上面写着“**Apache2 Ubuntu默认页面：It
    Works!**”或类似的内容，如下面的屏幕截图所示：
- en: '![Configuring our server](img/B04312_01_04.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![配置我们的服务器](img/B04312_01_04.jpg)'
- en: 'This means that we can now serve web content to anyone with an Internet connection!
    However, we still have to:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们现在可以向任何有互联网连接的人提供Web内容！但是，我们仍然需要：
- en: Copy our code to the VPS
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将我们的代码复制到VPS
- en: Link up Apache and Flask
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 连接Apache和Flask
- en: Configure Apache to serve our Flask application
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置Apache以提供我们的Flask应用程序
- en: For the first step, we'll set up a Git repository on our local machine and clone
    the repository to the VPS. For the second step, we'll use the WSGI module that
    we installed with Apache. Finally, we'll take a look at how to write a virtual
    host to have Apache serve our Flask application by default.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们将在本地机器上设置一个Git存储库，并将存储库克隆到VPS。在第二步中，我们将使用与Apache一起安装的WSGI模块。最后，我们将看一下如何编写虚拟主机，使Apache默认提供我们的Flask应用程序。
- en: Installing and using Git
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装和使用Git
- en: Git is a version control system. A version control system, among other things,
    saves multiple versions of our code base automatically. This is great to undo
    accidental changes or even deletions; we can simply revert to a previous version
    of our code. It also includes lots of functionality for distributed development—that
    is, many developers working on a single project. We'll use it mainly for its backup
    and deployment features, however.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Git是一个版本控制系统。版本控制系统除其他功能外，还会自动保存我们代码库的多个版本。这对于撤消意外更改甚至删除非常有用；我们可以简单地恢复到我们代码的以前版本。它还包括许多分布式开发的功能，即许多开发人员在一个项目上工作。然而，我们主要将其用于备份和部署功能。
- en: 'To install Git on your local machine and VPS, run the following commands on
    each:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本地计算机和VPS上安装Git，请在每台计算机上运行以下命令：
- en: '[PRE9]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Make sure you're comfortable with the difference between running commands on
    your own machine using the terminal and on your server through the SSH connection.
    In many cases, we'll need to run the same commands twice—once for each environment.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您对使用终端在自己的计算机上运行命令和通过SSH连接在服务器上运行命令之间的区别感到满意。在许多情况下，我们需要两次运行相同的命令 - 分别针对每个环境运行一次。
- en: Now that you have the software, you need a place to host your Git repositories
    or "repos". Two popular and free Git hosting services are GitHub ([http://github.com](http://github.com))
    and Bitbucket ([http://bitbucket.org](http://bitbucket.org)). Head over to one
    of them, create an account, and create a new repository by following the instructions
    that they provide. When given the option to give your repository a name, call
    it `firstapp` to match the name of the directory that we will use for our code
    base. Once you create a new repository, you should be given a unique URL to your
    repository. Take note of this as we'll use it to push our **Hello, World!** application
    using `git` and then deploy it to our VPS.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经拥有了软件，您需要一个托管Git存储库或“repos”的地方。两个受欢迎且免费的Git托管服务是GitHub（[http://github.com](http://github.com)）和Bitbucket（[http://bitbucket.org](http://bitbucket.org)）。前往其中一个，创建一个帐户，并按照提供的说明创建一个新存储库。在给存储库命名的选项时，将其命名为`firstapp`，以匹配我们将用于代码库的目录的名称。创建新存储库后，您应该会得到一个唯一的存储库URL。请记下这一点，因为我们将使用它来使用`git`推送我们的**Hello,
    World!**应用程序，然后部署到我们的VPS。
- en: 'On your local machine, open a terminal and change the directory to the Flask
    application. Initialize a new repository and link it to your remote Git repository
    via the following commands:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地计算机上，打开终端并将目录更改为Flask应用程序。通过以下命令初始化一个新存储库，并将其链接到您的远程Git存储库：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Tell `git` who you are, to allow it to automatically add metadata to your code
    changes, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 告诉`git`您是谁，以便它可以自动向您的代码更改添加元数据，如下所示：
- en: '[PRE11]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Git allows you full control over which files are part of your repository and
    which aren''t. Even though we initialized the Git repo in our `firstapp` directory,
    our repo currently contains no files. Add our application to the repo, commit,
    and then push it, as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: Git允许您完全控制哪些文件是存储库的一部分，哪些不是。即使我们在`firstapp`目录中初始化了Git存储库，我们的存储库目前不包含任何文件。按照以下步骤将我们的应用程序添加到存储库中，提交，然后推送：
- en: '[PRE12]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: These are the main Git commands that we'll use throughout this book, so let's
    take a brief look at what each does. The `add` command adds new or modified files
    to our repository. This tells Git which files are actually part of our project.
    Think of the `commit` command as taking a snapshot of our project in its current
    state. This snapshot is saved on our local machine. It is good to make a new `commit`
    with any major change to the code base as we can easily revert to previous `commits`
    if a later `commit` breaks our application. Finally, the `push` command pushes
    our local changes to the remote Git server. This is good for backup, and it will
    also allow us to fetch the changes on our VPS, thus keeping the code base on our
    local machine and that on our VPS in sync.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们将在本书中使用的主要Git命令，因此让我们简要了解每个命令的作用。`add`命令将新文件或修改的文件添加到我们的存储库中。这告诉Git哪些文件实际上是我们项目的一部分。将`commit`命令视为对我们项目当前状态的快照。此快照保存在我们的本地计算机上。对代码库进行重大更改时，最好进行新的`commit`，因为我们可以轻松地恢复到以前的`commits`，如果后来的`commit`破坏了我们的应用程序。最后，`push`命令将我们的本地更改推送到远程Git服务器。这对备份很有用，并且还将允许我们在我们的VPS上获取更改，从而使我们的本地计算机上的代码库与我们的VPS上的代码库保持同步。
- en: 'Now, SSH into your VPS again and get a copy of our code, as follows:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，再次SSH到您的VPS并获取我们的代码，如下所示：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Note
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Where the `<your-git-url>` part of the above command is actually a placeholder
    for the URL to your Git repository.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令中的`<your-git-url>`部分实际上是对Git存储库的URL的占位符。
- en: 'If you get a `permission denied` error on trying to clone the Git repository,
    you might need to take ownership of the `/var/www` directory for the Linux user
    that you''re using. If you logged into the server with `tom@123.456.789.123`,
    you can run the following command, which will give your user ownership of `/var/www`
    and allow you to clone the Git repository into it. Again `tom` is the placeholder
    used in the following case:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果尝试克隆Git存储库时出现`permission denied`错误，则可能需要为您正在使用的Linux用户的`/var/www`目录所有权。如果您使用`tom@123.456.789.123`登录到服务器，可以运行以下命令，这将使您的用户拥有`/var/www`的所有权，并允许您将Git存储库克隆到其中。再次，`tom`是以下情况中使用的占位符：
- en: '[PRE14]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you used `firstapp` as a name for your remote repository, this should create
    a new directory called `firstapp`. Let''s verify that our code is there using
    the following:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将`firstapp`用作远程存储库的名称，则应创建一个名为`firstapp`的新目录。使用以下命令验证我们的代码是否存在：
- en: '[PRE15]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You should see your `hello.py` file. Now, we need to configure Apache to use
    WSGI.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到您的`hello.py`文件。现在，我们需要配置Apache以使用WSGI。
- en: Serving our Flask app with WSGI
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用WSGI为我们的Flask应用提供服务
- en: First, we'll create a very straightforward `.wsgi` file in our application directory.
    Then, we'll create an Apache configuration file in the directory where Apache
    looks for available sites.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在我们的应用程序目录中创建一个非常简单的`.wsgi`文件。然后，在Apache查找可用站点的目录中创建一个Apache配置文件。
- en: The only slightly tricky part about these two steps is that we'll create the
    files directly on our VPS, and as our VPS does not have a display, this means
    that we have to use command-line interface text editors. Of course, we could create
    the files locally and then transfer them to our VPS as we did for our code base,
    but for small changes to configuration files, this is often more effort than it's
    worth. Using a text editor without a mouse takes a bit of getting used to, but
    it's a good skill to learn. The default text editor on Ubuntu is Nano, and the
    other popular choices are vi or Vim. Some people use Emacs. If you already have
    a favorite, go with it. If not, we'll use Nano for the examples in this book (it
    is already installed and arguably the simplest to use). However, if you want to
    go the extra mile, I recommend learning to use Vim.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个步骤中唯一稍微棘手的部分是，我们将直接在我们的VPS上创建文件，而我们的VPS没有显示器，这意味着我们必须使用命令行界面文本编辑器。当然，我们可以像为我们的代码库做的那样，将文件本地创建然后传输到我们的VPS，但是对于对配置文件进行小的更改，这往往比值得的努力更多。使用没有鼠标的文本编辑器需要一点时间来适应，但这是一个很好的技能。Ubuntu上的默认文本编辑器是Nano，其他流行的选择是vi或Vim。有些人使用Emacs。如果您已经有喜欢的，就用它。如果没有，我们将在本书的示例中使用Nano（它已经安装并且可以说是最简单的）。但是，如果您想要更上一层楼，我建议学习使用Vim。
- en: 'Assuming you''re still connected to your VPS and have navigated to the `/var/www/firstapp`
    directory as in the most recent steps, run the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您仍然连接到您的VPS，并已经像最近的步骤一样导航到`/var/www/firstapp`目录，运行以下命令：
- en: '[PRE16]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This creates the `hello.wsgi` file, which you can now edit through Nano. Type
    the following:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建`hello.wsgi`文件，您现在可以通过Nano进行编辑。输入以下内容：
- en: '[PRE17]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This is simply Python syntax, which patches our application into the PATH system
    so that Apache can find it through WSGI. We will then import `app` (we named this
    in our `hello.py` app with the `app = Flask(__name__)` line) into the namespace.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是Python语法，它将我们的应用程序补丁到PATH系统中，以便Apache可以通过WSGI找到它。然后我们将`app`（我们在`hello.py`应用程序中使用`app
    = Flask(__name__)`行命名）导入命名空间。
- en: Hit *Ctrl* + *X* to exit Nano and enter *Y* when prompted to save the changes.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *X*退出Nano，并在提示时输入*Y*以保存更改。
- en: 'Now, we''ll create an Apache configuration file that points to the `.wsgi`
    file we just created, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个Apache配置文件，指向我们刚刚创建的`.wsgi`文件，如下所示：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you run into permission issues while editing or saving files, you may need
    to take ownership of the `apache2` directory too. Run the following command, substituting
    the username for your Linux user:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在编辑或保存文件时遇到权限问题，您可能还需要取得`apache2`目录的所有权。运行以下命令，将用户名替换为您的Linux用户：
- en: '`sudo chown –R tom /etc/apache2`'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`sudo chown –R tom /etc/apache2`'
- en: 'In this file, we''ll create a configuration for an Apache virtual host. This
    will allow us to serve multiple sites from a single server, which will be useful
    later when we want to serve other applications using our single VPS. In Nano,
    enter the following configuration:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，我们将为Apache虚拟主机创建一个配置。这将允许我们从单个服务器上提供多个站点，这在以后想要使用我们的单个VPS来提供其他应用程序时将非常有用。在Nano中，输入以下配置：
- en: '[PRE19]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This might look quite complicated, but it's actually very straightforward. We
    will create a `virtualhost` and specify our domain name, where our `.wsgi` script
    is, the name of our application, and who is allowed to access it. We'll discuss
    domain names in the final chapter, but for now, you can just leave it as `example.com`
    because we'll access our application by its IP address.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来很复杂，但实际上非常简单。我们将创建一个`virtualhost`并指定我们的域名，我们的`.wsgi`脚本所在的位置，我们的应用程序的名称以及谁被允许访问它。我们将在最后一章讨论域名，但现在，您可以将其保留为`example.com`，因为我们将通过其IP地址访问我们的应用程序。
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you get stuck on this step, the Flask website has a great resource on configuring
    and troubleshooting Apache configuration. You can find it at [http://flask.pocoo.org/docs/0.10/deploying/mod_wsgi/](http://flask.pocoo.org/docs/0.10/deploying/mod_wsgi/).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在这一步遇到问题，Flask网站上有一个关于配置和故障排除Apache配置的很好的资源。您可以在[http://flask.pocoo.org/docs/0.10/deploying/mod_wsgi/](http://flask.pocoo.org/docs/0.10/deploying/mod_wsgi/)找到它。
- en: Hit *Ctrl* + *X* and enter *Y* when prompted again to save and exit the file.
    Now, we need to enable the configuration and set it as our default site.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 按*Ctrl* + *X*，然后在再次提示时输入*Y*以保存并退出文件。现在，我们需要启用配置并将其设置为我们的默认站点。
- en: Configuring Apache to serve our Flask application
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 配置Apache以提供我们的Flask应用程序
- en: 'Apache sites work as follows: there is a `sites-available` directory (where
    we created the new virtual host configuration file) and a `sites-enabled` directory,
    which contains shortcuts to all the configuration files that we want to be active.
    By default, you''ll see a file in the `sites-available` directory named `000-default.conf`.
    This is the reason that we saw a default **It works** Apache page when we first
    installed Apache. We don''t want this anymore; instead, we want to use our application
    as the default site. Therefore, we''ll disable the default Apache site, enable
    our own, and then restart Apache for the changes to take effect. Run these commands
    to do this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Apache站点的工作方式如下：有一个`sites-available`目录（我们在其中创建了新的虚拟主机配置文件）和一个`sites-enabled`目录，其中包含我们希望处于活动状态的所有配置文件的快捷方式。默认情况下，您会在`sites-available`目录中看到一个名为`000-default.conf`的文件。这就是我们第一次安装Apache时看到默认的**It
    works** Apache页面的原因。我们不再想要这个了；相反，我们希望使用我们的应用程序作为默认站点。因此，我们将禁用默认的Apache站点，启用我们自己的站点，然后重新启动Apache以使更改生效。运行以下命令来执行此操作：
- en: '[PRE20]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Note
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The required Apache configuration and commands can vary quite a bit based on
    the platform you're using. If you use Ubuntu Server as recommended, the preceding
    should all work smoothly. If not, you may need to read up a bit on how to configure
    Apache for your specific platform.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 所需的Apache配置和命令可能会根据您使用的平台而有所不同。如果您使用推荐的Ubuntu服务器，上述内容应该都能顺利工作。如果不是，您可能需要稍微了解一下如何为您的特定平台配置Apache。
- en: You should note `reloading web server apache2` in the output. If errors are
    displayed, then you probably misconfigured something in the preceding command.
    If this is the case, read the error message carefully and go back over the previous
    steps to take a look at why things didn't work as expected.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意输出中的`重新加载web服务器apache2`。如果显示错误，则可能在前面的命令中配置错误。如果是这种情况，请仔细阅读错误消息，并返回查看之前的步骤，看看为什么事情没有按预期工作。
- en: To test that everything is working, open a web browser on your local machine
    and type your IP address into the address bar again. You should see **Hello, World!**
    displayed in your browser instead of the default Apache page that we saw before.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试一切是否正常工作，请在本地机器上的Web浏览器中打开并再次在地址栏中键入您的IP地址。您应该在浏览器中看到**Hello, World!**而不是之前看到的默认Apache页面。
- en: 'If you get **Error 500** instead, it means that our application fell over for
    some reason. Fear not; it''s better that you get used to dealing with this error
    now, when the fix will probably be simple, than later on, when we''ve added more
    components that could break or be misconfigured. To find out what went wrong,
    run the following command on your VPS:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您收到**错误500**，这意味着我们的应用程序出现了一些问题。不要担心；最好现在就习惯处理这个错误，因为修复可能会很简单，而不是以后，当我们添加了更多可能出错或配置错误的组件时。要找出出了什么问题，运行以下命令在您的VPS上：
- en: '[PRE21]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `tail` command simply outputs the last several lines of the file passed
    as an argument. The `-f` is for follow, which means that the output will be updated
    if the file changes. If you can't immediately work out which lines are indicative
    of the error we're looking for, visit the site in your web browser on your local
    machine again, and you'll see the output from the `tail` command be updated accordingly.
    The following screenshot shows the output from the `tail` command when there are
    no errors; however, if anything goes wrong, you'll see the error output printed
    among all the info messages.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`tail`命令只是输出作为参数传递的文件的最后几行。`-f`是用于跟踪，这意味着如果文件更改，输出将被更新。如果您无法立即确定哪些行是我们正在寻找的错误的指示，再次在本地机器上的Web浏览器中访问该站点，您将看到`tail`命令的输出相应地更新。以下截图显示了`tail`命令在没有错误时的输出；但是，如果出了任何问题，您将看到错误输出打印在所有信息消息中。'
- en: '![Configuring Apache to serve our Flask application](img/B04312_01_05.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![配置Apache以提供我们的Flask应用程序](img/B04312_01_05.jpg)'
- en: Some possible tripping points are incorrectly configured WSGI and Apache files
    (make sure that your `WSGIDaemonProcess` and `daemon name` match, for example)
    or incorrectly configured Python (you may forget to install Flask on your VPS).
    If you can't figure out what the error message means, an Internet search for the
    message (removing the error-specific parts of your app, such as names and paths)
    will usually point you in the right direction. Failing this, there are strong
    and very friendly Flask and WSGI communities on Stack Overflow and Google Groups,
    and there's normally someone willing to help beginners. Remember that if you're
    having a problem and can't find an existing solution online, don't feel bad for
    asking; you'll help countless people facing issues similar to yours.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 一些可能的绊脚石是错误配置的WSGI和Apache文件（例如，确保您的`WSGIDaemonProcess`和`daemon name`匹配）或错误配置的Python（您可能忘记在VPS上安装Flask）。如果您无法弄清楚错误消息的含义，互联网搜索消息（删除应用程序的错误特定部分，如名称和路径）通常会指引您朝正确的方向。如果失败，Stack
    Overflow和Google Groups上有强大而友好的Flask和WSGI社区，通常会有人愿意帮助初学者。请记住，如果您遇到问题并且找不到现有的解决方案，请不要感到难过；您将帮助无数面临类似问题的人。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We got through quite a lot of material in this first chapter! We did some initial
    setup and house-keeping and then wrote our first web application using Flask.
    We saw this run locally and then discussed how to use Git to copy our code to
    a server. We configured our server to serve our application to the public; however,
    our application is merely a static page that prints the "Hello, World!" string
    to whoever visits our page. This is not useful to many people and could be achieved
    more simply using a static HTML page. However, with the extra effort we put in,
    we now have all the power of Python behind our application; we're just not using
    it yet!
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们涉及了相当多的材料！我们进行了一些初始设置和日常工作，然后使用Flask编写了我们的第一个Web应用程序。我们看到这在本地运行，然后讨论了如何使用Git将我们的代码复制到服务器。我们配置了服务器以向公众提供我们的应用程序；但是，我们的应用程序只是一个静态页面，向访问我们页面的人打印“Hello,
    World!”字符串。这对许多人来说并不有用，并且可以使用静态HTML页面更简单地实现。但是，通过我们付出的额外努力，现在我们的应用程序背后拥有Python的所有功能；我们只是还没有使用它！
- en: In the next chapter, we'll discover how to take advantage of Python to make
    our web applications more useful!
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将发现如何利用Python使我们的Web应用程序更有用！
