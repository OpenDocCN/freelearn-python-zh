- en: Chapter 10. Extending Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。扩展Django
- en: 'It''s been a long journey so far, and we''ve dealt with lots of code and basic
    concepts related to Django''s functionalities. In this chapter, we will discuss
    Django a little more, but we will discuss, in brief, different parameters, such
    as custom tags, filters, sub-frameworks, message system, and so on. The following
    are the topics that we will deal with in this chapter:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经走了很长的路，涉及了大量与Django功能相关的代码和基本概念。在本章中，我们将更多地讨论Django，但我们将简要讨论不同的参数，例如自定义标签、过滤器、子框架、消息系统等。以下是本章将涉及的主题：
- en: Custom template tags and filters
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义模板标签和过滤器
- en: Class-based generic views
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于类的通用视图
- en: Contributed sub-frameworks
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 贡献的子框架
- en: A message system
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息系统
- en: The subscription system
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 订阅系统
- en: User scores
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户分数
- en: Custom template tags and filters
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义模板标签和过滤器
- en: The Django template system comes with many template tags and filters that make
    writing templates an easy and flexible job. Sometimes, however, you may wish to
    extend the template system with your own tags and filters. This usually happens
    when you find yourself repeating the same tag structure many times, when you wish
    to wrap the structure in a single tag, or even when there is a filter that you
    want to add to the template system.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Django模板系统配备了许多模板标签和过滤器，使编写模板变得简单灵活。但是，有时您可能希望使用自己的标签和过滤器扩展模板系统。当您发现自己多次重复相同的标签结构时，希望将结构包装在单个标签中，甚至希望添加到模板系统中的过滤器时，通常会发生这种情况。
- en: 'Guess what? Django already allows you to do this, and it is quite easy too!
    You basically add a new package to your application called **templatetags** and
    put modules that contain tags and filters in it. Let''s learn about this by adding
    a filter that capitalizes a string. Add a `templatetags` folder to the `mytweets`
    parent folder and put an empty file called `__init__.py` in it, so that Python
    treats the folder as a package. Now, create a module called `mytweet_filters`
    in it. We are going to write our filter in this module. Here is an illustration
    of the directory structure:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 猜猜？Django已经允许您这样做，而且这也很容易！您基本上只需向应用程序添加一个名为**templatetags**的新包，并将包含标签和过滤器的模块放入其中。让我们通过添加一个将字符串大写的过滤器来学习这一点。在`mytweets`父文件夹中添加一个`templatetags`文件夹，并在其中放置一个名为`__init__.py`的空文件，以便Python将该文件夹视为包。现在，在其中创建一个名为`mytweet_filters`的模块。我们将在此模块中编写我们的过滤器。以下是目录结构的示例：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now, add the following code to the `mytweet_filters.py` file:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码添加到`mytweet_filters.py`文件中：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `register` variable is an object that can be used to introduce new tags
    and filters to the template system. Here, we used the `register.filter` decorator
    to add the capitalize function as a filter.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`register`变量是一个对象，可用于向模板系统引入新的标签和过滤器。在这里，我们使用`register.filter`装饰器将capitalize函数添加为过滤器。'
- en: 'To use the new filter from within a template, put the following line at the
    beginning of your template file:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要在模板中使用新的过滤器，请在模板文件的开头放入以下行：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Then, you can use the new filter just like any other filter offered by Django:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以像使用Django提供的任何其他过滤器一样使用新的过滤器：
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Adding custom template tags works in a similar way with filters. Basically,
    you define methods to process the tag and then register the tag to make it available
    for templates. The process is slightly more involved because tags can be more
    complicated than filters. Further information about custom template tags is available
    in the Django online documentation.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 添加自定义模板标签的工作方式与过滤器类似。基本上，您定义方法来处理标签，然后注册标签以使其可用于模板。这个过程稍微复杂一些，因为标签可能比过滤器更复杂。有关自定义模板标签的更多信息，请参阅Django在线文档。
- en: 'While writing a custom filter, you have to take care of Django''s auto-escaping
    behavior with the filter. There are three type of strings that can be passed to
    the filter:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写自定义过滤器时，您必须注意Django的自动转义行为。可以传递给过滤器的字符串有三种类型：
- en: '**Raw string**: This string is prepared either by the `str` command or is formed
    with the unicode. They are automatically escaped if auto-escaping is enabled.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原始字符串**：此字符串是通过`str`命令准备的，或者是用unicode形成的。如果启用了自动转义，它们将自动转义。'
- en: '**Safe strings**: These strings are the strings that are marked safe from further
    escaping. They don''t need any further escaping. To mark the output as a safe
    string, use the `django.utils.safestring.mark_safe()` module.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全字符串**：这些字符串是标记为免受进一步转义的字符串。它们不需要进一步转义。要将输出标记为安全字符串，请使用`django.utils.safestring.mark_safe()`模块。'
- en: '**Strings marked as "needing escaping"**: As the name suggests, they always
    need to escape.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记为“需要转义”的字符串**：顾名思义，它们始终需要转义。'
- en: Class-based generic views
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于类的通用视图
- en: While working with Django, you will note that there are certain types of views
    that are always needed regardless of the project that you are working on. For
    this reason, Django comes with a set of views that can be used in any project.
    These views are called **generic views**.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Django时，您会注意到无论您正在处理哪个项目，总是需要某些类型的视图。因此，Django配备了一组可在任何项目中使用的视图。这些视图称为**通用视图**。
- en: 'Django offers generic views for the following purposes:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Django为以下目的提供了通用视图：
- en: To create simple views for tasks, such as redirecting to another URL or rendering
    a template
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为任务创建简单的视图，例如重定向到另一个URL或呈现模板
- en: Listing and forming detail views to display objects from a data model - these
    views are similar to how the admin page displays lists and detail pages for data
    models
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出和形成详细视图以显示数据模型中的对象-这些视图类似于管理页面显示数据模型的列表和详细页面
- en: To generate date-based archive pages; these can be particularly useful for blogs
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成基于日期的存档页面；这对博客特别有用
- en: To create, edit, and delete objects in data models
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建，编辑和删除数据模型中的对象
- en: Django's class-based view can be configured by defining subclasses, or by passing
    arguments directly in the URL conf.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Django的基于类的视图可以通过定义子类或直接在URL配置中传递参数来配置。
- en: 'The subclasses are full of conventions that remove the hassle to rewrite templates
    of common situations. When you use the subclass, you can actually override the
    attribute or methods of the main class by providing a new value:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 子类充满了消除重写常见情况模板的约定。当您使用子类时，实际上可以通过提供新值来覆盖主类的属性或方法：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will also add its entry to the `urls.py` file to get it redirected:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将在`urls.py`文件中添加其条目以进行重定向：
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Interestingly, we can achieve the same with the on file change, and in a few
    lines, by adding the following to the `urls.py` file:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，我们可以通过文件更改来实现相同的效果，并且只需在`urls.py`文件中添加以下内容即可：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Contributed sub-frameworks
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 贡献的子框架
- en: 'The `django.contrib` package contains Django''s standard library. We used the
    following sub-frameworks from this package in the earlier chapters in this book:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib`包含Django的标准库。我们在本书的前几章中使用了该软件包中的以下子框架：'
- en: '`admin`: This is the Django admin interface'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`: 这是Django管理界面'
- en: '`auth`: This is the user authentication system'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth`: 这是用户认证系统'
- en: '`sessions`: This is the Django session framework'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sessions`: 这是Django会话框架'
- en: '`syndication`: This is the feed generation framework'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`syndication`: 这是提要生成框架'
- en: These sub-frameworks greatly simplify our work irrespective of whether we create
    registration and authentication facilities, build an administration page, or provide
    feeds for our content. The `django.contrib` package is a very important part of
    Django. Knowing its subpackages and how to use them will save you a lot of time
    and effort.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些子框架极大地简化了我们的工作，无论我们是创建注册和认证功能，构建管理页面，还是为我们的内容提供提要。`django.contrib`包是Django的一个非常重要的部分。了解其子包及如何使用它们将为您节省大量时间和精力。
- en: This section will provide you a brief introduction of other frameworks in this
    package. You won't get into the details of how to use each framework, but you
    will learn enough to know when to use the framework. Once you want to use a framework
    in a project, you can read the online documentation to learn more about it.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将为您提供有关此软件包中其他框架的简要介绍。您不会深入了解如何使用每个框架，但您将学到足够的知识以了解何时使用框架。一旦您想在项目中使用框架，您可以阅读在线文档以了解更多信息。
- en: Flatpages
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Flatpages
- en: 'Web applications may contain pages that are static in nature. For example,
    your website may include a set of help pages that rarely change. Django provides
    an application called **flatpages** to serve static pages. The application is
    pretty simple; it provides you a data model to store various bits of information
    about each page, including the following:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Web应用程序可能包含静态页面。例如，您的网站可能包括一组很少更改的帮助页面。Django提供了一个名为**flatpages**的应用程序来提供静态页面。该应用程序非常简单；它为您提供了一个数据模型，用于存储有关每个页面的各种信息，包括以下内容：
- en: The URL
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URL
- en: The title
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标题
- en: The content
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容
- en: The template name
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模板名称
- en: Whether registration is required to view the page
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看页面是否需要注册
- en: To use the application, you can simply enable it in the `INSTALLED_APPS` variable
    in the `settings.py` file and add its middleware to the `MIDDLEWARE_CLASSES` variable.
    After that, you can store and manage your static pages using a data model provided
    by the flatpages application.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用该应用程序，您只需在`settings.py`文件中的`INSTALLED_APPS`变量中启用它，并将其中间件添加到`MIDDLEWARE_CLASSES`变量中。之后，您可以使用flatpages应用程序提供的数据模型存储和管理静态页面。
- en: Humanize
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 人性化
- en: The **humanize** application offers a set of filters to add a human touch to
    your pages.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**humanize**应用程序提供了一组过滤器，以为您的页面增添人性化的触感。'
- en: 'Here is a list of the available filters:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可用过滤器的列表：
- en: '**apnumber**: For numbers 1-9, this returns the number spelled out. Otherwise,
    it returns the number. In other words, 1 becomes ''one'', 9 becomes ''nine'',
    and so on, whereas 10 remains 10.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**apnumber**: 对于1-9的数字，它返回拼写的数字。否则，它返回数字。换句话说，1变成''one''，9变成''nine''，以此类推，而10保持为10。'
- en: '**intcomma**: This takes an integer and converts it into a string with a comma,
    for example:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**intcomma**: 这接受一个整数并将其转换为带有逗号的字符串，例如：'
- en: '[PRE7]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '**intword**: This converts an integer into an easy-to-read form, for example:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**intword**: 这将整数转换为易于阅读的形式，例如：'
- en: 1000000 becomes 1.0 million.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 1000000变成1.0百万。
- en: '[PRE8]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '**naturalday**: Based on the range the date is in, if a given date is in the
    *(+1,0,-1)* range, this shows the date as "tomorrow", "today", and "yesterday"
    respectively, for example, (if today is January 26, 2007):'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**naturalday**: 基于日期所在的范围，如果给定日期在*(+1,0,-1)*范围内，则分别显示日期为"明天"，"今天"和"昨天"，例如，（如果今天是2007年1月26日）：'
- en: '[PRE9]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**naturaltime**: This returns a string representing how many seconds, minutes,
    or hours ago the date event occurred, for example, (If now is January 26, 2007
    16:30:00):'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**naturaltime**: 这返回一个表示事件日期发生多少秒、分钟或小时前的字符串，例如，（如果现在是2007年1月26日16:30:00）：'
- en: '[PRE10]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '**ordinal**: This converts an integer to its ordinal form. Here, 1 becomes
    ''1st'', and so on between every three digits.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ordinal**: 这将整数转换为序数形式。例如，1变成''1st''，以此类推，每三个数字之间。'
- en: Sitemap
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Sitemap
- en: '**Sitemap** is a framework to generate sitemaps, which are XML files that help
    search engine indexers to find dynamic pages on your site. It tells the indexer
    how important a page is and how often it changes. This information makes the indexing
    process more accurate and efficient.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**Sitemap**是一个生成站点地图的框架，这些站点地图是帮助搜索引擎索引器在您的站点上找到动态页面的XML文件。它告诉索引器页面的重要性以及更改频率。这些信息使索引过程更准确和高效。'
- en: The sitemaps framework lets you express the preceding information in Python
    code and then generates an XML document that represents the sitemap of your site.
    This covers the most commonly used sub-frameworks from the `django.contrib` package.
    The package contains additional applications that are not as important as the
    preceding ones and it is updated from time to time with new applications. To learn
    about any application from the `django.contrib` package, you can always read its
    documentation, which is available online.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '站点地图框架允许您用Python代码表示上述信息，然后生成代表您网站站点地图的XML文档。这涵盖了`django.contrib`包中最常用的子框架。该包包含一些不像前面那些重要的附加应用程序，并且会不时地更新新的应用程序。要了解`django.contrib`包中的任何应用程序，您可以随时阅读其在线文档。 '
- en: Cross-site request forgery protection
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站点请求伪造保护
- en: We discussed how to prevent two types of web attacks in [Chapter 5](part0044.xhtml#aid-19UOO2
    "Chapter 5. Introducing Hashtags"), *Introducing Hashtags*, namely, SQL injection
    and cross-site scripting. Django provides protection against another type of attack
    called cross-site request forgery. In this attack, a malicious site tries to manipulate
    your application by tricking a user who is logged in on your website to open a
    specially crafted page. This page usually contains JavaScript code that tries
    to submit a form to your website. CSRF protection works by embedding a token (that
    is a secret code) into all forms and verifies the token when the form is submitted.
    This effectively makes CSRF attacks infeasible.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[第5章](part0044.xhtml#aid-19UOO2 "Chapter 5. Introducing Hashtags")中讨论了如何防止两种类型的Web攻击，即SQL注入和跨站点脚本。Django提供了对抗另一种称为跨站点请求伪造的攻击的保护。在这种攻击中，恶意站点试图通过欺骗在您网站上登录的用户来操纵您的应用程序，使其打开一个特制的页面。该页面通常包含JavaScript代码，试图向您的网站提交表单。CSRF保护通过将一个令牌（即秘密代码）嵌入到所有表单中，并在提交表单时验证该令牌来工作。这有效地使CSRF攻击变得不可行。
- en: To activate CSRF protection, you just need to add the '`django.contrib.csrf.
    middleware.CsrfMiddleware'` parameter to the `MIDDLEWARE_CLASSES` variable, and
    this will work, transparently, to prevent CSRF attacks.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活CSRF保护，您只需要将`'django.contrib.csrf.middleware.CsrfMiddleware'`参数添加到`MIDDLEWARE_CLASSES`变量中，这将透明地工作，以防止CSRF攻击。
- en: The message system
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 消息系统
- en: Our application allows users to add each other as friends and monitor friend
    bookmarks. Although these two forms of communication are related to the nature
    of our bookmarking application, sometimes users want the flexibility of sending
    private messages to each other. This feature is especially useful for enhancing
    the social aspect of our website.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的应用允许用户将彼此添加为好友并监视好友的书签。虽然这两种形式的通信与我们的书签应用程序的性质有关，但有时用户希望灵活地向彼此发送私人消息。这个功能对于增强我们网站的社交方面特别有用。
- en: 'The message system can be implemented in a variety of ways. It can be as simple
    as providing each user a contact form, which works by sending its content to the
    user''s e-mail when it is submitted. You already have all of the information needed
    to build the components of this functionality:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 消息系统可以以多种方式实现。它可以简单到为每个用户提供一个联系表单，当提交时，通过发送其内容到用户的电子邮件来工作。您已经拥有构建此功能组件所需的所有信息：
- en: A message form with a text field for the subject and a text area for the body
    of the message
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个消息表单，其中包含主题的文本字段和消息正文的文本区域
- en: A view that displays the message form of a user and sends the contents of the
    form to the user via the `send_mail()` function
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示用户消息表单的视图，并通过`send_mail()`函数将表单内容发送给用户
- en: When allowing users to send e-mails via your site, you need to be careful in
    order to prevent abuse of the feature. Here, you can restrict the contact forms
    only to the logged-in users or friends only.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当允许用户通过您的网站发送电子邮件时，您需要小心以防止滥用该功能。在这里，您可以将联系表单限制为仅限已登录的用户或仅限好友。
- en: 'Another approach to implement the message system is by storing and managing
    messages in the database. This way, users can send and view messages using our
    application itself instead of using e-mail. While this approach is more bound
    to our application, and therefore keeps users on our website, it involves more
    work to get implement. However, as in the previous approach, you already have
    all of the information needed to implement this approach too. The components needed
    here are as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 实现消息系统的另一种方法是在数据库中存储和管理消息。这样，用户可以使用我们的应用程序发送和查看消息，而不是使用电子邮件。虽然这种方法更加与我们的应用程序绑定，因此可以使用户留在我们的网站上，但需要更多的工作来实现。然而，与之前的方法一样，您已经拥有实现这种方法所需的所有信息。这里需要的组件如下：
- en: A data model to store messages. It should contain fields for the sender, recipient,
    subject, and body. You can also add fields for the date, read status, and so on.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存储消息的数据模型。它应该包含发送者、接收者、主题和正文的字段。您还可以添加日期、阅读状态等字段。
- en: A form to create messages. The fields for the subject and body are needed.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建消息的表单。需要主题和正文的字段。
- en: A view to list the available messages.
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出可用消息的视图。
- en: A view to display a message.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示消息的视图。
- en: The preceding list is just one way that is used to implement the message system.
    You can, for example, join the list and message views into a single view, or provide
    a view to display the sent messages in addition to the received ones. The possibilities
    are numerous and depend on how advanced you want the feature to be.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 上述列表只是实现消息系统的一种方式。例如，您可以将列表和消息视图合并为一个视图，或者提供一个视图来显示已发送的消息以及已接收的消息。可能性很多，取决于您希望该功能有多高级。
- en: The subscription system
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 订阅系统
- en: We offer several web feeds that enable users to monitor updates on our website.
    However, some users may still prefer the old way of monitoring updates via e-mail.
    For those users, you may want to implement an e-mail subscription system to the
    application. For example, you can let users receive notifications when a bookmark
    is posted by a friend, or when a bookmark is posted under a certain tag.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了几种Web订阅，使用户能够监视我们网站的更新。然而，一些用户可能仍然更喜欢通过电子邮件监视更新的旧方式。对于这些用户，您可能希望将电子邮件订阅系统实施到应用程序中。例如，您可以让用户在朋友发布书签时收到通知，或者在特定标签下发布书签时收到通知。
- en: Furthermore, you can group such notifications and send them in batches to avoid
    sending a large number of e-mails. The implementation details of this feature
    greatly depends on how you want it to work. It can be as simple as a data model
    that stores the tags that each user is subscribed to. It would have a loop that
    goes through all users who are subscribed to a particular tag and sends notifications
    to them when a bookmark is posted under this tag. This approach, however, is too
    basic and generates a lot of e-mails. A more sophisticated approach may involve
    storing notifications in a data model and sending them in one e-mail on a daily
    basis.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您可以将这些通知分组并批量发送，以避免发送大量的电子邮件。此功能的实现细节在很大程度上取决于您希望它如何工作。它可以是一个简单的数据模型，用于存储每个用户订阅的标签。它将循环遍历所有订阅特定标签的用户，并在此标签下发布书签时向他们发送通知。然而，这种方法太基础，会产生大量的电子邮件。更复杂的方法可能涉及将通知存储在数据模型中，并在每天发送一封电子邮件。
- en: User scores
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户评分
- en: Some websites (such as [Slashdot.org](http://Slashdot.org) and [reddit.com](http://reddit.com))
    track the activity of users by assigning a score to each user. This score is incremented
    whenever the user contributes to the website in some way. Users' scores can be
    utilized in a variety of ways. For example, you can release new features to your
    most active users first, or provide other advantages to active users, which will
    motivate other users to contribute more to your website.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 一些网站（如[Slashdot.org](http://Slashdot.org)和[reddit.com](http://reddit.com)）通过为每个用户分配一个分数来跟踪用户的活动。每当用户以某种方式为网站做出贡献时，该分数就会增加。用户的分数可以以各种方式利用。例如，您可以首先向最活跃的用户发布新功能，或者为活跃用户提供其他优势，这将激励其他用户更多地为您的网站做出贡献。
- en: Implementing user scores is pretty simple. You need a data model to maintain
    scores in the database. After that, you can use the Django model API to access
    and manipulate scores from within views.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实施用户评分非常简单。您需要一个数据模型来在数据库中维护评分。之后，您可以使用Django模型API从视图中访问和操作评分。
- en: Summary
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: The purpose of this chapter is to prepare you for tasks that are not covered
    in this book. It introduced you to a number of topics. When a need arises for
    a certain feature, you now know where to look in order to find a framework that
    helps you to implement the feature quickly and cleanly.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目的是为您准备本书未涵盖的任务。它向您介绍了许多主题。当需要某种功能时，您现在知道在哪里寻找框架，以帮助您快速而干净地实施该功能。
- en: This chapter also gave you some ideas that you may want to implement into our
    bookmarking application. Working on these features will give you more opportunities
    to experiment with Django and extend your knowledge of its frameworks and inner
    workings.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 本章还为您提供了一些想法，您可能希望将其实施到我们的书签应用程序中。致力于这些功能将为您提供更多的机会来尝试Django并扩展您对其框架和内部工作原理的了解。
- en: In the next chapter, we are going to cover various ways of database connectivity,
    such as MySQL, NoSQL, PostgreSQL and so on, which is required for any database-based
    application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将介绍各种数据库连接的方式，如MySQL、NoSQL、PostgreSQL等，这对于任何基于数据库的应用程序都是必需的。
