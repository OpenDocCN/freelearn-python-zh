- en: Appendix A – Virtual environments
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 附录A – 虚拟环境
- en: A *virtual environment* is a light-weight, self-contained Python installation.
    The main motivation for virtual environments is to allow different projects to
    have control over the versions of installed Python packages, without interfering
    with other Python projects installed on the same host. A virtual environment consists
    of a directory containing a symbolic link to (Unix), or a copy of (Windows), an
    existing Python installation, together with an empty `site-packages` directory
    into which Python packages specific to this virtual environment can be installed.
    A second motivation for virtual environments is that users can create a virtual
    environment without needing administrator rights on their system, making it easy
    for them to install packages locally. A third motivation is that different virtual
    environments can be based on different versions of Python, making it easier to
    test code on say Python 3.4 and Python 3.5 on the same computer.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '*虚拟环境*是一个轻量级的、独立的Python安装。虚拟环境的主要动机是允许不同的项目控制安装的Python包的版本，而不会干扰同一主机上安装的其他Python项目。虚拟环境包括一个目录，其中包含对现有Python安装的符号链接（Unix），或者是一个副本（Windows），以及一个空的`site-packages`目录，用于安装特定于该虚拟环境的Python包。虚拟环境的第二个动机是，用户可以在不需要系统管理员权限的情况下创建虚拟环境，这样他们可以轻松地在本地安装软件包。第三个动机是，不同的虚拟环境可以基于不同版本的Python，这样可以更容易地在同一台计算机上测试代码，比如在Python
    3.4和Python 3.5上。'
- en: 'If you’re using Python 3.3 or later, then you should already have a module
    called `venv` installed on your system. You can verify this by running it from
    the command line:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是Python 3.3或更高版本，那么你的系统上应该已经安装了一个叫做`venv`的模块。你可以通过在命令行上运行它来验证：
- en: '[PRE0]'
  id: totrans-3
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you don’t have `venv` installed, there is another tool - `virtualenv` - which
    works very similarly. You can get it from the [Python Package Index (PyPI)](https://pypi.python.org/pypi/virtualenv).
    We explain how to install packages from PyPI in Appendix C. You can use either
    `venv` or `virtualenv`, though we’ll use `venv` here, since it is built in to
    recent versions of Python.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有安装`venv`，还有另一个工具叫做`virtualenv`，它的工作方式非常类似。你可以从[Python Package Index (PyPI)](https://pypi.python.org/pypi/virtualenv)获取它。我们将在附录C中解释如何从PyPI安装软件包。你可以使用`venv`或`virtualenv`，不过我们将在这里使用`venv`，因为它已经内置在最新版本的Python中。
- en: Creating a virtual environment
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建虚拟环境
- en: 'Using `venv` is very simple: You specify the path of a directory which is to
    contain the new virtual environment. The tool creates the new directory and populates
    it with the installation:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`venv`非常简单：你指定一个目录的路径，该目录将包含新的虚拟环境。该工具会创建新目录并填充它的安装内容：
- en: '[PRE1]'
  id: totrans-7
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Activating a virtual environment
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: 'Once the environment is created you can *activate* it by using the `activate`
    script in the environment’s `bin` directory. On Linux or macOS you have to `source`
    the script:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 创建环境后，你可以通过在环境的`bin`目录中使用`activate`脚本来*激活*它。在Linux或macOS上，你需要`source`该脚本：
- en: '[PRE2]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'and on Windows you run it:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows上运行它：
- en: '[PRE3]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Once you do this your prompt will change to remind you that you’re in a virtual
    environment:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你这样做，你的提示符将会改变，提醒你当前处于虚拟环境中：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The Python that will execute when you run `python` is from the virtual environment.
    In fact, using virtual environments is by far the best way to get a predictable
    version of Python when you invoke `python` rather than having to remember to use
    `python` for Python 2 and `python3` for Python 3.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 运行`python`时执行的Python来自虚拟环境。实际上，使用虚拟环境是获得可预测的Python版本的最佳方式，而不是记住要使用`python`来运行Python
    2，`python3`来运行Python 3。
- en: Once in the virtual environment you can work as normal, secure in the knowledge
    that package installations are isolated from the system Python and other virtual
    environments.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入虚拟环境，你可以像平常一样工作，放心地知道包安装与系统Python和其他虚拟环境是隔离的。
- en: Deactivating a virtual environment
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 退出虚拟环境
- en: 'To leave a virtual environment use the `deactivate` command, which will return
    you to the parent shell from which the virtual environment was activated:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要离开虚拟环境，请使用`deactivate`命令，这将使你返回到激活虚拟环境的父shell：
- en: '[PRE5]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Other tools for working with virtual environments
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他用于虚拟环境的工具
- en: If you work with virtual environments a lot — we would advocate that you should
    almost always be working within one — managing a plethora of environments can
    itself become something of a chore. Integrated Development Environments such as
    *JetBrains’ PyCharm* contain excellent support for creating and using virtual
    environments. On the command line, we recommend a tool called [virtualenv wrapper](https://virtualenvwrapper.readthedocs.io/en/latest/)
    which makes switching between projects which rely on different virtual environments
    almost trivial, once you’ve done some initial configuration.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你经常使用虚拟环境——我们建议你几乎总是在其中工作——管理大量的环境本身可能会变得有些繁琐。集成开发环境，比如*JetBrains’ PyCharm*，提供了出色的支持来创建和使用虚拟环境。在命令行上，我们推荐一个叫做[virtualenv
    wrapper](https://virtualenvwrapper.readthedocs.io/en/latest/)的工具，它可以使在依赖不同虚拟环境的项目之间切换几乎变得轻而易举，一旦你做了一些初始配置。
