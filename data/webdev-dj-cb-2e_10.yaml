- en: Chapter 10. Bells and Whistles
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。铃铛和装饰
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Using the Django shell
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django shell
- en: Using database query expressions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用数据库查询表达式
- en: Monkey-patching the slugify() function for better internationalization support
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为更好的国际化支持对slugify()函数进行猴子补丁
- en: Toggling the Debug Toolbar
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 切换调试工具栏
- en: Using ThreadLocalMiddleware
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用ThreadLocalMiddleware
- en: Caching the method return value
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缓存方法返回值
- en: Using Memcached to cache Django views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Memcached来缓存Django视图
- en: Using signals to notify administrators about new entries
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用信号通知管理员关于新条目的信息
- en: Checking for missing settings
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查缺失的设置
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will go through several other important bits and pieces
    that will help you understand and utilize Django even better. You will get an
    overview of how to use the Django shell to experiment with the code before writing
    it in the files. You will be introduced to monkey patching, also known as guerrilla
    patching, which is a powerful feature of dynamical languages such as Python and
    Ruby. You will learn how to debug your code and check its performance. You will
    see how to access the currently logged in user and other request parameters from
    any module. Also, you will learn how to cache values, handle signals, and create
    system checks. Get ready for an interesting programming experience!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍其他几个重要的小技巧，这将帮助你更好地理解和利用Django。你将了解如何使用Django shell在将代码写入文件之前进行实验。你将介绍猴子补丁，也称为游击式补丁，这是Python和Ruby等动态语言的一个强大功能。你将学习如何调试代码和检查其性能。你将了解如何从任何模块访问当前登录用户和其他请求参数。此外，你还将学习如何缓存值、处理信号和创建系统检查。准备好一个有趣的编程体验！
- en: Using the Django shell
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django shell
- en: 'With the virtual environment activated and your project directory selected
    as the current directory, enter the following command in your command-line tool:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在虚拟环境激活并且将你的项目目录选为当前目录后，在你的命令行工具中输入以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: By executing the preceding command, you will get in an interactive Python shell
    configured for your Django project, where you can play around with the code, inspect
    classes, try out methods, or execute scripts on the fly. In this recipe, we will
    go through the most important functions that you need to know in order to work
    with the Django shell.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 通过执行前面的命令，你将进入一个为你的Django项目配置的交互式Python shell，在那里你可以玩转代码，检查类，尝试方法，或即时执行脚本。在本菜谱中，我们将介绍你需要了解的最重要的函数，以便与Django
    shell一起工作。
- en: Getting ready
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You can either install IPython or bpython using one of the following commands,
    which will highlight the syntax for the output of your Django shell and add some
    other helpers:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令之一安装IPython或bpython，这将突出显示Django shell输出的语法，并添加一些其他辅助工具：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How to do it...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Learn the basics of using the Django shell by following these instructions:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循以下说明来学习使用Django shell的基本知识：
- en: 'Run the Django shell by typing the following command:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过输入以下命令来运行Django shell：
- en: '[PRE2]'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The prompt will change to `In [1]: or >>>`, depending on whether you use IPython
    or not. If you use bpython, the shell will be shown in full terminal window with
    the available shortcuts at the bottom (similar to the nano editor) and you will
    also get code highlighting and text autocompletion when typing.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示符将更改为`In [1]:`或`>>>`，具体取决于你是否使用IPython。如果你使用bpython，shell将显示在完整的终端窗口中，底部有可用的快捷键（类似于nano编辑器），并且你还可以在输入时获得代码高亮和文本自动完成。
- en: 'Now, you can import classes, functions, or variables and play around with them.
    For example, to see the version of an installed module, you can import the module
    and then try to read its `__version__`, `VERSION`, or `version` variables, as
    follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以导入类、函数或变量，并与之互动。例如，要查看已安装模块的版本，你可以导入该模块，然后尝试读取其`__version__`、`VERSION`或`version`变量，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'To get a comprehensive description of a module, class, function, method, keyword,
    or documentation topic, use the `help()` function. You can either pass a string
    with the path to a specific entity, or the entity itself, as follows:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取模块、类、函数、方法、关键字或文档主题的全面描述，请使用`help()`函数。你可以传递一个包含特定实体路径的字符串，或者直接传递实体本身，如下所示：
- en: '[PRE4]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This will open the help page for the `django.forms` module. Use the arrow keys
    to scroll the page up and down. Press *Q* to get back to the shell.
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将打开`django.forms`模块的帮助页面。使用箭头键上下滚动页面。按*Q*键返回shell。
- en: Tip
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you run `help()` without the parameters, it opens an interactive help. Here
    you can enter any path of a module, class, function, and so on and get information
    on what it does and how to use it. To quit the interactive help press *Ctrl* +
    *D*.
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你不带参数运行`help()`，它将打开交互式帮助。在这里，你可以输入模块、类、函数等的任何路径，并获取有关其功能和使用方法的信息。要退出交互式帮助，请按*Ctrl*
    + *D*。
- en: 'This is an example of passing an entity to the `help()` function. This will
    open a help page for the `ModelForm` class, as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这是一个将实体传递给`help()`函数的示例。这将打开`ModelForm`类的帮助页面，如下所示：
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'To quickly see what fields and values are available for a model instance, use
    the `__dict__` attribute. Also, use the `pprint()` function to get the dictionaries
    printed in a more readable format (not just one long line), as shown in the following:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要快速查看模型实例可用的字段和值，请使用`__dict__`属性。此外，使用`pprint()`函数以更可读的格式（不仅仅是长行）打印字典，如下所示：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Note that using `__dict__`, we don't get many-to-many relationships. However,
    this might be enough for a quick overview of the fields and values.
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，使用`__dict__`，我们不会得到多对多关系。然而，这可能足以快速了解字段和值。
- en: 'To get all the available properties and methods of an object, you can use the
    `dir()` function, as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要获取对象的全部可用属性和方法，你可以使用`dir()`函数，如下所示：
- en: '[PRE7]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To get these attributes printed one per line, you can use the following:'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要按行打印这些属性，你可以使用以下方法：
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The Django shell is useful to experiment with `QuerySets` or regular expressions
    before putting them in your model methods, views, or management commands. For
    example, to check the e-mail validation regular expression, you can type the following
    in the Django shell:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django shell 在将它们放入你的模型方法、视图或管理命令之前，用于实验`QuerySets`或正则表达式。例如，要检查电子邮件验证正则表达式，你可以在Django
    shell中键入以下内容：
- en: '[PRE9]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If you want to try out different `QuerySets`, you need to execute the setup
    of the models and apps in your project, as shown in the following:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你想要尝试不同的`QuerySets`，你需要执行项目中模型和应用的设置，如下所示：
- en: '[PRE10]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To exit the Django shell, press *Ctrl* + *D* or type the following command:'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要退出Django shell，请按*Ctrl* + *D*或键入以下命令：
- en: '[PRE11]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: How it works...
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The difference between a normal Python shell and the Django shell is that when
    you run the Django shell, `manage.py` sets the `DJANGO_SETTINGS_MODULE` environment
    variable to the project's settings path, and then all the code in the Django shell
    is handled in the context of your project.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 正常Python shell和Django shell之间的区别在于，当你运行Django shell时，`manage.py`会将`DJANGO_SETTINGS_MODULE`环境变量设置为项目的设置路径，然后Django
    shell中的所有代码都在你的项目上下文中处理。
- en: See also
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using database query expressions* recipe
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Using database query expressions* 食谱'
- en: The *Monkey-patching the slugify() function for better internationalization
    support* recipe
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Monkey-patching the slugify() function for better internationalization support*
    食谱'
- en: Using database query expressions
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用数据库查询表达式
- en: Django **Object-relational mapping** (**ORM**) comes with special abstraction
    constructs that can be used to build complex database queries. They are called
    **Query Expressions** and they allow you to filter data, order it, annotate new
    columns, and aggregate relations. In this recipe, we will see how that can be
    used in practice. We will create an app that shows viral videos and counts how
    many times each video has been seen on mobile and desktop devices.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Django **对象关系映射**（**ORM**）包含特殊抽象构造，可用于构建复杂的数据库查询。它们被称为**查询表达式**，允许你过滤数据、排序它、注解新列和聚合关系。在本食谱中，我们将看到如何在实践中使用它。我们将创建一个显示病毒视频并计算每个视频在移动设备和桌面设备上被观看次数的应用。
- en: Getting ready
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To start with, install `django-mobile` to your virtual environment. This module
    will be necessary to differentiate between desktop devices and mobile devices:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将`django-mobile`安装到你的虚拟环境中。此模块将用于区分桌面设备和移动设备：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To configure it, you will need to modify several project settings as follows.
    Besides that, let''s create the `viral_videos` app. Put both of them under `INSTALLED_APPS`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置它，你需要修改几个项目设置，如下所示。除此之外，让我们创建`viral_videos`应用。将它们都放在`INSTALLED_APPS`下：
- en: '[PRE13]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Next, create a model for viral videos with a creation and modification timestamps,
    title, embedded code, impressions on desktop devices, and impressions on mobile
    devices, as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，创建一个包含创建和修改时间戳、标题、嵌入代码、桌面设备上的印象和移动设备上的印象的病毒视频模型，如下所示：
- en: '[PRE14]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: How to do it...
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To illustrate the query expressions, let''s create the viral video detail view
    and plug it in the URL configuration, as shown in the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明查询表达式，让我们创建病毒视频详情视图并将其插入到URL配置中，如下所示：
- en: 'Create the `viral_video_detail()` view in the `views.py`, as follows:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`views.py`中创建`viral_video_detail()`视图，如下所示：
- en: '[PRE15]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Define the URL configuration for the app, as shown in the following:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义应用的URL配置，如下所示：
- en: '[PRE16]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Include the URL configuration of the app in the project''s root URL configuration,
    as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将应用的URL配置包含到项目的根URL配置中，如下所示：
- en: '[PRE17]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Create a template for the `viral_video_detail()` view, as shown in the following:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`viral_video_detail()`视图创建一个模板，如下所示：
- en: '[PRE18]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Set up administration for the `viral_videos` app and add some videos to the
    database.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为`viral_videos`应用设置管理权限并向数据库中添加一些视频。
- en: How it works...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'You might have noticed the `print()` statement in the view. It is there temporarily
    for debugging purposes. If you run local development server and access the first
    video in the browser at `http://127.0.0.1:8000/en/viral-videos/1/`, you will see
    the following SQL query printed in the console:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了视图中的`print()`语句。它是临时用于调试目的的。如果你运行本地开发服务器并在浏览器中访问`http://127.0.0.1:8000/en/viral-videos/1/`中的第一个视频，你将在控制台看到以下SQL查询被打印出来：
- en: '[PRE19]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, in the browser, you will see a simple page similar to the following image,
    showing the title of a video, label of the video, embedded video, and impressions
    on desktop devices, mobile devices and in total:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在浏览器中，你会看到一个类似于以下图像的简单页面，显示视频标题、视频标签、嵌入的视频以及桌面设备、移动设备和总印象数：
- en: '![How it works...](img/B04912_10_01.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_10_01.jpg)'
- en: The `annotate()` method in Django `QuerySets` allows you to add extra columns
    to the `SELECT SQL` statement as well as on-the-fly created properties for the
    objects retrieved from `QuerySets`. With `models.F()`, we can reference different
    field values from the selected database table. In this example, we will create
    the `total_impressions` property, which is the sum of the impressions on the desktop
    devices and the impressions on mobile devices.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: Django `QuerySets`中的`annotate()`方法允许你在`SELECT SQL`语句中添加额外的列，以及从`QuerySets`检索到的对象的即时创建属性。使用`models.F()`，我们可以引用所选数据库表中的不同字段值。在本例中，我们将创建`total_impressions`属性，它是桌面设备和移动设备上的印象总和。
- en: With `models.Case()` and `models.When()`, we can return the values depending
    on different conditions. To mark the values, we are using `models.Value()`. In
    our example, we will create the `label` column for SQL query and the property
    for the objects returned by `QuerySet`. It will be set to *popular* if it has
    more than 500 impressions, *new* if it has been created today, and *cool* otherwise.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`models.Case()`和`models.When()`，我们可以根据不同的条件返回值。为了标记值，我们使用`models.Value()`。在我们的例子中，我们将为SQL查询创建`label`列，并为`QuerySet`返回的对象创建属性。如果印象数超过500，则将其设置为*popular*，如果它是今天创建的，则设置为*new*，否则设置为*cool*。
- en: At the end of the view, we have the `qs.update()` methods called. They increment
    `mobile_impressions` or `desktop_impressions` of the current video, depending
    on the device used by the visitor. The incrementation happens at the SQL level.
    This solves the so-called race conditions, when two or more visitors are accessing
    the view at the same time and try to increase the impressions count simultaneously.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在视图的末尾，我们调用了`qs.update()`方法。根据访客使用的设备，它们会增加当前视频的`mobile_impressions`或`desktop_impressions`。增加操作在SQL级别发生。这解决了所谓的竞争条件，即当两个或更多访客同时访问视图并尝试同时增加印象计数时。
- en: See also
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using the Django shell* recipe
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django shell*配方'
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*创建与URL相关的方法的模型混入*配方中，*数据库结构*
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*创建用于处理创建和修改日期的模型混入*配方中，*数据库结构*
- en: Monkey-patching the slugify() function for better internationalization support
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为更好的国际化支持对slugify()函数进行猴子补丁
- en: Monkey patch or guerrilla patch is a piece of code that extends or modifies
    another piece of code at runtime. It is not recommended to use monkey patch often;
    however, sometimes, it is the only possible way to fix a bug in third-party modules
    without creating a separate branch of the module. Also, monkey patching might
    be used to prepare functional or unit tests without using complex database or
    file manipulations. In this recipe, you will learn how to exchange the default
    `slugify()` function with the one from the third-party `awesome-slugify` module,
    which handles German, Greek, and Russian words smarter and allows to create customized
    slugs for other languages. As a quick reminder, we uses the `slugify()` function
    to create a URL-friendly version of the object's title or the uploaded filename;
    it strips the leading and trailing whitespace, converts the text to lowercase,
    removes nonword characters, and converts spaces to hyphens.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Monkey patch 或 guerrilla patch 是一段在运行时扩展或修改另一段代码的代码。通常不建议经常使用 monkey patch；然而，有时，这是在不创建模块的单独分支的情况下修复第三方模块中错误的唯一可能方法。此外，monkey
    patching 可以用来准备功能或单元测试，而不需要使用复杂的数据库或文件操作。在这个菜谱中，您将学习如何用来自第三方 `awesome-slugify`
    模块的默认 `slugify()` 函数替换，该模块更智能地处理德语、希腊语和俄语单词，并允许为其他语言创建定制的 slug。作为一个快速提醒，我们使用 `slugify()`
    函数来创建对象的标题或上传的文件名的 URL 友好版本；它删除前后空白字符，将文本转换为小写，删除非单词字符，并将空格转换为连字符。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started, execute the following steps:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始，请执行以下步骤：
- en: 'Install `awesome-slugify` in your virtual environment, as follows:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的虚拟环境中安装 `awesome-slugify`，如下所示：
- en: '[PRE20]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Create a `guerrilla_patches` app in your project and put it under `INSTALLED_APPS`
    in the settings.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的项目中创建一个 `guerrilla_patches` 应用程序，并将其放在设置中的 `INSTALLED_APPS` 下。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In the `models.py` file of the `guerrilla_patches` app, add the following content:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `guerrilla_patches` 应用程序的 `models.py` 文件中，添加以下内容：
- en: '[PRE21]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The default Django `slugify()` function handles German diacritical symbols
    incorrectly. To see this for yourself, run the following code in the Django shell
    without the monkey patch:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 Django `slugify()` 函数处理德语变音符号不正确。要亲自查看这一点，请在 Django shell 中运行以下代码而不使用 monkey
    patch：
- en: '[PRE22]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is incorrect in German as the letter `ß` is totally stripped out instead
    of substituting it with `ss` and the letters `ä`, `ö`, and `ü` are changed to
    `a`, `o`, and `u`; whereas, they should be substituted with `ae`, `oe`, and `ue`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在德语中，这是不正确的，因为字母 `ß` 完全被移除，而不是用 `ss` 替换，而字母 `ä`、`ö` 和 `ü` 被改为 `a`、`o` 和 `u`；而它们应该被替换为
    `ae`、`oe` 和 `ue`。
- en: 'The monkey patch that we did loads the `django.utils.text` module at initialization
    and assigns the callable instance of the `Slugify` class as the `slugify()` function.
    Now, if you run the same code in the Django shell, you will get different but
    correct results, as follows:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所做的 monkey patch 在初始化时加载 `django.utils.text` 模块，并将 `Slugify` 类的可调用实例分配给 `slugify()`
    函数。现在，如果您在 Django shell 中运行相同的代码，您将得到不同但正确的结果，如下所示：
- en: '[PRE23]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'To read more about how to utilize the `awesome-slugify` module, refer to the
    following: [https://pypi.python.org/pypi/awesome-slugify](https://pypi.python.org/pypi/awesome-slugify).'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 想了解更多关于如何使用 `awesome-slugify` 模块的信息，请参考以下链接：[https://pypi.python.org/pypi/awesome-slugify](https://pypi.python.org/pypi/awesome-slugify)。
- en: There's more...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Before creating any monkey patch, we need to completely understand how the
    code that we want to modify works. This can be done by analyzing the existing
    code and inspecting the values of different variables. To do this, there is a
    useful built-in Python debugger `pdb` module, which can temporarily be added to
    the Django code or any third-party module to stop the execution of a development
    server at any breakpoint. Use the following code to debug an unclear part of a
    Python module:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建任何 monkey patch 之前，我们需要完全理解我们想要修改的代码是如何工作的。这可以通过分析现有代码和检查不同变量的值来完成。为此，有一个有用的内置
    Python 调试器 `pdb` 模块，可以临时添加到 Django 代码或任何第三方模块中，以便在任何断点处停止开发服务器的执行。使用以下代码来调试 Python
    模块的未知部分：
- en: '[PRE24]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This launches the interactive shell, where you can type the variables to see
    their values. If you type `c` or `continue`, the code execution will continue
    until the next breakpoint. If you type `q` or `quit`, the management command will
    be aborted. You can learn more commands of the Python debugger and how to inspect
    the traceback of the code at [https://docs.python.org/2/library/pdb.html](https://docs.python.org/2/library/pdb.html).
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动交互式shell，您可以在其中输入变量以查看它们的值。如果您输入 `c` 或 `continue`，代码执行将继续到下一个断点。如果您输入 `q`
    或 `quit`，管理命令将被终止。您可以了解更多关于Python调试器的命令以及如何检查代码的跟踪回溯，请参阅[https://docs.python.org/2/library/pdb.html](https://docs.python.org/2/library/pdb.html)。
- en: 'Another quick way to see a value of a variable in the development server is
    to raise a warning with the variable as a message, as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种快速查看开发服务器中变量值的方法是使用变量作为消息发出警告，如下所示：
- en: '[PRE25]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When you are in the `DEBUG` mode, the Django logger will provide you with the
    traceback and other local variables.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当您处于 `DEBUG` 模式时，Django记录器将为您提供跟踪回溯和其他局部变量。
- en: Tip
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: Don't forget to remove the debugging functions before committing the code to
    a repository.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码提交到仓库之前，不要忘记移除调试函数。
- en: See also
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Using the Django shell* recipe
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用Django shell* 的食谱'
- en: Toggling the Debug Toolbar
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切换调试工具栏
- en: While developing with Django, you will want to inspect request headers and parameters,
    check the current template context, or measure the performance of SQL queries.
    All this and more is possible with the Django Debug Toolbar. It is a configurable
    set of panels that displays various debug information about the current request
    and response. In this recipe, I will guide you on how to toggle the visibility
    of the Debug Toolbar, depending on a cookie, set by bookmarklet. A bookmarklet
    is a bookmark of a small piece of JavaScript code that you can run on any page
    in a browser.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用Django进行开发时，您可能想要检查请求头和参数，检查当前的模板上下文，或测量SQL查询的性能。所有这些以及更多都可以通过Django调试工具栏实现。它是一组可配置的面板，显示有关当前请求和响应的各种调试信息。在本食谱中，我将指导您如何根据由书签工具设置的cookie切换调试工具栏的可见性。书签工具是一个包含一小段JavaScript代码的书签，您可以在浏览器中的任何页面上运行它。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To get started with toggling the visibility of the Debug Toolbar, take a look
    at the following steps:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始切换调试工具栏的可见性，请查看以下步骤：
- en: 'Install the Django Debug Toolbar to your virtual environment:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Django调试工具栏安装到您的虚拟环境中：
- en: '[PRE26]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Put `debug_toolbar` under `INSTALLED_APPS` in the settings.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置中将 `debug_toolbar` 放入 `INSTALLED_APPS`。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to set up the Django Debug Toolbar, which can be switched
    on or off using bookmarklets in the browser:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤设置Django调试工具栏，可以使用浏览器中的书签工具切换其开启或关闭：
- en: 'Add the following project settings:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加以下项目设置：
- en: '[PRE27]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In the `utils` module, create a `misc.py` file with the `custom_show_toolbar()`
    function, as follows:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `utils` 模块中，创建一个 `misc.py` 文件，包含 `custom_show_toolbar()` 函数，如下所示：
- en: '[PRE28]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Open the Chrome or Firefox browser and go to **Bookmark Manager**. Then, create
    two new JavaScript links. The first link shows the toolbar. It looks similar to
    the following:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Chrome或Firefox浏览器，转到 **书签管理器**。然后，创建两个新的JavaScript链接。第一个链接显示工具栏。它看起来类似于以下内容：
- en: '[PRE29]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The second JavaScript link hides the toolbar and looks similar to the following:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个JavaScript链接隐藏工具栏，看起来类似于以下内容：
- en: '[PRE30]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: The `DEBUG_TOOLBAR_PANELS` setting defines the panels to show in the toolbar.
    The `DEBUG_TOOLBAR_CONFIG` dictionary defines the configuration for the toolbar,
    including a path to the function that is used to check whether or not to show
    the toolbar.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`DEBUG_TOOLBAR_PANELS` 设置定义了工具栏中要显示的面板。`DEBUG_TOOLBAR_CONFIG` 字典定义了工具栏的配置，包括用于检查是否显示工具栏的功能的路径。'
- en: 'By default, when you browse through your project the Django Debug Toolbar will
    not be shown. However, as you click on your bookmarklet, **Debug Toolbar On**,
    the `DebugToolbar` cookie will be set to `1`, the page will be refreshed, and
    you will see the toolbar with debugging panels. For example, you will be able
    to inspect the performance of SQL statements for optimization, as shown in the
    following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，当您浏览项目时，Django调试工具栏不会显示。然而，当您点击您的书签工具时，**调试工具栏开启**，`DebugToolbar` cookie将被设置为
    `1`，页面将被刷新，您将看到带有调试面板的工具栏。例如，您将能够检查SQL语句的性能以进行优化，如下面的截图所示：
- en: '![How it works...](img/B04912_10_02.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_10_02.jpg)'
- en: 'You will also be able to check the template context variables for the current
    view, as shown in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你还将能够检查当前视图的模板上下文变量，如下面的截图所示：
- en: '![How it works...](img/B04912_10_03.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_10_03.jpg)'
- en: See also
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Getting detailed error reporting via e-mail* recipe in [Chapter 11](ch11.html
    "Chapter 11. Testing and Deployment"), *Testing and Deployment*
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第11章](ch11.html "第11章。测试和部署")的*通过电子邮件获取详细错误报告*配方中，*测试和部署*
- en: Using ThreadLocalMiddleware
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ThreadLocalMiddleware
- en: The `HttpRequest` object contains useful information about the current user,
    language, server variables, cookies, session, and so on. As a matter of fact,
    `HttpRequest` is provided in the views and middlewares, and then you can pass
    it or its attribute values to forms, model methods, model managers, templates,
    and so on. To make life easier, you can use the `ThreadLocalMiddleware` middleware
    that stores the current `HttpRequest` object in the globally-accessed Python thread.
    Therefore, you can access it from model methods, forms, signal handlers, and any
    other place that didn't have direct access to the `HttpRequest` object previously.
    In this recipe, we will define this middleware.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`HttpRequest`对象包含有关当前用户、语言、服务器变量、cookies、会话等信息。实际上，`HttpRequest`在视图和中间件中提供，然后你可以将其或其属性值传递给表单、模型方法、模型管理器、模板等。为了使生活更简单，你可以使用存储当前`HttpRequest`对象的`ThreadLocalMiddleware`中间件，在全局可访问的Python线程中。因此，你可以从模型方法、表单、信号处理器以及任何之前没有直接访问`HttpRequest`对象的任何地方访问它。在本配方中，我们将定义此中间件。'
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create the `utils` app and put it under `INSTALLED_APPS` in the settings.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 创建`utils`应用程序并将其放在设置中的`INSTALLED_APPS`下。
- en: How to do it...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following two steps:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下两个步骤：
- en: 'Add a `middleware.py` file in the `utils` app with the following content:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`utils`应用程序中添加一个`middleware.py`文件，内容如下：
- en: '[PRE31]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add this middleware to `MIDDLEWARE_CLASSES` in the settings:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将此中间件添加到设置中的`MIDDLEWARE_CLASSES`：
- en: '[PRE32]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: How it works...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'The `ThreadLocalMiddleware` processes each request and stores the current `HttpRequest`
    object in the current thread. Each request-response cycle in Django is single
    threaded. There are two functions: `get_current_request()` and `get_current_user()`.
    These functions can be used from anywhere to grab the current `HttpRequest` object
    or the current user.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThreadLocalMiddleware`处理每个请求并将当前的`HttpRequest`对象存储在当前线程中。Django中的每个请求-响应周期都是单线程的。有两个函数：`get_current_request()`和`get_current_user()`。这些函数可以从任何地方使用，以获取当前的`HttpRequest`对象或当前用户。'
- en: 'For example, you can create and use `CreatorMixin`, which saves the current
    user as the creator of a model, as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，你可以创建并使用`CreatorMixin`，将当前用户保存为模型的创建者，如下所示：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: See also
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*创建与URL相关的模型混入*配方中，*数据库结构*
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*创建用于处理创建和修改日期的模型混入*配方中，*数据库结构*
- en: The *Creating a model mixin to take care of meta tags* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*创建用于处理元标签的模型混入*配方中，*数据库结构*
- en: The *Creating a model mixin to handle generic relations* recipe in [Chapter
    2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*创建用于处理通用关系的模型混入*配方中，*数据库结构*
- en: Caching the method return value
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缓存方法返回值
- en: If you call the same model method with heavy calculations or database queries
    multiple times in the request-response cycle, the performance of the view might
    be very slow. In this recipe, you will learn about a pattern that you can use
    to cache the return value of a method for later repetitive use. Note that we are
    not using the Django cache framework here, we are just using what Python provides
    us by default.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你多次在请求-响应周期中调用相同的模型方法，该方法具有重量级计算或数据库查询，那么视图的性能可能会非常慢。在本配方中，你将了解一个可以用于缓存方法返回值以供以后重复使用的模式。请注意，我们在这里不使用Django缓存框架，我们只是使用Python默认提供的。
- en: Getting ready
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Choose an app with a model that has a time-consuming method that will be used
    repetitively in the same request-response cycle.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 选择一个具有在相同的请求-响应周期中将被重复使用的耗时方法的模型的应用程序。
- en: How to do it...
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'This is a pattern that you can use to cache a method return value of a model
    for repetitive use in views, forms, or templates, as follows:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个你可以用来缓存模型方法返回值的模式，以便在视图、表单或模板中重复使用，如下所示：
- en: '[PRE34]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For example, let''s create a `get_thumbnail_url()`method for the `ViralVideo`
    model that we created in the *Using database query expressions* recipe earlier
    in this chapter:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们在本章“使用数据库查询表达式”食谱中创建的 `ViralVideo` 模型中创建一个 `get_thumbnail_url()` 方法：
- en: '[PRE35]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: How it works...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The method checks whether the `_expensive_value_cached` attribute exists for
    the model instance. If it doesn't exist, the time-consuming calculations are done
    and the result is assigned to this new attribute. At the end of the method, the
    cached value is returned. Of course, if you have several weighty methods, you
    will need to use different attribute names to save each calculated value.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法检查模型实例是否存在 `_expensive_value_cached` 属性。如果不存在，则进行耗时计算并将结果分配给这个新属性。在方法结束时，返回缓存的值。当然，如果你有多个重量级方法，你需要使用不同的属性名来保存每个计算值。
- en: You can now use something like `{{ object.some_expensive_function }}` in the
    header and footer of a template, and the time-consuming calculations will be done
    just once.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以在模板的页眉和页脚中使用类似 `{{ object.some_expensive_function }}` 的内容，耗时计算将只进行一次。
- en: 'In a template, you can use the function in both, the `{% if %}` condition,
    and output of the value, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在模板中，你可以在 `{% if %}` 条件和值的输出中使用该函数，如下所示：
- en: '[PRE36]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'In this example, we are checking the thumbnail of a YouTube video by parsing
    the URL of the video''s embed code, getting its ID, and then composing the URL
    of the thumbnail image. Then, you can use it in a template as follows:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，我们通过解析视频嵌入代码的 URL，获取其 ID，然后组合缩略图图像的 URL 来检查 YouTube 视频的缩略图。然后，你可以在模板中如下使用它：
- en: '[PRE37]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: See also
  id: totrans-172
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Refer to [Chapter 4](ch04.html "Chapter 4. Templates and JavaScript"), *Templates
    and JavaScript* for more details
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有关更多详细信息，请参阅[第 4 章](ch04.html "第 4 章。模板和 JavaScript")，“模板和 JavaScript”。
- en: Using Memcached to cache Django views
  id: totrans-174
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Memcached 缓存 Django 视图
- en: Django provides a possibility to speed up the request-response cycle by caching
    the most expensive parts such as database queries or template rendering. The fastest
    and most reliable caching natively supported by Django is the memory-based cache
    server, Memcached. In this recipe, you will learn how to use Memcached to cache
    a view for our `viral_videos` app that we created in the *Using database query
    expressions* recipe earlier in this chapter.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: Django 提供了一种通过缓存最昂贵的部分（如数据库查询或模板渲染）来加速请求-响应周期的可能性。Django 原生支持的最快、最可靠的缓存服务器是基于内存的缓存服务器
    Memcached。在本食谱中，你将学习如何使用 Memcached 缓存我们之前在本章“使用数据库查询表达式”食谱中创建的 `viral_videos`
    应用程序中的视图。
- en: Getting ready
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'There are several things to do in order to prepare caching for your Django
    project:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为你的 Django 项目准备缓存，你需要做几件事情：
- en: 'Install Memcached server, as follows:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Memcached 服务器，如下所示：
- en: '[PRE38]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Start Memcached server, as shown in the following:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Memcached 服务器，如下所示：
- en: '[PRE39]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Install Memcached Python bindings in your virtual environment, as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的虚拟环境中安装 Memcached Python 绑定，如下所示：
- en: '[PRE40]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: How to do it...
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To integrate caching for your specific views, perform the following steps:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要为特定的视图集成缓存，请执行以下步骤：
- en: 'Set `CACHES` in the project settings, as follows:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目设置中设置 `CACHES`，如下所示：
- en: '[PRE41]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Modify the views of the `viral_videos` app, as follows:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `viral_videos` 应用的视图，如下所示：
- en: '[PRE42]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: How it works...
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Now, if you access the first viral video at `http://127.0.0.1:8000/en/viral-videos/1/`
    and refresh the page a few times, you will see that the number of impressions
    changes only once a minute. This is because for every visitor, caching is enabled
    for 60 seconds. Caching is set for the view using the `@cache_page` decorator.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你访问第一个病毒视频 `http://127.0.0.1:8000/en/viral-videos/1/` 并刷新页面几次，你会看到点击次数每分钟只改变一次。这是因为对于每个访问者，缓存被启用
    60 秒。使用 `@cache_page` 装饰器为视图设置了缓存。
- en: Memcached is a key-value store and by default for each cached page, the full
    URL is used to generate the key. When two visitors access the same page simultaneously,
    the first visitor will get the page generated by the Python code and the second
    one will get the HTML code from the Memcached server.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: Memcached 是一个键值存储，默认情况下，对于每个缓存的页面，使用完整的 URL 生成键。当两个访问者同时访问同一页面时，第一个访问者将获得由 Python
    代码生成的页面，而第二个访问者将获得来自 Memcached 服务器的 HTML 代码。
- en: In our example, to ensure that each visitor gets treated separately even if
    they access the same URL, we are using the `@vary_on_cookie` decorator. This decorator
    checks the uniqueness of the `Cookie` header of the HTTP request.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，为了确保即使访问相同的URL，每个访客也能得到单独的处理，我们使用了`@vary_on_cookie`装饰器。这个装饰器检查HTTP请求的`Cookie`头部的唯一性。
- en: Learn more about Django's cache framework from the official documentation at
    [https://docs.djangoproject.com/en/1.8/topics/cache/](https://docs.djangoproject.com/en/1.8/topics/cache/).
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 从官方文档中了解更多关于Django缓存框架的信息，请访问[https://docs.djangoproject.com/en/1.8/topics/cache/](https://docs.djangoproject.com/en/1.8/topics/cache/)。
- en: See also
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using database query expressions* recipe
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数据库查询表达式*菜谱'
- en: The *Caching the method return value* recipe
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*缓存方法返回值*菜谱'
- en: Using signals to notify administrators about new entries
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用信号通知管理员关于新条目的信息
- en: Django framework has a concept of signals, which are similar to events in JavaScript.
    There is a handful of built-in signals that you can use to trigger actions before
    and after initialization of a model, saving or deleting an instance, migrating
    the database schema, handling a request, and so on. Moreover, you can create your
    own signals in your reusable apps and handle them in other apps. In this recipe,
    you will learn how to use signals to send emails to administrators whenever a
    specific model is saved.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: Django框架有一个名为信号的概念，类似于JavaScript中的事件。有几个内置的信号可以在模型初始化前后、保存或删除实例、迁移数据库模式、处理请求等操作时触发。此外，你可以在你的可重用应用程序中创建自己的信号，并在其他应用程序中处理它们。在这个菜谱中，你将学习如何使用信号在特定模型保存时向管理员发送电子邮件。
- en: Getting ready
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `viral_videos` app that we created in the *Using database
    query expressions* recipe.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在*使用数据库查询表达式*菜谱中创建的`viral_videos`应用程序开始。
- en: How to do it...
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to create notifications to administrators:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建通知管理员：
- en: 'Create the `signals.py` file with the following content:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`signals.py`文件：
- en: '[PRE43]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create the `apps.py` file with the following content:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的`apps.py`文件：
- en: '[PRE44]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Update the `__init__.py` file with the following content:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新包含以下内容的`__init__.py`文件：
- en: '[PRE45]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Make sure that you have `ADMINS` set in the project settings, as follows:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保在项目设置中已设置`ADMINS`，如下所示：
- en: '[PRE46]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: How it works...
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `ViralVideosAppConfig` app configuration class has the `ready()` method,
    which will be called when all the models of the project are loaded in the memory.
    According to the Django documentation, *signals allow certain senders to notify
    a set of receivers that some action has taken place*. In the `ready()` method,
    we will import, therefore, registering the `inform_administrators()` signal receiver
    for the `post_save` signal, and limiting it to handle only signals, where the
    `ViralVideo` model is the sender. Therefore, whenever we save the `ViralVideo`
    model, the `inform_administrators()` function will be called. The function checks
    whether a video is newly created. In that case, it sends an e-mail to the system
    administrators that are listed in `ADMINS` in the settings.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`ViralVideosAppConfig`应用程序配置类有一个`ready()`方法，当所有项目模型被加载到内存中时会被调用。根据Django文档，*信号允许某些发送者通知一组接收者某个动作已经发生*。在`ready()`方法中，我们将导入，因此注册了`inform_administrators()`信号接收器，并将其限制为仅处理`ViralVideo`模型作为发送者的信号。因此，每次我们保存`ViralVideo`模型时，`inform_administrators()`函数都会被调用。该函数检查视频是否是新创建的。如果是这样，它将向在设置中列出的系统管理员发送电子邮件。'
- en: Learn more about Django's signals from the official documentation at [https://docs.djangoproject.com/en/1.8/topics/signals/](https://docs.djangoproject.com/en/1.8/topics/signals/).
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 从官方文档中了解更多关于Django信号的信息，请访问[https://docs.djangoproject.com/en/1.8/topics/signals/](https://docs.djangoproject.com/en/1.8/topics/signals/)。
- en: See also
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using database query expressions* recipe
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数据库查询表达式*菜谱'
- en: The *Creating app configuration* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章。使用Django 1.8入门")中的*创建应用程序配置*菜谱，*使用Django 1.8入门*'
- en: The *Checking for missing settings* recipe
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*检查缺失的设置*菜谱'
- en: Checking for missing settings
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 检查缺失的设置
- en: Since Django 1.7, you can use an extensible **System Check Framework**, which
    replaces the old validate management command. In this recipe, you will learn how
    to create a check if the `ADMINS` setting is set. Similarly, you will be able
    to check whether different secret keys or access tokens are set for the APIs that
    you are using.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 自 Django 1.7 以来，您可以使用可扩展的 **系统检查框架**，它取代了旧版的 `validate` 管理命令。在本配方中，您将学习如何创建一个检查
    `ADMINS` 设置是否已设置的检查。同样，您将能够检查您使用的 API 是否设置了不同的密钥或访问令牌。
- en: Getting ready
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `viral_videos` app that we created in the *Using database
    query expressions* recipe and extended in the previous recipe.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 *使用数据库查询表达式* 配方中创建并扩展的 `viral_videos` 应用程序开始。
- en: How to do it...
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To use System Check Framework, follow these simple steps:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用系统检查框架，请按照以下简单步骤操作：
- en: 'Create the `checks.py` file with the following content:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建包含以下内容的 `checks.py` 文件：
- en: '[PRE47]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Import the checks in the `ready()` method of the app configuration, as follows:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在应用配置的 `ready()` 方法中导入检查，如下所示：
- en: '[PRE48]'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'To try the check that you just created, remove or comment out the `ADMINS`
    setting and run the `check` management command in your virtual environment, as
    shown in the following:'
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要尝试您刚刚创建的检查，请删除或注释掉 `ADMINS` 设置，并在您的虚拟环境中运行 `check` 管理命令，如下所示：
- en: '[PRE49]'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: How it works...
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The System Check Framework has a bunch of checks in the models, fields, database,
    administration, authentication, content types, and security, where it raises errors
    or warnings if something in the project is not set correctly. Additionally, you
    can create your own checks similar to what we did in this recipe.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 系统检查框架在模型、字段、数据库、管理、认证、内容类型和安全方面有一系列检查，如果项目中某些设置不正确，它会引发错误或警告。此外，您还可以创建类似于本配方中我们所做的自己的检查。
- en: We have registered the `settings_check()` function, which returns a list with
    a warning if there is no `ADMINS` setting defined for the project.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已注册了 `settings_check()` 函数，该函数在没有为项目定义 `ADMINS` 设置时返回一个包含警告的列表。
- en: Besides the `Warning` instances from the `django.core.checks` module, the returned
    list can also contain instances of the `Debug`, `Info`, `Error`, and `Critical`
    classes or any other class inheriting from `django.core.checks.CheckMessage`.
    Debugs, infos, and warnings would fail silently; whereas, errors and criticals
    would prevent the project from running.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 除了来自 `django.core.checks` 模块的 `Warning` 实例外，返回的列表还可以包含 `Debug`、`Info`、`Error`
    和 `Critical` 类的实例或任何继承自 `django.core.checks.CheckMessage` 的其他类的实例。调试、信息和警告会静默失败；而错误和临界错误会阻止项目运行。
- en: 'In this example, the check is tagged as a `compatibility` check. The other
    options are: `models`, `signals`, `admin`, and `security`.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，检查被标记为 `compatibility` 检查。其他选项包括：`models`、`signals`、`admin` 和 `security`。
- en: Learn more about System Check Framework from the official documentation at [https://docs.djangoproject.com/en/1.8/topics/checks/](https://docs.djangoproject.com/en/1.8/topics/checks/).
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 从官方文档中了解更多关于系统检查框架的信息，请访问 [https://docs.djangoproject.com/en/1.8/topics/checks/](https://docs.djangoproject.com/en/1.8/topics/checks/)。
- en: See also
  id: totrans-237
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using database query expressions* recipe
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数据库查询表达式* 的配方'
- en: The *Using signals to notify administrators about new entries* recipe
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用信号通知管理员关于新条目* 的配方'
- en: The *Creating app configuration* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with Django 1.8"), *Getting Started with Django 1.8*
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [第 1 章](ch01.html "第 1 章。使用 Django 1.8 入门") 的 *创建应用配置* 配方中，*使用 Django 1.8
    入门*
