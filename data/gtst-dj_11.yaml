- en: Chapter 11. Using AJAX with Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。在Django中使用AJAX
- en: AJAX is an acronym for Asynchronous JavaScript and XML. This technology allows
    a browser to asynchronously communicate with the server using JavaScript. Refreshing
    the web page is not necessarily required to perform an action on the server.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: AJAX是异步JavaScript和XML的缩写。这项技术允许浏览器使用JavaScript与服务器异步通信。不一定需要刷新网页来执行服务器上的操作。
- en: Many web applications have been released that run on AJAX. A web application
    is often described as a website containing only one page and which performs all
    operations with an AJAX server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 已发布许多基于AJAX的Web应用程序。Web应用程序通常被描述为只包含一个页面的网站，并且使用AJAX服务器执行所有操作。
- en: If you are not using a library, using AJAX requires a lot of lines of code to
    be compatible with several browsers. When including jQuery, it is possible to
    make easy AJAX requests while at the same time being compatible with many browsers.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不使用库，使用AJAX需要大量代码行才能与多个浏览器兼容。包含jQuery后，可以轻松进行AJAX请求，同时与许多浏览器兼容。
- en: 'In this chapter, we will cover:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Working with JQuery
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JQuery
- en: JQuery basics
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JQuery基础
- en: Working with AJAX in the task manager
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任务管理器中使用AJAX
- en: Working with jQuery
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用jQuery
- en: jQuery is a JavaScript library designed to effectively manipulate the DOM of
    the HTML page. The **DOM** (**Document Object Model**) is the internal structure
    of the HTML code, and jQuery greatly simplifies the handling.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery是一个旨在有效操作HTML页面的DOM的JavaScript库。**DOM**（**文档对象模型**）是HTML代码的内部结构，jQuery极大地简化了处理过程。
- en: 'The following are some advantages of jQuery:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是jQuery的一些优点：
- en: DOM manipulation is possible with CSS 1-3 selectors
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM操作可以使用CSS 1-3选择器
- en: It integrates AJAX
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它集成了AJAX
- en: It is possible to animate the page with visual effects
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以使用视觉效果来使页面动画化
- en: Good documentation with numerous examples
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 良好的文档，有许多示例
- en: Many libraries have been created around jQuery
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 围绕jQuery创建了许多库
- en: jQuery basics
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: jQuery基础
- en: In this chapter, we use jQuery to make AJAX requests. Before using jQuery, let's
    understand its basics.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们使用jQuery进行AJAX请求。在使用jQuery之前，让我们先了解其基础知识。
- en: CSS selectors in jQuery
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: jQuery中的CSS选择器
- en: 'CSS selectors used in style sheets can effectively retrieve an item with very
    little code. This is a feature that is so interesting that it is implemented in
    the HTML5 Selector API with the following syntax:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在样式表中使用的CSS选择器可以有效地检索具有非常少代码的项目。这是一个非常有趣的功能，它以以下语法实现在HTML5选择器API中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'jQuery also allows us to use CSS selectors. To do the same thing with jQuery,
    you must use the following syntax:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery还允许我们使用CSS选择器。要使用jQuery执行相同的操作，必须使用以下语法：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: At the moment, it is better to use jQuery than the Selector API because jQuery
    1.x.x guarantees great compatibility with older browsers.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，最好使用jQuery而不是选择器API，因为jQuery 1.x.x保证与旧版浏览器的兼容性很好。
- en: Getting back the HTML content
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取HTML内容
- en: 'It is possible to get back the HTML code between two tags with the `html()`
    method:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`html()`方法获取两个标签之间的HTML代码：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This line will display an alert with the HTML content of the `<div id="div_1">`
    tag. Concerning the input and textarea tags, it is possible to recover their content
    in the same way as with the `val()` method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这行将显示一个警报，其中包含`<div id="div_1">`标签的HTML内容。关于输入和文本区域标签，可以以与`val()`方法相同的方式恢复它们的内容。
- en: Setting HTML content in an element
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在元素中设置HTML内容
- en: Changing the content of a tag is very simple because we're using the same method
    as the one we used for recovery. The main difference between the two is that we
    will send a parameter to the method.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 更改标签的内容非常简单，因为我们使用了与恢复相同的方法。两者之间的主要区别在于我们将一个参数发送到方法。
- en: 'Thus, the following instruction will add a button in the div tag:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下指令将在div标签中添加一个按钮：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Looping elements
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环元素
- en: 'jQuery also allows us to loop all the elements that match a selector. To do
    this, you must use the `each()` method as shown in the following example:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: jQuery还允许我们循环所有与选择器匹配的元素。为此，您必须使用`each()`方法，如下例所示：
- en: '[PRE4]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Importing the jQuery library
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入jQuery库
- en: 'To use jQuery, you must first import the library. There are two ways to add
    jQuery to a web page. Each method has its own advantages, as outlined here:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用jQuery，必须首先导入库。将jQuery添加到网页有两种方法。每种方法都有其自己的优势，如下所述：
- en: Download jQuery and import it from our web server. Using this method, we keep
    control over the library and we are sure that the file will be reachable if we
    have our own website too.
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载jQuery并从我们的Web服务器导入。使用此方法，我们可以控制库，并确保文件在我们自己的网站上也是可访问的。
- en: Use the hosted libraries of the Google-hosted bookstores reachable from any
    website. The advantage is that we avoid an HTTP request to our server, which saves
    a bit of power.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Google托管书店的托管库，可从任何网站访问。优点是我们避免向我们的服务器发出HTTP请求，从而节省了一些功率。
- en: In this chapter, we will host jQuery on our web server to not be dependent on
    a host.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将在我们的Web服务器上托管jQuery，以免受主机的限制。
- en: We will import jQuery in all the pages of our application because we might need
    multiple pages. In addition, the cache of the browser will keep jQuery for some
    time so as not to download it too often. For this, we will download jQuery 1.11.0
    and save it on the `TasksManager/static/javascript/lib/jquery-1.11.0.js` file.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在应用程序的所有页面中导入jQuery，因为我们可能需要多个页面。此外，浏览器的缓存将保留jQuery一段时间，以免频繁下载。为此，我们将下载jQuery
    1.11.0并保存在`TasksManager/static/javascript/lib/jquery-1.11.0.js`文件中。
- en: 'Then, you must add the following line in the head tag of the `base.html` file:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您必须在`base.html`文件的head标签中添加以下行：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: With these changes, we can use jQuery in all the pages of our website, and we
    can add lines in the `head` block from the template which extends `base.html`.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，我们可以在网站的所有页面中使用jQuery，并且可以在扩展`base.html`的模板中的`head`块中添加行。
- en: Working with AJAX in the task manager
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在任务管理器中使用AJAX
- en: 'In this section, we will modify the page that displays the list of tasks for
    deleting the tasks to be carried out in AJAX. To do this, we will perform the
    following steps:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一部分，我们将修改显示任务列表的页面，以便在AJAX中执行删除任务。为此，我们将执行以下步骤：
- en: Add a `Delete` button on the `task_list` page.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`task_list`页面上添加一个`删除`按钮。
- en: Create a JavaScript file that will contain the AJAX code and the function that
    will process the return value of the AJAX request.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个JavaScript文件，其中包含AJAX代码和处理AJAX请求返回值的函数。
- en: Create a Django view that will delete the task.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个Django视图来删除任务。
- en: 'We will add the Delete button by modifying the `tasks_list.html` template.
    To do this, you must change the `for` task in task loop in `tasks_list` as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过修改`tasks_list.html`模板来添加删除按钮。为此，您必须将`tasks_list`中的`for`任务循环更改为以下内容：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'In the preceding code, we added an `id` property to the `<tr>` tag. This property
    will be useful in the JavaScript code to delete the task line when the page will
    receive the AJAX response. We also replaced the **Delete** link with a **Delete**
    button that executes the JavaScript `task_delete()` function. The new button will
    call the `task_delete()` function to execute the AJAX request. This function accepts
    two parameters:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们向`<tr>`标签添加了一个`id`属性。这个属性将在JavaScript代码中很有用，当页面接收到AJAX响应时，它将删除任务行。我们还用一个执行JavaScript
    `task_delete()` 函数的**删除**按钮替换了**删除**链接。新按钮将调用`task_delete()`函数来执行AJAX请求。这个函数接受两个参数：
- en: The identifier of the task
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任务的标识符
- en: The URL of the AJAX request
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AJAX请求的URL
- en: 'We will create this function in the `static/javascript/task.js` file by adding
    the following code:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`static/javascript/task.js`文件中创建这个函数，添加以下代码：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We must add the following lines after the `title_html` block in the `tasks_list.html`
    template to import `task.js` in the template:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在`tasks_list.html`模板中的`title_html`块之后添加以下行，以在模板中导入`task.js`：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We must add the following URL to the `urls.py` file:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在`urls.py`文件中添加以下URL：
- en: '[PRE9]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This URL will use the views contained in the `view/ajax/task_delete_ajax.py`
    file. We must create the AJAX module with the `__init__.py file` and our `task_delete_ajax.py`
    file with the following content:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这个URL将使用`view/ajax/task_delete_ajax.py`文件中包含的视图。我们必须创建带有`__init__.py`文件的AJAX模块，以及我们的`task_delete_ajax.py`文件，内容如下：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Summary
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned how to use jQuery. We saw how to easily access the
    DOM with this library. We also created an AJAX request on our `TasksManager` application
    and we wrote the view to process this request.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何使用jQuery。我们看到了如何使用这个库轻松访问DOM。我们还在我们的`TasksManager`应用程序上创建了一个AJAX请求，并编写了处理这个请求的视图。
- en: In the next chapter, we will learn how to deploy a Django project based on the
    Nginx and PostgreSQL server. We will see and discuss the installation step by
    step.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何部署基于Nginx和PostgreSQL服务器的Django项目。我们将逐步看到并讨论安装步骤。
