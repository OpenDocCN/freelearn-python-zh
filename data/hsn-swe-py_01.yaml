- en: Programming versus Software Engineering
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程与软件工程
- en: 'Development shops often have specific levels, grades, or ranks that their developers
    fall into, indicating the levels of experience, expertise, and industry wisdom
    expected of staff at each level. These may vary (perhaps wildly) from location
    to location, but a typical structure looks something like the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 开发商通常有特定的级别、等级或职级，表示每个级别员工所期望的经验、专业知识和行业智慧水平。这些可能会因地点而异（也许相差很大），但典型的结构看起来像以下内容：
- en: '**Junior developers:** A junior developer is typically someone that doesn''t
    have much programming experience. They probably know the basics of writing code,
    but they are not expected to know much beyond that.'
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初级开发人员：初级开发人员通常是指没有太多编程经验的人。他们可能知道编写代码的基础知识，但不会超出这个范围。
- en: '**Developers:** Mid-level developers (referred to by whatever formal title
    might apply) usually have enough experience that they can be relied on to write
    reasonably solid code, with little to no supervision. They probably have enough
    experience to determine implementation details and strategies, and they will often
    have some understanding of how different chunks of code can (and do) interact
    with each other, and what approaches will minimize difficulties in those interactions.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发人员：中级开发人员（根据可能适用的任何正式头衔）通常具有足够的经验，可以依靠他们编写相当可靠的代码，几乎不需要监督。他们可能有足够的经验来确定实施细节和策略，并且他们通常会对不同代码块如何（以及会）相互作用以及什么方法将最小化这些交互中的困难有一定的了解。
- en: '**Senior developers:** Senior developers have enough experience - even if it''s
    focused on a set of specific products/projects - to firmly grasp all of the technical
    skills involved in typical development efforts. At this point in their careers,
    they will almost always have a solid handle on a lot of the non-technical (or
    semi-technical) skills that are involved, as well—especially policies and procedures,
    and strategies and tactics that encourage or enforce business values such as stability
    and the predictability of development efforts. They may not be experts in those
    areas, but they will know when to call out risks, and they will often have several
    options to suggest for mitigating those risks.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 高级开发人员：高级开发人员具有足够的经验 - 即使专注于一组特定的产品/项目 - 以牢固掌握典型开发工作中涉及的所有技术技能。在他们的职业生涯中，他们几乎总是能够牢牢掌握许多涉及的非技术（或半技术）技能，尤其是政策和程序，以及鼓励或强制执行业务价值的策略和战术，如稳定性和开发工作的可预测性。他们可能不是这些领域的专家，但他们会知道何时提出风险，并且通常会建议几种减轻这些风险的选择。
- en: Above the level of the senior developer, the terminology and definition often
    varies even more wildly, and the skill set usually starts to focus more on business-related
    abilities and responsibilities (scope and influence) than on technical capabilities
    or expertise.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在高级开发人员的水平之上，术语和定义通常变化更大，技能集通常开始更多地关注业务相关的能力和责任（范围和影响），而不是技术能力或专业知识。
- en: 'The dividing line between programming and software engineering falls somewhere
    within the differences between developers and senior developers, as far as technical
    capabilities and expertise are concerned. At a junior level, and sometimes at
    a developer level, efforts are often centered around nothing more than writing
    code to meet whatever requirements apply, and conforming to whatever standards
    are in play. Software engineering, at a senior developer level, has a big-picture
    view of the same end results. The bigger picture involves awareness of, and attention
    paid to, the following things:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编程和软件工程之间的分界线在于开发人员和高级开发人员之间的差异，就技术能力和专业知识而言。在初级水平上，有时甚至在开发人员水平上，努力往往只集中在编写代码以满足任何适用的要求，并遵守正在进行的任何标准。在高级开发人员水平上，软件工程具有对相同最终结果的宏观视图。更大的画面涉及对以下事项的意识和关注：
- en: Standards, both technical/developmental and otherwise, including best practices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 标准，包括技术/开发和其他方面的最佳实践
- en: The goals that code is written to accomplish, including the business values
    that are attached to them
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码以实现的目标，包括与之相关的业务价值
- en: The shape and scope of the entire system that the code is a part of
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码所属的整个系统的形状和范围
- en: The bigger picture
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更大的画面
- en: So, what does this bigger picture look like? There are three easily-identifiable
    areas of focus, with a fourth (call it **user interaction**) that either weaves
    through the other three or is broken down into its own groups.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这个更大的画面是什么样的？有三个易于识别的关注领域，还有一个（称之为用户交互）要么贯穿其中，要么被分解成自己的组。
- en: Software engineering must pay heed to standards, especially non-technical (business)
    ones, and also best practices. These may or may not be followed but, since they
    are standards or best practices for a reason, not following them is something
    that should always be a conscious (and defensible) decision. It's not unusual
    for business-process standards and practices to span multiple software components,
    which can make them difficult to track if a certain degree of discipline and planning
    isn't factored into the development process to make them more visible. On the
    purely development-related side, standards and best practices can drastically
    impact the creation and upkeep of code, its ongoing usefulness, and even just
    the ability to find a given chunk of code, when necessary.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程必须注意标准，特别是非技术（业务）标准，以及最佳实践。这些可能会或可能不会被遵循，但由于它们是标准或最佳实践，不遵循它们应该始终是一个有意识的（并且可辩护的）决定。业务流程标准和实践通常会跨越多个软件组件，如果在开发过程中没有考虑到一定程度的纪律和规划，使它们更加可见，那么它们可能会难以跟踪。在纯粹与开发相关的一面，标准和最佳实践可以极大地影响代码的创建和维护，以及其持续的有用性，甚至只是在必要时找到给定代码块的能力。
- en: It's rare for code to be written simply for the sake of writing code. There's
    almost always some other value associated with it, especially if there's business
    value or actual revenue associated with a product that the code is a part of.
    In those cases, understandably, the people that are paying for the developmental
    effort will be very interested in ensuring that everything works as expected (code-quality)
    and can be deployed when expected (process-predictability).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 编写代码的目的很少只是为了编写代码。通常情况下，它几乎总是与其他价值相关联，特别是如果与产品相关联的业务价值或实际收入。在这些情况下，可以理解的是，支付开发工作的人会非常感兴趣，以确保一切都按预期工作（代码质量），并且可以在预期时间部署（过程可预测性）。
- en: Code-quality concerns will be addressed during the development of the `hms_sys`
    project a few chapters from now, and process-predictability is mostly impacted
    by the developmental methodologies discussed in [Chapter 5](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=29&action=edit), *The
    hms_sys System-Project*.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 代码质量问题将在几章后的`hms_sys`项目开发中得到解决，而过程可预测性主要受到[第5章](https://cdp.packtpub.com/hands_on_software_engineering_with_python/wp-admin/post.php?post=29&action=edit)中讨论的开发方法论的影响，*hms_sys系统项目*。
- en: The remaining policy-and-procedure related concerns are generally managed by
    setting up and following various standards, processes, and best practices during
    the startup of a project (or perhaps a development team). Those items - things
    such as setting up source control, having standard coding conventions, and planning
    for repeatable, automated testing - will be examined in some detail during the
    set up chapter for the `hms_sys` project. Ideally, once these kinds of developmental
    process are in place, the ongoing activities that keep them running and reliable
    will just become habits, a part of the day-to-day process, almost fading into
    the background.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 剩下的政策和程序相关的问题通常通过建立和遵循各种标准、流程和最佳实践来管理，在项目（或者开发团队）启动期间将对这些项目进行详细检查——例如，设置源代码控制、制定标准的编码约定，并计划可重复、自动化的测试。理想情况下，一旦这些开发过程得以建立，保持其运行和可靠性的持续活动将成为习惯，成为日常工作的一部分，几乎淡出了背景。
- en: Finally, with more of a focus on the code side, software engineering must, by
    necessity, pay heed to entire systems, keeping a universal view of the system
    in mind. Software is composed of a lot of elements that might be classified as
    **atomic**; they are indivisible units in and of themselves, under normal circumstances.
    Just like their real-world counterparts, when they start to interact, things get
    interesting, and hopefully useful. Unfortunately, that's also when unexpected
    (or even dangerous) behaviors—bugs—usually start to appear.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，更多地关注代码方面，软件工程必须必要地关注整个系统，牢记系统的普遍视角。软件由许多元素组成，这些元素可能被分类为**原子**；它们在正常情况下是不可分割的单位。就像它们的现实世界的对应物一样，当它们开始互动时，事情变得有趣，希望也是有用的。不幸的是，这也是意外（甚至危险）行为——bug——通常开始出现的时候。
- en: This awareness is, perhaps, one of the more difficult items to cultivate. It
    relies on knowledge that may not be obvious, documented, or readily available.
    In large or complex systems, it may not even be obvious where to start looking,
    or what kinds of question to ask to try to find the information needed to acquire
    that knowledge.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这种意识可能是更难培养的。它依赖于可能不明显、未记录或不容易获得的知识。在大型或复杂的系统中，甚至可能不明显从何处开始查找，或者要问什么样的问题来尝试找到获取这些知识所需的信息。
- en: Asking questions
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提出问题
- en: There can be as many distinct questions that can be asked about any given chunk
    of code as there are chunks of code to ask about—even very simple code, living
    in a complex system, can raise questions in response to questions, and more questions
    in response to those questions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于任何给定的代码块，可以提出与代码块一样多的不同问题，即使是非常简单的代码，在复杂的系统中，也会因问题而引发更多问题。
- en: 'If there isn''t an obvious starting point, starting with the following really
    basic questions is a good first step:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有明显的起点，从以下非常基本的问题开始是一个很好的第一步：
- en: Who will be using the functionality?
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁将使用这个功能？
- en: What will they be doing with it?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们将用它做什么？
- en: When, and where, will they have access to it?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时，何地他们将能够访问它？
- en: What problem is it trying to solve? For example, why do they need it?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它试图解决什么问题？例如，他们为什么需要它？
- en: 'How does it have to work? If detail is lacking, breaking this one down into
    two separate questions is useful:'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它必须如何工作？如果细节不足，将其分解为两个单独的问题是有用的：
- en: What should happen if it executes successfully?
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果执行成功会发生什么？
- en: What should happen if the execution fails?
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果执行失败会发生什么？
- en: 'Teasing out more information about the whole system usually starts with something
    as basic as the following questions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 挖掘整个系统的更多信息通常从以下基本问题开始：
- en: What other parts of the system does this code interact with?
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这段代码与系统的哪些其他部分有交互？
- en: How does it interact with them?
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它如何与他们互动？
- en: 'Having identified all of the moving parts, thinking about "What happens if…"
    scenarios is a good way to identify potential points where things will break,
    risks, and dangerous interactions. You can ask questions such as the following:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在确定了所有的活动部分后，思考“如果发生了什么…”的情景是识别潜在的故障点、风险和危险交互的好方法。您可以提出以下问题：
- en: What happens if this argument, which expects a number, is handed a string?
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果这个期望一个数字的参数被传入一个字符串会发生什么？
- en: What happens if that property isn't the object that's expected?
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果该属性不是预期的对象会发生什么？
- en: What happens if some other object tries to change this object while it's already
    being changed?
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果其他对象尝试在它已经被更改时改变这个对象会发生什么？
- en: Whenever one question has been answered, simply ask, What else? This can be
    useful for verifying whether the current answer is reasonably complete.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 每当一个问题得到答案时，只需问，还有什么？这有助于验证当前答案是否相当完整。
- en: 'Let''s see this process in action. To provide some context, a new function
    is being written for a system that keeps track of mineral resources on a map-grid,
    for three resources: gold, silver, and copper. Grid locations are measured in
    meters from a common origin point, and each grid location keeps track of a floating-point
    number, from 0.0 to 1.0, which indicates how likely it is that resource will be
    found in the grid square. The developmental dataset already includes four default
    nodes - at (**0**,**0**), (**0**,**1**), (**1**,**0**), and (**1**,**1**) - with
    no values, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看这个过程是如何进行的。为了提供一些背景，正在为一个系统编写一个新的函数，该系统用于跟踪地图网格上的矿产资源，包括金、银和铜三种资源。网格位置是从一个公共原点以米为单位测量的，每个网格位置都记录了一个浮点数，范围从0.0到1.0，表示在网格方块中发现资源的可能性有多大。开发数据集已经包括了四个默认节点
    - 在（**0**，**0**）、（**0**，**1**）、（**1**，**0**）和（**1**，**1**）处 - 没有值，如下所示：
- en: '![](assets/c7c4e5f5-abce-47cd-b3b7-9160f48dc08c.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c7c4e5f5-abce-47cd-b3b7-9160f48dc08c.png)'
- en: 'The system already has some classes defined to represent individual map nodes,
    and functions to provide basic access to those nodes and their properties, from
    whatever central data store they live in:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 系统已经定义了一些类来表示单个地图节点，并提供了一些函数来从它们所在的中央数据存储中提供对这些节点及其属性的基本访问：
- en: '![](assets/db3ca33b-46ea-408d-9aa3-5ad8696b907f.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/db3ca33b-46ea-408d-9aa3-5ad8696b907f.png)'
- en: 'Constants, exceptions, and functions for various purposes already exist, as
    follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 常量、异常和各种目的的函数已经存在，如下：
- en: '**`node_resource_names`**: This contains all of the resource names that the
    system is concerned with, and can be thought of and treated as a list of strings: `[''gold'',''silver'',''copper'']`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`node_resource_names`**：这包含了系统关注的所有资源名称，并且可以被视为和处理为字符串列表：`[''gold''，''silver''，''copper'']`'
- en: '**`NodeAlreadyExistsError`**: An exception that will be raised if an attempt
    is made to create a `MapNode` that already exists'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`NodeAlreadyExistsError`**：如果尝试创建一个已经存在的`MapNode`，将会引发异常'
- en: '**`NonexistentNodeError`**: An exception that will be raised if a request is
    made for a `MapNode` that doesn''t exist'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`NonexistentNodeError`**：如果请求一个不存在的`MapNode`，将会引发异常'
- en: '**`OutOfMapBoundsError`**: An exception that will be raised if a request is
    made for a `MapNode` that isn''t allowed to exist in the map area'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`OutOfMapBoundsError`**：如果请求一个不允许存在于地图区域的`MapNode`，将会引发异常'
- en: '**`create_node(x,y)`**: Creates and returns a new, default `MapNode`, registering
    it in the global dataset of nodes in the process'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`create_node(x,y)`**：创建并返回一个新的默认`MapNode`，在此过程中将其注册到全局节点数据集中'
- en: '**`get_node(x,y)`**: Finds and returns a `MapNode` at the specified (*x*, *y*)
    coordinate location in the global dataset of available nodes'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`get_node(x,y)`**：在全局可用节点数据集中找到并返回指定（*x*，*y*）坐标位置的`MapNode`'
- en: 'A developer makes an initial attempt at writing the code to set a value for
    a single resource at a given node, as a part of a project. The resulting code
    looks as follows (assume that all necessary imports already exist):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者首次尝试编写代码来为给定节点设置单个资源的值，作为项目的一部分。生成的代码如下（假设所有必要的导入已经存在）：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This code is functional, from the perspective that it will do what it''s supposed
    to (and what the developer expected) for a set of simple tests; for example, executing,
    as follows:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 从功能上讲，这段代码可以正常运行，它将按照开发者的预期进行一系列简单的测试；例如，执行以下操作：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The results are in the following output:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 结果如下输出：
- en: '![](assets/0e2284f7-d991-4bb1-bf0b-1da0003f42d0.png)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/0e2284f7-d991-4bb1-bf0b-1da0003f42d0.png)'
- en: 'By that measure, there''s nothing wrong with the code and its functions, after
    all. Now, let''s ask some of our questions, as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 按照这个标准，代码和它的函数都没有问题。现在，让我们提出一些问题，如下：
- en: '**Who will be using this functionality?**: The function may be called, by either
    of two different application front-ends, by on-site surveyors, or by post-survey
    assayers. The surveyors probably won''t use it often, but if they see obvious
    signs of a deposit during the survey, they''re expected to log it with a 100%
    certainty of finding the resource(s) at that grid location; otherwise, they''ll
    leave the resource rating completely alone.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 谁将使用这个功能？：这个函数可能会被两个不同的应用程序前端中的任何一个调用，由现场测量员或测量后的评估员。测量员可能不经常使用它，但如果他们在调查中看到明显的矿床迹象，他们应该以100%的确定性记录下来，表示在该网格位置发现资源的可能性；否则，他们将完全不改变资源评级。
- en: '**What will they be doing with it?**: Between the base requirements (to set
    a value for a single resource at a given node) and the preceding answer, this
    feels like it''s already been answered.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 他们将如何使用它？：在基本要求（为给定节点设置单个资源的值）和前面的答案之间，这个问题似乎已经得到了回答。
- en: '**When, and where, do they have access to it?**: Through a library that''s
    used by the surveyor and assayer applications. No one will use it directly, but
    it will be integrated into those applications.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时、何地可以访问它？：通过被测量员和评估员应用程序使用的库。没有人会直接使用它，但它将被集成到这些应用程序中。
- en: '**How should it work?**: This has already been answered, but raises the question:
    Will there ever be a need to add more than one resource rating at a time? That''s
    probably worth nothing, if there''s a good place to implement it.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该如何工作？：这个问题已经得到了回答，但是引发了另一个问题：是否会有必要一次添加多个资源评级？如果有一个好的地方可以实现它，那可能值得注意。
- en: '**What other parts of the system does this code interact with?**: There''s
    not much here that isn''t obvious from the code; it uses `MapNode` objects, those
    objects'' resources, and the `get_node` function.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这段代码与系统的其他部分有什么交互？：除了代码中明显的部分外，它还使用`MapNode`对象、这些对象的资源和`get_node`函数。
- en: '**What happens if an attempt is made to alter an existing** **MapNode?**: With
    the code as it was originally written, this behaves as expected. This is the happy
    path that the code was written to handle, and it works.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果尝试更改现有的`MapNode`会发生什么？：根据最初编写的代码，这是预期的行为。这是代码编写来处理的正常路径，它有效。
- en: '**What happens if a node doesn''t already exist?**: The fact that there is
    a `NonexistentNodeError` defined is a good clue that at least some map operations
    require a node to exist before they can complete. Execute a quick test against
    that by calling the existing function, as follows:'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果节点不存在会发生什么？**：定义了`NonexistentNodeError`这一事实是一个很好的线索，表明至少有一些地图操作需要节点在完成之前存在。通过调用现有函数对其进行快速测试，如下所示：'
- en: '[PRE2]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding command results in the following:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令导致以下结果：
- en: '![](assets/c3b6bb6d-1640-4d53-8198-55949df63780.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/c3b6bb6d-1640-4d53-8198-55949df63780.png)'
- en: This is the result because the development data doesn't have a MapNode at that
    location yet.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为开发数据在该位置尚未具有MapNode。
- en: '**What happens if a node can''t exist at a given location?**: Similarly, there''s
    an `OutOfMapBoundsError` defined. Since there are no out-of-bounds nodes in the
    development data, and the code won''t currently get past the fact that an out-of-bounds
    node doesn''t exist, there''s no good way to see what happens if this is attempted.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果节点在给定位置无法存在会发生什么？**：同样，定义了`OutOfMapBoundsError`。由于开发数据中没有越界节点，并且代码目前无法通过越界节点不存在这一事实，因此无法很好地看到如果尝试这样做会发生什么。'
- en: '**What happens if the *z*-value isn''t known at the time?**: Since the `create_node`
    function doesn''t even expect a *z*-value, but MapNode instances have one, there''s
    a real risk that calling this function on an existing node would overwrite an
    existing z-altitude value, on an existing node. That, in the long run, could be
    a critical bug.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果在此时不知道*z*值会发生什么？**：由于`create_node`函数甚至不期望*z*值，但MapNode实例具有一个，因此在现有节点上调用此函数可能会覆盖现有的z-高度值，从长远来看，这可能是一个关键错误。'
- en: '**Does this meet all of the various developmental standards that apply?**:
    Without any details about standards, it''s probably fair to assume that any standards
    that were defined would probably include, at a minimum, the following:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**这是否符合所有适用的各种开发标准？**：没有关于标准的任何细节，可以合理地假设定义的任何标准可能至少包括以下内容：'
- en: Naming conventions for code elements, such as function names and arguments;
    an existing function at the same logical level as `get_node`, using `SetNodeResources`
    as the name of the new function, while perfectly legal syntactically, may be violating
    a naming convention standard.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码元素的命名约定，如函数名和参数；在与`get_node`相同逻辑级别的现有函数中，使用`SetNodeResources`作为新函数的名称，虽然在语法上完全合法，但可能违反了命名约定标准。
- en: At least some of the effort towards documentation, of which there's none.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 至少有一些关于文档的努力，但没有。
- en: Some inline comments (maybe), if there is a need to explain parts of the code
    to future readers—there are none of these also, although, given the amount of
    code in this version and the relatively straightforward approach, it's arguable
    whether there would be any need.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些内联注释（也许），如果需要向未来的读者解释代码的某些部分——这也没有，尽管在这个版本中的代码量相当大，且采用了相对直接的方法，但是否有任何需要是值得讨论的。
- en: '**What should happen if the execution fails?**: It should probably throw explicit
    errors, with reasonably detailed error messages, if something fails during execution.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果执行失败会发生什么？**：如果执行过程中出现问题，它应该抛出明确的错误，并提供合理详细的错误消息。'
- en: '**What happens if an invalid value is passed for any of the arguments?**: Some
    of them can be tested by executing the current function (as was done previously),
    while supplying invalid arguments—an out-of -range number first, then an invalid
    resource name.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果为任何参数传递了无效值会发生什么？**：其中一些可以通过执行当前函数进行测试（如之前所做），同时提供无效参数——首先是超出范围的数字，然后是无效的资源名称。'
- en: 'Consider the following code, executed with an invalid number:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下使用无效数字执行的代码：
- en: '[PRE3]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code results in the following output:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码导致以下输出：
- en: '![](assets/a403a49e-0273-43ed-960c-53c5da369780.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a403a49e-0273-43ed-960c-53c5da369780.png)'
- en: 'Also, consider the following code, with an invalid resource type:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，考虑以下带有无效资源类型的代码：
- en: '[PRE4]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code results in the following:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码导致以下结果：
- en: '![](assets/a13f61c6-b316-4290-9afb-81b7b0e9fd56.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/a13f61c6-b316-4290-9afb-81b7b0e9fd56.png)'
- en: The function itself can either succeed or raise an error during execution, judging
    by these examples; so, ultimately, all that really needs to happen is that those
    potential errors have to be accounted for, in some fashion.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 根据这些示例，函数本身可能在执行过程中成功或引发错误；因此，实际上只需要对这些潜在错误进行某种方式的处理。
- en: 'Other questions may come to mind, but the preceding questions are enough to
    implement some significant changes. The final version of the function, after considering
    the implications of the preceding answers and working out how to handle the issues
    that those answers exposed, is as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有其他问题，但前面的问题足以实施一些重大变化。在考虑了前面答案的影响并解决了这些答案暴露出的问题后，函数的最终版本如下：
- en: '[PRE5]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Stripping out the comments and documentation for the moment, this may not look
    much different from the original code—only nine lines of code were added—but the
    differences are significant, as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时剥离注释和文档，这可能看起来与原始代码并无太大不同——只添加了九行代码，但差异很大，如下所示：
- en: It doesn't assume that a node will always be available.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不假设节点总是可用的。
- en: If the requested node doesn't exist, it creates a new one to operate on, using
    the existing function defined for that purpose.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果请求的节点不存在，则创建一个新节点进行操作，使用为此目的定义的现有函数。
- en: It doesn't assume that every attempt to add a new resource will succeed.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它不假设每次尝试添加新资源都会成功。
- en: When such an attempt fails, it raises an error that shows what happened.
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当这样的尝试失败时，它会引发一个显示发生了什么的错误。
- en: All of these additional items are direct results of the questions asked earlier,
    and of making conscious decisions on how to deal with the answers to those questions.
    That kind of end result is where the difference between the programming and software
    engineering mindsets really appears.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些额外的项目都是早些时候提出的问题的直接结果，以及对如何处理这些问题的答案做出的有意识的决定。这种最终结果是编程和软件工程思维方式之间的区别真正显现的地方。
- en: Summary
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: There's more to software engineering than just writing code. Experience; attention
    to detail; and asking questions about how the code functions, interacts with the
    rest of a system, and so on; are important aspects of evolving from a programming
    to a software engineering mindset. The time required to acquire experience can
    be shortened, perhaps significantly, by simply asking the right questions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程不仅仅是编写代码。经验；对细节的关注；以及对代码功能、与系统其他部分的交互等方面提出问题；都是从编程思维向软件工程思维转变的重要方面。获得经验所需的时间可以通过简单地提出正确的问题来缩短，也许可以显著地缩短。
- en: There are also factors completely outside the realm of creating and managing
    code that require examination and questioning. They mainly focus on what can,
    or should, be expected from the pre-development planning around a developmental
    effort, and that starts with understanding a typical software development life
    cycle.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 除了创建和管理代码的领域之外，还有一些完全不同的因素需要进行审查和质疑。它们主要关注的是在开发工作周围的预开发规划中可以或应该期望什么，这始于对典型软件开发生命周期的理解。
