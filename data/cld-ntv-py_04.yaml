- en: Interacting Data Services
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交互数据服务
- en: In the previous chapter, we built up our application using JavaScript/HTML and
    integrated it with RESTful APIs with AJAX. You also learned how to set cookies
    on the client and sessions on the server for a better experience for users. In
    this chapter, we will focus on improving our backend database by using a NoSQL
    database, such as MongoDB instead of an SQLite database, which we are currently
    using, or a MySQL database, and integrate our application with it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用JavaScript/HTML构建了我们的应用程序，并将其与RESTful API和AJAX集成。您还学习了如何在客户端设置cookie和在服务器端设置会话，以提供更好的用户体验。在本章中，我们将专注于通过使用NoSQL数据库（如MongoDB）而不是我们目前使用的SQLite数据库或MySQL数据库来改进我们的后端数据库，并将我们的应用程序与之集成。
- en: 'The topics that we will cover in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖的主题如下：
- en: Setting up MongoDB service
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置MongoDB服务
- en: Integrating an application with MongoDB
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用程序与MongoDB集成
- en: MongoDB - How it is advantageous, and why are we using it?
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB - 它的优势和我们为什么使用它？
- en: Before we begin with the MongoDB installation, let's understand why we have
    chosen the MongoDB database and what it is needed for.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始MongoDB安装之前，让我们了解为什么选择了MongoDB数据库以及它的需求。
- en: 'Let''s take a look at the advantages of MongoDB over RDBMS:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看MongoDB相对于RDBMS的优势：
- en: '**Flexible schema**: MongoDB is a document database in which one collection
    holds multiple documents. We don''t need to define the schema of the documents
    prior to inserting the data, which means MongoDB defines the document''s schema
    based on the data inserted into the documents; whereas, in an RDBMS, we need to
    define the schema of the tables before inserting data into it.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 灵活的模式：MongoDB是一个文档数据库，一个集合可以包含多个文档。我们不需要在插入数据之前定义文档的模式，这意味着MongoDB根据插入文档的数据来定义文档的模式；而在关系型数据库中，我们需要在插入数据之前定义表的模式。
- en: '**Less complexity**: There are no complex joins in MongoDB, as we have in the
    case of RDBMS (for example: MySQL) databases.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**较少的复杂性**：在MongoDB中没有复杂的连接，就像在关系数据库管理系统中（例如：MySQL）数据库中一样。'
- en: '**Easier scalability**: It is very easy to scale out MongoDB as compared to
    an RDBMS.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更容易扩展**：与关系数据库管理系统相比，MongoDB的扩展非常容易。'
- en: '**Fast accessibility**: There is faster retrieval of data in MongoDB as compared
    to an RDBMS, that is, the MySQL database.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**快速访问**：与MySQL数据库相比，MongoDB中的数据检索速度更快。'
- en: '**Dynamic querying**: MongoDB supports dynamic queries on documents, being
    a document-based query language, which makes it advantageous over other RDBMS,
    which could be MySQL.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**动态查询**：MongoDB支持对文档进行动态查询，它是一种基于文档的查询语言，这使其比其他关系型数据库（如MySQL）更具优势。'
- en: 'The following are the reasons why we should use MongoDB:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们应该使用MongoDB的原因：
- en: MongoDB stores data in JSON-style documents, which makes it easy to integrate
    with the application
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB以JSON样式文档存储数据，这使得它很容易与应用程序集成。
- en: We can set an index on any file and property
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以在任何文件和属性上设置索引
- en: MongoDB does auto-sharding, which makes it easy to manage and enables it to
    be faster
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB自动分片，这使得它易于管理并使其更快
- en: MongoDB provides replication and high availability when used in a cluster
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB在集群中使用时提供复制和高可用性
- en: 'There are different use cases in which to use MongoDB. Let''s check them here:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的用例可以使用MongoDB。让我们在这里检查它们：
- en: Big data
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 大数据
- en: User data management
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户数据管理
- en: Content delivery and management
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容交付和管理
- en: 'The following image shows the architecture diagram of MongoDB integration with
    your web application:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图片显示了MongoDB与您的Web应用程序集成的架构图：
- en: '![](img/00046.jpeg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00046.jpeg)'
- en: MongoDB terminology
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB术语
- en: 'Let''s look at the different terminologies of MongoDB, which are listed next:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看MongoDB的不同术语，接下来列出了它们：
- en: '**Database**: This is similar to the database that we have in **RDBMS (Relational
    Database Management System),** but, instead of tables, in MongoDB a database is
    a physical container of collections. MongoDB can have multiple databases.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库**：这类似于我们在**关系数据库管理系统（RDBMS）**中拥有的数据库，但是在MongoDB中，数据库是集合的物理容器，而不是表。MongoDB可以有多个数据库。'
- en: '**Collections**: This is basically a combination of documents that has its
    own schema. Collections don''t contribute toward the schema of documents. It''s
    quite equivalent to the tables in RDBMS.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集合**：这基本上是具有自己模式的文档的组合。集合不对文档的模式做出贡献。这与关系型数据库中的表相当。'
- en: '**Document**: This is similar to a tuple/row in an RDBMS. It''s a set of key-value
    pairs. They have a dynamic schema, where each document may or may not have the
    same schema within a single collection. They may have different fields as well.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**文档**：这类似于关系数据库管理系统中的元组/行。它是一组键值对。它们具有动态模式，其中每个文档在单个集合中可能具有相同或不同的模式。它们也可能具有不同的字段。'
- en: 'The following code is a sample collection for your understanding:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码是您理解的一个示例集合：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: MongoDB represents JSON documents in a binary-encoded format called **BSON**.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: MongoDB以一种名为**BSON**的二进制编码格式表示JSON文档。
- en: Setting up MongoDB
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置MongoDB
- en: In the current scenario, we are working on the Ubuntu workstation, so let's
    install MongoDB on Ubuntu as follows.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在当前情况下，我们正在使用Ubuntu工作站，因此让我们按照以下步骤在Ubuntu上安装MongoDB。
- en: We will use the Ubuntu package management tool, such as `apt`, to install the
    MongoDB packages by authenticating the distributor-signed packages with the GPG
    keys.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Ubuntu软件包管理工具，如`apt`，通过使用GPG密钥对经过分发者签名的软件包进行身份验证来安装MongoDB软件包。
- en: 'To import the GPG keys, use the following command:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要导入GPG密钥，请使用以下命令：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we need to set the MongoDB repository path to our operating system, as
    follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要将MongoDB存储库路径设置为我们的操作系统，如下所示：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Once this is added, we need to update our Ubuntu repository as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 添加了这个之后，我们需要按照以下步骤更新我们的Ubuntu存储库：
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that the repository is updated, let''s install the latest stable MongoDB
    release using the following command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在存储库已更新，让我们使用以下命令安装最新的稳定MongoDB版本：
- en: '[PRE4]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Once it is installed, the MongoDB service should run on port `27017`. We can
    check the service status using the following command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，MongoDB服务应在端口`27017`上运行。我们可以使用以下命令检查服务状态：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'If it does not run, you can start the service by executing the following command:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它没有运行，您可以通过执行以下命令来启动服务：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Great! Now we have installed MongoDB on our local machine. At this point in
    time, we only need a standalone MongoDB instance, but if you want to create a
    shared MongoDB cluster, then you can follow the steps defined on the following
    link:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！现在我们已经在本地机器上安装了MongoDB。此时，我们只需要一个独立的MongoDB实例，但如果您想创建一个共享的MongoDB集群，那么可以按照以下链接中定义的步骤进行操作：
- en: '[https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/](https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/](https://docs.mongodb.com/manual/tutorial/deploy-shard-cluster/)'
- en: So, now that we have enabled the MongoDB service on our machine, we are good
    to go to create a database on top of it.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在我们已经在我们的机器上启用了MongoDB服务，我们可以开始在其上创建数据库。
- en: Initializing the MongoDB database
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 初始化MongoDB数据库
- en: Previously, when we were creating a database in SQLite3, we needed to create
    a database and define the schema of tables manually. Since MongoDB is schemaless,
    we will directly add new documents, and collections will get created automatically.
    Also, in this case, we will initialize the database using Python only.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，在SQLite3中创建数据库时，我们需要手动创建数据库并定义表的架构。由于MongoDB是无模式的，我们将直接添加新文档，并且集合将自动创建。在这种情况下，我们将仅使用Python初始化数据库。
- en: Before we add new documents into MongoDB, we need to install the Python driver
    for it, that is, `pymongo`.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们向MongoDB添加新文档之前，我们需要为其安装Python驱动程序，即`pymongo`。
- en: 'Add the `pymongo` driver to `requirements.txt`, and then install it using the
    `pip` package manager as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 将`pymongo`驱动程序添加到`requirements.txt`，然后使用`pip`软件包管理器进行安装，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once it is installed, we will import it by adding the following line to `app.py`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，我们将通过在`app.py`中添加以下行来导入它：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now that we have imported the MongoDB driver for Python, we will create a connection
    to MongoDB and define a function in `app.py`, which will initialize the database
    with initial **data documents**, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为Python导入了MongoDB驱动程序，我们将在`app.py`中创建一个连接到MongoDB的连接，并定义一个函数，该函数将使用初始**数据文档**初始化数据库，如下所示：
- en: '[PRE9]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: It is recommended that you initialize your resource collections with some documents
    in the collection so that we get some response data when we begin testing the
    APIs, otherwise, you can go ahead without initializing the collections.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 建议您使用一些文档初始化资源集合，以便在开始测试API时获得一些响应数据，否则，您可以在不初始化集合的情况下继续。
- en: 'The preceding function should be called before starting the application; our
    main function will be something like this:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动应用程序之前应调用上述函数；我们的主要函数将如下所示：
- en: '[PRE10]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Integrating microservices with MongoDB
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将微服务与MongoDB集成
- en: Since we have initialized our MongoDB database, it's time to rewrite our microservices
    functions to store and retrieve data from MongoDB instead of SQLite 3.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经初始化了MongoDB数据库，现在是时候重写我们的微服务函数，以便从MongoDB而不是SQLite 3中存储和检索数据。
- en: Previously, we used the `curl` command to get a response from the API; instead
    of that, we will use a new tool called **POSTMAN** ([https://www.getpostman.com](https://www.getpostman.com)),
    which is an application that will help you build, test, and document your APIs
    faster.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，我们使用`curl`命令从API获取响应；而现在，我们将使用一个名为**POSTMAN**（[https://www.getpostman.com](https://www.getpostman.com)）的新工具，该工具是一个可以帮助您更快地构建、测试和记录API的应用程序。
- en: 'For more information on the workings of POSTMAN, read the documentation at
    the following link: [https://www.getpostman.com/docs/](https://www.getpostman.com/docs/)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 有关POSTMAN工作原理的更多信息，请阅读以下链接的文档：[https://www.getpostman.com/docs/](https://www.getpostman.com/docs/)
- en: POSTMAN is supported by both Chrome and Firefox, as it can be integrated very
    easily as an add-on.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: POSTMAN支持Chrome和Firefox，因为它可以很容易地集成为一个附加组件。
- en: 'First, we will modify the `api_version` info API to collect the information
    from MongoDB instead of SQLite3, as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将修改`api_version`信息API，以从MongoDB中收集信息，而不是从SQLite3中收集，如下所示：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, if you test it using POSTMAN, it should give an output that looks somewhat
    like this:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您使用POSTMAN进行测试，它应该会给出类似于以下内容的输出：
- en: '![](img/00047.jpeg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00047.jpeg)'
- en: Great! It works. Now, let's update the other resources of microservices.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！它有效。现在，让我们更新微服务的其他资源。
- en: Working with user resources
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理用户资源
- en: We will modify our user resources' API functions for different methods in `app.py`
    as follows.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按以下方式修改`app.py`中不同方法的用户资源API函数。
- en: GET api/v1/users
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET api/v1/users
- en: The GET API function gets a complete list of users.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: GET API函数获取完整的用户列表。
- en: 'In order to get the complete user list from the MongoDB database, we will rewrite
    the `list_users()` function as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从MongoDB数据库中获取完整的用户列表，我们将按以下方式重写`list_users()`函数：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Let''s test it on POSTMAN and see if the API responds as expected:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在POSTMAN上进行测试，看看API是否按预期响应：
- en: '![](img/00048.jpeg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00048.jpeg)'
- en: Since we currently have only one document in the user's collection of the MongoDB
    database, you can see only one user in the users list in the preceding screenshot.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们目前在MongoDB数据库的用户集合中只有一个文档，因此在上述屏幕截图中只能看到一个用户。
- en: GET api/v1/users/[user_id]
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET api/v1/users/[user_id]
- en: This API function gets the details of a specific user.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 此API函数获取特定用户的详细信息。
- en: 'In order to list the details of a specific user from the MongoDB database,
    use the `modify list_user(user_id)` function as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从MongoDB数据库中列出特定用户的详细信息，请使用以下方式调用`modify list_user(user_id)`函数：
- en: '[PRE13]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Let''s test it on POSTMAN to see if it works as expected:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在POSTMAN上测试一下，看看它是否按预期工作：
- en: '![](img/00049.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00049.jpeg)'
- en: 'Also, we need to test the scenario where a user entry is not present; try this
    out, as shown in the following code:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们需要测试用户条目不存在的情况；请尝试以下代码：
- en: '![](img/00050.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00050.jpeg)'
- en: POST api/v1/users
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST api/v1/users
- en: This API function adds new users to the users list.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该API函数用于将新用户添加到用户列表中。
- en: 'In this code, we will rewrite the `add_user(new_user)` function to interact
    with MongoDB to add a user to the users collection:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们将重写`add_user(new_user)`函数与MongoDB进行交互，将用户添加到用户集合中：
- en: '[PRE14]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now that we have modified our function, one more thing needs to be done--earlier,
    IDs were generated by SQLite 3, but now, we need to generate them with a random
    module by adding it to its route function, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修改了我们的函数，还有一件事需要做——之前，ID是由SQLite 3生成的，但现在，我们需要通过将其添加到其路由函数中使用随机模块来生成它们，如下所示：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Let's add one record to the users list to test whether it works as expected.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向用户列表添加一条记录，以测试它是否按预期工作。
- en: 'The following screenshot shows the output status of adding a new record using
    POSTMAN in MongoDB:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在MongoDB中使用POSTMAN添加新记录的输出状态：
- en: '![](img/00051.jpeg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00051.jpeg)'
- en: Let's validate whether it has updated the properties in the MongoDB collection
    as well.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证是否已在MongoDB集合中更新了属性。
- en: 'The following screenshot validates that our new record has been added successfully:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图验证了我们的新记录已成功添加：
- en: '![](img/00052.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00052.jpeg)'
- en: PUT api/v1/users/[user_id]
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PUT api/v1/users/[user_id]
- en: This API function is used to update the attributes of the users in the MongoDB
    users collection.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 该API函数用于更新MongoDB用户集合中用户的属性。
- en: 'In order to update the documents in the MongoDB user collection for a specific
    user, we will need to rewrite the `upd_user(user)` method as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更新MongoDB用户集合中特定用户的文档，我们需要将`upd_user(user)`方法重写如下：
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now that we have updated the method, let's test it on POSTMAN and check the
    response.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更新了方法，让我们在POSTMAN上测试一下，并检查响应。
- en: 'The following screenshot shows the response of the update API request using
    POSTMAN:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了使用POSTMAN进行更新API请求的响应：
- en: '![](img/00053.jpeg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00053.jpeg)'
- en: 'Let''s validate the user document to check whether the fields were modified
    or not:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证用户文档，检查字段是否已修改：
- en: '![](img/00054.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00054.jpeg)'
- en: DELETE api/v1/users
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DELETE api/v1/users
- en: This API deletes a specific user from the users list.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 该API从用户列表中删除特定用户。
- en: 'In this case, we will modify the `del_user(del_user)` method to delete a user
    from the MongoDB users collection as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们将修改`del_user(del_user)`方法，以从MongoDB用户集合中删除用户，如下所示：
- en: '[PRE17]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Let''s test it out over POSTMAN and see if the response is as expected:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在POSTMAN上测试一下，看看响应是否符合预期：
- en: '![](img/00055.jpeg)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00055.jpeg)'
- en: 'Now that we''ve deleted one user, let''s see if it made any changes in the
    overall users list:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经删除了一个用户，让我们看看是否对整体用户列表造成了任何更改：
- en: '![](img/00056.jpeg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00056.jpeg)'
- en: Great! We have made changes in all the RESTful API URLs for the user resources,
    and validated them as well.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了！我们已经对用户资源的所有RESTful API URL进行了更改，并进行了验证。
- en: Working with the tweets resources
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理推文资源
- en: Now that our user resources APIs are working fine with MongoDB as the database
    service, we will do the same for the tweets resources as well.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的用户资源API在MongoDB作为数据库服务上运行良好，我们将对推文资源做同样的操作。
- en: GET api/v2/tweets
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET api/v2/tweets
- en: This function gets the complete list of tweets from all the users.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数从所有用户获取所有推文的完整列表。
- en: 'Let''s update our `list_tweets()` method to begin getting the list of tweets
    from the tweets collection of MongoDB using the following code snippet:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更新我们的`list_tweets()`方法，开始使用以下代码片段从MongoDB的推文集合中获取推文列表：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now that we have updated the code, let''s test it out on POSTMAN. The following
    screenshot lists all the tweets by making an API request using POSTMAN:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经更新了代码，让我们在POSTMAN上测试一下。以下截图列出了通过POSTMAN使用API请求的所有推文：
- en: '![](img/00057.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00057.jpeg)'
- en: GET api/v2/tweets/[user_id]
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GET api/v2/tweets/[user_id]
- en: This function gets the tweets from a specific user.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数从特定用户获取推文。
- en: 'In order to get tweets from a specific user from the tweets collection, we
    need to modify our current `list_tweet(user_id)` function as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从推文集合中获取特定用户的推文，我们需要修改我们当前的`list_tweet(user_id)`函数如下：
- en: '[PRE19]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let''s test out our API and validate whether it is working as expected or not:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们测试一下我们的API，并验证它是否按预期工作：
- en: '![](img/00058.jpeg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00058.jpeg)'
- en: POST api/v2/tweets
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: POST api/v2/tweets
- en: This function adds new tweets from an existing user.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数从现有用户添加新推文。
- en: 'In this case, we need to modify our `add_tweet(new_tweet)` method to interact
    with users, and the tweets collection in MongoDB to add new tweets, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们需要修改我们的`add_tweet(new_tweet)`方法与用户进行交互，并在MongoDB中的推文集合中添加新推文，如下所示：
- en: '[PRE20]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now that we have modified the record, let''s test it out. The following screenshot
    shows the success status of the `POST` request to add new tweets using POSTMAN:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经修改了记录，让我们测试一下。以下截图显示了使用POSTMAN添加新推文的`POST`请求的成功状态：
- en: '![](img/00059.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00059.jpeg)'
- en: 'Let''s now validate whether the newly added tweets were updated in the tweet
    list, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们验证新添加的推文是否在推文列表中更新，如下截图所示：
- en: '![](img/00060.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00060.jpeg)'
- en: Summary
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we migrated our file-based database service (SQLite) to a NoSQL-document-based
    database service (MongoDB). You learned how to integrate MongoDB with your RESTful
    APIs to respond to hold data, and respond based on the request from the client.
    The next chapter will be more interesting, as we will build our frontend web views
    using React.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将基于文件的数据库服务（SQLite）迁移到NoSQL文档型数据库服务（MongoDB）。您将学习如何将MongoDB与您的RESTful
    API集成，以响应客户端的请求并保存数据。下一章将更有趣，因为我们将使用React构建我们的前端Web视图。
