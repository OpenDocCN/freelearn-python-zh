- en: Chapter 8. Raising Your Productivity with CBV
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章。通过CBV提高生产力
- en: '**Class-based views** (**CBVs**) are views generated from models. In simple
    terms, we can say that these are like ModelForms, in that they simplify the view
    and work for common cases.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**基于类的视图**（**CBV**）是从模型生成的视图。简单来说，我们可以说这些就像ModelForms，因为它们简化了视图并适用于常见情况。'
- en: 'CRUD is the short form we use when referring to the four major operations performed
    on a database: create, read, update, and delete. CBV is the best way to create
    pages that perform these actions very quickly.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: CRUD是我们在提到数据库上执行的四个主要操作时使用的简写：创建、读取、更新和删除。CBV是创建执行这些操作的页面的最佳方式。
- en: 'Creating forms for creating and editing a model or database table data is a
    very repetitive part of the job of a developer. They may spend a lot of time in
    doing this properly (validation, prefilled fields, and so on). With CBV, Django
    allows a developer to perform CRUD operations for a model in less than 10 minutes.
    They also have an important advantage: if the model evolves and CBVs were well
    done, changing the model will automatically change the CRUD operations within
    the website. In this case, adding a line in our models allows us to save tens
    or hundreds of lines of code.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 为创建和编辑模型或数据库表数据创建表单是开发人员工作中非常重复的部分。他们可能会花费很多时间来做这件事（验证、预填字段等）。使用CBV，Django允许开发人员在不到10分钟内执行模型的CRUD操作。它们还有一个重要的优势：如果模型发生变化并且CBV做得很好，更改模型将自动更改网站内的CRUD操作。在这种情况下，在我们的模型中添加一行代码就可以节省数十甚至数百行代码。
- en: CBVs still have a drawback. They are not very easy to customize with advanced
    features or those that are not provided. In many cases, when you try to perform
    a CRUD operation that has some peculiarities, it is better to create a new view.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: CBV仍然有一个缺点。它们不太容易使用高级功能或未提供的功能进行自定义。在许多情况下，当您尝试执行具有某些特殊性的CRUD操作时，最好创建一个新视图。
- en: You might ask why we did not directly study them—we could have saved a lot of
    time, especially when adding a developer in the database. This is because these
    views are generic. They are suitable for simple operations that do not require
    a lot of changes. When we need a complex form, CBVs will not be useful and will
    even extend the duration of programming.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能会问为什么我们没有直接研究它们-我们本可以节省很多时间，特别是在数据库中添加开发人员时。这是因为这些视图是通用的。它们适用于不需要很多更改的简单操作。当我们需要一个复杂的表单时，CBV将不起作用，甚至会延长编程时间。
- en: We should use CBVs because they allow us to save a lot of time that would normally
    be used in running CRUD operations on models.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该使用CBV，因为它们可以节省大量通常用于运行模型上的CRUD操作的时间。
- en: In this chapter, we will make the most of our `TasksManager` application. Indeed,
    we will enjoy the time savings offered by the CBVs to move quickly with this project.
    If you do not understand the functioning of CBVs immediately, it doesn't matter.
    What we have seen so far in previous chapters already allows us to make websites.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将充分利用我们的`TasksManager`应用程序。事实上，我们将享受CBV所提供的时间节省，以便快速推进这个项目。如果你不能立即理解CBV的运作方式，没关系。在前几章中我们已经可以制作网站了。
- en: 'In this chapter, we will try to improve our productivity by covering the following
    topics:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将尝试通过以下主题来提高我们的生产力：
- en: We will use the `CreateView` CBV to quickly build the page to add projects
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将使用`CreateView` CBV快速构建添加项目页面
- en: We will see later how to display a list of objects and use the paging system
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们稍后将看到如何显示对象列表并使用分页系统
- en: We will then use the `DetailView` CBV to display the project information
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后我们将使用`DetailView` CBV来显示项目信息
- en: We will then learn how to change the data in a record with the `UpdateView`
    CBV
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将学习如何使用`UpdateView` CBV更改记录中的数据
- en: We will learn how to change the form generated by a CBV
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将学习如何更改CBV生成的表单
- en: We will then create a page to delete a record
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个页面来删除记录
- en: Then, we will eventually create a child class of `UpdateView` to make using
    it more flexible in our application
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，我们最终将创建`UpdateView`的子类，以使其在我们的应用程序中更加灵活
- en: The CreateView CBV
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CreateView CBV
- en: The `CreateView` CBV allows you to create a view that will automatically generate
    a form based on a model and automatically save the data in this form. It can be
    compared to ModelForm, except that we do not need to create a view. Indeed, all
    the code for this will be placed in the `urls.py` file except in special cases.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`CreateView` CBV允许您创建一个视图，该视图将根据模型自动生成一个表单，并自动保存该表单中的数据。它可以与ModelForm进行比较，只是我们不需要创建一个视图。实际上，除了特殊情况外，所有这些代码都将放在`urls.py`文件中。'
- en: An example of minimalist usage
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极简用法示例
- en: 'We will create a CBV that will allow us to create a project. This example aims
    to show that you can save even more time than with Django forms. We will be able
    to use the template used for the creation of forms in the previous chapter''s
    project. Now, we will change our `create_project` URL as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个CBV，允许我们创建一个项目。这个例子旨在表明，您可以比使用Django表单节省更多的时间。我们将能够使用上一章项目中用于创建表单的模板。现在，我们将更改我们的`create_project`
    URL如下：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We will add the following lines at the beginning of the `urls.py` file:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`urls.py`文件的开头添加以下行：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In our new URL, we used the following new features:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的新URL中，我们使用了以下新功能：
- en: '`CreateView.as_view`: We call the method `as_view` of the CBV `CreateView`.
    This method returns a complete view to the user. Moreover, we return multiple
    parameters in this method.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CreateView.as_view`：我们调用CBV`CreateView`的`as_view`方法。这个方法将返回一个完整的视图给用户。此外，我们在这个方法中返回多个参数。'
- en: '`model`: This defines the model that will apply the CBV.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model`：这定义了将应用CBV的模型。'
- en: '`template_name`: This defines the template that will display the form. As the
    CBV uses `ModelForm`, we do not need to change our `create_project.html` template.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template_name`：这定义了将显示表单的模板。由于CBV使用`ModelForm`，我们不需要更改我们的`create_project.html`模板。'
- en: '`success_url`: This defines the URL to which we will be redirected once the
    change has been taken into account. This parameter is not very DRY because we
    cannot use the `name` property of the URL. When we extend our CBV, we will see
    how to use the name of the URL to be redirected.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success_url`：这定义了一旦更改已经被考虑到我们将被重定向到的URL。这个参数不是很DRY，因为我们不能使用URL的`name`属性。当我们扩展我们的CBV时，我们将看到如何使用URL的名称进行重定向。'
- en: 'That''s all! The three lines that we have added to the `urls.py` file will
    perform the following actions:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我们已经添加到`urls.py`文件中的三行将执行以下操作：
- en: Generate the form
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成表单
- en: Generate the view that sends the form to the template with or without errors
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成将表单发送到模板的视图，无论是否有错误。
- en: Data is sent by the user
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户发送数据
- en: 'We just used one of the most interesting features of Django. Indeed, with only
    three lines, we have been doing what would have taken more than a hundred lines
    without any framework. We will also write the CBV that will allow us to add a
    task. Have a look at the following code:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚使用了Django最有趣的功能之一。事实上，仅用三行代码，我们就完成了一个没有任何框架需要超过一百行的工作。我们还将编写一个CBV，它将允许我们添加一个任务。看一下以下代码：
- en: '[PRE2]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We then need to duplicate the `create_project.html` template and change the
    link in the `base.html` template. Our new view is functional, and we used the
    same template for project creation. This is a common method because it saves a
    lot of time for the developer, but there is a more rigorous way to proceed.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要复制`create_project.html`模板并更改`base.html`模板中的链接。我们的新视图是功能性的，并且我们使用了相同的模板来创建项目。这是一种常见的方法，因为它为开发人员节省了大量时间，但是有一种更严谨的方法可以进行。
- en: 'To test the code, we can add the following link to the end of the `article_content`
    block of the `index.htm`l template:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试代码，我们可以在`index.html`模板的`article_content`块的末尾添加以下链接：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Working with ListView
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用ListView
- en: '`ListView` is a CBV that displays a list of records for a given model. The
    view is generated to send a template object from which we view the list.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`ListView`是一个CBV，用于显示给定模型的记录列表。该视图生成以发送模板对象，从中我们查看列表。'
- en: An example of minimalist usage
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极简用法示例
- en: 'We will look at an example displaying the list of projects and create a link
    to the details of a project. To do this, we must add the following lines in the
    `urls.py` file:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看一个显示项目列表并创建指向项目详情的链接的示例。为此，我们必须在`urls.py`文件中添加以下行：
- en: '[PRE4]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the following URLs to the file:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中添加以下URL：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will create the template that will be used to display the results in a tabular
    form by adding the following lines in the `article_content` block after extending
    the `base.html` template:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过在`article_content`块中添加以下行来创建用于以表格形式显示结果的模板，这些行是在扩展`base.html`模板之后添加的：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We created the same list as in [Chapter 6](part0050.html#page "Chapter 6. Getting
    a Model's Data with Querysets"), *Getting a Model's Data with Querysets*, about
    the queryset. The advantage is that we used a lot less lines and we did not use
    any view to create it. In the next part, we will implement paging by extending
    this CBV.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了与[第6章](part0050.html#page "第6章。使用Querysets获取模型的数据")中相同的列表，关于查询集。优点是我们使用了更少的行，并且没有使用任何视图来创建它。在下一部分中，我们将通过扩展此CBV来实现分页。
- en: Extending ListView
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展ListView
- en: 'It is possible to extend the possibilities of the ListView CBV and customize
    them. This allows us to adapt the CBV to the needs of the websites. We can define
    the same elements as in the parameters in the `as_view` method, but it will be
    more readable and we can also override the methods. Depending on the type of CBV,
    spreading them allows you to:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 可以扩展ListView CBV的功能并对其进行自定义。这使我们能够根据网站的需求来调整CBV。我们可以在`as_view`方法中定义与参数中相同的元素，但这样更易读，我们还可以覆盖方法。根据CBV的类型，将它们分开可以让您：
- en: Change the model and template as we did in the URL
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 像我们在URL中所做的那样更改模型和模板
- en: Change the queryset to be executed
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改要执行的查询集
- en: Change the name of the object sent to the template
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改发送到模板的对象的名称
- en: Specify the URL that will redirect the user
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定将重定向用户的URL
- en: 'We will expand our first CBV by modifying the list of projects that we have
    done. We will make two changes to this list by sorting by title and adding pagination.
    We will create the `ListView.py` file in the `views/cbv` module. This file will
    contain our customized `listView`. It is also possible to choose the architecture.
    For example, we could create a file named `project.py` to store all the CBVs concerning
    the projects. This file will contain the following code:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过修改我们已完成的项目列表来扩展我们的第一个CBV。我们将对此列表进行两项更改，按标题排序并添加分页。我们将在`views/cbv`模块中创建`ListView.py`文件。该文件将包含我们定制的`listView`。也可以选择架构。例如，我们可以创建一个名为`project.py`的文件来存储所有关于项目的CBV。该文件将包含以下代码：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'From now on, the new page is functional. If we test it, we will realize that
    only the first five projects are displayed. Indeed, in the `Project_list` object,
    we defined a pagination of five items per page. To navigate through the list,
    we need to add the following code in the template before the end of the `article_content`
    block:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在开始，新页面是功能性的。如果我们测试它，我们会意识到只有前五个项目被显示。的确，在`Project_list`对象中，我们定义了每页五个项目的分页。要浏览列表，我们需要在模板的`article_content`块结束之前添加以下代码：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This part of the template allows us to create links to the preceding and following
    pages at the bottom of the page. With this example, we created a sorted list of
    projects with pagination very quickly. The extending of CBVs can be very convenient
    and allows us to adapt to more complex uses. After this complete example, we will
    create a CBV to display a list of developers. This list will be useful later in
    the book. We must add the following URL after importing the `ListView` class:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 模板的这一部分允许我们在页面底部创建到前后页面的链接。通过这个示例，我们非常快速地创建了一个带分页的项目排序列表。扩展CBV非常方便，可以让我们适应更复杂的用途。在完成此完整示例后，我们将创建一个CBV来显示开发人员列表。这个列表将在本书的后面很有用。在导入`ListView`类之后，我们必须添加以下URL：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We then use an inherited template of `base.html` and put the following code
    in the `article_content` block:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们使用`base.html`的继承模板，并将以下代码放入`article_content`块中：
- en: '[PRE12]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: We will notice that the name of the developer is an empty link. You should refill
    it when we create the page that displays the details of the developer. This is
    what we will do in the next section with `DetailView`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会注意到开发人员的名字是一个空链接。当我们创建显示开发人员详细信息的页面时，您应该重新填写它。这就是我们将在下一节中使用`DetailView`来做的。
- en: The DetailView CBV
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DetailView CBV
- en: The `DetailView` CBV allows us to display information from a registration model.
    This is the first CBV we will study that has URL parameters. In order to view
    the details of a record, it will send its ID to the CBV. We will study some examples.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`DetailView` CBV允许我们显示来自注册模型的信息。这是我们将学习的第一个具有URL参数的CBV。为了查看记录的详细信息，它将发送其ID到CBV。我们将学习一些例子。'
- en: An example of minimalist usage
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极简主义用法示例
- en: 'First, we will create a page that will display the details of a task. For this,
    we will create the URL by adding these lines in the `urls.py` file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建一个页面，显示任务的详细信息。为此，我们将通过在`urls.py`文件中添加以下行来创建URL：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this URL, we added the parameter-sending aspect. We have already discussed
    this type of URL in an earlier chapter when we covered querysets.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个URL中，我们添加了参数发送方面。我们已经在早期的章节中讨论过这种类型的URL，当时我们涵盖了查询集。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: This time, we really need to name the parameter `pk`; otherwise, the CBV will
    not work. `pk` means primary key, and it will contain the ID of the record you
    want to view.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这一次，我们真的需要命名参数`pk`；否则，CBV将无法工作。`pk`表示主键，它将包含您想要查看的记录的ID。
- en: 'Regarding the template, we will create the `en/public/task_detail.html` template
    and place the following code in the `article_content` block:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 关于模板，我们将创建`en/public/task_detail.html`模板，并将以下代码放置在`article_content`块中：
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In this code, we refer to the foreign keys `Developer` and `Project`. Using
    this syntax in the template, we call the `__ unicode__()` of the model in question.
    This enables the title of the project to be displayed. To test this piece of code,
    we need to create a link to a parameterized URL. Add this line to your `index.html`
    file:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段代码中，我们引用了外键`Developer`和`Project`。在模板中使用这种语法，我们调用了相关模型的`__unicode__()`。这使得项目的标题能够显示出来。为了测试这段代码，我们需要创建一个参数化URL的链接。将这行添加到您的`index.html`文件中：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This line will allow us to see the details of the first task. You can try to
    create a list of tasks and a link to `DetailView` in each row of the table. This
    is what we will do.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这行将允许我们查看第一个任务的细节。您可以尝试在表格的每一行中创建任务列表和`DetailView`的链接。这就是我们要做的。
- en: Extending DetailView
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展DetailView
- en: 'We will now create the page that displays the details of a developer and his/her
    tasks. To get it done, we''ll override the `DetailView` class by creating a `DetailView.py`
    file in the `views/cbv` module and add the following lines of code:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个页面，显示开发人员及其任务的详细信息。为了完成这个任务，我们将通过在`views/cbv`模块中创建一个`DetailView.py`文件来覆盖`DetailView`类，并添加以下代码行：
- en: '[PRE16]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We need to add the following lines of code to the `urls.py` file:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`urls.py`文件中添加以下行：
- en: '[PRE17]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'To see the main data and develop tasks, we create the `developer_detail.html`
    template. After extending from `base.html`, we must enter the following lines
    in the `article_content` block:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了查看主要数据和开发任务，我们创建`developer_detail.html`模板。在从`base.html`扩展后，我们必须在`article_content`块中输入以下行：
- en: '[PRE18]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This example has allowed us to see how to send data to the template while using
    CBVs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子让我们看到了如何在使用CBV时向模板发送数据。
- en: The UpdateView CBV
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: UpdateView CBV
- en: '`UpdateView` is the CBV that will create and edit forms easily. This is the
    CBV that saves more time compared to developing without the MVC pattern. As with
    `DetailView`, we will have to send the logins of the record to the URL. To address
    `UpdateView`, we will discuss two examples:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`UpdateView`是将轻松创建和编辑表单的CBV。与没有MVC模式的开发相比，这是节省更多时间的CBV。与`DetailView`一样，我们将不得不将记录的登录信息发送到URL。为了解决`UpdateView`，我们将讨论两个例子：'
- en: Changing a task for the supervisor to be able to edit a task
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了让主管能够编辑任务，改变任务
- en: Reducing the time spent to perform a task to develop
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 减少执行任务所需的时间
- en: An example of minimalist usage
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 极简主义用法示例
- en: 'This example will show how to create the page that will allow the supervisor
    to modify a task. As with other CBVs, we will add the following lines in the `urls.py`
    file:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这个示例将展示如何创建一个页面，允许主管修改任务。与其他CBV一样，我们将在`urls.py`文件中添加以下行：
- en: '[PRE19]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We will write a very similar template to the one we used for `CreateView`.
    The only difference (except the button text) will be the `action` field of the
    form, which we will define as `empty`. We will see how to fill the field at the
    end of this chapter. For now, we will make use of the fact that browsers submit
    the form to the current page when the field is empty. It remains visible so users
    can write the content to include in our `article_content` block. Have a look at
    the following code:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个与我们用于`CreateView`的模板非常相似的模板。唯一的区别（除了按钮文本之外）将是表单的`action`字段，我们将其定义为空。我们将看到如何在本章末尾填写该字段。现在，我们将利用浏览器在字段为空时提交表单到当前页面的事实。它仍然可见，因此用户可以编写要包含在我们的`article_content`块中的内容。看一下以下代码：
- en: '[PRE20]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This example is really simple. It could have been more DRY if we entered the
    name of the URL in the `success_url` property.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子真的很简单。如果我们在`success_url`属性中输入了URL的名称，它本来可以更加DRY。
- en: Extending the UpdateView CBV
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 扩展UpdateView CBV
- en: 'In our application, the life cycle of a task is the following:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的应用程序中，任务的生命周期如下：
- en: The supervisor creates the task without any duration
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 主管创建任务而不设置任何持续时间
- en: When the developer has completed the task, they save their working time
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当开发人员完成任务时，他们会保存他们的工作时间。
- en: 'We will work on the latter point, where the developer can only change the duration
    of the task. In this example, we will override the `UpdateView` class. To do this,
    we will create an `UpdateView.py` file in the `views/cbv` module. We need to add
    the following content:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后者上工作，开发者只能更改任务的持续时间。在这个例子中，我们将覆盖`UpdateView`类。为此，我们将在`views/cbv`模块中创建一个`UpdateView.py`文件。我们需要添加以下内容：
- en: '[PRE21]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'We may use this CBV with the following URL:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下URL来使用这个CBV：
- en: '[PRE22]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: For the `update_task_developer.html` template, we just need to duplicate the
    `update_task.html` template and modify its titles.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`update_task_developer.html`模板，我们只需要复制`update_task.html`模板并修改其标题。
- en: The DeleteView CBV
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: DeleteView CBV
- en: 'The `DeleteView` CBV can easily delete a record. It does not save a lot of
    time compared to a normal view, but it cannot be burdened with unnecessary views.
    We will show an example of task deletion. For this, we need to create the `DeleteView.py`
    file in the `views/cbv` module. Indeed, we need to override it because we will
    enter the name of the URL that we want to redirect. We can only put the URL in
    `success_url`, but we want our URL to be as DRY as possible. We will add the following
    code in the `DeleteView.py` file:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`DeleteView` CBV可以轻松删除记录。与普通视图相比，它并不节省很多时间，但它不会受到不必要视图的负担。我们将展示一个任务删除的例子。为此，我们需要在`views/cbv`模块中创建`DeleteView.py`文件。事实上，我们需要覆盖它，因为我们将输入我们想要重定向的URL的名称。我们只能将URL放在`success_url`中，但我们希望我们的URL尽可能DRY。我们将在`DeleteView.py`文件中添加以下代码：'
- en: '[PRE23]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the preceding code, the template will be used to confirm the deletion. Indeed,
    the `DeleteView` CBV will ask for user confirmation before deleting. We will add
    the following lines in the `urls.py` file to add the URL of the deletion:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码中，该模板将用于确认删除。事实上，`DeleteView` CBV将在删除之前要求用户确认。我们将在`urls.py`文件中添加以下行，以添加删除的URL：
- en: '[PRE24]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'To finish our task suppression page, we will create the `confirm_delete_task.html`
    template by extending `base.html` with the following content in the `article_content`
    block:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的任务抑制页面，我们将通过在`article_content`块中扩展`base.html`创建`confirm_delete_task.html`模板，并添加以下内容：
- en: '[PRE25]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Going further by extending the CBV
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过扩展CBV进一步
- en: CBVs allow us to save a lot of time during page creation by performing CRUD
    actions with our models. By extending them, it is possible to adapt them to our
    use and save even more time.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过扩展它们，CBV允许我们在页面创建过程中节省大量时间，通过对我们的模型执行CRUD操作。通过扩展它们，可以将它们适应我们的使用，并节省更多时间。
- en: Using a custom class CBV update
  id: totrans-113
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义类CBV更新
- en: 'To finish our suppression page, in this chapter, we have seen that CBVs allow
    us to not be burdened with unnecessary views. However, we have created many templates
    that are similar, and we override the CBV only to use the DRY URLs. We will fix
    these small imperfections. In this section, we will create a CBV and generic template
    that will allow us to:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成我们的抑制页面，在本章中，我们已经看到CBV允许我们不受不必要的视图的负担。然而，我们创建了许多相似的模板，并且我们只是为了使用DRY URL而覆盖了CBV。我们将修复这些小缺陷。在本节中，我们将创建一个CBV和通用模板，使我们能够：
- en: Use this CBV directly in the `urls.py` file
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接在`urls.py`文件中使用这个CBV
- en: Enter the `name` property URLs for redirection
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 输入重定向的URL的`name`属性
- en: Benefit from a template for all uses of these CBVs
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从一个模板中受益，用于这些CBV的所有用途
- en: 'Before writing our CBV, we will modify the `models.py` file, giving each model
    a `verbose_name` property and `verbose_name_plural`. For this, we will use the
    `Meta` class. For example, the `Task` model will become the following:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写我们的CBV之前，我们将修改`models.py`文件，为每个模型赋予`verbose_name`属性和`verbose_name_plural`。为此，我们将使用`Meta`类。例如，`Task`模型将变成以下内容：
- en: '[PRE26]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will create an `UpdateViewCustom.py` file in the `views/cbv` folder and
    add the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在`views/cbv`文件夹中创建一个`UpdateViewCustom.py`文件，并添加以下代码：
- en: '[PRE27]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'We then need to create the template that displays the form. For this, we need
    to create the `UpdateViewCustom.html` file and add the following content:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们需要创建显示表单的模板。为此，我们需要创建`UpdateViewCustom.html`文件，并添加以下内容：
- en: '[PRE28]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'To test these new CBVs, we will change the `update_task` URL in the following
    manner:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这些新的CBV，我们将以以下方式更改`update_task` URL：
- en: '[PRE29]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'The following is a screenshot that shows what the CBV will display:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个屏幕截图，显示了CBV将显示的内容：
- en: '![Using a custom class CBV update](img/00023.jpeg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![使用自定义类CBV更新](img/00023.jpeg)'
- en: Summary
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'In this chapter, we have learned how to use one of the most powerful features
    of Django: CBVs. With them, developers can run efficient CRUD operations.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学会了如何使用Django最强大的功能之一：CBV。借助它们，开发人员可以运行高效的CRUD操作。
- en: We also learned how to change CBVs to suit our use by adding pagination on a
    list of items or displaying the work of a developer on the page that displays
    the information for this user.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还学会了如何通过在项目列表上添加分页或在显示有关用户信息的页面上显示开发者的工作来改变CBV以适应我们的使用。
- en: In the next chapter, we will learn how to use session variables. We will explore
    this with a practical example. In this example, we will modify the task list to
    show the last task accessed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习如何使用会话变量。我们将通过一个实际的例子来探讨这个问题。在这个例子中，我们将修改任务列表，以显示最后访问的任务。
