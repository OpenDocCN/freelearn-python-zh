- en: Microservice API Gateways
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务API网关
- en: As microservices are typically fine-grained, any large-scale application has
    to consist of many microservices. With hundreds of microservices in an IT environment,
    the IT complexity is bound to escalate. The operational, monitoring, measurement,
    and management complexities of microservices are definitely greater, and hence
    the idea of leveraging API gateways originated and has flourished for not only
    mitigating rising complexity, but also for abstracting away all kinds of common
    capabilities from microservice source code. In this best practices chapter, we
    explain the role and responsibility of API gateways in the microservice era. Further
    on, you can also see how the reliability of microservice applications is ensured
    through the smart leveraging of an API gateway infrastructure.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于微服务通常是细粒度的，任何大型应用都必须由许多微服务组成。在IT环境中拥有数百个微服务，IT复杂性必然会增加。微服务的运营、监控、测量和管理复杂性肯定更大，因此，利用API网关的想法应运而生，并蓬勃发展，不仅是为了减轻不断上升的复杂性，而且是为了从微服务源代码中抽象出所有类型的通用能力。在本最佳实践章节中，我们解释了API网关在微服务时代的作用和责任。进一步来说，你还可以看到如何通过智能利用API网关基础设施来确保微服务应用的可靠性。
- en: Technical requirements
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter mainly talks about the crucial contributions of API gateway solutions
    to empower microservices to be the right and rewarding ingredient for producing
    enterprise-scale, mission-critical, cloud-hosted, service-oriented, event-driven,
    innovation-filled, process-aware, production-grade, and business-centric applications.
    We discuss popular API gateway solutions in this chapter. We also implement an
    aggregation service through the API gateway. The source code for the microservices
    (order service, customer service, and aggregation service) are deposited in the
    book's GitHub. The GitHub link for the book is [https://github.com/PacktPublishing/Hands-On-RESTful-API-Design-Patterns-and-Best-Practices](https://github.com/PacktPublishing/Hands-On-RESTful-API-Design-Patterns-and-Best-Practices).
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章主要讨论API网关解决方案对微服务成为企业级、关键任务、云托管、面向服务、事件驱动、创新丰富、流程感知、生产级和业务中心应用正确且有益成分的关键贡献。我们本章讨论了流行的API网关解决方案。我们还通过API网关实现了一个聚合服务。微服务（订单服务、客户服务和聚合服务）的源代码存放在本书的GitHub上。本书的GitHub链接是 [https://github.com/PacktPublishing/Hands-On-RESTful-API-Design-Patterns-and-Best-Practices](https://github.com/PacktPublishing/Hands-On-RESTful-API-Design-Patterns-and-Best-Practices)。
- en: About microservice architecture
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于微服务架构
- en: Legacy applications are inflexible, closed, monolithic, massive, and much more.
    Bringing forth business and technology modifications is beset with a number of
    issues and risks. Third-party service integration is a tough affair. Incorporating
    additional interfaces such as web, mobile, and cloud is another difficult thing
    for legacy systems. There are several access channels emerging these days, and
    our applications need to have the innate capability to work with multiple channels.
    In future, businesses will demand more with less from their IT teams and partners.
    In short, the development and operational complexities of legacy applications
    are prohibitively large. **Microservice architecture** (**MSA**) is all about
    achieving speed and safety at scale, and the MSA ecosystem is continuously growing
    to provide scores of competent technologies, tools, and frameworks for efficiently
    implementing a range of business applications and IT services. This approach etches
    and elevates IT as a viable and value-adding business partner. That is, business-centric
    IT is the new normal owing to a raft of noteworthy advancements in the IT space.
    The previously held thought (IT is cost-centric) is changing fast, and IT is being
    proudly announced as the profit-centric paradigm.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 传统应用缺乏灵活性，封闭，单体，庞大，还有更多。引入业务和技术变更会遇到许多问题和风险。第三方服务集成是一项艰巨的任务。为传统系统增加如Web、移动和云等额外接口也是另一项困难。如今，出现了多种接入渠道，我们的应用需要具备与多个渠道协同工作的内在能力。在未来，企业将从他们的IT团队和合作伙伴那里要求更多，而付出更少。简而言之，传统应用的开发和运营复杂性过大，难以承受。**微服务架构**（**MSA**）旨在实现规模化的速度和安全，MSA生态系统持续增长，提供大量技术、工具和框架，以高效实施各种业务应用和IT服务。这种方法将IT提升为可行的增值业务合作伙伴。也就是说，以业务为中心的IT因IT领域的众多显著进步而成为新常态。之前持有的观点（IT以成本为中心）正在迅速改变，IT正自豪地宣布为以利润为中心的范式。
- en: Any software application based on a microservice architecture simply consists
    of a suite of small, modular, and easily manageable services. Each service runs
    in a unique process and communicates through well-defined APIs. RESTful interfacing
    is the most popular and lightweight entrance for services to find, bind, and use
    one another. API-enabled microservices smoothly align with the business to deal
    with changes in an agile fashion, match business changes with an agile response,
    and deliver solutions in a decentralized manner. Microservices are independently
    deployable, horizontally scalable, composable, interoperable, publicly discoverable,
    network accessible, technology-agnostic, modular (loosely coupled and highly cohesive),
    fine-grained, and so now. The convergence of containerization and microservices
    results in big savings and benefits for businesses and technology professionals.
    All kinds of microservices are being methodically containerized and hosted in
    **bare metal** (**BM**) servers and **virtual machines** (**VMs**). The lightweight
    nature of containers along with business-centric and purpose-specific microservices
    brings a number of crucial advantages for the business world. There are other
    technological advancements in the form of container orchestration and management
    solutions in order to form container/service clusters to realize multi-container,
    business-aware, mission-critical, adaptive, and composite applications.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 基于微服务架构的任何软件应用都仅仅是由一系列小型、模块化且易于管理的服务组成。每个服务都在一个独特的进程中运行，并通过定义良好的API进行通信。RESTful接口是服务之间寻找、绑定和使用彼此最流行且轻量级的入口。API驱动的微服务能够与业务无缝对接，以敏捷的方式应对变化，与业务变化匹配敏捷响应，并以去中心化的方式提供解决方案。微服务可以独立部署，水平扩展，可组合，互操作，公开可发现，网络可访问，技术无关，模块化（松散耦合且高度内聚），细粒度，等等。容器化和微服务的结合为企业和技术专业人士带来了巨大的节省和好处。各种微服务正在有条不紊地容器化，并在**裸金属**（**BM**）服务器和**虚拟机**（**VMs**）上托管。容器轻量级的特性以及以业务为中心和特定目的的微服务为商业世界带来了许多关键优势。还有其他技术进步，如容器编排和管理解决方案，以形成容器/服务集群，实现多容器、业务感知、任务关键、自适应和复合应用。
- en: With microservices emerging and becoming established as the simple and optimal
    building block for designing, developing, deploying, and managing production-grade
    business applications and IT platforms, existing monolithic applications are being
    meticulously partitioned into a number of interactive and insightful microservices.
    The proven technique of divide and conquer is doing extremely well, even now through
    MSA conundrum. The individual yet interconnected microservices can be separately
    advanced and deployed without bringing down other microservices. There are a number
    of business, technical, and user advantages and hence there is a zeal among business
    executives, technology professionals, and IT operators to embrace MSA. New applications
    are being built using the salient features of the MSA from the ground up. In the
    following sections, we will see how an API gateway infrastructure is paramount
    for achieving the intended success of microservices architecture.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 随着微服务的兴起并成为设计、开发、部署和管理生产级商业应用程序和IT平台的简单且最优构建块，现有的单体应用程序正在被细致地分割成多个互动和有洞察力的微服务。经过验证的“分而治之”技术现在仍然表现良好，甚至通过MSA难题也是如此。这些独立但相互关联的微服务可以分别推进和部署，而不会影响其他微服务。因此，在商业、技术和用户方面都有许多优势，因此商业高管、技术专业人士和IT运营商都热衷于采用MSA。新的应用程序正在使用MSA的显著特性从头开始构建。在接下来的章节中，我们将看到API网关基础设施对于实现微服务架构预期成功的重要性。
- en: We have written about the widespread success of the RESTful service paradigm
    in the other chapters of this book with a bevy of practical examples. The gist
    is that RESTful APIs allow consumers/user applications to progress through an
    application (web, cloud, mobile, business, IoT, and so on) by appropriately selecting
    links (resources), such as `/product/book/`, and through specific HTTP operations
    (methods), such as `GET`, `DELETE`, `POST` or `PATCH`. This results in the next
    resource, which actually represents the next state of the application. REST stands
    for representational state transfer. And this new state gets transferred to the
    consumer for its subsequent use.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本书的其他章节中，通过大量的实际例子，讨论了RESTful服务范式广泛的成功。其核心在于，RESTful API允许消费者/用户应用通过适当选择链接（资源），例如`/product/book/`，以及通过特定的HTTP操作（方法），例如`GET`、`DELETE`、`POST`或`PATCH`，来在应用程序（网页、云、移动、商业、物联网等）中前进。这导致下一个资源，实际上代表了应用程序的下一个状态。REST代表表示性状态转移。并且这种新状态被传输给消费者，以便其后续使用。
- en: The prominent infrastructure modules in microservice-centric applications
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务为中心的应用程序中的突出基础设施模块
- en: Horizontal scaling and independent deployment are being touted as the key hallmarks
    of microservices. Microservices and their instances can be easily replicated,
    replaced, refactored, and restored to adapt to incoming traffic. Fresh applications
    are being designed, developed, and deployed as microservices, while legacy applications
    are being systematically partitioned into a pool of microservices working together.
    It is therefore clear that MSA is the prime architectural pattern and style for
    next-generation software applications. In this section, we will discuss the key
    infrastructure components of MSA-compliant systems.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 水平扩展和独立部署被吹捧为微服务的关键特征。微服务和它们的实例可以轻松复制、替换、重构和恢复，以适应传入的流量。新的应用程序正在被设计、开发和部署为微服务，而遗留应用程序正在被系统地分割成一组协同工作的微服务。因此，很明显，MSA（微服务架构）是下一代软件应用的主要架构模式和风格。在本节中，我们将讨论MSA合规系统的关键基础设施组件。
- en: Service registry
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务注册
- en: 'Microservices are increasingly dynamic and widely dispersed. Thus, for leveraging
    microservices and for enabling service discovery (static as well as automated),
    we need a centralized service registry/repository mechanism in place. The service
    registry is designed to keep track of the registered microservice instances in
    order to give correct information about the services and their latest locations.
    This registry is a sort of a database for accurately containing and maintaining
    the network locations of the service instances. If there is a movement, then the
    microservices have to consciously approach and update the service registry. The
    API gateway, on getting requests from client microservices, connects and tries
    to procure the location details of the serving microservices. If there is any
    deviation or deficiency, then there is the possibility of an unwanted failure.
    Every microservice instance has to register itself with the centralized service
    registry on startup and does the reverse by de-registering on shutdown. The registration
    of service instances is typically refreshed periodically using a heartbeat mechanism. The
    service registry module has to be highly available and for that high-availability
    requirement, the overwhelmingly recommended approach is to have a cluster of the
    service registry module. It is not recommended to cache the network location details
    obtained from the registry at the API gateway or the registry-aware client. If
    location details are cached at the API gateway, then it may turn out to be degrading
    the performance of the API gateway. It is the sole responsibility of microservice
    instances to update the registry about their changing status (availability). The
    role of the service registry is illustrated in the following figure:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务正变得越来越动态和广泛分布。因此，为了利用微服务并实现服务发现（静态和自动），我们需要一个集中的服务注册/存储库机制。服务注册旨在跟踪已注册的微服务实例，以便提供关于服务和它们最新位置的正确信息。这个注册表相当于一个数据库，用于准确包含和维护服务实例的网络位置。如果发生移动，那么微服务必须主动接近并更新服务注册表。API网关在接收到客户端微服务的请求后，会连接并尝试获取服务微服务的位置详情。如果存在任何偏差或不足，那么可能会出现不希望的失败。每个微服务实例在启动时都必须向集中式服务注册表进行注册，并在关闭时进行注销。服务实例的注册通常通过心跳机制定期刷新。服务注册模块必须高度可用，为此，最推荐的方法是拥有服务注册模块的集群。不建议在API网关或注册感知客户端缓存从注册表中获得的网络位置详情。如果在API网关缓存位置详情，那么可能会降低API网关的性能。微服务实例更新注册表关于其变化状态（可用性）的责任是唯一的。服务注册的作用在以下图中说明：
- en: '![](img/1bf7d285-63f0-48a8-8866-7a00176e329a.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1bf7d285-63f0-48a8-8866-7a00176e329a.png)'
- en: The microservices, service registry, and API gateway interactions
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务、服务注册和API网关的交互
- en: Service discovery
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务发现
- en: We explained how the service registry solution comes in handy when pinpointing
    the location details of microservices and their instances. In a monolithic application,
    finding and calling application components happen through one of the language-level
    methods. If application components are being run in different process spaces,
    then there are **remote method invocations** (**RMIs**), **remote procedure calls**
    (**RPCs**), **distributed component object model** (**DCOM**), and so on. In a
    traditional legacy IT environment, applications run at fixed and well-known locations.
    That is, the hosts and ports are fixed in order to be found and used. Applications,
    therefore, can easily call one another using any one of the standard communication
    and data transmission protocols. However, in the agile and adept microservices
    era, the number of microservices and their instances are changing frequently.
    Further on, in order to bring about much-desired optimization, microservices and
    their instances are being redeployed in other locations. Therefore, client microservices
    need to use an advanced service discovery mechanism to get to know the latest
    status of microservice instances. For simplification, there are two main service
    discovery patterns—client-side discovery and server-side discovery.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们解释了当确定微服务和其实例的位置细节时，服务注册解决方案如何派上用场。在单体应用程序中，查找和调用应用程序组件是通过语言级别的一种方法完成的。如果应用程序组件在不同的进程空间中运行，那么有远程方法调用（RMIs）、远程过程调用（RPCs）、分布式组件对象模型（DCOM）等。在传统的遗留IT环境中，应用程序在固定的和已知的地点运行。也就是说，主机和端口是固定的，以便被发现和使用。因此，应用程序可以轻松地使用任何一种标准通信和数据传输协议相互调用。然而，在敏捷且擅长的微服务时代，微服务和其实例的数量经常变化。进一步来说，为了实现期望的优化，微服务和其实例正在其他位置重新部署。因此，客户端微服务需要使用高级服务发现机制来了解微服务实例的最新状态。为了简化，有两种主要的服务发现模式——客户端发现和服务器端发现。
- en: For client-side discovery, the client will get the location of a service instance
    from service registry, as the registries has the information of latest locations
    of all the services. The client knows the address of the **Service Registry**. The
    client then uses a load balancing algorithm to select the optimal service instances
    and makes a request.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于客户端发现，客户端将从服务注册表中获取服务实例的位置，因为注册表包含了所有服务最新位置的信息。客户端知道**服务注册表**的地址。然后，客户端使用负载均衡算法选择最佳服务实例并发出请求。
- en: For server-side discovery, the **Client** makes a request to the **API Gateway**.
    The **API Gateway** then queries the **Service Registry** to get the network location
    of the desired microservices. Based on that location information, the API gateway
    makes an attempt to connect and leverage the ability to serve microservices.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 对于服务器端发现，**客户端**向**API网关**发起请求。然后，API网关查询**服务注册表**以获取所需微服务的网络位置。基于该位置信息，API网关尝试连接并利用为微服务提供服务的能力。
- en: 'The following diagram illustrates the differences between client- and server-side
    service discovery:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了客户端和服务器端服务发现的区别：
- en: '![](img/9b3793fd-86aa-4572-acc2-bed05a76d40b.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9b3793fd-86aa-4572-acc2-bed05a76d40b.png)'
- en: Composition/orchestration
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 组合/编排
- en: 'Microservices primarily implement business functionality. For creating composite,
    business-centric, and process-aware applications, microservices must be linked
    together. For ensuring composition, there are two methods—orchestration and choreography.
    Also, there are static and dynamic compositions. The API gateway can act as the
    orchestration module. The other option is to code the orchestration logic and
    keep it as a separate utility service. The following diagram clearly depicts how
    service orchestration builds composite services, which are process-aware and business-centric:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务主要实现业务功能。为了创建复合型、以业务为中心且具有流程感知的应用程序，微服务必须相互连接。为确保组合，有两种方法——编排和协奏。此外，还有静态和动态的组合。API网关可以充当编排模块。另一种选择是编写编排逻辑并将其作为独立的实用服务。以下图表清晰地描述了服务编排如何构建复合服务，这些服务具有流程感知性和业务中心性：
- en: '![](img/6f1dca5d-fa8c-4207-a45f-1020eb7fcd90.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/6f1dca5d-fa8c-4207-a45f-1020eb7fcd90.png)'
- en: Transformation
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 转换
- en: There are several different types of, such as client applications on IoT devices,
    browsers for resource-constrained devices, web and mobile applications, and so
    on. With the input/output device ecosystem is consistently on the rise, the client
    side of any application and service has to be worked out separately. Client applications
    on heterogeneous devices follow different data representation, exchange, and persistence
    formats. Also, they follow different data transmission protocols. Then there are
    synchronous and asynchronous communication protocols. The data format and protocol
    translation requirements are bound to increase in a heterogeneous environment.
    The API gateway facilitates translation and other transformation needs quite comfortably. Transformation
    adapters can be freshly baked in, based on emerging needs, and deposited in a
    centralized place to be readily found and used. With purpose-agnostic and specific
    devices, optimal data formats and protocols are being continuously developed;
    there is a need for fresh data and protocol translators to enable them to join
    in mainstream computing.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同类型的，例如物联网设备上的客户端应用程序、资源受限设备的浏览器、Web和移动应用程序等。随着输入/输出设备生态系统的持续增长，任何应用程序和服务的客户端都必须单独处理。异构设备上的客户端应用程序遵循不同的数据表示、交换和持久化格式。此外，它们遵循不同的数据传输协议。然后还有同步和异步通信协议。在异构环境中，数据格式和协议转换的需求必然会增加。API网关可以非常方便地促进转换和其他转换需求。可以根据新兴需求新鲜烘焙的转换适配器，并存储在集中位置以便随时找到和使用。对于无特定目的和特定设备，最优的数据格式和协议正在不断开发；需要新的数据和服务协议转换器，以便它们能够加入主流计算。
- en: Monitoring
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 监控
- en: Monitoring system resources and microservices is becoming vital for realizing
    the original benefits of MSA. There are service and application monitoring tools.
    As most microservices are being containerized, container monitoring tools have
    gained prominence recently. There are even monitoring tools for Kubernetes, which
    has gained the top slot and spot as the container life cycle management platform.
    As this chapter has been specially prepared to explain everything about API gateways,
    it is logical to write about API gateway monitoring. API gateways are paramount
    and pertinent for the intended success of microservices in delivering a variety
    of functionalities. Every service request/response gets routed through them. The
    monitoring and measurement of the API's operation, performance, health condition,
    scalability, security, and log data are critical for meeting the agreed SLA and
    OLA parameters. The much-insisted health monitoring is done to make sure the gateway
    is up and running all the time. Monitoring is indispensable for ensuring service
    reliability and stability. The aspect of observability is vital for service availability,
    adaptability, and analytics. For minutely monitoring the health of systems, resource
    parameters such as processing power, memory capacity, and I/O rates (network and
    storage) are the main focus. The other important things to be precisely monitored
    and measured are the connectivity (network), security alerts, secure backups,
    recovery (data and disaster), and so on. Finally, logging data plays a very important
    role in supplying a lot of useful and usable information to the concerned in solidifying
    and shaping up the distinct goal of business continuity.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 监控系统资源和微服务对于实现MSA的原始效益变得至关重要。有服务和应用程序监控工具。由于大多数微服务正在容器化，容器监控工具最近获得了突出地位。甚至还有针对Kubernetes的监控工具，它已经成为容器生命周期管理平台的顶尖选择。鉴于本章专门准备来解释关于API网关的一切，讨论API网关监控是合乎逻辑的。API网关对于微服务成功提供各种功能至关重要。每个服务请求/响应都会通过它们路由。API的操作、性能、健康状况、可伸缩性、安全性和日志数据的监控和测量对于满足约定的SLA和OLA参数至关重要。强烈要求的健康监控是为了确保网关始终处于运行状态。监控对于确保服务可靠性和稳定性是必不可少的。可观察性方面对于服务的可用性、适应性和分析至关重要。为了精确监控系统的健康状况，处理能力、内存容量和I/O速率（网络和存储）等资源参数是主要关注点。其他需要精确监控和测量的重要事项包括连接性（网络）、安全警报、安全备份、恢复（数据和灾难）等。最后，日志数据在为相关方提供大量有用和可用的信息，以巩固和塑造业务连续性的独特目标方面发挥着非常重要的作用。
- en: The other important factor is nothing but the traffic monitoring. Gathering
    and deeply analyzing traffic data will enable the operations team to consider,
    contemplate, and carry out correct  measures in time, with all the clarity and
    confidence. The essential metrics to be faithfully considered include the total
    number of requests being sent out for an API for a period of time, the performance/throughput
    value, the number of successful and exception messages received, the number of
    blocked messages by API gateway, and so on. Also, request categorization is taken
    into consideration. This deeper and deft analysis helps to easily predict traffic
    situations with greater accuracy so that any kind of spike and surge can be taken
    care of without any kind of breakdown or slowdown.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的因素就是流量监控。收集和深入分析流量数据将使运维团队能够及时考虑、思考并实施正确的措施，具有清晰和自信。必须忠实考虑的基本指标包括在一定时间内发送给API的总请求数量、性能/吞吐量值、接收到的成功和异常消息数量、API网关阻止的消息数量等。此外，还会考虑请求分类。这种深入而巧妙的分析有助于更准确地预测流量情况，以便在没有任何故障或减速的情况下处理任何类型的峰值和激增。
- en: Load balancing and scaling
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 负载均衡和扩展
- en: This is an important ingredient for ensuring the extended availability of software
    systems. The goal of achieving application scalability (horizontal) through infrastructure
    elasticity is accomplished by leveraging a **load balancer** (**LB**) (software
    or hardware). We need traffic information to predict and prescribe the correct
    countermeasures in time. Deeper real-time analysis of traffic data helps us to
    understand and estimate the load on the applications. The insights from load data
    helps cloud administrators and operation teams to collectively and concisely formulate
    viable policies and rules for application scalability. Additional infrastructure
    modules can be readied in time in order to take up extra load. The API gateways
    can also scale horizontally as well as vertically so that the high availability
    of an API gateway solution is guaranteed. Otherwise, an API gateway can become
    a single point of failure. To have a clustered API gateway setup, we can have
    a LB in front of the API gateway. What this means is that multiple instances of
    an API gateway solution can be leveraged to ensure continuity, and all those instances
    can run the same configuration; this uniformity helps in virtualizing the same
    APIs and to execute the same policies. If there are multiple API gateway groups,
    then the capability (load balancing) can be elegantly extended and accurately
    accomplished across groups.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是确保软件系统扩展可用性的重要因素。通过利用**负载均衡器**（**LB**）（软件或硬件）来实现应用可扩展性（水平扩展）的目标。我们需要流量信息来及时预测和制定正确的对策。对流量数据的更深入实时分析有助于我们理解和估计应用的负载。从负载数据中获得的见解帮助云管理员和运维团队共同简洁地制定可行的应用可扩展性政策和规则。可以及时准备额外的基础设施模块，以便承担额外的负载。API网关也可以进行水平扩展和垂直扩展，以确保API网关解决方案的高可用性。否则，API网关可能会成为单点故障。为了有一个集群化的API网关设置，我们可以在API网关前面放置一个LB。这意味着可以利用多个API网关解决方案的实例来确保连续性，所有这些实例都可以运行相同的配置；这种一致性有助于虚拟化相同的API并执行相同的策略。如果有多个API网关组，那么能力（负载均衡）可以优雅地扩展并准确地在组间完成。
- en: The API gateway does not mandate any additional requirements on LBs. That is,
    the user and data loads are balanced based on widely recommended characteristics
    including the response time, the system load at that point of time, and so on.
    API gateways are maintained in a stateless fashion in order to ensure they are
    not weighed down by state information. This also enables service messages to take
    any route to reach the appropriate and assigned services. Some prominent components
    such as caches and counters, which are typically held on a distributed cache,
    are meticulously updated for every unique message. This setup ultimately helps
    the API gateway to complete its obligations without any problem across modes (sticky
    and non-sticky).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: API网关不对负载均衡器（LBs）提出任何额外要求。也就是说，用户和数据负载是基于广泛推荐的特征进行平衡的，包括响应时间、当时系统的负载等。API网关以无状态的方式维护，以确保它们不会被状态信息拖累。这也使得服务消息可以采取任何路线到达适当的和指定的服务。一些突出的组件，如缓存和计数器，通常存储在分布式缓存中，会针对每条独特的消息进行细致的更新。这种设置最终有助于API网关在所有模式下（粘性和非粘性）无任何问题地完成其义务。
- en: 'The distributed nature of API gateways poses a certain restriction during active/active
    and active/passive clustering. For example, to lose any counter and cache state,
    the system has to be designed in such a way that at least one API gateway is active
    at all times. Precisely speaking, to ensure high availability and reliability,
    as previously indicated, multiple API gateway instances have to run in a connected
    and clustered manner. The API gateway is able to maintain zero downtime by having
    the configuration deployment in a steady and continuous fashion. Generally, an
    API gateway instance in the cluster takes a few seconds to update its configuration.
    And when it is getting updated, that particular instance does not entertain any
    new request. Still, all the existing in-flight requests are fully honored. However,
    the other API gateway instances in the cluster can ceaselessly receive and process
    new requests and deliver the results. The key role of the **Load Balancer** here
    is to  ensure all the incoming requests are pushed to the correct API gateway
    instances that are receiving and processing fresh requests. Thus, API gateway
    clustering is important for continuously receiving and responding to service messages
    and the **Load Balancer** plays a vital role in fulfilling this, as illustrated
    in the following diagram:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: API网关的分布式特性在主动/主动和主动/被动集群中带来了一定的限制。例如，为了丢失任何计数器和缓存状态，系统必须设计成在任何时候至少有一个API网关处于活动状态。精确地说，为了确保高可用性和可靠性，正如之前所指出的，必须以连接和集群的方式运行多个API网关实例。API网关能够通过稳定和连续的配置部署来保持零停机时间。通常，集群中的API网关实例需要几秒钟来更新其配置。在更新时，该特定实例不会处理任何新的请求。然而，集群中的其他API网关实例可以不断地接收和处理新的请求，并交付结果。**负载均衡器（Load
    Balancer**）在这里的关键作用是确保所有入站请求都推送到接收和处理新请求的正确API网关实例。因此，API网关集群对于持续接收和响应服务消息非常重要，**负载均衡器**在满足这一需求中扮演着至关重要的角色，如下面的图示所示：
- en: '![](img/c9719bc8-8ec0-4fce-abe3-774df110df00.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c9719bc8-8ec0-4fce-abe3-774df110df00.png)'
- en: High availability and failover
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可用性和故障转移
- en: In the era of microservices, guaranteeing high available through fault tolerance,
    fault detection, and isolation is an important thing for architects. In the recent
    past, API gateway solutions emerged as a critical component for the microeconomic
    era. Microservice architecture is being touted as as the soul and savior for facilitating
    the mandated business adaptivity, process optimization, and automation. API gateways
    are the only entry point for microservices to find and talk with one another to
    fulfill business tasks. This broker/middleware solution is blessed with a number
    of common features so that microservices can just focus on business functionalities.
    The **non-functional requirements** (**NFRs**) and the **quality of service**
    (**QoS**) attributes are achieved through gateway solutions. To achieve high availability
    and stability, the recommended action and approach is to deploy the API gateway
    in **high availability** (**HA**) mode. As previously described, API gateway instances
    are usually deployed behind a standard LB. The LB continuously probes the API
    gateway instances to understand whether they are alive or not. The health condition
    and performance level of each of the instances are captured and used by the LB
    to embark on the appropriate remedy in time, so that the continuity of the system
    does not get affected in any way. If the LB comes to know that an API gateway
    is not functioning, then the LB redirects and routes inbound traffic to the gateway
    instance that is functioning and delivering on its obligations.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在微服务时代，通过容错、故障检测和隔离来保证高可用性对于架构师来说是一件重要的事情。在最近的一段时间里，API网关解决方案作为微经济时代的一个关键组件应运而生。微服务架构被誉为促进强制业务适应性、流程优化和自动化的灵魂和救星。API网关是微服务之间寻找和交流的唯一入口，以完成业务任务。这种代理/中间件解决方案拥有许多常用功能，以便微服务只需关注业务功能。**非功能性需求（NFRs**）和**服务质量（QoS**）属性是通过网关解决方案实现的。为了实现高可用性和稳定性，推荐的做法是将API网关以**高可用性（HA**）模式部署。正如之前所述，API网关实例通常部署在标准负载均衡器（LB）之后。LB持续探测API网关实例，以了解它们是否处于活动状态。每个实例的健康状况和性能水平被LB捕获并用于及时采取适当的补救措施，以确保系统连续性不受任何影响。如果LB得知某个API网关无法正常工作，那么LB将重定向和路由入站流量到正在运行并履行其义务的网关实例。
- en: Timely alerts are configured in order to get relevant notifications in the case
    of untoward incidents. If an alert is triggered, then the issue along with its
    metadata can be understood, as the data analytics capability is an important feature
    of any API gateway product. Generally, API gateways  are kept as a stateless entity
    as they are designed and destined to be bombarded with millions of service request
    messages every second. However, API gateways can maintain cached data, which can
    be replicated across a cluster of API gateways. Such an arrangement helps to maintain
    the peer-to-peer relationship among API gateway instances.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 配置了及时警报，以便在发生意外事件时获得相关通知。如果触发警报，则可以理解问题及其元数据，因为数据分析能力是任何API网关产品的重要功能。通常，API网关被保持为无状态实体，因为它们被设计和注定要每秒处理数百万个服务请求消息。然而，API网关可以维护缓存数据，这些数据可以在API网关集群之间复制。这种安排有助于维护API网关实例之间的对等关系。
- en: HA and failover guidelines
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高可用性和故障转移指南
- en: 'Experts have produced a series of guidelines and best practices to ensure the
    high availability of systems:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 专家们制定了一系列指南和最佳实践，以确保系统的可用性高：
- en: In order to guarantee maximum availability, an API gateway has to be used in
    proven active/active mode.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为了保证最大可用性，API网关必须使用经过验证的主动/主动模式。
- en: There is a need for deeper and decisive analysis on traffic data. The insights
    from this analysis help operators and others manning production environments to
    plan and protect against message flooding.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对流量数据进行更深入和决定性的分析是必要的。这种分析得出的见解帮助操作员和其他维护生产环境的人员进行规划和防范消息洪水。
- en: Tool-supported automated network infrastructure monitoring and management are
    essential for ensuring the highest availability. Not only collecting operational
    and log data, but also subjecting them to a variety of investigations unravels
    a lot of useful and usable information. All the knowledge thus discovered and
    disseminated goes a long way in empowering the network infrastructure to work
    in prime and pristine condition. The analytics feature intrinsically embedded
    in an API gateway solution comes in handy in analyzing and articulating what to
    do to prevent any kind of failure and faltering. There are specific as well as
    agnostic monitoring tools, which can be integrated with knowledge visualization/report
    generation tools.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工具支持的自动化网络基础设施监控和管理对于确保最高可用性至关重要。不仅收集操作和日志数据，而且对这些数据进行各种调查可以揭示大量有用和可用的信息。因此发现和传播的所有知识对于使网络基础设施在最佳和原始状态下工作大有裨益。API网关解决方案内嵌的分析功能在分析和阐述防止任何类型故障和失误的措施方面非常方便。还有特定的以及通用的监控工具，可以与知识可视化/报告生成工具集成。
- en: Governance
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 治理
- en: As the number of APIs keeps on increasing, it is essential to establish policies
    and to put other mechanisms in place for effective monitoring and management.
    The policies can broadly be categorized as design-time and runtime governance.
    The policies are highly influenced by business objectives and goals. Increasingly,
    IT is being upgraded to meet changes in business sentiments. Thus, IT policies
    have to be synced with business expectations to produce solid and smart governance.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 随着API数量的持续增加，建立政策和实施其他机制以进行有效的监控和管理变得至关重要。这些政策可以大致分为设计时和运行时治理。政策受到业务目标和目标的高度影响。日益增长的IT升级是为了满足业务情绪的变化。因此，IT政策必须与业务期望同步，以产生坚实和智能的治理。
- en: About API gateway solutions
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于API网关解决方案
- en: In a nutshell, an API gateway is a multifaceted proxy that accomplishes a variety
    of integration, intermediation, and enrichment tasks. It has all the information
    about the main microservice endpoints in order to correctly and cognitively mediate,
    route, and invoke a respective endpoint. This is performed after the initial request
    verification, content filtering, authentication, and authorization.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，API网关是一个多功能的代理，完成各种集成、中介和丰富任务。它拥有关于主要微服务端点的一切信息，以便正确和认知地中介、路由和调用相应的端点。这是在初始请求验证、内容过滤、身份验证和授权之后进行的。
- en: A typical API gateway has to have the following ingrained and serviceable competencies.
    The common features of any API gateway solution include authentication and authorization,
    message enrichment, remediation, process-based composition, traffic routing and
    management, and service monitoring.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的API网关必须具备以下固有的和可服务的能力。任何API网关解决方案的常见功能包括身份验证和授权、消息增强、修复、基于流程的组成、流量路由和管理以及服务监控。
- en: An API gateway is bound to provide a single and unified API entry point across
    one or more internal APIs. There can be different distributed sources, such as
    client applications, services, and devices, trying to access the API gateway.
    Clients send a variety of requests and expect appropriate responses. The gateway
    is supposed to do a variety of initiation, intermediation, and implementation
    tasks. One of them is to *unify* these requests and work with the backend services.
    All kinds of proxy and aggregation activities are accomplished through API gateways,
    which also ensure rate limiting and security needs are met as well. In the microservice
    era, there can be hundreds of services, and hence the need for API gateways and
    management platforms is bound to grow further. In short, an API gateway can help
    provide a unified entry point for external consumers. The orchestration/choreography,
    brokerage, discovery, routing, enrichment, policy enforcement, governance, concierge
    jobs, and so on are performed by standardized API gateway solutions. On the other
    hand, API management adds additional capabilities such as analytics and life cycle
    management. In future, there will be attempts to meet QoS and NFRs such as availability,
    scalability, high performance/throughput, security, and reliability through replication
    and fault tolerance, through a combination of API gateways, cluster and orchestration
    platforms, service mesh solutions, and so on.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: API网关注定要为一个或多个内部API提供一个单一且统一的API入口点。可能会有不同的分布式来源，例如客户端应用、服务和设备，试图访问API网关。客户端发送各种请求并期望得到适当的响应。网关应该执行各种启动、中介和实施任务。其中之一就是*统一*这些请求并与后端服务协同工作。所有类型的代理和聚合活动都是通过API网关完成的，同时确保满足速率限制和安全需求。在微服务时代，可能会有数百个服务，因此API网关和管理平台的需求必然进一步增长。简而言之，API网关可以帮助为外部消费者提供一个统一的入口点。编排/舞蹈、经纪、发现、路由、增强、策略执行、治理、礼宾服务等都是由标准化的API网关解决方案执行的。另一方面，API管理增加了额外的功能，如分析和生命周期管理。在未来，将会有尝试通过复制和容错，结合API网关、集群和编排平台、服务网格解决方案等，来满足QoS和NFRs（如可用性、可伸缩性、高性能/吞吐量、安全性和可靠性）。
- en: API gateways for microservice-centric applications
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 针对以微服务为中心的应用的API网关
- en: 'The unique contributions of API gateways for operationalizing microservices
    in a beneficial fashion are growing as days pass. The main features of an API
    gateway are  the following:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 随着时间的推移，API网关在以有益方式操作微服务方面的独特贡献正在增长。API网关的主要特点如下：
- en: '**Adds flexibility**: API gateways are supposed to hide internal concerns from
    external clients. An API gateway decouples external APIs from internal microservice
    APIs. This abstraction facilitates the addition, replacement, displacement, and
    substitution of advanced microservice implementations in place of legacy ones.
    The APIs of internal microservices can be changed without affecting the requesting
    microservices. Services can be freshly registered and referenced in a service
    registry or repository. The service discovery of newer services can be smooth
    and error free. Services can be versioned.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**增加灵活性**：API网关应该隐藏内部关注点，对外部客户端不可见。API网关解耦外部API和内部微服务API。这种抽象简化了在现有微服务实现中添加、替换、替换和替代高级微服务的过程。内部微服务的API可以更改，而不会影响请求的微服务。服务可以新鲜注册并在服务注册表或存储库中引用。新服务的服务发现可以平稳且无错误。服务可以进行版本控制。'
- en: '**Adds an additional layer**: As microservices are not contacted directly,
    the security of services is greatly strengthened. Through using an API gateway,
    it is possible to stop all kinds of malicious attacks on internal microservices.
    Every microservice has its own data store. Thus, not only service security but
    also data security is enabled. Through rate limiting/throttling offered by API
    gateways, distributed DoS attacks can be thwarted easily.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**增加了一个额外的层**：由于微服务不是直接接触，因此服务安全性得到了极大加强。通过使用API网关，可以阻止对内部微服务的各种恶意攻击。每个微服务都有自己的数据存储。因此，不仅服务安全性，而且数据安全性也得到了保障。通过API网关提供的速率限制/节流，可以轻松阻止分布式DoS攻击。'
- en: '**Enables support for data and protocol translation**: There are disparate
    data transmission and communication protocols. There are synchronous and asynchronous
    communications and their corresponding protocols. Besides HTTP, there are other
    protocols such as ProtoBuf ([https://developers.google.com/protocol-buffers/docs/reference/overview](https://developers.google.com/protocol-buffers/docs/reference/overview)),
    AMQP ([https://www.amqp.org](https://www.amqp.org/)), COAP, and more, for integrating
    with third-party applications and services in order to produce and sustain integrated
    applications. This is the essence of API gateway solutions. Precisely speaking,
    all the common capabilities of microservices are safely abstracted and incorporated
    into API gateways. The idea is to have the business logic in any microservice
    implementation. This best practice keeps microservices simple and easy to manipulate.
    All the security, networking, third-party integration, adding volumes, fulfilling
    QoS attributes, and other cross-cutting concerns are accumulated together and
    accomplished through API gateways, which act as a centralized and clustered middleware
    solution.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**支持数据与协议转换**：存在多种不同的数据传输和通信协议。有同步和异步通信及其相应的协议。除了HTTP之外，还有其他协议，如ProtoBuf ([https://developers.google.com/protocol-buffers/docs/reference/overview](https://developers.google.com/protocol-buffers/docs/reference/overview))、AMQP
    ([https://www.amqp.org](https://www.amqp.org/))、COAP等，用于与第三方应用程序和服务集成，以产生和维持集成应用程序。这是API网关解决方案的本质。确切地说，所有微服务的常见功能都被安全地抽象并集成到API网关中。这种最佳实践使得微服务简单且易于操作。所有安全、网络、第三方集成、增加容量、满足QoS属性和其他横切关注点都累积在一起，并通过API网关实现，API网关充当集中式和集群式中间件解决方案。'
- en: 'The following diagram illustrates how an API gateway solution links microservices
    with service clients:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表说明了API网关解决方案如何将微服务与服务客户端连接起来：
- en: '![](img/9bad64f2-f833-4b14-b6ea-42731efd5119.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9bad64f2-f833-4b14-b6ea-42731efd5119.png)'
- en: 'Essentially, the **API Gateway** is a reverse proxy to microservices and serves
    as the single point of contact for the growing list of clients to enter into the
    system. This implements the age-old facade pattern for the microservice era. Further
    on, API gateway solutions simplify and standardize API design, implementation,
    and management. The consistency of microservices, their instances, and the software
    infrastructure is ensured. Because of this consistency, it is quite easy to establish
    and enforce the service level and security requirements of microservices. Formulating
    and firming up policies at different layers and levels of the system stack become
    vital for the intended success of microservice architecture. The gateway ultimately
    helps to address the key challenges and concerns such as security, caching, monitoring,
    and much more. It can handle heterogeneous clients, multiple backend microservices,
    and their instances. Service discovery is automated through the API gateway. The
    following diagram shows various features and functionalities of an API gateway
    solution:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从本质上讲，**API网关**是微服务的反向代理，并为不断增长的客户端列表提供进入系统的单一接触点。这为微服务时代实现了古老的门面模式。进一步来说，API网关解决方案简化并标准化了API的设计、实现和管理。确保了微服务、它们的实例和软件基础设施的一致性。正因为这种一致性，建立和实施微服务的服务级别和安全要求变得非常容易。在系统堆栈的不同层次和级别上制定和巩固策略对于微服务架构的成功至关重要。网关最终有助于解决诸如安全、缓存、监控等关键挑战和关注点。它可以处理异构客户端、多个后端微服务和它们的实例。服务发现通过API网关实现自动化。以下图表显示了API网关解决方案的各种功能和特性：
- en: '![](img/a7ab56d3-964f-44cb-b01c-4319159595cb.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a7ab56d3-964f-44cb-b01c-4319159595cb.png)'
- en: The issues with microservice API gateways
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 微服务API网关的问题
- en: We have listed several key benefits and contributions of API gateways toward
    microservice-centric business applications. However, there are a few drawbacks
    too. As we all know, this gateway infrastructure is an additional abstraction
    layer, so all the control and the data flows happen via this middleware solution;
    therefore, there is the possibility of system performance degradation. This introduces
    an additional hub through which service requests and responses pass. Not only
    is it a single point of contact but also a single point of failure. When the number
    of microservices goes up significantly, complications will increase steadily.
    Service-to-service communication resiliency is not provided by API gateways. There
    are service mesh solutions, which guarantee the much-needed service resiliency
    that, in turn, results in reliable applications. With the widespread use of technologically
    advanced cloud infrastructures, we can safely expect lots of reliable systems
    and environments.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经列出了API网关对以微服务为中心的业务应用的几个关键优势和贡献。然而，也有一些缺点。众所周知，这个网关基础设施是一个额外的抽象层，因此所有的控制和数据流都通过这个中间件解决方案进行；因此，存在系统性能下降的可能性。这引入了一个额外的中心，服务请求和响应通过它传递。这不仅是一个接触点，也是一个故障点。当微服务的数量显著增加时，复杂性将稳步增加。API网关不提供服务到服务的通信弹性。有服务网格解决方案，可以保证所需的服务弹性，从而实现可靠的应用。随着技术先进的云基础设施的广泛应用，我们可以安全地预期会有许多可靠的系统和环境。
- en: Policy configuration in API gateways—we indicated in the preceding section that
    the API gateway is capable of doing **content attack protection** (**CAP**). By
    specifying and modifying security policies, API gateways can thwart any security
    attacks. Content attacks are primarily performed by inserting malicious data into
    service request messages. The most widely known content attacks include inserting
    special characters. The other prominent content attack methods are text patterns,
    and SQL and XPATH injections. The way to surmount this type of attack is to have
    appropriate CAP policies configured for inbound as well as outbound traffic. These
    measures can protect against SQL and XPATH injection attacks. The other considerations
    include security attacks being forbidden by limiting the HTTP versions, methods,
    and URL path. There are other ways, such as defining a whitelist of domain names,
    client IP addresses, limiting query parameters and HTTP headers.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: API网关中的策略配置——在前一节中，我们指出API网关能够执行**内容攻击保护**（**CAP**）。通过指定和修改安全策略，API网关可以阻止任何安全攻击。内容攻击主要是通过将恶意数据插入服务请求消息来执行的。最知名的内容攻击包括插入特殊字符。其他突出的内容攻击方法包括文本模式、SQL和XPATH注入。克服此类攻击的方法是为入站和出站流量配置适当的CAP策略。这些措施可以防止SQL和XPATH注入攻击。其他考虑因素包括通过限制HTTP版本、方法和URL路径来禁止安全攻击。还有其他方法，例如定义域名白名单、客户端IP地址、限制查询参数和HTTP头。
- en: The IoT device (client) sends a message request to microservice via an API gateway.
    An inbound CAP policy scans the service request message for any possible content-based
    attacks. If there is any violation, then the API gateway sends an error message
    back to the IoT device client. If everything is perfect, then the API gateway
    passes verified and validated messages to the service mediation layer for identity
    verification and authentication, authorization. Then, the right microservice endpoint
    is invoked and messages are processed. The microservice in turn calls one or more
    microservices. Then, the outbound CAP policy scans the reply message for any content-based
    attacks. If there is no violation, then the response is delivered to the requested
    client.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网设备（客户端）通过API网关向微服务发送消息请求。入站CAP策略会扫描服务请求消息，查找任何可能的内容攻击。如果有任何违规，API网关将错误消息发送回物联网设备客户端。如果一切正常，API网关将验证并验证后的消息传递到服务中介层进行身份验证和授权。然后，调用正确的微服务端点并处理消息。微服务随后调用一个或多个微服务。然后，出站CAP策略扫描回复消息，查找任何内容攻击。如果没有违规，则将响应发送到请求的客户端。
- en: Security features of API gateways
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API网关的安全特性
- en: Security plays a critical part in any distributed IT environment. Data integrity,
    confidentiality, and availability are the most important parameters for ensuring
    impenetrable data security. There are several mechanisms such as encryption and
    decryption, digital signature, hashing for securing data while in transit, persistence,
    and usage. For microservice-centric applications running on cloud infrastructures,
    the security aspect starts with identification, authentication, and authorization.
    Security policies are another solution widely used in public cloud environments.
    **Hardware security modules** (**HSMs**) are prevalent these days as it is not
    easy to break in while guaranteeing higher throughput. Then there are several
    security appliances such as firewalls, intrusion detection, and prevention systems.
    Unified threat modeling and management solutions are also getting a lot of attention
    these days, considering the severity of security threats and vulnerabilities in
    the microservice era. As mentioned previously, API gateways form an important
    phenomenon for the intended success of microservice architecture. Considering
    the strategically sound significance, API gateway solutions are being stuffed
    with security-enablement properties. A bevy of unique security characteristics
    are being incorporated into API gateways to ensure utmost and unbreakable security.
    Let's take a look at these security features.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何分布式IT环境中，安全都扮演着至关重要的角色。数据完整性、机密性和可用性是确保数据安全不可渗透的最重要参数。有几种机制，如加密和解密、数字签名、哈希等，用于在数据传输过程中保护数据，持久性和使用。对于运行在云基础设施上的以微服务为中心的应用程序，安全方面始于识别、认证和授权。安全策略也是公共云环境中广泛使用的解决方案。**硬件安全模块**（**HSMs**）如今很普遍，因为它难以被入侵，同时保证了更高的吞吐量。然后还有防火墙、入侵检测和预防系统等几种安全设备。考虑到微服务时代安全威胁和漏洞的严重性，统一威胁建模和管理解决方案也受到了很多关注。如前所述，API网关对于微服务架构的成功至关重要。考虑到战略上的重要意义，API网关解决方案正被填充以增强安全性。许多独特的安全特性被纳入API网关，以确保最高和不可破的安全。让我们来看看这些安全特性。
- en: '**Federated identity** is the widely preferred way for service authentication
    and authorization. As we all know, microservices exclusively focus on business
    functionality. The supporting functionalities and facilities are attached when
    needed. The proven technique of divide and conquer is still working wonders in
    the IT world, which is becoming hugely complicated yet sophisticated owing to
    the consistently evolving and erudite trends and transitions in the IT space.
    Especially, identity management, being the prime security requirement, is being
    delegated to third-party solutions and services. That is, each microservice does
    not need to obtain and store user credentials in order to authenticate them during
    subsequent requests.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**联合身份认证**是服务认证和授权广泛采用的方式。众所周知，微服务专注于业务功能。当需要时，支持功能和设施才会被附加。分而治之的成熟技术在IT世界中仍然发挥着神奇的作用，因为IT空间中持续演变的复杂和精密趋势和转变使得IT世界变得极其复杂。特别是，作为首要安全需求的身份管理，正被委托给第三方解决方案和服务。也就是说，每个微服务不需要在后续请求中验证用户凭据时获取和存储它们。'
- en: 'Instead, the identity management system takes care of the authentication well.
    The following diagram shows the role authorization servers play in the authentication
    and authorization processes. The attached database stores all the user credentials
    in clustered mode. Also third-party authentication and authorization management
    systems are closely coupled with API gateways in order to seamlessly and smoothly
    do the initial security-enablement tasks:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '相反，身份管理系统负责良好的认证。以下图表显示了身份验证和授权过程中授权服务器所扮演的角色。附着的数据库以集群模式存储所有用户凭据。此外，第三方认证和授权管理系统与API网关紧密耦合，以便无缝和顺利地完成初始安全增强任务： '
- en: '![](img/e49899ac-1c98-4d2e-9b62-095d2d6c905b.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e49899ac-1c98-4d2e-9b62-095d2d6c905b.png)'
- en: 'There are three key protocols enabling the federated identity:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个关键协议使得联合身份认证成为可能：
- en: OpenID
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OpenID
- en: SAML
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: SAML
- en: OAuth
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OAuth
- en: 'The flow is as follows. The application client first sends a request and grabs
    a **JWT** access token from the third-party authentication and  authorization
    server by supplying the mandated credentials. Once the mandated credentials are
    obtained, the client then embeds the access token in the Authorization HTTP header
    of the API request. The **API Gateway** then validates the access token supplied
    by the client with the authorization server.  Once validated by the third-party
    authentication server, the API gateway passes the **JWT** access token to the
    appropriate backend microservices to initiating the business tasks. If there is
    a need for other downstream microservices to fulfill the service request, then
    the same **JWT** token is shared across to all the participating and contributing
    microservices. Microservices that are in collaborating mode have to attach the
    **JWT** access token to their request messages:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 流程如下。应用程序客户端首先发送请求，并通过提供必要的凭证从第三方认证和授权服务器获取**JWT**访问令牌。一旦获得必要的凭证，客户端然后将访问令牌嵌入API请求的Authorization
    HTTP头中。**API网关**随后验证客户端提供的访问令牌是否与授权服务器匹配。一旦第三方认证服务器验证通过，API网关将**JWT**访问令牌传递给适当的后端微服务以启动业务任务。如果需要其他下游微服务来满足服务请求，则相同的**JWT**令牌将在所有参与和贡献的微服务之间共享。处于协作模式的微服务必须将其请求消息附加**JWT**访问令牌：
- en: '**Confidentiality**: Data security and privacy are very much demanded owing
    to the remote storage. Also the pervasive, public, and open internet, which turns
    out to be the world''s largest communication infrastructure and information powerhouse,
    is the data carrier. Keeping data safe and secure is the foremost requirement
    for business entities and their IT divisions. That is, the confidentiality of
    data cannot be compromised at any cost. Primary data protection is done by the
    API gateway. The other option is that the database server is totally insulated
    from other servers. As a way of ensuring data privacy while data is being persisted,
    data is encrypted and the encryption key is managed separately. Data servers are
    not allowed to be accessed by clients directly. Every data access request is routed
    through a frontend service.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**保密性**：由于远程存储，数据安全和隐私需求很高。此外，无处不在的公共和开放互联网，最终成为世界上最大的通信基础设施和信息强国，是数据载体。确保数据安全是商业实体及其IT部门的首要要求。也就是说，数据的保密性不能以任何代价被破坏。主要的数据保护由API网关完成。另一种选择是数据库服务器完全与其他服务器隔离。为了确保数据在持久化过程中的隐私，数据被加密，加密密钥被单独管理。不允许客户端直接访问数据服务器。每个数据访问请求都通过前端服务路由。'
- en: '**Integrity**: The service messages comprising confidential, customer, and
    corporate information cannot be hacked and manipulated. A compromised message
    can be used for the wrong purposes, such as bringing down servers or stealing
    private information. To ensure better integrity for messages and data, a number
    of purpose-specific and agnostic checks are done on messages while the messages
    are passed through a host of intermediary servers from the source to the sink.
    Typically hashing algorithms are used in order to identify whether there has been
    any kind of data modification.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**诚信**：包含机密、客户和公司信息的消息服务不能被黑客攻击和操纵。被破坏的消息可能被用于错误的目的，例如关闭服务器或窃取私人信息。为了确保消息和数据有更好的诚信度，在消息从源头到目的地的过程中通过众多中间服务器传递时，会进行一系列特定目的和不可知性的检查。通常使用散列算法来识别是否发生了任何数据修改。'
- en: '**Availability**:Service availability is very important for attaining success
    with microservice architecture. There are hackers attempting to bring down services.
    The API gateway provides the first defense against this. Then, there are LBs to
    ensure the service continuity. Clustered and cloud servers come in handy in guaranteeing
    the high availability of services. **Distributed denial of service** (**DDoS**)
    attacks on services can be thwarted through the application of the throttling/rate
    limiting pattern.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可用性**：在微服务架构中取得成功，服务可用性非常重要。有黑客试图关闭服务。API网关提供了第一道防线。然后，还有负载均衡器来确保服务连续性。集群和云服务器在保证服务高可用性方面非常有用。通过应用节流/速率限制模式可以阻止对服务的分布式拒绝服务（DDoS）攻击。'
- en: '**Secure communication**: Communication has to be secured through the SSL/TLS
    mechanism. Microservices and API gateways are, therefore, mandated to be SSL/TLS-compliant.
    Such a setup easily safeguards against man-in-the-middle attacks. Also, the widely
    used message and data encryption method secures against peeking at and tampering
    with service messages and data.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全通信**：通信必须通过SSL/TLS机制进行加密。因此，微服务和API网关必须符合SSL/TLS标准。这种设置可以轻松地防止中间人攻击。此外，广泛使用的消息和数据加密方法可以防止窥视和篡改服务消息和数据。'
- en: Apart from other functionalities, API gateways are predominantly leveraged to
    secure microservice-based applications. Security acquires special significance
    as microservices are deployed in geographically distributed server environments.
    Also, with web-scale applications, microservices and their distinct instances
    are being frontended by LBs. API gateways represent a growing collection of advanced
    services that enable microservices to contribute to business automation and augmentation.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了其他功能外，API网关主要用于确保基于微服务的应用程序的安全性。由于微服务部署在地理上分布的服务器环境中，因此安全性具有特殊的重要性。此外，随着Web规模应用程序的发展，微服务和它们的独立实例正由负载均衡器（LBs）作为前端。API网关代表了一个不断增长的先进服务集合，这些服务使微服务能够为业务自动化和增强做出贡献。
- en: Prominent API gateway solutions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显著的API网关解决方案
- en: There are a few competent API gateway solutions (open source as well as commercial
    grade).
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种合格的API网关解决方案（开源和商业级）。
- en: Kong ([https://konghq.com/](https://konghq.com/)) is an open source **API** gateway
    solution. The Kong server can run in front of any RESTful API. Kong fully supports
    popular REST APIs. Due to their lightweight and versatile nature, RESTful is the
    widely used API standard for all kinds of web, mobile, embedded, and cloud applications.
    The current capability of the Kong API gateway can be substantially extended through
    plug-ins, which bring in extra functionality to meet evolving needs. That is,
    the core features and facilities offered by Kong can be supplemented through additional
    functionalities provided by versatile plug-ins. That is, Kong natively supports
    plug and play architecture. Small, medium, and large-scale business enterprises
    across the globe are using this innovation-field product suite in production-grade
    IT environments. Kong can be deployed in on-demand, online, and off-premises clouds.
    Also, it can run on on-premises private clouds. As illustrated in the following
    diagram, OpenResty and Nginx are the core engines of Kong. OpenResty is a high-performance
    web platform that integrates the standard [Nginx](https://openresty.org/en/nginx.html) core, [LuaJIT](https://openresty.org/en/luajit.html),
    and a host of libraries. Kong uses either Cassandra or PostgreSQL as the data
    store. The popular features accentuated by Kong include authentication, monitoring
    and analytics, and request/response translation and logging.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Kong ([https://konghq.com/](https://konghq.com/)) 是一个开源的 **API** 网关解决方案。Kong服务器可以运行在任何RESTful
    API之前。Kong完全支持流行的REST API。由于其轻量级和多功能性，RESTful已成为各种Web、移动、嵌入式和云应用程序广泛使用的API标准。Kong
    API网关的当前功能可以通过插件显著扩展，这些插件引入了额外的功能以满足不断变化的需求。也就是说，Kong提供的核心功能和设施可以通过提供多功能插件的附加功能得到补充。也就是说，Kong原生支持即插即用架构。全球的小型、中型和大型企业都在生产级IT环境中使用这个创新领域的产品套件。Kong可以部署在按需、在线和远程云中。此外，它还可以在本地私有云中运行。如图所示，OpenResty和Nginx是Kong的核心引擎。OpenResty是一个高性能的Web平台，它集成了标准的[Nginx](https://openresty.org/en/nginx.html)核心、[LuaJIT](https://openresty.org/en/luajit.html)和一系列库。Kong使用Cassandra或PostgreSQL作为数据存储。Kong强调的流行功能包括认证、监控和分析，以及请求/响应转换和日志记录。
- en: 'To better understand how Kong works, here is a typical request workflow of
    an API that uses Kong:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地理解Kong的工作原理，以下是一个使用Kong的典型API请求工作流程：
- en: '![](img/a6fe7105-de72-4039-af77-19102a280b0f.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/a6fe7105-de72-4039-af77-19102a280b0f.png)'
- en: 'Once Kong has started to run, every request made to the **API** will hit the
    Kong server first.  And the Kong server acts as the proxy to send the request
    to the **API** of the requested service. In short, everything in the microservice
    world gets initiated and implemented through an API gateway. When everything uses
    an **API**, the role of API gateway, management, and analytics solutions is bound
    to escalate in the days to unfold:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦Kong开始运行，对**API**的每一个请求都将首先击中Kong服务器。Kong服务器充当代理，将请求发送到所需服务的**API**。简而言之，微服务世界中的所有操作和实现都是通过API网关来完成的。当所有操作都使用**API**时，API网关、管理和分析解决方案的作用在未来的日子里必将升级：
- en: '![](img/571d596e-1037-4983-ab51-567c24b22d7a.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/571d596e-1037-4983-ab51-567c24b22d7a.png)'
- en: Red Hat 3scale APIcast gateway ([https://www.3scale.net/tag/open-source/](https://www.3scale.net/tag/open-source/))—the
    APIcast gateway is also Nginx-based and made available as an open source software
    solution. This API gateway is configured within 3scale's Admin Portal. The gateway
    is a crucial part of 3scale API management, which is a **software as a service**
    (**SaaS**) offering. The Admin Portal has a number of customization and configuration
    functionalities, such as allowing customers to define desired authentication methods,
    setting rate limits, getting analytics done on API usage data, and creating a
    developer portal for their API consumers. The 3scale APIcast gateway lets you
    deploy the API gateway service on a cloud environment with a few clicks. This
    deployment is much faster than others because there is no need for any kind of
    code modification at the backend. APIcast is emerging as the perfect solution
    for low or medium volume APIs. Enterprises widely use APIcast in staging environments
    and this speeds up the process of testing.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 红帽3scale APIcast网关 ([https://www.3scale.net/tag/open-source/](https://www.3scale.net/tag/open-source/))——APIcast网关也是基于Nginx的，作为一个开源软件解决方案提供。这个API网关配置在3scale的Admin
    Portal中。网关是3scale API管理的重要组成部分，这是一个**软件即服务**（**SaaS**）的提供。Admin Portal具有许多定制和配置功能，例如允许客户定义所需的认证方法、设置速率限制、对API使用数据进行分析，并为他们的API消费者创建开发者门户。3scale
    APIcast网关允许您通过几点击部署API网关服务。这种部署比其他方式快得多，因为不需要在后台进行任何代码修改。APIcast正在成为低或中等流量API的完美解决方案。企业广泛在预发布环境中使用APIcast，这加快了测试过程。
- en: Tyk ([https://tyk.io/](https://tyk.io/)) is also an open source API gateway.
    This solution intrinsically takes care of API management activities. The Tyk package
    consists of an API gateway and an API management dashboard. It also has the API
    analytics feature. A developer portal is another interesting module of this package.
    Tyk can be installed in on-premises clouds. It is available in leading public
    clouds and can be purchased and used as a cloud service. Not only that, it integrates
    private and public clouds to contribute as the API gateway solution for hybrid
    clouds. Under load, this API gateway can do the full key validation, security
    verification, quota management, and data analytics, without any hitch or hurdle.
    The developer portal is made available to empower the development community.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Tyk ([https://tyk.io/](https://tyk.io/)) 也是一个开源的API网关。这个解决方案本质上负责API管理活动。Tyk包包括一个API网关和一个API管理仪表板。它还具备API分析功能。开发者门户是这个包的另一个有趣模块。Tyk可以安装在本地云环境中。它可在领先的公有云中提供，并且可以作为云服务购买和使用。不仅如此，它还整合了私有和公有云，为混合云提供API网关解决方案。在负载下，这个API网关可以无障碍地执行完整的密钥验证、安全验证、配额管理和数据分析。开发者门户的提供旨在赋能开发社区。
- en: Moesif ([https://www.moesif.com/](https://www.moesif.com/) ) is primarily an
    API analytics solution. This has the capability to understand how developers use
    APIs and to know why certain errors occur and repeat sometimes. Also, it helps
    to notify API providers of any hidden issues before the customers see them. Thus,
    this solution is a helping hand for service providers. As we tend toward the API
    economy, the API analytics solution plays an important role. Today, thousands
    of developers process billions of API calls through Moesif for debugging, monitoring,
    and understanding API usage. The first and foremost requirement to build  a great
    API (whether it is REST, GraphQL, or JSON-RPC API) is to precisely and concisely
    measure how developers use the APIs. Product teams use the API analytics capability
    offered by this solution to understand how their APIs are being used. By leveraging
    the proven and potential **machine learning** (**ML**) techniques, Moesif API
    insights enable data-driven teams to continuously improve their API and **developer
    experience** (**DX**).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: Moesif ([https://www.moesif.com/](https://www.moesif.com/))主要是一个API分析解决方案。它有能力理解开发者如何使用API，并知道为什么某些错误发生并有时重复。此外，它还帮助在客户看到之前通知API提供商任何隐藏的问题。因此，这个解决方案是服务提供商的帮手。随着我们走向API经济，API分析解决方案扮演着重要的角色。今天，数千名开发者通过Moesif处理数十亿次的API调用，用于调试、监控和理解API使用。构建优秀的API（无论是REST、GraphQL还是JSON-RPC
    API）的首要要求是精确简洁地衡量开发者如何使用API。产品团队使用该解决方案提供的API分析能力来了解他们的API是如何被使用的。通过利用经过验证和潜在的**机器学习**（**ML**）技术，Moesif
    API洞察使数据驱动型团队能够持续改进他们的API和**开发者体验**（**DX**）。
- en: Ambassador ([https://www.getambassador.io/](https://www.getambassador.io/))
    is a popular open source and Kubernetes-native API gateway for the microservice
    world. This gateway solution can do several things for the container world. Ambassador
    can authenticate all kinds of incoming requests before intelligently routing them
    to backend services. It natively supports TLS termination. In addition to that,
    Ambassador supports rate limiting/throttling via an external third-party service.
    This rate limiting is facilitated through the Envoy proxy's rate limiting capabilities.
    A key feature of Envoy is the observability feature, which is enabled  by exposing
    a multitude of statistics about its own operations. Ambassador makes it easy to
    disseminate that knowledge to statistics and monitoring tools such as Prometheus,
    Datadog, and so on. Ambassador generally relies on the fast-evolving Kubernetes
    platform for ensuring service reliability, availability, and scalability.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Ambassador ([https://www.getambassador.io/](https://www.getambassador.io/))是一个流行的开源和Kubernetes原生API网关，适用于微服务世界。这个网关解决方案可以为容器世界做很多事情。Ambassador可以在智能地将请求路由到后端服务之前对各种传入请求进行身份验证。它原生支持TLS终止。除此之外，Ambassador通过外部第三方服务支持速率限制/节流。这种速率限制是通过Envoy代理的速率限制功能实现的。Envoy的一个关键特性是其可观察性功能，该功能通过公开其自身操作的大量统计数据来启用。Ambassador使得将知识传播到统计和监控工具（如Prometheus、Datadog等）变得容易。Ambassador通常依赖于快速发展的Kubernetes平台，以确保服务的可靠性、可用性和可伸缩性。
- en: Envoy ([https://www.envoyproxy.io/](https://www.envoyproxy.io/)) was originally
    built by Lyft.Envoy is a high performance C++ distributed proxy designed for single
    services and applications. Envoy turns out to be a competent solution as a communication
    bus. For microservice-centric applications, this contributes as the universal
    data plane. Finally, it is a core engine for service mesh solutions. Envoy runs
    alongside every application and abstracts the networking complexity by providing
    all the common network features in a platform-agnostic manner. By leveraging the
    Envoy mesh solution, it is possible to visualize and pinpoint problem areas because
    features such as consistent observability, tuning overall performance, and adding
    a substrate are made available in a single place.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Envoy ([https://www.envoyproxy.io/](https://www.envoyproxy.io/))最初由Lyft构建。Envoy是一个高性能的C++分布式代理，专为单一服务和应用程序设计。Envoy最终证明是一个作为通信总线的合格解决方案。对于以微服务为中心的应用程序，这贡献了通用的数据平面。最后，它是服务网格解决方案的核心引擎。Envoy与每个应用程序并行运行，并通过以平台无关的方式提供所有常见网络功能来抽象网络复杂性。通过利用Envoy网格解决方案，可以可视化并定位问题区域，因为诸如一致的可见性、调整整体性能和添加基础结构等特性都可在单一位置提供。
- en: Tree gateway ([http://treegateway.org/](http://treegateway.org/)) is a free
    and open source solution. This can create a complete and customizable pipeline
    to handle service requests. Tree gateway makes it easy to create and sustain big
    clusters. In addition to this, it supports the ready formation of Redis clusters
    to share configurations, circuit-breaker states, and cached content. Any API configuration
    can be changed at any point in time, and all configurations get propagated to
    other tree gateway cluster nodes, without any problems. This comes with an advanced circuit
    breaker module that can *fast fail* responses when any API fails, falls, and falters. 
    Furthermore, it innately supports real-time monitoring and analytics. A pluggable
    engine allows any kinds of transformations or verifications to any API requests.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 树形网关 ([http://treegateway.org/](http://treegateway.org/)) 是一个免费且开源的解决方案。它可以创建一个完整且可定制的管道来处理服务请求。树形网关使得创建和维护大型集群变得容易。除此之外，它还支持快速形成Redis集群以共享配置、断路器状态和缓存内容。任何API配置都可以在任何时候更改，并且所有配置都会无问题地传播到其他树形网关集群节点。这还附带了一个高级的断路器模块，当任何API失败、崩溃和犹豫不决时，它可以快速失败。此外，它天生支持实时监控和分析。一个可插拔的引擎允许对任何API请求进行任何类型的转换或验证。
- en: Gravitee.io ([https://gravitee.io/](https://gravitee.io/)) is a flexible, lightweight,
    blazingly fast, and open source API management solution. This tool helps any business
    enterprise to control who, when, and how users access the APIs in a finely grained
    manner.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Gravitee.io ([https://gravitee.io/](https://gravitee.io/)) 是一个灵活、轻量级、速度极快且开源的API管理解决方案。这个工具帮助任何企业以细粒度的方式控制用户如何、何时以及访问API。
- en: API Umbrella ([https://apiumbrella.io/](https://apiumbrella.io/)) is a proxy
    solution that sits in front of any API. It can seamlessly add API gateway and
    analytics functionalities, such as API keys, rate limiting, and so on.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: API伞 ([https://apiumbrella.io/](https://apiumbrella.io/)) 是一个位于任何API前面的代理解决方案。它可以无缝地添加API网关和分析功能，例如API密钥、速率限制等。
- en: Express gateway ([https://www.express-gateway.io/](https://www.express-gateway.io/))
    is a microservice API gateway, which is built on Express.js. It is typically fast,
    flexible, and community driven.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Express网关 ([https://www.express-gateway.io/](https://www.express-gateway.io/))
    是一个基于Express.js的微服务API网关，它通常运行速度快、灵活，并由社区驱动。
- en: API gateway solutions are very important for API-enabled microservices. RESTful
    APIs are the most prevalent and powerful. RESTful APIs are overwhelmingly used
    by web, mobile, cloud, and IoT applications and services. Not only software applications
    but also resource-constrained and intensive embedded devices are being linked
    with one another via RESTful APIs. With microservices quickly proliferating and
    as everything is stuffed with APIs, there is a mandate for advanced API gateway
    solutions to form integrated and orchestrated applications, which businesses increasingly
    prefer these days. API management and analytics capabilities are also attached
    with gateway solutions to make them comprehensive. A variety of plugins and utility
    services are being built and incorporated on demand. Furthermore, API gateway
    solutions are being integrated with third-party tools for monitoring, measurement,
    management, and visualization. The well-intended approach is to have a dynamic
    pool of modular (loosely and lightly coupled and highly cohesive) API gateway
    services instead of a monolithic API gateway solution, which is difficult to manage,
    inflexible, and closed.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: API网关解决方案对于API驱动的微服务非常重要。RESTful API是最普遍和强大的。RESTful API被广泛应用于Web、移动、云和物联网应用程序和服务中。不仅软件应用程序，而且资源受限和密集型嵌入式设备也通过RESTful
    API相互连接。随着微服务的快速普及和API的广泛应用，需要高级API网关解决方案来形成集成和协调的应用程序，而企业现在越来越倾向于这些解决方案。API管理和分析能力也附加到网关解决方案中，使其更加全面。各种插件和实用服务正在根据需求构建和集成。此外，API网关解决方案正在与第三方工具集成，用于监控、测量、管理和可视化。理想的方法是拥有一个动态的模块化（松散耦合且高度内聚）API网关服务池，而不是一个难以管理、缺乏灵活性和封闭的单体API网关解决方案。
- en: Service mesh versus API gateway
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务网格与API网关
- en: We have discussed API gateway solutions extensively in relation to the success
    of the MSA paradigm. We all know that in order to increase the resiliency of microservices,
    the service mesh solutions are being pampered. And in this section, we are to
    discuss the key differences between API gateways and service meshes.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经广泛讨论了与MSA范式成功相关的API网关解决方案。我们都知道，为了提高微服务的弹性，服务网格解决方案正受到宠爱。在本节中，我们将讨论API网关和服务网格之间的关键区别。
- en: 'Firstly, the API gateway, as explained in the preceding section, the key objective
    of using an API gateway is to express and expose microservices to the outside
    world. With the attachment of API management modules, APIs are managed well. API
    data is captured and subjected to a variety of investigations to produce insights
    to steer API gateways in the right direction:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，正如前文所述，API网关的关键目标是向外界表达和暴露微服务。通过附加API管理模块，API得到良好的管理。API数据被捕获并接受各种调查，以产生洞察力，引导API网关走向正确的方向：
- en: API services call the downstream microservices that can be atomic and composite.
    The noteworthy capability of API gateways is to fuse multiple downstream services
    into something that is useful for the requesting services. That is, services are
    blended as per the stated requirements to produce process-aware, mission-critical,
    and composite services.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API服务调用下游的微服务，这些微服务可以是原子性的和组合性的。API网关的一个显著能力是将多个下游服务融合成对请求服务有用的东西。也就是说，服务根据既定要求进行混合，以产生过程感知、任务关键和组合服务。
- en: API gateways also come with inbuilt support for service discovery, analytics,
    and security. The observability capability for capturing various metrics along
    with monitoring, distributed logging, and distributed tracing is the key differentiator
    for gateway solutions.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API网关还内置了对服务发现、分析和安全性的支持。捕获各种指标的可观察性能力，以及监控、分布式日志记录和分布式跟踪，是网关解决方案的关键区别。
- en: API gateways closely work with several other software solutions, such as API
    management, marketplace/store, and portals in order to be comprehensive for the
    microservice era.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: API网关与多个其他软件解决方案紧密合作，例如API管理、市场/商店和门户，以便在微服务时代实现全面性。
- en: Secondly, service mesh—this is relatively a new solution type and approach for
    providing the resiliency characteristic, which is becoming an important one for
    microservice-based applications. As we all know, services ought to interact with
    one another in order to realize bigger and better business-scale services. When
    services talk to one another, several things can go wrong. In order to guarantee
    service communication resiliency, the IT industry is leaning towards embracing
    the new concept of a service mesh, which is a kind of network and communication
    infrastructure to ensure service resiliency. Service mesh implementations have
    embedded resiliency-enablement patterns such as circuit breaker, retry, timeout,
    and throttling/rate limiting. There are service mesh solutions such as Istio,
    Linkered, and Conduit. Advanced functionalities such as service discovery and
    observability are being incorporated into these solutions. The functionalities
    of API gateways and service mesh solutions are clearly demarcated. It is also
    possible to use both of them in a production environment.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，服务网格——这是一种相对较新的解决方案类型和方法，用于提供弹性特性，这对于基于微服务的应用程序变得越来越重要。众所周知，服务应该相互交互，以实现更大更好的业务规模服务。当服务相互交谈时，可能会出现一些问题。为了确保服务通信的弹性，IT行业正倾向于接受服务网格的新概念，这是一种确保服务弹性的网络和通信基础设施。服务网格实现内置了弹性启用模式，如断路器、重试、超时和节流/速率限制。有如Istio、Linkered和Conduit等服务网格解决方案。高级功能，如服务发现和可观察性，正在被纳入这些解决方案中。API网关和服务网格解决方案的功能有明确的界限。在生产环境中，也可以同时使用它们。
- en: The service mesh is used alongside most other service implementations as a sidecar.
    A service mesh provides a stream of utility and horizontal functionalities for
    enabling service resiliency.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 服务网格通常与其他服务实现一起作为边车使用。服务网格为启用服务弹性提供了一系列实用和横向功能。
- en: In conclusion, API gateways facilitate API communications between a client application
    and a server application. Also, microservices within an application can be integrated
    through the API gateway solution. An API gateway operating at layer 7 (HTTP) enables
    internal as well as external communication. Other noteworthy services include
    user authentication, throttling/rate limiting, transformations, logging, and so
    on.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，API网关促进了客户端应用程序和服务器应用程序之间的API通信。此外，应用程序内的微服务可以通过API网关解决方案进行集成。在第七层（HTTP）运行的API网关能够实现内部和外部通信。其他值得注意的服务包括用户身份验证、节流/速率限制、转换、日志记录等。
- en: Service mesh solutions such as Istio, Linkered, and Conduit are for enabling
    service communication resiliency. That is, they mainly focus on routing internal
    communications. A service mesh operates primarily at layer 4 (TCP). All the resiliency
    and reliability design patterns such as circuit breakers, timeouts, retries, and
    health checks are intrinsically implemented and incorporated into service mesh
    solutions.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如Istio、Linkered和Conduit之类的服务网格解决方案旨在启用服务通信的弹性。也就是说，它们主要关注内部通信的路由。服务网格主要在第四层（TCP）运行。所有弹性可靠性设计模式，如断路器、超时、重试和健康检查，都是内在实现并集成到服务网格解决方案中的。
- en: Summary
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Microservices are being proclaimed as a groundbreaking architectural style for
    producing and sustaining business and IT applications and platforms. Cloud environments
    are filled up with bare metal servers, virtual machines, and containers. Microservices
    can be hosted on these and run to extract and supply their unique functionalities.
    As the number of microservices is growing rapidly, we need technology-sponsored
    and complexity mitigation solutions and services. API gateway solutions are being
    presented as the viable and venerable infrastructure (software or hardware) solutions
    for that bring a kind of abstraction to reduce dependency-induced problems. This
    chapter detailed the various features of API gateway solutions and how they come
    in handy for resolving various microservice-specific issues. The key gateway solutions
    (open source and commercial grade) and their unique properties were documented
    for your benefit. The next chapter is about how microservices have to be tested
    in a systematic manner and speed up the testing needs through scores of automated
    testing tools.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务正被宣称为一种开创性的架构风格，用于生产和维护商业和IT应用程序和平台。云环境中充满了裸金属服务器、虚拟机和容器。微服务可以托管在这些环境中并运行以提取和提供它们独特的功能。随着微服务数量的快速增长，我们需要技术支持的复杂度缓解解决方案和服务。API网关解决方案被提出作为可行的和值得尊敬的基础设施（软件或硬件）解决方案，它提供了一种抽象，以减少依赖性引起的问题。本章详细介绍了API网关解决方案的各种功能以及它们如何有助于解决各种特定于微服务的问题。为了您的利益，记录了关键的网关解决方案（开源和商业级）及其独特的属性。下一章将介绍微服务必须以系统化的方式进行测试，并通过众多自动化测试工具加快测试需求。
