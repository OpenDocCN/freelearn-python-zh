- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: First Steps with FastAPI
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 的第一步
- en: Welcome to the exciting world of **FastAPI**, a modern, high-performance framework
    for building APIs and web applications in **Python**. This first chapter is your
    gateway to understanding and harnessing the power of FastAPI. Here, you’ll take
    your initial steps into setting up your development environment, creating your
    very first FastAPI project, and exploring its fundamental concepts.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到激动人心的 **FastAPI** 世界，这是一个用于在 **Python** 中构建 API 和 Web 应用程序的现代、高性能框架。本章是您了解和利用
    FastAPI 力量的入门。在这里，您将迈出第一步，设置您的开发环境，创建您的第一个 FastAPI 项目，并探索其基本概念。
- en: FastAPI stands out for its speed, ease of use, and comprehensive documentation,
    making it a preferred choice for developers looking to build scalable and efficient
    web applications. In this chapter, you’ll practically engage in setting up FastAPI,
    learning how to navigate its architecture, and understanding its core components.
    You’ll gain hands-on experience by defining simple API endpoints, handling HTTP
    methods, and learning about request and response handling. These foundational
    skills are crucial for any developer stepping into the world of modern web development
    with FastAPI.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 以其速度、易用性和全面的文档而脱颖而出，成为希望构建可扩展和高效 Web 应用的开发者的首选选择。在本章中，您将实际参与设置 FastAPI，学习如何导航其架构，并了解其核心组件。通过定义简单的
    API 端点、处理 HTTP 方法以及学习请求和响应处理，您将获得实践经验。这些基础技能对于任何进入使用 FastAPI 构建现代 Web 开发世界的开发者至关重要。
- en: By the end of this chapter, you will have a solid understanding of FastAPI’s
    basic structure and capabilities. You’ll be able to set up a new project, define
    API endpoints, and have a grasp on handling data with FastAPI. This knowledge
    sets the stage for more advanced topics and complex applications you’ll encounter
    as you progress through the book.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将对 FastAPI 的基本结构和功能有扎实的理解。您将能够设置新项目、定义 API 端点，并掌握使用 FastAPI 处理数据。这些基础知识为您在阅读本书的过程中遇到更高级主题和复杂应用奠定了基础。
- en: 'In this chapter, we’re going to cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Setting up your development environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: Creating a new FastAPI project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新的 FastAPI 项目
- en: Understanding FastAPI basics
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解 FastAPI 基础
- en: Defining your first API endpoint
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义您的第一个 API 端点
- en: Working with path and query parameters
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用路径和查询参数
- en: Defining and using request and response models
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义和使用请求和响应模型
- en: Handling errors and exceptions
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理错误和异常
- en: Each recipe is designed to provide you with practical knowledge and direct experience,
    ensuring that by the end of this chapter, you’ll be well equipped to start building
    your own FastAPI applications.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 每个配方都是为了提供给您实用的知识和直接经验，确保在本章结束时，您将准备好开始构建自己的 FastAPI 应用程序。
- en: Technical requirements
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To embark on your journey with FastAPI, you’ll need to set up an environment
    that supports Python development and FastAPI’s functionalities. Here’s a list
    of the technical requirements and installations needed for this chapter:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始您的 FastAPI 之旅，您需要设置一个支持 Python 开发和 FastAPI 功能的环境。以下是本章所需的技术要求和安装列表：
- en: '**Python**: FastAPI is built on Python, so you’ll need a Python version compatible
    with your FastAPI version. You can download the latest version of it from [python.org](http://python.org).'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**：FastAPI 是基于 Python 构建的，因此您需要一个与您的 FastAPI 版本兼容的 Python 版本。您可以从 [python.org](http://python.org)
    下载最新版本。'
- en: '`pip`, Python’s package manager. You can do it by running `pip install fastapi`
    from the command terminal.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip`，Python 的包管理器。您可以通过在命令行中运行 `pip install fastapi` 来完成此操作。'
- en: '`pip` `install uvicorn`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pip install uvicorn`。'
- en: '**Integrated development environment (IDE)**: An IDE such as **Visual Studio
    Code** (**VS Code**), PyCharm, or any other IDE that supports Python development
    will be necessary for writing and testing your code.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**集成开发环境（IDE）**：一个支持 Python 开发的 IDE，例如 **Visual Studio Code**（**VS Code**）、PyCharm
    或任何其他支持 Python 开发的 IDE，对于编写和测试您的代码将是必要的。'
- en: '**Postman or Swagger UI**: For testing API endpoints. FastAPI automatically
    generates and hosts Swagger UI, so you can use it right out of the box.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Postman 或 Swagger UI**：用于测试 API 端点。FastAPI 自动生成并托管 Swagger UI，因此您可以直接使用它。'
- en: '**Git**: Version control is essential, and Git is a widely used system. If
    not already installed, you can get it from [git-scm.com](http://git-scm.com).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Git**：版本控制是必不可少的，Git 是一个广泛使用的系统。如果尚未安装，您可以从 [git-scm.com](http://git-scm.com)
    获取它。'
- en: '**GitHub account**: A GitHub account is required to access the code repositories.
    Sign up at [github.com](http://github.com) if you haven’t already.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**GitHub 账户**：要访问代码仓库，需要 GitHub 账户。如果您还没有，请前往 [github.com](http://github.com)
    注册。'
- en: 'The code used in the chapter is available on GitHub at the following address:
    [https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter01](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter01).
    You can clone or download the repository at [https://github.com/PacktPublishing/FastAPI-Cookbook](https://github.com/PacktPublishing/FastAPI-Cookbook)
    to follow along on your local machine.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的代码可在以下地址的 GitHub 上找到：[https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter01](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter01)。您可以在本地机器上通过
    [https://github.com/PacktPublishing/FastAPI-Cookbook](https://github.com/PacktPublishing/FastAPI-Cookbook)
    克隆或下载存储库以进行跟随。
- en: Setting up your development environment
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的开发环境
- en: This recipe, dedicated to setting up your development environment, is a critical
    foundation for any successful project in web development. Here, you’ll learn how
    to install and configure all the essential tools needed to start building with
    FastAPI.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这份食谱，致力于设置您的开发环境，是任何成功的 Web 开发项目的关键基础。在这里，您将学习如何安装和配置所有必需的工具，以便开始使用 FastAPI
    进行构建。
- en: We begin by guiding you through the installation of Python, the core language
    behind FastAPI. Next, we’ll move on to installing FastAPI itself, along with Uvicorn,
    a lightning-fast ASGI server, which serves as the bedrock for running your FastAPI
    applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将指导您安装 Python，这是 FastAPI 背后的核心语言。接下来，我们将继续安装 FastAPI 本身，以及 Uvicorn，一个闪电般的
    ASGI 服务器，它是运行您的 FastAPI 应用程序的基础。
- en: Setting up an IDE is our next stop. Whether you prefer VS Code, PyCharm, or
    any other Python-friendly IDE, we’ll provide tips to make your development process
    smoother and more efficient.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 IDE 是我们的下一个目标。无论您更喜欢 VS Code、PyCharm 还是其他任何 Python 友好的 IDE，我们都会提供一些提示，使您的开发过程更加顺畅和高效。
- en: Lastly, we’ll introduce you to Git and GitHub – indispensable tools for version
    control and collaboration in modern software development. Understanding how to
    use these tools will not only help you manage your code effectively but also open
    doors to the vast world of community-driven development and resources.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将向您介绍 Git 和 GitHub – 这些是现代软件开发中版本控制和协作不可或缺的工具。了解如何使用这些工具不仅可以帮助您有效地管理代码，而且还能打开通往社区驱动开发和资源的广阔世界的大门。
- en: Getting ready
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: FastAPI works with Python, so you need to check your Python version before using
    it. This is an important step for setting up FastAPI. We will guide you through
    how to install it.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 与 Python 兼容，因此在使用之前您需要检查您的 Python 版本。这是设置 FastAPI 的重要步骤。我们将指导您如何安装它。
- en: Windows installation
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Windows 安装
- en: 'If you work on Windows, follow these steps to install Python:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Windows 上工作，请按照以下步骤安装 Python：
- en: 'Visit the official Python website: [python.org](http://python.org).'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问官方 Python 网站：[python.org](http://python.org)。
- en: Download the latest version of Python or any other version higher than 3.9.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Python 的最新版本或任何高于 3.9 的版本。
- en: Run the installer. Ensure to check the box that says **Add Python to PATH**
    before clicking **Install Now**.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行安装程序。在点击“立即安装”之前，请确保勾选“将 Python 添加到 PATH”的复选框。
- en: After the installation, open Command Prompt and type `python --version` to confirm
    the installation.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装后，打开命令提示符并输入 `python --version` 以确认安装。
- en: macOS/Linux installation
  id: totrans-37
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: macOS/Linux 安装
- en: macOS usually comes with Python pre-installed; however, it might not be the
    latest version.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: macOS 通常预装了 Python，但可能不是最新版本。
- en: 'You can use `Homebrew` (a package manager for macOS). To install it, open the
    terminal and run it:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `Homebrew`（macOS 的包管理器）。要安装它，打开终端并运行以下命令：
- en: '[PRE0]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Then, you can install Python – still from the terminal – with the following
    command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以使用以下命令在终端中安装 Python：
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'On Linux, you can install Python using the package manager by running the following
    command:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，您可以通过运行以下命令使用包管理器安装 Python：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: That’s all you need to install Python on macOS and Linux systems.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您在 macOS 和 Linux 系统上安装 Python 所需要的一切。
- en: Checking the installation
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 检查安装
- en: 'You can then check that Python is correctly installed by running the following
    command in the terminal:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，在终端中运行以下命令以检查 Python 是否正确安装：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you installed it on Linux, the binary command is `python3`, so you can check
    that Python is correctly installed by running the following command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 Linux 上安装了它，二进制命令是 `python3`，因此您可以通过运行以下命令来检查 Python 是否正确安装：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Once Python is installed, we want to make sure that the Python’s package manager
    is correctly installed. It comes with Python’s installation, and it’s called `pip`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了 Python，我们想要确保 Python 的包管理器已正确安装。它随 Python 的安装一起提供，被称为 `pip`。
- en: 'From a terminal window, run the following command:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 从终端窗口运行以下命令：
- en: '[PRE5]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'On Linux, run the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上，运行以下命令：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once Python is installed on your computer, you can now consider installing FastAPI.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的计算机上安装了 Python，您现在可以考虑安装 FastAPI。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: When you have Python and `pip` ready, we can continue with installing FastAPI,
    the IDE. Then, we will configure Git.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当您已经准备好 Python 和 `pip` 后，我们可以继续安装 FastAPI 和 IDE。然后，我们将配置 Git。
- en: 'We will do it by following these steps:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤进行：
- en: Installing FastAPI and Uvicorn
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 FastAPI 和 Uvicorn
- en: Setting up your IDE (VS Code or PyCharm)
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置您的 IDE（VS Code 或 PyCharm）
- en: Setting up Git and GitHub to track your project
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置 Git 和 GitHub 以跟踪您的项目
- en: Installing FastAPI and Uvicorn
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装 FastAPI 和 Uvicorn
- en: With Python set up, the next step is installing FastAPI and Uvicorn. FastAPI
    is the framework we’ll use to build our applications, and Uvicorn is an ASGI server
    that runs and serves our FastAPI applications.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好 Python 后，下一步是安装 FastAPI 和 Uvicorn。FastAPI 是我们将用来构建应用程序的框架，而 Uvicorn 是一个
    ASGI 服务器，用于运行和提供我们的 FastAPI 应用程序。
- en: 'Open your command-line interface and install FastAPI and Uvicorn together by
    running the following command:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 打开您的命令行界面，通过运行以下命令一起安装 FastAPI 和 Uvicorn：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This command installs FastAPI along with its recommended dependencies, including
    Uvicorn.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将安装 FastAPI 以及其推荐的依赖项，包括 Uvicorn。
- en: To verify the installation, you can simply run `uvicorn --version` from the
    terminal.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证安装，您只需在终端中运行 `uvicorn --version` 即可。
- en: Setting up your IDE
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置您的 IDE
- en: Choosing the right IDE is a crucial step in your FastAPI journey. An IDE is
    more than just a text editor; it’s a space where you write, debug, and test your
    code.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 选择正确的 IDE 是您 FastAPI 之旅中的关键步骤。IDE 不仅仅是一个文本编辑器；它是一个您编写、调试和测试代码的空间。
- en: A good IDE can significantly enhance your coding experience and productivity.
    For FastAPI development and Python in general, two popular choices are VS Code
    and PyCharm.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个好的 IDE 可以显著提高您的编码体验和生产力。对于 FastAPI 开发以及 Python 的一般使用，两个流行的选择是 VS Code 和 PyCharm。
- en: VS Code
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: VS Code
- en: '**VS Code** is a free, open source, lightweight IDE with powerful features.
    It offers excellent Python support and is highly customizable.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**VS Code** 是一个免费、开源、轻量级的 IDE，具有强大的功能。它提供了出色的 Python 支持，并且高度可定制。'
- en: You can download and install VS Code from the official website (`code.visualstudio.com`).
    The installation is quite straightforward. Once installed, open VS Code, go to
    `python`. Install the Microsoft version, and that is it.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从官方网站（`code.visualstudio.com`）下载并安装 VS Code。安装过程相当简单。安装完成后，打开 VS Code，转到
    `python`。安装微软版本，然后完成。
- en: PyCharm
  id: totrans-75
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: PyCharm
- en: '**PyCharm**, created by JetBrains, is specifically tailored for Python development.
    It offers a broad range of tools for professional developers, including excellent
    support for web development frameworks such as FastAPI.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCharm** 由 JetBrains 创建，专门针对 Python 开发。它为专业开发者提供了一系列工具，包括对 FastAPI 等网络开发框架的优秀支持。'
- en: 'You can choose between a Community free edition and a Professional paid version.
    For the scope of the book, the Community Edition is largely sufficient, and it
    can be downloaded on the JetBrains website: [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以选择社区免费版和专业付费版。对于本书的范围，社区版已经足够，您可以在 JetBrains 网站上下载：[https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/).
- en: For PyCharm as well, the installation is straightforward.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 PyCharm，安装过程也很简单。
- en: Enhancing your development experience
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 提高您的开发体验
- en: 'For both IDEs – and if you use another of your choice – make sure to leverage
    basic perks to improve your experience as a developer and be more efficient. Here
    is a short checklist that I use when I approach a new IDE environment:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这两个 IDE - 以及如果您使用其他 IDE - 确保利用基本优势来提高您的开发体验并提高效率。以下是我接近新的 IDE 环境时使用的简短清单：
- en: '**Code completion and analysis**: Good IDEs provide intelligent code completion,
    error highlighting, and fixes, which are invaluable for efficient development'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码补全和分析**：好的 IDE 提供智能代码补全、错误突出显示和修复，这对于高效开发非常有价值。'
- en: '**Debugging tools**: Utilize debugging features provided by the IDE to diagnose
    and resolve issues in your code'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调试工具**：利用 IDE 提供的调试功能来诊断和解决代码中的问题'
- en: '**Version control integration**: A good IDE offers support for Git, simplifying
    code change tracking and repository management'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本控制集成**：一个好的 IDE 提供了对 Git 的支持，简化了代码更改跟踪和仓库管理'
- en: '**Customization**: Customize your IDE by adjusting themes, key binding, and
    settings to match your workflow, making your development experience as comfortable
    and productive as possible'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自定义**：通过调整主题、快捷键和设置来自定义你的 IDE，使你的开发体验尽可能舒适和高效'
- en: Setting up Git and GitHub
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置 Git 和 GitHub
- en: Version control is an essential aspect of software development. Git, coupled
    with GitHub, forms a powerful toolset for tracking changes, collaborating, and
    maintaining the history of your projects. You can download the Git installer from
    the official website [git-scm.com](http://git-scm.com) and install it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制是软件开发的一个基本方面。Git 与 GitHub 结合，形成了一套强大的工具集，用于跟踪更改、协作和维护项目的历史。你可以从官方网站 [git-scm.com](http://git-scm.com)
    下载 Git 安装程序并安装它。
- en: 'After installation, configure Git with your username and email using the following
    commands in the command line:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，使用以下命令在命令行中配置 Git 的用户名和电子邮件：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: GitHub is the platform chosen to store code examples used in the book. Sign
    up for a GitHub account at [github.com](http://github.com) if you don’t already
    have one.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 是本书中使用的代码示例存储的平台。如果你还没有，请在 [github.com](http://github.com) 上注册一个 GitHub
    账户。
- en: Creating a new FastAPI project
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个新的 FastAPI 项目
- en: Setting up a well-organized project structure is crucial for maintaining a clean
    code base, especially as your application grows and evolves. This recipe will
    guide you on how to create your first basic FastAPI project. A structured project
    simplifies navigation, debugging, and collaboration. For FastAPI, following best
    practices in structuring can significantly enhance scalability and maintainability.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个有组织的项目结构对于维护干净的代码库至关重要，尤其是在你的应用程序增长和演变时。这个食谱将指导你如何创建你的第一个基本的 FastAPI 项目。一个结构化的项目简化了导航、调试和协作。对于
    FastAPI，遵循结构化的最佳实践可以显著提高可扩展性和可维护性。
- en: Getting ready
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: All you need to do to follow the recipe is make sure that you have your development
    environment set up.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循这个食谱，你需要确保你的开发环境已经设置好。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: We begin by making a project folder named `fastapi_start` that we’ll use as
    the root project folder.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先创建一个名为 `fastapi_start` 的项目文件夹，我们将使用它作为根项目文件夹。
- en: 'From the terminal at the root project folder level, we’ll set up our virtual
    environment by running the following command:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目文件夹级别的终端中，我们将通过运行以下命令设置我们的虚拟环境：
- en: '[PRE9]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, you need to activate the environment. If you are on Mac or Linux, run
    the following command:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要激活环境。如果你使用的是 Mac 或 Linux，请运行以下命令：
- en: '[PRE10]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, you can install the `fastapi` package with `uvicorn` in your environment
    by running the following command:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你可以通过运行以下命令在你的环境中安装 `fastapi` 包和 `uvicorn`：
- en: '[PRE11]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This file is where your FastAPI application begins. Start by writing the import
    of the `FastAPI` module. Then, create an instance of the `FastAPI` class:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此文件是你的 FastAPI 应用程序开始的地方。首先，编写 `FastAPI` 模块的导入。然后，创建 `FastAPI` 类的一个实例：
- en: '[PRE12]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This instance houses the code of your application.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此实例存放着你的应用程序代码。
- en: 'Next, define your first route. Routes in FastAPI are like signposts that direct
    requests to the appropriate function. Start with a simple route that returns a
    greeting to the world:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，定义你的第一个路由。在 FastAPI 中，路由就像路标，将请求导向相应的函数。从一个简单的返回问候世界的路由开始：
- en: '[PRE13]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You’ve just created the code for your first FastAPI application.
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你刚刚创建了你的第一个 FastAPI 应用程序的代码。
- en: 'If you want to track the project, you can set up Git as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要跟踪项目，你可以按照以下方式设置 Git：
- en: 'In your project’s root directory, open a terminal or Command Prompt and run
    the following command:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的项目根目录中，打开终端或命令提示符并运行以下命令：
- en: '[PRE14]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, add your files with the following command:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令添加你的文件：
- en: '[PRE15]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Then, commit them using the following command:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，使用以下命令提交它们：
- en: '[PRE16]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: And that's it. You are now tracking your project with Git.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。你现在可以使用 Git 跟踪你的项目了。
- en: There’s more...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: A well-structured project is not just about neatness; it’s about creating a
    sustainable and scalable environment where your application can grow and evolve.
    In FastAPI, this means organizing your project in a way that separates different
    aspects of your application logically and efficiently.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 一个结构良好的项目不仅仅是关于整洁；它关乎创建一个可持续和可扩展的环境，让你的应用程序可以增长和演变。在 FastAPI 中，这意味着以逻辑和高效的方式组织你的项目，以分离应用程序的不同方面。
- en: 'There is no unique and perfect structure for a FastAPI project; however, a
    common approach is to divide your project into several key directories:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 FastAPI 项目来说，没有独特和完美的结构；然而，一个常见的做法是将你的项目分为几个关键目录：
- en: '`/src`: This is where your primary application code lives. Inside `/src`, you
    might have subdirectories for different modules of your application. For instance,
    you could have a `models` directory for your database models, a `routes` directory
    for your FastAPI routes, and a `services` directory for business logic.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/src`：这是你的主要应用程序代码所在的地方。在 `/src` 内，你可能会有不同模块的应用程序的子目录。例如，你可以有一个 `models` 目录用于你的数据库模型，一个
    `routes` 目录用于你的 FastAPI 路由，以及一个 `services` 目录用于业务逻辑。'
- en: '`/tests`: Keeping your tests separate from your application code is a good
    practice. It makes it easier to manage them and ensures that your production builds
    don’t include test code.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tests`：将你的测试代码与应用程序代码分开是一个好的做法。这使得管理它们变得更容易，并确保你的生产构建不包括测试代码。'
- en: '`/docs`: Documentation is crucial for any project. Whether it’s API documentation,
    installation guides, or usage instructions, having a dedicated directory for documentation
    helps maintain clarity.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/docs`：对于任何项目来说，文档都是至关重要的。无论是 API 文档、安装指南还是使用说明，为文档保留一个专门的目录有助于保持清晰。'
- en: See also
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can find detailed information on how to manage virtual environments with
    `venv` at the following link:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中找到有关如何使用 `venv` 管理虚拟环境的详细信息：
- en: '*Creation of virtual* *environments*: [https://docs.python.org/3/library/venv.xhtml](https://docs.python.org/3/library/venv.xhtml)'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*虚拟环境的创建*：[https://docs.python.org/3/library/venv.xhtml](https://docs.python.org/3/library/venv.xhtml)'
- en: 'To brush up your knowledge with Git and get familiar with adding, staging and
    commiting operations, have a look at this guide:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 为了用 Git 提升你的知识并熟悉添加、暂存和提交操作，请查看此指南：
- en: '*Git simple* *guide*: [https://rogerdudler.github.io/git-guide/](https://rogerdudler.github.io/git-guide/)'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Git 简明指南*：[https://rogerdudler.github.io/git-guide/](https://rogerdudler.github.io/git-guide/)'
- en: Understanding FastAPI basics
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 FastAPI 基础
- en: As we embark on our journey with FastAPI, it’s essential to build a solid foundation.
    FastAPI isn’t just another web framework; it’s a powerful tool designed to make
    your life as a developer easier, your applications faster, and your code more
    robust and maintainable.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始使用 FastAPI 的旅程时，建立一个坚实的基础至关重要。FastAPI 不仅仅是一个另一个网络框架；它是一个强大的工具，旨在使开发者的生活更轻松，使应用程序更快，使代码更健壮和易于维护。
- en: In this recipe, we’ll demystify the core concepts of FastAPI, delve into its
    unique features such as asynchronous programming, and guide you through creating
    and organizing your first endpoints. By the end of the recipe, you’ll have your
    first FastAPI server up and running – a milestone that marks the beginning of
    an exciting journey in modern web development.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将揭示 FastAPI 的核心概念，深入探讨其独特的功能，如异步编程，并指导你创建和组织你的第一个端点。到菜谱结束时，你将拥有一个运行中的第一个
    FastAPI 服务器——这是一个标志着现代网络开发激动人心旅程开始的里程碑。
- en: FastAPI is a modern, fast web framework for building APIs with Python based
    on standard Python type hints.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 是一个基于 Python 的现代、快速网络框架，用于构建基于标准 Python 类型提示的 API。
- en: 'Key features that define FastAPI are the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 定义 FastAPI 的关键特性如下：
- en: '**Speed**: It’s one of the fastest frameworks for building APIs in Python,
    thanks to its underlying Starlette framework for web parts and Pydantic for data
    handling'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：它是构建 Python API 中最快的框架之一，归功于其底层的 Starlette 框架和 Pydantic 数据处理'
- en: '**Ease of use**: FastAPI is designed to be easy to use, with intuitive coding
    that accelerates your development time'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**易用性**：FastAPI 被设计为易于使用，具有直观的编码，可以加速你的开发时间'
- en: '**Automatic documentation**: With FastAPI, the API documentation is generated
    automatically, a feature that is both a time-saver and a boon for developers'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自动文档**：使用 FastAPI，API 文档是自动生成的，这是一个既节省时间又对开发者有益的特性'
- en: How to do it…
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: We will now explore how to use those features effectively with some general
    guidance.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将探讨如何有效地使用这些功能，并提供一些一般性的指导。
- en: 'We will go through the following steps:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将按照以下步骤进行：
- en: Applying asynchronous programming to our existing endpoints to improve time
    efficiency
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将异步编程应用于现有端点以提高时间效率
- en: Exploring routers and endpoints to better organize large code bases
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索路由器和端点以更好地组织大型代码库
- en: Running your first FastAPI server with a basic configuration
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本配置运行你的第一个 FastAPI 服务器
- en: Exploring the automatic documentation
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索自动文档
- en: Applying asynchronous programming
  id: totrans-142
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 应用异步编程
- en: One of the most powerful features of FastAPI is its support for asynchronous
    programming. This allows your applications to handle more requests simultaneously,
    making them more efficient. Asynchronous programming is a style of concurrent
    programming in which tasks are executed without blocking the execution of other
    tasks, improving the overall performance of your application. To integrate asynchronous
    programming smoothly, FastAPI leverages the `async`/`await` syntax ([https://fastapi.tiangolo.com/async/](https://fastapi.tiangolo.com/async/))
    and automatically integrates asynchronous functions.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 最强大的功能之一是其对异步编程的支持。这允许你的应用程序同时处理更多请求，使其更高效。异步编程是一种并发编程风格，其中任务在没有阻塞其他任务执行的情况下执行，从而提高了应用程序的整体性能。为了顺利集成异步编程，FastAPI
    利用 `async`/`await` 语法 ([https://fastapi.tiangolo.com/async/](https://fastapi.tiangolo.com/async/))
    并自动集成异步函数。
- en: 'So, the `read_root()` function in `main.py` from the previous code snippet
    in the *Creating a new FastAPI project* recipe can be written as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，从 *创建新的 FastAPI 项目* 菜单中的前一个代码片段中，`main.py` 中的 `read_root()` 函数可以写成如下所示：
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this case, the behavior of the code will be exactly the same as before.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，代码的行为将与之前完全相同。
- en: Exploring routers and endpoints
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索路由器和端点
- en: In FastAPI, organizing your code into routers and endpoints is a fundamental
    practice. This organization helps in making your code cleaner and more modular.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FastAPI 中，将代码组织成路由器和端点是基本实践。这种组织有助于使代码更整洁、更模块化。
- en: Endpoints
  id: totrans-149
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 端点
- en: Endpoints are the points at which API interactions happen. In FastAPI, an endpoint
    is created by decorating a function with an HTTP method, such as `@app.get("/")`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 端点是 API 交互发生的点。在 FastAPI 中，通过使用 HTTP 方法（如 `@app.get("/")`）装饰一个函数来创建端点。
- en: This signifies a `GET` request to the root of your application.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示对应用程序根的 `GET` 请求。
- en: 'Consider the following code snippet:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码片段：
- en: '[PRE18]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In this snippet, we define an endpoint for the root URL (`"/"`). When a `GET`
    request is made to this URL, the `read_root` function is invoked, returning a
    JSON response.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个片段中，我们定义了一个针对根 URL (`"/"`) 的端点。当对 URL 发起 `GET` 请求时，`read_root` 函数被调用，返回一个
    JSON 响应。
- en: Routers
  id: totrans-155
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 路由器
- en: When we need to handle multiple endpoints that are in different files, we can
    benefit from using routers. Routers assist us in grouping our endpoints into different
    modules, which makes our code base easier to maintain and understand. For example,
    we could use one router for operations related to users and another for operations
    related to products.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们需要处理位于不同文件中的多个端点时，我们可以从使用路由器中受益。路由器帮助我们将端点分组到不同的模块中，这使得我们的代码库更容易维护和理解。例如，我们可以为与用户相关的操作使用一个路由器，为与产品相关的操作使用另一个路由器。
- en: 'To define a router, first create a new file in the `fastapi_start` folder called
    `router_example.py`. Then, create the router as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义一个路由器，首先在 `fastapi_start` 文件夹中创建一个名为 `router_example.py` 的新文件。然后，创建路由器如下所示：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'You can now reuse it and attach the router to the FastAPI server instance in
    `main.py`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以重用它，并将路由器附加到 `main.py` 中的 FastAPI 服务器实例：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You now have the code to run the server that includes the router for the `GET
    /items` endpoint importer from another module.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经有了运行服务器的代码，其中包括来自另一个模块的 `GET /items` 端点的路由器导入。
- en: Running your first FastAPI server
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行你的第一个 FastAPI 服务器
- en: 'To run your FastAPI application, you need to point Uvicorn to your app instance.
    If your file is named `main.py` and your FastAPI instance is called `app`, you
    can start your server like this at the `fastapi_start` folder level:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行你的 FastAPI 应用程序，你需要将 Uvicorn 指向你的应用实例。如果你的文件名为 `main.py`，并且你的 FastAPI 实例名为
    `app`，你可以在 `fastapi_start` 文件夹级别像这样启动你的服务器：
- en: '[PRE21]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `--reload` flag makes the server restart after code changes, making it ideal
    for development.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`--reload` 标志在代码更改后使服务器重新启动，这使得它非常适合开发。'
- en: Once the server is running, you can access your API at `http://127.0.0.1:8000`.
    If you visit this URL in your browser, you’ll see the JSON response from the `"/"`
    endpoint we have just created.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器启动后，你可以在 `http://127.0.0.1:8000` 访问你的 API。如果你在浏览器中访问这个 URL，你会看到来自我们刚刚创建的
    `"/"` 端点的 JSON 响应。
- en: Exploring the automatic documentation
  id: totrans-167
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 探索自动文档
- en: 'One of the most exciting features of FastAPI is its automatic documentation.
    When you run your FastAPI application, two documentation interfaces are automatically
    generated: **Swagger UI** and **Redoc**.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 最令人兴奋的特性之一是其自动文档。当你运行 FastAPI 应用程序时，会自动生成两个文档接口：**Swagger UI** 和 **Redoc**。
- en: You can access these at `http://127.0.0.1:8000/docs` for Swagger UI and `http://127.0.0.1:8000/redoc`
    for Redoc.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过 `http://127.0.0.1:8000/docs` 访问 Swagger UI，通过 `http://127.0.0.1:8000/redoc`
    访问 Redoc。
- en: These interfaces provide an interactive way to explore your API and test its
    functionality.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些接口提供了一种交互式的方式来探索你的 API 并测试其功能。
- en: See also
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: 'You can discover more about what we covered in the recipe at the following
    links:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在以下链接中了解更多关于我们在菜谱中涵盖的内容：
- en: '*First* *Steps*: [https://fastapi.tiangolo.com/tutorial/first-steps/](https://fastapi.tiangolo.com/tutorial/first-steps/)'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*第一步*：[https://fastapi.tiangolo.com/tutorial/first-steps/](https://fastapi.tiangolo.com/tutorial/first-steps/)'
- en: '*Docs* *URLs*: [https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls)'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*文档 URL*：[https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls)'
- en: '*Concurrency and async /* *await*: [https://fastapi.tiangolo.com/async/](https://fastapi.tiangolo.com/async/)'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*并发和异步 /* *await*：[https://fastapi.tiangolo.com/async/](https://fastapi.tiangolo.com/async/)'
- en: Defining your first API endpoint
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义你的第一个 API 端点
- en: 'Now that you have a fundamental grasp of FastAPI and your development environment
    is all set up, it’s time to take the next thrilling step: creating your first
    API endpoint.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经对 FastAPI 有了一个基本的了解，你的开发环境也已经全部设置好，是时候迈出下一个激动人心的步骤：创建你的第一个 API 端点。
- en: This is where the real magic of FastAPI begins to shine. You’ll see how effortlessly
    you can build a functional API endpoint, ready to respond to HTTP requests.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 FastAPI 真正的魔力开始显现的地方。你会看到你可以多么轻松地构建一个功能性的 API 端点，准备好响应 HTTP 请求。
- en: In this recipe, you will create a basic draft of a backend service for a bookstore.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，你将创建一个书店后端服务的基本草案。
- en: Getting ready
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure you know how to start a basic FastAPI project from the *Creating a
    new FastAPI* *project* recipe.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你知道如何从 *创建一个新的 FastAPI 项目* 菜谱中启动一个基本的 FastAPI 项目。
- en: How to do it...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: In the realm of web APIs, the `GET` request is perhaps the most common. It’s
    used to retrieve data from the server. In FastAPI, handling a `GET` request is
    simple and intuitive. Let’s create a basic `GET` endpoint.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Web API 领域中，`GET` 请求可能是最常见的一种。它用于从服务器检索数据。在 FastAPI 中，处理 `GET` 请求既简单又直观。让我们创建一个基本的
    `GET` 端点。
- en: 'Imagine you’re building an API for a bookstore. Your first endpoint will provide
    information about a book when given its ID. Here’s how you do it:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在构建一个书店的 API。你的第一个端点将在给定其 ID 的情况下提供关于一本书的信息。下面是如何做到这一点：
- en: Create a new `bookstore` folder that will contain the code you are going to
    write.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `bookstore` 的新文件夹，它将包含你将要编写的代码。
- en: 'Create in it a `main.py` file containing the server instance:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中创建一个包含服务器实例的 `main.py` 文件：
- en: '[PRE22]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code snippet, the `@app.get("/books/{book_id}")` decorator
    tells FastAPI that this function will respond to `GET` requests at the `/books/{book_id}`
    path. `{book_id}` in the path is a path parameter, which you can use to pass values
    dynamically. FastAPI automatically extracts the `book_id` parameter and passes
    it to your function.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，`@app.get("/books/{book_id}")` 装饰器告诉 FastAPI 这个函数将响应 `/books/{book_id}`
    路径上的 `GET` 请求。路径中的 `{book_id}` 是一个路径参数，你可以用它来动态传递值。FastAPI 会自动提取 `book_id` 参数并将其传递给你的函数。
- en: Type hints and automatic data validation
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 类型提示和自动数据验证
- en: 'Notice the use of type hints (`book_id: int`). FastAPI uses these hints to
    perform data validation. If a request is made with a non-integer `book_id` parameter,
    FastAPI automatically sends a helpful error response.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '注意到使用了类型提示（`book_id: int`）。FastAPI 使用这些提示来进行数据验证。如果请求中带有非整数的 `book_id` 参数，FastAPI
    会自动发送一个有用的错误响应。'
- en: How it works…
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'With your `GET` endpoint defined, run your FastAPI application using Uvicorn,
    just as you did previously:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了 `GET` 端点后，使用 Uvicorn 运行你的 FastAPI 应用程序，就像你之前做的那样：
- en: '[PRE23]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: On the terminal, you can read the message logs describing that the server is
    running on port `8000`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端上，您可以阅读描述服务器正在端口`8000`上运行的日志消息。
- en: One of FastAPI’s most beloved features is its automatic generation of interactive
    API documentation using Swagger UI. This tool allows you to test your API endpoints
    directly from your browser without writing any additional code, and you can directly
    check the presence of the newly created endpoint in it.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI最受欢迎的特性之一是其使用Swagger UI自动生成交互式API文档。这个工具允许您直接从浏览器中测试您的API端点，而无需编写任何额外的代码，并且您可以直接检查其中新创建的端点是否存在。
- en: Using Swagger UI
  id: totrans-196
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Swagger UI
- en: To test your new `GET` endpoint, navigate to `http://127.0.0.1:8000/docs` in
    your browser. This URL brings up the Swagger UI documentation for your FastAPI
    application. Here, you’ll see your `/books/{book_id}` endpoint listed. Click on
    it, and you’ll be able to execute a test request right from the interface. Try
    inputting a book ID and see the response your API generates.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试您的新`GET`端点，请在浏览器中导航到`http://127.0.0.1:8000/docs`。这个URL会显示您的FastAPI应用的Swagger
    UI文档。在这里，您会看到您的`/books/{book_id}`端点被列出。点击它，您将能够从界面直接执行测试请求。尝试输入一个书籍ID，看看您的API生成的响应。
- en: Postman – a versatile alternative
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Postman – 一种多功能的替代方案
- en: While Swagger UI is convenient for quick tests, you might want to use a more
    robust tool such as Postman for more complex scenarios. Postman is an API client
    that lets you build, test, and document your APIs more extensively.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Swagger UI对于快速测试来说很方便，但您可能希望使用像Postman这样的更健壮的工具来处理更复杂的场景。Postman是一个API客户端，它允许您更广泛地构建、测试和记录您的API。
- en: To use Postman, download and install it from Postman’s website ([https://www.postman.com/downloads/](https://www.postman.com/downloads/)).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Postman，请从Postman网站下载并安装它（[https://www.postman.com/downloads/](https://www.postman.com/downloads/))。
- en: Once installed, create a new request. Set the method to `GET` and the request
    URL to your FastAPI endpoint, `http://127.0.0.1:8000/books/1`. Hit **Send**, and
    Postman will display the response from your FastAPI server.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，创建一个新的请求。将方法设置为`GET`，并将请求URL设置为您的FastAPI端点，`http://127.0.0.1:8000/books/1`。点击**发送**，Postman将显示您的FastAPI服务器的响应。
- en: Working with path and query parameters
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用路径和查询参数进行工作
- en: One of the most crucial aspects of API development is handling parameters. Parameters
    allow your API to accept input from users, making your endpoints dynamic and responsive.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: API开发中最关键的一个方面是处理参数。参数允许您的API接受用户的输入，使您的端点变得动态和响应。
- en: In this recipe, we will explore how to capture and handle path, query parameters,
    and test them efficiently, enhancing the flexibility and functionality of your
    FastAPI applications.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将探讨如何捕获和处理路径、查询参数，并高效地测试它们，从而增强FastAPI应用的灵活性和功能性。
- en: Getting ready
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow the recipe, make sure you know how to create a basic endpoint from
    the previous recipe.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循这个食谱，请确保您知道如何从上一个食谱中创建一个基本的端点。
- en: How to do it…
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Path parameters are parts of the URL that are expected to change. For instance,
    in an endpoint such as `/books/{book_id}`, `book_id` is a path parameter. FastAPI
    allows you to capture these parameters effortlessly and use them in your function.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 路径参数是URL中预期会变化的组成部分。例如，在一个如`/books/{book_id}`的端点中，`book_id`是一个路径参数。FastAPI允许您轻松捕获这些参数并在函数中使用它们。
- en: 'Let’s expand our bookstore API with a new endpoint that uses path parameters.
    This time, we’ll create a route to get information about a specific author:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过添加一个新的端点来扩展我们的书店API，这个端点使用路径参数。这次，我们将创建一个获取特定作者信息的路由：
- en: '[PRE24]'
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The name will not change; however, the `author_id` value will be the one provided
    by the query request.
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 名称将不会改变；然而，`author_id`的值将是查询请求提供的那个。
- en: Query parameters are used to refine or customize the response of an API endpoint.
    They can be included in the URL after a question mark (`?`). For instance, `/books?genre=fiction&year=2010`
    might return only books that fall under the fiction genre released in 2010.
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询参数用于细化或自定义API端点的响应。它们可以包含在URL中的问号（`?`）之后。例如，`/books?genre=fiction&year=2010`可能会返回只有2010年发布的属于小说类别的书籍。
- en: 'Let’s add query parameters to our existing endpoint. Suppose we want to allow
    users to filter books by their publication year:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在现有的端点中添加查询参数。假设我们想允许用户通过出版年份过滤书籍：
- en: '[PRE25]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, `year` is an optional query parameter. By assigning `None` as a default
    value, we make it optional. If a year is specified, the endpoint returns books
    from that year; otherwise, it returns all books.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`year` 是一个可选的查询参数。通过将其默认值设置为 `None`，我们使其成为可选的。如果指定了年份，端点将返回该年的书籍；否则，它将返回所有书籍。
- en: Exercise
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 练习
- en: Using the `APIRouter` class, refactor each endpoint in a separate file and add
    the route to the FastAPI server.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `APIRouter` 类，将每个端点重构到单独的文件中，并将路由添加到 FastAPI 服务器。
- en: How it works…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'Now, from the command terminal, spin up the server with Uvicorn by running
    the following command:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从命令行终端，通过运行以下命令启动服务器：
- en: '[PRE26]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Testing endpoints with path parameters can be done using Swagger UI or Postman,
    similar to how we tested our basic `GET` endpoint.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Swagger UI 或 Postman 测试带有路径参数的端点，类似于我们测试基本 `GET` 端点的方式。
- en: In Swagger UI, at `http://localhost:8000/docs`, navigate to your `/authors/{author_id}`
    endpoint. You’ll notice that it prompts you to enter an `author_id` value before
    you can try it out. Enter a valid integer and execute the request. You should
    see a response with the author’s information.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Swagger UI 中，在 `http://localhost:8000/docs`，导航到您的 `/authors/{author_id}` 端点。您会注意到在您可以尝试之前，它会提示您输入
    `author_id` 值。输入一个有效的整数并执行请求。您应该会看到一个包含作者信息的响应。
- en: The `GET /books` endpoint will now show an optional field for the `year` query
    parameter. You can test it by entering different years and observing the varying
    responses.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`GET /books` 端点现在将显示一个可选的 `year` 查询参数字段。您可以通过输入不同的年份来测试它，并观察不同的响应。'
- en: If you use Postman instead, create a new `GET` request with the `http://127.0.0.1:8000/authors/1`
    URL. Sending this request should yield a similar response.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Postman，创建一个新的 `GET` 请求，URL 为 `http://127.0.0.1:8000/authors/1`。发送此请求应该会产生类似的响应。
- en: 'In Postman, append the query parameter to the URL like so: `http://127.0.0.1:8000/books?year=2021`.
    Sending this request should return books published in the year 2021.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Postman 中，将查询参数附加到 URL，如下所示：`http://127.0.0.1:8000/books?year=2021`。发送此请求应该返回
    2021 年出版的书籍。
- en: See also
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can find more about path and query parameters in the FastAPI official documentation
    at the following links:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 FastAPI 官方文档中找到更多关于路径和查询参数的信息，以下是一些链接：
- en: '*Path* *Parameters*: [https://fastapi.tiangolo.com/tutorial/path-params/](https://fastapi.tiangolo.com/tutorial/path-params/)'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*路径* *参数*：[https://fastapi.tiangolo.com/tutorial/path-params/](https://fastapi.tiangolo.com/tutorial/path-params/)'
- en: '*Query* *Parameters*: [https://fastapi.tiangolo.com/tutorial/query-params/](https://fastapi.tiangolo.com/tutorial/query-params/)'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*查询* *参数*：[https://fastapi.tiangolo.com/tutorial/query-params/](https://fastapi.tiangolo.com/tutorial/query-params/)'
- en: Defining and using request and response models
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义和使用请求和响应模型
- en: In the world of API development, data handling is a critical aspect that determines
    the robustness and reliability of your application. FastAPI simplifies this process
    through its seamless integration with **Pydantic**, a data validation and settings
    management library using Python type annotations. The recipe will show you how
    to define and use request and response models in FastAPI, ensuring your data is
    well structured, validated, and clearly defined.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在 API 开发的世界里，数据处理是决定您应用程序健壮性和可靠性的关键方面。FastAPI 通过与 **Pydantic** 的无缝集成简化了这一过程，Pydantic
    是一个使用 Python 类型注解进行数据验证和设置管理的库。这个菜谱将向您展示如何在 FastAPI 中定义和使用请求和响应模型，确保您的数据结构良好、经过验证且定义清晰。
- en: Pydantic models are a powerful feature for data validation and conversion. They
    allow you to define the structure, type, and constraints of the data your application
    handles, both for incoming requests and outgoing responses.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 模型是数据验证和转换的强大功能。它们允许您定义应用程序处理的数据的结构、类型和约束，无论是传入请求还是传出响应。
- en: In this recipe, we will see how to use Pydantic to ensure that your data conforms
    to the specified schema, providing an automatic layer of safety and clarity.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将看到如何使用 Pydantic 确保您的数据符合指定的模式，提供一层自动的安全性和清晰性。
- en: Getting ready
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe requires you to know how to set up a basic endpoint in FastAPI.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱要求您知道如何在 FastAPI 中设置基本端点。
- en: How to do it...
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'We will break the process into the following steps:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把整个过程分解为以下步骤：
- en: Creating the model
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建模型
- en: Defining the request body
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义请求体
- en: Validating request data
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 验证请求数据
- en: Managing response formats
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 管理响应格式
- en: Creating the model
  id: totrans-242
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建模型
- en: Let’s create a Pydantic `BaseModel` class for our bookstore application in a
    new file called `models.py`.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在名为 `models.py` 的新文件中为我们的书店应用程序创建一个 Pydantic `BaseModel` 类。
- en: 'Suppose we want to have a model for a book that includes the title, author,
    and publication year:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要一个包含标题、作者和出版年份的书的模型：
- en: '[PRE27]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Here, `Book` is a Pydantic `BaseModel` class with three fields: `title`, `author`,
    and `year`. Each field is typed, ensuring that any data conforming to this model
    will have these attributes with the specified data types.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`Book` 是一个具有三个字段：`title`、`author` 和 `year` 的 Pydantic `BaseModel` 类。每个字段都有类型，确保任何符合此模型的数据都将具有这些属性和指定的数据类型。
- en: Defining the request body
  id: totrans-247
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义请求体
- en: 'In FastAPI, Pydantic models are not just for validation. They also serve as
    the request body. Let’s add an endpoint to our application where users can add
    new books:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FastAPI 中，Pydantic 模型不仅用于验证，还作为请求体。让我们在我们的应用程序中添加一个端点，让用户可以添加新书：
- en: '[PRE28]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: In this endpoint, when a user sends a `POST` request to the `/book` endpoint
    with JSON data, FastAPI automatically parses and validates it against the `Book`
    model. If the data is invalid, the user gets an automatic error response.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在此端点中，当用户向 `/book` 端点发送带有 JSON 数据的 `POST` 请求时，FastAPI 会自动解析并验证它是否与 `Book` 模型相匹配。如果数据无效，用户会收到自动的错误响应。
- en: Validating request data
  id: totrans-251
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 验证请求数据
- en: 'Pydantic offers advanced validation features. For instance, you can add regex
    validations, default values, and more:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Pydantic 提供了高级验证功能。例如，你可以添加正则表达式验证、默认值等：
- en: '[PRE29]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For an exhaustive list of validation features, have a look at Pydantic’s official
    documentation: [https://docs.pydantic.dev/latest/concepts/fields/](https://docs.pydantic.dev/latest/concepts/fields/).'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看完整的验证功能列表，请查看 Pydantic 的官方文档：[https://docs.pydantic.dev/latest/concepts/fields/](https://docs.pydantic.dev/latest/concepts/fields/)
- en: Next, you can proceed to manage the response format.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以继续管理响应格式。
- en: Managing response formats
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理响应格式
- en: FastAPI allows you to define response models explicitly, ensuring that the data
    returned by your API matches a specific schema. This can be particularly useful
    for filtering out sensitive data or restructuring the response.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 允许你显式地定义响应模型，确保你的 API 返回的数据与特定的模式相匹配。这可以特别有用，用于过滤敏感数据或重新结构化响应。
- en: 'For example, let’s say you want the `/allbooks` `GET` endpoint to return a
    list of books, but only with their titles and authors, omitting the publication
    year. In `main.py`, add the following accordingly:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设你想要 `/allbooks` `GET` 端点返回一本书的列表，但只包含它们的标题和作者，省略出版年份。在 `main.py` 中相应地添加以下内容：
- en: '[PRE30]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, the `-> list[BookResponse]` function type hint tells FastAPI to use the
    `BookResponse` model for responses, ensuring that only the title and author fields
    are included in the response JSON. Alternatively, you can specify the response
    type in the endpoint decorator’s arguments as follows:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`-> list[BookResponse]` 函数类型提示告诉 FastAPI 使用 `BookResponse` 模型进行响应，确保响应 JSON
    中只包含标题和作者字段。或者，你可以在端点装饰器的参数中指定响应类型，如下所示：
- en: '[PRE31]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The `response_model` argument takes priority and can be used instead of the
    type hint to resolve type checker issues that may occur.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`response_model` 参数具有优先级，可以用作替代类型提示来解决可能出现的类型检查问题。'
- en: 'Check the documentation at `http://127.0.0.1:8000/docs`. Unroll the `/allbooks`
    endpoint details, and you will notice the example value response based on the
    schema as follows:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 请查阅文档，网址为 `http://127.0.0.1:8000/docs`。展开 `/allbooks` 端点详情，你会注意到基于以下模式的示例值响应：
- en: '[PRE32]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: By mastering Pydantic models in FastAPI, you are now capable of handling complex
    data structures with ease and precision. You’ve learned to define request bodies
    and manage response formats, ensuring data consistency and integrity throughout
    your application.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 通过掌握 FastAPI 中的 Pydantic 模型，你现在可以轻松且精确地处理复杂的数据结构。你已经学会了如何定义请求体和管理响应格式，确保在整个应用程序中保持数据的一致性和完整性。
- en: See also
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考也
- en: '**Pydantic** is a standalone project largely used for data validation in Python
    with many more features than what the recipe has shown. Feel free to have a look
    at the official documentation at the following link:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '**Pydantic** 是一个独立的项目，主要用于 Python 中的数据验证，具有比示例中展示的更多功能。请自由查看以下链接的官方文档：'
- en: '*Pydantic*: [https://docs.pydantic.dev/latest/](https://docs.pydantic.dev/latest/)'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Pydantic*：[https://docs.pydantic.dev/latest/](https://docs.pydantic.dev/latest/)'
- en: 'You can see more on response model usage at the FastAPI official documentation
    link:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 FastAPI 官方文档链接中了解更多关于响应模型的使用：[https://fastapi.tiangolo.com/](https://fastapi.tiangolo.com/)
- en: '*Response Model - Return* *Type*: [https://fastapi.tiangolo.com/tutorial/response-model/](https://fastapi.tiangolo.com/tutorial/response-model/)'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*响应模型 - 返回* *类型*: [https://fastapi.tiangolo.com/tutorial/response-model/](https://fastapi.tiangolo.com/tutorial/response-model/)'
- en: Handling errors and exceptions
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 处理错误和异常
- en: Error handling is an essential aspect of developing robust and reliable web
    applications. In FastAPI, managing errors and exceptions is not just about catching
    unexpected issues but also about proactively designing your application to respond
    to various error scenarios gracefully.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理是开发健壮和可靠的Web应用程序的一个基本方面。在FastAPI中，管理错误和异常不仅涉及捕获意外问题，还包括积极设计您的应用程序以优雅地应对各种错误场景。
- en: This recipe will guide you through custom error handling, validating data and
    handling exceptions, and testing these scenarios to ensure your FastAPI applications
    are resilient and user-friendly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将指导您通过自定义错误处理、验证数据和处理异常，以及测试这些场景，以确保您的FastAPI应用程序具有弹性和用户友好性。
- en: How to do it…
  id: totrans-274
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: FastAPI provides built-in support for handling exceptions and errors.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI提供了处理异常和错误的内置支持。
- en: When an error occurs, FastAPI returns a JSON response containing details about
    the error, which is very useful for debugging. However, there are situations where
    you might want to customize these error responses for better user experience or
    security.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 当发生错误时，FastAPI会返回一个包含错误详细信息的JSON响应，这对于调试非常有用。然而，在某些情况下，您可能希望自定义这些错误响应以提供更好的用户体验或安全性。
- en: Let’s create a custom error handler that catches a specific type of error and
    returns a custom response. For instance, if a requested resource is not found,
    you might want to return a more friendly error message.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个自定义错误处理器来捕获特定类型的错误并返回自定义响应。例如，如果请求的资源未找到，您可能希望返回一个更友好的错误消息。
- en: 'To do it, in the `main.py` file, add the following code accordingly:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现这一点，在`main.py`文件中相应地添加以下代码：
- en: '[PRE33]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In this example, the `http_exception_handler` function will be used to handle
    `HTTPException` errors. Whenever an `HTTPException` error is raised anywhere in
    your application, FastAPI will use this handler to return a custom response.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，将使用`http_exception_handler`函数来处理`HTTPException`错误。只要您的应用程序中任何地方引发`HTTPException`错误，FastAPI就会使用此处理器来返回自定义响应。
- en: 'You can test the response by creating a new endpoint that raises an HTTP exception:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过创建一个新的端点来引发HTTP异常来测试响应：
- en: '[PRE34]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The endpoint will explicitly throw the HTTP error response to showcase the customized
    message defined in the previous step.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 该端点将明确抛出HTTP错误响应，以展示之前步骤中定义的自定义消息。
- en: 'Now, spin the server from the command line with the following command:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用以下命令从命令行启动服务器：
- en: '[PRE35]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '{'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"message": "Oops! Something went wrong"'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '"message": "Oops! Something went wrong"'
- en: '}'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE36]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: import json
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: import json
- en: from fastapi import Request, status
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: from fastapi import Request, status
- en: from fastapi.exceptions import RequestValidationError
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: from fastapi.exceptions import RequestValidationError
- en: from fastapi.responses import PlainTextResponse
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: from fastapi.responses import PlainTextResponse
- en: '@app.exception_handler(RequestValidationError)'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.exception_handler(RequestValidationError)'
- en: async def validation_exception_handler(
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: async def validation_exception_handler(
- en: 'request: Request,'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 'request: Request,'
- en: 'exc: RequestValidationError'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 'exc: RequestValidationError'
- en: '):'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '):'
- en: return PlainTextResponse(
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: return PlainTextResponse(
- en: '"This is a plain text response:"'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '"这是一个纯文本响应："'
- en: f" \n{json.dumps(exc.errors(), indent=2)}",
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: f" \n{json.dumps(exc.errors(), indent=2)}",
- en: status_code=status.HTTP_400_BAD_REQUEST,
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: status_code=status.HTTP_400_BAD_REQUEST,
- en: )
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: )
- en: '[PRE37]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This is a plain text response:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个纯文本响应：
- en: '['
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '['
- en: '{'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "string_type",'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "string_type",'
- en: '"loc": ['
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '"loc": ['
- en: '"body",'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '"body",'
- en: '"author"'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '"author"'
- en: '],'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"msg": "Input should be a valid string",'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '"msg": "输入应是一个有效的字符串",'
- en: '"input": 3,'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '"input": 3,'
- en: '"url": "https://errors.pydantic.dev/2.5/v/string_type"'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '"url": "https://errors.pydantic.dev/2.5/v/string_type"'
- en: '},'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"type": "greater_than",'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '"type": "greater_than",'
- en: '"loc": ['
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '"loc": ['
- en: '"body",'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '"body",'
- en: '"year"'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '"year"'
- en: '],'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '],'
- en: '"msg": "Input should be greater than 1900",'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '"msg": "输入应大于1900",'
- en: '"input": 0,'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '"input": 0,'
- en: '"ctx": {'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '"ctx": {'
- en: '"gt": 1900'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '"gt": 1900'
- en: '},'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '"url": "https://errors.pydantic.dev/2.5/v/greater_than"'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '"url": "https://errors.pydantic.dev/2.5/v/greater_than"'
- en: '}'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ']'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[PRE38]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
