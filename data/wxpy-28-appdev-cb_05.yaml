- en: Chapter 5. Providing Information and Alerting Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 提供信息和提醒用户
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Showing a `MessageBox`
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示一个 `消息框`
- en: Providing help with `ToolTips`
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供对 `ToolTips` 的帮助
- en: Using `SuperToolTips`
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`超级工具提示`
- en: Displaying a `BalloonTip`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示一个`气球提示`
- en: Creating a custom `SplashScreen`
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义的 `SplashScreen`
- en: Showing task progress with the Progress dialog
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用进度对话框显示任务进度
- en: Creating an `AboutBox`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个 `关于框`
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: During an application's runtime, a wide variety of events can arise under a
    number of different circumstances. This gives rise to the need to be able to alert
    and inform users of these events in an equally wide variety of context-sensitive,
    intuitive, and effective ways.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序运行期间，在多种不同情况下可能会出现各种各样的事件。这导致了需要能够以同样广泛的各种上下文敏感、直观和有效的方式提醒和通知用户这些事件的需求。
- en: Providing information in the right way at the right time is crucial to the usability
    of an application. wxPython includes many widgets to help meet the specific needs
    of any type of application. So let's take a look at some of these widgets and
    see how to use them to their fullest.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在正确的时间和方式提供信息对于应用程序的可用性至关重要。wxPython 包含许多小部件来帮助满足任何类型应用程序的特定需求。因此，让我们来看看这些小部件，并了解如何充分利用它们。
- en: Showing a MessageBox
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示消息框
- en: '`MessageBoxes` are one of, if not, the most common and easy ways of alerting
    users and providing them with the ability to make simple choices. `MessageBoxes`
    come in a number of varying forms but all share two common points. They all have
    a (usually) short caption message and one or more buttons that allow the user
    to respond to the message. This recipe shows how to add a `MessageBox` that gives
    the user a chance to abort closing a `Frame`.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '`消息框`是（如果不是）最常见和最简单的方式之一，用于提醒用户并为他们提供做出简单选择的能力。`消息框`有多种不同的形式，但都共享两个共同点。它们都有一个（通常是）简短的标题消息和一个或多个按钮，允许用户对消息做出回应。这个配方展示了如何添加一个`消息框`，让用户有机会取消关闭`框架`。'
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'As an example of how to show a `MessageBox`, we will create a little Frame
    class that uses a `MessageBox` as a confirmation to the window close event:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个如何显示`MessageBox`的例子，我们将创建一个小的`Frame`类，它使用`MessageBox`作为对窗口关闭事件的确认：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![How to do it...](img/1780_05_01.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1780_05_01.jpg)'
- en: How it works...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`wx.MessageBox` is a function that will create, show, and clean up a modal
    dialog. It only requires the first parameter, which specifies the message that
    will be displayed:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`wx.MessageBox` 是一个创建、显示和清理模态对话框的函数。它只需要第一个参数，该参数指定了将要显示的消息：'
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The other parameters are all optional keyword parameters. The second parameter
    is used to specify the dialog's title. The third parameter is the style parameter
    for specifying how the dialog will look and what buttons it will have on it. This
    parameter is just like any other widget constructor in that its value will be
    a bitmask of style flags. The fourth parameter can be used to specify the parent
    window of the dialog. The final two parameters can be used for explicitly setting
    the dialog's X and Y coordinates on the desktop.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 其他参数都是可选的关键字参数。第二个参数用于指定对话框的标题。第三个参数是样式参数，用于指定对话框的外观以及它将包含哪些按钮。这个参数就像任何其他小部件构造函数一样，其值将是一个样式标志的位掩码。第四个参数可以用来指定对话框的父窗口。最后两个参数可以用来在桌面上显式设置对话框的X和Y坐标。
- en: In this recipe, we just used the message and the style parameters. In the style
    parameter, we specified the `CENTER` flag which indicates that the dialog should
    be centered on its parent, which in this case will be the desktop since we did
    not specify a parent window. The `ICON_QUESTION` flag specifies that we want to
    display the question mark icon on the dialog. The last flag, `YES_NO`, says that
    we want to have a Yes and a No button on the dialog, so that the user can reply
    to the yes/no question we asked in our message.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们只使用了消息和样式参数。在样式参数中，我们指定了`CENTER`标志，表示对话框应在其父元素上居中显示，在这种情况下，由于我们没有指定父窗口，所以将是桌面。`ICON_QUESTION`标志指定我们希望在对话框上显示问号图标。最后一个标志`YES_NO`表示我们希望在对话框上有一个是/否按钮，以便用户可以回复我们消息中提出的是/否问题。
- en: When the user clicks on one of the dialog's buttons, the dialog will end its
    modal loop and return the value of the button that was clicked, which in this
    case will be either `YES` or `NO`. Here we simply check the return value and either
    `Veto` the event to stop the `Frame` from closing, or `Skip` it to allow the `Frame`
    to be destroyed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户点击对话框中的一个按钮时，对话框将结束其模态循环并返回被点击按钮的值，在这种情况下将是`YES`或`NO`。在这里，我们简单地检查返回值，要么`否决`事件以阻止`Frame`关闭，要么`跳过`它以允许`Frame`被销毁。
- en: Note
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**Platform Notice**'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**平台公告**'
- en: On OS X, these dialogs will show the application icon. This is done to conform
    with Apple's Human Interface Guidelines. This means that unless you have built
    your script into an applet and given it its own icon, the dialog will show the
    `Python.app` icon.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 OS X 上，这些对话框将显示应用程序图标。这样做是为了符合苹果的人机界面指南。这意味着除非你已经将你的脚本构建成一个小程序并为其指定了图标，否则对话框将显示
    `Python.app` 图标。
- en: There's more...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: There are a number of style flags that the `MessageBox` function can accept.
    Here is a quick reference list, broken down by category.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageBox` 函数可以接受多个样式标志。以下是一个按类别划分的快速参考列表。'
- en: Icons
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图标
- en: 'The `MessageBox` can show only one icon, so only one of the following flags
    should be specified at a time:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`MessageBox`只能显示一个图标，因此一次只能指定以下标志中的一个：'
- en: '| Flags | Description |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 描述 |'
- en: '| --- | --- |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `wx.ICON_ERROR` | Display an icon on the dialog that signifies that an error
    has occurred. |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `wx.ICON_ERROR` | 在对话框上显示一个图标，表示已发生错误。 |'
- en: '| `wx.ICON_INFORMATION` | Display an icon on the dialog that signifies that
    the dialog is only displaying information. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `wx.ICON_INFORMATION` | 在对话框上显示一个图标，表示该对话框仅显示信息。 |'
- en: '| `wx.ICON_QUESTION` | Display an icon on the dialog that signifies that a
    question is being asked that the user needs to respond to. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `wx.ICON_QUESTION` | 在对话框上显示一个图标，表示用户需要回答的问题。 |'
- en: '| `wx.ICON_WARNING` | Display an icon on the dialog that signifies a warning
    message to the user. |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `wx.ICON_WARNING` | 在对话框上显示一个图标，表示向用户显示警告信息。 |'
- en: Buttons
  id: totrans-37
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按钮
- en: 'The following flags are used to specify the buttons to show in the dialog.
    By default, the dialog will just show an OK button:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标志用于指定在对话框中显示的按钮。默认情况下，对话框将仅显示一个“确定”按钮：
- en: '| Flags | Description |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| Flags | 描述 |'
- en: '| --- | --- |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `wx.CANCEL` | Add a Cancel button to the dialog. |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| `wx.CANCEL` | 向对话框添加一个取消按钮。 |'
- en: '| `wx.OK` | Add an OK button to the dialog. |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| `wx.OK` | 在对话框中添加一个确定按钮。 |'
- en: '| `wx.YES` | Add a Yes button to the dialog. |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| `wx.YES` | 添加一个“是”按钮到对话框。 |'
- en: '| `wx.NO` | Add a No button to the dialog. |'
  id: totrans-44
  prefs: []
  type: TYPE_TB
  zh: '| `wx.NO` | 在对话框中添加一个“否”按钮。 |'
- en: '| `wx.YES_NO` | Convenience for `wx.YES/wx.NO`. |'
  id: totrans-45
  prefs: []
  type: TYPE_TB
  zh: '| `wx.YES_NO` | `wx.YES/wx.NO`的便捷性。 |'
- en: '| `wx.YES_DEFAULT` | Set the Yes button as the default button. |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| `wx.YES_DEFAULT` | 设置“是”按钮为默认按钮。 |'
- en: '| `wx.NO_DEFAULT` | Set the No button as the default button. |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| `wx.NO_DEFAULT` | 设置“否”按钮为默认按钮。 |'
- en: Providing help with ToolTips
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供工具提示的帮助
- en: '`ToolTips` are small pop-up help texts that are shown when the mouse cursor
    hovers over a window object for a few moments. When the mouse leaves the window''s
    area they are automatically dismissed. They are very useful for places where it
    may be necessary to present extra information to your users about the function
    of a certain part of the interface. Nearly all window objects support having a
    `ToolTip` associated with them. This recipe shows how to add a `ToolTip` to a
    `Button`.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`工具提示`（`ToolTips`）是当鼠标光标在窗口对象上停留片刻时显示的小型弹出帮助文本。当鼠标离开窗口区域时，它们会自动消失。在需要向用户展示关于界面某部分功能额外信息的场合，它们非常有用。几乎所有的窗口对象都支持与它们关联一个`工具提示`。本食谱展示了如何向一个`按钮`添加一个`工具提示`。'
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In order to see how to add a `ToolTip` to a control, let''s just make a simple
    `Panel` class that has a single `Button` on it:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解如何向控件添加`ToolTip`，让我们先创建一个简单的`Panel`类，它上面有一个单独的`Button`：
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here, we just created a simple panel with a single button on it. The button
    just has a simple label that says `Go`. Since there is no other indication as
    to what this button may do, we then added a `ToolTip` to it by calling the `SetToolTipString`
    method. The `SetToolTipString` method belongs to the base `wx.Window` class so
    it can be used with any object that is visible on the screen. This method creates
    a `ToolTip` object and then calls the Window's `SetToolTip` method to associate
    `ToolTip` with the `Window`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们仅仅创建了一个带有单个按钮的简单面板。按钮上只有一个简单的标签，写着`Go`。由于没有其他指示说明这个按钮可能执行的操作，我们随后通过调用`SetToolTipString`方法向其添加了一个`ToolTip`。`SetToolTipString`方法属于基类`wx.Window`，因此它可以与屏幕上任何可见的对象一起使用。此方法创建一个`ToolTip`对象，然后调用窗口的`SetToolTip`方法将`ToolTip`与`Window`关联起来。
- en: There's more...
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The *Using SuperToolTips* recipe in this chapter shows another way of providing
    context sensitive help to users.
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的 *使用SuperToolTips* 菜单展示了为用户提供上下文相关帮助的另一种方法。
- en: See the *Playing with the mouse* recipe in [Chapter 2](ch02.html "Chapter 2. Responding
    to Events"), *Responding to Events* for some insight into how the system shows
    the tips when the mouse cursor enters the window.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参阅[第2章](ch02.html "第2章。响应事件")中的*鼠标玩转技巧*食谱，了解系统如何在鼠标光标进入窗口时显示提示的细节。
- en: Using SuperToolTips
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用SuperToolTips
- en: The `SuperToolTip` class is an advanced type of `ToolTip` provided by the `wx.lib.agw.supertooltip`
    module. Unlike the regular `ToolTip`, the `SuperToolTip` is a custom fully-owner-drawn
    control that supports a wide range of display options. It has the ability to show
    a header, a footer, a body section, and each section can also have an image shown
    in it. In addition to this, it also supports custom backgrounds, HTML rendering
    of the content, and hyperlinks. This recipe shows how to create and use a `SuperToolTip`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`SuperToolTip` 类是由 `wx.lib.agw.supertooltip` 模块提供的高级 `ToolTip` 类型。与常规的 `ToolTip`
    不同，`SuperToolTip` 是一个自定义的全拥有者绘制的控件，支持广泛的显示选项。它具有显示标题、页脚、主体部分的能力，并且每个部分也可以在其中显示图片。除此之外，它还支持自定义背景、内容的
    HTML 渲染和超链接。本食谱展示了如何创建和使用 `SuperToolTip`。'
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: '`wx.lib.agw` is available in wxPython 2.8.9.2 and higher.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`wx.lib.agw` 在 wxPython 2.8.9.2 及更高版本中可用。'
- en: How to do it...
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Let''s modify the sample from the *Providing help with ToolTips* recipe to
    show how a more verbose help message may be helpful in this case. This recipe
    uses two image files that are provided with the source code that accompanies this
    chapter:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改来自“使用 ToolTips 提供帮助”菜谱的示例，以展示更详细的帮助信息在这种情况下可能是有益的。这个菜谱使用了两个与本章源代码一起提供的图像文件：
- en: '[PRE3]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![How to do it...](img/1780_05_02.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1780_05_02.jpg)'
- en: How it works...
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Here, we took our previous recipe and changed it to use a `SuperToolTip` instead
    of the standard `ToolTip`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们修改了之前的配方，将其改为使用`SuperToolTip`而不是标准的`ToolTip`。
- en: First, we start by importing the extension module from the `wx.lib.agw` package
    so that we can access the `SuperToolTip` class. Then we proceed to create the
    `SuperToolTip` object for our button in the `SuperToolTipTestPanel` class. In
    our use case, this involves creating the tip with its body message, then setting
    a body image that will be shown to the left of our message. We then added some
    header text by calling the `SetHeader` method as well as a footer and footer image
    by using the `SetFooter` and `SetFooterBitmap` methods. The last setup step we
    make is to call `ApplyStyle`. This method allows for the use of one of the 30
    or so built-in style themes for the background gradient.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从`wx.lib.agw`包中导入扩展模块，以便我们可以访问`SuperToolTip`类。然后，我们在`SuperToolTipTestPanel`类中为我们的按钮创建`SuperToolTip`对象。在我们的用例中，这包括创建带有其正文消息的提示，然后设置一个将显示在我们消息左侧的正文图像。我们随后通过调用`SetHeader`方法添加了一些标题文本，以及通过使用`SetFooter`和`SetFooterBitmap`方法添加了页脚和页脚图像。最后一步设置是调用`ApplyStyle`方法。此方法允许使用大约30种内置样式主题之一来设置背景渐变。
- en: The final step in using the `SuperToolTip` is the important difference between
    it and the standard `ToolTip`. We have to call `SetTarget` on the `SuperToolTip`
    object instead of calling `SetToolTip` on the `Window` object (in this case our
    `Button)`. This is because the `SuperToolTip` manages when it is shown/hidden,
    and not the `Window` it belongs too.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `SuperToolTip` 的最后一步是它与标准 `ToolTip` 之间的重要区别。我们必须在 `SuperToolTip` 对象上调用 `SetTarget`
    而不是在 `Window` 对象（在这种情况下是我们的 `Button`）上调用 `SetToolTip`。这是因为 `SuperToolTip` 管理其显示/隐藏的时间，而不是它所属的
    `Window`。
- en: There's more...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The `SuperToolTip` has a few more options not covered in this recipe. Included
    below are some additional references and information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`SuperToolTip` 包含一些本食谱未涵盖的选项。以下是一些额外的参考和信息。'
- en: Styles
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样式
- en: The `ApplyStyles` method takes one of the named built-in styles as a parameter.
    There are currently about 30 different built-in styles. They are all defined and
    can be found in the `supertooltip` module. They can also be found by looking at
    the return value of `supertooltip.GetStyleKeys()`, which will return a list of
    all the built-in styles.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`ApplyStyles` 方法接受一个命名内置样式作为参数。目前大约有30种不同的内置样式。它们都在 `supertooltip` 模块中定义，并且可以通过查看
    `supertooltip.GetStyleKeys()` 的返回值来找到，该函数将返回所有内置样式的列表。'
- en: Additional customization
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 额外的自定义
- en: 'There are a few more additional methods that can be used to customize the appearance
    of the `SuperToolTip`. The following table includes a quick reference for these
    methods:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种额外的方法可以用来自定义`SuperToolTip`的外观。以下表格包含了这些方法的快速参考：
- en: '| Methods | Description |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `SetDrawHeaderLine(bool)` | Draw a horizontal separator line between the
    header and the body. |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| `SetDrawHeaderLine(bool)` | 在标题和正文之间绘制一条水平分隔线。 |'
- en: '| `SetDrawFooterLine(bool)` | Draw a horizontal separator line between the
    footer and the body. |'
  id: totrans-79
  prefs: []
  type: TYPE_TB
  zh: '| `SetDrawFooterLine(bool)` | 在页脚和主体之间绘制一条水平分隔线。 |'
- en: '| `SetDropShadow(bool)` | Use a drop shadow on the tip window. (Windows only)
    |'
  id: totrans-80
  prefs: []
  type: TYPE_TB
  zh: '| `SetDropShadow(bool)` | 在提示窗口上使用阴影效果。（仅限Windows） |'
- en: '| `SetUseFade(bool)` | Fade in/out of view. (Windows only) |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| `SetUseFade(bool)` | 在视图中淡入/淡出。(仅限Windows) |'
- en: '| `SetEndDelay(int)` | Set the time for which the tip will be shown. |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| `SetEndDelay(int)` | 设置提示显示的时间。 |'
- en: '| `SetTopGradientColour(colour)` | Sets the top gradient color. |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| `SetTopGradientColour(colour)` | 设置顶部渐变颜色。 |'
- en: '| `SetBottomGradientColour(colour)` | Sets the bottom gradient color. |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| `SetBottomGradientColour(colour)` | 设置底部渐变颜色。 |'
- en: '| `SetMiddleGradientColour(colour)` | Sets the middle gradient color. |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| `SetMiddleGradientColour(colour)` | 设置中间渐变颜色。 |'
- en: See also
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Providing help with ToolTips* recipe in this chapter shows a way to provide
    simple help messages.
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的“使用 ToolTips 提供帮助”配方展示了提供简单帮助信息的方法。
- en: Displaying a BalloonTip
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 显示气球提示
- en: '`BalloonTips` are yet another `ToolTip` implementation. They are fairly similar
    to the `SuperToolTip` but have a look and feel that imitates the Windows XP taskbar
    balloon notifications. When shown, the `BalloonTip` will create a tip window that
    has a point that extends towards the centre of its target window. This recipe
    shows how to add a `BalloonTip` to an application''s `TaskBarIcon`.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`BalloonTips` 是另一种 `ToolTip` 实现。它们与 `SuperToolTip` 相当相似，但外观和感觉模仿了 Windows XP
    任务栏的气球通知。当显示时，`BalloonTip` 将创建一个具有指向其目标窗口中心的尖点的提示窗口。本食谱展示了如何将 `BalloonTip` 添加到应用程序的
    `TaskBarIcon`。'
- en: Note
  id: totrans-90
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '`wx.lib.agw` is available in wxPython 2.8.9.2 and higher.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`wx.lib.agw` 在 wxPython 2.8.9.2 及更高版本中可用。'
- en: How to do it...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here, we will create a simple `TaskBarIcon` class that will show a `BalloonTip`
    when hovered over. In this example, we again use an external icon that is provided
    with the source code that accompanies this chapter:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建一个简单的 `TaskBarIcon` 类，当鼠标悬停在其上时将显示一个 `BalloonTip`。在这个示例中，我们再次使用与本章源代码一起提供的外部图标：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The `BalloonTip` class is found in the `wx.lib.agw.balloontip` module. To make
    it easier to use, we imported it with the alias `btip`. The `BalloonTip` constructor
    takes up to five optional keyword arguments to specify the tip''s contents and
    appearance:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`BalloonTip` 类位于 `wx.lib.agw.balloontip` 模块中。为了便于使用，我们使用别名 `btip` 导入了它。`BalloonTip`
    构造函数最多接受五个可选的关键字参数，用于指定提示框的内容和外观：'
- en: '| Keyword arguments | Description |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| 关键字参数 | 描述 |'
- en: '| --- | --- |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `topicon` | Accepts a `Bitmap` object that will be shown in the top left-hand
    corner of the `BalloonTip` window |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `topicon` | 接受一个将在 `BalloonTip` 窗口的左上角显示的 `Bitmap` 对象 |'
- en: '| `toptitle` | A string that specifies the title of the `BalloonTip` window
    |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `toptitle` | 一个指定 `BalloonTip` 窗口标题的字符串 |'
- en: '| `message` | A string that specifies the main message for the `BalloonTip`
    window |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `message` | 一个指定 `BalloonTip` 窗口主要信息的字符串 |'
- en: '| `shape` | Either `BT_RECTANGLE` or `BT_ROUNDED` (default), which specify
    the shape of the `BalloonTip` window |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `形状` | 要么是 `BT_RECTANGLE` 或 `BT_ROUNDED`（默认），用于指定 `BalloonTip` 窗口的形状 |'
- en: '| `tipstyle` | One of the following values for specifying how the `BalloonTip`
    window will be dismissed:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '| `tipstyle` | 指定如何关闭 `BalloonTip` 窗口的以下值之一：'
- en: '`BT_LEAVE:` The tip window will be dismissed when the mouse leaves the target
    window'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BT_LEAVE:` 当鼠标离开目标窗口时，提示窗口将被关闭'
- en: '`BT_CLICK:` The tip window will be dismissed when a user clicks on the target
    window'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BT_CLICK:` 当用户点击目标窗口时，提示窗口将被关闭'
- en: '`BT_BUTTON:` The tip window will be dismissed by clicking on a close button
    on the tip window'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BT_BUTTON:` 点击提示窗口上的关闭按钮将关闭提示窗口'
- en: '|'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: After creating the `BalloonTip`, we modified its start delay by making a call
    to `SetStartDelay`, which sets the delay in milliseconds from which the tip window
    will be shown after the mouse is moved over the target window. Finally, we called
    `SetTarget` to set the `TaskBarIcon` as the target window for this `BalloonTip`.
    After this, the `BalloonTip` is all set up for use with our `TaskBarIcon`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建了`BalloonTip`之后，我们通过调用`SetStartDelay`方法来修改其启动延迟，该方法设置从鼠标移动到目标窗口后显示提示窗口的延迟时间（以毫秒为单位）。最后，我们调用`SetTarget`来将`TaskBarIcon`设置为该`BalloonTip`的目标窗口。之后，`BalloonTip`就全部设置好了，可以与我们的`TaskBarIcon`一起使用。
- en: In the `TaskBarIcons` event handler for the exit menu event, we had to add a
    call to `DestroyTimer` on our `BalloonTip`. This is to ensure that the tip window
    is destroyed, otherwise if it is still open the applications main loop will not
    exit since there are still top-level windows in the application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在退出菜单事件的`TaskBarIcons`事件处理器中，我们不得不在我们的`BalloonTip`上添加对`DestroyTimer`的调用。这是为了确保提示窗口被销毁，否则如果它仍然打开，由于应用程序中仍有顶层窗口，应用程序的主循环将不会退出。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'As with most of the generic widgets available in `wx.lib`, the `BalloonTip`
    class offers a wide variety of methods to customize its appearance. The following
    table includes a quick reference to a number of these methods:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 与`wx.lib`中大多数通用小部件一样，`BalloonTip`类提供了多种方法来自定义其外观。下表包含了对这些方法的一些快速参考：
- en: '| Method | Description |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| 方法 | 描述 |'
- en: '| --- | --- |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `SetBalloonColour(colour)` | Sets the `BalloonTips` background color. Pass
    `None` to revert back to the default. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `SetBalloonColour(colour)` | 设置 `BalloonTips` 的背景颜色。传递 `None` 以恢复到默认值。 |'
- en: '| `SetMessageColour(colour)` | Set the text `Colour` for the main message.
    Pass `None` to revert back to the default. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `SetMessageColour(colour)` | 设置主消息的文本 `颜色`。传递 `None` 以恢复到默认设置。 |'
- en: '| `SetMessageFont(font)` | Set the `Font` to use for the main message. Pass
    `None` to revert back to the default. |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `SetMessageFont(font)` | 设置用于主要信息的 `Font`。传递 `None` 以恢复到默认设置。 |'
- en: '| `SetTitleColour(colour)` | Set the text `Colour` for the title. Pass `None`
    to revert back to the default. |'
  id: totrans-117
  prefs: []
  type: TYPE_TB
  zh: '| `SetTitleColour(colour)` | 设置标题的文本 `颜色`。传递 `None` 以恢复到默认设置。 |'
- en: '| `SetTitleFont(font)` | Set the titles `Font`. Pass `None` to revert back
    to the default. |'
  id: totrans-118
  prefs: []
  type: TYPE_TB
  zh: '| `SetTitleFont(font)` | 设置标题 `字体`. 通过传递 `None` 来恢复默认设置。 |'
- en: See also
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using SuperToolTips* recipe in this chapter shows another way to provide
    context-sensitive information messages.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章中的*使用SuperToolTips*配方展示了提供上下文相关信息消息的另一种方法。
- en: The *Working with tray icons* recipe in [Chapter 4](ch04.html "Chapter 4. Advanced
    Building Blocks of a User Interface"), *Advanced Building Blocks of a User Interface*
    contains an explanation of using `TaskBarIcons` in an application.
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。用户界面的高级构建块")中的*使用托盘图标*配方，*用户界面的高级构建块*包含了在应用程序中使用`TaskBarIcons`的解释。'
- en: Creating a custom SplashScreen
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义启动画面
- en: '`SplashWindows` are commonly seen during the start up of an application. They
    are a means to show a software''s logo and, more importantly, they are often used
    as a means to provide feedback to the user when an application takes a bit of
    time to start up so that the user knows that the application is in the process
    of loading up. This recipe shows how to create an advanced `SplashWindow` class
    that can show the incremental progress of where an application is during startup.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`SplashWindows` 在应用程序启动过程中很常见。它们是用来显示软件标志的一种方式，更重要的是，它们通常被用作在应用程序启动需要一些时间时向用户提供反馈的手段，这样用户就会知道应用程序正在加载过程中。这个配方展示了如何创建一个高级的
    `SplashWindow` 类，它可以显示应用程序在启动过程中的增量进度。'
- en: How to do it...
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here we will create our custom `SplashScreen` class. The source code that accompanies
    this chapter also includes a sample application showing how to use this class:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将创建我们的自定义`SplashScreen`类。本章附带的源代码还包括一个示例应用程序，展示如何使用这个类：
- en: '[PRE5]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The screenshot is as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 截图如下：
- en: '![How to do it...](img/1780_05_03.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/1780_05_03.jpg)'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The basic `SplashScreen` uses the `Bitmap` that is passed into the constructor
    to set its size, and then the `Bitmap` is drawn to fill the background. In our
    subclass, we created a `Gauge` to allow for the program to give feedback to the
    user about the progress of the startup procedure.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 基本的 `SplashScreen` 使用传递给构造函数的 `Bitmap` 来设置其大小，然后 `Bitmap` 被绘制以填充背景。在我们的子类中，我们创建了一个
    `Gauge` 以允许程序向用户反馈启动过程的进度。
- en: To allow the `Gauge` to fit on the `SplashScreen`, we first changed the width
    of the `Gauge` to be the same width as the `SplashScreen`, by calling its `SetSize`
    method with the `Gauge's` height and the `SplashScreen's` width. Next, we changed
    the size of the `SplashScreen` to make it taller, so that we could position the
    `Gauge` at the bottom of it without overlapping the `SplashScreen` image. Then
    the final step was to manually position the `Gauge` into the extra space we added
    at the bottom, by calling its `SetPosition` method with the X and Y coordinates
    of where the top-left corner of the `Gauge` should be placed.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让`Gauge`适应`SplashScreen`，我们首先通过调用其`SetSize`方法，并传入`Gauge`的高度和`SplashScreen`的宽度，将`Gauge`的宽度改为与`SplashScreen`相同。接下来，我们将`SplashScreen`的大小调整为更高，以便我们可以将`Gauge`放置在其底部而不与`SplashScreen`图像重叠。然后，最后一步是通过调用其`SetPosition`方法，并传入`Gauge`顶部左角应放置的X和Y坐标，手动将`Gauge`定位到我们在底部添加的额外空间中。
- en: The last two things that we added to our class were just some simple access
    methods to allow the `Gauge` to be manipulated by the users of this class. For
    an example of this class in action, check out the sample code that accompanies
    this chapter.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为这个类添加的最后两件事只是允许用户通过这个类来操作`Gauge`的一些简单访问方法。为了了解这个类在实际中的应用，请查看本章附带的示例代码。
- en: There's more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `SplashScreen''s` constructor has two different style parameters. The first
    one, `splashStyle`, is a required bitmask of one or more of the following flags:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`SplashScreen` 构造函数有两个不同的样式参数。第一个参数，`splashStyle`，是一个必需的位掩码，可以是以下一个或多个标志的组合：'
- en: '| Flags | Description |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| 标志 | 描述 |'
- en: '| --- | --- |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `wx.SPLASH_CENTRE_ON_PARENT` | Center the SplashScreen on its parent window.
    |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| `wx.SPLASH_CENTRE_ON_PARENT` | 将启动画面居中显示在其父窗口上。 |'
- en: '| `wx.SPLASH_CENTRE_ON_SCREEN` | Center the SplashScreen on the desktop. |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| `wx.SPLASH_CENTRE_ON_SCREEN` | 将启动画面居中显示在桌面上。 |'
- en: '| `wx.SPLASH_NO_CENTRE` | Don''t center the SplashScreen. |'
  id: totrans-139
  prefs: []
  type: TYPE_TB
  zh: '| `wx.SPLASH_NO_CENTRE` | 不要居中显示启动画面。 |'
- en: '| `wx.SPLASH_TIMEOUT` | Allow the SplashScreen to be automatically destroyed
    when the timeout is reached. |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| `wx.SPLASH_TIMEOUT` | 允许当超时达到时自动销毁启动画面。 |'
- en: '| `wx.SPLASH_NO_TIMEOUT` | Don''t allow the SplashScreen to timeout (require
    explicit destruction of it). |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| `wx.SPLASH_NO_TIMEOUT` | 不允许启动画面超时（需要显式销毁它）。 |'
- en: The second style flag parameter is the typical optional one, and is for specifying
    `wx.Frame` style flags. The `SplashScreen` derives from `wx.Frame`, so these flags
    will be passed down to the base class. In most cases, the default flags are what
    you want to use here, otherwise it will end up behaving more like a `Frame` than
    a `SplashScreen`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个样式标志参数是典型的可选参数，用于指定 `wx.Frame` 样式标志。`SplashScreen` 从 `wx.Frame` 派生，因此这些标志将传递到基类。在大多数情况下，默认标志就是这里想要使用的，否则它最终的行为会更像
    `Frame` 而不是 `SplashScreen`。
- en: Showing task progress with the Progress dialog
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用进度对话框显示任务进度
- en: The `ProgressDialog` is a dialog for showing the progress of a long-running
    task, such as downloading a file from the Internet, or exporting data from your
    program. The dialog shows a short message, a progress bar, and optionally Abort
    and/or Skip buttons. Additionally, it can also optionally show the estimated,
    elapsed, and remaining time. This recipe shows how to make a command-line script
    that can be used to download a file from the Internet and show the progress of
    the download using `ProgressDialog`.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`ProgressDialog` 是一个用于显示长时间运行任务进度的对话框，例如从互联网下载文件或从您的程序中导出数据。该对话框显示一条简短的消息、一个进度条，以及可选的“中止”和/或“跳过”按钮。此外，它还可以可选地显示估计时间、已用时间和剩余时间。本食谱展示了如何制作一个命令行脚本，该脚本可用于从互联网下载文件，并使用
    `ProgressDialog` 显示下载进度。'
- en: How to do it...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will create a full application here to allow downloading a file from a URL
    that is passed to the script on the command line. So first we will define the
    application object class:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里创建一个完整的应用程序，以便从命令行传递给脚本的URL下载文件。因此，首先我们将定义应用程序对象类：
- en: '[PRE6]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Here, we define the method that will be used to show the `ProgressDialog`,
    and perform the actual downloading of the file by using the `urllib` module from
    the Python standard library:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们定义了将要用来显示`ProgressDialog`的方法，以及通过使用Python标准库中的`urllib`模块来实际下载文件的方法：
- en: '[PRE7]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Here, we have an additional helper function that is used to get a unique path
    to write the downloaded data to:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们有一个额外的辅助函数，用于获取一个唯一的路径，以便将下载的数据写入：
- en: '[PRE8]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Finally, the main execution of the script that does the simple command-line
    argument handling for this application and starts the download is as follows:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，执行该脚本的主体部分如下，它为该应用程序处理简单的命令行参数并开始下载：
- en: '[PRE9]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is an example of how to call this script from the command-line downloader:
    `python downloader.py http://somewebsite.com/afile.zip`.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个从命令行下载器调用此脚本的示例：`python downloader.py http://somewebsite.com/afile.zip`.
- en: How it works...
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The recipe above shows the code for the entire downloader application. Let's
    take a walk through how it works, starting at the top and working our way down.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的食谱展示了整个下载应用程序的代码。让我们从顶部开始，一步步了解它是如何工作的。
- en: First, we imported some modules from the standard Python library. We needed
    the `os` module for path manipulation, the `sys` module for getting the command-line
    arguments, and the `urllib2` module so that we can open remote URLs.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们从标准 Python 库中导入了某些模块。我们需要 `os` 模块来进行路径操作，`sys` 模块来获取命令行参数，以及 `urllib2`
    模块以便我们可以打开远程 URL。
- en: Next, we defined our `DownloaderApp`. This application object has two methods
    that are of interest to us. The first is the override of `wx.App.OnInit`. In our
    override, we created a Frame and hid it. We did this just to ensure that the event
    loop does not exit before we create and show our `ProgressDialog`, as the event
    loop will exit by default when there are no more top-level windows in the application.
    The second is the `DownloadFile` method. This is where the main action of this
    application takes place.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们定义了我们的 `DownloaderApp`。这个应用程序对象有两个对我们来说很有兴趣的方法。第一个是重写 `wx.App.OnInit`。在我们的重写中，我们创建了一个框架并将其隐藏。我们这样做只是为了确保在创建和显示我们的
    `ProgressDialog` 之前，事件循环不会退出，因为当应用程序中没有更多顶层窗口时，事件循环将默认退出。第二个方法是 `DownloadFile`。这是这个应用程序主要动作发生的地方。
- en: '`DownloadFile` first opens the remote URL that was passed in using `urllib2`,
    and gets the size of the file that the URL points to. Next, it opens a file on
    the local file system to, write to as we read the data from the remote URL. We
    then create our `ProgressDialog`, giving it the style flags necessary to have
    an Abort button and show the elapsed and remaining time. Once the dialog has been
    created, we can start reading the data from the URL that we opened. We do this
    in a loop that checks how much we have read already and whether or not the Abort
    button was clicked. After reading a chunk from the URL, we call the `ProgressDialog''s
    Update` method, which will update the progress bar and return two Boolean flags
    that indicate if one of the two possible dialog buttons was clicked. Once the
    loop exits, we simply close the two files and `Destroy` our window objects, to
    cause the main loop to exit.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`DownloadFile` 首先使用 `urllib2` 打开传入的远程 URL，并获取该 URL 指向的文件大小。接下来，它在本地文件系统中打开一个文件，以便我们在从远程
    URL 读取数据时写入。然后，我们创建我们的 `ProgressDialog`，给它必要的样式标志以包含一个中止按钮并显示已过时间和剩余时间。一旦对话框创建完成，我们就可以开始从我们打开的
    URL 读取数据。我们通过一个循环来完成这个操作，该循环检查我们已经读取了多少数据以及中止按钮是否被点击。从 URL 读取一块数据后，我们调用 `ProgressDialog`
    的 `Update` 方法，该方法将更新进度条并返回两个布尔标志，指示是否点击了两个可能的对话框按钮之一。一旦循环退出，我们只需关闭两个文件并 `Destroy`
    我们窗口对象，以使主循环退出。'
- en: The final two things are the `GetUniqueName` function and the `__main__. GetUniqueName`
    is just a simple utility function to help generate the local filename, to make
    sure that we don't try to write over an already-existing file. The `__main__`
    execution makes just a simple check of the command-line arguments, and then creates
    the `DownloaderApp` and calls its `DownloadFile` method. We needed to use `wx.CallLater`
    to delay the call by a couple of seconds because `DownloadFile` will block when
    it is called. Without using `CallLater`, it would have blocked, performed the
    download, and returned before the `MainLoop` was started, which would have meant
    that our dialog would have never been displayed on the screen.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后两件事是`GetUniqueName`函数和`__main__`。`__main__`只是一个简单的实用函数，用来帮助生成本地文件名，以确保我们不会尝试覆盖已经存在的文件。`__main__`执行部分只是对命令行参数进行简单的检查，然后创建`DownloaderApp`实例并调用其`DownloadFile`方法。我们需要使用`wx.CallLater`来延迟调用几秒钟，因为当调用`DownloadFile`时，它将会阻塞。如果不使用`CallLater`，它将会阻塞，执行下载，并在`MainLoop`开始之前返回，这意味着我们的对话框永远不会在屏幕上显示。
- en: There's more...
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Included below are some additional references and information to take into consideration
    when using the `ProgressDialog`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 以下包含了一些在使用`ProgressDialog`时需要考虑的额外参考信息和资料。
- en: Message parameter
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 消息参数
- en: There is some undesirable behavior that can be seen with the `ProgressDialog's`
    message parameter in some cases. If the passed-in message string is very long,
    it will cause the dialog's width to be set very wide. So if you see that the dialog
    is showing up as being much wider than you would expect, try shortening your message.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，使用`ProgressDialog`的消息参数可能会出现一些不理想的行为。如果传入的消息字符串非常长，它会导致对话框的宽度被设置得非常宽。所以如果你看到对话框显示的宽度比你预期的要宽得多，尝试缩短你的消息。
- en: Style flags
  id: totrans-165
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 样式标志
- en: 'Here is a quick reference to the available style flags that the `ProgressDialog`
    can use:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`ProgressDialog`可用的样式标志的快速参考：
- en: '| Style flags | Description |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 样式标志 | 描述 |'
- en: '| --- | --- |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `wx.PD_APP_MODAL` | The dialog should be application modal |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_APP_MODAL` | 对话框应该是应用程序模式 |'
- en: '| `wx.PD_AUTO_HIDE` | Have the dialog automatically disappears when the progress
    bar reaches its maximum value |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_AUTO_HIDE` | 当进度条达到最大值时，对话框将自动消失 |'
- en: '| `wx.PD_SMOOTH` | Cause the progress bar to be updated smoothly |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_SMOOTH` | 使进度条平滑更新 |'
- en: '| `wx.PD_CAN_ABORT` | Show the Abort button on the dialog |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_CAN_ABORT` | 在对话框上显示“取消”按钮 |'
- en: '| `wx.PD_CAN_SKIP` | Show the Skip button on the dialog |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_CAN_SKIP` | 在对话框上显示跳过按钮 |'
- en: '| `wx.PD_ELAPSED_TIME` | Show the elapsed time status text |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_ELAPSED_TIME` | 显示已过时间状态文本 |'
- en: '| `wx.PD_ESTIMATED_TIME` | Show the estimated total time status text |'
  id: totrans-175
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_ESTIMATED_TIME` | 显示预估的总时间状态文本 |'
- en: '| `wx.PD_REMAININT_TIME` | Show the estimated remaining time status text |'
  id: totrans-176
  prefs: []
  type: TYPE_TB
  zh: '| `wx.PD_REMAININT_TIME` | 显示预估剩余时间状态文本 |'
- en: Creating an AboutBox
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个关于框（AboutBox）
- en: An About dialog is a simple dialog for displaying some information about an
    application to the user, such as the application's version number and license
    information. This dialog can be found in most applications on any operating system.
    It contains an icon and a small information section that usually contains at least
    the version information and credits. This recipe shows how to set up and show
    an About dialog in an application.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 关于对话框是一个简单的对话框，用于向用户显示有关应用程序的一些信息，例如应用程序的版本号和许可信息。这个对话框可以在大多数操作系统上的任何应用程序中找到。它包含一个图标和一个小信息区域，通常至少包含版本信息和致谢。本食谱展示了如何在应用程序中设置和显示关于对话框。
- en: How to do it...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Here, we create a simple skeleton application that shows how to integrate an
    `AboutBox` into an application:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个简单的骨架应用程序，展示了如何将`AboutBox`集成到应用程序中：
- en: '[PRE10]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we created a very simple yet complete application for creating
    and displaying an About dialog. So let's go over the important parts of the code
    shown above.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，我们创建了一个非常简单但功能完整的应用程序，用于创建和显示关于对话框。因此，让我们回顾一下上述代码中的重要部分。
- en: Firstly, let's take a look a look at the part where we set up the menus in the
    `AboutRecipeFrame` class. Standard application About dialogs are shown from a
    menu item. On Windows and GTK Linux this menu entry is under the Help menu; on
    Macintosh OS X this menu entry is under the Application menu. wxPython will take
    care of these platform differences for us automatically since we assigned our
    About menu entry the `wx.ID_ABOUT` stock ID, which lets wx know that the menu
    entry is a standard about information menu entry.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看在`AboutRecipeFrame`类中设置菜单的部分。标准的应用程序关于对话框是通过菜单项显示的。在Windows和GTK Linux上，这个菜单项位于帮助菜单下；在Macintosh
    OS X上，这个菜单项位于应用程序菜单下。由于我们为我们的关于菜单项分配了`wx.ID_ABOUT`库存ID，wxPython会自动为我们处理这些平台差异，这个ID让wx知道该菜单项是一个标准的关于信息菜单项。
- en: The next and most important part of this recipe is the `OnAbout` menu event
    handler. This is the method that will get called when our About menu entry is
    activated and it is where we create and show the About dialog by calling the `AboutBox`
    function. The `AboutBox` function requires an `AboutDialogInfo` object that contains
    all of the information that we want to display in the dialog that it will create.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱的下一部分且最为重要的部分是`OnAbout`菜单事件处理器。当我们的“关于”菜单条目被激活时，将会调用此方法，这也是我们通过调用`AboutBox`函数创建并显示“关于”对话框的地方。`AboutBox`函数需要一个包含所有我们希望在创建的对话框中显示的信息的`AboutDialogInfo`对象。
- en: 'The `AboutDialogInfo` object has a number of methods for setting the different
    data fields that the dialog can support. These methods are all simple setter methods
    that take strings or lists of strings as arguments. We used four of these methods
    in this recipe:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`AboutDialogInfo` 对象提供了多种方法来设置对话框可以支持的不同数据字段。这些方法都是简单的设置方法，它们接受字符串或字符串列表作为参数。在本食谱中，我们使用了其中的四种方法：'
- en: '`SetName` takes the application''s name. This string will be shown in the dialog''s
    title bar and as the first line in the main content area.'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetName` 函数用于获取应用程序的名称。此字符串将在对话框的标题栏中显示，并在主内容区域的第一行中显示。'
- en: '`SetVersion` is for setting and showing the application''s version number.
    This is shown after the application name in the main content area.'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetVersion` 用于设置和显示应用程序的版本号。这将在主内容区域中的应用程序名称之后显示。'
- en: '`SetCopyright` sets the copyright information field. The special thing to note
    about this method is if the string contains a (C) in it, this will be automatically
    converted to the copyright symbol ©.'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetCopyright` 设置版权信息字段。关于这个方法需要注意的特殊之处是，如果字符串中包含一个（C），这将自动转换为版权符号 ©。'
- en: '`SetDescription` is the main description field, which can contain any arbitrary
    information about the application.'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SetDescription` 是主要描述字段，可以包含关于应用的任何任意信息。'
- en: The last thing that we did was to show the About dialog box. This is quite simple.
    All we needed to do was to call the `wx.AboutBox` function with the `AboutDialogInfo`
    that we created.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后做的事情是显示“关于”对话框。这相当简单。我们只需要调用我们创建的`AboutDialogInfo`参数来调用`wx.AboutBox`函数。
- en: There's more...
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'The `AboutDialogInfo` object supports a number of additional fields for other
    special types of data and customization of the `AboutBox`. wxPython provides a
    native implementation of the About dialog on the three major platforms (MSW, GTK,
    OSX). However, only the GTK version of the `AboutBox` has native support for all
    the extra fields that the `AboutDialogInfo` supports. If the `AboutDialogInfo`
    contains any fields that the native dialog does not support, wxPython will automatically
    switch to the generic version of the dialog. This can be a problem if you want
    to maintain a native look and feel in your application. So following is a list
    of the other `AboutDialogInfo` fields that are available, and which ones will
    cause the generic dialog to be used on Windows and OS X:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`AboutDialogInfo` 对象支持许多额外的字段，用于其他特殊类型的数据和自定义 `AboutBox`。wxPython 在三个主要平台（MSW、GTK、OSX）上提供了关于对话框的原生实现。然而，只有
    GTK 版本的 `AboutBox` 才原生支持 `AboutDialogInfo` 所支持的所有额外字段。如果 `AboutDialogInfo` 包含任何原生对话框不支持的字段，wxPython
    将自动切换到通用版本的对话框。如果你想在应用程序中保持原生外观和感觉，这可能会成为一个问题。因此，以下是其他可用的 `AboutDialogInfo` 字段列表，以及哪些字段会在
    Windows 和 OS X 上导致使用通用对话框：'
- en: '| Other `AboutDialogInfo` fields | Description |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
  zh: '| 其他 `AboutDialogInfo` 字段 | 描述 |'
- en: '| --- | --- |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
- en: '| `SetArtists(list_of_strings)` | For crediting the application''s graphic
    artists. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| `SetArtists(list_of_strings)` | 用于归功于应用程序的图形艺术家。 |'
- en: '| `SetDevelopers(list_of_strings)` | For crediting the application''s developers.
    |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| `SetDevelopers(list_of_strings)` | 用于认可应用程序的开发者。 |'
- en: '| `SetDocWriters(list_of_strings)` | For crediting the application''s documentation
    writers. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| `SetDocWriters(list_of_strings)` | 用于归功于应用程序的文档编写者。 |'
- en: '| `SetIcon(icon)` | Customize the dialog''s icon. Default is the application
    icon (GTK only) |'
  id: totrans-199
  prefs: []
  type: TYPE_TB
  zh: '| `SetIcon(icon)` | 自定义对话框的图标。默认为应用程序图标（仅限GTK） |'
- en: '| `SetLicense(license_string)` | For displaying the application''s long license
    text (GTK only). |'
  id: totrans-200
  prefs: []
  type: TYPE_TB
  zh: '| `SetLicense(license_string)` | 用于显示应用程序的长许可文本（仅限GTK）。 |'
- en: '| `SetTranslators(list_of_strings)` | For crediting the application''s translators.
    |'
  id: totrans-201
  prefs: []
  type: TYPE_TB
  zh: '| `SetTranslators(list_of_strings)` | 用于认可应用程序的翻译者。 |'
- en: '| `SetWebSite(url_string)` | Creates a hyperlink to a website in the dialog
    (GTK only). |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| `SetWebSite(url_string)` | 在对话框中创建指向网站的链接（仅限GTK）。 |'
- en: See also
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Utilizing Stock IDs* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with wxPython"), *Getting Started with wxPython* explains the usage of
    the built-in IDs.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第1章](ch01.html "第1章. 使用wxPython入门")中的*使用库存ID*配方，在*使用wxPython入门*中解释了内置ID的用法。'
- en: The *Adding Menus and MenuBars* recipe in [Chapter 3](ch03.html "Chapter 3. Basic
    Building Blocks of a User Interface"), *Basic Building Blocks of a User Interface*
    contains detailed information about creating menus and adding them to a Frame's
    `MenuBar`.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第3章](ch03.html "第3章。用户界面基本构建块")中的*添加菜单和菜单栏*配方，*用户界面基本构建块*包含了关于创建菜单并将它们添加到框架的`MenuBar`中的详细信息。'
