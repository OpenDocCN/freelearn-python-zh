- en: Building a Django REST API with Zappa
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建Django REST API
- en: In this chapter, we are going to create a RESTful API, using the Django Rest
    Framework. It will be based on a simple RESTful API with **CRUD** (**create**,
    **retrieve**, **update**, and **delete**) operations. We can consider the previously
    developed **ImageGallery** application with REST API extensions. Here, we will
    create an API for `PhotoAlbum`, where a user can create a new album, along with
    images through the REST API interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Django Rest Framework创建一个RESTful API。它将基于一个简单的RESTful API，具有**CRUD**（**创建**，**检索**，**更新**和**删除**）操作。我们可以考虑之前开发的**ImageGallery**应用程序与REST
    API扩展。在这里，我们将为`PhotoAlbum`创建一个API，用户可以通过REST API界面创建新相册以及图片。
- en: 'The topics we will cover in this chapter include the following:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章我们将涵盖以下主题：
- en: Installing and configuring the Django REST Framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Django REST框架
- en: Designing REST APIs
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计REST API
- en: Building, testing, and deploying the Django application using Zappa
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署Django应用程序
- en: Technical requirements
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'Before going further, there are some technical prerequisites to be met. These
    prerequisites are required to set up and configure the development environment.
    Following is the list of required software:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，有一些技术先决条件需要满足。这些先决条件是设置和配置开发环境所必需的。以下是所需软件的列表：
- en: Ubuntu 16.04/Mac/Windows
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ubuntu 16.04/Mac/Windows
- en: Python 3.6
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 3.6
- en: Pipenv tool
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Pipenv工具
- en: Django
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django
- en: Django Rest Framework
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django Rest Framework
- en: Django Rest Framework JWT
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django Rest Framework JWT
- en: Django Storages
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django存储
- en: Django Imagekit
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django Imagekit
- en: Boto3
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Boto3
- en: Zappa
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Zappa
- en: We are going to install these packages in a virtual environment. In the next
    section, we will see the detailed information about the installation process.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在虚拟环境中安装这些软件包。在下一节中，我们将看到有关安装过程的详细信息。
- en: Installing and configuring the Django REST Framework
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Django REST框架
- en: We have already covered the virtual environment setup process in detail in the
    *Setting up a virtual environment* section of [Chapter 5](part0128.html#3Q2800-8241a43bed654018b51365a570bcef1d),
    *Building a Django Application with Zappa*. You can follow these instructions
    to configure the pipenv tool and create a new virtual environment for this chapter.
    Let's move to the next section for installing the required packages using the
    pipenv tool.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在[第5章](part0128.html#3Q2800-8241a43bed654018b51365a570bcef1d)的*设置虚拟环境*部分详细介绍了虚拟环境设置过程。您可以按照这些说明配置pipenv工具并为本章创建一个新的虚拟环境。让我们转到下一节，使用pipenv工具安装所需的软件包。
- en: Installing the required packages
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装所需的软件包
- en: 'We are going to develop the REST API using the Django REST framework, so we
    need to install the following packages using the `pipenv install <package_name>`
    command:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Django REST框架开发REST API，因此我们需要使用`pipenv install <package_name>`命令安装以下软件包：
- en: '`django`'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django`'
- en: '`djangorestframework`'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`djangorestframework`'
- en: '`djangorestframework-jwt`'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`djangorestframework-jwt`'
- en: '`django-storages`'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-storages`'
- en: '`django-imagekit`'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django-imagekit`'
- en: '`boto3`'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boto3`'
- en: '`zappa`'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`zappa`'
- en: You can install multiple packages at once by mentioning the other packages separated
    by whitespace, such as `pipenv install <package_one> <package_two> ...`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过在空格分隔的其他软件包之后提及其他软件包来一次安装多个软件包，例如`pipenv install <package_one> <package_two>
    ...`。
- en: 'Once you install these packages, then we are good to proceed with the implementation,
    and we will have the following mentioned `Pipfile`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 安装这些软件包后，我们可以继续实施，并且将有以下提到的`Pipfile`：
- en: 'File—`Pipfile`:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`Pipfile`：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Pipenv maintains the versions along with its git hashes in the `Pipfile.lock`
    file. So we don't need to worry about it.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Pipenv在`Pipfile.lock`文件中维护版本及其git哈希。所以我们不需要担心。
- en: We are done with configuring the development environment, and now it's time
    to implement the REST API. Stay tuned for the next section, where we are going
    to design the REST API using the Django Rest Framework.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经完成了配置开发环境，现在是时候实施REST API了。请继续关注下一节，我们将使用Django Rest Framework设计REST API。
- en: Designing REST APIs
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计REST API
- en: We are going to design the REST API for our ImageGallery application. We developed
    this application with Django's admin interface. Now we will extend the existing
    implementation of the ImageGallery application with a RESTful API interface. Before
    implementing the solution, let's have a look at a brief introduction to the Django
    REST Framework.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为我们的ImageGallery应用程序设计REST API。我们使用Django的管理界面开发了这个应用程序。现在我们将通过RESTful API界面扩展ImageGallery应用程序的现有实现。在实施解决方案之前，让我们简要介绍一下Django
    REST框架。
- en: What is the Django Rest Framework?
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是Django Rest Framework？
- en: Django Rest Framework is an open source library that is designed to implement
    the REST API in an optimistic way. It follows the Django design pattern with different
    terminologies. You can find the QuickStart tutorials at its documentation site
    ([http://www.django-rest-framework.org/#quickstart](http://www.django-rest-framework.org/#quickstart)).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Django Rest Framework是一个开源库，旨在以乐观的方式实现REST API。它遵循Django设计模式，使用不同的术语。您可以在其文档网站([http://www.django-rest-framework.org/#quickstart](http://www.django-rest-framework.org/#quickstart))找到快速入门教程。
- en: Django Rest Frameworks is powerful and supports ORM and non-ORM data sources.
    It has built-in support for the Browsable API client ([https://restframework.herokuapp.com/](https://restframework.herokuapp.com/))
    and many other features as well.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Django Rest Framework是强大的，支持ORM和非ORM数据源。它内置支持可浏览的API客户端([https://restframework.herokuapp.com/](https://restframework.herokuapp.com/))和许多其他功能。
- en: It is recommended to not use the Web Browsable API interface in the production
    environment. You can disable it by setting up the render class in `settings.py`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在生产环境中不要使用Web Browsable API界面。您可以通过在`settings.py`中设置渲染类来禁用它。
- en: '[PRE1]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'File—`settings.py`:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`settings.py`：
- en: '[PRE2]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Integrating the REST Framework
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集成REST框架
- en: 'To integrate the Django REST Framework, you can simply install it using the
    pipenv packing tool, as mentioned in the previous section on setting up the virtual
    environment. Once you are done with the installation part, you can proceed to
    add the `rest_framework` in your `INSTALLED_APPS` settings. Take a look at this
    code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 要集成Django REST Framework，您可以简单地使用pipenv包装工具进行安装，就像在之前设置虚拟环境的部分中提到的那样。安装完成后，您可以继续在`INSTALLED_APPS`设置中添加`rest_framework`。看一下这段代码：
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you want to use the Web Browsable API along with the login and logout view,
    then you can add the following URL pattern in your root `urls.py` file:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想要在登录和注销视图以及Web浏览API一起使用，那么您可以在根`urls.py`文件中添加以下URL模式：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: That's it! Now we have successfully integrated the Django REST Framework and
    we can move on to creating the REST API. Before creating the REST API, we need
    to implement the authentication and authorization layer so that each of our REST
    APIs will be secure from unauthorized access.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！现在我们已经成功集成了Django REST Framework，我们可以继续创建REST API。在创建REST API之前，我们需要实现身份验证和授权层，以便我们的每个REST
    API都能免受未经授权的访问。
- en: Let's see how can we make our REST API secure in the next section. Stay tuned.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在下一节看看如何使我们的REST API安全。敬请关注。
- en: Implementing authentication and authorization
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施身份验证和授权
- en: Authentication and authorization are essential parts to be considered while
    designing the REST APIs. With the help of these layers, we can prevent unauthorized
    access to our application. There are many types of implementation patterns are
    available, but we will use **JWT** (**JSON Web Token**). Read more about it at
    [https://en.wikipedia.org/wiki/JSON_Web_Token](https://en.wikipedia.org/wiki/JSON_Web_Token).
    JWT is really useful for implementing distributed microservices architecture, and
    it doesn't rely on centralized server databases to verify the authenticity of
    the token.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 身份验证和授权是设计REST API时必须考虑的重要部分。借助这些层，我们可以防止未经授权的访问我们的应用程序。有许多类型的实现模式可用，但我们将使用**JWT**（**JSON
    Web Token**）。在[https://en.wikipedia.org/wiki/JSON_Web_Token](https://en.wikipedia.org/wiki/JSON_Web_Token)上了解更多信息。JWT对于实现分布式微服务架构非常有用，并且不依赖于集中式服务器数据库来验证令牌的真实性。
- en: There are many Python libraries available to implement the JWT token mechanism.
    In our case, we would like to use the `django-rest-framework-jwt` library ([https://getblimp.github.io/django-rest-framework-jwt/](https://getblimp.github.io/django-rest-framework-jwt/)),
    as it provides the support for Django Rest Framework.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多Python库可用于实现JWT令牌机制。在我们的情况下，我们希望使用`django-rest-framework-jwt`库（[https://getblimp.github.io/django-rest-framework-jwt/](https://getblimp.github.io/django-rest-framework-jwt/)），因为它提供了对Django
    Rest Framework的支持。
- en: I assume that you already have installed this library while setting up the environment
    in the *Virtual environment* section described earlier. Let's see how should we
    configure the `django-rest-framework-jwt` library in next section.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我假设您在之前描述的*虚拟环境*部分设置环境时已经安装了这个库。让我们看看下一节应该如何配置`django-rest-framework-jwt`库。
- en: Configuring django-rest-framework-jwt
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置django-rest-framework-jwt
- en: Once you are done with the installation, you need to add some predefined classes
    related to permission and authentication in `settings.py` as shown in the following
    code snippet.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您需要在`settings.py`中添加一些与权限和身份验证相关的预定义类，如下面的代码片段所示。
- en: 'File—`settings.py`:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`settings.py`：
- en: '[PRE5]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now we need to append the URL for obtaining a token, based on user credentials.
    In the root `urls.py`, we will be appending the following statement:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要根据用户凭据添加获取令牌的URL。在根`urls.py`中，我们将添加以下语句：
- en: '[PRE6]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The `api-token-auth` API will return a JWT token on successful authentication,
    for example:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`api-token-auth` API将在成功验证后返回一个JWT令牌，例如：'
- en: '[PRE7]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This token can be used to authorize all other protected APIs by adding an authorization
    header along with the token, as shown here:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这个令牌可以通过添加授权标头和令牌来授权所有其他受保护的API，如下所示：
- en: '[PRE8]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are other use cases where you would need to perform many operations on
    your issued token. For this, you would need to go through the documentation of
    `django-rest-framework-jwt` ([https://getblimp.github.io/django-rest-framework-jwt/](https://getblimp.github.io/django-rest-framework-jwt/)).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他用例，您可能需要对已发行的令牌执行许多操作。为此，您需要阅读`django-rest-framework-jwt`的文档（[https://getblimp.github.io/django-rest-framework-jwt/](https://getblimp.github.io/django-rest-framework-jwt/)）。
- en: Now let's start implementing the API for our ImageGallery application.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们开始为我们的ImageGallery应用程序实现API。
- en: Implementing serializers
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实施序列化器
- en: Django Rest Framework designed a serializers module similar to the Django forms
    module to implement the JSON presentation layer. Serializers are responsible for
    serializing and deserializing the data; you can see a detailed explanation about
    data serialization here ([http://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class](http://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class)).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: Django Rest Framework设计了一个类似于Django表单模块的序列化器模块，用于实现JSON表示层。序列化器负责对数据进行序列化和反序列化；您可以在这里看到有关数据序列化的详细解释（[http://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class](http://www.django-rest-framework.org/tutorial/1-serialization/#creating-a-serializer-class)）。
- en: The serializers module has many useful classes, such as `Serializer`, `ModelSerializer`,
    `HyperlinkedModelSerializer`, and more ([http://www.django-rest-framework.org/api-guide/serializers/](http://www.django-rest-framework.org/api-guide/serializers/)).
    Each class has similar operations but with extended features. A `Serializer` class
    is used to design custom data representation similar to Django's form representation,
    and `ModelSerializer` is used to represent the model class data similar to Django's
    `ModelFrom` class. `HyperlinkedModelSerializer` extends the representation of
    `ModelSerializer` with hyperlinked representation and with a primary key to relate
    the associated data.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 序列化程序模块有许多有用的类，例如`Serializer`、`ModelSerializer`、`HyperlinkedModelSerializer`等([http://www.django-rest-framework.org/api-guide/serializers/](http://www.django-rest-framework.org/api-guide/serializers/))。每个类都具有类似的操作，但具有扩展功能。`Serializer`类用于设计类似于Django表单表示的自定义数据表示，`ModelSerializer`用于表示与Django的`ModelFrom`类似的模型类数据。`HyperlinkedModelSerializer`通过超链接表示扩展了`ModelSerializer`的表示，并使用主键来关联相关数据。
- en: We need to create a serializer class, using `ModelSerializer`. Take a look at
    this code.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要创建一个使用`ModelSerializer`的序列化程序类。看一下这段代码。
- en: 'File—`gallery`/`serializers.py`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`gallery`/`serializers.py`：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, we created `PhotoSerializer` and `PhotoAlbumSerializer` classes, using
    the `ModelSerializer` class. These serializers are associated with the model classes;
    hence, the data representation will be based on model structure.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了`PhotoSerializer`和`PhotoAlbumSerializer`类，使用`ModelSerializer`类。这些序列化程序与模型类相关联；因此，数据表示将基于模型结构。
- en: Let's move on to the next section, where we are going to create views.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一节，我们将创建视图。
- en: Implementing viewsets
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现viewsets
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'File—`gallery`/`views.py`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`gallery`/`views.py`：
- en: '[PRE11]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You can see here that we have created two different viewsets classes associated
    with `Photo` and `PhotoAlbum` models. The `PhotoAlbum` model has a one-to-many
    relationship with the `Photo` model. Hence, we will write a nested API such as
    `albums/(?P<album_id>[0-9]+)/photos` . In order to return related records of photos
    based on the `album_id`, we override the `get_queryset` method to filter the `queryset`
    based on the given `album_id`.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以看到我们已经创建了与`Photo`和`PhotoAlbum`模型相关的两个不同的viewsets类。`PhotoAlbum`模型与`Photo`模型有一对多的关系。因此，我们将编写一个嵌套API，例如`albums/(?P<album_id>[0-9]+)/photos`。为了根据`album_id`返回相关的照片记录，我们重写了`get_queryset`方法，以便根据给定的`album_id`过滤`queryset`。
- en: Similarly, we override the `perform_create` method to set the associated `album_id`
    while creating a new record. We will provide a complete demonstration in the upcoming
    section.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，我们重写了`perform_create`方法，以在创建新记录时设置关联的`album_id`。我们将在即将到来的部分中提供完整的演示。
- en: Let's have a look at URLs configurations, where we configure the nested API
    pattern.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一下URL配置，我们在那里配置了嵌套API模式。
- en: Configuring the URL routes
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置URL路由
- en: 'Django REST Framework provides a `router` module to configure the standard
    URL configurations. It automatically adds support for all required URLs related
    to the mentioned viewsets. Read more about the `routers` here: [http://www.django-rest-framework.org/api-guide/routers/](http://www.django-rest-framework.org/api-guide/routers/).
    The following is the code snippet related to our route configuration.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: Django REST Framework提供了一个`router`模块来配置标准的URL配置。它自动添加了与所述viewsets相关的所有必需的URL支持。在这里阅读更多关于`routers`的信息：[http://www.django-rest-framework.org/api-guide/routers/](http://www.django-rest-framework.org/api-guide/routers/)。以下是与我们的路由配置相关的代码片段。
- en: 'File—`gallery`/`urls.py`:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`gallery`/`urls.py`：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Here, we created a default router and registered the viewsets with a URL prefix.
    The router will automatically determine the viewsets and will generate the required
    API URLs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个默认路由器，并注册了带有URL前缀的viewsets。路由器将自动确定viewsets，并生成所需的API URL。
- en: '[PRE13]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'File—`imageGalleryProject`/`urls.py`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 文件—`imageGalleryProject`/`urls.py`：
- en: '[PRE14]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Once you include the `gallery.urls` patterns, then it will be available at the
    application level. We are done with implementation, so now it's time to see the
    demonstration. Let's move on to the next section, where will explore Zappa configuration,
    along with execution and deployment process on AWS Lambda.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您包含了`gallery.urls`模式，它将在应用程序级别可用。我们已经完成了实现，现在是时候看演示了。让我们继续下一节，我们将探索Zappa配置，以及在AWS
    Lambda上的执行和部署过程。
- en: Building, testing, and deploying Django app using Zappa
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Zappa构建、测试和部署Django应用程序
- en: Django provides a lightweight deployment web server that runs on the local machine
    at port `8000`. You can debug and test your application before moving on to the
    production environment. Read more about it here ([https://docs.djangoproject.com/en/2.0/ref/django-admin/#runserver](https://docs.djangoproject.com/en/2.0/ref/django-admin/#runserver)).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了一个轻量级的部署Web服务器，运行在本地机器的8000端口上。您可以在进入生产环境之前对应用程序进行调试和测试。在这里阅读更多关于它的信息([https://docs.djangoproject.com/en/2.0/ref/django-admin/#runserver](https://docs.djangoproject.com/en/2.0/ref/django-admin/#runserver))。
- en: Let's move on to the next sections, where we are going to explore application
    demonstration and deployment on AWS Lambda.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续下一节，我们将探索应用程序演示和在AWS Lambda上的部署。
- en: Executing in the local environment
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在本地环境中执行
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now it's time to see the execution of your API. We are going to use Postman,
    an API client tool, to test the REST API. You can download the Postman app from
    [https://www.getpostman.com/](https://www.getpostman.com/). Let's see all the
    API executions in the next sections.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候看一下您的API的执行情况了。我们将使用Postman，一个API客户端工具，来测试REST API。您可以从[https://www.getpostman.com/](https://www.getpostman.com/)下载Postman应用程序。让我们在接下来的部分中看到所有API的执行情况。
- en: API authentication
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API身份验证
- en: 'Before accessing the resource APIs, we need to authenticate the user and get
    a JWT access token. Let''s get an access token using the `api-token-auth` API.
    We are going to use the `curl` command-line tool to executes the API. The following
    is the `curl` command execution:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在访问资源API之前，我们需要对用户进行身份验证并获取JWT访问令牌。让我们使用`api-token-auth`API来获取访问令牌。我们将使用`curl`命令行工具来执行API。以下是`curl`命令的执行：
- en: '[PRE17]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Here, we got the JWT token in response to user authentication. Now we are going
    to use this token as an authorization header to access other API resources.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们收到了JWT令牌作为用户身份验证的响应。现在我们将使用这个令牌作为授权标头来访问其他API资源。
- en: GET request on API "/albums/"
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在API "/albums/"上的GET请求
- en: 'This API will list all records from the `PhotoAlbum` model. Let''s try to access
    the `/album/` API with `GET` request method using the cRUL command as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此API将列出`PhotoAlbum`模型的所有记录。让我们尝试使用cRUL命令以`GET`请求方法访问`/album/` API，如下所示：
- en: '[PRE18]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we got a 401 Unauthorized error from, the server with the message Authentication
    credentials were not provided. This is how we secured all our APIs using the JWT
    token authentication mechanism.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们从服务器收到了401未经授权的错误，消息是未提供身份验证凭据。这就是我们使用JWT令牌身份验证机制保护所有API的方式。
- en: 'Now, if we were to just add the authorization header with the access token
    we got from the authentication API, we would get the records from the server.
    The following cURL execution shows a successful API access with the authorization
    header:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们只是使用从身份验证API获取的访问令牌添加授权标头，我们将从服务器获取记录。以下是成功的API访问授权标头的cURL执行：
- en: '[PRE19]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: As you can see, we got the data from the `"/albums/"` API by providing the Authorization
    header. Here, we can use `| python -m json.tool` to print the return response
    in a JSON readable format.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，我们通过提供授权标头从`"/albums/"` API获取了数据。在这里，我们可以使用`| python -m json.tool`以JSON可读格式打印返回响应。
- en: POST request on API "/albums/<album_id>/photos/"
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在API "/albums/<album_id>/photos/"上的POST请求
- en: 'Now we can add more photos to the existing record. The <indexentry content="Django
    REST API execution, in local environment:POST request on API "/albums//photos/"">following
    is the log snippet of the cRUL command execution, where we are uploading a image
    file to existing photo album:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以向现有记录添加更多照片。以下是cRUL命令执行的日志片段，我们正在将图像文件上传到现有相册：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Now, you can see that the image has been uploaded to AWS S3 storage, and we
    got the CDN link as we already configured AWS S3 and CloudFront. Let''s see the
    list of all records once again:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您可以看到图像已上传到AWS S3存储，并且我们已经配置了AWS S3和CloudFront，因此我们获得了CDN链接。让我们再次查看所有记录的列表：
- en: '[PRE21]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Now our application has been implemented as per our requirements. We can move
    on to deploy the application over AWS Lambda using Zappa. Now let's move towards
    the next section to configure Zappa.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的应用程序已根据我们的要求实施。我们可以继续使用Zappa在AWS Lambda上部署应用程序。现在让我们转向下一节来配置Zappa。
- en: Configuring Zappa
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Zappa
- en: '[PRE22]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Here, we defined the configuration as per the requirements. As the key defines
    each configuration, we can see the usages of it:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们根据要求定义了配置。由于密钥定义了每个配置，我们可以看到它的用法：
- en: '`aws_region`: The AWS region where the Lambda will get uploaded.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`aws_region`：Lambda将上传的AWS区域。'
- en: '`django_settings`: The import path of Django''s settings file.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`django_settings`：Django设置文件的导入路径。'
- en: '`profile_name`: The AWS CLI configuration profile which is defined in the `~/.aws/credentials`
    file.'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`profile_name`：在`~/.aws/credentials`文件中定义的AWS CLI配置文件。'
- en: '`project_name`: The project name for the uploading the Lambda function.'
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`project_name`：上传Lambda函数的项目名称。'
- en: '`runtime`: The Python runtime interpreter.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`runtime`：Python运行时解释器。'
- en: '`s3_bucket`: Creates an Amazon s3 bucket and uploads the deployment packages.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s3_bucket`：创建Amazon S3存储桶并上传部署包。'
- en: '`remote_env`: Sets the environment variable of all the key-value pairs mentioned
    in the uploaded JSON file at the Amazon S3 location.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remote_env`：设置Amazon S3位置上传的JSON文件中提到的所有键值对的环境变量。'
- en: With the help of this configuration information, we will proceed with the deployment.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 借助这些配置信息，我们将继续部署。
- en: Building and deploying
  id: totrans-128
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建和部署
- en: Once we are done with the configuration, then we can process the deployment.
    Zappa provides two different commands to perform the deployment such as `zappa
    deploy <stage_name>` and `zappa update <stage_name>`. Initially, we will use the
    `zappa deploy <stage_name>` command, as it is the first time that we are deploying
    this Lambda application.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成配置，就可以进行部署。Zappa提供了两个不同的命令来执行部署，例如`zappa deploy <stage_name>`和`zappa update
    <stage_name>`。最初，我们将使用`zappa deploy <stage_name>`命令，因为这是我们第一次部署此Lambda应用程序。
- en: If you have already deployed the application and want to redeploy, then you
    would use the `zappa update <stage_name>` command. In the previous chapter, we
    had a detailed discussion about the deployment process of Zappa, so you can refer
    to it.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经部署了应用程序并希望重新部署，那么您将使用`zappa update <stage_name>`命令。在上一章中，我们详细讨论了Zappa的部署过程，因此您可以参考它。
- en: 'The following is a log snippet of our deployment process:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是我们部署过程的日志片段：
- en: '[PRE24]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Let's move to the next section, Where we are going to perform some execution
    on deployed application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们转到下一节，我们将在部署的应用程序上执行一些操作。
- en: Executing in the production environment
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在生产环境中执行
- en: Once you have deployed the application successfully then you will get the hosted
    application link. This link is nothing but the link generated by configuring the
    AWS API gateway with AWS Lambda by Zappa.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您成功部署了应用程序，您将获得托管应用程序链接。这个链接就是通过将AWS API网关与Zappa的AWS Lambda配置生成的链接。
- en: Now you can use the application in a production environment. A screenshot of
    the authentication API is present in the next section.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您可以在生产环境中使用应用程序。身份验证API的屏幕截图在下一节中。
- en: Authentication API
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 身份验证API
- en: 'As we have seen the authentication execution in the local environment, it will
    be the same but in the production environment as well. The following is the log
    snippet of the authentication API execution deployed on AWS Lambda:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在本地环境中看到的身份验证执行一样，在生产环境中也是一样的。以下是部署在AWS Lambda上的身份验证API执行的日志片段：
- en: '[PRE25]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: As you can see here, the functionality doesn't impact anything as the application
    is up and running on the serverless environment. Let's look at another API.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在这里所看到的，功能不会对任何事物产生影响，因为应用程序正在无服务器环境中运行。让我们看看另一个API。
- en: GET request on API /albums/
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对“/albums/”API的GET请求
- en: 'As you have the access token gained by the authentication API, you are eligible
    to access all protected APIs. The following is a screenshot of the `GET` request
    for the `/albums/` API:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 通过身份验证API获得的访问令牌，您有资格访问所有受保护的API。以下是“/albums/”API的`GET`请求的屏幕截图：
- en: '[PRE26]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: That's it. We are done with the deployment of the serverless environment. I
    hope you it was beneficial to you.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。我们已经完成了无服务器环境的部署。希望对您有所帮助。
- en: Summary
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we learned about developing the REST API in the Django REST
    Framework. We covered the process of securing the API using the JWT authentication
    mechanism. Finally, we deployed the application in a serverless environment using
    Zappa.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在Django REST框架中开发REST API。我们介绍了使用JWT身份验证机制保护API的过程。最后，我们使用Zappa在无服务器环境中部署了应用程序。
- en: In the next chapter, we are going to develop a high-performance API based application
    using a very lightweight Python framework. We will also explore more Zappa configuration
    options to set up a caching mechanism. Stay tuned to discover more gems from the
    Zappa world.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将使用非常轻量级的Python框架开发基于高性能API的应用程序。我们还将探索更多Zappa配置选项，以建立缓存机制。敬请关注，发现Zappa世界中更多的宝藏。
- en: Questions
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is Django Rest Framework?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 什么是Django Rest框架？
- en: What is the use of Django-storage?
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Django-storage有什么用？
