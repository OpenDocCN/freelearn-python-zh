- en: Chapter 2. First App, How Hard Could it Be?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。第一个应用程序，有多难？
- en: After a full chapter without a single line of code, you need this, right? In
    this chapter, we will write our first app explained line by line; we will also
    cover how to set up our environment, what tools to use for development, and how
    to work with HTML in our app.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个完整的章节中没有一行代码，你需要这个，对吧？在这一章中，我们将逐行解释我们的第一个应用程序；我们还将介绍如何设置我们的环境，开发时使用什么工具，以及如何在我们的应用程序中使用HTML。
- en: Hello World
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Hello World
- en: The first app one writes when learning a new technology is usually a Hello World
    app, which consists of the minimum possible code necessary to start a simple application
    and show the text "Hello World!". Let's do exactly that using Flask.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 当学习新技术时，人们通常会写一个Hello World应用程序，这个应用程序包含启动一个简单应用程序并显示文本"Hello World!"所需的最小可能代码。让我们使用Flask来做到这一点。
- en: This book is optimized for **Python 2.x**, so, that's the version I advise you
    to use from now on. All the examples and code are aimed at that Python version,
    which is the default in most Linux distributions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本书针对**Python 2.x**进行了优化，所以我建议你从现在开始使用这个版本。所有的示例和代码都针对这个Python版本，这也是大多数Linux发行版的默认版本。
- en: Prerequisites and tools
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件和工具
- en: First, let's make sure our environment is properly configured. For this course,
    I assume you are using a Debian-like Linux distribution, such as Mint ([http://www.linuxmint.com/](http://www.linuxmint.com/))
    or Ubuntu ([http://ubuntu.com/](http://ubuntu.com/)). All the instructions will
    be geared towards these systems.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们确保我们的环境已经正确配置。在本课程中，我假设你使用的是类似Debian的Linux发行版，比如Mint（[http://www.linuxmint.com/](http://www.linuxmint.com/)）或Ubuntu（[http://ubuntu.com/](http://ubuntu.com/)）。所有的说明都将针对这些系统。
- en: 'Let''s begin by installing the required Debian packages with `apt-get` as follows:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从以下方式开始安装所需的Debian软件包：
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'This will install the Python development tools and libraries required for compiling
    Python packages, and pip: a neat tool you can use to install Python packages from
    the command line. On with it! Let''s install our virtual environment managing
    tool:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Python开发工具和编译Python包所需的库，以及pip：一个方便的工具，你可以用它来从命令行安装Python包。继续吧！让我们安装我们的虚拟环境管理工具：
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To explain what we just did: `sudo` tells our OS that we want administrative
    privileges to run the next command, and `pip` is the default Python package management
    tool and helps us install the `virtualenvwrapper` package. The second command
    statement adds a command to load the `virtualenvwrapper.sh` script together with
    the console, so that commands work inside your shell (we''ll be using it, by the
    way).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 解释一下我们刚刚做的事情：`sudo`告诉我们的操作系统，我们想要以管理员权限运行下一个命令，`pip`是默认的Python包管理工具，帮助我们安装`virtualenvwrapper`包。第二个命令语句添加了一个命令，将`virtualenvwrapper.sh`脚本与控制台一起加载，以便命令在你的shell内工作（顺便说一下，我们将使用它）。
- en: Setting up a virtual environment
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置虚拟环境
- en: 'A virtual environment is the way Python isolates full package environments
    from one another. This means you can easily manage dependencies. Imagine you want
    to define the minimum necessary packages for a project; a virtual environment
    would be perfect to let you test and export the list of needed packages. We will
    discuss it later on. Now, create a new terminal pressing *Ctrl* + *Shift* + *T*
    on your keyboard and create our *hello world* environment like this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境是Python将完整的包环境与其他环境隔离开来的方式。这意味着你可以轻松地管理依赖关系。想象一下，你想为一个项目定义最小必需的包；虚拟环境将非常适合让你测试和导出所需包的列表。我们稍后会讨论这个问题。现在，按下键盘上的*Ctrl*
    + *Shift* + *T*创建一个新的终端，并像这样创建我们的*hello world*环境：
- en: '[PRE2]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The first line creates our environment with the name "hello". You will also
    *automatically* load that environment into the current terminal. You can deactivate
    your virtual environment by typing `deactivate` and you can load it again with
    the following command:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行创建了一个名为"hello"的环境。你也可以通过输入`deactivate`来停用你的虚拟环境，然后可以使用以下命令再次加载它：
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The second line tells pip to install the Flask package in the current virtual
    environment, `hello` in this case.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 第二行告诉pip在当前虚拟环境`hello`中安装Flask包。
- en: Understanding the "Hello World" app
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解"Hello World"应用程序
- en: Given the environment set, what should we use to write our beautiful code? An
    editor or an IDE? If you're working on a low budget, try Light Table editor ([http://lighttable.com/](http://lighttable.com/)).
    Free, fast, and easy to use (*Ctrl* + *Spacebar* gives you access to all available
    options), it also has workspace support! Can't get any better for the money. If
    you're a lucky one with $200 to spare (or if you have a free license [https://www.jetbrains.com/pycharm/buy/](https://www.jetbrains.com/pycharm/buy/)),
    just fork out for the PyCharm IDE which is pretty much the best IDE for Python
    Web development. Now let's move on.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好环境之后，我们应该使用什么来编写我们美丽的代码呢？编辑器还是集成开发环境？如果你的预算有限，可以尝试使用Light Table编辑器（[http://lighttable.com/](http://lighttable.com/)）。免费、快速、易于使用（*Ctrl*
    + *Spacebar* 可以访问所有可用选项），它还支持工作区！对于这个价钱来说，已经很难找到更好的了。如果你有200美元可以花（或者有免费许可证[https://www.jetbrains.com/pycharm/buy/](https://www.jetbrains.com/pycharm/buy/)），那就花钱购买PyCharm集成开发环境吧，这几乎是最适合Python
    Web开发的最佳IDE。现在让我们继续。
- en: 'Create a folder that will hold your project files (you don''t need to but people
    will like you more if you do), as follows:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个文件夹来保存你的项目文件（你不需要，但如果你这样做，人们会更喜欢你），如下所示：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Enter the new project folder and create the `main.py` file:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 进入新的项目文件夹并创建`main.py`文件：
- en: '[PRE5]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `main.py` file will have the whole "Hello World" application in it. Our
    `main.py` content should be like this:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`main.py`文件将包含整个"Hello World"应用程序。我们的`main.py`内容应该像这样：'
- en: '[PRE6]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Tip
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: '**Downloading the example code**'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**下载示例代码**'
- en: You can download the example code files for all Packt books you have purchased
    from your account at [http://www.packtpub.com](http://www.packtpub.com). If you
    purchased this book elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从您在[http://www.packtpub.com](http://www.packtpub.com)的帐户中下载您购买的所有Packt图书的示例代码文件。如果您在其他地方购买了本书，您可以访问[http://www.packtpub.com/support](http://www.packtpub.com/support)并注册，以便将文件直接发送到您的电子邮件。
- en: Wow! That took some typing, right? No? Yeah, I know. So, what did we just do?
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 哇！那需要一些打字，对吧？不是吗？是的，我知道。那么，我们刚刚做了什么？
- en: The first line states that our `main.py` file should use `utf-8` encoding. All
    the cool kids do that so don't be mean to your non-English pals and use that in
    all your Python files (doing so might help you avoid some nasty bugs in big projects).
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行说明我们的`main.py`文件应该使用`utf-8`编码。所有酷孩子都这样做，所以不要对您的非英语朋友不友好，并在所有Python文件中使用它（这样做可能有助于您避免在大型项目中出现一些讨厌的错误）。
- en: 'In the second and third lines we import our Flask class and instantiate it.
    The name of our application is "app". Pretty much everything is related to it:
    views, blueprints, config, and so on. The argument, `__name__` is required and
    is used to tell the application where to look for resources such as static content
    or templates.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行和第三行，我们导入我们的Flask类并对其进行实例化。我们应用程序的名称是“app”。几乎所有与它相关的东西都与它有关：视图、蓝图、配置等等。参数`__name__`是必需的，并且用于告诉应用程序在哪里查找静态内容或模板等资源。
- en: In order to create our "Hello World", we need to tell our Flask instance how
    to respond when a user tries to access our Web application (using a browser or
    whatever). For that purpose, Flask has routes.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的“Hello World”，我们需要告诉我们的Flask实例在用户尝试访问我们的Web应用程序（使用浏览器或其他方式）时如何响应。为此，Flask有路由。
- en: Routes are the way Flask reads a request header and decides which view should
    respond to that request. It does so by analyzing the path part of the requested
    URL and finding which route is registered with that path.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是Flask读取请求头并决定哪个视图应该响应该请求的方式。它通过分析请求的URL的路径部分，并找到注册了该路径的路由来实现这一点。
- en: 'In the *hello world* example, in line 5, we use the route decorator to register
    the `hello` function to the path `"/"`. Every time an app receives a request in
    which the path is `"/"`, `hello` will respond to that request. The following snippet
    shows how to check the path part of a URL:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在*hello world*示例中，在第5行，我们使用路由装饰器将`hello`函数注册到`"/"`路径。每当应用程序接收到路径为`"/"`的请求时，`hello`都会响应该请求。以下代码片段显示了如何检查URL的路径部分：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You could also have multiple routes mapped to the same function, like so:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以将多个路由映射到同一个函数，如下所示：
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, both the `"/"` and `"/index"` paths would map to `hello`.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，`"/"`和`"/index"`路径都将映射到`hello`。
- en: In lines 6 and 7 we have the function that will respond the request. Notice
    that it receives no parameters and responds –with a familiar string. It receives
    no parameters because the request data, like a submitted form, is accessed through
    a thread-safe variable called **request** that we will see more about in upcoming
    chapters.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在第6和第7行，我们有一个将响应请求的函数。请注意，它不接收任何参数并且以熟悉的字符串作出响应。它不接收任何参数，因为请求数据（如提交的表单）是通过一个名为**request**的线程安全变量访问的，我们将在接下来的章节中更多地了解它。
- en: With regard to the response, Flask can respond to requests in numerous formats.
    In our example, we respond with a plain string, but we could also respond with
    a JSON or HTML string.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 关于响应，Flask可以以多种格式响应请求。在我们的示例中，我们以纯字符串作出响应，但我们也可以以JSON或HTML字符串作出响应。
- en: 'Lines 9 and 10 are simple. They check whether `main.py` is being called as
    a script or as a module. If it is as a script, it will run the built-in development
    server that comes bundled with Flask. Let''s try that:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第9和第10行很简单。它们检查`main.py`是作为脚本还是作为模块被调用。如果是作为脚本，它将运行与Flask捆绑在一起的内置开发服务器。让我们试试看：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Your terminal console will output something like this:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 您的终端控制台将输出类似以下内容：
- en: '[PRE10]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Just open `http://127.0.0.1:5000/` in your browser to see your app working.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 只需在浏览器中打开`http://127.0.0.1:5000/`，即可查看您的应用程序运行情况。
- en: Running `main.py` as a script is usually a very simple and handy setup. Usually,
    you have Flask-Script to handle calling the development server for you and other
    setups.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 将`main.py`作为脚本运行通常是一个非常简单和方便的设置。通常，您可以使用Flask-Script来处理为您调用开发服务器和其他设置。
- en: 'If you used `main.py` as a module, just import it as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您将`main.py`作为模块使用，只需按以下方式导入它：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You would usually do something like this to import an app factory function in
    your testing code.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您会在测试代码中执行类似以下操作来导入应用工厂函数。
- en: That's pretty much all there is to know about our *"Hello World"* application.
    One thing our world application lacks is a fun factor. So let's add that; let's
    make your application fun! Maybe some HTML, CSS, and JavaScript could do the trick
    here. Let's try that!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是关于我们的“Hello World”应用程序的所有内容。我们的世界应用程序缺少的一件事是乐趣因素。所以让我们添加一些；让我们让您的应用程序有趣！也许一些HTML、CSS和JavaScript可以在这里起作用。让我们试试看！
- en: Serving HTML pages
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 提供HTML页面
- en: 'First, to make our `hello` function respond with HTML, all we have to do is
    change it like this:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要使我们的`hello`函数以HTML响应，我们只需将其更改为以下内容：
- en: '[PRE12]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding example, `hello` is returning a HTML formatted string and a
    number. The string will be parsed as HTML by default while `200` is an optional
    HTTP code indicating a successful response. `200` is returned by default.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例中，`hello`返回一个HTML格式的字符串和一个数字。字符串将默认解析为HTML，而`200`是一个可选的HTTP代码，表示成功的响应。默认情况下返回`200`。
- en: 'If you refresh your browser with *F5*, you''ll notice that nothing has changed.
    That''s why the Flask development server is not reloading when the source changes.
    That only happens when you run your application in debug mode. So let''s do that:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用*F5*刷新浏览器，您会注意到没有任何变化。这就是为什么当源代码更改时，Flask开发服务器不会重新加载。只有在调试模式下运行应用程序时才会发生这种情况。所以让我们这样做：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Now go to the terminal where your application is running, type `Ctrl + C` then
    restart the server. You will notice a new output besides the URL where your server
    is running—something about "stat". That indicates your server will reload the
    code on source modification. That''s nice, but did you spot the crime we just
    committed: defining our template inside the function that handles the response?
    Be careful, the MVC gods might be watching. Let''s separate where we define our
    view from where we define our controller. Create a folder called templates and
    a file called `index.html` inside it. The `index.html` file content should be
    like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在去你的应用程序正在运行的终端，输入`Ctrl + C`然后重新启动服务器。你会注意到除了你的服务器正在运行的URL之外有一个新的输出——关于“stat”的内容。这表示你的服务器将在源代码修改时重新加载代码。这很好，但你注意到我们刚刚犯下的罪行了吗：在处理响应的函数内部定义我们的模板？小心，MVC之神可能在看着你。让我们把我们定义视图的地方和定义控制器的地方分开。创建一个名为templates的文件夹，并在其中创建一个名为`index.html`的文件。`index.html`文件的内容应该像这样：
- en: '[PRE14]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now change your code like this:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在改变你的代码像这样：
- en: '[PRE15]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Did you see what we did there? `render_response` is capable of loading templates
    from the `templates/` folder (a default for Flask) and you can render it just
    by returning the output.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你看到我们做了什么了吗？`render_response`能够从`templates/`文件夹（Flask的默认文件夹）中加载模板，并且你可以通过返回输出来渲染它。
- en: 'Now let''s add some JavaScript and CSS styles. By default, the Flask built-in
    development server serves all files in your `project` folder that are in a subfolder
    called `static`. Let''s create ours and add some files to it. Your project tree
    should look like this:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们添加一些JavaScript和CSS样式。默认情况下，Flask内置的开发服务器会提供`project`文件夹中名为`static`的子文件夹中的所有文件。让我们创建我们自己的文件夹并向其中添加一些文件。你的项目树应该是这样的：
- en: '[PRE16]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Notice that I add files from the `foundation.zurb` framework, a nice CSS framework
    available in [http://foundation.zurb.com/](http://foundation.zurb.com/). I advise
    you to do the same in order to have a modern, good-looking site. The path to the
    static files in your template should look like this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我从`foundation.zurb`框架中添加了文件，这是一个在[http://foundation.zurb.com/](http://foundation.zurb.com/)上可用的不错的CSS框架。我建议你也这样做，以便拥有一个现代、漂亮的网站。你模板中的静态文件路径应该是这样的：
- en: '[PRE17]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The folder, `/static` before the real file path is a route served by default
    by Flask that only works in debug mode. In production, you would have the HTTP
    server serving your static files for you. See the attached code for this chapter
    for the full example.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在真实文件路径之前的`/static`文件夹是Flask默认提供的路由，只在调试模式下起作用。在生产环境中，你将需要HTTP服务器为你提供静态文件。查看本章附带的代码以获取完整示例。
- en: Try improving the *hello world* example with some nice CSS styling!
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试用一些漂亮的CSS样式来改进“hello world”示例！
- en: Summary
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Setting up a development environment is a very important task, and we just did
    this! Creating a *"Hello World"* application is a great way to introduce a new
    technology to someone. We also did that. At last, we learned how to serve an HTML
    page and static files, which is pretty much what most Web applications do. You
    acquired all these skills in this chapter, and I hope the process has been quite
    easy but fulfilling!
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 建立开发环境是一项非常重要的任务，我们刚刚完成了这个任务！创建一个“Hello World”应用程序是向某人介绍新技术的好方法。我们也做到了。最后，我们学会了如何提供HTML页面和静态文件，这基本上是大多数Web应用程序所做的。你在本章中掌握了所有这些技能，我希望这个过程既简单又充实！
- en: In the next chapter, we add a little sauce to our challenges by getting more
    adventurous with templates. We'll learn how to use Jinja2 components to create
    powerful templates that allow us to do more with less typing. See you there!
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过更加冒险的模板来为我们的挑战增添一些调味。我们将学习如何使用Jinja2组件来创建强大的模板，从而让我们在输入更少的情况下做更多的事情。到时见！
