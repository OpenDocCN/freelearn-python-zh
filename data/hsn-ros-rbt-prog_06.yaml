- en: Creating the Virtual Two-Wheeled ROS Robot
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建虚拟两轮 ROS 机器人
- en: RViz is a 3D visualization tool that can display robot models. It provides a
    configurable **Graphical User Interface** (**GUI**) that allows the user to display
    any information they may request for the task being carrying out. RViz can be
    used for both robot visualization and for debugging specific features while building
    the **Unified Robot Description Format** (**URDF**) model. This format uses XML
    to simulate the robot.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: RViz 是一个 3D 可视化工具，可以显示机器人模型。它提供了一个可配置的 **图形用户界面**（**GUI**），允许用户显示他们可能请求的任何信息，以便执行当前任务。RViz
    可用于机器人可视化和在构建 **统一机器人描述格式**（**URDF**）模型时调试特定功能。此格式使用 XML 来模拟机器人。
- en: To illustrate how to use RViz and URDF, in this chapter, you will build a simple
    two-wheeled robot, which is the digital twin of GoPiGo3\. You will create the
    URDF file that describes the robot's main components. This file acts as the input
    for visualization in several ROS tools – not only RViz, but also the Gazebo simulation
    tool, which also includes a physics engine. Gazebo will be covered in the next
    chapter, while in this one, you will concentrate your efforts on getting familiar
    with RViz.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明如何使用 RViz 和 URDF，在本章中，你将构建一个简单的两轮机器人，它是 GoPiGo3 的数字孪生。你将创建描述机器人主要组件的 URDF
    文件。此文件作为多个 ROS 工具可视化的输入 – 不仅包括 RViz，还包括 Gazebo 模拟工具，它还包含物理引擎。Gazebo 将在下一章中介绍，而本章中，你将集中精力熟悉
    RViz。
- en: This chapter will teach you how to understand the syntax of URDF files and acquire
    the skills you'll need in order to systematically test/check features with RViz
    while building the robot model.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将教你如何理解 URDF 文件的语法，并掌握在构建机器人模型时使用 RViz 系统性地测试/检查功能的技能。
- en: 'In this chapter, we will be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Getting started with RViz for robot visualization
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开始使用 RViz 进行机器人可视化
- en: Building a differential drive robot with URDF
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 URDF 构建 differential drive 机器人
- en: Inspecting the GoPiGo3 model in ROS with RViz
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 RViz 检查 GoPiGo3 模型在 ROS 中的情况
- en: Robot frames of reference in the URDF model
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: URDF 模型中的机器人参考系
- en: Using RViz to check results while building
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 RViz 在构建过程中检查结果
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In the previous chapter, you were told how to clone this book''s code repository
    so that it''s in the home folder of your laptop. If you didn''t do this, from
    a Terminal on your laptop, clone the repository into your home folder like so:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你被告知如何克隆本书的代码仓库，以便它在你的笔记本电脑的主文件夹中。如果你没有这样做，从你的笔记本电脑上的终端，像这样将仓库克隆到你的主文件夹中：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, only copy the code for this chapter into the ROS workspace. This way,
    you will have a cleaner ROS environment:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，只需将本章的代码复制到 ROS 工作空间中。这样，你将拥有一个更干净的 ROS 环境：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Move to the path of the new files and check that the files are present:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 移动到新文件的路径并检查文件是否存在：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This chapter contains a new ROS package named `rviz_basics`, so rebuild the
    workspace so that it is known to your ROS environment:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包含一个名为 `rviz_basics` 的新 ROS 软件包，因此请重新构建工作空间，以便它被你的 ROS 环境所识别。
- en: '[PRE3]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Check that the package is installing correctly by selecting it and listing
    its files:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过选择软件包并列出其文件来检查软件包是否正确安装：
- en: '[PRE4]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now, you are ready to complete this chapter.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经准备好完成这一章了。
- en: Getting started with RViz for robot visualization
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始使用 RViz 进行机器人可视化
- en: RViz provides a configurable GUI so that you can display specific information
    about the robot.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: RViz 提供了一个可配置的 GUI，以便你可以显示有关机器人的特定信息。
- en: To make sure RViz loads a default configuration, place the `default.rviz` file
    inside the `~/.rviz/` folder. You will find `Chapter4_RViz_basics` in this folder.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保 RViz 加载默认配置，请将 `default.rviz` 文件放置在 `~/.rviz/` 文件夹中。你将在该文件夹中找到 `Chapter4_RViz_basics`。
- en: 'You can open the RViz GUI with the following commands:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下命令打开 RViz GUI：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `T2` command, `rviz`, is an abbreviation of the official `$ rosrun rviz
    rviz` declaration, where first `rviz` refers to the package and the second refers
    to the node with the same name.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`T2` 命令，`rviz` 是官方 `$ rosrun rviz rviz` 声明的缩写，其中第一个 `rviz` 指的是软件包，第二个 `rviz`
    指的是同名节点。'
- en: 'At the moment, the RViz window will be empty, so it will only show a grid at
    the floor level. In the next section, we will teach you how to build the robot
    model and get ready to visualize it. Once you''ve launched it, you will see a
    window similar to the one shown in the following screenshot:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，RViz窗口将是空的，所以它只会显示地板级别的网格。在下一节中，我们将教你如何构建机器人模型并准备可视化它。一旦启动，你将看到一个类似于以下截图的窗口：
- en: '![](img/0ef57290-3490-4559-80b7-ebd028fda79c.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/0ef57290-3490-4559-80b7-ebd028fda79c.png)'
- en: If you look carefully at the preceding screenshot, you'll see an error message
    in the left-hand pane. This is due to the fact that a robot model hasn't been
    loaded. We will develop this model in the next section.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细查看前面的截图，你会在左侧面板看到一个错误消息。这是因为还没有加载机器人模型。我们将在下一节中开发这个模型。
- en: Building a differential drive robot with URDF
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用URDF构建差速驱动机器人
- en: 'The GoPiGo3 kit is composed of four several subassemblies:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: GoPiGo3套件由四个子组件组成：
- en: 'The chassis, which is the main structure that all the parts are attached to.
    This includes the following:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底盘，这是所有部件都连接到的主要结构。这包括以下内容：
- en: Raspberry Pi and GoPiGo3 board
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Raspberry Pi和GoPiGo3板
- en: Motors
  id: totrans-35
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电机
- en: Battery package
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电池包
- en: Wheels
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 轮子
- en: Caster
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 万向轮
- en: Two wheels – left and right, each one driven by one motor.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个轮子——左轮和右轮，每个轮子由一个电机驱动。
- en: 'A caster, which is a small freewheel attached to the rear part of the chassis
    that keeps the robot supported on three points: the left and right wheels and
    the caster itself. Be aware that one freewheel is the minimum to keep the robot
    rolling on the floor:'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caster（万向轮），它是一个连接在底盘后部的小型自由轮，使机器人在三个点上保持支撑：左右轮子和万向轮本身。请注意，一个自由轮是使机器人能够在地面上滚动所需的最小条件：
- en: 'If the caster were not present, the system would be underconstrained. Then,
    you would have a self-balancing robot that would have to be continuously actuated
    by its motors to stay in equilibrium. This is a *closed-loop* control problem
    that needs the **Inertial Measurement Unit** (**IMU**) data from its accelerometers
    and gyroscopes to actuate the motors and keep the robot in equilibrium:'
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有万向轮，系统将会欠约束。那么，你将得到一个需要由其电机连续驱动以保持平衡的自平衡机器人。这是一个*闭环*控制问题，需要从其加速度计和陀螺仪获取的**惯性测量单元**（**IMU**）数据来驱动电机并保持机器人平衡：
- en: '![](img/df78ca2b-2824-473c-a409-6d337c33fdba.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/df78ca2b-2824-473c-a409-6d337c33fdba.png)'
- en: 'Image courtesy: Dexter Industries https://shop.dexterindustries.com/media/catalog/product/cache/4/thumbnail/1800x2400/9df78eab33525d08d6e5fb8d27136e95/b/a/balancebot_remote2-150x150_1_1.jpg'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图片来源：Dexter Industries https://shop.dexterindustries.com/media/catalog/product/cache/4/thumbnail/1800x2400/9df78eab33525d08d6e5fb8d27136e95/b/a/balancebot_remote2-150x150_1_1.jpg
- en: If there were two casters, the system would be overconstrained. The robot would
    be supported on four points – two wheels and two casters – and the position of
    the second caster would be determined by the other caster and the two wheels.
    If one of the four wheels/the caster were not in contact with the floor, you would
    have a lame robot.
  id: totrans-44
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有两个万向轮，系统将会过约束。机器人将在四个点上得到支撑——两个轮子和两个万向轮——第二个万向轮的位置将由另一个万向轮和两个轮子确定。如果四个轮子/万向轮中的任何一个没有与地面接触，你将得到一个跛脚的机器人。
- en: 'From the point of view of a simulated model, a differential drive robot such
    as GoPiGo3 is composed of three parts, each one being a rigid body. Therefore,
    we will divide the robot into mobile parts:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 从模拟模型的角度来看，像GoPiGo3这样的差速驱动机器人由三个部分组成，每个部分都是一个刚体。因此，我们将机器人分为移动部分：
- en: The robot body, which includes the chassis and all the fixed parts attached
    to it (Raspberry Pi, GoPigo3 board, motors, and the battery package)
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人本体，包括底盘和所有连接到它上的固定部件（Raspberry Pi、GoPigo3板、电机和电池包）
- en: Left and right wheels
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左轮和右轮
- en: Caster
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Caster
- en: Going back to ROS, you are going to build a simulated GoPiGo3 with URDF. This
    is an XML format description that represents robot models at the component level. ROS
    contains a URDF package ([http://wiki.ros.org/urdf](http://wiki.ros.org/urdf))
    in order to accept this format of the robot description for simulation purposes.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 回到ROS，你将使用URDF构建一个模拟的GoPiGo3。这是一个表示组件级别的机器人模型的XML格式描述。ROS包含一个URDF包（[http://wiki.ros.org/urdf](http://wiki.ros.org/urdf)），以便在模拟目的下接受这种机器人描述格式。
- en: In the upcoming sections, we are going to illustrate how to describe the four
    mobile parts of GoPiGo3 in URDF.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将展示如何使用URDF描述GoPiGo3的四个移动部分。
- en: Overview of URDF for GoPiGo3
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: GoPiGo3的URDF概述
- en: 'First, we''re going to give you an overview of building the model, after which
    we''ll walk you through the process step by step. The URDF model of our robot
    will render like this in RViz:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将为您提供一个构建模型的概述，然后我们将一步一步地引导您通过这个过程。我们的URDF模型在RViz中的渲染方式如下：
- en: '![](img/9286c54f-8be2-4f82-a9ec-694a2916d791.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/9286c54f-8be2-4f82-a9ec-694a2916d791.png)'
- en: 'This model corresponds to the following URDF description:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 此模型对应以下URDF描述：
- en: '![](img/73a233ce-0cda-44ba-8b7a-6effa1f01efb.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/73a233ce-0cda-44ba-8b7a-6effa1f01efb.png)'
- en: 'The content of the XML tags has collapsed – which is inferred from the plus
    signs to the right of the line numbers – to show you that each block corresponds
    to one part of the robot:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: XML标签的内容已经折叠——这可以从行号右侧的加号推断出来——以显示每个块对应于机器人的一个部分：
- en: The top-level tag is `<robot>` and identifies the robot as a whole.
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最高级标签是`<robot>`，它标识了整个机器人。
- en: 'The `<link>` tag refers to each mobile part, identified by the `name` property.
    All of the content inside specifies the characteristics of that part:'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<link>`标签指的是每个移动部分，通过`name`属性进行标识。所有内容都指定了该部分的特征：'
- en: '`name="base_link"` refers to the robot body and, in this case, the chassis
    and the parts attached to it: the Raspberry Pi, GoPiGo3 board, motors, and the
    battery package.'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name="base_link"`指的是机器人身体，在这种情况下，底盘及其附件：树莓派、GoPiGo3板、电机和电池包。'
- en: '`name="caster"` refers to the caster freewheel, but it is within a `<visual>` subtag,
    meaning it is part of the robot body, not a separate mobile part. Although it
    is a rolling element, remember that a simulated model tries to catch the properties
    of its reality with a simple description. Since the caster is merely a support,
    it does not need to be driven by a motor. For this reason, we can keep it fixed
    with respect to the robot body, and only deal with three mobile parts (robot body,
    right wheel, and left wheel) instead of four. If you''re wondering about the friction
    it could produce, then don''t worry – later, we''ll learn how to set a zero value
    to make sure it behaves like a freewheel. The `<visual>` tag refers to a rigid
    body representation of a part of the robot without needing to define it as a separate
    link.'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name="caster"`指的是万向节自由轮，但它位于`<visual>`子标签内，这意味着它是机器人身体的一部分，而不是一个独立的移动部分。尽管它是一个滚动元件，但请记住，模拟模型试图用简单的描述来捕捉其现实世界的特性。由于万向节仅仅是一个支撑，它不需要由电机驱动。因此，我们可以将其固定在机器人身体上，并且只处理三个移动部分（机器人身体、右轮和左轮）而不是四个。如果你在担心它可能产生的摩擦，那么请不要担心——稍后，我们将学习如何设置零值以确保它像自由轮一样运行。《<visual>`标签指的是机器人一部分的刚体表示，而无需将其定义为单独的连接。'
- en: '`name="right_wheel"` refers to the right wheel.'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name="right_wheel"`指的是右轮。'
- en: '`name="left_wheel"` refers to the left wheel.'
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name="left_wheel"`指的是左轮。'
- en: The `<joint>` tag represents a junction between two parts. From a mechanical
    point of view, these joint tags correspond to the bearings that the wheels are
    mounted on. There is one associated with each wheel link.
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<joint>`标签代表两个部分之间的连接。从机械角度来看，这些关节标签对应于车轮安装的轴承。每个车轮连接都有一个与之相关联。'
- en: Next, we will explain the contents of each `<link>` and `<joint>` tag that's used
    in this model in detail.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将详细解释在这个模型中使用的每个`<link>`和`<joint>`标签的内容。
- en: URDF robot body
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URDF机器人身体
- en: A `<link>` element, as defined in the URDF XML specification ([http://wiki.ros.org/urdf/XML/link](http://wiki.ros.org/urdf/XML/link)),
    defines a rigid body with inertia, visual features, and collision properties.
    In this chapter, we will introduce `<visual>`. We will leave `<inertia>` and `<collision>`
    for later in this book since these properties are only required when performing
    physics simulation with Gazebo (see [Chapter 5](74284adc-e0d7-4e40-a54b-e2e447b8e2fe.xhtml),
    *Simulating Robot Behavior with Gazebo*).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`<link>`元素，如URDF XML规范中定义的（[http://wiki.ros.org/urdf/XML/link](http://wiki.ros.org/urdf/XML/link)），定义了一个具有惯性、视觉特征和碰撞属性的刚体。在本章中，我们将介绍`<visual>`。我们将把`<inertia>`和`<collision>`留到本书的后面部分，因为这些属性仅在执行Gazebo（见第5章，*使用Gazebo模拟机器人行为*）的物理模拟时才需要。'
- en: The `<visual>` tag describes the visual appearance of the part. Don't confuse
    this with the `<collision>` tag, as that defines the volume to be considered for
    interference or crash calculation. Often, both may define different volumes, although
    it is very common that they are in agreement.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`<visual>`标签描述了部件的视觉外观。不要将其与`<collision>`标签混淆，因为后者定义了用于干涉或碰撞计算的体积。通常，两者可能定义不同的体积，尽管它们在大多数情况下是一致的。'
- en: 'Why should they be different? For complex shapes, interference calculations
    can be heavy in terms of CPU load and time duration. Therefore, it is better to
    use simple shapes in `<collision>` tags, defining them as the envelope of the
    actual shapes of the parts. For example, for the manipulator in the following
    screenshot, you could define the `<visual>` elements of the arm as the actual
    shapes – the ones that are shown – and simplify the `<collision>` elements to
    make them the envelope cylinders of the arms to facilitate interference calculation:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么它们应该不同？对于复杂形状，干涉计算在CPU负载和时间长度上可能会很重。因此，在`<collision>`标签中使用简单形状会更好，将它们定义为实际形状的包络。例如，对于以下屏幕截图中的机械臂，你可以将手臂的`<visual>`元素定义为实际形状——即显示的形状——并将`<collision>`元素简化为手臂的包络圆柱，以方便干涉计算：
- en: '![](img/97cd20b5-8c9c-402a-8b84-7f66463881d6.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/97cd20b5-8c9c-402a-8b84-7f66463881d6.png)'
- en: The `<origin>` tag specifies the reference frame of the `<visual>` element with
    respect to the reference frame of the link.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`<origin>`标签指定了`<visual>`元素相对于链接参考框架的参考框架。'
- en: The `<geometry>` tag describes the visual shape (box, cylinder, sphere, or mesh)
    and its dimensions.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`<geometry>`标签描述了视觉形状（盒子、圆柱、球体或网格）及其尺寸。'
- en: The `<material>` tag sets the appearance of the `<visual>` element with `<color>`
    and `<texture>`.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`<material>`标签使用`<color>`和`<texture>`设置`<visual>`元素的外观。'
- en: 'Given these tag descriptions, we can easily read about the `base_link` element,
    that is, the robot body, in the following code snippet:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 给定这些标签描述，我们可以在以下代码片段中轻松地了解`base_link`元素，即机器人身体：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Therefore, the `base_link` element consists of the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，`base_link`元素由以下内容组成：
- en: A box that's 0.5 m in length and 0.25 m in height.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个长度为0.5米、高度为0.25米的盒子。
- en: Its reference frame – located in the geometrical center of the box – coincides
    with that of the link (zero values in all three linear axes and three rotation
    axes).
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它的参考框架位于盒子的几何中心，与链接的参考框架相同（所有三个线性轴和三个旋转轴的值均为零）。
- en: 'The `<material>` tag specifies the blue color as RGBA indexes: Red = 0, Green
    = 0.5, Blue = 1\. The fourth, A = 1, is the alpha channel, which refers to the
    degree of opacity. A value of 1 means an opaque object, while 0 means that it
    is transparent.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<material>`标签指定蓝色颜色为RGBA索引：红色=0，绿色=0.5，蓝色=1。第四个，A=1，是alpha通道，它表示不透明度。值为1表示不透明物体，而值为0表示它是透明的。'
- en: 'Rendering the link in RViz provides the following simple aspect of a box:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在RViz中渲染链接提供了以下简单的盒子方面：
- en: '![](img/c7714d58-0b3c-4fdb-96dd-402eaa5f62c0.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c7714d58-0b3c-4fdb-96dd-402eaa5f62c0.png)'
- en: But wait – what is that semi-spherical shape attached to the lower face? That
    is the caster, the freewheel that we can model as an integral part of the robot
    body, as was explained previously.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 但等等——那个附着在底部面的半球形形状是什么？那是驱动器，是我们可以将它建模为机器人身体的一部分的自由轮，如前所述。
- en: Caster
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驱动器
- en: 'The caster description is nested inside the `<link name="base_link">` element.
    This means that it''s a rigid part that''s fixed to the robot body. Let''s go
    over what it is:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动器描述嵌套在`<link name="base_link">`元素中。这意味着它是一个固定在机器人身体上的刚性部分。让我们来看看它是什么：
- en: It's a sphere that has a radius of 0.05 m, located at x=0.2 m, z=-0.125 m. Be
    aware that the *Z* coordinate is half of the box height (=0.25 m) and negative.
    This means that the top semi-sphere is embedded within the box and only the other
    semi-sphere stays visible on the bottom part of the box.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一个半径为0.05米的球体，位于x=0.2米，z=-0.125米。请注意，*Z*坐标是盒子高度的一半（=0.25米）且为负值。这意味着上半球体嵌入在盒子内，而下半球体仅保持在盒子的底部部分可见。
- en: By default, the same color is selected as what was defined for the box.
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 默认情况下，选择的颜色与为盒子定义的颜色相同。
- en: 'Inspect the following code carefully to ensure you understand it:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 仔细检查以下代码，以确保你理解它：
- en: '[PRE7]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is how the caster will appear in RViz, making the box semitransparent:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是驱动器在RViz中的外观，使盒子半透明：
- en: '![](img/9aa59cf2-915e-40a2-84a8-6618858ced36.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/9aa59cf2-915e-40a2-84a8-6618858ced36.png)'
- en: 'Take note of the position and direction of the **X**, **Y**, and **Z** axes,
    and pay attention to their directions. This fact is especially important when
    matching the axes of the IMU. The following photograph shows how you have to place
    such a sensor in a physical GoPiGo3 to make sure the IMU axes are parallel to
    the `base_link` frame and have the same directions (see the marked set of axes
    that are printed on the surface of the sensor):'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 *X*、*Y* 和 *Z* 轴的位置和方向，并注意它们的方向。这个事实在匹配 IMU 的轴时尤其重要。下面的照片显示了如何在物理 GoPiGo3
    上放置这样的传感器，以确保 IMU 轴与 `base_link` 框架平行，并且具有相同的方向（请参见传感器表面打印的标记轴组）：
- en: '![](img/faee0314-f937-4ed8-a44c-b1a6b33f5c11.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/faee0314-f937-4ed8-a44c-b1a6b33f5c11.png)'
- en: 'Finally, in the following photograph, you can see the whole robot. This will
    help you make sure that you know where the details in the preceding photograph
    are located:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在下面的照片中，你可以看到整个机器人。这将帮助你确保你知道前一张照片中细节的位置：
- en: '![](img/4b7d7e6d-2a1b-4547-91a3-3d7e8396f1e2.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4b7d7e6d-2a1b-4547-91a3-3d7e8396f1e2.png)'
- en: Next, let's have a look at the URDF model's left and right wheels.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看 URDF 模型的左右轮子。
- en: The URDF model's left and right wheels
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URDF 模型的左右轮子
- en: 'Given that you already know the basic URDF tags, it is straightforward to read
    the definition for the right wheel, as shown in the following code snippet:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经了解了基本的 URDF 标签，那么阅读右轮的定义就很简单了，如下代码片段所示：
- en: '[PRE8]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Inside the `<origin>` tag, the first component of the `rpy` attribute (rotation
    around the *X* axis), 1.570795 = π/2, is what sets the wheel to a vertical position.
    The cylindrical wheel has a 0.2 m radius and is 0.1 m in length.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<origin>` 标签内部，`rpy` 属性的第一个分量（绕 *X* 轴的旋转），1.570795 = π/2，是设置轮子为垂直位置的关键。圆柱形轮子的半径为
    0.2 m，长度为 0.1 m。
- en: 'The new element here is the `<joint>` tag ([http://wiki.ros.org/urdf/XML/joint](http://wiki.ros.org/urdf/XML/joint)),
    which is used to specify the kinematics and dynamics of the joint and its safety
    limits:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这里新增的元素是 `<joint>` 标签 ([http://wiki.ros.org/urdf/XML/joint](http://wiki.ros.org/urdf/XML/joint))，它用于指定关节的动力学和运动学以及其安全限制：
- en: '`type="continuous"` means a hinge joint that rotates around the axis and has
    no upper and lower limits.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type="continuous"` 表示一个铰链关节，它围绕轴旋转且没有上下限。'
- en: The parent and child links identify what links are connected by this joint.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 父链接和子链接标识了哪些链接通过这个关节连接。
- en: 'The origin specifies the offsets in *X*, *Y*, and *Z* and the three rotations
    of the child link with respect to the parent link. Then, `<origin xyz="0 -0.30
    0" rpy="0 0 0" />` places the joint at Y = -0.30 m. These coordinates are referred
    to the frame of the parent link:'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 原点指定了相对于父链接的子链接在 *X*、*Y* 和 *Z* 方向上的偏移以及三个旋转。然后，`<origin xyz="0 -0.30 0" rpy="0
    0 0" />` 将关节放置在 Y = -0.30 m 的位置。这些坐标是相对于父链接的框架：
- en: '`axis` defines the rotation axis of the joint with respect to the parent frame.
    Here, `<axis xyz="0 1 0" />` means that the rotation axis is Y (value 1 in the
    Y coordinate).'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`axis` 定义了相对于父框架的关节旋转轴。这里，`<axis xyz="0 1 0" />` 表示旋转轴是 Y（Y 坐标中的值 1）。'
- en: 'The XML description for the left wheel is almost identical. The only change
    is the position of the joint at Y = 0.30 m (`<origin xyz="0 0.30 0" ... />` ),
    with an opposite sign to that of the right wheel, that is, `<origin xyz="0 -0.30
    0" ... />`:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 左轮的 XML 描述几乎与右轮相同。唯一的区别是关节在 Y = 0.30 m 的位置（`<origin xyz="0 0.30 0" ... />`），与右轮的符号相反，即
    `<origin xyz="0 -0.30 0" ... />`：
- en: '[PRE9]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the next section, you are going to learn how to visualize the URDF description
    in RViz, the ROS visualization tool.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，你将学习如何在 RViz 中可视化 URDF 描述，RViz 是 ROS 的可视化工具。
- en: Inspecting the GoPiGo3 model in ROS with RViz
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RViz 检查 ROS 中的 GoPiGo3 模型
- en: Now, it's time to start working with ROS! You are going to discover `roslaunch`,
    the ROS command that allows us to launch several nodes in one shot, avoiding the
    need to open separate Terminals, as we did in the previous chapter.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候开始使用 ROS 进行工作了！你将发现 `roslaunch`，这是 ROS 命令，允许我们一次性启动多个节点，避免了像上一章那样需要打开单独的终端的需求。
- en: 'Given that you already cloned the code repository of this book, the files that
    we will deal with are inside the `Chapter4_RViz_basics` folder of the repository,
    and all of them are part of the `rviz_basics` ROS package, as defined within `package.xml`. The
    file structure of this chapter can be seen in the following screenshot of the
    RoboWare Studio IDE:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您已经克隆了本书的代码仓库，我们将处理的文件位于仓库的 `Chapter4_RViz_basics` 文件夹中，并且它们都是 `rviz_basics`
    ROS 软件包的一部分，如 `package.xml` 中定义的那样。本章的文件结构可以在以下 RoboWare Studio IDE 截图中看到：
- en: '![](img/c8bda82b-a756-4ca2-8b8a-7ea6ba8f5e21.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c8bda82b-a756-4ca2-8b8a-7ea6ba8f5e21.png)'
- en: 'You can obtain this tree structure in the Terminal by using the `tree` bash
    command:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在终端中使用 `tree` bash 命令获取此树状结构：
- en: '[PRE10]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Bear in mind that it does not come with Ubuntu by default and that you may
    need to install it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，它默认不包含在 Ubuntu 中，您可能需要安装它：
- en: '[PRE11]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This will result in the following output:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This tree organizes the files into a variety of folders, depending on the types
    of files:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此树状结构根据文件类型将文件组织到各种文件夹中：
- en: '`./launch` groups the files with the `*.launch` extension, that is, the different
    robot configurations and packages that will be used in the runtime environment.
    Each launch file corresponds to a specific run''s setup.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./launch` 将具有 `*.launch` 扩展名的文件分组，即将在运行时环境中使用的不同机器人配置和软件包。每个启动文件对应于特定运行的设置。'
- en: '`./rviz` stores the files of specific RViz configurations, one file for each
    possible configuration.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./rviz` 存储特定 RViz 配置的文件，每个可能的配置一个文件。'
- en: '`./urdf` contains the XML URDF file of the robot model we described previously.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`./urdf` 包含我们之前描述的机器人模型的 XML URDF 文件。'
- en: 'Make sure this folder is in your workspace and build it with `catkin` so that
    ROS is aware of your new package:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 确保此文件夹位于您的工区内，并使用 `catkin` 构建它，以便 ROS 能够识别您的新软件包：
- en: '[PRE13]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In [Chapter 3](f3ecc0de-28c4-4140-9a9c-ed351c68d121.xhtml), *Getting Started
    with ROS*, in the *Using Roboware – creating a workspace and building it* section,
    we explained how to do these operations in the Roboware IDE. Take a look at that
    chapter and section if you prefer to use a desktop application.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [第 3 章](f3ecc0de-28c4-4140-9a9c-ed351c68d121.xhtml) 的 *ROS 入门* 部分的 *使用 Roboware
    – 创建工作空间并构建它* 小节中，我们解释了如何在 Roboware IDE 中执行这些操作。如果您更喜欢使用桌面应用程序，请查看该章节和该小节。
- en: 'Finally, you can execute `roslaunch` from a Terminal with the following snippet:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以从终端使用以下片段执行 `roslaunch`：
- en: '[PRE14]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The RViz window will launch and you will see a simplified GoPiGo3 model, as
    follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: RViz 窗口将启动，您将看到一个简化的 GoPiGo3 模型，如下所示：
- en: '![](img/f2d0c177-822f-472a-b842-13fe34a0e02b.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f2d0c177-822f-472a-b842-13fe34a0e02b.png)'
- en: You can inspect the model by rotating it with the mouse while clicking the left
    button, and zoom in/zoom out by using the mouse wheel or, alternatively, clicking
    the right button and moving the mouse forward (zoom in) or backward (zoom out).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过旋转鼠标并单击左键来检查模型，并通过使用鼠标滚轮或单击右键并向前（放大）或向后（缩小）移动鼠标来放大/缩小。
- en: 'The left pane of RViz contains two items that are of interest to us. Expand
    them with a mouse click to inspect them:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: RViz 的左侧面板包含两个对我们感兴趣的项目。用鼠标单击展开以检查它们：
- en: '**RobotModel**: Where you can use the ticks to visualize what you need. The
    items under Links allow us to access individual parts of the GoPiGo URDF model: `base_link`
    (robot body), `left_wheel`, and `right_wheel`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**RobotModel**：您可以使用刻度来可视化所需的内容。在“链接”下的项目允许我们访问 GoPiGo URDF 模型的各个部分：`base_link`（机器人本体）、`left_wheel`
    和 `right_wheel`。'
- en: '**TF**: which provides access to the multiple coordinate frames. In our case,
    there is one frame for each of the parts of GoPiGo3 and one for each of the joints.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TF**：它提供了访问多个坐标系框架的权限。在我们的案例中，GoPiGo3 的每个部分都有一个框架，每个关节也有一个框架。'
- en: Next, we'll look at the `roslaunch` command.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将查看 `roslaunch` 命令。
- en: Understanding the roslaunch command
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 roslaunch 命令
- en: 'Let''s go one step back and use a minimal launch file to understand the syntax
    of these kinds of scripts:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们退一步，使用一个最小的启动文件来理解这些脚本的语言法：
- en: '[PRE15]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'As we saw with `rosrun`, the structure of the ROS command is very similar:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在 `rosrun` 中所看到的，ROS 命令的结构非常相似：
- en: First is the command name itself, `roslaunch`.
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是命令名称本身，`roslaunch`。
- en: Second is the package name, `rviz_basics`.
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是软件包名称，`rviz_basics`。
- en: The third is the script we will execute, `gopigoMinimal_rviz_simple.launch`.
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个是我们将要执行的脚本，`gopigoMinimal_rviz_simple.launch`。
- en: 'The content of the `gopigoMinimal_rviz_simple.launch` file looks like this:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`gopigoMinimal_rviz_simple.launch` 文件的内容如下：'
- en: '[PRE16]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The syntax, in XML format, should be familiar to you. In this file, there are
    three types of tags:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 语法，以 XML 格式，应该对你来说很熟悉。在这个文件中，有三种类型的标签：
- en: '`<launch> </launch>`: Delimits the block of lines that are part of the `roslaunch`
    description.'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<launch> </launch>`: 定义了属于 `roslaunch` 描述的行块。'
- en: '`<node />`: This is the sentence that''s used to execute a ROS node. It is
    equivalent to the `rosrun` command that we explained in the previous chapter.
    Due to this, the equivalent command to a `<node />` tagged line is as follows:'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<node />`: 这是用来执行 ROS 节点的句子。它等同于我们在上一章中解释的 `rosrun` 命令。因此，与 `<node />` 标签行等效的命令如下：'
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can easily infer that the `pkg` attribute of the `<node>` tag is the package
    name and that the attribute type refers to the script that contains the code of
    this node.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以很容易地推断出 `<node>` 标签的 `pkg` 属性是包名，而属性类型指的是包含此节点代码的脚本。
- en: '`<param />` stands for parameter and is a new ROS concept. It contains a value
    that is stored in the ROS parameter server that you can visualize as the place
    where the robot''s characterization is stored. A whole set of parameters defines
    a specific robot configuration. The ROS parameter server, as explained in the
    ROS official documentation ([http://wiki.ros.org/Parameter%20Server](http://wiki.ros.org/Parameter%20Server)),
    is as follows:'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<param />` 代表参数，是 ROS 中的一个新概念。它包含一个存储在 ROS 参数服务器中的值，你可以将其视为存储机器人特征的地方。一组参数定义了特定的机器人配置。如
    ROS 官方文档（[http://wiki.ros.org/Parameter%20Server](http://wiki.ros.org/Parameter%20Server)）中所述，ROS
    参数服务器如下：'
- en: '"*It is a shared, multi-variate dictionary that is accessible via network APIs.
    Nodes use this server to store and retrieve parameters at runtime. As it is not
    designed for high performance, it is best used for static, non-binary data such
    as configuration parameters.*"'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '"*这是一个可以通过网络 API 访问的共享、多变量字典。节点使用此服务器在运行时存储和检索参数。由于它不是为高性能设计的，因此最好用于静态、非二进制数据，如配置参数。*"'
- en: 'In our particular case, we have the following declaration in the launch file:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的特定情况下，我们在启动文件中有以下声明：
- en: '[PRE18]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The `robot_description` parameter is the path where the URDF file is stored.
    You will see that such a path contains an environment variable in the `$(find
    rviz_basics)` textfile attribute. This is a very nice feature that ROS provides
    out of the box so that you don't have to provide absolute or relative paths. The
    `find `command is applied to the `rviz_basics` package and returns the absolute
    path of the package, that is, `~/catkin_ws/src/book/Chapter4_RViz_basics`. The
    `$` sign means the value of, in the same way as you would do for system environment
    variables.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`robot_description` 参数是存储 URDF 文件的路径。你将看到这样的路径在 `$(find rviz_basics)` 文件属性中包含一个环境变量。这是
    ROS 提供的一个非常好的功能，这样你就不必提供绝对或相对路径。`find` 命令应用于 `rviz_basics` 包，并返回包的绝对路径，即 `~/catkin_ws/src/book/Chapter4_RViz_basics`。`$`
    符号表示与系统环境变量相同的值。'
- en: Using Roboware to execute a launch file
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Roboware 执行启动文件
- en: 'What you did using the `$ roslaunch **rviz_basics** gopigoMinimal_rviz_simple.launch` command can
    be done in the **Roboware** IDE by just placing it on top of the file, right-clicking
    the mouse to show the contextual menu, and selecting the first item, that is, Run
    Launch File:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `roslaunch **rviz_basics** gopigoMinimal_rviz_simple.launch` 命令所做的工作，可以在
    **Roboware** IDE 中通过将其放置在文件顶部，右键单击鼠标以显示上下文菜单，并选择第一个项目，即运行启动文件来完成：
- en: '![](img/775f22fa-eba6-4e6c-9114-4d10795df49b.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/775f22fa-eba6-4e6c-9114-4d10795df49b.png)'
- en: In the following section, we are going to execute the other launch file, `gopigoMinimal_rviz_simple.launch`,
    which introduces more advanced features. Prior to that, close any open RViz windows
    or hit *Ctrl* + *C* in the Terminal to shut down the running ROS processes.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将执行另一个启动文件，`gopigoMinimal_rviz_simple.launch`，它引入了更多高级功能。在此之前，请关闭任何打开的
    RViz 窗口或在终端中按 *Ctrl* + *C* 以关闭正在运行的 ROS 进程。
- en: Controlling the GoPiGo3 robot's wheels from RViz
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 RViz 控制 GoPiGo3 机器人的轮子
- en: 'The complete version of the robot can be launched with the following command:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用以下命令启动机器人的完整版本：
- en: '[PRE19]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'What we are doing here is supplying an argument, `gopigoMinimal`, from the
    command line. If you pay attention to the content of the launch file, that is,
    `gopigoMinimal_rviz.launch`, you will find a new section at the beginning of the
    file tagged with `<arg  />`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里所做的是从命令行提供一个参数，`gopigoMinimal`。如果你注意查看启动文件的内容，即 `gopigoMinimal_rviz.launch`，你会在文件开头找到一个带有
    `<arg />` 标签的新部分：
- en: '[PRE20]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The values that have been tagged as arguments can be passed from the command
    line by simply adding the argument name, the `:=` sign, and its value after `<filename>.launch`:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 被标记为参数的值可以通过在 `<filename>.launch` 后简单添加参数名称、`:=` 符号和其值从命令行传递：
- en: '[PRE21]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In the `<arg />` tag, you can provide a default value with a default attribute.
    In our specific case, we wouldn''t have needed to add the argument value to the
    `roslaunch` command because the value is the default. Therefore, the result is
    exactly the same as if you had written the following:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<arg />` 标签中，你可以使用默认属性提供一个默认值。在我们这个特定情况下，我们不需要将参数值添加到 `roslaunch` 命令中，因为值是默认的。因此，结果是与你写下以下内容完全相同：
- en: '[PRE22]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'In the launch file, there is a second optional argument, `gui`:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动文件中，有一个可选的第二个参数，`gui`：
- en: '[PRE23]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It is a Boolean value and the default value is `False`, that is, nothing different
    happens. Now, let''s say you execute the command while specifying it to be `True`:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个布尔值，默认值是 `False`，也就是说，不会发生任何不同的事情。现在，假设你执行命令时指定它为 `True`：
- en: '[PRE24]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'If you do this, you will see an additional window to the side of RViz. The
    exposed GUI allows you to rotate each of the wheels independently with sliders:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你这样做，你将在 RViz 旁边看到一个额外的窗口。暴露的 GUI 允许你使用滑块独立旋转每个轮子：
- en: '![](img/b3442b2d-07e9-42b6-a6fe-4de066be8cec.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b3442b2d-07e9-42b6-a6fe-4de066be8cec.png)'
- en: This interactive functionality is part of the `joint_state_publisher` package
    ([http://wiki.ros.org/joint_state_publisher](http://wiki.ros.org/joint_state_publisher)),
    whose `joint_state_publisher` node is invoked from the launch file with the `gui:=True` argument.
    We are going to explain this feature in the next section.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这个交互式功能是 `joint_state_publisher` 包的一部分 ([http://wiki.ros.org/joint_state_publisher](http://wiki.ros.org/joint_state_publisher))，其
    `joint_state_publisher` 节点通过启动文件使用 `gui:=True` 参数调用。我们将在下一节中解释这个功能。
- en: Using the joint_state_publisher package
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 joint_state_publisher 包
- en: 'The section of the launch file that allows us to interactively rotate the wheels
    using a GUI is as follows:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 启动文件中允许我们使用 GUI 交互式旋转轮子的部分如下：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The `joint_state_publisher` node exposes the `/use_gui` parameter to decide
    whether it should show the `joint_state_publisher` window. If it''s set to `True`,
    the window is active. If it is, we pass the desired value as a parameter to the
    node via the `gui` argument that''s defined in the launch file:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`joint_state_publisher` 节点公开了 `/use_gui` 参数来决定是否应该显示 `joint_state_publisher`
    窗口。如果设置为 `True`，则窗口处于活动状态。如果是这样，我们通过在启动文件中定义的 `gui` 参数将期望的值作为参数传递给节点：'
- en: '[PRE26]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Remember the `roslaunch` command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 记住 `roslaunch` 命令：
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `gui` argument is set to `True`. The `/use_gui` parameter value of `joint_state_publisher`
    is then set to the value of the `gui` argument, as expressed with the `<param
    name="/use_gui" value="$(arg gui)"/>` tag inside the `gopigoMinimal_rviz.launch`
    file.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`gui` 参数设置为 `True`。然后，`joint_state_publisher` 的 `/use_gui` 参数值被设置为 `gui` 参数的值，正如在
    `gopigoMinimal_rviz.launch` 文件中的 `<param name="/use_gui" value="$(arg gui)"/>`
    标签所表达的那样。'
- en: 'The `joint_state_publisher` node launches the widget that allows to interactively
    rotate each wheel. Finally, issue `rqt_graph` from a Terminal to watch the ROS
    graph:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`joint_state_publisher` 节点启动了一个小部件，允许你交互式地旋转每个轮子。最后，从终端运行 `rqt_graph` 来查看 ROS
    图：'
- en: '![](img/5876be82-f06a-4679-8ad9-e58a665a49bd.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/5876be82-f06a-4679-8ad9-e58a665a49bd.png)'
- en: The `/joint_states` topic is the one that we modify when moving the sliders
    in the window.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`/joint_states` 主题是我们移动窗口中滑块时修改的主题。'
- en: Robot frames of reference in the URDF model
  id: totrans-183
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: URDF 模型中的机器人参考框架
- en: 'It is very important to understand how to place the different reference frames
    you will use for your robot. First, you have to decide where the `<joint>` elements
    are located in the space. In our case, we have two: one for the right wheel and
    one for the left wheel. Let''s look at the one for the right wheel first:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 理解如何放置你将用于机器人的不同参考框架非常重要。首先，你必须决定 `<joint>` 元素在空间中的位置。在我们的例子中，我们有两个：一个用于右轮，一个用于左轮。让我们先看看右轮的配置：
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Now, let''s look at the one for the left wheel:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看左轮的配置：
- en: '[PRE29]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Here, you can see that the `<origin>` tags specify the locations:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你可以看到 `<origin>` 标签指定了位置：
- en: The right joint origin is -0.30 m along the *y* ground axis (green axis).
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 右关节原点沿 *y* 地面轴为 -0.30 m（绿色轴）。
- en: The left joint origin is +0.30 m along the *y* ground axis.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 左关节原点沿 *y* 地面轴为 +0.30 m。
- en: As in both cases, regarding the `rpy="0 0 0"` attribute, there is no rotation
    and both coordinate frames are parallel to that of the coordinate frame of the
    ground. We know that both `<joint>` tags are relative to the ground because both
    have `base_link` as the parent link, and you know that the first link of our model, `base_link`,
    is the absolute reference for the robot's overall position and orientation.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两种情况下，关于 `rpy="0 0 0"` 属性，没有旋转，并且两个坐标框架都与地面的坐标框架平行。我们知道这两个 `<joint>` 标签相对于地面，因为它们都有
    `base_link` 作为父链接，而且你知道我们模型的第一个链接，`base_link`，是机器人整体位置和朝向的绝对参考。
- en: In general, `<origin>` is the transform from the parent link to the child link.
    The joint is located at the origin of the child link. The tag `<axis xyz="0 1
    0">` specifies the rotation axis. In this case it is `y` axis, since it has a
    value of `1`, while `x` and `z` have `0` values.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`<origin>` 是从父链接到子链接的变换。关节位于子链接的原点。`<axis xyz="0 1 0">` 标签指定旋转轴。在这种情况下，它是
    `y` 轴，因为它有 `1` 的值，而 `x` 和 `z` 的值是 `0`。
- en: 'The frames you can see in the following screenshot are the respective ones
    for `base_link`, `right_wheel`, and `left_wheel`. They are specified inside the
    `<visual>` tag of each link. In these three cases, in the URDF file, you will
    see that they follow the following pattern:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的截图中，您可以看到的是 `base_link`、`right_wheel` 和 `left_wheel` 的相应框架。它们位于每个链接的 `<visual>`
    标签内。在这三个案例中，在 URDF 文件中，您将看到它们遵循以下模式：
- en: '[PRE30]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '`xyz="0 0 0"` means that they coincide with the joint reference frame:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`xyz="0 0 0"` 表示它们与关节参考框架重合：'
- en: '![](img/54898fed-3237-4ceb-b6f5-2de758016944.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/54898fed-3237-4ceb-b6f5-2de758016944.png)'
- en: 'In the case of the wheels, we have the following:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在轮子的例子中，我们有以下情况：
- en: '[PRE31]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 1.570795 = pi/2 = 90° is the rotation around the *x* axis (red). This is what
    ensures that the cylinders shaping the wheels are oriented vertically.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 1.570795 = π/2 = 90° 是绕 *x* 轴（红色）的旋转。这确保了形成轮子的圆柱体是垂直朝向的。
- en: Using RViz to check the model while building
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 RViz 在构建模型时进行检查
- en: 'Taking into account all the concepts we have introduced about URDF, we can
    use the RViz tool to assist us while building the robot model. Some checks that
    it can provide are as follows:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到我们关于 URDF 所介绍的所有概念，我们可以使用 RViz 工具在构建机器人模型时提供帮助。它可以提供的检查如下：
- en: The total size of the robot has to match the dimensions of the actual robot.
    As you build the model part by part, if you make a mistake regarding a part's
    dimension, an error will arise when you measure the total size (length, width,
    and height). You can check this by using the measure tool in the RViz toolbar.
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 机器人的总体尺寸必须与实际机器人的尺寸相匹配。当您部分部分地构建模型时，如果有关部件尺寸的任何错误，当您测量总体尺寸（长度、宽度和高度）时将出现错误。您可以通过使用
    RViz 工具栏中的测量工具来检查这一点。
- en: You can also visually check for possible interference between robot parts, especially
    between the ones that are adjacent and move relative to each other (in respect
    to one another).
  id: totrans-203
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您还可以通过视觉检查机器人部件之间可能存在的干扰，特别是那些相邻且相对于彼此移动的部件（相对于彼此）。
- en: The orientation of the reference frames.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参考坐标系的朝向。
- en: You can visualize the parts that are hidden by others by unchecking the corresponding
    link in RViz or by changing the `<color>` tag in order to apply transparency effects.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以通过在 RViz 中取消选中相应的链接或更改 `<color>` 标签来应用透明效果，从而可视化被其他部分隐藏的部分。
- en: 'In the following diagram, you can see that we have extracted a top view from
    RViz and used transparency to check that all the parts are aligned and relative
    to each other:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的图中，您可以看到我们已从 RViz 中提取了俯视图，并使用透明度检查所有部件是否对齐以及它们之间的相对位置：
- en: '![](img/4e1d9b85-0cef-4751-985b-3b775d42d89e.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/4e1d9b85-0cef-4751-985b-3b775d42d89e.png)'
- en: This transparency allows us to check that the caster position is right in the
    middle of `base_link`. Furthermore, the wheels do not interfere with `base_link`,
    and their rotation axes are coaxial.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这种透明度使我们能够检查滑轮的位置是否正好位于 `base_link` 的中间。此外，轮子不会与 `base_link` 发生干扰，它们的旋转轴是同轴的。
- en: Changing the aspect of the model in the RViz window
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 RViz 窗口中更改模型的外观
- en: 'To control the visual aspect of your model in RViz, you can modify some of
    the parameters in the Displays window, as shown in the following screenshot:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在 RViz 中控制模型的可视化效果，您可以通过显示窗口中的一些参数进行修改，如下面的截图所示：
- en: '![](img/ed9b7538-88b6-4170-a59b-90aa0f70c614.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ed9b7538-88b6-4170-a59b-90aa0f70c614.png)'
- en: 'We have marked the basic changes we''ve made for this chapter in gray:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用灰色标记了本章中我们所做的基本更改：
- en: '**Alpha**: This parameter controls the level of opacity of the whole model.
    The value `1` corresponds to its opaque appearance, while `0` is fully transparent,
    that is, not visible. There is also an Alpha parameter for each link to control
    the individual opacity of a single part (under the Links subtree, expand to access
    it).'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Alpha**：此参数控制整个模型的透明度级别。值`1`对应不透明的外观，而`0`是完全透明的，即不可见。每个链接也有一个Alpha参数来控制单个部分的透明度（在“链接”子树下展开以访问它）。'
- en: '**Show Names**: If ticked, the name of the links will be shown on the screen.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示名称**：如果勾选，链接的名称将在屏幕上显示。'
- en: '**Show Axes**: If ticked, it will show the frame of reference of each link.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示轴**：如果勾选，它将显示每个链接的参考框架。'
- en: '**Show Arrows**: If ticked, it will show the direction of each joint.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**显示箭头**：如果勾选，它将显示每个关节的方向。'
- en: '**Marker Scale**: The default is `1`. Reduce its value so that words are smaller
    on the screen.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标记比例**：默认值为`1`。减小其值，使屏幕上的文字更小。'
- en: To save this set of parameters, go to the File item in the top menu and select
    Save Config As. Here, you specify the name of the file with the `.rviz` extension,
    which is where your custom settings will be saved.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 要保存此组参数，请转到顶部菜单中的“文件”项并选择“另存为配置”。在此，您指定具有`.rviz`扩展名的文件名，您的自定义设置将保存在那里。
- en: Be aware that within the same File menu, you have the Save Image option, which
    will produce a screenshot of the current RViz window.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在同一个“文件”菜单中，您还有“保存图像”选项，这将生成当前RViz窗口的截图。
- en: Helpful ROS tools for checking purposes
  id: totrans-220
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的ROS检查工具
- en: 'Finally, you should know that there are two helpful ROS tools if you want to
    make some checks:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您应该知道，如果您想进行一些检查，有两个有用的ROS工具：
- en: '`check_urdf` attempts to parse a URDF file in order to verify the kinematic
    chain:'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`check_urdf`尝试解析URDF文件以验证运动链：'
- en: '[PRE32]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `roscd` command changes the prompt to the path of the ROS package whose
    name you are indicating as an argument, that is, `rviz_basics`. The output is
    as follows, where the current folder is the `rviz_basics` path, as requested,
    that is, `~/catkin_ws/src/CH4_RVIZ_BASICS` before the `$` sign:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`roscd`命令将提示更改为您作为参数指示的ROS包的路径，即`rviz_basics`。输出如下，其中当前文件夹是请求的`rviz_basics`路径，即`$`符号之前，`~/catkin_ws/src/CH4_RVIZ_BASICS`：'
- en: '[PRE33]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Everything is fine!
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 一切正常！
- en: '`rqt_tf_tree` allows us to visualize the `tf` information in the GUI environment,
    like so:'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rqt_tf_tree`允许我们在GUI环境中可视化`tf`信息，如下所示：'
- en: '[PRE34]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'A window will open, showing this aspect graph:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 将打开一个窗口，显示此方面图：
- en: '![](img/ef0c195a-0be8-4ead-beab-50d9fca391f2.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ef0c195a-0be8-4ead-beab-50d9fca391f2.png)'
- en: The preceding graph tells you that `base_link` (robot body part) and the wheels
    are well connected. The arrows represent the joint elements: `joint_right_wheel`
    and `joint_left_wheel`.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图表告诉您，`base_link`（机器人身体部分）和车轮连接良好。箭头代表关节元素：`joint_right_wheel`和`joint_left_wheel`。
- en: 'Alternatively, you can generate this same output as a PDF file:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以将相同的输出生成为一个PDF文件：
- en: '[PRE35]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Then, you can open the created PDF, like so:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以打开创建的PDF文件，如下所示：
- en: '[PRE36]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This second way of doing things is more convenient if you want to share the
    output with colleagues.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想与同事分享输出，这种方式做事情更方便。
- en: Summary
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced two essential elements of ROS. One is the URDF
    format, which is the standard way of describing the virtual model of a robot.
    The other is RViz, the ROS visualization tool, which lets you inspect your model
    while building and check the final result.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了ROS的两个基本元素。一个是URDF格式，这是描述机器人虚拟模型的标准方式。另一个是RViz，ROS可视化工具，它允许您在构建模型时检查模型并检查最终结果。
- en: 'You have learned about these essential elements by looking at GoPiGo3, where
    you created a simplified model that includes its chassis, motors, and wheels.
    We have shown you how to interactively rotate the wheels with a GUI by accessing
    the `joint_states` topic of the `joint_state_publisher` node, which belongs to
    the package with the same name. This package offers a tool for setting and publishing
    joint state values for a given URDF model. In the case of GoPiGo3, we have two
    joints: the left wheel and the right wheel. The caster is the third joint, but
    as it is a freewheel (not driven by a motor), so we don''t need to define it as
    such in the virtual GoPiGo3\. Rigidly attaching it to the robot body is sufficient.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查看GoPiGo3，你已经了解了这些基本元素，在那里你创建了一个包含底盘、电机和轮子的简化模型。我们向你展示了如何通过访问`joint_state_publisher`节点的`joint_states`主题与GUI交互式地旋转轮子，该节点属于同名包。这个包提供了一个工具，用于为给定的URDF模型设置和发布关节状态值。在GoPiGo3的情况下，我们有两个关节：左轮和右轮。万向轮是第三个关节，但由于它是一个自由轮（不是由电机驱动），所以我们不需要在虚拟GoPiGo3中将其定义为这样的关节。将其刚性连接到机器人本体就足够了。
- en: In RViz, we can simulate the kinematics of the robot. In the next chapter, we
    will go one step further and simulate the dynamics. This is something that will
    require us to complete our URDF model with mass and inertia properties, as well
    as specify the rolling resistance in the wheels to reproduce all the forces that
    act on our robot. We will do that with Gazebo, a dynamics simulator that's integrated
    with ROS. With Gazebo, we can also reproduce the physical environment of the robot
    (obstacles, ramps, walls, and more).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在RViz中，我们可以模拟机器人的运动学。在下一章中，我们将更进一步，模拟动力学。这将需要我们完成URDF模型，包括质量和惯性属性，并在轮子中指定滚动阻力，以再现作用在机器人上的所有力。我们将使用Gazebo来完成这项工作，这是一个与ROS集成的动力学模拟器。使用Gazebo，我们还可以再现机器人的物理环境（障碍物、斜坡、墙壁等）。
- en: Questions
  id: totrans-241
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What is the format of the URDF model?
  id: totrans-242
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: URDF模型的格式是什么？
- en: A) It is a text file.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: A) 它是一个文本文件。
- en: B) JSON.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: B) JSON。
- en: C) XML.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: C) XML。
- en: How many links and joints does the URDF model of GoPiGo3 have?
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: GoPiGo3的URDF模型有多少个链接和关节？
- en: A) Four links (robot body, caster, left, and right wheels) and two joints
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: A) 四个链接（机器人本体、万向轮、左轮和右轮）和两个关节
- en: B) Three links (robot body, left, and right wheels) and two joints
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: B) 三个链接（机器人本体、左轮和右轮）和两个关节
- en: C) Three links (robot body, left, and right wheels) and three joints
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: C) 三个链接（机器人本体、左轮和右轮）和三个关节
- en: Which tag in the URDF model can you use to specify the color of a link?
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在URDF模型中，你可以使用哪个标签来指定链接的颜色？
- en: A) `<visual>`
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: A) `<visual>`
- en: B) `<geometry>`
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: B) `<geometry>`
- en: C) **`<material>`**
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: C) **`<material>`**
- en: Is it mandatory to group file types by folders (SRC, URDF, RViz, launch) in
    an ROS package?
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在ROS包中，是否必须按文件夹（SRC、URDF、RViz、launch）分组文件类型？
- en: A) No, the only mandatory condition is to put the package under `~/catkin_ws/src/`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: A) 不，唯一强制条件是将包放在`~/catkin_ws/src/`下。
- en: B) It is only recommended to make a clean package structure.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: B) 只建议创建一个干净的包结构。
- en: C) No, but if you do so, you have to declare the locations in the `package.xml` configuration
    file.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: C) 不，但如果你这样做，你必须在该`package.xml`配置文件中声明位置。
- en: Do you always need to run `roscore` in a Terminal to launch a ROS process?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你是否总是需要在终端中运行`roscore`来启动ROS进程？
- en: A) Yes, because the master node launched by `roscore` is what keeps the communication
    between the nodes of the graph.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: A) 是的，因为由`roscore`启动的主节点是保持图中节点间通信的东西。
- en: B) You can launch the master node implicitly when using `roslaunch`.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: B) 当使用`roslaunch`时，你可以隐式启动主节点。
- en: C) If you have installed the `roscore` package, it is mandatory to run the `roscore`
    process.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: C) 如果你已安装`roscore`包，则必须运行`roscore`进程。
- en: Further reading
  id: totrans-262
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: ROS URDF tutorials: [http://wiki.ros.org/urdf/Tutorials](http://wiki.ros.org/urdf/Tutorials).
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROS URDF教程：[http://wiki.ros.org/urdf/Tutorials](http://wiki.ros.org/urdf/Tutorials).
- en: ROS visualization tutorials: [http://wiki.ros.org/visualization/Tutorials](http://wiki.ros.org/visualization/Tutorials).
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ROS可视化教程：[http://wiki.ros.org/visualization/Tutorials](http://wiki.ros.org/visualization/Tutorials).
- en: '*ROS Robot Programming: A Handbook Written by TurtleBot3 Developers*, YoonSeok
    Pyo, HanCheol Cho, RyuWoon Jung, and TaeHoon Lim (2017), ROBOTIS Co. Ltd, first
    edition: [http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf](http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf).
    Chapter: *ROS Tools: RViz and rqt *and 10.8 *TurtleBot3 Simulation using RViz.*'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*《ROS机器人编程：由TurtleBot3开发者编写的手册》*，YoonSeok Pyo，HanCheol Cho，RyuWoon Jung，和TaeHoon
    Lim（2017），ROBOTIS Co. Ltd，第一版：[http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf](http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf)。章节：*ROS工具：RViz和rqt*以及10.8
    *使用RViz进行TurtleBot3仿真*。'
