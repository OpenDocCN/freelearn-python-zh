- en: Chapter 5. Authenticating Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章. 用户身份验证
- en: In this chapter, we will add user authentication to our site. Being able to
    distinguish one user from another allows us to develop an entirely new class of
    features. For instance, we will see how to restrict access to the create, edit,
    and delete views, preventing anonymous users from tampering with site content.
    We can also display a user's draft posts to them, but hide them from everyone
    else. This chapter will cover the practical aspects of adding an authentication
    layer to the site, and wrap up with a discussion of how to use sessions to track
    anonymous users as well.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将向我们的网站添加用户身份验证。能够区分一个用户和另一个用户使我们能够开发一整套新功能。例如，我们将看到如何限制对创建、编辑和删除视图的访问，防止匿名用户篡改网站内容。我们还可以向用户显示他们的草稿帖子，但对其他人隐藏。本章将涵盖向网站添加身份验证层的实际方面，并以讨论如何使用会话跟踪匿名用户结束。
- en: 'In this chapter we shall:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Create a database model to represent users
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个数据库模型来表示用户
- en: Install Flask-Login and add the LoginManager helper to our site
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装Flask-Login并将LoginManager助手添加到我们的站点
- en: Learn to securely store and validate passwords using cryptographic hash functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何使用加密哈希函数安全存储和验证密码
- en: Build forms and views for logging users in and out of the site
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建用于登录和退出网站的表单和视图
- en: See how to reference the logged-in user in views and templates
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查看如何在视图和模板中引用已登录用户
- en: Limit access to views to logged-in users
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制对已登录用户的视图访问
- en: Add an author foreign key to the Entry model
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向Entry模型添加作者外键
- en: Use the Flask session object to track any visitor to the site
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask会话对象跟踪网站的任何访问者
- en: Creating a user model
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户模型
- en: 'The first step in building our authentication system will be to create a database
    model representing an individual user account. We will store the user''s login
    credentials, along with some additional information such as the user''s display
    name, and their account creation timestamp. Our model will have the following
    fields:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 构建我们的身份验证系统的第一步将是创建一个表示单个用户帐户的数据库模型。我们将存储用户的登录凭据，以及一些额外的信息，如用户的显示名称和他们的帐户创建时间戳。我们的模型将具有以下字段：
- en: '`email` (unique): store the user''s email address and use that for authentication'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`email`（唯一）：存储用户的电子邮件地址，并将其用于身份验证'
- en: '`password_hash`: instead of stringing each user''s password as plaintext, we
    will hash the password using a one-way cryptographic hash function'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`password_hash`: 不是将每个用户的密码作为明文串联起来，而是使用单向加密哈希函数对密码进行哈希处理'
- en: '`name`: the user''s name, so we can display it alongside their blog entries'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 用户的名称，这样我们就可以在他们的博客条目旁边显示它'
- en: '`slug`: A URL-friendly representation of the user''s name, also unique'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slug`: 用户名称的URL友好表示，也是唯一的'
- en: '`active`: Boolean flag indicating whether this account is active. Only active
    users will be able to log into the site'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`active`: 布尔标志，指示此帐户是否处于活动状态。只有活动用户才能登录网站'
- en: '`created_timestamp`: The time this user account was created'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created_timestamp`: 用户帐户创建的时间'
- en: Tip
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If there are other fields you think might be useful, feel free to make your
    own additions to this list.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您认为还有其他字段可能有用，请随意向此列表添加自己的内容。
- en: 'Now that we have our list of fields, let''s create the `model` class. Open
    `models.py` and, below the `Tag` model, add the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了字段列表，让我们创建`model`类。打开`models.py`，在`Tag`模型下面，添加以下代码：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you''ll recall from [Chapter 2](ch02.html "Chapter 2. Relational Databases
    with SQLAlchemy"), *Relational Databases with SQLAlchemy*, we need to create a
    migration in order to add this table to our database. From the command line, we
    will use the `manage.py` helper to introspect our models and generate the migration
    script:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在[第2章](ch02.html "第2章. 使用SQLAlchemy的关系数据库")中所记得的，*使用SQLAlchemy的关系数据库*，我们需要创建一个迁移，以便将这个表添加到我们的数据库中。从命令行，我们将使用`manage.py`助手来审查我们的模型并生成迁移脚本：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Having generated the migration, we can now run `db upgrade` to make the schema
    changes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 生成迁移后，我们现在可以运行`db upgrade`来进行模式更改：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Now that we have users, the next step will be to allow them to log into the
    site.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了用户，下一步将允许他们登录网站。
- en: Installing Flask-Login
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Flask-Login
- en: 'Flask-Login is a lightweight extension that handles logging users in and out
    of the site. From the project''s documentation, Flask-Login will do the following:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Flask-Login是一个轻量级的扩展，用于处理用户登录和退出网站。根据项目的文档，Flask-Login将执行以下操作：
- en: Log users in and out of the site
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录和退出网站的用户
- en: Restrict views to the logged-in users
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将视图限制为已登录用户
- en: Manage cookies and the "remember me" functionality
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理cookie和“记住我”功能
- en: Help protect user session cookies from being stolen
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助保护用户会话cookie免受盗窃
- en: 'On the other hand, Flask-Login will not do the following:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Flask-Login不会做以下事情：
- en: Make any decisions about the storage of user accounts
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对用户帐户的存储做出任何决定
- en: Manage usernames, passwords, OpenIDs, or any other form of credentials
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理用户名、密码、OpenID或任何其他形式的凭据
- en: Handle tiered permissions or anything beyond logged in or logged out
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理分层权限或任何超出已登录或已注销的内容
- en: Account registration, activation, or password reminders
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帐户注册、激活或密码提醒
- en: The takeaway from these lists is that Flask-Login can best be thought of as
    a session manager. It simply manages user sessions and lets us know which user
    is making a request, and whether that user is logged in or not.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从这些列表中得出的结论是，Flask-Login最好被认为是一个会话管理器。它只是管理用户会话，并让我们知道哪个用户正在发出请求，以及该用户是否已登录。
- en: 'Let''s get started. Use `pip` to install Flask-Login:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始吧。使用`pip`安装Flask-Login：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In order to start using the extension in our app, we will create an instance
    of the `LoginManager` class, which is provided by Flask-Login. In addition to
    creating the `LoginManager` object, we will add a signal handler that will run
    before every request. This signal handler will retrieve the currently logged-in
    user and store it on a special object named `g`. In Flask, the `g` object can
    be used to store arbitrary values per-request.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了开始在我们的应用程序中使用这个扩展，我们将创建一个`LoginManager`类的实例，这是由Flask-Login提供的。除了创建`LoginManager`对象之外，我们还将添加一个信号处理程序，该处理程序将在每个请求之前运行。这个信号处理程序将检索当前登录的用户并将其存储在一个名为`g`的特殊对象上。在Flask中，`g`对象可以用来存储每个请求的任意值。
- en: 'Add the following lines of code to `app.py`. The imports go at the top of the
    module, and the rest goes at the end:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码添加到`app.py`。导入放在模块的顶部，其余部分放在末尾：
- en: '[PRE4]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now that we have created our `login_manager` and added a signal handler to load
    the current user, we need to tell Flask-Login how to determine which user is logged
    in. The way Flask-Login determines this is by storing the current user's ID in
    the session. Our user loader will accept the ID that was stored in the session
    and return a `User` object from the database.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了我们的`login_manager`并添加了一个信号处理程序来加载当前用户，我们需要告诉Flask-Login如何确定哪个用户已登录。Flask-Login确定这一点的方式是将当前用户的ID存储在会话中。我们的用户加载器将接受存储在会话中的ID并从数据库返回一个`User`对象。
- en: 'Open `models.py` and add the following lines of code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`models.py`并添加以下代码行：
- en: '[PRE5]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now Flask-Login knows how to convert a user ID into a User object, and that
    user will be available to us as `g.user`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Flask-Login知道如何将用户ID转换为User对象，并且该用户将作为`g.user`对我们可用。
- en: Implementing the Flask-Login interface
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现Flask-Login接口
- en: In order for Flask-Login to work with our `User` model, we need to implement
    a handful of special methods that comprise the Flask-Login interface. By implementing
    these methods, Flask-Login will be able to take a `User` object and determine
    whether they can log into the site.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让Flask-Login与我们的`User`模型一起工作，我们需要实现一些特殊方法，这些方法构成了Flask-Login接口。通过实现这些方法，Flask-Login将能够接受一个`User`对象并确定他们是否可以登录网站。
- en: 'Open `models.py` and add the following methods to the `User` class:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`models.py`并向`User`类添加以下方法：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The first method, `get_id()`, instructs Flask-Login how to determine the ID
    of a user, which will then be stored in the session. It is the inverse of our
    User Loader function, which gives us an ID and asks us to return a `User` object.
    The rest of the methods tell Flask-Login that `User` objects from the database
    are not anonymous, and should be allowed to login only if the active attribute
    is set to `True`. Recall that Flask-Login knows nothing about our `User` model
    or our database, so we have to be very explicit in what we tell it.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个方法`get_id()`指示Flask-Login如何确定用户的ID，然后将其存储在会话中。它是我们用户加载器函数的反向，它给我们一个ID并要求我们返回一个`User`对象。其余的方法告诉Flask-Login，数据库中的`User`对象不是匿名的，并且只有在`active`属性设置为`True`时才允许登录。请记住，Flask-Login对我们的`User`模型或数据库一无所知，因此我们必须非常明确地告诉它。
- en: Now that we have configured Flask-Login, let's add the code that will allow
    us to create some users.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经配置了Flask-Login，让我们添加一些代码，以便我们可以创建一些用户。
- en: Creating user objects
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建用户对象
- en: 'Creating a new user is just like creating an entry or tag with one exception:
    we need to securely hash the user''s password. You should never store passwords
    as plaintext and, due to the ever-increasing sophistication of hackers, it is
    best to use a strong cryptographic hash function. We will be using the **Flask-Bcrypt**
    extension to hash and check our passwords, so let''s install the extension using
    `pip`:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新用户就像创建条目或标签一样，只有一个例外：我们需要安全地对用户的密码进行哈希处理。您永远不应该以明文形式存储密码，并且由于黑客的技术日益复杂，最好使用强大的加密哈希函数。我们将使用**Flask-Bcrypt**扩展来对我们的密码进行哈希处理和检查，因此让我们使用`pip`安装这个扩展：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Open `app.py` and add the following code to register the extension with our
    app:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`app.py`并添加以下代码来注册扩展到我们的应用程序：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now let''s add some methods to the `User` object that will make creating and
    checking passwords straightforward:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为`User`对象添加一些方法，以便创建和检查密码变得简单：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `make_password` method accepts a plaintext password and returns the hashed
    version, while the `check_password` method accepts a plaintext password and determines
    whether it matches the hashed version stored in the database. We will not use
    these methods directly, however. Instead, we will create two higher-level methods,
    `create` and `authenticate`. The `create` method will create a new user, automatically
    hashing the password before saving, and the `authenticate` method will retrieve
    a user given a username and password.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '`make_password`方法接受明文密码并返回哈希版本，而`check_password`方法接受明文密码并确定它是否与数据库中存储的哈希版本匹配。然而，我们不会直接使用这些方法。相反，我们将创建两个更高级的方法，`create`和`authenticate`。`create`方法将创建一个新用户，在保存之前自动对密码进行哈希处理，而`authenticate`方法将根据用户名和密码检索用户。'
- en: 'Let''s experiment with these methods by creating a new user. Open up a shell
    and, using the following code as an example, create a user for yourself:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过创建一个新用户来尝试这些方法。打开一个shell，并使用以下代码作为示例，为自己创建一个用户：
- en: '[PRE10]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Now that we have a way to securely store and verify a user's credentials, we
    can commence with building the login and logout views.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有了一种安全地存储和验证用户凭据的方法，我们可以开始构建登录和注销视图了。
- en: Login and logout views
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 登录和注销视图
- en: 'Users will log into our blogging site using their email and password; so, before
    we begin building our actual login view, let''s start with the `LoginForm`. This
    form will accept the `username`, `password`, and will also present a checkbox
    to indicate whether the site should `remember me`. Create a `forms.py` module
    in the `app` directory and add the following code:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将使用他们的电子邮件和密码登录我们的博客网站；因此，在我们开始构建实际的登录视图之前，让我们从`LoginForm`开始。这个表单将接受`用户名`、`密码`，并且还会呈现一个复选框来指示网站是否应该`记住我`。在`app`目录中创建一个`forms.py`模块，并添加以下代码：
- en: '[PRE11]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Tip
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Note that WTForms also provides an e-mail validator. However, as the documentation
    for this validator tells us, it is very primitive and may not capture all edge
    cases as full e-mail validation is actually extremely difficult.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，WTForms还提供了一个电子邮件验证器。但是，正如该验证器的文档所告诉我们的那样，它非常原始，可能无法捕获所有边缘情况，因为完整的电子邮件验证实际上是非常困难的。
- en: 'In order to validate the user''s credentials as part of the normal WTForms
    validation process, we will override the form''s `validate()` method. In the event
    the email is not found or the password does not match, we will display an error
    below the email field. Add the following method to the `LoginForm` class:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在正常的WTForms验证过程中验证用户的凭据，我们将重写表单的`validate()`方法。如果找不到电子邮件或密码不匹配，我们将在电子邮件字段下方显示错误。将以下方法添加到`LoginForm`类：
- en: '[PRE12]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now that our form is ready, let's create the login view. We will instantiate
    the `LoginForm` and validate it on `POST`. In addition, when the user successfully
    authenticates, we will redirect them to a new page.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的表单已经准备好了，让我们创建登录视图。我们将实例化`LoginForm`并在`POST`时对其进行验证。此外，当用户成功验证时，我们将重定向他们到一个新页面。
- en: When a user logs in, it is a good practice to redirect them back to the page
    the user was previously browsing. To accomplish this, we will store the URL for
    the page the user was previously at in a query string value called `next`. If
    a URL is found in this value, we can redirect the user there. If no URL is found,
    the user will get redirected to the homepage by default.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户登录时，将其重定向回用户先前浏览的页面是一个很好的做法。为了实现这一点，我们将在查询字符串值`next`中存储用户先前所在页面的URL。如果在该值中找到了URL，我们可以将用户重定向到那里。如果未找到URL，则用户将默认被重定向到主页。
- en: 'Open `views.py` in the `app` directory and add the following code:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在`app`目录中打开`views.py`并添加以下代码：
- en: '[PRE13]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The magic happens on `POST` after we've successfully validated the form (and
    therefore authenticated the user). We are calling `login_user`, a helper function
    provided by Flask-Login, which handles setting the correct session values. Then
    we set a flash message and send the user on their way.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 魔法发生在我们成功验证表单（因此验证了用户身份）后的`POST`上。我们调用`login_user`，这是Flask-Login提供的一个辅助函数，用于设置正确的会话值。然后我们设置一个闪存消息并将用户送上路。
- en: The login template
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录模板
- en: 'The `login.html` template is straightforward with the exception of one trick,
    one exception. In the form''s action attribute, we are specifying `url_for(''login'')`
    but we are also passing an extra value `next`. This allows us to preserve the
    desired next URL while the user is logging in. Add the following code to `templates/login.html`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`login.html`模板很简单，除了一个技巧，一个例外。在表单的action属性中，我们指定了`url_for(''login'')`，但我们还传递了一个额外的值`next`。这允许我们在用户登录时保留所需的下一个URL。将以下代码添加到`templates/login.html`：'
- en: '[PRE14]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'When you visit the login page, your form will look something like the following
    screenshot:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问登录页面时，您的表单将如下截图所示：
- en: '![The login template](img/1709_05_01.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![登录模板](img/1709_05_01.jpg)'
- en: Logging out
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注销
- en: 'Finally let''s add a view for logging users out of the site. Interestingly,
    no template is needed for this view because users will simply pass through the
    view, being redirected after their session is logged out. Add the following `import`
    statement and logout view code to `views.py`:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最后让我们添加一个视图，用于将用户从网站中注销。有趣的是，此视图不需要模板，因为用户将简单地通过视图，在其会话注销后被重定向。将以下`import`语句和注销视图代码添加到`views.py`：
- en: '[PRE15]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once again, we are accepting a `next` URL as part of the query string, defaulting
    to the homepage if no URL is specified.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，我们接受`next` URL作为查询字符串的一部分，默认为主页，如果未指定URL。
- en: Accessing the current user
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问当前用户
- en: Let's create links to the login and logout views in the navigation bar. To do
    this, we will need to check whether the current user is authenticated. If so,
    we will display a link to the logout view; otherwise, we will display a link to
    log in.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在导航栏中创建登录和注销视图的链接。为此，我们需要检查当前用户是否已经通过身份验证。如果是，我们将显示一个指向注销视图的链接；否则，我们将显示一个登录链接。
- en: As you may recall from earlier in the chapter, we added a signal handler that
    stores the current user as an attribute of the Flask `g` object. We can access
    this object in the template, so we simply need to check, in the template, whether
    `g.user` is authenticated or not.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能还记得本章早些时候所说的，我们添加了一个信号处理程序，将当前用户存储为Flask `g`对象的属性。我们可以在模板中访问这个对象，所以我们只需要在模板中检查`g.user`是否已经通过身份验证。
- en: 'Open `base.html` and make the following additions to the navigation bar:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`base.html`并对导航栏进行以下添加：
- en: '[PRE16]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Note how we are calling the `is_authenticated()` method, which we implemented
    on our `User` model. Flask-Login provides us with a special `AnonymousUserMixin`
    that will be used if no user is currently logged in.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我们如何调用`is_authenticated()`方法，这是我们在`User`模型上实现的。Flask-Login为我们提供了一个特殊的`AnonymousUserMixin`，如果当前没有用户登录，将使用它。
- en: Also note that, in addition to the view name, we are specifying `next=request.path`.
    This works in tandem with our login and logout views, to redirect the user to
    their current page after clicking login or logout.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意的是，除了视图名称，我们还指定了`next=request.path`。这与我们的登录和注销视图配合使用，以便在单击登录或注销后将用户重定向到其当前页面。
- en: Restricting access to views
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制对视图的访问
- en: At the moment, all of our blog views are currently unprotected and available
    to anyone who wants to visit them. In order to prevent a malicious user from trashing
    our entries, let's add some protection to the views that actually modify data.
    Flask-Login provides a special decorator `login_required` that we will use to
    protect views that should require an authenticated user.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们所有的博客视图都是不受保护的，任何人都可以访问它们。为了防止恶意用户破坏我们的条目，让我们为实际修改数据的视图添加一些保护。Flask-Login提供了一个特殊的装饰器`login_required`，我们将使用它来保护应该需要经过身份验证的视图。
- en: 'Let''s go through the entries blueprint and protect all views that modify data.
    Start by adding the following import at the top of the `blueprint.py` module:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们浏览条目蓝图并保护所有修改数据的视图。首先在`blueprint.py`模块的顶部添加以下导入：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '`login_required` is a decorator, just like `app.route`, so we will simply wrap
    the views that we wish to protect. For example, this is how you would protect
    the `image_upload` view:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`login_required`是一个装饰器，就像`app.route`一样，所以我们只需包装我们希望保护的视图。例如，这是如何保护`image_upload`视图的方法：'
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Go through the module and add the `login_required` decorator to the following
    views, taking care to add it below the route decorator:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览模块，并在以下视图中添加`login_required`装饰器，注意要在路由装饰器下面添加：
- en: '`image_upload`'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_upload`'
- en: '`create`'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`create`'
- en: '`edit`'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`'
- en: '`delete`'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`删除`'
- en: When an anonymous user attempts to access these views, they will be redirected
    to the `login` view. As an added bonus, Flask-Login will automatically handle
    specifying the next parameter when redirecting to the `login` view, so users will
    be returned to the page they were attempting to access.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 当匿名用户尝试访问这些视图时，他们将被重定向到`login`视图。作为额外的奖励，Flask-Login将在重定向到`login`视图时自动处理指定下一个参数，因此用户将返回到他们试图访问的页面。
- en: Storing an entry's author
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 存储条目的作者
- en: 'As you might recall from the spec we created in [Chapter 1](ch01.html "Chapter 1. Creating
    Your First Flask Application"), *Creating your First Flask Application*, our blogging
    site will support multiple authors. When an entry is created, we will store the
    current user in the entry''s author column. In order to store the `User` who authored
    a given `Entry`, we will be creating a *one-to-many* relationship between users
    and entries, such that one user may have many entries:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您可能还记得我们在[第1章](ch01.html "第1章。创建您的第一个Flask应用程序")中创建的规范，*创建您的第一个Flask应用程序*，我们的博客网站将支持多个作者。当创建条目时，我们将把当前用户存储在条目的作者列中。为了存储编写给定`Entry`的`User`，我们将在用户和条目之间创建一个*一对多*的关系，以便一个用户可以有多个条目：
- en: '![Storing an entry''s author](img/1709_05_02.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![存储条目的作者](img/1709_05_02.jpg)'
- en: 'To create a *one-to-many* relationship, we will add a column to the `Entry`
    model that points to a user in the `User` table. This column will be named `author_id`
    and, because it references a `User`, we will make this a foreign key. Open `models.py`
    and make the following modification to the `Entry` model:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建*一对多*的关系，我们将在`Entry`模型中添加一个指向`User`表中用户的列。这个列将被命名为`author_id`，因为它引用了一个`User`，我们将把它设为外键。打开`models.py`并对`Entry`模型进行以下修改：
- en: '[PRE19]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Since we''ve added a new column, we once again need to create a migration.
    From the command line, run `db migrate` and `db upgrade` once more:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们添加了一个新的列，我们需要再次创建一个迁移。从命令行运行`db migrate`和`db upgrade`：
- en: '[PRE20]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Like we did with tags, the final step will be to create a back-reference on
    the User model that will allow us to access a given user's associated `Entry`
    rows. Because a user may have many entries we would like to perform additional
    filtering operations on, we will expose the back-reference as a query, just like
    we did for tag.entries.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们对标签所做的那样，最后一步将是在用户模型上创建一个反向引用，这将允许我们访问特定用户关联的`Entry`行。因为用户可能有很多条目，我们希望对其执行额外的过滤操作，我们将把反向引用暴露为一个查询，就像我们为标签条目所做的那样。
- en: 'In the `User` class, add the following line of code below the `created_timestamp`
    column:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在`User`类中，在`created_timestamp`列下面添加以下代码行：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We now have the ability to store a `User` as the author of a blog entry, and
    the next step will be to populate this column at the time the entry is created.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有能力将`User`作为博客条目的作者存储起来，下一步将是在创建条目时填充这个列。
- en: Note
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'If there are any blog entries in the database, we also need to be sure that
    they are assigned to an author. From the interactive shell, let''s manually update
    the author field on all existing entries:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果数据库中有任何博客条目，我们还需要确保它们被分配给一个作者。从交互式shell中，让我们手动更新所有现有条目上的作者字段：
- en: '[PRE22]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The query will return the number of rows updated, which in this case is the
    number of entries in the database. To save these changes, once again call `commit()`:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询将返回更新的行数，在这种情况下是数据库中的条目数。要保存这些更改，再次调用`commit()`：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Setting the author on blog entries
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置博客条目的作者
- en: Now that we have a column suitable for storing the author of the `Entry`, and
    are able to access the currently logged-in user, we can put that information to
    use by setting the author of an entry at the time it is created. Before each request,
    our signal handler will patch the current user onto the Flask `g` object, and
    since the `create` view is protected by the `login_required` decorator, we know
    that `g.user` will be a `User` from the database.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有一个适合存储`Entry`作者的列，并且能够访问当前登录的用户，我们可以通过在创建条目时设置条目的作者来利用这些信息。在每个请求之前，我们的信号处理程序将把当前用户添加到Flask
    `g`对象上，由于`create`视图受`login_required`装饰器保护，我们知道`g.user`将是来自数据库的`User`。
- en: 'Because we are using the `g object` to access the user, we will need to import
    it, so add the following import statement to the top of the entries blueprint:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们正在使用`g对象`来访问用户，所以我们需要导入它，所以在条目蓝图的顶部添加以下导入语句：
- en: '[PRE24]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In the entries blueprint, we now need to modify the instantiation of the `Entry`
    object to manually set the author attribute. Make the following change to the
    `create` view:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在条目蓝图中，我们现在需要修改`Entry`对象的实例化，手动设置作者属性。对`create`视图进行以下更改：
- en: '[PRE25]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: When you go to create an entry, you will now be saved in the database as the
    author of that entry. Go ahead and try it out.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 当您要创建一个条目时，您现在将被保存在数据库中作为该条目的作者。试一试吧。
- en: Protecting the edit and delete views
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 保护编辑和删除视图
- en: If multiple users are able to log into our site, there's nothing to stop a malicious
    user from editing or even deleting another user's entries. These views are protected
    by the `login_required` decorator, but we need to add some additional code to
    ensure that only the author can edit or delete their own entries.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果多个用户能够登录到我们的网站，没有什么可以阻止恶意用户编辑甚至删除另一个用户的条目。这些视图受`login_required`装饰器保护，但我们需要添加一些额外的代码来确保只有作者可以编辑或删除他们自己的条目。
- en: 'In order to implement this protection cleanly, we will once again refactor
    the helper functions in the entries blueprint. Make the following modifications
    to the entries blueprint:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰地实现此保护，我们将再次重构条目蓝图中的辅助函数。对条目蓝图进行以下修改：
- en: '[PRE26]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We have introduced a new helper function, `filter_status_by_user`. This function
    will ensure that anonymous users cannot see draft entries. Add the following function
    to the entries blueprint below `get_entry_or_404`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们引入了一个新的辅助函数`filter_status_by_user`。此函数将确保匿名用户无法看到草稿条目。在`get_entry_or_404`下方的条目蓝图中添加以下函数：
- en: '[PRE27]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'In order to restrict access to the `edit` and `delete` views, we now only need
    to pass in the current user as the author parameter. Make the following modification
    to the edit and delete views:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 为了限制对`edit`和`delete`视图的访问，我们现在只需要将当前用户作为作者参数传递。对编辑和删除视图进行以下修改：
- en: '[PRE28]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: If you were to attempt to access the `edit` or `delete` view for an entry you
    did not create, you would receive a `404` response.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尝试访问您未创建的条目的`edit`或`delete`视图，您将收到`404`响应。
- en: 'Finally, let''s modify the entry detail template to hide the *Edit* and *Delete*
    links from all users except the entry''s author. In your `entries` app edit the
    template `entries/detail.html`, your code might look something like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们修改条目详细模板，以便除了条目的作者之外，所有用户都无法看到*编辑*和*删除*链接。在您的`entries`应用程序中编辑模板`entries/detail.html`，您的代码可能如下所示：
- en: '[PRE29]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Displaying a user's drafts
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示用户的草稿
- en: 'There is still one slight problem with our entry list: draft entries are displayed
    alongside normal entries. We don''t want to display unfinished entries to just
    anyone, but at the same time it would be helpful for a user to see their own drafts.
    For that reason, we will modify the entry lists and detail to display only public
    entries to everyone but the author of the entry.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的条目列表仍然存在一个小问题：草稿条目显示在普通条目旁边。我们不希望向任何人显示未完成的条目，但同时对于用户来说，看到自己的草稿将是有帮助的。因此，我们将修改条目列表和详细信息，只向条目的作者显示公共条目。
- en: 'Once again we will be modifying the helper functions in the entries blueprint.
    We will first modify the `filter_status_by_user` function to allow logged-in users
    to view their own drafts (but not anyone else''s):'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将再次修改条目蓝图中的辅助函数。我们将首先修改`filter_status_by_user`函数，以允许已登录用户查看自己的草稿（但不是其他人的）：
- en: '[PRE30]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The new query could be parsed as—"Give me all the public entries, or the undeleted
    entries for which I am the author."
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 新的查询可以解析为：“给我所有公共条目，或者我是作者的未删除条目。”
- en: 'Since `get_entry_or_404` is using the `filter_status_by_user` helper already,
    the `detail`, `edit,` and `delete` views are ready to go. We only need to address
    the various list views, which use the `entry_list` helper. Let''s update the `entry_list`
    helper to use the new `filter_status_by_user` helper:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`get_entry_or_404`已经使用了`filter_status_by_user`辅助函数，因此`detail`、`edit`和`delete`视图已经准备就绪。我们只需要处理使用`entry_list`辅助函数的各种列表视图。让我们更新`entry_list`辅助函数以使用新的`filter_status_by_user`辅助函数：
- en: '[PRE31]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: That's all that it takes! I hope this shows how a few helper functions, in the
    right places, can really simplify your life as a developer. Before continuing
    on to the final section, I'd suggest creating one or two users and experimenting
    with the new functionality.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样！我希望这展示了一些辅助函数在正确的位置上是如何真正简化开发者生活的。在继续进行最后一节之前，我建议创建一个或两个用户，并尝试新功能。
- en: If you plan on supporting multiple authors on your blog, you could also add
    an authors' index page (like the tag index), and author detail pages that list
    the entries associated with a given author (`user.entries`).
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您计划在您的博客上支持多个作者，您还可以添加一个作者索引页面（类似于标签索引），以及列出与特定作者相关联的条目的作者详细页面（`user.entries`）。
- en: Sessions
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 会话
- en: As you've worked through this chapter, you may have wondered how Flask-Login
    (and also Flask) are able to determine which user is logged in between requests,
    request after request. Flask-Login does this by storing a user's ID in a special
    object called the session. Sessions utilize cookies to securely store morsels
    of information. When the user makes a request to your Flask application, their
    cookies are sent along with the request, and Flask is able to inspect the cookie
    data and load it into the session object. Similarly, your views can add or modify
    information stored in the session, updating the user's cookies in the process.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 当您通过本章工作时，您可能会想知道Flask-Login（以及Flask）是如何能够在请求之间确定哪个用户已登录的。Flask-Login通过将用户的ID存储在称为会话的特殊对象中来实现这一点。会话利用cookie来安全地存储信息。当用户向您的Flask应用程序发出请求时，他们的cookie将随请求一起发送，Flask能够检查cookie数据并将其加载到会话对象中。同样，您的视图可以添加或修改存储在会话中的信息，从而在此过程中更新用户的cookie。
- en: 'The beauty of Flask''s session object is that it can be used for any visitor
    to the site, whether they are logged in or not. The session can be treated just
    like an ordinary Python dictionary. The following code shows how you might track
    the last page a user visited using the session:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: Flask会话对象的美妙之处在于它可以用于站点的任何访问者，无论他们是否已登录。会话可以像普通的Python字典一样处理。以下代码显示了您如何使用会话跟踪用户访问的最后一个页面：
- en: '[PRE32]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: By default, Flask sessions last only as long as the browser is open. If you
    would like the session to persist, even between restarts, simply set `session.permanent
    = True`.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Flask会话只持续到浏览器关闭。如果您希望会话持久存在，即使在重新启动之间也是如此，只需设置`session.permanent = True`。
- en: Tip
  id: totrans-154
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: Like the `g` object, the `session` object can be accessed directly from the
    template.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 与`g`对象一样，`session`对象可以直接从模板中访问。
- en: As an exercise, try implementing a simple theme chooser for your website. Create
    a view that allows users to pick a color theme, which will be stored in the session.
    Then, in the templates, apply extra CSS rules depending on the user's chosen theme.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 作为练习，尝试为您的网站实现一个简单的主题选择器。创建一个视图，允许用户选择颜色主题，并将其存储在会话中。然后，在模板中，根据用户选择的主题应用额外的CSS规则。
- en: Summary
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: In this chapter, we added user authentication to the blogging app. We created
    a `User` model, which securely stores a user's login credentials in the database,
    then built views for logging users in and out of the site. We added a signal handler
    that runs before every request and retrieves the current user, then learned how
    to use this information in the views and templates. In the second half of the
    chapter, we integrated the `User` model with the Entry model, making our blog
    more secure in the process. The chapter wrapped up with a brief discussion of
    Flask sessions.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们为博客应用程序添加了用户身份验证。我们创建了一个`User`模型，安全地将用户的登录凭据存储在数据库中，然后构建了用于登录和退出站点的视图。我们添加了一个信号处理程序，在每个请求之前运行并检索当前用户，然后学习如何在视图和模板中使用这些信息。在本章的后半部分，我们将`User`模型与Entry模型集成，从而在过程中使我们的博客更加安全。本章以对Flask会话的简要讨论结束。
- en: In the next chapter, we will build an administrative dashboard that will allow
    super-users to perform actions such as creating new users and modifying site content.
    We will also collect and display various site metrics, such as page-views, to
    help visualize what content is driving the most traffic.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将构建一个管理仪表板，允许超级用户执行诸如创建新用户和修改站点内容等操作。我们还将收集和显示各种站点指标，如页面浏览量，以帮助可视化哪些内容驱动了最多的流量。
