- en: Continuous Delivery
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付
- en: In the previous chapters, we worked towards building our application and preparing
    it for the cloud environment. Since our application is stable now and ready for
    its first release, we need to start thinking about the platform (that is, the
    cloud platform) as well as the tools that can help us move our application to
    production.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我们努力构建我们的应用程序，并为云环境做好准备。由于我们的应用程序现在稳定了，准备好进行首次发布，我们需要开始考虑平台（即云平台）以及可以帮助我们将应用程序移至生产环境的工具。
- en: 'This chapter discusses the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论以下主题：
- en: Introduction to continuous integration and continuous delivery
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍持续集成和持续交付
- en: Understanding continuous integration with Jenkins
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Jenkins的持续集成
- en: Evolution of continuous integration and continuous delivery
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成和持续交付的演变
- en: Nowadays, lots of people are talking about **CI** (**continuous integration**)
    and **CD** (**continuous delivery**), and after examining the perspectives of
    different technologists, I believe all have different understandings of CI and
    CD, and there is still some confusion about them. Let's dive deeply into these
    and understand them.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，很多人都在谈论**CI**（持续集成）和**CD**（持续交付），经过审查不同技术人员的观点，我相信每个人对CI和CD都有不同的理解，对它们仍然存在一些困惑。让我们深入了解并理解它们。
- en: In order to understand continuous integration, you need to first understand
    the background to **SDLC** (**system development life cycle**) and the **Agile
    software development** process, which can help during your build and release processes.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解持续集成，你需要先了解**SDLC**（系统开发生命周期）和**敏捷软件开发**过程的背景，这可以帮助你在构建和发布过程中。
- en: Understanding SDLC
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解SDLC
- en: 'SDLC is the process of planning, developing, testing, and deploying your software.
    This process consists of a sequence of phases, and each phase takes the outcome
    from the previous phase to proceed further. The following diagram depicts SDLC:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: SDLC是规划、开发、测试和部署软件的过程。这个过程包括一系列阶段，每个阶段都需要前一个阶段的结果来继续。以下图表描述了SDLC：
- en: '![](img/00106.jpeg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: ！[](img/00106.jpeg)
- en: 'Let''s understand each phase in detail:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细了解每个阶段：
- en: '**Requirement Analysis**: This is the initial phase for problem analysis, where
    business analysts perform requirement analysis, and understand the business needs.
    The requirements can be internal to the organization or external from a customer.
    Requirements include the scope of the problem, which could either be for improving
    the system or building a new one, cost analysis, and project goals.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**需求分析**：这是问题分析的初始阶段，业务分析师进行需求分析，并了解业务需求。需求可以是组织内部的，也可以是来自客户的外部的。需求包括问题的范围，可以是改进系统或构建新系统，成本分析和项目目标。'
- en: '**Design**: In this phase, the design for the implementation of the features
    of the software solution is prepared and approved. This includes process diagrams,
    documentations, layouts, and so on.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计**：在这个阶段，准备和批准软件解决方案特性的设计。这包括流程图、文档、布局等。'
- en: '**Implementation**: In this phase, actual implementation, based on the design,
    is carried out. Usually, developers develop the code depending on the goals defined
    in the design phase.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**实施**：在这个阶段，根据设计进行实际实施。通常，开发人员根据设计阶段定义的目标开发代码。'
- en: '**Testing**: In this phase, the developed code is tested by the **QA** (**quality
    assurance**) team under different scenarios. Each and every module is tested using
    unit testing as well as integration testing. In case of test failure, the developers
    are informed about the bug, and then they are required to fix it.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试**：在这个阶段，开发的代码由**QA**（质量保证）团队在不同的场景下进行测试。每个模块都使用单元测试和集成测试进行测试。如果测试失败，开发人员会被告知bug，然后需要修复。'
- en: '**Deployment**/**Release**: In this phase, the tested feature is moved to production
    for customer review.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**部署**/**发布**：在这个阶段，经过测试的功能被移至生产环境供客户审查。'
- en: '**Evolution**: This phase gets the customer''s review of the developed, tested,
    and published upgrades.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**演进**：这个阶段得到客户对开发、测试和发布的升级的审查。'
- en: The Agile software development process
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷软件开发过程
- en: The Agile software development process is an alternative to the traditional
    software development one. It is more like a process which helps frequent and efficient
    release of production with minimal bugs.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷软件开发过程是传统软件开发的替代方案。它更像是一个帮助频繁和高效地发布生产版本的过程，而且bug很少。
- en: 'The Agile process is based on the following principles:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 敏捷过程基于以下原则：
- en: Continuous delivery of software upgrades and customer feedback at each stage
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件升级和客户反馈的持续交付每个阶段
- en: Additional improvements are welcome at any stage of the development cycle
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发周期的任何阶段都欢迎额外的改进
- en: Stable releases should be frequent (in weeks)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 稳定版本应该频繁发布（每周）
- en: Continuous communication between the business team and the developers
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 业务团队和开发人员之间的持续沟通
- en: Continuous improvement towards technical excellence and good design
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续改进朝着技术卓越和良好设计
- en: Working software is the principal measure of progress
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工作软件是进展的主要衡量标准
- en: Continuous adaptation towards changing circumstances
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持续适应不断变化的情况
- en: How does the Agile software development process work?
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 敏捷软件开发过程是如何工作的？
- en: 'In the Agile software development process, the complete system is divided into
    different phases, all modules or features are delivered in iterations, and cross-functional
    teams from various areas such as planning, unit testing, design, requirement analysis,
    coding, and so on work simultaneously. As a result, every team member is involved
    in the process, and there is no single person sitting idle, whereas, in the traditional
    SDLC, when the software is in the development phase, the remaining teams either
    sit idle or underutilized. All this makes the Agile process more advantageous
    over the traditional mode. The following diagram shows information about the workflow
    of the Agile development process:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在敏捷软件开发过程中，完整系统被划分为不同阶段，所有模块或功能都在迭代中交付，来自不同领域的跨职能团队（如规划、单元测试、设计、需求分析、编码等）同时工作。因此，每个团队成员都参与了这个过程，没有一个人闲着，而在传统的SDLC中，当软件处于开发阶段时，其余团队要么闲置，要么被低效利用。所有这些使得敏捷过程比传统模式更有优势。以下图表显示了敏捷开发过程的工作流程信息：
- en: '![](img/00107.jpeg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00107.jpeg)'
- en: In the preceding diagram, you won't find any requirement analysis or design
    phases, as those are accumulated in high-level planning.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在上图中，您不会找到需求分析或设计阶段，因为这些都在高级规划中累积。
- en: 'The following is the sequence of events in an Agile process:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是敏捷过程中的事件顺序：
- en: We start with initial planning, which gives us the details about the software
    features, and then, the goals are defined in high-level planning.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们从初始规划开始，这为我们提供了关于软件功能的详细信息，然后在高级规划中定义了目标。
- en: Once the goals are set, the developer starts coding for the required feature.
    Once the software upgrade is ready, the testing team (QA) starts executing both
    unit and integration testing.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦目标确定，开发人员就开始为所需功能编写代码。一旦软件升级准备就绪，测试团队（QA）就开始执行单元测试和集成测试。
- en: If any bugs are found, they are fixed immediately, and then the code is delivered
    for client testing (that is, on stage or the pre-production environment). At this
    stage, the code is not released yet.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果发现任何错误，立即修复，然后将代码交付给客户测试（即在阶段或预生产环境）。在这个阶段，代码尚未发布。
- en: If the code passes all client-based testing, which could be UI-based testing,
    then the code is pushed to production; otherwise, it iterates through the same
    cycle again.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果代码通过了所有基于客户的测试，这可能是基于UI的测试，那么代码就会推送到生产环境；否则，它会再次迭代相同的周期。
- en: 'Now that we have understood the Agile work process, let''s get to know its
    advantages over the traditional SDLC, which are listed as follows:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了敏捷工作流程，让我们了解其优势，这些优势如下所列：
- en: In Agile, each functionality can be developed and demonstrated frequently and
    quickly. The idea here is to develop features without bugs until its deployment
    in a week or so. This ensures that the customer is happy with the additional features.
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在敏捷开发中，每个功能都可以频繁快速地开发和演示。这里的想法是在部署之前一周左右开发没有错误的功能。这确保了客户对额外功能的满意。
- en: There is no separate team for development, testing, or otherwise. There is a
    single team, which consists of 8-10 members (based on the requirements), and each
    member is capable of doing everything.
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有专门的开发、测试或其他团队。有一个团队，由8-10名成员组成（根据需求），每个成员都能够做任何事情。
- en: Agile promotes teamwork.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷推动团队合作。
- en: It requires minimal documentation.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它需要最少的文档。
- en: Agile is best suited for parallel features development.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 敏捷最适合并行功能开发。
- en: Looking at the preceding advantages, now companies have started adopting the
    Agile SDLC in their software development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 看到了前面的优势，现在公司已经开始在他们的软件开发中采用敏捷SDLC。
- en: So far, we have been looking at the methodologies which are adopted as part
    of software development. Let's now look at a very crucial aspect of the Agile
    process, that is, continuous integration, which makes our development job easier.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在研究作为软件开发一部分采用的方法。现在让我们来看看敏捷过程的一个非常关键的方面，即持续集成，这使得我们的开发工作更加轻松。
- en: Continuous integration
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续集成
- en: Continuous integration is a process of collaborating the code into the mainline
    code base. In simple words, continuous integration helps developers to test their
    new code at the initial stage by creating frequent builds while they are developing
    and generating test results, and if everything works, then merging the code to
    the mainline code.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 持续集成是将代码合并到主干代码库的过程。简而言之，持续集成帮助开发人员在开发和生成测试结果时通过创建频繁的构建来测试他们的新代码，并且如果一切正常，然后将代码合并到主干代码。
- en: 'This can be understood by the following diagram, which depicts the issues that
    occur during SDLC:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过以下图表可以理解这一点，它描述了SDLC期间出现的问题：
- en: '![](img/00108.jpeg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00108.jpeg)'
- en: 'There are, basically, the following types of issues that occur during continuous
    integration:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，持续集成期间会出现以下类型的问题：
- en: Build failure before integration
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成前构建失败
- en: Integration failures
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成失败
- en: Build failure (after integration)
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建失败（集成后）
- en: In order to solve those issues, the developer needs to modify the code to fix
    it, and the complete integration process is repeated again until the feature is
    successfully deployed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题，开发人员需要修改代码以修复它，并且整个集成过程会重复，直到功能成功部署。
- en: Jenkins - a continuous integration tool
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Jenkins - 一个持续集成工具
- en: Jenkins is an open-source tool to perform continuous integration and build automation.
    It has the same purpose as any other continuous integration tool, such as Bamboo
    (CirclCI), which tests the code as early as possible in the development stage.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins是一个开源工具，用于执行持续集成和构建自动化。它与其他任何持续集成工具（如Bamboo（CirclCI））具有相同的目的，即在开发阶段尽早测试代码。
- en: In Jenkins, you define the set of instructions to deploy your application over
    different application environments (development, pre-production stage, and so
    on).
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在Jenkins中，您定义了一组指令，用于在不同的应用环境（开发、预生产阶段等）部署您的应用程序。
- en: Before going forward to set up a job (basically, a project) in Jenkins, and
    learn about the Jenkins plugins, let's first set up Jenkins and configure it as
    per our requirements.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续设置Jenkins作业（基本上是项目）并了解Jenkins插件之前，让我们首先根据我们的要求设置Jenkins并进行配置。
- en: Installing Jenkins
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装Jenkins
- en: Installation for Jenkins is straightforward in every environment whether it
    is Linux (Debian, Red Hat, and the like), Windows, or macOS.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何环境中，无论是Linux（Debian，Red Hat等），Windows还是macOS，Jenkins的安装都很简单。
- en: Prerequisite
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 先决条件
- en: 'Make sure you have Java 8 installed on your Ubuntu system. If it is not installed,
    you can follow the instructions given at the following link:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的Ubuntu系统上已安装Java 8。如果尚未安装，可以按照以下链接中给出的说明进行操作：
- en: '[https://medium.com/appliedcode/how-to-install-java-8-jdk-8u45-on-ubuntu-linuxmint-via-ppa-1115d64ae325](https://medium.com/appliedcode/how-to-install-java-8-jdk-8u45-on-ubuntu-linuxmint-via-ppa-1115d64ae325).'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://medium.com/appliedcode/how-to-install-java-8-jdk-8u45-on-ubuntu-linuxmint-via-ppa-1115d64ae325](https://medium.com/appliedcode/how-to-install-java-8-jdk-8u45-on-ubuntu-linuxmint-via-ppa-1115d64ae325).'
- en: Installation on a Debian (Ubuntu)-based system
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在基于Debian（Ubuntu）的系统上安装
- en: 'Follow the steps listed next to install Jenkins on a Debian-based system:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 按照下面列出的步骤在基于Debian的系统上安装Jenkins：
- en: 'We begin our Jenkins installation by adding the Jenkins key to the APT package
    list by executing this command:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过执行以下命令将Jenkins密钥添加到APT软件包列表来开始Jenkins安装：
- en: '[PRE0]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Next, update the source file with the server that needs to be communicated
    to validate the key, as follows:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，更新源文件，需要与之通信以验证密钥的服务器，如下所示：
- en: '[PRE1]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Once the source list file is updated, update the APT repository by executing
    the following command at the terminal:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新源列表文件后，通过在终端执行以下命令来更新APT存储库：
- en: '[PRE2]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now we are ready to install Jenkins over Ubuntu; use the following command
    to do so:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们准备在Ubuntu上安装Jenkins；使用以下命令来执行：
- en: '[PRE3]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that the installation is completed, remember that Jenkins runs on port
    `8080` by default. But if you want to run it over a different port, then you need
    to update the following line in the Jenkins configuration file (`/etc/default/jenkins`):'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在安装完成后，请记住Jenkins默认运行在端口`8080`上。但是，如果您想在不同的端口上运行它，那么您需要更新Jenkins配置文件（`/etc/default/jenkins`）中的以下行：
- en: '[PRE4]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Next, check the Jenkins GUI by using this URL:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，使用此URL检查Jenkins GUI：
- en: If the installation is local, then go to [`http://localhost:8080/`](http://localhost:8080/)
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果安装在本地，则转到[`http://localhost:8080/`](http://localhost:8080/)
- en: If the installation is on a remote machine, go to [`http://ip-address:8080`](http://ip-address:8080)
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果安装在远程机器上，请转到[`http://ip-address:8080`](http://ip-address:8080)
- en: Remember, in this case, we have installed the Jenkins version (2.61); the previous
    as well as upcoming steps are valid for Jenkins version 2.x.x.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在这种情况下，我们安装了Jenkins版本（2.61）；之前和即将到来的步骤对于Jenkins版本2.x.x也是有效的。
- en: 'If you see the following screen, it means your installation is successful:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到以下屏幕，这意味着您的安装成功了：
- en: '![](img/00109.jpeg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00109.jpeg)'
- en: As you can see in the preceding image, there is a path where your default password
    is stored inside the system where Jenkins is installed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的图像所示，在安装Jenkins的系统内有一个存储默认密码的路径。
- en: This proves that Jenkins is installed successfully.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明Jenkins已成功安装。
- en: '**Installation on Windows** Jenkins installation on Windows is pretty simple.
    Usually, on a Windows machine, Jenkins is not run as a service. But if you want
    to enable it as a service (which is optional), you can follow the complete installation
    Jenkins docs for Windows at the following URL:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**在Windows上安装** Jenkins在Windows上的安装非常简单。通常，在Windows机器上，Jenkins不作为服务运行。但是，如果您想将其作为服务启用（这是可选的），您可以按照以下URL完整安装Windows的Jenkins文档：'
- en: '[https://wiki.Jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallJenkinsasaWindowsservice](https://wiki.Jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallJenkinsasaWindowsservice).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://wiki.Jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallJenkinsasaWindowsservice](https://wiki.Jenkins-ci.org/display/JENKINS/Installing+Jenkins+as+a+Windows+service#InstallingJenkinsasaWindowsservice-InstallJenkinsasaWindowsservice).'
- en: Configuring Jenkins
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置Jenkins
- en: 'It''s time to configure Jenkins, So, let''s get the password from the path
    specified (that is, `/var/lib/Jenkins/secrets/initialAdminPassword`) from your
    system, paste it into the space provided in the installation wizard, and click
    on Continue. You should see a screen similar to the following one after hitting
    Continue:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是时候配置Jenkins了，因此，让我们从指定路径（即`/var/lib/Jenkins/secrets/initialAdminPassword`）中获取密码，将其粘贴到安装向导中提供的空格中，然后单击“继续”。单击“继续”后，您应该看到类似以下屏幕：
- en: '![](img/00110.jpeg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00110.jpeg)'
- en: In the next screen, you will see the screen where you can install the plugins
    which we will need for the integration. We will go with the Install suggested
    plugins option for now. Note that we can install additional plugins after the
    initial configuration as well. So, no need to worry!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个屏幕上，您将看到可以安装我们需要的集成插件的屏幕。现在我们将选择“安装建议的插件”选项。请注意，我们也可以在初始配置后安装其他插件。所以，不用担心！
- en: 'Once you click on Install suggested plugins, you will see the following screen,
    which shows the progress of the plugin installation:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦单击“安装建议的插件”，您将看到以下屏幕，显示插件安装的进度：
- en: '![](img/00111.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00111.jpeg)'
- en: It might take a while for the plugin installation. All these plugins are suggested
    by Jenkins, as you might require them during your project-related jobs.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装可能需要一段时间。所有这些插件都是Jenkins建议的，因为您可能在项目相关工作中需要它们。
- en: Once the plugin installation is complete, it will ask you to create an admin
    user to access the Jenkins console. Note that for setting up Jenkins, we used
    temporary credentials.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 插件安装完成后，它会要求您创建一个管理员用户来访问Jenkins控制台。请注意，为了设置Jenkins，我们使用了临时凭据。
- en: '![](img/00112.jpeg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00112.jpeg)'
- en: Once you have entered the user details, click on Save and Finish to complete
    the setup.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 输入用户详细信息后，单击“保存并完成”以完成设置。
- en: '![](img/00113.jpeg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00113.jpeg)'
- en: Your Jenkins setup is successfully completed.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Jenkins设置已成功完成。
- en: Automating Jenkins
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化Jenkins
- en: In this section, we will cover the different parts of the Jenkins configuration,
    and will take a look at how we can successfully create our first job and build
    our application.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将介绍Jenkins配置的不同部分，并将看看如何成功创建我们的第一个作业并构建我们的应用程序。
- en: 'Ideally, our Jenkins home page, after successful login, should look something
    like this:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，成功登录后，我们的Jenkins主页应该看起来像这样：
- en: '![](img/00114.jpeg)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00114.jpeg)'
- en: Securing Jenkins
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保护Jenkins
- en: It is highly recommended to set up the Jenkins security to make your console
    secure, because we are exposing our application to Jenkins.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 强烈建议设置Jenkins安全性，使您的控制台安全，因为我们正在将我们的应用程序暴露给Jenkins。
- en: From the Jenkins home page, click on Manage Jenkins to navigate to the settings
    section of Jenkins, then click on Configure Global Security in the right pane
    to open the security panel.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从Jenkins主页，单击“管理Jenkins”以导航到Jenkins的设置部分，然后单击右侧窗格中的“配置全局安全性”以打开安全面板。
- en: 'In the Configure Global Security section, we can manage user authorization
    as shown in the following screenshot:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置全局安全性部分，我们可以管理用户授权，如下面的屏幕截图所示：
- en: '![](img/00115.jpeg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00115.jpeg)'
- en: As you can see in the preceding screenshot, here, you can define an access list
    for the users based on their role. Generally, in large organizations, user access
    is provided to different people based on their usage so that Jenkins security
    can be maintained. Usually, we go with either a Unix-based user/group database
    or Jenkins, own user database.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的屏幕截图所示，您可以根据其角色为用户定义访问列表。通常，在大型组织中，根据使用情况为不同的人提供用户访问权限，以便维护Jenkins安全性。通常，我们要么使用基于Unix的用户/组数据库，要么使用Jenkins自己的用户数据库。
- en: Plugins management
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 插件管理
- en: Plugins management is very important, as these plugins give us the capability
    to integrate different environments (which could be cloud platform) or on-premises
    resources with Jenkins, and also give us the capability to manage data on our
    resources like app servers, database servers, and so on.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 插件管理非常重要，因为这些插件使我们能够将不同的环境（可能是云平台）或本地资源与Jenkins集成，并且使我们能够管理资源上的数据，如应用服务器、数据库服务器等。
- en: '![](img/00116.jpeg)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00116.jpeg)'
- en: 'From the Manage Jenkins Panel, select the Manage Plugins option to open the
    Manage Plugins panel, which would look something like this:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 从管理Jenkins面板中，选择管理插件选项以打开管理插件面板，它应该看起来像这样：
- en: '![](img/00117.jpeg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00117.jpeg)'
- en: In this panel, you will able to install, uninstall, and upgrade any specific
    plugins from the system. From the same panel, you can upgrade Jenkins as well.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在此面板中，您可以安装、卸载和升级系统中的任何特定插件。从同一面板，您还可以升级Jenkins。
- en: Version control systems
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本控制系统
- en: Jenkins can be used mainly to either build a particular application code, or
    to deploy code over any infrastructure platform (that is, for continuous deployment).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Jenkins主要用于构建特定应用程序代码，或在任何基础设施平台上部署代码（即用于持续部署）。
- en: Nowadays, organizations store their application code over any version control
    system, such as Git, where the administrator has central control, and can provide
    the required access based on the user role. Also, since we are talking of continuous
    integration, then it is recommended to store the application code at a centralized
    location with version control to maintain the integrity of the code.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，组织将其应用程序代码存储在任何版本控制系统中，例如Git，管理员具有集中控制，并可以根据用户角色提供所需的访问权限。此外，由于我们正在谈论持续集成，因此建议将应用程序代码存储在具有版本控制的集中位置，以维护代码的完整性。
- en: So, in order to maintain the version code, make sure you install the Git plugin
    from the Manage plugin panel.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持版本代码，请确保您从管理插件面板安装Git插件。
- en: 'To clone a Git repository via Jenkins, you need to enter the email and username
    for your Jenkins system. For this, switch to your job directory, and run the Git
    config command as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过Jenkins克隆Git存储库，您需要为Jenkins系统输入电子邮件和用户名。为此，请切换到作业目录，并运行以下Git配置命令：
- en: '[PRE5]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This needs to be set up in order to download the code from the repository, or
    at the time of merging the branches in Git, and other cases.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这需要设置以便从存储库下载代码，或在Git中合并分支时，以及其他情况下。
- en: Setting up a Jenkins job
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Jenkins作业
- en: Now we are ready to set up our first Jenkins job. As discussed earlier, each
    job is created to perform certain specific tasks, which could be individual or
    could be in a pipeline.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们准备设置我们的第一个Jenkins作业。如前所述，每个作业都是为执行特定任务而创建的，可以是个别的，也可以是流水线的。
- en: According to Andrew Phillips, ideally, a pipeline breaks down the software delivery
    process into stages. Each stage is aimed at verifying the quality of the new features
    from a different angle to validate the new functionality, and to prevent errors
    from affecting your users. If any error is encountered, a feedback is returned
    in the form of reports, and it is ensured that the required quality of the software
    is achieved.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Andrew Phillips的说法，理想情况下，流水线将软件交付过程分解为各个阶段。每个阶段旨在从不同角度验证新功能的质量，以验证新功能，并防止错误影响用户。如果遇到任何错误，将以报告的形式返回反馈，并确保达到所需的软件质量。
- en: 'In order to initiate job creation, on the Jenkins home page, click on either
    New item on the left-hand side, or click on the create new jobs link in the right-hand
    side pane:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了启动作业创建，在Jenkins主页上，单击左侧的“新项目”，或单击右侧窗格中的“创建新作业”链接：
- en: '![](img/00118.jpeg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00118.jpeg)'
- en: 'Once you click on it, it will open a wizard which will ask for your project/job
    name as well as the type of job you want to create, as shown in the following
    screenshot:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 单击后，它将打开一个向导，询问您的项目/作业名称以及要创建的作业类型，如下面的屏幕截图所示：
- en: '![](img/00119.jpeg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00119.jpeg)'
- en: The description is already provided along with the project type to give us an
    overview of the different options available in Jenkins. These types need to selected,
    as they have different configurations based on the type.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 描述已经提供，以及项目类型，以便给我们一个Jenkins中可用不同选项的概述。这些类型需要被选择，因为它们基于类型有不同的配置。
- en: Note that since we are working on the latest Jenkins version, it is possible
    that some of the project types might not be there in the older versions, so make
    sure you have the latest Jenkins installed.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，由于我们正在使用最新的Jenkins版本，可能一些项目类型在旧版本中可能不存在，因此请确保您安装了最新的Jenkins。
- en: 'For now, we will select the Freestyle project, specify a unique job name, and
    then click on OK to continue to configure our job. Once you click on OK, you will
    see the following page:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将选择自由风格项目，指定一个唯一的作业名称，然后单击“确定”以继续配置我们的作业。单击“确定”后，您将看到以下页面：
- en: '![](img/00120.jpeg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00120.jpeg)'
- en: In the preceding page, you can define your job details such as Project name,
    Description, GitHub project, and so on.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的页面中，您可以定义作业的详细信息，例如项目名称、描述、GitHub项目等。
- en: 'Next, click on the Source Code Management tab; you will see the following screen:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，单击“源代码管理”选项卡；您将看到以下屏幕：
- en: '![](img/00121.jpeg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00121.jpeg)'
- en: 'In this preceding section, you will define your source code details. You also
    need to set up the Jenkins user credentials if you haven''t done so previously
    in the configuration section. Click on the Add button near credentials if it is
    not set up. It will open a popup, which will look something like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的部分中，您将定义您的源代码详细信息。如果您之前在配置部分中还没有设置Jenkins用户凭据，那么您也需要设置Jenkins用户凭据。如果尚未设置，请单击凭据旁边的“添加”按钮。它将打开一个弹出窗口，看起来像这样：
- en: '![](img/00122.jpeg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00122.jpeg)'
- en: The user you define here (that is, the admin) needs to have permission in the
    code repository to access it.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 您在此处定义的用户（即管理员）需要在代码存储库中具有访问权限。
- en: 'There are ways by which you can set up authentication for the mentioned user
    on the repository, which are defined in Kind (the drop-down menu):'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方式可以为存储库上的所述用户设置身份验证，这些方式在“种类”（下拉菜单）中定义：
- en: '![](img/00123.jpeg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00123.jpeg)'
- en: 'It is important to note that Jenkins will immediately test the credentials
    against the repository URL mentioned. If it fails, it will show you the error
    as seen in this screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，Jenkins将立即测试与所提到的存储库URL的凭据。如果失败，它将显示您在此截图中看到的错误：
- en: '![](img/00124.jpeg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00124.jpeg)'
- en: 'Assuming that the credentials match against the repository URL, let''s move
    on to clicking the Build Trigger tab to scroll on it. The following screen shows
    the Build Trigger options which can be imposed on a job for continuous deployment:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 假设凭据与存储库URL匹配，让我们继续单击“构建触发器”选项卡以滚动它。以下屏幕显示了可以对作业进行连续部署的构建触发器选项：
- en: '![](img/00125.jpeg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00125.jpeg)'
- en: This Build Trigger section is very important, as it determines how often your
    build should run, and also the parameters which trigger your build. For example,
    if you want to build your application after every Git commit, you can select the
    option Build when a change is pushed to GitBucket.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这个构建触发器部分非常重要，因为它决定了您的构建应该运行多频繁，以及触发构建的参数。例如，如果您希望在每次Git提交后构建您的应用程序，您可以选择“当更改被推送到GitBucket时构建”的选项。
- en: So, as soon as the developer commits any changes in the repository in a certain
    branch (generally, master), then this job gets triggered automatically. It's like
    a hook on top of your repository, and it keeps a track of the activities on it.
    Alternatively, if you want to build your application or run this job periodically,
    then you can specify the condition like this-- `H/15 * * * *`--in Poll SCM to
    schedule, which means that this job will run every 15 minutes. It is similar to
    a cron job, which we, usually, set up in Linux-based systems.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一旦开发人员在存储库的某个分支（通常是主分支）中提交任何更改，那么此作业将自动触发。这就像是在存储库顶部的一个钩子，它会跟踪其中的活动。或者，如果您想要定期构建您的应用程序或运行此作业，那么您可以指定类似于这样的条件--
    `H/15 * * * *`--在轮询SCM以安排中，这意味着此作业将每15分钟运行一次。这类似于我们通常在基于Linux的系统中设置的cron作业。
- en: 'The next two sections, **Build environment** and **Build**, are defined for
    workspace-related tasks. Since we are dealing with a Python-based application,
    and we have already built our application, we can skip these sections for now.
    But if you have an application written in Java or a .NET application, you can
    go with the ANT and Maven build tools, and branch to build. Alternatively, if
    you want to build a Python-based application, then go for tools such as pyBuilder
    ([http://pybuilder.github.io/](http://pybuilder.github.io/)). The following screen
    shows the build option:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的两个部分，**构建环境**和**构建**，是为与工作区相关的任务定义的。由于我们正在处理一个基于Python的应用程序，并且我们已经构建了我们的应用程序，所以我们现在可以跳过这些部分。但是，如果您有一个用Java编写的应用程序或.NET应用程序，您可以使用ANT和Maven构建工具，并分支构建。或者，如果您想构建一个基于Python的应用程序，那么可以使用诸如pyBuilder
    ([http://pybuilder.github.io/](http://pybuilder.github.io/))之类的工具。以下屏幕显示了构建选项：
- en: '![](img/00126.jpeg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00126.jpeg)'
- en: Once you are done, you can click on the next tab, which is Post-build Actions.
    This is used to define what needs to be done once the build is successful. Because
    of this section, Jenkins can also be used as a continuous deployment tool. So,
    in this post-build action, you can specify the platform where your application
    needs to be deployed, such as on an AWS EC2 machine, Code deploy, Azure VM, or
    others.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，您可以单击下一个选项卡，即后构建操作。这用于定义构建成功后需要执行的操作。由于这一部分，Jenkins也可以用作持续部署工具。因此，在此后构建操作中，您可以指定应用程序需要部署的平台，例如AWS
    EC2机器、Code deploy、Azure VM或其他平台。
- en: 'In the post-build section, in the context of continuous integration, we can
    also perform operations such as Git merge after a successful build, publish results
    on Git, and so on. Also, you can set up email notifications for your stakeholders
    to give them updates about the build results over email. See the following screenshot
    for more details:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续集成的后构建部分中，我们还可以执行诸如成功构建后的Git合并、在Git上发布结果等操作。此外，您还可以为利益相关者设置电子邮件通知，以便通过电子邮件向他们提供有关构建结果的更新。有关更多详细信息，请参见以下截图：
- en: '![](img/00127.jpeg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00127.jpeg)'
- en: 'That''s all. Once you have filled the required details, click on Save to save
    the configuration. Now you are ready to build your application--click on the Build
    Now link in the left panel, as seen in the following screenshot:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。一旦填写了必要的细节，点击保存以保存配置。现在您已经准备好构建您的应用程序了--点击左侧面板中的立即构建链接，如下面的截图所示：
- en: '![](img/00128.jpeg)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00128.jpeg)'
- en: 'Note: For first time build execution, you need to trigger it manually if you
    haven''t set the poll SCM or the Build Triggers section.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：对于第一次构建执行，如果您尚未设置轮询SCM或构建触发器部分，则需要手动触发它。
- en: That's all we have from Jenkins at this point of time in terms of job creation.
    However, we will be using Jenkins as a continuous delivery and continuous integration
    tool in the upcoming chapters, where we deploy our React application that we created
    in the previous chapters on different platforms such as AWS, Azure, or Docker.
    We will also see the integration of the AWS service with Jenkins to automate application
    delivery to the GitHub repository by a single commit.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们目前从Jenkins那里得到的有关作业创建的所有信息。然而，在接下来的章节中，我们将使用Jenkins作为持续交付和持续集成工具，部署我们在之前章节中创建的React应用程序到AWS、Azure或Docker等不同平台上。我们还将看到AWS服务与Jenkins的集成，通过单次提交自动化将应用程序交付到GitHub存储库。
- en: Understanding continuous delivery
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解持续交付
- en: Continuous delivery is a software engineering practice where production-ready
    features are produced and deployed to production.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付是一种软件工程实践，其中生产就绪的功能被生产并部署到生产环境。
- en: The primary objective of continuous delivery is to perform successful application
    deployments irrespective of the platform, which could be a large-scale distributed
    system or a complex production environment.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付的主要目标是在不考虑平台的情况下执行成功的应用程序部署，无论是大规模分布式系统还是复杂的生产环境。
- en: In multinational companies, we always ensure that the application code is in
    a stable as well as deployable state even if there are many developers working
    on the different application components at the same time. In continuous delivery,
    we also ensure that unit testing and integration testing are successfully performed,
    making it production ready.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在跨国公司中，我们始终确保应用程序代码处于稳定且可部署状态，即使有许多开发人员同时在不同的应用程序组件上工作。在持续交付中，我们还确保单元测试和集成测试成功进行，使其达到生产就绪状态。
- en: Need for continuous delivery
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付的需求
- en: It has been assumed that if we try to deploy software more frequently, we should
    expect lower levels of stability and reliability in our systems, but that's not
    entirely correct. Continuous delivery provides practices which provide incredible
    competitive advantages for organizations that are willing to release stable and
    reliable software in a competitive market.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 人们普遍认为，如果我们尝试更频繁地部署软件，我们应该预期系统的稳定性和可靠性水平会降低，但这并不完全正确。持续交付提供了一些实践，为愿意在竞争激烈的市场中发布稳定可靠软件的组织提供了令人难以置信的竞争优势。
- en: 'The practices in continuous delivery give us the following important benefits:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付的实践给我们带来了以下重要的好处：
- en: '**Risk free releases**: The primary requirement of any application in a software
    release is to have a minimal or zero downtime. After all, it''s always about business,
    and the user should not be affected because of frequent releases. By using patterns
    such as BlueGreenDeployment ([https://martinfowler.com/bliki/BlueGreenDeployment.html](https://martinfowler.com/bliki/BlueGreenDeployment.html)),
    we can achieve zero downtime during deployments.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无风险发布**：软件发布中的主要要求是最小或零停机时间。毕竟，这始终与业务有关，用户不应因频繁发布而受到影响。通过使用BlueGreenDeployment（[https://martinfowler.com/bliki/BlueGreenDeployment.html](https://martinfowler.com/bliki/BlueGreenDeployment.html)）等模式，我们可以在部署过程中实现零停机时间。'
- en: '**Competitive market**: In continuous delivery, all the teams, such as the
    build and deployment team, testing team, developers, and others, work together,
    which makes different activities such as testing, integration, and so on, happen
    on a daily basis. This makes the feature release process faster (a week or two),
    and we will have frequent releases to the production environment for customer
    usage.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**竞争市场**：在持续交付中，所有团队，如构建和部署团队、测试团队、开发人员等，都共同合作，使不同的活动如测试、集成等每天都发生。这使得功能发布过程更快（一周或两周），我们将频繁地将功能发布到生产环境供客户使用。'
- en: '**Quality improvement**: In continuous delivery, developers don''t need to
    worry about the testing process, as it is taken care of by the pipeline, and showcases
    the result to the QA team as well. This enables the QA team and the developers
    to take a closer look at exploratory testing, usability testing, and performance
    and security testing, which can improve the customer experience.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**质量改进**：在持续交付中，开发人员无需担心测试过程，因为流水线会处理这一过程，并向QA团队展示结果。这使得QA团队和开发人员能够更仔细地进行探索性测试、可用性测试以及性能和安全性测试，从而改善客户体验。'
- en: '**Better products**: By using continuous delivery in build, test, deployment,
    and environment setups, we reduce the cost of making and delivering incremental
    changes in software, which makes the product much better over the course of time.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**更好的产品**：通过在构建、测试、部署和环境设置中使用持续交付，我们减少了软件增量变更的成本和交付成本，从而使产品在一段时间内变得更好。'
- en: Continuous delivery versus continuous deployment
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持续交付与持续部署
- en: 'Continuous delivery and continuous deployment are similar in terms of the stages
    they have to build, tests, and the software release cycles they have to deploy,
    but they are slightly different in terms of the *process*, which you can understand
    from the following diagram:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 持续交付和持续部署在构建、测试和软件发布周期方面相似，但在*流程*方面略有不同，您可以从以下图表中了解到：
- en: '![](img/00129.jpeg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: 在下一章中，我们将讨论基于容器技术的Docker。我相信你们大多数人之前都听说过Docker，所以请继续关注对Docker的深入了解。我们下一章见！
- en: In continuous deployment, production-ready code is directly deployed to the
    production environment once it passes all the testing checks, which makes the
    software release frequent. But in the case of continuous delivery, the production-ready
    application code is not deployed unless manually triggered or approved by the
    concerned authority.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在持续部署中，经过所有测试检查的生产就绪代码直接部署到生产环境，这使得软件发布频繁。但在持续交付的情况下，除非由相关部门手动触发或批准，否则不会部署生产就绪的应用程序代码。
- en: Summary
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 总结
- en: Throughout the chapter, we discussed the CI and CD tools such as Jenkins, and
    also looked at the different functionalities of the same. It is very crucial to
    understand these tools at this stage, as most companies which deal with cloud
    platforms use these processes for their software development as well as deployment.
    So, now that you have understood the deployment pipeline, you are ready to understand
    the platform where we will deploy our application.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个章节中，我们讨论了像Jenkins这样的CI和CD工具，并且也看了它们的不同功能。在这个阶段理解这些工具非常重要，因为大多数处理云平台的公司都使用这些流程进行软件开发和部署。所以，现在您已经了解了部署流水线，您可以开始了解我们将部署应用程序的平台了。
- en: In the next chapter, we will talk about Docker (based on the container technology).
    I'm sure most of you have heard of Docker before, so stay tuned for a deep exposure
    to Docker. See you in the next chapter!
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: （图片已省略）
