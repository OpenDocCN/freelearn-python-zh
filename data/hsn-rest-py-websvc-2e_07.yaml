- en: Improving Our API and Adding Authentication to it with Django
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django改进我们的API并为其添加认证
- en: 'In this chapter, we will improve the Django RESTful API with a PostgreSQL 10.5
    database that we started in the previous chapter. We will use many of the features
    included in Django REST framework to add new functions to the API and will add
    authentication-related security to it. We will do the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们在上一章中开始使用的PostgreSQL 10.5数据库来改进Django RESTful API。我们将使用Django REST框架中包含的许多功能来向API添加新功能，并将添加与认证相关的安全功能。我们将执行以下操作：
- en: Add unique constraints to the models
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在模型中添加唯一约束
- en: Update a single field for a resource with the `PATCH` method
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`PATCH`方法更新资源的单个字段
- en: Take advantage of pagination
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 利用分页功能
- en: Customize pagination classes
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义分页类
- en: Understand authentication, permissions, and throttling
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解认证、权限和限制
- en: Add security-related data to the models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向模型添加与安全相关的数据
- en: Create a customized permission class for object-level permissions
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为对象级权限创建一个自定义权限类
- en: Persist the user that makes a request and configure permission policies
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 持久化发起请求的用户并配置权限策略
- en: Set a default value for a new required field in migrations
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在迁移中为新的必填字段设置默认值
- en: Compose requests with the necessary authentication
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用必要的认证来组合请求
- en: Browse the API with authentication credentials
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用认证凭据浏览API
- en: Adding unique constraints to the models
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在模型中添加唯一约束
- en: Our API has some important issues that we need to solve quickly. Right now,
    we can create many ESRB ratings with the same description. We shouldn't be able
    to do so, and therefore, we will make the necessary changes to the `EsrbRating`
    model to add a unique constraint on the `description` field. We will also add
    a unique constraint on the `name` field for the `Game` and `Player` models. This
    way, we will learn the necessary steps to make changes to the constraints for
    many models and reflect the changes in the underlying database schema through
    migrations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的API有一些重要的问题需要我们迅速解决。目前，我们可以创建具有相同描述的许多ESRB评级。我们不应该能够这样做，因此，我们将对`EsrbRating`模型进行必要的更改，以在`description`字段上添加唯一约束。我们还将为`Game`和`Player`模型的`name`字段添加唯一约束。这样，我们将学习必要的步骤来更改多个模型的约束，并通过迁移反映底层数据库模式的变化。
- en: Make sure you quit the Django development server. Remember that you just need
    to press *Ctrl* + *C* in the Terminal or Command Prompt window in which it is
    running. ...
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '确保您退出Django开发服务器。请记住，您只需在运行它的终端或命令提示符窗口中按*Ctrl* + *C*即可。 ... '
- en: Updating a single field for a resource with the PATCH method
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用PATCH方法更新资源的单个字段
- en: Due to the usage of generic class-based views, our API is able to update a single
    field for an existing resource, and therefore, we provide an implementation for
    the `PATCH` method. For example, we can use the `PATCH` method to update an existing
    game and set the value for its `played_once` and `played_times` field to `True`
    and `1`. We don't want to use the `PUT` method because this method is meant to
    replace an entire game. Remember that the `PATCH` method is meant to apply a delta
    to an existing game, and therefore, it is the appropriate method to just change
    the value of the `played_once` and `played_times` fields.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于使用了基于类的通用视图，我们的API能够更新现有资源的单个字段，因此，我们为`PATCH`方法提供了一个实现。例如，我们可以使用`PATCH`方法来更新一个现有的游戏，并将它的`played_once`和`played_times`字段的值设置为`True`和`1`。我们不希望使用`PUT`方法，因为这个方法旨在替换整个游戏。请记住，`PATCH`方法旨在对现有游戏应用一个增量，因此，它是仅更改`played_once`和`played_times`字段值的适当方法。
- en: 'Now we will compose and send an HTTP `PATCH` request to update an existing
    game, specifically, to update the value of the `played_once` and `played_times`
    fields and set them to `True` and `10`. Make sure you replace `2` with `id` of
    an existing game in your configuration. The code file for the sample is included
    in the `restful_python_2_07_01` folder, in the `Django01/cmd/cmd703.txt` file:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将组合并发送一个HTTP `PATCH`请求来更新一个现有的游戏，特别是更新`played_once`和`played_times`字段的值，并将它们设置为`True`和`10`。确保将`2`替换为配置中现有游戏的`id`。示例的代码文件包含在`restful_python_2_07_01`文件夹中，在`Django01/cmd/cmd703.txt`文件中：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_01` folder, in the `Django01/cmd/cmd704.txt`
    file:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的`curl`命令。示例的代码文件包含在`restful_python_2_07_01`文件夹中，在`Django01/cmd/cmd704.txt`文件中：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The previous command will compose and send an HTTP `PATCH` request with the
    specified JSON key-value pairs. The request has a number after `/games/`, and
    therefore, it will match `'^games/(?P<pk>[0-9]+)/$'` and run the `patch` method
    for the `views.GameDetail` class-based view. Remember that the `patch` method
    is defined in the `RetrieveUpdateDestroyAPIView` superclass and it ends up calling
    the `update` method defined in `mixins.UpdateModelMixin`. If the `Game` instance
    with the updated values for the `played_once` and `played_times` fields is valid
    and it was successfully persisted in the database, the call to the method will
    return the `200 OK` status code and the recently updated `Game` serialized to
    JSON in the response body.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令将组合并发送一个包含指定JSON键值对的HTTP `PATCH`请求。请求在`/games/`之后有一个数字，因此它将匹配`'^games/(?P<pk>[0-9]+)/$'`并运行`views.GameDetail`基于类的视图的`patch`方法。请记住，`patch`方法是在`RetrieveUpdateDestroyAPIView`超类中定义的，并最终调用在`mixins.UpdateModelMixin`中定义的`update`方法。如果更新`played_once`和`played_times`字段值的`Game`实例有效，并且它已成功持久化到数据库中，则对方法的调用将返回`200
    OK`状态码，并将最近更新的`Game`序列化为JSON格式放在响应体中。
- en: 'The following lines show a sample response:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行显示了示例响应：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Taking advantage of pagination
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用分页
- en: Our database has a few rows for each of the tables that persist the models we
    have defined. However, after we start working with our API in a real-life production
    environment, we will have thousands of player scores, players, and games—although
    the ESRB ratings will still be few in number. We definitely have to prepare our
    API to deal with large result sets. Luckily, we can take advantage of the pagination
    features available in Django REST framework to make it easy to specify how we
    want large result sets to be split into individual pages of data.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的数据库为每个持久化我们定义的模型的表都有几行。然而，在我们开始在现实生产环境中使用我们的API之后，我们将有数千个玩家得分、玩家和游戏——尽管ESRB评级仍然数量很少。我们绝对必须准备我们的API以处理大量结果集。幸运的是，我们可以利用Django
    REST framework中可用的分页功能，使其容易指定我们希望如何将大量结果集拆分为单个数据页。
- en: 'First, we will write commands to compose and send HTTP `POST` requests to create
    10 games that belong to one of the ESRB ratings we have created: `T (Teen)`. This
    way, ...'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将编写命令来组合和发送HTTP `POST`请求以创建10个属于我们创建的ESRB评级之一（`T (Teen)`）的游戏。这样，...
- en: Customizing pagination classes
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义分页类
- en: The `rest_framework.pagination.LimitOffsetPagination` class that we are using
    to provide paginated responses declares a `max_limit` class attribute that defaults
    to `None`. This attribute allows us to indicate the maximum allowable limit that
    can be specified by using the `limit` query parameter. With the default setting,
    there is no limit, and we will be able to process requests that specify a value
    for `1000000` for the `limit` query parameter.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的`rest_framework.pagination.LimitOffsetPagination`类声明了一个`max_limit`类属性，默认值为`None`。此属性允许我们指定可以使用`limit`查询参数指定的最大允许限制。默认设置下，没有限制，我们将能够处理指定`limit`查询参数值为`1000000`的请求。
- en: We definitely don't want our API to be able to generate a response with a million
    player scores or players with a single request. Unluckily, there is no configuration
    setting that allows us to change the value that the class assigns to the `max_limit`
    class attribute. Thus, we are forced to create our customized version of the `limit`/`offset`
    pagination style provided by Django REST Framework.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们绝对不希望我们的API能够通过单个请求生成包含一百万个玩家得分或单个玩家的响应。不幸的是，没有配置设置允许我们更改类分配给`max_limit`类属性的值。因此，我们被迫创建Django
    REST Framework提供的`limit`/`offset`分页风格的定制版本。
- en: 'Create a new Python file named `max_limit_pagination.py` within the `games_service/games`
    folder and enter the following code that declares the new `MaxLimitPagination`
    class. The code file for the sample is included in the `restful_python_2_07_03`
    folder, in the `Django01/games-service/games/max_limit_pagination.py` file:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service/games`文件夹内创建一个名为`max_limit_pagination.py`的新Python文件，并输入以下代码，该代码声明了新的`MaxLimitPagination`类。示例的代码文件包含在`restful_python_2_07_03`文件夹中，位于`Django01/games-service/games/max_limit_pagination.py`文件中：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The previous lines declare the `MaxLimitPagination` class as a subclass of the
    `rest_framework.pagination.LimitOffsetPagination` superclass and overrides the
    value specified for the `max_limit` class attribute with `8`.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的行将`MaxLimitPagination`类声明为`rest_framework.pagination.LimitOffsetPagination`超类的子类，并覆盖了为`max_limit`类属性指定的值，将其设置为`8`。
- en: 'Open the `settings.py` file in the `games_service/games_service` folder and
    replace the line that specified the value for the `DEFAULT_PAGINATION_CLASS` key
    in the dictionary named `REST_FRAMEWORK` with the highlighted line. The following
    lines show the new declaration of the dictionary named `REST_FRAMEWORK`. The code
    file for the sample is included in the `restful_python_2_07_03` folder, in the
    `Django01/games-service/games/settings.py` file:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service/games_service`文件夹中打开`settings.py`文件，并将指定`REST_FRAMEWORK`字典中`DEFAULT_PAGINATION_CLASS`键值的行替换为高亮行。以下行显示了名为`REST_FRAMEWORK`的新字典声明。示例的代码文件包含在`restful_python_2_07_03`文件夹中，在`Django01/games-service/games/settings.py`文件中：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Now the generic views will use the recently declared `games.pagination.MaxLimitPagination`
    class, which provides a `limit`/`offset` based style with a maximum `limit` value
    equal to `8`. If a request specifies a value for a limit higher than `8`, the
    class will use the maximum limit value, that is, `8`, and we will never return
    more than `8` items in a paginated response.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在通用视图将使用最近声明的`games.pagination.MaxLimitPagination`类，该类提供了一个基于`limit`/`offset`的样式，最大`limit`值等于`8`。如果一个请求指定了一个大于`8`的`limit`值，该类将使用最大限制值，即`8`，并且我们永远不会在一个分页响应中返回超过`8`个条目。
- en: 'Now we will write a command to compose and send an HTTP request to retrieve
    the first page for the games, specifically, an HTTP `GET` method to `/games/`
    with the `limit` value set to `20`. The code file for the sample is included in
    the `restful_python_2_07_03` folder, in the `Django01/cmd/cmd719.txt` file:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组成并发送一个HTTP请求以检索游戏的第一个页面，具体来说，是一个将`limit`值设置为`20`的`/games/`的HTTP
    `GET`方法。示例的代码文件包含在`restful_python_2_07_03`文件夹中，在`Django01/cmd/cmd719.txt`文件中：
- en: '[PRE5]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_03` folder, in the `Django01/cmd/cmd720.txt`
    file:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的`curl`命令。示例的代码文件包含在`restful_python_2_07_03`文件夹中，在`Django01/cmd/cmd720.txt`文件中：
- en: '[PRE6]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The result will use a limit value equal to `8`, instead of the indicated `20`,
    because we are using our customized pagination class. The result will provide
    us the first set with 10 game resources in the `results` key, the total number
    of games for the query in the `count` key, and a link to the next and previous
    pages in the `next` and `previous` keys. In this case, the result set is the first
    page, and therefore, the link to the next page in the `next` key is `http://localhost:8000/games/?limit=8&offset=8`.
    We will receive a `200 OK` status code in the response header and the first eight
    games in the `results` array. The following lines show the header and the first
    lines of the output:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将使用一个等于`8`的极限值，而不是指示的`20`，因为我们正在使用我们的自定义分页类。结果将在`results`键中提供包含10个游戏资源的第一个集合，在`count`键中提供查询的总游戏数，并在`next`和`previous`键中提供下一页和上一页的链接。在这种情况下，结果集是第一页，因此，`next`键中下一页的链接是`http://localhost:8000/games/?limit=8&offset=8`。我们将在响应头中收到`200
    OK`状态码，并在`results`数组中收到前八个游戏。以下行显示了头信息和输出第一行：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: It is a good practice to configure a maximum limit to avoid generating huge
    responses.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 配置最大限制以避免生成巨大的响应是一个好习惯。
- en: Open a web browser and enter `http://localhost:8000/games/`. Replace `localhost`
    with the IP of the computer that is running the Django development server if you
    use another computer or device to run the browser. The Browsable API will compose
    and send an HTTP `GET` request to `/games/` and will display the results of its
    execution, that is, the headers and the JSON games list. Because we have configured
    pagination, the rendered web page will include the default pagination template
    associated with the base pagination class we are using, and will display the available
    page numbers at the upper-right corner of the web page.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网页浏览器并输入`http://localhost:8000/games/`。如果你使用另一台计算机或设备运行浏览器，请将`localhost`替换为运行Django开发服务器的计算机的IP地址。可浏览API将组成并发送一个到`/games/`的HTTP
    `GET`请求，并将显示其执行结果，即头信息和JSON游戏列表。因为我们已经配置了分页，所以渲染的网页将包括与我们使用的基分页类关联的默认分页模板，并在网页右上角显示可用的页码。
- en: 'The following screenshot shows the rendered web page after entering the URL
    in a web browser with the resource description game-list, and the three pages:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了在网页浏览器中输入URL后渲染的网页，包括资源描述游戏列表和三个页面：
- en: '![](img/3767e01a-f090-45aa-9fdb-0fdc3afab667.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3767e01a-f090-45aa-9fdb-0fdc3afab667.png)'
- en: Understanding authentication, permissions, and throttling
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解身份验证、权限和节流
- en: Our current version of the API processes all incoming requests without requiring
    any kind of authentication. Django REST Framework allows us to easily use different
    authentication schemes to identify the user that originated the request or the
    token that signed the request. Then, we can use these credentials to apply the
    permission and throttling policies that will determine whether the request must
    be permitted or not. In a production environment, we can combine an authentication
    scheme with an API running under HTTPS. In our development configuration, we will
    continue working with the API under HTTP, but this is only valid for developing.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们当前的API版本处理所有传入请求，无需任何类型的身份验证。Django REST框架允许我们轻松使用不同的身份验证方案来识别发起请求的用户或签名请求的令牌。然后，我们可以使用这些凭据来应用权限和速率限制策略，以确定请求是否必须被允许。在生产环境中，我们可以将身份验证方案与运行在HTTPS下的API结合使用。在我们的开发配置中，我们将继续在HTTP下使用API，但这仅适用于开发。
- en: As happened with other configurations, ...
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如同其他配置发生的情况一样，...
- en: Adding security-related data to the models
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将安全相关数据添加到模型中
- en: We will associate a game with a creator or owner. Only the authenticated users
    will be able to create new games. Only the creator of a game will be able to update
    it or delete it. All the requests that aren't authenticated will only have read-only
    access to games.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把一个游戏与创建者或所有者关联起来。只有经过身份验证的用户才能创建新的游戏。只有游戏的创建者才能更新或删除它。未经身份验证的所有请求将只能对游戏有只读访问权限。
- en: 'Open the `models.py` file in the `games_service/games` folder. Replace the
    code that declares the `Game` class with the following code. The new and edited
    lines are highlighted in the code listing. The code file for the sample is included
    in the `restful_python_2_07_04` folder, in the `Django01/games-service/games/models.py`
    file:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`games_service/games`文件夹中的`models.py`文件。将声明`Game`类的代码替换为以下代码。代码列表中的新行和编辑行被突出显示。示例的代码文件包含在`restful_python_2_07_04`文件夹中的`Django01/games-service/games/models.py`文件中：
- en: '[PRE8]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The new version of the `Game` model declares a new `owner` field that uses the
    `django.db.models.ForeignKey` class to provide a many-to-one relationship to the
    `auth.User` model, specifically, to the `django.contrib.auth.User` model. This
    `User` model represents the users within the Django authentication system. The
    `'games'` value specified for the `related_name` argument creates a backward relation
    from the `User` model to the `Game` model. This value indicates the name to use
    to relate a `User` object back to a `Game` object. This way, we will be able to
    access all the games owned by a specific user. Whenever we delete a user, we want
    all the games owned by this user to be deleted too, and therefore, we specify
    the `models.CASCADE` value for the `on_delete` argument.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 新版本的`Game`模型声明了一个新的`owner`字段，该字段使用`django.db.models.ForeignKey`类提供与`auth.User`模型的许多对一关系，具体来说，是与`django.contrib.auth.User`模型。这个`User`模型代表Django身份验证系统中的用户。为`related_name`参数指定的`'games'`值创建了一个从`User`模型到`Game`模型的反向关系。这个值表示用于将`User`对象关联回`Game`对象的名称。这样，我们将能够访问特定用户拥有的所有游戏。每次我们删除一个用户时，我们希望删除该用户拥有的所有游戏，因此，我们为`on_delete`参数指定了`models.CASCADE`值。
- en: 'Now we will run the `createsuperuser` subcommand for `manage.py` to create
    the superuser for Django that we will use to easily authenticate our requests.
    We will create more users later:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将运行`manage.py`中的`createsuperuser`子命令来创建Django的超级用户，我们将使用它来轻松地验证我们的请求。我们稍后会创建更多用户：
- en: '[PRE9]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The command will ask you for the username you want to use for the superuser.
    Enter the desired username and press *Enter*. We will use `your_games_super_user`
    as the username for this example. You will see a line similar to the following
    one:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将要求你输入想要用于超级用户的用户名。输入所需的用户名并按*Enter*键。在这个例子中，我们将使用`your_games_super_user`作为用户名。你将看到类似以下的一行：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, the command will ask you for the email address:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，命令将要求你输入电子邮件地址：
- en: '[PRE11]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Enter an email address, such as `your_games_super_user@example.com`, and press
    *Enter*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个电子邮件地址，例如`your_games_super_user@example.com`，并按*Enter*键。
- en: 'Finally, the command will ask you for the password for the new superuser:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，命令将要求你输入新超级用户的密码：
- en: '[PRE12]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Enter your desired password and press *Enter*. In the examples, we will use
    `WCS3qn!a4ybX#` as the password.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 输入你想要的密码并按*Enter*键。在示例中，我们将使用`WCS3qn!a4ybX#`作为密码。
- en: 'The command will ask you to enter the password again:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 命令将要求你再次输入密码：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Enter it and press *Enter*. If both entered passwords match, the superuser
    will be created:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 输入并按 *Enter*。如果输入的两个密码匹配，将创建超级用户：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open the `serializers.py` file in the `games_service/games` folder. Add the
    following code after the last line that declares the imports, before the declaration
    of the `GameCategorySerializer` class. The code file for the sample is included
    in the `restful_python_2_07_04` folder, in the `Django01/games-service/games/serializers.py`
    file:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `games_service/games` 文件夹中的 `serializers.py` 文件。在声明导入的最后一行之后，在 `GameCategorySerializer`
    类声明之前添加以下代码。示例的代码文件包含在 `restful_python_2_07_04` 文件夹中，在 `Django01/games-service/games/serializers.py`
    文件中：
- en: '[PRE15]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `UserGameSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    superclass. We use this new serializer class to serialize the games related to
    a user. We just want to include the URL and the game's name, and therefore, the
    code specified `'url'` and `'name'` as members of the field tuple defined in the
    `Meta` inner class. We don't want to use the `GameSerializer` serializer class
    for the games related to a user because we want to serialize fewer fields, and
    therefore, we created the `UserGameSerializer` class.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserGameSerializer` 类是 `HyperlinkedModelSerializer` 超类的子类。我们使用这个新的序列化器类来序列化与用户相关的游戏。我们只想包含
    URL 和游戏名称，因此，代码指定了 `''url''` 和 `''name''` 作为在 `Meta` 内部类中定义的字段元组的成员。我们不希望使用 `GameSerializer`
    序列化器类来序列化与用户相关的游戏，因为我们想序列化更少的字段，因此，我们创建了 `UserGameSerializer` 类。'
- en: The `UserSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    superclass. This serializer class is related to the `django.contrib.auth.models.User`
    model. The `UserSerializer` class declares a `games` attribute as an instance
    of the previously explained `UserGameSerializer` with `many` and `read_only` equal
    to `True` because it is a one-to-many relationship and is read-only. We use the
    `games` name that we specified as the `related_name` string value when we added
    the `owner` field as a `models.ForeignKey` instance in the `Game` model. This
    way, the `games` field will provide us with an array of URLs and names for each
    game that belongs to the user.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserSerializer` 类是 `HyperlinkedModelSerializer` 超类的子类。这个序列化器类与 `django.contrib.auth.models.User`
    模型相关。`UserSerializer` 类声明了一个 `games` 属性，它是一个之前解释过的 `UserGameSerializer` 的实例，其中
    `many` 和 `read_only` 都设置为 `True`，因为它是一个一对多关系，并且是只读的。我们使用 `games` 名称，我们在将 `owner`
    字段作为 `models.ForeignKey` 实例添加到 `Game` 模型时指定的 `related_name` 字符串值。这样，`games` 字段将为我们提供每个属于用户的游戏的
    URL 和名称数组。'
- en: 'We will make more changes to the `serializers.py` file in the `game``s_service/games`
    folder. We will add an `owner` field to the existing `GameSerializer` class. The
    following lines show the new code for the `GameSerializer` class. The new and
    edited lines are highlighted. The code file for the sample is included in the
    `restful_python_2_07_04` folder, in the `Django01/games-service/games/serializers.py`
    file:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `game`s_service/games 文件夹中的 `serializers.py` 文件进行更多修改。我们将向现有的 `GameSerializer`
    类添加一个 `owner` 字段。以下行显示了 `GameSerializer` 类的新代码。新和编辑的行被突出显示。示例的代码文件包含在 `restful_python_2_07_04`
    文件夹中，在 `Django01/games-service/games/serializers.py` 文件中：
- en: '[PRE16]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Now the `GameSerializer` class declares an `owner` attribute as an instance
    of the `serializers.ReadOnlyField` class with `source` equal to `'owner.username'`.
    This way, we will serialize the value for the `username` field of the related
    `django.contrib.auth.User` hold in the `owner` field. We use the `ReadOnlyField`
    class because the owner is automatically populated when an authenticated user
    creates a game, and therefore, it won't be possible to change the owner after
    a game has been created. This way, the `owner` field will provide us with the
    username that created the game. In addition, we added `'owner'` to the `fields`
    string tuple declared in the `Meta` inner class.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`GameSerializer` 类声明了一个 `owner` 属性，它是一个 `serializers.ReadOnlyField` 类的实例，其中
    `source` 等于 `'owner.username'`。这样，我们将序列化相关 `django.contrib.auth.User` 中 `owner`
    字段持有的 `username` 字段的值。我们使用 `ReadOnlyField` 类，因为当认证用户创建游戏时，所有者会自动填充，因此，在游戏创建后不可能更改所有者。这样，`owner`
    字段将为我们提供创建游戏的用户名。此外，我们还向在 `Meta` 内部类中声明的 `fields` 字符串元组中添加了 `'owner'`。
- en: Creating a customized permission class for object-level permissions
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个用于对象级权限的自定义权限类
- en: 'Create a new Python file named `customized_permissions.py` within the `games_service/games`
    folder and enter the following code that declares the new `IsOwnerOrReadOnly`
    class. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/customized_permissions.py` file:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service/games`文件夹内创建一个名为`customized_permissions.py`的新Python文件，并输入以下声明新`IsOwnerOrReadOnly`类的代码。示例代码文件包含在`restful_python_2_07_04`文件夹中，位于`Django01/games-service/games/customized_permissions.py`文件中：
- en: '[PRE17]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The `rest_framework.permissions.BasePermission` class is the base class from
    which all permission classes should inherit. ...
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`rest_framework.permissions.BasePermission`类是所有权限类应该继承的基础类。...'
- en: Persisting the user that makes a request and configuring permission policies
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 持久化发起请求的用户并配置权限策略
- en: 'We want to be able to list all the users and retrieve the details for a single
    user. We will create subclasses of the two following generic class views declared
    in the `rest_framework.generics` module:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够列出所有用户并检索单个用户的详细信息。我们将创建`rest_framework.generics`模块中声明的两个以下通用类视图的子类：
- en: '`ListAPIView`: Implements the `get` method that retrieves a listing of  `queryset`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListAPIView`：实现了`get`方法，用于检索`queryset`的列表'
- en: '`RetrieveAPIView`: Implements the `get` method to retrieve a model instance'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RetrieveAPIView`：实现了`get`方法以检索模型实例'
- en: 'Open the `views.py` file in the `games_service/games` folder. Add the following
    code after the last line that declares the imports, before the declaration of
    the `GameCategoryList` class. The code file for the sample is included in the
    `restful_python_2_07_04` folder, in the `Django01/games-service/games/views.py`
    file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service/games`文件夹中打开`views.py`文件。在声明导入的最后一行之后，在`GameCategoryList`类声明之前添加以下代码。示例代码文件包含在`restful_python_2_07_04`文件夹中，位于`Django01/games-service/games/views.py`文件中：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `ApiRoot` class declared in the `views.py`
    file. This way, we will be able to navigate to the users related views through
    the Browsable API. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/views.py` file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 继续编辑`games_service/games`文件夹中的`views.py`文件。将以下高亮显示的行添加到`views.py`文件中声明的`ApiRoot`类中。这样，我们就能通过可浏览API导航到与用户相关的视图。示例代码文件包含在`restful_python_2_07_04`文件夹中，位于`Django01/games-service/games/views.py`文件中：
- en: '[PRE19]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `GameList` class-based view to override the
    `perform_create` method inherited from the `rest_framework.mixins.CreateModelMixin`
    superclass. Remember that the `generics.ListCreateAPIView` class inherits from
    `CreateModelMixin` class and other classes. The code in the new method will populate `owner`
    before a new `Game` instance is persisted in the database. In addition, the new
    code overrides the value for the `permission_classes` class attribute to configure
    permission policies for the class-based view. The code file for the sample is
    included in the `restful_python_2_07_04` folder, in the `Django01/games-service/games/views.py`
    file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 继续编辑`games_service/games`文件夹中的`views.py`文件。将以下高亮显示的行添加到`GameList`类视图以覆盖从`rest_framework.mixins.CreateModelMixin`超类继承的`perform_create`方法。记住，`generics.ListCreateAPIView`类继承自`CreateModelMixin`类和其他类。新方法中的代码将在将新的`Game`实例持久化到数据库之前填充`owner`。此外，新代码覆盖了`permission_classes`类属性的值，以配置基于类的视图的权限策略。示例代码文件包含在`restful_python_2_07_04`文件夹中，位于`Django01/games-service/games/views.py`文件中：
- en: '[PRE20]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The code for the overridden `perform_create` method passes an additional `owner`
    field to the `create` method by setting a value for the `owner` argument for the
    call to the `serializer.save` method. The code sets the `owner` attribute to the
    value of `self.request.user`, that is, to the user associated to the request.
    This way, whenever a new game is persisted, it will save the user associated to
    the request as its owner.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖的`perform_create`方法的代码通过为`serializer.save`方法的调用设置`owner`参数的值，将额外的`owner`字段传递给`create`方法。代码将`owner`属性设置为`self.request.user`的值，即与请求关联的用户。这样，每次持久化新的游戏时，它都会将请求关联的用户保存为其所有者。
- en: 'Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `GameDetail` class-based view to override the
    value for the `permission_classes` class attribute to configure permission policies
    for the class-based view. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/views.py` file:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`games_service/games`文件夹中的`views.py`文件中继续编辑。将以下高亮行添加到`GameDetail`类视图以覆盖`permission_classes`类属性的值，以配置基于类的视图的权限策略。示例代码文件包含在`restful_python_2_07_04`文件夹中的`Django01/games-service/games/views.py`文件中：
- en: '[PRE21]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We have included the `IsAuthenticatedOrReadOnly` class and our previously created
    `IsOwnerOrReadOnly` permission class in the `permission_classes` tuple for both
    the `GameList` and `GameDetail` classes.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在`permission_classes`元组中为`GameList`和`GameDetail`类都包含了`IsAuthenticatedOrReadOnly`类和之前创建的`IsOwnerOrReadOnly`权限类。
- en: 'Open the `urls.py` file in the `games_service/games` folder. Add the following
    elements to the `urlpatterns` string list. The new strings define the URL patterns
    that specify the regular expressions that have to be matched in the request to
    run a specific method for the previously created class-based views in the `views.py`
    file: `UserList` and `UserDetail`. The code file for the sample is included in
    the `restful_python_2_07_04` folder, in the `Django01/games-service/games/serializers.py`
    file:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`games_service/games`文件夹中的`urls.py`文件。将以下元素添加到`urlpatterns`字符串列表中。新字符串定义了指定请求中必须匹配的正则表达式的URL模式，以在`views.py`文件中运行之前创建的基于类的视图的特定方法：`UserList`和`UserDetail`。示例代码文件包含在`restful_python_2_07_04`文件夹中的`Django01/games-service/games/serializers.py`文件中：
- en: '[PRE22]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now open the `urls.py` file in the `games_service` folder, specifically, the
    `games_service/urls.py` file. The file defines the root URL configurations and
    we want to include the URL patterns to allow the Browsable API to display the
    login and logout views. The following lines show the new code with the added line
    highlighted. The code file for the sample is included in the `restful_python_2_07_04`
    folder, in the `Django01/games-service/games/serializers.py` file:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 现在打开`games_service`文件夹中的`urls.py`文件，特别是`games_service/urls.py`文件。该文件定义了根URL配置，我们希望包含URL模式以允许可浏览API显示登录和注销视图。以下行显示了添加了高亮的新代码。示例代码文件包含在`restful_python_2_07_04`文件夹中的`Django01/games-service/games/serializers.py`文件中：
- en: '[PRE23]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The new line adds the URL patterns defined in the `rest_framework.urls` module
    and associates them to the `^api-auth/ pattern`. The browsable API uses `api-auth/`
    as a prefix for all the view related to the user login and logout
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 新增行添加了在`rest_framework.urls`模块中定义的URL模式，并将它们关联到`^api-auth/`模式。可浏览API使用`api-auth/`作为所有与用户登录和注销相关的视图的前缀
- en: Setting a default value for a new required field in migrations
  id: totrans-99
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在迁移中为新的必填字段设置默认值
- en: We have persisted many games in our database and we have added a new `owner`
    field for the games that are a required field. We don't want to delete all the
    existing games, and therefore, we will take advantage of some features in Django
    that make it easy for us to make the changes in the underlying database without
    losing the existing data.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的数据库中持续了很多游戏，并为那些是必填字段的游戏添加了一个新的`owner`字段。我们不希望删除所有现有的游戏，因此，我们将利用Django的一些特性，这些特性使我们能够轻松地在底层数据库中做出更改，而不会丢失现有数据。
- en: Now we need to retrieve the `id` for the superuser we have created to use it
    as the default owner for the existing games. Django will allow us to easily update
    the existing games to set the owner user for them.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要检索我们创建的超级用户的`id`，以便将其用作现有游戏的默认所有者。Django将允许我们轻松地更新现有游戏，为它们设置所有者用户。
- en: Run the following commands to retrieve the `id` from the `auth_user` table for
    the row whose `username` matches `'superuser'`. Replace `your_games_super_user
    ...`
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以从`auth_user`表中检索与`username`匹配`'superuser'`的行的`id`。替换`your_games_super_user
    ...`
- en: Composing requests with the necessary authentication
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用必要的认证来组合请求
- en: 'Now we will write a command to compose and send an HTTP `POST` request to create
    a new game without authentication credentials. The code file for the sample is
    included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd721.txt`
    file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将编写一个命令来组合并发送一个不需要认证凭据的HTTP `POST`请求以创建一个新的游戏。示例代码文件包含在`restful_python_2_07_04`文件夹中的`Django01/cmd/cmd721.txt`文件中：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd722.txt`
    file:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_07_04` 文件夹中的 `Django01/cmd/cmd722.txt`
    文件中：
- en: '[PRE25]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'We will receive a `403 Forbidden` status code in the response header and a
    detailed message indicating that we didn''t provide authentication credentials
    in the JSON body. The following lines show a sample response:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在响应头中收到一个 `403 Forbidden` 状态码，并在 JSON 体的详细消息中指出我们没有提供认证凭据。以下是一些示例响应行：
- en: '[PRE26]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'If we want to create a new game, that is, to make a `POST` request to `/games/`,
    we need to provide authentication credentials by using HTTP authentication. Now
    we will compose and send an HTTP request to create a new game with authentication
    credentials, that is, with the superuser name and their password. Remember to
    replace `your_games_super_user` with the name you used for the superuser and `WCS3qn!a4ybX#`
    with the password you configured for this user. The code file for the sample is
    included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd723.txt`
    file:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要创建一个新的游戏，即向 `/games/` 发送一个 `POST` 请求，我们需要通过使用 HTTP 认证来提供认证凭据。现在我们将编写并发送一个带有认证凭据的
    HTTP 请求来创建一个新的游戏，即使用超级用户名称和他们的密码。请记住将 `your_games_super_user` 替换为你为超级用户使用的名称，将
    `WCS3qn!a4ybX#` 替换为你为该用户配置的密码。示例代码文件包含在 `restful_python_2_07_04` 文件夹中的 `Django01/cmd/cmd723.txt`
    文件中：
- en: '[PRE27]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd724.txt`
    file:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_07_04` 文件夹中的 `Django01/cmd/cmd724.txt`
    文件中：
- en: '[PRE28]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If the new `Game` with the user named `your_games_super_user` as its owner
    was successfully persisted in the database, the function returns an HTTP `201
    Created` status code and the recently-persisted `Game` serialized to JSON in the
    response body. The following lines show an example response for the HTTP request,
    with the new `Game` object in the JSON response:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果以 `your_games_super_user` 命名的用户作为其所有者的新 `Game` 在数据库中成功持久化，则函数将返回一个 HTTP `201
    Created` 状态码，并在响应体中将最近持久化的 `Game` 序列化为 JSON。以下是一些示例响应行，其中包含 JSON 响应中的新 `Game`
    对象：
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Now we will compose and send an HTTP `PATCH` request to update the `played_once`
    and `played_times` field values for the previously created game with authentication
    credentials. However, in this case, we will use the other user we created in Django
    to authenticate the request. Remember to replace `gaston-hillar` with the name
    you used for the user and `FG$gI^76q#yA3v` with their password. In addition, replace
    `13` with the `id` generated for the previously-created game in your configuration.
    The code file for the sample is included in the `restful_python_2_07_04` folder,
    in the `Django01/cmd/cmd725.txt` file:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将使用认证凭据来编写并发送一个 HTTP `PATCH` 请求，以更新之前创建的游戏的 `played_once` 和 `played_times`
    字段值。然而，在这种情况下，我们将使用在 Django 中创建的另一个用户来认证请求。请记住将 `gaston-hillar` 替换为你为用户使用的名称，将
    `FG$gI^76q#yA3v` 替换为他们的密码。此外，将 `13` 替换为你配置中为之前创建的游戏生成的 `id`。示例代码文件包含在 `restful_python_2_07_04`
    文件夹中的 `Django01/cmd/cmd725.txt` 文件中：
- en: '[PRE30]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd726.txt`
    file:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_07_04` 文件夹中的 `Django01/cmd/cmd726.txt`
    文件中：
- en: '[PRE31]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We will receive a `403 Forbidden` status code in the response header and a
    detailed message indicating that we do not have permission to perform the action
    in the JSON body. The owner for the game we want to update is `your_games_super_user`
    and the authentication credentials for this request use a different user. Hence,
    the operation is rejected by the `has_object_permission` method in the `IsOwnerOrReadOnly`
    class. The following lines show a sample response:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在响应头中收到一个 `403 Forbidden` 状态码，并在 JSON 体的详细消息中指出我们没有权限执行该操作。我们想要更新的游戏的拥有者是
    `your_games_super_user`，而此请求的认证凭据使用了一个不同的用户。因此，操作被 `IsOwnerOrReadOnly` 类中的 `has_object_permission`
    方法拒绝。以下是一些示例响应行：
- en: '[PRE32]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'If we compose and send an HTTP request with the same authentication credentials
    for that resource with the `GET` method, we will be able to retrieve the game
    that the specified user doesn''t own. The request will work because `GET` is one
    of the safe methods and a user that is not the owner is allowed to read the game.
    Remember to replace `gaston-hillar` with the name you used for the user and `FG$gI^76q#yA3v`
    with their password. In addition, replace `13` with the ID generated for the previously
    created game in your configuration. The code file for the sample is included in
    the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd727.txt` file:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用相同的身份验证凭据，通过 `GET` 方法发送一个 HTTP 请求来获取该资源，我们就能检索到指定用户不拥有的游戏。请求将成功，因为 `GET`
    是安全方法之一，并且非所有者用户被允许读取游戏。请记住将 `gaston-hillar` 替换为你为用户使用的名称，将 `FG$gI^76q#yA3v` 替换为他们的密码。此外，将
    `13` 替换为你配置中为之前创建的游戏生成的 ID。示例代码文件包含在 `restful_python_2_07_04` 文件夹中的 `Django01/cmd/cmd727.txt`
    文件中：
- en: '[PRE33]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_07_04` folder, in the `Django01/cmd/cmd728.txt`
    file:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是对应的 `curl` 命令。示例代码文件包含在 `restful_python_2_07_04` 文件夹中的 `Django01/cmd/cmd728.txt`
    文件中：
- en: '[PRE34]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Browsing the API with authentication credentials
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用身份验证凭据浏览 API
- en: Open a web browser and enter `http://localhost:8000/`. Replace `localhost` with
    the IP of the computer that is running the Django development server if you use
    another computer or device to run the browser. The Browsable API will compose
    and send a `GET` request to `/` and will display the results of its execution,
    that is, the API root. You will notice there is a Log in hyperlink at the upper-right
    corner.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个网络浏览器并输入 `http://localhost:8000/`。如果你使用另一台计算机或设备运行浏览器，请将 `localhost` 替换为运行
    Django 开发服务器的计算机的 IP 地址。可浏览 API 将组成并发送一个 `GET` 请求到 `/`，并显示其执行的结果，即 API 根。你将注意到右上角有一个“登录”超链接。
- en: Click Log in and the browser will display the Django REST Framework login page.
    Enter `gaston-hillar` in the username field, enter `FG$gI^76q#yA3v` in the password
    field, and click Log In. Now, you will be logged in as `gaston-hillar` and all
    the requests you compose and send through the Browsable API ...
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 点击“登录”，浏览器将显示 Django REST 框架的登录页面。在用户名字段中输入 `gaston-hillar`，在密码字段中输入 `FG$gI^76q#yA3v`，然后点击“登录”。现在，你将作为
    `gaston-hillar` 登录，并且你将通过可浏览 API 组成和发送的所有请求 ...
- en: Test your knowledge
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的知识
- en: 'Let''s see whether you can answer the following questions correctly:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看你是否能正确回答以下问题：
- en: Which of the following lines define a field named `title` in a model that will
    generate a unique constraint on this field?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪一行定义了一个名为 `title` 的字段，该字段将在模型中生成一个唯一约束？
- en: '`title = django.db.models.CharField(max_length=250, unique=True)`'
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`title = django.db.models.CharField(max_length=250, unique=True)`'
- en: '`title = django.db.models.UniqueCharField(max_length=250)`'
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`title = django.db.models.UniqueCharField(max_length=250)`'
- en: '`title = django.db.models.CharField(max_length=250, options=django.db.models.unique_constraint)`'
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`title = django.db.models.CharField(max_length=250, options=django.db.models.unique_constraint)`'
- en: Which of the following lines define a field named `title` in a model that won't
    generate a unique constraint on this field?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪一行定义了一个名为 `title` 的字段，该字段在模型中不会生成唯一约束？
- en: '`title = django.db.models.CharField(max_length=250, unique=False)`'
  id: totrans-136
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`title = django.db.models.CharField(max_length=250, unique=False)`'
- en: '`title = django.db.models.NonUniqueCharField(max_length=250)`'
  id: totrans-137
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`title = django.db.models.NonUniqueCharField(max_length=250)`'
- en: '`title = django.db.models.CharField(max_length=250, options=django.db.models.allow_duplicates)`'
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`title = django.db.models.CharField(max_length=250, options=django.db.models.allow_duplicates)`'
- en: Which of the following setting's keys in the `REST_FRAMEWORK` dictionary specifies
    a global setting with the default pagination class that the generic views will
    use to provide paginated responses?
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下 `REST_FRAMEWORK` 字典中哪个设置的键指定了一个全局设置，该设置将使用默认的分页类为通用视图提供分页响应？
- en: '`DEFAULT_PAGINATED_RESPONSE_PARSER`'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DEFAULT_PAGINATED_RESPONSE_PARSER`'
- en: '`DEFAULT_PAGINATION_CLASS`'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DEFAULT_PAGINATION_CLASS`'
- en: '`DEFAULT_PAGINATED_RESPONSE_CLASS`'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DEFAULT_PAGINATED_RESPONSE_CLASS`'
- en: Which of the following pagination classes provides a limit/offset-based style
    in Django REST framework?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个分页类在 Django REST 框架中提供了基于限制/偏移量的样式？
- en: '`rest_framework.pagination.LimitOffsetPaging`'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.pagination.LimitOffsetPaging`'
- en: '`rest_framework.styles.LimitOffsetPagination`'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.styles.LimitOffsetPagination`'
- en: '`rest_framework.pagination.LimitOffsetPagination`'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.pagination.LimitOffsetPagination`'
- en: 'The `rest_framework.authentication.BasicAuthentication` class:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.authentication.BasicAuthentication` 类：'
- en: Works with Django's session framework for authentication
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Django的会话框架一起用于认证
- en: Provides an HTTP basic authentication against username and password
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供基于用户名和密码的HTTP基本认证
- en: Provides a simple token-based authentication
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供基于简单令牌的认证
- en: 'The `rest_framework.authentication.SessionAuthentication` class:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`rest_framework.authentication.SessionAuthentication`类：'
- en: Works with Django's session framework for authentication
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与Django的会话框架一起用于认证
- en: Provides an HTTP basic authentication against username and password
  id: totrans-153
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供基于用户名和密码的HTTP基本认证
- en: Provides a simple token-based authentication
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供基于简单令牌的认证
- en: 'Which of the following setting''s keys in the `REST_FRAMEWORK` dictionary specifies
    a global setting with a tuple of string that indicates the classes we want to
    use for authentication?:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`REST_FRAMEWORK`字典中，以下哪个设置的键指定了一个全局设置，该设置是一个字符串元组，表示我们想要用于认证的类？
- en: '`DEFAULT_AUTH_CLASSES`'
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DEFAULT_AUTH_CLASSES`'
- en: '`AUTHENTICATION_CLASSES`'
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`AUTHENTICATION_CLASSES`'
- en: '`DEFAULT_AUTHENTICATION_CLASSES`'
  id: totrans-158
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`DEFAULT_AUTHENTICATION_CLASSES`'
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we improved the RESTful API in many ways. We added unique constraints
    to the model and updated the database, we made it easy to update single fields
    with the `PATCH` method, and we took advantage of pagination.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们从多个方面改进了RESTful API。我们向模型中添加了唯一约束并更新了数据库，使得使用`PATCH`方法更新单个字段变得容易，并利用了分页。
- en: Then, we started working with authentication, permissions, and throttling. We
    added security-related data to the models and we updated the database. We made
    many changes in the different pieces of code to achieve a specific security goal
    and we took advantage of Django REST Framework's authentication and permissions
    features.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始处理认证、权限和速率限制。我们向模型中添加了与安全相关的数据，并更新了数据库。我们在不同的代码片段中进行了许多更改，以实现特定的安全目标，并利用了Django
    REST Framework的认证和权限功能。
- en: Now that we have built an improved and complex API that takes into account authentication
    and uses permission policies, we will use additional abstractions included in
    the framework, adding ...
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了一个改进且复杂的API，它考虑了认证并使用了权限策略，我们将使用框架中包含的额外抽象，添加...
