- en: Chapter 2. Variables, Functions, and Users
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：变量、函数和用户
- en: 'In the previous chapter, you learned how to install Python on your computer.
    You also learned how to use the `print` statement in Python and printed some messages
    using your Python shell. We are now going to jump into a lot of details so that
    we can build our first project together. It will include the following:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何在你的计算机上安装Python。你还学习了如何在Python中使用`print`语句，并使用你的Python shell打印了一些消息。我们现在将深入很多细节，以便我们可以一起构建我们的第一个项目。它将包括以下内容：
- en: Variables
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量
- en: Variable names
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量名
- en: Strings, integers, and floats
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串、整数和浮点数
- en: Functions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数
- en: Variables
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量
- en: A variable is when one letter or word is used to represent a different letter,
    word, number, or value. One way to think of a variable is to imagine that you
    are programming a computer so that it can make memories. For example, my name
    is Jessica. If I am writing a computer program and I want that program to remember
    my name, I will assign my name to a variable. This will look like `name = 'Jessica'`.
    The variable is `name`. `Jessica` in the memory.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是指用一个字母或单词来代表不同的字母、单词、数字或值。一种思考变量的方式是想象你正在编写计算机程序，以便它可以记住东西。例如，我的名字是Jessica。如果我正在编写一个计算机程序，并且想让这个程序记住我的名字，我会将我的名字分配给一个变量。这看起来像`name
    = 'Jessica'`。变量是`name`。`Jessica`在内存中。
- en: Perhaps I would like the computer to remember something else about me as well.
    Maybe I want the computer program to remember that I am 64 inches, or roughly
    128 cm, tall. I will say `height_inches = 64` or `height_centimeters = 128`. The
    variables here are `height_inches` and `height_centimeters`. The memories are
    my height in inches and my height in centimeters.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 也许我还想让计算机记住关于我的其他信息。也许我想要计算机程序记住我身高64英寸，或者大约128厘米。我会说`height_inches = 64`或`height_centimeters
    = 128`。这里的变量是`height_inches`和`height_centimeters`。这些记忆是我的身高（英寸）和我的身高（厘米）。
- en: Why don't you try giving a computer the `name` variable with your name and then
    a `height` variable with your height?
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 你为什么不尝试给计算机一个包含你名字的`name`变量，然后一个包含你身高的`height`变量？
- en: 'First, open your Python shell and type the following code:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开你的Python shell并输入以下代码：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Now that the variables are stored, you can type `print(name)` or `print(height)`.
    Since you created a memory for the computer with your name and your height, the
    computer will print the memory that you gave it. If you take a look at the screenshot
    from my Python shell, you will see that the computer printed the memories that
    I assigned it. Notice that we do not use single quotes around the variable names:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在变量已经存储了，你可以输入`print(name)`或`print(height)`。由于你为计算机创建了一个包含你的名字和身高的记忆，计算机将打印出你给出的记忆。如果你查看我的Python
    shell的截图，你会看到计算机打印出了我分配给它的记忆。注意，我们不需要在变量名周围使用单引号：
- en: '![Variables](img/B04681_02_01.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![变量](img/B04681_02_01.jpg)'
- en: If the values, or memories, that you assigned to the variables are printed in
    your Python terminal, then it is perfect. If not, you may have an error. There
    are a lot of reasons due to which an error can occur. You may have typed your
    variable name or your information in a way that breaks the Python convention.
    Some common errors include using capital letters.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你分配给变量的值或记忆在Python终端中打印出来，那么就是完美的。如果没有，你可能有一个错误。由于许多原因，可能会发生错误。你可能以违反Python约定的方式输入了变量名或信息。一些常见的错误包括使用大写字母。
- en: Naming variables – conventions to follow
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量命名 - 遵循的约定
- en: There are some conventions that are used to name variables in Python. It might
    seem silly to have guidelines about naming things, but following the conventions
    is really important because it helps other people read your code. Also, the Python
    shell is designed to work with the conventions.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中命名变量有一些约定。关于命名事物的指南可能看起来很愚蠢，但遵循这些约定非常重要，因为它有助于其他人阅读你的代码。此外，Python shell被设计为与这些约定一起工作。
- en: To avoid errors, your variable names should use lowercase letters. If your variable
    uses more than one word, such as the `height_inches` variable, then it should
    have underscores to connect the words together.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免错误，你的变量名应该使用小写字母。如果你的变量由多个单词组成，例如`height_inches`变量，那么它应该使用下划线来连接单词。
- en: 'If you use two words to name your variable and do not connect them with an
    underscore, you will get an error. Take a look at the following screenshot and
    see where it says `SyntaxError: invalid syntax`. Notice this error occurred because
    the `height centimeters` variable did not have an underscore to connect the words:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你用两个单词来命名你的变量并且没有用下划线连接它们，你会得到一个错误。看看下面的截图，看看它说`SyntaxError: invalid syntax`在哪里。注意这个错误发生是因为`height
    centimeters`变量没有用下划线来连接单词：'
- en: '![Naming variables – conventions to follow](img/B04681_02_02.jpg)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![命名变量 - 遵循的约定](img/B04681_02_02.jpg)'
- en: What can variables remember?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 变量能记住什么？
- en: Python variables can be programmed to remember all kinds of information! You
    will notice in our original example that we stored a word and then a number. There
    are three different kinds of information that we will be using to build our calculator
    in [Chapter 3](ch03.html "Chapter 3. Calculate This!"), *Calculate This*!, strings,
    integers, and floats. Each bit of information is input and output a little differently.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python变量可以被编程来记住各种信息！你会在我们的原始示例中注意到，我们存储了一个单词然后是一个数字。我们将使用三种不同类型的信息来构建我们的计算器，在[第3章](ch03.html
    "第3章。计算这个！")，*计算这个*！，字符串、整数和浮点数。每条信息输入和输出的方式都略有不同。
- en: Strings
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: 'In Python, a string is any piece of data that''s captured between two single
    quote marks, that is, these symbols `''` `''`. Sometimes, double quotation marks
    are used. For example, I can have a string variable that looks like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，字符串是任何被两个单引号包围的数据，即这些符号`'` `'`。有时也会使用双引号。例如，我可以有一个看起来像这样的字符串变量：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'This string variable contains letters and words. Most string variables do.
    However, you can store a number as a string also as long as that number is in
    single quotes:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字符串变量包含字母和单词。大多数字符串变量都是这样。然而，只要这个数字在单引号中，你也可以把它作为一个字符串存储：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If we can store all kinds of information as strings, why do we need other data
    types? Well, when we store numbers as strings, we cannot do math with the numbers!
    Type this problem into your Python shell, and then you will see why we need data
    types besides strings:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们可以将所有信息作为字符串存储，为什么还需要其他数据类型呢？嗯，当我们把数字作为字符串存储时，我们不能对数字进行数学运算！把这个问题输入到你的Python壳中，然后你就会看到为什么我们除了字符串之外还需要数据类型：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'What happened in your Python shell? You might have expected the printed output
    to be `30` since `10` plus `20` is equal to `30`. However, Python saw each number
    as a text string and simply put the two text strings next to each other. So, your
    result was probably `1020`. Here is how this looks in the Python shell:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Python壳中发生了什么？你可能预计打印的输出会是`30`，因为`10`加`20`等于`30`。然而，Python把每个数字都看作是一个文本字符串，只是简单地把两个文本字符串并排放置。所以，你的结果可能是`1020`。这就是它在Python壳中的样子：
- en: '![Strings](img/B04681_02_03.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![字符串](img/B04681_02_03.jpg)'
- en: Integers
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 整数
- en: Computers are really great at math, and math will allow us to execute more complicated
    programs, such as games. Python stores whole number data as integers.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机在数学方面真的很擅长，数学将使我们能够执行更复杂的程序，例如游戏。Python将整个数字数据存储为整数。
- en: 'Let''s start with integers:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从整数开始：
- en: An integer is simply a plain whole number. If we want to make our variables
    store integers, we would take away the quotes.
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数就是一个简单的纯整数。如果我们想让变量存储整数，我们就去掉引号。
- en: Then, when we add the two variables and print the output, we will get a mathematical
    result.
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 然后，当我们把两个变量相加并打印输出时，我们会得到一个数学结果。
- en: 'Try it out! Let''s do some math with these variables:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试一下！让我们用这些变量做一些数学运算：
- en: 'Type the following two variables in your Python shell:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的Python壳中输入以下两个变量：
- en: '[PRE4]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Then, print the output by typing `print` and the variables:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，通过输入`print`和变量来打印输出：
- en: '[PRE5]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After completing step 2, press *Enter*. Your result should be `30`. This is
    because Python is reading the numbers as integers, and Python understands integers
    with mathematical operators. In fact, Python understands math so well that you
    will notice that no equals sign was needed to tell Python to output the answer.
    Take a look at this screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成步骤2后，按*Enter*。你的结果应该是`30`。这是因为Python将数字读作整数，Python理解带有数学运算符的整数。事实上，Python对数学的理解如此之好，以至于你可能会注意到不需要等号来告诉Python输出答案。看看这个截图：
- en: '![Integers](img/B04681_02_04.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![整数](img/B04681_02_04.jpg)'
- en: Floating point numbers (floats)
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 浮点数（浮点数）
- en: 'Hopefully, you now better understand how Python works with integers (whole
    numbers). However, people and computers often need to work in fractional numbers.
    In Python, these numbers are called **floating point numbers**, but many people
    call them *floats* as a shortcut:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '希望你现在更好地理解了Python如何处理整数（整数）。然而，人和计算机通常需要使用分数数。在Python中，这些数字被称为**浮点数**，但许多人将其简称为*floats*： '
- en: Floats are actually a really fancy way of saying *numbers using decimals*
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数实际上是一种非常花哨的说法，即使用小数表示的*数字*
- en: Floats are called this because the decimal point can be anywhere among the numbers,
    allowing for decimals of many different sizes
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 浮点数之所以被称为这样，是因为小数点可以在数字中的任何位置，允许有不同大小的分数
- en: Setting numbers as floats allows us to do more complicated math using fractional
    numbers
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将数字设置为浮点数允许我们使用分数数进行更复杂的数学运算
- en: To set a variable to a float, you don't have to do anything special or different
    from what you did to set the integers
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要将变量设置为浮点数，你不需要做任何特殊或不同于设置整数的事情
- en: Python knows that a number input (a variable, for example) with a decimal point
    is a float, and Python will output the answers as a float if the problem is clear
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python知道带有小数点的数字输入（例如变量）是浮点数，如果问题明确，Python将输出答案作为浮点数
- en: 'In your Python shell, try this math problem using floating point numbers instead
    of integers:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Python壳中，尝试使用浮点数而不是整数来解决这个问题：
- en: '[PRE6]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This time, in your Python shell, you should notice that Python recognized the
    variable input as floating point numbers and was able to output the complete and
    correct answer without us having to use additional instructions. The output from
    your `print` statement should be `30.6`, as you can see in this screenshot of
    the Python shell:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，在你的Python壳中，你应该注意到Python已经识别变量input为浮点数，并且能够输出完整且正确的答案，而无需我们使用额外的指令。你的`print`语句的输出应该是`30.6`，正如你在Python壳的截图中所见：
- en: '![Floating point numbers (floats)](img/B04681_02_05.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![浮点数（floats）](img/B04681_02_05.jpg)'
- en: Combining strings, integers, and floats
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组合字符串、整数和浮点数
- en: 'So far, we have only attempted to combine items that share a data type. We
    have added two strings, two integers, or two floats. What happens when you try
    to add two different types of information, such as a string and an integer? In
    your Python shell, type the following lines of code and pay attention to the output:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只尝试组合具有相同数据类型的项。我们添加了两个字符串、两个整数或两个浮点数。当你尝试添加不同类型的信息时会发生什么，比如一个字符串和一个整数？在你的Python壳中，输入以下代码行并注意输出：
- en: '[PRE7]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You are likely to notice the error that you receive. The important line to
    pay attention to is `TypeError: cannot concatenate ''str'' and ''int'' objects`.
    Python is telling us that it cannot work with these two different data types and
    that makes sense. So, if you do make a mistake in your typing or try to execute
    an operation in two different data types, you may get an error like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '你可能会注意到你收到的错误。需要关注的重要行是`TypeError: cannot concatenate ''str'' and ''int'' objects`。Python告诉我们它不能处理这两种不同的数据类型，这是有道理的。所以，如果你在输入时出错或尝试在两种不同的数据类型中执行操作，你可能会得到这样的错误：'
- en: '![Combining strings, integers, and floats](img/B04681_02_06.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![组合字符串、整数和浮点数](img/B04681_02_06.jpg)'
- en: Functions
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: Once we have variables, we can use them to do some pretty interesting things.
    The most interesting thing is to build functions. Python functions are blocks
    of code that we can build to do a specific job. We build these functions once,
    and then we can reuse them in our code just by typing the name. This is really
    helpful. For example, if I need to write a program that adds two numbers (a calculator,
    for example), I do not want to have to write three or four lines of code every
    time I want to add two numbers. Instead, I want to write one function that can
    add two numbers together, and then use that single line whenever I need to add
    numbers.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了变量，我们就可以使用它们做一些非常有趣的事情。最有趣的事情是构建函数。Python函数是我们可以构建以执行特定任务的代码块。我们只需构建一次这些函数，然后只需通过输入名称就可以在代码中重复使用它们。这非常有帮助。例如，如果我要编写一个程序来添加两个数字（例如计算器），我不想每次添加两个数字时都不得不编写三行或四行的代码。相反，我想编写一个可以相加两个数字的函数，然后在我需要添加数字时使用这一行。
- en: Before we begin building functions of our own, we need to also know that Python
    has a lot of amazing functions that are built in. Some of Python's functions are
    things we will use all the time. Others we won't talk about in this book, but
    as you become a more skilled programmer, you will learn more about Python's built-in
    functions.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始构建自己的函数之前，我们还需要知道 Python 有很多内置的令人惊叹的函数。Python 的一些函数是我们将经常使用的。其他的一些函数在这本书中不会讨论，但随着你成为一名更熟练的程序员，你将了解更多关于
    Python 内置函数的知识。
- en: Built-in functions
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内置函数
- en: 'Here''s something about some built-in functions and what they do:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些关于内置函数及其作用的内容：
- en: '`int()`: This converts a string or a float into an integer'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`int()`: 这将字符串或浮点数转换为整数'
- en: '`float()`: This converts a string or an integer into a float'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`float()`: 这将字符串或整数转换为浮点数'
- en: '`raw_input()`: This gets information from a user and stores it in the computer
    to use later'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw_input()`: 这从用户那里获取信息并将其存储在计算机中以供以后使用'
- en: '`str()`: This converts an integer, float, or other information into a string'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`str()`: 这将整数、浮点数或其他信息转换为字符串'
- en: '`help()`: This provides access to Python''s help'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`help()`: 这提供了访问 Python 的帮助'
- en: We will be using these functions to help us build our first project in the next
    chapter.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一章中用这些函数来帮助我们构建我们的第一个项目。
- en: Note
  id: totrans-70
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: If you are curious about what other functions are built in or if you want to
    know more, you can go to the Python documents at [https://docs.python.org/2.7/library/functions.html?highlight=built%20functions#](https://docs.python.org/2.7/library/functions.html?highlight=built%20functions#).
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你好奇其他内置函数是什么，或者你想了解更多信息，你可以访问 Python 文档在 [https://docs.python.org/2.7/library/functions.html?highlight=built%20functions#](https://docs.python.org/2.7/library/functions.html?highlight=built%20functions#)。
- en: Initially, the documents can seem overwhelming because they are very detailed.
    The detail can make the documents difficult to understand at times, but the documents
    are very helpful and are used by many programmers.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 初始时，文档可能看起来令人不知所措，因为它们非常详细。有时细节会使文档难以理解，但文档非常有帮助，并被许多程序员使用。
- en: Parts of a function
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 函数的组成部分
- en: 'There are basic parts to think about when you want to build your own function.
    First, here''s the basic function to add two numbers:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想构建自己的函数时，有一些基本部分需要考虑。首先，这是添加两个数字的基本函数：
- en: '[PRE8]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The first line of this code is new, so we need to understand what it means:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码的第一行是新的，因此我们需要理解它的含义：
- en: The first thing to notice is the word `def`. In Python, this is short for define,
    and it is used to define a new function.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先要注意的是单词 `def`。在 Python 中，这是 define 的缩写，用于定义一个新的函数。
- en: The next thing to notice is the name of the function. The name of the function
    has the same guidelines as the names of variables. A function needs to use lowercase
    letters, and when it has many words, there need to be underscores between each
    word.
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个需要注意的事项是函数的名称。函数的命名规则与变量的命名规则相同。函数需要使用小写字母，并且当它包含多个单词时，每个单词之间需要使用下划线。
- en: After the name of the `addition()` function, you will notice the parentheses
    `()`. These are empty in this function, but sometimes they are not empty. Even
    if they are, the parentheses must *ALWAYS* be a part of the function that you
    create.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `addition()` 函数的名称之后，你会注意到括号 `()`。在这个函数中它们是空的，但有时它们不是空的。即使它们是空的，括号也必须是您创建的函数的一部分。
- en: Finally, the first line of the function ends with a colon. The colon (`:`),
    ends the first line of the function.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，函数的第一行以冒号结尾。冒号（`:`）标志着函数第一行的结束。
- en: A function can be short, such as this `addition()` function, which is only four
    lines in total, or it can be really long. Every line after the first line in a
    Python function needs to be indented using spaces. When we work on building our
    own functions in the next section of this chapter, you will learn how to make
    indents in your Python shell. We will also discuss proper spacing in the text
    editor.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 一个函数可以很短，比如这个 `addition()` 函数，总共只有四行，或者它可以非常长。Python 函数中第一行之后的每一行都需要使用空格缩进。在我们本章下一节构建自己的函数时，你将学习如何在
    Python 命令行中设置缩进。我们还将讨论文本编辑器中的适当间距。
- en: There are a lot of new details to remember in order to write a function. What
    happens if you forget a detail? If you forget to indent a line, Python will let
    you know and output an error. Your function will not run, and your code will not
    work. Python's use of indentation is known as **whitespace**, and there are rules
    about whitespace use in Python.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写函数，有很多新的细节需要记住。如果你忘记了某个细节会怎样？如果你忘记缩进一行，Python会告诉你并输出错误。你的函数将不会运行，你的代码将不会工作。Python使用缩进的方式被称为**空白字符**，Python中关于空白字符的使用有一些规则。
- en: 'By now, you are very familiar with doing additions in Python, so we will keep
    working with the addition code. There are special considerations in order to write
    functions in the Python shell. Because a function is a block of code, we want
    to follow these guidelines when we are trying to perform functions in the shell:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止，你对在Python中进行加法操作已经很熟悉了，所以我们将继续使用加法代码。在Python shell中编写函数有一些特殊的注意事项。因为函数是一段代码块，当我们试图在shell中执行函数时，想要遵循以下指南：
- en: After you type the first line and press *Enter*, make sure you press *Tab* before
    you type each line
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在输入第一行并按下*Enter*键后，确保在输入每一行之前按下*Tab*键。
- en: When you have completed typing all the lines, hit *Enter* twice so that the
    Python shell knows that you are done creating the function
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你完成所有行的输入后，按两次*Enter*键，这样Python shell就知道你已经完成了函数的创建。
- en: 'In your Python shell, type the `addition()` function exactly as it appears
    here:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的Python shell中，将`addition()`函数输入得与这里显示的完全一致：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Notice how the function looks in the Python shell:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 注意函数在Python shell中的样子：
- en: '![Parts of a function](img/B04681_02_07.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![函数的组成部分](img/B04681_02_07.jpg)'
- en: 'Now that you have typed your function, you need to learn how to use the function.
    To use the function in the Python shell, type the name of the function and the
    parentheses:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经输入了函数，你需要学习如何使用这个函数。要在Python shell中使用函数，输入函数的名称和括号：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Typing the function is also known as calling the function. When you call the
    `addition()` function in the Python shell and then press *Enter*, you will get
    an output as the answer to the problem. Notice how this is displayed here:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 输入函数也被称为调用函数。当你调用Python shell中的`addition()`函数并按下*Enter*键时，你会得到一个输出作为问题的答案。注意这里是如何显示的：
- en: '![Parts of a function](img/B04681_02_08.jpg)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![函数的组成部分](img/B04681_02_08.jpg)'
- en: Compare your result to the results shown in the preceding screenshots. Once
    you know that your function runs the way you want it to, you can show it to your
    parents and friends by asking them to look at your code. It is a good idea to
    test your function by retyping it with different numbers.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的结果与前面截图中的结果进行比较。一旦你知道你的函数按预期运行，你可以通过让他们查看你的代码来向你的父母和朋友展示。一个好的主意是通过用不同的数字重新输入函数来测试你的函数。
- en: Users interacting with your program
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 与你的程序交互的用户
- en: We just built a function that adds two numbers together. Learning to make a
    program that does math is interesting, but our function is limited because our
    `addition()` function needs to have variables changed manually to calculate results
    for different numbers.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚构建了一个将两个数字相加的函数。学习编写执行数学运算的程序很有趣，但我们的函数有限，因为我们的`addition()`函数需要手动更改变量来计算不同数字的结果。
- en: What if there was a way to get information from the user and store *THAT* information
    in a variable so that it could be used by addition or subtraction functions each
    time? Anyone who has used a calculator of any kind already knows that this is
    possible. Python has a function called `raw_input()` that allows us to tell the
    program to ask the user a question. The `raw_input()` function is incredibly useful.
    We can get every kind of information from the user this way, and we can make interactions
    between the user and the computer based on the user input.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有一种方法可以从用户那里获取信息并将*该*信息存储在变量中，以便每次可以使用加法或减法函数来使用它，那会怎么样？任何使用过任何类型的计算器的人都知道这是可能的。Python有一个名为`raw_input()`的函数，允许我们告诉程序向用户提问。`raw_input()`函数非常有用。我们可以通过这种方式从用户那里获取各种信息，并且可以根据用户输入与计算机进行交互。
- en: 'We can use the Python shell to test how the `raw_input()` function works. Try
    typing these two lines of code into your Python shell:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python shell来测试`raw_input()`函数的工作方式。尝试将这些两行代码输入到你的Python shell中：
- en: '[PRE11]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'What happened here? Let''s have a look:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这里发生了什么？让我们看看：
- en: What should have happened is that you should have had a prompt in the terminal
    that asked `'What is your name?'` Then, you can type your response.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应该发生的事情是，你应该在终端中看到一个提示，询问 `'What is your name?'` 然后，你可以输入你的回答。
- en: Following your response, hit *Enter*. Nothing will happen (nothing should happen
    yet!).
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你的回答后，按 *Enter*。什么也不会发生（现在不应该发生任何事情！）。
- en: You have given the computer information (a memory) to store in the `name` variable,
    but now you need to get the information out of the `name` variable.
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你已经给计算机提供了存储在 `name` 变量中的信息（一个内存），但现在你需要从 `name` 变量中获取信息。
- en: You can get the output of the memory that the user entered by printing the `name`
    variable.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以通过打印 `name` 变量来获取用户输入的内存输出。
- en: 'In this screenshot, you can see the entire sequence in the Python shell:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个屏幕截图中，你可以看到Python壳中的整个序列：
- en: '![Users interacting with your program](img/B04681_02_09.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![用户与你的程序交互](img/B04681_02_09.jpg)'
- en: Using the text editor and the command line
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用文本编辑器和命令行
- en: So far, we have used the Python shell to write and test code. The shell is great
    because we type a line of code or even a few lines of code, and then we run them
    immediately to see whether they work. However, you may have noticed that there
    isn't a way to save any of the code that we write.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们使用Python壳来编写和测试代码。壳很棒，因为我们输入一行代码或甚至几行代码，然后立即运行它们以查看它们是否工作。然而，你可能已经注意到没有保存我们编写的任何代码的方法。
- en: 'For a program to run, it needs to have all of the code available. Using a text
    editor is just like writing a report, an email, or a paper: we write our code
    and save it; then, we go back to edit it if we want to. In order to make Python
    use and understand our file, we need to use the command line and tell Python to
    run the file.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了程序能够运行，它需要拥有所有可用的代码。使用文本编辑器就像写报告、电子邮件或论文一样：我们编写代码并保存它；然后，如果我们想修改，就回去编辑它。为了使Python使用并理解我们的文件，我们需要使用命令行并告诉Python运行该文件。
- en: To perform our next task as well as the remaining tasks in the book, we will
    use our text editor side by side with our terminal/command prompt. Let's walk
    through the setup of the text editor and command line right now.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完成本书中的下一个任务以及剩余的任务，我们将同时使用我们的文本编辑器和终端/命令提示符。现在，让我们一起来了解一下文本编辑器和命令行的设置。
- en: 'The first thing you need to do is as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做的第一件事如下：
- en: Make a special folder where you can store your code files, and remember how
    to find this folder! (Look back at [Chapter 1](ch01.html "Chapter 1. Welcome!
    Let's Get Started"), *Welcome! Let's Get Started*, for instructions.)
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建一个特殊的文件夹，用于存放你的代码文件，并记住如何找到这个文件夹！（查看[第1章](ch01.html "第1章。欢迎！让我们开始吧")，*欢迎！让我们开始吧*，获取说明。）
- en: This folder, or directory, is very important, as it will be the place where
    you put the work that you create for the rest of this book
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个文件夹，或目录，非常重要，因为这将是你存放本书其余部分所创建工作的地方
- en: Python needs to be able to access this directory to run all the programs, and
    soon, we will write files that will use other files; so, all of the files need
    to live in the same place
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python需要能够访问这个目录来运行所有程序，不久我们将编写使用其他文件的文件；因此，所有文件都需要生活在同一个地方
- en: Once you are certain that you have a special work folder, you can open the text
    editor program we set up in [Chapter 1](ch01.html "Chapter 1. Welcome! Let's Get
    Started"), *Welcome! Let's Get Started*. You will also open a new window in a
    terminal or in the command prompt.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你确定你有一个特殊的文件夹，你就可以打开我们在[第1章](ch01.html "第1章。欢迎！让我们开始吧")中设置的文本编辑器程序，*欢迎！让我们开始吧*。你还会在终端或命令提示符中打开一个新窗口。
- en: Build your own function – name()
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自己的函数 – name()
- en: So, you have learned about variables and how they store information. You have
    also learned about how these variables can be used inside of a function. Finally,
    you have learned how to use special Python functions, such as `input()`, to help
    get information from users and store it in the computer. You are ready to build
    your own function using variables and `input()`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你已经了解了变量以及它们如何存储信息。你还了解了这些变量如何在函数内部使用。最后，你学习了如何使用特殊的Python函数，如 `input()`，来帮助从用户那里获取信息并将其存储在计算机中。你现在可以使用变量和
    `input()` 构建自己的函数。
- en: Set up your project file
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置你的项目文件
- en: The function that we will build now is called `name()`. The purpose of this
    function will be to ask the user their name, store (remember) the name, and then
    print out a friendly message to the user.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在要构建的函数叫做 `name()`。这个函数的目的将是询问用户他们的名字，存储（记住）这个名字，然后向用户打印一条友好的信息。
- en: 'To start this function, do the following:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要启动这个函数，请按照以下步骤操作：
- en: Open a new file in your text editor.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的文本编辑器中打开一个新文件。
- en: Go to **Save** and name the file `name.py`.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**保存**并命名文件为`name.py`。
- en: Tip
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You need to use `.py` at the end of all of your code files so that the files
    run in the terminal/command prompt. Python only recognizes `.py` files.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你需要在所有代码文件末尾使用`.py`，这样文件才能在终端/命令提示符中运行。Python只识别`.py`文件。
- en: Save the file in the folder you made for all of your Python work.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存在你为所有Python工作创建的文件夹中。
- en: Begin your project
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始你的项目
- en: 'Once you have set up a project file, the first thing you might want to do is
    add a short comment to your file. A comment allows humans to quickly understand
    what is happening in the code. Whenever you are writing something that is not
    code, you should start the line with a hashtag, or hash. The hash is one way to
    tell the computer, *Ignore this!*, yet it allows humans to read the text. Type
    the following line in your file:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你设置好了项目文件，你可能想要做的第一件事就是在你的文件中添加一条简短的注释。注释允许人类快速理解代码中正在发生的事情。无论你写的是非代码内容，都应该以井号（#）开始这一行。井号是告诉计算机“忽略这个！”的一种方式，但它允许人类阅读文本。在你的文件中输入以下行：
- en: '`# This is my first function called name. It will ask the name and # print
    a message.`'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`# 这是我的第一个名为name的函数。它将询问名字并打印一条消息。`'
- en: Writing code
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写代码
- en: 'The next line you type will begin the computer-readable code. First, make sure
    that there is a space between the comment you wrote and the first line of computer-readable
    code. As we learned earlier, you will start the function using the Python word
    `def`. Then, you will type one space and the name of the function:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你接下来输入的行将开始计算机可读代码。首先，确保你写的注释和第一条计算机可读代码之间有一个空格。正如我们之前学到的，你将使用Python单词`def`来开始函数。然后，你将输入一个空格和函数名：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Next, you will add parentheses `()` and a colon `:` to the first line:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你将在第一行添加括号`()`和冒号`:`：
- en: '[PRE13]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Now, it is time to go to the next line. For the next line, you will need to
    indent. Use the spacebar to insert four spaces. In Python, spaces matter. Using
    the *Tab* key, or mixing between tab and space, is a problem in Python and causes
    errors.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候进入下一行了。对于下一行，你需要进行缩进。使用空格键插入四个空格。在Python中，空格很重要。使用制表符键，或者混合使用制表符和空格，在Python中会引发错误。
- en: 'Since we are asking the user for their first name, you can use the words `first_name`
    for the variable if you like:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在请求用户输入他们的名字，如果你愿意，可以使用`first_name`作为变量名：
- en: '[PRE14]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `first_name` variable will store the answer to the question, `What is your
    first name?` Remember, though, we have to use the `raw_input()` function to get
    the user to answer the question! So, we will add the `raw_input()` function and
    question to the code:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`first_name`变量将存储问题的答案，“你的名字是什么？”记住，尽管如此，我们必须使用`raw_input()`函数来获取用户回答问题！因此，我们将添加`raw_input()`函数和问题到代码中：'
- en: '[PRE15]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: So far, we have programmed a way for the computer to ask the user for their
    first name, and we have made a variable called `first_name` to remember the string
    of information.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经编写了一种让计算机询问用户名字的方法，并且我们创建了一个名为`first_name`的变量来记住信息字符串。
- en: Even though we have a file that has some lines of code, if we were to run our
    code right now, nothing at all would happen. We need a way to show the user their
    name, and it would be even nicer if we sent the user a welcoming message. We need
    to write the code for program output.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们有一个包含一些代码行的文件，如果我们现在运行我们的代码，什么都不会发生。我们需要一种方法来向用户显示他们的名字，如果我们可以发送一个欢迎消息那就更好了。我们需要编写程序输出的代码。
- en: 'We have been using `print` to output our information from [Chapter 1](ch01.html
    "Chapter 1. Welcome! Let''s Get Started"), *Welcome! Let''s Get Started*, and
    throughout this chapter, and `print` is also useful here. We can tell our function
    to print the `first_name` information, and we can put that together with a nice
    message. Add this line to your code:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在使用`print`从[第1章](ch01.html "第1章。欢迎！让我们开始吧")，“欢迎！让我们开始吧”，以及在这一章中输出我们的信息，`print`在这里也很有用。我们可以告诉我们的函数打印`first_name`信息，并且我们可以将这条信息与一条友好的消息结合起来。将以下行添加到你的代码中：
- en: '[PRE16]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Your total code for the `name()` function should look like this:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`name()`函数的总代码应该看起来像这样：'
- en: '[PRE17]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Here is a sample of how the program looks in a text editor:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是程序在文本编辑器中的样子示例：
- en: '![Writing code](img/B04681_02_12_replace.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![编写代码](img/B04681_02_12_replace.jpg)'
- en: 'We need only to add the final line of code, which is to call the `name()` function.
    If we do not call the function, it will not run. To call the function, you should
    leave an empty line after `print`, and on a new line, unindent and type `name()`.
    Take a look at this code sample, and add the `name()` function to your code:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只需要添加最后一行代码，即调用 `name()` 函数。如果我们不调用函数，它将不会运行。要调用函数，你应在 `print` 后留一个空行，然后在新的行上缩进并输入
    `name()`。看看这个代码示例，并将 `name()` 函数添加到你的代码中：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have created this function, we can use it to greet anybody because
    the user is telling us each time what `first_name` should be. We have made a reusable
    block of code.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了此函数，我们可以用它来问候任何人，因为用户每次都会告诉我们 `first_name` 应该是什么。我们已经创建了一个可重用的代码块。
- en: Running your program
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行你的程序
- en: 'Now you have to save your work:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你必须保存你的工作：
- en: Go to the **Save** option in your text editor and save the work for `name.py`.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往你的文本编辑器的 **保存** 选项，并将 `name.py` 的工作保存。
- en: Once you have saved this work, you should go to your terminal/command prompt.
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 保存完这项工作后，你应该转到你的终端/命令提示符。
- en: Make sure that you are in the correct folder.
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保你处于正确的文件夹中。
- en: Tip
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: If you are not sure, you can type `pwd` (Mac/Linux) or `echo %cd%` (Windows)
    to find out what folder you are in.
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果你不确定，你可以输入 `pwd`（Mac/Linux）或 `echo %cd%`（Windows）来找出你所在的文件夹。
- en: 'When you are in the same folder as your work, type:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你在与你的工作相同的文件夹中时，输入：
- en: '[PRE19]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Then, press *Enter*. Your program should begin to run.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，按 *Enter*。你的程序应该开始运行。
- en: 'Once you type in the name, the output should look like this:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 输入名称后，输出应该看起来像这样：
- en: '![Running your program](img/B04681_02_11.jpg)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![运行你的程序](img/B04681_02_11.jpg)'
- en: You now have a program to share with family and friends that will seem amazing,
    especially if they have never programmed before!
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在有一个可以与家人和朋友分享的程序，他们会觉得非常神奇，特别是如果他们以前从未编程过的话！
- en: Going the extra mile
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 走得更远一些
- en: 'So, if you really want to understand all of this, go the extra mile! Experiment
    with the code that you just created so that you can see what works and what does
    not work. If you get a strange error, you can always copy and paste the error
    into an Internet search engine; most of the errors we''ve taken a look at so far
    have happened to other people. Here are some tips to help you experiment and gain
    mastery:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你真的想理解所有这些，就走得更远一些！尝试你刚刚创建的代码，看看什么有效，什么无效。如果你遇到奇怪的错误，你总是可以将错误复制并粘贴到互联网搜索引擎中；我们迄今为止看到的大多数错误都发生在其他人身上。以下是一些帮助你实验并获得精通的提示：
- en: Change the input question
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改输入问题
- en: Change the message to the user
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改用户的消息
- en: Change the function name
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改函数名
- en: Change the variable name
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改变量名
- en: Add a second variable and a second input question
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加第二个变量和第二个输入问题
- en: Add the second variable to the output question
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将第二个变量添加到输出问题中
- en: A quick task for you
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个快速的任务给你
- en: Now that you have finished this chapter, can you answer these questions?
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经完成了这一章，你能回答这些问题吗？
- en: Q1\. What must a function begin with?
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 函数必须以什么开始？
- en: def
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: def
- en: Function
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 函数
- en: Input
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入
- en: Whitespace
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 空白字符
- en: Q2\. What are conventions that are used to name variables and functions?
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 用来命名变量和函数的约定有哪些？
- en: Must use lowercase letters
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 必须使用小写字母
- en: Multiple words need to be connected with underscores
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 多个单词需要用下划线连接
- en: Cannot use a number to start a name
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不能以数字开始命名
- en: All of the above
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有上述
- en: Q3\. Every line after the first line of a function must be?
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 函数的第一行之后的每一行必须是什么？
- en: Named using numbers
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用数字命名
- en: 'Have a colon, :'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '有一个冒号，: '
- en: Indented
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 缩进
- en: Use parentheses ()
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用括号 ()
- en: Q4\. If you want a code file to run in Python, you need to end it with?
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 如果你想让代码文件在 Python 中运行，你需要以什么结束？
- en: .txt
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .txt
- en: .odt
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .odt
- en: .pdf
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .pdf
- en: .py
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: .py
- en: Q5\. To run a code file in the terminal, what do you need to do?
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Q5\. 在终端中运行代码文件，你需要做什么？
- en: Type the name of the file in the terminal
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中输入文件的名称
- en: Type the name of the file in the terminal while running Python
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行 Python 时，在终端中输入文件名
- en: In the correct folder, type Python and the name of the file
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在正确的文件夹中，输入 Python 和文件名
- en: All of the above steps in order
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有上述步骤按顺序
- en: Summary
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to store information in variables so that a
    computer could remember it later. We learned how to use variables to make a function
    that could add two preprogrammed numbers together. Then, things got interesting
    when we learned how to make the computer ask questions and remember the user's
    answers! Using `raw_input()`, we learned how to store answers as variables to
    use later in the `name()` function that we built together. We started saving our
    work in `.py` files so that we could run and rerun our files in our terminal/command
    prompt without having to retype the files all the time.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何将信息存储在变量中，以便计算机可以在以后记住它。我们学习了如何使用变量来创建一个可以将两个预编程数字相加的函数。然后，当我们学习如何让计算机提问并记住用户的答案时，事情变得有趣起来！使用`raw_input()`，我们学习了如何将答案作为变量存储起来，以便在我们一起构建的`name()`函数中使用。我们开始将我们的工作保存在`.py`文件中，这样我们就可以在我们的终端/命令提示符中运行和重新运行我们的文件，而无需每次都重新输入文件。
- en: In the next chapter, you will build a four-function calculator to run in the
    command line using all of the skills you learned in this chapter!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将构建一个四功能计算器，在命令行中运行，使用本章所学到的所有技能！
