- en: Using Frames, Labels, and Text Fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The elements that will be covered in this chapter are the graphical components
    used to organize the application in the first stage of development. These components
    provide the ability to implement some windows to visualize the application, labels
    with text to inform the user about the application's features, and varieties of
    text fields to input the text and operate with text. We will start by describing
    the methods, and we will then implement them in the application at the end of
    the chapter. No modern application can do without these components. The user may
    want to have a perfect visualization, explain what things are or what they need
    to do, or maybe an event occurs. Text fields have the functionality required to
    work with various texts, such as short texts, long descriptions, visualizing text,
    loading text from files, copying/pasting text, other additional operations with text,
    and saving text to files from text fields. All of these are available with various
    different options.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we''ll cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Frames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Labels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Line edit fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text edit fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class from the `QtWidgets` module is the base class for widgets that can
    have frames. `QFrame` inherits the `QWidget` class. Frames can be used to combine
    some elements by similarity and/or used as parents of the components inside the
    frame. The second assertion is useful when you need to hide some elements, and,
    instead of hiding each of them individually, you can just hide the parent frame. The
    syntax to create the frame is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Functions of QFrame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QFrame` extends the `QWidget` class and provides the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the frame, such as style and
    width:'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.setFrameRect(QtCore.QRect)`: This sets the rectangle that the frame
    is drawn in.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.setFrameShadow(QtWidgets.QFrame.Shadow)`: This sets the shadow for this
    frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.setFrameShape(QtWidgets.QFrame.Shape)`: This sets the shape of this
    frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.setFrameStyle(int)`: This sets the frame''s style. The available values
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`0`: No frame'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`1`: Box'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2`: Panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`3`: Win panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`4`/`5`: `HLine`/`VLine` and styled panel'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`frame.setLineWidth(int)`: This sets the line width for this frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.setMidLineWidth(int)`: This sets the middle line width for this frame.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the frame or change the functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.frameRect()`: This returns the rectangle of the `QtCore.QRect` type
    where the frame is drawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.frameShadow()`: This returns the frame shadow value from the frame style of
    the `QtWidgets.QFrame.Shadow` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.frameShape()`: This returns the frame shape value from the frame style of
    the `QtWidgets.QFrame.Shape` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.frameStyle()`: This returns the frame style as an integer value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.frameWidth()`: This returns the width as an integer value of the frame
    that is drawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.initStyleOption(QtWidgets.QStyleOptionFrame)`: This initializes style
    options with the values from the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.lineWidth()`: This returns the line width of the frame as an integer
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.midLineWidth()`: This returns the width as an integer of the middle
    line of this frame.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions relate to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.changeEvent(QtCore.QEvent)`: This handles state changes of the frame.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frame.event(QtCore.QEvent)`: This receives events sent to the frame object
    and should return `true` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: QFrame example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s create simple frames in the application. Put two frames in the `Documents`
    tab of the main window by adding the following lines to the `u_style.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UFrame` class that inherits `QtWidgets.QFrame` to the `u_style.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this class, we use the `setStyleSheet()` method to set the background color
    of the frame. Now, we need to add some lines to the `u_app.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the new imports to the import section of the `u_app.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: When we use some components in the future, we need to add the created classes
    of the `u_style.py` file to the import section of the main application file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the frames and layout for them in the `UApp` class in the `u_app.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Two frames have been created and arranged with a grid layout. Now we can see
    two different frames inside the `Documents` tab of the main application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/71e6fb28-b09e-4f1a-b94f-184bd0791119.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's move on to the `QLabel` class.
  prefs: []
  type: TYPE_NORMAL
- en: QLabel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The label is a widget that provides a text or image display in the GUI application. **`QLabel`**
    inherits the `QFrame` class. Labels demonstrate or visualize some information
    in the GUI app. An image or a movie, or information for the user as text can be
    displayed on a label. The syntax to create a label in the application''s code
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Functions of the QLabel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QLabel` extends the `QWidget` and `QFrame` classes and provides the following
    functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of the label, such as text and
    alignment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment of the contents
    in the label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setBuddy(QtWidgets.QWidget)`: This sets the label''s buddy as specified
    in the parameter. The buddy mechanism is when the user presses the label''s shortcut
    key, the keyboard focus will be transferred to the label’s buddy widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setIndent(int)`: This sets the label''s text indent in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setMargin(int)`: This sets the distance between the innermost pixel
    of the frame and the outermost pixel of the contents of the label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setMovie(QtGui.QMovie)`: This sets the movie that will be displayed
    on this label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setNum(float**)**`: This sets a textual representation of float numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setNum(int)`: This sets a textual representation of integer numbers.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setOpenExternalLinks(bool)`: If this is set to `True`, the label will
    open external links automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setPicture(QtGui.QPicture)`: This sets the picture that will be displayed
    on the label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setPixmap(QtGui.QPixmap)`: This sets the label''s pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setScaledContents(bool)`: If this is set to `True`, this label will
    scale the contents to fill all the available space.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setSelection(start, length)`: This sets the start position of the text
    (the first parameter, an integer) and the length (the second parameter, also an
    integer).'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setText(str)`: This sets text for this label in the Unicode string type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setTextFormat(QtCore.Qt.TextFormat)`: This sets the label''s text format
    according to the specified parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: This sets
    how the label will interact with user input if it displays text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.setWordWrap(bool)`: If this is set to `True`, the text will be wrapped
    to the width of the label.'
  prefs: []
  type: TYPE_NORMAL
- en: has
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the functions that return a Boolean value (`bool`) related
    to the label states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.hasScaledContents()`: This returns `True` if the label allows us to
    scale the contents to fill all the available space.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.hasSelectedText()`: This returns `True` if some or all of the label''s
    text has been selected.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the label or changes of the functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.alignment()`: This returns the alignment of the `QtCore.Qt.Alignment`
    type for the elements in the label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.buddy()`: This returns the label''s buddy of the `QtWidgets.QWidget`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.clear()`: This clears the content of the label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.focusNextPrevChild(bool)`: This returns `True` if it can find a new
    label that gives the keyboard focus. If the parameter is `True` it searches forward,
    and if it''s `False`, it searches backward.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.heightForWidth(width)`: This returns the preferred height for this label,
    given the `width` parameter as an integer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.indent()`: This returns the label''s text indent in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.margin()`: This returns the distance between the innermost pixel of
    the frame and the outermost pixel of the contents of this label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.minimumSizeHint()`: This returns the minimum size of hint of the `QtCore.QSize`
    type that''s available for this label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.movie()`: This returns the pointer to the label''s movie of the `QtGui.QMovie`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.openExternalLinks()`: This returns `True` if the label should open links
    automatically.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.picture()`: This returns the label’s picture of the `QtGui.QPicture`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.pixmap()`: This returns the label''s pixmap of the `QtGui.QPixmap` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.selectedText()`: This returns the Unicode string as the selected text
    of this label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.selectionStart()`: This returns the index of the first selected character
    of this label, or, if no text is selected, it returns `-1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.text()`: This returns the label''s text as a Unicode string.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.textFormat()`: This returns the formatting for the label''s text in
    the `QtCore.Qt.TextFormat` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.textInteractionFlags()`: This returns text interaction flags for this
    label of the `QtCore.Qt.TextInteractionFlags` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.wordWrap()`: This returns `True` if the text in the label is wrapped
    to the width of the label.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, and include event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.changeEvent(QtCore.QEvent)`: This handles state changes of the label.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.event(QtCore.QEvent)`: This receives events sent to the object and should
    return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives keypress
    events for this label with the event passed in as the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the label''s
    keyboard focus events, which are passed in as the `event` parameter when the focus
    is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.focusInEvent(QtGui.QFocusEvent)`: This event handler receives the label''s
    keyboard focus events, which are passed in as the event parameter when the focus
    is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives mouse-move
    events for this label with the event passed in as the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives mouse-press
    events for this label with the event passed in as the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives mouse-release
    events for this label with the event passed in as the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint events
    for this label with the event passed in as the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the available signals of the `QLabel` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.linkActivated(str)`: This signal is emitted when the user clicks on
    a link, with the URL referred to by the anchor that''s passed to the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label.linkHovered(str)`: This signal is emitted when the user hovers over
    a link, with the URL passed to the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QLabel example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The label will be used in the application more than once. This is only a short
    demonstration. Now we have a reason to create a class with fonts in the `u_style.py`
    file. These fonts will be used with further components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Insert the `UFonts` class at the beginning of the `u_style.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This class will be used to change the text font of a widget or a graphical element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `ULabel` class to the `u_style.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `setFont()` method sets the font of the label using the `UFonts` class.
    Now, we need to add some lines to the `u_app.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the created `ULabel` class to the `import` section of the `u_app.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the lines with the label inside the `UApp` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ve set the label instance with text and alignment. Add this label to the
    grid layout of the second frame. Now, we can run the `u_app.py` file, and the
    result looks like this (with the label on the right-hand side):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0023b8cc-b702-4faf-ae13-285efc03706a.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's move on to the `QLineEdit` class.
  prefs: []
  type: TYPE_NORMAL
- en: QLineEdit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The line edit field provides a one-line text editor. The `QLineEdit` class
    can be used to create one-line user input fields for entering plain text, such
    as usernames, emails, and passwords. Also, some other kinds of text input fields
    provide information that is more convenient to use separately from another piece
    of text and have some special purpose. The line edit field is commonly used with
    user forms in applications. The declaration syntax of the line edit field in the
    application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Functions of QLineEdit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QLineEdit` class inherits the `QWidget` class and improves functionality
    with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add the elements or actions to the line `edit_field`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.addAction(QtWidgets.QAction, QtWidgets.QLineEdit.ActionPosition)`:
    This adds an action (the first parameter) to the list of actions at a certain
    position (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.addAction(QtGui.QIcon, QtWidgets.QLineEdit.ActionPosition)`: This
    adds a new action with an icon (the first parameter) at a certain position (the
    second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set parameters/properties to the line edit field, such as text,
    alignment, and functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment of the
    content of the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setClearButtonEnabled(bool)`: If this parameter is `True`, it sets
    the line edit field to display a clear button when it''s not empty. If the parameter
    is `False`, a clear button will not be displayed in the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setCompleter(QtWidgets.QCompleter)`: This sets the line edit field
    to autocomplete from the completer that is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setCursorMoveStyle(QtCore.Qt.CursorMoveStyle)`: This sets the movement
    style of the cursor of this line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setCursorPosition(int)`: This sets the position of the cursor for
    this line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setDragEnabled(bool)`: If this parameter is `True`, it enables dragging
    for this field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setEchoMode(QtWidgets.QLineEdit.EchoMode)`: This sets echo mode
    for the line edit field. The available parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QLineEdit.Normal`: `0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLineEdit.NoEcho`: `1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLineEdit.Password`: `2`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QLineEdit.PasswordEchoOnEdit`: `3`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line_edit.setFrame(bool)`: If this parameter is `True`, it sets the frame
    around the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setInputMask(str)`: This sets an input mask for this line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setMaxLength(int)`: This sets the maximum length of the characters
    for this field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setModified(bool)`: If this parameter is `True`, it sets the line
    edit content as modified or changed/edited.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setPlaceholderText("Placeholder text")`: This sets the placeholder
    text of the line edit field, which is the text that will be displayed if the field
    will be empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setReadOnly(bool)`: If the parameter is `True`, this sets the line
    edit field in read-only mode so that the content inside cannot be edited by the
    user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setSelection(start, length)`: This selects text in the line edit
    field on the basis of the `start` parameter (the first parameter) and `length` (the
    second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setText("Text in this field")`: This sets the text that will be
    displayed with this line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setTextMargins(QtCore.QMargins)`: This sets the margins that will
    be around the text inside the frame of the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setTextMargins(left, top, right, bottom)`: This sets the margins
    that will be around the text inside the frame of the line edit field. Each parameter
    is an integer value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.setValidator(QtGui.QValidator)`: This sets the validator, specified
    in the parameter, of the `QtGui.QValidator` type, which means that this line edit
    field will only accept the input that this validator will accept.'
  prefs: []
  type: TYPE_NORMAL
- en: edit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions make some changes to the current content of the line edit field,
    such as clear, undo, and redo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.clear()`: This clears the content of the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.copy()`: This copies the selected text of the line edit field to
    the clipboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cut()`: This copies the selected text of the line edit field to
    the clipboard and deletes it from the field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.paste()`: This inserts the clipboard''s text at the cursor position
    of the line edit, and all the selected text will be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.redo()`: This redoes the last operation, if available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.undo()`: This undoes the last operation, if available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.selectAll()`: This selects all the text in the line edit field and
    moves the cursor to the end.'
  prefs: []
  type: TYPE_NORMAL
- en: has/is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to the line edit states;
    for example, to check the availability of the undo function:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.hasAcceptableInput()`: This returns `True` if the input satisfies
    the `inputMask` and the validator.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.hasFrame()`: This returns `True` if the line edit field has a frame
    around itself.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.hasSelectedText()`: This returns `True` if the line edit has the
    selected text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.isClearButtonEnabled()`: This returns `True` if the line edit field
    displays a clear button when it''s not empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.isModified()`: This returns `True` if the content of the line edit
    was modified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.isReadOnly()`: This returns `True` if the line edit is in read-only
    mode, so that content inside it cannot be edited by the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.isRedoAvailable()`: This returns `True` if the redo functionality
    is available for the content of the line edit field, or if content was previously
    undone.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.isUndoAvailable()`: This returns `True` if the undo functionality
    is available for the content of the line edit field or if content was previous
    edited/changed.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the line edit field and change
    it to the functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.alignment()`: This returns the alignment of the text in the line
    edit field of the `QtCore.Qt.Alignment` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.backspace()`: If no text in the line edit field has been selected,
    the character to the left of the cursor will be deleted and the cursor will move one
    position to the left. If any text is selected, the selected text will be deleted
    and the cursor will move to the beginning of the selected text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.completer()`: This returns the current completer for the text in
    the line edit of the `QtWidgets.QCompleter` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.createStandardContextMenu()`: This creates a standard context menu
    that will be displayed when the user right-clicks on the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorBackward(bool,steps)`: This moves the cursor back by characters
    (the second parameter). If the first parameter is `True`, each character will
    be selected; otherwise, the selection will be cleared.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorForward(bool, steps)`: This moves the cursor forward by characters
    (the second parameter). If the first parameter is `True`, each character will
    be selected; otherwise, the selection will be cleared.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorMoveStyle()`: This returns the movement style of the cursor
    for this line edit field of the `QtCore.Qt.CursorMoveStyle` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorPosition()`: This returns the current cursor position as an
    integer value inside the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorPositionAt(QtCore.QPoint)`: This returns the cursor position
    for the point specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorRect()`: This returns a rectangle of the `QtCore.QRect` type
    where the cursor of the line edit is placed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorWordBackward(bool)`: This moves the cursor backward by one
    word. If the parameter is `True`, the word will be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorWordForward(bool)`: This moves the cursor forward by one word.
    If the parameter is `True`, the word will be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.del_()`: If the line edit field has no text selected, it will delete
    the character to the right of the cursor. If text is selected, the cursor will
    move to the beginning of the selection and the selected text will be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.deselect()`: This deselects the selected text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.displayText()`: This returns the displayed text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.dragEnabled()`: This returns `True` if dragging for this line edit
    field is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.echoMode()`: This returns the echo mode for this line edit field
    of the `QtWidgets.QLineEdit.EchoMode` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.end(bool)`: This moves the text cursor to the end of the line edit
    field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.getTextMargins()`: This returns the line edit text margins for the
    left, top, right, and bottom sides.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.home(bool)`: This moves the cursor to the beginning of the line
    edit field. If the parameter is `True`, the text will be selected; otherwise,
    any selected text will be unselected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.inputMask()`: This returns the validation input mask of the line
    edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: This is used
    to query a set of properties of the line edit field in order to support complex
    input method operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.insert("Text will be inserted")`: This inserts new text in the line
    edit field. It also deletes any selected text and validates the result.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.maxLength()`: This returns the maximum length of the text of this
    line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.minimumSizeHint()`: This returns the minimum size hint of the `QtCore.QSize`
    type for this line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.placeholderText()`: This returns the placeholder text of the line
    edit field. This text will be displayed as long as the field is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.selectedText()`: This returns the selected text in the line edit
    field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.selectionStart()`: This returns the index of the first character
    in selected text in the field, or returns `-1` if no text is selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.selectionEnd()`: This returns the index of the last character of
    the text selected in the field, or returns `-1` if no text is selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.selectionLength()`: This returns the length of the selected characters
    in the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.text()`: This returns the content of the line edit field as a Unicode
    string.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.textMargins()`: This returns the margins for the text of this field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.validator()`: This returns the validator for this line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, including event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.changeEvent(QtCore.QEvent)`: This handles state changes of the line
    edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    line edit context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is called
    with an event parameter when the mouse enters the line edit field and a drag is
    in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with an event parameter when the mouse leaves the line edit field and a drag is
    in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with an event parameter when certain conditions occur, such as the cursor entering
    the field; the cursor moving within the field; or the modifier key being pressed
    on the keyboard while the line edit field has the focus, and a drag is in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    an event parameter when a drag is dropped on the line edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.event(QtCore.QEvent)`: This receives events sent to the object and
    should return `True` if the event is recognized and has been processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives line
    edit keyboard focus events that are passed with an event parameter when the focus
    is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.focusInEvent(QtGui.QFocusEvent)`: This event handler receives line
    edit keyboard focus events that are passed with an event parameter when the focus
    is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives
    input method composition events with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key
    press events for the line edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse move events for this line edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse press events for this line edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse release events for this line edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse double-click events for this line edit field with an event passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for this line edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following signals are available with the `QLineEdit` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.cursorPositionChanged(int, int)`: This signal is emitted when the
    cursor moves inside the line edit field. The old and new positions are passed
    as parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.editingFinished()`: This signal is emitted when the *Enter* key
    is pressed, or the field loses focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.returnPressed()`: This signal is emitted when the *Enter* key is
    pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.selectionChanged()`: This signal is emitted when the text selection
    of the line edit changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.textChanged(str)`: This signal is emitted when the text in the field
    changes; this can also be done programmatically with the `setText()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: '`line_edit.textEdited(str)`: This signal is emitted when the text in the field
    is edited. It is not related to changing text with the `setText()` method.'
  prefs: []
  type: TYPE_NORMAL
- en: QLineEdit example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate the functionality of the line edit field, let''s put this field
    to the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `ULineEd` class to the `u_style.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We added the various properties to this class, such as the text margins and
    the color of the line edit field borders. Now, we need to realize this field in
    the `u_app.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this to the `import` section of the `u_app.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Add this to the `__init__()` function of the `u_app.py`file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We've added three line edit fields to input the username, email, and password.
    We've also added to the layout of the second frame.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, run the app to see the line edit fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/93918555-fef6-4b04-8f64-5773e0957767.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's move on to the `QTextEdit` class.
  prefs: []
  type: TYPE_NORMAL
- en: QTextEdit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QTextEdit` class is used for multiline text representations. This field
    supports both rich and plain formats of text. Usually, rich text formatting is
    used to insert HTML-style tags into the field with the ability to display and
    edit them. Multiline fields are the most popular instrument for working with texts
    in editing mode in order to create text editors and visualize and edit text files.
    Fields of this type are used for writing text messages, creating text files, saving
    information to databases, and many other things. Text fields created with the
    `QTextEdit` class allow us to display text, images, lists, tables, and other elements.
    To implement a multiline text editor in the GUI application, we need to understand
    the basics of the text representations. End-of-line special characters, such as
    `\n`for a new line and `\r` for a carriage return, are used, depending on the
    operating system (OS), for example, `\n` in Unix-like systems and `\r\n` for Windows
    (**Disk Operating Systems** (**DOS**)). Also available are other special characters,
    such as `\t` for a tab and `\v` for a vertical tab. By default, `\n` is used in
    the `QTextEdit` field as the symbol for the end of a line, but you need to remember
    that these special symbols can be different for external text used in the text
    field. The inheritance scheme of the `QTextEdit` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/863992e0-bbfd-4511-9cd4-c6931d687638.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The declaration of this class in the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: Functions of QTextEdit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QTextEdit` class improves the functionality of the inherited classes with
    following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set parameters/properties to the text edit field, such as text,
    alignment, and functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setAcceptRichText(bool)`: If the parameter is `True`, the text field
    will accept rich text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment of the
    current paragraph. The available parameters are `QtCore.Qt.AlignLeft`, which aligns
    text to the left (the default); `QtCore.Qt.AlignRight`, which aligns text to the
    right; `QtCore.Qt.AlignCenter`, which aligns text to the center; and `QtCore.Qt.AlignJustify`,
    which justifies text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setAutoFormatting(QtWidgets.QTextEdit.AutoFormatting)`: This sets
    the auto-formatting features for this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setCurrentCharFormat(QtGui.QTextCharFormat)`: This sets the character
    format that will be used when inserting new text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setCurrentFont(QtGui.QFont)`: This sets the font of the current
    character format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setCursorWidth(int)`: This sets the width of the cursor that will
    be visible with this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setDocument(QtGui.QTextDocument)`: This sets the underlying document
    of this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setDocumentTitle("Document Title")`: This sets the title of the
    underlying document.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setExtraSelections(selections)`: This allows temporary marking of
    certain regions in the text with a color, specified in the `selections` parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setFontFamily("Font Family")`: This sets the family of the font
    of the current format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setFontItalic(bool)`: If this parameter is `True`, the font of the
    current format will be italic.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setFontPointSize(float)`: This sets the font point size of the current
    format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setFontUnderline(bool)`: If this parameter is `True`, the font of
    the current format will be underlined.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setFontWeight(int)`: This sets the font weight of the current format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setHtml("<p>Html tags</p>")`: This sets the text with HTML-style
    formatting. All previous text will be deleted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setLineWrapColumnOrWidth(int)`: This sets the position in pixels
    or columns (depending on the wrap mode) where text will be wrapped.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setLineWrapMode(QtWidgets.QTextEdit.LineWrapMode)`: This sets the
    line wrap mode specified in the parameter for this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setOverwriteMode(bool)`: If this parameter is `True`, the entered
    text will overwrite existing text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setPlaceholderText("Placeholder text")`: This sets the text that
    will be used when this text field is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setPlainText("Text")`: This adds plain text to the text field. All
    previous text will be deleted. If the text has HTML-style tags, these will be
    displayed in-text as is (without HTML-style formatting).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setReadOnly(bool)`: If this parameter is `True`, it sets the read-only
    mode for this text field so that content inside it cannot be edited by the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTabChangesFocus(bool)`: If this parameter is `True`, this allows
    the *Tab* key to change the focus; otherwise, the *Tab* key is accepted as input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTabStopDistance(float)`: This sets the *Tab* stop distance (the
    default is `80.0` pixels).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTabStopWidth(int)`: This sets the *Tab* stop width.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setText("Text")`: This sets the text to the text field. All previous
    text will be deleted. The text can have HTML-style formatting or plain text. HTML
    will be formatted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTextBackgroundColor(QtGui.QColor)`: This sets the background
    color of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTextColor(QtGui.QColor)`: This sets the text color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTextCursor(QtGui.QTextCursor)`: This sets the cursor that will
    be visible with this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setTextInteractionFlags(QtCore.Qt.TextInteractionFlags)`: This sets
    flags that will specify how the text field will interact with user input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setUndoRedoEnabled(bool)`: If this parameter is `True`, it allows
    us to execute undo/redo operations in this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.setWordWrapMode(QtGui.QTextOption.WrapMode)`: This sets the mode
    that will be used when wrapping text in this text edit.'
  prefs: []
  type: TYPE_NORMAL
- en: edit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions make some changes to the content of the text edit field, such
    as clear, undo, and redo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.clear()`: This clears the content of the text edit field, and the
    undo/redo history will be cleared.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.copy()`: This copies the selected text of this text edit field to
    the clipboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.cut()`: This copies the selected text of the text field to the clipboard
    and deletes it from the text edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.paste()`: This pastes the clipboard''s text at the cursor position
    of the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.redo()`: This redoes the last operation if it is available for this
    text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.undo()`: This undoes the last operation if it is available for this
    text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.selectAll()`: This selects all the text in the text edit field and
    moves the cursor to the end of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.zoomIn(int)`: This zooms in on the text by making the font size
    larger with in the range in the parameter (`int`), and recalculating all font
    sizes. It does not change the size of images.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.zoomInF(float)`: This zooms in on the text by making the font size
    larger with in the range in the parameter (`float`), and recalculating all font
    sizes. It does not change the size of images.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.zoomOut(int)`: This zooms out in on the text by making the font
    size smaller with in the range in the parameter, and recalculating all font sizes.
    It does not change the size of images.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to the text edit states,
    for example, to check the availability of the undo functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.isReadOnly()`: This returns `True` if the text field is in read-only
    mode, so that content inside it cannot be edited by the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.isUndoRedoEnabled()`: This returns `True` if undo and redo operations
    are enabled for this text edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the text edit field and changes
    in functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.acceptRichText()`: This returns `True` if the text field accepts
    rich text insertions that allow HTML-style tags. If it returns `False`, the text
    field only accepts plain text input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.alignment()`: This returns the alignment of the text for the current
    paragraph.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.anchorAt(QtCore.QPoint)`: This returns the reference as a Unicode
    string of the anchor at the position specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.append("Text to append")`: This appends a new text paragraph to
    the text field as a new line after the last line in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.autoFormatting()`: This returns the auto-formatting features of
    the `QtWidgets.QTextEdit.AutoFormatting` type that are enabled for this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.canInsertFromMimeData(QtCore.QMimeData)`: This returns `True` if
    the contents of the MIME data object, specified in the parameter, can be decoded
    and inserted into the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.canPaste()`: This returns `True` if text can be pasted from the
    clipboard into this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.createMimeDataFromSelection()`: This returns a new MIME data object
    of the `QtCore.QMimeData` type to represent the contents of this text edit field
    selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.createStandardContextMenu()`: This creates a standard context menu
    that will be displayed when the user clicks on the text edit field with the right
    mouse button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.createStandardContextMenu(QtCore.QPoint)`: This creates a standard
    context menu that will be displayed when the user right-clicks on the text edit
    field and appears on the position, specified in the parameter, where the mouse
    click happens.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.currentCharFormat()`: This returns the current character formatting
    that will be used when new text is inserted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.currentFont()`: This returns the current font of the text formatting.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.cursorForPosition(QtCore.QPoint)`: This returns the cursor of the
    `QtGui.QTextCursor` type at the position specified in the parameter (in viewport
    coordinates).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.cursorRect()`: This returns a rectangle of the `QtCore.QRect` type
    (in viewport coordinates) that includes the cursor of this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.cursorRect(QtGui.QTextCursor)`: This returns a rectangle of the
    `QtCore.QRect` type (in viewport coordinates) that includes the cursor specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.cursorWidth()`: This returns the width of the cursor in pixels (the
    default is `1`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.document()`: This returns the content of the text edit field represented
    as the underlying document of the `QtGui.QTextDocument` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.documentTitle()`: This returns the title of the underlying document
    parsed from the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.ensureCursorVisible()`: This ensures that the text cursor is visible
    and, if necessary, scrolls the text edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.extraSelections()`: This returns extra selections that were previously
    set.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.find("Text to find", QtGui.QTextDocument.FindFlags)`: This finds
    the next occurrence of the text (the first parameter) using the specified search
    rules (the second parameter), returns `True` if the text was found, and selects
    this text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.find(QtCore.QRegExp, QtGui.QTextDocument.FindFlags)`: This finds
    the next occurrence matching the regular expression (the first parameter) using
    the specified search rules (the second parameter), returns `True` if the text
    was found, and selects this text in the field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.fontFamily()`: This returns the font family of the current text
    format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.fontItalic()`: This returns `True` if the current text format is
    italic.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.fontPointSize()`: This returns the font point size of the current
    text format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.fontUnderline()`: This returns `True` if the current text format
    is underline.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.fontWeight()`: This returns font weight of the current text format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.inputMethodQuery(QtCore.Qt.InputMethodQuery, object)`: This is used
    to query a set of properties of the text edit field to support complex input method
    operations, such as support for surrounding text and reconversions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.insertFromMimeData(QtCore.QMimeData)`: This inserts the contents
    of the MIME data object, specified in the parameter, to the text edit field at
    the current cursor position.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.insertHtml("<p>Html tags</p>")`: This inserts the text with HTML
    formatting (if the text is HTML-styled) at the current cursor position.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.insertPlainText("Text")`: This inserts the text at the current cursor
    position. If the text has HTML formatting, the tags will be not formatted and
    text will be represented as is.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.lineWrapColumnOrWidth()`: This returns the position in pixels or
    columns (depending on the wrap mode) where the text will be wrapped.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.lineWrapMode()`: This returns the line wrap mode of the `QtWidgets.QTextEdit.LineWrapMode`
    type for this text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.loadResource(int, QtCore.QUrl)`: This loads the resource specified
    with the type (the first parameter) and the URL (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.mergeCurrentCharFormat(QtGui.QTextCharFormat)`: This merges the
    properties specified in the parameter into the current character''s format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.moveCursor(QtGui.QTextCursor.MoveOperation, QtGui.QTextCursor.MoveMode)`:
    This moves the cursor depending on the parameters. If the second parameter is
    `QtGui.QTextCursor.KeepAnchor`, the cursor will select the text as it moves. The
    available move operations are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.NoMove` – `0`: The cursor stays where it is.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.Start` – `1`: The cursor moves to the start of text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.StartOfLine` – `3`: The cursor moves to the start of the
    current line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.StartOfBlock` – `4`: The cursor moves to the start of the
    current block (paragraph).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.StartOfWord` – `5`: The cursor moves to the start of the
    current word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.PreviousBlock` – `6`: The cursor moves to the start of the
    previous block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.PreviousCharacter` – `7`: The cursor moves to the start
    of the previous character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.PreviousWord` – `8`: The cursor moves to the start of the
    previous word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.Up` – `2`: The cursor moves up one line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.Left` – `9`: The cursor moves left one character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.WordLeft` – `10`: The cursor moves left one word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.End` – `11`: The cursor moves to the end of the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.EndOfLine` – `13`: The cursor moves to the end of the current
    line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.EndOfWord` – `14`: The cursor moves to the end of the current
    word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.EndOfBlock` – `15`: The cursor moves to the end of the current
    block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.NextBlock` – `16`: The cursor moves to the beginning of
    the next block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.NextCharacter` – `17`: The cursor moves to the next character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.NextWord` – `18`: The cursor moves to the next word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.Down` – `12`: The cursor moves down one line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.Right` – `19`: The cursor moves right one character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.WordRight` – `20`: The cursor moves right one word.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.NextCell` – `21`: The cursor moves to the next cell inside
    the current table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.PreviousCell` – `22`: The cursor moves to the previous cell
    inside the current table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.NextRow` – `23`: The cursor moves to the next row inside
    the current table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QTextCursor.PreviousRow` – `24`: The cursor moves to the previous row
    inside the current table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text_edit.overwriteMode()`: This returns `True` if the entered text will overwrite
    existing text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.placeholderText()`: This returns placeholder text that will be used
    when this text field is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.print(QtGui.QPagedPaintDevice)`: This is a convenience function
    that prints the text in the text field with a printer device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.print_(QtGui.QPagedPaintDevice)`: This prints the text of the text
    field with a printer device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.scrollToAnchor(str)`: This scrolls the text edit field so that the
    anchor with the string in the parameter is visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.tabChangesFocus()`: This returns `True` if the *Tab* key changes
    focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.tabStopDistance()`: This returns the *Tab* stop distance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.tabStopWidth()`: This returns the *Tab* stop width.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.textBackgroundColor()`: This returns the background color of the
    `QtGui.QColor` type for the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.textColor()`: This returns the color of the `QtGui.QColor` type
    for the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.textCursor()`: This returns a copy of the cursor of the `QtGui.QTextCursor`
    type, which shows the cursor that is currently visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.textInteractionFlags()`: This returns the flags of the `QtCore.Qt.TextInteractionFlags`
    type that specify the interaction with the user input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.toHtml()`: This returns the text of the text field with HTML-style
    formatting.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.toPlainText()`: This returns the plain text of the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.wordWrapMode()`: This returns the mode of the `QtGui.QTextOption.WrapMode`
    type that is used when wrapping text in the text edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.changeEvent(QtCore.QEvent)`: This handles state changes of this
    text edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler receives
    text edit context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is called
    with an event parameter when the mouse enters the text edit field and a drag is
    in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is called
    with an event parameter when the mouse leaves the text edit field and a drag is
    in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is called
    with an event parameter when certain conditions occur, such as the cursor entering
    the field, the cursor moving within the field, the modifier key being pressed
    on the keyboard while the text edit field has the focus, or if a drag is in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    an event parameter when the drag is dropped on the text edit field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.event(QtCore.QEvent)`: This receives events sent to the object and
    should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the
    text edit field keyboard focus events that are passed with an event parameter
    when the focus is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.focusInEvent(QtGui.QFocusEvent)`: This event handler receives the
    text field keyboard focus events that are passed with an event parameter when
    the focus is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives input
    method composition events with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives keypress
    events for this text edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives key-release
    events for this text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse-move events for this text edit field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse-press events for this text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse-release events for this text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse double-click events for this text edit field with an event passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.paintEvent(QtGui.QPaintEvent)`: This event handler receives paint
    events for this text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.resizeEvent(QtGui.QResizeEvent)`: This event handler receives resize
    events for this text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.showEvent(QtGui.QShowEvent)`: This event handler receives show events
    for the text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.timerEvent(QtCore.QTimerEvent)`: This event handler receives timer
    events for the text field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.wheelEvent(QtGui.QWheelEvent)`: This event handler receives mouse-wheel
    events for this field with an event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The signals available with the `QTextEdit` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.copyAvailable(bool)`: This signal is emitted when text is selected
    or de-selected in the text field. If the text is selected, the parameter will
    be `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.currentCharFormatChanged(QtGui.QTextCharFormat)`: This signal is
    emitted when the current character format has changed. The new format is in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.cursorPositionChanged()`: This signal is emitted when the cursor
    moves inside the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.redoAvailable(bool)`: This signal is emitted when redo operations
    become available (the parameter is `True`) or unavailable (the parameter is `False`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.undoAvailable(bool)`: This signal is emitted when undo operations
    become available (the parameter is `True`) or unavailable (the parameter is `False`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.selectionChanged()`: This signal is emitted when the text selection
    of the text edit changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text_edit.textChanged(str)`: This signal is emitted when the content of the
    field changes.'
  prefs: []
  type: TYPE_NORMAL
- en: QTextEdit example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s demonstrate a multiline text field in our GUI application. Follow the
    steps described in the following section:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `UTextEd` class in the `u_style.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The properties available with this class are the scroll bar properties, the
    line height of the text field, the border properties, and many more. Now, we need
    to add this text edit field to the `u_app.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UTextEd` to the `import` section of the `u_app.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the text field lines to the `__init__()` function of the `u_app.py`file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The text edit instance adds to the grid layout of the first frame. Now, we can
    type the different texts in this field and cut, copy, paste, and so on, as well.
  prefs: []
  type: TYPE_NORMAL
- en: Additional tips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most popular implementations of text fields in GUI applications are to
    create various editors. This may be text editors or code editors to work with
    texts or typing the code. Therefore, functions for spellchecking and working with
    the syntax of various languages are very popular. Let''s describe some implementations
    of spellchecking in the text edit field of our GUI application. The example is
    a class that provides spellchecking functionality in the text edit field. To start,
    we need to install additional packages. The most useful package for this is `pyenchant`.
    To install this package, type the following in the cmd/Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, create two files called `u_adds.py`in the `App/App_PySide2` and `App/App_PyQt5`
    directories (if not, choose one of them) and implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following to the import section of the PyQt5 `u_adds.py`file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following to the `import` section of the PySide2 `u_adds.py`file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `UHighLight` class inside both `u_adds.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This class is used to highlight the incorrect text in the text field with the
    help of the `enchant` library. To use this tool in the application's text field,
    we need to add some lines to the `u_app.py`file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add these lines to the `import` section of the `u_app.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the `UHighLight` class to the `__init__ ()` function of the `u_app.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We now need to create the dictionary. Add the `UHighLight` class instance with
    the document of the text edit field as a parameter and set the dictionary. The
    result will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/93fc635d-b32d-4da2-9c1c-6b6e1c7e9fc4.png)'
  prefs: []
  type: TYPE_IMG
- en: This is just an example and is optional. Moreover, you must be careful when
    using this spellcheck function, because these tools can lead to problems with
    memory costs, and the performance of the application will suffer if constructions are
    not threaded in the right way. Other packages that provide additional dictionaries
    supporting various languages are available as well.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The elements that were explored in this chapter are the basic components of
    the GUI application. Frames provide a convenient way to compound graphical components
    and labels improve informative visualizations. Single-line and multiline text
    fields are the most popular for user communications. In addition, PyQt5 and PySide2
    have other classes you can use to work with text, such as `QTextBrowser`, which
    improves `QTextEdit` with additional functionality. Also, `QTextDocument` of the
    `QtGui` class represents text in documented form in the text edit field and the
    `QTextCursor` class provides manipulations with the cursor.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue covering graphical elements and will be
    looking at mixed components, such as comboboxes and list views, which have text
    and control functionality.
  prefs: []
  type: TYPE_NORMAL
