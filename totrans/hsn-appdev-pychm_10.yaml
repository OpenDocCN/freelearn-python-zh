- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: More Full Stack Frameworks – Django and Pyramid
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多全栈框架 - Django 和 Pyramid
- en: The web frameworks we’ve covered so far were exemplary in the way they work.
    Flask is an unopinionated micro-framework. By this we mean Flask only handles
    endpoint routing and optionally, serving templated page content. FastAPI features
    a framework specifically for building RESTful APIs rather than serving content
    beyond data. It also features an asynchronous programming model reminiscent of
    modern JavaScript frameworks running in NodeJS.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们到目前为止所讨论的 Web 框架在工作方式上都是典范。Flask 是一个无意见的微框架。这意味着 Flask 只处理端点路由，并且可选地提供模板页面内容。FastAPI
    提供了一个专门用于构建 RESTful API 的框架，而不是提供超出数据的服务。它还提供了一个类似于在现代 NodeJS 框架中运行的 JavaScript
    框架的异步编程模型。
- en: There are two more frameworks you’ll find on the **New Project** menu in PyCharm
    Professional, and we’re going to cover them here. **Django** is a very popular
    framework that is, philosophically speaking, the diametric opposite of Flask.
    Django is a highly opinionated framework that attempts to make all your platform
    and framework choices for you.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在 PyCharm Professional 的 **新项目** 菜单中，你还会找到另外两个框架，我们将在下面介绍。**Django** 是一个非常流行的框架，从哲学上讲，它是
    Flask 的完全对立面。Django 是一个高度有意见的框架，试图为你做出所有平台和框架的选择。
- en: The final framework we’ll talk about is **Pyramid**. Pyramid aims for the middle
    ground between Flask and Django offering more bundled features than Flask, but
    more flexibility than Django.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要讨论的最后一个框架是 **Pyramid**。Pyramid 旨在 Flask 和 Django 之间找到平衡点，提供了比 Flask 更多的捆绑功能，但比
    Django 更灵活。
- en: 'In this chapter, you will learn the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下内容：
- en: How to generate a Django project using PyCharm Professional’s new project template
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 PyCharm Professional 的新项目模板生成 Django 项目
- en: How to identify the major files and folders present in the templated project
    generated by PyCharm
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何识别由 PyCharm 生成的模板项目中的主要文件和文件夹
- en: How to use Django-specific tooling in PyCharm for `manage.py` tasks
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 PyCharm 中使用 Django 特定的工具来执行 `manage.py` 任务
- en: How to create a Pyramid project in PyCharm Professional
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在 PyCharm Professional 中创建 Pyramid 项目
- en: We’ve already covered a lot of theory on how web applications work in earlier
    chapters, so let’s get straight into developing these two frameworks using PyCharm.
    As with other web development frameworks, these features are only available in
    the Professional edition of PyCharm.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在早期章节中讨论了关于 Web 应用程序工作原理的大量理论，所以让我们直接使用 PyCharm 开发这两个框架。与其他 Web 开发框架一样，这些功能仅在
    PyCharm 的专业版中可用。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In order to proceed through this chapter, and indeed the rest of the book,
    you will need the following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了继续阅读本章，以及本书的其余部分，你需要以下内容：
- en: An installed and working Python interpreter. I’ll be using the latest from [https://python.org](https://python.org).
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装并运行 Python 解释器。我将使用来自 [https://python.org](https://python.org) 的最新版本。
- en: Installed copies of `pip` and `virtualenv`. You get these automatically when
    you install Python on Windows, and macOS has them included on every system. If
    you are using Linux, you need to install the package managers such as `pip` and
    virtual environment tools such as `virtualenv` separately. Our examples will use
    `pip` and `virtualenv`.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 `pip` 和 `virtualenv`。当你安装 Python 到 Windows 上时，你会自动获得这些，macOS 在每个系统上都包含它们。如果你使用
    Linux，你需要单独安装包管理器，如 `pip` 和虚拟环境工具，如 `virtualenv`。我们的示例将使用 `pip` 和 `virtualenv`。
- en: 'An installed and working copy of PyCharm. Installation was covered in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*, in case
    you are jumping into the middle of the book. I am using build PyCharm Professional
    2023.1 (build #PY-231.8109.197) with the new UI turned on.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '安装并运行 PyCharm。安装已在 [*第 2 章*](B19644_02.xhtml#_idTextAnchor028)*，安装和配置* 中介绍，如果你是在书的中途开始阅读。我使用的是
    PyCharm Professional 2023.1（构建号 #PY-231.8109.197），并且开启了新界面。'
- en: This book’s sample source code from GitHub. We covered cloning the code in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*. You’ll
    find this chapter’s relevant code at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-10](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-10).
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书从 GitHub 上的示例源代码。我们已在 [*第 2 章*](B19644_02.xhtml#_idTextAnchor028)*，安装和配置*
    中介绍了代码克隆。你可以在 [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-10](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-10)
    找到本章的相关代码。
- en: What’s all this fuss about Django?
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 这一切关于Django的喧嚣是什么？
- en: If you ask most Python developers which framework they prefer, I’ll wager it
    is an even split between Flask and Django. I’ll also wager that the Django crowd
    are raving fans of Django while Flask seems more like a thing you use to get stuff
    done. It’s like getting excited about a screwdriver. Django is a lot more opinionated,
    and as such, a lot more “in your face." You barely notice Flask because it’s just
    a piece of the puzzle. Django is all the pieces in one box, plus that glue you
    use to make puzzles into a picture, plus an expensive frame for the completed
    glued puzzle, plus a beach house so you have a place to hang your puzzle. There
    might even be little mints on the pillows in the beach house, but I make no promises.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你问大多数Python开发者他们更喜欢哪个框架，我敢打赌，Flask和Django之间是平分的。我还会打赌，Django群体是Django的狂热粉丝，而Flask似乎更像是一个用来完成工作的东西。这就像对螺丝刀感到兴奋。Django有很多意见，因此也很多“直面”。你几乎注意不到Flask，因为它只是拼图的一部分。Django是一个盒子里的所有拼图，加上你用来把拼图变成图片的胶水，加上一个昂贵的框架，用于完成粘合后的拼图，加上一个海滩屋，这样你就有地方挂你的拼图。海滩屋里的枕头甚至可能有薄荷糖，但我不能保证。
- en: Django, on the other hand, promises to be a web framework that handles the heavy
    lifting and repetitive aspects of web application development. Web developers
    are freed up to focus on the specific logic of their applications. Web frameworks
    usually implement common design patterns and good practices into their structure,
    so that a web application developed with a framework will be up to common standards
    by default, without its developer having to manually integrate those standards
    into the application.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Django承诺成为一个处理Web应用开发中繁重和重复性工作的Web框架。Web开发者可以腾出时间专注于他们应用程序的具体逻辑。Web框架通常将常见的设计模式和最佳实践实现到其结构中，因此使用框架开发的Web应用将默认符合常见标准，而无需开发者手动将这些标准集成到应用程序中。
- en: 'Django aims to have everything you need to develop a web application baked
    into the framework. Since that is true, you shouldn’t have to think about your
    stack at all. Django becomes more than a framework; it becomes an ethos. You become
    a fan of Django’s way. You might even say *“This is the way,”* and Django might
    say it back. Here are some things Django is good at:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Django的目标是将开发Web应用所需的一切都集成到框架中。既然这是真的，你就根本不需要考虑你的技术栈。Django不仅仅是一个框架；它变成了一种理念。你变成了Django方式的粉丝。你甚至可以说*“这就是方法，”*而Django可能会回应你。以下是Django擅长的一些事情：
- en: '**Speed**: Similar to Python itself, Django emphasizes the ease of developing
    and translating ideas into actual code. With straightforward yet extensive APIs,
    Django aims to accommodate a wide range of web applications and features.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**速度**：与Python本身类似，Django强调将想法转化为实际代码的简便性。凭借简单而广泛的API，Django旨在适应各种Web应用和功能。'
- en: '**Security**: Web development is one of the topics in programming in which
    security is the highest priority. The Django framework offers features that navigate
    web developers, beginners, and experts alike, away from security flaws in their
    applications.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**安全性**：Web开发是编程中一个以安全性为最高优先级的主题。Django框架提供了功能，帮助Web开发者、初学者和专家 alike，避开他们应用程序中的安全漏洞。'
- en: '**Scalability**: When a website gains more clients, scalability becomes more
    and more important. Scalability in Django can be achieved in flexible and intuitive
    ways; in fact, some of the largest sites on the internet (Bitbucket, Instagram,
    Pinterest, and so on) are built with Django for that reason.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可扩展性**：当网站获得更多客户时，可扩展性变得越来越重要。Django中的可扩展性可以通过灵活和直观的方式实现；事实上，一些互联网上最大的网站（如Bitbucket、Instagram、Pinterest等）都是用Django构建的，出于这个原因。'
- en: None of these are specifically addressed by Flask. In fact, Flask is not normally
    used for large web applications because it is relatively slow. Personally, I’ve
    moved all my product backend code away from Flask and into FastAPI because the
    performance is noticeably better.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都没有被Flask具体解决。事实上，Flask通常不用于大型Web应用，因为它相对较慢。我个人已经将所有产品后端代码从Flask迁移到了FastAPI，因为性能明显更好。
- en: 'So far, Django sounds much better than anything else we’ve talked about so
    far. Despite being a popular and powerful web framework, Django, like any technology,
    has its detractors. Some of the common criticisms and concerns raised about Django
    include the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，Django听起来比我们之前讨论的任何其他东西都要好。尽管Django是一个流行且强大的Web框架，但像任何技术一样，它也有其批评者。关于Django的一些常见批评和担忧包括以下内容：
- en: '**Steep learning curve**: Some developers find Django’s learning curve to be
    relatively steep, especially for beginners with limited experience in Python or
    web development. Its extensive feature set and comprehensive nature can be overwhelming
    for newcomers.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**学习曲线陡峭**：一些开发者发现Django的学习曲线相对陡峭，尤其是对于在Python或Web开发方面经验有限的初学者来说。其广泛的功能集和全面性可能会让新手感到不知所措。'
- en: '**Magic and abstraction**: Django’s emphasis on “batteries included” and abstraction
    can be a double-edged sword. While it saves development time, some developers
    argue that it can obscure the underlying mechanisms, making it harder to understand
    and troubleshoot complex issues.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**魔法和抽象**：Django对“内置电池”和抽象的强调可能是一把双刃剑。虽然它可以节省开发时间，但一些开发者认为它可能会掩盖底层机制，使得理解和调试复杂问题变得更加困难。'
- en: '**Overhead for small projects**: For small projects or simple websites, some
    developers feel that Django’s feature richness and structure can be overkill,
    adding unnecessary overhead and complexity.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**小型项目的开销**：对于小型项目或简单的网站，一些开发者觉得Django的丰富功能和结构可能是过度设计，增加了不必要的开销和复杂性。'
- en: '**Monolithic nature**: Critics argue that Django is a monolithic framework,
    and it may not be the best fit for microservices architectures or highly specialized
    applications where a lightweight framework might be more suitable.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单体性质**：批评者认为Django是一个单体框架，可能不适合微服务架构或需要轻量级框架的高度专业化的应用。'
- en: '**Flexibility versus opinionated**: Django follows a particular design philosophy
    and enforces certain patterns, which some developers see as overly opinionated.
    This can lead to debates over the “Django way” of doing things versus alternative
    approaches.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灵活性与有偏见**：Django遵循特定的设计哲学并强制执行某些模式，一些开发者认为这过于有偏见。这可能导致关于“Django方式”做事与替代方法之间的争论。'
- en: '**Performance**: Although Django is reasonably performant, some developers
    claim that it may not be as fast as certain micro-frameworks or specialized tools.
    Performance-critical projects may require additional optimization efforts.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：尽管Django的性能相当不错，但一些开发者声称它可能不如某些微框架或专用工具快。性能关键型项目可能需要额外的优化工作。'
- en: '**ORM limitations**: While Django’s ORM is powerful and easy to use, it may
    not cover all edge cases or offer the same level of control as writing raw SQL
    queries. In certain scenarios, developers may prefer using other ORMs or query
    builders.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ORM限制**：虽然Django的ORM功能强大且易于使用，但它可能无法涵盖所有边缘情况，或提供与编写原始SQL查询相同级别的控制。在某些情况下，开发者可能更倾向于使用其他ORM或查询构建器。'
- en: '**Version upgrades**: Upgrading between major versions of Django can sometimes
    be challenging, especially for older projects heavily reliant on deprecated features.
    This can lead to maintenance issues and additional development efforts.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**版本升级**：在Django的主要版本之间进行升级有时可能具有挑战性，尤其是对于严重依赖已弃用功能的旧项目。这可能导致维护问题和额外的开发工作。'
- en: '**Customization complexity**: While Django offers flexibility, some developers
    find it challenging to customize certain built-in components, such as the admin
    interface, to fit specific design requirements.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制复杂性**：虽然Django提供了灵活性，但一些开发者发现定制某些内置组件（如管理界面）以适应特定设计要求具有挑战性。'
- en: '**Community and ecosystem**: Although Django has a large and active community,
    it may not have as extensive an ecosystem or as many third-party packages available
    as some other web frameworks.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**社区和生态系统**：尽管Django拥有庞大且活跃的社区，但其生态系统可能没有某些其他Web框架那么广泛，可用的第三方包也可能更少。'
- en: It’s important to note that while these criticisms exist, Django has an extensive
    user base, and many developers appreciate its productivity, stability, and comprehensive
    feature set. Ultimately, the choice of a web framework depends on the specific
    needs and preferences of the project and development team.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，尽管存在这些批评，Django拥有庞大的用户基础，许多开发者都欣赏其生产力、稳定性和全面的功能集。最终，选择Web框架取决于项目和发展团队的具体需求和偏好。
- en: Django framework components
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django框架组件
- en: 'Django includes an inclusive set of components that make it a comprehensive
    and feature-rich framework for web development. Here are some of the key components:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Django包含了一系列包容性的组件，使其成为Web开发的全面且功能丰富的框架。以下是一些关键组件：
- en: '**URL dispatching (routing)**: Django uses a URL dispatcher to route incoming
    HTTP requests to the appropriate view functions or class-based views. This enables
    clean and logical URL patterns for your web application.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**URL 路由**: Django 使用 URL 分派器将传入的 HTTP 请求路由到适当的视图函数或基于类的视图。这为你的 Web 应用程序提供了干净和逻辑的
    URL 模式。'
- en: '**View functions and class-based views**: Views in Django are responsible for
    processing user requests and returning HTTP responses. You can use simple functions
    as views or use Django’s class-based views for more organized and reusable code.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**视图函数和基于类的视图**: Django 中的视图负责处理用户请求并返回 HTTP 响应。你可以使用简单的函数作为视图，或者使用 Django
    的基于类的视图来编写更组织化和可重用的代码。'
- en: '**Templates**: Django’s template system allows you to define the structure
    and layout of your web pages using HTML templates with placeholders for dynamic
    content. This separation of concerns (logic and presentation) makes it easier
    to maintain and scale your web application.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模板**: Django 的模板系统允许你使用带有占位符的 HTML 模板来定义你的 Web 页面的结构和布局，这些占位符用于动态内容。这种关注点分离（逻辑和展示）使得维护和扩展你的
    Web 应用程序变得更加容易。'
- en: '**Model-View-Template (MVT) architecture**: Similar to the **Model-View-Controller**
    (**MVC**) pattern, Django follows the MVT pattern. Models represent the data structures
    and the database schema, views handle the logic and processing, and templates
    take care of rendering the output.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模型-视图-模板 (MVT) 架构**: 与 **模型-视图-控制器 (MVC**) 模式类似，Django 遵循 MVT 模式。模型代表数据结构和数据库模式，视图处理逻辑和加工，模板负责渲染输出。'
- en: '**Object-Relational Mapping (ORM)**: Django’s ORM is one of its defining features.
    It provides a high-level, Pythonic way to interact with databases without having
    to write raw SQL queries. It allows you to define models as Python classes, and
    the ORM handles the mapping of these models to the database tables.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**对象-关系映射 (ORM)**: Django 的 ORM 是其定义性特征之一。它提供了一种高级、Pythonic 的方式来与数据库交互，无需编写原始
    SQL 查询。它允许你将模型定义为 Python 类，ORM 负责将这些模型映射到数据库表。'
- en: '**Forms**: Django includes a form-handling system that simplifies form creation,
    data validation, and handling user input. It helps in processing HTML forms and
    converting user-submitted data into Python data types.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表单**: Django 包含一个表单处理系统，简化了表单创建、数据验证和处理用户输入的过程。它有助于处理 HTML 表单并将用户提交的数据转换为
    Python 数据类型。'
- en: '**Admin interface**: Django’s admin interface is an automatic admin interface
    that can be used to manage your application’s data models. It provides an out-of-the-box
    solution for managing model data and is customizable to fit your specific needs.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理界面**: Django 的管理界面是一个自动管理界面，可以用来管理你的应用程序的数据模型。它提供了一个现成的解决方案来管理模型数据，并且可以根据你的特定需求进行定制。'
- en: '**Middleware**: Middleware components in Django are hooks that allow you to
    process requests and responses globally before they reach the view or after they
    leave the view. It enables features including authentication, security checks,
    and request/response modification.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**中间件**: Django 中的中间件组件是允许你在请求到达视图之前或离开视图之后全局处理请求和响应的钩子。它实现了包括身份验证、安全检查和请求/响应修改在内的功能。'
- en: '**Static files**: Django has built-in support for managing static files such
    as CSS, JavaScript, and images. It simplifies the process of serving static content
    during development and deployment.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**静态文件**: Django 内置了对管理静态文件（如 CSS、JavaScript 和图像）的支持。它简化了在开发和部署期间提供静态内容的过程。'
- en: '**Authentication and authorization**: Django provides a robust authentication
    system for managing user accounts, permissions, and groups. It makes it easy to
    add user registration, login, and password management functionalities to your
    application.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证和授权**: Django 提供了一个强大的身份验证系统，用于管理用户账户、权限和组。它使得向你的应用程序添加用户注册、登录和密码管理功能变得容易。'
- en: 'I**nternationalization and localization**: Django supports internationalization
    and localization, allowing you to create applications that can be translated into
    multiple languages and adapted to various regions.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**国际化与本地化**: Django 支持国际化与本地化，允许你创建可以翻译成多种语言并适应不同地区的应用程序。'
- en: '**Testing framework**: Django comes with a testing framework that facilitates
    unit testing and integration testing of your application. You can write test cases
    to ensure that your code works as expected and avoid regressions.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试框架**: Django 附带了一个测试框架，它有助于你的应用程序的单元测试和集成测试。你可以编写测试用例以确保你的代码按预期工作并避免回归。'
- en: With all that overhead, it’s a good thing we have such a capable tool in PyCharm.
    Let’s dive into creating a Django application.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些准备工作之后，我们很幸运拥有PyCharm这样强大的工具。让我们开始创建一个Django应用程序。
- en: Creating a Django project
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Django项目
- en: The process is no different than most other projects. Click **File | New Project**
    then click the **Django** option as shown in *Figure 10**.1*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程与其他大多数项目没有不同。点击**文件 | 新项目**，然后点击如图*图10.1*所示的**Django**选项。
- en: '![Figure 10.1: Creating a new Django project is much like any other project](img/B19644_10_01.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1：创建一个新的Django项目与其他项目非常相似](img/B19644_10_01.jpg)'
- en: 'Figure 10.1: Creating a new Django project is much like any other project'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1：创建一个新的Django项目与其他项目非常相似
- en: Be sure to twirl down the **More Settings** section. Here you can set the template
    language. You can use either the **Django templating language** or **Jinja2**,
    which was what we used in [*Chapter 9*](B19644_09.xhtml#_idTextAnchor223), *Building
    a Dynamic Web Application with Flask*. Since we covered Jinja2 already, let’s
    stick with Django. You can set the name of the folder you’ll use for templates,
    and you absolutely should set a value for the **Application name** field as shown
    at the bottom of *Figure 10**.1*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 一定要展开**更多设置**部分。在这里，你可以设置模板语言。你可以使用**Django模板语言**或**Jinja2**，这是我们之前在[*第9章*](B19644_09.xhtml#_idTextAnchor223)中使用的，*使用Flask构建动态Web应用程序*。由于我们已经介绍了Jinja2，让我们继续使用Django。你可以设置用于模板的文件夹名称，并且绝对应该为**应用程序名称**字段设置一个值，如图*图10.1*底部所示。
- en: Don’t skip the application name
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 不要跳过应用程序名称
- en: If you skip the `manage.py` tooling we’ll cover later, but that’s probably not
    what you want most of the time when you are creating a new project. Furthermore,
    you should not name the application the same as the PyCharm project as it can
    cause confusion in PyCharm’s indexing, not to mention for the humans working on
    the project.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你跳过了我们稍后将要介绍的`manage.py`工具，但那可能不是你在创建新项目时大多数情况下想要的。此外，你不应该将应用程序命名为与PyCharm项目相同的名称，因为这可能会在PyCharm的索引中引起混淆，更不用说对于在项目上工作的人类了。
- en: Django projects often have multiple applications within them, and the **Application
    name** setting here is used to create and name the first application within the
    project. We’re going to be building a single library application in our project.
    Since the term *library* is ambiguous in a programming book, I’ll clarify the
    name of the application so we understand the *library* is a place that serves
    books rather than a programming library.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Django项目通常包含多个应用程序，这里的**应用程序名称**设置用于在项目内创建和命名第一个应用程序。在我们的项目中，我们将构建一个单独的库应用程序。由于术语*库*在编程书中是模糊的，我将明确应用程序的名称，以便我们理解*库*是一个服务于书籍而不是编程库的地方。
- en: The resulting newly created project is shown in *Figure 10**.2*.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 新创建的项目结果如*图10.2*所示。
- en: '![Figure 10.2: The Django project has been created and PyCharm opens the urls.py
    and settings.py files as a starting point](img/B19644_10_02.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2：Django项目已创建，PyCharm以urls.py和settings.py文件作为起点打开](img/B19644_10_02.jpg)'
- en: 'Figure 10.2: The Django project has been created and PyCharm opens the urls.py
    and settings.py files as a starting point'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2：Django项目已创建，PyCharm以urls.py和settings.py文件作为起点打开
- en: 'Given the super long list of components, it is a little surprising how few
    files were created. PyCharm has automatically opened two as a starting point:
    `urls.py` and `settings.py`. Let’s take a look at what these and the rest of the
    files and folders are for in our newly created application.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到组件列表非常长，创建的文件如此之少确实有点令人惊讶。PyCharm已自动打开两个作为起点：`urls.py`和`settings.py`。让我们看看这些以及新创建的应用程序中的其他文件和文件夹的用途。
- en: Structure of a Django project
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django项目的结构
- en: The first thing you might notice is the project, which I just called `djangoProject`,
    has its own set of files distinct from the application, which is in the `TheGreatBookery`
    folder. All of the files inside of the `djangoProject` folder are used in the
    deployment of your application to production, as well as to run the built-in development
    server.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能首先注意到的是项目，我将其命名为`djangoProject`，它有一组与应用程序不同的文件，该应用程序位于`TheGreatBookery`文件夹中。`djangoProject`文件夹中的所有文件都用于将你的应用程序部署到生产环境，以及运行内置的开发服务器。
- en: Inside the `TheGreatBookery` folder, we have a folder for database migrations.
    This is common for applications that use ORMs. You need a way to make changes
    to the production database as you roll new releases into production. You can’t
    simply drop the database and rebuild it since that would erase all your application’s
    data. There needs to be a system to migrate schema changes to the existing database
    while maintaining your existing production data. Django’s system for migrations
    utilizes migration scripts stored in this folder.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `TheGreatBookery` 文件夹内部，我们有一个用于数据库迁移的文件夹。这对于使用 ORM 的应用程序来说是常见的。当你将新版本滚动到生产环境中时，你需要一种方法来更改生产数据库。你不能简单地删除数据库并重新构建，因为这会删除你应用程序的所有数据。需要有一个系统来将模式更改迁移到现有数据库，同时保持现有的生产数据。Django
    的迁移系统利用存储在这个文件夹中的迁移脚本。
- en: The templates folder, which is technically outside the application’s folder,
    is where we keep our HTML templates.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 模板文件夹，从技术上讲位于应用程序文件夹之外，是我们存储 HTML 模板的地方。
- en: 'You might be able to guess the functions of the remaining files by their names:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能可以通过文件名猜测剩余文件的功能：
- en: '`admin.py` is used to register modules, data models, and perhaps most obviously
    from the name, to control the admin user interface.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin.py` 用于注册模块、数据模型，也许从名称上看最明显的是，用于控制管理用户界面。'
- en: '`apps.py` provides a central place to customize and configure the behavior
    of your application within the Django project. It allows you to specify various
    settings and metadata for your application, such as the human-readable name, default
    app configuration, and signals.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`apps.py` 提供了一个中心位置来定制和配置 Django 项目中应用程序的行为。它允许你指定应用程序的各种设置和元数据，例如人类可读的名称、默认应用程序配置和信号。'
- en: '`models.py` will contain your data model, which is affected by the ORM.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`models.py` 将包含你的数据模型，它受到 ORM 的影响。'
- en: '`tests.py` will house your application’s unit tests, which run using Django’s
    own testing framework.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tests.py` 将包含你的应用程序单元测试，这些测试使用 Django 自身的测试框架运行。'
- en: '`views.py` will contain view functions. These are Python functions that take
    an HTTP request as an argument and return an HTTP response. Within these functions,
    you can handle the request, process data from the models or other sources, and
    generate an appropriate HTTP response, often by rendering a template with dynamic
    data.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`views.py` 将包含视图函数。这些是 Python 函数，它们接受一个 HTTP 请求作为参数，并返回一个 HTTP 响应。在这些函数中，你可以处理请求，处理来自模型或其他来源的数据，并生成适当的
    HTTP 响应，通常是通过渲染包含动态数据的模板来完成的。'
- en: Initial configuration
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始配置
- en: 'While this is not a book on Django, I would be remiss if I didn’t point out
    a few things in the `settings.py` file. Like Flask, Django has a built-in development
    web server that is not designed to be used in production. The `settings.py` file
    has some dangerous settings in it as hardcoded values that are appropriate for
    local development only. Open up `settings.py` and locate these lines:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这不是一本关于 Django 的书，但如果我不指出 `settings.py` 文件中的几个问题，我会感到失职。像 Flask 一样，Django
    内置了一个开发 Web 服务器，它不是为生产环境设计的。`settings.py` 文件中包含一些危险的设置，这些设置仅适用于本地开发。打开 `settings.py`
    并找到这些行：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Something you should do early is make sure to draw these values from outside
    your code. You should never hardcode a secret in your application code, and you
    should never commit secrets to a revision control system! You can externalize
    these values using environment variables, `.ini` files, or `.env` files using
    libraries from `PyPi.org`. Leaving the `DEBUG` setting hardcoded can be dangerous
    because errors thrown may be plainly visible along with the stack trace and other
    details that bad actors might be able to exploit.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该尽早做的一件事是确保从你的代码外部提取这些值。你永远不应该在应用程序代码中硬编码一个秘密，也不应该将秘密提交到版本控制系统！你可以使用来自 `PyPi.org`
    的库，通过环境变量、`.ini` 文件或 `.env` 文件来外部化这些值。将 `DEBUG` 设置硬编码可能会导致危险，因为抛出的错误可能会清楚地显示出来，包括堆栈跟踪和其他可能被恶意行为者利用的详细信息。
- en: 'Another setting you might want to review is the database engine. You’ll find
    these lines toward the bottom of `settings.py`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能还想审查另一个设置，即数据库引擎。你将在 `settings.py` 的底部找到这些行：
- en: '[PRE1]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: PyCharm has defaulted us to SQLite3, which is not really suitable for a production
    application. SQLite3 is a file-based database, and using it for local development
    is advantageous because it doesn’t require the installation of a server. You shouldn’t
    serve a production app with SQLite3, and in my opinion, you should develop using
    the same database you’ll use in production.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm默认为我们选择了SQLite3，这实际上并不适合生产应用。SQLite3是一个基于文件的数据库，在本地开发中使用它有优势，因为它不需要安装服务器。你不应该用SQLite3来服务生产应用，在我看来，你应该使用你将在生产中使用的相同数据库进行开发。
- en: That said, we won’t be taking this app to production so I’m going to leave the
    settings as they are. Your database will appear in the project directory as a
    file called `db.sqlite3`. We will learn about PyCharm’s database capabilities
    in [*Chapter 11*](B19644_11.xhtml#_idTextAnchor266). Know that PyCharm has a rich
    set of tools for viewing and working with databases, including SQLite3, which
    can help during development.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，我们不会将这个应用推向生产，所以我将保持设置不变。你的数据库将作为名为`db.sqlite3`的文件出现在项目目录中。我们将在[*第11章*](B19644_11.xhtml#_idTextAnchor266)中学习PyCharm的数据库功能。要知道PyCharm有一套丰富的工具，用于查看和使用数据库，包括SQLite3，这有助于开发过程。
- en: Running the Django project
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Django项目
- en: When we created the project, PyCharm created a run configuration for us. We
    covered run configurations extensively in [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145).
    We simply want to run the one PyCharm generated, so simply click the green **Run**
    button shown in *Figure 10**.3*.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建项目时，PyCharm为我们创建了一个运行配置。我们在[*第6章*](B19644_06.xhtml#_idTextAnchor145)中详细介绍了运行配置。我们只想运行PyCharm生成的那个，所以只需简单地点击*图10.3*中显示的绿色**运行**按钮。
- en: '![Figure 10.3: The Run button will start the development server](img/B19644_10_03.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3：点击“运行”按钮将启动开发服务器](img/B19644_10_03.jpg)'
- en: 'Figure 10.3: The Run button will start the development server'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3：点击“运行”按钮将启动开发服务器
- en: Running the project will open the **Run** panel at the bottom of the IDE window,
    as shown in *Figure 10**.4*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 运行项目将在IDE窗口底部打开**运行**面板，如图*图10.4*所示。
- en: '![Figure 10.4: Our project is running and being served on localhost port 8000](img/B19644_10_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4：我们的项目正在运行，并在本地主机端口8000上提供服务](img/B19644_10_04.jpg)'
- en: 'Figure 10.4: Our project is running and being served on localhost port 8000'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4：我们的项目正在运行，并在本地主机端口8000上提供服务
- en: We can see our project is running on port `8000`, and there’s a handy link that
    will open our default browser to the running app, as shown in *Figure 10**.5*.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以看到我们的项目正在端口`8000`上运行，还有一个方便的链接，可以打开默认浏览器并显示正在运行的应用，如图*图10.5*所示。
- en: '![Figure 10.5: Clicking the link opens the browser and displays a nice message
    letting you know everything is working](img/B19644_10_05.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5：点击链接将打开浏览器并显示一条友好的消息，告诉你一切正常](img/B19644_10_05.jpg)'
- en: 'Figure 10.5: Clicking the link opens the browser and displays a nice message
    letting you know everything is working'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5：点击链接将打开浏览器并显示一条友好的消息，告诉你一切正常
- en: PyCharm has effectively created a minimal working application for us. In a real
    projects, this is usually where I address deployment via **continuous integration**
    (**CI**) and **continuous delivery** (**CD**). One piece of advice I always give
    new web developers is to get the production mechanics in place as early as possible.
    If you do it right, you won’t have to mess with them again for quite a while.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: PyCharm已经为我们创建了一个最小的工作应用。在实际项目中，这通常是我处理通过**持续集成**（**CI**）和**持续交付**（**CD**）进行部署的地方。我总是给新晋的Web开发者一条建议，那就是尽早将生产机制建立起来。如果你做得正确，你就不必再麻烦它们很长时间。
- en: JetBrains has a very good CI/CD server called TeamCity. I used it exclusively
    for the last 10 years, having only last year switched begrudgingly to Microsoft
    Azure DevOps. TeamCity is a much better system and its definitely worth your time
    and trouble if you’re looking for a CI/CD server. JetBrains even offers plugins
    for PyCharm that allow you to control and monitor builds right from the IDE.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: JetBrains有一个非常优秀的CI/CD服务器，名为TeamCity。我过去10年一直在使用它，直到去年才不情愿地转向Microsoft Azure
    DevOps。TeamCity是一个更好的系统，如果你在寻找CI/CD服务器，它绝对值得你花费时间和精力。JetBrains还为PyCharm提供了插件，允许你直接从IDE中控制和监控构建。
- en: This, though, is a chapter on Django, so let’s keep the party rolling and move
    on to working with data models.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，这一章是关于Django的，所以让我们继续进行，转到与数据模型一起工作的内容。
- en: Creating Django models
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Django模型
- en: In a Django application, models play a central and crucial role. They are the
    backbone of the application’s data structure and are responsible for defining
    the database schema and handling data operations. Models allow developers to interact
    with the underlying database in an object-oriented manner, making it easier to
    manage and manipulate data.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 应用程序中，模型扮演着核心和关键的角色。它们是应用程序数据结构的骨架，负责定义数据库模式和处理数据操作。模型允许开发者以面向对象的方式与底层数据库进行交互，使得管理和操作数据变得更加容易。
- en: Models serve as an interface between the application and the database. They
    abstract away the complexities of SQL queries and provide a high-level API to
    perform **Create, Read, Update, Delete** (**CRUD**) operations. By using model
    methods and querysets, developers can interact with the database without having
    to write raw SQL code. Everything related to the database driving the application
    (including the things a lot of developers usually leave out, such as validation
    and constraints) can be found rolled into a Django model.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 模型充当应用程序和数据库之间的接口。它们抽象掉了 SQL 查询的复杂性，并提供了一个高级 API 来执行 **创建、读取、更新、删除**（**CRUD**）操作。通过使用模型方法和查询集，开发者可以与数据库交互，而无需编写原始
    SQL 代码。与应用程序数据库驱动相关的一切（包括许多开发者通常忽略的事情，如验证和约束）都可以在 Django 模型中找到。
- en: A prevalent anti-pattern that sometimes pops up with projects that forgo using
    ORMs is the use of the database to encapsulate business logic. The justification
    for this is usually that changing the database is quick, easy, and doesn’t require
    a new compilation or a new deployment. This is a foolish economy, and in a modern
    era that requires governance and documented change control, it becomes anathema.
    The senior database developer on my team, who is also a technical reviewer for
    [*Chapter 11*](B19644_11.xhtml#_idTextAnchor266), describes this practice as changing
    the tires on a semi-truck while it is traveling down the highway at 100 mph. Django
    models, though, since they are technically objects, are able to handle business
    logic effectively and without taboo. This is because only the structure of the
    data model is translated into the database while the logic remains within the
    object.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些放弃使用 ORM 的项目中，有时会出现一种常见的反模式，即使用数据库来封装业务逻辑。这种做法的理由通常是更改数据库快速、简单，且不需要新的编译或部署。这是一种愚蠢的经济行为，在需要治理和文档化的变更控制的现代时代，它变得令人反感。我的团队中的一位资深数据库开发者，同时也是
    [*第 11 章*](B19644_11.xhtml#_idTextAnchor266) 的技术审稿人，将这种做法描述为在卡车以每小时 100 英里的速度在高速公路上行驶时更换轮胎。然而，Django
    模型，由于它们在技术上属于对象，能够有效地处理业务逻辑，且不受禁忌。这是因为只有数据模型的结构被转换到数据库中，而逻辑仍然保留在对象内部。
- en: The thing you need to remember about using an ORM, which is what we’re doing
    when we create and manipulate models, is that we are working with an abstraction
    of our database. When we manipulate instances of our models we are altering data
    in the database. Likewise, when we change the structure of our classes, we are
    altering the structure of the database. There are differences between the way
    data types in your programming language work and the way they work in the database.
    We’ll see this in action later, but right now I want you to think about the fact
    that Python is a dynamic language that uses duck typing. In Python, I can alter
    any structure or type in any way that suits me. Databases on the other hand are
    static and strongly typed. Django’s ORM has its work cut out for it given the
    differences in paradigm between the way Python works with classes, types, and
    variables versus the way the database works with tables.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用 ORM（即我们在创建和操作模型时所做的工作），您需要记住的是，我们正在与数据库的抽象进行工作。当我们操作模型实例时，我们正在更改数据库中的数据。同样，当我们更改类的结构时，我们也在更改数据库的结构。在您的编程语言中数据类型的工作方式与在数据库中的工作方式之间存在差异。我们将在稍后看到这一点，但现在我想让您思考这样一个事实：Python
    是一种动态语言，使用鸭子类型。在 Python 中，我可以以任何适合我的方式更改任何结构或类型。然而，数据库是静态的且强类型化的。鉴于 Python 与类、类型和变量交互的方式与数据库与表交互的方式之间的范式差异，Django
    的 ORM 有很多工作要做。
- en: Let’s look at creating an easy model. Locate the `models.py` file. You can find
    it displayed in *Figure 10**.6*, or you can use the navigation features in PyCharm
    by pressing *Ctrl* + *Shift* + *N* (`models.py`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何创建一个简单的模型。定位到 `models.py` 文件。您可以在 *图 10**.6 中找到它，或者您可以使用 PyCharm 中的导航功能，通过按
    *Ctrl* + *Shift* + *N* (`models.py`) 来找到它。
- en: '![Figure 10.6: Open the models.py file so we can add a model](img/B19644_10_06.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图10.6：打开models.py文件以便我们可以添加一个模型](img/B19644_10_06.jpg)'
- en: 'Figure 10.6: Open the models.py file so we can add a model'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.6：打开models.py文件以便我们可以添加一个模型
- en: 'The generated code within will look like this:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 代码块内的生成代码将如下所示：
- en: '[PRE2]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We’re going to create two models for our Bookery application: `author` and
    `book`. To do this, let’s alter the code in `models.py` as follows:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为Bookery应用程序创建两个模型：`author`和`book`。为此，让我们按照以下方式修改`models.py`中的代码：
- en: '[PRE3]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Here, we’ve added two imports both related to time and dates. We’re going to
    use these libraries in some business logic that we will attach to the book model.
    Let’s not get ahead of ourselves, though. Let’s make a simple model to represent
    book authors:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了两个与时间和日期相关的导入。我们将在一些业务逻辑中使用这些库，这些逻辑将附加到书模型上。不过，我们先不要急于求成。让我们创建一个简单的模型来表示书作者：
- en: '[PRE4]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The class is hopefully straightforward enough. The `Author` class inherits from
    Django’s `model.Model` class. There are two fields for the author’s first and
    last name and use the `models.CharField` type to represent what would be varchars
    in the database. Relational databases require to declare a strong type, and in
    the case of a varchar (a variable-length character field), we have to supply a
    maximum length. The dunder string method simply gives us a nice format should
    we request the contents of the model as a string. Here, we’ve elected to format
    the author’s name as last name, comma, space, and first name.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 类希望足够简单明了。`Author`类从Django的`model.Model`类继承。有两个字段用于作者的姓和名，并使用`models.CharField`类型来表示数据库中的varchars。关系数据库需要声明一个强类型，在varchar（一个可变长度的字符字段）的情况下，我们必须提供一个最大长度。双下划线字符串方法简单地为我们提供了一个漂亮的格式，如果我们请求将模型的内容作为字符串。在这里，我们选择将作者的名字格式化为姓，逗号，空格，然后是名。
- en: Every ORM, regardless of platform, works the same way. Its aim is to allow developers
    to work only with native language objects. With that said, they usually need their
    own type system to allow the ORM to translate between the type system of the language
    (Python) and the database. You’ll learn in [*Chapter 11*](B19644_11.xhtml#_idTextAnchor266)
    that database data types are not the same as in their programming language counterparts.
    At a minimum, differences such as calling strings as varchars are apparent, and
    types including int and float exist in both contexts. Sometimes they are even
    different between database platforms. There are datatypes in SQLite3 that are
    not present in MySQL, and vice versa.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个ORM，无论平台如何，工作方式都是相同的。它的目的是让开发者只与本地语言对象工作。话虽如此，他们通常需要一个自己的类型系统，以便ORM能够在语言（Python）的类型系统和数据库之间进行转换。你将在[*第11章*](B19644_11.xhtml#_idTextAnchor266)中了解到，数据库数据类型与编程语言中的对应类型并不相同。至少，像将字符串称为varchars这样的差异是明显的，并且int和float类型在两种情况下都存在。有时它们甚至在数据库平台之间不同。SQLite3中有一些数据类型在MySQL中不存在，反之亦然。
- en: An ORM has to work everywhere, so having its own type system for models allows
    for a single type system for the developer that can be adapted to any database
    platform. It is a classic implementation of the Gang of Four’s **adapter pattern**,
    which I cover in my book *Real-World Implementation of C# Design Patterns*, published
    by Packt.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: ORM必须在任何地方都能工作，因此它为模型有自己的类型系统，这允许开发者有一个单一的类型系统，可以适应任何数据库平台。这是Gang of Four的**适配器模式**的经典实现，我在Packt出版的《Real-World
    Implementation of C# Design Patterns》一书中进行了介绍。
- en: 'The `author` class is not very fancy. Let’s do some more interesting code in
    the `Book` model code:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`author`类并不复杂。让我们在`Book`模型代码中做一些更有趣的代码：'
- en: '[PRE5]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: So far we have a `Book` class inheriting from `models.Model` as before. We have
    a title field with a maximum length of 200 characters. There is an `author` field,
    but rather than make this a string, we used the `Author` class to set up a `authors`
    table, which is controlled by the `Author` class we made a minute ago. A foreign
    key relationship specifies that any `Book` we add to the database must contain
    a related (it’s a relational database) database to an existing author. Operationally,
    this means we have to make sure the author exists in the database before we can
    add the author’s books to the database.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们有一个继承自`models.Model`的`Book`类，就像之前一样。我们有一个标题字段，最大长度为200个字符。有一个`author`字段，但不是将其作为一个字符串，我们使用了`Author`类来设置一个`authors`表，该表由我们刚才创建的`Author`类控制。外键关系指定了任何添加到数据库的`Book`都必须包含一个与现有作者相关联的数据库（这是一个关系数据库）。从操作的角度来看，这意味着我们必须确保作者存在于数据库中，然后我们才能将作者的书添加到数据库中。
- en: Foreign key constraints serve as a form of built-in data validation but they
    also help maintain data integrity in the database by enforcing rules. If I were
    to add an author to the database, and then add a bunch of books written by that
    author, we would have a nice relationship going on between the two tables. If
    I were to then delete the author from the `authors` table, we’d still have a bunch
    of book records without a related author. They would be orphan records. Orphan
    records are bad because they take up space in the database, and they break the
    integrity of the relationship between authors and books.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 外键约束作为一种内置数据验证形式，但它们还通过强制执行规则来帮助维护数据库中的数据完整性。如果我向数据库中添加一个作者，然后添加该作者写的一批书籍，我们将在两个表之间建立良好的人际关系。如果我从`authors`表中删除作者，我们仍然会有一批没有相关作者的书籍记录。这些将是孤儿记录。孤儿记录很糟糕，因为它们占用数据库空间，并破坏了作者和书籍之间关系的一致性。
- en: In this class, when we define the `author` field, we are defining it with a
    foreign key constraint with an actual rule covering what happens when you delete
    an author. The code that says `on_delete=models.CASCADE` tells the ORM that when
    an author is deleted, so are the records of the books they’ve written. It is called
    a cascading delete because the delete cascades from the author to the book records,
    which could in turn cascade to other tables that might have similar relationships
    to books. A well-constructed database can keep itself clean and devoid of orphan
    records regardless of how complex the database structure might be.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，当我们定义`author`字段时，我们使用外键约束并定义了一个实际规则，覆盖了删除作者时会发生什么。代码`on_delete=models.CASCADE`告诉ORM，当删除作者时，他们所写的书籍记录也会被删除。这被称为级联删除，因为删除从作者到书籍记录，这反过来又可能级联到可能具有类似书籍关系的其他表。一个结构良好的数据库可以在数据库结构可能很复杂的情况下保持自身清洁，没有孤儿记录。
- en: 'Lastly, we have a date to contain the publication date:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有一个日期来包含出版日期：
- en: '[PRE6]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the `foreign key` field didn’t add enough spice for you, let’s add one more
    thing. Since we are dealing with an object, and since objects can contain both
    data and functional logic, let’s add a function to our `Book` model:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果`外键`字段没有给您带来足够的惊喜，让我们再添加一个东西。由于我们正在处理一个对象，并且由于对象可以包含数据和功能逻辑，让我们在我们的`Book`模型中添加一个函数：
- en: '[PRE7]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This adds a field to our model, but rather than this data being stored in the
    database, it is computed at the time the method is called. We’re taking the static
    field for the publication date and computing the difference (delta) of the time
    to the current date. We’re taking into account the time zone and we’re presenting
    it as the number of days since the book was published. This allows us to show
    our users how old the book is in days, which might be used to prompt authors to
    produce new and updated editions of their books.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这为我们模型添加了一个字段，但这个数据不是存储在数据库中，而是在调用方法时计算得出的。我们正在使用静态的出版日期字段，并计算与当前日期的时间差（delta）。我们考虑了时区，并以自书籍出版以来的天数来呈现。这允许我们向用户展示书籍的年龄（以天为单位），这可能会被用来提示作者出版新书或更新版本书籍。
- en: Performing migrations using manage.py
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用`manage.py`执行迁移
- en: One of the files generated for your Django project is `manage.py`. You can see
    it in *Figure 10**.7*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为您的Django项目生成的文件之一是`manage.py`。您可以在*图10.7*中看到它。
- en: '![Figure 10.7: The manage.py file provides utilities for working with your
    Django project so you don’t have to type in long commands or remember full paths](img/B19644_10_07.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图10.7：`manage.py`文件提供了与您的Django项目一起工作的实用工具，这样您就不必输入长命令或记住完整的路径](img/B19644_10_07.jpg)'
- en: 'Figure 10.7: The manage.py file provides utilities for working with your Django
    project so you don’t have to type in long commands or remember full paths'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.7：`manage.py`文件提供了与您的Django项目一起工作的实用工具，这样您就不必输入长命令或记住完整的路径
- en: The purpose of the `manage.py` task is to allow you to run Django-specific commands
    from the command line without having to remember the full path to your Django
    project or manually set up the Python environment. By using `manage.py`, you ensure
    that the commands are executed within the correct Django project context.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`manage.py`任务的目的允许您从命令行运行Django特定的命令，而无需记住Django项目的完整路径或手动设置Python环境。通过使用`manage.py`，您确保命令在正确的Django项目上下文中执行。'
- en: 'Some common tasks you can perform with `manage.py` include the following:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用`manage.py`执行的一些常见任务包括以下内容：
- en: '`manage.py runserver`. This allows you to test your application locally during
    development. Earlier, we ran the Django project using the generated run configuration.
    We could have also used `manage.py` for this.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`manage.py runserver`。这允许您在开发期间本地测试您的应用程序。之前，我们使用生成的运行配置来运行Django项目。我们也可以使用`manage.py`来做这件事。
- en: '`manage.py makemigrations` and `manage.py migrate`, you can create and apply
    database migrations, respectively. This helps you manage changes to your models
    and keep your database schema up to date.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`manage.py makemigrations`和`manage.py migrate`，您可以分别创建和应用数据库迁移。这有助于您管理模型的变化并保持数据库模式最新。
- en: '`manage.py createsuperuser`.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`manage.py createsuperuser`。
- en: '`manage.py test` to ensure that your application functions as expected.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`manage.py test`来确保您的应用程序按预期运行。
- en: '`manage.py collectstatic`.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`manage.py collectstatic`。
- en: '`manage.py makemessages` and `manage.py compilemessages`.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`manage.py makemessages`和`manage.py compilemessages`。
- en: This is just a short list. There are many more utilities in `manage.py`. The
    `manage.py` file serves as an entry point to Django management commands, making
    it easy to perform administrative tasks without leaving your development environment.
    Before you head down to the terminal button in PyCharm, there is actually an easier
    way to work with `manage.py`. Click **Tools | Run manage.py task...** as shown
    in *Figure 10**.8*.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简短列表。`manage.py`中还有许多更多实用工具。`manage.py`文件作为Django管理命令的入口点，使得在不离开您的开发环境的情况下执行管理任务变得容易。在您点击PyCharm中的终端按钮之前，实际上有一个更简单的方式来与`manage.py`一起工作。如图*图10**.8*所示，点击**工具
    | 运行 manage.py 任务...**。
- en: '![Figure 10.8: PyCharm has a dedicated tool panel for working with manage.py](img/B19644_10_08.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图10.8：PyCharm有一个专门用于处理 manage.py 的工具面板](img/B19644_10_08.jpg)'
- en: 'Figure 10.8: PyCharm has a dedicated tool panel for working with manage.py'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.8：PyCharm有一个专门用于处理 manage.py 的工具面板
- en: This gives you a new panel, as shown in *Figure 10**.9*.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这为您提供了一个新的面板，如图*图10**.9*所示。
- en: '![Figure 10.9: The Run manage.py task panel is a dedicated command-line interface
    that lets you easily invoke commands specific to Django’s manage.py file](img/B19644_10_09.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![图10.9：运行 manage.py 任务面板是一个专门的命令行界面，让您可以轻松调用针对Django的 manage.py 文件特定的命令](img/B19644_10_09.jpg)'
- en: 'Figure 10.9: The Run manage.py task panel is a dedicated command-line interface
    that lets you easily invoke commands specific to Django’s manage.py file'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.9：运行 manage.py 任务面板是一个专门的命令行界面，让您可以轻松调用针对Django的 manage.py 文件特定的命令
- en: The `manage.py` panel opens at the bottom of the IDE as many do. At first glance,
    it looks like a terminal window, but this one is specific to Django and the `manage.py`
    file. As you can see, the panel provides auto-completion to help with the commands.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`manage.py`面板在IDE的底部打开，就像许多其他面板一样。乍一看，它看起来像一个终端窗口，但这个面板是针对Django和`manage.py`文件的。正如您所看到的，面板提供自动完成功能，以帮助完成命令。'
- en: 'In order to create our migrations, you should type this command into the panel:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建我们的迁移，您应该在面板中输入此命令：
- en: '[PRE8]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The result will resemble *Figure 10**.10*.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 结果将类似于*图10**.10*。
- en: '![Figure 10.10: The result of the makemigrations command](img/B19644_10_10.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图10.10：makemigrations命令的结果](img/B19644_10_10.jpg)'
- en: 'Figure 10.10: The result of the makemigrations command'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.10：makemigrations命令的结果
- en: 'You’ll find some messages in the `manage.py` panel as well as a new file in
    the `migrations` folder called something like `0001_initial.py`. The `makemigrations`
    command generated the code needed for the migration, but it hasn’t performed the
    migration yet. Performing the migration is what affects the changes to the database.
    In order to run the migration, type this into the `manage.py` task panel:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在`manage.py`面板中找到一些消息，以及在`migrations`文件夹中名为类似`0001_initial.py`的新文件。`makemigrations`命令生成了迁移所需的代码，但尚未执行迁移。执行迁移是影响数据库变化的方式。为了运行迁移，请在`manage.py`任务面板中输入以下内容：
- en: '[PRE9]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The output from the command, shown in *Figure 10**.11*, indicates the database
    structure has been updated to match the models.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 命令的输出，如图*图10**.11*所示，表明数据库结构已更新以匹配模型。
- en: '![Figure 10.11: The result of the migration is a set of messages and the appearance
    of our database file](img/B19644_10_11.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图10.11：迁移的结果是一系列消息和我们的数据库文件的外观](img/B19644_10_11.jpg)'
- en: 'Figure 10.11: The result of the migration is a set of messages and the appearance
    of our database file'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.11：迁移的结果是一系列消息和我们的数据库文件的外观
- en: We see a bunch of SQL statements that were generated to bring the database structure
    up to match the structure of the models. We also see a new file for our database.
    If you remember, we saw earlier that the name and path of this file were set in
    the `settings.py` file. Since SQLite3 is a file database, this is the actual database
    itself. This is the kind of thing you might want to exclude from revision control
    on a real project.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到了一些SQL语句，这些语句被生成以使数据库结构匹配模型的结构。我们还看到了一个关于我们数据库的新文件。如果你记得，我们之前看到这个文件的名字和路径是在`settings.py`文件中设置的。由于SQLite3是一个文件数据库，这就是实际的数据库本身。这类东西你可能希望在真实项目中排除在版本控制之外。
- en: The Django admin interface
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Django管理界面
- en: 'This is one of the killer features of Django: it creates a web-based administrative
    panel for you. This means you don’t have to build an interface for dealing with
    users, handling logins, or creating screens for simple data entry into your model
    structure. The first thing every app needs is an administrative user or superuser.
    It is common for applications to have role-based user access, and the super-user
    is the user who can do everything, including adding new users. This kind of thing
    might take a developer two or three days to get working, but with Django, it’s
    already done.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Django的一个杀手级特性：它为你创建了一个基于Web的管理面板。这意味着你不需要为处理用户、处理登录或创建简单数据输入到你的模型结构中的屏幕来构建界面。每个应用程序都需要一个管理用户或超级用户。对于应用程序来说，拥有基于角色的用户访问是很常见的，超级用户是能够做任何事情的用户，包括添加新用户。这类事情可能需要开发者两三天才能完成，但使用Django，这一切都已经准备好了。
- en: Creating a superuser and logging in
  id: totrans-154
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建超级用户并登录
- en: Before users, logins, or any of the other goodies we’re talking about here work,
    you need to apply a migration that was generated for you when you created the
    project.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在用户、登录或我们在这里讨论的其他任何好东西工作之前，你需要应用在创建项目时为你生成的迁移。
- en: 'Let’s head back to our `manage.py` task panel and type this command:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的`manage.py`任务面板，并输入以下命令：
- en: '[PRE10]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Just like that, by itself. This adds all the base tables for the application.
    We probably should have done this first, but I didn’t want to break the flow of
    what we were working on. OK, really I forgot, but it sounded better the other
    way.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，自然而然地。这将为应用程序添加所有基础表。我们可能应该先做这件事，但我不想打断我们正在工作的流程。好吧，实际上我忘记了，但那样听起来更好。
- en: 'With that migration run we now have all the tables and structures in the database
    to support Django’s login and user administration feature. Next, let’s create
    the superuser. In the panel, type the following:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这次迁移运行，我们现在数据库中已经有了所有表和结构，以支持Django的登录和用户管理功能。接下来，让我们创建超级用户。在面板中，输入以下内容：
- en: '[PRE11]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: You are asked a set of questions designed to create a superuser for your application
    as shown in *Figure 10**.12*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 你会被问到一系列问题，这些问题旨在为你的应用程序创建一个超级用户，如图*图10.12*所示。
- en: '![Figure 10.12: The manage.py panel interaction for creating a superuser](img/B19644_10_12.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图10.12：创建超级用户的管理.py面板交互](img/B19644_10_12.jpg)'
- en: 'Figure 10.12: The manage.py panel interaction for creating a superuser'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.12：创建超级用户的管理.py面板交互
- en: 'Let’s try out the management interface! While you could just use the run configuration,
    let’s see what it is like to run it from the `manage.py` task panel. Type the
    following:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试一下管理界面！虽然你可以直接使用运行配置，但让我们看看从`manage.py`任务面板运行它的感觉。输入以下内容：
- en: '[PRE12]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then click the link in the panel message shown in *Figure 10**.13*.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然后点击*图10.13*中面板消息中的链接。
- en: '![Figure 10.13: This time, let’s run from the panel!](img/B19644_10_13.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![图10.13：这次，让我们从面板开始运行！](img/B19644_10_13.jpg)'
- en: 'Figure 10.13: This time, let’s run from the panel!'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.13：这次，让我们从面板开始运行！
- en: In truth, it is the exact same thing you would have gotten by clicking the green
    run button as we did the first time we ran the app. After clicking the link, your
    browser opens to the same page we saw before. Change the URL in the browser to
    [http://127.0.0.1:8000/admin](http://127.0.0.1:8000/admin). This will take you
    to the administrative login page shown in *Figure 10**.14*.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这正是你第一次运行应用程序时点击绿色运行按钮所得到的结果。点击链接后，你的浏览器会打开到我们之前看到的同一页面。在浏览器中更改URL为[http://127.0.0.1:8000/admin](http://127.0.0.1:8000/admin)。这将带你到显示在*图10.14*中的管理登录页面。
- en: '![Figure 10.14: The best kind of login system is the one you didn’t have to
    make yourself!](img/B19644_10_14.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图10.14：最好的登录系统是你自己不需要创建的！](img/B19644_10_14.jpg)'
- en: 'Figure 10.14: The best kind of login system is the one you didn’t have to make
    yourself!'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.14：最好的登录系统是你不需要自己制作的！
- en: Type in the superuser user name and password you specified in the task panel.
    *Figure* *10**.15* shows the admin screen that should appear.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在任务面板中输入你指定的超级用户用户名和密码。*图10.15*显示了应该出现的管理屏幕。
- en: '![Figure 10.15: Without writing any code, we can add users and groups to the
    application](img/B19644_10_15.jpg)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![图10.15：无需编写任何代码，我们就可以向应用程序添加用户和组](img/B19644_10_15.jpg)'
- en: 'Figure 10.15: Without writing any code, we can add users and groups to the
    application'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.15：无需编写任何代码，我们就可以向应用程序添加用户和组
- en: Click around to see everything Django has generated for us. You can add users
    and groups to the application despite not having written any code for this – Django
    handled it for us. The downside here is that it was generated based on the Django
    project’s ideas on what an admin panel should look like and how it should work.
    While it is possible to customize some of this functionality, remember that I
    keep saying that Django is *opinionated*. It has assumptions baked in. Less opinionated
    frameworks would require you to build this or use a plugin, but you would be in
    total control over how this feature was implemented.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 点击查看Django为我们生成的一切。尽管你没有为这个应用程序编写任何代码，但你仍然可以添加用户和组。这里的缺点是，它是基于Django项目对管理面板应该是什么样子以及应该如何工作的想法生成的。虽然可以自定义一些此功能，但请记住，我一直在说Django是*有偏见的*。它内置了一些假设。不那么有偏见的框架可能需要你构建这个或使用插件，但你将完全控制这个功能的实现方式。
- en: Adding the Author and Book models to the admin interface
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将作者和书籍模型添加到管理界面
- en: While you get users and groups for free, you do have to do a tiny bit of work
    to get authors and books to show up in the admin interface. Let’s start with the
    `Author` model.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以免费获得用户和组，但你必须做一点工作才能让作者和书籍显示在管理界面中。让我们从`Author`模型开始。
- en: 'Open the `admin.py` file in `TheGreatBookery` folder and find a comment that
    says `# Register your models here`. Add the following code:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在`TheGreatBookery`文件夹中打开`admin.py`文件，并找到一条注释，内容为`# Register your models here`。添加以下代码：
- en: '[PRE13]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: If your app stopped or crashed, go ahead and restart it, then navigate to the
    admin page as before. You should now see **Authors** appear on the admin page,
    as shown in *Figure 10**.16*.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的应用停止或崩溃，请继续重启它，然后像以前一样导航到管理页面。你现在应该会在管理页面上看到**作者**，如*图10.16*所示。
- en: '![Figure 10.16: With very little effort, we can now add, edit, and delete authors](img/B19644_10_16.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![图10.16：只需付出很少的努力，我们现在就可以添加、编辑和删除作者](img/B19644_10_16.jpg)'
- en: 'Figure 10.16: With very little effort, we can now add, edit, and delete authors'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.16：只需付出很少的努力，我们现在就可以添加、编辑和删除作者
- en: We have the Author model; let’s add `Book`. This one is a little fancier. Remember,
    there is a relationship between Book and Author. Each Author can be related to
    many Books, or inversely, many Books are related to one Author.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有作者模型；让我们添加“书籍”。这个模型稍微复杂一些。记住，书籍和作者之间存在关系。每个作者可以与多本书相关联，反之亦然，多本书可以与一个作者相关联。
- en: Since this is so, we want the admin interface to not only reflect this relationship
    but enforce it at the UI layer. You can just slap an import for the book model
    in and expect it to work perfectly.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 由于如此，我们希望管理界面不仅反映这种关系，而且在UI层强制执行。你只需将书籍模型的导入粘贴进去，就可以期望它完美工作。
- en: 'Go back to the `admin.py` file and add this code:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 返回到`admin.py`文件，并添加以下代码：
- en: '[PRE14]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This code creates an addition to the `Author` UI that allows you to add books
    inline which is to say when you add an author, you will then have the opportunity
    to add books. You can’t have books without first adding authors. Because we defined
    the relationship and the UI this way, the ability to add and edit books is part
    of administering the author. You’ll never even have the chance to mess up by adding
    books before authors, or by somehow disassociating a book from an author.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码为`Author` UI添加了一个功能，允许你内联添加书籍，也就是说，当你添加作者时，你将有机会添加书籍。没有先添加作者，你不能添加书籍。因为我们这样定义了关系和UI，添加和编辑书籍的能力是管理作者的一部分。你永远不会有机会在添加作者之前添加书籍，或者以某种方式将书籍与作者解关联。
- en: Restart your server, and refresh your browser. Nothing changed! Hang on, that’s
    OK. We haven’t tried to add an author yet. Click **Authors** and then click **Add**,
    and you’ll find the interface shown in *Figure 10**.17*.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动你的服务器，并刷新你的浏览器。没有任何变化！等等，这是正常的。我们还没有尝试添加作者。点击**作者**，然后点击**添加**，你将看到*图10.17*所示的界面。
- en: '![Figure 10.17: Our code added inline books to the UI for managing authors](img/B19644_10_17.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图10.17：我们的代码将内联书籍添加到管理作者的UI中](img/B19644_10_17.jpg)'
- en: 'Figure 10.17: Our code added inline books to the UI for managing authors'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.17：我们的代码将内联书籍添加到管理作者的UI中
- en: As you can see, the form for adding books is now attached inline to the form
    for working with authors.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，添加书籍的表单现在已内联附加到处理作者的工作表单中。
- en: Creating Django views
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建Django视图
- en: The admin UI is pretty magical, but it is really only designed to create simple
    screens for managing data in a database. Sooner or later, you’re going to have
    to actually make some real screens for the app itself.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 管理员UI非常神奇，但它实际上仅设计用于创建用于在数据库中管理数据的简单屏幕。迟早，您将不得不为应用本身实际创建一些真正的屏幕。
- en: We need to be careful about terminology here because the word *views* doesn’t
    mean what you might expect if you are versed in more conventional web development
    design patterns. The prevailing industry pattern is called **Model-View-Controller**
    (**MVC**). The pattern employed by Django is called **Model-View-Template** (**MVT**).
    *View* doesn’t mean the same thing between the two patterns. Let’s compare the
    two.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们需要注意术语，因为如果你熟悉更传统的Web开发设计模式，那么“视图”这个词可能不会像你预期的那样。主流的行业模式被称为**模型-视图-控制器**（**MVC**）。Django使用的模式被称为**模型-视图-模板**（**MVT**）。在这两种模式中，“视图”的含义并不相同。让我们比较一下这两种模式。
- en: '| **MVC** | **MVT** |'
  id: totrans-195
  prefs: []
  type: TYPE_TB
  zh: '| **MVC** | **MVT** |'
- en: '| Model refers to the data structure, usually from a database. | Model means
    the same thing as it does in MVC. |'
  id: totrans-196
  prefs: []
  type: TYPE_TB
  zh: '| 模型指的是数据结构，通常来自数据库。 | 模型在MVC中的含义与MVC相同。 |'
- en: '| View refers to the visual elements which is usually the user interface. |
    View refers to the controller layer, which accepts incoming requests, performs
    logic, and returns content or data. |'
  id: totrans-197
  prefs: []
  type: TYPE_TB
  zh: '| 视图层通常指的是用户界面中的视觉元素。 | 视图层指的是控制器层，它接受传入的请求，执行逻辑，并返回内容或数据。 |'
- en: '| Controller refers to a layer that accepts incoming requests, performs logic,
    and returns content or data | Template refers to the View in MVC, which is the
    HTML or user interface elements in the application. |'
  id: totrans-198
  prefs: []
  type: TYPE_TB
  zh: '| 控制器层接受传入的请求，执行逻辑，并返回内容或数据 | 模板在MVC中指的是视图，即应用中的HTML或用户界面元素。 |'
- en: In summary, the Django View is really the Controller, and the Django Template
    would be the View in an MVC app. So here, when we are about to make the View,
    we’re talking about the part of the app that receives requests, does something,
    then returns the response.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，Django视图实际上是控制器，而Django模板将是MVC应用中的视图。因此，当我们即将创建视图时，我们谈论的是接收请求、执行某些操作然后返回响应的应用部分。
- en: 'Open the `views.py` file in the `TheGreatBookery` folder. Change the code to
    this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`TheGreatBookery`文件夹中的`views.py`文件。将代码更改为以下内容：
- en: '[PRE15]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: from django.contrib import admin
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: from django.contrib import admin
- en: from django.urls import path
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: from django.urls import path
- en: from TheGreatBookery.views import index
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: from TheGreatBookery.views import index
- en: urlpatterns = [
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: urlpatterns = [
- en: path('admin/', admin.site.urls),
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: path('admin/', admin.site.urls),
- en: path('', index, name='index')
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: path('', index, name='index')
- en: ']'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '[PRE16]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '{% if latest_books %}'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '{% if latest_books %}'
- en: <ul>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <ul>
- en: '{% for book in latest_books %}'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '{% for book in latest_books %}'
- en: <li>{{ book.title }} by {{ book.author }}</li>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <li>{{ book.title }} by {{ book.author }}</li>
- en: '{% endfor %}'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '{% endfor %}'
- en: </ul>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: </ul>
- en: '{% else %}'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '{% else %}'
- en: <p>No books available.</p>
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: <p>没有可用的书籍。</p>
- en: '{% endif %}'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '{% endif %}'
- en: '[PRE17]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
