- en: Chapter 34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Introduction to Subprograms
  prefs: []
  type: TYPE_NORMAL
- en: 34.1 What Exactly is a Subprogram?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In computer science, a subprogram is a block of statements packaged as a unit
    that performs a specific task. A subprogram can be called several times within
    a program, whenever that specific task needs to be performed.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, a built-in function is an example of such a subprogram. Take the
    well-known abs() function, for example. It consists of a block of statements packaged
    as a unit under the name “abs”, and it performs a specific task—it returns the
    absolute value of a number.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)If you are wondering what kind of statements might exist
    inside the function abs(), here is a possible block of statements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'if number < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: return number * (-1)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: return number
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, there are two kinds of subprograms: functions and procedures.
    The difference between a function and a procedure is that a function returns a
    result, whereas a procedure doesn''t. However, in some computer languages, this
    distinction may not quite be apparent. There are languages in which a function
    can also behave as a procedure and return no result, and there are languages in
    which a procedure can return one or even more than one result.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Depending on the computer language being used, the terms
    “function” and “procedure” may be different. For example, in Visual Basic you
    can find them as “functions” and “subprocedures”, in FORTRAN as “functions” and
    “subroutines”, whereas in Python, the preferred terms are usually “functions”
    and “void functions”.'
  prefs: []
  type: TYPE_NORMAL
- en: 34.2 What is Procedural Programming?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose you were assigned a project to solve the drug abuse problem in your
    area. One possible approach (which could prove very difficult or even impossible)
    would be to try to solve this problem by yourself!
  prefs: []
  type: TYPE_NORMAL
- en: A better approach, however, would be to subdivide the large problem into smaller
    subproblems such as prevention, treatment, and rehabilitation, each of which could
    be further subdivided into even smaller subproblems, as shown in Figure 34–1.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter34-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34–1 A problem can be subdivided into smaller problems
  prefs: []
  type: TYPE_NORMAL
- en: 'As the supervisor of this project, you could rent a building and establish
    within it three departments: the prevention department, with all of its subdepartments;
    the treatment department, with all of its subdepartments; and the rehabilitation
    department with all of its subdepartments. Finally, you would hire staff (specialists
    from a variety of fields), you would build teams and employ them to do the job
    for you!'
  prefs: []
  type: TYPE_NORMAL
- en: Procedural programming does exactly the same thing. It subdivides an initial
    problem into smaller subproblems, and each subproblem is further subdivided into
    smaller subproblems. Finally, for each subproblem a small subprogram is written,
    and the main program (as does the supervisor), calls (employs) each of them to
    do a different part of the job.
  prefs: []
  type: TYPE_NORMAL
- en: 'Procedural programming offers several advantages:'
  prefs: []
  type: TYPE_NORMAL
- en: ►It enables programmers to reuse the same code whenever necessary, without the
    need for rewriting or copying it.
  prefs: []
  type: TYPE_NORMAL
- en: ►It is relatively easy to implement.
  prefs: []
  type: TYPE_NORMAL
- en: ►It helps programmers follow the flow of execution more easily, simplifying
    the debugging process.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A very large program can prove very difficult to debug and
    maintain when it is all in one piece. For this reason, it is often easier to subdivide
    it into smaller subprograms, each of which performs a clearly defined process.'
  prefs: []
  type: TYPE_NORMAL
- en: 34.3 What is Modular Programming?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In modular programming, subprograms of common functionality can be grouped together
    into separate modules, and each module can have its own set of data. Therefore,
    a program can consist of more than one part, and each of those parts (modules)
    can contain one or more smaller parts (subprograms).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The math module is such an example. It contains subprograms
    of common functionality (related to Math), such as fsum(), sqrt(), sin(), cos(),
    tan(), and many more.'
  prefs: []
  type: TYPE_NORMAL
- en: If you were to use modular programming in the previous drug problem example,
    then you could have three separate buildings—one to host the prevention department
    and all of its subdepartments, a second one to host the treatment department and
    all of its subdepartments, and a third one to host the rehabilitation department
    and all of its subdepartments (as shown in Figure 34–2). These three buildings
    could be thought of as three different modules in modular programming, each of
    which would contain subprograms of common functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter34-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 34–2 Subprograms of common functionality can be grouped together into
    separate modules.
  prefs: []
  type: TYPE_NORMAL
- en: '34.4 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A subprogram is a block of statements packaged as a unit that performs a specific
    task.
  prefs: []
  type: TYPE_NORMAL
- en: '2)In general, there are two kinds of subprograms: functions and procedures.'
  prefs: []
  type: TYPE_NORMAL
- en: 3)In general, the difference between a function and a procedure is that a procedure
    returns a result, whereas a function does not.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Python supports only procedures.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Procedural programming subdivides the initial problem into smaller subproblems.
  prefs: []
  type: TYPE_NORMAL
- en: 6)An advantage of procedural programming is the ability to reuse the same code,
    without the need for rewriting or copying it.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Procedural programming helps programmers follow the flow of execution more
    easily.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Modular programming increases program development speed.
  prefs: []
  type: TYPE_NORMAL
- en: 9)In modular programming, subprograms of common functionality are grouped together
    into separate modules.
  prefs: []
  type: TYPE_NORMAL
- en: 10)In modular programming, each module can have its own set of data.
  prefs: []
  type: TYPE_NORMAL
- en: 11)Modular programming uses different structures than structured programming
    does.
  prefs: []
  type: TYPE_NORMAL
- en: 12)A program can consist of more than one module.
  prefs: []
  type: TYPE_NORMAL
