["```py\nhttp PATCH \":5000/service/notifications/2\" displayed_once=true displayed_times=1\n```", "```py\nhttp POST \":5000/service/notifications/\" message='Clash Royale has a new winner' ttl=25 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='Uncharted 4 has a new 2nd position score' ttl=20 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='Fortnite has a new 4th position score' ttl=18 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='Injustice 2 has a new winner' ttl=14 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='PvZ Garden Warfare 2 has a new winner' ttl=22 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='Madden NFL 19 has a new 3rd position score' ttl=15 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='Madden NFL 19 has a new winner' ttl=18 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='FIFA 19 has a new 3rd position score' ttl=16 notification_category='Information'\nhttp POST \":5000/service/notifications/\" message='NBA Live 19 has a new winner' ttl=5 notification_category='Information'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Clash Royale has a new winner\", \"ttl\":25, \"notification_category\": \"Information\"}'\n\"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Uncharted 4 has a new 2nd position score\", \"ttl\":20, \"notification_category\": \"Information\"}' \"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Fortnite has a new 4th position score\", \"ttl\":18, \"notification_category\": \"Information\"}' \"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Injustice 2 has a new winner\", \"ttl\":14, \"notification_category\": \"Information\"}' \"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"PvZ Garden Warfare 2 has a new winner\", \"ttl\":22, \"notification_category\": \"Information\"}'\n\"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Madden NFL 19 has a new 3rd position score\", \"ttl\":15, \"notification_category\": \"Information\"}' \"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"Madden NFL 19 has a new winner\", \"ttl\":18, \"notification_category\": \"Information\"}' \"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"FIFA 19 has a new 3rd position score\", \"ttl\":16, \"notification_category\": \"Information\"}' \"localhost:5000/service/notifications/\"\n\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\"NBA Live 19 has a new winner\", \"ttl\":5, \"notification_category\": \"Information\"}' \n\"localhost:5000/service/notifications/\"\n```", "```py\nPAGINATION_PAGE_SIZE = 4 \nPAGINATION_PAGE_ARGUMENT_NAME = 'page' \n```", "```py\nfrom flask import url_for \nfrom flask import current_app \n\nclass PaginationHelper(): \n    def __init__(self, request, query, resource_for_url, key_name, schema): \n        self.request = request \n        self.query = query \n        self.resource_for_url = resource_for_url \n        self.key_name = key_name \n        self.schema = schema \n        self.page_size =\ncurrent_app.config['PAGINATION_PAGE_SIZE'] \n        self.page_argument_name = current_app.config['PAGINATION_PAGE_ARGUMENT_NAME'] \n\n    def paginate_query(self): \n        # If no page number is specified, we assume the request requires page #1 \n        page_number = self.request.args.get(self.page_argument_name, 1, type=int) \n        paginated_objects = self.query.paginate( \n            page_number, \n            per_page=self.page_size, \n            error_out=False) \n        objects = paginated_objects.items \n        if paginated_objects.has_prev: \n            previous_page_url = url_for( \n                self.resource_for_url,  \n                page=page_number-1,  \n                _external=True) \n        else: \n            previous_page_url = None \n        if paginated_objects.has_next: \n            next_page_url = url_for( \n                self.resource_for_url, \n                page=page_number+1, \n                _external=True) \n        else: \n            next_page_url = None \n        dumped_objects = self.schema.dump(objects, many=True).data \n        return ({ \n            self.key_name: dumped_objects, \n            'previous': previous_page_url, \n            'next': next_page_url, \n            'count': paginated_objects.total \n        }) \n```", "```py\nfrom helpers import PaginationHelper \n\nclass NotificationListResource(Resource): \n def get(self): pagination_helper = PaginationHelper( request, query=Notification.query, resource_for_url='service.notificationlistresource', key_name='results', schema=notification_schema) pagination_result = pagination_helper.paginate_query() return pagination_result\n```", "```py\nflask-HTTPAuth==3.2.4 \npasslib==1.7.1\n```", "```py\n pip install -r requirements.txt \n```", "```py\n    Installing collected packages: Flask-HTTPAuth, passlib\n    Successfully installed Flask-HTTPAuth-3.2.4 passlib-1.7.1  \n```", "```py\nfrom passlib.apps import custom_app_context as password_contextimport re class User(orm.Model, ResourceAddUpdateDelete): id = orm.Column(orm.Integer, primary_key=True) name = orm.Column(orm.String(50), unique=True, nullable=False) # I save the hash for the password (I don't persist the actual password) password_hash = orm.Column(orm.String(120), ...\n```", "```py\nclass UserSchema(ma.Schema): \n    id = fields.Integer(dump_only=True) \n    name = fields.String(required=True,  \n        validate=validate.Length(3)) \n    url = ma.URLFor('service.userresource',  \n        id='<id>',  \n        _external=True) \n```", "```py\nfrom flask_httpauth ...\n```", "```py\nclass UserResource(AuthenticationRequiredResource): \n    def get(self, id): \n        user = User.query.get_or_404(id) \n        result = user_schema.dump(user).data \n        return result \n```", "```py\nclass UserListResource(Resource): \n @auth.login_required def get(self): \n        pagination_helper = PaginationHelper( \n            request, \n            query=User.query, \n            resource_for_url='service.userlistresource', \n            key_name='results', \n            schema=user_schema) \n        result = pagination_helper.paginate_query() \n        return result \n\n def post(self): \n        user_dict = request.get_json() \n        if not user_dict: \n            response = {'user': 'No input data provided'} \n            return response, HttpStatus.bad_request_400.value \n        errors = user_schema.validate(user_dict) \n        if errors: \n            return errors, HttpStatus.bad_request_400.value \n        user_name = user_dict['name'] \n        existing_user = User.query.filter_by(name=user_name).first() \n        if existing_user is not None: \n            response = {'user': 'An user with the name {} already exists'.format(user_name)} \n            return response, HttpStatus.bad_request_400.value \n        try: \n            user = User(name=user_name) \n            error_message, password_ok = \\ \n                user.check_password_strength_and_hash_if_ok(user_dict['password']) \n            if password_ok: \n                user.add(user) \n                query = User.query.get(user.id) \n                dump_result = user_schema.dump(query).data \n                return dump_result, HttpStatus.created_201.value \n            else: \n                return {\"error\": error_message}, HttpStatus.bad_request_400.value \n        except SQLAlchemyError as e: \n            orm.session.rollback() \n            response = {\"error\": str(e)} \n            return response, HttpStatus.bad_request_400.value\n```", "```py\nservice.add_resource(UserListResource,  \n    '/users/') \nservice.add_resource(UserResource,  \n    '/users/<int:id>') \n```", "```py\n    flask db migrate\n```", "```py\n    http GET \":5000/service/notifications/?page=1\"\n```", "```py\n    curl -iX GET \"localhost:5000/service/notifications/?page=1\"\n```", "```py\n    HTTP/1.0 401 UNAUTHORIZED\n    Content-Length: 19\n    Content-Type: text/html; charset=utf-8\n    Date: Sat, 20 Oct 2018 00:30:56 GMT\n    Server: Werkzeug/0.14.1 Python/3.7.1\n    WWW-Authenticate: Basic realm=\"Authentication Required\"\n\n    Unauthorized Access\n\n```", "```py\nhttp POST \":5000/service/users/\" name='gaston-hillar' password='wrongpassword'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\": \n\"gaston-hillar\", \"password\": \"wrongpassword\"}' \"localhost:5000/service/users/\"\n\n```", "```py\n    HTTP/1.0 400 BAD REQUEST\n    Content-Length: 76\n    Content-Type: application/json\n    Date: Sat, 20 Oct 2018 04:19:45 GMT\n    Server: Werkzeug/0.14.1 Python/3.7.1\n\n   {\n        \"error\": \"The password must include at least one uppercase \n    letter.\"\n    }\n\n```", "```py\nhttp POST \":5000/service/users/\" name='gaston-hillar' password='TTl#ID16^eplG'\n\n```", "```py\n curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\": \"gaston-hillar\", \"password\": \"TTl#ID16^eplG\"}' \"localhost:5000/service/users/\"\n\n```", "```py\n    HTTP/1.0 201 CREATED\n    Content-Length: 97\n    Content-Type: application/json\n    Date: Sat, 20 Oct 2018 15:58:15 GMT\n    Server: Werkzeug/0.14.1 Python/3.7.1\n\n    {\n        \"id\": 1,\n        \"name\": \"gaston-hillar\",\n        \"url\": \"http://localhost:5000/service/users/1\"\n    }\n\n```", "```py\n    http -a 'gaston-hillar':'TTl#ID16^eplG' \":5000/service/notifications/?page=1\"\n\n```", "```py\ncurl --user 'gaston-hillar':'TTl#ID16^eplG' -iX GET \"localhost:5000/service/notifications/?page=1\"\n\n```"]