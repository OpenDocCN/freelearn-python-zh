["```py\nfrom entity import *\nclass Entity(AbstractEntity):\n\tdatabase=\"/tmp/abc.db\"\nclass MyEntity(Entity): a=Attribute(unique=True, notnull=True, affinity='float',\n\t\tdisplayname='Attribute A', validate=lambda x:x<5)\na=MyEntity(a=3.14)\nprint(MyEntity.list())\ne=MyEntity.list(pattern=[('a',3.14)])[0]\nprint(e)\ne.delete()\na=MyEntity(a=2.71)\nprint([str(e) for e in MyEntity.list()])\na.a=1\na.update()\nprint([str(e) for e in MyEntity.list()])\na.a=9\n\n```", "```py\n [MyEntity(id=5)]\n<MyEntity: Atrribute A=3.14, id=5>\n['<MyEntity: Atrribute A=2.71, id=6>']\n['<MyEntity: Atrribute A=1.0, id=6>']\nTraceback (most recent call last):\nFile \"testentity.py\", line 25, in <module>\n\ta.a=9\nFile \"C:\\Documents and Settings\\Michel\\Bureaublad\\MetaBase\\Books II\\entity.py\"\n, line 117, in __setattr__\n\traise AttributeError(\"assignment to \"+name+\" does not validate\")\nAttributeError: assignment to a does not validate\n\n```", "```py\nclass hasinfo(type):\n\tdef __new__(metaclass, classname, baseclasses, classdict):\n\t\tif len(baseclasses) and not '__info__' in classdict:\n\t\t\traise TypeError('does not have __info__')\n\t\treturn type.__new__(metaclass,\n\t\t\t\tclassname, baseclasses, classdict)\nclass withinfo(metaclass=hasinfo):\n\tpass\nclass correct(withinfo):\n\tdef __info__(self): pass\nclass incorrect(withinfo):\n\tpass\n\n```", "```py\nclass Attribute:\n\tdef __init__(self, unique=False, notnull=False,\n\t\t\t\t\t\t\t\tdefault=None, affinity=None, validate=None,\n\t\t\t\t\t\t\t\tdisplayname=None, primary=False): self.coldef = (\n\t\t\t\t(affinity+' ' if not affinity is None else '') +\n\t\t\t\t('unique ' if unique else '') +\n\t\t\t\t('not null ' if notnull else '') +\n\t\t\t\t('default %s '%default if not default is None else '')\n\t\t)\n\t\tself.validate = validate\n\t\tself.displayname = displayname\n\t\tself.primary = primary\n\n```", "```py\nclass MetaEntity(type):\n\t@classmethod\n\tdef __prepare__(metaclass, classname, baseclasses, **kwds):\n\t\treturn collections.OrderedDict()\n\t@staticmethod\n\tdef findattr(classes,attribute):\n\t\ta=None\n\t\tfor c in classes:\n\t\t\tif hasattr(c,attribute):\n\t\t\t\ta=getattr(c,attribute)\n\t\t\t\tbreak\n\t\t\tif a is None:\n\t\t\t\tfor c in classes:\n\t\t\t\t\ta = MetaEntity.findattr(c.__bases__,attribute)\n\t\t\t\t\tif not a is None:\n\t\t\t\t\t\tbreak\n\t\t\treturn a\n\tdef __new__(metaclass,classname,baseclasses,classdict):\n\t\tdef connect(cls):\n\t\t\tif not hasattr(cls._local,'conn'):\n\t\t\t\tcls._local.conn=sqlite.connect(cls._database)\n\t\t\t\tcls._local.conn.execute('pragma foreign_keys = 1')\n\t\t\t\tcls._local.conn.row_factory = sqlite.Row\n\t\t\treturn cls._local.conn\n\t\tentitydefinition = False if len(baseclasses):\n\t\t\tif not 'database' in classdict:\n\t\t\t\tclassdict['_database']=MetaEntity.findattr(\n\t\t\t\t\t\t\tbaseclasses,'database')\n\t\t\t\tif classdict['_database'] is None:\n\t\t\t\t\traise AttributeError(\n\t\t\t\t\t\t'''subclass of AbstractEntity has no\n\t\t\t\t\t\tdatabase class variable''')\n\t\t\t\t\tentitydefinition=True\n\t\t\tif not '_local' in classdict:\n\t\t\t\tclassdict['_local']=MetaEntity.findattr(\n\t\t\t\t\t\t\tbaseclasses,'_local')\n\t\t\tclassdict['_connect']=classmethod(connect) classdict['columns']=[\n\t\t\t\tk for k,v in classdict.items()\n\t\t\t\t\tif type(v) == Attribute]\n\t\t\tclassdict['sortorder']=[]\n\t\t\tclassdict['displaynames']={\n\t\t\t\tk:v.displayname if v.displayname else k\n\t\t\t\tfor k,v in classdict.items()\n\t\t\t\tif type(v) == Attribute}\n\t\t\tclassdict['validators']={\n\t\t\t\tk:v.validate for k,v in classdict.items()\n\t\t\t\tif type(v) == Attribute\n\t\t\t\t\tand not v.validate is None} classdict['displaynames']['id']='id'\n\t\t\tPrimaryKey = Attribute()\n\t\t\tPrimaryKey.coldef = 'integer primary key '\n\t\t\tPrimaryKey.coldef+= 'autoincrement'\n\t\t\tif entitydefinition:\n\t\t\t\tsql = 'create table if not exists '\n\t\t\t\tsql+= classname +' ('\n\t\t\t\tsql+= \", \".join([k+' '+v.coldef\n\t\t\t\t\tfor k,v in [('id',PrimaryKey)]\n\t\t\t\t\t\t\t+list(classdict.items())\n\t\t\t\t\t\t\tif type(v) == Attribute])\n\t\t\t\tsql+= ')'\n\t\t\t\tconn = sqlite.connect(classdict['_database'])\n\t\t\t\tconn.execute(sql)\n\t\t\tfor k,v in classdict.items():\n\t\t\t\tif type(v) == Attribute:\n\t\t\t\t\tif v.primary:\n\t\t\t\t\t\tclassdict['primary']=property(\n\t\t\t\t\t\t\tlambda self:getattr(self,k))\n\t\t\t\t\t\tclassdict['primaryname']=k\n\t\t\t\t\t\tbreak\n\t\t\tif not 'primary' in classdict:\n\t\t\t\tclassdict['primary']=property(\n\t\t\t\t\tlambda self:getattr(self,'id'))\n\t\t\t\tclassdict['primaryname']='id'\n\t\treturn type.__new__(metaclass,\n\t\t\tclassname,baseclasses,classdict)\n\n```", "```py\n class AbstractEntity(metaclass=MetaEntity):\n\t_local = threading.local()\n\t@classmethod\n\tdef listids(cls,pattern=None,sortorder=None): sql = 'select id from %s'%(cls.__name__,)\n\t\targs = []\n\t\tif not pattern is None and len(pattern)>0:\n\t\t\t\tfor s in pattern:\n\t\t\t\t\t\tif not (s[0] in cls.columns or s[0]=='id'):\n\t\t\t\t\t\t\t\traise TypeError('unknown column '+s[0])\n\t\t\t\tsql += \" where \"\n\t\t\t\tsql += \" and \".join(\"%s like ?\"%s[0] for s in \npattern)\n\t\t\t\targs+= [s[1] for s in pattern]\n\t\tif sortorder is None:\n\t\t\tif not cls.sortorder is None :\n\t\t\t\t\tsortorder = cls.sortorder\n\t\telse:\n\t\t\tfor s in sortorder:\n\t\t\t\t\tif not (s[0] in cls.columns or s[0]=='id'):\n\t\t\t\t\t\t\traise TypeError('unknown column '+s[0])\n\t\t\t\t\tif not s[1] in ('asc', 'desc') :\n\t\t\t\t\t\t\traise TypeError('illegal sort \nargument'+s[1])\n\t\tif not (sortorder is None or len(sortorder) == 0):\n\t\t\tsql += ' order by '\n\t\t\tsql += ','.join(s[0]+' '+s[1] for s in sortorder)\n\t\tcursor=cls._connect().cursor()\n\t\tcursor.execute(sql,args)\n\t\treturn [r['id'] for r in cursor]\n\t@classmethod\n\tdef list(cls,pattern=None,sortorder=None):\n\t\treturn [cls(id=id) for id in cls.listids(\n\t\t\t\tsortorder=sortorder,pattern=pattern)]\n\t@classmethod\n\tdef getcolumnvalues(cls,column):\n\t\tif not column in cls.columns :\n\t\t\traise KeyError('unknown column '+column)\n\t\tsql =\"select %s from %s order by lower(%s)\"\n\t\tsql%=(column,cls.__name__,column)\n\t\tcursor=cls._connect().cursor()\n\t\tcursor.execute(sql)\n\t\treturn [r[0] for r in cursor.fetchall()]\n\tdef __str__(self):\n\t\treturn '<'+self.__class__.__name__+': '+\", \".join(\n\t\t\t\t[\"%s=%s\"%(displayname, getattr(self,column))\n\t\t\t\tfor column,displayname\n\t\t\t\tin self.displaynames.items()])+'>'\n\tdef __repr__(self):\n\t\treturn self.__class__.__name__+\"(id=\"+str(self.id)+\")\"\n\tdef __setattr__(self,name,value):\n\t\tif name in self.validators :\n\t\t\tif not self.validators[name](value):\n\t\t\t\traise AttributeError(\n\t\t\t\t\t\"assignment to \"+name+\" does not \nvalidate\")\n\t\tobject.__setattr__(self,name,value)\n\tdef __init__(self,**kw): if 'id' in kw:\n\t\t\t\tif len(kw)>1 :\n\t\t\t\t\t\traise AttributeError('extra keywords besides \nid')\n\t\t\t\tsql = 'select * from %s where id = ?'\n\t\t\t\tsql%= self.__class__.__name__\n\t\t\t\tcursor = self._connect().cursor()\n\t\t\t\tcursor.execute(sql,(kw['id'],))\n\t\t\t\tr=cursor.fetchone()\n\t\t\t\tfor c in self.columns:\n\t\t\t\t\t\tsetattr(self,c,r[c])\n\t\t\t\tself.id = kw['id']\n\t\t\telse:\n\t\t\t\trels={}\n\t\t\t\tattr={}\n\t\t\t\tfor col in kw:\n\t\t\t\t\t\tif not col in self.columns:\n\t\t\t\t\t\t\t\trels[col]=kw[col]\n\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tattr[col]=kw[col]\n\t\t\t\tname = self.__class__.__name__\n\t\t\t\tcols = \",\".join(attr.keys())\n\t\t\t\tqmarks = \",\".join(['?']*len(attr))\n\t\t\t\tif len(cols):\n\t\t\t\t\t\tsql = 'insert into %s (%s) values (%s)'\n\t\t\t\t\t\tsql%= (name,cols,qmarks)\n\t\t\t\telse:\n\t\t\t\t\t\tsql = 'insert into %s default values'%name\n\t\t\t\twith self._connect() as conn:\n\t\t\t\t\t\tcursor = conn.cursor()\n\t\t\t\t\t\tcursor.execute(sql,tuple(attr.values())) self.id = cursor.lastrowid\n\tdef delete(self):\n\t\tsql = 'delete from %s where id = ?'\n\t\tsql%= self.__class__.__name__\n\t\twith self._connect() as conn:\n\t\t\t\t\t\tcursor = conn.cursor()\n\t\t\t\t\t\tcursor.execute(sql,(self.id,))\n\tdef update(self,**kw):\n\t\tfor k,v in kw.items():\n\t\t\t\tsetattr(self,k,v)\n\t\tsets = []\n\t\tvals = []\n\t\tfor c in self.columns:\n\t\t\t\tif not c == 'id':\n\t\t\t\t\t\tsets.append(c+'=?')\n\t\t\t\t\t\tvals.append(getattr(self,c))\n\t\ttable = self.__class__.__name__\n\t\tsql = 'update %s set %s where id = ?'\n\t\tsql%=(table,\",\".join(sets))\n\t\tvals.append(self.id)\n\t\twith self._connect() as conn:\n\t\t\t\t\tcursor = conn.cursor()\n\t\t\t\t\tcursor.execute(sql,vals)\n\n```", "```py\nfrom os import unlink\ndb=\"/tmp/abcr.db\"\ntry:\n\tunlink(db)\nexcept:\n\tpass\nclass Entity(AbstractEntity):\n\tdatabase=db\nclass Relation(AbstractRelation):\n\tdatabase=db\nclass A(Entity): pass\nclass B(Entity): pass\nclass AB(Relation):\n\ta=A\n\tb=B\na1=A()\na2=A()\nb1=B()\nb2=B()\na1.add(b1)\na1.add(b2)\nprint(a1.get(B))\nprint(b1.get(A))\n\n```", "```py\nclass AbstractRelation(metaclass=MetaRelation):\n\t_local = threading.local()\n\n```", "```py\nclass MetaRelation(type):\n\t@staticmethod\n\tdef findattr(classes,attribute):\n\t\ta=None\n\t\tfor c in classes:\n\t\t\tif hasattr(c,attribute):\n\t\t\t\ta=getattr(c,attribute)\n\t\t\t\tbreak\n\t\tif a is None:\n\t\t\tfor c in classes:\n\t\t\t\ta = MetaRelation.findattr(c.__bases__,attribute)\n\t\t\t\tif not a is None:\n\t\t\t\t\tbreak\n\t\treturn a\n\tdef __new__(metaclass,classname,baseclasses,classdict):\n\t\tdef connect(cls):\n\t\t\tif not hasattr(cls._local,'conn'):\n\t\t\t\tcls._local.conn=sqlite.connect(cls._database)\n\t\t\t\tcls._local.conn.execute('pragma foreign_keys = 1')\n\t\t\t\tcls._local.conn.row_factory = sqlite.Row\n\t\t\treturn cls._local.conn\n\t\tdef get(self,cls):\n\t\t\treturn getattr(self,'get'+cls.__name__)()\n\t\tdef getclass(self,cls,relname):\n\t\t\tclsname = cls.__name__\n\t\t\tsql = 'select %s_id from %s where %s_id = ?'%(\n\t\t\t\tclsname,relname,self.__class__.__name__)\n\t\t\tcursor=self._connect().cursor()\n\t\t\tcursor.execute(sql,(self.id,))\n\t\t\treturn [cls(id=r[clsname+'_id']) for r in cursor]\n\t\tdef add(self,entity):\n\t\t\treturn getattr(self,\n\t\t\t\t'add'+entity.__class__.__name__)(entity)\n\t\tdef addclass(self,entity,Entity,relname):\n\t\t\tif not entity.__class__ == Entity :\n\t\t\t\traise TypeError(\n\t\t\t\t\t'entity not of the required class')\n\t\t\tsql = 'insert or replace into %(rel)s '\n\t\t\tsql+= '(%(a)s_id,%(b)s_id) values (?,?)'\n\t\t\tsql%= { 'rel':relname,\n\t\t\t\t'a':self.__class__.__name__,\n\t\t\t\t'b':entity.__class__.__name__}\n\t\t\twith self._connect() as conn:\n\t\t\t\tcursor = conn.cursor()\n\t\t\t\tcursor.execute(sql,(self.id,entity.id))\n\t\trelationdefinition = False\n\t\tif len(baseclasses):\n\t\t\tif not 'database' in classdict:\n\t\t\t\tclassdict['_database']=MetaRelation.findattr(\n\t\t\t\t\tbaseclasses,'database')\n\t\t\t\tif classdict['_database'] is None:\n\t\t\t\t\traise AttributeError(\n\t\t\t\t\t\t'''subclass of AbstractRelation has no\n\t\t\t\t\t\tdatabase class variable''') relationdefinition=True\n\t\t\t\tif not '_local' in classdict:\n\t\t\t\t\tclassdict['_local']=MetaRelation.findattr(\n\t\t\t\t\t\tbaseclasses,'_local')\n\t\t\t\tclassdict['_connect']=classmethod(connect)\n\t\t\t\tif relationdefinition:\n\t\t\t\t\ta = classdict['a']\n\t\t\t\t\tb = classdict['b'] if not issubclass(a,AbstractEntity) :\n\t\t\t\t\t\traise TypeError('a not an AbstractEntity')\n\t\t\t\t\tif not issubclass(a,AbstractEntity) :\n\t\t\t\t\t\traise TypeError('b not an AbstractEntity')\n\t\t\t\t\t\tsql = 'create table if not exists %(rel)s '\n\t\t\t\t\t\tsql+= '( %(a)s_id references %(a)s '\n\t\t\t\t\t\tsql+= 'on delete cascade, '\n\t\t\t\t\t\tsql+= '%(b)s_id references %(b)s '\n\t\t\t\t\t\tsql+= 'on delete cascade, '\n\t\t\t\t\t\tsql+= 'unique(%(a)s_id,%(b)s_id))'\n\t\t\t\t\t\tsql%= { 'rel':classname,\n\t\t\t\t\t\t\t'a':a.__name__,\n\t\t\t\t\t\t\t'b':b.__name__}\n\t\t\t\t\t\tconn = sqlite.connect(classdict['_database'])\n\t\t\t\t\t\tconn.execute(sql) setattr(a,'get'+b.__name__,\n\t\t\t\t\t\t\tlambda self:getclass(self,b,classname))\n\t\t\t\t\t\tsetattr(a,'get',get) setattr(b,'get'+a.__name__,\n\t\t\t\t\t\t\tlambda self:getclass(self,a,classname))\n\t\t\t\t\t\tsetattr(b,'get',get) setattr(a,'add'+b.__name__,\n\t\t\t\t\t\tlambda self,entity:addclass(self,\n\t\t\t\t\t\t\t\t\tentity,b,classname))\n\t\t\t\t\t\tsetattr(a,'add',add) setattr(b,'add'+a.__name__,\n\t\t\t\t\t\tlambda self,entity:addclass(self,\n\t\t\t\t\t\t\t\t\tentity,a,classname))\n\t\t\t\t\t\tsetattr(b,'add',add)\n\t\t\t\treturn type.__new__(metaclass,\n\t\t\t\t\t\t\tclassname,baseclasses,classdict)\n\n```", "```py\nclass Owner(Relation):\n\ta=Car\n\tb=User\n\n```", "```py\ncreate table if not exists Owner (\n\tCar_id references Car on delete cascade,\n\tUser_id references User on delete cascade,\n\tunique(Car_id,User_id)\n)\n\n```", "```py\nsetattr(a,'get'+b.__name__,lambda self:getclass(self,b,classname))\n\n```", "```py\ngetclass(a1,B,'AB')\n\n```", "```py\n\t\t\tdef getclass(self,cls,relname):\n\t\t\t\t\tclsname = cls.__name__\n\t\t\t\t\tsql = 'select %s_id from %s where %s_id = \n?'%(clsname,relname,self.__class__.__name__)\n\t\t\t\t\tcursor=self._connect().cursor()\n\t\t\t\t\tcursor.execute(sql,(self.id,))\n\t\t\t\t\treturn [cls(id=r[clsname+'_id']) for r in cursor]\n\n```", "```py\nselect B_id from AB where A_id = ?\n\n```", "```py\ninsert or replace into AB (A_id,B_id) values (?,?)\n\n```", "```py\nfrom random import randint\nimport os\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nclass Entity(AbstractEntity):\n\tdatabase='/tmp/browsetest.db'\nclass Number(Entity):\n\tn = Attribute(displayname=\"Size\")\nn=len(Number.listids())\nif n<100:\n\tfor i in range(100-n):\n\t\tNumber(n=randint(0,1000000))\nroot = Browse(Number, columns=['id','n'],\n\tsortorder=[('n','asc'),('id','desc')])\ncherrypy.quickstart(root,config={\n\t'/':\n\t{ 'log.access_file' :\n\t\t\tos.path.join(current_dir,\"access.log\"),\n\t'log.screen': False,\n\t'tools.sessions.on': True\n\t}\n})\n\n```", "```py\nclass Browse:\n\tdef __init__(self,entity,columns=None,\n\t\tsortorder=None,pattern=None,page=10,show=\"show\"): if not issubclass(entity,AbstractEntity) :\n\t\t\t\traise TypeError()\n\t\tself.entity = entity\n\t\tself.columns = entity.columns if columns is None else \ncolumns\n\t\tself.sortorder = [] if sortorder is None else sortorder\n\t\tself.pattern = [] if pattern is None else pattern\n\t\tself.page = page\n\t\tself.show = show\n\t\tself.cache= {}\n\t\tself.cachelock=threading.Lock()\n\t\tself.cachesize=3\n\t\tfor c in self.columns:\n\t\t\tif not (c in entity.columns or c == 'id') and not (\n\t\t\t\t\t\thasattr(self.entity,'get'+c.__name__)) :\n\t\t\t\t\traise ValueError('column %s not defined'%c)\n\t\tif len(self.sortorder) > len(self.columns) :\n\t\t\traise ValueError()\n\t\tfor s in self.sortorder:\n\t\t\tif s[0] not in self.columns and s[0]!='id':\n\t\t\t\t\traise ValueError(\n\t\t\t\t\t\t'sorting on column %s not \npossible'%s[0])\n\t\t\tif s[1] not in ('asc','desc'):\n\t\t\t\t\traise ValueError(\n\t\t\t\t\t\t'column %s, %s is not a valid sort \norder'%s)\n\t\tfor s in self.pattern:\n\t\t\tif s[0] not in self.columns and s[0]!='id':\n\t\t\t\t\traise ValueError(\n\t\t\t\t\t\t'filtering on column %s not \npossible'%s[0])\n\t\tif self.page < 5 :\n\t\t\t\t\traise ValueError()\n\n```", "```py\n@cherrypy.expose\ndef index(self, _=None, start=0,\n\tpattern=None, sortorder=None, cacheid=None,\n\tnext=None,previous=None, first=None, last=None,\n\tclear=None):\n\tif not clear is None :\n\t\tpattern=None\n\tif sortorder is None :\n\t\tsortorder = self.sortorder\n\telif type(sortorder)==str:\n\t\tsortorder=[tuple(sortorder.split(','))]\n\telif type(sortorder)==list:\n\t\tsortorder=[tuple(s.split(',')) for s in sortorder]\n\telse:\n\t\tsortorder=None\n\tif pattern is None :\n\t\tpattern = self.pattern\n\telif type(pattern)==str:\n\t\tpattern=[tuple(pattern.split(','))]\n\telif type(pattern)==list:\n\t\tpattern=[tuple(s.split(',',1)) for s in pattern]\n\telse:\n\t\tpattern=None\n\tids = self.entity.listids(\n\t\tpattern=pattern,sortorder=sortorder)\n\tstart=int(start) if not next is None :\n\t\tstart+=self.page\n\telif not previous is None :\n\t\tstart-=self.page\n\telif not first is None :\n\t\tstart=0\n\telif not last is None :\n\t\tstart=len(ids)-self.page\n\tif start >= len(ids) :\n\t\tstart=len(ids)-1\n\tif start<0 :\n\t\tstart=0\n\tyield '<table class=\"entitylist\" start=\"%d\" page=\"%d\">\\\nn'%(start,self.page)\n\tyield '<thead><tr>'\n\tfor col in self.columns:\n\t\tif type(col) == str :\n\t\t\tsortclass=\"notsorted\"\n\t\t\tfor s in sortorder:\n\t\t\t\tif s[0]==col :\n\t\t\t\t\tsortclass='sorted-'+s[1]\n\t\t\t\t\tbreak\n\t\t\tyield '<th class=\"%s\">'%sortclass+self.entity.\ndisplaynames[col]+'</th>'\n\t\t\telse :\n\t\t\t\tyield '<th>'+col.__name__+'</th>'\n\t\t\tyield '</tr></thead>\\n<tbody>\\n' entities = [self.entity(id=i)\n\t\t\t\t\tfor i in ids[start:start+self.page]]\n\t\t\tfor e in entities:\n\t\t\t\tvals=[]\n\t\t\t\tfor col in self.columns:\n\t\t\t\t\tif not type(col) == str:\n\t\t\t\t\t\tvals.append(\n\t\t\t\t\t\t\t\"\".join(\n\t\t\t\t\t\t\t['<span class=\"related\" entity=\"%s\" >%s</span> ' % (r.__\nclass__.__name__, r.primary) for r in e.get(col)]))\n\t\t\t\t\telse:\n\t\t\t\t\t\tvals.append(str(getattr(e,col)))\n\t\t\t\tyield ('<tr id=\"%d\"><td>'\n\t\t\t\t\t+ '</td><td>'.join(vals)+'</td></tr>\\n')%(e.id,)\n\t\t\tyield '</tbody>\\n</table>\\n'\n\t\t\tyield '<form method=\"GET\" action=\".\">'\n\t\t\tyield '<div class=\"buttonbar\">'\n\t\t\tyield '<input name=\"start\" type=\"hidden\" value=\"%d\">\\n'%start\n\t\t\tfor s in sortorder:\n\t\t\t\tyield '<input name=\"sortorder\" type=\"hidden\" value=\"%s,%s\">\\n'%s\n\t\t\tfor f in pattern:\n\t\t\t\tyield '<input name=\"pattern\" type=\"hidden\" value=\"%s,%s\">\\n'%f\n\t\t\tyield '<input name=\"cacheid\" type=\"hidden\" value=\"%s\">'%cacheid\n\t\t\tyield '<p class=\"info\">items %d-%d/%d</p>'%(start+1,start+len \n(entities),len(ids))\n\t\t\tyield '<button name=\"first\" type=\"submit\">First</button>\\n'\n\t\t\tyield '<button name=\"previous\" type=\"submit\">Previous</button>\\n'\n\t\t\tyield '<button name=\"next\" type=\"submit\">Next</button>\\n'\n\t\t\tyield '<button name=\"last\" type=\"submit\">Last</button>\\n'\n\t\t\tyield '<button name=\"clear\" type=\"submit\">Clear</button>\\n'\n\t\t\tyield '</div>'\n\t\t\tyield '</form>'\n\t\t\t# no name attr on the following button otherwise it may be sent as \nan argument!\n\t\t\tyield '<form method=\"GET\" action=\"add\"><button type=\"submit\">Add \nnew</button></form>'\n\n```", "```py\n<table class=\"entitylist\" start=\"0\" page=\"10\">\n\t<thead>\n\t\t<tr>\n\t\t\t\t<th class=\"sorted-desc\">id</th>\n\t\t\t\t<th class=\"sorted-asc\">Size</th>\n\t\t</tr>\n\t</thead>\n\t<tbody>\n\t\t<tr id=\"86\"><td>86</td><td>7702</td></tr>\n\t\t<tr id=\"14\"><td>14</td><td>12331</td></tr>\n\t\t<tr id=\"72\"><td>72</td><td>17013</td></tr>\n\t\t<tr id=\"7\"><td>7</td><td>26236</td></tr>\n\t\t<tr id=\"12\"><td>12</td><td>48481</td></tr>\n\t\t<tr id=\"10\"><td>10</td><td>63060</td></tr>\n\t\t<tr id=\"15\"><td>15</td><td>64824</td></tr>\n\t\t<tr id=\"85\"><td>85</td><td>69352</td></tr>\n\t\t<tr id=\"8\"><td>8</td><td>84442</td></tr>\n\t\t<tr id=\"53\"><td>53</td><td>94749</td></tr>\n\t</tbody>\n</table>\n<form method=\"GET\" action=\".\">\n\t<div class=\"buttonbar\">\n\t\t<input name=\"start\" type=\"hidden\" value=\"0\">\n\t\t<input name=\"sortorder\" type=\"hidden\" value=\"n,asc\">\n\t\t<input name=\"sortorder\" type=\"hidden\" value=\"id,desc\">\n\t\t<input name=\"cacheid\" type=\"hidden\"\n\t\t\t\tvalue=\"57ec8e0a53e34d428b67dbe0c7df6909\">\n\t\t<p class=\"info\">items 1-10/100</p>\n\t\t<button name=\"first\" type=\"submit\">First</button>\n\t\t<button name=\"previous\" type=\"submit\">Previous</button>\n\t\t<button name=\"next\" type=\"submit\">Next</button>\n\t\t<button name=\"last\" type=\"submit\">Last</button>\n\t\t<button name=\"clear\" type=\"submit\">Clear</button>\n\t</div>\n</form>\n<form method=\"GET\" action=\"add\">\n\t<button type=\"submit\">Add new</button>\n</form>\n\n```", "```py\n\t\t\tif not (next is None and previous is None\n\t\t\t\t\t\t\t\tand first is None and last is None):\n\t\t\t\t\tcacheid=self.iscached(cacheid,sortorder,pattern)\n\t\t\telse:\n\t\t\t\t\tcacheid=None\n\t\t\tif cacheid is None:\n\t\t\t\t\tids = self.entity.listids(\n\t\t\t\t\t\t\tpattern=pattern,sortorder=sortorder)\n\t\t\t\t\tcacheid = self.storeincache(ids,sortorder,pattern)\n\t\t\telse:\n\t\t\t\t\tids = self.getfromcache(cacheid,sortorder,pattern)\n\t\t\t\t\tif ids == None:\n\t\t\t\t\t\t\tids = self.entity.listids(\n\t\t\t\t\t\t\t\t\tpattern=pattern,sortorder=sortorder)\n\t\t\t\t\t\t\tcacheid = self.storeincache(ids,sortorder, \npattern)\n\n```", "```py\n\t\t\tdef chash(self,cacheid,sortorder,pattern):\n\t\t\t\t\treturn cacheid + '-' + hex(hash(str(sortorder))) + '-' + \nhex(hash(str(pattern)))\n\t\t\tdef iscached(self,cacheid,sortorder,pattern):\n\t\t\t\t\th=self.chash(cacheid,sortorder,pattern)\n\t\t\t\t\tt=False\n\t\t\t\t\twith self.cachelock:\n\t\t\t\t\t\t\tt = h in self.cache\n\t\t\t\t\t\t\tif t :\n\t\t\t\t\t\t\t\t\tself.cache[h]=(time(),self.cache[h][1])\n\t\t\t\t\treturn cacheid if t else None\n\t\t\tdef cleancache(self):\n\t\t\t\t\tt={}\n\t\t\t\t\twith self.cachelock:\n\t\t\t\t\t\t\tt={v[0]:k for k,v in self.cache.items()}\n\t\t\t\t\tif len(t) == 0 :\n\t\t\t\t\t\t\treturn\n\t\t\t\t\tlimit = time()\n\t\t\t\t\toldest = limit\n\t\t\t\t\tlimit -= 3600\n\t\t\t\t\tkey=None\n\t\t\t\t\tfor tt,k in t.items():\n\t\t\t\t\t\t\tif tt<limit:\n\t\t\t\t\t\t\t\t\twith self.cachelock:\n\t\t\t\t\t\t\t\t\t\t\tdel self.cache[k]\n\t\t\t\t\t\t\telse:\n\t\t\t\t\t\t\t\tif tt<oldest:\n\t\t\t\t\t\t\t\t\t\toldest = tt\n\t\t\t\t\t\t\t\t\t\tkey = k\n\t\t\t\t\tif key:\n\t\t\t\t\t\t\twith self.cachelock:\n\t\t\t\t\t\t\t\tdel self.cache[key]\n\t\t\tdef storeincache(self,ids,sortorder,pattern):\n\t\t\t\t\tcacheid=uuid().hex\n\t\t\t\t\th=self.chash(cacheid,sortorder,pattern)\n\t\t\t\t\tif len(self.cache)>self.cachesize :\n\t\t\t\t\t\t\tself.cleancache()\n\t\t\t\t\twith self.cachelock:\n\t\t\t\t\t\t\tself.cache[h]=(time(),ids)\n\t\t\t\t\treturn cacheid\n\t\t\tdef getfromcache(self,cacheid,sortorder,pattern):\n\t\t\t\t\tids=None\n\t\t\t\t\th=self.chash(cacheid,sortorder,pattern)\n\t\t\t\t\twith self.cachelock:\n\t\t\t\t\t\t\ttry:\n\t\t\t\t\t\t\t\t\tids=self.cache[h][1]\n\t\t\t\t\t\t\texcept KeyError:\n\t\t\t\t\t\t\t\t\tpass\n\t\t\t\t\treturn ids\n\n```", "```py\nimport os\nimport cherrypy\nfrom entity import AbstractEntity, Attribute\nfrom relation import AbstractRelation\nfrom browse import Browse\nfrom display import Display\nfrom editor import Editor\nfrom logondb import LogonDB\ndb=\"/tmp/book2.db\"\nclass Entity(AbstractEntity):\n\tdatabase = db\nclass Relation(AbstractRelation):\n\tdatabase = db\nclass User(Entity):\n\tname = Attribute(notnull=True, unique=True,\n\t\t\tdisplayname=\"Name\")\nclass Book(Entity):\n\ttitle = Attribute(notnull=True, displayname=\"Title\")\n\tisbn = Attribute(displayname=\"Isbn\")\n\tpublished = Attribute(displayname=\"Published\")\nclass Author(Entity):\n\tname = Attribute(notnull=True, unique=True,\n\t\t\tdisplayname=\"Name\", primary=True)\nclass OwnerShip(Relation):\n\ta = User\n\tb = Book\nclass Writer(Relation):\n\ta = Book\n\tb = Author logon = LogonDB()\nclass AuthorBrowser(Browse):\n\tdisplay = Display(Author)\n\tedit = Display(Author, edit=True, logon=logon)\n\tadd = Display(Author, add=True, logon=logon)\nclass BookBrowser(Browse):\n\tdisplay = Display(Book)\n\tedit = Display(Book, edit=True, logon=logon,\n\t\t\tcolumns=Book.columns+[Author])\n\tadd = Display(Book, add=True, logon=logon,\n\t\t\tcolumns=Book.columns+[Author])\nwith open('basepage.html') as f:\n\tbasepage=f.read(-1)\nbooks applicationbooks applicationcreatingclass Root():\n\tlogon = logon\n\tbooks = BookBrowser(Book,\n\t\t\tcolumns=['title','isbn','published',Author])\n\tauthors = AuthorBrowser(Author)\n\t@cherrypy.expose\n\tdef index(self):\n\t\t\treturn Root.logon.index(returnpage='../entities')\n\t@cherrypy.expose\n\tdef entities(self): username = self.logon.checkauth()\n\t\tif username is None :\n\t\t\traise HTTPRedirect('.')\n\t\tuser=User.list(pattern=[('name',username)])\n\t\tif len(user) < 1 :\n\t\t\tUser(name=username)\n\t\treturn basepage%'''<div class=\"navigation\">\n\t\t<a href=\"books\">Books</a>\n\t\t<a href=\"authors\">Authors</a>\n\t\t</div><div class=\"content\">\n\t\t</div>\n\t\t<script>\n\t\t\t\t... Javascript omitted ...\n\t\t</script>\n\t\t'''\ncherrypy.engine.subscribe('start_thread',\n\tlambda thread_index: Root.logon.connect())\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.quickstart(Root(),config={\n\t\t'/':\n\t\t{ 'log.access_file' :\n\t\t\t\tos.path.join(current_dir,\"access.log\"),\n\t\t'log.screen': False,\n\t\t'tools.sessions.on': True\n\t\t}\n\t})\n\n```", "```py\n\t$.ajaxSetup({cache:false,type:\"GET\"}); $(\".navigation a\").click(function (){\n\t\tvar rel = $(this).attr('href');\n\t\tfunction shiftforms(){\n\t\t\t$(\".content form\").each(function(i,e){\n\t\t\t$(e).attr('action',\n\t\t\t\trel+'/'+$(e).attr('action'));\n\t\t\t\t$('[type=submit]',e).bind('click',\n\t\t\t\t\tfunction(event){\n\t\t\t\t\tvar f = $(this).parents('form');\n\t\t\t\t\tvar n = $(this).attr('name');\n\t\t\t\t\tif (n != ''){\n\t\t\t\t\t\tn = '&'+n+'='+$(this).attr('value');}\n\t\t\t\t\t$(\".content\").load(f.attr('action'),\n\t\t\t\t\t\tf.serialize()+n,shiftforms);\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t});\n\t\t};\n\t\t// change action attributes of form elements\n\t\t$(\".content\").load($(this).attr('href'),shiftforms);\n\t\treturn false;\n\t});\n\n```"]