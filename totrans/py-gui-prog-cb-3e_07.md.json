["```py\nimport mysql \nconn = mysql.connector.connect(user=<adminUser>, password=<adminPwd>, host='127.0.0.1') \nprint(conn) \nconn.close()\n```", "```py\n# create dictionary to hold connection info \ndbConfig = { \n    'user': <adminName>,      # use your admin name\n    'password': <adminPwd>,   # use your real password \n    'host': '127.0.0.1',      # IP address of localhost \n}\n```", "```py\nimport mysql.connector \n# unpack dictionary credentials\nconn = mysql.connector.connect(**dbConfig) \nprint(conn)\n```", "```py\n# create dictionary to hold connection info\ndbConfig = {\n            'user': <adminUser>,       # your user name\n            'password': <adminPwd>,    # your password\n            'host': '127.0.0.1',       # IP address\n }\n```", "```py\nimport GuiDBConfig as guiConf \n# unpack dictionary credentials\nconn = mysql.connector.connect(**guiConf.dbConfig) \nprint(conn)\n```", "```py\nimport mysql.connector \nimport Ch07_Code.GuiDBConfig as guiConf \n\nGUIDB = 'GuiDB' \n\n# unpack dictionary credentials\nconn = mysql.connector.connect(**guiConf.dbConfig) \n\ncursor = conn.cursor() \n\ntry: \n    cursor.execute(\"CREATE DATABASE {} \n                    DEFAULT CHARACTER SET 'utf8'\".format(GUIDB)) \nexcept mysql.connector.Error as err: \n    print(\"Failed to create DB: {}\".format(err)) \n\nconn.close()\n```", "```py\nimport mysql.connector \nimport GuiDBConfig as guiConf \n\n# unpack dictionary credentials\nconn = mysql.connector.connect(**guiConf.dbConfig) \n\ncursor = conn.cursor() \n\ncursor.execute(\"SHOW DATABASES\") \nprint(cursor.fetchall()) \n\nconn.close()\n```", "```py\nmysql.connector.connect('user': <adminName>, 'password': <adminPwd>, 'host': '127.0.0.1')\n```", "```py\n# unpack dictionary credentials\nconn = mysql.connect(**guiConf.dbConfig) \n# create cursor\ncursor = conn.cursor() \n# execute command \ncursor.execute(\"SHOW TABLES FROM guidb\") \nprint(cursor.fetchall()) \n\n# close connection to MySQL \nconn.close()\n```", "```py\n# connect by unpacking dictionary credentials \nconn = mysql.connect(**guiConf.dbConfig) \n\n# create cursor\ncursor = conn.cursor() \n\n# select DB \ncursor.execute(\"USE guidb\") \n\n# create Table inside DB \ncursor.execute(\"CREATE TABLE Books (\n      Book_ID INT NOT NULL AUTO_INCREMENT,\n      Book_Title VARCHAR(25) NOT NULL,\n      Book_Page INT NOT NULL,\n      PRIMARY KEY (Book_ID)\n    ) ENGINE=InnoDB\") \n\n# close connection to MySQL \nconn.close()\n```", "```py\n# select DB \ncursor.execute(\"USE guidb\") \n\n# create second Table inside DB \ncursor.execute(\"CREATE TABLE Quotations (\n        Quote_ID INT,\n        Quotation VARCHAR(250),\n        Books_Book_ID INT,\n        FOREIGN KEY (Books_Book_ID)\n        REFERENCES Books(Book_ID)\n        ON DELETE CASCADE\n    ) ENGINE=InnoDB\")\n```", "```py\n13.7.6.37 SHOW TABLES Syntax\nSHOW [FULL] TABLES [{FROM | IN} db_name] \n [LIKE 'pattern' | WHERE expr]\n```", "```py\nC:\\Program Files\\MySQL\\MySQL Server 8.0\\bin\\mysql.exe\n```", "```py\ncursor.execute(\"SHOW COLUMNS FROM quotations\")\n```", "```py\nimport mysql.connector\nimport Ch07_Code.GuiDBConfig as guiConf\n\nclass MySQL(): \n    # class variable \n    GUIDB  = 'GuiDB'\n    #------------------------------------------------------ \n    def connect(self): \n        # connect by unpacking dictionary credentials \n        # create cursor\n    #------------------------------------------------------ \n    def close(self, cursor, conn): \n        # close cursor \n    #------------------------------------------------------ \n    def showDBs(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def createGuiDB(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def dropGuiDB(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def useGuiDB(self, cursor): \n        '''Expects open connection.''' \n        # select DB \n    #------------------------------------------------------ \n    def createTables(self): \n        # connect to MySQL \n        # create Table inside DB \n    #------------------------------------------------------ \n    def dropTables(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def showTables(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def insertBooks(self, title, page, bookQuote): \n        # connect to MySQL \n        # insert data \n    #------------------------------------------------------ \n    def insertBooksExample(self): \n        # connect to MySQL \n        # insert hard-coded data \n    #------------------------------------------------------ \n    def showBooks(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def showColumns(self): \n        # connect to MySQL \n    #------------------------------------------------------ \n    def showData(self): \n        # connect to MySQL\n#------------------------------------------------------ \nif __name__ == '__main__':\n    # Create class instance \n    mySQL = MySQL()\n```", "```py\nimport mysql.connector \nimport Ch07_Code.GuiDBConfig as guiConf \n\nclass MySQL(): \n    # class variable \n    GUIDB  = 'GuiDB' \n    #------------------------------------------------------ \n    def showData(self): \n        # connect to MySQL \n        conn, cursor = self.connect()\n\n        self.useGuiDB(cursor)\n\n        # execute command \n        cursor.execute(\"SELECT * FROM books\") \n        print(cursor.fetchall()) \n\n        cursor.execute(\"SELECT * FROM quotations\") \n        print(cursor.fetchall()) \n\n        # close cursor and connection \n        self.close(cursor, conn) \n#========================================================== \nif __name__ == '__main__':\n    # Create class instance \n    mySQL = MySQL() \n    mySQL.showData()\n```", "```py\n#------------------------------------------------------ \ndef updateGOF(self): \n    # connect to MySQL \n    conn, cursor = self.connect()    \n    self.useGuiDB(cursor)       \n    # execute command \n    cursor.execute(\"SELECT Book_ID FROM books WHERE Book_Title = \n    'Design Patterns'\") \n    primKey = cursor.fetchall()[0][0] \n    print(\"Primary key=\" + str(primKey)) \n    cursor.execute(\"SELECT * FROM quotations WHERE Books_Book_ID = \n    (%s)\", (primKey,)) \n    print(cursor.fetchall()) \n    # close cursor and connection \n        self.close(cursor, conn)  \n#========================================================== \nif __name__ == '__main__':  \n    mySQL = MySQL()          # Create class instance \n    mySQL.updateGOF()\n```", "```py\n#------------------------------------------------------ \ndef showDataWithReturn(self): \n    # connect to MySQL \n    conn, cursor = self.connect()    \n\n    self.useGuiDB(cursor)       \n\n    # execute command \n    cursor.execute(\"SELECT Book_ID FROM books WHERE Book_Title = \n    'Design Patterns'\") \n    primKey = cursor.fetchall()[0][0] \n    print(primKey) \n\n    cursor.execute(\"SELECT * FROM quotations WHERE Books_Book_ID = \n    (%s)\", (primKey,)) \n    print(cursor.fetchall()) \n\n    cursor.execute(\"UPDATE quotations SET Quotation = \n    (%s) WHERE Books_Book_ID = (%s)\",  \n    (\"Pythonic Duck Typing: If it walks like a duck and \n    talks like a duck it probably is a duck...\", \n    primKey)) \n\n    # commit transaction \n    conn.commit () \n\n    cursor.execute(\"SELECT * FROM quotations WHERE Books_Book_ID = \n    (%s)\", (primKey,)) \n    print(cursor.fetchall()) \n\n    # close cursor and connection \n    self.close(cursor, conn) \n\n#========================================================== \nif __name__ == '__main__':  \n    # Create class instance \n    mySQL = MySQL() \n    #------------------------ \n    mySQL.updateGOF() \n    book, quote = mySQL.showDataWithReturn()     \n    print(book, quote)\n```", "```py\n# create second Table inside DB --  \n# No FOREIGN KEY relation to Books Table \ncursor.execute(\"CREATE TABLE Quotations (  \n    Quote_ID INT AUTO_INCREMENT,       \n    Quotation VARCHAR(250),            \n    Books_Book_ID INT,                 \n    PRIMARY KEY (Quote_ID)             \n) ENGINE=InnoDB\")\n```", "```py\ncursor.execute(\"DELETE FROM books WHERE Book_ID = 1\")\n```", "```py\n# create second Table inside DB \ncursor.execute(\"CREATE TABLE Quotations (  \n    Quote_ID INT AUTO_INCREMENT,       \n    Quotation VARCHAR(250),            \n    Books_Book_ID INT,                 \n    PRIMARY KEY (Quote_ID),            \n    FOREIGN KEY (Books_Book_ID)        \n    REFERENCES Books(Book_ID)      \n    ON DELETE CASCADE              \n) ENGINE=InnoDB\")\n\n#========================================================== \nif __name__ == '__main__':  \n    # Create class instance \n    mySQL = MySQL() \n    mySQL.showData()\n```", "```py\nimport mysql.connector\nimport Ch07_Code.GuiDBConfig as guiConf \n\nclass MySQL(): \n    #------------------------------------------------------ \n    def deleteRecord(self): \n        # connect to MySQL \n        conn, cursor = self.connect()    \n\n        self.useGuiDB(cursor)       \n\n        # execute command \n        cursor.execute(\"SELECT Book_ID FROM books WHERE Book_Title = \n        'Design Patterns'\") \n        primKey = cursor.fetchall()[0][0] \n        # print(primKey) \n\n        cursor.execute(\"DELETE FROM books WHERE Book_ID = (%s)\",\n        (primKey,)) \n\n        # commit transaction \n        conn.commit () \n\n        # close cursor and connection \n        self.close(cursor, conn)     \n#========================================================== \nif __name__ == '__main__':  \n    # Create class instance \n    mySQL = MySQL() \n    #------------------------ \n    mySQL.deleteRecord() \n    mySQL.showData()\n```", "```py\n    # Adding a Button \n    self.action = ttk.Button(self.mySQL, text=\"Insert Quote\", \n    command=self.insertQuote)    \n    self.action.grid(column=2, row=1) \n\n# Button callback \ndef insertQuote(self): \n    title = self.bookTitle.get() \n    page = self.pageNumber.get() \n    quote = self.quote.get(1.0, tk.END) \n    print(title) \n    print(quote) \n    self.mySQL.insertBooks(title, page, quote)\n```", "```py\n# Adding a Button \n    self.action1 = ttk.Button(self.mySQL, text=\"Get Quotes\", \n    command=self.getQuote)    \n    self.action1.grid(column=2, row=2) \n\n# Button callback \ndef getQuote(self): \n    allBooks = self.mySQL.showBooks()   \n    print(allBooks) \n    self.quote.insert(tk.INSERT, allBooks)\n```", "```py\nfrom Ch07_Code.GUI_MySQL_class import MySQL\nclass OOP(): \n    def __init__(self): \n        # create MySQL instance \n        self.mySQL = MySQL() \n\nclass MySQL(): \n    #------------------------------------------------------ \n    def showBooks(self): \n        # connect to MySQL \n        conn, cursor = self.connect()     \n\n        self.useGuiDB(cursor)     \n\n        # print results \n        cursor.execute(\"SELECT * FROM Books\") \n        allBooks = cursor.fetchall() \n        print(allBooks) \n\n        # close cursor and connection \n        self.close(cursor, conn)    \n\n        return allBooks\n```"]