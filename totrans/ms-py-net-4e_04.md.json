["```py\n(venv) $ pip install ansible \n```", "```py\n(venv) $ ansible --version\nansible [core 2.13.3]\n  config file = None\n  configured module search path = ['/home/echou/.ansible/plugins/modules', '/usr/share/ansible/plugins/modules']\n  ansible python module location = /home/echou/Mastering_Python_Networking_Fourth_Edition/venv/lib/python3.10/site-packages/ansible\n  ansible collection location = /home/echou/.ansible/collections:/usr/share/ansible/collections\n  executable location = /home/echou/Mastering_Python_Networking_Fourth_Edition/venv/bin/ansible\n  python version = 3.10.4 (main, Jun 29 2022, 12:14:53) [GCC 11.2.0]\n  jinja version = 3.1.2\n  libyaml = True \n```", "```py\n[ios_devices]\niosv-1\niosv-2 \n```", "```py\n$ tree host_vars/\nhost_vars/\n├── iosv-1\n└── iosv-2 \n```", "```py\n$ cat host_vars/iosv-1 \n---\nansible_host: 192.168.2.51\nansible_user: cisco\nansible_ssh_pass: cisco\nansible_connection: network_cli\nansible_network_os: ios\nansbile_become: yes\nansible_become_method: enable\nansible_become_pass: cisco \n```", "```py\n- name: Back Up IOS Device Configurations\n  hosts: all\n  gather_facts: false\n  tasks:\n    - name: backup\n      ios_config:\n        backup: yes \n```", "```py\n(venv) $ pip install ansible-pylibssh \n```", "```py\n[defaults]\nhost_key_checking = False \n[persistent_connection]\nssh_type = libssh \n```", "```py\n$ ansible-playbook -i hosts ios_config_backup.yml \nPLAY [Back Up IOS Device Configurations] **************************************************************************************\nTASK [backup] *****************************************************************************************************************\nchanged: [iosv-2]\nchanged: [iosv-1]\nPLAY RECAP ********************************************************************************************************************\niosv-1                     : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \niosv-2                     : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\n(venv) $ ansible-galaxy collection list\n# /home/echou/Mastering_Python_Networking_Fourth_Edition/venv/lib/python3.10/site-packages/ansible_collections\nCollection                    Version\n----------------------------- -------\n…\nansible.netcommon             3.1.0  \narista.eos                    5.0.1  \ncisco.aci                     2.2.0  \ncisco.asa                     3.1.0  \ncisco.dnac                    6.5.3  \ncisco.intersight              1.0.19 \ncisco.ios                     3.3.0  \ncisco.iosxr                   3.3.0  \ncisco.ise                     2.5.0  \ncisco.meraki                  2.10.1 \ncisco.mso                     2.0.0  \ncisco.nso                     1.0.3  \ncisco.nxos                    3.1.0  \ncisco.ucs                     1.8.0  \ncommunity.ciscosmb            1.0.5  \ncommunity.fortios             1.0.0  \ncommunity.network             4.0.1  \ndellemc.enterprise_sonic      1.1.1  \nf5networks.f5_modules         1.19.0 \nfortinet.fortimanager         2.1.5  \nfortinet.fortios              2.1.7  \nmellanox.onyx                 1.0.0   \nopenstack.cloud               1.8.0  \nopenvswitch.openvswitch       2.1.0  \nvyos.vyos                     3.0.1 \n```", "```py\n[lax_cor_devices]\nlax-cor-r1\n[lax_edg_devices]\nlax-edg-r1\nlax-edg-r2\n[nyc_cor_devices]\nnyc-cor-r1\n[nyc_edg_devices]\nnyc-edg-r1\nnyc-edg-r2\n[lax_dc:children]\nlax_cor_devices\nlax_edg_devices\n[nyc_dc:children]\nnyc_cor_devices\nnyc_edg_devices\n[ios_devices:children]\nlax_edg_devices\nnyc_edg_devices\n[nxos_devices:children]\nnyc_cor_devices\nlax_cor_devices \n```", "```py\n(venv) $ tree host_vars/\nhost_vars/\n…\n├── lax-cor-r1\n├── lax-edg-r1\n├── lax-edg-r2\n├── nyc-cor-r1\n├── nyc-edg-r1\n└── nyc-edg-r2 \n```", "```py\n(venv) $ cat host_vars/lax-cor-r1 \n---\nansible_host: 192.168.2.50\n…\nansible_network_os: nxos\n… \n```", "```py\n- name: Back Up NX-OS Device Configurations\n  hosts: nxos_devices\n  gather_facts: false\n  tasks:\n    - name: backup\n      nxos_config:\n        backup: yes \n```", "```py\n---\n- name: IOS command output for when clause\n  hosts: ios_devices\n  gather_facts: false\n  tasks:\n    - name: show hostname\n      ios_command:\n        commands:\n            - show run | i hostname\n      register: output\n    - name: show output with when conditions\n      when: output.stdout == [\"hostname nyc-edg-r2\"]\n      debug: \n        msg: '{{ output }}' \n```", "```py\n(venv) $ ansible-playbook -i hosts_full ios_conditional.yml \nPLAY [IOS command output for when clause] *************************************************************************************\nTASK [show hostname] **********************************************************************************************************\nok: [lax-edg-r1]\nok: [nyc-edg-r2]\nok: [lax-edg-r2]\nok: [nyc-edg-r1]\nTASK [show output with when conditions] ***************************************************************************************\nskipping: [lax-edg-r1]\nskipping: [lax-edg-r2]\nskipping: [nyc-edg-r1]\nok: [nyc-edg-r2] => {\n    \"msg\": {\n        \"changed\": false,\n        \"failed\": false,\n        \"stdout\": [\n            \"hostname nyc-edg-r2\"\n        ],\n        \"stdout_lines\": [\n            [\n                \"hostname nyc-edg-r2\"\n            ]\n        ]\n    }\n}\nPLAY RECAP ********************************************************************************************************************\nlax-edg-r1                 : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   \nlax-edg-r2                 : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   \nnyc-edg-r1                 : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   \nnyc-edg-r2                 : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\n---\n- name: IOS command output for when clause\n  hosts: ios_devices\n  gather_facts: false\n  tasks:\n    - name: show hostname\n      ios_command:\n        commands:\n            - show run | i hostname\n      register: output\n    - name: show output with when conditions\n      when: output.stdout == [\"hostname nyc-edg-r2\"]\n      ios_config: \n        lines: \n            - logging buffered 30000 \n```", "```py\n(venv) $ ansible-playbook -i hosts_full ios_conditional_config.yml \n<skip>\nTASK [show output with when conditions] ***************************************************************************************\nskipping: [lax-edg-r1]\nskipping: [lax-edg-r2]\nskipping: [nyc-edg-r1]\n[WARNING]: To ensure idempotency and correct diff the input configuration lines should be similar to how they appear if\npresent in the running configuration on device\nchanged: [nyc-edg-r2]\nPLAY RECAP ********************************************************************************************************************\nlax-edg-r1                 : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   \nlax-edg-r2                 : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   \nnyc-edg-r1                 : ok=1    changed=0    unreachable=0    failed=0    skipped=1    rescued=0    ignored=0   \nnyc-edg-r2                 : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\n*Sep 10 01:53:43.132: %SYS-5-LOG_CONFIG_CHANGE: Buffer logging: level debugging, xml disabled, filtering disabled, size (30000) \n```", "```py\n<skip>\nTASK [show output with when conditions] ***************************************************************************************\nskipping: [lax-edg-r1]\nskipping: [lax-edg-r2]\nskipping: [nyc-edg-r1]\nok: [nyc-edg-r2] \n```", "```py\n---\n- name: IOS network facts\n  connection: network_cli\n  gather_facts: false\n  hosts: ios_devices\n  tasks:\n    - name: Gathering facts via ios_facts module\n      ios_facts:\n      when: ansible_network_os == 'ios'\n\n    - name: Display certain facts\n      debug: \n        msg: \"The hostname is {{ ansible_net_hostname }} running {{ ansible_net_version }}\"\n\n    - name: Display all facts for hosts\n      debug:\n        var: hostvars \n```", "```py\n(venv) $ ansible-playbook -i hosts_full ios_facts_playbook.yml\n…\nTASK [Display certain facts] ***************************************************\nok: [lax-edg-r1] => {\n    \"msg\": \"The hostname is lax-edg-r1 running 15.8(3)M2\"\n}\nok: [lax-edg-r2] => {\n    \"msg\": \"The hostname is lax-edg-r2 running 15.8(3)M2\"\n}\nok: [nyc-edg-r1] => {\n    \"msg\": \"The hostname is nyc-edg-r1 running 15.8(3)M2\"\n}\nok: [nyc-edg-r2] => {\n    \"msg\": \"The hostname is nyc-edg-r2 running 15.8(3)M2\"\n}\n…\nTASK [Display all facts for hosts] *********************************************\nok: [lax-edg-r1] => {\n    \"hostvars\": {\n        \"lax-cor-r1\": {\n…\n            \"ansible_facts\": {\n                \"net_api\": \"cliconf\",\n                \"net_gather_network_resources\": [],\n                \"net_gather_subset\": [\n                    \"default\"\n                ],\n                \"net_hostname\": \"lax-edg-r1\",\n                \"net_image\": \"flash0:/vios-adventerprisek9-m\",\n                \"net_iostype\": \"IOS\",\n                \"net_model\": \"IOSv\",\n                \"net_python_version\": \"3.10.4\",\n                \"net_serialnum\": \"98U40DKV403INHIULHYHB\",\n                \"net_system\": \"ios\",\n                \"net_version\": \"15.8(3)M2\",\n                \"network_resources\": {}\n            },\n… \n```", "```py\n- name: Echo Loop Items\n  hosts: \"localhost\"\n  gather_facts: false\n  tasks:\n    - name: echo loop items\n      command: echo \"{{ item }}\"\n      loop:\n        - 'r1'\n        - 'r2'\n        - 'r3'\n        - 'r4'\n        - 'r5' \n```", "```py\n(venv) $ ansible-playbook -i hosts_full standard_loop.yml \nPLAY [Echo Loop Items] ********************************************************************************************************\nTASK [echo loop items] ********************************************************************************************************\nchanged: [localhost] => (item=r1)\nchanged: [localhost] => (item=r2)\nchanged: [localhost] => (item=r3)\nchanged: [localhost] => (item=r4)\nchanged: [localhost] => (item=r5)\nPLAY RECAP ********************************************************************************************************************\nlocalhost                  : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\n- name: Add Multiple Vlans\n  hosts: \"nyc-cor-r1\"\n  gather_facts: false\n  connection: network_cli\n  vars:\n    vlan_numbers: [100, 200, 300]\n  tasks:\n    - name: add vlans\n      nxos_config:\n        lines:\n            - vlan {{ item }}\n      loop: \"{{ vlan_numbers }}\"\n      register: output \n```", "```py\n(venv) $ ansible-playbook -i hosts_full standard_loop\n_vlan_example.yml \nPLAY [Add Multiple Vlans] *****************************************************************************************************\nTASK [add vlans] **************************************************************************************************************\nchanged: [nyc-cor-r1] => (item=100)\nchanged: [nyc-cor-r1] => (item=200)\nchanged: [nyc-cor-r1] => (item=300)\n[WARNING]: To ensure idempotency and correct diff the input configuration lines should be similar to how they appear if\npresent in the running configuration on device\nPLAY RECAP ********************************************************************************************************************\nnyc-cor-r1                 : ok=1    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\n… \n vars:\n    vlan_numbers: [100, 200, 300]\n  tasks:\n    …\n     loop: \"{{ vlan_numbers }}\" \n```", "```py\n---\n- name: Add Multiple Vlans\n  hosts: \"nyc-cor-r1\"\n  gather_facts: false\n  connection: network_cli\n  vars:\n    vlans: {\n        \"100\": {\"description\": \"floor_1\", \"ip\": \"192.168.10.1\"},\n        \"200\": {\"description\": \"floor_2\", \"ip\": \"192.168.20.1\"},\n        \"300\": {\"description\": \"floor_3\", \"ip\": \"192.168.30.1\"}\n      }\n  tasks:\n    - name: add vlans\n      nxos_config:\n        lines:\n            - vlan {{ item.key }}\n      with_dict: \"{{ vlans }}\"\n    - name: configure vlans\n      nxos_config:\n        lines: \n          - description {{ item.value.description }}\n          - ip address {{ item.value.ip }}/24\n        parents: interface vlan {{ item.key }}\n      with_dict: \"{{ vlans }}\" \n```", "```py\nnyc-cor-r1(config)# feature interface-vlan \n```", "```py\n(venv) $ ansible-playbook -i hosts_full standard_loop_vlan_example_2.yml \nPLAY [Add Multiple Vlans] ************************************************************************************************\nTASK [add vlans] *********************************************************************************************************\nchanged: [nyc-cor-r1] => (item={'key': '100', 'value': {'description': 'floor_1', 'ip': '192.168.10.1'}})\nchanged: [nyc-cor-r1] => (item={'key': '200', 'value': {'description': 'floor_2', 'ip': '192.168.20.1'}})\nchanged: [nyc-cor-r1] => (item={'key': '300', 'value': {'description': 'floor_3', 'ip': '192.168.30.1'}})\n[WARNING]: To ensure idempotency and correct diff the input configuration lines should be similar to how they appear if\npresent in the running configuration on device\nTASK [configure vlans] ***************************************************************************************************\nchanged: [nyc-cor-r1] => (item={'key': '100', 'value': {'description': 'floor_1', 'ip': '192.168.10.1'}})\nchanged: [nyc-cor-r1] => (item={'key': '200', 'value': {'description': 'floor_2', 'ip': '192.168.20.1'}})\nchanged: [nyc-cor-r1] => (item={'key': '300', 'value': {'description': 'floor_3', 'ip': '192.168.30.1'}})\nPLAY RECAP ***************************************************************************************************************\nnyc-cor-r1                 : ok=2    changed=2    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\nnyc-cor-r1# sh run\ninterface Vlan100\n  description floor_1\n  ip address 192.168.10.1/24\ninterface Vlan200\n  description floor_2\n  ip address 192.168.20.1/24\ninterface Vlan300\n  description floor_3\n  ip address 192.168.30.1/24 \n```", "```py\n(venv) $ mkdir Templates\n(venv) $ cd Templates/\n(venv) $ touch file1 \n```", "```py\n---\n- name: Template Basic\n  hosts: localhost\n  tasks:\n    - name: copy one file to another\n      template:\n        src=/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter04/Templates/file1\n        dest=/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter04/Templates/file2 \n```", "```py\n(venv) $ ansible-playbook -i hosts template_1.yml \nPLAY [Template Basic] ****************************************************************************************************\nTASK [Gathering Facts] ***************************************************************************************************\nok: [localhost]\nTASK [copy one file to another] ******************************************************************************************\nchanged: [localhost]\nPLAY RECAP ***************************************************************************************************************\nlocalhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \n(venv) $ ls file*\nfile1  file2 \n```", "```py\nhostname {{ item.value.hostname }}\nfeature telnet\nfeature ospf\nfeature bgp\nfeature interface-vlan\n{% if item.value.netflow_enable %}\nfeature netflow\n{% endif %}\nusername {{ item.value.username }} password {{ item.value.password }}  role network-operator\n{% for vlan_num in item.value.vlans %}\nvlan {{ vlan_num }}\n{% endfor %}\n{% if item.value.l3_vlan_interfaces %}\n{% for vlan_interface in item.value.vlan_interfaces %}\ninterface {{ vlan_interface.int_num }}\n  ip address {{ vlan_interface.ip }}/24\n{% endfor %}\n{% endif %} \n```", "```py\n---\n- name: Template Looping\n  hosts: localhost\n  vars:\n    nexus_devices: {\n        \"nx-osv-1\": {\n            \"hostname\": \"nx-osv-1\",\n            \"username\": \"cisco\",\n            \"password\": \"cisco\",\n            \"vlans\": [100, 200, 300],\n            \"l3_vlan_interfaces\": True,\n            \"vlan_interfaces\": [\n                {\"int_num\": \"100\", \"ip\": \"192.168.10.1\"},\n                {\"int_num\": \"200\", \"ip\": \"192.168.20.1\"},\n                {\"int_num\": \"300\", \"ip\": \"192.168.30.1\"}\n            ],\n            \"netflow_enable\": True\n        },\n        \"nx-osv-2\": {\n            \"hostname\": \"nx-osv-2\",\n            \"username\": \"cisco\",\n            \"password\": \"cisco\",\n            \"vlans\": [100, 200, 300],\n            \"l3_vlan_interfaces\": False,\n            \"netflow_enable\": False\n        }\n    }\n  tasks:\n    - name: create router configuration files\n      template:\n        src=/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter04/Templates/nxos.j2\n        dest=/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter04/Templates/{{ item.key }}.conf\n      with_dict: \"{{ nexus_devices }}\" \n```", "```py\n{% for vlan_num in item.value.vlans %}\nvlan {{ vlan_num }}\n{% endfor %}\n{% if item.value.l3_vlan_interfaces %}\n{% for vlan_interface in item.value.vlan_interfaces %}\ninterface {{ vlan_interface.int_num }}\n  ip address {{ vlan_interface.ip }}/24\n{% endfor %}\n{% endif %} \n```", "```py\n<skip>\n{% if item.value.netflow_enable %}\nfeature netflow\n{% endif %}\n<skip>\n{% if item.value.l3_vlan_interfaces %}\n<skip>\n{% endif %} \n```", "```py\n vars: \n    nexus_devices: {\n        \"nx-osv-1\": {\n            <skip>\n            \"netflow_enable\": True\n        },\n        \"nx-osv-2\": {\n            <skip>\n            \"netflow_enable\": False\n        }\n    } \n```", "```py\n(venv) $ ansible-playbook -i hosts template_2.yml \nPLAY [Template Looping] **************************************************************************************************\nTASK [Gathering Facts] ***************************************************************************************************\nok: [localhost]\nTASK [create router configuration files] *********************************************************************************\nchanged: [localhost] => (item={'key': 'nx-osv-1', 'value': {'hostname': 'nx-osv-1', 'username': 'cisco', 'password': 'cisco', 'vlans': [100, 200, 300], 'l3_vlan_interfaces': True, 'vlan_interfaces': [{'int_num': '100', 'ip': '192.168.10.1'}, {'int_num': '200', 'ip': '192.168.20.1'}, {'int_num': '300', 'ip': '192.168.30.1'}], 'netflow_enable': True}})\nchanged: [localhost] => (item={'key': 'nx-osv-2', 'value': {'hostname': 'nx-osv-2', 'username': 'cisco', 'password': 'cisco', 'vlans': [100, 200, 300], 'l3_vlan_interfaces': False, 'netflow_enable': False}})\nPLAY RECAP ***************************************************************************************************************\nlocalhost                  : ok=2    changed=1    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\n$ ls nx-os*\nnx-osv-1.conf\nnx-osv-2.conf \n```", "```py\n$ cat nx-osv-1.conf \nhostname nx-osv-1\nfeature telnet\nfeature ospf\nfeature bgp\nfeature interface-vlan\nfeature netflow\nusername cisco password cisco  role network-operator\nvlan 100\nvlan 200\nvlan 300\ninterface 100\n  ip address 192.168.10.1/24\ninterface 200\n  ip address 192.168.20.1/24\ninterface 300\n  ip address 192.168.30.1/24 \n```", "```py\n$ cat nx-osv-2.conf \nhostname nx-osv-2\nfeature telnet\nfeature ospf\nfeature bgp\nfeature interface-vlan\nusername cisco password cisco  role network-operator\nvlan 100\nvlan 200\nvlan 300 \n```"]