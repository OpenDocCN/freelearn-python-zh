["```py\n    public void SelectionSort(int[] values) \n    { \n        if (values.Length <= 1) \n        return; \n\n        int j, minIndex; \n        for (int i = 0; i < values.Length - 1; i++) \n        { \n            minIndex = i; \n            for (j = i + 1; j < values.Length; j++) \n            { \n                if (values[j] < values[minIndex]) \n                { \n                    minIndex = j; \n                } \n            } \n            Swap(ref values[minIndex], ref values[i]); \n        } \n    } \n\n    void Swap(ref int x, ref int y) \n    { \n        int t = x; \n        x = y; \n        y = t; \n    } \n\n```", "```py\n    public void selectionSort(int[] values) \n    { \n        if (values.length <= 1) \n            return; \n\n        int j, minIndex; \n        for (int i = 0; i < values.length - 1; i++) \n        { \n            minIndex = i; \n            for (j = i + 1; j < values.length; j++) \n            { \n                if (values[j] < values[minIndex]) \n                { \n                    minIndex = j; \n                } \n            } \n\n            int temp = values[minIndex]; \n            values[minIndex] = values[i]; \n            values[i] = temp; \n        } \n    } \n\n```", "```py\n    -(void)selectionSort:(NSMutableArray<NSNumber*>*)values \n    { \n        if ([values count] <= 1) \n            return; \n\n        NSInteger j, minIndex; \n        for (int i = 0; i < [values count] - 1; i++) \n        { \n            minIndex = i; \n            for (j = i + 1; j < [values count]; j++) \n            { \n                if ([values[j] intValue] < [values[minIndex] intValue]) \n                { \n                    minIndex = j; \n                } \n            } \n\n            NSNumber *temp = (NSNumber*)values[minIndex]; \n            values[minIndex] = values[i]; \n            values[i] = temp; \n        } \n    } \n\n```", "```py\n    open func selectionSort( values: inout [Int]) \n    { \n        if (values.count <= 1) \n        { \n            return \n        } \n\n        var minIndex: Int \n        for i in 0..<values.count \n        { \n            minIndex = i \n            for j in i+1..<values.count \n            { \n                if (values[j] < values[minIndex]) \n                { \n                    minIndex = j \n                } \n            } \n\n            swap(x: &values[minIndex], y: &values[i]) \n        } \n    } \n\n    open func swap( x: inout Int, y: inout Int) \n    { \n        let t: Int = x \n        x = y \n        y = t \n    } \n\n```", "```py\n    public void InsertionSort(int[] values) \n    { \n      if (values.Length <= 1) \n        return; \n\n      int j, value; \n      for (int i = 1; i < values.Length; i++) \n      { \n        value = values[i]; \n        j = i - 1; \n\n        while (j >= 0 && values[j] > value) \n        { \n          values[j + 1] = values[j]; \n          j = j - 1; \n        } \n        values[j + 1] = value; \n      }   \n    } \n\n```", "```py\n    public void insertionSort(int[] values) \n    { \n        if (values.length <= 1) \n            return; \n\n        int j, value; \n        for (int i = 1; i < values.length; i++) \n        { \n            value = values[i]; \n            j = i - 1; \n\n            while (j >= 0 && values[j] > value) \n            { \n                values[j + 1] = values[j]; \n                j = j - 1; \n            } \n            values[j + 1] = value; \n        }   \n    } \n\n```", "```py\n    -(void)insertionSort:(NSMutableArray<NSNumber*>*)values \n    { \n        if ([values count] <= 1) \n            return; \n\n        NSInteger j, value; \n        for (int i = 1; i < [values count]; i++) \n        { \n            value = [values[i] intValue]; \n            j = i - 1; \n\n            while (j >= 0 && [values[j] intValue] > value) \n            { \n                values[j + 1] = values[j]; \n                j = j - 1; \n            } \n            values[j + 1] = [NSNumber numberWithInteger:value]; \n        } \n    } \n\n```", "```py\n    open func insertionSort( values: inout [Int]) \n    { \n        if (values.count <= 1) \n        { \n            return \n        } \n\n        var j, value: Int \n        for i in 1..<values.count \n        { \n            value = values[i]; \n            j = i - 1; \n\n            while (j >= 0 && values[j] > value) \n            { \n                values[j + 1] = values[j]; \n                j = j - 1; \n            } \n            values[j + 1] = value; \n        } \n    } \n\n```", "```py\n    public void BubbleSort(int[] values) \n    { \n      bool swapped; \n      for (int i = 0; i < values.Length - 1; i++) \n      { \n        swapped = false; \n        for (int j = values.Length - 1; j > i; j--) \n        { \n          if (values[j] < values[j - 1]) \n          { \n            Swap(ref values[j], ref values[j - 1]); \n            swapped = true; \n          } \n        } \n\n        if (swapped == false) \n          break; \n      } \n    } \n\n```", "```py\n    public void bubbleSort(int[] values) \n    { \n        boolean swapped; \n        for (int i = 0; i < values.length - 1; i++) \n        { \n            swapped = false; \n            for (int j = values.length -1; j > i; j--) \n            { \n                if (values[j] < values[j - 1]) \n                { \n                    int temp = values[j]; \n                    values[j] = values[j - 1]; \n                    values[j - 1] = temp; \n                    swapped = true; \n                } \n            } \n\n            if (swapped == false) \n                break; \n        } \n    } \n\n```", "```py\n    -(void)bubbleSortArray:(NSMutableArray<NSNumber*>*)values \n    { \n        bool swapped; \n        for (NSInteger i = 0; i < [values count] - 1; i++) \n        { \n            swapped = false; \n            for (NSInteger j = [values count] - 1; j > i; j--) \n            { \n                if (values[j] < values[j - 1]) \n                { \n                    NSInteger temp = [values[j] intValue]; \n                    values[j] = values[j - 1]; \n                    values[j - 1] = [NSNumber numberWithInteger:temp]; \n                    swapped = true; \n                } \n            } \n\n            if (swapped == false) \n                break; \n        } \n    } \n\n```", "```py\n    open func bubbleSort( values: inout [Int]) \n    { \n        var swapped: Bool     \n        for i in 0..<values.count - 1 \n        { \n            swapped = false \n            for j in ((i + 1)..<values.count).reversed() \n            { \n                if (values[j] < values[j - 1]) \n                { \n                    swap(x: &values[j], y: &values[j - 1]) \n                    swapped = true \n                }  \n            } \n\n            if (swapped == false) \n            { \n                break \n            } \n        } \n    } \n\n```", "```py\n    public void QuickSort(int[] values, int low, int high) \n    { \n      if (low < high) \n      { \n        int index = Partition(values, low, high); \n\n        QuickSort(values, low, index -1); \n        QuickSort(values, index +1, high); \n      } \n    } \n\n    int Partition(int[] values, int low, int high) \n    { \n      int pivot = values[high]; \n      int i = (low - 1); \n      for (int j = low; j <= high -1; j++) \n      { \n        if (values[j] <= pivot) \n        { \n          i++; \n\n          Swap(ref values[i], ref values[j]); \n        } \n      } \n\n    i++; \n      Swap(ref values[i], ref values[high]); \n      return i; \n    } \n\n```", "```py\n    public void quickSort(int[] values, int low, int high) \n    { \n        if (low < high) \n        { \n            int index = partition(values, low, high); \n\n            quickSort(values, low, index - 1); \n            quickSort(values, index + 1, high); \n        } \n    } \n\n    int partition(int[] values, int low, int high) \n    { \n        int pivot = values[high]; \n        int i = (low - 1); \n        for (int j = low; j <= high - 1; j++) \n        { \n            if (values[j] <= pivot) \n            { \n                i++; \n\n                int temp = values[i]; \n                values[i] = values[j]; \n                values[j] = temp; \n            } \n        } \n\n        i++; \n        int temp = values[i]; \n        values[i] = values[high]; \n        values[high] = temp; \n\n        return i;  \n    } \n\n```", "```py\n    -(void)quickSortArray:(NSMutableArray<NSNumber*>*)values forLowIndex:(NSInteger)low andHighIndex:(NSInteger)high \n    { \n        if (low < high) \n        { \n            NSInteger index = [self partitionArray:values forLowIndex:low andHighIndex:high]; \n            [self quickSortArray:values forLowIndex:low andHighIndex:index - 1]; \n            [self quickSortArray:values forLowIndex:index + 1 andHighIndex:high]; \n        } \n    } \n\n    -(NSInteger)partitionArray:(NSMutableArray<NSNumber*>*)values forLowIndex:(NSInteger)low andHighIndex:(NSInteger)high \n    { \n        NSInteger pivot = [values[high] intValue]; \n        NSInteger i = (low - 1); \n        for (NSInteger j = low; j <= high - 1; j++) \n        { \n            if ([values[j] intValue] <= pivot) \n            { \n                i++; \n\n                NSInteger temp = [values[i] intValue]; \n                values[i] = values[j]; \n                values[j] = [NSNumber numberWithInteger:temp]; \n            } \n        } \n\n        i++; \n        NSInteger temp = [values[i] intValue]; \n        values[i] = values[high]; \n        values[high] = [NSNumber numberWithInteger:temp]; \n\n        return i; \n    } \n\n```", "```py\n    open func quickSort( values: inout [Int], low: Int, high: Int) \n    { \n        if (low < high) \n        { \n            let index: Int = partition( values: &values, low: low, high: high) \n\n            quickSort( values: &values, low: low, high: index - 1) \n            quickSort( values: &values, low: index + 1, high: high) \n        } \n    } \n\n    func partition( values: inout [Int], low: Int, high: Int) -> Int \n    { \n        let pivot: Int = values[high] \n        var i: Int = (low - 1) \n        var j: Int = low \n\n        while j <= (high - 1) \n        { \n            if (values[j] <= pivot) \n            { \n                i += 1 \n                swap(x: &values[i], y: &values[j]) \n            } \n\n            j += 1 \n        } \n\n        i += 1 \n        swap(x: &values[i], y: &values[high]) \n\n        return i; \n    } \n\n```", "```py\n    public void MergeSort(int[] values, int left, int right) \n    { \n      if (left == right) \n        return; \n\n      if (left < right) \n      { \n        int middle = (left + right) / 2; \n\n        MergeSort(values, left, middle); \n        MergeSort(values, middle + 1, right); \n\n        int[] temp = new int[values.Length]; \n        for (int n = left; n <= right; n++) \n        { \n          temp[n] = values[n]; \n        } \n\n        int index1 = left;  \n        int index2 = middle + 1; \n        for (int n = left; n <= right; n++) \n        { \n          if (index1 == middle + 1) \n          { \n            values[n] = temp[index2++]; \n          } \n          else if (index2 > right) \n          { \n            values[n] = temp[index1++]; \n          } \n          else if (temp[index1] < temp[index2]) \n          { \n            values[n] = temp[index1++]; \n          } \n          else \n          { \n            values[n] = temp[index2++]; \n          } \n        } \n      }     \n    } \n\n```", "```py\n    public void mergeSort(int[] values, int left, int right) \n    { \n        if (left == right) \n            return; \n\n        if (left < right) \n        { \n            int middle = (left + right) / 2; \n\n            mergeSort(values, left, middle); \n            mergeSort(values, middle + 1, right); \n\n            int[] temp = new int[values.length]; \n            for (int n = left; n <= right; n++) \n            { \n                temp[n] = values[n]; \n            } \n\n            int index1 = left; \n            int index2 = middle + 1; \n            for (int n = left; n <= right; n++) \n            { \n                if (index1 == middle + 1) \n                { \n                    values[n] = temp[index2++]; \n                } \n                else if (index2 > right) \n                { \n                    values[n] = temp[index1++]; \n                } \n                else if (temp[index1] < temp[index2]) \n                { \n                    values[n] = temp[index1++]; \n                } \n                else \n                { \n                    values[n] = temp[index2++]; \n                } \n            } \n        } \n    } \n\n```", "```py\n    -(void)mergeSort:(NSMutableArray*)values withLeftIndex:(NSInteger)left andRightIndex:(NSInteger)right \n    { \n        if (left == right) \n            return; \n\n        if (left < right) \n        { \n            NSInteger middle = (left + right) / 2; \n\n            [self mergeSort:values withLeftIndex:left andRightIndex:middle]; \n            [self mergeSort:values withLeftIndex:middle + 1 andRightIndex:right]; \n            NSMutableArray *temp = [NSMutableArray arrayWithArray:values]; \n            NSInteger index1 = left; \n            NSInteger index2 = middle + 1; \n            for (NSInteger n = left; n <= right; n++) \n            { \n                if (index1 == middle + 1) \n                { \n                    values[n] = temp[index2++]; \n                } \n                else if (index2 > right) \n                { \n                    values[n] = temp[index1++]; \n                } \n                else if (temp[index1] < temp[index2]) \n                { \n                    values[n] = temp[index1++]; \n                } \n                else \n                { \n                    values[n] = temp[index2++]; \n                } \n            } \n        } \n    } \n\n```", "```py\n    open func mergeSort( values: inout [Int], left: Int, right: Int) \n    { \n        if (values.count <= 1) \n        { \n            return \n        } \n\n        if (left == right) \n        { \n            return \n        } \n\n        if (left < right) \n        { \n            let middle: Int = (left + right) / 2 \n\n            mergeSort(values: &values, left: left, right: middle) \n            mergeSort(values: &values, left: middle + 1, right: right) \n\n            var temp = values \n\n            var index1: Int = left \n            var index2: Int = middle + 1 \n            for n in left...right \n            { \n                if (index1 == middle + 1) \n                { \n                    values[n] = temp[index2] \n                    index2 += 1 \n                } \n                else if (index2 > right) \n                { \n                    values[n] = temp[index1] \n                    index1 += 1 \n                } \n                else if (temp[index1] < temp[index2]) \n                { \n                    values[n] = temp[index1] \n                    index1 += 1 \n                } \n                else \n                { \n                    values[n] = temp[index2] \n                    index2 += 1 \n                } \n            } \n        } \n    } \n\n```", "```py\n    public void BucketSort(int[] values, int maxVal) \n    { \n      int[] bucket = new int[maxVal + 1]; \n      int num = values.Length; \n      int bucketNum = bucket.Length; \n\n      for (int i = 0; i < bucketNum; i++) \n      { \n        bucket[i] = 0; \n      } \n\n      for (int i = 0; i < num; i++) \n      { \n        bucket[values[i]]++; \n      } \n\n      int pos = 0; \n      for (int i = 0; i < bucketNum; i++) \n      { \n        for (int j = 0; j < bucket[i]; j++) \n        { \n          values[pos++] = i; \n        } \n      } \n    } \n\n```", "```py\n    public void BucketSort(int[] values, int maxVal) \n    { \n        int[] bucket = new int[maxVal + 1]; \n        int num = values.length; \n        int bucketNum = bucket.length; \n\n        for (int i = 0; i < bucketNum; i++) \n        { \n            bucket[i] = 0; \n        } \n\n        for (int i = 0; i < num; i++) \n        { \n            bucket[values[i]]++; \n        } \n\n        int pos = 0; \n        for (int i = 0; i < bucketNum; i++) \n        { \n            for (int j = 0; j < bucket[i]; j++) \n            { \n                values[pos++] = i; \n            } \n        } \n    } \n\n```", "```py\n    -(void)bucketSortArray:(NSMutableArray<NSNumber*>*)values withMaxValue:(NSInteger)maxValue \n    { \n        NSMutableArray<NSNumber*>*bucket = [NSMutableArray array]; \n        NSInteger num = [values count]; \n        NSInteger bucketNum = maxValue + 1; \n\n        for (int i = 0; i < bucketNum; i++) \n        { \n            [bucket insertObject:[NSNumber numberWithInteger:0] atIndex:i]; \n        } \n\n        for (int i = 0; i < num; i++) \n        { \n            NSInteger value=[bucket[[values[i] intValue]] intValue]+ 1; \n            bucket[[values[i] intValue]] = [NSNumber numberWithInteger:value]; \n        } \n\n        int pos = 0; \n\n        for (int i = 0; i < bucketNum; i++) \n        { \n            for (int j = 0; j < [bucket[i] intValue]; j++) \n            { \n                values[pos++] = [NSNumber numberWithInteger:i]; \n            } \n        } \n    } \n\n```", "```py\n    open func bucketSort( values: inout [Int], maxVal: Int) \n    { \n        var bucket = [Int]() \n        let num: Int = values.count \n        let bucketNum: Int = bucket.count \n\n        for i in 0..<bucketNum \n        { \n            bucket[i] = 0 \n        } \n\n        for i in 0..<num \n        { \n            bucket[values[i]] += 1 \n        } \n\n        var pos: Int = 0 \n        for i in 0..<bucketNum \n        { \n            for _ in 0..<bucket[i] \n            { \n                values[pos] = i \n                pos += 1 \n            } \n        } \n    } \n\n```"]