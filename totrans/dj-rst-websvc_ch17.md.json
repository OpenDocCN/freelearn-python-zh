["```py\n  class DroneCategory(models.Model): \n name = models.CharField(max_length=250, unique=True) \n     class Meta: \n        ordering = ('name',) \n\n     def __str__(self): \n         return self.name \n\n  class Drone(models.Model): \n name = models.CharField(max_length=250, unique=True)     drone_category = models.ForeignKey( \n         DroneCategory,  \n         related_name='drones',  \n         on_delete=models.CASCADE) \n      manufacturing_date = models.DateTimeField() \n      has_it_competed = models.BooleanField(default=False) \n      inserted_timestamp = models.DateTimeField(auto_now_add=True) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\n  class Pilot(models.Model): \n    MALE = 'M' \n    FEMALE = 'F' \n    GENDER_CHOICES = ( \n        (MALE, 'Male'), \n        (FEMALE, 'Female'), \n    ) \n name = models.CharField(max_length=150, blank=False, unique=True)    gender = models.CharField( \n        max_length=2, \n        choices=GENDER_CHOICES, \n        default=MALE, \n    ) \n    races_count = models.IntegerField() \n    inserted_timestamp = models.DateTimeField(auto_now_add=True) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n```", "```py\n    python manage.py makemigrations drones\n```", "```py\nMigrations for 'drones':\ndrones/migrations/0002_auto_20171104_0246.py\n- Alter field name on drone\n- Alter field name on dronecategory\n- Alter field name on pilot \n```", "```py\n# -*- coding: utf-8 -*- \n# Generated by Django 1.11.5 on 2017-11-04 02:46 \nfrom __future__ import unicode_literals \n\nfrom django.db import migrations, models \n\nclass Migration(migrations.Migration): \n\n    dependencies = [ \n        ('drones', '0001_initial'), \n    ] \n\n    operations = [ \n        migrations.AlterField( \n            model_name='drone', \n            name='name', \n            field=models.CharField(max_length=250, unique=True), \n        ), \n        migrations.AlterField( \n            model_name='dronecategory', \n            name='name', \n            field=models.CharField(max_length=250, unique=True), \n        ), \n        migrations.AlterField( \n            model_name='pilot', \n            name='name', \n            field=models.CharField(max_length=50, unique=True), \n        ), \n    ] \n```", "```py\n    python manage.py migrate\n```", "```py\n    Operations to perform:\n      Apply all migrations: admin, auth, contenttypes, drones, sessions\n    Running migrations:\n      Applying drones.0002_auto_20171104_0246... OK\n\n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000 \n```", "```py\n    http POST :8000/drone-categories/ name=\"Quadcopter\"\n```", "```py\n curl -iX POST -H \"Content-Type: application/json\" -d  '{\"name\":\"Quadcopter\"}' localhost:8000/drone-categories/ \n```", "```py\n    HTTP/1.0 400 Bad Request\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 58\n    Content-Type: application/json\n    Date: Sun, 05 Nov 2017 04:00:42 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"name\": [\n            \"drone category with this name already exists.\"\n        ]\n    }\n```", "```py\n    http POST :8000/pilots/ name=\"Penelope Pitstop\" gender=\"F\" \n    races_count=0\n```", "```py\n    curl -iX POST -H \"Content-Type: application/json\" -d    \n    '{\"name\":\"Penelope Pitstop\", \"gender\":\"F\", \"races_count\": 0}'   \n    localhost:8000/pilots/\n```", "```py\n    HTTP/1.0 400 Bad Request\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 49\n    Content-Type: application/json\n    Date: Sun, 05 Nov 2017 04:13:37 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"name\": [\n            \"pilot with this name already exists.\"\n        ]\n    }\n```", "```py\n REST_FRAMEWORK = {\n    'DEFAULT_PAGINATION_CLASS':\n    'rest_framework.pagination.LimitOffsetPagination',\n    'PAGE_SIZE': 4\n }\n```", "```py\n    http POST :8000/drones/ name=\"Need for Speed\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-01-20T02:02:00.716312Z\" has_it_competed=false \n    http POST :8000/drones/ name=\"Eclipse\" drone_category=\"Octocopter\" manufacturing_date=\"2017-02-18T02:02:00.716312Z\" has_it_competed=false\n    http POST :8000/drones/ name=\"Gossamer Albatross\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-03-20T02:02:00.716312Z\" has_it_competed=false \n    http POST :8000/drones/ name=\"Dassault Falcon 7X\" drone_category=\"Octocopter\" manufacturing_date=\"2017-04-18T02:02:00.716312Z\" has_it_competed=false\n    http POST :8000/drones/ name=\"Gulfstream I\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-05-20T02:02:00.716312Z\" has_it_competed=false \n    http POST :8000/drones/ name=\"RV-3\" drone_category=\"Octocopter\" manufacturing_date=\"2017-06-18T02:02:00.716312Z\" has_it_competed=false\n    http POST :8000/drones/ name=\"Dusty\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-07-20T02:02:00.716312Z\" has_it_competed=false \n    http POST :8000/drones/ name=\"Ripslinger\" drone_category=\"Octocopter\" manufacturing_date=\"2017-08-18T02:02:00.716312Z\" has_it_competed=false\n    http POST :8000/drones/ name=\"Skipper\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-09-20T02:02:00.716312Z\" has_it_competed=false  \n```", "```py\n curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Need for Speed\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-01-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Eclipse\", \"drone_category\":\"Octocopter\", \"manufacturing_date\": \"2017-02-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Gossamer Albatross\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-03-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Dassault Falcon 7X\", \"drone_category\":\"Octocopter\", \"manufacturing_date\": \"2017-04-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Gulfstream I\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-05-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"RV-3\", \"drone_category\":\"Octocopter\", \"manufacturing_date\": \"2017-06-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Dusty\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-07-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Ripslinger\", \"drone_category\":\"Octocopter\", \"manufacturing_date\": \"2017-08-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Skipper\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-09-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/  \n```", "```py\n    http GET :8000/drones/  \n```", "```py\n    curl -iX GET localhost:8000/drones/\n```", "```py\n    HTTP/1.0 200 OK\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 958\n    Content-Type: application/json\n    Date: Mon, 06 Nov 2017 23:08:36 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n    \"count\": 11, \n    \"next\": \"http://localhost:8000/drones/?limit=4&offset=4\", \n    \"previous\": null, \n        \"results\": [\n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-03T01:59:31.108031Z\", \n    \"manufacturing_date\": \"2017-08-18T02:02:00.716312Z\", \n    \"name\": \"Atom\", \n                \"url\": \"http://localhost:8000/drones/2\"\n    }, \n            {\n    \"drone_category\": \"Octocopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:30.357127Z\", \n    \"manufacturing_date\": \"2017-04-18T02:02:00.716312Z\", \n    \"name\": \"Dassault Falcon 7X\", \n                \"url\": \"http://localhost:8000/drones/6\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:31.049833Z\", \n    \"manufacturing_date\": \"2017-07-20T02:02:00.716312Z\", \n    \"name\": \"Dusty\", \n                \"url\": \"http://localhost:8000/drones/9\"\n    }, \n            {\n    \"drone_category\": \"Octocopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:29.909965Z\", \n    \"manufacturing_date\": \"2017-02-18T02:02:00.716312Z\", \n    \"name\": \"Eclipse\", \n                \"url\": \"http://localhost:8000/drones/4\"\n            }\n        ]\n    }\n```", "```py\n    http GET \":8000/drones/?offset=0\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?offset=0\"\n```", "```py\n    http GET \":8000/drones/?limit=4&offset=0\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?limit=4&offset=0\"\n\n```", "```py\n    http GET \":8000/drones/?limit=4&offset=4\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?limit=4&offset=4\"\n```", "```py\nHTTP/1.0 200 OK\nAllow: GET, POST, HEAD, OPTIONS\nContent-Length: 1007\nContent-Type: application/json\nDate: Mon, 06 Nov 2017 23:31:34 GMT\nServer: WSGIServer/0.2 CPython/3.6.2\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n{\n \"count\": 11,\n \"next\": \"http://localhost:8000/drones/?limit=4&offset=8\",\n \"previous\": \"http://localhost:8000/drones/?limit=4\",\n \"results\": [\n {\n \"drone_category\": \"Quadcopter\",\n \"has_it_competed\": false,\n \"inserted_timestamp\": \"2017-11-06T20:25:30.127661Z\",\n \"manufacturing_date\": \"2017-03-20T02:02:00.716312Z\",\n \"name\": \"Gossamer Albatross\",\n \"url\": \"http://localhost:8000/drones/5\"\n },\n {\n \"drone_category\": \"Quadcopter\",\n \"has_it_competed\": false,\n \"inserted_timestamp\": \"2017-11-06T20:25:30.584031Z\",\n \"manufacturing_date\": \"2017-05-20T02:02:00.716312Z\",\n \"name\": \"Gulfstream I\",\n \"url\": \"http://localhost:8000/drones/7\"\n },\n {\n \"drone_category\": \"Quadcopter\",\n \"has_it_competed\": false,\n \"inserted_timestamp\": \"2017-11-06T20:25:29.636153Z\",\n \"manufacturing_date\": \"2017-01-20T02:02:00.716312Z\",\n \"name\": \"Need for Speed\",\n \"url\": \"http://localhost:8000/drones/3\"\n },\n {\n \"drone_category\": \"Octocopter\",\n \"has_it_competed\": false,\n \"inserted_timestamp\": \"2017-11-06T20:25:30.819695Z\",\n \"manufacturing_date\": \"2017-06-18T02:02:00.716312Z\",\n \"name\": \"RV-3\",\n \"url\": \"http://localhost:8000/drones/8\"\n }\n ]\n}\n```", "```py\n    http GET \":8000/drones/?offset=4\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?offset=4\"\n```", "```py\n    http GET \":8000/drones/?limit=4&offset=8\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?limit=4&offset=8\"\n```", "```py\n    HTTP/1.0 200 OK\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 747\n    Content-Type: application/json\n    Date: Tue, 07 Nov 2017 02:59:42 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n    \"count\": 11, \n    \"next\": null, \n    \"previous\": \"http://localhost:8000/drones/?limit=4&offset=4\", \n        \"results\": [\n            {\n    \"drone_category\": \"Octocopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:31.279172Z\", \n    \"manufacturing_date\": \"2017-08-18T02:02:00.716312Z\", \n    \"name\": \"Ripslinger\", \n                \"url\": \"http://localhost:8000/drones/10\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:31.511881Z\", \n    \"manufacturing_date\": \"2017-09-20T02:02:00.716312Z\", \n    \"name\": \"Skipper\", \n                \"url\": \"http://localhost:8000/drones/11\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-03T01:58:49.135737Z\", \n    \"manufacturing_date\": \"2017-07-20T02:02:00.716312Z\", \n    \"name\": \"WonderDrone\", \n                \"url\": \"http://localhost:8000/drones/1\"\n            }\n        ]\n    }  \n```", "```py\nfrom rest_framework.pagination import LimitOffsetPagination \nclass LimitOffsetPaginationWithUpperBound(LimitOffsetPagination):\n    # Set the maximum limit value to 8 \n       max_limit = 8\n```", "```py\n REST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n 'drones.custompagination.LimitOffsetPaginationWithUpperBound', \n    'PAGE_SIZE': 4 \n } \n```", "```py\n    http GET \":8000/drones/?limit=500\"  \n```", "```py\n    curl -iX GET \"localhost:8000/drones/?limit=500\"\n```", "```py\n    pip install django-filter\n```", "```py\n     Collecting django-filter\n     Downloading django_filter-1.1.0-py2.py3-none-any.whl\n     Installing collected packages: django-filter\n     Successfully installed django-filter-1.1.0\n```", "```py\n  REST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'drones.custompagination.LimitOffsetPaginationWithUpperBound', \n    'PAGE_SIZE': 4, \n 'DEFAULT_FILTER_BACKENDS': (\n        'django_filters.rest_framework.DjangoFilterBackend', \n        'rest_framework.filters.OrderingFilter', \n        'rest_framework.filters.SearchFilter', \n        ),  } \n```", "```py\n  'django_filters',\n```", "```py\n  INSTALLED_APPS = [ \n     'django.contrib.admin', \n     'django.contrib.auth', \n     'django.contrib.contenttypes', \n     'django.contrib.sessions', \n     'django.contrib.messages', \n     'django.contrib.staticfiles', \n     # Django REST Framework \n     'rest_framework', \n     # Drones application \n     'drones.apps.DronesConfig', \n     # Django Filters, \n 'django_filters', ]\n```", "```py\nfrom rest_framework import filters \nfrom django_filters import AllValuesFilter, DateTimeFilter, NumberFilter \n```", "```py\nclass DroneCategoryList(generics.ListCreateAPIView): \n    queryset = DroneCategory.objects.all() \n    serializer_class = DroneCategorySerializer \n    name = 'dronecategory-list' \n filter_fields = ( \n        'name', \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        ) \n```", "```py\nclass DroneList(generics.ListCreateAPIView): \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-list' \n filter_fields = ( \n        'name',  \n        'drone_category',  \n        'manufacturing_date',  \n        'has_it_competed',  \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'manufacturing_date', \n        ) \n```", "```py\nclass PilotList(generics.ListCreateAPIView): \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-list' \n filter_fields = ( \n        'name',  \n        'gender', \n        'races_count', \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'races_count' \n        )\n```", "```py\nclass CompetitionFilter(filters.FilterSet): \n    from_achievement_date = DateTimeFilter( \n        name='distance_achievement_date', lookup_expr='gte') \n    to_achievement_date = DateTimeFilter( \n        name='distance_achievement_date', lookup_expr='lte') \n    min_distance_in_feet = NumberFilter( \n        name='distance_in_feet', lookup_expr='gte') \n    max_distance_in_feet = NumberFilter( \n        name='distance_in_feet', lookup_expr='lte') \n    drone_name = AllValuesFilter( \n        name='drone__name') \n    pilot_name = AllValuesFilter( \n        name='pilot__name') \n\n    class Meta: \n        model = Competition \n        fields = ( \n            'distance_in_feet', \n            'from_achievement_date', \n            'to_achievement_date', \n            'min_distance_in_feet', \n            'max_distance_in_feet', \n            # drone__name will be accessed as drone_name \n            'drone_name', \n            # pilot__name will be accessed as pilot_name \n            'pilot_name', \n            )\n```", "```py\n  class CompetitionList(generics.ListCreateAPIView): \n    queryset = Competition.objects.all() \n    serializer_class = PilotCompetitionSerializer \n    name = 'competition-list' \n filter_class = CompetitionFilter \n    ordering_fields = ( \n        'distance_in_feet', \n        'distance_achievement_date', \n        ) \n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000\n```", "```py\n    http \":8000/drone-categories/?name=Quadcopter\"  \n```", "```py\n    curl -iX GET \"localhost:8000/drone-categories/?name=Quadcopter\"  \n```", "```py\n    {\n    \"count\": 1, \n    \"next\": null, \n    \"previous\": null, \n        \"results\": [\n            {\n                \"drones\": [\n    \"http://localhost:8000/drones/2\", \n    \"http://localhost:8000/drones/9\", \n    \"http://localhost:8000/drones/5\", \n    \"http://localhost:8000/drones/7\", \n    \"http://localhost:8000/drones/3\", \n    \"http://localhost:8000/drones/11\", \n                    \"http://localhost:8000/drones/1\"\n    ], \n    \"name\": \"Quadcopter\", \n    \"pk\": 1, \n                \"url\": \"http://localhost:8000/drone-categories/1\"\n            }\n        ]\n    }  \n```", "```py\n    http \":8000/drones/?\n    drone_category=1&has_it_competed=False&ordering=-name\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?\n    drone_category=1&has_it_competed=False&ordering=-name\" \n```", "```py\n    {\n    \"count\": 7, \n    \"next\": \"http://localhost:8000/drones/? \n\n     drone_category=1&has_it_competed=False&limit=4&offset=4&ordering=-\n     name\", \n    \"previous\": null, \n        \"results\": [\n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-03T01:58:49.135737Z\", \n    \"manufacturing_date\": \"2017-07-20T02:02:00.716312Z\", \n    \"name\": \"WonderDrone\", \n                \"url\": \"http://localhost:8000/drones/1\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:31.511881Z\", \n    \"manufacturing_date\": \"2017-09-20T02:02:00.716312Z\", \n    \"name\": \"Skipper\", \n                \"url\": \"http://localhost:8000/drones/11\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:29.636153Z\", \n    \"manufacturing_date\": \"2017-01-20T02:02:00.716312Z\", \n    \"name\": \"Need for Speed\", \n                \"url\": \"http://localhost:8000/drones/3\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:30.584031Z\", \n    \"manufacturing_date\": \"2017-05-20T02:02:00.716312Z\", \n    \"name\": \"Gulfstream I\", \n                \"url\": \"http://localhost:8000/drones/7\"\n            }\n        ]\n    }\n```", "```py\n http \":8000/competitions/?   \n  pilot_name=Penelope+Pitstop&drone_name=WonderDrone\"\n```", "```py\n curl -iX GET \"localhost:8000/competitions/?  \n  pilot_name=Penelope+Pitstop&drone_name=WonderDrone\"\n\n```", "```py\n { \n    \"count\": 1,  \n    \"next\": null,  \n    \"previous\": null,  \n    \"results\": [ \n        { \n            \"distance_achievement_date\": \"2017-10-21T06:02:23.776594Z\",  \n            \"distance_in_feet\": 2800,  \n            \"drone\": \"WonderDrone\",  \n            \"pilot\": \"Penelope Pitstop\",  \n            \"pk\": 2,  \n            \"url\": \"http://localhost:8000/competitions/2\" \n        } \n    ] \n } \n```", "```py\nhttp \":8000/competitions/?  min_distance_in_feet=700&max_distance_in_feet=9000&from_achievement_date=2017-10-18&to_achievement_date=2017-10-22&ordering=-achievement_date\"  \n```", "```py\ncurl -iX GET \"localhost:8000/competitions/?min_distance_in_feet=700&max_distance_in_feet=9000&from_achievement_date=2017-10-18&to_achievement_date=2017-10-22&ordering=-achievement_date\"\n```", "```py\n    {\n    \"count\": 2, \n    \"next\": null, \n    \"previous\": null, \n        \"results\": [\n            {\n    \"distance_achievement_date\":\n             \"2017-10-20T05:03:20.776594Z\", \n    \"distance_in_feet\": 800, \n    \"drone\": \"Atom\", \n    \"pilot\": \"Penelope Pitstop\", \n    \"pk\": 1, \n                \"url\": \"http://localhost:8000/competitions/1\"\n    }, \n            {\n    \"distance_achievement_date\":\n                \"2017-10-20T05:43:20.776594Z\", \n    \"distance_in_feet\": 790, \n    \"drone\": \"Atom\", \n    \"pilot\": \"Peter Perfect\", \n    \"pk\": 3, \n                \"url\": \"http://localhost:8000/competitions/3\"\n            }\n        ]\n    }\n```", "```py\n    http \":8000/drones/?search=G\"\n```", "```py\n    curl -iX GET \"localhost:8000/drones/?search=G\"\n```", "```py\n    {\n    \"count\": 2, \n    \"next\": null, \n    \"previous\": null, \n        \"results\": [\n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:30.127661Z\", \n    \"manufacturing_date\": \"2017-03-20T02:02:00.716312Z\", \n    \"name\": \"Gossamer Albatross\", \n                \"url\": \"http://localhost:8000/drones/5\"\n    }, \n            {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-06T20:25:30.584031Z\", \n    \"manufacturing_date\": \"2017-05-20T02:02:00.716312Z\", \n    \"name\": \"Gulfstream I\", \n                \"url\": \"http://localhost:8000/drones/7\"\n            }\n        ]\n    }\n```", "```py\nhttp://localhost:8000/competitions/?distance_in_feet=&drone_name=Atom&format=json&from_achievement_date=&max_distance_in_feet=&min_distance_in_feet=85&pilot_name=Penelope+Pitstop&to_achievement_date= \n```", "```py\nREST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'drones.custompagination.LimitOffsetPaginationWithUpperBound', \n    'PAGE_SIZE': 4, \n    'DEFAULT_FILTER_BACKENDS': ( \n        'django_filters.rest_framework.DjangoFilterBackend', \n        'rest_framework.filters.OrderingFilter', \n        'rest_framework.filters.SearchFilter', \n        ), \n 'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.BasicAuthentication', \n        'rest_framework.authentication.SessionAuthentication', \n        ) } \n```", "```py\nclass Drone(models.Model): \n    name = models.CharField(max_length=250, unique=True) \n    drone_category = models.ForeignKey( \n        DroneCategory,  \n        related_name='drones',  \n        on_delete=models.CASCADE) \n    manufacturing_date = models.DateTimeField() \n    has_it_competed = models.BooleanField(default=False) \n    inserted_timestamp = models.DateTimeField(auto_now_add=True) \n owner = models.ForeignKey( \n        'auth.User',  \n        related_name='drones', \n        on_delete=models.CASCADE) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name\n```", "```py\nfrom django.contrib.auth.models import User \n\nclass UserDroneSerializer(serializers.HyperlinkedModelSerializer): \n    class Meta: \n        model = Drone \n        fields = ( \n            'url', \n            'name') \n\nclass UserSerializer(serializers.HyperlinkedModelSerializer): \n    drones = UserDroneSerializer( \n        many=True,  \n        read_only=True) \n\n    class Meta: \n        model = User \n        fields = ( \n            'url',  \n            'pk', \n            'username', \n            'drone')\n```", "```py\nclass DroneSerializer(serializers.HyperlinkedModelSerializer): \n    # Display the category name \n    drone_category = serializers.SlugRelatedField(queryset=DroneCategory.objects.all(), slug_field='name') \n # Display the owner's username (read-only) \n    owner = serializers.ReadOnlyField(source='owner.username') \n    class Meta: \n        model = Drone \n        fields = ( \n            'url', \n            'name', \n            'drone_category', \n 'owner',            'manufacturing_date', \n            'has_it_competed', \n            'inserted_timestamp',) \n```", "```py\nfrom rest_framework import permissions \n\nclass IsCurrentUserOwnerOrReadOnly(permissions.BasePermission): \n    def has_object_permission(self, request, view, obj): \n        if request.method in permissions.SAFE_METHODS: \n            # The method is a safe method \n            return True \n        else: \n            # The method isn't a safe method \n            # Only owners are granted permissions for unsafe methods \n            return obj.owner == request.user \n```", "```py\nclass DroneList(generics.ListCreateAPIView): \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-list' \n    filter_fields = ( \n        'name',  \n        'drone_category',  \n        'manufacturing_date',  \n        'has_it_competed',  \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'manufacturing_date', \n        ) \n\n def perform_create(self, serializer): \n        serializer.save(owner=self.request.user) \n```", "```py\nfrom rest_framework import permissions \nfrom drones import custompermission \n```", "```py\nclass DroneDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-detail' \n permission_classes = ( \n        permissions.IsAuthenticatedOrReadOnly, \n        custompermission.IsCurrentUserOwnerOrReadOnly, \n        )\n```", "```py\nclass DroneList(generics.ListCreateAPIView): \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-list' \n    filter_fields = ( \n        'name',  \n        'drone_category',  \n        'manufacturing_date',  \n        'has_it_competed',  \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'manufacturing_date', \n        ) \n permission_classes = ( \n        permissions.IsAuthenticatedOrReadOnly, \n        custompermission.IsCurrentUserOwnerOrReadOnly, \n        )\n\n    def perform_create(self, serializer): \n        serializer.save(owner=self.request.user) \n```", "```py\n    python manage.py createsuperuser\n```", "```py\n    Username (leave blank to use 'gaston'):\n```", "```py\n    Email address:\n```", "```py\n    Password:\n```", "```py\n    Password (again): \n    Superuser created successfully.\n```", "```py\n    psql --username=username --dbname=drones --command=\"SELECT id FROM \n    auth_user WHERE username = 'djangosuper';\"\n\n```", "```py\n    id \n    ----\n      1\n    (1 row)\n```", "```py\n    python manage.py makemigrations drones\n```", "```py\n You are trying to add a non-nullable field 'owner' to drone without a   \n  default; we can't do that (the database needs something to populate \n   existing rows).\n    Please select a fix:\n     1) Provide a one-off default now (will be set on all existing rows \n     with a null value for this column)\n     2) Quit, and let me add a default in models.py\n       Select an option:\n```", "```py\n    Please enter the default value now, as valid Python\n    The datetime and django.utils.timezone modules are available, so \n     you can do e.g. timezone.now\n    Type 'exit' to exit this prompt\n    >>>\n```", "```py\n    Migrations for 'drones':\n      drones/migrations/0003_drone_owner.py\n        - Add field owner to drone\n```", "```py\n# -*- coding: utf-8 -*-\n# Generated by Django 1.11.5 on 2017-11-09 22:04\nfrom __future__ import unicode_literals\nfrom django.conf import settings\nfrom django.db import migrations, models\nimport django.db.models.deletion\n\nclass Migration(migrations.Migration):\n\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n        ('drones', '0002_auto_20171104_0246'),\n    ]\n\n    operations = [\n        migrations.AddField(\n            model_name='drone',\n            name='owner',\n            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='drones', to=settings.AUTH_USER_MODEL),\n            preserve_default=False,\n        ),\n    ]\n\n```", "```py\n    python manage.py migrate\n```", "```py\nOperations to perform: Apply all migrations: admin, auth, contenttypes, drones, sessions Running migrations: Applying drones.0003_drone_owner... OK\n```", "```py\n    python manage.py shell\n```", "```py\nfrom django.contrib.auth.models import User\n\nuser = User.objects.create_user('user01', 'user01@example.com', 'user01password')\nuser.save()\n```", "```py\nquit()\n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000\n```", "```py\nhttp POST :8000/drones/ name=\"Python Drone\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-07-16T02:03:00.716312Z\" has_it_competed=false\n```", "```py\n    curl -iX POST -H \"Content-Type: application/json\" -d   \n   '{\"name\":\"Python Drone\", \"drone_category\":\"Quadcopter\", \n    \"manufacturing_date\": \"2017-07-16T02:03:00.716312Z\",  \n    \"has_it_competed\": \"false\"}' localhost:8000/drones/\n```", "```py\nHTTP/1.0 401 Unauthorized\nAllow: GET, POST, HEAD, OPTIONS\nContent-Length: 58\nContent-Type: application/json\nDate: Tue, 19 Dec 2017 19:52:44 GMT\nServer: WSGIServer/0.2 CPython/3.6.2\nVary: Accept, Cookie\nWWW-Authenticate: Basic realm=\"api\"\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n```", "```py\nhttp -a \"djangosuper\":\"passwordforsuper\" POST :8000/drones/ name=\"Python Drone\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-07-16T02:03:00.716312Z\" has_it_competed=false\n```", "```py\n    curl --user \"djangosuper\":\"passwordforsuper\" -iX POST -H \"Content-\n    Type: application/json\" -d '{\"name\":\"Python Drone\", \n    \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-07-\n     16T02:03:00.716312Z\", \"has_it_competed\": \"false\"}' \n     localhost:8000/drones/\n```", "```py\nHTTP/1.0 201 Created\nAllow: GET, POST, HEAD, OPTIONS\nContent-Length: 219\nContent-Type: application/json\nDate: Fri, 10 Nov 2017 02:55:07 GMT\nLocation: http://localhost:8000/drones/12\nServer: WSGIServer/0.2 CPython/3.6.2\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"drone_category\": \"Quadcopter\",\n    \"has_it_competed\": false,\n    \"inserted_timestamp\": \"2017-11-10T02:55:07.361574Z\",\n    \"manufacturing_date\": \"2017-07-16T02:03:00.716312Z\",\n    \"name\": \"Python Drone\",\n    \"owner\": \"djangosuper\",\n    \"url\": \"http://localhost:8000/drones/12\"\n} \n```", "```py\nhttp -a \"user01\":\"user01password\" PATCH :8000/drones/12 has_it_competed=true\n```", "```py\ncurl --user \"user01\":\"user01password\" -iX PATCH -H \"Content-Type: application/json\" -d '{\"has_it_competed\": \"true\"}' localhost:8000/drones/12\n```", "```py\n    HTTP/1.0 403 Forbidden\n    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS\n    Content-Length: 63\n    Content-Type: application/json\n    Date: Fri, 10 Nov 2017 03:34:43 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"detail\": \"You do not have permission to perform this action.\"\n    }\n\n```", "```py\n    http -a \"user01\":\"user01password\" GET :8000/drones/12\n```", "```py\n    curl --user \"user01\":\"user01password\" -iX GET \n    localhost:8000/drones/12\n```", "```py\n   { \n       \"has_it_competed\": \"true\" \n   }\n```", "```py\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n    url(r'^', include('drones.urls')),\n url(r'^api-auth/', include('rest_framework.urls')) ]\n```", "```py\n'rest_framework.authtoken' \n```", "```py\nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n    # Django REST framework \n    'rest_framework', \n    # Drones application \n    'drones.apps.DronesConfig', \n    # Django Filters, \n    'django_filters', \n    # Token authentication \n 'rest_framework.authtoken',\n]\n```", "```py\n    python manage.py migrate\n```", "```py\n    Operations to perform:\n      Apply all migrations: admin, auth, authtoken, contenttypes, \n      drones, sessions\n      Running migrations:\n      Applying authtoken.0001_initial... OK\n      Applying authtoken.0002_auto_20160226_1747... OK\n```", "```py\nfrom rest_framework.permissions import IsAuthenticated \nfrom rest_framework.authentication import TokenAuthentication\n```", "```py\nclass PilotDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-detail' \n authentication_classes = (\n        TokenAuthentication,\n        )\n    permission_classes = (\n        IsAuthenticated,\n        )\n```", "```py\nclass PilotList(generics.ListCreateAPIView): \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-list' \n    filter_fields = ( \n        'name',  \n        'gender', \n        'races_count', \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'races_count' \n        ) \n authentication_classes = (\n        TokenAuthentication,\n        )\n    permission_classes = (\n        IsAuthenticated,\n        )\n```", "```py\n   python manage.py shell\n```", "```py\nfrom rest_framework.authtoken.models import Token \nfrom django.contrib.auth.models import User \n```", "```py\n# Replace user01 with the name you configured for this user \nuser = User.objects.get(username=\"user01\") \ntoken = Token.objects.create(user=user) \nprint(token.key) \n```", "```py\n    ebebe08f5d7fe5997f9ed1761923ec5d3e461dc3\n```", "```py\n quit()\n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000\n```", "```py\n    http :8000/pilots/\n```", "```py\n    curl -iX GET localhost:8000/pilots/\n```", "```py\nHTTP/1.0 401 Unauthorized\nAllow: GET, POST, HEAD, OPTIONS\nContent-Length: 58\nContent-Type: application/json\nDate: Sat, 18 Nov 2017 02:28:31 GMT\nServer: WSGIServer/0.2 CPython/3.6.2\nVary: Accept\nWWW-Authenticate: Token\nX-Frame-Options: SAMEORIGIN\n\n{\n    \"detail\": \"Authentication credentials were not provided.\"\n}\n```", "```py\n    http :8000/pilots/ \"Authorization: Token PASTE-TOKEN-HERE\"\n```", "```py\n  curl -iX GET http://localhost:8000/pilots/ -H \"Authorization: Token \n  PASTE-TOKEN-HERE\"\n```", "```py\nREST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'drones.custompagination.LimitOffsetPaginationWithUpperBound', \n    'PAGE_SIZE': 4, \n    'DEFAULT_FILTER_BACKENDS': ( \n        'django_filters.rest_framework.DjangoFilterBackend', \n        'rest_framework.filters.OrderingFilter', \n        'rest_framework.filters.SearchFilter', \n        ), \n    'DEFAULT_AUTHENTICATION_CLASSES': ( \n        'rest_framework.authentication.BasicAuthentication', \n        'rest_framework.authentication.SessionAuthentication', \n        ), \n    'DEFAULT_THROTTLE_CLASSES': ( \n        'rest_framework.throttling.AnonRateThrottle', \n        'rest_framework.throttling.UserRateThrottle', \n    ), \n    'DEFAULT_THROTTLE_RATES': { \n        'anon': '3/hour', \n        'user': '10/hour', \n        'drones': '20/hour', \n        'pilots': '15/hour', \n    } \n} \n```", "```py\nfrom rest_framework.throttling import ScopedRateThrottle  \n```", "```py\nclass DroneDetail(generics.RetrieveUpdateDestroyAPIView): \n    throttle_scope = 'drones' \n    throttle_classes = (ScopedRateThrottle,) \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-detail' \n    permission_classes = ( \n        permissions.IsAuthenticatedOrReadOnly, \n        custompermission.IsCurrentUserOwnerOrReadOnly, \n        )\n```", "```py\nclass DroneList(generics.ListCreateAPIView): \n    throttle_scope = 'drones' \n    throttle_classes = (ScopedRateThrottle,) \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-list' \n    filter_fields = ( \n        'name',  \n        'drone_category',  \n        'manufacturing_date',  \n        'has_it_competed',  \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'manufacturing_date', \n        ) \n    permission_classes = ( \n        permissions.IsAuthenticatedOrReadOnly, \n        custompermission.IsCurrentUserOwnerOrReadOnly, \n        ) \n\n    def perform_create(self, serializer): \n        serializer.save(owner=self.request.user) \n```", "```py\nclass PilotDetail(generics.RetrieveUpdateDestroyAPIView): \n    throttle_scope = 'pilots' \n    throttle_classes = (ScopedRateThrottle,) \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-detail' \n    authentication_classes = ( \n        TokenAuthentication, \n        ) \n    permission_classes = ( \n        IsAuthenticated, \n        ) \n```", "```py\nclass PilotList(generics.ListCreateAPIView): \n    throttle_scope = 'pilots' \n    throttle_classes = (ScopedRateThrottle,) \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-list' \n    filter_fields = ( \n        'name',  \n        'gender', \n        'races_count', \n        ) \n    search_fields = ( \n        '^name', \n        ) \n    ordering_fields = ( \n        'name', \n        'races_count' \n        ) \n    authentication_classes = ( \n        TokenAuthentication, \n        ) \n    permission_classes = ( \n        IsAuthenticated, \n        ) \n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000\n```", "```py\n    http :8000/competitions/\n```", "```py\n    for i in {1..4}; do http :8000/competitions/; done;\n```", "```py\n    1..4 | foreach { http :8000/competitions/ }\n```", "```py\n    curl -iX GET localhost:8000/competitions/\n```", "```py\n    for i in {1..4}; do curl -iX GET localhost:8000/competitions/; done;\n```", "```py\n    1..4 | foreach { curl -iX GET localhost:8000/competitions/ }\n```", "```py\n    HTTP/1.0 429 Too Many Requests\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 71\n    Content-Type: application/json\n    Date: Thu, 30 Nov 2017 03:07:28 GMT\n    Retry-After: 2347\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"detail\": \"Request was throttled. Expected available in 2347 seconds.\"\n    }\n```", "```py\n    http -a \"djangosuper\":\"passwordforsuper\" :8000/competitions/\n```", "```py\n    for i in {1..4}; do http -a \"djangosuper\":\"passwordforsuper\" :8000/competitions/; done;\n```", "```py\n    1..4 | foreach { http -a \"djangosuper\":\"passwordforsuper\" :8000/competitions/ }\n\n```", "```py\n    curl --user 'djangosuper':'passwordforsuper' -iX GET localhost:8000/competitions/\n\n```", "```py\n    for i in {1..4}; do curl --user \"djangosuper\":\"passwordforsuper\" -iX GET localhost:8000/competitions/; done;\n\n```", "```py\n    1..4 | foreach { curl --user \"djangosuper\":\"passwordforsuper\" -iX GET localhost:8000/competitions/ }\n\n```", "```py\n    http :8000/drones/\n```", "```py\n    for i in {1..20}; do http :8000/drones/; done;\n```", "```py\n    1..21 | foreach { http :8000/drones/ }\n\n```", "```py\n    curl -iX GET localhost:8000/drones/\n```", "```py\n    for i in {1..21}; do curl -iX GET localhost:8000/drones/; done;\n```", "```py\n    1..20 | foreach { curl -iX GET localhost:8000/drones/ }\n```", "```py\n    http :8000/drones/1\n```", "```py\n    curl -iX GET localhost:8000/drones/1\n```", "```py\n    HTTP/1.0 429 Too Many Requests\n    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS\n    Content-Length: 71\n    Content-Type: application/json\n    Date: Mon, 04 Dec 2017 03:55:14 GMT\n    Retry-After: 3138\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"detail\": \"Request was throttled. Expected available in 3138 seconds.\"\n    }\n```", "```py\nREST_FRAMEWORK = { \n    'DEFAULT_PAGINATION_CLASS': \n    'drones.custompagination.LimitOffsetPaginationWithUpperBound', \n    'PAGE_SIZE': 4, \n    'DEFAULT_FILTER_BACKENDS': ( \n        'django_filters.rest_framework.DjangoFilterBackend', \n        'rest_framework.filters.OrderingFilter', \n        'rest_framework.filters.SearchFilter', \n        ), \n    'DEFAULT_AUTHENTICATION_CLASSES': ( \n        'rest_framework.authentication.BasicAuthentication', \n        'rest_framework.authentication.SessionAuthentication', \n        ), \n    'DEFAULT_THROTTLE_CLASSES': ( \n        'rest_framework.throttling.AnonRateThrottle', \n        'rest_framework.throttling.UserRateThrottle', \n    ), \n    'DEFAULT_THROTTLE_RATES': { \n        'anon': '3/hour', \n        'user': '10/hour', \n        'drones': '20/hour', \n        'pilots': '15/hour', \n    } \n    'DEFAULT_VERSIONING_CLASS':  \n        'rest_framework.versioning.NamespaceVersioning', \n} \n```", "```py\nfrom rest_framework import generics \nfrom rest_framework.response import Response \nfrom rest_framework.reverse import reverse \nfrom drones import views \n\nclass ApiRootVersion2(generics.GenericAPIView): \n    name = 'api-root' \n    def get(self, request, *args, **kwargs): \n        return Response({ \n            'vehicle-categories': reverse(views.DroneCategoryList.name, request=request), \n            'vehicles': reverse(views.DroneList.name, request=request), \n            'pilots': reverse(views.PilotList.name, request=request), \n            'competitions': reverse(views.CompetitionList.name, request=request) \n            }) \n```", "```py\nfrom django.conf.urls import url \nfrom drones import views \nfrom drones.v2 import views as views_v2 \n\nurlpatterns = [ \n    url(r'^vehicle-categories/$',  \n        views.DroneCategoryList.as_view(),  \n        name=views.DroneCategoryList.name), \n    url(r'^vehicle-categories/(?P<pk>[0-9]+)$',  \n        views.DroneCategoryDetail.as_view(), \n        name=views.DroneCategoryDetail.name), \n    url(r'^vehicles/$',  \n        views.DroneList.as_view(), \n        name=views.DroneList.name), \n    url(r'^vehicles/(?P<pk>[0-9]+)$',  \n        views.DroneDetail.as_view(), \n        name=views.DroneDetail.name), \n    url(r'^pilots/$',  \n        views.PilotList.as_view(), \n        name=views.PilotList.name), \n    url(r'^pilots/(?P<pk>[0-9]+)$',  \n        views.PilotDetail.as_view(), \n        name=views.PilotDetail.name), \n    url(r'^competitions/$',  \n        views.CompetitionList.as_view(), \n        name=views.CompetitionList.name), \n    url(r'^competitions/(?P<pk>[0-9]+)$',  \n        views.CompetitionDetail.as_view(), \n        name=views.CompetitionDetail.name), \n    url(r'^$', \n        views_v2.ApiRootVersion2.as_view(), \n        name=views_v2.ApiRootVersion2.name), \n] \n```", "```py\nfrom django.conf.urls import url, include \n\nurlpatterns = [ \n    url(r'^v1/', include('drones.urls', namespace='v1')), \n    url(r'^v1/api-auth/', include('rest_framework.urls', namespace='rest_framework_v1')), \n    url(r'^v2/', include('drones.v2.urls', namespace='v2')), \n    url(r'^v2/api-auth/', include('rest_framework.urls', namespace='rest_framework_v2')), \n] \n```", "```py\n    python manage.py runserver\n    python manage.py runserver 0.0.0.0:8000\n```", "```py\n    http :8000/v1/drone-categories/\n```", "```py\n    curl -iX GET localhost:8000/v1/drone-categories/\n```", "```py\n    HTTP/1.0 200 OK\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 670\n    Content-Type: application/json\n    Date: Sun, 03 Dec 2017 19:34:13 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n    \"count\": 2, \n    \"next\": null, \n    \"previous\": null, \n        \"results\": [\n            {\n                \"drones\": [\n    \"http://localhost:8000/v1/drones/6\", \n    \"http://localhost:8000/v1/drones/4\", \n    \"http://localhost:8000/v1/drones/8\", \n                    \"http://localhost:8000/v1/drones/10\"\n    ], \n    \"name\": \"Octocopter\", \n    \"pk\": 2, \n                \"url\": \"http://localhost:8000/v1/drone-categories/2\"\n    }, \n            {\n                \"drones\": [\n    \"http://localhost:8000/v1/drones/2\", \n    \"http://localhost:8000/v1/drones/9\", \n    \"http://localhost:8000/v1/drones/5\", \n    \"http://localhost:8000/v1/drones/7\", \n    \"http://localhost:8000/v1/drones/3\", \n    \"http://localhost:8000/v1/drones/12\", \n    \"http://localhost:8000/v1/drones/11\", \n                    \"http://localhost:8000/v1/drones/1\"\n    ], \n    \"name\": \"Quadcopter\", \n    \"pk\": 1, \n                \"url\": \"http://localhost:8000/v1/drone-categories/1\"\n            }\n        ]\n    }  \n```", "```py\n    http :8000/v2/vehicle-categories/\n```", "```py\n    curl -iX GET localhost:8000/v2/vehicle-categories/\n```", "```py\n    HTTP/1.0 200 OK\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 698\n    Content-Type: application/json\n    Date: Sun, 03 Dec 2017 19:34:29 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n    \"count\": 2, \n    \"next\": null, \n    \"previous\": null, \n        \"results\": [\n            {\n                \"drones\": [\n    \"http://localhost:8000/v2/vehicles/6\", \n    \"http://localhost:8000/v2/vehicles/4\", \n    \"http://localhost:8000/v2/vehicles/8\", \n                    \"http://localhost:8000/v2/vehicles/10\"\n    ], \n    \"name\": \"Octocopter\", \n    \"pk\": 2, \n                \"url\": \"http://localhost:8000/v2/vehicle-categories/2\"\n    }, \n            {\n                \"drones\": [\n    \"http://localhost:8000/v2/vehicles/2\", \n    \"http://localhost:8000/v2/vehicles/9\", \n    \"http://localhost:8000/v2/vehicles/5\", \n    \"http://localhost:8000/v2/vehicles/7\", \n    \"http://localhost:8000/v2/vehicles/3\", \n    \"http://localhost:8000/v2/vehicles/12\", \n    \"http://localhost:8000/v2/vehicles/11\", \n                    \"http://localhost:8000/v2/vehicles/1\"\n    ], \n    \"name\": \"Quadcopter\", \n    \"pk\": 1, \n                \"url\": \"http://localhost:8000/v2/vehicle-categories/1\"\n            }\n        ]\n    }\n```"]