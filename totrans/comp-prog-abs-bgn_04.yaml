- en: '*Chapter 3:* Types of Applications'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第三章：应用程序类型*'
- en: Computer programs, or applications as we sometimes call them, come in many types.
    Each type solves a special kind of problem. Some applications, such as a solitaire
    game or a word processor, just run on a local computer, and others need to communicate
    with other computers or networks to work, such as web browsers or email clients.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机程序，或者我们有时称之为应用程序，有多种类型。每种类型都解决一种特殊的问题。一些应用程序，如纸牌游戏或文字处理器，仅在本地计算机上运行，而其他应用程序则需要与其他计算机或网络通信才能工作，如网页浏览器或电子邮件客户端。
- en: In this chapter, we will look at some special types of applications and discuss
    what considerations we need to take when creating them.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨一些特殊类型的应用程序，并讨论在创建它们时我们需要考虑哪些因素。
- en: It would be impossible for us to cover all types of applications as there are
    way too many of them. Instead, we will look at some common types that we will
    encounter when writing our applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于应用程序种类繁多，我们不可能涵盖所有类型。相反，我们将查看一些我们在编写应用程序时可能会遇到的一些常见类型。
- en: We create programs to solve problems, and in the process of designing our application
    and deciding what it needs to do, we will often look at solutions others have
    found for similar problems. The goal of this chapter is to familiarize you with
    some of these solutions so you can recognize the problem they solve when, in the
    future, you need to create your own solutions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建程序是为了解决问题，在设计我们的应用程序并决定它需要做什么的过程中，我们经常会查看他人为类似问题找到的解决方案。本章的目标是使你熟悉这些解决方案中的一些，以便你可以在未来需要创建自己的解决方案时，识别出它们解决的问题。
- en: 'By the end of this chapter, you will be able to do the following:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够做到以下几点：
- en: Understand what is typical for the different types of applications that the
    chapter covers
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解本章涵盖的不同类型应用程序的典型特征
- en: Understand how the application type affects how we structure our applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解应用程序类型如何影响我们构建应用程序的方式
- en: Understand the importance of connected applications
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解连接型应用程序的重要性
- en: Understand the benefits of using cloud-based solutions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解使用基于云的解决方案的好处
- en: Understand the problems the different kinds of applications we talk about can
    solve
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解我们讨论的不同类型的应用程序可以解决的问题
- en: Standalone applications
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 独立应用程序
- en: A standalone application is a program that can work offline, that is, it does
    not necessarily require a network connection. Therefore, when writing such an
    application, we will need to provide all the resources the program will require.
    These resources can be images, such as icons used in the application, files to
    store program configuration, and so on.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 独立应用程序是一种可以离线工作的程序，也就是说，它不一定需要网络连接。因此，在编写此类应用程序时，我们需要提供程序所需的所有资源。这些资源可以是图像，例如应用程序中使用的图标，存储程序配置的文件等等。
- en: When learning to write applications, most of your programs will likely fall
    into this category. It is usually a rather straightforward affair to create these
    applications as we will not need to interact with other programs.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习编写应用程序时，你的大部分程序可能会落入这个类别。创建这些应用程序通常相当直接，因为我们不需要与其他程序交互。
- en: Examples of programs that fall into this category are text editors such as Notepad
    on Windows or TextEdit on Mac, simple games such as solitaire, and paint programs.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 属于这一类别的程序示例包括Windows上的记事本或Mac上的TextEdit这样的文本编辑器，简单的游戏如纸牌游戏，以及绘图程序。
- en: Client-server applications
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端-服务器应用程序
- en: Client-server is a model we can use to create distributed applications, which
    are applications that run on more than one machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端-服务器模型是我们可以使用来创建分布式应用程序的模型，这些应用程序在多台机器上运行。
- en: The idea behind the client-server model is that we have at least two computers
    involved. One acts as the server, and all the others have the role of the client.
    Clients and servers need to communicate with each other. It is always the client
    who initiates the communication. Sometimes the server communicates with several
    clients at once; other times, the server only communicates with a single client
    at a time.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端-服务器模型背后的理念是我们至少有两台计算机参与。一台充当服务器，其余的都扮演客户端的角色。客户端和服务器需要相互通信。总是客户端首先发起通信。有时服务器会同时与多个客户端通信；有时服务器一次只与一个客户端通信。
- en: This means that we can use different computers to take care of different parts
    of an application's responsibility. We can let one computer deal with one aspect
    of a problem and another computer work on a different aspect of the same problem.
    These two computers then need to communicate their results, usually to a single
    computer, which can then assemble the different results into one solution.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我们可以使用不同的电脑来处理应用程序责任的不同部分。我们可以让一台电脑处理问题的一个方面，而另一台电脑处理同一个问题的另一个方面。然后这两台电脑需要将它们的结果进行沟通，通常发送到一台电脑，这台电脑然后将不同的结果组合成一个解决方案。
- en: We can also use this model when we have different roles for different parts
    of an application. For example, we have one role that is to display data to and
    get input from a user (user interaction) and another role that is to process and
    store this data. We can divide these roles so the processing and storing role
    is done by one computer and the user interaction role by another computer.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为应用程序的不同部分有不同的角色时，我们也可以使用这个模型。例如，我们有一个角色是用来向用户显示数据和获取输入（用户交互），另一个角色是用来处理和存储这些数据。我们可以将这些角色分开，让处理和存储的角色由一台电脑完成，而用户交互的角色由另一台电脑完成。
- en: '![Figure 3.1 – A server connected to several clients](img/B15554_03_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – 连接到多个客户端的服务器](img/B15554_03_01.jpg)'
- en: Figure 3.1 – A server connected to several clients
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – 连接到多个客户端的服务器
- en: To illustrate this, let's take a couple of scenarios where we would use a client-server
    solution and see what the solutions would be.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这一点，让我们考虑几个我们会使用客户端-服务器解决方案的场景，并看看解决方案会是什么。
- en: Example of a chat application
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 聊天应用的示例
- en: Let's assume that you want to create an application where you and your friends
    can chat with each other. Everyone that will use this chat application will need
    the **client software**; this is the program we start when we want to chat.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你想创建一个应用程序，你和你朋友们可以在其中互相聊天。所有将使用这个聊天应用的人都需要**客户端软件**；这是我们想要聊天时启动的程序。
- en: When we start thinking about how to design this application, we will face our
    first problem. Imagine that you start your chat application because you want to
    chat with your friend Alice. Our application needs to connect to Alice's computer,
    running her version of our program. Both you and Alice will run identical programs,
    but how can they connect? How can our application find Alice's computer among
    all the computers connected to the internet? It would be like if you want to call
    Alice but don't have her phone number. Our chat application will be our phone,
    and Alice's client will be her phone. You can't just randomly enter a number in
    the hope of reaching Alice.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开始思考如何设计这个应用程序时，我们将面临我们的第一个问题。想象一下，你启动聊天应用是因为你想和你的朋友爱丽丝聊天。我们的应用需要连接到爱丽丝的电脑，运行她的程序版本。你和爱丽丝都将运行相同的程序，但它们如何连接？我们的应用如何在所有连接到互联网的电脑中找到爱丽丝的电脑？这就像你想给爱丽丝打电话，但没有她的电话号码一样。我们的聊天应用将是我们的电话，爱丽丝的客户端将是她的电话。你不能随意输入一个号码，希望联系到爱丽丝。
- en: '![Figure 3.2 – How can you find Alice''s computer when you want to chat?](img/B15554_03_02.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图3.2 – 当你想聊天时，如何找到爱丽丝的电脑？](img/B15554_03_02.jpg)'
- en: Figure 3.2 – How can you find Alice's computer when you want to chat?
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 当你想聊天时，如何找到爱丽丝的电脑？
- en: An IP address (**IP** is an abbreviation for **Internet Protocol** and is part
    of a larger protocol stack, called TCP/IP, that describes how computers communicate
    over the internet) identifies all computers and other devices connected to the
    internet. We can think of this address as a phone number. This number can uniquely
    identify a telephone anywhere in the world. The same is true for an IP address;
    it can uniquely identify any device that is connected to the internet.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一个IP地址（**IP**是**互联网协议**的缩写，是更大协议栈TCP/IP的一部分，该协议栈描述了计算机如何在互联网上通信）标识了所有连接到互联网的计算机和其他设备。我们可以把这个地址看作是一个电话号码。这个号码可以唯一地识别世界上任何地方的电话。IP地址也是一样；它可以唯一地识别任何连接到互联网的设备。
- en: The problem is, how can we know what address Alice's computer has? And even
    if we knew what it was, we must understand that it is subject to change. If she
    is connected to her home Wi-Fi network, she will have one IP address, but if she
    takes her computer to a café downtown and connects to their Wi-Fi network, she
    will get another IP address. This is because when connecting to a Wi-Fi network,
    it is the network router that assigns an IP address to your computer.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 问题在于，我们如何知道爱丽丝的计算机的地址？即使我们知道它是什么，我们也必须理解它可能会改变。如果她连接到她的家庭Wi-Fi网络，她将有一个IP地址，但如果她带着她的计算机去市中心的一家咖啡馆并连接到他们的Wi-Fi网络，她将得到另一个IP地址。这是因为当连接到Wi-Fi网络时，是网络路由器为您的计算机分配IP地址。
- en: A better solution would be if all clients connected to a computer that always
    has the same address. This would be our `company.com` is easier to remember than
    an IP address.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更好的解决方案是，如果所有客户端都连接到一个始终具有相同地址的计算机。这将是我们`company.com`比IP地址更容易记住。
- en: '![Figure 3.3 – Using a server to handle the communication between you and Alice](img/B15554_03_03.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![图3.3 – 使用服务器来处理你与爱丽丝之间的通信](img/B15554_03_03.jpg)'
- en: Figure 3.3 – Using a server to handle the communication between you and Alice
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 使用服务器来处理你与爱丽丝之间的通信
- en: If more than two users are connected to the server, then the server will need
    to keep track of who is the recipient of the message. When you send your message
    to Alice, your client application will need to provide the identity of who should
    get the message so the server can make sure it is sent to the right client.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有超过两个用户连接到服务器，那么服务器将需要跟踪消息的接收者。当你向爱丽丝发送消息时，你的客户端应用程序需要提供应该接收消息的人的身份，以便服务器可以确保它被发送到正确的客户端。
- en: Example of an email client
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 邮件客户端的示例
- en: Assume that you have been using several different applications to read and write
    emails, but you are not happy with how they work and you decide to write your
    own. What you will write is an email client.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你已经使用了几种不同的应用程序来阅读和编写邮件，但你对他们的工作方式不满意，你决定编写自己的。你将编写的是一个邮件客户端。
- en: Let's take our friend Alice again. What happens if she sends you an email? Your
    emails must be stored somewhere as you can't have your client application running
    all the time. The email Alice sends to you will end up on an **email server**.
    When you start the email client you wrote, it will connect to the server and ask
    for all new emails that have been received since the last time you connected.
    These will now be transferred to your client application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再次以我们的朋友爱丽丝为例。如果她给你发邮件会发生什么？你的邮件必须存储在某处，因为你不能一直运行客户端应用程序。爱丽丝发给你的邮件最终会落在**邮件服务器**上。当你启动你编写的邮件客户端时，它将连接到服务器并请求自上次连接以来收到的所有新邮件。这些现在将被传输到你的客户端应用程序。
- en: '![Figure 3.4 – An email server will handle incoming and outgoing emails,'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '![图3.4 – 邮件服务器将处理传入和传出的邮件，'
- en: and the client only connects to receive and transmit messages](img/B15554_03_04.jpg)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 并且客户端只连接以接收和发送消息](img/B15554_03_04.jpg)
- en: Figure 3.4 – An email server will handle incoming and outgoing emails, and the
    client only connects to receive and transmit messages
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 邮件服务器将处理传入和传出的邮件，客户端只连接以接收和发送消息
- en: Client-server, a two-part solution
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 客户端-服务器，一个两部分的解决方案
- en: In both these examples, we saw that the solution to a problem is divided into
    two parts. We need one part that will be the client, and the other will be the
    server. The characteristics of these two are that we have a server with its location
    known by its IP address, and we will have a client that will know about the server
    address and will be the part that initiates the communication. An IP address can
    also be in the form of a domain name, such as [http://some-server.com](http://some-server.com).
    A domain name is a one-to-one mapping between an IP address and a name. In other
    words, a domain name is tied to one single IP address and is used because it is
    easier to remember a domain name than an IP address that is just four numbers
    in the form `123.123.123.123`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个例子中，我们看到解决问题的方案分为两部分。我们需要一部分是客户端，另一部分是服务器。这两个的特点是我们有一个服务器，其位置通过IP地址为人所知，我们将有一个客户端，它将知道服务器地址，并将是发起通信的部分。IP地址也可以是域名形式，例如[http://some-server.com](http://some-server.com)。域名是IP地址和名称之间的一对一映射。换句话说，域名绑定到一个单一的IP地址，并且使用它是因为域名比只有四个数字的IP地址（形式为`123.123.123.123`）更容易记住。
- en: This format is true for the version of IP addresses called `2001:db8:a0b:12f0::1`.
    These numbers are separated by colon instead of a period. In IPv4 the address
    was represented as a 32-bit value, and in IPv6 it is 128 bits. This means that
    we have many more addresses to distribute.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式适用于称为`2001:db8:a0b:12f0::1`的IP地址版本。这些数字由冒号而不是点分隔。在IPv4中，地址被表示为32位值，而在IPv6中是128位。这意味着我们有更多的地址可以分配。
- en: Sometimes these two roles are only distinct for how the two parts will connect;
    the client connects to the server, and when the connection is made, they can act
    as two identical parts. If we take the chat application as an example, if we knew
    Alice's address, we could connect directly to her application. Our application
    will initially be the client, and Alice's application would act as the server.
    But as soon as we have a connection, both parts will act in the same way, and
    the roles of who is the client and who is the server will be unimportant.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这两个角色仅因连接方式的不同而有所区别；客户端连接到服务器，一旦建立连接，它们可以充当两个相同的部分。如果我们以聊天应用为例，如果我们知道爱丽丝的地址，我们就可以直接连接到她的应用。我们的应用最初是客户端，而爱丽丝的应用将充当服务器。但一旦我们建立了连接，两个部分将以相同的方式行动，客户端和服务器的作用将不再重要。
- en: Next, we move to understanding web applications.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将转向理解网络应用。
- en: Web applications
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络应用
- en: A web application is a special form of client-server application where we have
    a client that interacts with a user in the form of a web page. The server is responsible
    for producing the results the user will see and to accept and process the input
    from the user.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用是一种特殊的客户端-服务器应用，其中我们有一个以网页形式与用户交互的客户端。服务器负责生成用户将看到的结果，并接受和处理用户的输入。
- en: 'This process works something like this:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程大致是这样的：
- en: Imagine that you visit a website and are prompted to log in. You enter your
    username and password. When you press the **Log in** button, the information you
    entered is sent to the server:![Figure 3.5 – When logging in to a web application,
    your credentials will be sent to the server](img/B15554_03_05.jpg)
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 想象一下，你访问一个网站并被提示登录。你输入用户名和密码。当你按下**登录**按钮时，你输入的信息会被发送到服务器：![图3.5 – 在登录网络应用时，你的凭证将被发送到服务器](img/B15554_03_05.jpg)
- en: Figure 3.5 – When logging in to a web application, your credentials will be
    sent to the server
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.5 – 在登录网络应用时，你的凭证将被发送到服务器
- en: The server requests the information stored in a database about this user:![Figure
    3.6 – The web server requests the user information stored in a database](img/B15554_03_06.jpg)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器请求存储在数据库中关于此用户的信息：![图3.6 – 网络服务器请求存储在数据库中的用户信息](img/B15554_03_06.jpg)
- en: Figure 3.6 – The web server requests the user information stored in a database
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.6 – 网络服务器请求存储在数据库中的用户信息
- en: The database returns the information it has for this user. Note that usually,
    the password will not be stored in plain text as illustrated here, but for clarity,
    we ignore that in this scenario:![Figure 3.7 – The database returns the information](img/B15554_03_07.jpg)
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数据库返回它为此用户拥有的信息。请注意，通常密码不会以这里所示的方式以纯文本形式存储，但为了清晰起见，我们在这个场景中忽略这一点：![图3.7 – 数据库返回信息](img/B15554_03_07.jpg)
- en: Figure 3.7 – The database returns the information
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图3.7 – 数据库返回信息
- en: 'The server application now verifies that the username and password are correct.
    If they are, it then produces a web page for this user and transmits it to the
    client''s computer so that a web browser running on this computer can display
    this page:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 服务器应用现在验证用户名和密码是否正确。如果是，它将生成一个供此用户使用的网页并将其传输到客户端的计算机，以便在该计算机上运行的网页浏览器可以显示此页面：
- en: '![Figure 3.8 – The server produces a web page and transmits it to the client](img/B15554_03_08.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图3.8 – 服务器生成网页并将其传输到客户端](img/B15554_03_08.jpg)'
- en: Figure 3.8 – The server produces a web page and transmits it to the client
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 服务器生成网页并将其传输到客户端
- en: Let's see what this means if we want to create our very own social network.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要创建自己的社交网络，让我们看看这代表什么。
- en: Example of a social network
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 社交网络的例子
- en: You would need to create both the client and the server part of this application.
    First, the user needs to log in. To do this, the client will ask the user for
    their credentials. The client will then send the username and password to the
    server, and the server will verify if the information is correct. The result will
    be sent back to the client. If the login fails, the user will be asked to try
    again. If it is successful, the user will see the main window with all the posts
    from friends and relatives.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要创建这个应用程序的客户端和服务器部分。首先，用户需要登录。为此，客户端会要求用户提供他们的凭证。然后客户端将用户名和密码发送到服务器，服务器将验证信息是否正确。结果将发送回客户端。如果登录失败，用户将被要求重试。如果成功，用户将看到包含所有朋友和亲戚帖子的主窗口。
- en: It might feel like there is some magic going on here, because how did we get
    the most recent post your uncle did 5 minutes ago on the other side of the world?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可能感觉有些魔法在起作用，因为我们是怎样得到您叔叔在地球另一端5分钟前发布的最新帖子的？
- en: 'Your uncle uses his client to create his post. The information about this post
    is sent to the server, which stores it in a database. When you log in, the server
    asks the database for all users you are connected to, and among them, it finds
    your uncle. Then the server checks if your uncle has made any recent posts and
    then finds his post. This post is now part of the result, together with posts
    from other friends, that is sent to you:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您的叔叔使用他的客户端创建帖子。关于这条帖子的信息被发送到服务器，服务器将其存储在数据库中。当您登录时，服务器会向数据库请求您所有联系的用户，其中就包括您的叔叔。然后服务器检查您的叔叔是否发布了任何最近的帖子，并找到他的帖子。现在这条帖子已经成为结果的一部分，与其他朋友的帖子一起发送给您：
- en: '![Figure 3.9 – Your uncle posts a new status update that gets included in your
    feed](img/B15554_03_09.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![图3.9 – 您的叔叔发布了一条新的状态更新，该更新被包含在您的动态中](img/B15554_03_09.jpg)'
- en: Figure 3.9 – Your uncle posts a new status update that gets included in your
    feed
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.9 – 您的叔叔发布了一条新的状态更新，该更新被包含在您的动态中
- en: Next, we will see how these apps are unique.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到这些应用程序的独特之处。
- en: What makes web applications unique?
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么使得网络应用程序独特？
- en: As we have seen, a web application is more-or-less just a client-server solution,
    but there is a twist that makes it not just a client-server application, and that
    is how the client interacts with the user.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，网络应用程序基本上就是一个客户端-服务器解决方案，但有一个转折使得它不仅仅是一个客户端-服务器应用程序，那就是客户端如何与用户交互。
- en: If we think back to the client-server applications we talked about previously,
    the chat and email programs had been designed as *standalone applications*. This
    means that we have a program on our computer that we can start. That is not the
    case for our social network application. When users want to access it, they will
    start a web browser and navigate to the server's address. We can say that the
    web browser is a general-purpose client as it is not made to serve one solution
    but can be used to access any page on the web, our social network being one of
    them.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾之前讨论过的客户端-服务器应用程序，聊天和电子邮件程序已经被设计成*独立应用程序*。这意味着我们可以在电脑上启动一个程序。我们的社交网络应用程序并非如此。当用户想要访问它时，他们会启动一个网络浏览器并导航到服务器的地址。我们可以说网络浏览器是一个通用客户端，因为它不是为了服务一个特定的解决方案而制作的，而是可以用来访问网络上的任何页面，我们的社交网络只是其中之一。
- en: We will still need to design what this page will look like and what information
    will be displayed to the user, but the client usually has very little program
    logic built into it. The logic of our application is done on the server side,
    and it's the server that will produce the pages the user sees. They are transmitted
    to the client, which is the user's web browser, which then displays the result.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要设计这个页面将如何呈现以及将向用户展示哪些信息，但客户端通常包含很少的程序逻辑。我们应用程序的逻辑是在服务器端完成的，是服务器将生成用户看到的页面。这些页面被传输到客户端，即用户的网络浏览器，然后浏览器显示结果。
- en: Next, we'll look at mobile applications.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨移动应用程序。
- en: Mobile applications
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用程序
- en: When we talk about a mobile application, we usually mean a program that is designed
    to run on a mobile device, such as a smartphone. These devices have some special
    characteristics that we need to consider when writing an application. First, their
    screen is smaller than a computer monitor. The screen can also be rotated in landscape
    or portrait orientation. We will also use the touchscreen of the device for input.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们谈论移动应用程序时，我们通常指的是设计在移动设备上运行的程序，例如智能手机。这些设备有一些特殊特性，我们在编写应用程序时需要考虑。首先，它们的屏幕比计算机显示器小。屏幕还可以在横向或纵向方向旋转。我们还将使用设备的触摸屏进行输入。
- en: The mobile application might also use other features of the device, such as
    the GPS, sending text messages, or sensing the movement of the device using its
    accelerometer. These are things we usually can't do if an application runs on
    a normal computer.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序可能还会使用设备的其他功能，例如GPS、发送短信或使用加速度计感应设备的移动。这些是我们通常在应用程序在普通计算机上运行时无法做到的事情。
- en: A mobile application can be connected, but it does not have to be. Being connected
    means that it can communicate with another computer, maybe using the client-server
    techniques we discussed earlier.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 移动应用程序可以是连接的，但不必是。连接意味着它可以与另一台计算机通信，可能使用我们之前讨论过的客户端-服务器技术。
- en: When writing a mobile application, the platform the application will run on
    is very important. The reason is that the programs we write need to interact with
    the device more directly. This means is that it can dictate what programming language
    we will use to write these applications. The developers of the operating systems
    for mobile devices have some preferred programming languages. For iOS, Apple's
    operating system for mobile devices uses two languages, the old Objective-C and
    the new Swift. These are two languages you will hardly ever encounter if you are
    not creating applications for Apple devices. For the Android operating system,
    the preferred language used to be Java, but Google, which is the company behind
    Android, changed this in 2019 and now use a language called Kotlin as the preferred
    development language.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写一个移动应用程序时，应用程序将要运行的平台非常重要。原因是我们所编写的程序需要更直接地与设备交互。这意味着它将决定我们将使用什么编程语言来编写这些应用程序。移动设备的操作系统开发者有一些首选的编程语言。对于iOS，苹果的移动设备操作系统使用两种语言，旧有的Objective-C和新的Swift。如果你不是为苹果设备创建应用程序，你几乎不会遇到这两种语言。对于Android操作系统，首选的语言曾经是Java，但Android背后的公司谷歌在2019年改变了这一点，现在使用一种称为Kotlin的语言作为首选的开发语言。
- en: Having a preferred language for these systems does not mean that we can't use
    other languages. Still, Apple and Google recommend using these languages, so it
    is usually easier for us to use these languages when developing mobile applications.
    The reason is that the tools we use when writing our programs will be better suited
    to them than any other language.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些系统有一个首选语言并不意味着我们不能使用其他语言。然而，苹果和谷歌推荐使用这些语言，因此在我们开发移动应用程序时通常更容易使用这些语言。原因是我们在编写程序时使用的工具将更适合它们，而不是任何其他语言。
- en: Next, we look at distributed applications.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看分布式应用程序。
- en: Distributed applications
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 分布式应用程序
- en: A distributed application is an application that does not run on one single
    machine, but instead lets different parts of the program run on multiple computers
    that communicate with each other over a network. This might sound like the client-server
    solutions we talked about earlier, but here we don't have the distinct roles of
    a client and a server.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式应用程序是一种不运行在单一机器上的应用程序，而是让程序的不同部分在通过网络相互通信的多台计算机上运行。这听起来可能像是我们之前讨论过的客户端-服务器解决方案，但在这里我们没有客户端和服务器之间的明确角色。
- en: There could be several reasons to use this solution. One may be that what we
    are doing requires so much computing power that a single computer will not be
    enough. The idea is to use the computing power of many computers and distribute
    the calculations to all of them, letting each computer work on a small section
    of the problem and communicate the results to the other machines in the network.
    This will give us something of a *supercomputer* that will act as a very powerful
    single machine running a single application, when it is actually thousands of
    computers running small individual parts of the application.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种解决方案可能有几个原因。其中一个可能是因为我们所做的事情需要如此多的计算能力，以至于一台电脑是不够的。想法是使用多台电脑的计算能力，并将计算分配给所有这些电脑，让每台电脑处理问题的一个小部分，并将结果传达给网络中的其他机器。这将给我们带来某种*超级计算机*的感觉，它将作为一个运行单个应用程序的非常强大的单一机器运行，而实际上它是由成千上万台电脑运行应用程序的小部分。
- en: Let's explore distributed applications in more detail.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地探讨分布式应用程序。
- en: SETI@home
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SETI@home
- en: An example of a project that uses this technique is **SETI** (short for **Search
    for Extraterrestrial Intelligence**), a scientific project trying to find extraterrestrial
    intelligence in outer space. To do this, they use radio telescopes to collect
    lots of data. The problem is that all this data needs to be analyzed in the search
    for a signal that can be of intelligent origin. The solution they use is to let
    people help them out either by installing a screensaver on their computer or a
    special program that will use the computing power of that computer when it is
    not used for any other task. By doing this, they will have the power of all these
    computers to do the analysis, and they will report back the result of the part
    of the data that was assigned to them.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种技术的项目示例是**SETI**（代表**搜寻外星智慧**），这是一个试图在太空中寻找外星智慧的科学项目。为了做到这一点，他们使用射电望远镜收集大量数据。问题是所有这些数据都需要被分析，以寻找可能具有智能起源的信号。他们使用的解决方案是让人们通过在他们的电脑上安装屏幕保护程序或一个特殊程序来帮助他们，该程序将在电脑不用于其他任务时使用该电脑的计算能力。通过这样做，他们将拥有所有这些电脑的力量来进行分析，并将分配给他们的数据部分的分析结果报告回来。
- en: 'You can try this out yourself by visiting [https://setiathome.berkeley.edu/](https://setiathome.berkeley.edu/)
    and installing the program:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过访问 [https://setiathome.berkeley.edu/](https://setiathome.berkeley.edu/)
    并安装程序来亲自尝试：
- en: '![Figure 3.10 – SETI@home analyzing data. Copyright 2019 UC Regents. Used with
    permission](img/B15554_03_010.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10 – SETI@home 分析数据。版权 2019 UC Regents。经许可使用](img/B15554_03_010.jpg)'
- en: Figure 3.10 – SETI@home analyzing data. Copyright 2019 UC Regents. Used with
    permission
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – SETI@home 分析数据。版权 2019 UC Regents。经许可使用
- en: Peer-to-peer networks
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对等网络
- en: 'A **peer-to-peer** network, also known as **P2P**, is a network of computers
    that are equal participants in the network. Each computer in the network is called
    a node, or a peer, and they make portions of their resources, such as processing
    power or disk storage, directly available to other participants in the network.
    This technique was popularized by file-sharing systems such as Napster in the
    late ''90s. A peer in the network is both a supplier and a consumer of resources.
    This is what makes this solution different from a traditional client-server model
    in which the supply and consumption of resources are divided between the server
    and the client:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**对等网络**，也称为**P2P**，是一个由计算机组成的网络，这些计算机是网络中的平等参与者。网络中的每台计算机被称为节点或对等节点，它们将部分资源，如处理能力或磁盘存储，直接提供给网络中的其他参与者。这种技术由90年代末的文件共享系统如Napster普及。网络中的对等节点既是资源的提供者也是消费者。这就是这种解决方案与传统客户端-服务器模型不同的地方，在传统客户端-服务器模型中，资源的供应和消费在服务器和客户端之间划分：'
- en: '![Figure 3.11 – A P2P network where computers, or peers, are connected without
    a server](img/B15554_03_011.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11 – 没有服务器的计算机或对等节点连接的P2P网络](img/B15554_03_011.jpg)'
- en: Figure 3.11 – A P2P network where computers, or peers, are connected without
    a server
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 没有服务器的计算机或对等节点连接的P2P网络
- en: Today, P2P networks are used by most cryptocurrencies making up a large portion
    of the blockchain industry (simply put, a blockchain is a database stored in separate
    copies on many nodes in a P2P network.). P2P is also used by web search engines,
    streaming platforms, and online marketplaces.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，P2P网络被大多数加密货币使用，占区块链行业很大一部分（简单来说，区块链是一个存储在P2P网络中多个节点上的数据库）。P2P也被用于网络搜索引擎、流媒体平台和在线市场。
- en: Next, we look at cloud-based applications.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们来看看云基础应用程序。
- en: Cloud-based applications
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云基础应用程序
- en: Cloud computing was first mentioned in 1996, but it was not until Amazon released
    its Elastic Compute Cloud in 2006 that it became widely popular. The idea behind
    cloud-based computing is to move away from the need to host your servers and other
    resources needed to run your project, and instead buy time from large data centers
    to use their computing power. There are many advantages to this. You don't have
    to make sure that your computers are up and running, that operating systems are
    updated, that you have implemented back-up solutions for your data, and so on.
    You can set up your server to be online, and then you can deploy your software
    on this server and run it from there.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算首次在1996年被提及，但直到2006年亚马逊发布了其弹性计算云服务，它才变得广受欢迎。云基础计算背后的理念是摆脱托管服务器和其他运行项目所需的资源的需要，而是从大型数据中心购买时间来使用他们的计算能力。这有很多优点。你不必确保你的计算机处于运行状态，操作系统已更新，你已经为你的数据实现了备份解决方案等等。你可以设置你的服务器保持在线，然后你可以在该服务器上部署你的软件并从那里运行它。
- en: The companies providing these services soon began to add other features that
    we can use as well. These are ready-made parts that we can use in our applications.
    What this means is that there will be parts of our application that we won't need
    to write ourselves. Instead, we can buy these ready-made parts from the provider
    and integrate them into our application that will run on a server, also provided
    by them.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 提供这些服务的企业很快就开始添加其他我们也可以使用的功能。这些是现成的组件，我们可以将其用于我们的应用程序中。这意味着我们的应用程序中将有部分组件我们不需要自己编写。相反，我们可以从提供商那里购买这些现成的组件，并将它们集成到他们提供的将运行在服务器上的应用程序中。
- en: 'There are many variations of this: we can buy a server, we might only buy storage,
    or we might buy one or more services that we will use, and these can then be combined
    in any way we want.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多变体：我们可以购买服务器，我们可能只购买存储，或者我们可能购买一个或多个我们将使用的服务，然后我们可以以任何我们想要的方式将它们组合起来。
- en: There are many reasons we would like to make our application using cloud-based
    resources. Let's look at some of them.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多原因希望使用云基础资源来开发我们的应用程序。让我们看看其中的一些。
- en: Advantages of adopting cloud-based applications
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 采用云基础应用程序的优势
- en: Here are a couple of reasons why using cloud-based applications is beneficial
    for us.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有几个原因说明为什么使用云基础应用程序对我们有益。
- en: Reduced costs
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成本降低
- en: By having our application on a cloud-based server, we will not need to buy a
    server computer, and we will not need to maintain this computer. We can pay for
    services so the cloud service provider will take care of ensuring that our server's
    operating system is updated and that security patches are installed as they are
    released.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在我们的云基础服务器上运行我们的应用程序，我们不需要购买服务器计算机，也不需要维护这台计算机。我们可以支付服务费用，这样云服务提供商就会负责确保我们的服务器的操作系统得到更新，并且安全补丁在发布时得到安装。
- en: If our application is storing data, we can let the provider take care of making
    backups, making sure we don't lose any data. We can also let these backups be
    stored at different locations in the world, so even if one of the data centers
    our provider is using gets destroyed or affected for some reason, our data will
    remain safe.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们的应用程序正在存储数据，我们可以让提供商负责备份，确保我们不会丢失任何数据。我们还可以让这些备份存储在世界各地的不同位置，这样即使我们的提供商使用的其中一个数据中心被摧毁或因某种原因受到影响，我们的数据仍然会保持安全。
- en: These are just two examples of how we can reduce our costs as the amount we
    pay to the cloud service provider will be drastically lower than if we had done
    all of this ourselves.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是我们如何降低成本的两个例子，因为我们支付给云服务提供商的费用将大大低于我们如果自己完成所有这些工作的情况。
- en: Scalability
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可扩展性
- en: Scalability is how we can adapt when the amount of work our application is doing
    changes. If we, for example, have a web application running and suddenly it gets
    very popular overnight, we might go from a couple of hundred users that are simultaneously
    connected to it to several thousand. If the hardware running our application is
    not capable of handling this growing popularity, our users will soon get tired
    of using it as they need to spend too much time waiting for a response from our
    application. If we manage the hardware ourselves, we will need to get more and
    better server computers, install our application on them, and make sure everything
    works. If the interest in our application then drops, we will now have invested
    in hardware we no longer need.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 可扩展性是指当我们的应用程序所做的工作量发生变化时，我们如何适应。例如，如果我们有一个正在运行的Web应用程序，并且突然一夜之间变得非常受欢迎，我们可能会从同时连接到它的几百个用户增加到几千个。如果运行我们应用程序的硬件无法处理这种日益增长的人气，我们的用户很快就会厌倦使用它，因为他们需要花费太多时间等待我们应用程序的响应。如果我们自己管理硬件，我们将需要获取更多更好的服务器计算机，将我们的应用程序安装在上面，并确保一切正常工作。如果对我们应用程序的兴趣下降，我们现在将投资于我们不再需要的硬件。
- en: If we, on the other hand, are using a cloud-based solution, we could, with a
    few clicks, pay to get more power to our servers. And if the demand drops, we
    can downgrade again and only pay for what we use. This process can also be automated,
    so the server hardware adapts to the demand.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用基于云的解决方案，我们只需点击几下，就可以付费让我们的服务器获得更多动力。如果需求下降，我们还可以降级，只为我们使用的部分付费。这个过程也可以自动化，因此服务器硬件可以适应需求。
- en: Cloud service models
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 云服务模型
- en: Cloud computing providers offer different services according to three different
    models. These models define what parts the provider will handle and what is handled
    by us, the creators of the application. These different models can also be viewed
    as different layers, so when deciding what we need for our application, we can
    pick things from all three layers.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算提供商根据三种不同的模型提供不同的服务。这些模型定义了提供商将处理哪些部分，以及我们，应用程序的创建者，将处理哪些部分。这些不同的模型也可以被视为不同的层，因此当我们决定我们的应用程序需要什么时，我们可以从这三个层中挑选东西。
- en: Let's look at these layers so that we understand what they can help us with.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看这些层，以便我们了解它们能帮助我们什么。
- en: Infrastructure as a Service (IaaS)
  id: totrans-109
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 基础设施即服务（IaaS）
- en: This is the layer that handles hardware resources such as servers, storage,
    firewalls, and so on. Investing in services on this layer means that you don't
    need to buy the hardware, you don't need to spend time on configuration, and space
    for data storage will be managed for you.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这是处理硬件资源，如服务器、存储、防火墙等的层。在这个层上投资服务意味着您不需要购买硬件，您不需要花费时间在配置上，数据存储空间将由您管理。
- en: 'Some examples when IaaS is a good option for us are as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 当IaaS对我们来说是一个好选择时，以下是一些例子：
- en: '**Big data**: More and more applications need a huge amount of data. This can,
    for example, be data used when training **artificial intelligence** (**AI**) applications
    or applications that rely on a significant amount of what is known as unstructured
    data (that is, images, email, or social media content, for example). These applications
    will need to handle large workloads that can change over time. IaaS gives us tools
    to add storage and processing power with a click of a button; in fact, this can
    even be automated to suit our needs.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**大数据**：越来越多的应用程序需要大量的数据。例如，这可以是用于训练人工智能（AI）应用程序或依赖于大量所谓非结构化数据（即图像、电子邮件或社交媒体内容等）的应用程序所使用的数据。这些应用程序将需要处理可能随时间变化的大工作量。IaaS为我们提供了点击即可添加存储和处理能力的工具；实际上，这甚至可以自动化以满足我们的需求。'
- en: '**Disaster recovery**: The most valuable asset we have in software is data,
    and we should always ensure that we can recover from a disaster. If we store copies
    of our data in different geographical locations, we can rest assured that we can
    recover it even if the worst happens. IaaS makes it easy and affordable to do
    this.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**灾难恢复**：我们在软件中最宝贵的资产是数据，我们应该始终确保我们能够从灾难中恢复。如果我们把我们的数据副本存储在不同的地理位置，我们可以放心，即使最坏的情况发生，我们也能恢复它。IaaS使得这样做既简单又经济。'
- en: '**Testing and development**: When developing applications, we often want to
    test them on different hardware configurations running different operating systems.
    Setting up different IaaS solutions is a cheap and easy way to do this.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试和开发**：在开发应用程序时，我们经常希望在不同硬件配置和不同操作系统上测试它们。设置不同的IaaS解决方案是一种既便宜又简单的方法。'
- en: Platform as a Service (PaaS)
  id: totrans-115
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 平台即服务（PaaS）
- en: In this layer, you will, among other things, find applications that will act
    as servers. Some examples are web servers that will handle web resources so users
    can access your website, and database servers that will manage storage and retrieval
    of data. This layer can also contain readily configured environments that are
    targeted to a programming language.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一层中，您会发现一些将充当服务器的应用程序。一些例子是处理网页资源的Web服务器，以及管理数据存储和检索的数据库服务器。这一层还可以包含针对特定编程语言的快速配置环境。
- en: This level builds upon the IaaS level, so usually, you get the benefits of that
    layer plus the things that are included in this layer.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 此级别建立在IaaS级别之上，因此通常，您将获得该层的优势以及本层包含的内容。
- en: 'Here''s some examples of some benefits of using PaaS:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些使用PaaS的一些好处示例：
- en: '**Faster time to market**: Going from an idea to a product that we can start
    to earn money from is essential when developing software. Using PaaS will dramatically
    reduce the time for acquiring hardware and installing and configuring software.
    There are examples of start-up companies that had an idea on Friday and a product
    that could be used on the next Monday. This can be made possible with the help
    of PaaS.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缩短上市时间**：当开发软件时，从想法到可以开始赚钱的产品是至关重要的。使用PaaS将大大减少获取硬件、安装和配置软件的时间。有例子表明，初创公司在周五有了想法，在下周一下午就能使用产品。这可以通过PaaS的帮助实现。'
- en: '**Reduced costs**: Without the need to invest time and money acquiring hardware,
    configuring it, installing software, and ensuring all software is updated, our
    costs will be greatly reduced. The time we save can instead be used to develop
    our product.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**降低成本**：无需投资时间和金钱购买硬件、配置它、安装软件以及确保所有软件更新，我们的成本将大幅降低。我们节省的时间可以用来开发我们的产品。'
- en: Software as a Service (SaaS)
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 软件即服务（SaaS）
- en: This layer will provide you with everything—the hardware, the server software,
    as well as applications—and the only thing you need to do is to configure it to
    work the way you want it to. A well-known example of SaaS is the array of Google
    apps. These are the applications provided by Google, such as Docs, Sheets, and
    Calendar.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这一层将为您提供一切——硬件、服务器软件以及应用程序——您唯一需要做的就是配置它以您想要的方式工作。SaaS的一个著名例子是谷歌应用系列。这些都是谷歌提供的应用程序，例如文档、表格和日历。
- en: 'Here''s some examples of why you may want to use SaaS:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些您可能想要使用SaaS的原因示例：
- en: '**Less maintenance of office software**: When running a business, we need to
    provide email addresses to all our employees; we need to provide them with office
    applications such as word processors, spreadsheet applications, and presentation
    software. If we let someone else handle the installation, configuration, and updates,
    and reduce the time we spend on handling software licenses, we will free up resources
    and save money.'
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**减少办公软件的维护**：在经营业务时，我们需要为所有员工提供电子邮件地址；我们需要为他们提供办公应用程序，如文字处理器、电子表格应用程序和演示软件。如果我们让其他人处理安装、配置和更新，并减少我们在处理软件许可证上花费的时间，我们将释放资源并节省金钱。'
- en: '**Sharing information**: Using services such as cloud storage will make it
    easier to share files and documents between co-workers and customers.'
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**共享信息**：使用云存储等服务将使员工和客户之间共享文件和文档变得更加容易。'
- en: This completes our coverage of all the pertinent cloud service models.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对所有相关云服务模型的覆盖。
- en: 'As a software developer, you will most likely work on the PaaS layer as it
    is the one providing the tools we need to develop our applications:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 作为软件开发人员，您最有可能在PaaS层工作，因为它提供了我们开发应用程序所需的工具：
- en: '![Figure 3.12 – What the different cloud system layers handle](img/B15554_03_012.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图3.12 – 不同云系统层处理的内容](img/B15554_03_012.jpg)'
- en: Figure 3.12 – What the different cloud system layers handle
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.12 – 不同云系统层处理的内容
- en: Other advantages of cloud-based solutions
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 云端解决方案的其他优势
- en: 'These are just some examples of the advantages we get from using cloud-based
    solutions. In a 2017 article, The *Business Journal* lists what they think are
    the five biggest benefits of cloud-based solutions. They are as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们从使用云端解决方案中获得的一些优势示例。在2017年的一篇文章中，《商业杂志》列出了他们认为的云端解决方案的五大好处。具体如下：
- en: Boost cost efficiency
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提高成本效益
- en: Provide flexible pay options
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供灵活的支付选项
- en: Promote collaboration
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 促进协作
- en: Increase mobility
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 增加移动性
- en: Aid in disaster recovery
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助灾难恢复
- en: If you search the web for the benefits of moving to the cloud, you will find
    similar lists. Some will also add environmental advantages.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在网上搜索迁移到云端的益处，你会找到类似的列表。有些人还会添加环境优势。
- en: We should also consider that there are risks of using cloud-based solutions.
    The major one is the security and personal integrity issues that can be hard to
    handle when you don't have full control over where and how the data is stored.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还应该考虑使用基于云的解决方案的风险。主要的风险是安全和个人隐私问题，当你没有完全控制数据存储的位置和方式时，这些问题可能很难处理。
- en: Next, let's look at some other types of applications.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们看看其他类型的应用程序。
- en: Other types of applications
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他类型的应用程序
- en: Of course, we have several other categories that software can fall into. Let's
    look at some of them.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们还有几个其他软件可能归属的类别。让我们看看其中的一些。
- en: Systems software
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统软件
- en: The software in this category helps the user, applications, and computer hardware
    to interact and function together. These applications create an environment that
    other programs can work in. When a computer is powered on, the first thing that
    is loaded into the computer's memory is system software applications. They will
    mostly run in the background, even if some of them can have a visual user interface.
    Because these programs work directly with the computer's hardware, they are often
    referred to as **low-level software**.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这类软件帮助用户、应用程序和计算机硬件相互交互并协同工作。这些应用程序创建了一个其他程序可以工作的环境。当计算机开机时，首先加载到计算机内存中的是系统软件应用程序。它们大多数将在后台运行，即使其中一些可以有可视化的用户界面。因为这些程序直接与计算机硬件工作，它们通常被称为**低级软件**。
- en: The most well-known type of application we find in this category is operating
    systems. As we saw in [*Chapter 1*](B15554_01_Final_NM_ePub.xhtml#_idTextAnchor016),
    *Introduction to Computer Programs*, they let other software run and take care
    of the direct communication with the hardware.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类别中，我们发现的是操作系统。正如我们在[*第一章*](B15554_01_Final_NM_ePub.xhtml#_idTextAnchor016)，*计算机程序简介*中看到的，它们让其他软件运行并处理与硬件的直接通信。
- en: 'The most well-known operating systems for desktop computers and laptops are
    as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面计算机和笔记本电脑最著名的操作系统如下：
- en: Microsoft Windows
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软Windows
- en: macOS and macOS X (for Apple devices)
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: macOS和macOS X（适用于苹果设备）
- en: Linux
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Linux
- en: 'For smartphones and tablets, we have the following operating systems:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于智能手机和平板电脑，我们有以下操作系统：
- en: Android
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安卓
- en: iOS (for Apple devices)
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: iOS（适用于苹果设备）
- en: Microsoft Windows Mobile
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 微软Windows Mobile
- en: Programming software
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程软件
- en: In this category, we find the tools and applications used by programmers when
    they write and test software. First, we need the programs that are the actual
    language the programmers use. To be able to write a program in C++, Java, Python,
    or any other language, we must first install the software that will take care
    of the translation of the source code into machine code (see [*Chapter 2*](B15554_02_Final_NM_ePub.xhtml#_idTextAnchor029),
    *Introduction to Programming Languages*).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类别中，我们找到了程序员在编写和测试软件时使用的工具和应用程序。首先，我们需要的是程序员实际使用的程序。要能够用C++、Java、Python或任何其他语言编写程序，我们必须首先安装将负责将源代码翻译成机器码的软件（参见[*第二章*](B15554_02_Final_NM_ePub.xhtml#_idTextAnchor029)，*编程语言简介*)）。
- en: A programmer often uses specialized text editors that will assist them when
    writing code. Some programs are even more advanced and will provide not only an
    editor for writing the code but a range of other built-in tools that are useful
    to have access to when writing programs. These are called **Integrated Development
    Environments** (**IDEs**). An example of a built-in tool is a debugger, which
    is a program that will help the programmer to find errors in the code.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员通常会使用专门的文本编辑器，这些编辑器在编写代码时会帮助他们。有些程序甚至更先进，不仅提供编写代码的编辑器，还提供一系列其他内置工具，这些工具在编写程序时非常有用。这些被称为**集成开发环境**（**IDEs**）。内置工具的一个例子是调试器，它是一个帮助程序员找到代码中错误的程序。
- en: Serverless applications
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无服务器应用程序
- en: A serverless application is a specialized variant of cloud-based applications.
    It can come in several different forms. Common to all these variants is that the
    cloud provider runs the servers needed, and dynamically manages all the resources
    the application needs. What this means is that we, for example, will not need
    to buy storage of a fixed size. The provider will add more storage as we need
    it, and we will pay for the storage we use. We can compare this to a scenario
    where if our hard disk is full, it just keeps increasing its storage capacity
    to meet our needs for more space.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 无服务器应用程序是基于云应用程序的一种特殊变体。它可以以几种不同的形式出现。所有这些变体共同的特点是云服务提供商运行所需的服务器，并动态管理应用程序所需的所有资源。这意味着，例如，我们不需要购买固定大小的存储。提供商将根据我们的需求添加更多存储，我们将为使用的存储付费。我们可以将此与我们的硬盘已满时，它只是不断增加其存储容量以满足我们对更多空间需求的情况进行比较。
- en: This kind of software is interesting if you want to automate the maintenance
    of servers, storage, and other aspects of your infrastructure. These solutions
    are *intelligent*, so they can adapt to changes, for example, by giving us more
    storage when we need and reducing it again when the need drops.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要自动化服务器、存储和其他基础设施方面的维护，这类软件很有趣。这些解决方案是*智能的*，因此它们可以适应变化，例如，在我们需要时提供更多存储，并在需求下降时再次减少。
- en: Summary
  id: totrans-159
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have talked about some typical types of applications and
    what makes them special.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了一些典型的应用程序类型以及它们的特点。
- en: We learned what a standalone application is and that this is the first type
    of application you will write when learning to program. After that, we looked
    at different types of applications that, in one way or the other, were divided
    to run parts of the program on different computers, and we saw that the parts
    communicate with each other.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了什么是独立应用程序，以及这是你在学习编程时将编写的第一种类型的应用程序。之后，我们探讨了不同类型的应用程序，这些应用程序以某种方式被划分为在不同的计算机上运行程序的部分，并且我们看到了这些部分是如何相互通信的。
- en: We learned that a web application runs on a server but communicates with its
    users through web pages. We saw that mobile applications are special in that they
    can take advantage of the features of modern mobile devices including smartphones
    and tablets, such as the GPS and the camera.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们了解到，一个网络应用程序运行在服务器上，但通过网页与用户进行通信。我们看到了移动应用程序的特殊之处，它们可以利用现代移动设备（如智能手机和平板电脑）的功能，例如GPS和摄像头。
- en: Another category of applications is those that need lots of computing power
    and let many computers share the workload and perform parts of the computing.
    These are often referred to as distributed applications. Then we looked at a category
    that is growing fast, and that is cloud-based applications. The benefit of using
    these services is that it is usually much cheaper and more secure than if we manage
    everything ourselves.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 另一类应用程序是需要大量计算能力，并让许多计算机分担工作负载和执行计算部分的应用程序。这些通常被称为分布式应用程序。然后我们看了一个增长迅速的类别，那就是基于云的应用程序。使用这些服务的优点是，通常比我们自行管理要便宜得多，也更安全。
- en: 'Finally, we talked about a couple of other categories: system software, programming
    software, and serverless applications.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了其他几个类别：系统软件、编程软件和无服务器应用程序。
- en: All software will need to be written by programmers and, in this chapter, we
    saw that applications can come in many forms. You have different resources available
    to suit your application development needs. As a developer, you can specialize
    in one or a couple of categories, or you can choose to jump between technologies.
    No matter what you choose, the challenges will be very different depending on
    what type of application you are currently developing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 所有软件都需要程序员编写，在本章中，我们看到了应用程序可以以许多形式出现。你有不同的资源可供选择，以满足你的应用程序开发需求。作为一名开发者，你可以专注于一个或几个类别，或者你可以选择在技术之间跳转。无论你选择什么，你所面临的挑战将非常不同，这取决于你目前正在开发的应用程序类型。
- en: In the next chapter, we will take a closer look at what a software project is
    and how we can structure our code as our projects get larger. We will also talk
    about some details that have to do with problems we might run into as our projects
    grow, and how we can resolve those issues.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地探讨软件项目是什么以及我们如何随着项目规模的扩大来组织我们的代码。我们还将讨论一些与我们在项目增长过程中可能遇到的问题有关的一些细节，以及我们如何解决这些问题。
