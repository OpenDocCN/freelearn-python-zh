- en: Chapter 7. Testing on Mobile
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With the ever increasing number of mobile users all over the world, the adoption
    of smartphones and tablets has increased quite significantly. Mobile apps have
    penetrated consumer and enterprise markets replacing desktops and laptops with
    smart devices. Small businesses and large-scale enterprises have a great potential
    to use mobile as a channel to connect with users. There is a lot of effort being
    taken to build mobile-friendly websites and native applications to serve customers
    and employees. Testing these apps on various mobile platforms available in the
    market has become crucial. This chapter will teach you more on how to test mobile
    apps using Selenium WebDriver and more specifically using **Appium**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about:'
  prefs: []
  type: TYPE_NORMAL
- en: Testing mobile apps with Appium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing and setting up Appium
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and running tests for iOS on iPhone simulator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating and running tests for Android on a real device
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing Appium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appium is an open source test automation framework for testing native and hybrid
    mobile apps on iOS, Android, and Firefox OS platforms using the JSON wire protocol
    used by the Selenium WebDriver tests to communicate with the Selenium Server.
    Appium will replace the `iPhoneDriver` and `AndroidDriver` APIs in Selenium 2
    used for testing mobile web applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appium allows us to use and extend the existing Selenium WebDriver framework
    to build mobile tests. As it uses Selenium WebDriver to drive the tests, we can
    use any language to create tests for which the Selenium client library exists.
    Here is the Appium coverage map with support for different platforms and application
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introducing Appium](img/3506OS_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Appium supports testing of the following types of apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Native apps**: Native apps are platform-specific apps built using the platform-supported
    languages and frameworks. For example, apps for iPhone and iPad are developed
    using Objective-C with iOS SDK; similarly, Android apps are developed using Java
    with Android SDK. In terms of performance, native apps are fast and more reliable.
    They use the native framework for the user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mobile web apps**: Mobile web apps are server-side apps, built with any server-side
    technology such as PHP, Java, or ASP.NET, and use frameworks such as jQuery Mobile,
    Sencha Touch, and so on to render a user interface that mimics the native UI.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hybrid apps**: Similar to the native apps, hybrid apps run on the device
    and are written with web technologies (HTML5, CSS, and JavaScript). Hybrid apps
    use the device''s browser engine to render the HTML and process the JavaScript
    locally inside a native container using WebView. This enables the app to access
    device capabilities that are not accessible in mobile web apps, such as the camera,
    accelerometer, sensors, and local storage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites for Appium
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before you get started with learning more about Appium, you will need some tools
    for iOS and Android platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Appium is built on Node.js and comes as a Node.js package as well as standalone
    GUI on Mac OS X and Windows. We will use Appium standalone GUI which comes with
    built-in Node.js on Mac OS X.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Xcode for iOS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We need Xcode 4.6.3 or higher, installed on Mac OS X, for testing apps for the
    iOS platform. While writing this book, Xcode 5.1 was used. You can get Xcode from
    the App Store or developer portal at [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing Xcode, launch it from the **Applications** menu and navigate
    to **Preferences** | **Downloads**, and install **Command Line Tools** and additional
    iOS SDKs for testing applications on different versions of the iOS platform, as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Xcode for iOS](img/3506OS_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For running tests on a real device, you need a provision profile installed on
    the device and USB debugging enabled on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Try to launch the iPhone simulator and verify that it works. You can launch
    the simulator by navigating to **Xcode** | **Open Developer Tool** | **iOS Simulator**.
    Launch Safari in the simulator and open the mobile web app version of the sample
    application [http://demo.magentocommerce.com](http://demo.magentocommerce.com)
    in Safari as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up Xcode for iOS](img/3506OS_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up Android SDK
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will need the Android SDK installed for testing Android apps. Android SDK
    is available for download at [http://developer.android.com/sdk/](http://developer.android.com/sdk/).
    This will get us the latest version of the SDK. After the installation, please
    make sure `ANDROID_HOME` is added to the path. Complete installation steps are
    available at [http://developer.android.com/sdk/installing/index.html?pkg=tools](http://developer.android.com/sdk/installing/index.html?pkg=tools).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For detailed and latest installation requirements visit [http://appium.io/getting-started.html#requirements](http://appium.io/getting-started.html#requirements).
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the Appium Python client package
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The Appium Python client was fully compliant with the Selenium 3.0 specification
    draft at the time of writing this book. It offers some helpers to make mobile
    testing in Python easier with Appium. This can be installed using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: More information on the Appium Python client package is available at [https://pypi.python.org/pypi/Appium-Python-Client](https://pypi.python.org/pypi/Appium-Python-Client).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Appium
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we start testing mobile apps with Appium, we need to download and install
    Appium. We will use the Appium GUI version. If you wish to run tests for iOS on
    iPhone or iPad, then you need to set up Appium on a Mac OS X machine. For testing
    Android applications, you can set up the environment on a Windows or Linux machine.
    Setting up Appium is fairly easy with the new Appium app for Mac OS X. You can
    download the latest Appium binaries from [http://appium.io/](http://appium.io/).
    Follow the given steps to install Appium:'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Download Appium** button on the front page and you will be directed
    to the download page.![Installing Appium](img/3506OS_07_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the version specific to the operating system you are using from the list
    as shown in the following screenshot:![Installing Appium](img/3506OS_07_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: In the following examples, we will be using Appium on Mac OS X.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can install Appium on Mac by launching the installer and copying Appium
    to the `Applications` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you launch Appium from the `Applications` menu for the first time, it will
    ask for authorization to run the iOS simulators.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: By default, Appium starts at `http://127.0.0.1:4723` or localhost. This is the
    URL to which your test should direct the test commands. We will be testing the
    mobile version of the sample application that we used in the book on iPhone Safari
    browser.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: On the main window of Appium, click on the Apple icon to open iOS settings:![Installing
    Appium](img/3506OS_07_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the **iOS Settings** dialog, select the **Force Device** checkbox and specify
    **iPhone 4s** in the iOS section. Also, select the **Use Mobile Safari** checkbox
    as shown in the following screenshot:![Installing Appium](img/3506OS_07_07.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Launch** button in the Appium window to start the Appium server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Appium Inspector
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Appium also comes with a spy tool called **Appium Inspector**. We can launch
    the Appium Inspector by clicking on the magnifying glass icon on Appium's main
    window.
  prefs: []
  type: TYPE_NORMAL
- en: The Inspector provides a lot of options to analyze the app under test. One of
    the main features it offers is how the UI elements are used in the app, the structure
    or hierarchy of the elements, and the properties of these elements, which we can
    use in defining the locator strings.
  prefs: []
  type: TYPE_NORMAL
- en: You can also simulate various gestures on the app and see their effect on the
    simulator. It also offers an ability to record the steps you perform on the app.
  prefs: []
  type: TYPE_NORMAL
- en: Testing on iOS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appium drives automation using various native automation frameworks and provides
    an API based on Selenium's WebDriver JSON wire protocol. For automating iOS applications,
    it uses the UI Automation feature offered as part of Apple Instruments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appium works as an HTTP server and receives the commands from test scripts
    over the JSON wire protocol. Appium sends these commands to Apple Instruments
    so that the commands can be executed on the app launched in a simulator or real
    device. While doing so, Appium translates the JSON commands into UI Automation
    JavaScript commands that are understood by the Instruments. The Instruments take
    care of launching and closing the app in the simulator or device. This process
    is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing on iOS](img/3506OS_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a command is executed against the app on the simulator or device, the target
    app sends the response back to the Instruments, which then sends it back to Appium
    in the JavaScript response format. Appium translates the UI Automation JavaScript
    responses into Selenium WebDriver JSON wire protocol responses and sends them
    back to the test script.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a test for iOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we have the Appium running; let''s create a test that will check the search
    functionality in the iPhone Safari browser. Create a new test, `SearchProductsOnIPhone`,
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We need `RemoteWebDriver` to run the tests with Appium. However, for Appium
    to use the desired platform, we need to pass a set of desired capabilities as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The `desired_caps['device']` capability is used by Appium to decide on which
    the platform the test script should get executed. In this example, we used `iPhone
    Simulator`. For running tests on iPad, we can specify the iPad Simulator.
  prefs: []
  type: TYPE_NORMAL
- en: When running tests on a real device, we need to specify the value `iPhone` or
    `iPad` for device capability. Appium will pick the device that is connected to
    the Mac via USB.
  prefs: []
  type: TYPE_NORMAL
- en: The `desired_caps['version']` capability is the version of iPhone/iPad simulator
    that we want to use. In this example, iOS 7.1 simulator is used, which was the
    latest the version of iOS at the time of writing this book.
  prefs: []
  type: TYPE_NORMAL
- en: The last desired capability we used is `desired_caps['app']`, which is used
    by Appium to launch the target app. In this case, it will launch the Safari browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we need to connect to the Appium server using `RemoteWebDriver` and
    the desired capabilities that we need. This is done by creating an instance of
    `Remote` as shown in following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The rest of the test uses the Selenium API to interact with the mobile web version
    of the application. Run the test normally. You will see that Appium establishes
    a session with test scripts and launches the iPhone Simulator with the Safari
    app. Appium will execute all the test steps by running commands on the Safari
    app in the simulator window.
  prefs: []
  type: TYPE_NORMAL
- en: Testing on Android
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Appium drives the automation of Android applications using the UI Automator
    bundled with Android SDK. The process is quite similar to testing on iOS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appium works as an HTTP server and receives the commands from test scripts
    over JSON wire protocol. Appium sends these commands to the UI Automator so that
    they can be executed on the app launched in an emulator or real device. While
    doing so, Appium translates the JSON commands into the UI Automator Java commands
    that are understood by Android SDK. This process is shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Testing on Android](img/3506OS_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When a command is executed against the app on the emulator or device, the target
    app sends the response back to the UI Automator, which sends it back to Appium.
    It translates the UI Automator responses into Selenium WebDriver JSON wire protocol
    responses and sends them back to the test script.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a test for Android
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Testing apps on Android is pretty much similar to what we did for iOS. For Android,
    we will use a real device instead of an emulator (a simulator is called an emulator
    in the Android community). We will use the same application for testing in Chrome
    for Android.
  prefs: []
  type: TYPE_NORMAL
- en: For this example, I am using Samsung Galaxy S III handset. We need to install
    the Chrome browser on the device. You can get Google Chrome on the Play Store.
    Next, we need to connect the device to the machine where the Appium server is
    running.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will work on Android. Here, we will try to execute our test scripts
    on the Android real device. We need to make sure we have installed Chrome on our
    Android device and connect our device to our machine. Let''s run the following
    command to get a list of emulators or devices connected to the machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '**Android Debug** **Bridge** (**adb**) is a command-line tool available in
    Android SDK that lets you communicate with an emulator instance or the connected
    real device.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous command will display a list of all the Android devices that are
    connected to the host. In this example, we have connected to a real device that
    is listed as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a test for Android](img/3506OS_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s use the test that we created for iOS and modify it for Android. We will
    create a new test, `SearchProductsOnAndroid`. Copy the following code to the newly
    created test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we assigned the `desired_caps['device']` capability value to
    Android, which will be used by the Appium to run tests on Android.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we mentioned the Android Version 4.3 (Jelly Bean) in the `desired_caps['version']`
    capability. As we want to run tests in Chrome for Android, we mentioned Chrome
    in the `desired_caps['app']` capability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Appium will use the first device from the list of devices that adb returns.
    It will use the desired capabilities that we mentioned, launch the Chrome browser
    on the device, and start executing the test script commands, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a test for Android](img/3506OS_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is the screenshot of the test running on a real device:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing a test for Android](img/3506OS_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using Sauce Labs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We looked at Sauce Labs for cross-browser testing in [Chapter 6](ch06.html
    "Chapter 6. Cross-browser Testing"), *Cross-browser Testing*. Sauce also provides
    support for testing mobile applications using Appium. In fact, the Appium project
    is developed and supported by Sauce Labs. With minimal changes to the desired
    capabilities, we can run mobile tests in Sauce Labs with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: After running the mobile tests, we can see the results and video recording in
    the Sauce Labs dashboard. This saves a lot of effort and time in setting up Appium
    in the local environment with Sauce offering various combinations of SDKs and
    settings.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we recognized the need for testing apps on mobile devices.
    We looked at Appium, which is becoming a core feature of Selenium for testing
    mobile apps. We installed and set up Appium for testing a mobile version of the
    sample app.
  prefs: []
  type: TYPE_NORMAL
- en: We tested the mobile web application on the iPhone simulator and on the Android
    device. Using Appium, we can test various types of mobile applications and use
    any programming language that has a `WebDriver` client library.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn some good practices such as using `PageObjects`
    and data-driven tests with Selenium WebDriver.
  prefs: []
  type: TYPE_NORMAL
