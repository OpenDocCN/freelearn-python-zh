["```py\n >>> import tkinter, os, math, time, threading, pickle \n```", "```py\n>>> import pygame\n>>> pygame.version.ver \n```", "```py\nfrom tkinter import Tk\n\nPROGRAM_NAME = ' Explosion Drum Machine '\n\nclass DrumMachine:\n\n    def __init__(self, root):\n        self.root = root\n        self.root.title(PROGRAM_NAME)\n\nif __name__ == '__main__':\n    root = Tk()\n    DrumMachine(root)\n    root.mainloop()\n```", "```py\n{\n 'list_of_drum_files': a list of location of audio drum files,\n 'number_of_units': an integer, 'bpu': an integer,\n 'beats_per_minute' : an integer,'button_clicked_list' : a 2\n dimensional list of boolean values where True means button is\n clicked and false means button is not clicked in the pattern\n }\n\n```", "```py\n    def init_all_patterns(self):\n        self.all_patterns = [\n            {\n                'list_of_drum_files': [None] * MAX_NUMBER_OF_DRUM_SAMPLES,\n                'number_of_units': INITIAL_NUMBER_OF_UNITS,\n                'bpu': INITIAL_BPU,\n                'is_button_clicked_list':\n                self.init_is_button_clicked_list(\n                    MAX_NUMBER_OF_DRUM_SAMPLES,\n                    INITIAL_NUMBER_OF_UNITS * INITIAL_BPU\n                )\n            }\n            for k in range(MAX_NUMBER_OF_PATTERNS)]\n```", "```py\n    def init_is_button_clicked_list(self, num_of_rows, num_of_columns):\n        return [[False] * num_of_columns for x in range(num_of_rows)]\n```", "```py\nMAX_NUMBER_OF_PATTERNS = 10\nMAX_NUMBER_OF_DRUM_SAMPLES = 5\nINITIAL_NUMBER_OF_UNITS = 4\nINITIAL_BPU = 4\nINITIAL_BEATS_PER_MINUTE = 240\n```", "```py\ndef init_gui(self):\n   self.create_top_bar()\n   self.create_left_drum_loader()\n   self.create_right_button_matrix()\n   self.create_play_bar()\n```", "```py\nSpinbox(frame, from_=1, to=MAX_BPU, width=5,command=self.on_bpu_changed).grid(row=0, column=7)\n```", "```py\n self.beats_per_minute = INITIAL_BEATS_PER_MINUTE\n self.current_pattern_index = 0\n```", "```py\nfor i in range (MAX_NUMBER_OF_DRUM_SAMPLES):\n    # create compound button here\n    # create entry widgets here and keep reference to each entry widget in\n    #a list for future update of values\n```", "```py\nself.buttons = [[None for x in range(self.find_number_of_columns())] for x in range(MAX_NUMBER_OF_DRUM_SAMPLES)]\nfor row in range(MAX_NUMBER_OF_DRUM_SAMPLES):\n    for col in range(self.find_number_of_columns()):\n        self.buttons[row][col] = Button(right_frame,\n                 command=self.on_button_clicked(row, col))\n        self.buttons[row][col].grid(row=row, column=col)\n        self.display_button_color(row, col)\n```", "```py\n    def find_number_of_columns(self):\n        return int(self.number_of_units_widget.get()) * \n          int(self.bpu_widget.get())\n```", "```py\nCOLOR_1 = 'grey55'\nCOLOR_2 = 'khaki'\n```", "```py\ndef display_button_color(self, row, col):\n  original_color = COLOR_1 if ((col//self.bpu)%2) else COLOR_2\n  button_color = BUTTON_CLICKED_COLOR if\n         self.get_button_value(row, col) else original_color\n  self.buttons[row][col].config(background=button_color)\n\ndef display_all_button_colors(self):\n  number_of_columns = self.find_number_of_columns()\n  for r in range(MAX_NUMBER_OF_DRUM_SAMPLES):\n    for c in range(number_of_columns):\n      self.display_button_color(r, c)\n```", "```py\noriginal_color = COLOR_1 if (col//bpu)%2) else COLOR_2\n```", "```py\ndef get_button_value(self, row, col):\n  return \n    self.all_patterns[self.current_pattern.get()]  \n      ['is_button_clicked_list'][row][col]\n```", "```py\ndef on_button_clicked(self, row, col):\n  def event_handler():\n    self.process_button_clicked(row, col)\n  return event_handler\n```", "```py\ndef process_button_clicked(self, row, col):\n   self.set_button_value(row, col, not self.get_button_value(row, col))\n   self.display_button_color(row, col)\n\ndef set_button_value(self, row, col, bool_value):\n   self.all_patterns[self.current_pattern.get()][\n           'is_button_clicked_list'][row][col] = bool_value\n```", "```py\non_pattern_changed()\non_number_of_units_changed()\non_bpu_changed()\non_open_file_button_clicked()\non_button_clicked()\non_play_button_clicked()\non_stop_button_clicked()\non_loop_button_toggled()\non_beats_per_minute_changed()\n```", "```py\nself.all_patterns[self.current_pattern.get()]['is_button_clicked_list'][row][col]\n```", "```py\ndef get_current_pattern_dict(self):\n  return self.all_patterns[self.current_pattern_index]\n\ndef get_bpu(self):\n  return self.get_current_pattern_dict()['bpu']\n\ndef set_bpu(self):\n  self.get_current_pattern_dict()['bpu'] = int(self.bpu_widget.get())\n\ndef get_number_of_units(self):\n  return self.get_current_pattern_dict()['number_of_units']\n\ndef set_number_of_units(self):\n  self.get_current_pattern_dict()['number_of_units']\n          = int(self.number_of_units_widget.get())\n\ndef get_list_of_drum_files(self):\n  return self.get_current_pattern_dict()['list_of_drum_files']\n\ndef get_drum_file_path(self, drum_index):\n  return self.get_list_of_drum_files()[drum_index]\n\ndef set_drum_file_path(self, drum_index, file_path):\n  self.get_list_of_drum_files()[drum_index] = file_path \n\ndef get_is_button_clicked_list(self):\n  return self.get_current_pattern_dict()['is_button_clicked_list']\n\ndef set_is_button_clicked_list(self, num_of_rows, num_of_columns):\n  self.get_current_pattern_dict()['is_button_clicked_list']\n        = [[False] * num_of_columns for x in range(num_of_rows)]\n```", "```py\ndef on_number_of_units_changed(self):\n  self.set_number_of_units()\n  self.set_is_button_clicked_list(MAX_NUMBER_OF_DRUM_SAMPLES,\n                    self.find_number_of_columns())\n  self.create_right_button_matrix()\n\ndef on_bpu_changed(self):\n  self.set_bpu()\n  self.set_is_button_clicked_list(MAX_NUMBER_OF_DRUM_SAMPLES,\n                    self.find_number_of_columns())\n  self.create_right_button_matrix()\n```", "```py\nimport os\nfrom tkinter import filedialog\n```", "```py\ndef on_open_file_button_clicked(self, drum_index):\n   def event_handler():\n     file_path = filedialog.askopenfilename\n        (defaultextension=\".wav\", filetypes=[(\"Wave Files\",\n       \"*.wav\"), (\"OGG Files\", \"*.ogg\")])\n     if not file_path:\n        return\n     self.set_drum_file_path(drum_index, file_path)\n     self.display_all_drum_file_names()\n     return event_handler\n```", "```py\ndef display_all_drum_file_names(self):\n   for i, drum_name in enumerate(self.get_list_of_drum_files()):\n       self.display_drum_name(i, drum_name)\n\ndef display_drum_name(self, text_widget_num, file_path):\n   if file_path is None: return\n   drum_name = os.path.basename(file_path)\n   self.drum_load_entry_widget [text_widget_num].delete(0, END)\n   self.drum_load_entry_widget[text_widget_num].insert(0, drum_name)\n```", "```py\nimport pygame\n```", "```py\ndef init_pygame(self):\n pygame.mixer.pre_init(44100, -16, 1, 512)\n pygame.init()\n```", "```py\npre_init(frequency=22050, size=-16, channels=2, buffersize=512) \n```", "```py\n def play_sound(self, sound_filename):\n   if sound_filename is not None:\n      pygame.mixer.Sound(sound_filename).play()\n```", "```py\nimport time\n    def play_pattern(self):\n        self.now_playing = True\n        while self.now_playing:\n            play_list = self.get_is_button_clicked_list()\n            num_columns = len(play_list[0])\n            for column_index in range(num_columns):\n                column_to_play = self.get_column_from_matrix(\n                      play_list, column_index)\n                for i, item in enumerate(column_to_play):\n                    if item:\n                        sound_filename = self.get_drum_file_path(i)\n                        self.play_sound(sound_filename)\n                time.sleep(self.time_to_play_each_column())\n                if not self.now_playing: break\n            if not self.loop: break \n        self.now_playing = False\n```", "```py\ndef get_column_from_matrix(self, matrix, i):\n  return [row[i] for row in matrix]\n```", "```py\ndef time_to_play_each_column(self):\n  beats_per_second = self.beats_per_minute/60\n  time_to_play_each_column = 1/beats_per_second\n  return time_to_play_each_column\n```", "```py\ndef on_beats_per_minute_changed(self):\n   self.beats_per_minute = int(self.beats_per_minute_widget.get())\n```", "```py\ndef on_loop_button_toggled(self):\n  self.loop = self.loopbuttonvar.get()\n```", "```py\ndef on_play_button_clicked(self):\n  self.start_play()\n\ndef start_play(self):\n  self.init_pygame()\n  self.play_pattern()\n\ndef on_stop_button_clicked(self):\n  self.stop_play()\n\ndef stop_play(self):\n  self.now_playing = False\n```", "```py\nimport threading\n```", "```py\ndef play_in_thread(self):\n  self.thread = threading.Thread(target = self.play_pattern)\n  self.thread.start() \n```", "```py\ndef start_play(self):\n  self.init_pygame()\n  self.play_in_thread() # deleted direct call to self.play_pattern()\n```", "```py\ndef toggle_play_button_state(self):\n  if self.now_playing:\n    self.play_button.config(state=\"disabled\")\n  else:\n   self.play_button.config(state=\"normal\")\n```", "```py\ndef on_play_button_clicked(self):\n  self.start_play()\n  self.toggle_play_button_state()\n\ndef on_stop_button_clicked(self):\n  self.stop_play()\n  self.toggle_play_button_state()\n\ndef on_loop_button_toggled(self):\n  self.loop = self.to_loop.get()\n  self.keep_playing = self.loop\n  if self.now_playing:\n    self.now_playing = self.loop\n    self.toggle_play_button_state()\n```", "```py\n self.root.protocol('WM_DELETE_WINDOW', self.exit_app)\n```", "```py\ndef exit_app(self):\n  self.now_playing = False\n  if messagebox.askokcancel(\"Quit\", \"Really quit?\"):\n    self.root.destroy()\n```", "```py\n def display_pattern_name(self):\n   self.current_pattern_name_widget.config(state='normal')\n   self.current_pattern_name_widget.delete(0, 'end')\n   self.current_pattern_name_widget.insert(0,\n               'Pattern {}'.format(self.current_pattern_index))\n   self.current_pattern_name_widget.config(state='readonly')\n```", "```py\n def on_pattern_changed(self):\n   self.change_pattern()\n```", "```py\n def change_pattern(self):\n   self.current_pattern_index = int(self.pattern_index_widget.get())\n   self.display_pattern_name()\n   self.create_left_drum_loader()\n   self.display_all_drum_file_names()\n   self.create_right_button_matrix()\n   self.display_all_button_colors()\n```", "```py\nimport pickle\nparty_menu= ['Bread', 'Salad', 'Bordelaise', 'Wine', 'Truffles']\npickle.dump(party_menu, open(\"my_menu\", \"wb\"))\n```", "```py\nimport pickle\nmenu= pickle.load( open( \"my_menu\", \"rb\" ) )\nprint(menu) # prints ['Bread', 'Salad', 'Bordelaise', 'Wine', 'Truffles']\n```", "```py\ndef create_top_menu(self):\n  self.menu_bar = Menu(self.root)\n  self.file_menu = Menu(self.menu_bar, tearoff=0)\n  self.file_menu.add_command( \n       label=\"Load Project\", command=self.load_project)\n  self.file_menu.add_command(\n      label=\"Save Project\", command=self.save_project)\n  self.file_menu.add_separator()\n  self.file_menu.add_command(label=\"Exit\", command=self.exit_app)\n  self.menu_bar.add_cascade(label=\"File\", menu=self.file_menu)\n  self.about_menu = Menu(self.menu_bar, tearoff=0)\n  self.about_menu.add_command(label=\"About\",command=self.show_about)\n  self.menu_bar.add_cascade(label=\"About\", menu=self.about_menu)\n  self.root.config(menu=self.menu_bar)\n```", "```py\nimport pickle \n```", "```py\ndef save_project(self):\n  saveas_file_name = filedialog.asksaveasfilename\n               (filetypes = [('Explosion Beat File','*.ebt')],\n              title=\"Save project as...\")\n  if saveas_file_name is None: return\n  pickle.dump( self.all_patterns, open(saveas_file_name, \"wb\"))\n  self.root.title(os.path.basename(saveas_file_name) +PROGRAM_NAME)\n```", "```py\n  def load_project(self):\n     file_path = filedialog.askopenfilename(\n     filetypes=[('Explosion Beat File', '*.ebt')], title='Load Project')\n     if not file_path:\n        return\n     pickled_file_object = open(file_path, \"rb\")\n     try:\n        self.all_patterns = pickle.load(pickled_file_object)\n     except EOFError:\n        messagebox.showerror(\"Error\", \"Explosion Beat file seems corrupted or invalid !\")\n     pickled_file_object.close()\n     try:\n       self.change_pattern()\n       self.root.title(os.path.basename(file_path) + PROGRAM_NAME)\n     except:\n       messagebox.showerror(\"Error\",\n        \"An unexpected error occurred trying to process the beat file\")\n```", "```py\ndef show_about(self):\n  messagebox.showinfo(PROGRAM_NAME, \n                   \"Tkinter GUI Application\\n Development  Blueprints\")\n```", "```py\nfrom tkinter import ttk\n```", "```py\nttk.Button(root, text='ttk Button').grid(row=1, column=1)\nttk.Checkbutton(root, text='tkCheckButton').grid(row=2, column=1)\n```", "```py\n>>> my_button = ttk.Button()\n>>> my_button.winfo_class()\n```", "```py\n style = ttk.Style()\n```", "```py\nstyle.configure('style.Defaultstyle', **styling options)\n```", "```py\nttk.Widget(root, style='style.Defaultstyle') \n```", "```py\n >> from tkinter.ttk import *\n >>> style = Style()\n >>> style.theme_names()\n ('winnative', 'clam', 'alt', 'default', 'classic', 'xpnative')\n To obtain the name of the currently active theme:\n >>> style.theme_use()\n 'default'\n```", "```py\nstyle.theme_use('your_new_theme_name') \n```", "```py\n from tkinter import Tk\n from tkinter import ttk\n root = Tk()\n style = ttk.Style()\n # defining the global style - applied when no other style is defined\n style.configure('.', font='Arial 14', foreground='brown', \n   background='yellow')\n # this label inherits the global style as style option not specified for it\n ttk.Label(root, text='I have no style of my own').pack()\n # defining a new style named danger and configuring its style only for the\n # button widget\n style.configure('danger.TButton', font='Times 12', foreground='red', padding=1)\n ttk.Button(root, text='Styled Dangerously',  style='danger.TButton').pack()\n # Different styling for different widget states\n style.map(\"new_state_new_style.TButton\", foreground=[('pressed', 'red'), ('active', 'blue')])\n ttk.Button(text=\"Different Style for different states\",style=\"new_state_new_style.TButton\").pack()\n # Overriding current theme styles for the Entry widget\n current_theme = style.theme_use()\n style.theme_settings( current_theme,\n    {\"TEntry\":\n        {\"configure\":\n          {\"padding\": 10},\n          \"map\": {\"foreground\": [(\"focus\", \"red\")] }\n        } \n    })\n print(style.theme_names())\n print(style.theme_use())\n # this is effected by change of themes even though no style specified\n ttk.Entry().pack()\n root.mainloop()\n```", "```py\nfrom tkinter import ttk\n```", "```py\n button = ttk.Button()\n loopbutton = ttk.Checkbutton(**options)\n```", "```py\nttk.Separator(playbar_frame, orient='vertical').grid(row=start_row, column = 5, sticky=\"ns\", padx=5)\n```"]