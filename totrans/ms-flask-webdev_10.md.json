["```py\nimport logging\nimport click\nfrom .auth.models import User, db\n\nlog = logging.getLogger(__name__)\n\ndef register(app):\n @app.cli.command('create-user')\n @click.argument('username')\n @click.argument('password')\n    def create_user(username, password):\n        user= User()\n        user.username = username\n        user.set_password(password)\n        try:\n            db.session.add(user)\n            db.session.commit()\n            click.echo('User {0} Added.'.format(username))\n        except Exception as e:\n            log.error(\"Fail to add new user: %s Error: %s\" \n            % (username, e))\n            db.session.rollback()\n...\n```", "```py\nimport os\nfrom webapp import create_app\nfrom webapp.cli import register\n\nenv = os.environ.get('WEBAPP_ENV', 'dev')\napp = create_app('config.%sConfig' % env.capitalize())\nregister(app)\n\nif __name__ == '__main__':\n    app.run()\n```", "```py\n# First we need to export our FLASK_APP env var\n$ export FLASK_APP=main.py\n$ flask create-user user10 password\nUser user10 Added.\n$ flask run\n * Serving Flask app \"main\"\n2018-08-12 20:25:43,031:INFO:werkzeug: * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n```", "```py\n@app.cli.command('list-routes')\ndef list_routes():\n    for url in app.url_map.iter_rules():\n        click.echo(\"%s %s %s\" % (url.rule, url.methods, url.endpoint))\n```", "```py\n$ source venv/bin/activate\n(venv) $ pip install -r requirements\n```", "```py\n...\nfrom flask_debugtoolbar import DebugToolbarExtension \n\n...\ndebug_toolbar = DebugToolbarExtension()\n...\ndef create_app(config):\n...\n    debug_toolbar.init_app(app)\n...\n```", "```py\nclass DevConfig(Config): \n    DEBUG = True \n    DEBUG_TB_INTERCEPT_REDIRECTS = False \n```", "```py\nclass DevConfig(Config): \n    DEBUG = True \n    DEBUG_TB_PANELS = [\n        'flask_debugtoolbar.panels.versions.VersionDebugPanel', \n        'flask_debugtoolbar.panels.timer.TimerDebugPanel', \n        'flask_debugtoolbar.panels.headers.HeaderDebugPanel', \n        'flask_debugtoolbar.panels.\n         request_vars.RequestVarsDebugPanel',        \n         'flask_debugtoolbar.panels.config_vars.\n         ConfigVarsDebugPanel ',         \n         'flask_debugtoolbar.panels.template.\n         TemplateDebugPanel',        'flask_debugtoolbar.panels.\n         logger.LoggingPanel',        'flask_debugtoolbar.panels.\n         route_list.RouteListDebugPanel'        \n        'flask_debugtoolbar.panels.profiler.\n         ProfilerDebugPanel',        'flask_mongoengine.panels.\n         MongoDebugPanel' \n    ] \n    DEBUG_TB_INTERCEPT_REDIRECTS = False \n```", "```py\n...\nFlask-Caching\n...\n```", "```py\nfrom flask_caching import Cache \n...\ncache = Cache()\n... \ndef create_app(config):\n...\n    cache.init_app(app)\n...\n```", "```py\nclass DevConfig(Config): \n\n    CACHE_TYPE = 'simple'\n```", "```py\n...\nfrom .. import cache\n...\n\n@blog_blueprint.route('/')\n@blog_blueprint.route('/<int:page>')\n@cache.cached(timeout=60)\ndef home(page=1):\n    posts = \n    Post.query.order_by(Post.publish_date.desc()).paginate(page, \n    current_app.config['POSTS_PER_PAGE'], False)\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'home.html',\n        posts=posts,\n        recent=recent,\n        top_tags=top_tags\n    )\n```", "```py\n@cache.cached(timeout=7200, key_prefix='sidebar_data') \ndef sidebar_data(): \n    recent = Post.query.order_by( \n        Post.publish_date.desc() \n    ).limit(5).all() \n\n    top_tags = db.session.query( \n        Tag, func.count(tags.c.post_id).label('total') \n    ).join( \n        tags \n    ).group_by( \n        Tag \n    ).order_by('total DESC').limit(5).all() \n\n    return recent, top_tags \n```", "```py\n...\nfrom .. import db, cache\n...\n\nclass User(db.Model):\n... \n    @cache.memoize(60)\n    def has_role(self, name):\n        for role in self.roles:\n            if role.name == name:\n                return True\n        return False\n```", "```py\nclass ProdConfig(Config): \n\n    CACHE_TYPE = 'simple'\n\nclass DevConfig(Config): \n\n    CACHE_TYPE = 'null' \n```", "```py\ndef make_cache_key(*args, **kwargs):\n    path = request.path\n    args = str(hash(frozenset(request.args.items())))\n    messages = str(hash(frozenset(get_flashed_messages())))\n    return (path + args + messages).encode('utf-8')\n```", "```py\nclass ProdConfig(Config): \n    ... \n    CACHE_TYPE = 'redis' \n    CACHE_REDIS_HOST = 'localhost' \n    CACHE_REDIS_PORT = '6379' \n    CACHE_REDIS_PASSWORD = 'password' \n    CACHE_REDIS_DB = '0' \n```", "```py\n...\nredis\n...\n```", "```py\n# Start dockers for RMQ and Redis in the background\n$ docker-compose up -d Creating rabbitmq ... doneCreating redis ... done # Check the currently active containers\n$ docker container list\nCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n3266cbdee1d7 redis \"docker-entrypoint.s…\" 43 seconds ago Up 58 seconds 0.0.0.0:6379->6379/tcp redis\n64a99718442c rabbitmq:3-management \"docker-entrypoint.s…\" 43 seconds ago Up 58 seconds 4369/tcp, 5671/tcp, 0.0.0.0:5672->5672/tcp, 15671/tcp, 25672/tcp, 0.0.0.0:15672->15672/tcp rabbitmq\n```", "```py\n$ export WEBAPP_ENV=prod\n$ export FLASK_APP=main.py\n$ flask run\n```", "```py\n$ pip install memcache\n```", "```py\nclass ProdConfig(Config): \n    ... \n    CACHE_TYPE = 'memcached' \n    CACHE_KEY_PREFIX = 'flask_cache' \n    CACHE_MEMCACHED_SERVERS = ['localhost:11211'] \n```", "```py\n...\nfrom flask_assets import Environment, Bundle \n...\nassets_env = Environment() \n\nmain_css = Bundle( \n    'css/bootstrap.css', \n    filters='cssmin', \n    output='css/common.css' \n) \n\nmain_js = Bundle( \n    'js/jquery.js', \n    'js/bootstrap.js', \n    filters='jsmin', \n    output='js/common.js' \n) \n```", "```py\nfrom .extensions import ( \n    bcrypt, \n    oid, \n    login_manager, \n    principals, \n    rest_api, \n    celery, \n    debug_toolbar, \n    cache, \n    assets_env, \n    main_js, \n    main_css \n) \n\ndef create_app(object_name): \n    ... \n    assets_env.init_app(app) \n\n    assets_env.register(\"main_js\", main_js) \n    assets_env.register(\"main_css\", main_css) \n```", "```py\nclass DevConfig(Config): \n    DEBUG = True \n    DEBUG_TB_INTERCEPT_REDIRECTS = False \n    ASSETS_DEBUG = True\n```", "```py\n<link rel=\"stylesheet\" \n href=https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootst\n rap.min.css>\n```", "```py\n{% assets \"main_css\" %} \n<link rel=\"stylesheet\" type=\"text/css\" href=\"{{ ASSET_URL }}\" \n /> \n{% endassets %} \n```", "```py\n<script \n src=\"img/> .min.js\"></script><script \n src=\"img/> ap.min.js\"></script>\n```", "```py\n{% assets \"main_js\" %} \n<script src=\"img/{{ ASSET_URL }}\"></script> \n{% endassets %} \n```", "```py\n./\n  webapp/\n    admin/\n __init__.py\n forms.py\n controllers.py\n    api/\n    auth/\n    blog/\n    templates/\n      admin/\n ...      auth/\n      blog/\n      ...\n ...\n```", "```py\n...\nfrom flask_admin import Admin \n...\nadmin = Admin()\n\ndef create_module(app, **kwargs):\n    admin.init_app(app)\n    ....\n\n```", "```py\n\ndef create_app(object_name): \n    ...\n    from .admin import create_module as admin_create_module\n    ...\n    admin_create_module(app)\n```", "```py\n{% if current_user.is_authenticated and current_user.has_role('admin') %}\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"{{url_for('admin.index')}}\">\n    Admin<span class=\"sr-only\">(current)</span></a>\n</li>\n{% endif %}\n```", "```py\nfrom flask.ext.admin import BaseView, expose \n\nclass CustomView(BaseView): \n    @expose('/')\n    @login_required\n    @has_role('admin')\n    def index(self): \n        return self.render('admin/custom.html') \n\n    @expose('/second_page')\n    @login_required\n    @has_role('admin')\n    def second_page(self):\n        return self.render('admin/second_page.html') \n```", "```py\n{% extends 'admin/master.html' %} \n{% block body %} \n    This is the custom view! \n    <a href=\"{{ url_for('.second_page') }}\">Link</a> \n{% endblock %} \n```", "```py\n...\nfrom .controllers import CustomView \n...\ndef create_module(object_name):\n    ,,,\n    admin.add_view(CustomView(name='Custom'))\n```", "```py\nfrom flask_admin.contrib.sqla import ModelView \n# or, if you use MongoEngine \n# from flask_admin.contrib.mongoengine import ModelView \n\nclass CustomModelView(ModelView): \n    pass\n```", "```py\nfrom flask_admin import Admin\nfrom .controllers import CustomView, CustomModelView \nfrom webapp.blog.models import db, Reminder, Post, Comment, Tag\nfrom webapp.auth.models import User, Role \n\nadmin = Admin()\ndef create_module(app, **kwargs): \n    admin.init_app(app)\n    admin.add_view(CustomView(name='Custom'))\n    models = [User, Role, Comment, Tag, Reminder]\n\n    for model in models: \n       admin.add_view(CustomModelView(model, db.session, \n       category='models'))\n...\n```", "```py\nfrom wtforms import ( \n    widgets, \n    TextAreaField\n) \n\nclass CKTextAreaWidget(widgets.TextArea):\n    def __call__(self, field, **kwargs):\n        kwargs.setdefault('class_', 'ckeditor') \n        return super(CKTextAreaWidget, self).__call__(field, \n         **kwargs)\n\nclass CKTextAreaField(TextAreaField): \n    widget = CKTextAreaWidget() \n```", "```py\nfrom webapp.forms import CKTextAreaField \n\nclass PostView(CustomModelView):\n    form_overrides = dict(text=CKTextAreaField)\n    column_searchable_list = ('text', 'title')\n    column_filters = ('publish_date',)\n\n    create_template = 'admin/post_edit.html'\n    edit_template = 'admin/post_edit.html'\n```", "```py\n{% extends 'admin/model/edit.html' %} \n{% block tail %} \n    {{ super() }} \n    <script \n        src=\"img/ckeditor.js\"> \n    </script> \n{% endblock %} \n```", "```py\ndef create_module(app, **kwargs):\n    ...\n    admin.add_view(PostView(Post, db.session, category='Models'))\n    ...    \n```", "```py\nclass CustomFileAdmin(FileAdmin):\n    pass\n```", "```py\nadmin.add_view(CustomFileAdmin(app.static_folder,'/static/',name='Static Files'))\n```", "```py\nclass CustomView(BaseView): \n    @expose('/') \n    @login_required \n    @has_role('admin') \n    def index(self): \n        return self.render('admin/custom.html') \n\n    @expose('/second_page') \n    @login_required \n    @has_role('admin') \n    def second_page(self): \n        return self.render('admin/second_page.html') \n```", "```py\nclass CustomModelView(ModelView): \n    def is_accessible(self): \n        return current_user.is_authenticated and \n               current_user.has_role('admin') \n\nclass CustomFileAdmin(FileAdmin): \n    def is_accessible(self): \n        return current_user.is_authenticated and \n               current_user.has_role('admin') \n```", "```py\n...\nFlask-Babel\n...\n```", "```py\n[python: webapp/**.py]\n[jinja2: webapp/templates/**.html]\nencoding = utf-8\nextensions=jinja2.ext.autoescape,jinja2.ext.with_\n```", "```py\n$ pybabel init -i ./babel/messages.pot -d ./webapp/translations -l pt \n```", "```py\n$ pybabel extract -v -F ./babel/babel.cfg -o ./babel/messages.pot .\n```", "```py\n$ pybabel update -i ./babel/messages.pot -d webapp/translations\n```", "```py\n# Portuguese translations for PROJECT.\n# Copyright (C) 2018 ORGANIZATION\n# This file is distributed under the same license as the PROJECT project.\n# FIRST AUTHOR <EMAIL@ADDRESS>, 2018.\n#\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: PROJECT VERSION\\n\"\n...\n\n#: webapp/templates/head.html:5\nmsgid \"Welcome to this Blog\"\nmsgstr \"\"\n\n#: webapp/templates/macros.html:57\nmsgid \"Read More\"\nmsgstr \"\"\n\n...\n```", "```py\n$ pybabel compile -d ./webapp/translations\n```", "```py\n<h1>{{_('Some text to translate')}}</h1>\n```", "```py\nfrom flask import has_request_context, session\nfrom flask_babel import Babel\n\nbabel = Babel()\n...\ndef create_module(app, **kwargs):\n    babel.init_app(app)\n    from .controllers import babel_blueprint\n    app.register_blueprint(babel_blueprint)\n```", "```py\n...\n@babel.localeselector\ndef get_locale():\n    if has_request_context():\n        locale = session.get('locale')\n        if locale:\n            return locale\n        session['locale'] = 'en'\n        return session['locale']\n...\n```", "```py\nfrom flask import Blueprint, session, redirect, url_for\n\nbabel_blueprint = Blueprint(\n    'babel',\n    __name__,\n    url_prefix=\"/babel\"\n)\n\n@babel_blueprint.route('/<string:locale>')\ndef index(locale):\n    session['locale'] = locale\n    return redirect(url_for('blog.home'))\n```", "```py\n...\n<ul class=\"navbar-nav ml-auto\">\n    <li class=\"nav-item dropdown\">\n        <a class=\"nav-link dropdown-toggle\" href=\"#\" \n        id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\">\n            Lang\n        </a>\n        <div class=\"dropdown-menu\">\n            <a class=\"dropdown-item\" href=\"{{url_for('babel.index', \n            locale='en')}}\">en</a>\n            <a class=\"dropdown-item\" href=\"{{url_for('babel.index', \n            locale='pt')}}\">pt</a>\n        </div>\n    </li>\n...\n</ul>\n```", "```py\ndef create_app():\n...\n    from babel import create_module as babel_create_module\n...\n    babel_create_module(app)\n```", "```py\n...\nFlask-Mail\n...\n```", "```py\nclass DevConfig(Config): \n\n    MAIL_SERVER = 'localhost' \n    MAIL_PORT = 25 \n    MAIL_USERNAME = 'username' \n    MAIL_PASSWORD = 'password' \n```", "```py\n...\nfrom flask_mail import Mail\n...\nmail = Mail()\n\ndef create_app(object_name): \n...\n    mail.init_app(app)\n...\n```", "```py\nfrom flask_mail import Message\nfrom .. import celery, mail\n\n@celery.task(\n    bind=True,\n    ignore_result=True,\n    default_retry_delay=300,\n    max_retries=5\n)\ndef remind(self, pk):\n    logs.info(\"Remind worker %d\" % pk)\n    reminder = Reminder.query.get(pk)\n    msg = Message(body=\"Text %s\" % str(reminder.text), \n    recipients=[reminder.email], subject=\"Your reminder\")\n    try:\n        mail.send(msg)\n        logs.info(\"Email sent to %s\" % reminder.email)\n        return\n    except Exception as e:\n        logs.error(e)\n        self.retry(exc=e)\n```"]