- en: Appendix
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: About
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This section is included to assist the students to perform the activities in
    the book. It includes detailed steps that are to be performed by the students
    to achieve the objectives of the activities.
  prefs: []
  type: TYPE_NORMAL
- en: '1: Your First Step'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 1: Sending Requests to Our APIs Using Postman'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: First, we will get all of the recipes. Select `GET` as our `HTTP` method in
    the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter the request URL `http://localhost:5000/recipes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Send** button. The result can be seen in the following screenshot:![Figure
    1.14: Getting all the recipes'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_01_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.14: Getting all the recipes'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status **200 OK** in the top-right
    corner of the response panel. That means the request has been successful. The
    time next to it shows **7ms**, which is the time spent on the request. And the
    size of the response, including the header and body, is **322** bytes. The details
    of the recipes, in JSON format, are shown in the Body panel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we are going to use the POST method to create a recipe. We will send an
    HTTP `http://localhost:5000/recipes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new tab next to the Get Request Tab by clicking on the `http://localhost:5000/recipes`
    as the request URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the Body Tab. Also, select the **raw** radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose **JSON (application/json)** in the right drop-down menu. Type the following
    data in JSON format in the **Body** content area. Click the **Send** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result can be seen in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.15: Creating a recipe'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C15309_01_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.15: Creating a recipe'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You should see the following information in the HTTP response in the Postman
    interface, Status **201** OK, meaning the creation has been successful and we
    can see our new recipe in JSON format. You will also notice that the ID assigned
    to the recipe is **3**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, get all the recipes from the server application again. We want to see if
    we have three recipes there now. In the history panel, select our previous request
    that gets all recipes, clicks on it, and resends.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In response, we can see that there are three recipes. They are shown in the
    following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.16: Getting all the recipes from the server application'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C15309_01_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.16: Getting all the recipes from the server application'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Then, modify the recipe that we have just created. To do this, create a new
    tab next to the **Get** Request Tab by clicking on the **+** button. Select **PUT**
    as the HTTP method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in `http://localhost:5000/recipes/3` as the request URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Body** Tab and then select the **raw** radio button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Choose `JSON (application/json)` in the right drop-down menu. Type the following
    data in JSON format in the **Body** content area. Click **Send**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The result is shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.17: Modifying the recipe'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C15309_01_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.17: Modifying the recipe'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the **200 OK** HTTP status, meaning the update
    has been successful. You can also see the time spent on the request in milliseconds.
    You should also see the size of the response (header and body). The content of
    the response is in JSON format. We can see our updated recipe here in JSON format.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, we will see if we can look for a recipe using its ID. We only want to
    see the recipe with ID **3** in the response. To do this, create a new tab next
    to the **Get Request** Tab by clicking on the **+** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `http://localhost:5000/recipes/3` as the request URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Send**. The result is shown in the following screenshot:![Figure 1.18:
    Looking for the recipe with ID'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_01_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.18: Looking for the recipe with ID'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see in the response that only the recipe with ID **3** is returned. It
    has the modified details that we just set as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When we search for a recipe that doesn''t exist, we will see the following
    response, with a message `http://localhost:5000/recipes/101` endpoint. The result
    is shown in the following screenshot:![Figure 1.19: Response showing "recipe not
    found"'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_01_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.19: Response showing "recipe not found"'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 2: Implement and Test the delete_recipe Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `delete_recipe` function removes a recipe from the memory. Use `recipe
    = next((recipe for recipe in recipes if recipe[''id''] == recipe_id), None)` to
    get the recipe with the specific ID:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Similar to the `update_recipe` function shown in earlier, if you can't find
    the recipe, then return "`recipe not found`" together with HTTP status `NOT_FOUND`.
    Otherwise, we will go ahead and remove the recipe with the given ID from our recipe
    collection with HTTP status `204 No Content`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once the code is done, *right-click* on the `app.py` file and click `run` to
    start the application. The Flask server will start up, and our application is
    ready to be tested.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use httpie or curl to delete the recipe with `ID = 1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Following is the `curl` version of the command which does the same thing.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `@app.route(''/recipes/<int:recipe_id>'', methods=[''DELETE''])` route
    will catch the client request and invoke the `delete_recipe(recipe_id)` function.
    The function will look for recipes with the `recipe_id` ID and, if it finds one,
    it will delete it. In response, we can see that the deletion has been successful.
    And we see that the HTTP status is `204 NO CONTENT`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Lastly, use Postman to delete the recipe with `ID = 2`. For that, create a new
    tab next to the **Get Request** Tab by clicking on the **+** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `HTTP` method. Type in `http://localhost:5000/recipes/2` as the request
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Send**. The result is shown in the following screenshot:![Figure 1.20:
    Deleting the recipe'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_01_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 1.20: Deleting the recipe'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: And then we can see the response with the HTTP status **204 NO CONTENT**. That
    means the recipe was successfully removed.
  prefs: []
  type: TYPE_NORMAL
- en: '2: Starting to Build Our Project'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 3: Testing the APIs Using Postman'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: First, build a client request that asks for a new recipe. Then, make use of
    the collection function in Postman to make the testing more efficient.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **Collection** tab and then create a new collection by clicking
    on **+**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type in **Smilecook** as the name and click **Create**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Right-click* on **...** next to **Smilecook**, create a new folder under **Smilecook**,
    and type **Recipe** in the name field.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Right-click* on **Recipe** to create a new request. Then, set the name to
    **RecipeList** and save it under the **Recipe** collection.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `http://localhost:5000/recipes` in the request URL field.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to the `body` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Save** and send the recipe. The result is shown in the following screenshot:![Figure
    2.10: Creating our first recipe by sending the details in JSON format'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.10: Creating our first recipe by sending the details in JSON format'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status **201 Created**, meaning
    that the request was successful, and, in the body, you should see the same recipe
    that we just created. The ID of the recipe should be 1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create the second recipe by sending over a client request. Next, we will create
    our second recipe by sending the following details in JSON format:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Send**. The result is shown in the following screenshot:![Figure 2.11:
    Creating our second recipe by sending the details in JSON format'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.11: Creating our second recipe by sending the details in JSON format'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status **201 Created**, meaning
    that the request was successful, and, in the body, you should see the same recipe
    that we just created. The ID of the recipe should be 2.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: So far, we have created two recipes. Let's retrieve these recipes using Postman
    and confirm whether the two recipes are in the application memory.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new request under the **Recipe** folder, name it **RecipeList**, and
    then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **RecipeList** that we just created (the one with the HTTP method
    set to GET).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `http://localhost:5000/recipes` in the request URL. Then, click `ID = 1`
    to published.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new request under the **Recipe** folder, and name it **RecipePublish**,
    and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **RecipePublish** request that we just created (the one with the
    HTTP method set to GET).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select `http://localhost:5000/recipes/1/publish` in the request URL. Then,
    click **Save** and send the request. The result is shown in the following screenshot:![Figure
    2.13: Retrieving the published recipe'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.13: Retrieving the published recipe'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status **204 NO CONTENT**, meaning
    that the request has been successfully published and that no data has been returned
    in the response body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Retrieve all the recipes using Postman again. Select `RecipeList` (`GET`) from
    the left-hand panel and send the request. The result is shown in the following
    screenshot:![Figure 2.14: Retrieving all the recipes using Postman'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.14: Retrieving all the recipes using Postman'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status `localhost:5000/recipes/1`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new request under the `http://localhost:5000/recipes/1` in the request
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, go to the **Body** tab and select raw, choose **JSON (application/json)**
    from the drop-down menu, and insert the following code into the body field. This
    is the modified recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Save** and send it. The result is shown in the following screenshot:![Figure
    2.15: Modifying the recipe with ID 1'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.15: Modifying the recipe with ID 1'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status **200 OK**, meaning that
    the modification was successful. The body should contain the updated details of
    recipe 1 in JSON format. We will retrieve the recipe with ID 1.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create a new request under the `http://localhost:5000/recipes/1` in the request
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save** and send it. The result is shown in the following screenshot:![Figure
    2.16: Retrieving the recipe with ID 1'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.16: Retrieving the recipe with ID 1'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, you will see the HTTP status `recipe 1` in JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 4: Implementing the Delete Recipe Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `delete` function to `RecipeResource`. Implement the `delete` method
    by following the sample code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The third method we built here has been deleted. We do this by locating the
    recipe with the respective recipe ID and then remove it from the recipe list.
    Finally, we return the HTTP status **204 NO CONTENT**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Right-click* on the `app.py` file and click **run** to start the application.
    The Flask server will start up and our application will be ready for testing.
    Now, create the first recipe using Postman. We will build a client request that
    asks for a new recipe.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'First, select the **RecipeList POST** request. Now, send the request by clicking
    the **Send** button, as shown in the following screenshot:![Figure 2.17: Creating
    the first recipe using Postman'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.17: Creating the first recipe using Postman'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Now, we will delete a recipe using Postman. To do that, delete the recipe with
    ID 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new request under the **Recipe** folder. Then, set the **Request Name**
    to **Recipe** and **save** it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Change the `HTTP` method to `DELETE` and type `http://localhost:5000/recipes/1`
    in the request URL. Then, save and send the request. The result is shown in the
    following screenshot:![Figure 2.18: Deleting a recipe using Postman'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_02_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 2.18: Deleting a recipe using Postman'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In the HTTP response, you will see the HTTP status `RecipeResource` class in
    this activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19: The method that we built for the RecipeResource class'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C15309_02_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 2.19: The method that we built for the RecipeResource class'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '3: Manipulating a Database with SQLAlchemy'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 5: Creating a User and a Recipe'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Python console at the bottom of PyCharm and type in the following
    code to import the necessary modules and classes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a `user` object and save that to the database by typing in the following
    code in the Python console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will create two recipes using the following code. One thing to note
    is the fact that the `user_id` attribute of the recipe is set to `user.id`. This
    is to indicate that the recipe was created by the user `Peter`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can see a new record there in the `user` table:![Figure 3.18: New record
    in the user table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_03_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.18: New record in the user table'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'We will then check whether the two recipes have been created in the database![Figure
    3.19: Checking whether the two recipes have been created'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_03_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.19: Checking whether the two recipes have been created'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Activity 6: Upgrading and Downgrading a Database'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new attribute to the `user` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, run the `flask db migrate` command to create the database and tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Flask-Migrate detected the new column and created a script for that:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check `/migrations/versions/6971bd62ec60_.py` under the `versions` folder.
    This file is created by Flask-Migrate. Note that you may get a different revision
    ID here. Please review the file before you run the `flask db upgrade` command.
    That''s because, sometimes, it may not detect every change you make to your models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There are two functions in this autogenerated file; one is upgraded, and this
    is to add the new recipe and user to the table, while the other is downgraded,
    which is to go back to the previous version.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We will then execute the `flask db upgrade` command, which will upgrade our
    database to conform with the latest specification in our models:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will invoke `upgrade()` to upgrade the database:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check whether the new field is created in the database. Go to **smilecook**
    >> **Schemas** >> **Tables** >> **user** >> **Properties to verify**:![Figure
    3.20: Checking whether the new field has been created in the database'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_03_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 3.20: Checking whether the new field has been created in the database'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Run the `downgrade` command to remove the new field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'This command will invoke `downgrade()` to downgrade the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Check whether the field has been removed. Go to **smilecook** → **Schemas**
    → **Tables** → **user** → **Properties to verify**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.21: Checking whether the field has been removed from the database'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C15309_03_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 3.21: Checking whether the field has been removed from the database'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '4: Authenticated Services and Security with JWTs'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 7: Implementing Access Control on the publish/unpublish Recipe Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `put` method in `RecipePublishResource` to restrict access to only
    authenticated users. In `resources/token.py`, add the `@jwt_required` decorator
    on top of the `RecipePublishResource.put` method. Use the `get_jwt_identity()`
    function to identify whether the authenticated user is the owner of the recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is to publish the recipe. Only users who have logged in can publish their
    own recipes. The method will perform various checks to make sure the user has
    published privileges. It will return **204 NO_CONTENT** once the recipe is published.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Modify the `delete` method in `RecipePublishResource`. Only an authenticated
    user can unpublish the recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This unpublishes the recipe. Similar to the previous code, only a user who has
    logged in can unpublish their own recipe. It will return the **status** code **204
    NO_CONTENT** once the recipe is published.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to the user account and get the access token. Select the **POST** token
    request that we created previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Check the **raw** radio button and select **JSON (application/json)** from
    the drop-down menu. Type in the following JSON content in the **Body** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Click **Send** to log in to the account. The result is shown in the following
    screenshot:![Figure 4.20: Log in to the user account'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_04_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.20: Log in to the user account'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You will see the HTTP **status** code **200 OK**, meaning the login is successful.
    And we can see the **access token** and **refresh token** in the response body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Publish the recipe with `id = 3` in the state that the user has logged in. Select
    **PUT RecipePublish**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `Bearer {token}` in the **VALUE** field, where token is the JWT token
    we got in our previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Send** to publish the recipe. The result is shown in the following
    screenshot:![Figure 4.21: Publishing the recipe'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_04_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.21: Publishing the recipe'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You will then see the response, the HTTP **status** code **204** meaning the
    recipe has been published successfully.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, try to get all published recipes. Select **GET RecipeList** request,
    then click **Send** to get all published recipe details. The result is shown in
    the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.22: Retrieving all published recipes'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C15309_04_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.22: Retrieving all published recipes'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You will then see the response, the HTTP **status** code **200** meaning the
    request is successfully, and you can see there is one published recipe that we
    created is returned.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Unpublish the recipe with `id = 3` in the state that the user has logged in.
    Create a new request under the **Recipe** folder, and name it **RecipePublish**,
    and then save it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the **RecipePublish** request that we just created (the one with the
    HTTP method set to **GET**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `http://localhost:5000/recipes/3/publish` in the request URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the `Bearer {token}` in the **VALUE** field, where token is the JWT token
    we got in *step 5*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Save** and **Send** the request to unpublish. The result is shown in the
    following screenshot:![Figure 4.23: Unpublishing the recipe'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_04_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 4.23: Unpublishing the recipe'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '5: Validating APIs Using marshmallow'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 8: Serializing the recipe Object Using marshmallow'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the recipe schema to include all attributes except for `email`. In `schemas/recipe.py`,
    modify `only=[''id'', ''username''] to exclude=(''email'', )`. This way, we will
    be showing everything except for the user''s email address. Besides, if we have
    a new attribute for the `recipe` object in the future (for example, a `user avatar`
    URL), we won''t need to modify the schema again because it will show everything:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `get` method in `RecipeResource` to serialize the `recipe` object
    into JSON format using the recipe schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is mainly to modify the code to use `recipe_schema.dump(recipe).data` to
    return the recipe details by using the recipe schema.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Right-click on it to run the application. Flask will then be started up and
    run on the localhost (`127.0.0.1`) at port `5000`:![Figure 5.18: Run Flask on
    the localhost'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_05_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.18: Run Flask on the localhost'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Test the implementation by getting one specific published recipe in Postman.
    Select the `http://localhost:5000/recipes/4` in **Enter request URL**. Click **Send**
    to get specific recipe details. The result is shown in the following screenshot:![Figure
    5.19: Select the GET Recipe request and send the request'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_05_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 5.19: Select the GET Recipe request and send the request'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You will then see the return response. The HTTP status code `created_at`.
  prefs: []
  type: TYPE_NORMAL
- en: '6: Email Confirmations'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 9: Testing the Complete User Registration and Activation Workflow'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: We will first register a new user through Postman. Click on the **Collections**
    tab and choose the **POST UserList** request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Body** tab and then select the **raw** radio button and choose
    **JSON (application/json)** from the drop-down list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Put in the following user details (in JSON format) in the **Body** field. Change
    the username and password to the appropriate one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the request. You should see the following output:![Figure 6.10: Registering
    a user through Postman'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.10: Registering a user through Postman'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You should see the new user details (**ID = 4**) in the response, with **HTTP
    status 201 OK**. That means the new user was created successfully in the backend.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in through the API and click on the **Collections** tab. Then, select the
    **POST Token** request we created before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Body** tab. Check the **raw** radio button and select **JSON(application/json)**
    from the drop-down menu.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type in the following JSON content (email and password) in the **Body** field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the request. You should see the following output:![Figure 6.11: Sending
    the request using JSON'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.11: Sending the request using JSON'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: You should get a message saying the user account is not activated yet, with
    **HTTP status 403 Forbidden**. This is expected behavior because our application
    would require the user to activate the account first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Please check your mailbox for the activation email. There should be a link
    there for you to activate the user''s account. Click on that link to activate
    the account. It should look as follows:![Figure 6.12: Activation mail'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.12: Activation mail'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Log in again after the account is activated. Click on the **Collections** tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the **POST Token** request that we created earlier and send the request.
    You''ll see the following:![Figure 6.13: After activating the account, select
    the POST Token request'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.13: After activating the account, select the POST Token request'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You should see the access token and the refresh token in the response, with
    HTTP status **200 OK**. That means the login was successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 10: Creating the HTML Format User Account Activation Email'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click `Mailgun` dashboard, then add the email of our new user to the authorized
    recipient list on the right. `Mailgun` will then send a confirmation email to
    that email address:![Figure 6.14: Sending a confirmation email to our new user'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.14: Sending a confirmation email to our new user'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Since we are using the sandbox version of `Mailgun`, there is a limitation on
    sending out emails to external email addresses. These emails have to be added
    to the authorized recipient list first.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Check the mailbox of the new user, and click **I Agree**. This will be as shown
    in the following screenshot:![Figure 6.15: The mailbox of a new user with an email
    from Mailgun'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.15: The mailbox of a new user with an email from Mailgun'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'On the confirmation page, click **yes** to activate the account. The screen
    will appear as follows:![Figure 6.16: Activation complete message'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.16: Activation complete message'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'HTML template code is provided by `Mailgun` out of the box. We can find it
    under **Sending > Templates**. There, click **Create Message Template** and select
    **Action template**. We will find a template for a confirmation email and preview
    it:![Figure 6.17: Previewing the confirm email address template'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.17: Previewing the confirm email address template'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Then, create a **templates** folder under our project. We will put all the HTML
    templates in this folder going forward. Inside the **templates** folder, create
    a subfolder, **email**, for email-related HTML templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, create a template file, `confirmation.html`, and paste the sample HTML
    code from `Mailgun` in *step 4*. Take a look at the sample HTML code from `Mailgun`
    that follows:![Figure 6.18: Sample HTML code from Mailgun'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.18: Sample HTML code from Mailgun'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Please note that we need to change the [http://www.mailgun.com](http://www.mailgun.com)
    link to `{{link}}`. This placeholder will be replaced programmatically with the
    account activation link.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Import the `render_template` function from Flask by entering the following
    line of code in `resources/user.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `send_mail` method. The HTML code can be rendered using the `render_template`
    function. You can see that the `link = link` parameter here is to replace the
    `{{link}}` placeholder in the HTML template with the actual account validation
    link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register a new account using Postman:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
- en: Please note that the email address was validated in `Mailgun` beforehand.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.19: Registering a new account using Postman'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C15309_06_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.19: Registering a new account using Postman'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The account activation email will then be received in HTML format. The output
    is shown in the following screenshot:![Figure 6.20: Account confirmation email'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_06_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 6.20: Account confirmation email'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '7: Working with Images'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 11: Implementing the Recipe Cover Image Upload Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `cover_image` attribute to the User model in `models/recipe.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `cover_image` attribute will contain the image filename as a string, with
    a maximum length of 100 characters.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Use the flask db migrate command to generate a database table update script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that a new column, `''recipe.cover_image''`, has been detected:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the script at `/migrations/versions/xxxxxxxxxx_.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: From its content, we can see that two functions have been generated in the script.
    The `upgrade` function is used to add the new `cover_image` column to the database
    table, while the `downgrade` function is used to remove the `cover_image` column
    so that it goes back to its original state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the `flask db upgrade` command to update the database and reflect the change
    in the **User** model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After running the preceding command, we should see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the new `cover_image` column in pgAdmin:![Figure 7.10: The cover_image
    column in pgAdmin'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.10: The cover_image column in pgAdmin'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: This confirms that the new `cover_image` column has been added to the recipe
    table.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In `schemas/recipe.py`, import the `url_for` package and add the `cover_url`
    attribute and the `dump_cover_url` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `default-recipe-cover.jpg` image to `static/images`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 7.11: Folder structure after adding default-recipe-cover.jpg'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/C15309_07_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.11: Folder structure after adding default-recipe-cover.jpg'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'In `resources/recipe.py`, add the import `os`, `image_set`, and `save_image`
    functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `resources/recipe.py`, add the `RecipeCoverUpload` resource to upload the
    recipe cover to the recipes folder:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `@jwt_required` decorator before the `PUT` method states that the method
    can only be called after the user logs in. In the `PUT` method, we are trying
    to get the cover image file in `request.files`. Then, we are trying to verify
    whether it exists and whether the file extension is permitted.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After that, we retrieved the recipe object using `recipe_id`. First, we check
    whether a user has the right to modify the recipe. If the user has the right to,
    we will go ahead and modify the cover image of the recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we use the `save_image` function to save the uploaded image and set the
    `recipe.cover_image = filename`. Finally, we save the recipe using `recipe.save()`
    and return the image URL with an HTTP status code of **200**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `app.py`, import RecipeCoverUploadResource:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `app.py`, link `RecipeCoverUploadResource` to the route, that is, `/recipes/<int:recipe_id>/cover`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, we have created the function for uploading the recipe cover image. Let's
    move on and test it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 12: Testing the Image Upload Function'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in to the user account using Postman. Click on the **Collections** tab
    and select the **POST Token** request. Then, click the **Send** button. The result
    can be seen in the following screenshot:![Figure 7.12: Sending a POST Token request'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.12: Sending a POST Token request'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Send a client request to our API to create a recipe and click on the **Collections**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `Authorization` in the `Bearer {token}` in the **VALUE** field,
    where the token is the access token we retrieved in the previous step. Then, click
    the **Send** button. The result can be seen in the following screenshot:![Figure
    7.13: Sending a client request to our API to create a recipe'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.13: Sending a client request to our API to create a recipe'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Upload the recipe images. Click on the `Recipe` folder to create a new request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set the `RecipeCoverUpload` and save it in the `Recipe` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select `PUT` as the HTTP method and type in `http://localhost:5000/recipes/<recipe_id>/cover`
    as the request URL (replace `<recipe_id>` with the recipe ID we got from the previous
    step).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `Authorization` in the `Bearer {token}` in the **VALUE** field, where
    the token is the access token we retrieved in the previous step.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Body** tab. Then, select the form-data radio button and type cover
    into **KEY**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **File** in the drop-down menu next to **KEY** and select the image file
    to upload.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Save** button and then the **Send** button. The result can be seen
    in the following screenshot:![Figure 7.14: Uploading a recipe image'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.14: Uploading a recipe image'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check whether the image has been compressed in PyCharm. We can see from the
    application log in PyCharm that the file size has been reduced by `97%`:![Figure
    7.15: Checking whether the images are compressed in PyCharm'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.15: Checking whether the images are compressed in PyCharm'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Check the uploaded image in `static/images/recipes`:![Figure 7.16: Checking
    the uploaded image in the path'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.16: Checking the uploaded image in the path'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Get the recipe back and confirm that the `cover_url` attribute is populated.
    Now, click on the `http://localhost:5000/recipes/5` into the **URL** field. You
    may replace the recipe ID, that is, 5, with any ID that is appropriate. Then,
    click the **Send** button. The result can be seen in the following screenshot:![Figure
    7.17: Getting the recipe back and confirming that the cover_url attribute is populated'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_07_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 7.17: Getting the recipe back and confirming that the cover_url attribute
    is populated'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Congratulations! We have tested the recipe cover image upload function. It works
    great!
  prefs: []
  type: TYPE_NORMAL
- en: '8: Pagination, Searching, and Ordering'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 13: Implementing Pagination on the User-Specific Recipe Retrieval
    API'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the code in the `get_all_by_user` method under `models/recipe.py`, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `RecipePaginationSchema` into `resources/user.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Declare the `recipe_pagination_schema` attribute in `resources/user.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, we''ve added the `@user_kwargs` decorator to `UserRecipeListResource.get`.
    It takes a few parameters, including `page`, `per_page`, and `visibility`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `UserRecipeListResource.get` method in `resources/user.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `Recipe.get_all_by_user` method gets the paginated recipes by a particular
    author, and then lets `recipe_pagination_schema` serialize the paginated object
    and return it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Activity 14: Testing Pagination on the User-Specific Recipe Retrieval API'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: Get all the recipes under John using Postman, page by page, with a page size
    of two. First, click on the `UserRecipeList` request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `http://localhost:5000/{username}/recipes` into the `{username}` here should
    be the same as the one we inserted in the previous exercise. In our case, it will
    be `john`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the `per_page`, `2`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Send the request. The result is shown in the following screenshot:![Figure
    8.9: Getting all the recipes under John using Postman'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_08_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.9: Getting all the recipes under John using Postman'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: In the details of the recipe, we can see that there are links with the URLs
    of the `first`, `last`, and `next` pages. We can't see the **prev** page here
    because we are on the first page. There is a total of four pages, and we have
    two records per page. We can also see the sorted recipe details in the HTTP response.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Click the next URL in links to query for the next two records in Postman with
    the request URL populated (`http://localhost:5000/users/john/recipes?per_page=2&page=2`).
    Then, we just need to click on **Send** to send the request. The result is shown
    in the following screenshot:![Figure 8.10: Querying for the next two records in
    Postman with the request URL populated'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_08_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.10: Querying for the next two records in Postman with the request
    URL populated'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From the result, we can see that there are links to the `first`, `last`, `next`,
    and `prev` pages. We can also see that we are currently on page two. All the recipe
    data is there as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15: Searching for Recipes with Specific Ingredients'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, in `models/recipe.py`, add the `ingredients` attribute to the `Recipe`
    model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following command to generate a database migration script:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see that a new column called `recipe.ingredients` has been detected:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the content in `/migrations/versions/0876058ed87e_.py`, which is the
    database migration script that was generated in the previous step:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we can see that two functions have been generated in the script. The `upgrade`
    function is used to add the new column, `ingredients`, to the recipe table, whereas
    the `downgrade` function is used to remove the `ingredients` column so that it
    goes back to its original state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Run the following `flask db upgrade` command to update the database schema:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `schemas/recipe.py`, add the `ingredients` attribute to `RecipeSchema`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `RecipeResource.patch` method in `resources/recipe.py` to be able
    to update `ingredients`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the `Recipe.get_all_published` method in `models/recipe.py` so that
    it gets all the published recipes that it can through the ingredients:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`Right-click` on it to run the application. Flask will then start up and run
    on `localhost` (`127.0.0.1`) at port `5000`:![Figure 8.11: Running Flask on the
    localhost'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_03_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.11: Running Flask on the localhost'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Log in to a user account and create two recipes by running the following `httpie`
    command in the PyCharm console. The `{token}` placeholder should be replaced with
    the access token:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Publish these two recipes by using the following `httpie` command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Search for recipes that contain the `eggs` string in the name, description,
    or ingredients. Click on the `RecipeList` request and select the `q`, `eggs`)
    and send the request. The result is shown in the following screenshot:![Figure
    8.12: Searching for the eggs ingredient by sending a request'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_08_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 8.12: Searching for the eggs ingredient by sending a request'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: From the preceding search result, we can see that there is a recipe with eggs
    in the ingredients.
  prefs: []
  type: TYPE_NORMAL
- en: '9: Building More Features'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 16: Getting Cache Data after Updating Recipe Details'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get all the recipe data back, click on `RecipeList` and send the request. The
    result is shown in the following screenshot:![Figure 9.15: Get the recipe data
    back and send the request'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_09_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.15: Get the recipe data back and send the request'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Log in to your account, click on the **Collections** tab and select the **POST**
    **Token** request. Then, send the request. The result is shown in the following
    screenshot:![Figure 9.16: Select the POST Token request and send it'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_09_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.16: Select the POST Token request and send it'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Modify a recipe record using the `PATCH` method. First, select the `PATCH Recipe`
    request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now select the `Bearer {token}`; the token should be the access token.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select the `num_of_servings` to `5`, and `cook_time` to `50`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Send the request. The result is shown in the following screenshot:![Figure
    9.17: Modifying a recipe record using the PATCH method'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_09_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.17: Modifying a recipe record using the PATCH method'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Get all the recipe data back again, click on `RecipeList`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Send the request. The result is shown in the following screenshot:![Figure
    9.18: Get all the recipe data back again'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_09_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.18: Get all the recipe data back again'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: We can see that when we get all the recipe details again, the details are not
    updated, which will cause the user to see the wrong information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 17: Adding Multiple Rate-Limit Restrictions'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'In `resources/user.py`, import `limiter` from `extensions`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `UserRecipeListResource`, put the `limiter.limit` function in the `decorators`
    attribute:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Comment out the whitelist in `app.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In PyCharm, to comment out a line of code, if you are using Mac, you can use
    *Command + /*, and if you are using Windows, you can use *Ctrl + /*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'When we are done, click **Run** to start the Flask application; then, we are
    ready to test it:![Figure 9.19: Starting the Flask application'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_09_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 9.19: Starting the Flask application'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: Get all the recipes for a user and check the rate limit information in the response
    header. First, click on `UserRecipeList` and send the request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, select the **Header** tab in **Response**. The result is shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 9.20: Checking the rate limit information in the response header'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/C15309_09_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 9.20: Checking the rate limit information in the response header'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: In the HTTP response, we can see that the rate limit for this endpoint is three,
    while we only have two remaining request quotas. The limit is going to be reset
    in 60 seconds.
  prefs: []
  type: TYPE_NORMAL
- en: '10: Deployment'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activity 18: Changing access_token to a Variable in Postman'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Solution**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform user login and get the access token. Use the **POST Token** request
    to get the access token. You should see the following output:![Figure 10.26: Performing
    user login to get an access token'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_10_29.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.29: Performing user login to get an access token'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Click `access_token` variable. The value is the access token we obtained in
    the previous step. Then, click **Update**:![Figure 10.27: Adding more environment
    variables in Postman'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/C15309_10_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 10.30: Adding more environment variables in Postman'
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Select the `Bearer {{access_token}}`, which is the environment variable we
    added in the previous step, and then send the request. You should see the following
    output:![Figure 10.28: Using more environment variables in Postman](img/C15309_10_31.jpg)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Figure 10.31: Using more environment variables in Postman'
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
