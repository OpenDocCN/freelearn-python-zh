["```py\nimport mraa\nimport time\n\nif __name__ == \"__main__\":\n    print (\"Mraa library version: {0}\".format(mraa.getVersion()))\n    print (\"Mraa detected platform name: {0}\".format(mraa.getPlatformName()))\n\n    # Configure GPIO pin #13 to be an output pin\n    onboard_led = mraa.Gpio(13)\n    onboard_led.dir(mraa.DIR_OUT)\n\n    while True:\n        # Turn on the onboard LED\n        onboard_led.write(1)\n        print(\"I've turned on the onboard LED.\")\n        # Sleep 3 seconds\n        time.sleep(3)\n        # Turn off the onboard LED\n        onboard_led.write(0)\n        print(\"I've turned off the onboard LED.\")\n        time.sleep(2)\n```", "```py\npwd\n```", "```py\n/home/root\n```", "```py\npython iot_python_chapter_03_01.py\n```", "```py\nMraa library version: v0.9.0\nMraa detected platform name: Intel Galileo Gen 2\nSetting GPIO Pin #13 to dir DIR_OUT\nI've turned on the onboard LED.\nI've turned off the onboard LED.\nI've turned on the onboard LED.\nI've turned off the onboard LED.\n```", "```py\nonboard_led = mraa.Gpio(13)\n```", "```py\nonboard_led.dir(mraa.DIR_OUT)\n```", "```py\nonboard_led.write(1)\n```", "```py\ntime.sleep(3)\n```", "```py\nonboard_led.write(0)\n```", "```py\nshutdown\n```", "```py\nShutdown scheduled for Mon 2016-01-25 23:50:04 UTC, use 'shutdown -c' to cancel.\nroot@galileo:~# \nBroadcast message from root@galileo (Mon 2016-01-25 23:49:04 UTC):\n\nThe system is going down for power-off at Mon 2016-01-25 23:50:04 UTC!\n```", "```py\nimport mraa\nimport time\n\nif __name__ == \"__main__\":\n    print (\"Mraa library version: {0}\".format(mraa.getVersion()))\n    print (\"Mraa detected platform name: {0}\".format(mraa.getPlatformName()))\n\n    # Configure GPIO pins #1 to 9 to be output pins\n    output = []\n    for i in range(1, 10):\n        gpio = mraa.Gpio(i)\n        gpio.dir(mraa.DIR_OUT)\n        output.append(gpio)\n\n    # Count from 1 to 9\n    for i in range(1, 10):\n        print(\"==== Turning on {0} LEDs ====\".format(i))\n        for j in range(0, i):\n            output[j].write(1)\n            print(\"I've turned on the LED connected to GPIO Pin #{0}.\".format(j + 1))\n        time.sleep(3)\n```", "```py\npython iot_python_chapter_03_02.py\n```", "```py\nMraa library version: v0.9.0\nMraa detected platform name: Intel Galileo Gen 2\nSetting GPIO Pin #1 to dir DIR_OUT\nSetting GPIO Pin #2 to dir DIR_OUT\nSetting GPIO Pin #3 to dir DIR_OUT\nSetting GPIO Pin #4 to dir DIR_OUT\nSetting GPIO Pin #5 to dir DIR_OUT\nSetting GPIO Pin #6 to dir DIR_OUT\nSetting GPIO Pin #7 to dir DIR_OUT\nSetting GPIO Pin #8 to dir DIR_OUT\nSetting GPIO Pin #9 to dir DIR_OUT\n==== Turning on 1 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\n==== Turning on 2 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\n==== Turning on 3 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\n==== Turning on 4 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\nI've turned on the LED connected to GPIO Pin #4.\n==== Turning on 5 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\nI've turned on the LED connected to GPIO Pin #4.\nI've turned on the LED connected to GPIO Pin #5.\n==== Turning on 6 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\nI've turned on the LED connected to GPIO Pin #4.\nI've turned on the LED connected to GPIO Pin #5.\nI've turned on the LED connected to GPIO Pin #6.\n==== Turning on 7 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\nI've turned on the LED connected to GPIO Pin #4.\nI've turned on the LED connected to GPIO Pin #5.\nI've turned on the LED connected to GPIO Pin #6.\nI've turned on the LED connected to GPIO Pin #7.\n==== Turning on 8 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\nI've turned on the LED connected to GPIO Pin #4.\nI've turned on the LED connected to GPIO Pin #5.\nI've turned on the LED connected to GPIO Pin #6.\nI've turned on the LED connected to GPIO Pin #7.\nI've turned on the LED connected to GPIO Pin #8.\n==== Turning on 9 LEDs ====\nI've turned on the LED connected to GPIO Pin #1.\nI've turned on the LED connected to GPIO Pin #2.\nI've turned on the LED connected to GPIO Pin #3.\nI've turned on the LED connected to GPIO Pin #4.\nI've turned on the LED connected to GPIO Pin #5.\nI've turned on the LED connected to GPIO Pin #6.\nI've turned on the LED connected to GPIO Pin #7.\nI've turned on the LED connected to GPIO Pin #8.\nI've turned on the LED connected to GPIO Pin #9.\n```", "```py\noutput = []\nfor i in range(1, 10):\n    gpio = mraa.Gpio(i)\n    gpio.dir(mraa.DIR_OUT)\n    output.append(gpio)\n```", "```py\nfor i in range(1, 10):\n    print(\"==== Turning on {0} LEDs ====\".format(i))\n    for j in range(0, i):\n        output[j].write(1)\n        print(\"I've turned on the LED connected to GPIO Pin #{0}.\".format(j + 1))\n    time.sleep(3)\n```", "```py\nimport mraa\nimport time\n\nclass Led:\n    def __init__(self, pin):\n        self.gpio = mraa.Gpio(pin)\n        self.gpio.dir(mraa.DIR_OUT)\n\n    def turn_on(self):\n        self.gpio.write(1)\n        print(\"I've turned on the LED connected to GPIO Pin #{0}.\".format(self.gpio.getPin()))\n\n    def turn_off(self):\n        self.gpio.write(0)\n        print(\"I've turned off the LED connected to GPIO Pin #{0}.\".format(self.gpio.getPin()))\n```", "```py\nif __name__ == \"__main__\":\n    print (\"Mraa library version: {0}\".format(mraa.getVersion()))\n    print (\"Mraa detected platform name: {0}\".format(mraa.getPlatformName()))\n\n    # Configure GPIO pins #1 to 9 to be output pins\n    leds = []\n    for i in range(1, 10):\n        led = Led(i)\n        leds.append(led)\n\n    # Count from 1 to 9\n    for i in range(1, 10):\n        print(\"==== Turning on {0} LEDs ====\".format(i))\n        for j in range(0, i):\n            leds[j].turn_on()\n        for k in range(i, 9):\n            leds[k].turn_off()\n        time.sleep(3)\n```", "```py\nif __name__ == \"__main__\":\n    print (\"Mraa library version: {0}\".format(mraa.getVersion()))\n    print (\"Mraa detected platform name: {0}\".format(mraa.getPlatformName()))\n\n    # Configure GPIO pins #1 to 9 to be output pins\n    leds = []\n    for i in range(1, 10):\n        led = Led(i)\n        leds.append(led)\n\n    # Count from 9 to 1\n for i in range(9, 0, -1):\n        print(\"==== Turning on {0} LEDs ====\".format(i))\n        for j in range(0, i):\n            leds[j].turn_on()\n        for k in range(i, 9):\n            leds[k].turn_off()\n        time.sleep(3)\n```", "```py\nclass NumberInLeds:\n    def __init__(self):\n        self.leds = []\n        for i in range(1, 10):\n            led = Led(i)\n            self.leds.append(led)\n\n    def print_number(self, number):\n        print(\"==== Turning on {0} LEDs ====\".format(number))\n        for j in range(0, number):\n            self.leds[j].turn_on()\n        for k in range(number, 9):\n            self.leds[k].turn_off()\n```", "```py\nif __name__ == \"__main__\":\n    print (\"Mraa library version: {0}\".format(mraa.getVersion()))\n    print (\"Mraa detected platform name: {0}\".format(mraa.getPlatformName()))\n\n    number_in_leds = NumberInLeds()\n    # Count from 0 to 9\n    for i in range(0, 10):\n        number_in_leds.print_number(i)\n        time.sleep(3)\n```", "```py\nimport mraa\nimport time\n\nclass Led:\n def __init__(self, pin, position):\n self.position = position\n        self.gpio = mraa.Gpio(pin)\n        self.gpio.dir(mraa.DIR_OUT)\n\n    def turn_on(self):\n        self.gpio.write(1)\n print(\"I've turned on the LED connected to GPIO Pin #{0}, in position {1}.\".format(self.gpio.getPin(), self.position))\n\n    def turn_off(self):\n        self.gpio.write(0)\n print(\"I've turned off the LED connected to GPIO Pin #{0}, in position {1}.\".format(self.gpio.getPin(), self.position))\n\n```", "```py\nclass NumberInLeds:\n    def __init__(self):\n        self.leds = []\n for i in range(9, 0, -1):\n led = Led(i, 10 - i)\n            self.leds.append(led)\n\n    def print_number(self, number):\n        print(\"==== Turning on {0} LEDs ====\".format(number))\n        for j in range(0, number):\n            self.leds[j].turn_on()\n        for k in range(number, 9):\n            self.leds[k].turn_off()\n```", "```py\nif __name__ == \"__main__\":\n    print (\"Mraa library version: {0}\".format(mraa.getVersion()))\n    print (\"Mraa detected platform name: {0}\".format(mraa.getPlatformName()))\n\n    number_in_leds = NumberInLeds()\n    # Count from 0 to 9\n    for i in range(0, 10):\n        number_in_leds.print_number(i)\n        time.sleep(3)\n```", "```py\nfrom wiringx86 import GPIOGalileoGen2 as GPIO\nimport time\n\nclass Board:\n    gpio = GPIO(debug=False)\n\nclass Led:\n    def __init__(self, pin, position):\n        self.pin = pin\n        self.position = position\n        self.gpio = Board.gpio\n        self.gpio.pinMode(pin, self.gpio.OUTPUT)\n\n    def turn_on(self):\n        self.gpio.digitalWrite(self.pin, self.gpio.HIGH)\n        print(\"I've turned on the LED connected to GPIO Pin #{0}, in position {1}.\".format(self.pin, self.position))\n\n    def turn_off(self):\n        self.gpio.digitalWrite(self.pin, self.gpio.LOW)\n        print(\"I've turned off the LED connected to GPIO Pin #{0}, in position {1}.\".format(self.pin, self.position))\n```", "```py\nclass NumberInLeds:\n    def __init__(self):\n        self.leds = []\n        for i in range(9, 0, -1):\n            led = Led(i, 10 - i)\n            self.leds.append(led)\n\n    def print_number(self, number):\n        print(\"==== Turning on {0} LEDs ====\".format(number))\n        for j in range(0, number):\n            self.leds[j].turn_on()\n        for k in range(number, 9):\n            self.leds[k].turn_off()\n\nif __name__ == \"__main__\":\n    print (\"Working with wiring-x86 on Intel Galileo Gen 2\")\n\n    number_in_leds = NumberInLeds()\n    # Count from 0 to 9\n    for i in range(0, 10):\n        number_in_leds.print_number(i)\n        time.sleep(3)\n```"]