["```py\n$pip install supervisor\n\n```", "```py\n[unix_http_server]\nfile=/tmp/supervisor.sock   ; (the path to the socket file)\nchmod=0700                 ; socket file mode (default 0700)\n\n[supervisord]\nlogfile=/tmp/supervisord.log \nloglevel=info                \npidfile=/tmp/supervisord.pid \nnodaemon=true               \n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[program:8_2_multithreaded_multicall_xmlrpc_server.py]\ncommand=python 8_2_multithreaded_multicall_xmlrpc_server.py ; the \nprogram (relative uses PATH, can take args)\nprocess_name=%(program_name)s ; process_name expr (default \n%(program_name)s)\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\nimport supervisor.xmlrpc\nimport xmlrpclib\n\ndef query_supervisr(sock):\n    transport = supervisor.xmlrpc.SupervisorTransport(None, None,\n                'unix://%s' %sock)\n    proxy = xmlrpclib.ServerProxy('http://127.0.0.1',\n            transport=transport)\n    print \"Getting info about all running processes via Supervisord...\"\n    print proxy.supervisor.getAllProcessInfo()\n\nif __name__ == '__main__':\n    query_supervisr(sock='/tmp/supervisor.sock')\n```", "```py\nchapter8$ supervisord\n2013-09-27 16:40:56,861 INFO RPC interface 'supervisor' initialized\n2013-09-27 16:40:56,861 CRIT Server 'unix_http_server' running \nwithout any HTTP authentication checking\n2013-09-27 16:40:56,861 INFO supervisord started with pid 27436\n2013-09-27 16:40:57,864 INFO spawned: \n'8_2_multithreaded_multicall_xmlrpc_server.py' with pid 27439\n2013-09-27 16:40:58,940 INFO success: \n8_2_multithreaded_multicall_xmlrpc_server.py entered RUNNING state, \nprocess has stayed up for > than 1 seconds (startsecs)\n\n```", "```py\n$ python 8_1_query_xmlrpc_server.py \nGetting info about all running processes via Supervisord...\n[{'now': 1380296807, 'group': \n'8_2_multithreaded_multicall_xmlrpc_server.py', 'description': 'pid \n27439, uptime 0:05:50', 'pid': 27439, 'stderr_logfile': \n'/tmp/8_2_multithreaded_multicall_xmlrpc_server.py-stderr---\nsupervisor-i_VmKz.log', 'stop': 0, 'statename': 'RUNNING', 'start': \n1380296457, 'state': 20, 'stdout_logfile': \n'/tmp/8_2_multithreaded_multicall_xmlrpc_server.py-stdout---\nsupervisor-eMuJqk.log', 'logfile': \n'/tmp/8_2_multithreaded_multicall_xmlrpc_server.py-stdout---\nsupervisor-eMuJqk.log', 'exitstatus': 0, 'spawnerr': '', 'name': \n'8_2_multithreaded_multicall_xmlrpc_server.py'}]\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport xmlrpclib\nimport threading\n\nfrom SimpleXMLRPCServer import SimpleXMLRPCServer\n\n# some trivial functions\ndef add(x,y):\n  return x+y\n\ndef subtract(x, y):\n  return x-y\n\ndef multiply(x, y):\n  return x*y\n\ndef divide(x, y):\n  return x/y\n\nclass ServerThread(threading.Thread):\n  def __init__(self, server_addr):\n    threading.Thread.__init__(self)\n    self.server = SimpleXMLRPCServer(server_addr)\n    self.server.register_multicall_functions()\n    self.server.register_function(add, 'add')\n    self.server.register_function(subtract, 'subtract')\n    self.server.register_function(multiply, 'multiply')\n    self.server.register_function(divide, 'divide')\n\n  def run(self):\n    self.server.serve_forever()\n\ndef run_server(host, port):\n  # server code\n  server_addr = (host, port)\n  server = ServerThread(server_addr)\n  server.start() # The server is now running\n  print \"Server thread started. Testing the server...\"\n\ndef run_client(host, port):\n  # client code\n  proxy = xmlrpclib.ServerProxy(\"http://%s:%s/\" %(host, port))\n  multicall = xmlrpclib.MultiCall(proxy)\n  multicall.add(7,3)\n  multicall.subtract(7,3)\n  multicall.multiply(7,3)\n  multicall.divide(7,3)\n  result = multicall()\n  print \"7+3=%d, 7-3=%d, 7*3=%d, 7/3=%d\" % tuple(result)\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser(description='Multithreaded \nmulticall XMLRPC Server/Proxy')\n  parser.add_argument('--host', action=\"store\", dest=\"host\", \ndefault='localhost')\n  parser.add_argument('--port', action=\"store\", dest=\"port\", \ndefault=8000, type=int)\n  # parse arguments\n  given_args = parser.parse_args()\n  host, port =  given_args.host, given_args.port\n  run_server(host, port)\n  run_client(host, port)\n```", "```py\n$ python 8_2_multithreaded_multicall_xmlrpc_server.py --port=8000\nServer thread started. Testing the server...\nlocalhost - - [25/Sep/2013 17:38:32] \"POST / HTTP/1.1\" 200 -\n7+3=10, 7-3=4, 7*3=21, 7/3=2 \n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport xmlrpclib\nfrom base64 import b64decode\nfrom SimpleXMLRPCServer  import SimpleXMLRPCServer, SimpleXMLRPCRequestHandler\n\nclass SecureXMLRPCServer(SimpleXMLRPCServer):\n\n  def __init__(self, host, port, username, password, *args, \n**kargs):\n    self.username = username\n    self.password = password\n    # authenticate method is called from inner class\n    class VerifyingRequestHandler(SimpleXMLRPCRequestHandler):\n      # method to override\n      def parse_request(request):\n        if\\ SimpleXMLRPCRequestHandler.parse_request(request):\n        # authenticate\n          if self.authenticate(request.headers):\n        return True\n          else:\n            # if authentication fails return 401\n              request.send_error(401, 'Authentication\\ failed \nZZZ')\n            return False\n          # initialize\n         SimpleXMLRPCServer.__init__(self, (host, port), \nrequestHandler=VerifyingRequestHandler, *args, **kargs)\n\n  def authenticate(self, headers):\n    headers = headers.get('Authorization').split()\n    basic, encoded = headers[0], headers[1]\n    if basic != 'Basic':\n      print 'Only basic authentication supported'\n    return False\n    secret = b64decode(encoded).split(':')\n    username, password = secret[0], secret[1]\n  return True if (username == self.username and password == \nself.password) else False\n\ndef run_server(host, port, username, password):\n  server = SecureXMLRPCServer(host, port, username, password)\n  # simple test function\n  def echo(msg):\n    \"\"\"Reply client in  upper case \"\"\"\n    reply = msg.upper()\n    print \"Client said: %s. So we echo that in uppercase: %s\" \n%(msg, reply)\n  return reply\n  server.register_function(echo, 'echo')\n  print \"Running a HTTP auth enabled XMLRPC server on %s:%s...\" \n%(host, port)\n  server.serve_forever()\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser(description='Multithreaded \nmulticall XMLRPC Server/Proxy')\n  parser.add_argument('--host', action=\"store\", dest=\"host\", \ndefault='localhost')\n  parser.add_argument('--port', action=\"store\", dest=\"port\", default=8000, type=int)\n  parser.add_argument('--username', action=\"store\", \ndest=\"username\", default='user')\n  parser.add_argument('--password', action=\"store\", \ndest=\"password\", default='pass')\n  # parse arguments\n  given_args = parser.parse_args()\n  host, port =  given_args.host, given_args.port\n  username, password = given_args.username, given_args.password\n  run_server(host, port, username, password)\n```", "```py\n$ python 8_3a_xmlrpc_server_with_http_auth.py \nRunning a HTTP auth enabled XMLRPC server on localhost:8000...\nClient said: hello server.... So we echo that in uppercase: HELLO \nSERVER...\nlocalhost - - [27/Sep/2013 12:08:57] \"POST /RPC2 HTTP/1.1\" 200 -\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport xmlrpclib\n\ndef run_client(host, port, username, password):\n  server = xmlrpclib.ServerProxy('http://%s:%s@%s:%s' %(username, \npassword, host, port, ))\n  msg = \"hello server...\"\n  print \"Sending message to server: %s  \" %msg\n  print \"Got reply: %s\" %server.echo(msg)\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser(description='Multithreaded \nmulticall XMLRPC Server/Proxy')\n  parser.add_argument('--host', action=\"store\", dest=\"host\", \ndefault='localhost')\n  parser.add_argument('--port', action=\"store\", dest=\"port\", \ndefault=8000, type=int)\n  parser.add_argument('--username', action=\"store\", \ndest=\"username\", default='user')\n  parser.add_argument('--password', action=\"store\", \ndest=\"password\", default='pass')\n  # parse arguments\n  given_args = parser.parse_args()\n  host, port =  given_args.host, given_args.port\n  username, password = given_args.username, given_args.password\n  run_client(host, port, username, password)\n```", "```py\n$ python 8_3b_xmprpc_client.py \nSending message to server: hello server... \nGot reply: HELLO SERVER...\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport json\nimport requests\n\ntry:\n    from local_settings import flickr_apikey\nexcept ImportError:\n    pass\n\ndef collect_photo_info(api_key, tag, max_count):\n    \"\"\"Collects some interesting info about some photos from Flickr.com for a given tag \"\"\"\n    photo_collection = []\n    url =  \"http://api.flickr.com/services/rest/?method=flickr.photos.search&tags=%s&format=json&nojsoncallback=1&api_key=%s\" %(tag, api_key)\n    resp = requests.get(url)\n    results = resp.json()\n    count  = 0\n    for p in results['photos']['photo']:\n        if count >= max_count:\n            return photo_collection\n        print 'Processing photo: \"%s\"' % p['title']\n        photo = {}\n        url = \"http://api.flickr.com/services/rest/?method=flickr.photos.getInfo&photo_id=\" + p['id'] + \"&format=json&nojsoncallback=1&api_key=\" + api_key\n        info = requests.get(url).json()\n        photo[\"flickrid\"] = p['id']\n        photo[\"title\"] = info['photo']['title']['_content']\n        photo[\"description\"] = info['photo']['description']['_content']\n        photo[\"page_url\"] = info['photo']['urls']['url'][0]['_content']\n\n        photo[\"farm\"] = info['photo']['farm']\n        photo[\"server\"] = info['photo']['server']\n        photo[\"secret\"] = info['photo']['secret']\n\n        # comments\n        numcomments = int(info['photo']['comments']['_content'])\n        if numcomments:\n            #print \"   Now reading comments (%d)...\" % numcomments\n            url = \"http://api.flickr.com/services/rest/?method=flickr.photos.comments.getList&photo_id=\" + p['id'] + \"&format=json&nojsoncallback=1&api_key=\" + api_key\n            comments = requests.get(url).json()\n            photo[\"comment\"] = []\n            for c in comments['comments']['comment']:\n                comment = {}\n                comment[\"body\"] = c['_content']\n                comment[\"authorid\"] = c['author']\n                comment[\"authorname\"] = c['authorname']\n                photo[\"comment\"].append(comment)\n        photo_collection.append(photo)\n        count = count + 1\n    return photo_collection     \n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Get photo info from Flickr')\n    parser.add_argument('--api-key', action=\"store\", dest=\"api_key\", default=flickr_apikey)\n    parser.add_argument('--tag', action=\"store\", dest=\"tag\", default='Python')\n    parser.add_argument('--max-count', action=\"store\", dest=\"max_count\", default=3, type=int)\n    # parse arguments\n    given_args = parser.parse_args()\n    api_key, tag, max_count =  given_args.api_key, given_args.tag, given_args.max_count\n    photo_info = collect_photo_info(api_key, tag, max_count)\n    for photo in photo_info:\n        for k,v in photo.iteritems():\n            if k == \"title\":\n                print \"Showing photo info....\"  \n            elif k == \"comment\":\n                \"\\tPhoto got %s comments.\" %len(v)\n            else:\n                print \"\\t%s => %s\" %(k,v) \n```", "```py\n$ python 8_4_get_flickr_photo_info.py \nProcessing photo: \"legolas\"\nProcessing photo: \"\"The Dance of the Hunger of Kaa\"\"\nProcessing photo: \"Rocky\"\n description => Stimson Python\nShowiing photo info....\n farm => 8\n server => 7402\n secret => 6cbae671b5\n flickrid => 10054626824\n page_url => http://www.flickr.com/photos/102763809@N03/10054626824/\n description => &quot; 'Good. Begins now the dance--the Dance of the Hunger of Kaa. Sit still and watch.'\n\nHe turned twice or thrice in a big circle, weaving his head from right to left. \nThen he began making loops and figures of eight with his body, and soft, oozy triangles that melted into squares and five-sided figures, and coiled mounds, never resting, never hurrying, and never stopping his low humming song. It grew darker and darker, till at last the dragging, shifting coils disappeared, but they could hear the rustle of the scales.&quot;\n(From &quot;Kaa's Hunting&quot; in &quot;The Jungle Book&quot; (1893) by Rudyard Kipling)\n\nThese old abandoned temples built around the 12th century belong to the abandoned city which inspired Kipling's Jungle Book.\nThey are rising at the top of a mountain which dominates the jungle at 811 meters above sea level in the centre of the jungle of Bandhavgarh located in the Indian state Madhya Pradesh.\nBaghel King Vikramaditya Singh abandoned Bandhavgarh fort in 1617 when Rewa, at a distance of 130 km was established as a capital. \nAbandonment allowed wildlife development in this region.\nWhen Baghel Kings became aware of it, he declared Bandhavgarh as their hunting preserve and strictly prohibited tree cutting and wildlife hunting...\n\nJoin the photographer at <a href=\"http://www.facebook.com/laurent.goldstein.photography\" rel=\"nofollow\">www.facebook.com/laurent.goldstein.photography</a>\n\n© All photographs are copyrighted and all rights reserved.\nPlease do not use any photographs without permission (even for private use).\nThe use of any work without consent of the artist is PROHIBITED and will lead automatically to consequences.\nShowiing photo info....\n farm => 6\n server => 5462\n secret => 6f9c0e7f83\n flickrid => 10051136944\n page_url => http://www.flickr.com/photos/designldg/10051136944/\n description => Ball Python\nShowiing photo info....\n farm => 4\n server => 3744\n secret => 529840767f\n flickrid => 10046353675\n page_url => \nhttp://www.flickr.com/photos/megzzdollphotos/10046353675/\n\n```", "```py\n$pip install SOAPpy\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport SOAPpy\n\nTEST_URL = 'http://s3.amazonaws.com/ec2-downloads/2009-04-04.ec2.wsdl'\n\ndef list_soap_methods(url):\n    proxy = SOAPpy.WSDL.Proxy(url)\n    print '%d methods in WSDL:' % len(proxy.methods) + '\\n'\n    for key in proxy.methods.keys():\n \"Key Details:\"\n        for k,v in proxy.methods[key].__dict__.iteritems():\n            print \"%s ==> %s\" %(k,v)\n\nif __name__ == '__main__':\n    list_soap_methods(TEST_URL)\n```", "```py\n$ python 8_5_search_amazonaws_with_SOAP.py \n/home/faruq/env/lib/python2.7/site-packages/wstools/XMLSchema.py:1280: UserWarning: annotation is \nignored\n warnings.warn('annotation is ignored')\n43 methods in WSDL:\n\nKey Name: ReleaseAddress\nKey Details:\n encodingStyle ==> None\n style ==> document\n methodName ==> ReleaseAddress\n retval ==> None\n soapAction ==> ReleaseAddress\n namespace ==> None\n use ==> literal\n location ==> https://ec2.amazonaws.com/\n inparams ==> [<wstools.WSDLTools.ParameterInfo instance at \n0x8fb9d0c>]\n outheaders ==> []\n inheaders ==> []\n transport ==> http://schemas.xmlsoap.org/soap/http\n outparams ==> [<wstools.WSDLTools.ParameterInfo instance at \n0x8fb9d2c>]\n\n```", "```py\n$ pip install SOAPpy\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 8\n# This program is optimized for Python 2.7.# It may run on any other version with/without modifications.\nimport argparse\nimport json\nimport urllib\nimport requests\n\nBASE_URL = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0' \n\ndef get_search_url(query):\n  return \"%s&%s\" %(BASE_URL, query)\n\ndef search_info(tag):\n  query = urllib.urlencode({'q': tag})\n  url = get_search_url(query)\n  response = requests.get(url)\n  results = response.json()\n\n  data = results['responseData']\n  print 'Found total results: %s' % \ndata['cursor']['estimatedResultCount']\n  hits = data['results']\n  print 'Found top %d hits:' % len(hits)\n  for h in hits: \n    print ' ', h['url']\n    print 'More results available from %s' % \ndata['cursor']['moreResultsUrl']\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser(description='Search info from \nGoogle')\n  parser.add_argument('--tag', action=\"store\", dest=\"tag\", \ndefault='Python books')\n  # parse arguments\n  given_args = parser.parse_args()\n  search_info(given_args.tag)\n```", "```py\n$ python 8_6_search_products_from_Google.py \nFound total results: 12300000\nFound top 4 hits:\n https://wiki.python.org/moin/PythonBooks\n http://www.amazon.com/Python-Languages-Tools-Programming-\nBooks/b%3Fie%3DUTF8%26node%3D285856\n http://pythonbooks.revolunet.com/\n http://readwrite.com/2011/03/25/python-is-an-increasingly-popu\nMore results available from \nhttp://www.google.com/search?oe=utf8&ie=utf8&source=uds&start=0&hl=en\n&q=Python+books\n\n```", "```py\n$ pip install  bottlenose\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 8\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport bottlenose\nfrom xml.dom import minidom as xml\n\ntry:\n  from local_settings import amazon_account\nexcept ImportError:\n  pass \n\nACCESS_KEY = amazon_account['access_key'] \nSECRET_KEY = amazon_account['secret_key'] \nAFFILIATE_ID = amazon_account['affiliate_id'] \n\ndef search_for_books(tag, index):\n  \"\"\"Search Amazon for Books \"\"\"\n  amazon = bottlenose.Amazon(ACCESS_KEY, SECRET_KEY, AFFILIATE_ID)\n  results = amazon.ItemSearch(\n    SearchIndex = index,\n    Sort = \"relevancerank\",\n    Keywords = tag\n  )\n  parsed_result = xml.parseString(results)\n\n  all_items = []\n  attrs = ['Title','Author', 'URL']\n\n  for item in parsed_result.getElementsByTagName('Item'):\n    parse_item = {}\n\n  for attr in attrs:\n    parse_item[attr] = \"\"\n    try:\n      parse_item[attr] = \nitem.getElementsByTagName(attr)[0].childNodes[0].data\n    except:\n      pass\n    all_items.append(parse_item)\n  return all_items\n\nif __name__ == '__main__':\n  parser = argparse.ArgumentParser(description='Search info from \nAmazon')\n  parser.add_argument('--tag', action=\"store\", dest=\"tag\", \ndefault='Python')\n  parser.add_argument('--index', action=\"store\", dest=\"index\", \ndefault='Books')\n  # parse arguments\n  given_args = parser.parse_args()\n  books = search_for_books(given_args.tag, given_args.index)    \n\n  for book in books:\n    for k,v in book.iteritems():\n      print \"%s: %s\" %(k,v)\n      print \"-\" * 80\n```", "```py\n$ python 8_7_search_amazon_for_books.py --tag=Python --index=Books\nURL: http://www.amazon.com/Python-In-Day-Basics-Coding/dp/tech-data/1490475575%3FSubscriptionId%3DAKIAIPPW3IK76PBRLWBA%26tag%3D7052-6929-7878%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3D1490475575\nAuthor: Richard Wagstaff\nTitle: Python In A Day: Learn The Basics, Learn It Quick, Start Coding Fast (In A Day Books) (Volume 1)\n--------------------------------------------------------------------------------\nURL: http://www.amazon.com/Learning-Python-Mark-Lutz/dp/tech-data/1449355730%3FSubscriptionId%3DAKIAIPPW3IK76PBRLWBA%26tag%3D7052-6929-7878%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3D1449355730\nAuthor: Mark Lutz\nTitle: Learning Python\n--------------------------------------------------------------------------------\nURL: http://www.amazon.com/Python-Programming-Introduction-Computer-Science/dp/tech-data/1590282418%3FSubscriptionId%3DAKIAIPPW3IK76PBRLWBA%26tag%3D7052-6929-7878%26linkCode%3Dxm2%26camp%3D2025%26creative%3D386001%26creativeASIN%3D1590282418\nAuthor: John Zelle\nTitle: Python Programming: An Introduction to Computer Science 2nd Edition\n---------------------------------------------------------------------\n-----------\n\n```"]