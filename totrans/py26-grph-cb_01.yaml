- en: Chapter 1. Start your Engines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: The Shortest Python Program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure the Python Modules are present
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Basic Python GUI in Tkinter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a Compiled Executable under Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make a Compiled Executable under MS Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is a collection of code recipes for creating and animating graphic
    objects using the marvelous Python language. In order to create and manipulate
    graphic objects, Python makes use of the Tkinter module. The prerequisite for
    using Python and Tkinter is obviously to have both installed. Both are free and
    Open Source and instructions for obtaining and installing them are abundantly
    available on the web. Just Google phrases like "install Python" and you will be
    spoilt for choice.
  prefs: []
  type: TYPE_NORMAL
- en: Our first task is to prove that Python and Tkinter are installed and working
    on our computer. In this book, we use Python version 2.6\. Python 3.0 which came
    out in 2010 requires some changes in syntax that we won't be using in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some simple tests to check if Python is installed. If we download
    and install Python on Windows, it automatically includes Tkinter as one of the
    essential modules so we do not need to acquire and install it separately.
  prefs: []
  type: TYPE_NORMAL
- en: Running a shortest Python program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We need a one line Python program that will prove that the Python interpreter
    is installed and working on our computer platform.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a folder (directory) called something like `construction_work` or `constr`
    for short. You will place all your Python programs inside this directory. In a
    text editor such as **gedit** on Linux or notepad on Windows. If we are working
    in Windows, there is a nice editor called "Context" that can be downloaded for
    free from [http://www.contexteditor.org/](http://www.contexteditor.org/) Context,
    that is sensitive to Python syntax and has a search-and-replace function that
    is useful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save this as a file named `simple_1.py`, inside the directory called `constr`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open up an X terminal or a DOS window if you are using MS Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change directory into `constr` - where `simple_1.py` is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `python simple_1.py` and your program will execute. The result should look
    like the following screenshot:![How to do it...](img/3845_01_01.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This proves that your Python interpreter works, your editor works, and that
    you understand all that is needed to run all the programs in this book. Congratulations.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Any instructions you type into a Linux X terminal or DOS terminal in MS Windows
    are treated as operating system commands. By starting these commands from within
    the same directory where your Python program is stored you do not have to tell
    the Python and operating system where to search for your code. You could store
    the code in another directory but you would then need to precede the program name
    with the path.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Try the longer version of the same basic print instructions shown in the following
    program.
  prefs: []
  type: TYPE_NORMAL
- en: All the text between the """ (triple quotation marks) is purely for the sake
    of good documentation and record keeping. It is for the use of programmers, and
    that includes you. Alas, the human memory is imperfect. Bitter experience will
    persuade you that it is wise to provide fairly complete information as a header
    in your programs as well as comments inside the program.
  prefs: []
  type: TYPE_NORMAL
- en: However, in the interest of saving space and avoiding distractions, these header
    comments have been left out in the rest of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring that the Python modules are present
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a slightly longer version of the previous program. However, the following
    modules are commanded to "report for duty" inside our program even though they
    are not actually used at this time: `Tkinter, math, random, time, tkFont`.'
  prefs: []
  type: TYPE_NORMAL
- en: We need the assurance that all the Python modules we will be using later are
    present and accessible to Python, and therefore, to our code. Each module is a
    self-contained library of code functions and objects that are called frequently
    by the commands in your programs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a text editor type the lines given in the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save this as a file named `simple_2.py`, inside the directory called `constr`
    as we did previously.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As before, open up an X terminal or a DOS window, if you are using MS Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change directory into `constr` - where `simple_1.py` is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `python simple_2.py` and our program should execute. The result should
    look like the following screenshot:![How to do it...](img/3845_01_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This proves that your Python interpreter can access the necessary library functions
    it will need.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `print` command is an instruction to write or print any text between quotation
    marks like "show *these words"* onto the monitor screen attached to your computer.
    It will also print the values of any named variables or expressions typed after
    print.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example: print "dog''s `name:`", `dog_name`. Where `dog_name` is the name
    of a variable used to store some data.'
  prefs: []
  type: TYPE_NORMAL
- en: The `print` command is very useful when you are debugging a complicated sequence
    of code because even if the execution fails to complete because of errors, any
    print commands encountered before the error is reached will be respected. So by
    thoughtful placing of various print statements in your code, you are able to zero
    in on what is causing your program to crash.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When you are writing a piece of Python code for the first time, you are often
    a bit unsure if your understanding of the logic is completely correct. So we would
    like to watch the progress of instruction execution in an exploratory way. It
    is a great help to be able to see that at least part of the code works. A major
    strength of Python is the way it takes our instructions one at a time and executes
    them progressively. It will only stop when the end is reached or a when programming
    flaw halts progress. If we have a twenty line program and only the first five
    lines are bug-free and the rest are unexecutable garbage, the Python interpreter
    will at least execute the first five. This is where the `print` command is a really
    potent little tool.
  prefs: []
  type: TYPE_NORMAL
- en: This is how you use print and the Python interpreter. When we are having trouble
    with our code and it just won't work and we are battling to figure out why, we
    can just insert print statements at various chosen points in our program. This
    way you can get some intermediate values of variables as your own private status
    reports. When we want to switch off our print watchdogs we simply type a hash
    (#) symbol in front, thus transforming them into passive comments. Later on, if
    you change your mind and want the prints to be active again you just remove the
    leading hash symbols.
  prefs: []
  type: TYPE_NORMAL
- en: A basic Tkinter program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Here we attempt to execute a Tkinter command inside the Python program. The
    Tkinter instruction will create a canvas and then draw a straight line on it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a text editor, type the code given below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save this as a file named `simple_line_1.py`, inside the directory called `constr`
    again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As before open up an X terminal or DOS window if you are using MS Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change directory into `constr` - where `simple_line_1.py` is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `python simple_line_1.py` and your program should execute. The command
    terminal result should look like the following screenshot:![How to do it...](img/3845_01_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Tkinter canvas output should look like the following screenshot:![How to
    do it...](img/3845_01_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This proves that your Python interpreter works, your editor works, and the Tkinter
    module works. This is not a trivial achievement you are definitely ready for great
    things. Well done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: To draw a line, we only need to give the start point and the end point.
  prefs: []
  type: TYPE_NORMAL
- en: The start point is the first pair of numbers in `canvas_1.create_line(10,20
    , 50,70).In` another way, the start is given by the coordinates `x_start=10` and
    `y_start=20`. The end point of the line is specified by the second pair of numbers
    `x_end=50` and `y_end=70`. The units of measurement are pixels. A **pixel** is
    the smallest dot that can be displayed on our screen.
  prefs: []
  type: TYPE_NORMAL
- en: For all other properties like line thickness or color, default values of the
    `create_line()` method are used.
  prefs: []
  type: TYPE_NORMAL
- en: However, should you want to change color or thickness, you just do it by specifying
    the settings.
  prefs: []
  type: TYPE_NORMAL
- en: Make a compiled executable under Windows and Linux
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How do we create and execute a.exe file that will run a compiled version of
    our Python and Tkinter programs? Can we make a self-contained folder that will
    run on an MS Windows or Linux distribution that uses a different version of Python
    from the ones we use? The answers to both questions are yes and the tool to achieve
    this is an Open Source program called `cx_Freeze`. Often what we would like to
    do is have our working Python program on a memory stick or downloadable on a network
    and be able to demonstrate it to friends, colleagues, or clients without the need
    to download Python onto the client's system. `cx_Freeze` allows us to create a
    distributable form of our Python graphic program.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: You will need to download `cx_Freeze` from [http://cx-freeze.sourceforge.net/](http://cx-freeze.sourceforge.net/).
    We need to pick a version that has the same version number as the Python version
    we are using. Currently, there are versions available from version 2.4 up to 3.1.
  prefs: []
  type: TYPE_NORMAL
- en: 'MS Windows: Download `cx_Freeze-4.2.win32-py2.6.msi`, the windows installer
    for Python 2.6\. If we have another Python version, then we must choose the appropriate
    installer from [http://cx-freeze.sourceforge.net/](http://cx-freeze.sourceforge.net/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save and run this installer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On completion of a successful Windows install we will see a folder named `cx_Freeze
    inside \Python26\Lib\site-packages\`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a terminal run the command `apt-get install cx-freeze`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this does not work we may need to first install a development-capable version
    of Python by running the command `apt-get install python-dev`. Then go back and
    repeat step 1.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Test for success by typing in `python` in a command terminal to invoke the Python
    interpreter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then after the`>>>` prompt, type `import cx_Freeze`. If the interpreter returns
    a new line and the`>>>` prompt again, without any complaints, we have been successful.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the file we want to package as an executable is named `walking_birdy_1.py`
    in a folder called `/constr`, then we prepare a special setup file as follows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save it as `setup.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, in a command terminal run
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will see a lot of system compilation commands scrolling down the command
    terminal that will eventually stop without error messages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will find our complete self-contained executable inside a folder named `build`.
    Under Linux, we will find it inside our home directory under `/build/exe.linux-i686-2.6`.
    Under MS Windows, we will find it inside `C:\Python26\build\exe.win-py2.6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We just need to copy the folder `build` with all its contents to wherever we
    want to run our self-contained program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: A word of caution. If we use external files like images inside our code, then
    the path addresses of the files must be absolute because they are coded into,
    or frozen, into the executable version of our Python program. There are ways of
    setting up search paths which can be read at [http://cx-freeze.sourceforge.net/cx_Freeze.html](http://cx-freeze.sourceforge.net/cx_Freeze.html).
  prefs: []
  type: TYPE_NORMAL
- en: For example, say we want to use some `GIF` images in our program and then demonstrate
    them on other computers. First we place a folder called, for example, `/birdy_pics`,
    onto a USB memory stick. In the original program, `walking_birdy_1.py`, make sure
    the path addresses to the images point to the `/birdy_pics` folder on the stick.
    After compilation, copy the folder `build` onto the USB memory stick. Now when
    we double-click on the executable `walking_birdy_1` it can locate the images on
    the USB memory stick when it needs to. These files include everything that is
    needed for your program, and you should distribute the whole directory contents
    to any user who wants to run your program without needing to install Python or
    Tkinter.
  prefs: []
  type: TYPE_NORMAL
- en: There is another program called `py2exe` that will also create executables to
    run on MS Windows. However, it cannot create self-contained binary executables
    to run under Linux whereas `cx_Freeze`
  prefs: []
  type: TYPE_NORMAL
