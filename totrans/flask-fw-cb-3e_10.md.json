["```py\n    app.config['LOG_FILE'] = 'application.log'\n    ```", "```py\n    if not app.debug:\n    ```", "```py\n        import logging\n    ```", "```py\n        from logging import FileHandler, Formatter\n    ```", "```py\n        file_handler = FileHandler(app.config['LOG_FILE'])\n    ```", "```py\n        app.logger.setLevel(logging.INFO)\n    ```", "```py\n        app.logger.addHandler(file_handler)\n    ```", "```py\n    @catalog.route('/')\n    ```", "```py\n    @catalog.route('/<lang>/')\n    ```", "```py\n    @catalog.route('/<lang>/home')\n    ```", "```py\n    @template_or_json('home.html')\n    ```", "```py\n    def home():\n    ```", "```py\n        products = Product.query.all()\n    ```", "```py\n        app.logger.info(\n    ```", "```py\n            'Home page with total of %d products'\n    ```", "```py\n              % len(products)\n    ```", "```py\n        )\n    ```", "```py\n        return {'count': len(products)}\n    ```", "```py\n    @catalog.route('/<lang>/product/<id>')\n    ```", "```py\n    def product(id):\n    ```", "```py\n        product = Product.query.filter_by(id=id).first()\n    ```", "```py\n        if not product:\n    ```", "```py\n            app.logger.warning('Requested product not\n    ```", "```py\n              found.')\n    ```", "```py\n            abort(404)\n    ```", "```py\n        return render_template('product.html',\n    ```", "```py\n          product=product)\n    ```", "```py\nHome page with total of 0 products\nRequested product not found.\n```", "```py\nif not app.debug:\n    import logging\n    from logging import FileHandler, Formatter\n    file_handler = FileHandler(app.config['LOG_FILE'])\n    app.logger.setLevel(logging.INFO)\n    app.logger.addHandler(file_handler)\n    file_handler.setFormatter(Formatter(\n        '%(asctime)s %(levelname)s: %(message)s '\n        '[in %(pathname)s:%(lineno)d]'\n    ))\n```", "```py\n2023-01-02 13:01:25,125 INFO: Home page with total of 0 products [in /Users/apple/workspace/flask-cookbook-3/Chapter-10/Chapter-10/my_app/catalog/views.py:72]\n2023-01-02 13:01:27,657 WARNING: Requested product not found. [in /Users/apple/workspace/flask-cookbook-3/Chapter-10/Chapter-10/my_app/catalog/views.py:82]\n```", "```py\n@app.errorhandler(404)\ndef page_not_found(e):\n    app.logger.error(e)\n    return render_template('404.html'), 404\n```", "```py\nRECEPIENTS = ['some_receiver@gmail.com']\nif not app.debug:\n    import logging\n    from logging import FileHandler, Formatter\n    from logging.handlers import SMTPHandler\n    file_handler = FileHandler(app.config['LOG_FILE'])\n    app.logger.setLevel(logging.INFO)\n    app.logger.addHandler(file_handler)\n    mail_handler = SMTPHandler(\n        (\"smtp.gmail.com\", 587), 'sender@gmail.com',\n          RECEPIENTS,\n        'Error occurred in your application',\n        ('some_email@gmail.com', 'some_gmail_password'),\n          secure=())\n    mail_handler.setLevel(logging.ERROR)\n    app.logger.addHandler(mail_handler)\n    for handler in [file_handler, mail_handler]:\n        handler.setFormatter(Formatter(\n            '%(asctime)s %(levelname)s: %(message)s '\n            '[in %(pathname)s:%(lineno)d]'\n        ))\n```", "```py\n$ pip install 'sentry-sdk[flask]'\n```", "```py\nimport sentry_sdk\nfrom sentry_sdk.integrations.flask import FlaskIntegration\nsentry_sdk.init(\n    dsn=\"https://1234:5678@fake-sentry-server/1\",\n    integrations=[FlaskIntegration()]\n)\n```", "```py\nimport pdb; pdb.set_trace()\n```", "```py\n@catalog.route('/<lang>/products')\n@catalog.route('/<lang>/products/<int:page>')\ndef products(page=1):\n    products = Product.query.paginate(page=page,\n      per_page=10)\n    import pdb; pdb.set_trace()\n    return render_template('products.html',\n      products=products)\n```", "```py\n> /Users/apple/workspace/flask-cookbook-3/Chapter-10/Chapter-10/my_app/catalog/views.py(93)products()\n-> return render_template('products.html', products=products)\n(Pdb) u\n> /Users/apple/workspace/flask-cookbook-3/Chapter-10/lib/python3.10/site-packages/flask/app.py(1796)dispatch_request()\n-> return self.ensure_sync(self.view_functions[rule.endpoint])(**view_args)\n(Pdb) u\n> /Users/apple/workspace/flask-cookbook-3/Chapter-10/lib/python3.10/site-packages/flask/app.py(1820)full_dispatch_request()\n-> rv = self.dispatch_request()\n(Pdb) u\n> /Users/apple/workspace/flask-cookbook-3/Chapter-10/lib/python3.10/site-packages/flask/app.py(2525)wsgi_app()\n-> response = self.full_dispatch_request()\n(Pdb) u\n> /Users/apple/workspace/flask-cookbook-3/Chapter-10/lib/python3.10/site-packages/flask/app.py(2548)__call__()\n-> return self.wsgi_app(environ, start_response)\n```", "```py\n    def create_app(alt_config={}):\n    ```", "```py\n        app = Flask(__name__, template_folder=alt_config\n    ```", "```py\n          .get('TEMPLATE_FOLDER', 'templates'))\n    ```", "```py\n        app.config['UPLOAD_FOLDER'] =\n    ```", "```py\n          os.path.realpath('.') + '/my_app/static/uploads'\n    ```", "```py\n        app.config['SQLALCHEMY_DATABASE_URI'] =\n    ```", "```py\n          'sqlite:////tmp/test.db'\n    ```", "```py\n        app.config['WTF_CSRF_SECRET_KEY'] = 'random key\n    ```", "```py\n          for form'\n    ```", "```py\n        app.config['LOG_FILE'] = 'application.log'\n    ```", "```py\n        app.config.update(alt_config)\n    ```", "```py\n        if not app.debug:\n    ```", "```py\n            import logging\n    ```", "```py\n            from logging import FileHandler, Formatter\n    ```", "```py\n            from logging.handlers import SMTPHandler\n    ```", "```py\n            file_handler =\n    ```", "```py\n              FileHandler(app.config['LOG_FILE'])\n    ```", "```py\n            app.logger.setLevel(logging.INFO)\n    ```", "```py\n            app.logger.addHandler(file_handler)\n    ```", "```py\n            mail_handler = SMTPHandler(\n    ```", "```py\n                (\"smtp.gmail.com\", 587),\n    ```", "```py\n                  'sender@gmail.com', RECEPIENTS,\n    ```", "```py\n                'Error occurred in your application',\n    ```", "```py\n                ('some_email@gmail.com',\n    ```", "```py\n                  'some_gmail_password'), secure=())\n    ```", "```py\n            mail_handler.setLevel(logging.ERROR)\n    ```", "```py\n            # app.logger.addHandler(mail_handler)\n    ```", "```py\n            for handler in [file_handler, mail_handler]:\n    ```", "```py\n                handler.setFormatter(Formatter(\n    ```", "```py\n                    '%(asctime)s %(levelname)s:\n    ```", "```py\n                      %(message)s '\n    ```", "```py\n                    '[in %(pathname)s:%(lineno)d]'\n    ```", "```py\n                ))\n    ```", "```py\n        app.secret_key = 'some_random_key'\n    ```", "```py\n        return app\n    ```", "```py\n    db = SQLAlchemy()\n    ```", "```py\n    def create_db(app):\n    ```", "```py\n        db.init_app(app)\n    ```", "```py\n        with app.app_context():\n    ```", "```py\n            db.create_all()\n    ```", "```py\n        return db\n    ```", "```py\n    def get_locale():\n    ```", "```py\n        return g.get('current_lang', 'en')\n    ```", "```py\n    app = create_app()\n    ```", "```py\n    babel = Babel(app)\n    ```", "```py\n    babel.init_app(app, locale_selector=get_locale)\n    ```", "```py\n    from my_app.catalog.views import catalog\n    ```", "```py\n    app.register_blueprint(catalog)\n    ```", "```py\n    db = create_db(app)\n    ```", "```py\nfrom flask import current_app\n@catalog.before_request\ndef before():\n    # Existing code\n@catalog.context_processor\ndef inject_url_for():\n    # Existing code\n# Similarly simply replace all your references to `app` by\n  `current_app`. Refer to code provided with the book for a\n  complete example.\n```", "```py\n    import os\n    ```", "```py\n    from my_app import create_app, db, babel\n    ```", "```py\n    import unittest\n    ```", "```py\n    import tempfile\n    ```", "```py\n    class CatalogTestCase(unittest.TestCase):\n    ```", "```py\n        def setUp(self):\n    ```", "```py\n            test_config = {}\n    ```", "```py\n            self.test_db_file = tempfile.mkstemp()[1]\n    ```", "```py\n            test_config['SQLALCHEMY_DATABASE_URI'] =\n    ```", "```py\n              'sqlite:///' + self.test_db_file\n    ```", "```py\n            test_config['TESTING'] = True\n    ```", "```py\n            self.app = create_app(test_config)\n    ```", "```py\n            db.init_app(self.app)\n    ```", "```py\n            babel.init_app(self.app)\n    ```", "```py\n            with self.app.app_context():\n    ```", "```py\n                db.create_all()\n    ```", "```py\n            from my_app.catalog.views import catalog\n    ```", "```py\n            self.app.register_blueprint(catalog)\n    ```", "```py\n            self.client = self.app.test_client()\n    ```", "```py\n        def tearDown(self):\n    ```", "```py\n            os.remove(self.test_db_file)\n    ```", "```py\n        def test_home(self):\n    ```", "```py\n            rv = self.client.get('/')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n$ python app_tests.py\n```", "```py\n        test_config['WTF_CSRF_ENABLED'] = False\n```", "```py\n        def test_products(self):\n    ```", "```py\n            \"Test Products list page\"\n    ```", "```py\n            rv = self.client.get('/en/products')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('No Previous Page' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            self.assertTrue('No Next Page' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n        def test_create_category(self):\n    ```", "```py\n            \"Test creation of new category\"\n    ```", "```py\n            rv = self.client.get('/en/category-create')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            rv = self.client.post('/en/category-create')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('This field is required.' In\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            rv = self.client.get('/en/categories')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertFalse('Phones' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            rv = self.client.post('/en/category-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'Phones',\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            rv = self.client.get('/en/categories')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('Phones' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            rv = self.client.get('/en/category/1')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('Phones' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n        def test_create_product(self):\n    ```", "```py\n            \"Test creation of new product\"\n    ```", "```py\n            rv = self.client.get('/en/product-create')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            # Raise a ValueError for a valid category not\n    ```", "```py\n              found\n    ```", "```py\n            self.assertRaises(ValueError,\n    ```", "```py\n              self.client.post, '/en/product-create')\n    ```", "```py\n            # Create a category to be used in product\n    ```", "```py\n              creation\n    ```", "```py\n            rv = self.client.post('/en/category-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'Phones',\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            rv = self.client.post('/en/product-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'iPhone 5',\n    ```", "```py\n                'price': 549.49,\n    ```", "```py\n                'company': 'Apple',\n    ```", "```py\n                'category': 1,\n    ```", "```py\n                'image': tempfile.NamedTemporaryFile()\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            rv = self.client.get('/en/products')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('iPhone 5' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n        def test_search_product(self):\n    ```", "```py\n            \"Test searching product\"\n    ```", "```py\n            # Create a category to be used in product\n    ```", "```py\n              creation\n    ```", "```py\n            rv = self.client.post('/en/category-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'Phones',\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            # Create a product\n    ```", "```py\n            rv = self.client.post('/en/product-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'iPhone 5',\n    ```", "```py\n                'price': 549.49,\n    ```", "```py\n                'company': 'Apple',\n    ```", "```py\n                'category': 1,\n    ```", "```py\n                'image': tempfile.NamedTemporaryFile()\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            # Create another product\n    ```", "```py\n            rv = self.client.post('/en/product-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'Galaxy S5',\n    ```", "```py\n                'price': 549.49,\n    ```", "```py\n                'company': 'Samsung',\n    ```", "```py\n                'category': 1,\n    ```", "```py\n                'image': tempfile.NamedTemporaryFile()\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            self.client.get('/')\n    ```", "```py\n            rv = self.client.get('/en/product-\n    ```", "```py\n              search?name=iPhone')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('iPhone 5' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            self.assertFalse('Galaxy S5' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            rv = self.client.get('/en/product-\n    ```", "```py\n              search?name=iPhone 6')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertFalse('iPhone 6' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n$ python app_tests.py -v\ntest_create_category (__main__.CatalogTestCase)\nTest creation of new category ... ok\ntest_create_product (__main__.CatalogTestCase)\nTest creation of new product ... ok\ntest_home (__main__.CatalogTestCase) ... ok\ntest_products (__main__.CatalogTestCase)\nTest Products list page ... ok\ntest_search_product (__main__.CatalogTestCase)\nTest searching product ... ok\n----------------------------------------------------------------------\nRan 5 tests in 0.390s\nOK\n```", "```py\n$ pip install nose2\n```", "```py\n$ mv app_tests.py test_app.py\n```", "```py\n$ nose2 -v\ntest_create_category (test_app.CatalogTestCase)\nTest creation of new category ... ok\ntest_create_product (test_app.CatalogTestCase)\nTest creation of new product ... ok\ntest_home (test_app.CatalogTestCase) ... ok\ntest_products (test_app.CatalogTestCase)\nTest Products list page ... ok\ntest_search_product (test_app.CatalogTestCase)\nTest searching product ... ok\n----------------------------------------------------------------------\nRan 5 tests in 0.241s\nOK\n```", "```py\n$ nose2 test_app\n```", "```py\n$ nose2 test_app.CatalogTestCase.test_home\n```", "```py\n$ pip install geoip2\n```", "```py\nclass Product(db.Model):\n    # ... Other fields ...\n    user_timezone = db.Column(db.String(255))\n    def __init__(self, name, price, category, image_path,\n      user_timezone=''):\n        # ... Other fields initialization ...\n        self.user_timezone = user_timezone\n```", "```py\nimport geoip2.database, geoip2.errors\n@catalog.route('/<lang>/product-create', methods=['GET',\n  'POST'])\ndef create_product():\n    form = ProductForm()\n    if form.validate_on_submit():\n        # ... Non changed code ...\n        reader = geoip2.database.Reader(\n            'GeoLite2-City_20230113/GeoLite2-City.mmdb'\n        )\n        try:\n            match = reader.city(request.remote_addr)\n        except geoip2.errors.AddressNotFoundError:\n            match = None\n        product = Product(\n            name, price, category, filename,\n            match and match.location.time_zone or\n              'Localhost'\n        )\n        # ... Non changed code ...\n```", "```py\n    from unittest import mock\n    ```", "```py\n    import geoip2.records\n    ```", "```py\n    class CatalogTestCase(unittest.TestCase):\n    ```", "```py\n        def setUp(self):\n    ```", "```py\n            # ... Non changed code ...\n    ```", "```py\n            self.geoip_city_patcher =\n    ```", "```py\n              mock.patch('geoip2.models.City',\n    ```", "```py\n                location=geoip2.records.Location(time_zone\n    ```", "```py\n                  = 'America/Los_Angeles')\n    ```", "```py\n            )\n    ```", "```py\n            PatchedGeoipCity =\n    ```", "```py\n              self.geoip_city_patcher.start()\n    ```", "```py\n            self.geoip_reader_patcher =\n    ```", "```py\n              mock.patch('geoip2.database.Reader')\n    ```", "```py\n            PatchedGeoipReader =\n    ```", "```py\n              self.geoip_reader_patcher.start()\n    ```", "```py\n            PatchedGeoipReader().city.return_value =\n    ```", "```py\n              PatchedGeoipCity\n    ```", "```py\n            with self.app.app_context():\n    ```", "```py\n                db.create_all()\n    ```", "```py\n            from my_app.catalog.views import catalog\n    ```", "```py\n            self.app.register_blueprint(catalog)\n    ```", "```py\n            self.client = self.app.test_client()\n    ```", "```py\n        def tearDown(self):\n    ```", "```py\n            self.geoip_city_patcher.stop()\n    ```", "```py\n            self.geoip_reader_patcher.stop()\n    ```", "```py\n            os.remove(self.test_db_file)\n    ```", "```py\n        def test_create_product(self):\n    ```", "```py\n            \"Test creation of new product\"\n    ```", "```py\n            # ... Non changed code ...\n    ```", "```py\n            rv = self.client.post('/en/product-create',\n    ```", "```py\n              data={\n    ```", "```py\n                'name': 'iPhone 5',\n    ```", "```py\n                'price': 549.49,\n    ```", "```py\n                'company': 'Apple',\n    ```", "```py\n                'category': 1,\n    ```", "```py\n                'image': tempfile.NamedTemporaryFile()\n    ```", "```py\n            })\n    ```", "```py\n            self.assertEqual(rv.status_code, 302)\n    ```", "```py\n            rv = self.client.get('/en/product/1')\n    ```", "```py\n            self.assertEqual(rv.status_code, 200)\n    ```", "```py\n            self.assertTrue('iPhone 5' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n            self.assertTrue('America/Los_Angeles' in\n    ```", "```py\n              rv.data.decode(\"utf-8\"))\n    ```", "```py\n$ nose2 test_app.CatalogTestCase.test_create_product -v\ntest_create_product (test_app.CatalogTestCase)\nTest creation of new product ... ok\n----------------------------------------------------------------\nRan 1 test in 0.079s\nOK\n```", "```py\n$ pip install coverage\n```", "```py\n    $ coverage run --source=<Folder name of the application> --omit=test_app.py,run.py test_app.py\n    ```", "```py\n    $ coverage report\n    ```", "```py\n    $ coverage html\n    ```", "```py\n    import coverage\n    ```", "```py\n    cov = coverage.coverage(\n    ```", "```py\n        omit = [\n    ```", "```py\n            '/Users/apple/workspace/flask-cookbook-3/\n    ```", "```py\n              Chapter-10/lib/python3.10/site-packages/*',\n    ```", "```py\n            'test_app.py'\n    ```", "```py\n        ]\n    ```", "```py\n    )\n    ```", "```py\n    cov.start()\n    ```", "```py\n    if __name__ == '__main__':\n    ```", "```py\n        try:\n    ```", "```py\n            unittest.main()\n    ```", "```py\n        finally:\n    ```", "```py\n            cov.stop()\n    ```", "```py\n            cov.save()\n    ```", "```py\n            cov.report()\n    ```", "```py\n            cov.html_report(directory = 'coverage')\n    ```", "```py\n            cov.erase()\n    ```", "```py\n$ python test_app.py\n```", "```py\nfrom werkzeug.middleware.profiler import ProfilerMiddleware\nfrom my_app import app\napp.wsgi_app = ProfilerMiddleware(app.wsgi_app,\n  restrictions = [10])\napp.run(debug=True)\n```", "```py\n$ python generate_profile.py\n```"]