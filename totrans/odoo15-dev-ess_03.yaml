- en: '[*Chapter 5*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146): Importing, Exporting,
    and Module Data'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第5章*](B16119_05_Final_PD_ePub.xhtml#_idTextAnchor146)：导入、导出和模块数据'
- en: Most Odoo module definitions, such as **user interfaces** and **security rules**,
    are data records that are stored in specific **database tables**. The XML and
    CSV files that are found in modules are not used by Odoo applications at runtime.
    They are a means of loading those definitions into database tables.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Odoo模块定义，如**用户界面**和**安全规则**，是存储在特定**数据库表**中的数据记录。模块中找到的XML和CSV文件在Odoo应用程序运行时不会被使用。它们是加载这些定义到数据库表中的手段。
- en: Because of this, an important part of Odoo modules is representing data in files
    so that it can be loaded into a database upon module installation. Modules can
    also contain initial data and demonstration data. Data files allow us to add that
    to our modules.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这个原因，Odoo模块的一个重要部分是将数据表示在文件中，以便在模块安装时将其加载到数据库中。模块还可以包含初始数据和演示数据。数据文件允许我们将这些添加到我们的模块中。
- en: Additionally, understanding Odoo data representation formats is important for
    exporting and importing business data within the context of a project's implementation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，了解Odoo数据表示格式对于在项目实施过程中导出和导入业务数据也很重要。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Understanding the external identifier concept
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解外部标识符的概念
- en: Exporting and importing data files
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导出和导入数据文件
- en: Using CSV files
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用CSV文件
- en: Adding module data
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加模块数据
- en: Using XML data files
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用XML数据文件
- en: By the end of this chapter, you will be able to perform data exports and imports
    to populate initial data into a database and automate the creation of default
    and demonstration data in modules that have been created.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将能够执行数据导出和导入操作，以将初始数据填充到数据库中，并自动在创建的模块中创建默认和演示数据。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter requires you to have an Odoo server running, with the library app
    base module installed.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章要求您运行一个Odoo服务器，并安装了图书馆应用程序的基础模块。
- en: The code for this chapter can be found in this book's GitHub repository, [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials),
    in the `ch05/` directory. It contains a copy of the original `library_app` that
    we created in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072), *Your
    First Odoo Application*, with additional files added for this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在本书的GitHub仓库中找到，位于[https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)的`ch05/`目录下。它包含了我们创建在[*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，“您的第一个Odoo应用程序”，中的`library_app`原始副本，以及为本章添加的额外文件。
- en: Understanding the external identifier concept
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解外部标识符的概念
- en: An **external identifier**, also called an **XML ID**, is a *human-readable
    string identifier* that uniquely identifies a particular record in Odoo. They
    are important for loading data into Odoo, allowing us to modify an existing data
    record or reference it in other data records.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**外部标识符**，也称为**XML ID**，是一个*可读的字符串标识符*，在Odoo中唯一标识一个特定的记录。它们对于将数据加载到Odoo中非常重要，允许我们修改现有数据记录或在其他数据记录中引用它。'
- en: First, we will introduce how external identifiers work, and how we can inspect
    them. Then, we will learn how to use the web client to find the external identifiers
    for particular data records, since this is frequently needed when creating add-on
    modules, thus extending existing features.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将介绍外部标识符的工作原理以及如何检查它们。然后，我们将学习如何使用Web客户端查找特定数据记录的外部标识符，因为这在创建附加模块、扩展现有功能时经常需要。
- en: How external identifiers work
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 外部标识符的工作原理
- en: Let's begin by understanding how identifiers work. The actual database identifier
    for a record is an automatically assigned sequential number, and there is no way
    to know ahead of time what ID will be assigned to each record during module installation.
    External identifiers let us reference a related record without the need to know
    the actual database ID that's been assigned to it. The XML ID provides a convenient
    alias for the database ID so that we can use it whenever we need to reference
    a particular record.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先了解标识符是如何工作的。记录的实际数据库标识符是一个自动分配的顺序号，在模块安装过程中无法预先知道将分配给每个记录的ID。外部标识符允许我们引用相关记录，而无需知道分配给它的实际数据库ID。XML
    ID为数据库ID提供了一个方便的别名，这样我们就可以在需要引用特定记录时使用它。
- en: Records defined in Odoo module data files use *XML IDs*. One reason for this
    is to avoid creating duplicate records when upgrading a module. The module upgrade
    will load the data files into the database again. We want it to detect pre-existing
    records for them to be updated, instead of creating duplicate records.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo模块数据文件中定义的记录使用*XML ID*。一个原因是避免在模块升级时创建重复记录。模块升级将再次将数据文件加载到数据库中。我们希望它能够检测它们之前存在的记录以便更新，而不是创建重复的记录。
- en: 'Another reason to use XML IDs is to support interrelated data: data records
    that need to reference other data records. Since we can''t know the actual database
    ID, we can use the XML ID, so the translation will be transparently handled by
    the **Odoo framework**.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 使用XML ID的另一个原因是支持相互关联的数据：需要引用其他数据记录的数据记录。由于我们无法知道实际的数据库ID，我们可以使用XML ID，这样翻译将由**Odoo框架**透明地处理。
- en: 'Odoo takes care of translating the external identifier names into the actual
    database IDs that have been assigned to them. The mechanism behind this is quite
    simple: Odoo keeps a table with the mapping between the named external identifiers
    and their corresponding numeric database IDs: the `ir.model.data` model.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo负责将外部标识符名称转换为分配给它们的实际数据库ID。背后的机制相当简单：Odoo保留一个表，其中包含命名外部标识符与其对应的数字数据库ID之间的映射：`ir.model.data`模型。
- en: We must have **Developer mode** enabled to have the menu option available. Check
    whether you have the *Developer mode* bug icon in the top right, next to the user's
    avatar icon. If not, you should enable it now in the **Settings** top menu. Please
    refer to [*Chapter 1*](B16119_01_Final_PD_ePub.xhtml#_idTextAnchor015), *Quick
    Start Using the Developer Mode*, for more details.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须启用**开发者模式**才能有可用的菜单选项。检查你是否有右上角的*开发者模式*bug图标，紧挨着用户头像图标。如果没有，你现在应该在**设置**顶菜单中启用它。请参阅[*第1章*](B16119_01_Final_PD_ePub.xhtml#_idTextAnchor015)，*使用开发者模式快速入门*，获取更多详细信息。
- en: 'We can inspect the existing mappings using the `library_app` module, we will
    see the external identifiers that have been generated by the module we created,
    as shown in the following screenshot:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`library_app`模块来检查现有的映射，我们会看到由我们创建的模块生成的外部标识符，如下面的截图所示：
- en: '![Figure 5.1 – External identifiers generated by the library_app module'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.1 – 由library_app模块生成的外部标识符'
- en: '](img/image_00_001.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_001.jpg)'
- en: Figure 5.1 – External identifiers generated by the library_app module
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1 – 由library_app模块生成的外部标识符
- en: Here, we can see that the external identifiers have `library_app.action_library_book`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到外部标识符有`library_app.action_library_book`。
- en: External identifiers only need to be unique inside an Odoo module so that there
    is no risk of two modules conflicting because of accidentally choosing the same
    identifier name. The globally unique identifier is built by joining the module
    name with the actual external identifier name. This is what you can see in the
    **Complete ID** field.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 外部标识符只需要在Odoo模块内部是唯一的，这样就没有两个模块因为意外选择相同的标识符名称而冲突的风险。全局唯一标识符是通过将模块名称与实际的外部标识符名称连接起来构建的。这就是你在**完整ID**字段中可以看到的内容。
- en: When using an external identifier in a data file, we can choose to use either
    the complete identifier or just the external identifier name. Usually, it's simpler
    to just use the external identifier name, but the complete identifier enables
    us to reference data records from other modules. When doing so, make sure that
    those modules are included in the module dependencies to ensure that those records
    are loaded before ours.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当在数据文件中使用外部标识符时，我们可以选择使用完整的标识符或仅使用外部标识符名称。通常，仅使用外部标识符名称更简单，但完整的标识符使我们能够引用来自其他模块的数据记录。在这样做的时候，请确保那些模块包含在模块依赖关系中，以确保那些记录在我们之前被加载。
- en: There are some cases where the complete ID is needed, even if we're referring
    to an XML ID from the same module.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，即使我们指的是同一模块中的XML ID，也需要完整的ID。
- en: At the top of the list, we can see the `library_app.action_library_book` complete
    identifier. This is the menu action we created for the module, which is also referenced
    in the corresponding menu item. By clicking on it, we go to the form view, which
    contains its details. There, we can see that the `action_library_book` external
    identifier in the `library_app` module maps to a specific record ID in the `ir.actions.act_window`
    model, which is `87` in this case.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表顶部，我们可以看到 `library_app.action_library_book` 完整标识符。这是我们为该模块创建的菜单操作，它也在相应的菜单项中引用。点击它，我们将进入表单视图，其中包含其详细信息。在那里，我们可以看到
    `library_app` 模块中的 `action_library_book` 外部标识符映射到 `ir.actions.act_window` 模型中的特定记录
    ID，在这种情况下是 `87`。
- en: 'By clicking on the record''s line, the information can be seen in a form view,
    as shown in the following screenshot:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过点击记录的行，可以在表单视图中看到信息，如下面的屏幕截图所示：
- en: '![Figure 5.2 – Form view for the library_app.action_library_book external identifier'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.2 – library_app.action_library_book 外部标识符的表单视图'
- en: '](img/image_00_002.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_002.jpg)'
- en: Figure 5.2 – Form view for the library_app.action_library_book external identifier
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 – library_app.action_library_book 外部标识符的表单视图
- en: Besides providing a way for records to easily reference other records, external
    identifiers also allow you to avoid data duplication on repeated imports. If the
    external identifier is already present, the existing record will be updated, avoiding
    a new, duplicate record being created.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 除了提供一种让记录轻松引用其他记录的方法外，外部标识符还允许您在重复导入时避免数据重复。如果外部标识符已经存在，现有记录将被更新，从而避免创建一个新的、重复的记录。
- en: Finding external identifiers
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查找外部标识符
- en: When we're writing data records for our modules, we frequently need to look
    up the existing external identifiers to use for our reference. So, it is important
    to know how to find these identifiers.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们为我们自己的模块编写数据记录时，我们经常需要查找现有的外部标识符以供参考。因此，了解如何查找这些标识符是很重要的。
- en: One way to do this is to use the **Settings** | **Technical** | **Sequences
    & Identifiers** | **External Identifiers** menu, which was shown earlier in *Figure
    5.1*. We can also use the **Developer** menu for this. As you may recall from
    [*Chapter 1*](B16119_01_Final_PD_ePub.xhtml#_idTextAnchor015), *Quick Start Using
    the Developer Mode*, the **Developer** menu can be activated in the **Settings**
    dashboard, at the bottom right.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的一种方法是通过使用**设置** | **技术** | **序列与标识符** | **外部标识符**菜单，这在之前的*图 5.1*中已经展示过。我们也可以使用**开发者**菜单来做这件事。如您在[*第
    1 章*](B16119_01_Final_PD_ePub.xhtml#_idTextAnchor015)中回忆的那样，*使用开发者模式快速入门*，**开发者**菜单可以在**设置**仪表板的最右下角激活。
- en: To find the external identifier for a data record, we should open the corresponding
    form view, select the **Developer** menu, and then choose the **View Metadata**
    option. This will display a dialog containing the record's database ID and external
    identifier (also known as the XML ID).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找数据记录的外部标识符，我们应该打开相应的表单视图，选择**开发者**菜单，然后选择**查看元数据**选项。这将显示包含记录的数据库 ID 和外部标识符（也称为
    XML ID）的对话框。
- en: 'For example, to look up the `demo` user ID, we should navigate to the users
    form view at `demo` user form, and then select the `base.user_demo` and that the
    database ID is `6`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要查找 `demo` 用户 ID，我们应该导航到 `demo` 用户表单的用户表单视图，然后选择 `base.user_demo` 并确认数据库
    ID 是 `6`：
- en: '![Figure 5.3 – The View Metadata dialog window'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.3 – 查看元数据对话框窗口'
- en: '](img/image_00_003.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_003.jpg)'
- en: Figure 5.3 – The View Metadata dialog window
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 查看元数据对话框窗口
- en: To find the external identifier for view elements, such as **form**, **tree**,
    **search**, or **action**, the **Developer** menu is also a good source of help.
    For this, we can use the appropriate **Edit View** option to open a form containing
    the details of the corresponding view. There, we will find an **External ID**
    field, which provides the information we are looking for.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找视图元素（如**表单**、**树**、**搜索**或**操作**）的外部标识符，**开发者**菜单也是一个很好的帮助来源。为此，我们可以使用适当的**编辑视图**选项打开包含相应视图详细信息的表单。在那里，我们将找到一个**外部
    ID**字段，它提供了我们所需的信息。
- en: 'For example, in the following screenshot, we can see that the `base.view_users_form`:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在下面的屏幕截图中，我们可以看到 `base.view_users_form`：
- en: '![Figure 5.4 – The Edit View window showing the External ID property for a
    form view'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 5.4 – 显示表单视图外部 ID 属性的编辑视图窗口'
- en: '](img/image_00_004.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_004.jpg)'
- en: Figure 5.4 – The Edit View window showing the External ID property for a form
    view
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – 显示表单视图外部 ID 属性的编辑视图窗口
- en: With that, we have learned about **External IDs** and how they can be used as
    aliases to reference database records. We have also looked at several ways to
    find the **XML IDs** that will be needed to reference records in the data files.
    Next, we will learn how to create data files where these **XML IDs** will be useful.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，我们已经了解了**外部ID**及其如何用作别名来引用数据库记录。我们还探讨了查找在数据文件中引用记录所需的**XML ID**的几种方法。接下来，我们将学习如何创建这些**XML
    ID**将非常有用的数据文件。
- en: Exporting and importing CSV data files
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导出和导入CSV数据文件
- en: An easy way to generate data files and get insight into what structure the files
    should have is to use the built-in export feature.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 生成数据文件并了解文件应具有的结构的一个简单方法就是使用内置的导出功能。
- en: With generated CSV files, we can learn about the format that's needed to import
    data manually into the system, edit them to perform mass updates, or even use
    them to produce demo data for our add-on modules.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 通过生成的CSV文件，我们可以了解手动将数据导入系统所需的格式，编辑它们以执行批量更新，甚至使用它们来为我们的附加模块生成演示数据。
- en: In this section, we will learn about the basics of exporting and importing data
    from Odoo's user interface.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习关于从Odoo用户界面导出和导入数据的基本知识。
- en: Exporting data
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导出数据
- en: '**Data exporting** is a standard feature that''s available in any list view.
    To use it, we must pick the rows to export by selecting the corresponding checkboxes,
    on the far left, and then selecting the **Export** option from the **Action**
    button at the top of the list.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据导出**是任何列表视图中都有的标准功能。要使用它，我们必须通过选择最左侧的相应复选框来选择要导出的行，然后从列表顶部的**操作**按钮中选择**导出**选项。'
- en: First, we should add a couple of Odoo books to the `Odoo Development Essentials
    11` and `Odoo 11 Development Cookbook`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们应该将几本Odoo书籍添加到`Odoo Development Essentials 11`和`Odoo 11 Development Cookbook`。
- en: 'We also need to have the **Contacts** app installed so that we can see a **Partner**
    list view and can export those records from there. Notice that the default view
    is **Kanban** for the contact cards, so we need to switch to the **list** view:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要安装**联系人**应用程序，这样我们就可以看到**合作伙伴**列表视图，并可以从那里导出这些记录。注意，联系卡片的默认视图是**看板**，因此我们需要切换到**列表**视图：
- en: '![Figure 5.5 – The Export option in the Action menu'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.5 – 操作菜单中的导出选项'
- en: '](img/image_00_005.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_005.jpg)'
- en: Figure 5.5 – The Export option in the Action menu
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.5 – 操作菜单中的导出选项
- en: We can also tick the checkbox in the header of the column to select all of the
    available records that match the current search criteria.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在列标题中勾选复选框以选择所有符合当前搜索标准的可用记录。
- en: 'The **Export** option takes us to the **Export Data** dialog form, where we
    can choose what and how to export. We are concerned with exporting in a way that
    allows us to import that file later, either manually or as part of an add-on module:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**导出**选项将我们带到**导出数据**对话框表单，在那里我们可以选择导出什么以及如何导出。我们关心的是以允许我们稍后手动或作为附加模块的一部分导入文件的方式导出：'
- en: '![Figure 5.6 – The Export Data dialog window'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.6 – 导出数据对话框窗口'
- en: '](img/image_00_006.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_006.jpg)'
- en: Figure 5.6 – The Export Data dialog window
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.6 – 导出数据对话框窗口
- en: 'At the top of the dialog form, we have two selections available:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在对话框表单的顶部，我们有两个可用的选择：
- en: '**I want to update data (import-compatible export)**: Enable this checkbox
    so that the data is exported in a format-friendly manner for a later import.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**我想更新数据（兼容导入的导出）**：启用此复选框，以便以格式友好的方式导出数据，以便稍后导入。'
- en: '**Export format**: You can choose between **CSV** or **XLSX** here. We will
    choose a **CSV** file to get a better understanding of the raw export format,
    which is still understood by any spreadsheet application.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**导出格式**：您可以选择**CSV**或**XLSX**。我们将选择CSV文件，以便更好地了解原始导出格式，该格式仍然被任何电子表格应用程序所理解。'
- en: 'Next, pick the columns to export. In this example, a very simple export was
    done by choosing only the **Name** field. By clicking on the **Export** button,
    an exported data file will be available. The exported CSV file should look like
    this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，选择要导出的列。在这个例子中，通过仅选择**名称**字段，执行了一个非常简单的导出。通过点击**导出**按钮，将可导出一个导出数据文件。导出的CSV文件应如下所示：
- en: '[PRE0]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first row contains the **field names**, which will be used during the import
    to automatically map the columns to their destination.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行包含**字段名称**，在导入过程中将用于自动将列映射到其目的地。
- en: The first row has the selected `name` column, as expected. An initial ID column
    was automatically added because the import-compatible export option was selected.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行有选定的`name`列，正如预期的那样。由于选择了导入兼容的导出选项，自动添加了一个初始ID列。
- en: The automatically added `id` column has the external ID assigned to each record.
    This allows the exported data file to be edited and reimported later, to update
    the records, instead of creating duplicated ones.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 自动添加的`id`列分配了每个记录的外部ID。这允许编辑导出的数据文件并在以后重新导入，以更新记录，而不是创建重复的记录。
- en: Missing external identifiers are automatically generated using the `__export__`
    prefix, as shown in the previous file export example.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 缺失的外部标识符将自动使用`__export__`前缀生成，如前一个文件导出示例所示。
- en: Tip
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Because of the automatically generated record identifiers, the export or import
    features can be used to mass edit Odoo data – export the data to CSV, use spreadsheet
    software to mass edit it, and then import it back into Odoo.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 由于自动生成的记录标识符，导出或导入功能可以用于批量编辑Odoo数据 – 将数据导出到CSV，使用电子表格软件进行批量编辑，然后将其重新导入到Odoo。
- en: Importing data
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 导入数据
- en: Once we have a properly formatted data file ready, we want to import it into
    Odoo. Let's learn how this is can be done through the web client user interface.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们准备好格式正确的数据文件，我们希望将其导入到Odoo中。让我们学习如何通过网页客户端用户界面来完成这项操作。
- en: First, we have to make sure that the import feature is *enabled*. It should
    be enabled by default. If not, the option is available in the **Settings** app,
    under the **General Settings** menu item. Under the **Permissions** section, the
    **Import & Export** option should be checked.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须确保导入功能是**启用**的。它应该默认启用。如果不是，可以在**设置**应用中的**常规设置**菜单项下找到此选项。在**权限**部分，应勾选**导入导出**选项。
- en: With this option enabled, the list view search widget will show an **Import
    records** option in the **Favorites** menu, next to the **Filters** and **Group
    By** menus.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 启用此选项后，列表视图搜索小部件将在**收藏**菜单中显示**导入记录**选项，位于**筛选器**和**分组依据**菜单旁边。
- en: Note
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `base_import` module, which is responsible for providing this feature.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 负责提供此功能的`base_import`模块。
- en: Let's try performing a bulk edit on our *Contact* or *Partner* data. Open the
    CSV file we just downloaded in a spreadsheet or a text editor and change a few
    values. We can also add some new rows, leaving the `id` column blank for them.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试对我们的**联系人**或**合作伙伴**数据进行批量编辑。在电子表格或文本编辑器中打开我们刚刚下载的CSV文件，并更改一些值。我们还可以添加一些新行，将`id`列留空。
- en: As we mentioned previously, the first column, `id`, provides a unique identifier
    for each row. This allows pre-existing records to be updated instead of us needing
    to duplicate them when we import the data back to Odoo. If we edit any of the
    names in the exported file, the corresponding record will be updated when we import
    the file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，第一列`id`为每一行提供唯一的标识符。这允许在将数据重新导入到Odoo时更新现有记录，而不是需要复制它们。如果我们编辑导出文件中的任何名称，则在导入文件时相应的记录将被更新。
- en: 'For the new rows that have been added to the CSV file, we can choose to either
    provide an external identifier of our choice or we can leave the `id` column blank.
    Either way, a new record will be created for them. As an example, we added a line
    with no `id` and the name `Phillip K. Dick` to be created in the database:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于已添加到CSV文件中的新行，我们可以选择提供我们选择的任何外部标识符，或者我们可以将`id`列留空。无论哪种方式，都会为它们创建一个新的记录。例如，我们添加了一条没有`id`且名称为`菲利普·K·迪克`的行以在数据库中创建：
- en: '[PRE1]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After saving these changes to the **CSV** file, click on the **Import** option,
    in the **Favorites** menu. The next page allows us to upload the data file. Then,
    the import assistant will be presented:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 保存这些更改到**CSV**文件后，点击**收藏**菜单中的**导入**选项。下一页允许我们上传数据文件。然后，将显示导入助手：
- en: '![Figure 5.7 – The Import a File assistant'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.7 – 导入文件助手'
- en: '](img/image_00_007.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/image_00_007.jpg)'
- en: Figure 5.7 – The Import a File assistant
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.7 – 导入文件助手
- en: Here, we should select the CSV file's location on the disk and then click on
    the **Test** button, at the top left, to check it for correctness.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们应该选择CSV文件在磁盘上的位置，然后点击左上角的**测试**按钮，以检查其正确性。
- en: Since the file to import is based on an Odoo export, there is a good chance
    that it will be valid and that the columns will be automatically mapped to their
    proper destination in the database. Depending on the application that's used to
    edit the data file, you may have to play with the separator and encoding options
    to get the best results.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 由于要导入的文件基于Odoo导出，它很可能有效，并且列将自动映射到数据库中的正确目的地。根据用于编辑数据文件的程序，你可能需要调整分隔符和编码选项以获得最佳结果。
- en: Now, click on **Import**, and there you go – the modifications and new records
    should have been loaded into Odoo!
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，点击 **导入**，然后你就会看到——修改和新记录应该已经被加载到Odoo中！
- en: Related records in CSV data files
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CSV数据文件中的相关记录
- en: The examples in the previous section were quite simple, but the data files can
    become more complex once we start using relational fields, linking records from
    several tables.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节中的示例相当简单，但一旦我们开始使用关系字段，将多个表中的记录链接起来，数据文件可能会变得更加复杂。
- en: Previously, we handled *Partner* records that were used in *Books*. We will
    now look at how we can represent the reference for these Partners in a CSV file
    for book data. In particular, we have a many-to-one (or a foreign key) relationship
    for the Publisher (the `publisher_id` field) and a many-to-many relationship for
    the Authors (the `author_ids` field).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们处理了在 *Books* 中使用的 *Partner* 记录。现在，我们将探讨如何在CSV文件中表示这些合作伙伴在书籍数据中的引用。特别是，我们有一个多对一（或外键）关系用于出版社（`publisher_id`
    字段）和一个多对多关系用于作者（`author_ids` 字段）。
- en: In the CSV file header line, relationship columns should have `/id` appended
    to their names. It will reference the related records using external identifiers.
    In our example, we will load the book publisher into a `publisher_id/id` field,
    using the external ID for the related partner as a value.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSV文件标题行中，关系列应该在其名称后附加 `/id`。它将使用外部标识符引用相关记录。在我们的例子中，我们将使用相关合作伙伴的外部ID作为值，将书籍出版商加载到
    `publisher_id/id` 字段中。
- en: It is possible to use `/.id` instead so that we can use the actual database
    IDs (the real numeric identifier that's been assigned), but this is rarely what
    we need. Unless you have good reason to do otherwise, always use external IDs
    instead of database IDs. Also, remember that database IDs are specific to a particular
    Odoo database, so, most of the time, it won't work correctly if it's imported
    into a database other than the original one.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `/.id` 来代替，这样我们就可以使用实际的数据库ID（已经分配的真实数字标识符），但这通常不是我们需要的。除非你有充分的理由这样做，否则始终使用外部ID而不是数据库ID。此外，请记住，数据库ID是特定于特定Odoo数据库的，所以，大多数情况下，如果导入到原始数据库之外的数据库，它可能无法正确工作。
- en: 'Many-to-many fields can also be imported through `CSV` data files. It''s as
    easy as providing a comma-separated list of external IDs, surrounded by double
    quotes. For example, to load the book authors, we would have an `author_ids/id`
    column, where we would use a comma-separated list of the external IDs of the Partners
    to link as values. Here is an example of what a to-many field would look like
    in a CSV file:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 多对多字段也可以通过 `CSV` 数据文件导入。这就像提供一个由逗号分隔的外部ID列表，并用双引号包围一样简单。例如，为了加载书籍作者，我们会有一个 `author_ids/id`
    列，我们会使用合作伙伴的外部ID列表作为值来链接。以下是一个CSV文件中多对多字段示例：
- en: '[PRE2]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: One-to-many fields often represent headers or lines, or parent or child relationships,
    and there is special support to import these types of relationships – for the
    same parent record, we can have several related lines.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一对多字段通常表示标题或行，或父或子关系，并且有特殊支持来导入这些类型的关联——对于同一父记录，我们可以有多个相关行。
- en: 'Here, we have an example of a one-to-many field in the *Partners* model: a
    company partner can have several child contacts. If we export the data from the
    *Partner* model and include the **Contacts**/**Name** field, we will see the structure
    that can be used to import this type of data:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，我们有一个 *Partners* 模型中一对一字段（多对一）的示例：一个公司合作伙伴可以有多个子联系人。如果我们从 *Partner* 模型导出数据并包括
    **Contacts**/**Name** 字段，我们将看到可以用来导入此类数据的结构：
- en: '![Figure 5.8 – Data file example importing to-many related records'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 – 数据文件示例导入多对多相关记录'
- en: '](img/image_00_008.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/image_00_008.jpg)'
- en: Figure 5.8 – Data file example importing to-many related records
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '![图5.8 – 数据文件示例导入多对多相关记录'
- en: The `id` and `name` columns are for the parent records, while the `child_ids`
    columns are for the child records. Notice how the parent record columns are left
    blank for the child records after the first one.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`id`和`name`列用于父记录，而`child_ids`列用于子记录。注意，在第一个之后，父记录列在子记录中留空。'
- en: 'The preceding table, which is represented as a CSV file, looks as follows:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 之前表示为CSV文件的表格如下所示：
- en: '[PRE3]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we can see that the first two columns, `id` and `name`, have values in
    the first line and are empty in the next two lines. They have data for the parent
    record, which is the *Contact's Company*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以看到前两列，`id`和`name`，在第一行中有值，在接下来的两行中为空。它们包含父记录的数据，即*联系人的公司*。
- en: The other two columns are both prefixed with `child_ids/` and have values on
    all three lines. They contain data for the contacts related to the parent company.
    The first line contains data for both the company and the first contact, while
    the lines that follow contain data for the columns of the child contacts.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 另外两列都以前缀`child_ids/`开头，并在所有三行中都有值。它们包含与父公司相关的联系人的数据。第一行包含公司和第一个联系人的数据，而随后的行包含子联系人列的数据。
- en: Adding module data
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加模块数据
- en: Modules use data files to load their default data, demonstration data, user
    interface definitions, and other configurations into the database. For this, we
    can use both CSV and XML files.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 模块使用数据文件将它们的默认数据、演示数据、用户界面定义和其他配置加载到数据库中。为此，我们可以使用CSV和XML文件。
- en: Changes in Odoo 12
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12中的更改
- en: The YAML file format was also supported until Odoo 11 and was removed in Odoo
    12\. Still, for a usage example, you can look at the `l10n_be` official module
    in Odoo 11, and for information on the YAML format, you can visit [http://yaml.org/](http://yaml.org/).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: YAML文件格式直到Odoo 11都受到支持，但在Odoo 12中被移除。不过，为了使用示例，您可以查看Odoo 11中的`l10n_be`官方模块，有关YAML格式的信息，您可以访问[http://yaml.org/](http://yaml.org/)。
- en: CSV files that are used by modules are the same as those we have seen and used
    for the import feature. When using them in modules, the filename must match the
    name of the model that the data will be loaded into. For example, a CSV file for
    loading data into the `library.book` model must be named `library.book.csv`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 模块使用的CSV文件与我们看到的用于导入功能的文件相同。在模块中使用时，文件名必须与将要加载数据的模型名称匹配。例如，用于将数据加载到`library.book`模型的CSV文件必须命名为`library.book.csv`。
- en: A common usage of data CSV files is for accessing security definitions that
    have been loaded into the `ir.model.access` model. They usually use CSV files
    in a `security/` subdirectory, named `ir.model.access.csv`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 数据CSV文件的一个常见用途是访问已加载到`ir.model.access`模型的安全定义。它们通常在`security/`子目录中使用CSV文件，命名为`ir.model.access.csv`。
- en: Demonstration data
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 演示数据
- en: Odoo add-on modules may install demonstration data, and it is considered good
    practice to do so. This is useful for providing usage examples for a module and
    the datasets to be used in tests. Demonstration data for a module is declared
    using the `demo` attribute of the `__manifest__.py` manifest file. Just like the
    `data` attribute, it is a list of filenames with the corresponding relative paths
    inside the module.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo附加模块可以安装演示数据，这样做被认为是良好的实践。这对于提供模块的使用示例和测试中要使用的数据集很有用。模块的演示数据使用`__manifest__.py`清单文件的`demo`属性声明。就像`data`属性一样，它是一个包含模块内部相应相对路径的文件名列表。
- en: Some demonstration data should be added to the `library.book` module. An easy
    way to do this is to export some data from the development database with the module
    installed.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 应该向`library.book`模块添加一些演示数据。一种简单的方法是使用已安装模块的开发数据库导出一些数据。
- en: The convention is to place data files in a `data/` subdirectory. We should save
    these data files in the `library_app` add-on module as `data/library.book.csv`.
    Since this data will be owned by our module, we should edit the `id` values to
    remove the `__export__` prefix in the identifiers that are generated by the export
    feature.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯上，将数据文件放在`data/`子目录中。我们应该将这些数据文件保存在`library_app`附加模块中，命名为`data/library.book.csv`。由于这些数据将属于我们的模块，我们应该编辑`id`值，以从由导出功能生成的标识符中删除`__export__`前缀。
- en: 'As an example, our `res.partner.csv` data file might look as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的`res.partner.csv`数据文件可能如下所示：
- en: '[PRE4]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `library.book.csv` data file containing the Book demo data will look as
    follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 包含图书演示数据的`library.book.csv`数据文件如下所示：
- en: '[PRE5]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Do not forget to add these data files to the `__manifest__.py` manifest''s
    `demo` attribute:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记将这些数据文件添加到 `__manifest__.py` 清单的 `demo` 属性中：
- en: '[PRE6]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The files are loaded in the order they are declared. This is important since
    records in a file cannot reference other records that haven't been created yet.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 文件按声明的顺序加载。这很重要，因为文件中的记录不能引用尚未创建的其他记录。
- en: The next time the module is updated, the content of the file will be imported,
    so long as it is installed with the demo data enabled.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下次模块更新时，只要安装了带有演示数据的模块，文件的内容就会被导入。
- en: Note
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'While data files are also re-imported on module upgrades, this is not the case
    for the demo data files: these are only imported upon module installation.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然数据文件在模块升级时也会重新导入，但对于演示数据文件来说并非如此：这些文件仅在模块安装时导入。
- en: Of course, XML files can also be used to load or initialize data, leveraging
    the additional features they provide, compared to plain CSV files. In the next
    section, we will discuss using data files in XML format.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，与普通的 CSV 文件相比，XML 文件可以用来加载或初始化数据，利用它们提供的额外功能。在下一节中，我们将讨论使用 XML 格式的数据文件。
- en: Using XML data files
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XML 数据文件
- en: While CSV files provide a simple and compact format to represent data, XML files
    are more powerful and give more control over the loading process. For example,
    their filenames are not required to match the model to be loaded. This is because
    the XML format is much richer and more information regarding what to load can
    be provided through the XML elements inside the file.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 CSV 文件提供了一个简单且紧凑的格式来表示数据，但 XML 文件功能更强大，并提供了更多对加载过程的控制。例如，它们的文件名不需要与要加载的模型匹配。这是因为
    XML 格式更加丰富，可以通过文件内的 XML 元素提供更多有关加载的信息。
- en: We used XML data files in the previous chapters. The user interface components,
    such as the views and menu items, are, in fact, records that are stored in system
    models. The XML files in the modules are used to load these records into the instance
    database.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在之前的章节中使用了 XML 数据文件。用户界面组件，如视图和菜单项，实际上是在系统模型中存储的记录。模块中的 XML 文件用于将这些记录加载到实例数据库中。
- en: 'To showcase this, a second data file will be added to the `library_app` module,
    `data/book_demo.xml`, with the following content:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示这一点，将在 `library_app` 模块中添加第二个数据文件，`data/book_demo.xml`，其内容如下：
- en: '[PRE7]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'As usual, the new data file must be declared in the `__manifest__.py` file:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 与往常一样，新的数据文件必须在 `__manifest__.py` 文件中声明：
- en: '[PRE8]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Similar to the CSV data file we saw in the previous section, this file also
    loads data into the *Library Books* model.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 与上一节中看到的 CSV 数据文件类似，此文件也将数据加载到 *图书馆书籍* 模型中。
- en: XML data files have an `<odoo>` top element, inside of which there can be several
    `<record>` elements, which are the equivalent to data rows in CSV files.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: XML 数据文件有一个 `<odoo>` 顶级元素，其中可以包含多个 `<record>` 元素，它们相当于 CSV 文件中的数据行。
- en: Note
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `<odoo>` top element in data files was introduced in version 9.0 and replaces
    the former `<openerp>` tag. A `<data>` section inside the top element is still
    supported, but it's now optional. In fact, now, `<odoo>` and `<data>` are equivalent,
    so we could use either one as the top element for our XML data files.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 数据文件中的 `<odoo>` 顶级元素是在 9.0 版本中引入的，并取代了之前的 `<openerp>` 标签。顶级元素内的 `<data>` 部分仍然受支持，但现在它是可选的。实际上，现在
    `<odoo>` 和 `<data>` 是等效的，因此我们可以使用任何一个作为我们的 XML 数据文件的顶级元素。
- en: A `<record>` element has two mandatory attributes, `model` and `id`, for the
    external identifier for the record, and contains a `<field>` tag for each field
    to write on.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`<record>` 元素有两个强制属性，`model` 和 `id`，用于记录的外部标识符，并包含一个 `<field>` 标签，用于写入每个字段。'
- en: Note that the slash notation in the field names is not available here; we can't
    use `<field name="publisher_id/id">`. Instead, the `ref` special attribute is
    used to reference external identifiers. We'll discuss the values of the relational
    to-many fields in a moment.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '注意，字段名称中的斜杠表示法在这里不可用；我们无法使用 `<field name="publisher_id/id">`。相反，使用 `ref` 特殊属性来引用外部标识符。我们将在稍后讨论多对多关系字段的值。 '
- en: You may have noticed the `noupdate="1"` attribute in the top `<odoo>` element.
    This prevents the data records from being loaded on module upgrades so that any
    later edits that are made to them are not lost.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了 `<odoo>` 元素顶部的 `noupdate="1"` 属性。这阻止了数据记录在模块升级时被加载，因此对它们的任何后续编辑都不会丢失。
- en: The noupdate data attribute
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: noupdate 数据属性
- en: When a module is upgraded, the data file loading is repeated, and the module's
    records are rewritten. This means that upgrading a module will overwrite any manual
    changes that might have been made to the module's data.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 当模块升级时，数据文件加载会重复，模块的记录会被重写。这意味着升级模块将覆盖可能对模块数据进行的任何手动更改。
- en: Tip
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Notably, if views were manually modified to add quick customizations, these
    changes will be lost with the next module upgrade. To avoid this, the correct
    approach is to create inherited views with the changes we want to introduce.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，如果视图被手动修改以添加快速自定义，这些更改将在下一个模块升级时丢失。为了避免这种情况，正确的方法是创建继承视图，以引入我们想要引入的更改。
- en: This rewrite behavior is the default, but it can be changed so that some of
    the data is only imported at install time, and is ignored in later module upgrades.
    This can be done using the `noupdate="1"` attribute in the `<odoo>` or `<data>`
    elements.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 此重写行为是默认的，但可以更改，以便某些数据仅在安装时导入，并在后续模块升级中忽略。这可以通过在`<odoo>`或`<data>`元素中使用`noupdate="1"`属性来完成。
- en: This is useful for data that is to be used for the initial configuration but
    is expected to be customized later since these manually made customizations will
    be safe from module upgrades. For example, it is frequently used for record access
    rules, allowing them to be adapted to implementation-specific needs.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于预期以后将进行自定义的初始配置数据很有用，因为这些手动进行的自定义将不会受到模块升级的影响。例如，它经常用于记录访问规则，允许它们适应特定实施的需求。
- en: It is possible to have more than one `<data>` section in the same `XML` file.
    We can take advantage of this to separate data to import only once, with `noupdate="1"`,
    and data that can be re-imported on each upgrade, with `noupdate="0"`. `noupdate="0"`
    is the default, so we can just omit it if we prefer. Note that we need to have
    a top-level XML element, so in this case, we will use two `<data>` sections. They
    must be inside a top-level `<odoo>` or `<data>` element.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一个`XML`文件中可以有多个`<data>`部分。我们可以利用这一点来分离只导入一次的数据，使用`noupdate="1"`，以及可以在每次升级时重新导入的数据，使用`noupdate="0"`。`noupdate="0"`是默认值，因此如果我们愿意，可以省略它。请注意，我们需要有一个顶级XML元素，因此在这种情况下，我们将使用两个`<data>`部分。它们必须位于顶级`<odoo>`或`<data>`元素内。
- en: Tip
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The `noupdate` attribute can be tricky when we're developing modules because
    changes that are made to the data later will be ignored. One solution is to, instead
    of upgrading the module with the `-u` option, reinstall it using the `-i` option.
    Reinstalling from the command line using the `-i` option ignores the `noupdate`
    flags on data records.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们开发模块时，`noupdate`属性可能会很棘手，因为对数据的后续更改将被忽略。一种解决方案是，而不是使用`-u`选项升级模块，使用`-i`选项重新安装它。使用命令行通过`-i`选项重新安装会忽略数据记录上的`noupdate`标志。
- en: The `noupdate` flag is stored in the **External Identifier** information for
    each record. It's possible to manually edit it directly using the **External Identifier**
    form, which is available in the **Technical** menu, by using the **Non Updatable**
    checkbox.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`noupdate`标志存储在每个记录的**外部标识符**信息中。可以直接使用**外部标识符**表单手动编辑它，该表单位于**技术**菜单中，通过使用**不可更新**复选框。'
- en: Changes in Odoo 12
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 12中的更改
- en: In **Developer Menu**, when accessing **View Metadata**, the dialog box now
    also shows the value for the **No Update** flag, along with the record's **XML
    ID**. Furthermore, **No Update flag** can be changed there by clicking on it.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在**开发者菜单**中，当访问**查看元数据**时，对话框现在也会显示**无更新**标志的值，以及记录的**XML ID**。此外，可以通过点击来更改**无更新标志**。
- en: Defining records in XML
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在XML中定义记录
- en: In an `XML` data file, each `<record>` element has two basic attributes, `id`
    and `model`, and contains `<field>` elements that assign values to each column.
    The `id` attribute corresponds to the record's external identifier, while the
    `model` attribute corresponds to the target model. The `<field>` elements have
    a few different ways to assign values. Let's look at them in detail.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个`XML`数据文件中，每个`<record>`元素有两个基本属性，`id`和`model`，并包含`<field>`元素，为每一列分配值。`id`属性对应于记录的外部标识符，而`model`属性对应于目标模型。《field》元素有几种不同的方式来分配值。让我们详细看看它们。
- en: Setting field values directly
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 直接设置字段值
- en: The `name` attribute of a `<field>` element identifies the field to write on.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '`<field>`元素的`name`属性标识要写入的字段。'
- en: 'The value to write is the element''s content: the text between the field''s
    opening and closing tag. For dates and date-times, `eval` attributes with expressions
    that return `date` or `datetime` objects will work. Returning strings with `"YYYY-mm-dd"`
    and `"YYYY-mm-dd HH:MM:SS"` will be converted properly. For boolean fields, the
    `"0"` and `"False"` values are converted into `False`, and any other non-empty
    values will be converted into `True`.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入的值是元素的内容：字段打开和关闭标签之间的文本。对于日期和日期时间，返回 `date` 或 `datetime` 对象的表达式 `eval` 属性将有效。返回
    `"YYYY-mm-dd"` 和 `"YYYY-mm-dd HH:MM:SS"` 的字符串将被正确转换。对于布尔字段，`"0"` 和 `"False"` 值被转换为
    `False`，任何其他非空值将被转换为 `True`。
- en: Changes in Odoo 10
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 10 的变化
- en: The way Boolean `False` values are read from data files has been improved in
    Odoo 10\. In previous versions, any non-empty values, including `"0"` and `"False"`,
    were converted into `True`. Until Odoo 9, Boolean values should be set using the
    `eval` attribute, such as `eval="False"`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 10 中，从数据文件中读取布尔 `False` 值的方式已得到改进。在之前的版本中，任何非空值，包括 `"0"` 和 `"False"`，都被转换为
    `True`。直到 Odoo 9，布尔值应使用 `eval` 属性设置，例如 `eval="False"`。
- en: Setting values using expressions
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用表达式设置值
- en: A more elaborate alternative for setting a field value is using the `eval` attribute.
    It evaluates a Python expression and assigns the result to the field.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 设置字段值的另一种更详细的方法是使用 `eval` 属性。它评估一个 Python 表达式并将结果分配给字段。
- en: The expression is evaluated in a context that, besides Python built-ins, also
    has some additional identifiers that are available to build the expression to
    evaluate.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 表达式是在一个上下文中评估的，除了 Python 内置函数外，还有一些额外的标识符可用于构建要评估的表达式。
- en: 'To handle dates, the following Python modules are available: `time`, `datetime`,
    `timedelta`, and `relativedelta`. They allow you to calculate date values, something
    that is frequently used in demonstrations and test data so that the dates used
    are close to the module installation date. For more information about these Python
    modules, see the documentation at [https://docs.python.org/3/library/datatypes.html](https://docs.python.org/3/library/datatypes.html).'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理日期，以下 Python 模块可用：`time`、`datetime`、`timedelta` 和 `relativedelta`。它们允许您计算日期值，这在演示和测试数据中经常使用，以便使用的日期接近模块安装日期。有关这些
    Python 模块的更多信息，请参阅[https://docs.python.org/3/library/datatypes.html](https://docs.python.org/3/library/datatypes.html)中的文档。
- en: 'For example, to set a value to yesterday, we can use the following code:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要将值设置为昨天，我们可以使用以下代码：
- en: '[PRE9]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Also available in the evaluation context is the `ref()` function, which is
    used to translate an external identifier into the corresponding database ID. This
    can be used to set values for relational fields. Here is an example:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 评估上下文中还可用 `ref()` 函数，它用于将外部标识符转换为相应的数据库 ID。这可以用于设置关系字段的值。以下是一个示例：
- en: '[PRE10]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This example sets a value for the `publisher_id` field using the `eval` attribute.
    The evaluated expression is Python code that uses the special `ref()` function,
    which is used to translate an *XML ID* into the corresponding database ID.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例使用 `eval` 属性为 `publisher_id` 字段设置值。评估的表达式是使用特殊 `ref()` 函数的 Python 代码，该函数用于将
    *XML ID* 转换为相应的数据库 ID。
- en: Setting values on many-to-one relationship fields
  id: totrans-175
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在多对一关系字段上设置值
- en: For many-to-one relationship fields, the value to write is the database ID for
    the linked record. In XML files, we usually know the *XML ID* for the record,
    and we need to have it translated into the actual database ID.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于多对一关系字段，要写入的值是链接记录的数据库 ID。在 XML 文件中，我们通常知道记录的 *XML ID*，我们需要将其转换为实际的数据库 ID。
- en: One way to do this is to use the `eval` attribute with a `ref()` function, like
    we just did in the previous section.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 做这件事的一种方法是在 `eval` 属性中使用 `ref()` 函数，就像我们在上一节中做的那样。
- en: 'A simpler alternative is to use the `ref` attribute, which is available for
    `<field>` elements; for example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一种更简单的方法是使用 `ref` 属性，该属性适用于 `<field>` 元素；例如：
- en: '[PRE11]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This example sets a value for the `publisher_id` many-to-one field, referencing
    the database record with an *XML ID* of `res_partner_packt`.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此示例为 `publisher_id` 多对一字段设置值，引用具有 `res_partner_packt` *XML ID* 的数据库记录。
- en: Setting values on to-many relationship fields
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在多对多关系字段上设置值
- en: For one-to-many and many-to-many fields, instead of a single ID, a list of related
    IDs is expected. Furthermore, several operations can be performed – we may want
    to replace the current list of related records with a new one, or append a few
    records to it, or even unlink some records.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一对一和多对多字段，期望的是一个相关ID的列表，而不是单个ID。此外，可以执行多个操作 - 我们可能想要用新的列表替换当前的相关记录列表，或者向其中添加一些记录，甚至解除一些记录的链接。
- en: To support write operations on to-many fields, we can use a special syntax in
    the `eval` attribute. To write to a to-many field, we can use a *list* of *triples*.
    Each *triple* is a `write` command that does different things based on the code
    that was used in the first element.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 为了支持对多对字段的写操作，我们可以在 `eval` 属性中使用特殊语法。要写入多对字段，我们可以使用一个 *三元组* 的 *列表*。每个 *三元组*
    是一个 `write` 命令，根据第一个元素中使用的代码执行不同的操作。
- en: 'To overwrite the list of authors of a book, we would use the following code:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 要覆盖书籍作者列表，我们会使用以下代码：
- en: '[PRE12]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To append a linked record to the current list of the authors of a book, we
    would use the following code:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要将链接记录追加到书籍作者的当前列表中，我们会使用以下代码：
- en: '[PRE13]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding examples are the most common. In both cases, we used just one
    command, but we could chain several commands in the outer list. The `append (4)`
    and `replace (6)` commands are the most used. In the case of `append (4)`, the
    last value of the triple is not used and is not needed, so it can be omitted,
    as we did in the preceding code sample.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例是最常见的。在两种情况下，我们只使用了一个命令，但我们可以在外部列表中链式调用多个命令。`append (4)` 和 `replace (6)`
    命令是最常用的。在 `append (4)` 的情况下，三元组的最后一个值未使用且不需要，因此可以省略，就像我们在前面的代码示例中所做的那样。
- en: 'The complete list of available **to-many write commands** is as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的完整 **多对写命令** 列表如下：
- en: '`(0, _ , {''field'': value})` creates a new record and links it to this one.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(0, _, {''field'': value})` 创建一个新记录并将其链接到当前记录。'
- en: '`(1, id, {''field'': value})` updates the values on an already linked record.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(1, id, {''field'': value})` 更新已链接记录上的值。'
- en: '`(2, id, _)` removes the link to and deletes the id-related record.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(2, id, _)` 删除与id相关的记录的链接。'
- en: '`(3, id, _)` removes the link to, but does not delete, the id-related record.
    This is usually what you will use to delete related records on many-to-many fields.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(3, id, _)` 删除与id相关的记录的链接，但不删除该记录。这通常是你用于在多对多字段上删除相关记录时使用的方法。'
- en: '`(4, id, _)` links an already existing record. This can only be used for many-to-many
    fields.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(4, id, _)` 链接一个已存在的记录。这只能用于多对多字段。'
- en: '`(5, _, _)` removes all the links, without deleting the linked records.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(5, _, _)` 删除所有链接，但不删除链接的记录。'
- en: '`(6, _, [ids])` replaces the list of linked records with the provided list.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(6, _, [ids])` 用提供的列表替换了链接记录的列表。'
- en: The `_` underscore symbol that was used in the preceding list represents irrelevant
    values, usually filled with `0` or `False`.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的列表中使用的 `_` 下划线符号表示无关的值，通常用 `0` 或 `False` 填充。
- en: Tip
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: The trailing irrelevant values can be safely omitted. For example, `(4, id,
    _)` can be used as `(4, id)`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 可以安全地省略尾随的无关值。例如，`(4, id, _)` 可以用作 `(4, id)`。
- en: In this section, we learned how to use the `<record>` tag to load records into
    the database. As an alternative, there are a few shortcut tags that can be used
    in place of a regular `<record>` tag. The next section will introduce these to
    us.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了如何使用 `<record>` 标签将记录加载到数据库中。作为替代，有一些快捷标签可以用作常规 `<record>` 标签的替代。下一节将向我们介绍这些标签。
- en: Shortcuts for frequently used models
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常用模型的快捷方式
- en: If we go back to [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*, we will find elements other than `<record>` in
    the XML files, such as `<menuitem>`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们回顾到 [*第3章*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072)，*您的第一个Odoo应用程序*，我们将在XML文件中找到除了
    `<record>` 之外的其他元素，例如 `<menuitem>`。
- en: These are convenient shortcuts for frequently used models, with a more compact
    notation compared to the regular `<record>` elements. They are used to load data
    into base models that support the user interface, and they will be explored in
    more detail later, in [*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287),
    *Backend Views – Designing the User Interface*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是常用模型的便捷快捷方式，与常规 `<record>` 元素相比，具有更紧凑的表示法。它们用于将数据加载到支持用户界面的基础模型中，这些将在 [*第10章*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287)，*后端视图
    - 设计用户界面* 中更详细地探讨。
- en: 'For reference, these are the shortcut elements available, along with the corresponding
    models they load data into:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是可以用的快捷元素及其加载的数据对应的模型：
- en: '`<menuitem>` is for the menu items model, `ir.ui.menu`.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<menuitem>` 用于菜单项模型，`ir.ui.menu`。'
- en: '`<template>` is for *QWeb* templates stored in the `ir.ui.view` model.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>` 用于存储在 `ir.ui.view` 模型中的 *QWeb* 模板。'
- en: Changes in Odoo 14
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 14 的变化
- en: Past versions of Odoo used to support additional shortcut tags, which are not
    supported anymore. There was an `<act_window>` for the window action model, `ir.actions.act_window`,
    and a `<report>` for the report action model, `ir.actions.report.xml`.
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Odoo 的早期版本曾经支持额外的快捷标签，但这些标签现在不再受支持。曾经有一个 `<act_window>` 用于窗口动作模型，`ir.actions.act_window`，以及一个
    `<report>` 用于报告动作模型，`ir.actions.report.xml`。
- en: It is important to note that, when used to modify existing records, the shortcut
    elements overwrite all the fields. This differs from the `<record>` basic element,
    which only writes to the fields provided. So, for cases where we need to modify
    just a particular field of a user interface element, we should do so using a `<record>`
    element instead.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，当用于修改现有记录时，快捷元素会覆盖所有字段。这与 `<record>` 基本元素不同，后者只写入提供的字段。因此，对于需要修改用户界面元素特定字段的情况，我们应该使用
    `<record>` 元素来操作。
- en: Using other actions in XML data files
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 XML 数据文件中使用其他操作
- en: So far, we have seen how to add or update data using XML files. But XML files
    also allow you to delete data and execute arbitrary model methods. This can be
    useful for more complex data setups. In the following sections, we will learn
    how the delete and function call XML features can be used.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了如何使用 XML 文件添加或更新数据。但 XML 文件还允许您删除数据并执行任意模型方法。这对于更复杂的数据设置可能很有用。在接下来的章节中，我们将学习如何使用删除和函数调用
    XML 功能。
- en: Deleting records
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除记录
- en: To delete a data record, we can use the `<delete>` element, providing it with
    either an ID or a search domain to find the target records.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要删除数据记录，我们可以使用 `<delete>` 元素，并为其提供一个 ID 或搜索域以找到目标记录。
- en: 'For example, using a search domain to find the record to delete looks as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，使用搜索域查找要删除的记录如下所示：
- en: '[PRE14]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If we know the specific ID to delete, we can use it with the `id` attribute
    instead. This was the case for the previous example, so it could also be written
    like this:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们知道要删除的特定 ID，我们可以使用它与 `id` 属性一起。这是上一个示例的情况，因此也可以这样写：
- en: '[PRE15]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This has the same effect as the previous example. Since we know the ID to look
    for, instead of using the `search` attribute with a domain expression, we can
    simply use the `id` attribute with the *XML ID*.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这与上一个示例具有相同的效果。由于我们知道要查找的 ID，我们可以简单地使用 `id` 属性与 *XML ID* 一起，而不是使用带有域表达式的 `search`
    属性。
- en: Calling model methods
  id: totrans-219
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 调用模型方法
- en: An `XML` file can also execute arbitrary methods during its load process through
    the `<function>` element. This can be used to set up demo and test data.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 `XML` 文件也可以通过 `<function>` 元素在其加载过程中执行任意方法。这可以用于设置演示和测试数据。
- en: 'For example, the **Notes** app, which is bundled with Odoo, uses it to set
    up demonstration data:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Odoo 内置的 **笔记** 应用程序使用它来设置演示数据：
- en: '[PRE16]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This calls the `_init_data_user_note_stages` method of the `res.users` model,
    passing no arguments. The argument list is provided by the `eval` attribute, which
    is an empty list in this case.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这调用 `res.users` 模型的 `_init_data_user_note_stages` 方法，不传递任何参数。参数列表由 `eval` 属性提供，在这种情况下是一个空列表。
- en: This completes everything we need to know to use XML data files. We provided
    an overview of `<data>` elements and the `noupdate` flag. We then learned how
    to use the `<record>` element to load data records, as well as how to set values
    on related fields. We also learned about record shortcuts, such as `<menuitem>`
    and `<template>`. Finally, we learned how to delete records and make arbitrary
    function calls with the `<delete>` and `<function>` elements.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了我们使用 XML 数据文件所需了解的所有内容。我们提供了 `<data>` 元素和 `noupdate` 标志的概述。然后我们学习了如何使用
    `<record>` 元素来加载数据记录，以及如何设置相关字段的值。我们还了解了记录快捷方式，例如 `<menuitem>` 和 `<template>`。最后，我们学习了如何使用
    `<delete>` 和 `<function>` 元素删除记录和执行任意函数调用。
- en: With this, we should be prepared to use XML data files for whatever data needs
    our project might have.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，我们应该准备好使用 XML 数据文件来满足我们项目可能需要的任何数据需求。
- en: Summary
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to represent data in text files. These can be
    used to manually import data into Odoo or include it in add-on modules as default
    or *demonstration data*.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在文本文件中表示数据。这些可以用于手动将数据导入 Odoo 或将其包含在附加模块中作为默认或 *演示数据*。
- en: At this point, we should be able to export and import CSV data files from the
    web interface and leverage *external IDs* to detect and update records that already
    exist in the database. They can also be used to perform a mass edit on data, by
    editing and reimporting a CSV file that has been exported from Odoo.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们应该能够从网络界面导出和导入 CSV 数据文件，并利用 *外部 ID* 来检测和更新数据库中已存在的记录。它们还可以用来对数据进行批量编辑，通过编辑并重新导入从
    Odoo 导出的 CSV 文件。
- en: We also learned about how XML data files are structured, and all the features
    they provide, in more detail. These were not only set values on fields but also
    actions such as deleting records and calling model methods.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还更详细地学习了 XML 数据文件的结构以及它们提供的所有功能。这些不仅包括字段上的设置值，还包括如删除记录和调用模型方法等操作。
- en: In the next chapter, we will focus on how to use *records* to work with the
    data contained in models. This will give us the necessary tools to then implement
    our application's business logic and rules.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将专注于如何使用 *记录* 来处理模型中包含的数据。这将为我们提供实施应用程序的业务逻辑和规则所必需的工具。
- en: Further reading
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The official Odoo documentation provides additional resources on data files:
    [https://www.odoo.com/documentation/15.0/developer/reference/backend/data.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/data.html).'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 官方的 Odoo 文档提供了关于数据文件的其他资源：[https://www.odoo.com/documentation/15.0/developer/reference/backend/data.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/data.html)。
