- en: Chapter 8. Hierarchical Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating hierarchical categories
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a category administration interface with django-mptt-admin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a category administration interface with django-mptt-tree-editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering categories in a template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a single selection field to choose a category in forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a checkbox list to choose multiple categories in forms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whether you build your own forum, threaded comments, or categorization system,
    there will be a moment when you need to save hierarchical structures in the database.
    Although the tables of relational databases (such as MySQL and PostgreSQL) are
    of a flat manner, there is a fast and effective way to store hierarchical structures.
    It is called **Modified Preorder Tree Traversal** (**MPTT**). MPTT allows you
    to read the tree structures without recursive calls to the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'At first, let''s get familiar with the terminology of the tree structures.
    A tree data structure is a recursive collection of nodes, starting at the root
    node and having references to child nodes. There is a restriction that no node
    references back to create a loop and no reference is duplicated. The following
    are some other terms to learn:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Parent** is any node that is referencing to the child nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Descendants** are the nodes that can be reached by recursively traversing
    from a parent to its children. Therefore, the node''s descendants will be its
    child, the child''s children, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ancestors** are the nodes that can be reached by recursively traversing from
    a child to its parent. Therefore, the node''s ancestors will be its parent, the
    parent''s parent, and so on up to the root.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Siblings** are the nodes with the same parent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Leaf** is a node without children.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, I''ll explain how MPTT works. Imagine that you lay out your tree horizontally
    with the root node at the top. Each node in the tree has left and right values.
    Imagine them as small left and right handles on the left and right-hand side of
    the node. Then, you walk (traverse) around the tree counter-clockwise, starting
    from the root node and mark each left or right value that you find with a number:
    1, 2, 3, and so on. It will look similar to the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction](img/B04912_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the database table of this hierarchical structure, you will have a title,
    left value, and right value for each node.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you want to get the subtree of the **B** node with **2** as the left
    value and **11** as the right value, you will have to select all the nodes that
    have a left value between **2** and **11**. They are **C**, **D**, **E**, and
    **F**.
  prefs: []
  type: TYPE_NORMAL
- en: To get all the ancestors of the **D** node with **5** as the left value and
    **10** as the right value, you have to select all the nodes that have a left value
    that is less than **5** and a right value that is more than **10**. These would
    be **B** and **A**.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the number of the descendants for a node, you can use the following
    formula: *descendants = (right - left - 1) / 2*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Therefore, the number of descendants for the **B** node can be calculated as
    shown in the following: *(11 - 2 - 1) / 2 = 4*'
  prefs: []
  type: TYPE_NORMAL
- en: If we want to attach the **E** node to the **C** node, we will have to update
    the left and right values only for the nodes of their first common ancestor, the
    **B** node. Then, the **C** node will still have **3** as the left value; the
    **E** node will get **4** as the left value and **5** as the right value; the
    right value of the **C** node will become **6**; the left value of the **D** node
    will become **7**; the left value of the **F** node will stay **8**; and the others
    will also remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, there are other tree-related operations with nodes in MPTT. It might
    be too complicated to manage all this by yourself for every hierarchical structure
    in your project. Luckily, there is a Django app called **django-mptt** that handles
    these algorithms and provides an easy API to handle the tree structures. In this
    chapter, you will learn how to use this helper app.
  prefs: []
  type: TYPE_NORMAL
- en: Creating hierarchical categories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To illustrate how to deal with MPTT, we will create a `movies` app that will
    have a hierarchical `Category` model and a `Movie` model with a many-to-many relationship
    with the categories.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To get started, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `django-mptt` in your virtual environment using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create a `movies` app. Add the `movies` app as well as `mptt` to `INSTALLED_APPS`
    in the settings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a hierarchical `Category` model and a `Movie` model, which will
    have a many-to-many relationship with the categories, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `models.py` file and add a `Category` model that extends `mptt.models.MPTTModel`
    and `CreationModificationDateMixin`, which we defined in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*. In addition to the fields
    coming from the mixins, the `Category` model will need to have a `parent` field
    of the `TreeForeignKey` type and a `title` field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create the `Movie` model that extends `CreationModificationDateMixin`.
    Also, include a `title` field and a categories field of the `TreeManyToManyField`
    type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `MPTTModel` mixin will add the `tree_id`, `lft`, `rght`, and `level` fields
    to the `Category` model. The `tree_id` field is used as you can have multiple
    trees in the database table. In fact, each root category is saved in a separate
    tree. The `lft` and `rght` fields store the left and right values used in the
    MPTT algorithms. The `level` field stores the node's depth in the tree. The root
    node will be level `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides new fields, the `MPTTModel` mixin adds methods to navigate through
    the tree structure similar to how you would navigate through DOM elements using
    JavaScript. These methods are listed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to get the ancestors of a category, use the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The ascending parameter defines from which direction to read the nodes (the
    default is `False`). The `include_self` parameter defines whether to include the
    category itself in `QuerySet` (the default is `False`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To just get the root category, use the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to get the direct children of a category, use the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get all the descendants of a category, use the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the `include_self` parameter again defines whether or not to include the
    category itself in `QuerySet`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to get the descendant count without querying the database, use
    the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To get all the siblings, call the following method:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Root categories are considered to be siblings of other root categories.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To just get the previous and next siblings, call the following methods:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, there are methods to check whether the category is a root, child, or
    leaf, as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All these methods can be used either in the views, templates, or management
    commands. If you want to manipulate the tree structure, you can also use the `insert_at()`
    and `move_to()` methods. In this case, you can read about them and the tree manager
    methods at [http://django-mptt.github.io/django-mptt/models.html](http://django-mptt.github.io/django-mptt/models.html).
  prefs: []
  type: TYPE_NORMAL
- en: In the preceding models, we used `TreeForeignKey` and `TreeManyToManyField`.
    These are similar to `ForeignKey` and `ManyToManyField`, except that they show
    the choices indented in hierarchies in the administration interface.
  prefs: []
  type: TYPE_NORMAL
- en: Also, note that in the `Meta` class of the `Category` model, we order the categories
    by `tree_id` and then by the `lft` value in order to show the categories naturally
    in the tree structure.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a model mixin to handle creation and modification dates* recipe
    in [Chapter 2](ch02.html "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Structuring the page menu* recipe in [Chapter 7](ch07.html "Chapter 7. Django
    CMS"), *Django CMS*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a category administration interface with django-mptt-admin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a category administration interface with django-mptt-admin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `django-mptt` app comes with a simple model administration mixin that allows
    you to create the tree structure and list it with indentation. To reorder trees,
    you need to either create this functionality yourself or use a third-party solution.
    Currently, there are two apps that can help you to create a draggable administration
    interface for hierarchical models. One of them is `django-mptt-admin`. Let's take
    a look at it in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to have the `django-mptt-admin` app installed by performing
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, install the app in your virtual environment using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, put it in `INSTALLED_APPS` in the settings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an administration interface for the `Category` model that extends `DjangoMpttAdmin`
    instead of `admin.ModelAdmin`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The administration interface for the categories will have two modes: Tree view
    and Grid view. The Tree view looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Tree view uses the jqTree jQuery library for node manipulation. You can
    expand and collapse categories for a better overview. To reorder them or change
    the dependencies, you can drag and drop the titles in this list view. During reordering,
    the user interface looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Note that any usual list-related settings such as `list_display` or `list_filter`
    will be ignored.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to filter categories, sort or filter them by a specific field, or
    apply admin actions, you can switch to the Grid view, which shows the default
    category change list.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating hierarchical categories* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a category administration interface with django-mptt-tree-editor*
    recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a category administration interface with django-mptt-tree-editor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to use the common functionality of the change list, such as columns,
    admin actions, editable fields, or filters, in your administration interface as
    well as manipulate the tree structure in the same view, you need to use another
    third-party app called `django-mptt-tree-editor`. Let's see how to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we need to have the `django-mptt-tree-editor` app installed. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To start, install the app in your virtual environment using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, put it in `INSTALLED_APPS` in the settings, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create an administration interface for the `Category` model that extends `TreeEditor`
    instead of `admin.ModelAdmin`. Make sure that you add `indented_short_title` and
    `actions_column` at the beginning of the `list_display` setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The administration interface for your categories now looks similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The category administration interface allows you to expand or collapse the
    categories. The `indented_short_title` column will either return the indented
    short title from the `short_title()` method of the category (if there is one)
    or the indented Unicode representation of the category. The column defined as
    `actions_column` will be rendered as a handle to reorder or restructure the categories
    by dragging and dropping them. As the dragging handle is in a different column
    than the category title, it might feel weird to work with it. During reordering,
    the user interface looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, it is possible to use all the list-related features of the default
    Django administration interface in the same view.
  prefs: []
  type: TYPE_NORMAL
- en: In `django-mptt-tree-editor`, the tree-editing functionality is ported from
    FeinCMS, another content management system made with Django.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating hierarchical categories* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating a category administration interface with django-mptt-admin* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendering categories in a template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have created categories in your app, you need to display them hierarchically
    in a template. The easiest way to do this is to use the `{% recursetree %}` template
    tag from the `django-mptt` app. I will show you how to do that in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you have the `Category` model created and some categories entered
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pass `QuerySet` of your hierarchical categories to the template and then use
    the `{% recursetree %}` template tag as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a view that loads all the categories and passes them to a template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a template with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a URL rule to show the view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The template will be rendered as nested lists, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `{% recursetree %}` block template tag takes `QuerySet` of the categories
    and renders the list using the template content in the tag. There are two special
    variables used here: `node` and `children`. The `node` variable is an instance
    of the `Category` model. You can use its fields or methods such as `{{ node.get_descendant_count
    }}`, `{{ node.level }}`, or `{{ node.is_root }}` to add specific CSS classes or
    HTML5 `data-*` attributes for JavaScript. The second variable, `children`, defines
    where to place the children of the current category.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your hierarchical structure is very complex, with more than 20 depth levels,
    it is recommended to use the non-recursive template filter, `tree_info`. For more
    information on how to do this, refer to the official documentation at [http://django-mptt.github.io/django-mptt/templates.html#tree-info-filter](http://django-mptt.github.io/django-mptt/templates.html#tree-info-filter).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using HTML5 data attributes* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating hierarchical categories* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using a single selection field to choose a category in forms* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a single selection field to choose a category in forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What happens if you want to show category selection in a form? How will the
    hierarchy be presented? In `django-mptt`, there is a special `TreeNodeChoiceField`
    form field that you can use to show the hierarchical structures in a selected
    field. Let's take a look at how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the `movies` app that we defined in the previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s create a form with the category field and then show it in a view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `forms.py` file of the app, create a form with a category field as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, create a URL rule, view, and template to show this form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The category selection will look similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `TreeNodeChoiceField` acts like `ModelChoiceField`; however, it shows hierarchical
    choices as indented. By default, `TreeNodeChoiceField` represents each deeper
    level prefixed by three dashes, `---`. In our example, we will change the level
    indicator to be four nonbreakable spaces (the `&nbsp;` HTML entities) by passing
    the `level_indicator` parameter to the field. To ensure that the nonbreakable
    spaces aren't escaped, we use the `mark_safe()` function.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using a checkbox list to choose multiple categories in forms* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a checkbox list to choose multiple categories in forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When more than one category needs to be selected in a form, you can use the
    `TreeNodeMultipleChoiceField` multiple selection field that is provided by `django-mptt`.
    However, multiple selection fields are not very user-friendly from GUI point of
    view as the user needs to scroll and hold the control keys while clicking in order
    to make multiple choices. That's really awful. A much better way will be to provide
    a checkbox list to choose the categories. In this recipe, we will create a field
    that allows you to show the indented checkboxes in the form.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the `movies` app that we defined in the previous recipes
    and also the `utils` app that you should have in your project.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To render an indented list of categories with checkboxes, create and use a
    new `MultipleChoiceTreeField` form field and also create an HTML template for
    this field. The specific template will be passed to the crispy forms layout in
    the form. To do this, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `utils` app, add a `fields.py` file and create a `MultipleChoiceTreeField`
    form field that extends `ModelMultipleChoiceField`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the new field with the categories to choose from in the form for movie
    creation. Also, in the form layout, pass a custom template to the categories field,
    as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a template for a Bootstrap-style checkbox list, as shown in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a URL rule, view, and template to show the form with the `{% crispy %}`
    template tag. To see how to use this template tag, refer to the *Creating a form
    layout with django-crispy-forms* recipe in [Chapter 3](ch03.html "Chapter 3. Forms
    and Views"), *Forms and Views*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Lastly, add a rule to your CSS file to indent the labels with classes, such
    as `.level-0`, `.level-1`, `.level-2`, and so on, by setting the margin-left parameter.
    Make sure that you have a reasonable amount of these CSS classes for a possible
    maximal depth of the tree in your context, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As a result, we get the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Contrary to the default behavior of Django, which hardcodes field generation
    in the Python code, the `django-crispy-forms` app uses templates to render the
    fields. You can browse them under `crispy_forms/templates/bootstrap3` and copy
    some of them to an analogous path in your project's template directory and overwrite
    them when necessary.
  prefs: []
  type: TYPE_NORMAL
- en: In our movie creation form, we pass a custom template for the categories field
    that will add the `.level-*` CSS classes to the `<label>` tag, wrapping the checkboxes.
    One problem with the normal `CheckboxSelectMultiple` widget is that when rendered,
    it only uses choice values and choice texts, and in our case, we need other properties
    of the category such as the depth level. To solve this, we will created a custom
    `MultipleChoiceTreeField` form field, which extends `ModelMultipleChoiceField`
    and overrides the `label_from_instance` method to return the category itself instead
    of its Unicode representation. The template for the field looks complicated; however,
    it is just a combination of a common field template (`crispy_forms/templates/bootstrap3/field.html`)
    and multiple checkbox field template (`crispy_forms/templates/bootstrap3/layout/checkboxselectmultiple.html`),
    with all the necessary Bootstrap 3 markup. We just made a slight modification
    to add the `.level-*` CSS classes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a form layout with django-crispy-forms* recipe in [Chapter 3](ch03.html
    "Chapter 3. Forms and Views"), *Forms and Views*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Using a single selection field to choose a category in forms* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
