- en: The Basics of Graphics
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形基础
- en: The Qt framework provides you with the opportunity to work with various graphics
    that can be used and/or represented in the application. Here, we will cover the
    basic classes that we can use to paint, draw, and use images. This chapter predominantly
    concerns the basics of managing and creating graphical elements with Qt and Python
    bindings by the user and inside the GUI application. Since Qt is a graphical library
    and this theme is very broad, this chapter is basically an introduction to the
    basics of graphics, which will be expanded on in future chapters.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Qt框架为您提供了在应用程序中使用和/或表示各种图形的机会。在这里，我们将介绍我们可以用来绘制、绘制和使用图像的基本类。本章主要涉及使用Qt和Python绑定管理创建图形元素的基础知识。由于Qt是一个图形库，这个主题非常广泛，因此本章基本上是图形基础介绍，将在未来的章节中进一步展开。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Basics
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基础
- en: Drawing and gradients
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制和渐变
- en: Images
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图片
- en: Basics
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基础
- en: The Qt framework and Python bindings, such as PySide and PyQt, actually paint
    the graphical components that were described in the previous chapters. This drawing
    relates to buttons, fields, labels, and other widgets. As we described previously,
    the `QWidget` class inherits from the `QObject` class, which provides some functionality
    for the graphical elements, and the `QPaintDevice` class, which provides the painting
    of the element in the GUI application. This construction is the main paradigm of
    the Qt graphical library. Also, some supporting classes are available, and will
    be covered initially in this section. This chapter cannot, however, accommodate
    all the classes that need to be learned about for a complete understanding of
    the mechanisms in order to manage the graphics in the development process. To
    achieve this, review the pertinent documentation (Qt—[https://doc.qt.io/](https://doc.qt.io/),
    PySide2—[https://doc.qt.io/qtforpython/index.html](https://doc.qt.io/qtforpython/index.html),
    and PyQt5—[https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/)).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Qt框架和Python绑定，如PySide和PyQt，实际上绘制了在上一章中描述的图形组件。这种绘制与按钮、字段、标签和其他小部件相关。正如我们之前所描述的，`QWidget`
    类继承自 `QObject` 类，它为图形元素提供了一些功能，以及 `QPaintDevice` 类，它提供了在GUI应用程序中绘制元素的功能。这种结构是Qt图形库的主要范式。此外，还有一些支持类，将在本节中首先介绍。然而，本章无法容纳所有需要学习的类，以便完全理解在开发过程中管理图形的机制。为了实现这一点，请查阅相关文档（Qt—[https://doc.qt.io/](https://doc.qt.io/)，PySide2—[https://doc.qt.io/qtforpython/index.html](https://doc.qt.io/qtforpython/index.html)，PyQt5—[https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/)）。
- en: QFont
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFont
- en: 'This class provides a font that will be used for drawing the text of the components
    in the application. Additional classes for working with fonts, such as `QFontInfo`,
    `QFontMetrics`, `QFontMetricsF`, and `QFontDatabase`, are also available. Utilization
    of the `QFont` class in the code may take the following form:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了一个字体，该字体将用于绘制应用程序中组件的文本。还有其他用于处理字体的类，例如 `QFontInfo`、`QFontMetrics`、`QFontMetricsF`
    和 `QFontDatabase`。在代码中使用 `QFont` 类可能的形式如下：
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '`QFont` improves functionality by means of the following functions.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`QFont` 通过以下功能提高功能。'
- en: set
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting parameters and properties in
    relation to the font, including the setting of the font family and spacing:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置字体相关参数和属性相关的函数，包括设置字体家族和间距：
- en: '`font.setBold(bool)`: If the parameter is `True`, this sets the current font
    as bold.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setBold(bool)`: 如果参数为 `True`，则将当前字体设置为粗体。'
- en: '`font.setCapitalization(QtGui.QFont.Capitalization)`: This sets the capitalization
    for the text; all words will be capitalized. The available parameters are as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setCapitalization(QtGui.QFont.Capitalization)`: 这将设置文本的字母大小写；所有单词都将大写。可用的参数如下：'
- en: '`QtGui.QFont.MixedCase`—`0`: No capitalization is applied.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.MixedCase`—`0`: 不应用大小写。'
- en: '`QtGui.QFont.AllUppercase`—`1`: All uppercase.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.AllUppercase`—`1`: 全大写。'
- en: '`QtGui.QFont.AllLowercase`—`2`: All lowercase.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.AllLowercase`—`2`: 全小写。'
- en: '`QtGui.QFont.SmallCaps`—`3`: Small caps.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.SmallCaps`—`3`: 小写字母。'
- en: '`QtGui.QFont.Capitalize`—`4`: The first character of each word is uppercase.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Capitalize`—`4`: 每个单词的首字母大写。'
- en: '`font.setFamily("Font family")`: This sets the font family name for this font
    (case insensitive).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setFamily("Font family")`: 这将为此字体设置字体家族名称（不区分大小写）。'
- en: '`font.setFixedPitch(bool)`: If the parameter is `True`, this sets the fixed
    pitch for this font.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setFixedPitch(bool)`: 如果参数为`True`，则为此字体设置固定间距。'
- en: '`font.setHintingPreference(QtGui.QFont.HintingPreference)`: This sets the hinting
    level of the glyphs specified in the parameter for this font. This depends on
    the operation system. The available parameters are as follows:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setHintingPreference(QtGui.QFont.HintingPreference)`: 这将为参数中指定的此字体的符号设置提示级别。这取决于操作系统。可用的参数如下：'
- en: '`QtGui.QFont.PreferDefaultHinting`—`0`: Default hinting level for the platform.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferDefaultHinting`—`0`: 平台的默认提示级别。'
- en: '`QtGui.QFont.PreferNoHinting`—`1`: Text without hinting where it is possible.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferNoHinting`—`1`: 在可能的情况下，不提示的文本。'
- en: '`QtGui.QFont.PreferVerticalHinting`—`2`: Align glyphs in the vertical direction,
    where possible without horizontal hinting of the text.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferVerticalHinting`—`2`: 在可能的情况下，垂直对齐符号，而不进行文本的水平提示。'
- en: '`QtGui.QFont.PreferFullHinting`—`3`: Where possible, provides horizontal and
    vertical hinting.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferFullHinting`—`3`: 在可能的情况下，提供水平和垂直提示。'
- en: '`font.setItalic(bool)`: If the parameter is `True`, this sets the font as italicized
    (cursive).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setItalic(bool)`: 如果参数为`True`，则将字体设置为斜体（草书）。'
- en: '`font.setKerning(bool)`: If the parameter is `True`, this sets the kerning
    for this font as enabled (the default: `True`); glyph metrics do not add up.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setKerning(bool)`: 如果参数为`True`，则为此字体设置启用间距（默认：`True`）；符号度量不累加。'
- en: '`font.setLetterSpacing(QtGui.QFont.SpacingType, float)`: This sets the spacing
    between each letter of the text for this font with the type specified in the first
    parameter and the `float` value as the spacing specified in the second parameter.
    The available spacing types are as follows:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setLetterSpacing(QtGui.QFont.SpacingType, float)`: 这将为具有在第一个参数中指定的类型和第二个参数中指定的`float`值的间距的文本字体设置每个字母之间的间距。可用的间距类型如下：'
- en: '`QtGui.QFont.PercentageSpacing`—`0`: Spacing as a percentage; with a value
    of `200.0`, the spacing will be enlarged according to the width of its character.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PercentageSpacing`—`0`: 间距作为百分比；值为`200.0`时，间距将根据其字符宽度放大。'
- en: '`QtGui.QFont.AbsoluteSpacing`—`0`: Spacing in pixels.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.AbsoluteSpacing`—`0`: 像素间距。'
- en: '`font.setOverline(bool)`: If the parameter is `True`, this sets the text of
    this font as overlined.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setOverline(bool)`: 如果参数为`True`，则将此字体的文本设置为上划线。'
- en: '`font.setPixelSize(int)`: This sets the size, specified in the parameter, for
    the text of this font as a pixel value.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setPixelSize(int)`: 这将设置参数中指定的字体文本的大小，以像素值表示。'
- en: '`font.setPointSize(int)`: This sets the size, specified in the parameter, for
    the text of this font as a point value.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setPointSize(int)`: 这将设置参数中指定的字体文本的大小，以点值表示。'
- en: '`font.setPointSizeF(float)`: This sets the size, specified in the parameter,
    for the text of this font as a point value, with float precision.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setPointSizeF(float)`: 这将设置参数中指定的字体文本的大小，以点值表示，具有浮点精度。'
- en: '`font.setRawName(str)`: This sets the font used by its system name.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setRawName(str)`: 这将设置由其系统名称使用的字体。'
- en: '`font.setStretch(int)`: This sets the stretch factor for this font from `1`
    to `4000` (with a factor as `250`, all the characters will be 2.5 times wider).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setStretch(int)`: 这将设置此字体的拉伸因子，从`1`到`4000`（因子为`250`时，所有字符都将宽2.5倍）。'
- en: '`font.setStrikeOut(bool)`: If the parameter is `True`, this sets the text of
    this font as strike out.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setStrikeOut(bool)`: 如果参数为`True`，则将此字体的文本设置为删除线。'
- en: '`font.setStyle(QtGui.QFont.Style)`: This sets the style specified in the parameter
    for this font. The available styles are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setStyle(QtGui.QFont.Style)`: 这将设置参数中指定的字体样式。可用的样式如下：'
- en: '`QtGui.QFont.StyleNormal`—`0`: Normal glyphs.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.StyleNormal`—`0`: 正常符号。'
- en: '`QtGui.QFont.StyleItalic`—`1`: Italicized glyphs.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.StyleItalic`—`1`: 斜体符号。'
- en: '`QtGui.QFont.StyleOblique`—`2`: Glyphs with an italicized appearance that are
    based on the unstyled glyphs.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.StyleOblique`—`2`: 基于无样式符号的斜体外观符号。'
- en: '`font.setStyleHint(QtGui.QFont.StyleHint, QtGui.QFont.StyleStrategy)`: This
    sets the style hint (the first parameter) and strategy to hint (the second parameter).
    The available style hints that the font matcher prefers are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setStyleHint(QtGui.QFont.StyleHint, QtGui.QFont.StyleStrategy)`: 这将为字体匹配器首选的样式提示（第一个参数）和提示策略（第二个参数）设置样式提示。可用的样式提示如下：'
- en: '`QtGui.QFont.SansSerif`—`Helvetica`: Prefers sans serif fonts.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.SansSerif`—`Helvetica`: 优先使用无衬线字体。'
- en: '`QtGui.QFont.Helvetica`—`0`: Prefers sans serif fonts.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Helvetica`—`0`: 优先使用无衬线字体。'
- en: '`QtGui.QFont.Serif`—`Times`: Prefers serif fonts.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Serif`—`Times`: 优先选择衬线字体。'
- en: '`QtGui.QFont.Times`—`1`: Prefers serif fonts.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Times`—`1`: 优先选择衬线字体。'
- en: '`QtGui.QFont.TypeWriter`—`Courier`: Prefers fixed pitch fonts.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.TypeWriter`—`Courier`: 优先选择固定间距字体。'
- en: '`QtGui.QFont.Courier`—`2`: Prefers fixed pitch fonts.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Courier`—`2`: 优先选择固定间距字体。'
- en: '`QtGui.QFont.OldEnglish`—`3`: Prefers decorative fonts.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.OldEnglish`—`3`: 优先选择装饰字体。'
- en: '`QtGui.QFont.Decorative`—`OldEnglish`: Prefers decorative fonts.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Decorative`—`OldEnglish`: 优先选择装饰字体。'
- en: '`QtGui.QFont.System`—`4`: Prefers system fonts.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.System`—`4`: 优先选择系统字体。'
- en: '`QtGui.QFont.AnyStyle`—`5`: Prefers to choose.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.AnyStyle`—`5`: 优先选择选择。'
- en: '`QtGui.QFont.Cursive`—`6`: Prefers cursive family fonts.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Cursive`—`6`: 优先选择草书字体家族。'
- en: '`QtGui.QFont.Monospace`—`7`: Prefers monospace family fonts.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Monospace`—`7`: 优先选择等宽字体家族。'
- en: '`QtGui.QFont.Fantasy`—`8`: Prefers fantasy family fonts.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Fantasy`—`8`: 优先选择幻想字体家族。'
- en: '`font.setStyleName(str)`: This sets the name of the style, as specified in
    the parameter.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setStyleName(str)`: 这将设置样式名称，名称由参数指定。'
- en: '`font.setStyleStrategy(QtGui.QFont.StyleStrategy)`: This sets the style strategy
    for the font. The following style strategies, which tell the font matcher what
    type should be used to find the default family, are available:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setStyleStrategy(QtGui.QFont.StyleStrategy)`: 这将设置字体的样式策略。以下样式策略可用于指定字体匹配器应使用哪种类型来查找默认家族：'
- en: '`QtGui.QFont.PreferDefault`: Does not prefer any fonts.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferDefault`: 不优先选择任何字体。'
- en: '`QtGui.QFont.PreferBitmap`: Prefers bitmap fonts.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferBitmap`: 优先选择位图字体。'
- en: '`QtGui.QFont.PreferDevice`: Prefers device fonts.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferDevice`: 优先选择设备字体。'
- en: '`QtGui.QFont.ForceOutline`: Uses outline fonts.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.ForceOutline`: 使用轮廓字体。'
- en: '`QtGui.QFont.NoAntialias`: Does not antialias the fonts.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.NoAntialias`: 不对字体进行抗锯齿。'
- en: '`QtGui.QFont.NoSubpixelAntialias`: If possible, will not subpixel antialiasing
    of the fonts.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.NoSubpixelAntialias`: 如果可能，将不会对字体进行子像素抗锯齿。'
- en: '`QtGui.QFont.PreferAntialias`: Prefers antialias.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferAntialias`: 优先选择抗锯齿。'
- en: '`QtGui.QFont.OpenGLCompatible`: Uses OpenGL compatible fonts.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.OpenGLCompatible`: 使用与 OpenGL 兼容的字体。'
- en: '`QtGui.QFont.NoFontMerging`: Disables automatically looking for the similar
    font for the character if the writing system does not contain this character.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.NoFontMerging`: 如果书写系统不包含此字符，则禁用自动查找类似字体的功能。'
- en: '`QtGui.QFont.PreferNoShaping`: Disables features such as applying complex rules
    when not required.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferNoShaping`: 禁用不需要时应用复杂规则等特性。'
- en: 'The available flags that can be used with the OR (`|`) operator for the strategies
    are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可用于与 OR (`|`) 运算符一起使用的可用标志如下：
- en: '`QtGui.QFont.PreferMatch`: Prefers an exact match.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferMatch`: 优先选择精确匹配。'
- en: '`QtGui.QFont.PreferQuality`: Prefers the best quality font.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.PreferQuality`: 优先选择最佳质量的字体。'
- en: '`QtGui.QFont.ForceIntegerMetrics`: Uses integer values in font engines.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.ForceIntegerMetrics`: 在字体引擎中使用整数值。'
- en: '`font.setUnderline(bool)`: If the parameter is `True`, this sets the text of
    this font as Underlined.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setUnderline(bool)`: 如果参数为 `True`，则将此字体的文本设置为下划线。'
- en: '`font.setWeight(int)`: This sets the weight, specified in the parameter, for
    this font. The available values for the font weights are as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setWeight(int)`: 这将设置字体的重量，重量由参数指定。字体重量的可用值如下：'
- en: '`QtGui.QFont.Thin`: `0`'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Thin`: `0`'
- en: '`QtGui.QFont.ExtraLight`: `12`'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.ExtraLight`: `12`'
- en: '`QtGui.QFont.Light`: `25`'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Light`: `25`'
- en: '`QtGui.QFont.Normal`: `50`'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Normal`: `50`'
- en: '`QtGui.QFont.Medium`: `57`'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Medium`: `57`'
- en: '`QtGui.QFont.DemiBold`: `63`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.DemiBold`: `63`'
- en: '`QtGui.QFont.Bold`: `75`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Bold`: `75`'
- en: '`QtGui.QFont.ExtraBold`: `81`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.ExtraBold`: `81`'
- en: '`QtGui.QFont.Black`: `87`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QFont.Black`: `87`'
- en: '`font.setWordSpacing(float)`: This sets the spacing, specified in the parameter,
    between each word of the text for this font.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.setWordSpacing(float)`: 这将设置此字体中每个单词之间的间距，间距由参数指定。'
- en: is
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These are functions that return a Boolean value (`bool`) related to the font:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与字体相关的布尔值（`bool`）的函数：
- en: '`font.isCopyOf(QtGui.QFont)`: This returns `True` if the font, specified in
    the parameter, is a copy of the current font.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.isCopyOf(QtGui.QFont)`: 如果在参数中指定的字体是当前字体的副本，则返回 `True`。'
- en: functional
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the font:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前字体值的返回相关的函数：
- en: '`font.bold()`: This returns `True` if the value of the `font.weight()` is greater
    than `QFont.Medium`; otherwise, it returns `False`.'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.bold()`: 如果 `font.weight()` 的值大于 `QFont.Medium`，则返回 `True`；否则返回 `False`。'
- en: '`font.cacheStatistics()`: This dumps a font''s cache statistics.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.cacheStatistics()`: 这输出字体的缓存统计信息。'
- en: '`font.capitalization()`: This returns the current capitalization of the `QtGui.QFont.Capitalization`
    type for this font.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.capitalization()`: 这返回此字体`QtGui.QFont.Capitalization`类型的当前大写化。'
- en: '`font.cleanup()`: This cleans up the font system.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.cleanup()`: 这清理字体系统。'
- en: '`font.defaultFamily()`: This returns the font family that''s used with the
    current style hint.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.defaultFamily()`: 这返回用于当前样式提示的字体家族。'
- en: '`font.exactMatch()`: This returns `True` if the font of the window system is
    available that matches this font''s settings.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.exactMatch()`: 如果窗口系统中有与该字体设置匹配的字体，则返回`True`。'
- en: '`font.family()`: This returns the current font family name used with this font.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.family()`: 这返回与该字体一起使用的当前字体家族名称。'
- en: '`font.fixedPitch()`: This returns `True` if the fixed pitch for this font was
    set.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.fixedPitch()`: 如果为此字体设置了固定间距，则返回`True`。'
- en: '`font.fromString(str)`: This sets this font, which will match the description
    specified in the parameter as a comma-separated list with font attributes.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.fromString(str)`: 这设置此字体，它将匹配参数中指定的描述，作为带有字体属性的逗号分隔列表。'
- en: '`font.hintingPreference()`: This returns the hinting level for glyphs that
    are currently preferred, and will be rendered with this font.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.hintingPreference()`: 这返回当前首选的符号的提示级别，并将使用此字体进行渲染。'
- en: '`font.initialize()`: This initializes the font system.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.initialize()`: 这初始化字体系统。'
- en: '`font.insertSubstitution(str, str)`: This inserts the substitute name specified
    in the second parameter into the substitution table for the font family (the first
    parameter).'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.insertSubstitution(str, str)`: 这将第二个参数中指定的替代名称插入到字体家族（第一个参数）的替换表中。'
- en: '`font.insertSubstitution(str, [str])`: This inserts the list of the substitute
    names specified in the second parameter into the substitution table for the font
    family (the first parameter).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.insertSubstitution(str, [str])`: 这将第二个参数中指定的替代名称列表插入到字体家族（第一个参数）的替换表中。'
- en: '`font.italic()`: This returns `True` if the current font is italicized (cursive).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.italic()`: 如果当前字体是斜体（草书），则返回`True`。'
- en: '`font.kerning()`: This returns `True` if kerning will be used with this font.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.kerning()`: 如果与此字体一起使用字距调整，则返回`True`。'
- en: '`font.key()`: This returns the key of the current font, as a textual representation
    of this font.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.key()`: 这返回当前字体的键，作为此字体的文本表示。'
- en: '`font.lastResortFamily()`: This returns the font family name, as a resort.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.lastResortFamily()`: 这返回字体家族名称，作为最后的手段。'
- en: '`font.lastResortFont()`: This returns the font: last resort.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.lastResortFont()`: 这返回字体：最后的手段。'
- en: '`font.letterSpacing()`: This returns the spacing between each letter as float
    value that used with this font.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.letterSpacing()`: 这以浮点值返回每个字母之间的间距，该值与此字体一起使用。'
- en: '`font.letterSpacingType()`: This returns the spacing type as `QtGui.QFont.SpacingType`,
    and is used for the letter spacing.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.letterSpacingType()`: 这返回作为`QtGui.QFont.SpacingType`的间距类型，并用于字母间距。'
- en: '`font.overline()`: This returns `True` if the font is overlined.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.overline()`: 如果字体有上划线，则返回`True`。'
- en: '`font.pixelSize()`: This returns the size of the font in the pixel representation.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.pixelSize()`: 这返回像素表示中的字体大小。'
- en: '`font.pointSize()`: This returns the size of the font in the point representation.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.pointSize()`: 这以点表示返回字体的大小。'
- en: '`font.pointSizeF()`: This returns the size of the font in the point representation
    as a value with float precision.'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.pointSizeF()`: 这以浮点值返回点表示中的字体大小。'
- en: '`font.rawName()`: This returns the font name used in the underlying window
    system.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.rawName()`: 这返回底层窗口系统中使用的字体名称。'
- en: '`font.removeSubstitutions(str)`: This removes the substitutions for the font
    family name specified in the parameter.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.removeSubstitutions(str)`: 这删除参数中指定的字体家族名称的替换。'
- en: '`font.resolve(QtGui.QFont)`: This returns the new font that has attributes
    of the font specified in the parameter, which has not previously been set.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.resolve(QtGui.QFont)`: 这返回具有参数中指定的字体属性的新字体，这些属性尚未设置。'
- en: '`font.stretch()`: This returns the stretch factor of this font.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.stretch()`: 这返回此字体的拉伸因子。'
- en: '`font.strikeOut()`: This returns `True` if the text of this font is striking
    out.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.strikeOut()`: 如果此字体的文本有删除线，则返回`True`。'
- en: '`font.style()`: This returns the style of the `QtGui.QFont.Style` type for
    this font.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.style()`: 这返回此字体`QtGui.QFont.Style`类型的样式。'
- en: '`font.styleHint()`: This returns the style hint of the `QtGui.QFont.StyleHint`
    type for this font.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.styleHint()`: 这返回此字体`QtGui.QFont.StyleHint`类型的样式提示。'
- en: '`font.styleName()`: This returns the style name used for the style of this
    font.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.styleName()`: 这返回用于此字体样式的样式名称。'
- en: '`font.styleStrategy()`: This returns the strategy of the `QtGui.QFont.StyleStrategy`
    type, and is used with the font matcher of this font.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.styleStrategy()`: 这返回`QtGui.QFont.StyleStrategy`类型的策略，并用于此字体的字体匹配器。'
- en: '`font.substitute(str)`: This returns the first substitute font family name
    used with the family name specified in the parameter.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.substitute(str)`: 这返回与参数中指定的家族名称一起使用的第一个替换字体家族名称。'
- en: '`font.substitutes(str)`: This returns the list of substitute font family names
    used, with the family name specified in the parameter.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.substitutes(str)`: 这返回使用指定家族名称的替换字体家族名称列表。'
- en: '`font.substitutions()`: This returns a sorted list of substituted font family
    names.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.substitutions()`: 这返回一个排序后的替换字体家族名称列表。'
- en: '`font.swap(QtGui.QFont)`: This swaps this font with the font specified in the
    parameter.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.swap(QtGui.QFont)`: 这将此字体与参数中指定的字体进行交换。'
- en: '`font.toString()`: This returns the comma-separated list with a description
    of this font.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.toString()`: 这返回以逗号分隔的描述此字体的列表。'
- en: '`font.underline()`: This returns `True` if the text of this font is underlined.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.underline()`: 如果此字体的文本被下划线，则返回`True`。'
- en: '`font.weight()`: This returns the weight of this font.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.weight()`: 这返回此字体的权重。'
- en: '`font.wordSpacing()`: This returns the spacing between each word of the text
    in this font as a float value.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`font.wordSpacing()`: 这返回文本中每个单词之间的间距，以浮点值表示。'
- en: QColor
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QColor
- en: 'This class provides manipulations with color that will be used for components
    in the application. This class represents models of the colors based on **RGB**
    (**red, green, and blue**), **HSV** (**hue, saturation, and value**) and **CMYK**
    (**cyan, magenta, yellow, and black**) values. They can be used as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了用于应用程序组件的颜色操作。此类表示基于 **RGB** （**红色、绿色和蓝色**）、**HSV** （**色调、饱和度和亮度**）和 **CMYK**
    （**青色、品红色、黄色和黑色**）值颜色的模型。它们可以按以下方式使用：
- en: '**Named colors**: `"white"`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**命名颜色**："white"。'
- en: '**Strings/values**: `"#FFFFFF"`, `(255, 255, 255)`, `(1, 1, 1)`, in other words,
    *#redgreenblue* or (red, green, blue).'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串/值**："#FFFFFF"，`(255, 255, 255)`，`(1, 1, 1)`，换句话说，*#redgreenblue* 或 (red,
    green, blue)。'
- en: '**Strings/values**: `"#FFFFFFFF"`, `(255, 255, 255, 255)`, `(1, 1, 1, 1)`,
    in other words, *#redgreenbluealpha* or (red, green, blue, alpha).'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串/值**："#FFFFFFFF"，`(255, 255, 255, 255)`，`(1, 1, 1, 1)`，换句话说，*#redgreenbluealpha*
    或 (red, green, blue, alpha)。'
- en: 'The alpha channel of the color (the letter *A* in RGBA) is the transparency.
    HSV and CMYK can be used in a similar fashion in relation to the colors of its
    color models. We can use the `QColor` class like this:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色的alpha通道（RGBA中的字母*A*）是透明度。HSV和CMYK可以以类似的方式用于其颜色模型的颜色。我们可以像这样使用`QColor`类：
- en: '[PRE1]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`QColor` improves functionality by means of the following functions.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`QColor`通过以下函数提高功能。'
- en: set
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting parameters and properties in relation
    to the color, including the setting of the color or hue:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置颜色相关参数和属性相关的函数，包括设置颜色或色调：
- en: '`color.setAlpha(a)`: This sets alpha, `a`, as the integer value of this color
    (`0`-`255`).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setAlpha(a)`: 这将alpha，`a`，设置为该颜色的整数值（`0`-`255`）。'
- en: '`color.setAlphaF(a)`: This sets alpha, `a`, as the float value of this color
    (`0.0`-`1.0`).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setAlphaF(a)`: 这将alpha，`a`，设置为该颜色的浮点值（`0.0`-`1.0`）。'
- en: '`color.setBlue(b)`: This sets blue, `b`, as the integer value of this color
    (`0`-`255`).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setBlue(b)`: 这将蓝色，`b`，设置为该颜色的整数值（`0`-`255`）。'
- en: '`color.setBlueF(b)`: This sets blue, `b`, as the float value of this color
    (`0.0`-`1.0`).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setBlueF(b)`: 这将蓝色，`b`，设置为该颜色的浮点值（`0.0`-`1.0`）。'
- en: '`color.setCmyk(c, m, y, k, a)`: This sets the CMYK color specified in the parameters:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setCmyk(c, m, y, k, a)`: 这将参数中指定的CMYK颜色设置为：'
- en: '`c`: Cyan (`0`-`255`).'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`: 青色 (`0`-`255`).'
- en: '`m`: Magenta (`0`-`255`).'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 品红色 (`0`-`255`).'
- en: '`y`: Yellow (`0`-`255`).'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 黄色 (`0`-`255`).'
- en: '`k`: Black (`0`-`255`).'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k`: 黑色 (`0`-`255`).'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: Alpha (`0`-`255`).'
- en: '`color.setCmykF(c, m, y, k, a)`: This sets the CMYK color specified in the
    parameters:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setCmykF(c, m, y, k, a)`: 这将参数中指定的CMYK颜色设置为：'
- en: '`c`: Cyan (`0.0`-`1.0`).'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`: 青色 (`0.0`-`1.0`).'
- en: '`m`: Magenta (`0.0`-`1.0`).'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 品红色 (`0.0`-`1.0`).'
- en: '`y`: Yellow (`0.0`-`1.0`).'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 黄色 (`0.0`-`1.0`).'
- en: '`k`: Black (`0.0`-`1.0`).'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k`: 黑色 (`0.0`-`1.0`).'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: Alpha (`0.0`-`1.0`).'
- en: '`color.setGreen(g)`: This sets green, `g`, as the integer value of this color
    (`0`-`255`).'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setGreen(g)`: 这将绿色，`g`，设置为该颜色的整数值（`0`-`255`）。'
- en: '`color.setGreenF(g)`: This sets green, `g`, as the float value of this color
    (`0.0`-`1.0`).'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setGreenF(g)`: 这将绿色，`g`，设置为该颜色的浮点值（`0.0`-`1.0`）。'
- en: '`color.setHsl(h, s, l, a)`: This sets the HSL color specified in the parameters:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setHsl(h, s, l, a)`: 这设置由参数指定的HSL颜色：'
- en: '`h`: Hue (`0`-`255`).'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0`-`255`)。'
- en: '`s`: Saturation (`0`-`255`).'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0`-`255`)。'
- en: '`l`: Lightness (`0`-`255`).'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`: 亮度 (`0`-`255`)。'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`255`)。'
- en: '`color.setHslF(h, s, l, a)`: This sets the HSL color specified in the parameters:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setHslF(h, s, l, a)`: 这设置由参数指定的HSL颜色：'
- en: '`h`: Hue (`0.0`-`1.0`).'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0.0`-`1.0`)。'
- en: '`s`: Saturation (`0.0`-`1.0`).'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0.0`-`1.0`)。'
- en: '`l`: Lightness (`0.0`-`1.0`).'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`: 亮度 (`0.0`-`1.0`)。'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`)。'
- en: '`color.setHsv(h, s, v, a)`: This sets the HSV color specified in the parameters:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setHsv(h, s, v, a)`: 这设置由参数指定的HSV颜色：'
- en: '`h`: Hue (`0`-`255`).'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0`-`255`)。'
- en: '`s`: Saturation (`0`-`255`).'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0`-`255`)。'
- en: '`v`: Value (`0`-`255`).'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v`: 亮度 (`0`-`255`)。'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0`-`255`)。'
- en: '`color.setHsvF(h, s, v, a)`: This sets the HSV color specified in the parameters:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setHsvF(h, s, v, a)`: 这设置由参数指定的HSV颜色：'
- en: '`h`: Hue (`0.0`-`1.0`).'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0.0`-`1.0`)。'
- en: '`s`: Saturation (`0.0`-`1.0`).'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0.0`-`1.0`)。'
- en: '`v`: Value (`0.0`-`1.0`).'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v`: 亮度 (`0.0`-`1.0`)。'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`)。'
- en: '`color.setNamedColor(str)`: This sets the RGB value of this color to the name
    specified in the parameter. The available formats of the color that will be named
    are as follows: `"#RGB"`, `"#RRGGBB"`, `"#AARRGGBB"`, `"#RRRGGGBBB"`, and `"#RRRRGGGGBBBB"`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setNamedColor(str)`: 这将此颜色的RGB值设置为参数中指定的名称。将要命名的颜色格式如下：`"#RGB"`，`"#RRGGBB"`，`"#AARRGGBB"`，`"#RRRGGGBBB"`，和
    `"#RRRRGGGGBBBB"`。'
- en: '`color.setRed(r)`: This sets red `r`, as the integer value of this color (`0`-`255`).'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setRed(r)`: 这将红色 `r` 设置为该颜色的整数值 (`0`-`255`)。'
- en: '`color.setRedF(r)`: This sets red, `r`, as the float value of this color (`0.0`-`1.0`).'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setRedF(r)`: 这将红色 `r` 设置为该颜色的浮点值 (`0.0`-`1.0`)。'
- en: '`color.setRgb(r, g, b, a)`: This sets the RGB color specified in the parameters:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setRgb(r, g, b, a)`: 这设置由参数指定的RGB颜色：'
- en: '`r`: Red (`0`-`255`).'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`: 红色 (`0`-`255`)。'
- en: '`g`: Green (`0`-`255`).'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`: 绿色 (`0`-`255`)。'
- en: '`b`: Blue (`0`-`255`).'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`: 蓝色 (`0`-`255`)。'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0`-`255`)。'
- en: '`color.setRgbF(r, g, b, a)`: This sets the RGB color specified in the parameters:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.setRgbF(r, g, b, a)`: 这设置由参数指定的RGB颜色：'
- en: '`r`: Red (`0.0`-`1.0`).'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`: 红色 (`0.0`-`1.0`)。'
- en: '`g`: Green (`0.0`-`1.0`).'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`: 绿色 (`0.0`-`1.0`)。'
- en: '`b`: Blue (`0.0`-`1.0`).'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`: 蓝色 (`0.0`-`1.0`)。'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`)。'
- en: is
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is
- en: 'These are functions that return a Boolean value (`bool`) related to the color:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与颜色相关的布尔值 (`bool`) 的函数：
- en: '`color.isValid()`: This returns `True` if this color is valid.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.isValid()`: 如果此颜色有效，则返回 `True`。'
- en: '`color.isValidColor(str)`: This returns `True` if the color specified in the
    parameter is a valid color.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.isValidColor(str)`: 如果参数中指定的颜色是有效颜色，则返回 `True`。'
- en: functional
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the color:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前颜色值返回相关的函数：
- en: '`color.alpha()`: This returns the alpha particle of the color as an integer
    value of this color.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.alpha()`: 这返回颜色的透明度粒子，以该颜色的整数值表示。'
- en: '`color.alphaF()`: This returns the alpha particle of the color as a float value
    of this color.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.alphaF()`: 这返回颜色的透明度粒子，以该颜色的浮点值表示。'
- en: '`color.black()`: This returns the black particle of the color as an integer
    value of this color.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.black()`: 这返回颜色的黑色粒子，以该颜色的整数值表示。'
- en: '`color.blackF()`: This returns the black particle of the color as a float value
    of this color.'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.blackF()`: 这返回颜色的黑色粒子，以该颜色的浮点值表示。'
- en: '`color.blue()`: This returns the blue particle of the color as an integer value
    of this color.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.blue()`: 这返回颜色的蓝色粒子，以该颜色的整数值表示。'
- en: '`color.blueF()`: This returns the blue particle of the color as a float value
    of this color.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.blueF()`: 这返回颜色的蓝色粒子，以该颜色的浮点值表示。'
- en: '`color.colorNames()`: This returns the list of strings with color names that
    are available in the Qt color list.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.colorNames()`: 这返回包含Qt颜色列表中可用颜色名称的字符串列表。'
- en: '`color.convertTo(QtGui.QColor.Spec)`: This copies the color with a specifier
    in the parameter and returns the color of the `QtGui.QColor` type. The available
    specifiers are as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.convertTo(QtGui.QColor.Spec)`: 这将参数中的指定符的颜色复制并返回 `QtGui.QColor` 类型的颜色。可用的指定符如下：'
- en: '`QtGui.QColor.Rgb`—`1`: Red, green, blue.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QColor.Rgb`—`1`: 红色、绿色、蓝色。'
- en: '`QtGui.QColor.Hsv`—`2`: Hue, saturation, value.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QColor.Hsv`—`2`: 色调、饱和度、亮度。'
- en: '`QtGui.QColor.Cmyk`—`3`: Cyan, magenta, yellow, black.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QColor.Cmyk`—`3`: 青色、品红色、黄色、黑色。'
- en: '`QtGui.QColor.Hsl`—`4`: Hue, saturation, lightness.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QColor.Hsl`—`4`: 色调、饱和度、亮度。'
- en: '`color.cyan()`: This returns the cyan particle of the color as an integer value
    of this color.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.cyan()`: 此函数返回颜色的青色部分，以该颜色的整数值表示。'
- en: '`color.cyanF()`: This returns the cyan particle of the color as a `float` value
    of this color.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.cyanF()`: 此函数返回颜色的青色部分，以该颜色的 `float` 值表示。'
- en: '`color.darker(int)`: This returns a darker or lighter color of the `QtGui.QColor`
    type, with a factor specified in the parameter as an integer value. If the factor
    is greater than `100`, the color is darker; if the factor is less than `100`,
    the color is lighter.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.darker(int)`: 此函数返回 `QtGui.QColor` 类型的较暗或较亮颜色，参数中指定了一个整数值作为因子。如果因子大于
    `100`，则颜色较暗；如果因子小于 `100`，则颜色较亮。'
- en: '`color.fromCmyk(c, m, y, k, a)`: This returns the CMYK color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromCmyk(c, m, y, k, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 CMYK 颜色：'
- en: '`c`: Cyan (`0`-`255`).'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`: 青色 (`0`-`255`).'
- en: '`m`: Magenta (`0`-`255`).'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 品红色 (`0`-`255`).'
- en: '`y`: Yellow (`0`-`255`).'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 黄色 (`0`-`255`).'
- en: '`k`: Black (`0`-`255`).'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k`: 黑色 (`0`-`255`).'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0`-`255`).'
- en: '`color.fromCmykF(c, m, y, k, a)`: This returns the CMYK color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromCmykF(c, m, y, k, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 CMYK 颜色：'
- en: '`c`: Cyan (`0.0`-`1.0`).'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c`: 青色 (`0.0`-`1.0`).'
- en: '`m`: Magenta (`0.0`-`1.0`).'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`m`: 品红色 (`0.0`-`1.0`).'
- en: '`y`: Yellow (`0.0`-`1.0`).'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`y`: 黄色 (`0.0`-`1.0`).'
- en: '`k`: Black (`0.0`-`1.0`).'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`k`: 黑色 (`0`-`1.0`).'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`).'
- en: '`color.fromHsl(h, s, l, a)`: This returns the HSL color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromHsl(h, s, l, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 HSL 颜色：'
- en: '`h`: Hue (`0`-`255`).'
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0`-`255`).'
- en: '`s`: Saturation (`0`-`255`).'
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0`-`255`).'
- en: '`l`: Lightness (`0`-`255`).'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`: 亮度 (`0`-`255`).'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0`-`255`).'
- en: '`color.fromHslF(h, s, l, a)`: This returns the HSL color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromHslF(h, s, l, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 HSL 颜色：'
- en: '`h`: Hue (`0.0`-`1.0`).'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0.0`-`1.0`).'
- en: '`s`: Saturation (`0.0`-`1.0`).'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0.0`-`1.0`).'
- en: '`l`: Lightness (`0.0`-`1.0`).'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l`: 亮度 (`0.0`-`1.0`).'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`).'
- en: '`color.fromHsv(h, s, v, a)`: This returns the HSV color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromHsv(h, s, v, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 HSV 颜色：'
- en: '`h`: Hue (`0`-`255`).'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0`-`255`).'
- en: '`s`: Saturation (`0`-`255`).'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0`-`255`).'
- en: '`v`: Value (`0`-`255`).'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v`: 价值 (`0`-`255`).'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0`-`255`).'
- en: '`color.fromHsvF(h, s, v, a)`: This returns the HSV color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromHsvF(h, s, v, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 HSV 颜色：'
- en: '`h`: Hue (`0.0`-`1.0`).'
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h`: 色调 (`0.0`-`1.0`).'
- en: '`s`: Saturation (`0.0`-`1.0`).'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s`: 饱和度 (`0.0`-`1.0`).'
- en: '`v`: Value (`0.0`-`1.0`).'
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`v`: 价值 (`0.0`-`1.0`).'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`).'
- en: '`color.fromRgb(r, g, b, a)`: This returns the RGB color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromRgb(r, g, b, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 RGB 颜色：'
- en: '`r`: Red (`0`-`255`).'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`: 红色 (`0`-`255`).'
- en: '`g`: Green (`0`-`255`).'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`: 绿色 (`0`-`255`).'
- en: '`b`: Blue (`0`-`255`).'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`: 蓝色 (`0`-`255`).'
- en: '`a`: Alpha (`0`-`255`).'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0`-`255`).'
- en: '`color.fromRgbF(r, g, b, a)`: This returns the RGB color of the `QtGui.QColor`
    type with specified parameters:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.fromRgbF(r, g, b, a)`: 此函数返回具有指定参数的 `QtGui.QColor` 类型的 RGB 颜色：'
- en: '`r`: Red (`0.0`-`1.0`) .'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`: 红色 (`0.0`-`1.0`) .'
- en: '`g`: Green (`0.0`-`1.0`).'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`g`: 绿色 (`0.0`-`1.0`).'
- en: '`b`: Blue (`0.0`-`1.0`).'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b`: 蓝色 (`0.0`-`1.0`).'
- en: '`a`: Alpha (`0.0`-`1.0`).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a`: 透明度 (`0.0`-`1.0`).'
- en: '`color.getCmyk()`: This retrieves the contents of *c*, *m*, *y*, *k*, and *a*
    as integer values, and sets components to the cyan, magenta, yellow, black, and
    alpha values of the CMYK color.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getCmyk()`: 此函数检索 *c*、*m*、*y*、*k* 和 *a* 的内容，并以整数值设置组件为 CMYK 颜色的青色、品红色、黄色、黑色和透明度值。'
- en: '`color.getCmykF()`: This retrieves the contents of *c*, *m*, *y*, *k*, and
    *a* as float values, and sets components to the cyan, magenta, yellow, black,
    and alpha values of the CMYK color.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getCmykF()`: 此函数检索 *c*、*m*、*y*、*k* 和 *a* 的内容，并以 `float` 值设置组件为 CMYK
    颜色的青色、品红色、黄色、黑色和透明度值。'
- en: '`color.getHsl()`: This retrieves the contents of *h*, *s*, *l*, and *a* as
    integer values, and sets components to the hue, saturation, lightness, and alpha
    values of the HSL color.'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getHsl()`: 此函数检索 *h*、*s*、*l* 和 *a* 的内容，并以整数值设置组件为 HSL 颜色的色调、饱和度、亮度和透明度值。'
- en: '`color.getHslF()`: This retrieves the contents of *h*, *s*, *l*, and *a* as
    float values, and sets components to the hue, saturation, lightness, and alpha
    values of the HSL color.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getHslF()`: 此函数检索 *h*、*s*、*l* 和 *a* 的内容，并以 `float` 值设置组件为 HSL 颜色的色调、饱和度、亮度和透明度值。'
- en: '`color.getHsv()`: This retrieves the contents of *h*, *s*, *v*, and *a* as
    integer values, and sets components to the hue, saturation, value, and alpha values
    of the HSV color.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getHsv()`: 这检索 *h*、*s*、*v* 和 *a* 的内容，并以整数值设置这些组件为 HSV 颜色的色调、饱和度、值和透明度。'
- en: '`color.getHsvF()`: This retrieves the contents of *h*, *s*, *v*, and *a* as
    float values, and sets components to the hue, saturation, value, and alpha values
    of the HSV color.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getHsvF()`: 这检索 *h*、*s*、*v* 和 *a* 的内容，并以浮点值设置这些组件为 HSV 颜色的色调、饱和度、值和透明度。'
- en: '`color.getRgb()`: This retrieves the contents of *r*, *g*, *b*, and *a* as
    integer values, and sets components to the red, green, blue, and alpha values
    of the RGB color.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getRgb()`: 这检索 *r*、*g*、*b* 和 *a* 的内容，并以整数值设置这些组件为 RGB 颜色的红色、绿色、蓝色和透明度值。'
- en: '`color.getRgbF()`: This retrieves the contents of *r*, *g*, *b*, and *a* as
    float values, and sets components to the red, green, blue, and alpha values of
    the RGB color.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.getRgbF()`: 这检索 *r*、*g*、*b* 和 *a* 的内容，并以浮点值设置这些组件为 RGB 颜色的红色、绿色、蓝色和透明度。'
- en: '`color.green()`: This returns the green particle of the color as an integer
    value of this color.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.green()`: 这返回颜色的绿色粒子，以该颜色的整数值表示。'
- en: '`color.greenF()`: This returns the green particle of the color as a float value
    of this color.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.greenF()`: 这返回颜色的绿色粒子，以该颜色的浮点值表示。'
- en: '`color.hslHue()`: This returns the hue particle of the color as an integer
    value of this color.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hslHue()`: 这返回颜色的色调粒子，以该颜色的整数值表示。'
- en: '`color.hslHueF()`: This returns the hue particle of the color as a float value
    of this color.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hslHueF()`: 这返回颜色的色调粒子，以该颜色的浮点值表示。'
- en: '`color.hslSaturation()`: This returns the saturation particle of the color
    as an integer value of this color.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hslSaturation()`: 这返回颜色的饱和度粒子，以该颜色的整数值表示。'
- en: '`color.hslSaturationF()`: This returns the saturation particle of the color
    as a float value of this color.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hslSaturationF()`: 这返回颜色的饱和度粒子，以该颜色的浮点值表示。'
- en: '`color.hsvHue()`: This returns the hue particle of the color as an integer
    value of this color.'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hsvHue()`: 这返回颜色的色调粒子，以该颜色的整数值表示。'
- en: '`color.hsvHueF()`: This returns the hue particle of the color as a float value
    of this color.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hsvHueF()`: 这返回颜色的色调粒子，以该颜色的浮点值表示。'
- en: '`color.hsvSaturation()`: This returns the saturation particle of the color
    as an integer value of this color.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hsvSaturation()`: 这返回颜色的饱和度粒子，以该颜色的整数值表示。'
- en: '`color.hsvSaturationF()`: This returns the saturation particle of the color
    as a float value of this color.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hsvSaturationF()`: 这返回颜色的饱和度粒子，以该颜色的浮点值表示。'
- en: '`color.hue()`: This returns the hue particle of the color as an integer value
    of this color.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hue()`: 这返回颜色的色调粒子，以该颜色的整数值表示。'
- en: '`color.hueF()`: This returns the hue particle of the color as a float value
    of this color.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.hueF()`: 这返回颜色的色调粒子，以该颜色的浮点值表示。'
- en: '`color.lighter(int)`: This returns a lighter or darker color of the `QtGui.QColor`
    type, with a factor specified in the parameter as an integer value. If the factor
    is greater than `100`, the color is lighter; if the factor is less than `100`,
    the color is darker.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.lighter(int)`: 这返回一个 `QtGui.QColor` 类型的更亮或更暗的颜色，参数中指定的因子以整数值表示。如果因子大于
    `100`，颜色更亮；如果因子小于 `100`，颜色更暗。'
- en: '`color.lightness()`: This returns the lightness particle of the color as an
    integer value of this color.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.lightness()`: 这返回颜色的亮度粒子，以该颜色的整数值表示。'
- en: '`color.lightnessF()`: This returns the lightness particle of the color as a
    float value of this color.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.lightnessF()`: 这返回颜色的亮度粒子，以该颜色的浮点值表示。'
- en: '`color.magenta()`: This returns the magenta particle of the color as an integer
    value of this color.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.magenta()`: 这返回颜色的洋红色粒子，以该颜色的整数值表示。'
- en: '`color.magentaF()`: This returns the magenta particle of the color as a float
    value of this color.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.magentaF()`: 这返回颜色的洋红色粒子，以该颜色的浮点值表示。'
- en: '`color.name()`: This returns the color name in `"#RRGGBB"` format.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.name()`: 这以 `"#RRGGBB"` 格式返回颜色名称。'
- en: '`color.name(QtGui.QColor.NameFormat)`: This returns the color name of the format
    specified in the parameter.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.name(QtGui.QColor.NameFormat)`: 这返回参数中指定的格式的颜色名称。'
- en: '`color.red()`: This returns the red particle of the color as an integer value
    of this color.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.red()`: 这返回颜色的红色粒子，以该颜色的整数值表示。'
- en: '`color.redF()`: This returns the red particle of the color as a float value
    of this color.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.redF()`: 这返回颜色的红色粒子，以该颜色的浮点值表示。'
- en: '`color.saturation()`: This returns the saturation particle of the color as
    an integer value of this color.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.saturation()`: 这返回颜色的饱和度粒子，以该颜色的整数值形式。'
- en: '`color.saturationF()`: This returns the saturation particle of the color as
    a float value of this color.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.saturationF()`: 这返回颜色的饱和度粒子，以该颜色的浮点值形式。'
- en: '`color.spec()`: This returns the specifier of the `QtGui.QColor.Spec` type
    for this color.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.spec()`: 这返回该颜色的 `QtGui.QColor.Spec` 类型的指定符。'
- en: '`color.toCmyk()`: This creates and returns the CMYK color of the `QtGui.QColor`
    type for this color.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.toCmyk()`: 这创建并返回该颜色的 `QtGui.QColor` 类型的 CMYK 颜色。'
- en: '`color.toHsl()`: This creates and returns the HSL color of the `QtGui.QColor`
    type for this color.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.toHsl()`: 这创建并返回该颜色的 `QtGui.QColor` 类型的 HSL 颜色。'
- en: '`color.toHsv()`: This creates and returns the HSV color of the `QtGui.QColor`
    type for this color.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.toHsv()`: 这创建并返回该颜色的 `QtGui.QColor` 类型的 HSV 颜色。'
- en: '`color.toRgb()`: This creates and returns the RGB color of the `QtGui.QColor`
    type for this color.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.toRgb()`: 这创建并返回该颜色的 `QtGui.QColor` 类型的 RGB 颜色。'
- en: '`color.value()`: This returns the value particle of the color as an integer
    value of this color.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.value()`: 这返回颜色的值粒子，以该颜色的整数值形式。'
- en: '`color.valueF()`: This returns the value particle of the color as a float value
    of this color.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.valueF()`: 这返回颜色的值粒子，以该颜色的浮点值形式。'
- en: '`color.yellow()`: This returns the yellow particle of the color as an integer
    value of this color.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.yellow()`: 这返回颜色的黄色粒子，以该颜色的整数值形式。'
- en: '`color.yellowF()`: This returns the yellow particle of the color as a float
    value of this color.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`color.yellowF()`: 这返回颜色的黄色粒子，以该颜色的浮点值形式。'
- en: Drawing and gradients
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 绘制和渐变
- en: The Qt framework provides the classes that you can use to work with drawings
    and paintings in the application. Almost every widget is constructed for visualization
    purposes, and those that are graphically represented with Qt library classes are
    painted or drawn in accordance with these classes. The gradients make the colors
    of the various elements more modern and give them a nicer appearance.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 框架提供了您可以在应用程序中用于处理绘图和绘画的类。几乎每个小部件都是为了可视化目的而构建的，并且使用 Qt 库类图形表示的那些小部件将根据这些类进行绘制或绘制。渐变使各种元素的色彩更加现代，并赋予它们更佳的外观。
- en: QPainter
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QPainter
- en: 'The `QPainter` class is one of the main components of the Qt graphical system.
    This class provides a low-level painting of the graphical elements in  various
    forms. The `QPaintDevice` class, which inherits from `QWidget`, paints elements
    together with this class. The `QPainter` class is used to perform operations related
    to drawing and painting, together with classes such as `QPaintDevice` and `QPaintEngine`.
    The declaration syntax of this class is as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPainter` 类是 Qt 图形系统的主要组件之一。此类提供以各种形式对图形元素进行低级绘制的功能。从 `QWidget` 继承的 `QPaintDevice`
    类与该类一起绘制元素。`QPainter` 类用于执行与绘制和绘画相关的操作，以及 `QPaintDevice` 和 `QPaintEngine` 等类。此类的声明语法如下：'
- en: '[PRE2]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Also, in the case where the paint device is a widget, this class can only be
    implemented inside a `paintEvent()` function or a function that will call the
    `paintEvent()` function,as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果绘图设备是小部件，则此类只能在 `paintEvent()` 函数或调用 `paintEvent()` 函数的函数内部实现，如下所示：
- en: '[PRE3]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The `QPainter` class improves functionality by means of the following functions.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPainter` 类通过以下函数提高功能。'
- en: set
  id: totrans-304
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are the functions related to setting parameters and properties in relation
    to the painter:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置画家相关参数和属性相关的函数。
- en: '`painter.setBackground(QtGui.QBrush)`: This sets the background brush of this
    painter to the brush specified in the parameter.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBackground(QtGui.QBrush)`: 这将此画家的背景画笔设置为参数中指定的画笔。'
- en: '`painter.setBackgroundMode(QtCore.Qt.BGMode)`: This sets the background mode
    of this painter to the mode specified in the parameter.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBackgroundMode(QtCore.Qt.BGMode)`: 这将此画家的背景模式设置为参数中指定的模式。'
- en: '`painter.setBrush(QtGui.QBrush)`: This sets the brush of this painter to the
    one specified in the parameter.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBrush(QtGui.QBrush)`: 这将此画家的画笔设置为参数中指定的画笔。'
- en: '`painter.setBrush(QtCore.Qt.BrushStyle)`: This sets the brush of this painter
    to black and the specified style.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBrush(QtCore.Qt.BrushStyle)`: 这将此画家的画笔设置为黑色和指定的样式。'
- en: '`painter.setBrushOrigin(QtCore.QPoint)`: This sets the brush origin at the
    point specified in the parameter with integer values.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBrushOrigin(QtCore.QPoint)`: 这将画笔原点设置为参数中指定的点，使用整数值。'
- en: '`painter.setBrushOrigin(QtCore.QPointF)`: This sets the brush origin at the
    point with float values specified in the parameter.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBrushOrigin(QtCore.QPointF)`: 这将设置画笔原点为参数中指定的具有浮点值的点。'
- en: '`painter.setBrushOrigin(x, y)`: This sets the brush origin at the `x` (*x*
    axis) and `y` (*y* axis) positions.'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setBrushOrigin(x, y)`: 这将设置画笔原点在 `x`（*x* 轴）和 `y`（*y* 轴）位置。'
- en: '`painter.setClipping(bool)`: If the parameter is `True`, this sets the clipping
    as enabled.'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setClipping(bool)`: 如果参数是 `True`，则启用剪辑。'
- en: '`painter.setClipPath(QtGui.QPainterPath, QtCore.Qt.ClipOperation)`: This sets
    the clip path for this painter to the path (the first parameter) and clip operation
    (the second parameter).'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setClipPath(QtGui.QPainterPath, QtCore.Qt.ClipOperation)`: 这将为这个画家设置剪辑路径为路径（第一个参数）和剪辑操作（第二个参数）。'
- en: '`painter.setClipRect(QtCore.QRect, QtCore.Qt.ClipOperation)`: This sets the
    clip region to the rectangle with integer values (the first parameter) by using
    the clip operation (the second parameter).'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setClipRect(QtCore.QRect, QtCore.Qt.ClipOperation)`: 这将通过使用剪辑操作（第二个参数）将剪辑区域设置为具有整数值的矩形（第一个参数）。'
- en: '`painter.setClipRect(QtCore.QRectF, QtCore.Qt.ClipOperation)`: This sets the
    clip region to the rectangle with float values (the first parameter) by using
    the clip operation (the second parameter).'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setClipRect(QtCore.QRectF, QtCore.Qt.ClipOperation)`: 这将通过使用剪辑操作（第二个参数）将剪辑区域设置为具有浮点值的矩形（第一个参数）。'
- en: '`painter.setClipRect(QtGui.QRegion, QtCore.Qt.ClipOperation)`: This sets the
    clip region to the region specified in the first parameter by using the clip operation
    (the second parameter).'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setClipRect(QtGui.QRegion, QtCore.Qt.ClipOperation)`: 这将通过使用剪辑操作（第二个参数）将剪辑区域设置为第一个参数中指定的区域。'
- en: '`painter.setClipRect(x, y, w, h, QtCore.Qt.ClipOperation)`: This sets the clip
    region to the rectangle specified by beginning at `x` (*x* axis) and `y` (*y *axis),
    along with `w` (width) and `h` (height), by using the clip operation (the fifth
    parameter).'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setClipRect(x, y, w, h, QtCore.Qt.ClipOperation)`: 这将通过使用剪辑操作（第五个参数）将剪辑区域设置为从
    `x`（*x* 轴）和 `y`（*y* 轴）开始的矩形，以及 `w`（宽度）和 `h`（高度）。'
- en: '`painter.setCompositionMode(QtGui.QPainter.CompositionMode)`: This sets the
    composition mode specified in the parameter.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setCompositionMode(QtGui.QPainter.CompositionMode)`: 这将设置参数中指定的合成模式。'
- en: '`painter.setFont(QtGui.QFont)`: This sets the font of the painter to that specified
    in the parameter.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setFont(QtGui.QFont)`: 这将设置画家的字体为参数中指定的字体。'
- en: '`painter.setLayoutDirection(QtCore.Qt.LayoutDirection)`: This sets the layout
    direction of the drawn text.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setLayoutDirection(QtCore.Qt.LayoutDirection)`: 这将设置绘制文本的布局方向。'
- en: '`painter.setOpacity(float)`: This sets the opacity, specified in the parameter
    (`0.0`: fully transparent, `1.0`: fully opaque), which will be used with this
    painter.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setOpacity(float)`: 这将设置透明度，指定在参数中（`0.0`：完全透明，`1.0`：完全不透明），将与这个画家一起使用。'
- en: '`painter.setPen(QtGui.QPen)`: This sets the pen specified in the parameter
    to this painter.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setPen(QtGui.QPen)`: 这将设置参数中指定的笔到这个画家。'
- en: '`painter.setPen(QtGui.QColor)`: This sets the pen with a color specified in
    the parameter to this painter.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setPen(QtGui.QColor)`: 这将设置具有参数中指定的颜色的笔到这个画家。'
- en: '`painter.setPen(QtCore.Qt.PenStyle)`: This sets the pen with a style specified in
    the parameter and colored black to this painter.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setPen(QtCore.Qt.PenStyle)`: 这将设置具有参数中指定的样式和黑色颜色的笔到这个画家。'
- en: '`painter.setRenderHint(QtGui.QPainter.RenderHint, bool)`: This sets the render
    hint (the first parameter) to the painter if the second parameter is `True`. The
    available hints are as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setRenderHint(QtGui.QPainter.RenderHint, bool)`: 如果第二个参数是 `True`，则将渲染提示（第一个参数）设置为画家。可用的提示如下：'
- en: '`QtGui.QPainter.Antialiasing`: If possible, will antialias edges of primitives.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QPainter.Antialiasing`: 如果可能，将抗锯齿原始图形的边缘。'
- en: '`QtGui.QPainter.TextAntialiasing`: If possible, will antialias text.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QPainter.TextAntialiasing`: 如果可能，将抗锯齿文本。'
- en: '`QtGui.QPainter.SmoothPixmapTransform`: The engine will use smooth pixmap transformation.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QPainter.SmoothPixmapTransform`: 引擎将使用平滑的位图变换。'
- en: '`QtGui.QPainter.Qt4CompatiblePainting`: The engine will use the same fill rules
    as in Qt4.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QPainter.Qt4CompatiblePainting`: 引擎将使用与 Qt4 相同的填充规则。'
- en: '`painter.setRenderHints(QtGui.QPainter.RenderHint | QtGui.QPainter.RenderHint,
    bool)`: This sets the render hints (the first parameter) to the painter if the
    second parameter is `True`.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setRenderHints(QtGui.QPainter.RenderHint | QtGui.QPainter.RenderHint,
    bool)`: 如果第二个参数是 `True`，则将渲染提示（第一个参数）设置为画家。'
- en: '`painter.setTransform(QtGui.QTransform, bool)`: This sets the transformation
    matrix specified in the first parameter. If the second parameter is `True`, the
    transform will be combined with the current matrix; otherwise, it replaces the
    current matrix.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setTransform(QtGui.QTransform, bool)`: 这设置由第一个参数指定的变换矩阵。如果第二个参数为 `True`，则变换将与当前矩阵组合；否则，它将替换当前矩阵。'
- en: '`painter.setViewTransformEnabled(bool)`: If the parameter is `True`, this sets
    view transformations as enabled.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setViewTransformEnabled(bool)`: 如果参数为 `True`，则设置视图变换为启用。'
- en: '`painter.setViewport(QtCore.QRect)`: This sets the viewport rectangle of the
    painter to the rectangle specified in the parameter. The viewport represents the
    coordinate system of the device.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setViewport(QtCore.QRect)`: 这将画笔的视口矩形设置为参数中指定的矩形。视口表示设备的坐标系。'
- en: '`painter.setViewport(x, y, w, h)`: This sets the viewport rectangle of the
    painter to the rectangle specified, beginning at `x` (*x* axis), and `y` (*y*
    axis), along with `w` (width) and `h` (height).'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setViewport(x, y, w, h)`: 这将画笔的视口矩形设置为指定的矩形，从 `x`（*x* 轴）和 `y`（*y*
    轴）开始，以及 `w`（宽度）和 `h`（高度）。'
- en: '`painter.setWindow(QtCore.QRect)`: This sets the window of the painter to the
    rectangle specified in the parameter.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setWindow(QtCore.QRect)`: 这将画笔的窗口设置为参数中指定的矩形。'
- en: '`painter.setWindow(x, y, w, h)`: This sets the window of the painter to the
    rectangle specified, beginning at `x` (*x* axis) and `y` (*y* axis), along with
    `w` (width) and `h` (height).'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setWindow(x, y, w, h)`: 这将画笔的窗口设置为指定的矩形，从 `x`（*x* 轴）和 `y`（*y* 轴）开始，以及
    `w`（宽度）和 `h`（高度）。'
- en: '`painter.setWorldMatrixEnabled(bool)`: If the parameter is `True`, this sets
    world transformations as enabled.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setWorldMatrixEnabled(bool)`: 如果参数为 `True`，则设置世界变换为启用。'
- en: '`painter.setWorldTransform(QtGui.QTransform, bool)`: This sets the world transformation
    matrix specified in the first parameter. If the second parameter is `True`, the
    transform will be combined with the current matrix; otherwise, it replaces the
    current matrix.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.setWorldTransform(QtGui.QTransform, bool)`: 这设置由第一个参数指定的世界变换矩阵。如果第二个参数为
    `True`，则变换将与当前矩阵组合；否则，它将替换当前矩阵。'
- en: has and is
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has 和 is
- en: 'These are functions that return a Boolean value (`bool`) related to the painter:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与画笔相关的布尔值 (`bool`) 的函数：
- en: '`painter.hasClipping()`: This returns `True` if this painter has a clipping
    that was set.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.hasClipping()`: 如果此画笔设置了裁剪，则返回 `True`。'
- en: '`painter.isActive()`: This returns `True` if the painter is active and `begin()` has
    been called, whereas `end()` has not been called yet.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.isActive()`: 如果画笔是活动的并且已调用 `begin()`，则返回 `True`，而 `end()` 尚未调用。'
- en: functional
  id: totrans-344
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the painter:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前画笔值的返回相关的函数：
- en: '`painter.background()`: This returns the current brush of the `QtGui.QBrush`
    type that''s used for the background.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.background()`: 这返回用于背景的当前 `QtGui.QBrush` 类型的画笔。'
- en: '`painter.backgroundMode()`: This returns the current mode of the `QtCore.Qt.BGMode`
    type that''s used for the background.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.backgroundMode()`: 这返回用于背景的当前 `QtCore.Qt.BGMode` 类型的模式。'
- en: '`painter.begin(QtGui.QPaintDevice)`: This begins painting with the paint device
    specified in the parameter, and returns `True` if the painting was successful.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.begin(QtGui.QPaintDevice)`: 这使用参数中指定的绘图设备开始绘制，如果绘制成功则返回 `True`。'
- en: '`painter.beginNativePainting()`: This flushes the painting pipeline and prepares
    issuance for the underlying graphics context.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.beginNativePainting()`: 这刷新绘图管道并准备对底层图形上下文进行绘制。'
- en: '`painter.boundingRect(QtCore.QRectF, QtCore.Qt.Alignment, str)`: This returns
    the bounding rectangle of the `QtCore.QRectF` type, with text (the third parameter),
    rectangle (the first parameter), and flags (the second parameter), as they appear
    in the drawing.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.boundingRect(QtCore.QRectF, QtCore.Qt.Alignment, str)`: 这返回 `QtCore.QRectF`
    类型的边界矩形，其中包含文本（第三个参数）、矩形（第一个参数）和标志（第二个参数），如它们在绘图中所出现。'
- en: '`painter.brush()`: This returns the current brush of the `QtGui.QBrush` type
    that''s used with this painter.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.brush()`: 这返回与该画笔一起使用的当前 `QtGui.QBrush` 类型的画笔。'
- en: '`painter.brushOrigin()`: This returns the brush origin of the `QtCore.QPoint`
    type.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.brushOrigin()`: 这返回 `QtCore.QPoint` 类型的画笔原点。'
- en: '`painter.clipBoundingRect()`: This returns the bounding rectangle of the current
    clip of the `QtCore.QRectF` type, if the clip exists.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.clipBoundingRect()`: 如果存在裁剪，则返回当前裁剪的 `QtCore.QRectF` 类型的边界矩形。'
- en: '`painter.combinedTransform()`: This returns the transformation matrix combining
    the current world transformation and window/viewport.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.combinedTransform()`: 这返回组合当前世界变换和窗口/视口的变换矩阵。'
- en: '`painter.compositionMode()`: This returns the composition mode of the `QtGui.QPainter.CompositionMode`
    type that is currently used.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.compositionMode()`: 这返回当前使用的 `QtGui.QPainter.CompositionMode` 类型的合成模式。'
- en: '`painter.device()`: This returns the current paint device of the `QtGui.QPaintDevice`
    type that''s used for painting.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.device()`: 这返回用于绘图的当前 `QtGui.QPaintDevice` 类型的绘图设备。'
- en: '`painter.deviceTransform()`: This returns the matrix that transforms logical
    coordinates to the device coordinates of the platform-dependent paint device.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.deviceTransform()`: 这返回将逻辑坐标转换为平台相关绘图设备的设备坐标的矩阵。'
- en: '`painter.end()`: This ends the painting operation and returns `True` if the
    painter ends operations and is no longer active.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.end()`: 这将结束绘图操作，如果绘图器结束操作并且不再活跃，则返回 `True`。'
- en: '`painter.endNativePainting()`: This restores the painter after issuing the
    native painting commands.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.endNativePainting()`: 这在发出原生绘图命令后恢复绘图器。'
- en: '`painter.eraseRect(QtCore.QRect)`: This erases the area inside the rectangle
    with integer values specified in the parameter.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.eraseRect(QtCore.QRect)`: 这擦除参数中指定的整数值指定的矩形内的区域。'
- en: '`painter.eraseRect(QtCore.QRectF)`: This erases the area inside the rectangle
    with float values specified in the parameter.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.eraseRect(QtCore.QRectF)`: 这使用参数中指定的浮点值擦除矩形内的区域。'
- en: '`painter.eraseRect(x, y, w, h)`: This erases the area inside the rectangle
    beginning at `x` (*x* axis) and `y` (*y* axis), along with `w` (width) and `h` (height).'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.eraseRect(x, y, w, h)`: 这擦除从 `x`（*x* 轴）和 `y`（*y* 轴）开始的矩形内的区域，以及 `w`（宽度）和
    `h`（高度）。'
- en: '`painter.font()`: This returns the current font using this painter for drawing
    text.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.font()`: 这返回使用此绘图器绘制文本的当前字体。'
- en: '`painter.fontInfo()`: This returns the font information for the font that''s
    used with this painter.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fontInfo()`: 这返回与该绘图器一起使用的字体的字体信息。'
- en: '`painter.fontMetrics()`: This returns the font metrics for the font that''s
    used with this painter.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fontMetrics()`: 这返回与该绘图器一起使用的字体的字体度量。'
- en: '`painter.layoutDirection()`: This returns the layout direction of the `QtCore.Qt.LayoutDirection`
    type that''s used with this painter for drawing the text.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.layoutDirection()`: 这返回与该绘图器一起用于绘制文本的 `QtCore.Qt.LayoutDirection`
    类型的布局方向。'
- en: '`painter.opacity()`: This returns the opacity that''s used with this painter.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.opacity()`: 这返回与该绘图器一起使用的透明度。'
- en: '`painter.paintEngine()`: This returns the current paint engine of the `QtGui.QPaintEngine`
    type that this painter is operating on.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.paintEngine()`: 这返回此绘图器正在操作的当前 `QtGui.QPaintEngine` 类型的绘图引擎。'
- en: '`painter.pen()`: This returns the current pen of the `QtGui.QPen` type that''s
    used with this painter.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.pen()`: 这返回与该绘图器一起使用的当前 `QtGui.QPen` 类型的笔。'
- en: '`painter.renderHints()`: This returns the render hints of the `QtGui.QPainter.RenderHints`
    type that are used as hints for rendering with this painter.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.renderHints()`: 这返回用于此绘图器绘图的 `QtGui.QPainter.RenderHints` 类型的渲染提示。'
- en: '`painter.resetTransform()`: This resets transformations that were made with
    the `translate()`, `scale()`, `shear()`, `rotate()`, `setWorldTransform()`, `setViewport()`,
    and `setWindow()` functions of this painter.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.resetTransform()`: 这重置使用此绘图器的 `translate()`、`scale()`、`shear()`、`rotate()`、`setWorldTransform()`、`setViewport()`
    和 `setWindow()` 函数所做的变换。'
- en: '`painter.restore()`: This restores the current states of this painter.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.restore()`: 这恢复此绘图器的当前状态。'
- en: '`painter.rotate(float)`: This rotates the coordinate system of this painter
    clockwise, with the angle parameter in degrees.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.rotate(float)`: 这以角度参数按顺时针方向旋转此绘图器的坐标系。'
- en: '`painter.save()`: This saves the current states of this painter.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.save()`: 这保存此绘图器的当前状态。'
- en: '`painter.scale(x, y)`: This scales the coordinate system of this painter by
    `x` (*x* axis) and `y` (*y* axis) values, which are float values.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.scale(x, y)`: 这通过 `x`（*x* 轴）和 `y`（*y* 轴）值缩放此绘图器的坐标系，这些值是浮点数。'
- en: '`painter.shear(float, float)`: This shears the coordinate system as per the
    specified parameters.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.shear(float, float)`: 这根据指定的参数剪切坐标系。'
- en: '`painter.strokePath(QtGui.QPainterPath, QtGui.QPen)`: This strokes the path
    specified in the first parameter with the outline, using the pen specified in
    the second parameter.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.strokePath(QtGui.QPainterPath, QtGui.QPen)`: 这使用第二个参数指定的笔来绘制第一个参数指定的路径的轮廓。'
- en: '`painter.testRenderHint(QtGui.QPainter.RenderHint)`: This returns `True` if
    the hint specified in the parameter is set to this painter.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.testRenderHint(QtGui.QPainter.RenderHint)`: 如果参数中指定的提示设置为该画家，则返回 `True`。'
- en: '`painter.transform()`: This returns the transformation matrix of the `QtGui.QTransform`
    type.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.transform()`: 这返回 `QtGui.QTransform` 类型的变换矩阵。'
- en: '`painter.translate(QtCore.QPoint)`: This translates the coordinate system at the
    point specified in the parameter with integer values.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.translate(QtCore.QPoint)`: 这将在参数中指定的点（以整数值指定）处平移坐标系。'
- en: '`painter.translate(QtCore.QPointF)`: This translates the coordinate system
    at the point specified in the parameter with float values.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.translate(QtCore.QPointF)`: 这将在参数中指定的点（以浮点值指定）处平移坐标系。'
- en: '`painter.translate(float, float)`: This translates the coordinate system as
    per the specified vector.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.translate(float, float)`: 这将根据指定的向量平移坐标系。'
- en: '`painter.viewTransformEnabled()`: This returns `True` if the view transformation
    is enabled for this painter.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.viewTransformEnabled()`: 如果此画家的视图变换被启用，则返回 `True`。'
- en: '`painter.viewport()`: This returns the viewport rectangle of the `QtCore.QRect`
    type.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.viewport()`: 这返回 `QtCore.QRect` 类型的视口矩形。'
- en: '`painter.window()`: This returns the window rectangle of the `QtCore.QRect`
    type.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.window()`: 这返回 `QtCore.QRect` 类型的窗口矩形。'
- en: '`painter.worldMatrixEnabled()`: This returns `True` if the world transformation
    is enabled for this painter.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.worldMatrixEnabled()`: 如果此画家的世界变换被启用，则返回 `True`。'
- en: '`painter.worldTransform()`: This returns the world transformation matrix of
    the `QtGui.QTransform` type.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.worldTransform()`: 这返回 `QtGui.QTransform` 类型的世界变换矩阵。'
- en: draw
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: draw
- en: 'These are the functions that are related to drawing operations with this painter:'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与该画家相关的绘图操作函数：
- en: '`painter.drawArc(QtCore.QRect, int, int)`: This draws the arc defined by the
    rectangle with integer values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawArc(QtCore.QRect, int, int)`: 这将使用参数中指定的整数值（第一个参数）和起始角度（第二个参数）以及跨度角度（第三个参数）绘制圆弧。'
- en: '`painter.drawArc(QtCore.QRectF, int, int)`: This draws the arc defined by the
    rectangle with float values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawArc(QtCore.QRectF, int, int)`: 这将使用参数中指定的浮点值（第一个参数）和起始角度（第二个参数）以及跨度角度（第三个参数）绘制圆弧。'
- en: '`painter.drawArc(x, y, w, h, int, int)`: This draws the arc with the specified
    parameters—a rectangle beginning at `x` (*x *axis) and `y` (*y *axis); with `w` (width)
    and `h` (height); with a start angle (the fifth parameter), and a span angle (the
    sixth parameter).'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawArc(x, y, w, h, int, int)`: 这将使用指定的参数绘制圆弧——一个以 `x`（*x* 轴）和 `y`（*y*
    轴）开始的矩形；具有 `w`（宽度）和 `h`（高度）；起始角度（第五个参数）和跨度角度（第六个参数）。'
- en: '`painter.drawChord(QtCore.QRect, int, int)`: This draws the chord defined by
    the rectangle with integer values (the first parameter), a start angle (the second
    parameter), and a span angle (the third parameter).'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawChord(QtCore.QRect, int, int)`: 这将使用参数中指定的整数值（第一个参数），起始角度（第二个参数）和跨度角度（第三个参数）绘制圆弧。'
- en: '`painter.drawChord(QtCore.QRectF, int, int)`: This draws the chord defined
    by the rectangle with float values (the first parameter), a start angle (the second
    parameter), and a span angle (the third parameter).'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawChord(QtCore.QRectF, int, int)`: 这将使用参数中指定的浮点值（第一个参数），起始角度（第二个参数）和跨度角度（第三个参数）绘制圆弧。'
- en: '`painter.drawChord(x, y, w, h, int, int)`: This draws the chord with specified
    parameters—a rectangle beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width)
    and `h` (height); with a start angle (the fifth parameter), and a span angle (the
    sixth parameter).'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawChord(x, y, w, h, int, int)`: 这将使用指定的参数绘制圆弧——一个以 `x`（*x* 轴）和 `y`（*y*
    轴）开始的矩形；具有 `w`（宽度）和 `h`（高度）；起始角度（第五个参数）和跨度角度（第六个参数）。'
- en: '`painter.drawConvexPolygon(QtGui.QPolygon)`: This draws the convex polygon
    with a polygon specified in the parameter.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawConvexPolygon(QtGui.QPolygon)`: 这将使用参数中指定的多边形绘制凸多边形。'
- en: '`painter.drawEllipse(QtCore.QRect)`: This draws the ellipse defined by the
    rectangle with integer values specified in the parameter.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawEllipse(QtCore.QRect)`: 这将使用参数中指定的整数值绘制定义的椭圆。'
- en: '`painter.drawEllipse(QtCore.QRectF)`: This draws the ellipse defined by the
    rectangle with float values specified in the parameter.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawEllipse(QtCore.QRectF)`: 这将使用参数中指定的浮点值绘制定义的椭圆。'
- en: '`painter.drawEllipse(QtCore.QPoint, int, int)`: This draws the ellipse in the
    center position with integer values (the first parameter), radius *x* (the second
    parameter), and radius *y* (the third parameter).'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawEllipse(QtCore.QPoint, int, int)`: 这将在中心位置以整数值（第一个参数）绘制椭圆，半径 *x*（第二个参数）和半径
    *y*（第三个参数）。'
- en: '`painter.drawEllipse(QtCore.QPointF, int, int)`: This draws the ellipse in
    the center position with float values (the first parameter), radius *x* (the second
    parameter), and radius *y* (the third parameter).'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawEllipse(QtCore.QPointF, int, int)`: 这将在中心位置以浮点值（第一个参数）绘制椭圆，半径
    *x*（第二个参数）和半径 *y*（第三个参数）。'
- en: '`painter.drawEllipse(x, y, w, h)`: This draws the ellipse with specified parameters—a rectangle
    beginning at `x` (*x* axis) and `y` (*y* axis) with `w` (width) and `h` (height).'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawEllipse(x, y, w, h)`: 这将在指定参数的椭圆上绘制——从 `x`（*x* 轴）和 `y`（*y* 轴）开始的矩形，宽度为
    `w`，高度为 `h`。'
- en: '`painter.drawImage(QtCore.QRect, QtGui.QImage)`: This draws the image specified
    in the second parameter in a rectangle with integer values (the first parameter).'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QRect, QtGui.QImage)`: 这将在具有整数值（第一个参数）的矩形中绘制第二个参数指定的图像。'
- en: '`painter.drawImage(QtCore.QRectF, QtGui.QImage)`: This draws the image specified
    in the second parameter in a rectangle with float values (the first parameter).'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QRectF, QtGui.QImage)`: 这将在具有浮点值（第一个参数）的矩形中绘制第二个参数指定的图像。'
- en: '`painter.drawImage(QtCore.QPoint, QtGui.QImage)`: This draws the image specified
    in the second parameter at the point with integer values (the first parameter).'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QPoint, QtGui.QImage)`: 这将在具有整数值（第一个参数）的点处绘制第二个参数指定的图像。'
- en: '`painter.drawImage(QtCore.QPointF, QtGui.QImage)`: This draws the image specified
    in the second parameter at the point with float values (the first parameter).'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QPointF, QtGui.QImage)`: 这将在具有浮点值（第一个参数）的点处绘制第二个参数指定的图像。'
- en: '`painter.drawImage(QtCore.QRect, QtGui.QImage, QtCore.QRect, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with integer values (the third parameter)
    of the image (the second parameter) in a rectangle with integer values in the
    paint device (the first parameter) and with flags (the fourth parameter).'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QRect, QtGui.QImage, QtCore.QRect, QtCore.Qt.ImageConversionFlags)`:
    这将在具有整数值（第三个参数）的图像（第二个参数）的矩形源上绘制矩形，该矩形位于具有整数值（第一个参数）的画布设备中的矩形内，并带有标志（第四个参数）。'
- en: '`painter.drawImage(QtCore.QPoint, QtGui.QImage, QtCore.QRect, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with integer values (the third parameter)
    of the image (the second parameter) at the point with integer values (the first
    parameter) and with flags (the fourth parameter).'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QPoint, QtGui.QImage, QtCore.QRect, QtCore.Qt.ImageConversionFlags)`:
    这将在具有整数值（第三个参数）的图像（第二个参数）的矩形源上绘制浮点值（第一个参数）的点，并带有标志（第四个参数）。'
- en: '`painter.drawImage(QtCore.QPointF, QtGui.QImage, QtCore.QRectF, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with float values (the third parameter)
    of the image (the second parameter) at the point with float values (the first
    parameter) and with flags (the fourth parameter).'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QPointF, QtGui.QImage, QtCore.QRectF, QtCore.Qt.ImageConversionFlags)`:
    这将在具有浮点值（第三个参数）的图像（第二个参数）的矩形源上绘制浮点值（第一个参数）的点，并带有标志（第四个参数）。'
- en: '`painter.drawImage(QtCore.QRectF, QtGui.QImage, QtCore.QRectF, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with float values (the third parameter)
    of the image (the second parameter) in a rectangle with float values in the paint
    device (the first parameter) and with flags (the fourth parameter).'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(QtCore.QRectF, QtGui.QImage, QtCore.QRectF, QtCore.Qt.ImageConversionFlags)`:
    这将在具有浮点值（第三个参数）的图像（第二个参数）的矩形源上绘制矩形，该矩形位于具有浮点值（第一个参数）的画布设备中的矩形内，并带有标志（第四个参数）。'
- en: '`painter.drawImage(x, y, QtGui.QImage, tx, ly, w, h, QtCore.Qt.ImageConversionFlags)`:
    This draws the image (the second parameter) at the position, beginning at `x` (*x*
    axis) and `y` (*y* axis); with `tx` (top) and `ly` (left) points in the image
    with `w` (width) and `h` (height) with flags (the eighth parameter) in the paint
    device.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawImage(x, y, QtGui.QImage, tx, ly, w, h, QtCore.Qt.ImageConversionFlags)`:
    这将在位置绘制图像（第二个参数），从 `x`（*x* 轴）和 `y`（*y* 轴）开始；在图像中具有 `tx`（顶部）和 `ly`（左侧）点，宽度为 `w`，高度为
    `h`，并带有标志（第八个参数）的画布设备中。'
- en: '`painter.drawLine(QtCore.QLine)`: This draws a line, as defined by the line
    with integer values specified in the parameter.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLine(QtCore.QLine)`: 这将绘制由参数中指定的具有整数值的线。'
- en: '`painter.drawLine(QtCore.QLineF)`: This draws a line, as defined by the line
    with float values specified in the parameter.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLine(QtCore.QLineF)`: 这条语句根据参数中指定的具有浮点值的线绘制一条线。'
- en: '`painter.drawLine(QtCore.QPoint, QtCore.QPoint)`: This draws a line from the
    point with integer values (the first parameter) to the point with integer values
    (the second parameter).'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLine(QtCore.QPoint, QtCore.QPoint)`: 这条语句从具有整数值的点（第一个参数）绘制一条线到具有整数值的点（第二个参数）。'
- en: '`painter.drawLine(QtCore.QPointF, QtCore.QPointF)`: This draws a line from
    the point with float values (the first parameter) to the point with float values
    (the second parameter).'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLine(QtCore.QPointF, QtCore.QPointF)`: 这条语句从具有浮点值的点（第一个参数）绘制一条线到具有浮点值的点（第二个参数）。'
- en: '`painter.drawLine(x1, y1, x2, y2)`: This draws a line from `x1` (*x* axis)
    and `y1` (*y* axis) to `x2` (*x* axis) and `y2` (*y* axis).'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLine(x1, y1, x2, y2)`: 这条语句从 `x1`（x轴）和 `y1`（y轴）到 `x2`（x轴）和 `y2`（y轴）绘制一条线。'
- en: '`painter.drawLines([QtCore.QLine])`: This draws lines, with integer values,
    specified in the list of lines.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLines([QtCore.QLine])`: 这条语句绘制列表中指定的具有整数值的线。'
- en: '`painter.drawLines([QtCore.QLineF])`: This draws lines, with float values,
    specified in the list of lines.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawLines([QtCore.QLineF])`: 这条语句绘制列表中指定的具有浮点值的线。'
- en: '`painter.drawPath(QtGui.QPainterPath)`: This draws the path specified in the
    parameter.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPath(QtGui.QPainterPath)`: 这条语句绘制参数中指定的路径。'
- en: '`painter.drawPicture(QtCore.QPoint, QtGui.QPicture)`: This draws a picture
    (the second parameter) at the point with integer values (the first parameter).'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPicture(QtCore.QPoint, QtGui.QPicture)`: 这条语句在具有整数值的点上绘制一个图片（第二个参数）。'
- en: '`painter.drawPicture(QtCore.QPointF, QtGui.QPicture)`: This draws a picture
    (the second parameter) at the point with float values (the first parameter).'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPicture(QtCore.QPointF, QtGui.QPicture)`: 这条语句在具有浮点值的点上绘制一个图片（第二个参数）。'
- en: '`painter.drawPicture(x, y, QPicture)`: This draws a picture (the third parameter)
    at the point specified by `x` (*x* axis) and `y` (*y* axis).'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPicture(x, y, QPicture)`: 这条语句在由 `x`（x轴）和 `y`（y轴）指定的点上绘制一个图片（第三个参数）。'
- en: '`painter.drawPie(QtCore.QRect, int, int)`: This draws a pie defined by the
    rectangle with integer values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPie(QtCore.QRect, int, int)`: 这条语句通过矩形（第一个参数）和整数值（起始角度的第二个参数和跨度角度的第三个参数）绘制一个饼图。'
- en: '`painter.drawPie(QtCore.QRectF, int, int)`: This draws a pie defined by the
    rectangle with float values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPie(QtCore.QRectF, int, int)`: 这条语句通过具有浮点值的矩形（第一个参数）和起始角度（第二个参数）以及跨度角度（第三个参数）绘制一个饼图。'
- en: '`painter.drawPie(x, y, w, h, int, int)`: This draws a pie with specified parameters—a
    rectangle beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height); and with a start angle (the fifth parameter) and a span angle (the
    sixth parameter).'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPie(x, y, w, h, int, int)`: 这条语句使用指定的参数绘制一个饼图——一个从 `x`（x轴）和 `y`（y轴）开始的矩形；具有
    `w`（宽度）和 `h`（高度）；以及起始角度（第五个参数）和跨度角度（第六个参数）。'
- en: '`painter.drawPixmap(QtCore.QRect, QtGui.QPixmap)`: This draws a pixmap (the
    second parameter) in a rectangle with integer values (the first parameter).'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QRect, QtGui.QPixmap)`: 这条语句在具有整数值的矩形内绘制一个位图（第二个参数）。'
- en: '`painter.drawPixmap(QtCore.QPoint, QtGui.QPixmap)`: This draws a pixmap (the
    second parameter) at the point with integer values (the first parameter).'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QPoint, QtGui.QPixmap)`: 这条语句在具有整数值的点上绘制一个位图（第二个参数）。'
- en: '`painter.drawPixmap(QtCore.QPointF, QtGui.QPixmap)`: This draws a pixmap (the
    second parameter) at the point with float values (the first parameter).'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QPointF, QtGui.QPixmap)`: 这条语句在具有浮点值的点上绘制一个位图（第二个参数）。'
- en: '`painter.drawPixmap(QtCore.QRect, QtGui.QPixmap, QtCore.QRect)`: This draws
    the rectangular portion with integer values (the third parameter) of the pixmap
    (the second parameter) in a rectangle with integer values (the first parameter)
    in the paint device.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QRect, QtGui.QPixmap, QtCore.QRect)`: 这条语句在画布中绘制位图的矩形部分（第三个参数），该部分位于具有整数值的矩形（第一个参数）内。'
- en: '`painter.drawPixmap(QtCore.QRectF, QtGui.QPixmap, QtCore.QRectF)`: This draws
    the rectangular portion with float values (the third parameter) of the pixmap
    (the second parameter) in a rectangle with float values (the first parameter)
    in the paint device.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QRectF, QtGui.QPixmap, QtCore.QRectF)`: 这将在画布设备中，以浮点值（第三个参数）的矩形部分（第二个参数）在具有浮点值（第一个参数）的矩形中绘制位图。'
- en: '`painter.drawPixmap(QtCore.QPoint, QtGui.QPixmap, QtCore.QRect)`: This draws
    the rectangular portion with integer values (the third parameter) of the pixmap
    (the second parameter) at the point with integer values (the first parameter)
    in the paint device.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QPoint, QtGui.QPixmap, QtCore.QRect)`: 这将在画布设备中，以整数值（第三个参数）的矩形部分（第二个参数）在具有整数值（第一个参数）的点处绘制位图。'
- en: '`painter.drawPixmap(QtCore.QPointF, QtGui.QPixmap, QtCore.QRectF)`: This draws
    the rectangular portion with float values (the third parameter) of the pixmap
    (the second parameter) at the point with float values (the first parameter) in
    the paint device.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(QtCore.QPointF, QtGui.QPixmap, QtCore.QRectF)`: 这将在画布设备中，以浮点值（第三个参数）的矩形部分（第二个参数）在具有浮点值（第一个参数）的点处绘制位图。'
- en: '`painter.drawPixmap(x, y, QtGui.QPixmap)`: This draws a pixmap specified in
    the third parameter at the beginning position according to `x` (*x* axis) and
    `y` (*y* axis).'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(x, y, QtGui.QPixmap)`: 这将在根据 `x`（x轴）和 `y`（y轴）的位置开始绘制指定在第三个参数中的位图。'
- en: '`painter.drawPixmap(x, y, QtGui.QPixmap, tx, ly, w, h)`: This draws a pixmap
    (the third parameter) with parameters specified, beginning at `x` (*x* axis) and
    `y` (y axis); with `tx` (x-top) and `ly` (y-left), points; with size `w` (width)
    and `h` (height).'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(x, y, QtGui.QPixmap, tx, ly, w, h)`: 这将在指定参数的情况下绘制位图（第三个参数），从
    `x`（x轴）和 `y`（y轴）开始；使用 `tx`（x-top）和 `ly`（y-left）点；大小为 `w`（宽度）和 `h`（高度）。'
- en: '`painter.drawPixmap(x, y, w, h, QtGui.QPixmap, tx, ly, pw, ph)`: This draws
    a pixmap (the fifth parameter) with specified parameters, beginning from `x` (*x*
    axis) and `y` (*y* axis); with size `w` (width) and `h` (height); with `tx` (x-top);
    `ly` (y-left); with `pw` (width) and `ph` (height).'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(x, y, w, h, QtGui.QPixmap, tx, ly, pw, ph)`: 这将在指定参数的情况下绘制位图（第五个参数），从
    `x`（x轴）和 `y`（y轴）开始；大小为 `w`（宽度）和 `h`（高度）；使用 `tx`（x-top）；`ly`（y-left）；`pw`（宽度）和
    `ph`（高度）。'
- en: '`painter.drawPixmap(x, y, w, h, QtGui.QPixmap)`: This draws a pixmap (the fifth
    parameter) in a rectangle at a position according to `x` (*x* axis) and `y` (*y*
    axis), with size `w` (width) and `h` (height).'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmap(x, y, w, h, QtGui.QPixmap)`: 这将在根据 `x`（x轴）和 `y`（y轴）的位置，大小为
    `w`（宽度）和 `h`（高度）的矩形中绘制位图（第五个参数）。'
- en: '`painter.drawPixmapFragments([QtGui.QPainter.PixmapFragment], int, QtGui.QPixmap,
    QtGui.QPainter.PixmapFragmentHints)`: This draws a pixmap (the third parameter)
    at multiple positions (fragments) with scales, rotations, and opacity that may
    be different. The fragments (the first parameter) are an array of elements of
    the fragment count (the second parameter) that are used to draw each pixmap fragment,
    and hints (the fourth parameter) that constitute a drawing hint.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPixmapFragments([QtGui.QPainter.PixmapFragment], int, QtGui.QPixmap,
    QtGui.QPainter.PixmapFragmentHints)`: 这将在多个位置（片段）绘制位图（第三个参数），具有不同的缩放、旋转和透明度。片段（第一个参数）是用于绘制每个位图片段的片段计数（第二个参数）的元素数组，以及构成绘图提示的提示（第四个参数）。'
- en: '`painter.drawPoint(QtCore.QPoint)`: This draws a point at a position specified
    in the point parameter with integer values.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPoint(QtCore.QPoint)`: 这将在指定在点参数中的整数值位置绘制一个点。'
- en: '`painter.drawPointF(QtCore.QPoint)`: This draws a point at a position specified
    in the point parameter with float values.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPointF(QtCore.QPoint)`: 这将在指定在点参数中的浮点值位置绘制一个点。'
- en: '`painter.drawPoint(x, y)`: This draws a point at a position with `x` (*x* axis)
    and `y` (*y* axis) specified.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPoint(x, y)`: 这将在指定 `x`（x轴）和 `y`（y轴）的位置绘制一个点。'
- en: '`painter.drawPoints(QtGui.QPolygon)`: This draws the points specified in the
    vector as polygons with integer values.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPoints(QtGui.QPolygon)`: 这将根据向量中的点以整数值绘制多边形。'
- en: '`painter.drawPoints(QtGui.QPolygonF)`: This draws the points specified in the
    vector as polygons with float values.'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPoints(QtGui.QPolygonF)`: 这将根据向量中的点以浮点值绘制多边形。'
- en: '`painter.drawPolygon(QtGui.QPolygon, QtCore.Qt.FillRule)`: This draws the polygon
    according to points specified in the polygon with integer values (the first parameter),
    and with rules (the second parameter).'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPolygon(QtGui.QPolygon, QtCore.Qt.FillRule)`: 这将根据多边形中指定的整数值点绘制多边形，并使用规则（第二个参数）。'
- en: '`painter.drawPolygon(QtGui.QPolygonF, QtCore.Qt.FillRule)`: This draws the
    polygon according to points specified in the polygon with float values (the first
    parameter), and with rules (the second parameter).'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPolygon(QtGui.QPolygonF, QtCore.Qt.FillRule)`: 这将根据多边形中指定的浮点值点绘制多边形（第一个参数），并且有规则（第二个参数）。'
- en: '`painter.drawPolyline(QtGui.QPolygon, QtCore.Qt.FillRule)`: This draws the
    polyline according to points specified in the polygon with integer values.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPolyline(QtGui.QPolygon, QtCore.Qt.FillRule)`: 这将根据多边形中指定的整数值点绘制折线。'
- en: '`painter.drawPolyline(QtGui.QPolygonF, QtCore.Qt.FillRule)`: This draws the
    polyline according to points specified in the polygon with float values.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawPolyline(QtGui.QPolygonF, QtCore.Qt.FillRule)`: 这将根据多边形中指定的浮点值点绘制折线。'
- en: '`painter.drawRect(QtCore.QRect)`: This draws the rectangle specified in the
    parameter with integer values.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRect(QtCore.QRect)`: 这将绘制由整数值指定的参数指定的矩形。'
- en: '`painter.drawRect(QtCore.QRectF)`: This draws the rectangle specified in the
    parameter with float values.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRect(QtCore.QRectF)`: 这将绘制由浮点值指定的参数指定的矩形。'
- en: '`painter.drawRect(x, y, w, h)`: This draws the rectangle, specified by `x` (*x*
    axis) and `y` (*y* axis) from the upper-left corner, with `w` (width) and `h` (height).'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRect(x, y, w, h)`: 这将绘制从左上角开始，由 `x`（*x* 轴）和 `y`（*y* 轴）指定的矩形，宽度为
    `w`，高度为 `h`。'
- en: '`painter.drawRects(QtCore.QRect, QtCore.QRect...)`: This draws the rectangles
    specified in the parameter with integer values.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRects(QtCore.QRect, QtCore.QRect...)`: 这将绘制由整数值指定的参数指定的矩形。'
- en: '`painter.drawRects([QtCore.QRectF])`: This draws the rectangles specified in
    the parameter with float values.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRects([QtCore.QRectF])`: 这将绘制由浮点值指定的参数指定的矩形。'
- en: '`painter.drawRoundRect(QtCore.QRect, rx, ry)`: This draws the rectangle with
    rounded corners, as specified in the rectangle (the first parameter) with integer
    values, with `rx` and `ry` (rounded corners of the rectangle).'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRoundRect(QtCore.QRect, rx, ry)`: 这将绘制具有圆角的矩形，圆角的大小由 `rx` 和 `ry`（矩形的圆角）指定。'
- en: '`painter.drawRoundRect(QtCore.QRectF, rx, ry)`: This draws the rectangle with
    rounded corners, specified in the rectangle (the first parameter) with float values,
    with `rx` and `ry` (rounded corners of the rectangle).'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRoundRect(QtCore.QRectF, rx, ry)`: 这将绘制具有圆角的矩形，圆角的大小由 `rx` 和 `ry`（矩形的圆角）指定，并且矩形的大小由浮点值指定（第一个参数）。'
- en: '`painter.drawRoundRect(x, y, w, h, rx, ry)`: This draws the rectangle with
    rounded corners, specified by parameters, beginning at `x` (*x* axis) and `y` (*y*
    axis); with `w` (width) and `h` (height); with `rx` and `ry` (rounded corners
    of the rectangle).'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRoundRect(x, y, w, h, rx, ry)`: 这将绘制具有圆角的矩形，圆角的大小由 `rx` 和 `ry`（矩形的圆角）指定，并且从
    `x`（*x* 轴）和 `y`（*y* 轴）的起点开始；宽度为 `w`，高度为 `h`。'
- en: '`painter.drawRoundedRect(QtCore.QRect, rx, ry, QtCore.Qt.SizeMode)`: This draws
    the rectangle with rounded corners, specified in the rectangle (the first parameter)
    with integer values, with `rx` and `ry` (rounded corners of the rectangle) and
    a mode (the fourth parameter).'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRoundedRect(QtCore.QRect, rx, ry, QtCore.Qt.SizeMode)`: 这将绘制具有圆角的矩形，圆角的大小由
    `rx` 和 `ry`（矩形的圆角）指定，并且有一个模式（第四个参数），矩形的大小由整数值指定（第一个参数）。'
- en: '`painter.drawRoundedRect(QtCore.QRectF, rx, ry, QtCore.Qt.SizeMode)`: This
    draws the rectangle with rounded corners, specified in the rectangle (the first
    parameter) with float values, with `rx` and `ry` (rounded corners of the rectangle) and
    a mode (the fourth parameter).'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRoundedRect(QtCore.QRectF, rx, ry, QtCore.Qt.SizeMode)`: 这将绘制具有圆角的矩形，圆角的大小由
    `rx` 和 `ry`（矩形的圆角）指定，并且有一个模式（第四个参数），矩形的大小由浮点值指定（第一个参数）。'
- en: '`painter.drawRoundedRect(x, y, w, h, rx, ry, QtCore.Qt.SizeMode)`: This draws
    the rectangle with rounded corners, specified by parameters, beginning at the
    point `x` (*X* axis), and `y` (*Y* axis); with `w` width and `h` height; with
    `rx` and `ry` (rounded corners of the rectangle); and a mode (the seventh parameter).'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawRoundedRect(x, y, w, h, rx, ry, QtCore.Qt.SizeMode)`: 这将绘制具有圆角的矩形，圆角的大小由
    `rx` 和 `ry`（矩形的圆角）指定，并且有一个模式（第七个参数），矩形的大小由参数指定，从点 `x`（*X* 轴）和 `y`（*Y* 轴）开始；宽度为
    `w`，高度为 `h`。'
- en: '`painter.drawStaticText(QtCore.QPoint, QtGui.QStaticText)`: This draws the
    static text (the second parameter) at the point with integer values (the first
    parameter).'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawStaticText(QtCore.QPoint, QtGui.QStaticText)`: 这将在具有整数值（第一个参数）的点处绘制静态文本（第二个参数）。'
- en: '`painter.drawStaticText(QtCore.QPointF, QtGui.QStaticText)`: This draws the
    static text (the second parameter) at the point with float values (the first parameter).'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawStaticText(QtCore.QPointF, QtGui.QStaticText)`: 这将在具有浮点值（第一个参数）的点绘制静态文本（第二个参数）。'
- en: '`painter.drawStaticText(int, int, QStaticText)`: This draws the static text
    (the third parameter) for the left (the first parameter) and top (the second parameter)
    coordinates.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawStaticText(int, int, QStaticText)`: 这将在左（第一个参数）和顶（第二个参数）坐标绘制静态文本（第三个参数）。'
- en: '`painter.drawText(QtCore.QRect, flags, str)`: This draws the text (the third
    parameter) within the rectangle provided with integer values (the first parameter)
    and flags (the second parameter). The available flags can be used with OR (`|`)
    and are as follows:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(QtCore.QRect, flags, str)`: 这将在提供的矩形内绘制文本（第三个参数），矩形由整数值（第一个参数）和标志（第二个参数）定义。可用的标志可以用OR（`|`）组合，如下所示：'
- en: '`QtCore.Qt.AlignLeft`: Left alignment.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignLeft`: 左对齐。'
- en: '`QtCore.Qt.AlignRight`: Right alignment.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignRight`: 右对齐。'
- en: '`QtCore.Qt.AlignHCenter`: Horizontal center alignment.'
  id: totrans-463
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignHCenter`: 水平居中对齐。'
- en: '`QtCore.Qt.AlignJustify`: Justified alignment.'
  id: totrans-464
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignJustify`: 段落对齐。'
- en: '`QtCore.Qt.AlignTop`: Top alignment.'
  id: totrans-465
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignTop`: 顶部对齐。'
- en: '`QtCore.Qt.AlignBottom`: Bottom alignment.'
  id: totrans-466
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignBottom`: 底部对齐。'
- en: '`QtCore.Qt.AlignVCenter`: Vertical center alignment.'
  id: totrans-467
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignVCenter`: 垂直居中对齐。'
- en: '`QtCore.Qt.AlignCenter`: Center alignment.'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AlignCenter`: 居中对齐。'
- en: '`QtCore.Qt.TextDontClip`: The text won''t clip.'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TextDontClip`: 文本不会裁剪。'
- en: '`QtCore.Qt.TextSingleLine`: The text in single line.'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TextSingleLine`: 文本单行。'
- en: '`QtCore.Qt.TextExpandTabs`: This makes the ASCII tab character move to the
    next stop.'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TextExpandTabs`: 这使得ASCII制表符移动到下一个停止位置。'
- en: '`QtCore.Qt.TextShowMnemonic`: Displays strings such as `"&P"` as `P`.'
  id: totrans-472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TextShowMnemonic`: 显示如`"&P"`之类的字符串为`P`。'
- en: '`QtCore.Qt.TextWordWrap`: Breaks lines by words.'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TextWordWrap`: 按单词换行。'
- en: '`QtCore.Qt.TextIncludeTrailingSpaces`: If this is used, `naturalTextWidth()`
    and `naturalTextRect()` will return a value that includes the width of trailing
    spaces in the text; otherwise, it is excluded.'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TextIncludeTrailingSpaces`: 如果使用此选项，`naturalTextWidth()` 和 `naturalTextRect()`
    将返回一个包含文本末尾空格宽度的值；否则，它将被排除。'
- en: '`painter.drawText(QtCore.QRectF, flags, str)`: This draws the text (the third
    parameter) within the rectangle provided with float values (the first parameter)
    and flags (the second parameter).'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(QtCore.QRectF, flags, str)`: 这将在提供的矩形内绘制文本（第三个参数），矩形由浮点值（第一个参数）和标志（第二个参数）定义。'
- en: '`painter.drawText(x, y, str)`: This draws the text (the third parameter) at
    the position according to `x` (*x* axis) and `y` (*y* axis).'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(x, y, str)`: 这将在根据`x`（*x*轴）和`y`（*y*轴）的位置绘制文本（第三个参数）。'
- en: '`painter.drawText(x, y, w, h, flags, str)`: This draws the text (the sixth
    parameter) beginning at the position according to `x` (*x* axis) and `y` (*y*
    axis), along with `w` (width) and `h` (height) and flags (the fifth parameter).'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(x, y, w, h, flags, str)`: 这将在根据`x`（*x*轴）和`y`（*y*轴）的位置绘制文本（第六个参数），以及`w`（宽度）和`h`（高度）和标志（第五个参数）。'
- en: '`painter.drawText(QtCore.QRectF, str, QtGui.QTextOption)`: This draws the text
    (the second parameter) in the rectangle with float values (the first parameter)
    and a text option (the third parameter).'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(QtCore.QRectF, str, QtGui.QTextOption)`: 这将在具有浮点值（第一个参数）的矩形内绘制文本（第二个参数），并带有文本选项（第三个参数）。'
- en: '`painter.drawText(QtCore.QPoint, str)`: This draws the text (the second parameter)
    at the point with integer values (the first parameter).'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(QtCore.QPoint, str)`: 这将在具有整数值（第一个参数）的点绘制文本（第二个参数）。'
- en: '`painter.drawText(QtCore.QPointF, str)`: This draws the text (the second parameter)
    at the point with float values (the first parameter).'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawText(QtCore.QPointF, str)`: 这将在具有浮点值（第一个参数）的点绘制文本（第二个参数）。'
- en: '`painter.drawTextItem(QtCore.QPoint, QtGui.QTextItem)`: This draws a text item
    (the second parameter) at the point with integer values (the first parameter).'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawTextItem(QtCore.QPoint, QtGui.QTextItem)`: 这将在具有整数值（第一个参数）的点绘制文本项（第二个参数）。'
- en: '`painter.drawTextItem(QtCore.QPointF, QtGui.QTextItem)`: This draws a text
    item (the second parameter) at the point with float values (the first parameter).'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawTextItem(QtCore.QPointF, QtGui.QTextItem)`: 这将在具有浮点值（第一个参数）的点绘制文本项（第二个参数）。'
- en: '`painter.drawTextItem(x, y, QtGui.QTextItem)`: This draws a text item (the
    third parameter) beginning at the position according to `x` (*x* axis) and `y` (*y*
    axis).'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawTextItem(x, y, QtGui.QTextItem)`: 这将在根据`x`（*x*轴）和`y`（*y*轴）的位置绘制文本项（第三个参数）。'
- en: '`painter.drawTiledPixmap(QtCore.QRect, QtGui.QPixmap, QtCore.QPoint)`: This
    draws the tiled pixmap (the second parameter) in the rectangle with integer values
    (the first parameter), beginning at the point with integer values (the third parameter).'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawTiledPixmap(QtCore.QRect, QtGui.QPixmap, QtCore.QPoint)`: 这将在具有整数值的矩形（第一个参数）中绘制平铺的位图（第二个参数），从具有整数值的点（第三个参数）开始。'
- en: '`painter.drawTiledPixmap(QtCore.QRectF, QtGui.QPixmap, QtCore.QPointF)`: This
    draws the tiled pixmap (the second parameter) in the rectangle with float values
    (the first parameter), beginning at the point with float values (the third parameter).'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawTiledPixmap(QtCore.QRectF, QtGui.QPixmap, QtCore.QPointF)`: 这将在具有浮点值的矩形（第一个参数）中绘制平铺的位图（第二个参数），从具有浮点值的点（第三个参数）开始。'
- en: '`painter.drawTiledPixmap(x, y, w, h, QtGui.QPixmap, tx, ly)`: This draws the
    tiled pixmap (the fifth parameter) in the rectangle specified, beginning at `x` (*x*
    axis), `y` (*y* axis); with `w` width and `h` (height); and with `tx` (top), and `ly` (left)
    points in the pixmap.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.drawTiledPixmap(x, y, w, h, QtGui.QPixmap, tx, ly)`: 这将在指定的矩形中绘制平铺的位图（第五个参数），从
    `x`（*x* 轴）和 `y`（*y* 轴）开始；宽度为 `w`，高度为 `h`；并且以位图中的 `tx`（顶部）和 `ly`（左侧）点为起点。'
- en: fill
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: fill
- en: 'These are functions that are related to filling with this painter:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与使用此画家填充相关的函数：
- en: '`painter.fillPath(QtGui.QPainterPath, QtGui.QBrush)`: This fills the path specified
    in the first parameter using a brush (the second parameter).'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillPath(QtGui.QPainterPath, QtGui.QBrush)`: 这将使用画笔（第二个参数）填充第一个参数指定的路径。'
- en: '`painter.fillRect(QtCore.QRect, QtCore.Qt.GlobalColor)`: This fills the rectangle
    represented with integer values (the first parameter) with the color specified
    in the second parameter.'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRect, QtCore.Qt.GlobalColor)`: 这将使用第二个参数指定的颜色填充由整数值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRectF, QtCore.Qt.GlobalColor)`: This fills the rectangle
    represented with float values (the first parameter) with the color specified in
    the second parameter.'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRectF, QtCore.Qt.GlobalColor)`: 这将使用第二个参数指定的颜色填充由浮点值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRect, QtGui.QColor)`: This fills the rectangle represented
    with integer values (the first parameter) with the color specified in the second
    parameter.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRect, QtGui.QColor)`: 这将使用第二个参数指定的颜色填充由整数值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRectF, QtGui.QColor)`: This fills the rectangle represented
    with float values (first parameter) with the color specified in the second parameter.'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRectF, QtGui.QColor)`: 这将使用第二个参数指定的颜色填充由浮点值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRect, QtGui.QBrush)`: This fills the rectangle represented
    with integer values (the first parameter) with the brush specified in the second
    parameter.'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRect, QtGui.QBrush)`: 这将使用第二个参数指定的画笔填充由整数值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRectF, QtGui.QBrush)`: This fills the rectangle represented
    with float values (the first parameter) with the brush specified in the second
    parameter.'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRectF, QtGui.QBrush)`: 这将使用第二个参数指定的画笔填充由浮点值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRect, QtGui.QGradient.Preset)`: This fills the rectangle
    represented with integer values (the first parameter) using the preset gradient specified
    in the second parameter.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRect, QtGui.QGradient.Preset)`: 这将使用第二个参数指定的预设渐变填充由整数值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRectF, QtGui.QGradient.Preset)`: This fills the rectangle
    represented with float values (the first parameter) using the preset gradient specified
    in the second parameter.'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRectF, QtGui.QGradient.Preset)`: 这将使用第二个参数指定的预设渐变填充由浮点值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRect, QtCore.Qt.BrushStyle)`: This fills the rectangle
    represented with integer values (the first parameter) with the brush style specified
    in the second parameter.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRect, QtCore.Qt.BrushStyle)`: 这将使用第二个参数指定的画笔样式填充由整数值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(QtCore.QRectF, QtCore.Qt.BrushStyle)`: This fills the rectangle
    represented with float values (the first parameter) with the brush style specified
    in the second parameter.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(QtCore.QRectF, QtCore.Qt.BrushStyle)`: 这将使用第二个参数指定的画笔样式填充由浮点值表示的矩形（第一个参数）。'
- en: '`painter.fillRect(x, y, w, h, QtGui.QGradient.Preset)`: This fills the rectangle
    specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height), using the preset gradient specified in the fifth parameter.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(x, y, w, h, QtGui.QGradient.Preset)`：这用指定的预设渐变填充矩形，从`x`（*x*轴）和`y`（*y*轴）开始；使用`w`（宽度）和`h`（高度），在第五个参数指定的预设渐变中。'
- en: '`painter.fillRect(x, y, w, h, QtCore.Qt.BrushStyle)`: This fills the rectangle
    specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height), using the brush style specified in the fifth parameter.'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(x, y, w, h, QtCore.Qt.BrushStyle)`：这用指定的画刷样式填充矩形，从`x`（*x*轴）和`y`（*y*轴）开始；使用`w`（宽度）和`h`（高度），在第五个参数指定的画刷样式中。'
- en: '`painter.fillRect(x, y, w, h, QtGui.QColor)`: This fills the rectangle specified,
    beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and `h` (height),
    using the color specified in the fifth parameter.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(x, y, w, h, QtGui.QColor)`：这用指定的颜色填充矩形，从`x`（*x*轴）和`y`（*y*轴）开始；使用`w`（宽度）和`h`（高度），在第五个参数指定的颜色中。'
- en: '`painter.fillRect(x, y, w, h, QtGui.QBrush)`: This fills the rectangle specified,
    beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and `h` (height),
    using the brush specified in the fifth parameter.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(x, y, w, h, QtGui.QBrush)`：这用指定的画刷填充矩形，从`x`（*x*轴）和`y`（*y*轴）开始；使用`w`（宽度）和`h`（高度），在第五个参数指定的画刷中。'
- en: '`painter.fillRect(x, y, w, h, QtCore.Qt.GlobalColor)`: This fills the rectangle
    specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height), using the color specified in the fifth parameter.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`painter.fillRect(x, y, w, h, QtCore.Qt.GlobalColor)`：这用指定的颜色填充矩形，从`x`（*x*轴）和`y`（*y*轴）开始；使用`w`（宽度）和`h`（高度），在第五个参数指定的颜色中。'
- en: QPen
  id: totrans-505
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QPen
- en: 'This class provides a means of drawing outlines of shapes and lines with the
    `QPainter` class. The declaration of the pen is as follows:'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 此类通过`QPainter`类提供了绘制形状和线条轮廓的方法。笔的声明如下：
- en: '[PRE4]'
  id: totrans-507
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `QPen` class improves functionality by means of the following functions.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPen`类通过以下函数提高了功能。'
- en: set
  id: totrans-509
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that set the parameters and properties of the pen:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是设置笔的参数和属性的函数：
- en: '`pen.setBrush(QtGui.QBrush)`: This sets the brush specified in the parameter
    that will be used to fill strokes.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setBrush(QtGui.QBrush)`：这设置了参数中指定的画刷，该画刷将用于填充线条。'
- en: '`pen.setCapStyle(QtCore.Qt.PenCapStyle)`: This sets the caps style of the pen
    to the style specified in the parameter. The styles that are available are `QtCore.Qt.SquareCap`,
    `QtCore.Qt.FlatCap`, and `QtCore.Qt.RoundCap`.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setCapStyle(QtCore.Qt.PenCapStyle)`：这设置了笔的帽样式为参数中指定的样式。可用的样式有`QtCore.Qt.SquareCap`、`QtCore.Qt.FlatCap`和`QtCore.Qt.RoundCap`。'
- en: '`pen.setColor(QtGui.QColor)`: This sets the brush color of this pen to the
    color specified in the parameter.'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setColor(QtGui.QColor)`：这设置了此笔的画刷颜色为参数中指定的颜色。'
- en: '`pen.setCosmetic(bool)`: If the parameter is `True`, this sets this pen as
    cosmetic. Cosmetic pens draw the strokes with a constant width, regardless of
    any transformations. Shapes drawn with a cosmetic pen ensure that the outline
    will have the same thickness.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setCosmetic(bool)`：如果参数为`True`，则将此笔设置为装饰性。装饰性笔以恒定宽度绘制线条，不受任何变换的影响。用装饰性笔绘制的形状将确保轮廓具有相同的厚度。'
- en: '`pen.setDashOffset(float)`: This sets the offset specified in the parameter
    for the dash.'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setDashOffset(float)`：这设置了参数中指定的虚线偏移。'
- en: '`pen.setDashPattern([float])`: This sets the dash pattern, specified in the
    parameter, as an iterable of float values and must be `[1.0, 2.0, 3.0, 4.0]`,
    where `1.0` and `3.0` are dashes, and `2.0` and `4.0` are spaces.'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setDashPattern([float])`：这设置了参数中指定的虚线模式，作为浮点值的可迭代对象，必须是`[1.0, 2.0, 3.0,
    4.0]`，其中`1.0`和`3.0`是虚线，`2.0`和`4.0`是空格。'
- en: '`pen.setJoinStyle(QtCore.Qt.PenJoinStyle)`: This sets the join style of the
    pen to the style specified in the parameter. The styles that are available are `QtCore.Qt.BevelJoin`,
    `QtCore.Qt.MiterJoin`, and `QtCore.Qt.RoundJoin`.'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setJoinStyle(QtCore.Qt.PenJoinStyle)`：这设置了笔的连接样式为参数中指定的样式。可用的样式有`QtCore.Qt.BevelJoin`、`QtCore.Qt.MiterJoin`和`QtCore.Qt.RoundJoin`。'
- en: '`pen.setMiterLimit(float)`: This sets the pen''s miter limit.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setMiterLimit(float)`：这设置了笔的斜接限制。'
- en: '`pen.setStyle(QtCore.Qt.PenStyle)`: This sets the style for this pen. The styles
    that are available are as follows:'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setStyle(QtCore.Qt.PenStyle)`：这设置了此笔的样式。可用的样式如下：'
- en: '`QtCore.Qt.SolidLine`: Plain line.'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.SolidLine`：实线。'
- en: '`QtCore.Qt.DashLine`: Separated dashes.'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DashLine`：分离的虚线。'
- en: '`QtCore.Qt.DotLine`: Separated dots.'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DotLine`：分离的点。'
- en: '`QtCore.Qt.DashDotLine`: Dots and dashes.'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DashDotLine`：点划线。'
- en: '`QtCore.Qt.DashDotDotLine`: One dash, two dots, one dash, two dots.'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DashDotDotLine`: 一个破折号，两个点，一个破折号，两个点。'
- en: '`QtCore.Qt.CustomDashLine`: Will be the custom pattern that defined using `setDashPattern()`.'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.CustomDashLine`: 将是使用 `setDashPattern()` 定义的定制模式。'
- en: '`QtCore.Qt.NoPen`: No line.'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.NoPen`: 无线条。'
- en: '`pen.setWidth(int)`: This sets the width specified in the parameter as an integer
    value, and is used as the width of pen.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setWidth(int)`: 这将参数中指定的宽度作为整数值设置，并用作画笔的宽度。'
- en: '`pen.setWidth(float)`: This sets the width specified in the parameter as a
    float value, and is used as the width of pen.'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.setWidth(float)`: 这将参数中指定的宽度作为浮点值设置，并用作画笔的宽度。'
- en: is
  id: totrans-529
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'These are functions that return a Boolean value (`bool`) related to the pen:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与画笔相关的函数，返回一个布尔值（`bool`）：
- en: '`pen.isCosmetic()`: This returns `True` if this pen is cosmetic.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.isCosmetic()`: 如果此画笔是装饰性的，则返回 `True`。'
- en: '`pen.isSolid()`: This returns `True` if this is a solid fill pen.'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.isSolid()`: 如果这是一个实心填充画笔，则返回 `True`。'
- en: functional
  id: totrans-533
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values for
    this pen:'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前画笔值的返回值相关的函数：
- en: '`pen.brush()`: This returns the brush of the `QtGui.QBrush` type, and is used
    to fill strokes.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.brush()`: 这返回 `QtGui.QBrush` 类型的画笔，并用于填充线条。'
- en: '`pen.capStyle()`: This returns the cap style of the `QtCore.Qt.PenCapStyle`
    type, as used with this pen.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.capStyle()`: 这返回与画笔一起使用的 `QtCore.Qt.PenCapStyle` 类型的端点样式。'
- en: '`pen.color()`: This returns the color of the `QtGui.QColor` type, as used with
    this pen''s brush.'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.color()`: 这返回与画笔的刷子一起使用的 `QtGui.QColor` 类型的颜色。'
- en: '`pen.dashOffset()`: This returns the pen''s dash offset.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.dashOffset()`: 这返回画笔的虚线偏移量。'
- en: '`pen.dashPattern()`: This returns the pen''s dash pattern.'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.dashPattern()`: 这返回画笔的虚线模式。'
- en: '`pen.joinStyle()`: This returns the join style of the `QtCore.Qt.PenJoinStyle`
    type, as used with this pen.'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.joinStyle()`: 这返回 `QtCore.Qt.PenJoinStyle` 类型的连接样式，如与该画笔一起使用。'
- en: '`pen.miterLimit()`: This returns the pen''s miter limit.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.miterLimit()`: 这返回画笔的斜接限制。'
- en: '`pen.style()`: This returns the style of this pen.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.style()`: 这返回此画笔的样式。'
- en: '`pen.swap(QtGui.QPen)`: This swaps the pen specified in the parameter with
    this pen.'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.swap(QtGui.QPen)`: 这将参数中指定的画笔与此画笔交换。'
- en: '`pen.width()`: This returns the width of this pen as an integer value.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.width()`: 这返回此画笔的宽度作为整数值。'
- en: '`pen.widthF()`: This returns the width of this pen as a float value.'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: '`pen.widthF()`: 这返回此画笔的宽度作为浮点值。'
- en: QBrush
  id: totrans-546
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QBrush
- en: 'The brush describes the fill pattern of shapes that are drawn using the `QPainter`
    class. The declaration of the brush is as follows:'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 画笔描述了使用 `QPainter` 类绘制的形状的填充模式。画笔的声明如下：
- en: '[PRE5]'
  id: totrans-548
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `QBrush` class improves functionality by means of the following functions.
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBrush` 类通过以下函数提高了功能性。'
- en: set
  id: totrans-550
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions related to setting parameters and properties in relation
    to the brush:'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置画笔相关参数和属性的函数：
- en: '`brush.setColor(QtGui.QColor)`: This sets the color specified in the parameter
    for this brush.'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.setColor(QtGui.QColor)`: 这将设置参数中指定的此画笔的颜色。'
- en: '`brush.setColor(QtCore.Qt.GlobalColor)`: This sets the global color specified
    in the parameter for this brush.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.setColor(QtCore.Qt.GlobalColor)`: 这将设置此画笔参数中指定的全局颜色。'
- en: '`brush.setStyle(QtCore.Qt.BrushStyle)`: This sets the style specified in the
    parameter for this brush. The available brush styles are as follows:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.setStyle(QtCore.Qt.BrushStyle)`: 这将设置参数中指定的此画笔的样式。可用的画笔样式如下：'
- en: '`QtCore.Qt.NoBrush`—`0`: No brush.'
  id: totrans-555
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.NoBrush`—`0`: 无画笔。'
- en: '`QtCore.Qt.SolidPattern`—`1`: Uniform brush.'
  id: totrans-556
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.SolidPattern`—`1`: 均匀画笔。'
- en: '`QtCore.Qt.Dense1Pattern`—`2`: Extremely dense brush.'
  id: totrans-557
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense1Pattern`—`2`: 非常密集的画笔。'
- en: '`QtCore.Qt.Dense2Pattern`—`3`: Very dense brush.'
  id: totrans-558
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense2Pattern`—`3`: 非常密集的画笔。'
- en: '`QtCore.Qt.Dense3Pattern`—`4`: Somewhat dense brush.'
  id: totrans-559
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense3Pattern`—`4`: 有点密集的画笔。'
- en: '`QtCore.Qt.Dense4Pattern`—`5`: Half dense brush.'
  id: totrans-560
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense4Pattern`—`5`: 半密集的画笔。'
- en: '`QtCore.Qt.Dense5Pattern`—`6`: Somewhat sparse brush.'
  id: totrans-561
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense5Pattern`—`6`: 有点稀疏的画笔。'
- en: '`QtCore.Qt.Dense6Pattern`—`7`: Very sparse brush.'
  id: totrans-562
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense6Pattern`—`7`: 非常稀疏的画笔。'
- en: '`QtCore.Qt.Dense7Pattern`—`8`: Extremely sparse brush.'
  id: totrans-563
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.Dense7Pattern`—`8`: 非常稀疏的画笔。'
- en: '`QtCore.Qt.HorPattern`—`9`: Horizontal.'
  id: totrans-564
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.HorPattern`—`9`: 水平。'
- en: '`QtCore.Qt.VerPattern`—`10`: Vertical.'
  id: totrans-565
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.VerPattern`—`10`: 垂直。'
- en: '`QtCore.Qt.CrossPattern`—`11`: Crossing horizontal/vertical.'
  id: totrans-566
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.CrossPattern`—`11`: 横向/纵向交叉。'
- en: '`QtCore.Qt.BDiagPattern`—`12`: Backward diagonal.'
  id: totrans-567
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.BDiagPattern`—`12`: 反向对角。'
- en: '`QtCore.Qt.FDiagPattern`—`13`: Forward diagonal.'
  id: totrans-568
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.FDiagPattern`—`13`: 正向对角。'
- en: '`QtCore.Qt.DiagCrossPattern`—`14`: Crossing diagonal.'
  id: totrans-569
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DiagCrossPattern`—`14`: 对角交叉。'
- en: '`QtCore.Qt.LinearGradientPattern`—`15`: Linear gradient brush.'
  id: totrans-570
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.LinearGradientPattern`—`15`: 线性渐变画笔。'
- en: '`QtCore.Qt.RadialGradientPattern`—`16`: Radial gradient brush.'
  id: totrans-571
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.RadialGradientPattern`—`16`: 径向渐变画笔。'
- en: '`QtCore.Qt.ConicalGradientPattern`—`17`: Conical gradient brush.'
  id: totrans-572
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.ConicalGradientPattern`—`17`: 锥形渐变画笔。'
- en: '`QtCore.Qt.TexturePattern`—`24`: Custom.'
  id: totrans-573
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.TexturePattern`—`24`: 自定义。'
- en: '`brush.setTexture(QtGui.QPixmap)`: This sets the pixmap specified in the parameter
    to a brush pixmap.'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.setTexture(QtGui.QPixmap)`: 这将参数中指定的位图设置为画笔位图。'
- en: '`brush.setTextureImage(QtGui.QImage)`: This sets the image specified in the
    parameter to a brush image.'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.setTextureImage(QtGui.QImage)`: 这将参数中指定的图像设置为画笔图像。'
- en: '`brush.setTransform(QtGui.QTransform)`: This sets the matrix specified in the
    parameter as an explicit transformation matrix on the brush.'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.setTransform(QtGui.QTransform)`: 这将参数中指定的矩阵作为显式变换矩阵设置在画笔上。'
- en: is
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'This function returns a Boolean value (`bool`) related to the brush:'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与画笔相关的布尔值 (`bool`)：
- en: '`brush.isOpaque()`: This returns `True` if the brush is fully opaque.'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.isOpaque()`: 如果画笔完全不透明，则返回 `True`。'
- en: functional
  id: totrans-580
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the brush:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与画笔当前值返回相关的函数：
- en: '`brush.color()`: This returns the color of the `QtGui.QColor` type, as used
    with this brush.'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.color()`: 这返回与该画笔一起使用的 `QtGui.QColor` 类型的颜色。'
- en: '`brush.gradient()`: This returns the gradient of the `QtGui.QGradient` type,
    as used with this brush.'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.gradient()`: 这返回与该画笔一起使用的 `QtGui.QGradient` 类型的渐变。'
- en: '`brush.style()`: This returns the style of the `QtCore.Qt.BrushStyle` type,
    as used with this brush.'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.style()`: 这返回与该画笔一起使用的 `QtCore.Qt.BrushStyle` 类型的样式。'
- en: '`brush.swap(QtGui.QBrush)`: This swaps this brush with the brush specified
    in the parameter'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.swap(QtGui.QBrush)`: 这将此画笔与参数中指定的画笔交换。'
- en: '`brush.texture()`: This returns the custom brush pattern of the `QtGui.QPixmap`
    type.'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.texture()`: 这返回 `QtGui.QPixmap` 类型的自定义画笔图案。'
- en: '`brush.textureImage()`: This returns the custom brush pattern of the `QtGui.QImage`
    type.'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.textureImage()`: 这返回 `QtGui.QImage` 类型的自定义画笔图案。'
- en: '`brush.transform()`: This returns the current transformation matrix of the
    `QtGui.QTransform` type, as used with this brush.'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '`brush.transform()`: 这返回与该画笔一起使用的 `QtGui.QTransform` 类型的当前变换矩阵。'
- en: QGradient
  id: totrans-589
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGradient
- en: 'This class is used together with the `QBrush` style for implementing simple
    gradients in the graphics creation. The declaration syntax is as follows:'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 此类与 `QBrush` 风格一起使用，用于在图形创建中实现简单的渐变。声明语法如下：
- en: '[PRE6]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `QGradient` class improves functionality by means of the following functions.
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGradient` 类通过以下函数提高功能。'
- en: set
  id: totrans-593
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting parameters and properties in
    relation to the gradient:'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与渐变相关的参数和属性相关的函数：
- en: '`gradient.setColorAt(float, QtGui.QColor)`: This creates a stop point at the
    position specified in the first parameter (`0.0`–`1.0`) with the color specified
    in the second parameter.'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.setColorAt(float, QtGui.QColor)`: 这在第一个参数指定的位置创建一个停止点（`0.0`–`1.0`），第二个参数指定颜色。'
- en: '`gradient.setCoordinateMode(QtGui.QGradient.CoordinateMode)`: This sets the
    coordinate mode specified in the parameter for this gradient. The available parameters
    are as follows:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.setCoordinateMode(QtGui.QGradient.CoordinateMode)`: 这设置此渐变的参数中指定的坐标模式。可用的参数如下：'
- en: '`QtGui.QGradient.LogicalMode`—`0`: Coordinates are specified in a logical space.'
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.LogicalMode`—`0`: 坐标在逻辑空间中指定。'
- en: '`QtGui.QGradient.StretchToDeviceMode`—`1`: Coordinates are relative to the
    rectangle of the paint device.'
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.StretchToDeviceMode`—`1`: 坐标相对于绘图设备的矩形。'
- en: '`QtGui.QGradient.ObjectMode`—`3`: Coordinates are relative to the rectangle
    of the object.'
  id: totrans-599
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.ObjectMode`—`3`: 坐标相对于对象的矩形。'
- en: '`gradient.setSpread(QtGui.QGradient.Spread)`: This sets the spread method specified
    in the parameter for this gradient. The available spreads are as follows:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.setSpread(QtGui.QGradient.Spread)`: 这设置此渐变的参数中指定的扩散方法。可用的扩散方法如下：'
- en: '`QtGui.QGradient.PadSpread`—`0`: Filled with the closest stop color.'
  id: totrans-601
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.PadSpread`—`0`: 用最接近的停止颜色填充。'
- en: '`QtGui.QGradient.ReflectSpread`—`1`: Reflected outside the gradient area.'
  id: totrans-602
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.ReflectSpread`—`1`: 在渐变区域外反射。'
- en: '`QtGui.QGradient.RepeatSpread`—`2`: Repeated outside the gradient area.'
  id: totrans-603
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.RepeatSpread`—`2`: 在渐变区域外重复。'
- en: '`gradient.setStops([float])`: This replaces the current set of stop points
    with the stop points specified in the parameter. The points must be sorted with
    the lowest point first, and in the range of `0.0` to `1.0`.'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.setStops([float])`: 这用参数中指定的停止点替换当前设置的停止点。点必须按从最低点开始的顺序排序，并且在 `0.0`
    到 `1.0` 的范围内。'
- en: functional
  id: totrans-605
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the gradient:'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与梯度当前值返回相关的函数：
- en: '`gradient.coordinateMode()`: This returns the gradient''s coordinate mode of
    the `QtGui.QGradient.CoordinateMode` type.'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.coordinateMode()`: 这返回梯度坐标模式，类型为 `QtGui.QGradient.CoordinateMode`。'
- en: '`gradient.spread()`: This returns the spread method of the `QtGui.QGradient.Spread`
    type used with this gradient.'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.spread()`: 这返回与该梯度一起使用的 `QtGui.QGradient.Spread` 类型的扩散方法。'
- en: '`gradient.stops()`: This returns the stop points used with this gradient.'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.stops()`: 这返回与该梯度一起使用的停止点。'
- en: '`gradient.type()`: This returns the gradient type. The types are as follows:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '`gradient.type()`: 这返回梯度类型。类型如下：'
- en: '`QtGui.QGradient.LinearGradient`—`0`: Colors between the start and end.'
  id: totrans-611
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.LinearGradient`—`0`: 起点和终点之间的色彩。'
- en: '`QtGui.QGradient.RadialGradient`—`1`: Colors between a point and its end.'
  id: totrans-612
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.RadialGradient`—`1`: 点与其终点之间的色彩。'
- en: '`QtGui.QGradient.ConicalGradient`—`2`: Colors around a center.'
  id: totrans-613
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.ConicalGradient`—`2`: 中心周围的色彩。'
- en: '`QtGui.QGradient.NoGradient`—`3`: No gradients.'
  id: totrans-614
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QGradient.NoGradient`—`3`: 无渐变。'
- en: QLinearGradient
  id: totrans-615
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QLinearGradient
- en: 'This is a subclass of the `QGradient` class and represents the linear gradient
    that fills colors between the start and end points. The declaration is as follows:'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `QGradient` 类的子类，表示在起点和终点之间填充颜色的线性梯度。声明如下：
- en: '[PRE7]'
  id: totrans-617
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '`QLinearGradient` inherits from the `QGradient` class and improves functionality
    by means of the following functions.'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '`QLinearGradient` 从 `QGradient` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-619
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting parameters and properties in
    relation to the linear gradient:'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与线性梯度相关的参数和属性相关的函数：
- en: '`linear_gradient.setFinalStop(QtCore.QPointF)`: This sets the final stop point
    with float values specified in the parameter for this linear gradient in logical
    coordinates.'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_gradient.setFinalStop(QtCore.QPointF)`: 这使用参数中指定的浮点值在逻辑坐标中设置线性梯度的最终停止点。'
- en: '`linear_gradient.setFinalStop(x, y)`: This sets the final stop point with float
    values at the point according to the `x` (*x* axis) and `y` (*y* axis) positions
    of this linear gradient in logical coordinates.'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_gradient.setFinalStop(x, y)`: 这根据线性梯度在逻辑坐标中的`x` (*x* 轴) 和 `y` (*y*
    轴) 位置，使用浮点值设置最终停止点。'
- en: '`linear_gradient.setStart(QtCore.QPointF)`: This sets the start point with
    float values specified in the parameter for this linear gradient in logical coordinates'
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_gradient.setStart(QtCore.QPointF)`: 这使用参数中指定的浮点值在逻辑坐标中设置线性梯度的起点。'
- en: '`linear_gradient.setStart(x, y)`: This sets the start point with float values
    at the point according to the `x` (*x* axis) and `y` (*y* axis) positions of this
    linear gradient in logical coordinates'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_gradient.setStart(x, y)`: 这根据线性梯度在逻辑坐标中的`x` (*x* 轴) 和 `y` (*y* 轴) 位置，使用浮点值设置起点。'
- en: functional
  id: totrans-625
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the linear gradient:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与线性梯度当前值返回相关的函数：
- en: '`linear_gradient.finalStop()`: This returns the final stop point of the `QtCore.QPointF`
    type, in logical coordinates, for this linear gradient.'
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_gradient.finalStop()`: 这返回线性梯度的最终停止点，类型为 `QtCore.QPointF`，在逻辑坐标中。'
- en: '`linear_gradient.start()`: This returns the start point of the `QtCore.QPointF`
    type, in logical coordinates, for this linear gradient.'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: '`linear_gradient.start()`: 这返回线性梯度的起点，类型为 `QtCore.QPointF`，在逻辑坐标中。'
- en: QRadialGradient
  id: totrans-629
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QRadialGradient
- en: 'This is a subclass of the `QGradient` class and represents the radial gradient
    that fills colors between the focal point and its end points. The declaration
    is as follows:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 `QGradient` 类的子类，表示在焦点和其端点之间填充颜色的径向梯度。声明如下：
- en: '[PRE8]'
  id: totrans-631
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`QRadialGradient` inherits from the `QGradient` class and improves functionality
    by means of the following functions.'
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: '`QRadialGradient` 从 `QGradient` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-633
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting parameters and properties in
    relation to the radial gradient:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与径向梯度相关的参数和属性相关的函数：
- en: '`radial_gradient.setCenter(QtCore.QPointF)`: This sets the center point with
    float values specified in the parameter for this radial gradient in logical coordinates.'
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setCenter(QtCore.QPointF)`: 这将使用参数中指定的浮点值设置中心点，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.setCenter(x, y)`: This sets the center with float values at
    the point according to the `x` (*x* axis) and `y` (*y* axis) positions of this
    radial gradient in logical coordinates.'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setCenter(x, y)`: 这将根据逻辑坐标中的`x`（*x*轴）和`y`（*y*轴）位置，使用浮点值设置中心点。'
- en: '`radial_gradient.setCenterRadius(float)`: This sets the center radius, in logical
    coordinates, for this radial gradient.'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setCenterRadius(float)`: 这将设置中心半径，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.setFocalPoint(QtCore.QPointF)`: This sets the focal point
    with float values specified in the parameter for this radial gradient in logical
    coordinates.'
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setFocalPoint(QtCore.QPointF)`: 这将使用参数中指定的浮点值设置焦点，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.setFocalPoint(x, y)`: This sets the focal point with float
    values at the `x` (*x* axis) and `y` (*y* axis) positions for this radial gradient
    in logical coordinates.'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setFocalPoint(x, y)`: 这将使用浮点值在`x`（*x*轴）和`y`（*y*轴）位置设置焦点，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.setFocalRadius(float)`: This sets the focal radius specified
    in the parameter, in logical coordinates, for this radial gradient.'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setFocalRadius(float)`: 这将设置参数中指定的焦点半径，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.setRadius(float)`: This sets the radius specified in the parameter,
    in logical coordinates, for this radial gradient.'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.setRadius(float)`: 这将设置参数中指定的半径，在逻辑坐标中，对于这个径向渐变。'
- en: functional
  id: totrans-642
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the radial gradient:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与径向渐变当前值返回相关的函数：
- en: '`radial_gradient.center()`: This returns the center of the `QtCore.QPointF`
    type, in logical coordinates, for this radial gradient.'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.center()`: 这返回`QtCore.QPointF`类型的中心，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.centerRadius()`: This returns the center radius as a float
    value, in logical coordinates, for this radial gradient.'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.centerRadius()`: 这返回中心半径作为一个浮点值，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.focalPoint()`: This returns the focal point of the `QtCore.QPointF`
    type, in logical coordinates, for this radial gradient.'
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.focalPoint()`: 这返回`QtCore.QPointF`类型的焦点，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.focalRadius()`: This returns the focal radius as a float value,
    in logical coordinates, for this radial gradient.'
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.focalRadius()`: 这返回焦点半径作为一个浮点值，在逻辑坐标中，对于这个径向渐变。'
- en: '`radial_gradient.radius()`: This returns the radius as a float value, in logical
    coordinates, for this radial gradient.'
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: '`radial_gradient.radius()`: 这返回半径作为一个浮点值，在逻辑坐标中，对于这个径向渐变。'
- en: QConicalGradient
  id: totrans-649
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QConicalGradient
- en: 'This is a subclass of the `QGradient` class and represents the conical gradient
    that fills colors around a center point. The declaration is as follows:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个`QGradient`类的子类，表示围绕中心点填充颜色的锥形渐变。声明如下：
- en: '[PRE9]'
  id: totrans-651
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`QConicalGradient` inherits from the `QGradient` class and improves functionality
    by means of the following functions.'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: '`QConicalGradient`从`QGradient`类继承，并通过以下函数增强了功能。'
- en: set
  id: totrans-653
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions related to setting parameters and properties in relation
    to the conical gradient:'
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置锥形渐变参数和属性相关的函数：
- en: '`conical_gradient.setAngle(float)`: This sets the start angle specified in
    the parameter, in logical coordinates, for this conical gradient.'
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: '`conical_gradient.setAngle(float)`: 这将设置参数中指定的起始角度，在逻辑坐标中，对于这个锥形渐变。'
- en: '`conical_gradient.setCenter(QtCore.QPointF)`: This sets the center point with
    float values specified in the parameter for this conical gradient in logical coordinates.'
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: '`conical_gradient.setCenter(QtCore.QPointF)`: 这将使用参数中指定的浮点值设置中心点，在逻辑坐标中，对于这个锥形渐变。'
- en: '`conical_gradient.setCenter(x, y)`: This sets the center with float values
    at the point according to the `x` (*x* axis) and `y` (y axis) positions for this
    conical gradient in logical coordinates.'
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: '`conical_gradient.setCenter(x, y)`: 这将根据逻辑坐标中的`x`（*x*轴）和`y`（y轴）位置，使用浮点值设置中心点，对于这个锥形渐变。'
- en: functional
  id: totrans-658
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the conical gradient:'
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与锥形渐变当前值返回相关的函数：
- en: '`conical_gradient.angle()`: This returns the start angle as a float value,
    in logical coordinates, for this conical gradient.'
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: '`conical_gradient.angle()`: 这返回此圆锥渐变的起始角度，作为逻辑坐标中的浮点值。'
- en: '`conical_gradient.center()`: This returns the center of the `QtCore.QPointF`
    type, in logical coordinates, for this conical gradient.'
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: '`conical_gradient.center()`: 这返回此圆锥渐变的 `QtCore.QPointF` 类型的中心，在逻辑坐标中。'
- en: Images
  id: totrans-662
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图片
- en: The Qt library provides a complete set of classes for working with different
    types of images. All the most popular formats for working with images are supported.
    The principal ones are described here.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 库提供了一套完整的类，用于处理不同类型的图像。所有最流行的图像处理格式都得到了支持。主要格式在此描述。
- en: QPicture
  id: totrans-664
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QPicture
- en: 'This class represents the paint device that replays and records the commands
    of the `QPainter` class. With this class, the painting commands of `QPainter`
    can be serialized to the I/O device in a platform-independent format and represented
    as a picture. This is used to save painting pictures and to load it. The picture
    will be saved in a file with a name such as `filename.pic` for later use. The
    declaration of this class is as follows:'
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: 此类表示重放和记录 `QPainter` 类命令的绘图设备。使用此类，可以将 `QPainter` 的绘图命令序列化为平台无关的格式，并作为图片表示。这用于保存绘图图片和加载它。图片将以类似于
    `filename.pic` 的名称保存到文件中，以供以后使用。此类的声明如下：
- en: '[PRE10]'
  id: totrans-666
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`QPicture` inherits from the `QPaintDevice` class and improves functionality
    by means of the following functions.'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPicture` 类继承自 `QPaintDevice` 类，并通过以下函数增强了功能。'
- en: set
  id: totrans-668
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting parameters and properties in
    relation to the picture:'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与图片相关的设置参数和属性的函数：
- en: '`picture.setBoundingRect(QtCore.QRect)`: This sets the bounding rectangle specified
    in the parameter for this picture.'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.setBoundingRect(QtCore.QRect)`: 这为此图片设置参数中指定的边界矩形。'
- en: '`picture.setData(bytes)`: This sets the data for this picture from the data
    specified in the parameter. It also copies the input data.'
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.setData(bytes)`: 这将从参数中指定的数据设置此图片的数据。它还会复制输入数据。'
- en: is
  id: totrans-672
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'This function returns a Boolean value (`bool`) related to the picture:'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与图片相关的布尔值 (`bool`)：
- en: '`picture.isNull()`: This returns `True` if this picture does not contain any
    data.'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.isNull()`: 如果此图片不包含任何数据，则返回 `True`。'
- en: functional
  id: totrans-675
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the picture, or functional instruments:'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前图片值的返回或功能仪器相关的函数：
- en: '`picture.boundingRect()`: This returns the bounding rectangle of the `QtCore.QRect`
    type for this picture.'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.boundingRect()`: 这返回此图片的 `QtCore.QRect` 类型的边界矩形。'
- en: '`picture.data()`: This returns a pointer to the data of this picture.'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.data()`: 这返回指向此图片数据的指针。'
- en: '`picture.inputFormats()`: This returns a list of formats that are supported
    for picture input.'
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.inputFormats()`: 这返回支持图片输入的格式列表。'
- en: '`picture.load(r"/Path/To/filename.pic")`: This loads a picture from the file
    specified in the parameter, and returns `True` if successful.'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.load(r"/Path/To/filename.pic")`: 这从参数中指定的文件加载图片，如果成功则返回 `True`。'
- en: '`picture.outputFormats()`: This returns a list of formats that are supported
    for picture output.'
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.outputFormats()`: 这返回支持图片输出的格式列表。'
- en: '`picture.pictureFormat(r"/Path/To/filename.pic")`: This returns the format
    of the picture specified in the parameter.'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.pictureFormat(r"/Path/To/filename.pic")`: 这返回参数中指定的图片的格式。'
- en: '`picture.play(QtGui.QPainter)`: This replays the picture with the painter specified
    in the parameter, and returns `True` if successful.'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.play(QtGui.QPainter)`: 这使用参数中指定的画家重放图片，如果成功则返回 `True`。'
- en: '`picture.save(r"/Path/To/filename.pic")`: This saves the picture created to
    the file specified in the parameter, and returns `True` if successful.'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.save(r"/Path/To/filename.pic")`: 这将保存创建的图片到参数中指定的文件，如果成功则返回 `True`。'
- en: '`picture.size()`: This returns the picture''s data size.'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.size()`: 这返回图片的数据大小。'
- en: '`picture.swap(QtGui.QPicture)`: This swaps this picture with the picture specified
    in the parameter.'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '`picture.swap(QtGui.QPicture)`: 这与此参数指定的图片交换。'
- en: QPixmap
  id: totrans-687
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QPixmap
- en: 'The `QPixmap` class provides a way to work with pixel mapped data. Pixmap allows
    a pixel to be any color. It is an off-screen representation of the images and
    can be used for direct pixel access and manipulations with them. The declaration
    of this class is as follows:'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPixmap` 类提供了一种处理像素映射数据的方法。位图允许像素为任何颜色。它是图像的离屏表示，可用于直接访问和操作像素。此类的声明如下：'
- en: '[PRE11]'
  id: totrans-689
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '`QPixmap` inherits from the `QPaintDevice` class and improves functionality
    by means of the following functions.'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '`QPixmap` 从 `QPaintDevice` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-691
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting parameters and properties in
    relation to the pixmap:'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与位图相关的参数和属性相关的函数：
- en: '`pixmap.setDevicePixelRatio(float)`: This sets the device pixel ratio specified
    in the parameter for this pixmap. It represents the ratio between pixmap pixels
    and device-independent pixels.'
  id: totrans-693
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixmap.setDevicePixelRatio(float)`: 这将指定参数中指定的设备像素比率应用于此位图。它表示位图像素与设备无关像素之间的比率。'
- en: '`pixmap.setMask(QtGui.QBitmap)`: This sets the mask bitmap specified in the
    parameter.'
  id: totrans-694
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pixmap.setMask(QtGui.QBitmap)`: 这设置参数中指定的掩码位图。'
- en: is/has
  id: totrans-695
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: is/has
- en: 'These are functions that return a Boolean value (`bool`) related to the pixmap
    states:'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与位图状态相关的返回布尔值（`bool`）的函数：
- en: '`pixmap.hasAlpha()`: This returns `True` if it has an alpha channel or mask
    for this pixmap.'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.hasAlpha()`: 如果它为此位图具有 alpha 通道或掩码，则返回 `True`。'
- en: '`pixmap.hasAlphaChannel()`: This returns `True` if it has a format that respects
    the alpha channel for this pixmap.'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.hasAlphaChannel()`: 如果它为此位图具有尊重 alpha 通道的格式，则返回 `True`。'
- en: '`pixmap.isNull()`: This returns `True` if this pixmap is `null` (no data).'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.isNull()`: 如果此位图是 `null`（无数据），则返回 `True`。'
- en: '`pixmap.isQBitmap()`: This returns `True` if this is a `QtGui.QBitmap` type.'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.isQBitmap()`: 如果这是一个 `QtGui.QBitmap` 类型，则返回 `True`。'
- en: functional
  id: totrans-701
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the current values of the pixmap, or
    to functional instruments:'
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与位图当前值或功能仪器相关的函数：
- en: '`pixmap.cacheKey()`: This returns the key as an identifier of this pixmap.'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.cacheKey()`: 这返回作为此位图标识符的键。'
- en: '`pixmap.convertFromImage(QtGui.QImage, QtCore.Qt.ImageConversionFlags)`: This
    replaces the pixmap data of the image (the first parameter) with the conversion
    specified in flags (the second parameter). The available conversion flags are `QtCore.Qt.AutoColor`,
    `QtCore.Qt.ColorOnly`, and `QtCore.Qt.MonoOnly` (monochrome).'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.convertFromImage(QtGui.QImage, QtCore.Qt.ImageConversionFlags)`: 这用标志（第二个参数）中指定的转换替换图像（第一个参数）的位图数据。可用的转换标志有
    `QtCore.Qt.AutoColor`、`QtCore.Qt.ColorOnly` 和 `QtCore.Qt.MonoOnly`（单色）。'
- en: '`pixmap.copy(QtCore.QRect)`: This returns the deep copy of the pixmap subset
    of the `QtGui.QPixmap` type for the rectangle specified in the parameter.'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.copy(QtCore.QRect)`: 这返回指定参数中矩形的 `QtGui.QPixmap` 类型位图子集的深度副本。'
- en: '`pixmap.copy(x, y, w, h)`: This returns the deep copy of the pixmap subset
    of the `QtGui.QPixmap` type for the rectangle specified, beginning at `x` (*x*
    axis) and `y` (*y* axis); with `w` (width) and `h` (height).'
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.copy(x, y, w, h)`: 这返回指定矩形的 `QtGui.QPixmap` 类型位图子集的深度副本，从 `x`（x 轴）和
    `y`（y 轴）开始；具有 `w`（宽度）和 `h`（高度）。'
- en: '`pixmap.createHeuristicMask(bool)`: If this parameter is `True`, it creates
    the heuristic mask of the `QtGui.QBitmap` type for this pixmap.'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.createHeuristicMask(bool)`: 如果此参数为 `True`，则为此位图创建 `QtGui.QBitmap` 类型的启发式掩码。'
- en: '`pixmap.createMaskFromColor(QtGui.QColor, QtCore.Qt.MaskMode)`: This creates
    and returns the mask of the `QtGui.QBitmap` type for this pixmap. The mask will
    be based on the color (the first parameter) and relative to the mask mode (the
    second parameter).'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.createMaskFromColor(QtGui.QColor, QtCore.Qt.MaskMode)`: 这为此位图创建并返回
    `QtGui.QBitmap` 类型的掩码。掩码将基于颜色（第一个参数）并相对于掩码模式（第二个参数）。'
- en: '`pixmap.defaultDepth()`: This returns the pixmap depth used by default with
    this application.'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.defaultDepth()`: 这返回此应用程序默认使用的位图深度。'
- en: '`pixmap.depth()`: This returns the pixmap depth (**bits per pixel** (**bpp**)
    or bit planes).'
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.depth()`: 这返回位图的深度（每像素位数（bpp）或位平面）。'
- en: '`pixmap.detach()`: This detaches this pixmap from the shared data of this pixmap.'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.detach()`: 这将此位图从此位图的共享数据中分离出来。'
- en: '`pixmap.devicePixelRatio()`: This returns the ratio between device pixels and
    device-independent pixels.'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.devicePixelRatio()`: 这返回设备像素与设备无关像素之间的比率。'
- en: '`pixmap.fill(QtGui.QColor)`: This fills this pixmap with colors specified in
    the parameter.'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.fill(QtGui.QColor)`: 这用参数中指定的颜色填充此位图。'
- en: '`pixmap.fromImage(QtGui.QImage, QtCore.Qt.ImageConversionFlags)`: This converts
    the image (the first parameter) into the pixmap using flags (the second parameter).'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.fromImage(QtGui.QImage, QtCore.Qt.ImageConversionFlags)`: 这使用标志（第二个参数）将图像（第一个参数）转换为位图。'
- en: '`pixmap.fromImageReader(QtGui.QImageReader, QtCore.Qt.ImageConversionFlags)`:
    This creates the pixmap from the image reader (the first parameter) directly using
    flags (the second parameter).'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.fromImageReader(QtGui.QImageReader, QtCore.Qt.ImageConversionFlags)`:
    这直接使用标志（第二个参数）从图像读取器（第一个参数）创建位图。'
- en: '`pixmap.load(r"/Path/To/filename.png", str, QtCore.Qt.ImageConversionFlags)`:
    This loads a pixmap from the file (the first parameter) with the format (the second
    parameter) and flags (the third parameter).'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.load(r"/Path/To/filename.png", str, QtCore.Qt.ImageConversionFlags)`:
    这从文件（第一个参数）加载位图，使用格式（第二个参数）和标志（第三个参数）。'
- en: '`pixmap.loadFromData(QtCore.QByteArray, str, QtCore.Qt.ImageConversionFlags)`:
    This loads a pixmap from the binary data (the first parameter) with the format
    (the second parameter) and flags (the third parameter).'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.loadFromData(QtCore.QByteArray, str, QtCore.Qt.ImageConversionFlags)`:
    这从二进制数据（第一个参数）加载位图，使用格式（第二个参数）和标志（第三个参数）。'
- en: '`pixmap.mask()`: This extracts the bitmap mask from the alpha channel of the
    pixmap.'
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.mask()`: 这从位图的alpha通道中提取位图遮罩。'
- en: '`pixmap.rect()`: This returns the enclosing rectangle of this pixmap.'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.rect()`: 这返回此位图的包围矩形。'
- en: '`pixmap.save(r"/Path/To/filename.png", str, int)`: This saves the pixmap to
    the file (the first parameter) with the format (the second parameter) and quality
    factor (the third parameter). The quality factor must be in the range of `0` to
    `100`, or `-1` (the default settings).'
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.save(r"/Path/To/filename.png", str, int)`: 这将位图保存到文件（第一个参数），使用格式（第二个参数）和品质因子（第三个参数）。品质因子必须在`0`到`100`之间，或者为`-1`（默认设置）。'
- en: '`pixmap.scaled(QtCore.QSize, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This scales this pixmap to the size (the first parameter) with the aspect ratio
    (the second parameter) and transformation mode (the third parameter).'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.scaled(QtCore.QSize, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    这将此位图缩放到指定的大小（第一个参数），保持宽高比（第二个参数）和变换模式（第三个参数）。'
- en: '`pixmap.scaled(w, h, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This scales this pixmap to the rectangle with `w` (width) and `h` (height), along
    with the aspect ratio (the second parameter) and transformation mode (the third
    parameter).'
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.scaled(w, h, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    这将此位图缩放到具有`w`（宽度）和`h`（高度）的矩形，并带有宽高比（第二个参数）和变换模式（第三个参数）。'
- en: '`pixmap.scaledToHeight(h, QtCore.Qt.TransformationMode)`: This scales this
    pixmap in relation to `h` (height), along with the transformation mode (the second
    parameter).'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.scaledToHeight(h, QtCore.Qt.TransformationMode)`: 这根据`h`（高度）缩放此位图，并带有变换模式（第二个参数）。'
- en: '`pixmap.scaledToWidth(w, QtCore.Qt.TransformationMode)`: This scales this pixmap
    in relation to the `w` (width), along with transformation mode (the second parameter).'
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.scaledToWidth(w, QtCore.Qt.TransformationMode)`: 这根据`w`（宽度）缩放此位图，并带有变换模式（第二个参数）。'
- en: '`pixmap.scroll(dx, dy, QtCore.QRect, QtGui.QRegion)`: This scrolls the area
    of the rectangle (the third parameter) of this pixmap according to `dx` and `dy`
    integer values. The exposed region (the fourth parameter) is unchanged.'
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.scroll(dx, dy, QtCore.QRect, QtGui.QRegion)`: 这根据`dx`和`dy`整数值滚动此位图的矩形区域（第三个参数）。暴露的区域（第四个参数）保持不变。'
- en: '`pixmap.scroll(dx, dy, x, y, w, h, QtGui.QRegion)`: This scrolls the area of
    the rectangle specified, beginning at `x` (*x* axis) and `y` (*y* axis); with
    `w` (width) and `h` (height) of this pixmap according to `dx` and `dy` integer
    values. The exposed region (the fourth parameter) is unchanged.'
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.scroll(dx, dy, x, y, w, h, QtGui.QRegion)`: 这根据`dx`和`dy`整数值滚动指定矩形的区域，从`x`（*x*轴）和`y`（*y*轴）开始；`w`（宽度）和`h`（高度）为此位图的大小。暴露的区域（第四个参数）保持不变。'
- en: '`pixmap.size()`: This returns the pixmap''s size.'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.size()`: 这返回位图的大小。'
- en: '`pixmap.swap(QtGui.QPixmap)`: This swaps this pixmap with the pixmap specified
    in the parameter.'
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.swap(QtGui.QPixmap)`: 这与此参数指定的位图交换此位图。'
- en: '`pixmap.toImage()`: This converts the pixmap and returns the image of the `QtGui.QImage`
    type.'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.toImage()`: 这将位图转换为`QtGui.QImage`类型的图像。'
- en: '`pixmap.transformed(QtGui.QTransform, QtCore.Qt.TransformationMode)`: This
    returns the copy of the transformed pixmap using the transformation (the first
    parameter) and transformation mode (the second parameter). The original pixmap
    will not change.'
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.transformed(QtGui.QTransform, QtCore.Qt.TransformationMode)`: 这返回使用变换（第一个参数）和变换模式（第二个参数）转换后的位图副本。原始位图将不会改变。'
- en: '`pixmap.trueMatrix(QtGui.QTransform, w, h)`: This returns the actual matrix
    used for transforming this pixmap, along with the matrix (the first parameter)
    and `w` (width) and `h` (height).'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixmap.trueMatrix(QtGui.QTransform, w, h)`: 这返回用于转换此位图的实际矩阵，以及矩阵（第一个参数）和 `w`（宽度）和
    `h`（高度）。'
- en: QBitmap
  id: totrans-732
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QBitmap
- en: 'The `QBitmap` class provides a way of working with monochrome or 1-bit depth
    pixel-mapped data. It is an offscreen paint device that''s used for creating custom
    cursors and brushes, and for constructing objects such as `QRegion`, and masks
    for pixmaps and widgets. The declaration of this class is as follows:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBitmap` 类提供了一种处理单色或 1 位深度像素映射数据的方法。它是一个离屏绘图设备，用于创建自定义光标和画笔，以及构建诸如 `QRegion`、位图和小部件的掩码等对象。此类的声明如下：'
- en: '[PRE12]'
  id: totrans-734
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '`QBitmap` inherits from the `QPixmap` class and improves functionality by means
    of the following functions.'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: '`QBitmap` 从 `QPixmap` 类继承，并通过以下函数改进了功能。'
- en: functional
  id: totrans-736
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the bitmap, or to functional instruments:'
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前位图值的返回或与功能仪器相关的函数。
- en: '`bitmap.clear()`: This clears this bitmap and sets all the bits to `Qt.color0`,
    or a zero pixel value.'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitmap.clear()`: 这将清除此位图并将所有位设置为 `Qt.color0`，或零像素值。'
- en: '`bitmap.fromData(QtCore.QSize, bytes, QtGui.QImage.Format)`: This constructs
    this bitmap with the size (the first parameter) and sets the contents to the bits
    (the second parameter), byte aligned, in bit order (the third parameter).'
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitmap.fromData(QtCore.QSize, bytes, QtGui.QImage.Format)`: 这使用大小（第一个参数）构建此位图，并将内容设置为位（第二个参数），字节对齐，按位顺序（第三个参数）。'
- en: '`bitmap.swap(QtGui.QBitmap)`: This swaps this bitmap with the bitmap specified
    in the parameter.'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitmap.swap(QtGui.QBitmap)`: 这将此位图与参数中指定的位图交换。'
- en: '`bitmap.transformed(QtGui.QTransform)`: This returns the copy of the transformed
    bitmap using the transformation specified in the parameter.'
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
  zh: '`bitmap.transformed(QtGui.QTransform)`: 这返回使用参数中指定的变换转换后的位图副本。'
- en: QImage
  id: totrans-742
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QImage
- en: 'This class provides the image representation as hardware-independent, and is
    used for working with images. It also allows direct access to the pixel data. The
    declaration of the `QImage` class is as follows:'
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供硬件无关的图像表示，用于处理图像。它还允许直接访问像素数据。`QImage` 类的声明如下：
- en: '[PRE13]'
  id: totrans-744
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '`QImage` inherits from the `QPaintDevice` class and improves functionality
    by means of the following functions.'
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: '`QImage` 从 `QPaintDevice` 类继承，并通过以下函数改进了功能。'
- en: set
  id: totrans-746
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting parameters and properties in
    relation to the image:'
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与设置与图像相关的参数和属性相关的函数。
- en: '`image.setAlphaChannel(QtGui.QImage)`: This sets the alpha channel of this
    image to the one specified in the parameter.'
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setAlphaChannel(QtGui.QImage)`: 这将此图像的 alpha 通道设置为参数中指定的一个。'
- en: '`image.setColor(int, int)`: This sets the color with the index (the first parameter)
    in the color table, and to the color value (the second parameter).'
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setColor(int, int)`: 这会将颜色表中的索引（第一个参数）设置为颜色值（第二个参数）。'
- en: '`image.setColorCount(int)`: This resizes the color table count to the value
    specified in the parameter.'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setColorCount(int)`: 这会将颜色表计数调整为参数中指定的值。'
- en: '`image.setColorTable([int])`: This sets the color table to the colors specified
    in the parameter.'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setColorTable([int])`: 这会将颜色表设置为参数中指定的颜色。'
- en: '`image.setDevicePixelRatio(float)`: This sets the device pixel ratio specified
    in the parameter for this image. This is the ratio between image pixels and device-independent
    pixels.'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setDevicePixelRatio(float)`: 这将为该图像设置参数中指定的设备像素比。这是图像像素与设备无关像素之间的比率。'
- en: '`image.setDotsPerMeterX(int)`: This sets the number of pixels that will be
    located by the *x* axis in the physical meter. This will describe the scale and
    aspect ratio of this image.'
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setDotsPerMeterX(int)`: 这将设置物理米中由 *x* 轴定位的像素数量。这将描述此图像的缩放和宽高比。'
- en: '`image.setDotsPerMeterY(int):` This sets the number of pixels that will be
    located by the *y* axis in the physical meter. This will describe the scale and
    aspect ratio of this image.'
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setDotsPerMeterY(int):` 这设置由 *y* 轴在物理米中定位的像素数。这将描述此图像的缩放和宽高比。'
- en: '`image.setOffset(QtCore.QPoint)`: This sets the number of pixels by which the
    image is offset relative to other images, to the point specified in the parameter.'
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setOffset(QtCore.QPoint)`: 这设置相对于其他图像，图像偏移的像素数，到参数指定的点。'
- en: '`image.setPixel(QtCore.QPoint, int)`: This sets the pixel index or color specified
    in the second parameter at the point (the first parameter).'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setPixel(QtCore.QPoint, int)`: 这在点（第一个参数）处设置第二个参数指定的像素索引或颜色。'
- en: '`image.setPixel(x, y, int)`: This sets the pixel index or color specified in
    the third parameter at the coordinates `x` and `y`.'
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setPixel(x, y, int)`: 这将在坐标 `x` 和 `y` 处设置第三参数指定的像素索引或颜色。'
- en: '`image.setPixelColor(QtCore.QPoint, QtGui.QColor)`: This sets the pixel at
    the point (the first parameter) to the color (the second parameter).'
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setPixelColor(QtCore.QPoint, QtGui.QColor)`: 这将点（第一个参数）处的像素设置为颜色（第二个参数）。'
- en: '`image.setPixel(x, y, QtGui.QColor)`: This sets the pixel at the coordinates
    `x` and `y` to a color (the third parameter).'
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setPixel(x, y, QtGui.QColor)`: 这将坐标 `x` 和 `y` 处的像素设置为颜色（第三个参数）。'
- en: '`image.setText(str, str)`: This sets the text of the image (the second parameter)
    and associates it with the key (the first parameter).'
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.setText(str, str)`: 这设置图像（第二个参数）的文本，并将其与键（第一个参数）关联。'
- en: has and is
  id: totrans-761
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has and is
- en: 'These are functions that return a Boolean value (`bool`) related to the image
    states:'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是返回与图像状态相关的布尔值 (`bool`) 的函数：
- en: '`image.hasAlphaChannel()`: This returns `True` if it has a format that respects
    the alpha channel in relation to this image.'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.hasAlphaChannel()`: 如果它具有尊重此图像的 alpha 通道的格式，则返回 `True`。'
- en: '`image.isGrayscale()`: This returns `True` if all the colors in this image
    are shades of gray.'
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.isGrayscale()`: 如果此图像中的所有颜色都是灰色阴影，则返回 `True`。'
- en: '`image.isNull()`: This returns `True` if this image is `null` (no data).'
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.isNull()`: 如果此图像为 `null`（无数据），则返回 `True`。'
- en: functional
  id: totrans-766
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the current values of the image, or
    to functional instruments:'
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与图像当前值或功能仪器相关的函数：
- en: '`image.allGray()`: This returns `True` if all the colors in this image are
    shades of gray.'
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.allGray()`: 如果此图像中的所有颜色都是灰色阴影，则返回 `True`。'
- en: '`image.bitPlaneCount()`: This returns the number of image bit planes—the number
    of bits of color and transparency for each pixel.'
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.bitPlaneCount()`: 这返回图像位平面的数量——每个像素的颜色和透明度的位数。'
- en: '`image.byteCount()`: This returns the number of bytes occupied by this image
    data.'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.byteCount()`: 这返回此图像数据占用的字节数。'
- en: '`image.bytesPerLine()`: This returns the number of bytes per image scanline.'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.bytesPerLine()`: 这返回每图像扫描行的字节数。'
- en: '`image.cacheKey()`: This returns the key as an identifier of this image''s
    contents.'
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.cacheKey()`: 这返回作为此图像内容标识符的键。'
- en: '`image.color(int)`: This returns the color, at the index specified in the parameter,
    in the color table. The indexes start from `0`.'
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.color(int)`: 这返回颜色表在参数指定的索引处的颜色。索引从 `0` 开始。'
- en: '`image.colorTable()`: This returns a list of the colors in the color table
    of this image.'
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.colorTable()`: 这返回此图像颜色表中的颜色列表。'
- en: '`image.constBits()`: This returns a pointer to the first pixel data.'
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.constBits()`: 这返回指向第一个像素数据的指针。'
- en: '`image.constScanLine(int)`: This returns a pointer to the pixel data at the
    scanline that has the index specified in the parameter. The indexes start from
    `0`.'
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.constScanLine(int)`: 这返回指向参数指定的索引处的扫描行像素数据的指针。索引从 `0` 开始。'
- en: '`image.convertToFormat(QtGui.QImage.Format, [int], QtCore.Qt.ImageConversionFlags)`:
    This returns a copy of the image converted into the format (the first parameter)
    using the color table (the second parameter) and flags (the third parameter).'
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.convertToFormat(QtGui.QImage.Format, [int], QtCore.Qt.ImageConversionFlags)`:
    这返回一个图像副本，该图像已转换为格式（第一个参数），使用颜色表（第二个参数）和标志（第三个参数）。'
- en: '`image.copy(QtCore.QRect)`: This returns a sub-area of the image with the size
    of the rectangle specified in the parameter.'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.copy(QtCore.QRect)`: 这返回一个由参数中指定的矩形大小的图像子区域。'
- en: '`image.copy(x, y, w, h)`: This returns the image that will be copied from the
    rectangle specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width)
    and `h` (height).'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.copy(x, y, w, h)`: 这返回从指定矩形开始复制（以 `x`（x 轴）和 `y`（y 轴）为起点）的图像，宽度为 `w`，高度为
    `h`。'
- en: '`image.createAlphaMask(QtCore.Qt.ImageConversionFlags)`: This creates and returns
    a 1-bit per pixel mask from the alpha buffer in the image.'
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.createAlphaMask(QtCore.Qt.ImageConversionFlags)`: 这从图像中的 alpha 缓冲区创建并返回一个每像素1位的掩码。'
- en: '`image.createHeuristicMask(bool)`: This creates and returns a 1-bit per pixel
    mask for the image. If the parameter is `True`, the mask is enough to cover the
    pixels; otherwise, the mask is larger than the data pixels.'
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.createHeuristicMask(bool)`: 这为图像创建并返回一个每像素1位的掩码。如果参数为 `True`，则掩码足以覆盖像素；否则，掩码大于数据像素。'
- en: '`image.createMaskFromColor(int, QtCore.Qt.MaskMode)`: This creates and returns
    the mask based on the color (the first value) and the mode (the second parameter).'
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.createMaskFromColor(int, QtCore.Qt.MaskMode)`: 这根据颜色（第一个值）和模式（第二个参数）创建并返回掩码。'
- en: '`image.depth()`: This returns the depth of the image (`bpp`).'
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.depth()`: 这返回图像的深度（`bpp`）。'
- en: '`image.devicePixelRatio()`: This returns the ratio between device pixels and
    device-independent pixels.'
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.devicePixelRatio()`: 这返回设备像素和设备无关像素之间的比率。'
- en: '`image.dotsPerMeterX()`: This returns the number of pixels located by the *X*
    axis in the physical meter. This describes the scale and aspect ratio of this
    image.'
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.dotsPerMeterX()`: 这返回在物理米中由 *X* 轴定位的像素数量。这描述了此图像的缩放和宽高比。'
- en: '`image.dotsPerMeterY()`: This returns the number of pixels located by the *Y*
    axis in the physical meter. This describes the scale and aspect ratio of this
    image.'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.dotsPerMeterY()`: 这返回在物理米中由 *Y* 轴定位的像素数量。这描述了此图像的缩放和宽高比。'
- en: '`image.fill(QtCore.Qt.GlobalColor)`: This fills this image with the color specified
    in the parameter.'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.fill(QtCore.Qt.GlobalColor)`: 这用参数中指定的颜色填充此图像。'
- en: '`image.fill(QtGui.QColor)`: This fills this image with the color specified
    in the parameter.'
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.fill(QtGui.QColor)`: 这用参数中指定的颜色填充此图像。'
- en: '`image.fill(int)`: This fills this image with the pixel value specified in
    the parameter.'
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.fill(int)`: 这用参数中指定的像素值填充此图像。'
- en: '`image.format()`: This returns the format of the `QtGui.QImage.Format` type
    of this image.'
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.format()`: 这返回此图像的 `QtGui.QImage.Format` 类型的格式。'
- en: '`image.fromData(bytes, str)`: This loads this image from the `QtCore.QByteArray`
    data.'
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.fromData(bytes, str)`: 这从 `QtCore.QByteArray` 数据中加载此图像。'
- en: '`image.invertPixels(QtGui.QImage.InvertMode)`: This inverts all pixel values
    of this image by using the mode specified in the parameter.'
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.invertPixels(QtGui.QImage.InvertMode)`: 这通过使用参数中指定的模式反转此图像的所有像素值。'
- en: '`image.load(r"/Path/To/filename.png", str)`: This loads the image from the
    file (the first parameter) with the format (the second parameter).'
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.load(r"/Path/To/filename.png", str)`: 这以格式（第二个参数）从文件（第一个参数）中加载图像。'
- en: '`image.load(QtCore.QIODevice, str)`: This reads the image from the device (the
    first parameter) with the format (the second parameter).'
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.load(QtCore.QIODevice, str)`: 这以格式（第二个参数）从设备（第一个参数）中读取图像。'
- en: '`image.loadFromData(bytes, str)`: This loads the image from bytes (the first
    parameter) with the format (the second parameter).'
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.loadFromData(bytes, str)`: 这从字节（第一个参数）中加载图像，格式（第二个参数）。'
- en: '`image.mirrored(bool, bool)`: This returns the mirror of the image; the mirrored
    direction will be horizontal if the first parameter is `True`, or vertical if
    the second parameter is `True`.'
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.mirrored(bool, bool)`: 这返回图像的镜像；如果第一个参数为 `True`，则镜像方向为水平，如果第二个参数为 `True`，则镜像方向为垂直。'
- en: '`image.offset()`: This returns the number of pixels by which the image is to
    be offset relative to other images.'
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.offset()`: 这返回相对于其他图像要偏移的像素数。'
- en: '`image.pixel(QtCore.QPoint)`: This returns the pixel at the point specified
    in the parameter.'
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixel(QtCore.QPoint)`: 这返回位于参数中指定点处的像素。'
- en: '`image.pixel(x, y)`: This returns the pixel at the `x` and `y` coordinates.'
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixel(x, y)`: 这返回了位于 `x` 和 `y` 坐标处的像素。'
- en: '`image.pixelColor(QtCore.QPoint)`: This returns the color of the pixel at the
    point specified in the parameter.'
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixelColor(QtCore.QPoint)`: 这返回位于参数中指定点处的像素颜色。'
- en: '`image.pixelColor(x, y)`: This returns the color of the pixel at the `x` and
    `y` coordinates.'
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixelColor(x, y)`: 这返回了位于 `x` 和 `y` 坐标处的像素颜色。'
- en: '`image.pixelFormat()`: This returns the format as the `QtGui.QPixelFormat`
    of this image.'
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixelFormat()`: 这返回了作为此图像的 `QtGui.QPixelFormat` 格式。'
- en: '`image.pixelIndex(QtCore.QPoint)`: This returns the index of the pixel at the
    position of the point specified in the parameter.'
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixelIndex(QtCore.QPoint)`: 这返回了位于参数中指定点位置的像素索引。'
- en: '`image.pixelIndex(x, y)`: This returns the index of the pixel at the `x` and
    `y` coordinates.'
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.pixelIndex(x, y)`: 这将返回`x`和`y`坐标处的像素索引。'
- en: '`image.rect()`: This returns the rectangle of the `QtCore.QRect` type enclosing
    this image.'
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.rect()`: 这将返回包围此图像的`QtCore.QRect`类型的矩形。'
- en: '`image.reinterpretAsFormat(QtGui.QImage.Format)`: This changes the image''s
    format to that specified in the parameter; the data will not change.'
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.reinterpretAsFormat(QtGui.QImage.Format)`: 这将图像的格式更改为参数中指定的格式；数据将不会改变。'
- en: '`image.rgbSwapped()`: This returns the image with the values of the red and
    blue components swapped for all pixels.'
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.rgbSwapped()`: 这将返回所有像素的红色和蓝色分量交换后的图像。'
- en: '`image.save(r"/Path/To/filename.png", str, int)`: This saves the image to the
    file (the first parameter) with the format (the second parameter) and quality
    factor (the third parameter). The quality factor must be in the range of `0` (small,
    compressed) to `100` (large, uncompressed) or `-1` (the default settings).'
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.save(r"/Path/To/filename.png", str, int)`: 这将图像保存到文件（第一个参数），格式（第二个参数）和品质因子（第三个参数）。品质因子必须在`0`（小，压缩）到`100`（大，未压缩）或`-1`（默认设置）的范围内。'
- en: '`image.scaled(QtCore.QSize, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This returns a copy of this image scaled to size (the first parameter), along
    with the aspect ratio (the second parameter) and transformation mode (the third
    parameter).'
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.scaled(QtCore.QSize, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    这将返回一个副本，该副本按大小（第一个参数）缩放，并带有纵横比（第二个参数）和变换模式（第三个参数）。'
- en: '`image.scaled(w, h, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This returns a copy of this image scaled to the rectangle with `w` (width) and
    `h` (height), along with the aspect ratio (the second parameter) and transformation
    mode (the third parameter).'
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.scaled(w, h, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    这将返回一个副本，该副本按`w`（宽度）和`h`（高度）缩放，并带有纵横比（第二个参数）和变换模式（第三个参数）。'
- en: '`image.scaledToHeight(h, QtCore.Qt.TransformationMode)`: This returns a copy
    of this image scaled in relation to the `h` (height), along with the transformation
    mode (the second parameter).'
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.scaledToHeight(h, QtCore.Qt.TransformationMode)`: 这将返回一个副本，该副本相对于`h`（高度）缩放，并带有变换模式（第二个参数）。'
- en: '`image.scaledToWidth(w, QtCore.Qt.TransformationMode)`: This returns a copy
    of this image scaled in relation to the `w` (width), along with the transformation
    mode (the second parameter).'
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.scaledToWidth(w, QtCore.Qt.TransformationMode)`: 这将返回一个副本，该副本相对于`w`（宽度）缩放，并带有变换模式（第二个参数）。'
- en: '`image.size()`: This returns the size of this image.'
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.size()`: 这将返回此图像的大小。'
- en: '`image.sizeInBytes()`: This returns the size of the image data in bytes.'
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.sizeInBytes()`: 这将返回图像数据的大小（以字节为单位）。'
- en: '`image.smoothScaled(w, h)`: This returns a copy of the image, smoothly scaled,
    with a size of `w` (width) and `h` (height).'
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.smoothScaled(w, h)`: 这将返回一个图像副本，该图像经过平滑缩放，其大小为`w`（宽度）和`h`（高度）。'
- en: '`image.swap(QtGui.QImage)`: This swaps this image with the image specified
    in the parameter.'
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.swap(QtGui.QImage)`: 这将与此参数指定的图像交换此图像。'
- en: '`image.text(str)`: This returns the text of the image associated with the key
    specified in the parameter.'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.text(str)`: 这将返回与参数中指定的键关联的图像文本。'
- en: '`image.textKeys()`: This returns the list of keys for the text of this image.'
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.textKeys()`: 这将返回此图像文本的键列表。'
- en: '`image.toImageFormat(QtGui.QPixelFormat)`: This converts the format specified
    in the parameter into the `QtGui.QImage.Format` type.'
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.toImageFormat(QtGui.QPixelFormat)`: 这将参数中指定的格式转换为`QtGui.QImage.Format`类型。'
- en: '`image.toPixelFormat(QtGui.QImage.Format)`: This converts the format specified
    in the parameter into the `QtGui.QPixelFormat` type.'
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.toPixelFormat(QtGui.QImage.Format)`: 这将参数中指定的格式转换为`QtGui.QPixelFormat`类型。'
- en: '`image.transformed(QtGui.QTransform, QtCore.Qt.TransformationMode)`: This returns
    a copy of the transformed image by using transformation (the first parameter)
    and transformation mode (the second parameter).'
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.transformed(QtGui.QTransform, QtCore.Qt.TransformationMode)`: 这将返回一个经过变换的图像副本，使用变换（第一个参数）和变换模式（第二个参数）。'
- en: '`image.trueMatrix(QtGui.QTransform, w, h)`: This returns the actual matrix
    used to transform this image with matrix (the first parameter) and `w` (width)
    and `h` (height).'
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.trueMatrix(QtGui.QTransform, w, h)`: 这将返回用于使用矩阵（第一个参数）和`w`（宽度）以及`h`（高度）变换此图像的实际矩阵。'
- en: '`image.valid(QPoint)`: This returns `True` if the point specified in the parameter
    is a valid coordinate in this image.'
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.valid(QPoint)`: 如果参数中指定的点在此图像中是有效的坐标，则返回`True`。'
- en: '`image.valid(x, y)`: This returns `True` if the point specified as coordinates
    of `x` and `y` is a valid coordinate in this image.'
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: '`image.valid(x, y)`: 如果指定为坐标`x`和`y`的点在此图像中是有效坐标，则返回`True`。'
- en: QIcon
  id: totrans-825
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QIcon
- en: 'This class implements scalable icons in the GUI application. These can be used
    with widgets, buttons, or as window icons. The declaration syntax of the icon
    is as follows:'
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现了GUI应用程序中的可缩放图标。这些可以与小部件、按钮或作为窗口图标一起使用。图标的声明语法如下：
- en: '[PRE14]'
  id: totrans-827
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`QIcon` improves functionality with the following functions.'
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: '`QIcon`通过以下函数提高功能。'
- en: add
  id: totrans-829
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'These are functions related to the addition of icons:'
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与图标添加相关的函数：
- en: '`icon.addFile(r"/Path/To/filename.png", QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    This adds the image from the file (the first parameter) to the icon. It is specified
    with a size (the second parameter), a mode (the third parameter), and a state
    (the fourth parameter).'
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.addFile(r"/Path/To/filename.png", QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    将文件（第一个参数）中的图像添加到图标中。它通过大小（第二个参数）、模式（第三个参数）和状态（第四个参数）进行指定。'
- en: '`icon.addPixmap(QtGui.QPixmap, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This
    adds the pixmap (the first parameter) to the icon. It is specified with a mode
    (the second parameter) and state (the third parameter).'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.addPixmap(QtGui.QPixmap, QtGui.QIcon.Mode, QtGui.QIcon.State)`: 将位图（第一个参数）添加到图标中。它通过模式（第二个参数）和状态（第三个参数）进行指定。'
- en: set
  id: totrans-833
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that set parameters and properties in relation to the icon:'
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与图标相关的设置参数和属性的函数：
- en: '`icon.setFallbackSearchPaths([str])`: This sets the fallback search paths as
    a list of paths for icon fallbacks.'
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.setFallbackSearchPaths([str])`: 将回退搜索路径设置为图标回退的路径列表。'
- en: '`icon.setIsMask(bool)`: If the parameter is `True`, this stipulates that this
    icon is a mask image.'
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.setIsMask(bool)`: 如果参数为`True`，则指定此图标为遮罩图像。'
- en: '`icon.setThemeName(str)`: This sets the icon theme name as the one specified
    in the parameter.'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.setThemeName(str)`: 将图标主题名称设置为参数中指定的名称。'
- en: '`icon.setThemeSearchPaths([str])`: This sets the theme search path as a list
    of paths for icon themes.'
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.setThemeSearchPaths([str])`: 将主题搜索路径设置为图标主题的路径列表。'
- en: has/is
  id: totrans-839
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has/is
- en: 'These are functions that return a Boolean value (`bool`) related to the image
    states:'
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与图像状态相关的布尔值（`bool`）返回值的函数：
- en: '`icon.hasThemeIcon(str)`: This returns `True` if the icon is available for
    the name specified in the parameter.'
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.hasThemeIcon(str)`: 如果图标对于参数中指定的名称可用，则返回`True`。'
- en: '`icon.isMask()`: This returns `True` if the icon is marked as a mask image.'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.isMask()`: 如果图标被标记为遮罩图像，则返回`True`。'
- en: '`icon.isNull()`: This returns `True` if the icon is empty.'
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.isNull()`: 如果图标为空，则返回`True`。'
- en: functional
  id: totrans-844
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the returns of the current values of
    the icon, or functional instruments:'
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前图标值的返回或功能仪器相关的函数：
- en: '`icon.actualSize(QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This
    returns the actual size of the icon for the size (the first parameter), mode (the
    second parameter), and state (the third parameter). The available icon modes are
    as follows:'
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.actualSize(QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`: 返回图标在大小（第一个参数）、模式（第二个参数）和状态（第三个参数）下的实际大小。可用的图标模式如下：'
- en: '`QtGui.QIcon.Normal`—`0`: No interactions with the icon; functionality is available.'
  id: totrans-847
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QIcon.Normal`—`0`: 与图标无交互；功能可用。'
- en: '`QtGui.QIcon.Disabled`—`1`: Functionality is not available.'
  id: totrans-848
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QIcon.Disabled`—`1`: 功能不可用。'
- en: '`QtGui.QIcon.Active`—`2`: Interactions with the icon; functionality is available.'
  id: totrans-849
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QIcon.Active`—`2`: 与图标的交互；功能可用。'
- en: '`QtGui.QIcon.Selected`—`3`: The icon is selected.'
  id: totrans-850
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QIcon.Selected`—`3`: 图标被选中。'
- en: 'The icon states are as follows:'
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
  zh: 图标状态如下：
- en: '`QtGui.QIcon.On`—`0`: Widget is in the *on* state.'
  id: totrans-852
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QIcon.On`—`0`: 小部件处于*开启*状态。'
- en: '`QtGui.QIcon.Off`—`1`: Widget is in the *off* state.'
  id: totrans-853
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtGui.QIcon.Off`—`1`: 小部件处于*关闭*状态。'
- en: '`icon.actualSize(QtGui.QWindow, QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    This returns the actual size of the icon in relation to the window (the first
    parameter) with size (the second parameter), mode (the third parameter), and state
    (the fourth parameter).'
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.actualSize(QtGui.QWindow, QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    返回图标相对于窗口（第一个参数）的大小（第二个参数），模式（第三个参数）和状态（第四个参数）的实际大小。'
- en: '`icon.availableSizes(QtGui.QIcon.Mode, QtGui.QIcon.State)`: This returns the
    list of available sizes of the icon in relation to the mode (the first parameter)
    and state (the second parameter).'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.availableSizes(QtGui.QIcon.Mode, QtGui.QIcon.State)`: 这返回与模式（第一个参数）和状态（第二个参数）相关的图标可用大小的列表。'
- en: '`icon.cacheKey()`: This returns the key as an identifier of the icon contents.'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.cacheKey()`: 这返回图标内容的标识符。'
- en: '`icon.fallbackSearchPaths()`: This returns the list of the fallback search
    paths for icons.'
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.fallbackSearchPaths()`: 这返回图标回退搜索路径的列表。'
- en: '`icon.fromTheme(str)`: This returns the icon corresponding to the name specified
    in the parameter, in the current icon theme.'
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.fromTheme(str)`: 这返回与参数中指定的名称对应的图标，在当前图标主题中。'
- en: '`icon.fromTheme(str, QtGui.QIcon)`: This returns the icon corresponding to
    the name (the first parameter); if the icon is not found, this returns a fallback
    (the second parameter).'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.fromTheme(str, QtGui.QIcon)`: 这返回与名称（第一个参数）对应的图标；如果找不到图标，则返回回退（第二个参数）。'
- en: '`icon.name()`: This returns the name of the icon.'
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.name()`: 这返回图标的名称。'
- en: '`icon.paint(QtGui.QPainter, QtCore.QRect, QtCore.Qt.Alignment, QtGui.QIcon.Mode,
    QtGui.QIcon.State)`: This paints the icon with specified parameters using the
    painter (the first parameter) to the rectangle (the second parameter), alignment
    (the third parameter), mode (the fourth parameter), and state (the fifth parameter).'
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.paint(QtGui.QPainter, QtCore.QRect, QtCore.Qt.Alignment, QtGui.QIcon.Mode,
    QtGui.QIcon.State)`: 这使用画家（第一个参数）在指定的矩形（第二个参数）、对齐（第三个参数）、模式（第四个参数）和状态（第五个参数）中绘制图标。'
- en: '`icon.paint(QtGui.QPainter, x, y, w, h, QtCore.Qt.Alignment, QtGui.QIcon.Mode,
    QtGui.QIcon.State)`: This paints the icon with specified parameters using the
    painter (the first parameter) to the rectangle beginning at `x` (*x* axis) and
    `y` (*y* axis), with `w` (width) and `h` (height) size, and alignment (the third
    parameter), mode (the fourth parameter), and state (the fifth parameter).'
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.paint(QtGui.QPainter, x, y, w, h, QtCore.Qt.Alignment, QtGui.QIcon.Mode,
    QtGui.QIcon.State)`: 这使用画家（第一个参数）在以 `x`（*x* 轴）和 `y`（*y* 轴）开始的矩形内，使用 `w`（宽度）和 `h`（高度）大小，以及对齐（第三个参数），模式（第四个参数）和状态（第五个参数）来绘制图标。'
- en: '`icon.pixmap(QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This returns
    the pixmap with the specified size (the first parameter), mode (the second parameter),
    and state (the third parameter).'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.pixmap(QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`: 这返回具有指定大小（第一个参数）、模式（第二个参数）和状态（第三个参数）的位图。'
- en: '`icon.pixmap(w, h, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This returns the
    pixmap with a specified `w` (width), and `h` (height), mode (the third parameter),
    and state (the fourth parameter).'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.pixmap(w, h, QtGui.QIcon.Mode, QtGui.QIcon.State)`: 这返回具有指定 `w`（宽度）和
    `h`（高度）、模式（第三个参数）和状态（第四个参数）的位图。'
- en: '`icon.pixmap(QtGui.QWindow, QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    This returns the pixmap with a specified window (the first parameter), size (the
    second parameter), mode (the third parameter), and state (the fourth parameter).'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.pixmap(QtGui.QWindow, QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    这返回具有指定窗口（第一个参数）、大小（第二个参数）、模式（第三个参数）和状态（第四个参数）的位图。'
- en: '`icon.swap(QtGui.QIcon)`: This swaps this icon with the icon specified in the
    parameter.'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.swap(QtGui.QIcon)`: 这将此图标与参数中指定的图标交换。'
- en: '`icon.themeName()`: This returns the current icon theme name.'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.themeName()`: 这返回当前图标主题的名称。'
- en: '`icon.themeSearchPaths()`: This returns the paths for searching icon themes.'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
  zh: '`icon.themeSearchPaths()`: 这返回搜索图标主题的路径。'
- en: Summary
  id: totrans-869
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter described the basic classes in terms of managing graphical elements
    and painting using the Qt library. The aim of the Qt framework is to develop the
    graphical applications, graphical tools, and classes related to creating graphics,
    and ensure they are widespread. Where possible, the main ones will be discussed
    in this book.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从管理图形元素和使用 Qt 库进行绘制的基本类的角度进行了描述。Qt 框架的目标是开发图形应用程序、图形工具以及与创建图形相关的类，并确保它们得到广泛应用。在可能的情况下，本书将讨论主要的内容。
- en: While this chapter concerned itself with basic classes, in the next chapter,
    we will discuss the model/view paradigm for creating graphical representations
    in the application and the classes for implementing this.
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然本章关注的是基本类，但在下一章中，我们将讨论在应用程序中创建图形表示的模型/视图范式以及实现此范式的类。
