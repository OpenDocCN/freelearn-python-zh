- en: The Basics of Graphics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt framework provides you with the opportunity to work with various graphics
    that can be used and/or represented in the application. Here, we will cover the
    basic classes that we can use to paint, draw, and use images. This chapter predominantly
    concerns the basics of managing and creating graphical elements with Qt and Python
    bindings by the user and inside the GUI application. Since Qt is a graphical library
    and this theme is very broad, this chapter is basically an introduction to the
    basics of graphics, which will be expanded on in future chapters.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawing and gradients
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt framework and Python bindings, such as PySide and PyQt, actually paint
    the graphical components that were described in the previous chapters. This drawing
    relates to buttons, fields, labels, and other widgets. As we described previously,
    the `QWidget` class inherits from the `QObject` class, which provides some functionality
    for the graphical elements, and the `QPaintDevice` class, which provides the painting
    of the element in the GUI application. This construction is the main paradigm of
    the Qt graphical library. Also, some supporting classes are available, and will
    be covered initially in this section. This chapter cannot, however, accommodate
    all the classes that need to be learned about for a complete understanding of
    the mechanisms in order to manage the graphics in the development process. To
    achieve this, review the pertinent documentation (Qt—[https://doc.qt.io/](https://doc.qt.io/),
    PySide2—[https://doc.qt.io/qtforpython/index.html](https://doc.qt.io/qtforpython/index.html),
    and PyQt5—[https://www.riverbankcomputing.com/static/Docs/PyQt5/](https://www.riverbankcomputing.com/static/Docs/PyQt5/)).
  prefs: []
  type: TYPE_NORMAL
- en: QFont
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a font that will be used for drawing the text of the components
    in the application. Additional classes for working with fonts, such as `QFontInfo`,
    `QFontMetrics`, `QFontMetricsF`, and `QFontDatabase`, are also available. Utilization
    of the `QFont` class in the code may take the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '`QFont` improves functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the font, including the setting of the font family and spacing:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setBold(bool)`: If the parameter is `True`, this sets the current font
    as bold.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setCapitalization(QtGui.QFont.Capitalization)`: This sets the capitalization
    for the text; all words will be capitalized. The available parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.MixedCase`—`0`: No capitalization is applied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.AllUppercase`—`1`: All uppercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.AllLowercase`—`2`: All lowercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.SmallCaps`—`3`: Small caps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Capitalize`—`4`: The first character of each word is uppercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setFamily("Font family")`: This sets the font family name for this font
    (case insensitive).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setFixedPitch(bool)`: If the parameter is `True`, this sets the fixed
    pitch for this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setHintingPreference(QtGui.QFont.HintingPreference)`: This sets the hinting
    level of the glyphs specified in the parameter for this font. This depends on
    the operation system. The available parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferDefaultHinting`—`0`: Default hinting level for the platform.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferNoHinting`—`1`: Text without hinting where it is possible.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferVerticalHinting`—`2`: Align glyphs in the vertical direction,
    where possible without horizontal hinting of the text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferFullHinting`—`3`: Where possible, provides horizontal and
    vertical hinting.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setItalic(bool)`: If the parameter is `True`, this sets the font as italicized
    (cursive).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setKerning(bool)`: If the parameter is `True`, this sets the kerning
    for this font as enabled (the default: `True`); glyph metrics do not add up.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setLetterSpacing(QtGui.QFont.SpacingType, float)`: This sets the spacing
    between each letter of the text for this font with the type specified in the first
    parameter and the `float` value as the spacing specified in the second parameter.
    The available spacing types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PercentageSpacing`—`0`: Spacing as a percentage; with a value
    of `200.0`, the spacing will be enlarged according to the width of its character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.AbsoluteSpacing`—`0`: Spacing in pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setOverline(bool)`: If the parameter is `True`, this sets the text of
    this font as overlined.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setPixelSize(int)`: This sets the size, specified in the parameter, for
    the text of this font as a pixel value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setPointSize(int)`: This sets the size, specified in the parameter, for
    the text of this font as a point value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setPointSizeF(float)`: This sets the size, specified in the parameter,
    for the text of this font as a point value, with float precision.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setRawName(str)`: This sets the font used by its system name.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setStretch(int)`: This sets the stretch factor for this font from `1`
    to `4000` (with a factor as `250`, all the characters will be 2.5 times wider).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setStrikeOut(bool)`: If the parameter is `True`, this sets the text of
    this font as strike out.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setStyle(QtGui.QFont.Style)`: This sets the style specified in the parameter
    for this font. The available styles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.StyleNormal`—`0`: Normal glyphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.StyleItalic`—`1`: Italicized glyphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.StyleOblique`—`2`: Glyphs with an italicized appearance that are
    based on the unstyled glyphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setStyleHint(QtGui.QFont.StyleHint, QtGui.QFont.StyleStrategy)`: This
    sets the style hint (the first parameter) and strategy to hint (the second parameter).
    The available style hints that the font matcher prefers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.SansSerif`—`Helvetica`: Prefers sans serif fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Helvetica`—`0`: Prefers sans serif fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Serif`—`Times`: Prefers serif fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Times`—`1`: Prefers serif fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.TypeWriter`—`Courier`: Prefers fixed pitch fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Courier`—`2`: Prefers fixed pitch fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.OldEnglish`—`3`: Prefers decorative fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Decorative`—`OldEnglish`: Prefers decorative fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.System`—`4`: Prefers system fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.AnyStyle`—`5`: Prefers to choose.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Cursive`—`6`: Prefers cursive family fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Monospace`—`7`: Prefers monospace family fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Fantasy`—`8`: Prefers fantasy family fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setStyleName(str)`: This sets the name of the style, as specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setStyleStrategy(QtGui.QFont.StyleStrategy)`: This sets the style strategy
    for the font. The following style strategies, which tell the font matcher what
    type should be used to find the default family, are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferDefault`: Does not prefer any fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferBitmap`: Prefers bitmap fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferDevice`: Prefers device fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.ForceOutline`: Uses outline fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.NoAntialias`: Does not antialias the fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.NoSubpixelAntialias`: If possible, will not subpixel antialiasing
    of the fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferAntialias`: Prefers antialias.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.OpenGLCompatible`: Uses OpenGL compatible fonts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.NoFontMerging`: Disables automatically looking for the similar
    font for the character if the writing system does not contain this character.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferNoShaping`: Disables features such as applying complex rules
    when not required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The available flags that can be used with the OR (`|`) operator for the strategies
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferMatch`: Prefers an exact match.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.PreferQuality`: Prefers the best quality font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.ForceIntegerMetrics`: Uses integer values in font engines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setUnderline(bool)`: If the parameter is `True`, this sets the text of
    this font as Underlined.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.setWeight(int)`: This sets the weight, specified in the parameter, for
    this font. The available values for the font weights are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Thin`: `0`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.ExtraLight`: `12`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Light`: `25`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Normal`: `50`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Medium`: `57`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.DemiBold`: `63`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Bold`: `75`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.ExtraBold`: `81`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QFont.Black`: `87`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font.setWordSpacing(float)`: This sets the spacing, specified in the parameter,
    between each word of the text for this font.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the font:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.isCopyOf(QtGui.QFont)`: This returns `True` if the font, specified in
    the parameter, is a copy of the current font.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the font:'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.bold()`: This returns `True` if the value of the `font.weight()` is greater
    than `QFont.Medium`; otherwise, it returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.cacheStatistics()`: This dumps a font''s cache statistics.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.capitalization()`: This returns the current capitalization of the `QtGui.QFont.Capitalization`
    type for this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.cleanup()`: This cleans up the font system.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.defaultFamily()`: This returns the font family that''s used with the
    current style hint.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.exactMatch()`: This returns `True` if the font of the window system is
    available that matches this font''s settings.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.family()`: This returns the current font family name used with this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.fixedPitch()`: This returns `True` if the fixed pitch for this font was
    set.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.fromString(str)`: This sets this font, which will match the description
    specified in the parameter as a comma-separated list with font attributes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.hintingPreference()`: This returns the hinting level for glyphs that
    are currently preferred, and will be rendered with this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.initialize()`: This initializes the font system.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.insertSubstitution(str, str)`: This inserts the substitute name specified
    in the second parameter into the substitution table for the font family (the first
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.insertSubstitution(str, [str])`: This inserts the list of the substitute
    names specified in the second parameter into the substitution table for the font
    family (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.italic()`: This returns `True` if the current font is italicized (cursive).'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.kerning()`: This returns `True` if kerning will be used with this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.key()`: This returns the key of the current font, as a textual representation
    of this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.lastResortFamily()`: This returns the font family name, as a resort.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.lastResortFont()`: This returns the font: last resort.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.letterSpacing()`: This returns the spacing between each letter as float
    value that used with this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.letterSpacingType()`: This returns the spacing type as `QtGui.QFont.SpacingType`,
    and is used for the letter spacing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.overline()`: This returns `True` if the font is overlined.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.pixelSize()`: This returns the size of the font in the pixel representation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.pointSize()`: This returns the size of the font in the point representation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.pointSizeF()`: This returns the size of the font in the point representation
    as a value with float precision.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.rawName()`: This returns the font name used in the underlying window
    system.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.removeSubstitutions(str)`: This removes the substitutions for the font
    family name specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.resolve(QtGui.QFont)`: This returns the new font that has attributes
    of the font specified in the parameter, which has not previously been set.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.stretch()`: This returns the stretch factor of this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.strikeOut()`: This returns `True` if the text of this font is striking
    out.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.style()`: This returns the style of the `QtGui.QFont.Style` type for
    this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.styleHint()`: This returns the style hint of the `QtGui.QFont.StyleHint`
    type for this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.styleName()`: This returns the style name used for the style of this
    font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.styleStrategy()`: This returns the strategy of the `QtGui.QFont.StyleStrategy`
    type, and is used with the font matcher of this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.substitute(str)`: This returns the first substitute font family name
    used with the family name specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.substitutes(str)`: This returns the list of substitute font family names
    used, with the family name specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.substitutions()`: This returns a sorted list of substituted font family
    names.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.swap(QtGui.QFont)`: This swaps this font with the font specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.toString()`: This returns the comma-separated list with a description
    of this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.underline()`: This returns `True` if the text of this font is underlined.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.weight()`: This returns the weight of this font.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font.wordSpacing()`: This returns the spacing between each word of the text
    in this font as a float value.'
  prefs: []
  type: TYPE_NORMAL
- en: QColor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides manipulations with color that will be used for components
    in the application. This class represents models of the colors based on **RGB**
    (**red, green, and blue**), **HSV** (**hue, saturation, and value**) and **CMYK**
    (**cyan, magenta, yellow, and black**) values. They can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Named colors**: `"white"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strings/values**: `"#FFFFFF"`, `(255, 255, 255)`, `(1, 1, 1)`, in other words,
    *#redgreenblue* or (red, green, blue).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Strings/values**: `"#FFFFFFFF"`, `(255, 255, 255, 255)`, `(1, 1, 1, 1)`,
    in other words, *#redgreenbluealpha* or (red, green, blue, alpha).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The alpha channel of the color (the letter *A* in RGBA) is the transparency.
    HSV and CMYK can be used in a similar fashion in relation to the colors of its
    color models. We can use the `QColor` class like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`QColor` improves functionality by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters and properties in relation
    to the color, including the setting of the color or hue:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setAlpha(a)`: This sets alpha, `a`, as the integer value of this color
    (`0`-`255`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setAlphaF(a)`: This sets alpha, `a`, as the float value of this color
    (`0.0`-`1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setBlue(b)`: This sets blue, `b`, as the integer value of this color
    (`0`-`255`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setBlueF(b)`: This sets blue, `b`, as the float value of this color
    (`0.0`-`1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setCmyk(c, m, y, k, a)`: This sets the CMYK color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c`: Cyan (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m`: Magenta (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: Yellow (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k`: Black (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setCmykF(c, m, y, k, a)`: This sets the CMYK color specified in the
    parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c`: Cyan (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m`: Magenta (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: Yellow (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k`: Black (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setGreen(g)`: This sets green, `g`, as the integer value of this color
    (`0`-`255`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setGreenF(g)`: This sets green, `g`, as the float value of this color
    (`0.0`-`1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setHsl(h, s, l, a)`: This sets the HSL color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Lightness (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setHslF(h, s, l, a)`: This sets the HSL color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Lightness (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setHsv(h, s, v, a)`: This sets the HSV color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v`: Value (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setHsvF(h, s, v, a)`: This sets the HSV color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v`: Value (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setNamedColor(str)`: This sets the RGB value of this color to the name
    specified in the parameter. The available formats of the color that will be named
    are as follows: `"#RGB"`, `"#RRGGBB"`, `"#AARRGGBB"`, `"#RRRGGGBBB"`, and `"#RRRRGGGGBBBB"`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setRed(r)`: This sets red `r`, as the integer value of this color (`0`-`255`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setRedF(r)`: This sets red, `r`, as the float value of this color (`0.0`-`1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.setRgb(r, g, b, a)`: This sets the RGB color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: Red (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g`: Green (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Blue (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.setRgbF(r, g, b, a)`: This sets the RGB color specified in the parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: Red (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g`: Green (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Blue (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the color:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.isValid()`: This returns `True` if this color is valid.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.isValidColor(str)`: This returns `True` if the color specified in the
    parameter is a valid color.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the color:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.alpha()`: This returns the alpha particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.alphaF()`: This returns the alpha particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.black()`: This returns the black particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.blackF()`: This returns the black particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.blue()`: This returns the blue particle of the color as an integer value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.blueF()`: This returns the blue particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.colorNames()`: This returns the list of strings with color names that
    are available in the Qt color list.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.convertTo(QtGui.QColor.Spec)`: This copies the color with a specifier
    in the parameter and returns the color of the `QtGui.QColor` type. The available
    specifiers are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QColor.Rgb`—`1`: Red, green, blue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QColor.Hsv`—`2`: Hue, saturation, value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QColor.Cmyk`—`3`: Cyan, magenta, yellow, black.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QColor.Hsl`—`4`: Hue, saturation, lightness.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.cyan()`: This returns the cyan particle of the color as an integer value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.cyanF()`: This returns the cyan particle of the color as a `float` value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.darker(int)`: This returns a darker or lighter color of the `QtGui.QColor`
    type, with a factor specified in the parameter as an integer value. If the factor
    is greater than `100`, the color is darker; if the factor is less than `100`,
    the color is lighter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.fromCmyk(c, m, y, k, a)`: This returns the CMYK color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c`: Cyan (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m`: Magenta (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: Yellow (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k`: Black (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromCmykF(c, m, y, k, a)`: This returns the CMYK color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`c`: Cyan (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m`: Magenta (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`y`: Yellow (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`k`: Black (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromHsl(h, s, l, a)`: This returns the HSL color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Lightness (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromHslF(h, s, l, a)`: This returns the HSL color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l`: Lightness (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromHsv(h, s, v, a)`: This returns the HSV color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v`: Value (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromHsvF(h, s, v, a)`: This returns the HSV color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h`: Hue (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s`: Saturation (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`v`: Value (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromRgb(r, g, b, a)`: This returns the RGB color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: Red (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g`: Green (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Blue (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0`-`255`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.fromRgbF(r, g, b, a)`: This returns the RGB color of the `QtGui.QColor`
    type with specified parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`r`: Red (`0.0`-`1.0`) .'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`g`: Green (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b`: Blue (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a`: Alpha (`0.0`-`1.0`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color.getCmyk()`: This retrieves the contents of *c*, *m*, *y*, *k*, and *a*
    as integer values, and sets components to the cyan, magenta, yellow, black, and
    alpha values of the CMYK color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getCmykF()`: This retrieves the contents of *c*, *m*, *y*, *k*, and
    *a* as float values, and sets components to the cyan, magenta, yellow, black,
    and alpha values of the CMYK color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getHsl()`: This retrieves the contents of *h*, *s*, *l*, and *a* as
    integer values, and sets components to the hue, saturation, lightness, and alpha
    values of the HSL color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getHslF()`: This retrieves the contents of *h*, *s*, *l*, and *a* as
    float values, and sets components to the hue, saturation, lightness, and alpha
    values of the HSL color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getHsv()`: This retrieves the contents of *h*, *s*, *v*, and *a* as
    integer values, and sets components to the hue, saturation, value, and alpha values
    of the HSV color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getHsvF()`: This retrieves the contents of *h*, *s*, *v*, and *a* as
    float values, and sets components to the hue, saturation, value, and alpha values
    of the HSV color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getRgb()`: This retrieves the contents of *r*, *g*, *b*, and *a* as
    integer values, and sets components to the red, green, blue, and alpha values
    of the RGB color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.getRgbF()`: This retrieves the contents of *r*, *g*, *b*, and *a* as
    float values, and sets components to the red, green, blue, and alpha values of
    the RGB color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.green()`: This returns the green particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.greenF()`: This returns the green particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hslHue()`: This returns the hue particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hslHueF()`: This returns the hue particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hslSaturation()`: This returns the saturation particle of the color
    as an integer value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hslSaturationF()`: This returns the saturation particle of the color
    as a float value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hsvHue()`: This returns the hue particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hsvHueF()`: This returns the hue particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hsvSaturation()`: This returns the saturation particle of the color
    as an integer value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hsvSaturationF()`: This returns the saturation particle of the color
    as a float value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hue()`: This returns the hue particle of the color as an integer value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.hueF()`: This returns the hue particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.lighter(int)`: This returns a lighter or darker color of the `QtGui.QColor`
    type, with a factor specified in the parameter as an integer value. If the factor
    is greater than `100`, the color is lighter; if the factor is less than `100`,
    the color is darker.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.lightness()`: This returns the lightness particle of the color as an
    integer value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.lightnessF()`: This returns the lightness particle of the color as a
    float value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.magenta()`: This returns the magenta particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.magentaF()`: This returns the magenta particle of the color as a float
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.name()`: This returns the color name in `"#RRGGBB"` format.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.name(QtGui.QColor.NameFormat)`: This returns the color name of the format
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.red()`: This returns the red particle of the color as an integer value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.redF()`: This returns the red particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.saturation()`: This returns the saturation particle of the color as
    an integer value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.saturationF()`: This returns the saturation particle of the color as
    a float value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.spec()`: This returns the specifier of the `QtGui.QColor.Spec` type
    for this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.toCmyk()`: This creates and returns the CMYK color of the `QtGui.QColor`
    type for this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.toHsl()`: This creates and returns the HSL color of the `QtGui.QColor`
    type for this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.toHsv()`: This creates and returns the HSV color of the `QtGui.QColor`
    type for this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.toRgb()`: This creates and returns the RGB color of the `QtGui.QColor`
    type for this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.value()`: This returns the value particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.valueF()`: This returns the value particle of the color as a float value
    of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.yellow()`: This returns the yellow particle of the color as an integer
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color.yellowF()`: This returns the yellow particle of the color as a float
    value of this color.'
  prefs: []
  type: TYPE_NORMAL
- en: Drawing and gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt framework provides the classes that you can use to work with drawings
    and paintings in the application. Almost every widget is constructed for visualization
    purposes, and those that are graphically represented with Qt library classes are
    painted or drawn in accordance with these classes. The gradients make the colors
    of the various elements more modern and give them a nicer appearance.
  prefs: []
  type: TYPE_NORMAL
- en: QPainter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QPainter` class is one of the main components of the Qt graphical system.
    This class provides a low-level painting of the graphical elements in  various
    forms. The `QPaintDevice` class, which inherits from `QWidget`, paints elements
    together with this class. The `QPainter` class is used to perform operations related
    to drawing and painting, together with classes such as `QPaintDevice` and `QPaintEngine`.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, in the case where the paint device is a widget, this class can only be
    implemented inside a `paintEvent()` function or a function that will call the
    `paintEvent()` function,as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The `QPainter` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the functions related to setting parameters and properties in relation
    to the painter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBackground(QtGui.QBrush)`: This sets the background brush of this
    painter to the brush specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBackgroundMode(QtCore.Qt.BGMode)`: This sets the background mode
    of this painter to the mode specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBrush(QtGui.QBrush)`: This sets the brush of this painter to the
    one specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBrush(QtCore.Qt.BrushStyle)`: This sets the brush of this painter
    to black and the specified style.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBrushOrigin(QtCore.QPoint)`: This sets the brush origin at the
    point specified in the parameter with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBrushOrigin(QtCore.QPointF)`: This sets the brush origin at the
    point with float values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setBrushOrigin(x, y)`: This sets the brush origin at the `x` (*x*
    axis) and `y` (*y* axis) positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setClipping(bool)`: If the parameter is `True`, this sets the clipping
    as enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setClipPath(QtGui.QPainterPath, QtCore.Qt.ClipOperation)`: This sets
    the clip path for this painter to the path (the first parameter) and clip operation
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setClipRect(QtCore.QRect, QtCore.Qt.ClipOperation)`: This sets the
    clip region to the rectangle with integer values (the first parameter) by using
    the clip operation (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setClipRect(QtCore.QRectF, QtCore.Qt.ClipOperation)`: This sets the
    clip region to the rectangle with float values (the first parameter) by using
    the clip operation (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setClipRect(QtGui.QRegion, QtCore.Qt.ClipOperation)`: This sets the
    clip region to the region specified in the first parameter by using the clip operation
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setClipRect(x, y, w, h, QtCore.Qt.ClipOperation)`: This sets the clip
    region to the rectangle specified by beginning at `x` (*x* axis) and `y` (*y *axis),
    along with `w` (width) and `h` (height), by using the clip operation (the fifth
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setCompositionMode(QtGui.QPainter.CompositionMode)`: This sets the
    composition mode specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setFont(QtGui.QFont)`: This sets the font of the painter to that specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setLayoutDirection(QtCore.Qt.LayoutDirection)`: This sets the layout
    direction of the drawn text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setOpacity(float)`: This sets the opacity, specified in the parameter
    (`0.0`: fully transparent, `1.0`: fully opaque), which will be used with this
    painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setPen(QtGui.QPen)`: This sets the pen specified in the parameter
    to this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setPen(QtGui.QColor)`: This sets the pen with a color specified in
    the parameter to this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setPen(QtCore.Qt.PenStyle)`: This sets the pen with a style specified in
    the parameter and colored black to this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setRenderHint(QtGui.QPainter.RenderHint, bool)`: This sets the render
    hint (the first parameter) to the painter if the second parameter is `True`. The
    available hints are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QPainter.Antialiasing`: If possible, will antialias edges of primitives.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QPainter.TextAntialiasing`: If possible, will antialias text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QPainter.SmoothPixmapTransform`: The engine will use smooth pixmap transformation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QPainter.Qt4CompatiblePainting`: The engine will use the same fill rules
    as in Qt4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`painter.setRenderHints(QtGui.QPainter.RenderHint | QtGui.QPainter.RenderHint,
    bool)`: This sets the render hints (the first parameter) to the painter if the
    second parameter is `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setTransform(QtGui.QTransform, bool)`: This sets the transformation
    matrix specified in the first parameter. If the second parameter is `True`, the
    transform will be combined with the current matrix; otherwise, it replaces the
    current matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setViewTransformEnabled(bool)`: If the parameter is `True`, this sets
    view transformations as enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setViewport(QtCore.QRect)`: This sets the viewport rectangle of the
    painter to the rectangle specified in the parameter. The viewport represents the
    coordinate system of the device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setViewport(x, y, w, h)`: This sets the viewport rectangle of the
    painter to the rectangle specified, beginning at `x` (*x* axis), and `y` (*y*
    axis), along with `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setWindow(QtCore.QRect)`: This sets the window of the painter to the
    rectangle specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setWindow(x, y, w, h)`: This sets the window of the painter to the
    rectangle specified, beginning at `x` (*x* axis) and `y` (*y* axis), along with
    `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setWorldMatrixEnabled(bool)`: If the parameter is `True`, this sets
    world transformations as enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.setWorldTransform(QtGui.QTransform, bool)`: This sets the world transformation
    matrix specified in the first parameter. If the second parameter is `True`, the
    transform will be combined with the current matrix; otherwise, it replaces the
    current matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: has and is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the painter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.hasClipping()`: This returns `True` if this painter has a clipping
    that was set.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.isActive()`: This returns `True` if the painter is active and `begin()` has
    been called, whereas `end()` has not been called yet.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the painter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.background()`: This returns the current brush of the `QtGui.QBrush`
    type that''s used for the background.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.backgroundMode()`: This returns the current mode of the `QtCore.Qt.BGMode`
    type that''s used for the background.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.begin(QtGui.QPaintDevice)`: This begins painting with the paint device
    specified in the parameter, and returns `True` if the painting was successful.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.beginNativePainting()`: This flushes the painting pipeline and prepares
    issuance for the underlying graphics context.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.boundingRect(QtCore.QRectF, QtCore.Qt.Alignment, str)`: This returns
    the bounding rectangle of the `QtCore.QRectF` type, with text (the third parameter),
    rectangle (the first parameter), and flags (the second parameter), as they appear
    in the drawing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.brush()`: This returns the current brush of the `QtGui.QBrush` type
    that''s used with this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.brushOrigin()`: This returns the brush origin of the `QtCore.QPoint`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.clipBoundingRect()`: This returns the bounding rectangle of the current
    clip of the `QtCore.QRectF` type, if the clip exists.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.combinedTransform()`: This returns the transformation matrix combining
    the current world transformation and window/viewport.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.compositionMode()`: This returns the composition mode of the `QtGui.QPainter.CompositionMode`
    type that is currently used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.device()`: This returns the current paint device of the `QtGui.QPaintDevice`
    type that''s used for painting.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.deviceTransform()`: This returns the matrix that transforms logical
    coordinates to the device coordinates of the platform-dependent paint device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.end()`: This ends the painting operation and returns `True` if the
    painter ends operations and is no longer active.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.endNativePainting()`: This restores the painter after issuing the
    native painting commands.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.eraseRect(QtCore.QRect)`: This erases the area inside the rectangle
    with integer values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.eraseRect(QtCore.QRectF)`: This erases the area inside the rectangle
    with float values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.eraseRect(x, y, w, h)`: This erases the area inside the rectangle
    beginning at `x` (*x* axis) and `y` (*y* axis), along with `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.font()`: This returns the current font using this painter for drawing
    text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fontInfo()`: This returns the font information for the font that''s
    used with this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fontMetrics()`: This returns the font metrics for the font that''s
    used with this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.layoutDirection()`: This returns the layout direction of the `QtCore.Qt.LayoutDirection`
    type that''s used with this painter for drawing the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.opacity()`: This returns the opacity that''s used with this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.paintEngine()`: This returns the current paint engine of the `QtGui.QPaintEngine`
    type that this painter is operating on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.pen()`: This returns the current pen of the `QtGui.QPen` type that''s
    used with this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.renderHints()`: This returns the render hints of the `QtGui.QPainter.RenderHints`
    type that are used as hints for rendering with this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.resetTransform()`: This resets transformations that were made with
    the `translate()`, `scale()`, `shear()`, `rotate()`, `setWorldTransform()`, `setViewport()`,
    and `setWindow()` functions of this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.restore()`: This restores the current states of this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.rotate(float)`: This rotates the coordinate system of this painter
    clockwise, with the angle parameter in degrees.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.save()`: This saves the current states of this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.scale(x, y)`: This scales the coordinate system of this painter by
    `x` (*x* axis) and `y` (*y* axis) values, which are float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.shear(float, float)`: This shears the coordinate system as per the
    specified parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.strokePath(QtGui.QPainterPath, QtGui.QPen)`: This strokes the path
    specified in the first parameter with the outline, using the pen specified in
    the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.testRenderHint(QtGui.QPainter.RenderHint)`: This returns `True` if
    the hint specified in the parameter is set to this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.transform()`: This returns the transformation matrix of the `QtGui.QTransform`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.translate(QtCore.QPoint)`: This translates the coordinate system at the
    point specified in the parameter with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.translate(QtCore.QPointF)`: This translates the coordinate system
    at the point specified in the parameter with float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.translate(float, float)`: This translates the coordinate system as
    per the specified vector.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.viewTransformEnabled()`: This returns `True` if the view transformation
    is enabled for this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.viewport()`: This returns the viewport rectangle of the `QtCore.QRect`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.window()`: This returns the window rectangle of the `QtCore.QRect`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.worldMatrixEnabled()`: This returns `True` if the world transformation
    is enabled for this painter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.worldTransform()`: This returns the world transformation matrix of
    the `QtGui.QTransform` type.'
  prefs: []
  type: TYPE_NORMAL
- en: draw
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are the functions that are related to drawing operations with this painter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawArc(QtCore.QRect, int, int)`: This draws the arc defined by the
    rectangle with integer values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawArc(QtCore.QRectF, int, int)`: This draws the arc defined by the
    rectangle with float values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawArc(x, y, w, h, int, int)`: This draws the arc with the specified
    parameters—a rectangle beginning at `x` (*x *axis) and `y` (*y *axis); with `w` (width)
    and `h` (height); with a start angle (the fifth parameter), and a span angle (the
    sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawChord(QtCore.QRect, int, int)`: This draws the chord defined by
    the rectangle with integer values (the first parameter), a start angle (the second
    parameter), and a span angle (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawChord(QtCore.QRectF, int, int)`: This draws the chord defined
    by the rectangle with float values (the first parameter), a start angle (the second
    parameter), and a span angle (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawChord(x, y, w, h, int, int)`: This draws the chord with specified
    parameters—a rectangle beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width)
    and `h` (height); with a start angle (the fifth parameter), and a span angle (the
    sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawConvexPolygon(QtGui.QPolygon)`: This draws the convex polygon
    with a polygon specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawEllipse(QtCore.QRect)`: This draws the ellipse defined by the
    rectangle with integer values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawEllipse(QtCore.QRectF)`: This draws the ellipse defined by the
    rectangle with float values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawEllipse(QtCore.QPoint, int, int)`: This draws the ellipse in the
    center position with integer values (the first parameter), radius *x* (the second
    parameter), and radius *y* (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawEllipse(QtCore.QPointF, int, int)`: This draws the ellipse in
    the center position with float values (the first parameter), radius *x* (the second
    parameter), and radius *y* (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawEllipse(x, y, w, h)`: This draws the ellipse with specified parameters—a rectangle
    beginning at `x` (*x* axis) and `y` (*y* axis) with `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QRect, QtGui.QImage)`: This draws the image specified
    in the second parameter in a rectangle with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QRectF, QtGui.QImage)`: This draws the image specified
    in the second parameter in a rectangle with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QPoint, QtGui.QImage)`: This draws the image specified
    in the second parameter at the point with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QPointF, QtGui.QImage)`: This draws the image specified
    in the second parameter at the point with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QRect, QtGui.QImage, QtCore.QRect, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with integer values (the third parameter)
    of the image (the second parameter) in a rectangle with integer values in the
    paint device (the first parameter) and with flags (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QPoint, QtGui.QImage, QtCore.QRect, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with integer values (the third parameter)
    of the image (the second parameter) at the point with integer values (the first
    parameter) and with flags (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QPointF, QtGui.QImage, QtCore.QRectF, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with float values (the third parameter)
    of the image (the second parameter) at the point with float values (the first
    parameter) and with flags (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(QtCore.QRectF, QtGui.QImage, QtCore.QRectF, QtCore.Qt.ImageConversionFlags)`:
    This draws a rectangular portion source with float values (the third parameter)
    of the image (the second parameter) in a rectangle with float values in the paint
    device (the first parameter) and with flags (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawImage(x, y, QtGui.QImage, tx, ly, w, h, QtCore.Qt.ImageConversionFlags)`:
    This draws the image (the second parameter) at the position, beginning at `x` (*x*
    axis) and `y` (*y* axis); with `tx` (top) and `ly` (left) points in the image
    with `w` (width) and `h` (height) with flags (the eighth parameter) in the paint
    device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLine(QtCore.QLine)`: This draws a line, as defined by the line
    with integer values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLine(QtCore.QLineF)`: This draws a line, as defined by the line
    with float values specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLine(QtCore.QPoint, QtCore.QPoint)`: This draws a line from the
    point with integer values (the first parameter) to the point with integer values
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLine(QtCore.QPointF, QtCore.QPointF)`: This draws a line from
    the point with float values (the first parameter) to the point with float values
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLine(x1, y1, x2, y2)`: This draws a line from `x1` (*x* axis)
    and `y1` (*y* axis) to `x2` (*x* axis) and `y2` (*y* axis).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLines([QtCore.QLine])`: This draws lines, with integer values,
    specified in the list of lines.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawLines([QtCore.QLineF])`: This draws lines, with float values,
    specified in the list of lines.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPath(QtGui.QPainterPath)`: This draws the path specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPicture(QtCore.QPoint, QtGui.QPicture)`: This draws a picture
    (the second parameter) at the point with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPicture(QtCore.QPointF, QtGui.QPicture)`: This draws a picture
    (the second parameter) at the point with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPicture(x, y, QPicture)`: This draws a picture (the third parameter)
    at the point specified by `x` (*x* axis) and `y` (*y* axis).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPie(QtCore.QRect, int, int)`: This draws a pie defined by the
    rectangle with integer values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPie(QtCore.QRectF, int, int)`: This draws a pie defined by the
    rectangle with float values (the first parameter) with a start angle (the second
    parameter) and a span angle (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPie(x, y, w, h, int, int)`: This draws a pie with specified parameters—a
    rectangle beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height); and with a start angle (the fifth parameter) and a span angle (the
    sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QRect, QtGui.QPixmap)`: This draws a pixmap (the
    second parameter) in a rectangle with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QPoint, QtGui.QPixmap)`: This draws a pixmap (the
    second parameter) at the point with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QPointF, QtGui.QPixmap)`: This draws a pixmap (the
    second parameter) at the point with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QRect, QtGui.QPixmap, QtCore.QRect)`: This draws
    the rectangular portion with integer values (the third parameter) of the pixmap
    (the second parameter) in a rectangle with integer values (the first parameter)
    in the paint device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QRectF, QtGui.QPixmap, QtCore.QRectF)`: This draws
    the rectangular portion with float values (the third parameter) of the pixmap
    (the second parameter) in a rectangle with float values (the first parameter)
    in the paint device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QPoint, QtGui.QPixmap, QtCore.QRect)`: This draws
    the rectangular portion with integer values (the third parameter) of the pixmap
    (the second parameter) at the point with integer values (the first parameter)
    in the paint device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(QtCore.QPointF, QtGui.QPixmap, QtCore.QRectF)`: This draws
    the rectangular portion with float values (the third parameter) of the pixmap
    (the second parameter) at the point with float values (the first parameter) in
    the paint device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(x, y, QtGui.QPixmap)`: This draws a pixmap specified in
    the third parameter at the beginning position according to `x` (*x* axis) and
    `y` (*y* axis).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(x, y, QtGui.QPixmap, tx, ly, w, h)`: This draws a pixmap
    (the third parameter) with parameters specified, beginning at `x` (*x* axis) and
    `y` (y axis); with `tx` (x-top) and `ly` (y-left), points; with size `w` (width)
    and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(x, y, w, h, QtGui.QPixmap, tx, ly, pw, ph)`: This draws
    a pixmap (the fifth parameter) with specified parameters, beginning from `x` (*x*
    axis) and `y` (*y* axis); with size `w` (width) and `h` (height); with `tx` (x-top);
    `ly` (y-left); with `pw` (width) and `ph` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmap(x, y, w, h, QtGui.QPixmap)`: This draws a pixmap (the fifth
    parameter) in a rectangle at a position according to `x` (*x* axis) and `y` (*y*
    axis), with size `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPixmapFragments([QtGui.QPainter.PixmapFragment], int, QtGui.QPixmap,
    QtGui.QPainter.PixmapFragmentHints)`: This draws a pixmap (the third parameter)
    at multiple positions (fragments) with scales, rotations, and opacity that may
    be different. The fragments (the first parameter) are an array of elements of
    the fragment count (the second parameter) that are used to draw each pixmap fragment,
    and hints (the fourth parameter) that constitute a drawing hint.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPoint(QtCore.QPoint)`: This draws a point at a position specified
    in the point parameter with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPointF(QtCore.QPoint)`: This draws a point at a position specified
    in the point parameter with float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPoint(x, y)`: This draws a point at a position with `x` (*x* axis)
    and `y` (*y* axis) specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPoints(QtGui.QPolygon)`: This draws the points specified in the
    vector as polygons with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPoints(QtGui.QPolygonF)`: This draws the points specified in the
    vector as polygons with float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPolygon(QtGui.QPolygon, QtCore.Qt.FillRule)`: This draws the polygon
    according to points specified in the polygon with integer values (the first parameter),
    and with rules (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPolygon(QtGui.QPolygonF, QtCore.Qt.FillRule)`: This draws the
    polygon according to points specified in the polygon with float values (the first
    parameter), and with rules (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPolyline(QtGui.QPolygon, QtCore.Qt.FillRule)`: This draws the
    polyline according to points specified in the polygon with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawPolyline(QtGui.QPolygonF, QtCore.Qt.FillRule)`: This draws the
    polyline according to points specified in the polygon with float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRect(QtCore.QRect)`: This draws the rectangle specified in the
    parameter with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRect(QtCore.QRectF)`: This draws the rectangle specified in the
    parameter with float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRect(x, y, w, h)`: This draws the rectangle, specified by `x` (*x*
    axis) and `y` (*y* axis) from the upper-left corner, with `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRects(QtCore.QRect, QtCore.QRect...)`: This draws the rectangles
    specified in the parameter with integer values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRects([QtCore.QRectF])`: This draws the rectangles specified in
    the parameter with float values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRoundRect(QtCore.QRect, rx, ry)`: This draws the rectangle with
    rounded corners, as specified in the rectangle (the first parameter) with integer
    values, with `rx` and `ry` (rounded corners of the rectangle).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRoundRect(QtCore.QRectF, rx, ry)`: This draws the rectangle with
    rounded corners, specified in the rectangle (the first parameter) with float values,
    with `rx` and `ry` (rounded corners of the rectangle).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRoundRect(x, y, w, h, rx, ry)`: This draws the rectangle with
    rounded corners, specified by parameters, beginning at `x` (*x* axis) and `y` (*y*
    axis); with `w` (width) and `h` (height); with `rx` and `ry` (rounded corners
    of the rectangle).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRoundedRect(QtCore.QRect, rx, ry, QtCore.Qt.SizeMode)`: This draws
    the rectangle with rounded corners, specified in the rectangle (the first parameter)
    with integer values, with `rx` and `ry` (rounded corners of the rectangle) and
    a mode (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRoundedRect(QtCore.QRectF, rx, ry, QtCore.Qt.SizeMode)`: This
    draws the rectangle with rounded corners, specified in the rectangle (the first
    parameter) with float values, with `rx` and `ry` (rounded corners of the rectangle) and
    a mode (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawRoundedRect(x, y, w, h, rx, ry, QtCore.Qt.SizeMode)`: This draws
    the rectangle with rounded corners, specified by parameters, beginning at the
    point `x` (*X* axis), and `y` (*Y* axis); with `w` width and `h` height; with
    `rx` and `ry` (rounded corners of the rectangle); and a mode (the seventh parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawStaticText(QtCore.QPoint, QtGui.QStaticText)`: This draws the
    static text (the second parameter) at the point with integer values (the first
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawStaticText(QtCore.QPointF, QtGui.QStaticText)`: This draws the
    static text (the second parameter) at the point with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawStaticText(int, int, QStaticText)`: This draws the static text
    (the third parameter) for the left (the first parameter) and top (the second parameter)
    coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawText(QtCore.QRect, flags, str)`: This draws the text (the third
    parameter) within the rectangle provided with integer values (the first parameter)
    and flags (the second parameter). The available flags can be used with OR (`|`)
    and are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignLeft`: Left alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignRight`: Right alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignHCenter`: Horizontal center alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignJustify`: Justified alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignTop`: Top alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignBottom`: Bottom alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignVCenter`: Vertical center alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AlignCenter`: Center alignment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TextDontClip`: The text won''t clip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TextSingleLine`: The text in single line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TextExpandTabs`: This makes the ASCII tab character move to the
    next stop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TextShowMnemonic`: Displays strings such as `"&P"` as `P`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TextWordWrap`: Breaks lines by words.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TextIncludeTrailingSpaces`: If this is used, `naturalTextWidth()`
    and `naturalTextRect()` will return a value that includes the width of trailing
    spaces in the text; otherwise, it is excluded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`painter.drawText(QtCore.QRectF, flags, str)`: This draws the text (the third
    parameter) within the rectangle provided with float values (the first parameter)
    and flags (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawText(x, y, str)`: This draws the text (the third parameter) at
    the position according to `x` (*x* axis) and `y` (*y* axis).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawText(x, y, w, h, flags, str)`: This draws the text (the sixth
    parameter) beginning at the position according to `x` (*x* axis) and `y` (*y*
    axis), along with `w` (width) and `h` (height) and flags (the fifth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawText(QtCore.QRectF, str, QtGui.QTextOption)`: This draws the text
    (the second parameter) in the rectangle with float values (the first parameter)
    and a text option (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawText(QtCore.QPoint, str)`: This draws the text (the second parameter)
    at the point with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawText(QtCore.QPointF, str)`: This draws the text (the second parameter)
    at the point with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawTextItem(QtCore.QPoint, QtGui.QTextItem)`: This draws a text item
    (the second parameter) at the point with integer values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawTextItem(QtCore.QPointF, QtGui.QTextItem)`: This draws a text
    item (the second parameter) at the point with float values (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawTextItem(x, y, QtGui.QTextItem)`: This draws a text item (the
    third parameter) beginning at the position according to `x` (*x* axis) and `y` (*y*
    axis).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawTiledPixmap(QtCore.QRect, QtGui.QPixmap, QtCore.QPoint)`: This
    draws the tiled pixmap (the second parameter) in the rectangle with integer values
    (the first parameter), beginning at the point with integer values (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawTiledPixmap(QtCore.QRectF, QtGui.QPixmap, QtCore.QPointF)`: This
    draws the tiled pixmap (the second parameter) in the rectangle with float values
    (the first parameter), beginning at the point with float values (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.drawTiledPixmap(x, y, w, h, QtGui.QPixmap, tx, ly)`: This draws the
    tiled pixmap (the fifth parameter) in the rectangle specified, beginning at `x` (*x*
    axis), `y` (*y* axis); with `w` width and `h` (height); and with `tx` (top), and `ly` (left)
    points in the pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: fill
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to filling with this painter:'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillPath(QtGui.QPainterPath, QtGui.QBrush)`: This fills the path specified
    in the first parameter using a brush (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRect, QtCore.Qt.GlobalColor)`: This fills the rectangle
    represented with integer values (the first parameter) with the color specified
    in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRectF, QtCore.Qt.GlobalColor)`: This fills the rectangle
    represented with float values (the first parameter) with the color specified in
    the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRect, QtGui.QColor)`: This fills the rectangle represented
    with integer values (the first parameter) with the color specified in the second
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRectF, QtGui.QColor)`: This fills the rectangle represented
    with float values (first parameter) with the color specified in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRect, QtGui.QBrush)`: This fills the rectangle represented
    with integer values (the first parameter) with the brush specified in the second
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRectF, QtGui.QBrush)`: This fills the rectangle represented
    with float values (the first parameter) with the brush specified in the second
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRect, QtGui.QGradient.Preset)`: This fills the rectangle
    represented with integer values (the first parameter) using the preset gradient specified
    in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRectF, QtGui.QGradient.Preset)`: This fills the rectangle
    represented with float values (the first parameter) using the preset gradient specified
    in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRect, QtCore.Qt.BrushStyle)`: This fills the rectangle
    represented with integer values (the first parameter) with the brush style specified
    in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(QtCore.QRectF, QtCore.Qt.BrushStyle)`: This fills the rectangle
    represented with float values (the first parameter) with the brush style specified
    in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(x, y, w, h, QtGui.QGradient.Preset)`: This fills the rectangle
    specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height), using the preset gradient specified in the fifth parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(x, y, w, h, QtCore.Qt.BrushStyle)`: This fills the rectangle
    specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height), using the brush style specified in the fifth parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(x, y, w, h, QtGui.QColor)`: This fills the rectangle specified,
    beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and `h` (height),
    using the color specified in the fifth parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(x, y, w, h, QtGui.QBrush)`: This fills the rectangle specified,
    beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and `h` (height),
    using the brush specified in the fifth parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`painter.fillRect(x, y, w, h, QtCore.Qt.GlobalColor)`: This fills the rectangle
    specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width) and
    `h` (height), using the color specified in the fifth parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QPen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a means of drawing outlines of shapes and lines with the
    `QPainter` class. The declaration of the pen is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `QPen` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that set the parameters and properties of the pen:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setBrush(QtGui.QBrush)`: This sets the brush specified in the parameter
    that will be used to fill strokes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setCapStyle(QtCore.Qt.PenCapStyle)`: This sets the caps style of the pen
    to the style specified in the parameter. The styles that are available are `QtCore.Qt.SquareCap`,
    `QtCore.Qt.FlatCap`, and `QtCore.Qt.RoundCap`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setColor(QtGui.QColor)`: This sets the brush color of this pen to the
    color specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setCosmetic(bool)`: If the parameter is `True`, this sets this pen as
    cosmetic. Cosmetic pens draw the strokes with a constant width, regardless of
    any transformations. Shapes drawn with a cosmetic pen ensure that the outline
    will have the same thickness.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setDashOffset(float)`: This sets the offset specified in the parameter
    for the dash.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setDashPattern([float])`: This sets the dash pattern, specified in the
    parameter, as an iterable of float values and must be `[1.0, 2.0, 3.0, 4.0]`,
    where `1.0` and `3.0` are dashes, and `2.0` and `4.0` are spaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setJoinStyle(QtCore.Qt.PenJoinStyle)`: This sets the join style of the
    pen to the style specified in the parameter. The styles that are available are `QtCore.Qt.BevelJoin`,
    `QtCore.Qt.MiterJoin`, and `QtCore.Qt.RoundJoin`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setMiterLimit(float)`: This sets the pen''s miter limit.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setStyle(QtCore.Qt.PenStyle)`: This sets the style for this pen. The styles
    that are available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.Qt.SolidLine`: Plain line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DashLine`: Separated dashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DotLine`: Separated dots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DashDotLine`: Dots and dashes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DashDotDotLine`: One dash, two dots, one dash, two dots.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.CustomDashLine`: Will be the custom pattern that defined using `setDashPattern()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.NoPen`: No line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pen.setWidth(int)`: This sets the width specified in the parameter as an integer
    value, and is used as the width of pen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.setWidth(float)`: This sets the width specified in the parameter as a
    float value, and is used as the width of pen.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the pen:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.isCosmetic()`: This returns `True` if this pen is cosmetic.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.isSolid()`: This returns `True` if this is a solid fill pen.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values for
    this pen:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.brush()`: This returns the brush of the `QtGui.QBrush` type, and is used
    to fill strokes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.capStyle()`: This returns the cap style of the `QtCore.Qt.PenCapStyle`
    type, as used with this pen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.color()`: This returns the color of the `QtGui.QColor` type, as used with
    this pen''s brush.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.dashOffset()`: This returns the pen''s dash offset.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.dashPattern()`: This returns the pen''s dash pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.joinStyle()`: This returns the join style of the `QtCore.Qt.PenJoinStyle`
    type, as used with this pen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.miterLimit()`: This returns the pen''s miter limit.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.style()`: This returns the style of this pen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.swap(QtGui.QPen)`: This swaps the pen specified in the parameter with
    this pen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.width()`: This returns the width of this pen as an integer value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pen.widthF()`: This returns the width of this pen as a float value.'
  prefs: []
  type: TYPE_NORMAL
- en: QBrush
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The brush describes the fill pattern of shapes that are drawn using the `QPainter`
    class. The declaration of the brush is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `QBrush` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters and properties in relation
    to the brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.setColor(QtGui.QColor)`: This sets the color specified in the parameter
    for this brush.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.setColor(QtCore.Qt.GlobalColor)`: This sets the global color specified
    in the parameter for this brush.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.setStyle(QtCore.Qt.BrushStyle)`: This sets the style specified in the
    parameter for this brush. The available brush styles are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.Qt.NoBrush`—`0`: No brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.SolidPattern`—`1`: Uniform brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense1Pattern`—`2`: Extremely dense brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense2Pattern`—`3`: Very dense brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense3Pattern`—`4`: Somewhat dense brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense4Pattern`—`5`: Half dense brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense5Pattern`—`6`: Somewhat sparse brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense6Pattern`—`7`: Very sparse brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Dense7Pattern`—`8`: Extremely sparse brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.HorPattern`—`9`: Horizontal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.VerPattern`—`10`: Vertical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.CrossPattern`—`11`: Crossing horizontal/vertical.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.BDiagPattern`—`12`: Backward diagonal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.FDiagPattern`—`13`: Forward diagonal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DiagCrossPattern`—`14`: Crossing diagonal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.LinearGradientPattern`—`15`: Linear gradient brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.RadialGradientPattern`—`16`: Radial gradient brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.ConicalGradientPattern`—`17`: Conical gradient brush.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.TexturePattern`—`24`: Custom.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`brush.setTexture(QtGui.QPixmap)`: This sets the pixmap specified in the parameter
    to a brush pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.setTextureImage(QtGui.QImage)`: This sets the image specified in the
    parameter to a brush image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.setTransform(QtGui.QTransform)`: This sets the matrix specified in the
    parameter as an explicit transformation matrix on the brush.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.isOpaque()`: This returns `True` if the brush is fully opaque.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the brush:'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.color()`: This returns the color of the `QtGui.QColor` type, as used
    with this brush.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.gradient()`: This returns the gradient of the `QtGui.QGradient` type,
    as used with this brush.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.style()`: This returns the style of the `QtCore.Qt.BrushStyle` type,
    as used with this brush.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.swap(QtGui.QBrush)`: This swaps this brush with the brush specified
    in the parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.texture()`: This returns the custom brush pattern of the `QtGui.QPixmap`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.textureImage()`: This returns the custom brush pattern of the `QtGui.QImage`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`brush.transform()`: This returns the current transformation matrix of the
    `QtGui.QTransform` type, as used with this brush.'
  prefs: []
  type: TYPE_NORMAL
- en: QGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class is used together with the `QBrush` style for implementing simple
    gradients in the graphics creation. The declaration syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `QGradient` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient.setColorAt(float, QtGui.QColor)`: This creates a stop point at the
    position specified in the first parameter (`0.0`–`1.0`) with the color specified
    in the second parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient.setCoordinateMode(QtGui.QGradient.CoordinateMode)`: This sets the
    coordinate mode specified in the parameter for this gradient. The available parameters
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.LogicalMode`—`0`: Coordinates are specified in a logical space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.StretchToDeviceMode`—`1`: Coordinates are relative to the
    rectangle of the paint device.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.ObjectMode`—`3`: Coordinates are relative to the rectangle
    of the object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient.setSpread(QtGui.QGradient.Spread)`: This sets the spread method specified
    in the parameter for this gradient. The available spreads are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.PadSpread`—`0`: Filled with the closest stop color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.ReflectSpread`—`1`: Reflected outside the gradient area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.RepeatSpread`—`2`: Repeated outside the gradient area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gradient.setStops([float])`: This replaces the current set of stop points
    with the stop points specified in the parameter. The points must be sorted with
    the lowest point first, and in the range of `0.0` to `1.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient.coordinateMode()`: This returns the gradient''s coordinate mode of
    the `QtGui.QGradient.CoordinateMode` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient.spread()`: This returns the spread method of the `QtGui.QGradient.Spread`
    type used with this gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient.stops()`: This returns the stop points used with this gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient.type()`: This returns the gradient type. The types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.LinearGradient`—`0`: Colors between the start and end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.RadialGradient`—`1`: Colors between a point and its end.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.ConicalGradient`—`2`: Colors around a center.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QGradient.NoGradient`—`3`: No gradients.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QLinearGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a subclass of the `QGradient` class and represents the linear gradient
    that fills colors between the start and end points. The declaration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '`QLinearGradient` inherits from the `QGradient` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the linear gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear_gradient.setFinalStop(QtCore.QPointF)`: This sets the final stop point
    with float values specified in the parameter for this linear gradient in logical
    coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear_gradient.setFinalStop(x, y)`: This sets the final stop point with float
    values at the point according to the `x` (*x* axis) and `y` (*y* axis) positions
    of this linear gradient in logical coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear_gradient.setStart(QtCore.QPointF)`: This sets the start point with
    float values specified in the parameter for this linear gradient in logical coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear_gradient.setStart(x, y)`: This sets the start point with float values
    at the point according to the `x` (*x* axis) and `y` (*y* axis) positions of this
    linear gradient in logical coordinates'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the linear gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear_gradient.finalStop()`: This returns the final stop point of the `QtCore.QPointF`
    type, in logical coordinates, for this linear gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`linear_gradient.start()`: This returns the start point of the `QtCore.QPointF`
    type, in logical coordinates, for this linear gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: QRadialGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a subclass of the `QGradient` class and represents the radial gradient
    that fills colors between the focal point and its end points. The declaration
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '`QRadialGradient` inherits from the `QGradient` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the radial gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setCenter(QtCore.QPointF)`: This sets the center point with
    float values specified in the parameter for this radial gradient in logical coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setCenter(x, y)`: This sets the center with float values at
    the point according to the `x` (*x* axis) and `y` (*y* axis) positions of this
    radial gradient in logical coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setCenterRadius(float)`: This sets the center radius, in logical
    coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setFocalPoint(QtCore.QPointF)`: This sets the focal point
    with float values specified in the parameter for this radial gradient in logical
    coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setFocalPoint(x, y)`: This sets the focal point with float
    values at the `x` (*x* axis) and `y` (*y* axis) positions for this radial gradient
    in logical coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setFocalRadius(float)`: This sets the focal radius specified
    in the parameter, in logical coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.setRadius(float)`: This sets the radius specified in the parameter,
    in logical coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the radial gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.center()`: This returns the center of the `QtCore.QPointF`
    type, in logical coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.centerRadius()`: This returns the center radius as a float
    value, in logical coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.focalPoint()`: This returns the focal point of the `QtCore.QPointF`
    type, in logical coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.focalRadius()`: This returns the focal radius as a float value,
    in logical coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radial_gradient.radius()`: This returns the radius as a float value, in logical
    coordinates, for this radial gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: QConicalGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a subclass of the `QGradient` class and represents the conical gradient
    that fills colors around a center point. The declaration is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '`QConicalGradient` inherits from the `QGradient` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to setting parameters and properties in relation
    to the conical gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conical_gradient.setAngle(float)`: This sets the start angle specified in
    the parameter, in logical coordinates, for this conical gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`conical_gradient.setCenter(QtCore.QPointF)`: This sets the center point with
    float values specified in the parameter for this conical gradient in logical coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`conical_gradient.setCenter(x, y)`: This sets the center with float values
    at the point according to the `x` (*x* axis) and `y` (y axis) positions for this
    conical gradient in logical coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the conical gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '`conical_gradient.angle()`: This returns the start angle as a float value,
    in logical coordinates, for this conical gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`conical_gradient.center()`: This returns the center of the `QtCore.QPointF`
    type, in logical coordinates, for this conical gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt library provides a complete set of classes for working with different
    types of images. All the most popular formats for working with images are supported.
    The principal ones are described here.
  prefs: []
  type: TYPE_NORMAL
- en: QPicture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class represents the paint device that replays and records the commands
    of the `QPainter` class. With this class, the painting commands of `QPainter`
    can be serialized to the I/O device in a platform-independent format and represented
    as a picture. This is used to save painting pictures and to load it. The picture
    will be saved in a file with a name such as `filename.pic` for later use. The
    declaration of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '`QPicture` inherits from the `QPaintDevice` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.setBoundingRect(QtCore.QRect)`: This sets the bounding rectangle specified
    in the parameter for this picture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.setData(bytes)`: This sets the data for this picture from the data
    specified in the parameter. It also copies the input data.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.isNull()`: This returns `True` if this picture does not contain any
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the picture, or functional instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.boundingRect()`: This returns the bounding rectangle of the `QtCore.QRect`
    type for this picture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.data()`: This returns a pointer to the data of this picture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.inputFormats()`: This returns a list of formats that are supported
    for picture input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.load(r"/Path/To/filename.pic")`: This loads a picture from the file
    specified in the parameter, and returns `True` if successful.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.outputFormats()`: This returns a list of formats that are supported
    for picture output.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.pictureFormat(r"/Path/To/filename.pic")`: This returns the format
    of the picture specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.play(QtGui.QPainter)`: This replays the picture with the painter specified
    in the parameter, and returns `True` if successful.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.save(r"/Path/To/filename.pic")`: This saves the picture created to
    the file specified in the parameter, and returns `True` if successful.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.size()`: This returns the picture''s data size.'
  prefs: []
  type: TYPE_NORMAL
- en: '`picture.swap(QtGui.QPicture)`: This swaps this picture with the picture specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QPixmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QPixmap` class provides a way to work with pixel mapped data. Pixmap allows
    a pixel to be any color. It is an off-screen representation of the images and
    can be used for direct pixel access and manipulations with them. The declaration
    of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '`QPixmap` inherits from the `QPaintDevice` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the pixmap:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.setDevicePixelRatio(float)`: This sets the device pixel ratio specified
    in the parameter for this pixmap. It represents the ratio between pixmap pixels
    and device-independent pixels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pixmap.setMask(QtGui.QBitmap)`: This sets the mask bitmap specified in the
    parameter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is/has
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the pixmap
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.hasAlpha()`: This returns `True` if it has an alpha channel or mask
    for this pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.hasAlphaChannel()`: This returns `True` if it has a format that respects
    the alpha channel for this pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.isNull()`: This returns `True` if this pixmap is `null` (no data).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.isQBitmap()`: This returns `True` if this is a `QtGui.QBitmap` type.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the pixmap, or
    to functional instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.cacheKey()`: This returns the key as an identifier of this pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.convertFromImage(QtGui.QImage, QtCore.Qt.ImageConversionFlags)`: This
    replaces the pixmap data of the image (the first parameter) with the conversion
    specified in flags (the second parameter). The available conversion flags are `QtCore.Qt.AutoColor`,
    `QtCore.Qt.ColorOnly`, and `QtCore.Qt.MonoOnly` (monochrome).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.copy(QtCore.QRect)`: This returns the deep copy of the pixmap subset
    of the `QtGui.QPixmap` type for the rectangle specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.copy(x, y, w, h)`: This returns the deep copy of the pixmap subset
    of the `QtGui.QPixmap` type for the rectangle specified, beginning at `x` (*x*
    axis) and `y` (*y* axis); with `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.createHeuristicMask(bool)`: If this parameter is `True`, it creates
    the heuristic mask of the `QtGui.QBitmap` type for this pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.createMaskFromColor(QtGui.QColor, QtCore.Qt.MaskMode)`: This creates
    and returns the mask of the `QtGui.QBitmap` type for this pixmap. The mask will
    be based on the color (the first parameter) and relative to the mask mode (the
    second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.defaultDepth()`: This returns the pixmap depth used by default with
    this application.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.depth()`: This returns the pixmap depth (**bits per pixel** (**bpp**)
    or bit planes).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.detach()`: This detaches this pixmap from the shared data of this pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.devicePixelRatio()`: This returns the ratio between device pixels and
    device-independent pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.fill(QtGui.QColor)`: This fills this pixmap with colors specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.fromImage(QtGui.QImage, QtCore.Qt.ImageConversionFlags)`: This converts
    the image (the first parameter) into the pixmap using flags (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.fromImageReader(QtGui.QImageReader, QtCore.Qt.ImageConversionFlags)`:
    This creates the pixmap from the image reader (the first parameter) directly using
    flags (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.load(r"/Path/To/filename.png", str, QtCore.Qt.ImageConversionFlags)`:
    This loads a pixmap from the file (the first parameter) with the format (the second
    parameter) and flags (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.loadFromData(QtCore.QByteArray, str, QtCore.Qt.ImageConversionFlags)`:
    This loads a pixmap from the binary data (the first parameter) with the format
    (the second parameter) and flags (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.mask()`: This extracts the bitmap mask from the alpha channel of the
    pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.rect()`: This returns the enclosing rectangle of this pixmap.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.save(r"/Path/To/filename.png", str, int)`: This saves the pixmap to
    the file (the first parameter) with the format (the second parameter) and quality
    factor (the third parameter). The quality factor must be in the range of `0` to
    `100`, or `-1` (the default settings).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.scaled(QtCore.QSize, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This scales this pixmap to the size (the first parameter) with the aspect ratio
    (the second parameter) and transformation mode (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.scaled(w, h, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This scales this pixmap to the rectangle with `w` (width) and `h` (height), along
    with the aspect ratio (the second parameter) and transformation mode (the third
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.scaledToHeight(h, QtCore.Qt.TransformationMode)`: This scales this
    pixmap in relation to `h` (height), along with the transformation mode (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.scaledToWidth(w, QtCore.Qt.TransformationMode)`: This scales this pixmap
    in relation to the `w` (width), along with transformation mode (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.scroll(dx, dy, QtCore.QRect, QtGui.QRegion)`: This scrolls the area
    of the rectangle (the third parameter) of this pixmap according to `dx` and `dy`
    integer values. The exposed region (the fourth parameter) is unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.scroll(dx, dy, x, y, w, h, QtGui.QRegion)`: This scrolls the area of
    the rectangle specified, beginning at `x` (*x* axis) and `y` (*y* axis); with
    `w` (width) and `h` (height) of this pixmap according to `dx` and `dy` integer
    values. The exposed region (the fourth parameter) is unchanged.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.size()`: This returns the pixmap''s size.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.swap(QtGui.QPixmap)`: This swaps this pixmap with the pixmap specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.toImage()`: This converts the pixmap and returns the image of the `QtGui.QImage`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.transformed(QtGui.QTransform, QtCore.Qt.TransformationMode)`: This
    returns the copy of the transformed pixmap using the transformation (the first
    parameter) and transformation mode (the second parameter). The original pixmap
    will not change.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixmap.trueMatrix(QtGui.QTransform, w, h)`: This returns the actual matrix
    used for transforming this pixmap, along with the matrix (the first parameter)
    and `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: QBitmap
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QBitmap` class provides a way of working with monochrome or 1-bit depth
    pixel-mapped data. It is an offscreen paint device that''s used for creating custom
    cursors and brushes, and for constructing objects such as `QRegion`, and masks
    for pixmaps and widgets. The declaration of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '`QBitmap` inherits from the `QPixmap` class and improves functionality by means
    of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the bitmap, or to functional instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`bitmap.clear()`: This clears this bitmap and sets all the bits to `Qt.color0`,
    or a zero pixel value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`bitmap.fromData(QtCore.QSize, bytes, QtGui.QImage.Format)`: This constructs
    this bitmap with the size (the first parameter) and sets the contents to the bits
    (the second parameter), byte aligned, in bit order (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`bitmap.swap(QtGui.QBitmap)`: This swaps this bitmap with the bitmap specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`bitmap.transformed(QtGui.QTransform)`: This returns the copy of the transformed
    bitmap using the transformation specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QImage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the image representation as hardware-independent, and is
    used for working with images. It also allows direct access to the pixel data. The
    declaration of the `QImage` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '`QImage` inherits from the `QPaintDevice` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters and properties in
    relation to the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setAlphaChannel(QtGui.QImage)`: This sets the alpha channel of this
    image to the one specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setColor(int, int)`: This sets the color with the index (the first parameter)
    in the color table, and to the color value (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setColorCount(int)`: This resizes the color table count to the value
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setColorTable([int])`: This sets the color table to the colors specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setDevicePixelRatio(float)`: This sets the device pixel ratio specified
    in the parameter for this image. This is the ratio between image pixels and device-independent
    pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setDotsPerMeterX(int)`: This sets the number of pixels that will be
    located by the *x* axis in the physical meter. This will describe the scale and
    aspect ratio of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setDotsPerMeterY(int):` This sets the number of pixels that will be
    located by the *y* axis in the physical meter. This will describe the scale and
    aspect ratio of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setOffset(QtCore.QPoint)`: This sets the number of pixels by which the
    image is offset relative to other images, to the point specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setPixel(QtCore.QPoint, int)`: This sets the pixel index or color specified
    in the second parameter at the point (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setPixel(x, y, int)`: This sets the pixel index or color specified in
    the third parameter at the coordinates `x` and `y`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setPixelColor(QtCore.QPoint, QtGui.QColor)`: This sets the pixel at
    the point (the first parameter) to the color (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setPixel(x, y, QtGui.QColor)`: This sets the pixel at the coordinates
    `x` and `y` to a color (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.setText(str, str)`: This sets the text of the image (the second parameter)
    and associates it with the key (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: has and is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the image
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.hasAlphaChannel()`: This returns `True` if it has a format that respects
    the alpha channel in relation to this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.isGrayscale()`: This returns `True` if all the colors in this image
    are shades of gray.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.isNull()`: This returns `True` if this image is `null` (no data).'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the image, or
    to functional instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.allGray()`: This returns `True` if all the colors in this image are
    shades of gray.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.bitPlaneCount()`: This returns the number of image bit planes—the number
    of bits of color and transparency for each pixel.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.byteCount()`: This returns the number of bytes occupied by this image
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.bytesPerLine()`: This returns the number of bytes per image scanline.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.cacheKey()`: This returns the key as an identifier of this image''s
    contents.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.color(int)`: This returns the color, at the index specified in the parameter,
    in the color table. The indexes start from `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.colorTable()`: This returns a list of the colors in the color table
    of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.constBits()`: This returns a pointer to the first pixel data.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.constScanLine(int)`: This returns a pointer to the pixel data at the
    scanline that has the index specified in the parameter. The indexes start from
    `0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.convertToFormat(QtGui.QImage.Format, [int], QtCore.Qt.ImageConversionFlags)`:
    This returns a copy of the image converted into the format (the first parameter)
    using the color table (the second parameter) and flags (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.copy(QtCore.QRect)`: This returns a sub-area of the image with the size
    of the rectangle specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.copy(x, y, w, h)`: This returns the image that will be copied from the
    rectangle specified, beginning at `x` (*x* axis) and `y` (*y* axis); with `w` (width)
    and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.createAlphaMask(QtCore.Qt.ImageConversionFlags)`: This creates and returns
    a 1-bit per pixel mask from the alpha buffer in the image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.createHeuristicMask(bool)`: This creates and returns a 1-bit per pixel
    mask for the image. If the parameter is `True`, the mask is enough to cover the
    pixels; otherwise, the mask is larger than the data pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.createMaskFromColor(int, QtCore.Qt.MaskMode)`: This creates and returns
    the mask based on the color (the first value) and the mode (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.depth()`: This returns the depth of the image (`bpp`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.devicePixelRatio()`: This returns the ratio between device pixels and
    device-independent pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.dotsPerMeterX()`: This returns the number of pixels located by the *X*
    axis in the physical meter. This describes the scale and aspect ratio of this
    image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.dotsPerMeterY()`: This returns the number of pixels located by the *Y*
    axis in the physical meter. This describes the scale and aspect ratio of this
    image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.fill(QtCore.Qt.GlobalColor)`: This fills this image with the color specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.fill(QtGui.QColor)`: This fills this image with the color specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.fill(int)`: This fills this image with the pixel value specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.format()`: This returns the format of the `QtGui.QImage.Format` type
    of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.fromData(bytes, str)`: This loads this image from the `QtCore.QByteArray`
    data.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.invertPixels(QtGui.QImage.InvertMode)`: This inverts all pixel values
    of this image by using the mode specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.load(r"/Path/To/filename.png", str)`: This loads the image from the
    file (the first parameter) with the format (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.load(QtCore.QIODevice, str)`: This reads the image from the device (the
    first parameter) with the format (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.loadFromData(bytes, str)`: This loads the image from bytes (the first
    parameter) with the format (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.mirrored(bool, bool)`: This returns the mirror of the image; the mirrored
    direction will be horizontal if the first parameter is `True`, or vertical if
    the second parameter is `True`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.offset()`: This returns the number of pixels by which the image is to
    be offset relative to other images.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixel(QtCore.QPoint)`: This returns the pixel at the point specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixel(x, y)`: This returns the pixel at the `x` and `y` coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixelColor(QtCore.QPoint)`: This returns the color of the pixel at the
    point specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixelColor(x, y)`: This returns the color of the pixel at the `x` and
    `y` coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixelFormat()`: This returns the format as the `QtGui.QPixelFormat`
    of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixelIndex(QtCore.QPoint)`: This returns the index of the pixel at the
    position of the point specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.pixelIndex(x, y)`: This returns the index of the pixel at the `x` and
    `y` coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.rect()`: This returns the rectangle of the `QtCore.QRect` type enclosing
    this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.reinterpretAsFormat(QtGui.QImage.Format)`: This changes the image''s
    format to that specified in the parameter; the data will not change.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.rgbSwapped()`: This returns the image with the values of the red and
    blue components swapped for all pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.save(r"/Path/To/filename.png", str, int)`: This saves the image to the
    file (the first parameter) with the format (the second parameter) and quality
    factor (the third parameter). The quality factor must be in the range of `0` (small,
    compressed) to `100` (large, uncompressed) or `-1` (the default settings).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.scaled(QtCore.QSize, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This returns a copy of this image scaled to size (the first parameter), along
    with the aspect ratio (the second parameter) and transformation mode (the third
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.scaled(w, h, QtCore.Qt.AspectRatioMode, QtCore.Qt.TransformationMode)`:
    This returns a copy of this image scaled to the rectangle with `w` (width) and
    `h` (height), along with the aspect ratio (the second parameter) and transformation
    mode (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.scaledToHeight(h, QtCore.Qt.TransformationMode)`: This returns a copy
    of this image scaled in relation to the `h` (height), along with the transformation
    mode (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.scaledToWidth(w, QtCore.Qt.TransformationMode)`: This returns a copy
    of this image scaled in relation to the `w` (width), along with the transformation
    mode (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.size()`: This returns the size of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.sizeInBytes()`: This returns the size of the image data in bytes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.smoothScaled(w, h)`: This returns a copy of the image, smoothly scaled,
    with a size of `w` (width) and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.swap(QtGui.QImage)`: This swaps this image with the image specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.text(str)`: This returns the text of the image associated with the key
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.textKeys()`: This returns the list of keys for the text of this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.toImageFormat(QtGui.QPixelFormat)`: This converts the format specified
    in the parameter into the `QtGui.QImage.Format` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.toPixelFormat(QtGui.QImage.Format)`: This converts the format specified
    in the parameter into the `QtGui.QPixelFormat` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.transformed(QtGui.QTransform, QtCore.Qt.TransformationMode)`: This returns
    a copy of the transformed image by using transformation (the first parameter)
    and transformation mode (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.trueMatrix(QtGui.QTransform, w, h)`: This returns the actual matrix
    used to transform this image with matrix (the first parameter) and `w` (width)
    and `h` (height).'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.valid(QPoint)`: This returns `True` if the point specified in the parameter
    is a valid coordinate in this image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`image.valid(x, y)`: This returns `True` if the point specified as coordinates
    of `x` and `y` is a valid coordinate in this image.'
  prefs: []
  type: TYPE_NORMAL
- en: QIcon
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class implements scalable icons in the GUI application. These can be used
    with widgets, buttons, or as window icons. The declaration syntax of the icon
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`QIcon` improves functionality with the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to the addition of icons:'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.addFile(r"/Path/To/filename.png", QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    This adds the image from the file (the first parameter) to the icon. It is specified
    with a size (the second parameter), a mode (the third parameter), and a state
    (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.addPixmap(QtGui.QPixmap, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This
    adds the pixmap (the first parameter) to the icon. It is specified with a mode
    (the second parameter) and state (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that set parameters and properties in relation to the icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.setFallbackSearchPaths([str])`: This sets the fallback search paths as
    a list of paths for icon fallbacks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.setIsMask(bool)`: If the parameter is `True`, this stipulates that this
    icon is a mask image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.setThemeName(str)`: This sets the icon theme name as the one specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.setThemeSearchPaths([str])`: This sets the theme search path as a list
    of paths for icon themes.'
  prefs: []
  type: TYPE_NORMAL
- en: has/is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the image
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.hasThemeIcon(str)`: This returns `True` if the icon is available for
    the name specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.isMask()`: This returns `True` if the icon is marked as a mask image.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.isNull()`: This returns `True` if the icon is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the icon, or functional instruments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.actualSize(QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This
    returns the actual size of the icon for the size (the first parameter), mode (the
    second parameter), and state (the third parameter). The available icon modes are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QIcon.Normal`—`0`: No interactions with the icon; functionality is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QIcon.Disabled`—`1`: Functionality is not available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QIcon.Active`—`2`: Interactions with the icon; functionality is available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QIcon.Selected`—`3`: The icon is selected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The icon states are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QIcon.On`—`0`: Widget is in the *on* state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtGui.QIcon.Off`—`1`: Widget is in the *off* state.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon.actualSize(QtGui.QWindow, QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    This returns the actual size of the icon in relation to the window (the first
    parameter) with size (the second parameter), mode (the third parameter), and state
    (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.availableSizes(QtGui.QIcon.Mode, QtGui.QIcon.State)`: This returns the
    list of available sizes of the icon in relation to the mode (the first parameter)
    and state (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.cacheKey()`: This returns the key as an identifier of the icon contents.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.fallbackSearchPaths()`: This returns the list of the fallback search
    paths for icons.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.fromTheme(str)`: This returns the icon corresponding to the name specified
    in the parameter, in the current icon theme.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.fromTheme(str, QtGui.QIcon)`: This returns the icon corresponding to
    the name (the first parameter); if the icon is not found, this returns a fallback
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.name()`: This returns the name of the icon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.paint(QtGui.QPainter, QtCore.QRect, QtCore.Qt.Alignment, QtGui.QIcon.Mode,
    QtGui.QIcon.State)`: This paints the icon with specified parameters using the
    painter (the first parameter) to the rectangle (the second parameter), alignment
    (the third parameter), mode (the fourth parameter), and state (the fifth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.paint(QtGui.QPainter, x, y, w, h, QtCore.Qt.Alignment, QtGui.QIcon.Mode,
    QtGui.QIcon.State)`: This paints the icon with specified parameters using the
    painter (the first parameter) to the rectangle beginning at `x` (*x* axis) and
    `y` (*y* axis), with `w` (width) and `h` (height) size, and alignment (the third
    parameter), mode (the fourth parameter), and state (the fifth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.pixmap(QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This returns
    the pixmap with the specified size (the first parameter), mode (the second parameter),
    and state (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.pixmap(w, h, QtGui.QIcon.Mode, QtGui.QIcon.State)`: This returns the
    pixmap with a specified `w` (width), and `h` (height), mode (the third parameter),
    and state (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.pixmap(QtGui.QWindow, QtCore.QSize, QtGui.QIcon.Mode, QtGui.QIcon.State)`:
    This returns the pixmap with a specified window (the first parameter), size (the
    second parameter), mode (the third parameter), and state (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.swap(QtGui.QIcon)`: This swaps this icon with the icon specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.themeName()`: This returns the current icon theme name.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon.themeSearchPaths()`: This returns the paths for searching icon themes.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter described the basic classes in terms of managing graphical elements
    and painting using the Qt library. The aim of the Qt framework is to develop the
    graphical applications, graphical tools, and classes related to creating graphics,
    and ensure they are widespread. Where possible, the main ones will be discussed
    in this book.
  prefs: []
  type: TYPE_NORMAL
- en: While this chapter concerned itself with basic classes, in the next chapter,
    we will discuss the model/view paradigm for creating graphical representations
    in the application and the classes for implementing this.
  prefs: []
  type: TYPE_NORMAL
