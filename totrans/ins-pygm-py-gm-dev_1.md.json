["```py\n    sudo apt-get install python\n    sudo apt-get install python-dev\n\n    ```", "```py\n    sudo apt-get install python-numpy\n\n    ```", "```py\n    sudo port install python26\n\n    ```", "```py\n    python setup.py\n\n    ```", "```py\n    python setup.py help\n\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    ```", "```py\n    pygame.init()\n    screen = pygame.display.set_mode((400, 300))\n\n    pygame.display.set_caption('Hello World!')\n    ```", "```py\n    while True: \n       sys_font = pygame.font.SysFont(\"None\", 19)\n       rendered = sys_font.render('Hello World', 0, (255, 100, 100))\n       screen.blit(rendered, (100, 100))\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n\n    pygame.init()\n    screen = pygame.display.set_mode((400, 300))\n\n    pygame.display.set_caption('Hello World!')\n\n    while True: \n       sysFont = pygame.font.SysFont(\"None\", 19)\n       rendered = sysFont.render('Hello World', 0, (255, 100, 100))\n       screen.blit(rendered, (100, 100))\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    import numpy \n    ```", "```py\n    colors = numpy.random.randint(0, 255, size=(4, 3))\n    ```", "```py\n    WHITE = (255, 255, 255)\n    ```", "```py\n    screen.fill(WHITE)\n    ```", "```py\n    pygame.draw.circle(screen, colors[0], (200, 200), 25, 0)\n    ```", "```py\n    pygame.draw.line(screen, colors[1], (0, 0), (200, 200), 3)\n    ```", "```py\n    pygame.draw.rect(screen, colors[2], (200, 0, 100, 100))\n    ```", "```py\n    pygame.draw.ellipse(screen, colors[3], (100, 300, 100, 50), 2)\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy \n\n    pygame.init()\n    screen = pygame.display.set_mode((400, 400))\n\n    pygame.display.set_caption('Drawing with Pygame')\n    colors = numpy.random.randint(0, 255, size=(4, 3))\n\n    WHITE = (255, 255, 255)\n\n    #Make screen white\n    screen.fill(WHITE)\n\n    #Circle in the center of the window\n    pygame.draw.circle(screen, colors[0], (200, 200), 25, 0)\n\n    # Half diagonal from the upper-left corner to the center\n    pygame.draw.line(screen, colors[1], (0, 0), (200, 200), 3)\n\n    pygame.draw.rect(screen, colors[2], (200, 0, 100, 100))\n\n    pygame.draw.ellipse(screen, colors[3], (100, 300, 100, 50), 2)\n\n    while True: \n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    clock = pygame.time.Clock()\n    ```", "```py\n    img = pygame.image.load('head.jpg')\n    ```", "```py\n    steps = numpy.linspace(20, 360, 40).astype(int)\n    right = numpy.zeros((2, len(steps)))\n    down = numpy.zeros((2, len(steps)))\n    left = numpy.zeros((2, len(steps)))\n    up = numpy.zeros((2, len(steps)))\n    ```", "```py\n    right[0] = steps\n    right[1] = 20\n    down[0] = 360\n    down[1] = steps\n\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n    ```", "```py\n    pos = numpy.concatenate((right.T, down.T, left.T, up.T))\n    ```", "```py\n       clock.tick(30)\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy\n\n    pygame.init()\n    clock = pygame.time.Clock()\n    screen = pygame.display.set_mode((400, 400))\n\n    pygame.display.set_caption('Animating Objects')\n    img = pygame.image.load('head.jpg')\n\n    steps = numpy.linspace(20, 360, 40).astype(int)\n    right = numpy.zeros((2, len(steps)))\n    down = numpy.zeros((2, len(steps)))\n    left = numpy.zeros((2, len(steps)))\n    up = numpy.zeros((2, len(steps)))\n\n    right[0] = steps\n    right[1] = 20\n\n    down[0] = 360\n    down[1] = steps\n\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n\n    pos = numpy.concatenate((right.T, down.T, left.T, up.T))\n    i = 0\n\n    while True: \n       # Erase screen\n       screen.fill((255, 255, 255))\n\n       if i >= len(pos):\n          i = 0\n\n       screen.blit(img, pos[i])\n       i += 1\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n       clock.tick(30)\n    ```", "```py\n    font = pygame.font.Font('freesansbold.ttf', 32)\n    ```", "```py\n    text = \"%d %d %d\" % (i, pos[i][0], pos[i][1])\n    rendered = font.render(text, True, RED, BLUE)\n    screen.blit(rendered, (150, 200))\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy\n\n    pygame.init()\n    clock = pygame.time.Clock()\n    screen = pygame.display.set_mode((400, 400))\n\n    pygame.display.set_caption('Animating Objects')\n    img = pygame.image.load('head.jpg')\n\n    steps = numpy.linspace(20, 360, 40).astype(int)\n    right = numpy.zeros((2, len(steps)))\n    down = numpy.zeros((2, len(steps)))\n    left = numpy.zeros((2, len(steps)))\n    up = numpy.zeros((2, len(steps)))\n\n    right[0] = steps\n    right[1] = 20\n\n    down[0] = 360\n    down[1] = steps\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n\n    pos = numpy.concatenate((right.T, down.T, left.T, up.T))\n    i = 0\n\n    # create a font\n    font = pygame.font.Font('freesansbold.ttf', 32)\n    RED = (255, 0, 0)\n    BLUE = (0, 0, 255)\n\n    while True: \n       # Erase screen\n       screen.fill((255, 255, 255))\n\n       if i >= len(pos):\n          i = 0\n\n       screen.blit(img, pos[i])\n\n       # displaying text in the center of the screen\n       text = \"%d %d %d\" % (i, pos[i][0], pos[i][1])\n       rendered = font.render(text, True, RED, BLUE)\n       screen.blit(rendered, (150, 200))\n       i += 1\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n       clock.tick(30)\n    ```", "```py\n    import matplotlib\n\n    matplotlib.use(\"Agg\")\n    ```", "```py\n    import matplotlib.pyplot as plt\n    import matplotlib.backends.backend_agg as agg\n\n    fig = plt.figure(figsize=[3, 3])\n    ax = fig.add_subplot(111)\n    canvas = agg.FigureCanvasAgg(fig)\n    ```", "```py\n    def plot(data):\n       ax.plot(data)\n       canvas.draw()\n       renderer = canvas.get_renderer()\n\n       raw_data = renderer.tostring_rgb()\n       size = canvas.get_width_height()\n\n       return pygame.image.fromstring(raw_data, size, \"RGB\")\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy\n    import matplotlib\n\n    matplotlib.use(\"Agg\")\n\n    import matplotlib.pyplot as plt\n    import matplotlib.backends.backend_agg as agg\n\n    fig = plt.figure(figsize=[3, 3])\n    ax = fig.add_subplot(111)\n    canvas = agg.FigureCanvasAgg(fig)\n\n    def plot(data):\n       ax.plot(data)\n       canvas.draw()\n       renderer = canvas.get_renderer()\n\n       raw_data = renderer.tostring_rgb()\n       size = canvas.get_width_height()\n\n       return pygame.image.fromstring(raw_data, size, \"RGB\")\n\n    pygame.init()\n    clock = pygame.time.Clock()\n    screen = pygame.display.set_mode((400, 400))\n\n    pygame.display.set_caption('Animating Objects')\n    img = pygame.image.load('head.jpg')\n\n    steps = numpy.linspace(20, 360, 40).astype(int)\n    right = numpy.zeros((2, len(steps)))\n    down = numpy.zeros((2, len(steps)))\n    left = numpy.zeros((2, len(steps)))\n    up = numpy.zeros((2, len(steps)))\n\n    right[0] = steps\n    right[1] = 20\n\n    down[0] = 360\n    down[1] = steps\n\n    left[0] = steps[::-1]\n    left[1] = 360\n\n    up[0] = 20\n    up[1] = steps[::-1]\n\n    pos = numpy.concatenate((right.T, down.T, left.T, up.T))\n    i = 0\n    history = numpy.array([])\n    surf = plot(history)\n\n    while True: \n       # Erase screen\n       screen.fill((255, 255, 255))\n\n       if i >= len(pos):\n          i = 0\n          surf = plot(history)\n\n       screen.blit(img, pos[i])\n       history = numpy.append(history, pos[i])\n       screen.blit(surf, (100, 100))\n\n       i += 1\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n       clock.tick(30)\n    ```", "```py\n    pixels = pygame.surfarray.array2d(img)\n    ```", "```py\n    X = pixels.shape[0] * 7\n    Y = pixels.shape[1] * 7\n    screen = pygame.display.set_mode((X, Y))\n    ```", "```py\n    new_pixels = numpy.tile(pixels, (7, 7)).astype(int)\n    ```", "```py\n    pygame.surfarray.blit_array(screen, new_pixels)\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy\n\n    pygame.init()\n    img = pygame.image.load('head.jpg')\n    pixels = pygame.surfarray.array2d(img)\n    X = pixels.shape[0] * 7\n    Y = pixels.shape[1] * 7\n    screen = pygame.display.set_mode((X, Y))\n    pygame.display.set_caption('Surfarray Demo')\n    new_pixels = numpy.tile(pixels, (7, 7)).astype(int)\n\n    while True: \n       screen.fill((255, 255, 255))\n       pygame.surfarray.blit_array(screen, new_pixels)\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    audio = pygame.mixer.Sound(WAV_FILE)\n    ```", "```py\n    audio.play(-1)\n    ```", "```py\n    pygame.time.delay(TIMEOUT * 1000)\n    ```", "```py\n    audio.stop()\n    ```", "```py\n    import pygame, sys\n    from pygame.locals import *\n    import numpy\n    import urllib2\n    import time\n\n    WAV_FILE = 'smashingbaby.wav'\n\n    def play():\n        audio = pygame.mixer.Sound(WAV_FILE)\n        audio.play(-1)\n        TIMEOUT = 1\n        pygame.time.delay(TIMEOUT * 1000)\n        audio.stop()\n        time.sleep(TIMEOUT)\n\n    pygame.init()\n    pygame.display.set_caption('Sound Demo')\n    response = urllib2.urlopen('http://www.thesoundarchive.com/austinpowers/smashingbaby.wav')\n    filehandle = open(WAV_FILE, 'w')\n    filehandle.write(response.read())\n    filehandle.close()\n    screen = pygame.display.set_mode((400, 400))\n\n    while True: \n       sys_font = pygame.font.SysFont(\"None\", 19)\n       rendered = sys_font.render('Smashing Baby', 0, (255, 100, 100))\n       screen.blit(rendered, (100, 100))\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             play()\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\nffmpeg -i <infile> -vcodec mpeg1video -acodec libmp3lame -intra <outfile.mpg>\n\n```", "```py\nimport pygame, sys\nfrom pygame.locals import *\nimport time\n\npygame.init()\nscreen = pygame.display.set_mode((400, 400))\npygame.display.set_caption('Movie Demo')\n\ndef play():\n    movie = pygame.movie.Movie('out.mpg')\n    movie.play()\n    TIMEOUT = 7\n    pygame.time.delay(TIMEOUT * 1000)\n    movie.stop()\n\nwhile True: \n   screen.fill((255, 255, 255))\n\n   for event in pygame.event.get():\n      if event.type == QUIT:\n         play()\n         pygame.quit()\n         sys.exit()\n\n   pygame.display.update()\n```", "```py\nandroid.py installsdk\n\n```", "```py\n    import pygame\n\n    # Import the android module. If we can't import it, set it to None - this\n    # lets us test it, and check to see if we want android-specific # behavior.\n    try:\n        import android\n    except ImportError:\n        android = None\n\n    # Event constant.\n    TIMEREVENT = pygame.USEREVENT\n\n    # The FPS the game runs at.\n    FPS = 30\n\n    def main():\n        pygame.init()\n\n        # Set the screen size.\n        screen = pygame.display.set_mode((480, 800))\n\n        # Map the back button to the escape key.\n        if android:\n            android.init()\n            android.map_key(android.KEYCODE_BACK, pygame.K_ESCAPE)\n\n        # Use a timer to control FPS.\n        pygame.time.set_timer(TIMEREVENT, 1000 / FPS)\n\n        while True:\n            ev = pygame.event.wait()\n\n            # Android-specific:\n            if android:\n                if android.check_pause():\n                    android.wait_for_resume()\n\n            # Draw the screen based on the timer.\n            if ev.type == TIMEREVENT:\n                screen.fill((255, 255, 255))\n                font = pygame.font.Font('freesansbold.ttf', 32)\n                rendered = font.render('Hello From Android!', 0, (255, 100, 100))\n                screen.blit(rendered, (100, 100))\n                pygame.display.flip()\n\n            # When the user hits back, ESCAPE is sent. Handle it and\n            # end the game.\n            elif ev.type == pygame.KEYDOWN and ev.key == pygame.K_ESCAPE:\n                break\n\n    # This isn't run on Android.\n    if __name__ == \"__main__\":\n        main()\n    ```", "```py\n    android.py configure mygame\n\n    ```", "```py\n    android.py build mygame release install\n\n    ```", "```py\npip install -U scikit-learn\n\n```", "```py\neasy_install -U scikit-learn\n\n```", "```py\n    positions = numpy.random.randint(0, 400, size=(30, 2))\n\n    ```", "```py\n    positions_norms = numpy.sum(positions ** 2, axis=1)\n    S = - positions_norms[:, numpy.newaxis] - positions_norms[numpy.newaxis, :] + 2 * numpy.dot(positions, positions.T)\n\n    ```", "```py\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n\n    ```", "```py\n    pygame.draw.polygon(screen, (255, 0, 0), polygon_points[i])\n\n    ```", "```py\n    import numpy\n    import sklearn.cluster\n    import pygame, sys\n    from pygame.locals import *\n\n    positions = numpy.random.randint(0, 400, size=(30, 2))\n\n    positions_norms = numpy.sum(positions ** 2, axis=1)\n    S = - positions_norms[:, numpy.newaxis] - positions_norms[numpy.newaxis, :] + 2 * numpy.dot(positions, positions.T)\n\n    aff_pro = sklearn.cluster.AffinityPropagation().fit(S)\n    labels = aff_pro.labels_\n\n    polygon_points = []\n\n    for i in xrange(max(labels) + 1):\n       polygon_points.append([])\n\n    # Sorting points by cluster\n    for i, l in enumerate(labels):\n       polygon_points[l].append(positions[i])\n\n    pygame.init()\n    screen = pygame.display.set_mode((400, 400))\n\n    while True: \n       for point in polygon_points:\n          pygame.draw.polygon(screen, (255, 0, 0), point)\n\n       for event in pygame.event.get():\n          if event.type == QUIT:\n             pygame.quit()\n             sys.exit()\n\n       pygame.display.update()\n    ```", "```py\n    class Head(pygame.sprite.Sprite):\n        def __init__(self):\n            pygame.sprite.Sprite.__init__(self) \n            self.image, self.rect = load_image('head.jpg', -1)\n            screen = pygame.display.get_surface()\n            self.area = screen.get_rect()\n            self.STEP = 9\n            self.MARGIN = 12\n            self.xstep = self.STEP \n            self.ystep = 0\n            self.dizzy = 0\n            self.direction = 'right'\n    ```", "```py\n    newpos = self.rect.move((self.xstep, self.ystep))\n\n    ```", "```py\n    self.image = pygame.transform.rotate(self.original, self.degrees)\n\n    ```", "```py\n    import os, pygame\n    from pygame.locals import *\n\n    def load_image(name, colorkey=None):\n        try:\n            image = pygame.image.load(name)\n        except pygame.error, message:\n            print 'Cannot load image:', name\n\n        image = image.convert()\n\n        return image, image.get_rect()\n\n    class Head(pygame.sprite.Sprite):\n        def __init__(self):\n            pygame.sprite.Sprite.__init__(self) \n            self.image, self.rect = load_image('head.jpg', -1)\n            screen = pygame.display.get_surface()\n            self.area = screen.get_rect()\n            self.STEP = 9\n            self.MARGIN = 12\n            self.xstep = self.STEP \n            self.ystep = 0\n            self.degrees = 0\n            self.direction = 'right'\n\n        def update(self):\n            if self.degrees:\n                self._spin()\n            else:\n                self._move()\n\n        def _move(self):\n            newpos = self.rect.move((self.xstep, self.ystep))\n\n            if self.direction == 'right' and self.rect.right > self.area.right - self.MARGIN:\n                self.xstep = 0\n                self.ystep = self.STEP \n                self.direction = 'down'\n\n            if self.direction == 'down' and self.rect.bottom > self.area.bottom - self.MARGIN:\n                self.xstep = -self.STEP\n                self.ystep = 0\n                self.direction = 'left'\n\n            if self.direction == 'left' and self.rect.left < self.area.left + self.MARGIN:\n                self.xstep = 0\n                self.ystep = -self.STEP\n                self.direction = 'up'\n\n            if self.direction == 'up' and self.rect.top < self.area.top + self.MARGIN:\n                self.xstep = self.STEP\n                self.ystep = 0\n                self.direction = 'right'\n\n            self.rect = newpos\n\n        def _spin(self):\n            center = self.rect.center\n            self.degrees = self.degrees + 12\n            if self.degrees >= 360:\n                self.degrees = 0\n                self.image = self.original\n            else:\n                self.image = pygame.transform.rotate(self.original, self.degrees)\n            self.rect = self.image.get_rect(center=center)\n\n        def hit(self):\n            if not self.degrees:\n                self.degrees = 1\n                self.original = self.image\n\n    def main():\n        pygame.init()\n        screen = pygame.display.set_mode((400, 400))\n        pygame.display.set_caption('Sprite Demo')\n\n        background = pygame.Surface(screen.get_size())\n        background = background.convert()\n        background.fill((250, 250, 250))\n\n        if pygame.font:\n            font = pygame.font.Font(None, 36)\n            text = font.render(\"Hit the avatar!\", 1, (0, 0, 200))\n            textpos = text.get_rect(centerx = background.get_width()/2, centery = background.get_height()/2)\n            background.blit(text, textpos)\n\n        screen.blit(background, (0, 0))\n        pygame.display.flip()\n\n        clock = pygame.time.Clock()\n        head = Head()\n        sprite = pygame.sprite.RenderPlain(head)\n\n        while True:\n            clock.tick(60)\n\n            for event in pygame.event.get():\n                if event.type == QUIT:\n                    return\n                elif event.type == MOUSEBUTTONDOWN:\n                   head.hit()\n\n            sprite.update()\n\n            screen.blit(background, (0, 0))\n            sprite.draw(screen)\n            pygame.display.flip()\n\n    if __name__ == '__main__': \n       main()\n    ```", "```py\npip install PyOpenGL PyOpenGL_accelerate\n\n```", "```py\neasy_install PyOpenGL PyOpenGL_accelerate\n\n```", "```py\n    def display_openGL(w, h):\n     pygame.display.set_mode((w,h), pygame.OPENGL|pygame.DOUBLEBUF)\n\n     glClearColor(0.0, 0.0, 0.0, 1.0)\n     glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)\n\n     gluOrtho2D(0, w, 0, h)\n\n    ```", "```py\n        glColor3f(1.0, 0, 0)\n        vertices = numpy.array([[0, 0], [DIM/2, DIM], [DIM, 0]])\n        NPOINTS = 9000\n        indices = numpy.random.random_integers(0, 2, NPOINTS)\n        point = [175.0, 150.0]\n\n        for index in indices:\n           glBegin(GL_POINTS)\n           point = (point + vertices[index])/2.0\n           glVertex2fv(point)\n           glEnd()\n\n        glFlush()\n    ```", "```py\n    import pygame\n    from pygame.locals import *\n    import numpy\n\n    from OpenGL.GL import *\n    from OpenGL.GLU import *\n\n    def display_openGL(w, h):\n      pygame.display.set_mode((w,h), pygame.OPENGL|pygame.DOUBLEBUF)\n\n      glClearColor(0.0, 0.0, 0.0, 1.0)\n      glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)\n\n      gluOrtho2D(0, w, 0, h)\n\n    def main():\n        pygame.init()\n        pygame.display.set_caption('OpenGL Demo')\n        DIM = 400\n        display_openGL(DIM, DIM)\n        glColor3f(1.0, 0, 0)\n        vertices = numpy.array([[0, 0], [DIM/2, DIM], [DIM, 0]])\n        NPOINTS = 9000\n        indices = numpy.random.random_integers(0, 2, NPOINTS)\n        point = [175.0, 150.0]\n\n        for index in indices:\n           glBegin(GL_POINTS)\n           point = (point + vertices[index])/2.0\n           glVertex2fv(point)\n           glEnd()\n\n        glFlush()\n        pygame.display.flip()\n\n        while True:\n            for event in pygame.event.get():\n                if event.type == QUIT:\n                    return\n\n    if __name__ == '__main__':\n      main()\n    ```", "```py\n    def hit(self):\n             mouse_x, mouse_y = pygame.mouse.get_pos()\n             collided = False\n             bigger_rect = self.rect.inflate(40, 40)\n\n             if bigger_rect.collidepoint(mouse_x, mouse_y):\n                collided = True\n\n             if not self.degrees and collided:\n                self.degrees = 1\n                self.original = self.image\n                self.nhits += 1\n             else:                                  \n                self.nmisses += 1 \n    ```", "```py\n    pygame.mouse.set_visible(False)\n    ```", "```py\n    from twisted.internet import reactor, protocol\n\n    class Server(protocol.Protocol):\n        def __init__(self):\n           self.count = 0\n\n        def dataReceived(self, msg):\n             self. count += 1\n             self.transport.write(\"%d %s\" % (self.count, msg))\n\n    def main():\n        factory = protocol.ServerFactory()\n        factory.protocol = Server\n        reactor.listenTCP(8888,factory)\n        reactor.run()\n\n    if __name__ == '__main__':\n        main()\n    ```", "```py\n    from twisted.internet import reactor, protocol\n    from pygame.locals import *\n    import pygame\n\n    class Client(protocol.Protocol):\n        def __init__(self):\n           self.msg = 'Hello'\n           self.end_msg = False\n\n        def sendMessage(self, msg):\n            self.transport.write(msg)\n            self.update(msg)\n\n        def dataReceived(self, msg):\n           self.msg = msg\n\n           if msg.startswith(\"19\"):\n              self.end_msg = True\n\n        def update(self, msg):\n            screen = pygame.display.get_surface()\n\n            screen.fill((255, 255, 255))\n            font = pygame.font.Font(None, 36)\n            text = font.render(self.msg, 1, (200, 200, 200))\n            textpos = text.get_rect(centerx=screen.get_width()/2, centery=screen.get_height()/2)\n            screen.blit(text, textpos)\n            pygame.display.flip()\n\n            if self.end_msg:\n               reactor.stop()\n\n    def send(p):\n        p.sendMessage(\"Hello!\")\n\n        for i in xrange(1, 20):\n          reactor.callLater(i * .1, p.sendMessage, \"IMPORTANT MESSAGE!\")\n\n    def main():\n        pygame.init()\n        screen = pygame.display.set_mode((400, 400))\n        pygame.display.set_caption('Network Demo')\n\n        c = protocol.ClientCreator(reactor, Client)\n        c.connectTCP(\"localhost\", 8888).addCallback(send)\n        reactor.run()\n\n        while True:\n           for event in pygame.event.get():\n             if event.type == QUIT:\n                 return\n\n    if __name__ == '__main__':\n        main()\n    ```", "```py\nsudo easy_install pudb\n\n```", "```py\npython -m pudb collision_demo.py\n\n```", "```py\n    python -m cProfile -o collision_demo.profile collision_demo.py\n    ```", "```py\n    python -m pstats collision_demo.profile \n    Welcome to the profile statistics browser.\n\n    ```", "```py\n    collision_demo.profile% help\n\n    Documented commands (type help <topic>):\n    ========================================\n    EOF  add  callees  callers  help  quit  read  reverse  sort  stats  strip\n\n    ```", "```py\n    collision_demo.profile% sort\n    Valid sort keys (unique prefixes are accepted):\n    stdname -- standard name\n    nfl -- name/file/line\n    pcalls -- call count\n    file -- file name\n    calls -- call count\n    time -- internal time\n    line -- line number\n    cumulative -- cumulative time\n    module -- file name\n    name -- function name\n\n    ```", "```py\n    collision_demo.profile% sort calls\n    collision_demo.profile% stats 3\n\n     380943 function calls (380200 primitive calls) in 18.056 seconds\n\n     Ordered by: call count\n     List reduced from 801 to 3 due to restriction <3>\n\n     ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n     52156    0.013    0.000    0.013    0.000 {method 'endswith' of 'str' objects}\n    31505/31368    0.003    0.000    0.003    0.000 {len}\n     27573    0.022    0.000    0.022    0.000 {method 'lower' of 'str' objects}\n\n    ```", "```py\n    from twisted.internet import reactor, protocol\n\n    class Server(protocol.Protocol):\n        def dataReceived(self, msg):\n             resp = '*' * 20\n             print msg\n\n             if msg == 'secret':\n                resp = msg\n\n             self.transport.write(resp)\n\n    def main():\n        factory = protocol.ServerFactory()\n        factory.protocol = Server\n        reactor.listenTCP(8888,factory)\n        reactor.run()\n\n    if __name__ == '__main__':\n        main()\n    ```", "```py\n    from twisted.internet import reactor, protocol\n    from pygame.locals import *\n    import pygame\n    from twisted.internet.task import LoopingCall\n\n    class Client(protocol.Protocol):\n        def __init__(self):\n           self.STARS = '*' * 20\n           self.msg = self.STARS\n           self.font = pygame.font.Font(None, 22)\n           self.screen = pygame.display.get_surface()\n           self.label = 'Guess the word:'\n           self.attempts = 0\n\n        def sendMessage(self, msg):\n            self.transport.write(msg)\n\n        def dataReceived(self, msg):\n           self.msg = msg \n\n           if self.msg != self.STARS:\n             self.label = 'YOU WIN!!!!'\n\n           self.update_prompt()\n\n        def update_prompt(self):\n            self.screen.fill((255, 255, 255))\n            BG = (0, 255, 0)\n            FG = (0, 0, 0)\n\n            pygame.draw.rect(self.screen, BG, (100, 200, 200, 20))\n\n            self.screen.blit(self.font.render(self.msg, 1, FG), (100, 200))\n            self.screen.blit(self.font.render(\"%d %s\" % (self.attempts, self.label), 1, FG), \n                  (140, 180))\n            pygame.display.flip()\n\n    def handle_events(p):\n       while True:\n          for event in pygame.event.get():\n             if event.type == QUIT:\n                reactor.stop()\n                return\n             elif event.type == KEYDOWN:\n                key = event.key\n\n                if p.msg == '*' * 20:\n                   p.msg = ''\n\n                if key == K_BACKSPACE:\n                   p.msg = p.msg[0:-1]\n                   p.update_prompt()\n                elif key == K_RETURN:\n                   p.attempts += 1\n                   p.sendMessage(p.msg)\n                   return\n                elif ord('a') <= key <= ord('z'):\n                   p.msg += chr(key)\n                   p.update_prompt()\n\n    def send(p):\n       p.update_prompt()\n       tick = LoopingCall(handle_events, p)\n       tick.start(.03)\n\n    def main():\n        pygame.init()\n        screen = pygame.display.set_mode((400, 400))\n        pygame.display.set_caption('Puzzle Demo')\n\n        c = protocol.ClientCreator(reactor, Client)\n        c.connectTCP(\"localhost\", 8888).addCallback(send)\n        reactor.run()\n\n    if __name__ == '__main__':\n        main()\n    ```", "```py\nimport os, pygame\nfrom pygame.locals import *\nimport numpy\nfrom scipy import ndimage\n\ndef get_pixar(arr, weights):\n  states = ndimage.convolve(arr, weights, mode='wrap')\n\n  bools = (states == 13) | (states == 12 ) | (states == 3)\n\n  return bools.astype(int)\n\ndef draw_cross(pixar):\n   (posx, posy) = pygame.mouse.get_pos()\n   pixar[posx, :] = 1\n   pixar[:, posy] = 1\n\ndef random_init(n):\n   return numpy.random.random_integers(0, 1, (n, n))\n\ndef draw_pattern(pixar, pattern):\n     print pattern\n\n     if pattern == 'glider':\n      coords = [(0,1), (1,2), (2,0), (2,1), (2,2)]\n     elif pattern == 'block':\n      coords = [(3,3), (3,2), (2,3), (2,2)]\n     elif pattern == 'exploder':\n      coords = [(0,1), (1,2), (2,0), (2,1), (2,2), (3,3)]\n     elif pattern == 'fpentomino':\n      coords = [(2,3),(3,2),(4,2),(3,3),(3,4)]\n\n     pos = pygame.mouse.get_pos()\n\n     xs = numpy.arange(0, pos[0], 10)\n     ys = numpy.arange(0, pos[1], 10)\n\n     for x in xs:\n        for y in ys:\n           for i, j in coords:\n               pixar[x + i, y + j] = 1\n\ndef main():\n    pygame.init ()\n\n    N = 400\n    pygame.display.set_mode((N, N))\n    pygame.display.set_caption(\"Life Demo\")\n\n    screen = pygame.display.get_surface()\n\n    pixar = random_init(N)\n    weights = numpy.array([[1,1,1], [1,10,1], [1,1,1]])\n\n    cross_on = False\n\n    while True:\n       pixar = get_pixar(pixar, weights)\n\n       if cross_on:\n          draw_cross(pixar)\n\n       pygame.surfarray.blit_array(screen, pixar * 255 ** 3)\n       pygame.display.flip()\n\n       for event in pygame.event.get():\n         if event.type == QUIT:\n             return\n         if event.type == MOUSEBUTTONDOWN:\n            cross_on = not cross_on\n         if event.type == KEYDOWN:\n            if event.key == ord('r'):\n               pixar = random_init(N)\n               print \"Random init\"\n            if event.key == ord('g'):\n               draw_pattern(pixar, 'glider')\n            if event.key == ord('b'):\n               draw_pattern(pixar, 'block')\n            if event.key == ord('e'):\n               draw_pattern(pixar, 'exploder')\n            if event.key == ord('f'):\n               draw_pattern(pixar, 'fpentomino')\n\nif __name__ == '__main__':\n    main()\n```"]