["```py\ntozo\n└── backend\n    ├── src\n    │   └── backend\n    │       ├── blueprints\n    │       ├── lib\n    │       └── templates\n    └── tests\n        ├── blueprints\n        └── lib\n```", "```py\npdm add quart\n```", "```py\nfrom quart import Quart\napp = Quart(__name__)\n```", "```py\nfrom quart import ResponseReturnValue\n@app.get(\"/control/ping/\")\nasync def ping() -> ResponseReturnValue:\n    return {\"ping\": \"pong\"}\n```", "```py\n[tool.pdm.scripts]\nstart = \"quart --app src/backend/run.py run --port 5050\"\n```", "```py\npdm run start\n```", "```py\ncurl localhost:5050/control/ping/\n```", "```py\nfrom backend.run import app\nasync def test_control() -> None:\n    test_client = app.test_client()\n    response = await test_client.get(\"/control/ping/\")\n    assert (await response.get_json())[\"ping\"] == \"pong\"\n```", "```py\nfrom quart import Blueprint, ResponseReturnValue\n\nblueprint = Blueprint(\"control\", __name__)\n@blueprint.get(\"/control/ping/\")\nasync def ping() -> ResponseReturnValue:\n    return {\"ping\": \"pong\"}\n```", "```py\nfrom quart import Quart\nfrom backend.blueprints.control import blueprint as control_blueprint\n\napp = Quart(__name__)\napp.register_blueprint(control_blueprint)\n```", "```py\ntozo\n└── backend\n    ├── pdm.lock\n    ├── pyproject.toml\n    ├── setup.cfg\n    ├── src\n    │   └── backend\n    │       ├── blueprints\n    │       │   ├── __init__.py\n    │       │   └── control.py\n    │       ├── __init__.py\n    │       └── run.py\n    └── tests\n        ├── blueprints\n        │   ├── __init__.py\n        │   └── test_control.py\n        └── __init__.py\n```", "```py\napp = Quart(__name__)\napp.config.from_prefixed_env(prefix=\"TOZO\")\n```", "```py\nTOZO_BASE_URL=\"localhost:5050\" \nTOZO_DEBUG=true\nTOZO_SECRET_KEY=\"secret key\"\n```", "```py\nTOZO_BASE_URL=\"localhost:5050\" \nTOZO_DEBUG=true\nTOZO_SECRET_KEY=\"secret key\" \nTOZO_TESTING=true\n```", "```py\n[tool.pdm.scripts]\nstart = {cmd = \"quart --app src/backend/run.py run --port   5050\", env_file = \"development.env\"}\ntest = {cmd = \"pytest tests/\", env_file = \"testing.env\"}\n```", "```py\nclass APIError(Exception):\n    def __init__(self, status_code: int, code: str) -> None:\n        self.status_code = status_code\n        self.code = code\n```", "```py\nfrom quart import ResponseReturnValue\nfrom backend.lib.api_error import APIError\n\n@app.errorhandler(APIError)  # type: ignore\nasync def handle_api_error(error: APIError) -> ResponseReturnValue:\n    return {\"code\": error.code}, error.status_code\n```", "```py\n@app.errorhandler(500)\nasync def handle_generic_error(\n    error: Exception\n) -> ResponseReturnValue:\n    return {\"code\": \"INTERNAL_SERVER_ERROR\"}, 500\n```", "```py\npdm add quart-auth\n```", "```py\nfrom quart_auth import AuthManager\nauth_manager = AuthManager(app)\n```", "```py\nTOZO_QUART_AUTH_COOKIE_SAMESITE=\"Strict\"\n```", "```py\nTOZO_QUART_AUTH_COOKIE_SECURE=false\n```", "```py\npdm add bcrypt\n```", "```py\nimport bcrypt\nhashed = bcrypt.hashpw(password, bcrypt.gensalt(rounds=14))\n```", "```py\nmatch = bcrypt.checkpw(password, hashed)\n```", "```py\npdm add zxcvbn\n```", "```py\nfrom zxcvbn import zxcvbn\nscore = zxcvbn(password).score\n```", "```py\npdm add itsdangerous\n```", "```py\nfrom itsdangerous import URLSafeTimedSerializer\nfrom quart import current_app\nserializer = URLSafeTimedSerializer(\n    current_app.secret_key, salt=\"salt\"\n)\ntoken = serializer.dumps(user_id)\n```", "```py\nfrom itsdangerous import BadSignature, SignatureExpired\nfrom backend.lib.api_error import APIError\nsigner = URLSafeTimedSerializer(\n    current_app.secret_key, salt=\"salt\"\n)\ntry:\n    user_id = signer.loads(token, max_age=ONE_DAY)\nexcept (SignatureExpired):\n    raise APIError(403, \"TOKEN_EXPIRED\")\nexcept (BadSignature):\n    raise APIError(400, \"TOKEN_INVALID\")\nelse:\n    # Use the user_id safely\n```", "```py\npdm add --dev freezegun\n```", "```py\nfrom freezegun import freeze_time\nwith freeze_time(\"2020-01-01\"):\n    signer = URLSafeTimedSerializer(        app.secret_key, salt=\"salt\"    )\n    token = signer.dumps(1)\n```", "```py\npdm add quart-rate-limiter\n```", "```py\nfrom quart_rate_limiter import RateLimiter\nrate_limiter = RateLimiter(app)\n```", "```py\nfrom datetime import timedelta\n\nfrom quart_rate_limiter import rate_limit\n\n@app.get(\"/\")\n@rate_limit(6, timedelta(minutes=1))\nasync def handler():\n    ...\n```", "```py\nfrom quart_rate_limiter import RateLimitExceeded\n\n@app.errorhandler(RateLimitExceeded)  # type: ignore\nasync def handle_rate_limit_exceeded_error(\n    error: RateLimitExceeded,\n) -> ResponseReturnValue:\n    return {}, error.get_headers(), 429\n```", "```py\nfrom quart_rate_limiter import (\n    QUART_RATE_LIMITER_EXEMPT_ATTRIBUTE,\n    QUART_RATE_LIMITER_LIMITS_ATTRIBUTE,\n)\nfrom backend.run import app\nIGNORED_ENDPOINTS = {\"static\"}\n\ndef test_routes_have_rate_limits() -> None:\n    for rule in app.url_map.iter_rules():\n        endpoint = rule.endpoint\n\n        exempt = getattr(\n            app.view_functions[endpoint],\n            QUART_RATE_LIMITER_EXEMPT_ATTRIBUTE,\n            False,\n        )\n        if not exempt and endpoint not in IGNORED_ENDPOINTS:\n            rate_limits = getattr(\n                app.view_functions[endpoint],\n                QUART_RATE_LIMITER_LIMITS_ATTRIBUTE,\n                [],\n            )\n            assert rate_limits != []\n```", "```py\nfrom quart_rate_limiter import rate_exempt\n@blueprint.get(\"/control/ping/\")\n@rate_exempt\nasync def ping() -> ResponseReturnValue:\n    return {\"ping\": \"pong\"}\n```", "```py\npdm add \"pydantic[email]\" \npdm add quart-schema\n```", "```py\nfrom quart_schema import QuartSchema\nschema = QuartSchema(app, convert_casing=True) \n```", "```py\nfrom quart_schema import validate_request, validate_response\n@dataclass\nclass Todo:\n    task: str\n    due: Optional[datetime]\n@app.post(\"/\")\n@validate_request(Todo)\n@validate_response(Todo)\nasync def create_todo(data: Todo) -> Todo:\n    ... \n    return data\n```", "```py\nfrom quart_schema import RequestSchemaValidationError\n@app.errorhandler(RequestSchemaValidationError)  # type: ignore\nasync def handle_request_validation_error(\n    error: RequestSchemaValidationError,\n) -> ResponseReturnValue:\n    if isinstance(error.validation_error, TypeError):\n        return {\"errors\": str(error.validation_error)}, 400\n    else:\n        return {\"errors\": error.validation_error.json()}, 400\n```", "```py\nIGNORED_ENDPOINTS = {\"static\", \"openapi\", \"redoc_ui\", \"swagger_ui\"}\n```", "```py\npdm add quart-db\n```", "```py\nfrom quart_db import QuartDB\nquart_db = QuartDB(app)\n```", "```py\npostgresql://username:password@0.0.0.0:5432/db_name\n```", "```py\nTOZO_QUART_DB_DATABASE_URL=\"postgresql://tozo:tozo@0.0.0.0:5432/tozo\"\n```", "```py\nTOZO_QUART_DB_DATABASE_URL=\"postgresql://tozo_test:tozo_test@0.0.0.0:5432/tozo_test\"\n```", "```py\nimport os\nfrom subprocess import call  # nosec\nfrom urllib.parse import urlparse \n@app.cli.command(\"recreate_db\")\ndef recreate_db() -> None:\n    db_url = urlparse(os.environ[\"TOZO_QUART_DB_DATABASE_URL\"])\n    call(  # nosec\n        [\"psql\", \"-U\", \"postgres\", \"-c\", f\"DROP DATABASE IF           EXISTS {db_url.path.removeprefix('/')}\"],\n    )\n    call(  # nosec\n        [\"psql\", \"-U\", \"postgres\", \"-c\", f\"DROP USER IF EXISTS           {db_url.username}\"],\n    )\n    call(  # nosec\n        [\"psql\", \"-U\", \"postgres\", \"-c\", f\"CREATE USER {db_url.       username} LOGIN PASSWORD '{db_url.password}' CREATEDB\"],\n    )\n    call(  # nosec\n        [\"psql\", \"-U\", \"postgres\", \"-c\", f\"CREATE DATABASE {db_          url.path.removeprefix('/')}\"],\n    )\n```", "```py\n[tool.pdm.scripts]\nrecreate-db-base = \"quart --app src/backend/run.py recreate_db\"\nrecreate-db = {composite = [\"recreate-db-base\"], env_file =  \"development.env\"}\ntest = {composite = [\"recreate-db-base\", \"pytest tests/\"], env_  file = \"testing.env\"}\n```", "```py\npdm run recreate-db\n```", "```py\npsql –U tozo\n```", "```py\nfrom typing import AsyncGenerator\n\nimport pytest\nfrom quart import Quart\n\nfrom backend.run import app\n\n@pytest.fixture(name=\"app\", scope=\"function\")\nasync def _app() -> AsyncGenerator[Quart, None]:\n    async with app.test_app():\n        yield app\n```", "```py\nfrom quart import Quart\nasync def test_control(app: Quart) -> None:\n    test_client = app.test_client()\n    response = await test_client.get(\"/control/ping/\")\n    assert (await response.get_json())[\"ping\"] == \"pong\"\n```", "```py\nfrom quart_db import Connection\nfrom backend.run import quart_db\n@pytest.fixture(name=\"connection\", scope=\"function\")\nasync def _connection(app: Quart) -> AsyncGenerator[Connection, None]:\n    async with quart_db.connection() as connection:\n        async with connection.transaction():\n            yield connection\n```", "```py\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Tozo - email</title>\n    <meta http-equiv=\"Content-Type\" content=\"text/html;      charset=UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-      scale=1.0\">\n  </head>\n  <body style=\"font-family: Arial, 'Helvetica Neue', Helvetica,    sans-serif; font-size: 14px; font-style: normal; margin: 0\">\n    <table width=\"100%\" height=\"100%\" cellpadding=\"0\"       cellspacing=\"0\" border=\"0\">\n      <tr>\n        <td align=\"center\">\n          <table height=\"100%\" cellpadding=\"20\" cellspacing=\"0\"            border=\"0\" style=\"max-width: 540px;\">\n            <tr>\n              <td align=\"left\" width=\"540\">\n                {% block welcome %}\n                  Hello,\n                {% endblock %}\n              </td>\n            </tr>\n            <tr>\n              <td align=\"left\" width=\"540\">\n                {% block content %}\n                  Example content\n                {% endblock %}\n              </td>\n            </tr>\n            <tr>\n              <td align=\"center\" width=\"540\">\n                The Tozo team\n              </td>\n            </tr>\n          </table>\n        </td>\n      </tr>\n    </table>\n  </body>\n</html>\n```", "```py\nimport logging\nfrom typing import Any\nfrom quart import render_template\n\nlog = logging.getLogger(__name__)\nasync def send_email(\n    to: str, \n    subject: str, \n    template: str, \n    ctx: dict[str, Any], \n) -> None:\n    content = await render_template(template, **ctx)\n    log.info(\"Sending %s to %s\\n%s\", template, to, content)\n```", "```py\nimport logging\n\nlogging.basicConfig(level=logging.INFO)\n```", "```py\npdm add httpx\n```", "```py\nimport logging\nfrom typing import Any, cast\n\nimport httpx\nfrom quart import current_app, render_template\nlog = logging.getLogger(__name__)\n\nclass PostmarkError(Exception):\n    def __init__(self, error_code: int, message: str) -> None:\n        self.error_code = error_code\n        self.message = message\nasync def send_email(\n    to: str, \n    subject: str, \n    template: str, \n    ctx: dict[str, Any], \n) -> None:\n    content = await render_template(template, **ctx)\n    log.info(\"Sending %s to %s\\n%s\", template, to, content)\n    token = current_app.config.get(\"POSTMARK_TOKEN\")\n    if token is not None:\n        async with httpx.AsyncClient() as client:\n            response = await client.post(\n                \"https://api.postmarkapp.com/email\",\n                json={\n                    \"From\": \"Tozo <help@tozo.dev>\",\n                    \"To\": to,\n                    \"Subject\": subject,\n                    \"Tag\": template,\n                    \"HtmlBody\": content,\n                },\n                headers={\"X-Postmark-Server-Token\": token},\n            )\n        data = cast(dict, response.json())\n        if response.status_code != 200:\n            raise PostmarkError(                data[\"ErrorCode\"], data[\"Message\"]            )\n```", "```py\nfrom pytest import LogCaptureFixture\nfrom quart import Quart\nfrom backend.lib.email import send_email\nasync def test_send_email(\n    app: Quart, caplog: LogCaptureFixture\n) -> None:\n    async with app.app_context():\n        await send_email(\n            \"member@tozo.dev\", \"Welcome\", \"email.xhtml\", {}\n        )  \n    assert \"Sending email.xhtml to member@tozo.dev\" in caplog.text\n```", "```py\ntozo\n├── .github\n│   └── workflows\n├── backend\n│   ├── src\n│   │   └── backend\n│   │       └── blueprints\n│   │       └── lib\n│   │       └── templates\n│   └── tests\n│       └── backend\n│           └── blueprints\n│           └── lib\n├── frontend\n│   ├── public\n│   └── src\n└── infrastructure\n```"]