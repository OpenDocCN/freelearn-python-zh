- en: Throttling, Filtering, Testing, and Deploying an API with Django 2.1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will use additional features included in Django 2.1 and
    Django REST Framework to improve our RESTful API. We will also write, execute,
    and improve unit tests and learn a few things related to deployment. We will look
    at the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Install packages with the `requirements.txt` file to work with filters, throttling,
    and tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand filtering, searching, and ordering classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure filtering, searching, and ordering for views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute HTTP requests to test filtering, searching, and ordering features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filter, search, and order in the Browsable API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understand throttling classes and goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configure throttling policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Execute HTTP requests to test throttle policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up unit tests with `pytest`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write the first round of unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run unit tests with `pytest`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improve testing coverage
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run Django RESTful APIs on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing packages with the requirements.txt file to work with filters, throttling,
    and tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure you quit Django development server. You just need to press *Ctrl*
    + *C* in the Terminal or Command Prompt window in which it is running.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will install many additional packages to work with filtering capabilities
    and to be able to easily run tests and measure their code coverage. Make sure
    you have activated the virtual environment we have created in the previous chapter,
    named `Django01`. After you activate the virtual environment, it is time to run
    many commands that will be the same for macOS, Linux, and Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will edit the existing `requirements.txt` file to specify the additional
    packages that our application requires to ...
  prefs: []
  type: TYPE_NORMAL
- en: Understanding filtering, searching, and ordering classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took advantage of the pagination features available
    in Django REST Framework to specify how we wanted large results sets to be split
    into individual pages of data. However, we have always been working with the entire
    `queryset` as the result set; that is, we didn't apply any filter.
  prefs: []
  type: TYPE_NORMAL
- en: Django REST Framework makes it easy to customize filtering, searching, and sorting
    capabilities for the views we have already coded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `settings.py` file in the `games_service/games_service` folder. Add
    the following highlighted lines after the first line that declares the dictionary
    named `REST_FRAMEWORK` to add the new `''DEFAULT_FILTER_BACKENDS''` setting key.
    Don''t remove the lines that will appear after the new highlighted lines. We don''t
    show them to avoid repeating code. The code file for the sample is included in
    the `restful_python_2_08_01` folder, in the `Django01/games-service/games_service/settings.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The value for the `''DEFAULT_FILTER_BACKENDS''` settings key specifies a global
    setting with a tuple of string whose values indicate the default classes that
    we want to use for filter backends. We will use the following three classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Module | Class name | Owner |'
  prefs: []
  type: TYPE_TB
- en: '| `django_filters.rest_framework` | `DjangoFilterBackend` | Django filter |'
  prefs: []
  type: TYPE_TB
- en: '| `rest_framework.filters` | `SearchFilter` | Django REST Framework |'
  prefs: []
  type: TYPE_TB
- en: '| `rest_framework.filters` | `OrderingFilter` | Django REST Framework |'
  prefs: []
  type: TYPE_TB
- en: The `DjangoFilterBackend` class provides field-filtering capabilities through
    the recently installed `django-filer` package. We can specify the set of fields
    we want to be able to filter against or create a `django_filters.rest_framework.FilterSet`
    class with more customized settings and associate it with the desired view.
  prefs: []
  type: TYPE_NORMAL
- en: The `SearchFilter` class provides single query parameter-based searching capabilities
    and is based on the Django admin's search function. We can specify the set of
    fields we want to include for the search, and the client will be able to filter
    items by making queries that search on these fields with a single query. This
    is useful when we want to make it possible for a request to search on multiple
    fields with a single query.
  prefs: []
  type: TYPE_NORMAL
- en: The `OrderingFilter` class allows the client that composes the request to control
    how the results are ordered with a single query parameter. We can specify which
    fields may be ordered against.
  prefs: []
  type: TYPE_NORMAL
- en: Note that we can also configure the filter backends by including any of the
    previously enumerated classes in a tuple and assigning it to the `filter_backends`
    class attribute for the desired generic view. However, in this case, we will use
    the default configuration for all our class-based views.
  prefs: []
  type: TYPE_NORMAL
- en: Whenever we design a RESTful API, we have to make sure we provide the required
    features with a properly optimized usage of the available resources. Hence, we
    have to be careful to make the fields we configure available in the filtering,
    searching, and ordering features. The configurations we make in these features
    will have an impact on the queries that Django's integrated ORM will generate
    and execute on the database. We must definitely make sure that we have the appropriate
    database optimizations that take into account the queries that will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: Stay in the `settings.py` file in the `games_service/games_service` folder.
    Add the following highlighted lines after the first line that declares the dictionary,
    named `INSTALLED_APPS`, to add `'django_filters'` as a newly installed application
    for the Django project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don''t remove the lines that will appear after the new highlighted lines. We
    don''t show them to avoid repeating code. The code file for the sample is included
    in the `restful_python_2_08_01` folder, in the `Django01/games-service/games_service/settings.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Configuring filtering, searching, and ordering for views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Open the `views.py` file in the `games_service/games` folder. Add the following
    code after the last line that declares the imports, before the declaration of
    the `UserList` class. The code file for the sample is included in the `restful_python_2_08_01`
    folder, in the `Django01/games-service/games/views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Stay editing the `views.py` file in the `games_service/games` folder. Add the
    following highlighted lines to the `EsrbRatingList` class declared in the `views.py`
    file. Don't remove the existing lines for this class that isn't shown to ...
  prefs: []
  type: TYPE_NORMAL
- en: Executing HTTP requests to test filtering, searching, and ordering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we can launch Django''s development server to compose and send HTTP requests.
    Execute any of the following two commands, based on your needs to access the API
    in other devices or computers connected to your LAN:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: After we run any of the previous commands, the development server will start
    listening at port `8000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    all the ESRB ratings whose description matches `T (Teen)`. The code file for the
    sample is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd801.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd802.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show a sample response with the single ESRB rating whose
    description matches the specified description in the filter. The following lines
    only show the JSON body without the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write a command to compose and send an HTTP `GET` request to retrieve
    all the games whose related ESRB rating is `1` and the value for the `played_times`
    field is equal to `10`. We want to sort the results by `release_date` in descending
    order, and therefore, we specify `-release_date` in the value for `ordering`.
    The hyphen (`-`) before the field name specifies the ordering feature to use descending
    order, instead of the default ascending order. Make sure you replace `1` with
    the `id` value of the ESRB rating whose description is `AO (Adults Only)`. The
    code file for the sample is included in the `restful_python_2_08_01` folder, in
    the `Django01/cmd/cmd803.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd804.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show a sample response with the single game that matches
    the specified criteria in the filter. The following lines only show the JSON body
    without the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the `GameList` class, we specified `'esrb_rating'` as one of the strings
    in the `filterset_fields` tuple of string. Thus, we had to use the ESRB rating
    `id` in the filter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will run a command that will compose and send an HTTP `GET` request
    that uses a filter on the game''s name related to a registered score. The `PlayerScoreFilter`
    class provides us a filter to the name of the related game in `game_name`. We
    will combine the filter with another filter on the player''s name related to a
    registered score. The `PlayerScoreFilter` class provides us a way to filter to
    the name of the related player in `player_name`. Both conditions specified in
    the criteria must be met, and therefore, the filters are combined with the `AND`
    operator. The code file for the sample is included in the `restful_python_2_08_01`
    folder, in the `Django01/cmd/cmd805.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd806.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show a sample response with the score that matches the
    specified criteria in the filters. The following lines only show the JSON body
    without the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We will compose and send an HTTP `GET` request to retrieve all the scores that
    match the following criteria, sorted by `score` in descending order:'
  prefs: []
  type: TYPE_NORMAL
- en: The `score` value is between 17,000 and 45,000
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `score_date` value is between 2019-01-01 and 2019-01-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following command composes and sends the previously explained HTTP `GET`
    request. The code file for the sample is included in the `restful_python_2_08_01`
    folder, in the `Django01/cmd/cmd807.txt` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd808.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show a sample response with the three games that match
    the specified criteria in the filters. The following lines only show the JSON
    body without the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the previous requests, none of the responses had more than one page. If the
    response requires more than one page, the values for the `previous` and `next`
    keys will display the URLs that include the combination of the filters, search,
    ordering, and pagination. Django combines all the features to build the appropriate
    URLs.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will compose and send an HTTP request to retrieve all the games whose `name`
    starts with `''S''`. We will use the search feature that we configured to restrict
    the search behavior to a starts-with match on the `name` field. The code file
    for the sample is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd809.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command. The code file for the sample
    is included in the `restful_python_2_08_01` folder, in the `Django01/cmd/cmd810.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show a sample response with the two games that match the
    specified search criteria; that is, those games whose names start with `''H''`.
    The following lines only show the JSON body without the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we have been using the default search and ordering query parameters:
    `''search''` and `''ordering''`. We just need to specify the desired names as
    strings in the `SEARCH_PARAM` and the `ORDERING_PARAM` settings in the `settings.py`
    file in the `games_service/games_service` folder.'
  prefs: []
  type: TYPE_NORMAL
- en: Filtering, searching and ordering in the Browsable API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can take advantage of the Browsable API to easily test filtering, searching,
    and ordering features through a web browser. Open a web browser and enter `http://localhost:8000/player-scores/`.
    Replace `localhost` with the IP of the computer that is running the Django development
    server if you use another computer or device to run the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The Browsable API will compose and send an HTTP `GET` request to `/player-scores/`
    and will display the results of its execution; that is, the headers and the JSON
    player scores list. You will notice there is a new Filters button located at the
    left-hand side of the OPTIONS button.
  prefs: []
  type: TYPE_NORMAL
- en: Click on Filters and the Browsable API will display the Filters dialog box,
    ...
  prefs: []
  type: TYPE_NORMAL
- en: Understanding throttling classes and goals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we haven't established any limits on the usage of our API, and therefore,
    both authenticated and unauthenticated users can compose and send as many requests
    as they want to. We only took advantage of the pagination features available in
    Django REST Framework to specify how we wanted large result sets to be split into
    individual pages of data. However, any user can compose and send thousands of
    requests to be processed without any kind of limitation.
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, it is not a good idea to deploy such an API encapsulated in a microservice
    in a cloud platform. A wrong usage of the API by any user could cause the microservice
    to consume a huge amount of resources, and the cloud platform bills would reflect
    this situation.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use the throttling capabilities available in Django REST Framework
    to configure the following global limitations to the usage of our API, based on
    whether the requests come from unauthenticated or authenticated users. We will
    define the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Unauthenticated users**: They will be able to run a maximum of `5` requests
    per hour'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authenticated users**: They will be able to run a maximum of `20` requests
    per hour'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, we want to configure a maximum of 25 requests per hour to the ESRB
    ratings-related views, no matter whether the user is authenticated or not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django REST Framework provides three throttling classes (as listed in the following
    table), in the `rest_framework.throttling` module. All of them are subclasses
    of the `SimpleRateThrottle` superclass, which is a subclass of the `BaseThrottle`
    superclass. The classes allow us to set the maximum number of requests per period
    that will be computed based on different mechanisms to determine the previous
    request information to specify the scope. The previous request information for
    throttling is stored in the cache and the classes override the `get_cache_key`
    method that determines the scope:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Throttling class name | Description |'
  prefs: []
  type: TYPE_TB
- en: '| `AnonRateThrottle` | This class limits the rate of requests that an anonymous
    user can make. The IP address of the request is the unique cache key. Hence, bear
    in mind that all the requests coming from the same IP address will accumulate
    the total number of requests. |'
  prefs: []
  type: TYPE_TB
- en: '| `UserRateThrottle` | This class limits the rate of requests that a specific
    user can make. For authenticated users, the authenticated user `id` is the unique
    cache key. For anonymous users, the IP address of the request is the unique cache
    key. |'
  prefs: []
  type: TYPE_TB
- en: '| `ScopedRateThrottle` | This class limits the rate of requests for specific
    parts of the API identified with the value assigned to the `throttle_scope` property.
    The class is useful when we want to restrict access to specific parts of the API
    with different rates. |'
  prefs: []
  type: TYPE_TB
- en: Configuring throttling policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will use a combination of the three throttling classes to achieve our previously
    explained goals. Make sure you quit the Django development server. Remember that
    you just need to press *Ctrl* + *C* in the Terminal or Command Prompt window in
    which it is running.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `settings.py` file in the `games_service/games_service` folder. Add
    the following highlighted lines after the first line that declares the dictionary
    named `REST_FRAMEWORK` to add the new `'DEFAULT_THROTTLE_CLASSES'` and `'DEFAULT_THROTTLE_RATES'`
    setting keys. Don't remove the lines that will appear after the new highlighted
    lines. We don't show them to avoid repeating code. The code file for the sample
    is included in the `restful_python_2_08_02` folder, ...
  prefs: []
  type: TYPE_NORMAL
- en: Improving testing coverage
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will write additional test functions to improve the testing coverage.
    Specifically, we will write unit tests related to the player class-based views:
    `PlayerList` and `PlayerDetail`. Stay in the `tests.py` file in the `games_service/games`
    folder. Add the following code after the last line to declare a new function and
    new test functions. The code file for the sample is included in the `restful_python_2_08_03`
    folder, in the `Django01/games-service/games/tests.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The code declares the `create_player` function that receives the desired `name`
    and `gender` for the new player as arguments. The method builds the URL and the
    data dictionary to compose and send an HTTP `POST` method to the view associated
    with the `player-list` view name, and returns the response generated by this request.
    The code uses the received `client` to access the `APIClient` instance that allows
    us to easily compose and send HTTP requests for testing. Many test functions will
    call the `create_player` function to create a player, and then compose and send
    other HTTP requests to the API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `test_create_and_retrieve_player` test function tests whether we can create
    a new `Player` object and then retrieve it. The method calls the previously explained
    `create_player` function and then uses `assert` to check for the following expected
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: The `status_code` for the response is HTTP `201 Created` (`status.HTTP_201_CREATED`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The total number of `Player` objects retrieved from the database is `1`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `name` attribute of the `Player` object retrieved from the database matches
    the description specified when we created the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `gender` attribute of the `Player` object retrieved from the database matches
    the description specified when we created the object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stay in the `tests.py` file in the `games_service/games` folder. Add the following
    code after the last line to declare new test functions. The code file for the
    sample is included in the `restful_python_2_08_03` folder, in the `Django01/games-service/games/tests.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The code declares the following test functions whose names start with the `test_`
    prefix:'
  prefs: []
  type: TYPE_NORMAL
- en: '`test_create_duplicated_player`: This test function tests whether the unique
    constraints make it possible for us to create two players with the same name.
    The second time we compose and send an HTTP `POST` request with a duplicate player
    name, we should receive an HTTP `400 Bad Request` status code (`status.HTTP_400_BAD_REQUEST`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`test_retrieve_player_list`: This test function tests whether we can retrieve
    a specific player by its `id` with an HTTP `GET` request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We just coded a few tests related to players to improve test coverage. However,
    we should definitely write more tests to cover all the features included in our
    API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will use the `pytest` command to run the tests again. Make sure you
    run the following command in the Terminal or Command Prompt window in which you
    have activated the virtual environment, and that you are located within the `games_service`
    folder that has the `manage.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The output provided details indicating that `pytest` executed `8` tests and
    all of them passed. It is possible to work with `pytest` fixtures to reduce boilerplate
    code in the previously coded functions. However, we are focused on making the
    functions easy to understand. Then, you can use the code as a baseline and improve
    it by taking full advantage of additional features provided by Pytest fixtures
    and `pytest-django`.
  prefs: []
  type: TYPE_NORMAL
- en: We just created a few unit tests to understand how we can code them. However,
    of course, it would be necessary to write more tests to provide appropriate coverage
    of all the featured and execution scenarios included in the API.
  prefs: []
  type: TYPE_NORMAL
- en: Executing HTTP requests to test throttling policies
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Launch Django''s development server to compose and send HTTP requests. Execute
    either of the following two commands based on your needs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will write commands to compose and send HTTP requests many times. In
    order to do so, we will learn how to achieve this goal with any of the following
    options combined with `http` and `curl` commands. Select the most appropriate
    one based on your needs. Don''t forget that you will need to have the virtual
    environment activated in any of the options you select to run the commands when
    you use the `http` command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS: Terminal with a Bash shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Linux: Terminal with a Bash shell.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Windows: ...'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up unit tests with pytest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new `pytest.ini` file within the `games_service` folder (the same
    folder that has the `manage.py` file). The following lines show the code that
    specifies the desired configuration for Pytest. The code file for the sample is
    included in the `restful_python_2_08_02` folder, in the `Django01/game_service/manage.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `DJANGO_SETTINGS_MODULE` configuration variable specifies that we want to
    use the `settings.py` file located in the `games_service/games_service` folder
    as the settings module for Django when tests are executed.
  prefs: []
  type: TYPE_NORMAL
- en: The `python_files` configuration variable indicates the filters that `pytest`
    will use to find modules with test functions.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the first round of unit tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we will write the first round of unit tests. Specifically, we will write
    unit tests related to the ESRB rating class-based views: `EsrbRatingList` and
    `EsrbRatingDetail`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `tests.py` file in the `games_service/games` folder. Replace the existing
    code with the following lines that declare many `import` statements and two functions.
    The code file for the sample is included in the `restful_python_2_08_02` folder,
    in the `Django01/games-service/games/tests.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Running unit tests with pytest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, run the following command to create a test database, run all the migrations,
    and use `pytest`, in combination with the `pytest-django` plugin, to discover
    and execute all the tests we created. The test runner will execute all the methods
    that start with the `test_` prefix in the `tests.py` file and will display the
    results. Make sure you run the command in the Terminal or Command Prompt window
    in which you have activated the virtual environment, and that you are located
    within the `games_service` folder that has the `manage.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The tests won't make changes to the database we have been using when running
    request on the API through `pytest`.
  prefs: []
  type: TYPE_NORMAL
- en: The test runner will execute all the functions defined in the `tests.py` that
    start with the `test_` prefix and will display the results. We use the `-v` option
    to instruct `pytest` to print the test function names and statuses in the verbose
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show the sample output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The output provides details indicating that the test runner executed `5` tests,
    and all of them passed.
  prefs: []
  type: TYPE_NORMAL
- en: Running Django RESTful APIs on the cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the biggest drawbacks related to Django and Django REST Framework is
    that each HTTP request is blocking. Thus, whenever the Django server receives
    an HTTP request, it doesn't start working on any other HTTP requests in the incoming
    queue until the server sends the response for the first HTTP request is received.
  prefs: []
  type: TYPE_NORMAL
- en: However, one of the great advantages of RESTful Web Services is that they are
    stateless; that is, they shouldn't keep a client state on any server. Our API
    is a good example of a stateless RESTful Web Service. Thus, we can make the API
    run on as many servers as necessary to achieve our scalability goals. Obviously,
    we must take into account that we can easily transform the database server ...
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see whether you can answer the following questions correctly:'
  prefs: []
  type: TYPE_NORMAL
- en: Which of the following fixtures provided by the `pytest-django` plugin allow
    us to access the `APIClient` instance that makes it easy for us to compose and
    send HTTP requests for testing?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`client`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`api_client`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`http`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following decorators declared in `pytest-django` indicate that
    a test function needs to work with the test database?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@pytest.django.db`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@pytest.mark.django_db`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`@pytest.mark.db`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `ScopedRateThrottle` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests that a specific user can make
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests for specific parts of the API identified with the
    value assigned to the `throttle_scope` property
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests that an anonymous user can make
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `UserRateThrottle` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests that a specific user can make
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests for specific parts of the API identified with the
    value assigned to the `throttle_scope` property
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Limits the rate of requests that an anonymous user can make
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `DjangoFilterBackend` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides single query parameter-based searching capabilities and is based on
    the Django admin's search function
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allows the client to control how the results are ordered with a single query
    parameter
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides field filtering capabilities
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `SearchFilter` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides single query parameter-based searching capabilities and is based on
    the Django admin's search function
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Allows the client to control how the results are ordered with a single query
    parameter
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Provides field filtering capabilities
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following class attributes specifies the `FilterSet` subclass that
    we want to use for a class-based view?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`filters_class`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`filtering_class`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`filterset_class`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took advantage of many features included in Django REST
    Framework to define throttling policies. We used the filtering, searching, and
    ordering of classes to make it easy to configure filters, search queries, and
    the desired order for the results in HTTP requests. We used the Browsable API
    feature to test these new features included in our API.
  prefs: []
  type: TYPE_NORMAL
- en: We wrote the first round of unit tests and set the necessary configuration to
    use the popular and modern `pytest` Python unit test framework with Django REST
    Framework. Then, we wrote additional unit tests to improve test coverage. Finally,
    we understood many considerations for deployment and scalability in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have built a complex API with Django REST Framework ...
  prefs: []
  type: TYPE_NORMAL
