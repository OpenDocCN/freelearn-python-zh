["```py\n>>> def add_value_functional(items, value):\n...     return items + [value]\n\n>>> items = [1, 2, 3]\n>>> add_value_functional(items, 5)\n[1, 2, 3, 5]\n>>> items\n[1, 2, 3]\n\n>>> def add_value_regular(items, value):\n...     items.append(value)\n...     return items\n\n>>> add_value_regular(items, 5)\n[1, 2, 3, 5]\n>>> items\n[1, 2, 3, 5] \n```", "```py\n>>> squares = [x ** 2 for x in range(10)]\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81] \n```", "```py\n>>> odd_squares = [x ** 2 for x in range(10) if x % 2]\n>>> odd_squares\n[1, 9, 25, 49, 81] \n```", "```py\n>>> def square(x):\n...     return x ** 2\n\n>>> def odd(x):\n...     return x % 2\n\n>>> squares = list(map(square, range(10)))\n>>> squares\n[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n>>> odd_squares = list(filter(odd, map(square, range(10))))\n>>> odd_squares\n[1, 9, 25, 49, 81] \n```", "```py\n>>> import os\n\n>>> directories = filter(os.path.isdir, os.listdir('.'))\n# Versus:\n>>> directories = [x for x in os.listdir('.') if os.path.isdir(x)] \n```", "```py\n>>> odd_squares = []\n>>> for x in range(10):\n...     if x % 2:\n...         odd_squares.append(x ** 2)\n\n>>> odd_squares\n[1, 9, 25, 49, 81] \n```", "```py\n# List comprehension\n>>> [x // 2 for x in range(3)]\n[0, 0, 1]\n\n# Set comprehension\n>>> numbers = {x // 2 for x in range(3)}\n>>> sorted(numbers)\n[0, 1] \n```", "```py\n>>> {x: x ** 2 for x in range(6)}\n{0: 0, 1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n>>> {x: x ** 2 for x in range(6) if x % 2}\n{1: 1, 3: 9, 5: 25} \n```", "```py\n>>> {x ** 2: [y for y in range(x)] for x in range(5)}\n{0: [], 1: [0], 4: [0, 1], 16: [0, 1, 2, 3], 9: [0, 1, 2]} \n```", "```py\n>>> import random\n\n>>> [random.random() for _ in range(10) if random.random() >= 0.5]\n[0.5211948104577864, 0.650010512129705, 0.021427316545174158] \n```", "```py\n>>> import random\n\n>>> numbers = [random.random() for _ in range(10)]\n>>> [x for x in numbers if x >= 0.5]\n[0.715510247827078, 0.8426277505519564, 0.5071133900377911] \n```", "```py\n>>> import random\n\n>>> [x for x in [random.random() for _ in range(10)] if x >= 0.5] \n```", "```py\n>>> import random\n\n>>> [x for _ in range(10) for x in [random.random()] if x >= 0.5] \n```", "```py\n>>> [(x, y) for x in range(3) for y in range(3, 5)]\n[(0, 3), (0, 4), (1, 3), (1, 4), (2, 3), (2, 4)] \n```", "```py\n>>> results = []\n>>> for x in range(3):\n...     for y in range(3, 5):\n...         results.append((x, y))\n...\n>>> results\n[(0, 3), (0, 4), (1, 3), (1, 4), (2, 3), (2, 4)] \n```", "```py\n>>> matrix = [\n...     [1, 2, 3, 4],\n...     [5, 6, 7, 8],\n...     [9, 10, 11, 12],\n... ]\n\n>>> reshaped_matrix = [\n...     [\n...         [y for x in matrix for y in x][i * len(matrix) + j]\n...         for j in range(len(matrix))\n...     ]\n...     for i in range(len(matrix[0]))\n... ]\n\n>>> import pprint\n\n>>> pprint.pprint(reshaped_matrix, width=40)\n[[1, 2, 3],\n [4, 5, 6],\n [7, 8, 9],\n [10, 11, 12]] \n```", "```py\n>>> import operator\n\n>>> values = dict(one=1, two=2, three=3)\n\n>>> sorted(values.items())\n[('one', 1), ('three', 3), ('two', 2)]\n\n>>> sorted(values.items(), key=lambda item: item[1])\n[('one', 1), ('two', 2), ('three', 3)]\n\n>>> get_value = operator.itemgetter(1)\n>>> sorted(values.items(), key=get_value)\n[('one', 1), ('two', 2), ('three', 3)] \n```", "```py\n>>> key = lambda item: item[1]\n\n>>> def key(item):\n...     return item[1] \n```", "```py\nY = lambda f: lambda *args: f(Y(f))(*args) \n```", "```py\ndef Y(f):\n    def y(*args):\n        y_function = f(Y(f))\n        return y_function(*args)\n    return y \n```", "```py\n>>> Y = lambda f: lambda *args: f(Y(f))(*args)\n\n>>> def factorial(combinator):\n...     def _factorial(n):\n...         if n:\n...             return n * combinator(n - 1)\n...         else:\n...             return 1\n...     return _factorial\n\n>>> Y(factorial)(5)\n120 \n```", "```py\n>>> Y = lambda f: lambda *args: f(Y(f))(*args)\n\n>>> Y(lambda c: lambda n: n and n * c(n - 1) or 1)(5)\n120 \n```", "```py\n>>> Y = lambda f: lambda *args: f(Y(f))(*args)\n\n>>> Y(lambda c: lambda n: n * c(n - 1) if n else 1)(5)\n120 \n```", "```py\n>>> quicksort = Y(lambda f:\n...     lambda x: (\n...         f([item for item in x if item < x[0]])\n...         + [y for y in x if x[0] == y]\n...         + f([item for item in x if item > x[0]])\n...     ) if x else [])\n\n>>> quicksort([1, 3, 5, 4, 1, 3, 2])\n[1, 1, 2, 3, 3, 4, 5] \n```", "```py\n>>> import heapq\n\n>>> heap = []\n>>> heapq.heappush(heap, 1)\n>>> heapq.heappush(heap, 3)\n>>> heapq.heappush(heap, 5)\n>>> heapq.heappush(heap, 2)\n>>> heapq.heappush(heap, 4)\n>>> heapq.nsmallest(3, heap)\n[1, 2, 3] \n```", "```py\n>>> def push(*args, **kwargs):\n...     return heapq.heappush(heap, *args, **kwargs) \n```", "```py\n>>> import functools\n>>> import heapq\n\n>>> heap = []\n>>> push = functools.partial(heapq.heappush, heap)\n>>> smallest = functools.partial(heapq.nsmallest, iterable=heap)\n\n>>> push(1)\n>>> push(3)\n>>> push(5)\n>>> push(2)\n>>> push(4)\n>>> smallest(3)\n[1, 2, 3] \n```", "```py\n>>> lambda_push = lambda x: heapq.heappush(heap, x)\n\n>>> heapq.heappush\n<built-in function heappush>\n>>> push\nfunctools.partial(<built-in function heappush>, [1, 2, 5, 3, 4])\n>>> lambda_push\n<function <lambda> at ...>\n\n>>> heapq.heappush.__doc__\n'Push item onto heap, maintaining the heap invariant.'\n>>> push.__doc__\n'partial(func, *args, **keywords) - new function ...'\n>>> lambda_push.__doc__ \n```", "```py\n>>> import operator\n>>> import functools\n\n>>> functools.reduce(operator.mul, range(1, 5))\n24 \n```", "```py\n>>> from operator import mul\n\n>>> mul(mul(mul(1, 2), 3), 4)\n24 \n```", "```py\n>>> import operator\n\n>>> def reduce(function, iterable):\n...     print(f'iterable={iterable}')\n...     # Fetch the first item to prime 'result'\n...     result, *iterable = iterable\n...\n...     for item in iterable:\n...         old_result = result\n...         result = function(result, item)\n...         print(f'{old_result} * {item} = {result}')\n...\n...     return result\n\n>>> iterable = list(range(1, 5))\n>>> iterable\n[1, 2, 3, 4]\n\n>>> reduce(operator.mul, iterable)\niterable=[1, 2, 3, 4]\n1 * 2 = 2\n2 * 3 = 6\n6 * 4 = 24\n24 \n```", "```py\n>>> import json\n>>> import functools\n>>> import collections\n\n>>> def tree():\n...     return collections.defaultdict(tree)\n\n# Build the tree:\n>>> taxonomy = tree()\n>>> reptilia = taxonomy['Chordata']['Vertebrata']['Reptilia']\n>>> reptilia['Squamata']['Serpentes']['Pythonidae'] = [\n...     'Liasis', 'Morelia', 'Python']\n\n# The actual contents of the tree\n>>> print(json.dumps(taxonomy, indent=4))\n{\n    \"Chordata\": {\n        \"Vertebrata\": {\n            \"Reptilia\": {\n                \"Squamata\": {\n                    \"Serpentes\": {\n                        \"Pythonidae\": [\n                            \"Liasis\",\n                            \"Morelia\",\n                            \"Python\"\n                        ]\n                    }\n                }\n            }\n        }\n    }\n} \n```", "```py\n# Let's build the lookup function\n>>> import operator\n\n>>> def lookup(tree, path):\n...     # Split the path for easier access\n...     path = path.split('.')\n...\n...     # Use 'operator.getitem(a, b)' to get 'a[b]'\n...     # And use reduce to recursively fetch the items\n...     return functools.reduce(operator.getitem, path, tree)\n\n>>> path = 'Chordata.Vertebrata.Reptilia.Squamata.Serpentes'\n>>> dict(lookup(taxonomy, path))\n{'Pythonidae': ['Liasis', 'Morelia', 'Python']}\n\n# The path we wish to get\n>>> path = 'Chordata.Vertebrata.Reptilia.Squamata'\n>>> lookup(taxonomy, path).keys()\ndict_keys(['Serpentes']) \n```", "```py\nfold_left = functools.reduce(\n    lambda x, y: function(x, y),\n    iterable,\n    initializer,\n) \n```", "```py\nfold_right = functools.reduce(\n    lambda x, y: function(y, x),\n    reversed(iterable),\n    initializer,\n) \n```", "```py\n>>> import operator\n>>> import itertools\n\n# Sales per month\n>>> months = [10, 8, 5, 7, 12, 10, 5, 8, 15, 3, 4, 2]\n>>> list(itertools.accumulate(months, operator.add))\n[10, 18, 23, 30, 42, 52, 57, 65, 80, 83, 87, 89] \n```", "```py\n>>> import itertools\n\n>>> a = range(3)\n>>> b = range(5)\n>>> list(itertools.chain(a, b))\n[0, 1, 2, 0, 1, 2, 3, 4] \n```", "```py\n>>> import itertools\n\n>>> iterables = [range(3), range(5)]\n>>> list(itertools.chain.from_iterable(iterables))\n[0, 1, 2, 0, 1, 2, 3, 4] \n```", "```py\n>>> import itertools\n\n>>> list(itertools.compress(range(1000), [0, 1, 1, 1, 0, 1]))\n[1, 2, 3, 5] \n```", "```py\n>>> primes = [0, 0, 1, 1, 0, 1, 0, 1]\n>>> odd = [0, 1, 0, 1, 0, 1, 0, 1]\n>>> numbers = ['zero', 'one', 'two', 'three', 'four', 'five']\n\n# Primes:\n>>> list(itertools.compress(numbers, primes))\n['two', 'three', 'five']\n\n# Odd numbers\n>>> list(itertools.compress(numbers, odd))\n['one', 'three', 'five']\n\n# Odd primes\n>>> list(itertools.compress(numbers, map(all, zip(odd, primes))))\n['three', 'five'] \n```", "```py\n>>> import itertools\n\n>>> list(itertools.dropwhile(lambda x: x <= 3, [1, 3, 5, 4, 2]))\n[5, 4, 2] \n```", "```py\n>>> import itertools\n\n>>> list(itertools.takewhile(lambda x: x <= 3, [1, 3, 5, 4, 2]))\n[1, 3] \n```", "```py\n>>> import itertools\n\n>>> list(itertools.islice(itertools.count(), 10))\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n>>> list(itertools.islice(itertools.count(), 5, 10, 2))\n[5, 7, 9]\n\n>>> list(itertools.islice(itertools.count(10, 2.5), 5))\n[10, 12.5, 15.0, 17.5, 20.0] \n```", "```py\n>>> import operator\n>>> import itertools\n\n>>> words = ['aa', 'ab', 'ba', 'bb', 'ca', 'cb', 'cc']\n\n# Gets the first element from the iterable\n>>> getter = operator.itemgetter(0)\n\n>>> for group, items in itertools.groupby(words, key=getter):\n...     print(f'group: {group}, items: {list(items)}')\ngroup: a, items: ['aa', 'ab']\ngroup: b, items: ['ba', 'bb']\ngroup: c, items: ['ca', 'cb', 'cc'] \n```", "```py\n>>> import itertools\n\n>>> raw_items = ['spam', 'eggs', 'sausage', 'spam']\n\n>>> def keyfunc(group):\n...     return group[0]\n\n>>> for group, items in itertools.groupby(raw_items, key=keyfunc):\n...     print(f'group: {group}, items: {list(items)}')\ngroup: s, items: ['spam']\ngroup: e, items: ['eggs']\ngroup: s, items: ['sausage', 'spam']\n\n>>> raw_items.sort()\n>>> for group, items in itertools.groupby(raw_items, key=keyfunc):\n...     print(f'group: {group}, items: {list(items)}')\ngroup: e, items: ['eggs']\ngroup: s, items: ['sausage', 'spam', 'spam'] \n```"]