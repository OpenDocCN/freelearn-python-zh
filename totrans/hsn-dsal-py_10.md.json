["```py\ndef search(unordered_list, term):\n    for i, item in enumerate(unordered_list):\n        if term == unordered_list[i]:\n            return i\n    return None \n```", "```py\nlist1 = [60, 1, 88, 10, 11, 600]\n\nsearch_term = 10\nindex_position = search(list1, search_term) \nprint(index_position)\nlist2 = ['packt', 'publish', 'data']\nsearch_term2 = 'data'\nIndex_position2 = search(list2, search_term2)\nprint(Index_position2) \n```", "```py\n3\n2 \n```", "```py\ndef search_ordered(ordered_list, term):\n     ordered_list_size = len(ordered_list)\n     for i in range(ordered_list_size):\n          if term == ordered_list[i]:\n              return i\n          elif ordered_list[i] > term:\n              return None\n     return None \n```", "```py\nlist1 = [2, 3, 4, 6, 7]\n\nsearch_term = 5\nindex_position1 = search_ordered(list1, search_term)\n\nif index_position1 is None:\n    print(\"{} not found\".format(search_term))\nelse:\n    print(\"{} found at position {}\".format(search_term, index_position1))\n\nlist2 = ['book','data','packt', 'structure']\n\nsearch_term2 = 'structure'\nindex_position2 = search_ordered(list2, search_term2)\nif index_position2 is None:\n    print(\"{} not found\".format(search_term2))\nelse:\n    print(\"{} found at position {}\".format(search_term2, index_position2)) \n```", "```py\n5 not found\nstructure found at position 3 \n```", "```py\ndef search_ordered(ordered_list, term):\n    print(\"Entering Linear Search\")\n    ordered_list_size = len(ordered_list)\n    for i in range(ordered_list_size):\n        if term == ordered_list[i]:\n            return i\n        elif ordered_list[i] > term:\n            return -1\n    return -1 \n```", "```py\ndef jump_search(ordered_list, item):\n    import math\n    print(\"Entering Jump Search\")\n    list_size = len(ordered_list)\n    block_size = int(math.sqrt(list_size))\n    i = 0\n    while i != len(ordered_list)-1 and ordered_list[i] <= item: \n        print(\"Block under consideration - {}\".format(ordered_list[i: i+block_size]))\n        if i+ block_size > len(ordered_list):\n            block_size =  len(ordered_list) - i\n            block_list = ordered_list[i: i+block_size]\n            j = search_ordered(block_list, item)\n            if j == -1:\n                print(\"Element not found\")\n                return\n            return i + j\n        if ordered_list[i + block_size -1] == item: \n            return i+block_size-1\n        elif ordered_list[i + block_size - 1] > item: \n            block_array = ordered_list[i: i + block_size - 1]\n            j = search_ordered(block_array, item)\n            if j == -1:\n                print(\"Element not found\")\n                return\n            return i + j\n        i += block_size \n```", "```py\n if ordered_list[i+ block_size -1] == item:           \n            return i+ block_size -1 \n```", "```py\n elif ordered_list[i+ block_size -1] > item:           \n            block_array = ordered_list[i: i+ block_size -1]\n            j = search_ordered(block_array, item) \n            if j == -1:\n                print(\"Element not found\")\n                return   \n            return i + j \n```", "```py\n if i+ block_size > len(ordered_list):\n            block_size =  len(ordered_list) - i\n            block_list = ordered_list[i: i+block_size]\n            j = search_ordered(block_list, item)\n            if j == -1:\n                print(\"Element not found\")\n                return\n            return i + j \n```", "```py\nprint(jump_search([1,2,3,4,5,6,7,8,9, 10, 11], 8)) \n```", "```py\nEntering Jump Search\nBlock under consideration - [1, 2, 3]\nBlock under consideration - [4, 5, 6]\nBlock under consideration - [7, 8, 9]\nEntering Linear Search\n7 \n```", "```py\ndef binary_search_iterative(ordered_list, term):\n    size_of_list = len(ordered_list) – 1\n    index_of_first_element = 0\n    index_of_last_element = size_of_list\n    while index_of_first_element <= index_of_last_element:\n        mid_point = (index_of_first_element + index_of_last_element)/2\n        if ordered_list[mid_point] == term:\n            return mid_point\n        if term > ordered_list[mid_point]:\n            index_of_first_element = mid_point + 1\n        else:\n            index_of_last_element = mid_point – 1\n    if index_of_first_element > index_of_last_element:\n        return None \n```", "```py\nmid_point = (index_of_first_element + index_of_last_element)/2 \n```", "```py\nlist1 = [10, 30, 100, 120, 500]\n\nsearch_term = 10\nindex_position1 = binary_search_iterative(list1, search_term)\nif index_position1 is None:\n    print(\"The data item {} is not found\".format(search_term))\nelse:\n    print(\"The data item {} is found at position {}\".format(search_term, index_position1))\n\nlist2 = ['book','data','packt', 'structure']\n\nsearch_term2 = 'structure'\nindex_position2 = binary_search_iterative(list2, search_term2)\nif index_position2 is None:\n    print(\"The data item {} is not found\".format(search_term2))\nelse:\n    print(\"The data item {} is found at position {}\".format(search_term2, index_position2)) \n```", "```py\nThe data item 10 is found at position 0\nThe data item structure is found at position 3 \n```", "```py\ndef binary_search_recursive(ordered_list, first_element_index, last_element_index, term):\n    if (last_element_index < first_element_index):\n        return None\n    else:\n        mid_point = first_element_index + ((last_element_index - first_element_index) // 2)\n        if ordered_list[mid_point] > term:\n            return binary_search_recursive (ordered_list, first_element_index, mid_point-1, term)\n        elif ordered_list[mid_point] < term:\n            return binary_search_recursive (ordered_list, mid_point+1, last_element_index, term)\n        else:\n            return mid_point \n```", "```py\nlist1 = [10, 30, 100, 120, 500]\n\nsearch_term = 10\nindex_position1 =  binary_search_recursive(list1, 0, len(list1)-1, search_term)\nif index_position1 is None:\n    print(\"The data item {} is not found\".format(search_term))\nelse:\n    print(\"The data item {} is found at position {}\".format(search_term, index_position1))\n\nlist2 = ['book','data','packt',  'structure']\n\nsearch_term2 = 'data'\nindex_position2 = binary_search_recursive(list2, 0, len(list1)-1, search_term2)\nif index_position2 is None:\n    print(\"The data item {} is not found\".format(search_term2))\nelse:\n    print(\"The data item {} is found at position {}\".format(search_term2, index_position2)) \n```", "```py\nThe data item 10 is found at position 0\nThe data item data is found at position 1 \n```", "```py\n=>  n/2^k = 1 \n```", "```py\n=> log[2](n) = log[2](2k)\n=> log[2](n) = k log[2](2)\n=> k = log[2](n) \n```", "```py\nlist1 = [4,60,75,100,120,230,250]\nlow_index = 0\nupper_index = 6\nlist1[upper_index] = 250\nlist1[low_index] = 44\nsearch_value = 230 \n```", "```py\nmid = low_index +  ((upper_index - low_index)/ (list1[upper_index] - list1[low_index])) * (search_value - list1[low_index])\n=> 0 + [(6-0)/(250-44)] * (230-44)\n=> 5.41\n=> 5 \n```", "```py\ndef nearest_mid(input_list, low_index, upper_index, search_value):\n       mid = low_index + (( upper_index - low_index)/(input_list[upper_index] - input_list[low_index])) * (search_value - input_list[low_index])\n       return int(mid) \n```", "```py\ndef interpolation_search(ordered_list, search_value):\n    low_index = 0\n    upper_index = len(ordered_list) - 1\n    while low_index <= upper_index:\n        mid_point = nearest_mid(ordered_list, low_index, upper_index, search_value)\n        if mid_point > upper_index or mid_point < low_index:\n            return None\n        if ordered_list[mid_point] == search_value:\n            return mid_point\n        if search_value > ordered_list[mid_point]:\n            low_index = mid_point + 1\n        else:\n            upper_index = mid_point – 1\n    if low_index > upper_index:\n        return None \n```", "```py\n if search_value > ordered_list[mid_point]:\n            low_index = mid_point + 1\n        else:\n            upper_index = mid_point - 1 \n```", "```py\n{44, 60, 75, 100, 120, 230, 250}, in which we want to search for 120 using the interpolation search algorithm.\n```", "```py\nlist1 = [44, 60, 75, 100, 120, 230, 250]\na = interpolation_search(list1, 120)\nprint(\"Index position of value 2 is \", a) \n```", "```py\nIndex position of value 2 is  4 \n```", "```py\n[ 2, 4, 5, 12, 43, 54, 60, 77] \n```", "```py\nmid_point = 0 + [(7-0)/(77-2)] * (2-2)\n          = 0 \n```", "```py\ndef binary_search_recursive(ordered_list, first_element_index, last_element_index, term):\n    if (last_element_index < first_element_index):\n        return None\n    else:\n        mid_point = first_element_index + ((last_element_index - first_element_index) // 2)\n        if ordered_list[mid_point] > term:\n            return binary_search_recursive (ordered_list, first_element_index, mid_point-1, term)\n        elif ordered_list[mid_point] < term:\n            return binary_search_recursive (ordered_list, mid_point+1, last_element_index, term)\n        else:\n            return mid_point \n```", "```py\ndef exponential_search(A, search_value):\n    if (A[0] == search_value):\n        return 0    \n    index = 1\n    while index < len(A) and A[index] < search_value:\n        index *= 2       \n    return binary_search_recursive(A, index // 2, min(index, len(A) - 1), search_value) \n```", "```py\n while index < len(A) and A[index] < search_value:\n        index *= 2 \n```", "```py\n return binary_search_recursive(A, index // 2, min(index, len(A) - 1), search_value) \n```", "```py\nprint(exponential_search([1,2,3,4,5,6,7,8,9, 10, 11, 12, 34, 40], 34)) \n```", "```py\n12 \n```"]