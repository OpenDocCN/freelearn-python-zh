- en: Chapter 17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Dual-Alternative Decision Structure
  prefs: []
  type: TYPE_NORMAL
- en: 17.1 The Dual-Alternative Decision Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In contrast to the single-alternative decision structure, this type of decision
    control structure includes a statement or block of statements on both paths.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-01.png)'
  prefs: []
  type: TYPE_IMG
- en: If Boolean_Expression evaluates to True, the statement or block of statements
    1 is executed; otherwise, the statement or block of statements 2 is executed.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the Python statement is
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are an adult” is displayed when the user
    enters a value greater than or equal to 18\. The message “You are underage!”  is
    displayed otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_17.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter your age: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if age >= 18:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are an adult!")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are underage!")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.1-1 Finding the Output Message
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For the following flowchart, determine the output message for three different
    executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 3, (ii) −3, and (iii) 0.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)When the user enters the value 3, the Boolean expression evaluates to True.
    The flow of execution follows the right path and the message “Positive” is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: ii)When the user enters the value −3, the Boolean expression evaluates to False.
    The flow of execution follows the left path and the message “Negative” is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Can you predict what happens when the user enters the value 0? If you believe
    that none of the messages will be displayed, you are wrong! The dual-alternative
    decision structure must always follow a path, either the right or the left! It
    cannot skip the execution of both of its blocks of statements. At least one statement
    or block of statements must be executed. So, in this case, when the user enters
    the value 0, the Boolean expression evaluates to False, the flow of execution
    follows the left path, and the message “Negative” is displayed!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)This algorithm, as it stands, does not satisfy the property
    of effectiveness for all possible inputs. While it correctly identifies positive
    and negative values, it overlooks the case of zero. Zero is a valid input and
    should be accounted for in the algorithm''s logic to ensure it produces a meaningful
    result for all potential inputs. Later in this book (in [Exercise 19.1-2](chapter19.html#toc_3)),
    you will learn how to display three messages, depending on whether the user-provided
    value is greater than, less than, or equal to zero.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)A Decision symbol has one entrance and two exit paths!
    You cannot have a third exit!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.1-2 Trace Tables and Dual-Alternative Decision Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 5, and (ii) 10.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_17.1-2'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = a * 10
  prefs: []
  type: TYPE_NORMAL
- en: w = (z - 4) * (a - 3) / 7 + 36
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < z >= w:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 2 * a
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 4 * a
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 5, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | z | w | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = float(input()) | User enters the value 5 | 5.0 | ? | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | z = a * 10 |   | 5.0 | 50.0 | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | w = (z ‑ 4) * (a ‑ 3) / 7 + 36 |   | 5.0 | 50.0 | 49.142 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | if a < z >= w: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | y = 2 * a |   | 5.0 | 50.0 | 49.142 | 10.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(y) | It displays: 10.0 |'
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 10, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | z | w | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = float(input()) | User enters the value 10 | 10.0 | ? | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | z = a * 10 |   | 10.0 | 100.0 | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | w = (z ‑ 4) * (a ‑ 3) / 7 + 36 |   | 10.0 | 100.0 | 132.0 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | if a < z >= w: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | y = 4 * a |   | 10.0 | 100.0 | 132.0 | 40.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(y) | It displays: 40.0 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 17.1-3 Who is the Greatest?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter two numbers A and B and then determines and displays the greater of
    the two numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise can be solved using either the dual- or single-alternative decision
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Using a dual-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: This approach tests if the value of number B is greater than that of number
    A. If so, number B is the greatest; otherwise, number A is the greatest. The corresponding
    flowchart for solving this exercise using this approach is presented below
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-03.png)'
  prefs: []
  type: TYPE_IMG
- en: and the Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_17.1-3a'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if b > a:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = b
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = a
  prefs: []
  type: TYPE_NORMAL
- en: print("Greatest value:", maximum)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that this exercise is trying to determine the greatest
    value and not which variable this value is actually assigned to (to variable A
    or to variable B).'
  prefs: []
  type: TYPE_NORMAL
- en: Second approach – Using a single-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: As presented in the following flowchart, this approach initially assumes that
    number A is likely the greatest value (this is why it assigns the value of variable
    a to variable maximum). However, if it turns out that number B is greater than
    number A, then the greatest value is updated; variable maximum is assigned a new
    value—the value of variable b. Thus, irrespective of the values of numbers A and
    B, in the end, variable maximum will always contain the greatest value!
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_17.1-3b'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: maximum = a
  prefs: []
  type: TYPE_NORMAL
- en: 'if b > a:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = b
  prefs: []
  type: TYPE_NORMAL
- en: print("Greatest value:", maximum)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.1-4 Finding Odd and Even Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that prompts the
    user to enter a positive integer, and then displays a message indicating whether
    this number is even; it must display “Odd” otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'Next you can find various odd and even numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '►Odd numbers: 1, 3, 5, 7, 9, 11, …'
  prefs: []
  type: TYPE_NORMAL
- en: '►Even numbers: 0, 2, 4, 6, 8, 10, 12, ….'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that zero is considered an even number.'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you need to find a way to determine whether a number is odd
    or even. You need to find a common attribute between all even numbers, or between
    all odd numbers. And actually there is one! All even numbers are exactly divisible
    by 2\. So, when the result of the operation x MOD 2 equals 0, x is even; otherwise,
    x is odd.
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-05.png)'
  prefs: []
  type: TYPE_IMG
- en: and the Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_17.1-4'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter a positive integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Even")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Odd")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 17.1-5 Weekly Wages
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Gross pay depends on the pay rate and the total number of hours worked per week.
    However, if someone works more than 40 hours, they get paid time-and-a-half for
    all hours worked over 40\. Design a flowchart and write the corresponding Python
    program that lets the user enter a pay rate and the hours worked and then calculates
    and displays the gross pay.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'This exercise can be solved using the dual-alternative decision structure.
    When the hours worked are over 40, the gross pay is calculated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: gross pay = (pay rate) × 40 + 1.5 × (pay rate) × (all hours worked over 40)
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart that solves this problem is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-06.png)'
  prefs: []
  type: TYPE_IMG
- en: and the Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_17.1-5'
  prefs: []
  type: TYPE_NORMAL
- en: payRate = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: hoursWorked = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if hoursWorked <= 40:'
  prefs: []
  type: TYPE_NORMAL
- en: grossPay = payRate * hoursWorked
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: grossPay = payRate * 40 + 1.5 * payRate * (hoursWorked - 40)
  prefs: []
  type: TYPE_NORMAL
- en: print("Gross Pay:", grossPay)
  prefs: []
  type: TYPE_NORMAL
- en: '17.2 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)It is a possible that none of the statements enclosed in a dual-alternative
    decision structure will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 2)The dual-alternative decision structure must include at least two statements.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The dual-alternative decision structure uses the reserved keyword else.
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following statement is syntactically correct.
  prefs: []
  type: TYPE_NORMAL
- en: else = 5
  prefs: []
  type: TYPE_NORMAL
- en: 5)In a dual-alternative decision structure, the evaluated Boolean expression
    can return more than two values.
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following code fragment satisfies the property of effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y and x > z:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Value", x, "is the greatest one")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Value", y, "is the greatest one")
  prefs: []
  type: TYPE_NORMAL
- en: '17.3 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The dual-alternative decision structure includes a statement or block of statements
    on
  prefs: []
  type: TYPE_NORMAL
- en: a)the false path only.
  prefs: []
  type: TYPE_NORMAL
- en: b)both paths.
  prefs: []
  type: TYPE_NORMAL
- en: c)the true path only.
  prefs: []
  type: TYPE_NORMAL
- en: 2)In the following code fragment,
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is executed when
  prefs: []
  type: TYPE_NORMAL
- en: a)variable x is exactly divisible by 2.
  prefs: []
  type: TYPE_NORMAL
- en: b)variable x contains an even number.
  prefs: []
  type: TYPE_NORMAL
- en: c)variable x contains an odd number.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)In the following code fragment,
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = 7
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is executed
  prefs: []
  type: TYPE_NORMAL
- en: a)when variable x contains a value of 3.
  prefs: []
  type: TYPE_NORMAL
- en: b)when variable x contains a value other than 3.
  prefs: []
  type: TYPE_NORMAL
- en: c)both of the above
  prefs: []
  type: TYPE_NORMAL
- en: 17.4 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    of the next Python program for two different executions. Then, design the corresponding
    flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 3, and (ii) 0.5.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = a * 3 - 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if z >= 1:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 6 * a
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: z += 1
  prefs: []
  type: TYPE_NORMAL
- en: y = 6 * a + z
  prefs: []
  type: TYPE_NORMAL
- en: print(z, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program. Then, design the corresponding flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: x = 3
  prefs: []
  type: TYPE_NORMAL
- en: y = x ** 3 + 9
  prefs: []
  type: TYPE_NORMAL
- en: z = 2 * x + y - 4
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y:'
  prefs: []
  type: TYPE_NORMAL
- en: y = z % x
  prefs: []
  type: TYPE_NORMAL
- en: z = sqrt(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = z % y
  prefs: []
  type: TYPE_NORMAL
- en: z = sqrt(y)
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y, ",", z)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write the Python program that corresponds to the following flowchart and then
    create a trace table to determine the values of the variables in each step for
    two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 10, and (ii) 2.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-07.png)'
  prefs: []
  type: TYPE_IMG
- en: 4)Using a dual-alternative decision structure, write a Python program that prompts
    the user to enter a number, and then displays a message indicating whether the
    user-provided number is greater than 100\. It must display “Provided number is
    less than or equal to 100” otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Using a dual-alternative decision structure, write a Python program that prompts
    the user to enter a number, and then displays a message indicating whether the
    user-provided number is between 0 and 100\. It must display “Provided number is
    not between 0 and 100” otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Two football teams play against each other in the UEFA Champions League. Using
    a dual-alternative decision structure, write a Python program that prompts the
    user to enter the names of the two teams and the goals that each team scored,
    and then displays the name of the winner. Assume that the user enters valid values
    and there is no tie (draw).
  prefs: []
  type: TYPE_NORMAL
- en: 7)Using a dual-alternative decision structure, write a Python program that lets
    the user enter an integer, and then displays a message indicating whether the
    user-provided number is a multiple of 6; it must display “NN is not a multiple
    of 6” otherwise (where NN is the user-provided number). Assume that the user enters
    a non-negative^([[14]](footnotes.html#Endnote_14)) value.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Using a dual-alternative decision structure, write a Python program that lets
    the user enter an integer, and then displays one of two possible messages. One
    message indicates if the user-provided number is a multiple of 6 or a multiple
    of 7; the other message indicates if the user-provided number is neither a multiple
    of 6 nor a multiple of 7\. Assume that the user enters a non-negative value.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Using a dual-alternative decision structure, write a Python program that lets
    the user enter an integer. The program must then display a message indicating
    whether the user-provided number is a multiple of 4; it must display “NN is not
    a multiple of 4” otherwise (where NN is the user-provided number). Additionally,
    the program must present the structure of the user-provided integer as “NN = QQ
    x 4 + RR”, where QQ is the integer quotient, and RR is the integer remainder when
    NN is divided by 4\. For example, if the user-provided integer is 14, the message
    “14 = 3 x 4 + 2” must be displayed. Assume that the user enters a non-negative
    value.
  prefs: []
  type: TYPE_NORMAL
- en: 10)Using a dual-alternative decision structure, design a flowchart and write
    the corresponding Python program that lets the user enter two values, and then
    determines and displays the smaller of the two values. Assume that the user enters
    two different values.
  prefs: []
  type: TYPE_NORMAL
- en: 11)Using a dual-alternative decision structure, write a Python program that
    lets the user enter three numbers, and then displays a message indicating whether
    the user-provided numbers can be lengths of the three sides of a triangle; it
    must display “Provided numbers cannot be lengths of the three sides of a triangle”
    otherwise. Assume that the user enters valid values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: In any triangle, the length of each side is less than the sum of the
    lengths of the other two sides.'
  prefs: []
  type: TYPE_NORMAL
- en: 12)Using a dual-alternative decision structure, write a Python program that
    lets the user enter three numbers, and then displays a message indicating whether
    the user-provided numbers can be lengths of the three sides of a right triangle
    (or right-angled triangle); it must display “Provided numbers cannot be lengths
    of the three sides of a right triangle” otherwise. Assume that the user enters
    valid values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint 1: Use the Pythagorean theorem.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint 2: You can use lengths of 3, 4 and 5 (which can be lengths of the three
    sides of a right triangle) to test your program.'
  prefs: []
  type: TYPE_NORMAL
- en: 13)Athletes in the long jump at the Olympic Games in Athens in 2004 participated
    in three different qualifying jumps. An athlete, in order to qualify, has to achieve
    an average jump distance of at least 8 meters. Using a dual-alternative decision
    structure, write a Python program that prompts the user to enter the three performances,
    and then displays the message “Qualified” when the average value is greater than
    or equal to 8 meters; it displays “Disqualified” otherwise. Assume that the user
    enters valid values.
  prefs: []
  type: TYPE_NORMAL
- en: 14)Gross pay depends on the pay rate and the total number of hours worked per
    week. However, if someone works more than 40 hours, they get paid double for all
    hours worked over 40\. Using a dual-alternative decision structure, design a flowchart
    and write the corresponding Python program that lets the user enter the pay rate
    and hours worked and then calculates and displays net pay. Net pay is the amount
    of pay that is actually paid to the employee after any deductions. Deductions
    include taxes, health insurance, retirement plans, on so on. Assume a total deduction
    of 30%. Also, assume that the user enters valid values.
  prefs: []
  type: TYPE_NORMAL
- en: '15)Regular servicing will keep your vehicle more reliable, reducing the chance
    of breakdowns, inconvenience and unnecessary expenses. In general, there are two
    types of service you need to perform:'
  prefs: []
  type: TYPE_NORMAL
- en: a)a minor service every 6000 miles
  prefs: []
  type: TYPE_NORMAL
- en: b)a major service every 12000 miles
  prefs: []
  type: TYPE_NORMAL
- en: Using a dual-alternative decision structure, write a Python program that prompts
    the user to enter the miles traveled, and then calculates and displays how many
    miles are left until the next service, as well as the type of the next service.
    Assume that the user enters a valid value.
  prefs: []
  type: TYPE_NORMAL
- en: 16)Two cars start from rest and move with a constant acceleration along a straight
    horizontal road for a specified time. Using a dual-alternative decision structure,
    write a Python program that prompts the user to enter the time the two cars traveled
    (same for both cars) and the acceleration for each one of them, and then calculates
    and displays the distance between them as well as a message “Car A is first” or
    “Car B is first” depending on which car is leading the race. The required formula
    is
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►S is the distance the car traveled, in meters (m)
  prefs: []
  type: TYPE_NORMAL
- en: ►u[o] is the initial velocity (speed) of the car, in meters per second (m/sec)
  prefs: []
  type: TYPE_NORMAL
- en: ►t is the time the car traveled, in seconds (sec)
  prefs: []
  type: TYPE_NORMAL
- en: ►a is the acceleration, in meters per second² (m/sec²)
  prefs: []
  type: TYPE_NORMAL
- en: Assume that the user-provided acceleration values are different from each other.
    Also assume that the user enters valid values.
  prefs: []
  type: TYPE_NORMAL
