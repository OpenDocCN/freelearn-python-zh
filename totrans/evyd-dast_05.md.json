["```py\n    Queue<MyObject> aQueue = new Queue<MyObject>(); \n    aQueue.Enqueue(anObject); \n    aQueue.Dequeue(); \n\n```", "```py\n    ArrayDeque<MyObject> aQueue = new ArrayDeque<MyObject>(); \n    aQueue.addLast(anObject); \n    aQueue.getFirst(); \n\n```", "```py\n    NSMutableArray<MyObject *> *aStack = [NSMutableArray array]; \n    [aStack addObject:anObject]; \n    [aStack removeObjectAtIndex:0]; \n\n```", "```py\n    var aStack: Array [MyObject](); \n    aStack.append(anObject) \n    aStack.popLast() \n\n```", "```py\n    Queue<Customer> _custQueue; \n    int _cap; \n\n    public CustomerQueue(int capacity) \n    { \n        _custQueue = new Queue<Customer>(); \n        _cap = capacity; \n    } \n\n```", "```py\n    private bool CanCheckinCustomer() \n    { \n        return this._custQueue.Count < this._cap; \n    } \n\n```", "```py\n    public void CustomerCheckin(Customer c) \n    { \n        if (this.CanCheckinCustomer()) \n        { \n            this._custQueue.Enqueue(c); \n        } \n    } \n\n```", "```py\n    public Customer CustomerConsultation() \n    { \n        return this._custQueue.Peek(); \n    } \n\n```", "```py\n    public void CustomerCheckout() \n    { \n        this._custQueue.Dequeue(); \n    } \n\n```", "```py\n    public void ClearCustomers() \n    { \n        this._custQueue.Clear(); \n    } \n\n```", "```py\n    public void CustomerCancel(Customer c) \n    { \n        Queue<Customer> tempQueue = new Queue<Customer>(); \n        foreach (Customer cust in this._custQueue) \n        { \n            if (cust.Equals(c)) \n            { \n                continue; \n            } \n            tempQueue.Enqueue(c); \n        } \n        this._custQueue = tempQueue; \n    } \n\n```", "```py\n    public int CustomerPosition(Customer c) \n    { \n        if (this._custQueue.Contains(c)) \n        { \n            int i = 0; \n            foreach (Customer cust in this._custQueue) \n            {  \n                if (cust.Equals(c)) \n                { \n                    return i; \n                } \n                i++; \n            } \n        } \n        return -1;  \n    } \n\n```", "```py\n    public int CustomersInLine() \n    { \n        return this._custQueue.Count; \n    } \n\n    public bool IsLineEmpty() \n    { \n        return this._custQueue.Count == 0; \n    } \n\n    public bool IsLineFull() \n    { \n        return this._custQueue.Count == this.cap; \n    } \n\n```", "```py\n    ArrayQueue<Customer> _custQueue; \n    int _cap; \n\n    public CustomerQueue(int capacity) \n    { \n        _custQueue = new ArrayDeque<Customer>(); \n        _cap = capacity; \n    } \n\n```", "```py\n    private boolean canCheckinCustomer() \n    { \n        return this._custQueue.size() < this._cap; \n    }   \n\n```", "```py\n    public void customerCheckin(Customer c) \n    { \n        if (this.canCheckinCustomer()) \n        { \n            this._custQueue.addLast(c); \n        } \n    }  \n\n```", "```py\n    public Customer customerConsultation() \n    { \n        return this._custQueue.peek(); \n    } \n\n```", "```py\n    public void customerCheckout() \n    { \n        this._custQueue.removeFirst(); \n    } \n\n```", "```py\n    public void clearCustomers() \n    { \n        this._custQueue.clear(); \n    } \n\n```", "```py\n    public void customerCancel(Customer c) \n    { \n        this._custQueue.remove(c); \n    } \n\n```", "```py\n    public int customerPosition(Customer c) \n    { \n        if (this._custQueue.contains(c)) \n        { \n            int i = 0; \n            for (Customer cust : this._custQueue) \n            { \n                if (cust.equals(c)) \n                { \n                    return i; \n                } \n                i++; \n            } \n        } \n\n        return -1; \n    } \n\n```", "```py\n    public int customersInLine() \n    { \n        return this._custQueue.size(); \n    } \n\n    public boolean isLineEmpty() \n    { \n        return this._custQueue.size() == 0;  \n    } \n\n    public boolean isLineFull() \n    { \n        return this._custQueue.size() == this._cap; \n    } \n\n```", "```py\n    NSMutableArray *_custQueue; \n    int _cap; \n\n    -(instancetype)initWithCapacity:(int)capacity \n    { \n        if (self = [super init]) \n        { \n            _custQueue = [NSMutableArray array]; \n            _cap = capacity; \n        } \n        return self; \n    } \n\n```", "```py\n    -(BOOL)canCheckinCustomer \n    { \n        return [_custQueue count] < _cap; \n    } \n\n```", "```py\n    -(void)checkInCustomer:(EDSCustomer*)c \n    { \n        if ([self canCheckinCustomer]) \n        { \n            [_custQueue addObject:c]; \n        } \n    } \n\n```", "```py\n    -(EDSCustomer*)customerConsultation \n    { \n        return [_custQueue firstObject]; \n    } \n\n```", "```py\n    -(void)checkoutCustomer \n    { \n        [_custQueue removeObjectAtIndex:0]; \n    } \n\n```", "```py\n-(void)clearCustomers \n{ \n    [_custQueue removeAllObjects]; \n} \n\n```", "```py\n    -(void)cancelCustomer:(EDSCustomer*)c \n    { \n        NSUInteger index = [self positionOfCustomer:c]; \n        if (index != -1) \n        { \n            [_custQueue removeObjectAtIndex:index]; \n        } \n    } \n\n```", "```py\n    -(NSUInteger)positionOfCustomer:(EDSCustomer*)c \n    { \n        return [_custQueue indexOfObject:c]; \n    } \n\n```", "```py\n    -(NSUInteger)customersInLine \n    { \n        return [_custQueue count]; \n    } \n\n    -(BOOL)isLineEmpty \n    { \n        return [_custQueue count] == 0; \n    } \n\n    -(BOOL)isLineFull \n    { \n        return [_custQueue count] == _cap; \n    } \n\n```", "```py\n    var _custQueue: Array = [Customer]() \n    var _cap: Int; \n\n    public init(capacity: Int) \n    { \n        _cap = capacity; \n    } \n\n```", "```py\n    public func canCheckinCustomer() -> Bool \n    { \n        return _custQueue.count < _cap \n    } \n\n```", "```py\n    public func checkInCustomer(c: Customer) \n    { \n        if canCheckinCustomer() \n        { \n            _custQueue.append\n        } \n    } \n\n```", "```py\n    public func customerConsultation() -> Customer \n    { \n        return _custQueue.first! \n    } \n\n```", "```py\n    public func checkoutCustomer() \n    { \n        _custQueue.removeFirst() \n    } \n\n```", "```py\n    public func clearCustomers() \n    { \n        _custQueue.removeAll() \n    } \n\n```", "```py\n    public func cancelCustomer(c: Customer) \n    { \n        if let index = _custQueue.index(of: c) \n        { \n            _custQueue.removeAtIndex(at: index) \n        } \n    } \n\n```", "```py\n    public func positionOfCustomer(c: Customer) -> Int \n    { \n        return _custQueue.index(of:c)! \n    } \n\n```", "```py\n    public func customersInLine() -> Int \n    { \n        return _custQueue.count \n    } \n\n    public func isLineEmpty() -> Bool \n    { \n        return _custQueue.count == 0 \n    } \n\n    public func isLineFull() -> Bool \n    { \n        return _custQueue.count == _cap \n    } \n\n```"]