["```py\n$ curl \"https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip\" -o \"awscliv2.zip\"\n$ unzip awscliv2.zip\n$ sudo ./aws/install\n$ which aws\n/usr/local/bin/aws\n$ aws --version\naws-cli/2.7.34 Python/3.9.11 Linux/5.15.0-47-generic exe/x86_64.ubuntu.22 prompt/off \n```", "```py\n$ aws configure\nAWS Access Key ID [None]: <key>\nAWS Secret Access Key [None]: <secret> \nDefault region name [None]: us-east-1 \nDefault output format [None]: json \n```", "```py\n(venv) $ pip install boto3\n(venv) $ python\nPython 3.10.4 (main, Jun 29 2022, 12:14:53) [GCC 11.2.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import boto3\n>>> boto3.__version__\n'1.24.78'\n>>> exit() \n```", "```py\n$ aws ec2 describe-regions\n{\n    \"Regions\": [\n        {\n            \"Endpoint\": \"ec2.eu-north-1.amazonaws.com\",\n            \"RegionName\": \"eu-north-1\",\n            \"OptInStatus\": \"opt-in-not-required\"\n        },\n        {\n            \"Endpoint\": \"ec2.ap-south-1.amazonaws.com\",\n            \"RegionName\": \"ap-south-1\",\n            \"OptInStatus\": \"opt-in-not-required\"\n        },\n<skip> \n```", "```py\n$ aws ec2 describe-availability-zones --region us-east-1\n{\n    \"AvailabilityZones\": [\n        {\n            \"State\": \"available\",\n            \"Messages\": [],\n            \"RegionName\": \"us-east-1\",\n            \"ZoneName\": \"us-east-1a\",\n            \"ZoneId\": \"use1-az2\"\n        },\n        {\n            \"State\": \"available\",\n            \"Messages\": [],\n            \"RegionName\": \"us-east-1\",\n            \"ZoneName\": \"us-east-1b\",\n            \"ZoneId\": \"use1-az4\"\n        },\n<skip> \n```", "```py\n#!/usr/bin/env python3\nimport json, boto3\nregion = 'us-east-1'\nvpc_name = 'mastering_python_networking_demo'\nec2 = boto3.resource('ec2', region_name=region)\nclient = boto3.client('ec2')\nfilters = [{'Name':'tag:Name', 'Values':[vpc_name]}]\nvpcs = list(ec2.vpcs.filter(Filters=filters))\nfor vpc in vpcs:\n    response = client.describe_vpcs(\n                 VpcIds=[vpc.id,]\n                )\n    print(json.dumps(response, sort_keys=True, indent=4)) \n```", "```py\n(venv) $ python Chapter11_1_query_vpc.py\n{\n    \" ResponseMetadata \" : {\n        <skip>\n        \" HTTPStatusCode \" : 200,\n        \" RequestId \" : \" 9416b03f-<skip> \" ,\n        \" RetryAttempts \" : 0\n    },\n    \" Vpcs \" : [\n        {\n            \" CidrBlock \" : \" 10.0.0.0/16 \",\n            \" CidrBlockAssociationSet \" : [\n                {\n                    \" AssociationId \" : \" vpc-cidr-assoc-<skip> \",\n                    \"CidrBlock\": \"10.0.0.0/16\",\n                    \"CidrBlockState\": {\n                        \"State\": \"associated\"\n                    }\n                }\n            ],\n            \"DhcpOptionsId\": \"dopt-<skip>\",\n            \"InstanceTenancy\": \"default\",\n            \"IsDefault\": false,\n            \"OwnerId\": \"<skip>\",\n            \"State\": \"available\",\n            \"Tags\": [\n                {\n                    \"Key\": \"Name\",\n                    \"Value\": \"mastering_python_networking_demo\"\n                }\n            ],\n            \"VpcId\": \"vpc-<skip>\"\n        }\n    ]\n} \n```", "```py\n#!/usr/bin/env python3\nimport json, boto3\nregion = 'us-east-1'\nvpc_name = 'mastering_python_networking_demo'\nec2 = boto3.resource('ec2', region_name=region)\nclient = boto3.client('ec2')\nresponse = client.describe_route_tables()\nprint(json.dumps(response['RouteTables'][0], sort_keys=True, indent=4)) \n```", "```py\n(venv) $ python Chapter11_2_query_route_tables.py\n{\n    \" Associations \" : [\n        <skip>\n    ],\n    \" OwnerId \" : \" <skip> \",\n    \" PropagatingVgws \" : [],\n    \" RouteTableId \" : \" rtb-<skip> \",\n    \" Routes \" : [\n        {\n            \"DestinationCidrBlock\": \"10.0.0.0/16\",\n            \"GatewayId\": \"local\",\n            \"Origin\": \"CreateRouteTable\",\n            \"State\": \"active\"\n        },\n        {\n            \"DestinationCidrBlock\": \"0.0.0.0/0\",\n            \"GatewayId\": \"igw-041f287c\",\n            \"Origin\": \"CreateRoute\",\n            \"State\": \"active\"\n        }\n    ],\n    \"Tags\": [\n        {\n            \"Key\": \"Name\",\n            \"Value\": \"public_internet_gateway\"\n        }\n    ],\n    \"VpcId\": \"vpc-<skip>\"\n} \n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Create VPC in us-west-1\nResources:\n  myVPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: '10.1.0.0/16'\n      EnableDnsSupport: 'false'\n      EnableDnsHostnames: 'false'\n      Tags:\n        - Key: Name\n        - Value: 'mastering_python_networking_demo_2' \n```", "```py\n(venv) $ aws --region us-west-1 cloudformation create-stack --stack-name 'mpn-ch10-demo' --template-body file://Chapter11_3_cloud_formation.yml\n{\n\"StackId\": \"arn:aws:cloudformation:us-west-1:<skip>:stack/mpn-ch10- demo/<skip>\"\n} \n```", "```py\n(venv) $ aws --region us-west-1 cloudformation describe-stacks --stack-name mpn-ch10-demo\n{\n    \"Stacks\": [\n        {\n            \"StackId\": \"arn:aws:cloudformation:us-west-1:<skip>:stack/mpn-ch10-demo/bbf5abf0-8aba-11e8-911f-500cadc9fefe\",\n            \"StackName\": \"mpn-ch10-demo\",\n            \"Description\": \"Create VPC in us-west-1\",\n            \"CreationTime\": \"2018-07-18T18:45:25.690Z\",\n            \"LastUpdatedTime\": \"2018-07-18T19:09:59.779Z\",\n            \"RollbackConfiguration\": {},\n            \"StackStatus\": \"UPDATE_ROLLBACK_COMPLETE\",\n            \"DisableRollback\": false,\n            \"NotificationARNs\": [],\n            \"Tags\": [],\n            \"EnableTerminationProtection\": false,\n            \"DriftInformation\": {\n                \"StackDriftStatus\": \"NOT_CHECKED\"\n            }\n        }\n    ]\n} \n```", "```py\nAWSTemplateFormatVersion: '2010-09-09'\nDescription: Create subnet in us-west-1\nResources:\n  myVPC:\n    Type: AWS::EC2::VPC\n    Properties:\n      CidrBlock: '10.1.0.0/16'\n      EnableDnsSupport: 'false'\n      EnableDnsHostnames: 'false'\n      Tags:\n        - Key: Name\n          Value: 'mastering_python_networking_demo_2'\n  mySubnet:\n    Type: AWS::EC2::Subnet\n    Properties:\n      VpcId: !Ref myVPC\n      CidrBlock: '10.1.0.0/24'\n      AvailabilityZone: 'us-west-1a'\n      Tags:\n        - Key: Name\n          Value: 'mpn_demo_subnet_1' \n```", "```py\n(venv) $ aws --region us-west-1 cloudformation create-stack --stack-name mpn-ch10-demo-2 --template-body file://Chapter11_4_cloud_formation_full.yml\n{\n\"StackId\": \"arn:aws:cloudformation:us-west-1:<skip>:stack/mpn-ch10- demo-2/<skip>\"\n}\n$ aws --region us-west-1 cloudformation describe-stacks --stack-name mpn- ch10-demo-2\n{\n\"Stacks\": [\n{\n\"StackStatus\": \"CREATE_COMPLETE\",\n...\n\"StackName\": \"mpn-ch10-demo-2\", \"DisableRollback\": false\n}\n]\n} \n```", "```py\n#!/usr/bin/env python3\nimport boto3\nec2 = boto3.client('ec2')\nresponse = ec2.describe_vpcs()\nvpc_id = response.get('Vpcs', [{}])[0].get('VpcId', '')\n# Query for security group id\nresponse = ec2.create_security_group(GroupName='mpn_security_group',\n                                     Description='mpn_demo_sg',\n                                     VpcId=vpc_id)\nsecurity_group_id = response['GroupId']\ndata = ec2.authorize_security_group_ingress(\n    GroupId=security_group_id,\n    IpPermissions=[\n        {'IpProtocol': 'tcp',\n         'FromPort': 80,\n         'ToPort': 80,\n         'IpRanges': [{'CidrIp': '0.0.0.0/0'}]},\n        {'IpProtocol': 'tcp',\n         'FromPort': 22,\n         'ToPort': 22,\n         'IpRanges': [{'CidrIp': '0.0.0.0/0'}]}\n    ])\nprint('Ingress Successfully Set %s' % data)\n# Describe security group\n#response = ec2.describe_security_groups(GroupIds=[security_group_id])\nprint(security_group_id) \n```", "```py\n(venv) $ python Chapter11_5_security_group.py\nIngress Successfully Set {'ResponseMetadata': {'RequestId': '<skip>', 'HTTPStatusCode': 200, 'HTTPHeaders': {'server': 'AmazonEC2', 'content- type': 'text/xml;charset=UTF-8', 'date': 'Wed, 18 Jul 2018 20:51:55 GMT',\n'content-length': '259'}, 'RetryAttempts': 0}} sg-<skip> \n```"]