["```py\nMacBookPro-SLott:Secret Agent's Python slott$ python3\nPython 3.3.4 (v3.3.4:7ff62415e426, Feb  9 2014, 00:29:34)\n[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin\nType help, copyright, credits or license for more information.\n>>>\n```", "```py\n>>> exit\n```", "```py\n>>> help(3)\nHelp on int object:\nclass int(object)\n|  int(x=0) -> integer\n|  int(x, base=10) -> integer\n|\netc.\n```", "```py\n>>> 355/113\n3.1415929203539825\n>>> 355//113\n3\n>>> 355.0/113.0\n3.1415929203539825\n>>> 355.0//113.0\n3.0\n```", "```py\n>>> bin(0b0101 & 0b0110)\n'0b100'\n>>> bin(0b0101 ^ 0b0110)\n'0b11'\n>>> bin(0b0101 | 0b0110)\n'0b111'\n>>> bin(~0b0101)\n'-0b110'\n```", "```py\n>>> bin( 0b110 << 4 )\n'0b1100000'\n>>> bin( 0b1100000 >> 3 )\n'0b1100'\n```", "```py\n>>> 7 <= 11 < 17\nTrue\n>>> 7 <= ll and 11 < 17\nTrue\n```", "```py\n48813\n0xbead \n0b1011111010101101\n0o137255\n```", "```py\n>>> 2**256\n115792089237316195423570985008687907853269984665640564039457584007913129639936\n```", "```py\n>>> from fractions import Fraction\n```", "```py\n>>> length=4+Fraction(\"7/8\")\n>>> width=2+Fraction(\"1/4\")\n>>> length*width\nFraction(351, 32)\n```", "```py\n>>> divmod(351,32)\n(10, 31)\n```", "```py\n3.1415926\n6.22E12\n```", "```py\n>>> import platform\n>>> platform.python_build()\n('v3.3.4:7ff62415e426', 'Feb  9 2014 00:29:34')\n>>> platform.python_compiler()\n'GCC 4.2.1 (Apple Inc. build 5666) (dot 3)'\n```", "```py\n>>> from decimal import Decimal\n```", "```py\n>>> conversion=Decimal(\"247.616\")\n>>> conversion\nDecimal('247.616')\n```", "```py\n>>> lunch=Decimal(\"12900\")\n>>> lunch/conversion\nDecimal('52.09679503747738433703799431')\n```", "```py\n>>> penny=Decimal('.00')\n>>> (lunch/conversion).quantize(penny)\nDecimal('52.10')\nThat's much better. How much was the bribe we needed to pay?\n>>> bribe=50000\n>>> (bribe/conversion).quantize(penny)\nDecimal('201.93')\n```", "```py\n>>> cab=Decimal('23.50')\nThat gets us to the whole calculation: lunch plus bribe, converted, plus cab.\n>>> ((lunch+bribe)/conversion).quantize(penny)+cab\nDecimal('277.52')\n```", "```py\n>>> 2+3j\n(2+3j)\n```", "```py\n>>> bool(5)\nTrue\n>>> bool(0)\nFalse\n>>> bool('')\nFalse\n>>> bool(None)\nFalse\n>>> bool('word')\nTrue\n```", "```py\n>>> True and 0\n0\n>>> False and 0\nFalse\n```", "```py\n>>> length, width = 2+Fraction(1,4), 4+Fraction(7,8)\n>>> length\nFraction(9, 4)\n>>> width\nFraction(39, 8)\n>>> length >= width\nFalse\n```", "```py\n>>> length, width = width, length\n>>> length\nFraction(39, 8)\n>>> width\nFraction(9, 4)\n```", "```py\n>>> total= 0\n>>> total += (lunch/conversion).quantize(penny)\n>>> total += (bribe/conversion).quantize(penny)\n>>> total += cab\n>>> total\nDecimal('277.53')\n```", "```py\nPENNY= Decimal('.00')\n\ngrd_usd= Decimal('247.616')\nlunch_grd= Decimal('12900')\nbribe_grd= 50000\ncab_usd= Decimal('23.50')\n\nlunch_usd= (lunch_grd/grd_usd).quantize(PENNY)\nbribe_usd= (bribe_grd/grd_usd).quantize(PENNY)\n\nprint( \"Lunch\", lunch_grd, \"GRD\", lunch_usd, \"USD\" )\nprint( \"Bribe\", bribe_grd, \"GRD\", bribe_usd, \"USD\" )\nprint( \"Cab\", cab_usd, \"USD\" )\nprint( \"Total\", lunch_usd+bribe_usd+cab_usd, \"USD\" )\n```", "```py\ngrd_usd= Decimal('247.616') # Conversion from Mihalis Bank 5/15/14\n```", "```py\n        entry= input(\"GRD conversion: \")\n        grd_usd= Decimal(entry)\n```", "```py\n>>> entry= input(\"GRD conversion: \")\nGRD conversion: 123.%$6\n>>> grd_usd= Decimal(entry)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\ndecimal.InvalidOperation: [<class 'decimal.ConversionSyntax'>]\n```", "```py\n    entry= input(\"GRD conversion: \")\n    try:\n        grd_usd= Decimal(entry)\n    except decimal.InvalidOperation:\n        print(\"Invalid: \", entry)\n```", "```py\ngrd_usd= None\nwhile grd_usd is None:\n    entry= input(\"GRD conversion: \")\n    try:\n        grd_usd= Decimal(entry)\n    except decimal.InvalidOperation:\n        print(\"Invalid: \", entry)\nprint( grd_usd, \"GRD = 1 USD\" )\n```", "```py\n>>> \"short\"\n'short'\n>>> 'short'\n'short'\n>>> \"\"\"A multiple line,\n... very long string.\"\"\"\n'A multiple line,\\nvery long string.'\n>>> '''another multiple line\n... very long string.'''\n'another multiple line\\nvery long string.'\n```", "```py\n>>> \"\\u2328\"\n'⌨'\n```", "```py\n>>> \"\\N{KEYBOARD}\"\n'⌨'\n```", "```py\n>>> int( 'dead', 16 )\n57005\n>>> int( '0b1101111010101101', 2 )\n57005\n```", "```py\n >>> \"{0:12s} {1:6.2f} USD {2:8.0f} GRD\".format( \"lunch\", lunch_usd, lunch_grd )\n'lunch         52.10 USD    12900 GRD'\n```", "```py\nreceipt_1 = \"{0:12s}              {1:6.2f} USD\"\nreceipt_2 = \"{0:12s} {1:8.0f} GRD {2:6.2f} USD\"\nprint( receipt_2.format(\"Lunch\", lunch_grd, lunch_usd) )\nprint( receipt_2.format(\"Bribe\", bribe_grd, bribe_usd) )\nprint( receipt_1.format(\"Cab\", cab_usd) )\nprint( receipt_1.format(\"Total\", lunch_usd+bribe_usd+cab_usd) )\n```", "```py\nentry= input(\"GRD conversion: \").strip()\n```", "```py\n>>> \"   123.45     \".strip()\n'123.45'\n```", "```py\n>>> amount, space, currency = \"123.45 USD\".partition(\" \")\n>>> amount\n'123.45'\n>>> space\n' '\n>>> currency\n'USD'\n```", "```py\namount, space, currency = \"word\".partition(\" \") \n```", "```py\ndef get_decimal(prompt):\n    value= None\n    while value is None:\n        entry= input(prompt)\n        try:\n            value= Decimal(entry)\n        except decimal.InvalidOperation:\n            print(\"Invalid: \", entry)\n    return value\n```", "```py\ngrd_usd= get_decimal(\"GRD conversion: \")\n```", "```py\nimport sys\nprint(\"Error\", file=sys.stderr)\n```", "```py\ndef report( grd_usd, target=sys.stdout ):\n    lunch_grd= Decimal('12900')\n    bribe_grd= 50000\n    cab_usd= Decimal('23.50')\n\n    lunch_usd= (lunch_grd/grd_usd).quantize(PENNY)\n    bribe_usd= (bribe_grd/grd_usd).quantize(PENNY)\n\n    receipt_1 = \"{0:12s}              {1:6.2f} USD\"\n    receipt_2 = \"{0:12s} {1:8.0f} GRD {2:6.2f} USD\"\n    print( receipt_2.format(\"Lunch\", lunch_grd, lunch_usd), file=target )\n    print( receipt_2.format(\"Bribe\", bribe_grd, bribe_usd), file=target )\n    print( receipt_1.format(\"Cab\", cab_usd), file=target )\n    print( receipt_1.format(\"Total\", lunch_usd+bribe_usd+cab_usd), file=target )\n```", "```py\nrate= get_decimal(\"GRD conversion: \")\nprint(rate, \"GRD = 1 USD\")\nreport(rate)\n```", "```py\nrate= get_decimal(\"GRD conversion: \")\nprint(rate, \"GRD = 1 USD\", file=sys.stdout)\nreport(grd_usd=rate, target=sys.stdout)\n```", "```py\n    print( \"Message to HQ\", file=target )\n    print( \"Device Size 10 31/32\", file=target )\n```", "```py\ntext=\"\"\"Message to HQ\\n Device Size 10 31/32\\n\"\"\"\nwith open(\"message1.txt\", \"w\") as target:\n    target.write(text)\n```", "```py\nwith open(\"message1.txt\", \"r\") as source:\n    text= source.read()\nprint( text )\n```", "```py\nwith open(\"message1.txt\", \"r\") as source:\n    for line in source:\n        print(line)\n```", "```py\nwith open(\"message1.txt\", \"r\") as source:\n    for line in source:\n        junk1, keyword, size= line.rstrip().partition(\"Size\")\n        if keyword != '':\n            print( size )\n```", "```py\nMessage to Field Agent 006 1/2 \nProceed to Rendezvous FM16uu62\nAuthorization to Pay $250 USD\n```", "```py\namount= None\nlocation= None\nwith open(\"message2.txt\", \"r\") as source:\n    for line in source:\n        clean= line.lower().rstrip()\n        junk, pay, pay_data= clean.partition(\"pay\")\n        junk, meet, meet_data= clean.partition(\"rendezvous\")\n        if pay != '':\n            amount= pay_data\n        elif meet != '':\n            location= meet_data\n        else:\n            pass # ignore this line \nprint(\"Budget\", amount, \"Meet\", location)\n```", "```py\ncount= 0\ncorpus_file = \"/usr/share/dict/words\" \nwith open( corpus_file ) as corpus:\n    for line in corpus:\n        word= line.strip()\n        if len(word) == 10:\n            print(word)\n            count += 1\nprint( count )\n```", "```py\n#!/usr/bin/env python3\n```", "```py\nimport zipfile\nwith zipfile.ZipFile( \"demo.zip\", \"r\" ) as archive:\n    archive.printdir()\n```", "```py\nimport zipfile\nwith zipfile.ZipFile( \"demo.zip\", \"r\" ) as archive:\n    archive.printdir()\n    first = archive.infolist()[0]\n    with archive.open(first) as member:\n        text= member.read()\n        print( text )\n```", "```py\nRuntimeError: File <zipfile.ZipInfo object at 0x1007e78e8> is encrypted, password required for extraction\n```", "```py\nimport zipfile\nimport zlib\ncorpus_file = \"/usr/share/dict/words\"\n\nwith zipfile.ZipFile( \"demo.zip\", \"r\" ) as archive:\n    first = archive.infolist()[0]\n    print( \"Reading\", first.filename )\n    with open( corpus_file ) as corpus:\n        for line in corpus:\n            word= line.strip().encode(\"ASCII\")\n            try:\n                with archive.open(first, 'r', pwd=word) as member:\n                    text= member.read()\n                print( \"Password\", word )\n                print( text )\n                break\n            except (RuntimeError, zlib.error, zipfile.BadZipFile):\n                pass\n```"]