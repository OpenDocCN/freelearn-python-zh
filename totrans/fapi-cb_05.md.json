["```py\n$ pip install –r requirements.txt\n```", "```py\n$ pip install pytest pytest-asyncio httpx\n```", "```py\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/home\")\nasync def read_main():\n    return {\"message\": \"Hello World\"}\n```", "```py\n    protoapp/\n    |─ protoapp/\n    │  |─ main.py\n    |─ tests/\n    │  |─ test_main.py\n    pytest.ini contains instructions for pytest. You can write in it:\n\n    ```", "```py\n\n    This will add the project root and the folder `protoapp`, containing the code, to the `PYTHONPATH` when running `pytest`.\n    ```", "```py\n    import pytest\n    from httpx import ASGITransport, AsyncClient\n    from protoapp.main import app\n    @pytest.mark.asyncio\n    async def test_read_main():\n        client = AsyncClient(\n            transport=ASGITransport(app=app),\n            base_url=\"http://test\",\n        )\n        response = await client.get(\"/home\")\n        assert response.status_code == 200\n        assert response.json() == {\n            \"message\": \"Hello World\"\n        }\n    $ pytest –-collect-only\n    ```", "```py\n    configfile: pytest.ini\n    plugins: anyio-4.2.0, asyncio-0.23.5, cov-4.1.0\n    asyncio: mode=Mode.STRICT\n    collected 1 item\n    <Dir protoapp>\n      <Dir tests>\n    <Module test_main.py>\n    pytest.ini\n    ```", "```py\n    $ pytest\n    ```", "```py\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom protoapp.main import app\n@pytest.fixture(scope=\"function\")\ndef test_client(db_session_test):\n    client = TestClient(app)\n    yield client\n```", "```py\ndef test_read_main_client(test_client):\n    response = test_client.get(\"/home\")\n    assert response.status_code == 200\n    assert response.json() == {\"message\": \"Hello World\"}\n```", "```py\n$ pytest\n```", "```py\n$ pip install \"sqlalchemy>=2.0.0\"\n```", "```py\n    from sqlalchemy.orm import DeclarativeBase,\n    class Base(DeclarativeBase):\n        pass\n    ```", "```py\n    from sqlalchemy.orm import (\n        Mapped,\n        mapped_column,\n    )\n    class Item(Base):\n        __tablename__ = \"items\"\n        id: Mapped[int] = mapped_column(\n            primary_key=True, index=True\n        )\n        name: Mapped[str] = mapped_column(index=True)\n        color: Mapped[str]\n    ```", "```py\n    DATABASE_URL = \"sqlite:///./production.db\"\n    engine = create_engine(DATABASE_URL)\n    ```", "```py\n    Base.metadata.create_all(bind=engine)\n    ```", "```py\n    SessionLocal = sessionmaker(\n        autocommit=False, autoflush=False, bind=engine\n    )\n    ```", "```py\n    from protoapp.database import SessionLocal\n    def get_db_session():\n        db = SessionLocal()\n        try:\n            yield db\n        finally:\n            db.close()\n    ```", "```py\n    from pydantic import BaseModel\n    class ItemSchema(BaseModel):\n        name: str\n        color: str\n    ```", "```py\n    from fastapi import (\n        Depends,\n        Request,\n        HTTPException,\n        status\n    )\n    from sqlalchemy.orm import Session\n    @app.post(\n    \"/item\",\n    response_model=int,\n    status_code=status.HTTP_201_CREATED\n    )\n    def add_item(\n        item: ItemSchema,\n        db_session: Session = Depends(get_db_session),\n    ):\n        db_item = Item(name=item.name, color=item.color)\n        db_session.add(db_item)\n        db_session.commit()\n        db_session.refresh(db_item)\n        return db_item.id\n    ```", "```py\n    @app.get(\"/item/{item_id}\", response_model=ItemSchema)\n    def get_item(\n        item_id: int,\n        db_session: Session = Depends(get_db_session),\n    ):\n        item_db = (\n            db_session.query(Item)\n            .filter(Item.id == item_id)\n            .first()\n        )\n        if item_db is None:\n            raise HTTPException(\n                status_code=404, detail=\"Item not found\"\n            )\n        return item_db\n    ```", "```py\n    from sqlalchemy.pool import StaticPool\n    from sqlalchemy import create_engine\n    engine = create_engine(\n        \"sqlite:///:memory:\",\n        connect_args={\"check_same_thread\": False},\n        poolclass=StaticPool,\n    )\n    Base.metadata.create_all(bind=engine)  # Bind the engine\n    ```", "```py\n    from sqlalchemy.orm import sessionmaker\n    TestingSessionLocal = sessionmaker(\n        autocommit=False, autoflush=False, bind=engine\n    )\n    ```", "```py\n    @pytest.fixture\n    def test_db_session():\n        db = TestingSessionLocal()\n        try:\n            yield db\n        finally:\n            db.close()\n    ```", "```py\n    from protoapp.main import app, get_db_session\n    @pytest.fixture(scope=\"function\")\n    def test_client(test_db_session):\n        client = TestClient(app)\n        app.dependency_overrides[get_db_session] = (\n            lambda: test_db_session\n    )\n        return client\n    ```", "```py\n    def test_client_can_add_read_the_item_from_database(\n        test_client, test_db_session\n    ):\n        response = test_client.get(\"/item/1\")\n        assert response.status_code == 404\n        response = test_client.post(\n            \"/item\", json={\"name\": \"ball\", \"color\": \"red\"}\n        )\n        assert response.status_code == 201\n        # Verify the user was added to the database\n        item_id = response.json()\n        item = (\n            test_db_session.query(Item)\n            .filter(Item.id == item_id)\n            .first()\n        )\n        assert item is not None\n        response = test_client.get(f\"item/{item_id}\")\n        assert response.status_code == 200\n        assert response.json() == {\n            \"name\": \"ball\",\n            \"color\": \"red\",\n        }\n    ```", "```py\n$ pytest\n```", "```py\n$ pytest <test_module>.py::<test_name>\n```", "```py\n$ pytest tests/test_main.py::test_read_main\n```", "```py\n@pytest.mark.integration\ndef test_client_can_add_read_the_item_from_database(\n    test_client, test_db_session\n):\n    # test content\n```", "```py\n[pytest]\npythonpath = protoapp .\nmarkers =\n    integration: marks tests as integration\n```", "```py\n$ pytest –m integration -vv\n```", "```py\n$ pip install pytest-cov\n```", "```py\n$ pytest –-cov protoapp tests\n```", "```py\nName                   Stmts   Miss  Cover\n------------------------------------------\nprotoapp\\database.py      16      0   100%\nprotoapp\\main.py          37      4    89%\nprotoapp\\schemas.py        8      8     0%\n------------------------------------------\nTOTAL                     61     12    80%\n```", "```py\n$ coverage html\n```", "```py\n    import logging\n    client_logger = logging.getLogger(\"client.logger\")\n    logger.setLevel(logging.INFO)\n    ```", "```py\n    console_handler = logging.StreamHandler()\n    ```", "```py\n    from uvicorn.logging import ColourizedFormatter\n    console_formatter = ColourizedFormatter(\n        \"%(levelprefix)s CLIENT CALL - %(message)s\",\n        use_colors=True,\n    )\n    console_handler.setFormatter(console_formatter)\n    ```", "```py\n    client_logger.addHandler(console_handler)\n    ```", "```py\n    from logging.handlers import TimedRotatingFileHandler\n    file_handler = TimedRotatingFileHandler(\"app.log\")\n    file_formatter = logging.Formatter(\n        \"time %(asctime)s, %(levelname)s: %(message)s\",\n        datefmt=\"%Y-%m-%d %H:%M:%S\",\n    )\n    file_handler.setFormatter(file_formatter)\n    client_logger.addHandler(file_handler)\n    ```", "```py\n    from protoapp.logging import client_logger\n    # ... module content\n    @app.middleware(\"http\")\n    async def log_requests(request: Request, call_next):\n        client_logger.info(\n            f\"method: {request.method}, \"\n            f\"call: {request.url.path}, \"\n            f\"ip: {request.client.host}\"\n        )\n        response = await call_next(request)\n        return response\n    ```", "```py\n    $ uvicorn protoapp.main:app\n    ```", "```py\nimport uvicorn\nfrom protoapp.main import app\nif __name__ == \"__main__\":\n    uvicorn.run(app)\n```", "```py\n$ uvicorn protoapp.main:app\n```", "```py\n$ python run_server.py\n```", "```py\n(Pdb) help\n```", "```py\n$ python –m pdb run_server.py\n```", "```py\n$ python –m pdb -m pytest tests\n```", "```py\nimport uvicorn\nif __name__ == \"__main__\":\n    uvicorn.run(\"protoapp.main:app\", reload=True)\n```", "```py\n$ python run_server.py\n```", "```py\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Python Debugger FastAPI server\",\n            \"type\": \"debugpy\",\n            \"request\": \"launch\",\n            \"program\": \"run_server.py\",\n            \"console\": \"integratedTerminal\",\n        },\n}\n```", "```py\n{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Debug test\",\n            \"type\": \"python\",\n            \"request\": \"launch\",\n            \"console\": \"integratedTerminal\",\n            \"justMyCode\": false,\n            \"stopOnEntry\": true,\n            \"envFile\": \"${workspaceFolder}/.env.test\",\n            \"purpose\": [\"debug-test\"]\n        }\n    ]\n}\n```", "```py\n<component name=\"ProjectRunConfigurationManager\">\n  <configuration default=\"false\" name=\"run_server\"\n    type=\"PythonConfigurationType\" factoryName=\"Python\"\n    nameIsGenerated=\"true\">\n    <module name=\"protoapp\" />\n    <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n    <option name=\"PARENT_ENVS\" value=\"true\" />\n    <envs>\n      <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n    </envs>\n    <option name=\"WORKING_DIRECTORY\"\n      value=\"$PROJECT_DIR$\" />\n    <option name=\"IS_MODULE_SDK\" value=\"true\" />\n    <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n    <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n    <option name=\"SCRIPT_NAME\"\n      value=\"$PROJECT_DIR$/run_server.py\" />\n    <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n    <option name=\"MODULE_MODE\" value=\"false\" />\n    <option name=\"REDIRECT_INPUT\" value=\"false\" />\n    <option name=\"INPUT_FILE\" value=\"\" />\n    <method v=\"2\" />\n  </configuration>\n</component>\n```", "```py\n$ pip install locust\n```", "```py\nfrom locust import HttpUser, task\nclass ProtoappUser(HttpUser):\n    host = \"http://localhost:8000\"\n    @task\n    def hello_world(self):\n        self.client.get(\"/home\")\n```", "```py\n$ uvicorn protoapp.main:app\n```", "```py\n$ locust\n```", "```py\n$ locust --headless --users 10 --spawn-rate 1\n```"]