["```py\nfib_list = [1, 1, 3, 5, 8]\n```", "```py\nfib_list.append(fib_list[-2] + fib_list[-1])\n```", "```py\n>>> fib_list[2]\n3\n```", "```py\n>>> fib_list[2:5]\n[3, 5, 8]\n>>> fib_list[2:]\n[3, 5, 8, 13]\n>>> fib_list[:-1]\n[1, 1, 3, 5, 8]\n```", "```py\n>>> fib_list[::2]\n[1, 3, 8]\n>>> fib_list[1::2]\n[1, 5, 13]\n```", "```py\n>>> fib_list += [ fib_list[-2] + fib_list[-1] ]\n```", "```py\n>>> 13 in fib_list\nTrue\n>>> 12 not in fib_list\nTrue\n```", "```py\nfib_list[0]= 1\n```", "```py\nfib_list[2:5]= [3]\n```", "```py\n[1, 1, 3, 13]\n```", "```py\n>>> fib_list\n[1, 1, 3, 5, 8, 13]\n>>> fib_list.extend( [21, 34] )\n>>> fib_list\n[1, 1, 3, 5, 8, 13, 21, 34]\n>>> fib_list.insert(0, 0)\n>>> fib_list\n[0, 1, 1, 3, 5, 8, 13, 21, 34]\n>>> fib_list.remove(34)\n>>> fib_list\n[0, 1, 1, 3, 5, 8, 13, 21]\n>>> fib_list.pop()\n21\n>>> fib_list.pop(0)\n0\n```", "```py\n>>> fib_list.count(1)\n2\n>>> fib_list.index(5)\n3\n```", "```py\n((255, 73, 108), 'Radical Red')\n```", "```py\n>>> some_set = {7, 2, 3, 5}\n>>> sorted(some_set)\n[2, 3, 5, 7]\n>>> max(some_set)\n7\n>>> min(some_set)\n2\n>>> sum(some_set)\n17\n```", "```py\n>>> fib_set = {1, 1, 3, 5, 8}\n>>> fib_set\n{8, 1, 3, 5}\n```", "```py\n>>> words = set(\"How I wish\".split())\n{'How', 'I', 'wish'}\n>>> more = set(\"I could recollect pi\".split())\n{'recollect', 'pi', 'I', 'could'}\n```", "```py\n>>> words | more\n{'wish', 'could', 'pi', 'I', 'How', 'recollect'}\n>>> words & more\n{'I'}\n>>> words - more\n{'How', 'wish'}\n>>> words ^ more\n{'recollect', 'wish', 'pi', 'How', 'could'}\n```", "```py\nf_n = max(fib_set)\nf_n1 = max(fib_set-{f_n})\nfib_set.add(f_n+f_n1)\n```", "```py\nwords |= more\n```", "```py\n>>> 'I' in words\nTrue\n```", "```py\n>>> {'I'} < words\nTrue\n>>> {'How', 'I', 'wish'} <= words\nTrue\n```", "```py\nsieve = {2: True, 3: True, 4: False, 5: True, 6: None, 7: None}\n```", "```py\n>>> sieve = dict(\n... [(2, True), (3, True), (4, False), (5, True), (6, None), (7, None)]\n... )\n```", "```py\n>>> cadaeic= dict( poe=3, e=1, near=4, a=1, raven=5, midnights= 9 )\n>>> cadaeic\n{'raven': 5, 'e': 1, 'near': 4, 'midnights': 9, 'poe': 3, 'a': 1}\n```", "```py\n>>> sieve = dict.fromkeys( range(2,10) )\n>>> sieve\n{2: None, 3: None, 4: None, 5: None, 6: None, 7: None, 8: None, 9: None}\n```", "```py\n>>> cadaeic['poe']\n3\n>>> cadaeic['so']= 2\n>>> del cadaeic['so']\n```", "```py\n>>> cadaeic.update( {'so':2, 'dreary':6} )\n>>> cadaeic.update( [('tired',5), ('and',3)], weary=5 )\n>>> cadaeic\n{'a': 1, 'weary': 5, 'near': 4, 'dreary': 6, 'e': 1,\n'raven': 5, 'midnights': 9, 'and': 3, 'so': 2, 'poe': 3,\n'tired': 5}\n```", "```py\n>>> counter = {}\n>>> counter.setdefault('a',0)\n0\n>>> counter['a'] += 1\n>>> counter\n{'a': 1}\n```", "```py\n>>> counter['b'] = counter.setdefault('b',0) + 1\n```", "```py\n>>> from collections import Counter\n>>> text = \"\"\"Poe, E.\n... Near a Raven\n...\n... Midnights so dreary, tired and weary,\n... Silently pondering volumes extolling all by-now obsolete lore.\n... During my rather long nap - the weirdest tap!\n... An ominous vibrating sound disturbing my chamber's antedoor.\n... \"This\", I whispered quietly, \"I ignore\".\"\"\"\n>>> freq= Counter(text)\n>>> freq.most_common(5)\n[(' ', 35), ('e', 23), ('n', 18), ('r', 17), ('i', 17)]\n```", "```py\n>>> text = '''Poe, E.\n...      Near a Raven\n...\n... Midnights so dreary, tired and weary.'''\n>>> text = text.replace(\",\",\"\").replace(\".\",\"\").lower()\n```", "```py\n>>> cadaeic= {}\n>>> for word in text.split():\n...     cadaeic[word]= len(word)\n```", "```py\n{'raven': 5, 'midnights': 9, 'dreary': 6, 'e': 1,\n'weary': 5, 'near': 4, 'a': 1, 'poe': 3, 'and': 3,\n'so': 2, 'tired': 5}\n```", "```py\n>>> for word in sorted(cadaeic):\n...    print(word,  cadaeic[word])\n```", "```py\nfor scheme in 'http', 'https', 'ftp':\n    do_something(scheme)\n```", "```py\nfor n in range(1, 21):\n    status= str(n)\n    if n % 5 == 0: status += \" fizz\"\n    if n % 7 == 0: status += \" buzz\"\n    print(status)\n```", "```py\nfor n in range(len(some_list)):\n    print(n, some_list[n])\n```", "```py\nfor n, v in enumerate(some_list):\n     print(n, v)\n```", "```py\nquit_received= False\nwhile not quit_received:\n    command= input(\"prompt> \")\n    quit_received= process(command)\n```", "```py\nif command.lower().startswith(\"quit\"): return True\n```", "```py\n>>> n = 1\n>>> while n != 101 and not condition(n):\n...     n += 1\n>>> assert n == 101 or condition(n)\n```", "```py\nfor line in some_file:\n    clean = line.strip()\n    if len(clean) == 0:\n        continue\n    data, _, _ = clean.partition(\"#\")\n    data = data.rstrip()\n    if len(data) == 0:\n        continue\n    process(data)\n```", "```py\nfor n in range(1, 100):\n    factors = []\n    for x in range(1,n):\n        if n % x == 0: factors.append(x)\n    if sum(factors) == n:\n        break\n```", "```py\n>>> for item in 1,2,3:\n...     print(item)\n...     if item == 2:\n...         print(\"Found\",item)\n...         break\n... else:\n...     print(\"Found Nothing\")\n```", "```py\n1\n2\nFound 2\n```"]