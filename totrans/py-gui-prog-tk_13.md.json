["```py\n>>> from urllib.request import urlopen\n>>> response = urlopen('http://python.org') \n```", "```py\n>>> response.getheader('Content-Type')\n'text/html; charset=utf-8'\n>>> response.getheader('Server')\n'nginx' \n```", "```py\n>>> response.status\n200\n>>> response.reason\n'OK' \n```", "```py\n>>> html = response.read()\n>>> html[:15]\nb'<!doctype html>' \n```", "```py\n>>> html.decode('utf-8')[:15]\n'<!doctype html>' \n```", "```py\n>>> response = urlopen('http://duckduckgo.com', data=b'q=tkinter') \n```", "```py\n>>> from urllib.parse import urlencode\n>>> url = 'http://duckduckgo.com'\n>>> data = {'q': 'tkinter, python', 'ko': '-2', 'kz': '-1'}\n>>> u_data = urlencode(data)\n>>> u_data\n'q=tkinter%2C+python&ko=-2&kz=-1'\n>>> response = urlopen(url, data=u_data.encode()) \n```", "```py\n# models.py\nfrom urllib.request import urlopen \n```", "```py\nclass WeatherDataModel:\n  base_url = 'http://w1.weather.gov/xml/current_obs/{}.xml'\n  def __init__(self, station):\n    self.url = self.base_url.format(station) \n```", "```py\n# models.py, inside WeatherDataModel\n  def get_weather_data(self):\n    response = urlopen(self.url) \n```", "```py\n>>> url = 'http://w1.weather.gov/xml/current_obs/KBMG.xml'\n>>> response = urlopen(url)\n>>> print(response.read().decode())\n  <?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n  <?xml-stylesheet href=\"latest_ob.xsl\" type=\"text/xsl\"?>\n  <current_observation version=\"1.0\"\n  xmlns:xsd=http://www.w3.org/2001/XMLSchema\n  xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance\n  xsi:noNamespaceSchemaLocation=\n    \"http://www.weather.gov/view/current_observation.xsd\">\n  <credit>NOAA's National Weather Service</credit>\n  <credit_URL>http://weather.gov/</credit_URL>\n.... \n```", "```py\n<observation_time_rfc822>\n  Tue, 29 Jun 2021 15:53:00 -0400\n</observation_time_rfc822>\n<weather>Mostly Cloudy</weather>\n<temp_c>32.8</temp_c>\n<relative_humidity>54</relative_humidity>\n<pressure_mb>1020.0</pressure_mb> \n```", "```py\n# models.py\nfrom xml.etree import ElementTree \n```", "```py\n# models.py, inside WeatherDataModel.get_weather_data()\n  xmlroot = ElementTree.fromstring(response.read()) \n```", "```py\n<star_system starname=\"Sol\">\n  <planet>Mercury</planet>\n  <planet>Venus</planet>\n  <planet>Earth\n    <moon>Luna</moon>\n  </planet>\n  <planet>Mars\n    <moon>Phobos</moon>\n    <moon>Deimos</moon>\n  </planet>\n  <dwarf_planet>Ceres</dwarf_planet>\n</star_system> \n```", "```py\n weatherdata = {\n    'observation_time_rfc822': None,\n    'temp_c': None,\n    'relative_humidity': None,\n    'pressure_mb': None,\n    'weather': None\n  } \n```", "```py\n for tag in weatherdata:\n    element = xmlroot.find(tag)\n    if element is not None:\n      weatherdata[tag] = element.text\n  return weatherdata \n```", "```py\n>>> from abq_data_entry.models import WeatherDataModel\n>>> wdm = WeatherDataModel('KBMG')\n>>> wdm.get_weather_data()\n{'observation_time_rfc822': 'Mon, 09 Aug 2021 15:53:00 -0400',\n'temp_c': '26.1', 'relative_humidity': '74',\n'pressure_mb': '1013.7', 'weather': 'Fair'} \n```", "```py\n**# create_db.sql**\nCREATE TABLE local_weather (\n  datetime TIMESTAMP(0) WITH TIME ZONE PRIMARY KEY,\n  temperature NUMERIC(5,2),\n  rel_hum NUMERIC(5, 2),\n  pressure NUMERIC(7,2),\n  conditions VARCHAR(32)\n); \n```", "```py\n# models.py, inside SQLModel\n  def add_weather_data(self, data):\n    query = (\n      'INSERT INTO local_weather VALUES '\n      '(%(observation_time_rfc822)s, %(temp_c)s, '\n      '%(relative_humidity)s, %(pressure_mb)s, '\n      '%(weather)s)'\n    ) \n```", "```py\n try:\n      self.query(query, data)\n    except pg.IntegrityError:\n      # already have weather for this datetime\n      pass \n```", "```py\n# models.py, inside SettingsModel\n  fields = {\n    # ...\n    **'weather_station'****: {****'type'****:** **'str'****,** **'value'****:** **'KBMG'****}**,\n  } \n```", "```py\n# application.py, inside Application\n  def _update_weather_data(self, *_):\n    weather_data_model = m.WeatherDataModel(\n      self.settings['weather_station'].get()\n    )\n    try:\n      weather_data = weather_data_model.get_weather_data() \n```", "```py\n except Exception as e:\n      messagebox.showerror(\n        title='Error',\n        message='Problem retrieving weather data',\n        detail=str(e)\n      )\n      self.status.set('Problem retrieving weather data') \n```", "```py\n else:\n      self.data_model.add_weather_data(weather_data)\n      time = weather_data['observation_time_rfc822']\n      self.status.set(f\"Weather data recorded for {time}\") \n```", "```py\n# application.py, in Application.__init__()\n    event_callbacks = {\n      #...\n      **'<<UpdateWeatherData>>'****: self._update_weather_data**\n    } \n```", "```py\n# mainmenu.py, inside GenericMainMenu\n  def _add_weather_download(self, menu):\n    menu.add_command(\n      label=\"Update Weather Data\",\n      command=self._event('<<UpdateWeatherData>>')\n    ) \n```", "```py\n# mainmenu.py, inside GenericMainMenu.__init__()\n    # Put between the File and Options menus\n    self._menus['Tools'] = tk.Menu(self, tearoff=False)\n    self._add_weather_download(self._menus['Tools']) \n```", "```py\nSELECT * FROM local_weather; \n```", "```py\n>>> import requests\n>>> response = requests.request('GET', 'http://www.alandmoore.com') \n```", "```py\n>>> response = requests.get('http://www.alandmoore.com') \n```", "```py\n>>> data = {'q': 'tkinter', 'ko': '-2', 'kz': '-1'}\n>>> url = 'https://duckduckgo.com'\n>>> response = requests.post(url, data) \n```", "```py\n>>> s = requests.session() \n```", "```py\n# Assume this is a valid authentication service that returns an auth token\n>>> s.post('http://example.com/login', data={'u': 'test', 'p': 'test'})\n# Now we would have an auth token stored in s\n>>> response = s.get('http://example.com/protected_content')\n# Our token cookie would be listed here\n>>> print(s.cookies.items()) \n```", "```py\n>>> s.headers['User-Agent'] = 'Mozilla'\n>>> s.params['uid'] = 12345\n# will be sent with a user-agent string of \"Mozilla\"\n# and a parameter of \"uid=12345\"\n>>> s.get('http://example.com') \n```", "```py\n>>> r = requests.get('http://python.org')\n>>> r.headers\n{'Connection': 'keep-alive', 'Content-Length': '49812',\n'Server': 'nginx', 'Content-Type': 'text/html; charset=utf-8',\n # ... etc \n```", "```py\n>>> r = requests.get('http://www.example.com/does-not-exist')\n>>> r.status_code\n404\n>>> r.raise_for_status()\nTraceback (most recent call last):\nFile \"<stdin>\", line 1, in <module>\nFile \"/usr/lib/python3.9/site-packages/requests/models.py\", line 935, in\nraise_for_status\nraise HTTPError(http_error_msg, response=self)\nrequests.exceptions.HTTPError: 404 Client Error: Not Found for url:\nhttp://www.example.com/does-not-exist \n```", "```py\n# models.py\nimport requests \n```", "```py\n# models.py\nclass CorporateRestModel:\n  def __init__(self, base_url):\n    self.auth_url = f'{base_url}/auth'\n    self.files_url = f'{base_url}/files'\n    self.session = requests.session() \n```", "```py\n# models.py, inside SettingsModel\n  fields = {\n    #...\n    'abq_rest_url': {\n      'type': 'str',\n      'value': 'http://localhost:8000'\n    }\n  } \n```", "```py\n# models.py, inside CorporateRestModel\n  def authenticate(self, username, password):\n    response = self.session.post(\n      self.auth_url,\n      data={'username': username, 'password': password}\n    ) \n```", "```py\n @staticmethod\n  def _raise_for_status(response):\n    try:\n      response.raise_for_status()\n    except requests.HTTPError:\n      raise Exception(response.json().get('message')) \n```", "```py\n# models.py, inside CorporateRestModel.authenticate()\n    self._raise_for_status(response) \n```", "```py\n def upload_file(self, filepath):\n    with open(filepath, 'rb') as fh:\n      files = {'file': fh}\n      response = self.session.put(\n        self.files_url, files=files\n      )\n    self._raise_for_status(response) \n```", "```py\n def check_file(self, filename):\n    url = f\"{self.files_url}/{filename}\"\n    response = self.session.head(url)\n    if response.status_code == 200:\n      return True\n    elif response.status_code == 404:\n      return False\n    self._raise_for_status(response) \n```", "```py\n def get_file(self, filename):\n    \"\"\"Download a file from the server\"\"\"\n    url = f\"{self.files_url}/{filename}\"\n    response = self.session.get(url)\n    self._raise_for_status(response)\n    return response.text \n```", "```py\n# application.py, inside Application\n  def _create_csv_extract(self):\n    csvmodel = m.CSVModel()\n    records = self.model.get_all_records()\n    if not records:\n      raise Exception('No records were found to build a CSV file.')\n    for record in records:\n      csvmodel.save_record(record)\n    return csvmodel.file \n```", "```py\n# application.py, inside Application\n  def _upload_to_corporate_rest(self, *_):\n    try:\n      csvfile = self._create_csv_extract()\n    except Exception as e:\n      messagebox.showwarning(\n        title='Error', message=str(e)\n      )\n      return \n```", "```py\n d = v.LoginDialog(\n      self, 'Login to ABQ Corporate REST API'\n    )\n    if d.result is not None:\n      username, password = d.result\n    else:\n      return \n```", "```py\n rest_model = m.CorporateRestModel(\n      self.settings['abq_rest_url'].get()\n    )\n    try:\n      rest_model.authenticate(username, password)\n    except Exception as e:\n      messagebox.showerror('Error authenticating', str(e))\n      return \n```", "```py\n try:\n      exists = rest_model.check_file(csvfile.name)\n    except Exception as e:\n      messagebox.showerror('Error checking for file', str(e))\n      return \n```", "```py\n if exists:\n      overwrite = messagebox.askyesno(\n        'File exists',\n        f'The file {csvfile.name} already exists on the server, '\n        'do you want to overwrite it?'\n      )\n      if not overwrite:\n        download = messagebox.askyesno(\n          'Download file',\n          'Do you want to download the file to inspect it?'\n        ) \n```", "```py\n if download:\n          filename = filedialog.asksaveasfilename()\n          if not filename:\n            return\n          try:\n            data = rest_model.get_file(csvfile.name)\n          except Exception as e:\n            messagebox.showerror('Error downloading', str(e))\n            return\n          with open(filename, 'w', encoding='utf-8') as fh:\n            fh.write(data)\n          messagebox.showinfo(\n            'Download Complete', 'Download Complete.'\n            )\n        return \n```", "```py\n try:\n      rest_model.upload_file(csvfile)\n    except Exception as e:\n      messagebox.showerror('Error uploading', str(e))\n    else:\n      messagebox.showinfo(\n        'Success',\n        f'{csvfile} successfully uploaded to REST API.'\n      ) \n```", "```py\n# application.py, inside Application.__init__()\n    event_callbacks = {\n      #...\n      '<<UploadToCorporateREST>>': self._upload_to_corporate_rest,\n    } \n```", "```py\n# mainmenu.py, inside GenericMainMenu\n  def _add_rest_upload(self, menu):\n    menu.add_command(\n      label=\"Upload CSV to corporate REST\",\n      command=self._event('<<UploadToCorporateREST>>')\n    ) \n```", "```py\n# mainmenu.py, in each menu class initializer\n    # after creation of Tools menu\n    self._add_rest_upload(self._menus['Tools']) \n```", "```py\n127.0.0.1 - - [07/Sep/2021 17:10:27] \"POST /auth HTTP/1.1\" 200 –\n127.0.0.1 - - [07/Sep/2021 17:10:27]\n  \"HEAD /files/abq_data_record_2021-09-07.csv HTTP/1.1\" 200 –\nUploaded abq_data_record_2021-09-07.csv\n127.0.0.1 - - [07/Sep/2021 17:10:34] \"PUT /files HTTP/1.1\" 200 - \n```", "```py\n$ pip install --user paramiko \n```", "```py\n>>> import paramiko\n>>> ssh_client = paramiko.SSHClient() \n```", "```py\nThe authenticity of host 'myserver (::1)' can't be established.\nED25519 key fingerprint is\n  SHA256:fwefogdhFa2Bh6wnbXSGY8WG6nl7SzOw3fxmI8Ii2oVs.\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])? \n```", "```py\n>>> ssh_client.load_system_host_keys() \n```", "```py\n>>> ssh.load_host_keys('/home/alanm/.ssh/known_hosts2') \n```", "```py\n>>> ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy()) \n```", "```py\n>>> ssh_client.connect('localhost', username='test', password='test') \n```", "```py\n>>> transport = ssh_client.get_transport() \n```", "```py\n# See if the connection is still active\n>>>  transport.is_active()\nTrue\n# See our remote username\n>>> transport.get_username()\n'alanm'\n# See if we're authenticated\n>>> transport.is_authenticated()\nTrue\n# Get the name or IP of the connected server\n>>> transport.getpeername()\n('::1', 22, 0, 0)\n# Get the compression used by the server\n>>> transport.remote_compression\n'none' \n```", "```py\n>>> sftp_client = ssh_client.open_sftp() \n```", "```py\n>>> sftp_client.chdir('Fruit')\n>>> sftp_client.mkdir('Bananas')\n>>> sftp_client.put('/home/alanm/bananas/cavendish.ban', 'Bananas/cavendish.ban') \n```", "```py\n# models.py\nimport paramiko \n```", "```py\n# models.py\nclass SFTPModel:\n  def __init__(self, host, port=22):\n    self.host = host\n    self.port = port \n```", "```py\n self._client = paramiko.SSHClient()\n    self._client.set_missing_host_key_policy(\n      paramiko.AutoAddPolicy()\n    )\n    self._client.load_system_host_keys() \n```", "```py\n# models.py, inside SFTPModel\n  def authenticate(self, username, password):\n    try:\n      self._client.connect(\n        self.host, username=username,\n        password=password, port=self.port\n      )\n    except paramiko.AuthenticationException:\n      raise Exception(\n        'The username and password were not accepted by the server.'\n      ) \n```", "```py\n def _check_auth(self):\n    transport = self._client.get_transport()\n    if not transport.is_active() and transport.is_authenticated():\n      raise Exception('Not connected to a server.') \n```", "```py\n def get_file(self, remote_path, local_path):\n    self._check_auth()\n    sftp = self._client.open_sftp()\n    sftp.get(remote_path, local_path) \n```", "```py\n def upload_file(self, local_path, remote_path):\n    self._check_auth()\n    sftp = self._client.open_sftp() \n```", "```py\n remote_path = Path(remote_path)\n    for directory in remote_path.parent.parts:\n      if directory not in sftp.listdir():\n        sftp.mkdir(directory)\n      sftp.chdir(directory) \n```", "```py\n sftp.put(local_path, remote_path.name) \n```", "```py\n def check_file(self, remote_path):\n    self._check_auth()\n    sftp = self._client.open_sftp()\n    try:\n      sftp.stat(remote_path)\n    except FileNotFoundError:\n      return False\n    return True \n```", "```py\n# models.py, inside SettingsModel\n  fields = {\n    # ...\n    'abq_sftp_host': {'type': 'str', 'value': 'localhost'},\n    'abq_sftp_port': {'type': 'int', 'value': 22},\n    'abq_sftp_path': {'type': 'str', 'value': 'ABQ/BLTN_IN'}\n  } \n```", "```py\ntry:\n      csvfile = self._create_csv_extract()\n    except Exception as e:\n      messagebox.showwarning(\n        title='Error', message=str(e)\n      )\n      return \n```", "```py\n d = v.LoginDialog(self, 'Login to ABQ Corporate SFTP')\n    if d.result is None:\n      return\n    username, password = d.result\n    host = self.settings['abq_sftp_host'].get()\n    port = self.settings['abq_sftp_port'].get()\n    sftp_model = m.SFTPModel(host, port)\n    try:\n      sftp_model.authenticate(username, password)\n    except Exception as e:\n      messagebox.showerror('Error Authenticating', str(e))\n      return \n```", "```py\n destination_dir = self.settings['abq_sftp_path'].get()\n    destination_path = f'{destination_dir}/{csvfile.name}'\n    try:\n      exists = sftp_model.check_file(destination_path)\n    except Exception as e:\n      messagebox.showerror(\n        f'Error checking file {destination_path}',\n        str(e)\n      )\n      return \n```", "```py\n if exists:\n      overwrite = messagebox.askyesno(\n        'File exists',\n        f'The file {destination_path} already exists on the server,'\n        ' do you want to overwrite it?'\n      )\n      if not overwrite:\n        download = messagebox.askyesno(\n          'Download file',\n          'Do you want to download the file to inspect it?'\n        )\n        if download:\n          filename = filedialog.asksaveasfilename()\n          try:\n            sftp_model.get_file(destination_path, filename)\n          except Exception as e:\n            messagebox.showerror('Error downloading', str(e))\n            return\n          messagebox.showinfo(\n            'Download Complete', 'Download Complete.'\n            )\n        return \n```", "```py\n try:\n      sftp_model.upload_file(csvfile, destination_path)\n    except Exception as e:\n      messagebox.showerror('Error uploading', str(e))\n    else:\n      messagebox.showinfo(\n        'Success',\n        f'{csvfile} successfully uploaded to SFTP server.'\n      ) \n```", "```py\n# application.py, inside Application.__init__()\n    event_callbacks = {\n      #...\n      '<<UploadToCorporateSFTP>>': self._upload_to_corporate_sftp,\n     } \n```", "```py\n# mainmenu.py, inside GenericMainMenu\n  def _add_sftp_upload(self, menu):\n    menu.add_command(\n      label=\"Upload CSV to corporate SFTP\",\n      command=self._event('<<UploadToCorporateSFTP>>'),\n    ) \n```", "```py\n# mainmenu.py, inside each class's _build_menu() method\n    self._add_sftp_upload(self._menus['Tools']) \n```"]