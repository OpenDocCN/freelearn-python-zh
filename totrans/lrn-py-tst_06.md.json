["```py\npython3 -m pip install --user nose\n```", "```py\npython3 -m ensurepip --user\n```", "```py\npython3 -m nose --with-doctest --doctest-extension=txt -v\n```", "```py\n>>> import time\n>>> real_time = time.time\n>>> time.time = (float(x) for x in range(1, 1000)).__next__\n>>> import pid\n>>> controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 0,\n...                      initial = 12)\n>>> controller.gains\n(0.5, 0.5, 0.5)\n>>> controller.setpoint\n[0.0]\n>>> controller.previous_time\n1.0\n```", "```py\n>>> from unittest.mock import Mock, patch\n>>> import pid\n>>> with patch('pid.time', Mock(side_effect = [1.0, 2.0, 3.0])):\n...    controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 0,\n...                         initial = 12)\n>>> controller.gains\n(0.5, 0.5, 0.5)\n>>> controller.setpoint\n[0.0]\n>>> controller.previous_time\n1.0\n```", "```py\npython3 -m nose --with-doctest --doctest-extension=txt -v\n```", "```py\npython3 -m nose\n```", "```py\nnosetests\n```", "```py\n[nosetests]\nwith-doctest=1\ndoctest-extension=txtIf you're a Windows user, you might not be sure what the phrase \"home directory\" is supposed to denote in this context. As far as Python is concerned, your home directory is defined by your environment variables. If HOME is defined, that's your home directory. Otherwise, if USERPROFILE is defined (it usually is, pointing at C:\\Documents and Settings\\USERNAME) then that is considered to be your home directory. Otherwise, the directory described by HOMEDRIVE and HOMEPATH (often C:\\)is your home directory.\n```", "```py\npython3 -m nose --include=\"(?:^[Dd]oc)\"\n```", "```py\nThe graph module contains two classes: Node and Arc. An Arc is a connection between two Nodes. Each Node is an intersection of an arbitrary number of Arcs.\n\nArc objects contain references to the Node objects that the Arc connects, a textual identification label, and a \"cost\" or \"weight\", which is a real number.\n\nNode objects contain references to all of the connected Arcs, and a textual identification label.\n\nNode objects have a find_cycle(self, length) method which returns a list of Arcs making up the lowest cost complete path from the Node back to itself, if such a path exists with a length greater than 2 Arcs and less than or equal to the length parameter.\n\nNode and Arc objects have a __repr__(self) method which returns a representation involving the identification labels assigned to the objects.\n```", "```py\n    from unittest import TestCase\n    from unittest.mock import patch, Mock\n    from datetime import date\n\n    fake_date = Mock()\n    fake_date.today = Mock(return_value = date(year = 2014,\n                                               month = 6,\n                                               day = 12))\n\n    patch_date = patch('module_fixture_tests.date', fake_date)\n\n    def setup():\n        patch_date.start()\n\n    def teardown():\n        patch_date.stop()\n\n    class first_tests(TestCase):\n        def test_year(self):\n            self.assertEqual(date.today().year, 2014)\n\n        def test_month(self):\n            self.assertEqual(date.today().month, 6)\n\n        def test_day(self):\n            self.assertEqual(date.today().day, 12)\n\n    class second_tests(TestCase):\n        def test_isoformat(self):\n            self.assertEqual(date.today().isoformat(), '2014-06-12')\n    ```", "```py\n    patch_date = patch('module_fixture_tests.date', fake_date)\n    ```", "```py\n    patch_date = patch('tests.module_fixture_tests.date', fake_date)\n    ```", "```py\n    from os import unlink\n\n    def setup():\n        with open('test.tmp', 'w') as f:\n            f.write('This is a test file.')\n\n    def teardown():\n        unlink('test.tmp')\n    ```", "```py\n    from unittest import TestCase\n    from glob import glob\n\n    class check_file_exists(TestCase):\n        def test_glob(self):\n            self.assertIn('test.tmp', glob('*.tmp'))\n    ```", "```py\nimport sys\nfrom sqlite3 import connect\nfrom imp import reload\n\nclass grouped_tests:\n    def setup(self):\n        self.connection = connect(':memory:')\n        cursor = self.connection.cursor()\n        cursor.execute('create table test (a, b, c)')\n        cursor.execute('''insert into test (a, b, c)\n                          values (1, 2, 3)''')\n        self.connection.commit()\n\n    def teardown(self):\n        self.connection.close()\n\n    def test_update(self):\n        cursor = self.connection.cursor()\n        cursor.execute('update test set b = 7 where a = 1')\n\n    def test_select(self):\n        cursor = self.connection.cursor()\n        cursor.execute('select * from test limit 1')\n        assert cursor.fetchone() == (1, 2, 3)\n\ndef platform_setup():\n    sys.platform = 'test platform'\n\ndef platform_teardown():\n    global sys\n    sys = reload(sys)\n\ndef standalone_test():\n    assert sys.platform == 'test platform'\n\nstandalone_test.setup = platform_setup\nstandalone_test.teardown = platform_teardown\n```"]