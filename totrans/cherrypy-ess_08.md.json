["```py\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"GET\", \"/\", true);\nvar d = sendXMLHttpRequest(xmlHttpReq);\nd.addCallback(function (data)\n{\nalert(\"Success!\");\n});\nd.addErrback(function (data)\n{\nalert(\"An error occurred\");\n};\n\n```", "```py\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"GET\", \"/\", true);\nxmlHttpReq.setRequestHeader('Accept', 'application/atom+xml');\nxmlHttpReq.setRequestHeader('Accept-Language', 'fr');\nvar d = sendXMLHttpRequest(xmlHttpReq);\nd.addCallback(function (data)\n{\nalert(\"Success!\");\n});\nd.addErrback(function (data)\n{\nalert(\"An error occured\");\n});\n\n```", "```py\nvar qs = queryString(data);\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"POST\", \"/album\", true);\nxmlHttpReq.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\nvar d = sendXMLHttpRequest(xmlHttpReq, qs);\nd.addCallback(function (data)\n{\n// do something\n});\nd.addErrback(function (data)\n{\n// do something else\n});\n\n```", "```py\nvar entry = '<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<entry>\n<title>This is my family album</title>\n<id>urn:uuid:25cd2014-2ab3-11db-902d-000ae4ea7d46</id>\n<updated>2006-08-13T11:18:01Z</updated>\n<content type=\"text\">Some content</content>\n</entry>';\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"POST\", \"/album\", true);\nxmlHttpReq.setRequestHeader('Content-Type', 'application/atom+xml');\nvar d = sendXMLHttpRequest(xmlHttpReq, entry);\nd.addCallback(function (data)\n{\n// do something\n});\nd.addErrback(function (data)\n{\n// do something else\n});\n\n```", "```py\n<html>\n<head>\n<script type=\"application/javascript\" src=\"img/MochiKit.js\">\n</script>\n<script type=\"application/javascript\" src=\"img/New.js\">\n</script>\n<script type=\"application/javascript\">\ndoLogin = function()\n{\n// create the XMLHttpRequest object\nvar xmlHttpReq = getXMLHttpRequest();\n// initialize the object\n// the \"/hello/\" + username URI is protected by a password\n// the magic happens here as we pass dynamically the values\n// of the username and password entered by the user\nxmlHttpReq.open(\"GET\", \"/hello/\" + $(\"username\").value, true,\n$(\"username\").value, $(\"password\").value);\n// start the request\nvar d = sendXMLHttpRequest(xmlHttpReq);\n// let's remove any previous displayed message from the DOM\nreplaceChildNodes($(\"message\"));\n// insert a welcome message if the authentication succeeded\nd.addCallback(function (data)\n{\nappendChildNodes($(\"message\"), SPAN({},\ndata.responseText));\n});\n// insert a message if the authentication failed\nd.addErrback(function (data)\n{\nappendChildNodes($(\"message\"), SPAN({}, \"You're not\nwelcome here.\"));\n});\n};\n</script>\n<style type=\"text/css\">\nBody\n{\ntext-align: center;\nfont-family: sans-serif;\n}\n#loginBox\n{\n“XMLHttpRequestauthenticating, digest scheme used\"position:relative;\nmargin: 0px auto;\ntext-align:left;\nwidth: 250px;\ncolor: #2F2F2F;\npadding-top: 25px;\n}\nFieldset\n{\nbackground-color: #E9F3FF;\n}\ninput, label\n{\ndisplay: block;\nfloat: left;\nmargin-bottom: 2px;\n}\nLabel\n{\ntext-align: left;\nwidth: 70px;\npadding-right: 10px;\n}\nInput\n{\nborder: 1px #000 solid;\n}\n#loginButton\n{\ncursor: pointer;\nfont-weight: bold;\ntext-decoration: none;\ncolor: #2F2F2F;\n}\n#loginButton:hover\n{\ntext-decoration: underline;\n}\n“XMLHttpRequestauthenticating, digest scheme used\"</style>\n</head>\n“XMLHttpRequestauthenticating, basic scheme used\"<body>\n<div id=\"loginBox\">\n<form name=\"login\" id=\"login\">\n<fieldset>\n<label>Username:</label>\n<input type=\"text\" name=\"username\" id=\"username\" />\n<br /><br />\n<label>Password:</label>\n<input type=\"password\" name=\"password\" id=\"password\" />\n<br /><br />\n<span onclick=\"doLogin();\" id=\"loginButton\">Connect</span>\n</fieldset>\n</form>\n</div>\n<div id=\"message\" />\n</body>\n</html>\n\n```", "```py\nimport os.path\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn file('ajaxdigest.html').read()\nclass Hello:\n@cherrypy.expose\ndef default(self, username):\nreturn \"Hello %s\" % username\nif __name__ == '__main__':\nr = Root()\nr.hello = Hello()\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\ndef get_credentials():\nreturn {'test': 'test'}\nconf = {'/hello': {'tools.digest_auth.on': True,\n'tools.digest_auth.realm': 'localhost',\n'tools.digest_auth.users': get_credentials},\n'/MochiKit': {'tools.staticdir.on': True, 'tools.staticdir.dir':\nos.path.join(current_dir, 'MochiKit')}}\ncherrypy.quickstart(r, config=conf)\n\n```", "```py\n{'description': 'This is a simple demo album for you to test',\n'author': 'Sylvain'}\n\n```", "```py\nvar data = evalJSONRequest(incoming);\n\n```", "```py\ndata['description'];\n\n```", "```py\nimport cherrypy\nimport simplejson\ndef dejsonify(encoding='utf-8'):\nif cherrypy.request.method in ['POST', 'PUT']:\nif 'content-type' in cherrypy.request.headers:\nif cherrypy.request.headers['content-type'] ==\n'application/json':\nbody_as_dict = simplejson.loads(\ncherrypy.request.body.read())\nfor key in body_as_dict:\ncherrypy.request.params[key.encode(encoding)] =\nbody_as_dict[key]\ndef jsonify():\nif isinstance(cherrypy.response.body, dict):\ncherrypy.response.headers['Content-Type'] = 'application/json'\ncherrypy.response.body = simplejson.dumps(\ncherrypy.response.body)\ncherrypy.tools.dejsonifier = cherrypy.Tool('before_handler',\ndejsonify)\ncherrypy.tools.jsonifier = cherrypy.Tool('before_finalize', jsonify)\nclass Root:\ndef index(self):\nreturn {'message': 'Hello'}\nindex.exposed = True\ndef process(self, name):\n# do something here\nreturn \"Processed %s\" % name\nprocess.exposed = True\nif __name__ == '__main__':\nconf = {'/': {'tools.dejsonifier.on': True,\n'tools.jsonifier.on': True}}\ncherrypy.quickstart(Root(), config=conf)\n\n```", "```py\nfunction service()\n{\n};\nfunction ui()\n{\n};\n\n```", "```py\nfunction albums()\n{\nthis.visibility = false;\nthis.current = null;\nthis.position = 0;\nthis.step = 3;\n};\nui.prototype.albums = new albums();\nvar ui = new ui();\n\n```", "```py\nui.albums.edit(...)\n\n```", "```py\nfunction album()\n{\n};\nservice.prototype.albums = new album();\nvar services = new service();\n\n```", "```py\nalbums.prototype.toggle = function(event)\n{\ntoggle($('content-pane'), 'blind');\nif(this.visibility == false)\n{\nthis.visibility = true;\nthis.forward(e);\n}\nElse\n{\nthis.visibility = false;\nreplaceChildNodes(albumsPane);\n}\ntoggle($('albums-pane'), 'blind');\n};\n\n```", "```py\nconnect($('albums'), 'onclick', ui.albums, 'toggle');\n\n```", "```py\nalbums.prototype.forward = function(event)\n{\nvar start = this.position;\nvar end = start + this.step;\nservices.albums.fetch_range(start, end, this);\nthis.position = end;\n};\n\n```", "```py\nalbum.prototype.fetch_range = function(start, end, src)\n{\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"GET\", albumsBaseUri.concat(start, \"-\", end), true);\nxmlHttpReq.setRequestHeader('Accept', 'application/json');\nvar d = sendXMLHttpRequest(xmlHttpReq);\nd.addCallback(function (data)\n{\nvar data = evalJSONRequest(data);\nsrc.populate(data);\n});\n};\n\n```", "```py\nhttp://localhost:8080/services/rest/albums/0-3\nGET /services/rest/albums/0-3 HTTP/1.1\nHost: localhost:8080\nAccept: application/json\nConnection: close\n\n```", "```py\nHTTP/1.x 200 OK\nConnection: close\nDate: Tue, 19 Sep 2006 20:29:07 GMT\nContent-Length: 763\nContent-Type: application/json\nAllow: GET, HEAD\nServer: CherryPy/3.0.0beta\n\n```", "```py\nalbums.prototype.populate = function(albums)\n{\n// get the albums container\nvar albumsPane = $('albums-pane');\n// we remove any already displayed albums form the DOM tree\nreplaceChildNodes($('albums-pane'));\n// define a set of links that we will use to move through the\n// set of albums\nvar previous = SPAN({'id': 'previous-albums', 'class':\n'infos-action'}, 'Previous');\nconnect(previous, 'onclick', this, 'rewind');\nvar next = SPAN({'id': 'next-albums', 'class': 'infos-action'},\n'Next');\nconnect(next, 'onclick', this, 'forward');\n// we also add a link that when triggered will display the\n// form to create a new Album\nvar create = SPAN({'class': 'infos-action'}, 'Create');\nconnect(create, 'onclick',this, 'blank');\n// in case no albums were retrieved we simply display a default\n// message\nif(albums.length == 0)\n{\nappendChildNodes(albumsPane, SPAN({'id': 'info-msg', 'class':\n'info-msg'}, 'No more album to view.'));\nappendChildNodes(albumsPane, previous);\nreturn;\n}\n// now we traverse the array of retrieved albums to construct\n// a tree structure of each that we will then insert into the\n// main DOM tree\nfor(var album in albums)\n{\nalbum = albums[album];\nvar albumInfoBlock = DIV({'class': 'albums-infos-pane', 'id':\n'album-' + album['id']},\nLABEL({'class': 'infos-label'}, 'Title:'),\nSPAN({'class': 'infos-content'}, album['title']), BR(),\nLABEL({'class': 'infos-label'}, 'Created on:'),\nSPAN({'class': 'infos-content'}, album['created']), BR(),\nLABEL({'class': 'infos-label'}, 'Updated on:'),\nSPAN({'class': 'infos-content'}, album['modified']), BR(),\nLABEL({'class': 'infos-label'}, 'Description:'),\nSPAN({'class': 'infos-content'}, album['description']), BR());\n// we provide a link Edit and Delete to each album displayed\nvar editAlbumElement = SPAN({'class': 'infos-action'}, 'Edit');\nconnect(editAlbumElement, 'onclick', this, 'fetch_for_edit');\nvar deleteAlbumElement = SPAN({'class': 'infos-action'},\n'Delete');\nconnect(deleteAlbumElement, 'onclick', this, 'ditch');\nappendChildNodes(albumInfoBlock, editAlbumElement);\nappendChildNodes(albumInfoBlock, deleteAlbumElement);\n// we finally connect the onclick signal of the block\n// carrying the album information. When a user clicks\n// it will toggle the albums panel visibility and\n// display the selected album.\nconnect(albumInfoBlock, 'onclick', this, 'select');\nappendChildNodes(albumsPane, albumInfoBlock);\n}\n// we eventually insert all those new elements into the\n// main DOM tree to be displayed.\nappendChildNodes(albumsPane, previous);\nappendChildNodes(albumsPane, next);\nappendChildNodes(albumsPane, create);\n};\n\n```", "```py\nalbums.prototype.blank = function(e)\n{\n// those two elements will be links to either submit the form\n// or canceling the process by closing the form\nvar submitLink = SPAN({'id': 'form-submit', 'class': 'form-link'},\n'Submit');\nvar cancelLink = SPAN({'id': 'form-cancel', 'class': 'form-link'},\n'Cancel');\n// we will insert error messages when specific fields are\n// not filled\nvar successMessage = SPAN({'id': 'form-success', 'class':\n'form-success'}, 'Album created');\nvar errorMessage = SPAN({'id': 'form-error', 'class':\n'form-error'}, 'An unexpected error occured');\nvar titleErrMsg = SPAN({'id': 'form-title-error', 'class':\n'form-error'}, 'You must provide a title');\nvar authorErrMsg = SPAN({'id': 'form-author-error', 'class':\n'form-error'}, 'You must specify the author name');\nvar descErrMsg = SPAN({'id': 'form-desc-error', 'class':\n'form-error'}, 'You must provide a description');\n// the main form\nvar albumForm = DIV({'id': 'pageoverlay'},\nDIV({'id': 'outerbox'},\nDIV({'id': 'formoverlay'},\nSPAN({'class': 'form-caption'}, 'Create a new album'),\nBR(),BR(),\nFORM({'id': 'create-album', 'name':\"albumForm\"}, titleErrMsg,\nLABEL({'class': 'form-label'}, 'Title:'),\nINPUT({'class': 'form-input', 'name': 'title', 'id':\n'album-title', 'value': ''}),\nBR(),\nLABEL({'class': 'form-label'}, 'Segment:'),\nINPUT({'class': 'form-input', 'name': 'segment', 'id':\n'album-segment', 'value': ''}), BR(), authorErrMsg,\nLABEL({'class': 'form-label'}, 'Author:'),\nINPUT({'class': 'form-input', 'name': 'author', 'id':\n'album-author', 'value': ''}), BR(), descErrMsg,\nLABEL({'class': 'form-label'}, 'Description:'),\nTEXTAREA({'class': 'form-textarea', 'name': 'description',\n'id': 'album-desc', 'rows': '2', 'value': ''}), BR(),\nLABEL({'class': 'form-label'}, 'Content:'),\nTEXTAREA({'class': 'form-textarea', 'name': 'content', 'id':\n'album-content', 'rows': '7', 'value': ''}), BR()),\nsuccessMessage, errorMessage,\nDIV({'id': 'form-links'},\nsubmitLink,\ncancelLink))));\nhideElement(titleErrMsg);\nhideElement(authorErrMsg);\nhideElement(descErrMsg);\nhideElement(errorMessage);\nhideElement(successMessage);\nconnect(submitLink, 'onclick', this, 'create');\nconnect(cancelLink, 'onclick', closeOverlayBox);\nappendChildNodes($('photoblog'), albumForm);\n};\n\n```", "```py\nPOST /services/rest/album/ HTTP/1.1\nHost: localhost:8080\nAccept: application/json\nAccept-Language: en-us,en;q=0.5\nAccept-Encoding: gzip,deflate\nAccept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 167\nPragma: no-cache\nblog_id=1&title=My%20holiday%20on%20Mars&author=Sylvain&description= My%20holiday%20on%20Mars.&content=Mars%20is%20nice%20but%20a%20little%20quiet.\nHTTP/1.x 201 Created\nConnection: close\nContent-Length: 289\nServer: CherryPy/3.0.0beta\nLocation: http://localhost:8080/album/19\nAllow: DELETE, GET, HEAD, POST, PUT\nDate: Wed, 20 Sep 2006 19:59:59 GMT\n\n```", "```py\nalbum.prototype.create = function(data, src)\n{\nvar qs = queryString(data);\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"POST\", albumBaseUri, true);\nxmlHttpReq.setRequestHeader('Content-Type',\n'application/x-www-form-urlencoded');\nxmlHttpReq.setRequestHeader('Accept', 'application/json');\nvar d = sendXMLHttpRequest(xmlHttpReq, qs);\nd.addCallback(function (data)\n{\nsrc.showSuccessMessage();\n});\nd.addErrback(function (data)\n{\nsrc.showErrorMessage();\n});\n};\n\n```", "```py\nalbums.prototype.create = function(event)\n{\nif(this.validate())\n{\n// blogId is a global variable containing the current photoblog\n// identifier\nvar data = {'blog_id': blogId, 'title': $('album-title').value,\n'author': album-author').value,\n'description': $('album-desc').value,\n'content': $('album-content').value};\nservices.albums.create(data, this);\n}\n};\nalbums.prototype.validate = function()\n{\nvar ready = true;\nhideElement($('form-title-error'));\nhideElement($('form-author-error'));\nhideElement($('form-desc-error'));\nif($('album-title').value == '')\n{\nappear($('form-title-error'));\nready = false;\n}\nif($('album-author').value == '')\n{\nappear($('form-author-error'));\nready = false;\n}\nif($('album-desc').value == '')\n{\nappear($('form-desc-error'));\nready = false;\n}\nreturn ready;\n};\nalbums.prototype.showSuccessMessage = function()\n{\nhideElement($('form-title-error'));\nhideElement($('form-author-error'));\nhideElement($('form-desc-error'));\nappear($('form-success'));\nfade($('form-submit'));\n};\nalbums.prototype.showErrorMessage = function()\n{\nhideElement($('form-title-error'));\nhideElement($('form-author-error'));\nhideElement($('form-desc-error'));\nappear($('form-error'));\n};\n\n```", "```py\n// method part of the ui namespace\nalbums.prototype.ditch = function(event)\n{\n// stop the propagation of the click event so that\n// the select method is not applied\nevent.stop();\n// shows a modal dialogbox asking the confirmation of the deletion\nvar doit = confirm(\"Are you sure you want to delete this album?\");\nif(doit)\n{\n// we retrieve the id of the album to delete from\n// the block carrying the album <div id=\"album-19\">...</div>\nvar currentAlbumId = (e.src().parentNode.id).substr(6);\nservices.albums.remove(currentAlbumId);\nswitchOff(e.src().parentNode);\n}\n};\n// method part of the services namespace\nalbum.prototype.remove = function(id)\n{\nif(id != null)\n{\nvar xmlHttpReq = getXMLHttpRequest();\nxmlHttpReq.open(\"DELETE\", albumBaseUri + id, true);\nvar d = sendXMLHttpRequest(xmlHttpReq);\n}\n};\n\n```", "```py\nDELETE /services/rest/album/19 HTTP/1.1\nHost: localhost:8080\nConnection: close\nContent-Length: 0\nHTTP/1.x 200 OK\nConnection: close\nDate: Wed, 20 Sep 2006 20:39:49 GMT\nContent-Length: 0\nAllow: DELETE, GET, HEAD, POST, PUT\nServer: CherryPy/3.0.0beta\n\n```"]