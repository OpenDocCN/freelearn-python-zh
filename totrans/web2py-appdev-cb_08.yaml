- en: Chapter 8. Authentication and Authorization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Auth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CAPTCHA on login failure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using pyGravatar to get avatars for user profile pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-user and teacher modes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating with Facebook using OAuth 2.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Almost every application needs to be able to authenticate users and set permissions.
    web2py comes with an extensive and customizable role-based access control mechanism.
    In this chapter, we show you how to customize it by adding fields to the user
    table, adding **CAPTCHA** security after repeated failed logins, and how to create
    **Globally Recognized Avatars** (Gravatars&mdash;icons representing the users).
    We also discuss the `teacher` mode of web2py that allows students to share one
    web2py instance to develop and deploy their applications. Finally, we provide
    an example of integration with **OAuth 2.0**, one of the newest protocols for
    federated authentication. Web2py also supports `ofthe` protocols, such as CAS,
    OpenID, OAuth 1.0, LDAP, PAM, X509, and many more. But, once you learn one, it
    should be easy to learn the others using the official documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing Auth
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are two ways to customize Auth. The old way of doing it consists of defining
    a custom `db.auth_user` table from scratch. A new way consists of letting web2py
    define the `auth` table, but listing extra fields that web2py should include in
    the table. Here, we will review the latter method.
  prefs: []
  type: TYPE_NORMAL
- en: Specifically, we will assume that each user must also have a username, a phone
    number, and an address.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the `db.py` model, replace the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`auth.settings.extra_fields` is a dictionary of extra fields. The `key` is
    the name of the `auth` table to which to add the extra fields. The `value` is
    a list of extra fields. Notice that we have added two extra fields (phone_number
    and `address)`, but not `username`, here, for `auth_user`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`username` has to be treated in a special way, because it is involved in the
    authentication process, which is normally based on the `email` field. By passing
    the username argument to the following line, we tell web2py that we want the `username`
    field, and we want to use it for login instead of the `email` field.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The username will also be made unique.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There may be cases when registration happens outside the normal registration
    form (for example, when using `Janrain`, or when users are registered by the administrator).
    Yet you may need to force a new user, after their first login, to complete their
    registration. This can be done using a dummy hidden extra field, `complete_registration`
    that is set to `False`, by default, and is set to `True` when they update their
    profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we may want to force new users, upon login, to complete their registration.
    In `db.py`, we can append the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will force new users to edit their profile.
  prefs: []
  type: TYPE_NORMAL
- en: Using CAPTCHA on login failure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: web2py has built-in **ReCaptcha** support ([http://www.google.com/recaptcha](http://www.google.com/recaptcha)),
    but it is usually `ON` or `OFF`. It's useful to have it `ON`, which prevents brute
    force attacks on the application forms, yet it can be annoying to regular users.
    Here, we propose a solution, a plugin that conditionally turns `ON` ReCaptcha
    after a fixed number of login failures.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All you need to do is create a new `models/plugin_conditionalrecaptcha.py`,
    which contains the following code, and your job is done:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can customize the ReCaptcha appearance, by passing parameters to it through
    JavaScript. If you are using the default user controller for exposing `auth` login
    forms, you can simply edit the `user.html` view, and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add it before the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The full ReCaptcha client API can be viewed at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://recaptcha.net/apidocs/captcha/client.html](http://recaptcha.net/apidocs/captcha/client.html)'
  prefs: []
  type: TYPE_NORMAL
- en: Using pyGravatar to get avatars for user profile pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First download **pyGravatar** from the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bitbucket.org/gridaphobe/pygravatar/src](http://https://bitbucket.org/gridaphobe/pygravatar/src)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Put the `gravatar.py` in `applications/yourapp/modules`. If you prefer, you
    can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In any of your models source files, you have to import the Gravatar library
    to be able to use it, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using the scaffold application, edit the `default/user.html` view,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now have a profile page that will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using pyGravatar to get avatars for user profile pages](img/5467OS_08_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, in any page, if you want the user avatar, then you just need to use the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: You can go further and get the user profile bio from [http://en.gravatar.com/](http://en.gravatar.com/).
    Add the following code to `default/user.html`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you get the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using pyGravatar to get avatars for user profile pages](img/5467OS_08_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also get extra services that your user has registered in Gravatar,
    in the `default/user.html` view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'And then, you will see the additional information (about me and URL of registered
    services), in your web page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using pyGravatar to get avatars for user profile pages](img/5467OS_08_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tell your users to register in [http://en.gravatar.com/](http://en.gravatar.com/),
    using the same e-mail address used in your application.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-user and teacher modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Since version 1.92, you can set up web2py in a `mult-iuser` or `teaching` mode.
    There is one instance of web2py installed on a system, one account is the `admin`
    (or `teacher)`, and the other accounts are the `students`. Students can only see
    their own applications. It works as follows: The admin page is changed and now
    contains a login and register header. The first user to log in, in this mode,
    gets the role of `teacher`. Subsequent registrations will become `students`, after
    approval by the `teacher`. In the following recipe, I assume running web2py locally
    at `127.0.0.1` on port `8000`. The `teacher` and the `students` will need an **SSL-secured**
    web2py instance. See [Chapter 11](ch11.html "Chapter 11. Other Tips and Tricks"),
    *Other Tips and Tricks*, for more details.'
  prefs: []
  type: TYPE_NORMAL
- en: Note that in the `multi-user` mode, there is no security mechanism to prevent
    interference between administrators.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Install web2py in a folder; let's say `web2py_mu`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Set `MULTI_USER_MODE = True`, in `admin/appadmin/0.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start web2py in the usual way, and click on the link for the administrative
    interface. Now you see the adapted administrative login.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click register to create the teacher account. You now enter the admin application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on `logout`, and click on `register` to create the first `student` account
    (you can let the students do this; provide them with the link).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After a student registers, his/her status is **Pending.Approving the students.**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Enter into the web2py `appadmin`, of the admin application, using the following
    URL: `http://127.0.0.1:8000/admin/appadmin`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the `auth_user` table.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You''re now looking at the teacher and students accounts. For each approved
    student:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click on its ID (leftmost column)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove the word **pending** in the field `registration_key`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If available, you can also import a list of students by using a CSV file (to
    be expanded upon).
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For students just starting with Python and webapps, starting with a minimal
    application could be helpful. This simple setup will not include Ajax, and it
    will cover just minimal templating features.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: On the right side, we need an extra option to load a minimal application, based
    on a file `minimal.w2p`.
  prefs: []
  type: TYPE_NORMAL
- en: The components of `appadmin` are not relevant for the beginning student, and
    intimidating, a configuration option `BASIC_STUDENT` as `False`, by default, could
    help. The teacher can turn this on, and at a later stage off. When `False`, these
    files can be hidden from sight, the admin screen, the wizard, and other advanced
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with Facebook using OAuth 2.0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The following recipe will show how to build a simple application that authenticates
    users using Facebook's OAuth 2.0 authentication service.
  prefs: []
  type: TYPE_NORMAL
- en: 'OAuth 2.0 is the evolution of the OAuth 1.0a protocol. You can find the exact
    description of the protocol at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://oauth.net/2](http://oauth.net/2)'
  prefs: []
  type: TYPE_NORMAL
- en: Without entering in details, the main object of the protocol is allowing sites
    (**providers**) give trusted authentication credentials to other sites (**consumers**).
    This is very similar in scope to CAS authentication system, which is already implemented
    by web2py.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, web2py implements OAuth 2.0 as consumer only. But, that is enough
    to allow any web2py application to authenticate against a provider of OAuth 2.0
    services.
  prefs: []
  type: TYPE_NORMAL
- en: We show how to implement a small application that uses Facebook as OAuth 2.0
    provider, since it is the provider that was tested more in depth.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before you start, you need to register an application on Facebook:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://developers.facebook.com](http://developers.facebook.com)'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/5467OS_08_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You must be careful about using the exact same URL (including the TCP port)
    that you use with the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, it is suggested that you use the Facebook Graph API Python library, to
    access the `REST` interface in a programmatic way. This recipe uses that library.
    You can download it here: https://github.com/facebook/python-sdk. Copy it to the
    `*modules*` directory of your application.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to use the JSON engine that comes with web2py, change the `import`
    code at the beginning of the file to look simply like the following (the other
    statements are not needed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a file containing the **App Id** and the **App Secret**, shown in the
    registration page. Save it in the `modules` directory of you application, with
    the name `fbappauth.py:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, you only need to change the `auth` code in your model. You can put it in
    the usual `db.py` model that comes with the scaffolding application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As you can see, this class specializes the generic `OAuthAccount` class from
    `gluon.contrib.login_methods.oauth20_account.py`, so that it can work with the
    Facebook authentication server.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The following line defines where the user lands after the authentication server
    has positively accepted the user identity. Change it to whatever you need.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Often, you cannot test your application on the public server, where you will
    deploy the final application. Usually you can test it using `localhost` or `127.0.0.1`
    as a host.
  prefs: []
  type: TYPE_NORMAL
- en: In the common case, using `localhost` as hostname does not work with your application.
    Add the proper entry in `/etc/hosts` (in the previous registered example application).
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: But, be aware that, in either case, you need to use port `80` to avoid problems.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This often requires administrator permissions when starting web2py, or using
    capabilities where your system supports them.
  prefs: []
  type: TYPE_NORMAL
