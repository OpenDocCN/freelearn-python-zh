- en: <st c="0">4</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Creating a Movies App with Dummy Data</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="39">Currently, our project contains a single application with a couple
    of sections that display static information.</st> <st c="152">Web applications
    are more complex.</st> <st c="187">In this chapter, we will learn how to develop
    more complex applications, such as the movies app.</st> <st c="284">The movies
    app will serve to list movies and enable users to click on them to display their
    data on a separate page.</st> <st c="401">For now, we will use dummy data to simulate
    the</st> <st c="449">movie data.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="460">In this chapter, we will be covering the</st> <st c="502">following
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="519">Creating the</st> <st c="533">movies app</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="543">Listing movies with</st> <st c="564">dummy data</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="574">Listing</st> <st c="583">individual movies</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="600">Adding a link in the</st> <st c="622">base template</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="635">By the end, we will know how to create more complex Django apps
    and how to manage information inside</st> <st c="737">those apps.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="748">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="771">In this chapter, we will be using Python 3.10+.</st> <st c="820">Additionally,
    we will be using the</st> **<st c="855">VS Code</st>** <st c="862">editor in this
    book, which you can download</st> <st c="907">from</st> <st c="912">https://code.visualstudio.com/</st><st
    c="942">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="943">The code for this chapter is located</st> <st c="981">at</st> <st
    c="984">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter04/moviesstore</st><st
    c="1092">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1093">The CiA video for this chapter can be found</st> <st c="1138">at</st>
    [<st c="1141">https://packt.link/WmJR1</st>](https://packt.link/WmJR1)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1165">Creating the movies app</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="1189">Currently, we have a home app that contains the logic to navigate
    between the</st> **<st c="1268">Home</st>** <st c="1272">and</st> **<st c="1277">About</st>**
    <st c="1282">pages.</st> <st c="1290">Now, we are going to start designing and
    implementing the movies logic.</st> <st c="1362">We prefer to separate this logic
    from the home app.</st> <st c="1414">So, let’s create a new Django app.</st> <st
    c="1449">We will follow the next steps: (i) creating the movies app, (ii) adding
    the movies app to settings, and (iii) including</st> <st c="1568">the movies URL
    file in the project-level</st> <st c="1610">URL file.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1619">Creating the movies app</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1643">Navigate to the top</st> `<st c="1664">moviesstore</st>` <st c="1675">folder
    (the one that contains the</st> `<st c="1710">manage.py</st>` <st c="1719">file)
    and run the following in</st> <st c="1751">the Terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1764">For macOS, run the</st> <st c="1784">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="1836">For Windows, run the</st> <st c="1858">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '*<st c="1909">Figure 4</st>**<st c="1918">.1</st>* <st c="1920">shows the new
    project structure.</st> <st c="1954">Verify that it matches your current</st>
    <st c="1990">folder structure.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The MOVIESSTORE project structure containing the movies app](img/B22457_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2150">Figure 4.1 – The MOVIESSTORE project structure containing the movies
    app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2222">Adding the movies app to settings</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2256">Remember that for</st> <st c="2274">each newly created app, we
    must register it in the</st> `<st c="2326">settings.py</st>` <st c="2337">file.</st>
    <st c="2344">In</st> `<st c="2347">/moviesstore/settings.py</st>`<st c="2371">,
    under</st> `<st c="2379">INSTALLED_APPS</st>`<st c="2393">, add the following</st>
    <st c="2413">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2625">Including the movies URL file in the project-level URL file</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2685">In</st> `<st c="2689">/moviesstore/urls.py</st>`<st c="2709">,
    add the</st> <st c="2718">following</st> <st c="2729">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2933">Similar to the inclusion of the</st> `<st c="2965">home.urls</st>`
    <st c="2974">file, we include the</st> `<st c="2996">movies.urls</st>` <st c="3007">file,
    which will contain the URLs with respect to the movies app.</st> <st c="3074">All
    the URLs defined in the</st> `<st c="3102">movies.urls</st>` <st c="3113">file
    will contain a</st> `<st c="3134">movies/</st>` <st c="3141">prefix (as defined
    in the previous path).</st> <st c="3184">We will create the</st> `<st c="3203">movies.urls</st>`
    <st c="3214">file later.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3226">Now that we have created and included the movies app, we are ready
    to code the functionalities of this app.</st> <st c="3335">Let’s start by</st>
    <st c="3350">listing movies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3365">Listing movies with dummy data</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3396">Listing movies involves a series of steps similar to</st> <st c="3449">those
    followed when we implemented the</st> `<st c="3592">views</st>` `<st c="3597">index</st>`
    <st c="3603">function, and (iii) creating a</st> <st c="3634">movies</st> <st
    c="3642">index template.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3657">Configuring the movies URL</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3684">In</st> `<st c="3688">/movies/</st>`<st c="3696">, create a</st>
    <st c="3707">new file called</st> `<st c="3723">urls.py</st>`<st c="3730">. This
    file will contain the path regarding the URLs of the movies app.</st> <st c="3802">For
    now, fill it in with</st> <st c="3827">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3952">We defined a</st> `<st c="3966">''</st>` <st c="3968">path, but
    remember that the project-level URLs file defined a</st> `<st c="4031">/movies</st>`
    <st c="4038">prefix for this file.</st> <st c="4061">So, if a URL matches the</st>
    `<st c="4086">/movies</st>` <st c="4093">path, it will execute the</st> `<st c="4120">index</st>`
    <st c="4125">function defined in the</st> `<st c="4150">views</st>` <st c="4155">file.</st>
    <st c="4162">We will implement the</st> `<st c="4184">index</st>` <st c="4189">function
    next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4204">Defining the views index function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4238">In</st> `<st c="4242">/movies/views.py</st>`<st c="4258">, add
    the</st> <st c="4267">following</st> <st c="4278">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4967">Let’s explain the</st> <st c="4986">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5000">We defined a</st> <st c="5014">variable called</st> `<st c="5030">movies</st>`<st
    c="5036">. This variable is a list of dictionaries, where each dictionary represents
    information about a particular movie.</st> <st c="5150">For example, at index</st>
    `<st c="5172">0</st>`<st c="5173">, we have the movie with</st> `<st c="5198">id=1</st>`
    <st c="5202">(the</st> `<st c="5208">Inception</st>` <st c="5217">movie).</st>
    <st c="5226">We have four dummy movies.</st> <st c="5253">We will retrieve movie
    data from a SQLite database in</st> <st c="5307">upcoming chapters.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5325">We also have an</st> `<st c="5342">index</st>` <st c="5347">function.</st>
    <st c="5358">This</st> <st c="5362">function will render the</st> `<st c="5388">movies/index.html</st>`
    <st c="5405">template, but first, it passes a page title and the complete list
    of movies to</st> <st c="5485">that template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5499">Creating a movies index template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5532">In</st> `<st c="5536">/movies/</st>`<st c="5544">, create</st>
    <st c="5552">a</st> `<st c="5555">templates</st>` <st c="5564">folder.</st> <st
    c="5573">Then, in</st> `<st c="5582">/movies/templates/</st>`<st c="5600">, create
    a</st> `<st c="5611">movies</st>` <st c="5617">folder.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5625">Now, in</st> `<st c="5634">/movies/templates/movies/</st>`<st c="5659">,
    create a new file,</st> `<st c="5680">index.html</st>`<st c="5690">. For now,
    fill it in with</st> <st c="5717">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6279">Let’s explain the</st> <st c="6298">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6312">We extend the</st> `<st c="6327">base.html</st>` <st c="6336">template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6346">We define a heading element with the text</st> `<st c="6389">List</st>`
    `<st c="6394">of Movies</st>`<st c="6403">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6404">We use the DTL</st> `<st c="6420">for</st>` <st c="6423">template</st>
    <st c="6432">tag to iterate through each movie, and we display the movie name.</st>
    <st c="6499">For now, we are showing a default image for all movies; we will upload
    and display proper images for each movie in</st> <st c="6614">upcoming chapters.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6632">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6637">We used the Bootstrap card component as a base to design the way
    movies are displayed.</st> <st c="6725">You can find more information</st> <st
    c="6755">here:</st> [<st c="6761">https://getbootstrap.com/docs/5.3/components/card/</st>](https://getbootstrap.com/docs/5.3/components/card/)<st
    c="6811">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6812">Now, save those files, run the</st> <st c="6844">server, and go
    to</st> [<st c="6862">http://localhost:8000/movies</st>](http://localhost:8000/movies)<st
    c="6890">; you should see the new</st> **<st c="6916">List of Movies</st>** <st
    c="6930">page (</st>*<st c="6937">Figure 4</st>**<st c="6946">.2</st>*<st c="6948">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The List of Movies page](img/B22457_04_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7015">Figure 4.2 – The List of Movies page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7051">We are able to see the information of all movies together.</st>
    <st c="7111">Now, let’s implement a functionality to list</st> <st c="7156">individual
    movies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7174">Listing individual movies</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '<st c="7200">To list individual</st> <st c="7219">movies, we will follow these
    steps: (i) configuring individual movies URLs, (ii) defining the</st> `<st c="7314">views</st>`
    `<st c="7319">show</st>` <st c="7324">function, (iii) creating a movies</st> `<st
    c="7359">show</st>` <st c="7363">template, and (iv) adding individual movie links
    on the</st> <st c="7420">movies page.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7432">Configuring individual movies URLs</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7467">In</st> `<st c="7471">/movies/urls.py</st>`<st c="7486">, add the
    next path</st> <st c="7505">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7676">This path is a little different from the previously defined paths.</st>
    <st c="7743">The</st> `<st c="7747"><int:id></st>` <st c="7755">part indicates
    that this path expects an integer value to be passed from the URL and that the
    integer value will be</st> <st c="7872">associated with a variable named</st>
    `<st c="7905">id</st>`<st c="7907">, which will be used to identify which movie
    data to show.</st> <st c="7966">For example, if we access</st> `<st c="7992">movies/1</st>`<st
    c="8000">, the application will display the data of the movie with</st> `<st c="8058">id=1</st>`<st
    c="8062">. Finally, that path will execute the</st> `<st c="8100">show</st>` <st
    c="8104">function defined in the</st> `<st c="8129">views</st>` <st c="8134">file.</st>
    <st c="8141">You can learn more about Django URLs</st> <st c="8178">here:</st>
    [<st c="8184">https://docs.djangoproject.com/en/5.0/topics/http/urls/</st>](https://docs.djangoproject.com/en/5.0/topics/http/urls/)<st
    c="8239">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8240">Defining the views show function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8273">In</st> `<st c="8277">/movies/views.py</st>`<st c="8293">, add
    the</st> <st c="8302">following in bold at the end of</st> <st c="8335">the file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8557">Let’s explain the</st> <st c="8576">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8590">We define the</st> `<st c="8605">show</st>` <st c="8609">function.</st>
    <st c="8620">This function takes two parameters:</st> `<st c="8656">request</st>`
    <st c="8663">and</st> `<st c="8668">id</st>` <st c="8670">(</st>`<st c="8672">id</st>`
    <st c="8674">is collected from</st> <st c="8693">the URL).</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8702">Then, we extract the movie data with that ID.</st> <st c="8749">We
    subtract one unit since we stored the movie with</st> `<st c="8801">id=1</st>`
    <st c="8805">in the movies list index</st> `<st c="8831">0</st>`<st c="8832">,
    the movie with</st> `<st c="8849">id=2</st>` <st c="8853">in the movies list index</st>
    `<st c="8879">1</st>`<st c="8880">, and</st> <st c="8886">so on.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8892">Finally, we pass the</st> <st c="8913">movie name and the individual
    movie to the</st> `<st c="8957">movies/show.html</st>` <st c="8973">template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8983">Creating a movies show template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9015">In</st> `<st c="9019">/movies/templates/movies/</st>`<st c="9044">,
    create a new file,</st> `<st c="9065">show.html</st>`<st c="9074">. For now, fill
    it in with</st> <st c="9101">the</st> <st c="9104">following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9611">The previous code displays</st> <st c="9638">the individual</st>
    <st c="9654">movie information.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9672">Adding individual movie links on the movies page</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9721">In</st> `<st c="9725">/movies/templates/movies/index.html</st>`<st
    c="9760">, add</st> <st c="9765">the following</st> <st c="9780">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10155">We added a link from each movie name to each individual movie
    page.</st> <st c="10224">We used the</st> `<st c="10236">url</st>` <st c="10239">template
    tag to link to the specified URL pattern name (</st>`<st c="10296">movie.show</st>`<st
    c="10307">).</st> <st c="10311">But we also specified a parameter to</st> <st
    c="10348">be passed to the URL (</st>`<st c="10370">id=movie.id</st>`<st c="10382">).</st>
    <st c="10386">In this case, it’s setting the</st> `<st c="10417">id</st>` <st
    c="10419">parameter to the</st> `<st c="10437">id</st>` <st c="10439">attribute
    of the</st> `<st c="10457">movie</st>` <st c="10462">object.</st> <st c="10471">This
    is useful for URLs that require dynamic parts, such as details for a</st> <st
    c="10545">specific movie.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10560">Now, save those files, run the server, and go to</st> `<st c="10610">http://localhost:8000/movies</st>`<st
    c="10638">. You will see that each movie name has become a button that can be
    clicked.</st> <st c="10715">Click on a movie name, and you will be redirected
    to the individual movie page (</st>*<st c="10795">Figure 4</st>**<st c="10804">.3</st>*<st
    c="10806">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Individual movie page](img/B22457_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10946">Figure 4.3 – Individual movie page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10980">We can list all movies and navigate to individual movies; however,
    we haven’t added a link to the movies section.</st> <st c="11095">Let’s implement
    this link in the</st> <st c="11128">next section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11141">Adding a link in the base template</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11176">Finally, let’s add the movies link</st> <st c="11211">in the base
    template.</st> <st c="11234">In</st> `<st c="11237">/moviesstore/templates/base.html</st>`<st
    c="11269">, in the header section, add the following</st> <st c="11312">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11567">Now, save those files, run the server, and go to</st> `<st c="11617">http://localhost:8000/movies</st>`<st
    c="11645">. You will see the new</st> **<st c="11668">Movies</st>** <st c="11674">menu
    option in the header (</st>*<st c="11702">Figure 4</st>**<st c="11711">.4</st>*<st
    c="11713">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.4 – Movies page updated](img/B22457_04_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11829">Figure 4.4 – Movies page updated</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11861">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11869">In this chapter, we recapped how to create a Django app.</st>
    <st c="11927">We created a movies app that allows listing movies and individual
    movies.</st> <st c="12001">We learned how to pass information through the URLs,
    how to create dummy data, how to use the</st> `<st c="12095">for</st>` <st c="12098">template
    tag, and how to link different pages.</st> <st c="12146">We hope this serves as
    a solid foundation to move on to the next part of our project, where we will go
    through more advanced topics such as models to make our</st> <st c="12305">site
    database-driven.</st>
  prefs: []
  type: TYPE_NORMAL
