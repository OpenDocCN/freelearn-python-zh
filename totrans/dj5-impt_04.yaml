- en: <st c="0">4</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: <st c="2">Creating a Movies App with Dummy Data</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用虚拟数据创建电影应用
- en: <st c="39">Currently, our project contains a single application with a couple
    of sections that display static information.</st> <st c="152">Web applications
    are more complex.</st> <st c="187">In this chapter, we will learn how to develop
    more complex applications, such as the movies app.</st> <st c="284">The movies
    app will serve to list movies and enable users to click on them to display their
    data on a separate page.</st> <st c="401">For now, we will use dummy data to simulate
    the</st> <st c="449">movie data.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们的项目包含一个包含几个显示静态信息的部分的应用程序。Web 应用程序更复杂。在本章中，我们将学习如何开发更复杂的应用程序，例如电影应用。电影应用将用于列出电影，并允许用户点击它们在单独的页面上显示其数据。目前，我们将使用虚拟数据来模拟电影数据。
- en: <st c="460">In this chapter, we will be covering the</st> <st c="502">following
    topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: <st c="519">Creating the</st> <st c="533">movies app</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建电影应用
- en: <st c="543">Listing movies with</st> <st c="564">dummy data</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用虚拟数据列出电影
- en: <st c="574">Listing</st> <st c="583">individual movies</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列出单个电影
- en: <st c="600">Adding a link in the</st> <st c="622">base template</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在基础模板中添加链接
- en: <st c="635">By the end, we will know how to create more complex Django apps
    and how to manage information inside</st> <st c="737">those apps.</st>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将了解如何创建更复杂的多吉安应用以及如何在那些应用中管理信息。
- en: <st c="748">Technical requirements</st>
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: <st c="771">In this chapter, we will be using Python 3.10+.</st> <st c="820">Additionally,
    we will be using the</st> **<st c="855">VS Code</st>** <st c="862">editor in this
    book, which you can download</st> <st c="907">from</st> <st c="912">https://code.visualstudio.com/</st><st
    c="942">.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Python 3.10+。此外，我们将在本书中使用**<st c="855">VS Code</st>**编辑器，您可以从[https://code.visualstudio.com/](https://code.visualstudio.com/)下载。
- en: <st c="943">The code for this chapter is located</st> <st c="981">at</st> <st
    c="984">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter04/moviesstore</st><st
    c="1092">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码位于[https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter04/moviesstore](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter04/moviesstore)。
- en: <st c="1093">The CiA video for this chapter can be found</st> <st c="1138">at</st>
    [<st c="1141">https://packt.link/WmJR1</st>](https://packt.link/WmJR1)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的 CiA 视频可以在[https://packt.link/WmJR1](https://packt.link/WmJR1)找到
- en: <st c="1165">Creating the movies app</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建电影应用
- en: '<st c="1189">Currently, we have a home app that contains the logic to navigate
    between the</st> **<st c="1268">Home</st>** <st c="1272">and</st> **<st c="1277">About</st>**
    <st c="1282">pages.</st> <st c="1290">Now, we are going to start designing and
    implementing the movies logic.</st> <st c="1362">We prefer to separate this logic
    from the home app.</st> <st c="1414">So, let’s create a new Django app.</st> <st
    c="1449">We will follow the next steps: (i) creating the movies app, (ii) adding
    the movies app to settings, and (iii) including</st> <st c="1568">the movies URL
    file in the project-level</st> <st c="1610">URL file.</st>'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们有一个包含在**<st c="1268">Home</st>**和**<st c="1277">About</st>**页面之间导航逻辑的首页应用。现在，我们将开始设计和实现电影逻辑。我们更喜欢将此逻辑与首页应用分离。因此，让我们创建一个新的
    Django 应用。我们将遵循以下步骤：（i）创建电影应用，（ii）将电影应用添加到设置中，（iii）将电影 URL 文件包含在项目级别的 URL 文件中。
- en: <st c="1619">Creating the movies app</st>
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建电影应用
- en: <st c="1643">Navigate to the top</st> `<st c="1664">moviesstore</st>` <st c="1675">folder
    (the one that contains the</st> `<st c="1710">manage.py</st>` <st c="1719">file)
    and run the following in</st> <st c="1751">the Terminal:</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 导航到顶级`<st c="1664">moviesstore</st>`文件夹（包含`<st c="1710">manage.py</st>`文件的文件夹）并在终端中运行以下命令：
- en: <st c="1764">For macOS, run the</st> <st c="1784">following command:</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 macOS，运行以下命令：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="1836">For Windows, run the</st> <st c="1858">following command:</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，运行以下命令：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*<st c="1909">Figure 4</st>**<st c="1918">.1</st>* <st c="1920">shows the new
    project structure.</st> <st c="1954">Verify that it matches your current</st>
    <st c="1990">folder structure.</st>'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '*<st c="1909">图4</st>**<st c="1918">.1</st>* <st c="1920">显示了新的项目结构。</st> <st
    c="1954">请确认它与您当前的</st> <st c="1990">文件夹结构相匹配。</st>'
- en: '![Figure 4.1 – The MOVIESSTORE project structure containing the movies app](img/B22457_04_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图4.1 – 包含电影应用的MOVIESSTORE项目结构](img/B22457_04_01.jpg)'
- en: <st c="2150">Figure 4.1 – The MOVIESSTORE project structure containing the movies
    app</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2150">图4.1 – 包含电影应用的MOVIESSTORE项目结构</st>
- en: <st c="2222">Adding the movies app to settings</st>
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2222">将电影应用添加到设置中</st>
- en: <st c="2256">Remember that for</st> <st c="2274">each newly created app, we
    must register it in the</st> `<st c="2326">settings.py</st>` <st c="2337">file.</st>
    <st c="2344">In</st> `<st c="2347">/moviesstore/settings.py</st>`<st c="2371">,
    under</st> `<st c="2379">INSTALLED_APPS</st>`<st c="2393">, add the following</st>
    <st c="2413">in bold:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2256">请记住，对于</st> <st c="2274">每个新创建的应用，我们必须在</st> `<st c="2326">settings.py</st>`
    <st c="2337">文件中注册它。</st> <st c="2344">在</st> `<st c="2347">/moviesstore/settings.py</st>`<st
    c="2371">中，在</st> `<st c="2379">INSTALLED_APPS</st>`<st c="2393">下，添加以下内容（加粗）：</st>
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="2625">Including the movies URL file in the project-level URL file</st>
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2625">在项目级别的URL文件中包含电影URL文件</st>
- en: <st c="2685">In</st> `<st c="2689">/moviesstore/urls.py</st>`<st c="2709">,
    add the</st> <st c="2718">following</st> <st c="2729">in bold:</st>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2685">在</st> `<st c="2689">/moviesstore/urls.py</st>`<st c="2709">中，添加以下内容（加粗）：</st>
- en: '[PRE3]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="2933">Similar to the inclusion of the</st> `<st c="2965">home.urls</st>`
    <st c="2974">file, we include the</st> `<st c="2996">movies.urls</st>` <st c="3007">file,
    which will contain the URLs with respect to the movies app.</st> <st c="3074">All
    the URLs defined in the</st> `<st c="3102">movies.urls</st>` <st c="3113">file
    will contain a</st> `<st c="3134">movies/</st>` <st c="3141">prefix (as defined
    in the previous path).</st> <st c="3184">We will create the</st> `<st c="3203">movies.urls</st>`
    <st c="3214">file later.</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2933">类似于包含</st> `<st c="2965">home.urls</st>` <st c="2974">文件，我们包含</st>
    `<st c="2996">movies.urls</st>` <st c="3007">文件，该文件将包含与电影应用相关的URL。</st> <st c="3074">在</st>
    `<st c="3102">movies.urls</st>` <st c="3113">文件中定义的所有URL都将包含一个</st> `<st c="3134">movies/</st>`
    <st c="3141">前缀（如前所述路径中定义的）。</st> <st c="3184">我们将在稍后创建</st> `<st c="3203">movies.urls</st>`
    <st c="3214">文件。</st>
- en: <st c="3226">Now that we have created and included the movies app, we are ready
    to code the functionalities of this app.</st> <st c="3335">Let’s start by</st>
    <st c="3350">listing movies.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3226">现在我们已经创建并包含了电影应用，我们准备编写此应用的功能。</st> <st c="3335">让我们从列出电影开始。</st>
- en: <st c="3365">Listing movies with dummy data</st>
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3365">使用虚拟数据列出电影</st>
- en: <st c="3396">Listing movies involves a series of steps similar to</st> <st c="3449">those
    followed when we implemented the</st> `<st c="3592">views</st>` `<st c="3597">index</st>`
    <st c="3603">function, and (iii) creating a</st> <st c="3634">movies</st> <st
    c="3642">index template.</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3396">列出电影涉及一系列步骤，类似于</st> <st c="3449">我们在实现</st> `<st c="3592">views</st>`
    `<st c="3597">index</st>` <st c="3603">函数时遵循的步骤，以及</st> <st c="3634">创建一个</st>
    `<st c="3642">movies</st>` <st c="3642">索引模板。</st>
- en: <st c="3657">Configuring the movies URL</st>
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3657">配置电影URL</st>
- en: <st c="3684">In</st> `<st c="3688">/movies/</st>`<st c="3696">, create a</st>
    <st c="3707">new file called</st> `<st c="3723">urls.py</st>`<st c="3730">. This
    file will contain the path regarding the URLs of the movies app.</st> <st c="3802">For
    now, fill it in with</st> <st c="3827">the following:</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3684">在</st> `<st c="3688">/movies/</st>`<st c="3696">中，创建一个名为</st> `<st
    c="3707">urls.py</st>`<st c="3730">的新文件。此文件将包含关于电影应用URL的路径。</st> <st c="3802">目前，请用以下内容填充它：</st>
    <st c="3827">以下内容：</st>
- en: '[PRE4]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="3952">We defined a</st> `<st c="3966">''</st>` <st c="3968">path, but
    remember that the project-level URLs file defined a</st> `<st c="4031">/movies</st>`
    <st c="4038">prefix for this file.</st> <st c="4061">So, if a URL matches the</st>
    `<st c="4086">/movies</st>` <st c="4093">path, it will execute the</st> `<st c="4120">index</st>`
    <st c="4125">function defined in the</st> `<st c="4150">views</st>` <st c="4155">file.</st>
    <st c="4162">We will implement the</st> `<st c="4184">index</st>` <st c="4189">function
    next.</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3952">我们定义了一个</st> `<st c="3966">''</st>` <st c="3968">路径，但请记住，项目级别的URL文件为该文件定义了一个</st>
    `<st c="4031">/movies</st>` <st c="4038">前缀。</st> <st c="4061">因此，如果一个URL与</st>
    `<st c="4086">/movies</st>` <st c="4093">路径匹配，它将执行在</st> `<st c="4120">views</st>`
    <st c="4125">文件中定义的</st> `<st c="4150">index</st>` <st c="4155">函数。</st> <st c="4162">我们将接下来实现</st>
    `<st c="4184">index</st>` <st c="4189">函数。</st>
- en: <st c="4204">Defining the views index function</st>
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 定义视图索引函数
- en: <st c="4238">In</st> `<st c="4242">/movies/views.py</st>`<st c="4258">, add
    the</st> <st c="4267">following</st> <st c="4278">in bold:</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="4242">/movies/views.py</st>`<st c="4258"> 文件中，添加以下内容（加粗）：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="4967">Let’s explain the</st> <st c="4986">previous code:</st>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下之前的代码：
- en: <st c="5000">We defined a</st> <st c="5014">variable called</st> `<st c="5030">movies</st>`<st
    c="5036">. This variable is a list of dictionaries, where each dictionary represents
    information about a particular movie.</st> <st c="5150">For example, at index</st>
    `<st c="5172">0</st>`<st c="5173">, we have the movie with</st> `<st c="5198">id=1</st>`
    <st c="5202">(the</st> `<st c="5208">Inception</st>` <st c="5217">movie).</st>
    <st c="5226">We have four dummy movies.</st> <st c="5253">We will retrieve movie
    data from a SQLite database in</st> <st c="5307">upcoming chapters.</st>
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了一个名为 `<st c="5030">movies</st>`<st c="5036"> 的变量。这个变量是一个字典列表，其中每个字典代表一部特定电影的信息。</st>
    <st c="5150">例如，在索引 `<st c="5172">0</st>`<st c="5173"> 处，我们有 id=1 的电影（即 `<st c="5208">Inception</st>`
    <st c="5217">电影）。</st> 我们有四部虚拟电影。</st> <st c="5253">我们将在后续章节中从 SQLite 数据库中检索电影数据。</st>
- en: <st c="5325">We also have an</st> `<st c="5342">index</st>` <st c="5347">function.</st>
    <st c="5358">This</st> <st c="5362">function will render the</st> `<st c="5388">movies/index.html</st>`
    <st c="5405">template, but first, it passes a page title and the complete list
    of movies to</st> <st c="5485">that template.</st>
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们还有一个 `<st c="5342">index</st>` <st c="5347">函数。</st> <st c="5358">此函数将渲染 `<st
    c="5388">movies/index.html</st>` <st c="5405">模板，但首先，它将页面标题和电影完整列表传递给该模板。</st>
- en: <st c="5499">Creating a movies index template</st>
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建电影索引模板
- en: <st c="5532">In</st> `<st c="5536">/movies/</st>`<st c="5544">, create</st>
    <st c="5552">a</st> `<st c="5555">templates</st>` <st c="5564">folder.</st> <st
    c="5573">Then, in</st> `<st c="5582">/movies/templates/</st>`<st c="5600">, create
    a</st> `<st c="5611">movies</st>` <st c="5617">folder.</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="5532">/movies/</st>`<st c="5544"> 目录下，创建一个 `<st c="5555">templates</st>`
    <st c="5564">文件夹。</st> 然后，在 `<st c="5582">/movies/templates/</st>`<st c="5600">
    目录下，创建一个 `<st c="5611">movies</st>` <st c="5617">文件夹。</st>
- en: <st c="5625">Now, in</st> `<st c="5634">/movies/templates/movies/</st>`<st c="5659">,
    create a new file,</st> `<st c="5680">index.html</st>`<st c="5690">. For now,
    fill it in with</st> <st c="5717">the following:</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在 `<st c="5634">/movies/templates/movies/</st>`<st c="5659"> 目录下，创建一个新文件，`<st
    c="5680">index.html</st>`<st c="5690">。目前，请用以下内容填充它：</st>
- en: '[PRE6]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="6279">Let’s explain the</st> <st c="6298">previous code:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们解释一下之前的代码：
- en: <st c="6312">We extend the</st> `<st c="6327">base.html</st>` <st c="6336">template.</st>
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们扩展了 `<st c="6327">base.html</st>` <st c="6336">模板。</st>
- en: <st c="6346">We define a heading element with the text</st> `<st c="6389">List</st>`
    `<st c="6394">of Movies</st>`<st c="6403">.</st>
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了一个带有文本 `<st c="6389">List</st>` `<st c="6394">of Movies</st>`<st c="6403">
    的标题元素。</st>
- en: <st c="6404">We use the DTL</st> `<st c="6420">for</st>` <st c="6423">template</st>
    <st c="6432">tag to iterate through each movie, and we display the movie name.</st>
    <st c="6499">For now, we are showing a default image for all movies; we will upload
    and display proper images for each movie in</st> <st c="6614">upcoming chapters.</st>
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 DTL `<st c="6420">for</st>` <st c="6423">模板</st> <st c="6432">标签遍历每部电影，并显示电影名称。</st>
    <st c="6499">目前，我们为所有电影显示默认图片；我们将在后续章节中上传并显示每部电影的正确图片。</st>
- en: <st c="6632">Note</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: <st c="6637">We used the Bootstrap card component as a base to design the way
    movies are displayed.</st> <st c="6725">You can find more information</st> <st
    c="6755">here:</st> [<st c="6761">https://getbootstrap.com/docs/5.3/components/card/</st>](https://getbootstrap.com/docs/5.3/components/card/)<st
    c="6811">.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以 Bootstrap 卡片组件为基础来设计电影显示的方式。</st> <st c="6725">您可以在以下链接中找到更多信息：</st> [<st
    c="6761">https://getbootstrap.com/docs/5.3/components/card/</st>](https://getbootstrap.com/docs/5.3/components/card/)<st
    c="6811">。</st>
- en: <st c="6812">Now, save those files, run the</st> <st c="6844">server, and go
    to</st> [<st c="6862">http://localhost:8000/movies</st>](http://localhost:8000/movies)<st
    c="6890">; you should see the new</st> **<st c="6916">List of Movies</st>** <st
    c="6930">page (</st>*<st c="6937">Figure 4</st>**<st c="6946">.2</st>*<st c="6948">).</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6812">现在，保存这些文件，运行</st> <st c="6844">服务器，并访问</st> [<st c="6862">http://localhost:8000/movies</st>](http://localhost:8000/movies)<st
    c="6890">；你应该看到新的</st> **<st c="6916">电影列表</st>** <st c="6930">页面（</st>*<st c="6937">图4</st>**<st
    c="6946">.2</st>*<st c="6948">）。</st>
- en: '![Figure 4.2 – The List of Movies page](img/B22457_04_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图4.2 – 电影列表页面](img/B22457_04_02.jpg)'
- en: <st c="7015">Figure 4.2 – The List of Movies page</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7015">图4.2 – 电影列表页面</st>
- en: <st c="7051">We are able to see the information of all movies together.</st>
    <st c="7111">Now, let’s implement a functionality to list</st> <st c="7156">individual
    movies.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7051">我们现在能够看到所有电影的详细信息。</st> <st c="7111">现在，让我们实现一个列出</st> <st c="7156">单个电影的功能。</st>
- en: <st c="7174">Listing individual movies</st>
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="7174">列出单个电影</st>
- en: '<st c="7200">To list individual</st> <st c="7219">movies, we will follow these
    steps: (i) configuring individual movies URLs, (ii) defining the</st> `<st c="7314">views</st>`
    `<st c="7319">show</st>` <st c="7324">function, (iii) creating a movies</st> `<st
    c="7359">show</st>` <st c="7363">template, and (iv) adding individual movie links
    on the</st> <st c="7420">movies page.</st>'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7200">要列出单个</st> <st c="7219">电影，我们将遵循以下步骤：（i）配置单个电影URL，（ii）定义</st> `<st
    c="7314">views</st>` `<st c="7319">show</st>` <st c="7324">函数，（iii）创建电影</st> `<st
    c="7359">show</st>` <st c="7363">模板，以及（iv）在电影页面上添加单个电影链接。</st>
- en: <st c="7432">Configuring individual movies URLs</st>
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7432">配置单个电影URL
- en: <st c="7467">In</st> `<st c="7471">/movies/urls.py</st>`<st c="7486">, add the
    next path</st> <st c="7505">in bold:</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7467">在</st> `<st c="7471">/movies/urls.py</st>`<st c="7486">中，添加以下加粗路径：</st>
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="7676">This path is a little different from the previously defined paths.</st>
    <st c="7743">The</st> `<st c="7747"><int:id></st>` <st c="7755">part indicates
    that this path expects an integer value to be passed from the URL and that the
    integer value will be</st> <st c="7872">associated with a variable named</st>
    `<st c="7905">id</st>`<st c="7907">, which will be used to identify which movie
    data to show.</st> <st c="7966">For example, if we access</st> `<st c="7992">movies/1</st>`<st
    c="8000">, the application will display the data of the movie with</st> `<st c="8058">id=1</st>`<st
    c="8062">. Finally, that path will execute the</st> `<st c="8100">show</st>` <st
    c="8104">function defined in the</st> `<st c="8129">views</st>` <st c="8134">file.</st>
    <st c="8141">You can learn more about Django URLs</st> <st c="8178">here:</st>
    [<st c="8184">https://docs.djangoproject.com/en/5.0/topics/http/urls/</st>](https://docs.djangoproject.com/en/5.0/topics/http/urls/)<st
    c="8239">.</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7676">此路径与之前定义的路径略有不同。</st> <st c="7743">`<st c="7747"><int:id></st>`
    <st c="7755">部分表示此路径期望从URL传递一个整数值，并且该整数值将与名为</st> `<st c="7905">id</st>`<st c="7907">的变量相关联，该变量将用于标识要显示的电影数据。</st>
    <st c="7966">例如，如果我们访问</st> `<st c="7992">movies/1</st>`<st c="8000">，应用程序将显示</st>
    `<st c="8058">id=1</st>`<st c="8062">的电影数据。</st> 最后，该路径将执行在</st> `<st c="8129">views</st>`
    <st c="8134">文件中定义的</st> `<st c="8100">show</st>` <st c="8104">函数。</st> <st c="8141">您可以在以下位置了解更多关于Django
    URL的信息：</st> [<st c="8184">https://docs.djangoproject.com/en/5.0/topics/http/urls/</st>](https://docs.djangoproject.com/en/5.0/topics/http/urls/)<st
    c="8239">。</st>
- en: <st c="8240">Defining the views show function</st>
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8240">定义视图show函数</st>
- en: <st c="8273">In</st> `<st c="8277">/movies/views.py</st>`<st c="8293">, add
    the</st> <st c="8302">following in bold at the end of</st> <st c="8335">the file:</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8273">在</st> `<st c="8277">/movies/views.py</st>`<st c="8293">中，在文件末尾添加以下加粗内容：</st>
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="8557">Let’s explain the</st> <st c="8576">previous code:</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8557">让我们解释一下</st> <st c="8576">之前的代码：</st>
- en: <st c="8590">We define the</st> `<st c="8605">show</st>` <st c="8609">function.</st>
    <st c="8620">This function takes two parameters:</st> `<st c="8656">request</st>`
    <st c="8663">and</st> `<st c="8668">id</st>` <st c="8670">(</st>`<st c="8672">id</st>`
    <st c="8674">is collected from</st> <st c="8693">the URL).</st>
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8590">我们定义了</st> `<st c="8605">show</st>` <st c="8609">函数。</st> <st c="8620">此函数接受两个参数：</st>
    `<st c="8656">request</st>` <st c="8663">和</st> `<st c="8668">id</st>` <st c="8670">(</st>`<st
    c="8672">id</st>` <st c="8674">是从</st> <st c="8693">URL中收集的。</st>
- en: <st c="8702">Then, we extract the movie data with that ID.</st> <st c="8749">We
    subtract one unit since we stored the movie with</st> `<st c="8801">id=1</st>`
    <st c="8805">in the movies list index</st> `<st c="8831">0</st>`<st c="8832">,
    the movie with</st> `<st c="8849">id=2</st>` <st c="8853">in the movies list index</st>
    `<st c="8879">1</st>`<st c="8880">, and</st> <st c="8886">so on.</st>
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8892">Finally, we pass the</st> <st c="8913">movie name and the individual
    movie to the</st> `<st c="8957">movies/show.html</st>` <st c="8973">template.</st>
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8983">Creating a movies show template</st>
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9015">In</st> `<st c="9019">/movies/templates/movies/</st>`<st c="9044">,
    create a new file,</st> `<st c="9065">show.html</st>`<st c="9074">. For now, fill
    it in with</st> <st c="9101">the</st> <st c="9104">following:</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="9611">The previous code displays</st> <st c="9638">the individual</st>
    <st c="9654">movie information.</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9672">Adding individual movie links on the movies page</st>
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9721">In</st> `<st c="9725">/movies/templates/movies/index.html</st>`<st
    c="9760">, add</st> <st c="9765">the following</st> <st c="9780">in bold:</st>
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="10155">We added a link from each movie name to each individual movie
    page.</st> <st c="10224">We used the</st> `<st c="10236">url</st>` <st c="10239">template
    tag to link to the specified URL pattern name (</st>`<st c="10296">movie.show</st>`<st
    c="10307">).</st> <st c="10311">But we also specified a parameter to</st> <st
    c="10348">be passed to the URL (</st>`<st c="10370">id=movie.id</st>`<st c="10382">).</st>
    <st c="10386">In this case, it’s setting the</st> `<st c="10417">id</st>` <st
    c="10419">parameter to the</st> `<st c="10437">id</st>` <st c="10439">attribute
    of the</st> `<st c="10457">movie</st>` <st c="10462">object.</st> <st c="10471">This
    is useful for URLs that require dynamic parts, such as details for a</st> <st
    c="10545">specific movie.</st>
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10560">Now, save those files, run the server, and go to</st> `<st c="10610">http://localhost:8000/movies</st>`<st
    c="10638">. You will see that each movie name has become a button that can be
    clicked.</st> <st c="10715">Click on a movie name, and you will be redirected
    to the individual movie page (</st>*<st c="10795">Figure 4</st>**<st c="10804">.3</st>*<st
    c="10806">).</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.3 – Individual movie page](img/B22457_04_03.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: <st c="10946">Figure 4.3 – Individual movie page</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10980">We can list all movies and navigate to individual movies; however,
    we haven’t added a link to the movies section.</st> <st c="11095">Let’s implement
    this link in the</st> <st c="11128">next section.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11141">Adding a link in the base template</st>
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="11176">Finally, let’s add the movies link</st> <st c="11211">in the base
    template.</st> <st c="11234">In</st> `<st c="11237">/moviesstore/templates/base.html</st>`<st
    c="11269">, in the header section, add the following</st> <st c="11312">in bold:</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="11567">Now, save those files, run the server, and go to</st> `<st c="11617">http://localhost:8000/movies</st>`<st
    c="11645">. You will see the new</st> **<st c="11668">Movies</st>** <st c="11674">menu
    option in the header (</st>*<st c="11702">Figure 4</st>**<st c="11711">.4</st>*<st
    c="11713">).</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11567">现在，保存这些文件，运行服务器，并访问</st> `<st c="11617">http://localhost:8000/movies</st>`<st
    c="11645">。你将在页眉中看到新的</st> **<st c="11668">电影</st>** <st c="11674">菜单选项（</st>*<st
    c="11702">图4</st>**<st c="11711">.4</st>*<st c="11713">）。</st>
- en: '![Figure 4.4 – Movies page updated](img/B22457_04_04.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图4.4 – 电影页面更新](img/B22457_04_04.jpg)'
- en: <st c="11829">Figure 4.4 – Movies page updated</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11829">图4.4 – 电影页面更新</st>
- en: <st c="11861">Summary</st>
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="11861">摘要</st>
- en: <st c="11869">In this chapter, we recapped how to create a Django app.</st>
    <st c="11927">We created a movies app that allows listing movies and individual
    movies.</st> <st c="12001">We learned how to pass information through the URLs,
    how to create dummy data, how to use the</st> `<st c="12095">for</st>` <st c="12098">template
    tag, and how to link different pages.</st> <st c="12146">We hope this serves as
    a solid foundation to move on to the next part of our project, where we will go
    through more advanced topics such as models to make our</st> <st c="12305">site
    database-driven.</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11869">在本章中，我们回顾了如何创建Django应用程序。</st> <st c="11927">我们创建了一个允许列出电影和单个电影的</st>
    <st c="12001">电影应用程序。</st> <st c="12095">我们学习了如何通过URL传递信息，如何创建虚拟数据，如何使用</st> `<st
    c="12098">for</st>` <st c="12098">模板标签，以及如何链接不同的页面。</st> <st c="12146">我们希望这为我们的项目下一部分的学习打下坚实的基础，在那里我们将探讨更高级的主题，例如模型，以使我们的</st>
    <st c="12305">网站数据库驱动。</st>
