["```py\n <!DOCTYPE html>\n<html lang=\"en\">\n  … … … … … …\n  <body>\n    <h1>Data Analysis … Actual House Price Index (HPI)</h1>\n    <form action=\"{{request.path}}\" method=\"POST\" <st c=\"4221\">enctype=\"multipart/form-data\"</st>>\n        Upload XLSX file: <st c=\"4271\"><input type=\"file\" name=\"data_file\"/></st><br/>\n        <input type=\"submit\" value=\"Upload File\"/>\n    </form>\n  </body><br/> <st c=\"4379\">{%if df_table == None %}</st><st c=\"4403\"><p>No analysis.</p></st><st c=\"4423\">{% else %}</st><st c=\"4434\">{{ table | safe}}</st><st c=\"4452\">{% endif %}</st> </html>\n```", "```py\n from modules.upload import upload_bp\nfrom flask import render_template, request, current_app <st c=\"4695\">from werkzeug.utils import secure_filename</st>\n<st c=\"4737\">from werkzeug.datastructures import FileStorage</st> import os <st c=\"4796\">from pandas import read_excel</st>\n<st c=\"4825\">from exceptions.custom import (NoneFilenameException, InvalidTypeException, MissingFileException,</st> <st c=\"4923\">FileSavingException)</st> @upload_bp.route('/upload/xlsx/analysis', methods = [\"GET\", \"POST\"])\nasync def show_analysis():\n    if request.method == 'GET':\n        df_tbl = None\n    else:\n        uploaded_file:FileStorage = request.files['data_file']\n        filename = secure_filename(uploaded_file.filename) <st c=\"5195\">if filename == '':</st><st c=\"5213\">raise NoneFilenameException()</st> file_ext = os.path.splitext(filename)[1]\n        if file_ext not in current_app.config['UPLOAD_FILE_TYPES']: <st c=\"5345\">raise InvalidTypeException()</st> if  uploaded_file.filename == '' or uploaded_file == None: <st c=\"5432\">raise MissingFileException()</st> try:\n            df_xlsx = read_excel(uploaded_file, sheet_name=2, skiprows=[1])\n            df_tbl = df_xlsx.loc[: , 'Australia':'US'].describe().to_html()\n        except: <st c=\"5602\">raise FileSavingException()</st> return render_template(\"file_upload_pandas_xlsx.html\", table=df_tbl), 200\n```", "```py\n pip install numpy matplotlib\n```", "```py\n pip install pandas\n```", "```py\n pip install openpyxl\n```", "```py\n df_xlsx = read_excel(uploaded_file, sheet_name=2, skiprows=[1])\n```", "```py\n df_tbl = df_xlsx.loc[: , 'Australia':'US'].describe().to_html()\n```", "```py\n from pandas import read_excel <st c=\"17288\">from numpy import arange</st>\n<st c=\"17312\">from matplotlib.figure import Figure</st>\n<st c=\"17349\">from io import BytesIO</st>\n<st c=\"17372\">import base64</st> @upload_bp.route(\"/upload/xlsx/rhpi/plot/belgium\", methods = ['GET', 'POST'])\nasync def upload_xlsx_hpi_belgium_plot():\n    if request.method == 'GET':\n        data = None\n    else:\n        … … … … …\n        try:\n            df_rhpi = read_excel(uploaded_file, sheet_name=2, <st c=\"17618\">usecols='C'</st>, skiprows=[1])\n            array_rhpi = df_rhpi.to_numpy().flatten()\n            array_hpi_index = arange(0, array_rhpi.size ) <st c=\"17733\">fig = Figure(figsize=(6, 6), dpi=72,</st> <st c=\"17769\">edgecolor='r', linewidth=2, facecolor='y')</st><st c=\"17812\">axis = fig.subplots()</st> axis.<st c=\"17840\">plot</st>(array_hpi_index, array_rhpi)\n            axis.<st c=\"17881\">set_xlabel</st>('Quarterly Duration')\n            axis.<st c=\"17921\">set_ylabel</st>('House Price Index')\n            axis.<st c=\"17960\">set_title</st>(\"Belgium's HPI versus RHPI\")\n            … … … … … … <st c=\"18013\">output = BytesIO()</st><st c=\"18031\">fig.savefig(output, format=\"png\")</st><st c=\"18065\">data = base64.b64encode(output.getbuffer())</st> <st c=\"18109\">.decode(\"ascii\")</st> except:\n            raise FileSavingException()\n    return render_template(\"file_upload_xlsx_form.html\", <st c=\"18271\">Figure</st> canvas is now 6 inches x 6 inches in dimension, as managed by its <st c=\"18344\">figsize</st> parameter. By default, a <st c=\"18377\">Figure</st> canvas is 6.4 and 4.8 inches. Also, the borderline has an added 2units in thickness, with an <st c=\"18477\">edgecolor</st> value of ‘<st c=\"18497\">r</st>’, a single character shorthand for color red, and a <st c=\"18552\">facecolor</st> value of ‘<st c=\"18572\">y</st>’ character notation, which means color yellow. *<st c=\"18622\">Figure 6</st>**<st c=\"18630\">.4</st>* shows the outcome of the given details of the canvas:\n\t\t\t![Figure 6.4 – A line graph with a customized Figure instance](img/B19383_06_004.jpg)\n\n\t\t\t<st c=\"18806\">Figure 6.4 – A line graph with a customized Figure instance</st>\n\t\t\t<st c=\"18865\">The next step is to draw up the data values from the</st> `<st c=\"18919\">DataFrame</st>` <st c=\"18928\">object using</st> `<st c=\"18942\">Axes</st>` <st c=\"18946\">or the plot of the</st> `<st c=\"18966\">Figure</st>`<st c=\"18972\">.</st> `<st c=\"18974\">Axes</st>`<st c=\"18978\">, not the x-axis and y-axis, is the area on the</st> `<st c=\"19026\">Figure</st>` <st c=\"19033\">canvas where the visualization will happen.</st> <st c=\"19077\">There are two ways to create an</st> `<st c=\"19109\">Axes</st>` <st c=\"19113\">instance:</st>\n\n\t\t\t\t*   <st c=\"19123\">Using the</st> `<st c=\"19134\">subplots()</st>` <st c=\"19144\">method of</st> <st c=\"19155\">the</st> `<st c=\"19159\">Figure</st>`<st c=\"19165\">.</st>\n\t\t\t\t*   <st c=\"19166\">Using the</st> `<st c=\"19177\">subplots()</st>` <st c=\"19187\">method of the</st> `<st c=\"19202\">matplotlib</st>` <st c=\"19212\">module.</st>\n\n\t\t\t<st c=\"19220\">Since there is already an existing</st> `<st c=\"19256\">Figure</st>` <st c=\"19262\">instance, the former is the appropriate approach to create the plotting area.</st> <st c=\"19341\">The latter returns a tuple containing a new</st> `<st c=\"19385\">Figure</st>` <st c=\"19391\">instance, with</st> `<st c=\"19407\">Axes</st>` <st c=\"19411\">all in with one</st> <st c=\"19428\">method call.</st>\n\t\t\t<st c=\"19440\">Now, an</st> `<st c=\"19449\">Axes</st>` <st c=\"19453\">instance has almost all the necessary utilities for setting up any</st> `<st c=\"19521\">Figure</st>` <st c=\"19527\">component, such as</st> `<st c=\"19547\">plot()</st>`<st c=\"19553\">,</st> `<st c=\"19555\">axis()</st>`<st c=\"19561\">,</st> `<st c=\"19563\">bar()</st>`<st c=\"19568\">,</st> `<st c=\"19570\">pie()</st>`<st c=\"19575\">, and</st> `<st c=\"19581\">tick_params()</st>`<st c=\"19594\">. In the given</st> `<st c=\"19609\">upload_xlsx_hpi_belgium_plot()</st>`<st c=\"19639\">, the goal is to create a Line2D graph of the actual HPI values of Belgium by using the</st> `<st c=\"19727\">plot()</st>` <st c=\"19733\">method.</st> <st c=\"19742\">The extracted DataFrame tabular data focuses only on the</st> `<st c=\"19799\">Belgium</st>` <st c=\"19806\">column (column C), as indicated by the</st> `<st c=\"19846\">usecols</st>` <st c=\"19853\">parameter of the</st> `<st c=\"19871\">read_excel()</st>` <st c=\"19883\">statement:</st>\n\n```", "```py\n @upload_bp.route(\"/upload/xlsx/rhpi/hpi/plot/belgium\", methods = ['GET', 'POST'])\nasync def upload_xlsx_belgium_hpi_rhpi_plot():\n    if request.method == 'GET':\n        data = None\n    else:\n        … … … … … …\n        try: <st c=\"22045\">df_hpi = read_excel(uploaded_file,</st> <st c=\"22079\">sheet_name=1, usecols='C', skiprows=[1])</st><st c=\"22120\">df_rhpi = read_excel(uploaded_file,</st> <st c=\"22156\">sheet_name=2, usecols='C', skiprows=[1])</st><st c=\"22197\">array_hpi = df_hpi.to_numpy().flatten()</st> array_hpi_index = arange(0, df_rhpi.size ) <st c=\"22281\">array_rhpi = df_rhpi.to_numpy().flatten()</st> array_rhpi_index = arange(0, df_rhpi.size )\n            fig = Figure(figsize=(7, 7), dpi=72, edgecolor='#140dde', linewidth=2, facecolor='#b7b6d4')\n            axes = fig.subplots() <st c=\"22481\">lbl1,</st> = axes.plot(array_hpi_index ,array_hpi, color=\"#32a8a2\") <st c=\"22544\">lbl2</st>, = axes.plot(array_rhpi_index ,array_rhpi, color=\"#bf8a26\")\n            axes.set_xlabel('Quarterly Duration')\n            axes.set_ylabel('House Price Index') <st c=\"22684\">axes.legend([lbl1, lbl2], [\"HPI\", \"RHPI\"])</st> axes.set_title(\"Belgium's HPI versus RHPI\")\n            … … … … … …\n        except:\n            raise FileSavingException()\n    return render_template(\"file_upload_xlsx_sheets_form.html\", data=data), 200\n```", "```py\n<st c=\"24713\">from pandas import read_csv</st> @upload_bp.route(\"/upload/csv/pie\", methods = ['GET', 'POST'])\nasync def upload_csv_pie():\n    if request.method == 'GET':\n        data = None\n    else:\n        … … … … … …\n        try: <st c=\"24896\">df_csv = read_csv(uploaded_file)</st><st c=\"24928\">matplotlib.use('agg')</st> fig = plt.figure()\n            axes = fig.add_subplot(1, 1, 1) <st c=\"25002\">explode = (0.1, 0, 0)</st><st c=\"25023\">axes.pie(df_csv.groupby(['FurnishingStatus'])</st><st c=\"25069\">['Price'].count(), colors=['#bfe089', '#ebd05b', '#e67eab'],</st><st c=\"25130\">labels =[\"Furnished\",\"Semi-Furnished\", \"Unfurnished\"], autopct ='% 1.1f %%',</st><st c=\"25207\">shadow = True, startangle = 90,</st> <st c=\"25239\">explode=explode)</st><st c=\"25256\">axes.axis('equal')</st><st c=\"25275\">axes.legend(loc='lower right',fontsize=7,</st> <st c=\"25317\">bbox_to_anchor = (0.75, -01.0) )</st> … … … … … …\n        except:\n            raise FileSavingException()\n    return render_template(\"file_upload_csv_pie_form.html\", data=data), 200\n```", "```py\n @upload_bp.route(\"/upload/xlsx/multi/subplot\", methods = ['GET', 'POST'])\nasync def upload_xlsx_multi_subplots():\n    if request.method == 'GET':\n        data = None\n    else:\n        … … … … … …\n        try:\n            df_xlsx = read_excel(uploaded_file, sheet_name=2, skiprows=[1]) <st c=\"28201\">axes1</st>, creates two line graphs of the actual HPI values of Australia and Belgium for all the quarterly periods, as indicated in the following code block:\n\n```", "```py\n\n\t\t\t<st c=\"28591\">The second plot,</st> `<st c=\"28609\">axes2</st>`<st c=\"28614\">, generates a bar chart depicting the mean HPI values of all countries in the tabular values, as shown in the following</st> <st c=\"28734\">code block:</st>\n\n```", "```py\n\n\t\t\t<st c=\"29038\">The third plot,</st> `<st c=\"29055\">axes3</st>`<st c=\"29060\">, plots all HPI values of each country in the tabular values from 1975 to the current year, creating multiple</st> <st c=\"29170\">line graphs:</st>\n\n```", "```py\n\n\t\t\t<st c=\"29351\">The last</st> <st c=\"29361\">plot,</st> `<st c=\"29367\">axes4</st>`<st c=\"29372\">, builds a</st> <st c=\"29383\">grouped bar chart showing the HPI values of Japan, South Korea, and New Zealand quarterly</st> <st c=\"29473\">in 1975:</st>\n\n```", "```py\n\n\t\t\t<st c=\"29943\">The given</st> `<st c=\"29954\">axes4</st>` <st c=\"29959\">setup uses the</st> `<st c=\"29975\">plot()</st>` <st c=\"29981\">label parameter to assign codes for each bar plot needed by its</st> `<st c=\"30046\">legend()</st>` <st c=\"30054\">method in forming the diagram’s legends.</st> <st c=\"30096\">Running the view function</st> <st c=\"30122\">will</st> <st c=\"30127\">give us the following</st> <st c=\"30149\">multiple graphs:</st>\n\t\t\t![Figure 6.8 – A Figure with multiple plots](img/B19383_06_008.jpg)\n\n\t\t\t<st c=\"30688\">Figure 6.8 – A Figure with multiple plots</st>\n\t\t\t<st c=\"30729\">Flask’s asynchronous components can also support more advanced, informative, and complex mathematical and statistical graphs plotted on a</st> `<st c=\"30868\">Figure</st>` <st c=\"30874\">with the</st> `<st c=\"30884\">seaborn</st>` <st c=\"30891\">module.</st> <st c=\"30900\">Also, it can create regression plots using various regression techniques using the</st> `<st c=\"30983\">statsmodels</st>` <st c=\"30994\">module.</st> <st c=\"31003\">The next topic will highlight the solving of nonlinear and linear equations</st> <st c=\"31079\">with</st> <st c=\"31083\">the</st> `<st c=\"31088\">sympy</st>` <st c=\"31093\">module.</st>\n\t\t\t<st c=\"31101\">Implementing symbolic computation with visualization</st>\n\t\t\t`<st c=\"31682\">matplotlib</st>` <st c=\"31692\">and</st> `<st c=\"31697\">numpy</st>` <st c=\"31702\">modules.</st>\n\t\t\t<st c=\"31711\">For Flask to recognize symbolic expressions and formulas in a string expression, install the</st> `<st c=\"31805\">sympy</st>` <st c=\"31810\">module using the</st> `<st c=\"31828\">pip</st>` <st c=\"31831\">command:</st>\n\n```", "```py\n\n\t\t\t<st c=\"31858\">Then, install the</st> `<st c=\"31877\">mpmath</st>` <st c=\"31883\">module, a prerequisite of the</st> `<st c=\"31914\">sympy</st>` <st c=\"31919\">module:</st>\n\n```", "```py\n\n\t\t\t<st c=\"31946\">After these installations, we can start</st> <st c=\"31987\">problem solving.</st>\n\t\t\t<st c=\"32003\">Solving linear equations</st>\n\t\t\t<st c=\"32028\">Let us begin</st> <st c=\"32042\">with the following asynchronous</st> <st c=\"32074\">route implementation that asks for any linear equation with x and y</st> <st c=\"32142\">variables only:</st>\n\n```", "```py\n\n\t\t\t<st c=\"33136\">Assuming that</st> `<st c=\"33151\">xvar</st>` <st c=\"33155\">and</st> `<st c=\"33160\">yvar</st>` <st c=\"33164\">are valid form parameter values convertible to</st> `<st c=\"33212\">float</st>` <st c=\"33217\">and</st> `<st c=\"33222\">lineqn</st>` <st c=\"33228\">is a valid two-variate string expression with x and y variables, the</st> `<st c=\"33298\">sympify()</st>` <st c=\"33307\">method of the</st> `<st c=\"33322\">sympy</st>` <st c=\"33327\">module can convert</st> `<st c=\"33347\">lineqn</st>` <st c=\"33353\">to a symbolic formula with</st> `<st c=\"33381\">xvar</st>` <st c=\"33385\">and</st> `<st c=\"33390\">yvar</st>` <st c=\"33394\">values assigned to the x and y symbols and compute the solution.</st> <st c=\"33460\">To extract the exact value of the sympification, the resulting symbolic formula has a method such as</st> `<st c=\"33561\">evalf()</st>` <st c=\"33568\">that returns a floating-point value of the solution.</st> <st c=\"33622\">Now, the</st> `<st c=\"33631\">sympify()</st>` <st c=\"33640\">method uses the risky</st> `<st c=\"33663\">eval()</st>` <st c=\"33669\">function, so the mathematical expression, such as</st> `<st c=\"33720\">lineqn</st>`<st c=\"33726\">, requires sanitation by popular validation tools such as</st> `<st c=\"33784\">gladiator</st>` <st c=\"33793\">before performing sympification.</st> *<st c=\"33827\">Figure 6</st>**<st c=\"33835\">.9</st>* <st c=\"33837\">shows a sample execution of</st> `<st c=\"33866\">solve_multivariate_linear()</st>` <st c=\"33893\">with a sample linear equation and the corresponding values for its x</st> <st c=\"33963\">and y:</st>\n\t\t\t![Figure 6.9 – Solving a linear equation with x and y variables](img/B19383_06_009.jpg)\n\n\t\t\t<st c=\"34065\">Figure 6.9 – Solving a linear equation with x and y variables</st>\n\t\t\t<st c=\"34126\">Now, not all</st> <st c=\"34139\">real-world problems are solvable</st> <st c=\"34172\">using linear models.</st> <st c=\"34194\">Some require non-linear models to derive</st> <st c=\"34235\">their solutions.</st>\n\t\t\t<st c=\"34251\">Solving non-linear formulas</st>\n\t\t\t<st c=\"34279\">Flask</st> `<st c=\"34286\">async</st>` <st c=\"34291\">and</st> `<st c=\"34296\">sympy</st>` <st c=\"34301\">can</st> <st c=\"34305\">also implement a</st> <st c=\"34322\">view function for solving non-linear equations.</st> <st c=\"34371\">The</st> `<st c=\"34375\">sympify()</st>` <st c=\"34384\">method can recognize Python mathematical functions such as</st> `<st c=\"34444\">exp(x)</st>`<st c=\"34450\">,</st> `<st c=\"34452\">log(x)</st>`<st c=\"34458\">,</st> `<st c=\"34460\">sqrt(x)</st>`<st c=\"34467\">,</st> `<st c=\"34469\">cos(x)</st>`<st c=\"34475\">,</st> `<st c=\"34477\">sin(x)</st>`<st c=\"34483\">, and</st> `<st c=\"34489\">pow(x)</st>`<st c=\"34495\">. Thus, creating mathematical expressions with the inclusion of these Python functions is feasible with</st> `<st c=\"34599\">sympy</st>`<st c=\"34604\">.</st> *<st c=\"34606\">Figure 6</st>**<st c=\"34614\">.10</st>* <st c=\"34617\">shows a view function that computes a solution of a univariate non-linear equation with</st> <st c=\"34706\">one variable.</st>\n\t\t\t![Figure 6.10 – Solving a non-linear equation with Python functions](img/B19383_06_010.jpg)\n\n\t\t\t<st c=\"34811\">Figure 6.10 – Solving a non-linear equation with Python functions</st>\n\t\t\t<st c=\"34876\">The strength of the</st> `<st c=\"34897\">sympy</st>` <st c=\"34902\">module is to extract the parameter values of an equation or equations</st> <st c=\"34973\">based on a given result</st> <st c=\"34997\">or</st> <st c=\"34999\">solution.</st>\n\t\t\t<st c=\"35009\">Finding solutions for a linear system</st>\n\t\t\t<st c=\"35047\">The</st> `<st c=\"35052\">sympy</st>` <st c=\"35057\">module</st> <st c=\"35065\">has a</st> `<st c=\"35071\">solve()</st>` <st c=\"35078\">method</st> <st c=\"35086\">that can solve systems of linear or polynomial equations.</st> <st c=\"35144\">The following implementation can find a solution for a system of two</st> <st c=\"35213\">polynomial equations:</st>\n\n```", "```py\n\n\t\t\t<st c=\"35936\">After the retrieval from</st> `<st c=\"35962\">request.form</st>` <st c=\"35974\">and a successful validation using</st> `<st c=\"36009\">gladiator</st>`<st c=\"36018\">, the</st> `<st c=\"36024\">polyeqn1</st>` <st c=\"36032\">and</st> `<st c=\"36037\">polyeqn2</st>` <st c=\"36045\">string expressions must undergo sympification</st> <st c=\"36091\">through the</st> `<st c=\"36104\">sympify()</st>` <st c=\"36113\">method</st> <st c=\"36121\">to derive their symbolic equations or</st> `<st c=\"36159\">sympy</st>` <st c=\"36164\">expressions.</st> <st c=\"36178\">The function variables, x and y, of these mathematical expressions must have their corresponding</st> `<st c=\"36275\">Symbol</st>`<st c=\"36281\">-type variables utilizing the</st> `<st c=\"36312\">symbols()</st>` <st c=\"36321\">function of</st> `<st c=\"36334\">sympy</st>`<st c=\"36339\">, a vital mechanism for creating</st> `<st c=\"36372\">Symbol</st>` <st c=\"36378\">variables out of string variables.</st> <st c=\"36414\">The</st> `<st c=\"36418\">solve()</st>` <st c=\"36425\">method requires a tuple of these symbolic equations in its first parameter and a tuple of</st> `<st c=\"36516\">Symbols</st>` <st c=\"36523\">in its second parameter to find the solutions of the linear system.</st> <st c=\"36592\">If the linear equations are not parallel to each other, the</st> `<st c=\"36652\">solve()</st>` <st c=\"36659\">method will return a feasible solution in a dictionary format with</st> `<st c=\"36727\">sympy</st>` <st c=\"36732\">variables</st> <st c=\"36743\">as keys.</st>\n\t\t\t<st c=\"36751\">If we execute</st> `<st c=\"36766\">solve_multiple_eqns()</st>` <st c=\"36787\">with a simple linear system, such as passing the</st> `<st c=\"36837\">5*x-3*y-9</st>` <st c=\"36846\">equation to</st> `<st c=\"36859\">polyeqn1</st>` <st c=\"36867\">and the</st> `<st c=\"36876\">15*x+3*y+12</st>` <st c=\"36887\">equation to</st> `<st c=\"36900\">polyeqn2</st>`<st c=\"36908\">,</st> `<st c=\"36910\">solve()</st>` <st c=\"36917\">will provide us with numerical results, as shown in</st> *<st c=\"36970\">Figure 6</st>**<st c=\"36978\">.11</st>*<st c=\"36981\">.</st>\n\t\t\t![Figure 6.11 – Solving simple linear equations](img/B19383_06_011.jpg)\n\n\t\t\t<st c=\"37122\">Figure 6.11 – Solving simple linear equations</st>\n\t\t\t<st c=\"37167\">However, if we have polynomials or non-linear equations such as passing the</st> `<st c=\"37244\">x**2-10*y+10</st>` <st c=\"37256\">quadratic</st> <st c=\"37267\">formula to</st> `<st c=\"37278\">polyeqn1</st>` <st c=\"37286\">and the</st> `<st c=\"37295\">10*x+5*y-3</st>` <st c=\"37305\">linear expression to</st> `<st c=\"37327\">polyeqn2</st>`<st c=\"37335\">, the resulting non-linear solutions will be rational values with square roots, as shown in</st> *<st c=\"37427\">Figure 6</st>**<st c=\"37435\">.12</st>*<st c=\"37438\">.</st>\n\t\t\t![Figure 6.12 – Solving polynomial system of equations](img/B19383_06_012.jpg)\n\n\t\t\t<st c=\"37623\">Figure 6.12 – Solving polynomial system of equations</st>\n\t\t\t<st c=\"37675\">There are many</st> <st c=\"37691\">possible symbolic computations, formulas, and algorithms that Flask can implement with</st> `<st c=\"37778\">sympy</st>`<st c=\"37783\">. Sometimes, the</st> `<st c=\"37800\">scipy</st>` <st c=\"37805\">module can help</st> `<st c=\"37822\">sympy</st>` <st c=\"37827\">solve other mathematical algorithms that are very</st> <st c=\"37878\">tedious and complicated, such as</st> <st c=\"37911\">approximation problems.</st>\n\t\t\t<st c=\"37934\">The</st> `<st c=\"37939\">sympy</st>` <st c=\"37944\">module is also capable of providing graphical analysis</st> <st c=\"38000\">through plots.</st>\n\t\t\t<st c=\"38014\">Plotting mathematical expressions</st>\n\t\t\t<st c=\"38048\">When it comes</st> <st c=\"38062\">to visualization,</st> `<st c=\"38081\">sympy</st>` <st c=\"38086\">is capable</st> <st c=\"38098\">of rendering graphs and charts created by its built-in</st> `<st c=\"38153\">matplotlib</st>` <st c=\"38163\">library.</st> <st c=\"38173\">The following view function accepts two equations from the user and creates a graphical plot for the equations within the specified range of values</st> <st c=\"38321\">for x:</st>\n\n```", "```py\n\n\t\t\t<st c=\"39523\">After sanitizing the</st> <st c=\"39544\">string equations</st> <st c=\"39562\">and deriving the</st> `<st c=\"39579\">sympy</st>` <st c=\"39584\">formulas, the view can directly create a plot for each formula using the</st> `<st c=\"39658\">plot()</st>` <st c=\"39664\">method in the</st> `<st c=\"39679\">sympy.plotting</st>` <st c=\"39693\">module, which is almost similar to that in the</st> `<st c=\"39741\">matplotlib</st>` <st c=\"39751\">module but within the context of</st> `<st c=\"39785\">sympy</st>`<st c=\"39790\">. The method returns a</st> `<st c=\"39813\">Plot</st>` <st c=\"39817\">instance that can combine with another</st> `<st c=\"39857\">Plot</st>` <st c=\"39861\">using its</st> `<st c=\"39872\">extend()</st>` <st c=\"39880\">method to create multiple plots in one frame.</st> <st c=\"39927\">Running the</st> `<st c=\"39939\">plot_two_equations()</st>` <st c=\"39959\">view will yield line graphs of both</st> `<st c=\"39996\">equation1</st>` <st c=\"40005\">and</st> `<st c=\"40010\">equation2</st>`<st c=\"40019\">, as shown in</st> *<st c=\"40033\">Figure 6</st>**<st c=\"40041\">.13</st>*<st c=\"40044\">.</st>\n\t\t\t![Figure 6.13 – Plotting the two sympy equations](img/B19383_06_013.jpg)\n\n\t\t\t<st c=\"40186\">Figure 6.13 – Plotting the two sympy equations</st>\n\t\t\t<st c=\"40232\">On the other</st> <st c=\"40245\">hand, the</st> `<st c=\"40256\">Plot</st>` <st c=\"40260\">instance</st> <st c=\"40269\">has a</st> `<st c=\"40276\">save()</st>` <st c=\"40282\">method that can store the graphical plot as an image.</st> <st c=\"40337\">However, to create an inline image for a Jinja2 rendition, the view needs the</st> `<st c=\"40415\">Image</st>` <st c=\"40420\">class from</st> `<st c=\"40519\">BytesIO</st>` <st c=\"40526\">for</st> `<st c=\"40531\">base64</st>` <st c=\"40537\">encoding.</st>\n\t\t\t<st c=\"40547\">Let us examine now how asynchronous Flask can manage those scientific data that need LaTeX serialization or</st> <st c=\"40656\">PDF renditions.</st>\n\t\t\t<st c=\"40671\">Creating and rendering LaTeX documents</st>\n\t\t\t**<st c=\"40710\">LaTex</st>** <st c=\"40716\">is a high-standard</st> <st c=\"40735\">typesetting system used in publishing and packaging technical and scientific papers and literature, especially those documents with charts, graphs, equations, and tabular data.</st> <st c=\"40913\">When creating scientific applications, there should be a mechanism for the application to write LaTeX content, save it in a repository, and render it as</st> <st c=\"41066\">a response.</st>\n\t\t\t<st c=\"41077\">But first, our applications will require a LaTeX compiler that assembles and compiles newly created LaTeX documents.</st> <st c=\"41195\">Here are two popular tools that offer various</st> <st c=\"41241\">LaTeX compilers:</st>\n\n\t\t\t\t*   **<st c=\"41257\">TeX Live</st>**<st c=\"41266\">: This is an open-source</st> <st c=\"41292\">LaTeX tool most suitable for creating secured</st> <st c=\"41338\">LaTeX documents.</st>\n\t\t\t\t*   **<st c=\"41354\">MikTeX</st>**<st c=\"41361\">: This is an open-source LaTeX tool popular for its on-the-fly libraries and</st> <st c=\"41439\">up-to-date releases.</st>\n\n\t\t\t<st c=\"41459\">Our application will be utilizing MikTeX for its LaTeX compilers.</st> <st c=\"41526\">Do not forget to update MikTex for the latest plugins using the console, as shown in</st> *<st c=\"41611\">Figure 6</st>**<st c=\"41619\">.14</st>*<st c=\"41622\">.</st>\n\t\t\t![Figure 6.14 – Updating MikTeX using its console](img/B19383_06_014.jpg)\n\n\t\t\t<st c=\"41943\">Figure 6.14 – Updating MikTeX using its console</st>\n\t\t\t<st c=\"41990\">After the MikTeX installation and update, let’s create the Flask project by installing the</st> `<st c=\"42082\">latex</st>` <st c=\"42087\">module.</st>\n\t\t\t<st c=\"42095\">Rendering LaTeX documents</st>\n\t\t\t<st c=\"42121\">Asynchronous</st> <st c=\"42134\">view functions can create, update, and render LaTeX documents through LaTeX-related modules and</st> `<st c=\"42231\">matplotlib</st>` <st c=\"42241\">for immediate textual and graphical plots or perform LaTeX to PDF transformation of existing LaTeX documents for rendition.</st> <st c=\"42366\">The latter requires the installation of the</st> `<st c=\"42410\">latex</st>` <st c=\"42415\">module through the</st> `<st c=\"42435\">pip</st>` <st c=\"42438\">command:</st>\n\n```", "```py\n\n\t\t\t<st c=\"42465\">The</st> `<st c=\"42470\">latex</st>` <st c=\"42475\">module uses its built-in Jinja libraries to access</st> `<st c=\"42527\">latex</st>` <st c=\"42532\">files stored in the main project.</st> <st c=\"42567\">So, the first step is to create a Jinja environment with all the details that will calibrate the Jinja engine regarding LaTeX file handling.</st> <st c=\"42708\">The following snippet shows how to set up the Jinja environment using the</st> `<st c=\"42782\">latex.jinja2</st>` <st c=\"42794\">module:</st>\n\n```", "```py\n\n\t\t\t<st c=\"43239\">Since</st> `<st c=\"43246\">ch06-project</st>` <st c=\"43258\">uses</st> `<st c=\"43264\">Blueprint</st>` <st c=\"43273\">to organize the views and the corresponding components, only the rendition module (</st>`<st c=\"43357\">/modules/rendition</st>`<st c=\"43376\">) that builds the LaTeX web displays can access this environment configuration.</st> <st c=\"43457\">This Jinja environment details, defined in</st> `<st c=\"43500\">/modules/rendition/__init__.py</st>`<st c=\"43530\">, declares that the</st> `<st c=\"43550\">files</st>` <st c=\"43555\">folder in the project directory will become the root folder for our LaTeX documents.</st> <st c=\"43641\">Moreover, it tells Jinja the syntax preferences for some LaTeX commands, such as the</st> `<st c=\"43726\">BLOCK</st>`<st c=\"43731\">,</st> `<st c=\"43733\">VAR</st>`<st c=\"43736\">, conditional statement, and comment symbols.</st> <st c=\"43782\">Instead of having a backslash pipe (</st>`<st c=\"43818\">\"\\\"</st>`<st c=\"43822\">) in</st> `<st c=\"43828\">\\VAR{}</st>`<st c=\"43834\">, the setup wants Jinja to recognize the</st> `<st c=\"43875\">VAR{}</st>` <st c=\"43880\">statement, an interpolation operator, without the backslash pipe.</st> <st c=\"43947\">Violating the given syntax rules will flag an error in Flask.</st> <st c=\"44009\">The</st> `<st c=\"44013\">enable_async</st>` <st c=\"44025\">property, on the other hand, allows the execution of</st> `<st c=\"44079\">latex</st>` <st c=\"44084\">commands in asynchronous view functions, such as the following</st> <st c=\"44147\">view implementation that opens a document and updates it</st> <st c=\"44205\">for display:</st>\n\n```", "```py\n<st c=\"46696\">from pylatex import Document, Section, Command, NoEscape, Subsection, Tabular, Center</st>\n<st c=\"46782\">from pylatex.utils import italic</st>\n<st c=\"46815\">from pylatex.basic import NewLine</st> @rendition_bp.route('/create/hpi/desc/latex', methods = ['GET', 'POST'])\nasync def create_latex_pdf():\n    if request.method == 'GET':\n         return render_template(\"hpi_latex_form.html\"), 200\n    else:\n        … … … … … …\n        … … … … … …\n        try:\n            df = read_excel(uploaded_file, sheet_name=2, skiprows=[1])\n            hpi_data = df.loc[: , 'Australia':'US'].describe().to_dict()\n            hpi_filename = os.path.join('./files/latex','hpi_analysis')\n```", "```py\n pip install pylatex\n```", "```py\n geometry_options = {\n                \"landscape\": True,\n                \"margin\": \"0.5in\",\n                \"headheight\": \"20pt\",\n                \"headsep\": \"10pt\",\n                \"includeheadfoot\": True\n            }\n            doc = Document(page_numbers=True, <st c=\"47748\">geometry_options=geometry_options</st>, <st c=\"47783\">document_options=['10pt','legalpaper']</st>)\n            doc.preamble.append(Command('title', 'Mean HPI per Country'))\n            doc.preamble.append(Command('author', 'Sherwin John C. Tragura'))\n            doc.preamble.append(Command('date', NoEscape(r'\\today')))\n            doc.append(NoEscape(r'\\maketitle'))\n```", "```py\n with doc.create(Section('The Data Analysis')):\n              doc.append('Here are the statistical analysis derived from the uploaded excel data.')\n```", "```py\n with doc.create(Subsection('Statistical analysis generated by Pandas')):\n                    with doc.create(Tabular('| c | c | c | c | c | c | c | c | c |')) as table:\n                        table.add_hline()\n                        table.add_row((\"Country\", \"Count\", \"Mean\", \"Std Dev\", \"Min\", \"25%\", \"50%\", \"75%\", \"Max\"))\n                        table.add_empty_row()\n                        for key, value in hpi_data.items():\n                            table.add_hline()\n                            table.add_row((key, value['count'], value['mean'], value['std'], value['min'], value['25%'], value['50%'], value['75%'], value['max']))\n                        table.add_empty_row()\n                        table.add_hline()\n        except:\n            raise FileSavingException()\n```", "```py\n doc.generate_pdf(hpi_filename, clean_tex=False, compiler=\"pdflatex\")\n        return send_from_directory('./files/latex', 'hpi_analysis.pdf')\n```", "```py\n <!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  … … … … … …\n  … … … … … … <st c=\"53508\"><script src='https://cdn.jsdelivr.net/npm/chart.js'></script></st> </head>\n<body>\n    <h1>{{ title }}</h1>\n    <form action=\"{{request.path}}\" method=\"POST\" enctype=\"multipart/form-data\">\n      Upload XLSX file:\n      <input type=\"file\" name=\"data_file\"/><br/>\n      <input type=\"submit\" value=\"Upload File\"/>\n  </form><br/> <st c=\"53800\"><canvas id=\"linechart\" width=\"300\" height=\"100\"></canvas></st> </body>\n<script> <st c=\"53875\">var linechart = document.getElementById(\"linechart\");</st><st c=\"53928\">Chart.defaults.font.family = \"Courier\";</st><st c=\"53968\">Chart.defaults.font.size = 14;</st><st c=\"53999\">Chart.defaults.color = \"black\";</st>\n```", "```py\n new Chart(linechart,{ <st c=\"54776\">type: 'line',</st><st c=\"54789\">options:</st> { <st c=\"54801\">scales:</st> { <st c=\"54811\">y</st>: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: 'Mean HPI'\n              }\n            }, <st c=\"54881\">x</st>: {\n              offset: true,\n              title: {\n                display: true,\n                text: 'Countries with HPI'\n              }\n            }\n          }\n      }, <st c=\"54960\">data</st>: {\n          borderWidth: ,\n          labels : [\n            {% for item in labels %}\n              \"{{ item }}\",\n            {% endfor %}\n          ],\n```", "```py\n datasets: [{\n              fill : true,\n              barPercentage: 0.5,\n              barThickness: 20,\n              maxBarThickness: 70,\n              borderWidth : 1,\n              minBarLength: 5,\n              backgroundColor: \"rgba(230,112,16,0.88)\",\n              borderColor : \"rgba(38,22,6,0.88)\",\n              label: 'Mean HPI values',\n              data : [\n                {% for item in values %}\n                  \"{{ item }}\",\n                  {% endfor %}\n              ]\n            }]\n        }\n      });\n</script>\n</html>\n```", "```py\n pip install plotly\n```", "```py\n import json <st c=\"57230\">import plotly</st>\n<st c=\"57243\">import plotly.express as px</st> @rendition_bp.route(\"/plotly/csv/bedprice\", methods = ['GET', 'POST'])\nasync def create_plotly_stacked_bar():\n    if request.method == 'GET':\n        graphJSON = '{}'\n    else:\n        … … … … … …\n        try:\n            df_csv = read_csv(uploaded_file) <st c=\"57483\">fig = px.bar(df_csv, x='Bedrooms', y='Price',</st> <st c=\"57528\">color='FurnishingStatus', barmode='group')</st><st c=\"57571\">graphJSON = json.dumps(fig,</st> <st c=\"57599\">cls=plotly.utils.PlotlyJSONEncoder)</st> except:\n            raise FileSavingException()\n    return render_template('plotly.html', <st c=\"57813\">plotly.express</st> module, which provides several plotting utilities that can set up build graphs with DataFrame as input, similar to <st c=\"57943\">matplotlib</st>’s methods. In the given <st c=\"57979\">create_plotly_stacked_bar()</st> view function, the goal is to create a grouped bar chart using the <st c=\"58074\">bar()</st> method from the <st c=\"58096\">plotly.express</st> module with the <st c=\"58127\">DataFrame</st> object’s tabular values derived from the uploaded CSV file. The result is a <st c=\"58213\">Figure</st> in dictionary form containing the details of the desired plot.\n\t\t\t<st c=\"58282\">After creating the</st> `<st c=\"58302\">Figure</st>`<st c=\"58308\">, the view function will pass the resulting dictionary to the Jinja2 template</st> <st c=\"58385\">for</st> <st c=\"58390\">rendition and display using Plotly’s JS library.</st> <st c=\"58439\">However, JS can only understand the dictionary details if they are in JSON string format.</st> <st c=\"58529\">Thus, use the</st> `<st c=\"58543\">json.dumps()</st>` <st c=\"58555\">method to convert the dictionary</st> `<st c=\"58589\">fig</st>` <st c=\"58592\">to string.</st>\n\t\t\t<st c=\"58603\">The following is the Jinja template that will render the graph using the Plotly</st> <st c=\"58684\">JS library:</st>\n\n```", "```py\n\n\t\t\t<st c=\"59082\">The HTML script must reference the latest Plotly library from CDN.</st> <st c=\"59150\">Then, a JS script must interpolate the JSON-formatted</st> `<st c=\"59204\">Figure</st>` <st c=\"59210\">from the view function with a safe filter to spare it from HTML escaping.</st> <st c=\"59285\">Also, the JS must apply the</st> `<st c=\"59313\">plot()</st>` <st c=\"59319\">method of the</st> `<st c=\"59334\">Plotly</st>` <st c=\"59340\">class library</st> <st c=\"59354\">to</st> <st c=\"59357\">render the figure through the HTML’s</st> `<st c=\"59395\"><div></st>` <st c=\"59400\">component.</st> *<st c=\"59412\">Figure 6</st>**<st c=\"59420\">.18</st>* <st c=\"59423\">shows the bar graph generated by the</st> `<st c=\"59461\">create_plotly_stacked_bar()</st>` <st c=\"59488\">view function and displayed by its</st> <st c=\"59524\">Jinja template.</st>\n\t\t\t![Figure 6.18 – A bar graph created by Plotly](img/B19383_06_018.jpg)\n\n\t\t\t<st c=\"59767\">Figure 6.18 – A bar graph created by Plotly</st>\n\t\t\t<st c=\"59810\">Like Chart.js, the chart provides information regarding a data plot when hovered by the mouse.</st> <st c=\"59906\">However, it seems that Chart.js loads faster than Plotly when the data size of the</st> `<st c=\"59989\">DataFrame</st>` <st c=\"59998\">object’s tabular values increases.</st> <st c=\"60034\">Also, there is limited support for colors for the background, foreground, and</st> <st c=\"60112\">bar shades, so it is hard to</st> <st c=\"60141\">construct a more</st> <st c=\"60158\">original theme.</st>\n\t\t\t<st c=\"60173\">The next JS library supports many popular PyData tools and can generate plots directly from</st> `<st c=\"60266\">pandas'</st>` `<st c=\"60273\">DataFrame</st>`<st c=\"60283\">,</st> **<st c=\"60285\">Bokeh</st>**<st c=\"60290\">.</st>\n\t\t\t<st c=\"60291\">Visualizing data using Bokeh</st>\n\t\t\t<st c=\"60320\">Bokeh and</st> <st c=\"60331\">Plotly are similar in many ways.</st> <st c=\"60364\">They</st> <st c=\"60369\">have interactive and 3D graphing features, and both need module installation.</st> <st c=\"60447\">However, Bokeh is more Pythonic than Plotly.</st> <st c=\"60492\">Because of that, it can transact more with DataFrame objects, especially those with</st> <st c=\"60576\">large datasets.</st>\n\t\t\t<st c=\"60591\">To utilize the library, first install its module using the</st> `<st c=\"60651\">pip</st>` <st c=\"60654\">command:</st>\n\n```", "```py\n\n\t\t\t<st c=\"60681\">Once installed, the module provides a figure class from its</st> `<st c=\"60742\">bokeh.plotting</st>` <st c=\"60756\">module, which is responsible for setting up the plot configuration.</st> <st c=\"60825\">The following view implementation uses Bokeh to create a line graph showing the UK’s HPI values through</st> <st c=\"60929\">the years:</st>\n\n```", "```py\n\n\t\t\t<st c=\"61661\">After creating the</st> `<st c=\"61681\">Figure</st>` <st c=\"61687\">instance with the plot details, such as</st> `<st c=\"61728\">max_width</st>`<st c=\"61737\">,</st> `<st c=\"61739\">max_height</st>`<st c=\"61749\">,</st> `<st c=\"61751\">background_fill_color</st>`<st c=\"61772\">,</st> `<st c=\"61774\">x_axis_label</st>`<st c=\"61786\">,</st> `<st c=\"61788\">y_axis_label</st>`<st c=\"61800\">, and other</st> <st c=\"61812\">related</st> <st c=\"61820\">configurations, the view function can now invoke any of its</st> *<st c=\"61880\">glyph</st>* <st c=\"61885\">or plotting methods, such as</st> `<st c=\"61915\">vbar()</st>` <st c=\"61921\">for plotting vertical bar graph,</st> `<st c=\"61955\">hbar()</st>` <st c=\"61961\">for horizontal bar graph,</st> `<st c=\"61988\">scatter()</st>` <st c=\"61997\">for scatter plots, and</st> `<st c=\"62021\">wedge()</st>` <st c=\"62028\">for pie charts.</st> <st c=\"62045\">The given</st> `<st c=\"62055\">create_bokeh_line()</st>` <st c=\"62074\">view utilizes the</st> `<st c=\"62093\">line()</st>` <st c=\"62099\">method to build a line graph with x and y values derived from the</st> <st c=\"62166\">tabular values.</st>\n\t\t\t<st c=\"62181\">After assembling the</st> `<st c=\"62203\">Figure</st>` <st c=\"62209\">and its plot, call the</st> `<st c=\"62233\">components()</st>` <st c=\"62245\">function from</st> `<st c=\"62260\">bokeh.embed</st>` <st c=\"62271\">to wrap the plot instance and extract a tuple of two HTML embeddable components, namely the script that will contain the data of the graph and the</st> `<st c=\"62419\">div</st>` <st c=\"62423\">component that contains the dashboard embedded in a</st> `<st c=\"62475\"><div></st>` <st c=\"62480\">tag.</st> <st c=\"62486\">The function must pass these two components to its Jinja template for rendition.</st> <st c=\"62567\">The following is the Jinja template that will render the</st> `<st c=\"62624\">div</st>` <st c=\"62627\">component:</st>\n\n```", "```py\n\n\t\t\t<st c=\"62964\">Be sure to have the</st> <st c=\"62985\">latest</st> <st c=\"62992\">Bokeh JS library in your HTML script.</st> <st c=\"63030\">Since both</st> `<st c=\"63041\">div</st>` <st c=\"63044\">and</st> `<st c=\"63049\">script</st>` <st c=\"63055\">are HTML-embeddable components, the template will directly interpolate them with the filter safe.</st> *<st c=\"63154\">Figure 6</st>**<st c=\"63162\">.19</st>* <st c=\"63165\">shows the outcome of rendering the</st> `<st c=\"63201\">create_bokeh_line()</st>` <st c=\"63220\">view function using</st> <st c=\"63241\">the datasets:</st>\n\t\t\t![Figure 6.19 – A line graph created by Bokeh](img/B19383_06_019.jpg)\n\n\t\t\t<st c=\"63439\">Figure 6.19 – A line graph created by Bokeh</st>\n\t\t\t<st c=\"63482\">Compared to that</st> <st c=\"63500\">of</st> <st c=\"63502\">Plotly and Chart.js, the dashboard of Bokeh is so interactive that you can drag the plot in any direction within the canvas.</st> <st c=\"63628\">It offers menu options to save, reset, and wheel- or box-zoom the graph.</st> <st c=\"63701\">The only problem with Bokeh is its lack of flexibility when going out of the box for more interactive features.</st> <st c=\"63813\">But generally, Bokeh has enough utilities and themes to build powerful</st> <st c=\"63884\">embeddable graphs.</st>\n\t\t\t<st c=\"63902\">From the degree of interactivity of the graphs and charts, let us shift our discussions to building real-time visualization approaches</st> <st c=\"64038\">with Flask.</st>\n\t\t\t<st c=\"64049\">Building real-time data plots using WebSocket and SSE</st>\n\t\t\t<st c=\"64103\">Flask’s WebSocket</st> <st c=\"64121\">and SSE, discussed</st> <st c=\"64140\">in</st> [*<st c=\"64144\">Chapter 5</st>*](B19383_05.xhtml#_idTextAnchor111)<st c=\"64153\">, are effective mechanisms</st> <st c=\"64180\">for implementing real-time</st> <st c=\"64206\">graphical plots.</st> <st c=\"64224\">Although other third-party modules can provide Flask with real-time capabilities, these two are still the safest, most flexible, and standard techniques because they are</st> <st c=\"64394\">web components.</st>\n\t\t\t<st c=\"64409\">Let us start with applying WebSocket for</st> <st c=\"64451\">real-time charts.</st>\n\t\t\t<st c=\"64468\">Utilizing the WebSocket</st>\n\t\t\t<st c=\"64492\">An application</st> <st c=\"64508\">can have a WebSocket server that receives data from a form and sends it for plotting to a frontend visualization library.</st> <st c=\"64630\">The following</st> `<st c=\"64644\">flask-sock</st>` <st c=\"64654\">WebSocket server immediately sends all the data it receives from a form page to the Chart.js script for</st> <st c=\"64759\">data plotting:</st>\n\n```", "```py\n\n\t\t\t<st c=\"65094\">The Chart.js script will receive the JSON data as a WebSocket message, scrutinize it, and push it immediately as new labels and dataset values.</st> <st c=\"65239\">The following snippet shows the frontend script that manages the WebSocket communication with the</st> `<st c=\"65337\">flask-sock</st>` <st c=\"65347\">server:</st>\n\n```", "```py\n\n\t\t\t<st c=\"65733\">The real-time line chart update occurs at every form submission of the new HPI and date values to the</st> <st c=\"65835\">WebSocket server.</st>\n\t\t\t<st c=\"65853\">Next, let’s see how we can use SSE with Redis as the</st> <st c=\"65907\">broker storage.</st>\n\t\t\t<st c=\"65922\">Using SSE</st>\n\t\t\t<st c=\"65932\">If WebSocket does</st> <st c=\"65950\">not fit the requirement, SSE can be a possible solution to real-time data plotting.</st> <st c=\"66035\">But first, it requires the installation of the Redis database server and the</st> `<st c=\"66112\">redis-py</st>` <st c=\"66120\">module and the creation of the</st> `<st c=\"66152\">redis-config.py</st>` <st c=\"66167\">file for the</st> `<st c=\"66181\">Blueprint</st>` <st c=\"66190\">approach.</st> <st c=\"66201\">The following code shows the configuration of the Redis client instance in</st> <st c=\"66276\">our application:</st>\n\n```", "```py\n\n\t\t\t<st c=\"66397\">Place this</st> `<st c=\"66409\">redis-config.py</st>` <st c=\"66424\">file in the project directory</st> <st c=\"66455\">with</st> `<st c=\"66460\">main.py</st>`<st c=\"66467\">.</st>\n\t\t\t<st c=\"66468\">Now, the role of the Redis server is to create a channel where a view function can push the submitted form data containing the data values.</st> <st c=\"66609\">The SSE implementation will subscribe to the message channel, listen to incoming messages, retrieve the recently published message, and yield the JSON data to the frontend plotting library.</st> <st c=\"66799\">Our application still uses Chart.js for visualization, and here is a snippet that listens to the event stream for</st> <st c=\"66912\">new data plots in</st> <st c=\"66931\">JSON format:</st>\n\n```", "```py\n\n\t\t\t<st c=\"67291\">Like the WebSocket approach, the given frontend script will listen to the stream, receive the JSON data, and validate it before pushing it to the current labels</st> <st c=\"67453\">and datasets.</st>\n\t\t\t<st c=\"67466\">Overall, WebSockets and SSE are not limited to web messaging because they can help establish real-time visualization components for many scientific applications to help solve problems that require</st> <st c=\"67664\">impromptu analysis.</st>\n\t\t\t<st c=\"67683\">Let us now focus on</st> <st c=\"67703\">how Flask can implement computations that consume more server resources and effort and even create higher contention with</st> <st c=\"67826\">other components.</st>\n\t\t\t<st c=\"67843\">Using asynchronous background tasks for resource-intensive computations</st>\n\t\t\t<st c=\"67915\">There are</st> <st c=\"67926\">implementations</st> <st c=\"67941\">of many approximation algorithms and P-complete problems that can create memory-related issues, thread problems, or even memory leaks.</st> <st c=\"68077\">To avoid imminent problems when handling solutions for NP-hard problems with indefinite data sets, implement the solutions using asynchronous</st> <st c=\"68219\">background tasks.</st>\n\t\t\t<st c=\"68236\">But first, install the</st> `<st c=\"68260\">celery</st>` <st c=\"68266\">client using the</st> `<st c=\"68284\">pip</st>` <st c=\"68287\">command:</st>\n\n```", "```py\n\n\t\t\t<st c=\"68315\">Also, install the Redis database server for its broker.</st> <st c=\"68372\">Place</st> `<st c=\"68378\">celery_config.py</st>`<st c=\"68394\">, which contains</st> `<st c=\"68411\">celery_init_app()</st>`<st c=\"68428\">, in the project directory and call the method in the</st> `<st c=\"68482\">main.py</st>` <st c=\"68489\">module.</st>\n\t\t\t<st c=\"68497\">After the setup and installations, create a service package in the</st> `<st c=\"68565\">Blueprint</st>` <st c=\"68574\">module folder.</st> `<st c=\"68590\">ch06-project</st>` <st c=\"68602\">has the following Celery task in the</st> `<st c=\"68640\">hpi_formula.py</st>` <st c=\"68654\">service module found in the</st> `<st c=\"68683\">internal</st>` <st c=\"68691\">Blueprint module:</st>\n\n```", "```py\n     Pkg.generate(\"Ch06JuliaPkg\")\n    ```", "```py\n     Pkg.add(\"PythonCall\")\n    ```", "```py\n pip install juliacall\n```", "```py\n module Ch06JuliaPkg <st c=\"73335\">using PythonCall</st>\n<st c=\"73351\">const re = PythonCall.pynew()</st> # import re <st c=\"73394\">const np = PythonCall.pynew()</st> # import numpy\nfunction __init__() <st c=\"73459\">PythonCall.pycopy!(re, pyimport(\"re\"))</st><st c=\"73497\">PythonCall.pycopy!(re, pyimport(\"numpy\"))</st> end <st c=\"73544\">function sum_array(data_list)</st><st c=\"73573\">total = 0</st><st c=\"73583\">for n in eachindex(data_list)</st><st c=\"73613\">total = total + data_list[n]</st><st c=\"73642\">end</st><st c=\"73646\">return total</st> end\nexport sum_array\nend # module Ch06JuliaPkg\n```", "```py\n import juliacall\nfrom juliacall import Pkg as jlPkg\njlPkg.activate(\".\\\\Ch06JuliaPkg\")\njl = juliacall.newmodule(\"modules.external.services\")\njl.seval(\"using Pkg\")\njl.seval(\"Pkg.instantiate()\")\njl.seval(\"using Ch06JuliaPkg\")\njl.seval(\"using DataFrames\")\njl.seval(\"using PythonCall\")\n```", "```py\n async def total_array(arrdata): <st c=\"76088\">result = jl.seval(f\"sum_array({arrdata})\")</st> return result\n```", "```py\n\n```", "```py\n\n```", "```py\n\n```"]