- en: Detecting Edges and Contours in Images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter presents the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Loading, displaying, and saving images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image flipping and scaling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Erosion and dilation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image segmentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Blurring and sharpening images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting edges in images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram equalization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detecting corners in images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image processing plays a vital role in almost all engineering and medical applications
    to extract and evaluate the region of interest from gray/color images. Image processing
    methods include pre-processing, feature extraction, and classification. Pre-processing
    is used to enhance the quality of the image; this includes adaptive thresholding,
    contrast enhancement, histogram equalization, and edge detection. Feature extraction
    techniques are used to extract prominent features from images that can later be
    used for classification.
  prefs: []
  type: TYPE_NORMAL
- en: The procedures to build an image pre-processing scheme are presented in the
    recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Loading, displaying, and saving images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section presents how to work on images by means of OpenCV-Python. Furthermore,
    we discuss how to load, display, and save images.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the image using the built-in `imread` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the original image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Save the image using the built-in `imwrite` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the Python program `Load_Display_Save.py` is shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/3d39218f-0be9-4432-b023-3d2a975fe4d0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The result obtained after executing `Load_Display_Save.py` is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/df40378a-72f0-4b23-af7b-c03bd6a03384.png)'
  prefs: []
  type: TYPE_IMG
- en: Image flipping
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the image flipping operation, we can flip the input images horizontally,
    vertically, horizontal, and vertically.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the image using the built-in `imread` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the original image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform the required operation on the test image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the horizontally flipped image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Perform vertical flipping of input image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the vertically flipped image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the processed image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the execution and display the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `Flipping.py` Python program is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/48322718-29c2-48f6-9cb5-669d2902257e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The original and horizontally flipped images obtained after executing `Flipping.py`
    are shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4862ac76-a1a0-4494-a16c-7fc30c0408c3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following is the horizontally flipped picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ee92b0e-5304-42ff-9542-8ddb36d277eb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Vertically, and horizontally and vertically, flipped images obtained after
    executing `Flipping.py` are shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/108023cf-2613-49af-96da-c6805dfcaef4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following horizontally and vertically flipped picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/d9fe5bd4-a7de-40c1-a561-3fca02cc5da3.png)'
  prefs: []
  type: TYPE_IMG
- en: Image scaling
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Image scaling is used to modify the dimensions of the input image based on requirements.
    Three types of scaling operators are commonly used in OpenCV, and they are cubic,
    area, and linear interpolations.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a new Python file and import the following packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the image using the built-in `imread` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the original image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Adjust the image size based on the operator''s command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Adjust the image size using cubic interpolation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the output image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Adjust the image size using area interpolation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the output image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the instruction from the operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Adjust the image size using linear interpolation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the output image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'After completing the image scaling task, terminate the program execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `Scaling.py` Python program is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/dc0b3c29-c336-407d-a64e-a19574405b9e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The original image used for scaling is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f131cc0-07d0-4fb3-8da0-529dfe0142c0.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Linear interpolated output obtained after executing the `Scaling.py` file is
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/47ad007d-24fe-4cd6-aa43-2aa2b8cdef42.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The area-interpolated output obtained after executing the `Scaling.py` file
    is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/2e2e48f4-2cf3-4dae-8e73-a20ee6bd4cbf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The cubic-interpolated output obtained after executing the `Scaling.py` file
    is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/8d280736-230d-4845-ab6d-b355b72458f6.png)'
  prefs: []
  type: TYPE_IMG
- en: Erosion and dilation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Erosion and dilation are morphological operations. Erosion removes pixels at
    the boundaries of objects in an image and dilation adds pixels to the boundaries
    of objects in an image.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package – `cv2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Import the numerical Python package – `numpy as np`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the image using the built-in `imread` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the original image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Given shape and type, fill it with ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`cv2.erode` is the built-in function used for erosion:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the image after erosion using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`cv2.dilate` is the built-in function used for dilation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the image after dilation using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Close all windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `Erosion_Dilation.py` file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d3cdbe8d-73a7-429c-8b79-0e4d5c346e60.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute the `Erosion_Dilation.py` file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/37197915-ef15-4ca8-9b11-7c349c02f6cf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The eroded image obtained after executing the `Erosion_Dilation.py` file is
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d05d9b14-1081-412a-9586-98ebcb87189f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The dilated image obtained after executing the `Erosion_Dilation.py` file is
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f2633fde-b795-4165-8041-41281564fa02.png)'
  prefs: []
  type: TYPE_IMG
- en: Image segmentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Segmentation is a process of partitioning images into different regions. Contours
    are lines or curves around the boundary of an object. Image segmentation using
    contours is discussed in this section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the image using the built-in `imread` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the original image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the `Canny` edge detection system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the edge detected output image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the contour detection system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Sketch the contour on the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Show the sketched contour of the image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminate the program and display the result:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The result obtained after executing the `Image_Segmentation.py` file is shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5e6ca6b7-08fd-4788-93ae-6efc83f74f29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following is the edge detection output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ad5d8a16-5971-45fc-84a4-77cf67a04e67.png)'
  prefs: []
  type: TYPE_IMG
- en: Blurring and sharpening images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Blurring and sharpening are image processing operations used to enhance the
    input images.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the Computer Vision package - `cv2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the image using the built-in `imread` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the original image using the built-in `imshow` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the pixel level action with the blurring operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the blurred image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Execute the pixel level action with the sharpening operation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the sharpened image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait until any key is pressed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Terminate the program execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `Blurring_Sharpening.py` Python program file
    is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/502c4776-5ed8-41e0-b2bb-5d56f181712d.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute the `Blurring_Sharpening.py` file is shown
    here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0057cfaf-3a06-40f3-b58d-dabbe5e5ee1c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The blurred image obtained after executing the `Blurring_Sharpening.py` file
    is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4c91b06a-f9f4-4cae-99ab-924e43508ce4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The sharpened image obtained after executing the `Blurring_Sharpening.py` file
    is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e909cf91-2856-453f-857c-3a2843c15f84.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting edges in images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Edge detection is used to detect the borders in images. It provides the details
    regarding the shape and the region properties. This includes perimeter, major
    axis size, and minor axis size.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'Read the input image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the Sobel edge detection scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the input image and its corresponding output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the instruction from the operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the input image and the corresponding results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the instruction from the operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `Detecting_edges.py` Python program file, along
    with the input image (`baby.jpg`), is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/51f4bf73-3806-4ab2-941c-b66e386bc7e4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The input image and the horizontal Sobel filter output obtained after executing
    the `Detecting_edges.py` file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0feb0bf8-e971-4bf6-8277-81630cbe5b63.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The vertical Sobel filter output and the Laplacian image output obtained after
    executing the `Detecting_edges.py` file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/26872f8b-b8c8-4235-826a-1e18377b0eca.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Following  is the Laplacian image output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e8a14347-762c-4c1b-a7db-9808cdc7a22e.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The `Canny` edge detection output obtained after executing the `Detecting_edges.py`
    file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/69f29259-5618-423a-bfbb-c4f828847685.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Readers can refer to the following document to learn what edge detection is
    and its impact on test pictures:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.301.927](http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.301.927)'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please refer to the following document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.tutorialspoint.com/dip/concept_of_edge_detection.htm](https://www.tutorialspoint.com/dip/concept_of_edge_detection.htm)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Histogram equalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Histogram equalization is used to enhance the visibility and the contrast of
    images. It is performed by varying the image intensities. These procedures are
    clearly described here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the input image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'Convert the RGB image into grayscale:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Regulate the histogram of the grayscale image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Regulate the histogram of the RGB image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the output image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `histogram.py` Python program file, along with
    the input image (`finger.jpg`), is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/d4fe5eae-c6e9-440c-8d80-739612a8969f.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute the `histogram.py` file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/19597408-7b95-4c97-a461-e5929f4b0276.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The histogram equalized grayscale image obtained after executing the `histogram.py`
    file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/4f307056-ee49-42aa-bb41-958b39fa4951.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The histogram equalized color image obtained after executing the `histogram.py`
    file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/502b425e-d6e2-407a-87e2-597b2a5d80e5.png)'
  prefs: []
  type: TYPE_IMG
- en: Detecting corners in images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Corners are borders in images used to extract special features that infer the
    content of an image. Corner detection is frequently used in image registration,
    video tracking, image mosaics, motion detection, 3D modelling, panorama stitching,
    and object recognition.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Load the input image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement the Harris corner detection scheme:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Dilate the input image and construct the corners:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'Implement image thresholding:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'Display the input image:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'Wait for the instruction from the operator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: 'The command used to execute the `Detecting_corner.py` Python program file,
    along with the input image (`box.jpg`), is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a7d6e3a7-79e2-40a3-b3ef-6b9d6c05cd94.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The input image used to execute the `Detecting_corner.py` file is shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/a9fde55f-33a1-4773-ad98-0e6485cadb89.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Harris Corners obtained after executing the `Detecting_corner.py` file are
    shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/0372faa3-4b7a-4c85-900e-5dfa30a55029.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In order to learn how it works for an input image, refer to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Image corner detection involves finding the edges/corners in the given picture.
    It can be used to extract the vital shape features from grayscale and RGB pictures.
    Refer to this survey paper on edge and corner detection:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://pdfs.semanticscholar.org/24dd/6c2c08f5601e140aad5b9170e0c7485f6648.pdf](https://pdfs.semanticscholar.org/24dd/6c2c08f5601e140aad5b9170e0c7485f6648.pdf).'
  prefs: []
  type: TYPE_NORMAL
