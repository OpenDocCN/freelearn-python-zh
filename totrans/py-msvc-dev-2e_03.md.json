["```py\ndef filter(some_numbers):\n    some_numbers.sort()\n    return some_numbers[-5:] \n```", "```py\nScenario: Basic DuckDuckGo Search\n    When the user searches for \"panda\"\n    Then results are shown for \"panda\" \n```", "```py\nimport requests\ndef query_url(url):\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\ndef get_hero_names(filter=None):\n    url = \"https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json\"\n    json_body = query_url(url)\n    for member in json_body.get(\"members\", []):\n        if filter(member):\n            yield member[\"name\"]\ndef format_heroes_over(age=0):\n    hero_names = get_hero_names(filter=lambda hero: hero.get(\"age\", 0) > age)\n    formatted_text = \"\"\n    for hero in hero_names:\n        formatted_text += f\"{hero} is over {age}\\n\"\n    return formatted_text\nif __name__ == \"__main__\":\n    print(format_heroes_over(age=30)) \n```", "```py\n# requests_example2.py\nimport requests\ndef query_url(url):\n    response = requests.get(url)\n    response.raise_for_status()\n    return response.json()\ndef get_hero_names(hero_data, hero_filter=None):\n    for member in hero_data.get(\"members\", []):\n        if hero_filter is None or hero_filter(member):\n            yield member\ndef render_hero_message(heroes, age):\n    formatted_text = \"\"\n    for hero in heroes:\n        formatted_text += f\"{hero['name']} is over {age}\\n\"\n    return formatted_text\ndef render_heroes_over(age=0):\n    url = \"https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json\"\n    json_body = query_url(url)\n    relevant_heroes = get_hero_names(\n        json_body, hero_filter=lambda hero: hero.get(\"age\", 0) > age\n    )\n    return render_hero_message(relevant_heroes, age)\nif __name__ == \"__main__\":\n    print(render_heroes_over(age=30)) \n```", "```py\nimport unittest\nfrom unittest import mock\nimport requests_mock\nimport requests_example2  # Our previous example code\nclass TestHeroCode(unittest.TestCase):\n    def setUp(self):\n        self.fake_heroes = {\n            \"members\": [\n                {\"name\": \"Age 20 Hero\", \"age\": 20},\n                {\"name\": \"Age 30 Hero\", \"age\": 30},\n                {\"name\": \"Age 40 Hero\", \"age\": 40},\n            ]\n        }\n    def test_get_hero_names_age_filter(self):\n        result = list(\n            requests_example2.get_hero_names(\n                self.fake_heroes, filter=lambda x: x.get(\"age\", 0) > 30\n            )\n        )\n        self.assertEqual(result, [{\"name\": \"Age 40 Hero\", \"age\": 40}])\n    @requests_mock.mock()\n    def test_display_heroes_over(self, mocker):\n        mocker.get(requests_mock.ANY, json=self.fake_heroes)\n        rendered_text = requests_example2.render_heroes_over(age=30)\n        self.assertEqual(rendered_text, \"Age 40 Hero is over 30\\n\")\nif __name__ == \"__main__\":\n    unittest.main() \n```", "```py\nimport unittest\nimport json\nfrom quart_basic import app as tested_app\nclass TestApp(unittest.IsolatedAsyncioTestCase):\n    async def test_help(self):\n        # creating a QuartClient instance to interact with the app\n        app = tested_app.test_client()\n        # calling /api/ endpoint\n        hello = await app.get(\"/api\")\n        # asserting the body\n        body = json.loads(str(await hello.get_data(), \"utf8\"))\n        self.assertEqual(body[\"Hello\"], \"World!\")\nif __name__ == \"__main__\":\n    unittest.main() \n```", "```py\n# quart_error.py\nfrom quart import Quart\n\napp = Quart(__name__)\n\ntext_404 = (\n    \"The requested URL was not found on the server.  \"\n    \"If you entered the URL manually please check your \"\n    \"spelling and try again.\"\n)\n\n@app.errorhandler(500)\ndef error_handling_500(error):\n    return {\"Error\": str(error)}, 500\n@app.errorhandler(404)\ndef error_handling_404(error):\n    return {\"Error\": str(error), \"description\": text_404}, 404\n\n@app.route(\"/api\")\ndef my_microservice():\n    raise TypeError(\"This is a testing exception.\")\n\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n# test_quart_error.py\nimport unittest\nimport json\nfrom quart_error import app as tested_app, text_404\nclass TestApp(unittest.IsolatedAsyncioTestCase):\n    async def asyncSetUp(self):\n        # Create a client to interact with the app\n        self.app = tested_app.test_client()\n    async def test_raise(self):\n        # This won't raise a Python exception but return a 500\n        hello = await self.app.get(\"/api\")\n        self.assertEqual(hello.status_code, 500)\n    async def test_proper_404(self):\n        # Call a non-existing endpoint\n        hello = await self.app.get(\"/dwdwqqwdwqd\")\n        # It's not there\n        self.assertEqual(hello.status_code, 404)\n        # but we still get a nice JSON body\n        body = json.loads(str(await hello.get_data(), \"utf8\"))\n        self.assertEqual(hello.status_code, 404)\n        self.assertEqual(body[\"Error\"], \"404 Not Found: The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.\")\n        self.assertEqual(body[\"description\"], text_404)\nif __name__ == \"__main__\":\n    unittest.main() \n```", "```py\n$ salvo http://127.0.0.1:5000/api  --concurrency 10 â€“-requests 100\n-------- Server info --------\nServer Software: hypercorn-h11\n-------- Running 100 queries - concurrency 10 --------\n[================================================================>.] 99%\n-------- Results --------\nSuccessful calls   \t\t 1000\nTotal time     \t\t\t 13.3234 s\nAverage        \t\t\t 0.0133 s\nFastest        \t\t\t 0.0038 s\nSlowest        \t\t\t 0.0225 s\nAmplitude      \t\t\t 0.0187 s\nStandard deviation \t\t 0.002573\nRequests Per Second    \t\t 75.06\nRequests Per Minute    \t\t 4503.35\n-------- Status codes --------\nCode 200     \t\t\t 1000 times.\nWant to build a more powerful load test ? Try Molotov !\nBye! \n```", "```py\n# molotov_example.py\n# Run:\n# molotov molotov_example.py --processes 10 --workers 200 --duration 60\nimport json\nfrom molotov import scenario\n@scenario(weight=40)\nasync def scenario_one(session):\n    async with session.get(\"http://localhost:5000/api\") as resp:\n        res = await resp.json()\n        assert res[\"Hello\"] == \"World!\"\n        assert resp.status == 200\n@scenario(weight=60)\nasync def scenario_two(session):\n    async with session.get(\"http://localhost:5000/api\") as resp:\n        assert resp.status == 200 \n```", "```py\n$ pytest test_*\n======================= test session starts ========================\nplatform darwin -- Python 3.8.5, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\nrootdir: /Users/simon/github/PythonMicroservices/CodeSamples/Chapter3\nplugins: requests-mock-1.8.0\ncollected 9 items\ntest_quart_basic.py .                                         [ 11%]\ntest_quart_error.py ..                                        [ 33%]\ntest_requests_example2.py ..                                  [ 55%]\ntest_requests_example2_full.py ....                           [100%]\n======================= 9 passed in 0.20s ========================== \n```", "```py\n$ pytest --flake8 --black\n======================= test session starts =======================\nplatform darwin -- Python 3.8.5, pytest-6.2.1, py-1.10.0, pluggy-0.13.1\nrootdir: /Users/simon/github/PythonMicroservices/CodeSamples/Chapter3\nplugins: flake8-1.0.7, requests-mock-1.8.0, black-0.3.12, cov-2.10.1\ncollected 29 items\nmolotov_example1.py ss                                         [  6%]\nquart_basic.py ss                                              [ 13%]\nquart_error.py ss                                              [ 20%]\nquart_profiled.py ss                                           [ 27%]\nrequests_example1.py ss                                        [ 34%]\nrequests_example2.py FF                                        [ 41%]\ntest_quart_basic.py ss.                                        [ 51%]\ntest_quart_error.py ss..                                       [ 65%]\ntest_requests_example2.py ss..                                 [ 79%]\ntest_requests_example2_full.py ss....                          [100%]\n======================= FAILURES =======================\n_____________________ Black format check ________________________\n--- /Users/simon/github/PythonMicroservices/CodeSamples/Chapter3/requests_example2.py    2020-12-29 11:56:56.653870 +0000\n+++ /Users/simon/github/PythonMicroservices/CodeSamples/Chapter3/requests_example2.py    2020-12-29 11:56:58.595337 +0000\n@@ -24,11 +24,11 @@\n def render_heroes_over(age=0):\n \turl = \"https://mdn.github.io/learning-area/javascript/oojs/json/superheroes.json\"\n \tjson_body = query_url(url)\n \trelevant_heroes = get_hero_names(\n-    \tjson_body, filter =lambda hero: hero.get(\"age\", 0) > age\n+    \tjson_body, filter=lambda hero: hero.get(\"age\", 0) > age\n \t)\n \treturn render_hero_message(relevant_heroes, age)\n if __name__ == \"__main__\":\n__________________________ FLAKE8-check __________________________\n/Users/simon/github/PythonMicroservices/CodeSamples/Chapter3/requests_example2.py:26:80: E501 line too long (85 > 79 characters)\n/Users/simon/github/PythonMicroservices/CodeSamples/Chapter3/requests_example2.py:29:26: E251 unexpected spaces around keyword / parameter equals\n----------------------- Captured log call --------------------------\nWARNING  flake8.options.manager:manager.py:207 option --max-complexity: please update from optparse string `type=` to argparse callable `type=` -- this will be an error in the future\nWARNING  flake8.checker:checker.py:119 The multiprocessing module is not available. Ignoring --jobs arguments.\n===================== short test summary info =======================\nFAILED requests_example2.py::BLACK\nFAILED requests_example2.py::FLAKE8\n============= 2 failed, 9 passed, 18 skipped in 0.51s =============== \n```", "```py\n [tox] \n    envlist = py38,py39 \n\n    [testenv] \n    deps = pytest \n       pytest-cov \n       pytest-flake8    \n\n    commands =  pytest --cov=quart_basic --flake8 test_* \n```", "```py\n [tox] \n    envlist = py39,docs \n    ... \n\n    [testenv:docs] \n    basepython=python \n    deps = \n        -rrequirements.txt \n        sphinx \n    commands= \n        sphinx-build -W -b html docs/source docs/build \n```", "```py\nQuart Application \n============= \n```", "```py\n .. code-block:: python \n\n    from quart import Quart\n    app = Quart(__name__) \n\n    @app.route(\"/\") \n    async def hello(): \n        return \"Hello World!\" \n\n    if __name__ == \"__main__\": \n        app.run() \n```", "```py\n extension: https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html\n```", "```py\nAPIS \n==== \n\n**myservice** includes one view that's linked to the root path: \n\n.. autofunction :: myservice.views.home.index \n```", "```py\nMyservice\n=========\n\n **myservice** is a simple JSON Quart application.\n\nThe application is created with :func:`create_app`: \n.. literalinclude:: ../../myservice/app.py\n\nThe :file:`settings.ini` file which is passed to :func:`create_app`\ncontains options for running the Quart app, like the DEBUG flag: \n.. literalinclude:: ../../myservice/settings.ini\n   :language: ini\nBlueprint are imported from :mod:`myservice.views` and one \nBlueprint and view example was provided in :file:`myservice/views/home.py`: \n\n.. literalinclude:: ../../myservice/views/home.py \n   :name: home.py \n   :emphasize-lines: 13 \n```", "```py\nmyplan.txt\nmyplan.original.txt\nmyplan.before_feedback.txt\nmyplan.final.reviewed.final2.suggestions.txt \n```", "```py\n# .github/workflows/python.yml\n---\nname: Python package\non: [push]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python: [3.7, 3.8, 3.9]\n    steps:\n      - uses: actions/checkout@v2\n      - name: Setup Python ${{ matrix.python }}\n        uses: actions/setup-python@v2\n        with:\n          python-version: ${{ matrix.python }}\n      - name: Install Tox and any other packages\n        run: pip install tox\n      - name: Run Tox\n        # Run tox using the version of Python in `PATH`\n        run: tox -e py \n```", "```py\nmicroservice-skeleton \n=====================\n\nThis project is a template for building microservices with Quart. \n\n.. image:: https://coveralls.io/repos/github/PythonMicroservices/microservice-skeleton/badge.svg?branch=main\n   :target: https://coveralls.io/github/PythonMicroservices/microservice-skeleton?branch=main\n\n.. image:: https://github.com/PythonMicroservices/microservice-skeleton/workflows/Python%20Testing/badge.svg \n.. image:: https://readthedocs.org/projects/microservice/badge/?version=latest \n   :target: https://microservice.readthedocs.io \n```"]