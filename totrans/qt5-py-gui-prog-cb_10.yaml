- en: Chapter 10. Creating Amazing 3D GUIs with PyOpenGL and PyGLet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will create amazing Python GUIs that display true 3-Dimensional
    images that can be rotated around themselves so that we can look at them from
    all sides.
  prefs: []
  type: TYPE_NORMAL
- en: PyOpenGL transforms our GUI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our GUI in 3D!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using bitmaps to make our GUI pretty
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PyGLet transforms our GUI more easily than PyOpenGL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our GUI in amazing colors
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a slide show using tkinter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will transform our GUI by giving it true 3-dimensional capabilities.
    We will use two Python third-party packages. PyOpenGL is a Python binding to the
    OpenGL standard, which is a graphics library that comes built-in with all major
    operating systems. This gives the resulting widgets a native look and feel.
  prefs: []
  type: TYPE_NORMAL
- en: Pyglet is another Python binding to the OpenGL library, but it can also create
    GUI applications, which can make coding using Pyglet easier than using PyOpenGL.
  prefs: []
  type: TYPE_NORMAL
- en: PyOpenGL transforms our GUI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will successfully create a Python GUI that imports PyOpenGL
    modules and does actually work!
  prefs: []
  type: TYPE_NORMAL
- en: In order to do so, we need to overcome some initial challenges.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will show one proven way that does work. If you experiment on your
    own and get stuck, remember the famous words from Thomas A. Edison.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Thomas Edison, inventor of the light bulb, answered a question from a reporter
    who talked about Edison''s failures. Edison replied:'
  prefs: []
  type: TYPE_NORMAL
- en: '*"I have not failed. I''ve just found 10,000 ways that won''t work."*'
  prefs: []
  type: TYPE_NORMAL
- en: First, we have to install the PyOpenGL extension module.
  prefs: []
  type: TYPE_NORMAL
- en: After successfully installing the PyOpenGL modules that match our OS architecture,
    we will create some example code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will install the PyOpenGL package. In this book, we are using Windows 7 64-bit
    OS and Python 3.4\. The screenshot of downloads that follows is for this configuration.
  prefs: []
  type: TYPE_NORMAL
- en: We will also be using wxPython. If you do not have wxPython installed, you can
    read some recipes from the previous chapter about how to install wxPython and
    how to use this GUI framework.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are using the wxPython Phoenix release, which is the newest release and is
    intended to replace the original Classic wxPython release in the future.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to use PyOpenGL, we have to first install it. The following URL is
    the official Python package installer website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pypi.python.org/pypi/PyOpenGL/3.0.2#downloads](https://pypi.python.org/pypi/PyOpenGL/3.0.2#downloads)'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This seems to be the correct installation but, as it turns out, it doesn't work
    with Windows 7 64-bit OS with Python 3.4.3 64-bit.
  prefs: []
  type: TYPE_NORMAL
- en: A better place to look for Python installation packages was mentioned in a recipe
    in a previous chapter. You are probably already familiar with it. We download
    the package that matches both our OS and our Python version. It comes with the
    new `.whl` format, so we have to install the Python wheel package first.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: How to install the Python wheel package is described in a previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyOpenGL via the `PyOpenGL-3.1.1a1-cp34-none-win_amd64.whl` file
    using the `pip` command is both successful and installs all of the 64-bit modules
    we require.
  prefs: []
  type: TYPE_NORMAL
- en: Replace `<your full path>` with the full path you downloaded the wheel installer
    to.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we now try to import some PyOpenGL modules, it works, as can be seen in
    this code example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: All this code is doing is importing several of the OpenGL Python modules. It
    does not do anything else but, when we run our Python module, we do not get any
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: This proves that we have successfully installed the OpenGL bindings to Python.
  prefs: []
  type: TYPE_NORMAL
- en: Now our development environment has been successfully set up and we can try
    it out using wxPython.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many online examples are restricted to using Python 2.x, as well as using the
    Classic version of wxPython. We are using Python 3 and Phoenix.
  prefs: []
  type: TYPE_NORMAL
- en: Using the code based on the wxPython demo examples creates a working 3D cube.
    In comparison, running the cone example did not work, but this example got us
    started on the right track.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://wiki.wxpython.org/GLCanvas%20update](http://wiki.wxpython.org/GLCanvas%20update)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some modifications to the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We now can create the following GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the Classic version of wxPython `SetCurrent()` did not require a context.
    Here is some code we might find when searching online.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code does not work when using wxPython Phoenix. We can look up
    the correct syntax for Phoenix online.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we had our first experiences of OpenGL with PyOpenGL Python
    bindings. While OpenGL can create truly amazing images in true 3D, we ran into
    some challenges along the way and then found solutions to these challenges that
    made it work.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are coding in Python, creating 3D images!
  prefs: []
  type: TYPE_NORMAL
- en: Our GUI in 3D!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will create our own GUI using wxPython. We are reusing some
    code from the wxPython demo examples, which we have reduced to the minimum code
    required to display OpenGL in 3D.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OpenGL is a very large library. We will not go into detailed explanations of
    this library. There are a lot of books and online documentation available if you
    want to study OpenGL further. It has its own shading language.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reading the previous recipe is probably good preparation for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the entire Python code is a little bit long here, we will show just a little
    bit of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The entire code is available online and this Python module is called:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot shows our wxPython GUI. When we click the button widget,
    the following second window appears.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We can now use the mouse to turn the cube around to see all of its six sides.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We can also maximize this window and the coordinates will scale and we can spin
    this cube around in this much larger window!
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The cube could also be a Star Trek space ship!
  prefs: []
  type: TYPE_NORMAL
- en: We just have to become an advanced programmer in this technology if this is
    what we want to develop.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many video games are being developed using OpenGL.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first created a regular wxPython GUI and placed a button widget onto it.
    Clicking this button invokes the imported OpenGL 3D libraries. The code used is
    part of the wxPython demo examples, which we slightly modified to make it work
    with Phoenix.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe glued our own GUI to this library.
  prefs: []
  type: TYPE_NORMAL
- en: OpenGL is such a huge and impressive library. This recipe gave a taste of how
    to create a working example in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Often a working example is all we need to get started on our journey.
  prefs: []
  type: TYPE_NORMAL
- en: Using bitmaps to make our GUI pretty
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe was inspired by a wxPython IDE builder framework that, at some point
    in time, used to work.
  prefs: []
  type: TYPE_NORMAL
- en: It does not work with Python 3 and wxPython Phoenix, but the code is very cool.
  prefs: []
  type: TYPE_NORMAL
- en: We will reuse a bitmap image from the large amount of code this project supplies.
  prefs: []
  type: TYPE_NORMAL
- en: Before time runs out, you can fork the Google code on GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: '![Using bitmaps to make our GUI pretty](img/B04829_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use wxPython in this recipe, so reading at least parts of
    the previous chapter might be useful as a preparation for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After reverse-engineering the gui2py code and making other changes to this code,
    we might achieve the following window widget, which displays a nice, tiled background.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Of course, we lost a lot of widgets refactoring the code from the website mentioned
    previously, yet it does give us a cool background, and clicking the **Quit** button
    still works.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to figure out how to integrate the interesting part of the
    code into our own GUI.
  prefs: []
  type: TYPE_NORMAL
- en: We do this by adding the following code to the GUI of the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have to bind to parent, not self, otherwise our bitmap will not show up.
  prefs: []
  type: TYPE_NORMAL
- en: Running our improved code now tiles a bitmap as the background of our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clicking the button still invokes our OpenGL 3D drawing, so we did not lose
    any functionality.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we enhanced our GUI by using a bitmap as a background. We tiled
    the bitmap image and when we resized the GUI window, the bitmap automatically
    adjusted itself to fill in the entire area of the Canvas we were painting on using
    the device context.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding wxPython code can load different image file formats.
  prefs: []
  type: TYPE_NORMAL
- en: PyGLet transforms our GUI more easily than PyOpenGL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the PyGLet GUI development framework to create our
    GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: PyGLet is easier to use than PyOpenGL as it comes with its own GUI event loop,
    so we do not need to use tkinter or wxPython to create our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use Pyglet, we first have to install this third-party Python plugin.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `pip` command, we can easily install the library and a successful
    installation looks like this in our `site-packages` Python folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The online documentation is located at this website for the current release:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pyglet.readthedocs.org/en/pyglet-1.2-maintenance/](https://pyglet.readthedocs.org/en/pyglet-1.2-maintenance/)'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A first experience using the Pyglet library may look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is from the official pyglet.org website and results in the
    following fully functional GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used another third-party Python module that wraps the OpenGL
    library.
  prefs: []
  type: TYPE_NORMAL
- en: This library comes with its own event loop processing power, which enables us
    to avoid having to rely on yet another library to create a running Python GUI.
  prefs: []
  type: TYPE_NORMAL
- en: We have explored the official website that shows us how to install and use this
    fantastic GUI library.
  prefs: []
  type: TYPE_NORMAL
- en: Our GUI in amazing colors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will extend our GUI written using Pyglet from the previous
    recipe, by turning it into true 3D.
  prefs: []
  type: TYPE_NORMAL
- en: We will also add some fancy colors to it. This recipe was inspired by some sample
    code from the *OpenGL SuperBible* book series. It creates a very colorful cube,
    which we can turn around in 3-dimensional space using the keyboard up, down, left,
    and right buttons.
  prefs: []
  type: TYPE_NORMAL
- en: We have slightly improved the sample code by making the image turn when holding
    down one of the keys instead of having to press and release the key.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe explains how to install PyGLet and gives you an introduction
    to this library. If you have not done so, it is probably a good idea to browse
    through that chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the online documentation, PyGLet is usually spelled in all lower-case. While
    this might be a Pythonic way, we capitalize the first letter of a class and we
    use lower case for variable, method, and function names to start each name.
  prefs: []
  type: TYPE_NORMAL
- en: We do not use underscores in this book unless necessary to clarify code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code creates the 3-dimensional colored cube shown below it. This
    time, we will use the keyboard arrow keys to rotate the image, instead of the
    mouse.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_10_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Using the keyboard arrow keys, we can spin the 3D cube around.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have used pyglet to create a colorful cube, which we can
    rotate in 3-dimensional space using the keyboard arrow keys.
  prefs: []
  type: TYPE_NORMAL
- en: We have defined several colors for the six faces of our cube and we have used
    pyglet to create our main window frame.
  prefs: []
  type: TYPE_NORMAL
- en: The code is similar to a previous recipe in this chapter, in which we used the
    wxPython library to create a cube. The reason for this is that underneath the
    hood, both wxPython and pyglet use the OpenGL library.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a slideshow using tkinter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a nice working slideshow GUI using pure Python.
  prefs: []
  type: TYPE_NORMAL
- en: We will see the limitations the core Python built-ins have, and then we will
    explore another third-party module available called Pillow, which extends tkinter's
    built-in functionality in regards to image processing.
  prefs: []
  type: TYPE_NORMAL
- en: While the name Pillow might sound a little bit strange at first, it actually
    comes with a lot of history behind it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are only using Python 3.4 and above in this book.
  prefs: []
  type: TYPE_NORMAL
- en: We are not going back to Python 2.
  prefs: []
  type: TYPE_NORMAL
- en: Guido has expressed his decision to intentionally break backwards compatibility
    and has decided that Python 3 is the future of Python programming.
  prefs: []
  type: TYPE_NORMAL
- en: For GUIs and images, the older line of Python 2 has this very powerful module
    named PIL, which stands for Python Image Library. This library comes with a very
    large amount of functionality, which several years after the very successful creation
    of Python 3 has not been translated for Python 3.
  prefs: []
  type: TYPE_NORMAL
- en: Many developers still choose to use Python 2 instead of the future, as designed
    by the Benevolent Dictator of Python, because Python 2 still has more libraries
    available.
  prefs: []
  type: TYPE_NORMAL
- en: That is a little bit sad.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, another imaging library has been created to work with Python 3
    and it is named PIL plus something.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pillow is not compatible with the Python 2 PIL library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first part of this recipe, we will use pure Python. In order to improve
    the code, we will install another Python module using pip functionality. So, while
    you are most likely familiar with pip, a little knowledge of how to use it might
    be useful.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create a working GUI that shuffles slides within a window frame
    using pure Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the working code and following it are some screenshots of the results
    of running this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_10_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is another moment in time in the unfolding slideshow.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While the slides sliding are truly impressive, the built-in capabilities of
    pure Python tkinter GUIs do not support the very popular `.jpg` format, so we
    have to reach out to another Python library.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Pillow, we first have to install it using the `pip` command.
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful installation looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Pillow supports `.jpg` formats and, in order to use it, we to have to slightly
    change our syntax.
  prefs: []
  type: TYPE_NORMAL
- en: Using Pillow is an advanced topic that will not be covered in this edition of
    the book.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is a very wonderful tool, and in this recipe, we have explored several
    ways to use and extend it.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a finger points at the moon, it is not the moon itself, just a pointer.
  prefs: []
  type: TYPE_NORMAL
