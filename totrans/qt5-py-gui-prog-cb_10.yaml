- en: Chapter 10. Creating Amazing 3D GUIs with PyOpenGL and PyGLet
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章. 使用 PyOpenGL 和 PyGLet 创建惊人的 3D GUIs
- en: In this chapter we will create amazing Python GUIs that display true 3-Dimensional
    images that can be rotated around themselves so that we can look at them from
    all sides.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将创建令人惊叹的Python GUI，它能够显示真正的三维图像，这些图像可以围绕自身旋转，以便我们从各个角度观察它们。
- en: PyOpenGL transforms our GUI
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyOpenGL将我们的GUI进行转换
- en: Our GUI in 3D!
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的3D图形用户界面！
- en: Using bitmaps to make our GUI pretty
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用位图使我们的GUI看起来更美观
- en: PyGLet transforms our GUI more easily than PyOpenGL
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyGLet比PyOpenGL更容易转换我们的GUI
- en: Our GUI in amazing colors
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的用户界面色彩绚丽
- en: Creating a slide show using tkinter
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 tkinter 创建幻灯片
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will transform our GUI by giving it true 3-dimensional capabilities.
    We will use two Python third-party packages. PyOpenGL is a Python binding to the
    OpenGL standard, which is a graphics library that comes built-in with all major
    operating systems. This gives the resulting widgets a native look and feel.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过赋予它真正的三维能力来转换我们的GUI。我们将使用两个Python第三方库。PyOpenGL是OpenGL标准的Python绑定，它是一个所有主要操作系统都内置的图形库。这使得生成的控件具有原生外观和感觉。
- en: Pyglet is another Python binding to the OpenGL library, but it can also create
    GUI applications, which can make coding using Pyglet easier than using PyOpenGL.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet 是 OpenGL 库的另一个 Python 绑定，但它也可以创建 GUI 应用程序，这使得使用 Pyglet 进行编码比使用 PyOpenGL
    更为简便。
- en: PyOpenGL transforms our GUI
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PyOpenGL 转换我们的GUI
- en: In this recipe, we will successfully create a Python GUI that imports PyOpenGL
    modules and does actually work!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将成功创建一个Python GUI，它实际上会导入PyOpenGL模块并正常工作！
- en: In order to do so, we need to overcome some initial challenges.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，我们需要克服一些初始挑战。
- en: This recipe will show one proven way that does work. If you experiment on your
    own and get stuck, remember the famous words from Thomas A. Edison.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将展示一种经过验证确实有效的方法。如果你在自己的实验中遇到困难，请记住托马斯·爱迪生所说的著名话语。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: 'Thomas Edison, inventor of the light bulb, answered a question from a reporter
    who talked about Edison''s failures. Edison replied:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 托马斯·爱迪生，白炽灯泡的发明者，回答了一位记者关于爱迪生失败的问题。爱迪生回答说：
- en: '*"I have not failed. I''ve just found 10,000 ways that won''t work."*'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*"我没有失败，我只是找到了一万种行不通的方法。"*'
- en: First, we have to install the PyOpenGL extension module.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须安装 PyOpenGL 扩展模块。
- en: After successfully installing the PyOpenGL modules that match our OS architecture,
    we will create some example code.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在成功安装与我们的操作系统架构相匹配的 PyOpenGL 模块后，我们将创建一些示例代码。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will install the PyOpenGL package. In this book, we are using Windows 7 64-bit
    OS and Python 3.4\. The screenshot of downloads that follows is for this configuration.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将安装 PyOpenGL 包。在这本书中，我们使用的是 Windows 7 64 位操作系统和 Python 3.4。下面跟随的下载截图是为了这个配置。
- en: We will also be using wxPython. If you do not have wxPython installed, you can
    read some recipes from the previous chapter about how to install wxPython and
    how to use this GUI framework.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用 wxPython。如果您尚未安装 wxPython，您可以阅读前一章中关于如何安装 wxPython 以及如何使用此 GUI 框架的一些食谱。
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: We are using the wxPython Phoenix release, which is the newest release and is
    intended to replace the original Classic wxPython release in the future.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用 wxPython Phoenix 版本，这是最新的版本，并计划在未来取代原始的 Classic wxPython 版本。
- en: How to do it...
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In order to use PyOpenGL, we have to first install it. The following URL is
    the official Python package installer website:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用 PyOpenGL，我们首先需要安装它。以下网址是官方的 Python 软件包安装网站：
- en: '[https://pypi.python.org/pypi/PyOpenGL/3.0.2#downloads](https://pypi.python.org/pypi/PyOpenGL/3.0.2#downloads)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://pypi.python.org/pypi/PyOpenGL/3.0.2#downloads](https://pypi.python.org/pypi/PyOpenGL/3.0.2#downloads)'
- en: '![How to do it...](img/B04829_10_01.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_01.jpg)'
- en: This seems to be the correct installation but, as it turns out, it doesn't work
    with Windows 7 64-bit OS with Python 3.4.3 64-bit.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来是正确的安装方式，但结果证明，它不适用于Windows 7 64位操作系统和Python 3.4.3 64位。
- en: A better place to look for Python installation packages was mentioned in a recipe
    in a previous chapter. You are probably already familiar with it. We download
    the package that matches both our OS and our Python version. It comes with the
    new `.whl` format, so we have to install the Python wheel package first.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一章的食谱中提到了一个更好的地方来查找 Python 安装包。你可能已经熟悉它了。我们下载与我们的操作系统和 Python 版本相匹配的包。它带有新的
    `.whl` 格式，因此我们首先需要安装 Python 轮子包。
- en: Note
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: How to install the Python wheel package is described in a previous recipe.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如何安装 Python 轮子包在之前的菜谱中有描述。
- en: Installing PyOpenGL via the `PyOpenGL-3.1.1a1-cp34-none-win_amd64.whl` file
    using the `pip` command is both successful and installs all of the 64-bit modules
    we require.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`命令通过`PyOpenGL-3.1.1a1-cp34-none-win_amd64.whl`文件安装PyOpenGL既成功又安装了我们所需的全部64位模块。
- en: Replace `<your full path>` with the full path you downloaded the wheel installer
    to.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `<your full path>` 替换为你下载 wheel 安装程序的完整路径。
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'When we now try to import some PyOpenGL modules, it works, as can be seen in
    this code example:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们现在尝试导入一些 PyOpenGL 模块时，它工作正常，如下代码示例所示：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: All this code is doing is importing several of the OpenGL Python modules. It
    does not do anything else but, when we run our Python module, we do not get any
    errors.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些代码所做的只是导入几个OpenGL Python模块。它没有做其他任何事情，但是当我们运行我们的Python模块时，我们没有得到任何错误。
- en: This proves that we have successfully installed the OpenGL bindings to Python.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这证明了我们已经成功地将OpenGL绑定安装到了Python中。
- en: Now our development environment has been successfully set up and we can try
    it out using wxPython.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的开发环境已经成功搭建完成，我们可以使用 wxPython 来尝试它。
- en: Note
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Many online examples are restricted to using Python 2.x, as well as using the
    Classic version of wxPython. We are using Python 3 and Phoenix.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 许多在线示例仅限于使用 Python 2.x，以及使用 wxPython 的经典版本。我们正在使用 Python 3 和 Phoenix。
- en: Using the code based on the wxPython demo examples creates a working 3D cube.
    In comparison, running the cone example did not work, but this example got us
    started on the right track.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用基于 wxPython 示例代码创建了一个工作的 3D 立方体。相比之下，运行圆锥示例没有成功，但这个示例让我们走上了正确的道路。
- en: 'Here is the URL:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是网址：
- en: '[http://wiki.wxpython.org/GLCanvas%20update](http://wiki.wxpython.org/GLCanvas%20update)'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '[http://wiki.wxpython.org/GLCanvas%20update](http://wiki.wxpython.org/GLCanvas%20update)'
- en: 'Here are some modifications to the code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是对代码的一些修改：
- en: '[PRE2]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'We now can create the following GUI:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以创建以下GUI：
- en: '![How to do it...](img/B04829_10_02.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_02.jpg)'
- en: In the Classic version of wxPython `SetCurrent()` did not require a context.
    Here is some code we might find when searching online.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在wxPython的古典版本中，`SetCurrent()`函数不需要上下文。以下是在网上搜索时可能会找到的一些代码。
- en: '[PRE3]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding code does not work when using wxPython Phoenix. We can look up
    the correct syntax for Phoenix online.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 wxPython Phoenix 时，前面的代码无法正常工作。我们可以在网上查找 Phoenix 的正确语法。
- en: '![How to do it...](img/B04829_10_03.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_03.jpg)'
- en: How it works...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we had our first experiences of OpenGL with PyOpenGL Python
    bindings. While OpenGL can create truly amazing images in true 3D, we ran into
    some challenges along the way and then found solutions to these challenges that
    made it work.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们第一次使用 PyOpenGL Python 绑定库体验了 OpenGL。虽然 OpenGL 能够在真正的 3D 中创建真正惊人的图像，但在过程中我们遇到了一些挑战，然后找到了解决这些挑战的方法，使它得以工作。
- en: Note
  id: totrans-56
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We are coding in Python, creating 3D images!
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在用Python编写代码，创建3D图像！
- en: Our GUI in 3D!
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们的三维GUI！
- en: In this recipe we will create our own GUI using wxPython. We are reusing some
    code from the wxPython demo examples, which we have reduced to the minimum code
    required to display OpenGL in 3D.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用 wxPython 创建自己的图形用户界面。我们正在重用一些来自 wxPython 演示示例的代码，我们将这些代码简化到仅显示
    3D OpenGL 所需的最小代码量。
- en: Note
  id: totrans-60
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: OpenGL is a very large library. We will not go into detailed explanations of
    this library. There are a lot of books and online documentation available if you
    want to study OpenGL further. It has its own shading language.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: OpenGL 是一个非常庞大的库。我们不会对这个库进行详细的解释。如果你想要进一步学习OpenGL，有很多书籍和在线文档可供参考。它有自己的着色语言。
- en: Getting ready
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Reading the previous recipe is probably good preparation for this recipe.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读之前的食谱可能是为这个食谱做的良好准备。
- en: How to do it...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: As the entire Python code is a little bit long here, we will show just a little
    bit of the code.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 由于整个Python代码在这里有点长，我们将只展示一小部分代码。
- en: 'The entire code is available online and this Python module is called:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 整个代码可在网上找到，这个Python模块被称为：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '![How to do it...](img/B04829_10_04.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_04.jpg)'
- en: The preceding screenshot shows our wxPython GUI. When we click the button widget,
    the following second window appears.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图展示了我们的 wxPython 图形用户界面。当我们点击按钮控件时，以下第二个窗口就会出现。
- en: '![How to do it...](img/B04829_10_05.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_05.jpg)'
- en: Note
  id: totrans-71
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: We can now use the mouse to turn the cube around to see all of its six sides.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用鼠标来旋转立方体，以便看到它的六个面。
- en: '![How to do it...](img/B04829_10_06.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_06.jpg)'
- en: We can also maximize this window and the coordinates will scale and we can spin
    this cube around in this much larger window!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以最大化这个窗口，坐标将会缩放，我们可以在这么大的窗口中旋转这个立方体！
- en: '![How to do it...](img/B04829_10_07.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_10_07.jpg)'
- en: The cube could also be a Star Trek space ship!
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个立方体也可以是一艘《星际迷航》太空船！
- en: We just have to become an advanced programmer in this technology if this is
    what we want to develop.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是我们想要发展的，我们只需成为这个技术的高级程序员即可。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Many video games are being developed using OpenGL.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We first created a regular wxPython GUI and placed a button widget onto it.
    Clicking this button invokes the imported OpenGL 3D libraries. The code used is
    part of the wxPython demo examples, which we slightly modified to make it work
    with Phoenix.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This recipe glued our own GUI to this library.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: OpenGL is such a huge and impressive library. This recipe gave a taste of how
    to create a working example in Python.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Often a working example is all we need to get started on our journey.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: Using bitmaps to make our GUI pretty
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe was inspired by a wxPython IDE builder framework that, at some point
    in time, used to work.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: It does not work with Python 3 and wxPython Phoenix, but the code is very cool.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: We will reuse a bitmap image from the large amount of code this project supplies.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Before time runs out, you can fork the Google code on GitHub.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: '![Using bitmaps to make our GUI pretty](img/B04829_10_08.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue to use wxPython in this recipe, so reading at least parts of
    the previous chapter might be useful as a preparation for this recipe.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After reverse-engineering the gui2py code and making other changes to this code,
    we might achieve the following window widget, which displays a nice, tiled background.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_09.jpg)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
- en: Of course, we lost a lot of widgets refactoring the code from the website mentioned
    previously, yet it does give us a cool background, and clicking the **Quit** button
    still works.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to figure out how to integrate the interesting part of the
    code into our own GUI.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: We do this by adding the following code to the GUI of the previous recipe.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-102
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have to bind to parent, not self, otherwise our bitmap will not show up.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: Running our improved code now tiles a bitmap as the background of our GUI.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_10.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
- en: Clicking the button still invokes our OpenGL 3D drawing, so we did not lose
    any functionality.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_11.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we enhanced our GUI by using a bitmap as a background. We tiled
    the bitmap image and when we resized the GUI window, the bitmap automatically
    adjusted itself to fill in the entire area of the Canvas we were painting on using
    the device context.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-110
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The preceding wxPython code can load different image file formats.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: PyGLet transforms our GUI more easily than PyOpenGL
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use the PyGLet GUI development framework to create our
    GUIs.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: PyGLet is easier to use than PyOpenGL as it comes with its own GUI event loop,
    so we do not need to use tkinter or wxPython to create our GUI.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to use Pyglet, we first have to install this third-party Python plugin.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `pip` command, we can easily install the library and a successful
    installation looks like this in our `site-packages` Python folder:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_12.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
- en: 'The online documentation is located at this website for the current release:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '[https://pyglet.readthedocs.org/en/pyglet-1.2-maintenance/](https://pyglet.readthedocs.org/en/pyglet-1.2-maintenance/)'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_13.jpg)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
- en: 'A first experience using the Pyglet library may look like this:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code is from the official pyglet.org website and results in the
    following fully functional GUI:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_14.jpg)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used another third-party Python module that wraps the OpenGL
    library.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: This library comes with its own event loop processing power, which enables us
    to avoid having to rely on yet another library to create a running Python GUI.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: We have explored the official website that shows us how to install and use this
    fantastic GUI library.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Our GUI in amazing colors
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will extend our GUI written using Pyglet from the previous
    recipe, by turning it into true 3D.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: We will also add some fancy colors to it. This recipe was inspired by some sample
    code from the *OpenGL SuperBible* book series. It creates a very colorful cube,
    which we can turn around in 3-dimensional space using the keyboard up, down, left,
    and right buttons.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: We have slightly improved the sample code by making the image turn when holding
    down one of the keys instead of having to press and release the key.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The previous recipe explains how to install PyGLet and gives you an introduction
    to this library. If you have not done so, it is probably a good idea to browse
    through that chapter.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the online documentation, PyGLet is usually spelled in all lower-case. While
    this might be a Pythonic way, we capitalize the first letter of a class and we
    use lower case for variable, method, and function names to start each name.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: We do not use underscores in this book unless necessary to clarify code.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code creates the 3-dimensional colored cube shown below it. This
    time, we will use the keyboard arrow keys to rotate the image, instead of the
    mouse.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How to do it...](img/B04829_10_15.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
- en: Using the keyboard arrow keys, we can spin the 3D cube around.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_16.jpg)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
- en: How it works...
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we have used pyglet to create a colorful cube, which we can
    rotate in 3-dimensional space using the keyboard arrow keys.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: We have defined several colors for the six faces of our cube and we have used
    pyglet to create our main window frame.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: The code is similar to a previous recipe in this chapter, in which we used the
    wxPython library to create a cube. The reason for this is that underneath the
    hood, both wxPython and pyglet use the OpenGL library.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Creating a slideshow using tkinter
  id: totrans-149
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create a nice working slideshow GUI using pure Python.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: We will see the limitations the core Python built-ins have, and then we will
    explore another third-party module available called Pillow, which extends tkinter's
    built-in functionality in regards to image processing.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: While the name Pillow might sound a little bit strange at first, it actually
    comes with a lot of history behind it.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-153
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We are only using Python 3.4 and above in this book.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: We are not going back to Python 2.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: Guido has expressed his decision to intentionally break backwards compatibility
    and has decided that Python 3 is the future of Python programming.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: For GUIs and images, the older line of Python 2 has this very powerful module
    named PIL, which stands for Python Image Library. This library comes with a very
    large amount of functionality, which several years after the very successful creation
    of Python 3 has not been translated for Python 3.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Many developers still choose to use Python 2 instead of the future, as designed
    by the Benevolent Dictator of Python, because Python 2 still has more libraries
    available.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: That is a little bit sad.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, another imaging library has been created to work with Python 3
    and it is named PIL plus something.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-161
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Pillow is not compatible with the Python 2 PIL library.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the first part of this recipe, we will use pure Python. In order to improve
    the code, we will install another Python module using pip functionality. So, while
    you are most likely familiar with pip, a little knowledge of how to use it might
    be useful.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create a working GUI that shuffles slides within a window frame
    using pure Python.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the working code and following it are some screenshots of the results
    of running this code:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![How to do it...](img/B04829_10_21.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
- en: Here is another moment in time in the unfolding slideshow.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_22.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
- en: While the slides sliding are truly impressive, the built-in capabilities of
    pure Python tkinter GUIs do not support the very popular `.jpg` format, so we
    have to reach out to another Python library.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: In order to use Pillow, we first have to install it using the `pip` command.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'A successful installation looks like this:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_10_23.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: Pillow supports `.jpg` formats and, in order to use it, we to have to slightly
    change our syntax.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: Using Pillow is an advanced topic that will not be covered in this edition of
    the book.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python is a very wonderful tool, and in this recipe, we have explored several
    ways to use and extend it.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When a finger points at the moon, it is not the moon itself, just a pointer.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
