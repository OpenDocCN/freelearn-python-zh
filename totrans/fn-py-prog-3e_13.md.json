["```py\n>>> import pymonad \n>>> help(pymonad)\n```", "```py\nfrom pymonad.tools import curry  # type: ignore[import] \n\n@curry(4)  # type: ignore[misc] \ndef systolic_bp( \n    bmi: float, age: float, gender_male: float, treatment: float \n) -> float: \n    return ( \n        68.15 + 0.58 * bmi + 0.65 * age + 0.94 * gender_male + 6.44 * treatment \n    )\n```", "```py\n>>> systolic_bp(25, 50, 1, 0) \n116.09 \n\n>>> systolic_bp(25, 50, 0, 1) \n121.59\n```", "```py\n>>> treated = systolic_bp(25, 50, 0)\n>>> treated(0)\n115.15\n>>> treated(1)\n121.59\n\n```", "```py\n>>> g_t = systolic_bp(25, 50) \n>>> g_t(1, 0) \n116.09 \n>>> g_t(0, 1) \n121.59\n```", "```py\n>>> from pymonad.tools import curry \n>>> from functools import reduce \n\n>>> creduce = curry(2, reduce)\n```", "```py\n>>> from operator import add \n\n>>> my_sum = creduce(add) \n>>> my_sum([1,2,3]) \n6\n```", "```py\n>>> my_max = creduce(lambda x,y: x if x > y else y) \n>>> my_max([2,5,3]) \n5\n```", "```py\nimport operator \n\nprod = creduce(operator.mul)\n```", "```py\nfrom collections.abc import Iterable \n\n@curry(1)  # type: ignore[misc] \ndef alt_range(n: int) -> Iterable[int]: \n    if n == 0: \n        return range(1, 2)  # Only the value [1] \n    elif n % 2 == 0: \n        return range(2, n+1, 2)  # Even \n    else: \n        return range(1, n+1, 2)  # Odd\n```", "```py\n>>> prod(alt_range(9)) \n945\n```", "```py\n>>> from pymonad.reader import Compose \n>>> semi_fact = Compose(alt_range).then(prod) \n>>> semi_fact(9) \n945\n```", "```py\n>>> pi = lambda: 3.14 \n>>> pi() \n3.14\n```", "```py\n>>> from pymonad.maybe import Maybe, Just, Nothing \n\n>>> x1 = Maybe.apply(systolic_bp).to_arguments(Just(25), Just(50), Just(1), Just(0)) \n>>> x1.value \n116.09 \n\n>>> x2 = Maybe.apply(systolic_bp).to_arguments(Just(25), Just(50), Just(1), Nothing) \n>>> x2 \nNothing \n>>> x2.value is None \nTrue\n```", "```py\n>>> list(range(10)) \n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9] \n\n>>> from pymonad.list import ListMonad \n>>> ListMonad(range(10)) \n[range(0, 10)]\n```", "```py\n>>> from pymonad.list import ListMonad \n\n>>> x = ListMonad(range(10)) \n>>> x \n[range(0, 10)] \n>>> x[0] \nrange(0, 10) \n>>> list(x[0]) \n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```", "```py\nfrom collections.abc import Iterator \nfrom pymonad.tools import curry \n\n@curry(1)  # type: ignore[misc] \ndef range1n(n: int) -> range: \n    if n == 0: return range(1, 2)  # Only the value 1 \n    return range(1, n+1)\n```", "```py\n>>> from pymonad.reader import Compose \n>>> from pymonad.list import ListMonad \n\n>>> fact = Compose(range1n).then(prod) \n>>> seq1 = ListMonad(*range(20)) \n\n>>> f1 = seq1.map(fact) \n>>> f1[:10] \n[1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n```", "```py\nfrom pymonad.tools import curry \n\n@curry(1)  # type: ignore[misc] \ndef n21(n: int) -> int: \n    return 2*n+1\n```", "```py\n>>> semi_fact = Compose(alt_range).then(prod) \n>>> f2 = seq1.map(n21).then(semi_fact) \n>>> f2[:10] \n[1, 3, 15, 105, 945, 10395, 135135, 2027025, 34459425, 654729075]\n```", "```py\n>>> import operator \n>>> 2 * sum(map(operator.truediv, f1, f2)) \n3.1415919276751456\n```", "```py\nimport random \n\ndef rng() -> tuple[int, int]: \n    return (random.randint(1,6), random.randint(1,6)) \n\nfrom collections.abc import Callable \nfrom typing import TypeAlias \n\nDiceT: TypeAlias = Callable[[], tuple[int, int]]\n```", "```py\nfrom pymonad.maybe import Maybe, Just \n\ndef game_chain(dice: DiceT) -> Maybe: \n    outcome = ( \n        Just((\"\", 0, [])) \n        .then(initial_roll(dice)) \n        .then(point_roll(dice)) \n    ) \n    return outcome\n```", "```py\nfrom pymonad.tools import curry \nfrom pymonad.maybe import Maybe, Just \n\n@curry(2)  # type: ignore[misc] \ndef initial_roll(dice: DiceT, status: Maybe) -> Maybe: \n    d = dice() \n    if sum(d) in (7, 11): \n        return Just((\"pass\", sum(d), [d])) \n    elif sum(d) in (2, 3, 12): \n        return Just((\"fail\", sum(d), [d])) \n    else: \n        return Just((\"point\", sum(d), [d]))\n```", "```py\nfrom pymonad.tools import curry \nfrom pymonad.maybe import Maybe, Just \n\n@curry(2)  # type: ignore[misc] \ndef point_roll(dice: DiceT, status: Maybe) -> Maybe: \n    prev, point, so_far = status \n    if prev != \"point\": \n        # won or lost on a previous throw \n        return Just(status) \n\n    d = dice() \n    if sum(d) == 7: \n        return Just((\"fail\", point, so_far+[d])) \n    elif sum(d) == point: \n        return Just((\"pass\", point, so_far+[d])) \n    else: \n        return ( \n            Just((\"point\", point, so_far+[d])) \n            .then(point_roll(dice)) \n        )\n```", "```py\n>>> game_chain() \n(’fail’, 5, [(2, 3), (1, 3), (1, 5), (1, 6)])\n```"]