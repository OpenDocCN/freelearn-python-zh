- en: Frameworks, Standard Languages, and Toolkits
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software frameworks are the lifeline of software applications. They provide
    extended capabilities and offer many out-of-the-box implementations so that application
    developers don't need to handle every coding aspect of software and can focus
    on building faster and smarter business capabilities by using out-of-the-box capabilities,
    libraries, APIs, and models provided by the frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: We'll provide a short introduction to few popular frameworks along with a little
    bit of information about their supported programming languages, capabilities,
    standards, and characteristics, such as footprints, adaptability, cloud deployment
    friendliness, and ease of development.
  prefs: []
  type: TYPE_NORMAL
- en: The aim of this chapter is to introduce readers to a few prominent frameworks
    that can come in handy when choosing the right framework for their API-development
    needs. Please note that the list of discussed frameworks isn't exhaustive, and
    there's no intention to provide a comparison between them.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the chapter objectives:'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is all about introducing a few prominent frameworks to app developers
    who want to jump-start their RESTful APIs and microservices with their acquainted
    programming languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's an attempt to provide readers with an introduction, guidelines, and advantages
    and disadvantages for few programming language-friendly frameworks so that they
    can pick and play with a more suitable framework for their RESTful API development
    needs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we'll discuss a few prominent frameworks based on the Java, Python, and Go
    (programming) languages, having a basic understanding in one or more programming
    languages would enable readers of this chapter to jumpstart their RESTful API
    development with one or more of their favorite frameworks. This chapter serves
    as reference material as well as a technical guide for those who have a minimum
    understanding of any of these three programming languages.
  prefs: []
  type: TYPE_NORMAL
- en: Core features of a framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we are aware, frameworks are software libraries, APIs, scaffoldings, AJAX,
    caching, security, compilers and much more. It''s imperative that we refresh our
    memory with the following core qualities of any framework, as our selection of
    framework relies on these qualities:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple, consistent, easy to adapt, and faster to implement
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layered architecture, well-designed and -documented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built with genuine trade-offs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built with reusable libraries and reused libraries (borrowed from the past)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated and designed to evolve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at a few Java-based frameworks to understand their capabilities regarding
    their design, footprint, documentation, and adaptability, along with their advantages
    and disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most popular open source, Java-based frameworks is **Spring Boot**.
    It offers an excellent platform for many Java developers to build and deploy REST-based
    applications with a rapid turnaround time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The fundamental design principles of Spring Boot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Provide radically faster and widely-accessible code, reusable libraries, and
    boilerplates for all Spring development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Be opinionated (certain, strong, and expressive), think outside the box, and
    provide a way for developers to customize as per their requirements, and challenge
    the defaults
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provide non-functional requirement features variations that are common to classes
    of the project that can be used for instrumentation (such as security, embedded
    servers, health checks, metrics and externalized configuration))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No code-generation mechanism and no need for XML configurations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Boilerplate code or boilerplate represents a code or code library incorporated
    in a software application, and we can reuse those libraries with little or no
    alteration.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what makes Spring Framework a popular choice for app developers for
    their RESTful API development.
  prefs: []
  type: TYPE_NORMAL
- en: Core features of Spring
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Spring''s application, external configuration, profiles, and logging are the
    constituents of Spring''s core features. Let''s look at each constituent and its
    values:'
  prefs: []
  type: TYPE_NORMAL
- en: The Spring application provides a convenient way to bootstrap our applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: External configuration helps us to work with same application code in different
    environments by using YAML, environment variables, or even with command-line arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiles segregate parts of an application's configuration and make it available
    only to certain environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides out-of-the-box Apache Commons Logging capabilities, however, it
    doesn't stop us from use different logging frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database integration with Spring data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Database integration is an important part of any production software applications,
    and we''ll observe how Spring makes the lives of developers better by providing
    exciting capabilities to integration for traditional SQL databases and NoSQL technologies:'
  prefs: []
  type: TYPE_NORMAL
- en: '**SQL**: Spring provides far-reaching support to work with SQL databases. JdbcTemplate
    for ORM, with Spring data, provides an additional level of functionality called
    **repository creations**.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**NO-SQL**: A Spring-based programming model for data access, called **Spring
    data**, powers the Spring Framework and provides a quick-and-easy access mechanism
    to connect to a variety of NoSQL technologies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Messaging integration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Integration with messaging systems is super simplified with the Spring message
    framework. Be it simple messaging with JmsTemplate for JMS or ActiveMQ support
    or be it an AMQP for advanced messaging or for Apache Kafka integration the Spring-framework,
    it provides simple methods for messaging integration.
  prefs: []
  type: TYPE_NORMAL
- en: Extending Spring with auto-configuration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In many practical scenarios, we need to develop shared libraries (within an
    organization or as a contribution to open source) and in such cases create specific
    configuration classes—as modules (JAR). Making it available in the application's
    classpath makes the development faster and easier by eliminating the need to define
    specific beans that are included in the auto-configuration classes. The configuration
    examples could be LDAP, different DB sources configurations, or security configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests and integration test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Writing unit test cases and integration tests are essential practices for any
    developers. Spring provides better capabilities to write unit tests, tests in
    isolation scripts, and integration tests. Spring Framework comes up with a few
    utilities and annotations for testing our applications. Spring-boot-starter-test
    is the favorite test utility for most of developers as its starter tool imports
    Junit, AssertJ, Hamcrest, and Mockito. Spring-test and Spring-boot-test for integration
    tests are common libraries and come in handy when writing integration tests. What's
    exciting about the spring test framework is that we can add some additional test
    dependencies of our own as well.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we move to another popular framework, let''s look at some advantages
    of Spring Boot:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick setup, rapid development, and push to production (enterprise ready)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Effortless and quick integration with security, ORM, and JDBC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedded lightweight HTTP servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Along with Java, it also supports Groovy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports Maven and Gradle build tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular and plays well with other libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick learning, broad, and in-depth documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very active community (of development and documentation) online and offline
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of Spring Boot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While Spring has many advantages, we should also be aware of its drawbacks:'
  prefs: []
  type: TYPE_NORMAL
- en: Frequent breaking changes (by introducing new capabilities and defect fixes)
    between versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May create an obligation to use latest versions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Too much information and documentation may be overkill
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vast framework finding specifics may be hard for few (may affect rapid prototyping)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The author's choice for all of the code in this book is also Spring Boot, and
    from examples in [Chapter 2](edae86df-d90e-4b4c-9ada-4de80edaef71.xhtml), *Design
    Strategy, Guidelines, and Best Practices*, and [Chapter 3](bdb7c23e-8c80-4a89-af31-e40d1b4c1d36.xhtml),
    *Essential RESTful API* *patterns*, we've seen how easy it was to bring up RESTful
    APIs with Spring Boot. Numerous capabilities are built-in with Spring Boot, and
    it's one of the matured frameworks of the software industry.
  prefs: []
  type: TYPE_NORMAL
- en: Beginning about Light 4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Light is a cloud-native micro-services platform developed with Jave SE, with
    design goals of high throughput, low latency, and a small footprint. Light 4j
    is a general-purpose web/API framework with different frameworks, such as OAUTH2,
    Portal, Logging, Messaging, and Metrics, built in.
  prefs: []
  type: TYPE_NORMAL
- en: Core features of Light 4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The light-4j platform aims at containerized microservices and supports a design-driven
    approach from the OpenAPI specification for the RESTful API and the GraphQL IDL
    for GraphQL services and has code-generation and runtime models (for validation
    and security).
  prefs: []
  type: TYPE_NORMAL
- en: As a platform or a framework, it's good that it addresses a few technical cross-cutting
    concerns, such as auditing, load-balancing, authentication, and health checks,
    so that service or API developers can focus on business logic without worrying
    too much about those technical concerns, also called **non-functional requirements**.
    Light 4j provides various handler logic and separates those non-functional requirements
    from the business context, to help the API developers to focus on developing business
    logic.
  prefs: []
  type: TYPE_NORMAL
- en: Learning about Light Rest 4j
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Light Rest 4j is a framework that is built on top of Light 4j, and designed
    to speed up RESTful API development and deployment. It has many middleware handlers
    designed around Swagger 2.0 and open API 3.0 specifications. Light-rest-4j comes
    with open API metadata, open API security, an open API validator, Swagger meta,
    Swagger security, and Swagger validator.
  prefs: []
  type: TYPE_NORMAL
- en: Light-code-gen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can build RESTful APIs or services with the OpenAPI 3.0 specification-ready
    light-rest-4j provided frameworks and scaffold a project with a command-line tool
    called **light-code-gen** tool. It enables JWT scope-verification and schema-validation
    for any service requests.
  prefs: []
  type: TYPE_NORMAL
- en: The light-code-gen tool helps us to scaffold a project with a specification
    file and a config JSON file. The command-line tool can be as simple as a Java
    command-line tool, docker command line, or even a script that can be part of the
    DevOps pipeline. light-code-gen works with our favorite Maven build tool as well.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing Light 4j over the rest
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s conclude this section with the following facts about Light 4j, as it
    may help you determine whether to choose Light 4j for RESTful API development:'
  prefs: []
  type: TYPE_NORMAL
- en: Java-SE-based framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scalable design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low latency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Small memory footprint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several handlers as plugins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-the-box OAuth2 integration (security-first design)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy integration with other frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A built-in dependency-injection framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benchmarks indicate as this the fastest RESTful framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May involve a steep learning curve due to poor documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: New to market/industry, so not much feedback yet on production systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Light-rest-4j, built on top of the light4j framework, is very promising and
    gaining popularity due to various features—lightweight, very low latency, designed
    for scalability, not J2EE-based but J2SE-based, and its security-first design.
  prefs: []
  type: TYPE_NORMAL
- en: Spark Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Spark is a micro-framework founded by Per Wendel for creating web applications
    in Java with minimal effort, and it's a free and open source Java Web Framework,
    released under the Apache 2 license.
  prefs: []
  type: TYPE_NORMAL
- en: The Spark Framework is a rapid-development web framework built with Java 8 Lambda
    Expression (based on the lambda philosophy), so it can help to build a web application
    with fewer verbose, in fact you can build a REST API with a JSON response in less
    than 10 lines of code and provide Node.js-like experience when developing a web
    API. Cool, isn't it?
  prefs: []
  type: TYPE_NORMAL
- en: Core features of Spark Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s get a glimpse of some of the core characteristics of Spark:'
  prefs: []
  type: TYPE_NORMAL
- en: Designed to create APIs faster and more easily
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It's a lightweight library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provides simple interfaces through which we can define routes and dispatch them
    to functions for the paths we requested
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Follows the Java 8 lambda philosophy (create web APIs with fewer lines)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an API with fewer lines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Typically, we would write the following few lines to bring up a hello world
    API with Spark:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'That''s it! Line one, `spark.Spark.*`, as indicated in the preceding code snippet,
    does the magic. By using CURL (curl `http://localhost:4567/sayhello`), we would
    visualize the following request and response as output for the previous code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the preceding snippet, curl hits the application, so the lambda
    function of `Spark.*` fires and the client (curl in this case) gets the output
    of the static lambda function. It's not just a simple hello world API; we can
    write complex RESTful APIs with Spark as it supports a variety of functions, such
    as query maps, cookies and sessions, filters, redirects, exception and error handlings,
    and views and templates.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of Spark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now it''s time to review the advantages of Spark (and then we''ll review another
    exciting framework called **Dropwizard**):'
  prefs: []
  type: TYPE_NORMAL
- en: Java-8-EE-based and based on the lambda philosophy (less verbose)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Facilitates rapid development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enables App developers to create scalable REST APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fast and lightweight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best suited and excellent fit for rapid prototyping purposes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scores high on the speed factor as Spark is a thin wrapper around Java EE's
    servlet API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simplified and effective routing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Brings better productivity by providing a simple **domain-specific language**
    (**DSL**) for routing API endpoints to handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maven and Gradle support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of Spark
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Any popular framework may have drawbacks, and Spark is no exception:'
  prefs: []
  type: TYPE_NORMAL
- en: Not as popular as other frameworks (small community)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May not be suitable for huge projects (SQL and NoSQL plug-and-play aspects)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dropwizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll review another popular Java-based framework licensed
    under Apache, called Dropwizard. This framework is named for a character from
    a K.C. Green webcomic ([http://gunshowcomic.com/316](http://gunshowcomic.com/316))
    series.
  prefs: []
  type: TYPE_NORMAL
- en: Overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Dropwizard** is a stable, mature framework, assembled with several Java libraries,
    yet lightweight and intended to help API developers by providing features that
    one can quickly develop and deploy web applications to production servers. Dropwizard''s
    principal design goal is to provide reliable, reusable, and high-performance implementations
    of everything that a web application needs and provide out-of-the-box capabilities
    that the application is deployable in production servers. Framework''s reusable
    libraries make the core application lean and focused, hence reducing both time-to-market
    and maintenance burdens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/3e9cc853-cb48-4ff6-9c2b-dc4556f5e04c.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see in the previous diagram, **Dropwizard** supports several powerful
    libraries, and we'll see some details about each in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Core features of Dropwizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dropwizard tailors several high-performance Java-library implementations, such
    as Jetty, Jersy, Jackson, and Metrics. Let's take a quick glimpse at a few of
    these libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Jetty for HTTP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Dropwizard uses the Jetty HTTP library and spins up an HTTP web server with
    its `main` method, and so facilitates running your web application as a simple
    Unix process and piggybacking on existing Unix process management tool. By having
    this `main` method as a way of spinning up, the process leads to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: No need to manage the traditionally-burdensome Java production process
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Gets rid of PermGen issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need to customize the application server's configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No need for separate deployment tools
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No classloader issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jersey for REST
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, the JAX-RS reference implementation Jersey is open source; it comes
    with its native API toolkit to simplify the development of RESTful web services
    and their clients in Java. Jersey also exposes numerous extension SPIs (software
    platform infrastructure as a services model). Dropwizard bundles Jersey as its
    RESTful web app framework and helps developers to write clean code, providing
    testable classes that gracefully map HTTP requests to simple Java objects that
    streaming output, matrix URI parameters, conditional `GET` requests, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Jackson
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A critical need for app developers is having the object mapper from JSON and
    allowing the domain model to export directly to those Java objects. Dropwizard
    gratifies those app-developer needs by having Jackson as its primary core feature
    along with many others.
  prefs: []
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This Java library acts as a powerful toolkit and offers ways to measure the
    behavior of components that are deployed in production. Combined with other prominent
    libraries, such as Ehcache and Graphite, Metrics stands as it provides full-stack
    visibility to our RESTful API and web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Liquibase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dropwizard includes the open source solution for managing revisions of database-schema
    scripts. Liquibase supports various types of database, and various file formats
    for defining the DB structure. The highlight of Liquibase is its ability to roll
    back changes (forward and backward) from a specific point.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before we get into its advantages and disadvantages, let''s take a glimpse
    at other noteworthy libraries in Dropwizard:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Logging**: Logback and slf4j for performant and flexible logging'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hibernate validator**: Offers easy ways for user input validation, along
    with capabilities of generating i18n-friendly error messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Http interactions**: Bundled with Apache HttpClient and Jersey client libraries,
    it helps low-level and high-level HTTP interactions with other web services'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JDBI**: Provides a simple, comfortable, and straightforward way to establish
    Relational database connectivity with Java backends'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Templates**: Dropwizard supports Freemarker and Mustache, the simplest templating
    systems for consumer or user-facing applications'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Dropwizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we are covering the advantages and disadvantages of each framework, let''s
    touch upon them for Dropwizard as well, so that you can decide why or why not
    to use Dropwizard. The following are its merits:'
  prefs: []
  type: TYPE_NORMAL
- en: A Java framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-the-box support for configuration, application metrics, logging, operational
    tools, templating, and much more
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can do rapid prototyping
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ops-friendly
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very modular
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develops high-performance RESTful web services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports many open source and independent libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementation of monitoring at its best with Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports integration and the use of several third-party frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of Dropwizard
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A few factors that you may consider drawbacks of Dropwizard are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining applications with third-party frameworks and libraries may bring
    debugging nightmares
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Though there are several powerful libraries, there may be situations where you
    need a specific library, but it isn't supported by Dropwizard (restriction of
    using only what Dropwizard provides)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It may incur a steep learning curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Go framework for the RESTful API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Go is one of the friendlier programming languages for microservices and RESTful
    APIs. Go is a general-purpose, procedural programming language with advanced features
    and clean syntax. It influences the efficient management of dependencies using
    package-assembly and supports environment adopting patterns alike to dynamic languages.
  prefs: []
  type: TYPE_NORMAL
- en: An overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many powerful frameworks that Gophers (Go lang programmers) can employ
    to reuse proven, extensible, production-grade external packages out of the box
    for their app's development. This section intends to cover some details and functions
    for two Go-language-based frameworks—Gin-gonic and Revel – that you can use to
    jump-start your RESTful API development.
  prefs: []
  type: TYPE_NORMAL
- en: Gin-gonic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gin is an HTTP web framework written in Go. Gin design is much out of Martini,
    another Go framework, however, with better performance than Martini. The Gin framework
    claims: *If you need smashing performance, get yourself some gin*. Gin-gonic helps
    developers to write less boilerplate code and build a request-handling pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: '**Martini** ([https://github.com/go-martini/martini](https://github.com/go-martini/martini))
    is a framework developed with the Go language. Its modular and non-intrusive design
    makes the framework simple to use. However, please be aware that it''s no longer
    maintained or supported.'
  prefs: []
  type: TYPE_NORMAL
- en: Core features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Gin** is a very lean framework and supports essential and much-needed features
    and functionalities for you to design and develop a RESTful web service. The trimmed-down
    version has essential libraries as well, and you can create your own reusable
    and extensible pieces of code.'
  prefs: []
  type: TYPE_NORMAL
- en: HttpRouter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**HttpRouter** is a lightweight and a high-performance HTTP request router
    for Go; it''s also called **multiplexer** (or mux, for short). Unlike the default
    mux of Go''s net/HTTP package, this customized mux helps to bind the routing variables
    in the routing pattern and matches against the request method. The best part of
    this router is its small memory footprint, optimized for high performance. As
    this custom router employs a compressing radix tree structure for efficient matching
    of the long paths, a large number of routes is possible with the custom router.'
  prefs: []
  type: TYPE_NORMAL
- en: Http2 server push
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gin supports Http2 server push capabilities out of the box. Server push helps
    the server to utilize its network resources fully and so improves the page-load
    time. HTTP/2 introduced a concept called **server push**, which allows the server
    to push the additional required resources to the browser even before they are
    explicitly requested.
  prefs: []
  type: TYPE_NORMAL
- en: Multi-template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gin allows by default the use of only one HTML template. However, there's a
    custom HTML rendering to support multiple templates, that is, more than one `*template.`
    template.
  prefs: []
  type: TYPE_NORMAL
- en: Upload files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By using `multipart.write`, we can write files into the cache and send them
    to the server through the `POST` method.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Though *Gin-Gonic* has many libraries and supports several features, here are
    some of its best features:'
  prefs: []
  type: TYPE_NORMAL
- en: Groups routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writes into log files
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom validator
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Builds with *jsoniter*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Gin-Gonic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see a few pros of *Gin-*Gonic:'
  prefs: []
  type: TYPE_NORMAL
- en: Lean and lightweight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Zero-allocation router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Complete set of unit tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Backward-compatible, new releases will not break the old code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High performance and highly scalable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of Gin-Gonic
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s be aware of a few disadvantages of this framework:'
  prefs: []
  type: TYPE_NORMAL
- en: May not be suitable for large, enterprise-based implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Low server processing capabilities, which forces clients to handle the workloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May incur a steep learning curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Revel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our list of frameworks, one of the most promising is Revel. It's fully-featured,
    designed to provide out-of-the-box asynchronous, stateless, and modular capabilities
    to our web APIs. Let's learn a bit about Revel and its abilities in the following
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: Core features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revel is a self-contained, almost full-stack web framework, with customizable
    middleware and an externally-configurable framework that Gophers would develop
    and stand up their RESTful APIs really quickly. Let's get to know some of the
    fundamental features of Revel in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Router
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'URLs and routes definitions are configurable in the file, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'We can route the URLs with Revel in different ways. The following are a few
    routing methods with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Fixed-path routing**: Fixed-path or exact-match routing of the HTTP method
    and the path to invoke specific methods and controllers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET/About App.About`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use exact match/About as path and `App.About` as method on the `App` controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URL***: Parameters* routing - segments of the path extracted *with—*prefix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GET /user/:id User.Details`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few other methods that Revel supports for routing (that we aren't covering
    in this section) are auto-routing, reverse-routing, static serving, and purge.
  prefs: []
  type: TYPE_NORMAL
- en: Server engine
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The best part of Revel's server engine is that app developers are free to implement
    their favorite HTTP engines. Revel uses the Go HTTP engine by default, but it
    allows us to configure any other server engine, such as fastHttp, New Relic HTTP,
    or our custom developed HTTP engine. How cool is that?
  prefs: []
  type: TYPE_NORMAL
- en: Controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Controllers in the Revel framework are the logic containers responsible for
    executing the API logic. The controller holds the incoming HTTP requests information,
    such as query parameters, path parameters, JSON body, and form data, to the handlers.
  prefs: []
  type: TYPE_NORMAL
- en: Handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HTTP request routers are responsible for comparing the incoming requests against
    a list of predefined URL paths and calling the respective handlers. Handlers are
    responsible for writing response headers and bodies. Any Go object that satisfies
    the `http.Handler` interface can be a handler. Interestingly, Go's HTTP package
    is distributed with functions that can generate handlers, such as `FileServer`,
    `RedirectHandler`, and `NotFoundHandler`.
  prefs: []
  type: TYPE_NORMAL
- en: Interceptors
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are cases, such as request logging, error handling, or authentication
    handling, where we need an action invoked by the framework BEFORE or AFTER a specific
    event, and those sorts of invocations will happen through a Revel function called
    **interceptors**. In other words, interceptors are a function that gets invoked
    by the framework. Revel supports three forms of interceptors—function interceptor,
    method interceptor, and controller interceptor.
  prefs: []
  type: TYPE_NORMAL
- en: Filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revel has independent functions called **filters**. Filters help to implement
    horizontal concerns, such as request-logging, cookie policies, and authorization.
    Filters are middleware, and most of Revel's built-in functionalities and request-processing
    functionalities are filters. They are interfaces that allow them to be nested.
  prefs: []
  type: TYPE_NORMAL
- en: Cache
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Revel comes with a library that facilitates server-side, low-latency, and temporary
    storage to act as a cache. If you need to take advantage of, and minimize access
    to, the database, cache is a good choice. Another example is implementing cache
    for user sessions where cookie-based sessions aren't preferred or are insufficient.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some other noteworthy features of Revel:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Websockets**: Revel supports full-duplex communication over a single TCP
    connection with WS methods or with the server `WebSocket` parameter as an action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database**: DB support through app conf (application configuration) database
    section configuration. Note that DB isn''t preconfigured and it''s up to the developers
    to use modules, such as GORM.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing**: Revel comes with pre-built modules that make it easy to write
    and run functional test cases.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of Revel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we are ready to look at the pros of the Revel framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Hot-code reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comprehensive libraries
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: High performance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular, it's built around composable middleware, called filters, which implement
    most of the request-processing functionality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in test modules facilitate functional test-case execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Well-documented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of Revel
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The factors that may make Revel less appealing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Comprehensive libraries are Revel's advantage in most cases; there are situations
    that it makes the code base hefty and generates a large footprint (in contradiction
    to Go's lean principle)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May incur a steep learning curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No community standard for managing package versions and it's up to the developers
    to manage and release with the necessary latest dependencies (no backward-compatibility)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python RESTful API frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is one of the top-rated programming languages. It's also known for its
    less-complex syntax, and its high-level, object-oriented, robust, and general-purpose
    programming. Python is the top choice for any first-time programmer.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since its release in 1991, Python has evolved and powered by several frameworks
    for web application development, scientific and mathematical computing, and graphical
    user interfaces to the latest REST API frameworks. In this section, we'll explore
    two comprehensive frameworks, Django and Flask, so that you can choose the best
    one for developing your RESTful API.
  prefs: []
  type: TYPE_NORMAL
- en: Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Django** is a web framework also available as open source with the BSD license,
    designed to help developers create their web app very quickly as it takes care
    of additional web-development needs. It includes several packages (also known
    as **applications**) to handle typical web-development tasks, such as authentication,
    content administration, scaffolding, templates, caching, and syndication. Let''s
    review the **Django REST Framework** (**DRF**) built with Python, and use the
    Django core framework for REST API development and deployment in the following
    section.'
  prefs: []
  type: TYPE_NORMAL
- en: Django Rest Framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DRF is an open source, well-matured Python and Django library intended to help
    APP developers build sophisticated web APIs. DRF's modular, flexible, and customizable
    architecture makes the development of both simple, turnkey API endpoints and complicated
    REST constructs possible. The goal of DRF is to divide a model, generalize the
    wire representation, such as JSON or XML, and customize a set of class-based views
    to satisfy the specific API endpoint using a serializer that describes the mapping
    between views and API endpoints.
  prefs: []
  type: TYPE_NORMAL
- en: Core features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's have a quick introduction on some of the core features of Django in the
    following paragraphs and then move on to its noteworthy features.
  prefs: []
  type: TYPE_NORMAL
- en: Web-browsable API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This feature enhances the REST API developed with DRF. It has a rich interface,
    and the web-browsable API supports multiple media types too. The browsable API
    does mean that the APIs we build will be self-describing and the API endpoints
    that we create as part of the REST services and return JSON or HTML representations.
    The interesting fact about the web-browsable API is that we can interact with
    it fully through the browser, and any endpoint that we interact with using a programmatic
    client will also be capable of responding with a browser-friendly view onto the
    web-browsable API.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the DRF out-of-the-box capabilities is authentication; it supports broad
    categories of authentication schemes, from basic authentication, token authentication,
    session authentication, remote user authentication, to OAuth Authentication. It
    also supports custom authentication schemes if we wish to implement one. DRF runs
    the authentication scheme at the start of the view, that is, before any other
    code is allowed to proceed. DRF determines the incoming requests privileges from
    the permission and throttling policies, and then decides whether the incoming
    request can be allowed or disallowed with the matched credentials.
  prefs: []
  type: TYPE_NORMAL
- en: Serialization and deserialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serialization is the process of converting complex data, such as querysets and
    model instances, into native Python datatypes. Converting facilitates the rendering
    of native data types, such as JSON or XML. DRF supports serialization through
    serializers classes. The serializers of DRF are similar to Django's `Form` and
    `ModelForm` classes. It provides a serializer class, which helps to control the
    output of responses. The DRF `ModelSerializer` classes provide a simple mechanism
    with which we can create serializers that deal with model instances and querysets.
    Serializers also do deserialization, that is, serializers allow parsed data that
    needs to be converted back into complex types. Please note that the deserialization
    happens only after validating the incoming data.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some other noteworthy features of the DRF:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Routers**: The DRF supports automatic URL routing to Django and provides
    a consistent and straightforward way to wire the view logic to a set of URLs'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Class-based views**: A dominant pattern that enables the reusability of common
    functionalities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hyperlinking APIs**: The DRF supports various styles (using primary keys,
    hyperlinking between entities, and so on) to represent the relationship between
    entities'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Generic views**: Allows us to build API views that map to the database models'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are many more features, such as caching, throttling, and testing, that
    the DRF supports which we won't cover.
  prefs: []
  type: TYPE_NORMAL
- en: Benefits of the DRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of the benefits of the DRF:'
  prefs: []
  type: TYPE_NORMAL
- en: Web-browsable API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authentication policies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Powerful serialization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensive documentation and excellent community support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Simple yet powerful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Test coverage of source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure and scalable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of the DRF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some facts that may disappoint some Python app developers who intend
    to use the DRF:'
  prefs: []
  type: TYPE_NORMAL
- en: Monolithic and components get deployed together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Based on Django ORM
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Steep learning curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slow response time
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask is a microframework for Python developers based on Werkzeug (WSGI toolkit)
    and Jinja 2 (template engine). It comes under BSD licensing. **Flask** is very
    easy to set up and simple to use. Like other frameworks, Flask comes with several
    out-of-the-box capabilities, such as a built-in development server, debugger,
    unit test support, templating, secure cookies, and RESTful request dispatching.
    Let's have a look at one more powerful RESTful API framework, called **Flask-RESTful**,
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Flask-RESTful
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask-RESTful is an extension for Flask that provides additional support for
    building REST APIs. You will never be disappointed with the time it takes to develop
    an API. Flask-Restful is a lightweight abstraction that works with the existing
    ORM/libraries. Flask-RESTful encourages best practices with minimal setup. Now
    let's get a glimpse of the core features that Flask-RESTful offers.
  prefs: []
  type: TYPE_NORMAL
- en: Core features of Flask-RESTful
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask-RESTful comes with several built-in features; this section covers a few
    unique RESTful features since we've covered the most common RESTful framework
    features with Django, and there isn't much difference between their supporting
    core features.
  prefs: []
  type: TYPE_NORMAL
- en: Resourceful routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The design goal of Flask-RESTful is to provide resources built on top of Flask
    pluggable views. The pluggable views provide a simple way (defining a resource
    method) to access the HTTP methods. Consider the following example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Restful request parsing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Request parsing refers to an interface, modeled after the Python parser *interface*
    for command-line arguments, called `argparser`. The RESTful request parser is
    designed to provide uniform and straightforward access to any variable that comes
    within the `(flask.request)` request object.
  prefs: []
  type: TYPE_NORMAL
- en: Output fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In most cases, app developers prefer to control rendering response data, and
    Flask-RESTful provides a mechanism where you can use ORM models or even custom
    classes as an object to render. Another interesting fact about this framework
    is that app developers don't need to worry about exposing any internal data structures
    as its let one format and filter the response objects. So, when we look at the
    code, it'll be evident which data would go for rendering and how it'll be formatted.
  prefs: []
  type: TYPE_NORMAL
- en: Other noteworthy features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we''ve covered a few unique features in the previous section, here are some
    other noteworthy features of Flask-RESTful:'
  prefs: []
  type: TYPE_NORMAL
- en: '**API**: This is the main entry point for the restful API, which we''ll initialize
    with the Flask application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**ReqParse**: This enables us to add and parse multiple arguments in the context
    of the single request.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Input**: A useful functionality, it parses the input string and returns true
    or false depending on the Input. If the input is from the JSON body,  the type
    is already native Boolean and passed through without further parsing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits of the Flask framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s look at some of the advantages of Flask and the Flask-Restful framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Built-in development server and debugger
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Out-of-the-box RESTful request dispatching
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for secure cookies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated unit-test support
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lightweight
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Very minimal setup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Faster (performance)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy NoSQL integration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensive documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drawbacks of Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here are some of Flask and Flask-RESTful''s disadvantages:'
  prefs: []
  type: TYPE_NORMAL
- en: Version management (managed by developers)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No brownie points as it doesn't have browsable APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: May incur a steep learning curve
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frameworks – a table of reference
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table provides a quick reference of a few other prominent micro-frameworks,
    their features, and supported programming languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Language** | **Framework** | **Short description** | **Prominent features**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Java | Blade | Fast and elegant MVC framework for Java8 | LightweightHigh
    performanceBased on the MVC patternRESTful-style router interfaceBuilt-in security
    |'
  prefs: []
  type: TYPE_TB
- en: '| Java/Scala | Play Framework | High-velocity Reactive webframework for Java
    and Scala | Lightweight, stateless, and web-friendly architectureBuilt on AkkaSupports
    predictable and minimal resource-consumption for highly-scalable applicationsDeveloper-friendly
    |'
  prefs: []
  type: TYPE_TB
- en: '| Java | Ninja Web Framework | Full-stack web framework | FastDeveloper-friendlyRapid
    prototypingPlain vanilla Java, dependency injection, first-class IDE integrationSimple
    and fast to test (mocked tests/integration tests)Excellent build and CI supportClean
    codebase – easy to extend |'
  prefs: []
  type: TYPE_TB
- en: '| Java | RESTEASY | JBoss-based implementation that integrates several frameworks
    to help to build RESTful Web and Java applications | Fast and reliableLarge communityEnterprise-readySecurity
    support |'
  prefs: []
  type: TYPE_TB
- en: '| Java | RESTLET | A lightweight and comprehensive framework based on Java,
    suitable for both server and client applications. | LightweightLarge communityNative
    REST supportConnectors set |'
  prefs: []
  type: TYPE_TB
- en: '| JavaScript | Express.js | Minimal and flexible Node.js-based JavaScript framework
    for mobile and web applications | HTTP utility methodsSecurity updatesTemplating
    engine |'
  prefs: []
  type: TYPE_TB
- en: '| PHP | Laravel | An open source web-app builder based on PHP and the MVC architecture
    pattern | Intuitive interfaceBlade template engineEloquent ORM as default |'
  prefs: []
  type: TYPE_TB
- en: '| Elixir | Phoenix (Elixir) | Powered with the Elixir functional language,
    a reliable and faster micro-framework | MVC-basedHigh application performanceErlong
    virtual machine enables better use of resources |'
  prefs: []
  type: TYPE_TB
- en: '| Python | Pyramid | Python-based micro-framework | LightweightFunction decoratorsEvents
    and subscribers supportEasy implementations and high productivity |'
  prefs: []
  type: TYPE_TB
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are about to conclude another exciting chapter that dealt with unique, high-productive,
    lightweight, developer friendly, quick-time-to-market, highly-scalable frameworks
    from three major programming languages—Java, Go (Golang), and Python. You might
    have observed that this chapter covered the most popular frameworks and their
    core functionality and touched on a few noteworthy features along the way. This
    chapter gave readers a few ideas about the frameworks' advantages and disadvantages.
    We discussed *Spring-Boot*, *Light 4j*, *Spark Framework*, *Dropwizard*, *Gin-*gonic,
    *Revel*, *Django*, and *Flask*. It's evident that there are several excellent
    frameworks you can use to jump-start your RESTful API development using your programming
    language of choice. But one chapter, and only a few pages of information, doesn't
    begin to cover the greatness of these frameworks and what they bring to the table.
    We hope this chapter gave you a fair idea of the popular frameworks so that you
    can kick-start not only your prototyping but also production-grade RESTful applications.
    In the next chapter, we'll explore best practices for migrating legacy applications
    to capable microservices.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Building RESTful Python Web Services* by Gastón C. Hillar, [https://www.packtpub.com/application-development/building-restful-python-web-services](https://www.packtpub.com/application-development/building-restful-python-web-services) 
    [October 2016](https://www.packtpub.com/application-development/building-restful-python-web-services)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Building RESTful Web services with Go* by Naren Yellavula, [https://www.packtpub.com/application-development/building-restful-web-services-go](https://www.packtpub.com/application-development/building-restful-web-services-go)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
