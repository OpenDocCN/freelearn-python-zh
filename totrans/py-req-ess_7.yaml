- en: Chapter 7. Implementing a Web Application with Python Using Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To ensure prosperity in the process of learning about the Requests module, there
    seems to be nothing more important than an application of all the skills and knowledge
    that you attained until now. So, here we pave the way to apply the expertise you
    have gained till date, by creating a web application with the Flask framework.
    This will give you an in-depth knowledge of developing a practical web application
    and writing test cases for it. We do incline ourselves towards following the best
    practices and a hands-on approach in this process. Let us dive in to learn the
    stuff.
  prefs: []
  type: TYPE_NORMAL
- en: What is Flask?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask is a small yet powerful framework for creating web applications with Python.
    It can be called a **micro framework**. It is so small that if you could build
    a good rapport with it, you can understand all of its source code. It is powerful
    because of its goodies called **extensions** and its ability to provide all the
    basic services as a whole. The extensions can be added according to the application's
    requirement. The man behind Flask framework is Armin Ronacher, who released it
    on April 1, 2010.
  prefs: []
  type: TYPE_NORMAL
- en: 'Flask goodies are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Flask comes up with an inbuilt development server, which assists you in the
    development process and in the testing of programs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Error logging is made simple in Flask, with its interactive web-based debugger.
    When executing your code, if any bug has emerged in the way, an error stack trace
    will be shown on the web page, which makes it easy to deal with. This can be achieved
    by setting the flag of `app.debug` to `True`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With its lightweight nature, Flask is a perfect framework to build RESTful web
    services. The route decorator which helps to bind a function to a URL can take
    the HTTP methods as arguments that pave a way to build API's in an ideal manner.
    In addition, working with JSON data is simple with Flask.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The template support for Flask is served by a flexible template engine called
    **Jinja2**. This makes the process of rendering the templates a smoother task.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Session object is another goodie which saves the user's session. It stores
    the requests of the user so that the application can remember the different requests
    from the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flask uses the **Web Server Gateway Interface** (**WSGI**) protocol while dealing
    with requests from clients and it is 100 % WSGI compliant.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting started with Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can kick-start our application development with a simple example, which
    gives you an idea of how we program in Python with a flask framework. In order
    to write this program, we need to perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a WSGI application instance, as every application in Flask needs one
    to handle requests from the client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a `route` method which associates a URL and the function which handles
    it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Activate the application's server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Here is an example which follows the preceding steps to make a simple application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we have created a WSGI application instance
    using the Flask's `Flask` class, and then we defined a route which maps the path
    "`/`" and the view function `home` to process the request using a Flask's decorator
    function `Flask.route()`. Next, we used the `app.run()` which tells the server
    to run the code. And at that end, it will result in a web page showing up `"Hello
    Guest!",` when the code is executed.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before initiating the programming process, you will need to install the required
    dependencies. Let's initiate the installation process by creating a virtual environment
    using **virtual environment wrapper**. It's one of the best practices to use a
    virtual environment while creating an application. The virtual environment wrapper
    is a tool which puts all the dependencies of the project in one place.
  prefs: []
  type: TYPE_NORMAL
- en: This practice will mitigate a lot of complications while dealing with different
    projects in your system. In our tutorial the installation and application development
    goes forward using Python version 2.7.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the steps for setting up the environment:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the virtual environment wrapper using `pip`. You may have to use `sudo`
    for administrative privileges:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: All the installation packages related to virtual environments are placed in
    one folder for the sake of convenience. **Virtualenvwrapper** identifies the directory
    using an environmental variable `WORKON_HOME`. So, set the environmental variable
    to `~/Envs` or anything of your choice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `WORKON_HOME` directory using the following command if it doesn''t
    exist on your local machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to use the utilities provided by the `virtualenvwrapper,` we need
    to activate the shell script `virtualenvwrapper.sh` as shown in the following
    lines. On Ubuntu machines, we can find this script in the `/usr/local/bin` location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For the sake of convenience, add the commands in steps 2 and 4 to your shell
    startup file to initialize and activate the `virtualenvwrapper` utilities at your
    terminal's startup.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, use the `mkvirtualenv` command to create a new virtual environment for
    your project with the name `survey`. Once the `survey` environment is activated
    it gets displayed with the environment name in the closed braces before the shell
    prompt.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Installing required packages with pip
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are going to use **Flask-SQLAlchemy** in this project which is a Flask extension
    module that acts as an **Object Relational Mapper** (**ORM**) to interact with
    the database. We will also be using modules like `requests`, `httpretty`, `beautifulsoup`
    in the development of our `survey` application which we will be building in this
    tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now install the following packages with your virtual environment activated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Survey – a simple voting application using Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To create the `survey` application, we are going to follow an approach which
    will give you an easy understanding of the ins and outs of the application and
    also will make this process of developing a joyride.
  prefs: []
  type: TYPE_NORMAL
- en: Our development procedure drives you through the process of getting you introduced
    to all the functions that the project deals with. And then, we will implement
    each and every function step-by-step. During the development process we will be
    following the **Model-View-Controller** (**MVC**) design pattern, which is popular
    for developing web applications.
  prefs: []
  type: TYPE_NORMAL
- en: The main aim of the `survey` application is to record the number of responses
    — `'yes'`, `'no'` and `'maybe'` - for the created survey questions.
  prefs: []
  type: TYPE_NORMAL
- en: Basic file structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For developing a Flask application, we are following a specific structure to
    organize the contents of our application. Here is the file structure of the application
    that we are going to develop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic file structures](img/B03661_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Here is a description of all the files and folders present in our application''s
    file structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Name of the File/Folder | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `__init__.py` | Initializes our project and adds it to the `PYTHONPATH` |'
  prefs: []
  type: TYPE_TB
- en: '| `server.py` | Invokes the application development server to startup. |'
  prefs: []
  type: TYPE_TB
- en: '| `survey/__init__.py` | Initializes our application and brings various components
    into one place. |'
  prefs: []
  type: TYPE_TB
- en: '| `survey/app.db` | A `sqlite3` file to store your data |'
  prefs: []
  type: TYPE_TB
- en: '| `survey/models.py` | Defines the models of our application. |'
  prefs: []
  type: TYPE_TB
- en: '| `survey/templates` | A place to put all the `Jinja2` templates. |'
  prefs: []
  type: TYPE_TB
- en: '| `survey/tests.py` | A file in which various test cases related to the app
    are written. |'
  prefs: []
  type: TYPE_TB
- en: '| `survey/views.py` | Defines the routes of your application. |'
  prefs: []
  type: TYPE_TB
- en: In our Survey application, `survey_project` is the project root. Now, let us
    create all the files and folders with respect to the above file structure and
    place the following contents in the `survey_project/__init__.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Building the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, we will introduce you to all the functions of the `survey` application.
    The following is the detailed set of tasks our application is bound to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create survey questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View list of all questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View a specific question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modify a question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Delete a question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Up-vote a question
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Every question stores information related to a specific survey. The fields
    that a `Question` model (a single definitive source of information about the data)
    contains are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: A primary key to identify each question uniquely'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`question_text`: Describes the survey'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number_of_yes_votes`: Stores the number of `''yes''` votes polled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number_of_no_votes`: Stores the number of `''no''` votes polled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number_of_maybe_votes`: Stores the number of `''maybe''` votes polled'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let us start designing the resource holders, what we call URLs, for the
    previously mentioned tasks. These URLs need specific HTTP methods to communicate
    with the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table throws a spotlight on how we are going to design the URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Task | HTTP method | URL |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| List of all questions | `GET` | `http://[hostname:port]/` |'
  prefs: []
  type: TYPE_TB
- en: '| Create a survey question | `POST` | `http://[hostname:port]/questions` |'
  prefs: []
  type: TYPE_TB
- en: '| View a specific question | `GET` | `http://[hostname:port]/questions/[question_id]`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Modify a question | `PUT` | `http://[hostname:port]/questions/[question_id]`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Delete a question | `DELETE` | `http://[hostname:port]/questions/[question_id]`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Up-vote a question | `POST` | `http://[hostname:port]/questions/[question_id]/vote`
    |'
  prefs: []
  type: TYPE_TB
- en: '| Up-vote a question form | `GET` | `http://[hostname:port]/questions/[question_id]/vote`
    |'
  prefs: []
  type: TYPE_TB
- en: '| New question form | `GET` | `http://[hostname:port]/questions/new` |'
  prefs: []
  type: TYPE_TB
- en: Writing models with Flask-SQLAlchemy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: SQLAlchemy is a Python Object Relational Mapper (ORM) and a query toolkit to
    interact with various databases. It provides a set of utilities which includes
    a base class to represent the models and a set of helper classes and functions
    to represent a database.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A model is a logical representation of a table in a relational database which
    contains information about data.
  prefs: []
  type: TYPE_NORMAL
- en: Flask-SQLAlchemy is an extension to the Flask framework which adds support to
    SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: Defining a model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While defining a model with Flask-SQLAlchemy, we need to keep the following
    three steps in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a database instance.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Define a model using the database instance created before.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call a method in the database instance to create the tables in the database.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating a database instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our application, we do need to create a database instance to store the data.
    For that, we need to configure the `'SQLALCHEMY_DATABASE_URI'` attribute in the
    WSGI application instance as shown in the following code. This code should be
    saved in the `survey/__init__.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '**__init__.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we created a WSGI application instance using
    the Flask's `Flask` class and configured the `'SQLALCHEMY_DATABASE_URI'` variable.
    Next, we created a database instance called `db` which is used to define models
    and to perform various queries.
  prefs: []
  type: TYPE_NORMAL
- en: Creating survey models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In order to store the data related to the `survey` application in the database,
    we should define a model called `Question`. This code lives in `survey/models.py`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '**models.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we defined the `Question` model which extends from `db.Model`.
    It contains five fields to store the data related to a specific survey:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`question_text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number_of_yes_votes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number_of_no_votes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`number_of_maybe_votes`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now let us go ahead and add a constructor method, which enables us to set the
    instance variables for the `Question` object that we created in the previous lines
    of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The preceding `__init__()` method takes the `Question` object and its values
    as parameters. Then, it will set the instance variables of the object that we
    passed.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create a method called `vote()` which increments the counter variables
    for the `'yes'`, `'no'` and `'maybe'` votes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding lines of code, we defined a `vote()` method, which takes the
    `Question` object as its first argument and the `vote_type` as its second argument.
    Based on the `vote_type` (`'yes'`, `'no'`, or `'maybe'`), the corresponding `number_of_<vote_type>_votes`
    of the `Question` object that we passed gets incremented.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tables in the database
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that we are done with defining the models related to our application using
    the database instance object called `db`, we need to create corresponding tables
    in the databases. For that, we need to call the method `create_all()`, which is
    present in the database instance — `db`.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we generally call this function before invoking the server
    defined in `runserver.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: Querying database models
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now, we have the database models ready. Let us query the data from the database
    using the SQLAlchemy's ORM. We'll perform the basic create, retrieve, update,
    and delete (CRUD) operations on our database instance — `db`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before making queries, let us move to our project root directory and fire up
    the Python console to execute the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let us create a `Question` object in the database. Creating an object
    using SQLAlchemy''s ORM involves three essential steps as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see that:'
  prefs: []
  type: TYPE_NORMAL
- en: The first step creates a Python object for the model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next step adds the created Python object to the db's session.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last step involves committing the object to the database.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Retrieving the objects from the database is very simple using the ORM. The
    following query retrieves all the objects from the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: We can also retrieve a model object from the database using its primary key.
    If we look at the `Question` model, we have a primary key with the column name
    `id`. Now, let us go ahead and access it.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: It is time to vote a survey. Fetch the object with `id` value `1` and use its
    `vote()` method to increase the number of votes of that choice.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let us learn how to delete a record from the database using the `db.session.delete()`
    method as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: If you try to access the same object, it will result in the `None` value.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A view is a Python function, which receives a web request and sends back a web
    response. The response of a view can be a simple string, web page, the content
    of a file, or anything. Whenever a Flask application gets a request from the client,
    it will look for a `view` function to service it. The view contains the business
    logic which is necessary to process a request.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous sections, we have created the necessary database models. Now,
    in this section, we will write the `view` functions. Let us create view for every
    resource we mentioned in the previous table, which throws spot light on how we
    are going to design the URLs. All the views should be created in the file `survey/views.py`.
  prefs: []
  type: TYPE_NORMAL
- en: List of all questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This view shows all the surveys that we have created in the database. The Flask
    application will invoke this view whenever the client requests the root of the
    application. Add the following code to the `survey/views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `@app.route()` decorator maps the path `'/'` and the view function `home()`.
    The `home` view retrieves all the questions from the database using the SQLAlchemy
    ORM and renders a template named `'index.html'` using the `render_template` method.
    The `render_template` method takes the template name and a sequence of arguments
    to return a web page.
  prefs: []
  type: TYPE_NORMAL
- en: New survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This view returns an HTML web form to create a new survey question. This view
    is called when a user visits the path `/questions/new`. Add the following code
    to the `survey/views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Creating a new survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view creates a new survey in the database and shows the list of available
    questions as a response. This is invoked by the Flask application, when a user
    submits a request to a URL containing `/questions`, using the `POST` method. The
    data to create a new question can be accessed within a view using the `request.form`
    dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Displaying a survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This view shows the requested survey using the `question_id` argument passed
    in the URL. This view gets triggered when a user requests the path `''/questions/<question_id>''`
    with the HTTP `''GET''` verb:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Updating a survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This view is used whenever a user wants to modify an existing question. This
    is invoked when a user submits the data to modify the `Question`. We can connect
    with this resource using HTTP''s `''PUT''` method at `''/questions/<question_id>''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Deleting a survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view is used to delete a specific survey from the database. The specific
    survey is identified based on the `question_id` value passed in the URL. The users
    can access this web page at `'/questions/<question_id>'` using the `'DELETE'`
    HTTP verb. Once the question gets deleted from the database, the user will be
    prompted with a message and a list of available questions.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: New vote form to caste a vote in a survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view returns a web page containing a HTML form to vote a particular choice
    in a survey. It can be accessed at `'/questions/<question_id>/vote'`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Casting a vote to a particular choice in a survey
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This view is used to cast a new vote to a particular choice in a survey. The
    user has to submit the specific choice to the resource `'/questions/<question_id>/vote'`
    using the `'POST'` method. After the successful casting of a vote, the user is
    redirected to the survey details page.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A template is a simple text document which contains block tags or variables.
    **Flask micro-framework** makes use of the `Jinja2` template engine for rendering
    the HTML pages.
  prefs: []
  type: TYPE_NORMAL
- en: In our application, we use five different templates which includes a `base`
    template—`base.html`. This `base` template is a layout consisting of the common
    elements of all the templates. The four other templates (`index.html`, `show.html`,
    `vote.html` and `new.html`) make use of a concept called **template inheritance**
    provided by the `Jinja2` template engine. It is used to enable those common features
    to get showed up without a redundant code in every template.
  prefs: []
  type: TYPE_NORMAL
- en: The base template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This template is a skeleton for all the other templates. It contains a common
    navigation menu section and a placeholder to hold the primary content block of
    every page in this application. The `survey/templates/base.html` template will
    contain the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The list of questions template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As we need to show the list of questions in a web page, we iterate over the
    `questions` variable using a `for` loop tag and display all the vote counts of
    a specific survey. Add the following to the `survey/templates/index.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Creating a new survey template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To show an HTML form containing a new survey question, we defined a template
    called `survey/templates/new.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**new.html**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Showing the details of a survey template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To display all the details of a survey, create a template in the following
    way. This template also includes a link to the `cast your vote` page. Add the
    following code to the `survey/templates/show.html` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Casting a vote template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To cast a vote, we need to display a web page containing a HTML form with a
    survey and its choices. Add the following code to the `survey/templates/vote.html`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Running the survey application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Hurray! We succeeded in creating an application which will allow the users
    to create a survey, retrieve a survey, update a survey, delete a survey, and cast
    the vote of a choice for a survey. Perform the following steps for running the
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before running the server, let us go ahead and fill the contents of `server.py`
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, let us run the application using the `runserver.py` script as shown in
    the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, the server is up and running. To access the application on a web browser,
    visit the URL—`http://127.0.0.1:5000/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We are done!
  prefs: []
  type: TYPE_NORMAL
- en: Writing unit tests to survey applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating an application without test cases is half done. Even though you take
    a lot of care while developing the application, there might be a chance of encountering
    errors at some point. Writing test cases will always leave us at a safe point.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we are going to write unit test cases for some tasks in our
    survey application. Add the following test case code to `survey/tests.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the following from the preceding block of code:'
  prefs: []
  type: TYPE_NORMAL
- en: The initial lines of code import all the necessary modules into the memory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `setUp()` method in the `TestSurveyApp` drops all the existing tables and
    creates them for every test case.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `test_defaults` test case will test the defaults of the `Question` object
    that was created. If the defaults do not match the expected inputs, the test case
    fails.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `test_votes()` will up-vote a specific choice for a survey and test whether
    the voted choice gets incremented and other choices remain the same.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `test_title()` will test whether the title of a response matches with the
    expected title. It uses the `BeautifulSoup` library to access the title from the
    response contents.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learnt about the Flask micro-framework and looked at the
    different features of Flask. We also set up a virtual environment using virtualenvwrapper,
    and created a web application using Flask, Flask-SQLAlchemy, and Jinja2\. Finally,
    we wrote unit tests for the developed application.
  prefs: []
  type: TYPE_NORMAL
