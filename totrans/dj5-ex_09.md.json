["```py\npython -m pip install stripe==9.3.0 \n```", "```py\nSTRIPE_PUBLISHABLE_KEY=pk_test_XXXX\nSTRIPE_SECRET_KEY=sk_test_XXXX \n```", "```py\npython -m pip install python-decouple==3.8 \n```", "```py\n**from** **decouple** **import** **config**\n# ...\n**STRIPE_PUBLISHABLE_KEY = config(****'****STRIPE_PUBLISHABLE_KEY'****)**\n**STRIPE_SECRET_KEY = config(****'STRIPE_SECRET_KEY'****)**\n**STRIPE_API_VERSION =** **'2024-04-10'** \n```", "```py\npython manage.py startapp payment \n```", "```py\nINSTALLED_APPS = [\n    # ...\n    'cart.apps.CartConfig',\n    'orders.apps.OrdersConfig',\n**'payment.apps.PaymentConfig'****,**\n'shop.apps.ShopConfig',\n] \n```", "```py\nfrom django.shortcuts import **redirect,** render \n```", "```py\n# launch asynchronous task\norder_created.delay(order.id)\nreturn render(\n  request, 'orders/order/created.html', {'order': order}\n) \n```", "```py\n# launch asynchronous task\norder_created.delay(order.id)\n**# set the order in the session**\n**request.session[****'order_id'****] = order.****id**\n**# redirect for payment**\n**return** **redirect(****'payment:process'****)** \n```", "```py\nfrom django.shortcuts import **redirect,** render\n# ...\ndef order_create(request):\n    cart = Cart(request)\n    if request.method == 'POST':\n        form = OrderCreateForm(request.POST)\n        if form.is_valid():\n            order = form.save()\n            for item in cart:\n                OrderItem.objects.create(\n                    order=order,\n                    product=item['product'],\n                    price=item['price'],\n                    quantity=item['quantity']\n                )\n            # clear the cart\n            cart.clear()\n            # launch asynchronous task\n            order_created.delay(order.id)\n**# set the order in the session**\n **request.session[****'order_id'****] = order.****id**\n**# redirect for payment**\n**return** **redirect(****'payment:process'****)**\nelse:\n        form = OrderCreateForm()\n    return render(\n        request,\n        'orders/order/create.html',\n        {'cart': cart, 'form': form}\n    ) \n```", "```py\nfrom decimal import Decimal\nimport stripe\nfrom django.conf import settings\nfrom django.shortcuts import get_object_or_404, redirect, render\nfrom django.urls import reverse\nfrom orders.models import Order\n# create the Stripe instance\nstripe.api_key = settings.STRIPE_SECRET_KEY\nstripe.api_version = settings.STRIPE_API_VERSION\ndef payment_process(request):\n    order_id = request.session.get('order_id')\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        success_url = request.build_absolute_uri(\n            reverse('payment:completed')\n        )\n        cancel_url = request.build_absolute_uri(\n            reverse('payment:canceled')\n        )\n        # Stripe checkout session data\n        session_data = {\n            'mode': 'payment',\n            'client_reference_id': order.id,\n            'success_url': success_url,\n            'cancel_url': cancel_url,\n            'line_items': []\n        }\n        # create Stripe checkout session\n        session = stripe.checkout.Session.create(**session_data)\n        # redirect to Stripe payment form\nreturn redirect(session.url, code=303)\n    else:\n        return render(request, 'payment/process.html', locals()) \n```", "```py\ndef payment_process(request):\n    order_id = request.session.get('order_id')\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        success_url = request.build_absolute_uri(\n            reverse('payment:completed')\n        )\n        cancel_url = request.build_absolute_uri(\n            reverse('payment:canceled')\n        )\n        # Stripe checkout session data\n        session_data = {\n            'mode': 'payment',\n            'success_url': success_url,\n            'cancel_url': cancel_url,\n            'line_items': []\n        }\n**# add order items to the Stripe checkout session**\n**for** **item** **in** **order.items.****all****():**\n **session_data[****'line_items'****].append(**\n **{**\n**'price_data'****: {**\n**'unit_amount'****:** **int****(item.price * Decimal(****'100'****)),**\n**'currency'****:** **'usd'****,**\n**'product_data'****: {**\n**'name'****: item.product.name,**\n **},**\n **},**\n**'quantity'****: item.quantity,**\n **}**\n **)**\n# create Stripe checkout session\n        session = stripe.checkout.Session.create(**session_data)\n        # redirect to Stripe payment form\nreturn redirect(session.url, code=303)\n    else:\n        return render(request, 'payment/process.html', locals()) \n```", "```py\ndef payment_completed(request):\n    return render(request, 'payment/completed.html')\ndef payment_canceled(request):\n    return render(request, 'payment/canceled.html') \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'payment'\nurlpatterns = [\n    path('process/', views.payment_process, name='process'),\n    path('completed/', views.payment_completed, name='completed'),\n    path('canceled/', views.payment_canceled, name='canceled'),\n] \n```", "```py\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('cart/', include('cart.urls', namespace='cart')),\n    path('orders/', include('orders.urls', namespace='orders')),\n **path(****'payment/'****, include(****'payment.urls'****, namespace=****'payment'****)),**\n    path('', include('shop.urls', namespace='shop')),\n] \n```", "```py\ntemplates/\n    payment/\n        process.html\n        completed.html\n        canceled.html \n```", "```py\n{% extends \"shop/base.html\" %}\n{% load static %}\n{% block title %}Pay your order{% endblock %}\n{% block content %}\n  <h1>Order summary</h1>\n<table class=\"cart\">\n<thead>\n<tr>\n<th>Image</th>\n<th>Product</th>\n<th>Price</th>\n<th>Quantity</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n      {% for item in order.items.all %}\n        <tr class=\"row{% cycle \"1\" \"2\" %}\">\n<td>\n<img src=\"{% if item.product.image %}{{ item.product.image.url }}\n            {% else %}{% static \"img/no_image.png\" %}{% endif %}\">\n</td>\n<td>{{ item.product.name }}</td>\n<td class=\"num\">${{ item.price }}</td>\n<td class=\"num\">{{ item.quantity }}</td>\n<td class=\"num\">${{ item.get_cost }}</td>\n</tr>\n      {% endfor %}\n      <tr class=\"total\">\n<td colspan=\"4\">Total</td>\n<td class=\"num\">${{ order.get_total_cost }}</td>\n</tr>\n</tbody>\n</table>\n<form action=\"{% url \"payment:process\" %}\" method=\"post\">\n<input type=\"submit\" value=\"Pay now\">\n    {% csrf_token %}\n  </form>\n{% endblock %} \n```", "```py\n{% extends \"shop/base.html\" %}\n{% block title %}Payment successful{% endblock %}\n{% block content %}\n  <h1>Your payment was successful</h1>\n<p>Your payment has been processed successfully.</p>\n{% endblock %} \n```", "```py\n{% extends \"shop/base.html\" %}\n{% block title %}Payment canceled{% endblock %}\n{% block content %}\n  <h1>Your payment has not been processed</h1>\n<p>There was a problem processing your payment.</p>\n{% endblock %} \n```", "```py\ndocker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13.1-management \n```", "```py\ncelery -A myshop worker -l info \n```", "```py\npython manage.py runserver \n```", "```py\nSTRIPE_PUBLISHABLE_KEY=pk_test_XXXX\nSTRIPE_SECRET_KEY=sk_test_XXXX\n**STRIPE_WEBHOOK_SECRET=whsec_XXXX** \n```", "```py\n# ...\nSTRIPE_PUBLISHABLE_KEY = config('STRIPE_PUBLISHABLE_KEY')\nSTRIPE_SECERT_KEY = config('STRIPE_SECRET_KEY')\nSTRIPE_API_VERSION = '2024-04-10'\n**STRIPE_WEBHOOK_SECRET = config(****'STRIPE_WEBHOOK_SECRET'****)** \n```", "```py\nimport stripe\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom orders.models import Order\n@csrf_exempt\ndef stripe_webhook(request):\n    payload = request.body\n    sig_header = request.META['HTTP_STRIPE_SIGNATURE']\n    event = None\ntry:\n        event = stripe.Webhook.construct_event(\n            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET\n        )\n    except ValueError as e:\n        # Invalid payload\nreturn HttpResponse(status=400)\n    except stripe.error.SignatureVerificationError as e:\n        # Invalid signature\nreturn HttpResponse(status=400)\n    return HttpResponse(status=200) \n```", "```py\n@csrf_exempt\ndef stripe_webhook(request):\n    payload = request.body\n    sig_header = request.META['HTTP_STRIPE_SIGNATURE']\n    event = None\ntry:\n        event = stripe.Webhook.construct_event(\n            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET\n        )\n    except ValueError as e:\n        # Invalid payload\nreturn HttpResponse(status=400)\n    except stripe.error.SignatureVerificationError as e:\n        # Invalid signature\nreturn HttpResponse(status=400)\n**if** **event.****type** **==** **'checkout.session.completed'****:**\n **session = event.data.****object**\n**if** **(**\n **session.mode ==** **'payment'**\n**and** **session.payment_status ==** **'paid'**\n **):**\n**try****:**\n **order = Order.objects.get(**\n**id****=session.client_reference_id**\n **)**\n**except** **Order.DoesNotExist:**\n**return** **HttpResponse(status=****404****)**\n**# mark order as paid**\n **order.paid =** **True**\n **order.save()**\nreturn HttpResponse(status=200) \n```", "```py\nfrom django.urls import path\nfrom . import views**, webhooks**\napp_name = 'payment'\nurlpatterns = [\n    path('process/', views.payment_process, name='process'),\n    path('completed/', views.payment_completed, name='completed'),\n    path('canceled/', views.payment_canceled, name='canceled'),\n **path(****'webhook/'****, webhooks.stripe_webhook, name=****'stripe-webhook'****),**\n] \n```", "```py\nbrew install stripe/stripe-cli/stripe \n```", "```py\nstripe login \n```", "```py\nYour pairing code is: xxxx-yyyy-zzzz-oooo This pairing code verifies your authentication with Stripe.Press Enter to open the browser or visit https://dashboard.stripe.com/stripecli/confirm_auth?t=.... \n```", "```py\nstripe listen --forward-to 127.0.0.1:8000/payment/webhook/ \n```", "```py\nGetting ready... > Ready! You are using Stripe API Version [2024-04-10]. Your webhook signing secret is xxxxxxxxxxxxxxxxxxx (^C to quit) \n```", "```py\n2024-01-03 18:06:13   --> **payment_intent.created** [evt_...]\n2024-01-03 18:06:13  <--  [200] POST http://127.0.0.1:8000/payment/webhook/ [evt_...]\n2024-01-03 18:06:13   --> **payment_intent.succeeded** [evt_...]\n2024-01-03 18:06:13  <--  [200] POST http://127.0.0.1:8000/payment/webhook/ [evt_...]\n2024-01-03 18:06:13   --> **charge.succeeded** [evt_...]\n2024-01-03 18:06:13  <--  [200] POST http://127.0.0.1:8000/payment/webhook/ [evt_...]\n2024-01-03 18:06:14   --> **checkout.session.completed** [evt_...]\n2024-01-03 18:06:14  <--  [200] POST http://127.0.0.1:8000/payment/webhook/ [evt_...] \n```", "```py\nclass Order(models.Model):\n    # ...\n **stripe_id = models.CharField(max_length=****250****, blank=****True****)** \n```", "```py\npython manage.py makemigrations \n```", "```py\nMigrations for 'orders':\n  orders/migrations/0002_order_stripe_id.py\n    - Add field stripe_id to order \n```", "```py\npython manage.py migrate \n```", "```py\nApplying orders.0002_order_stripe_id... OK \n```", "```py\n# ...\n@csrf_exempt\ndef stripe_webhook(request):\n    # ...\nif event.type == 'checkout.session.completed':\n        session = event.data.object\nif (\n            session.mode == 'payment'\nand session.payment_status == 'paid'\n        ):\n            try:\n                order = Order.objects.get(\n                    id=session.client_reference_id\n                )\n            except Order.DoesNotExist:\n                return HttpResponse(status=404)\n            # mark order as paid\n            order.paid = True\n**# store Stripe payment ID**\n **order.stripe_id = session.payment_intent**\n            order.save()\n    return HttpResponse(status=200) \n```", "```py\n**from** **django.conf** **import** **settings**\nfrom django.db import models\nclass Order(models.Model):\n    # ...\nclass Meta:\n        # ...\ndef __str__(self):\n        return f'Order {self.id}'\ndef get_total_cost(self):\n        return sum(item.get_cost() for item in self.items.all())\n**def****get_stripe_url****(****self****):**\n**if****not** **self.stripe_id:**\n**# no payment associated**\n**return****''**\n**if****'_test_'****in** **settings.STRIPE_SECRET_KEY:**\n**# Stripe path for test payments**\n **path =** **'/test/'**\n**else****:**\n**# Stripe path for real payments**\n **path =** **'****/'**\n**return****f'https://dashboard.stripe.com****{path}****payments/****{self.stripe_id}****'** \n```", "```py\n# ...\n**from** **django.utils.safestring** **import** **mark_safe**\n**def****order_payment****(****obj****):**\n **url = obj.get_stripe_url()**\n**if** **obj.stripe_id:**\n **html =** **f'<a href=\"****{url}****\" target=\"_blank\">****{obj.stripe_id}****</a>'**\n**return** **mark_safe(html)**\n**return****''**\n**order_payment.short_description =** **'Stripe payment'**\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = [\n        'id',\n        'first_name',\n        'last_name',\n        'email',\n        'address',\n        'postal_code',\n        'city',\n        'paid',\n **order_payment,**\n'created',\n        'updated'\n    ]\n    # ... \n```", "```py\nimport csv\nimport datetime\nfrom django.http import HttpResponse\ndef export_to_csv(modeladmin, request, queryset):\n    opts = modeladmin.model._meta\n    content_disposition = (\n        f'attachment; filename={opts.verbose_name}.csv'\n )\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = content_disposition\n    writer = csv.writer(response)\n    fields = [\n        field\n        for field in opts.get_fields()\n        if not field.many_to_many and not field.one_to_many\n    ]\n    # Write a first row with header information\n    writer.writerow([field.verbose_name for field in fields])\n    # Write data rows\nfor obj in queryset:\n        data_row = []\n        for field in fields:\n            value = getattr(obj, field.name)\n            if isinstance(value, datetime.datetime):\n                value = value.strftime('%d/%m/%Y')\n            data_row.append(value)\n        writer.writerow(data_row)\n    return response\nexport_to_csv.short_description = 'Export to CSV' \n```", "```py\n@admin.register(Order)\nclass OrderAdmin(admin.ModelAdmin):\n    # ...\n **actions = [export_to_csv]** \n```", "```py\npython manage.py runserver \n```", "```py\nID,first name,last name,email,address,postal code,city,created,updated,paid,stripe id\n4,Antonio,Melé,email@domain.com,20 W 34th St,10001,New York,03/01/2024,03/01/2024,True,pi_3ORvzkGNwIe5nm8S1wVd7l7i\n... \n```", "```py\n**from** **django.contrib.admin.views.decorators** **import** **staff_member_required**\nfrom django.shortcuts import **get_object_or_404,** redirect, render\nfrom cart.cart import Cart\nfrom .forms import OrderCreateForm\nfrom .models import Order, OrderItem\nfrom .tasks import order_created\ndef order_create(request):\n    # ...\n**@staff_member_required**\n**def****admin_order_detail****(****request, order_id****):**\n **order = get_object_or_404(Order,** **id****=order_id)**\n**return** **render(**\n **request,** **'admin/orders/order/detail.html'****, {****'order'****: order}**\n **)** \n```", "```py\nurlpatterns = [\n    path('create/', views.order_create, name='order_create'),\n **path(**\n**'admin/order/<int:order_id>/'****,**\n **views.admin_order_detail,**\n **name=****'admin_order_detail'**\n**),**\n] \n```", "```py\nadmin/\n    orders/\n        order/\n            detail.html \n```", "```py\n{% extends \"admin/base_site.html\" %}\n{% block title %}\n  Order {{ order.id }} {{ block.super }}\n{% endblock %}\n{% block breadcrumbs %}\n  <div class=\"breadcrumbs\">\n<a href=\"{% url \"admin:index\" %}\">Home</a> &rsaquo;\n<a href=\"{% url \"admin:orders_order_changelist\" %}\">Orders</a>\n&rsaquo;\n<a href=\"{% url \"admin:orders_order_change\" order.id %}\">Order {{ order.id }}</a>\n&rsaquo; Detail\n  </div>\n{% endblock %}\n{% block content %}\n<div class=\"module\">\n<h1>Order {{ order.id }}</h1>\n<ul class=\"object-tools\">\n<li>\n<a href=\"#\" onclick=\"window.print();\">\n        Print order\n      </a>\n</li>\n</ul>\n<table>\n<tr>\n<th>Created</th>\n<td>{{ order.created }}</td>\n</tr>\n<tr>\n<th>Customer</th>\n<td>{{ order.first_name }} {{ order.last_name }}</td>\n</tr>\n<tr>\n<th>E-mail</th>\n<td><a href=\"mailto:{{ order.email }}\">{{ order.email }}</a></td>\n</tr>\n<tr>\n<th>Address</th>\n<td>\n      {{ order.address }},\n      {{ order.postal_code }} {{ order.city }}\n    </td>\n</tr>\n<tr>\n<th>Total amount</th>\n<td>${{ order.get_total_cost }}</td>\n</tr>\n<tr>\n<th>Status</th>\n<td>{% if order.paid %}Paid{% else %}Pending payment{% endif %}</td>\n</tr>\n<tr>\n<th>Stripe payment</th>\n<td>\n        {% if order.stripe_id %}\n          <a href=\"{{ order.get_stripe_url }}\" target=\"_blank\">\n            {{ order.stripe_id }}\n          </a>\n        {% endif %}\n      </td>\n</tr>\n</table>\n</div>\n<div class=\"module\">\n<h2>Items bought</h2>\n<table style=\"width:100%\">\n<thead>\n<tr>\n<th>Product</th>\n<th>Price</th>\n<th>Quantity</th>\n<th>Total</th>\n</tr>\n</thead>\n<tbody>\n      {% for item in order.items.all %}\n        <tr class=\"row{% cycle \"1\" \"2\" %}\">\n<td>{{ item.product.name }}</td>\n<td class=\"num\">${{ item.price }}</td>\n<td class=\"num\">{{ item.quantity }}</td>\n<td class=\"num\">${{ item.get_cost }}</td>\n</tr>\n      {% endfor %}\n      <tr class=\"total\">\n<td colspan=\"3\">Total</td>\n<td class=\"num\">${{ order.get_total_cost }}</td>\n</tr>\n</tbody>\n</table>\n</div>\n{% endblock %} \n```", "```py\nfrom django.urls import reverse\ndef order_detail(obj):\n    url = reverse('orders:admin_order_detail', args=[obj.id])\n    return mark_safe(f'<a href=\"{url}\">View</a>') \n```", "```py\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = [\n        'id',\n        'first_name',\n        'last_name',\n        'email',\n        'address',\n        'postal_code',\n        'city',\n        'paid',\n        order_payment,\n        'created',\n        'updated',\n **order_detail,**\n    ]\n    # ... \n```", "```py\npython manage.py runserver \n```", "```py\npython -m pip install WeasyPrint==61.2 \n```", "```py\n<html>\n<body>\n<h1>My Shop</h1>\n<p>\n    Invoice no. {{ order.id }}<br>\n<span class=\"secondary\">\n      {{ order.created|date:\"M d, Y\" }}\n    </span>\n</p>\n<h3>Bill to</h3>\n<p>\n    {{ order.first_name }} {{ order.last_name }}<br>\n    {{ order.email }}<br>\n    {{ order.address }}<br>\n    {{ order.postal_code }}, {{ order.city }}\n  </p>\n<h3>Items bought</h3>\n<table>\n<thead>\n<tr>\n<th>Product</th>\n<th>Price</th>\n<th>Quantity</th>\n<th>Cost</th>\n</tr>\n</thead>\n<tbody>\n      {% for item in order.items.all %}\n        <tr class=\"row{% cycle \"1\" \"2\" %}\">\n<td>{{ item.product.name }}</td>\n<td class=\"num\">${{ item.price }}</td>\n<td class=\"num\">{{ item.quantity }}</td>\n<td class=\"num\">${{ item.get_cost }}</td>\n</tr>\n      {% endfor %}\n      <tr class=\"total\">\n<td colspan=\"3\">Total</td>\n<td class=\"num\">${{ order.get_total_cost }}</td>\n</tr>\n</tbody>\n</table>\n<span class=\"{% if order.paid %}paid{% else %}pending{% endif %}\">\n    {% if order.paid %}Paid{% else %}Pending payment{% endif %}\n  </span>\n</body>\n</html> \n```", "```py\nimport weasyprint\nfrom django.contrib.staticfiles import finders\nfrom django.http import HttpResponse\nfrom django.template.loader import render_to_string\n@staff_member_required\ndef admin_order_pdf(request, order_id):\n    order = get_object_or_404(Order, id=order_id)\n    html = render_to_string('orders/order/pdf.html', {'order': order})\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = f'filename=order_{order.id}.pdf'\n    weasyprint.HTML(string=html).write_pdf(\n        response,\n        stylesheets=[weasyprint.CSS(finders.find('css/pdf.css'))]\n    )\n    return response \n```", "```py\nSTATIC_ROOT = BASE_DIR / 'static' \n```", "```py\npython manage.py collectstatic \n```", "```py\n131 static files copied to 'code/myshop/static'. \n```", "```py\nurlpatterns = [\n    # ...\n **path(****'admin/order/<int:order_id>/pdf/'****,**\n **views.admin_order_pdf,**\n **name=****'admin_order_pdf'**\n**),**\n] \n```", "```py\ndef order_pdf(obj):\n    url = reverse('orders:admin_order_pdf', args=[obj.id])\n    return mark_safe(f'<a href=\"{url}\">PDF</a>')\norder_pdf.short_description = 'Invoice' \n```", "```py\nclass OrderAdmin(admin.ModelAdmin):\n    list_display = [\n        'id',\n        'first_name',\n        'last_name',\n        'email',\n        'address',\n        'postal_code',\n        'city',\n        'paid',\n        order_payment,\n        'created',\n        'updated',\n        order_detail,\n **order_pdf,**\n    ] \n```", "```py\nfrom io import BytesIO\nimport weasyprint\nfrom celery import shared_task\nfrom django.contrib.staticfiles import finders\nfrom django.core.mail import EmailMessage\nfrom django.template.loader import render_to_string\nfrom orders.models import Order\n@shared_task\ndef payment_completed(order_id):\n    \"\"\"\n    Task to send an e-mail notification when an order is\n    successfully paid.\n    \"\"\"\n    order = Order.objects.get(id=order_id)\n    # create invoice e-mail\n    subject = f'My Shop - Invoice no. {order.id}'\n    message = (\n        'Please, find attached the invoice for your recent purchase.'\n    )\n    email = EmailMessage(\n        subject, message, 'admin@myshop.com', [order.email]\n    )\n    # generate PDF\n    html = render_to_string('orders/order/pdf.html', {'order': order})\n    out = BytesIO()\n    stylesheets=[weasyprint.CSS(finders.find('css/pdf.css'))]\n    weasyprint.HTML(string=html).write_pdf(out, stylesheets=stylesheets)\n    # attach PDF file\n    email.attach(\n        f'order_{order.id}.pdf', out.getvalue(), 'application/pdf'\n )\n    # send e-mail\n    email.send() \n```", "```py\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' \n```", "```py\nimport stripe\nfrom django.conf import settings\nfrom django.http import HttpResponse\nfrom django.views.decorators.csrf import csrf_exempt\nfrom orders.models import Order\n**from** **.tasks** **import** **payment_completed**\n@csrf_exempt\ndef stripe_webhook(request):\n    payload = request.body\n    sig_header = request.META['HTTP_STRIPE_SIGNATURE']\n    event = None\ntry:\n        event = stripe.Webhook.construct_event(\n            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET\n        )\n    except ValueError as e:\n        # Invalid payload\nreturn HttpResponse(status=400)\n    except stripe.error.SignatureVerificationError as e:\n        # Invalid signature\nreturn HttpResponse(status=400)\n    if event.type == 'checkout.session.completed':\n        session = event.data.object\nif (\n            session.mode == 'payment'\nand session.payment_status == 'paid'\n        ):\n            try:\n                order = Order.objects.get(\n                    id=session.client_reference_id\n                )\n            except Order.DoesNotExist:\n                return HttpResponse(status=404)\n            # mark order as paid\n            order.paid = True\n# store Stripe payment ID\n            order.stripe_id = session.payment_intent\n            order.save()\n            **# launch asynchronous task**\n **payment_completed.delay(order.****id****)**\nreturn HttpResponse(status=200) \n```", "```py\nMIME-Version: 1.0\nSubject: My Shop - Invoice no. 7\nFrom: admin@myshop.com\nTo: email@domain.com\nDate: Wed, 3 Jan 2024 20:15:24 -0000\nMessage-ID: <164841212458.94972.10344068999595916799@amele-mbp.home>\n--===============8908668108717577350==\nContent-Type: text/plain; charset=\"utf-8\"\nMIME-Version: 1.0\nContent-Transfer-Encoding: 7bit\nPlease, find attached the invoice for your recent purchase.\n--===============8908668108717577350==\nContent-Type: application/pdf\nMIME-Version: 1.0\nContent-Transfer-Encoding: base64\nContent-Disposition: attachment; filename=\"order_7.pdf\"\nJVBERi0xLjcKJfCflqQKMSAwIG9iago8PAovVHlwZSA... \n```"]