["```py\n$ pip install django\n\n```", "```py\n>>> import django\n>>> django.VERSION\n(1, 8, 4, 'final', 0)\n\n```", "```py\n$ django-admin startproject regex\n\n```", "```py\n$ python manage.py runserver\n\n```", "```py\n$ tree -A regex  # from the ch10 folder\nregex\n├── db.sqlite3\n├── entries\n│   ├── admin.py\n│   ├── forms.py\n│   ├── __init__.py\n│   ├── migrations\n│   │   ├── 0001_initial.py\n│   │   └── __init__.py\n│   ├── models.py\n│   ├── static\n│   │   └── entries\n│   │       └── css\n│   │           └── main.css\n│   ├── templates\n│   │   └── entries\n│   │       ├── base.html\n│   │       ├── footer.html\n│   │       ├── home.html\n│   │       ├── insert.html\n│   │       └── list.html\n│   └── views.py\n├── manage.py\n└── regex\n ├── __init__.py\n ├── settings.py\n ├── urls.py\n └── wsgi.py\n\n```", "```py\n$ python manage.py startapp entries\n\n```", "```py\nINSTALLED_APPS = (\n    ... django apps ...\n    'entries',\n)\n```", "```py\nLANGUAGE_CODE = 'en-gb'\nTIME_ZONE = 'Europe/London'\n```", "```py\n$ python manage.py migrate\n\n```", "```py\n$ python manage.py createsuperuser\n\n```", "```py\n$ python manage.py runserver\n\n```", "```py\nfrom django.db import models\nfrom django.contrib.auth.models import User\nfrom django.utils import timezone\n\nclass Entry(models.Model):\n    user = models.ForeignKey(User)\n    pattern = models.CharField(max_length=255)\n    test_string = models.CharField(max_length=255)\n    date_added = models.DateTimeField(default=timezone.now)\n\n    class Meta:\n        verbose_name_plural = 'entries'\n```", "```py\n$ python manage.py makemigrations entries\n$ python manage.py migrate\n\n```", "```py\nfrom django.contrib import admin\nfrom .models import Entry\n\n@admin.register(Entry)\nclass EntryAdmin(admin.ModelAdmin):\n    fieldsets = [\n        ('Regular Expression',\n         {'fields': ['pattern', 'test_string']}),\n        ('Other Information',\n         {'fields': ['user', 'date_added']}),\n    ]\n    list_display = ('pattern', 'test_string', 'user')\n    list_filter = ['user']\n    search_fields = ['test_string']\n```", "```py\nfrom django.forms import ModelForm\nfrom .models import Entry\n\nclass EntryForm(ModelForm):\n    class Meta:\n        model = Entry\n        fields = ['pattern', 'test_string']\n```", "```py\nimport re\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.messages.views import SuccessMessageMixin\nfrom django.core.urlresolvers import reverse_lazy\nfrom django.utils.decorators import method_decorator\nfrom django.views.generic import FormView, TemplateView\nfrom .forms import EntryForm\nfrom .models import Entry\n\nclass HomeView(TemplateView):\n    template_name = 'entries/home.html'\n\n    @method_decorator(\n        login_required(login_url=reverse_lazy('login')))\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        return self.render_to_response(context)\n\nclass EntryListView(TemplateView):\n    template_name = 'entries/list.html'\n\n    @method_decorator(\n        login_required(login_url=reverse_lazy('login')))\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        entries = Entry.objects.filter(\n user=request.user).order_by('-date_added')\n        matches = (self._parse_entry(entry) for entry in entries)\n        context['entries'] = list(zip(entries, matches))\n        return self.render_to_response(context)\n\n    def _parse_entry(self, entry):\n        match = re.search(entry.pattern, entry.test_string)\n        if match is not None:\n            return (\n                match.group(),\n                match.groups() or None,\n                match.groupdict() or None\n            )\n        return None\n\nclass EntryFormView(SuccessMessageMixin, FormView):\n    template_name = 'entries/insert.html'\n    form_class = EntryForm\n    success_url = reverse_lazy('insert')\n    success_message = \"Entry was created successfully\"\n\n    @method_decorator(\n        login_required(login_url=reverse_lazy('login')))\n    def get(self, request, *args, **kwargs):\n        return super(EntryFormView, self).get(\n            request, *args, **kwargs)\n\n    @method_decorator(\n        login_required(login_url=reverse_lazy('login')))\n    def post(self, request, *args, **kwargs):\n        return super(EntryFormView, self).post(\n            request, *args, **kwargs)\n\n    def form_valid(self, form):\n        self._save_with_user(form)\n        return super(EntryFormView, self).form_valid(form)\n\n    def _save_with_user(self, form):\n        self.object = form.save(commit=False)\n        self.object.user = self.request.user\n        self.object.save()\n\n```", "```py\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.contrib.auth import views as auth_views\nfrom django.core.urlresolvers import reverse_lazy\nfrom entries.views import HomeView, EntryListView, EntryFormView\n\nurlpatterns = [\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^entries/$', EntryListView.as_view(), name='entries'),\n url(r'^entries/insert$',\n EntryFormView.as_view(),\n name='insert'),\n\n    url(r'^login/$',\n        auth_views.login,\n        kwargs={'template_name': 'admin/login.html'},\n        name='login'),\n    url(r'^logout/$',\n        auth_views.logout,\n        kwargs={'next_page': reverse_lazy('home')},\n        name='logout'),\n\n    url(r'^$', HomeView.as_view(), name='home'),\n]\n```", "```py\n{% load static from staticfiles %}\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    {% block meta %}\n      <meta charset=\"utf-8\">\n      <meta name=\"viewport\"\n       content=\"width=device-width, initial-scale=1.0\">\n    {% endblock meta %}\n\n    {% block styles %}\n      <link href=\"{% static \"entries/css/main.css\" %}\"\n       rel=\"stylesheet\">\n    {% endblock styles %}\n\n    <title> {% block title %}Title{% endblock title %} </title>\n  </head>\n\n  <body>\n    <div id=\"page-content\">\n      {% block page-content %}\n      {% endblock page-content %}\n    </div>\n    <div id=\"footer\">\n      {% block footer %}\n {% endblock footer %}\n    </div>\n  </body>\n</html>\n```", "```py\n<div class=\"footer\">\n  Go back <a href=\"{% url \"home\" %}\">home</a>.\n</div>\n```", "```py\n{% extends \"entries/base.html\" %}\n{% block title%}Welcome to the Entry website.{% endblock title %}\n\n{% block page-content %}\n  <h1>Welcome {{ user.first_name }}!</h1>\n\n  <div class=\"home-option\">To see the list of your entries\n    please click <a href=\"{% url \"entries\" %}\">here.</a>\n  </div>\n  <div class=\"home-option\">To insert a new entry please click\n    <a href=\"{% url \"insert\" %}\">here.</a>\n  </div>\n  <div class=\"home-option\">To login as another user please click\n    <a href=\"{% url \"logout\" %}\">here.</a>\n  </div>\n    <div class=\"home-option\">To go to the admin panel\n    please click <a href=\"{% url \"admin:index\" %}\">here.</a>\n  </div>\n{% endblock page-content %}\n```", "```py\n{% extends \"entries/base.html\" %}\n{% block title%}Insert a new Entry{% endblock title %}\n\n{% block page-content %}\n  {% if messages %}\n    {% for message in messages %}\n      <p class=\"{{ message.tags }}\">{{ message }}</p>\n    {% endfor %}\n  {% endif %}\n\n  <h1>Insert a new Entry</h1>\n  <form action=\"{% url \"insert\" %}\" method=\"post\">\n    {% csrf_token %}{{ form.as_p }}\n    <input type=\"submit\" value=\"Insert\">\n  </form><br>\n{% endblock page-content %}\n\n{% block footer %}\n  <div><a href=\"{% url \"entries\" %}\">See your entries.</a></div>\n  {% include \"entries/footer.html\" %}\n{% endblock footer %}\n```", "```py\n{% extends \"entries/base.html\" %}\n{% block title%} Entries list {% endblock title %}\n\n{% block page-content %}\n {% if entries %}\n  <h1>Your entries ({{ entries|length }} found)</h1>\n  <div><a href=\"{% url \"insert\" %}\">Insert new entry.</a></div>\n\n  <table class=\"entries-table\">\n   <thead>\n     <tr><th>Entry</th><th>Matches</th></tr>\n   </thead>\n   <tbody>\n    {% for entry, match in entries %}\n     <tr class=\"entries-list {% cycle 'light-gray' 'white' %}\">\n      <td>\n        Pattern: <code class=\"code\">\n         \"{{ entry.pattern }}\"</code><br>\n        Test String: <code class=\"code\">\n         \"{{ entry.test_string }}\"</code><br>\n        Added: {{ entry.date_added }}\n      </td>\n      <td>\n        {% if match %}\n         Group: {{ match.0 }}<br>\n         Subgroups:\n          {{ match.1|default_if_none:\"none\" }}<br>\n         Group Dict: {{ match.2|default_if_none:\"none\" }}\n        {% else %}\n         No matches found.\n        {% endif %}\n      </td>\n     </tr>\n    {% endfor %}\n   </tbody>\n  </table>\n {% else %}\n  <h1>You have no entries</h1>\n  <div><a href=\"{% url \"insert\" %}\">Insert new entry.</a></div>\n {% endif %}\n{% endblock page-content %}\n\n{% block footer %}\n {% include \"entries/footer.html\" %}\n{% endblock footer %}\n```", "```py\n$ tree -A flask  # from the ch10 folder\nflask\n├── main.py\n└── templates\n └── main.html\n\n```", "```py\n<!doctype html>\n<title>Hello from Flask</title>\n<h1>\n  {% if name %}\n    Hello {{ name }}!\n  {% else %}\n    Hello shy person!\n  {% endif %}\n</h1>\n```", "```py\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\n@app.route('/<name>')\ndef hello(name=None):\n    return render_template('main.html', name=name)\n\nif __name__ == '__main__':\n    app.run()\n```", "```py\n$ python main.py\n\n```", "```py\nquotes = [\n    \"Thousands of candles can be lighted from a single candle, \"\n    \"and the life of the candle will not be shortened. \"\n    \"Happiness never decreases by being shared.\",\n    ...\n    \"Peace comes from within. Do not seek it without.\",\n]\n```", "```py\nimport json\nimport random\nimport falcon\nfrom quotes import quotes\n\nclass QuoteResource:\n    def on_get(self, req, resp):\n        quote = {\n            'quote': random.choice(quotes),\n            'author': 'The Buddha'\n        }\n        resp.body = json.dumps(quote)\n\napi = falcon.API()\napi.add_route('/quote', QuoteResource())\n\n```", "```py\n$ gunicorn main:api\n\n```", "```py\n{\n    quote: \"The mind is everything. What you think you become.\",\n    author: \"The Buddha\"\n}\n```"]