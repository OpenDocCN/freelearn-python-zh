["```py\nimport Blender\n\ndef setcolor(mat):\n   s = Blender.Get('curframe')%25\n   if int(Blender.Get('curframe')/25.0)%2 == 0:\n      c = s\n   else:\n      c = 25-s\n   c /= 25.0\n   mat.rgbCol = [c,c,c]\n\nif Blender.bylink and Blender.event == 'FrameChanged':\n   setcolor(Blender.link)\n```", "```py\nimport Blender\n\ndef setlayer(ob):\n   layer = 1+int(Blender.Get('curframe')/25.0)%2\n   ob.layers = [ layer ]\n   ob.makeDisplayList()\n   Blender.Window.RedrawAll()\n\nif Blender.bylink and Blender.event == 'FrameChanged':\n   setlayer(Blender.link)\n```", "```py\nimport Blender\n\nobjectname='Counter'\nscriptname='CounterScriptLink.py'\n\ndef setcounter(counterob):\n   seconds = int(Blender.Get('curframe')/25.0)+1\n   counterob.getData().setText(str(seconds))\n   counterob.makeDisplayList()\n   Blender.Window.RedrawAll()\n\nif Blender.bylink:\n   setcounter(Blender.link)\nelse:\n   countertxt    = Blender.Text3d.New(objectname)\n   scn           = Blender.Scene.GetCurrent()\n   counterob     = scn.objects.new(countertxt)\n   setcounter(counterob)\n   counterob.clearScriptLinks([scriptname])\n   counterob.addScriptLink(scriptname,'FrameChanged')\n\n```", "```py\n# SPACEHANDLER.VIEW3D.DRAW\n```", "```py\nimport Blender\nfrom Blender import *\n\nscn = Scene.GetCurrent()\nob  = scn.objects.active\nif ob.type == 'Mesh':\n   me = ob.getData(mesh = True)\n   if Blender.bylink:\n      p=ob.getProperty('Highlight')\n      vlist = me.getVertsFromGroup(p.getData())\n      matrix = ob.matrix\n      drawAuras([me.verts[vi].co*matrix for vi in vlist],p.getData())\n   else:\t  \n      groups = ['Select vertexgroup to highlight%t']\n      groups.extend(me.getVertGroupNames())\n      result = Draw.PupMenu( '|'.join(groups) )\n      if result>0:\n         try:\n            p=ob.getProperty('Highlight')\n            p.setData(groups[result])\n         except:\n            ob.addProperty('Highlight',groups[result])\n```", "```py\ntheme     = Window.Theme.Get()[0]\ntextcolor = [float(v)/255 for v in theme.get(Window.Types.VIEW3D ).text_hi[:3]]\ncolor     = [float(v)/255 for v intheme.get(Window.Types.VIEW3D).active[:3]]\n```", "```py\nsize=0.2\ndiskvertices=[( 0.0, 1.0),( 0.7, 0.7),( 1.0, 0.0),( 0.7,-0.7),( 0.0,-1.0),(-0.7,-0.7),(-1.0, 0.0),(-0.7, 0.7)]\n\ndef drawDisk(loc):\n   BGL.glBegin(BGL.GL_POLYGON)\n   for x,y in diskvertices:\n      BGL.glVertex3f(loc[0]+x*size,loc[1]+y*size,loc[2])\n BGL.glEnd()\n\n```", "```py\ndef drawAuras(locations,groupname):\n   viewMatrix = Window.GetPerspMatrix()\n viewBuff = [viewMatrix[i][j] for i in xrange(4) for j in xrange(4)]\n viewBuff = BGL.Buffer(BGL.GL_FLOAT, 16, viewBuff)\n\n   BGL.glLoadIdentity()\n   BGL.glMatrixMode(BGL.GL_PROJECTION)\n   BGL.glLoadMatrixf(viewBuff)\n\n   BGL.glColor3f(*color)\n   for loc in locations:\n      drawDisk(loc)\n   n=len(locations)\n   if n>0:\n      BGL.glColor3f(*textcolor)\n      x=sum([l[0] for l in locations])/n\n      y=sum([l[1] for l in locations])/n\n      z=sum([l[2] for l in locations])/n\n      BGL.glRasterPos3f(x+2*size,y,z)\n      Draw.Text(groupname,'small')\n```", "```py\ndef ckey(ob):\n   return meshcache+ob.name\n```", "```py\ndef storemesh(ob,frame):\n   coords = [(v.co.x,v.co.y,v.co.z) for v in ob.getData().verts]\n   d=Blender.Registry.GetKey(ckey(ob),True)\n   if d == None: d={}\n d[str(frame)]=coords\n   Blender.Registry.SetKey(ckey(ob),d,True)\n```", "```py\nclass NoSuchProperty(RuntimeError): pass;\nclass NoFrameCached(RuntimeError): pass;\n```", "```py\ndef retrievemesh(ob,frame):\n   d=Blender.Registry.GetKey(ckey(ob),True)\n   if d == None:\n      raise NoSuchProperty(\"no property %s for object %s\"\n            %(meshcache,ob.name))\n   try:\n      coords = d[str(frame)]\n   except KeyError:\n      raise NoFrameCached(\"frame %d not cached on object %s\"\n             %(frame,ob.name))\n for v,c in zip(ob.getData(mesh=True).verts,coords):\n      v.co = Blender.Mathutils.Vector(c)\n```", "```py\ndef clearcache(ob):\n   try:\n      Blender.Registry.RemoveKey(ckey(ob))\n   except:\n      pass\n```", "```py\ndef getmeshobjects(scene):\n   return [ob.name for ob in scene.objects if ob.type=='Mesh']\n```", "```py\ndef targetmenu(ob):\n   meshobjects=getmeshobjects(Blender.Scene.GetCurrent())\n   menu='Select target%t|'+ \"|\".join(meshobjects)\n   ret = Blender.Draw.PupMenu(menu)\n if ret>0:\n      try:\n         p = ob.getProperty(impresstarget)\n         p.setData(meshobjects[ret-1])\n      except:\n         ob.addProperty(impresstarget,meshobjects[ret-1])\n```", "```py\nif not Blender.bylink:\n   ret = Blender.Draw.PupMenu('Impress scriptlink%t|Add/Replace' +'scriptlink|Clear cache|Remove' + 'all|New Target')\n   active = Blender.Scene.GetCurrent().objects.active\n   if ret > 0:\n      clearcache(active)\n   if ret== 1:\n      active.clearScriptLinks([scriptname])\n      active.addScriptLink(scriptname,'FrameChanged')\n      targetmenu(active)\n   elif ret== 2:\n      pass\n   elif ret== 3:\n      active.removeProperty(meshcache)\n      active.clearScriptLinks([scriptname])\n   elif ret== 4:\n      targetmenu(active)\n```", "```py\nelif Blender.event == 'FrameChanged':\n   try:\n retrievemesh(Blender.link,Blender.Get('curframe'))\n   except Exception as e: # we catch anything\n      objects = gettargetobjects(Blender.link)\n      for ob in objects:\n         impress(Blender.link,ob)\n      storemesh(Blender.link,Blender.Get('curframe'))\n   Blender.link.makeDisplayList()\n```", "```py\ndef closest(me,pt):\n   min = None\n   vm = None\n   for v in me.verts:\n      d=(v.co-pt).length\n      if min == None or d<min:\n         min = d\n         vm = v.co\n   return min,vm\n```", "```py\nfrom copy import copy\n\ndef impress(source,target):\n   srcmat=source.getMatrix()\n   srcinv=source.getInverseMatrix()\n   tgtmat=target.getMatrix()\n   orgsrc=source.getData(mesh=True)\n   mesrc=copy(source.getData(mesh=True))\n   metgt=copy(target.getData(mesh=True))\n\n   mesrc.transform(srcmat)\n   metgt.transform(tgtmat)\n\n   for v in mesrc.verts:\n      if metgt.pointInside(v.co):\n         d,pt = closest(metgt,v.co)\n         orgsrc.verts[v.index].co=pt*srcinv\n```"]