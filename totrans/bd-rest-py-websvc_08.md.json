["```py\npip install nose2\n\n```", "```py\nCollecting nose2\nCollecting six>=1.1 (from nose2)\n Downloading six-1.10.0-py2.py3-none-any.whl\nInstalling collected packages: six, nose2\nSuccessfully installed nose2-0.6.5 six-1.10.0\n\n```", "```py\npip install cov-core\n\n```", "```py\nCollecting cov-core\nCollecting coverage>=3.6 (from cov-core)\nInstalling collected packages: coverage, cov-core\nSuccessfully installed cov-core-1.15.0 coverage-4.2\n\n```", "```py\ncreatedb test_messages\n\n```", "```py\nsudo -u postgres createdb test_messages\n\n```", "```py\npsql\n\n```", "```py\nsudo -u psql\n\n```", "```py\nGRANT ALL PRIVILEGES ON DATABASE test_messages TO user_name;\n\\q\n\n```", "```py\nimport os \n\nbasedir = os.path.abspath(os.path.dirname(__file__)) \nDEBUG = True \nPORT = 5000 \nHOST = \"127.0.0.1\" \nSQLALCHEMY_ECHO = False \nSQLALCHEMY_TRACK_MODIFICATIONS = True \nSQLALCHEMY_DATABASE_URI = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(DB_USER=\"user_name\", DB_PASS=\"password\", DB_ADDR=\"127.0.0.1\", DB_NAME=\"test_messages\") \nSQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, 'db_repository') \nTESTING = True \nSERVER_NAME = '127.0.0.1:5000' \nPAGINATION_PAGE_SIZE = 5 \nPAGINATION_PAGE_ARGUMENT_NAME = 'page' \n#Disable CSRF protection in the testing configuration \nWTF_CSRF_ENABLED = False \n\n```", "```py\nfrom app import create_app \nfrom base64 import b64encode \nfrom flask import current_app, json, url_for \nfrom models import db, Category, Message, User \nimport status \nfrom unittest import TestCase \n\nclass InitialTests(TestCase): \n    def setUp(self): \n        self.app = create_app('test_config') \n        self.test_client = self.app.test_client() \n        self.app_context = self.app.app_context() \n        self.app_context.push() \n        self.test_user_name = 'testuser' \n        self.test_user_password = 'T3s!p4s5w0RDd12#' \n        db.create_all() \n\n    def tearDown(self): \n        db.session.remove() \n        db.drop_all() \n        self.app_context.pop() \n\n    def get_accept_content_type_headers(self): \n        return { \n            'Accept': 'application/json', \n            'Content-Type': 'application/json' \n        } \n\n    def get_authentication_headers(self, username, password): \n        authentication_headers = self.get_accept_content_type_headers() \n        authentication_headers['Authorization'] = \\ \n            'Basic ' + b64encode((username + ':' + password).encode('utf-\n             8')).decode('utf-8') \n        return authentication_headers \n\n```", "```py\n def test_request_without_authentication(self): \n        \"\"\" \n        Ensure we cannot access a resource that requirest authentication without an appropriate authentication header \n        \"\"\" \n        response = self.test_client.get( \n            url_for('api.messagelistresource', _external=True), \n            headers=self.get_accept_content_type_headers()) \n        self.assertTrue(response.status_code == status.HTTP_401_UNAUTHORIZED) \n\n    def create_user(self, name, password): \n        url = url_for('api.userlistresource', _external=True) \n        data = {'name': name, 'password': password} \n        response = self.test_client.post( \n            url,  \n            headers=self.get_accept_content_type_headers(), \n            data=json.dumps(data)) \n        return response \n\n    def create_category(self, name): \n        url = url_for('api.categorylistresource', _external=True) \n        data = {'name': name} \n        response = self.test_client.post( \n            url,  \n            headers=self.get_authentication_headers(self.test_user_name, \n            self.test_user_password), \n            data=json.dumps(data)) \n        return response \n\n    def test_create_and_retrieve_category(self): \n        \"\"\" \n        Ensure we can create a new Category and then retrieve it \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_category_name = 'New Information' \n        post_response = self.create_category(new_category_name) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Category.query.count(), 1) \n        post_response_data = json.loads(post_response.get_data(as_text=True)) \n        self.assertEqual(post_response_data['name'], new_category_name) \n        new_category_url = post_response_data['url'] \n        get_response = self.test_client.get( \n            new_category_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_response_data['name'], new_category_name) \n\n```", "```py\n def test_create_duplicated_category(self): \n        \"\"\" \n        Ensure we cannot create a duplicated Category \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_category_name = 'New Information' \n        post_response = self.create_category(new_category_name) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Category.query.count(), 1) \n        post_response_data = json.loads(post_response.get_data(as_text=True)) \n        self.assertEqual(post_response_data['name'], new_category_name) \n        second_post_response = self.create_category(new_category_name) \n        self.assertEqual(second_post_response.status_code,\n        status.HTTP_400_BAD_REQUEST) \n        self.assertEqual(Category.query.count(), 1) \n\n    def test_retrieve_categories_list(self): \n        \"\"\" \n        Ensure we can retrieve the categories list \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_category_name_1 = 'Error' \n        post_response_1 = self.create_category(new_category_name_1) \n        self.assertEqual(post_response_1.status_code, status.HTTP_201_CREATED) \n        new_category_name_2 = 'Warning' \n        post_response_2 = self.create_category(new_category_name_2) \n        self.assertEqual(post_response_2.status_code, status.HTTP_201_CREATED) \n        url = url_for('api.categorylistresource', _external=True) \n        get_response = self.test_client.get( \n            url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(len(get_response_data), 2) \n        self.assertEqual(get_response_data[0]['name'], new_category_name_1) \n        self.assertEqual(get_response_data[1]['name'], new_category_name_2) \n\n        \"\"\" \n        Ensure we can update the name for an existing category \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_category_name_1 = 'Error 1' \n        post_response_1 = self.create_category(new_category_name_1) \n        self.assertEqual(post_response_1.status_code, status.HTTP_201_CREATED) \n        post_response_data_1 = json.loads(post_response_1.get_data(as_text=True)) \n        new_category_url = post_response_data_1['url'] \n        new_category_name_2 = 'Error 2' \n        data = {'name': new_category_name_2} \n        patch_response = self.test_client.patch( \n            new_category_url,  \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password), \n            data=json.dumps(data)) \n        self.assertEqual(patch_response.status_code, status.HTTP_200_OK) \n        get_response = self.test_client.get( \n            new_category_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_response_data['name'], new_category_name_2)\n```", "```py\nnose2 -v --with-coverage\n\n```", "```py\ntest_create_and_retrieve_category (test_views.InitialTests) ... ok\ntest_create_duplicated_category (test_views.InitialTests) ... ok\ntest_request_without_authentication (test_views.InitialTests) ... ok\ntest_retrieve_categories_list (test_views.InitialTests) ... ok\ntest_update_category (test_views.InitialTests) ... ok\n--------------------------------------------------------\nRan 5 tests in 3.973s\nOK\n----------- coverage: platform win32, python 3.5.2-final-0 --\nName                  Stmts   Miss  Cover\n-----------------------------------------\napp.py                    9      0   100%\nconfig.py                11     11     0%\nhelpers.py               23     18    22%\nmigrate.py                9      9     0%\nmodels.py               101     27    73%\nrun.py                    4      4     0%\nstatus.py                56      5    91%\ntest_config.py           12      0   100%\ntests\\test_views.py      96      0   100%\nviews.py                204    109    47%\n-----------------------------------------\nTOTAL                   525    183    65% \n\n```", "```py\ncoverage report -m\n\n```", "```py\nName                  Stmts   Miss  Cover   Missing\n---------------------------------------------------\napp.py                    9      0   100%\nconfig.py                11     11     0%   7-20\nhelpers.py               23     18    22%   13-19, 23-44\nmigrate.py                9      9     0%   7-19\nmodels.py               101     27    73%   28-29, 44, 46, 48, 50, 52, 54, 73-75, 79-86, 103, 127-137\nrun.py                    4      4     0%   7-14\nstatus.py                56      5    91%   2, 6, 10, 14, 18\ntest_config.py           12      0   100%\ntests\\test_views.py      96      0   100%\nviews.py                204    109    47%   43-45, 51-58, 63-64, 67, 71-72, 83-87, 92-94, 97-124, 127-135, 140-147, 150-181, 194-195, 198, 205-206, 209-212, 215-223, 235-236, 239, 250-253\n---------------------------------------------------\nTOTAL                   525    183    65%\n\n```", "```py\ncoverage html\n\n```", "```py\n def create_message(self, message, duration, category): \n        url = url_for('api.messagelistresource', _external=True) \n        data = {'message': message, 'duration': duration, 'category': category} \n        response = self.test_client.post( \n            url,  \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password), \n            data=json.dumps(data)) \n        return response \n\n    def test_create_and_retrieve_message(self): \n        \"\"\" \n        Ensure we can create a new message and then retrieve it \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_message_message = 'Welcome to the IoT world' \n        new_message_category = 'Information' \n        post_response = self.create_message(new_message_message, 15,\n        new_message_category) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Message.query.count(), 1) \n        # The message should have created a new catagory \n        self.assertEqual(Category.query.count(), 1) \n        post_response_data = json.loads(post_response.get_data(as_text=True)) \n        self.assertEqual(post_response_data['message'], new_message_message) \n        new_message_url = post_response_data['url'] \n        get_response = self.test_client.get( \n            new_message_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_response_data['message'], new_message_message) \n        self.assertEqual(get_response_data['category']['name'],\n        new_message_category) \n\n    def test_create_duplicated_message(self): \n        \"\"\" \n        Ensure we cannot create a duplicated Message \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_message_message = 'Welcome to the IoT world' \n        new_message_category = 'Information' \n        post_response = self.create_message(new_message_message, 15,\n        new_message_category) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Message.query.count(), 1) \n        post_response_data = json.loads(post_response.get_data(as_text=True)) \n        self.assertEqual(post_response_data['message'], new_message_message) \n        new_message_url = post_response_data['url'] \n        get_response = self.test_client.get( \n            new_message_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_response_data['message'], new_message_message) \n        self.assertEqual(get_response_data['category']['name'],\n        new_message_category) \n        second_post_response = self.create_message(new_message_message, 15,\n        new_message_category) \n        self.assertEqual(second_post_response.status_code,\n        status.HTTP_400_BAD_REQUEST) \n        self.assertEqual(Message.query.count(), 1) \n\n```", "```py\n def test_retrieve_messages_list(self): \n        \"\"\" \n        Ensure we can retrieve the messages paginated list \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_message_message_1 = 'Welcome to the IoT world' \n        new_message_category_1 = 'Information' \n        post_response = self.create_message(new_message_message_1, 15,\n        new_message_category_1) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Message.query.count(), 1) \n        new_message_message_2 = 'Initialization of the board failed' \n        new_message_category_2 = 'Error' \n        post_response = self.create_message(new_message_message_2, 10,\n        new_message_category_2) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Message.query.count(), 2) \n        get_first_page_url = url_for('api.messagelistresource', _external=True) \n        get_first_page_response = self.test_client.get( \n            get_first_page_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_first_page_response_data =\n        json.loads(get_first_page_response.get_data(as_text=True)) \n        self.assertEqual(get_first_page_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_first_page_response_data['count'], 2) \n        self.assertIsNone(get_first_page_response_data['previous']) \n        self.assertIsNone(get_first_page_response_data['next']) \n        self.assertIsNotNone(get_first_page_response_data['results']) \n        self.assertEqual(len(get_first_page_response_data['results']), 2) \n        self.assertEqual(get_first_page_response_data['results'][0]['message'],\n        new_message_message_1) \n        self.assertEqual(get_first_page_response_data['results'][1]['message'],\n        new_message_message_2) \n        get_second_page_url = url_for('api.messagelistresource', page=2) \n        get_second_page_response = self.test_client.get( \n            get_second_page_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_second_page_response_data =\n        json.loads(get_second_page_response.get_data(as_text=True)) \n        self.assertEqual(get_second_page_response.status_code,\n        status.HTTP_200_OK) \n        self.assertIsNotNone(get_second_page_response_data['previous']) \n        self.assertEqual(get_second_page_response_data['previous'],\n        url_for('api.messagelistresource', page=1)) \n        self.assertIsNone(get_second_page_response_data['next']) \n        self.assertIsNotNone(get_second_page_response_data['results']) \n        self.assertEqual(len(get_second_page_response_data['results']), 0) \n\n```", "```py\n def test_update_message(self): \n        \"\"\" \n        Ensure we can update a single field for an existing message \n        \"\"\" \n        create_user_response = self.create_user(self.test_user_name,\n        self.test_user_password) \n        self.assertEqual(create_user_response.status_code,\n        status.HTTP_201_CREATED) \n        new_message_message_1 = 'Welcome to the IoT world' \n        new_message_category_1 = 'Information' \n        post_response = self.create_message(new_message_message_1, 30,\n        new_message_category_1) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(Message.query.count(), 1) \n        post_response_data = json.loads(post_response.get_data(as_text=True)) \n        new_message_url = post_response_data['url'] \n        new_printed_times = 1 \n        new_printed_once = True \n        data = {'printed_times': new_printed_times, 'printed_once':\n        new_printed_once} \n        patch_response = self.test_client.patch( \n            new_message_url,  \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password), \n            data=json.dumps(data)) \n        self.assertEqual(patch_response.status_code, status.HTTP_200_OK) \n        get_response = self.test_client.get( \n            new_message_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_response_data['printed_times'], new_printed_times) \n        self.assertEqual(get_response_data['printed_once'], new_printed_once) \n\n    def test_create_and_retrieve_user(self): \n        \"\"\" \n        Ensure we can create a new User and then retrieve it \n        \"\"\" \n        new_user_name = self.test_user_name \n        new_user_password = self.test_user_password \n        post_response = self.create_user(new_user_name, new_user_password) \n        self.assertEqual(post_response.status_code, status.HTTP_201_CREATED) \n        self.assertEqual(User.query.count(), 1) \n        post_response_data = json.loads(post_response.get_data(as_text=True)) \n        self.assertEqual(post_response_data['name'], new_user_name) \n        new_user_url = post_response_data['url'] \n        get_response = self.test_client.get( \n            new_user_url, \n            headers=self.get_authentication_headers(self.test_user_name,\n            self.test_user_password)) \n        get_response_data = json.loads(get_response.get_data(as_text=True)) \n        self.assertEqual(get_response.status_code, status.HTTP_200_OK) \n        self.assertEqual(get_response_data['name'], new_user_name) \n\n```", "```py\nnose2 -v --with-coverage\n\n```", "```py\ntest_create_and_retrieve_category (test_views.InitialTests) ... ok\ntest_create_and_retrieve_message (test_views.InitialTests) ... ok\ntest_create_and_retrieve_user (test_views.InitialTests) ... ok\ntest_create_duplicated_category (test_views.InitialTests) ... ok\ntest_create_duplicated_message (test_views.InitialTests) ... ok\ntest_request_without_authentication (test_views.InitialTests) ... ok\ntest_retrieve_categories_list (test_views.InitialTests) ... ok\ntest_retrieve_messages_list (test_views.InitialTests) ... ok\ntest_update_category (test_views.InitialTests) ... ok\ntest_update_message (test_views.InitialTests) ... ok\n------------------------------------------------------------------\nRan 10 tests in 25.938s\nOK\n----------- coverage: platform win32, python 3.5.2-final-0 -------\nName                  Stmts   Miss  Cover\n-----------------------------------------\napp.py                    9      0   100%\nconfig.py                11     11     0%\nhelpers.py               23      1    96%\nmigrate.py                9      9     0%\nmodels.py               101     11    89%\nrun.py                    4      4     0%\nstatus.py                56      5    91%\ntest_config.py           16      0   100%\ntests\\test_views.py     203      0   100%\nviews.py                204     66    68%\n-----------------------------------------\nTOTAL                   636    107    83% \n\n```", "```py\nDEBUG = True \n\n```", "```py\nDEBUG = False \n\n```", "```py\npip freeze > requirements.txt\n\n```", "```py\nalembic==0.8.8\naniso8601==1.1.0\nclick==6.6\ncov-core==1.15.0\ncoverage==4.2\nFlask==0.11.1\nFlask-HTTPAuth==3.2.1\nflask-marshmallow==0.7.0\nFlask-Migrate==2.0.0\nFlask-RESTful==0.3.5\nFlask-Script==2.0.5\nFlask-SQLAlchemy==2.1\nitsdangerous==0.24\nJinja2==2.8\nMako==1.0.4\nMarkupSafe==0.23\nmarshmallow==2.10.2\nmarshmallow-sqlalchemy==0.10.0\nnose2==0.6.5\npasslib==1.6.5\npsycopg2==2.6.2\npython-dateutil==2.5.3\npython-editor==1.0.1\npytz==2016.6.1\nsix==1.10.0\nSQLAlchemy==1.0.15\nWerkzeug==0.11.11\n\n```"]