["```py\nfrom protorpc import messages\nfrom protorpc import message_types\n\nclass CheckListItemRepr(messages.Message):\n    title = messages.StringField(1)\n    checked = messages.BooleanField(2)\n\nclass NoteRepr(messages.Message):\n    key = messages.StringField(1)\n    title = messages.StringField(2)\n    content = messages.StringField(3)\n    date_created = message_types.DateTimeField(4)\n    checklist_items = messages.MessageField(CheckListItemRepr,\n                                            5, repeated=True)\n    files = messages.StringField(6, repeated=True)\n\nclass NoteCollection(messages.Message):\n    items = messages.MessageField(NoteRepr, 1, repeated=True)\n```", "```py\n{\n    \"checklist_items\": [\n        {\n            \"checked\": false,\n            \"title\": \"one\"\n        },\n        {\n            \"checked\": true,\n            \"title\": \"two\"\n        },\n        {\n            \"checked\": false,\n            \"title\": \"three\"\n        }\n    ],\n    \"content\": \"Some example contents\",\n    \"date_created\": \"2014-11-08T15:49:07.696869\",\n    \"files\": [\n        \"ag9kZXZ-Ym9vay0xMjM0NTZyQAsSBFVzZXIiE\"\n    ],\n    \"key\": \"ag9kZXZ-Ym9vay0xMjM0NTZyKwsSBFVz\",\n    \"title\": \"Example Note\"\n}\n```", "```py\nhandlers:\n- url: /static\n  static_dir: static\n\n- url: /_ah/spi/.*\n  script: notes_api.app\n\n- url: .*\n  script: main.app\n\nlibraries:\n- name: webapp2\n  version: \"2.5.2\"\n\n- name: jinja2\n  version: latest\n\n- name: endpoints\n  version: 1.0\n```", "```py\nimport endpoints\n\napp = endpoints.api_server([])\n```", "```py\nfrom protorpc import message_types\nfrom protorpc import remote\nfrom google.appengine.ext import ndb\n\nimport models\nimport resources\n\n@endpoints.api(name='notes', version='v1')\nclass NotesApi(remote.Service):\n\n    @endpoints.method(message_types.VoidMessage,\n                      resources.NoteCollection,\n                      path='notes',\n                      http_method='GET',\n                      name='notes.notesList')\n    def note_list(self, unused_request_msg):\n        items = []\n        for note in models.Note.query().fetch():\n            checkl_items = []\n            for i in note.checklist_items:\n                checkl_items.append(\n                    resources.CheckListItemRepr(title=i.title,\n                                               checked=i.checked))\n            files = [f.urlsafe() for f in note.files]\n            r = resources.NoteRepr(key=note.key.urlsafe(),\n                                   title=note.title,\n                                   content=note.content,\n                                   date_created=note.date_created,\n                                   checklist_items=checkl_items,\n                                   files=files)\n               items.append(r)\n\n            return resources.NoteCollection(items=items)\n\napp = endpoints.api_server([NotesApi])\n```", "```py\n    @endpoints.method(resources.NoteRepr,\n                      resources.NoteRepr,\n                      path='notes',\n                      http_method='POST',\n                      name='notes.notesCreate')\n    def note_create(self, new_resource):\n        user = endpoints.get_current_user()\n        if user is None:\n            raise endpoints.UnauthorizedException()\n\n        note = models.Note(parent=ndb.Key(\"User\",\n                           user.nickname()),\n                           title=new_resource.title,\n                           content=new_resource.content)\n        note.put()\n        new_resource.key = note.key.urlsafe()\n        new_resource.date_created = note.date_created\n        return new_resource\n```", "```py\n    @endpoints.method(resources.NoteCollection,\n                      message_types.VoidMessage,\n                      path='notes',\n                      http_method='PUT',\n                      name='notes.notesBatchUpdate')\n    def note_batch_update(self, collection):\n        for note_repr in collection.items:\n            note = ndb.Key(urlsafe=note_repr.key).get()\n            note.title = note_repr.title\n            note.content = note_repr.content\n\n            checklist_items = []\n            for item in note_repr.checklist_items:\n                checklist_items.append(\n                    models.CheckListItem(title=item.title,                                                                   \t                                   checked=item.checked))\n            note.checklist_items = checklist_items\n\n            files = []\n            for file_id in note_repr.files:\n                files.append(ndb.Key(urlsafe=file_id).get())\n            note.files = files\n\n            note.put()\n\n        return message_types.VoidMessage()\n```", "```py\n    @endpoints.method(message_types.VoidMessage,\n                      message_types.VoidMessage,\n                      path='notes',\n                      http_method='DELETE',\n                      name='notes.notesBatchDelete')\n    def note_list_delete(self, request):\n        raise errors.MethodNotAllowed()\n```", "```py\nimport endpoints\nimport httplib\n\nclass MethodNotAllowed(endpoints.ServiceException):\n    http_status = httplib.METHOD_NOT_ALLOWED\n```", "```py\nfrom protorpc import messages\n\n@endpoints.api(name='notes', version='v1')\nclass NotesApi(remote.Service):\n    NoteRequestContainer = endpoints.ResourceContainer(\n        resources.NoteRepr, key=messages.StringField(1))\n```", "```py\n    @endpoints.method(NoteRequestContainer,\n                      resources.NoteRepr,\n                      path='notes/{key}',\n                      http_method='GET',\n                      name='notes.notesDetail')\n    def note_get(self, request):\n        note = ndb.Key(urlsafe=request.key).get()\n        checklist_items = []\n        for i in note.checklist_items:\n            checklist_items.append(\n                resources.CheckListItemRepr(title=i.title,\n                                               checked=i.checked))\n        files = [f.urlsafe() for f in note.files]\n        return resources.NoteRepr(key=request.key,\n                                  title=note.title,\n                                  content=note.content,\n                                  date_created=note.date_created,\n                                  checklist_items=checklist_items,\n                                  files=files)\n```", "```py\n    @endpoints.method(NoteRequestContainer,\n                      message_types.VoidMessage,\n                      path='notes/{key}',\n                      http_method='POST',\n                      name='notes.notesDetailPost')\n    def note_get_post(self, request):\n        raise errors.MethodNotAllowed()\nThis is the code for requests of type PUT instead:\n    @endpoints.method(NoteRequestContainer,\n                      resources.NoteRepr,\n                      path='notes/{key}',\n                      http_method='PUT',\n                      name='notes.notesUpdate')\n    def note_update(self, request):\n        note = ndb.Key(urlsafe=request.key).get()\n        note.title = request.title\n        note.content = request.content\n        checklist_items = []\n        for item in request.checklist_items:\n            checklist_items.append(\n                models.CheckListItem(title=item.title,\n                                     checked=item.checked))\n        note.checklist_items = checklist_items\n\n        files = []\n        for file_id in request.files:\n               files.append(ndb.Key(urlsafe=file_id).get())\n        note.files = files\n        note.put()\n        return resources.NoteRepr(key=request.key,\n                                  title=request.title,\n                                  content=request.content,\n                                date_created=request.date_created,\n                          checklist_items=request.checklist_items,\n                                  files=request.files)\n```", "```py\n    @endpoints.method(NoteRequestContainer,\n                      message_types.VoidMessage,\n                      path='notes/{key}',\n                      http_method='DELETE',\n                      name='notes.notesDelete')\n    def note_delete(self, request):\n        ndb.Key(urlsafe=request.key).delete()\n        return message_types.VoidMessage()\n```", "```py\nJS_CLIENT_ID = '8nej3vl.apps.googleusercontent.com'\nIOS_CLIENT_ID = 'm6gikl14bncbqks.apps.googleusercontent.com'\n\n@endpoints.api(name='notes', version='v1',\n               allowed_client_ids=[\n                   endpoints.API_EXPLORER_CLIENT_ID,\n                   JS_CLIENT_ID,\n                   IOS_CLIENT_ID\n               ])\nclass NotesApi(remote.Service):\n```", "```py\nJS_CLIENT_ID = '8nej3vl.apps.googleusercontent.com'\nIOS_CLIENT_ID = 'm6gikl14bncbqks.apps.googleusercontent.com'\nANDROID_CLIENT_ID = '1djhfk8ne.apps.googleusercontent.com'\n\n@endpoints.api(name='notes', version='v1',\n               allowed_client_ids=[\n                   endpoints.API_EXPLORER_CLIENT_ID,\n                   JS_CLIENT_ID,\n                   IOS_CLIENT_ID,\n                   ANDROID_CLIENT_ID,\n               ],\n               audiences=[ANDROID_CLIENT_ID])\nclass NotesApi(remote.Service):\n```", "```py\n@endpoints.api(name='notes', version='v1',\n               allowed_client_ids=[\n                   endpoints.API_EXPLORER_CLIENT_ID,\n                   JS_CLIENT_ID,\n                   ANDROID_CLIENT_ID\n               ],\n               audiences=[ANDROID_CLIENT_ID],\n                scopes=[endpoints.EMAIL_SCOPE])\nclass NotesApi(remote.Service):\n```", "```py\n    def note_list(self, request):\n        if endpoints.get_current_user() is None:\n            raise endpoints.UnauthorizedException()\n```", "```py\n401 Unauthorized\n{\n \"error\": {\n  \"code\": 401,\n  \"errors\": [\n   {\n    \"domain\": \"global\",\n    \"message\": \"Unauthorized\",\n    \"reason\": \"required\"\n   }\n  ],\n  \"message\": \"Unauthorized\"\n }\n}\n```"]