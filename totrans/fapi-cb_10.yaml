- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Integrating FastAPI with other Python Libraries
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 FastAPI 与其他 Python 库集成
- en: In this chapter, we will delve into the process of expanding the capabilities
    of **FastAPI** by integrating it with other **Python** libraries. By harnessing
    the power of external tools and libraries, you can enhance the functionality of
    your FastAPI applications and unlock new possibilities for creating dynamic and
    feature-rich web services.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨通过将 FastAPI 与其他 **Python** 库集成来扩展 **FastAPI** 功能的过程。通过利用外部工具和库的力量，您可以增强
    FastAPI 应用程序的功能，并为创建动态和功能丰富的 Web 服务解锁新的可能性。
- en: Throughout this chapter, you will learn how to integrate FastAPI with a diverse
    range of Python libraries, each serving a different purpose and offering unique
    functionalities. From taking advantage of advanced natural language processing
    capabilities with **Cohere** and **LangChain** to integrating real-time communication
    features with **gRPC** and **GraphQL**, you will discover how to harness the full
    potential of FastAPI in conjunction with other popular Python tools.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，您将学习如何将 FastAPI 与各种 Python 库集成，每个库都服务于不同的目的，并提供了独特的功能。从利用 **Cohere**
    和 **LangChain** 的高级自然语言处理能力，到通过 **gRPC** 和 **GraphQL** 集成实时通信功能，您将发现如何结合其他流行的
    Python 工具充分利用 FastAPI 的全部潜力。
- en: By integrating FastAPI with other Python libraries, you will be able to build
    sophisticated web applications that go beyond simple **REST APIs**. Whether you
    are developing a chatbot powered by natural language processing or integrating
    **machine learning** (**ML**) models for intelligent decision-making, the possibilities
    are endless.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 FastAPI 与其他 Python 库集成，您将能够构建超越简单 **REST API** 的复杂 Web 应用程序。无论是开发由自然语言处理驱动的聊天机器人，还是集成
    **机器学习**（**ML**）模型进行智能决策，可能性是无限的。
- en: By the end of this chapter, you will be equipped with the knowledge and skills
    to effectively leverage external tools and resources, enabling you to build sophisticated
    and feature-rich APIs that meet the needs of your users.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将具备利用外部工具和资源的能力，使您能够构建满足用户需求的复杂和功能丰富的 API。
- en: 'This chapter includes the following recipes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章包括以下配方：
- en: Integrating FastAPI with gRPC
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 FastAPI 与 gRPC 集成
- en: Connecting FastAPI with GraphQL
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 FastAPI 与 GraphQL 连接
- en: Using ML models with Joblib
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Joblib 与 ML 模型
- en: Integrating FastAPI with Cohere
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 FastAPI 与 Cohere 集成
- en: Integrating FastAPI with LangChain
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 FastAPI 与 LangChain 集成
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: To follow the recipes in this chapter, it is important to have a good understanding
    of FastAPI. Additionally, since this chapter demonstrates how to integrate FastAPI
    with external libraries, having a basic knowledge of each library can be beneficial.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要遵循本章中的配方，对 FastAPI 有良好的理解至关重要。此外，由于本章演示了如何将 FastAPI 与外部库集成，对每个库的基本了解可能有益。
- en: However, we will provide external links for you to review any of the concepts
    that are used in the recipes. You can also refer back to this chapter whenever
    you need to integrate a technology with FastAPI.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们将提供外部链接供您回顾配方中使用的任何概念。您也可以在需要将技术与 FastAPI 集成时参考此章节。
- en: The code used in the chapter is hosted on GitHub at [https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter10](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter10).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章使用的代码托管在 GitHub 上，网址为 [https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter10](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter10)。
- en: It is recommended to set up a virtual environment for the project in the project
    root folder to efficiently manage dependencies and maintain project isolation.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 建议在项目根目录中为项目设置一个虚拟环境，以有效地管理依赖项并保持项目隔离。
- en: 'For each recipe, you can install all the dependencies at once within your virtual
    environment by using the `requirements.txt` file provided in the GitHub repository
    in the following project folder:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个配方，您可以通过使用 GitHub 仓库中提供的 `requirements.txt` 文件，在您的虚拟环境中一次性安装所有依赖项：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Let’s start delving into this recipe and discovering the potential of coupling
    FastAPI with external libraries.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始深入探讨这个配方，并发现将 FastAPI 与外部库结合使用的潜力。
- en: Integrating FastAPI with gRPC
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 FastAPI 与 gRPC 集成
- en: gRPC is a high-performance, open source universal **Remote Procedure Call**
    (**RPC**) framework originally developed by Google. It is designed to be efficient,
    lightweight, and interoperable across different programming languages and platforms.
    Integrating FastAPI with gRPC allows you to leverage the power of RPC for building
    efficient, scalable, and maintainable APIs.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: gRPC是一个高性能、开源的通用**远程过程调用**（RPC）框架，最初由Google开发。它被设计为高效、轻量级，并且可以在不同的编程语言和平台之间互操作。将FastAPI与gRPC集成允许您利用RPC的力量来构建高效、可扩展和可维护的API。
- en: The recipe will show how to build a gateway between a REST client and a gRPC
    server by using FastAPI.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱将展示如何使用FastAPI在REST客户端和gRPC服务器之间构建网关。
- en: Getting ready
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow the recipe, it can be beneficial to have some previous knowledge of
    protocol buffers. You can have a look at the official documentation at [https://protobuf.dev/overview/](https://protobuf.dev/overview/).
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循这个食谱，有一些关于协议缓冲区的先验知识可能会有所帮助。您可以在[https://protobuf.dev/overview/](https://protobuf.dev/overview/)查看官方文档。
- en: Also, we will use the proto3 version to define the `.proto` files. You can check
    the language guide at [https://protobuf.dev/programming-guides/proto3/](https://protobuf.dev/programming-guides/proto3/).
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将使用proto3版本来定义`.proto`文件。您可以在[https://protobuf.dev/programming-guides/proto3/](https://protobuf.dev/programming-guides/proto3/)查看语言指南。
- en: We will create a dedicated root project folder for the recipe called `grpc_gateway`.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为这个食谱创建一个专门的根项目文件夹，命名为`grpc_gateway`。
- en: 'Aside from `fastapi` and `uvicorn`, you also need to install the `grpcio` and
    `grpcio-tools` packages . You can do this by using the `requirements.txt` file
    provided in the GitHub repository in your environment or by explicitly specifying
    the packages with the `pip` command in your environment as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`fastapi`和`uvicorn`之外，您还需要安装`grpcio`和`grpcio-tools`包。您可以通过使用GitHub仓库中提供的`requirements.txt`文件在您的环境中执行此操作，或者通过在您的环境中使用`pip`命令显式指定包，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Before starting with the recipe, let’s build a basic gRPC server with one method
    that takes a message from the client and sends back a message as well by following
    these steps.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始食谱之前，让我们按照以下步骤构建一个基本的gRPC服务器，该服务器有一个方法，该方法从客户端接收消息并发送回消息。
- en: 'Under the root project let’s create a `grpcserver.proto` file containing the
    definition of our server as follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在根项目下，让我们创建一个`grpcserver.proto`文件，其中包含我们服务器的定义，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In the same file, we will define the `Message` and `MessageResponse` messages
    as follows:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，我们将定义`Message`和`MessageResponse`消息，如下所示：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: From the `.proto` file we have just created, we can automatically generate the
    Python code necessary to integrate the service and gRPC client as well with a
    proto compiler.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从我们刚刚创建的`.proto`文件中，我们可以自动生成必要的Python代码，以集成服务和gRPC客户端，以及使用proto编译器。
- en: 'Then, from the command line terminal, run the following command:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在命令行终端中，运行以下命令：
- en: '[PRE4]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now let’s write a script to run the gRPC server. Let’s create a file called
    `grpc_server.py` and define the server class as follows:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们编写一个运行gRPC服务器的脚本。让我们创建一个名为`grpc_server.py`的文件，并定义服务器类，如下所示：
- en: '[PRE5]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then we will define the function to run the server on the localhost on port
    `50015` as follows:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将定义一个函数，在本地主机的`50015`端口上运行服务器，如下所示：
- en: '[PRE6]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We then close the script by running the `serve` function into the event loop:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们通过将`serve`函数运行到事件循环中来关闭脚本：
- en: '[PRE7]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This is all we need to build the gRPC server. Now we can run the script from
    the command line:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们构建gRPC服务器所需的所有内容。现在我们可以从命令行运行脚本：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'If everything has been set up correctly you will see the following log message
    on the terminal:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切设置正确，您将在终端看到以下日志消息：
- en: '[PRE9]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: With the gRPC server running, we can now create our gateway by leveraging FastAPI.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当gRPC服务器运行时，我们现在可以利用FastAPI创建我们的网关。
- en: How to do it…
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: We will create a FastAPI application with one `GET /grpc` endpoint that will
    take a message as a parameter, forward the request to the gRPC server, and return
    the message from the gRPC server to the client. Let’s go through the following
    steps to build a basic gateway application.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个FastAPI应用程序，其中有一个`GET /grpc`端点，该端点将接收一个消息作为参数，将请求转发到gRPC服务器，并将从gRPC服务器返回的消息发送给客户端。让我们按照以下步骤构建一个基本的网关应用程序。
- en: 'Under the project root folder, let’s create a folder called `app` with a `main.py`
    module containing the server as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录下，让我们创建一个名为`app`的文件夹，其中包含一个`main.py`模块，该模块包含服务器，如下所示：
- en: '[PRE10]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now let’s create the response class schema with Pydantic that will reflect
    the `MessageResponse` proto class as follows:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们使用 Pydantic 创建响应类模式，该模式将反映 `MessageResponse` proto 类，如下所示：
- en: '[PRE11]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Then we will initialize the `grpc_channel`object, which is an abstraction layer
    for gRPC calls containing the gRPC service URL, as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将初始化 `grpc_channel` 对象，这是一个包含 gRPC 服务 URL 的抽象层，如下所示：
- en: '[PRE12]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, we can create our endpoint as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们可以按照以下方式创建我们的端点：
- en: '[PRE13]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once we have created our FastAPI application, let’s spin up the server from
    the command line:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了我们的 FastAPI 应用程序，让我们从命令行启动服务器：
- en: '[PRE14]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Open the interactive documentation at `http://localhost:8000/docs` and you will
    see the new endpoint that will take a message parameter and return the response
    from the gRPC server. If you try to call it, you will also see the log message
    for the call on the gRPC server terminal.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 打开交互式文档 `http://localhost:8000/docs`，您将看到新的端点，该端点将接受一个消息参数并从 gRPC 服务器返回响应。如果您尝试调用它，您还将看到
    gRPC 服务器终端上的调用日志消息。
- en: You have successfully set up a REST-gRPC gateway by using FastAPI!
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功使用 FastAPI 设置了 REST-gRPC 网关！
- en: There’s more…
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We have created a gateway that supports Unary RPC, which is a simple RPC that
    resembles a normal function call. It involves sending a single request, which
    is defined in the `.proto` file, to the server and receiving a single response
    back from the server. However, there are various types of RPC implementations
    available that allow for the streaming of messages from the client to the server
    or from the server to the client, as well as ones that allow for bidirectional
    communication.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了一个支持单一 RPC 的网关，单一 RPC 是类似于正常函数调用的简单 RPC。它涉及向服务器发送一个定义在 `.proto` 文件中的单个请求，并从服务器接收单个响应。然而，有各种类型的
    RPC 实现可用，允许从客户端到服务器或从服务器到客户端的消息流，以及允许双向通信的实现。
- en: 'Creating a REST gateway using FastAPI is a relatively easy task. For more information
    on how to implement different types of gRPC in Python, you can refer to the following
    article: [https://www.velotio.com/engineering-blog/grpc-implementation-using-python](https://www.velotio.com/engineering-blog/grpc-implementation-using-python).
    Once you have mastered these concepts, you can easily integrate them into FastAPI
    and build a complete gateway for gRPC services.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 FastAPI 创建 REST 网关是一个相对简单的工作。有关如何在 Python 中实现不同类型的 gRPC 的更多信息，您可以参考以下文章：[https://www.velotio.com/engineering-blog/grpc-implementation-using-python](https://www.velotio.com/engineering-blog/grpc-implementation-using-python)。一旦您掌握了这些概念，您就可以轻松地将它们集成到
    FastAPI 中，并为 gRPC 服务构建一个完整的网关。
- en: See also
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can dive deeper into protocol buffer and how you can use it in Python code
    in the official documentation:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在官方文档中深入了解协议缓冲区以及如何在 Python 代码中使用它：
- en: '*Protocol Buffer Python Generated* *Code*: [https://protobuf.dev/reference/python/python-generated/](https://protobuf.dev/reference/python/python-generated/)'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Protocol Buffer Python Generated* *代码*: [https://protobuf.dev/reference/python/python-generated/](https://protobuf.dev/reference/python/python-generated/)'
- en: 'You check more on how to implement gRPC in Python code at the gRPC official
    documentation page:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 gRPC 官方文档页面上了解更多关于如何在 Python 代码中实现 gRPC 的信息：
- en: '*gRPC Python* *Tutorial*: [https://grpc.io/docs/languages/python/basics/](https://grpc.io/docs/languages/python/basics/)'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*gRPC Python* *教程*: [https://grpc.io/docs/languages/python/basics/](https://grpc.io/docs/languages/python/basics/)'
- en: 'Also, have a look at the examples on GitHub:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还可以查看 GitHub 上的示例：
- en: '*gRPC Python GitHub* *Examples*: [https://github.com/grpc/grpc/tree/master/examples/python](https://github.com/grpc/grpc/tree/master/examples/python)'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*gRPC Python GitHub* *示例*: [https://github.com/grpc/grpc/tree/master/examples/python](https://github.com/grpc/grpc/tree/master/examples/python)'
- en: Connecting FastAPI with GraphQL
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 FastAPI 与 GraphQL 连接
- en: GraphQL is a query language for APIs and a runtime for executing queries. It
    provides an efficient, powerful, and flexible alternative to traditional REST
    APIs by allowing clients to specify exactly what data they need. Integrating FastAPI
    with GraphQL enables you to build APIs that are highly customizable and capable
    of handling complex data requirements. In this recipe, we will see how to connect
    FastAPI with GraphQL to query a user database, allowing you to create GraphQL
    schemas, define resolvers, and expose a GraphQL endpoint in your FastAPI application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: GraphQL是一种用于API的查询语言和执行查询的运行时。它通过允许客户端指定他们确切需要的数据，提供了一个高效、强大且灵活的替代传统REST API的方案。将FastAPI与GraphQL集成使您能够构建高度可定制的API，能够处理复杂的数据需求。在本食谱中，我们将了解如何将FastAPI与GraphQL连接起来以查询用户数据库，允许您在FastAPI应用程序中创建GraphQL模式、定义解析器并公开GraphQL端点。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To follow the recipe, it can be beneficial to ensure you already have some basic
    knowledge about GraphQL. You can have a look at the official documentation at
    [https://graphql.org/learn/](https://graphql.org/learn/).
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了遵循这个食谱，确保您已经对GraphQL有一些基本了解是有益的。您可以在[https://graphql.org/learn/](https://graphql.org/learn/)查看官方文档。
- en: 'In the GitHub repository folder of this chapter, there is a folder named `graphql`,
    which we will consider as the root project folder. To implement GraphQL, we will
    be utilizing the Strawberry library. Please ensure that you have it installed
    in your environment along with FastAPI. You can install it by using the `requirements.txt`
    file located in the project root of the repository or by using the `pip` command
    by running the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的GitHub仓库文件夹中，有一个名为`graphql`的文件夹，我们将将其视为根项目文件夹。为了实现GraphQL，我们将利用Strawberry库。请确保您已经将其安装到您的环境中，并包含FastAPI。您可以通过在项目根目录中找到的`requirements.txt`文件来安装它，或者通过运行以下`pip`命令来安装：
- en: '[PRE15]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once the installation is complete, we can start the recipe.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以开始制作。
- en: How to do it…
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let’s create a basic GraphQL endpoint that retrieves users from a specific country
    in a database. Let’s do it through the following steps.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个基本的GraphQL端点，从数据库中检索特定国家的用户。让我们通过以下步骤来完成：
- en: 'Let’s create a `database.py` module containing a list of users that we will
    use as a database source. Define the `User` class as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们创建一个包含我们将用作数据库源的用户的`database.py`模块。如下定义`User`类：
- en: '[PRE16]'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: You can then write a `users_db` object, which will be a list of `User` class
    objects, or copy the one from the respective `database.py` file on the GitHub
    repository at [https://raw.githubusercontent.com/PacktPublishing/FastAPI-Cookbook/main/Chapter10/graphql/database.py](https://raw.githubusercontent.com/PacktPublishing/FastAPI-Cookbook/main/Chapter10/graphql/database.py).
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以编写一个`users_db`对象，它将是一个`User`类对象的列表，或者从GitHub仓库中相应的`database.py`文件复制一个，仓库地址为[https://raw.githubusercontent.com/PacktPublishing/FastAPI-Cookbook/main/Chapter10/graphql/database.py](https://raw.githubusercontent.com/PacktPublishing/FastAPI-Cookbook/main/Chapter10/graphql/database.py)。
- en: 'It will look like this:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将看起来像这样：
- en: '[PRE17]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We will use this list as a database for our simple query.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将使用这个列表作为我们简单查询的数据库。
- en: 'In a separate module called `graphql_utils.py`, we will define the query. But
    first, let’s define the model returned by the query as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在一个名为`graphql_utils.py`的单独模块中，我们将定义查询。但首先，让我们如下定义查询返回的模型：
- en: '[PRE18]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then we will define the query as follows:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后我们将如下定义查询：
- en: '[PRE19]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The query takes a country as an argument and returns all the users for the country.
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查询接受一个国家作为参数，并返回该国家的所有用户。
- en: 'Now, in the same file, let’s create the GraphQL schema with the FastAPI router:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在同一个文件中，让我们使用FastAPI路由器创建GraphQL模式：
- en: '[PRE20]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: The last line will create a `fastapi.Router` instance that will handle the endpoint.
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后一行将创建一个`fastapi.Router`实例，该实例将处理端点。
- en: 'Let’s finalize the endpoint by adding the router to the main FastAPI instance
    in a separate `main.py` module as follows:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过将路由器添加到主FastAPI实例的单独`main.py`模块中来最终确定端点，如下所示：
- en: '[PRE21]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: We added the endpoint to the FastAPI instance and defined the `/``graphql` path.
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们将端点添加到FastAPI实例中，并定义了`/``graphql`路径。
- en: This is all you need to setup a GraphQl endpoint within FastAPI.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是您在FastAPI中设置GraphQL端点所需的所有内容。
- en: 'To explore the potential of the endpoint, let’s run the server from the command
    line:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了探索端点的潜力，让我们从命令行运行服务器：
- en: '[PRE22]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '{'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'users(country: "USA") {'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'users(country: "USA") {'
- en: username
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: username
- en: country
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: country
- en: phoneNumber
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: phoneNumber
- en: '}'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE23]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '{'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"data": {'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '"data": {'
- en: '"users": ['
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '"users": ['
- en: '{'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '"username": "user1",'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '"username": "user1",'
- en: '"country": "USA",'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '"country": "USA",'
- en: '"phoneNumber": "1234567890"'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '"phoneNumber": "1234567890"'
- en: '}'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ']'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE24]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: $ pip install fastapi[all] joblib scikit-learn
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install fastapi[all] joblib scikit-learn
- en: '[PRE25]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: $ pip install huggingface_hub
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install huggingface_hub
- en: '[PRE26]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: from fastapi import FastAPI
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from fastapi import FastAPI
- en: from contextlib import asynccontextmanager
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from contextlib import asynccontextmanager
- en: ml_model = {}
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ml_model = {}
- en: REPO_ID = "AWeirdDev/human-disease-prediction"
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: REPO_ID = "AWeirdDev/human-disease-prediction"
- en: FILENAME = "sklearn_model.joblib"
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: FILENAME = "sklearn_model.joblib"
- en: '@asynccontextmanager'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@asynccontextmanager'
- en: 'async def lifespan(app: FastAPI):'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'async def lifespan(app: FastAPI):'
- en: ml_model["doctor"] = joblib.load(
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ml_model["doctor"] = joblib.load(
- en: hf_hub_download(
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: hf_hub_download(
- en: repo_id=REPO_ID, filename=FILENAME
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo_id=REPO_ID, filename=FILENAME
- en: )
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: )
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: yield
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: yield
- en: ml_model.clear()
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ml_model.clear()
- en: '[PRE27]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: app = FastAPI(
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: app = FastAPI(
- en: title="AI Doctor",
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: title="AI Doctor",
- en: lifespan=lifespan
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: lifespan=lifespan
- en: )
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE28]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: from pydantic import create_model
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from pydantic import create_model
- en: from app.utils import symptoms_list
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from app.utils import symptoms_list
- en: query_parameters = {
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query_parameters = {
- en: 'symp: (bool, False)'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'symp: (bool, False)'
- en: for symp in symptoms_list[:10]
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for symp in symptoms_list[:10]
- en: '}'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: Symptoms = create_model(
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Symptoms = create_model(
- en: '"Symptoms", **query_params'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"Symptoms", **query_params'
- en: )
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE29]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '@app.get("/diagnosis")'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@app.get("/diagnosis")'
- en: async def get_diagnosis(
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: async def get_diagnosis(
- en: 'symptoms: Annotated[Symptoms, Depends()],'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'symptoms: Annotated[Symptoms, Depends()],'
- en: '):'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '):'
- en: array = [
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: array = [
- en: int(value)
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: int(value)
- en: for _, value in symptoms.model_dump().items()
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: for _, value in symptoms.model_dump().items()
- en: ']'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: array.extend(
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: array.extend(
- en: '# adapt array to the model''s input shape'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '# adapt array to the model''s input shape'
- en: '[0] * (len(symptoms_list) - len(array))'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[0] * (len(symptoms_list) - len(array))'
- en: )
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: len(symptoms_list)
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: len(symptoms_list)
- en: diseases = ml_model["doctor"].predict([array])
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: diseases = ml_model["doctor"].predict([array])
- en: return {
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return {
- en: '"diseases": [disease for disease in diseases]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"diseases": [disease for disease in diseases]'
- en: '}'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE30]'
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: $ uvicorn app.main:app
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: $ uvicorn app.main:app
- en: '[PRE31]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: COHERE_API_KEY="your-cohere-api-key"
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: COHERE_API_KEY="your-cohere-api-key"
- en: '[PRE32]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: $ pip install -r requirements.txt
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install -r requirements.txt
- en: '[PRE33]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: $ pip install fastapi uvicorn cohere python-dotenv
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install fastapi uvicorn cohere python-dotenv
- en: '[PRE34]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: from dotenv import load_dotenv
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from dotenv import load_dotenv
- en: load_dotenv()
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: load_dotenv()
- en: '[PRE35]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: SYSTEM_MESSAGE = (
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: SYSTEM_MESSAGE = (
- en: '"You are a skilled Italian top chef "'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"You are a skilled Italian top chef "'
- en: '"expert in Italian cuisine tradition "'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"expert in Italian cuisine tradition "'
- en: '"that suggest the best recipes unveiling "'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"that suggest the best recipes unveiling "'
- en: '"tricks and tips from Grandma''s Kitchen"'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"tricks and tips from Grandma''s Kitchen"'
- en: '"shortly and concisely."'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '"shortly and concisely."'
- en: )
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE36]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: from cohere import AsyncClient
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from cohere import AsyncClient
- en: client = AsyncClient()
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: client = AsyncClient()
- en: '[PRE37]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: from cohere import ChatMessage
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from cohere import ChatMessage
- en: from cohere.core.api_error import ApiError
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from cohere.core.api_error import ApiError
- en: from fastapi import HTTPException
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from fastapi import HTTPException
- en: '[PRE38]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: async def generate_chat_completion(
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: async def generate_chat_completion(
- en: user_query=" ", messages=[]
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: user_query=" ", messages=[]
- en: ') -> str:'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ') -> str:'
- en: 'try:'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'try:'
- en: response = await client.chat(
  id: totrans-203
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: response = await client.chat(
- en: message=user_query,
  id: totrans-204
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: message=user_query,
- en: model="command-r-plus",
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: model="command-r-plus",
- en: preamble=SYSTEM_MESSAGE,
  id: totrans-206
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: preamble=SYSTEM_MESSAGE,
- en: chat_history=messages,
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: chat_history=messages,
- en: )
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: messages.extend(
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: messages.extend(
- en: '['
  id: totrans-210
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '['
- en: ChatMessage(
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ChatMessage(
- en: role="USER", message=user_query
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: role="USER", message=user_query
- en: ),
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ),
- en: ChatMessage(
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ChatMessage(
- en: role="CHATBOT",
  id: totrans-215
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: role="CHATBOT",
- en: message=response.text,
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: message=response.text,
- en: ),
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ),
- en: ']'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ']'
- en: )
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: return response.text
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return response.text
- en: 'except ApiError as e:'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'except ApiError as e:'
- en: raise HTTPException(
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise HTTPException(
- en: status_code=e.status_code, detail=e.body
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: status_code=e.status_code, detail=e.body
- en: )
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE39]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: from contextlib import asynccontextmanager
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from contextlib import asynccontextmanager
- en: from fastapi import FastAPI
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from fastapi import FastAPI
- en: '@asynccontextmanager'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@asynccontextmanager'
- en: 'async def lifespan(app: FastAPI):'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'async def lifespan(app: FastAPI):'
- en: 'yield {"messages": []}'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'yield {"messages": []}'
- en: '[PRE40]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: app = FastAPI(
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: app = FastAPI(
- en: title="Chef Cuisine Chatbot App",
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: title="Chef Cuisine Chatbot App",
- en: lifespan=lifespan,
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: lifespan=lifespan,
- en: )
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: '[PRE41]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: from typing import Annotated
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from typing import Annotated
- en: from fastapi import Body, Request
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from fastapi import Body, Request
- en: from handlers import generate_chat_completion
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: from handlers import generate_chat_completion
- en: '@app.post("/query")'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '@app.post("/query")'
- en: async def query_chat_bot(
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: async def query_chat_bot(
- en: 'request: Request,'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'request: Request,'
- en: 'query: Annotated[str, Body(min_length=1)],'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'query: Annotated[str, Body(min_length=1)],'
- en: ') -> str:'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ') -> str:'
- en: answer = await generate_chat_completion(
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: answer = await generate_chat_completion(
- en: query, request.state.messages
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: query, request.state.messages
- en: )
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: )
- en: return answer
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return answer
- en: '[PRE42]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: $ uvicorn main:app
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: $ uvicorn main:app
- en: '[PRE43]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '"Hello, could you suggest a quick recipe for lunch to be prepared in less than
    one hour?"'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '"Hello, could you suggest a quick recipe for lunch to be prepared in less than
    one hour?"'
- en: '[PRE44]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $ pip install fastapi uvicorn python-dotenv
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install fastapi uvicorn python-dotenv
- en: $ pip install langchain
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install langchain
- en: $ pip install langchain-community langchain-cohere
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install langchain-community langchain-cohere
- en: $ pip install chromadb unstructured
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: $ pip install chromadb unstructured
- en: '[PRE45]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'template: str = """'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'template: str = """'
- en: You are a customer support Chatbot.
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: You are a customer support Chatbot.
- en: You assist users with general inquiries
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: You assist users with general inquiries
- en: and technical issues.
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: and technical issues.
- en: 'You will answer to the question:'
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'You will answer to the question:'
- en: '{question}'
  id: totrans-264
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '{question}'
- en: Your answer will only be based on the knowledge
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: of the context below you are trained on.
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '-----------'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{context}'
  id: totrans-268
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '-----------'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: if you don't know the answer,
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: you will ask the user
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: to rephrase the question or
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: redirect the user the support@ecotech.com
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: always be friendly and helpful
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: at the end of the conversation,
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ask the user if they are satisfied
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: with the answer if yes,
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: say goodbye and end the conversation
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"""'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-280
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: from langchain.prompts import (
  id: totrans-281
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SystemMessagePromptTemplate,
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-283
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: system_message_prompt = (
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: SystemMessagePromptTemplate.from_template(
  id: totrans-285
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: template
  id: totrans-286
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-287
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-288
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-289
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: from langchain.prompts import (
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HumanMessagePromptTemplate,
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-292
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: human_message_prompt = (
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: HumanMessagePromptTemplate.from_template(
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: template="{question}",
  id: totrans-295
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: from langchain.prompts import ChatPromptTemplate
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: chat_prompt_template = (
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ChatPromptTemplate.from_messages(
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[system_message_prompt, human_message_prompt]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: from langchain.text_splitter import (
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: CharacterTextSplitter,
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: from langchain_core.documents.base import Document
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: from langchain_community.document_loaders import (
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: DirectoryLoader,
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: from langchain_community.vectorstores import Chroma
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: async def load_documents(
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: 'db: Chroma,'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '):'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: text_splitter = CharacterTextSplitter(
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: chunk_size=100, chunk_overlap=0
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: raw_documents = DirectoryLoader(
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '"docs", "*.txt"'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: ).load()
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: chunks = text_splitter.split_documents(
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: raw_documents
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: await db.aadd_documents(chunks)
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: def get_context(
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: 'user_query: str, db: Chroma'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: ') -> str:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: docs = db.similarity_search(user_query)
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: return "\n\n".join(
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: doc.page_content for doc in docs
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: from dotenv import load_dotenv
  id: totrans-336
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: load_dotenv()
  id: totrans-337
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-338
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: from langchain_cohere import ChatCohere
  id: totrans-339
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: model = ChatCohere(model="command-r-plus")
  id: totrans-340
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-341
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: from langchain.schema import StrOutputParser
  id: totrans-342
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from prompting import chat_prompt_template
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: chain = (
  id: totrans-344
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: chat_prompt_template | model | StrOutputParser()
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-346
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: from contextlib import asynccontextmanager
  id: totrans-348
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from fastapi import FastAPI
  id: totrans-349
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from langchain_cohere import CohereEmbeddings
  id: totrans-350
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from langchain_community.vectorstores import Chroma
  id: totrans-351
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from documents import load_documents
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@asynccontextmanager'
  id: totrans-353
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'async def lifespan(app: FastAPI):'
  id: totrans-354
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db = Chroma(
  id: totrans-355
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: embedding_function=CohereEmbeddings()
  id: totrans-356
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-357
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: await load_documents(db)
  id: totrans-358
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'yield {"db": db}'
  id: totrans-359
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-360
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: app = FastAPI(
  id: totrans-361
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: title="Ecotech AI Assistant",
  id: totrans-362
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: lifespan=lifespan
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: from typing import Annotated
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from fastapi import Body, Request
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from documents import get_context
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from model import chain
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '@app.post("/message")'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: async def query_assistant(
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'request: Request,'
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'question: Annotated[str, Body()],'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ') -> str:'
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: context = get_context(question, request.state.db)
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: response = await chain.ainvoke(
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '{'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"question": question,'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '"context": context,'
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  id: totrans-380
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return response
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: $ uvicorn main:app
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '"What is the capital of Belgium ?"'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '"I apologize, but I cannot answer that question as it is outside of my knowledge
    base. I am an FAQ chatbot trained to answer specific questions related to EcoTech
    Electronics, including our product compatibility with smart home systems, international
    shipping costs, and promotions for first-time customers. If you have any questions
    related to these topics, I''d be happy to help! Otherwise, for general inquiries,
    you can reach out to our support team at support@ecotech.com. Is there anything
    else I can assist you with today regarding EcoTech Electronics?"'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '"很抱歉，我无法回答这个问题，因为它超出了我的知识库。我是一个专门训练来回答与EcoTech Electronics相关的特定问题的FAQ聊天机器人，包括我们的产品与智能家居系统的兼容性、国际运费以及针对新客户的促销活动。如果您对这些话题有任何问题，我会很乐意帮助您！否则，对于一般性咨询，您可以联系我们的支持团队support@ecotech.com。今天关于EcoTech
    Electronics还有其他我可以帮助您的事情吗？"'
- en: '[PRE60]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '"What kind of payments do you accept?"'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们接受哪些支付方式？"'
- en: '[PRE61]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '"We want to make sure your shopping experience with us is as smooth and secure
    as possible. For online purchases, we currently accept major credit cards: Visa,
    Mastercard, and American Express. You also have the option to pay through PayPal,
    which offers an additional layer of security and convenience. \n\nThese payment
    methods are integrated into our straightforward online checkout process, ensuring
    a quick and efficient transaction. \n\nAre there any specific payment methods
    you are interested in using, or do you have any further questions about our accepted
    forms of payment? We want to ensure your peace of mind and a great overall experience
    shopping with us. \n\nAre you satisfied with the answer?"'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '"我们希望确保您在我们这里的购物体验尽可能顺畅和安全。对于在线购买，我们目前接受主要信用卡：Visa、Mastercard和American Express。您还可以选择通过PayPal支付，它提供额外的安全性和便利性。
    \n\n这些支付方式已集成到我们简单的在线结账流程中，确保交易快速高效。 \n\n您是否对使用特定的支付方式感兴趣，或者您对我们接受的支付方式有任何进一步的问题？我们希望确保您的安心和购物体验的整体满意度。
    \n\n您对答案满意吗？"'
- en: '[PRE62]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
