- en: Chapter 11. AntiPatterns
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第11章。反模式
- en: In the previous chapter, we started with an introduction to Compound patterns.
    You learned how design patterns work together to solve a real-world design problem.
    We went further to explore the Model-View-Controller design pattern—the king of
    Compound patterns. We understood that the MVC pattern is used when we need loose
    coupling between components and separation of the way in which data is stored
    from the way data is presented. We also went through the UML diagram of the MVC
    pattern and read about how the individual components (model, view, and controller)
    work among themselves. We also saw how it's applied in the real world with the
    help of the Python implementation. We discussed the benefits of the MVC pattern,
    learned more about it in the FAQs section, and summarized the discussion at the
    end of chapter.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们首先介绍了复合模式。你学习了设计模式如何协同工作来解决现实世界的实际问题。我们进一步探讨了模型-视图-控制器设计模式——复合模式之王。我们了解到，当需要组件之间的松散耦合以及数据存储方式与数据展示方式的分离时，会使用MVC模式。我们还研究了MVC模式的UML图，并了解了各个组件（模型、视图和控制器）之间是如何相互工作的。我们还看到了它是如何通过Python实现应用于现实世界的。我们讨论了MVC模式的好处，在FAQ部分对其进行了更多了解，并在章节末尾总结了讨论。
- en: In this chapter, we will talk about AntiPatterns. This is different from all
    the other chapters in the book; here, we will cover what we shouldn't do as architects
    or software engineers. We will understand what AntiPatterns are and how they are
    visible in software design or development aspects with the help of theoretical
    and practical examples.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论反模式。这与本书中的其他所有章节都不同；在这里，我们将讨论作为架构师或软件工程师我们不应该做什么。我们将通过理论和实践示例来理解反模式是什么以及它们如何在软件设计或开发方面体现出来。
- en: 'In brief, we will cover the following topics in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，在本章中我们将涵盖以下主题：
- en: An introduction to AntiPatterns
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 反模式的介绍
- en: AntiPatterns with examples
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有示例的反模式
- en: Common pitfalls during development
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发过程中的常见陷阱
- en: At the end of the chapter, we will summarize the entire discussion—consider
    this as a takeaway.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章结束时，我们将总结整个讨论——请将此视为一个要点。
- en: An introduction to AntiPatterns
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 反模式的介绍
- en: 'Software design principles represent a set of rules or guidelines that help
    software developers make design-level decisions. According to Robert Martin, there
    are four aspects of a bad design:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 软件设计原则代表了一套规则或指南，帮助软件开发者在设计层面做出决策。根据罗伯特·马丁的观点，糟糕的设计有四个方面：
- en: '**Immobile**: An application is developed in such a way that it becomes very
    hard to reuse'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不可移动性**：应用程序以这种方式开发，使其变得非常难以重用'
- en: '**Rigid**: An application is developed in such a manner that any small change
    may in turn result in moving of too many parts of the software'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**僵化性**：应用程序以这种方式开发，任何小的变化都可能反过来导致软件的许多部分移动'
- en: '**Fragile**: Any change in the current application results in breaking the
    existing system fairly easily'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**脆弱性**：当前应用程序的任何变化都可能导致现有系统相对容易地崩溃'
- en: '**Viscose**: Changes are done by the developer in the code or environment itself
    to avoid difficult architectural level changes'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**粘性**：开发者通过在代码或环境中本身进行更改来避免困难的架构级别更改'
- en: The above aspects of bad design, if applied, result in solutions that should
    not be implemented in the software architecture or development.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果应用上述糟糕设计的方面，会导致在软件架构或开发中不应实施的解决方案。
- en: An AntiPattern is an outcome of a solution to recurring problems so that the
    outcome is ineffective and becomes counterproductive. What does this mean? Let's
    say that you come across a software design problem. You get down to solving this
    problem. However, what if the solution has a negative impact on the design or
    causes any performance issues in the application? Hence, AntiPatterns are common
    defective processes and implementations within software applications.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式是针对重复性问题解决方案的结果，其结果是无效的，并变得适得其反。这意味着什么？假设你遇到一个软件设计问题。你着手解决这个问题。然而，如果解决方案对设计有负面影响或导致应用程序中任何性能问题，又会怎样呢？因此，反模式是软件应用程序中常见的缺陷过程和实现。
- en: 'AntiPatterns may be the result of the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式可能是以下情况的结果：
- en: A developer not knowing the software development practices
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者不了解软件开发实践
- en: A developer not applying design patterns in the correct context
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者没有在正确上下文中应用设计模式
- en: 'AntiPatterns can prove beneficial as they provide an opportunity for the following
    reasons:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式可以证明是有益的，因为它们提供了以下机会：
- en: Recognize recurring problems in the software industry and provide a detailed
    remedy for most of these issues
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 认识到软件行业中的重复性问题，并为其中大多数问题提供详细的解决方案
- en: Develop tools to recognize these problems and determine the underlying causes
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发工具以识别这些问题并确定潜在原因
- en: Describe the measures that can be taken at several levels of improving the application
    and architecture
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述可以在多个级别上采取的改进应用程序和架构的措施
- en: 'AntiPatterns can be classified under two main categories:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 反模式可以分为两大类：
- en: Software development AntiPatterns
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件开发反模式
- en: Software architecture AntiPatterns
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 软件架构反模式
- en: Software development AntiPatterns
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件开发反模式
- en: When you start software development for an application or project, you think
    of the code structure. This structure is consistent with the product architecture,
    design, customer use cases, and many other development considerations.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始为应用程序或项目进行软件开发时，你会考虑代码结构。这个结构与产品架构、设计、客户用例以及许多其他开发考虑因素保持一致。
- en: 'Often, when the software is developed, it gets deviated from the original code
    structure due to the following reasons:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在软件开发过程中，由于以下原因，软件可能会偏离原始代码结构：
- en: The thought process of the developer evolves with development
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者的思维过程随着开发而发展
- en: Use cases tend to change based on customer feedback
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用例往往会根据客户反馈而变化
- en: Data structures designed initially may undergo change with functionality or
    scalability considerations
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始设计的数据结构可能会随着功能或可扩展性的考虑而发生变化
- en: Due to the preceding reasons, software often undergoes refactoring. Refactoring
    is taken with a negative connotation by many, but in reality, refactoring is one
    of the critical parts of the software development journey, which provides developers
    an opportunity to relook the data structures and think about scalability and ever-evolving
    customer's needs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 由于上述原因，软件通常需要进行重构。重构在很多情况下被赋予了负面含义，但事实上，重构是软件开发旅程中的关键部分之一，它为开发者提供了重新审视数据结构和思考可扩展性和不断变化的客户需求的机会。
- en: The following examples provide you with an overview of different AntiPatterns
    observed in software development and architecture. We will cover only a few of
    them along with causes, symptoms, and consequences.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例为您提供了在软件开发和架构中观察到的不同反模式的概述。我们将仅涵盖其中的一些，包括原因、症状和后果。
- en: Spaghetti code
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 意大利面代码
- en: This is the most common and most heard of AntiPattern in software development.
    Do you know how spaghetti looks? So complicated, isn't it? Software control flows
    also get tangled if structures are developed in an ad hoc manner. Spaghetti code
    is difficult to maintain and optimize.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是软件开发中最常见且最常听到的反模式。你知道意大利面是什么样的吗？如此复杂，不是吗？如果结构是临时开发的，软件的控制流也会变得混乱。意大利面代码难以维护和优化。
- en: 'The typical causes of Spaghetti include the following:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 意大利面的典型原因包括以下：
- en: Ignorance on object-oriented programming and analysis
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对面向对象编程和分析的无知
- en: Product architecture or design that is not considered
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未考虑的产品架构或设计
- en: Quick fix mentality
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速修复的心态
- en: 'You know you''re stuck with Spaghetti when the following points are true:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当以下几点成立时，你知道你陷入了意大利面困境：
- en: Minimum reuse of structures is possible
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 结构的最小重用是可能的
- en: Maintenance efforts are too high
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护工作过于繁重
- en: Extension and flexibility to change is reduced
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展性和灵活性降低
- en: Golden Hammer
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 黄金锤
- en: In the software industry, you would have seen many examples where a given solution
    (technology, design, or module) is used in many places because the solution would
    have yielded benefits in multiple projects. As we have seen with examples throughout
    this book, a solution is best suited in a given context and applied to certain
    types of problems. However, teams or software developers tend to go with one proven
    solution irrespective of whether it suits the need. This is the reason that it's
    called Golden Hammer, a hammer for all the nails possible (a solution to all problems).
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在软件行业，你可能会看到许多例子，其中某个解决方案（技术、设计或模块）被用于许多地方，因为该解决方案在多个项目中都产生了效益。正如我们在本书中的例子所看到的那样，一个解决方案最适合在特定环境中使用，并应用于某些类型的问题。然而，团队或软件开发者往往会选择一个经过验证的解决方案，而不考虑它是否适合需求。这就是为什么它被称为“黄金锤”，一把适用于所有可能的钉子（解决所有问题的方案）。
- en: 'The typical causes of Golden Hammer include the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 黄金锤的典型原因包括以下：
- en: It comes as a recommendation from the top (architects or technology leaders)
    who are not close to the given problem at hand
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这是一种来自高层（架构师或技术领导者）的建议，他们并不接近当前的问题
- en: A solution has yielded a lot of benefits in the past but in projects with a
    different context and requirements
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个解决方案在过去带来了很多好处，但在具有不同上下文和需求的项目中
- en: A company is stuck with this technology as they have invested money in training
    the staff or the staff is comfortable with it
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一家公司因为投入了资金培训员工或员工对这种技术感到舒适而陷入这种技术
- en: 'The consequences of a Golden Hammer are as follows:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 金刚钻效应的后果如下：
- en: One solution is obsessively applied to all software projects
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种解决方案被强迫应用于所有软件项目
- en: The product is described, not by the features, but the technology used in development
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品不是通过特性来描述，而是通过开发中使用的科技来描述
- en: In the company corridors, you hear developers talking, "That could have been
    better than using this."
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在公司的走廊里，你会听到开发者们谈论，“那可能比使用这个更好。”
- en: Requirements are not completed and not in sync with user expectations
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 需求未完成且与用户期望不一致
- en: Lava Flow
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 洪流效应
- en: This AntiPattern is related to Dead Code, or an unusable piece of code, lying
    in the software application for the fear of breaking something else if it is modified.
    As more time passes, this piece of code continues to remain in the software and
    solidifies its position, like lava turning into a hard rock. It may happen in
    cases where you start developing software to support a certain use case but the
    use case itself changes with time.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反模式与死代码相关，或者是一段无法使用的代码，由于担心修改后可能会破坏其他部分，所以保留在软件应用中。随着时间的推移，这段代码继续留在软件中，并像熔岩变成硬岩一样固化其位置。这种情况可能发生在你开始开发软件以支持某个用例，但随着时间的推移，该用例本身发生变化的情况下。
- en: 'The causes of a Lava Flow include the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 洪流效应的原因包括以下几方面：
- en: A lot of trial and error code in the production
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生产环境中大量的试错代码
- en: Single-handedly written code that is not reviewed and is handed over to other
    development teams without any training
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 单独编写的代码未经审查，且在没有培训的情况下转交给其他开发团队
- en: The initial thought of the software architecture or design is implemented in
    the code base, but no one understands it anymore
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件架构或设计的初步想法已经体现在代码库中，但现在已经没有人理解它了
- en: 'The symptoms of a Lava Flow are as follows:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 洪流效应的症状如下：
- en: Low code coverage (if at all done) for developed tests
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 低代码覆盖率（如果有的话）对于已开发的测试
- en: A lot of occurrences of commented code without reasons
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 许多没有原因的注释代码
- en: Obsolete interfaces, or developers try to work around existing code
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 已废弃的接口，或者开发者试图绕过现有代码
- en: Copy-and-paste or cut-and-paste programming
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 复制粘贴或剪切粘贴编程
- en: As you know, this is one of the most common AntiPatterns. Experienced developers
    put their code snippets online (GitHub or Stack Overflow) that are solutions to
    some commonly occurring issues. Developers often copy these snippets as is and
    use in their application to move further in the application development. In this
    case, there is no validation that this is the most optimized code or even that
    the code actually fits the context. This leads to inflexible software application
    that is hard to maintain.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所知，这是最常见的反模式之一。经验丰富的开发者将他们的代码片段发布到网上（GitHub或Stack Overflow），这些代码片段是解决一些常见问题的解决方案。开发者经常直接复制这些片段并用于他们的应用程序，以推动应用程序的开发。在这种情况下，没有验证这是最优化代码，甚至没有验证代码实际上适合上下文。这导致软件应用缺乏灵活性，难以维护。
- en: 'The causes of copy-and-paste or cut-and-paste are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 复制粘贴或剪切粘贴的原因如下：
- en: Novice developers not used to writing code or not aware how to develop
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新手开发者不习惯编写代码或不知道如何开发
- en: Quick bug fix or moving forward with development
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速修复错误或继续开发
- en: Code duplication for need of a code structure or standardization across modules
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于需要代码结构或模块间的标准化，而导致的代码重复
- en: A lack of long-term thinking or forethought
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏长期思考或前瞻性
- en: 'The consequences of cut-and-paste or copy-and-paste include the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 剪贴板或复制粘贴的后果包括以下几方面：
- en: Similar type of issues across software application
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件应用中类似类型的问题
- en: Higher maintenance costs and increased bug life cycle
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 维护成本增加和错误生命周期延长
- en: Less modular code base with the same code running into a number of lines
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 代码库模块化程度低，相同的代码行数众多
- en: Inheriting issues that existed in the first place
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 继承了最初存在的问题
- en: Software architecture AntiPatterns
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 软件架构反模式
- en: Software architecture is an important piece of overall system architecture.
    While system architecture focuses on aspects such as the design, tools, and hardware
    among other things, software architecture looks at modeling the software that
    is well understood by the development and test teams, product managers, and other
    stakeholders. This architecture plays a critical role in determining the success
    of the implementation and how the product works for the customers.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 软件架构是整体系统架构的重要组成部分。虽然系统架构侧重于设计、工具和硬件等方面，但软件架构关注的是建模软件，这种软件被开发团队、测试团队、产品经理和其他利益相关者所理解。这种架构在确定实施的成功以及产品如何为顾客工作方面发挥着关键作用。
- en: We will discuss some of the architecture-level AntiPatterns that we observe
    in the real world with development and implementation software architecture.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将讨论我们在现实世界中观察到的某些架构级反模式，这些反模式与软件开发和实施架构有关。
- en: Reinventing the wheel
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重新发明轮子
- en: We often hear technology leaders talking about NOT reinventing the wheel. What
    does it essentially mean? For some, this may mean code or library reuse. Actually,
    it points to architecture reuse. For example, you have solved a problem and come
    up with an architecture-level solution. If you encounter a similar problem in
    any other application, the thought process (architecture or design) that was developed
    earlier should be reused. There is no point in revisiting the same problem and
    devising a solution, which is essentially reinventing the wheel.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常听到技术领导者谈论“不要重新发明轮子”。这本质上意味着什么？对一些人来说，这可能意味着代码或库的重用。实际上，它指的是架构的重用。例如，你已经解决了一个问题，并提出了一个架构级的解决方案。如果你在其他任何应用程序中遇到类似的问题，之前开发的思想过程（架构或设计）应该被重用。重新审视相同的问题并制定解决方案是没有意义的，这本质上就是重新发明轮子。
- en: 'The causes that lead to reinventing the wheel are as follows:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 导致重新发明轮子的原因如下：
- en: An absence of a central documentation or repository that talks about architecture-level
    problems and solutions implemented
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺乏关于架构级问题和解决方案的中央文档或存储库
- en: A lack of communication between technology leaders in the community or company
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社区或公司内部技术领导者之间的沟通不足
- en: Building from scratch is the process followed in the organization; basically,
    immature processes and loose process implementation and adherence
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从零开始构建是组织遵循的过程；基本上，不成熟的过程和松散的过程实施及遵守
- en: 'The consequences of this AntiPattern include the following:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反模式的后果包括以下内容：
- en: Too many solutions to solve one standard problem, with many of them not being
    well thought out
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解决一个标准问题有太多解决方案，其中许多没有经过深思熟虑
- en: More time and resource utilization for the engineering team leading to overbudgeting
    and more time to market
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 工程团队花费更多的时间和资源，导致超预算和更长的上市时间
- en: A closed system architecture (architecture useful for only one product), duplication
    of efforts, and poor risk management
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 封闭的系统架构（仅适用于单一产品的架构）、重复劳动和风险管理不佳
- en: Vendor lock-in
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 供应商锁定
- en: As the name of the AntiPattern suggests, product companies tend to be dependent
    on some of the technologies provided by their vendors. These technologies are
    so glued to their system that it is very difficult to move away.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如反模式名称所示，产品公司往往依赖于供应商提供的一些技术。这些技术与其系统紧密相连，以至于很难摆脱。
- en: 'The following are the causes of a vendor lock-in:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是供应商锁定的原因：
- en: Familiarity with folks in authority in the vendor company and possible discounts
    in the technology purchase
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与供应商公司中的权威人士熟悉，以及可能在技术采购中享受折扣
- en: Technology chosen based on the marketing and sales pitch instead of technology
    evaluation
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据营销和销售方案而不是技术评估来选择技术
- en: Using a proven technology (proven indicates that the return on investments with
    this technology were really high in the previous experience) in the current project
    even when it's not suited for project needs or requirements
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使当前项目不适合项目需求或要求，也在当前项目中使用经过验证的技术（经过验证表示在以前的经验中，使用这项技术的投资回报率非常高）
- en: Technologists/developers are already trained in using this technology
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术人员/开发者已经接受了使用这项技术的培训
- en: 'The consequences of a vendor lock-in are as follows:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商锁定带来的后果如下：
- en: Release cycles and product maintenance cycles of a company's product releases
    are directly dependent on the vendor's release time frame
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公司产品发布的发布周期和维护周期直接依赖于供应商的发布时间表
- en: The product is developed around the technology rather than on the customer's
    requirements
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品是围绕技术而非客户需求开发的
- en: The product's time to market is unreliable and doesn't meet customer's expectations
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 产品的上市时间不可靠，不符合客户的期望
- en: Design by committee
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 委员会设计
- en: Sometimes, based on the process in an organization, a group of people sit together
    and design a particular system. The resulting software architecture is often complex
    or substandard because it involves too many thought processes, and technologists
    who may not have the right skillset or experience in designing the products have
    put forward the ideas.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，根据组织中的流程，一群人坐在一起设计特定的系统。由此产生的软件架构通常很复杂或不符合标准，因为它涉及太多的思维过程，而且可能没有正确技能集或设计产品经验的技术人员提出了想法。
- en: 'The causes of design by committee are as follows:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 委员会设计的原因如下：
- en: The process in the organization involves getting the architecture or design
    approved by many stakeholders
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组织中的流程涉及让架构或设计得到许多利益相关者的批准
- en: No single point of contact or architect responsible for the design
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有单一的联系点或负责设计的架构师
- en: The design priorities set by marketing or technologists rather than set by customer
    feedback
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由市场营销人员或技术人员而非客户反馈设定的设计优先级
- en: 'The symptoms observed with this AntiPattern include the following:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 观察到与此反模式相关的症状包括以下：
- en: Conflicting viewpoints between developers and architects even after the design
    is finalized
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 即使设计已经确定，开发人员和架构师之间也存在冲突的观点
- en: Overly complex design that is very difficult to document
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过于复杂的设计，很难进行文档记录
- en: Any change in the specification or design undergoes review by many, resulting
    in implementation delays
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何对规格或设计的变更都需要经过多人的审查，从而导致实施延迟
- en: Summary
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: To summarize this chapter, you learned about AntiPatterns, what they are, and
    their classifications. We understood that AntiPatterns could be related to software
    development or software architecture. We looked at the commonly occurring AntiPatterns
    and learned about their causes, symptoms, and consequences. I am sure you will
    learn from these and avoid such situations in your project.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 总结本章内容，你学习了反模式（AntiPatterns）的定义、分类，以及它们与软件开发或软件架构的关系。我们探讨了常见反模式及其成因、症状和后果。我相信你会从中学到东西，并在你的项目中避免类似情况的发生。
- en: This is it folks, this was the last chapter of the book. Hope you enjoyed it
    and the book helped you improve your skills. Wish you all the very best!
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，朋友们，这是本书的最后一章。希望你喜欢它，并且这本书能帮助你提高技能。祝你们所有人好运！
