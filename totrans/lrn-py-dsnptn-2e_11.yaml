- en: Chapter 11. AntiPatterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we started with an introduction to Compound patterns.
    You learned how design patterns work together to solve a real-world design problem.
    We went further to explore the Model-View-Controller design pattern—the king of
    Compound patterns. We understood that the MVC pattern is used when we need loose
    coupling between components and separation of the way in which data is stored
    from the way data is presented. We also went through the UML diagram of the MVC
    pattern and read about how the individual components (model, view, and controller)
    work among themselves. We also saw how it's applied in the real world with the
    help of the Python implementation. We discussed the benefits of the MVC pattern,
    learned more about it in the FAQs section, and summarized the discussion at the
    end of chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will talk about AntiPatterns. This is different from all
    the other chapters in the book; here, we will cover what we shouldn't do as architects
    or software engineers. We will understand what AntiPatterns are and how they are
    visible in software design or development aspects with the help of theoretical
    and practical examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, we will cover the following topics in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to AntiPatterns
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: AntiPatterns with examples
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Common pitfalls during development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will summarize the entire discussion—consider
    this as a takeaway.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to AntiPatterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Software design principles represent a set of rules or guidelines that help
    software developers make design-level decisions. According to Robert Martin, there
    are four aspects of a bad design:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Immobile**: An application is developed in such a way that it becomes very
    hard to reuse'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Rigid**: An application is developed in such a manner that any small change
    may in turn result in moving of too many parts of the software'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fragile**: Any change in the current application results in breaking the
    existing system fairly easily'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Viscose**: Changes are done by the developer in the code or environment itself
    to avoid difficult architectural level changes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The above aspects of bad design, if applied, result in solutions that should
    not be implemented in the software architecture or development.
  prefs: []
  type: TYPE_NORMAL
- en: An AntiPattern is an outcome of a solution to recurring problems so that the
    outcome is ineffective and becomes counterproductive. What does this mean? Let's
    say that you come across a software design problem. You get down to solving this
    problem. However, what if the solution has a negative impact on the design or
    causes any performance issues in the application? Hence, AntiPatterns are common
    defective processes and implementations within software applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'AntiPatterns may be the result of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A developer not knowing the software development practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A developer not applying design patterns in the correct context
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AntiPatterns can prove beneficial as they provide an opportunity for the following
    reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Recognize recurring problems in the software industry and provide a detailed
    remedy for most of these issues
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop tools to recognize these problems and determine the underlying causes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Describe the measures that can be taken at several levels of improving the application
    and architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'AntiPatterns can be classified under two main categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Software development AntiPatterns
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Software architecture AntiPatterns
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Software development AntiPatterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you start software development for an application or project, you think
    of the code structure. This structure is consistent with the product architecture,
    design, customer use cases, and many other development considerations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Often, when the software is developed, it gets deviated from the original code
    structure due to the following reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: The thought process of the developer evolves with development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use cases tend to change based on customer feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data structures designed initially may undergo change with functionality or
    scalability considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Due to the preceding reasons, software often undergoes refactoring. Refactoring
    is taken with a negative connotation by many, but in reality, refactoring is one
    of the critical parts of the software development journey, which provides developers
    an opportunity to relook the data structures and think about scalability and ever-evolving
    customer's needs.
  prefs: []
  type: TYPE_NORMAL
- en: The following examples provide you with an overview of different AntiPatterns
    observed in software development and architecture. We will cover only a few of
    them along with causes, symptoms, and consequences.
  prefs: []
  type: TYPE_NORMAL
- en: Spaghetti code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the most common and most heard of AntiPattern in software development.
    Do you know how spaghetti looks? So complicated, isn't it? Software control flows
    also get tangled if structures are developed in an ad hoc manner. Spaghetti code
    is difficult to maintain and optimize.
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical causes of Spaghetti include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Ignorance on object-oriented programming and analysis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Product architecture or design that is not considered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick fix mentality
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You know you''re stuck with Spaghetti when the following points are true:'
  prefs: []
  type: TYPE_NORMAL
- en: Minimum reuse of structures is possible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintenance efforts are too high
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extension and flexibility to change is reduced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Golden Hammer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the software industry, you would have seen many examples where a given solution
    (technology, design, or module) is used in many places because the solution would
    have yielded benefits in multiple projects. As we have seen with examples throughout
    this book, a solution is best suited in a given context and applied to certain
    types of problems. However, teams or software developers tend to go with one proven
    solution irrespective of whether it suits the need. This is the reason that it's
    called Golden Hammer, a hammer for all the nails possible (a solution to all problems).
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical causes of Golden Hammer include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: It comes as a recommendation from the top (architects or technology leaders)
    who are not close to the given problem at hand
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A solution has yielded a lot of benefits in the past but in projects with a
    different context and requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A company is stuck with this technology as they have invested money in training
    the staff or the staff is comfortable with it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The consequences of a Golden Hammer are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: One solution is obsessively applied to all software projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product is described, not by the features, but the technology used in development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the company corridors, you hear developers talking, "That could have been
    better than using this."
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Requirements are not completed and not in sync with user expectations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lava Flow
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This AntiPattern is related to Dead Code, or an unusable piece of code, lying
    in the software application for the fear of breaking something else if it is modified.
    As more time passes, this piece of code continues to remain in the software and
    solidifies its position, like lava turning into a hard rock. It may happen in
    cases where you start developing software to support a certain use case but the
    use case itself changes with time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The causes of a Lava Flow include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A lot of trial and error code in the production
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Single-handedly written code that is not reviewed and is handed over to other
    development teams without any training
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The initial thought of the software architecture or design is implemented in
    the code base, but no one understands it anymore
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The symptoms of a Lava Flow are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Low code coverage (if at all done) for developed tests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lot of occurrences of commented code without reasons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Obsolete interfaces, or developers try to work around existing code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy-and-paste or cut-and-paste programming
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As you know, this is one of the most common AntiPatterns. Experienced developers
    put their code snippets online (GitHub or Stack Overflow) that are solutions to
    some commonly occurring issues. Developers often copy these snippets as is and
    use in their application to move further in the application development. In this
    case, there is no validation that this is the most optimized code or even that
    the code actually fits the context. This leads to inflexible software application
    that is hard to maintain.
  prefs: []
  type: TYPE_NORMAL
- en: 'The causes of copy-and-paste or cut-and-paste are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Novice developers not used to writing code or not aware how to develop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quick bug fix or moving forward with development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code duplication for need of a code structure or standardization across modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of long-term thinking or forethought
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The consequences of cut-and-paste or copy-and-paste include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Similar type of issues across software application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher maintenance costs and increased bug life cycle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Less modular code base with the same code running into a number of lines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inheriting issues that existed in the first place
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Software architecture AntiPatterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Software architecture is an important piece of overall system architecture.
    While system architecture focuses on aspects such as the design, tools, and hardware
    among other things, software architecture looks at modeling the software that
    is well understood by the development and test teams, product managers, and other
    stakeholders. This architecture plays a critical role in determining the success
    of the implementation and how the product works for the customers.
  prefs: []
  type: TYPE_NORMAL
- en: We will discuss some of the architecture-level AntiPatterns that we observe
    in the real world with development and implementation software architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Reinventing the wheel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We often hear technology leaders talking about NOT reinventing the wheel. What
    does it essentially mean? For some, this may mean code or library reuse. Actually,
    it points to architecture reuse. For example, you have solved a problem and come
    up with an architecture-level solution. If you encounter a similar problem in
    any other application, the thought process (architecture or design) that was developed
    earlier should be reused. There is no point in revisiting the same problem and
    devising a solution, which is essentially reinventing the wheel.
  prefs: []
  type: TYPE_NORMAL
- en: 'The causes that lead to reinventing the wheel are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An absence of a central documentation or repository that talks about architecture-level
    problems and solutions implemented
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A lack of communication between technology leaders in the community or company
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building from scratch is the process followed in the organization; basically,
    immature processes and loose process implementation and adherence
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The consequences of this AntiPattern include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Too many solutions to solve one standard problem, with many of them not being
    well thought out
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More time and resource utilization for the engineering team leading to overbudgeting
    and more time to market
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A closed system architecture (architecture useful for only one product), duplication
    of efforts, and poor risk management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Vendor lock-in
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the name of the AntiPattern suggests, product companies tend to be dependent
    on some of the technologies provided by their vendors. These technologies are
    so glued to their system that it is very difficult to move away.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the causes of a vendor lock-in:'
  prefs: []
  type: TYPE_NORMAL
- en: Familiarity with folks in authority in the vendor company and possible discounts
    in the technology purchase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technology chosen based on the marketing and sales pitch instead of technology
    evaluation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a proven technology (proven indicates that the return on investments with
    this technology were really high in the previous experience) in the current project
    even when it's not suited for project needs or requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technologists/developers are already trained in using this technology
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The consequences of a vendor lock-in are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Release cycles and product maintenance cycles of a company's product releases
    are directly dependent on the vendor's release time frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product is developed around the technology rather than on the customer's
    requirements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The product's time to market is unreliable and doesn't meet customer's expectations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Design by committee
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sometimes, based on the process in an organization, a group of people sit together
    and design a particular system. The resulting software architecture is often complex
    or substandard because it involves too many thought processes, and technologists
    who may not have the right skillset or experience in designing the products have
    put forward the ideas.
  prefs: []
  type: TYPE_NORMAL
- en: 'The causes of design by committee are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The process in the organization involves getting the architecture or design
    approved by many stakeholders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: No single point of contact or architect responsible for the design
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The design priorities set by marketing or technologists rather than set by customer
    feedback
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The symptoms observed with this AntiPattern include the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Conflicting viewpoints between developers and architects even after the design
    is finalized
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Overly complex design that is very difficult to document
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any change in the specification or design undergoes review by many, resulting
    in implementation delays
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To summarize this chapter, you learned about AntiPatterns, what they are, and
    their classifications. We understood that AntiPatterns could be related to software
    development or software architecture. We looked at the commonly occurring AntiPatterns
    and learned about their causes, symptoms, and consequences. I am sure you will
    learn from these and avoid such situations in your project.
  prefs: []
  type: TYPE_NORMAL
- en: This is it folks, this was the last chapter of the book. Hope you enjoyed it
    and the book helped you improve your skills. Wish you all the very best!
  prefs: []
  type: TYPE_NORMAL
