["```py\n>>> def example(a, b, **kw): \n...     return a*b \n... \n>>> type(example) \n<class ’function’> \n>>> example.__code__.co_varnames \n(’a’, ’b’, ’kw’) \n>>> example.__code__.co_argcount \n2\n```", "```py\n>>> mersenne = lambda x: 2 ** x - 1 \n>>> mersenne(17) \n131071\n```", "```py\n>>> default_zip = lambda row: row.setdefault(’ZIP’, ’00000’)\n```", "```py\n>>> r_0 = {’CITY’: ’Vaca Key’} \n>>> default_zip(r_0) \n’00000’ \n>>> r_0 \n{’CITY’: ’Vaca Key’, ’ZIP’: ’00000’} \n\n>>> r_1 = {’CITY’: ’Asheville’, ’ZIP’: 27891} \n>>> default_zip(r_1) \n27891\n```", "```py\n>>> year_cheese = [(2000, 29.87), (2001, 30.12), \n...     (2002, 30.6), (2003, 30.66), (2004, 31.33), \n...     (2005, 32.62), (2006, 32.73), (2007, 33.5), \n...     (2008, 32.84), (2009, 33.02), (2010, 32.92)]\n```", "```py\n>>> max(year_cheese) \n(2010, 32.92)\n```", "```py\n>>> max(year_cheese, key=lambda yc: yc[1]) \n(2007, 33.5)\n```", "```py\n>>> max(map(lambda yc: (yc[1], yc), year_cheese))[1] \n(2007, 33.5)\n```", "```py\n>>> snd = lambda x: x[1] \n>>> snd(max(map(lambda yc: (yc[1], yc), year_cheese))) \n(2007, 33.5)\n```", "```py\n>>> 0 and print(\"right\") \n0 \n\n>>> True and print(\"right\") \nright\n```", "```py\nfrom collections.abc import Iterator \ndef numbers(stop: int) -> Iterator[int]: \n    for i in range(stop): \n        print(f\"{i=}\") \n        yield i\n```", "```py\ndef sum_to(limit: int) -> int: \n    sum: int = 0 \n    for i in numbers(1_024): \n        if i == limit: break \n        sum += i \n    return sum\n```", "```py\n>>> sum_to(5) \ni=0 \ni=1 \ni=2 \ni=3 \ni=4 \ni=5 \n10\n```", "```py\nnot any( \n    n % p == 0 \n    for p in range(2, int(math.sqrt(n))+1) \n)\n```", "```py\ndef isprimer(n: int) -> bool: \n    def iscoprime(k: int, a: int, b: int) -> bool: \n        \"\"\"Is k coprime with a value in the given range?\"\"\" \n        if a == b: return True \n        return (k % a != 0) and iscoprime(k, a+1, b) \n    return iscoprime(n, 2, int(math.sqrt(n)) + 1)\n```", "```py\nimport math \ndef isprimem(n: int) -> bool: \n    match n: \n        case _ if n < 2: \n            prime = False \n        case 2: \n            prime = True \n        case _ if n % 2 == 0: \n            prime = False \n        case _: \n            for i in range(3, 1 + int(math.sqrt(n)), 2): \n                if n % i == 0: \n                    # Stop as soon as we know... \n                    return False \n            prime = True \n    return prime\n```", "```py\nsome_object.foo().bar().yet_more()\n```", "```py\nyet_more(bar(foo(some_object)))\n```", "```py\nObserved  Actual \n     800     630 \n     900     720 \netc.\n```"]