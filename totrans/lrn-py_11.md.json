["```py\ndef debug(*msg, print_separator=True):\n    print(*msg)\n    if print_separator:\n        print('-' * 40)\n\ndebug('Data is ...')\ndebug('Different', 'Strings', 'Are not a problem')\ndebug('After while loop', print_separator=False)\n```", "```py\n$ python custom.py \nData is ...\n----------------------------------------\nDifferent Strings Are not a problem\n----------------------------------------\nAfter while loop\n\n```", "```py\nfrom time import sleep\n\ndef debug(*msg, timestamp=[None]):\n    print(*msg)\n    from time import time  # local import\n    if timestamp[0] is None:\n        timestamp[0] = time()  #1\n    else:\n        now = time()\n        print(' Time elapsed: {:.3f}s'.format(\n            now - timestamp[0]))\n        timestamp[0] = now  #2\n\ndebug('Entering nasty piece of code...')\nsleep(.3)\ndebug('First step done.')\nsleep(.5)\ndebug('Second step done.')\n```", "```py\n$ python custom_timestamp.py \nEntering nasty piece of code...\nFirst step done.\n Time elapsed: 0.300s\nSecond step done.\n Time elapsed: 0.501s\n\n```", "```py\nd = {'some': 'key'}\nkey = 'some-other'\nprint(d[key])\n```", "```py\n$ python traceback_simple.py \nTraceback (most recent call last):\n File \"traceback_simple.py\", line 3, in <module>\n print(d[key])\nKeyError: 'some-other'\n\n```", "```py\nclass ValidatorError(Exception):\n    \"\"\"Raised when accessing a dict results in KeyError. \"\"\"\n\nd = {'some': 'key'}\nmandatory_key = 'some-other'\ntry:\n    print(d[mandatory_key])\nexcept KeyError:\n    raise ValidatorError(\n        '`{}` not found in d.'.format(mandatory_key))\n```", "```py\n$ python traceback_validator.py \nTraceback (most recent call last):\n File \"traceback_validator.py\", line 7, in <module>\n print(d[mandatory_key])\nKeyError: 'some-other'\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n File \"traceback_validator.py\", line 10, in <module>\n '`{}` not found in d.'.format(mandatory_key))\n__main__.ValidatorError: `some-other` not found in d.\n\n```", "```py\n# d comes from a JSON payload we don't control\nd = {'first': 'v1', 'second': 'v2', 'fourth': 'v4'}\n# keys also comes from a JSON payload we don't control\nkeys = ('first', 'second', 'third', 'fourth')\n\ndef do_something_with_value(value):\n    print(value)\n\nfor key in keys:\n    do_something_with_value(d[key])\n\nprint('Validation done.')\n```", "```py\n$ python ipdebugger.py \nv1\nv2\nTraceback (most recent call last):\n File \"ipdebugger.py\", line 10, in <module>\n do_something_with_value(d[key])\nKeyError: 'third'\n\n```", "```py\n# d comes from a JSON payload we don't control\nd = {'first': 'v1', 'second': 'v2', 'fourth': 'v4'}\n# keys also comes from a JSON payload we don't control\nkeys = ('first', 'second', 'third', 'fourth')\n\ndef do_something_with_value(value):\n    print(value)\n\nimport ipdb\nipdb.set_trace()  # we place a breakpoint here\n\nfor key in keys:\n    do_something_with_value(d[key])\n\nprint('Validation done.')\n```", "```py\n$ python ipdebugger_ipdb.py\n> /home/fab/srv/l.p/ch11/ipdebugger_ipdb.py(12)<module>()\n 11 \n---> 12 for key in keys:  # this is where the breakpoint comes\n 13     do_something_with_value(d[key])\n\nipdb> keys  # let's inspect the keys tuple\n('first', 'second', 'third', 'fourth')\nipdb> !d.keys()  # now the keys of d\ndict_keys(['first', 'fourth', 'second'])  # we miss 'third'\nipdb> !d['third'] = 'something dark side...'  # let's put it in\nipdb> c  # ... and continue\nv1\nv2\nsomething dark side...\nv4\nValidation done.\n\n```", "```py\nimport logging\n\nlogging.basicConfig(\n    filename='ch11.log',\n    level=logging.DEBUG,  # minimum level capture in the file\n    format='[%(asctime)s] %(levelname)s:%(message)s',\n    datefmt='%m/%d/%Y %I:%M:%S %p')\n\nmylist = [1, 2, 3]\nlogging.info('Starting to process `mylist`...')\n\nfor position in range(4):\n    try:\n        logging.debug('Value at position {} is {}'.format(\n            position, mylist[position]))\n    except IndexError:\n        logging.exception('Faulty position: {}'.format(position))\n\nlogging.info('Done parsing `mylist`.')\n```", "```py\n[10/08/2015 04:17:06 PM] INFO:Starting to process `mylist`...\n[10/08/2015 04:17:06 PM] DEBUG:Value at position 0 is 1\n[10/08/2015 04:17:06 PM] DEBUG:Value at position 1 is 2\n[10/08/2015 04:17:06 PM] DEBUG:Value at position 2 is 3\n[10/08/2015 04:17:06 PM] ERROR:Faulty position: 3\nTraceback (most recent call last):\n File \"log.py\", line 15, in <module>\n position, mylist[position]))\nIndexError: list index out of range\n[10/08/2015 04:17:06 PM] INFO:Done parsing `mylist`.\n\n```", "```py\nmylist = [1, 2, 3]  # this ideally comes from some place\nassert 4 == len(mylist)  # this will break\nfor position in range(4):\n    print(mylist[position])\n```", "```py\n$ python assertions.py \nTraceback (most recent call last):\n File \"assertions.py\", line 3, in <module>\n assert 4 == len(mylist)\nAssertionError\n\n```"]