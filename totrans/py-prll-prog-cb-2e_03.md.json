["```py\n> python multiprocessing_example.py\n```", "```py\nimport multiprocessing\n```", "```py\ndef myFunc(i):\n    print ('calling myFunc from process n°: %s' %i)\n    for j in range (0,i):\n        print('output from myFunc is :%s' %j)\n\n```", "```py\nif __name__ == '__main__':\n    for i in range(6):\n        process = multiprocessing.Process(target=myFunc, args=(i,))\n```", "```py\n     process.start()\n     process.join()\n```", "```py\nprocess = multiprocessing.Process(target=myFunc, args=(i,))\n```", "```py\n     process.start()\n     process.join()\n```", "```py\n> python spawning_processes.py\n```", "```py\ncalling myFunc from process n°: 0\ncalling myFunc from process n°: 1\noutput from myFunc is :0\ncalling myFunc from process n°: 2\noutput from myFunc is :0\noutput from myFunc is :1\ncalling myFunc from process n°: 3\noutput from myFunc is :0\noutput from myFunc is :1\noutput from myFunc is :2\ncalling myFunc from process n°: 4\noutput from myFunc is :0\noutput from myFunc is :1\noutput from myFunc is :2\noutput from myFunc is :3\ncalling myFunc from process n°: 5\noutput from myFunc is :0\noutput from myFunc is :1\noutput from myFunc is :2\noutput from myFunc is :3\noutput from myFunc is :4\n```", "```py\ndef myFunc(i):\n    print ('calling myFunc from process n°: %s' %i)\n    for j in range (0,i):\n        print('output from myFunc is :%s' %j)\n    return\n```", "```py\nimport multiprocessing\nfrom myFunc import myFunc\n\nif __name__ == '__main__':\n    for i in range(6):\n        process = multiprocessing.Process(target=myFunc, args=(i,))\n        process.start()\n        process.join()\n```", "```py\n> python spawning_processes_names.py\n```", "```py\nimport multiprocessing\nimport time\n\ndef myFunc():\n    name = multiprocessing.current_process().name\n    print (\"Starting process name = %s \\n\" %name)\n    time.sleep(3)\n    print (\"Exiting process name = %s \\n\" %name)\n```", "```py\nif __name__ == '__main__':\n    process_with_name = multiprocessing.Process\\\n                        (name='myFunc process',\\\n                          target=myFunc)\n\n    process_with_default_name = multiprocessing.Process\\\n                                (target=myFunc)\n```", "```py\n    process_with_name.start()\n    process_with_default_name.start()\n    process_with_name.join()\n    process_with_default_name.join()\n```", "```py\n> python naming_processes.py\n```", "```py\nStarting process name = myFunc process\nStarting process name = Process-2\n\nExiting process name = Process-2\nExiting process name = myFunc process\n```", "```py\n>>> import multiprocessing\n>>> multiprocessing.current_process().name\n'MainProcess'\n```", "```py\nimport multiprocessing\nimport time\n```", "```py\ndef foo():\n    name = multiprocessing.current_process().name\n    print (\"Starting %s \\n\" %name)\n    if name == 'background_process':\n        for i in range(0,5):\n            print('---> %d \\n' %i)\n        time.sleep(1)\n    else:\n        for i in range(5,10):\n            print('---> %d \\n' %i)\n        time.sleep(1)\n    print (\"Exiting %s \\n\" %name)\n```", "```py\nif __name__ == '__main__':\n    background_process = multiprocessing.Process\\\n                         (name='background_process',\\\n                          target=foo)\n    background_process.daemon = True\n\n    NO_background_process = multiprocessing.Process\\\n                            (name='NO_background_process',\\\n                             target=foo)\n\n    NO_background_process.daemon = False\n\n    background_process.start()\n    NO_background_process.start()\n```", "```py\n> python run_background_processes.py\n```", "```py\nStarting NO_background_process\n---> 5\n\n---> 6\n\n---> 7\n\n---> 8\n\n---> 9\nExiting NO_background_process\n```", "```py\nbackground_process.daemon = False\n```", "```py\nC:\\>python run_background_processes_no_daemons.py\n```", "```py\nStarting NO_background_process\nStarting background_process\n---> 5\n\n---> 0\n---> 6\n\n---> 1\n---> 7\n\n---> 2\n---> 8\n\n---> 3\n---> 9\n\n---> 4\n\nExiting NO_background_process\nExiting background_process\n```", "```py\nimport multiprocessing\nimport time\n```", "```py\ndef foo():\n    print ('Starting function')\n    for i in range(0,10):\n        print('-->%d\\n' %i)\n        time.sleep(1)\n    print ('Finished function')\n```", "```py\nif __name__ == '__main__':\n    p = multiprocessing.Process(target=foo)\n    print ('Process before execution:', p, p.is_alive())\n    p.start()\n    print ('Process running:', p, p.is_alive())\n    p.terminate()\n    print ('Process terminated:', p, p.is_alive())\n    p.join()\n    print ('Process joined:', p, p.is_alive())\n```", "```py\n    print ('Process exit code:', p.exitcode)\n```", "```py\n> python killing_processes.py\n```", "```py\nProcess before execution: <Process(Process-1, initial)> False\nProcess running: <Process(Process-1, started)> True\nProcess terminated: <Process(Process-1, started)> True\nProcess joined: <Process(Process-1, stopped[SIGTERM])> False\nProcess exit code: -15\n```", "```py\nimport multiprocessing\n```", "```py\nclass MyProcess(multiprocessing.Process):\n\n    def run(self):\n        print ('called run method by %s' %self.name)\n        return\n```", "```py\nif __name__ == '__main__':\n    for i in range(10):\n        process = MyProcess()\n        process.start()\n        process.join()\n```", "```py\nclass MyProcess (multiprocessing.Process):\n    def run(self):\n        print ('called run method in process: %s' %self.name)\n        return\n```", "```py\np = MyProcess()\np.start()\n```", "```py\n> python process_in_subclass.py\n```", "```py\ncalled run method by MyProcess-1\ncalled run method by MyProcess-2\ncalled run method by MyProcess-3\ncalled run method by MyProcess-4\ncalled run method by MyProcess-5\ncalled run method by MyProcess-6\ncalled run method by MyProcess-7\ncalled run method by MyProcess-8\ncalled run method by MyProcess-9\ncalled run method by MyProcess-10\n```", "```py\nimport multiprocessing\nimport random\nimport time\n```", "```py\nclass producer(multiprocessing.Process):\n    def __init__(self, queue):\n        multiprocessing.Process.__init__(self)\n        self.queue = queue\n\n    def run(self) :\n        for i in range(10):\n            item = random.randint(0, 256)\n            self.queue.put(item) \n            print (\"Process Producer : item %d appended \\\n                   to queue %s\"\\\n                   % (item,self.name))\n            time.sleep(1)\n            print (\"The size of queue is %s\"\\\n                   % self.queue.qsize())\n```", "```py\nclass consumer(multiprocessing.Process):\n    def __init__(self, queue):\n        multiprocessing.Process.__init__(self)\n        self.queue = queue\n\n    def run(self):\n        while True:\n            if (self.queue.empty()):\n                print(\"the queue is empty\")\n                break\n            else :\n                time.sleep(2)\n                item = self.queue.get()\n                print ('Process Consumer : item %d popped \\\n                        from by %s \\n'\\\n                       % (item, self.name))\n                time.sleep(1)\n```", "```py\nif __name__ == '__main__':\n        queue = multiprocessing.Queue()\n        process_producer = producer(queue)\n        process_consumer = consumer(queue)\n        process_producer.start()\n        process_consumer.start()\n        process_producer.join()\n        process_consumer.join()\n```", "```py\n        queue = multiprocessing.Queue()\n        process_producer = producer(queue)\n        process_consumer = consumer(queue)\n```", "```py\nself.queue.put(item) \n```", "```py\nself.queue.get()\n```", "```py\n> python communicating_with_queue.py\n```", "```py\nProcess Producer : item 79 appended to queue producer-1\nThe size of queue is 1\nProcess Producer : item 50 appended to queue producer-1\nThe size of queue is 2\nProcess Consumer : item 79 popped from by consumer-2\nProcess Producer : item 33 appended to queue producer-1\nThe size of queue is 2\nProcess Producer : item 57 appended to queue producer-1\nThe size of queue is 3\nProcess Producer : item 227 appended to queue producer-1\nProcess Consumer : item 50 popped from by consumer-2\nThe size of queue is 3\nProcess Producer : item 98 appended to queue producer-1\nThe size of queue is 4\nProcess Producer : item 64 appended to queue producer-1\nThe size of queue is 5\nProcess Producer : item 182 appended to queue producer-1\nProcess Consumer : item 33 popped from by consumer-2\nThe size of queue is 5\nProcess Producer : item 206 appended to queue producer-1\nThe size of queue is 6\nProcess Producer : item 214 appended to queue producer-1\nThe size of queue is 7\nProcess Consumer : item 57 popped from by consumer-2\nProcess Consumer : item 227 popped from by consumer-2\nProcess Consumer : item 98 popped from by consumer-2\nProcess Consumer : item 64 popped from by consumer-2\nProcess Consumer : item 182 popped from by consumer-2\nProcess Consumer : item 206 popped from by consumer-2\nProcess Consumer : item 214 popped from by consumer-2\nthe queue is empty\n```", "```py\nimport multiprocessing\n```", "```py\ndef create_items(pipe):\n    output_pipe, _ = pipe\n    for item in range(10):\n        output_pipe.send(item)\n    output_pipe.close()\n```", "```py\n def multiply_items(pipe_1, pipe_2):\n    close, input_pipe = pipe_1\n    close.close()\n    output_pipe, _ = pipe_2\n    try:\n        while True:\n            item = input_pipe.recv()\n```", "```py\n           output_pipe.send(item * item)\n except EOFError:\n        output_pipe.close()\n```", "```py\nif __name__== '__main__':\n```", "```py\n    pipe_1 = multiprocessing.Pipe(True)\n    process_pipe_1 = \\\n                   multiprocessing.Process\\\n                   (target=create_items, args=(pipe_1,))\n    process_pipe_1.start()\n```", "```py\n    pipe_2 = multiprocessing.Pipe(True)\n    process_pipe_2 = \\\n                   multiprocessing.Process\\\n                   (target=multiply_items, args=(pipe_1, pipe_2,))\n    process_pipe_2.start()\n```", "```py\n    pipe_1[0].close()\n    pipe_2[0].close()\n```", "```py\n    try:\n        while True:\n            print (pipe_2[1].recv())\n    except EOFError:\n        print(\"End\")\n```", "```py\npipe_1 = multiprocessing.Pipe(True)\npipe_2 = multiprocessing.Pipe(True)\n```", "```py\nprocess_pipe_2 = \\\n                   multiprocessing.Process\\\n                   (target=multiply_items, args=(pipe_1, pipe_2,))\n```", "```py\npipe_1[0].close()\npipe_2[0].close()\n```", "```py\nprint (pipe_2[1].recv())\n```", "```py\n> python communicating_with_pipe.py\n```", "```py\n0\n1\n4\n9\n16\n25\n36\n49\n64\n81\n```", "```py\nimport multiprocessing\nfrom multiprocessing import Barrier, Lock, Process\nfrom time import time\nfrom datetime import datetime\n```", "```py\ndef test_with_barrier(synchronizer, serializer):\n    name = multiprocessing.current_process().name\n    synchronizer.wait()\n    now = time()\n```", "```py\nwith serializer:\n    print(\"process %s ----> %s\" \\\n        %(name,datetime.fromtimestamp(now)))\n\ndef test_without_barrier():\n    name = multiprocessing.current_process().name\n    now = time()\n    print(\"process %s ----> %s\" \\\n        %(name ,datetime.fromtimestamp(now)))\n```", "```py\nif __name__ == '__main__':\n    synchronizer = Barrier(2)\n    serializer = Lock()\n    Process(name='p1 - test_with_barrier'\\\n            ,target=test_with_barrier,\\\n            args=(synchronizer,serializer)).start()\n    Process(name='p2 - test_with_barrier'\\\n            ,target=test_with_barrier,\\\n            args=(synchronizer,serializer)).start()\n    Process(name='p3 - test_without_barrier'\\\n            ,target=test_without_barrier).start()\n    Process(name='p4 - test_without_barrier'\\\n            ,target=test_without_barrier).start()\n```", "```py\nsynchronizer = Barrier(2)\n```", "```py\nProcess(name='p1 - test_with_barrier'\\\n            ,target=test_with_barrier,\\\n            args=(synchronizer,serializer)).start()\nProcess(name='p2 - test_with_barrier'\\\n            ,target=test_with_barrier,\\\n            args=(synchronizer,serializer)).start()\n```", "```py\nsynchronizer.wait()\n```", "```py\n> python processes_barrier.py\nprocess p4 - test_without_barrier ----> 2019-03-03 08:58:06.159882\nprocess p3 - test_without_barrier ----> 2019-03-03 08:58:06.144257\nprocess p1 - test_with_barrier ----> 2019-03-03 08:58:06.175505\nprocess p2 - test_with_barrier ----> 2019-03-03 08:58:06.175505\n```", "```py\nimport multiprocessing\n```", "```py\ndef function_square(data):\n    result = data*data\n    return result\n\nif __name__ == '__main__':\n```", "```py\n    inputs = list(range(0,100))\n```", "```py\n    pool = multiprocessing.Pool(processes=4)\n```", "```py\n    pool_outputs = pool.map(function_square, inputs)\n    pool.close() \n    pool.join() \n```", "```py\n    print ('Pool    :', pool_outputs)\n```", "```py\n  pool = multiprocessing.Pool(processes=4)\n```", "```py\n   pool_outputs = pool.map(function_square, inputs)\n```", "```py\n    pool.close() \n    pool.join() \n```", "```py\n> python process_pool.py\n```", "```py\nPool : [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484, 529, 576, 625, 676, 729, 784, 841, 900, 961, 1024, 1089, 1156, 1225, 1296, 1369, 1444, 1521, 1600, 1681, 1764, 1849, 1936, 2025, 2116, 2209, 2304, 2401, 2500, 2601, 2704, 2809, 2916, 3025, 3136, 3249, 3364, 3481, 3600, 3721, 3844, 3969, 4096, 4225, 4356, 4489, 4624, 4761, 4900, 5041, 5184, 5329, 5476, 5625, 5776, 5929, 6084, 6241, 6400, 6561, 6724, 6889, 7056, 7225, 7396, 7569, 7744, 7921, 8100, 8281, 8464, 8649, 8836, 9025, 9216, 9409, 9604, 9801]\n```", "```py\nfrom multiprocessing import Pool\n\ndef f(x):\n    return x+10\n\nif __name__ == '__main__':\n     p=Pool(processes=5)\n     print(p.map(f, [1, 2, 3,5,6,7,8,9,10]))\n```", "```py\n11 12 13 14 15 16 17 18 19 20\n```"]