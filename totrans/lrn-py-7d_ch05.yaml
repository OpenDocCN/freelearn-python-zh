- en: Dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, you have learned about strings, tuples, and lists. In this chapter,
    we have another useful built-in data type in Python is called **dictionary**.
    In a list, values are indexed by the range of numbers, but in a dictionary, values
    are indexed by keys.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Python, a dictionary is a sequence of key-value, or item, pairs separated
    by commas.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `port` variable refers to a dictionary that contains port numbers as keys
    and its protocol names as values.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax of a dictionary is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The key-value pair is called an **item**. The key and value are separated by
    a colon (`:`), and each item is separated by a comma (`,`). The items are enclosed
    by curly braces (`{ }`). An empty dictionary can be created just by using curly
    braces (`{ }`). Key features of the dictionary are:'
  prefs: []
  type: TYPE_NORMAL
- en: The key of the dictionary can not be changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A string, int, or float can be used as a key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tuple that does not contain any list can be used as a key
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keys are unique
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values can be anything, for example, list, string, int, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values can be repeated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Values can be changed
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dictionary is an unordered collection, which means that the order in which
    you have entered the items in a dictionary may not be retained and you may get
    the items in a different order
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations on the dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you know, a dictionary is mutable; you can add new values, and delete and
    update old values. In this section, you will learn accessing, deletion, updation,
    and addition operations.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing the values of dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to access the dictionary''s values you will need the key. Consider
    a dictionary of networking ports: In order to access the dictionary''s values
    you will need the key. Consider a dictionary of networking ports:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s learn by example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In order to access the dictionary's value, use the square brackets along with
    the key. What happens if the key is not in the dictionary?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the key is not found, then the interpreter shows the preceding error.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting an item from the dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using the `del` keyword, you can delete the entire dictionary or the dictionary''s
    items. If you want to delete the dictionary''s items, use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Considering the following code snippet for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to delete the entire dictionary, then use the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The preceding error shows that the `port` dictionary has been deleted.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the values of the dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Updating the dictionary is pretty simple; just specify the key in the square
    bracket along with the dictionary name. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding dictionary, the value of port `23` is `"SMTP"`, but in reality,
    port number `23` is for telnet protocol. Let''s update the preceding dictionary
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Adding an item to the dictionary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding an item to the dictionary is very simple; just specify a new key in
    the square brackets along with the dictionary. The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we added the `"POP"` protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will explore the built-in functions available in Python,
    which can be applied to dictionary. You may have seen most of the functions in
    the previous chapters of  list and tuple. In this section, you will see how to
    apply those functions to a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: len()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to find the number of items that are present in a dictionary, you
    can use the `len()` function. See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: str()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider a situation where you want to convert a dictionary into a string; here
    you can use the `str()` function. The syntax of the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You can easily see the double quotes around the dictionary. Let's get the `max`
    key from the dictionary, using the `max()` function.
  prefs: []
  type: TYPE_NORMAL
- en: max()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you pass a dictionary to the `max()` function, then it returns the key with
    the maximum worth. The syntax of the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: So, the `max` function gives the tuple the maximum worth. Similarly, to get
    the minimum key, you can use the `min()` function.
  prefs: []
  type: TYPE_NORMAL
- en: min()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `min()` function is just opposite to the `max()` function. It returns the
    dictionary''s key with the lowest worth. The syntax of the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s convert the list or tuple into a dictionary. In order to convert the
    list or tuple into a dictionary, the format should be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, it can be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We need pairs of two values. By using the `dict` function, we can convert the
    preceding list into a dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: dict()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can pass a tuple or list to the `dict()` function, but that tuple or list
    contain elements as pairs of two values, as shown in the next example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see the conversion by example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'In operator on Python dictionary The in operator can be used to find the existence
    of a key in the dictionary. Consider the example program `inkey.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'See the following screenshot for the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/inkey.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Output of in program
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, you can use the `not in` operator. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code snippet, nothing gets printed.
  prefs: []
  type: TYPE_NORMAL
- en: Dictionary methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss the dictionary methods one by one. Consider
    that you want to create a copy of an existing dictionary; you can use the `copy()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: copy()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of the `copy()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that `Avengers2` is an exact copy of `Avengers`. Do not confuse
    `copy()` with the assignment operator. Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Variable `A1` and `A2` hold the same dictionary, but the `CW` variable hold
    different dictionary. You can check the memory address of `A1`, `A2`, and `CW`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'We can do one more thing. Let''s add one more member to the `A1` dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'We have changed the `A1` dictionary and the changes would also be reflected
    by `A2` since both hold the same memory address, whereas `CW` holds a different
    dictionary. Consider that you have a dictionary and you want to access a `key`,
    which does not exist in the dictionary. The interpreter shows `KeyError` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you can clearly see the error. If this happens in running
    code, your code will not get fully executed. In order to deal with this situation,
    we will use the `get()` method.
  prefs: []
  type: TYPE_NORMAL
- en: get()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of the `get()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'The `get()` method is used to get the value of a given `key` from the dictionary.
    If `key` is not found, then the default value or message will return. See the
    following example, where `key` is present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, since the key is found, the custom message, `not
    found`, does not get printed. Let''s see another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: If the custom message is not set, then nothing will be returned. There is another
    method, `setdefault()`, which is very much similar to the `get()` method with
    a little different functionality. Let's discuss the method with examples.
  prefs: []
  type: TYPE_NORMAL
- en: setdefault()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of `setdefault()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '`key1` -- This is `key` to be searched.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Default `--` if `key1` is not found, then the message will be returned and
    added to the dictionary. Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'If the message has been not been set, then it returns and adds a default value, `None`.
    See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: To avoid `KeyError`, we can use the `get()` method, but we can add one more
    check to avoid `KeyError`. The `has_key()` method facilitates you to check whether
    the given key exists or not.
  prefs: []
  type: TYPE_NORMAL
- en: has_key()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for `has_key()` is given as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '`key`--this is the key to be searched in the dictionary, `dict`. The `has_key()`
    method returns `True` or `False`, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Consider a situation where you want to do some operation on a dictionary's keys
    and want to get all the keys in different lists. In this situation, you can use
    the `keys()` method.
  prefs: []
  type: TYPE_NORMAL
- en: keys()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of `keys()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding dictionary, we want the superhero''s characters, that is, all
    the keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method returns a list of all the keys.
  prefs: []
  type: TYPE_NORMAL
- en: Similarly, if we want all the values in a separate list, we can use the `values()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: values()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of `values()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding dictionary, we want to get all the real names of our heroes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Dictionary to another dictionary. Consider the following example: Sometimes,
    we need to add one dictionary to another dictionary. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'We have another dictionary of ports, that is, `port2` as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: In order to update `port1` with `port2`, we can take advantage of the `update()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: update()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax is given as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '`dict2`--this is the dictionary to be added.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Be careful to use the preceding method because if `dict` and `dict2` dictionaries
    contain the same key, then the `dict` dictionary's keys would be replaced by the
    keys of the `dict1` dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: items()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of the `items()` method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The `items()` method returns the list of dictionary''s `(key, value)` tuple
    pairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, we need to delete all the items of a dictionary. This can be done
    by using the `clear()` method.
  prefs: []
  type: TYPE_NORMAL
- en: clear()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax of `clear()` is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: Python dictionary with for loop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to use the `for` loop with a dictionary.
    If you have not read about the `for` loop so far, you can skip this section and
    get back after learning about the `for` loop, covered in [Chapter 6](lrn-py-7d_ch06.html),
    *Control Statements and Loops*. Let''s apply the `for` loop to a dictionary. See
    the following program named `forloopkey.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/forlookeys.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Output of program forloopkey.py
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding program prints only the keys of the dictionary. If you want to
    print the key as well as the value, then you can use the `items()` method. See
    the following program named `forloopitems.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the output of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/forloopvalue.jpg)Output of program forloopitems.py'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding program seems difficult to understand at first. Let''s break
    the program into two parts. The `port1.items()` method returns a list of tuple
    pairs, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The `for` loop sends each tuple to the variables, `k` and `v`. See the one
    iteration of `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you have learned how to iterate through a dictionary. Consider a dictionary
    of millions of items, and you want to iterate through the dictionary. The `items
    ()` method returns a list of key-value pairs. The newly created list will also
    take a lot of memory. A Python dictionary has a very beautiful memory-saving method
    called `iteritems()`. Let''s understand it by the following example code named `forloopiter.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'See the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/forloopiter.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Output of forloopiter.py program
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code does not create a list. Let''s understand by Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code returns a dictionary object, not a huge list. We will not
    delve into the details of the object. You can replace `key()` by `iterkeys()`
    and `values()` by `itervalues()`. When to use `iteritems()` and `items()` ? If
    we need the corresponding list and have to do some operations on the list, such
    as slicing and indexing, then the `items()` method will be the most suitable.
    But if our need is just to iterate through the dictionary, then `iteritems()`
    will be the most suitable.
  prefs: []
  type: TYPE_NORMAL
- en: Practical program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s make some program  to understand the dictionary. Make a dictionary from
    two lists. Both the lists are of equal length. Take the lists as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The `list1` values act as the keys of the dictionary and the `list2` values
    act as the values. The following is the program for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/dictexcercise1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Output of exercise 1
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do the preceding exercise in one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'Just a one-liner code can make a dictionary from two lists. So, in the preceding example,
    we used the `zip()` function; `zip()` is a built-in function, which takes two
    lists and returns a list of two tuples, such as ` [(key, value)]`. Let''s see
    an example of the `zip()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Find the number of ways to find whether a key exists in a dictionary or not.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Use the dictionary, `port1 = {21: "FTP", 22:"SSH", 23: "telnet", 80: "http"}`,
    and make a new dictionary in which keys become values and values become keys,
    as shown: `Port2 = {“FTP":21, "SSH":22, “telnet":23, "http": 80}`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about dictionaries, how to create an empty dictionary,
    adding items to the dictionary, and accessing and deleting values from a dictionary.
    In order to find the number of items in a dictionary, we used the `len()` function.
    There are other useful functions, such as `max()` and `min()` to find the maximum
    and minimum values in a dictionary, respectively. In dictionary methods you learned
    different methods, such as `copy()`, `keys()`, and `items()`. By using `items()`,
    we can iterate through a dictionary. In the end, you learned two memory-saving
    methods: `iteritems()` and `iterkeys()`.
  prefs: []
  type: TYPE_NORMAL
