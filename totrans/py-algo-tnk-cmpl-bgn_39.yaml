- en: Chapter 27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More about Flowcharts with Loop Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 27.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By working through the previous chapters, you have become familiar with all
    the loop control structures. Since flowcharts are an ideal way to learn “Algorithmic
    Thinking” and to help you better understand specific control structures, this
    chapter will teach you how to convert a Python program to a flowchart as well
    as how to convert a flowchart to a Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 27.2 Converting Python Programs to Flowcharts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To convert a Python program to a flowchart, you need to recall all loop control
    structures and their corresponding flowcharts. Following you will find them all
    summarized.
  prefs: []
  type: TYPE_NORMAL
- en: The Pre-Test Loop Structure
  prefs: []
  type: TYPE_NORMAL
- en: 'while Boolean_Expression:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The Post-Test Loop Structure
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression: break'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-04.png)'
  prefs: []
  type: TYPE_IMG
- en: The Mid-Test Loop Structure
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression: break'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-07.png)'
  prefs: []
  type: TYPE_IMG
- en: The For-Loop
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sequence:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter25-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you will find many exercises that can clarify things that you might still
    need help understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 27.2-1 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: i = 50
  prefs: []
  type: TYPE_NORMAL
- en: 'while i > 10:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i % 2 == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i -= 5
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This Python program contains a pre-test loop structure which nests a single-alternative
    decision structure. The corresponding flowchart that follows includes what you
    have been taught so far.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 27.2-2 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: i = 30
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i % 8 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i, "is a multiple of 8")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if i % 4 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i, "is a multiple of 4")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if i % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i, "is a multiple of 2")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i -= 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if i <= 0: break'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This code fragment contains a post-test loop structure that nests three single-alternative
    decision structures. The corresponding flowchart fragment is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 27.2-3 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'for hour in range(1, 25):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hour is", hour, ":00.")
  prefs: []
  type: TYPE_NORMAL
- en: 'if hour >= 4 and hour < 12:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Good Morning")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif hour >= 12 and hour < 20:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Good Afternoon")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif hour >= 20 and hour < 24:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Good Evening")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Good Night")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This Python program contains a for-loop that nests a multiple-alternative decision
    structure. The corresponding flowchart is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-03.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 27.2-4 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 11, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif a == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(9, -1, -2):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("nothing to do!")
  prefs: []
  type: TYPE_NORMAL
- en: print("The End!")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This Python program contains a multiple-alternative decision structure that
    nests two for-loops. The corresponding flowchart is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 27.2-5 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: m = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(n):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(m):'
  prefs: []
  type: TYPE_NORMAL
- en: total += i * j + j
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This Python program contains nested loop control structures; a for-loop nested
    within another for-loop. The corresponding flowchart is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-05.png)'
  prefs: []
  type: TYPE_IMG
- en: 27.3 Converting Flowcharts to Python Programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This conversion is not always an easy one. There are cases in which the flowchart
    designers follow no particular rules, so the initial flowchart may need some modifications
    before it can be converted into a Python program. The following is an example
    of one such case.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter26-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the loop control structures included in this flowchart fragment
    match none of the structures that you have already learned, such the pre-test,
    the post-test, the mid-test, or even the for-loop control structure. Thus, you
    have only one choice and this is to modify the flowchart by adding extra statements
    or removing existing ones until known loop control structures start to appear.
    Below are some exercises, and in some of them, the initial flowchart does need
    modification.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 27.3-1 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart fragment.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter27-06.png)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This is an easy one. The only obstacle you have to overcome is that the true
    and false paths are not quite in the right position. You need the true and not
    the false path to actually iterate. As you already know, it is possible to switch
    the two paths but you need to negate the Boolean expression as well. Thus, the
    corresponding code fragment becomes
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 90:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i = i + 2
  prefs: []
  type: TYPE_NORMAL
- en: print("The End")
  prefs: []
  type: TYPE_NORMAL
- en: Using a for-loop, this code fragment can equivalently be written as
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(0, 92, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: print("The End")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 27.3-2 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-07.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This flowchart contains a post-test loop structure that nests a dual-alternative
    decision structure. The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: if i < 45:     [[More…]](more.html#more_27_3_2_1)
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(-i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i >= 90: break'
  prefs: []
  type: TYPE_NORMAL
- en: print("The End")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 27.3-3 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-08.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Oops! What a mess! There are so many diamonds here! Be careful, though, as not
    all of them are decision control structures. In fact, two of them are loop control
    structures, and only one represents a decision control structure! Can you spot
    the latter?
  prefs: []
  type: TYPE_NORMAL
- en: You should be quite familiar with loop control structures so far. As you already
    know, in loop control structures, one of the diamond's (rhombus's) exits always
    has an upward direction. Thus, the following flowchart fragment, extracted from
    the initial one, is obviously the decision control structure that you are looking
    for.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter27-09.png)
  prefs: []
  type: TYPE_NORMAL
- en: And of course, it's a dual-alternative decision structure!
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's identify the rest of the structures. Right before the dual-alternative
    decision structure, there is a post-test loop structure. Its flowchart fragment
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter27-10.png)
  prefs: []
  type: TYPE_NORMAL
- en: And finally, both the dual-alternative decision structure and the post-test
    loop structure, mentioned before, are nested within the next flowchart fragment,
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter27-11.png)
  prefs: []
  type: TYPE_NORMAL
- en: which happens to be a pre-test loop structure. The corresponding Python program
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 99:'
  prefs: []
  type: TYPE_NORMAL
- en: while True:           [[More…]](more.html#more_27_3_3_1)
  prefs: []
  type: TYPE_NORMAL
- en: n = float(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if n >= 0: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: if n < 100:        [[More…]](more.html#more_27_3_3_2)
  prefs: []
  type: TYPE_NORMAL
- en: s = s + n ** 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + n ** 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: Or, you can even write it using a for-loop, as shown in the code that follows.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(100):'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: n = float(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if n >= 0: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if n < 100:'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + n ** 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + n ** 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: Wasn't so difficult after all, was it?
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 27.3-4 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-12.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This is a mid-test loop structure. Since there is no direct Python statement
    for this structure, you can use the break statement—or you can even convert the
    flowchart to something more familiar as shown in the next two approaches
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Using the break statement
  prefs: []
  type: TYPE_NORMAL
- en: The main idea is to create an endless loop (while True) and break out of it
    when the Boolean expression that exists between the two statements or blocks of
    statements evaluates to True (see [Section 24.3](chapter24.html#toc_17)).
  prefs: []
  type: TYPE_NORMAL
- en: According to this approach, the initial flowchart can be written in Python as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: S = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())     [[More…]](more.html#more_27_3_4_1)
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i >= 90: break'
  prefs: []
  type: TYPE_NORMAL
- en: S = S + a * i     [[More…]](more.html#more_27_3_4_2)
  prefs: []
  type: TYPE_NORMAL
- en: print(S)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Keep in mind that even though the break statement can sometimes
    be useful, it may also lead you to write code that is difficult to read and understand,
    especially when you make extensive use of it. So, please use it cautiously and
    sparingly!'
  prefs: []
  type: TYPE_NORMAL
- en: Second approach – Converting the flowchart
  prefs: []
  type: TYPE_NORMAL
- en: The mid-test loop structure and its equivalent, using a pre-test loop structure,
    are as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-13.png)'
  prefs: []
  type: TYPE_IMG
- en: Accordingly, the initial flowchart becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-14.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, it's easy to write the corresponding Python program.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: S = 0
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())     [[More…]](more.html#more_27_3_4_3)
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 90:'
  prefs: []
  type: TYPE_NORMAL
- en: S = S + a * i     [[More…]](more.html#more_27_3_4_4)
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())     [[More…]](more.html#more_27_3_4_5)
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(S)
  prefs: []
  type: TYPE_NORMAL
- en: 27.4 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: i = 35
  prefs: []
  type: TYPE_NORMAL
- en: 'while i > -35:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(2 * i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(3 * i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 2)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: i = -20
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Zero")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(2 * i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(3 * i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i > 20: break'
  prefs: []
  type: TYPE_NORMAL
- en: 3)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= a:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Non-Positive Entered!")
  prefs: []
  type: TYPE_NORMAL
- en: 4)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= a:'
  prefs: []
  type: TYPE_NORMAL
- en: print(3 * i + i / 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(2 * i - i / 3)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i -= 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if i < a: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 5)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(a + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(3 * i + i / 2)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif a == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'while b > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(2 * a + b)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'while b < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(a, b + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 6)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: c = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: d = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(a, b):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(c, d + 1, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: total += i + j
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: 7)Design the flowchart that corresponds to the following code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(100):'
  prefs: []
  type: TYPE_NORMAL
- en: n = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'while n < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: n = float(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: s += sqrt(n)
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 8)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 51):'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if n >= 0: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: s += sqrt(n)
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 9)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a >= 0: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if b >= 0: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(abs(a - b))
  prefs: []
  type: TYPE_NORMAL
- en: 'if abs(a − b) <= 100: break'
  prefs: []
  type: TYPE_NORMAL
- en: 10)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: b = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a >= 0 and b >= 0: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a > b:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a - b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a * b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if abs(a − b) <= 100: break'
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter27-15.png)
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-16.png)'
  prefs: []
  type: TYPE_IMG
- en: 13)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter27-17.png)'
  prefs: []
  type: TYPE_IMG
