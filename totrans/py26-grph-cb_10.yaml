- en: 'Chapter 10. GUI Construction: Part 1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第10章。GUI构建：第1部分
- en: 'In this chapter, we will cover:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: Widget configuration
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件配置
- en: Button focus
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮焦点
- en: The simplest push button with validation
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有验证的最简单推按钮
- en: The data entry box
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据输入框
- en: Colored button causing message pop-ups
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引起消息弹出的彩色按钮
- en: Complex interaction between buttons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮之间的复杂交互
- en: Images on buttons and widget packing geometry
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮和组件布局中的图像
- en: The grid geometry manager and button arrays
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网格几何管理器和按钮数组
- en: Drop-down menus to select from a list
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从列表中选择的下拉菜单
- en: Listbox
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表框
- en: Text in a window
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口中的文本
- en: Introduction
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we provide recipes for the components that are used to create
    user interfaces of the graphical kind. These are known as **GUI** or **Graphic
    User Interface**. The commonly-used term for GUI components is **Widget**. The
    word Widget has no particular meaning other than "general sort of gadget". If
    you used the example from [Chapter 4](ch04.html "Chapter 4. Animation Principles"),
    *Animation Principles* on a color-mixing palette, then you would have used the
    slider or scale widget which will be explained in this chapter. We will also demonstrate
    that it is not too difficult to create our own widgets.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了用于创建图形用户界面的组件的配方。这些被称为**GUI**或**图形用户界面**。GUI组件的常用术语是**小部件**。Widget这个词没有特定的含义，除了“一般类型的装置”。如果你使用了[第4章](ch04.html
    "第4章。动画原理")中的示例，在颜色混合调色板上的*动画原理*，那么你就使用了在本章中将要解释的滑块或刻度小部件。我们还将演示创建我们自己的小部件并不太难。
- en: Widget configuration a label
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件配置：标签
- en: We see here how to change the properties (attributes) of most widgets using
    its `configuration()` method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里看到如何使用其`configuration()`方法更改大多数小部件的属性（属性）。
- en: How to do it...
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Execute the program shown in the usual way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式执行显示的程序。
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'All widgets have default values such as a gray background, and 12 point font
    size. Once the code for the creation of a widget has been executed the widget
    appears on the screen with all its assigned properties. Further down the code,
    as the program is being executed, the properties of the widget can be changed
    using the `widget.config(attribute=new value)` method. The result is shown in
    the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所有小部件都有默认值，例如灰色背景和12点字体大小。一旦执行了创建小部件的代码，小部件就会带有所有分配的属性出现在屏幕上。在代码的下方，当程序正在执行时，可以使用`widget.config(attribute=new
    value)`方法更改小部件的属性。结果如下所示截图：
- en: '![How it works...](img/3845_10_1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3845_10_1.jpg)'
- en: There's more...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Choice is good because it allows us to make our GUIs look good. The downside
    of this choice is that it allows us to make poor choices. But as the adage goes:
    poor choices made with intelligence lead to good choices.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 选择是好的，因为它允许我们的GUI看起来很好。这种选择的缺点是它允许我们做出糟糕的选择。但正如谚语所说：用智慧做出的糟糕选择会导向好的选择。
- en: If we run this program we will see that the combination of colors made is about
    the worst that can be made they interfere with the eye's focusing mechanics because
    the two colors have different wavelengths and follow slightly different paths
    on their way to the retina.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个程序，我们会看到所组合的颜色几乎是最糟糕的组合，因为这两种颜色具有不同的波长，并且在到达视网膜的过程中略微遵循不同的路径。
- en: Button focus
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮焦点
- en: Here we demonstrate the concept of focus, which is easier to show than describe.
    When there are a group of widgets inside a window, only one widget can react to
    an event like the click of the mouse button. In this example, the button underneath
    the mouse cursor has focus and therefore is the one that will respond to a click
    of the mouse. As the cursor moves over another button, then *that button has focus*.
    In this example, the button that has focus changes its color, on a Linux-operating
    system. On MS Windows, the buttons do not change color but the mouse cursor changes.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们演示了焦点概念，这比描述更容易展示。当窗口内有一组小部件时，只有一个小部件可以响应像鼠标按钮点击这样的事件。在这个例子中，鼠标光标下的按钮具有焦点，因此它是响应鼠标点击的那个按钮。当光标移到另一个按钮上时，*那个按钮就具有焦点*。在这个例子中，具有焦点的按钮在Linux操作系统中会改变颜色。在MS
    Windows中，按钮不会改变颜色，但鼠标光标会改变。
- en: How to do it...
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Execute the program shown in the usual way.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式执行显示的程序。
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When we run the preceding code under Linux, we will see that the color of each
    button change as it acquires focus. The button that has focus is the only one
    of the group that will react to a left mouse click. Under MS Windows 7, this change
    of color with focus does not work. Nevertheless, the logic of focus behavior and
    reaction to mouse events is unaffected.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 Linux 下运行前面的代码时，我们会看到每个按钮的颜色随着它获得焦点而改变。获得焦点的按钮是这一组中唯一会响应左键点击的按钮。在 Windows
    7 下，这种带焦点的颜色变化不起作用。尽管如此，焦点行为和鼠标事件反应的逻辑并未受到影响。
- en: We have also taken the opportunity to look at the different button border styles
    available.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还趁机查看可用的不同按钮边框样式。
- en: '![How it works...](img/3845_10_2.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/3845_10_2.jpg)'
- en: There's more...
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One thing to note in this example is that the size of a button is determined
    by the font size and amount of text placed on the button.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中需要注意的一点是，按钮的大小由字体大小和放置在按钮上的文本量决定。
- en: The simplest push button with validation
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带验证的最简单的按钮
- en: We now home in on the simplest example of event processing by means of a `callback()`
    function.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在聚焦于通过 `callback()` 函数进行事件处理的最简单示例。
- en: The validation referred to previously is any kind of reaction that provides
    confirmation that our code did what we wanted it to do. When you are developing
    code experimentally you need some kind of validation at the earliest stage in
    order build up insight.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的验证是指任何提供确认我们代码做了我们想要它做的事情的反应。当你以实验性方式开发代码时，你需要在最早阶段就进行某种验证，以便建立洞察力。
- en: How to do it...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Copy, save and execute. The result is shown as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 复制、保存并执行。结果如下所示：
- en: '![How to do it...](img/3845_10_3.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![如何做到这一点...](img/3845_10_3.jpg)'
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: When you push the little button with your mouse pointer, a message will appear
    on your terminal. The appearance of the message is the vital validation action
    your program produces.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你用鼠标指针点击小按钮时，你的终端上会出现一条消息。消息的出现是程序产生的关键验证操作。
- en: 'This simple example demonstrates the fundamental design of all programs that
    react to user input. Then all you have to do is the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简单的例子展示了所有响应用户输入的程序的基本设计。然后你只需要做以下事情：
- en: Wait for some external event such as the click of a mouse or the tap of a key
    on the keyboard.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待某些外部事件，例如鼠标点击或键盘上的按键。
- en: If and when the external event occurs, we must have an `event handler` function
    inside our program that specifies what actions must occur. These are often referred
    to as `callback` functions.
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果外部事件发生，我们必须在我们的程序中有一个 `事件处理程序` 函数，该函数指定必须执行的操作。这些通常被称为 `callback` 函数。
- en: Inside the code, that makes an instance of any widget designed to accept user
    input, there must always be an option-specifier like `command=callback_1` that
    points to the name of your event-processing function named `callback_1` that will
    do all the things we want it to do when the event occurs. We do not have to use
    the actual word `callback_1` - we could have chosen any word we liked. In this
    case, the event is the push of a button. All we ask it to do inside the `callback()`
    function is to print a message. However, the list of resulting actions initiated
    by our `callback()` function can be as long as we like.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在代码内部，创建任何设计用于接受用户输入的小部件的实例时，必须始终有一个选项指定符，如 `command=callback_1`，它指向名为 `callback_1`
    的事件处理函数，该函数将在事件发生时执行我们希望它执行的所有操作。我们不必使用实际的单词 `callback_1` - 我们可以选择任何我们喜欢的单词。在这种情况下，事件是按钮的点击。我们要求它在
    `callback()` 函数内部做的所有事情只是打印一条消息。然而，由我们的 `callback()` 函数引发的行动列表可以像我们喜欢的那样长。
- en: There's more...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Programming literature often uses the word instantiation, especially with reference
    to objects in the object-oriented programming context. The word instantiation
    means to transform some object, which previously only existed as a semi-abstract
    description, into an actual block of code with a real namespace for its variables
    that interact with the data and commands inside your program. Python with Tkinter
    has a pre-defined object called a button. In our preceding program, we instantiate
    a button named `button_1` into existence by the command:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 编程文献经常使用“实例化”这个词，尤其是在面向对象编程的上下文中提及对象时。这个词的意思是将某个对象从之前仅存在的半抽象描述转变为一个实际的代码块，该代码块具有一个真实的命名空间，其变量与程序内部的数据和命令进行交互。Python
    与 Tkinter 有一个预定义的对象，称为按钮。在我们的上一个程序中，我们通过以下命令将一个名为 `button_1` 的按钮实例化出来：
- en: '`button_1= Button(root, command=callback_1).grid(row=1, column=0)`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`button_1= Button(root, command=callback_1).grid(row=1, column=0)`'
- en: The description to the right of the equals sign is the pre-existing abstract
    description taken from a long list of objects inside the Tkinter library. The
    name `button_1` on the left is the name of the instance that will have all of
    the actual properties that were previously just words in a library. This is like
    having a file with engineering drawings and assembly instructions for a sports
    car (the abstract description) and then getting some engineering workshop to actually
    manufacture an instance of the gleaming steel and chrome speedster. The file with
    drawings and manufacturing instructions is the equivalent of the object definition
    in our Python code. The thing with a metallic blue paint job, which you will sit
    in and drive with the wind in your hair, is an instance of the object.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 等号右侧的描述是从Tkinter库内部的长列表对象中提取的现有抽象描述。左侧的`button_1`名称是实例的名称，该实例将具有所有之前只是库中文字的实际属性。这就像有一个带有工程图纸和赛车组装说明的文件（抽象描述），然后让某个工程车间实际制造一个闪亮的钢制和铬制跑车实例。带有金属蓝色漆面的东西，你将坐在里面，随风驾驶，是对象的实例。这个带有图纸和制造说明的文件相当于我们Python代码中的对象定义。那个金属蓝色的东西，你将坐在里面，随风驾驶，是对象的实例。
- en: Buttons behave differently on Windows
  id: totrans-54
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 按钮在Windows上的行为不同
- en: The button in this recipe behaves slightly differently in MS Windows compared
    to Linux. Windows displays the normal minimize, maximize, close symbols on the
    top right of the frame containing the button. We close the application by clicking
    on the top right "X" symbol. In Linux, there is a round button in the top of the
    frame. When we click this button, a menu opens up with a close command that can
    end the program.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，按钮在MS Windows中的行为与Linux略有不同。Windows在包含按钮的框架右上角显示正常的最小化、最大化、关闭符号。我们通过点击右上角的“X”符号来关闭应用程序。在Linux中，框架顶部有一个圆形按钮。当我们点击这个按钮时，会弹出一个菜单，其中包含一个关闭命令，可以结束程序。
- en: A data entry box
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据输入框
- en: We make a GUI that provides a data entry box and a button for handling whatever
    text is typed into the box.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建一个GUI，它提供了一个数据输入框和一个按钮来处理输入框中输入的任何文本。
- en: The **Entry** widget is a standard Tkinter widget used to enter or display a
    single line of text.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Entry**小部件是Tkinter的标准小部件，用于输入或显示单行文本。'
- en: The button `callback()` function (event handler) assigns the contents of the
    textbox to be the value of a variable. All these actions are verified by displaying
    the value of this variable.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的`callback()`函数（事件处理器）将文本框的内容分配给变量的值。所有这些操作都通过显示这个变量的值来验证。
- en: How to do it...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Execute the program shown in the normal way.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以正常方式执行显示的程序。
- en: '[PRE3]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: '![How it works...](img/3845_10_4.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_10_4.jpg)'
- en: A text entry box on its own is not much use. It is like a post box text can
    be sent to it or picked up from it.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的文本输入框并没有太大的用处。它就像一个邮筒，文本可以发送到它或从它那里取走。
- en: 'This program does the following things:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序执行以下操作：
- en: It sets up a parent frame or window named `root` inside of which is a labeled
    button and a textbox with an initial message `enter text here` displayed.
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它设置了一个名为`root`的父框架或窗口，其中包含一个标签按钮和一个显示初始消息“在此输入文本”的文本框。
- en: We can click on the entry box and replace the initial text with new text.
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以点击输入框，并用新文本替换初始文本。
- en: If we click on the button it takes the contents of the box, and assigns them
    as the value of a variable called `data_inp_1`.
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果我们点击按钮，它将框中的内容作为变量`data_inp_1`的值。
- en: It displays the value of `data_inp_1` as a label to the right of the textbox.
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它将`data_inp_1`的值显示为文本框右侧的标签。
- en: There's more...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The key to getting buttons to perform useful functions lies in the code you
    place in the `callback()` function that gets executed when the button is pushed.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮执行有用功能的关键在于放置在`callback()`函数中的代码，该函数在按钮被按下时执行。
- en: Programming buttons can get very complicated and we can easily get confounded
    by our own ingenuity. The rule is to keep things simple.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编程按钮可能会变得非常复杂，我们很容易被自己的独创性所困惑。规则是保持简单。
- en: You can locate more than one button in the same position inside a frame, with
    the button that is visible being the last one our Python program placed there.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在框架内的同一位置定位多个按钮，可见的按钮是Python程序最后放置的那个按钮。
- en: 'Later on, we can make sets of buttons that appear ''illuminated'' when on and
    ''dark'' when off. It is fun to do these things but be wary of getting too clever.
    A very brilliant and wise programmer said the following:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我们可以制作一组按钮，当开启时看起来“发光”，当关闭时看起来“暗淡”。做这些事情很有趣，但要注意不要过于聪明。一位非常聪明和明智的程序员说过以下的话：
- en: —Brian W. Kernighan, co-author of the C programming language.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: —Brian W. Kernighan，C编程语言合著者。
- en: Did we keep things simple?
  id: totrans-77
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 我们是否保持了事情简单？
- en: In the sixth recipe of this chapter called "complex interaction between buttons",
    we ignore the wise advice just to explore what may be possible. We do this kind
    of thing for our own edification and fun but should shun it for any kind of professional
    work.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章第六个名为“按钮之间的复杂交互”的菜谱中，我们忽略明智的建议，只是为了探索可能的可能性。我们这样做是为了自己的教育和乐趣，但对于任何专业工作都应该避免。
- en: Single-line versus multi-line entry
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单行与多行输入
- en: The widget used here is called the **Entry** widget and is for single-line input
    only. There is another one called the **Text** widget that is designed for multi-line
    input. There is an example of how to use this widget later in this chapter.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里使用的部件被称为**输入**部件，仅用于单行输入。还有一个名为**文本**的部件，它被设计用于多行输入。本章后面将有一个如何使用此部件的示例。
- en: The Clever Geometry Manager
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 聪明的几何管理器
- en: Notice how the size of the parent window changes to accommodate the size of
    the label text during the execution of the program. This is a very intelligent
    program design.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 注意在程序执行过程中，父窗口的大小如何改变以适应标签文本的大小。这是一个非常智能的程序设计。
- en: Colored button causing a message pop-up
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有消息弹出的彩色按钮
- en: Buttons can be given different visual properties and complex behaviors. Here
    we create a blue raised button that changes appearance when clicked with a mouse.
    A message box widget is made to pop up when the button is pushed.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮可以被赋予不同的视觉属性和复杂的行为。在这里，我们创建了一个蓝色的凸起按钮，当用鼠标点击时，其外观会发生变化。当按钮被按下时，会弹出一个消息框小部件。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何去做...
- en: Execute the program shown in the normal way.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以正常方式执行显示的程序。
- en: '[PRE4]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '![How it works...](img/3845_10_5.jpg)![How it works...](img/3845_10_6.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_10_5.jpg)![如何工作...](img/3845_10_6.jpg)'
- en: What we see now is that buttons are highly customizable, as are many Tkinter
    widgets. This recipe illustrates another term that you are bound to come across
    as a GUI programmer and that is the word focus.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在看到的是，按钮非常可定制，正如Tkinter中的许多小部件一样。这个菜谱说明了你作为GUI程序员肯定会遇到的另一个术语，那就是“焦点”这个词。
- en: Focus is the idea that when there are several widgets on a graphic container
    only one of them can be given attention or listened to at a time. Each button
    is programmed to respond to the click of a mouse but when the mouse is clicked,
    only one button should respond. The widget responding is the one that the program
    focuses on. In our example, you actually see the focus being given to the button
    when the mouse pointer moves across it the focus is used to change the button's
    coloring in a Linux operating system. It is like the chairman offering the floor
    to someone wanting to address a meeting group. The aspirant talker can only do
    so when the chairman offers them the floor (gives them focus). When this happens,
    everyone else is expected to be quiet and listen courteously.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 重点是当有多个小部件在一个图形容器上时，一次只能给予一个关注或监听。每个按钮都被编程为响应鼠标点击，但当鼠标点击时，只有一个按钮应该响应。响应的部件是程序所关注的部件。在我们的例子中，当鼠标指针移动到按钮上时，你会看到焦点被给予按钮（焦点被用来在Linux操作系统中改变按钮的颜色）。这就像主席向想要发表讲话的会议小组提供发言机会一样。有抱负的演讲者只能在主席提供发言机会（给予他们焦点）时才能这样做。当这种情况发生时，其他人预计要安静地礼貌地倾听。
- en: Complex interaction between buttons
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮之间的复杂交互
- en: In this recipe, we show how button actions can be made as complex as we choose
    by getting a set of three buttons that modify each other.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们展示了如何通过获取一组三个相互修改的按钮，使按钮动作变得尽可能复杂。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何去做...
- en: Execute the program shown in the normal way.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以正常方式执行显示的程序。
- en: '[PRE5]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: '![How it works...](img/3845_10_7.jpg)![How it works...](img/3845_10_8.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_10_7.jpg)![如何工作...](img/3845_10_8.jpg)'
- en: 'All the action happens in the event handler (callback()) functions. Every instantiated
    object, like the buttons used here, has a collection of attributes like color,
    text, and appearance that can be modified by specifications like: `message_button_2["bg"]=
    "grey"`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的动作都发生在事件处理程序（回调函数）中。每个实例化的对象，如这里使用的按钮，都有一个属性集合，如颜色、文本和外观，可以通过以下规范进行修改：`message_button_2["bg"]=
    "grey"`
- en: So what happens is that when button 1 is clicked, button 2 has its background
    color changed from green to grey.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当按钮 1 被点击时，按钮 2 的背景颜色从绿色变为灰色。
- en: While it is fun to create very complicated interactive behavior with button
    actions, it rapidly becomes nearly impossible to keep track of what behavior you
    want. The more complexity you add, the more unintended behaviors appear. The best
    advice then is to try to keep things simple.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然使用按钮动作创建非常复杂的交互式行为很有趣，但很快就会变得几乎不可能跟踪你想要的行为。你添加的复杂性越多，就会出现越多的意外行为。因此，最好的建议是尽量保持简单。
- en: Images on buttons and button packing
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 按钮上的图片和按钮打包
- en: By placing GIF format images onto buttons, we can create any appearance desirable.
    The images can convey information about the function of the button. Image size
    has to be taken into account and the geometry manager has to be used thoughtfully.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 GIF 格式的图片放置在按钮上，我们可以创建任何期望的外观。图片可以传达关于按钮功能的有关信息。需要考虑图片的大小，并且要谨慎地使用几何管理器。
- en: How to do it...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Execute the program shown in exactly the same way as usual.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 按照通常的方式执行显示的程序。
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: '![How it works...](img/3845_10_9.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_10_9.jpg)'
- en: The thing to notice here is that the grid geometry manager packs all the widgets
    together as neatly as it can regardless of widget size.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的事情是，网格几何管理器会尽可能整齐地将所有小部件打包在一起，无论小部件的大小如何。
- en: There's more...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One of the wonderful thoughts behind the design of Python modules is that their
    actions should be kind and tolerant. This means that if attributes are coded with
    unsuitable values then defaults will be selected by the interpreter as at least
    some choice that is likely to work. This is an enormous boon to coders. If you
    ever come across one of the inner circle of Python developers they deserve an
    affectionate hug for this reason alone.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Python 模块设计背后的一个美妙思想是，它们的行为应该是友好和宽容的。这意味着如果属性被编码为不合适的值，则解释器将选择默认值，至少是一种可能工作的选择。这对程序员来说是一个巨大的帮助。如果你遇到过
    Python 开发者圈子中的任何成员，他们仅仅因为这个原因就值得得到一个亲切的拥抱。
- en: Grid Geometry Manager and button arrays
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格几何管理器和按钮数组
- en: By placing GIF format images onto buttons, we can create any desired appearance.
    Image size has to be taken into account and the geometry manager has to be used
    thoughtfully.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将 GIF 格式的图片放置在按钮上，我们可以创建任何期望的外观。需要考虑图片的大小，并且要谨慎地使用几何管理器。
- en: How to do it...
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Execute the program shown in the normal way.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照正常方式执行显示的程序。
- en: '[PRE7]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '![How it works...](img/3845_10_10.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/3845_10_10.jpg)'
- en: There are two geometry managers in Tkinter. In this book, we have used the Grid
    Geometry Manager exclusively up until now because it keeps the level of complexity
    down and also because it is easy to use and gives you direct control of your interface
    layout. The other layout geometry manager is called **pack** and is addressed
    in the next chapter.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter 中有两种几何管理器。在这本书中，我们一直独家使用网格几何管理器，因为它可以降低复杂性，而且使用起来简单，还能直接控制界面布局。另一种布局几何管理器称为
    **pack**，将在下一章中介绍。
- en: The rules are simple. Our parent window or frame is divided into rows and columns.
    `Row=0` is the first row along the top and `column=0` is the first column down
    the left-hand side. `columnspan=2` means that the widget using this attribute
    sits in the center of two adjacent columns. Note that the button with the vine
    icon on it sits in the center of four grid regions because it has both `columnspan=2`
    and `rowspan=2`.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 规则很简单。我们的父窗口或框架被分成行和列。`Row=0` 是顶部的第一行，`column=0` 是左侧的第一列。`columnspan=2` 意味着使用此属性的控件位于两个相邻列的中心。请注意，带有藤蔓图标的按钮位于四个网格区域的中心，因为它同时具有
    `columnspan=2` 和 `rowspan=2`。
- en: There's more...
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: By changing the grid attributes in this example, you can help yourself acquire
    an insight to the Grid Geometry Manager. Please experiment with the grid manager
    for a while it will pay dividends in your programming endeavors.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改此示例中的网格属性，您可以帮助自己获得对网格几何管理器的洞察。请花一些时间实验网格管理器，它将在您的编程努力中带来回报。
- en: Drop-down menus to select from a list
  id: totrans-123
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从列表中选择的下拉菜单
- en: Here we use a drop-down menu widget as a way to select one item from a choice
    of several on offer.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用下拉菜单小部件作为从提供的几个选项中选择一个项的方法。
- en: How to do it...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Execute the program shown in the usual way. The result is shown in the following
    screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式执行显示的程序。结果如下截图所示：
- en: '![How to do it...](img/3845_10_11.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![如何实现...](img/3845_10_11.jpg)'
- en: '[PRE8]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The drop-down menu has its own button. The `callback()` function that gets called
    when this button is clicked is named `grab_and_assign` in this particular recipe
    and one of the instructions in this event service routine is to assign the value
    of the menu item selected to the variable `chosen_option`. The instruction that
    does this is `chosen_option = var.get()`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下拉菜单有自己的按钮。当点击此按钮时被调用的 `callback()` 函数在此特定菜谱中命名为 `grab_and_assign`，此事件服务程序中的一条指令是将所选菜单项的值分配给变量
    `chosen_option`。执行此操作的指令是 `chosen_option = var.get()`。
- en: As we did previously, we reassure ourselves that everything works as expected
    by printing the new value of `chosen_option` as a label on the parent window.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所做的那样，我们通过在父窗口上打印 `chosen_option` 的新值作为标签来确保一切按预期工作。
- en: Listbox variable selection
  id: totrans-132
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表框变量选择
- en: A **listbox** is a widget that shows a choice of alternatives in a list form.
    An item in the list can be selected by clicking the mouse cursor on it.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '**列表框**是一个以列表形式显示选择项的控件。可以通过在列表项上点击鼠标光标来选择列表中的项。'
- en: How to do it...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Execute the program shown in the usual way.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式执行显示的程序。
- en: '[PRE9]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How it works...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '![How it works...](img/3845_10_12.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作的...](img/3845_10_12.jpg)'
- en: A listbox named `listbox1` is created and placed inside a Tkinter window. It
    is populated with five string items using a for loop.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 命名为 `listbox1` 的列表框被创建并放置在 Tkinter 窗口中。它使用 for 循环填充了五个字符串项。
- en: When the mouse cursor is clicked on an item, the function `get_list` assigns
    that item as the value of a variable `seltext`. The value of this variable is
    displayed in the yellow entry box.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 当鼠标光标点击一个项时，`get_list` 函数将该项作为变量 `seltext` 的值。此变量的值显示在黄色输入框中。
- en: Text in a window
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口中的文本
- en: Here is a simple way to place text in a window. There is no provision made to
    interact with the text.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在窗口中放置文本的简单方法。没有提供与文本交互的选项。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: Execute the program shown in the usual way.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以通常的方式执行显示的程序。
- en: '[PRE10]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How it works...
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A Text widget is created by the `Text(root)` method and the `insert(…)` function
    places the text inside. The END attribute places each new line at the end of the
    previous one.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `Text(root)` 方法创建 Text 控件，并通过 `insert(…)` 函数将文本放置其中。END 属性将每行新文本放置在上一行的末尾。
