- en: <st c="0">4</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Utilizing Flask Extensions</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="28">Flask is popular due to its extensions, which are installable external
    or third-party modules or plugins that add support and even enhance some built-in
    features that may seem redundant to create, such as form handling, session handling,
    authentication procedures,</st> <st c="294">and caching.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="306">Applying Flask extensions to project development can save time and
    effort compared to re-creating the same features again.</st> <st c="430">Also,
    these modules can have interdependence with other essential Python and Flask modules
    without requiring too much configuration, which is convenient for adding new features
    to the baseline project.</st> <st c="632">Despite the positive factors, however,
    there are also some side effects of installing extensions for our Flask applications,
    such as having collisions with some installed modules and version problems with
    the current Flask version, which results in us having to downgrade some Flask
    extensions or the Flask version itself.</st> <st c="955">Version collisions, deprecation,
    and non-support remain the core concerns when utilizing Flask extensions; therefore,
    it is advisable to read the documentation of every Flask extension before installing
    each on</st> <st c="1166">the platform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1179">This chapter will showcase the same project components that were
    created in</st> *<st c="1256">Chapters 1</st>* <st c="1266">to</st> *<st c="1270">3</st>*<st
    c="1271">, including web forms, REST services, backend databases, web sessions,
    and look-and-feel, but using their respective Flask extension modules.</st> <st
    c="1413">Moreover, this chapter will also show you how to apply caching and integrate
    mail features into</st> <st c="1509">the application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1525">This chapter will cover the</st> <st c="1554">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1571">Applying database migration</st> <st c="1600">with Flask-Migrate</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1618">Designing the UI</st> <st c="1636">using Bootstrap-Flask</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1657">Building Flask forms</st> <st c="1679">with Flask-WTF</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1693">Building RESTful services</st> <st c="1720">with Flask-RESTful</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1738">Implementing session handling</st> <st c="1769">with Flask-Session</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1787">Applying caching</st> <st c="1805">using Flask-Caching</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1824">Adding mail features</st> <st c="1846">with Flask-Mail</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1861">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1884">This chapter will highlight two prototypes for an</st> *<st c="1935">Online
    Complaint Management System</st>* <st c="1969">that utilizes different popular
    Flask 3.0 extensions.</st> <st c="2024">These extensions will build the complaint,
    administration, login, and report modules.</st> <st c="2110">The</st> `<st c="2114">ch04-web</st>`
    <st c="2122">project will consist of the form-based side, while the</st> `<st
    c="2178">ch04-api</st>` <st c="2186">project contains RESTful services to cater
    to the various complaint details.</st> <st c="2264">Both applications will utilize</st>
    `<st c="2295">Blueprints</st>` <st c="2305">to organize their directory structure
    and use</st> *<st c="2352">SQLAlchemy</st>* <st c="2362">to perform CRUD transactions
    with their PostgreSQL database.</st> <st c="2424">All these projects have been
    uploaded</st> <st c="2462">at</st> [<st c="2465">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch04</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch04)<st
    c="2546">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2547">Applying database migration with Flask-Migrate</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2594">The significant third-party Flask module to use when building an
    application is a module that will manage the data model layer, and that is the</st>
    **<st c="2739">Flask-Migrate</st>** <st c="2752">extension.</st> <st c="2764">Although
    it is sometimes appropriate to</st> <st c="2803">customize database migration
    using</st> *<st c="2839">Alembic</st>*<st c="2846">,</st> *<st c="2848">Flask-Migrate</st>*
    <st c="2861">offers easy setup and configuration with less coding</st> <st c="2915">and</st>
    <st c="2919">fast results.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2932">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2947">Alembic is a lightweight and fast database migration tool for SQLAlchemy
    that can be customized to support various</st> <st c="3063">database backends.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="3081">Database migration</st>** <st c="3100">is a way of deriving</st>
    <st c="3122">and generating the database schema from the Flask model classes and
    allowing the changes to be monitored and audited in these schemas throughout the
    application’s lifespan, such as adding and dropping table columns, modifying table
    constraints, and renaming columns without ruining the current data.</st> <st c="3422">All
    these mechanisms are managed</st> <st c="3455">by</st> *<st c="3458">Flask-Migrate</st>*<st
    c="3471">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3472">Now, let’s understand how to set up a database backend of our application
    using</st> *<st c="3553">Flask-Migrate</st>* <st c="3566">instead of manually
    creating the</st> <st c="3600">table schemas.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3614">Installing Flask-Migrate and Flask-SQLAlchemy</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3660">First, since our applications will utilize</st> *<st c="3704">SQLAlchemy</st>*
    <st c="3714">as the ORM choice, install</st> `<st c="3742">flask-sqlalchemy</st>`
    <st c="3758">through the</st> `<st c="3771">pip</st>` <st c="3774">command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3812">Second, enable</st> `<st c="3828">SQLAlchemy</st>` <st c="3838">by
    creating the</st> `<st c="3855">engine</st>`<st c="3861">,</st> `<st c="3863">db_session</st>`<st
    c="3873">, and</st> `<st c="3879">Base</st>` <st c="3883">classes since our prototypes
    will utilize</st> <st c="3925">the</st> *<st c="3930">declarative approach</st>*
    <st c="3950">of database connectivity.</st> <st c="3977">This</st> <st c="3981">setup
    can be found in the</st> `<st c="4008">/model/config.py</st>` <st c="4024">module
    of</st> <st c="4035">both applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4053">Now, using the</st> `<st c="4069">Base</st>` <st c="4073">class,
    create the model classes, which will become the basis of the database migration.</st>
    <st c="4162">The following code snippets show how to implement model classes using
    SQLAlchemy’s</st> `<st c="4245">Base</st>` <st c="4249">class:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'class Category(<st c="5611">Base</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'category'
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, <st c="5668">Sequence('category_id_seq', increment=1)</st>,
    <st c="5710">primary_key = True</st>)
  prefs: []
  type: TYPE_NORMAL
- en: name = Column(String(45), nullable = False) <st c="5775">complaints = relationship('Complaint',
    back_populates="category")</st> … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: 'class ComplaintType(Base):'
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'complaint_type'
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, <st c="5933">Sequence('complaint_type_id_seq', increment=1)</st>,
    <st c="5981">primary_key = True</st>)
  prefs: []
  type: TYPE_NORMAL
- en: name = Column(String(45), nullable = False) <st c="6046">complaints = relationship('Complaint',
    back_populates="complaint_type")</st> … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: 'class ComplaintDetails(<st c="6152">Base</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'complaint_details'
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, <st c="6218">Sequence('complaint_details_id_seq', increment=1)</st>,
    <st c="6269">primary_key = True</st>)
  prefs: []
  type: TYPE_NORMAL
- en: compid = Column(Integer, <st c="6315">ForeignKey('complaint.id')</st>, nullable
    = False, <st c="6361">unique=True</st>)
  prefs: []
  type: TYPE_NORMAL
- en: statement = Column(String(100), nullable = False)
  prefs: []
  type: TYPE_NORMAL
- en: status = Column(String(50))
  prefs: []
  type: TYPE_NORMAL
- en: resolution = Column(String(100))
  prefs: []
  type: TYPE_NORMAL
- en: date_resolved = Column(Date) <st c="6515">complaint = relationship('Complaint',
    back_populates="complaint_details")</st> … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: pip install flask-migrate
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7138">from flask_migrate import Migrate</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7172">from flask_sqlalchemy import SQLAlchemy</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7212">from model.config import Base</st> from main import app
  prefs: []
  type: TYPE_NORMAL
- en: import toml
  prefs: []
  type: TYPE_NORMAL
- en: app.config.from_file('config-dev.toml', toml.load) <st c="7327">db = SQLAlchemy(app,
    metadata=Base.metadata)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7438">flask-sqlalchemy</st> approach, where the instance of the <st c="7491">SQLAlchemy</st>
    class creates the model classes, instantiating the <st c="7553">Migrate</st> class
    just involves passing the <st c="7593">app</st> instance and the SQLAlchemy instance.
    In this approach, SQLAlchemy is still vital to the migration process, but its
    explicit instantiation will depend on the <st c="7755">Base.metadata</st> constructor
    parameter aside from the <st c="7806">app</st> instance. The instantiation of
    the <st c="7845">Migration</st> class also requires the <st c="7879">app</st>
    instance and the derived SQLAlchemy instance, as shown in the given module script.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7965">Now, if the migration</st> <st c="7988">setup is ready and correct,
    the</st> `<st c="8020">migrate</st>` <st c="8027">instance provided by</st> `<st
    c="8049">manage.py</st>` <st c="8058">can run the</st> `<st c="8071">init</st>`
    <st c="8075">CLI command.</st> <st c="8089">This execution will generate the Alembic
    files needed for the</st> <st c="8151">migration process.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="8169">Setting up the Alembic configuration</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="8206">Flask-Migrate uses Alembic to establish</st> <st c="8246">and manage
    database migrations.</st> <st c="8279">Running the</st> `<st c="8291">init</st>`
    <st c="8295">CLI command from the</st> `<st c="8317">migrate</st>` <st c="8324">instance
    will generate the Alembic configuration files inside the project directory.</st>
    <st c="8410">The following Python command runs Flask-Migrate’s</st> `<st c="8460">init</st>`
    <st c="8464">CLI command using our</st> `<st c="8487">manage.py</st>` <st c="8496">file:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8542">In the preceding command,</st> `<st c="8569">db</st>` <st c="8571">specifies
    the SQLAlchemy</st> `<st c="8597">db</st>` <st c="8599">instance that’s passed
    to the</st> `<st c="8630">migrate</st>` <st c="8637">instance, while</st> `<st
    c="8654">init</st>` <st c="8658">is the CLI command that is part of the</st> `<st
    c="8698">flask_migrate</st>` <st c="8711">module.</st> <st c="8720">Running the
    preceding command will create logs that list all the folders and files generated
    by the</st> `<st c="8820">init</st>` <st c="8824">command, as depicted in</st>
    *<st c="8849">Figure 4</st>**<st c="8857">.1</st>*<st c="8859">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.1 – The init CLI command logs](img/B19383_04_1.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="9611">Figure 4.1 – The init CLI command logs</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="9649">All the Alembic files are inside the</st> `<st c="9687">migrations</st>`
    <st c="9697">folder and are auto-generated by the preceding command.</st> <st
    c="9754">The</st> `<st c="9758">migrations</st>` <st c="9768">folder contains
    the main Alembic file,</st> `<st c="9808">env.py</st>`<st c="9814">, which can
    be tweaked or further configured to support some additional migration requirements.</st>
    *<st c="9910">Figure 4</st>**<st c="9918">.2</st>* <st c="9920">shows the content
    of the</st> `<st c="9946">migrations</st>` <st c="9956">folder:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.2 – The migrations folder](img/B19383_04_2.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="10027">Figure 4.2 – The migrations folder</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10061">Aside from</st> `<st c="10073">env.py</st>`<st c="10079">, the
    following files are also included in the</st> `<st c="10126">migrations</st>`
    <st c="10136">folder:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10144">The</st> `<st c="10149">alembic.ini</st>` <st c="10160">file,
    which contains the default Alembic</st> <st c="10202">configuration variables.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10226">The</st> `<st c="10231">script.py.mako</st>` <st c="10245">file,
    which serves as the template file for the</st> <st c="10294">migration files.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10310">There will also be a</st> `<st c="10332">versions</st>` <st c="10340">folder
    that will contain</st> <st c="10366">the migration scripts after running the</st>
    `<st c="10406">migrate</st>` <st c="10413">command.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10422">Creating the migrations</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10446">After generating the Alembic files, the</st> `<st c="10487">migrate</st>`
    <st c="10494">CLI command will be ready to start the</st> *<st c="10534">initial
    migration</st>*<st c="10551">. Running the</st> `<st c="10565">migrate</st>` <st
    c="10572">command for</st> <st c="10584">the first time generates all the tables
    from the ground up based on the SQLAlchemy model classes.</st> <st c="10683">The
    Python command to run the</st> `<st c="10713">migrate</st>` <st c="10720">CLI
    command is</st> <st c="10736">as follows:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '*<st c="10803">Figure 4</st>**<st c="10812">.3</st>* <st c="10814">shows the
    log messages after running this</st> <st c="10857">initial migration:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.3 – The migrate CLI command logs](img/B19383_04_3.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="11707">Figure 4.3 – The migrate CLI command logs</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="11748">A successful initial migration will</st> <st c="11784">create
    an</st> `<st c="11795">alembic_version</st>` <st c="11810">table in the database.</st>
    *<st c="11834">Figure 4</st>**<st c="11842">.4</st>* <st c="11844">shows the content
    of the</st> `<st c="11870">ocms</st>` <st c="11874">database after the initial</st>
    <st c="11902">database migration:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.4 – The alembic_version table](img/B19383_04_4.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="12131">Figure 4.4 – The alembic_version table</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="12169">Every execution of the</st> `<st c="12193">migrate</st>` <st c="12200">command
    creates a migration script with a filename similar to its assigned unique</st>
    *<st c="12283">version number</st>*<st c="12297">. Flask-Migrate logs these version
    numbers in the</st> `<st c="12347">alembic_version</st>` <st c="12362">table and
    places all migration scripts inside the</st> `<st c="12413">migrations</st>` <st
    c="12423">folder under the</st> `<st c="12441">/versions</st>` <st c="12450">sub-directory.</st>
    <st c="12466">The following is a sample of this</st> <st c="12500">migration script:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13212">These auto-generated migration scripts sometimes need to be validated,
    edited, and re-coded because they aren’t always the exact depiction of the SQLAlchemy
    model classes.</st> <st c="13385">Sometimes, these scripts do not</st> <st c="13417">capture
    the required changes in the table relationships and metadata that’s applied to</st>
    <st c="13504">the models.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="13515">Now, to implement the final migration script, the</st> `<st c="13566">upgrade</st>`
    <st c="13573">CLI command needs to</st> <st c="13595">be executed.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="13607">Applying the database changes</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="13637">The complete Python command to run</st> <st c="13673">the</st>
    `<st c="13677">upgrade</st>` <st c="13684">CLI command is</st> <st c="13700">as
    follows:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '*<st c="13754">Figure 4</st>**<st c="13763">.6</st>* <st c="13765">shows the
    log messages after running the</st> `<st c="13807">upgrade</st>` <st c="13814">CLI
    command:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 4.5 – The upgrade CLI command logs](img/B19383_04_5.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="14141">Figure 4.5 – The upgrade CLI command logs</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="14182">The initial upgrade execution generates all the tables as defined
    in the initial migration script.</st> <st c="14282">Moreover, the succeeding scripts
    will always modify the schemas depending on the changes that are applied to the
    model classes.</st> <st c="14410">On the</st> <st c="14416">other hand,</st> `<st
    c="14512">downgrade</st>` <st c="14521">CLI command.</st> <st c="14535">This command
    restores the previous version of</st> <st c="14581">the database.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="14594">Database migration in Flask projects will not be straightforward
    and seamless without Flask-Migrate.</st> <st c="14696">Writing the migration setup
    and processes from scratch will be time-consuming and rigorous to</st> <st c="14790">some
    extent.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="14802">The next extension that can help the development team save time
    handling Bootstrap’s static files and importing them into Jinja2 templates</st>
    <st c="14942">is</st> *<st c="14945">Bootstrap-Flask</st>*<st c="14960">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="14961">Designing the UI using Bootstrap-Flask</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15000">There are several ways to</st> <st c="15026">render context data
    with look-and-feel to the Jinja2 templates</st> <st c="15089">without stressing
    too much about downloading the resources files or referencing the static files
    from the</st> **<st c="15196">content delivery network</st>** <st c="15220">(</st>**<st
    c="15222">CDN</st>**<st c="15225">) repository</st> <st c="15239">and importing
    them into the template pages to manage the best UI design for the renditions.</st>
    <st c="15331">One of the most ideal and up-to-date</st> <st c="15368">options
    is</st> **<st c="15379">Bootstrap-Flask</st>**<st c="15394">, a far different
    module from the</st> *<st c="15428">Flask-Bootstrap</st>* <st c="15443">extension
    module.</st> <st c="15462">The latter uses only Bootstrap version 3.0, while</st>
    *<st c="15512">Bootstrap-Flask</st>* <st c="15527">can support up to</st> *<st
    c="15546">Bootstrap 5.0</st>*<st c="15559">. So, it is recommended to uninstall
    Flask-Bootstrap and other UI-related modules first before setting up Flask-Bootstrap
    to</st> <st c="15683">avoid unexpected conflicts.</st> <st c="15712">Allowing
    only Bootstrap-Flask to manage the UI designs can provide</st> <st c="15779">better
    results.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15794">But first, let’s install</st> *<st c="15820">Bootstrap-Flask</st>*
    <st c="15835">by running the following</st> `<st c="15861">pip</st>` <st c="15864">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="15901">Next, we’ll set up the Bootstrap module</st> <st c="15942">with
    the desired Bootstrap</st> <st c="15969">framework distribution.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15992">Setting up the UI module</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="16017">For the module to work with the Flask platform, it must be set
    up in the</st> `<st c="16091">main.py</st>` <st c="16098">module.</st> <st c="16107">The</st>
    `<st c="16111">bootstrap_flask</st>` <st c="16126">module has</st> `<st c="16138">Bootstrap4</st>`
    <st c="16148">and</st> `<st c="16153">Bootstrap5</st>` <st c="16163">core classes
    that must be wired to the Flask instance before we can apply the framework’s assets.</st>
    <st c="16262">An application can only use one</st> <st c="16294">Bootstrap distribution:
    our</st> `<st c="16322">ch04-web</st>` <st c="16330">application utilizes the</st>
    `<st c="16356">Bootstrap4</st>` <st c="16366">class to maintain consistency from</st>
    [*<st c="16402">Chapter 3</st>*](B19383_03.xhtml#_idTextAnchor076)<st c="16411">’s
    Bootstrap preference.</st> <st c="16437">The following</st> `<st c="16451">main.py</st>`
    <st c="16458">module instantiates</st> `<st c="16479">Bootstrap4</st>`<st c="16489">,
    which enables the</st> <st c="16509">extension module:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs: []
  type: TYPE_NORMAL
- en: <meta charset="utf-8" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <meta http-equiv="x-ua-compatible" content="ie=edge" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <meta name="viewport" content="width=device-width, initial-scale=1" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>Online Complaint Management System</title> <st c="17622">{{ bootstrap.load_css()
    }}</st> </head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <body>
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … … <st c="17675">{{ bootstrap.load_js() }}</st> </body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <body>
  prefs: []
  type: TYPE_NORMAL
- en: <section class="<st c="18500">position-relative py-4 py-xl-5</st>">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18547">container position-relative</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18591">row mb-5</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18616">col-md-8 col-xl-6 text-center</st> <st c="18646">mx-auto</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h2 class="<st c="18669">display-3</st>">User Login</h2>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18724">row d-flex justify-content-center</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18774">col-md-6 col-xl-4</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18808">card</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="<st c="18829">card-body text-center</st> <st c="18851">d-flex flex-column
    align-items-center</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <form action="{{ request.path }}" method = "post">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </form>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </section>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: </body>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <st c="22074">from flask_wtf import FlaskForm</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="22106">from wtforms import StringField, IntegerField, SelectField, DateField,
    EmailField</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="22188">from wtforms.validators import InputRequired, Length, Regexp,
    Email</st> class ComplainantForm(<st c="22279">FlaskForm</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: 'id = <st c="22298">SelectField</st>(''Choose Login ID: '', validators=[InputRequired()])'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: firstname = <st c="22374">StringField</st>('Enter firstname:', validators=[InputRequired(),
    Length(max=50)])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: middlename = <st c="22466">StringField</st>('Enter middlename:', validators=[InputRequired(),
    Length(max=50)])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: lastname = <st c="22557">StringField</st>('Enter lastname:', validators=[InputRequired(),
    Length(max=50)])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: email = <st c="22643">EmailField</st>('Enter email:', validators=[InputRequired(),
    Length(max=20), Email()])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: mobile = <st c="22735">StringField</st>('Enter mobile:', validators=[InputRequired(),
    Length(max=20), Regexp(regex=r"^(\+63)[-]{1}\d{3}
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[-]{1}\d{3}[-]{1}\d{4}$", message="Valid phone number format is +63-xxx-xxx-xxxx")])'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: address = <st c="22939">StringField</st>('Enter address:', validators=[InputRequired(),
    Length(max=100)])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: zipcode = <st c="23027">IntegerField</st>('Enter zip code:',  validators=[InputRequired()])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: status = <st c="23099">SelectField</st>('Enter status:', choices=[('active',
    'ACTIVE'),
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ('inactive','INACTIVE'), ('blocked','BLOCKED')], validators=[InputRequired()])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'date_registered = <st c="23348">firstname</st>, <st c="23359">middlename</st>,
    <st c="23371">lastname</st>, and <st c="23385">address</st> are input-type text
    boxes with varying lengths and are required form parameters. For specific input
    types, <st c="23500">date_registered</st> is a required form parameter of the
    <st c="23552">Date</st> type with a date format of <st c="23584">yyyy-mm-dd</st>,
    while <st c="23602">email</st> is an email-type text box. On the other hand, the
    <st c="23658">status</st> and <st c="23669">id</st> form parameters are combo
    boxes, but the difference is the absence of options in <st c="23753">id</st>.
    The <st c="23761">status</st> form parameter has its <st c="23791">choices</st>
    options already defined in the form, while in the <st c="23849">id</st> form parameter,
    the view function will populate these fields at runtime. The following is a snippet
    of the <st c="23959">add_complainant()</st> view that manages the <st c="23999">id</st>
    parameter’s options:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24997">The preceding view accesses the</st> `<st c="25030">choices</st>`
    <st c="25037">parameter of the</st> `<st c="25055">id</st>` <st c="25057">form
    parameter to assign it with a list of</st> `<st c="25101">(id, username) Tuple</st>`<st
    c="25121">, with</st> `<st c="25128">username</st>` <st c="25136">as the label
    and</st> `<st c="25154">id</st>` <st c="25156">as</st> <st c="25160">its value.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="25170">On the other hand, the HTTP POST transaction of the</st> `<st
    c="25223">add_complainant()</st>` <st c="25240">view will verify form validation
    errors after submission through the</st> `<st c="25310">form</st>` <st c="25314">parameter’s</st>
    `<st c="25327">validate_on_submit()</st>`<st c="25347">. If there is none, the
    view function will extract all form data from the</st> `<st c="25421">form</st>`
    <st c="25425">object, insert the</st> <st c="25444">complaint details into the
    database, and render a list of all complainants.</st> <st c="25521">Otherwise,
    it will return the form page with the submitted</st> `<st c="25580">ComplainantForm</st>`
    <st c="25595">instance with form data values.</st> <st c="25628">Now that we’ve
    implemented the form models and the view functions that manage them, we can focus
    on how to map these models to their respective</st> `<st c="25772"><form></st>`
    <st c="25778">tags using</st> <st c="25790">Jinja2 templates.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="25807">Rendering the forms</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="25827">Before returning the WTF form model to the Jinja2 template, the
    view function must access and instantiate the FlaskForm sub-class, and even populate
    some fields with values in preparation for the</st> `<st c="26024"><form></st>`
    <st c="26030">mapping.</st> <st c="26040">Assigning the model form with the appropriate
    values can avoid Jinja2 errors during</st> `<st c="26124"><</st>``<st c="26125">form></st>`
    <st c="26130">loading.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26139">Now, the form rendition happens</st> <st c="26172">only when there
    is an</st> *<st c="26194">HTTP GET</st>* <st c="26202">request for form loading
    or when an HTTP POST encounters validation errors during submission, requiring
    the form page that’s showing the current values and the error status to be reloaded.</st>
    <st c="26392">The type of HTTP request determines what values to assign to the
    form model’s fields before rendering the form.</st> <st c="26504">Thus, in the
    given</st> `<st c="26523">add_complainant()</st>` <st c="26540">view, checking
    if</st> `<st c="26559">request.method</st>` <st c="26573">is a</st> *<st c="26579">GET</st>*
    <st c="26582">request means verifying when to render the</st> `<st c="26626">complainant_add.html</st>`
    <st c="26646">form template with the</st> `<st c="26670">ComplainantForm</st>`
    <st c="26685">instance with base or initialized values.</st> <st c="26728">Otherwise,
    it will be a rendition of a</st> <st c="26766">form page with the current form
    values and</st> <st c="26810">validation errors.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26828">The following</st> `<st c="26843">complainant_add.html</st>` <st
    c="26863">page maps the</st> `<st c="26878">ComplainantForm</st>` <st c="26893">fields,
    with base or current values, to the</st> `<st c="26938"><</st>``<st c="26939">form></st>`
    <st c="26944">tag:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27710">Binding the individual model field to</st> `<st c="27749"><form></st>`
    <st c="27755">requires calling the property of the field – for example,</st> `<st
    c="27814">context_name.field()</st>`<st c="27834">. So, to render the</st> `<st
    c="27854">firstname</st>` <st c="27863">form field of</st> `<st c="27878">ComplainantForm</st>`<st
    c="27893">, for instance, the Jinja2 template must call</st> `<st c="27939">form.firstname()</st>`
    <st c="27955">inside the</st> `<st c="27967">{{}}</st>` <st c="27971">statement.</st>
    <st c="27983">The method call can also include its</st> `<st c="28020">kwargs</st>`
    <st c="28026">or</st> *<st c="28030">keyword arguments</st>* <st c="28047">of
    widget</st> <st c="28058">properties, such as</st> `<st c="28078">size</st>`<st
    c="28082">,</st> `<st c="28084">placeholder</st>`<st c="28095">, and</st> `<st
    c="28101">class</st>`<st c="28106">, if there is a change in the default widget
    settings during the rendition.</st> <st c="28182">As shown in the template, the</st>
    *<st c="28212">Flask-WTF</st>* <st c="28221">widgets support the Bootstrap components
    provided by the</st> *<st c="28279">Bootstrap-Flask</st>* <st c="28294">module
    extension.</st> <st c="28313">Adding custom CSS styles is also feasible with widgets,
    so long the CSS properties are set in the</st> <st c="28411">widget’s</st> `<st
    c="28420">kwargs</st>`<st c="28426">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28427">Now, let’s explore if Flask can secure</st> <st c="28466">form
    transactions from</st> **<st c="28490">cross-site request forgery</st>** <st c="28516">(</st>**<st
    c="28518">CSRF</st>**<st c="28522">) problems like in</st> <st c="28542">Django’s
    forms.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28557">Applying CSRF</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="28571">Flask-WTF has built-in CSRF</st> <st c="28599">support through
    its</st> `<st c="28620">csrf_token</st>` <st c="28630">generation.</st> <st c="28643">To</st>
    <st c="28646">enable CSRF through Flask-WTF, instantiate</st> `<st c="28689">CSRFProtect</st>`
    <st c="28700">from the</st> `<st c="28710">flask_wtf</st>` <st c="28719">module
    in</st> `<st c="28730">main.py</st>`<st c="28737">, as shown in the</st> <st c="28755">following
    snippet:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'class ComplainantForm(FlaskForm):'
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: zipcode = IntegerField('Enter zip code:',  validators=[InputRequired()])
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def validate_<st c="31902">zipcode</st>(self, <st c="31918">zipcode</st>):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if not len(str(zipcode.data)) == 4: <st c="32044">FlaskForm</st> function with
    the method name prefixed with <st c="32098">validate_</st>, followed by the form
    field name it validates, that takes that form field as a parameter. The given
    <st c="32208">validate_zipcode()</st> checks whether the form field’s <st c="32259">zipcode</st>
    checks if the input is a four-number value. Otherwise, it throws an exception
    class. Another approach is to implement validators as *<st c="32399">typical FlaskForm
    functions</st>*, but the validator function needs to be injected explicitly into
    the <st c="32496">validators</st> parameter of the field it validates.'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="32543">Lastly,</st> *<st c="32552">a closure-like or callable approach</st>*
    <st c="32587">to validator implementation is also possible.</st> <st c="32634">Here</st>
    `<st c="32639">disallow_invalid_dates()</st>` <st c="32663">is a closure-type
    validator that does not allow date input before the</st> <st c="32734">given</st>
    `<st c="32740">date_after</st>`<st c="32750">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="34466">from flask_restful import Resource</st> class ListComplaintRestAPI(<st
    c="34529">Resource</st>): <st c="34542">def get(self):</st> repo = ComplaintRepository(db_session)'
  prefs: []
  type: TYPE_NORMAL
- en: records = repo.select_all()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: complaint_rec = [rec.to_json() for rec in records]
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(jsonify(complaint_rec), 201)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'class AddComplaintRestAPI(<st c="35133">Resource</st>): <st c="35146">def post(self):</st>
    complaint_json = request.get_json()'
  prefs: []
  type: TYPE_NORMAL
- en: repo = ComplaintRepository(db_session)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: complaint = Complaint(**complaint_json)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.insert(complaint)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(complaint_json)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="insert complaint record encountered a problem")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'class UpdateComplainantRestAPI(<st c="35786">Resource</st>): <st c="35799">def
    patch(self, id):</st> complaint_json = request.get_json()'
  prefs: []
  type: TYPE_NORMAL
- en: repo = ComplaintRepository(db_session)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.update(id, complaint_json)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(complaint_json)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="update complainant ID encountered a problem")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'class DeleteComplaintRestAPI(<st c="36530">Resource</st>): <st c="36543">def
    delete(self, id):</st> repo = ComplaintRepository(db_session)'
  prefs: []
  type: TYPE_NORMAL
- en: result = repo.delete(id)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message=f'complaint {id} deleted')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="delete complaint record encountered a problem")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'class UpdateComplaintRestAPI(<st c="36983">Resource</st>): <st c="36996">def
    put(self):</st> complaint_json = request.get_json()'
  prefs: []
  type: TYPE_NORMAL
- en: repo = ComplaintRepository(db_session)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.update(complaint_json['id'], complaint_json)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(complaint_json)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="update complaint record encountered a problem")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <st c="37739">from flask import Blueprint</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37767">from flask_restful import Api</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37797">complaint_bp</st> = Blueprint('complaint_bp', __name__)
  prefs: []
  type: TYPE_NORMAL
- en: from modules.complaint.api.complaint import AddComplaintRestAPI, ListComplaintRestAPI,
    UpdateComplainantRestAPI, UpdateComplaintRestAPI, DeleteComplaintRestAPI
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … … <st c="38021">api = Api(complaint_bp)</st> api.<st c="38049">add_resource</st>(<st
    c="38064">AddComplaintRestAPI</st>, '/complaint/add', endpoint='add_complaint')
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38133">add_resource</st>(<st c="38148">ListComplaintRestAPI</st>,
    '/complaint/list/all', endpoint='list_all_complaint')
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38228">add_resource</st>(<st c="38243">UpdateComplainantRestAPI</st>,
    '/complaint/update/complainant/<int:id>', endpoint='update_complainant')
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38346">add_resource</st>(<st c="38361">UpdateComplaintRestAPI</st>,
    '/complaint/update', endpoint='update_complaint')
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38541">Api</st> class has an <st c="38558">add_resource()</st> method
    that maps every resource to its *<st c="38612">URL pattern</st>* and *<st c="38628">endpoint</st>*
    or *<st c="38640">view function name</st>*. This script shows how all the complaint
    module’s resource classes are injected into the platform as full-fledged API endpoints.
    Conflicts on endpoint names and URLs within and outside the blueprint modules
    will cause compile-time errors, so all details must be unique to each resource.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38945">The next module extension,</st> *<st c="38973">Flask-Session</st>*<st
    c="38986">, provides Flask with a better session-handling solution than its</st>
    <st c="39052">built-in implementation.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="39076">Implementing session handling with Flask-Session</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="39125">The</st> **<st c="39130">Flask-Session</st>** <st c="39143">module,
    like Flask’s built-in session, is easy to configure and use, except the module
    extension does not</st> <st c="39249">store session</st> <st c="39263">data in
    the</st> <st c="39276">web browser.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="39288">Before you can configure this module, you must install it using
    the</st> `<st c="39357">pip</st>` <st c="39360">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <st c="39395">Then, import the</st> `<st c="39413">Session</st>` <st c="39420">class
    into the</st> `<st c="39436">main.py</st>` <st c="39443">module to instantiate
    and integrate the extension module into the Flask platform.</st> <st c="39526">The
    following</st> `<st c="39540">main.py</st>` <st c="39547">snippet shows the configuration</st>
    <st c="39580">of</st> *<st c="39583">Flask-Session</st>*<st c="39596">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: SESSION_LIFETIME = true <st c="40966">SESSION_TYPE = "filesystem"</st> SESSION_FILE_THRESHOLD
    = 600
  prefs: []
  type: TYPE_NORMAL
- en: SESSION_PERMANENT = true
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: from flask import session
  prefs: []
  type: TYPE_NORMAL
- en: '@login_bp.route(''/login/auth'', methods=[''GET'', ''POST''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def login_db_auth():'
  prefs: []
  type: TYPE_NORMAL
- en: authForm:LoginAuthForm = LoginAuthForm()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if authForm.validate_on_submit():'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = LoginRepository(db_session)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: username = authForm.username.data
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if user == None:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login.html', form=authForm) , 500
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif not user.password == password:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login.html', form=authForm) , 500
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else: <st c="42189">session[''username''] = request.form[''username'']</st>
    return redirect(''/ch04/login/add'')'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login.html', form=authForm) , 500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: pip install flask-caching
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: <st c="43320">CACHE_TYPE = "FileSystemCache"</st> CACHE_DEFAULT_TIMEOUT = 300
  prefs: []
  type: TYPE_NORMAL
- en: CACHE_DIR = "./cache_dir/"
  prefs: []
  type: TYPE_NORMAL
- en: CACHE_THRESHOLD = 800
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: <st c="43975">from main_cache import cache</st> app = Flask(__name__, template_folder='pages',
    static_folder="resources")
  prefs: []
  type: TYPE_NORMAL
- en: 'app.config.from_file(''config-dev.toml'', toml.load) <st c="44296">cache_dir</st>
    must be created inside the main folder, as shown in *<st c="44358">Figure 4</st>**<st
    c="44366">.8</st>*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The cache files in cache_dir](img/B19383_04_8.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="44449">Figure 4.8 – The cache files in cache_dir</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44490">If the setup is successful, components can now access</st> `<st
    c="44545">main_cache.py</st>` <st c="44558">for the cache instance.</st> <st c="44583">It
    has a</st> `<st c="44592">cached()</st>` <st c="44600">decorator that can provide
    caching for various functions.</st> <st c="44659">First, it can cache views, usually
    with an HTTP</st> *<st c="44707">GET</st>* <st c="44710">request to retrieve bulk
    records from the database.</st> <st c="44763">The following view function from
    the</st> `<st c="44800">complainant.py</st>` <st c="44814">module of the</st>
    `<st c="44829">ch04-web</st>` <st c="44837">application caches all its results
    to</st> `<st c="44876">cache_dir</st>` <st c="44885">for</st> <st c="44890">optimal
    performance:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <st c="45251">The exact area to decorate</st> <st c="45278">the</st> `<st c="45283">cached()</st>`
    <st c="45291">decorator is between the</st> <st c="45316">function definition
    and the route decorator of the view function.</st> <st c="45383">The decorator
    needs</st> `<st c="45403">key_prefix</st>` <st c="45413">to generate</st> `<st
    c="45426">cache_key</st>`<st c="45435">. If not specified,</st> *<st c="45455">Flask-Caching</st>*
    <st c="45468">will use the default</st> `<st c="45490">request.path</st>` <st
    c="45502">as the</st> `<st c="45510">cache_key</st>` <st c="45519">value.</st>
    <st c="45527">Note that</st> `<st c="45537">cache_key</st>` <st c="45546">is the
    key that’s used to access the cached value of the function and is solely for the
    module to access.</st> <st c="45653">The given</st> `<st c="45663">list_all_complainant()</st>`
    <st c="45685">caches the rendered list of complaints with</st> `<st c="45730">prefix_key</st>`
    <st c="45740">set</st> <st c="45745">to</st> `<st c="45748">all_complaints</st>`<st
    c="45762">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="45763">Moreover, the endpoint functions of the resource-based API created
    by Flask-RESTful can also cache their returned values through the</st> `<st c="45897">@cached()</st>`
    <st c="45906">decorator.</st> <st c="45918">The following code shows</st> `<st
    c="45943">ListComplaintDetailsRestAPI</st>` <st c="45970">from the</st> `<st c="45980">ch04-api</st>`
    <st c="45988">application, which caches the list of</st> `<st c="46027">ComplaintDetails</st>`
    <st c="46043">records</st> <st c="46052">into</st> `<st c="46057">cache_dir</st>`<st
    c="46066">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46333">As shown in the preceding code snippet, the decorator is placed
    above the overridden method of the</st> `<st c="46433">Resource</st>` <st c="46441">class.</st>
    <st c="46449">This rule is also valid with the other</st> <st c="46488">class-based
    views.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46506">The module can also cache repository and</st> <st c="46547">service
    functions that retrieve large amounts of data during user access.</st> <st c="46622">The</st>
    <st c="46625">following code shows a</st> `<st c="46649">select_all()</st>` <st
    c="46661">function that retrieves data from the</st> `<st c="46700">login</st>`
    <st c="46705">table:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46974">Moreover, the module also supports the</st> *<st c="47014">memoization</st>*
    <st c="47025">process to store values, similar to caching, but for custom functions
    that are frequently accessed.</st> <st c="47126">The</st> `<st c="47130">cache</st>`
    <st c="47135">instance has a</st> `<st c="47151">memoize()</st>` <st c="47160">decorator
    that manages these functions to improve performance.</st> <st c="47224">The following
    code shows the</st> `<st c="47253">@memoize</st>` <st c="47261">decorated method</st>
    <st c="47279">of</st> `<st c="47282">ComplaintRepository</st>`<st c="47301">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: <st c="47533">The given</st> `<st c="47544">select_all()</st>` <st c="47556">method
    will cache all the queried records for 50 seconds to improve its data retrieval
    performance.</st> <st c="47657">To clear the</st> <st c="47670">caches after server
    startup, always call</st> `<st c="47711">cache.clear()</st>` <st c="47724">in
    the</st> `<st c="47732">main.py</st>` <st c="47739">module</st> <st c="47746">after</st>
    <st c="47753">blueprint registration.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47776">To be able to send complaints through emails, let’s showcase a
    popular extension module</st> <st c="47865">called</st> *<st c="47872">Flask-Mail</st>*<st
    c="47882">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47883">Adding mail features using Flask-Mail</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="47921">Flask-Mail</st>** <st c="47932">is an extension module that</st>
    <st c="47960">handles sending emails to an email server without too</st> <st c="48015">much
    configuration.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="48034">First, install the</st> `<st c="48054">flask-mail</st>` <st c="48064">module
    using the</st> `<st c="48082">pip</st>` <st c="48085">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: <st c="48117">Then, create a separate module script, such as</st> `<st c="48165">mail_config.py</st>`<st
    c="48179">, to instantiate the</st> `<st c="48200">Mail</st>` <st c="48204">class.</st>
    <st c="48212">This approach solves the cyclic collisions that occur when views
    or endpoint functions access the</st> `<st c="48310">mail</st>` <st c="48314">instance
    for the</st> <st c="48332">utility methods.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="48348">Despite the separate module, the</st> `<st c="48382">main.py</st>`
    <st c="48389">module still needs to access the</st> `<st c="48423">mail</st>`
    <st c="48427">instance to integrate the module into the Flask platform.</st> <st
    c="48486">The following</st> `<st c="48500">main.py</st>` <st c="48507">snippet
    shows how to set up the</st> *<st c="48540">Flask-Mail</st>* <st c="48550">module</st>
    <st c="48558">with Flask:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: <st c="48742">Afterward, the setup requires some configuration variables to
    be set in the config file.</st> <st c="48832">The following configuration</st>
    <st c="48860">variables are the most essential settings for our applications in</st>
    <st c="48926">this chapter:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: <st c="49100">These details pertain to a</st> *<st c="49128">Gmail</st>* <st
    c="49133">account, but you can replace them with</st> *<st c="49173">Yahoo!</st>*
    <st c="49179">account details.</st> <st c="49197">Preferably,</st> `<st c="49209">MAIL_USE_SSL</st>`
    <st c="49221">must be set to</st> `<st c="49237">true</st>`<st c="49241">. Note
    that</st> `<st c="49253">MAIL_PASSWORD</st>` <st c="49266">is a token that’s generated
    from the</st> *<st c="49304">app password</st>* <st c="49316">of the email account
    and not the actual one to establish a secure connection to the mail server.</st>
    <st c="49414">After server startup, Flask-Mail is ready to use if there are no</st>
    <st c="49479">compiler errors.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49495">The following</st> `<st c="49510">email_complaint()</st>` <st
    c="49527">view function uses the</st> `<st c="49551">mail</st>` <st c="49555">instance
    to send a complaint through the</st> *<st c="49597">Flask-WTF</st>* <st c="49606">and</st>
    *<st c="49611">Flask-Mail</st>* <st c="49621">extension modules:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: <st c="50306">Here,</st> `<st c="50313">EmailComplaintForm</st>` <st c="50331">provides</st>
    <st c="50341">details for the</st> `<st c="50357">Message()</st>` <st c="50366">attributes,
    except for the sender, which is the email address that’s assigned to the</st>
    `<st c="50452">MAIL_USERNAME</st>` <st c="50465">configuration variable.</st>
    <st c="50490">The</st> `<st c="50494">mail</st>` <st c="50498">instance provides
    the</st> `<st c="50521">send()</st>` <st c="50527">utility method to send the
    message to</st> <st c="50566">the recipient(s).</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50583">Summary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50591">This chapter explained how to utilize Flask extension modules
    when building applications.</st> <st c="50682">Most extension modules will let
    us focus on the requirements rather than the complexities of configurations and
    setups, such as the</st> *<st c="50814">Flask-WTF</st>* <st c="50823">and</st>
    *<st c="50828">Bootstrap-Flask</st>* <st c="50843">modules.</st> <st c="50853">Some
    will shorten development time instead of programming the snippets repeatedly or
    handling the details all over again, such as</st> *<st c="50983">Flask-Migrate</st>*
    <st c="50996">on database migrations and</st> *<st c="51024">Flask-Mail</st>*
    <st c="51034">for sending messages to email servers.</st> <st c="51074">Some modules
    can enhance the built-in features of the Flask framework and provide better configuration
    options, such as</st> *<st c="51194">Flask_Caching</st>* <st c="51207">and</st>
    *<st c="51212">Flask-Session</st>*<st c="51225">. Finally, a few will organize
    the concepts and the implementations of the components, such</st> <st c="51317">as</st>
    *<st c="51320">Flask-RESTful</st>*<st c="51333">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51334">Although problems may arise with version conflicts and outdated
    modules, the many advantages the extension modules provide supersede all of their
    drawbacks.</st> <st c="51492">But above all, the software requirements must always
    come first when applying these extension modules.</st> <st c="51595">You should
    always be able to choose the appropriate options among these modules that will
    best address the needed requirements, not because they can</st> <st c="51744">provide
    shortcuts.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51762">The next chapter will be about the Flask framework and</st> <st
    c="51818">asynchronous programming.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: <st c="0">Part 2:Building Advanced Flask 3.x Applications</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="48">In this part, you will learn how to extend your Flask skills to build
    enterprise applications with enhanced performance using asynchronous views and
    API endpoints.</st> <st c="213">You will learn to use the asynchronous SQLAlchemy
    to build asynchronous repository transactions and NoSQL databases to manage non-structured
    or semi-structured big data.</st> <st c="383">Overall, this part will lead you
    to implement features that utilize asynchronous background tasks, upload XLSX
    and CSV files to generate charts, graphs, and tabular data, generate PDF documents,
    use WebSockets and</st> **<st c="597">Server-Sent Events</st>** <st c="615">(</st>**<st
    c="617">SSE</st>**<st c="620">), implement non-BPMN and BPMN workflows, and secure
    the application from</st> <st c="695">web attacks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="707">This part includes the</st> <st c="731">following chapters:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[*<st c="750">Chapter 5</st>*](B19383_05.xhtml#_idTextAnchor111)<st c="760">,</st>
    *<st c="762">Building Asynchronous Transactions</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="796">Chapter 6</st>*](B19383_06.xhtml#_idTextAnchor143)<st c="806">,</st>
    *<st c="808">Developing Computational and Scientific Applications</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="860">Chapter 7</st>*](B19383_07.xhtml#_idTextAnchor177)<st c="870">,</st>
    *<st c="872">Using Non-Relational Data Storage</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="905">Chapter 8</st>*](B19383_08.xhtml#_idTextAnchor218)<st c="915">,</st>
    *<st c="917">Building Workflows with Flask</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*<st c="946">Chapter 9</st>*](B19383_09.xhtml#_idTextAnchor256)<st c="956">,</st>
    *<st c="958">Securing Flask Applications</st>*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
