- en: <st c="0">4</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: <st c="2">Utilizing Flask Extensions</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 利用Flask扩展
- en: <st c="28">Flask is popular due to its extensions, which are installable external
    or third-party modules or plugins that add support and even enhance some built-in
    features that may seem redundant to create, such as form handling, session handling,
    authentication procedures,</st> <st c="294">and caching.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Flask因其扩展而流行，这些扩展是可安装的外部或第三方模块或插件，它们增加了支持并甚至增强了可能看起来重复创建的一些内置功能，例如表单处理、会话处理、认证过程，以及缓存。
- en: <st c="306">Applying Flask extensions to project development can save time and
    effort compared to re-creating the same features again.</st> <st c="430">Also,
    these modules can have interdependence with other essential Python and Flask modules
    without requiring too much configuration, which is convenient for adding new features
    to the baseline project.</st> <st c="632">Despite the positive factors, however,
    there are also some side effects of installing extensions for our Flask applications,
    such as having collisions with some installed modules and version problems with
    the current Flask version, which results in us having to downgrade some Flask
    extensions or the Flask version itself.</st> <st c="955">Version collisions, deprecation,
    and non-support remain the core concerns when utilizing Flask extensions; therefore,
    it is advisable to read the documentation of every Flask extension before installing
    each on</st> <st c="1166">the platform.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 将Flask扩展应用于项目开发可以节省时间和精力，与重新创建相同功能相比。此外，这些模块可以与其他必要的Python和Flask模块具有相互依赖性，而无需太多配置，这对于向基线项目添加新功能来说很方便。然而，尽管有积极的因素，但安装Flask应用的扩展也有一些副作用，例如与某些已安装模块发生冲突以及与当前Flask版本存在版本问题，这导致我们必须降级某些Flask扩展或Flask版本本身。版本冲突、弃用和非支持是利用Flask扩展时的核心关注点；因此，在平台上安装每个Flask扩展之前，建议阅读每个Flask扩展的文档。
- en: <st c="1179">This chapter will showcase the same project components that were
    created in</st> *<st c="1256">Chapters 1</st>* <st c="1266">to</st> *<st c="1270">3</st>*<st
    c="1271">, including web forms, REST services, backend databases, web sessions,
    and look-and-feel, but using their respective Flask extension modules.</st> <st
    c="1413">Moreover, this chapter will also show you how to apply caching and integrate
    mail features into</st> <st c="1509">the application.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将展示与第1章到第3章中创建的相同项目组件，包括网页表单、REST服务、后端数据库、网页会话和外观，但使用它们各自的Flask扩展模块。此外，本章还将向您展示如何应用缓存并将邮件功能集成到应用程序中。
- en: <st c="1525">This chapter will cover the</st> <st c="1554">following topics:</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: <st c="1571">Applying database migration</st> <st c="1600">with Flask-Migrate</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-Migrate应用数据库迁移
- en: <st c="1618">Designing the UI</st> <st c="1636">using Bootstrap-Flask</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Bootstrap-Flask设计UI
- en: <st c="1657">Building Flask forms</st> <st c="1679">with Flask-WTF</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-WTF构建Flask表单
- en: <st c="1693">Building RESTful services</st> <st c="1720">with Flask-RESTful</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-RESTful构建RESTful服务
- en: <st c="1738">Implementing session handling</st> <st c="1769">with Flask-Session</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-Session实现会话处理
- en: <st c="1787">Applying caching</st> <st c="1805">using Flask-Caching</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-Caching应用缓存
- en: <st c="1824">Adding mail features</st> <st c="1846">with Flask-Mail</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask-Mail添加邮件功能
- en: <st c="1861">Technical requirements</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: <st c="1884">This chapter will highlight two prototypes for an</st> *<st c="1935">Online
    Complaint Management System</st>* <st c="1969">that utilizes different popular
    Flask 3.0 extensions.</st> <st c="2024">These extensions will build the complaint,
    administration, login, and report modules.</st> <st c="2110">The</st> `<st c="2114">ch04-web</st>`
    <st c="2122">project will consist of the form-based side, while the</st> `<st
    c="2178">ch04-api</st>` <st c="2186">project contains RESTful services to cater
    to the various complaint details.</st> <st c="2264">Both applications will utilize</st>
    `<st c="2295">Blueprints</st>` <st c="2305">to organize their directory structure
    and use</st> *<st c="2352">SQLAlchemy</st>* <st c="2362">to perform CRUD transactions
    with their PostgreSQL database.</st> <st c="2424">All these projects have been
    uploaded</st> <st c="2462">at</st> [<st c="2465">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch04</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch04)<st
    c="2546">.</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1884">本章将突出介绍两个用于</st> *<st c="1935">在线投诉管理系统</st> <st c="1969">的原型，该系统利用了不同的流行
    Flask 3.0 扩展。</st> <st c="2024">这些扩展将构建投诉、管理、登录和报告模块。</st> <st c="2110">`<st c="2114">ch04-web</st>`
    <st c="2122">项目将包括基于表单的一侧，而</st> `<st c="2178">ch04-api</st>` <st c="2186">项目包含
    RESTful 服务，以适应各种投诉细节。</st> <st c="2264">这两个应用程序都将利用</st> `<st c="2295">Blueprints</st>`
    <st c="2305">来组织它们的目录结构，并使用</st> *<st c="2352">SQLAlchemy</st> <st c="2362">*
    <st c="2362">与它们的 PostgreSQL 数据库执行 CRUD 事务。</st> <st c="2424">所有这些项目都已上传到</st>
    <st c="2462">[<st c="2465">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch04</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch04)<st
    c="2546">。</st>
- en: <st c="2547">Applying database migration with Flask-Migrate</st>
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2547">应用数据库迁移</st>
- en: <st c="2594">The significant third-party Flask module to use when building an
    application is a module that will manage the data model layer, and that is the</st>
    **<st c="2739">Flask-Migrate</st>** <st c="2752">extension.</st> <st c="2764">Although
    it is sometimes appropriate to</st> <st c="2803">customize database migration
    using</st> *<st c="2839">Alembic</st>*<st c="2846">,</st> *<st c="2848">Flask-Migrate</st>*
    <st c="2861">offers easy setup and configuration with less coding</st> <st c="2915">and</st>
    <st c="2919">fast results.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2594">在构建应用程序时，要使用的最重要的第三方 Flask 模块是用于管理数据模型层的模块，那就是</st> **<st c="2739">Flask-Migrate</st>**
    <st c="2752">扩展。</st> <st c="2764">尽管有时使用</st> <st c="2803">*<st c="2839">Alembic</st>
    <st c="2846">*<st c="2848">来定制数据库迁移是合适的，但</st> *<st c="2848">Flask-Migrate</st>
    <st c="2861">*<st c="2861">提供了更少的编码和更快的配置设置。</st>
- en: <st c="2932">Important note</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2932">重要注意事项</st>
- en: <st c="2947">Alembic is a lightweight and fast database migration tool for SQLAlchemy
    that can be customized to support various</st> <st c="3063">database backends.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2947">Alembic 是一个轻量级且快速的 SQLAlchemy 数据库迁移工具，可以定制以支持各种</st> <st c="3063">数据库后端。</st>
- en: '**<st c="3081">Database migration</st>** <st c="3100">is a way of deriving</st>
    <st c="3122">and generating the database schema from the Flask model classes and
    allowing the changes to be monitored and audited in these schemas throughout the
    application’s lifespan, such as adding and dropping table columns, modifying table
    constraints, and renaming columns without ruining the current data.</st> <st c="3422">All
    these mechanisms are managed</st> <st c="3455">by</st> *<st c="3458">Flask-Migrate</st>*<st
    c="3471">.</st>'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="3081">数据库迁移</st>** <st c="3100">是从 Flask 模型类推导和生成数据库架构的一种方式，并允许在整个应用程序的生命周期中监控和审计这些架构中的更改，例如添加和删除表列、修改表约束以及重命名列，而不会破坏当前数据。</st>
    <st c="3422">所有这些机制都由</st> <st c="3455">*<st c="3458">Flask-Migrate</st> <st c="3471">*<st
    c="3471">管理。</st>'
- en: <st c="3472">Now, let’s understand how to set up a database backend of our application
    using</st> *<st c="3553">Flask-Migrate</st>* <st c="3566">instead of manually
    creating the</st> <st c="3600">table schemas.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3472">现在，让我们了解如何使用</st> *<st c="3553">Flask-Migrate</st> <st c="3566">来设置我们应用程序的数据库后端，而不是手动创建</st>
    <st c="3600">表架构。</st>
- en: <st c="3614">Installing Flask-Migrate and Flask-SQLAlchemy</st>
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3614">使用 Flask-Migrate 应用数据库迁移</st>
- en: <st c="3660">First, since our applications will utilize</st> *<st c="3704">SQLAlchemy</st>*
    <st c="3714">as the ORM choice, install</st> `<st c="3742">flask-sqlalchemy</st>`
    <st c="3758">through the</st> `<st c="3771">pip</st>` <st c="3774">command:</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3660">首先，由于我们的应用程序将使用</st> *<st c="3704">SQLAlchemy</st> <st c="3714">作为
    ORM 选项，请通过</st> `<st c="3742">flask-sqlalchemy</st>` <st c="3758">通过</st> `<st
    c="3771">pip</st>` <st c="3774">命令安装：</st>
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="3812">Second, enable</st> `<st c="3828">SQLAlchemy</st>` <st c="3838">by
    creating the</st> `<st c="3855">engine</st>`<st c="3861">,</st> `<st c="3863">db_session</st>`<st
    c="3873">, and</st> `<st c="3879">Base</st>` <st c="3883">classes since our prototypes
    will utilize</st> <st c="3925">the</st> *<st c="3930">declarative approach</st>*
    <st c="3950">of database connectivity.</st> <st c="3977">This</st> <st c="3981">setup
    can be found in the</st> `<st c="4008">/model/config.py</st>` <st c="4024">module
    of</st> <st c="4035">both applications.</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4053">Now, using the</st> `<st c="4069">Base</st>` <st c="4073">class,
    create the model classes, which will become the basis of the database migration.</st>
    <st c="4162">The following code snippets show how to implement model classes using
    SQLAlchemy’s</st> `<st c="4245">Base</st>` <st c="4249">class:</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'class Category(<st c="5611">Base</st>):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'category'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, <st c="5668">Sequence('category_id_seq', increment=1)</st>,
    <st c="5710">primary_key = True</st>)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: name = Column(String(45), nullable = False) <st c="5775">complaints = relationship('Complaint',
    back_populates="category")</st> … … … … … …
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: 'class ComplaintType(Base):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'complaint_type'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, <st c="5933">Sequence('complaint_type_id_seq', increment=1)</st>,
    <st c="5981">primary_key = True</st>)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: name = Column(String(45), nullable = False) <st c="6046">complaints = relationship('Complaint',
    back_populates="complaint_type")</st> … … … … … …
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: 'class ComplaintDetails(<st c="6152">Base</st>):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'complaint_details'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, <st c="6218">Sequence('complaint_details_id_seq', increment=1)</st>,
    <st c="6269">primary_key = True</st>)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: compid = Column(Integer, <st c="6315">ForeignKey('complaint.id')</st>, nullable
    = False, <st c="6361">unique=True</st>)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: statement = Column(String(100), nullable = False)
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: status = Column(String(50))
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: resolution = Column(String(100))
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: date_resolved = Column(Date) <st c="6515">complaint = relationship('Complaint',
    back_populates="complaint_details")</st> … … … … … …
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: pip install flask-migrate
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="7138">from flask_migrate import Migrate</st>
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7172">from flask_sqlalchemy import SQLAlchemy</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7212">from model.config import Base</st> from main import app
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: import toml
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: app.config.from_file('config-dev.toml', toml.load) <st c="7327">db = SQLAlchemy(app,
    metadata=Base.metadata)</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7438">flask-sqlalchemy</st> approach, where the instance of the <st c="7491">SQLAlchemy</st>
    class creates the model classes, instantiating the <st c="7553">Migrate</st> class
    just involves passing the <st c="7593">app</st> instance and the SQLAlchemy instance.
    In this approach, SQLAlchemy is still vital to the migration process, but its
    explicit instantiation will depend on the <st c="7755">Base.metadata</st> constructor
    parameter aside from the <st c="7806">app</st> instance. The instantiation of
    the <st c="7845">Migration</st> class also requires the <st c="7879">app</st>
    instance and the derived SQLAlchemy instance, as shown in the given module script.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7438">flask-sqlalchemy</st>方法，其中SQLAlchemy类的实例创建模型类，实例化</st> `<st c="7553">Migrate</st>`
    <st c="7593">类只需传递</st> `<st c="7593">app</st>`实例和SQLAlchemy实例。在这种方法中，SQLAlchemy仍然是迁移过程的重要组成部分，但其显式实例化将取决于</st>
    `<st c="7755">Base.metadata</st>`构造函数参数，除了</st> `<st c="7806">app</st>`实例之外。</st>
    `<st c="7845">Migration</st>` <st c="7879">类的实例化也需要</st> `<st c="7879">app</st>`实例和派生的SQLAlchemy实例，如给定的模块脚本所示。
- en: <st c="7965">Now, if the migration</st> <st c="7988">setup is ready and correct,
    the</st> `<st c="8020">migrate</st>` <st c="8027">instance provided by</st> `<st
    c="8049">manage.py</st>` <st c="8058">can run the</st> `<st c="8071">init</st>`
    <st c="8075">CLI command.</st> <st c="8089">This execution will generate the Alembic
    files needed for the</st> <st c="8151">migration process.</st>
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="7965">现在，如果迁移</st> `<st c="7988">设置准备就绪且正确，</st> `<st c="8020">migrate</st>`
    <st c="8027">实例由</st> `<st c="8049">manage.py</st>` <st c="8058">提供，可以运行</st>
    `<st c="8071">init</st>` <st c="8075">CLI命令。</st> <st c="8089">这次执行将生成迁移过程所需的Alembic文件。</st>
- en: <st c="8169">Setting up the Alembic configuration</st>
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="8169">设置Alembic配置</st>
- en: <st c="8206">Flask-Migrate uses Alembic to establish</st> <st c="8246">and manage
    database migrations.</st> <st c="8279">Running the</st> `<st c="8291">init</st>`
    <st c="8295">CLI command from the</st> `<st c="8317">migrate</st>` <st c="8324">instance
    will generate the Alembic configuration files inside the project directory.</st>
    <st c="8410">The following Python command runs Flask-Migrate’s</st> `<st c="8460">init</st>`
    <st c="8464">CLI command using our</st> `<st c="8487">manage.py</st>` <st c="8496">file:</st>
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="8206">Flask-Migrate使用Alembic来</st> <st c="8246">建立和管理数据库迁移。</st> <st
    c="8279">从</st> `<st c="8291">migrate</st>` <st c="8295">实例运行</st> `<st c="8317">init</st>`
    <st c="8324">CLI命令将在项目目录内生成Alembic配置文件。</st> <st c="8410">以下Python命令运行Flask-Migrate的</st>
    `<st c="8460">init</st>` <st c="8464">CLI命令，使用我们的</st> `<st c="8487">manage.py</st>`
    <st c="8496">文件：</st>
- en: '[PRE4]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="8542">In the preceding command,</st> `<st c="8569">db</st>` <st c="8571">specifies
    the SQLAlchemy</st> `<st c="8597">db</st>` <st c="8599">instance that’s passed
    to the</st> `<st c="8630">migrate</st>` <st c="8637">instance, while</st> `<st
    c="8654">init</st>` <st c="8658">is the CLI command that is part of the</st> `<st
    c="8698">flask_migrate</st>` <st c="8711">module.</st> <st c="8720">Running the
    preceding command will create logs that list all the folders and files generated
    by the</st> `<st c="8820">init</st>` <st c="8824">command, as depicted in</st>
    *<st c="8849">Figure 4</st>**<st c="8857">.1</st>*<st c="8859">:</st>
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="8542">在前面的命令中，</st> `<st c="8569">db</st>` <st c="8571">指定了传递给</st> `<st
    c="8630">migrate</st>` <st c="8637">实例的SQLAlchemy</st> `<st c="8597">db</st>`
    <st c="8599">实例，而</st> `<st c="8654">init</st>` <st c="8658">是</st> `<st c="8698">flask_migrate</st>`
    <st c="8711">模块的一部分。</st> <st c="8720">运行前面的命令将创建日志，列出由</st> `<st c="8820">init</st>`
    <st c="8824">命令生成的所有文件夹和文件，如图</st> *<st c="8849">图4</st>**<st c="8857">.1</st>*<st
    c="8859">所示：</st>
- en: '![Figure 4.1 – The init CLI command logs](img/B19383_04_1.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图4.1 – init CLI命令日志](img/B19383_04_1.jpg)'
- en: <st c="9611">Figure 4.1 – The init CLI command logs</st>
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="9611">图4.1 – init CLI命令日志</st>
- en: <st c="9649">All the Alembic files are inside the</st> `<st c="9687">migrations</st>`
    <st c="9697">folder and are auto-generated by the preceding command.</st> <st
    c="9754">The</st> `<st c="9758">migrations</st>` <st c="9768">folder contains
    the main Alembic file,</st> `<st c="9808">env.py</st>`<st c="9814">, which can
    be tweaked or further configured to support some additional migration requirements.</st>
    *<st c="9910">Figure 4</st>**<st c="9918">.2</st>* <st c="9920">shows the content
    of the</st> `<st c="9946">migrations</st>` <st c="9956">folder:</st>
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="9649">所有的Alembic文件都在</st> `<st c="9687">migrations</st>` <st c="9697">文件夹内，并且由前面的命令自动生成。</st>
    <st c="9754">该</st> `<st c="9758">migrations</st>` <st c="9768">文件夹包含主要的Alembic文件，</st>
    `<st c="9808">env.py</st>`<st c="9814">，它可以进行调整或进一步配置以支持一些额外的迁移需求。</st> *<st c="9910">图4</st>**<st
    c="9918">.2</st>* <st c="9920">显示了</st> `<st c="9946">migrations</st>` <st c="9956">文件夹的内容：</st>
- en: '![Figure 4.2 – The migrations folder](img/B19383_04_2.jpg)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 4.2 – 迁移文件夹](img/B19383_04_2.jpg)'
- en: <st c="10027">Figure 4.2 – The migrations folder</st>
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10027">图 4.2 – 迁移文件夹</st>
- en: <st c="10061">Aside from</st> `<st c="10073">env.py</st>`<st c="10079">, the
    following files are also included in the</st> `<st c="10126">migrations</st>`
    <st c="10136">folder:</st>
  id: totrans-62
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10061">除了</st> `<st c="10073">env.py</st>`<st c="10079">之外，以下文件也包含在</st>
    `<st c="10126">migrations</st>` <st c="10136">文件夹中：</st>
- en: <st c="10144">The</st> `<st c="10149">alembic.ini</st>` <st c="10160">file,
    which contains the default Alembic</st> <st c="10202">configuration variables.</st>
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10144">该</st> `<st c="10149">alembic.ini</st>` <st c="10160">文件，其中包含默认的
    Alembic</st> <st c="10202">配置变量。</st>
- en: <st c="10226">The</st> `<st c="10231">script.py.mako</st>` <st c="10245">file,
    which serves as the template file for the</st> <st c="10294">migration files.</st>
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="10226">该</st> `<st c="10231">script.py.mako</st>` <st c="10245">文件，作为迁移文件的模板文件。</st>
- en: <st c="10310">There will also be a</st> `<st c="10332">versions</st>` <st c="10340">folder
    that will contain</st> <st c="10366">the migration scripts after running the</st>
    `<st c="10406">migrate</st>` <st c="10413">command.</st>
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10310">还将有一个</st> `<st c="10332">versions</st>` <st c="10340">文件夹，其中将包含运行</st>
    `<st c="10406">migrate</st>` <st c="10413">命令后的迁移脚本。</st>
- en: <st c="10422">Creating the migrations</st>
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10422">创建迁移</st>
- en: <st c="10446">After generating the Alembic files, the</st> `<st c="10487">migrate</st>`
    <st c="10494">CLI command will be ready to start the</st> *<st c="10534">initial
    migration</st>*<st c="10551">. Running the</st> `<st c="10565">migrate</st>` <st
    c="10572">command for</st> <st c="10584">the first time generates all the tables
    from the ground up based on the SQLAlchemy model classes.</st> <st c="10683">The
    Python command to run the</st> `<st c="10713">migrate</st>` <st c="10720">CLI
    command is</st> <st c="10736">as follows:</st>
  id: totrans-67
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="10446">在生成 Alembic 文件后，</st> `<st c="10487">migrate</st>` <st c="10494">CLI
    命令将准备好开始</st> *<st c="10534">初始迁移</st>*<st c="10551">。首次运行</st> `<st c="10565">migrate</st>`
    <st c="10572">命令将根据 SQLAlchemy 模型类从头开始生成所有表。</st> <st c="10683">运行</st> `<st c="10713">migrate</st>`
    <st c="10720">CLI 命令的 Python 命令如下：</st>
- en: '[PRE5]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '*<st c="10803">Figure 4</st>**<st c="10812">.3</st>* <st c="10814">shows the
    log messages after running this</st> <st c="10857">initial migration:</st>'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="10803">图 4</st>**<st c="10812">.3</st>* <st c="10814">显示了运行此</st> <st
    c="10857">初始迁移后的日志消息：</st>'
- en: '![Figure 4.3 – The migrate CLI command logs](img/B19383_04_3.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 4.3 – migrate CLI 命令日志](img/B19383_04_3.jpg)'
- en: <st c="11707">Figure 4.3 – The migrate CLI command logs</st>
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="11707">图 4.3 – migrate CLI 命令日志</st>
- en: <st c="11748">A successful initial migration will</st> <st c="11784">create
    an</st> `<st c="11795">alembic_version</st>` <st c="11810">table in the database.</st>
    *<st c="11834">Figure 4</st>**<st c="11842">.4</st>* <st c="11844">shows the content
    of the</st> `<st c="11870">ocms</st>` <st c="11874">database after the initial</st>
    <st c="11902">database migration:</st>
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 成功的初始迁移将<st c="11748">创建一个</st> <st c="11784">数据库中的</st> `<st c="11795">alembic_version</st>`
    <st c="11810">表。</st> *<st c="11834">图 4</st>**<st c="11842">.4</st>* <st c="11844">显示了初始数据库迁移后</st>
    `<st c="11870">ocms</st>` <st c="11874">数据库的内容：</st>
- en: '![Figure 4.4 – The alembic_version table](img/B19383_04_4.jpg)'
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图 4.4 – alembic_version 表](img/B19383_04_4.jpg)'
- en: <st c="12131">Figure 4.4 – The alembic_version table</st>
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="12131">图 4.4 – alembic_version 表</st>
- en: <st c="12169">Every execution of the</st> `<st c="12193">migrate</st>` <st c="12200">command
    creates a migration script with a filename similar to its assigned unique</st>
    *<st c="12283">version number</st>*<st c="12297">. Flask-Migrate logs these version
    numbers in the</st> `<st c="12347">alembic_version</st>` <st c="12362">table and
    places all migration scripts inside the</st> `<st c="12413">migrations</st>` <st
    c="12423">folder under the</st> `<st c="12441">/versions</st>` <st c="12450">sub-directory.</st>
    <st c="12466">The following is a sample of this</st> <st c="12500">migration script:</st>
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="12169">每次执行</st> `<st c="12193">migrate</st>` <st c="12200">命令都会创建一个与分配的唯一</st>
    *<st c="12283">版本号</st>*<st c="12297">相似的迁移脚本文件名。</st> Flask-Migrate 在</st> `<st
    c="12347">alembic_version</st>` <st c="12362">表中记录这些版本号，并将所有迁移脚本放置在</st> `<st
    c="12413">migrations</st>` <st c="12423">文件夹中，该文件夹位于</st> `<st c="12441">/versions</st>`
    <st c="12450">子目录下。</st> <st c="12466">以下是一个此类</st> <st c="12500">迁移脚本的示例：</st>
- en: '[PRE6]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="13212">These auto-generated migration scripts sometimes need to be validated,
    edited, and re-coded because they aren’t always the exact depiction of the SQLAlchemy
    model classes.</st> <st c="13385">Sometimes, these scripts do not</st> <st c="13417">capture
    the required changes in the table relationships and metadata that’s applied to</st>
    <st c="13504">the models.</st>
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="13212">这些自动生成的迁移脚本有时需要验证、编辑和重新编码，因为它们并不总是对SQLAlchemy模型类的精确描述。</st> <st
    c="13385">有时，这些脚本没有</st> <st c="13417">捕捉到应用于</st> <st c="13504">模型的关系表和元数据中的所需更改。</st>
- en: <st c="13515">Now, to implement the final migration script, the</st> `<st c="13566">upgrade</st>`
    <st c="13573">CLI command needs to</st> <st c="13595">be executed.</st>
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="13515">现在，为了实现最终的迁移脚本，需要执行</st> `<st c="13566">升级</st>` <st c="13573">CLI命令</st>。</st>
- en: <st c="13607">Applying the database changes</st>
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="13607">应用数据库更改</st>
- en: <st c="13637">The complete Python command to run</st> <st c="13673">the</st>
    `<st c="13677">upgrade</st>` <st c="13684">CLI command is</st> <st c="13700">as
    follows:</st>
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="13637">运行</st> <st c="13673">升级</st> `<st c="13677">CLI命令</st>` 的完整Python命令如下：</st>
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*<st c="13754">Figure 4</st>**<st c="13763">.6</st>* <st c="13765">shows the
    log messages after running the</st> `<st c="13807">upgrade</st>` <st c="13814">CLI
    command:</st>'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="13754">图4</st>**<st c="13763">.6</st>* 展示了运行 `<st c="13807">升级</st>`
    <st c="13814">CLI命令</st>` 后的日志消息：'
- en: '![Figure 4.5 – The upgrade CLI command logs](img/B19383_04_5.jpg)'
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图4.5 – 升级CLI命令日志](img/B19383_04_5.jpg)'
- en: <st c="14141">Figure 4.5 – The upgrade CLI command logs</st>
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="14141">图4.5 – 升级CLI命令日志</st>
- en: <st c="14182">The initial upgrade execution generates all the tables as defined
    in the initial migration script.</st> <st c="14282">Moreover, the succeeding scripts
    will always modify the schemas depending on the changes that are applied to the
    model classes.</st> <st c="14410">On the</st> <st c="14416">other hand,</st> `<st
    c="14512">downgrade</st>` <st c="14521">CLI command.</st> <st c="14535">This command
    restores the previous version of</st> <st c="14581">the database.</st>
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="14182">初始升级执行会生成初始迁移脚本中定义的所有表。</st> <st c="14282">此外，后续的脚本将始终根据应用于模型类的更改修改模式。</st>
    <st c="14410">另一方面，</st> `<st c="14512">降级</st>` <st c="14521">CLI命令。</st> <st
    c="14535">此命令将恢复数据库的先前版本。</st>
- en: <st c="14594">Database migration in Flask projects will not be straightforward
    and seamless without Flask-Migrate.</st> <st c="14696">Writing the migration setup
    and processes from scratch will be time-consuming and rigorous to</st> <st c="14790">some
    extent.</st>
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="14594">在Flask项目中，没有Flask-Migrate，数据库迁移将不会直接且无缝。</st> <st c="14696">从头开始编写迁移设置和流程将非常耗时且相当严格。</st>
- en: <st c="14802">The next extension that can help the development team save time
    handling Bootstrap’s static files and importing them into Jinja2 templates</st>
    <st c="14942">is</st> *<st c="14945">Bootstrap-Flask</st>*<st c="14960">.</st>
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="14802">下一个可以帮助开发团队节省处理Bootstrap静态文件并将其导入Jinja2模板时间的扩展是</st> *<st c="14945">Bootstrap-Flask</st>*<st
    c="14960">。</st>
- en: <st c="14961">Designing the UI using Bootstrap-Flask</st>
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="14961">使用Bootstrap-Flask设计UI</st>
- en: <st c="15000">There are several ways to</st> <st c="15026">render context data
    with look-and-feel to the Jinja2 templates</st> <st c="15089">without stressing
    too much about downloading the resources files or referencing the static files
    from the</st> **<st c="15196">content delivery network</st>** <st c="15220">(</st>**<st
    c="15222">CDN</st>**<st c="15225">) repository</st> <st c="15239">and importing
    them into the template pages to manage the best UI design for the renditions.</st>
    <st c="15331">One of the most ideal and up-to-date</st> <st c="15368">options
    is</st> **<st c="15379">Bootstrap-Flask</st>**<st c="15394">, a far different
    module from the</st> *<st c="15428">Flask-Bootstrap</st>* <st c="15443">extension
    module.</st> <st c="15462">The latter uses only Bootstrap version 3.0, while</st>
    *<st c="15512">Bootstrap-Flask</st>* <st c="15527">can support up to</st> *<st
    c="15546">Bootstrap 5.0</st>*<st c="15559">. So, it is recommended to uninstall
    Flask-Bootstrap and other UI-related modules first before setting up Flask-Bootstrap
    to</st> <st c="15683">avoid unexpected conflicts.</st> <st c="15712">Allowing
    only Bootstrap-Flask to manage the UI designs can provide</st> <st c="15779">better
    results.</st>
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="15000">有几种方法可以将</st> <st c="15026">具有外观和感觉的上下文数据渲染到 Jinja2 模板中</st> <st
    c="15089">而不必过于担心下载资源文件或从</st> **<st c="15196">内容分发网络</st>** <st c="15220">(</st>**<st
    c="15222">CDN</st>**<st c="15225">) 存储库</st> <st c="15239">中引用静态文件并将它们导入模板页面以管理最佳的
    UI 设计来呈现。</st> <st c="15331">其中最理想和最及时</st> <st c="15368">的选项是</st> **<st c="15379">Bootstrap-Flask</st>**<st
    c="15394">，这是一个与</st> *<st c="15428">Flask-Bootstrap</st>* <st c="15443">扩展模块</st>
    <st c="15462">截然不同的模块。</st> <st c="15462">后者仅使用 Bootstrap 版本 3.0，而</st> *<st c="15512">Bootstrap-Flask</st>*
    <st c="15527">可以支持高达</st> *<st c="15546">Bootstrap 5.0</st>*<st c="15559">。因此，建议在设置
    Flask-Bootstrap 之前先卸载 Flask-Bootstrap 和其他 UI 相关模块，以避免意外冲突。</st> <st c="15683">仅允许
    Bootstrap-Flask 管理UI设计可以提供</st> <st c="15779">更好的结果。</st>
- en: <st c="15794">But first, let’s install</st> *<st c="15820">Bootstrap-Flask</st>*
    <st c="15835">by running the following</st> `<st c="15861">pip</st>` <st c="15864">command:</st>
  id: totrans-90
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="15794">但首先，让我们通过运行以下</st> *<st c="15820">Bootstrap-Flask</st>* <st c="15835">命令来安装它：</st>
    `<st c="15861">pip</st>` <st c="15864">命令：</st>
- en: '[PRE8]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="15901">Next, we’ll set up the Bootstrap module</st> <st c="15942">with
    the desired Bootstrap</st> <st c="15969">framework distribution.</st>
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="15901">接下来，我们将设置</st> <st c="15942">具有所需 Bootstrap</st> <st c="15969">框架发行版的</st>
    Bootstrap 模块。</st>
- en: <st c="15992">Setting up the UI module</st>
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="15992">设置 UI 模块</st>
- en: '<st c="16017">For the module to work with the Flask platform, it must be set
    up in the</st> `<st c="16091">main.py</st>` <st c="16098">module.</st> <st c="16107">The</st>
    `<st c="16111">bootstrap_flask</st>` <st c="16126">module has</st> `<st c="16138">Bootstrap4</st>`
    <st c="16148">and</st> `<st c="16153">Bootstrap5</st>` <st c="16163">core classes
    that must be wired to the Flask instance before we can apply the framework’s assets.</st>
    <st c="16262">An application can only use one</st> <st c="16294">Bootstrap distribution:
    our</st> `<st c="16322">ch04-web</st>` <st c="16330">application utilizes the</st>
    `<st c="16356">Bootstrap4</st>` <st c="16366">class to maintain consistency from</st>
    [*<st c="16402">Chapter 3</st>*](B19383_03.xhtml#_idTextAnchor076)<st c="16411">’s
    Bootstrap preference.</st> <st c="16437">The following</st> `<st c="16451">main.py</st>`
    <st c="16458">module instantiates</st> `<st c="16479">Bootstrap4</st>`<st c="16489">,
    which enables the</st> <st c="16509">extension module:</st>'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="16017">为了使模块与 Flask 平台协同工作，必须在</st> `<st c="16091">main.py</st>` <st
    c="16098">模块中</st> <st c="16107">设置。</st> `<st c="16111">bootstrap_flask</st>`
    <st c="16126">模块具有</st> `<st c="16138">Bootstrap4</st>` <st c="16148">和</st> `<st
    c="16153">Bootstrap5</st>` <st c="16163">核心类，必须在将框架的资产应用之前将它们连接到 Flask 实例。</st>
    <st c="16262">应用程序只能使用一个</st> <st c="16294">Bootstrap 发行版：我们的</st> `<st c="16322">ch04-web</st>`
    <st c="16330">应用程序使用</st> `<st c="16356">Bootstrap4</st>` <st c="16366">类来保持与</st>
    [*<st c="16402">第 3 章</st>*](B19383_03.xhtml#_idTextAnchor076)<st c="16411">的
    Bootstrap 偏好的一致性。</st> `<st c="16437">以下</st>` `<st c="16451">main.py</st>` <st
    c="16458">模块实例化</st> `<st c="16479">Bootstrap4</st>`<st c="16489">，这启用了</st> <st
    c="16509">扩展模块：</st>
- en: '[PRE9]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <!DOCTYPE html>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE html>
- en: <html lang="en">
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: <html lang="en">
- en: <head>
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: <head>
- en: <meta charset="utf-8" />
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <meta charset="utf-8" />
- en: <meta http-equiv="x-ua-compatible" content="ie=edge" />
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <meta http-equiv="x-ua-compatible" content="ie=edge" />
- en: <meta name="viewport" content="width=device-width, initial-scale=1" />
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <meta name="viewport" content="width=device-width, initial-scale=1" />
- en: <title>Online Complaint Management System</title> <st c="17622">{{ bootstrap.load_css()
    }}</st> </head>
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <title>在线投诉管理系统</title> <st c="17622">{{ bootstrap.load_css() }}</st> </head>
- en: <body>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <body>
- en: … … … … … … <st c="17675">{{ bootstrap.load_js() }}</st> </body>
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … … <st c="17675">{{ bootstrap.load_js() }}</st> </body>
- en: </html>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: </html>
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <body>
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: <body>
- en: <section class="<st c="18500">position-relative py-4 py-xl-5</st>">
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <section class="<st c="18500">position-relative py-4 py-xl-5</st>">
- en: <div class="<st c="18547">container position-relative</st>">
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18547">container position-relative</st>">
- en: <div class="<st c="18591">row mb-5</st>">
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18591">row mb-5</st>">
- en: <div class="<st c="18616">col-md-8 col-xl-6 text-center</st> <st c="18646">mx-auto</st>">
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18616">col-md-8 col-xl-6 text-center</st> <st c="18646">mx-auto</st>">
- en: <h2 class="<st c="18669">display-3</st>">User Login</h2>
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2 class="<st c="18669">display-3</st>">用户登录</h2>
- en: </div>
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <div class="<st c="18724">row d-flex justify-content-center</st>">
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18724">row d-flex justify-content-center</st>">
- en: <div class="<st c="18774">col-md-6 col-xl-4</st>">
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18774">col-md-6 col-xl-4</st>">
- en: <div class="<st c="18808">card</st>">
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18808">card</st>">
- en: <div class="<st c="18829">card-body text-center</st> <st c="18851">d-flex flex-column
    align-items-center</st>">
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="<st c="18829">card-body text-center</st> <st c="18851">d-flex flex-column
    align-items-center</st>">
- en: <form action="{{ request.path }}" method = "post">
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <form action="{{ request.path }}" method = "post">
- en: … … … … … …
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: </form>
  id: totrans-121
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </form>
- en: </div>
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-123
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-124
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-125
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </section>
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </section>
- en: … … … … … …
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: … … … … … …
- en: </body>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: </body>
- en: '[PRE11]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="22074">from flask_wtf import FlaskForm</st>
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22074">from flask_wtf import FlaskForm</st>
- en: <st c="22106">from wtforms import StringField, IntegerField, SelectField, DateField,
    EmailField</st>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="22106">from wtforms import StringField, IntegerField, SelectField, DateField,
    EmailField</st>
- en: '<st c="22188">from wtforms.validators import InputRequired, Length, Regexp,
    Email</st> class ComplainantForm(<st c="22279">FlaskForm</st>):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="22188">from wtforms.validators import InputRequired, Length, Regexp,
    Email</st> class ComplainantForm(<st c="22279">FlaskForm</st>):'
- en: 'id = <st c="22298">SelectField</st>(''Choose Login ID: '', validators=[InputRequired()])'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'id = <st c="22298">SelectField</st>(''选择登录 ID: '', validators=[InputRequired()])'
- en: firstname = <st c="22374">StringField</st>('Enter firstname:', validators=[InputRequired(),
    Length(max=50)])
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: firstname = <st c="22374">StringField</st>('输入名字:', validators=[InputRequired(),
    Length(max=50)])
- en: middlename = <st c="22466">StringField</st>('Enter middlename:', validators=[InputRequired(),
    Length(max=50)])
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: middlename = <st c="22466">StringField</st>('输入中间名:', validators=[InputRequired(),
    Length(max=50)])
- en: lastname = <st c="22557">StringField</st>('Enter lastname:', validators=[InputRequired(),
    Length(max=50)])
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: lastname = <st c="22557">StringField</st>('输入姓氏:', validators=[InputRequired(),
    Length(max=50)])
- en: email = <st c="22643">EmailField</st>('Enter email:', validators=[InputRequired(),
    Length(max=20), Email()])
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: email = <st c="22643">EmailField</st>('输入邮箱:', validators=[InputRequired(),
    Length(max=20), Email()])
- en: mobile = <st c="22735">StringField</st>('Enter mobile:', validators=[InputRequired(),
    Length(max=20), Regexp(regex=r"^(\+63)[-]{1}\d{3}
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: mobile = <st c="22735">StringField</st>('输入手机:', validators=[InputRequired(),
    Length(max=20), Regexp(regex=r"^(\+63)[-]{1}\d{3}
- en: '[-]{1}\d{3}[-]{1}\d{4}$", message="Valid phone number format is +63-xxx-xxx-xxxx")])'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[-]{1}\d{3}[-]{1}\d{4}$", message="有效的电话号码格式为 +63-xxx-xxx-xxxx")])'
- en: address = <st c="22939">StringField</st>('Enter address:', validators=[InputRequired(),
    Length(max=100)])
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: address = <st c="22939">StringField</st>('输入地址:', validators=[InputRequired(),
    Length(max=100)])
- en: zipcode = <st c="23027">IntegerField</st>('Enter zip code:',  validators=[InputRequired()])
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: zipcode = <st c="23027">IntegerField</st>('输入邮编:',  validators=[InputRequired()])
- en: status = <st c="23099">SelectField</st>('Enter status:', choices=[('active',
    'ACTIVE'),
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: status = <st c="23099">SelectField</st>('输入状态:', choices=[('active', 'ACTIVE'),
- en: ('inactive','INACTIVE'), ('blocked','BLOCKED')], validators=[InputRequired()])
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ('无效', 'INACTIVE'), ('已阻止', 'BLOCKED')], validators=[InputRequired()])
- en: 'date_registered = <st c="23348">firstname</st>, <st c="23359">middlename</st>,
    <st c="23371">lastname</st>, and <st c="23385">address</st> are input-type text
    boxes with varying lengths and are required form parameters. For specific input
    types, <st c="23500">date_registered</st> is a required form parameter of the
    <st c="23552">Date</st> type with a date format of <st c="23584">yyyy-mm-dd</st>,
    while <st c="23602">email</st> is an email-type text box. On the other hand, the
    <st c="23658">status</st> and <st c="23669">id</st> form parameters are combo
    boxes, but the difference is the absence of options in <st c="23753">id</st>.
    The <st c="23761">status</st> form parameter has its <st c="23791">choices</st>
    options already defined in the form, while in the <st c="23849">id</st> form parameter,
    the view function will populate these fields at runtime. The following is a snippet
    of the <st c="23959">add_complainant()</st> view that manages the <st c="23999">id</st>
    parameter’s options:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: date_registered = <st c="23348">firstname</st>，<st c="23359">middlename</st>，<st
    c="23371">lastname</st>和<st c="23385">address</st>是具有不同长度的输入类型文本框，是必填表单参数。对于特定的输入类型，<st
    c="23500">date_registered</st>是<st c="23552">Date</st>类型的必填表单参数，日期格式为<st c="23584">yyyy-mm-dd</st>，而<st
    c="23602">email</st>是电子邮件类型文本框。另一方面，<st c="23658">status</st>和<st c="23669">id</st>表单参数是组合框，但不同的是<st
    c="23753">id</st>中没有选项。<st c="23761">status</st>表单参数的<st c="23791">choices</st>选项已经在表单中定义，而在<st
    c="23849">id</st>表单参数中，视图函数将在运行时填充这些字段。以下是一个管理<st c="23959">add_complainant()</st>视图的<st
    c="23999">id</st>参数选项的代码片段：
- en: '[PRE12]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: <st c="24997">The preceding view accesses the</st> `<st c="25030">choices</st>`
    <st c="25037">parameter of the</st> `<st c="25055">id</st>` <st c="25057">form
    parameter to assign it with a list of</st> `<st c="25101">(id, username) Tuple</st>`<st
    c="25121">, with</st> `<st c="25128">username</st>` <st c="25136">as the label
    and</st> `<st c="25154">id</st>` <st c="25156">as</st> <st c="25160">its value.</st>
  id: totrans-147
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="24997">前面的视图访问了</st> `<st c="25030">choices</st>` <st c="25037">参数的</st>
    `<st c="25055">id</st>` <st c="25057">表单参数，将其分配给一个包含</st> `<st c="25101">(id,
    username) Tuple</st>`<st c="25121">的列表，其中<st c="25128">username</st>作为标签，<st c="25136">id</st>作为其值。
- en: <st c="25170">On the other hand, the HTTP POST transaction of the</st> `<st
    c="25223">add_complainant()</st>` <st c="25240">view will verify form validation
    errors after submission through the</st> `<st c="25310">form</st>` <st c="25314">parameter’s</st>
    `<st c="25327">validate_on_submit()</st>`<st c="25347">. If there is none, the
    view function will extract all form data from the</st> `<st c="25421">form</st>`
    <st c="25425">object, insert the</st> <st c="25444">complaint details into the
    database, and render a list of all complainants.</st> <st c="25521">Otherwise,
    it will return the form page with the submitted</st> `<st c="25580">ComplainantForm</st>`
    <st c="25595">instance with form data values.</st> <st c="25628">Now that we’ve
    implemented the form models and the view functions that manage them, we can focus
    on how to map these models to their respective</st> `<st c="25772"><form></st>`
    <st c="25778">tags using</st> <st c="25790">Jinja2 templates.</st>
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="25170">另一方面，<st c="25223">add_complainant()</st> <st c="25240">视图的HTTP
    POST事务将在提交后通过</st> `<st c="25310">form</st>` <st c="25314">参数的</st> `<st c="25327">validate_on_submit()</st>`<st
    c="25347">验证表单验证错误。如果没有错误，视图函数将提取所有表单数据从</st> `<st c="25421">form</st>` <st c="25425">对象，将</st>
    <st c="25444">投诉详情插入数据库，并渲染所有投诉者的列表。</st> <st c="25521">否则，它将返回带有提交的</st> `<st
    c="25580">ComplainantForm</st>` <st c="25595">实例和表单数据值的表单页面。</st> <st c="25628">现在我们已经实现了表单模型和管理的视图函数，我们可以专注于如何使用Jinja2模板将这些模型映射到它们各自的</st>
    `<st c="25772"><form></st>` <st c="25778">标签。
- en: <st c="25807">Rendering the forms</st>
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="25807">渲染表单</st>
- en: <st c="25827">Before returning the WTF form model to the Jinja2 template, the
    view function must access and instantiate the FlaskForm sub-class, and even populate
    some fields with values in preparation for the</st> `<st c="26024"><form></st>`
    <st c="26030">mapping.</st> <st c="26040">Assigning the model form with the appropriate
    values can avoid Jinja2 errors during</st> `<st c="26124"><</st>``<st c="26125">form></st>`
    <st c="26130">loading.</st>
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在将WTF表单模型返回到Jinja2模板之前，视图函数必须访问并实例化FlaskForm子类，甚至用值填充一些字段以准备</st> `<st c="26024"><form></st>`
    <st c="26030">映射。</st> <st c="26040">将模型表单与适当的值关联可以避免在</st> `<st c="26124"><</st>``<st
    c="26125">form></st>` <st c="26130">加载时出现Jinja2错误。
- en: <st c="26139">Now, the form rendition happens</st> <st c="26172">only when there
    is an</st> *<st c="26194">HTTP GET</st>* <st c="26202">request for form loading
    or when an HTTP POST encounters validation errors during submission, requiring
    the form page that’s showing the current values and the error status to be reloaded.</st>
    <st c="26392">The type of HTTP request determines what values to assign to the
    form model’s fields before rendering the form.</st> <st c="26504">Thus, in the
    given</st> `<st c="26523">add_complainant()</st>` <st c="26540">view, checking
    if</st> `<st c="26559">request.method</st>` <st c="26573">is a</st> *<st c="26579">GET</st>*
    <st c="26582">request means verifying when to render the</st> `<st c="26626">complainant_add.html</st>`
    <st c="26646">form template with the</st> `<st c="26670">ComplainantForm</st>`
    <st c="26685">instance with base or initialized values.</st> <st c="26728">Otherwise,
    it will be a rendition of a</st> <st c="26766">form page with the current form
    values and</st> <st c="26810">validation errors.</st>
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="26139">现在，表单渲染仅在存在</st> <st c="26172">HTTP GET</st> <st c="26202">请求以加载表单或当HTTP
    POST在提交过程中遇到验证错误时发生，需要重新加载显示当前值和错误状态的表单页面。</st> <st c="26392">HTTP请求的类型决定了在渲染表单之前将哪些值分配给表单模型的字段。</st>
    <st c="26504">因此，在给定的</st> `<st c="26523">add_complainant()</st>` <st c="26540">视图中，检查</st>
    `<st c="26559">request.method</st>` <st c="26573">是否为</st> *<st c="26579">GET</st>
    <st c="26582">请求意味着验证何时使用具有基础或初始化值的</st> `<st c="26626">complainant_add.html</st>`
    <st c="26646">表单模板和</st> `<st c="26670">ComplainantForm</st>` <st c="26685">实例进行渲染。</st>
    <st c="26728">否则，它将是一个渲染当前表单值和</st> <st c="26810">验证错误的表单页面。</st>
- en: <st c="26828">The following</st> `<st c="26843">complainant_add.html</st>` <st
    c="26863">page maps the</st> `<st c="26878">ComplainantForm</st>` <st c="26893">fields,
    with base or current values, to the</st> `<st c="26938"><</st>``<st c="26939">form></st>`
    <st c="26944">tag:</st>
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="26828">以下</st> `<st c="26843">complainant_add.html</st>` <st c="26863">页面将</st>
    `<st c="26878">ComplainantForm</st>` <st c="26893">字段，包括基础或当前值，映射到</st> `<st c="26938"><</st>``<st
    c="26939">form></st>` <st c="26944">标签：
- en: '[PRE13]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="27710">Binding the individual model field to</st> `<st c="27749"><form></st>`
    <st c="27755">requires calling the property of the field – for example,</st> `<st
    c="27814">context_name.field()</st>`<st c="27834">. So, to render the</st> `<st
    c="27854">firstname</st>` <st c="27863">form field of</st> `<st c="27878">ComplainantForm</st>`<st
    c="27893">, for instance, the Jinja2 template must call</st> `<st c="27939">form.firstname()</st>`
    <st c="27955">inside the</st> `<st c="27967">{{}}</st>` <st c="27971">statement.</st>
    <st c="27983">The method call can also include its</st> `<st c="28020">kwargs</st>`
    <st c="28026">or</st> *<st c="28030">keyword arguments</st>* <st c="28047">of
    widget</st> <st c="28058">properties, such as</st> `<st c="28078">size</st>`<st
    c="28082">,</st> `<st c="28084">placeholder</st>`<st c="28095">, and</st> `<st
    c="28101">class</st>`<st c="28106">, if there is a change in the default widget
    settings during the rendition.</st> <st c="28182">As shown in the template, the</st>
    *<st c="28212">Flask-WTF</st>* <st c="28221">widgets support the Bootstrap components
    provided by the</st> *<st c="28279">Bootstrap-Flask</st>* <st c="28294">module
    extension.</st> <st c="28313">Adding custom CSS styles is also feasible with widgets,
    so long the CSS properties are set in the</st> <st c="28411">widget’s</st> `<st
    c="28420">kwargs</st>`<st c="28426">.</st>
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="27710">将单个模型字段绑定到</st> `<st c="27749"><form></st>` <st c="27755">需要调用字段的属性
    - 例如，</st> `<st c="27814">context_name.field()</st>`<st c="27834">。因此，要渲染</st>
    `<st c="27854">firstname</st>` <st c="27863">表单字段</st> `<st c="27878">ComplainantForm</st>`<st
    c="27893">，例如，Jinja2模板必须在</st> `<st c="27939">form.firstname()</st>` <st c="27955">内部调用</st>
    `<st c="27967">{{}}</st>` <st c="27971">语句。</st> <st c="27983">方法调用还可以包括其</st>
    `<st c="28020">kwargs</st>` <st c="28026">或</st> *<st c="28030">关键字参数</st>* <st
    c="28047">的小部件属性，例如</st> `<st c="28078">size</st>`<st c="28082">，</st> `<st c="28084">placeholder</st>`<st
    c="28095">，和</st> `<st c="28101">class</st>`<st c="28106">，如果在渲染过程中小部件的默认设置发生了变化。</st>
    <st c="28182">如模板所示，</st> *<st c="28212">Flask-WTF</st>* <st c="28221">小部件支持由</st>
    *<st c="28279">Bootstrap-Flask</st>* <st c="28294">模块扩展提供的Bootstrap组件。</st> <st
    c="28313">使用小部件添加自定义CSS样式也是可行的，只要CSS属性设置在小部件的</st> <st c="28411">kwargs</st><st
    c="28426">中。</st>
- en: <st c="28427">Now, let’s explore if Flask can secure</st> <st c="28466">form
    transactions from</st> **<st c="28490">cross-site request forgery</st>** <st c="28516">(</st>**<st
    c="28518">CSRF</st>**<st c="28522">) problems like in</st> <st c="28542">Django’s
    forms.</st>
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，让我们探讨Flask是否可以像Django的表单一样，防止来自**跨站请求伪造** <st c="28427">（CSRF）问题。</st>
- en: <st c="28557">Applying CSRF</st>
  id: totrans-156
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 应用CSRF
- en: <st c="28571">Flask-WTF has built-in CSRF</st> <st c="28599">support through
    its</st> `<st c="28620">csrf_token</st>` <st c="28630">generation.</st> <st c="28643">To</st>
    <st c="28646">enable CSRF through Flask-WTF, instantiate</st> `<st c="28689">CSRFProtect</st>`
    <st c="28700">from the</st> `<st c="28710">flask_wtf</st>` <st c="28719">module
    in</st> `<st c="28730">main.py</st>`<st c="28737">, as shown in the</st> <st c="28755">following
    snippet:</st>
  id: totrans-157
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: Flask-WTF通过其`<st c="28571">csrf_token</st>` <st c="28599">生成内置了CSRF支持。</st>
    <st c="28643">要</st> <st c="28646">通过Flask-WTF启用CSRF，在`<st c="28689">CSRFProtect</st>`
    <st c="28700">从`<st c="28710">flask_wtf</st>` <st c="28719">模块中实例化`<st c="28730">main.py</st>`<st
    c="28737">，如下面的代码片段所示：</st>
- en: '[PRE14]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'class ComplainantForm(FlaskForm):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'class ComplainantForm(FlaskForm):'
- en: … … … … … …
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: zipcode = IntegerField('Enter zip code:',  validators=[InputRequired()])
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: zipcode = IntegerField('输入邮编:', validators=[InputRequired()])
- en: … … … … … …
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: 'def validate_<st c="31902">zipcode</st>(self, <st c="31918">zipcode</st>):'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def validate_<st c="31902">zipcode</st>(self, <st c="31918">zipcode</st>):'
- en: 'if not len(str(zipcode.data)) == 4: <st c="32044">FlaskForm</st> function with
    the method name prefixed with <st c="32098">validate_</st>, followed by the form
    field name it validates, that takes that form field as a parameter. The given
    <st c="32208">validate_zipcode()</st> checks whether the form field’s <st c="32259">zipcode</st>
    checks if the input is a four-number value. Otherwise, it throws an exception
    class. Another approach is to implement validators as *<st c="32399">typical FlaskForm
    functions</st>*, but the validator function needs to be injected explicitly into
    the <st c="32496">validators</st> parameter of the field it validates.'
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '如果`zipcode.data`字符串的长度不等于4: FlaskForm函数，其方法名以`validate_`为前缀，后跟它验证的表单字段名称，该字段作为参数传递。给定的`validate_zipcode()`检查表单字段的`zipcode`是否为四位数字值。如果不是，它将抛出一个异常类。另一种方法是实现验证器作为*典型FlaskForm函数*，但验证器函数需要显式地注入到它验证的字段的`validators`参数中。'
- en: <st c="32543">Lastly,</st> *<st c="32552">a closure-like or callable approach</st>*
    <st c="32587">to validator implementation is also possible.</st> <st c="32634">Here</st>
    `<st c="32639">disallow_invalid_dates()</st>` <st c="32663">is a closure-type
    validator that does not allow date input before the</st> <st c="32734">given</st>
    `<st c="32740">date_after</st>`<st c="32750">:</st>
  id: totrans-165
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最后，*类似闭包或可调用的方法* <st c="32543">用于验证器的实现也是可能的。</st> <st c="32634">在这里</st> `<st
    c="32639">disallow_invalid_dates()</st>` <st c="32663">是一个不允许在给定</st> `<st c="32734">date_after</st>`
    <st c="32750">之前的日期输入的闭包类型验证器。</st>
- en: '[PRE15]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '<st c="34466">from flask_restful import Resource</st> class ListComplaintRestAPI(<st
    c="34529">Resource</st>): <st c="34542">def get(self):</st> repo = ComplaintRepository(db_session)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="34466">from flask_restful import Resource</st> class ListComplaintRestAPI(<st
    c="34529">资源</st>): <st c="34542">def get(self):</st> repo = ComplaintRepository(db_session)'
- en: records = repo.select_all()
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: records = repo.select_all()
- en: complaint_rec = [rec.to_json() for rec in records]
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: complaint_rec = [rec.to_json() for rec in records]
- en: return make_response(jsonify(complaint_rec), 201)
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(jsonify(complaint_rec), 201)
- en: '[PRE16]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'class AddComplaintRestAPI(<st c="35133">Resource</st>): <st c="35146">def post(self):</st>
    complaint_json = request.get_json()'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'class AddComplaintRestAPI(<st c="35133">资源</st>): <st c="35146">def post(self):</st>
    complaint_json = request.get_json()'
- en: repo = ComplaintRepository(db_session)
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = ComplaintRepository(db_session)
- en: complaint = Complaint(**complaint_json)
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: complaint = Complaint(**complaint_json)
- en: result = repo.insert(complaint)
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.insert(complaint)
- en: 'if result:'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(complaint_json)
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(complaint_json)
- en: return make_response(content, 201)
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 201)
- en: 'else:'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: content = jsonify(message="insert complaint record encountered a problem")
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(message="插入投诉记录时遇到问题")
- en: return make_response(content, 500)
  id: totrans-181
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 500)
- en: '[PRE17]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'class UpdateComplainantRestAPI(<st c="35786">Resource</st>): <st c="35799">def
    patch(self, id):</st> complaint_json = request.get_json()'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 'class UpdateComplainantRestAPI(<st c="35786">资源</st>): <st c="35799">def patch(self,
    id):</st> complaint_json = request.get_json()'
- en: repo = ComplaintRepository(db_session)
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = ComplaintRepository(db_session)
- en: result = repo.update(id, complaint_json)
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.update(id, complaint_json)
- en: 'if result:'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(complaint_json)
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-189
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="update complainant ID encountered a problem")
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'class DeleteComplaintRestAPI(<st c="36530">Resource</st>): <st c="36543">def
    delete(self, id):</st> repo = ComplaintRepository(db_session)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: result = repo.delete(id)
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message=f'complaint {id} deleted')
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="delete complaint record encountered a problem")
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'class UpdateComplaintRestAPI(<st c="36983">Resource</st>): <st c="36996">def
    put(self):</st> complaint_json = request.get_json()'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: repo = ComplaintRepository(db_session)
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.update(complaint_json['id'], complaint_json)
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(complaint_json)
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="update complaint record encountered a problem")
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="37739">from flask import Blueprint</st>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37767">from flask_restful import Api</st>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: <st c="37797">complaint_bp</st> = Blueprint('complaint_bp', __name__)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: from modules.complaint.api.complaint import AddComplaintRestAPI, ListComplaintRestAPI,
    UpdateComplainantRestAPI, UpdateComplaintRestAPI, DeleteComplaintRestAPI
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … … <st c="38021">api = Api(complaint_bp)</st> api.<st c="38049">add_resource</st>(<st
    c="38064">AddComplaintRestAPI</st>, '/complaint/add', endpoint='add_complaint')
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38133">add_resource</st>(<st c="38148">ListComplaintRestAPI</st>,
    '/complaint/list/all', endpoint='list_all_complaint')
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38228">add_resource</st>(<st c="38243">UpdateComplainantRestAPI</st>,
    '/complaint/update/complainant/<int:id>', endpoint='update_complainant')
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38346">add_resource</st>(<st c="38361">UpdateComplaintRestAPI</st>,
    '/complaint/update', endpoint='update_complaint')
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: api.<st c="38541">Api</st> class has an <st c="38558">add_resource()</st> method
    that maps every resource to its *<st c="38612">URL pattern</st>* and *<st c="38628">endpoint</st>*
    or *<st c="38640">view function name</st>*. This script shows how all the complaint
    module’s resource classes are injected into the platform as full-fledged API endpoints.
    Conflicts on endpoint names and URLs within and outside the blueprint modules
    will cause compile-time errors, so all details must be unique to each resource.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38945">The next module extension,</st> *<st c="38973">Flask-Session</st>*<st
    c="38986">, provides Flask with a better session-handling solution than its</st>
    <st c="39052">built-in implementation.</st>
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="39076">Implementing session handling with Flask-Session</st>
  id: totrans-222
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="39125">The</st> **<st c="39130">Flask-Session</st>** <st c="39143">module,
    like Flask’s built-in session, is easy to configure and use, except the module
    extension does not</st> <st c="39249">store session</st> <st c="39263">data in
    the</st> <st c="39276">web browser.</st>
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="39288">Before you can configure this module, you must install it using
    the</st> `<st c="39357">pip</st>` <st c="39360">command:</st>
  id: totrans-224
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: <st c="39395">Then, import the</st> `<st c="39413">Session</st>` <st c="39420">class
    into the</st> `<st c="39436">main.py</st>` <st c="39443">module to instantiate
    and integrate the extension module into the Flask platform.</st> <st c="39526">The
    following</st> `<st c="39540">main.py</st>` <st c="39547">snippet shows the configuration</st>
    <st c="39580">of</st> *<st c="39583">Flask-Session</st>*<st c="39596">:</st>
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: SESSION_LIFETIME = true <st c="40966">SESSION_TYPE = "filesystem"</st> SESSION_FILE_THRESHOLD
    = 600
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: SESSION_PERMANENT = true
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: from flask import session
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '@login_bp.route(''/login/auth'', methods=[''GET'', ''POST''])'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'def login_db_auth():'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: authForm:LoginAuthForm = LoginAuthForm()
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if authForm.validate_on_submit():'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = LoginRepository(db_session)
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: username = authForm.username.data
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  id: totrans-239
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if user == None:'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login.html', form=authForm) , 500
  id: totrans-241
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'elif not user.password == password:'
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login.html', form=authForm) , 500
  id: totrans-243
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else: <st c="42189">session[''username''] = request.form[''username'']</st>
    return redirect(''/ch04/login/add'')'
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login.html', form=authForm) , 500
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: pip install flask-caching
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: <st c="43320">CACHE_TYPE = "FileSystemCache"</st> CACHE_DEFAULT_TIMEOUT = 300
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: CACHE_DIR = "./cache_dir/"
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: CACHE_THRESHOLD = 800
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: <st c="43975">from main_cache import cache</st> app = Flask(__name__, template_folder='pages',
    static_folder="resources")
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 'app.config.from_file(''config-dev.toml'', toml.load) <st c="44296">cache_dir</st>
    must be created inside the main folder, as shown in *<st c="44358">Figure 4</st>**<st
    c="44366">.8</st>*:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 4.8 – The cache files in cache_dir](img/B19383_04_8.jpg)'
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="44449">Figure 4.8 – The cache files in cache_dir</st>
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44490">If the setup is successful, components can now access</st> `<st
    c="44545">main_cache.py</st>` <st c="44558">for the cache instance.</st> <st c="44583">It
    has a</st> `<st c="44592">cached()</st>` <st c="44600">decorator that can provide
    caching for various functions.</st> <st c="44659">First, it can cache views, usually
    with an HTTP</st> *<st c="44707">GET</st>* <st c="44710">request to retrieve bulk
    records from the database.</st> <st c="44763">The following view function from
    the</st> `<st c="44800">complainant.py</st>` <st c="44814">module of the</st>
    `<st c="44829">ch04-web</st>` <st c="44837">application caches all its results
    to</st> `<st c="44876">cache_dir</st>` <st c="44885">for</st> <st c="44890">optimal
    performance:</st>
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <st c="45251">The exact area to decorate</st> <st c="45278">the</st> `<st c="45283">cached()</st>`
    <st c="45291">decorator is between the</st> <st c="45316">function definition
    and the route decorator of the view function.</st> <st c="45383">The decorator
    needs</st> `<st c="45403">key_prefix</st>` <st c="45413">to generate</st> `<st
    c="45426">cache_key</st>`<st c="45435">. If not specified,</st> *<st c="45455">Flask-Caching</st>*
    <st c="45468">will use the default</st> `<st c="45490">request.path</st>` <st
    c="45502">as the</st> `<st c="45510">cache_key</st>` <st c="45519">value.</st>
    <st c="45527">Note that</st> `<st c="45537">cache_key</st>` <st c="45546">is the
    key that’s used to access the cached value of the function and is solely for the
    module to access.</st> <st c="45653">The given</st> `<st c="45663">list_all_complainant()</st>`
    <st c="45685">caches the rendered list of complaints with</st> `<st c="45730">prefix_key</st>`
    <st c="45740">set</st> <st c="45745">to</st> `<st c="45748">all_complaints</st>`<st
    c="45762">.</st>
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="45251">要装饰</st> `<st c="45283">cached()</st>` <st c="45291">装饰器的确切位置</st>
    <st c="45316">在函数定义和视图函数的路由装饰器之间。</st> <st c="45383">装饰器需要</st> `<st c="45403">key_prefix</st>`
    <st c="45413">来生成</st> `<st c="45426">cache_key</st>`<st c="45435">。如果没有指定，*<st
    c="45455">Flask-Caching</st>* <st c="45468">将使用默认的</st> `<st c="45490">request.path</st>`
    <st c="45502">作为</st> `<st c="45510">cache_key</st>` <st c="45519">值。</st> <st
    c="45527">请注意</st> `<st c="45537">cache_key</st>` <st c="45546">是用于访问函数缓存的值的键，并且仅用于模块访问。</st>
    <st c="45653">给定的</st> `<st c="45663">list_all_complainant()</st>` <st c="45685">使用</st>
    `<st c="45730">prefix_key</st>` <st c="45740">设置为</st> `<st c="45748">all_complaints</st>`<st
    c="45762">来缓存渲染的投诉列表。</st>
- en: <st c="45763">Moreover, the endpoint functions of the resource-based API created
    by Flask-RESTful can also cache their returned values through the</st> `<st c="45897">@cached()</st>`
    <st c="45906">decorator.</st> <st c="45918">The following code shows</st> `<st
    c="45943">ListComplaintDetailsRestAPI</st>` <st c="45970">from the</st> `<st c="45980">ch04-api</st>`
    <st c="45988">application, which caches the list of</st> `<st c="46027">ComplaintDetails</st>`
    <st c="46043">records</st> <st c="46052">into</st> `<st c="46057">cache_dir</st>`<st
    c="46066">:</st>
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="45763">此外，由 Flask-RESTful 创建的资源型 API 的端点函数也可以通过</st> `<st c="45897">@cached()</st>`
    <st c="45906">装饰器</st> <st c="45918">缓存它们的返回值。</st> <st c="45918">以下代码展示了</st>
    `<st c="45943">ListComplaintDetailsRestAPI</st>` <st c="45970">来自</st> `<st c="45980">ch04-api</st>`
    <st c="45988">应用程序，它将</st> `<st c="46027">ComplaintDetails</st>` <st c="46043">记录的列表</st>
    <st c="46052">缓存到</st> `<st c="46057">cache_dir</st>`<st c="46066">：</st>
- en: '[PRE28]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <st c="46333">As shown in the preceding code snippet, the decorator is placed
    above the overridden method of the</st> `<st c="46433">Resource</st>` <st c="46441">class.</st>
    <st c="46449">This rule is also valid with the other</st> <st c="46488">class-based
    views.</st>
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46333">如前述代码片段所示，装饰器放置在</st> `<st c="46433">Resource</st>` <st c="46441">类的覆盖方法之上。</st>
    <st c="46449">此规则也适用于其他</st> <st c="46488">基于类的视图。</st>
- en: <st c="46506">The module can also cache repository and</st> <st c="46547">service
    functions that retrieve large amounts of data during user access.</st> <st c="46622">The</st>
    <st c="46625">following code shows a</st> `<st c="46649">select_all()</st>` <st
    c="46661">function that retrieves data from the</st> `<st c="46700">login</st>`
    <st c="46705">table:</st>
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46506">该模块还可以缓存在用户访问期间检索大量数据的存储库和</st> <st c="46547">服务函数。</st> <st c="46622">以下代码展示了</st>
    `<st c="46649">select_all()</st>` <st c="46661">函数，该函数从</st> `<st c="46700">login</st>`
    <st c="46705">表中检索数据：</st>
- en: '[PRE29]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <st c="46974">Moreover, the module also supports the</st> *<st c="47014">memoization</st>*
    <st c="47025">process to store values, similar to caching, but for custom functions
    that are frequently accessed.</st> <st c="47126">The</st> `<st c="47130">cache</st>`
    <st c="47135">instance has a</st> `<st c="47151">memoize()</st>` <st c="47160">decorator
    that manages these functions to improve performance.</st> <st c="47224">The following
    code shows the</st> `<st c="47253">@memoize</st>` <st c="47261">decorated method</st>
    <st c="47279">of</st> `<st c="47282">ComplaintRepository</st>`<st c="47301">:</st>
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，该模块还支持<st c="46974">存储值的过程</st> *<st c="47014">记忆化</st>* <st c="47025">，类似于缓存，但用于频繁访问的自定义函数。</st>
    <st c="47126">缓存</st> <st c="47130">实例有一个</st> <st c="47135">memoize()</st> <st
    c="47151">装饰器</st> <st c="47160">来管理这些函数以提高性能。</st> <st c="47224">以下代码展示了</st>
    `<st c="47253">@memoize</st>` <st c="47261">装饰的</st> `<st c="47279">方法</st> <st
    c="47282">ComplaintRepository</st>`<st c="47301">：</st>
- en: '[PRE30]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: <st c="47533">The given</st> `<st c="47544">select_all()</st>` <st c="47556">method
    will cache all the queried records for 50 seconds to improve its data retrieval
    performance.</st> <st c="47657">To clear the</st> <st c="47670">caches after server
    startup, always call</st> `<st c="47711">cache.clear()</st>` <st c="47724">in
    the</st> `<st c="47732">main.py</st>` <st c="47739">module</st> <st c="47746">after</st>
    <st c="47753">blueprint registration.</st>
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47533">给定的</st> `<st c="47544">select_all()</st>` <st c="47556">方法将缓存所有查询记录50秒以提高其数据检索性能。</st>
    <st c="47657">为了在服务器启动后清除缓存，始终在</st> `<st c="47711">cache.clear()</st>` <st c="47724">在</st>
    `<st c="47732">main.py</st>` <st c="47739">模块</st> <st c="47746">在</st> `<st c="47753">蓝图注册</st>》之后调用。</st>
- en: <st c="47776">To be able to send complaints through emails, let’s showcase a
    popular extension module</st> <st c="47865">called</st> *<st c="47872">Flask-Mail</st>*<st
    c="47882">.</st>
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47776">为了能够通过电子邮件发送投诉，让我们展示一个流行的扩展模块</st> <st c="47865">称为</st> *<st
    c="47872">Flask-Mail</st>*<st c="47882">。</st>
- en: <st c="47883">Adding mail features using Flask-Mail</st>
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47883">使用 Flask-Mail 添加邮件功能</st>
- en: '**<st c="47921">Flask-Mail</st>** <st c="47932">is an extension module that</st>
    <st c="47960">handles sending emails to an email server without too</st> <st c="48015">much
    configuration.</st>'
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**<st c="47921">Flask-Mail</st>** <st c="47932">是一个扩展模块，用于在不进行太多配置的情况下向电子邮件服务器发送邮件。</st>
    <st c="48015">它处理发送邮件到电子邮件服务器，无需太多配置。</st>'
- en: <st c="48034">First, install the</st> `<st c="48054">flask-mail</st>` <st c="48064">module
    using the</st> `<st c="48082">pip</st>` <st c="48085">command:</st>
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="48034">首先，使用</st> `<st c="48054">flask-mail</st>` <st c="48064">模块通过</st>
    `<st c="48082">pip</st>` <st c="48085">命令安装：</st>
- en: '[PRE31]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: <st c="48117">Then, create a separate module script, such as</st> `<st c="48165">mail_config.py</st>`<st
    c="48179">, to instantiate the</st> `<st c="48200">Mail</st>` <st c="48204">class.</st>
    <st c="48212">This approach solves the cyclic collisions that occur when views
    or endpoint functions access the</st> `<st c="48310">mail</st>` <st c="48314">instance
    for the</st> <st c="48332">utility methods.</st>
  id: totrans-274
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="48117">然后，创建一个单独的模块脚本，例如</st> `<st c="48165">mail_config.py</st>`<st
    c="48179">，以实例化</st> `<st c="48200">Mail</st>` <st c="48204">类。</st> <st c="48212">这种方法解决了当视图或端点函数访问</st>
    `<st c="48310">mail</st>` <st c="48314">实例以进行实用方法时发生的循环冲突。</st>
- en: <st c="48348">Despite the separate module, the</st> `<st c="48382">main.py</st>`
    <st c="48389">module still needs to access the</st> `<st c="48423">mail</st>`
    <st c="48427">instance to integrate the module into the Flask platform.</st> <st
    c="48486">The following</st> `<st c="48500">main.py</st>` <st c="48507">snippet
    shows how to set up the</st> *<st c="48540">Flask-Mail</st>* <st c="48550">module</st>
    <st c="48558">with Flask:</st>
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="48348">尽管有一个独立的模块，但</st> `<st c="48382">main.py</st>` <st c="48389">模块仍然需要访问</st>
    `<st c="48423">mail</st>` <st c="48427">实例，以便将模块集成到 Flask 平台。</st> <st c="48486">以下</st>
    `<st c="48500">main.py</st>` <st c="48507">代码片段显示了如何使用 Flask 设置</st> *<st c="48540">Flask-Mail</st>*
    <st c="48550">模块</st> <st c="48558">：</st>
- en: '[PRE32]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: <st c="48742">Afterward, the setup requires some configuration variables to
    be set in the config file.</st> <st c="48832">The following configuration</st>
    <st c="48860">variables are the most essential settings for our applications in</st>
    <st c="48926">this chapter:</st>
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="48742">之后，设置需要将一些配置变量设置在配置文件中。</st> <st c="48832">以下配置</st> <st c="48860">变量是本章中我们应用程序的最基本设置：</st>
- en: '[PRE33]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: <st c="49100">These details pertain to a</st> *<st c="49128">Gmail</st>* <st
    c="49133">account, but you can replace them with</st> *<st c="49173">Yahoo!</st>*
    <st c="49179">account details.</st> <st c="49197">Preferably,</st> `<st c="49209">MAIL_USE_SSL</st>`
    <st c="49221">must be set to</st> `<st c="49237">true</st>`<st c="49241">. Note
    that</st> `<st c="49253">MAIL_PASSWORD</st>` <st c="49266">is a token that’s generated
    from the</st> *<st c="49304">app password</st>* <st c="49316">of the email account
    and not the actual one to establish a secure connection to the mail server.</st>
    <st c="49414">After server startup, Flask-Mail is ready to use if there are no</st>
    <st c="49479">compiler errors.</st>
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49100">这些详细信息适用于一个</st> *<st c="49128">Gmail</st>* <st c="49133">账户，但您可以用</st>
    *<st c="49173">Yahoo!</st>* <st c="49179">账户的详细信息替换它们。</st> <st c="49197">最好</st>
    `<st c="49209">MAIL_USE_SSL</st>` <st c="49221">设置为</st> `<st c="49237">true</st>`<st
    c="49241">。请注意，</st> `<st c="49253">MAIL_PASSWORD</st>` <st c="49266">是从电子邮件账户的</st>
    *<st c="49304">应用密码</st>* <st c="49316">生成的令牌，而不是实际密码，以建立与邮件服务器的安全连接。</st> <st
    c="49414">服务器启动后，如果没有</st> <st c="49479">编译错误，Flask-Mail 即可使用。</st>
- en: <st c="49495">The following</st> `<st c="49510">email_complaint()</st>` <st
    c="49527">view function uses the</st> `<st c="49551">mail</st>` <st c="49555">instance
    to send a complaint through the</st> *<st c="49597">Flask-WTF</st>* <st c="49606">and</st>
    *<st c="49611">Flask-Mail</st>* <st c="49621">extension modules:</st>
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49495">以下</st> `<st c="49510">email_complaint()</st>` <st c="49527">视图函数使用</st>
    `<st c="49551">mail</st>` <st c="49555">实例通过</st> *<st c="49597">Flask-WTF</st>*
    <st c="49606">和</st> *<st c="49611">Flask-Mail</st>* <st c="49621">扩展模块发送投诉：</st>
- en: '[PRE34]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: <st c="50306">Here,</st> `<st c="50313">EmailComplaintForm</st>` <st c="50331">provides</st>
    <st c="50341">details for the</st> `<st c="50357">Message()</st>` <st c="50366">attributes,
    except for the sender, which is the email address that’s assigned to the</st>
    `<st c="50452">MAIL_USERNAME</st>` <st c="50465">configuration variable.</st>
    <st c="50490">The</st> `<st c="50494">mail</st>` <st c="50498">instance provides
    the</st> `<st c="50521">send()</st>` <st c="50527">utility method to send the
    message to</st> <st c="50566">the recipient(s).</st>
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50306">在此处，</st> `<st c="50313">EmailComplaintForm</st>` <st c="50331">为</st>
    `<st c="50357">Message()</st>` <st c="50366">属性提供详细信息，除了发送者，这是分配给</st> `<st c="50452">MAIL_USERNAME</st>`
    <st c="50465">配置变量的电子邮件地址。</st> <st c="50490">`<st c="50494">mail</st>` <st c="50498">实例提供了</st>
    `<st c="50521">send()</st>` <st c="50527">实用方法，用于将消息发送给</st> `<st c="50566">收件人</st>`。</st>
- en: <st c="50583">Summary</st>
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50583">摘要</st>
- en: <st c="50591">This chapter explained how to utilize Flask extension modules
    when building applications.</st> <st c="50682">Most extension modules will let
    us focus on the requirements rather than the complexities of configurations and
    setups, such as the</st> *<st c="50814">Flask-WTF</st>* <st c="50823">and</st>
    *<st c="50828">Bootstrap-Flask</st>* <st c="50843">modules.</st> <st c="50853">Some
    will shorten development time instead of programming the snippets repeatedly or
    handling the details all over again, such as</st> *<st c="50983">Flask-Migrate</st>*
    <st c="50996">on database migrations and</st> *<st c="51024">Flask-Mail</st>*
    <st c="51034">for sending messages to email servers.</st> <st c="51074">Some modules
    can enhance the built-in features of the Flask framework and provide better configuration
    options, such as</st> *<st c="51194">Flask_Caching</st>* <st c="51207">and</st>
    *<st c="51212">Flask-Session</st>*<st c="51225">. Finally, a few will organize
    the concepts and the implementations of the components, such</st> <st c="51317">as</st>
    *<st c="51320">Flask-RESTful</st>*<st c="51333">.</st>
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50591">本章解释了在构建应用程序时如何利用 Flask 扩展模块。</st> <st c="50682">大多数扩展模块将让我们专注于需求，而不是配置和设置的复杂性，例如</st>
    *<st c="50814">Flask-WTF</st>* <st c="50823">和</st> *<st c="50828">Bootstrap-Flask</st>*
    <st c="50843">模块。</st> <st c="50853">一些可以缩短开发时间，而不是反复编写代码片段或再次处理所有细节，例如</st> *<st
    c="50983">Flask-Migrate</st>* <st c="50996">在数据库迁移上和</st> *<st c="51024">Flask-Mail</st>*
    <st c="51034">用于向电子邮件服务器发送消息。</st> <st c="51074">一些模块可以增强 Flask 框架的内置功能并提供更好的配置选项，例如</st>
    *<st c="51194">Flask_Caching</st>* <st c="51207">和</st> *<st c="51212">Flask-Session</st>*<st
    c="51225">。最后，一些模块会组织概念和组件的实现，例如</st> *<st c="51317">Flask-RESTful</st>*<st c="51333">。</st>
- en: <st c="51334">Although problems may arise with version conflicts and outdated
    modules, the many advantages the extension modules provide supersede all of their
    drawbacks.</st> <st c="51492">But above all, the software requirements must always
    come first when applying these extension modules.</st> <st c="51595">You should
    always be able to choose the appropriate options among these modules that will
    best address the needed requirements, not because they can</st> <st c="51744">provide
    shortcuts.</st>
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51334">尽管可能会出现版本冲突和过时模块的问题，但扩展模块提供的许多优势超过了所有缺点。</st> <st c="51492">但最重要的是，在应用这些扩展模块时，软件需求必须始终放在首位。</st>
    <st c="51595">你应该始终能够从这些模块中选择最合适的选项，以最好地满足所需的需求，而不仅仅是因为它们可以</st> <st c="51744">提供捷径。</st>
- en: <st c="51762">The next chapter will be about the Flask framework and</st> <st
    c="51818">asynchronous programming.</st>
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51762">下一章将介绍 Flask 框架和</st> <st c="51818">异步编程</st>。
- en: '[PRE35]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: <st c="0">Part 2:Building Advanced Flask 3.x Applications</st>
  id: totrans-292
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">第二部分：构建高级 Flask 3.x 应用程序</st>
- en: <st c="48">In this part, you will learn how to extend your Flask skills to build
    enterprise applications with enhanced performance using asynchronous views and
    API endpoints.</st> <st c="213">You will learn to use the asynchronous SQLAlchemy
    to build asynchronous repository transactions and NoSQL databases to manage non-structured
    or semi-structured big data.</st> <st c="383">Overall, this part will lead you
    to implement features that utilize asynchronous background tasks, upload XLSX
    and CSV files to generate charts, graphs, and tabular data, generate PDF documents,
    use WebSockets and</st> **<st c="597">Server-Sent Events</st>** <st c="615">(</st>**<st
    c="617">SSE</st>**<st c="620">), implement non-BPMN and BPMN workflows, and secure
    the application from</st> <st c="695">web attacks.</st>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="48">在本部分，您将学习如何扩展您的 Flask 技能，使用异步视图和 API 端点构建具有增强性能的企业应用程序。</st> <st
    c="213">您将学习如何使用异步 SQLAlchemy 构建异步存储库事务和非关系型数据库来管理非结构化或半结构化大数据。</st> <st c="383">总体而言，本部分将引导您实现利用异步后台任务、上传
    XLSX 和 CSV 文件以生成图表、图形和表格数据、生成 PDF 文档、使用 WebSockets 和</st> **<st c="597">服务器端事件</st>**
    <st c="615">(</st>**<st c="617">SSE</st>**<st c="620">)，实现非 BPMN 和 BPMN 工作流程，并保护应用程序免受</st>
    <st c="695">网络攻击。</st>
- en: <st c="707">This part includes the</st> <st c="731">following chapters:</st>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="707">本部分包括以下章节：</st>
- en: '[*<st c="750">Chapter 5</st>*](B19383_05.xhtml#_idTextAnchor111)<st c="760">,</st>
    *<st c="762">Building Asynchronous Transactions</st>*'
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="750">第五章</st>*](B19383_05.xhtml#_idTextAnchor111)<st c="760">,</st>
    *<st c="762">构建异步事务</st>*'
- en: '[*<st c="796">Chapter 6</st>*](B19383_06.xhtml#_idTextAnchor143)<st c="806">,</st>
    *<st c="808">Developing Computational and Scientific Applications</st>*'
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="796">第六章</st>*](B19383_06.xhtml#_idTextAnchor143)<st c="806">,</st>
    *<st c="808">开发计算和科学应用程序</st>*'
- en: '[*<st c="860">Chapter 7</st>*](B19383_07.xhtml#_idTextAnchor177)<st c="870">,</st>
    *<st c="872">Using Non-Relational Data Storage</st>*'
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="860">第七章</st>*](B19383_07.xhtml#_idTextAnchor177)<st c="870">,</st>
    *<st c="872">使用非关系型数据存储</st>*'
- en: '[*<st c="905">Chapter 8</st>*](B19383_08.xhtml#_idTextAnchor218)<st c="915">,</st>
    *<st c="917">Building Workflows with Flask</st>*'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="905">第八章</st>*](B19383_08.xhtml#_idTextAnchor218)<st c="915">,</st>
    *<st c="917">使用 Flask 构建工作流程</st>*'
- en: '[*<st c="946">Chapter 9</st>*](B19383_09.xhtml#_idTextAnchor256)<st c="956">,</st>
    *<st c="958">Securing Flask Applications</st>*'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*<st c="946">第九章</st>*](B19383_09.xhtml#_idTextAnchor256)<st c="956">,</st>
    *<st c="958">保护 Flask 应用程序</st>*'
