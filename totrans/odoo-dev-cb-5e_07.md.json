["```py\n$ pip3 install inotify\n$ pip3 install watchdog\n```", "```py\n$ odoo/odoo-bin -c ~/odoo-dev/my-instance.cfg --dev=all\n```", "```py\n$ odoo/odoo-bin -c ~/odoo-dev/my-instance.cfg --dev=reload,qweb\n```", "```py\nfrom os.path import join as opj\nfrom odoo import models, api, exceptions\nEXPORTS_DIR = '/srv/exports'\nclass ProductProduct(models.Model):\n    _inherit = 'product.product'\n    @api.model\n    def export_stock_level(self, stock_location):\n        products = self.with_context(\n            location=stock_location.id\n        ).search([])\n        products = products.filtered('qty_available')\n        fname = opj(EXPORTS_DIR, 'stock_level.txt')\n        try:\n            with open(fname, 'w') as fobj:\n                for prod in products:\n                    fobj.write('%s\\t%f\\n' % (prod.name,\n                                             prod.qty_available))\n        except IOError:\n            raise exceptions.UserError('unable to save file')\n```", "```py\n    import logging\n    ```", "```py\n    _logger = logging.getLogger(__name__)\n    ```", "```py\n    @api.model\n    def export_stock_level(self, stock_location):\n            _logger.info('export stock level for %s', stock_location.name)\n            products = self.with_context(\n                 location=stock_location.id).search([])\n            products = products.filtered('qty_available')\n            _logger.debug('%d products in the location', len(products))\n            fname = join(EXPORTS_DIR, 'stock_level.txt')\n            try:\n                with open(fname, 'w') as fobj:\n                    for prod in products:\n                        fobj.write('%s\\t%f\\n' % (\n                            prod.name, prod.qty_available))\n            except IOError:\n                _logger.exception(\n                    'Error while writing to %s in %s',\n                    'stock_level.txt', EXPORTS_DIR)\n                raise exceptions.UserError('unable to save file')\n    ```", "```py\n$ python odoo.py --log-handler=odoo.addons.my_hostel:DEBUG\n```", "```py\nlog_handler = :ERROR,werkzeug:CRITICAL,odoo.service.server:INFO\n```", "```py\n        $ ./odoo-bin shell -c project.conf --log-level=error\n    ```", "```py\n    env: <odoo.api.Environment object at 0x7f48cc0868c0>\n    odoo: <module 'odoo' from '/home/serpentcs/workspace/17.0/odoo/__init__.py'>\n    openerp: <module 'odoo' from '/home/serpentcs/workspace/17.0/odoo/__init__.py'>\n    self: res.users(1,)\n    Python 3.10.13 (main, Aug 25 2023, 13:20:03) [GCC 9.4.0]\n    Type 'copyright', 'credits' or 'license' for more information\n    product.product:\n\n    ```", "```py\n\n    ```", "```py\n        >>> location_stock = env.ref('stock.stock_location_stock')\n    ```", "```py\n        >>> product.export_stock_level(location_stock)\n    ```", "```py\n        >>> env.cr.commit()\n    ```", "```py\n$ ./odoo-bin shell -c project.conf  --shell-interface=ptpython\n```", "```py\n    def export_stock_level(self, stock_location):\n        import pdb; pdb.set_trace()\n        products = self.with_context( location=stock_location.id ).search([])\n        fname = join(EXPORTS_DIR, 'stock_level.txt')\n        try:\n            with open(fname, 'w') as fobj:\n                for prod in products.filtered('qty_available'):\n                    fobj.write('%s\\t%f\\n' % (prod.name, prod.qty_available))\n        except IOError:\n             raise exceptions.UserError('unable to save file')\n    ```", "```py\n    $ ./odoo-bin shell -c project.cfg --log-level=error\n        [...]\n        >>> product = env['product.product']\n        >>> location_stock = env.ref('stock.stock_location_stock')\n        >>> product.export_stock_level(location_stock)\n        > /home/cookbook/stock_level/models.py(18)export_stock_level()\n        -> products = self.with_context(\n        (Pdb)\n    ```", "```py\n    (Pdb) a\n    self = product.product()\n    stock_location = stock.location(14,)\n    ```", "```py\n    (Pdb) list\n    13       @api.model\n    14       def export_stock_level(self, stock_location):\n    15       _logger.info('export stock level for %s',\n    16                    stock_location.name)\n    17       import pdb; pdb.set_trace()\n    18 ->    products = self.with_context(\n    19       location=stock_location.id).search([])\n    20       products = products.filtered('qty_available')\n    21       _logger.debug('%d products in the location',\n    22                     len(products))\n    23       fname = join(EXPORTS_DIR, 'stock_level.txt')\n    (Pdb)\n    ```", "```py\n    (Pdb) next\n    > /home/cookbook/stock_level/models.py(19)export_stock_level()\n    -> location=stock_location.id).search([])\n    (Pdb) n\n    > /home/cookbook/stock_level/models.py(20)export_stock_level()\n    -> products = products.filtered('qty_available')\n    (Pdb) n\n    > /home/cookbook/stock_level/models.py(21)export_stock_level()\n    -> _logger.debug('%d products in the location',\n    (Pdb) n\n    > /home/cookbook/stock_level/models.py(22)export_stock_level()\n    -> len(products))\n    (Pdb) n\n    > /home/cookbook/stock_level/models.py(23)export_stock_level()\n    -> fname = join(EXPORTS_DIR, 'stock_level.txt')\n    (Pdb) n\n    > /home/cookbook/stock_level/models.py(24)export_stock_level()\n    -> try:\n    ```", "```py\n    (Pdb) p products\n    product.product(32, 14, 17, 19, 21, 22, 23, 29, 34, 33, 26, 27, 42)\n    (Pdb) p fname\n    '/srv/exports/stock_level.txt'\n    ```", "```py\n    (Pdb) !fname = '/tmp/stock_level.txt'\n    ```", "```py\n    (Pdb) return\n    --Return--\n    > /home/cookbook/stock_level/models.py(26)export_stock_level()->None\n    -> for product in products:\n    ```", "```py\n    (Pdb) c\n    >>>\n    ```", "```py\n>>> import pdb\n>>> product = env['product.product']\n>>> location_stock = env.ref('stock.stock_location_stock')\n>>> pdb.runcall(product.export_stock_level, location_stock)\n> /home/cookbook/stock_level/models.py(16)export_stock_level()\n-> products = self.with_context((Pdb)\n```"]