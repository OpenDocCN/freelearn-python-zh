- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Implementing Social Authentication
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现社交认证
- en: In the previous chapter, you built user registration and authentication into
    your website. You implemented password change, reset, and recovery functionalities,
    and you learned how to create a custom profile model for your users.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您将用户注册和认证集成到您的网站中。您实现了密码更改、重置和恢复功能，并学习了如何为您的用户创建自定义配置文件模型。
- en: In this chapter, you will add social authentication to your site using Google.
    You will use **Python Social Auth for Django** to implement social authentication
    using OAuth 2.0, the industry-standard protocol for authorization. You will also
    modify the social authentication pipeline to create a user profile for new users
    automatically.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用Google为您的网站添加社交认证。您将使用**Python Social Auth for Django**通过OAuth 2.0实现社交认证，OAuth
    2.0是行业标准的授权协议。您还将修改社交认证管道，以自动为新用户创建用户配置文件。
- en: 'This chapter will cover the following points:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下内容：
- en: Using the messages framework
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用消息框架
- en: Building a custom authentication backend
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建自定义认证后端
- en: Preventing users from using an existing email
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 防止用户使用现有的电子邮件
- en: Adding social authentication with Python Social Auth
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python Social Auth添加社交认证
- en: Running the development server through HTTPS using Django Extensions
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django Extensions通过HTTPS运行开发服务器
- en: Adding authentication using Google
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加使用Google的认证
- en: Creating a profile for users that register with social authentication
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为使用社交认证注册的用户创建配置文件
- en: Functional overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 5.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '*图5.1*展示了本章将构建的视图、模板和功能：'
- en: '![](img/B21088_05_01.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_05_01.png)'
- en: 'Figure 5.1: Diagram of functionalities built in Chapter 5'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.1：第5章构建的功能图
- en: In this chapter, you will generate success and error messages in the `edit`
    view using the Django messages framework. You will build a new authentication
    backend named `EmailAuthBackend` for users to authenticate using their email addresses.
    You will serve your site over HTTPS during development using Django Extensions,
    and you will implement social authentication with Google on your site using Python
    Social Auth. Users will be redirected to the `dashboard` view after successful
    authentication. You will customize the authentication pipeline to create user
    profiles automatically when a new user is created with social authentication.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将使用Django消息框架在`edit`视图中生成成功和错误消息。您将为用户使用电子邮件地址进行认证创建一个新的认证后端`EmailAuthBackend`。您将在开发期间使用Django
    Extensions通过HTTPS提供服务，并在您的网站上使用Python Social Auth实现社交认证。用户认证成功后将被重定向到`dashboard`视图。您将自定义认证管道，以便在通过社交认证创建新用户时自动创建用户配置文件。
- en: Technical requirements
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05)找到。
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all requirements
    at once with the `python` `-m` `pip` `install` `-r` `requirements.txt` command.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python包都包含在章节源代码中的`requirements.txt`文件中。您可以根据以下章节中的说明安装每个Python包，或者使用`python
    -m pip install -r requirements.txt`命令一次性安装所有依赖。
- en: Using the messages framework
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用消息框架
- en: When users are interacting with the platform, there are many cases where you
    might want to inform them about the result of specific actions, such as successfully
    creating an object in the database or successfully submitting a form.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户与平台交互时，有许多情况您可能希望通知他们特定操作的结果，例如在数据库中成功创建对象或成功提交表单。
- en: Django has a built-in messages framework that allows you to display one-time
    notifications to your users. This enhances user experience by providing immediate
    feedback on their actions, making the interface more intuitive and user friendly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Django内置了消息框架，允许您向用户显示一次性通知。这通过提供对用户行为的即时反馈来增强用户体验，使界面更加直观和用户友好。
- en: The messages framework is located at `django.contrib.messages` and is included
    in the default `INSTALLED_APPS` list of the `settings.py` file when you create
    new projects using `python manage.py startproject`. The settings file also contains
    the `django.contrib.messages.middleware.MessageMiddleware` middleware in the `MIDDLEWARE`
    setting.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框架位于 `django.contrib.messages`，当你使用 `python manage.py startproject` 创建新项目时，它会被包含在
    `settings.py` 文件的默认 `INSTALLED_APPS` 列表中。设置文件还包含 `django.contrib.messages.middleware.MessageMiddleware`
    中间件，位于 `MIDDLEWARE` 设置中。
- en: 'The messages framework provides a simple way to add messages to users. Messages
    are stored in a cookie by default (falling back to session storage), and they
    are displayed and cleared in the next request from the user. You can use the messages
    framework in your views by importing the `messages` module and adding new messages
    with simple shortcuts, as follows:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框架提供了一个简单的方法来向用户添加消息。默认情况下，消息存储在cookie中（如果会话存储失败），它们将在用户的下一个请求中显示和清除。你可以在你的视图中使用消息框架，通过导入
    `messages` 模块并使用简单的快捷方式添加新消息，如下所示：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can create new messages using the `add_message()` method or any of the
    following shortcut methods:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `add_message()` 方法或以下任何快捷方法来创建新消息：
- en: '`success()`: Success messages are used to display when an action was successful'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`success()`: 成功消息用于显示操作成功时'
- en: '`info()`: Informational messages'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`info()`: 提供信息性消息'
- en: '`warning()`: This shows that a failure has not yet occurred but it may be imminent'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`warning()`: 这表明失败尚未发生，但它可能即将发生'
- en: '`error()`: This shows that an action was not successful or a failure occurred'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`error()`: 这表明操作未成功或发生了失败'
- en: '`debug()`: This shows debug messages that will be removed or ignored in a production
    environment'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`debug()`: 这显示了在生产环境中将被删除或忽略的调试消息'
- en: Let’s add messages to the project. The messages framework applies globally to
    the project. We will use the base template to display any available messages to
    the client. This will allow us to notify the client of the results of any action
    on any page.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向项目中添加消息。消息框架对项目全局有效。我们将使用基本模板来向客户端显示任何可用的消息。这将允许我们在任何页面上通知客户端任何操作的结果。
- en: 'Open the `templates/base.html` template of the `account` application and add
    the following code highlighted in bold:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 打开 `account` 应用程序的 `templates/base.html` 模板，并添加以下加粗代码：
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The messages framework includes the `django.contrib.messages.context_processors.messages`
    context processor, which adds a `messages` variable to the request context. You
    can find it in the `context_processors` list in the `TEMPLATES` setting of your
    project. You can use the `messages` variable in templates to display all existing
    messages to the user.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框架包括 `django.contrib.messages.context_processors.messages` 上下文处理器，它将一个 `messages`
    变量添加到请求上下文中。你可以在项目的 `TEMPLATES` 设置中的 `context_processors` 列表中找到它。你可以在模板中使用 `messages`
    变量来向用户显示所有现有的消息。
- en: A context processor is a Python function that takes the request object as an
    argument and returns a dictionary that gets added to the request context. You
    will learn how to create your own context processors in *Chapter 8*, *Building
    an Online Shop*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文处理器是一个Python函数，它接受请求对象作为参数，并返回一个字典，该字典被添加到请求上下文中。你将在 *第8章*，*构建在线商店* 中学习如何创建自己的上下文处理器。
- en: Let’s modify the `edit` view to use the messages framework.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改 `edit` 视图以使用消息框架。
- en: 'Edit the `views.py` file of the `account` application and add the following
    lines highlighted in bold:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `account` 应用程序的 `views.py` 文件，并添加以下加粗行：
- en: '[PRE2]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: A success message is generated when users successfully update their profile.
    If any of the forms contain invalid data, an error message is generated instead.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户成功更新他们的个人资料时，会生成一条成功消息。如果任何表单包含无效数据，则生成错误消息。
- en: 'Open `http://127.0.0.1:8000/account/edit/` in your browser and edit the profile
    of the user. You should see the following message when the profile is successfully
    updated:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开 `http://127.0.0.1:8000/account/edit/` 并编辑用户的个人资料。当个人资料成功更新时，你应该看到以下消息：
- en: '![A green screen with white text  Description automatically generated with
    low confidence](img/B21088_05_02.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![带有白色文字的绿色屏幕，描述由低置信度自动生成](img/B21088_05_02.png)'
- en: 'Figure 5.2: The successfully edited profile message'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2：成功编辑的个人资料消息
- en: 'Enter an invalid date in the **Date of birth** field and submit the form again.
    You should see the following message:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **出生日期** 字段中输入一个无效的日期并再次提交表单。你应该看到以下消息：
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B21088_05_03.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![包含图形用户界面的图片 自动生成描述](img/B21088_05_03.png)'
- en: 'Figure 5.3: The error updating profile message'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3：错误更新配置消息
- en: Generating messages to inform your users about the results of their actions
    is straightforward. You can easily add messages to other views as well.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 生成消息以通知用户其操作结果非常直接。您还可以轻松地将消息添加到其他视图中。
- en: You can learn more about the messages framework at [https://docs.djangoproject.com/en/5.0/ref/contrib/messages/](https://docs.djangoproject.com/en/5.0/ref/contrib/messages/).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.djangoproject.com/en/5.0/ref/contrib/messages/](https://docs.djangoproject.com/en/5.0/ref/contrib/messages/)
    了解更多有关消息框架的信息。
- en: Now that we’ve built all the functionality related to user authentication and
    profile editing, we will dig deeper into customizing authentication. We will learn
    how to build custom backend authentication so that users can log in to the site
    using their email addresses.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经构建了所有与用户认证和资料编辑相关的功能，我们将更深入地探讨自定义认证。我们将学习如何构建自定义后端认证，以便用户可以使用他们的电子邮件地址登录网站。
- en: Building a custom authentication backend
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建自定义认证后端
- en: 'Django allows you to authenticate users against different sources, such as
    the built-in Django authentication system, external authentication systems like
    **Lightweight Directory Access Protocol** (**LDAP**) servers, or even third-party
    providers. The `AUTHENTICATION_BACKENDS` setting includes a list of authentication
    backends available in the project. Django enables you to specify multiple authentication
    backends for flexible authentication schemes. The default value of the `AUTHENTICATION_BACKENDS`
    setting is the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Django 允许您对不同的来源进行用户认证，例如内置的 Django 认证系统、外部认证系统如 **轻量级目录访问协议** (**LDAP**) 服务器，甚至是第三方提供商。`AUTHENTICATION_BACKENDS`
    设置包括项目中可用的认证后端列表。Django 允许您指定多个认证后端，以实现灵活的认证方案。`AUTHENTICATION_BACKENDS` 设置的默认值如下：
- en: '[PRE3]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The default `ModelBackend` authenticates users against the database using the
    `User` model of `django.contrib.auth`. This is suitable for most web projects.
    However, you can create custom backends to authenticate your users against other
    sources.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的 `ModelBackend` 使用 `django.contrib.auth` 中的 `User` 模型对数据库中的用户进行认证。这对于大多数
    Web 项目来说很合适。然而，您可以创建自定义后端来对其他来源进行用户认证。
- en: You can read more information about customizing authentication at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources)
    了解更多有关自定义认证的信息。
- en: Whenever the `authenticate()` function of `django.contrib.auth` is used, Django
    tries to authenticate the user against each of the backends defined in `AUTHENTICATION_BACKENDS`
    one by one, until one of them successfully authenticates the user. Only if all
    of the backends fail to authenticate will the user not be authenticated.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每当使用 `django.contrib.auth` 中的 `authenticate()` 函数时，Django 会依次尝试将用户与 `AUTHENTICATION_BACKENDS`
    中定义的每个后端进行认证，直到其中一个成功认证用户。只有当所有后端都未能认证用户时，用户才不会被认证。
- en: 'Django provides a simple way to define your own authentication backends. An
    authentication backend is a class that provides the following two methods:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Django 提供了一种简单的方式来定义您自己的认证后端。认证后端是一个提供以下两个方法的类：
- en: '`authenticate()`: It takes the `request` object and user credentials as parameters.
    It has to return a `user` object that matches those credentials if the credentials
    are valid, or `None` otherwise. The `request` parameter is an `HttpRequest` object,
    or `None` if it’s not provided to the `authenticate()` function.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authenticate()`: 它接受 `request` 对象和用户凭证作为参数。如果凭证有效，它必须返回一个与这些凭证匹配的 `user` 对象，否则返回
    `None`。`request` 参数是一个 `HttpRequest` 对象，如果没有提供给 `authenticate()` 函数，则为 `None`。'
- en: '`get_user()`: It takes a user ID parameter and has to return a `user` object.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_user()`: 它接受一个用户 ID 参数，并必须返回一个 `user` 对象。'
- en: Creating a custom authentication backend is as simple as writing a Python class
    that implements both methods. Let’s create an authentication backend to allow
    users to authenticate on the site using their email address instead of their username.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 创建自定义认证后端就像编写一个实现两种方法的 Python 类一样简单。让我们创建一个认证后端，允许用户使用他们的电子邮件地址而不是用户名在网站上进行认证。
- en: 'Create a new file inside the `account` application directory and name it `authentication.py`.
    Add the following code to it:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`account`应用程序目录内创建一个新文件，并将其命名为`authentication.py`。向其中添加以下代码：
- en: '[PRE4]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding code is a simple authentication backend. The `authenticate()`
    method receives a `request` object and the `username` and `password` optional
    parameters. We could use different parameters, but we use `username` and `password`
    to make our backend work with the authentication framework views right away. The
    preceding code works as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码是一个简单的认证后端。`authenticate()`方法接收一个`request`对象和`username`以及`password`可选参数。我们可以使用不同的参数，但我们使用`username`和`password`来使我们的后端能够立即与认证框架视图一起工作。上述代码的工作原理如下：
- en: '`authenticate()`: The user with the given email address is retrieved, and the
    password is checked using the built-in `check_password()` method of the user model.
    This method handles the password hashing to compare the given password with the
    password stored in the database. Two different QuerySet exceptions are captured:
    `DoesNotExist` and `MultipleObjectsReturned`. The `DoesNotExist` exception is
    raised if no user is found with the given email address. The `MultipleObjectsReturned`
    exception is raised if multiple users are found with the same email address. We
    will modify the registration and edit views later to prevent users from using
    an existing email address.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`authenticate()`: 检索具有给定电子邮件地址的用户，并使用用户模型的内置`check_password()`方法检查密码。此方法处理密码散列，将提供的密码与数据库中存储的密码进行比较。捕获两种不同的QuerySet异常：`DoesNotExist`和`MultipleObjectsReturned`。如果找不到具有给定电子邮件地址的用户，将引发`DoesNotExist`异常。如果找到具有相同电子邮件地址的多个用户，将引发`MultipleObjectsReturned`异常。我们将在稍后修改注册和编辑视图，以防止用户使用现有的电子邮件地址。'
- en: '`get_user()`: You get a user through the ID provided in the `user_id` parameter.
    Django uses the backend that authenticated the user to retrieve the `User` object
    for the duration of the user session. **pk** is a short for **primary key**, which
    is a unique identifier for each record in the database. Every Django model has
    a field that serves as its primary key. By default, the primary key is the automatically
    generated ID field. You can find more information about automatic primary key
    fields at [https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields](https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields).'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`get_user()`: 您可以通过`user_id`参数提供的ID获取一个用户。Django使用验证用户的后端在用户会话期间检索`User`对象。**pk**是**主键**的缩写，它是数据库中每条记录的唯一标识符。每个Django模型都有一个作为其主键的字段。默认情况下，主键是自动生成的ID字段。您可以在[https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields](https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields)找到有关自动主键字段的更多信息。'
- en: 'Edit the `settings.py` file of your project and add the following code:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑您项目的`settings.py`文件并添加以下代码：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: In the preceding setting, we keep the default `ModelBackend` that is used to
    authenticate with the username and password and include our own email-based authentication
    backend `EmailAuthBackend`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述设置中，我们保留了用于使用用户名和密码进行认证的默认`ModelBackend`，并包括我们自己的基于电子邮件的认证后端`EmailAuthBackend`。
- en: Open `http://127.0.0.1:8000/account/login/` in your browser. Remember that Django
    will try to authenticate the user against each of the backends, so now you should
    be able to log in seamlessly using your username or email account.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/account/login/`。请记住，Django将尝试对每个后端进行用户验证，因此现在您应该能够使用您的用户名或电子邮件账户无缝登录。
- en: The user credentials will be checked using `ModelBackend`, and if no user is
    returned, the credentials will be checked using `EmailAuthBackend`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 用户凭证将使用`ModelBackend`进行验证，如果没有返回用户，则将使用`EmailAuthBackend`进行验证。
- en: The order of the backends listed in the `AUTHENTICATION_BACKENDS` setting matters.
    If the same credentials are valid for multiple backends, Django will authenticate
    the user using the first backend in the list that successfully validates these
    credentials. This means Django does not proceed to check the remaining backends
    once a match is found.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`AUTHENTICATION_BACKENDS`设置中列出的后端顺序很重要。如果相同的凭证对多个后端都有效，Django将使用列表中第一个成功验证这些凭证的后端来验证用户。这意味着一旦找到匹配项，Django就不会继续检查剩余的后端。
- en: Preventing users from using an existing email address
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 防止用户使用现有的电子邮件地址
- en: The `User` model of the authentication framework does not prevent creating users
    with the same email address. If two or more user accounts share the same email
    address, we won’t be able to discern which user is authenticating. Now that users
    can log in using their email address, we have to prevent users from registering
    with an existing email address.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 认证框架的`User`模型不允许创建具有相同电子邮件地址的用户。如果有两个或更多用户账户共享相同的电子邮件地址，我们将无法区分哪个用户正在认证。现在用户可以使用电子邮件地址登录，我们必须防止用户使用现有电子邮件地址进行注册。
- en: We will now change the user registration form to prevent multiple users from
    registering with the same email address.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将更改用户注册表单，以防止多个用户使用相同的电子邮件地址进行注册。
- en: 'Edit the `forms.py` file of the `account` application and add the following
    lines highlighted in bold to the `UserRegistrationForm` class:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`forms.py`文件，并将以下加粗的行添加到`UserRegistrationForm`类中：
- en: '[PRE6]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have added validation for the `email` field that prevents users from registering
    with an existing email address. We build a QuerySet to look up existing users
    with the same email address. We check whether there are any results with the `exists()`
    method. The `exists()` method returns `True` if the QuerySet contains any results,
    and `False` otherwise.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为`email`字段添加了验证，防止用户使用现有的电子邮件地址进行注册。我们构建了一个查询集来查找具有相同电子邮件地址的现有用户。我们使用`exists()`方法检查是否有任何结果。如果查询集包含任何结果，`exists()`方法返回`True`，否则返回`False`。
- en: 'Now, add the following lines highlighted in bold to the `UserEditForm` class:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下加粗的行添加到`UserEditForm`类中：
- en: '[PRE7]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In this case, we have added validation for the `email` field that prevents users
    from changing their existing email address to an existing email address of another
    user. We exclude the current user from the QuerySet. Otherwise, the current email
    address of the user would be considered an existing email address, and the form
    won’t validate.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们为`email`字段添加了验证，防止用户将他们的现有电子邮件地址更改为另一个用户的现有电子邮件地址。我们从查询集中排除了当前用户。否则，用户的当前电子邮件地址将被视为现有电子邮件地址，表单将无法验证。
- en: Adding social authentication to your site
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将社交认证添加到您的网站
- en: Social authentication is a widely used feature that allows users to authenticate
    using their existing account of a service provider using **single sign-on** (**SSO**).
    The authentication process allows users to authenticate into the site using their
    existing account from social services like Google, Facebook, or Twitter. In this
    section, we will add social authentication to the site using Google.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 社交认证是一个广泛使用的功能，允许用户使用服务提供商的现有账户通过**单点登录**（**SSO**）进行认证。认证过程允许用户使用来自社交服务如Google、Facebook或Twitter的现有账户登录到网站。在本节中，我们将使用Google将社交认证添加到网站。
- en: To implement social authentication, we will use the **OAuth 2.0** industry-standard
    protocol for authorization. **OAuth** stands for **Open Authorization**. OAuth
    2.0 is a standard designed to allow a website or application to access resources
    hosted by other web apps on behalf of a user. Google uses the OAuth 2.0 protocol
    for authentication and authorization.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现社交认证，我们将使用授权的行业标准协议**OAuth 2.0**。**OAuth**代表**开放授权**。OAuth 2.0是一个旨在允许网站或应用代表用户访问其他Web应用托管资源的标准。Google使用OAuth
    2.0协议进行认证和授权。
- en: Python Social Auth is a Python module that simplifies the process of adding
    social authentication to your website. Using this module, you can let your users
    log in to your website using their accounts from other services. You can find
    the code for this module at [https://github.com/python-social-auth/social-app-django](https://github.com/python-social-auth/social-app-django).
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Python Social Auth是一个Python模块，简化了将社交认证添加到您网站的过程。使用此模块，您可以让您的用户使用其他服务的账户登录到您的网站。您可以在[https://github.com/python-social-auth/social-app-django](https://github.com/python-social-auth/social-app-django)找到此模块的代码。
- en: This module comes with authentication backends for different Python frameworks,
    including Django.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块包含适用于不同Python框架的认证后端，包括Django。
- en: 'Run the following command in the shell:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell中运行以下命令：
- en: '[PRE8]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This will install Python Social Auth.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这将安装Python Social Auth。
- en: 'Then, add `social_django` to the `INSTALLED_APPS` setting in the `settings.py`
    file of the project as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`social_django`添加到项目`settings.py`文件中的`INSTALLED_APPS`设置，如下所示：
- en: '[PRE9]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the default application to add Python Social Auth to Django projects.
    Now, run the following command to sync Python Social Auth models with your database:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是默认应用程序，用于将Python Social Auth添加到Django项目中。现在，运行以下命令以将Python Social Auth模型与您的数据库同步：
- en: '[PRE10]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You should see that the migrations for the default application are applied
    as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该看到默认应用程序的迁移已按以下方式应用：
- en: '[PRE11]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Python Social Auth includes authentication backends for multiple services. You
    can find the list with all available backends at [https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends](https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Python Social Auth包括多个服务的认证后端。您可以在[https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends](https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends)找到所有可用后端的列表。
- en: We will add social authentication to our project, allowing our users to authenticate
    with the Google backend.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向项目中添加社交认证，允许我们的用户使用Google后端进行认证。
- en: First, we need to add the social login URL patterns to the project.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要将社交登录URL模式添加到项目中。
- en: 'Open the main `urls.py` file of the `bookmarks` project and include the `social_django`
    URL patterns as follows. The new lines are highlighted in bold:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`bookmarks`项目的`urls.py`主文件，并按照以下方式包含`social_django` URL模式。新行以粗体突出显示：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Our web application is currently accessible via the localhost IP, `127.0.0.1`,
    or using the `localhost` hostname. Google allows the redirection of users to `localhost`
    after successful authentication, but other social services expect a domain name
    for the URL redirect. In this project, we will simulate a real environment by
    serving our site under a domain name in our local machine.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的网络应用程序目前可以通过localhost IP地址`127.0.0.1`或使用`localhost`主机名访问。Google允许在成功认证后将用户重定向到`localhost`，但其他社交服务期望URL重定向使用域名。在这个项目中，我们将通过在本地机器下使用域名来模拟真实环境。
- en: Locate the `hosts` file of your machine. If you are using Linux or macOS, the
    `hosts` file is located at `/etc/hosts`. If you are using Windows, the `hosts`
    file is located at `C:\Windows\System32\Drivers\etc\hosts`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 定位您机器的`hosts`文件。如果您使用Linux或macOS，`hosts`文件位于`/etc/hosts`。如果您使用Windows，`hosts`文件位于`C:\Windows\System32\Drivers\etc\hosts`。
- en: 'Edit the `hosts` file of your machine and add the following line to it:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑您机器的`hosts`文件，并添加以下行到其中：
- en: '[PRE13]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will tell your computer to point the `mysite.com` hostname to your own
    machine.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这将告诉您的计算机将`mysite.com`主机名指向您的机器。
- en: 'Let’s verify that the hostname association worked. Run the development server
    using the following command from the shell prompt:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们验证主机名关联是否成功。从shell提示符运行以下命令来启动开发服务器：
- en: '[PRE14]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Open `http://mysite.com:8000/account/login/` in your browser. You will see
    the following error:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`http://mysite.com:8000/account/login/`。您将看到以下错误：
- en: '![](img/B21088_05_04.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_05_04.png)'
- en: 'Figure 5.4: The invalid host header message'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.4：无效的主机头消息
- en: Django controls the hosts that can serve the application using the `ALLOWED_HOSTS`
    setting. This is a security measure to prevent HTTP host header attacks. Django
    will only allow the hosts included in this list to serve the application.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Django使用`ALLOWED_HOSTS`设置控制可以服务应用程序的主机。这是一个安全措施，用于防止HTTP主机头攻击。Django只会允许列表中包含的主机来服务应用程序。
- en: You can learn more about the `ALLOWED_HOSTS` setting at [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts)了解更多关于`ALLOWED_HOSTS`设置的信息。
- en: 'Edit the `settings.py` file of the project and modify the `ALLOWED_HOSTS` setting
    as follows. The new code is highlighted in bold:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑项目的`settings.py`文件，并按以下方式修改`ALLOWED_HOSTS`设置。新代码以粗体突出显示：
- en: '[PRE15]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Besides the `mysite.com` host, we have explicitly included `localhost` and `127.0.0.1`.
    This allows access to the site through `localhost` and `127.0.0.1`, which is the
    default Django behavior when `DEBUG` is `True` and `ALLOWED_HOSTS` is empty.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`mysite.com`主机外，我们还明确包含了`localhost`和`127.0.0.1`。这允许通过`localhost`和`127.0.0.1`访问网站，这是当`DEBUG`为`True`且`ALLOWED_HOSTS`为空时Django的默认行为。
- en: Open `http://mysite.com:8000/account/login/` again in your browser. Now, you
    should see the login page of the site instead of an error.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 再次在浏览器中打开`http://mysite.com:8000/account/login/`。现在，您应该看到网站的登录页面而不是错误。
- en: Running the development server through HTTPS
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过HTTPS运行开发服务器
- en: Next, we are going to run the development server through HTTPS to simulate a
    real environment where the content exchanged with the browser is secured. This
    will help us later in *Chapter 6*, *Sharing Content on Your Website*, to serve
    our site securely and load our image bookmarking tool on top of any secure website.
    The **Transport Layer Security** (**TLS**) protocol is the standard for serving
    websites through a secure connection. The TLS predecessor is the **Secure Sockets
    Layer** (**SSL**).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将通过HTTPS运行开发服务器以模拟一个真实环境，在这个环境中与浏览器交换的内容是安全的。这有助于我们在 *第 6 章*，*在您的网站上共享内容*
    中安全地提供我们的网站并在任何安全网站上加载我们的图像书签工具。**传输层安全性**（**TLS**）协议是通过安全连接提供网站的标准。TLS的前身是**安全套接字层**（**SSL**）。
- en: Although SSL is now deprecated, you will find references to both the terms TLS
    and SSL in multiple libraries and online documentation. The Django development
    server is not able to serve your site through HTTPS since that is not its intended
    use. To test the social authentication functionality serving the site through
    HTTPS, we are going to use the RunServerPlus extension of the package Django Extensions.
    This package contains a collection of useful Django tools. Please note that you
    should never use the development server to run your site in a production environment.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然SSL现在已弃用，但你将在多个库和在线文档中找到对TLS和SSL这两个术语的引用。Django开发服务器无法通过HTTPS提供服务，因为这不是它的预期用途。为了测试通过HTTPS提供网站的社会认证功能，我们将使用Django
    Extensions的RunServerPlus扩展。此包包含一系列有用的Django工具。请注意，你永远不应该使用开发服务器在生产环境中运行你的网站。
- en: 'Use the following command to install Django Extensions:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令安装 Django 扩展：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will need to install Werkzeug, which contains a debugger layer required
    by the RunServerPlus extension of Django Extensions. Use the following command
    to install Werkzeug:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要安装 Werkzeug，它包含Django Extensions的RunServerPlus扩展所需的调试层。使用以下命令安装 Werkzeug：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Finally, use the following command to install pyOpenSSL, which is required
    to use the SSL/TLS functionality of RunServerPlus:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令安装 pyOpenSSL，这是使用RunServerPlus的SSL/TLS功能所必需的：
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Edit the `settings.py` file of your project and add Django Extensions to the
    `INSTALLED_APPS` setting, as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑你的项目的 `settings.py` 文件，并将 Django Extensions 添加到 `INSTALLED_APPS` 设置中，如下所示：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now, use the `runserver_plus` management command provided by Django Extensions
    to run the development server, as follows:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，使用Django Extensions提供的 `runserver_plus` 管理命令来运行开发服务器，如下所示：
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have provided a file name to the `runserver_plus` command for the SSL/TLS
    certificate. Django Extensions will generate a key and certificate automatically.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经为 `runserver_plus` 命令提供了SSL/TLS证书的文件名。Django Extensions将自动生成密钥和证书。
- en: Open `https://mysite.com:8000/account/login/` in your browser. Now, you are
    accessing your site through HTTPS. Note we are now using `https://` instead of
    `http://`.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开 `https://mysite.com:8000/account/login/`。现在，你正在通过 HTTPS 访问你的网站。注意我们现在使用
    `https://` 而不是 `http://`。
- en: Your browser will show a security warning because you are using a self-generated
    certificate instead of a certificate trusted by a **certification authority**
    (**CA**).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你的浏览器将显示一个安全警告，因为你正在使用一个由自己生成的证书而不是由**认证机构**（**CA**）信任的证书。
- en: 'If you are using Google Chrome, you will see the following screen:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Google Chrome，你将看到以下屏幕：
- en: '![](img/B21088_05_05.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_05.png)'
- en: 'Figure 5.5: The safety error in Google Chrome'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5：Google Chrome 中的安全错误
- en: In this case, click on **Advanced** and then click on **Proceed to mysite.com
    (unsafe)**.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，点击 **高级**，然后点击 **继续到 mysite.com（不安全）**。
- en: 'If you are using Safari, you will see the following screen:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Safari，你将看到以下屏幕：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_06.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_05_06.png)'
- en: 'Figure 5.6: The safety error in Safari'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6：Safari 中的安全错误
- en: In this case, click on **Show details** and then click on **visit this website**.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，点击 **显示详细信息**，然后点击 **访问此网站**。
- en: 'If you are using Microsoft Edge, you will see the following screen:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用 Microsoft Edge，你将看到以下屏幕：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_07.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_05_07.png)'
- en: 'Figure 5.7: The safety error in Microsoft Edge'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7：Microsoft Edge 中的安全错误
- en: In this case, click on **Advanced** and then on **Continue to mysite.com (unsafe)**.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，点击 **高级**，然后点击 **继续到 mysite.com（不安全）**。
- en: If you are using any other browser, access the advanced information displayed
    by your browser and accept the self-signed certificate so that your browser trusts
    the certificate.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是其他浏览器，请访问浏览器显示的详细信息，并接受自签名证书，以便浏览器信任该证书。
- en: 'You will see that the URL starts with `https://` and, in some cases, a lock
    icon that indicates that the connection is secure. Some browsers might display
    a broken lock icon because you are using a self-signed certificate instead of
    a trusted one. That won’t be a problem for our tests:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到 URL 以 `https://` 开头，在某些情况下，一个表示连接安全的锁形图标。一些浏览器可能会显示一个损坏的锁形图标，因为你正在使用自签名证书而不是受信任的证书。这不会影响我们的测试：
- en: '![](img/B21088_05_08.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_08.png)'
- en: 'Figure 5.8: The URL with the secured connection icon'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8：带有安全连接图标的 URL
- en: Django Extensions includes many other interesting tools and features. You can
    find more information about this package at https://django-extensions.readthedocs.io/en/latest/.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Django Extensions 包含了许多其他有趣的工具和功能。您可以在 https://django-extensions.readthedocs.io/en/latest/
    上找到有关此包的更多信息。
- en: You can now serve your site through HTTPS during development.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以在开发期间通过 HTTPS 提供您的网站服务。
- en: Authentication using Google
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Google 进行身份验证
- en: Google offers social authentication using OAuth 2.0, which allows users to sign
    in with Google accounts. You can read about Google’s OAuth2 implementation at
    [https://developers.google.com/identity/protocols/OAuth2](https://developers.google.com/identity/protocols/OAuth2).
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Google 提供了使用 OAuth 2.0 的社交身份验证，允许用户使用 Google 账户登录。您可以在 [https://developers.google.com/identity/protocols/OAuth2](https://developers.google.com/identity/protocols/OAuth2)
    上了解有关 Google OAuth2 实现的更多信息。
- en: 'To implement authentication using Google, add the following line highlighted
    in bold to the `AUTHENTICATION_BACKENDS` setting in the `settings.py` file of
    your project:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现使用 Google 的身份验证，请将以下加粗的行添加到项目 `settings.py` 文件中的 `AUTHENTICATION_BACKENDS`
    设置中：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'First, you will need to create an API key in your Google Developer Console.
    Open [https://console.cloud.google.com/projectcreate](https://console.cloud.google.com/projectcreate)
    in your browser. You will see the following screen:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，您需要在 Google 开发者控制台中创建一个 API 密钥。在您的浏览器中打开 [https://console.cloud.google.com/projectcreate](https://console.cloud.google.com/projectcreate)。您将看到以下屏幕：
- en: '![](img/B21088_05_09.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_09.png)'
- en: 'Figure 5.9: The Google project creation form'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9：Google 项目创建表单
- en: Under **Project name**, enter `Bookmarks` and click the **CREATE** button.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **项目名称** 下，输入 `Bookmarks` 并点击 **创建** 按钮。
- en: 'When the new project is ready, make sure the project is selected in the top
    navigation bar as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 当新项目准备就绪时，请确保在顶部导航栏中选择项目，如下所示：
- en: '![](img/B21088_05_10.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_10.png)'
- en: 'Figure 5.10: The Google Developer Console top navigation bar'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10：Google 开发者控制台顶部导航栏
- en: 'After the project is created, under **APIs & Services**, click on **Credentials**:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 项目创建完成后，在 **APIs & Services** 下方点击 **Credentials**：
- en: '![](img/B21088_05_11.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_11.png)'
- en: 'Figure 5.11: Google APIs and services menu'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11：Google API 和服务菜单
- en: 'You will see the following screen:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到以下屏幕：
- en: '![](img/B21088_05_12.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_12.png)'
- en: 'Figure 5.12: Google API creation of API credentials'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12：Google API 创建 API 凭据
- en: Then, click on **CREATE CREDENTIALS** and click on **OAuth client ID**.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，点击 **创建凭据** 并点击 **OAuth 客户端 ID**。
- en: 'Google will ask you to configure the consent screen first, like this:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: Google 会要求您首先配置同意屏幕，如下所示：
- en: '![](img/B21088_05_13.png)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_13.png)'
- en: 'Figure 5.13: The alert to configure the OAuth consent screen'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13：配置 OAuth 同意屏幕的警告
- en: 'We will configure the page that will be shown to users to give their consent
    to access your site with their Google account. Click on the **CONFIGURE CONSENT
    SCREEN** button. You will be redirected to the following screen:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置将向用户显示的页面，以便他们同意使用 Google 账户访问您的网站。点击 **配置同意屏幕** 按钮。您将被重定向到以下屏幕：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_14.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_05_14.png)'
- en: 'Figure 5.14: The User Type selection in the Google OAuth consent screen setup'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14：在 Google OAuth 同意屏幕设置中的用户类型选择
- en: 'Choose **External** for **User Type** and click the **CREATE** button. You
    will see the following screen:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 将 **用户类型** 选择为 **外部** 并点击 **创建** 按钮。您将看到以下屏幕：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_15.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_05_15.png)'
- en: 'Figure 5.15: The Google OAuth consent screen setup'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15：Google OAuth 同意屏幕设置
- en: Under **App name**, enter `Bookmarks` and select your email for **User support
    email**.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在**应用名称**下，输入`Bookmarks`并选择您的邮箱作为**用户支持邮箱**。
- en: 'Under **Authorised domains**, enter `mysite.com` as follows:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在**授权域名**下，按照如下方式输入`mysite.com`：
- en: '![Text  Description automatically generated with low confidence](img/B21088_05_16.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![文本  使用低置信度自动生成的描述](img/B21088_05_16.png)'
- en: 'Figure 5.16: Google OAuth authorized domains'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16：Google OAuth授权域名
- en: Enter your email under **Developer contact information** and click on **SAVE
    AND CONTINUE**.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在**开发者联系信息**下输入您的电子邮件，然后点击**保存并继续**。
- en: In step 2, **Scopes**, don’t change anything and click on **SAVE AND CONTINUE**.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在第2步，**作用域**，不要更改任何内容，然后点击**保存并继续**。
- en: 'In step 3, **Test users,** add your Google user to **Test users** and click
    on **SAVE AND CONTINUE** as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3步，**测试用户**，将您的Google用户添加到**测试用户**中，然后按照如下方式点击**保存并继续**：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_17.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_05_17.png)'
- en: 'Figure 5.17: Google OAuth test users'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17：Google OAuth测试用户
- en: You will see a summary of your consent screen configuration. Click on **BACK
    TO DASHBOARD**.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到您的同意屏幕配置摘要。点击**返回仪表板**。
- en: In the menu on the left sidebar, click on **Credentials**, click again on **Create
    credentials**, and then on **OAuth client ID**.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在左侧菜单中，点击**凭证**，然后再次点击**创建凭证**，接着点击**OAuth客户端ID**。
- en: 'As the next step, enter the following information:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 作为下一步，输入以下信息：
- en: '**Application type**: Select **Web application**'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用类型**：选择**Web应用**'
- en: '**Name**: Enter `Bookmarks`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：输入`Bookmarks`'
- en: '**Authorised JavaScript origins**: Add `https://mysite.com:8000`'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权JavaScript源**：添加`https://mysite.com:8000`'
- en: '**Authorised redirect URIs**: Add `https://mysite.com:8000/social-auth/complete/google-oauth2/`'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**授权重定向URI**：添加`https://mysite.com:8000/social-auth/complete/google-oauth2/`'
- en: 'The form should look like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 表单应如下所示：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_18.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B21088_05_18.png)'
- en: 'Figure 5.18: The Google OAuth client ID creation form'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.18：Google OAuth客户端ID创建表单
- en: 'Click the **CREATE** button. You will get the **Client ID** and **Client secret**
    keys:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**创建**按钮。您将获得**客户端ID**和**客户端密钥**：
- en: '![](img/B21088_05_19.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_19.png)'
- en: 'Figure 5.19: Google OAuth – Client ID and Client secret'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.19：Google OAuth – 客户端ID和客户端密钥
- en: 'Create a new file inside your project’s root directory and name it `.env`.
    The `.env` file will contain key-value pairs of environment variables. Add the
    OAuth2 credentials to the new file, as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在您项目的根目录内创建一个新文件，命名为`.env`。`.env`文件将包含环境变量的键值对。将OAuth2凭证添加到新文件中，如下所示：
- en: '[PRE22]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Replace `xxxx` with the OAuth2 key and secret respectively.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 将`xxxx`分别替换为OAuth2密钥和密钥。
- en: To facilitate the separation of configuration from code, we are going to use
    `python-decouple`. You already used this library in *Chapter 2*, *Enhancing Your
    Blog and Adding Social Features*.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于将配置与代码分离，我们将使用`python-decouple`。您已经在*第2章*，*增强您的博客并添加社交功能*中使用了这个库。
- en: 'Install `python-decouple` via `pip` by running the following command:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 通过运行以下命令使用`pip`安装`python-decouple`：
- en: '[PRE23]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Edit the `settings.py` file of your project and add the following code to it:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑您项目的`settings.py`文件，并向其中添加以下代码：
- en: '[PRE24]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY` and `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET` settings
    are loaded from the environment variables defined in the `.env` file.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`SOCIAL_AUTH_GOOGLE_OAUTH2_KEY`和`SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET`设置是从`.env`文件中定义的环境变量加载的。'
- en: 'Edit the `registration/login.html` template of the `account` application and
    append the following code highlighted in bold at the bottom of the `content` block:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`registration/login.html`模板，并在`content`块的底部添加以下加粗的代码：
- en: '[PRE25]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Use the `runserver_plus` management command provided by Django Extensions to
    run the development server, as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Django Extensions提供的`runserver_plus`管理命令来运行开发服务器，如下所示：
- en: '[PRE26]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open `https://mysite.com:8000/account/login/` in your browser. The login page
    should now look as follows:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`https://mysite.com:8000/account/login/`。登录页面现在应如下所示：
- en: '![](img/B21088_05_20.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_20.png)'
- en: 'Figure 5.20: The login page including the button for Google authentication'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.20：包含Google身份验证按钮的登录页面
- en: 'Click on the **Sign in with Google** button. You will see the following screen:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**使用Google登录**按钮。您将看到以下屏幕：
- en: '![](img/B21088_05_21.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_05_21.png)'
- en: 'Figure 5.21: The Google application authorization screen'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.21：谷歌应用程序授权屏幕
- en: Click on your Google account to authorize the application. You will be logged
    in and redirected to the dashboard page of your site. Remember that you have set
    this URL in the `LOGIN_REDIRECT_URL` setting. As you can see, adding social authentication
    to your site is pretty straightforward.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 点击您的谷歌账户以授权应用程序。您将被登录并重定向到您网站的仪表板页面。请记住，您已在`LOGIN_REDIRECT_URL`设置中设置了此URL。如您所见，将社交认证添加到您的网站相当简单。
- en: You have now added social authentication to your project with Google. You can
    easily implement social authentication with other online services using Python
    Social Auth. In the next section, we will address creating user profiles when
    registering with social authentication.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在已将社交认证添加到您的项目，并使用Google实现了社交认证。您可以使用Python Social Auth轻松实现其他在线服务的社交认证。在下一节中，我们将讨论使用社交认证注册时创建用户配置文件的问题。
- en: Creating a profile for users that register with social authentication
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为使用社交认证注册的用户创建配置文件
- en: When a user authenticates using social authentication, a new `User` object is
    created if there isn’t an existing user associated with that social profile. Python
    Social Auth uses a pipeline consisting of a set of functions that are executed
    in a specific order during the authentication flow. These functions take care
    of retrieving any user details, creating a social profile in the database, and
    associating it with an existing user or creating a new one.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户使用社交认证进行身份验证时，如果该社交配置文件没有关联现有用户，则会创建一个新的`User`对象。Python Social Auth使用一个由一系列函数组成的管道，这些函数在身份验证流程中以特定顺序执行。这些函数负责检索任何用户详情，在数据库中创建一个社交配置文件，并将其与现有用户关联或创建一个新的用户。
- en: Currently, no `Profile` object is created when new users are created via social
    authentication. We will add a new step to the pipeline to automatically create
    a `Profile` object in the database when a new user is created.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，当通过社交认证创建新用户时，不会创建新的`Profile`对象。我们将向管道添加一个新步骤，以便在创建新用户时自动在数据库中创建一个`Profile`对象。
- en: 'Add the following `SOCIAL_AUTH_PIPELINE` setting to the `settings.py` file
    of your project:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下`SOCIAL_AUTH_PIPELINE`设置添加到您的项目的`settings.py`文件中：
- en: '[PRE27]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This is the default authentication pipeline used by Python Social Auth. It consists
    of several functions that perform different tasks when authenticating a user.
    You can find more details about the default authentication pipeline at [https://python-social-auth.readthedocs.io/en/latest/pipeline.html](https://python-social-auth.readthedocs.io/en/latest/pipeline.html).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这是Python Social Auth使用的默认身份验证管道。它由执行不同任务的多个函数组成。您可以在[https://python-social-auth.readthedocs.io/en/latest/pipeline.html](https://python-social-auth.readthedocs.io/en/latest/pipeline.html)找到有关默认身份验证管道的更多详细信息。
- en: Let’s build a function that creates a `Profile` object in the database whenever
    a new user is created. We will then add this function to the social authentication
    pipeline.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们构建一个函数，在创建新用户时在数据库中创建一个`Profile`对象。然后我们将把这个函数添加到社交认证管道中。
- en: 'Edit the `account/authentication.py` file and add the following code to it:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account/authentication.py`文件，并向其中添加以下代码：
- en: '[PRE28]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The `create_profile` function takes two required arguments:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`create_profile`函数接受两个必需参数：'
- en: '`backend`: The social auth backend used for user authentication. Remember that
    you added the social authentication backends to the `AUTHENTICATION_BACKENDS`
    setting in your project.'
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`backend`：用于用户认证的社交认证后端。请记住，您已将社交认证后端添加到项目的`AUTHENTICATION_BACKENDS`设置中。'
- en: '`user`: The `User` instance of the new or existing authenticated user.'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`：新或现有已验证用户的`User`实例。'
- en: You can check the different arguments that are passed to the pipeline functions
    at [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline).
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline)检查传递给管道函数的不同参数。
- en: In the `create_profile` function, we check that a `user` object is present and
    we use the `get_or_create()` method to look up a `Profile` object for the given
    user, and we create one if necessary.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在`create_profile`函数中，我们检查是否存在`user`对象，并使用`get_or_create()`方法查找给定用户的`Profile`对象，并在必要时创建一个。
- en: 'Now, we need to add the new function to the authentication pipeline. Add the
    following line highlighted in bold to the `SOCIAL_AUTH_PIPELINE` setting in your
    `settings.py` file:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: We have added the `create_profile` function after `social_core.pipeline.create_user`.
    At this point, a `User` instance is available. The user can be an existing user
    or a new one created in this step of the pipeline. The `create_profile` function
    uses the `User` instance to look up the related `Profile` object and create a
    new one if necessary.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Access the user list in the administration site at `https://mysite.com:8000/admin/auth/user/`.
    Remove any users created through social authentication.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Then, open `https://mysite.com:8000/account/login/` and perform social authentication
    for the user you deleted. A new user will be created and now a `Profile` object
    will be created as well. Access `https://mysite.com:8000/admin/account/profile/`
    to verify that a profile has been created for the new user.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully added the functionality to create the user profile automatically
    for social authentication.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Python Social Auth also offers a pipeline mechanism for the disconnection flow.
    You can find more details at [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline).
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you significantly improved your social site authentication
    capabilities by creating an email-based authentication backend and adding social
    authentication with Google. You also improved the user experience by providing
    feedback for their actions using the Django messages framework. Finally, you customized
    the authentication pipeline to create user profiles for new users automatically.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will create an image bookmarking system. You will learn
    about many-to-many relationships and customizing the behavior of forms. You will
    learn how to generate image thumbnails and how to build AJAX functionalities using
    JavaScript and Django.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Source code for this chapter – [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05)
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Django messages framework – [https://docs.djangoproject.com/en/5.0/ref/contrib/messages/](https://docs.djangoproject.com/en/5.0/ref/contrib/messages/)
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom authentication sources – [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources)
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic primary key fields – [https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields](https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields)
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Social Auth – [https://github.com/python-social-auth](https://github.com/python-social-auth)
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 社交认证 – [https://github.com/python-social-auth](https://github.com/python-social-auth)
- en: Python Social Auth’s authentication backends – [https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends](https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends)
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 社交认证的认证后端 – [https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends](https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends)
- en: Django allowed hosts setting – [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts)
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 允许的主机设置 – [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts)
- en: Django Extensions documentation – [https://django-extensions.readthedocs.io/en/latest/](https://django-extensions.readthedocs.io/en/latest/)
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 扩展文档 – [https://django-extensions.readthedocs.io/en/latest/](https://django-extensions.readthedocs.io/en/latest/)
- en: Google’s OAuth2 implementation – [https://developers.google.com/identity/protocols/OAuth2](https://developers.google.com/identity/protocols/OAuth2)
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google 的 OAuth2 实现 – [https://developers.google.com/identity/protocols/OAuth2](https://developers.google.com/identity/protocols/OAuth2)
- en: Google API credentials – [https://console.developers.google.com/apis/credentials](https://console.developers.google.com/apis/credentials)
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google API 凭据 – [https://console.developers.google.com/apis/credentials](https://console.developers.google.com/apis/credentials)
- en: Python Social Auth pipeline – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html](https://python-social-auth.readthedocs.io/en/latest/pipeline.html)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 社交认证管道 – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html](https://python-social-auth.readthedocs.io/en/latest/pipeline.html)
- en: Extending the Python Social Auth pipeline – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline)
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展 Python 社交认证管道 – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline)
- en: Python Social Auth pipeline for disconnection – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline)
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 社交认证断开连接管道 – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline)
