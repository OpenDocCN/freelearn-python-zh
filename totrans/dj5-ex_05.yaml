- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Implementing Social Authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you built user registration and authentication into
    your website. You implemented password change, reset, and recovery functionalities,
    and you learned how to create a custom profile model for your users.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will add social authentication to your site using Google.
    You will use **Python Social Auth for Django** to implement social authentication
    using OAuth 2.0, the industry-standard protocol for authorization. You will also
    modify the social authentication pipeline to create a user profile for new users
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the messages framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a custom authentication backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Preventing users from using an existing email
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding social authentication with Python Social Auth
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the development server through HTTPS using Django Extensions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding authentication using Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a profile for users that register with social authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 5.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.1: Diagram of functionalities built in Chapter 5'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will generate success and error messages in the `edit`
    view using the Django messages framework. You will build a new authentication
    backend named `EmailAuthBackend` for users to authenticate using their email addresses.
    You will serve your site over HTTPS during development using Django Extensions,
    and you will implement social authentication with Google on your site using Python
    Social Auth. Users will be redirected to the `dashboard` view after successful
    authentication. You will customize the authentication pipeline to create user
    profiles automatically when a new user is created with social authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05).
  prefs: []
  type: TYPE_NORMAL
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all requirements
    at once with the `python` `-m` `pip` `install` `-r` `requirements.txt` command.
  prefs: []
  type: TYPE_NORMAL
- en: Using the messages framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When users are interacting with the platform, there are many cases where you
    might want to inform them about the result of specific actions, such as successfully
    creating an object in the database or successfully submitting a form.
  prefs: []
  type: TYPE_NORMAL
- en: Django has a built-in messages framework that allows you to display one-time
    notifications to your users. This enhances user experience by providing immediate
    feedback on their actions, making the interface more intuitive and user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: The messages framework is located at `django.contrib.messages` and is included
    in the default `INSTALLED_APPS` list of the `settings.py` file when you create
    new projects using `python manage.py startproject`. The settings file also contains
    the `django.contrib.messages.middleware.MessageMiddleware` middleware in the `MIDDLEWARE`
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The messages framework provides a simple way to add messages to users. Messages
    are stored in a cookie by default (falling back to session storage), and they
    are displayed and cleared in the next request from the user. You can use the messages
    framework in your views by importing the `messages` module and adding new messages
    with simple shortcuts, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You can create new messages using the `add_message()` method or any of the
    following shortcut methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`success()`: Success messages are used to display when an action was successful'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`info()`: Informational messages'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`warning()`: This shows that a failure has not yet occurred but it may be imminent'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error()`: This shows that an action was not successful or a failure occurred'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`debug()`: This shows debug messages that will be removed or ignored in a production
    environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s add messages to the project. The messages framework applies globally to
    the project. We will use the base template to display any available messages to
    the client. This will allow us to notify the client of the results of any action
    on any page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `templates/base.html` template of the `account` application and add
    the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The messages framework includes the `django.contrib.messages.context_processors.messages`
    context processor, which adds a `messages` variable to the request context. You
    can find it in the `context_processors` list in the `TEMPLATES` setting of your
    project. You can use the `messages` variable in templates to display all existing
    messages to the user.
  prefs: []
  type: TYPE_NORMAL
- en: A context processor is a Python function that takes the request object as an
    argument and returns a dictionary that gets added to the request context. You
    will learn how to create your own context processors in *Chapter 8*, *Building
    an Online Shop*.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s modify the `edit` view to use the messages framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: A success message is generated when users successfully update their profile.
    If any of the forms contain invalid data, an error message is generated instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/account/edit/` in your browser and edit the profile
    of the user. You should see the following message when the profile is successfully
    updated:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A green screen with white text  Description automatically generated with
    low confidence](img/B21088_05_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.2: The successfully edited profile message'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter an invalid date in the **Date of birth** field and submit the form again.
    You should see the following message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B21088_05_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.3: The error updating profile message'
  prefs: []
  type: TYPE_NORMAL
- en: Generating messages to inform your users about the results of their actions
    is straightforward. You can easily add messages to other views as well.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the messages framework at [https://docs.djangoproject.com/en/5.0/ref/contrib/messages/](https://docs.djangoproject.com/en/5.0/ref/contrib/messages/).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we’ve built all the functionality related to user authentication and
    profile editing, we will dig deeper into customizing authentication. We will learn
    how to build custom backend authentication so that users can log in to the site
    using their email addresses.
  prefs: []
  type: TYPE_NORMAL
- en: Building a custom authentication backend
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Django allows you to authenticate users against different sources, such as
    the built-in Django authentication system, external authentication systems like
    **Lightweight Directory Access Protocol** (**LDAP**) servers, or even third-party
    providers. The `AUTHENTICATION_BACKENDS` setting includes a list of authentication
    backends available in the project. Django enables you to specify multiple authentication
    backends for flexible authentication schemes. The default value of the `AUTHENTICATION_BACKENDS`
    setting is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The default `ModelBackend` authenticates users against the database using the
    `User` model of `django.contrib.auth`. This is suitable for most web projects.
    However, you can create custom backends to authenticate your users against other
    sources.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more information about customizing authentication at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources).
  prefs: []
  type: TYPE_NORMAL
- en: Whenever the `authenticate()` function of `django.contrib.auth` is used, Django
    tries to authenticate the user against each of the backends defined in `AUTHENTICATION_BACKENDS`
    one by one, until one of them successfully authenticates the user. Only if all
    of the backends fail to authenticate will the user not be authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django provides a simple way to define your own authentication backends. An
    authentication backend is a class that provides the following two methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`authenticate()`: It takes the `request` object and user credentials as parameters.
    It has to return a `user` object that matches those credentials if the credentials
    are valid, or `None` otherwise. The `request` parameter is an `HttpRequest` object,
    or `None` if it’s not provided to the `authenticate()` function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_user()`: It takes a user ID parameter and has to return a `user` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom authentication backend is as simple as writing a Python class
    that implements both methods. Let’s create an authentication backend to allow
    users to authenticate on the site using their email address instead of their username.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `account` application directory and name it `authentication.py`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code is a simple authentication backend. The `authenticate()`
    method receives a `request` object and the `username` and `password` optional
    parameters. We could use different parameters, but we use `username` and `password`
    to make our backend work with the authentication framework views right away. The
    preceding code works as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`authenticate()`: The user with the given email address is retrieved, and the
    password is checked using the built-in `check_password()` method of the user model.
    This method handles the password hashing to compare the given password with the
    password stored in the database. Two different QuerySet exceptions are captured:
    `DoesNotExist` and `MultipleObjectsReturned`. The `DoesNotExist` exception is
    raised if no user is found with the given email address. The `MultipleObjectsReturned`
    exception is raised if multiple users are found with the same email address. We
    will modify the registration and edit views later to prevent users from using
    an existing email address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_user()`: You get a user through the ID provided in the `user_id` parameter.
    Django uses the backend that authenticated the user to retrieve the `User` object
    for the duration of the user session. **pk** is a short for **primary key**, which
    is a unique identifier for each record in the database. Every Django model has
    a field that serves as its primary key. By default, the primary key is the automatically
    generated ID field. You can find more information about automatic primary key
    fields at [https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields](https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of your project and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding setting, we keep the default `ModelBackend` that is used to
    authenticate with the username and password and include our own email-based authentication
    backend `EmailAuthBackend`.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:8000/account/login/` in your browser. Remember that Django
    will try to authenticate the user against each of the backends, so now you should
    be able to log in seamlessly using your username or email account.
  prefs: []
  type: TYPE_NORMAL
- en: The user credentials will be checked using `ModelBackend`, and if no user is
    returned, the credentials will be checked using `EmailAuthBackend`.
  prefs: []
  type: TYPE_NORMAL
- en: The order of the backends listed in the `AUTHENTICATION_BACKENDS` setting matters.
    If the same credentials are valid for multiple backends, Django will authenticate
    the user using the first backend in the list that successfully validates these
    credentials. This means Django does not proceed to check the remaining backends
    once a match is found.
  prefs: []
  type: TYPE_NORMAL
- en: Preventing users from using an existing email address
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `User` model of the authentication framework does not prevent creating users
    with the same email address. If two or more user accounts share the same email
    address, we won’t be able to discern which user is authenticating. Now that users
    can log in using their email address, we have to prevent users from registering
    with an existing email address.
  prefs: []
  type: TYPE_NORMAL
- en: We will now change the user registration form to prevent multiple users from
    registering with the same email address.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file of the `account` application and add the following
    lines highlighted in bold to the `UserRegistrationForm` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have added validation for the `email` field that prevents users from registering
    with an existing email address. We build a QuerySet to look up existing users
    with the same email address. We check whether there are any results with the `exists()`
    method. The `exists()` method returns `True` if the QuerySet contains any results,
    and `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following lines highlighted in bold to the `UserEditForm` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: In this case, we have added validation for the `email` field that prevents users
    from changing their existing email address to an existing email address of another
    user. We exclude the current user from the QuerySet. Otherwise, the current email
    address of the user would be considered an existing email address, and the form
    won’t validate.
  prefs: []
  type: TYPE_NORMAL
- en: Adding social authentication to your site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Social authentication is a widely used feature that allows users to authenticate
    using their existing account of a service provider using **single sign-on** (**SSO**).
    The authentication process allows users to authenticate into the site using their
    existing account from social services like Google, Facebook, or Twitter. In this
    section, we will add social authentication to the site using Google.
  prefs: []
  type: TYPE_NORMAL
- en: To implement social authentication, we will use the **OAuth 2.0** industry-standard
    protocol for authorization. **OAuth** stands for **Open Authorization**. OAuth
    2.0 is a standard designed to allow a website or application to access resources
    hosted by other web apps on behalf of a user. Google uses the OAuth 2.0 protocol
    for authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Python Social Auth is a Python module that simplifies the process of adding
    social authentication to your website. Using this module, you can let your users
    log in to your website using their accounts from other services. You can find
    the code for this module at [https://github.com/python-social-auth/social-app-django](https://github.com/python-social-auth/social-app-django).
  prefs: []
  type: TYPE_NORMAL
- en: This module comes with authentication backends for different Python frameworks,
    including Django.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This will install Python Social Auth.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add `social_django` to the `INSTALLED_APPS` setting in the `settings.py`
    file of the project as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the default application to add Python Social Auth to Django projects.
    Now, run the following command to sync Python Social Auth models with your database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see that the migrations for the default application are applied
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Python Social Auth includes authentication backends for multiple services. You
    can find the list with all available backends at [https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends](https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends).
  prefs: []
  type: TYPE_NORMAL
- en: We will add social authentication to our project, allowing our users to authenticate
    with the Google backend.
  prefs: []
  type: TYPE_NORMAL
- en: First, we need to add the social login URL patterns to the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the main `urls.py` file of the `bookmarks` project and include the `social_django`
    URL patterns as follows. The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Our web application is currently accessible via the localhost IP, `127.0.0.1`,
    or using the `localhost` hostname. Google allows the redirection of users to `localhost`
    after successful authentication, but other social services expect a domain name
    for the URL redirect. In this project, we will simulate a real environment by
    serving our site under a domain name in our local machine.
  prefs: []
  type: TYPE_NORMAL
- en: Locate the `hosts` file of your machine. If you are using Linux or macOS, the
    `hosts` file is located at `/etc/hosts`. If you are using Windows, the `hosts`
    file is located at `C:\Windows\System32\Drivers\etc\hosts`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `hosts` file of your machine and add the following line to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This will tell your computer to point the `mysite.com` hostname to your own
    machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s verify that the hostname association worked. Run the development server
    using the following command from the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://mysite.com:8000/account/login/` in your browser. You will see
    the following error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4: The invalid host header message'
  prefs: []
  type: TYPE_NORMAL
- en: Django controls the hosts that can serve the application using the `ALLOWED_HOSTS`
    setting. This is a security measure to prevent HTTP host header attacks. Django
    will only allow the hosts included in this list to serve the application.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about the `ALLOWED_HOSTS` setting at [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of the project and modify the `ALLOWED_HOSTS` setting
    as follows. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Besides the `mysite.com` host, we have explicitly included `localhost` and `127.0.0.1`.
    This allows access to the site through `localhost` and `127.0.0.1`, which is the
    default Django behavior when `DEBUG` is `True` and `ALLOWED_HOSTS` is empty.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://mysite.com:8000/account/login/` again in your browser. Now, you
    should see the login page of the site instead of an error.
  prefs: []
  type: TYPE_NORMAL
- en: Running the development server through HTTPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we are going to run the development server through HTTPS to simulate a
    real environment where the content exchanged with the browser is secured. This
    will help us later in *Chapter 6*, *Sharing Content on Your Website*, to serve
    our site securely and load our image bookmarking tool on top of any secure website.
    The **Transport Layer Security** (**TLS**) protocol is the standard for serving
    websites through a secure connection. The TLS predecessor is the **Secure Sockets
    Layer** (**SSL**).
  prefs: []
  type: TYPE_NORMAL
- en: Although SSL is now deprecated, you will find references to both the terms TLS
    and SSL in multiple libraries and online documentation. The Django development
    server is not able to serve your site through HTTPS since that is not its intended
    use. To test the social authentication functionality serving the site through
    HTTPS, we are going to use the RunServerPlus extension of the package Django Extensions.
    This package contains a collection of useful Django tools. Please note that you
    should never use the development server to run your site in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to install Django Extensions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will need to install Werkzeug, which contains a debugger layer required
    by the RunServerPlus extension of Django Extensions. Use the following command
    to install Werkzeug:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, use the following command to install pyOpenSSL, which is required
    to use the SSL/TLS functionality of RunServerPlus:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of your project and add Django Extensions to the
    `INSTALLED_APPS` setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, use the `runserver_plus` management command provided by Django Extensions
    to run the development server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We have provided a file name to the `runserver_plus` command for the SSL/TLS
    certificate. Django Extensions will generate a key and certificate automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Open `https://mysite.com:8000/account/login/` in your browser. Now, you are
    accessing your site through HTTPS. Note we are now using `https://` instead of
    `http://`.
  prefs: []
  type: TYPE_NORMAL
- en: Your browser will show a security warning because you are using a self-generated
    certificate instead of a certificate trusted by a **certification authority**
    (**CA**).
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Google Chrome, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.5: The safety error in Google Chrome'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, click on **Advanced** and then click on **Proceed to mysite.com
    (unsafe)**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Safari, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.6: The safety error in Safari'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, click on **Show details** and then click on **visit this website**.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Microsoft Edge, you will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.7: The safety error in Microsoft Edge'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, click on **Advanced** and then on **Continue to mysite.com (unsafe)**.
  prefs: []
  type: TYPE_NORMAL
- en: If you are using any other browser, access the advanced information displayed
    by your browser and accept the self-signed certificate so that your browser trusts
    the certificate.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see that the URL starts with `https://` and, in some cases, a lock
    icon that indicates that the connection is secure. Some browsers might display
    a broken lock icon because you are using a self-signed certificate instead of
    a trusted one. That won’t be a problem for our tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.8: The URL with the secured connection icon'
  prefs: []
  type: TYPE_NORMAL
- en: Django Extensions includes many other interesting tools and features. You can
    find more information about this package at https://django-extensions.readthedocs.io/en/latest/.
  prefs: []
  type: TYPE_NORMAL
- en: You can now serve your site through HTTPS during development.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication using Google
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Google offers social authentication using OAuth 2.0, which allows users to sign
    in with Google accounts. You can read about Google’s OAuth2 implementation at
    [https://developers.google.com/identity/protocols/OAuth2](https://developers.google.com/identity/protocols/OAuth2).
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement authentication using Google, add the following line highlighted
    in bold to the `AUTHENTICATION_BACKENDS` setting in the `settings.py` file of
    your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'First, you will need to create an API key in your Google Developer Console.
    Open [https://console.cloud.google.com/projectcreate](https://console.cloud.google.com/projectcreate)
    in your browser. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.9: The Google project creation form'
  prefs: []
  type: TYPE_NORMAL
- en: Under **Project name**, enter `Bookmarks` and click the **CREATE** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the new project is ready, make sure the project is selected in the top
    navigation bar as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.10: The Google Developer Console top navigation bar'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the project is created, under **APIs & Services**, click on **Credentials**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.11: Google APIs and services menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.12: Google API creation of API credentials'
  prefs: []
  type: TYPE_NORMAL
- en: Then, click on **CREATE CREDENTIALS** and click on **OAuth client ID**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Google will ask you to configure the consent screen first, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.13: The alert to configure the OAuth consent screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will configure the page that will be shown to users to give their consent
    to access your site with their Google account. Click on the **CONFIGURE CONSENT
    SCREEN** button. You will be redirected to the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.14: The User Type selection in the Google OAuth consent screen setup'
  prefs: []
  type: TYPE_NORMAL
- en: 'Choose **External** for **User Type** and click the **CREATE** button. You
    will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.15: The Google OAuth consent screen setup'
  prefs: []
  type: TYPE_NORMAL
- en: Under **App name**, enter `Bookmarks` and select your email for **User support
    email**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Authorised domains**, enter `mysite.com` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated with low confidence](img/B21088_05_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.16: Google OAuth authorized domains'
  prefs: []
  type: TYPE_NORMAL
- en: Enter your email under **Developer contact information** and click on **SAVE
    AND CONTINUE**.
  prefs: []
  type: TYPE_NORMAL
- en: In step 2, **Scopes**, don’t change anything and click on **SAVE AND CONTINUE**.
  prefs: []
  type: TYPE_NORMAL
- en: 'In step 3, **Test users,** add your Google user to **Test users** and click
    on **SAVE AND CONTINUE** as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.17: Google OAuth test users'
  prefs: []
  type: TYPE_NORMAL
- en: You will see a summary of your consent screen configuration. Click on **BACK
    TO DASHBOARD**.
  prefs: []
  type: TYPE_NORMAL
- en: In the menu on the left sidebar, click on **Credentials**, click again on **Create
    credentials**, and then on **OAuth client ID**.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the next step, enter the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application type**: Select **Web application**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Enter `Bookmarks`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorised JavaScript origins**: Add `https://mysite.com:8000`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authorised redirect URIs**: Add `https://mysite.com:8000/social-auth/complete/google-oauth2/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The form should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_05_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.18: The Google OAuth client ID creation form'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **CREATE** button. You will get the **Client ID** and **Client secret**
    keys:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.19: Google OAuth – Client ID and Client secret'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside your project’s root directory and name it `.env`.
    The `.env` file will contain key-value pairs of environment variables. Add the
    OAuth2 credentials to the new file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Replace `xxxx` with the OAuth2 key and secret respectively.
  prefs: []
  type: TYPE_NORMAL
- en: To facilitate the separation of configuration from code, we are going to use
    `python-decouple`. You already used this library in *Chapter 2*, *Enhancing Your
    Blog and Adding Social Features*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install `python-decouple` via `pip` by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of your project and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `SOCIAL_AUTH_GOOGLE_OAUTH2_KEY` and `SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET` settings
    are loaded from the environment variables defined in the `.env` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `registration/login.html` template of the `account` application and
    append the following code highlighted in bold at the bottom of the `content` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the `runserver_plus` management command provided by Django Extensions to
    run the development server, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `https://mysite.com:8000/account/login/` in your browser. The login page
    should now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.20: The login page including the button for Google authentication'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Sign in with Google** button. You will see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_05_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.21: The Google application authorization screen'
  prefs: []
  type: TYPE_NORMAL
- en: Click on your Google account to authorize the application. You will be logged
    in and redirected to the dashboard page of your site. Remember that you have set
    this URL in the `LOGIN_REDIRECT_URL` setting. As you can see, adding social authentication
    to your site is pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: You have now added social authentication to your project with Google. You can
    easily implement social authentication with other online services using Python
    Social Auth. In the next section, we will address creating user profiles when
    registering with social authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a profile for users that register with social authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a user authenticates using social authentication, a new `User` object is
    created if there isn’t an existing user associated with that social profile. Python
    Social Auth uses a pipeline consisting of a set of functions that are executed
    in a specific order during the authentication flow. These functions take care
    of retrieving any user details, creating a social profile in the database, and
    associating it with an existing user or creating a new one.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, no `Profile` object is created when new users are created via social
    authentication. We will add a new step to the pipeline to automatically create
    a `Profile` object in the database when a new user is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following `SOCIAL_AUTH_PIPELINE` setting to the `settings.py` file
    of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This is the default authentication pipeline used by Python Social Auth. It consists
    of several functions that perform different tasks when authenticating a user.
    You can find more details about the default authentication pipeline at [https://python-social-auth.readthedocs.io/en/latest/pipeline.html](https://python-social-auth.readthedocs.io/en/latest/pipeline.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s build a function that creates a `Profile` object in the database whenever
    a new user is created. We will then add this function to the social authentication
    pipeline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `account/authentication.py` file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `create_profile` function takes two required arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`backend`: The social auth backend used for user authentication. Remember that
    you added the social authentication backends to the `AUTHENTICATION_BACKENDS`
    setting in your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`: The `User` instance of the new or existing authenticated user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can check the different arguments that are passed to the pipeline functions
    at [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline).
  prefs: []
  type: TYPE_NORMAL
- en: In the `create_profile` function, we check that a `user` object is present and
    we use the `get_or_create()` method to look up a `Profile` object for the given
    user, and we create one if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the new function to the authentication pipeline. Add the
    following line highlighted in bold to the `SOCIAL_AUTH_PIPELINE` setting in your
    `settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: We have added the `create_profile` function after `social_core.pipeline.create_user`.
    At this point, a `User` instance is available. The user can be an existing user
    or a new one created in this step of the pipeline. The `create_profile` function
    uses the `User` instance to look up the related `Profile` object and create a
    new one if necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Access the user list in the administration site at `https://mysite.com:8000/admin/auth/user/`.
    Remove any users created through social authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Then, open `https://mysite.com:8000/account/login/` and perform social authentication
    for the user you deleted. A new user will be created and now a `Profile` object
    will be created as well. Access `https://mysite.com:8000/admin/account/profile/`
    to verify that a profile has been created for the new user.
  prefs: []
  type: TYPE_NORMAL
- en: We have successfully added the functionality to create the user profile automatically
    for social authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Python Social Auth also offers a pipeline mechanism for the disconnection flow.
    You can find more details at [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you significantly improved your social site authentication
    capabilities by creating an email-based authentication backend and adding social
    authentication with Google. You also improved the user experience by providing
    feedback for their actions using the Django messages framework. Finally, you customized
    the authentication pipeline to create user profiles for new users automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will create an image bookmarking system. You will learn
    about many-to-many relationships and customizing the behavior of forms. You will
    learn how to generate image thumbnails and how to build AJAX functionalities using
    JavaScript and Django.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Source code for this chapter – [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter05)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Django messages framework – [https://docs.djangoproject.com/en/5.0/ref/contrib/messages/](https://docs.djangoproject.com/en/5.0/ref/contrib/messages/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom authentication sources – [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#other-authentication-sources)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic primary key fields – [https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields](https://docs.djangoproject.com/en/5.0/topics/db/models/#automatic-primary-key-fields)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Social Auth – [https://github.com/python-social-auth](https://github.com/python-social-auth)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Social Auth’s authentication backends – [https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends](https://python-social-auth.readthedocs.io/en/latest/backends/index.html#supported-backends)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django allowed hosts setting – [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django Extensions documentation – [https://django-extensions.readthedocs.io/en/latest/](https://django-extensions.readthedocs.io/en/latest/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google’s OAuth2 implementation – [https://developers.google.com/identity/protocols/OAuth2](https://developers.google.com/identity/protocols/OAuth2)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google API credentials – [https://console.developers.google.com/apis/credentials](https://console.developers.google.com/apis/credentials)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Social Auth pipeline – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html](https://python-social-auth.readthedocs.io/en/latest/pipeline.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the Python Social Auth pipeline – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#extending-the-pipeline)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python Social Auth pipeline for disconnection – [https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline](https://python-social-auth.readthedocs.io/en/latest/pipeline.html#disconnection-pipeline)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
