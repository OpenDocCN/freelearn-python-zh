["```py\nreturn_cart()\n```", "```py\ngoto_vege_counter()\n```", "```py\nweigh_items()\n```", "```py\nadd_price_tag()\n```", "```py\nscan_bar_code()\n```", "```py\nadd_billing()\n```", "```py\nadd_tax()\n```", "```py\ncalc_bill()\n```", "```py\nprint_invoice()\n```", "```py\nreceive_payment()\n```", "```py\nreturn_cart()\n```", "```py\ngoto_less_t10_counter()\n```", "```py\nreview_items()\n```", "```py\ncount_items()\n```", "```py\nscan_bar_code()\n```", "```py\nadd_billing()\n```", "```py\nadd_tax()\n```", "```py\ncalc_bill()\n```", "```py\nprint_invoice()\n```", "```py\nreceive_payment()\n```", "```py\nreturn_cart()\n```", "```py\ngotoGreatT10Counter()\n```", "```py\nreview_items()\n```", "```py\ncount_items()\n```", "```py\nscan_bar_code()\n```", "```py\nadd_billing()\n```", "```py\napply_coupon()\n```", "```py\nadd_tax()\n```", "```py\ncalc_bill()\n```", "```py\nprint_invoice()\n```", "```py\nreceive_payment()\n```", "```py\nreturn_cart()\n```", "```py\ngoto_electronics_counter()\n```", "```py\nreview_items()\n```", "```py\ntest_electronics()\n```", "```py\nscan_bar_code()\n```", "```py\nadd_billing()\n```", "```py\napply_coupon()\n```", "```py\nadd_tax()\n```", "```py\ncalc_bill()\n```", "```py\nprint_invoice()\n```", "```py\nreceive_payment()\n```", "```py\n    class VegCounter():\n    ```", "```py\n        def return_cart(self,*items):\n            cart_items = list(items)\n            return cart_items\n    ```", "```py\n        def goto_vege_counter(self):\n            return 'Vegetables & Dairy'\n    ```", "```py\n        def weigh_items(self,*weights,cart_items = None):\n            weight = list(weights)\n            item_weight = dict(zip(cart_items, weight))\n            return item_weight\n    ```", "```py\n        def add_price_tag(self,*units,weights = None):\n            pricetag = []\n            for item,price in zip(weights.items(),list(units)):\n                pricetag.append(item[1]*price)\n            return pricetag        \n    ```", "```py\n        def scan_bar_code(self,*scan):\n            codes = list(scan)\n            return codes\n    ```", "```py\n        def add_billing(self,codes=None,pricetag=None):\n            self.codes = codes\n            self.pricetag = pricetag\n            bill = dict(zip(self.codes, self.pricetag))\n            return bill\n    ```", "```py\n        def add_tax(self,*tax):\n            taxed = list(tax)\n            return taxed\n    ```", "```py\n        def calc_bill(self,bill,taxes,cart_items):\n            items = []\n            calc_bill = []\n            for item,tax in zip(bill.items(),taxes):\n                items.append(item[1])\n                calc_bill.append(item[1] + item[1]*tax)\n            finalbill = dict(zip(cart_items, calc_bill))\n            return finalbill\n    ```", "```py\n        def print_invoice(self,finalbill):\n            final_total = sum(finalbill.values())\n            print('**************ABC Megamart*****************')\n            print('***********------------------**************')\n            print('Counter Name: ', self.goto_vege_counter())\n            for item,price in finalbill.items():\n                print(item,\": \", price)\n            print('Total:',final_total)\n            print('***********------------------**************')\n    ```", "```py\n        def receive_payment(self,finalbill):\n            final_total = sum(finalbill.values())\n            print('**************ABC Megamart*****************')\n            print('***********------------------**************')\n            print('Counter Name: ', self.goto_vege_counter())\n            for item,price in finalbill.items():\n                print(item,\": \", price)\n            print('Total:',final_total)\n            print('***********------------------**************')\n            print('***************PAID************************')\n    ```", "```py\n    veg = VegCounter()\n    cart = veg.return_cart('onions','tomatoes','carrots','lettuce')\n    item_weight = veg.weigh_items(1,2,1.5,2.5,cart_items = cart)\n    pricetag = veg.add_price_tag(7,2,3,5,weights = item_weight)\n    codes = veg.scan_bar_code(113323,3434332,2131243,2332783)\n    bill = veg.add_billing(codes,pricetag)\n    taxes = veg.add_tax(0.04,0.03,0.035,0.025)\n    finalbill = veg.calc_bill(bill,taxes,cart)\n    veg.print_invoice(finalbill)\n    ```", "```py\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  Vegetables & Dairy\nonions :  7.28\ntomatoes :  4.12\ncarrots :  4.6575\nlettuce :  12.8125\nTotal: 28.87\n***********------------------**************\n```", "```py\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  Vegetables & Dairy\nonions :  7.28\ntomatoes :  4.12\ncarrots :  4.6575\nlettuce :  12.8125\nTotal: 28.87\n***********------------------**************\n***************PAID************************\n```", "```py\n    class LessThan10Counter():\n    …    \n    ```", "```py\n        def goto_less_t10_counter(self):\n              return 'Less than 10 counter'\n    ```", "```py\n         def review_items(self,item_type = None):\n            veg_cart = ['Vegetables', 'Dairy', 'Fruits']\n            if (item_type == 'Electronics'):\n                print(\"Move to Electronics Counter\")\n            elif (item_type in veg_cart):        \n                print(\"Move to Vege Counter\")\n    ```", "```py\n        def count_items(self,cart_items = None):\n            if len(cart_items)<=10:\n                print(\"Move to Less than 10 items counter\")\n            else:\n                print(\"Move to Greater than 10 items counter\")\n        …\n    ```", "```py\n    less10 = LessThan10Counter()\n    cart = less10.return_cart('paperclips','blue pens','stapler','pencils')\n    less10.review_items(item_type = ['stationary'])\n    less10.count_items(cart)\n    codes = less10.scan_bar_code(113323,3434332,2131243,2332783)\n    bill = less10.add_billing(10,15,12,14,codes = codes)\n    taxes = less10.add_tax(0.04,0.03,0.035,0.025)\n    finalbill = less10.calc_bill(bill,taxes,cart)\n    less10.print_invoice(finalbill)\n    less10.receive_payment(finalbill)\n    ```", "```py\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  Less than 10 counter\npaperclips :  10.4\nblue pens :  15.45\nstapler :  12.42\npencils :  14.35\nTotal: 52.620000000000005\n***********------------------**************\n***************PAID************************\n```", "```py\n    class GreaterThan10Counter():\n    …\n    ```", "```py\n        def goto_greater_t10_counter(self):\n            return 'Greater than 10 counter'\n     …   \n    ```", "```py\n        def apply_coupon(self):\n            coupon_discount = 0.1\n            return coupon_discount        \n       …     \n    ```", "```py\n    greater = GreaterThan10Counter()\n    cart = greater.return_cart('paper clips','blue pens','stapler','pencils','a4paper','a3paper','chart',\n                              'sketch pens','canvas','water color','acrylic colors')\n    greater.review_items(item_type = ['stationary'])\n    greater.count_items(cart)\n    codes = greater.scan_bar_code(113323,3434332,2131243,2332783)\n    bill = greater.add_billing(10,15,12,14,codes = codes)\n    taxes = greater.add_tax(0.04,0.03,0.035,0.025)\n    greater.apply_coupon()\n    finalbill = greater.calc_bill(bill,taxes,cart)\n    greater.print_invoice(finalbill)\n    greater.receive_payment(finalbill)\n    ```", "```py\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  Greater than 10 counter\npaper clips :  10.4\nblue pens :  15.45\nstapler :  12.42\npencils :  14.35\nTotal: 47.358000000000004\n***********------------------**************\n***************PAID************************\n```", "```py\n    class ElectronicsCounter():\n    …\n    ```", "```py\n        def goto_electronics_counter(self):\n            return 'Electronics counter'\n    ```", "```py\n          def test_electronics(self,*status):\n            teststatus = list(status)\n            return teststatus            \n    ```", "```py\n    electronics = ElectronicsCounter()\n    cart = electronics.return_cart('television','keyboard','mouse')\n    electronics.review_items(item_type = ['Electronics'])\n    electronics.test_electronics('pass','pass','pass')\n    codes = electronics.scan_bar_code(113323,3434332,2131243)\n    bill = electronics.add_billing(100,16,14,codes = codes)\n    taxes = electronics.add_tax(0.04,0.03,0.035)\n    electronics.apply_coupon()\n    finalbill = electronics.calc_bill(bill,taxes,cart)\n    electronics.print_invoice(finalbill)\n    electronics.receive_payment(finalbill)\n    ```", "```py\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  Greater than 10 counter\ntelevision :  104.0\nkeyboard :  16.48\nmouse :  14.49\nTotal: 134.97\n***********------------------**************\n***************PAID************************\n```", "```py\n    from abc import ABC, abstractmethod \n    class CommonCounter(ABC):\n        def __init__(self,items,name,scan,units,tax,item_type = None, weights = None, status = None):\n            self.items = items\n            self.name = name\n            self.scan = scan\n            self.units = units\n            self.tax = tax\n            self.item_type = item_type\n            self.weights = weights\n            self.status = status\n    ```", "```py\n        def return_cart(self):\n            cart_items = []\n            for i in self.items:\n                cart_items.append(i)\n            return cart_items\n        def goto_counter(self):\n            countername = self.name\n            return countername\n        def scan_bar_code(self):\n            codes = []\n            for i in self.scan:\n                codes.append(i)\n            return codes\n    ```", "```py\n    def add_billing(self):\n            self.codes = self.scan_bar_code()\n            pricetag = []\n            for i in self.units:\n                pricetag.append(i)\n            bill = dict(zip(self.codes, pricetag))\n            return bill\n         def add_tax(self):\n            taxed = []\n            for i in self.tax:\n                taxed.append(i)\n            return taxed\n         def calc_bill(self):\n            bill = self.add_billing()\n            items = []\n            cart_items = self.return_cart()\n            calc_bill = []\n            taxes = self.add_tax()\n            for item,tax in zip(bill.items(),taxes):\n                items.append(item[1])\n                calc_bill.append(item[1] + item[1]*tax)\n            finalbill = dict(zip(cart_items, calc_bill))\n            return finalbill\n    ```", "```py\n    def receive_payment(self):\n            finalbill = self.calc_bill()\n            final_total = sum(finalbill.values())\n            print('**************ABC Megamart*****************')\n            print('***********------------------**************')\n            print('Counter Name: ', self.goto_counter())\n            for item,price in finalbill.items():\n                print(item,\": \", price)\n            print('Total:',final_total)\n            print('***********------------------**************')\n            print('***************PAID************************')\n    ```", "```py\n    def apply_coupon(self):\n            return 0\n    ```", "```py\n    def weigh_items(self):\n            pass\n    def add_price_tag(self):\n            pass\n    def count_items(self):\n            pass\n    def test_electronics(self):\n            pass\n    ```", "```py\n    @abstractmethod\n        def review_items(self):\n            pass\n    ```", "```py\n    def pipeline_template(self):\n            self.return_cart()\n            self.goto_counter()\n            self.review_items()\n            self.count_items()\n            self.test_electronics()\n            self.weigh_items()\n            self.add_price_tag()\n            self.scan_bar_code()\n            self.add_billing()\n            self.add_tax()\n            self.apply_coupon()\n            self.calc_bill()\n            self.receive_payment()\n    ```", "```py\n    class VegeCounter(CommonCounter):\n        def review_items(self):\n            if ('Vegetables' in self.item_type):\n                print(\"Move to Vege Counter\")\n            if ('Dairy' in self.item_type):\n                print(\"Move to Vege Counter\")\n            if ('Fruits' in self.item_type):\n                print(\"Move to Vege Counter\")\n        def weigh_items(self):\n            item_weight = dict(zip(self.items, self.weights))\n            return item_weight\n        def add_price_tag(self):\n            pricetag = []\n            item_weight = self.weigh_items()\n            for item,price in zip(item_weight.items(),self.units):\n                pricetag.append(item[1]*price)\n            return pricetag        \n    ```", "```py\n    class ElectronicsCounter(CommonCounter):\n        def review_items(self):\n            if ('Electronics' in self.item_type):\n                print(\"Move to Electronics Counter\")\n          def test_electronics(self):\n            teststatus = []\n            for i in self.status:\n                teststatus.append(i)\n            return teststatus\n    ```", "```py\n    def run_pipeline(counter = CommonCounter):\n        counter.pipeline_template()\n    ```", "```py\n    run_pipeline(VegeCounter(items = ['onions', 'lettuce', 'apples', 'oranges'],\n                             name = ['Vegetable Counter'],\n                             scan = [113323,3434332,2131243,2332783],\n                             units = [10,15,12,14],\n                             tax = [0.04,0.03,0.035,0.025],\n                             item_type = ['Vegetables'],\n                             weights = [1,2,1.5,2.5]))\n    ```", "```py\nMove to Vege Counter\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  ['Vegetable Counter']\npaperclips :  10.4\nblue pens :  15.45\nstapler :  12.42\npencils :  14.35\nTotal: 52.620000000000005\n***********------------------**************\n***************PAID************************\n```", "```py\n    run_pipeline(ElectronicsCounter(items = ['television','keyboard','mouse'],\n                                    name = ['Electronics Counter'],\n                                    scan = [113323,3434332,2131243],\n                                    units = [100,16,14],\n                                    tax = [0.04,0.03,0.035],\n                                    item_type = ['Electronics'],\n                                    status = ['pass','pass','pass']))\n    ```", "```py\nMove to Electronics Counter\n**************ABC Megamart*****************\n***********------------------**************\nCounter Name:  ['Electronics Counter']\ntelevision :  104.0\nkeyboard :  16.48\nmouse :  14.49\nTotal: 134.97\n***********------------------**************\n***************PAID************************\n```"]