["```py\nself.win.title(\"Python GUI\")\n```", "```py\nself.win.title(\"Python Graphical User Interface\")     # new window title \n# self.mySQL = MySQL()                                # comment this line out\n```", "```py\nclass I18N(): \n    '''Internationalization''' \n    def __init__(self, language): \n        if    language == 'en': self.resourceLanguageEnglish() \n        elif  language == 'de': self.resourceLanguageGerman() \n        else: raise NotImplementedError('Unsupported language.') \n\n    def resourceLanguageEnglish(self): \n        self.title = \"Python Graphical User Interface\" \n\n    def resourceLanguageGerman(self): \n        self.title = 'Python Grafische Benutzeroberflaeche'\n```", "```py\nfrom Ch08_Code.LanguageResources import I18N \nclass OOP(): \n    def __init__(self, language='en'):  \n        self.win = tk.Tk()                # Create instance \n        self.i18n = I18N('de')            # Select different language \n        self.win.title(self.i18n.title)   # Add a title using self.i18n\n```", "```py\nclass I18N(): \n'''Internationalization''' \n    def __init__(self, language): \n        if   language == 'en': self.resourceLanguageEnglish() \n        elif language == 'de': self.resourceLanguageGerman() \n        else: raiseNotImplementedError('Unsupported language.') \n\n    def resourceLanguageEnglish(self): \n        self.title = \"Python Graphical User Interface\" \n\n        self.file  = \"File\" \n        self.new   = \"New\" \n        self.exit  = \"Exit\" \n        self.help  = \"Help\" \n        self.about = \"About\" \n\n        self.WIDGET_LABEL = ' Widgets Frame ' \n\n        self.disabled  = \"Disabled\" \n        self.unChecked = \"UnChecked\" \n        self.toggle    = \"Toggle\" \n\n        # Radiobutton list \n        self.colors   = [\"Blue\", \"Gold\", \"Red\"] \n        self.colorsIn = [\"in Blue\", \"in Gold\", \"in Red\"] \n\n        self.labelsFrame  = ' Labels within a Frame ' \n        self.chooseNumber = \"Choose a number:\" \n        self.label2       = \"Label 2\" \n\n        self.mgrFiles = ' Manage Files ' \n\n        self.browseTo = \"Browse to File...\" \n        self.copyTo   = \"Copy File To :   \"\n```", "```py\nfrom Ch08_Code.LanguageResources import I18N\nclass OOP(): \n    def __init__(self, language='en'):  \n        self.win = tk.Tk()              # Create instance \n        self.i18n = I18N('de')          # Select language \n        self.win.title(self.i18n.title) # Add a title \n\n    # Radiobutton callback function \n    def radCall(self): \n        radSel = self.radVar.get() \n        if   radSel == 0: self.widgetFrame.configure(text=\n                          self.i18n.WIDGET_LABEL + \n                          self.i18n.colorsIn[0]) \n        elif radSel == 1: self.widgetFrame.configure(text=\n                          self.i18n.WIDGET_LABEL + \n                          self.i18n.colorsIn[1]) \n        elif radSel == 2: self.widgetFrame.configure(text=\n                          self.i18n.WIDGET_LABEL + \n                          self.i18n.colorsIn[2])\n```", "```py\nclass I18N(): \n    '''Internationalization''' \n    def __init__(self, language):       \n        if   language == 'en': self.resourceLanguageEnglish() \n        elif language == 'de': self.resourceLanguageGerman() \n        else: raise NotImplementedError('Unsupported language.') \n\n    def resourceLanguageGerman(self): \n        self.file  = \"Datei\" \n        self.new   = \"Neu\" \n        self.exit  = \"Schliessen\" \n        self.help  = \"Hilfe\" \n        self.about = \"Ueber\" \n\n        self.WIDGET_LABEL = ' Widgets Rahmen ' \n\n        self.disabled  = \"Deaktiviert\" \n        self.unChecked = \"Nicht Markiert\" \n        self.toggle    = \"Markieren\" \n\n        # Radiobutton list \n        self.colors   = [\"Blau\", \"Gold\", \"Rot\"]     \n        self.colorsIn = [\"in Blau\", \"in Gold\", \"in Rot\"]   \n\n        self.labelsFrame  = ' Etiketten im Rahmen ' \n        self.chooseNumber = \"Waehle eine Nummer:\" \n        self.label2       = \"Etikette 2\" \n\n        self.mgrFiles = ' Dateien Organisieren ' \n\n        self.browseTo = \"Waehle eine Datei... \" \n        self.copyTo   = \"Kopiere Datei zu :   \"\n```", "```py\nclassOOP(): \n    def __init__(self, language='en'):  \n        self.win = tk.Tk()        # Create instance \n        self.i18n = I18N('de')    # Pass in language\n```", "```py\npip install pytz\n```", "```py\nimport pytz \nclass OOP():  \n    # TZ Button callback \n    def allTimeZones(self): \n        for tz in pytz.all_timezones: \n            self.scr.insert(tk.INSERT, tz + '\\n') \n\n    def createWidgets(self): \n        # Adding a TZ Button \n        self.allTZs = ttk.Button(self.widgetFrame,  \n                                 text=self.i18n.timeZones,  \n                                 command=self.allTimeZones) \n        self.allTZs.grid(column=0, row=9, sticky='WE')\n```", "```py\n# TZ Local Button callback \ndef localZone(self):    \n    from tzlocal import get_localzone \n    self.scr.insert(tk.INSERT, get_localzone()) \n\ndef createWidgets(self): \n    # Adding local TZ Button \n    self.localTZ = ttk.Button(self.widgetFrame, \n    text=self.i18n.localZone, command=self.localZone \n    self.localTZ.grid(column=1, row=9, sticky='WE')\n```", "```py\nself.timeZones = \"All Time Zones\" \nself.localZone = \"Local Zone\"\n```", "```py\nself.timeZones = \"Alle Zeitzonen\" \nself.localZone = \"Lokale Zone\"\n```", "```py\nimport pytz \nclass OOP(): \n    # Format local US time with TimeZone info \n    def getDateTime(self): \n        fmtStrZone = \"%Y-%m-%d %H:%M:%S %Z%z\" \n        # Get Coordinated Universal Time \n        utc = datetime.now(timezone('UTC')) \n        print(utc.strftime(fmtStrZone)) \n\n        # Convert UTC datetime object to Los Angeles TimeZone \n        la = utc.astimezone(timezone('America/Los_Angeles')) \n        print(la.strftime(fmtStrZone)) \n\n        # Convert UTC datetime object to New York TimeZone \n        ny = utc.astimezone(timezone('America/New_York')) \n        print(ny.strftime(fmtStrZone)) \n\n        # update GUI label with NY Time and Zone \n        self.lbl2.set(ny.strftime(fmtStrZone))        # <-- set Label 2\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom tkinter import ttk, scrolledtext, Menu, Spinbox, filedialog as fd, messagebox as mBox\nfrom queue import Queue \nfrom os import path  \nfrom Ch08_Code.ToolTip import ToolTip \nfrom Ch08_Code.LanguageResources import I18N\nfrom Ch08_Code.Logger import Logger, LogLevel \n\n# Module level GLOBALS \nGLOBAL_CONST = 42\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom tkinter import ttk, scrolledtext, Menu, Spinbox, \n                    filedialog as fd, messagebox as mBox \nfrom queue import Queue \nfrom os import path  \nimport Ch08_Code.ToolTip as tt \nfrom Ch08_Code.LanguageResources import I18N \nfrom Ch08_Code.Logger import Logger, LogLevel\nfrom Ch08_Code.Callbacks_Refactored import Callbacks     # <-- import the class\n\n# Module level GLOBALS \nGLOBAL_CONST = 42 \n\nclass OOP(): \n    def __init__(self):  \n        # Callback methods now in different module \n        self.callBacks = Callbacks(self)                 # <-- pass in self\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk \nfrom time import sleep \nfrom threading import Thread \nfrom pytz import all_timezones, timezone \nfrom datetime import datetime \n\nclass Callbacks(): \n    def __init__(self, oop): \n        self.oop = oop \n\n    def defaultFileEntries(self):  \n        self.oop.fileEntry.delete(0, tk.END) \n        self.oop.fileEntry.insert(0, 'Z:')          # bogus path \n        self.oop.fileEntry.config(state='readonly')          \n        self.oop.netwEntry.delete(0, tk.END) \n        self.oop.netwEntry.insert(0, 'Z:Backup')    # bogus path \n\n    # Combobox callback  \n    def _combo(self, val=0): \n        value = self.oop.combo.get() \n        self.oop.scr.insert(tk.INSERT, value + '\\n')\n\n    ...\n```", "```py\n#====================== \n# imports \n#====================== \nimport tkinter as tk\n```", "```py\nclass LogLevel: \n'''Define logging levels.''' \n    OFF     = 0 \n    MINIMUM = 1 \n    NORMAL  = 2 \n    DEBUG   = 3\n```", "```py\nimport os, time\nfrom datetime import datetime\nclass Logger:    \n    ''' Create a test log and write to it. '''      \n    #------------------------------------------------------- \n    def __init__(self, fullTestName, loglevel=LogLevel.DEBUG): \n        testName = os.path.splitext(os.path.basename(fullTestName))[0] \n        logName  = testName  + '.log'     \n\n        logsFolder = 'logs'           \n        if not os.path.exists(logsFolder):                      \n            os.makedirs(logsFolder, exist_ok = True) \n\n        self.log = os.path.join(logsFolder, logName)            \n        self.createLog() \n\n        self.loggingLevel = loglevel \n        self.startTime    = time.perf_counter() \n\n    #------------------------------------------------------ \n    def createLog(self):     \n        with open(self.log, mode='w', encoding='utf-8') as logFile: \n            logFile.write(self.getDateTime() +  \n                          '\\t\\t*** Starting Test ***\\n') \n        logFile.close()\n```", "```py\n#------------------------------------------------------ \ndef writeToLog(self, msg='', loglevel=LogLevel.DEBUG):  \n    # control how much gets logged \n    if loglevel > self.loggingLevel: \n        return \n\n    # open log file in append mode  \n    with open(self.log, mode='a', encoding='utf-8') as logFile: \n        msg = str(msg) \n        if msg.startswith('\\n'): \n            msg = msg[1:] \n        logFile.write(self.getDateTime() + '\\t\\t' + msg + '\\n') \n\n    logFile.close()\n```", "```py\nfrom os import path  \nfrom Ch08_Code.Logger import Logger \nclass OOP(): \n    def __init__(self):  \n        # create Logger instance \n        fullPath = path.realpath(__file__) \n        self.log = Logger(fullPath) \n        print(self.log)\n```", "```py\nif __name__ == '__main__': \n    language = 'en' \n    inst = I18N(language) \n    print(inst.title) \n\n    language = 'de' \n    inst = I18N(language) \n    print(inst.title)\n```", "```py\nif __name__ == '__main__': \n#====================== \n# Start GUI \n#====================== \n    oop = OOP() \n    print(oop.log) \n    oop.log.writeToLog('Test message') \n    oop.win.mainloop()\n```", "```py\nfrom Ch08_Code.Logger import Logger, LogLevel\n```", "```py\n# create Logger instance \nfullPath = path.realpath(__file__) \nself.log = Logger(fullPath) \n\n# create Log Level instance \nself.level = LogLevel()\n```", "```py\n# Format local US time with TimeZone info \ndef getDateTime(self): \n    fmtStrZone = \"%Y-%m-%d %H:%M:%S %Z%z\" \n    # Get Coordinated Universal Time \n    utc = datetime.now(timezone('UTC')) \n    self.oop.log.writeToLog(utc.strftime(fmtStrZone),  \n    self.oop.level.MINIMUM) \n\n    # Convert UTC datetime object to Los Angeles TimeZone \n    la = utc.astimezone(timezone('America/Los_Angeles')) \n    self.oop.log.writeToLog(la.strftime(fmtStrZone),  \n    self.oop.level.NORMAL) \n\n    # Convert UTC datetime object to New York TimeZone \n    ny = utc.astimezone(timezone('America/New_York')) \n    self.oop.log.writeToLog(ny.strftime(fmtStrZone),  \n    self.oop.level.DEBUG) \n\n    # update GUI label with NY Time and Zone \n    self.oop.lbl2.set(ny.strftime(fmtStrZone))\n```", "```py\n#------------------------------------------------------------------ \ndef setLoggingLevel(self, level):   \n    '''change logging level in the middle of a test.'''  \n    self.loggingLevel = level\n```", "```py\nif __name__ == '__main__': \n#====================== \n# Start GUI \n#====================== \noop = OOP() \n    oop.log.setLoggingLevel(oop.level.MINIMUM) \n    oop.log.writeToLog('Test message') \n    oop.win.mainloop()\n```", "```py\nimport unittest \n\nclass GuiUnitTests(unittest.TestCase): \n    pass \n\nif __name__ == '__main__': \n    unittest.main()\n```", "```py\nimport unittest \nfrom Ch08_Code.LanguageResources import I18N \n\nclass GuiUnitTests(unittest.TestCase): \n\n    def test_TitleIsEnglish(self): \n        i18n = I18N('en') \n        self.assertEqual(i18n.title, \n        \"Python Graphical User Interface\")\n```", "```py\nimport unittest \nfrom Ch08_Code.LanguageResources import I18N \n\nclass GuiUnitTests(unittest.TestCase): \n\n    def test_TitleIsEnglish(self): \n        i18n = I18N('en') \n        self.assertEqual(i18n.title, \"Python Graphical User \n        Interface\") \n\n    def test_TitleIsGerman(self): \n        i18n = I18N('en')            \n        self.assertEqual(i18n.title,  \n        'Python Grafische Benutzeroberfl' + \"u00E4\" + 'che')\n```", "```py\ndef test_TitleIsGerman(self): \n    # i18n = I18N('en')           # <= Bug in Unit Test \n    i18n = I18N('de')  \n    self.assertEqual(i18n.title, 'Python Grafische Benutzeroberfl' \n    + \"u00E4\" + 'che')\n```", "```py\nimport unittest\nfrom Ch08_Code.LanguageResources import I18N\nfrom Ch08_Code.GUI_Refactored import OOP as GUI\n\nclass GuiUnitTests(unittest.TestCase):\n    def test_TitleIsEnglish(self):\n        i18n = I18N('en')\n        self.assertEqual(i18n.title, \n        \"Python Graphical User Interface\")\n\n    def test_TitleIsGerman(self):\n        # i18n = I18N('en') # <= Bug in Unit Test\n        i18n = I18N('de') \n        self.assertEqual(i18n.title, \n        'Python Grafische Benutzeroberfl' + \"u00E4\" + 'che')\n\nclass WidgetsTestsEnglish(unittest.TestCase):\n    def setUp(self):\n        self.gui = GUI('en')\n\n    def tearDown(self):\n        self.gui = None\n\n    def test_WidgetLabels(self):\n        self.assertEqual(self.gui.i18n.file, \"File\")\n        self.assertEqual(self.gui.i18n.mgrFiles, ' Manage Files ')\n        self.assertEqual(self.gui.i18n.browseTo, \n        \"Browse to File...\")\n\n#========================== \nif __name__ == '__main__':\n unittest.main()\n```", "```py\nclass WidgetsTestsGerman(unittest.TestCase): \n    def setUp(self): \n        self.gui = GUI('de') \n\n    def test_WidgetLabels(self): \n        self.assertEqual(self.gui.i18n.file, \"Datei\") \n        self.assertEqual(self.gui.i18n.mgrFiles, ' Dateien Organisieren ') \n        self.assertEqual(self.gui.i18n.browseTo, \"Waehle eine Datei... \")                               \n\n    def test_LabelFrameText(self): \n        labelFrameText = self.gui.widgetFrame['text'] \n        self.assertEqual(labelFrameText, \" Widgets Rahmen \") \n        self.gui.radVar.set(1) \n        self.gui.callBacks.radCall() \n        labelFrameText = self.gui.widgetFrame['text'] \n        self.assertEqual(labelFrameText, \" Widgets Rahmen in Gold\")\n\n    ...\n```", "```py\nself.gui.widgetFrame['text']\n```", "```py\nself.gui.radVar.set(1) \nself.gui.callBacks.radCall()\n```"]