["```py\nimport cherrypy\nimport logondb\nclass Root(object): logon = logondb.LogonDB(path=\"/logon\", authenticated=\"/\", not_\nauthenticated=\"/goaway\", db=\"/tmp/pwd.db\")\n\t@cherrypy.expose\n\tdef index(self):\n\t\tusername=Root.logon.checkauth('/logon')\n\t\treturn '<html><body><p>Hello user <b>%s</b></p></body></\nhtml>'%username\n\t@cherrypy.expose\n\tdef goaway(self):\n\t\treturn '<html><body><h1>Not authenticated, please go away.</h1></\nbody></html>'\n\tgoaway._cp_config = {'tools.expires.on':True,'tools.expires.\nsecs':0,'tools.expires.force':True}\n\t@cherrypy.expose\n\tdef somepage(self):\n\t\tusername=Root.logon.checkauth('/logon',returntopage=True)\n\t\treturn '<html><body><h1>This is some page.</h1></body></html>'\nif __name__ == \"__main__\":\n\timport os.path\n\tcurrent_dir = os.path.dirname(os.path.abspath(__file__))\n\troot = Root() def connect(thread_index):\n\t\troot.logon.connect()\n\tcherrypy.engine.subscribe('start_thread', connect)\n\tcherrypy.quickstart(root,config={ ... } )\n\n```", "```py\nimport logon\nimport sqlite3\nfrom hashlib import sha1 as hash\nimport threading\nimport cherrypy class LogonDB(logon.Logon):\n\tdef __init__( self,path=\"/logon\", authenticated=\"/\", not_\nauthenticated=\"/\", db=\"/tmp/pwd.db\"):\n\t\tsuper().__init__(path,authenticated,not_authenticated)\n\t\tself.db=db\n\t\tself.initdb()\n\t@staticmethod\n\tdef _dohash(s):\n\t\th = hash()\n\t\th.update(s.encode())\n\t\treturn h.hexdigest() def checkpass(self,username,password):\n\t\tpassword = LogonDB._dohash(password)\n\t\tc = self.data.conn.cursor()\n\t\tc.execute(\"SELECT count(*) FROM pwdb WHERE username = ? AND \npassword = ?\",(username,password))\n\t\tif c.fetchone()[0]==1 :return True\n\t\treturn False\n\tdef initdb(self):\n\t\tconn=sqlite3.connect(self.db)\n\t\tc = conn.cursor() c.execute(\"CREATE TABLE IF NOT EXISTS pwdb(username unique not \nnull,password not null);\")\n\t\tc.execute('INSERT OR IGNORE INTO pwdb \nVALUES(\"admin\",?)',(LogonDB._dohash(\"admin\"),))\n\t\tconn.commit()\n\t\tconn.close()\n\t\tself.data=threading.local()\n\tdef connect(self):\n\t\t'''call once for every thread as sqlite connection objects cannot \nbe shared among threads.'''\n\t\tself.data.conn = sqlite3.connect(self.db)\n\n```", "```py\nimport cherrypy\nimport os.path\nfrom time import asctime\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\nclass Root(object):\n\t@cherrypy.expose def index(self):\n\t\treturn '''<html>\n\t\t<head><script type=\"text/javascript\" src=\"img/jquery.js\" ></script></\nhead>\n\t\t<body><h1>The current time is ...</h1><div id=\"time\"></div>\n\t\t<script type=\"text/javascript\"> window.setInterval(function(){$.ajax({url:\"time\",cache:false,success:\nfunction(data,status,request){\n\t\t\t$(\"#time\").html(data);\n\t\t}});},5000);\n\t\t</script>\n\t\t</body>\n\t\t</html>'''\n\t@cherrypy.expose def time(self,_=None):\n\t\treturn asctime()\ncherrypy.quickstart(Root(),config={\n\t'/jquery.js':\n\t{ 'tools.staticfile.on':True,\n\t'tools.staticfile.filename':os.path.join(current_\ndir,\"static\",\"jquery\",\"jquery-1.4.2.js\")\n\t}\n})\n\n```", "```py\n@cherrypy.tools.expires(secs=0,force=True)\n\t@cherrypy.expose\n\tdef time(self,_=None):\n\t\treturn asctime()\n\n```", "```py\n<script type=\"text/javascript\">\nwindow.setInterval(function(){$(\"#time\").load(\"time\");},5000);\n</script>\n\n```", "```py\nimport sqlite3\ndatabase=':memory:'\nconnection = sqlite3.connect(database) cursor=connection.executescript('''\ncreate table if not exists task (\n\ttask_id integer primary key autoincrement,\n\tdescription,\n\tduedate,\n\tcompleted,\n\tuser_id\n);\n''')\nconnection.commit() sql = '''insert into task (description,duedate,completed,user_id) values(?,?,?,?)'''\ncursor.execute(sql,('work' \t\t\t,'2010-01-01',None,'alice'))\ncursor.execute(sql,('more work' \t,'2010-02-01',None,'alice'))\ncursor.execute(sql,('work' \t\t\t,'2010-03-01',None,'john'))\ncursor.execute(sql,('even more work','2010-04-01',None,'john'))\nconnection.commit()\nconnection.close()\n\n```", "```py\nconnection.row_factory = sqlite3.Row\nsql = \"\"\"select * from task where user_id = 'john'\"\"\" cursor.execute(sql)\ntasks = cursor.fetchall()\nfor t in tasks:\n\tprint(t['duedate'],t['description'])\n\n```", "```py\n C:\\Tasklist II>python taskdb2.py\n2010-03-01 work\n2010-04-01 even more work\n\n```", "```py\nclass TaskDB:\n\tdef __init__(self,db): self.data = threading.local()\n\t\tself.db = db\n\t\tself._initdb()\n\tdef connect(self):\n\t\t'''call once for every thread'''\n\t\tself.data.conn = sqlite3.connect(self.db)\n\t\tself.data.conn.row_factory = sqlite3.Row\n\n```", "```py\ndef _initdb(self):\n\t'''call once to initialize the metabase tables'''\n\tconn = sqlite3.connect(self.db) conn.cursor().executescript('''\n\tcreate table if not exists task (\n\t\ttask_id integer primary key autoincrement,\n\t\tdescription,\n\t\tduedate,\n\t\tcompleted,\n\t\tuser_id\n\t);\n\t'''\n\t)\n\tconn.commit()\n\tconn.close()\n\n```", "```py\n\tdef create (self, user=None, id=None, description='', duedate=None, \ncompleted=None):\n\t\treturn Task(self.data, user=user, id=id, description=description, \nduedate=duedate, completed=completed)\n\tdef retrieve(self, user,id):\n\t\tsql = \"\"\"select * from task where task_id = ? and user_id = ?\"\"\"\n\t\tcursor = self.data.conn.cursor()\n\t\tcursor.execute(sql,(id,user))\n\t\ttasks = cursor.fetchall()\n\t\tif len(tasks): return self.create(user, tasks[0]['task_id'], tasks[0]\n['description'], tasks[0]['duedate'], tasks[0]['completed']) \n\t\traise KeyError('no such task')\n\tdef list(self,user):\n\t\tsql = '''select task_id from task where user_id = ?'''\n\t\tcursor = self.data.conn.cursor()\n\t\tcursor.execute(sql,(user,)) return [row[0] for row in cursor.fetchall()]\n\n```", "```py\nclass Task:\n\tdef __init__(self,taskdb,user,id=None,description='',duedate=None,\ncompleted=None):\n\tself.taskdb=taskdb\n\tself.user=user\n\tself.id=id\n\tself.description=description\n\tself.completed=completed self.duedate=duedate if duedate != None else date.today().\nisoformat()\n\tif id == None:\n\t\tcursor = self.taskdb.conn.cursor() sql = '''insert into task (description,duedate,completed,user_\nid) values(?,?,?,?)'''\n\t\tcursor.execute(sql,(self.description,self.duedate,self.\ncompleted,self.user))\n\t\tself.id = cursor.lastrowid\n\t\tself.taskdb.conn.commit()\n\n```", "```py\ndef update(self,user):\n\tparams= []\n\tparams.append('description = ?')\n\tparams.append('duedate = ?')\n\tparams.append('completed = ?')\n\tsql = '''update task set %s where task_id = ? and user_id = ?''' sql = sql%(\",\".join(params))\n\tconn = self.taskdb.conn\n\tcursor = conn.cursor()\n\tcursor.execute(sql, (self.description,self.duedate,self.\ncompleted,self.id,user))\n\tif cursor.rowcount != 1 :\n\t\tdebug('updated',cursor.rowcount)\n\t\tdebug(sql)\n\t\tconn.rollback()\n\t\traise DatabaseError('update failed')\n\tconn.commit()\n\n```", "```py\ndef delete(self,user):\n\tsql = '''delete from task where task_id = ? and user_id = ?'''\n\tconn = self.taskdb.conn\n\tcursor = conn.cursor()\n\tcursor.execute(sql,(self.id,user)) if cursor.rowcount != 1:\n\t\tconn.rollback()\n\t\traise DatabaseError('no such task')\n\tconn.commit()\n\n```", "```py\ndef fac(n): if n < 0 : raise ValueError(\"argument is negative\")\n\tif type(n) != int : raise ValueError(\"argument is not an integer\")\n\tif n == 0 : return 1\n\tif n == 1 : return 1\n\treturn n*fac(n-1)\n\n```", "```py\n python test_factorial.py\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.000s\nOK\n\n```", "```py\nimport unittest\nfrom factorial import fac class Test(unittest.TestCase):\n\tdef test_number(self):\n\t\tself.assertEqual(24,fac(4))\n\t\tself.assertEqual(120,fac(5))\n\t\tself.assertEqual(720,fac(6))\n\tdef test_zero(self):\n\t\tself.assertEqual(1,fac(0))\n\tdef test_illegal(self):\n\t\twith self.assertRaises(ValueError):\n\t\t\tfac(-4)\n\t\twith self.assertRaises(ValueError):\n\t\t\tfac(3.1415)\nif __name__ == '__main__':\n\tunittest.main()\n\n```", "```py\nfrom functools import reduce\ndef fac(n):\n\tif n < 0 : raise ValueError(\"factorial of a negative number is not \ndefined\")\n\tif type(n) != int : raise ValueError(\"argument is not an integer\")\n\tif n == 0 : return 1\n\tif n == 1 : return 1 return reduce(lambda x,y:x*y,range(3,n+1))\n\n```", "```py\n python test_tasklistdb.py\n......\n----------------------------------------------------------------------\nRan 6 tests in 1.312s\nOK\n\n```", "```py\nfrom tasklistdb import TaskDB, Task, AuthenticationError, \nDatabaseError\nimport unittest\nfrom os import unlink,close\nfrom tempfile import mkstemp\n(fileno,database) = mkstemp()\nclose(fileno)\nclass DBentityTest(unittest.TestCase): def setUp(self):\n\t\ttry:\n\t\t\tunlink(database)\n\t\texcept:\n\t\t\tpass\n\t\tself.t=TaskDB(database)\n\t\tself.t.connect()\n\t\tself.description='testtask'\n\t\tself.task = self.t.create(user='testuser',description=self.\ndescription)\n\tdef tearDown(self):\n\t\tself.t.close()\n\t\ttry:\n\t\t\tunlink(database)\n\t\texcept:\n\t\t\tpass\n\tdef test_retrieve(self):\n\t\ttask = self.t.retrieve('testuser',self.task.id)\n\t\tself.assertEqual(task.id,self.task.id)\n\t\tself.assertEqual(task.description,self.task.description)\n\t\tself.assertEqual(task.user,self.task.user)\n\tdef test_list(self):\n\t\tids = self.t.list('testuser')\n\t\tself.assertListEqual(ids,[self.task.id])\n\tdef test_update(self):\n\t\tnewdescription='updated description' self.task.\ndescription=newdescription\n\t\tself.task.update('testuser')\n\t\ttask = self.t.retrieve('testuser',self.task.id)\n\t\tself.assertEqual(task.id,self.task.id)\n\t\tself.assertEqual(task.duedate,self.task.duedate)\n\t\tself.assertEqual(task.completed,self.task.completed)\n\t\tself.assertEqual(task.description,newdescription)\n\tdef test_delete(self):\n\t\ttask = self.t.create('testuser',description='second task')\n\t\tids = self.t.list('testuser')\n\t\tself.assertListEqual(sorted(ids),sorted([self.task.id,task.id]))\n\t\ttask.delete('testuser')\n\t\tids = self.t.list('testuser')\n\t\tself.assertListEqual(sorted(ids),sorted([self.task.id]))\n\t\twith self.assertRaises(DatabaseError):\n\t\t\ttask = self.t.create('testuser',id='short')\n\t\t\ttask.delete('testuser')\nif __name__ == '__main__':\n\tunittest.main(exit=False)\n\n```", "```py\n<body id=\"itemlist\">\n\t<div id=\"content\">\n\t\t<div class=\"header\"></div>\n\t\t<div class=\"taskheader\"></div>\n\t\t<div id=\"items\"></div>\n\t\t<div class=\"item newitem\">\n\t\t\t<input type=\"text\" class=\"duedate left editable-date tooltip\"\n\t\t\t\tname=\"duedate\" title=\"click for a date\" />\n\t\t\t<input type=\"text\" class=\"description middle tooltip\"\n\t\t\t\ttitle=\"click to enter a description\" name=\"description\"/>\n\t\t\t<button type=\"submit\" class=\"add-button\"\n\t\t\t\tname=\"add\" value=\"Add\" >Add</button>\n\t\t</div>\n\t</div>\n</body>\n\n```", "```py\n$.ajaxSetup({cache:false});$.ajaxSetup({cache:false});\nfunction itemmakeup(data,status,req){\n\t$(\".done-button\").button( {icons: {primary: 'ui-icon-check' \n}, text:false});\n\t$(\".del-button\").button( {icons: {primary: 'ui-icon-trash' }, \ntext:false}); $(\"#items input.duedate\").sort(\n\t\tfunction(a,b){return $(a).val() > $(b).val() ? 1 : -1;},\n\t\tfunction(){ return this.parentNode; }).addClass(\"just-sorted\");\n\t\t// disable input fields and done button on items that are already \nmarked as completed\n\t$(\".done .done-button\").button( \"option\", \"disabled\", true );\n\t$(\".done input\").attr(\"disabled\",\"disabled\");\n\t$( \"#items .editable-date\" ).datepicker({\n\t\tdateFormat: $.datepicker.ISO_8601,\n\t\tonClose: function(dateText,datePicker){ if(dateText != '')\n{$(this).removeClass(\"inline-label\");}}\n\t});\n};\n$(document).ready(function(){\n\t$(\".header\").addClass(\"ui-widget ui-widget-header\"); $(\".add-button\").button( {icons: {primary: 'ui-icon-plusthick' }, \ntext:false}).click(function(){\n\t\t$(\".inline-label\").each(function() {\n\tif($(this).val() === $(this).attr('title')) {\n\t\t$(this).val('');\n\t};\n\t\t})\n\tvar dd=$(this).siblings(\".duedate\").val();\n\tvar ds=$(this).siblings(\".description\").val();\n\t$.get(\"add\",{description:ds, duedate:dd},function(data,status,req)\n{\n\t\t$(\"#items\").load(\"list\",itemmakeup);\n\t});\n\t\treturn false; // prevent the normal action of the button click\n\t});\n\t$(\".logoff-button\").button({icons: {primary: 'ui-icon-\nclosethick'}, text:false}).click(function(){\n\tlocation.href = $(this).val();\n\treturn false;\n\t});\n\t$(\".login-button\").button( {icons: {primary: 'ui-icon-play' }, \ntext:false});\n\t$(\":text\").addClass(\"textinput\");\n\t$(\":password\").addClass(\"textinput\");\n\t$( \".editable-date\" ).datepicker({\n\t\tdateFormat: $.datepicker.ISO_8601,\n\t\tonClose: function(dateText,datePicker){ if(dateText != '')\n{$(this).removeClass(\"inline-label\");}}\n\t});\n\t// give username field focus (only if it's there)\n\t$(\"#username\").focus();\n\t$(\".newitem input\").addClass(\"ui-state-highlight\"); $(\".done-button\").live(\"click\",function(){\n\t\tvar item=$(this).siblings(\"[name='id']\").val();\n\t\tvar done=$(this).siblings(\".completed\").val();\n\t\t$.get(\"done\",{id:item, completed:done},function(data,status,req)\n{\n\t\t\t$(\"#items\").load(\"list\",itemmakeup);\n\t\t});\n\t\treturn false;\n\t}); $(\".del-button\").live(\"click\",function(){\n\t\tvar item=$(this).siblings(\"[name='id']\").val();\n\t\t$.get(\"delete\",{id:item},function(data,status,req){\n\t\t\t$(\"#items\").load(\"list\",itemmakeup);\n\t\t});\n\t\treturn false;\n\t}); $(\"#items\").load(\"list\",itemmakeup); // get the individual task \nitems\n});\n\n```", "```py\n<div id=\"items\">\n\t<div class=\"item\"><input name=\"\"/> … <button name=\"done\"></div\n\t<div class=\"item\"><input name=\"\"/> … <button name=\"done\"></div\n\t…\n</div>\n\n```", "```py\nclass TaskApp(object):\n\tdef __init__(self,dbpath,logon,logoffpath):\n\t\tself.logon=logon\n\t\tself.logoffpath=logoffpath self.taskdb=TaskDB(dbpath)\n\tdef connect(self):\n\t\tself.taskdb.connect()\n\n```", "```py\n@cherrypy.expose\ndef list(self,_=None): username = self.logon.checkauth()\n\ttasks = []\n\tfor t in self.taskdb.list(username): task=self.taskdb.retrieve(username,t)\n\t\ttasks.append('''<div class=\"item %s\">\n\t\t<input type=\"text\" class=\"duedate left\" name=\"duedate\" \nvalue=\"%s\" readonly=\"readonly\" />\n\t\t<input type=\"text\" class=\"description middle\" name=\"description\" \nvalue=\"%s\" readonly=\"readonly\" />\n\t\t<input type=\"text\" class=\"completed right editable-date tooltip\" \ntitle=\"click to select a date, then click done\" name=\"completed\" \nvalue=\"%s\" />\n\t\t<input type=\"hidden\" name=\"id\" value=\"%s\" />\n\t\t<button type=\"submit\" class=\"done-button\" name=\"done\" \nvalue=\"Done\" >Done</button>\n\t\t<button type=\"submit\" class=\"del-button\" name=\"delete\" \nvalue=\"Del\" >Del</button>\n\t\t</div>'''%('notdone' if task.completed==None else 'done',task.\nduedate,task.description,task.completed,task.id))\n\treturn '\\n'.join(tasks)\n\n```", "```py\n@cherrypy.expose def add(self,description,duedate,_=None):\n\tusername = self.logon.checkauth()\n\ttask=self.taskdb.create(user=username, description=description, \nduedate=duedate)\n\treturn 'ok'\n@cherrypy.expose def delete(self,id,_=None):\n\tusername = self.logon.checkauth()\n\ttask=self.taskdb.retrieve(username,id)\n\ttask.delete(username)\n\treturn 'ok'\n@cherrypy.expose def done(self,id,completed,_=None):\n\tusername = self.logon.checkauth()\n\ttask=self.taskdb.retrieve(username,id)\n\tif completed == \"\" or completed == \"None\":\n\t\tcompleted = date.today().isoformat()\n\ttask.completed=completed\n\ttask.update(username)\n\treturn 'ok'\n\n```", "```py\n/\n/logon\n/task\n\n```", "```py\nimport cherrypy\nfrom taskapp import TaskApp\nfrom logondb import LogonDB\nimport os.path\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ntheme = \"smoothness\"\nclass Root(object): logon = LogonDB()\n\ttask = TaskApp(dbpath='/tmp/taskdb.db', logon=logon, logoffpath=\"/\nlogon/logoff\")\n\t@cherrypy.expose\n\tdef index(self):\n\t\treturn Root.logon.index(returnpage='/task')\nif __name__ == \"__main__\":\n\tRoot.logon.initdb() def connect(thread_index):\n\t\tRoot.task.connect()\n\t\tRoot.logon.connect()\n\t# Tell CherryPy to call \"connect\" for each thread, when it starts up\n\tcherrypy.engine.subscribe('start_thread', connect)\n\tcherrypy.quickstart(Root(),config={\n\t'/':\n\t{ 'log.access_file' : os.path.join(current_dir,\"access.log\"),\n\t'log.screen': False,\n\t'tools.sessions.on': True\n\t},\n\t'/static':\n\t{ 'tools.staticdir.on':True,\n\t'tools.staticdir.dir':os.path.join(current_dir,\"static\")\n\t},\n\t'/jquery.js':\n\t{ 'tools.staticfile.on':True,\n\t'tools.staticfile.filename':os.path.join(current_\ndir,\"static\",\"jquery\",\"jquery-1.4.2.js\")\n\t},\n\t'/jquery-ui.js':\n\t{ 'tools.staticfile.on':True,\n\t'tools.staticfile.filename':os.path.join(current_\ndir,\"static\",\"jquery\",\"jquery-ui-1.8.1.custom.min.js\")\n\t},\n\t'/jquerytheme.css':\n\t{ 'tools.staticfile.on':True,\n\t'tools.staticfile.filename':os.path.join(current_dir,\"static\",\n\"jquery\",\"css\",theme,\"jquery-ui-1.8.4.custom.css\")\n\t},\n\t'/images':\n\t{ 'tools.staticdir.on':True,\n\t'tools.staticdir.dir':os.path.join(current_dir,\"static\",\"jquery\",\n\"css\",theme,\"images\")\n\t}\n})\n\n```"]