["```py\nclass MyAppError(Exception):\n    pass\n```", "```py\nclass Point:\n    \"\"\"\n    Point on a plane.\n    \"\"\"\n    def __init__(self, x, y):\n        self.x= x\n        self.y= y\n    def __repr__(self):\n        return \"{cls}({x:.0f}, {y:.0f})\".format(\n            cls=self.__class__.__name__, x=self.x, y=self.y)\n```", "```py\n>>> p_1 = Point(22, 7)\n>>> p_1.x\n22\n>>> p_1.y\n7\n```", "```py\n>>> p_1\nPoint(22, 7)\n```", "```py\n    def dist(self, point):\n        return math.hypot(self.x-point.x, self.y-point.y)\n```", "```py\n>>> p_1 = Point(22, 7)\n>>> p_2 = Point(20, 5)\n>>> round(p_1.dist(p_2),4)\n2.8284\n```", "```py\n    def offset(self, d_x, d_y):\n        self.x += d_x\n        self.y += d_y\n```", "```py\n>>> p_1.offset(-3, 3)\n>>> p_1.x\n19\n>>> p_1.y\n10\n```", "```py\n>>> map(lambda x:x+1, [1, 2.3, (4+5j)])\n```", "```py\n>>> p_2 = Point(20, 5)\n>>> p_2.y = 6\n>>> p_2\n(20, 6)\n```", "```py\n>>> p_2.__dict__.keys()\ndict_keys(['y', 'x'])\n>>> getattr(p_2, \"x\")\n20\n```", "```py\n    @property\n    def r(self):\n        return math.sqrt(self.x**2 + self.y**2)\n    @property\n    def θ(self):\n        return math.atan2(self.y, self.x)\n```", "```py\n>>> p = Point(12, 5)\n>>> round(p.r, 1)\n13.0\n>>> round(math.degrees(p.θ), 1)\n22.6\n```", "```py\nclass Manhattan_Point(Point):\n    def dist(self, point):\n        return abs(self.x-point.x)+abs(self.y-point.y)\n```", "```py\n>>> p_1 = Point(22, 7)\n>>> p_2 = Manhattan_Point(20, 5)\n>>> round(p_1.dist(p_2),4)\n2.8284\n>>> round(p_2.dist(p_1),4)\n4\n```", "```py\n>>> from collections.abc import Mapping\n>>> Mapping.__mro__\n(<class 'collections.abc.Mapping'>, <class 'collections.abc.Sized'>,\n<class 'collections.abc.Iterable'>, <class 'collections.abc.Container'>,\n<class 'object'>)\n```", "```py\nclass Units(float):\n    units= None\n    def __repr__(self):\n        text = super().__repr__()\n        return \"{0} {1}\".format(text, self.units)\n\nclass Height(Units):\n    units= \"inches\"\n```", "```py\n>>> Height(61.5)\n61.5 inches\n```", "```py\nclass Sample:\n    counter= 0\n    def __init__(self, measure):\n        Sample.counter += 1\n        self.sequence = Sample.counter\n        self.measure = measure\n```", "```py\n    @staticmethod\n    def validate(measure):\n        m= float(measure)\n        if 0 <= m < 12:\n            pass\n        else:\n            raise ValueError(\"Out of range\")\n```", "```py\ntry:\n    Sample.validate(some_data)\n    s= Sample(some_data)\n    *… etc. …*\nexcept Exception as ex:\n    print(ex)\n```", "```py\nclass SmallSample:\n    counter= 0\n    __slots__ = [\"sequence\", \"measure\"]\n    def __init__(self, measure):\n        SmallSample.counter += 1\n        self.sequence = SmallSample.counter\n        self.measure = measure\n```", "```py\nfrom collections.abc import Callable\nclass Fibonacci(Callable):\n    def __init__(self):\n        self.cache= {0: 0, 1: 1}\n    def __call__(self, n):\n        if n not in self.cache:\n            self.cache[n]= self.__call__(n-1) + self.__call__(n-2)\n        return self.cache[n]\n```", "```py\n>>> fib= Fibonacci()\n>>> fib(7)\n13\n```"]