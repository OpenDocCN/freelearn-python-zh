["```py\nfrom tkinter import ttk \n```", "```py\nmylabel = ttk.Label(root, text='This is a label') \n```", "```py\nmyentry = ttk.Entry(root, textvariable=my_string_var, width=20) \n```", "```py\nmyspinbox = ttk.Spinbox(\n  root,\n  from_=0, to=100, increment=.01,\n  textvariable=my_int_var,\n  command=my_callback\n) \n```", "```py\nmycheckbutton = ttk.Checkbutton(\n  root,\n  variable=my_bool_var,\n  textvariable=my_string_var,\n  command=my_callback\n) \n```", "```py\nmycheckbutton2 = ttk.Checkbutton(\n  root,\n  variable=my_dbl_var,\n  text='Would you like Pi?',\n  onvalue=3.14159,\n  offvalue=0,\n  underline=15\n) \n```", "```py\nbuttons = tk.Frame(root)\nr1 = ttk.Radiobutton(\n  buttons,\n  variable=my_int_var,\n  value=1,\n  text='One'\n)\nr2 = ttk.Radiobutton(\n  buttons,\n  variable=my_int_var,\n  value=2,\n  text='Two'\n) \n```", "```py\nmycombo = ttk.Combobox(\n  root, textvariable=my_string_var,\n  values=['This option', 'That option', 'Another option']\n) \n```", "```py\nmytext = tk.Text(\n  root,\n  undo=True, maxundo=100,\n  spacing1=10, spacing2=2, spacing3=5,\n  height=5, wrap='char'\n) \n```", "```py\n# insert a string at the beginning\nmytext.insert('1.0', \"I love my text widget!\")\n# insert a string into the current text\nmytext.insert('1.2', 'REALLY ')\n# get the whole string\nmytext.get('1.0', tk.END)\n# delete the last character.\nmytext.delete('end - 2 chars') \n```", "```py\nmybutton = ttk.Button(\n  root,\n  command=my_callback,\n  text='Click Me!',\n  default='active'\n) \n```", "```py\nmylabelframe = ttk.LabelFrame(\n  root,\n  text='Button frame'\n)\nb1 = ttk.Button(\n  mylabelframe,\n  text='Button 1'\n)\nb2 = ttk.Button(\n  mylabelframe,\n  text='Button 2'\n)\nb1.pack()\nb2.pack() \n```", "```py\n# data_entry_app.py\n\"\"\"The ABQ Data Entry application\"\"\"\nimport tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime\nfrom pathlib import Path\nimport csv \n```", "```py\nvariables = dict()\nrecords_saved = 0 \n```", "```py\nroot = tk.Tk()\nroot.title('ABQ Data Entry Application')\nroot.columnconfigure(0, weight=1) \n```", "```py\nttk.Label(\n  root, text=\"ABQ Data Entry Application\",\n  font=(\"TkDefaultFont\", 16)\n).grid() \n```", "```py\ndrf = ttk.Frame(root)\ndrf.grid(padx=10, sticky=(tk.E + tk.W))\ndrf.columnconfigure(0, weight=1) \n```", "```py\nr_info = ttk.LabelFrame(drf, text='Record Information')\nr_info.grid(sticky=(tk.W + tk.E))\nfor i in range(3):\n  r_info.columnconfigure(i, weight=1) \n```", "```py\nvariables['Date'] = tk.StringVar()\nttk.Label(r_info, text='Date').grid(row=0, column=0)\nttk.Entry(\n  r_info, textvariable=variables['Date']\n).grid(row=1, column=0, sticky=(tk.W + tk.E)) \n```", "```py\ntime_values = ['8:00', '12:00', '16:00', '20:00']\nvariables['Time'] = tk.StringVar()\nttk.Label(r_info, text='Time').grid(row=0, column=1)\nttk.Combobox(\n  r_info, textvariable=variables['Time'], values=time_values\n).grid(row=1, column=1, sticky=(tk.W + tk.E))\nvariables['Technician'] = tk.StringVar()\nttk.Label(r_info, text='Technician').grid(row=0, column=2)\nttk.Entry(\n  r_info, textvariable=variables['Technician']\n).grid(row=1, column=2, sticky=(tk.W + tk.E)) \n```", "```py\nvariables['Lab'] = tk.StringVar()\nttk.Label(r_info, text='Lab').grid(row=2, column=0)\nlabframe = ttk.Frame(r_info)\nfor lab in ('A', 'B', 'C'):\n  ttk.Radiobutton(\n    labframe, value=lab, text=lab, variable=variables['Lab']\n).pack(side=tk.LEFT, expand=True)\nlabframe.grid(row=3, column=0, sticky=(tk.W + tk.E)) \n```", "```py\nvariables['Plot'] = tk.IntVar()\nttk.Label(r_info, text='Plot').grid(row=2, column=1)\nttk.Combobox(\n  r_info,\n  textvariable=variables['Plot'],\n  values=list(range(1, 21))\n).grid(row=3, column=1, sticky=(tk.W + tk.E))\nvariables['Seed Sample'] = tk.StringVar()\nttk.Label(r_info, text='Seed Sample').grid(row=2, column=2)\nttk.Entry(\n  r_info,\n  textvariable=variables['Seed Sample']\n).grid(row=3, column=2, sticky=(tk.W + tk.E)) \n```", "```py\ne_info = ttk.LabelFrame(drf, text=\"Environment Data\")\ne_info.grid(sticky=(tk.W + tk.E))\nfor i in range(3):\n  e_info.columnconfigure(i, weight=1) \n```", "```py\nvariables['Humidity'] = tk.DoubleVar()\nttk.Label(e_info, text=\"Humidity (g/m³)\").grid(row=0, column=0)\nttk.Spinbox(\n  e_info, textvariable=variables['Humidity'],\n  from_=0.5, to=52.0, increment=0.01,\n).grid(row=1, column=0, sticky=(tk.W + tk.E))\nvariables['Light'] = tk.DoubleVar()\nttk.Label(e_info, text='Light (klx)').grid(row=0, column=1)\nttk.Spinbox(\n  e_info, textvariable=variables['Light'],\n  from_=0, to=100, increment=0.01\n).grid(row=1, column=1, sticky=(tk.W + tk.E))\nvariables['Temperature'] = tk.DoubleVar()\nttk.Label(e_info, text='Temperature (°C)').grid(row=0, column=2)\nttk.Spinbox(\n  e_info, textvariable=variables['Temperature'],\n  from_=4, to=40, increment=.01\n).grid(row=1, column=2, sticky=(tk.W + tk.E)) \n```", "```py\nvariables['Equipment Fault'] = tk.BooleanVar(value=False)\nttk.Checkbutton(\n  e_info, variable=variables['Equipment Fault'],\n  text='Equipment Fault'\n).grid(row=2, column=0, sticky=tk.W, pady=5) \n```", "```py\np_info = ttk.LabelFrame(drf, text=\"Plant Data\")\np_info.grid(sticky=(tk.W + tk.E))\nfor i in range(3):\n  p_info.columnconfigure(i, weight=1) \n```", "```py\nvariables['Plants'] = tk.IntVar()\nttk.Label(p_info, text='Plants').grid(row=0, column=0)\nttk.Spinbox(\n  p_info, textvariable=variables['Plants'],\n  from_=0, to=20, increment=1\n).grid(row=1, column=0, sticky=(tk.W + tk.E))\nvariables['Blossoms'] = tk.IntVar()\nttk.Label(p_info, text='Blossoms').grid(row=0, column=1)\nttk.Spinbox(\n  p_info, textvariable=variables['Blossoms'],\n  from_=0, to=1000, increment=1\n).grid(row=1, column=1, sticky=(tk.W + tk.E))\nvariables['Fruit'] = tk.IntVar()\nttk.Label(p_info, text='Fruit').grid(row=0, column=2)\nttk.Spinbox(\n  p_info, textvariable=variables['Fruit'],\n  from_=0, to=1000, increment=1\n).grid(row=1, column=2, sticky=(tk.W + tk.E)) \n```", "```py\nvariables['Min Height'] = tk.DoubleVar()\nttk.Label(p_info, text='Min Height (cm)').grid(row=2, column=0)\nttk.Spinbox(\n  p_info, textvariable=variables['Min Height'],\n  from_=0, to=1000, increment=0.01\n).grid(row=3, column=0, sticky=(tk.W + tk.E))\nvariables['Max Height'] = tk.DoubleVar()\nttk.Label(p_info, text='Max Height (cm)').grid(row=2, column=1)\nttk.Spinbox(\n  p_info, textvariable=variables['Max Height'],\n  from_=0, to=1000, increment=0.01\n).grid(row=3, column=1, sticky=(tk.W + tk.E))\nvariables['Med Height'] = tk.DoubleVar()\nttk.Label(p_info, text='Median Height (cm)').grid(row=2, column=2)\nttk.Spinbox(\n  p_info, textvariable=variables['Med Height'],\n  from_=0, to=1000, increment=0.01\n).grid(row=3, column=2, sticky=(tk.W + tk.E)) \n```", "```py\nttk.Label(drf, text=\"Notes\").grid()\nnotes_inp = tk.Text(drf, width=75, height=10)\nnotes_inp.grid(sticky=(tk.W + tk.E)) \n```", "```py\nbuttons = tk.Frame(drf)\nbuttons.grid(sticky=tk.E + tk.W)\nsave_button = ttk.Button(buttons, text='Save')\nsave_button.pack(side=tk.RIGHT)\nreset_button = ttk.Button(buttons, text='Reset')\nreset_button.pack(side=tk.RIGHT) \n```", "```py\nstatus_variable = tk.StringVar()\nttk.Label(\n  root, textvariable=status_variable\n).grid(sticky=tk.W + tk.E, row=99, padx=10) \n```", "```py\n# data_entry_app.py\ndef on_reset():\n  \"\"\"Called when reset button is clicked, or after save\"\"\" \n```", "```py\n for variable in variables.values():\n    if isinstance(variable, tk.BooleanVar):\n      variable.set(False)\n    else:\n      variable.set('')\n  notes_inp.delete('1.0', tk.END) \n```", "```py\nreset_button.configure(command=on_reset) \n```", "```py\ndef on_save():\n  \"\"\"Handle save button clicks\"\"\"\n  global records_saved \n```", "```py\n datestring = datetime.today().strftime(\"%Y-%m-%d\")\n  filename = f\"abq_data_record_{datestring}.csv\"\n  newfile = not Path(filename).exists() \n```", "```py\n data = dict()\n  fault = variables['Equipment Fault'].get()\n  for key, variable in variables.items():\n    if fault and key in ('Light', 'Humidity', 'Temperature'):\n      data[key] = ''\n    else:\n      try:\n        data[key] = variable.get()\n      except tk.TclError:\n        status_variable.set(\n          f'Error in field: {key}.  Data was not saved!'\n        )\n        return\n  # get the Text widget contents separately\n  data['Notes'] = notes_inp.get('1.0', tk.END) \n```", "```py\n with open(filename, 'a', newline='') as fh:\n    csvwriter = csv.DictWriter(fh, fieldnames=data.keys())\n    if newfile:\n      csvwriter.writeheader()\n    csvwriter.writerow(data) \n```", "```py\n records_saved += 1\n  status_variable.set(\n    f\"{records_saved} records saved this session\"\n  )\n  on_reset() \n```", "```py\nsave_button.configure(command=on_save) \n```", "```py\non_reset()\nroot.mainloop() \n```"]