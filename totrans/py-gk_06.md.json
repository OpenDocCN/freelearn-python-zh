["```py\ne1 = []                  #an empty list\ne2 = list()              #an empty list via constructor\ng1 = ['a', 'b']          #a list with 2 elements\ng2 = list(['a', 'b'])    #a list with 2 elements using a \\\n                          constructor\ng3 = list(g1)            #a list created from a list\n```", "```py\nw = ()                     #an empty tuple\nx = (2, 3)                 #tuple with two elements\ny = (\"Hello World\")        #not a tuple, Comma is required \\\n                            for single entry tuple\nz = (\"Hello World\",)       #A comma will make it a tuple\n```", "```py\nmydict = {\n  \"brand\": \"BMW\",\n  \"model\": \"330i\",\n  \"color\": \"Blue\"\n}\n```", "```py\n    dict_object.keys()\n    ```", "```py\n    dict_object.values()\n    ```", "```py\n    dict_object.items()\n    ```", "```py\ns1 = set()            # empty set\ns2 = {}               # an empty set using curly \ns3 = set(['a', 'b'])  # a set created from a list with                       # const.\ns3 = {1,2}            # a set created using curly bracket\ns4 = {1, 2, 1}        # a set will be created with only 1 and 2                     # objects. Duplicate object will be ignored\n```", "```py\n#iterator1.py\n#example 1: iterating on a list\nfor x in [1,2,3]:\n    print(x)\n#example 2: iterating on a string\nfor x in \"Python for Geeks\":\n    print(x, end=\"\")\nprint('')\n#example 3: iterating on a dictionary\nweek_days = {1:'Mon', 2:'Tue', \n             3:'Wed', 4:'Thu', \n             5:'Fri', 6:'Sat', 7:'Sun'}\nfor k in week_days:\n   print(k, week_days[k])\n#example 4: iterating on a file\nfor row in open('abc.txt'):\n    print(row, end=\"\")\n```", "```py\n#iterator2.py\nclass Week:\n    def __init__(self):\n        self.days = {1:'Monday', 2: \"Tuesday\",\n                     3:\"Wednesday\", 4: \"Thursday\",\n                     5:\"Friday\", 6:\"Saturday\", 7:\"Sunday\"}\n        self._index = 1\n    def __iter__(self):\n        self._index = 1\n        return self\n    def __next__(self):\n        if self._index < 1 | self._index > 7 :\n            raise StopIteration\n        else:\n            ret_value =  self.days[self._index]\n            self._index +=1\n        return ret_value\nif(__name__ == \"__main__\"):\n    wk = Week()\n    for day in wk:\n        print(day)\n```", "```py\n#iterator3.py\nclass Week:\n#class definition is the same as shown in the previous \\\n code example\nif(__name__ == \"__main__\"):\n    wk = Week()\n    iter1 = iter(wk)\n    iter2 = iter(wk)\n   print(iter1.__next__())\n   print(iter2.__next__())\n   print(next(iter1))\n   print(next(iter2))\n```", "```py\nMonday\nTuesday\nWednesday\nThursday\n```", "```py\n#iterator4.py\nclass Week:\n    def __init__(self):\n        self.days = {1: 'Monday', 2: \"Tuesday\",\n                     3: \"Wednesday\", 4: \"Thursday\",\n                     5: \"Friday\", 6: \"Saturday\", 7: \"Sunday\"}\n\n    def __iter__(self):\n        return WeekIterator(self.days)\nclass WeekIterator:\n    def __init__(self, dayss):\n        self.days_ref = dayss\n        self._index = 1\n    def __next__(self):\n        if self._index < 1 | self._index > 8:\n            raise StopIteration\n        else:\n            ret_value =  self.days_ref[self._index]\n            self._index +=1\n        return ret_valu\nif(__name__ == \"__main__\"):\n    wk = Week()\n    iter1 = iter(wk)\n    iter2 = iter(wk)\n    print(iter1.__next__())\n    print(iter2.__next__())\n    print(next(iter1))\n    print(next(iter2))\n```", "```py\nMonday\nMonday\nTuesday\nTuesday\n```", "```py\n#generators1.py\ndef my_gen():\n    yield 'A'\n    yield 'B'\n    yield 'C'\nif(__name__ == \"__main__\"):\n    iter1 = my_gen()\n    print(iter1.__next__())\n    print(next(iter1))\n    print(iter1.__next__())\n```", "```py\n#generator2.py\nclass Week:\n    def __init__(self):\n        self.days = {1:'Monday', 2: \"Tuesday\", \n                     3:\"Wednesday\", 4: \"Thursday\", \n                     5:\"Friday\", 6:\"Saturday\", 7:\"Sunday\"}\n    def week_gen(self):\n        for x in self.days:\n            yield self.days[x]\nif(__name__ == \"__main__\"):\n    wk = Week()\n    iter1 = wk.week_gen()\n    iter2 = iter(wk.week_gen())\n    print(iter1.__next__())\n    print(iter2.__next__())\n    print(next(iter1))\n    print(next(iter2))\n```", "```py\n    #generator3.py\n    L = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n    f1 = [x+1 for x in L]\n    g1 = (x+1 for x in L)\n    print(g1.__next__())\n    print(g1.__next__())\n    ```", "```py\n    #generator4.py\n    def prime_gen(num):\n        for cand in range(2, num+1):\n            for i in range (2, cand):\n                if (cand % i) == 0:\n                    break\n            else:\n                yield cand\n    def x2_gen(list2):\n        for num in list2:\n            yield num*num\n    print(sum(x2_gen(prime_gen(5))))\n    ```", "```py\n    f = open ('abc.txt')\n    ```", "```py\n    f = open ('abc.txt', 'a')\n    ```", "```py\n    f = open ('abc.txt', 'w')\n    ```", "```py\n    f = open ('abc.txt', 'x')\n    ```", "```py\n    f = open ('abc.txt', 'r+'\n    ```", "```py\nf = open(\"abc.txt\", mode='r', encoding='utf-8')\n```", "```py\nfile = open(\"abc.txt\", 'r+w')\n#operations on file\nfile.close()\n```", "```py\n#writereadfile.py: write to a file and then read from it\nf1 = open(\"myfile.txt\",'w')\nf1.write(\"This is a sample file\\n\")\nlines =[\"This is a test data\\n\", \"in two lines\\n\"]\nf1.writelines(lines)\nf1.close()\nf2 = open(\"myfile.txt\",'r')\nprint(f2.read(4))\nprint(f2.readline())\nprint(f2.readline())\nf2.seek(0)\nfor line in f2.readlines():\n    print(line)\nf2.close()\n```", "```py\n#contextmgr1.py\nwith open(\"myfile.txt\",'w') as f1:\n    f1.write(\"This is a sample file\\n\")\n    lines = [\"This is a test data\\n\", \"in two lines\\n\"]\n    f1.writelines(lines)\nwith open(\"myfile.txt\",'r') as f2:\n    for line in f2.readlines():\n        print(line)\n```", "```py\n1.txt\nThis is a sample file 1\nThis is a test data 1\n2.txt\nThis is a sample file 2\nThis is a test data 2\n#multifilesread1.py\nwith open(\"1.txt\") as file1, open(\"2.txt\") as file2:\n    print(file2.readline())\n    print(file1.readline())\n```", "```py\n#multifilesread2.py\nwith open(\"1.txt\",'r') as file1, open(\"3.txt\",'w') as file2:\n   for line in file1.readlines():\n     file2.write(line)\n```", "```py\n#multifilesread1.py\nimport fileinput\nwith fileinput.input(files = (\"1.txt\",'2.txt')) as f:\n    for line in f:\n        print(f.filename())\n        print(line)\n```", "```py\ntry:\n    #a series of statements\nexcept:\n    #statements to be executed if there is an error in \\\n     try block\n```", "```py\n#exception1.py\ntry:\n    print (x)\n    x = 5\n    y = 0\n    z = x /y\n    print('x'+ y)\nexcept NameError as e:\n    print(e)\nexcept ZeroDivisionError:\n    print(\"Division by 0 is not allowed\")\nexcept Exception as e:\n    print(\"An error occured\")\n    print(e)\n```", "```py\n#exception2.py\ntry:\n    f = open(\"abc.txt\", \"w\")\nexcept Exception as e:\n    print(\"Error:\" + e)\nelse:\n    f.write(\"Hello World\")\n    f.write(\"End\")\nfinally:\n    f.close()\n```", "```py\n#exception3.py\nimport math\ndef sqrt(num):\n    if not isinstance(num, (int, float)) :\n        raise TypeError(\"only numbers are allowed\")\n    if num < 0:\n        raise Exception (\"Negative number not supported\")\n    return math.sqrt(num)\nif __name__ == \"__main__\":\n    try:\n        print(sqrt(9))\n        print(sqrt('a'))\n        print (sqrt(-9))\n    except Exception as e:\n        print(e)\n```", "```py\n#exception4.py\nimport math\nclass NumTypeError(TypeError):\n    pass\nclass NegativeNumError(Exception):\n    def __init__(self):\n        super().__init__(\"Negative number not supported\")\ndef sqrt(num):\n    if not isinstance(num, (int, float)) :\n        raise NumTypeError(\"only numbers are allowed\")\n    if num < 0:\n        raise NegativeNumError\n    return math.sqrt(num)\nif __name__ == \"__main__\":\n    try:\n        print(sqrt(9))\n        print(sqrt('a'))\n        print (sqrt(-9))\n    except NumTypeError as e:\n        print(e)\n    except NegativeNumError as e:\n        print(e)\n```", "```py\n\"%(asctime)s — %(name)s — %(levelname)s — %(funcName)s:%(lineno)d — %(message)s\"\n```", "```py\n2021-06-10 19:20:10,864 - a.b.c - INFO - <module name>:10 - hello Geeks\n```", "```py\n#logging1.py\nimport logging\nlogging.debug(\"This is a debug message\")\nlogging.warning(\"This is a warning message\")\nlogging.info(\"This is an info message\")\n```", "```py\nWARNING:root:This is a warning message\n```", "```py\nlogging.basicConfig(level=logging.DEBUG)\n```", "```py\nDEBUG:root:This is a debug message\nWARNING:root:This is a warning message\nINFO:root:This is an info message\n```", "```py\n#logging2.py\nimport logging\nlogger1 = logging.getLogger(\"my_logger\")\nlogging.basicConfig()\nlogger1.setLevel(logging.INFO)\nlogger1.warning(\"This is a warning message\")\nlogger1.info(\"This is a info message\")\nlogger1.debug(\"This is a debug message\")\nlogging.info(\"This is an info message\")\n```", "```py\nWARNING:my_logger:This is a warning message\nINFO:my_logger:This is a info message\n```", "```py\n#logging3.py\nimport logging\nlogger = logging.getLogger('my_logger')\nmy_handler = logging.StreamHandler()\nmy_formatter = logging.Formatter('%(asctime)s - '\\\n                  '%(name)s - %(levelname)s - %(message)s')\nmy_handler.setFormatter(my_formatter)\nlogger.addHandler(my_handler)\nlogger.setLevel(logging.INFO)\nlogger.warning(\"This is a warning message\")\nlogger.info(\"This is an info message\")\nlogger.debug(\"This is a debug message\")\n```", "```py\n#logging3A.py\nimport logging\nlogger = logging.getLogger('my_logger')\nlogging.basicConfig(handlers=[logging.StreamHandler()],\n                    format=\"%(asctime)s - %(name)s - \"\n                           \"%(levelname)s - %(message)s\",\n                    level=logging.INFO)\nlogger.warning(\"This is a warning message\")\nlogger.info(\"This is an info message\")\nlogger.debug(\"This is a debug message\")\n```", "```py\n #logging4.py\nimport logging\nlogging.basicConfig(filename='logs/logging4.log' \n                    ,level=logging.DEBUG)\nlogger = logging.getLogger('my_logger')\nlogger.setLevel(logging.INFO)\nlogger.warning(\"This is a warning message\")\nlogger.info(\"This is a info message\")\nlogger.debug(\"This is a debug message\")\n```", "```py\n#logging5.py\nimport logging\nlogger = logging.getLogger('my_logger')\nlogger.setLevel(logging.DEBUG)\nconsole_handler = logging.StreamHandler()\nfile_handler = logging.FileHandler(\"logs/logging5.log\")\n#setting logging levels at the handler level\nconsole_handler.setLevel(logging.DEBUG)\nfile_handler.setLevel(logging.INFO)\n#creating separate formatter for two handlers\nconsole_formatter = logging.Formatter(\n                  '%(name)s - %(levelname)s - %(message)s')\nfile_formatter = logging.Formatter('%(asctime)s - '\n                  '%(name)s - %(levelname)s - %(message)s')\n#adding formatters to the handler\nconsole_handler.setFormatter(console_formatter)\nfile_handler.setFormatter(file_formatter)\n#adding handlers to the logger\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)\nlogger.error(\"This is an error message\")\nlogger.warning(\"This is a warning message\")\nlogger.info(\"This is an info message\")\nlogger.debug(\"This is a debug message\")\n```", "```py\nversion: 1\nformatters:\n  console_formatter:\n    format: '%(name)s - %(levelname)s - %(message)s'\n  file_formatter:\n      format: '%(asctime)s - %(name)s - %(levelname)s -         %(message)s'\nhandlers:\n  console_handler:\n    class: logging.StreamHandler\n    level: DEBUG\n    formatter: console_formatter\n    stream: ext://sys.stdout\n  file_handler:\n    class: logging.FileHandler\n    level: INFO\n    formatter: file_formatter\n    filename: logs/logging6.log\nloggers:\n  my_logger:\n    level: DEBUG\n    handlers: [console_handler, file_handler]\n    propagate: no\nroot:\n  level: ERROR\n  handlers: [console_handler]\n```", "```py\n#logging6.py\nimport logging\nimport logging.config\nimport yaml\nwith open('logging6.conf.yaml', 'r') as f:\n    config = yaml.safe_load(f.read())\n    logging.config.dictConfig(config)\nlogger = logging.getLogger('my_logger')\nlogger.error(\"This is an error message\")\nlogger.warning(\"This is a warning message\")\nlogger.info(\"This is a info message\")\nlogger.debug(\"This is a debug message\")\n```"]