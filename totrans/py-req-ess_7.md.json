["```py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef home():\n return \"Hello Guest!\"\n\nif __name__ == \"__main__\":\n app.run()\n\n```", "```py\n    $ pip install virtualenvwrapper\n\n    ```", "```py\n    $ export WORKON_HOME=~/Envs\n\n    ```", "```py\n    $ mkdir -p $WORKON_HOME\n\n    ```", "```py\n    $ source /usr/local/bin/virtualenvwrapper.sh\n\n    ```", "```py\n    $ mkvirtualenv survey\n    New python executable in survey/bin/python\n    Installing setuptools, pip...done.\n    (survey) $\n\n    ```", "```py\n(survey)~ $ pip install flask flask-sqlalchemy requests httpretty beautifulsoup4\n\n```", "```py\nimport os\nimport sys\ncurrent_dir = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))\nparent_dir = os.path.abspath(os.path.join(current_dir, os.pardir))\nsys.path.insert(0, parent_dir)\n```", "```py\nimport os\n\nfrom flask import Flask\nfrom flask.ext.sqlalchemy import SQLAlchemy\n\nBASE_DIR = os.path.abspath(os.path.dirname(__file__))\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = \\\n    'sqlite:///' + os.path.join(BASE_DIR, 'app.db')\ndb = SQLAlchemy(app)\n```", "```py\nclass Question(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    question_text = db.Column(db.String(200))\n    number_of_yes_votes = db.Column(db.Integer, default=0)\n    number_of_no_votes = db.Column(db.Integer, default=0)\n    number_of_maybe_votes = db.Column(db.Integer, default=0)\n```", "```py\nclass Question(db.Model):\n    ...\n    ...\n\n    def __init__(self,\n                 question_text,\n                 number_of_yes_votes=0,\n                 number_of_no_votes=0,\n                 number_of_maybe_votes=0):\n\n        self.question_text = question_text\n\n        self.number_of_yes_votes = number_of_yes_votes\n        self.number_of_maybe_votes = number_of_maybe_votes\n        self.number_of_no_votes = number_of_no_votes\n```", "```py\nclass Question(db.Model):\n    ...\n    ...\n\n    def vote(self, vote_type):\n        if vote_type == 'yes':\n            self.number_of_yes_votes += 1\n        elif vote_type == 'no':\n            self.number_of_no_votes += 1\n        elif vote_type == 'maybe':\n            self.number_of_maybe_votes += 1\n        else:\n            raise Exception(\"Invalid vote type\")\n```", "```py\n>>> from survey import app, db\n>>> from survey.models import Question\n\n```", "```py\n>>> question = Question(\"Are you an American?\")\n>>> db.session.add(question)\n>>> db.session.commit()\n\n```", "```py\n>>> Question.query.all()\n[<Question 1 - u'Are you an American?'>]\n\n```", "```py\n>>> Question.query.get(1)\n<Question 1 - u'Are you an American?'>\n\n```", "```py\n>>> question = Question.query.get(1)\n>>> question.number_of_yes_votes\n0\n>>> question.vote('yes')\n>>> db.session.add(question)\n>>> db.session.commit()\n\n```", "```py\n>>> question = Question.query.get(1)\n>>> db.session.delete(question)\n>>> db.session.commit()\n\n```", "```py\n>>> print Question.query.get(1)\nNone\n\n```", "```py\nfrom flask import render_template\nfrom survey import app\nfrom survey.models import Question\n\n@app.route('/', methods=['GET'])\ndef home():\n    questions = Question.query.all()\n    context = {'questions': questions, 'number_of_questions': len(questions)}\n    return render_template('index.html',**context)\n```", "```py\n. . .\n. . .\n@app.route('/questions/new', methods=['GET'])\ndef new_questions():\n    return render_template('new.html')\n```", "```py\n@app.route('/questions', methods=['POST'])\ndef create_questions():\n    if request.form[\"question_text\"].strip() != \"\":\n        new_question = Question(question_text=request.form[\"question_text\"])\n        db.session.add(new_question)\n        db.session.commit()\n        message = \"Succefully added a new poll!\"\n    else:\n        message = \"Poll question should not be an empty string!\"\n\n    context = {'questions': Question.query.all(),'message': message}\n    return render_template('index.html',**context)\n```", "```py\n@app.route('/questions/<int:question_id>', methods=['GET'])\ndef show_questions(question_id):\n    context = {'question': Question.query.get(question_id)}\n    return render_template('show.html', **context)\n```", "```py\n@app.route('/questions/<int:question_id>', methods=['PUT'])\ndef update_questions(question_id):\n    question = Question.query.get(question_id)\n    if request.form[\"question_text\"].strip() != \"\":\n        question.question_text = request.form[\"question_text\"]\n        db.session.add(question)\n        db.session.commit()\n        message = \"Successfully updated a poll!\"\n    else:\n\n        message = \"Question cannot be empty!\"\n\n    context = {'question': question,\n               'message': message}\n\n    return render_template('show.html', **context)\n```", "```py\n@app.route('/questions/<int:question_id>', methods=['DELETE'])\ndef delete_questions(question_id):\n    question = Question.query.get(question_id)\n    db.session.delete(question)\n    db.session.commit()\n    context = {'questions': Question.query.all(),\n               'message': 'Successfully deleted'}\n    return render_template('index.html', **context)\n```", "```py\n@app.route('/questions/<int:question_id>/vote', methods=['GET'])\ndef new_vote_questions(question_id):\n    question = Question.query.get(question_id)\n    context = {'question': question}\n    return render_template('vote.html', **context)\n```", "```py\n@app.route('/questions/<int:question_id>/vote', methods=['POST'])\ndef create_vote_questions(question_id):\n    question = Question.query.get(question_id)\n\n    if request.form[\"vote\"] in [\"yes\", \"no\", \"maybe\"]:\n        question.vote(request.form[\"vote\"])\n\n    db.session.add(question)\n    db.session.commit()\n    return redirect(\"/questions/%d\" % question.id)\n```", "```py\n<html>\n  <head>\n    <title>Welcome to Survey Application</title>\n  </head>\n  <body>\n    {% if message %}\n        <p style=\"text-align: center;\">{{ message }}</p>\n    {% endif %}\n    <div>\n      <a href=\"/\">Home</a> |\n      <a href=\"/questions\">All Questions</a> |\n      <a href=\"/questions/new\">Create a new Question</a>\n    </div>\n    <hr>\n    {% block content %}{% endblock %}\n  </body>\n</html>\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <p>Number of Questions - <span id=\"number_of_questions\">{{ number_of_questions }}</span></p>\n    {% for question in questions %}\n    <div>\n        <p>\n            <p><a href=\"/questions/{{ question.id }}\">{{ question.question_text }}</a></p>\n            <ul>\n                <li>Yes - {{ question.number_of_yes_votes }} </li>\n                <li>No - {{ question.number_of_no_votes }} </li>\n                <li>Maybe - {{ question.number_of_maybe_votes }}\n</li>\n            </ul>\n        </p>\n    </div>\n    {% endfor %}\n    <hr />\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <h1>Create a new Survey</h1>\n    <form method=\"POST\" action=\"/questions\">\n        <p>Question: <input type=\"text\" name=\"question_text\"></p>\n        <p><input type=\"submit\" value=\"Create a new Survey\"></p>\n    </form>\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <div>\n        <p>\n        {% if question %}\n            <p>{{ question.question_text }}</p>\n            <ul>\n                <li>Yes - {{ question.number_of_yes_votes }}</li>\n                <li>No - {{ question.number_of_no_votes }}\n</li>\n                <li>Maybe - {{ question.number_of_maybe_votes}}</li>\n            </ul>\n            <p><a href=\"/questions/{{ question.id }}/vote\">Cast your vote now</a></p>\n        {% else %}\n            Not match found!\n        {% endif %}\n        </p>\n    </div>\n    <hr />\n{% endblock %}\n```", "```py\n{% extends \"base.html\" %}\n\n{% block content %}\n    <div>\n        <p>\n        {% if question %}\n            <p>{{ question.question_text }}</p>\n\n            <form action=\"/questions/{{ question.id }}/vote\" method=\"POST\">\n                <input type=\"radio\" name=\"vote\" value=\"yes\">Yes<br>\n                <input type=\"radio\" name=\"vote\" value=\"no\">No<br>\n                <input type=\"radio\" name=\"vote\" value=\"maybe\">Maybe<br>\n\n                <input type=\"submit\" value=\"Submit\" /><br>\n            </form>\n            <p><a href=\"/questions/{{ question.id }}\">Back to Question</a></p>\n        {% else %}\n            Not match found!\n        {% endif %}\n        </p>\n    </div>\n    <hr />\n{% endblock %}\n```", "```py\n    import sys\n\n    from survey import app, db\n    from survey import views\n\n    def main():\n        db.create_all()\n        app.run(debug=True)\n        return 0\n\n    if __name__ == '__main__':\n        sys.exit(main())\n    ```", "```py\n    $ python runserver.py\n    * Running on http://127.0.0.1:5000/\n    * Restarting with reloader\n\n    ```", "```py\nimport unittest\nimport requests\n\nfrom bs4 import BeautifulSoup\nfrom survey import db\nfrom survey.models import Question\n\nclass TestSurveyApp(unittest.TestCase):\n\n    def setUp(self):\n        db.drop_all()\n        db.create_all()\n\n    def test_defaults(self):\n        question = Question('Are you from India?')\n        db.session.add(question)\n        db.session.commit()\n\n        self.assertEqual(question.number_of_yes_votes, 0)\n        self.assertEqual(question.number_of_no_votes, 0)\n        self.assertEqual(question.number_of_maybe_votes, 0)\n\n    def test_votes(self):\n        question = Question('Are you from India?')\n        question.vote('yes')\n        db.session.add(question)\n        db.session.commit()\n\n        self.assertEqual(question.number_of_yes_votes, 1)\n        self.assertEqual(question.number_of_no_votes, 0)\n        self.assertEqual(question.number_of_maybe_votes, 0)\n\n    def test_title(self):\n        title = \"Welcome to Survey Application\"\n        response = requests.get(\"http://127.0.0.1:5000/\")\n        soup = BeautifulSoup(response.text)\n        self.assertEqual(soup.title.get_text(), title)\n```"]