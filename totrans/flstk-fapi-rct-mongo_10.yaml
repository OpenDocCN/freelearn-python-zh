- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Development with Next.js 14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next.js is a React framework for building full stack web applications. While
    React is a library for building user interfaces (web or native), Next.js is a
    full-blown framework, built on React, that provides dozens of features and, most
    importantly, a structure for projects ranging from simple websites (like the one
    you are going to build in this chapter) to incredibly complex applications.
  prefs: []
  type: TYPE_NORMAL
- en: While React.js is an unopinionated declarative library for building UIs, as
    a framework, Next.js provides configurations, tooling, bundling, compiling, and
    much more, enabling the developer to focus solely on building the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to create a Next.js project and deploy it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The newest Next.js App Router and its features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The different types of page rendering: dynamic, server-side, static'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Next.js useful tools: the `Image` component and the `Head` component'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server Actions along with cookie-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create the sample application in this chapter, you should have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Node.js version 18.17 or later
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python 3.11.7 for running the backend from the previous chapter (either locally
    or from a deployment, such as Render)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The requirements are identical to those in the previous chapters, and the new
    packages you will install will be described as they are introduced.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next.js 14 is the latest version of the popular React-based framework for creating
    full-stack and production-ready web applications.
  prefs: []
  type: TYPE_NORMAL
- en: Next.js goes as far as providing even the possibility of creating the backend
    server through a new Next.js feature named **Route Handlers** ([https://nextjs.org/docs/app/building-your-application/routing/route-handlers](https://nextjs.org/docs/app/building-your-application/routing/route-handlers)).
    This feature provides functions that allow you to create custom HTTP request handlers
    and create full-fledged APIs by using the Web Request and Response APIs.
  prefs: []
  type: TYPE_NORMAL
- en: These route handlers expose HTTP methods similarly to FastAPI (`GET`, `POST`,
    and so on) and allow building complex APIs that support middleware, caching, dynamic
    functions, setting and getting cookies and headers, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: In the next few sections, you’ll be able to plug in your own, Python-based server
    and have that server run independently, maybe serving other applications simultaneously
    (a mobile application, for instance). You will be able to unleash the power of
    Python’s ecosystem for integrating some data science or AI libraries and work
    quickly to have a great developer experience with Python.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'For more detailed instructions on a particular topic, you can refer to the
    following website: [https://nextjs.org/docs](https://nextjs.org/docs).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Next.js 14 project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this project-oriented section, you will learn how to create and deploy your
    project using your React knowledge. You will create a brand new Next.js app by
    performing a series of simple steps. The project will use Tailwind CSS (integrated
    into Next.js) and JavaScript instead of TypeScript.
  prefs: []
  type: TYPE_NORMAL
- en: The frontend that you will be building in this chapter requires a running backend—from
    the previous chapter. It can run either on your local machine or, in case you
    performed the deployment, from **Render**.com. During development, running the
    background from the previous chapter locally in a separate terminal will be easier
    and faster, with the virtual environment activated.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a brand new Next.js project and set it up the way we have specified
    (JavaScript instead of Typescript, the new App Router, and so on), perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal in the folder of your choice and enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The prompt will ask you if you wish to install the latest `create-next-app`
    package, which at the time of writing is *version 14.2.4*. Confirm the installation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After the installation of the `create-next-app` package and starting it with
    the previous command, the CLI tool will pose a series of questions ([https://nextjs.org/docs/getting-started/installation](https://nextjs.org/docs/getting-started/installation)).
    For your project, you should choose the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'What is your project named? `src/` directory? `@/*`)? `cd` `FARM` command and
    run the development server:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The CLI will inform you that the server is running on the URL `http://127.0.0.1:3000`.
    If you visit this page in your browser, the first render of the page could be
    a bit delayed, which is normal, because Next.js would be compiling the first and
    currently only page.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The page currently displays a lot of Next.js-specific styles, so to start with
    a clean slate, open the only automatically defined page in `/src/app/page.js`
    and make it an empty React component (you can use the `rafce` shortcut from the
    React Snippets extension):'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Also, delete the Next-specific styles from the `/src/app/globals.css` file
    and leave just the three Tailwind imports at the top:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: Now you have a blank Next.js application running, and you are ready to define
    the application pages. Next.js uses a different type of routing system than React
    Router. In the next section, you will learn how to use the most important features
    of the Next.js framework as you need them. Before proceeding, you will briefly
    observe the Next.js project structure and get acquainted with the main folders
    and files in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Next.js project structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the documentation goes into great detail explaining each file and folder’s
    function ([https://nextjs.org/docs/getting-started/project-structure](https://nextjs.org/docs/getting-started/project-structure)),
    it is good to know where you started. The `/app` folder is the center of the application.
    Its structure will determine the application routing that will be covered in the
    following section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most important files and folders that define a Next.js project structure
    are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The `/public` folder in the root project directory can be used for serving static
    files, and they are referenced by the base URL.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `next.config.js` file is a Node.js module used for configuring your Next.js
    application—prefixing assets, `gzip` compression, managing custom headers, allowing
    remote image hosts, logging, and much more can be configured from this file ([https://nextjs.org/docs/app/api-reference/next-config-js](https://nextjs.org/docs/app/api-reference/next-config-js)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `globals.css` file is the global CSS style imported into every route. In
    your application, you are keeping it minimal and importing only the Tailwind directives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Optionally, you can create a `middleware.js` function that will contain middleware
    that will be applied on every or only selected requests. See the documentation
    on middleware to learn more: [https://nextjs.org/docs/app/building-your-application/routing/middleware](https://nextjs.org/docs/app/building-your-application/routing/middleware)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, you can create a `/components` directory outside the `/app` folder
    (which has the special routing role) and create your React components inside it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that you’ve gone through the brief project structure, you will create the
    pages for your application and learn the basics of the Next.js App Router along
    the way. You will keep styling intentionally to a minimum in order to showcase
    the functionalities and component boundaries.
  prefs: []
  type: TYPE_NORMAL
- en: Routing with Next.js 14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The latest and recommended routing system in Next.js relies on the `src/App`
    folder—generally, every URL has a corresponding folder with the appropriate name
    and a `page.js` file inside of it. This structure allows you to even replace the
    `page.js` file with a `route.js` file, which is then treated as an API endpoint.
    You will create a simple route handler for demonstration purposes, but you will
    not use route handlers in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: A detailed introduction to the App Router is available on the Next.js documentation
    website ([https://nextjs.org/docs/pages/building-your-application/routing](https://nextjs.org/docs/pages/building-your-application/routing)).
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now build the basic page structure: a home page, a page for displaying
    all the cars as well as an individual car, a private page for inserting new cars
    (for authorized users only), and a login page.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the pages structure with the App Router
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You already have a `page.js` file in the root of the `App` directory; it maps
    to the `/root` URL of the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will build the routes for the remaining pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a route for displaying the cars (at `/cars` in the URL), create a
    new folder and name it `cars` in the `/app` directory, with a simple `page.js`
    file inside (the name `page.js` is mandatory):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: While inside the `/src/app/cars` directory, create a nested folder for displaying
    the individual cars based on the ID of the car. Create another folder inside the
    `cars` directory and name it `[id]`. This will tell the router that the route
    should map to `/cars/someID`. The `/cars/` part is based on the fact that the
    folder is inside the `/cars` directory, while the brackets syntax notifies Next.js
    of the presence of a dynamic parameter (`id`, in this case). Inside the `[id]`
    folder create a `page.js` file and name the component inside `CarDetails`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Repeat the same procedure and create a `/app/login/page.js` file and a `/app/private/page.js`
    file with the corresponding file structure. Run the `rafce` command and create
    a simple component corresponding to each page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now, you have the defined pages, and you can test their functionality by manually
    visiting the various URLs: `/`, `/cars`, `/private`, and `/login`.'
  prefs: []
  type: TYPE_NORMAL
- en: This is a good moment to compare the App Router to other solutions that we used
    in the previous chapters—namely, React Router.
  prefs: []
  type: TYPE_NORMAL
- en: Layouts in Next.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Similar to React Router and its `Slot` component, the Next.js App Router provides
    a powerful `Layout` component that blends into the directory structure concept.
    `Layout` is a user interface that is shared among routes; it preserves state,
    remains interactive, and does not re-render. Instead of a `Slot` component used
    in React Router, the Next.js layout accepts a `children` prop that will render
    inside the base page—practically the entire application will be loaded inside
    this layout component.
  prefs: []
  type: TYPE_NORMAL
- en: You can inspect the mandatory root layout that is used throughout the entire
    Next.js application and is located in `/app/layout.js`. Try adding an element
    inside the body and before the `{{children}}` component and inspect on which pages
    the element is visible—it should be visible on every page. The root layout isn’t
    the only layout that you can use; in fact, you can and you should create layouts
    for related routes that encapsulate common functionality or user interface elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a simple layout that will be used for the cars list page and the
    individual cars (so it will be located inside the `/app/cars` folder), create
    a file named `layout.js` inside the `/``app/cars` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that the layout affects the `/cars` and `/cars/id` routes, but
    not the other ones; it is the location of the layout file that defines when it
    will be loaded. This functionality enables you to create different nested routes
    and keep reusable UI functionality based on your application logic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before moving on, there are a couple of features of the Next.js router that
    need to be mentioned:'
  prefs: []
  type: TYPE_NORMAL
- en: '`template.js` that wraps the entire child layout or page but does not persist
    across requests. It can be used, for instance, with Framer Motion to add page
    transitions and animations between different pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`[… folderName]`. These segments will match more additional path parameters.
    The Next.js documentation on route segments is available at https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes#catch-all-segments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Route groups** are useful when you want to prevent a folder from being included
    in the route’s URL path, while retaining the layout functionality. Route groups
    are documented at [https://nextjs.org/docs/app/building-your-application/routing/route-groups](https://nextjs.org/docs/app/building-your-application/routing/route-groups).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After having created the necessary pages and learned about the main features
    of the App Router, in the next section, you will learn about Next.js components
    and how to leverage layouts in your application structure.
  prefs: []
  type: TYPE_NORMAL
- en: Next.js components
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the main new concepts of Next.js is the distinction between `localstorage`,
    and so on).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The Next.js documentation explains the major but also the more subtle differences
    here: [https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns](https://nextjs.org/docs/app/building-your-application/rendering/composition-patterns).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Generally speaking, since server components can access data on the server directly,
    they are preferred for tasks such as data fetching and working with sensitive
    information (access tokens, API keys, and so on). Client components are a better
    fit for classic React **single-page application** (**SPA**) tasks: adding interactivity,
    using React hooks, custom hooks that depend on the state, interfacing with the
    browser, geolocation, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: By default, Next.js components are *server* components. To turn them into client
    components, you must add the `"use client"` directive as the first line. This
    directive defines a boundary between a server and a client component module.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the navigation component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To begin crafting Next.js components, now you will create a simple navigation
    component and learn about the `Link` component in Next.js.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a navigation component, implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a folder called `/src/components/` alongside the `/app` folder (not
    inside it, since these will not be user-navigable pages) and create the `NavBar.js`
    file inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `NavBar.js` component is very similar to the ones created in previous chapters.
    However, here, you have imported the `Link` component—the Next.js component that
    extends the `<a>` element (the native HTML link component) and provides data pre-fetching
    ([https://nextjs.org/docs/app/api-reference/components/link](https://nextjs.org/docs/app/api-reference/components/link)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The previous code utilizes a Tailwind plugin that enables developers to target
    descendent selectors directly. To use it, open the `tailwind.config.js` file and
    edit the content by changing the `plugins` array value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now open the root layout, located at `/src/app/layout.js`, and insert the `NavBar.js`
    component before the `children` props by replacing the existing `RootLayout` function
    with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this step, you added the newly created component to the root layout since
    it will be displayed on every page.
  prefs: []
  type: TYPE_NORMAL
- en: You now have defined the routes, scaffolded the basic pages of the application,
    and created a simple navigation menu. In the next section, you will see how Next.js
    simplifies data loading through server components.
  prefs: []
  type: TYPE_NORMAL
- en: Data loading with server components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following process will help you learn how to load data from your FastAPI
    server into the `/cars` page without resorting to hooks and states, and see how
    Next.js extends the native fetch functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'To load data from your FastAPI server into the `/cars` page without hooks,
    implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before creating the page that should display information about all the cars
    that are currently present in your cars collection, create a `.env` file in the
    root of the Next.js project (parallel to the `/src` folder) and use it to map
    the address of your API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This value will have to change once you deploy and wish to use your Render.com
    API URL, or whatever backend deployment solution you might choose.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Once it has been set in the environment, the address will be available in your
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is important to remember that in order to be visible in the browser, the
    environment variables need to be prepended by the `NEXT_PUBLIC_` string. In this
    case, however, you are doing data fetching on the server, in a server component,
    so it is perfectly fine to hide the API address.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now you are ready to perform the first server-side fetch. Make sure that your
    backend server is running on the specified port `8000`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `/app/cars/page.js` file and edit it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code might seem simple, but it represents a completely new paradigm
    in React-based development.
  prefs: []
  type: TYPE_NORMAL
- en: You used the Next.js `fetch` function, which extends the native Web API `fetch`
    method and provides some additional functionalities. It is an `async` function,
    so the entire component is asynchronous, and the call is awaited.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'This fetch functionality is explained in great detail on the Next.js website:
    [https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating](https://nextjs.org/docs/app/building-your-application/data-fetching/fetching-caching-and-revalidating).'
  prefs: []
  type: TYPE_NORMAL
- en: While providing various features such as access to headers and cookies, the
    `fetch` function allows granular control over caching and revalidating the received
    data. Revalidation in this context means the cache invalidation and re-fetching
    of the latest data. Your cars page might have very frequent updates, and you can
    set a time limit on the content. In the preceding code, the content is revalidated
    every 10 seconds. In some cases, it might make sense to revalidate the data after
    a couple of hours or even days.
  prefs: []
  type: TYPE_NORMAL
- en: Before moving on to specialized components provided by the framework, you will
    learn about the `error.js` file, which is used for catching errors while staying
    within the boundaries of a layout and route group.
  prefs: []
  type: TYPE_NORMAL
- en: Error pages in Next.js
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To catch unexpected errors that might arise in server components and client
    components, and to display a fallback user interface, you can create a file called
    `error.js` (the name is mandatory) inside the desired folder:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file, `/src/app/cars/error.js`, with the following simple content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component must use the `"use client"` directive as per the documentation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can test the error handling page by throwing a generic error inside `[id]/page.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you now try to navigate to any car details page, you will see that the page
    is loaded—the navigation is present, and the main layout and the cars layout are
    rendered. Only the inside of the innermost route group, which contains the `error.js`
    file, displays the error message.
  prefs: []
  type: TYPE_NORMAL
- en: After learning how to get data inside the page directly from the server, in
    the following section, you will create a statically generated single-car page
    and learn about the powerful Next.js `Image` component.
  prefs: []
  type: TYPE_NORMAL
- en: Static page generation and the Image component
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Next.js provides yet another way of generating pages—*static rendering*. In
    this case, pages are rendered at build time (instead of at request time), or,
    in case of data revalidation, in the background. The resulting page is then cached
    and pushed to the content delivery network, for efficient and fast serving. This
    makes Next.js effectively behave like a static site generator, much like Gatsby.js
    or Hugo, and achieve maximum performance in terms of website speed.
  prefs: []
  type: TYPE_NORMAL
- en: However, not all routes are suitable for static rendering; pages that are personalized
    and contain user-specific data are examples of pages that shouldn’t be statically
    generated. Blog posts, documentation pages, or even car ads, however, are not
    pages that should display different features to different users.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will first generate individual car pages as server-side
    rendered pages, like the cars page before, and afterward, you will modify the
    page(s) to be statically rendered.
  prefs: []
  type: TYPE_NORMAL
- en: Before you begin working with the `Image` component, modify the `next.js.mjs`
    file—the Next.js configuration file—and let Next.js know that it should allow
    images from an external domain—in your case, Cloudinary—since this is where our
    car images are hosted.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `next.config.mjs` file and edit the configuration:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After this modification, restart the Next.js development server manually:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now you will create the server-side rendered version of the cars page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `/app/cars/[id]/page.js` and modify it accordingly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, you imported the `next/image` component and you destructured
    the parameters as `params` from the URL. Then, you performed a similar `fetch`
    request and checked the result status. In case of an error, you used the Next.js
    `redirect` function to redirect the user to the error page, which is yet to be
    created.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, continue editing the component and return some basic JSX:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The rest of the functional component is rather simple. You have used the `Image`
    component and provided the mandatory data, such as the `width`, `height`, and
    `alt text`. The Image component has a rich API that is documented on the Next.js
    website ([https://nextjs.org/docs/app/api-reference/components/image](https://nextjs.org/docs/app/api-reference/components/image)),
    and it should be used whenever possible because it vastly improves your site’s
    performance.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `redirect` function is imported from `next/navigation` ([https://nextjs.org/docs/app/building-your-application/routing/redirecting](https://nextjs.org/docs/app/building-your-application/routing/redirecting)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The statically generated version of the page(s) includes providing a `generateStaticParams()`
    function to the page and exporting it; Next.js uses this function to know which
    pages to generate at build time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For your `/app/cars/[id]/page.js` file, this function will need to loop over
    all the cars that need a static page (all cars in this case) and provide an array
    of IDs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you add the preceding `generateStaticParams()` function to the component,
    stop the development server and run another Next.js command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Next.js will produce an optimized build of the entire site, rendering the individual
    car pages at build time as static HTML pages. If you inspect the console, you
    will see the list of routes and a legend that shows which pages were rendered
    at build time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Running the production build is possible with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Before closing this section, let’s take care of the cases in which the user
    hits the wrong URL, resulting in a nonexistent car. To handle these `404 Page
    Not Found` errors, create a new file called `/src/app/not-found.js` and populate
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This route will cover all the route groups, in a similar way to the `*` route
    in the React Router package.
  prefs: []
  type: TYPE_NORMAL
- en: After having created the dynamic server-side and statically generated pages
    and exploring some of the most important features of Next.js, you will learn how
    to authenticate users with the existing API in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and Server Actions in Next.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned about quite a few Next.js features that make it stand out as
    the premier web framework, but the list of the most important functionalities
    wouldn’t be complete without a very brief introduction to **Server Actions**.
  prefs: []
  type: TYPE_NORMAL
- en: Server Actions are simply asynchronous functions executed only on the server
    and designed to handle data fetching and mutations (through `POST`, `PUT`, and
    `DELETE` methods), and they can be called through plain form submissions (the
    default browser form handling method), but also through event handlers (a React-y
    approach) or by third-party libraries such as Axios.
  prefs: []
  type: TYPE_NORMAL
- en: The benefits of such an approach are numerous. Performance is improved because
    the client-side JavaScript is significantly reduced, and since the actions run
    only on the server, the overall security of the application is enhanced and applications
    can even run with JavaScript disabled, much like the old-school applications of
    a couple of decades ago.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will now create your first server action that will be used for logging
    users in, with the help of a package called `localStorage`: signing and encrypting
    cookies. The usage is quite simple, and it is documented here: [https://github.com/vvo/iron-session](https://github.com/vvo/iron-session).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install the Iron Session package with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To use the `iron-session` functionality, create a `sessionOptions` object in
    a file called `/src/lib.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The configuration object defines the options necessary for the cookie encryption
    and decryption and you should use a strong, computer-generated random password.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Iron Session API is very simple as the session object allows for setting
    and getting dictionary-like values. You will use it to set two simple values:
    the currently logged-in username as well as the `jwt` itself, necessary for performing
    calls to your FastAPI endpoints.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now you will begin creating the server actions needed for the application,
    beginning from the login action for authenticating users:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a `/src/actions.js` file and import the necessary packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code imports the cookies from Next.js and the `getIronSession()`
    function from Iron Session, as well as the `sessionOptions` class you defined
    earlier. You then created a simple function for getting the current session and
    the data within.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, in the same file, handle the login functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is straightforward and not unlike the code you saw in the React Router
    and `localStorage` solution. The important parts are the ones related to the session
    object—if the `fetch` call returns a successful response, it means that a valid
    user was found, and the session is set with the username and the corresponding
    `jwt`. If not, the session is destroyed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A redirect to the `/private` page is performed only when the user logs in and
    the session is successfully set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now that you have created your first Server Action, you are ready to create
    a Next.js client component—the login form that will be used on the login page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new component file, `/src/app/components/LoginForm.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`LoginForm` is, unlike the previously created `NavBar` component, a client
    component, which means that it will get rendered on the client and thus needs
    to begin with the `"use` `client"` directive.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `useFormState` hook is one of the newest additions to the React ecosystem
    (it is, in fact, imported from the React-Dom package, and not Next.js) and it
    allows you to update the state based on the form action ([https://pl.react.dev/reference/react-dom/hooks/useFormState](https://pl.react.dev/reference/react-dom/hooks/useFormState)).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Continue building the `LoginForm` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This login form uses the `useFormState` hook, which provides the state—essentially
    the error object, and `formAction`. In the form, you are displaying the state
    as a stringified JSON object, but in a realistic scenario, you can access all
    the individual errors provided by the server (FastAPI in your case) and display
    them accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After updating the `/src/app/login/page.js` page and simply adding the `LoginForm`
    component, you will have the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now, if you try to navigate to the `/login` route and insert some invalid credentials,
    the error will be printed below the form in a stringified JSON format. If the
    credentials are valid, you should be redirected to the `/private` route, and in
    the `jwt`, available across the entire application.
  prefs: []
  type: TYPE_NORMAL
- en: You have added the authentication functionality through the use of the `iron-session`
    package and with the Next.js Server Actions.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will create a protected page that is visible only to
    authenticated users. Although there are different ways of protecting pages in
    Next.js, including the use of Next.js middleware, you are going to protect just
    one page with a simple session verification.
  prefs: []
  type: TYPE_NORMAL
- en: Creating protected pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will create one protected page—the page for inserting new
    cars into the MongoDB database collection. Use Iron Session to check the validity
    of the cookie and to pass the value of the logged-in user’s username and `jwt`
    across pages.
  prefs: []
  type: TYPE_NORMAL
- en: You will create a protected page by verifying the data from the session. If
    the session is present (and includes a username and `jwt`), the user will be able
    to navigate to it and perform an action to create new cars through the form and
    an associated Server Action. If not, the user will be redirected to the login
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The only authenticated page that you will need in this application is the one
    for inserting new cars, and Iron Session makes this job very easy:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `/src/app/private/page.js` and edit the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The previous code uses the Iron Session object: if `jwt` in the session is
    present, the user is able to see the page that currently contains the session
    data. If the session is invalid, the user is redirected to the `/``login` page.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To add logout functionality with the session, add another action to the `/``src/actions.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This action can now be invoked from the `NavBar` component, and the session
    object can be used to show or hide the login and logout links accordingly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To incorporate the logout functionality into the website, create a simple one-button
    form for logging the user out in a new `LogoutForm.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`LogoutForm` consists of only one button that invokes the logout action defined
    earlier. Let’s add it to the navigation (`NavBar.js`) component with some conditional
    logic.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `src/components/Navbar.js` file and edit the navigation component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After importing the `getSession` function—to track whether the user is logged
    in or not—and the `LogoutForm` button, you can define the component:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component now keeps track of the logged user and displays conditionally
    the login or logout link depending on the user’s logged-in status. The private
    link is deliberately always visible, but you can test it out; if you are not logged
    in, you will not be able to visit the page and you will get redirected to the
    login page.
  prefs: []
  type: TYPE_NORMAL
- en: You have now completely implemented the login functionality. There are a couple
    of factors to consider, starting with the duration of the cookie—set through the
    `maxAge` property in the file `/src/lib.js`—which should match the duration of
    `jwt` provided by FastAPI from the backend. The application intentionally lacks
    user registration functionality since the idea is to have a couple of employees—users
    who can be created through the API directly. As an exercise, you could write the
    page for registering users and using the FastAPI `/``users/register` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will finalize the application by creating a private
    page that’s visible only to authenticated users and will allow only salespeople
    to insert new cars.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing the new car page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will create the form for inserting new cars. You will not
    use a form validation library, since that was covered in [*Chapter 8*](B22406_08.xhtml#_idTextAnchor137),
    *Building the Frontend of the Application*, with the Zod library. In a realistic
    application, the form would definitely have a similar type of validation. You
    will create a new Server Action for performing the POST API call and again use
    `useFormState`—the same pattern that you used for logging the users in.
  prefs: []
  type: TYPE_NORMAL
- en: 'As the form for inserting cars contains a lot of fields (and there could be
    many, many more), you will start by abstracting the form field into a separate
    component. The implementation of the new car advert creation will be broken into
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `Field` component in a file named `/src/components/InputField.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With `InputField` now out of the way, create `CarForm`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create a new component in the `/src/components/CarForm.js` file and begin with
    the imports and the array of fields that will be needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The component uses the `useFormState` hook; you already know that it needs to
    be a client component.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The rest of the component is just a mapping over the `fields` array and the
    implementation of the hook:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The form uses the `createCar` action that you will be defining in the `actions.js`
    file in a future step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The form needs to be displayed on the private page, so edit the `/``src/app/private/page.js`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The form is created, and it is displayed on the `/private` page. The only thing
    that is missing is the corresponding action, which you will create in the next
    step.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `/src/actions.js` file and add the following action to the end of
    the file for creating a new car:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The action is straightforward—that is the beauty of Server Actions. It is just
    a function that checks the session and `jwt` and performs the `API POST` request.
    The function should also include an earlier redirect to the login page in case
    `jwt` is not found, but this way, you let the `useFormState` hook display any
    errors coming from the backend.
  prefs: []
  type: TYPE_NORMAL
- en: You have implemented the website specification—users are able to log in and
    insert new cars and, after the period of revalidation (15-20 seconds), the cars
    are displayed on the `/car` page as well as on the dedicated page for the newly
    inserted car.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, you will deploy your application to Netlify and learn how
    to streamline the process, while providing environment variables and configuring
    settings for a deployment.
  prefs: []
  type: TYPE_NORMAL
- en: Providing metadata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main features of Next.js is the ability to provide better **search
    engine optimization** (**SEO**) than SPAs. While generating static content that
    is easily picked up by crawlers is important, providing useful page metadata is
    essential.
  prefs: []
  type: TYPE_NORMAL
- en: Metadata is an important feature of every web application or site, and Next.js
    solves this problem in an elegant way with the `Metadata` component. Metadata
    enables direct communication with search engines (such as Google), providing precise
    information about the site’s content, title, and description, as well as page-specific
    information.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this brief section, you will learn how to set the title tags of pages. The
    Next.js documentation is very detailed ([https://nextjs.org/docs/app/building-your-application/optimizing/metadata](https://nextjs.org/docs/app/building-your-application/optimizing/metadata))
    and explains the various pieces of information that can be set, but in this case,
    you are only going to set the page titles:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `src/app/layout.js` page and edit the `metadata` part:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This simple change will cause all the pages within the layout to have the newly
    set title and description. Since you have edited the `Root` layout, which encloses
    all the pages, this means that every page on the website will be affected. These
    can be overridden on a per-page basis.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `/src/app/cars/[id]/page.js` for the individual cars page and add the
    following export:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding export signals to Next.js that only these pages should have the
    title that is returned from the function, while the other pages will have the
    unaltered title.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully edited the pages’ metadata, and now it is time to deploy
    the application on the internet, which the next section will detail.
  prefs: []
  type: TYPE_NORMAL
- en: Deployment on Netlify
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Next.js is arguably the most popular full-stack and frontend framework, and
    there is a plethora of deployment options.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you will learn how to deploy your Next.js application on Netlify—one
    of the most popular web platforms for deployment, content orchestration, continuous
    integration, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: In order to deploy your website on Netlify, you will need to deploy the FastAPI
    backend. If you haven’t already done so, please refer to [*Chapter 7*](B22406_07.xhtml#_idTextAnchor118),
    *Building a Backend with FastAPI*, on how to do that. Once you have the backend
    address (in your example, the URL of the deployed FastAPI application is [https://chapter9backend2ed.onrender.com](https://chapter9backend2ed.onrender.com)),
    it will be used as the API URL for the Next.js frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to perform the deployment to Netlify, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Create a Netlify account**: Log in with your GitHub account and create a
    free Netlify account, since Netlify will pick your code from the repository that
    you will make for the Next.js app.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create a GitHub repository**: In order to be able to deploy to Netlify (or
    Vercel for that matter), you will need to create a GitHub repository for your
    Next.js project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To create a GitHub repository, implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your terminal, enter the project folder and type the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command adds the modified and newly created files to the repository.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, commit the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Now that your project is under version control, create a new repository in your
    GitHub account and choose an appropriate name. In your case, the repository is
    named `chapter10frontend`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pushing the changes to GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now you can add the new origin to your local repository. In the same terminal
    inside the project, type the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, set the name of the branch to `main`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, set the origin to the newly created repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, you need to replace the name of the repository and your username: `(<username>`
    and `<name_of_the_repo>`).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, push the project to GitHub:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can deploy the repository on Netlify in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '`chapter10frontend` in your case).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`main` as that is your only branch'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Base directory: Leave empty'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Build command: Leave it as `npm` `run build`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Publish directory: Leave it as `.next`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Set the only environment variable: Click the `API_URL` and the value will be
    the FastAPI backend URL. If you followed the steps from the previous chapter to
    host your backend on Render, the value will be [https://chapter9backend2ed.onrender.com](https://chapter9backend2ed.onrender.com).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Hit the **Deploy** (**<name of your** **repo>**) button!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After a while, you should have your website deployed to the address indicated
    on the page. Bear in mind, however, that the API must be working, and since the
    free tier of Render.com, for instance (if you used Render as your backend deployment
    option), can take up to a minute to wake up after going stale, be prepared to
    wake up the API. The recommendation is to wait until the backend is responsive—you
    can check it by simply visiting the API address—and then begin the deployment
    process. This way, you will prevent potential deployment and page generation errors.
  prefs: []
  type: TYPE_NORMAL
- en: This is a good moment to analyze the command that you provided to Netlify to
    build the site—the `build` command. If you run `npm run build` in your Next.js
    command line, Next.js performs a series of operations and produces an optimized
    build.
  prefs: []
  type: TYPE_NORMAL
- en: These operations include code optimizations (such as minification and code splitting),
    the creation of a `.next` directory that contains the optimized, production-ready
    code, and the directory that actually gets served on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `build` command also generates the static pages and the route handlers.
    You can test the build after it successfully completes, with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You have now successfully deployed an optimized FastAPI MongoDB-powered Next.js
    website and you are ready to tackle a host of web development tasks with an incredibly
    powerful and flexible stack.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned the basics of Next.js, a popular React-based
    full-stack framework that, coupled with FastAPI and MongoDB, allows you to build
    any virtually any type of web application.
  prefs: []
  type: TYPE_NORMAL
- en: You have learned how to create a new Next.js project, how to implement routing
    with the new App Router, and how to fetch data with server components.
  prefs: []
  type: TYPE_NORMAL
- en: Important Next.js concepts, such as Server Actions, form handling, and cookies
    were also introduced and implemented. Apart from this, you explored some of the
    Next.js optimizations such as the `Image` component for serving optimized images,
    the `Metadata` tags, and how to create a production build.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, you deployed your Next.js application on Netlify, but the underlying
    principles of deployment remain the same for other providers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next.js is a rich and complex ecosystem in its own right, and you should consider
    this chapter as a starting point for your next application, which blends the best
    of the three worlds: FastAPI, MongoDB, and React, with the addition of external
    third-party services that your application might need.'
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will share some practical advice for you while working with
    the FARM stack, along with project ideas that can help you get started right away.
  prefs: []
  type: TYPE_NORMAL
