["```py\n$ easy_install construct\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.6\\. \n# It may run on any other version with/without modifications.\n\nimport argparse\nimport pcap\nfrom construct.protocols.ipstack import ip_stack\n\ndef print_packet(pktlen, data, timestamp):\n  \"\"\" Callback for printing the packet payload\"\"\"\n  if not data:\n    return\n\n  stack = ip_stack.parse(data)\n  payload = stack.next.next.next\n  print payload\n\ndef main():\n  # setup commandline arguments\n  parser = argparse.ArgumentParser(description='Packet Sniffer')\n  parser.add_argument('--iface', action=\"store\", dest=\"iface\", \ndefault='eth0')\n  parser.add_argument('--port', action=\"store\", dest=\"port\", \ndefault=80, type=int)\n  # parse arguments\n  given_args = parser.parse_args()\n  iface, port =  given_args.iface, given_args.port\n  # start sniffing\n  pc = pcap.pcapObject()\n  pc.open_live(iface, 1600, 0, 100)\n  pc.setfilter('dst port %d' %port, 0, 0)\n\n  print 'Press CTRL+C to end capture'\n  try:\n    while True:\n      pc.dispatch(1, print_packet)\n  except KeyboardInterrupt:\n    print 'Packet statistics: %d packets received, %d packets \ndropped, %d packets dropped by the interface' % pc.stats()\n\nif __name__ == '__main__':\n  main()\n```", "```py\npython 9_1_packet_sniffer.py --iface=eth0 --port=80 \nPress CTRL+C to end capture\n''\n0000   47 45 54 20 2f 20 48 54 54 50 2f 31 2e 31 0d 0a   GET / HTTP/1.1..\n0010   48 6f 73 74 3a 20 77 77 77 2e 67 6f 6f 67 6c 65   Host: www.google\n0020   2e 63 6f 6d 0d 0a 43 6f 6e 6e 65 63 74 69 6f 6e   .com..Connection\n0030   3a 20 6b 65 65 70 2d 61 6c 69 76 65 0d 0a 41 63   : keep-alive..Ac\n0040   63 65 70 74 3a 20 74 65 78 74 2f 68 74 6d 6c 2c   cept: text/html,\n0050   61 70 70 6c 69 63 61 74 69 6f 6e 2f 78 68 74 6d   application/xhtm\n0060   6c 2b 78 6d 6c 2c 61 70 70 6c 69 63 61 74 69 6f   l+xml,applicatio\n0070   6e 2f 78 6d 6c 3b 71 3d 30 2e 39 2c 2a 2f 2a 3b   n/xml;q=0.9,*/*;\n0080   71 3d 30 2e 38 0d 0a 55 73 65 72 2d 41 67 65 6e   q=0.8..User-Agen\n0090   74 3a 20 4d 6f 7a 69 6c 6c 61 2f 35 2e 30 20 28   t: Mozilla/5.0 (\n00A0   58 31 31 3b 20 4c 69 6e 75 78 20 69 36 38 36 29   X11; Linux i686)\n00B0   20 41 70 70 6c 65 57 65 62 4b 69 74 2f 35 33 37    AppleWebKit/537\n00C0   2e 33 31 20 28 4b 48 54 4d 4c 2c 20 6c 69 6b 65   .31 (KHTML, like\n00D0   20 47 65 63 6b 6f 29 20 43 68 72 6f 6d 65 2f 32    Gecko) Chrome/2\n00E0   36 2e 30 2e 31 34 31 30 2e 34 33 20 53 61 66 61   6.0.1410.43 Safa\n00F0   72 69 2f 35 33 37 2e 33 31 0d 0a 58 2d 43 68 72   ri/537.31..X-Chr\n0100   6f 6d 65 2d 56 61 72 69 61 74 69 6f 6e 73 3a 20   ome-Variations: \n0110   43 50 71 31 79 51 45 49 6b 62 62 4a 41 51 69 59   CPq1yQEIkbbJAQiY\n0120   74 73 6b 42 43 4b 4f 32 79 51 45 49 70 37 62 4a   tskBCKO2yQEIp7bJ\n0130   41 51 69 70 74 73 6b 42 43 4c 65 32 79 51 45 49   AQiptskBCLe2yQEI\n0140   2b 6f 50 4b 41 51 3d 3d 0d 0a 44 4e 54 3a 20 31   +oPKAQ==..DNT: 1\n0150   0d 0a 41 63 63 65 70 74 2d 45 6e 63 6f 64 69 6e   ..Accept-Encodin\n0160   67 3a 20 67 7a 69 70 2c 64 65 66 6c 61 74 65 2c   g: gzip,deflate,\n0170   73 64 63 68 0d 0a 41 63 63 65 70 74 2d 4c 61 6e   sdch..Accept-Lan\n0180   67 75 61 67 65 3a 20 65 6e 2d 47 42 2c 65 6e 2d   guage: en-GB,en-\n0190   55 53 3b 71 3d 30 2e 38 2c 65 6e 3b 71 3d 30 2e   US;q=0.8,en;q=0.\n01A0   36 0d 0a 41 63 63 65 70 74 2d 43 68 61 72 73 65   6..Accept-Charse\n01B0   74 3a 20 49 53 4f 2d 38 38 35 39 2d 31 2c 75 74   t: ISO-8859-1,ut\n01C0   66 2d 38 3b 71 3d 30 2e 37 2c 2a 3b 71 3d 30 2e   f-8;q=0.7,*;q=0.\n01D0   33 0d 0a 43 6f 6f 6b 69 65 3a 20 50 52 45 46 3d   3..Cookie: PREF=\n\nâ€¦.\n\n^CPacket statistics: 17 packets received, 0 packets dropped, 0 \npackets dropped by the interface\n\n```", "```py\nfrom scapy.all import *\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.7\\. \n# It may run on any other version with/without modifications.\n\nimport os\nfrom scapy.all import *\n\npkts = []\niter = 0\npcapnum = 0\n\ndef write_cap(x):\n  global pkts\n  global iter\n  global pcapnum\n  pkts.append(x)\n  iter += 1\n  if iter == 3:\n    pcapnum += 1\n    pname = \"pcap%d.pcap\" % pcapnum\n    wrpcap(pname, pkts)\n    pkts = []\n    iter = 0\n\nif __name__ == '__main__':\n  print \"Started packet capturing and dumping... Press CTRL+C to exit\"\n  sniff(prn=write_cap)\n\n  print \"Testing the dump file...\"\n  dump_file = \"./pcap1.pcap\"\n  if os.path.exists(dump_file):\n    print \"dump fie %s found.\" %dump_file\n    pkts = sniff(offline=dump_file)\n    count = 0\n    while (count <=2):\n      print \"----Dumping pkt:%s----\" %count\n      print hexdump(pkts[count])\n      count += 1    \n  else:\n    print \"dump fie %s not found.\" %dump_file\n```", "```py\n# python 9_2_save_packets_in_pcap_format.py \n^CStarted packet capturing and dumping... Press CTRL+C to exit\nTesting the dump file...\ndump fie ./pcap1.pcap found.\n----Dumping pkt:0----\n0000   08 00 27 95 0D 1A 52 54  00 12 35 02 08 00 45 00   ..'...RT..5...E.\n0010   00 DB E2 6D 00 00 40 06  7C 9E 6C A0 A2 62 0A 00   ...m..@.|.l..b..\n0020   02 0F 00 50 99 55 97 98  2C 84 CE 45 9B 6C 50 18   ...P.U..,..E.lP.\n0030   FF FF 53 E0 00 00 48 54  54 50 2F 31 2E 31 20 32   ..S...HTTP/1.1 2\n0040   30 30 20 4F 4B 0D 0A 58  2D 44 42 2D 54 69 6D 65   00 OK..X-DB-Time\n0050   6F 75 74 3A 20 31 32 30  0D 0A 50 72 61 67 6D 61   out: 120..Pragma\n0060   3A 20 6E 6F 2D 63 61 63  68 65 0D 0A 43 61 63 68   : no-cache..Cach\n0070   65 2D 43 6F 6E 74 72 6F  6C 3A 20 6E 6F 2D 63 61   e-Control: no-ca\n0080   63 68 65 0D 0A 43 6F 6E  74 65 6E 74 2D 54 79 70   che..Content-Typ\n0090   65 3A 20 74 65 78 74 2F  70 6C 61 69 6E 0D 0A 44   e: text/plain..D\n00a0   61 74 65 3A 20 53 75 6E  2C 20 31 35 20 53 65 70   ate: Sun, 15 Sep\n00b0   20 32 30 31 33 20 31 35  3A 32 32 3A 33 36 20 47    2013 15:22:36 G\n00c0   4D 54 0D 0A 43 6F 6E 74  65 6E 74 2D 4C 65 6E 67   MT..Content-Leng\n00d0   74 68 3A 20 31 35 0D 0A  0D 0A 7B 22 72 65 74 22   th: 15....{\"ret\"\n00e0   3A 20 22 70 75 6E 74 22  7D                        : \"punt\"}\nNone\n----Dumping pkt:1----\n0000   52 54 00 12 35 02 08 00  27 95 0D 1A 08 00 45 00   RT..5...'.....E.\n0010   01 D2 1F 25 40 00 40 06  FE EF 0A 00 02 0F 6C A0   ...%@.@.......l.\n0020   A2 62 99 55 00 50 CE 45  9B 6C 97 98 2D 37 50 18   .b.U.P.E.l..-7P.\n0030   F9 28 1C D6 00 00 47 45  54 20 2F 73 75 62 73 63   .(....GET /subsc\n0040   72 69 62 65 3F 68 6F 73  74 5F 69 6E 74 3D 35 31   ribe?host_int=51\n0050   30 35 36 34 37 34 36 26  6E 73 5F 6D 61 70 3D 31   0564746&ns_map=1\n0060   36 30 36 39 36 39 39 34  5F 33 30 30 38 30 38 34   60696994_3008084\n0070   30 37 37 31 34 2C 31 30  31 39 34 36 31 31 5F 31   07714,10194611_1\n0080   31 30 35 33 30 39 38 34  33 38 32 30 32 31 31 2C   105309843820211,\n0090   31 34 36 34 32 38 30 35  32 5F 33 32 39 34 33 38   146428052_329438\n00a0   36 33 34 34 30 38 34 2C  31 31 36 30 31 35 33 31   6344084,11601531\n00b0   5F 32 37 39 31 38 34 34  37 35 37 37 31 2C 31 30   _279184475771,10\n00c0   31 39 34 38 32 38 5F 33  30 30 37 34 39 36 35 39   194828_300749659\n00d0   30 30 2C 33 33 30 39 39  31 39 38 32 5F 38 31 39   00,330991982_819\n00e0   33 35 33 37 30 36 30 36  2C 31 36 33 32 37 38 35   35370606,1632785\n00f0   35 5F 31 32 39 30 31 32  32 39 37 34 33 26 75 73   5_12901229743&us\n0100   65 72 5F 69 64 3D 36 35  32 30 33 37 32 26 6E 69   er_id=6520372&ni\n0110   64 3D 32 26 74 73 3D 31  33 37 39 32 35 38 35 36   d=2&ts=137925856\n0120   31 20 48 54 54 50 2F 31  2E 31 0D 0A 48 6F 73 74   1 HTTP/1.1..Host\n0130   3A 20 6E 6F 74 69 66 79  33 2E 64 72 6F 70 62 6F   : notify3.dropbo\n0140   78 2E 63 6F 6D 0D 0A 41  63 63 65 70 74 2D 45 6E   x.com..Accept-En\n0150   63 6F 64 69 6E 67 3A 20  69 64 65 6E 74 69 74 79   coding: identity\n0160   0D 0A 43 6F 6E 6E 65 63  74 69 6F 6E 3A 20 6B 65   ..Connection: ke\n0170   65 70 2D 61 6C 69 76 65  0D 0A 58 2D 44 72 6F 70   ep-alive..X-Drop\n0180   62 6F 78 2D 4C 6F 63 61  6C 65 3A 20 65 6E 5F 55   box-Locale: en_U\n0190   53 0D 0A 55 73 65 72 2D  41 67 65 6E 74 3A 20 44   S..User-Agent: D\n01a0   72 6F 70 62 6F 78 44 65  73 6B 74 6F 70 43 6C 69   ropboxDesktopCli\n01b0   65 6E 74 2F 32 2E 30 2E  32 32 20 28 4C 69 6E 75   ent/2.0.22 (Linu\n01c0   78 3B 20 32 2E 36 2E 33  32 2D 35 2D 36 38 36 3B   x; 2.6.32-5-686;\n01d0   20 69 33 32 3B 20 65 6E  5F 55 53 29 0D 0A 0D 0A    i32; en_US)....\nNone\n----Dumping pkt:2----\n0000   08 00 27 95 0D 1A 52 54  00 12 35 02 08 00 45 00   ..'...RT..5...E.\n0010   00 28 E2 6E 00 00 40 06  7D 50 6C A0 A2 62 0A 00   .(.n..@.}Pl..b..\n0020   02 0F 00 50 99 55 97 98  2D 37 CE 45 9D 16 50 10   ...P.U..-7.E..P.\n0030   FF FF CA F1 00 00 00 00  00 00 00 00               ............\nNone\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.7\\. \n# It may run on any other version with/without modifications.\n\nfrom scapy.all import *\n\ndef modify_packet_header(pkt):\n  \"\"\" Parse the header and add an extra header\"\"\"\n  if pkt.haslayer(TCP) and pkt.getlayer(TCP).dport == 80 and \npkt.haslayer(Raw):\n    hdr = pkt[TCP].payload.__dict__        \n    extra_item = {'Extra Header' : ' extra value'}\n    hdr.update(extra_item)     \n    send_hdr = '\\r\\n'.join(hdr)\n    pkt[TCP].payload = send_hdr\n\n    pkt.show()\n\n    del pkt[IP].chksum\n    send(pkt)\n\nif __name__ == '__main__':\n  # start sniffing\n  sniff(filter=\"tcp and ( port 80 )\", prn=modify_packet_header)\n```", "```py\n$ python 9_3_add_extra_http_header_in_sniffed_packet.py \n\n###[ Ethernet ]###\n dst       = 52:54:00:12:35:02\n src       = 08:00:27:95:0d:1a\n type      = 0x800\n###[ IP ]###\n version   = 4L\n ihl       = 5L\n tos       = 0x0\n len       = 525\n id        = 13419\n flags     = DF\n frag      = 0L\n ttl       = 64\n proto     = tcp\n chksum    = 0x171\n src       = 10.0.2.15\n dst       = 82.94.164.162\n \\options   \\\n###[ TCP ]###\n sport     = 49273\n dport     = www\n seq       = 107715690\n ack       = 216121024\n dataofs   = 5L\n reserved  = 0L\n flags     = PA\n window    = 6432\n chksum    = 0x50f\n urgptr    = 0\n options   = []\n###[ Raw ]###\n load      = 'Extra Header\\r\\nsent_time\\r\\nfields\\r\\naliastypes\\r\\npost_transforms\\r\\nunderlayer\\r\\nfieldtype\\r\\ntime\\r\\ninitialized\\r\\noverloaded_fields\\r\\npacketfields\\r\\npayload\\r\\ndefault_fields'\n.\nSent 1 packets.\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.7\\. \n# It may run on any other version with/without modifications.\n\nimport argparse\nimport socket\nimport sys\n\ndef scan_ports(host, start_port, end_port):\n  \"\"\" Scan remote hosts \"\"\"\n  #Create socket\n  try:\n    sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n  except socket.error,err_msg:\n    print 'Socket creation failed. Error code: '+ str(err_msg[0]) \n+ ' Error mesage: ' + err_msg[1]\n    sys.exit()\n\n  #Get IP of remote host\n  try:\n    remote_ip = socket.gethostbyname(host)\n  except socket.error,error_msg:\n    print error_msg\n  sys.exit()\n\n  #Scan ports\n  end_port += 1\n  for port in range(start_port,end_port):\n    try:\n      sock.connect((remote_ip,port))\n      print 'Port ' + str(port) + ' is open'\n      sock.close()\n      sock = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n    except socket.error:\n      pass # skip various socket errors\n\nif __name__ == '__main__':\n  # setup commandline arguments\n  parser = argparse.ArgumentParser(description='Remote Port \nScanner')\n  parser.add_argument('--host', action=\"store\", dest=\"host\", \ndefault='localhost')\n  parser.add_argument('--start-port', action=\"store\", \ndest=\"start_port\", default=1, type=int)\n  parser.add_argument('--end-port', action=\"store\", \ndest=\"end_port\", default=100, type=int)\n  # parse arguments\n  given_args = parser.parse_args()\n  host, start_port, end_port =  given_args.host, \ngiven_args.start_port, given_args.end_port\n  scan_ports(host, start_port, end_port)\n```", "```py\n# python 9_4_scan_port_of_a_remote_host.py --host=localhost --start-port=1 --end-port=100\nPort 21 is open\nPort 22 is open\nPort 23 is open\nPort 25 is open\nPort 80 is open\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.7\\. \n# It may run on any other version with/without modifications.\n\nimport argparse\nimport sys\nimport re\nfrom random import randint\n\nfrom scapy.all import IP,TCP,UDP,conf,send\n\ndef send_packet(protocol=None, src_ip=None, src_port=None, flags=None, dst_ip=None, dst_port=None, iface=None):\n  \"\"\"Modify and send an IP packet.\"\"\"\n  if protocol == 'tcp':\n    packet = IP(src=src_ip, dst=dst_ip)/TCP(flags=flags, \nsport=src_port, dport=dst_port)\n  elif protocol == 'udp':\n  if flags: raise Exception(\" Flags are not supported for udp\")\n    packet = IP(src=src_ip, dst=dst_ip)/UDP(sport=src_port, \ndport=dst_port)\n  else:\n    raise Exception(\"Unknown protocol %s\" % protocol)\n\n  send(packet, iface=iface)\n\nif __name__ == '__main__':\n  # setup commandline arguments\n  parser = argparse.ArgumentParser(description='Packet Modifier')\n  parser.add_argument('--iface', action=\"store\", dest=\"iface\", \ndefault='eth0')\n  parser.add_argument('--protocol', action=\"store\", \ndest=\"protocol\", default='tcp')\n  parser.add_argument('--src-ip', action=\"store\", dest=\"src_ip\", \ndefault='1.1.1.1')\n  parser.add_argument('--src-port', action=\"store\", \ndest=\"src_port\", default=randint(0, 65535))\n  parser.add_argument('--dst-ip', action=\"store\", dest=\"dst_ip\", \ndefault='192.168.1.51')\n  parser.add_argument('--dst-port', action=\"store\", \ndest=\"dst_port\", default=randint(0, 65535))\n  parser.add_argument('--flags', action=\"store\", dest=\"flags\", \ndefault=None)\n  # parse arguments\n  given_args = parser.parse_args()\n  iface, protocol, src_ip,  src_port, dst_ip, dst_port, flags =  \ngiven_args.iface, given_args.protocol, given_args.src_ip,\\\n  given_args.src_port, given_args.dst_ip, given_args.dst_port, \ngiven_args.flags\n  send_packet(protocol, src_ip, src_port, flags, dst_ip, \ndst_port, iface)\n```", "```py\ntcpdump src 192.168.1.66\ntcpdump: verbose output suppressed, use -v or -vv for full protocol decode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 65535 bytes\n^C18:37:34.309992 IP 192.168.1.66.60698 > 192.168.1.51.666: Flags [S], seq 0, win 8192, length 0\n\n1 packets captured\n1 packets received by filter\n0 packets dropped by kernel\n\n$ sudo python 9_5_modify_ip_in_a_packet.py \nWARNING: No route found for IPv6 destination :: (no default route?)\n.\nSent 1 packets.\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.7\\. \n# It may run on any other version with/without modifications.\n\nimport argparse\nfrom scapy.all import *\n\ndef send_packet(recvd_pkt, src_ip, dst_ip, count):\n  \"\"\" Send modified packets\"\"\"\n  pkt_cnt = 0\n  p_out = []\n\n  for p in recvd_pkt:\n    pkt_cnt += 1\n    new_pkt = p.payload\n    new_pkt[IP].dst = dst_ip\n    new_pkt[IP].src = src_ip\n    del new_pkt[IP].chksum\n    p_out.append(new_pkt)\n    if pkt_cnt % count == 0:\n      send(PacketList(p_out))\n      p_out = []\n\n  # Send rest of packet\n  send(PacketList(p_out))\n  print \"Total packets sent: %d\" %pkt_cnt\n\nif __name__ == '__main__':\n  # setup commandline arguments\n  parser = argparse.ArgumentParser(description='Packet Sniffer')\n  parser.add_argument('--infile', action=\"store\", dest=\"infile\", \ndefault='pcap1.pcap')\n  parser.add_argument('--src-ip', action=\"store\", dest=\"src_ip\", \ndefault='1.1.1.1')\n  parser.add_argument('--dst-ip', action=\"store\", dest=\"dst_ip\", \ndefault='2.2.2.2')\n  parser.add_argument('--count', action=\"store\", dest=\"count\", \ndefault=100, type=int)\n  # parse arguments\n  given_args = ga = parser.parse_args()\n  global src_ip, dst_ip\n  infile, src_ip, dst_ip, count =  ga.infile, ga.src_ip, \nga.dst_ip, ga.count\n  try:\n    pkt_reader = PcapReader(infile)\n    send_packet(pkt_reader, src_ip, dst_ip, count)\n  except IOError:\n    print \"Failed reading file %s contents\" % infile\n    sys.exit(1)\n```", "```py\n# python 9_6_replay_traffic.py \n...\nSent 3 packets.\nTotal packets sent 3\n----\n# tcpdump src 1.1.1.1\ntcpdump: verbose output suppressed, use -v or -vv for full protocol \ndecode\nlistening on eth0, link-type EN10MB (Ethernet), capture size 65535 \nbytes\n^C18:44:13.186302 IP 1.1.1.1.www > ARennes-651-1-107-2.w2-\n2.abo.wanadoo.fr.39253: Flags [P.], seq 2543332484:2543332663, ack \n3460668268, win 65535, length 179\n1 packets captured\n3 packets received by filter\n0 packets dropped by kernel\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 9\n# This program is optimized for Python 2.7\\. \n# It may run on any other version with/without modifications.\n\nfrom scapy.all import *\nimport os\ncaptured_data = dict()\n\nEND_PORT = 1000\n\ndef monitor_packet(pkt):\n  if IP in pkt:\n    if not captured_data.has_key(pkt[IP].src):\n      captured_data[pkt[IP].src] = []\n\n    if TCP in pkt:\n      if pkt[TCP].sport <=  END_PORT:\n        if not str(pkt[TCP].sport) in captured_data[pkt[IP].src]:\n           captured_data[pkt[IP].src].append(str(pkt[TCP].sport))\n\n  os.system('clear')\n  ip_list = sorted(captured_data.keys())\n  for key in ip_list:\n    ports=', '.join(captured_data[key])\n    if len (captured_data[key]) == 0:\n      print '%s' % key\n    else:\n      print '%s (%s)' % (key, ports)\n\nif __name__ == '__main__':\n  sniff(prn=monitor_packet, store=0)\n```", "```py\n# python 9_7_broadcast_scanning.py\n10.0.2.15\nXXX.194.41.129 (80)\nXXX.194.41.134 (80)\nXXX.194.41.136 (443)\nXXX.194.41.140 (80)\nXXX.194.67.147 (80)\nXXX.194.67.94 (443)\nXXX.194.67.95 (80, 443)\n\n```"]