- en: Chapter 24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pre-Test, Mid-Test and Post-Test Loop Structures
  prefs: []
  type: TYPE_NORMAL
- en: 24.1 The Pre-Test Loop Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The pre-test loop structure is shown in the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's see what happens when the flow of execution reaches a pre-test loop structure.
    If Boolean_Expression evaluates to True, the statement or block of statements
    of the structure is executed and the flow of execution goes back to check Boolean_Expression
    once more. If Boolean_Expression evaluates to True again, the process repeats.
    The iterations stop when Boolean_Expression, at some point, evaluates to False
    and the flow of execution exits the loop.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The Decision symbol (the diamond, or rhombus) is used both
    in decision control structures and in loop control structures. However, in loop
    control structures, one of the diamond''s exits always has an upward direction.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A “pre-test loop structure” is named this way because first
    the Boolean expression is evaluated, and afterwards the statement or block of
    statements of the structure is executed.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Because the Boolean expression is evaluated before entering
    the loop, a pre-test loop may perform from zero to many iterations.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Each time the statement or block of statements of a loop
    control structure is executed, the term used in computer science is “the loop
    is iterating” or “the loop performs an iteration”.'
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the Python statement is
  prefs: []
  type: TYPE_NORMAL
- en: 'while Boolean_Expression:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the numbers 1 to 10.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.1'
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Just as in decision control structures, the statements inside
    a loop control structure must be indented.'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, while-loops can also be combined with an else keyword as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'while Boolean_Expression:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  prefs: []
  type: TYPE_NORMAL
- en: However, this unusual feature is rarely used in practice, so it will not be
    further discussed in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-1 Designing the Flowchart and Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the corresponding flowchart for the following code fragment. How many
    iterations does this Python code perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 4
  prefs: []
  type: TYPE_NORMAL
- en: 'while i > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding flowchart fragment is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter24-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: Next, a trace table can help you observe the flow of execution.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | i = 4 |   | 4 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | while i > 0: | This evaluates to True | 1^(st) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | i = i ‑ 1 |   | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | while i > 0: | This evaluates to True | 2^(nd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | i = i ‑ 1 |   | 2 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | while i > 0: | This evaluates to True | 3^(rd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | i = i ‑ 1 |   | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | while i > 0: | This evaluates to True | 4^(th) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | i = i ‑ 1 |   | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | while i > 0: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | print("The end") | It displays: The end |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the trace table, the total number of iterations is four.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)When the statement or block of statements of a pre-test
    loop structure is executed N times, the Boolean expression is evaluated N+1 times.
    Therefore, to determine the total number of iterations, count the number of times
    the statement or block of statements is executed, not the number of times the
    Boolean expression is evaluated.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-2 Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 4
  prefs: []
  type: TYPE_NORMAL
- en: 'while i >= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is almost identical to the previous one. The main difference is
    that the Boolean expression here remains True, even for i = 0\. Therefore, it
    performs an additional iteration, that is, five iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-3 Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i != 6:'
  prefs: []
  type: TYPE_NORMAL
- en: i += 2
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a trace table to observe the flow of execution.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | i = 1 |   | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | while i != 6: | This evaluates to True | 1^(st) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | i += 2 |   | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | while i != 6: | This evaluates to True | 2^(nd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | i += 2 |   | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | while i != 6: | This evaluates to True | 3^(rd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | i += 2 |   | 7 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | while i != 6: | This evaluates to True | … |   |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | … | … |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the trace table, since the value 6 is never assigned to
    variable i, this code fragment will iterate for an infinite number of times! Obviously,
    this code does not satisfy the property of finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-4 Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = -10
  prefs: []
  type: TYPE_NORMAL
- en: 'while i > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Initially, the value −10 is assigned to variable i. The Boolean expression directly
    evaluates to False and the flow of execution goes right to the print("The end")
    statement. Thus, this code fragment performs zero iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-5 Finding the Sum of Four Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using a pre-test loop structure, write a Python program that lets the user enter
    four numbers and then calculates and displays their sum.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Do you remember the example in [Section 23.2](#toc_6) for calculating the sum
    of four numbers? At the end, after a little work, the proposed code fragment became
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'execute_these_statements_4_times:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Now, you need a way to “present” the statement execute_these_statements_4_times
    with real Python statements. The while statement can achieve this, but you need
    an additional variable to count the total number of iterations. This way, when
    the desired number of iterations has been performed, the flow of execution will
    exit the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Following is a general purpose code fragment that iterates for the number of
    times specified by total_number_of_iterations,
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= total_number_of_iterations:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: where total_number_of_iterations can be a constant value or even a variable
    or an expression.
  prefs: []
  type: TYPE_NORMAL
- en: After combining this code fragment with the previous one, the final program
    becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.1-5'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 4:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())     [[More…]](more.html#more_24_1_5_1)
  prefs: []
  type: TYPE_NORMAL
- en: total = total + x
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The name of the variable i is not binding. You can use any
    variable name you wish such as counter, count, k, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-6 Finding the Sum of Odd Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter 20 integers, and then calculates and displays the sum of the odd numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This is quite easy. What the program must do inside the loop is check whether
    or not a user-provided number is odd and, if it is, that number must accumulate
    in variable total; even numbers must be ignored. The flowchart is as follows.
    It includes a single-alternative decision structure nested within a pre-test loop
    structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The corresponding Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.1-6'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 20:'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: total += x    #This is equivalent to total = total + x
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)You can nest any decision control structure inside any loop
    control structure as long as you keep them syntactically and logically correct.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-7 Finding the Sum of N Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter N numbers and then calculates
    and displays their sum. The value of N must be provided by the user at the beginning
    of the program.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, the total number of iterations depends on a value that the
    user must enter. Following is a general purpose code fragment that iterates for
    N times, where N is provided by the user.
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= n:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: According to what you have learned so far, the final program becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.1-7'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= n:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: total += x
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-8 Finding the Sum of an Unknown Quantity of Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter integer values repeatedly until
    the value −1 is entered. When data input is completed, the sum of the numbers
    entered must be displayed. (The value of −1 must not be included in the final
    sum). Next, create a trace table to check if your program operates properly using
    10, 20, 5, and −1 as input values.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, the total number of iterations is unknown. If you were to
    use decision control structures, your program would look something like the code
    fragment that follows.
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x != -1:     #Check variable x           [[More…]](more.html#more_24_1_8_1)'
  prefs: []
  type: TYPE_NORMAL
- en: 'total += x           #and execute this statement'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())     #and this one
  prefs: []
  type: TYPE_NORMAL
- en: 'if x != -1:     #Check variable x'
  prefs: []
  type: TYPE_NORMAL
- en: 'total += x           #and execute this statement'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'x = int(input())     #and this one'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if x != -1:     #Check variable x'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'total += x           #and execute this statement'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'x = int(input())     #and this one'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: …
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: …
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Now let's rewrite this program using a loop control structure instead. The final
    program is presented next. If you try to follow the flow of execution, you will
    find that it operates equivalently to the previous one.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.1-8'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'while x != -1:     #Check variable x'
  prefs: []
  type: TYPE_NORMAL
- en: 'total += x           #and execute this statement'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input())     #and this one'
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Now let's create a trace table to determine if this program operates properly
    using 10, 20, 5, and −1 as input values.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | total |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | total = 0 |   | ? | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | x = int(input()) |   | 10 | 0 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | while x != ‑1: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | total += x |   | 10 | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | x = int(input()) |   | 20 | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | while x != ‑1: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | total += x |   | 20 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | x = int(input()) |   | 5 | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | while x != ‑1: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | total += x |   | 5 | 35 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | x = int(input()) |   | −1 | 35 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | while x != ‑1: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 13 | print(total) | It displays: 35 |'
  prefs: []
  type: TYPE_TB
- en: As you can see, in the end, variable total contains the value 35, which is,
    indeed, the sum of the values 10 + 20 + 5\. Moreover, the final user-provided
    value of −1 does not participate in the final sum.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)When the number of iterations is known before the loop starts
    iterating the loop is often called “definite loop”. In this exercise, however,
    the number of iterations is not known before the loop starts iterating, and it
    depends on a certain condition. This type of loop is often called “indefinite
    loop”.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.1-9 Finding the Product of 20 Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter 20 numbers and then calculates
    and displays their product.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: If you were to use a sequence control structure, it would be something like
    the next code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: p = 1
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())     [[More…]](more.html#more_24_1_9_1)
  prefs: []
  type: TYPE_NORMAL
- en: p = p * x
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = p * x
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = p * x
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that variable p is initialized to 1 instead of 0\.
    This is necessary for the statement p = p * x to operate properly; the final product
    would be zero otherwise.'
  prefs: []
  type: TYPE_NORMAL
- en: Using knowledge from the previous exercises, the final program becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.1-9'
  prefs: []
  type: TYPE_NORMAL
- en: p = 1
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 20:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = p * x
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(p)
  prefs: []
  type: TYPE_NORMAL
- en: 24.2 The Post-Test Loop Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The post-test loop structure is shown in the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter24-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)In loop control structures, one of the diamond''s exits
    always has an upward direction.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's see what happens when the flow of execution reaches a post-test loop structure.
    The statement or block of statements of the structure is directly executed and
    if Boolean_Expression evaluates to False, the flow of execution goes back to the
    point just above the statement or block of statements of the structure. The statement
    or block of statements is executed once more and if Boolean_Expression evaluates
    to False again, the process repeats. The iterations stop when Boolean_Expression,
    at some point, evaluates to True and the flow of execution exits the loop.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The post-test loop differs from the pre-test loop in that
    first the statement or block of statements of the structure is executed and afterwards
    the Boolean expression is evaluated. Consequently, the post-test loop performs
    at least one iteration!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)Each time the statement or block of statements of a loop
    control structure is executed, the term used in computer science is “the loop
    is iterating” or “the loop performs an iteration”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Although the post-test loop structure is directly supported in most computer
    languages such as C, C++, C#, Java, PHP, and Visual Basic (to name a few), unfortunately
    this is not true for Python since there is no direct statement for this kind of
    structure. So now the question is: “What can you do if you still want to use post-test
    loop structures in your Python programs?”'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can still write post-test loops (indirectly, of course) using
    the while statement along with an if and a break statement. The main idea is to
    create an endless loop (also known as an infinite loop) and break out of it when
    the Boolean expression that exists at the end of the block of statements of the
    structure evaluates to True . The idea is shown in the following code fragment,
    given in general form.
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression: break'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)You can break out of a loop before it actually completes
    all of its iterations by using the break statement'
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the numbers 1 to 10.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.2'
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i > 10: break'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.2-1 Designing the Flowchart and Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the corresponding flowchart for the following Python program. How many
    iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: i = i - 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i <= 0: break'
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding flowchart is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter24-05.png)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create a trace table to observe the flow of execution.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | i = 3 |   | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = i ‑ 1 |   | 2 | 1^(st) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if i <= 0: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = i ‑ 1 |   | 1 | 2^(nd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | if i <= 0: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = i ‑ 1 |   | 0 | 3^(rd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | if i <= 0: break | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | print("The end") | It displays: The end |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the trace table, the total number of iterations is three.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Both the statement or block of statements of a post-test
    loop structure is executed N times, and the Boolean expression is evaluated N
    times. Therefore, to determine the total number of iterations, you can count either
    the number of times the statement or block of statements is executed, or the number
    of times the Boolean expression is evaluated. Both counts are equal!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.2-2 Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i < 0: break'
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise is almost identical to the previous one. The main difference is
    that the Boolean expression here remains False, even for i = 0\. Therefore, it
    performs an additional iteration, that is, four iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.2-3 Designing the Flowchart and Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the corresponding flowchart for the following code fragment. How many
    iterations does this code perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = -1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello there!")
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i <= 0: break'
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding flowchart is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter24-06.png)
  prefs: []
  type: TYPE_NORMAL
- en: Initially the value −1 is assigned to the variable i. Inside the loop, the message
    “Hello there!” is displayed and variable i is decremented by one (resulting in
    the value −2). The Boolean expression i ≤ 0 evaluates to True, and the flow of
    execution proceeds directly to the Write ("The end") statement. Thus, this algorithm
    performs one iteration!
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.2-4 Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: How many iterations does this code fragment program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: i = i + 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == 4: break'
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a trace table to observe the flow of execution.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | i = 1 |   | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = i + 2 |   | 3 | 1^(st) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if i == 4: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | i = i + 2 |   | 5 | 2^(nd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | if i == 4: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | i = i + 2 |   | 7 | 3^(rd) | iteration |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | if i == 4: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | … | … | … |   |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | … | … |'
  prefs: []
  type: TYPE_TB
- en: As you can see from the trace table, since the value 4 is never assigned to
    variable i, this code fragment will iterate for an infinite number of times! Obviously,
    this code does not satisfy the property of finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.2-5 Finding the Product of N Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter N numbers and then calculates
    and displays their product. The value of N must be provided by the user at the
    beginning of the program. What happens if you switch the post-test loop structure
    with a pre-test loop structure? Do both programs operate exactly the same way
    for all possible input values of N?
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Both programs below let the user enter N numbers, calculate, and display their
    product. The left one uses a pre-test, while the right one uses a post-test loop
    structure. If you try to execute them and enter any value greater than zero for
    N, both programs operate exactly the same way!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.2-5a'
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= n:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = p * x
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(p)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.2-5b'
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: p = p * x
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i > n: break'
  prefs: []
  type: TYPE_NORMAL
- en: print(p)
  prefs: []
  type: TYPE_NORMAL
- en: The two Python programs, however, operate in different ways when the user enters
    a non-positive^([[18]](footnotes.html#Endnote_18)) value for N. For example, if
    the value 0 is entered, the left program performs zero iterations whereas the
    right program performs one iteration. Obviously, the left program is the right
    choice to solve this exercise!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A pre-test loop structure may perform zero iterations in
    contrast to the post-test loop structure, which performs at least one iteration!'
  prefs: []
  type: TYPE_NORMAL
- en: 24.3 The Mid-Test Loop Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The mid-test loop structure is shown in the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-07.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's see what happens when the flow of execution reaches a mid-test loop structure.
    The statement or block of statements 1 of the structure is directly executed and
    if Boolean_Expression evaluates to False, the statement or block of statements
    2 is executed and  the flow of execution goes back to the point just above the
    statement or block of statements 1 of the structure. The statement or block of
    statements 1 is executed once more and if Boolean_Expression evaluates to False
    again, the process repeats. The iterations stop when Boolean_Expression, at some
    point, evaluates to True and the flow of execution exits the loop.
  prefs: []
  type: TYPE_NORMAL
- en: Although this loop control structure is directly supported in some computer
    languages such as Ada, unfortunately this is not true for Python. However, you
    can still write mid-test loops using the while statement along with an if and
    a break statement. The main idea is to create an endless loop and break out of
    it when the Boolean expression that exists between the two statements (or block
    of statements) of the structure evaluates to True. The idea is shown in the code
    fragment given in general form that follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression: break'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements 2
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)You can break out of a loop before it actually completes
    all of its iterations by using the break statement.'
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays the numbers 1 to 10.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_24.3'
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: 'if i >= 10: break'
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 24.3-1 Designing the Flowchart and Counting the Total Number of Iterations
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the corresponding flowchart for the following code fragment and create
    a trace table to determine the values of variable i in each step.
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i += 5
  prefs: []
  type: TYPE_NORMAL
- en: 'if i > 45: break'
  prefs: []
  type: TYPE_NORMAL
- en: print(i ** 2)
  prefs: []
  type: TYPE_NORMAL
- en: i += 10
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding flowchart fragment is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter24-08.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's create a trace table to observe the flow of execution.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | i |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | i = 10 |   | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | print(i) | It displays: 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | i += 5 |   | 15 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | if i > 45: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(i ** 2) | It displays: 225 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | i += 10 |   | 25 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | print(i) | It displays: 25 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | i += 5 |   | 30 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | if i > 45: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | print(i ** 2) | It displays: 900 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | i += 10 |   | 40 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | print(i) | It displays: 40 |'
  prefs: []
  type: TYPE_TB
- en: '| 13 | i += 5 |   | 45 |'
  prefs: []
  type: TYPE_TB
- en: '| 14 | if i > 45: break | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | print(i ** 2) | It displays: 2025 |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | i += 10 |   | 55 |'
  prefs: []
  type: TYPE_TB
- en: '| 17 | print(i) | It displays: 55 |'
  prefs: []
  type: TYPE_TB
- en: '| 18 | i += 5 |   | 60 |'
  prefs: []
  type: TYPE_TB
- en: '| 19 | if i > 45: break | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 20 | print("The end") | It displays: The end |'
  prefs: []
  type: TYPE_TB
- en: '24.4 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A pre-test loop may perform zero iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 2)In flowcharts, both exits of the diamond symbol in a pre-test loop structure,
    have an upwards direction.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The statement or block of statements of a pre-test loop structure is executed
    at least one time.
  prefs: []
  type: TYPE_NORMAL
- en: 4)A while statement stops iterating when its Boolean expression evaluates to
    True
  prefs: []
  type: TYPE_NORMAL
- en: 5)In a pre-test loop structure, when the statement or block of statements of
    the structure is executed N times, the Boolean expression is evaluated N − 1 times.
  prefs: []
  type: TYPE_NORMAL
- en: 6)A post-test loop may perform zero iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a post-test loop structure, when the statement or block of statements of
    the structure is executed N times, its Boolean expression is evaluated N times
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: 8)You cannot nest a decision control structure inside a post-test loop structure.
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the mid-test loop structure, the statement or block of statements 1 is
    executed the same number of times as the statement or block of statements 2.
  prefs: []
  type: TYPE_NORMAL
- en: 10)In the following code fragment the word “Hello” is displayed 10 times.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following Python program does not satisfy the property of finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i != 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: i += 2
  prefs: []
  type: TYPE_NORMAL
- en: 12)In the following code fragment the word “Hello” is displayed an infinite
    number of times.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: 'if i < 10: break'
  prefs: []
  type: TYPE_NORMAL
- en: 13)The following Python program (not code fragment) satisfies the property of
    effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs: []
  type: TYPE_NORMAL
- en: i -= 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if i <= 10: break'
  prefs: []
  type: TYPE_NORMAL
- en: 14)The following Python program does not satisfy the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: b = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if b != 1:'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: a = 1 / (b - 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: b += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if b > 10: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 15)In the following code fragment the word “Zeus” is displayed 10 times.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Zeus")
  prefs: []
  type: TYPE_NORMAL
- en: 'if i > 10: break'
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: '24.5 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)In flowcharts, the diamond symbol is being used
  prefs: []
  type: TYPE_NORMAL
- en: a)in decision control structures.
  prefs: []
  type: TYPE_NORMAL
- en: b)in loop control structures.
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)A post-test loop structure
  prefs: []
  type: TYPE_NORMAL
- en: a)performs one iteration more than the pre-test loop structure does.
  prefs: []
  type: TYPE_NORMAL
- en: b)performs the same number of iterations as the pre-test loop structure does.
  prefs: []
  type: TYPE_NORMAL
- en: c)it depends
  prefs: []
  type: TYPE_NORMAL
- en: 3)In a post-test loop structure, the statement or block of statements of the
    structure
  prefs: []
  type: TYPE_NORMAL
- en: a)are executed before the loop's Boolean expression is evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: b)are executed after the loop's Boolean expression is evaluated.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hermes")
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Hermes” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)10 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)9 times.
  prefs: []
  type: TYPE_NORMAL
- en: c)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: d)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hi!")
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Ares")
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Ares” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)10 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)11 time.
  prefs: []
  type: TYPE_NORMAL
- en: c)1 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 6)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print("Hi!")
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Aphrodite")
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Aphrodite” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)10 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i >= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hi!")
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Apollo")
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Apollo” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)10 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following Python program
  prefs: []
  type: TYPE_NORMAL
- en: n = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < n:'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: s = s + a
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: calculates and displays the sum of
  prefs: []
  type: TYPE_NORMAL
- en: a)as many numbers as the value of variable n denotes.
  prefs: []
  type: TYPE_NORMAL
- en: b)as many numbers as the result of the expression n − 1 denotes.
  prefs: []
  type: TYPE_NORMAL
- en: c)as many numbers as the value of variable i denotes.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Poseidon")
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i <= 5: break'
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Poseidon” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)5 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)1 time.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 10)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Athena")
  prefs: []
  type: TYPE_NORMAL
- en: i += 5
  prefs: []
  type: TYPE_NORMAL
- en: 'if i == 50: break'
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Athena” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)at least one time.
  prefs: []
  type: TYPE_NORMAL
- en: b)at least 10 times.
  prefs: []
  type: TYPE_NORMAL
- en: c)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 11)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Apollo")
  prefs: []
  type: TYPE_NORMAL
- en: 'if i <= 10: break'
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Apollo” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)at least one time.
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 12)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if i > 0: break'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Aphrodite")
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Aphrodite” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)at least one time.
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: c)ten times
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 24.6 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Identify the error(s) in the following Python program. It must display the
    numbers 3, 2, 1 and the message “The end”.
  prefs: []
  type: TYPE_NORMAL
- en: i = 3
  prefs: []
  type: TYPE_NORMAL
- en: while True
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: if i < 0 break
  prefs: []
  type: TYPE_NORMAL
- en: print(The end)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = 3
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while i >= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: x += i
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next Python program. How many iterations
    does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: i = -5
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: i -= 1
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: a = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'while a <= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: b = a + 1
  prefs: []
  type: TYPE_NORMAL
- en: c = b * 2
  prefs: []
  type: TYPE_NORMAL
- en: d = c - b + 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if d == 4:'
  prefs: []
  type: TYPE_NORMAL
- en: print(b, ",", c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif d == 5:'
  prefs: []
  type: TYPE_NORMAL
- en: print(c)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif d == 8:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a, ",", b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a, ",", b, ",", d)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a += 4
  prefs: []
  type: TYPE_NORMAL
- en: 5)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: b = 1
  prefs: []
  type: TYPE_NORMAL
- en: c = 0
  prefs: []
  type: TYPE_NORMAL
- en: d = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while b < 2:'
  prefs: []
  type: TYPE_NORMAL
- en: x = a + b
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: c = c + 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: d = d + 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a = b
  prefs: []
  type: TYPE_NORMAL
- en: b = c
  prefs: []
  type: TYPE_NORMAL
- en: c = d
  prefs: []
  type: TYPE_NORMAL
- en: 6)Fill in the gaps in the following code fragments so that all loops perform
    exactly four iterations.
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: a = 3
  prefs: []
  type: TYPE_NORMAL
- en: 'while a > …… :'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a -= 1
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'while a < …… :'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a += 1
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 9
  prefs: []
  type: TYPE_NORMAL
- en: 'while a != 10:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a = a + ……
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while a != …… :'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a -= 2
  prefs: []
  type: TYPE_NORMAL
- en: v)
  prefs: []
  type: TYPE_NORMAL
- en: a = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'while a < …… :'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a = 2 * a
  prefs: []
  type: TYPE_NORMAL
- en: vi)
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while a < …… :'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a = a + 0.1
  prefs: []
  type: TYPE_NORMAL
- en: 7)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: y = 5
  prefs: []
  type: TYPE_NORMAL
- en: x = 38
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: y *= 2
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 'if y >= x: break'
  prefs: []
  type: TYPE_NORMAL
- en: 8)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: x = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x += 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'if x >= 12: break'
  prefs: []
  type: TYPE_NORMAL
- en: 9)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: y = 2
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: y = y ** 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 256:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x + y
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 'if y >= 65535: break'
  prefs: []
  type: TYPE_NORMAL
- en: 10)Create a trace table to determine the values of the variables in each step
    of the next Python program. How many iterations does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: a = 2
  prefs: []
  type: TYPE_NORMAL
- en: b = 4
  prefs: []
  type: TYPE_NORMAL
- en: c = 0
  prefs: []
  type: TYPE_NORMAL
- en: d = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x = a + b
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: c = c + 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif d % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: d = d + 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: c = c + 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a = b
  prefs: []
  type: TYPE_NORMAL
- en: b = d
  prefs: []
  type: TYPE_NORMAL
- en: 'if c >= 11: break'
  prefs: []
  type: TYPE_NORMAL
- en: 11)Fill in the gaps in the following code fragments so that all loops perform
    exactly six iterations.
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if a <= …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 12
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if a >= …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  prefs: []
  type: TYPE_NORMAL
- en: a = 20
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a = a + ……
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == 23: break'
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  prefs: []
  type: TYPE_NORMAL
- en: a = 100
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a -= 20
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: v)
  prefs: []
  type: TYPE_NORMAL
- en: a = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a = 2 * a
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: vi)
  prefs: []
  type: TYPE_NORMAL
- en: a = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: a = a + 0.25
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: 12)Fill in the gaps in the following code fragments so that all display the
    value 10 at the end.
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  prefs: []
  type: TYPE_NORMAL
- en: y = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  prefs: []
  type: TYPE_NORMAL
- en: y += 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: x = 1
  prefs: []
  type: TYPE_NORMAL
- en: y = 20
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  prefs: []
  type: TYPE_NORMAL
- en: y -= 2.5
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: iii)
  prefs: []
  type: TYPE_NORMAL
- en: x = 3
  prefs: []
  type: TYPE_NORMAL
- en: y = 2.5
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  prefs: []
  type: TYPE_NORMAL
- en: y *= 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < …… : break'
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: iv)
  prefs: []
  type: TYPE_NORMAL
- en: x = 30
  prefs: []
  type: TYPE_NORMAL
- en: y = 101532
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= ……
  prefs: []
  type: TYPE_NORMAL
- en: y = y // 10
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0: break'
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 13)Using a pre-test loop structure, write a Python program that lets the user
    enter N numbers and then calculates and displays their sum and their average.
    The value of N must be provided by the user at the beginning of the program.
  prefs: []
  type: TYPE_NORMAL
- en: 14)Using a pre-test loop structure, write a Python program that lets the user
    enter N integers and then calculates and displays the product of those that are
    even. The value of N must be provided by the user at the beginning of the program.
    Moreover, if all user-provided integers are odd, the message “You entered no even
    integers” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 15)Using a pre-test loop structure, write a Python program that lets the user
    enter 100 integers and then calculates and displays the sum of those with a last
    digit of 0\. For example, the values 10, 2130, and 500 are such numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: You can isolate the last digit of any integer using a modulus 10 operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 16)Using a pre-test loop structure, write a Python program that lets the user
    enter 20 integers and then calculates and displays the sum of those that consist
    of three digits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: All three-digit integers are between 100 and 999.'
  prefs: []
  type: TYPE_NORMAL
- en: 17)Using a pre-test loop structure, write a Python program that lets the user
    enter numeric values repeatedly until the value 0 is entered. When data input
    is completed, the product of the numbers entered must be displayed. (The last
    0 entered must not be included in the final product). Next, create a trace table
    to check if your program operates properly using 3, 2, 9, and 0 as input values.
  prefs: []
  type: TYPE_NORMAL
- en: 18)The population of a town is now at 30000 and is expanding at a rate of 3%
    per year. Using a pre-test loop structure, write a Python program to determine
    how many years it will take for the population to exceed 100000.
  prefs: []
  type: TYPE_NORMAL
- en: 19)Using a post-test loop structure, design a flowchart and write the corresponding
    Python program that lets the user enter 50 integers and then calculates and displays
    the sum of those that are odd and the sum of those that are even.
  prefs: []
  type: TYPE_NORMAL
- en: 20)Using a post-test loop structure, write a Python program that lets the user
    enter N integers and then calculates and displays the product of those that are
    negative. The value of N must be provided by the user at the beginning of the
    program, and the final product must always be displayed as a positive value. Assume
    that the user enters a value greater than 0 for N.
  prefs: []
  type: TYPE_NORMAL
- en: 21)Using a post-test loop structure, write a Python program that prompts the
    user to enter five integers and then calculates and displays the product of all
    three-digit integers with a first digit of 5\. For example, the values 512, 555,
    and 593 are all such numbers
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: All three-digit integers with a first digit of 5 are between 500 and
    599.'
  prefs: []
  type: TYPE_NORMAL
- en: 22)The current population of a beehive is 50,000\. Each year, the beehive experiences
    a 5% increase due to new births, but also faces a 15% mortality rate due to environmental
    reasons. Using a post-test loop structure, write a Python program to determine
    how many years it will take for the population to fall below 20,000.
  prefs: []
  type: TYPE_NORMAL
