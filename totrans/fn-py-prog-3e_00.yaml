- en: Preface
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Functional programming offers a variety of techniques for creating succinct
    and expressive software. While Python is not a purely functional programming language,
    we can do a great deal of functional programming in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python has a core set of functional programming features. This lets us borrow
    many design patterns and techniques from other functional languages. These borrowed
    concepts can lead us to create elegant programs. Python’s generator expressions,
    in particular, negate the need to create large in-memory data structures, leading
    to programs that may execute more quickly because they use fewer resources.
  prefs: []
  type: TYPE_NORMAL
- en: We can’t easily create purely functional programs in Python. Python lacks a
    number of features that would be required for this. We don’t have unlimited recursion,
    for example, we don’t have lazy evaluation of all expressions, and we don’t have
    an optimizing compiler.
  prefs: []
  type: TYPE_NORMAL
- en: There are several key features of functional programming languages that are
    available in Python. One of the most important ones is the idea of functions being
    first-class objects. Python also offers a number of higher-order functions. The
    built-in `map()`, `filter()`, and `functools.reduce()` functions are widely used
    in this role, and less obvious are functions such as `sorted()`, `min()`, and
    `max()`.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, a functional approach to a problem will also lead to extremely
    high-performance algorithms. Python makes it too easy to create large intermediate
    data structures, tying up memory (and processor time). With functional programming
    design patterns, we can often replace large lists with generator expressions that
    are equally expressive but take up much less memory and run much more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll look at the core features of functional programming from a Python point
    of view. Our objective is to borrow good ideas from functional programming languages
    and use those ideas to create expressive and succinct applications in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book is for more experienced programmers who want to create succinct, expressive
    Python programs by borrowing techniques and design patterns from functional programming
    languages. Some algorithms can be expressed elegantly in a functional style; we
    can—and should—adapt this to make Python programs more readable and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is not intended as a tutorial on Python. This book assumes some familiarity
    with the language and the standard library. For a foundational introduction to
    Python, consider Learn Python Programming, Third Edition: [https://www.packtpub.com/product/learn-python-programming-third-edition/9781801815093](https://www.packtpub.com/product/learn-python-programming-third-edition/9781801815093).'
  prefs: []
  type: TYPE_NORMAL
- en: While we cover the foundations of functional programming, this is not a complete
    review of the various kinds of functional programming techniques. Having an exposure
    to functional programming in another language can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'We can decompose this book into two general kinds of topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Essentials of functional programming in Python. This is the content of Chapters
    1 through 7.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Library modules to help create functional programs. This is the subject of the
    remaining chapters of the book. Chapter 12 includes both fundamental language
    and library topics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Chapter 1](Chapter_01.xhtml#x1-180001), [Understanding Functional Programming](Chapter_01.xhtml#x1-180001),
    introduces some of the techniques that characterize functional programming. We’ll
    identify some of the ways to map those features to Python. We’ll also address
    some ways that the benefits of functional programming accrue when we use these
    design patterns to build Python applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](Chapter_02.xhtml#x1-340002), [Introducing Essential Functional
    Concepts](Chapter_02.xhtml#x1-340002), delves into central features of the functional
    programming paradigm. We’ll look at each in some detail to see how they’re implemented
    in Python. We’ll also point out some features of functional languages that don’t
    apply well to Python. In particular, many functional languages have complex type-matching
    rules required to support compiling and optimizing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](Chapter_03.xhtml#x1-510003), [Functions, Iterators, and Generators](Chapter_03.xhtml#x1-510003),
    will show how to leverage immutable Python objects, and how generator expressions
    adapt functional programming concepts to the Python language. We’ll look at some
    of the built-in Python collections and how we can leverage them without departing
    too far from functional programming concepts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](Chapter_04.xhtml#x1-740004), [Working with Collections](Chapter_04.xhtml#x1-740004),
    shows how you can use a number of built-in Python functions to operate on collections
    of data. This chapter will focus on a number of relatively simple functions, such
    as `any()` and `all()`, which reduce a collection of values to a single result.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](Chapter_05.xhtml#x1-1000005), [Higher-Order Functions](Chapter_05.xhtml#x1-1000005),
    examines the commonly used higher-order functions such as `map()` and `filter()`.
    It also shows a number of other higher-order functions as well as how we can create
    our own functions that work with functions or return functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](Chapter_06.xhtml#x1-1260006), [Recursions and Reductions](Chapter_06.xhtml#x1-1260006),
    teaches how to design an algorithm using recursion and then optimize it into a
    high-performance `for` statement. We’ll also look at some other reductions that
    are widely used, including `collections.Counter()`.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](Chapter_07.xhtml#x1-1530007), [Complex Stateless Objects](Chapter_07.xhtml#x1-1530007),
    showcases a number of ways that we can use immutable tuples, `typing.NamedTuple`,
    and the frozen `@dataclass` instead of stateful objects. We’ll also look at the
    `pyrsistent` module as a way to create immutable objects. Immutable objects have
    a simpler interface than stateful objects: we never have to worry about abusing
    an attribute and setting an object into some inconsistent or invalid state.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](Chapter_08.xhtml#x1-1700008), [The Itertools Module](Chapter_08.xhtml#x1-1700008),
    examines a number of functions in the `itertools` standard library module. This
    collection of functions simplifies writing programs that deal with collections
    or generator functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](Chapter_09.xhtml#x1-1990009), [Itertools for Combinatorics – Permutations
    and Combinations](Chapter_09.xhtml#x1-1990009), covers the combinatoric functions
    in the `itertools` module. These functions are more specialized than those in
    the previous chapter. This chapter includes some examples that illustrate ill-considered
    use of these functions and the consequences of combinatoric explosion.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](Chapter_10.xhtml#x1-21700010), [The Functools Module](Chapter_10.xhtml#x1-21700010),
    focuses on how to use some of the functions in the `functools` module for functional
    programming. A few functions in this module are more appropriate for building
    decorators, and they are left for [Chapter 12](Chapter_12.xhtml#x1-25000012),
    [Decorator Design Techniques](Chapter_12.xhtml#x1-25000012).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 11](Chapter_11.xhtml#x1-23500011), [The Toolz Package](Chapter_11.xhtml#x1-23500011),
    covers the `toolz` package, a number of closely related modules that help us write
    functional programs in Python. The `toolz` modules parallel the built-in `itertools`
    and `functools` modules, providing alternatives that are often more sophisticated
    and make better use of curried functions.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 12](Chapter_12.xhtml#x1-25000012), [Decorator Design Techniques](Chapter_12.xhtml#x1-25000012),
    covers how we can look at a decorator as a way to build a composite function.
    While there is considerable flexibility here, there are also some conceptual limitations:
    we’ll look at ways that overly complex decorators can become confusing rather
    than helpful.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 13](Chapter_13.xhtml#x1-26600013), [The PyMonad Library](Chapter_13.xhtml#x1-26600013),
    examines some of the features of the PyMonad library. This provides some additional
    functional programming features. It also provides a way to learn more about monads.
    In some functional languages, monads are an important way to force a particular
    order for operations that might get optimized into an undesirable order. Since
    Python already has strict ordering of expressions and statements, the monad feature
    is more instructive than practical.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 14](Chapter_14.xhtml#x1-28300014), [The Multiprocessing, Threading,
    and Concurrent.Futures Modules](Chapter_14.xhtml#x1-28300014), points out an important
    consequence of good functional design: we can distribute the processing workload.
    Using immutable objects means that we can’t corrupt an object because of poorly
    synchronized write operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 15](Chapter_15.xhtml#x1-31200015), [A Functional Approach to Web Services](Chapter_15.xhtml#x1-31200015),
    shows how we can think of web services as a nested collection of functions that
    transform a request into a reply. We’ll see ways to leverage functional programming
    concepts for building responsive, dynamic web content.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 16, A Chi-Squared Case Study, is a bonus, online-only case study applying
    a number of functional programming techniques to a specific exploratory data analysis
    problem. We will apply a χ² statistical test to some complex data to see if the
    results show ordinary variability, or if they are an indication of something that
    requires deeper analysis. You can find the case study here: [https://github.com/PacktPublishing/Functional-Python-Programming-3rd-Edition/blob/main/Bonus_Content/Chapter_16.pdf](https://github.com/PacktPublishing/Functional-Python-Programming-3rd-Edition/blob/main/Bonus_Content/Chapter_16.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This book presumes some familiarity with Python 3 and general concepts of application
    development. We won’t look deeply at subtle or complex features of Python; we’ll
    avoid much consideration of the internals of the language.
  prefs: []
  type: TYPE_NORMAL
- en: Some of the examples use exploratory data analysis (EDA) as a problem domain
    to show the value of functional programming. Some familiarity with basic probability
    and statistics will help with this. There are only a few examples that move into
    more serious data science.
  prefs: []
  type: TYPE_NORMAL
- en: Python 3.10 is required. The examples have also been tested with Python 3.11,
    and work correctly. For data science purposes, it’s often helpful to start with
    the conda tool to create and manage virtual environments. It’s not required, however,
    and readers should be able to use any available Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additional packages are generally installed with pip. The command looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Complete the exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Each chapter includes a number of exercises that help the reader apply the
    concepts in the chapter to real code. Most of the exercises are based on code
    available from the book’s repository on GitHub: [https://github.com/PacktPublishing/Functional-Python-Programming-3rd-Edition](https://github.com/PacktPublishing/Functional-Python-Programming-3rd-Edition).'
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the reader will notice that the code provided on GitHub includes
    partial solutions to some of the exercises. These serve as hints, allowing the
    reader to explore alternative solutions.
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, exercises will need unit test cases to confirm they actually
    solve the problem. These are often identical to the unit test cases already provided
    in the GitHub repository. The reader should replace the book’s example function
    name with their own solution to confirm that it works.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, the exercises suggest writing a response document to compare
    and contrast multiple solutions. It helps to find a mentor or expert who can help
    the reader by reviewing these small documents for clarity and completeness. A
    good comparison between design approaches will include performance measurements
    using the `timeit` module to show the performance advantages of one design over
    another.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The code bundle for the book is hosted on GitHub at [https://github.com/PacktPublishing/Functional-Python-Programming-3rd-Edition](https://github.com/PacktPublishing/Functional-Python-Programming-3rd-Edition).
    We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots/diagrams
    used in this book. You can download it here: [https://packt.link/OV1CB](https://packt.link/OV1CB).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`CodeInText`: Indicates code words in the text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. For example: ”Python has other statements, such as `global` or `nonlocal`,
    which modify the rules for variables in a particular namespace.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'Bold: Indicates a new term, an important word, or words you see on the screen,
    such as in menus or dialog boxes. For example: ”The base case states that the
    sum of a zero-length sequence is 0\. The recursive case states that the sum of
    a sequence is the first value plus the sum of the rest of the sequence.”'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Warnings or important notes appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: 'General feedback: Email [feedback@packtpub.com](mailto:feedback@packtpub.com),
    and mention the book’s title in the subject of your message. If you have questions
    about any aspect of this book, please email us at [questions@packtpub.com](mailto:questions@packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Errata: Although we have taken every care to ensure the accuracy of our content,
    mistakes do happen. If you have found a mistake in this book we would be grateful
    if you would report this to us. Please visit [https://subscription.packtpub.com/help](https://subscription.packtpub.com/help),
    click on the Submit Errata button, search for your book, and enter the details.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Piracy: If you come across any illegal copies of our works in any form on the
    Internet, we would be grateful if you would provide us with the location address
    or website name. Please contact us at [copyright@packtpub.com](mailto:copyright@packtpub.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in becoming an author: If there is a topic that you have
    expertise in and you are interested in either writing or contributing to a book,
    please visit [http://authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share your thoughts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Once you’ve read Functional Python Programming, Third Edition, we’d love to
    hear your thoughts! Scan the QR code below to go straight to the Amazon review
    page for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: '![PIC](img/file2.png)'
  prefs: []
  type: TYPE_IMG
- en: '[https://packt.link/r/1803232579](https://packt.link/r/1803232579)'
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we’re delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
- en: Download a free PDF copy of this book
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Thanks for purchasing this book!
  prefs: []
  type: TYPE_NORMAL
- en: Do you like to read on the go but are unable to carry your print books everywhere?
    Is your eBook purchase not compatible with the device of your choice?
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry, now with every Packt book you get a DRM-free PDF version of that
    book at no cost.
  prefs: []
  type: TYPE_NORMAL
- en: Read anywhere, any place, on any device. Search, copy, and paste code from your
    favorite technical books directly into your application.
  prefs: []
  type: TYPE_NORMAL
- en: The perks don’t stop there, you can get exclusive access to discounts, newsletters,
    and great free content in your inbox daily
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these simple steps to get the benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Scan the QR code or visit the link below
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![PIC](img/file3.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '[https://packt.link/free-ebook/9781803232577](https://packt.link/free-ebook/9781803232577)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Submit your proof of purchase
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That’s it! We’ll send your free PDF and other benefits to your email directly
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
