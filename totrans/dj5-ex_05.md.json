["```py\nfrom django.contrib import messages\nmessages.error(request, 'Something went wrong') \n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n<link href=\"{% static \"css/base.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"header\">\n    ...\n  </div>\n **{% if messages %}**\n**<****ul****class****=****\"messages\"****>**\n **{% for message in messages %}**\n**<****li****class****=****\"{{ message.tags }}\"****>**\n **{{ message|safe }}**\n**<****a****href****=****\"#\"****class****=****\"close\"****>****x****</****a****>**\n**</****li****>**\n **{% endfor %}**\n**</****ul****>**\n **{% endif %}**\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n</body>\n</html> \n```", "```py\n**from** **django.contrib** **import** **messages**\n# ...\n@login_required\ndef edit(request):\n    if request.method == 'POST':\n        user_form = UserEditForm(\n            instance=request.user,\n            data=request.POST\n        )\n        profile_form = ProfileEditForm(\n            instance=request.user.profile,\n            data=request.POST,\n            files=request.FILES\n        )\n        if user_form.is_valid() and profile_form.is_valid():\n            user_form.save()\n            profile_form.save()\n **messages.success(**\n **request,**\n**'Profile updated successfully'**\n **)**\n**else****:**\n **messages.error(request,** **'Error updating your profile'****)**\nelse:\n        user_form = UserEditForm(instance=request.user)\n        profile_form = ProfileEditForm(\n                                    instance=request.user.profile)\n    return render(\n        request,\n        'account/edit.html',\n        {'user_form': user_form, 'profile_form': profile_form}\n    ) \n```", "```py\n['django.contrib.auth.backends.ModelBackend'] \n```", "```py\nfrom django.contrib.auth.models import User\nclass EmailAuthBackend:\n    \"\"\"\n    Authenticate using an e-mail address.\n    \"\"\"\ndef authenticate(self, request, username=None, password=None):\n        try:\n            user = User.objects.get(email=username)\n            if user.check_password(password):\n                return user\n            return None\nexcept (User.DoesNotExist, User.MultipleObjectsReturned):\n            return None\ndef get_user(self, user_id):\n        try:\n            return User.objects.get(pk=user_id)\n        except User.DoesNotExist:\n            return None \n```", "```py\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'account.authentication.EmailAuthBackend',\n] \n```", "```py\nclass UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(\n        label='Password',\n        widget=forms.PasswordInput\n    )\n    password2 = forms.CharField(\n        label='Repeat password',\n        widget=forms.PasswordInput\n    )\n    class Meta:\n        model = User\n        fields = ['username', 'first_name', 'email']\n    def clean_password2(self):\n        cd = self.cleaned_data\n        if cd['password'] != cd['password2']:\n            raise forms.ValidationError('Passwords don\\'t match.')\n        return cd['password2']\n**def****clean_email****(****self****):**\n **data = self.cleaned_data[****'email'****]**\n**if** **User.objects.****filter****(email=data).exists():**\n**raise** **forms.ValidationError(****'Email already in use.'****)**\n**return** **data** \n```", "```py\nclass UserEditForm(forms.ModelForm):\n    class Meta:\n        model = User\n        fields = ['first_name', 'last_name', 'email']\n**def****clean_email****(****self****):**\n **data = self.cleaned_data[****'email'****]**\n **qs = User.objects.exclude(**\n**id****=self.instance.****id**\n **).****filter****(**\n **email=data**\n **)**\n**if** **qs.exists():**\n**raise** **forms.ValidationError(****'Email already in use.'****)**\n**return** **data** \n```", "```py\npython -m pip install social-auth-app-django==5.4.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'social_django'****,**\n] \n```", "```py\npython -m python manage.py migrate \n```", "```py\nApplying social_django.0001_initial... OK\n...\nApplying social_django .0015_rename_extra_data_new_usersocialauth_extra_data... OK \n```", "```py\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('account/', include('account.urls')),\n    **path(**\n**'social-auth/'****,**\n **include(****'social_django.urls'****, namespace=****'social'****)**\n **),**\n] \n```", "```py\n127.0.0.1 mysite.com \n```", "```py\npython manage.py runserver \n```", "```py\nALLOWED_HOSTS = [**'mysite.com'****,** **'localhost'****,** **'127.0.0.1'**] \n```", "```py\npython -m pip install django-extensions==3.2.3 \n```", "```py\npython -m pip install werkzeug==3.0.2 \n```", "```py\npython -m pip install pyOpenSSL==24.1.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'django_extensions'****,**\n] \n```", "```py\npython manage.py runserver_plus --cert-file cert.crt \n```", "```py\nAUTHENTICATION_BACKENDS = [\n    'django.contrib.auth.backends.ModelBackend',\n    'account.authentication.EmailAuthBackend',\n**'social_core.backends.google.GoogleOAuth2'****,**\n] \n```", "```py\nGOOGLE_OAUTH2_KEY=xxxx\nGOOGLE_OAUTH2_SECRET=xxxx \n```", "```py\npython -m pip install python-decouple==3.8 \n```", "```py\n**from** **decouple** **import** **config**\n# ...\n**SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = config(****'GOOGLE_OAUTH2_KEY'****)**\n**SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = config(****'GOOGLE_OAUTH2_SECRET'****)** \n```", "```py\n{% block content %}\n  ...\n**<****div****class****=****\"social\"****>**\n**<****ul****>**\n**<****li****class****=****\"google\"****>**\n**<****a****href****=****\"{% url \"****social:begin****\"** **\"****google-oauth2****\" %}\">**\n **Sign in with Google**\n**</****a****>**\n**</****li****>**\n**</****ul****>**\n**</****div****>**\n{% endblock %} \n```", "```py\npython manage.py runserver_plus --cert-file cert.crt \n```", "```py\nSOCIAL_AUTH_PIPELINE = [\n    'social_core.pipeline.social_auth.social_details',\n    'social_core.pipeline.social_auth.social_uid',\n    'social_core.pipeline.social_auth.auth_allowed',\n    'social_core.pipeline.social_auth.social_user',\n    'social_core.pipeline.user.get_username',\n    'social_core.pipeline.user.create_user',\n    'social_core.pipeline.social_auth.associate_user',\n    'social_core.pipeline.social_auth.load_extra_data',\n    'social_core.pipeline.user.user_details',\n] \n```", "```py\nfrom account.models import Profile\ndef create_profile(backend, user, *args, **kwargs):\n    \"\"\"\n    Create user profile for social authentication\n    \"\"\"\n    Profile.objects.get_or_create(user=user) \n```", "```py\nSOCIAL_AUTH_PIPELINE = [\n    'social_core.pipeline.social_auth.social_details',\n    'social_core.pipeline.social_auth.social_uid',\n    'social_core.pipeline.social_auth.auth_allowed',\n    'social_core.pipeline.social_auth.social_user',\n    'social_core.pipeline.user.get_username',\n    'social_core.pipeline.user.create_user',\n**'account.authentication.create_profile'****,**\n'social_core.pipeline.social_auth.associate_user',\n    'social_core.pipeline.social_auth.load_extra_data',\n    'social_core.pipeline.user.user_details',\n] \n```"]