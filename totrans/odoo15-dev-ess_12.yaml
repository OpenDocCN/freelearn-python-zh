- en: '[*Chapter 12*](B16119_12_Final_PD_ePub.xhtml#_idTextAnchor358): Creating Printable
    PDF Reports with Server-Side QWeb'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While a regular view can provide valuable information to users, there will be
    cases where a printed output is needed. Maybe it is a PDF document to be sent
    to a customer, or a paper document that is needed to support a physical process.
    To address these cases, Odoo apps support printed business reports. These are
    generated using QWeb and then exported to PDF documents, which can then be printed,
    emailed, or simply stored.
  prefs: []
  type: TYPE_NORMAL
- en: Being QWeb-based means that the same skills that can be used for Kanban views
    and web pages can be reused to design reports. Beyond QWeb, specific mechanisms
    are used, such as report actions, paper formats, and the variables that are available
    for QWeb report rendering.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, examples will be used to illustrate how to structure and add
    content to a report. The usual report structure has a **header**, **details**,
    and **footer sections**. The content that can be added includes **field data**,
    including specific widgets such as images. Also common in reports is the need
    to present totals. All of these will be explained in detail in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing wkhtmltopdf
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating business reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing report content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating custom reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be familiar with all the steps needed to
    create Odoo reports, from report action to specific techniques that can be used
    on QWeb templates.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter expands the existing `library_app` add-on module, based on the
    code first created in [*Chapter 3*](B16119_03_Final_PD_ePub.xhtml#_idTextAnchor072),
    *Your First Odoo Application*. This chapter's code can be found in this book's
    GitHub repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)
    in the `ch12/` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: Installing wkhtmltopdf
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo reports are just HTML pages that are then converted into PDF files. For
    this conversion, the `wkhtmltopdf` command-line tool is used. Its name stands
    for **Webkit HTML to PDF**.
  prefs: []
  type: TYPE_NORMAL
- en: For reports to be generated correctly, the recommended version of the `wkhtmltopdf`
    utility needs to be installed. Some versions of the `wkhtmltopdf` library are
    known to have issues, such as not printing page headers and footers, so we need
    to be picky about the version we use.
  prefs: []
  type: TYPE_NORMAL
- en: Since Odoo 10, version 0.12.5 is the officially recommended one. The most up-to-date
    Odoo information about `wkhtmltopdf` can be found at [https://github.com/odoo/odoo/wiki/Wkhtmltopdf](https://github.com/odoo/odoo/wiki/Wkhtmltopdf).
  prefs: []
  type: TYPE_NORMAL
- en: The packaged version provided by Debian or Ubuntu may not be appropriate. So,
    the recommendation is to directly download and install the correct package. The
    download links can be found at [https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5](https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install the correct version of `wkhtmltopdf`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, make sure that there isn''t an incorrect version already installed on
    the system by inputting the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the preceding command reports a version other than the recommended one,
    it should be uninstalled. To do so, on a Debian/Ubuntu system, input the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, you need to download the appropriate package for your system and install
    it. Check the release page for the correct download link. At the time of the Odoo
    15 release, Ubuntu 20.04 LTS *Focal Fossa* is the latest long-term support version.
    For a 64-bit architecture, install the `wkhtmltox_0.12.5-1.focal_amd64.deb` package.
    The download command to use in this case is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, install the downloaded package with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This may display an error because of missing dependencies. In that case, the
    following command can be used to fix this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, verify that the `wkhtmltopdf` library is correctly installed with
    the intended version number with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With this, you have successfully installed the correct version of `wkhtmltopdf`
    and now the Odoo server log won't display the **You need Wkhtmltopdf to print
    a pdf version of the report** information message during the startup sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to download and install a suitable version of the `wkhtmltopdf`
    tool, let's look at how to create business reports.
  prefs: []
  type: TYPE_NORMAL
- en: Creating business reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It would be helpful for the Library app to print out a report containing the
    book catalog. This report should list the book titles, along with details such
    as **publisher**, **publishing date**, and **authors**.
  prefs: []
  type: TYPE_NORMAL
- en: We will implement this throughout this chapter, and in the process showcase
    the several techniques involved in implementing Odoo reports. The report will
    be added to the existing `library_app` module.
  prefs: []
  type: TYPE_NORMAL
- en: The convention is to have report files in a `/reports` subdirectory, so a `reports/library_book_report.xml`
    data file will be added. As usual, when adding data files, remember to also declare
    them in the `data` key of the `__manifest__.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to run a report, the first thing we must add is the report action.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report action
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `ir.actions.report` XML model, and it can be inspected by using the **Settings**
    | **Technical** | **Actions** | **Reports** menu option.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 14
  prefs: []
  type: TYPE_NORMAL
- en: Odoo 14 deprecated the `<report>` shortcut tag for report actions. A `<record
    model=""ir.actions.report">` element should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the report action and trigger the execution of the report, edit the
    `reports/library_book_report.xml` file, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This report action makes this report available at the top of the **Library
    Books** view, on the **Print** button, next to the **Action** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.1_B16119.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 â€“ The Print context button
  prefs: []
  type: TYPE_NORMAL
- en: This marks the first step of having a report available to users.
  prefs: []
  type: TYPE_NORMAL
- en: 'The essential fields that were used in the previous code are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is the report action''s title.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model` is the technical name of the report''s base model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`report_type` is the type of document to generate. The options are `qweb-pdf`,
    `qweb-html,` or `qweb-text`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`report_name` is the XML ID of the QWeb template to be used to generate the
    report''s content. Unlike other identifier references, it must be a complete reference
    that includes the module name; that is, `<module_name>.<identifier_name>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While working on report development, setting `report_type` to `qweb-html` allows
    you to inspect the HTML result that's generated by the QWeb template, and it also
    makes it easier to troubleshoot issues. When you've done this, it can be changed
    back to `qweb-pdf`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following fields are not required to add the report action, but are needed
    for the report to be presented in the **Print** menu, next to the **Action** menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '`binding_model_id` is a many-to-one field for identifying the model where the
    report print option should be available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binding_type` should be set to `report`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other optional fields are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`print_report_name` is a Python expression that''s used to provide the report''s
    title and filename. The `object` variable is available and represents the current
    record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attachment` is a Python expression where you have to generate the attachment
    filename. The `object` variable is available and represents the current record.
    When set, the generated report is stored as an attachment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attachment_use`, when set to `True`, means that new report generations reopen
    the stored original report instead of regenerating it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`paperformat_id` is a many-to-one field for the paper format to use. Paper
    formats include the page size and the portrait or landscape orientation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups_id` is a many-to-many field with the security groups that can use the
    report.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`multi`, when set to `True`, means that the report is not available in the
    form view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These actions won't work right now since the referenced QWeb template is missing.
    We'll deal with this in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Using a QWeb report template for per-record documents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo reports are generated using QWeb templates. QWeb generates HTML that can
    then be converted into a PDF document. QWeb directives and flow controls can be
    used as usual, but specific containers should be used to ensure proper page formatting.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example provides a minimum viable template for a QWeb report.
    Add the following code to the `reports/library_book_report.xml` file, just after
    the report action element that we added in the previous section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The most important elements here are the `t-call` directives that are using
    standard report structures. The `web.html_container` template does the basic setup
    to support an HTML document. The `web.external_layout` template handles the report
    header and footer using the corresponding company setup. The `web.internal_layout`
    template can be used as an alternative, featuring only a basic header; it's better
    suited for internal use reports.
  prefs: []
  type: TYPE_NORMAL
- en: Changed Since Odoo 11
  prefs: []
  type: TYPE_NORMAL
- en: In Odoo 11, the report layouts moved from the `report` module to the `web` module.
    Previous Odoo versions used `report.external_layout` or `report.internal_layout`
    references. Starting with Odoo 11, these need to be changed to `web.<...>` references.
  prefs: []
  type: TYPE_NORMAL
- en: The `docs` variable represents the base record set to generate the report. The
    report will typically use a `t-foreach` QWeb directive to iterate through each
    record. The previous report template generates a report header and footer for
    each record.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that, since reports are just QWeb templates, inheritance can be applied,
    just like in the other views. QWeb templates that are used in reports can be extended
    using regular template inheritance â€“ that is, using *XPath* expressions â€“ as we
    will discuss next.
  prefs: []
  type: TYPE_NORMAL
- en: Using a QWeb report template for record listings
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the case of the book catalog, there is a single report document, with a header
    and a footer, containing a line or section for each record.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the report template needs to be adjusted for this, as shown in the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, the `<div class="page">` element was moved before `<t
    t-foreach="docs">` so that a single report header and footer are printed, and
    the individual records will print additional content inside the same document.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the basic report template, we can customize the report layout,
    which we will do next.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a report layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The report layout can be customized by users. This will be applied to the report,
    so long as it uses `external_layout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The options for this are available from the **Settings** | **General Settings**
    menu, in the **Companies** | **Document** **Layout** section, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.2_B16119.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 â€“ Document layout configuration options
  prefs: []
  type: TYPE_NORMAL
- en: Here, the **Configure Document Layout** button opens a report template configurator,
    provides a few layout options, and allows you to make selections regarding the
    company logo, colors, or text font.
  prefs: []
  type: TYPE_NORMAL
- en: The selected layout can be set on the settings **Layout** field, and **Edit
    Layout** opens the corresponding view form, allowing you to directly customize
    the layout's QWeb XML definition.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to set up the general report layout, let's look at how
    to work with page formats.
  prefs: []
  type: TYPE_NORMAL
- en: Setting a paper format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo proposes a few page formats out of the box, including European *A4* and
    *US Letter*. Additional page formats can be added, including those for specific
    page orientations.
  prefs: []
  type: TYPE_NORMAL
- en: Paper formats are stored in the `report.paperformat` model. The existing formats
    can be inspected using the **Settings** | **Technical** | **Reporting** | **Paper
    Format** menu option.
  prefs: []
  type: TYPE_NORMAL
- en: For the book catalog report, a **landscape orientation** will be used, and a
    new page format will be added for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the `reports/library_book_report.xml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is a copy of the European A4 format, defined by the `base` module, in the
    `data/report_paperformat_data.xml` file, with the orientation changed from portrait
    to landscape.
  prefs: []
  type: TYPE_NORMAL
- en: This paper format can now be used for reports. The default paper format is defined
    in the company setup, but reports can set specific paper formats to be used. This
    can be done using the `paperfomat_id` field in the report action.
  prefs: []
  type: TYPE_NORMAL
- en: 'The report action can be edited to add this field:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: With the basic skeleton for the report in place, it is time to start designing
    the report content.
  prefs: []
  type: TYPE_NORMAL
- en: Designing report content
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The report content is written in HTML and makes use of Bootstrap 4 to help design
    the report's layout. Bootstrap is widely used in web development.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: A complete reference can be found at [http://getbootstrap.com](http://getbootstrap.com).
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Kanban views, the report QWeb templates are rendered on the server side
    and use the Python QWeb implementation. So, there are some differences to be aware
    of, compared to the JavaScript QWeb implementation. QWeb expressions are evaluated
    using Python syntax, not JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the report rendering context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The server-side context where expressions are evaluated is also different from
    the client-side context that''s used for Kanban views. On a report template, the
    following variables are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`docs` is an iterable collection with the records to render the report for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc_ids` is a list of the IDs of the records to render the report for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`doc_model` identifies the model of the records; for example, `library.book`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user` is the record for the user running the report.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res_company` is the record for the current user''s company.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`website` is the record for the current website, if any. This could be `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web_base_url` is the base address of the Odoo server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`time` is a reference to Python''s `time` library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context_timestamp` is a function that takes a datetime object in UTC and converts
    it into the user''s time zone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These values and Python libraries can be used in code expressions inside the
    template. For example, to print out the current user, we could use the following
    command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `docs` value is particularly important since it contains the data to be
    used for the report.
  prefs: []
  type: TYPE_NORMAL
- en: Now that you know how to access the data for the report, the next step is to
    add the report content.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the basic QWeb template, including its header, details, and footer, in
    place, you can now add content to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the XML you must use to render the report header. It should be placed
    inside the `<div class="page">` node and before the `<t t-foreach=...>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This content layout uses the Bootstrap 4 grid system, which was added with the
    `<div class="container">` element. Bootstrap has a grid layout with 12 available
    columns. More details on Bootstrap can be found at [https://getbootstrap.com/docs/4.1/layout/grid](https://getbootstrap.com/docs/4.1/layout/grid).
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo used Bootstrap 3 until Odoo 11 and started using Bootstrap 4 from Odoo
    12\. Bootstrap 4 is not backward compatible with Bootstrap 3\. For tips on the
    changes from Bootstrap 3 to Bootstrap 4, see the Odoo wiki page on this topic:
    [https://github.com/odoo/odoo/wiki/Tips-and-tricks:-BS3-to-BS4](https://github.com/odoo/odoo/wiki/Tips-and-tricks:-BS3-to-BS4).'
  prefs: []
  type: TYPE_NORMAL
- en: The previous code adds a header row with column titles. After this, there is
    a `t-foreach` loop to iterate through each record and render a row for each.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the focus will be on rendering the row for each record â€“ in this case,
    one for each book in the catalog.
  prefs: []
  type: TYPE_NORMAL
- en: Rows are added using a `<div class="row">` element. A row contains cells, and
    each cell can span several columns so that the row takes up 12 columns. Each cell
    is added using a `<div class="col-N">` element, where `N` is the number of columns
    it spans. For example, `<div class="col-3">Title</div>` is a cell spanning three
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: The QWeb template rendering is done on the server side, and record set objects
    are used. So, `o.name` gets the value of the `name` field from the `o` record.
    And it is easy to follow relational fields to access their data. For example,
    `o.publisher_id.email` gets the `email` field from the partner record referenced
    by the `publisher_id` field. Notice that this is not possible in client-side rendered
    QWeb views, such as web client Kanban views.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the content for each record row, add the following XML inside the `<div
    class="row">` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, the `t-field` attributes are being used to render field
    data.
  prefs: []
  type: TYPE_NORMAL
- en: The `t-options` attribute can also be used to provide additional options for
    the field rendering, such as the widget to use.
  prefs: []
  type: TYPE_NORMAL
- en: Let's have a closer look at the field widgets and their options.
  prefs: []
  type: TYPE_NORMAL
- en: Using field widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the template, field values are rendered using the `t-field` attribute. This
    can be complemented with the `t-options` attribute so that you can use a specific
    widget to render the field content.
  prefs: []
  type: TYPE_NORMAL
- en: '`t-options` is set with a dictionary-like data structure. The widget key can
    be used to represent the field data.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example code, `"widget": "contact"` is used to present an address.
    It was used to render the publishing company''s address, `o.publisher_id`. The
    `no_marker="true"` option was used to disable some pictograms and the `contact`
    widget, which are displayed by default.'
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs: []
  type: TYPE_NORMAL
- en: The `t-options` attribute was introduced in Odoo 11, replacing the `t-field-options`
    attribute that was used in previous Odoo versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, assuming that `doc` represents a particular record, rendering
    a date field value looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The reference documentation for the supported widgets and options can be found
    at [https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html#field-widgets](https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html#field-widgets).
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Documentation is not always up to date, and additional details may be found
    regarding the corresponding source code. The place to look is [https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/models/ir_qweb_fields.py](https://github.com/odoo/odoo/blob/15.0/odoo/addons/base/models/ir_qweb_fields.py).
    Look for classes that inherit from `ir.qweb.field`. The `get_available_options()`
    methods give insight into the supported options.
  prefs: []
  type: TYPE_NORMAL
- en: With that, we've added the QWeb XML code to render the row for each book. However,
    the `authors` column is missing. The next section will add the author names, along
    with their images, illustrating how to add image content to a report.
  prefs: []
  type: TYPE_NORMAL
- en: Rendering images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The last column of the report features should present the list of authors, along
    with their avatars. The avatar image can be presented using the `t-field` attribute
    and the `image` widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the last column, add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In the previous code, there is a loop on the values to the `author_ids` many-to-many
    field. For each author, you must render the image in the `image_128` partner field
    using the `image` widget.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have added the header and details rows. The next few sections
    will work on the report footer, which is presented at the end of the report, and
    in the process introduce report totals.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating totals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A common need in reports is to provide **totals**. In some cases, the model
    has fields computing these, and the report just needs to use them. In other cases,
    the totals might have to be computed by the report.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, the Book Catalog report will present the total number of books
    and authors in a final row.
  prefs: []
  type: TYPE_NORMAL
- en: For this, a last row should be added after the closing tag of the `<t t-foreach="docs">`
    element, to present the report totals.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do so, add the footer content with the following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `len()` Python function is used to count the number of elements in a collection.
    Similarly, totals can also be computed using `sum()` over a list of values. For
    example, the following list comprehension computes a total amount:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This list comprehension is a loop on the `docs` variable and returns a list
    of values stating the `amount` value of each record.
  prefs: []
  type: TYPE_NORMAL
- en: Your last low with the report's total is created. However, there are cases where
    grand totals are not enough, and running totals are needed. The next section will
    show you how to accumulate the values for these running totals.
  prefs: []
  type: TYPE_NORMAL
- en: Calculating running totals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some cases, the report needs to perform computations throughout its iterations
    â€“ for example, to keep a **running total**, with the total sum up to the current
    record. This kind of logic can be implemented in QWeb using a variable to accumulate
    values on each record iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'To illustrate this, you can compute the accumulated number of authors. Start
    by initializing the variable, just before the `t-foreach` loop on the `docs` record
    set, using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, inside the loop, add the record''s number of authors to the variable.
    Do this right after presenting the list of authors, and also print out the current
    total on every line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The previous code can be added to any of the report cells â€“ for example, in
    the *Publisher* column cell.
  prefs: []
  type: TYPE_NORMAL
- en: With that, you have added all the report content, including report totals. Another
    feature that you can use on reports is **multilingual support**. This is supported
    in Odoo and the next section explains how to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Enabling language translation in reports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Odoo user interface uses the language selected by the current user. In some
    cases, a report might need to change this to a particular language. For example,
    a document might be better printed using the customer language, rather than the
    user's selected language.
  prefs: []
  type: TYPE_NORMAL
- en: In QWeb, the `t-call` directive, which is used to render a template, can be
    followed by the `t-lang` attribute, with an expression evaluation of the language
    to use. It should evaluate to a language code, such as `es` or `en_US`, and is
    usually an expression with the field where the language to use can be found.
  prefs: []
  type: TYPE_NORMAL
- en: To showcase this, the *Library* app will include a version of the *Book Catalog*
    report using the library's base language, not the user's language. The library
    language will be the one that's set on the company partner record.
  prefs: []
  type: TYPE_NORMAL
- en: For this, the existing `book_catalog` template can be reused. It should be called
    from another template, and that call can set the language to use for the rendering
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `reports/library_book_report.xml` file, add the following two record
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The first record adds the *Native Language Book Catalog* report action, which
    uses the `library_app.book_catalog_native` template to render the report.
  prefs: []
  type: TYPE_NORMAL
- en: The second record adds the report template. It is a single QWeb element that
    uses `t-call` to render the `book_catalog` template and `t-lang` to set the language
    to be used.
  prefs: []
  type: TYPE_NORMAL
- en: The expression that's used to find the language value is `res_company.parter_id.lang`.
    The `res_company` variable is one of the many that's available in any report and
    is the active company. Companies have a related partner record, `partner_id`,
    and partners have a field to store the language in, called `lang`.
  prefs: []
  type: TYPE_NORMAL
- en: The reports being worked on are based on a record set, such as `Books`. But
    there are cases where the data to be used needs specific computation. The next
    section describes options to handle these cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'After completing this step, the final book catalog report example should look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.3_B16119.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 â€“ The final book catalog report
  prefs: []
  type: TYPE_NORMAL
- en: The essential elements for building printable reports in Odoo were covered throughout
    this section. Going further, advanced reports can use specific logic to build
    the data to be used in the report. The next section discusses how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, a report is rendered for the selected records and is available in
    the rendering context through the `docs` variable. In some cases, it is useful
    to prepare arbitrary data structures to be used in the report. This is possible
    using **custom reports**.
  prefs: []
  type: TYPE_NORMAL
- en: A custom report can add whatever data that's needed to the report rendering
    context. This is done using an abstract model with a specific name, following
    the naming convention of `report.<module>.<report-name>`.
  prefs: []
  type: TYPE_NORMAL
- en: This model should implement a `_get_report_values()` method, which returns a
    dictionary with the variables to add to the rendering context.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, a *Books by Publisher* custom report will be added to the *Library*
    app. It will show the books that have been published by each publisher. The following
    screenshot shows an example of the report''s output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.4_B16119.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 â€“ Example of the Books by Publisher custom report
  prefs: []
  type: TYPE_NORMAL
- en: 'The report will be available in the *Contacts* list. One or more partners can
    be selected, and the report will present the titles published by each, if any.
    It can also be run from the publisher''s form, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_12.5_B16119.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 â€“ Print menu option for the Books by Publisher report
  prefs: []
  type: TYPE_NORMAL
- en: This report implementation can be split into two steps. The first is the business
    logic for preparing the data to be used by the report, while the second is the
    QWeb template for the report layout.
  prefs: []
  type: TYPE_NORMAL
- en: The next section explains how to prepare the report data.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing custom report data
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A custom report can use data that's been prepared by specific business logic,
    instead of simply using the record set that's been selected by the user.
  prefs: []
  type: TYPE_NORMAL
- en: This can be done using an abstract model while following a specific name convention,
    that implements a `_get_report_values()` method, to return a dictionary with the
    variables to be used by the report template.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement this as a custom report, add the `reports/library_publisher_report.py`
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'For this file to be loaded by the module, it is also necessary to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `reports/__init__.py` file with a `from . import library_publisher_report`
    line.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add a `from . import reports` line to the top of the `__init__.py` file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model is an `AbstractModel`, meaning that it has no database representation
    and holds no data. The data to be used for rendering will be computed by specific
    business logic.
  prefs: []
  type: TYPE_NORMAL
- en: The report template identifier name will be `publisher_report`, so the model
    name should be `report.library_app.publisher_report`.
  prefs: []
  type: TYPE_NORMAL
- en: The model has an `@api.model` decorated method named `_get_report_values`. The
    `docids` argument is a list of the numeric IDs selected to print the report. The
    base model to run the report is `res.partner`, so these will be partner IDs.
  prefs: []
  type: TYPE_NORMAL
- en: The method uses specific business logic to find the books from the selected
    publishers and groups them by publisher. The result is in the `publisher_books`
    variable, which is a list of pairs, along with the publisher records and a record
    set of book records; that is, `[(res.partner(1), library.book(1, 2, 3)]`.
  prefs: []
  type: TYPE_NORMAL
- en: '`_get_report_values` returns a dictionary with a `publisher_books` key that
    returns this data structure. This key will be available as a variable in the report
    template and can be iterated in a loop.'
  prefs: []
  type: TYPE_NORMAL
- en: Now that the custom report data has been prepared, the next step is to add the
    QWeb report template.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the report template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next step is to create the QWeb template that's used to render the report.
    This template is similar to what is done for regular reports. An XML file is needed,
    along with the report action and the report QWeb template. The only difference
    is that, instead of the `docs` context variable, this template will have context
    variables available as whatever key/values are returned by the `_get_report_values`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'To implement the report action and template, add theÂ `reports/library_publisher_report.xml`
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The previous XML includes two records â€“ one for adding the *Books by Publisher*
    report action and another for adding the `publisher_report` report template.
  prefs: []
  type: TYPE_NORMAL
- en: When running this report, the report engine will try finding a `report.library_app.`
    `publisher_report` model. If it exists, as is the case here, the `_get_report_values()`
    method is used to add variables to the rendering context.
  prefs: []
  type: TYPE_NORMAL
- en: The QWeb template can then use the `publisher_books` variable to access the
    added data. It is a list containing a `group[0]`, is the publisher record that's
    used on the group header, while the second tuple element, `group[1]`, is the record
    set containing the published books, presented using a second for loop.
  prefs: []
  type: TYPE_NORMAL
- en: Remember to also reference this XML file in the `__manifest__.py` module. Having
    done this, once the `library_app` module has been upgraded and the Odoo web browser
    page has been reloaded, you will have the *Books by Publisher* report available
    in the `Print` context menu, when records are selected in the *Contacts* list.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you learned about the essential techniques to create and add
    custom Odoo reports. Installing the recommended version of the `wkhtmltopdf` utility
    is important to ensure the reports are rendered correctly. You learned that reports
    are run through report actions, which provide the basic information needed to
    render them. These may include the paper format to be used and you now know how
    to do so.
  prefs: []
  type: TYPE_NORMAL
- en: The next thing you learned about is report design, which can be implemented
    with QWeb templates. Knowledge of QWeb, HTML, and Bootstrap is needed for this,
    as you have been made aware of. In some cases, reports need specific business
    logic to prepare the data to use. For this, you learned how to create custom report
    models, along with the techniques to use them.
  prefs: []
  type: TYPE_NORMAL
- en: Printable reports can be important parts of a business application, as they
    are often needed as a simple way to send information to external parties or to
    support physical processes in the warehouse or shop floor. This chapter provided
    you with the tools and techniques to implement this kind of requirement. Now,
    you can ensure that your business application doesn't fall short of your user's
    needs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will continue to use QWeb, this time to build website
    pages. Web controllers will also be explained, which allow richer features to
    be used on Odoo web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This additional reference material complements the topics described in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relevant Odoo official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'QWeb Reports: [https://www.odoo.com/documentation/15.0/developer/reference/backend/reports.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/reports.html%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'QWeb Templates: [https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bootstrap 4 official documentation: [https://getbootstrap.com/docs/4.1](https://getbootstrap.com/docs/4.1%20)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other relevant resources:'
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo Community Association hosts a project dedicated to the enhanced report
    feature at https://github.com/OCA/reporting-engine.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrap additional learning resources from Packt Publishing can be found at
    [https://www.packtpub.com/tech/bootstrap](https://www.packtpub.com/tech/bootstrap).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
