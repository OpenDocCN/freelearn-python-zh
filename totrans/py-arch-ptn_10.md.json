["```py\ndef process_request(request):\n\n    # Search for the owner of the request\n\n    owner = request.owner\n\n    info = retrieve_owner_info_from_db(owner)\n\n    if check_quota_info(info):\n\n        return process_request(request)\n\n    else:\n\n        return 'Quota exceeded' \n```", "```py\ndef check_quota_info(info):\n\n    current_minute = get_current_minute()\n\n if current_minute != info.minute:\n\n     # New minute, start the quota\n\n     info.requests = 0\n\n     info.minute = current_minute\n\n else:\n\n     info.requests += 1\n\n # Update the information\n\n info.save()\n\n if info.requests > info.quota:\n\n     # Quota exceeded\n\n     return False\n\n # Quota still valid\n\n return False \n```", "```py\ndef check_quota_info(info): \n\n    # Generate the proper event for a new event\n\n    generate_event('request', info.owner)\n\n if info.quota_exceeded:\n\n     return False\n\n # Quota still valid\n\n return False \n```", "```py\n$ docker run -d -p 6379:6379 redis \n```", "```py\n$ docker run -d -p 9090:9090 -t adobe/s3mock \n```", "```py\n$ pip3 install -r requirements.txt \n```", "```py\nfrom celery import Celery\n\napp = Celery(broker='redis://localhost/0')\n\nimages_app = Celery(broker='redis://localhost/1')\n\nvideos_app = Celery(broker='redis://localhost/2')\n\nlogger = app.log.get_default_logger()\n\n@app.task\n\ndef process_file(path):\n\n    logger.info('Stating task')\n\n    logger.info('The file is a video, needs to extract thumbnail and '\n\n                'create resized version')\n\n    videos_app.send_task('video_tasks.process_video', [path])\n\n    images_app.send_task('image_tasks.process_video', [path])\n\n    logger.info('End task') \n```", "```py\napp = Celery(broker='redis://localhost/0')\n\nimages_app = Celery(broker='redis://localhost/1')\n\nvideos_app = Celery(broker='redis://localhost/2') \n```", "```py\nfrom celery import Celery\n\nimport boto3\n\nimport moviepy.editor as mp\n\nimport tempfile\n\nMOCK_S3 = 'http://localhost:9090/'\n\nBUCKET = 'videos'\n\nvideos_app = Celery(broker='redis://localhost/1')\n\nlogger = videos_app.log.get_default_logger()\n\n@videos_app.task\n\ndef process_video(path):\n\n    logger.info(f'Stating process video {path} for image thumbnail')\n\n    client = boto3.client('s3', endpoint_url=MOCK_S3)\n\n    # Download the file to a temp file\n\n    with tempfile.NamedTemporaryFile(suffix='.mp4') as tmp_file:\n\n        client.download_fileobj(BUCKET, path, tmp_file)\n\n        # Extract first frame with moviepy\n\n        video = mp.VideoFileClip(tmp_file.name)\n\n        with tempfile.NamedTemporaryFile(suffix='.png') as output_file:\n\n            video.save_frame(output_file.name)\n\n            client.upload_fileobj(output_file, BUCKET, path + '.png')\n\n    logger.info('Finish image thumbnails') \n```", "```py\nclient = boto3.client('s3', endpoint_url=MOCK_S3)\n\n# Download the file to a temp file\n\nwith tempfile.NamedTemporaryFile(suffix='.mp4') as tmp_file:\n\n    client.download_fileobj(BUCKET, path, tmp_file) \n```", "```py\nvideo = mp.VideoFileClip(tmp_file.name)\n\nwith tempfile.NamedTemporaryFile(suffix='.png') as output_file:\n\n    video.save_frame(output_file.name) \n```", "```py\nclient.upload_fileobj(output_file, BUCKET, path + '.png') \n```", "```py\nfrom celery import Celery\n\nimport boto3\n\nimport moviepy.editor as mp\n\nimport tempfile\n\nMOCK_S3 = 'http://localhost:9090/'\n\nBUCKET = 'videos'\n\nSIZE = 720\n\nvideos_app = Celery(broker='redis://localhost/2')\n\nlogger = videos_app.log.get_default_logger()\n\n@videos_app.task\n\ndef process_video(path):\n\n    logger.info(f'Starting process video {path} for image resize')\n\n    client = boto3.client('s3', endpoint_url=MOCK_S3)\n\n    # Download the file to a temp file\n\n    with tempfile.NamedTemporaryFile(suffix='.mp4') as tmp_file:\n\n        client.download_fileobj(BUCKET, path, tmp_file)\n\n        # Resize with moviepy\n\n        video = mp.VideoFileClip(tmp_file.name)\n\n        video_resized = video.resize(height=SIZE)\n\n        with tempfile.NamedTemporaryFile(suffix='.mp4') as output_file:\n\n            video_resized.write_videofile(output_file.name)\n\n            client.upload_fileobj(output_file, BUCKET, path + f'x{SIZE}.mp4')\n\n    logger.info('Finish video resize') \n```", "```py\n# Resize with moviepy\n\nvideo = mp.VideoFileClip(tmp_file.name)\n\nvideo_resized = video.resize(height=SIZE)\n\nwith tempfile.NamedTemporaryFile(suffix='.mp4') as output_file:\n\n     video_resized.write_videofile(output_file.name) \n```", "```py\n $ celery -A base_tasks worker --loglevel=INFO\n\n    $ celery -A video_tasks worker --loglevel=INFO\n\n    $ celery -A image_tasks worker --loglevel=INFO \n```", "```py\nimport click\n\nimport boto3\n\nfrom celery import Celery\n\ncelery_app = Celery(broker='redis://localhost/0')\n\n   MOCK_S3 = 'http://localhost:9090/'\n\nBUCKET = 'videos'\n\nSOURCE_VIDEO_PATH = '/source_video.mp4'\n\n@click.command()\n\n@click.argument('video_to_upload')\n\ndef main(video_to_upload):\n\n# Note the credentials are required by boto3, but we are using\n\n# a mock S3 that doesn't require them, so they can be fake\n\n    client = boto3.client('s3', endpoint_url=MOCK_S3,\n\n                          aws_access_key_id='FAKE_ACCESS_ID',\n\n                          aws_secret_access_key='FAKE_ACCESS_KEY')\n\n    # Create bucket if not set\n\n    client.create_bucket(Bucket=BUCKET)\n\n    # Upload the file\n\n    client.upload_file(video_to_upload, BUCKET, SOURCE_VIDEO_PATH)\n\n    # Trigger the\n\n    celery_app.send_task('base_tasks.process_file', [SOURCE_VIDEO_PATH])\n\nif __name__ == '__main__':\n\n    main() \n```", "```py\n@click.command()\n\n@click.argument('video_to_upload')\n\ndef main(video_to_upload):\n\n           â€¦. \n```", "```py\n client = boto3.client('s3', endpoint_url=MOCK_S3)\n\n    # Create bucket if not set\n\n    client.create_bucket(Bucket=BUCKET)\n\n    # Upload the file\n\n    client.upload_file(video_to_upload, BUCKET, SOURCE_VIDEO_PATH)\n\n    # Trigger the\n\n    celery_app.send_task('base_tasks.process_file', [SOURCE_VIDEO_PATH]) \n```", "```py\n$ python3 upload_video_and_start.py source_video.mp4 \n```", "```py\n[2021-07-08 20:37:57,219: INFO/MainProcess] Received task: base_tasks.process_file[8410980a-d443-4408-8f17-48e89f935325]\n\n[2021-07-08 20:37:57,309: INFO/ForkPoolWorker-2] Stating task\n\n[2021-07-08 20:37:57,660: INFO/ForkPoolWorker-2] The file is a video, needs to extract thumbnail and create resized version\n\n[2021-07-08 20:37:58,163: INFO/ForkPoolWorker-2] End task\n\n[2021-07-08 20:37:58,163: INFO/ForkPoolWorker-2] Task base_tasks.process_file[8410980a-d443-4408-8f17-48e89f935325] succeeded in 0.8547832089971052s: None \n```", "```py\n[2021-07-08 20:37:58,251: INFO/MainProcess] Received task: image_tasks.process_video[5960846f-f385-45ba-9f78-c8c5b6c37987]\n\n[2021-07-08 20:37:58,532: INFO/ForkPoolWorker-2] Stating process video /source_video.mp4 for image thumbnail\n\n[2021-07-08 20:38:41,055: INFO/ForkPoolWorker-2] Finish image thumbnails\n\n[2021-07-08 20:38:41,182: INFO/ForkPoolWorker-2] Task image_tasks.process_video[5960846f-f385-45ba-9f78-c8c5b6c37987] succeeded in 42.650344008012326s: None \n```", "```py\n[2021-07-08 20:37:57,813: INFO/MainProcess] Received task: video_tasks.process_video[34085562-08d6-4b50-ac2c-73e991dbb58a]\n\n[2021-07-08 20:37:57,982: INFO/ForkPoolWorker-2] Starting process video /source_video.mp4 for image resize\n\n[2021-07-08 20:38:15,384: WARNING/ForkPoolWorker-2] Moviepy - Building video /var/folders/yx/k970yrd11hb4lmrq4rg5brq80000gn/T/tmp0deg6k8e.mp4.\n\n[2021-07-08 20:38:15,385: WARNING/ForkPoolWorker-2] Moviepy - Writing video /var/folders/yx/k970yrd11hb4lmrq4rg5brq80000gn/T/tmp0deg6k8e.mp4\n\n[2021-07-08 20:38:15,429: WARNING/ForkPoolWorker-2] t:   0%|          | 0/528 [00:00<?, ?it/s, now=None]\n\n[2021-07-08 20:38:16,816: WARNING/ForkPoolWorker-2] t:   0%|          | 2/528 [00:01<06:04,  1.44it/s, now=None]\n\n[2021-07-08 20:38:17,021: WARNING/ForkPoolWorker-2] t:   1%|          | 3/528 [00:01<04:17,  2.04it/s, now=None]\n\n...\n\n[2021-07-08 20:39:49,400: WARNING/ForkPoolWorker-2] t:  99%|#########9| 524/528 [01:33<00:00,  6.29it/s, now=None]\n\n[2021-07-08 20:39:49,570: WARNING/ForkPoolWorker-2] t:  99%|#########9| 525/528 [01:34<00:00,  6.16it/s, now=None]\n\n[2021-07-08 20:39:49,874: WARNING/ForkPoolWorker-2] t: 100%|#########9| 527/528 [01:34<00:00,  6.36it/s, now=None]\n\n[2021-07-08 20:39:50,027: WARNING/ForkPoolWorker-2] t: 100%|##########| 528/528 [01:34<00:00,  6.42it/s, now=None]\n\n[2021-07-08 20:39:50,723: WARNING/ForkPoolWorker-2] Moviepy - Done !\n\n[2021-07-08 20:39:50,723: WARNING/ForkPoolWorker-2] Moviepy - video ready /var/folders/yx/k970yrd11hb4lmrq4rg5brq80000gn/T/tmp0deg6k8e.mp4\n\n[2021-07-08 20:39:51,170: INFO/ForkPoolWorker-2] Finish video resize\n\n[2021-07-08 20:39:51,171: INFO/ForkPoolWorker-2] Task video_tasks.process_video[34085562-08d6-4b50-ac2c-73e991dbb58a] succeeded in 113.18933968200872s: None \n```", "```py\nimport boto3\n\nMOCK_S3 = 'http://localhost:9090/'\n\nBUCKET = 'videos'\n\nclient = boto3.client('s3', endpoint_url=MOCK_S3)\n\nfor path in client.list_objects(Bucket=BUCKET)['Contents']:\n\n    print(f'file {path[\"Key\"]:25} size {path[\"Size\"]}')\n\n    filename = path['Key'][1:]\n\n    client.download_file(BUCKET, path['Key'], filename) \n```", "```py\n$ python3 check_results.py\n\nfile /source_video.mp4         size 56807332\n\nfile /source_video.mp4.png     size 6939007\n\nfile /source_video.mp4x720.mp4 size 8525077 \n```", "```py\n# Remember that database 0 is the base queue\n\nBASE_BROKER = 'redis://localhost/0'\n\nBase_app = Celery(broker=BROKER)\n\n# Refactor for base\n\nBROKER_ROOT = 'redis://localhost'\n\nBROKER_BASE_QUEUE = 0\n\nbase_app = Celery(broker=f'{BASE_BROKER}/{BROKER_BASE_QUEUE}') \n\n# To address the image queue\n\nBROKER_ROOT = 'redis://localhost'\n\nBROKER_IMAGE_QUEUE = 1\n\nimage_app = Celery(broker=f'{BASE_BROKER}/{BROKER_IMAGE_QUEUE}') \n```", "```py\n{\n\n  \"type\": string defining the event type,\n\n  \"data\": subevent content\n\n} \n```", "```py\n{\n\n  \"type\": \"SEARCH\",\n\n  \"data\": {\n\n    \"from\": \"Dublin\",\n\n    \"to\": \"New York\",\n\n    \"depart_date\": 2021-12-31,\n\n    \"return_date\": null,\n\n    \"user\": null\n\n  }\n\n} \n```"]