["```py\n>>> type('hello world')\n<class 'str'>\n>>> type(1)\n<class 'int'>\n>>> type(print)\n<class 'builtin_function_or_method'> \n```", "```py\nclass Banana:\n  \"\"\"A tasty tropical fruit\"\"\"\n  pass \n```", "```py\nmy_banana = Banana() \n```", "```py\nclass Banana:\n  \"\"\"A tasty tropical fruit\"\"\"\n  food_group = 'fruit'\n  colors = [\n    'green', 'green-yellow', 'yellow',\n    'brown spotted', 'black'\n  ] \n```", "```py\nmy_banana = Banana()\nmy_banana.color = 'yellow' \n```", "```py\nclass Banana:\n  def peel(self):\n    self.peeled = True \n```", "```py\n def set_color(self, color):\n    \"\"\"Set the color of the banana\"\"\"\n    if color in self.colors:\n      self.color = color\n    else:\n      raise ValueError(f'A banana cannot be {color}!') \n```", "```py\nmy_banana = Banana()\nmy_banana.set_color('green')\nmy_banana.peel() \n```", "```py\n **@classmethod**\n  def check_color(cls, color):\n    \"\"\"Test a color string to see if it is valid.\"\"\"\n    return color in cls.colors\n **@classmethod**\n  def make_greenie(cls):\n    \"\"\"Create a green banana object\"\"\"\n    banana = cls()\n    banana.set_color('green')\n    return banana \n```", "```py\n **@staticmethod**\n  def estimate_calories(num_bananas):\n    \"\"\"Given `num_bananas`, estimate the number of calories\"\"\"\n    return num_bananas * 105 \n```", "```py\n>>> print(my_banana.__class__)\n<class '__main__.Banana'> \n```", "```py\nclass Banana:\n  # ....\n  def __str__(self):\n    # \"Magic Attributes\" contain metadata about the object\n    return f'A {self.color} {self.__class__.__name__}' \n```", "```py\n>>> my_banana = Banana()\n>>> my_banana.set_color('yellow')\n>>> print(my_banana)\nA yellow Banana \n```", "```py\n def __init__(self, color='green'):\n    if not self.check_color(color):\n      raise ValueError(\n        f'A {self.__class__.__name__} cannot be {color}'\n      )\n    self.color = color \n```", "```py\n>>> my_new_banana = Banana('green')\n>>> print(my_new_banana)\nA green Banana \n```", "```py\n def __init__(self, color='green'):\n    # ...\n    **self.peeled =** **False** \n```", "```py\n __ripe_colors = ['yellow', 'brown spotted']\n  def _is_ripe(self):\n    \"\"\"Protected method to see if the banana is ripe.\"\"\"\n    return self.color in self.__ripe_colors\n  def can_eat(self, must_be_ripe=False):\n    \"\"\"Check if I can eat the banana.\"\"\"\n    if must_be_ripe and not self._is_ripe():\n      return False\n    return True \n```", "```py\nclass RedBanana(Banana):\n  \"\"\"Bananas of the red variety\"\"\"\n  pass \n```", "```py\nclass RedBanana(Banana):\n  colors = ['green', 'orange', 'red', 'brown', 'black']\n  botanical_name = 'red dacca'\n  def set_color(self, color):\n    if color not in self.colors:\n      raise ValueError(f'A Red Banana cannot be {color}!') \n```", "```py\n def peel(self):\n    super().peel()\n    print('It looks like a regular banana inside!') \n```", "```py\n# tkinter_classes_demo.py\nimport tkinter as tk\nimport json \n```", "```py\nclass JSONVar(tk.StringVar):\n  \"\"\"A Tk variable that can hold dicts and lists\"\"\" \n```", "```py\n def __init__(self, *args, **kwargs):\n    kwargs['value'] = json.dumps(kwargs.get('value')\n    super().__init__(*args, **kwargs) \n```", "```py\n def set(self, value, *args, **kwargs):\n    string = json.dumps(value)\n    super().set(string, *args, **kwargs) \n```", "```py\n def get(self, *args, **kwargs):\n    string = super().get(*args, **kwargs)\n    return json.loads(string) \n```", "```py\nroot = tk.Tk()\nvar1 = JSONVar(root)\nvar1.set([1, 2, 3])\nvar2 = JSONVar(root, value={'a': 10, 'b': 15})\nprint(\"Var1: \", var1.get()[1])\n# Should print 2\nprint(\"Var2: \", var2.get()['b'])\n# Should print 15 \n```", "```py\n# tkinter_classes_demo.py\nclass LabelInput(tk.Frame):\n  \"\"\"A label and input combined together\"\"\" \n```", "```py\n def __init__(\n    self, parent, label, inp_cls, \n    inp_args, *args, **kwargs\n  ):\n    super().__init__(parent, *args, **kwargs)\n    self.label = tk.Label(self, text=label, anchor='w')\n    self.input = inp_cls(self, **inp_args) \n```", "```py\n self.columnconfigure(1, weight=1)\n    self.label.grid(sticky=tk.E + tk.W)\n    self.input.grid(row=0, column=1, sticky=tk.E + tk.W) \n```", "```py\n self.columnconfigure(0, weight=1)\n    self.label.grid(sticky=tk.E + tk.W)\n    self.input.grid(sticky=tk.E + tk.W) \n```", "```py\n# tkinter_classes_demo.py\nli1 = LabelInput(root, 'Name', tk.Entry, {'bg': 'red'})\nli1.grid() \n```", "```py\nage_var = tk.IntVar(root, value=21)\nli2 = LabelInput(\n  root, 'Age', tk.Spinbox,\n  {'textvariable': age_var, 'from_': 10, 'to': 150}\n)\nli2.grid() \n```", "```py\n# tkinter_classes_demo.py\nclass MyForm(tk.Frame):\n  def __init__(self, parent, data_var, *args, **kwargs):\n    super().__init__(parent, *args, **kwargs)\n    self.data_var = data_var \n```", "```py\n self._vars = {\n      'name': tk.StringVar(self),\n      'age': tk.IntVar(self, value=2)\n    } \n```", "```py\n LabelInput(\n      self, 'Name', tk.Entry,\n      {'textvariable': self._vars['name']}\n    ).grid(sticky=tk.E + tk.W)\n    LabelInput(\n      self, 'Age', tk.Spinbox,\n      {'textvariable': self._vars['age'], 'from_': 10, 'to': 150}\n    ).grid(sticky=tk.E + tk.W) \n```", "```py\n tk.Button(self, text='Submit', command=self._on_submit).grid() \n```", "```py\n def _on_submit(self):\n    data = { key: var.get() for key, var in self._vars.items() }\n    self.data_var.set(data) \n```", "```py\n# tkinter_classes_demo.py\nclass Application(tk.Tk):\n  \"\"\"A simple form application\"\"\"\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs) \n```", "```py\n self.jsonvar = JSONVar(self)\n    self.output_var = tk.StringVar(self) \n```", "```py\n tk.Label(self, text='Please fill the form').grid(sticky='ew')\n    MyForm(self, self.jsonvar).grid(sticky='nsew')\n    tk.Label(self, textvariable=self.output_var).grid(sticky='ew')\n    self.columnconfigure(0, weight=1)\n    self.rowconfigure(1, weight=1) \n```", "```py\n self.jsonvar.trace_add('write', self._on_data_change) \n```", "```py\n def _on_data_change(self, *args, **kwargs):\n    data = self.jsonvar.get()\n    output = ''.join([\n    f'{key} = {value}\\n'\n    for key, value in data.items()\n    ])\n    self.output_var.set(output) \n```", "```py\nif __name__ == \"__main__\":\n  app = Application()\n  app.mainloop() \n```", "```py\n# data_entry_app.py\nfrom datetime import datetime\nfrom pathlib import Path\nimport csv\nimport tkinter as tk\nfrom tkinter import ttk \n```", "```py\nclass BoundText(tk.Text):\n  \"\"\"A Text widget with a bound variable.\"\"\" \n```", "```py\n def __init__(self, *args, textvariable=None, **kwargs):\n    super().__init__(*args, **kwargs)\n    self._variable = textvariable \n```", "```py\n if self._variable:\n      self.insert('1.0', self._variable.get()) \n```", "```py\n if self._variable:\n      self.insert('1.0', self._variable.get())\n      **self._variable.trace_add('write', self._set_content)** \n```", "```py\n def _set_content(self, *_):\n    \"\"\"Set the text contents to the variable\"\"\"\n    self.delete('1.0', tk.END)\n    self.insert('1.0', self._variable.get()) \n```", "```py\n if self._variable:\n      self.insert('1.0', self._variable.get())\n      self._variable.trace_add('write', self._set_content)\n      `self.bind('<<Modified>>', self._set_var)` \n```", "```py\n def _set_var(self, *_):\n    \"\"\"Set the variable to the text contents\"\"\"\n    if self.edit_modified():\n      content = self.get('1.0', 'end-1chars')\n      self._variable.set(content)\n      self.edit_modified(False) \n```", "```py\n# data_entry_app.py\nclass LabelInput(tk.Frame):\n  \"\"\"A widget containing a label and input together.\"\"\"\n  def __init__(\n    self, parent, label, var, input_class=ttk.Entry,\n    input_args=None, label_args=None, **kwargs\n  ):\n    super().__init__(parent, **kwargs)\n    input_args = input_args or {}\n    label_args = label_args or {}\n    self.variable = var\n    self.variable.label_widget = self \n```", "```py\n if input_class in (ttk.Checkbutton, ttk.Button):\n      input_args[\"text\"] = label\n    else:\n      self.label = ttk.Label(self, text=label, **label_args)\n      self.label.grid(row=0, column=0, sticky=(tk.W + tk.E)) \n```", "```py\n if input_class in (\n      ttk.Checkbutton, ttk.Button, ttk.Radiobutton\n    ):\n      input_args[\"variable\"] = self.variable\n    else:\n      input_args[\"textvariable\"] = self.variable \n```", "```py\n if input_class == ttk.Radiobutton:\n      self.input = tk.Frame(self)\n      for v in input_args.pop('values', []):\n        button = ttk.Radiobutton(\n          self.input, value=v, text=v, **input_args\n        )\n        button.pack(\n          side=tk.LEFT, ipadx=10, ipady=2, expand=True, fill='x'\n        ) \n```", "```py\n else:\n      self.input = input_class(self, **input_args) \n```", "```py\n self.input.grid(row=1, column=0, sticky=(tk.W + tk.E))\n    self.columnconfigure(0, weight=1) \n```", "```py\n def grid(self, sticky=(tk.E + tk.W), **kwargs):\n    \"\"\"Override grid to add default sticky values\"\"\"\n    super().grid(sticky=sticky, **kwargs) \n```", "```py\n# data_entry_app.py\nclass DataRecordForm(ttk.Frame):\n  \"\"\"The input form for our widgets\"\"\"\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs) \n```", "```py\n self._vars = {\n      'Date': tk.StringVar(),\n      'Time': tk.StringVar(),\n      'Technician': tk.StringVar(),\n      'Lab': tk.StringVar(),\n      'Plot': tk.IntVar(),\n      'Seed Sample': tk.StringVar(),\n      'Humidity': tk.DoubleVar(),\n      'Light': tk.DoubleVar(),\n      'Temperature': tk.DoubleVar(),\n      'Equipment Fault': tk.BooleanVar(),\n      'Plants': tk.IntVar(),\n      'Blossoms': tk.IntVar(),\n      'Fruit': tk.IntVar(),\n      'Min Height': tk.DoubleVar(),\n      'Max Height': tk.DoubleVar(),\n      'Med Height': tk.DoubleVar(),\n      'Notes': tk.StringVar()\n    } \n```", "```py\nr_info = ttk.LabelFrame(drf, text='Record Information')\nr_info.grid(sticky=(tk.W + tk.E))\nfor i in range(3):\n  r_info.columnconfigure(i, weight=1 ) \n```", "```py\n def _add_frame(self, label, cols=3):\n    \"\"\"Add a LabelFrame to the form\"\"\"\n    frame = ttk.LabelFrame(self, text=label)\n    frame.grid(sticky=tk.W + tk.E)\n    for i in range(cols):\n      frame.columnconfigure(i, weight=1)\n    return frame \n```", "```py\n r_info = self._add_frame(\"Record Information\") \n```", "```py\n LabelInput(\n      r_info, \"Date\", var=self._vars['Date']\n    ).grid(row=0, column=0)\n    LabelInput(\n      r_info, \"Time\", input_class=ttk.Combobox,\n      var=self._vars['Time'],\n      input_args={\"values\": [\"8:00\", \"12:00\", \"16:00\", \"20:00\"]}\n    ).grid(row=0, column=1)\n    LabelInput(\n      r_info, \"Technician\",  var=self._vars['Technician']\n    ).grid(row=0, column=2) \n```", "```py\n LabelInput(\n      r_info, \"Lab\", input_class=ttk.Radiobutton,\n      var=self._vars['Lab'],\n      input_args={\"values\": [\"A\", \"B\", \"C\"]}\n    ).grid(row=1, column=0)\n    LabelInput(\n      r_info, \"Plot\", input_class=ttk.Combobox,\n      var=self._vars['Plot'],\n      input_args={\"values\": list(range(1, 21))}\n    ).grid(row=1, column=1)\n    LabelInput(\n      r_info, \"Seed Sample\",  var=self._vars['Seed Sample']\n    ).grid(row=1, column=2) \n```", "```py\n e_info = self._add_frame(\"Environment Data\")\n    LabelInput(\n      e_info, \"Humidity (g/m³)\",\n      input_class=ttk.Spinbox,  var=self._vars['Humidity'],\n      input_args={\"from_\": 0.5, \"to\": 52.0, \"increment\": .01}\n    ).grid(row=0, column=0)\n    LabelInput(\n      e_info, \"Light (klx)\", input_class=ttk.Spinbox,\n      var=self._vars['Light'],\n      input_args={\"from_\": 0, \"to\": 100, \"increment\": .01}\n    ).grid(row=0, column=1)\n    LabelInput(\n      e_info, \"Temperature (°C)\",\n      input_class=ttk.Spinbox,  var=self._vars['Temperature'],\n      input_args={\"from_\": 4, \"to\": 40, \"increment\": .01}\n    ).grid(row=0, column=2)\n    LabelInput(\n      e_info, \"Equipment Fault\",\n      input_class=ttk.Checkbutton,  \n      var=self._vars['Equipment Fault']\n    ).grid(row=1, column=0, columnspan=3) \n```", "```py\n p_info = self._add_frame(\"Plant Data\")\n    LabelInput(\n      p_info, \"Plants\", input_class=ttk.Spinbox,\n      var=self._vars['Plants'],\n      input_args={\"from_\": 0, \"to\": 20}\n    ).grid(row=0, column=0)\n    LabelInput(\n      p_info, \"Blossoms\", input_class=ttk.Spinbox,\n      var=self._vars['Blossoms'],\n      input_args={\"from_\": 0, \"to\": 1000}\n    ).grid(row=0, column=1)\n    LabelInput(\n      p_info, \"Fruit\", input_class=ttk.Spinbox,\n      var=self._vars['Fruit'],\n      input_args={\"from_\": 0, \"to\": 1000}\n    ).grid(row=0, column=2)\n    LabelInput(\n      p_info, \"Min Height (cm)\",\n      input_class=ttk.Spinbox,  var=self._vars['Min Height'],\n      input_args={\"from_\": 0, \"to\": 1000, \"increment\": .01}\n    ).grid(row=1, column=0)\n    LabelInput(\n      p_info, \"Max Height (cm)\",\n      input_class=ttk.Spinbox,  var=self._vars['Max Height'],\n      input_args={\"from_\": 0, \"to\": 1000, \"increment\": .01}\n    ).grid(row=1, column=1)\n    LabelInput(\n      p_info, \"Median Height (cm)\",\n      input_class=ttk.Spinbox,  var=self._vars['Med Height'],\n      input_args={\"from_\": 0, \"to\": 1000, \"increment\": .01}\n    ).grid(row=1, column=2) \n```", "```py\n LabelInput(\n      self, \"Notes\",\n      input_class=BoundText,  var=self._vars['Notes'],\n      input_args={\"width\": 75, \"height\": 10}\n    ).grid(sticky=tk.W, row=3, column=0) \n```", "```py\n buttons = tk.Frame(self)\n    buttons.grid(sticky=tk.W + tk.E, row=4)\n    self.savebutton = ttk.Button(\n      buttons, text=\"Save\", command=self.master._on_save)\n    self.savebutton.pack(side=tk.RIGHT)\n    self.resetbutton = ttk.Button(\n      buttons, text=\"Reset\", command=self.reset)\n    self.resetbutton.pack(side=tk.RIGHT) \n```", "```py\n def reset(self):\n    \"\"\"Resets the form entries\"\"\"\n    for var in self._vars.values():\n      if isinstance(var, tk.BooleanVar):\n        var.set(False)\n      else:\n        var.set('') \n```", "```py\n def get(self):\n    data = dict()\n    fault = self._vars['Equipment Fault'].get()\n    for key, variable in self._vars.items():\n      if fault and key in ('Light', 'Humidity', 'Temperature'):\n        data[key] = ''\n      else:\n        try:\n          data[key] = variable.get()\n        except tk.TclError:\n          message = f'Error in field: {key}.  Data was not saved!'\n          raise ValueError(message)\n    return data \n```", "```py\nclass Application(tk.Tk):\n  \"\"\"Application root window\"\"\"\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs) \n```", "```py\n self.title(\"ABQ Data Entry Application\")\n    self.columnconfigure(0, weight=1) \n```", "```py\n ttk.Label(\n      self, text=\"ABQ Data Entry Application\",\n      font=(\"TkDefaultFont\", 16)\n    ).grid(row=0) \n```", "```py\n self.recordform = DataRecordForm(self)\n    self.recordform.grid(row=1, padx=10, sticky=(tk.W + tk.E)) \n```", "```py\n self.status = tk.StringVar()\n    ttk.Label(\n      self, textvariable=self.status\n    ).grid(sticky=(tk.W + tk.E), row=2, padx=10) \n```", "```py\n self._records_saved = 0 \n```", "```py\n def _on_save(self):\n    \"\"\"Handles save button clicks\"\"\"\n    datestring = datetime.today().strftime(\"%Y-%m-%d\")\n    filename = \"abq_data_record_{}.csv\".format(datestring)\n    newfile = not Path(filename).exists()\n    try:\n      data = self.recordform.get()\n    except ValueError as e:\n      self.status.set(str(e))\n      return\n    with open(filename, 'a', newline='') as fh:\n      csvwriter = csv.DictWriter(fh, fieldnames=data.keys())\n      if newfile:\n        csvwriter.writeheader()\n      csvwriter.writerow(data)\n    self._records_saved += 1\n    self.status.set(\n      \"{} records saved this session\".format(self._records_saved))\n    self.recordform.reset() \n```", "```py\nif __name__ == \"__main__\":\n  app = Application()\n  app.mainloop() \n```"]