["```py\n    import pdb; pdb.set_trace()\n\n    ```", "```py\n    def index():\n    \timport pdb; pdb.set_trace()\n    \tmessage = T('Hello World')\n    \treturn dict(message=message)\n\n    ```", "```py\n     $ python web2py.py -a a\n    web2py Web Framework\n    Created by Massimo Di Pierro, Copyright 2007-2011\n    Version 1.99.0 (2011-09-15 19:47:18)\n    Database drivers available: SQLite3, pymysql, PostgreSQL\n    Starting hardcron...\n    please visit:\n    \thttp://127.0.0.1:8000\n    use \"kill -SIGTERM 16614\" to shutdown the web2py server\n    > /home/reingart/web2py/applications/welcome/controllers/default.\n    py(20)index()\n    -> message = T('Hello World')\n    (Pdb)\n\n    ```", "```py\n    (Pdb) n\n    > /home/reingart/web2py/applications/welcome/controllers/default.py(21)index()\n    -> return dict(message=message)\n    (Pdb) p message\n    <lazyT 'Hello World'>\n    (Pdb) !message=\"hello web2py recipe!\"\n    (Pdb) w\n    > /home/reingart/web2py/applications/welcome/controllers/default.py(21)index()\n    -> return dict(message=message)\n    (Pdb) c\n\n    ```", "```py\n    def index():\n    \tgluon.debug.set_trace()\n    \tmessage = T('Hello World')\n    \tgluon.debug.stop_trace()\n    \treturn dict(message=message)\n\n    ```", "```py\ndef index():\n\tresponse.flash = T('Welcome to web2py')\n\timport gluon.contrib.qdb as qdb\n\tqdb.set_trace()\n\treturn dict(message='Hello World')\n\n```", "```py\nC:\\rad2py\\ide2py>python qdb.py\nqdb debugger fronted: waiting for connection to ('localhost', 6000)\n> C:\\web2py\\applications\\welcome\\controllers/default.py(19)\n-> \treturn dict(message=T('Hello World'))\n(Cmd) p response.flash\nWelcome to web2py!\n> C:\\web2py\\applications\\welcome\\controllers/default.py(19)\n-> \treturn dict(message=T('Hello World'))\n(Cmd) c\n\n```", "```py\n    cd /path/to/web2py\n\n    ```", "```py\n    chmod +x update_web2py.sh\n\n    ```", "```py\n# update-web2py.sh\n# 2009-12-16\n#\n# install in web2py/.. or web2py/ or web2py/scripts as update-\n# web2py.sh\n# make executable: chmod +x web2py.sh\n#\n# save a snapshot of current web2py/ as web2py/../web2py-version.\n# zip\n# download the current stable version of web2py\n# unzip downloaded version over web2py/\n\nTARGET=web2py\nif [ ! -d $TARGET ]; then\n\t# in case we're in web2py/\n\tif [ -f ../$TARGET/VERSION ]; then\n\t\tcd ..\n\t# in case we're in web2py/scripts\n\telif [ -f ../../$TARGET/VERSION ]; then\n\t\tcd ../..\n\tfi\nfi\nread a VERSION c < $TARGET/VERSION\nSAVE=$TARGET-$VERSION\nURL=http://www.web2py.com/examples/static/web2py_src.zip\n\nZIP=`basename $URL`\nSAVED=\"\"\n\n#### Save a zip archive of the current version,\n#### but don't overwrite a previous save of the same version.\n###\nif [ -f $SAVE.zip ]; then\n\techo \"Remove or rename $SAVE.zip first\" >&2\n\texit 1\nfi\nif [ -d $TARGET ]; then\n\techo -n \">>Save old version: \" >&2\n\tcat $TARGET/VERSION >&2\n\tzip -q -r $SAVE.zip $TARGET\n\tSAVED=$SAVE.zip\nfi\n###\n#### Download the new version.\n###\necho \">>Download latest web2py release:\" >&2\ncurl -O $URL\n###\n#### Unzip into web2py/\n###\nunzip -q -o $ZIP\nrm $ZIP\necho -n \">>New version: \" >&2\ncat $TARGET/VERSION >&2\nif [ \"$SAVED\" != \"\" ]; then\n\techo \">>Old version saved as $SAVED\"\nfi\n\n```", "```py\ncp applications/welcome/controllers/appadmin.py applications/app/\\\ncontrollers\ncp applications/welcome/views/appadmin.py applications/app/views\n\n```", "```py\ncp applications/welcome/views/generic.* applications/app/views\n\n```", "```py\ncp applications/welcome/views/web2py_ajax.html applications/app/views\ncp applications/welcome/static/js/web2py_ajax.js applications/app/\nstatic/\\js\n\n```", "```py\ncp -r applications/welcome/static/* applications/app/static/\n\n```", "```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\ndef _(db, \t\t\t\t\t\t\t# reference to DAL obj. page_key, # string to id page\n\tpage_subkey='', \t\t\t# string to is subpages\n\tinitial_hits=0, \t\t\t# hits initial value\n\ttablename=\"plugin_stats\"\t# table where to store data\n\t):\t\n\tfrom gluon.storage import Storage\n\ttable = db.define_table(tablename,\n\tField('page_key'),\n\t\tField('page_subkey'),\n\t\tField('hits', 'integer'))\n\trecord = table(page_key=page_key,page_subkey=page_subkey)\n\n\tif record:\n\t\tnew_hits = record.hits + 1\n\t\trecord.update_record(hits=new_hits)\n\t\thits = new_hits\n\n\telse:\n\t\ttable.insert(page_key=page_key,\n\t\t\tpage_subkey=page_subkey,\n\t\t\thits=initial_hits)\n\t\thits = initial_hits\n\n\ths = table.hits.sum()\n\ttotal = db(table.page_key==page_key).select(hs).first()(hs)\n\twidget = SPAN('Hits:',hits,'/',total)\n\treturn Storage(dict(hits=hits,total=total,widget=widget))\n\nplugin_stats = _(db,\n\tpage_key=request.env.path_info,\n\tpage_subkey=request.query_string)\n\n```", "```py\n{{=plugin_stats.widget}}\n\n```", "```py\nplugin_stats = _(db,\n\tpage_key=request.env.path_info,\n\tpage_subkey=request.query_string)\n\n```", "```py\npage_key=request.env.path_info\npage_subkey=request.query_string\n\n```", "```py\n<div class=\"box\">\n\ttest\n</div>\n\n```", "```py\n.box {\n\t-moz-border-radius: 5px; \t/* for Firefox */\n\t-webkit-border-radius: 5px; /* for Safari and Chrome */\n\tbackground-color: yellow;\n}\n\n```", "```py\n.box {\n\t-moz-border-radius: 5px; \t/* for Firefox */\n\t-webkit-border-radius: 5px; /* for Safari and Chrome */\n\tbackground-color: yellow;\n\tbackground-image: url(\"../images/border_radius?r=4&fg=249,249,249&\nbg=235,232,230\"); /*\n\tfor opera */\n}\n\n```", "```py\ndef border_radius():\n\timport re\n\tradius = int(request.vars.r or 5)\n\tcolor = request.vars.fg or 'rbg(249,249,249)'\n\tif re.match('\\d{3},\\d{3},\\d{3}',color):\n\t\tcolor = 'rgb(%s)' % color\n\t\tbg = request.vars.bg or 'rgb(235,232,230)'\n\tif re.match('\\d{3},\\d{3},\\d{3}',bg):\n\t\tbg = 'rgb(%s)'%bg\n\timport gluon.contenttype\n\tresponse.headers['Content-Type']= 'image/svg+xml;charset=utf-8'\n\treturn '''<?xml version=\"1.0\" ?><svg\n\t\t><rect fill=\"%s\" x=\"0\" y=\"0\"\n\t\twidth=\"100%%\" height=\"100%%\" /><rect ill=\"%s\" x=\"0\" y=\"0\"\n\t\twidth=\"100%%\" height=\"100%%\" rx=\"%spx\"\n\t\t/></svg>'''%(bg,color,radius)\n\n```", "```py\n    mount -t tmpfs tmpfs $folder_path -o rw,size=$size\n\n    ```", "```py\n    mkdir /var/tmp/myquery\n    mount -t tmpfs tmpfs /var/tmp/myquery -o rw,size=200M\n\n    ```", "```py\n    from gluon.cache import CacheOnDisk\n    cache.disk = CacheOnDisk(request,\n    \tfolder='/the/memory/mapped/folder')\n\n    ```", "```py\n    cache.disk = CacheOnDisk(request, folder='/var/tmp/myquery')\n\n    ```", "```py\n    db(...).select(cache=(cache.disk,3600)....)\n\n    ```", "```py\n    @cache(request.env.path_info, time_expire=5, cache_model=cache.\n    disk)\n    def cache_controller_on_disk():\n    \timport time\n    \tt = time.ctime()\n    \treturn dict(time=t, link=A('click to reload',\n    \t\t_href=request.url))\n\n    ```", "```py\n    #! /bin/bash\n    # written by Ivo Maintz\n    export myusername=mdipierro\n    export port=8000\n    export web2py_path=/home/mdipierro/web2py\n    if ! ` netcat -z localhost $port `\n    \tthen pgrep -flu $myusername web2py | cut -d -f1 | xargs kill >\n    /\\\n    dev/null 2>&1\n    \tchown $myusername: /var/log/web2py.log\n    \tsu $myusername -c 'cd $web2py_path && ./web2py.py -p $port -a\n    \\\n    password 2>&1 >> /var/log/web2py.log'\n    \tsleep 3\n    \tif ` netcat -z localhost $port `\n    \t\tthen echo \"web2py was restarted\"\n    \t\telse echo \"web2py could not be started!\"\n    \tfi\n    fi\n\n    ```", "```py\n    crontab -e\n\n    ```", "```py\n*/3 * * * * /root/bin/web2pytest.sh > /dev/null\n\n```", "```py\neasy_install mercurial\n\n```", "```py\n\"\"\" plugin_mercurial.py\n\tAuthor: \tHans Christian v. Stockhausen <hc at vst.io>\n\tDate: \t\t2010-12-09\n\"\"\"\n\nfrom mercurial import hgweb\n\ndef index():\n\t\"\"\" Controller to wrap hgweb\n\t\tYou can access this endpoint either from a browser in which case\n\t\t\tthe hgweb interface is displayed or from the mercurial client.\n\n\t\thg clone http://localhost:8000/app/plugin_mercurial/index app\n\t\"\"\"\n\n\t# HACK - hgweb expects the wsgi version to be reported in a tuple\n\twsgi_version = request.wsgi.environ['wsgi.version']\n\trequest.wsgi.environ['wsgi.version'] = (wsgi_version, 0)\n\n\t# map this controller's URL to the repository location and #instantiate app\n\tconfig = {URL():'applications/'+request.application}\n\twsgi_app = hgweb.hgwebdir(config)\n\n\t# invoke wsgi app and return results via web2py API\n\t# http://web2py.com/book/default/chapter/04#WSGI\n\titems = wsgi_app(request.wsgi.environ, request.wsgi.start_response)\n\tfor item in items:\n\t\tresponse.write(item, escape=False)\n\treturn response.body.getvalue()\n\n```", "```py\n[web]\nallow_push = *\npush_ssl = False\n\n```", "```py\nconfig = {\n\t'app/plugin_mercurial/index/repo1':'path/to/repo1',\n\t'app/plugin_mercurial/index/repo2':'path/to/repo2',\n\t'app/plugin_mercurial/index/repo3':'path/to/repo3'\n}\n\n```", "```py\n#!/usr/bin/env python\n# coding: utf8\n#\n# Author: \tHans Christian v. Stockhausen <hc at vst.io>\n# Date: \t2010-12-19\n# License: \tMIT\n#\n# TODO\n# - Check entity expansion requirements (e.g. &lt;) as per Pingback # spec page 7\n# - make try-except-finally in PingbackClient.ping robust\n\nimport httplib\nimport logging\nimport urllib2\nimport xmlrpclib\nfrom gluon.html import URL\n\n__author__ = 'H.C. v. Stockhausen <hc at vst.io>'\n__version__ = '0.1.1'\n\nfrom gluon import *\n\n# we2py specific constants\nTABLE_PINGBACKS = 'plugin_pingback_pingbacks'\n\n# Pingback protocol faults\nFAULT_GENERIC = 0\nFAULT_UNKNOWN_SOURCE = 16\nFAULT_NO_BACKLINK = 17\nFAULT_UNKNOWN_TARGET = 32\nFAULT_INVALID_TARGET = 33\nFAULT_ALREADY_REGISTERED = 48\nFAULT_ACCESS_DENIED = 49\nFAULT_UPSTREAM_ERROR = 50\n\ndef define_table_if_not_done(db):\n\tif not TABLE_PINGBACKS in db.tables:\n\t\tdb.define_table(TABLE_PINGBACKS,\n\t\t\tField('source', notnull=True),\n\t\t\tField('target', notnull=True),\n\t\t\tField('direction', notnull=True,\n\t\t\t\trequires=IS_IN_SET(('inbound', 'outbound'))),\n\t\t\tField('status'), # only relevant for outbound pingbacks\n\t\t  Field('datetime', 'datetime', default=current.request.now))\nclass PingbackServerError(Exception):\n\tpass\n\nclass PingbackClientError(Exception):\n\tpass\n\nclass PingbackServer(object):\n\t\" Handles incomming pingbacks from other sites. \"\n\ndef __init__(self, db, request, callback=None):\n\tself.db = db\n\tself.request = request\n\tself.callback = callback\n\tdefine_table_if_not_done(db)\n\ndef __call__(self):\n\t\"\"\"\n\t\tInvoked instead of the decorated function if the request is a\n\t\t\tpingback request from some external site.\n\t\"\"\"\n\n\ttry:\n\t\tself._process_request()\n\texcept PingbackServerError, e:\n\t\tresp = str(e.message)\n\telse:\n\t\tresp = 'Pingback registered'\n\treturn xmlrpclib.dumps((resp,))\n\ndef _process_request(self):\n\t\" Decode xmlrpc pingback request and process it \"\n\n\t(self.source, self.target), method = xmlrpclib.loads(\n\t\tself.request.body.read())\n\n\tif method != 'pingback.ping':\n\t\traise PingbackServerError(FAULT_GENERIC)\n\t\tself._check_duplicates()\n\t\tself._check_target()\n\t\tself._check_source()\n\n\tif self.callback:\n\t\tself.callback(self.source, self.target, self.html)\n\t\tself._store_pingback()\n\ndef _check_duplicates(self):\n\t\" Check db whether the pingback request was previously processed \"\n\tdb = self.db\n\ttable = db[TABLE_PINGBACKS]\n\tquery = (table.source==self.source) & (table.target==self.target)\n\tif db(query).select():\n\t\traise PingbackServerError(FAULT_ALREADY_REGISTERED)\n\ndef _check_target(self):\n\t\" Check that the target URI exists and supports pingbacks \"\n\n\ttry:\n\t\tpage = urllib2.urlopen(self.target)\n\texcept:\n\t\traise PingbackServerError(FAULT_UNKNOWN_TARGET)\n\tif not page.info().has_key('X-Pingback'):\n\t\traise PingbackServerError(FAULT_INVALID_TARGET)\n\ndef _check_source(self):\n\t\" Check that the source URI exists and contains the target link \"\n\n\ttry:\n\t\tpage = urllib2.urlopen(self.source)\n\n\texcept:\n\t\traise PingbackServerError(FAULT_UNKNOWN_SOURCE)\n\t\thtml = self.html = page.read()\n\t\ttarget = self.target\n\n\ttry:\n\t\timport BeautifulSoup2\n\t\tsoup = BeautifulSoup.BeautifulSoup(html)\n\t\texists = any([a.get('href')==target for a in soup.findAll('a')])\n\n\texcept ImportError:\n\t\timport re\n\t\tlogging.warn('plugin_pingback: Could not import BeautifulSoup,' \\\n\t\t\t' using re instead (higher risk of pingback spam).')\n\t\tpattern = r'<a.+href=[\\'\"]?%s[\\'\"]?.*>' % target\n\t\texists = re.search(pattern, html) != None\n\n\tif not exists:\n\t\traise PingbackServerError(FAULT_NO_BACKLINK)\n\ndef _store_pingback(self):\n\t\" Companion method for _check_duplicates to suppress duplicates. \"\n\n\tself.db[TABLE_PINGBACKS].insert(\n\t\tsource=self.source,\n\t\ttarget=self.target,\n\t\tdirection='inbound')\n\nclass PingbackClient(object):\n\t\" Notifies other sites about backlinks. \"\n\n\tdef __init__(self, db, source, targets, commit):\n\t\tself.db = db\n\t\tself.source = source\n\t\tself.targets = targets\n\t\tself.commit = commit\n\t\tdefine_table_if_not_done(db)\n\n\tdef ping(self):\n\t\tstatus = 'FIXME'\n\t\tdb = self.db\n\t\tsession = current.session\n\t\tresponse = current.response\n\t\ttable = db[TABLE_PINGBACKS]\n\t\ttargets = self.targets\n\n\t\tif isinstance(targets, str):\n\t\t\ttargets = [targets]\n\n\t\tfor target in targets:\n\t\t\tquery = (table.source==self.source) & (table.target==target)\n\n\t\tif not db(query).select(): # check for duplicates\n\t\t\tid_ = table.insert(\n\t\t\tsource=self.source,\n\t\t\ttarget=target,\n\t\t\tdirection='outbound')\n\n\t\tif self.commit:\n\t\t\tdb.commit()\n\n\t\ttry:\n\t\t\tserver_url = self._get_pingback_server(target)\n\n\t\texcept PingbackClientError, e:\n\t\t\tstatus = e.message\n\n\telse:\n\t\ttry:\n\t\t\tsession.forget()\n\t\t\tsession._unlock(response)\n\t\t\tserver = xmlrpclib.ServerProxy(server_url)\n\t\t\tstatus = server.pingback.ping(self.source, target)\n\n\t\texcept xmlrpclib.Fault, e:\n\t\t\tstatus = e\n\n\t\tfinally:\n\t\t\tdb(table.id==id_).update(status=status)\n\ndef _get_pingback_server(self, target):\n\t\" Try to find the target's pingback xmlrpc server address \"\n\n\t# first try to find the pingback server in the HTTP header\n\ttry:\n\t\thost, path = urllib2.splithost(urllib2.splittype(target)[1])\n\t\tconn = httplib.HTTPConnection(host)\n\t\tconn.request('HEAD', path)\n\t\tres = conn.getresponse()\n\t\tserver = dict(res.getheaders()).get('x-pingback')\n\n\texcept Exception, e:\n\t\traise PingbackClientError(e.message)\n\t\t# next try the header with urllib in case of redirects\n\n\tif not server:\n\t\tpage = urllib2.urlopen(target)\n\t\tserver = page.info().get('X-Pingback')\n\n\t# next search page body for link element\n\n\tif not server:\n\t\timport re\n\t\thtml = page.read()\n\t\t# pattern as per Pingback 1.0 specification, page 7\n\t\tpattern = r'<link rel=\"pingback\" href=(P<url>[^\"])\" ?/?>'\n\t\tmatch = re.search(pattern, html)\n\n\t\tif match:\n\t\t\tserver = match.groupdict()['url']\n\n\t\tif not server:\n\t\t\traise PingbackClientError('No pingback server found.')\n\t\treturn server\n\ndef listen(db, callback=None):\n\t\"\"\"\n\t\tDecorator for page controller functions that want to support\n\t\t\tpingbacks.\n\t\tThe optional callback parameter is a function with the following\n\t\t\tsignature.\n\t\tcallback(source_uri, target_uri, source_html)\n\t\"\"\"\n\n\trequest = current.request\n\tresponse = current.response\n\ndef pingback_request_decorator(_):\n\treturn PingbackServer(db, request, callback)\n\ndef standard_request_decorator(controller):\n\tdef wrapper():\n\t\t\" Add X-Pingback HTTP Header to decorated function's response \"\n\n\t\turl_base = '%(wsgi_url_scheme)s://%(http_host)s' % request.env\n\t\turl_path = URL(args=['x-pingback'])\n\t\tresponse.headers['X-Pingback'] = url_base + url_path\n\t\treturn controller()\n\treturn wrapper\n\n\tif request.args(0) in ('x-pingback', 'x_pingback'):\n\t\treturn pingback_request_decorator\n\n\telse:\n\t\treturn standard_request_decorator\n\ndef ping(db, source, targets, commit=True):\n\t\" Notify other sites of backlink \"\n\n\tclient = PingbackClient(db, source, targets, commit)\n\tclient.ping()\n\n```", "```py\nimport plugin_pingback as pingback\n\ndef on_pingback(source_url, target_url, source_html):\n\timport logging\n\tlogging.info('Got a pingback')\n\t# ...\n\n@pingback.listen(db,on_pingback)\ndef viewpost():\n\t\" Show post and comments \"\n\t# ...\n\treturn locals()\n\ndef addpost():\n\t\" Admin function to add new post \"\n\tpingback.ping(globals(),\n\tsource=new_post_url,\n\ttargets=[linked_to_post_url_A, linked_to_post_url_B]\n)\n# ...\nreturn locals()\n\n```", "```py\n    if request.user_agent().is_mobile: ...\n\n    ```", "```py\n    from gluon.contrib.user_agent_parser import mobilize\n    @mobilize\n    def index():\n    \treturn dict()\n\n    ```", "```py\neasy_install mobile.sniffer\neasy_install pywurfl\n\n```", "```py\n# coding: utf8\nimport os\n\ndef plugin_detect_mobile(switch_view=True):\n\tfrom mobile.sniffer.detect import detect_mobile_browser\n\tif detect_mobile_browser(request.env.http_user_agent):\n\t\tif switch_view:\n\t\t\tview = '%(controller)s/%(function)s.mobile.%(extension)s' %\n\t\t\t\trequest\n\t\tif os.path.exists(os.path.join(request.folder, 'views',view)):\n\t\t\tresponse.view = view\n\t\treturn True\n\treturn False\nplugin_detect_mobile()\n\n```", "```py\ndb.define_table('clients',\n\tField('name'),\n\tField('zipcode'),\n\tField('address'))\n\ndb.define_table('reports',\n\tField('report_type'),\n\tField('report_file_loc'),\n\tField('status'),\n\tField('submitted_on', 'datetime', default=request.now),\n\tField('completed_on', 'datetime', default=None))\n\n```", "```py\ndef request_report():\n\treport_type = request.vars.report_type\n\n# make sure its a valid report\nif report_type not in ['zipcode_breakdown', 'name_breakdown']:\n\traise HTTP(404)\n\n# add the request to the database to process\nreport_id = db.reports.insert(report_type=report_type,\n\tstatus='pending')\n\n# return something to uniquely identify this report in case\n# this request was made from Ajax.\nreturn dict(report_id=report_id)\n\n```", "```py\ndef process_reports():\n\tfrom collections import defaultdict\n\treports_to_process = db(db.reports.status == 'pending').select()\n\n\t# set selected reports to processing so they do not get picked up\n\t# a second time if the cron process happens to execute again while\n\t# this one is still executing.\n\tfor report in reports_to_process:\n\t\treport.update_record(status='processing')\n\n\tdb.commit()\n\n\tfor report in reports_to_process:\n\t\tif report.report_type == 'zipcode_breakdown':\n\t\t\t# get all zipcodes\n\t\t\tzipcodes = db(db.clients.zipcode != None).select()\n\n\t\t# if the key does not exist, create it with a value of 0\n\t\tzipcode_counts = defaultdict(int)\n\n\tfor zip in zipcodes:\n\t\tzipcode_counts[zip] += 1\n\n\t\t# black box function left up to the developer to implement\n\t\t# just assume it returns the filename of the report it created.\n\t\tfilename = make_pdf_report(zipcode_counts)\n\n\t\treport.update_record(status='done',\n\t\t\tcompleted_on=datetime.datetime.now(),\n\t\t\treport_file_loc=filename)\n\t\t# commit record so it reflects into the database immediately.\n\tdb.commit()\nprocess_reports()\n\n```", "```py\n* * * * * root *applications/dentist_app/cron/process_reports.py\n\n```", "```py\n<!doctype html>\n\n<head>\n\t<title>{{block title}}My Web2py App{{end}}</title>\n\n\t<script type=\"text/javascript\" src={{=URL(c=\"static/js\",\n\t\tf=\"jquery.js\")}}></script>\n\n\t{{block head}}{{end}}\n</head>\n\n<body>\n\t<h1>{{block body_title}}My Web2py App{{end}}</h1>\n\n\t<div id=\"main_content\">\n\t\t{{block main_content}}\n\t\t\t<p>Page has not been defined</p>\n\t\t{{end}}\n\t</div>\n</body>\n\n```", "```py\n{{extend \"layout.html\"}}\n\n{{block title}}Analysis Drilldown - {{super}}{{end}}\n\n{{block head}}\n\t<script>\n\t\t$(document).ready(function() {\n\t\t\t$('#drill_table').sort();\n\t });\n\t</script>\n{{end}}\n\n{{block main_content}}\n\t<table id=\"drill_table\">\n\t\t<tr>\n\t\t\t<td>ABC</td>\n\t\t\t<td>123</td>\n\t\t</tr>\n\t\t<tr>\n\t\t\t<td>EFG</td>\n\t\t\t<td>456</td>\n\t\t</tr>\n\t</table>\n{{end}}\n\n```", "```py\n<!doctype html>\n\n<head>\n\t<title>Analysis Drilldown - My Web2py App</title>\n\n\t<script type=\"text/javascript\" src=\"img/jquery.js\"></script>\n\n\t<script>\n\t\t$(document).ready(function() {\n\t\t\t$('#drill_table').sort();\n\t\t});\n\t</script>\n</head>\n\n<body>\n\t<h1>My Web2py App</h1>\n\n\t<div id=\"main_content\">\n\t\t<table id=\"drill_table\">\n\t\t\t<tr>\n\t\t\t\t<td>ABC</td>\n\t\t\t\t<td>123</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>EFG</td>\n\t\t\t\t<td>456</td>\n\t\t\t</tr>\n\t\t</table>\n\t</div>\n</body>\n\n```", "```py\nhg clone https://codegoogle.com/p/gui2py/.\n\n```", "```py\n#!/usr/bin/python\n# -*- coding: latin-1 -*-\n\nimport sys\n\n# import wxPython:\nimport wx\n\n# import gui2py support -wxHTML FORM handling- (change the path!)\nsys.path.append(r\"/home/reingart/gui2py\")\nfrom gui2py.form import EVT_FORM_SUBMIT\n\n# import web2py (change the path!)\nsys.path.append(r\"/home/reingart/web2py\")\nfrom gluon.dal import DAL, Field\nfrom gluon.sqlhtml import SQLFORM\nfrom gluon.html import INPUT, FORM, TABLE, TR, TD\nfrom gluon.validators import IS_NOT_EMPTY, IS_EXPR, IS_NOT_IN_DB,\nIS_IN_SET\nfrom gluon.storage import Storage\n\n# create DAL connection (and create DB if not exists)\ndb=DAL('sqlite://guitest.sqlite',folder=None)\n\n# define a table 'person' (create/aster as necessary)\nperson = db.define_table('person',\n\tField('name','string', length=100),\n\tField('sex','string', length=1),\n\tField('active','boolean', comment=\"check!\"),\n\tField('bio','text', comment=\"resume (CV)\"),\n)\n\n# set sample validator (do not allow empty nor duplicate names)\ndb.person.name.requires = [IS_NOT_EMPTY(),\n\tIS_NOT_IN_DB(db, 'person.name')]\n\ndb.person.sex.requires = IS_IN_SET({'M': 'Male', 'F': 'Female'})\n\n# create the wxPython GUI application instance:\napp = wx.App(False)\n\n# create a testing frame (wx \"window\"):\nf = wx.Frame(None, title=\"web2py/gui2py sample app\")\n\n# create the web2py FORM based on person table\nform = SQLFORM(db.person)\n\n# create the HTML \"browser\" window:\nhtml = wx.html.HtmlWindow(f, style= wx.html.HW_DEFAULT_STYLE |\n\twx.TAB_TRAVERSAL)\n# convert the web2py FORM to XML and display it\nhtml.SetPage(form.xml())\n\ndef on_form_submit(evt):\n\t\"Handle submit button user action\"\n\tglobal form\n\tprint \"Submitting to %s via %s with args %s\"% (evt.form.action,\n\t\tevt.form.method, evt.args)\n\tif form.accepts(evt.args, formname=None, keepvalues=False, dbio=False):\n\t\tprint \"accepted!\"\n\t# insert the record in the table (if dbio=True this is done by web2py):\n\tdb.person.insert(name=form.vars.name,\n\t\tsex=form.vars.sex,\n\t\tactive=form.vars.active,\n\t\tbio=form.vars.bio,\n\t\t)\n\t# don't forget to commit, we aren't inside a web2py controller!\n\tdb.commit()\n\telif form.errors:\n\t\tprint \"errors\", form.errors\n\t# refresh the form (show web2py errors)\n\thtml.SetPage(form.xml())\n\n# connect the FORM event with the HTML browser\nhtml.Bind(EVT_FORM_SUBMIT, on_form_submit)\n\n# show the main window\nf.Show()\n# start the wx main-loop to interact with the user\napp.MainLoop()\n\n```", "```py\npython my_gui2py_app.py\n\n```"]