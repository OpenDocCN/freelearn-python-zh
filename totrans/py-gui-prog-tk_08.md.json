["```py\nFunctional Requirements:\n  * Provide a UI for reading, updating, and appending \n    data to the CSV file\n  * ... \n```", "```py\nThe program does not need to:\n  * Allow deletion of data. \n```", "```py\n# models.py, in the CSVModel class\n  def get_all_records(self):\n    \"\"\"Read in all records from the CSV and return a list\"\"\"\n    if not self.file.exists():\n      return [] \n```", "```py\n with open(self.file, 'r') as fh:\n      csvreader = csv.DictReader(fh)\n      records = list(csvreader) \n```", "```py\n# models.py, inside CSVModel.get_all_records()\n    with open(self.file, 'r', encoding='utf-8') as fh:\n      csvreader = csv.DictReader(fh.readlines())\n      missing_fields = (\n        set(self.fields.keys()) - set(csvreader.fieldnames)\n      )\n      if len(missing_fields) > 0:\n        fields_string = ', '.join(missing_fields)\n        raise Exception(\n          f\"File is missing fields: {fields_string}\"\n        )\n      records = list(csvreader) \n```", "```py\n# models.py, inside CSVModel.get_all_records()\n    trues = ('true', 'yes', '1') \n```", "```py\n bool_fields = [\n      key for key, meta\n      in self.fields.items()\n      if meta['type'] == FT.boolean\n    ] \n```", "```py\n for record in records:\n      for key in bool_fields:\n        record[key] = record[key].lower() in trues \n```", "```py\n return records \n```", "```py\n# models.py, inside the CSVModel class\n  def get_record(self, rownum):\n    return self.get_all_records()[rownum] \n```", "```py\n# models.py, in the CSVModel class\n  def save_record(self, data, rownum=None):\n    \"\"\"Save a dict of data to the CSV file\"\"\" \n```", "```py\n if rownum is None:\n      # This is a new record\n      newfile = not self.file.exists()\n      with open(self.file, 'a') as fh:\n        csvwriter = csv.DictWriter(fh, fieldnames=self.fields.keys())\n        if newfile:\n          csvwriter.writeheader()\n        csvwriter.writerow(data) \n```", "```py\n# models.py, inside CSVModel.save_record()\n    else:\n      # This is an update\n      records = self.get_all_records()\n      records[rownum] = data\n      with open(self.file, 'w', encoding='utf-8') as fh:\n        csvwriter = csv.DictWriter(fh, fieldnames=self.fields.keys())\n        csvwriter.writeheader()\n        csvwriter.writerows(records) \n```", "```py\n# treeview_demo.py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom pathlib import Path\nroot = tk.Tk()\n# Code will go here\nroot.mainloop() \n```", "```py\npaths = Path('.').glob('**/*') \n```", "```py\ntv = ttk.Treeview(\n  root, columns=['size', 'modified'], selectmode='none'\n) \n```", "```py\ntv.heading('#0', text='Name')\ntv.heading('size', text='Size', anchor='center')\ntv.heading('modified', text='Modified', anchor='e') \n```", "```py\ntv.column('#0', stretch=True)\ntv.column('size', width=200) \n```", "```py\ntv.pack(expand=True, fill='both') \n```", "```py\nmytreeview.insert(\n  parent, 'end', iid='item1',\n  text='My Item 1', values=['12', '42']\n) \n```", "```py\nfor path in paths:\n  meta = path.stat()\n  parent = str(path.parent)\n  if parent == '.':\n    parent = '' \n```", "```py\n tv.insert(\n    parent,\n    'end',\n    iid=str(path),\n    text=str(path.name),\n    values=[meta.st_size, meta.st_mtime]\n  ) \n```", "```py\ndef sort(tv, col, parent='', reverse=False): \n```", "```py\n sort_index = list()\n  for iid in tv.get_children(parent):\n    sort_value = tv.set(iid, col) if col != '#0' else iid\n    sort_index.append((sort_value, iid)) \n```", "```py\n sort_index.sort(reverse=reverse) \n```", "```py\n for index, (_, iid) in enumerate(sort_index):\n    tv.move(iid, parent, index) \n```", "```py\n for index, (_, iid) in enumerate(sort_index):\n    tv.move(iid, parent, index)\n    **sort(tv, col, parent=iid, reverse=reverse)** \n```", "```py\nfor cid in ['#0', 'size', 'modified']:\n  tv.heading(cid, command=lambda col=cid: sort(tv, col)) \n```", "```py\n if parent == '':\n    tv.heading(\n      col,\n      command=lambda col=col: sort(tv, col, reverse=not reverse)\n    ) \n```", "```py\n# treeview_demo.py\nstatus = tk.StringVar()\ntk.Label(root, textvariable=status).pack(side=tk.BOTTOM) \n```", "```py\ndef show_directory_stats(*_):\n  clicked_path = Path(tv.focus())\n  num_children = len(list(clicked_path.iterdir()))\n  status.set(\n    f'Directory: {clicked_path.name}, {num_children} children'\n  ) \n```", "```py\ntv.bind('<<TreeviewOpen>>', show_directory_stats)\ntv.bind('<<TreeviewClose>>', lambda _: status.set('')) \n```", "```py\n# views.py, at the end of the file\nclass RecordList(tk.Frame):\n  \"\"\"Display for CSV file contents\"\"\" \n```", "```py\n# views.py, inside the RecordList class\n  column_defs = {\n    '#0': {'label': 'Row', 'anchor': tk.W},\n    'Date': {'label': 'Date', 'width': 150, 'stretch': True},\n    'Time': {'label': 'Time'},\n    'Lab': {'label': 'Lab', 'width': 40},\n    'Plot': {'label': 'Plot', 'width': 80}\n  }\n  default_width = 100\n  default_minwidth = 10\n  default_anchor = tk.CENTER \n```", "```py\n# views.py, inside the RecordList class\ndef __init__(self, parent, *args, **kwargs):\n  super().__init__(parent, *args, **kwargs)\n  self.columnconfigure(0, weight=1)\n  self.rowconfigure(0, weight=1) \n```", "```py\n# views.py, inside the RecordList.__init__() method\n  self.treeview = ttk.Treeview(\n    self,\n    columns=list(self.column_defs.keys())[1:],\n    selectmode='browse'\n  )\n  self.treeview.grid(row=0, column=0, sticky='NSEW') \n```", "```py\n for name, definition in self.column_defs.items():\n      label = definition.get('label', '')\n      anchor = definition.get('anchor', self.default_anchor)\n      minwidth = definition.get('minwidth', self.default_minwidth)\n      width = definition.get('width', self.default_width)\n      stretch = definition.get('stretch', False)\n      self.treeview.heading(name, text=label, anchor=anchor)\n      self.treeview.column(\n        name, anchor=anchor, minwidth=minwidth,\n        width=width, stretch=stretch\n      ) \n```", "```py\n# views.py, in RecordList.__init__()\n    self.treeview.bind('<Double-1>', self._on_open_record)\n    self.treeview.bind('<Return>', self._on_open_record) \n```", "```py\n# views.py, in the RecordList class\n  def _on_open_record(self, *args):\n    self.event_generate('<<OpenRecord>>') \n```", "```py\n @property\n  def selected_id(self):\n    selection = self.treeview.selection()\n    return int(selection[0]) if selection else None \n```", "```py\n# views.py , in RecordList.__init__()\n    self.scrollbar = ttk.Scrollbar(\n      self,\n      orient=tk.VERTICAL,\n      command=self.treeview.yview\n    ) \n```", "```py\n self.treeview.configure(yscrollcommand=self.scrollbar.set) \n```", "```py\n self.scrollbar.grid(row=0, column=1, sticky='NSW') \n```", "```py\n# views.py, in the RecordList class\n  def populate(self, rows):\n    \"\"\"Clear the treeview and write the supplied data rows to it.\"\"\" \n```", "```py\n# views.py, in RecordList.populate()\n    for row in self.treeview.get_children():\n      self.treeview.delete(row) \n```", "```py\n cids = self.treeview.cget('columns')\n    for rownum, rowdata in enumerate(rows):\n      values = [rowdata[cid] for cid in cids]\n      self.treeview.insert('', 'end', iid=str(rownum),\n         text=str(rownum), values=values) \n```", "```py\n if len(rows) > 0:\n      self.treeview.focus_set()\n      self.treeview.selection_set('0')\n      self.treeview.focus('0') \n```", "```py\n# views.py, in DataRecordForm.__init__()\n    self.current_record = None \n```", "```py\n# views.py, in DataRecordForm.__init__()\n    self.record_label = ttk.Label(self)\n    self.record_label.grid(row=0, column=0) \n```", "```py\n# views.py, in DataRecordForm.__init__()\n    w.LabelInput(\n      self, \"Notes\", field_spec=fields['Notes'],\n      var=self._vars['Notes'], input_args={\"width\": 85, \"height\": 10}\n    ).grid(sticky=\"nsew\", **row=****4**, column=0, padx=10, pady=10)\n    buttons = tk.Frame(self)\n    buttons.grid(sticky=tk.W + tk.E, **row=****5**) \n```", "```py\n def load_record(self, rownum, data=None):\n    self.current_record = rownum\n    if rownum is None:\n      self.reset()\n      self.record_label.config(text='New Record') \n```", "```py\n else:\n      self.record_label.config(text=f'Record #{rownum}')\n      for key, var in self._vars.items():\n        var.set(data.get(key, ''))\n        try:\n          var.label_widget.input.trigger_focusout_validation()\n        except AttributeError:\n          pass \n```", "```py\n# notebook_demo.py\nimport tkinter as tk\nfrom tkinter import ttk\nroot = tk.Tk()\nnotebook = ttk.Notebook(root)\nnotebook.grid() \n```", "```py\nbanana_facts = [\n  'Banana trees are of the genus Musa.',\n  'Bananas are technically berries.',\n  'All bananas contain small amounts of radioactive potassium.'\n  'Bananas are used in paper and textile manufacturing.'\n]\nplantain_facts = [\n  'Plantains are also of genus Musa.',\n  'Plantains are starchier and less sweet than bananas',\n  'Plantains are called \"Cooking Bananas\" since they are'\n  ' rarely eaten raw.'\n]\nb_label = ttk.Label(notebook, text='\\n\\n'.join(banana_facts))\np_label = ttk.Label(notebook, text='\\n\\n'.join(plantain_facts)) \n```", "```py\nnotebook.add(b_label, text='Bananas', padding=20)\nnotebook.add(p_label, text='Plantains', padding=20) \n```", "```py\nnotebook.insert(1, p_label, text='Plantains', padding=20) \n```", "```py\nnotebook.tab(0, underline=0)\nnotebook.tab(1, underline=0) \n```", "```py\nnotebook.enable_traversal() \n```", "```py\nnotebook.select(0) \n```", "```py\nnotebook.select(p_label) \n```", "```py\n# application.py, in Application.__init__()\n    self.notebook = ttk.Notebook(self)\n    self.notebook.enable_traversal()\n    self.notebook.grid(row=1, padx=10, sticky='NSEW') \n```", "```py\n self.recordform = v.DataRecordForm(\n      self, \n      self.model, \n      self.settings\n    )\n    self.recordform.bind('<<SaveRecord>>', self._on_save)\n    **self.notebook.add(self.recordform, text=****'Entry Form'****)** \n```", "```py\n self.recordlist = v.RecordList(self)\n    self.notebook.insert(0, self.recordlist, text='Records') \n```", "```py\n# application.py, in the Application class\n  def _show_recordlist(self, *_):\n    self.notebook.select(self.recordlist) \n```", "```py\n# application.py, in Application.__init__()\n    event_callbacks = {\n      #...\n      '<<ShowRecordlist>>': self._show_recordlist\n    } \n```", "```py\n# application.py, at the end of Application.__init__()\n    self._show_recordlist() \n```", "```py\n def _populate_recordlist(self):\n    rows = self.model.get_all_records()\n    self.recordlist.populate(rows) \n```", "```py\n# application.py, in the Application class\n  def _populate_recordlist(self):\n    try:\n      rows = self.model.get_all_records()\n    except Exception as e:\n      messagebox.showerror(\n        title='Error',\n        message='Problem reading file',\n        detail=str(e)\n      )\n    else:\n      self.recordlist.populate(rows) \n```", "```py\n def _on_file_select(self, *_):\n    # ...\n    if filename:\n      self.model = m.CSVModel(filename=filename)\n      **self._populate_recordlist()** \n```", "```py\n# application.py, in Application.__init__()\n    self.recordlist = v.RecordList(self)\n    self.notebook.insert(0, self.recordlist, text='Records')\n    **self._populate_recordlist()** \n```", "```py\n# application.py, in Application._on_save()\n  def _on_save(self, *_):\n    #...\n    self.recordform.reset()\n    **self._populate_recordlist()** \n```", "```py\n# application.py, in the Application class\n  def _new_record(self, *_):\n    self.recordform.load_record(None)\n    self.notebook.select(self.recordform) \n```", "```py\n# application.py, in Application.__init__()\n    event_callbacks = {\n      #...\n      **'<<NewRecord>>'****: self._new_record**\n    } \n```", "```py\n# application.py, in the Application class\n  def _open_record(self, *_):\n    \"\"\"Open the selected id from recordlist in the recordform\"\"\"\n    rowkey = self.recordlist.selected_id\n    try:\n      record = self.model.get_record(rowkey)\n    except Exception as e:\n      messagebox.showerror(\n        title='Error', message='Problem reading file', detail=str(e)\n      )\n    else:\n      self.recordform.load_record(rowkey, record)\n      self.notebook.select(self.recordform) \n```", "```py\n# application.py, inside Application.__init__()\n    self.notebook.insert(0, self.recordlist, text='Records')\n    self._populate_recordlist()\n    **self.recordlist.bind(****'<<OpenRecord>>'****, self._open_record)** \n```", "```py\n# application.py, inside Application._on_save()\n    data = self.recordform.get()\n    **rownum = self.recordform.current_record**\n    **self.model.save_record(data, rownum)** \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    go_menu = tk.Menu(self, tearoff=False)\n    go_menu.add_command(\n      label=\"Record List\",\n      command=self._event('<<ShowRecordlist>>')\n    )\n    go_menu.add_command(\n      label=\"New Record\",\n      command=self._event('<<NewRecord>>')\n    ) \n```", "```py\n# mainmenu.py, at the end of MainMenu.__init__()\n    self.add_cascade(label='File', menu=file_menu)\n    **self.add_cascade(label=****'Go'****, menu=go_menu)**\n    self.add_cascade(label='Options', menu=options_menu) \n```"]