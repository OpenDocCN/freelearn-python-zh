- en: <st c="0">11</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3">Implementing Order and Item Models</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="38">In the previous chapter, we implemented the shopping cart system
    and allowed users to add movies to the cart.</st> <st c="149">To enable users
    to purchase movies, we need to store additional information in the database, specifically
    to store order and item information.</st> <st c="292">In this chapter, we will
    implement the order and item models and establish a connection</st> <st c="380">between
    them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="393">In this chapter, we will be covering the</st> <st c="435">following
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="452">Analyzing</st> <st c="463">store invoices</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="477">Creating the</st> <st c="491">order model</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="502">Creating the</st> <st c="516">item model</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="526">Recapping the Movies Store</st> <st c="554">class diagram</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="567">By the end of the chapter, we will have the complete structure for
    storing purchase information.</st> <st c="665">Additionally, we will recap the
    class diagram and examine the relationship between the Django models and the classes
    in the</st> <st c="789">class diagram.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="803">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="826">In this chapter, we will be using</st> **<st c="861">Python 3.10+</st>**<st
    c="873">. Additionally, we will be using the</st> **<st c="910">VS Code</st>**
    <st c="917">editor in this book, which you can download</st> <st c="962">from</st>
    [<st c="967">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="997">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="998">The code for this chapter is located</st> <st c="1036">at</st> [<st
    c="1039">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter11/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter11/moviesstore)<st
    c="1147">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1148">The CiA video for this chapter can be found</st> <st c="1193">at</st>
    [<st c="1196">https://packt.link/eQzNG</st>](https://packt.link/eQzNG)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1220">Analyzing store invoices</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1245">If you purchase something in a</st> <st c="1277">modern store,
    it is almost certain that you will receive an invoice.</st> <st c="1346">Different
    stores manage invoices with varying information, but in most cases, you will find
    the same essential information.</st> *<st c="1470">Figure 11</st>**<st c="1479">.1</st>*
    <st c="1481">shows a simple invoice.</st> <st c="1506">We will use this as a blueprint
    to design and implement the Django models that we will use to store the</st> <st
    c="1610">purchase information.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Example of a simple invoice](img/B22457_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="1768">Figure 11.1 – Example of a simple invoice</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1809">Let’s analyze the invoice shown in</st> *<st c="1845">Figure 11</st>**<st
    c="1854">.1</st>* <st c="1856">to understand the kind of information we need to
    store for purchase (based on orders</st> <st c="1942">and items).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1953">We must store the following information for</st> <st c="1998">the
    order:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="2008">ID</st>**<st c="2011">: To uniquely identify each order.</st>
    <st c="2047">In the previous figure, it is represented</st> <st c="2089">by</st>
    **<st c="2092">#1</st>**<st c="2094">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2095">Date</st>**<st c="2100">: To identify the date on which the
    order was completed.</st> <st c="2158">In the previous figure, it is represented</st>
    <st c="2200">by</st> **<st c="2203">2024-04-22</st>**<st c="2213">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2214">Total</st>**<st c="2220">: To identify the total amount of the
    order.</st> <st c="2266">In the previous figure, it is represented</st> <st c="2308">by</st>
    **<st c="2311">$50</st>**<st c="2314">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2315">User</st>**<st c="2320">: To identify the user who made the
    purchase.</st> <st c="2367">In the previous figure, it is represented by</st>
    **<st c="2412">1 -</st>** **<st c="2416">daniel</st>**<st c="2422">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2423">An order is composed of items, represented as the internal table
    in</st> *<st c="2492">Figure 11</st>**<st c="2501">.1</st>*<st c="2503">. We must
    store the following information for</st> <st c="2549">each item:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="2559">ID</st>**<st c="2562">: To uniquely identify each item.</st>
    <st c="2597">In the previous figure, the ID of the first item is represented</st>
    <st c="2661">by</st> **<st c="2664">1</st>**<st c="2665">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2666">Quantity</st>**<st c="2675">: To specify the quantity of the
    movie the user wants to purchase.</st> <st c="2743">In the previous example, the
    quantity of the first item is represented</st> <st c="2814">by</st> **<st c="2817">2</st>**<st
    c="2818">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2819">Price</st>**<st c="2825">: To specify the</st> <st c="2842">price
    of the movie at which the user purchased the item.</st> <st c="2900">In the previous
    example, the price of the first item is represented</st> <st c="2968">by</st>
    **<st c="2971">12</st>**<st c="2973">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="2974">Movie</st>**<st c="2980">: To specify the movie to which the
    item is linked.</st> <st c="3033">In the previous example, the linked movie of
    the first item is represented by</st> **<st c="3111">1 -</st>** **<st c="3115">Inception</st>**<st
    c="3124">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3125">Order</st>**<st c="3131">: To specify the order to which the
    item is linked.</st> <st c="3184">In the previous example, the linked order of
    the first item is represented</st> <st c="3259">by</st> **<st c="3262">#1</st>**<st
    c="3264">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3265">Now that we have grasped the functioning of these simple invoices,
    let’s proceed to create the</st> <st c="3361">appropriate models.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3380">Creating the order model</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3405">To store the purchase information, we</st> <st c="3444">need to
    start by creating an Order Django model.</st> <st c="3493">The following are the
    three steps for storing the</st> <st c="3543">purchase information:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3564">Create the</st> <st c="3576">Order model.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="3588">Apply migrations.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="3606">Add the order model to the</st> <st c="3634">admin panel.</st>
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="3646">Let’s go through them</st> <st c="3669">in detail.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3679">Creating the Order model</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3704">We will start creating the Order</st> <st c="3737">model.</st>
    <st c="3745">We will create this model inside the</st> <st c="3782">cart app.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3791">In</st> `<st c="3795">/cart/models.py</st>` <st c="3810">file,
    add the following</st> <st c="3835">in</st> *<st c="3838">bold</st>*<st c="3842">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4186">Let’s explain the</st> <st c="4205">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4219">We import the</st> `<st c="4234">User</st>` <st c="4238">model
    from Django’s</st> `<st c="4259">django.contrib.auth.models</st>` <st c="4285">module.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4293">We define a Python class named</st> `<st c="4325">Order</st>`<st
    c="4330">, which inherits from</st> `<st c="4352">models.Model</st>`<st c="4364">.
    This means that</st> `<st c="4382">Order</st>` <st c="4387">is a Django</st> <st
    c="4400">model class.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4412">Inside the</st> `<st c="4424">Order</st>` <st c="4429">class, we
    define</st> <st c="4447">several fields:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4462">id</st>`<st c="4465">: This is an</st> `<st c="4479">AutoField</st>`<st
    c="4488">, which automatically increments its value for each new record added
    to the database.</st> <st c="4574">The</st> `<st c="4578">primary_key=True</st>`
    <st c="4594">parameter specifies that this field is the primary key for the table,
    uniquely identifying</st> <st c="4686">each record.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4698">total</st>`<st c="4704">: This is a</st> `<st c="4717">IntegerField</st>`<st
    c="4729">, which represents the total amount of the order.</st> <st c="4779">It
    stores</st> <st c="4789">integer values.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4804">date</st>`<st c="4809">: This is a</st> `<st c="4822">DateTimeField</st>`
    <st c="4835">, which represents the date and time when the order was created.</st>
    `<st c="4900">auto_now_add=True</st>` <st c="4917">ensures that the date and time
    are automatically set to the current date and time when the order</st> <st c="5015">is
    created.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5026">user</st>`<st c="5031">: This is a foreign key relationship to
    the</st> `<st c="5076">User</st>` <st c="5080">model, which establishes a many-to-one
    relationship between orders and users.</st> <st c="5159">It means that each order
    is associated with a single user, and each user can have multiple orders.</st>
    `<st c="5258">on_delete=models.CASCADE</st>` <st c="5282">specifies that if the
    related user is deleted, the associated orders will also</st> <st c="5362">be
    deleted.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5373">__str__</st>` <st c="5381">is a method that</st> <st c="5398">returns
    a string representation of the order.</st> <st c="5445">In this case, it returns
    a string composed of the order ID and the username of the user who placed</st>
    <st c="5544">the order.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5554">Applying migrations</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5574">Now that we have</st> <st c="5592">created the</st> `<st c="5604">Order</st>`
    <st c="5609">model, let’s update our database by running one of the following
    commands, depending on your</st> <st c="5703">operating system:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5720">For macOS,</st> <st c="5732">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="5800">For Windows,</st> <st c="5814">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="5880">Now, you should see something</st> <st c="5911">like this:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Applying the order migration](img/B22457_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6015">Figure 11.2 – Applying the order migration</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6057">Adding the order model to the admin panel</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6099">To add the</st> `<st c="6111">Order</st>` <st c="6116">model to
    admin, go to</st> `<st c="6139">/cart/admin.py</st>` <st c="6153">and register
    it by adding</st> <st c="6179">the following</st> <st c="6194">in</st> *<st c="6197">bold</st>*<st
    c="6201">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: from django.db import models
  prefs: []
  type: TYPE_NORMAL
- en: 'from django.contrib.auth.models import User <st c="7329">from movies.models
    import Movie</st> class Order(models.Model):'
  prefs: []
  type: TYPE_NORMAL
- en: … <st c="7390">class Item(models.Model):</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="7415">id = models.AutoField(primary_key=True)</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7455">price = models.IntegerField()</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7485">quantity = models.IntegerField()</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7518">order = models.ForeignKey(Order,</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7551">on_delete=models.CASCADE)</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7577">movie = models.ForeignKey(Movie,</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7610">on_delete=models.CASCADE)</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7636">def __str__(self):</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="7655">return str(self.id) + '' - '' + self.movie.name</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8981">python3 manage.py makemigrations</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="9014">python3 manage.py migrate</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="9063">python manage.py makemigrations</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="9095">python manage.py migrate</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: from django.contrib import admin
  prefs: []
  type: TYPE_NORMAL
- en: 'from .models import Order<st c="9527">, Item</st> admin.site.register(Order)
    <st c="9675">/admin</st>. The item model will now appear (as shown in *<st c="9727">Figure
    11</st>**<st c="9736">.5</st>*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Admin page with items available](img/B22457_11_5.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="10038">Figure 11.5 – Admin page with items available</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10083">Now we have completed the data</st> <st c="10115">structure required
    to make purchases.</st> <st c="10153">But before proceeding with the purchase
    process, let’s recap how our models relate to the project’s</st> <st c="10253">class
    diagram.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10267">Recapping the Movies Store class diagram</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="10308">The class diagram of the Movies Store that we designed in</st>
    [*<st c="10367">Chapter 1</st>*](B22457_01.xhtml#_idTextAnchor014) <st c="10376">served
    as a blueprint for designing the</st> <st c="10417">code of the Movies Store.</st>
    <st c="10443">We have already implemented all the models required to complete
    the project code.</st> <st c="10525">So, let’s quickly recap this relationship
    between models</st> <st c="10582">and classes.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="10594">Figure 11</st>**<st c="10604">.6</st>* <st c="10606">shows the
    class diagram, highlighting the locations where we implemented the corresponding</st>
    <st c="10698">Django models:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Movies Store class diagram, highlighting model locations](img/B22457_11_6.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="11118">Figure 11.6 – Movies Store class diagram, highlighting model locations</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="11188">Let’s analyze the</st> <st c="11207">previous figure:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="11223">The</st> `<st c="11228">Movie</st>` <st c="11233">and</st> `<st
    c="11238">Review</st>` <st c="11244">models were implemented inside the</st> `<st
    c="11280">movies</st>` <st c="11286">app.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11291">The</st> `<st c="11296">Order</st>` <st c="11301">and</st> `<st
    c="11306">Item</st>` <st c="11310">models were implemented inside the</st> `<st
    c="11346">cart</st>` <st c="11350">app.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11355">The</st> `<st c="11360">User</st>` <st c="11364">model was not</st>
    <st c="11378">implemented.</st> <st c="11392">Instead, we took advantage of the
    provided Django built-in model located in the</st> `<st c="11472">admin.contrib.auth</st>`
    <st c="11490">app.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11495">Finally, let’s review how a specific class relates to a model
    (</st>*<st c="11559">Figure 11</st>**<st c="11569">.7</st>*<st c="11571">):</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="11582">Review</st>` <st c="11588">class name became a</st> `<st c="11609">Review</st>`
    <st c="11615">Python class.</st> <st c="11630">We inherited from</st> `<st c="11648">models.Model</st>`
    <st c="11660">to define it as a Django</st> <st c="11686">model class.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="11706">id</st>`<st c="11708">,</st> `<st c="11710">comment</st>`<st
    c="11717">, and</st> `<st c="11723">date</st>` <st c="11727">class attributes
    became Python class attributes.</st> <st c="11777">We utilized the</st> `<st c="11793">models</st>`
    <st c="11799">module to utilize available field types similar to those defined
    in the</st> <st c="11872">class diagram.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="11919">Review</st>` <st c="11925">and</st> `<st c="11930">Movie</st>`
    <st c="11935">classes became a Python class attribute.</st> <st c="11977">We utilized
    the</st> `<st c="11993">models.ForeignKey</st>` <st c="12010">method to define
    a foreign key relationship between the</st> <st c="12067">two models.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="12111">Review</st>` <st c="12117">and</st> `<st c="12122">User</st>`
    <st c="12126">classes became a Python class attribute.</st> <st c="12168">We utilized
    the</st> `<st c="12184">models.ForeignKey</st>` <st c="12201">method to define
    a foreign key relationship</st> <st c="12246">between the</st> <st c="12258">two
    models.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Relationship between a class and a model](img/B22457_11_7.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="12531">Figure 11.7 – Relationship between a class and a model</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="12585">We have completed all the connections between the class diagram
    and the Django models.</st> <st c="12673">Now, we are ready to enable users to</st>
    <st c="12710">make purchases.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="12725">Summary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="12733">In this chapter, we learned how simple invoices work.</st> <st
    c="12788">We created a couple of models (</st>`<st c="12819">Order</st>` <st c="12825">and</st>
    `<st c="12830">Item</st>`<st c="12834">).</st> <st c="12838">These models will
    allow us to store information about the users’ purchases.</st> <st c="12914">We
    recapitulated the process of creating Django models and applying migrations.</st>
    <st c="12994">In the end, we reviewed how class diagrams served as a blueprint
    to create our project models.</st> <st c="13089">In the next chapter, we will
    implement purchase functionality and allow users to view</st> <st c="13175">their
    orders.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
