- en: <st c="0">3</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Designing a Base Template</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="27">Django projects can consist of dozens or hundreds of template files.</st>
    <st c="97">Sometimes, these files can contain duplicated HTML and CSS code, which
    affects the project’s maintainability.</st> <st c="207">In this chapter, we introduce
    the concept of</st> **<st c="252">base templates</st>** <st c="266">and how they
    can be used to reduce duplicated template code.</st> <st c="328">We will also
    improve the look and feel of our application by designing a base template that
    includes a header and a footer, as well as links to</st> <st c="472">different
    pages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="488">In this chapter, we will be covering the</st> <st c="530">following
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="547">Creating a base template</st> <st c="573">with Bootstrap</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="587">Updating the</st> **<st c="601">Home</st>** <st c="605">page to
    use the</st> <st c="622">base template</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="635">Updating the</st> **<st c="649">About</st>** <st c="654">page to
    use the</st> <st c="671">base template</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="684">Adding a</st> <st c="694">header section</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="708">Adding a</st> <st c="718">footer section</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="732">In the end, you will learn the importance of base templates and
    how they can be used to reduce duplicated code and improve the look and feel of
    your</st> <st c="882">web applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="899">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="922">In this chapter, we will be using</st> **<st c="957">Python 3.10+</st>**<st
    c="969">. Additionally, we will be using the</st> **<st c="1006">VS Code</st>**
    <st c="1013">editor in this book, which you can download</st> <st c="1058">from</st>
    <st c="1063">https://code.visualstudio.com/</st><st c="1093">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1094">The code for this chapter is located</st> <st c="1132">at</st>
    <st c="1135">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter03/moviesstore</st><st
    c="1243">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1244">The CiA video for this chapter can be found</st> <st c="1289">at</st>
    [<st c="1292">https://packt.link/psU29</st>](https://packt.link/psU29)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1316">Creating a base template with Bootstrap</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1356">We currently</st> <st c="1370">have two templates (</st>`<st c="1390">index.html</st>`
    <st c="1401">and</st> `<st c="1406">about.html</st>`<st c="1416">) that duplicate
    the structure of the site and some HTML tags.</st> <st c="1480">Currently, it
    doesn’t seem like a serious issue.</st> <st c="1529">However, once the application
    starts growing, we will have a lot of duplicated HTML code</st> <st c="1618">spread
    over dozens of template files.</st> <st c="1656">To avoid this issue, we will
    create a base template that contains the main structure of the site over a single
    file, and the other templates will extend this</st> <st c="1814">base template.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1828">Introducing Bootstrap</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**<st c="1850">Bootstrap</st>** <st c="1860">is the most popular CSS framework
    for developing responsive and mobile-first websites (see</st> *<st c="1952">Figure
    3</st>**<st c="1960">.1</st>*<st c="1962">).</st> <st c="1966">Bootstrap</st>
    <st c="1976">provides a set of HTML, CSS, and JavaScript components and utilities
    that developers can use to build modern user interfaces quickly.</st> <st c="2110">For
    Django projects, a developer can design the user interface from scratch if they
    want to.</st> <st c="2203">However, as this book is not about user interfaces,
    we will take advantage of CSS frameworks (such as Bootstrap) and use some of their
    elements and examples to create something that looks professional.</st> <st c="2405">You
    can find out more about Bootstrap</st> <st c="2443">at</st> [<st c="2446">https://getbootstrap.com/</st>](https://getbootstrap.com/)<st
    c="2471">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – The Bootstrap site](img/B22457_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="2773">Figure 3.1 – The Bootstrap site</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2804">Introducing Django template language (DTL)</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2847">We will build the base template as a combination of Bootstrap,
    HTML, CSS, JavaScript,</st> <st c="2934">and</st> **<st c="2938">DTL</st>**<st
    c="2941">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2942">DTL is a templating language used within the</st> <st c="2987">Django
    web framework for building dynamic web pages (</st>[<st c="3041">https://docs.djangoproject.com/en/5.0/topics/templates/</st>](https://docs.djangoproject.com/en/5.0/topics/templates/)<st
    c="3097">).</st> <st c="3101">It is designed to separate the presentation layer
    from the business logic of an application, promoting clean and</st> <st c="3214">maintainable
    code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3232">Some Django template language key features</st> <st c="3275">include</st>
    <st c="3284">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="3417">{{</st>` `<st c="3420">variable }}</st>`<st c="3431">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3538">{% %}</st>`<st c="3543">. Template tags allow for loops, conditionals,
    and other control flow statements.</st> <st c="3625">For example,</st> `<st c="3638">{%
    if condition %} ...</st> <st c="3661">{%</st>` `<st c="3664">endif %}</st>`<st
    c="3672">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3721">{# #}</st>` <st c="3726">and are not rendered in the final</st>
    <st c="3761">output HTML.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="3773">Template inheritance</st>**<st c="3794">: Django templates support
    inheritance, allowing for the creation of base templates that define the overall
    structure and layout of a page, with child templates inheriting and overriding
    specific blocks</st> <st c="3998">or sections.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4010">Creating a base template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4035">The base template will serve as a “global” template (which will
    be used across all pages and apps).</st> <st c="4136">So, we will add it to our
    main</st> <st c="4166">project folder.</st> <st c="4183">In the</st> `<st c="4190">moviesstore/</st>`
    <st c="4202">folder (the directory that contains the</st> `<st c="4243">settings.py</st>`
    <st c="4254">file), create a folder</st> <st c="4277">called</st> `<st c="4285">templates</st>`<st
    c="4294">. In that folder, create a file called</st> `<st c="4333">base.html</st>`<st
    c="4342">. For now, fill it in with</st> <st c="4369">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5160">The previous file contains a base HTML structure for our site.</st>
    <st c="5224">Let’s review some important aspects of the</st> <st c="5267">previous
    code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5281">The</st> `<st c="5286">head</st>` <st c="5290">tag contains the</st>
    `<st c="5308">title</st>` <st c="5313">tag, which uses DTL double curly braces
    to display the information of a variable (</st>`<st c="5396">{{ template_data.title
    }}</st>`<st c="5422">).</st> <st c="5426">Later, we will see how</st> <st c="5449">to
    pass that variable from views to this template.</st> <st c="5500">It also contains
    some links and a script to include Bootstrap and some fonts for our site.</st>
    <st c="5591">We take some of those links from this</st> <st c="5629">site:</st>
    <st c="5635">https://getbootstrap.com/docs/5.3/getting-started/introduction/#cdn-links</st><st
    c="5708">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5709">The</st> `<st c="5714">body</st>` <st c="5718">tag contains an
    HTML comment indicating the location of the header (we will later include the
    header in that position) and</st> `<st c="5842">div</st>`<st c="5845">, which
    includes a couple of DTL template tags.</st> `<st c="5893">{% block %}</st>` <st
    c="5904">and</st> `<st c="5909">{% endblock %}</st>` <st c="5923">are template
    tags used for template inheritance.</st> <st c="5973">This is a template tag that
    defines a block named</st> `<st c="6023">content</st>`<st c="6030">. Blocks are
    placeholders in the template that can be overridden by child templates.</st> <st
    c="6115">The content within this block will be replaced by the content defined
    in a child template that extends this template (we will see it later in action).</st>
    <st c="6266">It also contains an HTML comment indicating the location of the footer
    (we will later include the footer in</st> <st c="6374">that position).</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6389">Registering the base template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6419">Finally, we need to</st> <st c="6439">register the</st> `<st c="6453">moviesstore/templates</st>`
    <st c="6474">folder in our application settings.</st> <st c="6511">We need to
    import the</st> `<st c="6533">os</st>` <st c="6535">module and include the new
    template path in our</st> `<st c="6584">/moviesstore/settings.py</st>` <st c="6608">file.</st>
    <st c="6615">In</st> `<st c="6618">/moviesstore/settings.py</st>`<st c="6642">,
    add the following</st> <st c="6662">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6902">Now that we have defined our base template structure, let’s update
    the</st> **<st c="6974">Home</st>** <st c="6978">and</st> **<st c="6983">About</st>**
    <st c="6988">pages to extend</st> <st c="7005">this template.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7019">Updating the home page to use the base template</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="7067">The new home page will</st> <st c="7091">extend the base template;
    it will include</st> <st c="7133">a background with an image and it will include
    custom CSS.</st> <st c="7192">Let’s create the new</st> <st c="7213">home page.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7223">Creating the new index template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7255">In</st> `<st c="7259">/home/templates/home/index.html</st>`<st
    c="7290">, replace the entire template code</st> <st c="7324">with</st> <st c="7330">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="7809">Let’s explain the</st> <st c="7828">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7842">The new</st> `<st c="7851">index.html</st>` <st c="7861">file now
    extends the</st> `<st c="7883">base.html</st>` <st c="7892">template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7902">The code that is inside</st> `<st c="7927">{% block content %}</st>`
    `<st c="7946">{% endblock content %}</st>` <st c="7969">will be injected inside</st>
    `<st c="7994">div</st>` <st c="7997">of the</st> `<st c="8005">base.html</st>`
    <st c="8014">template file.</st> <st c="8030">This code defines a</st> <st c="8050">couple
    of messages and uses some custom CSS classes that will be</st> <st c="8115">defined
    next.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="8128">Creating a custom CSS file</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8155">In the</st> `<st c="8163">moviesstore/</st>` <st c="8175">folder
    (the directory that contains the</st> `<st c="8216">settings.py</st>` <st c="8227">file),
    create a folder called</st> `<st c="8258">static</st>`<st c="8264">. In that folder,
    create a</st> <st c="8291">subfolder called</st> `<st c="8308">css</st>`<st c="8311">.
    Then, in</st> `<st c="8322">moviesstore/static/css/</st>` <st c="8345">create
    a file called</st> `<st c="8367">style.css</st>`<st c="8376">. For now, fill it
    in with</st> <st c="8403">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8520">The previous code defines a CSS class called</st> `<st c="8566">bg-index</st>`<st
    c="8574">, which will be used to display an image as a background on the</st>
    <st c="8638">home page.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8648">Storing an image</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8665">Let’s also include the</st> `<st c="8689">background.jpg</st>`
    <st c="8703">image in our project.</st> <st c="8726">In</st> `<st c="8729">moviesstore/static</st>`<st
    c="8747">, create a folder</st> <st c="8765">called</st> `<st c="8772">img</st>`<st
    c="8775">. Then, in</st> `<st c="8786">moviesstore/static/img/</st>`<st c="8809">,
    download and store the</st> `<st c="8834">background.jpg</st>` <st c="8848">image
    from this link:</st> [<st c="8871">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/blob/main/Chapter03/moviesstore/moviesstore/static/img/background.jpg</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/blob/main/Chapter03/moviesstore/moviesstore/static/img/background.jpg)
    <st c="9017">(as shown in</st> *<st c="9031">Figure 3</st>**<st c="9039">.2</st>*<st
    c="9041">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.2 – Including a background image under the project structure](img/B22457_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9214">Figure 3.2 – Including a background image under the project structure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9283">Serving the static files</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9308">We have defined a couple</st> <st c="9334">of static files, a CSS
    file, and a JPG file.</st> <st c="9379">To be able to use them or display them
    in our application, we need to register the folder that contains them.</st> <st
    c="9489">Add the following code in</st> `<st c="9538">/</st>``<st c="9539">moviesstore/settings.py</st>`
    <st c="9562">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9679">Updating the base template to use the custom CSS and load static
    files</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9749">We also need to update the base</st> <st c="9782">template to link
    the custom CSS we previously created, and we need to use a custom DTL tag to load
    the static files.</st> <st c="9899">In</st> `<st c="9902">/moviesstore/templates/base.html</st>`<st
    c="9934">, add the following</st> <st c="9954">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10209">In the previous code, the</st> `<st c="10236">load static</st>`
    <st c="10247">template tag is used to load the static files in the</st> `<st c="10301">base.html</st>`
    <st c="10310">template.</st> <st c="10321">Once we have used this tag, we can
    use the</st> `<st c="10364">static</st>` <st c="10370">template tag to refer to
    specific static files to be loaded.</st> <st c="10432">It will search for the
    static files based on the</st> `<st c="10481">STATICFILES_DIRS</st>` <st c="10497">folder
    location.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10514">Now, save those files, run the server, and go back to</st> `<st
    c="10569">http://localhost:8000</st>`<st c="10590">; you should see the new home
    page displayed (</st>*<st c="10637">Figure 3</st>**<st c="10646">.3</st>*<st c="10648">).</st>
    <st c="10652">Check that the tab title doesn’t appear, as we need to send the</st>
    `<st c="10716">template_data.title</st>` <st c="10735">variable from the view
    function to the template (which is carried</st> <st c="10802">out next).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.3 – The new home page with the missing tab title](img/B22457_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10933">Figure 3.3 – The new home page with the missing tab title</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10990">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10995">If you have problems loading the background image, we recommend
    you stop the server and run it again or clear the browser cache.</st> <st c="11125">Also,
    try to access the image file directly from the browser to</st> <st c="11188">check
    whether the image was loaded</st> <st c="11224">properly (</st>[<st c="11234">http://localhost:8000/static/img/background.jpg</st>](http://localhost:8000/static/img/background.jpg)<st
    c="11282">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11285">Updating the views index function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11319">Finally, let’s pass the title from the view</st> <st c="11363">function
    to the</st> <st c="11379">templates.</st> <st c="11391">In</st> `<st c="11394">/home/views.py</st>`<st
    c="11408">, add the following</st> <st c="11428">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11690">Let’s explain the</st> <st c="11709">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11723">We create a Python dictionary called</st> `<st c="11761">template_data</st>`<st
    c="11774">. We will always use this dictionary when we need to pass information
    from view functions</st> <st c="11864">to templates.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11877">We add a key called</st> `<st c="11898">title</st>` <st c="11903">to
    the</st> `<st c="11911">template_data</st>` <st c="11924">dictionary.</st> `<st
    c="11937">title</st>` <st c="11942">will be used to define the browser tab title.</st>
    <st c="11989">Remember that</st> `<st c="12003">template_data.title</st>` <st
    c="12022">is used in the</st> `<st c="12038">base.html</st>` <st c="12047">template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="12057">We modify the</st> `<st c="12072">render</st>` <st c="12078">function
    to pass a third argument.</st> <st c="12114">This time we pass the</st> `<st c="12136">template_data</st>`
    <st c="12149">variable, which will be available across the</st> `<st c="12195">home/index.html</st>`
    <st c="12210">template</st> <st c="12219">or the templates that</st> <st c="12242">it
    extends.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*<st c="12253">Figure 3</st>**<st c="12262">.4</st>* <st c="12264">displays
    the</st> <st c="12277">updated</st> **<st c="12286">Home</st>** <st c="12290">page
    with the proper browser</st> <st c="12320">tab title.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.4 – New home page with proper browser tab title](img/B22457_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12484">Figure 3.4 – New home page with proper browser tab title</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12540">Updating the About page to use the base template</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="12589">The new</st> **<st c="12598">About</st>** <st c="12603">page will
    also extend the</st> <st c="12629">base template, and it</st> <st c="12652">will
    include a dummy text about the page and</st> <st c="12697">an image.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12706">Creating the new About template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="12738">In</st> `<st c="12742">/home/templates/home/about.html</st>`<st
    c="12773">, replace the entire template code</st> <st c="12808">with</st> <st
    c="12813">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13857">Let’s explain the</st> <st c="13876">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13890">The new</st> `<st c="13899">about.html</st>` <st c="13909">file
    now extends the</st> `<st c="13931">base.html</st>` <st c="13940">template.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="13950">We use</st> `<st c="13958">{% block content %}</st>` `<st c="13977">{%
    endblock content %}</st>` <st c="14000">to inject the proper HTML code inside</st>
    `<st c="14039">div</st>` <st c="14042">of the</st> `<st c="14050">base.html</st>`
    <st c="14059">template file.</st> <st c="14075">This code defines a paragraph</st>
    <st c="14105">about the page and displays an image that will be</st> <st c="14155">stored
    next.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14167">We also use the</st> `<st c="14184">{% load static %}</st>` <st
    c="14201">tag since this template loads a custom image by using the</st> `<st
    c="14260">static</st>` <st c="14266">template tag.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14280">Storing the about.jpg image</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14308">Let’s also include the</st> `<st c="14332">about.jpg</st>` <st
    c="14341">image in our</st> <st c="14354">project.</st> <st c="14364">In</st>
    `<st c="14367">moviesstore/static/img/</st>`<st c="14390">, download and store
    the</st> `<st c="14415">about.jpg</st>` <st c="14424">image from this</st> <st
    c="14441">link:</st> [<st c="14447">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/blob/main/Chapter03/moviesstore/moviesstore/static/img/about.jpg</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/blob/main/Chapter03/moviesstore/moviesstore/static/img/about.jpg)<st
    c="14588">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14589">Updating the views about function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="14623">Finally, let’s pass the title from the view</st> <st c="14667">about
    function to the templates.</st> <st c="14701">In</st> `<st c="14704">/home/views.py</st>`<st
    c="14718">, add the following</st> <st c="14738">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: <body>
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Header --> <st c="16377"><nav class="p-3 navbar navbar-dark bg-dark</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16419">navbar-expand-lg"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16438"><div class="container"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16462"><a class="navbar-brand"</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16486">href="{% url 'home.index' %}"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16517"><img src="img/logo.png' %}" alt="logo"</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16567">height="40" /></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16582"></a></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16587"><button class="navbar-toggler" type="button"</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16632">data-bs-toggle="collapse"</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16658">data-bs-target="#navbarNavAltMarkup"</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16695">aria-controls="navbarNavAltMarkup"</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16730">aria-expanded="false"</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16752">aria-label="Toggle navigation"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16784"><span class="navbar-toggler-icon"></span></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16826"></button></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16836"><div class="collapse navbar-collapse"</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16874">id="navbarNavAltMarkup"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16899"><div class="navbar-nav ms-auto navbar-ml"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16942"><a class="nav-link"</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '****<st c="16962">href="{% url ''home.about'' %}">About</a></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="17002"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="17009"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="17016"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="17023"></nav></st>** <st c="17030"><!-- Header -->'
  prefs: []
  type: TYPE_NORMAL
- en: …</st>**
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: … <st c="18062">.navbar a.nav-link {</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="18082">color: #FFFEF6 !important;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18109">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18111">.bg-dark {</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="18121">background-color: #2E2E2E !important;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18159">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: …
  prefs: []
  type: TYPE_NORMAL
- en: <!-- Footer --> <st c="19099"><section class="p-3 ms-footer d-none d-md-block"></st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="19148"><div class="container"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19172"><div class="row mt-3 text-white"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19206"><div class="col-md-6 col-lg-6 col-xl-6</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19245">mx-auto mb-4"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19260"><b>MOVIES STORE</b></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19280"><hr /></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19287"><p></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19291">Welcome to Movies Store, your premier online</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19336">destination for a cinematic adventure like no</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19382">other!</st> <st c="19390">Dive into the world of movies from the</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19428">comfort of your own home with our user-</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19468">friendly and immersive online movie store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19511"></p></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19516"></div></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19523"><div class="col-md-3 col-lg-3 col-xl-3</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19562">mx-auto mb-4"></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19577"><b>LINKS</b></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19590"><hr /></st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19597"><p><a class="nav-link"</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19620">href="{% url ''home.about'' %}"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19651">About</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19657"></a></p></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19666"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19673"><div class="col-md-3 col-lg-3 col-xl-3 mx-auto</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19720">mb-4"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19727"><b>CONTACT</b></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19742"><hr /></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19749"><p><i class="fas fa-home me-2"></i></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19785">150-2345 Tokyo-to, Japan</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '****<st c="19810"></p></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19815"><p><i class="fas fa-envelope me-2"></i></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19855">info@moviesstore.com</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19876"></p></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19881"><p><i class="fas fa-phone me-2"></i></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19918">+81 03-3333-3333</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19935"></p></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19940"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19947"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19954"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '****<st c="19961"></section></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="19972"><section class="p-3 ms-footer-bottom bg-dark"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20019"><div class="container d-flex</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20048">justify-content-between"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20074"><div class="me-5 text-white"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20104"><span>DESIGNED BY</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20122"><a href="https://www.x.com/danielgarax"</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20162">target="_blank">DANIEL CORREA</a> &</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20198"><a href="https://www.x.com/greglim81"</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20236">target="_blank">GREG LIM</a></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '****<st c="20265"></span></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20273"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20280"><div class="text-white"></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20305"><span>© Copyright - 2024</span></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20337"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20344"></div></st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20351"></section></st>** <st c="20362"><!-- Footer -->'
  prefs: []
  type: TYPE_NORMAL
- en: …</st>******
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: … <st c="20673">.ms-footer {</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="20685">background-color: #202020;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20712">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20714">.ms-footer p {</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="20728">color: #7F7F7F;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="20744">font-size: 13px;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20761">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20763">.ms-footer a:hover {</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="20783">color: #6ab43e;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="20799">text-decoration: none;</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20822">}</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20824">.ms-footer-bottom span{</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20847">font-size: 13px;</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20864">line-height: 38px;</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20883">}</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20885">.ms-footer-bottom a {</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20906">color: #6ab43e;</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20922">text-decoration: none;</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20945">}</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20947">.ms-footer-bottom a:hover {</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20974">color: #fff;</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="20987">}</st>**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
