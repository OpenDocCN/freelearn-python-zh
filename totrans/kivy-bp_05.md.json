["```py\npip install Flask\n\n```", "```py\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return 'Hello, Flask'\n\nif __name__ == '__main__':\n    app.run(host='0.0.0.0', port=7080, debug=True)\n```", "```py\npip install Pillow\n\n```", "```py\nfrom flask import send_file\nfrom PIL import ImageGrab\nfrom StringIO import StringIO\n\n@app.route('/desktop.jpeg')\ndef desktop():\n    screen = ImageGrab.grab()\n    buf = StringIO()\n    screen.save(buf, 'JPEG', quality=75)\n    buf.seek(0)\n    return send_file(buf, mimetype='image/jpeg')\n```", "```py\nfrom flask import request\n\n@app.route('/click')\ndef click():\n    try:\n        x = int(request.args.get('x'))\n        y = int(request.args.get('y'))\n    except TypeError:\n        return 'error: expecting 2 ints, x and y'\n```", "```py\nimport ctypes\nuser32 = ctypes.windll.user32  # this is the user32.dll reference\n\nMOUSEEVENTF_LEFTDOWN = 2\nMOUSEEVENTF_LEFTUP = 4\n```", "```py\n@app.route('/click')\ndef click():\n    try:\n        x = int(request.args.get('x'))\n        y = int(request.args.get('y'))\n    except:\n        return 'error'\n\n    user32.SetCursorPos(x, y)\n    user32.mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0)\n    user32.mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0)\n    return 'done'\n```", "```py\n<!DOCTYPE html>\n<html>\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>Remote Desktop</title>\n    </head>\n    <body>\n        <script src=\"img/\"></script>\n        <script>\n            // code goes here\n        </script>\n    </body>\n</html>\n```", "```py\n@app.route('/')\ndef index():\n    return app.send_static_file('index.html')\n```", "```py\nfunction reload_desktop() {\n    $('img').remove()\n    $('<img>', {src: '/desktop.jpeg?' +\n                Date.now()}).appendTo('body')\n}\n\nsetInterval(reload_desktop, 2000)\n```", "```py\n<style>\n    body { margin: 0 }\n    img { max-width: 100% }\n</style>\n```", "```py\nfunction send_click(event) {\n    var fac = this.naturalWidth / this.width\n    $.get('/click', {x: 0|fac * event.clientX,\n                     y: 0|fac * event.clientY})\n}\n\n$('body').on('click', 'img', send_click)\n```", "```py\nScreen:\n    name: 'login'\n\n    BoxLayout:\n        orientation: 'horizontal'\n        y: root.height - self.height\n\n        Label:\n            text: 'Server IP:'\n            size_hint: (0.4, 1)\n\n        TextInput:\n            id: server\n            text: '10.211.55.5'  # put your server IP here\n\n        Button:\n            text: 'Connect'\n            on_press: app.connect()\n            size_hint: (0.4, 1)\n```", "```py\nScreen:\n    name: 'desktop'\n\n    ScrollView:\n        effect_cls: ScrollEffect\n\n        Image:\n            id: desktop\n            nocache: True\n            on_touch_down: app.send_click(args[1])\n            size: self.texture_size\n            size_hint: (None, None)\n```", "```py\n#:import ScrollEffect kivy.effects.scroll.ScrollEffect\n```", "```py\nfrom kivy.loader import Loader\n\nclass RemoteDesktopApp(App):\n    def connect(self):\n        self.url = ('http://%s:7080/desktop.jpeg' %\n                    self.root.ids.server.text)\n        self.send_url = ('http://%s:7080/click?' %\n                         self.root.ids.server.text)\n        self.reload_desktop()\n```", "```py\ndef reload_desktop(self, *args):\n    desktop = Loader.image(self.url, nocache=True)\n    desktop.bind(on_load=self.desktop_loaded)\n```", "```py\nfrom kivy.clock import Clock\n\ndef desktop_loaded(self, desktop):\n    if desktop.image.texture:\n        self.root.ids.desktop.texture = \\\n            desktop.image.texture\n\n    Clock.schedule_once(self.reload_desktop, 1)\n\n    if self.root.current == 'login':\n        self.root.current = 'desktop'\n```", "```py\nScreen:\n    name: 'desktop'\n\n    ScrollView:\n        effect_cls: ScrollEffect\n\n        Image:\n            on_touch_down: app.send_click(args[1])\n            # The rest of the properties unchanged\n```", "```py\ndef send_click(self, event):\n    params = {'x': int(event.x),\n              'y': int(self.root.ids.desktop.size[1] -\n                       event.y)}\n    urlopen(self.send_url + urlencode(params))\n```", "```py\ntry:  # python 2\n    from urllib import urlencode\nexcept ImportError:  # python 3\n    from urllib.parse import urlencode\n\ntry:  # python 2\n    from urllib2 import urlopen\nexcept ImportError:  # python 3\n    from urllib.request import urlopen\n\n```"]