["```py\nlab:\n  description: Imported from 2_DC_Topology.virl\n  notes: |-\n    ## Import Progress\n    - processing node /lax-edg-r1 (iosv)\n    - processing node /lax-edg-r2 (iosv)\n    - processing node /nyc-edg-r1 (iosv)\n    - processing node /nyc-edg-r2 (iosv)\n    - processing node /lax-cor-r1 (nxosv)\n    - processing node /nyc-cor-r1 (nxosv)\n    - link GigabitEthernet0/1.lax-edg-r1 -> Ethernet2/1.lax-cor-r1\n    - link GigabitEthernet0/1.lax-edg-r2 -> Ethernet2/2.lax-cor-r1\n    - link GigabitEthernet0/1.nyc-edg-r1 -> Ethernet2/1.nyc-cor-r1\n    - link GigabitEthernet0/1.nyc-edg-r2 -> Ethernet2/2.nyc-cor-r1\n    - link Ethernet2/3.lax-cor-r1 -> Ethernet2/3.nyc-cor-r1\n  timestamp: 1615749425.6802542\n  title: 2_DC_Topology.yaml\n  version: 0.0.4 \n```", "```py\nnodes:\n  - id: n0\n    label: lax-edg-r1\n    node_definition: iosv\n    x: -100\n    y: 200\n    configuration: |-\n      !\n      ! Last configuration change at 02:26:08 UTC Fri Apr 17 2020 by cisco\n      !\n      version 15.6\n      service timestamps debug datetime msec\n      service timestamps log datetime msec\n      no service password-encryption\n      !\n      hostname lax-edg-r1\n      !\n      boot-start-marker\n      boot-end-marker\n      !\n      !\n      vrf definition Mgmt-intf\n       !\n       address-family ipv4\n       exit-address-family\n       !\n<skip> \n```", "```py\n - id: n5\n    label: Client\n    node_definition: server\n    x: 0\n    y: 0\n    configuration: |-\n      # converted cloud-config\n      hostname Client\n      ifconfig eth1 up 10.0.0.9 netmask 255.255.255.252\n      route add -net 10.0.0.0/8 gw 10.0.0.10 dev eth1\n      route add -net 192.168.0.0/28 gw 10.0.0.10 dev eth1\n      # original cloud-config\n      # #cloud-config\n      # bootcmd:\n      # - ln -s -t /etc/rc.d /etc/rc.local\n      # hostname: Client\n      # manage_etc_hosts: true\n      # runcmd:\n      # - start ttyS0\n      # - systemctl start getty@ttyS0.service\n      # - systemctl start rc-local\n      # - sed -i '/^\\s*PasswordAuthentication\\s\\+no/d' /etc/ssh/sshd_config\n      # - echo \"UseDNS no\" >> /etc/ssh/sshd_config\n      # - service ssh restart\n      # - service sshd restart \n```", "```py\n#!/usr/env/bin python3\nimport xml.etree.ElementTree as ET\nimport pprint\nwith open('chapter15_topology.virl', 'rt') as f: \n    tree = ET.parse(f)\ndevices = {}\nfor node in tree.findall('./{http://www.cisco.com/VIRL}node'):\n    name = node.attrib.get('name')\n    devices[name] = {}\n    for attr_name, attr_value in sorted(node.attrib.items()):\n        devices[name][attr_name] = attr_value\n# Custom attributes\ndevices['iosv-1']['os'] = '15.6(3)M2'\ndevices['nx-osv-1']['os'] = '7.3(0)D1(1)'\ndevices['host1']['os'] = '16.04'\ndevices['host2']['os'] = '16.04'\npprint.pprint(devices) \n```", "```py\n(venv) $ python chapter16_1_xml.py\n{'host1': {'location': '117,58',\n           'name': 'host1',\n           'os': '16.04',\n           'subtype': 'server',\n           'type': 'SIMPLE'},\n 'host2': {'location': '347,66',\n           'name': 'host2',\n           'os': '16.04',\n           'subtype': 'server',\n           'type': 'SIMPLE'},\n 'iosv-1': {'ipv4': '192.168.0.3',\n            'location': '182,162',\n            'name': 'iosv-1',\n            'os': '15.6(3)M2',\n            'subtype': 'IOSv',\n            'type': 'SIMPLE'},\n 'nx-osv-1': {'ipv4': '192.168.0.1',\n              'location': '281,161',\n              'name': 'nx-osv-1',\n              'os': '7.3(0)D1(1)',\n              'subtype': 'NX-OSv',\n             'type': 'SIMPLE'}} \n```", "```py\nimport unittest\n<skip>\n# Unittest Test case\nclass TestNXOSVersion(unittest.TestCase):\n    def test_version(self):\n        self.assertEqual(nxos_version, devices['nx-osv-1']['os'])\nif __name__ == '__main__':\n    unittest.main() \n```", "```py\n$ python chapter16_2_validation.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\nOK \n```", "```py\n$ python chapter16_3_test_fail.py\nF\n======================================================================\nFAIL: test_version (__main__.TestNXOSVersion)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"chapter15_3_test_fail.py\", line 50, in test_version\n    self.assertEqual(nxos_version, devices['nx-osv-1']['os'])\nAssertionError: '7.3(0)D1(1)' != '7.4(0)D1(1)'\n- 7.3(0)D1(1)\n?   ^\n+ 7.4(0)D1(1)\n?   ^\n----------------------------------------------------------------------\nRan 1 test in 0.001s\nFAILED (failures=1) \n```", "```py\n#!/usr/bin/env python3\nimport unittest\nclass SimpleTest(unittest.TestCase):\n    def test(self):\n        one = 'a'\n        two = 'a'\n        self.assertEqual(one, two) \n```", "```py\n$ python -m unittest chapter16_4_unittest.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\nOK \n```", "```py\n#!/usr/bin/env python3\n# Examples from https://pymotw.com/3/unittest/index.html#module-unittest\nimport unittest\nclass Output(unittest.TestCase):\n    def testPass(self):\n        return\n    def testFail(self):\n        self.assertFalse(True, 'this is a failed message')\n    def testError(self):\n        raise RuntimeError('Test error!')\n    def testAssesrtTrue(self):\n        self.assertTrue(True)\n    def testAssertFalse(self):\n        self.assertFalse(False) \n```", "```py\n$ python -m unittest -v chapter16_5_more_unittest\ntestAssertFalse (chapter16_5_more_unittest.Output) ... ok\ntestAssesrtTrue (chapter16_5_more_unittest.Output) ... ok\ntestError (chapter16_5_more_unittest.Output) ... ERROR\ntestFail (chapter16_5_more_unittest.Output) ... FAIL\ntestPass (chapter16_5_more_unittest.Output) ... ok\n======================================================================\nERROR: testError (chapter16_5_more_unittest.Output)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16/chapter16_5_more_unittest.py\", line 14, in testError\n    raise RuntimeError('Test error!')\nRuntimeError: Test error!\n======================================================================\nFAIL: testFail (chapter16_5_more_unittest.Output)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16/chapter16_5_more_unittest.py\", line 11, in testFail\n    self.assertFalse(True, 'this is a failed message')\nAssertionError: True is not false : this is a failed message\n----------------------------------------------------------------------\nRan 5 tests in 0.001s\nFAILED (failures=1, errors=1) \n```", "```py\n# Our class making API Call using requests\nclass MyClass:\n    def fetch_json(self, url):\n        response = requests.get(url)\n        return response.json() \n```", "```py\n# This method will be used by the mock to replace requests.get\ndef mocked_requests_get(*args, **kwargs):\n    class MockResponse:\n        def __init__(self, json_data, status_code):\n            self.json_data = json_data\n            self.status_code = status_code\n        def json(self):\n            return self.json_data\n    if args[0] == 'http://url-1.com/test.json':\n        return MockResponse({\"key1\": \"value1\"}, 200)\n    elif args[0] == 'http://url-2.com/test.json':\n        return MockResponse({\"key2\": \"value2\"}, 200)\n    return MockResponse(None, 404) \n```", "```py\n# Our test case class\nclass MyClassTestCase(unittest.TestCase):\n    # We patch 'requests.get' with our own method. The mock object is passed in to our test case method.\n    @mock.patch('requests.get', side_effect=mocked_requests_get)\n    def test_fetch(self, mock_get):\n        # Assert requests.get calls\n        my_class = MyClass()\n        # call to url-1\n        json_data = my_class.fetch_json('http://url-1.com/test.json')\n        self.assertEqual(json_data, {\"key1\": \"value1\"})\n        # call to url-2\n        json_data = my_class.fetch_json('http://url-2.com/test.json')\n        self.assertEqual(json_data, {\"key2\": \"value2\"})\n        # call to url-3 that we did not mock\n        json_data = my_class.fetch_json('http://url-3.com/test.json')\n        self.assertIsNone(json_data)\nif __name__ == '__main__':\n    unittest.main() \n```", "```py\n$ python chapter16_5_more_unittest_mocks.py\n.\n----------------------------------------------------------------------\nRan 1 test in 0.000s\nOK \n```", "```py\n$ pip install pytest\n$ python\nPython 3.10.6 (main, Aug 10 2022, 11:40:04) [GCC 11.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pytest\n>>> pytest.__version__\n'7.1.3'\n>>> \n```", "```py\n#!/usr/bin/env python3\ndef test_passing():\n    assert(1, 2, 3) == (1, 2, 3)\ndef test_failing():\n    assert(1, 2, 3) == (3, 2, 1) \n```", "```py\n$ pytest -v chapter16_6_pytest_1.py \n================================ test session starts =================================\nplatform linux -- Python 3.10.6, pytest-7.1.3, pluggy-1.0.0 -- /home/echou/Mastering_Python_Networking_Fourth_Edition/venv/bin/python3\ncachedir: .pytest_cache\nrootdir: /home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16\ncollected 2 items                                                                    \nchapter16_6_pytest_1.py::test_passing PASSED                                   [ 50%]\nchapter16_6_pytest_1.py::test_failing FAILED                                   [100%]\n====================================== FAILURES ======================================\n____________________________________ test_failing ____________________________________\n    def test_failing():\n>       assert(1, 2, 3) == (3, 2, 1)\nE       assert (1, 2, 3) == (3, 2, 1)\nE         At index 0 diff: 1 != 3\nE         Full diff:\nE         - (3, 2, 1)\nE         ?  ^     ^\nE         + (1, 2, 3)\nE         ?  ^     ^\nchapter16_6_pytest_1.py:7: AssertionError\n============================== short test summary info ===============================\nFAILED chapter16_6_pytest_1.py::test_failing - assert (1, 2, 3) == (3, 2, 1)\n============================ 1 failed, 1 passed in 0.03s ============================= \n```", "```py\n#!/usr/bin/env python3\nclass router(object):\n    def __init__(self, hostname=None, os=None, device_type='cisco_ios'):\n        self.hostname = hostname\n        self.os = os\n        self.device_type = device_type\n        self.interfaces = 24\ndef test_defaults():\n    r1 = router()\n    assert r1.hostname == None\n    assert r1.os == None\n    assert r1.device_type == 'cisco_ios'\n    assert r1.interfaces == 24\ndef test_non_defaults():\n    r2 = router(hostname='lax-r2', os='nxos', device_type='cisco_nxos')\n    assert r2.hostname == 'lax-r2'\n    assert r2.os == 'nxos'\n    assert r2.device_type == 'cisco_nxos'\n    assert r2.interfaces == 24 \n```", "```py\n$ pytest chapter16_7_pytest_2.py \n================================ test session starts =================================\nplatform linux -- Python 3.10.6, pytest-7.1.3, pluggy-1.0.0\nrootdir: /home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16\ncollected 2 items                                                                    \nchapter16_7_pytest_2.py ..                                                     [100%]\n================================= 2 passed in 0.01s ================================== \n```", "```py\n# pytest test case\ndef test_version():\n    assert devices['nx-osv-1']['os'] ==  nxos_version \n```", "```py\n$ pytest chapter16_8_pytest_3.py \n================================ test session starts =================================\nplatform linux -- Python 3.10.6, pytest-7.1.3, pluggy-1.0.0\nrootdir: /home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16\ncollected 1 item                                                                     \nchapter16_8_pytest_3.py .                                                      [100%]\n================================= 1 passed in 3.80s ================================== \n```", "```py\n>>> import os\n>>> host_list = ['www.cisco.com', 'www.google.com']\n>>> for host in host_list:\n...     os.system('ping -c 1 ' + host)\n...\nPING www.cisco.com(2001:559:19:289b::b33 (2001:559:19:289b::b33)) 56 data bytes\n64 bytes from 2001:559:19:289b::b33 (2001:559:19:289b::b33): icmp_seq=1 ttl=60 time=11.3 ms\n--- www.cisco.com ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 11.399/11.399/11.399/0.000 ms\n0\nPING www.google.com(sea15s11-in-x04.1e100.net (2607:f8b0:400a:808::2004)) 56 data bytes\n64 bytes from sea15s11-in-x04.1e100.net (2607:f8b0:400a:808::2004): icmp_seq=1 ttl=54 time=10.8 ms\n--- www.google.com ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 10.858/10.858/10.858/0.000 ms\n0 \n```", "```py\n>>> import subprocess\n>>> for host in host_list:\n...     print('host: ' + host)\n...     p = subprocess.Popen(['ping', '-c', '1', host], stdout=subprocess.PIPE)\n...\nhost: www.cisco.com\nhost: www.google.com\n>>> print(p.communicate())\n(b'PING www.google.com(sea15s11-in-x04.1e100.net (2607:f8b0:400a:808::2004)) 56 data bytes\\n64 bytes from sea15s11-in-x04.1e100.net (2607:f8b0:400a:808::2004): icmp_seq=1 ttl=54 time=16.9 ms\\n\\n--- www.google.com ping statistics ---\\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\\nrtt min/avg/max/mdev = 16.913/16.913/16.913/0.000 ms\\n', None)\n>>> \n```", "```py\n#!/usr/bin/env python3\nimport subprocess\nhost_list = ['www.cisco.com', 'www.google.com']\nping_time = []\nfor host in host_list:\n    p = subprocess.Popen(['ping', '-c', '1', host], stdout=subprocess.PIPE)\n    result = p.communicate()[0]\n    host = result.split()[1]\n    time = result.split()[13]\n    ping_time.append((host, time))\nprint(ping_time) \n```", "```py\n$ python chapter16_10_ping.py \n[(b'e2867.dsca.akamaiedge.net', b'ttl=54'), (b'www.google.com', b'ttl=58')] \n```", "```py\n# DON'T DO THIS IN PRODUCTION #\nechou@ubuntu:/var/log$ sudo hping3 -S -p 80 --flood 192.168.1.202\nHPING 192.168.1.202 (eth0 192.168.1.202): S set, 40 headers + 0 data bytes hping in flood mode, no replies will be shown\n^C\n--- 192.168.1.202 hping statistic ---\n2281304 packets transmitted, 0 packets received, 100% packet loss round-trip min/avg/max = 0.0/0.0/0.0 ms\nechou@ubuntu:/var/log$ \n```", "```py\n$ python3 -m http.server 8080\nServing HTTP on 0.0.0.0 port 8080 ...\n127.0.0.1 - - [25/Jul/2018 10:15:23] \"GET / HTTP/1.1\" 200 - \n```", "```py\n$ pip install pyats \n```", "```py\ntestbed: \n    name: Chapter_16_pyATS\n    tacacs: \n      username: cisco\n    passwords:\n      tacacs: cisco \n      enable: cisco\ndevices:\n   lax-edg-r1: \n       alias: lax-edg-r1\n       type: ios\n       connections:\n         defaults:\n           class: unicon.Unicon  \n         management:\n           ip: 192.168.2.51\n           protocol: ssh\ntopology: \n    lax-edg-r1:\n        interfaces:\n            GigabitEthernet0/1:\n                ipv4: 10.0.0.1/30\n                link: link-1\n                type: ethernet\n            Loopback0:\n                ipv4: 192.168.0.10/32\n                link: iosv-1_Loopback0\n                type: loopback \n```", "```py\n#!/usr/bin/env python3\n#\n# derived from https://devnet-pubhub-site.s3.amazonaws.com/media/pyats/docs/getting_started/index.html\n#\nfrom pyats.topology import loader\n# load testbed\ntestbed = loader.load('chapter16_pyats_testbed_1.yml')\n# access the device\ntestbed.devices\nlax_edg_r1 = testbed.devices['lax-edg-r1']\n# establish connectivity\nlax_edg_r1.connect()\n# issue command\nprint(lax_edg_r1.execute('show version'))\n# disconnect\nlax_edg_r1.disconnect() \n```", "```py\n$ python chapter16_11_pyats_1.py \n/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16/pyATS/chapter16_11_pyats_1.py:8: DeprecationWarning: 'tacacs.username' is deprecated in the testbed YAML.  This key has been moved to 'credentials'.\n  testbed = loader.load('chapter16_pyats_testbed_1.yml')\n/home/echou/Mastering_Python_Networking_Fourth_Edition/Chapter16/pyATS/chapter16_11_pyats_1.py:8: DeprecationWarning: 'passwords.tacacs' is  deprecated in the testbed YAML.  Use 'credentials' instead.\n  testbed = loader.load('chapter16_pyats_testbed_1.yml')\ndevice's os is not provided, unicon may not use correct plugins\n2022-09-25 17:03:08,615: %UNICON-INFO: +++ lax-edg-r1 logfile /tmp/lax-edg-r1-cli-20220925T170308615.log +++\n<skip>\n2022-09-25 17:03:09,275: %UNICON-INFO: +++ connection to spawn: ssh -l cisco 192.168.2.51, id: 140685765498848 +++\n2022-09-25 17:03:09,276: %UNICON-INFO: connection to lax-edg-r1\ncisco@192.168.2.51's password: \n**************************************************************************\n* IOSv is strictly limited to use for evaluation, demonstration and IOS  *\n* education. IOSv is provided as-is and is not supported by Cisco's      *\n* Technical Advisory Center. Any use or disclosure, in whole or in part, *\n* of the IOSv Software or Documentation to any third party for any       *\n* purposes is expressly prohibited except as otherwise authorized by     *\n* Cisco in writing.                                                      *\n**************************************************************************\nlax-edg-r1#\n2022-09-25 17:03:09,364: %UNICON-INFO: +++ initializing handle +++\n2022-09-25 17:03:09,427: %UNICON-INFO: +++ lax-edg-r1 with via 'management': executing command 'term length 0' +++\nterm length 0\nlax-edg-r1#\n2022-09-25 17:03:09,617: %UNICON-INFO: +++ lax-edg-r1 with via 'management': executing command 'term width 0' +++\nterm width 0\nlax-edg-r1#\n2022-09-25 17:03:09,821: %UNICON-INFO: +++ lax-edg-r1 with via 'management': executing command 'show version' +++\nshow version\nCisco IOS Software, IOSv Software (VIOS-ADVENTERPRISEK9-M), Version 15.8(3)M2, RELEASE SOFTWARE (fc2)\nTechnical Support: http://www.cisco.com/techsupport\nCopyright (c) 1986-2019 by Cisco Systems, Inc.\nCompiled Thu 28-Mar-19 14:06 by prod_rel_team \n```", "```py\ntestbed: \n    name: Chapter_16_pyATS\n    tacacs: \n      username: cisco\n    passwords:\n      tacacs: cisco \n      enable: cisco\ndevices:\n    lax-edg-r1: \n       alias: iosv-1\n       type: ios\n       connections:\n         defaults:\n           class: unicon.Unicon  \n         vty:\n           ip: 192.168.2.50\n           protocol: ssh\n    lax-cor-r1:\n        alias: nxosv-1\n        type: ios \n        connections:\n          defaults:\n            class: unicon.Unicon\n          vty:\n            ip: 192.168.2.51\n            protocol: ssh\ntopology: \n    lax-edg-r1:\n        interfaces:\n            GigabitEthernet0/1:\n                ipv4: 10.0.0.1/30\n                link: link-1\n                type: ethernet\n            Loopback0:\n                ipv4: 192.168.0.10/32\n                link: lax-edg-r1_Loopback0\n                type: loopback\n    lax-cor-r1:\n        interfaces:\n            Eth2/1:\n                ipv4: 10.0.0.2/30\n                link: link-1\n                type: ethernet\n            Loopback0:\n                ipv4: 192.168.0.100/32\n                link: lax-cor-r1_Loopback0\n                type: loopback \n```", "```py\n@aetest.loop(device = ('ios1',))\nclass PingTestcase(aetest.Testcase):\n    @aetest.test.loop(destination = ('10.0.0.1', '10.0.0.2'))\n    def ping(self, device, destination):\n        try:\n            result = self.parameters[device].ping(destination)\n        except Exception as e:\n            self.failed('Ping {} from device {} failed with error: {}'.format(\n                                destination,\n                                device,\n                                str(e),\n                            ),\n                        goto = ['exit'])\n        else:\n            match = re.search(r'Success rate is (?P<rate>\\d+) percent', result)\n            success_rate = match.group('rate') \n```", "```py\n$ python chapter16_12_pyats_2.py --testbed chapter16_pyats_testbed_2.yml \n```", "```py\n2022-09-25T17:14:13: %AETEST-INFO: +------------------------------------------------------------------------------+\n2022-09-25T17:14:13: %AETEST-INFO: |                            Starting common setup                             |\n2022-09-25T17:14:13: %AETEST-INFO: +------------------------------------------------------------------------------+\n2022-09-25T17:14:13: %AETEST-INFO: +------------------------------------------------------------------------------+\n2022-09-25T17:14:13: %AETEST-INFO: |                      Starting subsection check_topology                      |\n2022-09-25T17:14:13: %AETEST-INFO: +------------------------------------------------------------------------------+\n2022-09-25T17:14:13: %AETEST-INFO: The result of subsection check_topology is => PASSED\n2022-09-25T17:14:13: %AETEST-INFO: +------------------------------------------------------------------------------+\n2022-09-25T17:14:13: %AETEST-INFO: |                  Starting subsection establish_connections                   |\n2022-09-25T17:14:13: %AETEST-INFO: +------------------------------------------------------------------------------+\n2022-09-25T17:14:13: %AETEST-INFO: +..............................................................................+\n2022-09-25T17:14:13: %AETEST-INFO: :                  Starting STEP 1: Connecting to lax-edg-r1                   :\n2022-09-25T17:14:13: %AETEST-INFO: +..............................................................................+\n2022-09-25T17:14:13: %UNICON-WARNING: device's os is not provided, unicon may not use correct plugins \n```", "```py\n$ ls /tmp/lax*\n/tmp/lax-edg-r1-cli-20220925T170012042.log\n/tmp/lax-edg-r1-cli-20220925T170030754.log\n/tmp/lax-edg-r1-cli-20220925T170308615.log\n/tmp/lax-edg-r1-cli-20220925T171145090.log\n/tmp/lax-edg-r1-cli-20220925T171413444.log\n$ head -20 /tmp/lax-edg-r1-cli-20220925T170012042.log\n2022-09-25 17:00:12,043: %UNICON-INFO: +++ lax-edg-r1 logfile /tmp/lax-edg-r1-cli-20220925T170012042.log +++\n2022-09-25 17:00:12,043: %UNICON-INFO: +++ Unicon plugin generic (unicon.plugins.generic) +++\n**************************************************************************\n* IOSv is strictly limited to use for evaluation, demonstration and IOS  *\n* education. IOSv is provided as-is and is not supported by Cisco's      *\n* Technical Advisory Center. Any use or disclosure, in whole or in part, *\n* of the IOSv Software or Documentation to any third party for any       *\n* purposes is expressly prohibited except as otherwise authorized by     *\n* Cisco in writing.                                                      *\n**************************************************************************\n2022-09-25 17:00:12,705: %UNICON-INFO: +++ connection to spawn: ssh -l cisco 192.168.2.51, id: 140482828326976 +++\n2022-09-25 17:00:12,706: %UNICON-INFO: connection to lax-edg-r1\ncisco@192.168.2.51's password: \n************************************************************************** \n```"]