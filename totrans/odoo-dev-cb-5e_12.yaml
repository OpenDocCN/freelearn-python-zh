- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automation, Workflows, Emails, and Printing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business applications are expected not only to store records but also to manage
    business workflows. Some objects, such as leads or project tasks, have a lot of
    records that run in parallel. Having too many records for an object makes it harder
    to have a clear picture of the business. Odoo has several techniques that can
    deal with this problem. In this chapter, we will look at how we can set a business
    workflow with dynamic stages and Kanban groups. This will help the user understand
    how their business is running.
  prefs: []
  type: TYPE_NORMAL
- en: We will also look at techniques, such as server actions and automated actions,
    that can be used by power users or functional consultants to add simpler process
    automation without the need to create custom add-ons. Finally, we will create
    **QWeb-based PDF reports** and print them out.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing dynamic record stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Kanban stages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a quick create form to a Kanban card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating interactive Kanban cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a progress bar to Kanban views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating server actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Python code server actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using automated actions on time conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using automated actions on event conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating QWeb-based PDF reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing activities from a Kanban card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a stat button to a form view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the archive option for records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirement for this chapter is having an online Odoo platform.
  prefs: []
  type: TYPE_NORMAL
- en: All the code that will be used in this chapter can be downloaded from this book’s
    GitHub repository at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter12).
  prefs: []
  type: TYPE_NORMAL
- en: Managing dynamic record stages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In `my_hostel`, we have a `state` field to indicate the current status of a
    hostel room record. This `state` field is limited to the `Draft` or `Available`
    statuses and it is not possible to add a new state to the business process. To
    avoid this, we can use the `many2one` field to give flexibility when designing
    the Kanban workflow of a user’s choice, and you can add/remove a new state at
    any time.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will be using the `my_hostel` module from [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side Development Techniques*. This module manages the hostel
    and students. It also records rooms. We added an initial module, `Chapter12/00_initial_module/my_hostel`,
    to the GitHub repository for this book to help you get started: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter12](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter12).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these simple steps to add stages to the `hostel.room` model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new model called `hostel.room.stage`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'state field from the hostel.room model and replace it with a new stage_id field,
    which is a many2one field, and its methods, as shown in the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <header>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="stage_id" widget="statusbar"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'options="{''clickable'': ''1'', ''fold_field'': ''fold''}"/>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'state field in the tree view with the stage_id field, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <?xml version="1.0" encoding="utf-8"?>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <odoo noupdate="1">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <record id="stage_draft" model="hostel.room.stage">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="name">Draft</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="sequence">1</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </record>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <record id="stage_available" model="hostel.room.stage">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="name">Available</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="sequence">15</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </record>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <record id="stage_reserved" model="hostel.room.stage">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="name">Reserved</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="sequence">5</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="fold">True</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </record>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </odoo>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After installing the module, you will see stages in the form view, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1 – Stage selector in the form view](img/B20997_12_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.1 – Stage selector in the form view
  prefs: []
  type: TYPE_NORMAL
- en: Here, you’ll notice the stages outlined on the hostel record. These stages are
    clickable, so you will be able to change the stage by clicking on it. Folded stages
    will be displayed under the **More** dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Since we want to manage the record stages dynamically, we need to create a new
    model. In *Step 1*, we created a new model called `hostel.room.stage` to store
    the dynamic stages. In this model, we added a few fields. One of these was the
    `sequence` field, which is used to determine the order of the stages. We also
    added the `fold` Boolean field, which is used to collapse the stages and put them
    in a drop-down list. This is very helpful when your business process has lots
    of stages because it means that you can hide insignificant stages in the drop-down
    menu by setting this field.
  prefs: []
  type: TYPE_NORMAL
- en: The `fold` field is also used in Kanban views to display folded Kanban columns.
    Usually, **Reserved** items are expected to be in the **Unfolded** stage, and
    terminated items that are marked as either **Done** or **Cancelled** should be
    in the **Folded** stage.
  prefs: []
  type: TYPE_NORMAL
- en: By default, `fold` is the name of the field that is used to hold the value of
    the stage fold. You can change this by adding the `_fold_name = 'is_fold'` class
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added the basic access rights rules for the new model.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we added the `stage_id` `many2one` field to the `hostel.room` model.
    While creating a new room record, we wanted to set the default stage value to
    `Draft`. To accomplish this, we added a `_default_room_stage()` method. This method
    will fetch the record of the `hostel.room.stage` model with the lowest sequence
    number, so, while creating a new record, the stage with the lowest sequence will
    be displayed as active in the form view.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4*, we added the `stage_id` field to the form view. By adding the `clickable`
    option, we made the status bar clickable. We also added an option for the `fold`
    field, which will allow us to display insignificant stages in the drop-down menu.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 5*, we added `stage_id` to the tree view.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 6*, we added the default data for the stages. Users will see these
    basic stages after installing our module. If you want to learn more about XML
    data syntax, refer to the *Loading data using XML files* recipe in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing* *Module Data*.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: With this implementation, the user can define new stages on the fly. You will
    need to add views and menus for `hostel.room.stage` so that you can add new stages
    from the user interface. Refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*, if you don’t know how to add views and menus.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to do this, the Kanban view provides inbuilt features for
    adding, removing, or modifying stages from the Kanban view itself. We’ll look
    at this in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*, to
    learn about adding views and menus.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing Kanban stages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using a **Kanban board** is a simple way to manage workflows. It is organized
    into columns, each corresponding to stages, and the work items progress from left
    to right until they are finished. A Kanban view, with these stages, provides flexibility
    because it allows users to choose their own workflows. It provides a full overview
    of the records on a single screen.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    We will add Kanban to the `hostel.room` model and we will group Kanban cards by
    stage.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable workflows such as Kanban for the `hostel.room`
    model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a Kanban view for `hostel.room`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="view_mode">kanban,tree,form</field>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '_group_expand_stages() method and the group_expand attribute to the stage_id
    field, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the server and update the module to apply the changes. This will enable
    a Kanban board, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2 – Kanban view with groups by stage](img/B20997_12_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.2 – Kanban view with groups by stage
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, the Kanban view will show the room records
    grouped by stage. You will be able to drag and drop cards to another stage column.
    Moving cards to another column will change the stage value in the database too.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Step 1*, we added a Kanban view for the `hostel.room.stage` model. Note
    that we used `stage_id` as the default group for Kanban so that when the user
    opens Kanban, the Kanban cards will be grouped by stage. To find out more about
    Kanban, please refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend
    Views*.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added the `kanban` keyword to the existing action.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we added the `group_expand` attribute to the `stage_id` field.
    We also added a new `_group_expand_stages()` method. `group_expand` changes the
    behavior of the field grouping. By default, field grouping shows the stages that
    are being used. For example, if no rooms record has the `Reserved` stage, the
    grouping will not return that stage, so Kanban will not display the `Reserved`
    column. But in our case, we want to display all of the stages, regardless of whether
    or not they are being used.
  prefs: []
  type: TYPE_NORMAL
- en: The `_group_expand_stages()` function is used to return all the records for
    the stages. Because of this, the Kanban view will display all the stages and you
    will be able to use workflows by dragging and dropping them.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you play around with the Kanban board you created in this recipe, you will
    find lots of different features. Some of these are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You can create a new stage by clicking on the `group_create` option can be used
    to disable the **Add column** option from the Kanban board.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can arrange columns in a different order by dragging them by their headers.
    This will update the sequence field of the `hostel.room.stage` model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can edit or delete columns with the gear icon in the header of a Kanban
    column. The `group_edit` and `group_delete` options can be used to disable this
    feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The stages that have a `true` value in the `fold` field will collapse and the
    column will be displayed as a slim bar. If you click on this slim bar, it will
    expand and display the Kanban cards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the model has an `active` Boolean field, it will display the option to archive
    and unarchive records in the Kanban column. The `archivable` option can be used
    to disable this feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The plus icon on the Kanban column can be used to create records directly from
    the Kanban view. The `quick_create` option can be used to disable this feature.
    For the moment, this feature will not work in our example. This will be solved
    in the next recipe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about Kanban, please refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a quick create form to a Kanban card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grouped Kanban views provide the quick create feature, which allows us to generate
    records directly from the Kanban view. The plus icon on a column will display
    an editable Kanban card on the column, using which you can create a record. In
    this recipe, we will learn how to design a quick create Kanban form of our choice.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    We will use the quick create option in Kanban for the `hostel.room` model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a custom quick create form for Kanban:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new minimal form view for the `hostel.room` model, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <kanban default_group_by="stage_id" on_create="quick_create" quick_create_view="my_hostel.hostel_room_view_form_minimal">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the server and update the module to apply the changes. Then, click
    on the plus icon in the column. This will enable Kanban forms, as shown in the
    following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.3 – Quickly creating a record directly from the Kanban view](img/B20997_12_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.3 – Quickly creating a record directly from the Kanban view
  prefs: []
  type: TYPE_NORMAL
- en: When you click on the **Create** button in the Kanban view, you will see a small
    card with input instead of being redirected to the form view. You can fill in
    the values and click on **Add**, which will create a room record.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a custom quick create option, we need to create a minimal form view.
    We did this in *Step 1*. We added two required fields because you cannot create
    a record without filling in the required fields. If you do so, Odoo will generate
    an error and open the default form view in the dialogue so that you can enter
    all the required values.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added this new form view to the Kanban view. Using the `quick_create_view`
    option, you can map the custom form view to the Kanban view. We also added one
    extra option – `on_create="quick_create"`. This option will display a quick create
    form in the first column when you click on the **Create** button in the control
    panel. Without this option, the **Create** button will open a form view in edit
    mode.
  prefs: []
  type: TYPE_NORMAL
- en: You can disable the quick create feature by adding `quick_create="false"` to
    the Kanban tag.
  prefs: []
  type: TYPE_NORMAL
- en: Creating interactive Kanban cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kanban cards support all HTML tags, which means you can design them however
    you like. Odoo provides some built-in ways to make Kanban cards more interactive.
    In this recipe, we will add color options, the star widget, and `many2many` tags
    to the Kanban card.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create an attractive Kanban card:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new model to manage the tags for the `hostel.room` model, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: access_hostel_amenities_manager_id,access.hostel.amenities.manager,my_hostel.model_hostel_amenities,my_hostel.group_hostel_manager,1,1,1,1
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'hostel.room model, as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add fields to the form view, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <field name="stage_id" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="color" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a dropdown to choose a color on the Kanban view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '...'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="text-muted">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <i class="fa fa-building"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="hostel_id" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <span class="oe_kanban_list_many2many">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<field name="hostel_amenities_ids" widget="many2many_tags" options="{''color_field'':
    ''color''}"/>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </span>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="popularity" widget="priority"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The code in bold should be added to the existing Kanban view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the server and update the module to apply the changes. Then, click
    on the plus icon on a column. It will display the Kanban, as shown in the following
    figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4 – Kanban cards with new options](img/B20997_12_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.4 – Kanban cards with new options
  prefs: []
  type: TYPE_NORMAL
- en: Our changes in the Kanban structure will enable extra options in the Kanban
    card. Now, you will be able to choose the color on the Kanban itself. You will
    also be able to prioritize cards with stars.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Steps 1* and *2*, we added a new model and security rules for tags. In *Step
    3*, we added a few fields to the rooms model.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4*, we added those fields to the form view. Note that we used the `priority`
    widget on the `popularity` field, which displays the selection field with star
    icons. In the `hostel_amenities_ids` field, we used the `many2many_tags` widget,
    which displays the `many2many` field in the form of tags. The `color_field` option
    is passed to enable the color feature on tags. The value of this option is the
    field name where the color index is stored. The `no_create_edit` option will disable
    the feature of creating new tags via the form view.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 5*, we improved lots of things. Fisrt, we added `t-attf-class="#{kanban_color(record.color.raw_value)}`
    to the Kanban card. This will be used to display the color of the Kanban card.
    It uses the value of the `color` field and generates a class based on that value.
    For example, if a Kanban record has a value of `2` in the `color` field, it will
    add `kanban_color_2` to the class. After that, we added a drop-down menu to add
    options such as **Edit**, **Delete**, and the Kanban color picker. The **Edit**
    and **Delete** options are only displayed if the user has proper access rights.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, we added tags and priority to the Kanban card. After adding all of
    this, the Kanban card will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5 – Kanban card options](img/B20997_12_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.5 – Kanban card options
  prefs: []
  type: TYPE_NORMAL
- en: With this card design, you will be able to set popularity stars and colors directly
    from the Kanban card.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a progress bar to Kanban views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you have tons of records in columns and it is very difficult to get
    a clear picture of the particular stages. A progress bar can be used to display
    the status of any column. In this recipe, we will display a progress bar on Kanban
    based on the `popularity` field.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a progress bar to the Kanban columns, you will need to add a `progressbar`
    tag to the Kanban view definition, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Note that Kanban column progress bars were introduced in Odoo version 11\. Versions
    before that will not display column progress bars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Restart the server and update the module to apply the changes. Then, click
    on the plus icon on a column. This will display the progress bar on the Kanban
    columns, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6 – Kanban view with a progress bar](img/B20997_12_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.6 – Kanban view with a progress bar
  prefs: []
  type: TYPE_NORMAL
- en: Upon updating the module, you will have added a progress bar to the Kanban columns.
    The color of the progress bar shows the number of records based on the record
    state. You will be able to click on one of the progress bars to filter records
    based on that state.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Progress bars on Kanban columns are displayed based on the values of the field.
    Progress bars support four colors, so you cannot display more than four states.
    The available colors are green (success), blue (information), red (danger), and
    yellow (warning). Then, you need to map colors to the field states. In our example,
    we mapped three states of the `priority` field because we didn’t want any progress
    bars for the rooms that were not in demand.
  prefs: []
  type: TYPE_NORMAL
- en: By default, progress bars show a count of the records on the side. You can see
    the total of a particular state by clicking on it in the progress bar. Clicking
    on the progress bar will also highlight the cards for that state. Instead of the
    count of records, you can also display the sum of the integer or float field.
    To do this, you need to add the `sum_field` attribute with the field value, such
    as `sum_field="field_name"`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating server actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server actions underpin Odoo’s automation tools. They allow us to describe the
    actions to perform. These actions are then available to be called by **event triggers**
    or to be triggered automatically when certain time conditions are met.
  prefs: []
  type: TYPE_NORMAL
- en: The simplest case is to let the end user perform an action on a document by
    selecting it from the **More** button. We will create this kind of action for
    project tasks so that we can **Set Priority** by starring the currently selected
    task and setting a deadline on it for 3 days from now.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an Odoo instance with the Project app installed. We will also need
    **Developer Mode** activated. If it’s not already activated, activate it in the
    Odoo **Settings** dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a server action and use it from the **More** menu, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'From the **Settings** top menu, select the **Technical** | **Actions** | **Server
    Actions** menu item and click on the **Create Contextual Action** button at the
    top of the record list, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.7 – Server action form view](img/B20997_12_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.7 – Server action form view
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill out the server action form with these values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action Name**: **Set** **as Priority**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Model**: **Task**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Type**: **Update Record**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In the server action, under the `Priority`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Value`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Low`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following screenshot shows the entered values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8 – Set lines to write](img/B20997_12_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.8 – Set lines to write
  prefs: []
  type: TYPE_NORMAL
- en: Save the server action and click on the **Create Contextual Action** button
    at the top left to make it available under the project task’s **More** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To try it out, go to the **Projects** top menu, open the **Project**, and open
    a random task. By clicking on the action, we should see the **Set Priority** option,
    as shown in the following screenshot. Selecting this will star the task and change
    the deadline date to 3 days from now:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.9 – The Set Priority server action](img/B20997_12_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.9 – The Set Priority server action
  prefs: []
  type: TYPE_NORMAL
- en: Once you add the server action, you will have set the priority option on the
    task. Upon clicking on it, the server action star will turn yellow, meaning the
    priority of the task has increased. Also, the server action will change the deadline.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Server actions work on a model, so one of the first things we must do is pick
    the model we want to work with. In our example, we used project tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we should select the type of action to perform. There are a few options
    available:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Update Record** allows you to set values on the current record or another
    record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create activity** allows you to create activity on the selected records'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute Code** allows you to write arbitrary code to execute when none of
    the other options are flexible enough for what we need.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Record** allows you to create a new record on the current model or
    another model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Send Email** allows you to choose an email template. This will be used to
    send out an email when the action is triggered.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Execute Existing actions** can be used to trigger a client or window action,
    just like when a menu item is clicked on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Add Followers** allows users or channels to subscribe to the record.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Create Next Activity** allows you to create a new activity. This will be
    displayed in the chatter.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Send SMS** allows you to send an SMS. You need to select the SMS template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '**Send SMS Text Message** is a chargeable service from Odoo. You need to purchase
    credit for SMS if you want to send an SMS.'
  prefs: []
  type: TYPE_NORMAL
- en: For our example, we used `1` to star the task and set a value on the `datetime`
    Python module ([https://docs.python.org/2/library/datetime.html](https://docs.python.org/2/library/datetime.html))
    to compute the date 3 days from today.
  prefs: []
  type: TYPE_NORMAL
- en: Arbitrary Python expressions can be used there, as well as in several of the
    other action types available. For security reasons, the code is checked by the
    `safe_eval` function implemented in the `odoo/tools/safe_eval.py` file. This means
    that some Python operations may not be allowed, but this rarely proves to be a
    problem.
  prefs: []
  type: TYPE_NORMAL
- en: When you add a drop-down option to the server action, usually, it is available
    for all internal users. But if you just want to show this option to selected users,
    you can assign a group to the server action. This is available under the **Security**
    tab in the server action form view.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Python code is evaluated in a restricted context, where the following objects
    are available to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '`env`: This is a reference for the `Environment` object, just like `self.env`
    in a class method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model`: This is a reference to the `model` class that the server action acts
    upon. In our example, it is equivalent to `self.env[''project.task]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ValidationError`: This is a reference to `from odoo.exceptions import ValidationError`,
    allowing validations that block unintended actions. It can be used as `raise Warning(''Message!'')`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Record` or `records`: This provides references to the current record or records,
    allowing you to access their field values and methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`log`: This is a function that’s used to log messages in the `ir.logging` model,
    allowing database-side logging-on actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`datetime`, `dateutil`, and `time`: These provide access to the Python libraries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Python code server actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Server actions have several types available, but executing arbitrary Python
    code is the most flexible option. When used wisely, it empowers users with the
    capability to implement advanced business rules from the user interface, without
    the need to create specific add-on modules to install that code.
  prefs: []
  type: TYPE_NORMAL
- en: We will demonstrate using this type of server action by implementing a server
    action that sends reminder notifications to the followers of a project task.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need an Odoo instance with the Project app installed.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a Python code server action, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new server action. In the **Settings** menu, select the **Technical**
    | **Actions** | **Server Actions** menu item, and click on the **Create** button
    at the top of the record list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill out the **Server Action** form with the following values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action Name**: **Send Reminder**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Base** **Model**: **Task**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Action To Do**: **Execute Code**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the **Python Code** text area, remove the default text and replace it with
    the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the entered values:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 12.10 – Python code with the values entered](img/B20997_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.10 – Python code with the values entered
  prefs: []
  type: TYPE_NORMAL
- en: Save the server action and click on **Create Contextual Action** at the top
    left to make it available under the project task’s **More** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, click on the **Project** top menu and select the **Search** | **Tasks**
    menu item. Pick a random task, set a deadline date on it, and then try the **Send
    Reminder** option under the **More** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This works just like the previous recipe; the only difference is that this server
    action will run your Python code. Once you run the server action on a task, it
    will put a message in the chatter.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating server actions* recipe of this chapter provides a detailed explanation
    of how to create a server action in general. For this particular type of action,
    we need to pick the **Execute Code** option and then write the code to run the
    text area.
  prefs: []
  type: TYPE_NORMAL
- en: The code can have multiple lines, as is the case in our recipe, and it runs
    in a context that has references to objects such as the current record object
    or the session user. The available references were described in the *Creating
    server* *actions* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: The code we used computes the number of days from the current date until the
    deadline date and uses that to prepare an appropriate notification message. The
    last line does the actual posting of the message in the task’s message wall. The
    `subtype='mt_comment'` argument is needed for email notifications to be sent to
    the followers, just like when we use the `mt_note` is used by default, posting
    an internal note without notification, as if we had used the **Log an internal
    note** button. Refer to [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210), *Managing
    Emails in Odoo*, to learn more about mailing in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Python code server actions are a powerful and flexible resource, but they do
    have some limitations compared to the custom add-on modules.
  prefs: []
  type: TYPE_NORMAL
- en: Because the Python code is evaluated at runtime, if an error occurs, the stack
    trace is not as informative and can be harder to debug. It is also not possible
    to insert a breakpoint in the code of a server action using the techniques shown
    in [*Chapter 7*](B20997_07.xhtml#_idTextAnchor363), *Debugging Modules*, so debugging
    needs to be done using logging statements. Another concern is that, when trying
    to track down the cause of behavior in the module code, you may not find anything
    relevant. In this case, it’s probably caused by a server action.
  prefs: []
  type: TYPE_NORMAL
- en: When carrying out a more intensive use of server actions, the interactions can
    be quite complex, so it is advisable to plan properly and keep them organized.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Refer to [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210), *Managing Emails
    in Odoo*, to learn more about mailing in Odoo.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using automated actions on time conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Automated actions** can be used to automatically trigger actions based on
    time conditions. We can use them to automatically perform some operations on records
    that meet certain criteria and time conditions.'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we can trigger a reminder notification for project tasks one
    day before their deadline, if they have one. Let’s see how this can be done.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, we will need to have both the *project management* app
    (which has the technical name `project`) and the `base_automation`) already installed,
    and have **Developer Mode** activated. We will also need the server action we
    created in the *Using Python code server actions* recipe of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an automated action with a timed condition on tasks, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Settings** menu, select the **Technical** | **Automation** | **Automated
    Actions** menu item, and click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the basic information on the `Send notification` `near deadline`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Model**: **Task**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select **Based on Time Condition** in the **Trigger** field
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For **Action To Do**, select **Execute** **Existing actions**
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To set the record criteria, click on the `["&",["date_deadline","!=",False],["stage_id.fold","=",False]]`,
    and click on the **Save** button. When changing to another field, the information
    on the number of records meeting the criteria will be updated and display **Record(s)**
    buttons. By clicking on the **Records** button, we can check the records list
    of the records meeting the domain expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To set the time condition for `-``1` **Days**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Actions** tab, under **Server actions to run**, click on **Add an
    item** and pick **Send Reminder** from the list; this should have been created
    previously. Refer to the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.11 – Automated action form view](img/B20997_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.11 – Automated action form view
  prefs: []
  type: TYPE_NORMAL
- en: If not, we can still create the server action to run using the **Create** button.
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Save** to save the automated action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Perform the following steps to try it out:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the **Project** menu, go to **Search** | **Tasks**, and set a deadline
    on a task with the date in the past.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Settings** menu, click on the **Technical** | **Automation** |
    **Scheduled** **Actions** menu item, find the **Base Action Rule: check and execute**
    action in the list, open its form view, and press on the **Run Manually** button
    at the top left. This forces timed automated actions to be checked. This is shown
    in the following screenshot. Note that this should work on a newly created demo
    database, but it might not work this way in an existing database:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.12 – Running an automated action (for test)](img/B20997_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.12 – Running an automated action (for test)
  prefs: []
  type: TYPE_NORMAL
- en: Again, go to the **Project** menu and open the same task you previously set
    a deadline date on. Check the message board; you should see the notification generated
    by the server action triggered by our automated action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After adding the time-based automated action for the deadline, a reminder message
    will be added to the task 1 day before the deadline.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Automated actions act on a model, and can be triggered either by events or time
    conditions. First, we must set the **Model** and **When to** **Run** values.
  prefs: []
  type: TYPE_NORMAL
- en: Both methods can use a filter to narrow down the records that we can perform
    the action on. We can use a domain expression for this. You can find further information
    about writing domain expressions in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*. Alternatively, you can create and save a filter on project tasks
    by using the user interface features and then copy the automatically generated
    domain expression, selecting it from the **Set** selection based on a search filter
    list.
  prefs: []
  type: TYPE_NORMAL
- en: The domain expression we used selects all the records with a non-empty `Fold`
    flag is not checked. Stages without the `Fold` flag are considered to be work-in-progress.
    This way, we avoid triggering notifications on tasks that are in the **Done**,
    **Canceled**, or **Closed** stages.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we should define the time condition – the date field to use and when the
    action should be triggered. The period can be in minutes, hours, days, or months,
    and the number set for the period can be positive, indicating the time after the
    date, or negative, indicating the time before the date. When using a period in
    days, we can provide a resource calendar that defines the working days and that
    can be used by the day count.
  prefs: []
  type: TYPE_NORMAL
- en: These actions are checked by the **Check Action Rules** scheduled job. Note
    that, by default, this is run every 4 hours. This is appropriate for actions that
    work on a day or month scale, but if you need actions that work on smaller timescales,
    you need to change the running interval to a smaller value.
  prefs: []
  type: TYPE_NORMAL
- en: Actions will be triggered for records that meet all the criteria and whose triggering
    date condition (the field date plus the interval) is after the last action execution.
    This is to avoid repeatedly triggering the same action. Also, this is why manually
    running the preceding action will work in a database in which the scheduled action
    has not yet been triggered, but why it might not work immediately in a database
    where it has already been run by the scheduler.
  prefs: []
  type: TYPE_NORMAL
- en: Once an automated action is triggered, the **Actions** tab tells you what should
    happen. This might be a list of server actions that do things such as changing
    values on the record, posting notifications, or sending out emails.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: These types of automated actions are triggered once a certain time condition
    is reached. This is not the same as regularly repeating an action while a condition
    is still true. For example, an automated action will not be capable of posting
    a reminder for every day after the deadline has been exceeded.
  prefs: []
  type: TYPE_NORMAL
- en: This type of action can, instead, be performed by scheduled actions, which are
    stored in the `ir.cron` model. However, scheduled actions do not support server
    actions; they can only call an existing method of a model object. So, to implement
    a custom action, we need to write an add-on module, adding the underlying Python
    method.
  prefs: []
  type: TYPE_NORMAL
- en: For reference, the technical name for the model is `base.action.rule`.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further details about writing domain expressions, refer to [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using automated actions on event conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Business applications provide systems with records for business operations but
    are also expected to support dynamic business rules that are specific to the organization’s
    use cases.
  prefs: []
  type: TYPE_NORMAL
- en: Carving these rules into custom add-on modules can be inflexible and out of
    the reach of functional users. Automated actions triggered by event conditions
    can bridge this gap and provide a powerful tool to automate or enforce the organization’s
    procedures. As an example, we will enforce validation on project tasks so that
    only the project manager can change tasks to the **Done** stage.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow this recipe, you will need to have the project management app already
    installed. You also need to have **Developer Mode** activated. If it’s not activated
    already, activate it in the Odoo **About** dialogue.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create an automated action with an event condition on tasks, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Settings** menu, select the **Technical** | **Automation** |**Automated
    Actions** menu item, and click on the **Create** button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the basic information in the `Validate` `Closing Tasks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`Stage id`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `[('stage_id.name', '!=', 'Done')]` – in the code editor, and save
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the `[(''stage_id.name'', ''='', ''Done'')]` domain in the code editor,
    and save, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 12.13 – Automated action form view](img/B20997_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.13 – Automated action form view
  prefs: []
  type: TYPE_NORMAL
- en: In the **Actions** tab, click on **Add an item**. In the list dialogue, click
    on the **Create** button to create a new server action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fill out the server action form with the following values, and then click on
    the `Validate` `Closing tasks`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Model**: **Task**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Action To Do**: **Execute Code**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Python Code**: Enter the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The following screenshot shows the entered values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14 – Adding a child action](img/B20997_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.14 – Adding a child action
  prefs: []
  type: TYPE_NORMAL
- en: Click on `Demo` user and we are working with the `Administrator` user, our automated
    action should be triggered, and our warning message should block the change.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We start by giving a name to our automated actions and setting the model it
    should work with. For the type of action we require, we should choose **On Save**,
    but the **On Creation**, **On Creation & Update**, **On Deletion**, and **Based
    On Form Modification** options are also available.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we define the filters to determine when our action should be triggered.
    The **On Save** actions allow us to define two filters – one to check before and
    the other after the changes are made to the record. This can be used to express
    transitions – to detect when a record changes from *state A* to *state B*. In
    our example, we want to trigger the action when a *not-done* task changes to the
    *done* stage. The **On Save** action is the only one that allows these two filters;
    the other action types only allow one filter.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that our example condition will only work correctly
    for English language users. This is because **Stage Name** is a translatable field
    that can have different values for different languages. So, the filters on the
    translatable fields should be avoided or used with care.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we create and add one (or more) server actions with whatever we want
    to be done when the automated action is triggered. In this case, we chose to demonstrate
    how to implement custom validation, making use of a Python code server action
    that used the `Warning` exception to block the user’s changes.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*,
    we saw how to redefine the `write()` methods of a model to perform actions on
    record updates. Automated actions on record updates provide another way to achieve
    this, with some benefits and drawbacks.
  prefs: []
  type: TYPE_NORMAL
- en: Among the benefits, it is easy to define an action that’s triggered by the update
    of a stored computed field, which is tricky to do in pure code. It is also possible
    to define filters on records and have different rules for different records or
    for records matching different conditions that can be expressed with search domains.
  prefs: []
  type: TYPE_NORMAL
- en: However, automated actions can have disadvantages compared to Python business
    logic code inside modules. With poor planning, the flexibility provided can lead
    to complex interactions that are difficult to maintain and debug. Also, the before-and-after
    write filter operations bring some overhead, which can be an issue if you are
    performing sensitive actions.
  prefs: []
  type: TYPE_NORMAL
- en: Creating QWeb-based PDF reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When communicating with the outside world, it is often necessary to produce
    a PDF document from a record in the database. Odoo uses the same template language
    that’s used for form views: QWeb.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will create a QWeb report to print information about a room
    that is currently being borrowed by a student. This recipe will reuse the models
    presented in the *Adding a progress bar in Kanban views* recipe from earlier in
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you haven’t done so already, install `wkhtmltopdf`, as described in [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development Environment*;
    otherwise, you won’t get shiny PDFs as a result of your efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Also, double-check that the `web.base.url` configuration parameter (or `report.url`)
    is a URL that is accessible from your Odoo instance; otherwise, the report will
    take a long time to generate and the result will look strange.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will add a report to `hostel.student` that prints a list
    of students that the student borrowed. We need to add a `one2many` field to the
    student model concerning the `hostel.room` model, as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <?xml version="1.0" encoding="utf-8"?>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <odoo>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <template id="hostel_room_detail_reports_template">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <t t-call="web.html_container">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <t t-foreach="docs" t-as="doc">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <t t-call="web.internal_layout">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="page">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<h1>Room name: <t t-esc="doc.name"/></h1>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<h1>Room No: <t t-esc="doc.name"/></h1>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <table class="table table-condensed">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <thead>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <th>Student Name</th>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <th>Gender</th>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </thead>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tbody>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <tr t-foreach="doc.student_ids" t-as="student" >
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <td><t t-esc="student.name" /></td>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <td><t t-esc="student.gender" /></td>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </tr>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </tbody>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </table>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </t>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </t>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </t>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </template>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'reports/hostel_room_detail_report.xml, as shown in the following example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add both files to the manifest of the add-on, as shown in the following example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, when opening the room form view, or when selecting students in the list
    view, you should be offered the option to print the rooms detail report in a drop-down
    menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15 – Print action for report](img/B20997_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.15 – Print action for report
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Step 1*, we added a `one2many` `hostel_student_ids` field. This field will
    contain rooms records for the student. We will use it in the QWeb report to list
    the rooms that the student has reserved.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we defined the QWeb template. The content of the template will
    be used to generate the PDF. In our example, we used some basic HTML structure.
    We also used some attributes such as `t-esc` and `t-foreach`, which are used to
    generate dynamic content in the report. Don’t worry about this syntax within the
    `template` element for now. This topic will be addressed extensively in the *Creating
    or modifying templates – QWeb* recipe in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS Website Development*. Another important thing to notice in the template is
    the layout. In our example, we have used `web.internal_layout` in our template,
    which will generate the final PDF with a minimal header and footer. If you want
    an informative header and footer that uses the company logo and company information,
    use the `web.external_layout` layout. We also added one `for` loop to the `docs`
    parameter that will be used to generate a report for multiple records when the
    user prints it from the list view.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we declared the report in another XML file via the `<record>` tag.
    It will register the report’s `ir.actions.report` model. The crucial part here
    is that you set the `report_name` field to the complete XML ID (that is, `modulename.record_id`)
    of the template you defined; otherwise, the report generation process will fail.
    The `model` field determines which type of record the report operates, and the
    `name` field is the name shown to the user in the print menu.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of Odoo, a `<report>` tag was used to register a report.
    But from version v14, it is deprecated and you need to create a record of `ir.actions.report`
    with the `<record>` tag. The `<report>` tag is still supported in Odoo v14 for
    backward compatibility but using it will show a warning in the log.
  prefs: []
  type: TYPE_NORMAL
- en: By setting `report_type` to `qweb-pdf`, we requested that the HTML generated
    by our view is run through `wkhtmltopdf` to deliver a PDF to the user. In some
    cases, you may want to use `qweb-html` to render the HTML within the browser.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are some marker classes in a report’s HTML that are crucial for the layout.
    Ensure that you wrap all your content in an element with the `page` class set.
    If you forget that, you’ll see nothing at all. To add a header or footer to your
    record, use the `header` or `footer` class.
  prefs: []
  type: TYPE_NORMAL
- en: Also, remember that this is HTML, so make use of *CSS attributes* such as `page-break-before`,
    `page-break-after`, and `page-break-inside`.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll have noted that all of our template body is wrapped in two elements with
    the `t-call` attribute set. We’ll examine the mechanics of this attribute later
    in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS Website Development*,
    but you must do the same in your reports. These elements ensure that the HTML
    generates links to all the necessary CSS files and contains some other data that
    is needed for report generation. While `web.html_container` doesn’t have an alternative,
    the second `t-call` can be `web.external_layout`. The difference is that the external
    layout already comes with a header and footer displaying the company logo, the
    company’s name, and some other information you expect from a company’s external
    communication, while the internal layout just gives you a header with pagination,
    the print date, and the company’s name. For the sake of consistency, always use
    one of the two.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Note that `web.internal_layout`, `web.external_layout`, `web.external_layout_header`,
    and `web.external_layout_footer` (the last two are called by the external layout)
    are just views by themselves, and you already know how to change them via inheritance.
    To inherit with the template element, use the `inherit_id` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Managing activities from a Kanban card
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo uses activities to schedule actions on records. These activities can be
    managed in the form view and the Kanban view. In this recipe, we will learn how
    to manage activities from the Kanban view card. We will add an activity widget
    to the cards of the rooms Kanban.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add and manage activity from the Kanban view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add mail dependencies to the `manifest` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inherit an activity mixin in the `hostel.room` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <field name="color" />
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'activity_ids field inside the Kanban template. Add this field under the popularity
    field, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 12.16 – Activity manager in a Kanban card](img/B20997_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.16 – Activity manager in a Kanban card
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, after applying the code from this recipe, you will be able to
    manage activity from a Kanban card. You can now also process or create an activity
    from a Kanban card.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Step 1*, we added a dependency to the manifest of our module. We did this
    because all the implementation associated with the activity is part of the `mail`
    module. Without installing `mail`, we cannot use activities in our model.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added `activity mixin` to the `hostel.room` model. This will
    enable activities for the rooms records. Adding `mail.activity.mixin` will add
    all the fields and methods required for activities. We also added the `mail.thread`
    mixin because the activity logs the message when the user processes the activity.
    If you want to learn more about this activity, please refer to the *Managing activities
    on documents* recipe of [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210), *Managing
    Emails* *in Odoo*.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 3*, we added the `activity_state` field to the Kanban view. This field
    is used by the activity widget to display the color widget. The color will represent
    the current state of the upcoming activity.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4*, we added the activity widget itself. It uses the `activity_ids`
    field. In our example, we added the activity widget in a separate `<div>` tag,
    but you can put it anywhere according to your design requirements. With the activity
    widget, you can schedule, edit, and process the activity directly from the Kanban
    card.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the *Adding a progress bar in Kanban views* recipe of this chapter, we displayed
    a Kanban progress bar based on the `popularity` field. But we can also show a
    progress bar based on the state of the upcoming activity:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This will show the progress bar based on the state of the upcoming activity.
    A state-based progress bar is used in several views in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to learn more about the mail thread, refer to the *Managing chatter
    on documents* recipe of [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210), *Managing
    Emails* *in Odoo*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you want to learn more about activities, refer to the *Managing activities
    on documents* recipe of [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210), *Managing
    Emails* *in Odoo*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a stat button to a form view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo uses a stat button to relate two different objects visually on the form
    view. It is used to show some basic KPIs for related records. It is also used
    to redirect and open another view. In this recipe, we will add a stat button to
    the form view of a room. This stat button will display the count of room records
    and on clicking it, we will be redirected to the list of Kanban views.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a stat button to the hostel’s form view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `rooms_count` compute field to the `hostel.hostel` model. This field
    will count the number of active rooms in the hostel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <div class="oe_button_box" name="button_box">
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<button class="oe_stat_button" name="%(action_hostel_room)d" type="action"
    icon="fa-building" context="{''search_default_hostel_id'': active_id}">'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field string="Rooms" name="rooms_count" widget="statinfo"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </button>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'my_hostel module to apply the changes. Open the form view of any hostel; you
    will find the stat button, as shown in the following screenshot:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 12.17 – Stat button in a hostel’s form view](img/B20997_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.17 – Stat button in a hostel’s form view
  prefs: []
  type: TYPE_NORMAL
- en: On clicking the stat button, you will be redirected to the **Rooms** Kanban
    view. Here, you will see orders only from the current hostel.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Step 1*, we added a compute field that calculates the number of rooms records
    for the current hostel. The value of this field will be used for a stat button
    to show the count. If you want to learn more about compute, refer to the *Adding
    computed fields to a model* recipe in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added the stat button in the form view of the `hostel.hostel`
    model. There are a specific syntax and location for the stat button. All the stat
    button needs to do is wrap under `<div>` with the `oe_button_box` class. The stat
    button box needs to be placed inside the `<sheet>` tag. Note that we used a `name`
    attribute on the button box. This `name` attribute is useful when you want to
    add a new stat, but then you will need to add a stat button with the `<button>`
    tag with the `oe_stat_button` class. Internally, the stat button is just a form
    view button with a different user interface. This means it supports all of the
    attributes that are supported by a normal button, such as an action, icon, and
    context.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we used the action of rooms orders, which means that when the
    user clicks on the stat button, they will be redirected to the rooms records but
    it will show all the rooms records. We only want to show the rooms records for
    the current room. To do so, we have to pass `search_default_hostel_id`. This will
    apply a default filter for the current room. Note that `hostel_id` is the `many2one`
    field on the `hostel.room` model. If you want to filter by another field, use
    it by prefixing it with `search_default_` in `context`.
  prefs: []
  type: TYPE_NORMAL
- en: Stat buttons are used often as they are very useful and show the overall statistics
    related to a record. You could use them to show all the information that relates
    to the current record. For example, on the contact record, Odoo shows stat buttons
    that show information related to the current contact total of the invoice, the
    number of leads, the number of orders, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn more about buttons, refer to the *Adding buttons to forms* recipe in
    [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about actions, refer to the *Adding a menu item and window action*
    recipe in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling the archive option for records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo provides inbuilt features to enable archive and unarchive options for records.
    This will help the user hide records that are no longer important. In this recipe,
    we will add an archive/unarchive option for a room. We can archive a room once
    it is not available.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Archive and unarchive mostly work automatically. The options are available
    on a record if the model has a Boolean field named `active`. We already have an
    `active` field in the `hostel.room` model. But if you have not added it, follow
    these steps to add the `active` field:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add an `active` Boolean field to the `hostel.room` model, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <field name="active" invisible="1"/>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. Now, you will be able to
    archive rooms. The **Archive** option is available in the **Action** dropdown,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18 – Archive option on the form view](img/B20997_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 12.18 – Archive option on the form view
  prefs: []
  type: TYPE_NORMAL
- en: Once you archive a record, you’ll want to see that record anywhere in Odoo.
    To see it, you need to apply a filter from the search view.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Boolean field named `active` has a special purpose in Odoo. If you add an
    `active` field to your model, records with a `false` value in the `active` field
    won’t be displayed anywhere in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 1*, we added an `active` field to the `hostel.room` model. Note that
    we kept the default value of `True` here. If we don’t add this default value,
    the new records will be created in archive mode by default and won’t be displayed
    in views, even if we have recently created them.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added the `active` field in the form view. If you don’t add
    an `active` field in the form view, the archive/unarchive option won’t be displayed
    in the `invisible` attribute to hide it from the form view.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, once you archive a room, that room will not be displayed in
    the tree view or any other view. The room won’t even be displayed in the `many2one`
    dropdown in the hostel record. If you want to unarchive that room, then you need
    to apply a filter to display archived records from the search view, and then restore
    the room.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If your model has an `active` Boolean field, the `search` method will not return
    an archived record. If you want to search all the records, whether they are archived
    or not, then pass `active_test` in a context, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Note that if the archive record is linked to another record, it will be displayed
    in the related form view. For example, say you have *Room 1*. Then, you archive
    *Room 1*, which means from now on, you cannot select *Room 1* in the room. But
    if you open *Order 1*, you will see the archived *Room 1*.
  prefs: []
  type: TYPE_NORMAL
