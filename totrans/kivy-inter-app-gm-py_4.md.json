["```py\n1\\. # File name: comicscreenmanager.kv\n2\\. #:import FadeTransition kivy.uix.screenmanager.FadeTransition\n3\\. <ComicScreenManager>:\n4\\.     transition: FadeTransition()\n5\\.     color_picker: _color_picker\n6\\.     ComicCreator:\n7\\.     Screen:\n8\\.         name: 'colorscreen'\n9\\.         ColorPicker:\n10\\.             id: _color_picker\n11\\.             color: 0,.3,.6,1\n12\\.             Button:\n13\\.                 text: \"Select\"\n14\\.                 pos_hint: {'center_x': .75, 'y': .05}\n15\\.                 size_hint: None, None\n16\\.                 size: 150, 50\n17\\.                 on_press: root.current = 'comicscreen'\n```", "```py\n18\\. # File name: comiccreator.kv\n19\\. <ComicCreator@Screen>:\n20\\.     name: 'comicscreen'\n21\\.     AnchorLayout:â€¦\n```", "```py\n22\\. def color(self, instance):\n23\\.     self.comic_creator.manager.current = 'colorscreen'\n```", "```py\n24\\. # File name: comiccreator.py\n25\\. from kivy.app import App\n26\\. from kivy.lang import Builder\n27\\. from kivy.uix.screenmanager import ScreenManager\n28\\. \n29\\. Builder.load_file('toolbox.kv')\n30\\. Builder.load_file('comicwidgets.kv')\n31\\. Builder.load_file('drawingspace.kv')\n32\\. Builder.load_file('generaloptions.kv')\n33\\. Builder.load_file('statusbar.kv')\n34\\. Builder.load_file('comiccreator.kv')\n35\\. \n36\\. class ComicScreenManager(ScreenManager):\n37\\.     pass\n38\\. \n39\\. class ComicScreenManagerApp(App):\n40\\.     def build(self):\n41\\.         return ComicScreenManager()\n42\\. \n43\\. if __name__==\"__main__\":\n44\\.     ComicScreenManagerApp().run()\n```", "```py\n45\\. # File name: color.py\n46\\. from kivy.app import App\n47\\. from kivy.uix.gridlayout import GridLayout\n48\\. from kivy.lang import Builder\n49\\. \n50\\. Builder.load_string(\"\"\"\n51\\. <GridLayout>:\n52\\.     cols:2\n53\\.     Label:\n54\\.         color: 0.5,0.5,0.5,1\n55\\.         canvas:\n56\\.             Rectangle:\n57\\.                 pos: self.x + 10, self.y + 10\n58\\.                 size: self.width - 20, self.height - 20\n59\\.     Widget:\n60\\.         canvas:\n61\\.             Rectangle:\n62\\.                 pos: self.x + 10, self.y + 10\n63\\.                 size: self.width - 20, self.height - 20\n64\\. \"\"\")\n65\\. \n66\\. class LabelApp(App):\n67\\.     def build(self):\n68\\.         return GridLayout()\n69\\. \n70\\. if __name__==\"__main__\":\n71\\.     LabelApp().run()\n```", "```py\n    72\\. def draw(self, ds, x, y):\n    73\\.     sm = StickMan(width=48, height=48)\n    74\\.     sm.center = (x,y)\n    75\\.     screen_manager = self.parent.comic_creator.manager\n    76\\.     color_picker = screen_manager.color_picker\n    77\\.     sm.canvas.before.add(Color(*color_picker.color))\n    78\\.     ds.add_widget(sm)\n    ```", "```py\n    79\\. def draw(self, ds, x, y):\n    80\\.     (self.ix, self.iy) = (x,y)\n    81\\.     screen_manager = self.parent.comic_creator.manager\n    82\\.     color_picker = screen_manager.color_picker\n    83\\.     with ds.canvas:\n    84\\.         Color(*color_picker.color)\n    85\\.         self.figure=self.create_figure(x,y,x+1,y+1)\n    86\\.     ds.bind(on_touch_move=self.update_figure)\n    87\\.     ds.bind(on_touch_up=self.end_figure)\n    ```", "```py\n    88\\. def widgetize(self,ds,ix,iy,fx,fy):\n    89\\.     widget = self.create_widget(ix,iy,fx,fy)\n    90\\.     (ix,iy) = widget.to_local(ix,iy,relative=True)\n    91\\.     (fx,fy) = widget.to_local(fx,fy,relative=True)\n    92\\.     screen_manager = self.parent.comic_creator.manager\n    93\\.     color_picker = screen_manager.color_picker\n    94\\.     widget.canvas.add(Color(*color_picker.color))\n    95\\.     widget.canvas.add(self.create_figure(ix,iy,fx,fy))\n    96\\.     ds.add_widget(widget)\n    ```", "```py\n97\\. # File name: drawingspace.py\n98\\. from kivy.uix.stencilview import StencilView\n99\\. \n100\\. class DrawingSpace(StencilView):\n101\\.     ...\n```", "```py\n102\\.     AnchorLayout:\n103\\.         anchor_x: 'right'\n104\\.         anchor_y: 'top'\n105\\.         RelativeLayout:\n106\\.             size_hint: None,None\n107\\.             width: root.width - _tool_box.width\n108\\.             height: root.height - _general_options.height -     _status_bar.height\n109\\.             DrawingSpace:\n110\\.                 id: _drawing_space\n111\\.                 general_options: _general_options\n112\\.                 tool_box: _tool_box\n113\\.                 status_bar: _status_bar\n```", "```py\n114\\.     def on_touch_down(self, touch):\n115\\.         ds = self.parent.drawing_space\n116\\.         if self.state == 'down' and\\ ds.parent.collide_point(touch.x, touch.y):\n117\\.             (x,y) = ds.to_widget(touch.x, touch.y)\n118\\.             self.draw(ds, x, y)\n119\\.             return True\n120\\.             return super(ToolButton, self).on_touch_down(touch)\n```", "```py\n121\\. def update_figure(self, ds, touch):\n122\\.     ds.canvas.remove(self.figure)\n123\\.     with ds.canvas:\n124\\.         self.figure = self.create_figure(self.ix, self.iy,touch.x,touch.y)\n125\\. \n126\\. def end_figure(self, ds, touch):\n127\\.     ds.unbind(on_touch_move=self.update_figure)\n128\\.     ds.unbind(on_touch_up=self.end_figure)\n129\\.     ds.canvas.remove(self.figure)\n130\\.     self.widgetize(ds,self.ix,self.iy,touch.x,touch.y)\n```", "```py\n    131\\. # File name: comicwidgets.py\n    132\\. from kivy.uix.scatter import Scatter\n    133\\. from kivy.graphics import Line\n    134\\. \n    135\\. class DraggableWidget(Scatter):\n    ```", "```py\n    136\\. def on_touch_down(self, touch):\n    137\\.     if self.collide_point(touch.x, touch.y):\n    138\\.         self.touched = True\n    139\\.         self.select()\n    140\\.         super(DraggableWidget, self).on_touch_down(touch)\n    141\\.         return True\n    142\\.     return super(DraggableWidget, self).on_touch_down(touch)\n    ```", "```py\n    143\\. def on_pos(self, instance, value):\n    144\\.     if self.selected and self.touched:\n    145\\.         go = self.parent.general_options\n    146\\.         go.translation = (self.center_x- self.ix, self.center_y - self.iy)\n    147\\.         self.ix = self.center_x\n    148\\.         self.iy = self.center_y\n    ```", "```py\n    149\\.     def on_rotation(self, instance, value):\n    150\\.         if self.selected and self.touched:\n    151\\.             go = self.parent.general_options\n    152\\.             go.rotation = value\n    153\\. \n    154\\.     def on_scale(self, instance, value):\n    155\\.         if self.selected and self.touched:\n    156\\.             go = self.parent.general_options\n    157\\.             go.scale = value\n    ```", "```py\n158\\. # File name: generaloptions.py\n159\\. from kivy.uix.boxlayout import BoxLayout\n160\\. from kivy.properties import NumericProperty, ListProperty\n161\\. \n162\\. class GeneralOptions(BoxLayout):\n163\\.     group_mode = False\n164\\.     translation = ListProperty(None)\n165\\.     rotation = NumericProperty(0)\n166\\.     scale = NumericProperty(0)\n```", "```py\n167    def on_rotation(self, instance, value):\n168\\.         for child in self.drawing_space.children:\n169\\.             if child.selected and not child.touched:\n170\\.                 child.rotation = value\n171\\. \n172\\.     def on_scale(self, instance, value):\n173\\.         for child in self.drawing_space.children:\n174\\.             if child.selected and not child.touched:\n175\\.                 child.scale = value\n```", "```py\n176\\.     def on_translation(self,instance,value):\n177\\.         for child in self.drawing_space.children:\n178\\.             if child.selected and not child.touched:\n179\\.                 child.translate(*self.translation)\n```", "```py\n180\\. # File Name: gesturerecorder.py\n181\\. from kivy.app import App\n182\\. from kivy.uix.floatlayout import FloatLayout\n183\\. from kivy.graphics import Line, Ellipse\n184\\. from kivy.gesture import Gesture, GestureDatabase\n185\\. \n186\\. class GestureRecorder(FloatLayout):\n187\\. \n188\\.     def on_touch_down(self, touch):\n189\\.         self.points = [touch.pos]\n190\\.         with self.canvas:\n191\\.             Ellipse(pos=(touch.x-5,touch.y-5),size=(10,10))\n192\\.             self.Line = Line(points=(touch.x, touch.y))\n193\\. \n194\\.     def on_touch_move(self, touch):\n195\\.         self.points += [touch.pos]\n196\\.         self.line.points += [touch.x, touch.y]\n197\\. \n198\\.     def on_touch_up(self, touch):\n199\\.         self.points += [touch.pos]\n200\\.         gesture = Gesture()\n201\\.         gesture.add_stroke(self.points)\n202\\.         gesture.normalize()\n203\\.         gdb = GestureDatabase()\n204\\.         print (\"Gesture:\", gdb.gesture_to_str(gesture).decode(encoding='UTF-8'))\n205\\. \n206\\. class GestureRecorderApp(App):\n207\\.     def build(self):\n208\\.         return GestureRecorder()\n209\\. \n210\\. if __name__==\"__main__\":\n211\\.     GestureRecorderApp().run()\n```", "```py\n212\\. # File Name: gestures.py\n213\\. line45_str = 'eNq1VktuI0cM3fdFrM0I...\n214\\. circle_str = 'eNq1WMtuGzkQvM+P2JcI/Sb5A9rrA...\n215\\. cross_str = 'eNq1V9tuIzcMfZ8fSV5qiH...\n```", "```py\n216\\. # File name: drawingspace.py\n217\\. from kivy.uix.stencilview import StencilView\n218\\. from kivy.gesture import Gesture, GestureDatabase\n219\\. from gestures import line45_str, circle_str, cross_str\n220\\. \n221\\. class DrawingSpace(StencilView):\n```", "```py\n    222\\. def __init__(self, *args, **kwargs):\n    223\\.     super(DrawingSpace, self).__init__()\n    224\\.     self.gdb = GestureDatabase()\n    225\\.     self.line45 = self.gdb.str_to_gesture(line45_str)\n    226\\.     self.circle = self.gdb.str_to_gesture(circle_str)\n    227\\.     self.cross = self.gdb.str_to_gesture(cross_str)\n    228\\.     self.line135 = self.line45.rotate(90)\n    229\\.     self.line225 = self.line45.rotate(180)\n    230\\.     self.line315 = self.line45.rotate(270)\n    231\\.     self.gdb.add_gesture(self.line45)\n    232\\.     self.gdb.add_gesture(self.line135)\n    233\\.     self.gdb.add_gesture(self.line225)\n    234\\.     self.gdb.add_gesture(self.line315)\n    235\\.     self.gdb.add_gesture(self.circle)\n    236\\.     self.gdb.add_gesture(self.cross)\n    ```", "```py\n    237\\. def activate(self):\n    238\\.     self.tool_box.disabled = True\n    239\\.     self.bind(on_touch_down=self.down,\n    240\\.              on_touch_move=self.move,\n    241\\.              on_touch_up=self.up)\n    242\\. \n    243\\. def deactivate(self):\n    244\\.     self.unbind(on_touch_down=self.down,\n    245\\.              on_touch_move=self.move,\n    246\\.              on_touch_up=self.up)\n    247\\.     self.tool_box.disabled = False\n    ```", "```py\n    248\\. def down(self, ds, touch):\n    249\\.    if self.collide_point(*touch.pos):\n    250\\.        self.points = [touch.pos]\n    251\\.        self.ix = self.fx = touch.x\n    252\\.        self.iy = self.fy = touch.y\n    253\\.    return True\n    254\\. \n    255\\. def move(self, ds, touch):\n    256\\.     if self.collide_point(*touch.pos):\n    257\\.         self.points += [touch.pos]\n    258\\.         self.min_and_max(touch.x, touch.y)\n    259\\.     return True\n    260\\. \n    261\\. def up(self, ds, touch):\n    262\\.     if self.collide_point(*touch.pos):\n    263\\.        self.points += [touch.pos]\n    264\\.        self.min_and_max(touch.x, touch.y)\n    265\\.        gesture = self.gesturize()\n    266\\.        recognized = self.gdb.find(gesture, minscore=0.50)\n    267\\.        if recognized:\n    268\\.            self.discriminate(recognized)\n    269\\.     return True\n    ```", "```py\n    270\\. def gesturize(self):\n    271\\.     gesture = Gesture()\n    272\\.     gesture.add_stroke(self.points)\n    273\\.     gesture.normalize()\n    274\\.     return gesture\n    ```", "```py\n    275\\. def min_and_max(self, x, y):\n    276\\.     self.ix = min(self.ix, x)\n    277\\.     self.iy = min(self.iy, y)\n    278\\.     self.fx = max(self.fx, x)\n    279\\.     self.fy = max(self.fy, y)\n    ```", "```py\n    280\\. def discriminate(self, recognized):\n    281\\.     if recognized[1] == self.cross: \n    282\\.         self.add_stickman()\n    283\\.     if recognized[1] == self.circle: \n    284\\.         self.add_circle()\n    285\\.     if recognized[1] == self.line45:\n    286\\.         self.add_line(self.ix,self.iy,self.fx,self.fy)\n    287\\.     if recognized[1] == self.line135:\n    288\\.         self.add_line(self.ix,self.fy,self.fx,self.iy)\n    289\\.     if recognized[1] == self.line225:\n    290\\.        self.add_line(self.fx,self.fy,self.ix,self.iy)\n    291\\.     if recognized[1] == self.line315:\n    292\\.         self.add_line(self.fx,self.iy,self.ix,self.fy)\n    ```", "```py\n    293\\. def add_circle(self):\n    294\\.     cx = (self.ix + self.fx)/2.0\n    295\\.     cy = (self.iy + self.fy)/2.0\n    296\\.    self.tool_box.tool_circle.widgetize(self, cx, cy, self .fx, self.fy)\n    297\\. \n    298\\. def add_line(self,ix,iy,fx,fy):\n    299\\.     self.tool_box.tool_line.widgetize(self,ix,iy,fx,fy)\n    300\\. \n    301\\. def add_stickman(self):\n    302\\.     cx = (self.ix + self.fx)/2.0\n    303\\.     cy = (self.iy + self.fy)/2.0\n    304\\.     self.tool_box.tool_stickman.draw(self,cx,cy)\n    ```", "```py\n    305\\. def on_children(self, instance, value):\n    306\\.     self.status_bar.counter = len(self.children)\n    ```", "```py\n307\\. def gestures(self, instance, value):\n308\\.     if value == 'down':\n309\\.         self.drawing_space.activate()\n310\\.     else:\n311\\.         self.drawing_space.deactivate()\n```", "```py\n312\\. # File name: statusbar.py\n313\\. import kivy\n314\\. from kivy.uix.boxlayout import BoxLayout\n315\\. from kivy.properties import NumericProperty, ObjectProperty\n316\\. from kivy.uix.behaviors import ButtonBehavior\n317\\. from kivy.uix.popup import Popup\n318\\. from kivy.uix.label import Label\n319\\. \n320\\. class StatusBar(ButtonBehavior, BoxLayout):\n```", "```py\n321\\.     def on_press(self):\n322\\.         the_content = Label(text = \"Kivy: Interactive Apps and Games in Python\\nRoberto Ulloa, Packt Publishing\")\n323\\.         the_content.color = (1,1,1,1)\n324\\.         popup = Popup(title='The Comic Creator', content = the_content, size_hint=(None, None), size=(350, 150))\n325\\.         popup.open()\n```", "```py\n326\\. # File name: comiccreator.py\n327\\. import kivy\n328\\. from kivy.app import App\n329\\. from kivy.lang import Builder\n330\\. from kivy.uix.screenmanager import ScreenManager\n331\\. from kivy.core.window import Window\n332\\. \n333\\. Window.clearcolor = (1, 1, 1, 1)\n334\\. \n335\\. Builder.load_file('style.kv')\n```", "```py\n336\\. # File name: style.kv\n337\\. \n338\\. <Label>:\n339\\.     bold: True\n340\\.     color: 0,.3,.6,1\n341\\. \n342\\. <Button>:\n343\\.     background_normal: 'normal.png'\n344\\.     background_down: 'down.png'\n345\\.     color: 1,1,1,1\n```", "```py\n346\\. # File name: style.py\n347\\. from kivy.graphics import Line\n348\\. from kivy.factory import Factory\n349\\. \n350\\. class NewLine (Line):\n351\\.     def __init__(self, **kwargs):\n352\\.         if not kwargs.get('width'):\n353\\.             kwargs['width'] = 1.5\n354\\.         Line.__init__(self, **kwargs)\n355\\. \n356\\. Factory.unregister('Line')\n357\\. Factory.register('Line', cls=NewLine)\n```", "```py\n358\\. # File name: toolbox.py\n359\\. import math\n360\\. from kivy.uix.togglebutton import ToggleButton\n361\\. from kivy.graphics import Color\n362\\. from style import Line\n363\\. from comicwidgets import StickMan, DraggableWidget\n```"]