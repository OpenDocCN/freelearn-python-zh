["```py\npython3 --version \n```", "```py\nPython 3.12.3 \n```", "```py\npython -m venv my_env \n```", "```py\npy -m venv my_env \n```", "```py\nsource my_env/bin/activate \n```", "```py\n.\\my_env\\Scripts\\activate \n```", "```py\n(my_env) zenx@pc:~ zenx$ \n```", "```py\npython -m pip install Django~=5.0.4 \n```", "```py\npython -m django --version \n```", "```py\ndjango-admin startproject mysite \n```", "```py\nmysite/\n    manage.py\n    mysite/\n      __init__.py\n      asgi.py\n      settings.py\n      urls.py\n      wsgi.py \n```", "```py\ncd mysite\npython manage.py migrate \n```", "```py\nApplying contenttypes.0001_initial... OK\nApplying auth.0001_initial... OK\nApplying admin.0001_initial... OK\nApplying admin.0002_logentry_remove_auto_add... OK\nApplying admin.0003_logentry_add_action_flag_choices... OK\nApplying contenttypes.0002_remove_content_type_name... OK\nApplying auth.0002_alter_permission_name_max_length... OK\nApplying auth.0003_alter_user_email_max_length... OK\nApplying auth.0004_alter_user_username_opts... OK\nApplying auth.0005_alter_user_last_login_null... OK\nApplying auth.0006_require_contenttypes_0002... OK\nApplying auth.0007_alter_validators_add_error_messages... OK\nApplying auth.0008_alter_user_username_max_length... OK\nApplying auth.0009_alter_user_last_name_max_length... OK\nApplying auth.0010_alter_group_name_max_length... OK\nApplying auth.0011_update_proxy_permissions... OK\nApplying auth.0012_alter_user_first_name_max_length... OK\nApplying sessions.0001_initial... OK \n```", "```py\npython manage.py runserver \n```", "```py\nWatching for file changes with StatReloader\nPerforming system checks...\nSystem check identified no issues (0 silenced).\nJanuary 01, 2024 - 10:00:00\nDjango version 5.0, using settings 'mysite.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C. \n```", "```py\n[01/Jan/2024 10:00:15] \"GET / HTTP/1.1\" 200 16351 \n```", "```py\npython manage.py runserver 127.0.0.1:8001 --settings=mysite.settings \n```", "```py\npython manage.py startapp blog \n```", "```py\nblog/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n        __init__.py\n    models.py\n    tests.py\n    views.py \n```", "```py\nfrom django.db import models\n**class****Post****(models.Model):**\n **title = models.CharField(max_length=****250****)**\n **slug = models.SlugField(max_length=****250****)**\n **body = models.TextField()**\n**def****__str__****(****self****):**\n**return** **self.title** \n```", "```py\nfrom django.db import models\n**from** **django.utils** **import** **timezone**\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n **publish = models.DateTimeField(default=timezone.now)**\ndef __str__(self):\n        return self.title \n```", "```py\nfrom django.db import models\nfrom django.db.models.functions import Now\nclass Post(models.Model):\n    # ...\n    publish = models.DateTimeField(db_default=Now()) \n```", "```py\nclass Post(models.Model):\n    # ...\n    publish = models.DateTimeField(default=timezone.now) \n```", "```py\nfrom django.db import models\nfrom django.utils import timezone\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n **created = models.DateTimeField(auto_now_add=****True****)**\n **updated = models.DateTimeField(auto_now=****True****)**\ndef __str__(self):\n        return self.title \n```", "```py\nfrom django.db import models\nfrom django.utils import timezone\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n**class****Meta****:**\n **ordering = [****'-publish'****]**\ndef __str__(self):\n        return self.title \n```", "```py\nfrom django.db import models\nfrom django.utils import timezone\nclass Post(models.Model):\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    class Meta:\n        ordering = ['-publish']\n **indexes = [**\n **models.Index(fields=[****'-publish'****]),**\n **]**\ndef __str__(self):\n        return self.title \n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n**'blog.apps.BlogConfig'****,**\n] \n```", "```py\nfrom django.db import models\nfrom django.utils import timezone\nclass Post(models.Model):\n**class****Status****(models.TextChoices):**\n **DRAFT =** **'DF'****,** **'Draft'**\n **PUBLISHED =** **'PB'****,** **'Published'**\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n **status = models.CharField(**\n **max_length=****2****,**\n **choices=Status,**\n **default=Status.DRAFT**\n **)**\nclass Meta:\n        ordering = ['-publish']\n        indexes = [\n            models.Index(fields=['-publish']),\n        ]\n    def __str__(self):\n        return self.title \n```", "```py\npython manage.py shell \n```", "```py\n>>> from blog.models import Post\n>>> Post.Status.choices \n```", "```py\n[('DF', 'Draft'), ('PB', 'Published')] \n```", "```py\n>>> Post.Status.labels \n```", "```py\n['Draft', 'Published'] \n```", "```py\n>>> Post.Status.values \n```", "```py\n['DF', 'PB'] \n```", "```py\n>>> Post.Status.names \n```", "```py\n['DRAFT', 'PUBLISHED'] \n```", "```py\n**from** **django.conf** **import** **settings**\nfrom django.db import models\nfrom django.utils import timezone\nclass Post(models.Model):\n    class Status(models.TextChoices):\n        DRAFT = 'DF', 'Draft'\n        PUBLISHED = 'PB', 'Published'\n    title = models.CharField(max_length=250)\n    slug = models.SlugField(max_length=250)\n **author = models.ForeignKey(**\n **settings.AUTH_USER_MODEL,**\n **on_delete=models.CASCADE,**\n **related_name=****'blog_posts'**\n **)**\n    body = models.TextField()\n    publish = models.DateTimeField(default=timezone.now)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    status = models.CharField(\n        max_length=2,\n        choices=Status,\n        default=Status.DRAFT\n    )\n    class Meta:\n        ordering = ['-publish']\n        indexes = [\n            models.Index(fields=['-publish']),\n        ]\n    def __str__(self):\n        return self.title \n```", "```py\npython manage.py makemigrations blog \n```", "```py\nMigrations for 'blog':\n    blog/migrations/0001_initial.py\n        - Create model Post\n        - Create index blog_post_publish_bb7600_idx on field(s)\n          -publish of model post \n```", "```py\npython manage.py sqlmigrate blog 0001 \n```", "```py\nBEGIN;\n--\n-- Create model Post\n--\nCREATE TABLE \"blog_post\" (\n  \"id\" integer NOT NULL PRIMARY KEY AUTOINCREMENT,\n  \"title\" varchar(250) NOT NULL,\n  \"slug\" varchar(250) NOT NULL,\n  \"body\" text NOT NULL,\n  \"publish\" datetime NOT NULL,\n  \"created\" datetime NOT NULL,\n  \"updated\" datetime NOT NULL,\n  \"status\" varchar(10) NOT NULL,\n  \"author_id\" integer NOT NULL REFERENCES \"auth_user\" (\"id\") DEFERRABLE INITIALLY DEFERRED);\n--\n-- Create blog_post_publish_bb7600_idx on field(s) -publish of model post\n--\nCREATE INDEX \"blog_post_publish_bb7600_idx\" ON \"blog_post\" (\"publish\" DESC);\nCREATE INDEX \"blog_post_slug_b95473f2\" ON \"blog_post\" (\"slug\");\nCREATE INDEX \"blog_post_author_id_dd7a8485\" ON \"blog_post\" (\"author_id\");\nCOMMIT; \n```", "```py\npython manage.py migrate \n```", "```py\nApplying blog.0001_initial... OK \n```", "```py\npython manage.py createsuperuser \n```", "```py\nUsername (leave blank to use 'admin'): admin\nEmail address: admin@admin.com\nPassword: ********\nPassword (again): ******** \n```", "```py\nSuperuser created successfully. \n```", "```py\npython manage.py runserver \n```", "```py\nfrom django.contrib import admin\n**from** **.models** **import** **Post**\n**admin.site.register(Post)** \n```", "```py\nfrom django.contrib import admin\nfrom .models import Post\n**@admin.register(****Post****)**\n**class****PostAdmin****(admin.ModelAdmin):**\n **list_display = [****'title'****,** **'slug'****,** **'author'****,** **'publish'****,** **'status'****]** \n```", "```py\nfrom django.contrib import admin\nfrom .models import Post\n@admin.register(Post)\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'author', 'publish', 'status']\n **list_filter = [****'status'****,** **'created'****,** **'publish'****,** **'author'****]**\n **search_fields = [****'****title'****,** **'body'****]**\n **prepopulated_fields = {****'slug'****: (****'title'****,)}**\n **raw_id_fields = [****'author'****]**\n **date_hierarchy =** **'publish'**\n **ordering = [****'status'****,** **'publish'****]** \n```", "```py\nfrom django.contrib import admin\nfrom .models import Post\n@admin.register(Post)\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['title', 'slug', 'author', 'publish', 'status']\n    list_filter = ['status', 'created', 'publish', 'author']\n    search_fields = ['title', 'body']\n    prepopulated_fields = {'slug': ('title',)}\n    raw_id_fields = ['author']\n    date_hierarchy = 'publish'\n    ordering = ['status', 'publish']\n **show_facets = admin.ShowFacets.ALWAYS** \n```", "```py\npython manage.py shell \n```", "```py\n>>> from django.contrib.auth.models import User\n>>> from blog.models import Post\n>>> user = User.objects.get(username='admin')\n>>> post = Post(title='Another post',\n...             slug='another-post',\n...             body='Post body.',\n...             author=user)\n>>> post.save() \n```", "```py\n>>> user = User.objects.get(username='admin') \n```", "```py\n>>> post = Post(title='Another post', slug='another-post', body='Post body.', author=user) \n```", "```py\n>>> post.save() \n```", "```py\n>>> Post.objects.create(title='One more post',\n                    slug='one-more-post',\n                    body='Post body.',\n                    author=user) \n```", "```py\n>>> user, created = User.objects.get_or_create(username='user2') \n```", "```py\n>>> post.title = 'New title'\n>>> post.save() \n```", "```py\n>>> all_posts = Post.objects.all() \n```", "```py\n>>> Post.objects.all()\n<QuerySet [<Post: Who was Django Reinhardt?>, <Post: New title>]> \n```", "```py\n>>> Post.objects.filter(title='Who was Django Reinhardt?') \n```", "```py\n>>> posts = Post.objects.filter(title='Who was Django Reinhardt?')\n>>> print(posts.query) \n```", "```py\nSELECT \"blog_post\".\"id\", \"blog_post\".\"title\", \"blog_post\".\"slug\", \"blog_post\".\"author_id\", \"blog_post\".\"body\", \"blog_post\".\"publish\", \"blog_post\".\"created\", \"blog_post\".\"updated\", \"blog_post\".\"status\" FROM \"blog_post\" WHERE \"blog_post\".\"title\" = Who was Django Reinhardt? ORDER BY \"blog_post\".\"publish\" DESC \n```", "```py\n>>> Post.objects.filter(id__exact=1) \n```", "```py\n>>> Post.objects.filter(id=1) \n```", "```py\n>>> Post.objects.filter(title__iexact='who was django reinhardt?') \n```", "```py\n>>> Post.objects.filter(title__contains='Django') \n```", "```py\n>>> Post.objects.filter(title__icontains='django') \n```", "```py\n>>> Post.objects.filter(id__in=[1, 3]) \n```", "```py\n>>> Post.objects.filter(id__gt=3) \n```", "```py\n>>> Post.objects.filter(id__gte=3) \n```", "```py\n>>> Post.objects.filter(id__lt=3) \n```", "```py\n>>> Post.objects.filter(id__lte=3) \n```", "```py\n>>> Post.objects.filter(title__istartswith='who') \n```", "```py\n>>> Post.objects.filter(title__iendswith='reinhardt?') \n```", "```py\n>>> from datetime import date\n>>> Post.objects.filter(publish__date=date(2024, 1, 31)) \n```", "```py\n>>> Post.objects.filter(publish__year=2024) \n```", "```py\n>>> Post.objects.filter(publish__month=1) \n```", "```py\n>>> Post.objects.filter(publish__day=1) \n```", "```py\n>>> Post.objects.filter(publish__date__gt=date(2024, 1, 1)) \n```", "```py\n>>> Post.objects.filter(author__username='admin') \n```", "```py\n>>> Post.objects.filter(author__username__starstwith='ad') \n```", "```py\n>>> Post.objects.filter(publish__year=2024, author__username='admin') \n```", "```py\n>>> Post.objects.filter(publish__year=2024) \\\n>>>             .filter(author__username='admin') \n```", "```py\n>>> Post.objects.filter(publish__year=2024) \\\n>>>             .exclude(title__startswith='Why') \n```", "```py\n>>> Post.objects.order_by('title') \n```", "```py\n>>> Post.objects.order_by('-title') \n```", "```py\n>>> Post.objects.order_by('author', 'title') \n```", "```py\n>>> Post.objects.order_by('?') \n```", "```py\n>>> Post.objects.all()[:5] \n```", "```py\n>>> Post.objects.all()[3:6] \n```", "```py\n>>> Post.objects.order_by('?')[0] \n```", "```py\n>>> Post.objects.filter(id_lt=3).count()\n2 \n```", "```py\n>>> Post.objects.filter(title__startswith='Why').exists()\nFalse \n```", "```py\n>>> post = Post.objects.get(id=1)\n>>> post.delete() \n```", "```py\n>>> from django.db.models import Q\n>>> starts_who = Q(title__istartswith='who')\n>>> starts_why = Q(title__istartswith='why')\n>>> Post.objects.filter(starts_who | starts_why) \n```", "```py\n**class****PublishedManager****(models.Manager):**\n**def****get_queryset****(****self****):**\n**return** **(**\n**super****().get_queryset().****filter****(status=Post.Status.PUBLISHED)**\n **)**\nclass Post(models.Model):\n    # model fields\n# ...\n **objects = models.Manager()** **# The default manager.**\n **published = PublishedManager()** **# Our custom manager.**\nclass Meta:\n        ordering = ['-publish']\n        indexes = [\n            models.Index(fields=['-publish']),\n        ]\n    def __str__(self):\n        return self.title \n```", "```py\npython manage.py shell \n```", "```py\n>>> from blog.models import Post\n>>> Post.published.filter(title__startswith='Who') \n```", "```py\nfrom django.shortcuts import render\n**from** **.models** **import** **Post**\n**def****post_list****(****request****):**\n **posts = Post.published.****all****()**\n**return** **render(**\n **request,**\n**'blog/post/list.html'****,**\n **{****'posts'****: posts}**\n **)** \n```", "```py\nfrom django.http import Http404\ndef post_detail(request, id):\n    try:\n        post = Post.published.get(id=id)\n    except Post.DoesNotExist:\n        raise Http404(\"No Post found.\")\n    return render(\n        request,\n        'blog/post/detail.html',\n        {'post': post}\n    ) \n```", "```py\nfrom django.shortcuts import **get_object_or_404,** render\n# ...\ndef post_detail(request, id):\n **post = get_object_or_404(**\n **Post,**\n**id****=****id****,**\n **status=Post.Status.PUBLISHED**\n **)**\nreturn render(\n        request,\n        'blog/post/detail.html',\n        {'post': post}\n    ) \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'blog'\nurlpatterns = [\n    # post views\n    path('', views.post_list, name='post_list'),\n    path('<int:id>/', views.post_detail, name='post_detail'),\n] \n```", "```py\nfrom django.contrib import admin\nfrom django.urls import **include,** path\nurlpatterns = [\n    path('admin/', admin.site.urls),\n **path(****'blog/'****, include(****'blog.urls'****, namespace=****'blog'****)),**\n] \n```", "```py\ntemplates/\n    blog/\n        base.html\n        post/\n            list.html\n            detail.html \n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n<link href=\"{% static \"css/blog.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n<div id=\"sidebar\">\n<h2>My blog</h2>\n<p>This is my blog.</p>\n</div>\n</body>\n</html> \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% for post in posts %}\n    <h2>\n<a href=\"{% url 'blog:post_detail' post.id %}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n{% endblock %} \n```", "```py\npython manage.py runserver \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body|linebreaks }}\n{% endblock %} \n```", "```py\ndjango-admin startproject mysite \n```", "```py\npython manage.py startapp blog \n```", "```py\npython manage.py migrate \n```", "```py\npython manage.py makemigrations blog \n```", "```py\npython manage.py sqlmigrate blog 0001 \n```", "```py\npython manage.py runserver \n```", "```py\npython manage.py runserver 127.0.0.1:8001 --settings=mysite.settings \n```", "```py\npython manage.py shell \n```", "```py\npython manage.py createsuperuser \n```"]