- en: Chapter 5. Connecting Physical Computing Systems to the Internet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be focusing on connecting the BeagleBone board to
    the Internet to connect the physical computing systems that we build to the Internet.
    First we will look into giving Internet access to the BeagleBone board via Ethernet,
    then we will learn how to add Wi-Fi capability to the BeagleBone board so that
    the system we build can be placed anywhere where we have Wi-Fi access, and so
    that we are not restricted to setting up the system only where the Ethernet is
    available. Once we are done with this, we will go ahead and build two projects;
    in the first one we will send an e-mail alert whenever the temperature sensor
    reading goes above a set level in the Python program running on the BeagleBone
    board. The next one will be a basic beginner project on Internet of Things for
    you to get started where the BeagleBone board will be uploading the temperature
    sensor data to a cloud server on the Internet. So basically, we will be using
    the knowledge we learnt in previous chapters, in this chapter, in order to take
    our previous projects to the next level. We''ll do this by connecting them to
    the Internet and by performing operations on the cloud and on messaging services
    such as e-mail. The contents of the chapter are divided into the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving Internet access to your BeagleBone board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding Wi-Fi to your BeagleBone board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Intermediate level project: E-mail alert fire alarm – the Python program will
    send an e-mail if the temperature sensor readings go above a set level'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advanced project: Sensor data to cloud – a Python program will upload the temperature
    sensor data to an open source or freely available cloud service using the HTTP
    web service'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This topic will cover what parts you need to get started with this chapter.
    These can be purchased from your favorite electrical hobby store or can simply
    be ordered online.
  prefs: []
  type: TYPE_NORMAL
- en: Materials needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Following are the materials that we will need before moving ahead:'
  prefs: []
  type: TYPE_NORMAL
- en: 1x BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x microSD card with latest version of Debian flashed on it to boot the BeagleBone
    board from the microSD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 5V DC, 2A power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x Ethernet cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x LM35 temperature sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x compatible Wi-Fi dongle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x BreadBoard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A few jumper wires
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Giving Internet access to your BeagleBone board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Giving Internet access to the BeagleBone board via the Ethernet is very simple.
    All you need to do is connect one end of Ethernet cable to the BeagleBone board,
    and the other end to a router with an Internet connection. The BeagleBone board
    will obtain the IP address dynamically from the router using DHCP and get Internet
    access. To check this you can just type in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ping www.google.com`'
  prefs: []
  type: TYPE_NORMAL
- en: You will get the response as shown in the following screenshot. This means you
    have a working Internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: '![Giving Internet access to your BeagleBone board](img/4602_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Actually, what the ping command does is, it tests the connection and latency
    between two network connections. The ping command sends packets of data to the
    other network computer, in our case the [www.google.com](http://www.google.com)
    server, or the IP address of that server. You can see next to [www.google.com](http://www.google.com)
    in the output above, the global IP address of the server is shown. The picture
    shows how the ping command measures the time taken to get a response from that
    server computer, where the time is in milliseconds.
  prefs: []
  type: TYPE_NORMAL
- en: So, it's as simple as that to give Internet access to the BeagleBone board,
    running a working operating system such as Linux. This will automatically obtain
    the IP address from the Internet router to which it is connected using DHCP. But
    in most of the cases we will need a setup where the real-time embedded system
    is wireless which gives more flexibility in placing the system at any place for
    its operation instead of restricting the setup to be connected to Ethernet cable.
    The next topic of this chapter will focus on how to setup Wi-Fi access to BeagleBone
    board.
  prefs: []
  type: TYPE_NORMAL
- en: Adding Wi-Fi to the BeagleBone board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To add Wi-Fi capability to the BeagleBone board, let''s connect a Wi-Fi dongle
    in the USB port available on the BeagleBone board, as shown in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have connected the USB Wi-Fi dongle you can check whether it is connected
    or not by typing the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`lsusb`: This is shown in the following screenshot where the USB Wi-Fi dongle
    is highlighted, that is **Atheros Communications, Inc. AR9271 802.11n**:![Adding
    Wi-Fi to the BeagleBone board](img/4602_05_03.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iwconfig`: `iwconfig` will show you the details of the wireless LAN connection
    status, as shown in the previous screenshot, where you can see that wlan1, which
    is highlighted, shows the detail that is not associated with any access point
    as of now.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Our next step is to connect the Wi-Fi dongle to the Wi-Fi access point. To do
    this we will be using a program called `wicd-curses`, which is available in Debian
    by default.
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the program we need to enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: sudo wicd-curses![Adding Wi-Fi to the BeagleBone board](img/4602_05_64.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you execute the command you will get an interactive program window as
    shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see in the preceding screenshot that the program states there are **No
    wireless networks found**. This is because we need to set up the USB Wi-Fi device
    first, and then search for the available Wi-Fi access points in the range. To
    do this, follow the next steps as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Press the *Tab* button once to open the configuration menu, – you should get
    the screen as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you get this screen, then press page up button once – it should highlight
    the wireless interface area, and then you need to type **wlan1** in it as shown
    in the following screenshot. If you remember, **wlan1** is what we had in the
    details of the wireless interface when we used the command `iwconfig` to get details
    of the interface created because of the USB Wi-Fi dongle.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, press the *F10* key to save the configuration. Once you have saved it,
    it will take you back to the previous main screen as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you need to press the *R* key once to refresh the program and search for
    available Wi-Fi access points in the range that the Wi-Fi dongle can connect to.
    Once you press the *R* key you will get a screen as shown in the following screenshot
    saying that it''s searching for available networks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, after scanning, it will show the screen as shown in the following screenshot,
    listing out the available Wi-Fi access points in the range:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have the list of available Wi-Fi access points you can choose the
    one to which you want the Wi-Fi dongle to connect by using the arrow keys up and
    down to select the access point. As you can see in the following screenshot, the
    access points get highlighted as you move the arrow keys. In this picture, **TERO**
    is highlighted:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have selected the network you want to connect to, when its highlighted
    as shown in the preceding picture, press the **right arrow** key on the keyboard
    and you should see the screen as shown in following screenshot which is asking
    for a password to connect:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You need to set the options as shown in the following screenshot to get a DHCP-based
    IP allocation from the router, or if you want to have a static IP for your BeagleBone
    board, you can do that as well. Use the *Tab* key to switch fields on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, set the hostname and enter the passkey in the key field as shown in the
    preceding screenshot, and save by pressing the *F10* key. Once you have done that
    you will get back to the main screen with a list of Wi-Fi access points available,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can press the *C* key connect to the network. Once you press it, your
    shell connection will be lost, as the BeagleBone board will get disconnected from
    the network via the Ethernet connection through which you have logged in. Now,
    the BeagleBone board will connect to the network via Wi-Fi, so the IP address
    of the BeagleBone board must have changed. To check this, we need to login to
    the router configuration page of the same router as we used to connect to the
    Wi-Fi when we connected the BeagleBone board. Think back to what we did in the
    first chapter to find the IP address of the BeagleBone board connected via the
    Ethernet to the router. Now we need to do the same with the Wi-Fi connection.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the router page as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Check the list of DHCP clients:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, you can see the IP address of the BeagleBone board connected to the network
    via Wi-Fi and, if you remember, BeagleBone was the hostname we mentioned when
    configuring the Wi-Fi with our passkey. Now let''s login into the Linux shell
    using this new IP address we have assigned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once logged in using the same user ID and password, type the command `iwconfig`
    again, and you can see that wlan1 is connected to the SSID that we configured
    and connected, which you can see it in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now type in the `ping` command to check the Internet connectivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding Wi-Fi to the BeagleBone board](img/4602_05_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once we have the Internet connection properly working on the BeagleBone board,
    we can move on to the next topics: two projects with the system connected to the
    Internet.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Intermediate level project: An e-mail alert fire alarm'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First of all, as in the previous chapter, take three berg wires and connect
    the LM35 temperature sensor to the BeagleBone board, as per the circuit diagram
    shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then we will turn on the BeagleBone board and login to the Linux shell to start
    coding it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Python console to learn and test how to send an e-mail using Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Our first step will be to import the `smtplib` into Python, which is the mail
    transfer protocol library with the predefined function that we will be using in
    the program.
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next create a variable to store the e-mail ID to which you need to send the
    e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then create the variables where you need to store the e-mail ID and password
    of the account from which you want to send the e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Create an SMTP object with a Gmail hostname and port number **587**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'EHLO is just like HELO except that the server''s response text provides computer-readable
    information about the server''s abilities. The response of this helps us to confirm
    whether the SMTP server we created is at our service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we need to create a secure connection. We already have a connection, which
    we checked in the last step, but it is insecure. STARTTLS is a way to take an
    existing insecure connection and upgrade it to a secure connection using SSL/TLS.
    You can do this as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once again use EHLO as shown in the picture below to check and create the running
    SMTP instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Our next step is to create the header variable with information about the sender
    e-mail address, the receiver e-mail address, and details about the subject of
    the e-mail:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We need to create another variable where we will add the header to the message
    we are going to send in the e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you print it out using the `print msg` command you can see how it appears
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now we have the `msg` variable with information of the sender e-mail, receiver
    e-mail, subject of the e-mail and message of the e-mail as shown in preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our next step is to login to the server using the sender e-mail and password.
    You can do this as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you get the response as shown in the preceding screenshot, then you have
    successfully logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next send the e-mail using the `sendmail` function with the receiver e-mail
    ID, sender e-mail ID and message as arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have sent it you can go ahead and close the SMTP server and log out
    from it as shown following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By now you must have received the e-mail on the receiver e-mail ID where you
    can see the subject **Python Email Test** just as we mentioned in Python, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you open the e-mail you can see this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We can actually see the message content is in a similar format to what we printed
    out on the Python console. Click on the **Show original** option on Gmail to see
    the original text e-mail, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on **Show original** you will see the e-mail as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the highlighted part in the mail, which is exactly the same as
    the message we composed and sent from the Python console, as shown following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can exit the Python console now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s go ahead and write the Python program to send an e-mail whenever
    the temperature goes too high. You can just edit the code from our project in
    the previous chapter and save it with a new name as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_39.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have saved it, you can run the code as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_40.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You should get an e-mail now as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hold a flame near to the sensor as shown in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_42.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output of the running Python code will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And you will get an e-mail as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Intermediate level project: An e-mail alert fire alarm](img/4602_05_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'So, that ends our project. When you remove the flame, it will again send you
    an e-mail saying that the temperature is normal. Here is how the code works: whenever
    there is a change in the temperature level, that is if the temperature rises above
    a set or below a set limit, it will send an e-mail saying that the temperature
    is high or the temperature is low, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike in this project, where a decision is made using the temperature measured
    with a temperature sensor, and then an email is sent based on this decision, the
    next project will directly upload the temperature sensor data to the cloud server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced level project: Uploading sensor data to a web cloud'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The connections are similar to the previous project, the only difference in
    that will be writing a new Python program to upload data to a freely available
    cloud server using HTTP call methods.
  prefs: []
  type: TYPE_NORMAL
- en: With the same connections as the previous project, connect the temperature sensor
    to the BeagleBone board.
  prefs: []
  type: TYPE_NORMAL
- en: Then the first thing we need to do is setup the cloud server to which we need
    to upload data. We will be using a freely available cloud storage space website
    specially setup for IoT applications. The website is [www.thingspeak.com](http://www.thingspeak.com),
    We chose to use this cloud solution out of the many available because ThingSpeak
    makes it very simple to upload data from hardware to a cloud for IoT applications.
    They have a lot of examples for different hardware development boards used for
    different applications. Looking at these wide variety of examples and easy APIs
    will help you experiment a lot more on your own using the BeagleBone board than
    what we do in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The first thing you need to do on this website is signup and create an account:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the account is created, and you can login into your account, you will
    see the screen as shown in the following screenshot, and will need to click on
    **New Channel**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on **New Channel** it will ask for details of the same. Fill
    them in as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_50.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have entered the details you can click on **Save Channel**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_51.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can see the channel with the field as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_52.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next we should look at the API provided by the ThingSpeak website to update
    data to the cloud server.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the details of the API of the HTTP call that you need to make to
    the ThingSpeak server in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_53.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'As highlighted in the preceding screenshot, we can use HTTP POST data to update
    data to the cloud server. The next steps will show you how to update data to the
    cloud server from Python using this HTTP POST call:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open the Python interactive console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_54.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we need to import the `requests` module, which is a Python library that
    has built in functions to make HTTP requests on webservers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_55.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Next we can directly try making the HTTP POST request to the server using the
    API that was given as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_56.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The highlighted part is the parameter you pass to the server when you are make
    the POST call to `https://api.thingspeak.com/update.json` URL.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that we have mentioned `field1=25` which will be updated on the
    ThingSpeak server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The response will be stored in variable `r`, and when you `print r`, if you
    get the response as `200`, then the data was updated successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_57.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have the response as `200`, the data is updated on the webserver as
    you can see in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_58.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Perform the HTTP post call with `field1` data equal to `10`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_59.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then you can see that field1 is updated with new data at that time instant:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_60.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we will go ahead and write the code to update the temperature data to the
    cloud continuously. We can use our `TestLM35.py` code to make changes in it and
    save it with a new name to update the temperature data every 61 seconds to the
    [https://thingspeak.com/](https://thingspeak.com/) server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_61.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you run the program, the output will be as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_62.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can use *Ctrl* + *C* to end the program and exit.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, if you see the data on the field1 Chart on the ThingSpeak website, you
    can see that the data has been updated as shown in the pictures below. You can
    see the time stamp and see that the interval between the two instances of data
    update is 1 minute, and the temperature reading value also matches what we printed
    on the output on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced level project: Uploading sensor data to a web cloud](img/4602_05_63.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, we have successfully written a program that updates data and stores it in
    a cloud server every one minute.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we learnt about giving Internet access to the BeagleBone board
    through Wi-Fi, and sending an e-mail alert whenever temperature measured, using
    a temperature sensor connected to BeagleBone board, goes high or low, depending
    on the threshold value set in the program. We also saw how we can upload data
    to the cloud web server using HTTP requests made to the server from the BeagleBone
    board using Python. So, we have learnt how to set up basic level Internet of Things
    projects in this chapter. You can go ahead and explore the options of using the
    `requests` module in Python to use HTTP Put, Post, and Get requests on various
    freely available open source cloud servers built for IoT which are just like [https://thingspeak.com/](https://thingspeak.com/),
    which we used in this chapter. There are options where, instead of uploading data
    using an HTTP post request, you can get data from a cloud server; that is you
    can read data from the cloud server and print it on the Python program. You can
    read data from the server instead of uploading data, just like we did in this
    chapter. I would suggest you explore all such possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter we will go ahead and set up our own web server and connect
    it to the Internet. Once you learn that, in future if you can have one BeagleBone
    board acting as a webserver, instead of the third-party server we used in this
    chapter, another BeagleBone board may be uploading data to the server we setup
    using another BeagleBone board.
  prefs: []
  type: TYPE_NORMAL
