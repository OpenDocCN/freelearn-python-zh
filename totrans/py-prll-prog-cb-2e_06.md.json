["```py\nimport socket\nimport time\n```", "```py\nserversocket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n```", "```py\nhost=socket.gethostname()\n```", "```py\nport=9999\n```", "```py\nserversocket.bind((host,port))\n```", "```py\nserversocket.listen(5)\n```", "```py\nwhile True:\n```", "```py\nclientsocket,addr=serversocket.accept()\n```", "```py\nprint (\"Connected with[addr],[port]%s\"%str(addr))\n```", "```py\ncurrentTime=time.ctime(time.time())+\"\\r\\n\"\n```", "```py\nclientsocket.send(currentTime.encode('ascii'))\n```", "```py\nclientsocket.close()\n```", "```py\nimport socket\n```", "```py\ns = socket.socket(socket.AF_INET,socket.SOCK_STREAM)\n```", "```py\nhost=socket.gethostname()\n```", "```py\nport=9999\n```", "```py\ns.connect((host,port))\n```", "```py\ns.close()\nprint (\"Time connection server:%s\"%tm.decode('ascii'))\n```", "```py\nC:\\>python server.py \n```", "```py\nC:\\>python client.py\n```", "```py\nConnected with[addr],[port]('192.168.178.11', 58753)\n```", "```py\nTime connection server:Sun Mar 31 20:59:38 2019\n```", "```py\nimport socket\ns =socket.socket()\nhost=socket.gethostname()\nport=60000\ns.connect((host,port))\ns.send('HelloServer!'.encode())\nwith open('received.txt','wb') as f:\n    print ('file opened')\n    while True :\n        print ('receiving data...')\n        data=s.recv(1024)\n        if not data:\n            break\n        print ('Data=>',data.decode())\n        f.write(data)\nf.close()\nprint ('Successfully get the file')\ns.close()\nprint ('connection closed')\n```", "```py\nimport socket\nport=60000\ns =socket.socket()\nhost=socket.gethostname()\ns.bind((host,port))\ns.listen(15)\nprint('Server listening....')\nwhile True :\n    conn,addr=s.accept()\n    print ('Got connection from',addr)\n    data=conn.recv(1024)\n    print ('Server received',repr(data.decode()))\n    filename='mytext.txt'\n    f =open(filename,'rb')\n    l =f.read(1024)\n    while True:\n        conn.send(l)\n        print ('Sent',repr(l.decode()))\n        l =f.read(1024)\n        f.close()\n        print ('Done sending')\n        conn.send('->Thank you for connecting'.encode())\n        conn.close()\n```", "```py\nC:\\>pip install celery\n```", "```py\nC:\\>celery --version\n```", "```py\n4.2.2 (Windowlicker)\n```", "```py\nfrom celery import Celery\n```", "```py\napp = Celery('tasks', broker='amqp://guest@localhost//')\n@app.task\ndef add(x, y):\n    return x + y\n```", "```py\nimport addTask\n```", "```py\nif __name__ == '__main__':\n    result = addTask.add.delay(5,5)\n```", "```py\nC:\\>celery -A addTask worker --loglevel=info\n```", "```py\nMicrosoft Windows [Versione 10.0.17134.648]\n(c) 2018 Microsoft Corporation. Tutti i diritti sono riservati.\n\nC:\\Users\\Giancarlo>cd C:\\Users\\Giancarlo\\Desktop\\Python Parallel Programming CookBook 2nd edition\\Python Parallel Programming NEW BOOK\\chapter_6 - Distributed Python\\esempi\n\nC:\\Users\\Giancarlo\\Desktop\\Python Parallel Programming CookBook 2nd edition\\Python Parallel Programming NEW BOOK\\chapter_6 - Distributed Python\\esempi>celery -A addTask worker --loglevel=info\n\n -------------- celery@pc-giancarlo v4.2.2 (windowlicker)\n---- **** -----\n--- * *** * -- Windows-10.0.17134 2019-04-01 21:32:37\n-- * - **** ---\n- ** ---------- [config]\n- ** ---------- .> app: tasks:0x1deb8f46940\n- ** ---------- .> transport: amqp://guest:**@localhost:5672//\n- ** ---------- .> results: disabled://\n- *** --- * --- .> concurrency: 4 (prefork)\n-- ******* ---- .> task events: OFF (enable -E to monitor tasks in this worker)\n--- ***** -----\n -------------- [queues]\n .> celery exchange=celery(direct) key=celery\n[tasks]\n . addTask.add\n\n[2019-04-01 21:32:37,650: INFO/MainProcess] Connected to amqp://guest:**@127.0.0.1:5672//\n[2019-04-01 21:32:37,745: INFO/MainProcess] mingle: searching for neighbors\n[2019-04-01 21:32:39,353: INFO/MainProcess] mingle: all alone\n[2019-04-01 21:32:39,479: INFO/SpawnPoolWorker-2] child process 10712 calling self.run()\n[2019-04-01 21:32:39,512: INFO/SpawnPoolWorker-3] child process 10696 calling self.run()\n[2019-04-01 21:32:39,536: INFO/MainProcess] celery@pc-giancarlo ready.\n[2019-04-01 21:32:39,551: INFO/SpawnPoolWorker-1] child process 6084 calling self.run()\n[2019-04-01 21:32:39,615: INFO/SpawnPoolWorker-4] child process 2080 calling self.run()\n```", "```py\nC:\\>python addTask_main.py\n```", "```py\n[2019-04-01 21:33:00,451: INFO/MainProcess] Received task: addTask.add[6fc350a9-e925-486c-bc41-c239ebd96041]\n[2019-04-01 21:33:00,452: INFO/SpawnPoolWorker-2] Task addTask.add[6fc350a9-e925-486c-bc41-c239ebd96041] succeeded in 0.0s: 10\n```", "```py\nfrom celery import Celery\napp = Celery('addTask', broker='amqp://guest@localhost//')\n```", "```py\n@app.task\ndef add(x, y):\n    return x + y\n```", "```py\nif __name__ == '__main__':\n    result = addTask.add.delay(5,5)\n```", "```py\nUsage: celery <command> [options]\n```", "```py\npositional arguments:\n args\n\noptional arguments:\n -h, --help             show this help message and exit\n --version              show program's version number and exit\n\nGlobal Options:\n -A APP, --app APP\n -b BROKER, --broker BROKER\n --result-backend RESULT_BACKEND\n --loader LOADER\n --config CONFIG\n --workdir WORKDIR\n --no-color, -C\n --quiet, -q\n```", "```py\n+ Main:\n| celery worker\n| celery events\n| celery beat\n| celery shell\n| celery multi\n| celery amqp\n\n+ Remote Control:\n| celery status\n\n| celery inspect --help\n| celery inspect active\n| celery inspect active_queues\n| celery inspect clock\n| celery inspect conf [include_defaults=False]\n| celery inspect memdump [n_samples=10]\n| celery inspect memsample\n| celery inspect objgraph [object_type=Request] [num=200 [max_depth=10]]\n| celery inspect ping\n| celery inspect query_task [id1 [id2 [... [idN]]]]\n| celery inspect registered [attr1 [attr2 [... [attrN]]]]\n| celery inspect report\n| celery inspect reserved\n| celery inspect revoked\n| celery inspect scheduled\n| celery inspect stats\n\n| celery control --help\n| celery control add_consumer <queue> [exchange [type [routing_key]]]\n| celery control autoscale [max [min]]\n| celery control cancel_consumer <queue>\n| celery control disable_events\n| celery control election\n| celery control enable_events\n| celery control heartbeat\n| celery control pool_grow [N=1]\n| celery control pool_restart\n| celery control pool_shrink [N=1]\n| celery control rate_limit <task_name> <rate_limit (e.g., 5/s | 5/m | \n5/h)>\n| celery control revoke [id1 [id2 [... [idN]]]]\n| celery control shutdown\n| celery control terminate <signal> [id1 [id2 [... [idN]]]]\n| celery control time_limit <task_name> <soft_secs> [hard_secs]\n\n+ Utils:\n| celery purge\n| celery list\n| celery call\n| celery result\n| celery migrate\n| celery graph\n| celery upgrade\n\n+ Debugging:\n| celery report\n| celery logtool\n\n+ Extensions:\n| celery flower\n-------------------------------------------------------------\n```", "```py\nC:\\>pip install Pyro4\n```", "```py\nimport Pyro4\n```", "```py\nclass Server(object):\n    @Pyro4.expose\n    def welcomeMessage(self, name):\n        return (\"Hi welcome \" + str (name))\n```", "```py\ndef startServer():\n```", "```py\nserver = Server()\n```", "```py\ndaemon = Pyro4.Daemon()\n```", "```py\nns = Pyro4.locateNS()\n```", "```py\nuri = daemon.register(server)\n```", "```py\nns.register(\"server\", uri)\n```", "```py\nprint(\"Ready. Object uri =\", uri)\ndaemon.requestLoop()\n```", "```py\nif __name__ == \"__main__\":\n    startServer()\n```", "```py\nimport Pyro4\n```", "```py\nuri = input(\"What is the Pyro uri of the greeting object? \").strip()\nname = input(\"What is your name? \").strip()\n```", "```py\nserver = Pyro4.Proxy(\"PYRONAME:server\")\n```", "```py\nprint(server.welcomeMessage(name))\n```", "```py\nclass Server(object):\n    @Pyro4.expose\n    def welcomeMessage(self, name):\n        return (\"Hi welcome \" + str (name))\n```", "```py\n daemon = Pyro4.Daemon()\n```", "```py\nserver = Pyro4.Proxy(\"PYRONAME:server\")\n```", "```py\nC:\\>python -m Pyro4.naming\n```", "```py\nNot starting broadcast server for localhost.\nNS running on localhost:9090 (127.0.0.1)\nWarning: HMAC key not set. Anyone can connect to this server!\nURI = PYRO:Pyro.NameServer@localhost:9090\n```", "```py\nC:\\>python pyro_server.py\n```", "```py\nReady. Object uri = PYRO:obj_76046e1c9d734ad5b1b4f6a61ee77425@localhost:63269\n```", "```py\nC:\\>python pyro_client.py\n```", "```py\nWhat is your name? \n```", "```py\nWhat is your name? Ruvika\n```", "```py\nHi welcome Ruvika\n```", "```py\nimport Pyro4\n\n@Pyro4.expose\nclass Chain(object):\n    def __init__(self, name, next_server):\n        self.name = name\n        self.next_serverName = next_server\n        self.next_server = None\n\n    def process(self, message):\n        if self.next_server is None:\n            self.next_server = Pyro4.core.Proxy(\"PYRONAME:example.\\\n                chainTopology.\" + self.next_serverName)\n```", "```py\n       if self.name in message:\n            print(\"Back at %s;the chain is closed!\" % self.name)\n            return [\"complete at \" + self.name]\n```", "```py\n        else:\n            print(\"%s forwarding the message to the object %s\" %\\ \n                (self.name, self.next_serverName))\n            message.append(self.name)\n            result = self.next_server.process(message)\n            result.insert(0, \"passed on from \" + self.name)\n            return result\n```", "```py\nimport Pyro4\n\nobj = Pyro4.core.Proxy(\"PYRONAME:example.chainTopology.1\")\nprint(\"Result=%s\" % obj.process([\"hello\"]))\n```", "```py\nimport Pyro4\nimport chainTopology\n```", "```py\ncurrent_server= \"1\"\nnext_server = \"2\"\n```", "```py\nservername = \"example.chainTopology.\" + current_server\ndaemon = Pyro4.core.Daemon()\nobj = chainTopology.Chain(current_server, next_server)\nuri = daemon.register(obj)\nns = Pyro4.locateNS()\nns.register(servername, uri)\nprint(\"server_%s started \" % current_server)\ndaemon.requestLoop()\n```", "```py\nC:\\>python -m Pyro4.naming\nNot starting broadcast server for localhost.\nNS running on localhost:9090 (127.0.0.1)\nWarning: HMAC key not set. Anyone can connect to this server!\nURI = PYRO:Pyro.NameServer@localhost:9090\n```", "```py\nC:\\>python server_chain_1.py\n```", "```py\nC:\\>python server_chain_2.py\n```", "```py\nC:\\>python server_chain_3.py\n```", "```py\nC:\\>python client_chain.py\n```", "```py\nResult=['passed on from 1','passed on from 2','passed on from 3','complete at 1']\n```", "```py\nserver_1 started\n1 forwarding the message to the object 2\n```", "```py\nserver_2 started\n2 forwarding the message to the object 3\n```", "```py\nserver_3 started\n3 forwarding the message to the object 1\n```", "```py\nserver_1 started\n1 forwarding the message to the object 2\nBack at 1; the chain is closed!\n```"]