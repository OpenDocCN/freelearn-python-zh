["```py\nimport ast\n```", "```py\nassignment = \"product_name = 'Iphone X'\"\n```", "```py\nassignment\n\"product_name = 'Iphone X'\"\n```", "```py\nassign_tree = ast.parse(assignment)\n```", "```py\nassign_tree\n```", "```py\n<ast.Module at 0x1b92b3f6520>\n```", "```py\nprint(ast.dump(assign_tree,indent = 4))\n```", "```py\naddfunc = \"\"\"\n```", "```py\na = 1098\n```", "```py\nb = 2032\n```", "```py\nc = a + b\n```", "```py\nprint(c)\n```", "```py\n\"\"\"\n```", "```py\nadd_tree = ast.parse(addfunc)\n```", "```py\nadd_tree\n```", "```py\n<ast.Module at 0x19c9b2bf2e0>\n```", "```py\nprint(ast.dump(add_tree, indent=4))\n```", "```py\nadd_code = compile(add_tree, 'add_tree', 'exec')\n```", "```py\nexec(add_code)\n```", "```py\n3130\n```", "```py\nadd_tree\n```", "```py\n<ast.Module at 0x19c9b2bf2e0>\n```", "```py\nadd_tree.body[2].value.op=ast.Mult()\n```", "```py\nprint(ast.dump(add_tree, indent=4))\n```", "```py\nadd_code = compile(add_tree, 'add_tree', 'exec')\n```", "```py\nexec(add_code)\n```", "```py\n2231136\n```", "```py\n    branch_code = \"\"\"\n    class Branch:\n        '''attributes...'''\n        '''methods...'''\n    \"\"\" \n    ```", "```py\n    branch_tree = ast.parse(branch_code)\n    branch_tree\n    <ast.Module at 0x216ed8b5850>\n    ```", "```py\n    print(ast.dump(branch_tree, indent=4))\n    ```", "```py\n    branch_code = \"\"\"class Branch:\n        branch_id = 1001\n        @staticmethod\n        def get_product(self):\n            return 'product'\n            \"\"\"\n    ```", "```py\n    branch_tree = ast.parse(branch_code)\n    print(ast.dump(branch_tree, indent=4))\n    ```", "```py\n    branch_code = \"\"\"\n    branch_albany = Branch()\n    \"\"\"\n    branch_tree = ast.parse(branch_code)\n    print(ast.dump(branch_tree, indent=4))\n    ```", "```py\n    vegctr = \"\"\"\n    class VegCounter():\n        def return_cart(self,*items):\n            cart_items = list(items)\n            return cart_items\n    veg = VegCounter()\n    print(veg.return_cart('onions','tomatoes','carrots','lettuce'))\n    \"\"\"\n    ```", "```py\n    vegctr_tree = ast.parse(vegctr)\n    print(ast.dump(vegctr_tree, indent=4))\n    ```", "```py\n    vegctr_code = compile(vegctr_tree, 'vegctr_tree', 'exec')\n    exec(vegctr_code)\n    ['onions', 'tomatoes', 'carrots', 'lettuce']\n    ```", "```py\n    vegctr_tree.body[2].value.args[0].args[1].n\n    'tomatoes'\n    ```", "```py\n    vegctr_tree.body[2].value.args[0].args[1].n = 'potatoes'\n    print(ast.dump(vegctr_tree, indent=4))\n    ```", "```py\n    print(ast.unparse(vegctr_tree))\n    ```", "```py\n    class VegCounter:\n        def return_cart(self, *items):\n            cart_items = list(items)\n            return cart_items\n    veg = VegCounter()\n    print(veg.return_cart('onions', 'potatoes', 'carrots', 'lettuce'))\n    ```", "```py\n    class VegCounter():\n        def return_cart(self,*items):\n            cart_items = []\n            for i in items:\n                cart_items.append(i)\n            return cart_items\n    veg = VegCounter()\n    ```", "```py\n    cart = \"\"\"veg.return_cart('onions','tomatoes','carrots','lettuce')\"\"\"\n    cart_tree = ast.parse(cart)\n    print(ast.dump(cart_tree, indent = 4))\n    ```", "```py\nfrom ast import NodeTransformer\n```", "```py\n    class ModifyVegCounter(NodeTransformer):\n        def visit_Constant(self, node):\n            modifiedValue = ast.Constant('item:' + str(node.value))\n            return modifiedValue\n    ```", "```py\n    ModifyVegCounter().visit(cart_tree)\n    print(ast.dump(cart_tree, indent = 4))\n    ```", "```py\n    print(ast.unparse(cart_tree))\n    ```", "```py\nveg.return_cart('item:onions', 'item:tomatoes', 'item:carrots', 'item:lettuce')\n```"]