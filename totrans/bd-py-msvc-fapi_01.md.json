["```py\npython -m pip install --upgrade pip\n```", "```py\npip install fastapi\npip install uvicorn[standard]\npip install python-multipart\n```", "```py\nfrom fastapi import FastAPI\napp = FastAPI()\n```", "```py\n@app.get(\"/ch01/index\")\ndef index():\n    return {\"message\": \"Welcome FastAPI Nerds\"} \n```", "```py\nuvicorn main:app --reload\n```", "```py\n@app.get(\"/ch01/login/\")\ndef login(username: str, password: str):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if checkpw(password.encode(), \n                   user.passphrase.encode()):\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n```", "```py\n@app.post(\"/ch01/login/signup\")\ndef signup(uname: str, passwd: str):\n    if (uname == None and passwd == None):\n        return {\"message\": \"invalid user\"}\n    elif not valid_users.get(uname) == None:\n        return {\"message\": \"user exists\"}\n    else:\n        user = User(username=uname, password=passwd)\n        pending_users[uname] = user\n        return user\n```", "```py\n@app.put(\"/ch01/account/profile/update/{username}\")\ndef update_profile(username: str, id: UUID, \n                     new_profile: UserProfile):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            valid_profiles[username] = new_profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n```", "```py\n@app.patch(\"/ch01/account/profile/update/names/{username}\")\ndef update_profile_names(username: str, id: UUID, \n                          new_names: Dict[str, str]):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    elif new_names == None:\n        return {\"message\": \"new names are required\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            profile = valid_profiles[username]\n            profile.firstname = new_names['fname']\n            profile.lastname = new_names['lname']\n            profile.middle_initial = new_names['mi']\n            valid_profiles[username] = profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n```", "```py\n@app.delete(\"/ch01/discussion/posts/remove/{username}\")\ndef delete_discussion(username: str, id: UUID):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    elif discussion_posts.get(id) == None:\n        return {\"message\": \"post does not exist\"}\n    else:\n        del discussion_posts[id] \n        return {\"message\": \"main post deleted\"}\n```", "```py\n@app.delete(\"/ch01/login/remove/{username}\")\ndef delete_user(username: str):\n    if username == None:\n    return {\"message\": \"invalid user\"}\nelse:\n    del valid_users[username]\n    return {\"message\": \"deleted user\"}\n```", "```py\n@app.get(\"/ch01/login/{username}/{password}\")\ndef login_with_token(username: str, password:str, \n                     id: UUID):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users[username]\n        if user.id == id and checkpw(password.encode(), \n                 user.passphrase):\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n```", "```py\n@app.get(\"/ch01/login/{username}/{password}\")\ndef login_with_token(username: str, password:str, \n                     id: UUID):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users[username]\n        if user.id == id and checkpw(password.encode(), \n                      user.passphrase.encode()):\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n@app.get(\"/ch01/login/details/info\")\ndef login_info():\n        return {\"message\": \"username and password are \n                            needed\"}\n```", "```py\n@app.get(\"/ch01/login/\")\ndef login(username: str, password: str):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if checkpw(password.encode(), \n               user.passphrase.encode()):\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n```", "```py\nfrom typing import Optional, List, Dict\n@app.delete(\"/ch01/login/remove/all\")\ndef delete_users(usernames: List[str]):\n    for user in usernames:\n        del valid_users[user]\n    return {\"message\": \"deleted users\"}\n@app.patch(\"/ch01/account/profile/update/names/{username}\")\ndef update_profile_names(username: str, id: UUID, \n                         new_names: Dict[str, str]):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    elif new_names == None:\n        return {\"message\": \"new names are required\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            profile = valid_profiles[username]\n            profile.firstname = new_names['fname']\n            profile.lastname = new_names['lname']\n            profile.middle_initial = new_names['mi']\n            valid_profiles[username] = profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n```", "```py\n@app.delete(\"/ch01/delete/users/pending\")\ndef delete_pending_users(accounts: List[str] = []):\n    for user in accounts:\n        del pending_users[user]\n    return {\"message\": \"deleted pending users\"}\n@app.get(\"/ch01/login/password/change\")\ndef change_password(username: str, old_passw: str = '',\n                         new_passw: str = ''):\n    passwd_len = 8\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    elif old_passw == '' or new_passw == '':\n        characters = ascii_lowercase\n        temporary_passwd = \n             ''.join(random.choice(characters) for i in \n                     range(passwd_len))\n        user = valid_users.get(username)\n        user.password = temporary_passwd\n        user.passphrase = \n                  hashpw(temporary_passwd.encode(),gensalt())\n        return user\n    else:\n        user = valid_users.get(username)\n        if user.password == old_passw:\n            user.password = new_passw\n            user.passphrase = hashpw(new_pass.encode(),gensalt())\n            return user\n        else:\n            return {\"message\": \"invalid user\"}\n```", "```py\nfrom typing import Optional, List, Dict\n@app.post(\"/ch01/login/username/unlock\")\ndef unlock_username(id: Optional[UUID] = None):\n    if id == None:\n        return {\"message\": \"token needed\"}\n    else:\n        for key, val in valid_users.items():\n            if val.id == id:\n                return {\"username\": val.username}\n        return {\"message\": \"user does not exist\"}\n@app.post(\"/ch01/login/password/unlock\")\ndef unlock_password(username: Optional[str] = None, \n                    id: Optional[UUID] = None):\n    if username == None:\n        return {\"message\": \"username is required\"}\n    elif valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        if id == None:\n            return {\"message\": \"token needed\"}\n        else:\n            user = valid_users.get(username)\n            if user.id == id:\n                return {\"password\": user.password}\n            else:\n                return {\"message\": \"invalid token\"}\n```", "```py\n@app.patch(\"/ch01/account/profile/update/names/{username}\")\ndef update_profile_names(id: UUID, username: str = '' , \n           new_names: Optional[Dict[str, str]] = None):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    elif new_names == None:\n        return {\"message\": \"new names are required\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            profile = valid_profiles[username]\n            profile.firstname = new_names['fname']\n            profile.lastname = new_names['lname']\n            profile.middle_initial = new_names['mi']\n            valid_profiles[username] = profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n```", "```py\nfrom pydantic import BaseModel\nclass User(BaseModel):\n    username: str\n    password: str\nclass UserProfile(BaseModel):\n    firstname: str\n    lastname: str\n    middle_initial: str\n    age: Optional[int] = 0\n    salary: Optional[int] = 0\n    birthday: date\n    user_type: UserType\n```", "```py\nclass ForumPost(BaseModel):\n    id: UUID\n    topic: Optional[str] = None\n    message: str\n    post_type: PostType\n    date_posted: datetime\n    username: str\nclass ForumDiscussion(BaseModel):\n    id: UUID\n    main_post: ForumPost\n    replies: Optional[List[ForumPost]] = None\n    author: UserProfile\n```", "```py\n@app.post(\"/ch01/login/validate\", response_model=ValidUser)\ndef approve_user(user: User):\n    if not valid_users.get(user.username) == None:\n        return ValidUser(id=None, username = None, \n             password = None, passphrase = None)\n    else:\n        valid_user = ValidUser(id=uuid1(), \n             username= user.username, \n             password  = user.password, \n             passphrase = hashpw(user.password.encode(),\n                          gensalt()))\n        valid_users[user.username] = valid_user\n        del pending_users[user.username]\n        return valid_user\n@app.put(\"/ch01/account/profile/update/{username}\")\ndef update_profile(username: str, id: UUID, \n                   new_profile: UserProfile):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    else:\n        user = valid_users.get(username)\n        if user.id == id:\n            valid_profiles[username] = new_profile\n            return {\"message\": \"successfully updated\"}\n        else:\n            return {\"message\": \"user does not exist\"}\n```", "```py\nfrom fastapi import Header\n@app.get(\"/ch01/headers/verify\")\ndef verify_headers(host: Optional[str] = Header(None), \n                   accept: Optional[str] = Header(None),\n                   accept_language: \n                       Optional[str] = Header(None),\n                   accept_encoding: \n                       Optional[str] = Header(None),\n                   user_agent: \n                       Optional[str] = Header(None)):\n    request_headers[\"Host\"] = host\n    request_headers[\"Accept\"] = accept\n    request_headers[\"Accept-Language\"] = accept_language\n    request_headers[\"Accept-Encoding\"] = accept_encoding\n    request_headers[\"User-Agent\"] = user_agent\n    return request_headers\n```", "```py\n@app.post(\"/ch01/discussion/posts/add/{username}\")\ndef post_discussion(username: str, post: Post, \n                    post_type: PostType):\n    if valid_users.get(username) == None:\n        return {\"message\": \"user does not exist\"}\n    elif not (discussion_posts.get(id) == None):\n        return {\"message\": \"post already exists\"}\n    else:\n        forum_post = ForumPost(id=uuid1(), \n          topic=post.topic, message=post.message, \n          post_type=post_type, \n          date_posted=post.date_posted, username=username)\n        user = valid_profiles[username]\n        forum = ForumDiscussion(id=uuid1(), \n         main_post=forum_post, author=user, replies=list())\n        discussion_posts[forum.id] = forum\n        return forum\n```", "```py\n@app.post(\"/ch01/login/validate\", response_model=ValidUser)\ndef approve_user(user: User):\n\n    if not valid_users.get(user.username) == None:\n        return ValidUser(id=None, username = None, \n                   password = None, passphrase = None)\n    else:\n        valid_user = ValidUser(id=uuid1(), \n         username= user.username, password = user.password,\n          passphrase = hashpw(user.password.encode(),\n                 gensalt()))\n        valid_users[user.username] = valid_user\n        del pending_users[user.username]\n        return valid_user\n```", "```py\nfrom fastapi import FastAPI, Form\n@app.post(\"/ch01/account/profile/add\", \n                        response_model=UserProfile)\ndef add_profile(uname: str, \n                fname: str = Form(...), \n                lname: str = Form(...),\n                mid_init: str = Form(...),\n                user_age: int = Form(...),\n                sal: float = Form(...),\n                bday: str = Form(...),\n                utype: UserType = Form(...)):\n    if valid_users.get(uname) == None:\n        return UserProfile(firstname=None, lastname=None, \n              middle_initial=None, age=None, \n              birthday=None, salary=None, user_type=None)\n    else:\n        profile = UserProfile(firstname=fname, \n             lastname=lname, middle_initial=mid_init, \n             age=user_age, birthday=datetime.strptime(bday,\n                '%m/%d/%Y'), salary=sal, user_type=utype)\n        valid_profiles[uname] = profile\n        return profile\n```", "```py\n@app.post(\"/ch01/login/rememberme/create/\")\ndef create_cookies(resp: Response, id: UUID, \n                   username: str = ''):\n    resp.set_cookie(key=\"userkey\", value=username)\n    resp.set_cookie(key=\"identity\", value=str(id))\n    return {\"message\": \"remember-me tokens created\"}\n```", "```py\n@app.get(\"/ch01/login/cookies\")\ndef access_cookie(userkey: Optional[str] = Cookie(None), \n           identity: Optional[str] = Cookie(None)):\n    cookies[\"userkey\"] = userkey\n    cookies[\"identity\"] = identity\n    return cookies\n```"]