- en: 'Chapter 2: Creating a Django Project around Docker'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：围绕 Docker 创建 Django 项目
- en: In the previous chapter, we learned how to launch an application made in Python
    using a container system such as **Docker**. In addition, we created a project
    in **Django**, always with an eye on WebSockets for future real-time communication.
    At the moment, we only have a simple *executable*; we need to create a service
    architecture that complements Django. Important pieces such as a database to store
    and retrieve information, among other things (such as a fake mail server), will
    be useful for development. By configuring these tools, we will finish building
    an optimal working environment around Docker to then focus on the code.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们学习了如何使用像 **Docker** 这样的容器系统启动用 Python 制成的应用程序。此外，我们还创建了一个 **Django**
    项目，始终关注 WebSockets 以便未来的实时通信。目前，我们只有一个简单的*可执行文件*；我们需要创建一个补充 Django 的服务架构。诸如用于存储和检索信息的数据库（以及其他诸如假邮件服务器等）等重要组件对于开发将非常有用。通过配置这些工具，我们将完成围绕
    Docker 的最佳工作环境的构建，然后专注于代码。
- en: We will also work on the communication and integration of environment variables
    to configure some aspects of the project through `docker-compose.yaml`. We will
    modify the critical elements of deployment, such as activating or deactivating
    the debug mode, changing the domain, indicating the path where the statics will
    be stored, and some other important particularities that differentiate a local
    development from a production server.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将致力于环境变量的通信和集成，以通过`docker-compose.yaml`配置项目的某些方面。我们将修改部署的关键元素，如激活或停用调试模式，更改域名，指示静态文件存储的路径，以及其他一些重要的特殊性，这些特殊性区分了本地开发和生产服务器。
- en: By the end of this chapter, we will have a fully integrated project with Django,
    ready for deployment on a test or real server, which will also be easy for other
    team members to pick up.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，我们将拥有一个完全集成的项目，包含 Django，准备好在测试或真实服务器上部署，这将也非常便于其他团队成员上手。
- en: 'In this chapter, we’ll be covering the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Exploring the containers used for building our app
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索用于构建我们的应用程序的容器
- en: Adding the Django service
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 Django 服务
- en: Configuring databases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置数据库
- en: Connecting Django to a web server
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Django 连接到一个 web 服务器
- en: Adding a fake SMTP mail server
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个假的 SMTP 邮件服务器
- en: Testing for correct operation
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 测试正确运行
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The code for this chapter can be found at [https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码可以在[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2)找到。
- en: Exploring the containers used for building our app
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索用于构建我们的应用程序的容器
- en: Containers are processes isolated from your operating system. Docker allows
    us to modify them, add tools, execute scripts, and the like, all without leaving
    the memory space that Docker reserves for us while they are running. When we want
    to stop working with a container, we can stop it and any action we have performed
    will cease to exist. Of course, if we need to, we can save the changes in *volumes*.
    These are Docker virtual hard disks that can connect to any container that is
    mounted in folders; this is very useful in allowing the container to access project
    files or configurations.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 容器是隔离于操作系统的进程。Docker 允许我们修改它们，添加工具，执行脚本等，而无需离开 Docker 为我们保留的运行时的内存空间。当我们想要停止与容器的交互时，我们可以停止它，我们执行的所有操作都将不复存在。当然，如果我们需要的话，我们可以将更改保存到*卷*中。这些是
    Docker 虚拟硬盘，可以连接到任何挂载在文件夹中的容器；这对于容器访问项目文件或配置非常有用。
- en: We will use containers to create an environment that is easy to deploy, irrespective
    of the software or version of Python installed on the machine. In addition, we
    will be able to select the version for each software in a transparent way.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用容器创建一个易于部署的环境，无论机器上安装的软件或 Python 版本如何。此外，我们还可以以透明的方式为每个软件选择版本。
- en: 'Let’s start by extending `docker-compose.yaml` by adding the following services:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先通过添加以下服务来扩展`docker-compose.yaml`：
- en: '**Django**: We will modify the Python service to a large extent. We will not
    only change its name but also add environment variables and a script that will
    perform management tasks.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**Django**：我们将大幅度修改 Python 服务。我们不仅会更改其名称，还会添加环境变量和执行管理任务的脚本。'
- en: '**PostgreSQL**: This will be the relational database that we will use. Although
    Django is database-agnostic, the framework itself recommends it ([https://bit.ly/3JUyfUB](https://bit.ly/3JUyfUB))
    because PostgreSQL is rich in field types and has interesting extensions.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**：这将是我们将使用的数据库。尽管 Django 是数据库无关的，但框架本身推荐使用它（[https://bit.ly/3JUyfUB](https://bit.ly/3JUyfUB)），因为
    PostgreSQL 具有丰富的字段类型和有趣的扩展。'
- en: '**Caddy**: This is an excellent web server. It will be in charge of managing
    the domain, auto-renewing the SSL certificate, serving static documents, and being
    a reverse proxy to access the Django service.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Caddy**：这是一个出色的 Web 服务器。它将负责管理域名，自动续订 SSL 证书，提供静态文档，并作为反向代理来访问 Django 服务。'
- en: '**Redis**: If you don’t know it already, this is an in-memory database that
    works with a really fast key-value paradigm. We won’t communicate directly with
    it but channels will when we open or close rooms. On the other hand, integrating
    it is a good idea, whether we use WebSockets, as it is an excellent caching system.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Redis**：如果您还不知道，这是一个使用非常快速的关键值模式的内存数据库。我们不会直接与之通信，但在打开或关闭房间时将通过通道进行通信。另一方面，无论我们是否使用
    WebSockets，集成它都是一个好主意，因为它是出色的缓存系统。'
- en: '**MailHog**: This is a simple SMTP server that will capture all the traffic
    sent by mail and display it on a graphical interface for users to visualize.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MailHog**：这是一个简单的 SMTP 服务器，它将捕获所有发送的邮件流量，并在图形界面上显示，供用户可视化。'
- en: Using a Python service was enough to launch simple code, but now we must have
    a Docker service that integrates all the configurations and launches the Django
    server.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 服务足以启动简单的代码，但现在我们必须有一个集成了所有配置并启动 Django 服务器的 Docker 服务。
- en: Adding the Django service
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加 Django 服务
- en: 'Within `docker-compose.yaml`, replace the entire `python` block with the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `docker-compose.yaml` 中，将整个 `python` 块替换为以下内容：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Let us go through each point:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一过目每个点：
- en: 'With `build`, as when we use `python`, we indicate that we generate the Python
    image that we have defined in `Dockerfile`:'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `build`，就像我们使用 `python` 一样，我们表示我们将生成在 `Dockerfile` 中定义的 Python 映像：
- en: '[PRE36]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'As you can see, we have modified the command that will execute the service
    when it is up. In this case, it will be necessary to launch several commands,
    so we will choose to save it in a shell file that we will invoke:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如您所见，我们已经修改了在服务启动时将执行的命令。在这种情况下，将需要启动多个命令，因此我们将选择将其保存到一个我们将调用的 shell 文件中：
- en: '[PRE37]'
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: We’ll create `django-launcher.sh` later, so we’ll ignore it for now.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在稍后创建 `django-launcher.sh`，所以现在我们将忽略它。
- en: 'We will mount and synchronize the volume, which is the service space, with
    the folder we are in. The structure of the current folder is as follows:'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将挂载并同步卷，即服务空间，与当前所在的文件夹。当前文件夹的结构如下：
- en: '[PRE38]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the next snippet, the dot (`.`) represents the location of the project,
    the colon (`:`) is a separator, and `/usr/src/app/` is the path to the container
    where the project will be located:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个片段中，点 (`.`) 代表项目的位置，冒号 (`:`) 是分隔符，`/usr/src/app/` 是项目将位于的容器的路径：
- en: '[PRE39]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'We define all the environment variables that we will later integrate with Django’s
    configuration so that we can move between the local and a production server anytime:'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义所有我们将后来与 Django 配置集成的环境变量，以便我们可以在任何时间在本地和生产服务器之间迁移：
- en: '[PRE40]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We activate development mode:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们激活开发模式：
- en: '[PRE41]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'We indicate the domain that will be allowed (for the moment, we will use a
    fictitious one):'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定允许的域名（目前我们将使用一个虚构的域名）：
- en: '[PRE42]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'We define a cryptographic key:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义一个加密密钥：
- en: '[PRE43]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: When working locally, its complexity should not be important.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当在本地工作的时候，其复杂性不应该很重要。
- en: 'We configure PostgreSQL as our database:'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将 PostgreSQL 配置为我们的数据库：
- en: '[PRE44]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'We indicate a name for the database:'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定数据库的名称：
- en: '[PRE45]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: This will be created later with the PostgreSQL service that we have not yet
    added.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在稍后使用我们尚未添加的 PostgreSQL 服务时创建。
- en: 'We define a database user:'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义一个数据库用户：
- en: '[PRE46]'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'We add a password for the database:'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为数据库添加一个密码：
- en: '[PRE47]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We configure the database with the name of the service of the future database:'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用未来数据库服务的名称配置数据库：
- en: '[PRE48]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'We indicate the PostgreSQL port (by default it uses port `5432`):'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们指定 PostgreSQL 端口（默认使用端口 `5432`）：
- en: '[PRE49]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We add the domain we will use (do not add the protocol, such as `https://`):'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们添加我们将使用的域名（不要添加协议，如 `https://`）：
- en: '[PRE50]'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'We define the path to be used, which will match the *protocol* and the *domain*:'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义要使用的路径，它将匹配 *协议* 和 *域名*：
- en: '[PRE51]'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'We tell Django the address and the port of Redis, which is another service
    we have set up:'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们告诉 Django Redis 的地址和端口，这是另一个我们已经设置的服务：
- en: '[PRE52]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'We give `static` a prefix:'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们给 `static` 添加前缀：
- en: '[PRE53]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'We create the folder where we will save the static files:'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们创建一个文件夹，用于保存静态文件：
- en: '[PRE54]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: We will use the `static` folder in the same project
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在同一项目的 `static` 文件夹中使用。
- en: 'We define the path for multimedia content:'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了多媒体内容的路径：
- en: '[PRE55]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'We define all the configuration for the fake SMTP server:'
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们定义了所有伪造 SMTP 服务器的配置：
- en: '[PRE56]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: We tell it to use the `mailhog` service, which does not exist yet, with port
    `1025`. On a real server, it will probably be `25`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们告诉它使用 `mailhog` 服务，该服务目前还不存在，端口为 `1025`。在实际服务器上，它可能为 `25`。
- en: 'The web server needs to access the Django server. We will open it on port `8000`.
    There are two ways to do it, visible to all (`ports`) or only to the Docker subnet
    (`expose`). It only needs to be accessible to other services:'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络服务器需要访问 Django 服务器。我们将它打开在端口 `8000`。有两种方式可以实现，对所有可见（`ports`）或仅对 Docker 子网可见（`expose`）。它只需要对其他服务可访问：
- en: '[PRE57]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Finally, please wait for the databases before launching. They do not yet exist,
    but they will be there soon:'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，请在启动之前等待数据库。它们目前还不存在，但很快就会出现：
- en: '[PRE58]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Next, we will create a script to control the actions when we start the Django
    service.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个脚本来控制启动 Django 服务时的操作。
- en: Creating a Django launcher
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Django 启动器
- en: 'It is good practice to keep track of the commands that will be executed each
    time the Django service is up. So, we’ll create `django-launcher.sh` in the root
    of the project with the following content:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 记录每次 Django 服务启动时将执行的命令是一种良好的实践。因此，我们将在项目的根目录下创建 `django-launcher.sh` 文件，内容如下：
- en: '[PRE59]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: In this way, every time we raise the Django service, we will get the static
    files, launch the new migrations, and raise the development server on port `8000`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，每次我们启动 Django 服务时，都会获取静态文件，启动新的迁移，并在端口 `8000` 上启动开发服务器。
- en: 'We edit the `hello_world/settings.py`. We are going to import `os` to access
    the environment variables:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编辑 `hello_world/settings.py`。我们将导入 `os` 以访问环境变量：
- en: '[PRE66]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Next, we modify the following lines:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们修改以下行：
- en: '[PRE67]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: '[PRE116]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'With that, you will have perfectly integrated Django. If you have problems,
    feel free to copy the example material online:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你将完美地集成 Django。如果你遇到问题，请随时复制在线的示例材料：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-2)'
- en: 'An application without a database has very limited use. So, we’re going to
    give Django two databases: PostgreSQL and Redis. You’ll soon understand why.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 没有数据库的应用程序用途非常有限。因此，我们将为 Django 提供两个数据库：PostgreSQL 和 Redis。你很快就会明白为什么。
- en: Configuring the databases
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置数据库
- en: 'We continue adding services in `docker-compose.yaml`. After the Django service,
    we add the following configuration:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们继续在 `docker-compose.yaml` 中添加服务。在 Django 服务之后，我们添加以下配置：
- en: '[PRE117]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: 'In `image: postgres`, we are using the official PostgreSQL image. It will be
    automatically downloaded from the official repositories. Next, we configure the
    environment variables to indicate the user credentials (`POSTGRES_USER` and `POSTGRES_PASSWORD`)
    and the name of the database (`POSTGRES_DB`). The variables must match those declared
    in the Django service; otherwise, it will fail to connect.'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '在 `image: postgres` 中，我们使用官方的 PostgreSQL 镜像。它将从官方仓库自动下载。接下来，我们配置环境变量以指示用户凭据（`POSTGRES_USER`
    和 `POSTGRES_PASSWORD`）和数据库的名称（`POSTGRES_DB`）。这些变量必须与 Django 服务中声明的变量匹配；否则，它将无法连接。'
- en: It is important to keep a copy of the database, otherwise everything is lost
    when rebooting. `postgres_data:/var/lib/postgresql/data/` indicates that all the
    PostgreSQL content in the container is saved in the `postgres_data` folder. Finally,
    we expose the port (`5432`) that Django will use to connect.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 保留数据库副本非常重要，否则重启时所有内容都会丢失。`postgres_data:/var/lib/postgresql/data/` 表示容器中所有
    PostgreSQL 内容都保存在 `postgres_data` 文件夹中。最后，我们暴露 Django 将使用的端口（`5432`）。
- en: 'Then, we add Redis, the other key-value database:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加 Redis，另一个键值数据库：
- en: '[PRE127]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: It’s as simple as that. We use the official image with the `alpine` label to
    make it as light as possible and expose port `6379`.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 就这么简单。我们使用带有 `alpine` 标签的官方镜像，使其尽可能轻量，并暴露端口 `6379`。
- en: We already have Django and the databases ready. The next step is to connect
    Django to a web server that exposes the project and manages the SSL certificates
    automatically.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了 Django 和数据库。下一步是将 Django 连接到一个暴露项目并自动管理 SSL 证书的 Web 服务器。
- en: Connecting Django to a web server
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将 Django 连接到 Web 服务器
- en: We must have a gateway service that manages the static content. We will use
    Caddy for its simplicity.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须有一个管理静态内容网关服务。我们将使用 Caddy，因为它简单。
- en: 'Caddy is configured with a flat file named `Caddyfile`. We must create it and
    add the following content:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: Caddy 使用一个名为 `Caddyfile` 的平面文件进行配置。我们必须创建它并添加以下内容：
- en: '[PRE131]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: '[PRE132]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: '[PRE136]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: With the first line, `http://hello.localhost`, we indicate the domain that we
    will use. As we are in a development environment, we will indicate the *http*
    protocol instead of *https*. Next, with `root * /usr/src/app/` and `file_server`,
    we’re telling Caddy to expose static files (images, CSS files, JavaScript files,
    and so on) because that’s not Django’s job. Finally, we reverse proxy the `django`
    service on port `8000`, ignoring its static or media routes to avoid conflicts.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行，`http://hello.localhost`，我们指明了我们将使用的域名。由于我们处于开发环境，我们将指示 `http` 协议而不是 `https`。接下来，通过
    `root * /usr/src/app/` 和 `file_server`，我们告诉 Caddy 暴露静态文件（图像、CSS 文件、JavaScript
    文件等），因为这不是 Django 的任务。最后，我们通过端口 `8000` 反向代理 `django` 服务，忽略其静态或媒体路由以避免冲突。
- en: The second block is again a reverse proxy that will point to the fake SMTP mail
    interface with the `webmail.localhost` domain.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个块再次是一个反向代理，它将指向具有 `webmail.localhost` 域名的假 SMTP 邮件界面。
- en: 'After leaving the configuration ready, we have to create the service. We add
    `docker-compose.yaml` into the `Caddy` service:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置就绪后，我们必须创建服务。我们将 `docker-compose.yaml` 添加到 `Caddy` 服务中：
- en: '[PRE142]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: 'As with Redis, we use the official image in its alpine version: `image: caddy:alpine`.
    We open ports `80` and `443` publicly so that any visitor can access the site.
    The next thing is to connect two volumes: the `Caddyfile` configuration file with
    the internal one of the container (`./Caddyfile:/etc/caddy/Caddyfile`) and the
    Caddy information with a folder that we will save in the project named `caddy_data`
    `(./caddy_data:/data`).'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '就像 Redis 一样，我们使用其 alpine 版本的官方镜像：`image: caddy:alpine`。我们公开打开端口 `80` 和 `443`，以便任何访客都可以访问网站。接下来是连接两个卷：`Caddyfile`
    配置文件与容器内部的配置文件（`./Caddyfile:/etc/caddy/Caddyfile`）以及 Caddy 信息与一个我们将保存在项目中的文件夹
    `caddy_data`（`./caddy_data:/data`）。'
- en: The next step will be to add a mail server to test that future mail is received
    correctly by users. In addition, we will test that the rest of the services work
    as they should.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将是添加一个邮件服务器来测试未来邮件是否被用户正确接收。此外，我们还将测试其他服务是否按预期工作。
- en: Adding a fake SMTP mail server
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加一个假 SMTP 邮件服务器
- en: 'At the end of the `docker-compose.yaml`, we add the last service:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `docker-compose.yaml` 的末尾，我们添加最后一个服务：
- en: '[PRE152]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: The ports used will be `1025` for Django to connect to the SMTP server and `8025`
    for the web interface via the `webmail.localhost` domain because Caddy will act
    as a reverse proxy.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 使用的端口将是 `1025`，用于 Django 连接到 SMTP 服务器，以及 `8025`，通过 `webmail.localhost` 域名访问
    Web 界面，因为 Caddy 将充当反向代理。
- en: Now that we have added all the containers, it’s time to test whether the containers
    run and work with each other.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经添加了所有容器，是时候测试容器是否运行并且可以相互工作了。
- en: Testing for correct operation
  id: totrans-239
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试正确运行
- en: Finally, we pull up all the services from `docker-compose.yaml` to test whether
    the containers run and work with each other.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将从 `docker-compose.yaml` 中拉取所有服务来测试容器是否运行并且可以相互工作。
- en: Caddy and Django
  id: totrans-241
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Caddy 和 Django
- en: 'Caddy and Django are easy to check, as when you enter the `hello.localhost`
    domain, you will see Django fully functioning with its welcome page:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Caddy 和 Django 很容易检查，因为当你输入 `hello.localhost` 域名时，你会看到 Django 完全运行，并带有其欢迎页面：
- en: '![Figure 2.1 – Django running under the hello.localhost domain'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.1 – Django 在 hello.localhost 域名下运行'
- en: '](img/Figure_2.1_B18321.jpg)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.1_B18321.jpg](img/Figure_2.1_B18321.jpg)'
- en: Figure 2.1 – Django running under the hello.localhost domain
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.1 – Django 在 hello.localhost 域名下运行
- en: 'We know that Django has connected to PostgreSQL because we can see in the log
    how it has applied the migrations:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道 Django 已经连接到 PostgreSQL，因为我们可以在日志中看到它如何应用迁移：
- en: '[PRE157]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: MailHog
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MailHog
- en: 'MailHog is simple because when you enter the `webmail.localhost` domain, you
    will see the web interface with an empty inbox:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: MailHog 很简单，因为当你输入 `webmail.localhost` 域名时，你会看到带有空收件箱的 Web 界面：
- en: '![Figure 2.2 – MailHog WebMail with an empty inbox'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2 – MailHog WebMail with an empty inbox'
- en: '](img/Figure_2.2_B18321.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2_B18321.jpg](img/Figure_2.2_B18321.jpg)'
- en: Figure 2.2 – MailHog WebMail with an empty inbox
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.2 – 拥有空收件箱的 MailHog WebMail
- en: And finally, with Redis, we only have to make sure that there are no errors
    in the log. Otherwise, it will be silent.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 Redis，我们只需确保日志中没有错误。否则，它将保持沉默。
- en: Summary
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In the previous chapter, we were able to run Python in complete isolation from
    the operating system, including its dependencies. It wasn’t much different from
    creating a virtual environment. But in this iteration, we’ve taken it up a notch
    by incorporating all the external software into Django. Containers have become
    the backbone of the site, incorporating elements as important as databases and
    the web server itself. What’s more, integration with Django is not merely decorative,
    as the most critical configurations originate in the Docker environment variables
    that directly affect `settings.py`. Right now, if we wanted to, we could deploy
    the site on any server that has Docker installed with just one command. We can
    find harmony and architecture in every line of Docker.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们能够使 Python 在完全隔离操作系统的环境中运行，包括其依赖项。这并不比创建一个虚拟环境有太大的区别。但在这个版本中，我们更进一步，将所有外部软件整合进了
    Django。容器已经成为了网站的核心，包括像数据库和自身网络服务器这样重要的元素。更重要的是，与 Django 的集成不仅仅是装饰性的，因为最关键的配置都源自
    Docker 环境变量，这些变量直接影响到 `settings.py` 文件。目前，如果我们愿意的话，只需一条命令就可以在任何安装了 Docker 的服务器上部署网站。在
    Docker 的每一行中，我们都能找到和谐与架构。
- en: We are now ready to dive into asynchrony, WebSockets, channels, and real-time
    requests.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经准备好深入异步操作、WebSocket、通道和实时请求了。
