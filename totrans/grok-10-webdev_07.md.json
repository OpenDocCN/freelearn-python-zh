["```py\nclass ISearchable(interface.Interface):\ntitle = interface.Attribute('title')\nkind = interface.Attribute('kind')\ndescription = interface.Attribute('description')\ncreator = interface.Attribute('creator')\ncreation_date = interface.Attribute('creation date')\nmodification_date = interface.Attribute('modification date')\nchecked = interface.Attribute('checked')\ndef searchableText():\n\"\"\"return concatenated string with all text fields to search\"\"\"\n\n```", "```py\nclass Project(grok.Container):\ngrok.implements(IProject, IMetadata, ISearchable)\n\n```", "```py\nclass ProjectIndexes(grok.Indexes):\ngrok.site(ITodo)\ngrok.context(ISearchable)\ntitle = grok.index.Text()\ndescription = grok.index.Text()\nsearchableText = grok.index.Text()\ncreator = grok.index.Field()\nmodification_date = grok.index.Field()\ncreation_date = grok.index.Field()\nchecked = grok.index.Field()\n\n```", "```py\nclass TodoList(grok.Container):\ngrok.implements(ITodoList, IMetadata, ISearchable)\nnext_id = 0\ndescription = u''\ncontent_type = 'list'\ndef __init__(self,title,description,creator):\nsuper(TodoList, self).__init__()\nself.title = title\nself.description = description\nself.next_id = 0\nself.creator = creator\nself.creation_date = datetime.datetime.now()\nself.modification_date = datetime.datetime.now()\ndef searchableText(self):\nreturn self.title+self.description\n\n```", "```py\nresults = catalog.searchResults(title='caveman')\n\n```", "```py\nresults = catalog.searchResults(description='spear or club')\n\n```", "```py\nresults = catalog.searchResults(title='cave*')\n\n```", "```py\nresults = catalog.searchResults(creator=(u'Manager', u'Manager'))\n\n```", "```py\nfrom datetime import datetime\nresults = catalog.searchResults(creation_date=(datetime(2009,3,31), datetime.now())\n\n```"]