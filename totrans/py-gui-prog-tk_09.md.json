["```py\nmyimage = tk.PhotoImage(file='my_image.png') \n```", "```py\nmylabel = tk.Label(root, image=myimage) \n```", "```py\nmylabel_1 = tk.Label(root, text='Banana', image=myimage)\nmylabel_2 = tk.Label(\n  root,\n  text='Plantain',\n  image=myimage,\n  compound=tk.LEFT\n) \n```", "```py\n# image_scope_demo.py\nimport tkinter as tk\nclass App(tk.Tk):\n  def __init__(self):\n    super().__init__()\n    smile = tk.PhotoImage(file='smile.gif')\n    tk.Label(self, image=smile).pack()\nApp().mainloop() \n```", "```py\n def __init__(self):\n    super().__init__()\n    self.smile = tk.PhotoImage(file='smile.gif')\n    tk.Label(self, image=self.smile).pack() \n```", "```py\n$ pip install -U pillow \n```", "```py\n# image_viewer_demo.py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import filedialog\nfrom PIL import Image, ImageTk, ImageFilter \n```", "```py\nclass PictureViewer(tk.Tk):\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.title('My Image Viewer')\n    self.geometry('800x600')\n    self.rowconfigure(0, weight=1)\n    self.columnconfigure(0, weight=1) \n```", "```py\n self.image_display = ttk.Label(self)\n    self.image_display.grid(columnspan=3)\n    ttk.Button(\n      self, text='Select image', command=self._choose_file\n    ).grid(row=1, column=0, sticky='w') \n```", "```py\n def _choose_file(self):\n    filename = filedialog.askopenfilename(\n      filetypes=(\n        ('JPEG files', '*.jpg *.jpeg *.JPG *.JPEG'),\n        ('PNG files', '*.png *.PNG'),\n        ('All files', '*.*')\n      ))\n    if filename:\n      self.image = Image.open(filename)\n      self.photoimage = ImageTk.PhotoImage(self.image)\n      self.image_display.config(image=self.photoimage) \n```", "```py\n self.filtervar = tk.StringVar()\n    filters =[\n      'None', 'BLUR', 'CONTOUR', 'DETAIL', 'EDGE_ENHANCE',\n      'EDGE_ENHANCE_MORE', 'EMBOSS', 'FIND_EDGES',\n      'SHARPEN', 'SMOOTH', 'SMOOTH_MORE'\n    ]\n    ttk.Label(self, text='Filter: ').grid(\n      row=1, column=1, sticky='e'\n    )\n    ttk.OptionMenu(\n      self, self.filtervar, 'None', *filters\n    ).grid(row=1, column=2)\n    self.filtervar.trace_add('write', self._apply_filter) \n```", "```py\n def _apply_filter(self, *_):\n    filter_name = self.filtervar.get()\n    if filter_name == 'None':\n      self.filtered_image = self.image\n    else:\n      filter_object = getattr(ImageFilter, filter_name)\n      self.filtered_image = self.image.filter(filter_object)\n    self.photoimage = ImageTk.PhotoImage(self.filtered_image)\n    self.image_display.config(image=self.photoimage) \n```", "```py\napp = PictureViewer()\napp.mainloop() \n```", "```py\n# application.py, in Application.__init__()\n    self.logo = tk.PhotoImage(file='abq_logo_32x20.png')\n    ttk.Label(\n      self, text=\"ABQ Data Entry Application\",\n      font=(\"TkDefaultFont\", 16),\n      image=self.logo, compound=tk.LEFT\n    ).grid(row=0) \nPhotoImage object from a file path, storing it as an instance variable so it does not go out of scope. Then, we've assigned this object to the image argument of the application's title label, also adding the compound argument so that the image is displayed to the left of the text.\n```", "```py\n$ cd ABQ_Data_Entry\n$ python3 abq_data_entry.py\n# the image will show when you run it this way.\n$ cd ..\n$ python3 ABQ_Data_Entry/abq_data_entry.py\n# the image will not show this way. \n```", "```py\n self.logo = tk.PhotoImage(\n      file=r'C:\\Users\\myuser\\ABQ_Data_Entry\\abq_logo_32x20.png'\n    ) \n```", "```py\n self.logo = tk.PhotoImage(\n      Path(__file__).parent.parent / 'abq_logo_32x20.png'\n    ) \n```", "```py\n# images/__init__.py\nfrom pathlib import Path\nIMAGE_DIRECTORY = Path(__file__).parent\nABQ_LOGO_16 = IMAGE_DIRECTORY / 'abq_logo-16x10.png'\nABQ_LOGO_32 = IMAGE_DIRECTORY / 'abq_logo-32x20.png'\nABQ_LOGO_64 = IMAGE_DIRECTORY / 'abq_logo-64x40.png' \n```", "```py\n# application.py, at the top\nfrom . import images \n```", "```py\n# application.py, inside Application.__init__()\n    self.logo = tk.PhotoImage(file=images.ABQ_LOGO_32)\n    ttk.Label(\n      self, text=\"ABQ Data Entry Application\",\n      font=(\"TkDefaultFont\", 16),\n      image=self.logo, compound=tk.LEFT\n    ).grid(row=0) \n```", "```py\n# application.py, inside Application.__init__()\n    self.taskbar_icon = tk.PhotoImage(file=images.ABQ_LOGO_64)\n    self.iconphoto(True, self.taskbar_icon) \n```", "```py\nSAVE_ICON = IMAGE_DIRECTORY / 'file-2x.png'\nRESET_ICON = IMAGE_DIRECTORY / 'reload-2x.png'\nLIST_ICON = IMAGE_DIRECTORY / 'list-2x.png'\nFORM_ICON = IMAGE_DIRECTORY / 'browser-2x.png' \n```", "```py\n# views.py, at the top\nfrom . import images \n```", "```py\n# views.py, inside DataRecordForm.__init__()\n    **self.save_button_logo = tk.PhotoImage(file=images.SAVE_ICON)**\n    self.savebutton = ttk.Button(\n      buttons, text=\"Save\", command=self._on_save,\n      **image=self.save_button_logo, compound=tk.LEFT**\n    )\n    #...\n    **self.reset_button_logo = tk.PhotoImage(file=images.RESET_ICON)**\n    self.resetbutton = ttk.Button(\n      buttons, text=\"Reset\", command=self.reset,\n      **image=self.reset_button_logo, compound=tk.LEFT**\n    ) \n```", "```py\n# application.py, inside Application.__init__()\n    **self.recordform_icon = tk.PhotoImage(file=images.FORM_ICON)**\n    self.recordform = v.DataRecordForm(\n      self, self.model, self.settings\n    )\n    self.notebook.add(\n      self.recordform, text='Entry Form',\n      **image=self.recordform_icon, compound=tk.LEFT**\n    )\n    #...\n    **self.recordlist_icon = tk.PhotoImage(file=images.LIST_ICON)**\n    self.recordlist = v.RecordList(self)\n    self.notebook.insert(\n      0, self.recordlist, text='Records',\n      **image=self.recordlist_icon, compound=tk.LEFT**\n    ) \n```", "```py\n# mainmenu.py, in the MainMenu class\n  def _create_icons(self):\n    self.icons = {\n      'file_open': tk.PhotoImage(file=images.SAVE_ICON),\n      'record_list': tk.PhotoImage(file=images.LIST_ICON),\n      'new_record': tk.PhotoImage(file=images.FORM_ICON),\n    } \n```", "```py\n# mainmenu.py, inside the MainMenu class\n  def __init__(self, parent, settings, **kwargs):\n    super().__init__(parent, **kwargs)\n    self.settings = settings\n    **self._create_icons()** \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    file_menu.add_command(\n      label=\"Select file…\", command=self._event('<<FileSelect>>'),\n      **image=self.icons['file_open'], compound=tk.LEFT**\n    )\n    #...\n    go_menu.add_command(\n      label=\"Record List\", command=self._event('<<ShowRecordlist>>'),\n      **image=self.icons['record_list'], compound=tk.LEFT**\n    )\n    go_menu.add_command(\n      label=\"New Record\", command=self._event('<<NewRecord>>'),\n      **image=self.icons['new_record'], compound=tk.LEFT**\n    ) \n```", "```py\nQUIT_BMP = IMAGE_DIRECTORY / 'x-2x.xbm'\nABOUT_BMP = IMAGE_DIRECTORY / 'question-mark-2x.xbm' \n```", "```py\n# mainmenu.py, in MainMenu._create_icons()\n    self.icons = {\n      #...\n      **'quit': tk.BitmapImage(**\n        **file=images.QUIT_BMP, foreground='red'**\n      **),**\n      **'about': tk.BitmapImage(**\n        **file=images.ABOUT_BMP,**\n        **foreground='#CC0', background='#A09'**\n      **)**\n    } \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    help_menu.add_command(\n      label='About…', command=self.show_about,\n      **image=self.icons['about'], compound=tk.LEFT**\n    )\n    #...\n    file_menu.add_command(\n      label=\"Quit\", command=self._event('<<FileQuit>>'),\n      **image=self.icons['quit'], compound=tk.LEFT**\n    ) \n```", "```py\n# tkinter_color_demo.py\nimport tkinter as tk\nl = tk.Label(text='Hot Dog Stand!', fg='yellow', bg='red') \n```", "```py\nl2 = tk.Label(\n  text='Also Hot Dog Stand!',\n  foreground='#FFFF00',\n  background='#FF0000'\n) \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    self.configure(\n      background='#333',\n      foreground='white',\n      activebackground='#777',\n      activeforeground='white',\n      'relief'=tk.GROOVE\n    ) \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    self.styles = {\n      'background': '#333',\n      'foreground': 'white',\n      'activebackground': '#777',\n      'activeforeground': 'white',\n      'relief': tk.GROOVE\n    }\n    self.configure(**self.styles) \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    help_menu = tk.Menu(self, tearoff=False, ****self.styles**)\n    #...\n    file_menu = tk.Menu(self, tearoff=False, ****self.styles**)\n    #...\n    options_menu = tk.Menu(self, tearoff=False, ****self.styles**)\n    #...\n    go_menu = tk.Menu(self, tearoff=False, ****self.styles**) \n```", "```py\n# tags_demo.py\nimport tkinter as tk\ntext = tk.Text(width=50, height=20, bg='black', fg='lightgreen')\ntext.pack() \n```", "```py\ntext.tag_configure('prompt', foreground='magenta')\ntext.tag_configure('output', foreground='yellow') \n```", "```py\ntext.insert('end', '>>> ', ('prompt',)) \n```", "```py\ndef on_return(*args):\n  cmd = text.get('prompt.last', 'end').strip() \n```", "```py\n if cmd:\n    try:\n      output = str(eval(cmd))\n    except Exception as e:\n      output = str(e) \n```", "```py\n # (still in the if block)\n    text.insert('end', '\\n' + output, ('output',)) \n```", "```py\n text.insert('end', '\\n>>> ', ('prompt',))\n  return 'break' \n```", "```py\ntext.bind('<Return>', on_return) \n```", "```py\n# views.py, inside RecordList.__init__()\n    super().__init__(parent, *args, **kwargs)\n    **self._inserted = list()**\n    **self._updated = list()** \n```", "```py\n# views.py, inside RecordList\n  def add_updated_row(self, row):\n    if row not in self._updated:\n      self._updated.append(row)\n  def add_inserted_row(self, row):\n    if row not in self._inserted:\n      self._inserted.append(row) \n```", "```py\n# application.py, in Application._on_save()\n    if rownum is not None:\n      self.recordlist.add_updated_row(rownum) \n```", "```py\n else:\n      rownum = len(self.model.get_all_records()) -1\n      self.recordlist.add_inserted_row(rownum) \n```", "```py\n# views.py, inside RecordList\n  def clear_tags(self):\n    self._inserted.clear()\n    self._updated.clear() \n```", "```py\n# application.py inside Application._on_file_select()\n    if filename:\n      self.model = m.CSVModel(filename=filename)\n      **self.recordlist.clear_tags()**\n      self._populate_recordlist() \n```", "```py\n# views.py, inside RecordList.__init__()    \n    self.treeview.tag_configure(\n      'inserted', background='lightgreen'\n\n    self.treeview.tag_configure('updated', background='lightblue') \n```", "```py\n# views.py, inside RecordList.populate()\n    for rownum, rowdata in enumerate(rows):\n      values = [rowdata[cid] for cid in cids]\n      if rownum in self._inserted:\n        tag = 'inserted'\n      elif rownum in self._updated:\n        tag = 'updated'\n      else:\n        tag = '' \n```", "```py\n self.treeview.insert(\n        '', 'end', iid=str(rownum),\n        text=str(rownum), values=values, **tag=tag**\n      ) \n```", "```py\ntk.Label(text=\"Format with a string\", font=\"Times 20 italic bold\") \n```", "```py\ntk.Label(\n  text=\"Tuple font format\",\n  font=('Noto sans', 15, 'overstrike')\n) \n```", "```py\nfrom tkinter import font \n```", "```py\nlabelfont = font.Font(\n  family='Courier', size=30,\n  weight='bold', slant='roman',\n  underline=False, overstrike=False\n)\ntk.Label(text='Using the Font class', font=labelfont).pack() \n```", "```py\ndef toggle_overstrike():\n  labelfont['overstrike'] = not labelfont['overstrike']\ntk.Button(text='Toggle Overstrike', command=toggle_overstrike).pack() \n```", "```py\n# named_font_demo.py\nimport tkinter as tk\nfrom tkinter import font\nroot = tk.Tk()\nfor name in font.names():\n  font_obj = font.nametofont(name)\n  tk.Label(root, text=name, font=font_obj).pack()\nroot.mainloop() \n```", "```py\n# named_font_demo.py\nnamedfont = tk.StringVar()\nfamily = tk.StringVar()\nsize = tk.IntVar()\ntk.OptionMenu(root, namedfont, *font.names()).pack()\ntk.OptionMenu(root, family, *font.families()).pack()\ntk.Spinbox(root, textvariable=size, from_=6, to=128).pack()\ndef setFont():\n  font_obj = font.nametofont(namedfont.get())\n  font_obj.configure(family=family.get(), size=size.get())\ntk.Button(root, text='Change', command=setFont).pack() \n```", "```py\n# models.py, inside SettingsModel\n  fields = {\n    # ...\n    **'font size': {'type': 'int', 'value': 9}**,\n    **'font family': {'type': 'str', 'value': ''}**\n  } \n```", "```py\n# mainmenu.py, at the top\nfrom tkinter import font \n```", "```py\n# mainmenu.py, inside MainMenu.__init__(), \n# after creating options_menu\n    size_menu = tk.Menu(\n      options_menu, tearoff=False, **self.styles\n    )\n    options_menu.add_cascade(label='Font Size', menu=size_menu)\n    for size in range(6, 17, 1):\n      size_menu.add_radiobutton(\n        label=size, value=size,\n        variable=self.settings['font size']\n      )\n    family_menu = tk.Menu(\n      options_menu, tearoff=False, **self.styles\n    )\n    options_menu.add_cascade(\n      label='Font Family', menu=family_menu\n    )\n    for family in font.families():\n      family_menu.add_radiobutton(\n        label=family, value=family,\n        variable=self.settings['font family']\n      ) \n```", "```py\n# application.py, inside the Application class\n  def _set_font(self, *_):\n    \"\"\"Set the application's font\"\"\"\n    font_size = self.settings['font size'].get()\n    font_family = self.settings['font family'].get()\n    font_names = (\n      'TkDefaultFont', 'TkMenuFont', 'TkTextFont', 'TkFixedFont'\n    )\n    for font_name in font_names:\n      tk_font = font.nametofont(font_name)\n      tk_font.config(size=font_size, family=font_family) \n```", "```py\n# application.py, in Application._load_settings()\n    self._set_font()\n    self.settings['font size'].trace_add('write', self._set_font)\n    self.settings['font family'].trace_add(\n      'write', self._set_font\n    ) \n```", "```py\n>>> import tkinter as tk\n>>> from tkinter import ttk\n>>> from pprint import pprint \n```", "```py\n>>> root = tk.Tk()\n>>> cb = ttk.Combobox(root)\n>>> cb.pack()\n>>> style = ttk.Style() \n```", "```py\n>>> cb_stylename = cb.winfo_class()\n>>> print(cb_stylename)\nTCombobox \n```", "```py\n>>> cb_layout = style.layout(cb_stylename)\n>>> pprint(cb_layout)\n[(\n  'Combobox.field',\n  {\n    'children': [\n      (\n        'Combobox.downarrow',\n        {'side': 'right', 'sticky': 'ns'}\n      ),\n      (\n        'Combobox.padding',\n       {\n        'children': [\n          ('Combobox.textarea', {'sticky': 'nswe'})\n        ],\n        'expand': '1',\n        'sticky': 'nswe'\n      }\n      )\n    ],\n    'sticky': 'nswe'\n   }\n)] \n```", "```py\n>>> pprint(style.element_options('Combobox.downarrow'))\n('background', 'relief', 'borderwidth', 'arrowcolor', 'arrowsize') \n```", "```py\n>>> style.configure('TCombobox', arrowcolor='red') \n```", "```py\n>>> print(cb.state())\n() \n```", "```py\n>>> cb.state(['active', 'invalid'])\n('!active', '!invalid')\n>>> print(cb.state())\n('active', 'invalid')\n>>> cb.state(['!invalid'])\n('invalid',)\n>>> print(cb.state())\n('active',) \n```", "```py\n>>> pprint(style.map(cb_stylename))\n{\n  'arrowcolor': [\n    ('disabled', '#a3a3a3')\n  ],\n  'fieldbackground': [\n    ('readonly', '#d9d9d9'),\n    ('disabled', '#d9d9d9')\n  ]\n} \n```", "```py\n>>> style.map(\n  'TCombobox',\n  arrowcolor=[('!invalid', 'blue'), ('invalid', 'focus', 'red')]\n)\n{}\n>>> pprint(style.map('TCombobox'))\n{\n  'arrowcolor': [\n    ('!invalid', 'blue'), ('invalid', 'focus', 'red')\n  ],\n  'fieldbackground': [\n    ('readonly', '#d9d9d9'), ('disabled', '#d9d9d9')\n  ]\n} \n```", "```py\n>>> style.configure('Blue.TCombobox', fieldbackground='blue')\n>>> cb.configure(style='Blue.TCombobox') \n```", "```py\n>>> style.theme_names()\n('clam', 'alt', 'default', 'classic') \n```", "```py\n>>> style.theme_use()\n'default'\n>>> style.theme_use('alt') \n```", "```py\n# views.py, inside DataRecordForm.__init__()\n    style = ttk.Style()\n    # Frame styles\n    style.configure(\n      'RecordInfo.TLabelframe',\n      background='khaki', padx=10, pady=10\n    )\n    style.configure(\n      'EnvironmentInfo.TLabelframe', background='lightblue',\n      padx=10, pady=10\n    )\n    style.configure(\n      'PlantInfo.TLabelframe',\n      background='lightgreen', padx=10, pady=10\n    ) \n```", "```py\n# views.py, inside the DataRecordForm class\n  def _add_frame(self, label, **style=''**, cols=3):\n    \"\"\"Add a labelframe to the form\"\"\"\n    frame = ttk.LabelFrame(self, text=label)\n    **if style:**\n      **frame.configure(style=style)**\n    frame.grid(sticky=tk.W + tk.E)\n    for i in range(cols):\n      frame.columnconfigure(i, weight=1)\n    return frame \n```", "```py\n# views.py, in DataRecordForm.__init__()\n    r_info = self._add_frame(\n      \"Record Information\", 'RecordInfo.TLabelframe'\n    )\n    #...\n    e_info = self._add_frame(\n      \"Environment Data\", 'EnvironmentInfo.TLabelframe'\n    )\n    #...\n    p_info = self._add_frame(\"Plant Data\", 'PlantInfo.TLabelframe') \n```", "```py\n# views.py, inside DataRecordForm.__init__()\n    style.configure(\n      'RecordInfo.TLabelframe.Label', background='khaki',\n      padx=10, pady=10\n    )\n    style.configure(\n      'EnvironmentInfo.TLabelframe.Label',\n      background='lightblue', padx=10, pady=10\n    )\n    style.configure(\n      'PlantInfo.TLabelframe.Label',\n      background='lightgreen', padx=10, pady=10\n    ) \n```", "```py\n# views.py, inside DataRecordForm.__init__()\n    style.configure('RecordInfo.TLabel', background='khaki')\n    style.configure('RecordInfo.TRadiobutton', background='khaki')\n    style.configure('EnvironmentInfo.TLabel', background='lightblue')\n    style.configure(\n      'EnvironmentInfo.TCheckbutton',\n      background='lightblue'\n    )\n    style.configure('PlantInfo.TLabel', background='lightgreen') \n```", "```py\n w.LabelInput(\n      r_info, \"Date\",\n      field_spec=fields['Date'],\n      var=self._vars['Date'],\n      **label_args={'style': 'RecordInfo.TLabel'}**\n    ).grid(row=0, column=0)\n    w.LabelInput(\n      r_info, \"Time\",\n      field_spec=fields['Time'],\n      var=self._vars['Time'],\n      **label_args={'style': 'RecordInfo.TLabel'}**\n    ).grid(row=0, column=1)\n    w.LabelInput(\n      r_info, \"Technician\",\n      field_spec=fields['Technician'],\n      var=self._vars['Technician'],\n      **label_args={'style': 'RecordInfo.TLabel'}**\n    ).grid(row=0, column=2) \n```", "```py\n w.LabelInput(\n      r_info, \"Lab\",\n      field_spec=fields['Lab'],\n      var=self._vars['Lab'],\n      **label_args={'style': 'RecordInfo.TLabel'}**,\n      **input_args={**\n        **'button_args':{'style': 'RecordInfo.TRadiobutton'}**\n      **}**\n    ).grid(row=1, column=0) \n```", "```py\n# widgets.py, inside LabelInput.__init__()\n    error_style = 'Error.' + label_args.get('style', 'TLabel')\n    ttk.Style().configure(error_style, foreground='darkred')\n    self.error = getattr(self.input, 'error', tk.StringVar())\n    ttk.Label(\n      self, textvariable=self.error, style=error_style\n    ).grid(row=2, column=0, sticky=(tk.W + tk.E)) \n```", "```py\n# widget.py, inside the ValidatedMixin class\n  def _focusout_invalid(self, **kwargs):\n    \"\"\"Handle invalid data on a focus event\"\"\"\n    pass \n```", "```py\n# widget.py, inside ValidatedMixin.__init__()\n    style = ttk.Style()\n    widget_class = self.winfo_class()\n    validated_style = 'ValidatedInput.' + widget_class\n    style.map(\n      validated_style,\n      foreground=[('invalid', 'white'), ('!invalid', 'black')],\n      fieldbackground=[\n        ('invalid', 'darkred'), \n        ('!invalid', 'white')\n      ]\n    )\n    self.configure(style=validated_style) \n```", "```py\n# models.py, inside the SettingsModel class\n  fields = {\n    #...\n    **'theme': {'type': 'str', 'value': 'default'}**\n    } \n```", "```py\n # application.py, in Application._load_settings()\n    style = ttk.Style()\n    theme = self.settings.get('theme').get()\n    if theme in style.theme_names():\n      style.theme_use(theme) \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    style = ttk.Style()\n    themes_menu = tk.Menu(self, tearoff=False, **self.styles)\n    for theme in style.theme_names():\n      themes_menu.add_radiobutton(\n        label=theme, value=theme,\n        variable=self.settings['theme']\n      )\n    options_menu.add_cascade(label='Theme', menu=themes_menu) \n```", "```py\n self.settings['theme'].trace_add(\n      'write', self._on_theme_change\n    ) \n```", "```py\n# mainmenu.py, inside MainMenu\n  @staticmethod\n  def _on_theme_change(*_):\n    message = \"Change requires restart\"\n    detail = (\n      \"Theme changes do not take effect\"\n      \" until application restart\"\n    )\n    messagebox.showwarning(\n      title='Warning',\n      message=message,\n      detail=detail\n    ) \n```"]