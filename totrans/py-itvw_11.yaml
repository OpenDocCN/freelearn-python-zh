- en: Chapter 11. Tarek Ziadé
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Tarek Ziadé](img/B08180_14_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tarek Ziadé is a French Python developer and author. Past roles have included
    R&D developer at Nuxeo and software engineer at Mozilla. Today Tarek is a staff
    application engineer at Mozilla, where he creates tools for developers. He has
    written several Python books, in both English and French, including *Expert Python
    Programming* and *Python Microservices Development*. Tarek is the founder of Afpy,
    a French Python user group and has delivered talks at both PyCon and EuroPython.
    He regularly contributes to open source Python projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discussion themes: AI, v2.7/v3.x, Afpy.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Tarek Ziadé here: @tarek_ziade**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mike Driscoll**: Why did you become a programmer?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé**: In hindsight, I became a programmer for two reasons: to become
    the god of my little world and to impress my mom, who is a programmer as well.'
  prefs: []
  type: TYPE_NORMAL
- en: When I was six years old, I was at a fair with my mom. There was a giant paper
    sheet on the floor, with a turtle that had a pen. You could program the turtle
    with cards to tell it where to go and when to put the pen down on the paper. I
    was obsessed with that turtle. The feeling of planning what would happen felt
    so good.
  prefs: []
  type: TYPE_NORMAL
- en: Years later, my mom got us a serious computer (the Thomson TO8D), and I could
    program in BASIC and Assembly. I built incredible things. With my mom's help,
    I was driving robots.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What sort of things did you do with the robots with your mom?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: Well, the computer we bought had a programmable serial port and
    extensions to get a parallel port, which was quite rare back then.'
  prefs: []
  type: TYPE_NORMAL
- en: We were driving step engines in BASIC or Assembly (with a cartridge), since
    the ports could be directly addressed. This was nothing fancy, but as a kid, being
    able to do at home something similar to what we were doing with that turtle amazed
    me.
  prefs: []
  type: TYPE_NORMAL
- en: My mom also got one of those fancy Olivetti laptops, with a small needles printer
    that could print stuff in three colors. We were having fun printing fractals.
    My mom was doing the heavy lifting (as a math teacher) and I was just tweaking
    the colors.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: So how did you come across Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: When I started coding professionally in the nineties, I was using
    Borland tools (C++Builder and Delphi) which could use VCL components.'
  prefs: []
  type: TYPE_NORMAL
- en: My company bought some VCL components, but we were highly frustrated by the
    poor support from their authors and some bugs. That's when I discovered the Indy
    Project, which was developing and releasing open source VCL components that provided
    most network protocols. That library was to us, what Requests is to Python today.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''Communities built around open source projects struck me as
    the way to go in software computing.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I got intrigued by this open source concept. Communities built around open source
    projects struck me as the way to go in software computing. Through my online research,
    I found out about the Zope Project and eventually discovered Python through that.
    A few months later, I joined a company that was building a Zope CMS.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Have you done anything with robots using Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: Not really. I hacked a bit on a Raspberry Pi when I first got one.
    I also hacked a Wireless Ghetto Blaster using a suitcase, some old car speakers
    and a Raspberry Pi, with a Wi-Fi dongle and Mopidy.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''I also hacked a Wireless Ghetto Blaster using a suitcase,
    some old car speakers and a Raspberry Pi.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I looked at the OpenCV library through Python to do some image processing. Most
    of the other electronics projects that I worked on were on Arduino and its pseudo
    C language. My most advanced project was a small RC car and that was about it.
    I got a little bit bored after that.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Python is big in AI and machine learning at the moment. What
    do you think makes Python so popular?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: I think that Python has become popular for AI because the SciPy
    community has built some state-of-the-art frameworks and libs in the past few
    years (pandas, scikit-learn, IPython/Jupyter) that lower the bar for scientists
    to use Python instead of R or other tools.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''AI and machine learning innovation is spearheaded by academics...Python
    becomes a natural fit for them.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: AI and machine learning innovation is spearheaded by academics. Since Python
    has steadily grown as one of the main languages for learning programming in academics,
    Python becomes a natural fit for them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What did you personally like about Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: I fell in love with Python and its community. Python is open source,
    versatile, and powerful, yet simple to code.'
  prefs: []
  type: TYPE_NORMAL
- en: Coming from a C++ and Delphi background, at first I thought that Python was
    a weak scripting language that could not be used to build serious applications.
    Eventually, I became impressed by how simple it was to create Python programs
    that were concise and straightforward to understand.
  prefs: []
  type: TYPE_NORMAL
- en: C++ and Delphi looked over-engineered at that point for all of the network applications
    that I was building. I could just write Python scripts that followed the KISS
    principle and build serious web applications that way.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What would you say are Python''s strengths and weaknesses as
    a language?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: Today, with over a decade of Python programming behind me, I think
    that Python''s biggest strength is how visionary Guido van Rossum and the Python-Dev
    team are. As far as I can tell, every decision that was made in the last 20 years
    was a good one.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''Python''s biggest strength is how visionary Guido van Rossum
    and the Python-Dev team are.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: From the memorandum (a CPython freeze designed so that other implementations
    like PyPy and Jython could catch up), to how asynchronous features were gradually
    added, Python got modernized in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: Each time that Python was getting a little bit behind compared to other languages,
    another feature would be added. Unlike some other languages that had a stellar
    start, then faded again, Python is steadily getting bigger every year.
  prefs: []
  type: TYPE_NORMAL
- en: One weakness for Python is the standard library. The fact that a package added
    in the stdlib is rarely removed is an issue. For instance, the stdlib currently
    has two classes named Future that are slightly different. One is in `asyncio`
    and one is in `concurrent`. I wish Python had a better story for its stdlib.
  prefs: []
  type: TYPE_NORMAL
- en: I think the biggest weakness of Python is the Python 2 versus Python 3 never-ending
    debate. That issue drove away some developers, because of the uncertainty about
    which version to use. It looks like we're getting past that debate now, which
    is great.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''I think the biggest weakness of Python is the Python 2 versus
    Python 3 never-ending debate.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Driscoll**: What is your opinion on the long life of Python 2.7?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: I think that the transition took a while but it is happening transparently
    now and it is a success. The Python 2 versus 3 days are over, since the Python
    3 ecosystem is now mature enough for most projects.'
  prefs: []
  type: TYPE_NORMAL
- en: To my knowledge, there are no major libs or frameworks that are still lacking
    Python 3 support. So there's no good reason to start a new project using Python
    2.7\. People just use Python and for most of them it will happen to be Python
    3\. One day Python 2.7 will cease to exist and nobody will really miss it.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''One day Python 2.7 will cease to exist and nobody will really
    miss it.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Driscoll**: How did you end up becoming an author of Python books?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: When I started programming in Zope and Python, I was the creator
    and maintainer of a French forum called Zopeur. I was spending a lot of time answering
    all of the questions.'
  prefs: []
  type: TYPE_NORMAL
- en: Zopeur started as a one-man project, so if I stopped answering questions, then
    nobody else answered them. I was also learning so much by actually searching for
    answers and by diving into the details.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''I was also learning so much by actually searching for answers
    and by diving into the details.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The first book that I wrote about Python came about because I wanted to dive
    deeply into Python and make my work useful to others. I was filling a gap too,
    since there were no original books in French about Python.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What have you learned in the writing process?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: Writing a book is a long and exhausting project. The first book
    took me nine months and was very painful to finish. It''s easy to quit. It''s
    also common to get lost in details and forget about the big picture. I''ve learned
    how to organize my thoughts and keep the big picture in my head.'
  prefs: []
  type: TYPE_NORMAL
- en: When I wrote my first book in English, I also learned the hard way that it's
    difficult to write in a non-native language. You need to keep your sentences as
    straightforward and short as possible. I was also exposed to a larger community
    of readers, for better or worse.
  prefs: []
  type: TYPE_NORMAL
- en: The last thing to note about writing books is that you need to accept that your
    book will never be perfect. By the time you have finished writing, and you have
    read back through the first chapters, you will want to rewrite things all over
    again.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''You need to accept that your book will never be perfect.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Driscoll**: Have you learned anything from your readers? If so, what?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: I''ve learned a lot from feedback from my readers. I still get a
    few emails from readers wanting to share their thoughts.'
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes readers want to point out some mistakes or share solutions that they
    think are better. I have received a few interesting threads that I wish had been
    available to me before my books were published. I think books that are published
    on the web in real time, allowing readers to send feedback as the writer delivers
    chapters, are superior for that reason.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Are you aware of any other books about Python that have come
    out in French since yours were published?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: To be fair, there was a Zope book before mine. But as far as I know,
    mine was the first book entirely dedicated to Python which was written in French,
    by a native speaker. Since then, there have been dozens of books written in French
    about Python. I am the old guard now.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''Mine was the first book entirely dedicated to Python which
    was written in French, by a native speaker.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Driscoll**: Why did you found the French Python User Group, Afpy?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: As I mentioned earlier, I was maintaining a Zope/Python forum called
    Zopeur. At some point I had the idea of having a meeting in real life in Paris,
    with a dozen of the active members. We met for beers and we founded a foundation
    around Python. After that, I shut down my forum and we built Afpy on the ground.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What challenges did you face then and are there any challenges
    currently?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: The first few years of running Afpy were great. We were all good
    friends united around our passion for Python.'
  prefs: []
  type: TYPE_NORMAL
- en: The first challenge that we met was how to integrate French companies that wanted
    to be part of Afpy. That took us a few years, because enterprises wanted to use
    our foundation as a tool to promote their business (sometimes aggressively). We
    were risking losing the original spirit of Afpy.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''We were risking losing the original spirit of Afpy.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We were also a bit paranoid about what would happen if several developers from
    the same company were elected to the steering committee. But when we started to
    organize PyCon France, it became a natural fit for those companies to be sponsors.
    In hindsight, I think that we did the right thing by being protective.
  prefs: []
  type: TYPE_NORMAL
- en: Another challenge was trying to have more diversity in Afpy. We were mostly
    men and I wanted to make our foundation more welcoming to women. I did some work
    around that and found that diversity was a very controversial topic. Eventually,
    I got burnt out from politics and the work was not fun anymore.
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''Eventually, I got burnt out from politics and the work was
    not fun anymore.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: I was Afpy president for seven years, so I felt that it was the right time to
    move on. I am not sure what the current status of Afpy is, since I'm not involved.
    Afpy still looks like a vibrant user group though, which is great.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What made you choose Zope over some of the other alternatives?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: The standard was PHP-powered frameworks back then, but Zope was
    the cool stuff. Zope was very innovative and with Python it was more than web
    pages.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''Zope was very innovative and with Python it was more than
    web pages.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Plone was starting to take off and get very popular in France. Companies that
    specialized in building a CMS for government agencies often used Plone, because
    it had most features already built in. Plone, at one point, was at the top of
    the game for accessibility and groupware features.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Which Python web framework do you use now and why do you use
    it?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: At Mozilla we do a lot of Django and Flask, and a bit of Pyramid.
    Occasionally we use some Twisted and Tornado. Since we''re now shipping most stuff
    in Docker images, developers that start new projects are not tied to specific
    Python versions anymore. So asynchronous frameworks are starting to get used.'
  prefs: []
  type: TYPE_NORMAL
- en: When I can pick my framework of choice, I like to use Bottle, for very simple
    web services and Flask, for bigger projects that need a bit of UI. There are a
    large number of Flask libraries out there. That said, the next server-side project
    that I will start will be `aiohttp`, that's for sure.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Are you working on any open source projects yourself that you
    would like to talk about?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: I work on several projects, but a project that I am obsessed with
    right now is `molotov` ([http://molotov.readthedocs.io/](http://molotov.readthedocs.io/)).
    It''s a small load testing tool, based on Python 3.5+ and `aiohttp` client, that
    we''re using to test our web services.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Tarek Ziadé: ''A project that I am obsessed with right now is molotov.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The design focuses on making it as straightforward as possible for developers
    to write a load test, by describing a scenario using simple Python coroutines.
    Once we have a set of those functions, then they are used to run simple smoke
    tests, load tests and distributed load tests.
  prefs: []
  type: TYPE_NORMAL
- en: Thanks to `asyncio` and `aiohttp`, the tool can send a pretty amazing load on
    our services and we're able to break most services with a single `molotov` client.
    I am adding on the top of this tool some CI Helpers, so we can continuously test
    the performance of our service.
  prefs: []
  type: TYPE_NORMAL
- en: One extension that I am going to add this quarter is the ability to deploy a
    stack with Docker images on AWS. This will happen prior to running the load test
    and grab back metrics once it's done. We also have a bigger project called Ardere,
    that drives AWS ECS for doing distributed tests. You can follow all of the work
    on those tools at [https://github.com/loads](https://github.com/loads).
  prefs: []
  type: TYPE_NORMAL
- en: '**Mike Driscoll: What are you most excited about in Python today?**'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: Asynchronous programming. The addition of `async/await` in the language
    and projects like `aiohttp` are truly putting Python back into the game of building
    network apps. Of course, we have been able to do that with Twisted for over a
    decade, but now it''s part of the core and implemented in a beautiful way. It''s
    as easy as in Node.js to build async web apps in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What changes would you like to see in future Python releases?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Ziadé**: I''d love to see PyPy on a par with CPython (maybe we should have
    yet another memorandum so that PyPy catches up) and have the ability to run any
    of my projects with it (including C extensions). More anecdotally, I would love
    to see `setup.py` killed in our packaging system. It''s the source of many issues.
    I''ve tried and failed (see PEP 390), but maybe one day it will happen.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Thank you, Tarek Ziadé.'
  prefs: []
  type: TYPE_NORMAL
