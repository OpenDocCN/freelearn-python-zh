["```py\n<st c=\"4593\">(main_sub_flask.py)</st> from modules_sub_flask import create_app_sub\nfrom flask_cors import CORS\n… … … … … …\nflask_sub_app = create_app_sub(\"../config_dev_sub.toml\")\nCORS(flask_sub_app) <st c=\"4776\">(main.py)</st>\n<st c=\"4785\">from werkzeug.middleware.dispatcher import DispatcherMiddleware</st>\n<st c=\"4849\">from main_sub_flask import flask_sub_app</st> … … … … … …\nfrom modules import create_app\napp = create_app('../config_dev.toml')\n… … … … … …\nfinal_app = <st c=\"4996\">DispatcherMiddleware</st>(<st c=\"5018\">app</st>, {\n    '/fastapi': ASGIMiddleware(fast_app),\n    '/django': django_app, <st c=\"5086\">'/flask': flask_sub_app</st> })\n```", "```py\n pip install a2wsgi\n```", "```py\n (main_fastapi.py)\nfrom fastapi import FastAPI\nfrom fastapi.middleware.cors import CORSMiddleware\nfrom modules_fastapi.api import faculty\nfast_app = FastAPI()\nfast_app.include_router(faculty.router, prefix='/ch12')\nfast_app.add_middleware(\n    CORSMiddleware, allow_origins=['*'],\n    allow_credentials=True, allow_methods=['*'], allow_headers=['*'])\n(main.py)\nfrom main_fastapi import fast_app\nfrom a2wsgi import ASGIMiddleware\n… … … … … …\nfinal_app = DispatcherMiddleware(app, { <st c=\"7138\">'/fastapi': ASGIMiddleware(fast_app),</st> '/django': django_app,\n    '/flask': flask_sub_app\n})\n```", "```py\n     os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'modules_django.modules_django.settings')\n    ```", "```py\n    <st c=\"8316\">settings.py</st> with the Django directory name requires adjusting some package names in the Django project. Among the modifications is the change of <st c=\"8461\">ROOT_URLCONF</st> in <st c=\"8477\">settings.py</st> from <st c=\"8494\">'modules_django.urls'</st> to <st c=\"8519\">'modules_django.modules_django.urls'</st>.\n    ```", "```py\n     INSTALLED_APPS = [\n        'django.contrib.admin',\n        'django.contrib.auth',\n        'django.contrib.contenttypes',\n        'django.contrib.sessions',\n        'django.contrib.messages',\n        'django.contrib.staticfiles',\n        'rest_framework',\n        'corsheaders', <st c=\"8873\">'modules_django.olms'</st> ]\n    ```", "```py\n     WSGI_APPLICATION = '<st c=\"9088\">modules_django.olms</st>), import all the custom components with the project folder included. The following snippet shows the implementation of REST services that manage student borrowers using Django RESTful services and Django ORM:\n\n    ```", "```py\n\n    ```", "```py\n     os.environ[\"DJANGO_ALLOW_ASYNC_UNSAFE\"] = \"true\"\n    ```", "```py\n    django.core.exceptions.SynchronousOnlyOperation: You cannot call this from an async context - use a thread or sync_to_async.\n    ```", "```py\n    <st c=\"10671\">from django.core.wsgi import get_wsgi_application</st>\n    <st c=\"10721\">from django.contrib.staticfiles.handlers import StaticFilesHandler</st> … … … … … … <st c=\"10800\">django_app = StaticFilesHandler(</st> <st c=\"10832\">get_wsgi_application())</st> … … … … … …\n    final_app = DispatcherMiddleware(app, {\n        '/fastapi': ASGIMiddleware(fast_app), <st c=\"10946\">'/django': django_app,</st> '/flask': flask_sub_app\n    })\n    ```", "```py\n<st c=\"12413\">from tornado.wsgi import WSGIContainer</st>\n<st c=\"12452\">from tornado.web import FallbackHandler, Application</st> from tornado.platform.asyncio import AsyncIOMainLoop <st c=\"12559\">from modules_tornado.handlers.home import MainHandler</st> import asyncio\n… … … … … …\nfrom modules import create_app\napp = create_app('../config_dev.toml')\n… … … … … …\nfinal_app = DispatcherMiddleware(app, {\n    '/fastapi': ASGIMiddleware(fast_app),\n    '/django': django_app,\n    '/flask': flask_sub_app\n}) <st c=\"12850\">main_flask = WSGIContainer(final_app)</st>\n<st c=\"12887\">application = Application([</st> (r\"/ch12/tornado\", MainHandler), <st c=\"12949\">(r\".*\", FallbackHandler, dict(fallback=main_flask))</st>, <st c=\"13002\">])</st> if __name__ == \"__main__\":\n    loop = asyncio.get_event_loop() <st c=\"13064\">application.listen(5000)</st> loop().run_forever()\n```", "```py\n pip install opentelemetry-api opentelemetry-sdk opentelemetry-instrumentation-flask opentelemetry-instrumentation-requests\n```", "```py\n from opentelemetry import trace\nfrom opentelemetry.sdk.resources import Resource\nfrom opentelemetry.sdk.trace import TracerProvider\nfrom opentelemetry.sdk.trace.export import BatchSpanProcessor\nfrom opentelemetry.sdk.trace.export import ConsoleSpanExporter\nfrom opentelemetry.sdk.resources import SERVICE_NAME, Resource\nfrom opentelemetry.instrumentation.flask import FlaskInstrumentor\ndef create_app(config_file):\n    provider = TracerProvider(resource= Resource.create({SERVICE_NAME: \"<st c=\"15437\">packt-flask-service</st>\"}))\n    processor = BatchSpanProcessor(ConsoleSpanExporter())\n    provider.add_span_processor(processor)\n    trace.set_tracer_provider(provider)\n    global tracer\n    tracer = trace.get_tracer(\"<st c=\"15633\">packt-flask-tracer</st>\")\n    app = OpenAPI(__name__, info=info)\n    … … … … … … <st c=\"15703\">FlaskInstrumentor(app).instrument(</st><st c=\"15737\">enable_commenter=True, commenter_options={})</st> … … … … … …\n```", "```py\n<st c=\"17040\">from modules import tracer</st> @current_app.post(\"/login/add)\ndef add_login(): <st c=\"17116\">with tracer.start_as_current_span('users_span'):</st> login_json = request.get_json()\n        repo = LoginRepository()\n        result = repo.insert_login(login_json)\n        if result == False:\n            return jsonify(message=\"error\"), 500\n        else:\n            return jsonify(record=login_json)\n```", "```py\n pip install opentelemetry-exporter-jaeger\n```", "```py\n<st c=\"18968\">from opentelemetry.exporter.jaeger.thrift import JaegerExporter</st> … … … … … …\n    trace.set_tracer_provider(provider) <st c=\"19080\">jaeger_exporter = JaegerExporter(agent_host_name= \"localhost\", agent_port=6831,)</st><st c=\"19160\">trace.get_tracer_provider().add_span_processor( BatchSpanProcessor(jaeger_exporter))</st> global tracer\n    tracer = trace.get_tracer(\"packt-flask-tracer\")\n    … … … … … …\n```", "```py\n<st c=\"21938\">from flask_openapi3 import Info</st>\n<st c=\"21970\">from flask_openapi3 import OpenAPI</st> … … … … … … <st c=\"22017\">info = Info(title=\"Flask Interoperability (A</st> <st c=\"22061\">Microservice)\", version=\"1.0.0\")</st> … … … … … …\ndef create_app(config_file):\n    … … … … … … <st c=\"22147\">app = OpenAPI(__name__, info=info)</st> app.config.from_file(config_file, toml.load)\n    cors = CORS(app)\n    app.config['CORS_HEADERS'] = 'Content-Type'\n    … … … … … …\n```", "```py\n<st c=\"22683\">from flask_openapi3 import Tag</st>\n<st c=\"22714\">list_login_tag = Tag(name=\"list_login\", description=\"List all user credentials.\")</st> … … … … … …\n@current_app.get(\"/login/list/all\", <st c=\"22844\">summary=\"List all login records.\", tags=[list_login_tag]</st>)\ndef list_login(): <st c=\"22921\">\"\"\"</st><st c=\"22924\">API for retrieving all the records from the olms database.</st><st c=\"22983\">\"\"\"</st> with tracer.start_as_current_span('users_span'):\n        repo = LoginRepository()\n        result = repo.select_all_login()\n        print(result)\n        return jsonify(records=result)\n```", "```py\n import 'dart:convert';\nimport 'package:flutter/material.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:library_app/olms/models/login.dart';\nclass LoginProvider with ChangeNotifier{\n  List<Login> _items = [];\n  List<Login> get items {\n    return [..._items];\n  }\n  Future<void> addLogin(String username, String password, String role ) async { <st c=\"27210\">String url = 'http://<actual IP address>:5000/login/add';</st> try{\n      if(username.isEmpty || password.isEmpty || role.isEmpty){\n         return;\n      }\n      Map<String, dynamic> request = {\"username\": username, \"password\": password, \"role\": int.parse(role)};\n      final headers = {'Content-Type': 'application/json'}; <st c=\"27497\">final response = await http.post(Uri.parse(url), headers: headers, body: json.encode(request));</st> Map<String, dynamic> responsePayload = json.decode(response.body);\n      final login = Login(\n          username: responsePayload[\"username\"],\n          password: responsePayload[\"password\"],\n          role: responsePayload[\"role\"]\n      );\n      print(login);\n      notifyListeners();\n    }catch(e){\n      print(e);\n    }\n  }\n```", "```py\n Future<void> get getLogin async { <st c=\"27967\">String url = 'http://<actual IP address>:5000/login/list/all';</st> var response;\n    try{ <st c=\"28049\">response = await http.get(Uri.parse(url));</st><st c=\"28091\">Map body = json.decode(response.body);</st> List<Map> loginRecs = body[\"records\"].cast<Map>();\n      print(loginRecs);\n      _items = loginRecs.map((e) => Login(\n          id: e[\"id\"],\n          username: e[\"username\"],\n          password: e[\"password\"],\n          role: e[\"role\"],\n      )\n      ).toList();\n    }catch(e){\n      print(e);\n    }\n    notifyListeners();\n  }\n}\n```", "```py\n<st c=\"28671\">(/lib/olms/models/login.dart</st> class Login{\n  int? id;\n  String username;\n  String password;\n  int role;\n  Login({ required this.username, required this.password, required this.role, this.id=0});\n}\n```", "```py\n<st c=\"29286\">(/lib/olms/tasks/task.dart)</st> … … … … … … <st c=\"29326\">class _TasksWidgetState extends State<LoginViewWidget> {</st> … … … … … …\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n    … … … … … …\n        children: [\n          Row(\n            children: [\n              Expanded(\n                child: TextFormField(\n                  controller: userNameController,\n                  decoration: const InputDecoration(\n                    labelText: 'Username',\n                    border: OutlineInputBorder(),\n                  ),\n              … … … … … …\n              Expanded(\n                child: TextFormField(\n                  … … … … … …\n                    labelText: 'Password',\n                    border: OutlineInputBorder(),\n                  ),\n                ),\n              ),\n              Expanded(\n                child: TextFormField(\n                    … … … … … …\n                    labelText: 'Role',\n                    border: OutlineInputBorder(),\n                  ),\n              … … … … … …\n              const SizedBox(width: 10,),\n              ElevatedButton(\n                  … … … … … …\n                  child: const Text(\"Add\"),\n                  onPressed: () {\n                    Provider.of<LoginProvider>(context, listen: false).addLogin(userNameController.text, passwordController.text, roleController.text);\n                    … … … … … …\n                  }\n              )\n            ],\n          ),\n```", "```py\n … … … … … …\nFutureBuilder(future: Provider.of<LoginProvider>(context, listen: false).getLogin,\n       builder: (ctx, snapshot) =>\n         snapshot.connectionState == ConnectionState.waiting\n          ? const Center(child: CircularProgressIndicator())\n          : Consumer<LoginProvider>(\n              … … … … … …\n              builder: (ctx, loginProvider, child) =>\n                … … … … … …\n                    Container(\n                    … … … … … … …\n                      child: SingleChildScrollView(\n                        scrollDirection: Axis.horizontal,\n                            child: DataTable(\n                              columns: <DataColumn>[\n                                 DataColumn(\n                                  label: Text(\n                                    'Username',\n                                    style:\n                                        … … … … … …\n                                ),\n                                DataColumn(\n                                  label: Text(\n                                    'Password',\n                                    style:\n                                 … … … … … …\n                                ),\n                                DataColumn(\n                                  label: Text(\n                                    'Role',\n                                … … … … … …\n                                ),],\n                         rows: <DataRow>[\n                           DataRow(cells: <DataCell>[\n                             DataCell(Text( loginProvider. items[i].username)),\n                             DataCell(Text(loginProvider. items[i].password)),\n                             DataCell(Text(loginProvider. items[i].role.toString())),\n                                  ],\n                             … … … … … …\n```", "```py\n export const FacultyBorrowers =(props)=>{\n    const [id] = React.useState(0);\n    const [firstname, setFirstname] = React.useState('');\n    const [lastname, setLastname] = React.useState('');\n    const [empid, setEmpid] = React.useState('');\n    const [records, setRecords] = React.useState([]);\n```", "```py\n React.useEffect(() => {\n        const url_get = 'http://localhost:5000/fastapi/ ch12/faculty/borrower/list/all';\n        fetch(url_get)\n        .then((response) =>  response.json() )\n        .then((json) =>  { setRecords(json)})\n        .catch((error) => console.log(error));\n      }, []);\n    const addRecord = () =>{\n         const url_post = 'http://localhost:5000/fastapi/ ch12/faculty/borrower/add';\n         const options = {\n            method: 'POST',\n            headers:{\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(\n                {\n                'id': id,\n                'firstname': firstname,\n                'lastname': lastname,\n                'empid': empid\n                }\n            )\n        }\n         fetch(url_post, options)\n            .then((response) => { response.json() })\n            .then((json) => { console.log(json)})\n            .catch((error) => console.log(error));\n            const url_get = 'http://localhost:5000/fastapi/ ch12/faculty/borrower/list/all';\n            fetch(url_get)\n            .then((response) =>  response.json() )\n            .then((json) =>  { setRecords(json)})\n            .catch((error) => console.log(error));\n    }\n```", "```py\n return <div>\n      <form id='idForm1' <st c=\"34402\">onSubmit={ addRecord }</st>>\n        Employee ID: <input type='text' <st c=\"34459\">onChange={ (e) => {setEmpid(e.target.value)}}</st> /><br/>\n        First Name: <input type='text' <st c=\"34544\">onChange={ (e) => {setFirstname(e.target.value) }}</st> /><br/>\n        Last Name: <input type='text' <st c=\"34633\">onChange={ (e) => {setLastname(e.target.value)}}</st>/><br/>\n        <input type='submit' value='ADD Faculty Borrower'/>\n            </form>\n            <br/>\n            <h2>List of Faculty Borrowers</h2>\n            <table >\n              <thead>\n                  <tr><th>Id</th>\n                      <th>Employee ID</th>\n                      <th>First Name</th>\n                      <th>Last Name</th>\n              </tr></thead>\n              <tbody> <st c=\"34906\">{records.map((u) => (</st> <tr>\n                    <td>{u.id}</td>\n                    <td>{u.empid}</td>\n                    <td>{u.firstname}</td>\n                    <td>{u.lastname}</td>\n                  </tr>\n                ))}\n            </tbody></table>\n        </div>}\n```", "```py\n<st c=\"36039\">from ariadne.explorer import ExplorerGraphiQL</st> … … … … … … <st c=\"36097\">flask_sub_app = create_app_sub(\"../config_dev_sub.toml\")</st> CORS(flask_sub_app) <st c=\"36174\">explorer_html = ExplorerGraphiQL().html(None)</st>\n<st c=\"36219\">@flask_sub_app.route(\"/graphql\", methods=[\"GET\"])</st> def graphql_explorer():\n    return explorer_html, 200\n```", "```py\n<st c=\"36991\">schema {</st><st c=\"37000\">query: Query</st><st c=\"37013\">mutation: Mutation</st>\n<st c=\"37032\">}</st>\n<st c=\"37034\"># These are the GraphQL model classes</st>\n<st c=\"37071\">type Complainant {</st>\n <st c=\"37090\">id: ID!</st>\n <st c=\"37098\">firstname: String!</st>\n <st c=\"37117\">lastname: String!</st>\n <st c=\"37135\">middlename: String!</st>\n <st c=\"37155\">email: String!</st>\n <st c=\"37170\">date_registered: String!</st>\n<st c=\"37195\">}</st>\n<st c=\"37197\">type Complaint {</st>\n <st c=\"37213\">id: ID!</st>\n <st c=\"37221\">ticketId: String!</st>\n <st c=\"37239\">catid: Int!</st>\n <st c=\"37251\">complainantId: Int!</st>\n <st c=\"37271\">ctype: Int!</st>\n<st c=\"37320\">schema.graphql</st> file is the <st c=\"37492\">Mutation</st> and <st c=\"37505\">Query</st>. Then, what follows are the definitions of GraphQL *<st c=\"37562\">object types</st>*, the building blocks of GraphQL that represent the records that the REST services will fetch from or persist in the data repository. In the given definition file, the GraphQL transactions will focus on utilizing <st c=\"37787\">Complainant</st>, <st c=\"37800\">Complaint</st>, and their related model classes to manage the feedback sub-module of the *<st c=\"37884\">Online Library</st>* *<st c=\"37899\">Management System</st>*.\n\t\t\t<st c=\"37917\">Each model class consists of</st> `<st c=\"37947\">Int</st>`<st c=\"37950\">,</st> `<st c=\"37952\">Float</st>`<st c=\"37957\">,</st> `<st c=\"37959\">Boolean</st>`<st c=\"37966\">,</st> `<st c=\"37968\">ID</st>`<st c=\"37970\">, or any custom scalar object type.</st> <st c=\"38006\">GraphQL also allows model classes to have</st> `<st c=\"38048\">enum</st>` <st c=\"38052\">and list (</st>`<st c=\"38063\">[]</st>`<st c=\"38066\">) field types.</st> <st c=\"38082\">The scalar or multi-valued fields can be nullable or non-nullable (</st>`<st c=\"38149\">!</st>`<st c=\"38150\">).</st> <st c=\"38153\">So far, the given model classes all consist of non-nullable scalar fields.</st> <st c=\"38228\">By the way, the octothorpe or hashtag (</st>`<st c=\"38267\">#</st>`<st c=\"38269\">) sign is the comment symbol of</st> <st c=\"38301\">the SDL.</st>\n\t\t\t<st c=\"38309\">After</st> <st c=\"38315\">building the model classes, the next step is to define the</st> `<st c=\"38375\">Query</st>` <st c=\"38380\">and</st> `<st c=\"38385\">Mutation</st>` <st c=\"38393\">operations with their parameters and</st> <st c=\"38431\">return types.</st>\n\n```", "```py\n\n\t\t\t<st c=\"38927\">Our Flask sub-application focuses on the persistence and retrieval of feedback about the Online Library’s processes.</st> <st c=\"39044\">Its</st> `<st c=\"39048\">Query</st>` <st c=\"39053\">operations involve retrieving the complaints (</st>`<st c=\"39100\">listAllComplaints</st>`<st c=\"39118\">), complainants (</st>`<st c=\"39136\">listAllComplainants</st>`<st c=\"39156\">), and the category (</st>`<st c=\"39178\">listAllCategories</st>`<st c=\"39196\">) and complaint type (</st>`<st c=\"39219\">listAllComplaintTypes</st>`<st c=\"39241\">) lookups.</st> <st c=\"39253\">On the other hand, the</st> `<st c=\"39276\">Mutation</st>` <st c=\"39284\">operations involve adding complaints (</st>`<st c=\"39323\">createComplaint</st>`<st c=\"39339\">), complainants (</st>`<st c=\"39357\">createComplainant</st>`<st c=\"39375\">), complaint categories (</st>`<st c=\"39401\">createCategory</st>`<st c=\"39416\">), and complaint types (</st>`<st c=\"39441\">createComplaintType</st>`<st c=\"39461\">) to the database.</st> `<st c=\"39481\">createCategory</st>` <st c=\"39495\">and</st> `<st c=\"39500\">createComplaintType</st>` <st c=\"39519\">have their respective</st> `<st c=\"39542\">String</st>` <st c=\"39548\">parameter name, but the other mutators use input types to organize and manage their lengthy parameter list.</st> <st c=\"39657\">Here are the</st> <st c=\"39669\">implementations of the</st> `<st c=\"39693\">ComplaintInput</st>` <st c=\"39707\">and</st> `<st c=\"39712\">ComplainantInput</st>` <st c=\"39728\">types:</st>\n\n```", "```py\n\n\t\t\t<st c=\"39974\">Aside from input types,</st> `<st c=\"39998\">Query</st>` <st c=\"40003\">and</st> `<st c=\"40008\">Mutation</st>` <st c=\"40016\">operators need result types to manage the response of GraphQL’s REST service executions.</st> <st c=\"40106\">Here are some of the result types used by our</st> `<st c=\"40152\">Query</st>` <st c=\"40157\">and</st> `<st c=\"40162\">Mutation</st>` <st c=\"40170\">operations:</st>\n\n```", "```py\n\n\t\t\t<st c=\"40579\">Now, all these</st> <st c=\"40593\">object types, input types, and result types build GraphQL resolvers that implement these</st> `<st c=\"40683\">Query</st>` <st c=\"40688\">and</st> `<st c=\"40693\">Mutation</st>` <st c=\"40701\">operations.</st> <st c=\"40714\">A</st> *<st c=\"40716\">GraphQL resolver</st>* <st c=\"40732\">connects the application’s repository and data layer to the GraphQL architecture.</st> <st c=\"40815\">Although GraphQL can provide auto-generated resolver implementations, it is still practical to implement a custom resolver for each operation to capture the needed requirements, especially if the operations involve complex constraints and scenarios.</st> <st c=\"41065\">The following snippet from</st> `<st c=\"41092\">modules_sub_flask/resolvers/complainant_repo.py</st>` <st c=\"41139\">implements the resolvers of our</st> <st c=\"41172\">defined</st> `<st c=\"41180\">Query</st>` <st c=\"41185\">and</st> `<st c=\"41190\">Mutation</st>` <st c=\"41198\">operations:</st>\n\n```", "```py\n\n\t\t\t<st c=\"41854\">The</st> `<st c=\"41859\">insert_complainant()</st>` <st c=\"41879\">transaction</st> <st c=\"41891\">accepts the input from the GraphQL dashboard and saves the data to the database, while the following</st> `<st c=\"41993\">select_all_complainant()</st>` <st c=\"42017\">retrieves all the records from the database and renders them as a list of complainant records to the</st> <st c=\"42119\">GraphQL dashboard:</st>\n\n```", "```py\n\n\t\t\t<st c=\"42480\">The</st> `<st c=\"42485\">ariadne</st>` <st c=\"42492\">module has</st> `<st c=\"42504\">QueryType</st>` <st c=\"42513\">and</st> `<st c=\"42518\">MutationType</st>` <st c=\"42530\">that map GraphQL components such as</st> *<st c=\"42567\">input types</st>*<st c=\"42578\">. The</st> `<st c=\"42584\">MutationType</st>` <st c=\"42596\">object, for instance, maps the</st> `<st c=\"42628\">ComplainantInput</st>` <st c=\"42644\">type to the</st> `<st c=\"42657\">input</st>` <st c=\"42662\">parameter of the</st> `<st c=\"42680\">insert_complainant()</st>` <st c=\"42700\">method.</st>\n\t\t\t<st c=\"42708\">Our GraphQL provider looks</st> <st c=\"42735\">like a repository class, but it can also be a service type as long as it meets the requirements of the</st> `<st c=\"42839\">Query</st>` <st c=\"42844\">and</st> `<st c=\"42849\">Mutation</st>` <st c=\"42857\">functions defined in the</st> `<st c=\"42883\">schema.graphql</st>` <st c=\"42897\">definition file.</st>\n\t\t\t<st c=\"42914\">Now, the mapping of each resolver function to its respective HTTP request function in</st> `<st c=\"43001\">schema.graphql</st>` <st c=\"43015\">always happens in</st> `<st c=\"43034\">main.py</st>`<st c=\"43041\">. The following snippet in</st> `<st c=\"43068\">main_sub_flask.py</st>` <st c=\"43085\">performs mapping of these two</st> <st c=\"43116\">GraphQL components:</st>\n\n```", "```py\n\n\t\t\t`<st c=\"44158\">main_sub_flask.py</st>` <st c=\"44176\">loads all the</st> <st c=\"44191\">components from</st> `<st c=\"44207\">schema.graphql</st>` <st c=\"44221\">and maps all its operations to the repository and model layers of the mounted application.</st> <st c=\"44313\">It is recommended to place the schema definition file in the main project directory for easy access to the file.</st> *<st c=\"44426\">Figure 12</st>**<st c=\"44435\">.9</st>* <st c=\"44437\">shows the sequence of operations needed to run the</st> `<st c=\"44489\">createComplainant</st>` <st c=\"44506\">mutator.</st>\n\t\t\t![Figure 12.9 – Syntax for running a GraphQL mutator](img/B19383_12_009.jpg)\n\n\t\t\t<st c=\"44782\">Figure 12.9 – Syntax for running a GraphQL mutator</st>\n\t\t\t<st c=\"44832\">And</st> *<st c=\"44837\">Figure 12</st>**<st c=\"44846\">.10</st>* <st c=\"44849\">shows how</st> <st c=\"44860\">to run the</st> `<st c=\"44871\">listAllComplainants</st>` <st c=\"44890\">query operation.</st>\n\t\t\t![Figure 12.10 – Syntax for running a GraphQL query operator](img/B19383_12_010.jpg)\n\n\t\t\t<st c=\"45310\">Figure 12.10 – Syntax for running a GraphQL query operator</st>\n\t\t\t<st c=\"45368\">There are other libraries Flask can integrate to implement the GraphQL architecture, but they need to be up to date to support</st> <st c=\"45496\">Flask 3.x.</st>\n\t\t\t<st c=\"45506\">Summary</st>\n\t\t\t<st c=\"45514\">Flexibility, adaptability, extensibility, and maintainability are the best adjectives that fully describe Flask as a</st> <st c=\"45632\">Python framework.</st>\n\t\t\t<st c=\"45649\">Previous chapters have proven Flask to be a simple, minimalist, and Pythonic framework that can build API and web applications with fewer configurations and setups.</st> <st c=\"45815\">Its vast support helps us build applications that manage workflows and perform scientific calculations and visualization using plots, graphs, and charts.</st> <st c=\"45969\">Although a WSGI application at the core, it can implement asynchronous API and view functions with</st> `<st c=\"46068\">async</st>` <st c=\"46073\">services and</st> <st c=\"46087\">repository transactions.</st>\n\t\t\t<st c=\"46111\">Flask has</st> *<st c=\"46122\">Flask-SQLAlchemy</st>*<st c=\"46138\">,</st> *<st c=\"46140\">Flask-WTF</st>*<st c=\"46149\">,</st> *<st c=\"46151\">Flask-Session</st>*<st c=\"46164\">,</st> *<st c=\"46166\">Flask-CORS</st>*<st c=\"46176\">, and</st> *<st c=\"46182\">Flask-Login</st>* <st c=\"46193\">that can lessen the cost and time of development.</st> <st c=\"46244\">Other than that, stable and up-to-date extensions are available to help a Flask application secure its internals, run on an HTTPS platform, and protect its form handling from</st> **<st c=\"46419\">Cross-Site Request Forgery</st>** <st c=\"46445\">(</st>**<st c=\"46447\">CSRF</st>**<st c=\"46451\">) problems.</st> <st c=\"46464\">On the other hand, Flask can use SQLAlchemy, Pony, or Peewee to manage data persistency and protect applications from SQL injection.</st> <st c=\"46597\">Also, the framework can  can manage NoSQL data using MongoDB, Neo4j, Redis, and</st> <st c=\"46676\">CouchBase databases.</st>\n\t\t\t<st c=\"46696\">Flask can also build WebSocket and SSE using standard and</st> `<st c=\"46755\">asyncio</st>` <st c=\"46762\">platforms.</st>\n\t\t\t<st c=\"46773\">This last chapter has added, to Flask’s long list of capabilities and strengths, the ability to connect to various Python frameworks and to provide interfaces and services to applications outside the</st> <st c=\"46974\">Python environment.</st>\n\t\t\t<st c=\"46993\">Aside from managing project modules using Blueprints, Flask can use Werkzeug’s</st> **<st c=\"47072\">DispatcherMiddleware</st>** <st c=\"47093\">to dispatch requests to other mounted WSGI applications such as Django and Flask sub-applications and compatible ASGI applications, such as FastAPI.</st> <st c=\"47243\">This mechanism shows Flask’s interoperability feature, which can lead to building microservices.</st> <st c=\"47340\">On the other hand, Flask can help provide services to Flutter apps, React web UIs, and GraphQL Explorer to run platform-agnostic</st> <st c=\"47469\">query transactions.</st>\n\t\t\t<st c=\"47488\">Hopefully, this book showcased Flask’s strengths as a web and API framework cover to cover and also helped discover some of its downsides along the way.</st> <st c=\"47642\">Flask 3.x is a lightweight Python framework that can offer many things in building enterprise-grade small-, middle-, and hopefully</st> <st c=\"47773\">large-scale applications.</st>\n\t\t\t<st c=\"47798\">This book has led us on a long journey of learning, understanding, and hands-on experience about Flask 3’s core and new asynchronous features.</st> <st c=\"47942\">I hope this reference book has provided the ideas and solutions that may help create the necessary features, deliverables, or systems for your business requirements, software designs, or daily goals and targets.</st> <st c=\"48154\">Thank you very much for choosing this book as your companion for knowledge.</st> <st c=\"48230\">And do not forget to share your Flask experiences with others because mastering something starts with sharing what</st> <st c=\"48345\">you learned.</st>\n\n```"]