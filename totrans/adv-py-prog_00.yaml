- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Advanced Python Programming* serves as a guide for you to take your Python
    skills to the next level. To beginners, Python is a great option for fast prototyping
    and software development due to its simple syntax, but some tend to lean toward
    other languages when they want to speed up and scale their code. However, this
    mindset is not necessarily correct. As this book will show us, Python comes with
    a wide range of support for optimizing, scaling, and overall high-performance
    computing.'
  prefs: []
  type: TYPE_NORMAL
- en: This second edition includes both updated and new content from the first. Many
    chapters with overlapping materials have been combined to make a succinct, logical
    flow throughout the text. Further, a new chapter on JAX, the state-of-the-art
    high-performance computing tool in machine learning, has been added. These adjustments
    promise to make the book a high-quality text for all Python users who are looking
    to get the most out of their programs.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will have been exposed to a variety of techniques
    and libraries that are designed to streamline, protect, and optimize your software.
    You will gain practical skills on how to make your Python applications robust,
    efficient, and scalable.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is for intermediate to experienced Python programmers who are looking
    to scale up their applications in a systematic and robust manner. Programmers
    from a range of backgrounds will find this book useful, including software engineers,
    scientific programmers, and software architects.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B17499_01_Final_SS_ePub.xhtml#_idTextAnchor015), *Benchmarking
    and Profiling*, teaches you how to assess the performance of Python programs and
    practical strategies on how to identify and isolate slow sections of your code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B17499_02_Final_SS_ePub.xhtml#_idTextAnchor032), *Pure Python
    Optimizations*, discusses how to improve your running times by orders of magnitude
    using the efficient data structures and algorithms available in the Python standard
    library and pure-Python third-party modules.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B17499_03_Final_SS_ePub.xhtml#_idTextAnchor047), Fast Array Operations
    with NumPy, Pandas, and Xarray, offers a guide to the NumPy and pandas packages.
    Mastery of these packages will allow you to implement fast numerical algorithms
    with an expressive, concise interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B17499_04_Final_SS_ePub.xhtml#_idTextAnchor068), *C Performance
    with Cython*, is a tutorial on Cython, a language that uses a Python-compatible
    syntax to generate efficient C code.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B17499_05_Final_SS_ePub.xhtml#_idTextAnchor085), *Exploring Compilers*,
    covers tools that can be used to compile Python to efficient machine code. The
    chapter will teach you how to use Numba, an optimizing compiler for Python functions,
    and PyPy, an alternative interpreter that can execute and optimize Python programs
    on the fly.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B17499_06_Final_SS_ePub.xhtml#_idTextAnchor101), *Automatic Differentiation
    and Accelerated Linear Algebra for Machine Learning*, covers high-performance
    Python programming, which is essential in scientific computing and machine learning.
    JAX implements many compiler-related optimizations under the hood, which speeds
    up NumPy operations by a significant amount. Further, the tool can automatically
    differentiate native Python functions, allowing for the wide application of gradient-based
    optimization routines.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 7*](B17499_07_Final_SS_ePub.xhtml#_idTextAnchor122), *Implementing
    Concurrency*, offers a guide to asynchronous and reactive programming. We will
    learn about key terms and concepts, and demonstrate how to write clean, concurrent
    code using the asyncio and RxPy frameworks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 8*](B17499_08_Final_SS_ePub.xhtml#_idTextAnchor141), *Parallel Processing*,
    provides an introduction to parallel programming on multi-core processors and
    GPUs. In this chapter, you will learn how to achieve parallelism using the multiprocessing
    module and by expressing your code using Theano and TensorFlow.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 9*](B17499_09_Final_SS_ePub.xhtml#_idTextAnchor158), *Concurrent
    Web Requests*, covers one of the main applications of concurrent programming:
    web scraping. It also covers other relevant elements of web scraping, before discussing
    how threading can be applied to parallelize this process.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 10*](B17499_10_Final_SS_ePub.xhtml#_idTextAnchor180), *Concurrent
    Image Processing*, goes into a specific application of concurrency: image processing.
    The basic ideas behind image processing, in addition to some of the most common
    processing techniques, are discussed. We will, of course, see how concurrency,
    specifically multiprocessing, can speed up the task of image processing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 11*](B17499_11_Final_SS_ePub.xhtml#_idTextAnchor195), *Building Communication
    Channels with asyncio*, combines the knowledge obtained regarding asynchronous
    programming covered in previous chapters with the topic of network communication.
    Specifically, we will look into using the aiohttp module as a tool to make asynchronous
    HTTP requests to web servers, as well as the aiofile module that implements asynchronous
    file reading/writing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 12*](B17499_12_Final_SS_ePub.xhtml#_idTextAnchor215), *Deadlocks*,
    introduces the first of the problems that are commonly faced in concurrent programming.
    We will learn about the classical dining philosophers problem as an example of
    how deadlocks can cause concurrent programs to stop functioning. This chapter
    also covers a number of potential approaches to deadlocks as well as relevant
    concepts, such as livelocks and distributed deadlocks.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 13*](B17499_13_Final_SS_ePub.xhtml#_idTextAnchor228), *Starvation*,
    considers another common problem in concurrent applications. The chapter uses
    the narrative of the classical readers-writers problem to explain the concept
    of starvation and its causes. We will, of course, also discuss potential solutions
    to these problems via hands-on examples in Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 14*](B17499_14_Final_SS_ePub.xhtml#_idTextAnchor244), *Race Conditions*,
    addresses arguably the most well-known concurrency problem: race conditions. We
    will also discuss the concept of a critical section, which is an essential element
    in the context of race conditions specifically, and concurrent programming in
    general. The chapter then covers mutual exclusion as a potential solution for
    this problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 15*](B17499_15_Final_SS_ePub.xhtml#_idTextAnchor261), *The Global
    Interpreter Lock*, introduces the infamous GIL, which is considered the biggest
    challenge in concurrent programming in Python. We will learn about the reason
    behind the GIL''s implementation and the problems that it raises. This chapter
    concludes with some thoughts regarding how Python programmers and developers should
    think about and interact with the GIL.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 16*](B17499_16_Final_SS_ePub.xhtml#_idTextAnchor276), *The Factory
    Pattern*, teaches you how to use the Factory design pattern (Factory Method and
    Abstract Factory) to initialize objects, and also covers the benefits of using
    the Factory design pattern instead of direct object instantiation.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 17*](B17499_17_Final_SS_ePub.xhtml#_idTextAnchor289), *The Builder
    Pattern*, teaches you how to simplify the object creation process for cases typically
    composed of several related objects. We will review real-world examples and use
    cases, and then implement the builder pattern in developing a pizza-ordering application.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 18*](B17499_18_Final_SS_ePub.xhtml#_idTextAnchor297), *Other Creational
    Patterns*, teaches you how to handle other object creation situations with techniques
    such as creating a new object that is a full copy (a named clone) of an existing
    object, a technique offered by the Prototype pattern. You will also learn about
    the Singleton pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 19*](B17499_19_Final_SS_ePub.xhtml#_idTextAnchor310), *The Adapter
    Pattern*, teaches you how to make your existing code compatible with a foreign
    interface (for example, an external library) with minimal changes. Specifically,
    you will see how you can achieve interface conformance using the Adapter pattern
    without modifying the source code of the incompatible model.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 20*](B17499_20_Final_SS_ePub.xhtml#_idTextAnchor317), *The Decorator
    Pattern*, teaches you how to enhance the functionality of an object without using
    inheritance. We will mention several categories of cross-cutting concerns and
    specifically demonstrate memoization in this view. We will also describe how decorators
    can help us to keep our functions clean, without sacrificing performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 21*](B17499_21_Final_SS_ePub.xhtml#_idTextAnchor325), *The Bridge
    Pattern*, teaches you how to externalize an object''s implementation details from
    its class hierarchy to another object class hierarchy. This chapter encourages
    the idea of preferring composition over inheritance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 22*](B17499_22_Final_SS_ePub.xhtml#_idTextAnchor332), *The Façade
    Pattern*, teaches you how to create a single entry point to hide the complexity
    of a system. We will cover the basic use cases of facade and the implementation
    of the interface used by a multiserver operating system.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 23*](B17499_23_Final_SS_ePub.xhtml#_idTextAnchor341), *Other Structural
    Patterns*, teaches you about the Flyweight, **Model-View-Controller** (**MVC**),
    and Proxy patterns. With the Flyweight pattern, you will learn how to reuse objects
    from an object pool to improve the memory usage and possibly the performance of
    your applications. The MVC pattern is used in application development (desktop
    and the web) to improve maintainability by avoiding mixing the business logic
    with the user interface. And with the Proxy pattern, you provide a special object
    that acts as a surrogate or placeholder for another object to control access to
    it and reduce complexity and/or improve performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 24*](B17499_24_Final_SS_ePub.xhtml#_idTextAnchor357), *The Chain
    of Responsibility Pattern*, teaches you another technique to improve the maintainability
    of your applications by avoiding mixing the business logic with the user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 25*](B17499_25_Final_SS_ePub.xhtml#_idTextAnchor365), *The Command
    Pattern*, teaches you how to encapsulate operations (such as undo, copy, and paste)
    as objects, to improve your application. Among the advantages of this technique,
    the object that invokes the command is decoupled from the object that performs
    it.'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 26*](B17499_26_Final_SS_ePub.xhtml#_idTextAnchor373), *The Observer
    Pattern*, teaches you how to send a request to multiple receivers.'
  prefs: []
  type: TYPE_NORMAL
- en: To get the most out of this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code used in this book has been tested on Python version 3.8 on macOS Big
    Sur, Windows, Ubuntu, and Monterey.
  prefs: []
  type: TYPE_NORMAL
- en: You should first have Python installed, preferably in a virtual environment.
    The recommended way to do this is via Anaconda, which can be downloaded from[https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual).
    Individualchapters may discuss various external libraries and tools that have
    to be installed via a package manager, and specific instructions on how to do
    so are included in the corresponding text.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the digital version of this book, we advise you to type the
    code yourself or access the code from the book's GitHub repository (a link is
    available in the next section). Doing so will help you avoid any potential errors
    related to the copying and pasting of code.
  prefs: []
  type: TYPE_NORMAL
- en: Download the example code files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can download the example code files for this book from GitHub at [https://github.com/PacktPublishing/Advanced-Python-Programming-Second-Edition](https://github.com/PacktPublishing/Advanced-Python-Programming-Second-Edition).
    If there's an update to the code, it will be updated in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: We also have other code bundles from our rich catalog of books and videos available
    at [https://github.com/PacktPublishing/](https://github.com/PacktPublishing/).
    Check them out!
  prefs: []
  type: TYPE_NORMAL
- en: Download the color images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We also provide a PDF file that has color images of the screenshots and diagrams
    used in this book. You can download it here: [https://static.packt-cdn.com/downloads/9781801814010_ColorImages.pdf](https://static.packt-cdn.com/downloads/9781801814010_ColorImages.pdf).'
  prefs: []
  type: TYPE_NORMAL
- en: Conventions used
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are a number of text conventions used throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: '`Code in text`: Indicates code words in text, database table names, folder
    names, filenames, file extensions, pathnames, dummy URLs, user input, and Twitter
    handles. Here is an example: "In our main program, we create the fork as a lock
    object first; then, we create two `Spouse` thread objects, which are each other''s
    `partner` attributes."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**Bold**: Indicates a new term, an important word, or words that you see onscreen.
    For instance, words in menus or dialog boxes appear in **bold**. Here is an example:
    "The **Coordinates** section shows the values that each of these dimensions can
    take on."'
  prefs: []
  type: TYPE_NORMAL
- en: Tips or important notes
  prefs: []
  type: TYPE_NORMAL
- en: Appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Get in touch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome.
  prefs: []
  type: TYPE_NORMAL
- en: '**General feedback**: If you have questions about any aspect of this book,
    email us at [customercare@packtpub.com](mailto:customercare@packtpub.com) and
    mention the book title in the subject of your message.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Errata**: Although we have taken every care to ensure the accuracy of our
    content, mistakes do happen. If you have found a mistake in this book, we would
    be grateful if you would report this to us. Please visit [www.packtpub.com/support/errata](http://www.packtpub.com/support/errata)
    and fill in the form.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Piracy**: If you come across any illegal copies of our works in any form
    on the internet, we would be grateful if you would provide us with the location
    address or website name. Please contact us at [copyright@packt.com](mailto:copyright@packt.com)
    with a link to the material.'
  prefs: []
  type: TYPE_NORMAL
- en: '**If you are interested in becoming an author**: If there is a topic that you
    have expertise in and you are interested in either writing or contributing to
    a book, please visit [authors.packtpub.com](http://authors.packtpub.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Share Your Thoughts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you've read *Advanced Python Programming*, we'd love to hear your thoughts!
    Please [click here to go straight to the Amazon review page](https://packt.link/r/1801814015)
    for this book and share your feedback.
  prefs: []
  type: TYPE_NORMAL
- en: Your review is important to us and the tech community and will help us make
    sure we're delivering excellent quality content.
  prefs: []
  type: TYPE_NORMAL
