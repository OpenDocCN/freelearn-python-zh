["```py\nimport six\nimport unittest\nimport sys\nimport abc\nif sys.version_info[0:2] >= (3, 3):\n    from unittest.mock import Mock, create_autospec\nelse:\n    from mock import Mock, create_autospec\nif six.PY2:\n    import thread\nelse:\n    import _thread as thread\n\nclass IWorker(six.with_metaclass(abc.ABCMeta, object)):\n\n    @abc.abstractmethod\n    def execute(self, *args):\n        \"\"\" execute an api task \"\"\"\n        pass\n\n    @abc.abstractmethod\n    def is_busy(self):\n        pass\n\n    @abc.abstractmethod\n    def serve_api(self,):\n        \"\"\"register for api hit\"\"\"\n        pass\n\nclass Worker(IWorker):\n    def __init__(self,):\n        self.__running = False\n\n    def execute(self,*args):\n        self.__running = True\n        th = thread.start_new_thread(lambda x:time.sleep(5))\n        th.join()\n        self.__running = False\n\n    def is_busy(self):\n        return self.__running == True\n\ndef assign_if_free(worker, task):\n    if not worker.is_busy():\n        worker.execute(task)\n        return True\n    else:\n        return False\n\nclass TestWorkerReporting(unittest.TestCase):\n\n    def test_worker_busy(self,):\n        mworker = create_autospec(IWorker)\n        mworker.configure_mock(**{'is_busy.return_value':True})\n        self.assertFalse(assign_if_free(mworker, {}))\n\n    def test_worker_free(self,):\n        mworker = create_autospec(IWorker)\n        mworker.configure_mock(**{'is_busy.return_value':False})\n        self.assertTrue(assign_if_free(mworker, {}))\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n>>> STATE = False\n>>> worker = create_autospec(Worker,)\n>>> worker.configure_mock(**{'is_busy.side_effect':lambda : True if not STATE else False})\n>>> worker.is_busy()\nTrue\n>>> STATE=True\n>>> worker.is_busy()\nFalse\n```", "```py\n>>> worker.configure_mock(**{'execute.side_effect':Exception('timeout for execution')})\n>>> \n>>> worker.execute()\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib/python3.4/unittest/mock.py\", line 896, in __call__\n    return _mock_self._mock_call(*args, **kwargs)\n  File \"/usr/lib/python3.4/unittest/mock.py\", line 952, in _mock_call\n    raise effect\nException: timeout for execution\n```", "```py\n>>> worker = create_autospec(IWorker,)\n>>> worker.configure_mock(**{'is_busy.return_value':True})\n>>> assign_if_free(worker,{})\nFalse\n>>> worker.execute.called\nFalse\n>>> worker.configure_mock(**{'is_busy.return_value':False})\n>>> assign_if_free(worker,{})\nTrue\n>>> worker.execute.called\nTrue\n```", "```py\nimport unittest\nfrom itertools import combinations\nfrom functools import wraps\n\ndef convert(alpha):\n    return ','.join([str(ord(i)-96) for i in alpha])\n\nclass TestOne(unittest.TestCase):\n\n    def test_system(self,):\n        cases = [(\"aa\",\"1,1\"),(\"bc\",\"2,3\"),(\"jk\",\"4,5\"),(\"xy\",\"24,26\")]\n        for case in cases:\n            with self.subTest(case=case):\n                self.assertEqual(convert(case[0]),case[1])\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```", "```py\n(py3)arun@olappy:~/codes/projects/pybook/book/ch6$ python parametrized.py\ntest_system (__main__.TestOne) ... \n======================================================================\nFAIL: test_system (__main__.TestOne) (case=('jk', '4,5'))\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"parametrized.py\", line 14, in test_system\n    self.assertEqual(convert(case[0]),case[1])\nAssertionError: '10,11' != '4,5'\n- 10,11\n+ 4,5\n\n======================================================================\nFAIL: test_system (__main__.TestOne) (case=('xy', '24,26'))\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"parametrized.py\", line 14, in test_system\n    self.assertEqual(convert(case[0]),case[1])\nAssertionError: '24,25' != '24,26'\n- 24,25\n?     ^\n+ 24,26\n?     ^\n\n----------------------------------------------------------------------\nRan 1 test in 0.001s\n\nFAILED (failures=2)\n```", "```py\nimport unittest\nfrom itertools import combinations\nfrom functools import wraps\n\ndef entry(number,alpha):\n    if 0 < number < 4 and 'a' <= alpha <= 'c':\n        return True\n    else:\n        return False\n\ndef curry(*args):\n    if not args:\n        return []\n    else:\n        cases = [ [i,] for i in args[0]]\n        if len(args)>1:\n            for i in range(1,len(args)):\n                ncases = []\n                for j in args[i]:\n                    for case in cases:\n                        ncases.append(case+[j,])\n                cases = ncases\n        return cases\n\nclass TestOne(unittest.TestCase):\n\n    def test_sample2(self,):\n         case1 = [1,2]\n         case2 = ['a','b','d']\n         for case in curry(case1,case2):\n             with self.subTest(case=case):\n                 self.assertTrue(entry(*case), \"not equal\")\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```", "```py\n(py3)arun@olappy:~/codes/projects/pybook/book/ch6$ python parametrized_curry.py \ntest_sample2 (__main__.TestOne) ... \n======================================================================\nFAIL: test_sample2 (__main__.TestOne) (case=[1, 'd'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"parametrized_curry.py\", line 33, in test_sample2\n    self.assertTrue(entry(*case), \"not equal\")\nAssertionError: False is not true : not equal\n\n======================================================================\nFAIL: test_sample2 (__main__.TestOne) (case=[2, 'd'])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"parametrized_curry.py\", line 33, in test_sample2\n    self.assertTrue(entry(*case), \"not equal\")\nAssertionError: False is not true : not equal\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nFAILED (failures=2)\n```", "```py\nfrom functools import wraps\nimport six\nimport unittest\nfrom datetime import datetime, timedelta\n\nclass parameterize(object):\n    \"\"\"decorator to pass parameters to function \n    we need this to attach parameterize \n    arguments on to the function, and it attaches\n    __parameterize_this__ attribute which tells \n    metaclass that we have to work on this attribute\n    \"\"\"\n    def __init__(self,names,cases):\n        \"\"\" save parameters \"\"\"\n        self.names = names\n        self.cases = cases\n\n    def __call__(self,func):\n        \"\"\" attach parameters to same func \"\"\"\n        func.__parameterize_this__ = (self.names, self.cases)\n        return func\n\nclass ParameterizeMeta(type):\n\n    def __new__(metaname, classname, baseclasses, attrs):\n        # iterate over attribute and find out which one have __parameterize_this__ set\n        for attrname, attrobject in six.iteritems(attrs.copy()):\n            if attrname.startswith('test_'):\n                pmo = getattr(attrobject,'__parameterize_this__',None)\n                if pmo:\n                    params,values = pmo\n                    for case in values:\n                        name = attrname + '_'+'_'.join([str(item) for item in case])\n                        def func(selfobj, testcase=attrobject,casepass=dict(zip(params,case))):\n                            return testcase(selfobj, **casepass)\n                        attrs[name] = func\n                        func.__name__ = name\n                    del attrs[attrname]\n        return type.__new__(metaname, classname, baseclasses, attrs)\n\nclass MyProjectTestCase(six.with_metaclass(ParameterizeMeta,unittest.TestCase)):\n    pass\n\nclass TestCase(MyProjectTestCase):\n\n    @parameterize(names=(\"input\",\"output\"),\n                 cases=[(1,2),(2,4),(3,6)])\n    def test_sample(self,input,output):\n        self.assertEqual(input*2,output)\n\n    @parameterize(names=(\"in1\",\"in2\",\"output\",\"shouldpass\"),\n                  cases=[(1,2,3,True),\n                         (2,3,6,False)]\n                 )\n    def test_sample2(self,in1,in2,output,shouldpass):\n        res = in1 + in2 == output\n        self.assertEqual(res,shouldpass)\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```", "```py\ntest_sample2_1_2_3_True (__main__.TestCase) ... ok\ntest_sample2_2_3_6_False (__main__.TestCase) ... ok\ntest_sample_1_2 (__main__.TestCase) ... ok\ntest_sample_2_4 (__main__.TestCase) ... ok\ntest_sample_3_6 (__main__.TestCase) ... ok\n\n----------------------------------------------------------------------\nRan 5 tests in 0.000s\n\nOK\n```", "```py\n\"\"\" custom test system classes \"\"\"\n\nimport unittest\nimport sys\nimport time\nfrom xml.etree import ElementTree as ET\nfrom unittest import TextTestRunner\n\nclass XMLTestResult(unittest.TestResult):\n    \"\"\"converts test results to xml format\"\"\"\n\n    def __init__(self, *args,**kwargs):#runner):\n        unittest.TestResult.__init__(self,*args,**kwargs )\n        self.xmldoc = ET.fromstring('<testsuite />')\n\n    def startTest(self, test):\n        \"\"\"called before each test case run\"\"\"\n        test.starttime = time.time()\n        test.testxml = ET.SubElement(self.xmldoc,\n                                     'testcase',\n                                     attrib={'name': test._testMethodName,\n                                             'classname': test.__class__.__name__,\n                                             'module': test.__module__})\n\n    def stopTest(self, test):\n        \"\"\"called after each test case\"\"\"\n        et = time.time()\n        time_elapsed = et - test.starttime\n        test.testxml.attrib['time'] = str(time_elapsed)\n\n    def addSuccess(self, test):\n        \"\"\"\n        called on successful test case run\n        \"\"\"\n        test.testxml.attrib['result'] = 'ok'\n\n    def addError(self, test, err):\n        \"\"\"\n        called on errors in test case\n        :param test: test case\n        :param err: error info\n        \"\"\"\n        unittest.TestResult.addError(self, test, err)\n        test.testxml.attrib['result'] = 'error'\n        el = ET.SubElement(test.testxml, 'error', )\n        el.text = self._exc_info_to_string(err, test)\n\n    def addFailure(self, test, err):\n        \"\"\"\n        called on failures in test cases.\n        :param test: test case\n        :param err: error info\n        \"\"\"\n        unittest.TestResult.addFailure(self, test, err)\n        test.testxml.attrib['result'] = 'failure'\n        el = ET.SubElement(test.testxml, 'failure', )\n        el.text = self._exc_info_to_string(err, test)\n\n    def addSkip(self, test, reason):\n        # self.skipped.append(test)\n        test.testxml.attrib['result'] = 'skipped'\n        el = ET.SubElement(test.testxml, 'skipped', )\n        el.attrib['message'] = reason\n\nclass XMLRunner(object):\n    \"\"\" custom runner class\"\"\"\n\n    def __init__(self, *args,**kwargs):\n        self.resultclass = XMLTestResult\n\n    def run(self, test):\n        \"\"\" run given test case or suite\"\"\"\n        result = self.resultclass()\n        st = time.time()\n        test(result)\n        time_taken = float(time.time() - st)\n        result.xmldoc.attrib['time'] = str(time_taken)\n\n        ET.dump(result.xmldoc)\n        #tree = ET.ElementTree(result.xmldoc)\n        #tree.write(\"testm.xml\", encoding='utf-8')\n        return result\n```", "```py\nimport unittest\n\nclass TestAll(unittest.TestCase):\n    def test_ok(self):\n        assert 1 == 1\n\n    def test_notok(self):\n        assert 1 >= 3\n\n    @unittest.skip(\"not needed\")\n    def test_skipped(self):\n        assert 2 == 4\n\nclass TestAll2(unittest.TestCase):\n    def test_ok2(self):\n        raise IndexError\n        assert 1 == 1\n\n    def test_notok2(self):\n        assert 1 == 3\n\n    @unittest.skip(\"not needed\")\n    def test_skipped2(self):\n        assert 2 == 4\n\nif __name__ == '__main__':\n    from ts2 import XMLRunner\nunittest.main(verbosity=2, testRunner=XMLRunner)\n```", "```py\n<testsuite time=\"0.0005891323089599609\"><testcase classname=\"TestAll\" module=\"__main__\" name=\"test_notok\" result=\"failure\" time=\"0.0002377033233642578\"><failure>Traceback (most recent call last):\n  File \"test_cases.py\", line 8, in test_notok\n    assert 1 &gt;= 3\nAssertionError\n</failure></testcase><testcase classname=\"TestAll\" module=\"__main__\" name=\"test_ok\" result=\"ok\" time=\"2.6464462280273438e-05\" /><testcase classname=\"TestAll\" module=\"__main__\" name=\"test_skipped\" result=\"skipped\" time=\"9.059906005859375e-06\"><skipped message=\"not needed\" /></testcase><testcase classname=\"TestAll2\" module=\"__main__\" name=\"test_notok2\" result=\"failure\" time=\"9.34600830078125e-05\"><failure>Traceback (most recent call last):\n  File \"test_cases.py\", line 20, in test_notok2\n    assert 1 == 3\nAssertionError\n</failure></testcase><testcase classname=\"TestAll2\" module=\"__main__\" name=\"test_ok2\" result=\"error\" time=\"8.440017700195312e-05\"><error>Traceback (most recent call last):\n  File \"test_cases.py\", line 16, in test_ok2\n    raise IndexError\nIndexError\n</error></testcase><testcase classname=\"TestAll2\" module=\"__main__\" name=\"test_skipped2\" result=\"skipped\" time=\"7.867813110351562e-06\"><skipped message=\"not needed\" /></testcase></testsuite>\n```", "```py\n>>> def foo(waittime):\n...     time.sleep(waittime)\n...     print(\"done\")\n>>> thread.start_new_thread(foo,(3,))\n140360468600576\n>> done\n```", "```py\n(py35) [ ch6 ] $ py.test -n 3 test_system.py\n========================================== test session starts ===========================================\nplatform linux -- Python 3.5.0, pytest-2.8.2, py-1.4.30, pluggy-0.3.1\nrootdir: /home/arun/codes/workspace/pybook/ch6, inifile: \nplugins: xdist-1.13.1\ngw0 [5] / gw1 [5] / gw2 [5]\nscheduling tests via LoadScheduling\ns...F\n================================================ FAILURES ================================================\n___________________________________________ TestApi.test_api2 ____________________________________________\n[gw0] linux -- Python 3.5.0 /home/arun/.pyenv/versions/py35/bin/python3.5\nself = <test_system.TestApi testMethod=test_api2>\n\n    def test_api2(self,):\n        \"\"\"api2\n            simple test1\"\"\"\n        for i in range(7):\n            with self.subTest(i=i):\n>               self.assertLess(i, 4, \"not less\")\nE               AssertionError: 4 not less than 4 : not less\n\ntest_system.py:40: AssertionError\n============================= 1 failed, 3 passed, 1 skipped in 0.42 seconds ==============================\n```"]