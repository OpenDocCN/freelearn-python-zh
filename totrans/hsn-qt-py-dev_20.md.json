["```py\n...\nclass UWindow(UWin):\n\n    def __init__(self, parent=None):\n        ...\n        self.mb2 = UMenu(self.menubar)\n        self.mb2.addAction(\"Undo\")\n        self.mb2.addAction(\"Redo\")\n        self.mb2.addAction(\"Cut\")\n        self.mb2.addAction(\"Copy\")\n        self.mb2.addAction(\"Paste\")\n        self.mb2_1 = self.mb2.addMenu(\"&Alignment\")\n        self.mb2_1.addAction(\"center\")\n        self.mb2_1.addAction(\"left\")\n        self.mb2_1.addAction(\"right\")\n        self.mb2_1.addAction(\"justify\")\n        self.mb2.addAction(\"Text Color\")\n        self.mb2.addAction(\"Text Font\")\n        self.mb2.setTitle(\"&Edit\")\n    ...\n...\n```", "```py\n...\nclass UApp(UWindow, UTools):\n\n    def __init__(self, parent=None):\n        ...\n        self.mb1.triggered.connect(self.files)\n        self.mb2.triggered.connect(self.edit)\n        self.mb2_1.triggered.connect(self.edit_align)\n        self.mb3.triggered.connect(self.data)\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def edit(self, action):\n        if action.text() == \"Undo\":\n            self.text_edit.undo()\n        if action.text() == \"Redo\":\n            self.text_edit.redo()\n        if action.text() == \"Cut\":\n            self.text_edit.cut()\n        if action.text() == \"Copy\":\n            self.text_edit.copy()\n        if action.text() == \"Paste\":\n            self.text_edit.paste()\n        if action.text() == \"Text Color\":\n            fd = QtWidgets.QColorDialog(self)\n            if fd.exec_() == QtWidgets.QDialog.Accepted:\n                fc = fd.selectedColor()\n                self.text_edit.setTextColor(fc)\n        if action.text() == \"Text Font\":\n            fd = QtWidgets.QFontDialog()\n            if fd.exec_() == QtWidgets.QDialog.Accepted:\n                f = fd.selectedFont()\n                self.text_edit.setFont(f)\n    ...\n...\n```", "```py\n...\n    ...\n    def edit_align(self, action):\n        if action.text() == \"center\":\n            self.text_edit.setAlignment(\n                              QtCore.Qt.AlignCenter)\n        if action.text() == \"left\":\n            self.text_edit.setAlignment(\n                                QtCore.Qt.AlignLeft)\n        if action.text() == \"right\":\n            self.text_edit.setAlignment(\n                               QtCore.Qt.AlignRight)\n        if action.text() == \"justify\":\n            self.text_edit.setAlignment(\n                             QtCore.Qt.AlignJustify)\n    ...\n...\n```", "```py\n...\nfrom PyQt5.QtCore import QThread, QObject, QMutex\n...\n```", "```py\n...\nfrom PySide2.QtCore import QThread, QObject, QMutex\n...\n```", "```py\n...\nclass RunThread(QObject):\n\n    sig1 = app_signal(object, object, str)\n\n    def __init__(self, parent=None, datas=None):\n        super(RunThread, self).__init__(parent)\n        self.datas = datas\n\n    def on_run_code(self):\n        try:\n            import subprocess\n            wf = open(\"temp.py\", \"w\")\n            wf.write(self.datas)\n            wf.close()\n            sp = subprocess.Popen(\n                        [\"python\", \"temp.py\"],\n                         stdout=subprocess.PIPE,\n                         stderr=subprocess.PIPE)\n            out = sp.communicate()\n            self.sig1.emit(out[0].decode(\"utf-8\"),\n                           out[1].decode(\"utf-8\"), '')\n        except Exception as err:\n            self.sig1.emit('', '', str(err))\n...\n```", "```py\n...\n    ...\n    def run_code(self, datas=None):\n        self.run_thread = QThread()\n        self.run_obj = RunThread(datas=datas)\n        self.run_obj.moveToThread(self.run_thread)\n        self.run_thread.started.connect(self.run_obj.on_run_code)\n        self.run_thread.start()\n        return (self.run_thread, self.run_obj)\n    ...\n...\n```", "```py\n...\nimport time\n...\n```", "```py\n...\n    ...\n    def options(self, action):\n        ...\n        if action.text() == \"Run\":\n            action.setEnabled(False)\n            datas = self.text_edit.toPlainText()\n            try:\n                self.text_edit.append(\n                        \"\\n\\n\\n\\n\\nRESULT -----------> %s\\n\" %\n                            time.strftime(\"%Y.%m.%d %H:%M:%S\"))\n                runs = self.run_code(datas=datas)\n                def to_field(sto, ste, er):\n                    if er == '':\n                        self.text_edit.append(\n                                  str(sto) + \"\\n\" + str(ste))\n                    else:\n                        self.stat_bar.showMessage(er)\n                runs[1].sig1.connect(\n                        to_field, QtCore.Qt.QueuedConnection)\n                runs[0].quit()\n                def on_stop():\n                    action.setEnabled(True)\n                runs[0].finished.connect(on_stop)\n            except Exception as err:\n                self.stat_bar.showMessage(str(err))\n    ...\n...\n```", "```py\n...\nfrom PyQt5 import QtWidgets\nfrom u_style import UWid, UTextEd, UComBox, UListV\n...\n```", "```py\n...\nfrom PySide2 import QtWidgets\nfrom u_style import UWid, UTextEd, UComBox, UListV\n...\n```", "```py\n...\nclass UWidget(UWid):\n\n    def __init__(self, parent=None):\n        super(UWidget, self).__init__(parent)\n        self.setWindowOpacity(0.95)\n        self.infotxt = UTextEd(self)\n        self.infocomb = UComBox(self)\n        self.infocomb.setView(UListV())\n        self.infolay = QtWidgets.QGridLayout()\n        self.infolay.addWidget(self.infotxt, 0, 0, 1, 1)\n        self.infolay.addWidget(self.infocomb, 1, 0, 1, 1)\n        self.infolay.setSpacing(0)\n        self.infolay.setContentsMargins(0, 0, 0, 0)\n        self.setLayout(self.infolay)\n...\n```", "```py\n...\nfrom u_widget import UWidget\n...\n```", "```py\n...\n    ...\n    def options(self, action):\n        ...\n        if action.text() == \"Configuration\":\n            def get_info():\n                if self.uwid1.infocomb.currentIndex() == 0:\n                    try:\n                        condinf = subprocess.Popen(\n                                         [\"conda\", \"list\"],\n                                     stdout=subprocess.PIPE)\n                        conp = condinf.communicate()\n                        self.uwid1.infotxt.setText(\n                                   conp[0].decode(\"utf-8\"))\n                    except Exception as err:\n                        self.uwid1.infotxt.setText(str(err))\n                if self.uwid1.infocomb.currentIndex() == 1:\n                    try:\n                        condinf = subprocess.Popen(\n                                            [\"pip\", \"list\"],\n                                     stdout=subprocess.PIPE)\n                        conp = condinf.communicate()\n                        self.uwid1.infotxt.setText(\n                                \"\"\"Platform: %s\\nPython %s version\n                                \\nPython path list: %s\n                                \\n\\nRecursion limit: %s\n                                \\nFilesystem encoding: %s\n                                \\nDefault encoding: %s\n                                \\nAvailable installed packages:\n                                 \\n\\n%s\"\"\" %\n                                (sys.platform, sys.version,\n                                 sys.path,\n                                 sys.getrecursionlimit(),\n                                 sys.getfilesystemencoding(),\n                                 sys.getdefaultencoding(),\n                                 conp[0].decode(\"utf-8\")))\n                    except Exception as err:\n                        self.uwid1.infotxt.setText(str(err))\n            self.uwid1 = UWidget()\n            self.uwid1.setWindowTitle(\"Configuration\")\n            self.uwid1.infocomb.addItems([\"conda\", \"pip\"])\n            self.uwid1.infotxt.setReadOnly(True)\n            self.uwid1.show()\n            self.uwid1.infocomb.activated.connect(get_info)\n    ...\n...\n```", "```py\n...\nfrom PyQt5.QtWebEngineWidgets import QWebEngineView\nfrom PyQt5.QtWebEngineWidgets import QWebEngineSettings\n...\n```", "```py\n...\nfrom PySide2.QtWebEngineWidgets import QWebEngineView\nfrom PySide2.QtWebEngineWidgets import QWebEngineSettings\n...\n```", "```py\n...\nclass UWidget(UWid):\n\n    def __init__(self, parent=None):\n        ...\n        self.wview = QWebEngineView(self)\n        self.wview.settings().setAttribute(\n                QWebEngineSettings.PluginsEnabled, True)\n        self.wview.settings().setAttribute(\n                QWebEngineSettings.AutoLoadImages, True)\n        self.wview.settings().setAttribute(\n                QWebEngineSettings.JavascriptEnabled, True)\n        self.wview.setVisible(False)\n        ...\n        self.infolay = QtWidgets.QGridLayout()\n        self.infolay.addWidget(self.wview, 0, 0, 1, 1)\n        self.infolay.addWidget(self.infotxt, 0, 0, 1, 1)\n        self.infolay.addWidget(self.infocomb, 1, 0, 1, 1)\n        ...\n...\n```", "```py\n...\nclass UApp(UWindow, UTools):\n\n    def __init__(self, parent=None):\n        ...\n        self.mb3.triggered.connect(self.data)\n        self.mb4.triggered.connect(self.options)\n        self.mb5.triggered.connect(self.on_help)\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def on_help(self, action):\n        if action.text() == \"Online Help\":\n            self.uwid2 = UWidget()\n            self.uwid2.setWindowTitle(\"Online Help\")\n            self.uwid2.infocomb.setVisible(False)\n            self.uwid2.infotxt.setReadOnly(True)\n            self.uwid2.infotxt.setVisible(False)\n            self.uwid2.wview.setVisible(True)\n            html = open(\"help.html\", \"r\").read()\n            self.uwid2.wview.setHtml(html)\n            self.uwid2.show()\n...\n```", "```py\n...\n    ...\n    def on_help(self, action):\n        ...\n        if action.text() == \"Documentation\":\n            def get_docs():\n                if self.uwid3.infocomb.currentIndex() == 0:\n                    try:\n                        self.uwid3.wview.load(\n                                QtCore.QUrl(\n                            \"https://docs.python.org/3/\"))\n                    except Exception as err:\n                        self.stat_bar.showMessage(str(err))\n                if self.uwid3.infocomb.currentIndex() == 1:\n                    try:\n                        self.uwid3.wview.load(\n                                QtCore.QUrl(\n        \"https://www.riverbankcomputing.com/static/Docs/PyQt5/\"))\n                    except Exception as err:\n                        self.stat_bar.showMessage(str(err))\n                if self.uwid3.infocomb.currentIndex() == 2:\n                    try:\n                        self.uwid3.wview.load(\n                                QtCore.QUrl(\n                    \"https://doc.qt.io/qtforpython/index.html\"))\n                    except Exception as err:\n                        self.stat_bar.showMessage(str(err))\n            self.uwid3 = UWidget()\n            self.uwid3.setWindowTitle(\"Documentation\")\n            self.uwid3.infocomb.addItems(\n                             [\"Python\", \"PyQt5\", \"PySide2\"])\n            self.uwid3.infotxt.setReadOnly(True)\n            self.uwid3.infotxt.setVisible(False)\n            self.uwid3.wview.setVisible(True)\n            self.uwid3.show()\n            self.uwid3.infocomb.activated.connect(get_docs)\n    ...\n...\n```", "```py\n...\nclass PaintThread(QThread):\n\n    sig1 = app_signal(object, str)\n\n    def __init__(self, parent=None):\n        super(PaintThread, self).__init__(parent)\n\n    def on_source(self, datas):\n        self.datas = datas\n\n    def run(self):\n        try:\n            import pandas\n            df = pandas.read_csv(\"data/bigtests.csv\",\n                                 chunksize=1000,\n                                 engine=\"python\")\n            r = self.datas[1]\n            h = self.datas[1] / 1000\n            for ch in df:\n                wx = self.datas[0] / 1000000\n                w = ch[\"User_Name\"].values[777] * wx\n                xy = (float(r), float(w))\n                self.sig1.emit(xy, '')\n                time.sleep(0.05)\n                r -= h\n            if self.isFinished():\n                self.quit()\n        except Exception as err:\n            self.sig1.emit('', str(err))\n            if self.isFinished():\n                self.quit()\n ...\n```", "```py\n...\nclass UTools(object):\n    ...\n    paint_sig = app_signal(list)\n    ...\n ...\n```", "```py\n...\n    ...\n    def draws(self, w=None, h=None):\n        datas = [w, h]\n        self.paint_thread = PaintThread()\n        self.paint_sig.connect(self.paint_thread.on_source)\n        self.paint_sig.emit(datas)\n        self.paint_thread.start()\n        return self.paint_thread\n...\n```", "```py\n...\nclass UApp(UWindow, UTools):\n\n    def __init__(self, parent=None):\n        ...\n        self.gscene = QtWidgets.QGraphicsScene()\n        self.gview = UGraphView(self.twid2)\n        self.painter = QtGui.QPainter()\n        self.gvlay = QtWidgets.QGridLayout()\n        self.gvlay.addWidget(self.gview, 0, 0, 1, 1)\n        self.gvlay.setContentsMargins(0, 0, 0, 0)\n        self.twid2.setLayout(self.gvlay)\n        ...\n        self.push_but2.clicked.connect(self.vis)\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def vis(self):\n        self.tabwid.setCurrentIndex(1)\n        desktop = QtWidgets.QApplication.desktop()\n        self.setGeometry(desktop.availableGeometry())\n        self.visualize()\n    ...\n ...\n```", "```py\n...\n    ...\n    def visualize(self):\n        self.gscene.clear()\n        self.gview.resetCachedContent()\n        self.gview.setScene(self.gscene)\n        self.gview.setSceneRect(self.gscene.sceneRect())\n        self.pen = QtGui.QPen()\n        self.scw = float(self.tabwid.currentWidget().width() - 30)\n        self.sch = float(self.tabwid.currentWidget().height() - 30)\n        try:\n            dline = self.draws(w=self.scw, h=self.sch)\n\n            def to_line(xy, er):\n                if er == '':\n                    color = QtGui.QColor(\"#00D9FF\")\n                    cmyk = color.toCmyk()\n                    c = cmyk.cyanF()\n                    m = cmyk.magentaF() * float(1/xy[1])\n                    y = cmyk.yellowF() * float(1/xy[1])\n                    k = cmyk.blackF() * float(1/xy[1])\n                    a = cmyk.alphaF()\n                    color.setCmykF(c, m, y, k, a)\n                    self.pen.setColor(color)\n                    self.gscene.addLine(QtCore.QLineF(xy[1],\n                    self.sch, xy[1], xy[0]), self.pen)\n                else:\n                    self.stat_bar.showMessage(self.actx + ' ' + er)\n\n            dline.sig1.connect(to_line, QtCore.Qt.QueuedConnection)\n        except Exception as err:\n            self.stat_bar.showMessage(self.actx + ' ' + str(err))\n    ...\n...\n```", "```py\n[Desktop Entry]\nPath=/Path/to/the/App/App_PyQt5/\nExec=/Path/to/the/installed/python /Path/to/the/App/App_PyQt5/u_app.py\nIcon=/Path/To/the/App/App_PyQt5/Icons/python1.png\nName=UAPP\nStartupNotify=true\nTerminal=false\nType=Application\n```", "```py\n> pip install pyqtdeploy\n```", "```py\n> cd Path/to/the/App\n> pyqtdeploy pqtd.pdy\n```", "```py\n> cd Path/to/the/App/pqtd.pdy\n> pyqtdeploy-build pqtd.pdy --target=android-32\n```", "```py\n...\nfrom PyQt5 import QtTest\n...\n```", "```py\n...\nfrom PySide2 import QtTest\n...\n```", "```py\ntest = QtTest.QTest()\n```", "```py\n...\nfrom PyQt5.QtWidgets import QApplication\nfrom PyQt5.Qt import Qt\nfrom u_window import UWindow\nimport unittest\n...\n```", "```py\n...\nfrom PySide2.QtWidgets import QApplication\nfrom PySide2.QtCore import Qt\nfrom u_window import UWindow\nimport unittest\n...\n```", "```py\n...\nclass UTests(unittest.TestCase):\n\n    def setUp(self):\n        self.app = QApplication([])\n        self.uwin = UWindow() \n        self.menu = self.uwin.menuBar()\n\n    def test_menu(self):\n        self.assertEqual(self.uwin.mb1.title(), \"&File\")\n        self.menu.actions()[0].trigger()\n        QtTest.QTest.keyPress(self.uwin, Qt.Key_Enter,\n                                     Qt.ControlModifier)\n        return\n\n    def tear_down(self):\n        pass\n\nunittest.main()\n...\n```", "```py\n> python u_tests.py -v\n```"]