["```py\nAnimal. Animal is an abstract base class (ABCMeta is Python's special metaclass to make a class Abstract) and has the do_say() method. We create two products (Cat and Dog) from the Animal interface and implement do_say() with appropriate sounds that these animals make. ForestFactory is a factory that has the make_sound() method. Based on the type of argument passed by the client, an appropriate Animal instance is created at runtime and the right sound is printed out:\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass Animal(metaclass = ABCMeta):\n    @abstractmethod\n    def do_say(self):\n        pass\n\nclass Dog(Animal):\n    def do_say(self):\n        print(\"Bhow Bhow!!\")\n\nclass Cat(Animal):\n    def do_say(self):\n        print(\"Meow Meow!!\")\n\n## forest factory defined\nclass ForestFactory(object):\n    def make_sound(self, object_type):\n        return eval(object_type)().do_say()\n\n## client code\nif __name__ == '__main__':\n    ff = ForestFactory()\n    animal = input(\"Which animal should make_sound Dog or Cat?\")\n    ff.make_sound(animal)\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass Section(metaclass=ABCMeta):\n    @abstractmethod\n    def describe(self):\n        pass\n\nclass PersonalSection(Section):\n    def describe(self):\n        print(\"Personal Section\")\n\nclass AlbumSection(Section):\n    def describe(self):\n        print(\"Album Section\")\n\nclass PatentSection(Section):\n    def describe(self):\n        print(\"Patent Section\")\n\nclass PublicationSection(Section):\n    def describe(self):\n        print(\"Publication Section\")\n```", "```py\nclass Profile(metaclass=ABCMeta):\n    def __init__(self):\n        self.sections = []\n        self.createProfile()\n    @abstractmethod\n    def createProfile(self):\n        pass\n    def getSections(self):\n        return self.sections\n    def addSections(self, section):\n        self.sections.append(section)\n\nclass linkedin(Profile):\n    def createProfile(self):\n        self.addSections(PersonalSection())\n        self.addSections(PatentSection())\n        self.addSections(PublicationSection())\n\nclass facebook(Profile):\n    def createProfile(self):\n        self.addSections(PersonalSection())\n        self.addSections(AlbumSection())\n```", "```py\nif __name__ == '__main__':\n    profile_type = input(\"Which Profile you'd like to create? [LinkedIn or FaceBook]\")\n    profile = eval(profile_type.lower())()\n    print(\"Creating Profile..\", type(profile).__name__)\n    print(\"Profile has sections --\", profile.getSections())\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass PizzaFactory(metaclass=ABCMeta):\n\n    @abstractmethod\n    def createVegPizza(self):\n        pass\n\n    @abstractmethod\n    def createNonVegPizza(self):\n        pass\n\nclass IndianPizzaFactory(PizzaFactory):\n\n    def createVegPizza(self):\n        return DeluxVeggiePizza()\n\n    def createNonVegPizza(self):\n        return ChickenPizza()\n\nclass USPizzaFactory(PizzaFactory):\n\n    def createVegPizza(self):\n        return MexicanVegPizza()\n\n    def createNonVegPizza(self):\n        return HamPizza()\n```", "```py\nclass VegPizza(metaclass=ABCMeta):\n    @abstractmethod\n    def prepare(self, VegPizza):\n        pass\n\nclass NonVegPizza(metaclass=ABCMeta):\n    @abstractmethod\n    def serve(self, VegPizza):\n        pass\n\nclass DeluxVeggiePizza(VegPizza):\n    def prepare(self):\n        print(\"Prepare \", type(self).__name__)\n\nclass ChickenPizza(NonVegPizza):\n    def serve(self, VegPizza):\n        print(type(self).__name__, \" is served with Chicken on \", type(VegPizza).__name__)\n\nclass MexicanVegPizza(VegPizza):\n    def prepare(self):\n        print(\"Prepare \", type(self).__name__)\n\nclass HamPizza(NonVegPizza):\n    def serve(self, VegPizza):\n        print(type(self).__name__, \" is served with Ham on \", type(VegPizza).__name__)\n```", "```py\nclass PizzaStore:\n    def __init__(self):\n        pass\n    def makePizzas(self):\n        for factory in [IndianPizzaFactory(), USPizzaFactory()]:\n            self.factory = factory\n            self.NonVegPizza = self.factory.createNonVegPizza()\n            self.VegPizza = self.factory.createVegPizza()\n            self.VegPizza.prepare()\n            self.NonVegPizza.serve(self.VegPizza)\n\npizza = PizzaStore()\npizza.makePizzas()\n```"]