["```py\nsettings/\n    __init__.py\n    base.py\n    local.py\n    prod.py \n```", "```py\nBASE_DIR = Path(__file__).resolve().parent.parent \n```", "```py\nBASE_DIR = Path(__file__).resolve().parent.parent**.parent** \n```", "```py\nfrom .base import *\nDEBUG = True\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n} \n```", "```py\npython manage.py runserver --settings=educa.settings.local \n```", "```py\ndocker run -it --rm --name redis -p 6379:6379 redis:7.2.4 \n```", "```py\npython manage.py runserver --settings=educa.settings.local \n```", "```py\nexport DJANGO_SETTINGS_MODULE=educa.settings.local \n```", "```py\nset DJANGO_SETTINGS_MODULE=educa.settings.local \n```", "```py\nfrom .base import *\nDEBUG = False\nADMINS = [\n    ('Antonio M', 'email@mydomain.com'),\n]\nALLOWED_HOSTS = ['*']\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        NAME: BASE_DIR / 'db.sqlite3',\n    }\n} \n```", "```py\n# Pull official base Python Docker image\nFROM python:3.12.3\n# Set environment variables\nENV PYTHONDONTWRITEBYTECODE=1\nENV PYTHONUNBUFFERED=1\n# Set work directory\nWORKDIR /code\n# Install dependencies\nRUN pip install --upgrade pip\nCOPY requirements.txt .\nRUN pip install -r requirements.txt\n# Copy the Django project\nCOPY . . \n```", "```py\nasgiref==3.8.1\nDjango~=5.0.4\nPillow==10.3.0\nsqlparse==0.5.0\ndjango-braces==1.15.0\ndjango-embed-video==1.4.9\npymemcache==4.0.0\ndjango-debug-toolbar==4.3.0\nredis==5.0.4\ndjango-redisboard==8.4.0\ndjangorestframework==3.15.1\nrequests==2.31.0\nchannels[daphne]==4.1.0\nchannels-redis==4.2.0\npsycopg==3.1.18\nuwsgi==2.0.25.1\npython-decouple==3.8 \n```", "```py\nservices:\n  web:\n    build: .\n    command: python /code/educa/manage.py runserver 0.0.0.0:8000\n    restart: always\n    volumes:\n      - .:/code\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DJANGO_SETTINGS_MODULE=educa.settings.prod \n```", "```py\nChapter17/\n    Dockerfile\n    docker-compose.yml\n    educa/\n        manage.py\n        ...\n    requirements.txt \n```", "```py\ndocker compose up \n```", "```py\nchapter17-web-1  | Performing system checks...\nchapter17-web-1  |\nchapter17-web-1  | System check identified no issues (0 silenced).\nchapter17-web-1  | March 10, 2024 - 12:03:28\nchapter17-web-1  | Django version 5.0.4, using settings 'educa.settings.prod'\nchapter17-web-1  | Starting ASGI/Daphne version 4.1.0 development server at http://0.0.0.0:8000/\nchapter17-web-1  | Quit the server with CONTROL-C. \n```", "```py\nservices:\n **db:**\n **image: postgres:****16.2**\n **restart: always**\n **volumes:**\n **- ./data/db:/var/lib/postgresql/data**\n **environment:**\n **- POSTGRES_DB=postgres**\n **- POSTGRES_USER=postgres**\n **- POSTGRES_PASSWORD=postgres**\n  web:\n    build: .\n    command: python /code/educa/manage.py runserver 0.0.0.0:8000\n    restart: always\n    volumes:\n      - .:/code\n    ports:\n      - \"8000:8000\"\n    environment:\n      - DJANGO_SETTINGS_MODULE=educa.settings.prod\n **- POSTGRES_DB=postgres**\n **- POSTGRES_USER=postgres**\n **- POSTGRES_PASSWORD=postgres**\n **depends_on:**\n **- db** \n```", "```py\nweb:\n  build: .\n  command: **[****\"****./wait-for-it.sh\"****,** **\"db:5432\"****,** **\"--\"****,**\n**\"python\"****,** **\"/code/educa/manage.py\"****,** **\"runserver\"****,**\n**\"0.0.0.0:8000\"****]**\n  restart: always\n  volumes:\n      - .:/code\n    environment:\n      - DJANGO_SETTINGS_MODULE=educa.settings.prod\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    depends_on:\n      - db \n```", "```py\n**from** **decouple** **import** **config**\nfrom .base import *\t\nDEBUG = False\nADMINS = [\n    ('Antonio M', 'email@mydomain.com'),\n]\nALLOWED_HOSTS = ['*']\nDATABASES = {\n    'default': {\n        'ENGINE': **'django.db.backends.postgresql'****,**\n'NAME': **config(****'POSTGRES_DB'****),**\n**'USER'****: config(****'POSTGRES_USER'****),**\n**'PASSWORD'****: config(****'POSTGRES_PASSWORD'****),**\n**'HOST'****:** **'db'****,**\n**'PORT'****:** **5432****,**\n    }\n} \n```", "```py\ndocker compose up \n```", "```py\ndb-1   | ... database system is ready to accept connections\n...\nweb-1  | Starting ASGI/Daphne version 4.1.0 development server at http://0.0.0.0:8000/ \n```", "```py\ndocker compose exec web python /code/educa/manage.py migrate \n```", "```py\ndocker compose exec web python /code/educa/manage.py createsuperuser \n```", "```py\nservices:\n  db:\n    # ...\n **cache:**\n **image: redis:****7.2.4**\n **restart: always**\n **volumes:**\n **- ./data/cache:/data**\n  web:\n    # ...\n    depends_on:\n      - db\n **- cache** \n```", "```py\nREDIS_URL = 'redis://cache:6379'\nCACHES['default']['LOCATION'] = REDIS_URL\nCHANNEL_LAYERS['default']['CONFIG']['hosts'] = [REDIS_URL] \n```", "```py\ndocker compose up\ncache-1   | ... Ready to accept connections tcp \n```", "```py\nweb:\n    build: .\n    command: **[****\"./wait-for-it.sh\"****,** **\"db:5432\"****,** **\"--\"****,**\n**\"uwsgi\"****,** **\"--ini\"****,** **\"/code/config/uwsgi/uwsgi.ini\"****]**\n    restart: always\n    volumes:\n      - .:/code\n    environment:\n      - DJANGO_SETTINGS_MODULE=educa.settings.prod\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    depends_on:\n      - db\n      - cache \n```", "```py\nChapter17/\n    config/\n        uwsgi/\n            uwsgi.ini\n    Dockerfile\n    docker-compose.yml\n    educa/\n        manage.py\n        ...\n    requirements.txt \n```", "```py\n[uwsgi]\nsocket=/code/educa/uwsgi_app.sock\nchdir = /code/educa/\nmodule=educa.wsgi:application\nmaster=true\nchmod-socket=666\nuid=www-data\ngid=www-data\nvacuum=true \n```", "```py\nservices:\n  db:\n    # ...\n  cache:\n    # ...\n  web:\n    # ...\n **nginx:**\n **image: nginx:****1.25.5**\n **restart: always**\n **volumes:**\n **- ./config/nginx:/etc/nginx/templates**\n **- .:/code**\n **ports:**\n **-** **\"80:80\"** \n```", "```py\nconfig/\n    uwsgi/\n      uwsgi.ini\n    **nginx/**\n**default.conf.template** \n```", "```py\n# upstream for uWSGI\nupstream uwsgi_app {\n    server unix:/code/educa/uwsgi_app.sock;\n}\nserver {\n    listen       80;\n    server_name  www.educaproject.com educaproject.com;\n    error_log    stderr warn;\n    access_log   /dev/stdout main;\n    location / {\n        include      /etc/nginx/uwsgi_params;\n        uwsgi_pass   uwsgi_app;\n    }\n} \n```", "```py\ndocker compose up \n```", "```py\n127.0.0.1 educaproject.com www.educaproject.com \n```", "```py\nALLOWED_HOSTS = [**'educaproject.com'****,** **'www.educaproject.com'**] \n```", "```py\nSTATIC_ROOT = BASE_DIR / 'static' \n```", "```py\ndocker compose up \n```", "```py\ndocker compose exec web python /code/educa/manage.py collectstatic \n```", "```py\npython manage.py collectstatic --settings=educa.settings.local \n```", "```py\n171 static files copied to '/code/educa/static'. \n```", "```py\nserver {\n    # ...\n    location / {\n        include      /etc/nginx/uwsgi_params;\n        uwsgi_pass   uwsgi_app;\n    }\n **location /static/ {**\n **alias /code/educa/static/;**\n **}**\n **location /media/ {**\n **alias /code/educa/media/;**\n **}**\n} \n```", "```py\ndocker compose up \n```", "```py\npython manage.py check --settings=educa.settings.prod \n```", "```py\nSystem check identified no issues (0 silenced). \n```", "```py\npython manage.py check --deploy --settings=educa.settings.prod \n```", "```py\nSystem check identified some issues:\nWARNINGS:\n(security.W004) You have not set a value for the SECURE_HSTS_SECONDS setting. ...\n(security.W008) Your SECURE_SSL_REDIRECT setting is not set to True...\n(security.W009) Your SECRET_KEY has less than 50 characters, less than 5 unique characters, or it's prefixed with 'django-insecure-'...\n(security.W012) SESSION_COOKIE_SECURE is not set to True. ...\n(security.W016) You have 'django.middleware.csrf.CsrfViewMiddleware' in your MIDDLEWARE, but you have not set CSRF_COOKIE_SECURE ...\nSystem check identified 5 issues (0 silenced). \n```", "```py\n# Security\nCSRF_COOKIE_SECURE = True\nSESSION_COOKIE_SECURE = True\nSECURE_SSL_REDIRECT = True \n```", "```py\npython manage.py check --deploy --settings=educa.settings.prod \n```", "```py\n(security.W004) You have not set a value for the SECURE_HSTS_SECONDS setting. ... \n```", "```py\nopenssl req -x509 -newkey rsa:2048 -sha256 -days 3650 -nodes \\\n  -keyout ssl/educa.key -out ssl/educa.crt \\\n  -subj '/CN=*.educaproject.com' \\\n  -addext 'subjectAltName=DNS:*.educaproject.com' \n```", "```py\nservices:\n  # ...\n  nginx:\n    #...\n    ports:\n      - \"80:80\"\n **-** **\"443:443\"** \n```", "```py\nserver {\n   listen               80;\n **listen** **443** **ssl;**\n **ssl_certificate      /code/educa/ssl/educa.crt;**\n **ssl_certificate_key  /code/educa/ssl/educa.key;**\n   server_name          www.educaproject.com educaproject.com;\n   # ...\n} \n```", "```py\ndocker compose up \n```", "```py\n# upstream for uWSGI\nupstream uwsgi_app {\n    server unix:/code/educa/uwsgi_app.sock;\n}\nserver {\n    listen      80;\n    **server_name www.educaproject.com educaproject.com;**\n**return****301** **https://$host$request_uri;**\n**}**\n**server {**\n    listen               443 ssl;\n    ssl_certificate      /code/educa/ssl/educa.crt;\n    ssl_certificate_key  /code/educa/ssl/educa.key;\n    server_name   www.educaproject.com educaproject.com;\n    # ...\n} \n```", "```py\ndocker compose exec nginx nginx -s reload \n```", "```py\ndaphne:\n    build: .\n    working_dir: /code/educa/\n    command: [\"../wait-for-it.sh\", \"db:5432\", \"--\",\n              \"daphne\", \"-b\", \"0.0.0.0\", \"-p\", \"9001\",\n              \"educa.asgi:application\"]\n    restart: always\n    volumes:\n      - .:/code\n    environment:\n      - DJANGO_SETTINGS_MODULE=educa.settings.prod\n      - POSTGRES_DB=postgres\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=postgres\n    depends_on:\n      - db\n      - cache \n```", "```py\nimport os\nfrom django.core.asgi import get_asgi_application\nfrom channels.routing import ProtocolTypeRouter, URLRouter\n**from** **channels.security.websocket** **import** **AllowedHostsOriginValidator**\nfrom channels.auth import AuthMiddlewareStack\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'educa.settings')\ndjango_asgi_app = get_asgi_application()\nfrom chat.routing import websocket_urlpatterns\napplication = ProtocolTypeRouter({\n    'http': django_asgi_app,\n    'websocket': **AllowedHostsOriginValidator(**\n        AuthMiddlewareStack(\n            URLRouter(websocket_urlpatterns)\n        )\n    **)**,\n}) \n```", "```py\nconst url = 'ws://' + window.location.host + \n```", "```py\nconst url = 'ws**s**://' + window.location.host + \n```", "```py\n# upstream for uWSGI\nupstream uwsgi_app {\n    server unix:/code/educa/uwsgi_app.sock;\n}\n**# upstream for Daphne**\n**upstream daphne {**\n **server daphne:****9001****;**\n**}**\nserver {\n    listen       80;\n    server_name www.educaproject.com educaproject.com;\n    return 301 https://$host$request_uri;\n}\nserver {\n    listen               443 ssl;\n    ssl_certificate      /code/educa/ssl/educa.crt;\n    ssl_certificate_key  /code/educa/ssl/educa.key;\n    server_name  www.educaproject.com educaproject.com;\n    error_log    stderr warn;\n    access_log   /dev/stdout main;\n    location / {\n        include      /etc/nginx/uwsgi_params;\n        uwsgi_pass   uwsgi_app;\n    }\n **location /ws/ {**\n **proxy_pass          http://daphne;**\n **proxy_http_version** **1.1****;**\n **proxy_set_header    Upgrade $http_upgrade;**\n **proxy_set_header    Connection** **\"upgrade\"****;**\n **proxy_redirect      off;**\n **}**\n    location /static/ {\n        alias /code/educa/static/;\n    }\n    location /media/ {\n        alias /code/educa/media/;\n    }\n} \n```", "```py\ndocker compose up \n```", "```py\ndef my_middleware(get_response):\n    def middleware(request):\n        # Code executed for each request before\n# the view (and later middleware) are called.\n        response = get_response(request)\n        # Code executed for each request/response after\n# the view is called.\nreturn response\n    return middleware \n```", "```py\nfrom django.urls import reverse\nfrom django.shortcuts import get_object_or_404, redirect\nfrom .models import Course\ndef subdomain_course_middleware(get_response):\n    \"\"\"\n    Subdomains for courses\n    \"\"\"\ndef middleware(request):\n        host_parts = request.get_host().split('.')\n        if len(host_parts) > 2 and host_parts[0] != 'www':\n            # get course for the given subdomain\n            course = get_object_or_404(Course, slug=host_parts[0])\n            course_url = reverse('course_detail', args=[course.slug])\n            # redirect current request to the course_detail view\n            url = '{}://{}{}'.format(\n                request.scheme, '.'.join(host_parts[1:]), course_url\n            )\n            return redirect(url)\n        response = get_response(request)\n        return response\n    return middleware \n```", "```py\nMIDDLEWARE = [\n    # ...\n**'courses.middleware.subdomain_course_middleware'****,**\n] \n```", "```py\nALLOWED_HOSTS = [**'****.educaproject.com'**] \n```", "```py\nserver_name  www.educaproject.com educaproject.com; \n```", "```py\nserver_name  *****.educaproject.com educaproject.com; \n```", "```py\n127.0.0.1  django.educaproject.com \n```", "```py\ndocker compose up \n```", "```py\nmanagement/\n    __init__.py\n    commands/\n        __init__.py\n        enroll_reminder.py \n```", "```py\nimport datetime\nfrom django.conf import settings\nfrom django.contrib.auth.models import User\nfrom django.core.mail import send_mass_mail\nfrom django.core.management.base import BaseCommand\nfrom django.db.models import Count\nfrom django.utils import timezone\nclass Command(BaseCommand):\n    help = 'Sends an e-mail reminder to users registered more' \\\n           'than N days that are not enrolled into any courses yet'\ndef add_arguments(self, parser):\n        parser.add_argument('--days', dest='days', type=int)\n    def handle(self, *args, **options):\n        emails = []\n        subject = 'Enroll in a course'\n        date_joined = timezone.now().today() - datetime.timedelta(\n            days=options['days'] or 0\n        )\n        users = User.objects.annotate(\n            course_count=Count('courses_joined')\n        ).filter(course_count=0, date_joined__date__lte=date_joined)\n        for user in users:\n            message = f\"\"\"Dear {user.first_name},\n            We noticed that you didn't enroll in any courses yet.\n            What are you waiting for?\"\"\"\n            emails.append(\n                (\n                    subject,\n                    message,\n                    settings.DEFAULT_FROM_EMAIL,\n                    [user.email]\n                )\n            )\n        send_mass_mail(emails)\n        self.stdout.write(f'Sent {len(emails)} reminders') \n```", "```py\ndocker compose exec web python /code/educa/manage.py \\\n  enroll_reminder --days=20 --settings=educa.settings.prod \n```", "```py\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' \n```", "```py\nfrom django.core import management\nmanagement.call_command('enroll_reminder', days=20) \n```"]