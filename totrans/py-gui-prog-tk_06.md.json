["```py\nfrom abq_data_entry.application import Application\napp = Application()\napp.mainloop() \n```", "```py\nfrom abq_data_entry import application \n```", "```py\n# abq_data_entry/constants.py\nfrom enum import Enum, auto\nclass FieldTypes(Enum):\n  string = auto()\n  string_list = auto()\n  short_string_list = auto()\n  iso_date_string = auto()\n  long_string = auto()\n  decimal = auto()\n  integer = auto()\n  boolean = auto() \n```", "```py\n# abq_data_entry/models.py, at the top\nimport csv\nfrom pathlib import Path\nfrom datetime import datetime\nimport os\nfrom .constants import FieldTypes as FT\nclass CSVModel:\n  \"\"\"CSV file storage\"\"\" \n```", "```py\n fields = {\n    \"Date\": {'req': True, 'type': FT.iso_date_string},\n    \"Time\": {'req': True, 'type': FT.string_list,\n      'values': ['8:00', '12:00', '16:00', '20:00']},\n    \"Technician\": {'req': True, 'type':  FT.string},\n    \"Lab\": {'req': True, 'type': FT.short_string_list,\n      'values': ['A', 'B', 'C']},\n    \"Plot\": {'req': True, 'type': FT.string_list,\n      'values': [str(x) for x in range(1, 21)]},\n    \"Seed Sample\":  {'req': True, 'type': FT.string},\n    \"Humidity\": {'req': True, 'type': FT.decimal,\n      'min': 0.5, 'max': 52.0, 'inc': .01},\n    \"Light\": {'req': True, 'type': FT.decimal,\n      'min': 0, 'max': 100.0, 'inc': .01},\n    \"Temperature\": {'req': True, 'type': FT.decimal,\n      'min': 4, 'max': 40, 'inc': .01},\n    \"Equipment Fault\": {'req': False, 'type': FT.boolean},\n    \"Plants\": {'req': True, 'type': FT.integer,       'min': 0, 'max': 20},\n    \"Blossoms\": {\n      'req': True, 'type': FT.integer, 'min': 0, 'max': 1000},\n    \"Fruit\": {'req': True, 'type': FT.integer, \n      'min': 0, 'max': 1000},\n    \"Min Height\": {'req': True, 'type': FT.decimal,\n      'min': 0, 'max': 1000, 'inc': .01},\n    \"Max Height\": {'req': True, 'type': FT.decimal,\n      'min': 0, 'max': 1000, 'inc': .01},\n    \"Med Height\": {'req': True, 'type': FT.decimal,\n      'min': 0, 'max': 1000, 'inc': .01},\n    \"Notes\": {'req': False, 'type': FT.long_string}\n  } \n```", "```py\n def _on_save(self):\n    errors = self.recordform.get_errors()\n    if errors:\n      self.status.set(\n        \"Cannot save, error in fields: {}\"\n        .format(', '.join(errors.keys()))\n      )\n      return\n    datestring = datetime.today().strftime(\"%Y-%m-%d\")\n    filename = f\"abq_data_record_{datestring}.csv\"\n    newfile = not Path(filename).exists()\n    data = self.recordform.get()\n    with open(filename, 'a') as fh:\n      csvwriter = csv.DictWriter(fh, fieldnames=data.keys())\n      if newfile:\n        csvwriter.writeheader()\n      csvwriter.writerow(data)\n    self._records_saved += 1\n    self.status.set(\n      f\"{self._records_saved} records saved this session\"\n    )\n    self.recordform.reset() \n```", "```py\n# models.py, in the CSVModel class\n  def __init__(self):\n    datestring = datetime.today().strftime(\"%Y-%m-%d\")\n    filename = \"abq_data_record_{}.csv\".format(datestring)\n    self.file = Path(filename) \n```", "```py\n# models.py, in CSVModel.__init__()\n    file_exists = os.access(self.file, os.F_OK)\n    parent_writeable = os.access(self.file.parent, os.W_OK)\n    file_writeable = os.access(self.file, os.W_OK)\n    if (\n      (not file_exists and not parent_writeable) or\n      (file_exists and not file_writeable)\n    ):\n      msg = f'Permission denied accessing file: {filename}'\n      raise PermissionError(msg) \n```", "```py\n# models.py, in the CSVModel class\n  def save_record(self, data):\n    \"\"\"Save a dict of data to the CSV file\"\"\"\n    newfile = not self.file.exists()\n    with open(self.file, 'a', newline='') as fh:\n      csvwriter = csv.DictWriter(fh, fieldnames=self.fields.keys())\n      if newfile:\n        csvwriter.writeheader()\n      csvwriter.writerow(data) \n```", "```py\n# top of widgets.py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime\nfrom decimal import Decimal, InvalidOperation \n```", "```py\n# abq_data_entry/views.py, at the top\nimport tkinter as tk\nfrom tkinter import ttk\nfrom datetime import datetime \n```", "```py\nfrom . import widgets as w \n```", "```py\n **w.**LabelInput(\n      r_info, \"Date\", var=self._vars['Date'],\n      input_class=w.DateEntry\n    ).grid(row=0, column=0)\n    **w.**LabelInput(\n      r_info, \"Time\", input_class=w.ValidatedCombobox,\n      var=self._vars['Time'],\n      input_args={\"values\": [\"8:00\", \"12:00\", \"16:00\", \"20:00\"]}\n    ).grid(row=0, column=1)\n    **w.**LabelInput(\n      r_info, \"Technician\",  var=self._vars['Technician'],\n      input_class=w.RequiredEntry\n    ).grid(row=0, column=2) \n```", "```py\n# at the top of widgets.py\nfrom .constants import FieldTypes as FT \n```", "```py\n# widgets.py, inside LabelInput\n  field_types = {\n    FT.string: RequiredEntry,\n    FT.string_list: ValidatedCombobox,\n    FT.short_string_list: ValidatedRadioGroup,\n    FT.iso_date_string: DateEntry,\n    FT.long_string: BoundText,\n    FT.decimal: ValidatedSpinbox,\n    FT.integer: ValidatedSpinbox,\n    FT.boolean: ttk.Checkbutton\n  } \n```", "```py\n# widgets.py, inside LabelInput\n  def __init__(\n    self, parent, label, var, input_class=None,\n    input_args=None, label_args=None, **field_spec=None**,\n    disable_var=None, **kwargs\n  ): \n```", "```py\n# widgets.py, inside LabelInput.__init__():\n    if field_spec:\n      field_type = field_spec.get('type', FT.string)\n      input_class = input_class or self.field_types.get(field_type)\n      if 'min' in field_spec and 'from_' not in input_args:\n        input_args['from_'] = field_spec.get('min')\n      if 'max' in field_spec and 'to' not in input_args:\n        input_args['to'] = field_spec.get('max')\n      if 'inc' in field_spec and 'increment' not in input_args:\n        input_args['increment'] = field_spec.get('inc')\n      if 'values' in field_spec and 'values' not in input_args:\n        input_args['values'] = field_spec.get('values') \n```", "```py\n# views.py, in DataRecordForm class\n  def __init__(self, parent, model, *args, **kwargs):\n    super().__init__(parent, *args, **kwargs)\n    self.model= model\n    fields = self.model.fields \n```", "```py\n# views.py, in DataRecordForm.__init__()\n    w.LabelInput(\n      r_info, \"Date\",\n      field_spec=fields['Date'],\n      var=self._vars['Date'],\n    ).grid(row=0, column=0)\n    w.LabelInput(\n      r_info, \"Time\",\n      field_spec=fields['Time'],\n      var=self._vars['Time'],\n    ).grid(row=0, column=1)\n    w.LabelInput(\n      r_info, \"Technician\",\n      field_spec=fields['Technician'],\n      var=self._vars['Technician']\n    ).grid(row=0, column=2) \n```", "```py\n w.LabelInput(\n      p_info, \"Min Height (cm)\",\n      field_spec=fields['Min Height'],\n      var=self._vars['Min Height'],\n      input_args={\n        \"max_var\": max_height_var,\n        \"focus_update_var\": min_height_var\n      }) \n```", "```py\n def _on_save(self):\n    self.event_generate('<<SaveRecord>>') \n```", "```py\n# views.py, in DataRecordForm.__init__()\n    self.savebutton = ttk.Button(\n      buttons, text=\"Save\", command=self._on_save) \n```", "```py\n# abq_data_entry/application.py, at the top\nimport tkinter as tk\nfrom tkinter import ttk\nfrom . import views as v\nfrom . import models as m \n```", "```py\n# application.py, inside the Application class\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.model = m.CSVModel() \n```", "```py\n# application.py, inside Application.__init__()\n    self.recordform = v.DataRecordForm(self, self.model) \n```", "```py\n# application.py, inside Application.__init__()\n    self.recordform = v.DataRecordForm(self, self.model)\n    self.recordform.grid(row=1, padx=10, sticky=(tk.W + tk.E))\n    self.recordform.bind('<<SaveRecord>>', self._on_save) \n```", "```py\n def _on_save(self, *_):\n    \"\"\"Handles file-save requests\"\"\"\n    errors = self.recordform.get_errors()\n    if errors:\n      self.status.set(\n        \"Cannot save, error in fields: {}\"\n        .format(', '.join(errors.keys()))\n      )\n      return \n    data = self.recordform.get()\n    self.model.save_record(data)\n    self._records_saved += 1\n    self.status.set(\n      f\"{self._records_saved} records saved this session\"\n    )\n    self.recordform.reset() \n```", "```py\n$ python3 abq_data_entry.py \n```", "```py\n$ git init \n```", "```py\n*.pyc\n__pycache__/ \n```", "```py\n$ git add abq_data_entry\n$ git add abq_data_entry.py\n$ git add docs\n$ git add README.rst \n```", "```py\nOn branch master\nNo commits yet\nChanges to be committed:\n(use \"git rm --cached <file>...\" to unstage)\nnew file: README.rst\nnew file: abq_data_entry.py\nnew file: abq_data_entry/~__init__.py~\nnew file: abq_data_entry/application.py\nnew file: abq_data_entry/models.py\nnew file: abq_data_entry/views.py\nnew file: abq_data_entry/widgets.py\nnew file: docs/Application_layout.png\nnew file: docs/abq_data_entry_spec.rst\nnew file: docs/lab-tech-paper-form.png\nUntracked files:\n(use \"git add <file>...\" to include in what will be committed)\n.gitignore \n```", "```py\n$ git commit -m \"Initial commit\" \n```", "```py\n$ git log\ncommit df48707422875ff545dc30f4395f82ad2d25f103 (HEAD -> master)\nAuthor: Alan Moore <alan@example.com>\nDate: Thu Dec 21 18:12:17 2017 -0600\nInitial commit \n```"]