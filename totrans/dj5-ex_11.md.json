["```py\nbrew install gettext \n```", "```py\nbrew link --force gettext \n```", "```py\nLANGUAGES = [\n    ('en', 'English'),\n    ('es', 'Spanish'),\n] \n```", "```py\nLANGUAGE_CODE = **'****en'** \n```", "```py\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n**'django.middleware.locale.LocaleMiddleware'****,**\n'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] \n```", "```py\nlocale/\n    en/\n    es/ \n```", "```py\nLOCALE_PATHS = [\n    BASE_DIR / 'locale',\n] \n```", "```py\nfrom django.utils.translation import gettext as _\noutput = _('Text to be translated.') \n```", "```py\nfrom django.utils.translation import gettext as _\nmonth = _('April')\nday = '14'\noutput = _('Today is %(month)s %(day)s') % {'month': month, 'day': day} \n```", "```py\noutput = ngettext(\n    'there is %(count)d product',    # Singular form\n'there are %(count)d products',  # Plural form\n    count                            # Numeric value to determine form\n) % {'count': count} \n```", "```py\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\n# ...\nLANGUAGES = [\n    ('en', **_(**'English'**)**),\n    ('es', **_(**'Spanish'**)**),\n] \n```", "```py\ndjango-admin makemessages --all \n```", "```py\nprocessing locale es\nprocessing locale en \n```", "```py\nen/\n    LC_MESSAGES/\n        django.po\nes/\n    LC_MESSAGES/\n        django.po \n```", "```py\n#: myshop/settings.py:118\nmsgid \"English\"\nmsgstr \"\"\n#: myshop/settings.py:119\nmsgid \"Spanish\"\nmsgstr \"\" \n```", "```py\n#: myshop/settings.py:118\nmsgid \"English\"\nmsgstr **\"Inglés\"**\n#: myshop/settings.py:119\nmsgid \"Spanish\"\nmsgstr **\"Español\"** \n```", "```py\ndjango-admin compilemessages \n```", "```py\nprocessing file django.po in myshop/locale/en/LC_MESSAGES\nprocessing file django.po in myshop/locale/es/LC_MESSAGES \n```", "```py\nen/\n    LC_MESSAGES/\n        django.mo\n        django.po\nes/\n    LC_MESSAGES/\n        django.mo\n        django.po \n```", "```py\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\nclass Order(models.Model):\n    first_name = models.CharField(**_(****'first name'****)**, max_length=50)\n    last_name = models.CharField(**_(****'last name'****)**, max_length=50)\n    email = models.EmailField(**_(****'e-mail'****)**)\n    address = models.CharField(**_(****'address'****)**, max_length=250)\n    postal_code = models.CharField(**_(****'postal code'****)**, max_length=20)\n    city = models.CharField(**_(****'city'****)**, max_length=100)\n    # ... \n```", "```py\nlocale/\n    en/\n    es/ \n```", "```py\ndjango-admin makemessages --all \n```", "```py\nprocessing locale es\nprocessing locale en \n```", "```py\n#: orders/models.py:12\nmsgid \"first name\"\nmsgstr **\"nombre\"**\n#: orders/models.py:14\nmsgid \"last name\"\nmsgstr **\"apellidos\"**\n#: orders/models.py:16\nmsgid \"e-mail\"\nmsgstr **\"e-mail\"**\n#: orders/models.py:17\nmsgid \"address\"\nmsgstr **\"dirección\"**\n#: orders/models.py:19\nmsgid \"postal code\"\nmsgstr **\"código postal\"**\n#: orders/models.py:21\nmsgid \"city\"\nmsgstr **\"ciudad\"** \n```", "```py\nfrom django import forms\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\nPRODUCT_QUANTITY_CHOICES = [(i, str(i)) for i in range(1, 21)]\nclass CartAddProductForm(forms.Form):\n    quantity = forms.TypedChoiceField(\n        choices=PRODUCT_QUANTITY_CHOICES,\n        coerce=int**,**\n **label=_(****'Quantity'****)**\n    )\n    override = forms.BooleanField(\n        required=False,\n        initial=False,\n        widget=forms.HiddenInput\n    ) \n```", "```py\nfrom django import forms\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\nclass CouponApplyForm(forms.Form):\n    code = forms.CharField(**label=_(****'Coupon'****)**) \n```", "```py\n{% translate \"Text to be translated\" %} \n```", "```py\n{% translate \"Hello!\" as greeting %}\n<h1>{{ greeting }}</h1> \n```", "```py\n{% blocktranslate %}Hello {{ name }}!{% endblocktranslate %} \n```", "```py\n{% blocktranslate with name=user.name|capfirst %}\n  Hello {{ name }}!\n{% endblocktranslate %} \n```", "```py\n{% load **i18n** static %}\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<title>\n    {% block title %}**{% translate \"My shop\" %}**{% endblock %}\n  </title>\n<link href=\"{% static \"css/base.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"header\">\n<a href=\"/\" class=\"logo\">**{% translate \"My shop\" %}**</a>\n</div>\n<div id=\"subheader\">\n<div class=\"cart\">\n      {% with total_items=cart|length %}\n        {% if total_items > 0 %}\n          **{% translate \"Your cart\" %}**:\n          <a href=\"{% url \"cart:cart_detail\" %}\">\n**{% blocktranslate with total=cart.get_total_price count items=total_items %}**\n **{{ items }} item, ${{ total }}**\n **{% plural %}**\n **{{ items }} items, ${{ total }}**\n **{% endblocktranslate %}**\n</a>\n        {% elif not order %}\n          **{% translate \"Your cart is empty.\" %}**\n        {% endif %}\n      {% endwith %}\n    </div>\n</div>\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n</body>\n</html> \n```", "```py\n{{ total_items }} item{{ total_items|pluralize }},\n${{ cart.get_total_price }} \n```", "```py\n{% blocktranslate with total=cart.get_total_price count items=total_items %}\n  {{ items }} item, ${{ total }}\n{% plural %}\n  {{ items }} items, ${{ total }}\n{% endblocktranslate %} \n```", "```py\n{% extends \"shop/base.html\" %}\n{% load **i18n** static %}\n... \n```", "```py\n<input type=\"submit\" value=\"Add to cart\"> \n```", "```py\n<input type=\"submit\" value=\"**{% translate \"****Add****to****cart****\" %}**\"> \n```", "```py\n<h3>People who bought this also bought</h3> \n```", "```py\n<h3>**{% translate \"People who bought this also bought\" %}**</h3> \n```", "```py\n{% extends \"shop/base.html\" %}\n**{% load i18n %}**\n{% block title %}\n **{% translate** **\"Checkout\"** **%}**\n{% endblock %}\n{% block content %}\n  <h1>**{% translate** **\"Checkout\"** **%}**</h1>\n  <div class=\"order-info\">\n    <h3>**{% translate** **\"Your order\"** **%}**</h3>\n    <ul>\n      {% for item in cart %}\n        <li>\n          {{ item.quantity }}x {{ item.product.name }}\n          <span>${{ item.total_price }}</span>\n        </li>\n      {% endfor %}\n      {% if cart.coupon %}\n        <li>\n          **{% blocktranslate with code=cart.coupon.code discount=cart.coupon.discount %}**\n**\"****{{ code }}\"** **({{ discount }}% off)**\n **{% endblocktranslate %}**\n          <span class=\"neg\">- ${{ cart.get_discount|floatformat:2 }}</span>\n        </li>\n      {% endif %}\n    </ul>\n    <p>**{% translate** **\"Total\"** **%}**: ${{\n    cart.get_total_price_after_discount|floatformat:2 }}</p>\n  </div>\n  <form method=\"post\" class=\"order-form\">\n    {{ form.as_p }}\n    <p><input type=\"submit\" value=\"**{% translate \"****Place order****\" %}**\"></p>\n    {% csrf_token %}\n  </form>\n{% endblock %} \n```", "```py\ndjango-admin makemessages --all \n```", "```py\ndjango-admin compilemessages \n```", "```py\nprocessing file django.po in myshop/locale/en/LC_MESSAGES\nprocessing file django.po in myshop/locale/es/LC_MESSAGES\nprocessing file django.po in myshop/orders/locale/en/LC_MESSAGES\nprocessing file django.po in myshop/orders/locale/es/LC_MESSAGES \n```", "```py\npython -m pip install django-rosetta==0.10.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'rosetta'****,**\n] \n```", "```py\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('cart/', include('cart.urls', namespace='cart')),\n    path('orders/', include('orders.urls', namespace='orders')),\n    path('payment/', include('payment.urls', namespace='payment')),\n    path('coupons/', include('coupons.urls', namespace='coupons')),\n **path(****'rosetta/'****, include(****'rosetta.urls'****)),**\n    path('', include('shop.urls', namespace='shop')),\n] \n```", "```py\n%(items)s items, $%(total)s \n```", "```py\n%(items)s productos, $%(total)s \n```", "```py\n**from** **django.conf.urls.i18n** **import** **i18n_patterns**\nurlpatterns = **i18n_patterns(**\n    path('admin/', admin.site.urls),\n    path('cart/', include('cart.urls', namespace='cart')),\n    path('orders/', include('orders.urls', namespace='orders')),\n    path('payment/', include('payment.urls', namespace='payment')),\n    path('coupons/', include('coupons.urls', namespace='coupons')),\n    path('rosetta/', include('rosetta.urls')),\n    path('', include('shop.urls', namespace='shop')),\n**)** \n```", "```py\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\nurlpatterns = i18n_patterns(\n    path('admin/', admin.site.urls),\n    path(**_(**'cart/'**)**, include('cart.urls', namespace='cart')),\n    path(**_(**'orders/'**)**, include('orders.urls', namespace='orders')),\n    path(**_(**'payment/'**)**, include('payment.urls', namespace='payment')),\n    path(**_(**'coupons/'**)**, include('coupons.urls', namespace='coupons')),\n    path('rosetta/', include('rosetta.urls')),\n    path('', include('shop.urls', namespace='shop')),\n) \n```", "```py\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\nurlpatterns = [\n    path(**_(**'create/'**)**, views.order_create, name='order_create'),\n    # ...\n] \n```", "```py\n**from** **django.utils.translation** **import** **gettext_lazy** **as** **_**\nurlpatterns = [\n    path(**_(**'process/'**)**, views.payment_process, name='process'),\n    path(**_(****'**completed/'**)**, views.payment_completed, name='completed'),\n    path(**_(**'canceled/'**)**, views.payment_canceled, name='canceled'),\n    path('webhook/', webhooks.stripe_webhook, name='stripe-webhook'),\n] \n```", "```py\nfrom django.utils.translation import gettext_lazy as _\nurlpatterns = [\n    path(_('process/'), views.payment_process, name='process'),\n    path(_('completed/'), views.payment_completed, name='completed'),\n    path(_('canceled/'), views.payment_canceled, name='canceled'),\n] \n```", "```py\nfrom django.utils.translation import gettext_lazy as _\n**from** **payment** **import** **webhooks**\nurlpatterns = i18n_patterns(\n    path('admin/', admin.site.urls),\n    path(_('cart/'), include('cart.urls', namespace='cart')),\n    path(_('orders/'), include('orders.urls', namespace='orders')),\n    path(_('payment/'), include('payment.urls', namespace='payment')),\n    path(_('coupons/'), include('coupons.urls', namespace='coupons')),\n    path('rosetta/', include('rosetta.urls')),\n    path('', include('shop.urls', namespace='shop')),\n)\n**urlpatterns += [**\n **path(**\n**'payment/webhook/'****,**\n **webhooks.stripe_webhook,**\n **name=****'stripe-webhook'**\n **),**\n**]**\nif settings.DEBUG:\n    urlpatterns += static(\n        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT\n    ) \n```", "```py\ndjango-admin makemessages --all \n```", "```py\npython manage.py runserver \n```", "```py\n<div id=\"header\">\n<a href=\"/\" class=\"logo\">{% translate \"My shop\" %}</a>\n</div> \n```", "```py\n<div id=\"header\">\n<a href=\"/\" class=\"logo\">{% translate \"My shop\" %}</a>\n **{% get_current_language as LANGUAGE_CODE %}**\n **{% get_available_languages as LANGUAGES %}**\n **{% get_language_info_list for LANGUAGES as languages %}**\n**<****div****class****=****\"languages\"****>**\n**<****p****>****{% translate \"Language\" %}:****</****p****>**\n**<****ul****class****=****\"languages\"****>**\n **{% for language in languages %}**\n**<****li****>**\n**<****a****href****=****\"/{{ language.code }}/\"**\n **{%** **if****language.code** **==** **LANGUAGE_CODE** **%}** **class****=****\"selected\"****{%** **endif** **%}>**\n **{{ language.name_local }}**\n**</****a****>**\n**</****li****>**\n **{% endfor %}**\n**</****ul****>**\n**</****div****>**\n</div> \n```", "```py\npython -m pip install django-parler==2.3 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'parler'****,**\n] \n```", "```py\n# django-parler settings\nPARLER_LANGUAGES = {\n    None: (\n        {'code': 'en'},\n        {'code': 'es'},\n    ),\n    'default': {\n        'fallback': 'en',\n        'hide_untranslated': False,\n    }\n} \n```", "```py\nfrom parler.models import TranslatableModel, TranslatedFields \n```", "```py\nclass Category(**TranslatableModel**):\n **translations = TranslatedFields(**\n       name = models.CharField(max_length=200)**,**\n        slug = models.SlugField(max_length=200, unique=True)**,**\n **)** \n```", "```py\nclass Product(**TranslatableModel**):\n **translations = TranslatedFields(**\n        name = models.CharField(max_length=200)**,**\n        slug = models.SlugField(max_length=200)**,**\n        description = models.TextField(blank=True)\n **)**\n    category = models.ForeignKey(\n        Category,\n        related_name='products',\n        on_delete=models.CASCADE\n    )\n    image = models.ImageField(\n        upload_to='products/%Y/%m/%d',\n        blank=True\n    )\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    available = models.BooleanField(default=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True) \n```", "```py\nclass Category(TranslatableModel):\n    # ...\nclass Meta:\n        **#** ordering = ['name']\n**#** indexes = [\n**#**     models.Index(fields=['name']),\n**#** ]\n        verbose_name = 'category'\n        verbose_name_plural = 'categories' \n```", "```py\nclass Product(TranslatableModel):\n    # ...\nclass Meta:\n        **#** ordering = ['name']\n        indexes = [\n            **#** models.Index(fields=['id', 'slug']),\n**#** models.Index(fields=['name']),\n            models.Index(fields=['-created']),\n        ] \n```", "```py\nfrom parler.admin import TranslatableAdmin \n```", "```py\nfrom django.contrib import admin\n**from** **parler.admin** **import** **TranslatableAdmin**\nfrom .models import Category, Product\n@admin.register(Category)\nclass CategoryAdmin(**TranslatableAdmin**):\n    list_display = ['name', 'slug']\n**def****get_prepopulated_fields****(****self, request, obj=****None****):**\n**return** **{****'slug'****: (****'name'****,)}**\n@admin.register(Product)\nclass ProductAdmin(**TranslatableAdmin**):\n    list_display = [\n        'name',\n        'slug',\n        'price',\n        'available',\n        'created',\n        'updated'\n    ]\n    list_filter = ['available', 'created', 'updated']\n    list_editable = ['price', 'available']\n**def****get_prepopulated_fields****(****self, request, obj=****None****):**\n**return** **{****'slug'****: (****'name'****,)}** \n```", "```py\npython manage.py makemigrations shop --name \"translations\" \n```", "```py\nMigrations for 'shop':\n  shop/migrations/0002_translations.py\n    - Create model CategoryTranslation\n    - Create model ProductTranslation\n    - Change Meta options on category\n    - Change Meta options on product\n    - Remove index shop_catego_name_289c7e_idx from category\n    - Remove index shop_produc_id_f21274_idx from product\n    - Remove index shop_produc_name_a2070e_idx from product\n    - Remove field name from category\n    - Remove field slug from category\n    - Remove field description from product\n    - Remove field name from product\n    - Remove field slug from product\n    - Add field master to producttranslation\n    - Add field master to categorytranslation\n    - Alter unique_together for producttranslation (1 constraint(s))\n    - Alter unique_together for categorytranslation (1 constraint(s)) \n```", "```py\nbases=(parler.models.TranslatedFieldsModelMixin, models.Model), \n```", "```py\nbases=(parler.models.**TranslatableModel**, models.Model), \n```", "```py\npython manage.py migrate shop \n```", "```py\nApplying shop.0002_ categorytranslation_producttranslation_and_more... OK \n```", "```py\npython manage.py runserver \n```", "```py\npython manage.py shell \n```", "```py\n>>> from shop.models import Product\n>>> from django.utils.translation import activate\n>>> activate('es')\n>>> product=Product.objects.first()\n>>> product.name\n'Té verde' \n```", "```py\n>>> product=Product.objects.language('en').first()\n>>> product.name\n'Green tea' \n```", "```py\n>>> product.set_current_language('es')\n>>> product.name\n'Té verde'\n>>> product.get_current_language()\n'es' \n```", "```py\n>>> Product.objects.filter(translations__name='Green tea')\n<TranslatableQuerySet [<Product: Té verde>]> \n```", "```py\ndef product_list(request, category_slug=None):\n    category = None\n    categories = Category.objects.all()\n    products = Product.objects.filter(available=True)\n    if category_slug:\n **language = request.LANGUAGE_CODE**\n        category = get_object_or_404(\n            Category,\n **translations__language_code=language,**\n **translations__**slug=category_slug\n        )\n        products = products.filter(category=category)\n    return render(\n        request,\n        'shop/product/list.html',\n        {\n            'category': category,\n            'categories': categories,\n            'products': products\n        }\n    ) \n```", "```py\ndef product_detail(request, id, slug):\n **language = request.LANGUAGE_CODE**\n    product = get_object_or_404(\n        Product,\n        id=id,\n        **translations__language_code=language,**\n **translations__**slug=slug,\n        available=True\n    )\n    cart_product_form = CartAddProductForm()\n    r = Recommender()\n    recommended_products = r.suggest_products_for([product], 4)\n    return render(\n        request,\n        'shop/product/detail.html',\n        {\n            'product': product,\n            'cart_product_form': cart_product_form,\n            'recommended_products': recommended_products\n        }\n    ) \n```", "```py\npython manage.py runserver \n```", "```py\n{% load l10n %}\n{% localize on %}\n  {{ value }}\n{% endlocalize %}\n{% localize off %}\n  {{ value }}\n{% endlocalize %} \n```", "```py\n{{ value|localize }}\n{{ value|unlocalize }} \n```", "```py\npython -m pip install django-localflavor==4.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'localflavor'****,**\n] \n```", "```py\nfrom django import forms\n**from** **localflavor.us.forms** **import** **USZipCodeField**\nfrom .models import Order\nclass OrderCreateForm(forms.ModelForm):\n **postal_code = USZipCodeField()**\nclass Meta:\n        model = Order\n        fields = [\n            'first_name',\n            'last_name',\n            'email',\n            'address',\n            'postal_code',\n            'city'\n        ] \n```", "```py\npython manage.py runserver \n```", "```py\nEnter a zip code in the format XXXXX or XXXXX-XXXX. \n```"]