["```py\nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nfrom matplotlib.ticker import LinearLocator, FormatStrFormatter\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.gca(projection='3d')\nX = np.arange(-5, 5, 0.25)\nY = np.arange(-5, 5, 0.25)\nX, Y = np.meshgrid(X, Y)\nR = np.sqrt(X**2 + Y**2)\nZ = np.sin(R)\nsurf = ax.plot_surface(X, Y, Z, rstride=1, cstride=1, cmap=cm.coolwarm, linewidth=0, antialiased=False)\n\nax.set_zlim(-1.01, 1.01)\n\nax.zaxis.set_major_locator(LinearLocator(10))\nax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))\n\nfig.colorbar(surf, shrink=0.5, aspect=5)\n\nplt.show()\n```", "```py\npip install numpy-1.9.2+mkl-cp34-none-win_amd64.whl\n\n```", "```py\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport tkinter as tk\n#--------------------------------------------------------------\nfig = Figure(figsize=(12, 8), facecolor='white')\n#--------------------------------------------------------------\n# axis = fig.add_subplot(111)   # 1 row,  1 column, only graph\naxis = fig.add_subplot(211)     # 2 rows, 1 column, Top graph\n#--------------------------------------------------------------\nxValues = [1,2,3,4]\nyValues = [5,7,6,8]\naxis.plot(xValues, yValues)\n\naxis.set_xlabel('Horizontal Label')\naxis.set_ylabel('Vertical Label')\n\n# axis.grid()                   # default line style \naxis.grid(linestyle='-')        # solid grid lines\n#--------------------------------------------------------------\ndef _destroyWindow():\n    root.quit()\n    root.destroy() \n#--------------------------------------------------------------\nroot = tk.Tk() \nroot.withdraw()\nroot.protocol('WM_DELETE_WINDOW', _destroyWindow)   \n#--------------------------------------------------------------\ncanvas = FigureCanvasTkAgg(fig, master=root)\ncanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)\n#--------------------------------------------------------------\nroot.update()\nroot.deiconify()\nroot.mainloop()\n```", "```py\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport tkinter as tk\n#--------------------------------------------------------------\nfig = Figure(figsize=(12, 8), facecolor='white')\n#--------------------------------------------------------------\naxis = fig.add_subplot(211)     # 2 rows, 1 column, Top graph\n#--------------------------------------------------------------\nxValues = [1,2,3,4]\nyValues = [5,7,6,8]\naxis.plot(xValues, yValues)\n\naxis.set_xlabel('Horizontal Label')\naxis.set_ylabel('Vertical Label')\n\naxis.grid(linestyle='-')        # solid grid lines\n#--------------------------------------------------------------\naxis1 = fig.add_subplot(212)    # 2 rows, 1 column, Bottom graph\n#--------------------------------------------------------------\nxValues1 = [1,2,3,4]\nyValues1 = [7,5,8,6]\naxis1.plot(xValues1, yValues1)\naxis1.grid()                    # default line style \n#--------------------------------------------------------------\ndef _destroyWindow():\n    root.quit()\n    root.destroy() \n#--------------------------------------------------------------\nroot = tk.Tk() \nroot.withdraw()\nroot.protocol('WM_DELETE_WINDOW', _destroyWindow)   \n#--------------------------------------------------------------\ncanvas = FigureCanvasTkAgg(fig, master=root)\ncanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)\n#--------------------------------------------------------------\nroot.update()\nroot.deiconify()\nroot.mainloop()\n```", "```py\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport tkinter as tk\n#--------------------------------------------------------------\nfig = Figure(figsize=(12, 5), facecolor='white')\n#--------------------------------------------------------------\naxis  = fig.add_subplot(111)                  # 1 row, 1 column\n\nxValues  = [1,2,3,4]\n\nyValues0 = [6,7.5,8,7.5]\nyValues1 = [5.5,6.5,8,6]\nyValues2 = [6.5,7,8,7]\n\nt0, = axis.plot(xValues, yValues0)\nt1, = axis.plot(xValues, yValues1)\nt2, = axis.plot(xValues, yValues2)\n\naxis.set_ylabel('Vertical Label')\naxis.set_xlabel('Horizontal Label')\n\naxis.grid()\n\nfig.legend((t0, t1, t2), ('First line', 'Second line', 'Third line'), 'upper right')\n\n#--------------------------------------------------------------\ndef _destroyWindow():\n    root.quit()\n    root.destroy() \n#--------------------------------------------------------------\nroot = tk.Tk() \nroot.withdraw()\nroot.protocol('WM_DELETE_WINDOW', _destroyWindow)\n#--------------------------------------------------------------\ncanvas = FigureCanvasTkAgg(fig, master=root)\ncanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)\n#--------------------------------------------------------------\nroot.update()\nroot.deiconify()\nroot.mainloop()\n```", "```py\nt0, = axis.plot(xValues, yValues0, color = 'purple')\nt1, = axis.plot(xValues, yValues1, color = 'red')\nt2, = axis.plot(xValues, yValues2, color = 'blue')\n```", "```py\naxis  = fig.add_subplot(111)        # 1 row, 1 column\n\nxValues  = [1,2,3,4]\n\nyValues0 = [6,7.5,8,7.5]\nyValues1 = [5.5,6.5,50,6]           # one very high value\nyValues2 = [6.5,7,8,7]\n```", "```py\nyValues0 = [6,7.5,8,7.5]\nyValues1 = [5.5,6.5,50,6]           # one very high value (50)\nyValues2 = [6.5,7,8,7]\n\naxis.set_ylim(5, 8)                 # limit the vertical display\n```", "```py\nxValues  = [1,2,3,4]\n\nyValues0 = [6,7.5,8,7.5]\nyValues1 = [5.5,6.5,50,6]           # one very high value (50)\nyValues2 = [6.5,7,8,7]              \n\naxis.set_ylim(0, 8)                 # lower limit (0)\naxis.set_xlim(0, 8)                 # use same limits for x\n```", "```py\nxValues  = [1,2,3,4]\n\nyValues0 = [6,7.5,8,7.5]\nyValues1 = [5.5,6.5,50,6]              # one very high value (50)\nyValues2 = [6.5,7,8,7]              \nyAll = [yValues0, yValues1, yValues2]  # list of lists\n\n# flatten list of lists retrieving minimum value\nminY = min([y for yValues in yAll for y in yValues])\n\nyUpperLimit = 20\n# flatten list of lists retrieving max value within defined limit\nmaxY = max([y for yValues in yAll for y in yValues if y < yUpperLimit])\n\n# dynamic limits\naxis.set_ylim(minY, maxY)                 \naxis.set_xlim(min(xValues), max(xValues))                \n\nt0, = axis.plot(xValues, yValues0)\nt1, = axis.plot(xValues, yValues1)\nt2, = axis.plot(xValues, yValues2)\n```", "```py\nyValues0 = [6,7.5,8,7.5]\nyValues1 = [5.5,6.5,50,6]              # one very high value (50)\nyValues2 = [6.5,7,8,7]              \nyAll = [yValues0, yValues1, yValues2]  # list of lists\n```", "```py\n# flatten list of lists retrieving minimum value\nminY = min([y for yValues in yAll for y in yValues])\n```", "```py\nyUpperLimit = 20\n# flatten list of lists retrieving max value within defined limit\nmaxY = max([y for yValues in yAll for y in yValues if y < yUpperLimit])\n```"]