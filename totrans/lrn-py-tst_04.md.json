["```py\n$ python3.4\nPython 3.4.0 (default, Apr  2 2014, 08:10:08)\n[GCC 4.8.2] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from unittest.mock import Mock, call\n>>> mock = Mock()\n>>> mock.x\n<Mock name='mock.x' id='140145643647832'>\n>>> mock.x\n<Mock name='mock.x' id='140145643647832'>\n>>> mock.x('Foo', 3, 14)\n<Mock name='mock.x()' id='140145643690640'>\n>>> mock.x('Foo', 3, 14)\n<Mock name='mock.x()' id='140145643690640'>\n>>> mock.x('Foo', 99, 12)\n<Mock name='mock.x()' id='140145643690640'>\n>>> mock.y(mock.x('Foo', 1, 1))\n<Mock name='mock.y()' id='140145643534320'>\n>>> mock.method_calls\n[call.x('Foo', 3, 14),\n call.x('Foo', 3, 14),\n call.x('Foo', 99, 12),\n call.x('Foo', 1, 1),\n call.y(<Mock name='mock.x()' id='140145643690640'>)]\n>>> mock.assert_has_calls([call.x('Foo', 1, 1)])\n>>> mock.assert_has_calls([call.x('Foo', 1, 1), call.x('Foo', 99, 12)])\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 792, in assert_has_calls\n ) from cause\nAssertionError: Calls not found.\nExpected: [call.x('Foo', 1, 1), call.x('Foo', 99, 12)]\nActual: [call.x('Foo', 3, 14),\n call.x('Foo', 3, 14),\n call.x('Foo', 99, 12),\n call.x('Foo', 1, 1),\n call.y(<Mock name='mock.x()' id='140145643690640'>)]\n>>> mock.assert_has_calls([call.x('Foo', 1, 1),...                        call.x('Foo', 99, 12)], any_order = True)\n>>> mock.assert_has_calls([call.y(mock.x.return_value)])\n>>>\n```", "```py\n>>> mock.z.hello(23).stuff.howdy('a', 'b', 'c')\n<Mock name='mock.z.hello().stuff.howdy()' id='140145643535328'>\n>>> mock.assert_has_calls([\n...     call.z.hello().stuff.howdy('a', 'b', 'c')\n... ])\n>>>\n```", "```py\n>>> mock.mock_calls.index(call.z.hello(23))\n6\n>>> mock.mock_calls.index(call.z.hello().stuff.howdy('a', 'b', 'c'))\n7\n```", "```py\n>>> mock.q = 5\n>>> mock.q\n5\n```", "```py\n>>> del mock.w\n>>> mock.w\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 563, in __getattr__\n raise AttributeError(name)\nAttributeError: w\n```", "```py\n>>> mock.o.return_value = 'Hi'\n>>> mock.o()\n'Hi'\n>>> mock.o('Howdy')\n'Hi'\n```", "```py\n>>> mock.p.side_effect = [1, 2, 3]\n>>> mock.p()\n1\n>>> mock.p()\n2\n>>> mock.p()\n3\n>>> mock.p()\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 885, in __call__\n return _mock_self._mock_call(*args, **kwargs)\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 944, in _mock_call\n result = next(effect)\nStopIteration\n```", "```py\n>>> mock.p.side_effect = itertools.count()\n```", "```py\n>>> mock.e.side_effect = [1, ValueError('x')]\n>>> mock.e()\n1\n>>> mock.e()\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 885, in __call__\n return _mock_self._mock_call(*args, **kwargs)\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 946, in _mock_call\n raise result\nValueError: x\n```", "```py\n>>> from unittest.mock import create_autospec\n>>> x = Exception('Bad', 'Wolf')\n>>> y = create_autospec(x)\n>>> isinstance(y, Exception)\nTrue\n>>> y\n<NonCallableMagicMock spec='Exception' id='140440961099088'>\n```", "```py\n>>> from unittest.mock import MagicMock\n>>> mock = MagicMock()\n>>> 7 in mock\nFalse\n>>> mock.mock_calls\n[call.__contains__(7)]\n>>> mock.__contains__.return_value = True\n>>> 8 in mock\nTrue\n>>> mock.mock_calls\n[call.__contains__(7), call.__contains__(8)]\n```", "```py\n>>> mock + 5\n<MagicMock name='mock.__add__()' id='140017311217816'>\n>>> mock.mock_calls\n[call.__contains__(7), call.__contains__(8), call.__add__(5)]\n```", "```py\n>>> mock += 10\n>>> mock.mock_calls\n[]\n```", "```py\n>>> mock = MagicMock()\n>>> x = mock\n>>> x += 5\n>>> x\n<MagicMock name='mock.__iadd__()' id='139845830142216'>\n>>> x += 10\n>>> x\n<MagicMock name='mock.__iadd__().__iadd__()' id='139845830154168'>\n>>> mock.mock_calls\n[call.__iadd__(5), call.__iadd__().__iadd__(10)]\n```", "```py\n>>> from unittest.mock import PropertyMock\n>>> mock = Mock()\n>>> prop = PropertyMock()\n>>> type(mock).p = prop\n>>> mock.p\n<MagicMock name='mock()' id='139845830215328'>\n>>> mock.mock_calls\n[]\n>>> prop.mock_calls\n[call()]\n>>> mock.p = 6\n>>> prop.mock_calls\n[call(), call(6)]\n```", "```py\n>>> type(Mock()) is type(Mock())\nFalse\n```", "```py\n>>> from unittest.mock import mock_open\n>>> open = mock_open(read_data = 'moose')\n>>> with open('/fake/file/path.txt', 'r') as f:\n...   print(f.read())\n...\nmoose\n```", "```py\n>>> from unittest.mock import patch, mock_open\n>>> with patch('builtins.open', mock_open(read_data = 'moose')) as mock:\n...    with open('/fake/file.txt', 'r') as f:\n...       print(f.read())\n...\nmoose\n>>> open\n<built-in function open>\n```", "```py\n>>> import io\n>>> with patch('io.BytesIO'):\n...    x = io.BytesIO(b'ascii data')\n...    io.BytesIO.mock_calls\n[call(b'ascii data')]\n```", "```py\n>>> with patch('io.BytesIO', autospec = True):\n...    io.BytesIO.melvin\nTraceback (most recent call last):\n File \"<stdin>\", line 2, in <module>\n File \"/usr/lib64/python3.4/unittest/mock.py\", line 557, in __getattr__\n raise AttributeError(\"Mock object has no attribute %r\" % name)\nAttributeError: Mock object has no attribute 'melvin'\n```", "```py\n>>> from unittest.mock import Mock, patch\n>>> with patch('time.time', Mock(side_effect = [1.0, 2.0, 3.0, 4.0, 5.0])):\n...    import pid\n...    controller = pid.PID(P = 0.5, I = 0.5, D = 0.5, setpoint = 0,\n...                         initial = 12)\n...    assert controller.gains == (0.5, 0.5, 0.5)\n...    assert controller.setpoint == [0.0]\n...    assert controller.previous_time == 1.0\n...    assert controller.previous_error == -12.0\n...    assert controller.integrated_error == 0.0\n```", "```py\n>>> with patch('time.time', Mock(side_effect = [2.0, 3.0, 4.0, 5.0])):\n...    pid = imp.reload(pid)\n...    mock = Mock()\n...    mock.gains = (0.5, 0.5, 0.5)\n...    mock.setpoint = [0.0]\n...    mock.previous_time = 1.0\n...    mock.previous_error = -12.0\n...    mock.integrated_error = 0.0\n...    assert pid.PID.calculate_response(mock, 6) == -3.0\n...    assert pid.PID.calculate_response(mock, 3) == -4.5\n...    assert pid.PID.calculate_response(mock, -1.5) == -0.75\n...    assert pid.PID.calculate_response(mock, -2.25) == -1.125\n```"]