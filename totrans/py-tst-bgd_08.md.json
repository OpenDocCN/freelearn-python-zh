["```py\n$ python setup.py install\n\n```", "```py\n$ python setup.py install --user\n\n```", "```py\n    $ twill-sh\n\n    ```", "```py\n    >> help\n\n    ```", "```py\n    >> go http://slashdot.org/\n\n    ```", "```py\n    >> code 200\n\n    ```", "```py\n\n    >> follow Science\n    >> code 200\n\n    ```", "```py\n    >> formvalue 2 1 \"monkey\"\n\n    ```", "```py\n    >> formvalue 2 fhfilter \"aardvark\"\n\n    ```", "```py\n    >> submit\n\n    ```", "```py\n    >> code 200\n\n    ```", "```py\n\n    >> find aardvark\n    >> find Elephant\n\n    ```", "```py\n    code 200\n    follow Science\n    code 200\n    formvalue 2 fhfilter \"aardvark\"\n    submit\n    code 200\n    find aardvark\n    ```", "```py\n    $ twill-sh -u http://slashdot.org/ slashdot.twill\n\n    ```", "```py\n    $ \n\n    twill-sh -u http://espn.com/ slashdot.twill\n\n    ```", "```py\n>> help add_auth\n\n```", "```py\n>> setglobal target http://www.example.org/ \n\n```", "```py\n>> go target\n\n```", "```py\n>> go \"${target}/example.html\"\n\n```", "```py\n>> add_auth example http://example.com/ testuser 12345\n\n```", "```py\n>> add_extra_header moose 12\n>> add_extra_header moose 15\n\n```", "```py\n\n>> help config\n\n```", "```py\n>> debug http 1\n\n```", "```py\n>> debug equiv-refresh 1\n\n```", "```py\n<form name=\"form1\" method=\"post\">\n```", "```py\n>> formaction form1 http://example.com/viewer \n\n```", "```py\n<form name=\"form1\" method=\"post\" action=\"http://example.com/viewer\">\n```", "```py\n    go http://slashdot.org/\n    find this_does_not_exist\n    ```", "```py\n    $ twill-sh fail.twill\n\n    ```", "```py\n    >>> from twill.parse import execute_file\n    >>> execute_file('fail.twill')\n\n    ```", "```py\n    >>> from twill.parse import execute_string\n    >>> execute_string(\"\"\"\n    ... go http://slashdot.org/\n    ... find this_does_not_exist\n    ... \"\"\", no_reset = False)\n\n    ```", "```py\nfrom twill.parse import execute_string\nfrom twill.errors import TwillAssertionError\n\ndef twill_test(func):\n    def run_test(*args):\n        try:\n            execute_string(func.__doc__, no_reset = False)\n        except TwillAssertionError, err:\n            if args and hasattr(args[0], 'fail'):\n                args[0].fail(str(err))\n            else:\n                raise\n    return run_test\n```", "```py\nfrom unittest import TestCase\nfrom twill_decorator import twill_test\n\nclass web_tests(TestCase):\n    @twill_test\n    def test_slashdot(self):\n        \"\"\"\n        go http://slashdot.org/ \n        find this_does_not_exist\n        \"\"\"\n```", "```py\n    from unittest import TestCase\n    import twill\n\n    class test_twill_browser(TestCase):\n        def test_slashdot(self):\n            browser = twill.get_browser()\n\n            browser.go('http://slashdot.org/')\n            self.assertTrue(browser.get_code() in (200, 201))\n\n            html = browser.get_html()\n            self.assertTrue(html.count('slashdot') > 150)\n\n            link = browser.find_link('Science')\n            browser.follow_link(link)\n\n            form = browser.get_form(2)\n            form.set_value('aardvark', name = 'fhfilter')\n            browser.clicked(form, None)\n            browser.submit()\n            self.assertEqual(browser.get_code(), 200)\n    ```"]