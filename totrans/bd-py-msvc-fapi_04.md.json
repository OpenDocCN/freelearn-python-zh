["```py\nfrom fastapi import FastAPI\nlibrary_app = FastAPI()\nlibrary_app.include_router(admin.router)\nlibrary_app.include_router(management.router)\n```", "```py\nfrom fastapi import FastAPI\nstudent_app = FastAPI()\nstudent_app.include_router(reservations.router)\nstudent_app.include_router(admin.router)\nstudent_app.include_router(assignments.router)\nstudent_app.include_router(books.router)\n```", "```py\nfrom fastapi import FastAPI\nfaculty_app = FastAPI()\nfaculty_app.include_router(admin.router)\nfaculty_app.include_router(assignments.router)\nfaculty_app.include_router(books.router)\n```", "```py\nfrom fastapi import FastAPI\nfrom student_mgt import student_main\nfrom faculty_mgt import faculty_main\nfrom library_mgt import library_main\napp = FastAPI()\napp.mount(\"/ch04/student\", student_main.student_app)\napp.mount(\"/ch04/faculty\", faculty_main.faculty_app)\napp.mount(\"/ch04/library\", library_main.library_app)\n```", "```py\nfrom fastapi import APIRouter\nrouter = APIRouter()\n@router.get(\"/university/{portal_id}\")\ndef access_portal(portal_id:int): \n    return {'message': 'University ERP Systems'}\n```", "```py\ndef call_api_gateway(request: Request): \n    portal_id = request.path_params['portal_id']\n    print(request.path_params)\n    if portal_id == str(1): \n        raise RedirectStudentPortalException() \n    elif portal_id == str(2): \n        raise RedirectFacultyPortalException() \n    elif portal_id == str(3): \n        raise RedirectLibraryPortalException()\nclass RedirectStudentPortalException(Exception):\n    pass\nclass RedirectFacultyPortalException(Exception):\n    pass\nclass RedirectLibraryPortalException(Exception):\n    pass\n```", "```py\nfrom fastapi import FastAPI, Depends, Request, Response\nfrom gateway.api_router import call_api_gateway\nfrom controller import university\napp = FastAPI()\napp.include_router (university.router, \n           dependencies=[Depends(call_api_gateway)], \n           prefix='/ch04')\n```", "```py\nfrom fastapi.responses import RedirectResponse\nfrom gateway.api_router import call_api_gateway, \n     RedirectStudentPortalException, \n     RedirectFacultyPortalException, \n     RedirectLibraryPortalException\n@app.exception_handler(RedirectStudentPortalException)\ndef exception_handler_student(request: Request, \n   exc: RedirectStudentPortalException) -> Response:\n    return RedirectResponse(\n        url='http://localhost:8000/ch04/student/index')\n@app.exception_handler(RedirectFacultyPortalException)\ndef exception_handler_faculty(request: Request, \n   exc: RedirectFacultyPortalException) -> Response:\n    return RedirectResponse(\n       url='http://localhost:8000/ch04/faculty/index')\n@app.exception_handler(RedirectLibraryPortalException)\ndef exception_handler_library(request: Request, \n   exc: RedirectLibraryPortalException) -> Response:\n    return RedirectResponse(\n       url='http://localhost:8000/ch04/library/index')\n```", "```py\n2021-11-08 01:17:22,336 - uvicorn.error - ERROR - Exception in ASGI application\nTraceback (most recent call last):\n  File \"c:\\alibata\\development\\language\\python\\\n  python38\\lib\\site-packages\\uvicorn\\protocols\\http\\\n  httptools_impl.py\", line 371, in run_asgi\n    result = await app(self.scope, self.receive, self.send)\n  File \"c:\\alibata\\development\\language\\python\\\n  python38\\lib\\site-packages\\uvicorn\\middleware\\\n  proxy_headers.py\", line 59, in __call__\n    return await self.app(scope, receive, send)\n```", "```py\npip install loguru\n```", "```py\nfrom loguru import logger\nfrom uuid import uuid4\napp = FastAPI()\napp.include_router (university.router, \n         dependencies=[Depends(call_api_gateway)], \n         prefix='/ch04')\nlogger.add(\"info.log\",format=\"Log: [{extra[log_id]}: \n{time} - {level} - {message} \", level=\"INFO\", \n   enqueue = True)\n```", "```py\n@app.middleware(\"http\")\nasync def log_middleware(request:Request, call_next):\n    log_id = str(uuid4())\n    with logger.contextualize(log_id=log_id):\n        logger.info('Request to access ' + \n             request.url.path)\n        try:\n            response = await call_next(request)\n        except Exception as ex: \n            logger.error(f\"Request to \" + \n              request.url.path + \" failed: {ex}\")\n            response = JSONResponse(content=\n               {\"success\": False}, status_code=500)\n        finally: \n            logger.info('Successfully accessed ' + \n               request.url.path)\n            return response\n```", "```py\nLog: [1e320914-d166-4f5e-a39b-09723e04400d: 2021-11-28T12:02:25.582056+0800 - INFO - Request to access /ch04/university/1 \nLog: [1e320914-d166-4f5e-a39b-09723e04400d: 2021-11-28T12:02:25.597036+0800 - INFO - Successfully accessed /ch04/university/1 \nLog: [fd3badeb-8d38-4aec-b2cb-017da853e3db: 2021-11-28T12:02:25.609162+0800 - INFO - Request to access /ch04/student/index \nLog: [fd3badeb-8d38-4aec-b2cb-017da853e3db: 2021-11-28T12:02:25.617177+0800 - INFO - Successfully accessed /ch04/student/index \nLog: [4cdb1a46-59c8-4762-8b4b-291041a95788: 2021-11-28T12:03:25.187495+0800 - INFO - Request to access /ch04/student/profile/add \nLog: [4cdb1a46-59c8-4762-8b4b-291041a95788: 2021-11-28T12:03:25.203421+0800 - \nINFO - Request to access /ch04/faculty/index \nLog: [5cde7503-cb5e-4bda-aebe-4103b2894ffe: 2021-11-28T12:03:33.432919+0800 - INFO - Successfully accessed /ch04/faculty/index \nLog: [7d237742-fdac-4f4f-9604-ce49d3c4c3a7: 2021-11-28T12:04:46.126516+0800 - INFO - Request to access /ch04/faculty/books/request/list \nLog: [3a496d87-566c-477b-898c-8191ed6adc05: 2021-11-28T12:04:48.212197+0800 - INFO - Request to access /ch04/library/book/request/list \nLog: [3a496d87-566c-477b-898c-8191ed6adc05: 2021-11-28T12:04:48.221832+0800 - INFO - Successfully accessed /ch04/library/book/request/list \nLog: [7d237742-fdac-4f4f-9604-ce49d3c4c3a7: 2021-11-28T12:04:48.239817+0800 - \nLog: [c72f4287-f269-4b21-a96e-f8891e0a4a51: 2021-11-28T12:05:28.987578+0800 - INFO - Request to access /ch04/library/book/add \nLog: [c72f4287-f269-4b21-a96e-f8891e0a4a51: 2021-11-28T12:05:28.996538+0800 - INFO - Successfully accessed /ch04/library/book/add\n```", "```py\npip install httpx\n```", "```py\nimport httpx\n@router.get('/assignments/list')\nasync def list_assignments(): \n   async with httpx.AsyncClient() as client:\n    response = await client.get(\n     \"http://localhost:8000/ch04/faculty/assignments/list\")\n    return response.json()\n@router.post('/assignment/submit')\ndef submit_assignment(assignment:AssignmentRequest ):\n   with httpx.Client() as client:\n      response = client.post(\"http://localhost:8000/\n          ch04/faculty/assignments/student/submit\",  \n           data=json.dumps(jsonable_encoder(assignment)))\n      return response.content\n```", "```py\npip install requests\n```", "```py\n@router.get('/books/request/list')\ndef list_all_request(): \n    with requests.Session() as sess:\n        response = sess.get('http://localhost:8000/\n           ch04/library/book/request/list')\n        return response.json()\n@router.post('/books/request/borrow')\ndef request_borrow_book(request:BookRequestReq): \n    with requests.Session() as sess:\n        response = sess.post('http://localhost:8000/\n           ch04/library/book/request', \n             data=dumps(jsonable_encoder(request)))\n        return response.content\n@router.get('/books/issuance/list')\ndef list_all_issuance(): \n    with requests.Session() as sess:\n        response = sess.get('http://localhost:8000/\n            ch04/library/book/issuance/list')\n        return response.json()\n@router.post('/books/returning')\ndef return_book(returning: BookReturnReq): \n    with requests.Session() as sess:\n        response = sess.post('http://localhost:8000/\n            ch04/library/book/issuance/return', \n              data=dumps(jsonable_encoder(returning)))\n        return response.json()\n```", "```py\nclass Assignment: \n    def __init__(self, assgn_id:int, title:str, \n        date_due:datetime, course:str):\n        self.assgn_id:int = assgn_id \n        self.title:str = title \n        self.date_completed:datetime = None\n        self.date_due:datetime = date_due\n        self.rating:float = 0.0 \n        self.course:str = course\n\n    def __repr__(self): \n      return ' '.join([str(self.assgn_id), self.title,\n        self.date_completed.strftime(\"%m/%d/%Y, %H:%M:%S\"),\n        self.date_due.strftime(\"%m/%d/%Y, %H:%M:%S\"), \n        str(self.rating) ])\n    def __expr__(self): \n      return ' '.join([str(self.assgn_id), self.title, \n       self.date_completed.strftime(\"%m/%d/%Y, %H:%M:%S\"), \n       self.date_due.strftime(\"%m/%d/%Y, %H:%M:%S\"), \n        str(self.rating) ])\nclass StudentBin: \n    def __init__(self, bin_id:int, stud_id:int, \n      faculty_id:int): \n        self.bin_id:int = bin_id \n        self.stud_id:int = stud_id \n        self.faculty_id:int = faculty_id \n        self.assignment:List[Assignment] = list()\n\n    def __repr__(self): \n        return ' '.join([str(self.bin_id), \n         str(self.stud_id), str(self.faculty_id)])\n    def __expr__(self): \n        return ' '.join([str(self.bin_id), \n         str(self.stud_id), str(self.faculty_id)])\n```", "```py\nclass SignupReq(BaseModel):     \n    faculty_id:int\n    username:str\n    password:str\nclass FacultyReq(BaseModel): \n    faculty_id:int\n    fname:str\n    lname:str\n    mname:str\n    age:int\n    major:Major\n    department:str\nclass FacultyDetails(BaseModel): \n    fname:Optional[str] = None\n    lname:Optional[str] = None\n    mname:Optional[str] = None\n    age:Optional[int] = None\n    major:Optional[Major] = None\n    department:Optional[str] = None\n```", "```py\nfrom fastapi.encoders import jsonable_encoder\nfrom typing import List, Dict, Any\nfrom faculty_mgt.models.data.facultydb import \n     faculty_assignments_tbl\nfrom faculty_mgt.models.data.faculty import Assignment\nfrom collections import namedtuple\nclass AssignmentRepository: \n\n    def insert_assignment(self, \n           assignment:Assignment) -> bool: \n        try:\n            faculty_assignments_tbl[assignment.assgn_id] = \n                assignment\n        except: \n            return False \n        return True\n\n    def update_assignment(self, assgn_id:int, \n           details:Dict[str, Any]) -> bool: \n       try:\n           assignment = faculty_assignments_tbl[assgn_id]\n           assignment_enc = jsonable_encoder(assignment)\n           assignment_dict = dict(assignment_enc)\n           assignment_dict.update(details)         \n           faculty_assignments_tbl[assgn_id] =   \t \t \t           Assignment(**assignment_dict)\n       except: \n           return False \n       return True\n\n    def delete_assignment(self, assgn_id:int) -> bool: \n        try:\n            del faculty_assignments_tbl[assgn_id] \n        except: \n            return False \n        return True\n\n    def get_all_assignment(self):\n        return faculty_assignments_tbl \n```", "```py\nfrom typing import List, Dict , Any\nfrom faculty_mgt.repository.assignments import  \n            AssignmentSubmissionRepository\nfrom faculty_mgt.models.data.faculty import Assignment\nfrom uuid import uuid4\nclass AssignmentSubmissionService: \n\n    def __init__(self): \n        self.repo:AssignmentSubmissionRepository = \n            AssignmentSubmissionRepository()\n\n    def create_workbin(self, stud_id:int, faculty_id:int): \n        bin_id = uuid4().int\n        result = self.repo.create_bin(stud_id, bin_id, \n                     faculty_id )\n        return (result, bin_id)\n\n    def add_assigment(self, bin_id:int, \n                   assignment: Assignment): \n        result = self.repo.insert_submission(bin_id, \n                     assignment ) \n        return result\n\n    def remove_assignment(self, bin_id:int, \n                   assignment: Assignment): \n        result = self.repo.insert_submission(bin_id, \n                      assignment )\n        return result\n    def list_assignments(self, bin_id:int): \n        return self.repo.get_submissions(bin_id)\n```", "```py\npip install python-dotenv\n```", "```py\nfrom pydantic import BaseSettings\nfrom datetime import date\nclass FacultySettings(BaseSettings): \n    application:str = 'Faculty Management System' \n    webmaster:str = 'sjctrags@university.com'\n    created:date = '2021-11-10'\nclass LibrarySettings(BaseSettings): \n    application:str = 'Library Management System' \n    webmaster:str = 'sjctrags@university.com'\n    created:date = '2021-11-10' \nclass StudentSettings(BaseSettings): \n    application:str = 'Student Management System' \n    webmaster:str = 'sjctrags@university.com'\n    created:date = '2021-11-10'\n```", "```py\nfrom configuration.config import StudentSettings\nstudent_app = FastAPI()\nstudent_app.include_router(reservations.router)\nstudent_app.include_router(admin.router)\nstudent_app.include_router(assignments.router)\nstudent_app.include_router(books.router)\ndef build_config(): \n    return StudentSettings()\n@student_app.get('/index')\ndef index_student(\n   config:StudentSettings = Depends(build_config)): \n    return {\n        'project_name': config.application,\n        'webmaster': config.webmaster,\n        'created': config.created\n      }\n```", "```py\nproduction_server = prodserver100\nprod_port = 9000\ndevelopment_server = devserver200\ndev_port = 10000\n```", "```py\nimport os\nclass ServerSettings(BaseSettings): \n    production_server:str\n    prod_port:int\n    development_server:str \n    dev_port:int\n\n    class Config: \n        env_file = os.getcwd() + \n           '/configuration/erp_settings.properties'\n```", "```py\nfrom fastapi import FastAPI, Depends\nfrom configuration.config import StudentSettings, \n      ServerSettings\nstudent_app = FastAPI()\nstudent_app.include_router(reservations.router)\nstudent_app.include_router(admin.router)\nstudent_app.include_router(assignments.router)\nstudent_app.include_router(books.router)\ndef build_config(): \n    return StudentSettings()\ndef fetch_config():\n    return ServerSettings()\n@student_app.get('/index')\ndef index_student(\n     config:StudentSettings = Depends(build_config), \n     fconfig:ServerSettings = Depends(fetch_config)): \n    return {\n        'project_name': config.application,\n        'webmaster': config.webmaster,\n        'created': config.created,\n        'development_server' : fconfig.development_server,\n        'dev_port': fconfig.dev_port\n      }\n```"]