- en: Chapter 1. Introduction to PTVS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章。PTVS 简介
- en: 'Python Tools in Visual Studio (PTVS) is an extremely powerful tool because
    of the following reasons:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python Tools in Visual Studio (PTVS) 是一款功能极其强大的工具，以下是一些原因：
- en: It gives Python developers a powerful IDE with many helpful coding features
    and integrations in one unique environment.
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为 Python 开发者提供了一个强大的 IDE，在一个独特的环境中集成了许多有用的编码功能和集成。
- en: PTVS provides developers on the Windows platform the opportunity to use their
    favorite IDE—Visual Studio—to explore, learn, and manage one of the most commonly
    used scripting languages.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PTVS 为 Windows 平台上的开发者提供了使用他们最喜欢的 IDE——Visual Studio——来探索、学习和管理最常用的脚本语言之一的机会。
- en: In this chapter, we will have a high-level overview of PTVS, starting with a
    step-by-step tutorial for installing and configuring it correctly followed by
    a quick overview of the principle tools of Visual Studio to control the Python
    environment and configuration. Understanding the Visual Studio windows will greatly
    benefit your ability to explore and manage workflows of the source code and the
    structure of your Python project.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将对 PTVS 进行高级概述，从安装和配置的逐步教程开始，然后快速概述控制 Python 环境和配置的 Visual Studio 的主要工具。理解
    Visual Studio 窗口将大大提高你探索和管理源代码工作流以及你的 Python 项目的结构的能力。
- en: Step-by-step installation and configuration
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 逐步安装和配置
- en: There are various formats of PTVS available for installation depending on your
    preexisting installed version of Visual Studio. PTVS is available for Visual Studio
    2010, 2012, and 2013 (Pro edition or above).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你预先安装的 Visual Studio 版本，PTVS 提供了各种安装格式。PTVS 可用于 Visual Studio 2010、2012 和
    2013（专业版或以上）。
- en: If the previously mentioned versions of Visual Studio are not installed on your
    computer, it's possible to install a standalone version of PTVS. Visual Studio
    permits side-by-side installation, meaning it provides the ability to install
    multiple versions on one system. The only prerequisite is that the older version
    must be installed before the newer one.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果之前提到的 Visual Studio 版本没有安装在你的计算机上，你可以安装一个独立的 PTVS 版本。Visual Studio 允许并行安装，这意味着它提供了在一个系统上安装多个版本的能力。唯一的前提是，旧版本必须在安装新版本之前安装。
- en: The different types of installations possible for PTVS are described on its
    **CodePlex** website, [http://go.microsoft.com/fwlink/?LinkID=390659](http://go.microsoft.com/fwlink/?LinkID=390659).
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: PTVS 的不同安装类型在其 **CodePlex** 网站上进行了描述，[http://go.microsoft.com/fwlink/?LinkID=390659](http://go.microsoft.com/fwlink/?LinkID=390659)。
- en: '![Step-by-step installation and configuration](img/8687OS_01_01.jpg)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![逐步安装和配置](img/8687OS_01_01.jpg)'
- en: The preceding figure is taken from [http://go.microsoft.com/fwlink/?LinkID=390659](http://go.microsoft.com/fwlink/?LinkID=390659).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图来自 [http://go.microsoft.com/fwlink/?LinkID=390659](http://go.microsoft.com/fwlink/?LinkID=390659)。
- en: The most important prerequisite for Visual Studio 2013 is to have Windows 7
    (32 or 64 bit) or above running as your operating system.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 2013 最重要的先决条件是操作系统运行 Windows 7（32 位或 64 位）或更高版本。
- en: Once you have sorted out the prerequisites and installed the PTVS package of
    your choice, you will need to decide on the type of Python interpreter. Choosing
    the appropriate Python interpreter depends on your need for your project. Refer
    to the PTVS CodePlex page at [http://go.microsoft.com/fwlink/?LinkID=299429](http://go.microsoft.com/fwlink/?LinkID=299429)
    to help your decision-making process. You can choose between CPython and IronPython
    (32 or 64 bit). If you chose CPython, then you can choose between Python Version
    2.7 and 3.3\. It is recommended to use CPython 3.3 32 bit for most cases. For
    web development, the recommendation would be CPython 2.7 32 bit.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你整理好了先决条件并安装了你选择的 PTVS 包，你将需要决定 Python 解释器的类型。选择合适的 Python 解释器取决于你的项目需求。请参考
    PTVS CodePlex 页面 [http://go.microsoft.com/fwlink/?LinkID=299429](http://go.microsoft.com/fwlink/?LinkID=299429)
    以帮助你的决策过程。你可以选择 CPython 和 IronPython（32 位或 64 位）。如果你选择了 CPython，那么你可以选择 Python
    2.7 或 3.3 版本。在大多数情况下，建议使用 CPython 3.3 32 位。对于 Web 开发，建议使用 CPython 2.7 32 位。
- en: Make your choice based on what you intend to do and the framework that you will
    be using with Python. For the scope of this book, we suggest to install the 32-bit
    CPython Version 2.7\. For the latest complete list of downloadable Python interpreters,
    please refer to the PTVS CodePlex page at [http://go.microsoft.com/fwlink/?LinkID=390659](http://go.microsoft.com/fwlink/?LinkID=390659).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的意图和将要与 Python 一起使用的框架进行选择。对于本书的范围，我们建议安装 32 位 CPython 版本 2.7。有关可下载的 Python
    解释器的最新完整列表，请参阅 PTVS CodePlex 页面 [http://go.microsoft.com/fwlink/?LinkID=390659](http://go.microsoft.com/fwlink/?LinkID=390659)。
- en: 'Once the interpreter is installed, you can fire up PTVS by opening the Visual
    Studio 2013 application from the **Start** menu. If everything works, this is
    what you are going to see on your screen:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了解释器，你可以通过从 **开始** 菜单打开 Visual Studio 2013 应用程序来启动 PTVS。如果一切正常，你将在屏幕上看到以下内容：
- en: '![Step-by-step installation and configuration](img/8687OS_01_02.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![逐步安装和配置步骤](img/8687OS_01_02.jpg)'
- en: 'Let''s check whether the whole system works properly. Create a new project
    and see if it runs as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查整个系统是否正常工作。创建一个新的项目并查看它是否如下运行：
- en: To create a new project, navigate to the **New Project** menu under **File**
    to launch the **New Project** dialog box.![Step-by-step installation and configuration](img/8687OS_01_03.jpg)
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建一个新的项目，导航到 **文件** 下的 **新建项目** 菜单以启动 **新建项目** 对话框。![逐步安装和配置步骤](img/8687OS_01_03.jpg)
- en: Select **Python Application** and click on **OK**. This will create a new project
    and a basic `Hello World` Python application file.![Step-by-step installation
    and configuration](img/8687OS_01_04.jpg)
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **Python 应用程序** 并点击 **确定**。这将创建一个新的项目和基本的 `Hello World` Python 应用程序文件。![逐步安装和配置步骤](img/8687OS_01_04.jpg)
- en: Start the app by clicking on the **Start** button in the toolbar, or just hit
    *F5*.![Step-by-step installation and configuration](img/8687OS_01_05.jpg)
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击工具栏中的 **开始** 按钮，或直接按 *F5* 来启动应用程序。![逐步安装和配置步骤](img/8687OS_01_05.jpg)
- en: If you have any previous installations of Python on your system, you should
    see the application response window with the **Hello World** message, as shown
    in the following screenshot:![Step-by-step installation and configuration](img/8687OS_01_06.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你系统上安装了任何先前的 Python，你应该会看到带有 **Hello World** 消息的应用程序响应窗口，如下面的截图所示：![逐步安装和配置步骤](img/8687OS_01_06.jpg)
- en: PTVS tools overview
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PTVS 工具概述
- en: 'Now that you have PTVS up and running, let''s take a closer look at the various
    tools provided by Visual Studio that empower the Python development cycle. Let''s
    start with the windows, which are accessible through the **View** menu:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经启动并运行了 PTVS，让我们更详细地看看 Visual Studio 提供的各种工具，这些工具能够增强 Python 开发周期。让我们从通过
    **视图** 菜单可访问的窗口开始：
- en: '![PTVS tools overview](img/8687OS_01_07.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![PTVS 工具概述](img/8687OS_01_07.jpg)'
- en: 'From the **View** menu, you can choose two windows that are more important
    for Python:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从 **视图** 菜单中，你可以选择两个对 Python 更重要的窗口：
- en: '**Python Environments**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 环境**'
- en: '**Python Interactive**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 交互式**'
- en: The Python Environments window
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 环境窗口
- en: The Python Environments window shows all the Python interpreters' versions (environments)
    installed on the system. For each of them, an interactive window called **read–eval–print
    loop** (**REPL**) can be accessed, and it's possible to see the status of the
    package analysis made on all the packages installed. This is used by Visual Studio
    to carry out syntax and type analyses of all the classes and methods available
    for a given Python environment.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python 环境窗口显示了系统上安装的所有 Python 解释器版本（环境）。对于每一个，都可以访问一个名为 **read–eval–print loop**
    （**REPL**）的交互式窗口，并且可以看到对所有已安装包进行的包分析状态。这被 Visual Studio 用于执行给定 Python 环境中所有类和方法的语法和类型分析。
- en: Since the analysis of Python code is complex, it's possible that you will not
    see progress in the **Completion DB** when you open it the first time. Even if
    Visual Studio performs background analysis to not interfere with the user experience
    of the IDE, the first analysis can take from one minute to an hour. This depends
    on different factors such as the number of installed libraries in the Python environment
    and the system resources available. Once the analysis of all the Python packages
    in Visual Studio is complete, the message **Completion DB is up to date** will
    be shown on the row of a given Python environment.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 代码的分析很复杂，所以在您第一次打开它时，您可能不会在**完成数据库**中看到进度。即使 Visual Studio 执行后台分析以不干扰
    IDE 的用户体验，第一次分析可能需要从一分钟到一小时不等。这取决于不同的因素，如 Python 环境中安装的库的数量和可用的系统资源。一旦 Visual
    Studio 中所有 Python 包的分析完成，给定 Python 环境的行上会显示消息**完成数据库是最新的**。
- en: The **Completion DB** is automatically updated every time we open a new project
    in PTVS or install a new Python library; in such cases, Visual Studio reruns the
    background analysis on the new reachable code.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**完成数据库**在每次我们在 PTVS 中打开新项目或安装新的 Python 库时自动更新；在这种情况下，Visual Studio 会重新运行新可访问代码的后台分析。'
- en: Sometimes, the automated background analysis process could be disabled or blocked,
    and the lists of installed libraries are not shown automatically. If the newly
    installed libraries and packages are not shown, we can manually trigger the analysis
    process with the **Refresh DB** button. By clicking on the button, we re-enable
    it, forcing a background analysis.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，自动的背景分析过程可能会被禁用或阻止，安装的库列表不会自动显示。如果新安装的库和包没有显示，我们可以通过点击**刷新数据库**按钮手动触发分析过程。通过点击按钮，我们重新启用它，强制进行后台分析。
- en: '![The Python Environments window](img/8687OS_01_08.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![Python 环境窗口](img/8687OS_01_08.jpg)'
- en: The Python Environments tool window with the list of installed Python environments
    and the tool buttons to access most used functions
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 带有已安装的 Python 环境列表和访问常用功能的工具按钮的 Python 环境工具窗口
- en: Clicking on the **View in File Explorer** link in the **Python Environments**
    window will provide you with direct access to the Python installation folder.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在**Python 环境**窗口中点击**在文件资源管理器中查看**链接将为您提供直接访问 Python 安装文件夹的权限。
- en: Python Interactive
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 交互式
- en: The Python Interactive window gives you access to the standard REPL tool for
    Python directly in the IDE along with the ability to access the modules that you
    are developing. This is a great and quick way to debug and test some code snippets.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Python 交互式窗口直接在 IDE 中为您提供访问 Python 标准交互式工具的能力，以及访问您正在开发的模块的能力。这是一种快速且有效的方法来调试和测试一些代码片段。
- en: '![Python Interactive](img/8687OS_01_09.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Python 交互式](img/8687OS_01_09.jpg)'
- en: The Python Interactive tool window from where you can access the Python standard
    REPL tool
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 从您可以直接访问 Python 标准交互式工具的 Python 交互式工具窗口
- en: Besides the normal Python commands available in the standard Python REPL, Microsoft
    has further added some commands that are reachable by the *$* (dollar) symbol.
    The list of available commands is available through `$help`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准 Python 交互式命令外，Microsoft 还添加了一些可以通过 *$*（美元符号）访问的命令。可用命令的列表可以通过 `$help` 获取。
- en: Visual Studio panels with PTVS
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 带有 PTVS 的 Visual Studio 面板
- en: 'Visual Studio offers lots of standard tool windows to control the structure
    and workflow of your application. The main tool windows are **Solution Explorer**,
    **Properties**, **Find Symbol Results**, and **Object Browser**, as shown in the
    following screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 提供了许多标准工具窗口来控制应用程序的结构和工作流程。主要工具窗口包括**解决方案资源管理器**、**属性**、**查找符号结果**和**对象浏览器**，如下面的截图所示：
- en: '![Visual Studio panels with PTVS](img/8687OS_01_10.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![带有 PTVS 的 Visual Studio 面板](img/8687OS_01_10.jpg)'
- en: To the right, we have the **Solution Explorer** window. It provides a glimpse
    of the structure of the current solution. In Visual Studio, a solution is a bundle
    of projects. In the **Solution Explorer** window, not only can you manage the
    different source files of the projects, but also configure the Python environment
    and the packages used in it (i.e. references and dependencies).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在右侧，我们有**解决方案资源管理器**窗口。它提供了当前解决方案结构的概览。在 Visual Studio 中，解决方案是一组项目的集合。在**解决方案资源管理器**窗口中，您不仅可以管理项目的不同源文件，还可以配置其中使用的
    Python 环境和包（即引用和依赖项）。
- en: Besides the file structure of the project, the **Solution Explorer** window
    also provides a class view, which shows an overview of all the classes and structures
    (i.e. fields, properties, and methods). This is a quick view of the more complex
    window, **Object Browser**, which is visible in the middle of the screenshot.
    This window is accessible through the **Object Browser** menu item under **View**
    (or using the *Ctrl* + *Alt* + *J* shortcut). The two tools together provide a
    manner to browse and navigate the object structure of your code.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 除了项目文件结构外，**解决方案资源管理器**窗口还提供了一个类视图，它显示了所有类和结构（即字段、属性和方法）的概览。这是对更复杂的窗口**对象浏览器**的快速查看，该窗口在截图中间可见。此窗口可通过**视图**下的**对象浏览器**菜单项访问（或使用*Ctrl*
    + *Alt* + *J* 快捷键）。这两个工具一起提供了一种浏览和导航代码对象结构的方法。
- en: Under the **Solution Explorer** window, we can find the **Properties** window
    that shows the properties related to various objects of your projects such as
    the single source code files in it. It also shows more detailed information, for
    example, the path, and how it has to be managed in the built system of the files.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在**解决方案资源管理器**窗口下，我们可以找到**属性**窗口，它显示了与项目中的各种对象相关的属性，例如其中的单个源代码文件。它还显示了更详细的信息，例如路径，以及它在文件构建系统中的管理方式。
- en: 'The most important and powerful window we have in PTVS is the source code window,
    which is where any programmer spends most of his/her time. It provides multitab
    source code navigation; every pane is a single source code file:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在PTVS中，我们拥有的最重要的、功能最强大的窗口是源代码窗口，这是任何程序员大部分时间都在的地方。它提供了多标签源代码导航；每个面板都是一个单独的源代码文件：
- en: '![Visual Studio panels with PTVS](img/8687OS_01_11.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![带有PTVS的Visual Studio面板](img/8687OS_01_11.jpg)'
- en: In each pane there are two comboboxes. The left one provides the function to
    navigate between classes in the file; the right one provides the function to navigate
    between methods of the selected class. In the source code window, Visual Studio
    unleashes much more powerful tools such as refactoring, IntelliSense, and code
    traversing, which we will explore in depth in the next chapters.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个面板中都有两个组合框。左侧的一个提供了在文件中导航到类之间的功能；右侧的一个提供了在所选类的方法之间导航的功能。在源代码窗口中，Visual Studio释放了更多强大的工具，如重构、IntelliSense和代码遍历，我们将在下一章中深入探讨。
- en: There are other windows that will become clearer during our exploration of PTVS
    in the coming chapters, such as the **Find Symbol Results** window at the bottom
    of the screenshot. That window shows the result of a search command or the list
    of references of a given code element, like a method, class, or property.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将在探索PTVS的过程中发现其他一些会变得更为清晰的窗口，例如截图底部的**查找符号结果**窗口。该窗口显示了搜索命令的结果或给定代码元素（如方法、类或属性）的引用列表。
- en: Summary
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced a quick high-level overview of PTVS and the basis
    of it. Now that you have PTVS up and running and have familiarized yourself with
    the two windows, you are ready to dive into PTVS with more detailed project knowledge
    in the following chapters.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了PTVS的快速高级概述及其基础。现在，你已经启动了PTVS并熟悉了这两个窗口，你就可以在接下来的章节中带着更详细的项目知识深入PTVS了。
- en: In the next chapter, we'll go in to more detail and start to analyze the coding
    tools that Visual Studio provides in PTVS that can tremendously help during the
    coding process and also manage Python projects.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更详细地介绍，并开始分析Visual Studio在PTVS中提供的编码工具，这些工具在编码过程中非常有帮助，并且可以管理Python项目。
