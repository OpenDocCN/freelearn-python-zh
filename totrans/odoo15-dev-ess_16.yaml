- en: '[*Chapter 15*](B16119_15_Final_PD_ePub.xhtml#_idTextAnchor410): Deploying and
    Maintaining Production Instances'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you'll learn the basics of preparing an Odoo server for use
    in a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up and maintaining servers is a non-trivial topic in itself and should
    be done by specialists. The information given here is not enough to ensure an
    average user can create a resilient and secure environment that hosts sensitive
    data and services.
  prefs: []
  type: TYPE_NORMAL
- en: The goal of this chapter is to introduce the most important configuration aspects
    and the best practices specific to Odoo deployments. This will help system administrators
    prepare their Odoo server hosts.
  prefs: []
  type: TYPE_NORMAL
- en: You will start by setting up the host system, and then you will install the
    Odoo prerequisites and Odoo itself. **Ubuntu** is a popular choice for cloud servers,
    and it will be used here. Then, the Odoo configuration file needs to be prepared.
    Until this point, the setup is similar to the one used for the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Next, Odoo needs to be configured as a system service so that it is automatically
    started when the server starts.
  prefs: []
  type: TYPE_NORMAL
- en: For servers hosted on a public cloud, Odoo should be served through **HTTPS**.
    For this, you will learn how to install and configure an **Nginx** reverse proxy
    by using a self-signed certificate.
  prefs: []
  type: TYPE_NORMAL
- en: The final section discusses how to perform server upgrades and prepare a staging
    environment that will allow us to perform dry-runs before the actual updates are
    applied.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics discussed in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the host system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Odoo from source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring Odoo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Odoo as a system service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up an Nginx reverse proxy
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring and enforcing HTTPS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintaining the Odoo service and modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be able to set up a reasonably secure Odoo
    server that is good enough for low-profile production use. However, the recipes
    given in this chapter aren't the only valid way to deploy Odoo – other approaches
    are also possible.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To follow this chapter, you will need a clean Ubuntu 20.04 server – for example,
    a **virtual private server** (**VPS**) hosted on the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: The code and scripts used in this chapter can be found in the `ch15/` directory
    of the **GitHub** repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials).
  prefs: []
  type: TYPE_NORMAL
- en: Preparing the host system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo is usually deployed on **Debian**-based **Linux** systems. Ubuntu is a
    popular choice, and the latest **long-term support** (**LTS**) version is 20.04
    **Focal Fossa**.
  prefs: []
  type: TYPE_NORMAL
- en: Other Linux distributions can also be used. The **CentOS**/**Red Hat Enterprise
    Linux** (**RHEL**) system is also popular in corporate circles.
  prefs: []
  type: TYPE_NORMAL
- en: The installation process requires elevated access, using the `root` superuser
    or the `sudo` command. When using a Debian distribution, the default login is
    `root`, which has administration access, and the command prompt shows `#`. On
    Ubuntu systems, the `root` account is disabled. Instead, the initial user is configured
    during the installation process and is a `sudo` command to elevate access and
    run commands with the `root` privileges.
  prefs: []
  type: TYPE_NORMAL
- en: Before starting the Odoo installation, the host system dependencies must be
    installed, and a specific user should be created to run the Odoo service.
  prefs: []
  type: TYPE_NORMAL
- en: The next section explains the required system dependencies on a Debian system.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the system dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When running Odoo from the source, some dependencies need to be installed in
    the system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting, it is a good practice to update the package index and then
    perform an upgrade to ensure that all installed programs are up to date, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, the **PostgreSQL** database can be installed. Our user should be made
    a database superuser so that they have administration access to the database.
    These are the commands for this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Odoo can use an existing PostgreSQL database, which is installed in its own
    server. If this is the case, the PostgreSQL service does not need to be installed
    in the Odoo server and the corresponding connection details should be set in the
    Odoo configuration file.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the Debian dependencies required to run Odoo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: To have report printing capabilities, `wkhtmltox` must be installed. The recommended
    version for Odoo 10 and later is 0.12.5-1\. The download links can be found at
    [https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5](https://github.com/wkhtmltopdf/wkhtmltopdf/releases/tag/0.12.5).
    The Ubuntu **code names** are **bionic** for version 18.04 and **focal** for version
    20.04.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands perform this installation for Ubuntu 20.04 Focal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The package installation may report missing dependencies errors. In this case,
    the last command will force the installation of those dependencies and correctly
    complete the installation.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will create a system user to be used for the Odoo processes.
  prefs: []
  type: TYPE_NORMAL
- en: Preparing a dedicated system user
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A good security practice is to run Odoo using a dedicated user, who has no special
    privileges on the host system.
  prefs: []
  type: TYPE_NORMAL
- en: 'A popular choice for this username is `odoo`. This is the command to create
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Linux system users can have a `home` directory. For the Odoo user, this is a
    convenient place to store the Odoo files. A popular choice for this is `/opt/odoo`.
    The `--home` option used automatically creates this directory and sets it as the
    `odoo` user home.
  prefs: []
  type: TYPE_NORMAL
- en: 'This user does not have access to the PostgreSQL database yet. The following
    commands add that access and create the database for it to initialize the Odoo
    production environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Here, `odoo` is the username and `odoo-prod` is the name of the database to
    support our Odoo instance. The `odoo` user was made the owner of the `odoo-prod`
    database. This means that it has *create and drop* privileges over that database,
    including the ability to drop it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: To run, Odoo does not require elevated privileges to the database being used.
    These may only be needed for some maintenance operations, such as installing or
    upgrading modules. So, for improved security, the Odoo system user can be a non-owner
    database user. Note that in this case, the maintenance should be done running
    Odoo with a different user than the owner of the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'To start a session with the Odoo system user, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This will be used to run installation steps as the Odoo user. When done, the
    `exit` command terminates that session and returns to the original user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will continue with the installation of the Odoo code
    and `/opt/odoo` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Odoo from source code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Odoo provides Debian/Ubuntu and CentOS/RHEL system packages, installing
    from source code is a popular option due to the flexibility and control it provides.
  prefs: []
  type: TYPE_NORMAL
- en: Using source code provides better control over what is deployed and makes it
    easier to manage changes and fixes once in production. For example, it allows
    us to tie the deployment process to a Git workflow.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the Odoo system dependencies are already installed, and the database
    is ready to use. Now, the Odoo source code can be downloaded and installed, along
    with the required Python dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how to download the Odoo source code.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the Odoo source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Sooner or later, your server will need upgrades and patches. A version control
    repository can be of great help when this time comes. We use `git` to get our
    code from a repository, just like we did when installing the development environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we''ll impersonate the `odoo` user and download the code into its home
    directory, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `-b` option ensures that we get the right branch, and the `--depth=1` option
    retrieves only the latest code revision, ignoring the (long) change history and
    making the download smaller and faster.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: '**Git** is an important tool to manage code versions of your Odoo deployments.
    If you''re not familiar with Git, it is worth learning more about it. A good starting
    point is [http://git-scm.com/doc](http://git-scm.com/doc).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Custom modules will usually also be managed with Git and should also be cloned
    to the production server. For example, the following code will add the library
    custom modules into the `/opt/odoo/odoo15/library` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The Odoo source code is available on the server, but it can't run yet because
    the required Python dependencies are not installed yet. Let's install these in
    the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Python dependencies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once the Odoo source code is downloaded, the Python packages required by Odoo
    should be installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of them also have Debian or Ubuntu system packages. The official Odoo
    installation package for Debian uses them, and the dependency package names can
    be found in the Odoo source code in the `debian/control` file: [https://github.com/odoo/odoo/blob/15.0/debian/control](https://github.com/odoo/odoo/blob/15.0/debian/control).'
  prefs: []
  type: TYPE_NORMAL
- en: These Python dependencies can also be installed directly from the **Python Package
    Index** (**PyPI**). Doing this using a Python **virtual environment** provides
    better protection from changes being made to the host system.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands create a virtual environment, activate it, and then
    install Odoo from source, along with all the required Python dependencies:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'And Odoo should be ready now. Any of the following commands can be used to
    confirm this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s understand these commands one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: The first command relies on the `odoo` command made available by `pip install
    -e /opt/odoo/odoo15`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second command does not rely on the `odoo` command, and it directly calls
    the Odoo start script, `/opt/odoo/odoo15/odoo-bin`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third command does not need the virtual environment to be activated beforehand,
    as it uses the corresponding Python executable directly, which has the same effect.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final command does the same in a more compact way. It uses directly the
    `odoo` command available in that virtual environment. This can be useful for some
    scripts.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Odoo is now ready to run. The next step is to take care of the configuration
    file to use, which we will explain in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Odoo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once Odoo is installed, the configuration file to be used by the production
    service needs to be prepared.
  prefs: []
  type: TYPE_NORMAL
- en: The next sub-section provides guidance on how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the configuration file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration files are expected to be in the `/etc` system directory. So, the
    Odoo production configuration file will be stored at `/etc/odoo/odoo.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: To make it easier to see all of the available options, a default configuration
    file can be generated. This should be done by the user that will run the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'If not done yet, create a session for the `odoo` user and activate the virtual
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the following command can be used to create a default configuration file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the previous command, the `-c` option sets the location of the configuration
    file. If not given, it defaults to `~/.odoorc`. The `--save` option writes the
    options to it. If the file does not exist, it will be created with all default
    options. If it already exists, it will be updated with the options used in the
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands set a few important options for it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'The options set are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-d`: This is the default database to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--db-filter`: This is a regular expression filtering the databases available
    for the Odoo service. The expression used makes available only the `odoo-prod`
    database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--without-demo=all`: This disables demonstration data so that the Odoo initialized
    databases start clean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--proxy-mode`: This enables the proxy mode, meaning that Odoo should expect
    requests forwarded from a reverse proxy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The next step is to copy this default file to the `/etc` directory and set
    the necessary access rights so that the Odoo user can read it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The last command ensures that the user running the Odoo process can read but
    can't change the configuration file, thereby providing better security.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Odoo log file directory also needs to be created and given access to the
    `odoo` user. This should go inside the `/var/log` directory. The following commands
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the Odoo configuration file should be edited to ensure that a few
    important parameters are correctly configured. For example, the following command
    opens the file using the `nano` editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the suggested values for some of the most important parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s explain them in detail:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addons_path`: This is a comma-separated list of the paths where add-on modules
    will be looked up. It''s read from left to right, with the leftmost directories
    considered a higher priority.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin_passwd`: This is the master password used to access the web client database
    management functions. It''s critical to set this with a strong password or, even
    better, to set it to `False` to deactivate the function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db_name`: This is the database instance to initialize during the server startup
    sequence.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbfilter`: This is a filter for the databases to be made accessible. It''s
    a Python-interpreted regex expression. For the user not to be prompted to select
    a database and for unauthenticated URLs to work properly, it should be set with
    `^dbname$`, for example, `dbfilter=^odoo-prod$`. It supports the `%h` and `%d`
    placeholders, which are replaced by the HTTP request hostname and subdomain name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http_interface`: This is the TCP/IP address Odoo will listen to. By default,
    it is `0.0.0.0`, meaning all addresses. For a deployment behind a reverse proxy,
    this can be set to the reverse proxy address so that only requests from there
    are considered. Use `127.0.0.1` if the reverse proxy is in the same server as
    the Odoo service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http_port`: This is the port number at which the server will listen. By default,
    port `8069` is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit_time_cpu` / `limit_time_real`: This sets CPU time limits for the workers.
    The default settings, `60` and `120`, may be too low, and it could be convenient
    to increase them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list_db = False`: This blocks database listing, both at the **remote procedure
    calls** (**RPCs**)-level and in the UI, and it blocks the database management
    screens and the underlying RPC functions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`logfile`:  This is where the server log should be written. For system services,
    the expected location is somewhere inside `/var/log`. If left empty, the log prints
    to standard output instead.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`proxy_mode`: This should be set to `True` when Odoo is accessed behind a reverse
    proxy, as we will be doing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`without_demo`: This should be set to `all` in production environments so that
    new databases don''t have demo data on them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`workers`: This, with a value of two or more, enables the multiprocessing mode.
    We''ll discuss this in more detail shortly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: From a security point of view, the `admin_passwd` and `list_db=False` options
    are particularly important. They block web access to the database management features
    and should be set in any production or internet-facing Odoo server.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The `openssl rand -base64 32` command can be used to generate a random password
    in the command line. Change the `32` number to whatever password size you prefer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following parameters can also be helpful:'
  prefs: []
  type: TYPE_NORMAL
- en: '`data_dir`: This is the path where session data and attachment files are stored;
    remember to keep backups of this directory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http_interface`: This sets the addresses that will be listened to. By default,
    it listens to `0.0.0.0`, but when using a reverse proxy, it can be set to `127.0.0.1`
    in order to respond to local requests only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can check the effect of the configuration made by running the Odoo manually,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The last command will not display any output to the console, as log messages
    are being written to the log file instead of to the standard output.
  prefs: []
  type: TYPE_NORMAL
- en: 'To follow the log for a running Odoo server, the `tail` command can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This can be done from a different terminal window while the manual command is
    running in the original terminal.
  prefs: []
  type: TYPE_NORMAL
- en: To run multiple terminal sessions on the same terminal window, you can use `tmux`
    or `screen`. Ubuntu also has available the `tmux` or `screen`. For more details,
    see [https://help.ubuntu.com/community/Byobu](https://help.ubuntu.com/community/Byobu).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, the `logfile` configuration option can't be unset directly from
    the Odoo command. If we want to temporarily send the log output back to the standard
    output, the best solution is to use a copy of the configuration file without the
    `logfile` option set.
  prefs: []
  type: TYPE_NORMAL
- en: 'It may be the case that the `odoo-prod` database has not been initialized by
    Odoo and that this needs to be done manually. In this case, the initialization
    can be done by installing the `base` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: At this point, the Odoo configuration should be ready. Before continuing, it
    is worth learning more about the multiprocessing workers in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding multiprocessing workers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A production instance is expected to handle a significant workload. By default,
    the server runs one process and can use only one CPU core for processing due to
    the Python language **Global Interpreter Lock** (**GIL**). However, a multiprocessing
    mode is available so that concurrent requests can be handled, allowing us to take
    advantage of multiple cores.
  prefs: []
  type: TYPE_NORMAL
- en: The `workers=N` option sets the number of worker processes to use. As a guideline,
    it can be set to `1+2*P`, where `P` is the number of processor cores. Finding
    the best setting might involve some experimentation by using different numbers
    and checking how busy the server processors are. Having PostgreSQL running on
    the same machine also has an impact on this, and this will reduce the number of
    workers that should be enabled.
  prefs: []
  type: TYPE_NORMAL
- en: It is better to set workers that are too high for the load rather than too low.
    The minimum should be six, due to the parallel connections used by most browsers.
    The maximum is generally limited by the amount of RAM on the machine, as each
    worker will consume some server memory. As a rule of thumb for normal usage patterns,
    the Odoo server should be able to handle `(1+2*P)*6` simultaneous users, where
    `P` is the number of processors.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few `limit-` configuration parameters that can be used to tune workers.
    Workers are recycled when they reach these limits, where the corresponding process
    is stopped and a new one is started. This protects the server from memory leaks
    and particular processes overloading the server resources.
  prefs: []
  type: TYPE_NORMAL
- en: The official documentation provides additional advice on how to tune the worker
    parameters. It can be found at [https://www.odoo.com/documentation/15.0/setup/deploy.html#builtin-server](https://www.odoo.com/documentation/15.0/setup/deploy.html#builtin-server).
  prefs: []
  type: TYPE_NORMAL
- en: At this point, Odoo is installed, configured, and ready to run. The next step
    is to have it running as an unattended system service. Let's look at this in detail
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Odoo as a system service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo should run as a system service so that it is automatically started when
    the system boots and runs unattended, not requiring a user session.
  prefs: []
  type: TYPE_NORMAL
- en: In Debian/Ubuntu systems, the `init` system is responsible for starting services.
    Historically, Debian and its derived operating systems used `sysvinit`. This has
    changed, and recent Debian/Ubuntu systems use `systemd`. This is true for Ubuntu
    16.04 and later.
  prefs: []
  type: TYPE_NORMAL
- en: 'To confirm that `systemd` is used in your system, try the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This command opens the documentation for the current `init` system in use, so
    you can check what is being used. At the top of the manual page, you should see
    `SYSTEMD` mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: Let's continue with the `systemd` service configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a systemd service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If the operating system is recent – such as Debian 8 and Ubuntu 16.04 or later
    – `systemd` should be the `init` system being used.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new service to the system, simply create a file describing it. Create
    a `/lib/systemd/system/odoo.service` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This service configuration file is based on the sample provided in the Odoo
    source code, which can be found at [https://github.com/odoo/odoo/blob/15.0/debian/odoo.service](https://github.com/odoo/odoo/blob/15.0/debian/odoo.service).
    The `ExecStart` option should be adjusted to the specific paths to use in this
    system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, the new service can be registered with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'To start this new service, run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'To check its status, use the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'And it can be stopped using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: When running Odoo as a system service, it is useful to confirm that the client
    can access it. Let's see how that can be done from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the Odoo service from the command line
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To confirm that the Odoo service is up and responsive, we can check that it
    is responding to requests. We should be able to get a response from it and see
    no errors in the log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check whether Odoo is responding to HTTP requests inside the server
    by using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition, to see what is in the `log` file, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'To follow what is being added to the log file live, `tail -f` can be used,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Odoo is now installed and running as a service. Next, the setup can be improved
    by adding a reverse proxy. The next section explains this.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an Nginx reverse proxy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While Odoo itself can serve web pages, it is recommended to have a reverse proxy
    in front of it. A reverse proxy receives the traffic from the clients and then
    forwards it to the Odoo servers responding to them. Doing this has several benefits.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the security side, it can provide the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Handle (and enforce) HTTPS protocols to encrypt traffic.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide the internal network characteristics.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Act as an application firewall, limiting the URLs accepted for processing.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On the performance side, it can provide the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Cache static content, avoiding burdening the Odoo services with these requests
    and thereby reducing their load.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compress content to speed up loading time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Act as a load balancer, distributing load between several Odoo services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are several options that can serve as a reverse proxy. Historically, **Apache**
    has been a popular choice. In recent years, Nginx has become widely used and is
    referred to in the Odoo official documentation. In our example, Nginx will be
    used for a reverse proxy, and the presented security and performance features
    will be implemented with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, Nginx should be installed and set to be listening on the default HTTP
    port. It is possible that this port is already being used by another installed
    service. To ensure that the port is free and available, use the following command,
    which should result in an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: If it does not return the previous error message, an installed service is using
    port `80` and should be disabled or uninstalled.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if an Apache server is installed, use the `sudo service apache2
    stop` command to stop it, or even uninstall it with the `sudo apt remove apache2`
    command.
  prefs: []
  type: TYPE_NORMAL
- en: 'With port `80` free, Nginx can be installed and configured. The following command
    installs Nginx:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: To confirm that `nginx` is working correctly, visit the server address with
    a browser or with the `curl http://localhost` command in the server. This should
    return a **Welcome to nginx** page.
  prefs: []
  type: TYPE_NORMAL
- en: The Nginx configuration files are stored at `/etc/nginx/available-sites/` and
    are activated by adding them to `/etc/nginx/enabled-sites/`, which is usually
    done with a symbolic link to the file in the available sites directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To prepare for the Odoo Nginx configuration, the default configuration should
    be removed and an Odoo configuration file added, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, using an editor such as `nano` or `vi`, edit the configuration file as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The following example provides a basic Nginx configuration for Odoo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: At the top of the configuration file, there are the `upstream` configuration
    sections. These point to the Odoo service, which is listening on ports `8069`
    and `8072` by default. The `8069` port serves the web client and RPC requests,
    and `8072` serves the long polling requests used by instant messaging features.
  prefs: []
  type: TYPE_NORMAL
- en: The `server` configuration section defines what happens to the traffic received
    on the `80` default HTTP port. Here, it is redirected to upstream Odoo services
    with the `proxy_pass` configuration directive. Any traffic for the `/longpolling`
    address is passed on to the `odoochat` upstream, and the `/` remaining traffic
    is passed on to the `odoo` upstream.
  prefs: []
  type: TYPE_NORMAL
- en: A few `proxy_set_header` directives add information to the request header to
    let the Odoo backend service know that it is being proxied.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For security reasons, it is important for Odoo to ensure that the `proxy_mode`
    parameter is set to `True`. The reason for this is that with Nginx, all requests
    hitting Odoo are coming from the Nginx server instead of the original remote IP
    address. Setting the `X-Forwarded-For` header in the proxy and enabling `--proxy-mode`
    allows Odoo to be aware of the original source of the request. Note that enabling
    `--proxy-mode` without forcing the header at the proxy level allows malicious
    clients to spoof their request address.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of the configuration file, a couple of `gzip`-related directives
    can be found. These enable the compression of some files, thereby improving performance.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once edited and saved, the Nginx configuration can be verified for correctness
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the Nginx service can reload the new configuration, using one of the following
    commands, depending on the `init` system used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This will have Nginx reload the configuration used without interrupting the
    service, as would have happened if `restart` was used instead of `reload`.
  prefs: []
  type: TYPE_NORMAL
- en: To be properly secured, Odoo should be accessed through HTTPS. The next section
    will address this.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and enforcing HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web traffic should not travel through the internet in plain text. When exposing
    the Odoo server on a network, HTTPS should be used to encrypt the traffic.
  prefs: []
  type: TYPE_NORMAL
- en: In some cases, it might be acceptable to use a self-signed certificate. Keep
    in mind that using a self-signed certificate provides limited security. While
    it allows for traffic to be encrypted, it has some security limitations, such
    as not being able to prevent man-in-the-middle attacks, or not being able to present
    security warnings on recent web browsers.
  prefs: []
  type: TYPE_NORMAL
- en: A more robust solution is to use a certificate signed by a recognized authority.
    This is particularly important when running e-commerce websites. Another option
    is to use a **Let's Encrypt** certificate, and the **Certbot** program automates
    getting SSL certificates for it. See [https://certbot.eff.org/instructions](https://certbot.eff.org/instructions)
    to learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will see how to create a self-signed certificate, in case this is the
    preferred choice.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a self-signed SSL certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A certificate needs to be installed on Nginx to enable SSL. We can either have
    one provided by a certificate authority or generate a self-signed one.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a self-signed certificate, use these commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code creates an `/etc/ssl/nginx` directory and a passwordless
    SSL certificate. When running the `openssl` command, the user will be asked for
    some additional information, and then a certificate and key files will be generated.
    Finally, the ownership of these files is given to the `www-data` user, which is
    used to run the web server.
  prefs: []
  type: TYPE_NORMAL
- en: With an SSL certificate ready to be used, the next step is to install it on
    the Nginx service.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring HTTPS access on Nginx
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enforce HTTPS, an SSL certificate is needed. The Nginx service will use it
    to encrypt the traffic between the server and the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, the Odoo Nginx configuration file needs to be revisited. Edit it
    to replace the `server` directive with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: With this change, requests for the `http://` address are converted into `https://`
    equivalent addresses, ensuring that the non-secure transport is not used by accident.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTTPS service still needs to be configured. This can be done by adding
    the following `server` directive to the configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This additional `server` directive listens to the HTTPS port and uses the certificate
    files at `/etc/ssl/nginx/` to encrypt the traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The Nginx configuration proposed here is based on the official documentation
    found at [https://www.odoo.com/documentation/15.0/administration/install/deploy.html#https](https://www.odoo.com/documentation/15.0/administration/install/deploy.html#https).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once this configuration is reloaded, Odoo should work through HTTPS only, as
    shown in the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Encrypting the web traffic is not the only thing Nginx can do for us. It can
    also help to reduce the load on the Odoo upstream service. Let's look at this
    in detail in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Caching static content
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nginx can cache the static files served – this means that later requests for
    the cached files are served directly from Nginx and don't need to be requested
    by the upstream Odoo service.
  prefs: []
  type: TYPE_NORMAL
- en: This not only improves response time but also improves the Odoo service capacity
    to serve more users, as it is now focused on responding to dynamic requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'To enable static content caching, add the following section to the Nginx configuration
    file after the `# comming gzip` directives:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: With this configuration, static data is cached for 60 minutes. Odoo static content
    is defined as any file served from the `/web/static` path.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, the server should be fully functional, with Nginx handling requests
    through HTTPS and then handing them over to the Odoo service for processing.
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo service will require maintenance and updates, so the next section discusses
    how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Maintaining the Odoo service and modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once the Odoo server is up and running, it is expected for some maintenance
    to be needed – for example, installing or updating modules.
  prefs: []
  type: TYPE_NORMAL
- en: These actions involve some risk for the production system, and it is best to
    test them in a staging environment before applying in production. Let's start
    with a basic recipe to create a staging environment.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a staging environment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The staging environment should be a copy of the production system and ideally
    should have its own dedicated server.
  prefs: []
  type: TYPE_NORMAL
- en: A simplification, which is safe enough for most cases, is to have the staging
    environment in the same server as the production system.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create a copy of the `odoo-prod` production database as the `odoo-stage`
    database, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Note that some configurations are copied over, such as the connections to email
    servers, and you may want to have additional commands disabling them. The specific
    actions needed to do this depend on the database setup, but it's likely they can
    be automated by a script. For this, it is good to know that the `psql` command
    can be used to run SQL directly from the command line, for example, `psql -d odoo-stage
    -c "<SQL command>"`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'A database copy can be made in a much faster way using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$ createdb --owner=odoo --template=odoo-prod odoo-stage`.'
  prefs: []
  type: TYPE_NORMAL
- en: The caveat here is that in order for it to run, there can't be any open connections
    to the `odoo-prod` database, so the Odoo production server needs to be stopped
    before the command can be used.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a copy of the production database for staging, the next step
    is to create a copy of the source to be used. This can be in a subdirectory called
    `/opt/odoo/stage`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following shell commands copy the relevant files and create the staging
    environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Finally, a specific Odoo configuration file should be prepared for the staging
    environment, as the path to the files used is different. The HTTP ports used should
    also be changed so that the staging environment can run at the same time as the
    main production service.
  prefs: []
  type: TYPE_NORMAL
- en: This staging environment can now be used for testing purposes. So, the next
    section describes how a production update would be applied.
  prefs: []
  type: TYPE_NORMAL
- en: Updating Odoo source code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo and custom module code will usually have versions managed through Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get the latest Odoo source code from the GitHub repository, use the `git
    pull` command. Before doing that, the `git tag` command can be used to create
    a tag for the current commit being used so that it''s easier to revert the code
    update, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: For code changes to take effect, the Odoo service should be restarted. For data
    file changes to take effect, an upgrade to the modules is needed.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: As a general rule, changes to Odoo stable versions are considered code fixes,
    and it's therefore not often worth the risk of performing module upgrades. If
    you need to perform a module upgrade, however, this can be achieved using the
    `-u <module>` additional option (or `-u base`), which upgrades all modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can test the actions using the staging database before applying them in
    the production database, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: This Odoo staging server was configured to listen on port `8080`. We can navigate
    there with our web browser to check whether the upgraded code works correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'If something goes wrong, we can revert the code to an earlier version with
    the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'If everything works as expected, it should be safe to perform an upgrade on
    the production service, which is usually done by restarting it. If you want to
    perform an actual module upgrade, the suggested approach is to stop the server,
    run the upgrade, and then restart the service, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: Making a backup of the database before running an upgrade is also advised.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you learned how to create a staging environment alongside the
    main Odoo environment to be used for testing. Updates to Odoo code or to custom
    modules can be tried on the staging environment before applying them in the production
    system. This allows us to identify and correct any issues you might find with
    the upgrades ahead of time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the additional steps required for setting
    up and running Odoo on a Debian-based production server. We looked at the most
    important settings in the configuration file, and we learned how to take advantage
    of the multiprocessing mode.
  prefs: []
  type: TYPE_NORMAL
- en: For improved security and scalability, we also learned how to use Nginx as a
    reverse proxy in front of Odoo server processes and how to configure it to use
    HTTPS-encrypted traffic.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, some advice was provided on how to create a staging environment and
    perform updates to Odoo code or custom modules.
  prefs: []
  type: TYPE_NORMAL
- en: This covers the essentials of what's needed to run an Odoo server and provide
    a reasonably stable and secure service to your users. We can now use it to host
    our library management system!
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn more about Odoo, you should take a look at the official documentation
    at [https://www.odoo.com/documentation](https://www.odoo.com/documentation). Some
    topics are covered in more detail there, and you'll find topics not covered in
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: There are also other published books on Odoo that you might find useful. **Packt
    Publishing** has a few in its catalog, and in particular, *Odoo Development Cookbook*
    provides more advanced material on topics not discussed in this book. At the time
    of writing, the last edition available was for Odoo 14, which is available at
    [https://www.packtpub.com/product/odoo-14-development-cookbook-fourth-edition/9781800200319](https://www.packtpub.com/product/odoo-14-development-cookbook-fourth-edition/9781800200319).
  prefs: []
  type: TYPE_NORMAL
- en: Finally, Odoo is an open source product with a vibrant community. Getting involved,
    asking questions, and contributing is a great way not only to learn but also to
    build a business network. With this in mind, we should also mention the **Odoo
    Community Association** (**OCA**), which promotes collaboration and quality open
    source code. You can learn more about it at [https://odoo-community.org/](https://odoo-community.org/)
    or [https://github.com/OCA](https://github.com/OCA).
  prefs: []
  type: TYPE_NORMAL
- en: Enjoy your Odoo journey!
  prefs: []
  type: TYPE_NORMAL
