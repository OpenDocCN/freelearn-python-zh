["```py\nfrom django.db import models\n```", "```py\nfrom django.utils.text import slugify\n```", "```py\nfrom django.urls import reverse\n```", "```py\nclass Post(models.Model):\n```", "```py\n    # Fields: Title of the article, name of the author, \n```", "```py\n    content of the article and date of creation.\n```", "```py\n    title = models.CharField(max_length=200, unique=True)\n```", "```py\n    author = models.CharField(max_length=20)\n```", "```py\n    content = models.TextField()\n```", "```py\n    created_at = models.DateTimeField(auto_now_add=True)\n```", "```py\n    class Meta:\n```", "```py\n        ordering = [\"-created_at\"]\n```", "```py\n    @property\n```", "```py\n    def slug(self):\n```", "```py\n        return slugify(self.title)\n```", "```py\n    @property\n```", "```py\n    def summary(self):\n```", "```py\n        return self.content[:100] + \"...\"\n```", "```py\n    @property \n```", "```py\n    def get_absolute_url(self):\n```", "```py\n        return reverse(\"single post\", kwargs={\"slug\": \n```", "```py\n            self.slug})\n```", "```py\n    def __str__(self):\n```", "```py\n        return self.title\n```", "```py\nclass Comment(models.Model):\n```", "```py\n    # Fields: Name of the author, content of the comment, \n```", "```py\n    relation to the article and date of creation.\n```", "```py\n    author = models.CharField(max_length=20)\n```", "```py\n    content = models.TextField()\n```", "```py\n    post = models.ForeignKey(Post, on_delete=models.\n```", "```py\n        CASCADE)\n```", "```py\n    created_at = models.DateTimeField(auto_now_add=True)\n```", "```py\n    def __str__(self):\n```", "```py\n        return self.name\n```", "```py\npython3 manage.py makemigrations\npython3 manage.py migrate\n```", "```py\nfrom app.website.models import Post, Comment\n```", "```py\nfrom faker import Faker\n```", "```py\n# Delete all posts and comments\n```", "```py\nPost.objects.all().delete()\n```", "```py\n# Create fake object\n```", "```py\nfake = Faker()\n```", "```py\ndef get_full_name():\n```", "```py\n    return f\"{fake.first_name()} {fake.last_name()}\"\n```", "```py\n# Create 30 posts\n```", "```py\nfor _ in range(30):\n```", "```py\n    post = Post(\n```", "```py\n        title=fake.sentence()[:200],\n```", "```py\n        content=fake.text(),\n```", "```py\n        author=get_full_name()[:20],\n```", "```py\n    )\n```", "```py\n    post.save()\n```", "```py\n# Create 150 comments\n```", "```py\nfor _ in range(150):\n```", "```py\n    comment = Comment(\n```", "```py\n        author=get_full_name()[:20],\n```", "```py\n        content=fake.text(),\n```", "```py\n        post=Post.objects.order_by(\"?\").first(),\n```", "```py\n    )\n```", "```py\n    comment.save()\n```", "```py\npython3 manage.py shell < make_fake_data.py\n```", "```py\n{% load static %}\n```", "```py\n<!doctype html>\n```", "```py\n<html lang=\"en\">\n```", "```py\n<head>\n```", "```py\n    <meta charset=\"UTF-8\">\n```", "```py\n    <meta name=\"viewport\" content=\"width=device-width,\n```", "```py\n        user-scalable=no, initial-scale=1.0, maximum-\n```", "```py\n            scale=1.0, minimum-scale=1.0\">\n```", "```py\n    <title>Example website</title>\n```", "```py\n    <link rel=\"stylesheet\" href=\"{% static 'css/main.css' \n```", "```py\n        %}\">\n```", "```py\n    <script defer src=\"img/index.js' %}\">\n```", "```py\n    </script>\n```", "```py\n</head>\n```", "```py\n<body\n```", "```py\n        data-host=\"{{ request.get_host }}\"\n```", "```py\n        data-scheme=\"{{ request.scheme }}\"\n```", "```py\n>\n```", "```py\n    <div class=\"container\">\n```", "```py\n        <header>\n```", "```py\n            <nav id=\"nav\" class=\"nav\">{% include \n```", "```py\n                'components/_nav.html' %}</nav>\n```", "```py\n        </header>\n```", "```py\n        <main id=\"main\">{% include page %}</main>\n```", "```py\n        <footer class=\"footer\">My footer</footer>\n```", "```py\n    </div>\n```", "```py\n</body>\n```", "```py\n</html>\n```", "```py\n<h1> All posts</h1>\n```", "```py\n<hr>\n```", "```py\n<section>\n```", "```py\n    {# List posts #}\n```", "```py\n    <div id=\"all-posts\">\n```", "```py\n        {% include \"components/all_posts/list.html\" %}\n```", "```py\n    </div>\n```", "```py\n    {# End list posts #}\n```", "```py\n</section>\n```", "```py\n{% for post in posts %}\n```", "```py\n    <article>\n```", "```py\n        <header>\n```", "```py\n            <h2>{{ post.title }}</h2>\n```", "```py\n        </header>\n```", "```py\n        <p>{{ post.summary }}</p>\n```", "```py\n        <p>{{ post.author }}</p>\n```", "```py\n        <footer>\n```", "```py\n            <p>\n```", "```py\n                <a class=\"post-item__link\" href=\"#\" data-\n```", "```py\n                    target=\"single post\" data-id=\"{{ \n```", "```py\n                        post.id }}\"> Read more</a>\n```", "```py\n            </p>\n```", "```py\n        </footer>\n```", "```py\n    </article>\n```", "```py\n{% endfor %}\n```", "```py\nfrom django.shortcuts import render\n```", "```py\nfrom .forms import SearchForm, CommentForm\n```", "```py\nfrom .models import Post, Comment\n```", "```py\ndef all_posts(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        {\n```", "```py\n            \"posts\": Post.objects.all()[:5],\n```", "```py\n            \"page\": \"pages/all_posts.html\",\n```", "```py\n            \"active_nav\": \"all posts\",\n```", "```py\n        },\n```", "```py\n    )\n```", "```py\nfrom django.contrib import admin\n```", "```py\nfrom django.urls import path\n```", "```py\nfrom app.website import views, feed\n```", "```py\nurlpatterns = [\n```", "```py\n    path(\"\", views.all_posts, name=\"all posts\"),\n```", "```py\n    path(\"admin/\", admin.site.urls),\n```", "```py\n]\n```", "```py\n{% if not is_last_page %}\n```", "```py\n<button class=\"button\" id=\"paginator\" data-next-page=\"{{ \n```", "```py\n    next_page }}\">More posts</button>\n```", "```py\n{% endif %}\n```", "```py\n<h1>All posts</h1>\n```", "```py\n<hr>\n```", "```py\n<section>\n```", "```py\n    {# List posts #}\n```", "```py\n    ...\n```", "```py\n    {# End list posts #}\n```", "```py\n    {# Paginator #}\n```", "```py\n    <div id=\"paginator\">\n```", "```py\n        {% include \n```", "```py\n           \"components/all_posts/_button_paginator.html\" %}\n```", "```py\n    </div>\n```", "```py\n    {# End paginator #}\n```", "```py\n</section>\n```", "```py\n/**\n```", "```py\n* Event to add a next page with the pagination\n```", "```py\n* @param event\n```", "```py\n*/\n```", "```py\nfunction addNextPaginator(event) {\n```", "```py\n    const nextPage = event.target.dataset.nextPage;\n```", "```py\n    sendData({\n```", "```py\n        action: \"Add next posts\",\n```", "```py\n        data: {\n```", "```py\n            page: nextPage\n```", "```py\n        },\n```", "```py\n    }, myWebSocket);\n```", "```py\n} \n```", "```py\n/**\n```", "```py\n* Update events in every page\n```", "```py\n* return {void}\n```", "```py\n*/\n```", "```py\nfunction updateEvents() {\n```", "```py\n...\n```", "```py\n    // Paginator\n```", "```py\n    const paginator = document.querySelector(\"#paginator\");\n```", "```py\n    if (paginator !== null) {\n```", "```py\n        paginator.removeEventListener(\"click\", \n```", "```py\n            addNextPaginator, false);\n```", "```py\n        paginator.addEventListener(\"click\", \n```", "```py\n            addNextPaginator, false);\n```", "```py\n    }\n```", "```py\n…\n```", "```py\n}\n```", "```py\nfrom channels.generic.websocket import \n```", "```py\n    JsonWebsocketConsumer\n```", "```py\nfrom asgiref.sync import async_to_sync\n```", "```py\nimport app.website.actions as actions\n```", "```py\nclass BlogConsumer(JsonWebsocketConsumer):\n```", "```py\n    room_name = \"broadcast\"\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        # Accept the connection\n```", "```py\n        self.accept()\n```", "```py\n        # Assign the Broadcast group\n```", "```py\n        async_to_sync(self.channel_layer.group_add)\n```", "```py\n            (self.room_name, self.channel_name)\n```", "```py\n    def disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        pass\n```", "```py\n    def receive_json(self, data_received):\n```", "```py\n        ...\n```", "```py\n        # Get the data\n```", "```py\n        data = data_received[\"data\"]\n```", "```py\n        # Depending on the action we will do one task or \n```", "```py\n         another.\n```", "```py\n        match data_received[\"action\"]:\n```", "```py\n            case \"Change page\":\n```", "```py\n                actions.send_page(self, data)\n```", "```py\n            case \"Add next posts\":\n```", "```py\n                actions.add_next_posts(self, data)\n```", "```py\n    def send_html(self, event):\n```", "```py\n        ...\n```", "```py\nPOST_PER_PAGE = 5\n```", "```py\ndef add_next_posts(self, data={}):\n```", "```py\n    \"\"\"Add next posts from pagination\"\"\"\n```", "```py\n    # Prepare context data for page\n```", "```py\n    page = int(data[\"page\"]) if \"page\" in data else 1\n```", "```py\n    start_of_slice = (page - 1) * POST_PER_PAGE\n```", "```py\n    end_of_slice = start_of_slice + POST_PER_PAGE\n```", "```py\n    context = {\n```", "```py\n        \"posts\": Post.objects.all()[start_of_slice:end_of_slice],\n```", "```py\n        \"next_page\": page + 1,\n```", "```py\n        \"is_last_page\": (Post.objects.count() // \n```", "```py\n            POST_PER_PAGE) == page,\n```", "```py\n    }\n```", "```py\n    # Add and render HTML with new posts\n```", "```py\n    self.send_html(\n```", "```py\n        {\n```", "```py\n            \"selector\": \"#all-posts\",\n```", "```py\n            \"html\": render_to_string\n```", "```py\n               (\"components/all_posts/list.html\", context),\n```", "```py\n            \"append: True,\n```", "```py\n        }\n```", "```py\n    # Update paginator\n```", "```py\n    self.send_html(\n```", "```py\n        {\n```", "```py\n            \"selector\": \"#paginator\",\n```", "```py\n            \"html\": render_to_string(\n```", "```py\n                \"components/all_posts/_button_paginator.\n```", "```py\n                     html\", context\n```", "```py\n            ),\n```", "```py\n        }\n```", "```py\ndef all_posts(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        {\n```", "```py\n            \"posts\": Post.objects.all()[:5],\n```", "```py\n            \"page\": \"pages/all_posts.html\",\n```", "```py\n            \"active_nav\": \"all posts\",\n```", "```py\n            \"next_page\": 2, # New\n```", "```py\n            \"is_last_page\": (Post.objects.count() //\n```", "```py\n               POST_PER_PAGE) == 2, # New\n```", "```py\n        },\n```", "```py\nfrom django import forms\n```", "```py\nfrom . models import Comment\n```", "```py\nclass SearchForm(forms.Form):\n```", "```py\n    search = forms.CharField(\n```", "```py\n        label=\"Search\",\n```", "```py\n        max_length=255,\n```", "```py\n        required=False,\n```", "```py\n        widget=forms.TextInput(\n```", "```py\n            attrs={\n```", "```py\n                \"id\": \"search\",\n```", "```py\n                \"class\": \"input\",\n```", "```py\n                \"placeholder\": \"Title...\",\n```", "```py\n            }\n```", "```py\n        ),\n```", "```py\n<form id=\"search-form\" action=\"\">\n```", "```py\n    {{ form.search }}\n```", "```py\n    <input class=\"button\" type=\"submit\" value=\"Search\">\n```", "```py\n</form>\n```", "```py\n<h1> All posts</h1>\n```", "```py\n<hr>\n```", "```py\n{# Search #}\n```", "```py\n<section id=\"form-search\">\n```", "```py\n    {% include \"components/all_posts/form_search.html\" %}\n```", "```py\n</section>\n```", "```py\n{# End search #}\n```", "```py\n<hr>\n```", "```py\n<section>\n```", "```py\n    {# List posts #}\n```", "```py\n    ...\n```", "```py\n    {# End list posts #}\n```", "```py\n    {# Paginator #}\n```", "```py\n    ...\n```", "```py\n    {# End paginator #}\n```", "```py\n</section>\n```", "```py\ndef all_posts(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        {\n```", "```py\n            \"posts\": Post.objects.all()[:5],\n```", "```py\n            \"page\": \"pages/all_posts.html\",\n```", "```py\n            \"active_nav\": \"all posts\",\n```", "```py\n            \"form\": SearchForm(), # New\n```", "```py\n            \"next_page\": 2,\n```", "```py\n            \"is_last_page\": (Post.objects.count() // \n```", "```py\n                POST_PER_PAGE) == 2,\n```", "```py\n        },\n```", "```py\n/**\n```", "```py\n* Event to request a search\n```", "```py\n* @param event\n```", "```py\n*/\n```", "```py\nfunction search(event) {\n```", "```py\n    event.preventDefault();\n```", "```py\n    const search = event.target.querySelector(\"#search\"). value;\n```", "```py\n    sendData({\n```", "```py\n        action: \"Search\",\n```", "```py\n        data: {\n```", "```py\n            search: search\n```", "```py\n        },\n```", "```py\n    }, myWebSocket);\n```", "```py\n}\n```", "```py\n/**\n```", "```py\n* Update events in every page\n```", "```py\n* return {void}\n```", "```py\n*/\n```", "```py\nfunction updateEvents() {\n```", "```py\n...\n```", "```py\n    // Search form\n```", "```py\n    const searchForm = document.querySelector(\"#search-\n```", "```py\n        form\");\n```", "```py\n    if (searchForm !== null) {\n```", "```py\n        searchForm.removeEventListener(\"submit\", search,         \n```", "```py\n            false);\n```", "```py\n        searchForm.addEventListener(\"submit\", search, \n```", "```py\n            false);\n```", "```py\n    }\n```", "```py\n...\n```", "```py\n}\n```", "```py\nmatch data_received[\"action\"]:\n```", "```py\n...\n```", "```py\n             case \"Search\":\n```", "```py\n                actions.search(self, data)\n```", "```py\n...\n```", "```py\ndef search(self, data={}):\n```", "```py\n    \"Search for posts\"    \"\"\n```", "```py\n    # Prepare context data for page\n```", "```py\n    context = {\n```", "```py\n        \"posts\": Post.objects.filter\n```", "```py\n            (title__icontains=data[\"search\"])\n```", "```py\n                [:POST_PER_PAGE].\n```", "```py\n    }\n```", "```py\n    # Render HTML page and send to client\n```", "```py\n    self.send_html(\n```", "```py\n        {\n```", "```py\n            \"selector\": \"#all-posts\",\n```", "```py\n            \"html\": render_to_string\n```", "```py\n               (\"components/all_posts/list.html\", context),\n```", "```py\n        }\n```", "```py\n<h1> About us</h1>\n```", "```py\n<p> Lorem ipsum dolor sit amet, consectetur adipisicing elit. Ad animi aut beatae commodi consectetur cumque ipsam iste labore laudantium magni molestiae nobis nulla quod quos tempore totam velit, voluptas voluptates!</p>\n```", "```py\ndef about(request):\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        { \"page\": \"pages/about_us.html\", \"active_nav\": \n```", "```py\n           \"about us\"},\n```", "```py\nurlpatterns = [\n```", "```py\n...\n```", "```py\n        path(\"about-us/\", views.about, name=\"about us\"),\n```", "```py\n...\n```", "```py\n    <ul class=\"nav__ul\">\n        <li>\n            <a\n                    href=\"#\"\n                    class=\"nav__link nav__link nav__link--page{% if active_nav == \"all posts\" %} active{% endif %}\"\"\n                    data-target=\"all posts\"\n            >\n                All posts\n            </a>\n        </li>\n        <li>\n            <a\n                    href=\"#\"\n                    class=\"nav__link nav__link nav__link\n                        page{% if active_nav == \"about us\" \n                            %} active{% endif %}\"\n                    data-target=\"about us\"\n            >\n                About us\n            </a>\n        </li>\n    </ul>\n    ```", "```py\n    /**\n    * Send message to update page\n    * @param {Event} event\n    * @returns {void}\n    */\n    function changePage(event) {\n        event.preventDefault();\n        sendData({\n            action: \"Change page\",\n            data: {\n                page: event.target.dataset.target,\n                id: event.target. dataset?.id\n            }\n        }, myWebSocket);\n    }\n    /**\n    * Update events in every page\n    * return {void}\n    */\n    function updateEvents() {\n    ...\n        // Navigation\n        document.querySelectorAll(\".nav__link--page\").forEach(link => {\n            link.removeEventListener(\"click\", changePage, false);\n            link.addEventListener(\"click\", changePage, false);\n        });\n        // Link to single post\n        const linksPostItem = document.querySelectorAll\n            (\".post-item__link\");\n        if (linksPostItem !== null) {\n            linksPostItem.forEach(link => {\n                link.removeEventListener(\"click\", \n                    changePage, false);\n                link.addEventListener(\"click\", changePage,       \n                    false);\n            });\n        }\n    …\n     }\n    ```", "```py\n    ...\n    ca\"e \"Change page\":\n    actions.send_page(self, data)\n    ...\n    ```", "```py\n    POST_PER_PAGE = 5\n\n    def send_page(self, data={}):\n    ...\n         match page:\n            case \"all posts\":\n                context = {\n                    \"posts\": Post.objects.all()\n                        [:POST_PER_PAGE],\n                    \"form\": SearchForm(),\n                    \"next_page\": 2,\n                    \"is_last_page\": (Post.objects.count() \n                    // POST_PER_PAGE) == 2,\n                }\n     ...\n    ```", "```py\n<section>\n```", "```py\n    {# Post #}\n```", "```py\n    <article>\n```", "```py\n        <header>\n```", "```py\n            <h1>{{ post.title }}</h1>\n```", "```py\n        </header>\n```", "```py\n        <div>{{ post.content }}</div>\n```", "```py\n        <footer>\n```", "```py\n            <p>{{ post.author }}</p>\n```", "```py\n        </footer>\n```", "```py\n    </article>\n```", "```py\n    {# End post #}\n```", "```py\n</section>\n```", "```py\nfrom .models import Post\n```", "```py\ndef single_post(request, slug):\n```", "```py\n    post = list(filter(lambda post: post.slug == slug, Post.objects.all()))[0]\n```", "```py\n    return render(\n```", "```py\n        request,\n```", "```py\n        \"base.html\",\n```", "```py\n        {\n```", "```py\n            \"post: post,\n```", "```py\n            \"page\": \"pages/single_post.html\",\n```", "```py\n        },\n```", "```py\nurlpatterns = [\n```", "```py\n    ...\n```", "```py\n    path(\"article/<slug:slug>/\", views.single_post, \n```", "```py\n        name=\"single post\"),\n```", "```py\n    ...\n```", "```py\ndata_reverse = {}\n```", "```py\nmatch page:\n```", "```py\n...\n```", "```py\n        case \"single post\":\n```", "```py\n            post = Post.objects.get(id=data[\"id\"])\n```", "```py\n            context = {\n```", "```py\n                \"post: post,\n```", "```py\n            }\n```", "```py\n            data_reverse = {\"slug\": post.slug}\n```", "```py\n...\n```", "```py\nself.send_html(\n```", "```py\n        {\n```", "```py\n            \"selector\": \"#main\",\n```", "```py\n            \"html\": render_to_string(f \n```", "```py\n                \"pages/{template_page}.html\", context),\n```", "```py\n            \"url\": reverse(page, kwargs=data_reverse),\n```", "```py\n        }\n```", "```py\n{% for comment in comments %}\n```", "```py\n    {% include \"components/_single_comment.html\" with \n```", "```py\n       comment=comment %}\n```", "```py\n{% endfor %}\n```", "```py\n<article>\n```", "```py\n    <h2>{{ comment.author }}</h2>\n```", "```py\n    <p>{{ comment.content }}</p>\n```", "```py\n    <p>{{ comment.created_at }}</p>\n```", "```py\n</article>\n```", "```py\nfrom .models import Post, Comment\n```", "```py\ndef single_post(request, slug):\n```", "```py\n    ...\n```", "```py\n        {\n```", "```py\n            \"post: post,\n```", "```py\n            \"page\": \"pages/single_post.html\",\n```", "```py\n            \"active_nav\": \"single post\",\n```", "```py\n            \"comments\": Comment.objects.filter(post=post), # New\n```", "```py\n        },\n```", "```py\n...\n```", "```py\ndef send_page(self, data={}):\n```", "```py\n        ...\n```", "```py\n        case \"single post\":\n```", "```py\n            post = Post.objects.get(id=data[\"id\"])\n```", "```py\n            context = {\n```", "```py\n                \"post: post,\n```", "```py\n                \"form\": CommentForm(),\n```", "```py\n                \"comments\": Comment.objects.filter(post=post), # New\n```", "```py\n            }\n```", "```py\n            data_reverse = {\"slug\": post.slug}\n```", "```py\n ...\n```", "```py\nclass CommentForm(forms.ModelForm):\n```", "```py\n    author = forms.CharField(\n```", "```py\n        widget=forms.TextInput(\n```", "```py\n            attrs={\n```", "```py\n                \"id\": \"author\",\n```", "```py\n                \"class\": \"input\",\n```", "```py\n                \"placeholder\": \"Your name...\",\n```", "```py\n            }\n```", "```py\n        ),\n```", "```py\n    content = forms.CharField(\n```", "```py\n        widget=forms.Textarea(\n```", "```py\n            attrs={\n```", "```py\n                \"id\": \"content\",\n```", "```py\n                \"class\": \"input\",\n```", "```py\n                \"placeholder\": \"Your comment...\",\n```", "```py\n            }\n```", "```py\n        ),\n```", "```py\n    class Meta:\n```", "```py\n        model = Comment\n```", "```py\n        fields = (\"author\", \"content\", \"post\")\n```", "```py\nfrom . forms import SearchForm, CommentForm\n```", "```py\ndef single_post(request, slug):\n```", "```py\n    ...\n```", "```py\n        {\n```", "```py\n            \"post: post,\n```", "```py\n            \"page\": \"pages/single_post.html\",\n```", "```py\n            \"active_nav\": \"single post\",\n```", "```py\n            \"comments\": Comment.objects.filter(post=post),\n```", "```py\n            \"form\": CommentForm(), # New\n```", "```py\n        },\n```", "```py\n...\n```", "```py\n   ...\n```", "```py\n{# Comments #}\n```", "```py\n    <div id=\"comments\">\n```", "```py\n        <h2> Comments</h2>\n```", "```py\n        <form id=\"comment-form\" action=\"\" data-post-id=\"{{ \n```", "```py\n            post.id }}\">\n```", "```py\n            {{ form.author }}\n```", "```py\n            {{ form.content }}\n```", "```py\n            <input class=\"button\" type=\"submit\" \n```", "```py\n                value=\"Add\">\n```", "```py\n        </form>\n```", "```py\n        <div id=\"list-of-comments\">\n```", "```py\n            {% include \"components/_list_of_comments.html\" %}\n```", "```py\n        </div>\n```", "```py\n    </div>\n```", "```py\n    {# End comments #}\n```", "```py\n</section>\n```", "```py\nfunction addComment(event) {\n```", "```py\n    event.preventDefault();\n```", "```py\n    const author = event.target.querySelector(\"#author\"). value;\n```", "```py\n    const content = event.target.querySelector(\"#content\"). value;\n```", "```py\n    const postId = event.target.dataset.postId;\n```", "```py\n    sendData({\n```", "```py\n        action: \"Add comment\",\n```", "```py\n        data: {\n```", "```py\n            author: author,\n```", "```py\n            content: content,\n```", "```py\n            post_id: postId\n```", "```py\n        },\n```", "```py\n    }, myWebSocket);\n```", "```py\n}\n```", "```py\nfunction updateEvents() {\n```", "```py\n    ...\n```", "```py\n    // Comment form\n```", "```py\n    const commentForm = document.querySelector(\"#comment-form\");\n```", "```py\n    if (commentForm !== null) {\n```", "```py\n        commentForm.removeEventListener(\"submit\", addComment, false);\n```", "```py\n        commentForm.addEventListener(\"submit\", addComment, false);\n```", "```py\n    }\n```", "```py\n...\n```", "```py\n}\n```", "```py\n        match data_received[\"action\"]:\n```", "```py\n...            \n```", "```py\n            case \"Add comment\":\n```", "```py\n                actions.add_comment(self, data)\n```", "```py\nfrom . models import Post, Comment\n```", "```py\nfrom . forms import SearchForm, CommentForm\n```", "```py\ndef add_comment(self, data):\n```", "```py\n    \"\"\"Add new comment to database\"\"\"\"\n```", "```py\n    # Add post\n```", "```py\n    data_with_post = data.copy()\n```", "```py\n    post = Post.objects.get(id=data[\"post_id\"])\n```", "```py\n    data_with_post[\"post\"] = post\n```", "```py\n    # Set initial values by CommentForm\n```", "```py\n    form = CommentForm(data_with_post)\n```", "```py\n    # Check if form is valid\n```", "```py\n    if form.is_valid():\n```", "```py\n        # Save comment\n```", "```py\n        form.save()\n```", "```py\n        # Render HTML with new comment to all clients\n```", "```py\n        async_to_sync(self.channel_layer.group_send)(\n```", "```py\n            self.room_name,\n```", "```py\n            {\n```", "```py\n                \"type\": \"send.html\", # Run \"send_html()\" \n```", "```py\n                    method\n```", "```py\n                \"selector\": \"#comments\",\n```", "```py\n                \"html\": render_to_string(\n```", "```py\n                    \"components/_single_comment.html\", \n```", "```py\n                      {\"comment\": data}, {\"comment\": data}.\n```", "```py\n                ),\n```", "```py\n                \"append\": True,\n```", "```py\n                \"broadcast: True,\n```", "```py\n                \"url\": reverse(\"single post\", \n```", "```py\n                    kwargs={\"slug\": post.slug}),\n```", "```py\n            },\n```", "```py\nfrom django.contrib.syndication.views import Feed\n```", "```py\nfrom django.urls import reverse\n```", "```py\nfrom .models import Post\n```", "```py\nclass LatestEntriesFeed(Feed):\n```", "```py\n    title = \"My blog\"\n```", "```py\n    link = \"/feed/\"\n```", "```py\n    description = \"Updates to posts.\"\n```", "```py\n    def items(self):\n```", "```py\n        return Post.objects.all()[:5]\n```", "```py\n    def item_title(self, item):\n```", "```py\n        return item.title\n```", "```py\n    def item_description(self, item):\n```", "```py\n        return item.summary\n```", "```py\n    def item_link(self, item):\n```", "```py\n        return reverse(\"single post\", kwargs={\"slug\": \n```", "```py\n            item.slug})\n```", "```py\n...\n```", "```py\nfrom app.website import views, feed\n```", "```py\nurlpatterns = [\n```", "```py\n    ...\n```", "```py\n    path(\"feed/\", feed.LatestEntriesFeed(), name=\"feed\"),\n```", "```py\n    ...\n```"]