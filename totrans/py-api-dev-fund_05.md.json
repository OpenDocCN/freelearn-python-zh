["```py\nfrom marshmallow import Schema, fields\nclass SimpleSchema(Schema):\n    id = fields.Int() \n    username = fields.String()\n```", "```py\nclass SimpleSchema(Schema):\n    id = fields.Int() \n    username = fields.String(required=True)\n```", "```py\n{\n    \"message\": \"Validation errors\",\n    \"errors\": {\n        \"username\": [\n            \"Missing data for the required field.\"\n        ]\n    }\n}\n```", "```py\nclass SimpleSchema(Schema):\n    id = fields.Int() \n    username = fields.String(required=True)\n    password = fields.Method(required=True, deserialize='load_password')\n    def load_password(self, value): \n        return hash_password(value)\n```", "```py\n    marshmallow==2.19.5\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: marshmallow\n    Successfully installed marshmallow-2.19.5\n    ```", "```py\n    from marshmallow import Schema, fields\n    from utils import hash_password\n    class UserSchema(Schema):\n        class Meta:\n            ordered = True\n        id = fields.Int(dump_only=True)\n        username = fields.String(required=True)\n        email = fields.Email(required=True)\n        password = fields.Method(required=True, deserialize='load_password')\n        created_at = fields.DateTime(dump_only=True)\n        updated_at = fields.DateTime(dump_only=True)\n        def load_password(self, value):\n            return hash_password(value)\n    ```", "```py\n    from schemas.user import UserSchema\n    user_schema = UserSchema()\n    user_public_schema = UserSchema(exclude=('email', ))\n    ```", "```py\n    class UserListResource(Resource):\n        def post(self):\n            json_data = request.get_json()\n            data, errors = user_schema.load(data=json_data)\n            if errors:\n                return {'message': 'Validation errors', 'errors': errors}, HTTPStatus.BAD_REQUEST\n    ```", "```py\n            if User.get_by_username(data.get('username')):\n                return {'message': 'username already used'}, HTTPStatus.BAD_REQUEST\n            if User.get_by_email(data.get('email')):\n                return {'message': 'email already used'}, HTTPStatus.BAD_REQUEST\n            user = User(**data)\n            user.save()\n    ```", "```py\n            return user_schema.dump(user).data, HTTPStatus.CREATED\n    ```", "```py\n    class UserResource(Resource):\n        @jwt_optional\n        def get(self, username):\n            user = User.get_by_username(username=username)\n            if user is None:\n                return {'message': 'user not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user == user.id:\n                data = user_schema.dump(user).data\n            else:\n                data = user_public_schema.dump(user).data\n            return data, HTTPStatus.OK\n    ```", "```py\n    class MeResource(Resource):\n        @ jwt_required\n        def get(self): \n             user = User.get_by_id(id=get_jwt_identity())\n             return user_schema.dump(user).data, HTTPStatus.OK\n    ```", "```py\n    from marshmallow import Schema, fields, post_dump, validate, validates, ValidationError\n    class RecipeSchema(Schema):\n        class Meta:\n            ordered = True\n        id = fields.Integer(dump_only=True)\n        name = fields.String(required=True, validate=[validate.Length(max=100)])\n        description = fields.String(validate=[validate.Length(max=200)])\n        directions = fields.String(validate=[validate.Length(max=1000)])\n        is_publish = fields.Boolean(dump_only=True)\n        created_at = fields.DateTime(dump_only=True)\n        updated_at = fields.DateTime(dump_only=True)\n    ```", "```py\n    def validate_num_of_servings(n):\n        if n < 1:\n            raise ValidationError('Number of servings must be greater than 0.')\n        if n > 50:\n            raise ValidationError('Number of servings must not be greater than 50.')\n    ```", "```py\n    num_of_servings = fields.Integer(validate=validate_num_of_servings)\n    ```", "```py\n    cook_time = fields.Integer()\n    ```", "```py\n        @validates('cook_time')\n        def validate_cook_time(self, value):\n            if value < 1:\n                raise ValidationError('Cook time must be greater than 0.')\n            if value > 300:\n                raise ValidationError('Cook time must not be greater than 300.')\n    ```", "```py\n    from schemas.user import UserSchema\n    ```", "```py\n    author = fields.Nested(UserSchema, attribute='user', dump_only=True, only=['id', 'username'])\n    ```", "```py\n        @post_dump(pass_many=True)\n        def wrap(self, data, many, **kwargs):\n            if many:\n                return {'data': data}\n            return data\n    ```", "```py\n    from marshmallow import Schema, fields, post_dump, validate, validates, ValidationError\n    from schemas.user import UserSchema\n    def validate_num_of_servings(n):\n        if n < 1:\n            raise ValidationError('Number of servings must be greater than 0.')\n        if n > 50:\n            raise ValidationError('Number of servings must not be greater than 50.')\n    class RecipeSchema(Schema):\n        class Meta:\n            ordered = True\n        id = fields.Integer(dump_only=True)\n        name = fields.String(required=True, validate=[validate.Length(max=100)])\n        description = fields.String(validate=[validate.Length(max=200)])\n        num_of_servings = fields.Integer(validate=validate_num_of_servings)\n        cook_time = fields.Integer()\n        directions = fields.String(validate=[validate.Length(max=1000)])\n        is_publish = fields.Boolean(dump_only=True)\n        author = fields.Nested(UserSchema, attribute='user', dump_only=True, only=['id', 'username'])\n        created_at = fields.DateTime(dump_only=True)\n        updated_at = fields.DateTime(dump_only=True)\n        @post_dump(pass_many=True)\n        def wrap(self, data, many, **kwargs):\n            if many:\n                return {'data': data}\n            return data\n        @validates('cook_time')\n        def validate_cook_time(self, value):\n            if value < 1:\n                raise ValidationError('Cook time must be greater than 0.')\n            if value > 300:\n                raise ValidationError('Cook time must not be greater than 300.'\n    ```", "```py\n    from schemas.recipe import RecipeSchema\n    recipe_schema = RecipeSchema()\n    recipe_list_schema = RecipeSchema(many=True)\n    ```", "```py\n    class RecipeListResource(Resource):\n        def get(self):\n            recipes = Recipe.get_all_published()\n            return recipe_list_schema.dump(recipes).data, HTTPStatus.OK\n    ```", "```py\n        @jwt_required\n        def post(self):\n            json_data = request.get_json()\n            current_user = get_jwt_identity()\n            data, errors = recipe_schema.load(data=json_data)\n            if errors:\n                return {'message': \"Validation errors\", 'errors': errors}, HTTPStatus.BAD_REQUEST\n            recipe = Recipe(**data)\n            recipe.user_id = current_user\n            recipe.save()\n            return recipe_schema.dump(recipe).data, HTTPStatus.CREATED\n    ```", "```py\n        def data(self):\n            return {\n                'id': self.id,\n                'name': self.name,\n                'description': self.description,\n                'num_of_servings': self.num_of_servings,\n                'cook_time': self.cook_time,\n                'directions': self.directions,\n                'user_id': self.user_id\n            }\n    ```", "```py\n    {\n        \"name\": \"Blueberry Smoothie\",\n        \"description\": \"This is a lovely Blueberry Smoothie\",\n        \"num_of_servings\": 2,\n        \"cook_time\": 10,\n        \"directions\": \"This is how you make it\"\n    }\n    ```", "```py\n       @jwt_required\n        def patch(self, recipe_id):\n            json_data = request.get_json()\n            data, errors = recipe_schema.load(data=json_data, partial=('name',))\n    ```", "```py\n            if errors:\n                return {'message': 'Validation errors', 'errors': errors}, HTTPStatus.BAD_REQUEST\n            recipe = Recipe.get_by_id(recipe_id=recipe_id)\n            if recipe is None:\n                return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user != recipe.user_id:\n                return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n    ```", "```py\n            recipe.name = data.get('name') or recipe.name\n            recipe.description = data.get('description') or recipe.description\n            recipe.num_of_servings = data.get('num_of_servings') or recipe.num_of_servings\n            recipe.cook_time = data.get('cook_time') or recipe.cook_time\n            recipe.directions = data.get('directions') or recipe.directions\n    ```", "```py\n            recipe.save()\n            return recipe_schema.dump(recipe).data, HTTPStatus.OK\n    ```", "```py\n    {\n        \"num_of_servings\": 4,\n        \"cook_time\": 20\n    }\n    ```", "```py\n        @classmethod\n        def get_all_by_user(cls, user_id, visibility='public'):\n            if visibility == 'public':\n                return cls.query.filter_by(user_id=user_id, is_publish=True).all()\n            elif visibility == 'private':\n                return cls.query.filter_by(user_id=user_id, is_publish=False).all()\n            else:\n                return cls.query.filter_by(user_id=user_id).all()\n    ```", "```py\n    webargs==5.4.0\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: webargs\n    Successfully installed webargs-5.4.0\n    ```", "```py\n    from flask import request\n    from flask_restful import Resource\n    from flask_jwt_extended import get_jwt_identity, jwt_required, jwt_optional\n    from http import HTTPStatus\n    from webargs import fields\n    from webargs.flaskparser import use_kwargs\n    from models.recipe import Recipe\n    from models.user import User\n    from schemas.recipe import RecipeSchema\n    from schemas.user import UserSchema\n    ```", "```py\n    recipe_list_schema = RecipeSchema(many=True)\n    ```", "```py\n    class UserRecipeListResource(Resource):\n        @jwt_optional\n        @use_kwargs('visibility': fields.Str(missing='public')})\n        def get(self, username, visibility):\n    ```", "```py\n    def get(self, username, visibility):\n            user = User.get_by_username(username=username)\n            if user is None:\n                return {'message': 'User not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user == user.id and visibility in ['all', 'private']:\n                pass\n            else:\n                visibility = 'public'\n            recipes = Recipe.get_all_by_user(user_id=user.id, visibility=visibility)\n            return recipe_list_schema.dump(recipes).data, HTTPStatus.OK\n    ```", "```py\n    from resources.user import UserListResource, UserResource, MeResource, UserRecipeListResource\n    ```", "```py\n    api.add_resource(UserListResource, '/users')\n    api.add_resource(UserResource, '/users/<string:username>')\n    api.add_resource(UserRecipeListResource, '/users/<string:username>/recipes')\n    ```"]