- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Using Python with NoSQL (DynamoDB)
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Python与NoSQL（DynamoDB）
- en: In this chapter, we are going to learn how to create a NoSQL database with DynamoDB.
    After creating the database, we will carry out a database operation in DynamoDB
    using Python. **NoSQL** is a database type that is used to manage data more flexibly
    than a relational database. In relational databases, there are tables and predefined
    data types that can be used for database operations. In NoSQL, you can store JSON,
    raw, or key-value data, depending on the NoSQL database. Let’s deep-dive into
    NoSQL databases.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习如何使用DynamoDB创建NoSQL数据库。在创建数据库后，我们将使用Python在DynamoDB中执行数据库操作。**NoSQL**是一种数据库类型，它比关系型数据库更灵活地管理数据。在关系型数据库中，有表和预定义的数据类型，可用于数据库操作。在NoSQL中，你可以根据NoSQL数据库存储JSON、原始数据或键值数据。让我们深入了解NoSQL数据库。
- en: 'The chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: What is a NoSQL database?
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是NoSQL数据库？
- en: What is a DynamoDB database?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是DynamoDB数据库？
- en: DynamoDB operations with Python
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python进行DynamoDB操作
- en: What is a NoSQL database?
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是NoSQL数据库？
- en: A NoSQL database is used to store unstructured data. The idea comes from big
    data; most applications and devices create data, and this data is valuable if
    you store and process it afterward. The volume of data is increasing day by day,
    and we need to store this data. Think about new cars; they have different devices
    to store data. We can extend our example to white goods, social media, and so
    on. In general, relational databases are useful for structured data and a level
    of records that runs into the millions. Thus, when it comes to handling millions
    of records as well as unstructured data, NoSQL is useful.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: NoSQL数据库用于存储非结构化数据。这个想法来源于大数据；大多数应用程序和设备都会创建数据，如果你在之后存储和处理这些数据，那么这些数据就很有价值。数据的量每天都在增加，我们需要存储这些数据。想想新汽车；它们有不同设备来存储数据。我们可以将这个例子扩展到家电、社交媒体等等。一般来说，关系型数据库适用于结构化数据以及达到数百万级别的记录级别。因此，当涉及到处理数百万条记录以及非结构化数据时，NoSQL数据库很有用。
- en: 'The following figure shows how different data sources can be generated to be
    stored in a NoSQL database. We have social media resources and machines in cars
    and planes that generate different data formats:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 下图显示了如何生成不同的数据源以存储在NoSQL数据库中。我们有社交媒体资源和汽车和飞机中的机器，它们生成不同的数据格式：
- en: '![](img/Figure_10.1_B19195.jpg)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.1_B19195.jpg)'
- en: Figure 10.1 – NoSQL
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – NoSQL
- en: There are different types of NoSQL databases.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同类型的NoSQL数据库。
- en: Key-value database
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 键值数据库
- en: 'In this NoSQL database type, you can access data based on keys. For example,
    you have customer ID as a key, and address, age, and family information as values.
    When you need to access the value, you just provide the key as a query parameter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种NoSQL数据库类型中，你可以根据键访问数据。例如，你有一个客户ID作为键，地址、年龄和家庭信息作为值。当你需要访问值时，只需提供键作为查询参数：
- en: '![](img/Figure_10.2_B19195.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.2_B19195.jpg)'
- en: Figure 10.2 – A key-value database
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – 键值数据库
- en: A key-value database is useful and even works on billions of records. We will
    investigate DynamoDB, which is a key-value database, in an upcoming section.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 键值数据库很有用，甚至可以处理数十亿条记录。我们将在下一节中研究DynamoDB，它是一种键值数据库。
- en: Document database
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档数据库
- en: 'A document database is another type of NoSQL database that can store unstructured
    data such as JSON. It is useful if you need to store unstructured big data and
    retrieve data with different parameters:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 文档数据库是另一种可以存储非结构化数据（如JSON）的NoSQL数据库。如果你需要存储非结构化的大数据并使用不同的参数检索数据，它很有用：
- en: '![](img/Figure_10.3_B19195.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.3_B19195.jpg)'
- en: Figure 10.3 – Document database
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 文档数据库
- en: 'You can see the sample JSON as follows:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以如下看到示例JSON：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'There are other types of NoSQL databases, such as graph and column, but we
    won’t focus on them in this book. I would recommend reading more over here: [https://en.wikipedia.org/wiki/NoSQL](https://en.wikipedia.org/wiki/NoSQL).'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他类型的NoSQL数据库，例如图数据库和列数据库，但在这本书中我们不会重点介绍它们。我建议在这里阅读更多内容：[https://en.wikipedia.org/wiki/NoSQL](https://en.wikipedia.org/wiki/NoSQL)。
- en: We have learned the definition of a NoSQL database and taken a look at some
    types of NoSQL databases. For the next step, we will focus on DynamoDB, which
    is one type of key-value database.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经学习了NoSQL数据库的定义，并查看了一些NoSQL数据库的类型。接下来，我们将专注于DynamoDB，它是一种键值数据库。
- en: What is a DynamoDB database?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是DynamoDB数据库？
- en: A **DynamoDB database** is a key-value NoSQL database that is managed by AWS.
    When you use DynamoDB, you don’t need to create a new database. You don’t need
    to provision a server either; it is fully managed by AWS. It is one of the most
    popular cloud-based NoSQL databases, and the performance is very good if you are
    using key-based access. The main advantage is that you can access data within
    a latency of milliseconds along with billions of records.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**DynamoDB 数据库**是一个由 AWS 管理的键值 NoSQL 数据库。当您使用 DynamoDB 时，您不需要创建新的数据库。您也不需要配置服务器；它由
    AWS 完全管理。这是最受欢迎的基于云的 NoSQL 数据库之一，如果您使用基于键的访问，性能非常好。主要优势是您可以以毫秒级的延迟访问数十亿条记录。'
- en: 'These are the features of DynamoDB:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是 DynamoDB 的功能：
- en: Fully managed by AWS
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由 AWS 完全管理
- en: Autoscaling without any configuration
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无配置的自动扩展
- en: Built-in integration with other AWS services
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 与其他 AWS 服务内置集成
- en: Supports monitoring and logging
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持监控和日志记录
- en: Supports database backup and restoration
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持数据库备份和恢复
- en: Pay-as-you-go model – you pay for how much you use from this service
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按使用付费模式 – 您为使用此服务所支付的金额付费
- en: Creating a DynamoDB database
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 DynamoDB 数据库
- en: 'In this subtopic, we are going to create a DynamoDB database. Let’s follow
    the instructions step by step:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在本子主题中，我们将创建一个 DynamoDB 数据库。让我们一步一步地遵循说明：
- en: 'Type `DynamoDB` into the search box and click the **DynamoDB** option that
    appears under the **Services** section:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`DynamoDB`，然后点击**服务**部分下出现的**DynamoDB**选项：
- en: '![](img/Figure_10.4_B19195.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.4_B19195.jpg)'
- en: Figure 10.4 – Console search
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.4 – 控制台搜索
- en: 'Click **Tables** on the left side, and then click the **Create** **table**
    button:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在左侧点击**表**，然后点击**创建** **表**按钮：
- en: '![](img/Figure_10.5_B19195.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.5_B19195.jpg)'
- en: Figure 10.5 – Create table
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.5 – 创建表
- en: 'Fill out the **Table name**, **Partition key**, and **Sort key** details in
    order to create the table:'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写**表名**、**分区键**和**排序键**详细信息以创建表：
- en: '![](img/Figure_10.6_B19195.jpg)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.6_B19195.jpg)'
- en: Figure 10.6 – Table details – part 1
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 表详情 – 第一部分
- en: '**Table name** represents the name of the table. We will create a sample customer
    table.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '**表名**代表表的名称。我们将创建一个示例客户表。'
- en: '**Partition key** is going to be used as a primary key. DynamoDB is a key-value
    database; hence, you can easily search for data based on the key. In this case,
    we will use **customer_id** as a primary key.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**分区键**将被用作主键。DynamoDB 是一个键值数据库；因此，您可以根据键轻松搜索数据。在这种情况下，我们将使用**customer_id**作为主键。'
- en: DynamoDB allows you to search with a sort key in addition to the partition key.
    We will use **customer_mail** in the **Sort key** field.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: DynamoDB 允许您使用分区键以外的排序键进行搜索。我们将在**排序键**字段中使用**customer_mail**。
- en: 'Scroll down and fill out **Capacity mode**, **Read capacity**, **Write capacity**,
    **Auto scaling**, **Local secondary indexes**, and **Global secondary indexes**.
    For the input, keep the following default values as is:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向下滚动并填写**容量模式**、**读取容量**、**写入容量**、**自动扩展**、**本地二级索引**和**全局二级索引**。对于输入，保持以下默认值不变：
- en: '![](img/Figure_10.7_B19195.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.7_B19195.jpg)'
- en: Figure 10.7 – Table details – part 2
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.7 – 表详情 – 第二部分
- en: '**Capacity mode** defines the reserved capacity for the table. If you select
    the provisioned mode, AWS reserves your predefined capacity to be used by the
    queries. Another option is to define on-demand for unplanned capacity reservations.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '**容量模式**定义了表的预留容量。如果您选择预配模式，AWS 会为查询预留您预定义的容量。另一个选项是定义按需以进行未计划的容量预留。'
- en: '**Read capacity** and **write capacity** define how many read and write requests
    are supported for this table.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**读取容量**和**写入容量**定义了此表支持的读取和写入请求数量。'
- en: Regarding **Auto scaling**, AWS manages the scaling feature.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 关于**自动扩展**，AWS 管理扩展功能。
- en: '**Local secondary indexes** and **Global secondary indexes** are used if you
    need more index values in addition to the primary key and sort key. The local
    secondary index allows you to create an additional index that has the same partition
    ID with a different sort key from the base table. You need to define this during
    table creation. On the other hand, a global secondary index allows you to create
    an index that can have a different partition ID and sort key from the base primary
    key.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**本地二级索引**和**全局二级索引**在您需要比主键和排序键更多的索引值时使用。本地二级索引允许您创建一个具有与基础表相同的分区 ID 但具有不同排序键的附加索引。您需要在创建表时定义此索引。另一方面，全局二级索引允许您创建一个可以具有与基础主键不同的分区
    ID 和排序键的索引。'
- en: 'Click **Create table**, as you saw in the previous screenshot, and you will
    see the created table in the list:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建表格**，如您在上一张截图中所见，您将在列表中看到创建的表格：
- en: '![](img/Figure_10.8_B19195.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.8_B19195](img/Figure_10.8_B19195.jpg)'
- en: Figure 10.8 – The table list
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.8 – 表格列表
- en: 'Let’s insert one of the items via the AWS Management Console. Select **customer**
    under the **Tables** list:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们通过 AWS 管理控制台插入一个条目。在 **表格** 列表下选择 **customer**：
- en: '![](img/Figure_10.9_B19195.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.9_B19195](img/Figure_10.9_B19195.jpg)'
- en: Figure 10.9 – Customer table
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.9 – 客户表
- en: 'You will see the details of the table:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到表格的详细信息：
- en: '![](img/Figure_10.10_B19195.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.10_B19195](img/Figure_10.10_B19195.jpg)'
- en: Figure 10.10 – Table details
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.10 – 表格详情
- en: 'Click the **Actions** drop-down button and select **Create item**:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **操作** 下拉按钮并选择 **创建条目**：
- en: '![](img/Figure_10.11_B19195.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.11_B19195](img/Figure_10.11_B19195.jpg)'
- en: Figure 10.11 – Create item
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.11 – 创建条目
- en: 'After clicking this, you will see an item creation page, titled **Create item**.
    You can fill out a form or insert the JSON directly. In this example, we will
    insert the code via **JSON view**. DynamoDB creates a template for you:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击此按钮后，您将看到一个标题为 **创建条目** 的条目创建页面。您可以通过填写表单或直接插入 JSON 来操作。在这个例子中，我们将通过 **JSON
    视图** 插入代码。DynamoDB 为您创建了一个模板：
- en: '![](img/Figure_10.12_B19195.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.12_B19195](img/Figure_10.12_B19195.jpg)'
- en: Figure 10.12 – The JSON view
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.12 – JSON 视图
- en: 'Paste the following JSON as an example:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下 JSON 作为示例粘贴：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The JSON is simple and consists of `customer_id`, `customer_mail`, `name`, and
    `address` information.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 文件很简单，包含 `customer_id`、`customer_mail`、`name` 和 `address` 信息。
- en: 'Click **Create item**:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建条目**：
- en: '![](img/Figure_10.13_B19195.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.13_B19195](img/Figure_10.13_B19195.jpg)'
- en: Figure 10.13 – Creating an item
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.13 – 创建条目
- en: 'After the creation, you will be forwarded to the **Tables** page:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 创建后，您将被重定向到 **表格** 页面：
- en: '![](img/Figure_10.14_B19195.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.14_B19195](img/Figure_10.14_B19195.jpg)'
- en: Figure 10.14 – The item list
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.14 – 条目列表
- en: 'Since you are using NoSQL, you can also insert the JSON, which is a different
    format from the previous JSON that we inserted. The following JSON is also valid
    for the customer table:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您使用的是 NoSQL，您也可以插入 JSON，这与我们之前插入的 JSON 格式不同。以下 JSON 也适用于客户表：
- en: '[PRE2]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: As you see, we have removed the `address` field and added `profession` as a
    new field without any issue.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，我们已经删除了 `address` 字段并添加了 `profession` 作为新字段，没有任何问题。
- en: In this section, we have created a DynamoDB table and inserted data via the
    console. As you can see, DynamoDB is a key-value database and you can insert different
    JSON formats, which provides flexibility.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经通过控制台创建了一个 DynamoDB 表并插入了数据。如您所见，DynamoDB 是一个键值数据库，您可以插入不同的 JSON 格式，这提供了灵活性。
- en: DynamoDB operations with Python
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行 DynamoDB 操作
- en: 'In this section, we are going to read the DynamoDB table via Python. To execute
    a Python function, we will implement a Lambda function to read data from DynamoDB.
    Carry out the following steps:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过 Python 读取 DynamoDB 表。为了执行 Python 函数，我们将实现一个 Lambda 函数来从 DynamoDB
    读取数据。执行以下步骤：
- en: 'We will create the required permissions to allow Lambda to read from DynamoDB.
    Open IAM and click **Policies** on the left-hand side:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将创建所需的权限以允许 Lambda 从 DynamoDB 读取。打开 IAM 并在左侧点击 **策略**：
- en: '![](img/Figure_10.15_B19195.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.15_B19195](img/Figure_10.15_B19195.jpg)'
- en: Figure 10.15 – IAM policies
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.15 – IAM 策略
- en: 'Click **Create policy**:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建策略**：
- en: '![](img/Figure_10.16_B19195.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.16_B19195](img/Figure_10.16_B19195.jpg)'
- en: Figure 10.16 – Creating a policy
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.16 – 创建策略
- en: 'Paste the following policy:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 粘贴以下策略：
- en: '[PRE3]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The policy allows you to read from the DynamoDB table. In general, the following
    access policy works for you as well; however, you need to change the account ID
    that you have, because every AWS account has a different account ID:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 该策略允许您从 DynamoDB 表中读取。一般来说，以下访问策略也适用于您；然而，您需要更改您拥有的账户 ID，因为每个 AWS 账户都有一个不同的账户
    ID：
- en: '![](img/Figure_10.17_B19195.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.17_B19195](img/Figure_10.17_B19195.jpg)'
- en: Figure 10.17 – A DynamoDB policy
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.17 – DynamoDB 策略
- en: 'You can add the policy name and finish creating the policy. In this example,
    I am using **DynamoDBCustomerTableOperations** as a policy name:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以添加策略名称并完成策略的创建。在这个例子中，我使用 **DynamoDBCustomerTableOperations** 作为策略名称：
- en: '![](img/Figure_10.18_B19195.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.18_B19195](img/Figure_10.18_B19195.jpg)'
- en: Figure 10.18 – Policy creation
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.18 – 策略创建
- en: 'We now need to create a role. This role will be attached to Lambda to access
    DynamoDB. Click **Create role** in the IAM service:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要创建一个角色。这个角色将被附加到 Lambda 以访问 DynamoDB。在 IAM 服务中点击 **创建角色**：
- en: '![](img/Figure_10.19_B19195.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.19_B19195](img/Figure_10.19_B19195.jpg)'
- en: Figure 10.19 – The IAM role
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.19 – IAM 角色
- en: 'Since we need a policy for Lambda, select **Lambda** in the **Use** **case**
    section:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们需要 Lambda 的策略，所以在**用途**部分选择**Lambda**：
- en: '![](img/Figure_10.20_B19195.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.20_B19195.jpg)'
- en: Figure 10.20 – The IAM role for Lambda
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.20 – Lambda 的 IAM 角色
- en: 'As depicted in the following screenshot, add the policy that we created to
    access Lambda:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如以下截图所示，添加我们创建的用于访问 Lambda 的策略：
- en: '![](img/Figure_10.21_B19195.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.21_B19195.jpg)'
- en: Figure 10.21 – Selecting the policy
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.21 – 选择策略
- en: 'Fill in **Role name** and create the role. As you see, the name we have given
    to the Lambda function is **DynamoDBCustomerTableRole**. Scroll down and click
    the **Create** **role** button:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 填写**角色名称**并创建角色。如您所见，我们给 Lambda 函数取的名字是**DynamoDBCustomerTableRole**。向下滚动并点击**创建****角色**按钮：
- en: '![](img/Figure_10.22_B19195.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.22_B19195.jpg)'
- en: Figure 10.22 – Creating a role
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.22 – 创建角色
- en: 'The `readFromDynamoDB` to **Function name** and **Python 3.9** to **Runtime**:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `readFromDynamoDB` 到**函数名称**和**Python 3.9**到**运行时**：
- en: '![](img/Figure_10.23_B19195.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.23_B19195.jpg)'
- en: Figure 10.23 – Creating a function
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.23 – 创建函数
- en: 'At the bottom of the preceding page, there is a panel to define the execution
    policy. Select **Use an existing role** under the **Execution role** section and
    select the role that we created:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一页的底部，有一个用于定义执行策略的面板。在**执行角色**部分下选择**使用现有角色**，并选择我们创建的角色：
- en: '![](img/Figure_10.24_B19195.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.24_B19195.jpg)'
- en: Figure 10.24 – Selecting the role
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.24 – 选择角色
- en: 'Lambda is ready to fill out a code block:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda 准备填写代码块：
- en: '![](img/Figure_10.25_B19195.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.25_B19195.jpg)'
- en: Figure 10.25 – The Lambda function
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.25 – Lambda 函数
- en: 'Paste the following code into the Lambda function:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码粘贴到 Lambda 函数中：
- en: '[PRE4]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The code imports the `boto3` library, which provides useful functions for DynamoDB
    operations. `boto3` is a library that includes AWS service-specific features to
    facilitate the implementation of cloud applications while working with Python
    on AWS. You can get more details from the following link: [https://boto3.amazonaws.com/v1/documentation/api/latest/index.xhtml](https://boto3.amazonaws.com/v1/documentation/api/latest/index.xhtml).'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 代码导入 `boto3` 库，该库为 DynamoDB 操作提供了有用的函数。`boto3` 是一个库，它包含 AWS 服务特定的功能，以便在 AWS
    上使用 Python 实现云应用程序。您可以从以下链接获取更多详细信息：[https://boto3.amazonaws.com/v1/documentation/api/latest/index.xhtml](https://boto3.amazonaws.com/v1/documentation/api/latest/index.xhtml)。
- en: As a first step, we define the `dynamodb` resource by calling the `boto3.resource`
    function. After calling that, we define the table that we read; it is the `dynamodb.Table`
    table. Once you define the table, the `table.get_item` function takes the primary
    key and sort key as a parameter and returns the query results.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一步，我们通过调用 `boto3.resource` 函数定义 `dynamodb` 资源。调用之后，我们定义了我们读取的表；它是 `dynamodb.Table`
    表。一旦定义了表，`table.get_item` 函数将主键和排序键作为参数，并返回查询结果。
- en: 'Once you run the Lambda function, you are able to see the result:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦运行 Lambda 函数，您就能看到结果：
- en: '![](img/Figure_10.26_B19195.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_10.26_B19195.jpg)'
- en: Figure 10.26 – Execution results
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.26 – 执行结果
- en: Congratulations! You are able to define the role and retrieve an item from Lambda.
    As you can see, AWS requires some configuration to access data in DynamoDB.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！您能够定义角色并从 Lambda 中检索项目。如您所见，AWS 需要一些配置才能访问 DynamoDB 中的数据。
- en: Summary
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned about the AWS DynamoDB service and how to create
    a DynamoDB database in AWS. After creating the database, we implemented a Lambda
    Python code snippet that read items from DynamoDB. You now also know how to extend
    the Lambda code to insert data into a DynamoDB table. DynamoDB is useful when
    you need to implement a key-value database that is managed by AWS. It comes with
    scalability, logging, and monitoring advantages. In the following chapter, we
    will take a look at the Glue service.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了 AWS DynamoDB 服务以及如何在 AWS 中创建 DynamoDB 数据库。创建数据库后，我们实现了一个 Lambda Python
    代码片段，用于从 DynamoDB 中读取项目。您现在也知道如何扩展 Lambda 代码以将数据插入到 DynamoDB 表中。当您需要实现一个由 AWS
    管理的键值数据库时，DynamoDB 非常有用。它具有可扩展性、日志记录和监控优势。在下一章中，我们将探讨 Glue 服务。
