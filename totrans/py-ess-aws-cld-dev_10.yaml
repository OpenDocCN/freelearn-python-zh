- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using Python with NoSQL (DynamoDB)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to create a NoSQL database with DynamoDB.
    After creating the database, we will carry out a database operation in DynamoDB
    using Python. **NoSQL** is a database type that is used to manage data more flexibly
    than a relational database. In relational databases, there are tables and predefined
    data types that can be used for database operations. In NoSQL, you can store JSON,
    raw, or key-value data, depending on the NoSQL database. Let’s deep-dive into
    NoSQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is a NoSQL database?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a DynamoDB database?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: DynamoDB operations with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is a NoSQL database?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A NoSQL database is used to store unstructured data. The idea comes from big
    data; most applications and devices create data, and this data is valuable if
    you store and process it afterward. The volume of data is increasing day by day,
    and we need to store this data. Think about new cars; they have different devices
    to store data. We can extend our example to white goods, social media, and so
    on. In general, relational databases are useful for structured data and a level
    of records that runs into the millions. Thus, when it comes to handling millions
    of records as well as unstructured data, NoSQL is useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following figure shows how different data sources can be generated to be
    stored in a NoSQL database. We have social media resources and machines in cars
    and planes that generate different data formats:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.1_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – NoSQL
  prefs: []
  type: TYPE_NORMAL
- en: There are different types of NoSQL databases.
  prefs: []
  type: TYPE_NORMAL
- en: Key-value database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this NoSQL database type, you can access data based on keys. For example,
    you have customer ID as a key, and address, age, and family information as values.
    When you need to access the value, you just provide the key as a query parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.2_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – A key-value database
  prefs: []
  type: TYPE_NORMAL
- en: A key-value database is useful and even works on billions of records. We will
    investigate DynamoDB, which is a key-value database, in an upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: Document database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A document database is another type of NoSQL database that can store unstructured
    data such as JSON. It is useful if you need to store unstructured big data and
    retrieve data with different parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.3_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Document database
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the sample JSON as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'There are other types of NoSQL databases, such as graph and column, but we
    won’t focus on them in this book. I would recommend reading more over here: [https://en.wikipedia.org/wiki/NoSQL](https://en.wikipedia.org/wiki/NoSQL).'
  prefs: []
  type: TYPE_NORMAL
- en: We have learned the definition of a NoSQL database and taken a look at some
    types of NoSQL databases. For the next step, we will focus on DynamoDB, which
    is one type of key-value database.
  prefs: []
  type: TYPE_NORMAL
- en: What is a DynamoDB database?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **DynamoDB database** is a key-value NoSQL database that is managed by AWS.
    When you use DynamoDB, you don’t need to create a new database. You don’t need
    to provision a server either; it is fully managed by AWS. It is one of the most
    popular cloud-based NoSQL databases, and the performance is very good if you are
    using key-based access. The main advantage is that you can access data within
    a latency of milliseconds along with billions of records.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the features of DynamoDB:'
  prefs: []
  type: TYPE_NORMAL
- en: Fully managed by AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autoscaling without any configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Built-in integration with other AWS services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports monitoring and logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supports database backup and restoration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pay-as-you-go model – you pay for how much you use from this service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a DynamoDB database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this subtopic, we are going to create a DynamoDB database. Let’s follow
    the instructions step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `DynamoDB` into the search box and click the **DynamoDB** option that
    appears under the **Services** section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.4_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Console search
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Tables** on the left side, and then click the **Create** **table**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.5_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Create table
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill out the **Table name**, **Partition key**, and **Sort key** details in
    order to create the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.6_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Table details – part 1
  prefs: []
  type: TYPE_NORMAL
- en: '**Table name** represents the name of the table. We will create a sample customer
    table.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Partition key** is going to be used as a primary key. DynamoDB is a key-value
    database; hence, you can easily search for data based on the key. In this case,
    we will use **customer_id** as a primary key.'
  prefs: []
  type: TYPE_NORMAL
- en: DynamoDB allows you to search with a sort key in addition to the partition key.
    We will use **customer_mail** in the **Sort key** field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Scroll down and fill out **Capacity mode**, **Read capacity**, **Write capacity**,
    **Auto scaling**, **Local secondary indexes**, and **Global secondary indexes**.
    For the input, keep the following default values as is:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.7_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Table details – part 2
  prefs: []
  type: TYPE_NORMAL
- en: '**Capacity mode** defines the reserved capacity for the table. If you select
    the provisioned mode, AWS reserves your predefined capacity to be used by the
    queries. Another option is to define on-demand for unplanned capacity reservations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Read capacity** and **write capacity** define how many read and write requests
    are supported for this table.'
  prefs: []
  type: TYPE_NORMAL
- en: Regarding **Auto scaling**, AWS manages the scaling feature.
  prefs: []
  type: TYPE_NORMAL
- en: '**Local secondary indexes** and **Global secondary indexes** are used if you
    need more index values in addition to the primary key and sort key. The local
    secondary index allows you to create an additional index that has the same partition
    ID with a different sort key from the base table. You need to define this during
    table creation. On the other hand, a global secondary index allows you to create
    an index that can have a different partition ID and sort key from the base primary
    key.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create table**, as you saw in the previous screenshot, and you will
    see the created table in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.8_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – The table list
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s insert one of the items via the AWS Management Console. Select **customer**
    under the **Tables** list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.9_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.9 – Customer table
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see the details of the table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.10 – Table details
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Actions** drop-down button and select **Create item**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.11 – Create item
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking this, you will see an item creation page, titled **Create item**.
    You can fill out a form or insert the JSON directly. In this example, we will
    insert the code via **JSON view**. DynamoDB creates a template for you:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.12 – The JSON view
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following JSON as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The JSON is simple and consists of `customer_id`, `customer_mail`, `name`, and
    `address` information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create item**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.13 – Creating an item
  prefs: []
  type: TYPE_NORMAL
- en: 'After the creation, you will be forwarded to the **Tables** page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.14 – The item list
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you are using NoSQL, you can also insert the JSON, which is a different
    format from the previous JSON that we inserted. The following JSON is also valid
    for the customer table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: As you see, we have removed the `address` field and added `profession` as a
    new field without any issue.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have created a DynamoDB table and inserted data via the
    console. As you can see, DynamoDB is a key-value database and you can insert different
    JSON formats, which provides flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: DynamoDB operations with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to read the DynamoDB table via Python. To execute
    a Python function, we will implement a Lambda function to read data from DynamoDB.
    Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create the required permissions to allow Lambda to read from DynamoDB.
    Open IAM and click **Policies** on the left-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.15 – IAM policies
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create policy**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.16 – Creating a policy
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following policy:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The policy allows you to read from the DynamoDB table. In general, the following
    access policy works for you as well; however, you need to change the account ID
    that you have, because every AWS account has a different account ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.17 – A DynamoDB policy
  prefs: []
  type: TYPE_NORMAL
- en: 'You can add the policy name and finish creating the policy. In this example,
    I am using **DynamoDBCustomerTableOperations** as a policy name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.18_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.18 – Policy creation
  prefs: []
  type: TYPE_NORMAL
- en: 'We now need to create a role. This role will be attached to Lambda to access
    DynamoDB. Click **Create role** in the IAM service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.19_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.19 – The IAM role
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we need a policy for Lambda, select **Lambda** in the **Use** **case**
    section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.20_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.20 – The IAM role for Lambda
  prefs: []
  type: TYPE_NORMAL
- en: 'As depicted in the following screenshot, add the policy that we created to
    access Lambda:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.21_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.21 – Selecting the policy
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in **Role name** and create the role. As you see, the name we have given
    to the Lambda function is **DynamoDBCustomerTableRole**. Scroll down and click
    the **Create** **role** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.22_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.22 – Creating a role
  prefs: []
  type: TYPE_NORMAL
- en: 'The `readFromDynamoDB` to **Function name** and **Python 3.9** to **Runtime**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.23_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.23 – Creating a function
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the preceding page, there is a panel to define the execution
    policy. Select **Use an existing role** under the **Execution role** section and
    select the role that we created:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.24_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.24 – Selecting the role
  prefs: []
  type: TYPE_NORMAL
- en: 'Lambda is ready to fill out a code block:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_10.25_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.25 – The Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'Paste the following code into the Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The code imports the `boto3` library, which provides useful functions for DynamoDB
    operations. `boto3` is a library that includes AWS service-specific features to
    facilitate the implementation of cloud applications while working with Python
    on AWS. You can get more details from the following link: [https://boto3.amazonaws.com/v1/documentation/api/latest/index.xhtml](https://boto3.amazonaws.com/v1/documentation/api/latest/index.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: As a first step, we define the `dynamodb` resource by calling the `boto3.resource`
    function. After calling that, we define the table that we read; it is the `dynamodb.Table`
    table. Once you define the table, the `table.get_item` function takes the primary
    key and sort key as a parameter and returns the query results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you run the Lambda function, you are able to see the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_10.26_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.26 – Execution results
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You are able to define the role and retrieve an item from Lambda.
    As you can see, AWS requires some configuration to access data in DynamoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the AWS DynamoDB service and how to create
    a DynamoDB database in AWS. After creating the database, we implemented a Lambda
    Python code snippet that read items from DynamoDB. You now also know how to extend
    the Lambda code to insert data into a DynamoDB table. DynamoDB is useful when
    you need to implement a key-value database that is managed by AWS. It comes with
    scalability, logging, and monitoring advantages. In the following chapter, we
    will take a look at the Glue service.
  prefs: []
  type: TYPE_NORMAL
