["```py\nimport http.client\nimport contextlib\n\npath_list = [\n    \"/wikipedia/commons/7/72/IPhone_Internals.jpg\",\n    \"/wikipedia/en/c/c1/1drachmi_1973.jpg\",\n]\nhost = \"upload.wikimedia.org\"\n\nwith contextlib.closing(http.client.HTTPConnection( host )) as connection:\n    for path in path_list:\n        connection.request( \"GET\", path )\n        response= connection.getresponse()\n        print(\"Status:\", response.status)\n        print(\"Headers:\", response.getheaders())\n        _, _, filename = path.rpartition(\"/\")\n        print(\"Writing:\", filename)\n        with open(filename, \"wb\") as image:\n            image.write( response.read() )\n```", "```py\nMozilla/5.0 (Macintosh; Intel Mac OS X 10_9_2) AppleWebKit/537.75.14 (KHTML, like Gecko) Version/7.0.3 Safari/537.75.14\n```", "```py\nMozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:28.0) Gecko/20100101 Firefox/28.0\n```", "```py\nMozilla/5.0 (iPhone; CPU iPhone OS 7_1_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D201 Safari/9537.53\n```", "```py\nconnection.request( \"GET\", path, headers= {\n    'User-Agent':\n        'Mozilla/5.0 (iPhone; CPU iPhone OS 7_1_1 like Mac OS X) AppleWebKit/537.51.2 (KHTML, like Gecko) Version/7.0 Mobile/11D201 Safari/9537.53',\n})\n```", "```py\nimport ftplib\n\nhost = \"ftp.ibiblio.org\"\nroot = \"/pub/docs/books/gutenberg/\"\n\ndef directory_list( path ):\n    with ftplib.FTP(host, user=\"anonymous\") as connection:\n        print(\"Welcome\", connection.getwelcome())\n        for name, details in connection.mlsd(path):\n            print(name, details['type'], details.get('size'))\ndirectory_list(root)\n```", "```py\nimport sys\n\ndef get( fullname, output=sys.stdout ):\n    download= 0\n    expected= 0\n    dots= 0\n    def line_save( aLine ):\n        nonlocal download, expected, dots\n        print( aLine, file=output )\n        if output != sys.stdout:\n            download += len(aLine)\n            show= (20*download)//expected\n            if show > dots:\n                print( \"-\", end=\"\", file=sys.stdout )\n                sys.stdout.flush()\n                dots= show\n    with ftplib.FTP( host, user=\"anonymous\" ) as connection:\n        print( \"Welcome\", connection.getwelcome() )\n        expected= connection.size( fullname )\n        print( \"Getting\", fullname, \"to\", output, \"size\", expected )\n        connection.retrlines( \"RETR {0}\".format(fullname), line_save )\n    if output != sys.stdout:\n        print() # End the \"dots\"   \n```", "```py\n# show the README on sys.stdout\nget(root+\"README\") \n\n# get GUTINDEX.ALL\nwith open(\"GUTINDEX.ALL\", \"w\", encoding=\"UTF-8\") as output:\n    get(root+\"GUTINDEX.ALL\", output)\n```", "```py\ndirectory_list( root+\"3/5/8/3/35830/\" )\n```", "```py\nwith open(\"35830.txt\", \"w\", encoding=\"UTF-8\") as output:\n    get(root+\"3/5/8/3/35830/\"+\"35830.txt\", output)\n```", "```py\nimport urllib.request\n\nurl_list = [\n\"http://upload.wikimedia.org/wikipedia/commons/7/72/IPhone_Internals.jpg\",\n\"http://upload.wikimedia.org/wikipedia/en/2/26/Common_face_of_one_euro_coin.jpg\",\n    ]\n\nfor url in url_list:\n    with urllib.request.urlopen( url ) as response:\n        print( \"Status:\", response.status )\n        _, _, filename = response.geturl().rpartition(\"/\")\n        print( \"Writing:\", filename )\n        with open( filename, \"wb\" ) as image:\n            image.write( response.read() )\n```", "```py\nimport sys\nimport urllib.request\nreadme= \"ftp://ftp.ibiblio.org/pub/docs/books/gutenberg/README\"\nwith urllib.request.urlopen(readme) as response:\n\n    sys.stdout.write( response.read().decode(\"ascii\") )\n```", "```py\nlocal= \"file:///Users/slott/Documents/Writing/Secret Agent's Python/currency.html\"\n```", "```py\nimport urllib.request\nimport json\nquery_currencies= \"http://www.coinbase.com/api/v1/currencies/\"\nwith urllib.request.urlopen( query_currencies ) as document:\n    print(document.info().items())\n    currencies= json.loads( document.read().decode(\"utf-8\") )\n    print(currencies)\n```", "```py\n[['Afghan Afghani (AFN)', 'AFN'], ['Albanian Lek (ALL)', 'ALL'], \n['Algerian Dinar (DZD)', 'DZD'], â€¦ ]\n```", "```py\n    scheme_netloc_path= \"https://coinbase.com/api/v1/prices/spot_rate\"\n    form= {\"currency\": currency}\n    query= urllib.parse.urlencode(form)\n```", "```py\n>>> import urllib.parse\n>>> form= {\"currency\": \"EUR\"}\n>>> urllib.parse.urlencode(form)\n'currency=EUR'\n```", "```py\n>>> form['currency']= \"Something with # or ?\"\n>>> urllib.parse.urlencode(form)\n'currency=Something+with+%23+or+%3F'\n```", "```py\nimport pprint\n```", "```py\nwith urllib.request.urlopen( scheme_netloc_path+\"?\"+query ) as document:\n    pprint.pprint( document.info().items() )\n    spot_rate= json.loads( document.read().decode(\"utf-8\") )\n```", "```py\n{'currency': 'USD', 'amount': '496.02'}\nOr this\n{'currency': 'EUR', 'amount': '361.56'}\n```", "```py\ndef get_spot_rate( currency ):\n    scheme_netloc_path= \"https://coinbase.com/api/v1/prices/spot_rate\"\n    form= {\"currency\":currency}\n    query= urllib.parse.urlencode(form)\n\n    with urllib.request.urlopen( scheme_netloc_path+\"?\"+query ) as document:\n        spot_rate= json.loads( document.read().decode(\"utf-8\") )\n    return spot_rate\n```", "```py\nrates = [\n    get_spot_rate(\"USD\"), get_spot_rate(\"GBP\"),\n    get_spot_rate(\"EUR\") ]\n```", "```py\nwith open(\"rate.json\",\"w\") as save:\n    json.dump( rates, save )\n```", "```py\n>>> cheese = [29.87, 30.12, 30.60, 30.66, 31.33, 32.62,\n...     32.73, 33.50, 32.84, 33.02,]\n>>> len(cheese)\n10\n>>> min(cheese)\n29.87\n>>> cheese.index( max(cheese) )\n7\n```", "```py\n>>> cheese.extend( [32.92, 33.27, 33.51,] )\n>>> cheese\n[29.87, 30.12, 30.6, 30.66, 31.33, 32.62, 32.73, 33.5, 32.84, 33.02, 32.92, 33.27, 33.51]\n```", "```py\n>>> cheese.sort()\n>>> cheese\n[29.87, 30.12, 30.6, 30.66, 31.33, 32.62, 32.73, 32.84, 32.92, 33.02, 33.27, 33.5, 33.51]\n```", "```py\n>>> cheese[0]\n29.87\n>>> cheese[1]\n30.12\n```", "```py\n>>> cheese[-2]\n33.5\n>>> cheese[-1]\n33.51\n```", "```py\n>>> cheese[:5]\n[29.87, 30.12, 30.6, 30.66, 31.33]\n>>> cheese[5:]\n[32.62, 32.73, 32.84, 32.92, 33.02, 33.27, 33.5, 33.51]\n```", "```py\n>>> 30.5 in cheese\nFalse\n>>> 33.5 in cheese\nTrue\n```", "```py\n>>> [1, 2, 1] < [1, 2, 2]\nTrue\n```", "```py\npower, value = 0, 1\n```", "```py\nyear_cheese = [(2000, 29.87), (2001, 30.12), (2002, 30.6), (2003, 30.66),\n    (2004, 31.33), (2005, 32.62), (2006, 32.73), (2007, 33.5),\n    (2008, 32.84), (2009, 33.02), (2010, 32.92), (2011, 33.27),\n    (2012, 33.51)]\n```", "```py\n>>> max( year_cheese, key=lambda x:x[1] )\n(2012, 33.51)\n>>> min( year_cheese, key=lambda x:x[1] )\n(2000, 29.87)\n```", "```py\n>>> (2007, 33.5)[1]\n33.5\n>>> (lambda x:x[1])( (2007, 33.5) )\n33.5\n```", "```py\ndef by_weight( yr_wt_tuple ):\n    year, weight =  yr_wt_tuple\n    return weight\n```", "```py\n>>> by_cheese = sorted( year_cheese, key=by_weight )\n>>> by_cheese\n[(2000, 29.87), (2001, 30.12), (2002, 30.6), (2003, 30.66), (2004, 31.33), (2005, 32.62), (2006, 32.73), (2008, 32.84), (2010, 32.92), (2009, 33.02), (2011, 33.27), (2007, 33.5), (2012, 33.51)]\n```", "```py\n>>> years = [ item[0] for item in year_cheese ]\n>>> years\n[2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012]\n```", "```py\n>>> years.index(2005)\n5\n>>> year_cheese[years.index(2005)]\n(2005, 32.62)\n```", "```py\n>>> spot_rate= {'currency': 'EUR', 'amount': '361.56'}\n>>> spot_rate['currency']\n'EUR'\n>>> spot_rate['amount']\n'361.56'\n>>> import decimal\n>>> decimal.Decimal(spot_rate['amount'])\nDecimal('361.56')\n```", "```py\n>>> form= {\"currency\":\"EUR\"}\n>>> form['currency']= \"USD\"\n>>> form\n{'currency': 'USD'}\n```", "```py\n>>> spot_rate['currency']\n'EUR'\n>>> spot_rate['oops']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'oops'\n>>> spot_rate.get('amount')\n'361.56'\n>>> spot_rate.get('oops')\n>>> spot_rate.get('oops', '#Missing')\n'#Missing'\n```", "```py\nfor currency in 'USD', 'EUR', 'UAH':\n    form['currency']=  currency\n    data= urllib.parse.urlencode( form )\n    ...etc...\n```", "```py\n>>> spot_rate.keys()\ndict_keys(['amount', 'currency'])\n>>> spot_rate.items()\ndict_items([('amount', '361.56'), ('currency', 'EUR')])\n>>> spot_rate.values()\ndict_values(['361.56', 'EUR'])\n```", "```py\n>>> rate_as_list= spot_rate.items()\n>>> rate_as_list  \ndict_items([('amount', '361.56'), ('currency', 'EUR')])\n```", "```py\n>>> dict(rate_as_list)\n{'amount': '361.56', 'currency': 'EUR'}\n```", "```py\n>>> 'currency' in spot_rate\nTrue\n>>> 'USD' in spot_rate\nFalse\n```", "```py\n'USD' in spot_rate.values()\n```", "```py\n>>> currencies = [['Afghan Afghani (AFN)', 'AFN'], ['Albanian Lek (ALL)', 'ALL'],  \n... ['Algerian Dinar (DZD)', 'DZD'], \n... ]\n```", "```py\n>>> dict(currencies)\n{'Afghan Afghani (AFN)': 'AFN', 'Albanian Lek (ALL)': 'ALL', 'Algerian Dinar (DZD)': 'DZD'}\n```", "```py\n>>> dict(currencies).keys()\ndict_keys(['Afghan Afghani (AFN)', 'Albanian Lek (ALL)', 'Algerian Dinar (DZD)'])\n```", "```py\n>>> [name for name, code in currencies]\n['Afghan Afghani (AFN)', 'Albanian Lek (ALL)', 'Algerian Dinar (DZD)']\n```", "```py\n>>> codes= dict( (code,name) for name,code in currencies )\n>>> codes\n{'DZD': 'Algerian Dinar (DZD)', 'ALL': 'Albanian Lek (ALL)', 'AFN': 'Afghan Afghani (AFN)'}\n>>> codes['AFN']\n'Afghan Afghani (AFN)'\n```", "```py\nfrom collections import defaultdict\ncorpus_file = \"/usr/share/dict/words\"\ndigram_count = defaultdict( int )\nwith open( corpus_file ) as corpus:\n    for line in corpus:\n        word= line.lower().strip()\n        for position in range(len(word)-1):\n            digram= word[position:position+2]\n            digram_count[digram] += 1\n```", "```py\nfrom collections import Counter\n```", "```py\ndigram_count= Counter()\n```", "```py\n>>> print( digram_count.most_common( 10 ) )\n[('er', 42507), ('in', 33718), ('ti', 31684), ('on', 29811), ('te', 29443), ('an', 28275), ('al', 28178), ('at', 27276), ('ic', 26517), ('en', 25070)]\n```", "```py\ncorpus_file = \"/usr/share/dict/words\"\nhyphenated = set()\nwith open( corpus_file ) as corpus:\n    for line in corpus:\n        word= line.lower().strip()\n        if '-' in word:\n            hyphenated.add(word)\n```", "```py\n>>> for pounds in cheese:\n...     print( pounds )\n... \n29.87\netc.\n33.51\n```", "```py\n>>> for year, pounds in year_cheese:\n...     print( year, pounds )\n... \n2000 29.87\netc.\n2012 33.51\n```", "```py\ntotal= sum( digram_count.values() )\nfor digram, count in digram_count.items():\n    print( \"{:2s} {:7d} {:.3%}\".format(digram, count, count/total) )\n```", "```py\nfor digram in digram_count:\n    print( digram, digram_count[digram], digram_count[digram]/total )\n```", "```py\n>>> [2, 3, 5, 7] + [11, 13, 17]\n[2, 3, 5, 7, 11, 13, 17]\n>>> [2, 3, 5, 7] * 2\n[2, 3, 5, 7, 2, 3, 5, 7]\n>>> [0]*10\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n```", "```py\n>>> {2, 3, 5, 7} | {5, 7, 11, 13, 17}\n{2, 3, 5, 7, 11, 13, 17}\n>>> {2, 3, 5, 7} & {5, 7, 11, 13, 17}\n{5, 7}\n>>> {2, 3, 5, 7} - {5, 7, 11, 13, 17}\n{2, 3}\n>>> {2, 3, 5, 7} ^ {5, 7, 11, 13, 17}\n{2, 3, 11, 13, 17}\n>>> {2, 3} <= {2, 5, 7, 3, 11}\nTrue\n```", "```py\n    query_exchange_rates= \"http://www.coinbase.com/api/v1/currencies/exchange_rates/\"\n\n    with urllib.request.urlopen( query_exchange_rates ) as document:\n        pprint.pprint( document.info().items() )\n        exchange_rates= json.loads( document.read().decode(\"utf-8\") )\n```", "```py\n{'aed_to_btc': '0.000552',\n 'aed_to_usd': '0.272246',\n 'afn_to_btc': '3.6e-05',\n 'afn_to_usd': '0.01763',\n```", "```py\n    from collections import defaultdict\n    rates = defaultdict(list)\n    for conversion, rate in exchange_rates.items():\n        source, _, target = conversion.upper().partition(\"_TO_\")\n        rates[source].append( (target, float(rate)) )\n```", "```py\n    for c in 'USD', 'GBP', 'EUR':\n        print( c, rates[c] )\n```", "```py\nGBP [('BTC', 0.003396), ('USD', 1.682624)]\nEUR [('BTC', 0.002768), ('USD', 1.371864)]\n```", "```py\n    currency_details = dict( (code,name) for name,code in currencies )\n    for c in 'USD', 'GBP', 'EUR':\n        print( currency_details[c], rates[c] )  \n```", "```py\nBritish Pound (GBP) [('USD', 1.682624), ('BTC', 0.003407)]\nEuro (EUR) [('USD', 1.371864), ('BTC', 0.002778)]\n```"]