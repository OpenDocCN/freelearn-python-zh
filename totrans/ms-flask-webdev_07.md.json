["```py\n{ \n  \"title\": \"First Post\", \n  \"text\": \"Lorem ipsum...\", \n  \"date\": \"2015-01-20\", \n  \"user_id\": 45 \n},\n{ \n  \"title\": \"Second Post\", \n  \"text\": \"Lorem ipsum...\", \n  \"date\": \"2015-01-20\", \n  \"user_id\": 45, \n  \"comments\": [ \n    { \n      \"name\": \"Anonymous\", \n      \"text\": \"I love this post.\" \n    } \n  ] \n} \n```", "```py\n$ mongod\n```", "```py\n$docker run -d -p 27017:27017 mongo:3.2.20-jessie\n$docker container list CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES\n4c6706af399b mongo:3.2.20-jessie \"docker-entrypoint.sâ€¦\" About a minute ago Up About a minute 0.0.0.0:27017->27017/tcp silly_ardinghelli\n```", "```py\nif [ ! -d \"venv\" ]; then\n    virtualenv venv\nfi\nsource venv/bin/activate\npip install -r requirements.txt\n```", "```py\nFlask\nFlask-MongoEngine\n```", "```py\nfrom flask_mongoengine import MongoEngine\n\nmongo = MongoEngine\n\ndef create_app(object_name):\n...\n    mongo.init_app(app)\n...\n```", "```py\nMONGODB_SETTINGS = { \n  'db': 'local', \n  'host': 'localhost', \n  'port': 27017 \n} \n```", "```py\nclass Post(mongo.Document): \n    title = mongo.StringField(required=True) \n    text = mongo.StringField() \n    publish_date = mongo.DateTimeField(default=datetime.datetime.now()) \n\n    def __repr__(self): \n        return \"<Post '{}'>\".format(self.title) \n```", "```py\n{ \n  \"_id\": \"55366ede8b84eb00232da905\", \n  \"title\": \"Post 0\", \n  \"text\": \"<p>Lorem ipsum dolor...\", \n  \"publish_date\": {\"$date\": 1425255876037} \n} \n```", "```py\nField( \n  primary_key=None \n  db_field=None, \n  required=False, \n  default=None, \n  unique=False, \n  unique_with=None, \n  choices=None \n) \n```", "```py\nclass Post(mongo.DynamicDocument): \n  title = mongo.StringField(required=True, unique=True) \n  text = mongo.StringField() \n  ... \n```", "```py\nclass Post(mongo.DynamicDocument): \n  pass \n```", "```py\nclass Comment(mongo.EmbeddedDocument):\n    name = mongo.StringField(required=True)\n    text = mongo.StringField(required=True)\n    date = mongo.DateTimeField(default=datetime.datetime.now())\n```", "```py\nclass Post(mongo.Document): \n  ... \n  meta = {'collection': 'user_posts'} \n```", "```py\nclass Post(mongo.Document): \n  ... \n  meta = { \n    'collection': 'user_posts', \n    'max_documents': 10000, \n    'max_size': 2000000 \n  } \n```", "```py\nclass Post(mongo.Document): \n  ... \n  meta = { \n    'collection': 'user_posts', \n    'max_documents': 10000, \n    'max_size': 2000000, \n    'indexes': [ \n      'title', \n      ('title', 'user') \n    ] \n  } \n```", "```py\nclass Post(mongo.Document): \n  ... \n  meta = { \n    'collection': 'user_posts', \n    'max_documents': 10000, \n    'max_size': 2000000, \n    'indexes': [ \n      'title', \n      ('title', 'user') \n    ], \n    'ordering': ['-publish_date'] \n  } \n```", "```py\nclass Post(mongo.Document): \n  ... \n  meta = {'allow_inheritance': True} \n\nclass Announcement(Post): \n  ... \n```", "```py\n>>> post = Post()\n>>> post.title = \"Post From The Console\"\n>>> post.text = \"Lorem Ipsum...\"\n>>> post.save()\n```", "```py\n>>> post = Post(title=\"Post From Console\", text=\"Lorem Ipsum...\")\n```", "```py\n>>> post.save(cascade=True)\n```", "```py\n>>> post.save(validate=False)\n```", "```py\n# will not wait for write and not notify client if there was an error\n>>> post.save(write_concern={\"w\": 0})\n# default behavior, will not wait for write\n>>> post.save(write_concern={\"w\": 1})\n# will wait for write\n>>> post.save(write_concern={\"w\": 1, \"j\": True})\n```", "```py\n>>> Post.objects.all()\n[<Post: \"Post From The Console\">]\n```", "```py\n# only return five items\n>>> Post.objects.limit(5).all()\n```", "```py\n# skip the first 5 items and return items 6-10\n>>> Post.objects.skip(5).limit(5).all()\n```", "```py\n# ascending\n>>> Post.objects.order_by(\"+publish_date\").all()\n# descending\n>>> Post.objects.order_by(\"-publish_date\").all()\n```", "```py\n>>> Post.objects.first()\n<Post: \"Post From The Console\">\n>>> Post.objects.first_or_404()\n<Post: \"Post From The Console\">\n```", "```py\n# The id value will be different your document\n>>> Post.objects(id=\"5534451d8b84ebf422c2e4c8\").get()\n<Post: \"Post From The Console\">\n>>> Post.objects(id=\"5534451d8b84ebf422c2e4c8\").get_or_404()\n<Post: \"Post From The Console\">\n```", "```py\n>>> page = Post.objects.paginate(1, 10)\n>>> page.items()\n[<Post: \"Post From The Console\">]\n```", "```py\n>>> Post.objects(title=\"Post From The Console\").first()\n<Post: \"Post From The Console\">\n```", "```py\n>>> Post.objects(\n        publish_date__gt=datetime.datetime(2015, 1, 1)\n).all()\n[<Post: \"Post From The Console\">]\n```", "```py\n>>> Post.objects(\n        title__not__icontains=\"post\",\n        text__istartswith=\"Lorem\",\n        publish_date__gt=datetime.datetime(2015, 1, 1),\n).order_by(\"-publish_date\").all()\n```", "```py\n>>> Post.objects(__raw__={\"title\": \"Post From The Console\"})\n```", "```py\n>>> Post.objects(\n        id=\"5534451d8b84ebf422c2e4c8\"\n).update(text=\"Ipsum lorem\")\n```", "```py\n>>> Post.objects(\n        id=\"5534451d8b84ebf422c2e4c8\"\n).update_one(text=\"Ipsum lorem\")\n```", "```py\n>>> Post.objects(\n        tags__in=\"MongoEngine\",\n        tags__not__in=\"Python\"\n).update(push__tags=\"Python\")\n```", "```py\n>>> Post.objects(\n        tags__in=\"MongoEngine\"\n      ).update(push__tags=\"Python\", write_concern={\"w\": 1, \"j\": True})\n```", "```py\n>>> post = Post.objects(\n        id=\"5534451d8b84ebf422c2e4c8\"\n).first()\n>>> post.delete()\n\n```", "```py\nclass Post(mongo.Document): \n  ... \n  user = mongo.ReferenceField(User) \n```", "```py\n>>> user = User.objects.first()\n>>> post = Post.objects.first()\n>>> post.user = user\n>>> post.save()\n>>> post.user\n<User Jack>\n```", "```py\n>>> user = User.objects.first()\n>>> Post.objects(user__id=user.id)\n```", "```py\nclass Post(mongo.Document): \n    title = mongo.StringField(required=True) \n    text = mongo.StringField() \n    publish_date = mongo.DateTimeField(default=datetime.datetime.now()) \n    user = mongo.ReferenceField(User) \n    comments = mongo.ListField(mongo.EmbeddedDocumentField(Comment)) \n```", "```py\n>>> comment = Comment()\n>>> comment.name = \"Jack\"\n>>> comment.text = \"I really like this post!\"\n>>> post.comments.append(comment)\n>>> post.save()\n>>> post.comments\n[<Comment 'I really like this post!'>]\n\n```", "```py\nclass Post(mongo.Document):\n    title = mongo.StringField(required=True) \n    text = mongo.StringField() \n    publish_date = mongo.DateTimeField(default=datetime.datetime.now()) \n    user = mongo.ReferenceField(User) \n    comments = mongo.ListField(mongo.EmbeddedDocumentField(Comment)) \n    tags = mongo.ListField(mongo.StringField()) \n```", "```py\n>>> Post.objects(tags__in=\"Python\").all()\n>>> Post.objects(tags__all=[\"Python\", \"MongoEngine\"]).all()\n```", "```py\n...\nclass Role(mongo.Document):\n    name = mongo.StringField(max_length=64, required=True, unique=True)\n    description = mongo.StringField()\n...\n\nclass User(mongo.Document):\n    username = mongo.StringField(required=True)\n    password = mongo.StringField()\n    roles = mongo.ListField(mongo.ReferenceField(Role))\n...\n```", "```py\nclass Post(mongo.Document): \n    title = mongo.StringField(required=True) \n    publish_date = mongo.DateTimeField(default=datetime.datetime.now()) \n    user = mongo.ReferenceField(Userm) \n    comments = mongo.ListField( \n    mongo.EmbeddedDocumentField(Commentm) \n  ) \n    tags = mongo.ListField(mongo.StringField()) \n\n    meta = { \n        'allow_inheritance': True \n    } \n```", "```py\nclass BlogPost(Post): \n    text = db.StringField(required=True) \n\n    @property\n    def type(self): \n      return \"blog\" \n\nclass VideoPost(Post): \n    url = db.StringField(required=True) \n\n    @property\n    def type(self): \n      return \"video\" \n\nclass ImagePost(Post): \n    image_url = db.StringField(required=True) \n\n    @property \n    def type(self): \n      return \"image\" \n\nclass QuotePost(Post): \n    quote = db.StringField(required=True) \n    author = db.StringField(required=True) \n\n    @property \n    def type(self): \n      return \"quote\" \n```", "```py\nclass PostForm(Form): \n    title = StringField('Title', [ \n      DataRequired(), \n      Length(max=255) \n    ]) \n    type = SelectField('Post Type', choices=[ \n      ('blog', 'Blog Post'), \n      ('image', 'Image'), \n      ('video', 'Video'), \n      ('quote', 'Quote') \n    ]) \n    text = TextAreaField('Content') \n    image = StringField('Image URL', [URL(), Length(max=255)]) \n    video = StringField('Video Code', [Length(max=255)]) \n    author = StringField('Author', [Length(max=255)]) \n```", "```py\n@blog_blueprint.route('/new', methods=['GET', 'POST']) \n@login_required \n@poster_permission.require(http_exception=403) \ndef new_post(): \n  form = PostForm() \n  if form.validate_on_submit(): \n    if form.type.data == \"blog\": \n      new_post = BlogPost() \n      new_post.text = form.text.data \n    elif form.type.data == \"image\": \n      new_post = ImagePost() \n      new_post.image_url = form.image.data \n    elif form.type.data == \"video\": \n      new_post = VideoPost() \n      new_post.video_object = form.video.data \n    elif form.type.data == \"quote\": \n      new_post = QuotePost() \n      new_post.text = form.text.data \n      new_post.author = form.author.data \n    new_post.title = form.title.data \n    new_post.user = User.objects( \n      username=current_user.username \n    ).one() \n    new_post.save() \n  return render_template('new.html', form=form) \n```", "```py\n<form method=\"POST\" action=\"{{ url_for('.new_post') }}\"> \n... \n<div class=\"form-group\"> \n  {{ form.type.label }} \n  {% if form.type.errors %} \n    {% for e in form.type.errors %} \n      <p class=\"help-block\">{{ e }}</p> \n    {% endfor %} \n  {% endif %} \n  {{ form.type(class_='form-control') }} \n</div> \n... \n<div id=\"image_group\" class=\"form-group\"> \n  {{ form.image.label }} \n  {% if form.image.errors %} \n    {% for e in form.image.errors %} \n      <p class=\"help-block\">{{ e }}</p> \n    {% endfor %} \n  {% endif %} \n  {{ form.image(class_='form-control') }} \n</div> \n<div id=\"video_group\" class=\"form-group\"> \n  {{ form.video.label }} \n  {% if form.video.errors %} \n    {% for e in form.video.errors %} \n      <p class=\"help-block\">{{ e }}</p> \n    {% endfor %} \n  {% endif %} \n  {{ form.video(class_='form-control') }} \n</div> \n<div id=\"author_group\" class=\"form-group\"> \n  {{ form.author.label }} \n    {% if form.author.errors %} \n      {% for e in form.author.errors %} \n        <p class=\"help-block\">{{ e }}</p> \n      {% endfor %} \n    {% endif %} \n    {{ form.author(class_='form-control') }} \n</div> \n<input class=\"btn btn-primary\" type=\"submit\" value=\"Submit\"> \n</form> \n```", "```py\n{% block js %} \n<script src=\"img/ckeditor.js\"></script> \n<script> \n  CKEDITOR.replace('editor'); \n\n  $(function () { \n    $(\"#image_group\").hide(); \n    $(\"#video_group\").hide(); \n    $(\"#author_group\").hide(); \n\n    $(\"#type\").on(\"change\", function () { \n      switch ($(this).val()) { \n        case \"blog\": \n          $(\"#text_group\").show(); \n          $(\"#image_group\").hide(); \n          $(\"#video_group\").hide(); \n          $(\"#author_group\").hide(); \n          break; \n        case \"image\": \n          $(\"#text_group\").hide(); \n          $(\"#image_group\").show(); \n          $(\"#video_group\").hide(); \n          $(\"#author_group\").hide(); \n          break; \n        case \"video\": \n          $(\"#text_group\").hide(); \n          $(\"#image_group\").hide(); \n          $(\"#video_group\").show(); \n          $(\"#author_group\").hide(); \n          break; \n        case \"quote\": \n          $(\"#text_group\").show(); \n          $(\"#image_group\").hide(); \n          $(\"#video_group\").hide(); \n          $(\"#author_group\").show(); \n          break; \n      } \n    }); \n  }) \n</script> \n{% endblock %} \n```", "```py\n<div class=\"col-lg-12\">\n{{ post.text | safe }}\n</div>\n```", "```py\n<div class=\"col-lg-12\"> \n  {% if post.type == \"blog\" %} \n    {{ post.text | safe }} \n  {% elif post.type == \"image\" %} \n    <img src=\"img/{{ post.image_url }}\" alt=\"{{ post.title }}\"> \n  {% elif post.type == \"video\" %} \n    {{ post.video_object | safe }} \n  {% elif post.type == \"quote\" %} \n    <blockquote> \n      {{ post.text | safe }} \n    </blockquote> \n    <p>{{ post.author }}</p> \n  {% endif %} \n</div> \n```"]