["```py\nsin(frame * 2 * pi)\n```", "```py\nsin(frame * 2 * pi / 10)\n```", "```py\n2 * pi * sqrt(length / 9.8)\n```", "```py\nsin(frame * 2 * pi)\n```", "```py\nsin(frame/fps * 2 * pi)\n```", "```py\nsin((frame / fps) * length/9.8)))\n```", "```py\nsin(frame / fps / sqrt(length/9.8))\n```", "```py\n>>> degrees(1)\n57.29577951308232\n```", "```py\nsin(frame / fps / sqrt(length/9.8)) * amp * pi\n```", "```py\nbl_info = {\n    \"name\": \"Object Pendulum\",\n    \"author\": \"John Packt\",\n    \"version\": (1, 0),\n    \"blender\": (3, 00, 0),\n    \"description\": \"Add swing motion to active object\",\n    \"category\": \"Learning\",\n}\n```", "```py\nimport bpy\nclass ObjectPendulum(bpy.types.Operator):\n    \"\"\"Set up swinging motion on active object\"\"\"\n    bl_idname = \"object.shaker_animation\"\n    bl_label = \"Make Pendulum\"\n    bl_description = \"Add swinging motion to Active Object\"\n    bl_options = {'REGISTER', 'UNDO'}\n```", "```py\n    amplitude: bpy.props.FloatProperty(default=0.25,\n                                       min=0.0)\n    length: bpy.props.FloatProperty(default=5.0, min=0.0)\n```", "```py\nbl_options = {'REGISTER', 'UNDO'}\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return bool(context.object)\n```", "```py\n    def execute(self, context):\n        ob = context.object\n        pivot_name = f\"EMP-{ob.name}_pivot\"\n        pivot = bpy.data.objects.new(pivot_name, None)\n        context.collection.objects.link(pivot)\n```", "```py\n        pivot.matrix_world = ob.matrix_world\n        pivot.matrix_world[2][3] += self.length\n```", "```py\n        pivot[\"amplitude\"] = self.amplitude\n```", "```py\n        constr = ob.constraints.new('PIVOT')\n        constr.target = pivot\n        constr.rotation_range = 'ALWAYS_ACTIVE'\n```", "```py\n        driver_crv = ob.driver_add('rotation_euler', 0)\n        driver = driver_crv.driver\n```", "```py\n        driver.type = \"SCRIPTED\"\n        xpr = \"sin(frame/fps/sqrt(length/9.8)) * amp * pi\"\n        driver.expression = xpr\n```", "```py\n        fps = driver.variables.new()\n        fps.name = \"fps\"\n        fps.type = \"SINGLE_PROP\"\n        fps.targets[0].id_type = 'SCENE'\n        fps.targets[0].id = context.scene\n        fps.targets[0].data_path = \"render.fps\"\n```", "```py\n        len = driver.variables.new()\n        len.name = \"length\"\n        len.type = \"LOC_DIFF\"\n        len.targets[0].id = pivot\n        len.targets[1].id = ob\n```", "```py\n        amp = driver.variables.new()\n        amp.name = \"amp\"\n        amp.type = \"SINGLE_PROP\"\n        amp.targets[0].id_type = \"OBJECT\"\n        amp.targets[0].id = pivot\n        amp.targets[0].data_path = \"[\"amplitude\"]\"\n        return {'FINISHED'}\n```", "```py\ndef menu_func(self, context):\n    self.layout.separator()\n    self.layout.operator(ObjectPendulum.bl_idname)\n```", "```py\ndef register():\n    bpy.utils.register_class(ObjectPendulum)\n    ob_menu =  bpy.types.VIEW3D_MT_object_context_menu\n    ob_menu.append(menu_func)\n```", "```py\ndef unregister():\n    ob_menu =  bpy.types.VIEW3D_MT_object_context_menu\n    ob_menu.remove(menu_func)\n    bpy.utils.unregister_class(ObjectPendulum)\n```"]