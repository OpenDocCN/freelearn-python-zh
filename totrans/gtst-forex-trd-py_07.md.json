["```py\n{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n{0, 0.1, 0.4, 0.05, 0.1, 0.3, 0.2}\n```", "```py\n{0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100}\n```", "```py\n{0, 25, 100, 12.5, 25, 75, 50}\n```", "```py\nA = {0, 1, 2, 3, 2, 1, 0, 1, 2, 3}\n```", "```py\n= {NaN, NaN, 1, 2, 2.33, 2, 1, 0.66, 1, 2}\n```", "```py\nS = {1.8, 1.9, 1.85, 1.79, 1.78, 1.81, 1.85, 1.82, 1.89, 1.2}\n```", "```py\nD = {0.03, 0.13, 0.08, 0.02, 0.01, 0.04, 0.08, 0.05, 0.12, -0.57}\n```", "```py\nS1 = {0.7, 2, 1.5, 0.3, 2.6, 1.1, 1.8, 0.45, 3.1, 2.9}\n```", "```py\nD = {-0.94, 0.35, -0.14, -1.34, 0.95, -0.54, 0.15, -1.19, 1.45, 1.25}\n```", "```py\nS = stddev(close, 24)\n```", "```py\nS1 = {0.7, 2, 1.5, 0.3, 2.6, 1.1, 1.8, 0.45, 3.1, 2.9}\n```", "```py\nS1_1 = {0.7, 2, 1.5}\nS1_2 = {2, 1.5, 0.3}\n...\nS1_8 = {0.45, 3.1, 2.9}\n```", "```py\nS1 =  {{01/01/2001,0.7}\n      {01/02/2001, 2}\n      {01/03/2001, 1.5}\n      {01/04/2001, 0.3}\n      {01/05/2001, 2.6}\n      {01/06/2001, 1.1}\n      {01/07/2001, 1.8}\n      {01/08/2001, 0.45}\n      {01/09/2001, 3.1}\n      {01/10/2001, 2.9}}\n```", "```py\nS1_1 = {{01/01/2001,0.7}\n      {01/02/2001, 2}\n      {01/03/2001, 1.5}}\nS1_2 = {{01/02/2001, 2}\n      {01/03/2001, 1.5}\n      {01/04/2001, 0.3}}\nS1_3 = {{01/03/2001, 1.5}\n      {01/04/2001, 0.3}\n      {01/05/2001, 2.6}}\n...\n```", "```py\n    class sliding_window:\n    ```", "```py\n        def __init__(self, length):\n    ```", "```py\n            self.data = ([0]*length)\n    ```", "```py\n        def add(self, element):\n    ```", "```py\n            self.data.append(element)\n    ```", "```py\n            self.data.pop(0)\n    ```", "```py\n    sw = sliding_window(5)\n    ```", "```py\n    def get_sample(f):\n    ```", "```py\n        sample = {}\n    ```", "```py\n        values = f.readline().rstrip(\"\\n\").split(\",\")\n    ```", "```py\n        timestamp_string = \"0\" + values[0] + \" \" + values[1]\n    ```", "```py\n        ts = datetime.strptime(timestamp_string, \"%m/%d/%Y %H:%M:%S\")\n    ```", "```py\n        sample[\"open\"] = float(values[2])\n    ```", "```py\n        sample[\"high\"] = float(values[3])\n    ```", "```py\n        sample[\"low\"]  = float(values[4])\n    ```", "```py\n        sample[\"close\"]= float(values[5])\n    ```", "```py\n        sample[\"UpVolume\"] = int(values[6])\n    ```", "```py\n        sample[\"DownVolume\"] = int(values[7])\n    ```", "```py\n        sample[\"Datetime\"] = ts\n    ```", "```py\n        return sample\n    ```", "```py\n    def emulate_bar_stream():\n    ```", "```py\n        while True:\n    ```", "```py\n            time.sleep(1)\n    ```", "```py\n            datastream.put(get_sample(f))\n    ```", "```py\n    def retrieve_bars():\n    ```", "```py\n        while True:\n    ```", "```py\n            sw.add(datastream.get()[\"close\"])\n    ```", "```py\n            # calling a TA indicator function here\n    ```", "```py\n            print(sw.data)\n    ```", "```py\n    import threading\n    ```", "```py\n    data_source_thread = threading.Thread(target = emulate_bar_stream)\n    ```", "```py\n    data_receiver_thread = threading.Thread(target = retrieve_bars)\n    ```", "```py\n    data_source_thread.start()\n    ```", "```py\n    data_receiver_thread.start()\n    ```", "```py\n[0, 0, 0, 0, 1.12949]\n[0, 0, 0, 1.12949, 1.12941]\n[0, 0, 1.12949, 1.12941, 1.12965]\n[0, 1.12949, 1.12941, 1.12965, 1.12883]\n[1.12949, 1.12941, 1.12965, 1.12883, 1.12894]\n[1.12941, 1.12965, 1.12883, 1.12894, 1.12925]\n```", "```py\ndef moving_average(data):\n    return sum(data) / len(data)\n```", "```py\n0.225898\n0.45178\n0.67771\n0.903476\n1.129264\n1.129216\n1.129208\n```", "```py\n    close = sliding_window(5)\n    ```", "```py\n    high = sliding_window(5)\n    ```", "```py\n    low = sliding_window(5)\n    ```", "```py\n    def stochastic(high, low, close):\n    ```", "```py\n        max_price = max(high)\n    ```", "```py\n        min_price = min(low)\n    ```", "```py\n        return (close[-1] - min_price) / (max_price - min_price)\n    ```", "```py\n    def retrieve_bars():\n    ```", "```py\n        while True:\n    ```", "```py\n            data_point = datastream.get()\n    ```", "```py\n            close.add(data_point[\"close\"])\n    ```", "```py\n            high.add(data_point[\"high\"])\n    ```", "```py\n            low.add(data_point[\"low\"])\n    ```", "```py\n            ma = moving_average(close.data)\n    ```", "```py\n            stoch = stochastic(high.data, low.data,\n    ```", "```py\n                               close.data)\n    ```", "```py\n            print(close.data[-1], ma, stoch)\n    ```", "```py\n(1.12949, 0.22589800000000002, 0.9999911465250112)\n(1.12941, 0.45178, 0.9998406501473985)\n(1.12965, 0.67771, 0.9999557404620697)\n(1.12883, 0.9034760000000001, 0.9992298840400107)\n(1.12894, 1.129264, 0.1914893617022131)\n(1.12925, 1.129216, 0.5212765957448215)\n(1.12937, 1.129208, 0.6489361702128061)\n```"]