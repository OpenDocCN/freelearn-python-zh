["```py\n#app1.py: routing in a Flask application\nfrom flask import Flask\napp = Flask(__name__)\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n@app.route('/greeting')\ndef greeting():\n    return 'Greetings from Flask web app!'\nif __name__ == '__main__':\n    app.run()\n```", "```py\n    Flask run --host <ip_address> --port <port_num>\n    ```", "```py\n    curl -X GET http://localhost:5000/\n    curl -X GET http://localhost:5000/greeting\n    ```", "```py\n    GET /home HTTP/1.1\n    ```", "```py\n#app2.py: map request with method type\nfrom flask import Flask, request\napp = Flask(__name__)\n@app.route('/submit', methods=['GET'])\ndef req_with_get():\n    return \"Received a get request\"\n@app.post('/submit')\ndef req_with_post():\n    return \"Received a post request\"\n@app.route('/submit2', methods = ['GET', 'POST'])\ndef both_get_post():\n    if request.method == 'POST':\n        return \"Received a post request 2\"\n    else:\n        return \"Received a get request 2\"\n```", "```py\ncurl -X GET http://localhost:5000/submit\ncurl -X POST http://localhost:5000/submit\ncurl -X GET http://localhost:5000/submit2\ncurl -X POST http://localhost:5000/submit2\n```", "```py\n#app3.py: rendering static and dynamic contents\nfrom flask import Flask, render_template, url_for, redirect\napp = Flask(__name__)\n@app.route('/hello')\ndef hello():\n    hello_url = url_for ('static', filename='app3_s.html')\n    return redirect(hello_url)\n@app.route('/greeting')\ndef greeting():\n    msg = \"Hello from Python\"\n    return render_template('app3_d.html', greeting=msg)\n```", "```py\n    <!DOCTYPE html>\n    <body>\n    if statement enclosed by <% %>, and the Python variable is included by using the two curly brackets {{}} format. We will not go into the details regarding Jinja2 templates, but we highly recommended that you get familiar with Jinja2 templates through their online documentation (https://jinja.palletsprojects.com/). \n    ```", "```py\n#app4.py: extracting parameters from different requests\nfrom flask import Flask, request, render_template\napp = Flask(__name__)\n@app.route('/hello')\n@app.route('/hello/<fname> <lname>')\ndef hello_user(fname=None, lastname=None):\n    return render_template('app4.html', name=f\"{fname}{lname}\")\n@app.get('/submit')\ndef process_get_request_data():\n    fname = request.args['fname'] \n    lname = request.args.get('lname', '')\n    return render_template('app4.html', name=f\"{fname}{lname}\")\n@app.post('/submit')\ndef process_post_request_data():\n    fname = request.form['fname']\n    lname = request.form.get('lname','']\n    return render_template('app4.html', name=f\"{fname}{lname}\")\n```", "```py\ncurl -X GET http://localhost:5000/hello\ncurl -X GET http://localhost:5000/hello/jo%20so\ncurl -X GET 'http://localhost:5000/submit?fname=jo&lname=so'\ncurl -d \"fname=jo&lname=so\" -X POST http://localhost:5000/submit\n```", "```py\n#app5.py (part1): interacting with db for create, delete   and list objects\nfrom flask import Flask, request, render_template, redirect\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///student.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\nclass Student(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    grade = db.Column(db.String(20), nullable=True)\n\n    def __repr__(self):\n        return '<Student %r>' % self.name\n```", "```py\n#app5.py (part 2)\n@app.get('/list')\ndef list_students():\n    student_list = Student.query.all()\n    return render_template('app5.html',         students=student_list)\n```", "```py\n#app5.py(part 3)\n@app.get('/add')\ndef add_student():\n    fname = request.args['fname']\n    lname = request.args.get('lname', '')\n    grade = request.args.get('grade','')\n    student = Student(name=f\"{fname} {lname}\", grade=grade)\n    db.session.add(student)\n    db.session.commit()\n    return redirect(\"/list\")\n```", "```py\n#app5.py (part 4)\n@app.get('/delete/<int:id>')\ndef del_student(id):\n    todelete = Student.query.filter_by(id=id).first()\n    db.session.delete(todelete)\n    db.session.commit()\n    return redirect(\"/list\")\n```", "```py\n<!DOCTYPE html>\n<body>\n<h2>Students</h2>\n    {% if students|length > 0 %}\n        <table>\n            <thead>\n              <tr>\n                <th scope=\"col\">SNo</th>\n                <th scope=\"col\">name</th>\n                <th scope=\"col\">grade</th>\n               </tr>\n            </thead>\n            <tbody>\n              {% for student in students %}\n                <tr>\n                    <th scope=\"row\">{{student.id}}</th>\n                    <td>{{student.name}}</td>\n                    <td>{{student.grade}}</td>\n                </tr>\n              {% endfor %}\n            </tbody>\n        </table>\n    {% endif %}\n</body>\n</html>\n```", "```py\n>>> from app5 import db\n>>> db.create_all()\n```", "```py\n#app6.py(part 1): error and exception handling\nimport json\nfrom flask import Flask, render_template, abort\nfrom werkzeug.exceptions import HTTPException\napp = Flask(__name__)\n@app.route('/')\ndef hello():\n    return 'Hello World!'\n@app.route('/greeting')\ndef greeting():\n    x = 10/0\n    return 'Greetings from Flask web app!'\n```", "```py\n#app6.py(part 2)\n@app.errorhandler(404)\ndef page_not_found(error):\n    return render_template('error404.html'), 404\n@app.errorhandler(500)\ndef internal_error(error):\n    return render_template('error500.html'), 500\n@app.errorhandler(HTTPException)\ndef generic_handler(error):\n    error_detail = json.dumps({\n        \"code\": error.code,\n        \"name\": error.name,\n        \"description\": error.description,\n    })\n    return render_template('error.html', \n        err_msg=error_detail), error.code\n```", "```py\npip install Flask-RESTful\n```", "```py\n#api_app.py: REST API application for student resource\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask import Flask\nfrom flask_restful import Resource, Api, reqparse\napp = Flask(__name__)\napi = Api(app)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///student.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n```", "```py\nparser = reqparse.RequestParser()\nparser.add_argument('name', type=str)\nparser.add_argument('grade', type=str)\n```", "```py\nclass Student(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(80), nullable=False)\n    grade = db.Column(db.String(20), nullable=True)\n    def serialize(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'grade': self.grade\n        }\n```", "```py\nclass StudentDao(Resource):\n    def get(self, student_id):\n        student = Student.query.filter_by(id=student_id).\\\n            first_or_404(description='Record with id={} is                 not available'.format(student_id))\n        return student.serialize()\n    def delete(self, student_id):\n        student = Student.query.filter_by(id=student_id).\\\n            first_or_404(description='Record with id={} is                 not available'.format(student_id))\n        db.session.delete(student)\n        db.session.commit()\n        return '', 204\n```", "```py\nclass StudentListDao(Resource):\n    def get(self):\n        students = Student.query.all()\n        return [Student.serialize(student) for student in             students]\n    def post(self):\n        args = parser.parse_args()\n        name = args['name']\n        grade = args['grade']\n        student = Student(name=name, grade=grade)\n        db.session.add(student)\n        db.session.commit()\n        return student, 200\n```", "```py\napi.add_resource(StudentDao, '/students/<student_id>')\napi.add_resource(StudentListDao, '/students')\n```", "```py\n    #webapp.py: interacting with business latyer via REST API \n    # for create, delete and list objects\n    from flask import Flask, render_template, redirect,   request\n    import requests, json\n    app = Flask(__name__)\n    ```", "```py\n    requests library to send a REST API request to the apiapp application that is hosted on the same machine in our test environment. \n    ```", "```py\n    apiapp application, we built the payload object and passed it as a data attribute to the POST method of the requests module.\n    ```", "```py\n    @app.get('/delete/<int:id>')\n    def delete(id):\n        response = requests.delete('http://localhost:8080         /students/'+str(id))\n        return redirect(\"/\")\n    ```", "```py\n    @app.post('/update/<int:id>')\n    def update(id):\n        fname = request.form['fname']\n        lname = request.form['lname']\n        grade = request.form['grade']\n        payload = {'name' : f\"{fname} {lname}\",'grade':grade}\n        respone = requests.put('http://localhost:8080         /students/' + str(id), data = payload)\n        return redirect(\"/\")\n    @app.get('/update/<int:id>')\n    def load_student_for_update(id):\n        response = requests.get('http://localhost:8080         /students/'+str(id))\n        student = json.loads(response.text)\n        fname = student['name'].split()[0]\n        lname = student['name'].split()[1]\n        return render_template('update.html', fname=fname,         lname=lname, student= student)\n    ```"]