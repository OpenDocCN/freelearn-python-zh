["```py\nyear_cheese = [(2000, 29.87), (2001, 30.12), (2002, 30.6), (2003, 30.66),\n    (2004, 31.33), (2005, 32.62), (2006, 32.73), (2007, 33.5),\n    (2008, 32.84), (2009, 33.02), (2010, 32.92), (2011, 33.27),\n    (2012, 33.51)]\n```", "```py\n\"Notes\"  \"Cause of death\"  \"Cause of death Code\"  \"Year\"  \"Year Code\"  Deaths  Population  Crude Rate \n  \"Accidental suffocation and strangulation in bed\"  \"W75\"  \"2000\"  \"2000\"  327  281421906\t0.1 \n  \"Accidental suffocation and strangulation in bed\"  \"W75\"  \"2001\"  \"2001\"  456  284968955  0.2 \n … etc. … \n```", "```py\nimport csv\nwith open( \"Cause of Death by Year.txt\" ) as source:\n    rdr= csv.DictReader( source, delimiter=\"\\t\" )\n    for row in rdr:\n        if row['Notes'] == \"---\": break\n        print(row)\n```", "```py\ndef deaths():\n    with open( \"Cause of Death by Year.txt\" ) as source:\n        rdr= csv.DictReader( source, delimiter=\"\\t\" )\n        for row in rdr:\n            if row['Notes'] == \"Total\": break\n            yield int(row['Year']), int(row['Deaths'])\n```", "```py\nyear_deaths = list( deaths() )\n```", "```py\n[(2000, 327), (2001, 456), (2002, 509), (2003, 497), \n(2004, 596), (2005, 573), (2006, 661), (2007, 741), \n(2008, 809), (2009, 717), (2010, 684)]\n```", "```py\ndef mean( values ):\n    return sum(values)/len(values)\n```", "```py\n>>> mean( cheese for year, cheese in year_cheese )\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in mean\nTypeError: object of type 'generator' has no len()\n```", "```py\ndef count( values ):\n    return sum( 1 for x in values )\n```", "```py\n>>> count( cheese for year, cheese in year_cheese )\n13\n```", "```py\ndef mean2( values ):\n    return sum(values)/count(values)\n```", "```py\n>>> mean( [cheese for year, cheese in year_cheese] )\n32.076153846153844\n>>> mean( [death for year, death in year_deaths] )\n597.2727272727273\n```", "```py\ndef mean(values):\n    \"\"\"Mean of a sequence (doesn't work with an iterable)\"\"\"\n    return sum(values)/len(values)\n```", "```py\ndef median(values):\n    s = sorted(values)\n    if len(s) % 2 == 1: # Odd\n        return s[len(s)//2]\n    else:\n        mid= len(s)//2\n        return (s[mid-1]+s[mid])/2\n```", "```py\nmid, odd = divmod(len(s), 2)\n```", "```py\nfrom collections import Counter\ndef mode(values):\n    c = Counter( values )\n    mode_value, count = c.most_common(1)[0]\n    return mode_value\n```", "```py\n>>> mode( [1, 2, 3, 3, 4] )\n3\n```", "```py\n>>> from stats import *\n```", "```py\n>>> from stats import mean, median\n```", "```py\n>>> import stats\n```", "```py\npython3 basic_stats.py\n```", "```py\n\"\"\"Chapter 5 example 2.\n\nImport stats library functions from ch_5_ex_1 module.\nImport data acquisition from ch_5_ex_1 module.\nCompute some simple descriptive statistics.\n\"\"\"\nfrom ch_5_ex_1 import mean, mode, median\nfrom ch_5_ex_1 import get_deaths, get_cheese\n\nyear_deaths = list( get_deaths() )\nyears = list( year for year, death in year_deaths )\ndeaths= list( death for year, death in year_deaths )\nprint( \"Year Range\", min(years), \"to\", max(years) )\nprint( \"Average Deaths {:.2f}\".format( mean( deaths ) ) )\n\nyear_cheese= get_cheese()\n\nprint( \"Average Cheese Consumption\", \n    mean( [cheese for year, cheese in year_cheese] ) )\n```", "```py\n\"\"\"Chapter 5 example 3.\n\nImport stats library functions from ch_5_ex_1 module.\nImport data acquisition from ch_5_ex_1 module.\nCompute some simple descriptive statistics.\n\"\"\"\nfrom ch_5_ex_1 import mean, mode, median\nfrom ch_5_ex_1 import get_deaths, get_cheese\n\ndef analyze_cheese_deaths():\n\n    year_deaths = list( get_deaths() )\n    years = list( year for year, death in year_deaths )\n    deaths= list( death for year, death in year_deaths )\n    print( \"Year Range\", min(years), \"to\", max(years) )\n    print( \"Average Deaths {:.2f}\".format( mean( deaths ) ) )\n\n    year_cheese= get_cheese()\n    print( \"Average Cheese Consumption\", \n        mean( [cheese for year, cheese in year_cheese] ) )\n\nif __name__ == \"__main__\":\n    analyze_cheese_deaths()\n```", "```py\nfrom collections import Counter\nclass AnnualStats:\n    def __init__(self, year_measure):\n        self.year_measure = list(year_measure)\n        self.data = list(v for yr, v in self.year_measure)\n        self.counter= Counter(self.data)\n    def __repr__(self):\n        return repr(self.year_measure)\n    def min_year(self):\n        return min( yr for yr, v in self.year_measure )\n    def max_year(self):\n        return max( yr for yr, v in self.year_measure )\n    def mean(self):\n        return sum(self.data)/len(self.data)\n    def median(self):\n        mid, odd = divmod( len(self.data), 2 )\n        if odd:\n            return sorted(self.data)[mid]\n        else:\n            pair= sorted(self.data)[mid-1:mid+1]\n            return sum(pair)/2\n    def mode(self):\n        value, count = self.counter.most_common1)[0]\n        return value\n```", "```py\n   from ch_5_ex_1 import get_deaths, get_cheese\n\ndeaths = AnnualStats( get_deaths() )\ncheese = AnnualStats( get_cheese() )\n\nprint(\"Year Range\", deaths.min_year(), deaths.max_year())\nprint(\"Average W75 Deaths\", deaths.mean())\n\nprint(\"Median Cheese Consumption\", cheese.median())\nprint(\"Mean Cheese Consumption\", cheese.mean())\n\nprint(deaths )\n```", "```py\n    def stddev(self):\n        μ_x = self.mean()\n        n = len(self.data)\n        σ_x= math.sqrt( sum( (x-μ_x)**2 for x in self.data )/n )\n        return σ_x\n```", "```py\n    def stddev2(self):\n        s_0 = sum(1 for x in self.data) # x**0\n        s_1 = sum(x for x in self.data) # x**1\n        s_2 = sum(x**2 for x in self.data)\n        return math.sqrt( s_2/s_0 - (s_1/s_0)**2 )\n```", "```py\n    def stdscore(self):\n        μ_x= self.mean()\n        σ_x= self.stddev()\n        return [ (x-μ_x)/σ_x for x in self.data ]\n```", "```py\nprint( cheese.stdscore() )\n```", "```py\n[-1.548932453971435, -1.3520949193863403, ... 0.8524854679667219]\n```", "```py\nreturn ((x-μ_x)/σ_x for x in self.data)\n```", "```py\nprint(cheese.stdscore())\n```", "```py\n<generator object <genexpr> at 0x1007b4460>\n```", "```py\nprint(list(cheese.stdscore()))\n```", "```py\ndef correlation1( d1, d2 ):\n    n= len(d1.data)\n    std_score_pairs = zip( d1.stdscore(), d2.stdscore() )\n    r = sum( x*y for x,y in std_score_pairs )/n\n    return r\n```", "```py\ndef mean(values):\n    \"\"\"Mean of a sequence (doesn't work with an iterable)\n\n    >>> from ch_5_ex_1 import mean\n    >>> mean( [2, 4, 4, 4, 5, 5, 7, 9])\n    5.0\n    \"\"\"\n    return sum(values)/len(values)\n```", "```py\npython3 -m doctest ch_5_ex_1.py\n```", "```py\npython3 -m doctest -v ch_5_ex_1.py\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n```", "```py\nimport doctest\nimport ch_5_ex_1\ndoctest.testmod( ch_5_ex_1 )\n```", "```py\nTestResults(failed=0, attempted=2)\n```", "```py\n\"\"\"Chapter 5, example 1\n\nSome simple statistical functions.\n\n>>> from ch_5_ex_1 import mean, median\n>>> data = [2, 4, 4, 4, 5, 5, 7, 9]\n>>> data # doctest: +ELLIPSIS\n[2, 4..., 9]\n>>> mean( data )\n5.0\n>>> median( data )\n4.5\n\n\"\"\"\n```", "```py\nclass AnnualStats:\n    \"\"\"Collect (year, measurement) data for statistical analysis.\n\n    >>> from ch_5_ex_4 import AnnualStats\n    >>> test = AnnualStats( [(2000, 2),\n    ...    (2001, 4),\n    ...    (2002, 4),\n    ...    (2003, 4),\n    ...    (2004, 5),\n    ...    (2005, 5),\n    ...    (2006, 7),\n    ...    (2007, 9),] )\n    ...\n    >>> test.min_year()\n    2000\n    >>> test.max_year()\n    2007\n    >>> test.mean()\n    5.0\n    >>> test.median()\n    4.5\n    >>> test.mode()\n    4\n    >>> test.stddev()\n    2.0\n    >>> list(test.stdscore())\n    [-1.5, -0.5, -0.5, -0.5, 0.0, 0.0, 1.0, 2.0]\n    \"\"\"\n```"]