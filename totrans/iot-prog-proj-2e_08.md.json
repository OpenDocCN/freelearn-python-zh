["```py\n    def motion_handler(pin):\n        print('Motion detected!')\n        if mqtt_client:\n            if ARMED:\n                activate_buzzer()\n                mqtt_client.publish(b\"IoTAlarm\", b\"buzzer\")\n                mqtt_client.publish(b\"IoTAlarm\",\n                                    b\"location:43.6426,-79.3871\")\n            else:\n                mqtt_client.publish(b\"IoTAlarm\", b\"motion\")\n        else:\n            print(\"MQTT client not connected.\")\n    ```", "```py\n    mkdir dashboard\n    ```", "```py\n    cd dashboard\n    ```", "```py\n    dashboard-env and enable access to the --system-site-packages. This allows the virtual environment to inherit packages from the global Python environment without affecting the global Python environment.\n    ```", "```py\n    dashboard-env Python virtual environment:\n    ```", "```py\n    kivy-garden.mapview extension offers an interactive map widget, while paho.mqtt is a Python client library that enables MQTT communications; it’s popular in IoT due to its efficiency. We’re ensuring that we install the version of paho.mqtt that will work with our program by specifying that we want 1.5.1.\n    ```", "```py\n    exit\n    ```", "```py\n    from gpiozero import TonalBuzzer\n    from gpiozero.tones import Tone\n    from time import sleep\n    class BuzzerMelody:\n        def __init__(self, pin, notes=[('E4', 1),\n                                       ('E4', 0.5),\n                                       ('F4', 0.5),\n                                       ('G4', 1.5)]):\n            self.buzzer = TonalBuzzer(pin)\n            self.melody = notes\n        def play_melody(self):\n            for note, duration in self.melody:\n                self.buzzer.play(Tone(note))\n                sleep(duration)\n                self.buzzer.stop()\n                sleep(0.1)  # pause between notes\n    if __name__ == \"__main__\":\n        buzzer_melody = BuzzerMelody(4)\n        buzzer_melody.play_melody()\n    ```", "```py\n    from kivy.config import Config\n    Config.set('graphics', 'fullscreen', 'auto')\n    Config.set('graphics', 'borderless', '1')\n    from kivy.app import App\n    from kivy.uix.floatlayout import FloatLayout\n    from kivy.uix.label import Label\n    from kivy.uix.button import Button\n    from kivy.clock import Clock\n    from threading import Thread\n    import paho.mqtt.client as mqtt\n    from kivy_garden.mapview import MapView, MapMarkerPopup\n    from buzzer import BuzzerMelody\n    ```", "```py\n    MQTT_SERVER = \"codfish.rmq.cloudamqp.com\"\n    MQTT_PORT = 1883\n    USERNAME = \"<<MQTT server username>>\"\n    MQTT_PASSWORD = \"<<MQTT server password>>\"\n    DEVICE_ID = \"IoTAlarmDashboard\"\n    TOPIC = \"IoTAlarm\"\n    ```", "```py\n    class AlarmDashboard(FloatLayout):\n        def __init__(self, **kwargs):\n            super(AlarmDashboard, self).__init__(**kwargs)\n            self.password_toggle = \"1234\"\n            self.entered_password = ''\n            self.system_armed = False\n            self.lockout = False\n            self.last_message = ''\n            self.client = mqtt.Client(client_id=DEVICE_ID)\n            self.client.username_pw_set(USERNAME, MQTT_PASSWORD)\n            self.client.on_message = self.on_message\n            Thread(target=self.start_mqtt).start()\n            self.init_widgets()\n            self.buzzer = BuzzerMelody(4)\n    ```", "```py\n    def on_message(self, client, userdata, msg):\n        message = f\"{str(msg.payload.decode('utf-8'))}\"\n        self.last_message = \"Last message: \" + message\n        if message.startswith(\"location:\"):\n            parts = message.split(\":\")[1].split(\",\")\n            lat = float(parts[0])\n            lon = float(parts[1])\n            Clock.schedule_once(\n                lambda dt: self.update_map(lat, lon), 0\n            )\n        if message == \"arm\":\n            Clock.schedule_once(\n                lambda dt: self.update_system_status(True), 0\n            )\n        elif message == \"disarm\":\n            Clock.schedule_once(\n                lambda dt: self.update_system_status(False), 0\n            )\n        if message == \"buzzer\":\n            self.buzzer.play_melody()\n        Clock.schedule_once(\n            lambda dt: self.update_message_display(), 0\n        )\n    ```", "```py\n        def update_map(self, lat, lon):\n            self.mapview.center_on(lat, lon)\n            marker = MapMarkerPopup(lat=lat, lon=lon)\n            self.mapview.add_widget(marker)\n    ```", "```py\n        def update_system_status(self, is_armed):\n            if is_armed:\n                self.system_armed = True\n                self.system_status.text = \"System is ARMED\"\n                self.system_status.color = (0, 1, 0, 1)\n            else:\n                self.system_armed = False\n                self.system_status.text = \"System is DISARMED\"\n                self.system_status.color = (1, 0, 0, 1)\n    ```", "```py\n        def start_mqtt(self):\n            self.client.connect(MQTT_SERVER, MQTT_PORT)\n            self.client.subscribe(TOPIC)\n            self.client.loop_forever()\n    ```", "```py\n    def init_widgets(self):\n        # Keypad buttons\n        positions = [\n            (0.03, 0.75), (0.14, 0.75), (0.25, 0.75),\n            (0.03, 0.55), (0.14, 0.55), (0.25, 0.55),\n            (0.03, 0.35), (0.14, 0.35), (0.25, 0.35)\n        ]\n        for index, pos in enumerate(positions, 1):\n            btn = Button(\n                text=str(index), size_hint=(0.1, 0.1),\n                pos_hint={'x': pos[0], 'y': pos[1]}\n            )\n            btn.bind(on_press=self.handle_key_press)\n            self.add_widget(btn)\n    ```", "```py\n        # System status\n        self.system_status = Label(\n            text=\"System is DISARMED\",\n            size_hint=(1, 0.2),\n            pos_hint={'x': -0.3, 'y': 0.1},\n            font_size=30,\n            color=(1, 0, 0, 1)\n        )\n        self.add_widget(self.system_status)\n    ```", "```py\n        # MQTT Messages\n        self.message_display = Label(\n            text=\"Waiting for message...\",\n            size_hint=(0.77, 0.6),\n            pos_hint={'x': 0.23, 'y': 0.62},\n            font_size=25,\n            color=(1, 1, 1, 1)\n        )\n        self.add_widget(self.message_display)\n    ```", "```py\n        self.mapview = MapView(\n            zoom=15, lat=52.379189, lon=4.899431,\n            size_hint=(0.5, 0.7), pos_hint={'x': 0.45, 'y': 0.15}\n        )\n        self.add_widget(self.mapview)\n    ```", "```py\n        def update_message_display(self):\n            self.message_display.text = self.last_message\n    ```", "```py\n    def handle_key_press(self, instance):\n        if not self.lockout:\n            self.entered_password += instance.text\n            print(\"The key:\" + instance.text + \" was pressed\")\n            if len(self.entered_password) == 4:\n                if self.entered_password == self.password_toggle:\n                    if self.system_armed:\n                        self.system_armed = False\n                        self.system_status.text = \"System is\\\n        DISARMED\"\n                        self.system_status.color = (1, 0, 0, 1)\n                        self.client.publish(TOPIC, \"disarm\")\n                    else:\n                        self.system_armed = True\n                        self.system_status.text = \"System is ARMED\"\n                        self.system_status.color = (0, 1, 0, 1)\n                        self.client.publish(TOPIC, \"arm\")\n                    self.entered_password = ''\n                else:\n                    self.lockout = True\n                    Clock.schedule_once(self.end_lockout, 5)\n                    self.entered_password = ''\n    ```", "```py\n        def end_lockout(self, dt):\n            self.lockout = False\n    ```", "```py\n    class MyApp(App):\n        def build(self):\n            return AlarmDashboard()\n    if __name__ == '__main__':\n        MyApp().run()\n    ```"]