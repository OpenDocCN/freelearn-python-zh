["```py\npip install dweepy\n```", "```py\nCollecting dweepy\nDownloading dweepy-0.2.0.tar.gz\nRequirement already satisfied (use --upgrade to upgrade): requests<3,>=2 in /usr/lib/python2.7/site-packages (from dweepy)\nInstalling collected packages: dweepy\n  Running setup.py install for dweepy\nSuccessfully installed dweepy-0.2.0\n```", "```py\nimport pyupm_th02 as upmTh02\nimport pyupm_i2clcd as upmLcd\nimport pyupm_servo as upmServo\nimport dweepy\nimport time\n\nif __name__ == \"__main__\":\n    temperature_and_humidity_sensor = \\\n        TemperatureAndHumiditySensor(0)\n    oled = TemperatureAndHumidityOled(0)\n    temperature_servo = TemperatureServo(3)\n # Don't forget to replace the thing_name value\n # with your own thing name\n thing_name = \"iot_python_chapter_09_01_gaston_hillar\"\n    while True:\n        temperature_and_humidity_sensor.\\\n            measure_temperature_and_humidity()\n        oled.print_temperature(\n            temperature_and_humidity_sensor.temperature_fahrenheit,\n            temperature_and_humidity_sensor.temperature_celsius)\n        oled.print_humidity(\n            temperature_and_humidity_sensor.humidity)\n        temperature_servo.print_temperature(\n            temperature_and_humidity_sensor.temperature_fahrenheit)\n # Push data to dweet.io\n dweet = {\"temperature_celsius\": \"{:5.2f}\".format(temperature_and_humidity_sensor.temperature_celsius),\n \"temperature_fahrenheit\": \"{:5.2f}\".format(temperature_and_humidity_sensor.temperature_fahrenheit),\n \"humidity_level_percentage\": \"{:5.2f}\".format(temperature_and_humidity_sensor.humidity)}\n dweepy.dweet_for(thing_name, dweet)\n        print(\"Ambient temperature in degrees Celsius: {0}\".\n              format(temperature_and_humidity_sensor.temperature_celsius))\n        print(\"Ambient temperature in degrees Fahrenheit: {0}\".\n              format(temperature_and_humidity_sensor.temperature_fahrenheit))\n        print(\"Ambient humidity: {0}\".\n              format(temperature_and_humidity_sensor.humidity))\n        # Sleep 10 seconds (10000 milliseconds)\n        time.sleep(10)\n```", "```py\npython iot_python_chapter_09_01.py\n```", "```py\n{\n  \"humidity_level_percentage\": 20.01,\n  \"temperature_celsius\": 19.56,\n  \"temperature_fahrenheit\": 67.21\n}\n```", "```py\nhttp -b https://dweet.io:443/get/latest/dweet/for/iot_python_chapter_09_01_gaston_hillar\n```", "```py\n{\n    \"by\": \"getting\", \n    \"the\": \"dweets\", \n    \"this\": \"succeeded\", \n    \"with\": [\n        {\n            \"content\": {\n                \"humidity_level_percentage\": 19.92, \n                \"temperature_celsius\": 20.06, \n                \"temperature_fahrenheit\": 68.11\n            }, \n            \"created\": \"2016-03-27T00:11:12.598Z\", \n            \"thing\": \"iot_python_chapter_09_01_gaston_hillar\"\n        }\n    ]\n}\n```", "```py\nhttp -b https://dweet.io:443/get/ dweets/for/iot_python_chapter_09_01_gaston_hillar\n```", "```py\n{\n    \"by\": \"getting\", \n    \"the\": \"dweets\", \n    \"this\": \"succeeded\", \n    \"with\": [\n         {\n            \"content\": {\n                \"humidity_level_percentage\": 19.94, \n                \"temperature_celsius\": 20.01, \n                \"temperature_fahrenheit\": 68.02\n            }, \n            \"created\": \"2016-03-27T00:11:00.554Z\", \n            \"thing\": \"iot_python_chapter_09_01_gaston_hillar\"\n        }, \n        {\n            \"content\": {\n                \"humidity_level_percentage\": 19.92, \n                \"temperature_celsius\": 19.98, \n                \"temperature_fahrenheit\": 67.96\n            }, \n            \"created\": \"2016-03-27T00:10:49.823Z\", \n            \"thing\": \"iot_python_chapter_09_01_gaston_hillar\"\n        }, \n        {\n            \"content\": {\n                \"humidity_level_percentage\": 19.92, \n                \"temperature_celsius\": 19.95, \n                \"temperature_fahrenheit\": 67.91\n            }, \n            \"created\": \"2016-03-27T00:10:39.123Z\", \n            \"thing\": \"iot_python_chapter_09_01_gaston_hillar\"\n        }, \n        {\n            \"content\": {\n                \"humidity_level_percentage\": 19.91, \n                \"temperature_celsius\": 19.9, \n                \"temperature_fahrenheit\": 67.82\n            }, \n            \"created\": \"2016-03-27T00:10:28.394Z\", \n            \"thing\": \"iot_python_chapter_09_01_gaston_hillar\"\n        }\n    ]\n}\n```", "```py\npip install pubnub\n```", "```py\n  Downloading pubnub-3.7.6.tar.gz\nCollecting pycrypto>=2.6.1 (from pubnub)\n  Downloading pycrypto-2.6.1.tar.gz (446kB)\n    100% |################################| 446kB 25kB/s \nRequirement already satisfied (use --upgrade to upgrade): requests>=2.4.0 in /usr/lib/python2.7/site-packages (from pubnub)\nInstalling collected packages: pycrypto, pubnub\n  Running setup.py install for pycrypto\nInstalling collected packages: pycrypto, pubnub\n  Running setup.py install for pycrypto\nRunning setup.py install for pubnub\nSuccessfully installed pubnub-3.7.6 pycrypto-2.6.1\n```", "```py\nimport time\nfrom pubnub import Pubnub\n\nclass MessageChannel:\n    command_key = \"command\"\n\n    def __init__(self, channel, temperature_servo, oled):\n        self.temperature_servo = temperature_servo\n        self.oled = oled\n        self.channel = channel\n        # Publish key is the one that usually starts with the \"pub-c-\" prefix\n        # Do not forget to replace the string with your publish key\n        publish_key = \"pub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        # Subscribe key is the one that usually starts with the \"sub-c\" prefix\n        # Do not forget to replace the string with your subscribe key\n        subscribe_key = \"sub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        self.pubnub = Pubnub(publish_key=publish_key, subscribe_key=subscribe_key)\n        self.pubnub.subscribe(channels=self.channel,\n                              callback=self.callback,\n                              error=self.callback,\n                              connect=self.connect,\n                              reconnect=self.reconnect,\n                              disconnect=self.disconnect)\n\n    def callback(self, message, channel):\n        if channel == self.channel:\n            if self.__class__.command_key in message:\n                if message[self.__class__.command_key] == \"print_temperature_fahrenheit\":\n                    self.temperature_servo.print_temperature(message[\"temperature_fahrenheit\"])\n                elif message[self.__class__.command_key] == \"print_information_message\":\n                    self.oled.print_line(11, message[\"text\"])\n            print(\"I've received the following message: {0}\".format(message))\n\n    def error(self, message):\n        print(\"Error: \" + str(message))\n\n    def connect(self, message):\n        print(\"Connected to the {0} channel\".\n              format(self.channel))\n        print(self.pubnub.publish(\n            channel=self.channel,\n            message=\"Listening to messages in the Intel Galileo Gen 2 board\"))\n\n    def reconnect(self, message):\n        print(\"Reconnected to the {0} channel\".\n              format(self.channel))\n\n    def disconnect(self, message):\n        print(\"Disconnected from the {0} channel\".\n              Format(self.channel))\n```", "```py\nif __name__ == \"__main__\":\n    temperature_and_humidity_sensor = \\\n        TemperatureAndHumiditySensor(0)\n    oled = TemperatureAndHumidityOled(0)\n    temperature_servo = TemperatureServo(3)\n message_channel = MessageChannel(\"temperature\", temperature_servo, oled)\n    while True:\n        temperature_and_humidity_sensor.\\\n            measure_temperature_and_humidity()\n        oled.print_temperature(\n            temperature_and_humidity_sensor.temperature_fahrenheit,\n            temperature_and_humidity_sensor.temperature_celsius)\n        oled.print_humidity(\n            temperature_and_humidity_sensor.humidity)\n        print(\"Ambient temperature in degrees Celsius: {0}\".\n              format(temperature_and_humidity_sensor.temperature_celsius))\n        print(\"Ambient temperature in degrees Fahrenheit: {0}\".\n              format(temperature_and_humidity_sensor.temperature_fahrenheit))\n        print(\"Ambient humidity: {0}\".\n              format(temperature_and_humidity_sensor.humidity))\n        # Sleep 10 seconds (10000 milliseconds)\n        time.sleep(10)\n```", "```py\n[1,\"Subscribed\",\"temperature\"]\n```", "```py\npython iot_python_chapter_09_02.py\n```", "```py\n\"Listening to messages in the Intel Galileo Gen 2 board\"\n```", "```py\n{\"text\":\"Enter Message Here\"}\n```", "```py\n{\"command\":\"print_temperature_fahrenheit\", \"temperature_fahrenheit\": 50 }\n```", "```py\n[1,\"Sent\",\"14594756860875537\"]\n{\n  \"command\": \"print_temperature_fahrenheit\",\n  \"temperature_fahrenheit\": 50\n}\n```", "```py\nI've received the following message: {u'command': u'print_temperature_fahrenheit', u'temperature_fahrenheit': 50}\n```", "```py\n{\"command\":\"print_information_message\", \"text\": \"Client ready\"}\n```", "```py\n [1,\"Sent\",\"14594794434885921\"]\n {\n  \"command\": \"print_information_message\",\n  \"text\": \"Client ready\"\n}\n```", "```py\nI've received the following message: {u'text': u'Client ready', u'command': u'print_information_message'}\n```", "```py\nimport time\nfrom pubnub import Pubnub\n\nclass MessageChannel:\n    command_key = \"command\"\n successfully_processed_command_key = \"successfully_processed_command\"\n\n    def __init__(self, channel, temperature_servo, oled):\n        self.temperature_servo = temperature_servo\n        self.oled = oled\n        self.channel = channel\n        # Do not forget to replace the string with your publish key\n        publish_key = \"pub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        # Subscribe key is the one that usually starts with the \"sub-c\" prefix\n        # Do not forget to replace the string with your subscribe key\n        subscribe_key = \"sub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        self.pubnub = Pubnub(publish_key=publish_key, subscribe_key=subscribe_key)\n        self.pubnub.subscribe(channels=self.channel,\n                              callback=self.callback,\n                              error=self.callback,\n                              connect=self.connect,\n                              reconnect=self.reconnect,\n                              disconnect=self.disconnect)\n\n def callback_response_message(self, message):\n print(\"I've received the following response from PubNub cloud: {0}\".format(message))\n\n def error_response_message(self, message):\n print(\"There was an error when working with the PubNub cloud: {0}\".format(message))\n\n def publish_response_message(self, message):\n response_message = {\n self.__class__.successfully_processed_command_key:\n message[self.__class__.command_key]}\n self.pubnub.publish(\n channel=self.channel,\n message=response_message,\n callback=self.callback_response_message,\n error=self.error_response_message)\n\n    def callback(self, message, channel):\n        if channel == self.channel:\n            print(\"I've received the following message: {0}\".format(message))\n            if self.__class__.command_key in message:\n                if message[self.__class__.command_key] == \"print_temperature_fahrenheit\":\n                    self.temperature_servo.print_temperature(message[\"temperature_fahrenheit\"])\n self.publish_response_message(message)\n                elif message[self.__class__.command_key] == \"print_information_message\":\n                    self.oled.print_line(11, message[\"text\"])\n self.publish_response_message(message)\n\n    def error(self, message):\n        print(\"Error: \" + str(message))\n\n    def connect(self, message):\n        print(\"Connected to the {0} channel\".\n              format(self.channel))\n        print(self.pubnub.publish(\n            channel=self.channel,\n            message=\"Listening to messages in the Intel Galileo Gen 2 board\"))\n\n    def reconnect(self, message):\n        print(\"Reconnected to the {0} channel\".\n              format(self.channel))\n\n    def disconnect(self, message):\n        print(\"Disconnected from the {0} channel\".\n              format(self.channel))\n```", "```py\npython iot_python_chapter_09_03.py\n```", "```py\n\"Listening to messages in the Intel Galileo Gen 2 board\"\n```", "```py\n{\"command\":\"print_temperature_fahrenheit\", \"temperature_fahrenheit\": 90 }\n```", "```py\n[1,\"Sent\",\"14595406989121047\"]\n{\n  \"command\": \"print_temperature_fahrenheit\",\n  \"temperature_fahrenheit\": 90\n}\n{\n  \"successfully_processed_command\": \"print_temperature_fahrenheit\"\n}\n```", "```py\nI've received the following message: {u'command': u'print_temperature_fahrenheit', u'temperature_fahrenheit': 90}\nI've received the following response from PubNub cloud: [1, u'Sent', u'14595422426124592']\nI've received the following message: {u'successfully_processed_command': u'print_temperature_fahrenheit'}\n```", "```py\n{\"command\":\"print_information_message\", \"text\": \"2nd message\"}\n```", "```py\n[1,\"Sent\",\"14595434708640961\"]\n{\n  \"command\": \"print_information_message\",\n  \"text\": \"2nd message\"\n}\n{\n  \"successfully_processed_command\": \"print_information_message\"\n}\n```", "```py\nI've received the following message: {u'text': u'2nd message', u'command': u'print_information_message'}\n2nd message\nI've received the following response from PubNub cloud: [1, u'Sent', u'14595434710438777']\nI've received the following message: {u'successfully_processed_command': u'print_information_message'}\n```", "```py\nimport time\nfrom pubnub import Pubnub\n\nclass Client:\n    command_key = \"command\"\n\n    def __init__(self, channel):\n        self.channel = channel\n        # Publish key is the one that usually starts with the \"pub-c-\" prefix\n        publish_key = \"pub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        # Subscribe key is the one that usually starts with the \"sub-c\" prefix\n        # Do not forget to replace the string with your subscribe key\n        subscribe_key = \"sub-c-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\"\n        self.pubnub = Pubnub(publish_key=publish_key, subscribe_key=subscribe_key)\n        self.pubnub.subscribe(channels=self.channel,\n                              callback=self.callback,\n                              error=self.callback,\n                              connect=self.connect,\n                              reconnect=self.reconnect,\n                              disconnect=self.disconnect)\n\n    def callback_command_message(self, message):\n        print(\"I've received the following response from PubNub cloud: {0}\".format(message))\n\n    def error_command_message(self, message):\n        print(\"There was an error when working with the PubNub cloud: {0}\".format(message))\n\n def publish_command(self, command_name, key, value):\n command_message = {\n self.__class__.command_key: command_name,\n key: value}\n self.pubnub.publish(\n channel=self.channel,\n message=command_message,\n callback=self.callback_command_message,\n error=self.error_command_message)\n\n    def callback(self, message, channel):\n        if channel == self.channel:\n            print(\"I've received the following message: {0}\".format(message))\n\n    def error(self, message):\n        print(\"Error: \" + str(message))\n\n    def connect(self, message):\n        print(\"Connected to the {0} channel\".\n              format(self.channel))\n        print(self.pubnub.publish(\n            channel=self.channel,\n            message=\"Listening to messages in the PubNub Python Client\"))\n\n    def reconnect(self, message):\n        print(\"Reconnected to the {0} channel\".\n              format(self.channel))\n\n    def disconnect(self, message):\n        print(\"Disconnected from the {0} channel\".\n              format(self.channel))\n```", "```py\nif __name__ == \"__main__\":\n    client = Client(\"temperature\")\n    client.publish_command(\n        \"print_temperature_fahrenheit\",\n        \"temperature_fahrenheit\",\n        45)\n    client.publish_command(\n        \"print_information_message\",\n        \"text\",\n        \"Python IoT\"\n    )\n    # Sleep 60 seconds (60000 milliseconds)\n    time.sleep(60)\n```", "```py\npython iot_python_chapter_09_04.py\n```", "```py\nConnected to the temperature channel\nI've received the following response from PubNub cloud: [1, u'Sent', u'14596508980494876']\nI've received the following response from PubNub cloud: [1, u'Sent', u'14596508980505581']\n[1, u'Sent', u'14596508982165140']\nI've received the following message: {u'text': u'Python IoT', u'command': u'print_information_message'}\nI've received the following message: {u'command': u'print_temperature_fahrenheit', u'temperature_fahrenheit': 45}\nI've received the following message: Listening to messages in the PubNub Python Client\nI've received the following message: {u'successfully_processed_command': u'print_information_message'}\nI've received the following message: {u'successfully_processed_command': u'print_temperature_fahrenheit'}\n```", "```py\n{\"command\":\"print_temperature_fahrenheit\", \"temperature_fahrenheit\": \"45\"}\n{\"command\":\"print_information_message\", \"text\": \"Python IoT\"}\n```", "```py\n[1,\"Subscribed\",\"temperature\"]\n\"Listening to messages in the Intel Galileo Gen 2 board\"\n{\n  \"text\": \"Python IoT\",\n  \"command\": \"print_information_message\"\n}\n{\n  \"command\": \"print_temperature_fahrenheit\",\n  \"temperature_fahrenheit\": 45\n}\n\"Listening to messages in the PubNub Python Client\"\n{\n  \"successfully_processed_command\": \"print_information_message\"\n}\n{\n  \"successfully_processed_command\": \"print_temperature_fahrenheit\"\n}\n```", "```py\npip install paho-mqtt\n```", "```py\nCollecting paho-mqtt\n  Downloading paho-mqtt-1.1.tar.gz (41kB)\n    100% |################################| 45kB 147kB/s\nInstalling collected packages: paho-mqtt\n  Running setup.py install for paho-mqtt\nSuccessfully installed paho-mqtt-1.1\n```", "```py\nimport time\nimport paho.mqtt.client as mqtt\nimport json\n\nclass MessageTopic:\n    command_key = \"command\"\n    successfully_processed_command_key = \"successfully_processed_command\"\n    # Replace with your own topic name\n    topic = \"iot-python-gaston-hillar/temperature\"\n    active_instance = None\n\n    def __init__(self, temperature_servo, oled):\n        self.temperature_servo = temperature_servo\n        self.oled = oled\n        self.client = mqtt.Client()\n        self.client.on_connect = MessageTopic.on_connect\n        self.client.on_message = MessageTopic.on_message\n        self.client.connect(host=\"iot.eclipse.org\",\n                            port=1883,\n                            keepalive=60)\n        MessageTopic.active_instance = self\n\n    def loop(self):\n        self.client.loop()\n\n    @staticmethod\n    def on_connect(client, userdata, flags, rc):\n        print(\"Connected to the {0} topic\".\n              format(MessageTopic.topic))\n        subscribe_result = client.subscribe(MessageTopic.topic)\n        publish_result_1 = client.publish(\n            topic=MessageTopic.topic,\n            payload=\"Listening to messages in the Intel Galileo Gen 2 board\")\n\n    @staticmethod\n    def on_message(client, userdata, msg):\n        if msg.topic == MessageTopic.topic:\n            print(\"I've received the following message: {0}\".format(str(msg.payload)))\n            try:\n                message_dictionary = json.loads(msg.payload)\n                if MessageTopic.command_key in message_dictionary:\n                    if message_dictionary[MessageTopic.command_key] == \"print_temperature_fahrenheit\":\n                        MessageTopic.active_instance.temperature_servo.print_temperature(\n                            message_dictionary[\"temperature_fahrenheit\"])\n                        MessageTopic.active_instance.publish_response_message(\n                            message_dictionary)\n                    elif message_dictionary[MessageTopic.command_key] == \"print_information_message\":\n                        MessageTopic.active_instance.oled.print_line(\n                            11, message_dictionary[\"text\"])\n                        MessageTopic.active_instance.publish_response_message(message_dictionary)\n            except ValueError:\n                # msg is not a dictionary\n                # No JSON object could be decoded\n                pass\n\n    def publish_response_message(self, message):\n        response_message = json.dumps({\n            self.__class__.successfully_processed_command_key:\n                message[self.__class__.command_key]})\n        result = self.client.publish(topic=self.__class__.topic,\n                                payload=response_message)\n        return result\n```", "```py\nif __name__ == \"__main__\":\n    temperature_and_humidity_sensor = \\\n        TemperatureAndHumiditySensor(0)\n    oled = TemperatureAndHumidityOled(0)\n    temperature_servo = TemperatureServo(3)\n message_topic = MessageTopic(temperature_servo, oled)\n    while True:\n        temperature_and_humidity_sensor.\\\n            measure_temperature_and_humidity()\n        oled.print_temperature(\n            temperature_and_humidity_sensor.temperature_fahrenheit,\n            temperature_and_humidity_sensor.temperature_celsius)\n        oled.print_humidity(\n            temperature_and_humidity_sensor.humidity)\n        print(\"Ambient temperature in degrees Celsius: {0}\".\n              format(temperature_and_humidity_sensor.temperature_celsius))\n        print(\"Ambient temperature in degrees Fahrenheit: {0}\".\n              format(temperature_and_humidity_sensor.temperature_fahrenheit))\n        print(\"Ambient humidity: {0}\".\n              format(temperature_and_humidity_sensor.humidity))\n        # Sleep 10 seconds (10000 milliseconds) but process messages every 1 second\n for i in range(0, 10):\n message_channel.loop()\n time.sleep(1)\n\n```", "```py\npython iot_python_chapter_09_05.py\n```", "```py\ncommand_key = \"command\"\ntopic = \"iot-python-gaston-hillar/temperature\"\n\ndef on_connect(client, userdata, flags, rc):\n    print(\"Connected to the {0} topic\".\n          format(topic))\n    subscribe_result = client.subscribe(topic)\n    publish_result_1 = client.publish(\n        topic=topic,\n        payload=\"Listening to messages in the Paho Python Client\")\n    publish_result_2 = publish_command(\n        client,\n        topic,\n        \"print_temperature_fahrenheit\",\n        \"temperature_fahrenheit\",\n        45)\n    publish_result_3 = publish_command(\n        client,\n        topic,\n        \"print_information_message\",\n        \"text\",\n        \"Python IoT\")\n\ndef on_message(client, userdata, msg):\n    if msg.topic == topic:\n        print(\"I've received the following message: {0}\".format(str(msg.payload)))\n\ndef publish_command(client, topic, command_name, key, value):\n    command_message = json.dumps({\n        command_key: command_name,\n        key: value})\n    result = client.publish(topic=topic,\n                            payload=command_message)\n    return result\n```", "```py\nif __name__ == \"__main__\":\n    client = mqtt.Client()\n    client.on_connect = on_connect\n    client.on_message = on_message\n    client.connect(host=\"iot.eclipse.org\",\n                   port=1883,\n                   keepalive=60)\n    client.loop_forever()\n```", "```py\npython iot_python_chapter_09_06.py\n```", "```py\nConnected to the iot-python-gaston-hillar/temperature topic\nI've received the following message: Listening to messages in the Paho Python Client\nI've received the following message: {\"command\": \"print_temperature_fahrenheit\", \"temperature_fahrenheit\": 45}\nI've received the following message: {\"text\": \"Python IoT\", \"command\": \"print_information_message\"}\nI've received the following message: {\"successfully_processed_command\": \"print_temperature_fahrenheit\"}\nI've received the following message: {\"successfully_processed_command\": \"print_information_message\"}\n```", "```py\n{\"command\":\"print_temperature_fahrenheit\", \"temperature_fahrenheit\": \"45\"}\n{\"command\":\"print_information_message\", \"text\": \"Python IoT\"}\n```", "```py\nI've received the following message: Listening to messages in the Intel Galileo Gen 2 board\nI've received the following message: Listening to messages in the Paho Python Client\nI've received the following message: {\"command\": \"print_temperature_fahrenheit\", \"temperature_fahrenheit\": 45}\nI've received the following message: {\"text\": \"Python IoT\", \"command\": \"print_information_message\"}\nI've received the following message: {\"successfully_processed_command\": \"print_temperature_fahrenheit\"}\nI've received the following message: {\"successfully_processed_command\": \"print_information_message\"}\n```"]