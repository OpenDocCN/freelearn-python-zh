["```py\n        odoo.define('my_hostel.component', [], function (require) {\n        \"use strict\";\n        console.log(\"Load component......\");\n    });\n    ```", "```py\n    'assets': {\n        'web.assets_backend': [\n            'my_hostel/static/src/js/component.js',\n        ],\n    },\n    ```", "```py\n    const { Component, mount, xml , whenReady } = owl;\n    ```", "```py\n    class MyComponent extends Component {\n        static template = xml`\n            <div class=\"bg-info text-white text-center p-3\">\n                <b> Welcome To Odoo </b>\n            </div>`\n    }\n    ```", "```py\n    whenReady().then(() => {\n        mount(MyComponent, document.body);\n    });\n    ```", "```py\n    class MyComponent extends Component {\n        static template = xml`\n            <div class=\"bg-info text-white text-center p-3\">\n                <b> Welcome To Odoo </b>\n                <i class=\"fa fa-close p-1 float-end\"\n                   style=\"cursor: pointer;\"\n                   t-on-click=\"onRemove\"> </i>\n            </div>`\n    }\n    ```", "```py\n    class MyComponent extends Component {\n        static template = xml`\n            <div class=\"bg-info text-white text-center p-3\">\n                <b> Welcome To Odoo </b>\n                <i class=\"fa fa-close p-1 float-end\"\n                   style=\"cursor: pointer;\"\n                   t-on-click=\"onRemove\"> </i>\n            </div>`\n        onRemove(ev) {\n            $(ev.target).parent().remove();\n        }\n    }\n    ```", "```py\nt-on-<name of event>=\"<method name in component>\"\n```", "```py\nt-on-mouseover=\"onMouseover\"\n```", "```py\n    static template = xml`\n        <div class=\"bg-info text-white text-center p-3\">\n            <i class=\"fa fa-arrow-left p-1\"\n               style=\"cursor: pointer;\"\n               t-on-click=\"onPrevious\"> </i>\n            <b t-esc=\"messageList[Math.abs(state.currentIndex%4)]\"/>\n            <i class=\"fa fa-arrow-right p-1\"\n               style=\"cursor: pointer;\"\n               t-on-click=\"onNext\"> </i>\n            <i class=\"fa fa-close p-1 float-end\"\n               style=\"cursor: pointer;\"\n               t-on-click=\"onRemove\"> </i>\n        </div>`\n    ```", "```py\n    const { Component, mount, xml , whenReady, useState } = owl;\n    ```", "```py\n    setup() {\n        this.messageList = [\n            'Hello World',\n            'Welcome to Odoo',\n            'Odoo is awesome',\n            'You are awesome too'\n        ];\n        this.state = useState({ currentIndex: 0 });\n    }\n    ```", "```py\n    onNext(ev) {\n        this.state.currentIndex++;\n    }\n    onPrevious(ev) {\n        this.state.currentIndex--;\n    }\n    ```", "```py\n    const {\n            Component,\n            mount,\n            whenReady,\n            onWillStart,\n            onMounted,\n            onWillUnmount,\n            onWillUpdateProps,\n            onPatched,\n            onWillPatch,\n            onWillRender,\n            onRendered,\n            onError,\n            onWillDestroy,\n        } = owl;\n    ```", "```py\n    setup() {\n         console.log('CALLED:> setup');\n    }\n    ```", "```py\n    setup() {\n        onWillStart(async () => {\n            console.log('CALLED:> willStart');\n        });\n    }\n    ```", "```py\n    setup() {\n        onWillRender(() => {\n            console.log('CALLED:> willRender');\n        });\n    }\n    ```", "```py\n    setup() {\n        onRendered(() => {\n            console.log('CALLED:> Rendered');\n        });\n    }\n    ```", "```py\n    setup() {\n        onMounted(() => {\n            console.log('CALLED:> Mounted');\n        });\n    }\n    ```", "```py\n    setup() {\n        onWillUpdateProps(() => {\n            console.log('CALLED:> WillUpdateProps');\n        });\n    }\n    ```", "```py\n    setup() {\n        onWillPatch(() => {\n            console.log('CALLED:> WillPatch');\n        });\n    }\n    ```", "```py\n    setup() {\n        onPatched(() => {\n            console.log('CALLED:> Patch');\n        });\n    }\n    ```", "```py\n    setup() {\n        onWillUnmount(() => {\n            console.log('CALLED:> WillUnmount');\n        });\n    }\n    ```", "```py\n    setup() {\n        onWillDestroy(() => {\n            console.log('CALLED:> WillDestroy');\n        });\n    }\n    ```", "```py\n    setup() {\n        onError(() => {\n            console.log('CALLED:> Error');\n        });\n    }\n    ```", "```py\nsetup() {\n    onWillStart(async () => {\n        this.data = await this.loadData()\n    });\n}\n```", "```py\n    category = fields.Integer('Category')\n    ```", "```py\n           <field name=\"category\" widget=\"category_color\"/>\n    ```", "```py\n    <t t-name=\"OWLColorPill\">\n        <span t-attf-class=\"o_color_pill o_color_#{props.color} #{props.value == props.color ? 'active': ''}\"\n              t-att-data-val=\"props.color\"\n              t-on-click=\"() => this.pillClicked()\"\n              t-attf-title=\"#{props.category_count or 0 } Room booked in this category\" />\n    </t>\n    <span t-name=\"OWLFieldColorPills\">\n        <t t-foreach=\"totalColors\" t-as='color' t-key=\"color\">\n            <ColorPill onClickColorUpdated=\"data => this.colorUpdated(data)\"\n                       color='color'\n                       value=\"props.value\"\n                       category_count=\"categoryInfo[color]\"/>\n        </t>\n    </span>\n    ```", "```py\n    'assets': {\n        'web.assets_backend': [\n            'my_hostel/static/src/js/field_widget.js',\n        ],\n    },\n    ```", "```py\n    /** @odoo-module */\n    import { Component, onWillStart , onWillUpdateProps} from \"@odoo/owl\";\n    import { registry } from \"@web/core/registry\";\n    class ColorPill extends Component {\n        static template = 'OWLColorPill';\n        pillClicked() {\n            this.props.onClickColorUpdated(this.props.color);\n        }\n    }\n    export class OWLCategColorField extends Component {\n        static supportedFieldTypes = ['integer'];\n        static template = 'OWLFieldColorPills';\n        static components = { ColorPill };\n        setup() {\n            this.totalColors = [1,2,3,4,5,6];\n            onWillStart(async() => {\n                await this.loadCategInformation();\n            });\n            onWillUpdateProps(async() => {\n                await this.loadCategInformation();\n            });\n            super.setup();\n        }\n        colorUpdated(value) {\n            this.props.record.update({ [this.props.name]: value });\n        }\n        async loadCategInformation() {\n            var self = this;\n            self.categoryInfo = {};\n            var resModel = self.env.model.root.resModel;\n            var domain = [];\n            var fields = ['category'];\n            var groupby = ['category'];\n            const categInfoPromise = await self.env.services.orm.readGroup(\n                resModel,\n                domain,\n                fields,\n                groupby\n            );\n            categInfoPromise.map((info) => {\n                self.categoryInfo[info.category] = info.category_count;\n            });\n        }\n    }\n    registry.category(\"fields\").add(\"category_color\",{\n        component: OWLCategColorField\n    });\n    ```", "```py\n    'assets': {\n        'web.assets_backend': [\n            'my_hostel/static/src/scss/field_widget.scss',\n            'my_hostel/static/src/js/field_widget.js',\n            'my_hostel/static/src/xml/field_widget.xml',\n        ],\n    },\n    ```", "```py\n    <p><t t-out=\"value\"/></p>\n    <p>42</p>\n    ```", "```py\n        <t t-set=\"foo\" t-value=\"2 + 1\"/>\n        <t t-out=\"foo\"/>\n        ```", "```py\n    <div>\n        <t t-if=\"condition\">\n            <p>ok</p>\n        </t>\n    </div>\n    ```", "```py\n    <div>\n        <p>ok</p>\n    </div>\n    ```", "```py\n    <div>\n    </div>\n    ```", "```py\n    <div>\n        <p t-if=\"user.birthday == today()\">Happy birthday!</p>\n        <p t-elif=\"user.login == 'root'\">Welcome master!</p>\n        <p t-else=\"\">Welcome!</p>\n    </div>\n    ```", "```py\n    <t t-foreach=\"[1, 2, 3]\" t-as=\"i\">\n        <p><t t-out=\"i\"/></p>\n    </t>\n    ```", "```py\n    <p>1</p>\n    <p>2</p>\n    <p>3</p>\n    ```", "```py\n    t-att-$name\n    < div t-att-a=\"42\"/>\n    ```", "```py\n    <div a=\"42\"></div>\n        t-attf-$name\n    This will be rendered as follows:\n\n    ```", "```py\n\n    This will be rendered as follows:\n\n    ```", "```py\n\n    This will be rendered as follows:\n\n    ```", "```py\n\n    ```", "```py\n    <t t-call=\"other-template\"/>\n    <p><t t-value=\"var\"/></p>\n    ```", "```py\n    <t t-set=\"var\" t-value=\"1\"/>\n    <t t-call=\"other-template\"/>\n    The body of the `call` directive can be arbitrarily complex (not just set directives), and its rendered form will be available within the called template as a magical `0` variable:\n\n    ```", "```py\n    <div>\n        This template was called with content:\n        <em>content</em>\n    </div>\n    ```", "```py\n\n    ```", "```py\nclass Child extends Component {\n  static template = xml`<div>child component <t t-esc=\"props.value\"/></div>`;\n}\nclass Parent extends Component {\n  static template = xml`\n    <div>\n      <Child value=\"1\"/>\n      <Child value=\"2\"/>\n    </div>`;\n  static components = { Child };\n}\n```", "```py\n<div>\n    <Child value=\"string\"/>\n    <Child t-if=\"condition\" model=\"model\"/>\n</div>\n```", "```py\nfor Child: value,\nfor Child: model,\n```"]