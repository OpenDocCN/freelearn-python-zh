- en: Introduction to Microsoft Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned how to build serverless functions and serverless architectures
    using Python in the AWS environment. We have also learned about the settings and
    environment of the AWS Lambda tool in great detail. We shall now learn and explore
    its counterpart from Microsoft Azure Functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how Microsoft Azure Functions work, what the
    Microsoft Azure Functions console looks like, and how to go about understanding
    the settings in the console. This chapter is divided into the following sections:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to Microsoft Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating your first Azure Function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding triggers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding logging and monitoring
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Best practices for writing Microsoft Azure Functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to Microsoft Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Microsoft Azure Functions is the Azure counterpart of AWS''s Lambda service.
    In this section, we will learn how to locate and navigate the Microsoft Azure
    Functions console. So, let''s start by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can locate the Azure Functions app by navigating to the All services tab
    on the left menu and typing out the function filter. You will now notice the Microsoft
    Azure Function''s service under the name, Function Apps:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00280.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click on that, you will be re-directed to the Function Apps console.
    For now, it will be empty if you haven''t created any functions. The console will
    look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00281.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s start with creating an Azure Function. To do so, we need to click
    on the Create a resource option on the left menu, then click on the Compute option
    from that list, and then select the Function App option from the subsequent list
    of options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00282.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Microsoft Azure Functions come under the list of **Compute** resources on the
    dashboard. In the following sections, we will learn how to create Microsoft Azure
    Functions and also understand the different kinds of triggers and how they work.
  prefs: []
  type: TYPE_NORMAL
- en: Creating your first Azure Function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to create and deploy an Azure Function.
    We will go through the process step by step in order to understand how each section
    of an Azure function works:'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the Functions App in the menu, you will be re-directed to
    the Function App creation wizard, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00283.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Add the required information in the wizard accordingly. Choose Linux (Preview)
    as the OS. Then, click on the blue Create button at the bottom of the wizard:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00284.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on the Automation options at the bottom will open up a validation
    screen for automating Function deployments. This is not needed for this chapter.
    This will simply validate your Azure Function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00285.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you click Create, you will see the deployment in progress under the Notifications
    menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00286.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once it has been successfully created, it will be reflected in your notifications
    list with a green-colored notification:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00287.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Clicking on Go to resource will take you to the newly created Azure Function.
    The function console will look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00288.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: We have successfully created an Azure Function. We will cover in more detail
    triggers, monitoring, and security in the forthcoming sections of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding triggers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will look at how triggers work in Azures Function applications.
    We will also learn about the different types of triggers and their purpose. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the left menu, click on the (+) symbol beside the Functions option for adding,
    removing, or editing a trigger:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00289.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will be taken to the function creation console, which looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00290.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Azure does not have a lot of support for Python. So, in this console, let''s
    choose a custom function of our own. Click on Custom function under the Get Started
    on your own option at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00291.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the function creation wizard, enable the Experimental Language option in
    the right menu. Now, you will be able to see the Python option in the available
    languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00292.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'There are two triggers that are available for the Python language. One is the
    HTTP trigger and the other is the Queue trigger**,** as seen in the following
    screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00293.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The HTTP trigger will trigger the function whenever it receives an HTTP request.
    When you click on it, you will notice options for adding different HTTP-related
    settings, such as authorization and name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00294.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The next trigger is the Queue trigger. This will trigger the function whenever
    a message is added to the queue. We have done the same in AWS Lambda in one of
    our previous chapters too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00295.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Understanding logging and monitoring in Azures Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn and understand the monitoring and logging mechanisms
    available to the user in Microsoft Azure Functions. Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By clicking on the Monitor option under the function, we can access the monitoring
    suite of that particular Azure Function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00296.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The monitoring suite for the function that we created looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00297.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, click on the Open Application Insights option at the top of the menu.
    This will take you to the detailed monitoring page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00298.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you scroll down, you will see the function-specific metrics, such as the
    server response times and request performance. This is very useful as it means
    we don''t need separate dashboards for monitoring all these statistics:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00299.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have learned about Microsoft Azure Functions logging and monitoring,
    let's go through some best practices.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices for writing Azure Functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have learned how to create, configure, and deploy Microsoft Azure Functions.
    We will now learn about the best practices for using them:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Microsoft Azure Functions don''t have a huge support for Python like AWS Lambda.
    They have a very limited set of Python-based triggers. So, you need to write custom
    functions for most of them. Developers need to keep that in mind before taking
    a decision on using Microsoft Azure Functions. The languages supported by Microsoft
    Azure Functions are C#, F#, and JavaScript:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00300.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'The experimental languages that are supported by Microsoft Azure Functions
    are Bash, Batch, PHP, TypeScript, Python, and PowerShell:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00301.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'Make sure you use the security settings properly to secure your functions.
    You can find all the settings you need in the Platform features options:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/00302.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Finally, use monitoring as much as possible, as it is crucial to log and monitor
    serverless functions. We have already gone through the monitoring details and
    the corresponding settings.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about Microsoft Azure Functions and how to build
    them. We  learned about the various functionalities available, along with the
    available triggers for the Python runtime. We also learned and experimented with
    the logging and monitoring capabilities of Microsoft Azure Functions along with
    understanding and experimenting with the experimental features of Azure such as
    the additional runtimes apart from the standard set of languages it offers out
    of the box.
  prefs: []
  type: TYPE_NORMAL
