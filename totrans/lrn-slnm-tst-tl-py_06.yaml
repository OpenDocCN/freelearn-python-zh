- en: Chapter 6. Cross-browser Testing
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。跨浏览器测试
- en: 'Selenium supports cross-browser testing on multiple browser and operating system
    combinations. This is a very useful feature for testing web applications on various
    browser and operating system combinations to certify that the app is cross-browser
    compatible and to make sure that users do not experience problems with their choice
    of browsers or operating systems. Selenium WebDriver offers an ability to run
    tests on remote machines or distribute them against a number of operating systems
    and browsers running on remote machines or the cloud. So far, you have learned
    how to create and run tests on a local machine with various browser drivers installed
    as shown in the following diagram:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 支持在多个浏览器和操作系统组合上进行跨浏览器测试。这对于在多种浏览器和操作系统组合上测试网络应用程序，以验证应用程序的跨浏览器兼容性以及确保用户在使用他们选择的浏览器或操作系统时不会遇到问题非常有用。Selenium
    WebDriver 提供了在远程机器上运行测试或在多个运行在远程机器或云端的操作系统和浏览器上分布测试的能力。到目前为止，你已经学习了如何创建和运行在本地机器上安装了各种浏览器驱动程序的测试，如下面的图所示：
- en: '![Cross-browser Testing](img/3506OS_06_01.jpg)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![跨浏览器测试](img/3506OS_06_01.jpg)'
- en: 'In this chapter, you will learn how to run these tests on a remote machine
    and then how to scale and run tests in a distributed architecture on multiple
    browser and operating system combinations for cross-browser testing. This saves
    a great amount of effort and time spent in cross-browser testing. We will cover
    the following aspects in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何在远程机器上运行这些测试，然后如何在不同浏览器和操作系统组合的分布式架构中扩展和运行测试，以进行跨浏览器测试。这可以节省大量在跨浏览器测试中花费的时间和精力。在本章中，我们将涵盖以下方面：
- en: Downloading and using the Selenium standalone server
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和使用 Selenium 独立服务器
- en: How to use the `Remote` class to run tests on the Selenium standalone server
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `Remote` 类在 Selenium 独立服务器上运行测试
- en: Running tests on the Selenium standalone server
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Selenium 独立服务器上运行测试
- en: Adding nodes to the Selenium standalone server to create a grid for distributed
    execution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 Selenium 独立服务器添加节点以创建用于分布式执行的网格
- en: Running tests in the grid against multiple browser and operating system combinations
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在网格中针对多个浏览器和操作系统组合运行测试
- en: Running tests in a cloud with Sauce Labs and BrowserStack
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Sauce Labs 和 BrowserStack 云上运行测试
- en: The Selenium standalone server
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium 独立服务器
- en: 'The Selenium standalone server is a component of Selenium that provides the
    ability to run tests on remote machines. We need to use the `RemoteWebDriver`
    class to connect to the Selenium standalone server to run tests on a remote machine.
    The `RemoteWebDriver` class listens to Selenium commands coming from test scripts
    using the `RemoteWebDriver` class on a designated port. Based on the configuration
    provided by the `RemoteWebDriver` class, the Selenium server will launch the specified
    browser and forward the commands to the browser. It supports almost all the browsers
    and mobile platforms with Appium. The following diagram shows the architecture
    of the Selenium server running tests on remote machines configured with different
    types of browsers:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 独立服务器是 Selenium 的一个组件，它提供了在远程机器上运行测试的能力。我们需要使用 `RemoteWebDriver` 类来连接到
    Selenium 独立服务器，以便在远程机器上运行测试。`RemoteWebDriver` 类通过在指定的端口上使用 `RemoteWebDriver` 类监听来自测试脚本中的
    Selenium 命令。根据 `RemoteWebDriver` 类提供的配置，Selenium 服务器将启动指定的浏览器并将命令转发到浏览器。它支持几乎所有的浏览器和带有
    Appium 的移动平台。以下图显示了配置了不同类型浏览器的远程机器上运行的 Selenium 服务器架构：
- en: '![The Selenium standalone server](img/3506OS_06_02.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![Selenium 独立服务器](img/3506OS_06_02.jpg)'
- en: Downloading the Selenium standalone server
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下载 Selenium 独立服务器
- en: The Selenium standalone server is available in a bundled JAR format for download
    at [http://docs.seleniumhq.org/download/](http://docs.seleniumhq.org/download/)
    in the *Selenium Server (formerly the Selenium RC Server)* section. While writing
    this book, Selenium server Version 2.41.0 was available for download. You can
    simply copy the Selenium standalone server JAR file on a remote machine and start
    the server.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium 独立服务器以捆绑的 JAR 格式提供下载，可在 [http://docs.seleniumhq.org/download/](http://docs.seleniumhq.org/download/)
    的 *Selenium 服务器（以前称为 Selenium RC 服务器）* 部分找到。在编写本书时，Selenium 服务器版本 2.41.0 可供下载。你只需将
    Selenium 独立服务器 JAR 文件复制到远程机器上并启动服务器即可。
- en: Note
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The Selenium standalone server is a self-contained server written in Java. It
    requires a Java Runtime Environment (JRE) to be installed on the machine where
    it is run. Please make sure you have installed JRE 6 or onwards on the remote
    machine where you intend to run the Selenium standalone server.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium独立服务器是一个用Java编写的自包含服务器。它需要在运行它的机器上安装Java运行时环境（JRE）。请确保您已在打算运行Selenium独立服务器的远程机器上安装了JRE
    6或更高版本。
- en: Launching the Selenium standalone server
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 启动Selenium独立服务器
- en: 'The Selenium standalone server can be launched in various modes or roles. In
    this section, we will launch it in a standalone mode. We can launch the server
    with the following command on the remote machine''s command line from the directory
    where the server''s JAR file is kept. In this example, it is launched on a Windows
    8 machine by using the following command line:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium独立服务器可以以各种模式或角色启动。在本节中，我们将以独立模式启动它。我们可以在保存服务器JAR文件的目录中，从远程机器的命令行使用以下命令启动服务器。在本例中，它通过以下命令行在Windows
    8机器上启动：
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'By default, Selenium server will start listening on port `4444` at `http://<remote-machine-ip>:4444`.
    It is possible to change the port through the command-line option while starting
    the server. When the server is launched, you will see the following output on
    the command line:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Selenium服务器将在`4444`端口上监听`http://<remote-machine-ip>:4444`。在启动服务器时，您可以在命令行上看到以下输出：
- en: '![Launching the Selenium standalone server](img/3506OS_06_03.jpg)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![启动Selenium独立服务器](img/3506OS_06_03.jpg)'
- en: 'The Selenium server will be launched as an HTTP server on the remote machine
    and we can launch and see the server in a browser window. Launch the browser and
    navigate to `http://<remote-machine-ip>:4444/wd/hub/static/resource/hub.html`.
    This will display the following page in the browser window:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium服务器将在远程机器上作为HTTP服务器启动，我们可以在浏览器窗口中启动并查看服务器。启动浏览器并导航到`http://<remote-machine-ip>:4444/wd/hub/static/resource/hub.html`。这将显示以下页面在浏览器窗口中：
- en: '![Launching the Selenium standalone server](img/3506OS_06_04.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![启动Selenium独立服务器](img/3506OS_06_04.jpg)'
- en: Now that we have the Selenium server up and running, it is time to create and
    run a test that we can run on the server.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动并运行了Selenium服务器，是时候创建并运行一个可以在服务器上运行的测试了。
- en: Running a test on the Selenium standalone server
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Selenium独立服务器上运行测试
- en: To run a test on Selenium server, we need to use `RemoteWebDriver`. The `Remote`
    class in the Selenium Python binding acts like a client and communicates with
    the Selenium server to run the tests on a remote machine. We need to use this
    class to instruct the Selenium server as to what configurations are needed to
    run a test on a remote machine and commands to run on selected browsers.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Selenium服务器上运行测试，我们需要使用`RemoteWebDriver`。Selenium Python绑定中的`Remote`类充当客户端，与Selenium服务器通信，以在远程机器上运行测试。我们需要使用这个类来指示Selenium服务器需要哪些配置来在远程机器上运行测试，以及要在所选浏览器上运行的命令。
- en: 'In addition to the `Remote` class, we need to set `desired_capabilities`, that
    is the browser, operating system, and any other configuration that we want to
    communicate to the Selenium standalone server to run the test. In this example,
    we will specify a platform and browser name as the desired capabilities required
    to run the test:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`Remote`类之外，我们还需要设置`desired_capabilities`，即浏览器、操作系统以及我们想要传达给Selenium独立服务器的任何其他配置。在本例中，我们将指定一个平台和浏览器名称作为运行测试所需的期望能力：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Next, we will create an instance of the `Remote` class and pass `desired_capabilities`.
    When the script is executed, it will connect to the Selenium server and request
    the server to set up a Firefox browser running on Windows to run the test:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个`Remote`类的实例并传递`desired_capabilities`。当脚本执行时，它将连接到Selenium服务器并请求服务器设置一个在Windows上运行的Firefox浏览器来运行测试：
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let''s implement a search test that we created earlier and use the `Remote`
    class instead of the Firefox driver in the following way:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个我们之前创建的搜索测试，并用以下方式使用`Remote`类代替Firefox驱动程序：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'When this test is executed, you can see the console of the Selenium server.
    It shows the interaction between the test and the server as shown in the following
    screenshot. It shows which command has been executed and its status:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当这个测试执行时，您可以在Selenium服务器的控制台中看到。它显示了测试与服务器之间的交互，如下面的截图所示。它显示了已执行的命令及其状态：
- en: '![Running a test on the Selenium standalone server](img/3506OS_06_05.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![在Selenium独立服务器上运行测试](img/3506OS_06_05.jpg)'
- en: 'You can also navigate to `http://<remote-machine-ip>:4444/wd/hub/static/resource/hub.html`,
    which displays a new session being created. If you hover over the capabilities
    link, it displays the capabilities being used to run the tests, as shown in the
    following screenshot:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以导航到`http://<remote-machine-ip>:4444/wd/hub/static/resource/hub.html`，该链接显示正在创建的新会话。如果您将鼠标悬停在“能力”链接上，它将显示用于运行测试的能力，如图以下屏幕截图所示：
- en: '![Running a test on the Selenium standalone server](img/3506OS_06_06.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![在Selenium独立服务器上运行测试](img/3506OS_06_06.jpg)'
- en: Adding support for Internet Explorer
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加对Internet Explorer的支持
- en: 'Firefox support is bundled with the Selenium server; however, for running tests
    on **Internet Explorer** (**IE**), we need to specify the path of the IE driver
    executable while starting the Selenium server. This is done by specifying the
    executable path to the `wedriver.ie.driver` option in the command line as shown:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Firefox支持捆绑在Selenium服务器中；然而，为了在**Internet Explorer**（**IE**）上运行测试，我们需要在启动Selenium服务器时指定IE驱动程序可执行文件的路径。这通过在命令行中指定`wedriver.ie.driver`选项的可执行路径来完成，如图所示：
- en: '[PRE4]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: By providing the path of the IE driver, Selenium server will now launch and
    support IE for testing on the remote machine.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 通过提供IE驱动程序的路径，Selenium服务器现在将启动并支持在远程机器上测试IE。
- en: Adding support for Chrome
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加对Chrome的支持
- en: 'Similar to the IE driver executable, we need to mention the Chrome driver on
    the remote machine to support testing on Chrome. This is done by specifying the
    Chrome driver path in the `webdriver.chrome.driver` option as shown in following
    command line:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 与IE驱动程序可执行文件类似，我们需要在远程机器上提及Chrome驱动程序以支持Chrome的测试。这通过在以下命令行中指定`webdriver.chrome.driver`选项来完成：
- en: '[PRE5]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Selenium server will now support running tests on both the Internet Explorer
    and Chrome on the remote machine.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium服务器现在将支持在远程机器上运行Internet Explorer和Chrome的测试。
- en: Selenium Grid
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Selenium Grid
- en: Selenium Grid lets us distribute our tests across multiple physical or virtual
    machines in order to run tests in a distributed fashion or run them in parallel.
    This helps in getting a faster and more accurate feedback by cutting down the
    time required for running tests and speeding up cross-browser testing. We can
    use our existing infrastructure of virtual machines in a cloud to set up the Grid.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Grid允许我们将测试分布在多个物理或虚拟机器上，以便以分布式方式运行测试或并行运行它们。这有助于通过减少运行测试所需的时间并加快跨浏览器测试的速度来获得更快、更准确的反馈。我们可以使用我们现有的云虚拟机基础设施来设置网格。
- en: 'Selenium Grid enables us to run multiple tests in parallel, on multiple nodes
    or clients, in a heterogeneous environment where we can have a mixture of browser
    and operating system support. It makes all these nodes appear as a single instance
    and transparently distributes tests on the underlying infrastructure as shown
    in the following diagram:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: Selenium Grid使我们能够在异构环境中并行运行多个测试，在多个节点或客户端上，我们可以有浏览器和操作系统支持的混合。它使所有这些节点看起来像一个单一实例，并透明地将测试分配到以下图示的基础设施上：
- en: '![Selenium Grid](img/3506OS_06_07.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![Selenium Grid](img/3506OS_06_07.jpg)'
- en: Launching Selenium server as a hub
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以集线器方式启动Selenium服务器
- en: We need to set up Selenium server as a hub to run the tests in a distributed
    fashion. The hub will provide all the available configurations or capabilities
    to tests.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要设置Selenium服务器作为集线器以分布式方式运行测试。集线器将为测试提供所有可用的配置或功能。
- en: The slave machines, also called as nodes, connect to the hub. Tests will use
    JSON wire protocol using the `Remote` class to communicate with the hub to execute
    the Selenium commands. You can find more about JSON wire protocol at [https://code.google.com/p/selenium/wiki/JsonWireProtocol](https://code.google.com/p/selenium/wiki/JsonWireProtocol).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 从机，也称为节点，连接到集线器。测试将使用`Remote`类通过JSON线协议与集线器通信以执行Selenium命令。您可以在[https://code.google.com/p/selenium/wiki/JsonWireProtocol](https://code.google.com/p/selenium/wiki/JsonWireProtocol)上找到更多关于JSON线协议的信息。
- en: The hub acts as the central point that will receive the commands from tests
    and distribute them to the appropriate node or to the node matching the capabilities
    required by the test. Let's set up a Selenium server as a Grid and then add nodes
    with different browser and operating system combinations.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 集线器作为中心点，将接收来自测试的命令并将它们分配到适当的节点或与测试所需的节点匹配的节点。让我们设置一个Selenium服务器作为网格，然后添加具有不同浏览器和操作系统组合的节点。
- en: We can start the Selenium standalone server as a hub (also known as a Grid server)
    with additional arguments to the command that we used to start the server in earlier
    sections.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向之前章节中启动服务器的命令添加额外的参数来以 hub（也称为网格服务器）的形式启动 Selenium 独立服务器。
- en: 'Create a new command/terminal window and navigate to the location where the
    Selenium server JAR is located. Start the server as a hub by typing the following
    command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的命令/终端窗口，导航到 Selenium 服务器 JAR 文件所在的目录。通过输入以下命令以 hub 的形式启动服务器：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We need to use the `–role` argument with the value `hub` to start the server
    as hub or Grid server.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用 `–role` 参数并传递 `hub` 值来以 hub 或网格服务器的方式启动服务器。
- en: 'In this example, the server is started on a Windows machine. It starts with
    the following information printed on the console:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，服务器在 Windows 机器上启动。它将在控制台上打印以下信息：
- en: '![Launching Selenium server as a hub](img/3506OS_06_08.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![启动 Selenium 服务器作为 hub](img/3506OS_06_08.jpg)'
- en: 'When we start the Selenium server as hub, it starts as a Grid server. We can
    see the Grid console in the browser as shown in the following screenshot:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们以 hub 的形式启动 Selenium 服务器时，它将以网格服务器启动。我们可以在浏览器中看到以下截图所示的网格控制台：
- en: '![Launching Selenium server as a hub](img/3506OS_06_09.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![启动 Selenium 服务器作为 hub](img/3506OS_06_09.jpg)'
- en: Adding nodes
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加节点
- en: Now that we have our Selenium server started as a Grid server, let's add a few
    node configurations to the server.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经启动了 Selenium 服务器作为网格服务器，让我们将一些节点配置添加到服务器中。
- en: Adding an IE node
  id: totrans-63
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 IE 节点
- en: 'Let''s begin with a node that provides Internet Explorer capabilities running
    on Windows. Open a new command prompt or a terminal window and navigate to the
    location where the Selenium server JAR is located. To launch a node and add it
    to the Grid, type the following command:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在 Windows 上运行的提供 Internet Explorer 功能的节点开始。打开一个新的命令提示符或终端窗口，导航到 Selenium
    服务器 JAR 文件所在的目录。要启动一个节点并将其添加到网格中，请输入以下命令：
- en: '[PRE7]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To add the node to the Grid, we need to use the `–role` argument and pass `webdriver`
    as a value. We also need to pass the browser configuration for the node. This
    is passed through the `–browser` argument. In this example, we passed `browserName`
    as `internet explorer`, `version` as `10`, `maxinstance` as `1`, and `platform`
    as `WINDOWS`. The `maxinstance` value tells the Grid how many concurrent instances
    of the browser will be supported by the node.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 要将节点添加到网格中，我们需要使用 `–role` 参数并传递 `webdriver` 作为值。我们还需要传递节点的浏览器配置。这通过 `–browser`
    参数传递。在这个例子中，我们传递了 `browserName` 为 `internet explorer`，`version` 为 `10`，`maxinstance`
    为 `1`，以及 `platform` 为 `WINDOWS`。`maxinstance` 的值告诉网格节点将支持多少个浏览器的并发实例。
- en: To connect the node to the hub or Grid server, we need to specify the `–hubHost`
    argument with the hostname or IP address of the Grid server. Lastly, we need to
    specify the port on which the node will be running.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 要将节点连接到 hub 或网格服务器，我们需要指定 `–hubHost` 参数，并使用网格服务器的主机名或 IP 地址。最后，我们需要指定节点将运行的端口。
- en: 'When we run the preceding command and the node is launched, the following configuration
    will appear on the Grid console:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行前面的命令并启动节点时，以下配置将出现在网格控制台中：
- en: '![Adding an IE node](img/3506OS_06_10.jpg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![添加 IE 节点](img/3506OS_06_10.jpg)'
- en: 'Alternatively, a node can be added by creating a configuration file in JSON
    format and then using the following code:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以通过创建一个 JSON 格式的配置文件来添加一个节点，然后使用以下代码：
- en: '[PRE8]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can now pass the `selenium-node-win-ie10.cfg.json` configuration file through
    command-line arguments as follows:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以通过以下方式将 `selenium-node-win-ie10.cfg.json` 配置文件作为命令行参数传递：
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Adding a Firefox node
  id: totrans-74
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Firefox 节点
- en: 'To add a Firefox node, open a new command prompt or terminal window and navigate
    to the location where the Selenium server JAR is located. To launch and add a
    node to the Grid, type the following command:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个 Firefox 节点，打开一个新的命令提示符或终端窗口，导航到 Selenium 服务器 JAR 文件所在的目录。要启动并添加节点到网格，请输入以下命令：
- en: '[PRE10]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'In this example, we set `maxinstance` to `2`. This tells Grid that this node
    will support two instances of Firefox. Once the node has started, the following
    configuration will appear in Grid console:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将 `maxinstance` 设置为 `2`。这告诉网格该节点将支持两个 Firefox 实例。一旦节点启动，以下配置将出现在网格控制台中：
- en: '![Adding a Firefox node](img/3506OS_06_11.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![添加 Firefox 节点](img/3506OS_06_11.jpg)'
- en: Adding a Chrome node
  id: totrans-79
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加 Chrome 节点
- en: 'To add Chrome node, open a new command prompt or terminal window and navigate
    to the location where the Selenium server JAR is located. To launch and add the
    node to the Grid, type following command:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加Chrome节点，打开一个新的命令提示符或终端窗口，导航到Selenium服务器JAR文件所在的位置。要启动并将节点添加到网格中，请输入以下命令：
- en: '[PRE11]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Once the node has started, the following configuration will appear in the Grid
    console:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦节点启动，以下配置将在网格控制台中显示：
- en: '![Adding a Chrome node](img/3506OS_06_12.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Adding a Chrome node](img/3506OS_06_12.jpg)'
- en: Mac OS X with Safari
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Mac OS X with Safari
- en: 'We added IE, Firefox, and Chrome instances from a Windows machine, now let''s
    add a Safari node from a Mac OS. Open a new terminal window and navigate to the
    location where the Selenium server JAR is located. To launch and add the node
    to the Grid type the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一台Windows机器添加了IE、Firefox和Chrome实例，现在让我们从Mac OS添加一个Safari节点。打开一个新的终端窗口，导航到Selenium服务器JAR文件所在的位置。要启动并将节点添加到网格中，请输入以下命令：
- en: '[PRE12]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once the node has started, the following configuration will appear on the Grid
    console:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦节点启动，以下配置将在网格控制台中显示：
- en: '![Mac OS X with Safari](img/3506OS_06_13.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![Mac OS X with Safari](img/3506OS_06_13.jpg)'
- en: Now, we have our Selenium Grid set up, let's try running tests on this Grid.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经设置了Selenium网格，让我们尝试在这个网格上运行测试。
- en: Running tests in Grid
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在网格中运行测试
- en: 'Running tests in Grid and with different combinations of browsers and operating
    systems will need a few tweaks to the tests that we created earlier. We specified
    hardcoded browser and platform names in the desired capabilities. If we hardcode
    the values, then we will end up having a separate script for each combination.
    To avoid this and use a single test that will work on all the combinations, we
    need to parameterize the browser and platform values passed to the desired capabilities
    class as given in the following steps:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在网格中运行测试以及不同浏览器和操作系统的组合需要对我们之前创建的测试进行一些调整。我们在期望的能力中指定了硬编码的浏览器和平台名称。如果我们硬编码这些值，那么我们将为每种组合编写一个单独的脚本。为了避免这种情况并使用一个可以在所有组合上运行的单一测试，我们需要按照以下步骤参数化传递给期望能力类的浏览器和平台值：
- en: 'We will pass the browser and platform to the tests from the command line. For
    example, if we want to run test on the Windows and Chrome combination we will
    run the script through the command line in the following way:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将从命令行传递浏览器和平台到测试中。例如，如果我们想在Windows和Chrome的组合上运行测试，我们将通过以下方式在命令行中运行脚本：
- en: '[PRE13]'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'If we want to run tests on Safari on Mac, we can use following command:'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们想在Mac上的Safari上运行测试，我们可以使用以下命令：
- en: '[PRE14]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To implement this, we need to add two global attributes, `PLATFORM` and `BROWSER`,
    to the test class in the following way. We will set a default value in case values
    are not supplied from the command line:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要实现这一点，我们需要向测试类中添加两个全局属性，`PLATFORM` 和 `BROWSER`，如下所示。如果没有从命令行提供值，我们将设置一个默认值：
- en: '[PRE15]'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Next we need to parameterize the desired capabilities in the `setUp()` method
    as shown in the following code:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要在`setUp()`方法中参数化期望能力，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Finally, we need to read the arguments passed to the script and assign the
    values to the `PLATFORM` and `BROWSER` attributes in the following way:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们需要读取传递给脚本的参数，并按照以下方式将值分配给`PLATFORM`和`BROWSER`属性：
- en: '[PRE17]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'That''s it. Our test is now ready to handle any given combination. Here is
    the complete code with the previous changes:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就这样。我们的测试现在可以处理任何给定的组合。以下是包含之前更改的完整代码：
- en: '[PRE18]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'To run the test, open a new command prompt or terminal window and navigate
    to the location of the script. Type the following command and you will see that
    the Grid will connect the node matching with the given platform and browser and
    execute the test on that node:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行测试，打开一个新的命令提示符或终端窗口，导航到脚本的位置。输入以下命令，您将看到网格将连接与给定平台和浏览器匹配的节点，并在该节点上执行测试：
- en: '[PRE19]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Running tests in a cloud
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在云中运行测试
- en: We set up a local grid in the previous steps to run the tests for cross-browser
    testing. This requires setting up physical or virtual machines with different
    browsers and operating systems. There are costs and efforts needed to get the
    required hardware, software, and support to run the test lab. You also need to
    put in efforts to keep this infrastructure updated with the latest versions and
    patches, and so on. Not everybody can afford these costs and efforts.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的步骤中，我们设置了一个本地网格以运行跨浏览器测试。这需要设置具有不同浏览器和操作系统的物理或虚拟机。需要投入成本和努力来获取所需的硬件、软件和支持以运行测试实验室。您还需要投入努力以保持该基础设施更新到最新版本和补丁等。并非每个人都能承担这些成本和努力。
- en: Instead of investing and setting up a cross-browser test lab, you can easily
    outsource a virtual test lab to a third-party cloud provider. Sauce Labs and BrowserStack
    are leading cloud-based cross-browser testing cloud providers. Both of these have
    support for over 400 different browser and operating system configurations including
    mobile and tablet devices and support running Selenium WebDriver tests in their
    cloud.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 您无需投资和设置跨浏览器测试实验室，可以轻松地将虚拟测试实验室外包给第三方云服务提供商。Sauce Labs 和 BrowserStack 是领先的基于云的跨浏览器测试云服务提供商。这两者都支持超过
    400 种不同的浏览器和操作系统配置，包括移动和平板设备，并支持在他们的云中运行 Selenium WebDriver 测试。
- en: In this section, we will set up and run a test in Sauce Labs cloud. The steps
    are similar if you want to run tests with BrowserStack.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将设置并运行 Sauce Labs 云中的测试。如果您想使用 BrowserStack 运行测试，步骤类似。
- en: Using Sauce Labs
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Sauce Labs
- en: 'Let''s set up and run a test with Sauce Labs using the following steps:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤设置并使用 Sauce Labs 运行测试：
- en: You need a free Sauce Labs account to begin with. Register for a free account
    on Sauce Labs at [https://saucelabs.com/](https://saucelabs.com/) and get the
    username and access key. Sauce Labs provides all the required hardware and software
    infrastructure to run your tests in the cloud.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要先拥有一个免费的 Sauce Labs 账户。在 Sauce Labs 上注册一个免费账户：[https://saucelabs.com/](https://saucelabs.com/)，并获取用户名和访问密钥。Sauce
    Labs 提供所有必要的硬件和软件基础设施，以便在云中运行您的测试。
- en: You can get the access key from the Sauce Labs dashboard after login as shown:![Using
    Sauce Labs](img/3506OS_06_14.jpg)
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可以在登录 Sauce Labs 仪表板后从 Sauce Labs 获取访问密钥，如下面的截图所示：![使用 Sauce Labs](img/3506OS_06_14.jpg)
- en: Let's modify the test we created earlier to run with Grid and add steps to run
    this test on Sauce Labs cloud.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们修改之前创建的测试，使其与网格一起运行，并添加步骤以在 Sauce Labs 云上运行此测试。
- en: 'We need to add the Sauce username and access key to the test and change the
    Grid address to Sauce''s Grid address passing the username and access key as shown
    in the following code:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们需要将 Sauce 用户名和访问密钥添加到测试中，并将网格地址更改为 Sauce 的网格地址，传递用户名和访问密钥，如下面的代码所示：
- en: '[PRE20]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'To run the test, open a new command prompt or terminal window and navigate
    to the location of the script. Type following command:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行测试，打开一个新的命令提示符或终端窗口，导航到脚本的位置。输入以下命令：
- en: '[PRE21]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Tip
  id: totrans-119
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can get a list of Platforms supported on Sauce Labs at [https://saucelabs.com/platforms](https://saucelabs.com/platforms).
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以在 Sauce Labs 的网站上找到支持的平台列表：[https://saucelabs.com/platforms](https://saucelabs.com/platforms)。
- en: While running the test, it will connect to Sauce Lab's grid server and request
    for the desired operating system and browser configuration. Sauce assigns a virtual
    machine for our test to run on the given configuration.
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在运行测试时，它将连接到 Sauce Lab 的网格服务器，并请求所需的操作系统和浏览器配置。Sauce 为我们的测试分配一个虚拟机，以便在给定的配置上运行。
- en: We can monitor this run on Sauce dashboard as shown in the following screenshot:![Using
    Sauce Labs](img/3506OS_06_15.jpg)
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以在 Sauce 仪表板上监控这次运行，如下面的截图所示：![使用 Sauce Labs](img/3506OS_06_15.jpg)
- en: 'We can further drill down on the Sauce session and see exactly what happened
    during the run. It provides a lot of details including the Selenium commands,
    screenshots, Selenium logs, and video of the execution as shown in the following
    screenshot:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以进一步深入 Sauce 会话，查看运行期间的确切情况。它提供了大量的细节，包括 Selenium 命令、截图、Selenium 日志以及执行的视频，如下面的截图所示：
- en: '![Using Sauce Labs](img/3506OS_06_16.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![使用 Sauce Labs](img/3506OS_06_16.jpg)'
- en: Tip
  id: totrans-125
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can also test the application securely hosted on the internal servers by
    using the Sauce Connect utility that creates a secure tunnel between your machine
    and the Sauce cloud.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过使用 Sauce Connect 工具安全地测试托管在内部服务器上的应用程序，该工具在您的机器和 Sauce 云之间创建一个安全隧道。
- en: Summary
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned how to run tests on remote machines with the Selenium
    standalone server. The Selenium standalone server enables us to run tests on remote
    machines for testing our application against a combination of browsers and operating
    systems for cross-browser testing. This increases coverage for testing and making
    sure applications run on the desired combinations.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了如何使用 Selenium 独立服务器在远程机器上运行测试。Selenium 独立服务器使我们能够在远程机器上运行测试，以测试我们的应用程序针对浏览器和操作系统的组合进行跨浏览器测试。这增加了测试覆盖率，并确保应用程序在所需的组合上运行。
- en: We then looked at setting up Selenium Grid to run tests in a distributed architecture.
    Selenium Grid removes complexity in performing cross-browser testing by providing
    a transparent execution against multiple machines. It also brings down the time
    to run the tests.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们探讨了如何设置 Selenium Grid 以在分布式架构中运行测试。Selenium Grid 通过提供针对多台机器的透明执行来简化执行跨浏览器测试的复杂性。它还缩短了运行测试的时间。
- en: We also looked at using a cloud-based, cross-browser testing provider. We executed
    a test on Sauce Labs. This offers all the necessary test infrastructure to run
    the tests on hundreds of different combinations with minimal costs.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还考虑了使用基于云的、跨浏览器的测试服务提供商。我们在 Sauce Labs 上执行了测试。这提供了所有必要的测试基础设施，以最低的成本在数百种不同的组合上运行测试。
- en: In the next chapter, you will learn how to test mobile applications using Appium
    and Selenium WebDriver, using some of the concepts you learned in this chapter.
    Appium supports testing native, hybrid, and web mobile applications on iOS and
    Android. We will set up Appium and run tests against the mobile version of the
    sample application.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用 Appium 和 Selenium WebDriver 测试移动应用程序，这些概念在本章中已经学习过。Appium 支持在
    iOS 和 Android 上测试原生、混合和 Web 移动应用程序。我们将设置 Appium 并对示例应用程序的移动版本进行测试。
