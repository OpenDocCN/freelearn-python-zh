- en: Chapter 6. Cross-browser Testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Selenium supports cross-browser testing on multiple browser and operating system
    combinations. This is a very useful feature for testing web applications on various
    browser and operating system combinations to certify that the app is cross-browser
    compatible and to make sure that users do not experience problems with their choice
    of browsers or operating systems. Selenium WebDriver offers an ability to run
    tests on remote machines or distribute them against a number of operating systems
    and browsers running on remote machines or the cloud. So far, you have learned
    how to create and run tests on a local machine with various browser drivers installed
    as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Cross-browser Testing](img/3506OS_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'In this chapter, you will learn how to run these tests on a remote machine
    and then how to scale and run tests in a distributed architecture on multiple
    browser and operating system combinations for cross-browser testing. This saves
    a great amount of effort and time spent in cross-browser testing. We will cover
    the following aspects in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and using the Selenium standalone server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the `Remote` class to run tests on the Selenium standalone server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests on the Selenium standalone server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding nodes to the Selenium standalone server to create a grid for distributed
    execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests in the grid against multiple browser and operating system combinations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tests in a cloud with Sauce Labs and BrowserStack
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Selenium standalone server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Selenium standalone server is a component of Selenium that provides the
    ability to run tests on remote machines. We need to use the `RemoteWebDriver`
    class to connect to the Selenium standalone server to run tests on a remote machine.
    The `RemoteWebDriver` class listens to Selenium commands coming from test scripts
    using the `RemoteWebDriver` class on a designated port. Based on the configuration
    provided by the `RemoteWebDriver` class, the Selenium server will launch the specified
    browser and forward the commands to the browser. It supports almost all the browsers
    and mobile platforms with Appium. The following diagram shows the architecture
    of the Selenium server running tests on remote machines configured with different
    types of browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Selenium standalone server](img/3506OS_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Downloading the Selenium standalone server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Selenium standalone server is available in a bundled JAR format for download
    at [http://docs.seleniumhq.org/download/](http://docs.seleniumhq.org/download/)
    in the *Selenium Server (formerly the Selenium RC Server)* section. While writing
    this book, Selenium server Version 2.41.0 was available for download. You can
    simply copy the Selenium standalone server JAR file on a remote machine and start
    the server.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Selenium standalone server is a self-contained server written in Java. It
    requires a Java Runtime Environment (JRE) to be installed on the machine where
    it is run. Please make sure you have installed JRE 6 or onwards on the remote
    machine where you intend to run the Selenium standalone server.
  prefs: []
  type: TYPE_NORMAL
- en: Launching the Selenium standalone server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Selenium standalone server can be launched in various modes or roles. In
    this section, we will launch it in a standalone mode. We can launch the server
    with the following command on the remote machine''s command line from the directory
    where the server''s JAR file is kept. In this example, it is launched on a Windows
    8 machine by using the following command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'By default, Selenium server will start listening on port `4444` at `http://<remote-machine-ip>:4444`.
    It is possible to change the port through the command-line option while starting
    the server. When the server is launched, you will see the following output on
    the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the Selenium standalone server](img/3506OS_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Selenium server will be launched as an HTTP server on the remote machine
    and we can launch and see the server in a browser window. Launch the browser and
    navigate to `http://<remote-machine-ip>:4444/wd/hub/static/resource/hub.html`.
    This will display the following page in the browser window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching the Selenium standalone server](img/3506OS_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have the Selenium server up and running, it is time to create and
    run a test that we can run on the server.
  prefs: []
  type: TYPE_NORMAL
- en: Running a test on the Selenium standalone server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To run a test on Selenium server, we need to use `RemoteWebDriver`. The `Remote`
    class in the Selenium Python binding acts like a client and communicates with
    the Selenium server to run the tests on a remote machine. We need to use this
    class to instruct the Selenium server as to what configurations are needed to
    run a test on a remote machine and commands to run on selected browsers.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the `Remote` class, we need to set `desired_capabilities`, that
    is the browser, operating system, and any other configuration that we want to
    communicate to the Selenium standalone server to run the test. In this example,
    we will specify a platform and browser name as the desired capabilities required
    to run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we will create an instance of the `Remote` class and pass `desired_capabilities`.
    When the script is executed, it will connect to the Selenium server and request
    the server to set up a Firefox browser running on Windows to run the test:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s implement a search test that we created earlier and use the `Remote`
    class instead of the Firefox driver in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'When this test is executed, you can see the console of the Selenium server.
    It shows the interaction between the test and the server as shown in the following
    screenshot. It shows which command has been executed and its status:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a test on the Selenium standalone server](img/3506OS_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can also navigate to `http://<remote-machine-ip>:4444/wd/hub/static/resource/hub.html`,
    which displays a new session being created. If you hover over the capabilities
    link, it displays the capabilities being used to run the tests, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running a test on the Selenium standalone server](img/3506OS_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding support for Internet Explorer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Firefox support is bundled with the Selenium server; however, for running tests
    on **Internet Explorer** (**IE**), we need to specify the path of the IE driver
    executable while starting the Selenium server. This is done by specifying the
    executable path to the `wedriver.ie.driver` option in the command line as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: By providing the path of the IE driver, Selenium server will now launch and
    support IE for testing on the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: Adding support for Chrome
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to the IE driver executable, we need to mention the Chrome driver on
    the remote machine to support testing on Chrome. This is done by specifying the
    Chrome driver path in the `webdriver.chrome.driver` option as shown in following
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The Selenium server will now support running tests on both the Internet Explorer
    and Chrome on the remote machine.
  prefs: []
  type: TYPE_NORMAL
- en: Selenium Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium Grid lets us distribute our tests across multiple physical or virtual
    machines in order to run tests in a distributed fashion or run them in parallel.
    This helps in getting a faster and more accurate feedback by cutting down the
    time required for running tests and speeding up cross-browser testing. We can
    use our existing infrastructure of virtual machines in a cloud to set up the Grid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium Grid enables us to run multiple tests in parallel, on multiple nodes
    or clients, in a heterogeneous environment where we can have a mixture of browser
    and operating system support. It makes all these nodes appear as a single instance
    and transparently distributes tests on the underlying infrastructure as shown
    in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Selenium Grid](img/3506OS_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Launching Selenium server as a hub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to set up Selenium server as a hub to run the tests in a distributed
    fashion. The hub will provide all the available configurations or capabilities
    to tests.
  prefs: []
  type: TYPE_NORMAL
- en: The slave machines, also called as nodes, connect to the hub. Tests will use
    JSON wire protocol using the `Remote` class to communicate with the hub to execute
    the Selenium commands. You can find more about JSON wire protocol at [https://code.google.com/p/selenium/wiki/JsonWireProtocol](https://code.google.com/p/selenium/wiki/JsonWireProtocol).
  prefs: []
  type: TYPE_NORMAL
- en: The hub acts as the central point that will receive the commands from tests
    and distribute them to the appropriate node or to the node matching the capabilities
    required by the test. Let's set up a Selenium server as a Grid and then add nodes
    with different browser and operating system combinations.
  prefs: []
  type: TYPE_NORMAL
- en: We can start the Selenium standalone server as a hub (also known as a Grid server)
    with additional arguments to the command that we used to start the server in earlier
    sections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new command/terminal window and navigate to the location where the
    Selenium server JAR is located. Start the server as a hub by typing the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We need to use the `–role` argument with the value `hub` to start the server
    as hub or Grid server.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, the server is started on a Windows machine. It starts with
    the following information printed on the console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Selenium server as a hub](img/3506OS_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When we start the Selenium server as hub, it starts as a Grid server. We can
    see the Grid console in the browser as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Launching Selenium server as a hub](img/3506OS_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have our Selenium server started as a Grid server, let's add a few
    node configurations to the server.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an IE node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s begin with a node that provides Internet Explorer capabilities running
    on Windows. Open a new command prompt or a terminal window and navigate to the
    location where the Selenium server JAR is located. To launch a node and add it
    to the Grid, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To add the node to the Grid, we need to use the `–role` argument and pass `webdriver`
    as a value. We also need to pass the browser configuration for the node. This
    is passed through the `–browser` argument. In this example, we passed `browserName`
    as `internet explorer`, `version` as `10`, `maxinstance` as `1`, and `platform`
    as `WINDOWS`. The `maxinstance` value tells the Grid how many concurrent instances
    of the browser will be supported by the node.
  prefs: []
  type: TYPE_NORMAL
- en: To connect the node to the hub or Grid server, we need to specify the `–hubHost`
    argument with the hostname or IP address of the Grid server. Lastly, we need to
    specify the port on which the node will be running.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we run the preceding command and the node is launched, the following configuration
    will appear on the Grid console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding an IE node](img/3506OS_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, a node can be added by creating a configuration file in JSON
    format and then using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now pass the `selenium-node-win-ie10.cfg.json` configuration file through
    command-line arguments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Adding a Firefox node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add a Firefox node, open a new command prompt or terminal window and navigate
    to the location where the Selenium server JAR is located. To launch and add a
    node to the Grid, type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, we set `maxinstance` to `2`. This tells Grid that this node
    will support two instances of Firefox. Once the node has started, the following
    configuration will appear in Grid console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Firefox node](img/3506OS_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Adding a Chrome node
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To add Chrome node, open a new command prompt or terminal window and navigate
    to the location where the Selenium server JAR is located. To launch and add the
    node to the Grid, type following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the node has started, the following configuration will appear in the Grid
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a Chrome node](img/3506OS_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Mac OS X with Safari
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We added IE, Firefox, and Chrome instances from a Windows machine, now let''s
    add a Safari node from a Mac OS. Open a new terminal window and navigate to the
    location where the Selenium server JAR is located. To launch and add the node
    to the Grid type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the node has started, the following configuration will appear on the Grid
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Mac OS X with Safari](img/3506OS_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, we have our Selenium Grid set up, let's try running tests on this Grid.
  prefs: []
  type: TYPE_NORMAL
- en: Running tests in Grid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Running tests in Grid and with different combinations of browsers and operating
    systems will need a few tweaks to the tests that we created earlier. We specified
    hardcoded browser and platform names in the desired capabilities. If we hardcode
    the values, then we will end up having a separate script for each combination.
    To avoid this and use a single test that will work on all the combinations, we
    need to parameterize the browser and platform values passed to the desired capabilities
    class as given in the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will pass the browser and platform to the tests from the command line. For
    example, if we want to run test on the Windows and Chrome combination we will
    run the script through the command line in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we want to run tests on Safari on Mac, we can use following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To implement this, we need to add two global attributes, `PLATFORM` and `BROWSER`,
    to the test class in the following way. We will set a default value in case values
    are not supplied from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next we need to parameterize the desired capabilities in the `setUp()` method
    as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to read the arguments passed to the script and assign the
    values to the `PLATFORM` and `BROWSER` attributes in the following way:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'That''s it. Our test is now ready to handle any given combination. Here is
    the complete code with the previous changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run the test, open a new command prompt or terminal window and navigate
    to the location of the script. Type the following command and you will see that
    the Grid will connect the node matching with the given platform and browser and
    execute the test on that node:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Running tests in a cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We set up a local grid in the previous steps to run the tests for cross-browser
    testing. This requires setting up physical or virtual machines with different
    browsers and operating systems. There are costs and efforts needed to get the
    required hardware, software, and support to run the test lab. You also need to
    put in efforts to keep this infrastructure updated with the latest versions and
    patches, and so on. Not everybody can afford these costs and efforts.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of investing and setting up a cross-browser test lab, you can easily
    outsource a virtual test lab to a third-party cloud provider. Sauce Labs and BrowserStack
    are leading cloud-based cross-browser testing cloud providers. Both of these have
    support for over 400 different browser and operating system configurations including
    mobile and tablet devices and support running Selenium WebDriver tests in their
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will set up and run a test in Sauce Labs cloud. The steps
    are similar if you want to run tests with BrowserStack.
  prefs: []
  type: TYPE_NORMAL
- en: Using Sauce Labs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s set up and run a test with Sauce Labs using the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: You need a free Sauce Labs account to begin with. Register for a free account
    on Sauce Labs at [https://saucelabs.com/](https://saucelabs.com/) and get the
    username and access key. Sauce Labs provides all the required hardware and software
    infrastructure to run your tests in the cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can get the access key from the Sauce Labs dashboard after login as shown:![Using
    Sauce Labs](img/3506OS_06_14.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's modify the test we created earlier to run with Grid and add steps to run
    this test on Sauce Labs cloud.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We need to add the Sauce username and access key to the test and change the
    Grid address to Sauce''s Grid address passing the username and access key as shown
    in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run the test, open a new command prompt or terminal window and navigate
    to the location of the script. Type following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can get a list of Platforms supported on Sauce Labs at [https://saucelabs.com/platforms](https://saucelabs.com/platforms).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While running the test, it will connect to Sauce Lab's grid server and request
    for the desired operating system and browser configuration. Sauce assigns a virtual
    machine for our test to run on the given configuration.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We can monitor this run on Sauce dashboard as shown in the following screenshot:![Using
    Sauce Labs](img/3506OS_06_15.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We can further drill down on the Sauce session and see exactly what happened
    during the run. It provides a lot of details including the Selenium commands,
    screenshots, Selenium logs, and video of the execution as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using Sauce Labs](img/3506OS_06_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can also test the application securely hosted on the internal servers by
    using the Sauce Connect utility that creates a secure tunnel between your machine
    and the Sauce cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to run tests on remote machines with the Selenium
    standalone server. The Selenium standalone server enables us to run tests on remote
    machines for testing our application against a combination of browsers and operating
    systems for cross-browser testing. This increases coverage for testing and making
    sure applications run on the desired combinations.
  prefs: []
  type: TYPE_NORMAL
- en: We then looked at setting up Selenium Grid to run tests in a distributed architecture.
    Selenium Grid removes complexity in performing cross-browser testing by providing
    a transparent execution against multiple machines. It also brings down the time
    to run the tests.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at using a cloud-based, cross-browser testing provider. We executed
    a test on Sauce Labs. This offers all the necessary test infrastructure to run
    the tests on hundreds of different combinations with minimal costs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to test mobile applications using Appium
    and Selenium WebDriver, using some of the concepts you learned in this chapter.
    Appium supports testing native, hybrid, and web mobile applications on iOS and
    Android. We will set up Appium and run tests against the mobile version of the
    sample application.
  prefs: []
  type: TYPE_NORMAL
