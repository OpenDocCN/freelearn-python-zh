- en: Chapter 5. Adding Ajax Effects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Using `jquery.multiselect.js`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a `select_or_add` widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using an autocompletion plugin
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a drop-down date selector
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving the built-in `ajax` function
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a slider to represent a number
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using jqGrid and web2py
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving data tables with WebGrid
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ajaxing your search functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating sparklines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we discuss examples of integration of jQuery plugins with web2py.
    These plugins help in making forms and tables more interactive and friendly to
    the user, thus improving the usability of your application. In particular, we
    provide examples of how to improve the multi-select drop-down with an interactive
    **add option** button, how to replace an input field with a slider, and how to
    display tabular data using `jqGrid` and `WebGrid`.
  prefs: []
  type: TYPE_NORMAL
- en: Using jquery.multiselect.js
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The default rendering of`<select multiple="true">..</select>` is quite ugly
    and not intuitive to use, in particular, when you need to select multiple non-contiguous
    options. This is not an HTML shortcoming, but a poor design of most browsers.
    Anyway, the presentation of the multiple `select` can be overwritten using JavaScript.
    Here, we will be using a jQuery plugin called `jquery.multiselect.js`. Notice
    that this jQuery plugin comes as standard and enabled with PluginWiki, but we
    assume that you are not using PluginWiki.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to download `jquery.muliselect.js` from [http://abeautifulsite.net/2008/04/jquery-multiselect](http://abeautifulsite.net/2008/04/jquery-multiselect),
    and place the corresponding files into `static/js/jquery.multiselect.js` and `static/css/jquery.multiselect.css`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your view, simply add the following before `{{extend 'layout.html}}:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Place the following after `{{extend 'layout.html'}}:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That is all. All your multiple `select` will be nicely styled.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Consider the following action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This action can be tried with the following view:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is a screenshot of how it looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_05_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a select_or_add widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This widget will create a object with an **Add** button next to it, allowing
    users to add new categories and so on, on the fly without having to visit a different
    screen. It works with `IS_IN_DB`, and uses web2py components and jQueryUI dialogs.
  prefs: []
  type: TYPE_NORMAL
- en: 'This widget was inspired by the `OPTION_WITH_ADD_LINK` slice, which can be
    found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://web2pyslices.com/main/slices/take_slice/11](http://web2pyslices.com/main/slices/take_slice/11)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Place the following code into a model file. For example, `models/select_or_add_widget.py:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You assign the widget to a field using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The widget accepts the following arguments:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`form_title: string:` This will appear as the jQueryUI dialog-box''s title.
    The default value is `Add New`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`controller: string:` This is the name of the controller that will handle record
    creation.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function: string`. This is the name of the function that will handle record
    creation. It should create a form, accept it, and be prepared to issue JavaScript
    to interact with the widget - see `add_category` in *step 4.)*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`button_text: string`. This is the text that should appear on the button that
    will activate our form dialog-box. The default value is `Add`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dialog_width: integer`. This is the desired width in pixels of the dialog-box.
    Default is `450`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Define your database tables in `models/db.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create your controller functions:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is a screenshot showing the widget in action:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_05_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the **Add New** button, and the dialog-box opens. (Hmm, can't type
    my own widget's name right!).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_05_31.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on **Submit**, and the new option is created and automatically selected
    in the main form.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_05_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can get the source or a sample application from bitbucket, at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://bitbucket.org/bmeredyk/web2py-select_or_add_option-widget/src](http://https://bitbucket.org/bmeredyk/web2py-select_or_add_option-widget/src)'
  prefs: []
  type: TYPE_NORMAL
- en: Using an autocompletion plugin
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although web2py comes with its own autocomplete plugin, its behavior is a kind
    of magic and, if it does not suit you, you may prefer to use a jQuery plugin for
    autocompletion.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Download the necessary files from the following website:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://bassistance.de/jquery-plugins/jquery-plugin-autocomplete/](http://bassistance.de/jquery-plugins/jquery-plugin-autocomplete/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unzip the files into `static/autocomplete`. Make sure you have the following
    files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`static/autocomplete/jquery.autocomplete.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`static/autocomplete/jquery.autocomplete.css`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, define the following widget in your model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This widget creates a normal `<input/>` widget inp followed by a script that
    registers the autocomplete plugin. It also passes to the plugin, a list of possible
    values, obtained by existing values of the field itself.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, in your model or controller, you simply assign this widget to any string
    field. For example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want the widget to get values from a different table/field, you just
    need to change the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change them to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There is more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'A limitation with this approach is that all possible values will be fetched
    when the widget is rendered and embedded in the page. This approach has two limitations:'
  prefs: []
  type: TYPE_NORMAL
- en: Serving the page gets slower and slower, as more options exist for the autocompletion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It exposes your entire data to the visitor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There is a solution. The plugin can fetch the data using an Ajax callback.
    To fetch the items remotely using an Ajax call, we can modify the widget as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now you need to implement your own `callback_url`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There is more...](img/5467OS_05_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating a drop-down date selector
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you might not like the normal pop-up calendar selector, and want
    to create a widget that allows selecting the year, month, and day of the month
    separately, using dropdown lists. Here we present a widget to do it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In one of your models, write the following widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a test form in your controller, and set the field to use the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how it looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_05_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Improving the built-in ajax function
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web2py comes with a `static/js/web2py_ajax.js` file, which defines an ajax function.
    It is a wrapper around `jQuery.ajax`, but provides an even simpler syntax. Yet,
    this function is designed to be intentionally minimalist. In this recipe, we show
    you how to rewrite it, so that it displays a spinning image while performing the
    Ajax request in the background.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you need a spinning icon. Choose one for example from this web
    site: [http://www.freeiconsdownload.com/Free_Downloads.asp?id=585](http://www.freeiconsdownload.com/Free_Downloads.asp?id=585),
    and save it in `static/images/loading.gif`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, edit the ajax function in the file `static/js/web2py_ajax.js`, as follows
    (for older web2py applications, this function is in `views/web2py_ajax.html):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Using a slider to represent a number
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: jQuery UI comes with a handy slider that can be used to represent numerical
    fields in a range as opposed to a boring`<input/>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a model file called `models/plugin_slider.py`, and define the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a test table, and set the widget to our new slider widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, use the slider by creating a form in your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/5467OS_05_35.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Using jqGrid and web2py
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**jqGrid** is an Ajax-enabled JavaScript control built on jQuery that provides
    a solution for representing and manipulating tabular data. You can think of it
    as a replacement for the web2py `SQLTABLE` helper. jqGrid is a client-side solution,
    and it loads data dynamically through Ajax callbacks, thus providing pagination,
    search popup, inline editing, and so on. jqGrid is integrated into PluginWiki,
    but, here, we discuss it as a standalone for web2py programs that do not use the
    plugin. jqGrid deserves a book of its own, and here we only discuss its basic
    features and simplest integration.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will need jQuery (that comes with web2py), jQuery.UI, and one or more themes
    which you can get directly from Google but you will also need jqGrid, which you
    can get from:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.trirand.com/blog](http://www.trirand.com/blog)'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also assume we have a table with stuff that you can pre-populate with
    random data:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, you need a helper that will display the jqGrid, and we can define
    this in a model. For example, `models/plugin_qgrid.py:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We can use this in our control as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This function simply generates all the required JavaScript, but does not pass
    any data to it. Instead, it passes a callback function URL (`jqgrid`), which is
    digitally signed for security. We need to implement this callback.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can define the callback in the same controller of the index action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: Both the `JQGRID` helper and the `jqgrid` action are canned, very similar to
    the PluginWiki `jgGrid` widget, and probably require no modification. The `jqgrid`
    action is called by the code generated by the helper. It checks whether the URL
    is properly signed (the user is authorized to access the callback) or not, parses
    all data in the request to determine what the user wants, including building a
    query from the `jqgrid` search pop-up, and performs the `select` and `return`
    on the data through JSON.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that you can use multiple `JQGRID(table)` in multiple actions, and you
    do not need to pass any other parameter other than the table to be displayed.
    Yet, you may want to pass extra parameters to the helper:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fieldname` and `fieldvalue` attributes are user to pre-filter results, based
    on `table[fieldname]==fieldvalue`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col_widths` is a list of column widths in pixels'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`colnames` is a list of column names to replace `field.name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`_id` is the tag ID for the grid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields` is a list of field names to be displayed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`col_width=80` is the default width of each column'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`width=700` and `height=300` are the size of the grid'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dbname=''db''` is the name of the database to be utilized by the callback,
    in case you have more than one, or you use a name that is not `db`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving data tables with WebGrid
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe we will build a module called WebGrid that you can think of
    a replacement or web2py''s SQLTABLE. Yet is is smarter: it supports paging, sorting,
    editing and it is easy to use and customize. It is intentionally designed not
    to require session nor jQuery plugins.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Download `webgrid.py` from [http://web2pyslices.com/main/static/share/webgrid.py](http://web2pyslices.com/main/static/share/webgrid.py),
    and store it in the `modules/` folder.
  prefs: []
  type: TYPE_NORMAL
- en: You may want to download a demo application from[http://web2pyslices.com/main/static/share/web2py.app.webgrid.w2p](http://web2pyslices.com/main/static/share/web2py.app.webgrid.w2p),
    but this is not necessary for WebGrid to work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will assume the scaffolding application with `crud` defined, and the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: We have in mind a simple inventory system.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will explain it backwards for a change. First, we will show you how to use
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `webgrid.py` module to your `modules` folder (see the *Getting ready*
    section for the instructions on how to install it). In your controller, add the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The datasource can be a `Set, Rows, Table`, or `list of Tables. Joins` are also
    supported.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The main row components of the WebGrid are `header, filter, datarow, pager,
    page_total,` and `footer`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You can link to `crud` functions using `action_links`. Just tell it where `crud`
    is exposed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can turn `rows` on and off:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can control the `fields` and `field_headers:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can control the `action_links` (links to `crud` actions) and `action_headers:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will want to modify `crud.settings.[action]_next`, so that it redirects
    to your WebGrid page after completing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can get page `totals` for numeric fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can set `filters` on columns:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can modify the `query` that `filters` use (not available if your datasource
    is a `Rows` object; use `rows.find):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can control which request `vars` are allowed to override the `grid` settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The WebGrid will use a field's represent function, if present, when rendering
    the cell. If you need more control, you can completely override the way a row
    is rendered.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The functions that render each row can be replaced with your own `lambda` or
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here are some useful variables for building your own rows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'For example, let''s customize the footer:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also customize messages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also also use the `row_created` event to modify the row when it is
    created. Let''s add a column to the header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let''s move the action links to the right-hand side:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![How to do it...](img/5467OS_05_36.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you are using multiple grids on the same page, they must have unique names.
  prefs: []
  type: TYPE_NORMAL
- en: Ajaxing your search functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this recipe, we describe the code demonstrated in this video:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.youtube.com/watch?v=jGuW43sdv6E](http://www.youtube.com/watch?v=jGuW43sdv6E)'
  prefs: []
  type: TYPE_NORMAL
- en: It is very similar to autocompletion. It lets you type code in an input field,
    sends the text to the server through Ajax, and displays the results returned by
    the server. It can be used, for example, to perform live search. It differs from
    autocompletion, because the text is not necessarily picked from one table (it
    can originate from a more complex search condition implemented server-side), and
    the results are not used to populate an input field.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to start with a model and, for this example, we picked this one:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We populate this model with the following data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the following css file `static/css/livesearch.css:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create the following JavaScript file `static/js/livesearch.js:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now create a simple controller action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The simple controller action is associated to the following `views/default/index.html`,
    which uses the livesearch JS and CSS created in *steps 3* and *4:*
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in the same controller as the `index` function, implement the Ajax
    callback:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how it looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_05_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating sparklines
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`Sparklines` are small graphs, typically embedded in text, that summarize a
    time series or similar information. The `jquery.sparklines` plugin provides several
    different chart styles and a useful variety of display options. You can combine
    the sparklines plugin with the `jquery.timers` plugin to display data that''s
    changing in real time. This recipe shows one way to accomplish that.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sparkline charts are really useful in applications where you need to visually
    compare lots of similar data series. Here''s a link to a chapter in *Edward Tufte''s,
    Beautiful Evidence* with more info:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR](http://www.edwardtufte.com/bboard/q-and-a-fetch-msg?msg_id=0001OR)'
  prefs: []
  type: TYPE_NORMAL
- en: We will create an index that shows five to 25 bar charts displaying random numbers,
    reversely sorted to emulate Pareto charts. The charts update once-per-second with
    new data from the server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s what the display will look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating sparklines](img/5467OS_05_38.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This example assumes that you can use a single JSON query to get the data for
    all the sparklines at once, and that you know at the time the view is rendered
    how many graphs are to be displayed. The trick is choosing a suitable scheme for
    generating graph IDs, in this case `["dynbar0", "dynbar1",....]`, and using the
    same ID strings as keys for the dictionary, returned from the JSON service function.
    This makes it simple to use the web2py view templating methods, to generate `jquery.sparkline()`
    calls that update the sparklines with data returned from the service function.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First of all, you need to download the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[http://plugins.jquery.com/project/sparklines, into "static/js/jquery.sparkline.js"](http://plugins.jquery.com/project/sparklines)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: And the timer, [http://plugins.jquery.com/project/timers](http://plugins.jquery.com/project/timers),
    into `static/js/jquery.timers-1.2.js`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Then, in your `layout.html`, before including `web2py_ajax.html`, add the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following actions to your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, create `views/default/index.html`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
