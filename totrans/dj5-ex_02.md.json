["```py\nfrom django.conf import settings\nfrom django.db import models\n**from** **django.urls** **import** **reverse**\nfrom django.utils import timezone\nclass PublishedManager(models.Manager):\n    def get_queryset(self):\n        return (\n            super().get_queryset().filter(status=Post.Status.PUBLISHED)\n        )\nclass Post(models.Model):\n    # ...\nclass Meta:\n        ordering = ['-publish']\n        indexes = [\n            models.Index(fields=['-publish']),\n        ]\n    def __str__(self):\n        return self.title\n**def****get_absolute_url****(****self****):**\n**return** **reverse(**\n**'blog:post_detail'****,**\n **args=[self.****id****]**\n **)** \n```", "```py\n<a href=\"{% url 'blog:post_detail' post.id %}\"> \n```", "```py\n<a href=\"{**{ post.get_absolute_url }**}\"> \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n{% endblock %} \n```", "```py\npython manage.py runserver \n```", "```py\nclass Post(models.Model):\n    # ...\n    slug = models.SlugField(\n        max_length=250,\n **unique_for_date=****'publish'**\n    )\n    # ... \n```", "```py\npython manage.py makemigrations blog \n```", "```py\nMigrations for 'blog':\n    blog/migrations/0002_alter_post_slug.py\n    - Alter field slug on post \n```", "```py\npython manage.py migrate \n```", "```py\nApplying blog.0002_alter_post_slug... OK \n```", "```py\npath('<int:id>/', views.post_detail, name='post_detail'), \n```", "```py\npath(\n    '**<int:year>/<int:month>/<int:day>/<slug:post>/**',\n    views.post_detail,\n    name='post_detail'\n), \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'blog'\nurlpatterns = [\n    # Post views\n    path('', views.post_list, name='post_list'),\n    path(\n        '**<int:year>/<int:month>/<int:day>/<slug:post>/**',\n         views.post_detail,\n         name='post_detail'\n    ),\n] \n```", "```py\ndef post_detail(request, **year, month, day, post**):\n    post = get_object_or_404(\n        Post,\n        status=Post.Status.PUBLISHED**,**\n **slug=post,**\n **publish__year=year,**\n **publish__month=month,**\n **publish__day=day)**\nreturn render(\n        request,\n        'blog/post/detail.html',\n        {'post': post}\n    ) \n```", "```py\nclass Post(models.Model):\n    # ...\ndef get_absolute_url(self):\n        return reverse(\n            'blog:post_detail',\n            args=[\n                **self.publish.year,**\n **self.publish.month,**\n **self.publish.day,**\n **self.slug**\n            ]\n        ) \n```", "```py\npython manage.py runserver \n```", "```py\n**from** **django.core.paginator** **import** **Paginator**\nfrom django.shortcuts import get_object_or_404, render\nfrom .models import Post\ndef post_list(request):\n    **post_list** = Post.published.all()\n**# Pagination with 3 posts per page**\n **paginator = Paginator(post_list,** **3****)**\n **page_number = request.GET.get(****'page'****,** **1****)**\n **posts = paginator.page(page_number)**\nreturn render(\n        request,\n        'blog/post/list.html',\n        {'posts': posts}\n    ) \n```", "```py\n<div class=\"pagination\">\n<span class=\"step-links\">\n    {% if page.has_previous %}\n      <a href=\"?page={{ page.previous_page_number }}\">Previous</a>\n    {% endif %}\n    <span class=\"current\">\n      Page {{ page.number }} of {{ page.paginator.num_pages }}.\n    </span>\n    {% if page.has_next %}\n      <a href=\"?page={{ page.next_page_number }}\">Next</a>\n    {% endif %}\n  </span>\n</div> \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n  **{% include \"pagination.html\" with page=posts %}**\n{% endblock %} \n```", "```py\npython manage.py runserver \n```", "```py\nfrom django.core.paginator import **EmptyPage,** Paginator\nfrom django.shortcuts import get_object_or_404, render\nfrom .models import Post\ndef post_list(request):\n    post_list = Post.published.all()\n    # Pagination with 3 posts per page\n    paginator = Paginator(post_list, 3)\n    page_number = request.GET.get('page', 1)\n    **try****:**\n        posts = paginator.page(page_number)\n    **except** **EmptyPage:**\n**# If page_number is out of range get last page of results**\n **posts = paginator.page(paginator.num_pages)**\nreturn render(\n        request,\n        'blog/post/list.html',\n        {'posts': posts}\n    ) \n```", "```py\nfrom django.shortcuts import get_object_or_404, render\nfrom .models import Post\nfrom django.core.paginator import EmptyPage**, PageNotAnInteger**, Paginator\ndef post_list(request):\n    post_list = Post.published.all()\n    # Pagination with 3 posts per page\n    paginator = Paginator(post_list, 3)\n    page_number = request.GET.get('page')\n    try:\n        posts = paginator.page(page_number)\n    **except** **PageNotAnInteger:**\n**# If page_number is not an integer get the first page**\n **posts = paginator.page(****1****)**\nexcept EmptyPage:\n        # If page_number is out of range get last page of results\n        posts = paginator.page(paginator.num_pages)\n    return render(\n        request,\n        'blog/post/list.html',\n        {'posts': posts}\n    ) \n```", "```py\nfrom django.views.generic import ListView\nclass PostListView(ListView):\n    \"\"\"\n    Alternative post list view\n    \"\"\"\n    queryset = Post.published.all()\n    context_object_name = 'posts'\n    paginate_by = 3\n    template_name = 'blog/post/list.html' \n```", "```py\nurlpatterns = [\n    # Post views\n**#** path('', views.post_list, name='post_list'),\n**path(****''****, views.PostListView.as_view(), name=****'post_list'****),**\n    path(\n        '<int:year>/<int:month>/<int:day>/<slug:post>/',\n        views.post_detail,\n        name='post_detail'\n    ),\n] \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n  **{% include \"pagination.html\" with page=page_obj %}**\n{% endblock %} \n```", "```py\nfrom django import forms\nclass EmailPostForm(forms.Form):\n    name = forms.CharField(max_length=25)\n    email = forms.EmailField()\n    to = forms.EmailField()\n    comments = forms.CharField(\n        required=False,\n        widget=forms.Textarea\n    ) \n```", "```py\nfrom .forms import EmailPostForm\ndef post_share(request, post_id):\n    # Retrieve post by id\n    post = get_object_or_404(\n        Post,\n        id=post_id,\n        status=Post.Status.PUBLISHED\n    )\n    if request.method == 'POST':\n        # Form was submitted\n        form = EmailPostForm(request.POST)\n        if form.is_valid():\n            # Form fields passed validation\n            cd = form.cleaned_data\n            # ... send email\nelse:\n        form = EmailPostForm()\n    return render(\n request,\n        'blog/post/share.html',\n        {\n            'post': post,\n            'form': form\n        }\n    ) \n```", "```py\n    form = EmailPostForm() \n    ```", "```py\n    if request.method == 'POST':\n        # Form was submitted\n        form = EmailPostForm(request.POST) \n    ```", "```py\npython -m pip install python-decouple==3.8 \n```", "```py\nEMAIL_HOST_USER=your_account@gmail.com\nEMAIL_HOST_PASSWORD=\nDEFAULT_FROM_EMAIL=My Blog <your_account@gmail.com> \n```", "```py\n**from** **decouple** **import** **config**\n# ...\n**# Email server configuration**\n**EMAIL_HOST =** **'smtp.gmail.com'**\n**EMAIL_HOST_USER = config(****'EMAIL_HOST_USER'****)**\n**EMAIL_HOST_PASSWORD = config(****'EMAIL_HOST_PASSWORD'****)**\n**EMAIL_PORT =** **587**\n**EMAIL_USE_TLS =** **True**\n**DEFAULT_FROM_EMAIL = config(****'DEFAULT_FROM_EMAIL'****)** \n```", "```py\nEMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' \n```", "```py\nEMAIL_HOST_USER=your_account@gmail.com\nEMAIL_HOST_PASSWORD=**xxxxxxxxxxxxxxxx**\nDEFAULT_FROM_EMAIL=My Blog <your_account@gmail.com> \n```", "```py\npython manage.py shell \n```", "```py\n>>> from django.core.mail import send_mail\n>>> send_mail('Django mail',\n... 'This e-mail was sent with Django.',\n... 'your_account@gmail.com',\n...           ['your_account@gmail.com'],\n...           fail_silently=False) \n```", "```py\n/Applications/Python\\ 3.12/Install\\ Certificates.command \n```", "```py\n# ...\n**from** **django.core.mail** **import** **send_mail**\n# ...\ndef post_share(request, post_id):\n    # Retrieve post by id\n    post = get_object_or_404(\n        Post,\n        id=post_id,\n        status=Post.Status.PUBLISHED\n    )\n    **sent =** **False**\nif request.method == 'POST':\n        # Form was submitted\n        form = EmailPostForm(request.POST)\n        if form.is_valid():\n            # Form fields passed validation\n            cd = form.cleaned_data\n            **post_url = request.build_absolute_uri(**\n **post.get_absolute_url()**\n **)**\n **subject = (**\n**f\"****{cd[****'name'****]}** **(****{cd[****'email'****]}****) \"**\n**f\"recommends you read** **{post.title}****\"**\n **)**\n **message = (**\n**f\"Read** **{post.title}** **at** **{post_url}****\\n\\n\"**\n**f\"****{cd[****'name'****]}****\\'s comments:** **{cd[****'comments'****]}****\"**\n **)**\n **send_mail(**\n **subject=subject,**\n **message=message,**\n **from_email=****None****,**\n **recipient_list=[cd[****'to'****]]**\n **)**\n **sent =** **True**\nelse:\n        form = EmailPostForm()\n    return render(\n        request,\n        'blog/post/share.html',\n        {\n            'post': post,\n            'form': form**,**\n**'sent'****: sent**\n        }\n    ) \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'blog'\nurlpatterns = [\n    # Post views\n# path('', views.post_list, name='post_list'),\n    path('', views.PostListView.as_view(), name='post_list'),\n    path(\n        '<int:year>/<int:month>/<int:day>/<slug:post>/',\n        views.post_detail,\n        name='post_detail'),\n    **path(****'<int:post_id>/share/'****, views.post_share, name=****'post_share'****),**\n] \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}Share a post{% endblock %}\n{% block content %}\n  {% if sent %}\n    <h1>E-mail successfully sent</h1>\n<p>\n      \"{{ post.title }}\" was successfully sent to {{ form.cleaned_data.to }}.\n    </p>\n  {% else %}\n    <h1>Share \"{{ post.title }}\" by e-mail</h1>\n<form method=\"post\">\n      {{ form.as_p }}\n      {% csrf_token %}\n      <input type=\"submit\" value=\"Send e-mail\">\n</form>\n  {% endif %}\n{% endblock %} \n```", "```py\n<form method=\"post\"> \n```", "```py\n<input type='hidden' name='csrfmiddlewaretoken' value='26JjKo2lcEtYkGoV9z4XmJIEHLXN5LDR' /> \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body|linebreaks }}\n  **<****p****>**\n**<****a****href****=****\"{% url \"blog:post_share\" post.id %}\"****>**\n**Share this post**\n**</****a****>**\n**</****p****>**\n{% endblock %} \n```", "```py\npython manage.py runserver \n```", "```py\nclass Comment(models.Model):\n    post = models.ForeignKey(\n        Post,\n        on_delete=models.CASCADE,\n        related_name='comments'\n )\n    name = models.CharField(max_length=80)\n    email = models.EmailField()\n    body = models.TextField()\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    active = models.BooleanField(default=True)\n    class Meta:\n        ordering = ['created']\n        indexes = [\n            models.Index(fields=['created']),\n        ]\n    def __str__(self):\n        return f'Comment by {self.name} on {self.post}' \n```", "```py\npython manage.py makemigrations blog \n```", "```py\nMigrations for 'blog':\n  blog/migrations/0003_comment.py\n    - Create model Comment \n```", "```py\npython manage.py migrate \n```", "```py\nApplying blog.0003_comment... OK \n```", "```py\nfrom .models import **Comment,** Post\n**@admin.register(****Comment****)**\n**class****CommentAdmin****(admin.ModelAdmin):**\n **list_display = [****'name'****,** **'email'****,** **'post'****,** **'created'****,** **'active'****]**\n **list_filter = [****'active'****,** **'created'****,** **'updated'****]**\n **search_fields = [****'name'****,** **'email'****,** **'body'****]** \n```", "```py\npython manage.py runserver \n```", "```py\nfrom .models import Comment\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['name', 'email', 'body'] \n```", "```py\nfrom django.core.mail import send_mail\nfrom django.core.paginator import EmptyPage, PageNotAnInteger, Paginator\nfrom django.shortcuts import get_object_or_404, render\n**from** **django.views.decorators.http** **import** **require_POST**\nfrom django.views.generic import ListView\nfrom .forms import **CommentForm,** EmailPostForm\nfrom .models import Post\n# ...\n**@require_POST**\n**def****post_comment****(****request, post_id****):**\n **post = get_object_or_404(**\n **Post,**\n**id****=post_id,**\n **status=Post.Status.PUBLISHED**\n **)**\n **comment =** **None**\n**# A comment was posted**\n **form = CommentForm(data=request.POST)**\n**if** **form.is_valid():**\n**# Create a Comment object without saving it to the database**\n **comment = form.save(commit=****False****)**\n**# Assign the post to the comment**\n **comment.post = post**\n**# Save the comment to the database**\n **comment.save()**\n**return** **render(**\n **request,**\n**'blog/post/comment.html'****,**\n **{**\n**'post'****: post,**\n**'form'****: form,**\n**'comment'****: comment**\n **}**\n **)** \n```", "```py\n    comment = form.save(commit=False) \n    ```", "```py\n    comment.post = post \n    ```", "```py\n    comment.save() \n    ```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'blog'\nurlpatterns = [\n    # Post views\n# path('', views.post_list, name='post_list'),\n    path('', views.PostListView.as_view(), name='post_list'),\n    path(\n        '<int:year>/<int:month>/<int:day>/<slug:post>/',\n        views.post_detail,\n        name='post_detail'\n ),\n    path('<int:post_id>/share/', views.post_share, name='post_share'),\n    **path(**\n**'<int:post_id>/comment/'****, views.post_comment, name=****'post_comment'**\n **),**\n] \n```", "```py\ntemplates/\n  blog/\n    post/\n      includes/\n        comment_form.html\n      detail.html\n      list.html\n      share.html \n```", "```py\n<h2>Add a new comment</h2>\n<form action=\"{% url \"blog:post_comment\" post.id %}\" method=\"post\">\n  {{ form.as_p }}\n  {% csrf_token %}\n  <p><input type=\"submit\" value=\"Add comment\"></p>\n</form> \n```", "```py\ntemplates/\n  blog/\n    post/\n      includes/\n        comment_form.html\n      comment.html\n      detail.html\n      list.html\n      share.html \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}Add a comment{% endblock %}\n{% block content %}\n  {% if comment %}\n    <h2>Your comment has been added.</h2>\n<p><a href=\"{{ post.get_absolute_url }}\">Back to the post</a></p>\n  {% else %}\n    {% include \"blog/post/includes/comment_form.html\" %}\n  {% endif %}\n{% endblock %} \n```", "```py\ndef post_detail(request, year, month, day, post):\n    post = get_object_or_404(\n        Post,\n        status=Post.Status.PUBLISHED,\n        slug=post,\n        publish__year=year,\n        publish__month=month,\n        publish__day=day\n    )\n    **# List of active comments for this post**\n **comments = post.comments.****filter****(active=****True****)**\n**# Form for users to comment**\n **form = CommentForm()**\nreturn render(\n        request,\n        'blog/post/detail.html',\n        {\n            'post': post**,**\n**'comments'****: comments,**\n**'form'****: form**\n        }\n    ) \n```", "```py\n    comments = post.comments.filter(active=True) \n    ```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body|linebreaks }}\n  <p>\n<a href=\"{% url \"blog:post_share\" post.id %}\">\n      Share this post\n    </a>\n</p>\n**{% with comments.count as total_comments %}**\n**<****h2****>**\n **{{ total_comments }} comment{{ total_comments|pluralize }}**\n**</****h2****>**\n **{% endwith %}**\n{% endblock %} \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body|linebreaks }}\n  <p>\n<a href=\"{% url \"blog:post_share\" post.id %}\">\n      Share this post\n    </a>\n</p>\n  {% with comments.count as total_comments %}\n    <h2>\n      {{ total_comments }} comment{{ total_comments|pluralize }}\n    </h2>\n  {% endwith %}\n  **{% for comment in comments %}**\n**<****div****class****=****\"comment\"****>**\n**<****p****class****=****\"info\"****>**\n **Comment {{ forloop.counter }} by {{ comment.name }}**\n **{{ comment.created }}**\n**</****p****>**\n **{{ comment.body|linebreaks }}**\n**</****div****>**\n **{% empty %}**\n**<****p****>****There are no comments.****</****p****>**\n **{% endfor %}**\n{% endblock %} \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body|linebreaks }}\n  <p>\n<a href=\"{% url \"blog:post_share\" post.id %}\">\n      Share this post\n    </a>\n</p>\n  {% with comments.count as total_comments %}\n    <h2>\n      {{ total_comments }} comment{{ total_comments|pluralize }}\n    </h2>\n  {% endwith %}\n  {% for comment in comments %}\n    <div class=\"comment\">\n<p class=\"info\">\n        Comment {{ forloop.counter }} by {{ comment.name }}\n        {{ comment.created }}\n      </p>\n      {{ comment.body|linebreaks }}\n    </div>\n  {% empty %}\n    <p>There are no comments.</p>\n  {% endfor %}\n  **{% include \"blog/post/includes/comment_form.html\" %}**\n{% endblock %} \n```", "```py\n{% for field in form %}\n  <div class=\"my-div\">\n    {{ field.errors }}\n    {{ field.label_tag }} {{ field }}\n    <div class=\"help-text\">{{ field.help_text|safe }}</div>\n</div>\n{% endfor %} \n```", "```py\n<h2>Add a new comment</h2>\n<form action=\"{% url \"blog:post_comment\" post.id %}\" method=\"post\">\n**<****div****class****=****\"left\"****>**\n **{{ form.name.as_field_group }}**\n**</****div****>**\n**<****div****class****=****\"left\"****>**\n **{{ form.email.as_field_group }}**\n**</****div****>**\n **{{ form.body.as_field_group }}**\n  {% csrf_token %}\n  <p><input type=\"submit\" value=\"Add comment\"></p>\n</form> \n```"]