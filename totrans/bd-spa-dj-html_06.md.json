["```py\nfrom django.db import models\n```", "```py\nclass Message(models.Model):\n```", "```py\n    author = models.CharField(max_length=100)\n```", "```py\n    text = models.TextField(max_length=200)\n```", "```py\n    created_at = models.DateTimeField(auto_now_add=True)\n```", "```py\n    class Meta:\n```", "```py\n        db_table = \"messages\"\n```", "```py\n        verbose_name_plural = \"Messages\"\n```", "```py\n    def __str__(self):\n```", "```py\n        return self.text[:10] + \"...\"\n```", "```py\ndocker-compose up\n```", "```py\n{% load static %}\n```", "```py\n<!doctype html>\n```", "```py\n<html lang=\"en\">\n```", "```py\n<head>\n```", "```py\n    <meta charset=\"UTF-8\">\n```", "```py\n    <meta name=\"viewport\"\n```", "```py\n          content=\"width=device-width, user-scalable=no,\n```", "```py\n              initial-scale=1.0, maximum-scale=1.0, \n```", "```py\n                  minimum-scale=1.0\">\n```", "```py\n    <title>Social Network</title>\n```", "```py\n    <link rel=\"stylesheet\" href=\"{% static 'css/main.css' %}\">\n```", "```py\n    <script defer src=\"img/index.js' %}\">\n```", "```py\n    </script>\n```", "```py\n</head>\n```", "```py\n<body\n```", "```py\n        data-host=\"{{ request.get_host }}\"\n```", "```py\n        data-scheme=\"{{ request.scheme }}\"\n```", "```py\n>\n```", "```py\n    <div class=\"container\">\n```", "```py\n        <header>\n```", "```py\n            <h1>Social Network</h1>\n```", "```py\n        </header>\n```", "```py\n        <main id=\"main\">\n```", "```py\n            <section class=\"message-form\">\n```", "```py\n                <form>\n```", "```py\n                    <input\n```", "```py\n                            type=\"text\"\n```", "```py\n                            placeholder=\"Name\"\n```", "```py\n                            id=\"message-form__author\"\n```", "```py\n                            class=\"message-form__author\" \n```", "```py\n                               class=\"message-form__author\"\n```", "```py\n                            name=\"author\"\n```", "```py\n                            required\n```", "```py\n                    >\n```", "```py\n                    <textarea\n```", "```py\n                            name=\"message\"\n```", "```py\n                            placeholder=\"Write your message \n```", "```py\n                               here...\"\n```", "```py\n                            id=\"message-form__text\"\n```", "```py\n                            class=\"message-form__text\" \n```", "```py\n                                class=\"message-form__text\"\n```", "```py\n                            required\n```", "```py\n                    ></textarea>\n```", "```py\n                    <input\n```", "```py\ntype=\"submit\"\n```", "```py\nclass=\"message-form__submit\"id=\"message-form__submit\"\n```", "```py\nvalue=\"Send\"\n```", "```py\n                    >\n```", "```py\n                </form>\n```", "```py\n            </section>\n```", "```py\n            <!-- End Form for adding new messages -->\n```", "```py\n            <section id=\"messages\">\n```", "```py\n                <div id=\"messages__list\"></div>\n```", "```py\n                <button class=\"button\" \n```", "```py\n                    id=\"messages__previous-page\" disabled> \n```", "```py\n                        Previous</button>\n```", "```py\n                <button class=\"button\" id=\"messages__next-\n```", "```py\n                    page\">Next</button>\n```", "```py\n            </section>\n```", "```py\n            <!-- End Messages -->\n```", "```py\n        </main>\n```", "```py\n    </div>\n```", "```py\n</body>\n```", "```py\n</html>\n```", "```py\n:root {\n```", "```py\n    --color__background: #f6f4f3;\n```", "```py\n    --color__gray: #ccc;\n```", "```py\n}\n```", "```py\n* {\n```", "```py\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n```", "```py\n    box-sizing: border-box;\n```", "```py\n}\n```", "```py\nbody {\n```", "```py\n    margin: 0;\n```", "```py\n    background-color: var(--color__background);\n```", "```py\n}\n```", "```py\n.container {\n```", "```py\n    margin: 0 auto;\n```", "```py\n    padding: 1rem;\n```", "```py\n    max-width: 40rem;\n```", "```py\n}\n```", "```py\n. button {\n```", "```py\n    display: inline-block;\n```", "```py\n    padding: 0.5rem 1rem;\n```", "```py\n    background-color: var(--color__gray);\n```", "```py\n    border: 0;\n```", "```py\n    cursor: pointer;\n```", "```py\n    text-decoration: none;\n```", "```py\n}\n```", "```py\n. button:hover {\n```", "```py\n    filter: brightness(90%);\n```", "```py\n}\n```", "```py\n.message-form__author, .message-form__text {\n```", "```py\n    display: block;\n```", "```py\n    width: 100%;\n```", "```py\n    outline: none;\n```", "```py\n    padding: .5rem;\n```", "```py\n    resize: none;\n```", "```py\n    border: 1px solid var(--color__gray);\n```", "```py\n    box-sizing: border-box;\n```", "```py\n}\n```", "```py\n.message-form__submit {\n```", "```py\n    display: block;\n```", "```py\n    width: 100%;\n```", "```py\n    outline: none;\n```", "```py\n    padding: .5rem;\n```", "```py\n    background-color: var(--color__gray);\n```", "```py\n    border: none;\n```", "```py\n    cursor: pointer;\n```", "```py\n    font-weight: bold;\n```", "```py\n}\n```", "```py\n.message-form__submit:hover {\n```", "```py\n    filter: brightness(90%);\n```", "```py\n}\n```", "```py\n.message {\n```", "```py\n    border: 1px solid var(--color__gray);\n```", "```py\n    border-top: 0;\n```", "```py\n    padding: .5rem;\n```", "```py\n    border-radius: .5rem;\n```", "```py\n}\n```", "```py\n.message__author {\n```", "```py\n    font-size: 1rem;\n```", "```py\n}\n```", "```py\n.message__created_at {\n```", "```py\n    colour: var(--color__gray);\n```", "```py\n}\n```", "```py\n.message__footer {\n```", "```py\n    display: flex;\n```", "```py\n    justify-content: space-between;\n```", "```py\n    align-items: center;\n```", "```py\n}\n```", "```py\n/*\n```", "```py\n    VARIABLES\n```", "```py\n*/\n```", "```py\n// Connect to WebSockets server (SocialNetworkConsumer)\n```", "```py\nconst myWebSocket = new WebSocket(`${document.body.\n```", "```py\n    dataset.scheme === 'http' ? 'ws' : 'wss'}://${ \n```", "```py\n    document.body.dataset.host }/ws/social-network/`);\n```", "```py\nconst inputAuthor = document.querySelector(\"#message-\n```", "```py\n    form__author\");\n```", "```py\nconst inputText = document.querySelector(\"#message-\n```", "```py\n    form__text\");\n```", "```py\nconst inputSubmit = document.querySelector(\"#message-\n```", "```py\n    form__submit\");\n```", "```py\n/*\n```", "```py\n    FUNCTIONS\n```", "```py\n*/\n```", "```py\n/**\n```", "```py\n* Send data to WebSockets server\n```", "```py\n* @param {string} message\n```", "```py\n* @param {WebSocket} webSocket\n```", "```py\n* @return {void}\n```", "```py\n*/\n```", "```py\nfunction sendData(message, webSocket) {\n```", "```py\n    webSocket.send(JSON.stringify(message));\n```", "```py\n}\n```", "```py\n/**\n```", "```py\n* Send new message\n```", "```py\n* @param {Event} event\n```", "```py\n* @return {void}\n```", "```py\n*/\n```", "```py\nfunction sendNewMessage(event) {\n```", "```py\n    event.preventDefault();\n```", "```py\n    // Prepare the information we will send\n```", "```py\n    const newData = {\n```", "```py\n        \"action\": \"add message\",\n```", "```py\n        \"data\": {\n```", "```py\n            \"author\": inputAuthor.value,\n```", "```py\n            \"text\": inputText.value\n```", "```py\n        }\n```", "```py\n    };\n```", "```py\n    // Send the data to the server\n```", "```py\n    sendData(newData, myWebSocket);\n```", "```py\n    // Clear message form\n```", "```py\n    inputText.value = \"\";\n```", "```py\n}\n```", "```py\n/*\n```", "```py\n    EVENTS\n```", "```py\n*/\n```", "```py\n// Event when a new message is received by WebSockets\n```", "```py\nmyWebSocket.addEventListener(\"message\", (event) => {\n```", "```py\n    // Parse the data received\n```", "```py\n    const data = JSON.parse(event.data);\n```", "```py\n    // Renders the HTML received from the Consumer\n```", "```py\n    document.querySelector(data.selector). innerHTML = \n```", "```py\n        data.html;\n```", "```py\n});\n```", "```py\n// Sends new message when you click on Submit\n```", "```py\ninputSubmit.addEventListener(\"click\", sendNewMessage);\n```", "```py\n{\n```", "```py\n        \"action\": \"text\",\n```", "```py\n        \"data\": {}\n```", "```py\n}\n```", "```py\nfrom channels.generic.websocket import JsonWebsocketConsumer\n```", "```py\nfrom django.template.loader import render_to_string\n```", "```py\nfrom . models import Message\n```", "```py\nfrom asgiref.sync import async_to_sync\n```", "```py\nclass SocialNetworkConsumer(JsonWebsocketConsumer):\n```", "```py\n    room_name = 'broadcast\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        # Accept the connection\n```", "```py\n        self.accept()\n```", "```py\n        # Assign the Broadcast group\n```", "```py\n        async_to_sync(self.channel_layer.group_add)\n```", "```py\n            (self.room_name, self.channel_name)\n```", "```py\n        # Send you all the messages stored in the database.\n```", "```py\n    def disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        # Remove from the Broadcast group\n```", "```py\n        async_to_sync(self.channel_layer.group_discard)\n```", "```py\n            (self.room_name, self.channel_name)\n```", "```py\n    def receive_json(self, data_received):\n```", "```py\n        \"\"\"\n```", "```py\n            Event when data is received\n```", "```py\n            All information will arrive in 2 variables:\n```", "```py\n            'action', with the action to be taken\n```", "```py\n            'data' with the information\n```", "```py\n        \"\"\"\n```", "```py\n        # Get the data\n```", "```py\n        data = data_received['data']\n```", "```py\n        # Depending on the action we will do one task or \n```", "```py\n        another.\n```", "```py\n        match data_received['action']:\n```", "```py\n            case 'add message':\n```", "```py\n                # Add message to database\n```", "```py\n                Message.objects.create(\n```", "```py\n                    author=data['author'],\n```", "```py\n                    text=data['text'],\n```", "```py\n                )\n```", "```py\n{% for message in messages %}\n```", "```py\n    <article class=\"message\" id=\"message--{{ message.id\n```", "```py\n        }}\">\n```", "```py\n        <h2 class=\"message__author\">{{ message.author }}\n```", "```py\n        </h2>\n```", "```py\n        <p class=\"message__text\">{{ message.text }}</p>\n```", "```py\n        <footer class=\"message__footer\">\n```", "```py\n            <time class=\"message__created_at\">{{ \n```", "```py\n                message.created_at }}</time>\n```", "```py\n            <div class=\"message__controls\">\n```", "```py\n                <button class=\"button messages__update\" \n```", "```py\n                  data-id=\"{{ message.id }}\"> Edit</button>\n```", "```py\n                <button class=\"button messages__delete\" \n```", "```py\n                    data-id=\"{{ message.id }}\"> Delete\n```", "```py\n                        </button>\n```", "```py\n            </div>\n```", "```py\n        </footer>\n```", "```py\n    </article>\n```", "```py\n{% endfor %}\n```", "```py\nfrom channels.generic.websocket import JsonWebsocketConsumer\n```", "```py\nfrom django.template.loader import render_to_string\n```", "```py\nfrom . models import Message\n```", "```py\nfrom asgiref.sync import async_to_sync\n```", "```py\nclass SocialNetworkConsumer(JsonWebsocketConsumer):\n```", "```py\n    room_name = 'broadcast'\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        # Accept the connection\n```", "```py\n        self.accept()\n```", "```py\n        # Assign the Broadcast group\n```", "```py\n        async_to_sync(self.channel_layer.group_add)\n```", "```py\n            (self.room_name, self.channel_name)\n```", "```py\n        # Send you all the messages stored in the database.\n```", "```py\n        self.send_list_messages()\n```", "```py\n    def disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        # Remove from the Broadcast group\n```", "```py\n        async_to_sync(self.channel_layer.group_discard)\n```", "```py\n            (self.room_name, self.channel_name)\n```", "```py\n    def receive_json(self, data_received):\n```", "```py\n        \"\"\"\n```", "```py\n            Event when data is received\n```", "```py\n            All information will arrive in 2 variables:\n```", "```py\n            'action', with the action to be taken\n```", "```py\n            'data' with the information\n```", "```py\n        \"\"\"\n```", "```py\n        # Get the data\n```", "```py\n        data = data_received['data']\n```", "```py\n        # Depending on the action we will do one task or \n```", "```py\n          another.\n```", "```py\n        match data_received['action']:\n```", "```py\n            case 'add message':\n```", "```py\n                # Add message to database\n```", "```py\n                Message.objects.create(\n```", "```py\n                    author=data['author'],\n```", "```py\n                    text=data['text'],\n```", "```py\n                )\n```", "```py\n                # Send messages to all clients\n```", "```py\n                self.send_list_messages()\n```", "```py\n            case 'list messages':\n```", "```py\n                # Send messages to all clients\n```", "```py\n                self.send_list_messages()\n```", "```py\n    def send_html(self, event):\n```", "```py\n        \"\"\"Event: Send html to client\"\"\"\n```", "```py\n        data = {\n```", "```py\n            'selector': event['selector'],\n```", "```py\n            'html': event['html'],\n```", "```py\n        }\n```", "```py\n        self.send_json(data)\n```", "```py\n    def send_list_messages(self):\n```", "```py\n        \"\"\" Send list of messages to client\"\"\"\n```", "```py\n        # Filter messages to the current page\n```", "```py\n        messages = Message.objects.order_by('-created_at')\n```", "```py\n        # Render HTML and send to client\n```", "```py\n        async_to_sync(self.channel_layer.group_send)(\n```", "```py\n            self.room_name, {\n```", "```py\n                type': 'send.html', # Run 'send_html()' \n```", "```py\n                    method\n```", "```py\n                'selector': '#messages__list',\n```", "```py\n                'html': render_to_string\n```", "```py\n                ('components/_list-messages.html', { \n```", "```py\n                    'messages': messages})\n```", "```py\n            }\n```", "```py\n        )\n```", "```py\nasync_to_sync(self.channel_layer.group_send)(\n```", "```py\n            self.room_name, {\n```", "```py\n                type': 'send.html', # Run 'send_html()' \n```", "```py\n                    method\n```", "```py\n                'selector': '#messages__list',\n```", "```py\n                'html': render_to_string('components/_list-\n```", "```py\n                   messages.html', { 'messages': messages})\n```", "```py\n            }\n```", "```py\n        )\n```", "```py\n    {% for message in messages %}\n        <article class=\"message\" id=\"message--{{ \n            message.id }}\">\n            <h2 class=\"message__author\">{{ message.author \n            }}</h2>\n            <p class=\"message__text\">{{ message.text }}\n            </p>\n            <footer class=\"message__footer\">\n                <time class=\"message__created_at\">{{ \n                    message.created_at }}</time>\n                <div class=\"message__controls\">\n                    <button class=\"button \n                        messages__update\" data-id=\"{{ \n                            message.id }}\"> Edit</button>\n                    <button class=\"button \n                        messages__delete\" data-id=\"{{ \n                           message.id }}\"> Delete</button>\n                </div>\n            </footer>\n        </article>\n    {% endfor %}\n    {% if total_pages != 0 %}\n        <!-- Paginator -->\n        <div id=\"paginator\" data-page=\"{{ page }}\">\n            {# The back button on the first page is not \n            displayed #}\n            {% if page ! = 1 %}\n            <button class=\"button\" id=\"messages__previous-\n                page\"> Previous</button>\n            {% endif %}\n\n            {# The forward button on the last page is not \n            displayed #}\n            {% if page ! = total_pages %}\n            <button class=\"button\" id=\"messages__next-\n                page\">Next</button>\n            {% endif %}\n        </div>\n        <!-- End Paginator -->\n    {% endif %}\n    ```", "```py\n    from channels.generic.websocket import JsonWebsocketConsumer\n    from django.template.loader import render_to_string\n    from . models import Message\n    from asgiref.sync import async_to_sync\n    import math\n\n    class SocialNetworkConsumer(JsonWebsocketConsumer):\n\n        room_name = 'broadcast\n        max_messages_per_page = 5 # New line\n\n        def connect(self):\n            \"\"\"Event when client connects\"\"\"\n            # Accept the connection\n            self.accept()\n            # Assign the Broadcast group\n            async_to_sync(self.channel_layer.group_add)(self.room_name, self.channel_name)\n            # Send you all the messages stored in the database.\n            self.send_list_messages()\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            # Remove from the Broadcast group\n            async_to_sync(self.channel_layer.\n                group_discard)(self.room_name, \n                    self.channel_name)\n\n        def receive_json(self, data_received):\n            \"\"\"\n                Event when data is received\n                All information will arrive in 2 \n                variables:\n                'action', with the action to be taken\n                'data' with the information\n            \"\"\"\n\n            # Get the data\n            data = data_received['data']\n            # Depending on the action we will do one task\n             or another.\n            match data_received['action']:\n                case 'add message':\n                    # Add message to database\n                    Message.objects.create(\n                        author=data['author'],\n                        text=data['text'],\n                    )\n                    # Send messages to all clients\n                    self.send_list_messages()\n                case 'list messages':\n                    # Send messages to all clients\n                    self.send_list_messages(data['page'])\n                    # Update line\n\n        def send_html(self, event):\n            \"\"\"Event: Send html to client\"\"\"\n            data = {\n                'selector': event['selector'],\n                'html': event['html'],\n            }\n            self.send_json(data)\n\n        def send_list_messages(self, page=1): \n        # Update line\n            \"Send list of messages to client\"\"\"\"\"\n            # Filter messages to the current page\n            start_pager = self.max_messages_per_page * \n                (page - 1) # New line\n            end_pager = start_pager + \n                self.max_messages_per_page # New line\n            messages = Message.objects.order_by('-\n                created_at')\n            messages_page = messages[start_pager:\n                end_pager] # New line\n            # Render HTML and send to client\n            total_pages = math.ceil(messages.count() / \n                self.max_messages_per_page) # New line    \n            async_to_sync(self.channel_layer.group_send)(\n                self.room_name, {\n                    'type': 'send.html', # Run \n                        'send_html()' method\n                    'selector': '#messages__list',\n                    'html': render_to_string\n                      ('components/_list-messages.html', {\n                        'messages': messages_page, \n                        # Update line\n                        'page': page, # New line\n                        total_pages': total_pages, \n                        # New line\n                    })\n                }\n            )\n    ```", "```py\n    /*\n        VARIABLES\n    */\n    // Connect to WebSockets server (SocialNetworkConsumer)\n    const myWebSocket = new WebSocket\n    (`${document.body.dataset.scheme === 'http' ? 'ws' : \n    'wss'}://${ document.body.dataset.host }/ws/social-\n        network/`);\n    const inputAuthor = document.querySelector(\"#message-\n        form__author\");\n    const inputText = document.querySelector(\"#message-\n        form__text\");\n    const inputSubmit = document.querySelector(\"#message-\n        form__submit\");\n\n    /*\n        FUNCTIONS\n    */\n\n    /**\n    * Send data to WebSockets server\n    * @param {string} message\n    * @param {WebSocket} webSocket\n    * @return {void}\n    */\n    function sendData(message, webSocket) {\n        webSocket.send(JSON.stringify(message));\n    }\n\n    /**\n    * Send new message\n    * @param {Event} event\n    * @return {void}\n    */\n    function sendNewMessage(event) {\n        event.preventDefault();\n        // Prepare the information we will send\n        const newData = {\n            \"action\": \"add message\",\n            \"data\": {\n                \"author\": inputAuthor.value,\n                \"text\": inputText.value\n            }\n        };\n        // Send the data to the server\n        sendData(newData, myWebSocket);\n        // Clear message form\n        inputText.value = \"\";\n    }\n\n    /**\n    * Get current page stored in #paginator as dataset\n    * @returns {number}\n    */\n    function getCurrentPage() {\n        return parseInt(document.\n            querySelector(\"#paginator\"). dataset.page);\n    }\n\n    /**\n    * Switch to the next page\n    * @param {Event} event\n    * @return {void}\n    */\n    function goToNextPage(event) {\n        // Prepare the information we will send\n        const newData = {\n            \"action\": \"list messages\",\n            \"data\": {\n                \"page\": getCurrentPage() + 1,\n            }\n        };\n        // Send the data to the server\n        sendData(newData, myWebSocket);\n    }\n\n    /**\n    * Switch to the previous page\n    * @param {Event} event\n    * @return {void}\n    */\n    function goToPreviousPage(event) {\n        // Prepare the information we will send\n        const newData = {\n            \"action\": \"list messages\",\n            \"data\": {\n                \"page\": getCurrentPage() - 1,\n            }\n        };\n        // Send the data to the server\n        sendData(newData, myWebSocket);\n    }\n\n    /*\n        EVENTS\n    */\n\n    // Event when a new message is received by WebSockets\n    myWebSocket.addEventListener(\"message\", (event) => {\n        // Parse the data received\n        const data = JSON.parse(event.data);\n        // Renders the HTML received from the Consumer\n        document.querySelector(data.selector). innerHTML = \n            data.html;\n        /* Reassigns the events of the newly rendered HTML */\n        // Pagination\n        document.querySelector(\"#messages__next-page\")?. \n            addEventListener(\"click\", goToNextPage);\n        document.querySelector(\"#messages__previous-\n            page\")?. addEventListener(\"click\", \n                goToPreviousPage);\n    });\n\n    // Sends new message when you click on Submit\n    inputSubmit.addEventListener(\"click\", sendNewMessage);\n    ```", "```py\ndocument.querySelector(\"#messages__next-page\")?. \n    addEventListener(\"click\", goToNextPage); \ndocument.querySelector(\"#messages__previous-page\")?. \n    addEventListener(\"click\", goToPreviousPage);\n```", "```py\n    <button class=\"button messages__delete\" data-id=\"{{ \n        message.id }}\"> Delete</button>\n    ```", "```py\n    /*\n        VARIABLES\n    */\n    // Connect to WebSockets server (SocialNetworkConsumer)\n    const myWebSocket = new WebSocket\n        (`${document.body.dataset.scheme === 'http' ? 'ws' \n        : 'wss'}://${ document.body.dataset.host \n        }/ws/social-network/`);\n    const inputAuthor = document.querySelector(\"#message-\n        form__author\");\n    const inputText = document.querySelector(\"#message-\n        form__text\");\n    const inputSubmit = document.querySelector(\"#message-\n        form__submit\");\n\n    /*\n        FUNCTIONS\n    */\n\n    /**\n    * Send data to WebSockets server\n    * @param {string} message\n    * @param {WebSocket} webSocket\n    * @return {void}\n    */\n    function sendData(message, webSocket) {\n        webSocket.send(JSON.stringify(message));\n    }\n\n    /**\n    * Delete message\n    * @param {Event} event\n    * @return {void}\n    */\n    function deleteMessage(event) {\n        const message = {\n            \"action\": \"delete message\",\n            \"data\": {\n                \"id\": event.target.dataset.id\n            }\n        };\n        sendData(message, myWebSocket);\n    }\n\n    /**\n    * Send new message\n    * @param {Event} event\n    * @return {void}\n    */\n    function sendNewMessage(event) {\n        event.preventDefault();\n        // Prepare the information we will send\n        const newData = {\n            \"action\": \"add message\",\n            \"data\": {\n                \"author\": inputAuthor.value,\n                \"text\": inputText.value\n            }\n        };\n        // Send the data to the server\n        sendData(newData, myWebSocket);\n        // Clear message form\n        inputText.value = \"\";\n    }\n\n    /**\n    * Get current page stored in #paginator as dataset\n    * @returns {number}\n    */\n    function getCurrentPage() {\n        return parseInt(document.querySelector(\"#paginator\"). dataset.page);\n    }\n\n    /**\n    * Switch to the next page\n    * @param {Event} event\n    * @return {void}\n    */\n    function goToNextPage(event) {\n        // Prepare the information we will send\n        const newData = {\n            \"action\": \"list messages\",\n            \"data\": {\n                \"page\": getCurrentPage() + 1,\n            }\n        };\n        // Send the data to the server\n        sendData(newData, myWebSocket);\n    }\n\n    /**\n    * Switch to the previous page\n    * @param {Event} event\n    * @return {void}\n    */\n    function goToPreviousPage(event) {\n        // Prepare the information we will send\n        const newData = {\n            \"action\": \"list messages\",\n            \"data\": {\n                \"page\": getCurrentPage() - 1,\n            }\n        };\n        // Send the data to the server\n        sendData(newData, myWebSocket);\n    }\n\n    /*\n        EVENTS\n    */\n\n    // Event when a new message is received by WebSockets\n    myWebSocket.addEventListener(\"message\", (event) => {\n        // Parse the data received\n        const data = JSON.parse(event.data);\n        // Renders the HTML received from the Consumer\n        document.querySelector(data.selector). innerHTML = \n            data.html;\n        /* Reassigns the events of the newly rendered HTML */\n        // Pagination\n        document.querySelector(\"#messages__next-\n          page\")?.addEventListener(\"click\", goToNextPage);\n        document.querySelector(\"#messages__previous-\n           page\")?.addEventListener(\"click\", \n               goToPreviousPage);\n        // Add to all delete buttons the event\n        document.querySelectorAll\n            (\".messages__delete\").forEach(button => {\n            button.addEventListener(\"click\", \n                deleteMessage);\n        });\n    });\n\n    // Sends new message when you click on Submit\n    inputSubmit.addEventListener(\"click\", sendNewMessage);\n    ```", "```py\n    # app/website/consumers.py\n    from channels.generic.websocket import JsonWebsocketConsumer\n    from django.template.loader import render_to_string\n    from .models import Message\n    from asgiref.sync import async_to_sync\n    import math\n\n    class SocialNetworkConsumer(JsonWebsocketConsumer):\n\n        room_name = 'broadcast'\n        max_messages_per_page = 5\n\n        def connect(self):\n            \"\"\"Event when client connects\"\"\"\n            # Accept the connection\n            self.accept()\n            # Assign the Broadcast group\n            async_to_sync(self.channel_layer.group_add)\n                (self.room_name, self.channel_name)\n            # Send you all the messages stored in the \n            database.\n            self.send_list_messages()\n\n        def disconnect(self, close_code):\n            \"\"\"Event when client disconnects\"\"\"\n            # Remove from the Broadcast group\n            async_to_sync(self.channel_layer.group_\n               discard)(self.room_name, self.channel_name)\n\n        def receive_json(self, data_received):\n            \"\"\"\n                Event when data is received\n                All information will arrive in 2 variables:\n                'action', with the action to be taken\n                'data' with the information\n            \"\"\"\n\n            # Get the data\n            data = data_received['data']\n            # Depending on the action we will do one task or another.\n            match data_received['action']:\n                case 'add message':\n                    # Add message to database\n                    Message.objects.create(\n                        author=data['author'],\n                        text=data['text'],\n                    )\n                    # Send messages to all clients\n                    self.send_list_messages()\n                case 'list messages':\n                    # Send messages to all clients\n                    self.send_list_messages(data['page'])\n                case 'delete message':\n                    # Delete message from database\n                    Message.objects.get\n                       (id=data['id']).delete() # New line\n                    # Send messages to all clients\n                    self.send_list_messages() # New line\n\n        def send_html(self, event):\n            \"\"\"Event: Send html to client\"\"\"\n            data = {\n                'selector': event['selector'],\n                'html': event['html'],\n            }\n            self.send_json(data)\n\n        def send_list_messages(self, page=1):\n            \"\"\"Send list of messages to client\"\"\"\n            # Filter messages to the current page\n            start_pager = self.max_messages_per_page * \n               (page - 1)\n            end_pager = start_pager + \n                self.max_messages_per_page\n            messages = Message.objects.order_by('-\n                created_at')\n            messages_page = messages\n                [start_pager:end_pager]\n            # Render HTML and send to client\n            total_pages = math.ceil(messages.count() / \n                self.max_messages_per_page)\n            async_to_sync(self.channel_layer.group_send)(\n                self.room_name, {\n                    'type': 'send.html', # Run \n                     'send_html()' method\n                    'selector': '#messages__list',\n                    'html': render_to_string\n                      ('components/_list-messages.html', {\n                        'messages': messages_page,\n                        'page': page,\n                        'total_pages': total_pages,\n                    }) \n                }\n            )\n    ```", "```py\n    <form class=\"update-form\" data-id=\"{{ message.id }}\">\n        <input\n                type=\"text\"\n                placeholder=\"Name\"\n                id=\"message-form__author--update\"\n                class=\"message-form__author\" \n                name=\"author\"\n                required\n                value=\"{{ message.author }}\"\n        >\n        <textarea\n                name=\"message\"\n                placeholder=\"Write your message here...\"\n                id=\"message-form__text--update\"\n                class=\"message-form__text\" \n                required\n        >{{ message.text }}</textarea>\n        <input\n                type=\"submit\"\n                class=\"message-form__submit\" class=\"message-form__submit\" \n                id=\"message-form__submit--update\"\n                value=\"Update\"\n        >\n    </form>\n    ```", "```py\n    case 'open edit page':\n    self.open_edit_page(data['id'])\n    ```", "```py\ndef open_edit_page(self, id):\n        \"\"\"Send the form to edit the message\"\"\"\n        message = Message.objects.get(id=id)\n        async_to_sync(self.channel_layer.group_send)(\n            self.room_name, {\n                'type': 'send.html', # Run \n                   'send_html()' method\n                'selector': f'#message--{id}',\n                'html': render_to_string\n                   ('components/_edit-message.html',\n                       {'message': message})\n            }\n        )\n```", "```py\n    case 'update message':\n                    # Update message in database\n                    Message.objects.filter(id=data['id']). update(\n                        author=data['author'],\n                        text=data['text'],\n                    )\n                    # Send messages to all clients\n                    self.send_list_messages()\n    ```", "```py\nfrom channels.generic.websocket import JsonWebsocketConsumer\nfrom django.template.loader import render_to_string\nfrom .models import Message\nfrom asgiref.sync import async_to_sync\nimport math\n\nclass SocialNetworkConsumer(JsonWebsocketConsumer):\n\n    room_name = 'broadcast'\n    max_messages_per_page = 5\n\n    def connect(self):\n        \"\"\"Event when client connects\"\"\"\n        # Accept the connection\n        self.accept()\n        # Assign the Broadcast group\n        async_to_sync(self.channel_layer.group_add)(self.room_name, self.channel_name)\n        # Send you all the messages stored in the database.\n        self.send_list_messages()\n\n    def disconnect(self, close_code):\n        \"\"\"Event when client disconnects\"\"\"\n        # Remove from the Broadcast group\n        async_to_sync(self.channel_layer.\n           group_discard)(self.room_name, \n              self.channel_name)\n\n    def receive_json(self, data_received):\n        \"\"\"\n            Event when data is received\n            All information will arrive in 2 variables:\n            'action', with the action to be taken\n            'data' with the information\n        \"\"\"\n\n        # Get the data\n        data = data_received['data']\n        # Depending on the action we will do one task or another.\n        match data_received['action']:\n            case 'add message':\n                # Add message to database\n                Message.objects.create(\n                    author=data['author'],\n                    text=data['text'],\n                )\n                # Send messages to all clients\n                self.send_list_messages()\n            case 'list messages':\n                # Send messages to all clients\n                self.send_list_messages(data['page'])\n            case 'delete message':\n                # Delete message from database\n                Message.objects.get\n                   (id=data['id']).delete()\n                # Send messages to all clients\n                self.send_list_messages()\n            case 'open edit page':\n                self.open_edit_page(data['id'])\n            case 'update message':\n                # Update message in database\n                Message.objects.filter(id=data['id']). \n                    update(\n                    author=data['author'],\n                    text=data['text'],\n                ) # New block\n                # Send messages to all clients\n                self.send_list_messages() # New line\n\n    def send_html(self, event):\n        \"\"\"Event: Send html to client\"\"\"\n        data = {\n            'selector': event['selector'],\n            'html': event['html'],\n        }\n        self.send_json(data)\n\n    def send_list_messages(self, page=1):\n        \"\"\"Send list of messages to client\"\"\"\n        # Filter messages to the current page\n        start_pager = self.max_messages_per_page * (page - 1)\n        end_pager = start_pager + \n            self.max_messages_per_page\n        messages = Message.objects.order_by('-\n            created_at')\n        messages_page = \n            messages[start_pager:end_pager].\n        # Render HTML and send to client\n        total_pages = math.ceil(messages.count() / \n            self.max_messages_per_page)\n        async_to_sync(self.channel_layer.group_send)(\n            self.room_name, {\n                'type': 'send.html', # Run \n                    'send_html()' method\n                'selector': '#messages__list',\n                'html': render_to_string\n                  ('components/_list-messages.html', {\n                    'messages': messages_page,\n                    'page': page,\n                    'total_pages': total_pages,\n                })\n            }\n        )\n\n    def open_edit_page(self, id):\n        \"\"\"Send the form to edit the message\"\"\"\n        message = Message.objects.get(id=id)\n        async_to_sync(self.channel_layer.group_send)(\n            self.room_name, {\n                'type': 'send.html', # Run \n                    'send_html()' method\n                'selector': f'#message--{id}',\n                'html': render_to_string\n                    ('components/_edit-message.html', \n                        {'message': message})\n            }\n        )\n```", "```py\n/*\n    VARIABLES\n*/\n// Connect to WebSockets server (SocialNetworkConsumer)\nconst myWebSocket = new WebSocket(`${document.body.dataset.scheme === 'http' ? 'ws' : 'wss'}://${ document.body.dataset.host }/ws/social-network/`);\nconst inputAuthor = document.querySelector(\"#message-\n     form__author\");\nconst inputText = document.querySelector(\"#message-  \n    form__text\");\nconst inputSubmit = document.querySelector(\"#message-\n    form__submit\");\n```", "```py\n/*\n    FUNCTIONS\n*/\n\n/**\n* Send data to WebSockets server\n* @param {string} message\n* @param {WebSocket} webSocket\n* @return {void}\n*/\nfunction sendData(message, webSocket) {\n    webSocket.send(JSON.stringify(message));\n}\n\n/**\n* Displays the update form\n* @param {Event} event\n* @return {void}\n*/\nfunction displayUpdateForm(event) {\n    const message = {\n        \"action\": \"open edit page\",\n        \"data\": {\n            \"id\": event.target.dataset.id\n        }\n    };\n    sendData(message, myWebSocket);\n}\n\n/**\n* Update message\n* @param {Event} event\n* @return {void}\n*/\nfunction updateMessage(event) {\n    event.preventDefault();\n    const message = {\n        \"action\": \"update message\",\n        \"data\": {\n            \"id\": event.target.dataset.id,\n            \"author\": event.target.querySelector(\"#message-form__author--update\"). value,\n            \"text\": event.target.querySelector(\"#message-form__text--update\"). value\n        }\n    };\n    sendData(message, myWebSocket);\n}\n\n/**\n* Delete message\n* @param {Event} event\n* @return {void}\n*/\nfunction deleteMessage(event) {\n    const message = {\n        \"action\": \"delete message\",\n        \"data\": {\n            \"id\": event.target.dataset.id\n        }\n    };\n    sendData(message, myWebSocket);\n}\n\n/**\n* Send new message\n* @param {Event} event\n* @return {void}\n*/\nfunction sendNewMessage(event) {\n    event.preventDefault();\n    // Prepare the information we will send\n    const newData = {\n        \"action\": \"add message\",\n        \"data\": {\n            \"author\": inputAuthor.value,\n            \"text\": inputText.value\n        }\n    };\n    // Send the data to the server\n    sendData(newData, myWebSocket);\n    // Clear message form\n    inputText.value = \"\";\n}\n\n/**\n* Get current page stored in #paginator as dataset\n* @returns {number}\n*/\n\nfunction getCurrentPage() {\n    return parseInt(document.querySelector(\"#paginator\"). dataset.page);\n}\n\n/**\n* Switch to the next page\n* @param {Event} event\n* @return {void}\n*/\nfunction goToNextPage(event) {\n    // Prepare the information we will send\n    const newData = {\n        \"action\": \"list messages\",\n        \"data\": {\n            \"page\": getCurrentPage() + 1,\n        }\n    };\n    // Send the data to the server\n    sendData(newData, myWebSocket);\n}\n\n/**\n* Switch to the previous page\n* @param {Event} event\n* @return {void}\n*/\nfunction goToPreviousPage(event) {\n    // Prepare the information we will send\n    const newData = {\n        \"action\": \"list messages\",\n        \"data\": {\n            \"page\": getCurrentPage() - 1,\n        }\n    };\n    // Send the data to the server\n    sendData(newData, myWebSocket);\n}\n\n```", "```py\n/*\n    EVENTS\n*/\n\n// Event when a new message is received by WebSockets\nmyWebSocket.addEventListener(\"message\", (event) => {\n    // Parse the data received\n    const data = JSON.parse(event.data);\n    // Renders the HTML received from the Consumer\n    document.querySelector(data.selector). innerHTML = \n        data.html;\n    /* Reassigns the events of the newly rendered HTML */\n    // Pagination\n    document.querySelector(\"#messages__next-page\")?. \n        addEventListener(\"click\", goToNextPage);\n    document.querySelector(\"#messages__previous-   \n        page\")?. addEventListener(\"click\", \n            goToPreviousPage);\n    // Add to all delete buttons the event\n    document.querySelectorAll(\". messages__delete\"). forEach(button => {\n        button.addEventListener(\"click\", deleteMessage);\n    });\n    // Add to all update buttons the event\n    document.querySelectorAll(\". messages__update\"). forEach(button => {\n        button.addEventListener(\"click\", displayUpdateForm);\n    });\n    // Add to the update form the event\n    document.querySelectorAll(\". update-form\"). forEach(form => {\n        form.addEventListener(\"submit\", updateMessage);\n    });\n});\n\n// Sends new message when you click on Submit\ninputSubmit.addEventListener(\"click\", sendNewMessage);\n```"]