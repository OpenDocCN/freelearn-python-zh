["```py\npip install --upgrade pip\npip install --upgrade jax jaxlib\n```", "```py\npip install sklearn\n```", "```py\nX, y = make_blobs(\n    n_samples=500, n_features=2, centers=2, \\\n      cluster_std=0.5, random_state=0\n)\n```", "```py\ny[y == 0] = -1\n```", "```py\nplt.scatter(X[:, 0], X[:, 1], c=y);\n```", "```py\nimport jax.numpy as jnp\ndef predict(w, X):\n    return jnp.dot(X, w)\n```", "```py\ndef loss(w):\n    preds = predict(w, X)\n    return jnp.mean(jnp.clip(1 - jnp.multiply(y, preds), \\\n      a_min=0))\n```", "```py\nnp.random.seed(0)\nw = np.random.randn(3)\n```", "```py\nfrom jax import grad\nloss_grad = grad(loss)\n```", "```py\nn_iters = 200\nlr = 0.01\nloss_grad = grad(loss)\nfor i in range(n_iters):\n    grads = loss_grad(w)\n    w = w - lr * grads\n    tmp_loss = loss(w)\n    if tmp_loss == 0:\n        break\n```", "```py\nxs = np.linspace(X[:, 0].min(), X[:, 0].max(), 100)\n```", "```py\nplt.plot(xs, (xs * w[0] + w[2]) / - w[1])\n```", "```py\nnp.random.seed(0)\nw = np.random.randn(3)\n```", "```py\nloss_grad = grad(loss)\n```", "```py\nfrom jax import jit\nloss_grad = jit(grad(loss))\n```", "```py\nfrom sklearn.datasets import make_moons\nX, y = make_moons(n_samples=200, noise=0.1, random_state=0)\nX = np.hstack((X, np.ones_like(y).reshape(-1, 1)))\ny[y == 0] = -1\nplt.scatter(X[:, 0], X[:, 1], c=y);\n```", "```py\nlengthscale = 0.3\ndef rbf_kernel(x, z):\n    return jnp.exp(- jnp.linalg.norm(x - z) ** 2  \\\n      / lengthscale)\n```", "```py\nfrom jax import vmap\nkernel = rbf_kernel\nvec_kernel = jit(vmap(vmap(kernel, (0, None)), (None, 0)))\n```", "```py\ndef predict(alphas, X_test):\n    return jnp.dot(vec_kernel(X, X_test), alphas)\ndef loss(alphas):\n    preds = predict(alphas, X)\n    return jnp.mean(jnp.clip(1 - jnp.multiply(y, preds), \\\n      a_min=0))\n```", "```py\nnp.random.seed(0)\nalphas = np.random.randn(y.size)\nfor i in range(n_iters):\n    grads = loss_grad(alphas)\n    alphas = alphas - lr * grads\n    tmp_loss = loss(alphas)\n    if tmp_loss == 0:\n        break\n```", "```py\nkernel = rbf_kernel\nvec_kernel = vmap(vmap(kernel, (0, None)), (None, 0))\nloss_grad = grad(loss)\n```"]