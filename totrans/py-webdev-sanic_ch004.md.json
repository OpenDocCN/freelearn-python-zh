["```py\nPOST /path/to/endpoint HTTP/1.1\nHost: localhost:7777\nUser-Agent: curl/7.76.1\nAccept: */*\nContent-Length: 14\nContent-Type: application/json\n{\"foo\": \"bar\"}\n```", "```py\n@app.route(\"/my/stuff\")\nasync def stuff_handler(...):\n    ...\n```", "```py\n@app.route(\"/my/stuff\", methods=[\"GET\", \"HEAD\"])\nasync def stuff_handler(...):\n    return text(\"Hello\")\n```", "```py\n$ curl localhost:7777/my/stuff -i\nHTTP/1.1 200 OK\ncontent-length: 5\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\nHello\nThen, with a HEAD request.\n$ curl localhost:7777/my/stuff -i --head\nHTTP/1.1 200 OK\ncontent-length: 5\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\n```", "```py\n@app.get(\"/\")\ndef get_handler(...):\n    ...\n@app.post(\"/\")\ndef post_handler(...):\n    ...\n@app.put(\"/\")\ndef put_handler(...):\n    ...\n@app.patch(\"/\")\ndef patch_handler(...):\n    ...\n@app.delete(\"/\")\ndef delete_handler(...):\n    ...\n@app.head(\"/\")\ndef head_handler(...):\n    ...\n@app.options(\"/\")\ndef options_handler(...):\n    ...\n```", "```py\n@app.head(\"/my/stuff\")\n@app.get(\"/my/stuff\")\nasync def stuff_handler(...):\n    return text(\"Hello\")\n```", "```py\nfrom sanic.response import text, empty\nfrom sanic.constants import HTTPMethod\n@app.options(\"/do/stuff\")\n@app.post(\"/do/stuff\")\nasync def stuff_handler(request: Request):\n    if request.method == HTTPMethod.OPTIONS:\n        return empty()\n    else:\n        return text(\"Hello\")\n```", "```py\n@app.get(\"/foo\")\nasync def handler_1(request: Request):\n    ...\nasync def handler_2(request: Request):\n    ...\napp.add_route(handler_2, \"/bar\")\n```", "```py\nasync def connect_handler(request: Request):\n    return text(\"connecting...\")\n@app.on_request\nasync def method_hijack(request: Request):\n    if request.method == \"CONNECT\":\n        return await connect_handler(request)\n```", "```py\napp.router.ALLOWED_METHODS = [*app.router.ALLOWED_METHODS, \"CONNECT\"]\n@app.route(\"/\", methods=[\"CONNECT\"])\nasync def connect_handler(request: Request):\n    return text(\"connecting...\")\n```", "```py\nPOST /path/to/endpoint HTTP/1.1\nHost: localhost:7777\nUser-Agent: curl/7.76.1\nAccept: */*\nContent-Length: 14\nContent-Type: application/json\n{\"foo\": \"bar\"}\n```", "```py\n@app.delete(\"/\", ignore_body=False)\nasync delete_something(request: Request):\n    await delete_something_using_request(request.body)\n```", "```py\n@app.route(\"/one\", methods=[\"GET\"])\nasync def one(request: Request):\n    return text(\"one\")\n@app.get(\"/two\")\nasync def two(request: Request):\n    return text(\"two\")\n```", "```py\nfrom sanic import Blueprint, Request\nbp = Blueprint(\"MemberProfiles\", url_prefix=\"/profile\")\n@bp.get(\"\")\nasync def fetch_all_profiles(request: Request):\n    ...\n@bp.post(\"\")\nasync def create_new_profile(request: Request):\n    ...\n@bp.get(\"/<username>\")\nasync def fetch_single_profile(request: Request, username: str):\n    ...\n@bp.put(\"/<username>\")\nasync def replace_profile(request: Request, username: str):\n    ...\n@bp.patch(\"/<username>\")\nasync def update_profile(request: Request, username: str):\n    ...\n@bp.delete(\"/<username>\")\nasync def delete_profile(request: Request, username: str):\n    ...\n```", "```py\nfrom sanic import Blueprint, Request, HttpMethodView\nbp = Blueprint(\"MemberProfiles\", url_prefix=\"/profile\")\nclass AllProfilesView(HttpMethodView):\n    async def get(request: Request):\n        \"\"\"same as fetch_all_profiles() from before\"\"\"\n    async def post(request: Request):\n        \"\"\"same as create_new_profile() from before\"\"\"\nclass SingleProfileView(HttpMethodView):\n    async def get(request: Request, username: str):\n        \"\"\"same as fetch_single_profile() from before\"\"\"\n    async def put(request: Request, username: str):\n        \"\"\"same as replace_profile() from before\"\"\"\n    async def patch(request: Request, username: str):\n        \"\"\"same as update_profile() from before\"\"\"\n    async def delete(request: Request, username: str):\n        \"\"\"same as delete_profile() from before\"\"\"\napp.add_route(AllProfilesView.as_view(), \"\")\napp.add_route(SingleProfileView.as_view(), \"/<username>\")\n```", "```py\nasync def handler(request: Request):\n...\napp.add_route(handler, \"/path\")\n```", "```py\napp.add_route(SingleProfileView.as_view(), \"/<username>\")\n```", "```py\nclass SingleProfileView(\nHttpMethodView,\nattach=app,\nuri=\"/<username>\"\n):\nasync def get(request: Request, username: str):\n        \"\"\"same as fetch_single_profile() from before\"\"\"\n    async def put(request: Request, username: str):\n        \"\"\"same as replace_profile() from before\"\"\"\n    async def patch(request: Request, username: str):\n        \"\"\"same as update_profile() from before\"\"\"\n    async def delete(request: Request, username: str):\n        \"\"\"same as delete_profile() from before\"\"\"\n```", "```py\n@app.get(\"/path/to/something\")\nasync def do_something(request: Request):\n    ...\n@app.post(\"/path/to/something\")\nasync def do_something(request: Request):\n    ...\n@app.options(\"/path/to/something\")\nasync def do_something_options(request: Request):\n    ...\n@app.head(\"/path/to/something\")\nasync def do_something_head(request: Request):\n    ...\n```", "```py\nasync def options_handler(request: Request):\n    ...\nasync def head_handler(request: Request):\n    ...\n@app.before_server_start\ndef add_info_handlers(app: Sanic, _):\n    app.router.reset()\n    for group in app.router.groups.values():\n        if \"OPTIONS\" not in group.methods:\n            app.add_route(\n                handler=options_handler,\n                uri=group.uri,\n                methods=[\"OPTIONS\"],\n                strict_slashes=group.strict,\n            )\n    app.router.finalize()\n```", "```py\nasync def options_handler(request: Request):\n    ...\nasync def head_handler(request: Request):\n    ...\n```", "```py\n@app.before_server_start\ndef display(app: Sanic, _):\n    for route in app.router.routes:\n        print(route)\n    for group in app.router.groups.values():\n        print(group)\n@app.patch(\"/two\")\n@app.post(\"/two\")\ndef two_groups(request: Request):\n    return text(\"index\")\n@app.route(\"/one\", methods=[\"PATCH\", \"POST\"])\ndef one_groups(request: Request):\n    return text(\"index\")\n```", "```py\n<Route: name=__main__.two_groups path=two>\n<Route: name=__main__.two_groups path=two>\n<Route: name=__main__.one_groups path=one>\n<RouteGroup: path=two len=2>\n<RouteGroup: path=one len=1>\n```", "```py\nfor group in app.router.groups.values():\n    if \"OPTIONS\" not in group.methods:\n        app.add_route(\n            handler=options_handler,\n            uri=group.uri,\n            methods=[\"OPTIONS\"],\n            strict_slashes=group.strict,\n        )\n    if \"GET\" in group.methods and \"HEAD\" not in group.methods:\n        app.add_route(\n            handler=head_handler,\n            uri=group.uri,\n            methods=[\"HEAD\"],\n            strict_slashes=group.strict,\n        )\n```", "```py\nfrom functools import partial\nfor group in app.router.groups.values():\n    if \"GET\" in group.methods and \"HEAD\" not in group.methods:\n        get_route = group.methods_index[\"GET\"]\n        app.add_route(\n            handler=partial(\n                head_handler,\n                get_handler=get_route.handler\n            ),\n            uri=group.uri,\n            methods=[\"HEAD\"],\n            strict_slashes=group.strict,\n            name=f\"{get_route.name}_head\",\n        )\nasync def head_handler(request: Request, get_handler, *args, **kwargs):\n    return await get_handler(request: Request, *args, **kwargs)\n```", "```py\n/path/to/create_something  << BAD\n/path/to/something         << GOOD\n```", "```py\n/users      << to get all users\n/users/123  << to get user ID 123\n```", "```py\n/users/AdamHopkins        << BAD\n/users/adam_hopkins       << BAD\n/users/adam%20hopkins     << BAD\n/users/adam-hopkins       << GOOD\n```", "```py\n@app.route(\"/characters\")\n@app.route(\"/characters/\")\n@app.route(\"/characters\", strict_slashes=True)\n@app.route(\"/characters/\", strict_slashes=True)\nasync def handler(request: Request):\n    ...\n```", "```py\n@app.route(\"/characters\")\nasync def handler(request: Request):\n    ...\n```", "```py\n@app.get(\"/characters/<name>\")\nasync def profile(request: Request, name: str):\n    print text(f\"Hello {name}\")\n```", "```py\n@app.get(\"/messages/<message_id:int>\")\nasync def message_details(request: Request, message_id: int):\n    ...\n```", "```py\nfrom datetime import date\n@app.get(\"/report/<report_date:ymd>\")\nasync def get_report(request: Request, report_date: date):\n    assert isinstance(report_date, date)\n```", "```py\nIP_ADDRESS_PATTERN = (\n    r\"(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}\"\n    r\"(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\"\n)\n@app.get(f\"/<ip:{IP_ADDRESS_PATTERN}>\")\nasync def get_ip_details(request: Request, ip: str):\n    return text(f\"type={type(ip)} {ip=}\")\n```", "```py\n$ curl localhost:7777/1.2.3.4  \ntype=<class 'str'> ip='1.2.3.4'\n```", "```py\n@app.get(\"/icecream/<flavor:vanilla|chocolate>\")\nasync def get_flavor(request: Request, flavor: str):\n    return text(f\"You chose {flavor}\")\n```", "```py\n$ curl localhost:7777/icecream/mint\n️ 404 — Not Found\n==================\nRequested URL /icecream/mint not found\n$ curl localhost:7777/icecream/vanilla\nYou chose vanilla\n```", "```py\n    import ipaddress\n    app.router.register_pattern(\n        \"ipv4\",\n        ipaddress.ip_address,\n        IP_ADDRESS_PATTERN,\n    )\n    @app.get(\"/<ip:ipv4>\")\n    async def get_ip_details(request: Request, ip: ipaddress.IPv4Address):\n        return text(f\"type={type(ip)} {ip=}\")\n    ```", "```py\n    from enum import Enum, auto\n    class Flavor(Enum):\n        VANILLA = auto()\n        CHOCOLATE = auto()\n    ```", "```py\n    flavor_pattern = \"|\".join(\n        f.lower() for f in Flavor.__members__.keys()\n    )\n    ```", "```py\n    def parse_flavor(flavor: str) -> Flavor:\n    try:\n        return Flavor[flavor.upper()]\n    except KeyError:\n        raise ValueError(f\"Invalid ice cream flavor: {flavor}\")\n    ```", "```py\n    app.router.register_pattern(\n    \"ice_cream_flavor\",\n    parse_flavor,\n    flavor_pattern,\n    )\n    ```", "```py\n    @app.get(\"/icecream/<flavor:ice_cream_flavor>\")\n    async def get_flavor(request: Request, flavor: Flavor):\n    return text(f\"You chose {flavor}\")\n    ```", "```py\n    $ curl localhost:7777/icecream/mint\n    404 — Not Found\n    ===============\n    Requested URL /icecream/mint not found\n    $ curl localhost:7777/icecream/vanilla\n    You chose Flavor.VANILLA\n    ```", "```py\n    @dataclass\n    class Character:\n        name: str\n        super_powers: List[str]\n        favorite_foods: List[str]\n    ```", "```py\n    @app.get(\"/characters/<name:alpha>/<attr:slug>\")\n    async def character_property(request: Request, name: str, attr: str):\n        character = await get_character(name)\n        return json(getattr(character, attr))\n    ```", "```py\n    $ curl localhost:7777/characters/george/name\n    \"George\"\n    ```", "```py\n    @app.on_request\n    def convert_slugs(request: Request):\n        request.match_info = {\n            key: value.replace(\"-\", \"_\") \n            for key, value in request.match_info.items()\n        }\n    ```", "```py\n    $ curl localhost:7777/characters/george/super-powers\n    [\"whistling\",\"hand stands\"]\n    ```", "```py\n    @app.signal(\"http.routing.after\")\n    def convert_slugs(request: Request, route: Route, handler, kwargs):\n        request.match_info = {\n            key: value.replace(\"-\", \"_\") \n            for key, value in kwargs.items()\n        }\n    ```", "```py\nbp = Blueprint(\"characters\", version=1, url_prefix=\"/characters\")\n@bp.get(\"\")\nasync def get_all_characters(...):\n    ...\n```", "```py\nbp = Blueprint(\"Characters\")\nbp_v2 = Blueprint(\"CharactersV2\", version=2)\ngroup = Blueprint.group(bp, bp_v2, version=3)\n@bp.get(\"\", version=1)\nasync def version_1(...):\n    ...\n@bp_v2.get(\"\")\nasync def version_2(...):\n    ...\n@bp.get(\"\")\nasync def version_3(...):\n    ...\napp.blueprint(group, url_prefix=\"/characters\")\n```", "```py\n@bp.post(\"\")\nasync def create_character_profile(request: Request):\n    async create_character(name=request.json[\"name\"], ...)\n    ...\n```", "```py\n{\n    \"name\": \"Alice\"\n}\n```", "```py\n{\n    \"meta\": {\n        \"pseudonuym\": \"The Fantastic Coder\",\n        \"real_name\": \"Alice\"\n    },\n    \"superpowers\": [\n        {\n            \"skill\": \"Blazing fast typing skills\"\n        }\n    ]\n}\n```", "```py\nv1 = Blueprint(\"v1\", version=1)\nv2 = Blueprint(\"v2\", version=2)\n@v1.route(...)\n@v2.route(...)\nasync def unchanged_route(...):\n    ...\n```", "```py\nv1 = Blueprint(\"v1\", version=1)\nv2 = Blueprint(\"v2\", version=2)\n@v1.route(...)\nasync def unchanged_route(...):\n    ...\n```", "```py\nfrom sanic.log import logger\n@app.before_server_start\ndef display(app: Sanic, _):\n    routes = sorted(app.router.routes, key=lambda route: route.uri)\n    for route in routes:\n        logger.debug(f\"{route.uri} [{route.name}]\")\n```", "```py\n@bp.post(\"\", version=1.1)\nasync def create_character_profile_enhanced(request: Request):\n    async create_character_enhanced(data=request.json)\n```", "```py\ngroup = Blueprint.group(bp1, bp2, bp3, version_prefix=\"/api/v\")\n```", "```py\n@bp.route(\"\")\nasync def do_something(request: Request):\n    if request.headers[\"host\"] == \"alice.com\":\n        await do_something_for_alice(request)\n    elif request.headers[\"host\"] == \"bob.com\":\n        await do_something_for_bob(request)\n    else:\n        await do_something_for_me(request)\n```", "```py\n@bp.route(\"\", host=\"alice.com\")\nasync def do_something_for_alice(request: Request)::\n    await do_something_for_alice(request: Request)\n@bp.route(\"\", host=\"bob.com\")\nasync def do_something_for_bob(request: Request):\n    await do_something_for_bob(request: Request)\n@bp.route(\"\", host=\"mine.com\")\nasync def do_something_for_me(request: Request):\n    await do_something_for_me(request: Request)\n```", "```py\n@bp.route(\"\", host=\"alice.com\")\nasync def do_something_for_alice(request: Request)::\n    await do_something_for_alice(request: Request)\n@bp.route(\"\", host=\"bob.com\")\nasync def do_something_for_bob(request: Request):\n    await do_something_for_bob(request: Request)\n@bp.route(\"\")\nasync def do_something_for_me(request: Request):\n    await do_something_for_me(request: Request)\n```", "```py\n.\n├── server.py\n└── assets\n    ├── index.html\n    ├── css\n    │   └── styles.css\n    ├── img\n    │   └── logo.png\n    └── js\n        └── bundle.js\n```", "```py\n    version: \"3\"\n    services:\n      client:\n        image: nginx:alpine\n        ports:\n          - 8888:80\n        volumes:\n          - ./nginx/default.conf:/etc/nginx/conf.d/default.conf\n          - ./static:/var/www\n    ```", "```py\n    upstream example.com {\n        keepalive 100;\n        server 1.2.3.4:8000;\n    }\n    server {\n        server_name example.com;\n        root /var/www;\n        location / {\n            try_files $uri @sanic;\n        }\n        location @sanic {\n            proxy_pass http://$server_name;\n            proxy_set_header Host $host;\n            proxy_set_header X-Forwarded-Proto $scheme;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n        location ~* \\.(jpg|jpeg|png|gif|ico|css|js|txt)$ {\n            expires max;\n            log_not_found off;\n            access_log off;\n        }\n    }\n    ```", "```py\n    $ sanic server:app -p 7777 --debug --workers=2\n    ```", "```py\n    $ sanic server:app -H 0.0.0.0 -p 7777 --debug --workers=2\n    ```", "```py\n    $ curl localhost:8888/foo.txt -i\n    HTTP/1.1 200 OK\n    Server: nginx/1.21.0\n    Date: Tue, 15 Jun 2021 18:42:20 GMT\n    Content-Type: text/plain\n    Content-Length: 9\n    Last-Modified: Tue, 15 Jun 2021 18:39:01 GMT\n    Connection: keep-alive\n    ETag: \"60c8f3c5-9\"\n    Expires: Thu, 31 Dec 2037 23:55:55 GMT\n    Cache-Control: max-age=315360000\n    Accept-Ranges: bytes\n    hello...\n    ```", "```py\n    <html>\n        <head>\n            <title>Sample Stream</title>\n        </head>\n        <body>\n            <video width=\"1280\" height=\"720\" controls>\n                <source src=\"/mp4\" type=\"video/mp4\" />\n            </video>\n        </body>\n    </html>\n    ```", "```py\n    from sanic import Sanic, response\n    @app.route(\"/mp4\")\n    async def handler_file_stream(request: Request):\n        return await response.file_stream(\"/path/to/sample.mp4\")\n    app.static(\"/index.html\", \"/path/to/index.html\")\n    @app.route(\"/\")\n    def redirect(request: Request):\n        return response.redirect(\"/index.html\")\n    ```"]