["```py\nsquare = [(1,1), (1,2), (2,2), (2,1)] \n```", "```py\nimport math\n\ndef distance(p1, p2):\n    return math.sqrt((p1[0]-p2[0])**2 + (p1[1]-p2[1])**2)\n\ndef perimeter(polygon):\n    perimeter = 0\n    points = polygon + [polygon[0]]\n    for i in range(len(polygon)):\n        perimeter += distance(points[i], points[i+1])\n    return perimeter\n\n```", "```py\nclass Point:\n def __init__(self, x, y):\n self.x = x\n self.y = y\n\n    def distance(self, p2):\n        return math.sqrt((self.x-p2.x)**2 + (self.y-p2.y)**2)\n\nclass Polygon:\n def __init__(self):\n self.vertices = []\n\n def add_point(self, point):\n self.vertices.append((point))\n\n    def perimeter(self):\n        perimeter = 0\n        points = self.vertices + [self.vertices[0]]\n        for i in range(len(self.vertices)):\n            perimeter += points[i].distance(points[i+1])\n        return perimeter\n```", "```py\n>>> square = Polygon()\n>>> square.add_point(Point(1,1))\n>>> square.add_point(Point(1,2))\n>>> square.add_point(Point(2,2))\n>>> square.add_point(Point(2,1))\n>>> square.perimeter()\n4.0  \n```", "```py\n>>> square = [(1,1), (1,2), (2,2), (2,1)]\n>>> perimeter(square)\n4.0  \n```", "```py\ndef __init__(self, points=None): \n    points = points if points else [] \n    self.vertices = [] \n    for point in points: \n        if isinstance(point, tuple): \n            point = Point(*point) \n        self.vertices.append(point) \n```", "```py\nclass Color: \n    def __init__(self, rgb_value, name): \n        self._rgb_value = rgb_value \n        self._name = name \n\n def set_name(self, name): \n        self._name = name \n\n def get_name(self): \n        return self._name \n```", "```py\n>>> c = Color(\"#ff0000\", \"bright red\")\n>>> c.get_name()\n'bright red'\n>>> c.set_name(\"red\")\n>>> c.get_name()\n'red'  \n```", "```py\nclass Color: \n    def __init__(self, rgb_value, name): \n        self.rgb_value = rgb_value \n        self.name = name \n\nc = Color(\"#ff0000\", \"bright red\") \nprint(c.name) c.name = \"red\"\nprint(c.name)\n```", "```py\ndef set_name(self, name): \n    if not name: \n        raise Exception(\"Invalid Name\") \n    self._name = name \n```", "```py\nclass Color: \n    def __init__(self, rgb_value, name): \n        self.rgb_value = rgb_value \n        self._name = name \n\n    def _set_name(self, name): \n        if not name: \n            raise Exception(\"Invalid Name\") \n        self._name = name \n\n    def _get_name(self): \n        return self._name \n\n name = property(_get_name, _set_name) \n```", "```py\n>>> c = Color(\"#0000ff\", \"bright red\")\n>>> print(c.name)\nbright red\n>>> c.name = \"red\"\n>>> print(c.name)\nred\n>>> c.name = \"\"\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"setting_name_property.py\", line 8, in _set_name\n raise Exception(\"Invalid Name\")\nException: Invalid Name  \n```", "```py\nclass Silly:\n    def _get_silly(self):\n        print(\"You are getting silly\")\n        return self._silly\n\n    def _set_silly(self, value):\n        print(\"You are making silly {}\".format(value))\n        self._silly = value\n\n    def _del_silly(self):\n        print(\"Whoah, you killed silly!\")\n        del self._silly\n\n silly = property(_get_silly, _set_silly, _del_silly, \"This is a silly property\")\n```", "```py\n>>> s = Silly()\n>>> s.silly = \"funny\"\nYou are making silly funny\n>>> s.silly\nYou are getting silly\n'funny'\n>>> del s.silly\nWhoah, you killed silly!  \n```", "```py\nHelp on class Silly in module __main__: \n\nclass Silly(builtins.object) \n |  Data descriptors defined here: \n |   \n |  __dict__ \n |      dictionary for instance variables (if defined) \n |   \n |  __weakref__ \n |      list of weak references to the object (if defined) \n |   \n |  silly \n |      This is a silly property \n```", "```py\nclass Foo: \n @property \n    def foo(self): \n        return \"bar\" \n```", "```py\nclass Foo: \n @property \n    def foo(self): \n        return self._foo \n\n @foo.setter \n    def foo(self, value): \n        self._foo = value \n```", "```py\nclass Silly: \n @property \n    def silly(self): \n        \"This is a silly property\" \n        print(\"You are getting silly\") \n        return self._silly \n\n @silly.setter \n    def silly(self, value): \n        print(\"You are making silly {}\".format(value)) \n        self._silly = value \n\n @silly.deleter \n    def silly(self): \n        print(\"Whoah, you killed silly!\") \n        del self._silly \n```", "```py\nfrom urllib.request import urlopen\n\nclass WebPage:\n    def __init__(self, url):\n        self.url = url\n        self._content = None\n\n    @property\n def content(self):\n if not self._content:\n print(\"Retrieving New Page...\")\n self._content = urlopen(self.url).read()\n return self._content\n```", "```py\n>>> import time\n>>> webpage = WebPage(\"http://ccphillips.net/\")\n>>> now = time.time()\n>>> content1 = webpage.content\nRetrieving New Page...\n>>> time.time() - now\n22.43316888809204\n>>> now = time.time()\n>>> content2 = webpage.content\n>>> time.time() - now\n1.9266459941864014\n>>> content2 == content1\nTrue  \n```", "```py\n>>> webpage = WebPage(\"https://dusty.phillips.codes\")\n>>> import time\n>>> now = time.time() ; content1 = webpage.content ; print(time.time() - now)\nRetrieving New Page...\n0.6236202716827393\n>>> now = time.time() ; content2 = webpage.content ; print(time.time() - now)\n1.7881393432617188e-05M\n```", "```py\nclass AverageList(list): \n    @property \n    def average(self): \n        return sum(self) / len(self) \n```", "```py\n>>> a = AverageList([1,2,3,4])\n>>> a.average\n2.5  \n```", "```py\nimport sys \nimport shutil \nimport zipfile \nfrom pathlib import Path \n\nclass ZipReplace: \n    def __init__(self, filename, search_string, replace_string): \n        self.filename = filename \n        self.search_string = search_string \n        self.replace_string = replace_string \n        self.temp_directory = Path(f\"unzipped-{filename}\")\n```", "```py\ndef zip_find_replace(self): \n    self.unzip_files() \n    self.find_replace() \n    self.zip_files() \n```", "```py\n    def unzip_files(self):\n        self.temp_directory.mkdir()\n        with zipfile.ZipFile(self.filename) as zip:\n            zip.extractall(self.temp_directory)\n\n    def find_replace(self):\n        for filename in self.temp_directory.iterdir():\n            with filename.open() as file:\n                contents = file.read()\n            contents = contents.replace(self.search_string, self.replace_string)\n            with filename.open(\"w\") as file:\n                file.write(contents)\n\n    def zip_files(self):\n        with zipfile.ZipFile(self.filename, \"w\") as file:\n            for filename in self.temp_directory.iterdir():\n                file.write(filename, filename.name)\n        shutil.rmtree(self.temp_directory)\n\nif __name__ == \"__main__\":\n    ZipReplace(*sys.argv[1:4]).zip_find_replace()\n```", "```py\n$python zipsearch.py hello.zip hello hi  \n```", "```py\nimport sys\nimport shutil\nimport zipfile\nfrom pathlib import Path\n\nclass ZipProcessor:\n    def __init__(self, zipname):\n        self.zipname = zipname\n        self.temp_directory = Path(f\"unzipped-{zipname[:-4]}\")\n\n    def process_zip(self):\n        self.unzip_files()\n        self.process_files()\n        self.zip_files()\n\n    def unzip_files(self):\n        self.temp_directory.mkdir()\n        with zipfile.ZipFile(self.zipname) as zip:\n            zip.extractall(self.temp_directory)\n\n    def zip_files(self):\n        with zipfile.ZipFile(self.zipname, \"w\") as file:\n            for filename in self.temp_directory.iterdir():\n                file.write(filename, filename.name)\n        shutil.rmtree(self.temp_directory)\n```", "```py\nclass ZipReplace(ZipProcessor):\n    def __init__(self, filename, search_string, replace_string):\n        super().__init__(filename)\n        self.search_string = search_string\n        self.replace_string = replace_string\n\n    def process_files(self):\n        \"\"\"perform a search and replace on all files in the\n        temporary directory\"\"\"\n        for filename in self.temp_directory.iterdir():\n            with filename.open() as file:\n                contents = file.read()\n            contents = contents.replace(self.search_string, self.replace_string)\n            with filename.open(\"w\") as file:\n                file.write(contents)\n```", "```py\nfrom PIL import Image \n\nclass ScaleZip(ZipProcessor): \n\n    def process_files(self): \n        '''Scale each image in the directory to 640x480''' \n        for filename in self.temp_directory.iterdir(): \n            im = Image.open(str(filename)) \n            scaled = im.resize((640, 480)) \n            scaled.save(filename)\n\nif __name__ == \"__main__\": \n    ScaleZip(*sys.argv[1:4]).process_zip() \n```", "```py\nclass Document: \n    def __init__(self): \n        self.characters = [] \n        self.cursor = 0 \n        self.filename = '' \n\n    def insert(self, character): \n        self.characters.insert(self.cursor, character) \n        self.cursor += 1 \n\n    def delete(self): \n        del self.characters[self.cursor] \n\n    def save(self): \n        with open(self.filename, 'w') as f: \n            f.write(''.join(self.characters)) \n\n    def forward(self): \n        self.cursor += 1 \n\n    def back(self): \n        self.cursor -= 1 \n```", "```py\n>>> doc = Document()\n>>> doc.filename = \"test_document\"\n>>> doc.insert('h')\n>>> doc.insert('e')\n>>> doc.insert('l')\n>>> doc.insert('l')\n>>> doc.insert('o')\n>>> \"\".join(doc.characters)\n'hello'\n>>> doc.back()\n>>> doc.delete()\n>>> doc.insert('p')\n>>> \"\".join(doc.characters)\n'hellp'  \n```", "```py\nclass Cursor:\n    def __init__(self, document):\n        self.document = document\n        self.position = 0\n\n    def forward(self):\n        self.position += 1\n\n    def back(self):\n        self.position -= 1\n\n    def home(self):\n        while self.document.characters[self.position - 1].character != \"\\n\":\n            self.position -= 1\n            if self.position == 0:\n                # Got to beginning of file before newline\n                break\n\n    def end(self):\n        while (\n            self.position < len(self.document.characters)\n            and self.document.characters[self.position] != \"\\n\"\n        ):\n            self.position += 1\n```", "```py\nclass Document: \n    def __init__(self): \n        self.characters = [] \n        self.cursor = Cursor(self) \n        self.filename = '' \n\n       def insert(self, character): \n        self.characters.insert(self.cursor.position, \n                character) \n        self.cursor.forward() \n\n    def delete(self): \n        del self.characters[self.cursor.position] \n\n    def save(self):\n        with open(self.filename, \"w\") as f:\n            f.write(\"\".join(self.characters))\n```", "```py\n>>> d = Document()\n>>> d.insert('h')\n>>> d.insert('e')\n>>> d.insert('l')\n>>> d.insert('l')\n>>> d.insert('o')\n>>> d.insert('\\n')\n>>> d.insert('w')\n>>> d.insert('o')\n>>> d.insert('r')\n>>> d.insert('l')\n>>> d.insert('d')\n>>> d.cursor.home()\n>>> d.insert(\"*\")\n>>> print(\"\".join(d.characters))\nhello\n*world  \n```", "```py\n@property \ndef string(self): \n    return \"\".join(self.characters) \n```", "```py\n>>> print(d.string)\nhello\nworld  \n```", "```py\nclass Character: \n    def __init__(self, character, \n            bold=False, italic=False, underline=False): \n        assert len(character) == 1 \n        self.character = character \n        self.bold = bold \n        self.italic = italic \n        self.underline = underline \n\n    def __str__(self): \n        bold = \"*\" if self.bold else '' \n        italic = \"/\" if self.italic else '' \n        underline = \"_\" if self.underline else '' \n        return bold + italic + underline + self.character \n```", "```py\ndef insert(self, character): \n    if not hasattr(character, 'character'): \n        character = Character(character) \n```", "```py\n    @property \n    def string(self): \n        return \"\".join((str(c) for c in self.characters)) \n```", "```py\n    def home(self): \n        while self.document.characters[ \n                self.position-1].character != '\\n': \n            self.position -= 1 \n            if self.position == 0: \n                # Got to beginning of file before newline \n                break \n\n    def end(self): \n        while self.position < len( \n                self.document.characters) and \\ \n                self.document.characters[ \n                        self.position \n                        ].character != '\\n': \n            self.position += 1 \n```", "```py\n>>> d = Document()\n>>> d.insert('h')\n>>> d.insert('e')\n>>> d.insert(Character('l', bold=True))\n>>> d.insert(Character('l', bold=True))\n>>> d.insert('o')\n>>> d.insert('\\n')\n>>> d.insert(Character('w', italic=True))\n>>> d.insert(Character('o', italic=True))\n>>> d.insert(Character('r', underline=True))\n>>> d.insert('l')\n>>> d.insert('d')\n>>> print(d.string)\nhe*l*lo\n/w/o_rld\n>>> d.cursor.home()\n>>> d.delete()\n>>> d.insert('W')\n>>> print(d.string)\nhe*l*lo\nW/o_rld\n>>> d.characters[0].underline = True\n>>> print(d.string)\n_he*l*lo\nW/o_rld  \n```"]