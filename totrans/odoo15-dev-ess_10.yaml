- en: '[*Chapter 10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287): Backend Views
    – Designing the User Interface'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter describes how to create views to implement the user interface for
    business applications. The Odoo user interface starts with the menu items and
    various actions being executed on menu clicks, so these are the first components
    we will learn about.
  prefs: []
  type: TYPE_NORMAL
- en: The most used view type is the *form view*, and there are a few elements we
    must learn about, from organizing the disposition of the elements in the view
    to understanding all the options that are available for fields and buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Some other frequently used views include list views and search views. Finally,
    other view types are available that are useful for specific purposes, such as
    the pivot and graph views. An overview of these will be provided toward the end
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding menu items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding window actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the form view's structure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding dynamic view elements
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring list views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring search views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the other available view types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should be familiar with all the Odoo view types
    and have the resources to use them. In particular, you will be confident with
    designing non-trivial form views and providing an adequate user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We'll continue working with the `library_checkout` add-on module. The model
    layer for it is already complete; now, it needs the view layer for the user interface.
  prefs: []
  type: TYPE_NORMAL
- en: The code in this chapter is based on the code that we created in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*. The necessary code can be found
    in this book's GitHub repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials](https://github.com/PacktPublishing/Odoo-15-Development-Essentials),
    in the `ch10` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Adding menu items
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Menu items are the starting point for user interface navigation. They form a
    hierarchical structure, where the top-level items represent applications, and
    the level below is the application main menu. Further sub-menu levels can be added.
  prefs: []
  type: TYPE_NORMAL
- en: Menu items with no sub-menus are *actionable* and can trigger an action that
    tells the web client what to do, such as opening a view.
  prefs: []
  type: TYPE_NORMAL
- en: Menu items are stored in the `ir.ui.menu` model and can be browsed via the **Settings**
    | **Technical** | **User Interface** | **Menu Items** menu.
  prefs: []
  type: TYPE_NORMAL
- en: The `library_app` add-on module created a top-level menu for the library books,
    while the `library_checkout` add-on module added the menu items for the checkouts
    and checkout stages. These are both implemented in `library_checkout/views/library_menu.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is the XML for the checkout menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code uses a `<menuitem>` shortcut element, which is an abbreviated
    way to create a menu record that's more convenient than a `<record model="ir.ui.menu">`
    element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most used `<menuitem>` attributes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is the menu item''s title and is present in the user interface.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`action` is the XML ID of the action to run when clicking on the menu item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent` is the XML ID of the parent menu item. In this case, the parent was
    created in another module, so it needs to be referenced using the complete XML
    ID; that is, `<module>.<XML ID>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some other attributes are also available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sequence` sets a number to order the presentation of the menu items; for example,
    `sequence="10"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups` is a comma-separated list of XML IDs of the security groups that have
    access to the menu item; for example, `groups="library_app.library_group_user,library_app.library_group_manager"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web_icon` is the path to the icon to use. It''s only relevant for top-level
    menu items in the enterprise edition. The path value should follow the `web_icon="library_app,static/description/icon.png"`
    format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Menu items can run an action, as identified by the `action` attribute, and in
    most cases, this will be a **window action**. The next section will explain how
    to create actions and what they are capable of.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding window actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A **window action** on a menu gives the web client instructions on what to do,
    such as opening a view, and can be used in menu items or buttons in views.
  prefs: []
  type: TYPE_NORMAL
- en: Window actions identify the model to use and the views to present in the user
    interface. They can also filter the available records using a `domain` filter
    and can set default values and filters using the `context` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Window actions are stored in the `ir.actions.act_window` model and can be browsed
    by going to the **Settings** | **Technical** | **Actions** | **Window Actions**
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `library_checkout/views/library_menu.xml` file contains the definition
    for the window action that''s used by the checkout menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A window action is an `ir.actions.act_window` record. The most important fields
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is the title that will be displayed on the view that''s opened through
    the action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`res_model` is the identifier of the target model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_mode` is a comma-separated list of the view types to make available.
    The first in the list is the one to open by default.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The other relevant window actions fields are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target` defaults to `current` and opens the view inline in the main content
    area. If it''s set to `new`, it will open the view in a pop-up dialog window;
    for example, `target="new"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` sets context information on the target views, which can set default
    values or activate filters, among other things; for example, `<field name="context">{''default_user_id'':
    uid}</field>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain` is a domain expression that forces a filter for the records that can
    be browsed in the opened views; for example, `domain="[(''user_id'', ''='', uid)]"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` is the number of records for each page in the list view; for example,
    `limit="80"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_id` is a reference to a particular view to be used. It can''t be used
    together with `view_mode`. It is often used together with `target="new"`, to open
    a particular form as a popup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Until Odoo 12, the `<act_window>` shortcut element could be used to create window
    actions. This was removed in Odoo 13\. Now, window actions must be created using
    a `<record model="ir.actions.act_window">` element.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In this chapter, we will add view types for the `library.checkout` model. By
    doing so, we will showcase the other available view types, other than form and
    tree/list views.
  prefs: []
  type: TYPE_NORMAL
- en: 'The view types to be made available must be indicated by the window action.
    So, let''s edit the `library_checkout/views/library_menu.xml` file to add the
    new view types, as highlighted in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: These changes can't be made yet. The definitions of the corresponding view types
    should be implemented before they are added to the window action's `view_mode`.
  prefs: []
  type: TYPE_NORMAL
- en: Other than the menu items or view buttons, actions can also be used in the **Action**
    context menu, which is available near the search box. The next section explains
    this in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Adding options to the Action context menu
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Window actions can also be used from the **Action** menu button, available
    at the top of form views, and also in list views when records are selected:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – The Action context menu'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.1_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.1 – The Action context menu
  prefs: []
  type: TYPE_NORMAL
- en: This menu is contextual because the action will apply to the record or records
    currently selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have an action available in the **Action** menu, two more fields have to
    be set on the window action:'
  prefs: []
  type: TYPE_NORMAL
- en: '`binding_model_id` is a reference to the model to use the action for; for example,
    `<field name="binding_model_id" ref="model_library_checkout" />`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`binding_view_types` can be used to limit the option''s visibility to specific
    view types, such as `form` or `list`; for example, `<field name="binding_view_types">form,list</field>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'An example of this has already been implemented in the `library_checkout` module,
    in the `wizard/checkout_mass_message_wizard_view.xml` file. This has been copied
    here for reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The settings that are related to binding to the **Action** menu are highlighted
    in the previous code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot illustrates the corresponding action menu item:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – The Send Message action menu options'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.2_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.2 – The Send Message action menu options
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 13
  prefs: []
  type: TYPE_NORMAL
- en: The action binding fields were changed in Odoo 13\. Until Odoo 12, `src_model`
    set the binding and used the model identifier, `library.checkout`, for example.
    It is available in the form view, and it can also be made available in the list
    view by setting `multi` to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: Once a window action has been triggered, the corresponding views are opened.
    The most used view types are form and list. The next section details how to create
    form views.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the form view structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Form views are the main way users can interact with data records. Form views
    can either follow a simple layout or a business document layout, similar to a
    paper document. In this section, we'll learn how to design these business document
    views and how to use the elements and widgets that are available.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227), *Business
    Logic – Supporting Business Processes*, we created a library checkout model and
    prepared a basic form for it. We will revisit and enhance it in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows what the form view will look like when we''re
    done:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – The enhanced Checkouts form view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.3_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.3 – The enhanced Checkouts form view
  prefs: []
  type: TYPE_NORMAL
- en: You can refer to this screenshot while we gradually add the different elements
    throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Using business document views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Historically, organizations use paper forms to support their internal processes.
    Business application models support digital versions of these paper forms, and
    in the process, they can add automation and make operations more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: For a more intuitive user interface, form views can mimic these paper documents,
    helping users to visualize processes they are used to running on paper forms.
  prefs: []
  type: TYPE_NORMAL
- en: For example, for the **Library** app, book checkouts are probably a process
    where a paper form has to be filled in. It is probably a good idea to let the
    checkout form have a layout that looks like a paper document.
  prefs: []
  type: TYPE_NORMAL
- en: 'A business document is a form that contains two elements: a `<head>` section
    and a `<sheet>` section. `head` contains buttons and widgets to control the document''s
    business workflow, while `sheet` contains the actual document content. After the
    `sheet` section, we can also have the message and activity widgets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add this structure to the checkout form, start by editing the `library_checkout/views/checkout_view.xml`
    file and changing the form view record to the following basic skeleton:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The view name is optional and automatically generated if it's missing. So, for
    simplicity, the `<field name="name">` element was omitted from the preceding view
    record.
  prefs: []
  type: TYPE_NORMAL
- en: The `<head>` and `<sheet>` sections are empty for now, and will be expanded
    next.
  prefs: []
  type: TYPE_NORMAL
- en: The messaging section at the bottom uses the widgets provided by the `mail`
    add-on module, as explained in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*.
  prefs: []
  type: TYPE_NORMAL
- en: The first section to check is the form header.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a header section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The header at the top usually features the steps that the document will move
    through in its life cycle and the related action buttons. These action buttons
    are regular form buttons, and the button for moving on will usually be highlighted,
    to help the user.
  prefs: []
  type: TYPE_NORMAL
- en: Adding header buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let's start by adding a button to the currently empty header section.
  prefs: []
  type: TYPE_NORMAL
- en: 'While editing the `<header>` section in the form view, add a button to move
    a checkout to the `done` state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: By using the preceding code, the `Return Books` button is added to the header
    with `type="object"`, meaning that a model method is called. `name="button_done"`
    declares the method name to call.
  prefs: []
  type: TYPE_NORMAL
- en: '`class="oe_highlight"` is used to highlight the button. When we have several
    buttons to choose from, the main or more usual course of action can be highlighted
    to help users.'
  prefs: []
  type: TYPE_NORMAL
- en: The `attrs` attribute is used to have the button visible only in the states
    where it makes sense. It should be visible in the `open` state, so it should be
    set to invisible for the `new`,  `done`, and `cancel` states.
  prefs: []
  type: TYPE_NORMAL
- en: The condition to do this uses the `state` field, which otherwise is not used
    on the form. For the `attrs` condition to work, the `state` field needs to be
    loaded into the web client. To ensure this, it was added as an invisible field.
  prefs: []
  type: TYPE_NORMAL
- en: In this particular case, the special `state` field name is being used, and the
    visibility condition to be implemented with `attrs` can be achieved with the simpler
    `states` attribute. The `states` attribute lists the states where the element
    will be visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using `states` instead of `attrs`, the button will only be visible in the
    `open` state and will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `attrs` and `states` element visibility features can also be used on other
    view elements, such as fields. We'll explore them in more detail later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this button to work, the method that''s being called must be implemented.
    For this, in the `library_checkout/models/library_checkout.py` file, add the following
    code to the `checkout` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: First, the code looks up `done` state. It will be used to set the records to
    that stage.
  prefs: []
  type: TYPE_NORMAL
- en: The `self` recordset will usually be a single record, but the API allows it
    to be called for a multi-record recordset, so this possibility should be addressed.
    This can be done with a `for` loop on `self`. Then, for each record in the `self`
    recordset, the `stage_id` field must be set to the `done` stage.
  prefs: []
  type: TYPE_NORMAL
- en: Alongside the buttons, the header can feature a status bar widget to present
    the available *stages* or *states*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a status bar pipeline
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another helpful element in the header is a pipeline diagram presenting the process
    steps and where the current document is at. This can be based either on a *stages*
    or a *states* list. This pipeline widget can be clickable or not, in case we want
    the changes to only be made through buttons.
  prefs: []
  type: TYPE_NORMAL
- en: 'The status bar widget is added with a `<field>` element using the `statusbar`
    widget. The checkout model has the `stage_id` field that we will use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `statusbar` widget can be used either with a **state** selection field or
    a **stage** many-to-one field. These two kinds of fields can be found across several
    Odoo core modules.
  prefs: []
  type: TYPE_NORMAL
- en: The `clickable` option allows the user to change the document stage by clicking
    on the status bar. Having it enabled provides flexibility to the user. But there
    are also cases where we need more control over the workflow, and require the users
    to progress through the stages using only the available action buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 12
  prefs: []
  type: TYPE_NORMAL
- en: 'Until Odoo 11, the clickable option was a field attribute, `<field widget="statusbar"
    clickable="True" />`. In Odoo 12, it was converted into a widget option, `<field
    widget="statusbar" options="{''clickable'': True}" />`.'
  prefs: []
  type: TYPE_NORMAL
- en: The `fold_field` option is used to allow less important stages, such as *canceled*,
    to be hidden (folded) in a `fold_field` is set with the field name that's used
    for this. In this case, it is named `fold`.
  prefs: []
  type: TYPE_NORMAL
- en: Using states instead of stages
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The **stage** is a many-to-one field that uses a supporting model to set up
    the steps of the process. It is flexible, can be configured by end users to fit
    their specific business process, and is perfect for supporting Kanban boards.
    The library checkouts model is using it.
  prefs: []
  type: TYPE_NORMAL
- en: The **state** is a closed selection list featuring fixed process steps, such
    as **New**, **In Progress**, and **Done**. It can be used in business logic since
    the available states can't change. But it can't be configured by end users.
  prefs: []
  type: TYPE_NORMAL
- en: Each of the approaches has pros and cons. It is possible to benefit from the
    best of both options by using stages and having each stage mapped into a state.
    The checkout model implemented this, adding a state field in the checkout stages
    model, which is also directly available in the checkout model through a related
    field.
  prefs: []
  type: TYPE_NORMAL
- en: If a model is using states only, the status bar pipeline can also be used, with
    the `statusbar` widget. However, the `fold_field` option is not available; instead,
    the `statusbar_visible` attribute can be used, listing the states to make visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the status bar with a state `field` looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the previous code is not used in the `library_checkout` module.
    Since it supports the more flexible stages, we prefer to use them on the user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we're are done with the header section, let's look at the main form
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Designing the document sheet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The sheet canvas is the main area of the form and is where the actual data elements
    are placed. It is designed to look like an actual paper document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, a document sheet structure will contain the following areas:'
  prefs: []
  type: TYPE_NORMAL
- en: A document title at the top
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A button box at the top-right corner
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Document header data fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A notebook at the bottom, for additional fields that can be organized into tabs
    or pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The document will often contain detailed lines of code. These are usually presented
    on the notebook's first page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the expected XML structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: After the sheet, we usually have the Chatter widget, which contains the document
    followers, discussion messages, and planned activities.
  prefs: []
  type: TYPE_NORMAL
- en: Let's go through each of these areas. The button box will be discussed later,
    so next, we will discuss the header title.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a header title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The header title will usually display the document's title in large letters.
    It may be followed by a subtitle and may also have an image next to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, a couple of fields need to be added to the checkout model. A field needs
    to be used as the title, and an image needs to be used to represent the borrower.
    Edit the `library_checkout/models/library_checkout.py` file and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The header title goes inside a `<div class="oe_title">` element. Regular HTML
    elements, such as `div`, `span`, `h1`, and `h3`, can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following code, the `<sheet>` element has been expanded to include the
    title, plus some additional fields as subtitles:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding XML render includes the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A button box `<div>` element. It is empty now but can be used to add smart buttons.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An image field, for `member_image`, using an avatar-like image widget.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A `<div>` element containing the document title elements. Inside the title,
    there is the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<label>` for the `name` field, which is only visible in edit mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `name` field, which is rendered as an HTML `<h1>` heading.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<h3>` subtitle heading containing the `member_id` field. This is only visible
    in read mode. The `<field>` tag uses `oe_inline` to let the HTML elements manage
    the text flow.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fields outside a `<group>` element don't have labels rendered for them. The
    preceding XML has no `<group>` element, so labels need to be explicitly added.
  prefs: []
  type: TYPE_NORMAL
- en: After the title element, there will usually be header fields, organized into
    groups.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the form content using groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The main content of the form should be organized using `<group>` tags.
  prefs: []
  type: TYPE_NORMAL
- en: The `<group>` tag inserts two columns in the canvas. Fields that are added inside
    a group use these two columns – the first for the field label and the second for
    the field value widget. Adding more fields to the group will stack them vertically
    as new fields are added in a new row.
  prefs: []
  type: TYPE_NORMAL
- en: A common pattern is to have two columns of fields, side by side. You can do
    this by adding two `<group>` tags nested into a top group.
  prefs: []
  type: TYPE_NORMAL
- en: 'Continuing with our form view, we''ll use this to add the main content, after
    the title''s `<div>` section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The top `<group>` element creates two columns in the canvas. Each of the two
    nested `<group>` elements uses one of these columns. The first nested group uses
    the left column, while the second group takes the right column.
  prefs: []
  type: TYPE_NORMAL
- en: The `<group>` elements were assigned a `name`. This is not required but is recommended
    so that the module is easier to extend.
  prefs: []
  type: TYPE_NORMAL
- en: The `<group>` element can also have a `string` attribute, which is used to display
    title text for it.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs: []
  type: TYPE_NORMAL
- en: The `string` attribute cannot be used as an anchor for inheritance anymore.
    This is because the corresponding text can be translated, and this can break inherited/extension
    views. The `name` attribute should be used instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following elements can be used to adjust the view layout:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<newline>` element can be used to force a new line so that the next element
    is rendered in the next row's first column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<separator>` element can be added to add section titles. A title text can
    be set using the `string` attribute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `col` and `colspan` attributes provide additional control over the grid
    layout:'
  prefs: []
  type: TYPE_NORMAL
- en: The `col` attribute is used on `<group>` elements to customize the number of
    columns it contains. By default, a `<group>` element contains two columns, but
    that can be changed to any other number. Even numbers work better since, by default,
    each field that's added takes up two columns – one for the label and one for the
    value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `colspan` attribute can be used on group-contained elements to set a specific
    number of columns they should take. By default, a field takes two columns.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following code shows an alternative version of the top group element and
    uses `col="4"` to present the four fields in two columns:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Notice that the order of the fields is different because the fields are placed
    from left to right, and then from top to bottom. The `<span colspan="2">` element
    was used to occupy the two first columns of the second row so that the `close_date`
    field takes the last two columns.
  prefs: []
  type: TYPE_NORMAL
- en: Some forms also feature a notebook section to organize the additional fields
    on different pages.
  prefs: []
  type: TYPE_NORMAL
- en: Adding tabbed notebooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The notebook element is another way to organize the form's content. It is a
    container with multiple tabbed pages. These can be used to keep less-used data
    out of sight until it's needed or to organize a large number of fields by topic.
  prefs: []
  type: TYPE_NORMAL
- en: 'The checkout form will have a notebook element, and the first page will contain
    the list of borrowed books. For this, after the `<group name="group_top">` element,
    which we added in the previous section, include the following XML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This notebook contains only one page. To add more, just include more `<page>`
    elements inside the `<notebook>` element. The page canvas does not render field
    labels by default. For that to happen, the fields should be placed inside a `<group>`
    section, just like for the form main canvas.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the one-to-many `line_ids` field was added inside the page, with
    no `<group>` element, so no label will be rendered for it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `page` element supports the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string`, for the page title. This is required.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` is a dictionary for mapping the `invisible` and `required` attribute
    values to the result of a domain expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`accesskey`, an HTML access key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section discussed the typical layout for a form view, as well as the most
    important elements to use for this. The most important elements are the data fields.
    The next section discusses them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Using fields
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Inside a form or list view, fields widgets are the way to present and edit data
    from model fields.
  prefs: []
  type: TYPE_NORMAL
- en: View fields have a few attributes available to them. Most of these attribute
    values have defaults that are taken from the model definition, but these can be
    overridden in the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a quick reference for the common field attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is the field name in the model and identifies the field that''s being
    rendered by this element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string` is the label text to be used. It overrides the model definition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help` provides some tooltip help text that''s shown when the mouse is hovered
    over the field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`placeholder` provides suggestion text to be displayed inside the field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`widget` sets a specific widget to be used to render the field. The available
    widgets will be discussed later in this section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`options` is a JSON data structure that''s used to pass additional options
    to the widget. The values to use depend on the widget being used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Class` is a comma-separated list of CSS classes to use for the field HTML
    rendering process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`nolabel="True"` prevents the automatic field label from being presented. It
    only makes sense for fields inside a `<group>` element and is often used along
    with a `<label for="...">` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`invisible="True"` makes the field not visible, but its data is fetched from
    the server and is available on the form. Note that forms can''t write on invisible
    fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`readonly="True"` makes the field read-only on the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`required="True"` makes the field mandatory on the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following special attributes are only supported by specific field types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`password="True"` is used for text fields. It is displayed as a password field,
    masking the characters that are typed in.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename` is used for binary fields and is the name of the model field to
    be used for the name of the uploaded file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Two more topics are worth further discussion. One is how to have additional
    control of the field label's presentation, while the other is about using different
    web client widgets for a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying field labels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fields won't automatically render labels unless they're inside a `<group>` element.
    In that case, labels will be explicitly suppressed using `nolabel="True"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Labels can be explicitly added using a `<label for="..."/>` element. This gives
    you more control over where to display field labels. The following code was used
    in the form title:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `for` attribute identifies the field we should get the label text from.
    The optional `string` attribute can set specific text for the label. CSS classes
    can also be used. The previous code used the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class="oe_edit_only"` makes the element visible in edit mode only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class="oe_read_only"` makes the element visible in read mode only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This can be used to control how field labels are presented. How the field data
    is presented can also be adjusted using different widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing field widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Field content is presented using a web client widget. This can influence the
    way data is presented to the user, as well as the interaction when setting a value
    on the field.
  prefs: []
  type: TYPE_NORMAL
- en: Each field type is displayed using the appropriate default widget. However,
    additional alternative widgets may be available.
  prefs: []
  type: TYPE_NORMAL
- en: Text field widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For text fields, the following widgets can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '`email` renders as an actionable `mailto` HTML link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`phone` renders as an actionable phone HTML link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url` is used to format the text as a clickable URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`html` is used to render the text as HTML content. In edit mode, it features
    a WYSIWYG editor to allow you to format the content without the need to use HTML
    syntax.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Numeric field widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For numeric fields, the following widgets are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`handle` is specifically designed for sequence fields in list views and displays
    a handle to drag lines and reorganize their order.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float_time` formats a `float` field as hours and minutes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`monetary` displays a `float` field as a currency amount. It expects the currency
    that''s used to be in a `currency_id` companion field. If the `currency` field
    has a different name, it can be set with `options="{''currency_field'': ''<field
    name>''}"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progressbar` represents a `float` as a percentage progress bar, which is useful
    for fields representing a completion rate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`percentage` and `percentpie` are other widgets that can be used with float
    fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relation and selection field widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For relation and selection fields, the following widgets are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`many2many_tags` displays values as a list of button-like labels.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`many2many_checkboxes` displays the selectable values as a list of checkboxes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`selection` uses the `selection` field widget for a many-to-one field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`radio` displays the `selection` field options using radio buttons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`priority` represents the `selection` field as a list of clickable stars. The
    selection options are usually numeric digits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`state_selection` shows a traffic light button and is typically used for the
    Kanban state selection list. The `normal` state is gray, `done` is green, and
    any other state is represented in red.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `state_selection` widget was introduced in Odoo 11 and replaces the former
    `kanban_state_selection`, which has been deprecated.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Binary field widgets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'For binary fields, the following widgets are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image` presents the binary data as an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pdf_viewer` presents the binary data in a PDF preview widget (introduced in
    Odoo 12).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relation fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The relation field widget allows you to search for and select a related record.
  prefs: []
  type: TYPE_NORMAL
- en: It also allows you to open the related record's form or navigate to the corresponding
    form and create new records on the fly, also known as **quick create**.
  prefs: []
  type: TYPE_NORMAL
- en: 'These features can be disabled using the `options` field attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `context` and `domain` field attributes are particularly useful in relational
    fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`context` can set default values for related records that are created from
    the field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain` limits the selectable records. A common example is for a field to
    have the selection options depend on the value of another field that''s present
    in the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To-many fields can also use the `mode` attribute to set the view types to use
    to display the records. A `tree` view is used by default, but other options include
    `form`, `kanban`, and `graph`. It can be a comma-separated list of view modes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relation fields can include inline specific view definitions to use. These
    are declared as nested view definitions, inside the `<field>` element. For example,
    the `line_ids` checkout can define a specific list and form views for these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The line list will use the inline `<tree>` definition provided. When you click
    on a line, a form dialog will appear and use the structure in the inline `<form>`
    definition.
  prefs: []
  type: TYPE_NORMAL
- en: We've seen everything that can be done with fields. The next most important
    view element is buttons, which are used to run actions.
  prefs: []
  type: TYPE_NORMAL
- en: Using buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Buttons allow the user to trigger actions, such as opening another view or running
    business logic in a server function. They were introduced previously in this chapter,
    when we discussed the form header, but they can also be added anywhere in form
    and list views.
  prefs: []
  type: TYPE_NORMAL
- en: 'Buttons support the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string` is the button text label, or the HTML `alt` text when an icon is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` is the type of action to perform. Possible values include `object`,
    to call a Python method, or `action`, to run a window action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` identifies the specific action to perform, according to the chosen type:
    either a model method name or the database ID of a window action to run. The `%(<xmlid>)d`
    formula can be used to translate an XML ID into the necessary database ID when
    the view is being loaded.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args` is used when `type="object"` is used to pass additional parameters to
    the method call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` sets the values on the context. This could be used in the called
    method or affect the view that''s opened by the windows action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`confirm` is the text for a confirmation message box when the button is clicked.
    This is displayed before the action is run.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`special="cancel"` is used on wizard forms to add a **Cancel** button, which
    is used for closing the form without performing any action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon` is an icon image to be shown in the button. The available icons are
    from the Font Awesome set and they should be specified using the corresponding
    CSS class, such as `icon="fa-question"`. For an icon reference, check out [https://fontawesome.com/](https://fontawesome.com/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Before Odoo 11, the button icons were images that originated from the GTK client
    library and were limited to the ones available in `addons/web/static/src/img/icons`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The workflow engine was deprecated and removed in Odoo 11\. In previous versions,
    where workflows were supported, buttons could trigger workflow engine signals
    using `type="workflow"`. In this case, the `name` attribute was supposed to have
    a workflow signal name.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A particular kind of button that's found at the top right area of some forms
    is called a **smart button**. Let's have a closer look at it.
  prefs: []
  type: TYPE_NORMAL
- en: Using smart buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's not uncommon for document forms to have a smart button area in the top-right
    section. Smart buttons are shown as rectangles with a statistic indicator that
    can be followed through when clicked.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Odoo UI pattern is to have an invisible box for smart buttons. This button
    box is usually the first element in `<sheet>` and looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The container for the buttons is just a `div` element with the `oe_button_box`
    class. In Odoo versions before 11.0, the `oe_right` class may also be needed to
    ensure that the button box stays aligned to the right-hand side of the form.
  prefs: []
  type: TYPE_NORMAL
- en: For the library checkout module, a smart button will be added for the still
    open checkouts that are being made by this library member. The button should present
    a statistic with the count of those checkouts and, when clicked, should open a
    checkout list that contains those items.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the button statistic, a computed field needs to be created in the `library.checkout`
    model, in the `library_checkout/models/library_checkout.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The preceding computation loops through each checkout record to compute and
    runs a search query for that member, counting the number of open checkouts.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding implementation goes against a performance principle: don''t do
    record search operations inside loops.'
  prefs: []
  type: TYPE_NORMAL
- en: For performance optimization, the search operation should be done in bulk, before
    the loop, and the result should be used inside the loop. An example of this implementation
    is shown next. This involves non-trivial code, so feel free to skip it if you
    feel it is too difficult to understand right now.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `read_group()` method can be used to get the grouped data. It returns a
    list of `dict` rows, such as `[{''member_id_count'': 1, ''member_id'': (1, ''John
    Doe''), …), …]`. It is hard to look up a `member_id` in this data structure. This
    lookup can become a trivial operation if the list of rows is converted into a
    dictionary that''s mapping a `member_id` to a record count.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the alternative implementation, using these techniques:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that there is a field computing the number to display, the smart button
    can be added to the view. Right at the top of the `<sheet>` section, replace the
    button box placeholder we added previously with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `button` element itself is a container, and fields for displaying statistics
    should be added inside it. These statistics are regular fields that use a specific
    `statinfo` widget. The number of open checkouts is presented using the `count_checkouts`
    field, inside the button definition.
  prefs: []
  type: TYPE_NORMAL
- en: The smart button must have the `class="oe_stat_button"` CSS style and should
    have an icon set with the `icon` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, it contains `type="action"`, meaning that a button runs a *window
    action*, as identified by the `name` attribute. The `%(action_library_checkout)d`
    expression returns the database ID for the action to run. This *window action*
    opens the checkout list. To ensure only the relevant records are displayed there,
    the `domain` attribute is used. And if a new record is created on that view, it
    is convenient that the current member is set as a default value. This can be done
    using the `default_member_id` key in the `context` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'For reference, these are the attributes that can be used with smart buttons:'
  prefs: []
  type: TYPE_NORMAL
- en: '`class="oe_stat_button"` renders a rectangle instead of a regular button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon` sets the icon to use, as chosen from the *Font Awesome* set. Visit [http://fontawesome.com](http://fontawesome.com)
    to browse the available icons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` and `name` are the button type and the name of the action to trigger,
    respectively. For smart buttons, the type will usually be `action` for a *window
    action*, while `name` will be the ID of the action to execute. `"%(action-xmlid)d"`
    can be used to convert an XML ID into the needed database ID.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string` adds label text to the button. It wasn''t used in the preceding code
    example because the field is providing a text label.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` can be used to set default values on the target view, for new records
    that are created on the view that''s being navigated from the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`help` adds a help tooltip that''s displayed when the mouse pointer hovers
    over the button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than buttons and smart buttons, dynamic elements can be added to views
    to change the values or visibility of elements. This will be discussed in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding dynamic view elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: View elements can dynamically change their appearance or behavior, depending
    on the field values. Field values can be dynamically set values of domain filters
    on other form fields through the *onchange* mechanism. These features will be
    discussed next.
  prefs: []
  type: TYPE_NORMAL
- en: Using onchange events
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **onchange** mechanism allows us to trigger server logic while the user
    is modifying data on an unsaved form. For example, when setting the product field,
    a unit price on the same form can be automatically set.
  prefs: []
  type: TYPE_NORMAL
- en: In older Odoo versions, the onchange events were defined at the view level,
    but since Odoo 8, they are declared directly on the model layer, without the need
    for any specific view markup. This can be done with methods that use the `@api.onchange('field1',
    'field2', ...)` decorator. It binds onchange logic to the declared fields. The
    onchange model methods were discussed in more detail in [*Chapter 8*](B16119_08_Final_PD_ePub.xhtml#_idTextAnchor227),
    *Business Logic – Supporting Business Processes*, and an example was discussed
    there.
  prefs: []
  type: TYPE_NORMAL
- en: The onchange mechanism also takes care of automatically recalculating the computed
    fields, reacting immediately to user input. Continuing with the previous example,
    if the price field is changed, a computed field with the total amount would also
    be automatically updated with the new price information.
  prefs: []
  type: TYPE_NORMAL
- en: Using dynamic attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: View elements can have some attributes react to changes on field values; for
    example, to become visible or mandatory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following attributes can be used to control the visibility of view elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`groups` make an element visible, depending on the security groups the current
    user belongs to. Only the members of the specified groups will see it. It expects
    a comma-separated list of group XML IDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`states` make an element visible, depending on the record''s `state` field.
    It expects a comma-separated list of state values. Of course, the model must have
    a `state` selection field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attrs` can set both the invisible and required attributes based on certain
    conditions. It uses a dictionary, with `invisible`, `readonly`, and `required`
    as the possible keys. These keys map to a domain expression that evaluates to
    true or false.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Here is an example of using `attrs`. To have the `closed_date` field only visible
    in the `done` state, the following code can be used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `invisible` attribute is available in any element, not only fields. For
    example, it can also be used on notebook pages and `group` elements.
  prefs: []
  type: TYPE_NORMAL
- en: The `readonly` and `required` attributes are only available for data fields
    and allow us to implement basic client-side logic, such as making a field mandatory
    while depending on other record values, such as the state.
  prefs: []
  type: TYPE_NORMAL
- en: This closes our discussion of form views. However, there are still a few view
    types to explore. Next, we will discuss list/tree views.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring list views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: List views are probably the most used view type, closely followed by form views.
    List views present records as lines and data fields as columns. By default, they
    are read-only, but they can also be made editable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The list view''s basic definition is simple. It is a sequence of field elements
    inside a `<tree>` element. `library_checkout` already contains a simple list view,
    in the `views/checkout_view.xml` file, that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: A list view can contain fields and buttons, and the attributes that are described
    for forms are also valid in list views.
  prefs: []
  type: TYPE_NORMAL
- en: Moving on from the basics, a few additional features can be used on list views.
    In the next section, we will introduce the new list header section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a list view header section
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Similar to form views, list views can also have a header section, where buttons
    can be added to perform actions on the model. The syntax is the same as for views.
  prefs: []
  type: TYPE_NORMAL
- en: For example, there is a **Send Messages** option available in the **Action**
    menu. This is not directly visible to the users, and it can be made more visible
    as a header button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Editing the tree view to add this button looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The button actions work similarly to the **Action** menu options. The buttons
    are only visible when list records are selected.
  prefs: []
  type: TYPE_NORMAL
- en: New in Odoo 14
  prefs: []
  type: TYPE_NORMAL
- en: The `<header>` element on list views was introduced in Odoo 14\. This feature
    is not available in previous versions.
  prefs: []
  type: TYPE_NORMAL
- en: In terms of the list view's content, rows can use different colors to highlight
    specific conditions to the user, such as a late activity in red. The next section
    explains how to use such decorations.
  prefs: []
  type: TYPE_NORMAL
- en: Using line decoration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following expanded version of the list adds a few additional fields, as
    well as some decorator attributes, to the `<tree>` root element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The tree element is using two decoration attributes by using expressions with
    the `state` field. `decoration-muted` uses gray lines to show the done or canceled
    state. `decoration-bf` highlights the open state with bold lines.
  prefs: []
  type: TYPE_NORMAL
- en: The fields that are used in these expressions must be declared in a `<field>`
    element of the view to ensure that the necessary data is retrieved from the server.
    If it doesn't need to be displayed, it can have the `invisible="1"` attribute
    set on it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The row''s text color and font can change based on the evaluation of a Python
    expression. This can be done through the `decoration–NAME` attributes, which can
    be set with an expression to evaluate. The available attributes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`decoration-bf` sets the font to bold.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-it` sets the font to italic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-muted` sets the text color to gray.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-primary` sets the text color to a dark blue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-success` sets the text color to a light blue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-warning` sets the text color to yellow.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-danger` sets the text color to red.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding decoration names are based on the Bootstrap library. See [https://getbootstrap.com/docs/3.3/css/#helper-classes](https://getbootstrap.com/docs/3.3/css/#helper-classes)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: Other than the decoration attributes, a few others are available to control
    the behavior of the list view.
  prefs: []
  type: TYPE_NORMAL
- en: Other list view attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some of the other relevant attributes of the tree element are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default_order` is used to set a specific sort order for the rows. Its value
    is a comma-separated list of field names that''s compatible with a SQL `ORDER
    BY` clause.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`create`, `delete`, and `edit`, if set to `false` (in lowercase), disable the
    corresponding action on the list view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`editable` makes records editable directly on the list view. Possible values
    include `top` and `bottom`; that is, the location where the new records will be
    added.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These attributes allow you to control the default row order and whether the
    record can be edited directly in the view.
  prefs: []
  type: TYPE_NORMAL
- en: One more relevant feature is the ability to calculate totals and subtotals for
    list view columns, as shown in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding column totals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: List views also support column totals for numeric fields. Summary values can
    be displayed using one of the aggregation attributes that's available — `sum`,
    `avg`, `min`, or `max`.
  prefs: []
  type: TYPE_NORMAL
- en: The aggregation attribute that's used should be set with label text for the
    summary value.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let''s consider that the checkout model has added a field stating
    the number of borrowed books, `num_books`. To see the corresponding total sum
    on the list view, the following field element should be added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The `num_books` field counts the number of borrowed books in each checkout.
    It''s a computed field, and we need to add it to the model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The group subtotal is only available for stored fields. So, in the previous
    example, `store=True` needs to be added if group subtotals are an important feature
    for the library app users.
  prefs: []
  type: TYPE_NORMAL
- en: After form and list views, the next most important UI element is the search
    view, which lets us perform a default search and group by a filter.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring search views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the top right of the view, there is a search box with a few buttons underneath
    it, including **Filters** and **Group By**. When you're typing in the search box,
    you will see suggestions regarding the field to be searched.
  prefs: []
  type: TYPE_NORMAL
- en: The search options that are proposed are configured in the **search view**.
    The current search view can be inspected using the developer menu and by choosing
    the **Edit ControlPanelView** option.
  prefs: []
  type: TYPE_NORMAL
- en: 'Search views are defined through the `<search>` view type. It can provide the
    following types of elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field>` elements to add filter options when typing in the search box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<filter>` elements to add predefined filters under the **Filters** and **Group
    By** buttons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<searchpanel>` element, to include a navigation tree on the left-hand side
    of the user interface.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `<searchpanel>` widget for the list and Kanban views was introduced in Odoo
    13 and is not available in earlier versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To add these search options to the `library_checkout` module, edit the `views/checkout_view.xml`
    file and add the following record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's walk through each of the element types that can be added here. The
    `<field>` element will be explained next.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the <field> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When typing in the search box, the user will see suggestions that will let them
    apply this search to particular fields. These options are defined using `<field>`
    elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, adding the following XML inside the `<search>` element will propose
    searching the text in additional fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This code adds search result suggestions for the `title`, `member`, and `user`
    fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The search `<field>` elements can use the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is the field name to be searched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string` is the text label to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`operator` can be used as a comparison operator that''s different from the
    default one; that is, `=` for numeric fields and `ilike` for the other field types.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filter_domain` sets a specific domain expression to use for the search, providing
    one flexible alternative to the operator attribute. The searched text string is
    referred to in the expression as `self`. A trivial example is `filter_domain="[(''name'',
    ''ilike'', self)]"`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups` makes searching on the field available only to users that belong to
    some security groups. It expects a comma-separated list of XML IDs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These filters can be activated independently and will be joined by an `OR` logic
    operation. Blocks of filters separated with a `<separator/>` element will be joined
    by an `AND` logic operation.
  prefs: []
  type: TYPE_NORMAL
- en: This section provided a good summary of how `<field>` elements can be used.
    Now, let's learn about the `<filter>` elements that are available.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the <filter> element
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Predefined options are available upon clicking the **Filter** and **Group By**
    buttons, under the search box. These can be clicked by users to apply their filter
    conditions.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter elements can also be used by window actions, which can activate them,
    by adding a `search_default_<filter name>: True` key to the context.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Filter options can be added with the `<filter>` element, along with a `domain`
    attribute setting for specific search conditions to use, through a domain filter.
    The following is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: This adds two selectable filters. They will be available for selection in the
    `open` state. The second one filters the checkout where the current user is the
    responsible librarian, filtering `user_id` by the current user. This is available
    from the context `uid` key.
  prefs: []
  type: TYPE_NORMAL
- en: 'The filter element is also used to add options to the **Group By** button.
    Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This filter sets a `group by` context key with the field name to group by. In
    this case, it will group by  `member_id`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the `<filter>` elements, the following attributes are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` is an identifier to be used for later inheritance/extension or to be
    enabled using a window action context key. It is not mandatory, but it is good
    practice to always provide it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string` is the label text to be displayed for the filter. It is mandatory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain` is the domain expression to be added to the current domain.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` is a context dictionary to be added to the current context. It will
    usually be used to set the `group_by` key with the field name to group by.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups` makes this element field available only for a list of security groups
    (XML IDs).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Upon adding the preceding code to the `library_checkout` module, the module
    will be upgraded. These filter and group by options will be available in the buttons
    near the search box.
  prefs: []
  type: TYPE_NORMAL
- en: Another search view element that's available is the search panel. We'll look
    at this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a search panel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Search views can also add a search panel, which will be visible on the left-hand
    side of the selected view. It lists the available values in a field. Clicking
    on a value filters the records by that value. By default, this search panel is
    only visible in the list and Kanban views, although this can be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code adds a search panel to the library checkout view. Add the
    following XML inside the `<search>` view element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code adds two fields to the search panel called members and stages.
    Each of them lists several available values, and clicking on these values applies
    the corresponding filter.
  prefs: []
  type: TYPE_NORMAL
- en: The `<searchpanel>` element has one attribute available, `view_type`, that can
    set the view types where the panel is to be made visible. By default, its value
    is `view_type="tree,kanban"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<field>` elements inside `<searchpanel>` support a few attributes. Here
    is a selection of the most important ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '`string` sets specific label text to use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`icon` sets an icon to be presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color` sets the icon''s color. It uses an HTML hex code, such as `#8F3A84`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`select="multi"` adds selection checkboxes, which allow the user to select
    multiple values. This is only available for many-to-one and many-to-many fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups` sets a list XML IDs of the security groups that can see the search
    panel.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable_counters="1"` adds a record number counter next to each value. Beware
    that this can have a performance impact on the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`limit` sets the number of selected values that are allowed. The default is
    200 and can be set to zero so that there''s no limit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The search panel element was introduced in Odoo 13 and is not available in previous
    versions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This is what the list view with the search panel looks like, after making these
    changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.4 – List view with the search panel'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_10.4_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 10.4 – List view with the search panel
  prefs: []
  type: TYPE_NORMAL
- en: The form, list, and search views are the most frequently used view types. But
    there are a few more view types that are available for designing our user interfaces.
    We'll look at these in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the other available view types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The form and list views are essential user interface components, but other than
    them, a few other specific view types can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'We''re already familiar with the three basic views: `form`, `tree`, and `search`.
    Beyond these, the following view types are also available in Odoo Community Edition:'
  prefs: []
  type: TYPE_NORMAL
- en: '`kanban` presents records as cards that can be organized in columns to create
    Kanban boards.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`activity` presents a summary of scheduled activities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`calendar` present records in a calendar format.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graph` presents data as a graphical chart.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pivot` presents data as an interactive pivot table.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qweb` is used to declare QWeb templates to be used in reports, Kanban views,
    or web pages. However, this is not a web client-supported view type like forms
    and lists are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kanban views will be presented in depth in [*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324),
    *Kanban Views and Client-Side QWeb*, so they won't be addressed here.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 14
  prefs: []
  type: TYPE_NORMAL
- en: The `diagram` view type, which could be used to present relationships between
    records, was removed in Odoo 14\. The last piece of documentation that's available
    for this, for Odoo 13, can be found at [https://www.odoo.com/documentation/13.0/developer/reference/addons/views.html#diagram](https://www.odoo.com/documentation/13.0/developer/reference/addons/views.html#diagram).
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo Enterprise Edition supports a few more views types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dashboard`, which presents aggregate data using subviews, such as pivots and
    graphs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cohort`, which is used to show how data changes over a certain period.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`map`, which presents records in a map and can display routes between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Gantt`, which presents date scheduling information in a Gantt chart. This
    is commonly used in project management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`grid`, which presents data organized in a grid with rows and columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The official documentation provides good references to all of the views and
    their available attributes: https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html#view-types.'
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Additional view types can be found as community add-on modules. Under the Odoo
    Community Association umbrella, web client extensions, including view types and
    widgets, can be found in the [https://github.com/OCA/web](https://github.com/OCA/web)
    GitHub repository. For example, the `web_timeline` add-on module provides a `timeline`
    view type, which is also capable of presenting scheduling information as Gantt
    charts. It is a Community Edition alternative to the `gantt` view type.
  prefs: []
  type: TYPE_NORMAL
- en: The following sections provide a brief explanation of the additional view types
    that are available in Odoo Community Edition.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the activity view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The activity view provides a summary of the scheduled activities. It is provided
    by the `mail` add-on module, so it needs to be installed for this view type to
    be available.
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be enabled by adding the `activity` view type to the `view_mode` field
    of the window action. From the `action_library_checkout` window action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: If no view definition exists, one will be automatically generated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a simple definition that''s equivalent to the default generated one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The HTML in the `<templates>` element is used to describe the record information.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the calendar view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This view type presents the records in a calendar that can be viewed using
    different periods: per year, month, week, or day.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is a calendar view for the library checkouts that shows the items on a
    calendar according to their request date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The following attributes are supported by the calendar view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date_start` is the field for the start date (required).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_stop` is the field for the end date (optional).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`date_delay` in the field containing the duration in days. It is to be used
    instead of `date_end`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all_day` provides the name of a Boolean field that is to be used to signal
    full-day events. In these events, the duration is ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color` is the field that''s used to color a group of calendar entries. Each
    distinct value in this field will be assigned a color, and all of its entries
    will have the same color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mode` is the default display mode for the calendar. It can be either `day`,
    `week`, `month`, or `year`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scales` is a comma-separated list of modes available. By default, they all
    are.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`form_view_id` can provide the identifier for a specific form view to use when
    you''re opening records from the calendar view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event_open_popup="True"` opens the form view as a dialog window.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quick_add` lets you quickly create a new record. Only a description needs
    to be given by the user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changes in Odoo 11
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `display` calendar attribute was removed in Odoo 11\. In previous versions,
    it could be used to customize the format of the calendar entry's title text; for
    example, `display="[name], Stage [stage_id]"`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'For this view to be available in the `view_mode` area of the corresponding
    window with the `action_library_checkout` identifier:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: After making this module upgrade and reloading the page, the calendar view should
    be available.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the pivot view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data can also be seen in a pivot table; that is, a dynamic analysis matrix.
    For this, we have the pivot view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `num_books` field will be used in the pivot view to add the checkouts model.
    Data aggregations are only available for database stored fields; this is not the
    case for the `num_books` field. So, it needs to be modified to add the `store=True`
    attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'To also add a pivot table to the library checkouts, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The graph and pivot views should contain field elements that describe the axes
    and measures to use. Most of the available attributes are common to both view
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name` identifies the field to use in the graph, just like in other views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type` is how the field will be used; that is, as a `row` group (default),  `measure`,
    or `col` (only for pivot tables; it is used for column groups).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interval` is meaningful for date fields and is the time interval that''s used
    to group time data by `day`, `week`, `month`, `quarter`, or `year`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other than these essential attributes, more are available and are documented
    at [https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html#pivot](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html#pivot).
  prefs: []
  type: TYPE_NORMAL
- en: 'For this view to be available in the `view_mode` area of the `action_library_checkout`
    window action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: After making this module upgrade and reloading the page, the calendar view should
    be available.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the graph view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Graph views present charts with data aggregations. The available charts include
    bar, line, and pie charts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a graph view for the checkout model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The `graph` view element can have a `type` attribute that can be set to `bar`
    (the default), `pie`, or `line`. In the case of `bar`, the additional `stacked="True"`
    element can be used to make it a stacked bar chart.
  prefs: []
  type: TYPE_NORMAL
- en: 'The graph uses two types of fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type="row"` is the default and sets the criteria to aggregate values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type="measure"` is used for the fields that are to be used as metrics – that
    is, the actual values being aggregated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Most of the available graph view attributes are common to the pivot view type.
    The official documentation provides a good reference: [https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html#reference-views-graph](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html#reference-views-graph).'
  prefs: []
  type: TYPE_NORMAL
- en: 'For this view to be available in the `view_mode` area of the `action_library_checkout`
    window action:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: After making this module upgrade and reloading the page, the calendar view should
    be available.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Well-designed views are key for a good user experience. Applications need to
    support the business logic, but an easy-to-use user interface is also important
    to help users navigate efficiently through the business processes and minimize
    errors.
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo web client provides a rich set of tools to build such user interfaces.
    This includes a menu system, several view types, and different field widgets to
    choose from.
  prefs: []
  type: TYPE_NORMAL
- en: Adding menu items is the first step, and these use window actions to let the
    web client know what views should be presented.
  prefs: []
  type: TYPE_NORMAL
- en: Most of the user interaction will happen on form views, and it is important
    to understand all the elements that can be used there. We started by presenting
    the general structure that form views are expected to follow, as well as the elements
    to be added to each.
  prefs: []
  type: TYPE_NORMAL
- en: This includes the header section, the title fields, the other form fields, a
    possible notebook section with pages, and a final messaging area.
  prefs: []
  type: TYPE_NORMAL
- en: Record data is presented and modified using field elements. Details were presented
    on how to use them and the several options that can be used to adjust their presentation.
    Another important element is buttons, which allow us to navigate to other views
    or run server functions.
  prefs: []
  type: TYPE_NORMAL
- en: The next view type we discussed was the list view. While simpler than the form
    view, it is an important record navigation tool. The search view was also discussed
    and is useful for adding predefined filter and grouping options to the search
    box area. This is important for users to quickly access the data that's needed
    for their regular operations.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, an overview was provided of the other view types available, such as
    the pivot, graph, and calendar views. There are used less often, but they still
    have an important role in specific cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we''ll learn more about a specific view type that we''ve
    not covered in this chapter: the Kanban view and the templating syntax that''s
    used by it, QWeb.'
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following reference materials complement the topics that were described
    in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The official Odoo documentation:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On actions: [https://www.odoo.com/documentation/15.0/developer/reference/backend/actions.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/actions.html%20)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'On views: [https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/views.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Font Awesome icon index: [https://fontawesome.com/v4.7.0/icons/](https://fontawesome.com/v4.7.0/icons/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
