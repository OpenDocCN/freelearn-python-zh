- en: Chapter 5. Synchronizing Tests
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building robust and reliable tests is one of the critical success factors of
    automated UI testing. However, you will come across situations where testing conditions
    differ from one test to another. When your script searches for elements or a certain
    state of application and it cannot find these elements anymore because the application
    starts responding slowly due to sudden resource constraints or network latency,
    the tests report false negative results. We need to match the speed of the test
    script with the application's speed by introducing delays in the test script.
    In other words, we need to sync the script with the application's response. WebDriver
    offers implicit and explicit waits to synchronize tests.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn about the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using implicit and explicit wait
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When to use implicit and explicit wait
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using expected conditions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom wait condition
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using implicit wait
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The implicit wait offers a generic way to synchronize the entire test or group
    of steps in WebDriver. Implicit wait is useful in dealing with situations where
    the application's response time is inconsistent due to network speed or applications
    that use dynamically rendered elements with Ajax calls.
  prefs: []
  type: TYPE_NORMAL
- en: When we set an implicit wait on WebDriver, it polls or searches the DOM for
    a certain amount of time to find an element or elements if they are not immediately
    available. By default, the implicit wait timeout is set to `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Once set, the implicit wait is set for the life of the WebDriver instance or
    for the entire duration of the test, and the WebDriver applies this implicit wait
    for all the steps that find the elements on the page unless we set it back to
    0.
  prefs: []
  type: TYPE_NORMAL
- en: The `webdriver` class provides the `implicitly_wait()` method to configure timeout.
    We created a `SearchProductTest` test in [Chapter 2](ch02.html "Chapter 2. Writing
    Tests Using unittest"), *Writing Tests Using unittest*. We will modify this test
    and add an implicit wait with timeout of 10 seconds in the `setUp()` method as
    shown in following code example. When the test is executed, WebDriver will wait
    for up to 10 seconds if it doesn't find an element. When it reaches the timeout,
    that is, 10 seconds in this example, it will throw a `NoSuchElementException`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It is better to avoid using an implicit wait in tests and try to handle synchronization
    issues with an explicit wait, which provides more control when compared to an
    implicit wait.
  prefs: []
  type: TYPE_NORMAL
- en: Using explicit wait
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The explicit wait is another wait mechanism available in WebDriver to synchronize
    tests. Explicit wait provides a better control when compared to implicit wait.
    Unlike an implicit wait, we can use a set of predefined or custom conditions for
    the script to wait for before proceeding with further steps.
  prefs: []
  type: TYPE_NORMAL
- en: An explicit wait can only be implemented in specific cases where script synchronization
    is needed. WebDriver provides the `WebDriverWait` and `expected_conditions` classes
    to implement an explicit wait.
  prefs: []
  type: TYPE_NORMAL
- en: The `expected_conditions` class provides a set of predefined conditions to wait
    for before proceeding further in the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a simple test that uses explicit wait with an expected condition
    for visibility of an element, as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this test, explicit wait is used to wait until the **Log In** link is visible
    in the DOM, using the expected `visibility_of_element_located` condition. This
    condition requires the locator strategy and locator details for the element we
    want to wait for. The script will wait for a maximum of 10 seconds looking for
    the element to be visible. Once the element is visible with the specified locator,
    the expected condition will return the located element back to the script.
  prefs: []
  type: TYPE_NORMAL
- en: If an element is not visible with the specified locator in the given timeout,
    a `TimeoutException` will be raised.
  prefs: []
  type: TYPE_NORMAL
- en: The expected condition class
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following table shows some common conditions along with examples that we
    frequently come across when automating web browsers supported by the `expected_conditions`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Expected condition | Description | Argument | Example |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `element_to_be_clickable(locator)` | This will wait for an element to be
    located and be visible and enabled so that it can be clicked.This method returns
    the element that is located back to the test. | `locator`: This is a tuple of
    `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.NAME,"is_subscribed")))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `element_to_be_selected(element)` | This will wait until a specified element
    is selected. | `element`: This is the WebElement. | `subscription = self.driver.find_element_by_name("is_subscribed")``WebDriverWait(self.driver,
    10).until(expected_conditions.element_to_be_selected(subscription))` |'
  prefs: []
  type: TYPE_TB
- en: '| `invisibility_of_element_located(locator)` | This will wait for an element
    that is either invisible or is not present on the DOM. | `locator`: This is a
    tuple of `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.invisibility_of_element_located((By.ID,"loading_banner")))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `presence_of_all_elements_located(locator)` | This will wait until at least
    one element for the matching locator is present on the web page.This method returns
    the list of WebElements once they are located. | `locator`: This is a tuple of
    `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_all_elements_located((By.CLASS_NAME,"input-text")))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `presence_of_element_located(locator)` | This will wait until an element
    for the matching locator is present on a web page or available on the DOM.This
    method returns an element once it is located. | `locator`: This is a tuple of
    `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located((By.ID,"search")))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `text_to_be_present_in_element(locator, text_)` | This will wait until an
    element is located and has the given text. | `locator`: This is a tuple of `(by,
    locator)`.`text`: This is the text to be checked. | `WebDriverWait(self.driver,10).until(expected_conditions.text_to_be_present_in_element((By.ID,"select-language"),"English"))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `title_contains(title)` | This will wait for the page tile to contain a case-sensitive
    substring.This method returns `true` if the tile matches, `false` otherwise. |
    `title`: This is the substring of the title to check. | `WebDriverWait(self.driver,
    10).until(expected_conditions.title_contains("Create New Customer Account"))`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `title_is(title)` | This will wait for the page tile to be equal to the expected
    title.This method returns `true` if the tile matches, `false` otherwise. | `title`:
    This is the title of the page. | `WebDriverWait(self.driver, 10).until(expected_conditions.title_is("Create
    New Customer Account - Magento Commerce Demo Store"))` |'
  prefs: []
  type: TYPE_TB
- en: '| `visibility_of(element)` | This will wait until an element is present in
    DOM, is visible, and its width and height are greater than zero.This method returns
    the (same) WebElement once it becomes visible. | `element`: This is the WebElement.
    | `first_name = self.driver.find_element_by_id("firstname")``WebDriverWait(self.driver,
    10).until(expected_conditions.visibility_of(first_name))` |'
  prefs: []
  type: TYPE_TB
- en: '| `visibility_of_element_located(locator)` | This will wait until an element
    to be located is present in DOM, is visible, and its width and height are greater
    than zero.This method returns the WebElement once it becomes visible. | `locator`:
    This is a tuple of `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of_element_located((By.ID,"firstname")))`
    |'
  prefs: []
  type: TYPE_TB
- en: You can find a complete list of expected conditions at [http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions](http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions).
  prefs: []
  type: TYPE_NORMAL
- en: Let's explore few more examples of expected conditions in the upcoming sections.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for an element to be enabled
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen earlier, the `expected_conditons` class provides a variety of
    wait conditions that we can implement in our scripts. In the following example,
    we will wait for an element to be enabled or made clickable. We can use this condition
    in Ajax-heavy applications where form fields are enabled or disabled based on
    other form field values or filters. In this example, we click on the **Log In**
    link and then wait for the **Create an Account** button to become clickable, which
    is displayed on the login page. We will then click on the **Create an Account**
    button and wait for the next page to be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We can wait and check for an element to be enabled by using the `element_to_be_clickable`
    condition. This requires the locator strategy and locator value. It returns the
    located element back to the script when that element becomes clickable or, in
    other words, enabled.
  prefs: []
  type: TYPE_NORMAL
- en: The preceding tests also wait for the creating new customer account page to
    be loaded by checking the title with the specified text. We used the `title_contains`
    condition that checks to make sure that the substring matches with the title of
    the page.
  prefs: []
  type: TYPE_NORMAL
- en: Waiting for alerts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can also use explicit wait on alerts and frames. A complex JavaScript processing
    or backend request might take time to display the alert to the user. This can
    be handled by the expected `alert_is_present` condition in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The preceding test validates the removal of products from the product comparison
    feature of the application. Users are sent a confirmation alert when they remove
    a product from the comparison. The `alert_is_present` condition is used to check
    if the alert is displayed to the user and returned back to the script for the
    upcoming actions. The script will wait for 10 seconds checking for the presence
    of the alert, otherwise it will raise an exception.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing custom wait conditions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen earlier, the `expected_conditions` class provides various predefined
    conditions to wait. We can also build custom conditions with `WebDriverWait`.
    This becomes useful when there is no suitable expected condition available for
    which to wait.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s modify one of the tests we created earlier in this chapter and implement
    a custom wait condition to check the number of the drop-down items:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We can implement custom wait conditions with `WebDriverWait` using the Python
    lambda expressions. In this example, the script will wait for 10 seconds until
    the **Select Language** dropdown has eight options for selection. This condition
    is useful when the dropdowns are populated by Ajax calls and the script needs
    to wait until all the options are available to the user for selection.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we recognized the need for synchronization and its importance
    in building highly reliable tests. We looked at the implicit wait and how to use
    implicit wait as a generic wait mechanism with an example. We then looked at the
    explicit wait that offers a more flexible way to synchronize tests. The `expected_conditions`
    class offers various built-in conditions for the wait. We have implemented some
    of these conditions.
  prefs: []
  type: TYPE_NORMAL
- en: The `WebDriverWait` class also provides a very powerful way to implement custom
    wait conditions over and above `expected_conditions`. We implemented a custom
    wait condition on a dropdown.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will learn how to implement cross-browser testing using
    `RemoteWebDriver` and Selenium Server for running tests on a remote machine and
    parallel execution with Selenium Grid.
  prefs: []
  type: TYPE_NORMAL
