- en: Chapter 5. Synchronizing Tests
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章 同步测试
- en: Building robust and reliable tests is one of the critical success factors of
    automated UI testing. However, you will come across situations where testing conditions
    differ from one test to another. When your script searches for elements or a certain
    state of application and it cannot find these elements anymore because the application
    starts responding slowly due to sudden resource constraints or network latency,
    the tests report false negative results. We need to match the speed of the test
    script with the application's speed by introducing delays in the test script.
    In other words, we need to sync the script with the application's response. WebDriver
    offers implicit and explicit waits to synchronize tests.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 构建稳健和可靠的测试是自动化UI测试的关键成功因素之一。然而，你可能会遇到测试条件因测试而异的情况。当你的脚本搜索元素或应用程序的某种状态，并且由于突然的资源限制或网络延迟导致应用程序开始缓慢响应，无法再找到这些元素时，测试会报告假阴性结果。我们需要通过在测试脚本中引入延迟来匹配测试脚本的速率与应用程序的速率。换句话说，我们需要将脚本与应用程序的响应同步。WebDriver提供了隐式和显式等待来同步测试。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Using implicit and explicit wait
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用隐式和显式等待
- en: When to use implicit and explicit wait
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 何时使用隐式和显式等待
- en: Using expected conditions
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用预期条件
- en: Creating a custom wait condition
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义等待条件
- en: Using implicit wait
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用隐式等待
- en: The implicit wait offers a generic way to synchronize the entire test or group
    of steps in WebDriver. Implicit wait is useful in dealing with situations where
    the application's response time is inconsistent due to network speed or applications
    that use dynamically rendered elements with Ajax calls.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式等待提供了一个通用的方法来同步WebDriver中的整个测试或一系列步骤。隐式等待在处理由于网络速度或使用Ajax调用动态渲染元素的应用程序响应时间不一致的情况时非常有用。
- en: When we set an implicit wait on WebDriver, it polls or searches the DOM for
    a certain amount of time to find an element or elements if they are not immediately
    available. By default, the implicit wait timeout is set to `0`.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在WebDriver上设置隐式等待时，它会搜索DOM一段时间以查找元素或元素，如果它们当时不可用。默认情况下，隐式等待超时设置为`0`。
- en: Once set, the implicit wait is set for the life of the WebDriver instance or
    for the entire duration of the test, and the WebDriver applies this implicit wait
    for all the steps that find the elements on the page unless we set it back to
    0.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦设置，隐式等待将应用于WebDriver实例的生命周期或整个测试期间，WebDriver将为所有在页面上查找元素的步骤应用此隐式等待，除非我们将它重新设置为`0`。
- en: The `webdriver` class provides the `implicitly_wait()` method to configure timeout.
    We created a `SearchProductTest` test in [Chapter 2](ch02.html "Chapter 2. Writing
    Tests Using unittest"), *Writing Tests Using unittest*. We will modify this test
    and add an implicit wait with timeout of 10 seconds in the `setUp()` method as
    shown in following code example. When the test is executed, WebDriver will wait
    for up to 10 seconds if it doesn't find an element. When it reaches the timeout,
    that is, 10 seconds in this example, it will throw a `NoSuchElementException`.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`webdriver`类提供了`implicitly_wait()`方法来配置超时。我们在[第2章](ch02.html "第2章。使用unittest编写测试")中创建了一个`SearchProductTest`测试，*使用unittest编写测试*。我们将修改这个测试，并在`setUp()`方法中添加一个10秒的超时隐式等待，如下面的代码示例所示。当测试执行时，如果WebDriver找不到元素，它将等待最多10秒。当达到超时，即本例中的10秒时，它将抛出`NoSuchElementException`。'
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Tip
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is better to avoid using an implicit wait in tests and try to handle synchronization
    issues with an explicit wait, which provides more control when compared to an
    implicit wait.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试中最好避免使用隐式等待，并尝试使用显式等待来处理同步问题，与隐式等待相比，显式等待提供了更多的控制。
- en: Using explicit wait
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用显式等待
- en: The explicit wait is another wait mechanism available in WebDriver to synchronize
    tests. Explicit wait provides a better control when compared to implicit wait.
    Unlike an implicit wait, we can use a set of predefined or custom conditions for
    the script to wait for before proceeding with further steps.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 显式等待是WebDriver中用于同步测试的另一种等待机制。与隐式等待相比，显式等待提供了更好的控制。与隐式等待不同，我们可以在脚本继续下一步之前使用一组预定义或自定义条件来等待。
- en: An explicit wait can only be implemented in specific cases where script synchronization
    is needed. WebDriver provides the `WebDriverWait` and `expected_conditions` classes
    to implement an explicit wait.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 显式等待只能在需要脚本同步的特定情况下实现。WebDriver提供了`WebDriverWait`和`expected_conditions`类来实现显式等待。
- en: The `expected_conditions` class provides a set of predefined conditions to wait
    for before proceeding further in the code.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '`expected_conditions`类提供了一组预定义的条件，用于在代码中进一步执行之前等待。'
- en: 'Let''s create a simple test that uses explicit wait with an expected condition
    for visibility of an element, as shown in the following code:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的测试，使用预期条件显式等待一个元素的可见性，如下面的代码所示：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In this test, explicit wait is used to wait until the **Log In** link is visible
    in the DOM, using the expected `visibility_of_element_located` condition. This
    condition requires the locator strategy and locator details for the element we
    want to wait for. The script will wait for a maximum of 10 seconds looking for
    the element to be visible. Once the element is visible with the specified locator,
    the expected condition will return the located element back to the script.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个测试中，使用显式等待来等待直到**登录**链接在DOM中可见，使用预期的`visibility_of_element_located`条件。此条件需要我们想要等待的元素的定位策略和定位详情。脚本将等待最多10秒钟寻找可见的元素。一旦元素通过指定的定位器可见，预期的条件将返回定位到的元素回脚本。
- en: If an element is not visible with the specified locator in the given timeout,
    a `TimeoutException` will be raised.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在指定的超时时间内，元素通过指定的定位器不可见，将引发`TimeoutException`异常。
- en: The expected condition class
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预期条件类
- en: 'The following table shows some common conditions along with examples that we
    frequently come across when automating web browsers supported by the `expected_conditions`
    class:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下表显示了我们在自动化由`expected_conditions`类支持的网页浏览器时经常遇到的常见条件及其示例：
- en: '| Expected condition | Description | Argument | Example |'
  id: totrans-25
  prefs: []
  type: TYPE_TB
  zh: '| 预期条件 | 描述 | 参数 | 示例 |'
- en: '| --- | --- | --- | --- |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- |'
- en: '| `element_to_be_clickable(locator)` | This will wait for an element to be
    located and be visible and enabled so that it can be clicked.This method returns
    the element that is located back to the test. | `locator`: This is a tuple of
    `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.NAME,"is_subscribed")))`
    |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| `element_to_be_clickable(locator)` | 这将等待一个元素被定位、可见并且可点击，以便可以点击。此方法将返回定位到的元素到测试中。
    | `locator`: 这是一个`(by, locator)`的元组。 | `WebDriverWait(self.driver, 10).until(expected_conditions.element_to_be_clickable((By.NAME,"is_subscribed")))`
    |'
- en: '| `element_to_be_selected(element)` | This will wait until a specified element
    is selected. | `element`: This is the WebElement. | `subscription = self.driver.find_element_by_name("is_subscribed")``WebDriverWait(self.driver,
    10).until(expected_conditions.element_to_be_selected(subscription))` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| `element_to_be_selected(element)` | 这将等待直到指定的元素被选中。 | `element`: 这是一个WebElement。
    | `subscription = self.driver.find_element_by_name("is_subscribed")``WebDriverWait(self.driver,
    10).until(expected_conditions.element_to_be_selected(subscription))` |'
- en: '| `invisibility_of_element_located(locator)` | This will wait for an element
    that is either invisible or is not present on the DOM. | `locator`: This is a
    tuple of `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.invisibility_of_element_located((By.ID,"loading_banner")))`
    |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| `invisibility_of_element_located(locator)` | 这将等待一个元素要么不可见，要么不在DOM上。 | `locator`:
    这是一个`(by, locator)`的元组。 | `WebDriverWait(self.driver, 10).until(expected_conditions.invisibility_of_element_located((By.ID,"loading_banner")))`
    |'
- en: '| `presence_of_all_elements_located(locator)` | This will wait until at least
    one element for the matching locator is present on the web page.This method returns
    the list of WebElements once they are located. | `locator`: This is a tuple of
    `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_all_elements_located((By.CLASS_NAME,"input-text")))`
    |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| `presence_of_all_elements_located(locator)` | 这将等待直到至少一个匹配定位器的元素出现在网页上。此方法在元素被定位后返回WebElements列表。
    | `locator`: 这是一个`(by, locator)`的元组。 | `WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_all_elements_located((By.CLASS_NAME,"input-text")))`
    |'
- en: '| `presence_of_element_located(locator)` | This will wait until an element
    for the matching locator is present on a web page or available on the DOM.This
    method returns an element once it is located. | `locator`: This is a tuple of
    `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located((By.ID,"search")))`
    |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| `presence_of_element_located(locator)` | 这将等待直到匹配定位器的元素出现在网页上或在DOM上可用。此方法在元素被定位后返回一个元素。
    | `locator`: 这是一个`(by, locator)`的元组。 | `WebDriverWait(self.driver, 10).until(expected_conditions.presence_of_element_located((By.ID,"search")))`
    |'
- en: '| `text_to_be_present_in_element(locator, text_)` | This will wait until an
    element is located and has the given text. | `locator`: This is a tuple of `(by,
    locator)`.`text`: This is the text to be checked. | `WebDriverWait(self.driver,10).until(expected_conditions.text_to_be_present_in_element((By.ID,"select-language"),"English"))`
    |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| `text_to_be_present_in_element(locator, text_)` | 这将等待直到找到元素并且具有给定的文本。 |
    `locator`: 这是一个 `(by, locator)` 的元组。`text`: 这是需要检查的文本。 | `WebDriverWait(self.driver,10).until(expected_conditions.text_to_be_present_in_element((By.ID,"select-language"),"English"))`
    |'
- en: '| `title_contains(title)` | This will wait for the page tile to contain a case-sensitive
    substring.This method returns `true` if the tile matches, `false` otherwise. |
    `title`: This is the substring of the title to check. | `WebDriverWait(self.driver,
    10).until(expected_conditions.title_contains("Create New Customer Account"))`
    |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| `title_contains(title)` | 这将等待页面标题包含一个大小写敏感的子串。此方法如果标题匹配则返回 `true`，否则返回 `false`。
    | `title`: 这是需要检查的标题子串。 | `WebDriverWait(self.driver, 10).until(expected_conditions.title_contains("Create
    New Customer Account"))` |'
- en: '| `title_is(title)` | This will wait for the page tile to be equal to the expected
    title.This method returns `true` if the tile matches, `false` otherwise. | `title`:
    This is the title of the page. | `WebDriverWait(self.driver, 10).until(expected_conditions.title_is("Create
    New Customer Account - Magento Commerce Demo Store"))` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| `title_is(title)` | 这将等待页面标题等于预期的标题。此方法如果标题匹配则返回 `true`，否则返回 `false`。 | `title`:
    这是页面的标题。 | `WebDriverWait(self.driver, 10).until(expected_conditions.title_is("Create
    New Customer Account - Magento Commerce Demo Store"))` |'
- en: '| `visibility_of(element)` | This will wait until an element is present in
    DOM, is visible, and its width and height are greater than zero.This method returns
    the (same) WebElement once it becomes visible. | `element`: This is the WebElement.
    | `first_name = self.driver.find_element_by_id("firstname")``WebDriverWait(self.driver,
    10).until(expected_conditions.visibility_of(first_name))` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| `visibility_of(element)` | 这将等待直到元素在 DOM 中存在，可见，并且其宽度和高度都大于零。此方法在元素变为可见时返回（相同的）WebElement。
    | `element`: 这是 WebElement。 | `first_name = self.driver.find_element_by_id("firstname")`
    `WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of(first_name))`
    |'
- en: '| `visibility_of_element_located(locator)` | This will wait until an element
    to be located is present in DOM, is visible, and its width and height are greater
    than zero.This method returns the WebElement once it becomes visible. | `locator`:
    This is a tuple of `(by, locator)`. | `WebDriverWait(self.driver, 10).until(expected_conditions.visibility_of_element_located((By.ID,"firstname")))`
    |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| `visibility_of_element_located(locator)` | 这将等待直到要定位的元素在 DOM 中存在，可见，并且其宽度和高度都大于零。此方法在元素变为可见时返回
    WebElement。 | `locator`: 这是一个 `(by, locator)` 的元组。 | `WebDriverWait(self.driver,
    10).until(expected_conditions.visibility_of_element_located((By.ID,"firstname")))`
    |'
- en: You can find a complete list of expected conditions at [http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions](http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions](http://selenium.googlecode.com/git/docs/api/py/webdriver_support/selenium.webdriver.support.expected_conditions.html#module-selenium.webdriver.support.expected_conditions)找到预期条件的完整列表。
- en: Let's explore few more examples of expected conditions in the upcoming sections.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在接下来的部分中探索更多预期条件的示例。
- en: Waiting for an element to be enabled
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等待元素变为可用
- en: As we have seen earlier, the `expected_conditons` class provides a variety of
    wait conditions that we can implement in our scripts. In the following example,
    we will wait for an element to be enabled or made clickable. We can use this condition
    in Ajax-heavy applications where form fields are enabled or disabled based on
    other form field values or filters. In this example, we click on the **Log In**
    link and then wait for the **Create an Account** button to become clickable, which
    is displayed on the login page. We will then click on the **Create an Account**
    button and wait for the next page to be displayed.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，`expected_conditions` 类提供了各种等待条件，我们可以在脚本中实现。在下面的示例中，我们将等待一个元素变为可用或可点击。我们可以在基于其他表单字段值或筛选器的表单字段启用或禁用的
    Ajax 重量级应用程序中使用此条件。在这个例子中，我们点击 **登录** 链接，然后等待登录页面上的 **创建账户** 按钮变为可点击，该按钮在登录页面上显示。然后我们将点击
    **创建账户** 按钮，并等待显示下一页。
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We can wait and check for an element to be enabled by using the `element_to_be_clickable`
    condition. This requires the locator strategy and locator value. It returns the
    located element back to the script when that element becomes clickable or, in
    other words, enabled.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`element_to_be_clickable`条件等待并检查元素是否可点击。这需要定位策略和定位值。当该元素变为可点击或换句话说变为启用时，它将返回定位的元素到脚本中。
- en: The preceding tests also wait for the creating new customer account page to
    be loaded by checking the title with the specified text. We used the `title_contains`
    condition that checks to make sure that the substring matches with the title of
    the page.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的测试还通过检查指定的文本标题来等待创建新客户账户页面加载。我们使用了`title_contains`条件，该条件确保子字符串与页面标题匹配。
- en: Waiting for alerts
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 等待警报
- en: 'We can also use explicit wait on alerts and frames. A complex JavaScript processing
    or backend request might take time to display the alert to the user. This can
    be handled by the expected `alert_is_present` condition in the following way:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以在警报和框架上使用显式等待。复杂的JavaScript处理或后端请求可能需要时间来向用户显示警报。这可以通过以下方式处理预期的`alert_is_present`条件：
- en: '[PRE3]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding test validates the removal of products from the product comparison
    feature of the application. Users are sent a confirmation alert when they remove
    a product from the comparison. The `alert_is_present` condition is used to check
    if the alert is displayed to the user and returned back to the script for the
    upcoming actions. The script will wait for 10 seconds checking for the presence
    of the alert, otherwise it will raise an exception.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的测试验证了从应用程序的产品比较功能中删除产品。当用户从比较中删除产品时，会向用户发送确认警报。使用`alert_is_present`条件来检查警报是否显示给用户，并将其返回到脚本以进行后续操作。脚本将等待10秒钟检查警报的存在，否则将引发异常。
- en: Implementing custom wait conditions
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 实现自定义等待条件
- en: As we have seen earlier, the `expected_conditions` class provides various predefined
    conditions to wait. We can also build custom conditions with `WebDriverWait`.
    This becomes useful when there is no suitable expected condition available for
    which to wait.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前所见，`expected_conditions`类提供了各种预定义的条件以供等待。我们还可以使用`WebDriverWait`构建自定义条件。当没有合适的预期条件可用时，这非常有用。
- en: 'Let''s modify one of the tests we created earlier in this chapter and implement
    a custom wait condition to check the number of the drop-down items:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们修改本章早期创建的一个测试，并实现一个自定义等待条件来检查下拉列表项的数量：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We can implement custom wait conditions with `WebDriverWait` using the Python
    lambda expressions. In this example, the script will wait for 10 seconds until
    the **Select Language** dropdown has eight options for selection. This condition
    is useful when the dropdowns are populated by Ajax calls and the script needs
    to wait until all the options are available to the user for selection.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用Python lambda表达式通过`WebDriverWait`实现自定义等待条件。在这个例子中，脚本将等待10秒钟，直到**选择语言**下拉列表有八个选项可供选择。这个条件在下拉列表通过Ajax调用填充，并且脚本需要等待直到所有选项都可供用户选择时非常有用。
- en: Summary
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we recognized the need for synchronization and its importance
    in building highly reliable tests. We looked at the implicit wait and how to use
    implicit wait as a generic wait mechanism with an example. We then looked at the
    explicit wait that offers a more flexible way to synchronize tests. The `expected_conditions`
    class offers various built-in conditions for the wait. We have implemented some
    of these conditions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们认识到同步的需要及其在构建高度可靠的测试中的重要性。我们探讨了隐式等待以及如何使用隐式等待作为一个通用的等待机制。然后我们探讨了提供更灵活同步测试方式的显式等待。`expected_conditions`类提供了各种内置的等待条件。我们已经实现了一些这些条件。
- en: The `WebDriverWait` class also provides a very powerful way to implement custom
    wait conditions over and above `expected_conditions`. We implemented a custom
    wait condition on a dropdown.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`WebDriverWait`类还提供了一种非常强大的方式来在`expected_conditions`之上实现自定义等待条件。我们在下拉列表上实现了一个自定义等待条件。'
- en: In the next chapter, you will learn how to implement cross-browser testing using
    `RemoteWebDriver` and Selenium Server for running tests on a remote machine and
    parallel execution with Selenium Grid.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将学习如何使用`RemoteWebDriver`和Selenium Server实现跨浏览器测试，在远程机器上运行测试，并使用Selenium
    Grid进行并行执行。
