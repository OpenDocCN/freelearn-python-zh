["```py\ndef __virtual__():\n    '''\n    Only load if the necesaary modules available in __salt__\n    '''\n    if 'module.function' in __salt__:\n        return True\n    return False\n\ndef somestate(name):\n    '''\n    Achieve the desired state\n\n    nane\n        The name of the item to achieve statefulness\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': None,\n           'comment': ''}\n    if <item is already in the desired state>:\n        ret['result'] = True\n        ret['comment'] = 'The item is already in the desired state'\n        return ret\n    if __opts__['test']:\n        ret['comment'] = 'The item is not in the desired state'\n        return ret\n    <attempt to configure the item correctly>\n    if <we are able to put the item in the correct state>:\n        ret['changes'] = {'desired state': name}\n        ret['result'] = True\n        ret['comment'] = 'The desired state was successfully achieved'\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'The desired state failed to be achieved'\n        return ret\n```", "```py\ndef __virtual__():\n    '''\n    Check for http.query\n    '''\n    if 'http.query' in __salt__:\n        return True\n    return False\n```", "```py\ndef __virtual__():\n    '''\n    Check for http.query\n    '''\n    return 'http.query' in __salt__\n```", "```py\n    nginx:\n      - pkg.installed\n    ```", "```py\n    {'nginx': {'new': '1.8.0-2',  'old': ''}}\n    ```", "```py\n            ret = {'name': name,\n                   'changes': {},\n                   'result': None,\n                   'comment': ''}\n        ```", "```py\n    if <item is already in the desired state>:\n        ret['result'] = True\n        ret['comment'] = 'The item is already in the desired state'\n        return ret\n```", "```py\n    if __opts__['test']:\n        ret['comment'] = 'The item is not in the desired state'\n        return ret\n```", "```py\n    <attempt to configure the item correctly>\n    if <we are able to put the item in the correct state>:\n        ret['changes'] = {'desired state': name}\n        ret['result'] = True\n        ret['comment'] = 'The desired state was successfully achieved'\n        return ret\n```", "```py\n    else:\n        ret['result'] = False\n        ret['comment'] = 'The desired state failed to be achieved'\n        return ret\n```", "```py\n'''\nThis state connects to an imaginary web service.\nThe following credentials must be configured:\n\n    webapi_username: <your username>\n    webapi_password: <your password>\n\nThis module should be saved as salt/states/fake_webapi.py\n'''\nimport salt.utils.http\n\ndef __virtual__():\n    '''\n    Make sure there are credentials\n    '''\n    username = __salt__['config.get']('webapi_username', False)\n    password = __salt__['config.get']('webapi_password', False)\n    if username and password:\n        return True\n    return False\n```", "```py\ndef locked(name):\n    '''\n    Ensure that the user is locked out\n    '''\n    username = __salt__['config.get']('webapi_username', False)\n    password = __salt__['config.get']('webapi_password', False)\n\n    ret = {'name': name,\n           'changes': {},\n           'result': None,\n           'comment': ''}\n\n    result = salt.utils.http.query(\n        'https://api.example.com/v1/users/{0}'.format(name),\n        username=username,\n        password=password,\n        decode=True,\n        decode_type='json',\n    )\n\n    if result('dict', {}).get('access', '') == 'locked':\n        ret['result'] = True\n        ret['comment'] = 'The account is already locked'\n        return ret\n```", "```py\ndef _query(action, resource='', data=None):\n    '''\n    Make a query against the API\n    '''\n    username = __salt__['config.get']('webapi_username', False)\n    password = __salt__['config.get']('webapi_password', False)\n\n    result = salt.utils.http.query(\n        'https://api.example.com/v1/{0}/{1}'.format(action, resource),\n        username=username,\n        password=password,\n        decode=True,\n        decode_type='json',\n        data=data,\n    )\n\ndef locked(name):\n    '''\n    Ensure that the user is locked out\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': None,\n           'comment': ''}\n\n    result = _query('users', name)\n    if result('dict', {}).get('access', '') == 'locked':\n        ret['result'] = True\n        ret['comment'] = 'The account is already locked'\n        return ret\n```", "```py\n    if __opts__['test']:\n        ret['comment'] = 'The {0} account is not locked'.format(name)\n        return ret\n```", "```py\n    _query('users', name, {'access': 'locked'})\n```", "```py\n    result = _query('users', name)\n    if result('dict', {}).get('access', '') == 'locked':\n        ret['changes'] = {'locked': name}\n        ret['result'] = True\n        ret['comment'] = 'The {0} user account is now locked'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to set the {0} user account to locked'.format(name)\n        return ret\n```", "```py\n'''\nThis state connects to an imaginary web service.\nThe following credentials must be configured:\n\n    webapi_username: <your username>\n    webapi_password: <your password>\n\nThis module should be saved as salt/states/fake_webapi.py\n'''\nimport salt.utils.http\n\ndef __virtual__():\n    '''\n    Make sure there are credentials\n    '''\n    username = __salt__['config.get']('webapi_username', False)\n    password = __salt__['config.get']('webapi_password', False)\n    if username and password:\n        return True\n    return False\n\ndef _query(action, resource='', data=None):\n    '''\n    Make a query against the API\n    '''\n    username = __salt__['config.get']('webapi_username', False)\n    password = __salt__['config.get']('webapi_password', False)\n\n    result = salt.utils.http.query(\n        'https://api.example.com/v1/{0}/{1}'.format(action, resource),\n        username=username,\n        password=password,\n        decode=True,\n        decode_type='json',\n        data=data,\n    )\nreturn result\n\ndef locked(name):\n    '''\n    Ensure that the user is locked out\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': None,\n           'comment': ''}\n\n    result = _query('users', name)\n    if result('dict', {}).get('access', '') == 'locked':\n        ret['result'] = True\n        ret['comment'] = 'The account is already locked'\n        return ret\n\n    if __opts__['test']:\n        ret['comment'] = 'The {0} account is not locked'.format(name)\n        return ret\n\n    _query('users', name, {'access': 'locked'})\n\n    result = _query('users', name)\n    if result('dict', {}).get('access', '') == 'locked':\n        ret['changes'] = {'locked': name}\n        ret['result'] = True\n        ret['comment'] = 'The {0} user account is now locked'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to set the {0} user account to locked'.format(name)\n        return ret\n\ndef unlocked(name):\n    '''\n    Ensure that the user is NOT locked out\n    '''\n    ret = {'name': name,\n           'changes': {},\n           'result': None,\n           'comment': ''}\n\n    result = _query('users', name)\n    if result('dict', {}).get('access', '') == 'unlocked':\n        ret['result'] = True\n        ret['comment'] = 'The account is already unlocked'\n        return ret\n\n    if __opts__['test']:\n        ret['comment'] = 'The {0} account is locked'.format(name)\n        return ret\n\n    _query('users', name, {'access': 'unlocked'})\n\n    result = _query('users', name)\n    if result('dict', {}).get('access', '') == 'unlocked':\n        ret['changes'] = {'locked': name}\n        ret['result'] = True\n        ret['comment'] = 'The {0} user account is no longer locked'.format(name)\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'Failed to unlock the {0} user account'.format(name)\n        return ret\n```", "```py\n    ret = {'name': name,\n           'changes': {},\n           'result': None,\n           'comment': ''}\n    if <item is already in the desired state>:\n        ret['result'] = True\n        ret['comment'] = 'The item is already in the desired state'\n        return ret\n    ret['result'] = False\n    return ret\n```", "```py\n# salt-run --local state.single fake_webapi.locked larry\n\n```", "```py\n    <attempt to configure the item correctly>\n    if <we are able to put the item in the correct state>:\n        ret['changes'] = {'desired state': name}\n        ret['result'] = True\n        ret['comment'] = 'The desired state was successfully achieved'\n        return ret\n    else:\n        ret['result'] = False\n        ret['comment'] = 'The desired state failed to be achieved'\n        return ret\n```"]