["```py\nfrom tkinter import messagebox \n```", "```py\nmessagebox.showinfo(\n  title='This is the title',\n  message='This is the message',\n  detail='This is the detail'\n) \n```", "```py\n# messagebox_demo.py\nimport tkinter as tk\nfrom tkinter import messagebox\nsee_more = messagebox.askyesno(\n  title='See more?',\n  message='Would you like to see another box?',\n  detail='Click NO to quit'\n)\nif not see_more:\n  exit()\nmessagebox.showinfo(\n  title='You got it',\n  message=\"Ok, here's another dialog.\",\n  detail='Hope you like it!'\n) \n```", "```py\n# application.py at the top of the file\nfrom tkinter import messagebox \n```", "```py\n# application.py, inside Application._on_save()\n    if errors:\n      # ... after setting the status:\n      message = \"Cannot save record\"\n      detail = (\n        \"The following fields have errors: \"\n        \"\\n  * {}\".format(\n          '\\n  * '.join(errors.keys())\n      ))\n      messagebox.showerror(\n        title='Error',\n        message=message,\n        detail=detail\n      )\n      return False \n```", "```py\n# abq_data_entry/application.py, in the Application class\n  def _on_file_select(self, *_):\n    \"\"\"Handle the file->select action\"\"\"\n    filename = filedialog.asksaveasfilename(\n      title='Select the target file for saving records',\n      defaultextension='.csv',\n      filetypes=[('CSV', '*.csv *.CSV')]\n    ) \n```", "```py\n# abq_data_entry/models.py, in CSVModel\n  def __init__(self, **filename=None**):\n    **if not** **filename**:\n      datestring = datetime.today().strftime(\"%Y-%m-%d\")\n      filename = \"abq_data_record_{}.csv\".format(datestring)\n    self.file = Path(filename) \n```", "```py\n# abq_data_entry/application.py, in CSVModel._on_file_select()\n    if filename:\n      self.model = m.CSVModel(filename=filename) \n```", "```py\nfrom tkinter import simpledialog as sd \n```", "```py\nword = sd.askstring('Word', 'What is the word?') \n```", "```py\n# abq_data_entry/views.py at the top\nfrom tkinter.simpledialog import Dialog \n```", "```py\n# abq_data_entry/views.py at the bottom\nclass LoginDialog(Dialog):\n  \"\"\"A dialog that asks for username and password\"\"\"\n  def __init__(self, parent, title, error=''):\n    self._pw = tk.StringVar()\n    self._user = tk.StringVar()\n    self._error = tk.StringVar(value=error)\n    super().__init__(parent, title=title) \n```", "```py\n def body(self, frame):\n    ttk.Label(frame, text='Login to ABQ').grid(row=0)\n    if self._error.get():\n      ttk.Label(frame, textvariable=self._error).grid(row=1)\n    user_inp = w.LabelInput(\n      frame, 'User name:', input_class=w.RequiredEntry,\n      var=self._user\n    )\n    user_inp.grid()\n    w.LabelInput(\n      frame, 'Password:', input_class=w.RequiredEntry,\n      input_args={'show': '*'}, var=self._pw\n    ).grid()\n    return user_inp.input \n```", "```py\n def buttonbox(self):\n    box = ttk.Frame(self)\n    ttk.Button(\n      box, text=\"Login\", command=self.ok, default=tk.ACTIVE\n    ).grid(padx=5, pady=5)\n    ttk.Button(\n      box, text=\"Cancel\", command=self.cancel\n    ).grid(row=0, column=1, padx=5, pady=5)\n    self.bind(\"<Return>\", self.ok)\n    self.bind(\"<Escape>\", self.cancel)\n    box.pack() \n```", "```py\n def apply(self):\n    self.result = (self._user.get(), self._pw.get()) \n```", "```py\n# application.py, at the end of the Application class\n  @staticmethod\n  def _simple_login(username, password):\n    return username == 'abq' and password == 'Flowers' \n```", "```py\n# application.py, at the end of the Application class\n  def _show_login(self):\n    error = ''\n    title = \"Login to ABQ Data Entry\"\n    while True:\n      login = v.LoginDialog(self, title, error)\n      if not login.result:  # User canceled\n        return False\n      username, password = login.result\n      if self._simple_login(username, password):\n        return True\n      error = 'Login Failed' # loop and redisplay \n```", "```py\n# application.py, inside Application.__init__()\n    self.withdraw()\n    if not self._show_login():\n      self.destroy()\n      return\n    self.deiconify() \n```", "```py\n# menu_demo.py\nimport tkinter as tk\nroot = tk.Tk()\nroot.geometry('200x150')\nmain_text = tk.StringVar(value='Hi')\nlabel = tk.Label(root, textvariable=main_text)\nlabel.pack(side='bottom') \n```", "```py\nmain_menu = tk.Menu(root)\nroot.config(menu=main_menu) \n```", "```py\nmain_menu.add('command', label='Quit', command=root.quit) \n```", "```py\ntext_menu = tk.Menu(main_menu, tearoff=False) \n```", "```py\ntext_menu.add_command(\n  label='Set to \"Hi\"',\n  command=lambda: main_text.set('Hi')\n)\ntext_menu.add_command(\n  label='Set to \"There\"',\n  command=lambda: main_text.set('There')\n) \n```", "```py\nmain_menu.add_cascade(label=\"Text\", menu=text_menu) \n```", "```py\nfont_bold = tk.BooleanVar(value=False)\nfont_size = tk.IntVar(value=10)\ndef set_font(*args):\n  size = font_size.get()\n  bold = 'bold' if font_bold.get() else ''\n  font_spec = f'TkDefaultFont {size} {bold}'\n  label.config(font=font_spec)\nfont_bold.trace_add('write', set_font)\nfont_size.trace_add('write', set_font)\nset_font() \n```", "```py\nappearance_menu = tk.Menu(main_menu, tearoff=False)\nmain_menu.add_cascade(label=\"Appearance\", menu=appearance_menu)\nappearance_menu.add_checkbutton(label=\"Bold\", variable=font_bold) \n```", "```py\nsize_menu = tk.Menu(appearance_menu, tearoff=False)\nappearance_menu.add_cascade(label='Font size', menu=size_menu)\nfor size in range(8, 24, 2):\n  size_menu.add_radiobutton(\n    label=\"{} px\".format(size),\n    value=size, variable=font_size\n  ) \n```", "```py\nroot.mainloop() \n```", "```py\n# mainmenu.py\n\"\"\"The Main Menu class for ABQ Data Entry\"\"\"\nimport tkinter as tk\nfrom tkinter import messagebox \n```", "```py\nclass MainMenu(tk.Menu):\n  \"\"\"The Application's main menu\"\"\"\n  def __init__(self, parent, **kwargs):\n    super().__init__(parent, **kwargs) \n```", "```py\n# application.py, at the top after the import statements\nfrom .mainmenu import MainMenu \n```", "```py\n# application.py, inside Application.__init__()\n    self.title(\"ABQ Data Entry Application\")\n    self.columnconfigure(0, weight=1)\n    **menu = MainMenu(self)**\n    **self.config(menu=menu)** \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    help_menu = tk.Menu(self, tearoff=False)\n    help_menu.add_command(label='About…', command=self.show_about) \n```", "```py\n# mainmenu.py, inside the MainMenu class\n  def show_about(self):\n    \"\"\"Show the about dialog\"\"\"\n    about_message = 'ABQ Data Entry'\n    about_detail = (\n      'by Alan D Moore\\n'\n      'For assistance please contact the author.'\n    )\n    messagebox.showinfo(\n      title='About', message=about_message, detail=about_detail\n    ) \n```", "```py\n file_menu.add_command(\n      label=\"Select file…\",\n      command=lambda: self.event_generate('<<FileSelect>>')\n    ) \n```", "```py\n# mainmenu.py, inside MainMenu\n  def _event(self, sequence):\n    def callback(*_):\n      root = self.master.winfo_toplevel()\n      root.event_generate(sequence)\n    return callback \n```", "```py\n# mainmenu.py, inside MainMenu.__init__()\n    file_menu = tk.Menu(self, tearoff=False)\n    file_menu.add_command(\n      label=\"Select file…\",\n      command=self._event('<<FileSelect>>')\n    )\n    file_menu.add_separator()\n    file_menu.add_command(\n      label=\"Quit\",\n      command=self._event('<<FileQuit>>')\n    ) \n```", "```py\n# application.py, inside Application.__init__()\n    event_callbacks = {\n      '<<FileSelect>>': self._on_file_select,\n      '<<FileQuit>>': lambda _: self.quit(),\n    }\n    for sequence, callback in event_callbacks.items():\n      self.bind(sequence, callback) \n```", "```py\n# application.py, inside Application.__init__()\n# before the menu setup\n  self.settings = {\n    'autofill date': tk.BooleanVar(),\n    'autofill sheet data': tk.BooleanVar()\n  } \n```", "```py\n# views.py, inside DataRecordForm class\n  def __init__(self, parent, model, **settings**, *args, **kwargs):\n    super().__init__(parent, *args, **kwargs)\n    self.model = model\n    **self.settings = settings** \n```", "```py\n# mainmenu.py, inside MainMenu class\n  def __init__(self, parent, **settings**, **kwargs):\n    super().__init__(parent, **kwargs)\n    **self.settings = settings** \n```", "```py\n# application.py, in Application.__init__()\n  # update the menu creation line:\n  menu = MainMenu(self, **self.settings**)\n  #...\n  # update the data record form creation line:\n  self.recordform = v.DataRecordForm(\n    self,\n    self.model,\n    **self.settings**\n  ) \n```", "```py\n# mainmenu.py, in MainMenu.__init__()\n    options_menu = tk.Menu(self, tearoff=False)\n    options_menu.add_checkbutton(\n      label='Autofill Date',\n      variable=self.settings['autofill date']\n    )\n    options_menu.add_checkbutton(\n      label='Autofill Sheet data',\n      variable=self.settings['autofill sheet data']\n    ) \n```", "```py\n# views.py, in DataRecordForm.reset()\n    **if** **self.settings[****'autofill date'****].get():**\n      current_date = datetime.today().strftime('%Y-%m-%d')\n      self._vars['Date'].set(current_date)\n      self._vars['Time'].label_widget.input.focus() \n```", "```py\n if (\n      **self.settings[****'autofill sheet data'****].get()** **and**\n      plot not in ('', 0, plot_values[-1])\n    ):\n      self._vars['Lab'].set(lab)\n      self._vars['Time'].set(time)\n      # etc... \n```", "```py\n# mainmenu.py, at the end of MainMenu.__init__()\n    self.add_cascade(label='File', menu=file_menu)\n    self.add_cascade(label='Options', menu=options_menu)\n    self.add_cascade(label='Help', menu=help_menu) \n```", "```py\nimport json \n```", "```py\n# models.py, at the bottom\nclass SettingsModel:\n  \"\"\"A model for saving settings\"\"\"\n  fields = {\n    'autofill date': {'type': 'bool', 'value': True},\n    'autofill sheet data': {'type': 'bool', 'value': True}\n  } \n```", "```py\n# models.py, in SettingsModel\n  def __init__(self):\n    filename = 'abq_settings.json'\n    self.filepath = Path.home() / filename \n```", "```py\n# models.py, at the end of SettingsModel.__init__()\n    self.load() \n```", "```py\n def load(self):\n    with open(self.filepath, 'r') as fh:\n      self.fields = json.load(fh) \n```", "```py\n# models.py, inside the SettingsModel class\n  def load(self):\n    if not self.filepath.exists():\n      return\n    with open(self.filepath, 'r') as fh:\n      raw_values = json.load(fh)\n    for key in self.fields:\n      if key in raw_values and 'value' in raw_values[key]:\n        raw_value = raw_values[key]['value']\n        self.fields[key]['value'] = raw_value \n```", "```py\n# models.py, inside the SettingsModel class\n  def save(self):\n    with open(self.filepath, 'w') as fh:\n      json.dump(self.fields, fh) \n```", "```py\ndef set(self, key, value):\n  self.fields[key]['value'] = value \n```", "```py\n# models.py, inside the SettingsModel class\n  def set(self, key, value):\n    if (\n      key in self.fields and\n      type(value).__name__ == self.fields[key]['type']\n    ):\n      self.fields[key]['value'] = value\n    else:\n      raise ValueError(\"Bad key or wrong variable type\") \n```", "```py\n# application.py, inside Application.__init__()\n    self.settings_model = m.SettingsModel()\n    self._load_settings() \n```", "```py\n# application.py, inside the Application class\n  def _load_settings(self):\n    \"\"\"Load settings into our self.settings dict.\"\"\"\n    vartypes = {\n      'bool': tk.BooleanVar,\n      'str': tk.StringVar,\n      'int': tk.IntVar,\n      'float': tk.DoubleVar\n    }\n    self.settings = dict()\n    for key, data in self.settings_model.fields.items():\n      vartype = vartypes.get(data['type'], tk.StringVar)\n      self.settings[key] = vartype(value=data['value']) \n```", "```py\n# application.py, inside Application._load_settings()\n    for var in self.settings.values():\n      var.trace_add('write', self._save_settings) \n```", "```py\n def _save_settings(self, *_):\n    for key, variable in self.settings.items():\n      self.settings_model.set(key, variable.get())\n    self.settings_model.save() \n```"]