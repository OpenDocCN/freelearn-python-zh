["```py\npython3 -m pip install --user coverage\n```", "```py\nfrom unittest import TestCase\nimport toy\n\nclass test_global_function(TestCase):\n    def test_positive(self):\n        self.assertEqual(toy.global_function(3), 4)\n\n    def test_negative(self):\n        self.assertEqual(toy.global_function(-3), -2)\n\n    def test_large(self):\n        self.assertEqual(toy.global_function(2**13), 2**13 + 1)\n\nclass test_example_class(TestCase):\n    def test_timestwo(self):\n        example = toy.Example(5)\n        self.assertEqual(example.timestwo(), 10)\n```", "```py\ndef global_function(x):\n    r\"\"\"\n    >>> global_function(5)\n    6\n    \"\"\"\n    return x + 1\n\nclass Example:\n    def __init__(self, param):\n        self.param = param\n\n    def timestwo(self):\n        return self.param * 2\n\n    def __repr__(self):\n        return 'Example({!r})'.format(self.param)\n\nif __name__ == '__main__':\n    import doctest\n    doctest.testmod()\n```", "```py\npython -m nose --with-coverage --cover-erase\n```", "```py\n.....\nName    Stmts   Miss  Cover   Missing\n-------------------------------------\ntoy        12      3    75%   16, 19-20\n----------------------------------------------------------------------\nRan 5 tests in 0.053s\n\nOK\n```", "```py\n@echo offpythonw prepare-commit-msg.py\n```", "```py\n#!/usr/bin/env python3\nfrom sys import argv\nfrom subprocess import check_output, CalledProcessError, STDOUT\n\nPYTHON = ['pythonw', 'python']\nNOSE = ['-m', 'nose', '--with-coverage', '--cover-erase']\n\nlines = ['', '# Nose test report:']\n\nreport = None\n\ntry:\n    for command in PYTHON:\n        try:\n            report = check_output([command] + NOSE,\n                                  stderr=STDOUT,\n                                  universal_newlines=True)\n        except FileNotFoundError:\n            pass\n        else:\n            break\nexcept CalledProcessError as x:\n    report = x.output\n\nif report is None:\n    lines.append('#    Unable to run Python.')\nelse:\n    for line in report.splitlines():\n        if not line:\n            lines.append('')\n        else:\n            lines.append('# ' + line)\n\nwith open(argv[1], 'r') as f:\n    lines.append(f.read())\n\nwith open(argv[1], 'w') as f:\n    f.write('\\n'.join(lines))\n```", "```py\ngit commit -a\n```", "```py\n$ svnadmin create svnrepo/\n```", "```py\ntestuser = testpass\n```", "```py\n# password-db = passwd\n```", "```py\npassword-db = passwd\n```", "```py\nsvnserve -d -r ..\n```", "```py\nfrom unittest import TestCase\n\nclass test_simple(TestCase):\n    def test_one(self):\n        self.assertNotEqual(\"Testing\", \"Hooks\")\n\n    def test_two(self):\n        self.assertEqual(\"Same\", \"Same\")\n```", "```py\n$ svn import --username=testuser --password=testpass svn://localhost/svnrepo/\n```", "```py\n$ svn checkout --username=testuser --password=testpass svn://localhost/svnrepo/ svn\n```", "```py\n#!/bin/sh\nREPO=\"$1\"\n\nif /usr/bin/test -e \"$REPO/working\"; then\n    /usr/bin/svn update --username=testuser --password=testpass \"$REPO/working/\";\nelse\n    /usr/bin/svn checkout --username=testuser --password=testpass svn://localhost/svnrepo/ \"$REPO/working/\";\nfi\n\ncd \"$REPO/working/\"\n\nexec /usr/bin/nosetests\n```", "```py\nfrom unittest import TestCase\n\nclass test_simple(TestCase):\n    def test_one(self):\n        self.assertNotEqual(\"Testing\", \"Hooks\")\n\n    def test_two(self):\n        self.assertEqual(\"Same\", \"Same!\")\n```", "```py\n$ svn commit --username=testuser --password=testpass\n```", "```py\n$ hg init\n```", "```py\n[hooks]\ncommit = python3 -m nose\n```", "```py\nfrom unittest import TestCase\n\nclass test_simple(TestCase):\n    def test_one(self):\n        self.assertNotEqual(\"Testing\", \"Hooks\")\n\n    def test_two(self):\n        self.assertEqual(\"Same\", \"Same\")\n```", "```py\n$ hg add\n$ hg commit\n```", "```py\nfrom bzrlib import branch\nfrom os.path import join, sep\nfrom os import chdir\nfrom subprocess import call\n\ndef run_nose(local, master, old_num, old_id, new_num, new_id):\n    try:\n        base = local.base\n    except AttributeError:\n        base = master.base\n\n    if not base.startswith('file://'):\n        return\n\n    try:\n        chdir(join(sep, *base[7:].split('/')))\n    except OSError:\n        return\n\n    call(['nosetests'])\n\nbranch.Branch.hooks.install_named_hook('post_commit',\n                                       run_nose,\n                                       'Runs Nose after each commit')\n```", "```py\n$ buildbot create-master <directory>\n```", "```py\n$ buildslave create-slave <directory> <host:port> <name> <password>\n```", "```py\n$ buildbot start <directory>\n```", "```py\n# -*- python -*-\n# ex: set syntax=python:\n\nc = BuildmasterConfig = {}\n\nc['projectName'] = \"<replace with project name>\"\nc['projectURL'] = \"<replace with project url>\"\nc['buildbotURL'] = \"http://<replace with master url>:8010/\"\n\nc['status'] = []\nfrom buildbot.status import html\nc['status'].append(html.WebStatus(http_port=8010,\n                                  allowForce=True))\n\nc['slavePortnum'] = 9989\n\nfrom buildbot.buildslave import BuildSlave\nc['slaves'] = [\n    BuildSlave(\"bot1name\", \"bot1passwd\"),\n    ]\n\nfrom buildbot.changes.pb import PBChangeSource\nc['change_source'] = PBChangeSource()\n\nfrom buildbot.scheduler import Scheduler\nc['schedulers'] = []\nc['schedulers'].append(Scheduler(name=\"all\", branch=None,\n                                 treeStableTimer=2 * 60,\n                                 builderNames=[\"buildbot-full\"]))\n\nfrom buildbot.process import factory\nfrom buildbot.steps.source.git import Git\nfrom buildbot.steps.shell import Test\nf1 = factory.BuildFactory()\nf1.addStep(Git(repourl=\"<replace with repository url>\"))\nf1.addStep(Test(command = ['python3', '-m' 'nose']))\n\nb1 = {'name': \"buildbot-full\",\n      'slavename': \"bot1name\",\n      'builddir': \"full\",\n      'factory': f1,\n      }\nc['builders'] = [b1]\n```", "```py\nf1.addStep(Test(command = ['python3', '-m' 'nose']))\n```", "```py\nc['schedulers'].append(Scheduler(name=\"all\", branch=None,\n                                 treeStableTimer=2 * 60,\n                                 builderNames=[\"buildbot-full\"]))\n```"]