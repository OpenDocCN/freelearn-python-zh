["```py\nimport sys\nprint(f'Reference count when direct-referencing:  \\\n  {sys.getrefcount([7])}.')\na = [7]\nprint(f'Reference count when referenced once:  \\\n  {sys.getrefcount(a)}.')\nb = a\nprint(f'Reference count when referenced twice:  \\\n  {sys.getrefcount(a)}.')\n###########################################################\na[0] = 8\nprint(f'Variable a after a is changed: {a}.')\nprint(f'Variable b after a is changed: {b}.')\nprint('Finished.')\n```", "```py\n> python3 example1.py\nReference count when direct-referencing: 1.\nReference count when referenced once: 2.\nReference count when referenced twice: 3.\nVariable a after a is changed: [8].\nVariable b after a is changed: [8].\nFinished.\n```", "```py\nimport time\nimport threading\nCOUNT = 50000000\ndef countdown(n):\n    while n > 0:\n        n -= 1\n###########################################################\nstart = time.time()\ncountdown(COUNT)\nprint('Sequential program finished.')\nprint(f'Took {time.time() - start : .2f} seconds.')\n###########################################################\nthread1 = threading.Thread(target=countdown, args=(  \\\n  COUNT // 2,))\nthread2 = threading.Thread(target=countdown, args=(  \\\n  COUNT // 2,))\nstart = time.time()\nthread1.start()\nthread2.start()\nthread1.join()\nthread2.join()\nprint('Concurrent program finished.')\nprint(f'Took {time.time() - start : .2f} seconds.')\n```", "```py\n> python3 example2.py\nSequential program finished.\nTook 2.80 seconds.\nConcurrent program finished.\nTook 2.74 seconds.\n```", "```py\nCOUNT = 50000000\ndef countdown(n):\n    while n > 0:\n        n -= 1\nif __name__ == '__main__':\n    #######################################################\n    # Sequential\n    start = time.time()\n    countdown(COUNT)\n    #######################################################\n    # Multithreading\n    thread1 = threading.Thread(target=countdown,  \\\n      args=(COUNT // 2,))\n    thread2 = threading.Thread(target=countdown,  \\\n      args=(COUNT // 2,))\n    start = time.time()\n    thread1.start()\n    thread2.start()\n    thread1.join()\n    thread2.join()\n    #######################################################\n    # Multiprocessing\n    pool = Pool(processes=2)\n    start = time.time()\n    pool.apply_async(countdown, args=(COUNT//2,))\n    pool.apply_async(countdown, args=(COUNT//2,))\n    pool.close()\n    pool.join()\n```", "```py\n> python3 example3.py\nSequential program finished.\nTook 2.95 seconds.\nMultithreading program finished.\nTook 2.69 seconds.\nMultiprocessing program finished.\nTook 1.54 seconds.\n```"]