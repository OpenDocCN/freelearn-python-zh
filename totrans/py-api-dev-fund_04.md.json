["```py\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpYXQiOjE1NjQ5ODI5OTcs Im5iZiI6MTU2NDk4Mjk5NywianRpIjoiMGIzOTVlODQtNjFjMy00NjM3LTkwMzYtZjgyZDgy YTllNzc5IiwiZXhwIjoxNTY0OTgzODk3LCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ 0eXBlIjoiYWNjZXNzIn0.t6F3cnAmbUXY_PwLnnBkKD3Z6aJNvIDQ6khMJWj9xZM\n```", "```py\n>>> import base64\n>>> header = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9'\n>>> base64.b64decode(header)\nb'{\"typ\":\"JWT\",\"alg\":\"HS256\"}'\n```", "```py\n>>> import base64\n>>> payload = 'eyJpYXQiOjE1NjQ5ODI5OTcsIm5iZiI6MTU2NDk4Mjk5NywianRpI joiMGIzOTVlODQtNjFjMy00NjM3LTkwMzYtZjgyZDgyYTllNzc5IiwiZXhwIjoxNTY0 OTgzODk3LCJpZGVudGl0eSI6MywiZnJlc2giOmZhbHNlLCJ0eXBlIjoiYWNjZXNzIn0'\n>>> base64.b64decode(payload + '==')\nb'{\"iat\":1564982997,\"nbf\":1564982997,\"jti\":\"0b395e84-61c3-4637-9036-f82d82a9e779\",\"exp\":1564983897,\"identity\":3,\"fresh\":false,\"type\":\"access\"}'\n```", "```py\n    Flask-JWT-Extended==3.20.0\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: PyJWT, Flask-JWT-Extended\n      Running setup.py install for Flask-JWT-Extended ... done\n    Successfully installed Flask-JWT-Extended-3.20.0 PyJWT-1.7.1\n    ```", "```py\n    SECRET_KEY = 'super-secret-key'\n    JWT_ERROR_MESSAGE_KEY = 'message'\n    ```", "```py\n    from flask_jwt_extended import JWTManager\n    jwt = JWTManager()\n    ```", "```py\n    from extensions import db, jwt\n    def register_extensions(app):\n        db.init_app(app)\n        migrate = Migrate(app, db)\n        jwt.init_app(app)\n    ```", "```py\n    from http import HTTPStatus\n    from flask import request\n    from flask_restful import Resource\n    from flask_jwt_extended import create_access_token\n    from utils import check_password\n    from models.user import User\n    ```", "```py\n    class TokenResource(Resource):\n    ```", "```py\n        def post(self):\n            json_data = request.get_json()\n            email = json_data.get('email')\n            password = json_data.get('password')\n            user = User.get_by_email(email=email)\n            if not user or not check_password(password, user.password):\n                return {'message': 'email or password is incorrect'}, HTTPStatus.UNAUTHORIZED\n            access_token = create_access_token(identity=user.id)\n            return {'access_token': access_token}, HTTPStatus.OK\n    ```", "```py\n    from flask_jwt_extended import jwt_optional, get_jwt_identity\n    ```", "```py\n    class UserResource(Resource):\n    ```", "```py\n        @jwt_optional\n        def get(self, username):\n    ```", "```py\n\n            user = User.get_by_username(username=username)\n\n            if user is None:\n                return {'message': 'user not found'}, HTTPStatus.NOT_FOUND\n    ```", "```py\n            current_user = get_jwt_identity()\n    ```", "```py\n            if current_user == user.id:\n                data = {\n                    'id': user.id,\n                    'username': user.username,\n                    'email': user.email,\n                }\n            else:\n                data = {\n                    'id': user.id,\n                    'username': user.username,\n                }\n            return data, HTTPStatus.OK\n    ```", "```py\n    from resources.user import UserListResource, UserResource\n    from resources.token import TokenResource\n    def register_resources(app):\n        api = Api(app)\n      api.add_resource(UserListResource, '/users')\n        api.add_resource(UserResource, '/users/<string:username>')\n        api.add_resource(TokenResource, '/token')\n    ```", "```py\n    {\n        \"username\": \"james\",\n        \"email\": \"james@gmail.com\",\n        \"password\": \"WkQad19\"\n    }\n    ```", "```py\n    {\n        \"email\": \"james@gmail.com\",\n        \"password\": \"WkQad19\"\n    }\n    ```", "```py\n    @classmethod \n    def get_by_id(cls, id):         \n            return cls.query.filter_by(id=id).first() \n    ```", "```py\n    from flask_jwt_extended import jwt_optional, get_jwt_identity, jwt_required\n    class MeResource(Resource):\n        @jwt_required\n        def get(self):\n            user = User.get_by_id(id=get_jwt_identity())\n            data = {\n                    'id': user.id,\n                    'username': user.username,\n                    'email': user.email,\n            }\n            return data, HTTPStatus.OK\n    ```", "```py\n    from resources.user import UserListResource, UserResource, MeResource\n    api.add_resource(MeResource, '/me')\n    ```", "```py\n        def data(self):\n            return {\n                'id': self.id,\n                'name': self.name,\n                'description': self.description,\n                'num_of_servings': self.num_of_servings,\n                'cook_time': self.cook_time,\n                'directions': self.directions,\n                'user_id': self.user_id\n            }\n        @classmethod\n        def get_all_published(cls):\n            return cls.query.filter_by(is_publish=True).all()\n        @classmethod\n        def get_by_id(cls, recipe_id):\n            return cls.query.filter_by(id=recipe_id).first()\n        def save(self):\n            db.session.add(self)\n            db.session.commit()\n        def delete(self):\n            db.session.delete(self)\n            db.session.commit()\n    ```", "```py\n    recipe_list = []\n\n    def get_last_id():\n        if recipe_list:\n            last_recipe = recipe_list[-1]\n        else:\n            return 1\n        return last_recipe.id + 1\n    ```", "```py\n    from flask_jwt_extended import get_jwt_identity, jwt_required, jwt_optional\n    ```", "```py\n    from models.recipe import Recipe\n    ```", "```py\n    class RecipeListResource(Resource):\n        def get(self):\n            recipes = Recipe.get_all_published()\n            data = []\n            for recipe in recipes:\n                data.append(recipe.data())\n             return {'data': data}, HTTPStatus.OK\n    ```", "```py\n        @jwt_required\n        def post(self):\n            json_data = request.get_json()\n            current_user = get_jwt_identity()\n            recipe = Recipe(name= json_data['name'],\n                            description= json_data['description'],\n                            num_of_servings= json_data['num_of_servings'],\n                            cook_time= json_data['cook_time'],\n                            directions= json_data['directions'],\n                            user_id=current_user)\n            recipe.save()\n            return recipe.data(), HTTPStatus.CREATED\n    ```", "```py\n    class RecipeResource(Resource):\n        @jwt_optional\n        def get(self, recipe_id):\n            recipe = Recipe.get_by_id(recipe_id=recipe_id)\n            if recipe is None:\n                return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if recipe.is_publish == False and recipe.user_id != current_user:\n                return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n            return recipe.data(), HTTPStatus.OK\n    ```", "```py\n        @jwt_required\n        def put(self, recipe_id):\n            json_data = request.get_json()\n            recipe = Recipe.get_by_id(recipe_id=recipe_id)\n            if recipe is None:\n                return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user != recipe.user_id:\n                return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n            recipe.name = json_data['name']\n            recipe.description = json_data['description']\n            recipe.num_of_servings = json_data['num_of_servings']\n            recipe.cook_time = json_data['cook_time']\n            recipe.directions = json_data['directions']\n            recipe.save()\n            return recipe.data(), HTTPStatus.OK\n    ```", "```py\n        @jwt_required\n        def delete(self, recipe_id):\n            recipe = Recipe.get_by_id(recipe_id=recipe_id)\n            if recipe is None:\n                return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user != recipe.user_id:\n                return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n            recipe.delete()\n            return {}, HTTPStatus.NO_CONTENT\n    ```", "```py\n    {\n        \"name\": \"Cheese Pizza\",\n        \"description\": \"This is a lovely cheese pizza\",\n        \"num_of_servings\": 2,\n        \"cook_time\": 30,\n        \"directions\": \"This is how you make it\"\n    }\n    ```", "```py\n    from flask_jwt_extended import (\n        create_access_token,\n        create_refresh_token,\n        jwt_refresh_token_required,\n        get_jwt_identity\n    )\n    ```", "```py\n        def post(self):\n            data = request.get_json()\n            email = data.get('email')\n            password = data.get('password')\n            user = User.get_by_email(email=email)\n            if not user or not check_password(password, user.password):\n                return {'message': 'username or password is incorrect'}, HTTPStatus.UNAUTHORIZED\n            access_token = create_access_token(identity=user.id, fresh=True)\n            refresh_token = create_refresh_token(identity=user.id)\n            return {'access_token': access_token, 'refresh_token': refresh_token}, HTTPStatus.OK\n    ```", "```py\n    class RefreshResource(Resource):\n        @jwt_refresh_token_required\n        def post(self):\n            current_user = get_jwt_identity()\n            access_token = create_access_token(identity=current_user, fresh=False)\n            return {access_token: access_token}, HTTPStatus.OK\n    ```", "```py\n    from resources.token import TokenResource, RefreshResource\n    def register_resources(app):\n        api.add_resource(RefreshResource, '/refresh')\n    ```", "```py\n    {\n        \"email\": \"james@gmail.com\",\n        \"password\": \"WkQad19\"\n    }\n    ```", "```py\n    from flask_jwt_extended import (\n        create_access_token,\n        create_refresh_token,\n        jwt_refresh_token_required,\n        get_jwt_identity,\n        jwt_required,\n        get_raw_jwt\n    )\n    ```", "```py\n    black_list = set()\n    ```", "```py\n    class RevokeResource(Resource):\n        @jwt_required\n        def post(self):\n            jti = get_raw_jwt()['jti']\n            black_list.add(jti)\n             return {'message': 'Successfully logged out'}, HTTPStatus.OK\n    ```", "```py\n    class Config:\n        JWT_BLACKLIST_ENABLED = True\n        JWT_BLACKLIST_TOKEN_CHECKS = ['access', 'refresh']\n    ```", "```py\n    from resources.token import TokenResource, RefreshResource, RevokeResource, black_list\n    ```", "```py\n    def register_extensions(app):\n        db.app = app\n        db.init_app(app)\n        migrate = Migrate(app, db)\n        jwt.init_app(app)\n        @jwt.token_in_blacklist_loader\n        def check_if_token_in_blacklist(decrypted_token):\n            jti = decrypted_token['jti']\n            return jti in black_list\n    ```", "```py\n    def register_resources(app):\n        api.add_resource(TokenResource, '/token')\n        api.add_resource(RefreshResource, '/refresh')\n        api.add_resource(RevokeResource, '/revoke')\n    ```"]