["```py\nimport wx\napp = wx.App()\nframe = wx.Frame(None, -1, \"Hello World\")\nframe.Show()\napp.MainLoop()\n```", "```py\n# Import wxPython GUI toolkit\nimport wx\n\n# Subclass wxPython frame\nclass GUI(wx.Frame):\n    def __init__(self, parent, title, size=(200,100)):\n        # Initialize super class\n        wx.Frame.__init__(self, parent, title=title, size=size)\n\n        # Change the frame background color \n        self.SetBackgroundColour('white')\n\n        # Create Status Bar\n        self.CreateStatusBar() \n\n        # Create the Menu\n        menu= wx.Menu()\n\n        # Add Menu Items to the Menu\n        menu.Append(wx.ID_ABOUT, \"About\", \"wxPython GUI\")\n        menu.AppendSeparator()\n        menu.Append(wx.ID_EXIT,\"Exit\",\" Exit the GUI\")\n\n        # Create the MenuBar\n        menuBar = wx.MenuBar()\n\n        # Give the MenuBar a Title\n        menuBar.Append(menu,\"File\") \n\n        # Connect the MenuBar to the frame\n        self.SetMenuBar(menuBar)  \n\n        # Display the frame\n        self.Show()\n\n# Create instance of wxPython application\napp = wx.App()\n\n# Call sub-classed wxPython GUI increasing default Window size\nGUI(None, \"Python GUI using wxPython\", (300,150))\n\n# Run the main GUI event loop\napp.MainLoop()\n```", "```py\nimport wx               # Import wxPython GUI toolkit\nclass GUI(wx.Panel):    # Subclass wxPython Panel\n    def __init__(self, parent):\n\n        # Initialize super class\n        wx.Panel.__init__(self, parent)\n\n        # Create Status Bar\n        parent.CreateStatusBar() \n\n        # Create the Menu\n        menu= wx.Menu()\n\n        # Add Menu Items to the Menu\n        menu.Append(wx.ID_ABOUT, \"About\", \"wxPython GUI\")\n        menu.AppendSeparator()\n        menu.Append(wx.ID_EXIT,\"Exit\",\" Exit the GUI\")\n\n        # Create the MenuBar\n        menuBar = wx.MenuBar()\n\n        # Give the Menu a Title\n        menuBar.Append(menu,\"File\") \n\n        # Connect the MenuBar to the frame\n        parent.SetMenuBar(menuBar)  \n\n        # Create a Print Button\n        button = wx.Button(self, label=\"Print\", pos=(0,60))\n\n        # Connect Button to Click Event method \n        self.Bind(wx.EVT_BUTTON, self.printButton, button)\n\n        # Create a Text Control widget \n        self.textBox = wx.TextCtrl(\nself, size=(280,50), style=wx.TE_MULTILINE)\n\n    def printButton(self, event):\n        self.textBox.AppendText(\n\"The Print Button has been clicked!\") \n\napp = wx.App()      # Create instance of wxPython application\nframe = wx.Frame(None, title=\"Python GUI using wxPython\", size=(300,180))     # Create frame\nGUI(frame)          # Pass frame into GUI\nframe.Show()        # Display the frame\napp.MainLoop()      # Run the main GUI event loop\n```", "```py\nimport wx\nBACKGROUNDCOLOR = (240, 240, 240, 255)\n\nclass MainFrame(wx.Frame):\n    def __init__(self, *args, **kwargs):\n        wx.Frame.__init__(self, *args, **kwargs)\n\n        self.createWidgets()\n        self.Show()\n\n    def exitGUI(self, event):     # callback\n        self.Destroy()\n\n    def createWidgets(self):   \n        self.CreateStatusBar()      # wxPython built-in method\n        self.createMenu()\n       self.createNotebook()\n```", "```py\n    def createNotebook(self):\n        panel = wx.Panel(self)\n        notebook = wx.Notebook(panel)\n        widgets = Widgets(notebook) # Custom class explained below\n        notebook.AddPage(widgets, \"Widgets\")\n        notebook.SetBackgroundColour(BACKGROUNDCOLOR) \n        # layout\n        boxSizer = wx.BoxSizer()\n        boxSizer.Add(notebook, 1, wx.EXPAND)\n        panel.SetSizerAndFit(boxSizer)  \n```", "```py\nclass Widgets(wx.Panel):\n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent)\n        self.createWidgetsFrame()\n        self.addWidgets()\n        self.layoutWidgets()\n```", "```py\n    #------------------------------------------------------\n    def createWidgetsFrame(self):\n        self.panel = wx.Panel(self)\n        staticBox = wx.StaticBox( self.panel, -1, \"Widgets Frame\" )    \n        self.statBoxSizerV = wx.StaticBoxSizer(staticBox, \n                                               wx.VERTICAL)\n    #-----------------------------------------------------\n    def layoutWidgets(self):         \n        boxSizerV = wx.BoxSizer( wx.VERTICAL )\n        boxSizerV.Add( self.statBoxSizerV, 1, wx.ALL )\n        self.panel.SetSizer( boxSizerV )\n        boxSizerV.SetSizeHints( self.panel )\n\n    #------------------------------------------------------\n    def addWidgets(self):\n        self.addCheckBoxes()        \n        self.addRadioButtons()\n        self.addStaticBoxWithLabels()\n```", "```py\n    def addStaticBoxWithLabels(self):\n        boxSizerH = wx.BoxSizer(wx.HORIZONTAL)\n        staticBox = wx.StaticBox( self.panel, -1, \n\"Labels within a Frame\" )\n        staticBoxSizerV = wx.StaticBoxSizer( staticBox, wx.VERTICAL )\n        boxSizerV = wx.BoxSizer( wx.VERTICAL )\n        staticText1 = wx.StaticText( self.panel, -1,\n\"Choose a number:\" )\n        boxSizerV.Add( staticText1, 0, wx.ALL)\n        staticText2 = wx.StaticText( self.panel, -1,\"Label 2\")\n        boxSizerV.Add( staticText2, 0, wx.ALL )\n        #------------------------------------------------------\n        staticBoxSizerV.Add( boxSizerV, 0, wx.ALL )\n        boxSizerH.Add(staticBoxSizerV)\n        #------------------------------------------------------\n        boxSizerH.Add(wx.TextCtrl(self.panel))\n        # Add local boxSizer to main frame\n        self.statBoxSizerV.Add( boxSizerH, 1, wx.ALL )\n```", "```py\nclass Widgets(wx.Panel):\n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent)\n        self.panel = wx.Panel(self)\n        self.createWidgetsFrame()\n        self.createManageFilesFrame()\n        self.addWidgets()\n        self.addFileWidgets()\n        self.layoutWidgets()\n\n    #----------------------------------------------------------\n    def createWidgetsFrame(self):\n        staticBox = wx.StaticBox( \nself.panel, -1, \"Widgets Frame\", size=(285, -1) )   \n        self.statBoxSizerV = wx.StaticBoxSizer(\nstaticBox, wx.VERTICAL)   \n\n    #----------------------------------------------------------\n    def createManageFilesFrame(self):\n        staticBox = wx.StaticBox( \nself.panel, -1, \"Manage Files\", size=(285, -1) )   \n        self.statBoxSizerMgrV = wx.StaticBoxSizer(\nstaticBox, wx.VERTICAL)\n\n    #----------------------------------------------------------\n    def layoutWidgets(self):         \n        boxSizerV = wx.BoxSizer( wx.VERTICAL )\n        boxSizerV.Add( self.statBoxSizerV, 1, wx.ALL )\n        boxSizerV.Add( self.statBoxSizerMgrV, 1, wx.ALL )\n\n        self.panel.SetSizer( boxSizerV )\n        boxSizerV.SetSizeHints( self.panel )\n\n    #----------------------------------------------------------\n    def addFileWidgets(self):   \n        boxSizerH = wx.BoxSizer(wx.HORIZONTAL)\n        boxSizerH.Add(wx.Button(\nself.panel, label='Browse to File...'))   \n        boxSizerH.Add(wx.TextCtrl(\nself.panel, size=(174, -1), value= \"Z:\\\\\" ))\n\n        boxSizerH1 = wx.BoxSizer(wx.HORIZONTAL)\n        boxSizerH1.Add(wx.Button(\nself.panel, label='Copy File To:    ')) \n        boxSizerH1.Add(wx.TextCtrl(\nself.panel, size=(174, -1), value= \"Z:\\\\Backup\" ))    \n\n        boxSizerV = wx.BoxSizer(wx.VERTICAL)\n        boxSizerV.Add(boxSizerH)\n        boxSizerV.Add(boxSizerH1)        \n\n        self.statBoxSizerMgrV.Add( boxSizerV, 1, wx.ALL )\n```", "```py\n#======================\n# Start GUI\n#======================\napp = wx.App()\nMainFrame(None, title=\"Python GUI using wxPython\", size=(350,450))\napp.MainLoop()\n```", "```py\n#===========================================================\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import scrolledtext\n\nwin = tk.Tk()    \n\nwin.title(\"Python GUI\")\naLabel = ttk.Label(win, text=\"A Label\")\naLabel.grid(column=0, row=0)    \nttk.Label(win, text=\"Enter a name:\").grid(column=0, row=0)\nname = tk.StringVar()\nnameEntered = ttk.Entry(win, width=12, textvariable=name)\nnameEntered.grid(column=0, row=1)\nttk.Label(win, text=\"Choose a number:\").grid(column=1, row=0)\nnumber = tk.StringVar()\nnumberChosen = ttk.Combobox(win, width=12, textvariable=number)\nnumberChosen['values'] = (1, 2, 4, 42, 100)\nnumberChosen.grid(column=1, row=1)\nnumberChosen.current(0)\nscrolW  = 30\nscrolH  =  3\nscr = scrolledtext.ScrolledText(win, width=scrolW, height=scrolH, wrap=tk.WORD)\nscr.grid(column=0, sticky='WE', columnspan=3)\nnameEntered.focus()  \n\n#===========================================================\ndef wxPythonApp():\n    import wx\n    app = wx.App()\n    frame = wx.Frame(None, -1, \"wxPython GUI\", size=(200,150))\n    frame.SetBackgroundColour('white')\n    frame.CreateStatusBar()\n    menu= wx.Menu()\n    menu.Append(wx.ID_ABOUT, \"About\", \"wxPython GUI\")\n    menuBar = wx.MenuBar()\n    menuBar.Append(menu,\"File\") \n    frame.SetMenuBar(menuBar)     \n    frame.Show()\n    app.MainLoop()\n\naction = ttk.Button(win, text=\"Call wxPython GUI\", command= wxPythonApp ) \naction.grid(column=2, row=1)\n\n#======================\n# Start GUI\n#======================\nwin.mainloop()\n```", "```py\n#=============================================================\ndef tkinterApp():\n    import tkinter as tk\n    from tkinter import ttk\n    win = tk.Tk()    \n    win.title(\"Python GUI\")\n    aLabel = ttk.Label(win, text=\"A Label\")\n    aLabel.grid(column=0, row=0)    \n    ttk.Label(win, text=\"Enter a name:\").grid(column=0, row=0)\n    name = tk.StringVar()\n    nameEntered = ttk.Entry(win, width=12, textvariable=name)\n    nameEntered.grid(column=0, row=1)\n    nameEntered.focus()  \n    def buttonCallback():\n        action.configure(text='Hello ' + name.get())\n    action = ttk.Button(win, text=\"Print\", command=buttonCallback)\n    action.grid(column=2, row=1)\n    win.mainloop()\n\n#=============================================================\nimport wx\napp = wx.App()\nframe = wx.Frame(None, -1, \"wxPython GUI\", size=(200,180))\nframe.SetBackgroundColour('white')\nframe.CreateStatusBar()\nmenu= wx.Menu()\nmenu.Append(wx.ID_ABOUT, \"About\", \"wxPython GUI\")\nmenuBar = wx.MenuBar()\nmenuBar.Append(menu,\"File\") \nframe.SetMenuBar(menuBar) \ntextBox = wx.TextCtrl(frame, size=(180,50), style=wx.TE_MULTILINE)\n\ndef tkinterEmbed(event):\n    tkinterApp()\n\nbutton = wx.Button(frame, label=\"Call tkinter GUI\", pos=(0,60)) \nframe.Bind(wx.EVT_BUTTON, tkinterEmbed, button)\nframe.Show()\n\n#======================\n# Start wxPython GUI\n#======================\napp.MainLoop()\n```", "```py\ndef wxPythonApp():\n    import wx\n    app = wx.App()\n    frame = wx.Frame(None, -1, \"wxPython GUI\", size=(200,150))\n    frame.SetBackgroundColour('white')\n    frame.CreateStatusBar()\n    menu= wx.Menu()\n    menu.Append(wx.ID_ABOUT, \"About\", \"wxPython GUI\")\n    menuBar = wx.MenuBar()\n    menuBar.Append(menu,\"File\") \n    frame.SetMenuBar(menuBar)     \n    frame.Show()\n    app.MainLoop()\n\ndef tryRunInThread():\n    runT = Thread(target=wxPythonApp)\n    runT.setDaemon(True)    \n    runT.start()\n    print(runT)\n    print('createThread():', runT.isAlive())    \n\naction = ttk.Button(win, text=\"Call wxPython GUI\", command=tryRunInThread)\n```", "```py\ndef wxPythonApp():\n    import wx\n    app = wx.App()\n    frame = wx.Frame(None, -1, \"wxPython GUI\", size=(200,150))\n    frame.SetBackgroundColour('white')\n    frame.CreateStatusBar()\n    menu= wx.Menu()\n    menu.Append(wx.ID_ABOUT, \"About\", \"wxPython GUI\")\n    menuBar = wx.MenuBar()\n    menuBar.Append(menu,\"File\") \n    frame.SetMenuBar(menuBar)     \n    frame.Show()\n\n    runT = Thread(target=app.MainLoop)\n    runT.setDaemon(True)    \n    runT.start()\n    print(runT)\n    print('createThread():', runT.isAlive())\n\naction = ttk.Button(win, text=\"Call wxPython GUI\", command=wxPythonApp) \naction.grid(column=2, row=1)\n```", "```py\n# Ch09_Communicate.py\nimport tkinter as tk\nfrom tkinter import ttk\nfrom threading import Thread\n\nwin = tk.Tk()       \nwin.title(\"Python GUI\")   \n\nfrom multiprocessing import Queue\nsharedQueue = Queue()\ndataInQueue = False\n\ndef putDataIntoQueue(data):\n    global dataInQueue\n    dataInQueue =  True\n    sharedQueue.put(data)\n\ndef readDataFromQueue():\n    global dataInQueue\n    dataInQueue = False\n    return sharedQueue.get() \n#===========================================================\nimport wx               \nclass GUI(wx.Panel):    \n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent)\n        parent.CreateStatusBar() \n        button = wx.Button(self, label=\"Print\", pos=(0,60))\n        self.Bind(wx.EVT_BUTTON, self.writeToSharedQueue, button)\n\n    #--------------------------------------------------------\n    def writeToSharedQueue(self, event):\n        self.textBox.AppendText(\n                        \"The Print Button has been clicked!\\n\") \n        putDataIntoQueue('Hi from wxPython via Shared Queue.\\n')\n        if dataInQueue: \n            data = readDataFromQueue()\n            self.textBox.AppendText(data)\n\n            text.insert('0.0', data) # insert data into GUI\n\n#============================================================\ndef wxPythonApp():\n        app = wx.App()\n        frame = wx.Frame(\n            None, title=\"Python GUI using wxPython\", size=(300,180))\n        GUI(frame)          \n        frame.Show()        \n        runT = Thread(target=app.MainLoop)\n        runT.setDaemon(True)    \n        runT.start()\n        print(runT)\n        print('createThread():', runT.isAlive())\n#============================================================\naction = ttk.Button(win, text=\"Call wxPython GUI\", command=wxPythonApp) \naction.grid(column=2, row=1)\n\n#======================\n# Start GUI\n#======================\nwin.mainloop()\n```", "```py\ndef wxPythonApp():\n        app = wx.App()\n        frame = wx.Frame(\nNone, title=\"Python GUI using wxPython\", size=(300,180))\n        GUI(frame)          \n        frame.Show()        \n        runT = Thread(target=app.MainLoop)\n        runT.setDaemon(True)    \n        runT.start()\n```", "```py\n    #------------------------------------------------------\n    def writeToSharedQueue(self, event):\n        self.textBox.AppendText(\n\"The Print Button has been clicked!\\n\") \n        putDataIntoQueue('Hi from wxPython via Shared Queue.\\n')\n        if dataInQueue: \n            data = readDataFromQueue()\n            self.textBox.AppendText(data)\n            text.insert('0.0', data) # insert data into tkinter\n```", "```py\nfrom multiprocessing import Queue\nsharedQueue = Queue()\ndataInQueue = False\n\ndef putDataIntoQueue(data):\n    global dataInQueue\n    dataInQueue =  True\n    sharedQueue.put(data)\n\ndef readDataFromQueue():\n    global dataInQueue\n    dataInQueue = False\n    return sharedQueue.get()\n```"]