["```py\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.right_child = None\n        self.left_child = None \n```", "```py\nn1 = Node(\"root node\")\nn2 = Node(\"left child node\")\nn3 = Node(\"right child node\")\nn4 = Node(\"left grandchild node\") \nFigure 6.9:\n```", "```py\nn1.left_child = n2\nn1.right_child = n3\nn2.left_child = n4 \n```", "```py\ncurrent = n1\nwhile current:\n    print(current.data)\n    current = current.left_child \n```", "```py\nroot node\nleft child node\nleft grandchild node \n```", "```py\ndef inorder(root_node):\n    current = root_node\n    if current is None:\n        return\n    inorder(current.left_child)\n    print(current.data)\n    inorder(current.right_child)\ninorder(n1) \n```", "```py\nleft grandchild node\nleft child node\nroot node\nright child node \n```", "```py\ndef preorder(root_node):\n    current = root_node\n    if current is None:\n        return\n    print(current.data)\n    preorder(current.left_child)\n    preorder(current.right_child)\npreorder(n1) \n```", "```py\nroot node\nleft child node\nleft grandchild node\nright child node \n```", "```py\ndef postorder( root_node):\n    current = root_node\n    if current is None:\n        return\n    postorder(current.left_child)\n    postorder(current.right_child)\n    print(current.data)\npostorder(n1) \n```", "```py\nleft grandchild node\nleft child node\nright child node\nroot node \n```", "```py\nfrom collections import deque\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.right_child = None\n        self.left_child = None\n\nn1 = Node(\"root node\")\nn2 = Node(\"left child node\")\nn3 = Node(\"right child node\")\nn4 = Node(\"left grandchild node\")\nn1.left_child = n2\nn1.right_child = n3\nn2.left_child = n4\n\ndef level_order_traversal(root_node):\n    list_of_nodes = []\n    traversal_queue = deque([root_node])\n    while len(traversal_queue) > 0:\n        node = traversal_queue.popleft()\n        list_of_nodes.append(node.data)\n        if node.left_child:\n            traversal_queue.append(node.left_child)\n            if node.right_child:\n                traversal_queue.append(node.right_child)\n    return list_of_nodes\nprint(level_order_traversal(n1)) \n```", "```py\n['root node', 'left child node', 'right child node', 'left grandchild node'] \n```", "```py\nclass TreeNode:\n    def __init__(self, data=None):\n        self.data = data\n        self.right = None\n        self.left = None \n```", "```py\nclass Stack:\n    def __init__(self):\n        self.elements = []\n\n    def push(self, item):\n        self.elements.append(item)\n\n    def pop(self):\n        return self.elements.pop() \n```", "```py\nexpr = \"4 5 + 5 3 - *\".split()\nstack = Stack() \n```", "```py\nfor term in expr:\n    if term in \"+-*/\":\n        node = TreeNode(term)\n        node.right = stack.pop()\n        node.left = stack.pop()\n    else:\n        node = TreeNode(int(term))\n    stack.push(node) \n```", "```py\ndef calc(node):\n    if node.data == \"+\":\n        return calc(node.left) + calc(node.right)\n    elif node.data == \"-\":\n        return calc(node.left) - calc(node.right)\n    elif node.data == \"*\":\n        return calc(node.left) * calc(node.right)\n    elif node.data == \"/\":\n        return calc(node.left) / calc(node.right)\n    else:\n        return node.data \n```", "```py\nroot = stack.pop()\nresult = calc(root)\nprint(result) \n```", "```py\nclass Tree:\n    def __init__(self):\n        self.root_node = None \n```", "```py\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.right_child = None\n        self.left_child = None\nclass Tree:\n    def __init__(self):\n        self.root_node = None\n    def insert(self, data):\n        node = Node(data)\n        if self.root_node is None:\n            self.root_node = node\n            return self.root_node\n        else:\n            current = self.root_node\n            parent = None\n            while True:\n                parent = current\n                if node.data < parent.data:\n                    current = current.left_child\n                    if current is None:\n                        parent.left_child = node\n                        return self.root_node\n                else:\n                    current = current.right_child\n                    if current is None:\n                        parent.right_child = node\n                        return self.root_node \n```", "```py\n def insert(self, data): \n```", "```py\n node = Node(data)\n        if self.root_node is None:\n            self.root_node = node\n            return self.root_node\n        else: \n```", "```py\n current = self.root_node\n        parent = None\n        while True:\n            parent = current \n```", "```py\n if node.data < parent.data:\n                current = current.left_child\n                if current is None:\n                    parent.left_child = node\n                    return self.root_node \n```", "```py\n else:\n                current = current.right_child\n                if current is None:\n                    parent.right_child = node\n                    return self.root_node \n```", "```py\n def inorder(self, root_node):\n        current = root_node\n        if current is None:\n            return\n        self.inorder(current.left_child)\n        print(current.data)\n        self.inorder(current.right_child) \n```", "```py\ntree = Tree()\nr = tree.insert(5)\nr = tree.insert(2)\nr = tree.insert(7)\nr = tree.insert(9)\nr = tree.insert(1)\n\ntree.inorder(r) \n```", "```py\n1\n2\n5\n7\n9 \n```", "```py\n def search(self, data):\n        current = self.root_node\n        while True:\n            if current is None:\n                print(\"Item not found\")\n                return None\n            elif current.data is data:\n                print(\"Item found\", data)\n                return data\n            elif current.data > data:\n                current = current.left_child\n            else:\n                current = current.right_child \n```", "```py\ntree = Tree()\ntree.insert(5)\ntree.insert(2)\ntree.insert(7)\ntree.insert(9)\ntree.insert(1)\ntree.search(9) \n```", "```py\nItem found 9 \n```", "```py\n def get_node_with_parent(self, data):\n        parent = None\n        current = self.root_node\n        if current is None:\n            return (parent, None)\n        while True:\n            if current.data == data:\n                return (parent, current)\n            elif current.data > data:\n                parent = current\n                current = current.left_child\n            else:\n                parent = current\n                current = current.right_child\n        return (parent, current) \n```", "```py\n def remove(self, data):\n        parent, node = self.get_node_with_parent(data)\n        if parent is None and node is None:\n            return False\n        # Get children count\n        children_count = 0\n        if node.left_child and node.right_child:\n            children_count = 2\n        elif (node.left_child is None) and (node.right_child is None):\n            children_count = 0\n        else:\n            children_count = 1 \n```", "```py\n if children_count == 0:\n            if parent:\n                if parent.right_child is node:\n                    parent.right_child = None\n                else:\n                    parent.left_child = None\n            else:\n                self.root_node = None \n```", "```py\n elif children_count == 1:\n            next_node = None\n            if node.left_child:\n                next_node = node.left_child\n            else:\n                next_node = node.right_child\n            if parent:\n                if parent.left_child is node:\n                    parent.left_child = next_node\n                else:\n                    parent.right_child = next_node\n            else:\n                self.root_node = next_node \n```", "```py\n else:\n            parent_of_leftmost_node = node\n            leftmost_node = node.right_child\n            while leftmost_node.left_child:\n                parent_of_leftmost_node = leftmost_node\n                leftmost_node = leftmost_node.left_child\n            node.data = leftmost_node.data \n```", "```py\n if parent_of_leftmost_node.left_child == leftmost_node:\n                parent_of_leftmost_node.left_child = leftmost_node.right_child\n            else:\n                parent_of_leftmost_node.right_child = leftmost_node.right_child \n```", "```py\ntree = Tree()\ntree.insert(5)\ntree.insert(2)\ntree.insert(7)\ntree.insert(9)\ntree.insert(1)\ntree.search(9)\ntree.remove(9)\ntree.search(9) \n```", "```py\nItem found 9\nItem not found \n```", "```py\n def find_min(self):\n        current = self.root_node\n        while current.left_child:\n            current = current.left_child\n        return current.data \n```", "```py\n def find_max(self):\n        current = self.root_node\n        while current.right_child:\n            current = current.right_child\n        return current.data \n```", "```py\ntree = Tree()\ntree.insert(5)\ntree.insert(2)\ntree.insert(7)\ntree.insert(9)\ntree.insert(1)\nprint(tree.find_min())\nprint(tree.find_max()) \n```", "```py\n1\n9 \n```"]