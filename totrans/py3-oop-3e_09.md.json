["```py\nwhile not iterator.done(): \n    item = iterator.next() \n    # do something with the item \n```", "```py\nclass CapitalIterable: \n    def __init__(self, string): \n        self.string = string \n\n def __iter__(self): \n        return CapitalIterator(self.string) \n\nclass CapitalIterator: \n    def __init__(self, string): \n        self.words = [w.capitalize() for w in string.split()] \n        self.index = 0 \n\n def __next__(self): \n        if self.index == len(self.words): \n raise StopIteration() \n\n        word = self.words[self.index] \n        self.index += 1 \n        return word \n\n    def __iter__(self): \n        return self \n```", "```py\n>>> iterable = CapitalIterable('the quick brown fox jumps over the lazy dog')\n>>> iterator = iter(iterable)\n>>> while True:\n...     try:\n...         print(next(iterator))\n...     except StopIteration:\n...         break\n... \nThe\nQuick\nBrown\nFox\nJumps\nOver\nThe\nLazy\nDog  \n```", "```py\n>>> for i in iterable:\n...     print(i)\n... \nThe\nQuick\nBrown\nFox\nJumps\nOver\nThe\nLazy\nDog  \n```", "```py\ninput_strings = [\"1\", \"5\", \"28\", \"131\", \"3\"]\n\noutput_integers = [] \nfor num in input_strings: \n    output_integers.append(int(num)) \n```", "```py\ninput_strings = [\"1\", \"5\", \"28\", \"131\", \"3\"]\noutput_integers = [int(num) for num in input_strings] \n```", "```py\noutput_integers = [int(num) for num in input_strings if len(num) < 3]\n```", "```py\nimport sys\n\nfilename = sys.argv[1]\n\nwith open(filename) as file:\n    header = file.readline().strip().split(\"\\t\")\n contacts = [\n dict(\n zip(header, line.strip().split(\"\\t\")))\n for line in file\n ]\n\nfor contact in contacts:\n    print(\"email: {email} -- {last}, {first}\".format(**contact))\n\n```", "```py\nfrom collections import namedtuple\n\nBook = namedtuple(\"Book\", \"author title genre\")\nbooks = [\n    Book(\"Pratchett\", \"Nightwatch\", \"fantasy\"),\n    Book(\"Pratchett\", \"Thief Of Time\", \"fantasy\"),\n    Book(\"Le Guin\", \"The Dispossessed\", \"scifi\"),\n    Book(\"Le Guin\", \"A Wizard Of Earthsea\", \"fantasy\"),\n    Book(\"Turner\", \"The Thief\", \"fantasy\"),\n    Book(\"Phillips\", \"Preston Diamond\", \"western\"),\n    Book(\"Phillips\", \"Twice Upon A Time\", \"scifi\"),\n]\n\nfantasy_authors = {b.author for b in books if b.genre == \"fantasy\"}\n\n```", "```py\n>>> fantasy_authors\n{'Turner', 'Pratchett', 'Le Guin'}  \n```", "```py\nfantasy_titles = {b.title: b for b in books if b.genre == \"fantasy\"}\n```", "```py\nJan 26, 2015 11:25:25 DEBUG This is a debugging message. Jan 26, 2015 11:25:36 INFO This is an information method. Jan 26, 2015 11:25:46 WARNING This is a warning. It could be serious. Jan 26, 2015 11:25:52 WARNING Another warning sent. Jan 26, 2015 11:25:59 INFO Here's some information. Jan 26, 2015 11:26:13 DEBUG Debug messages are only useful if you want to figure something out. Jan 26, 2015 11:26:32 INFO Information is usually harmless, but helpful. Jan 26, 2015 11:26:40 WARNING Warnings should be heeded. Jan 26, 2015 11:26:54 WARNING Watch for warnings. \n```", "```py\nimport sys \n\ninname = sys.argv[1] \noutname = sys.argv[2] \n\nwith open(inname) as infile: \n    with open(outname, \"w\") as outfile: \n warnings = (l for l in infile if 'WARNING' in l) \n        for l in warnings: \n            outfile.write(l) \n```", "```py\nJan 26, 2015 11:25:46 WARNING This is a warning. It could be serious.\nJan 26, 2015 11:25:52 WARNING Another warning sent.\nJan 26, 2015 11:26:40 WARNING Warnings should be heeded.\nJan 26, 2015 11:26:54 WARNING Watch for warnings. \n```", "```py\nimport sys\n\n# generator expression\ninname, outname = sys.argv[1:3]\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n warnings = (\n l.replace(\"\\tWARNING\", \"\") for l in infile if \"WARNING\" in l\n )\n        for l in warnings:\n            outfile.write(l)\n```", "```py\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n        for l in infile:\n            if \"WARNING\" in l:\n                outfile.write(l.replace(\"\\tWARNING\", \"\"))\n```", "```py\nclass WarningFilter:\n    def __init__(self, insequence):\n        self.insequence = insequence\n\n def __iter__(self):\n        return self\n\n def __next__(self):\n        l = self.insequence.readline()\n        while l and \"WARNING\" not in l:\n            l = self.insequence.readline()\n        if not l:\n raise StopIteration\n        return l.replace(\"\\tWARNING\", \"\")\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n        filter = WarningFilter(infile)\n        for l in filter:\n            outfile.write(l)\n```", "```py\ndef warnings_filter(insequence):\n    for l in insequence:\n        if \"WARNING\" in l:\n yield l.replace(\"\\tWARNING\", \"\")\n\nwith open(inname) as infile:\n    with open(outname, \"w\") as outfile:\n        filter = warnings_filter(infile)\n        for l in filter:\n            outfile.write(l)\n```", "```py\n>>> print(warnings_filter([]))\n<generator object warnings_filter at 0xb728c6bc>  \n```", "```py\ndef warnings_filter(infilename):\n    with open(infilename) as infile:\n yield from (\n l.replace(\"\\tWARNING\", \"\") for l in infile if \"WARNING\" in l\n )\n\nfilter = warnings_filter(inname)\nwith open(outname, \"w\") as outfile:\n    for l in filter:\n        outfile.write(l)\n```", "```py\nclass File:\n    def __init__(self, name):\n        self.name = name\n\nclass Folder(File):\n    def __init__(self, name):\n        super().__init__(name)\n        self.children = []\n\nroot = Folder(\"\")\netc = Folder(\"etc\")\nroot.children.append(etc)\netc.children.append(File(\"passwd\"))\netc.children.append(File(\"groups\"))\nhttpd = Folder(\"httpd\")\netc.children.append(httpd)\nhttpd.children.append(File(\"http.conf\"))\nvar = Folder(\"var\")\nroot.children.append(var)\nlog = Folder(\"log\")\nvar.children.append(log)\nlog.children.append(File(\"messages\"))\nlog.children.append(File(\"kernel\"))\n\n```", "```py\ndef walk(file):\n    if isinstance(file, Folder):\n        yield file.name + \"/\"\n        for f in file.children:\n yield from walk(f)\n    else:\n        yield file.name\n```", "```py\ndef tally(): \n    score = 0 \n    while True: \n increment = yield score \n        score += increment \n```", "```py\n>>> white_sox = tally()\n>>> blue_jays = tally()\n>>> next(white_sox)\n0\n>>> next(blue_jays)\n0\n>>> white_sox.send(3)\n3\n>>> blue_jays.send(2)\n2\n>>> white_sox.send(2)\n5\n>>> blue_jays.send(4)\n6  \n```", "```py\nincrement = yield score \n```", "```py\nunrelated log messages \nsd 0:0:0:0 Attached Disk Drive \nunrelated log messages \nsd 0:0:0:0 (SERIAL=ZZ12345) \nunrelated log messages \nsd 0:0:0:0 [sda] Options \nunrelated log messages \nXFS ERROR [sda] \nunrelated log messages \nsd 2:0:0:1 Attached Disk Drive \nunrelated log messages \nsd 2:0:0:1 (SERIAL=ZZ67890) \nunrelated log messages \nsd 2:0:0:1 [sdb] Options \nunrelated log messages \nsd 3:0:1:8 Attached Disk Drive \nunrelated log messages \nsd 3:0:1:8 (SERIAL=WW11111) \nunrelated log messages \nsd 3:0:1:8 [sdc] Options \nunrelated log messages \nXFS ERROR [sdc] \nunrelated log messages \n```", "```py\nimport re\n\ndef match_regex(filename, regex):\n    with open(filename) as file:\n        lines = file.readlines()\n    for line in reversed(lines):\n        match = re.match(regex, line)\n        if match:\n regex = yield match.groups()[0]\n\ndef get_serials(filename):\n    ERROR_RE = \"XFS ERROR (\\[sd[a-z]\\])\"\n    matcher = match_regex(filename, ERROR_RE)\n    device = next(matcher)\n    while True:\n        try:\n            bus = matcher.send(\n                \"(sd \\S+) {}.*\".format(re.escape(device))\n            )\n            serial = matcher.send(\"{} \\(SERIAL=([^)]*)\\)\".format(bus))\n yield serial\n            device = matcher.send(ERROR_RE)\n        except StopIteration:\n            matcher.close()\n            return\n\nfor serial_number in get_serials(\"EXAMPLE_LOG.log\"):\n    print(serial_number)\n```", "```py\nimport random\nimport tkinter as tk\nimport csv\n\nclass Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.grid(sticky=\"news\")\n        master.columnconfigure(0, weight=1)\n        master.rowconfigure(0, weight=1)\n        self.create_widgets()\n        self.file = csv.writer(open(\"colors.csv\", \"a\"))\n\n    def create_color_button(self, label, column, row):\n        button = tk.Button(\n            self, command=lambda: self.click_color(label), text=label\n        )\n        button.grid(column=column, row=row, sticky=\"news\")\n\n    def random_color(self):\n        r = random.randint(0, 255)\n        g = random.randint(0, 255)\n        b = random.randint(0, 255)\n\n        return f\"#{r:02x}{g:02x}{b:02x}\"\n\n    def create_widgets(self):\n        self.color_box = tk.Label(\n            self, bg=self.random_color(), width=\"30\", height=\"15\"\n        )\n        self.color_box.grid(\n            column=0, columnspan=2, row=0, sticky=\"news\"\n        )\n        self.create_color_button(\"Red\", 0, 1)\n        self.create_color_button(\"Purple\", 1, 1)\n        self.create_color_button(\"Blue\", 0, 2)\n        self.create_color_button(\"Green\", 1, 2)\n        self.create_color_button(\"Yellow\", 0, 3)\n        self.create_color_button(\"Orange\", 1, 3)\n        self.create_color_button(\"Pink\", 0, 4)\n        self.create_color_button(\"Grey\", 1, 4)\n        self.quit = tk.Button(\n            self, text=\"Quit\", command=root.destroy, bg=\"#ffaabb\"\n        )\n        self.quit.grid(column=0, row=5, columnspan=2, sticky=\"news\")\n\n    def click_color(self, label):\n        self.file.writerow([label, self.color_box[\"bg\"]])\n        self.color_box[\"bg\"] = self.random_color()\n\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\n```", "```py\nGreen,#6edd13\nPurple,#814faf\nYellow,#c7c26d\nOrange,#61442c\nGreen,#67f496\nPurple,#c757d5\nBlue,#106a98\nPink,#d40491\n.\n.\n.\nBlue,#a4bdfa\nGreen,#30882f\nPink,#f47aad\nGreen,#83ddb2\nGrey,#baaec9\nGrey,#8aa28d\nBlue,#533eda\n```", "```py\nimport csv\n\ndataset_filename = \"colors.csv\"\n\ndef load_colors(filename):\n    with open(filename) as dataset_file:\n        lines = csv.reader(dataset_file)\n for line in lines:\n            label, hex_color = line\n yield (hex_to_rgb(hex_color), label)\n```", "```py\ndef hex_to_rgb(hex_color):\n    return tuple(int(hex_color[i : i + 2], 16) for i in range(1, 6, 2))\n\n```", "```py\nfrom random import randint\n\ndef generate_colors(count=100):\n    for i in range(count):\n        yield (randint(0, 255), randint(0, 255), randint(0, 255))\n```", "```py\ndef color_distance(color1, color2):\n    channels = zip(color1, color2)\n    sum_distance_squared = 0\n    for c1, c2 in channels:\n        sum_distance_squared += (c1 - c2) ** 2\n    return sum_distance_squared\n```", "```py\ndef nearest_neighbors(model_colors, target_colors, num_neighbors=5):\n    model_colors = list(model_colors)\n\n    for target in target_colors:\n        distances = sorted(\n            ((color_distance(c[0], target), c) for c in model_colors)\n        )\n        yield target, distances[:5]\n```", "```py\nfrom collections import Counter\n\ndef name_colors(model_colors, target_colors, num_neighbors=5):\n    for target, near in nearest_neighbors(\n        model_colors, target_colors, num_neighbors=5\n    ):\n        print(target, near)\n        name_guess = Counter(n[1] for n in near).most_common()[0][0]\n        yield target, name_guess\n```", "```py\ndef write_results(colors, filename=\"output.csv\"):\n    with open(filename, \"w\") as file:\n        writer = csv.writer(file)\n        for (r, g, b), name in colors:\n            writer.writerow([name, f\"#{r:02x}{g:02x}{b:02x}\"])\n```", "```py\ndef process_colors(dataset_filename=\"colors.csv\"):\n    model_colors = load_colors(dataset_filename)\n    colors = name_colors(model_colors, generate_colors(), 5)\n    write_results(colors)\n\nif __name__ == \"__main__\":\n    process_colors()\n```", "```py\nimport tkinter as tk\nimport csv\n\nclass Application(tk.Frame):\n    def __init__(self, master=None):\n        super().__init__(master)\n        self.grid(sticky=\"news\")\n        master.columnconfigure(0, weight=1)\n        master.rowconfigure(0, weight=1)\n        self.csv_reader = csv.reader(open(\"output.csv\"))\n        self.create_widgets()\n        self.total_count = 0\n        self.right_count = 0\n\n    def next_color(self):\n        return next(self.csv_reader)\n\n    def mk_grid(self, widget, column, row, columnspan=1):\n        widget.grid(\n            column=column, row=row, columnspan=columnspan, sticky=\"news\"\n        )\n\n    def create_widgets(self):\n        color_text, color_bg = self.next_color()\n        self.color_box = tk.Label(\n            self, bg=color_bg, width=\"30\", height=\"15\"\n        )\n        self.mk_grid(self.color_box, 0, 0, 2)\n\n        self.color_label = tk.Label(self, text=color_text, height=\"3\")\n        self.mk_grid(self.color_label, 0, 1, 2)\n\n        self.no_button = tk.Button(\n            self, command=self.count_next, text=\"No\"\n        )\n        self.mk_grid(self.no_button, 0, 2)\n\n        self.yes_button = tk.Button(\n            self, command=self.count_yes, text=\"Yes\"\n        )\n        self.mk_grid(self.yes_button, 1, 2)\n\n        self.percent_accurate = tk.Label(self, height=\"3\", text=\"0%\")\n        self.mk_grid(self.percent_accurate, 0, 3, 2)\n\n        self.quit = tk.Button(\n            self, text=\"Quit\", command=root.destroy, bg=\"#ffaabb\"\n        )\n        self.mk_grid(self.quit, 0, 4, 2)\n\n    def count_yes(self):\n        self.right_count += 1\n        self.count_next()\n\n    def count_next(self):\n        self.total_count += 1\n        percentage = self.right_count / self.total_count\n        self.percent_accurate[\"text\"] = f\"{percentage:.0%}\"\n        try:\n            color_text, color_bg = self.next_color()\n        except StopIteration:\n            color_text = \"DONE\"\n            color_bg = \"#ffffff\"\n            self.color_box[\"text\"] = \"DONE\"\n            self.yes_button[\"state\"] = tk.DISABLED\n            self.no_button[\"state\"] = tk.DISABLED\n        self.color_label[\"text\"] = color_text\n        self.color_box[\"bg\"] = color_bg\n\nroot = tk.Tk()\napp = Application(master=root)\napp.mainloop()\n```"]