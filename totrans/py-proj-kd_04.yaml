- en: Chapter 4. Making Decisions – Python Control Flows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Congratulations! In [Chapter 3](ch03.html "Chapter 3. Calculate This!"), *Calculate
    This!*, you wrote a calculator program. If you followed the instructions and corrected
    your errors, then you have a program that runs all of the mathematical functions
    with two numbers. While this is great for a first program, that sort of a limited
    calculator doesn't give a user much choice. When the user runs the calculator,
    the program will not end until all five functions have run or until the program
    ends due to an error.
  prefs: []
  type: TYPE_NORMAL
- en: What if, instead of doing the entire math, we could program our calculator to
    perform certain operations based on the way the users answer our questions? As
    programmers, we can use Python to interpret user data and change the way the program
    operates. In this chapter, you will learn how to use *control flows* so that our
    calculator program can make choices and only run the code that the user chooses.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, you will have a calculator program that can choose
    which mathematical operations to perform based on what the user wants to do. You
    will be able to customize this program on the basis of how you use the control
    flows.
  prefs: []
  type: TYPE_NORMAL
- en: Is it equal, not equal, or something else?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you learn about conditional statements, you need to realize that computers
    make decisions based on **comparison operators**. These help us compare two things
    so that the computer can make a decision about what to do next. Here is a list
    of operators:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Comparison Operators |'
  prefs: []
  type: TYPE_TB
- en: '| --- |'
  prefs: []
  type: TYPE_TB
- en: '| Less than | < |'
  prefs: []
  type: TYPE_TB
- en: '| Less than or equal to | <= |'
  prefs: []
  type: TYPE_TB
- en: '| Greater than | > |'
  prefs: []
  type: TYPE_TB
- en: '| Greater than or equal to | >= |'
  prefs: []
  type: TYPE_TB
- en: '| Equal to | == |'
  prefs: []
  type: TYPE_TB
- en: '| Not equal to | != |'
  prefs: []
  type: TYPE_TB
- en: Each of these operators allows us to compare two values. The most confusing
    operator is the equal to operator because it uses two equals signs. The reason
    for this is that when we set a variable, we use one equal sign. We do not want
    the computer to get confused when we are comparing two values, so we use two equals
    signs. When we use the comparison operators with `if`, `elif`, and `else`, our
    program can be written to make better decisions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To take a look at how these operators work in real life, open up your Python
    shell and type the following lines of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'After each line of code, the words `True` or `False` will print. Take a look
    at the following screenshot for answers to how the statements evaluate using the
    number `1`. Experiment with other numbers to take a look at what happens and to
    learn about the operators and what they do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Is it equal, not equal, or something else?](img/B04681_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Conditional statements – if, elif, else
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are three language constructs that are used frequently in Python to control
    the outcome of a program. These constructs are `if`, `elif`, and `else`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `if` statement tells the program that *if the user does this, then execute
    this part of the program*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `else` statement is used to catch anything that the user does and is not
    in the program. For example, you can use `if` and `else` together: *if the user
    chooses* `add`*, do addition, else do another action.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The `elif` stands for *else if*, which means that *if the first thing does not
    happen, then do the next thing in the list of possibilities until the user choice
    matches the possibility*.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`elif` is used when you want to give the program more than two choices. You
    can use `elif` as many times as you like.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`else` is a signal of the end of the possible choices to your computer program.
    The `else` means that *if none of the other things have taken place in your program,
    OR if the user has done something unexpected, then end this block of code*. `else`
    statements are always at the end of a block of code that begins with `if`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the next section, you can take a look at how `if`, `elif`, and `else` are
    used. Then, you will experiment with your calculator code, and add some of these
    statements to make your calculator more flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Getting better input
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order for `if`, `elif`, and `else` to work, we will need to get better user
    input. For this to happen, we need to ask better questions! You will see in each
    example of `if`, `elif`, and `else` that we will be adding more `raw_input()`
    statements to get further information from the user. Then, we will put that information
    to work using the `if`, `elif`, and `else` statements so that our calculator program
    is more responsive to the user's needs.
  prefs: []
  type: TYPE_NORMAL
- en: 'To practice asking better questions, let''s open our Python shell and practice
    writing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: So, we are now asking the user to choose what operation they want to execute
    by typing the name of the operation as the answer to the question. When our program
    runs, it will ask the user this question. How will our program know what to do
    with the answer?
  prefs: []
  type: TYPE_NORMAL
- en: if
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `if` statement tells the program to do something special if the user makes
    a choice. To better understand this, let''s use this sample question and ask the
    user what operation they would like the calculator to do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![if](img/B04681_04_10_replace.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the purposes of practicing, let's imagine that our user types *addition*
    as their answer. Right now, our program does not know or care that the user wants
    to do addition. Our program has no way to do anything with that answer! We need
    to use the `if` statement to tell our program what to do.
  prefs: []
  type: TYPE_NORMAL
- en: So, we will now create a special function, and we will tell the computer what
    to do with this new information from the user. To do this, we will use our text
    editor to add new code and our command prompt to run the code once we have saved
    the code. As a reminder, the working directory of your command prompt should be
    set to your project's folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can refer to [Chapter 1](ch01.html "Chapter 1. Welcome! Let's Get Started"),
    *Welcome! Let's Get Started*, in case you've forgotten how to find your working
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have opened your calculator program in your text editor, add this
    function to the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, call your new `calc_run()` function by adding this line to the end of
    your program file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Now, you will erase the calls you made to your addition, subtraction, multiplication,
    and division functions throughout the program because we do not need them all
    the time. We want them to happen only when the user makes the choice.
  prefs: []
  type: TYPE_NORMAL
- en: In the `calc_run()` function that we are creating now, we tell the calculator
    to ask a question. Once the user answers the question, the computer will check
    whether the answer is equal to addition. If it is, then the computer will run
    the addition function.
  prefs: []
  type: TYPE_NORMAL
- en: elif
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `elif` statement lets us give the user many choices, which is much more
    logical for a user who might want to choose from the addition, subtraction, multiplication,
    and division functions. Using `elif` allows us to give the user the choice between
    many operations. There is no limit to how many times you can write the `elif`
    statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wanted to create a response to 100 different kinds of information, you
    could write 100 `elif` statements. However, this is really tedious, so we won''t
    do it. You can take a look at some of the changes made in the following code,
    which will show how you can use `elif` to give the user choices for each mathematical
    operation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You will notice that we used four `elif` statements. Each `elif` matched the
    response that we wanted. Now, we will test our program. Hopefully, you have saved
    your work in your text editor. Always remember to save as often as you can!
  prefs: []
  type: TYPE_NORMAL
- en: '![elif](img/B04681_04_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Try running your program by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your command prompt or terminal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Navigate to your project folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `python` `first_calc.py`.![elif](img/B04681_04_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`else` is a way to manage all the other things that a user might do that we
    cannot predict. When the user enters something to trigger `else`, we can return
    a message to them, or we can even end the program. Your program does not *NEED*
    to use an `else` statement; however, it is nice to make the choices that you want
    for your users, and make them as clear as possible. In the following example,
    we will print a message to the user if they do *NOT* choose add, subtract, multiply,
    divide, or modulo:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![else](img/B04681_04_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now, when you run the code, if you type an answer that is not addition, subtraction,
    multiplication, or division, your program should print `Thank you. Goodbye`. Test
    your program to check whether your `else` statement works!
  prefs: []
  type: TYPE_NORMAL
- en: '![else](img/B04681_04_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Loops** are a kind of control flow, but they rerun the same block of code
    over and over again until something else tells the loop to stop repeating itself.
    This is a bit different from conditional statements since these only run the block
    of code once. The two kinds of loop are `while` and `for`. Both types of loop
    are really useful.'
  prefs: []
  type: TYPE_NORMAL
- en: while
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**while** is one kind of loop. When we make a `while` loop, the program repeats
    itself until a given block of code happens. When programming a `while` loop, we
    need to create some rules, or our program will run forever.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, we can make this rule: when the calculator is on, perform the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Run the calculator.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Prompt the user to keep calculating.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user hits the `else` statement, turn the calculator off.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's go through each of the code changes step by step; you will need these
    changes in order to make the `while` loop work.
  prefs: []
  type: TYPE_NORMAL
- en: Global variables and the quit() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We will create a global variable to use in our `quit()` function. Using the
    variable in this way will allow us to let the `quit ()` function act like an `off`
    switch, thus stopping our `calc_run()` function from running. In the next section,
    we will write our global variable, and then we will create our `quit()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will make a global variable called `calc_on`. This is one way for
    us to make an `on` button for our computer calculator. This global variable should
    be typed at the top of the code file with the *NO* indentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Global variables can be used in any function we want throughout the program.
    If you want to use a global variable in a function, you can type `global` next
    to the name of the variable inside of the function. You will be shown an example
    of this later on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have an *on button* global variable that can be used anywhere in
    our code, we will create the pieces needed for our `while` loop. We need to add
    a way for our program to keep repeating itself so that the user can keep doing
    calculations without restarting the program for each calculation. Also, we need
    to add a way for the user to quit the program. We are going to work backward and
    make the `quit()` function first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: We just wrote the code for our `quit()` function. The first line uses our `calc_on`
    global variable. The second line changes the value of `calc_on` to `0`. By changing
    the value from `1` to `0`, we are telling the program to turn the calculator off
    and stop running the code.
  prefs: []
  type: TYPE_NORMAL
- en: Using the quit() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In our code, we are going to change our `else` statement so that it runs the
    `quit()` function instead of printing a message. Take a look at this code sample
    to understand the changes we make to else:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we have made the `on` button, `calc_on`, the `off` button, and `quit()`,
    we can add the `quit` choice to our program. In the line of code where we get
    information from the user, we will add the word `quit` as a choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Using the while loop to control the program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Quitting is one choice that the user can make by simply typing `quit`. However,
    we want to allow the user to keep the program running if they wish to. To do this,
    we will use a `while` loop. At the bottom of the code, we will simply write this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `while` loop is says that *while the on button is on, run the* `calc_run()`
    *function. If someone does something to change* `calc_on` *to a value that is
    not* `1`*, then stop running the* `calc_run()` *program.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Hopefully, you noticed that our `quit()` function changes the value of `calc_on`
    to `0`, which means that our program stops running. `while` loops are very useful
    for running run parts of a program, and they can use simple variables to start
    or stop the loops, which is similar to what we did with this calculator:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Using the while loop to control the program](img/B04681_04_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: for
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `for` loop is another kind of loop. We will use the `for` loop to make a
    bonus function for our calculator. The biggest difference between `for` and `while`
    is that the `for` loop is used when a programmer knows exactly how many times
    they need the loop to repeat. In the `while` loop, we do not know when the user
    will be done with the calculator. The user might want to make one calculation
    or they might want to make 10, and a `while` loop is flexible. A `for` loop is
    more rigid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why not just use `while` all the time, then? Well, there are times when we
    know just what it will take to get a job done, and we do not want the program
    to keep going any more after the job is done. The `for` loop is perfect for saying
    how many times to repeat a loop. For example, let''s say that you have a list
    of numbers, and you want to print all the numbers in the list. Let''s say that
    you want to print the numbers `1` through `10`. If you had to write them out individually,
    it would look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a lot of lines of code, and they are all doing the same thing! What
    a waste of space, and what a waste of time to type this all out. Instead of typing
    the preceding code, type the code in the following `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '![for](img/B04681_04_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: First, you see that we typed `n` in `range(1, 11)`. This means *every number
    between* `1` *and* `11`*, not including* `11`.
  prefs: []
  type: TYPE_NORMAL
- en: You will also notice that we called a function named `range()`, which is a built-in
    Python function that allows us to specify a range of numbers instead of writing
    them all out. The `range()` function does *NOT* include the last number, so you
    can see that the second number is `11`, instead of `10`.
  prefs: []
  type: TYPE_NORMAL
- en: You can experiment with these numbers in the range by expanding it to `range(1,
    1000)`. What happens now? This is a basic `for` loop, but we will find that using
    this `for` loop is very helpful when we want to repeat code for lists of numbers,
    letters, words, or objects.
  prefs: []
  type: TYPE_NORMAL
- en: Bonus – count_to_ten() function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To make our calculator a little more interesting, let''s create a `count` function
    that will print the numbers from `1` to `10`. We can then add this function to
    our list of choices. First, think about how we used the preceding `for` loop.
    Then, copy the `count_to_ten()` function between the `modulo()` function and the
    `quit()` function into your `first_calc.py` program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the choice `ten` to your `op` variable, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add `elif` for `ten` to your control flow of `if`/`elif`/`else`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'This will print out the choice for your users, and then, when they type `ten`,
    the calculator will print out all of the numbers from 1 to 10\. This screenshot
    shows how the code works:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Bonus – count_to_ten() function](img/B04681_04_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A quick task for you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, you learned a lot about how to write programs that can make
    decisions. Here are some questions to answer:'
  prefs: []
  type: TYPE_NORMAL
- en: Q1\. How many times can the `elif` statement appear in the `if`/`elif`/`else`
    flow?
  prefs: []
  type: TYPE_NORMAL
- en: Only once
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Twice
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As many times as it is needed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Ten
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. Which statement starts a conditional block of code that is used to make
    decisions?
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: elif
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: while
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. Which statement is only used at the end of a conditional block of code?
  prefs: []
  type: TYPE_NORMAL
- en: else
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: elif
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: while
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What is a global variable?
  prefs: []
  type: TYPE_NORMAL
- en: A variable that is only used in one function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A variable that can be shared with many functions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A variable that uses global before its name if it is inside a function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both 2 and 3
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q5\. What is a `while` loop?
  prefs: []
  type: TYPE_NORMAL
- en: A loop that runs code only once
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A loop that runs code a set number of times
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A loop that repeats code until something different happens, and then it stops
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A loop that does nothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned many new concepts. You learned about comparison
    operators, the symbols that allow us to compare two items. You also learned about
    `if`, `elif`, and `else`, which are three conditional words that let us tell our
    program how to make different decisions based on the information that a user enters.
    You learned about the `for` and `while` loops; both are very important in making
    programs that give feedback. You also learned a bit about how to use global variables,
    which can be shared with all the functions in a code file.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully, you are keeping up with everything we've talked about so far! It
    may feel a little overwhelming, but we will continue to review the concepts we
    learned in this chapter by building some new projects in the next chapter.
  prefs: []
  type: TYPE_NORMAL
