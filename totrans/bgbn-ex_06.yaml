- en: Chapter 6. Home Automation Using BeagleBone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be learning how to build a home automation system using
    BeagleBone Black. To get started, first we will be learning about Internet connected
    home automation systems and how they work. Then, we will move on to setting up
    Python Flask library that lets you run the HTTP server on your BeagleBone Black
    using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Once we are up and running with the server using a Flask library on Python,
    we will use it to go ahead and create a program in which you can turn a GPIO on
    and turn off using the input from the webpage created by the server. This GPIO
    pin will be used to turn on and turn off an electrical relay to switch a lamp
    on and off.
  prefs: []
  type: TYPE_NORMAL
- en: 'The contents of the chapter are divided into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of home automation systems
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to webservers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Flask for Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Flask for Python on a BeagleBone board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a webserver using Flask
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Transistors, relays, and power switches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Advanced project: An Internet-controlled power switch – controlling an AC bulb
    from the Internet'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This topic will cover what parts you need in this Chapter. You can buy them
    from any electrical store or online.
  prefs: []
  type: TYPE_NORMAL
- en: Materials needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1x BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x microSD card with latest version of Debian flashed on it to boot the BeagleBone
    board from a microSD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 5V DC, 2A power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x Ethernet cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x BreadBoard
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x relay board
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The structure of home automation systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This section will give you a basic idea about home automation systems that
    are connected to the Internet. In the following picture you can see that the mobile
    phone and the IoT devices are connected to Internet via the LAN Routers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The structure of home automation systems](img/4602_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We will also be doing something similar in this chapter using the BeagleBone
    board, connected to Internet via our home router, to control an AC bulb using
    the relay circuit which is interfaced with the BeagleBone board. To do this, we
    will have setup a webserver on our BeagleBone board. We will see how to do this
    in the next topic of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to web servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Web servers are computers that are connected to the Internet, or intranet,
    to serve the requests that comes from the web browser of client computers or mobile
    devices. To understand this better, look at the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to web servers](img/4602_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, as shown in the preceding picture, a webserver is basically the computer
    which hosts the webpages and does the processing based on the requests sent from
    the web browser on the client's device. The client's device can be either a PC,
    laptop, mobile phone, tablet, or anything else which has a web browser, or a Linux
    shell that can make HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and look at the following picture to understand this better:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to web servers](img/4602_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now in this you can see that multiple clients are connected to multiple servers
    via the Internet, that is the **World Wide Web** (**WWW**), **TCP/IP Network**.
  prefs: []
  type: TYPE_NORMAL
- en: What is TCP/IP? What exactly happens when you type a URL into your browser and
    hit enter?
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following picture to understand more:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Introduction to web servers](img/4602_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Similarly, in our system we have a webserver that goes through all the process
    as show in the preceding picture. A slight difference is that our webpage will
    be able to control the AC bulb. Now, that we know how webservers work, let's get
    ahead and setup a webserver on our BeagleBone board using Flask Python.
  prefs: []
  type: TYPE_NORMAL
- en: Python-Flask on BeagleBone Black
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Flask is a Python framework to set up web servers using Python. In this topic,
    we will look at how we can set up a web server on BeagleBone Black using Python.
    The first thing we need to do to get started is to install the Python-Flask package
    on your BeagleBone Black from the Python package index. The steps below will walk
    you through how you can set up Flask and test it, followed by writing a Python
    code to interface it with your relay circuit. We will see this in the next topic
    followed by the main project of controlling an AC bulb from the Internet in the
    last topic of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Installing PIP as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo apt-get install python-pip`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You should see that it's been already installed, since we have the latest version
    of Debian installed, and its already available in version. Some of the other versions
    might not have this, and it will be installed if it's not available, or upgraded
    if a newer version is available than the one that is installed in the current
    operating system.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: PIP installs and manages software packages that are written in Python. Many
    software packages can be found in the **Python Package Index** (**PyPI**).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Step 2: Install Flask-Python library as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo pip install flask`![Python-Flask on BeagleBone Black](img/4602_06_06.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a basic web application to test whether the package was installed successfully
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Create a directory on your BeagleBone Black:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir HomeAutomation`![Python-Flask on BeagleBone Black](img/4602_06_07.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 2: Change to the directory you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd HomeAutomation`![Python-Flask on BeagleBone Black](img/4602_06_08.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Create a Python file and write the code to setup a Hello World printing
    webpage server as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nano WebApp.py`![Python-Flask on BeagleBone Black](img/4602_06_09.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now type down the code on the file you created as shown in the following and
    save it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 4: Run the Python program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo python WebApp.py`![Python-Flask on BeagleBone Black](img/4602_06_11.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you see the output as shown in the preceding picture, then you have done
    the previous steps correctly, and we have a server up and running on our BeagleBone
    board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now open the web server that we have running on the BeagleBone board by opening
    a webpage on the browser of a PC or mobile phone connected to the same LAN network
    to which the BeagleBone is connected. In order to do this type the following:
    `IPAddress_of_BeagleBone_Board:5000`, so, in my case, it would be `192.168.1.20:5000`
    on the URL address bar on the browser where `5000` is the default port number
    at which Python-Flask routes its connection. You can change this to different
    port numbers. Read more on the web to better understand different ports of web
    servers.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you make the call to the server from the browser, you should see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will also be able to see the request call made by the browser to the server
    on BeagleBone as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Hit *Ctrl* + *C* to stop it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that was a very basic thing we did using Python-Flask by echoing a text
    line.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and do something using HTML layouts to make the web page look
    better. To do this create a directory called `templates` inside the home automation
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir templates`![Python-Flask on BeagleBone Black](img/4602_06_15.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Switch to the new templates directory you created in order to create and save
    the HTML file inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd templates`![Python-Flask on BeagleBone Black](img/4602_06_16.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So this directory will be the place where you will find the HTML and CSS files
    through which you can route the web server to respond to requests from the client
    devices browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s go ahead and create an HTML page inside this directory as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '`nano index.html`![Python-Flask on BeagleBone Black](img/4602_06_17.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you are done with typing the content in the HTML file, as shown in the
    preceding picture, you can save the file by hitting *Ctrl* + *X* to save it. Once
    you have saved it, go ahead and switch back to the home automation directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cd ..`![Python-Flask on BeagleBone Black](img/4602_06_18.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now we need to write a different program to route the web server to the HTML
    file that we created. Instead of writing something from scratch, let us modify
    the `WebApp.py` file that we created before and save it as `WebAppFromTemplate.py`,
    as most of the lines of code are same. See in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have edited the file and saved it as `WebAppFromTemplate.py`, you
    can go ahead and run the code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo python WebAppFromTemplate.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Again, let''s go ahead and open the URL from the browser and check the output.
    You should see something similar to the web page shown in the picture below:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can see that the text **Webpage from a template!** is formatted using
    HTML, and you can see it as an HTML based web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like last time, you will see the HTTP call from the browser for debugging the
    shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: For the project that we have in this chapter to control an AC bulb from Internet,
    we should have buttons on the web page instead of just the text that we displayed
    previously.
  prefs: []
  type: TYPE_NORMAL
- en: In order to have buttons on the HTML page we need to write HTML code for the
    webpage template and similarly we should write Python code to read the input when
    the buttons are clicked on the webpage. We can use these inputs to change the
    states of the GPIOs on the BeagleBone Black using Python code.
  prefs: []
  type: TYPE_NORMAL
- en: We will be looking into the details of how we can toggle the GPIO states from
    HTML button click inputs in the project section of this chapter. Before that,
    as the last part of this topic, let's create an HTML page with button inputs,
    read those inputs when they are made, and print a text that this particular button
    was clicked. We will have two buttons on the web page and these will be **ON**
    and **OFF**. Whenever any of these are clicked on the web page, the Python code
    will print that the particular button was clicked. Let's go ahead and do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, switch back to the templates folder and create a file named `main.html`
    file with the content as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can see that it has two button elements with ID on and off.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you are done with creating this file, save it and go back to the home
    automation directory, edit the file `WebAppFromTemplate.py` as shown in following
    screenshot, and save it as `ControlWebApp.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have saved it, you can go ahead and run the program as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo python ControlWebApp.py`![Python-Flask on BeagleBone Black](img/4602_06_24.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now you can open the webpage and see how it looks. You should see something
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the **ON** button, you should see something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'When you click on the **OFF** button, you should see something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Python-Flask on BeagleBone Black](img/4602_06_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So now we have a program that can print which button was clicked. All we need
    is to write a program to change the state of the GPIO available on BeagleBone
    Black to HIGH and LOW whenever a button is pressed on the web page. We will be
    doing this in the project topic of this chapter. Before doing that, in the topic
    of this chapter, we will learn how a relay circuit works and how we can switch
    a relay circuit using the very little voltage that we get from the GPIO pins of
    the BeagleBone Black. In this way we will be able to use the relay to switch the
    AC Bulb on and off.
  prefs: []
  type: TYPE_NORMAL
- en: Transistors, relays, power switches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'So basically, to switch an AC appliance or any circuit, you will need a switch,
    just like you have in your houses, where you have a switch to turn on a bulb or
    a fan. There is a basic circuit involved which looks very much like the following
    picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transistors, relays, power switches](img/4602_06_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, as we can see in the preceding picture, if you toggle the switch it's going
    to open and close the circuit. This in turn will make the bulb go off and on.
    But this is done mechanically in normal mechanical switches.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whenever we want the same action to be performed, we will be using the electrically
    controlled switches, which are on an electrical relay. The image below shows an
    electrically controlled relay in off and on states:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transistors, relays, power switches](img/4602_06_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding diagram you can see that whenever the power is supplied to
    the coil from the **3V** power supply, the coil energizes and acts like a magnet
    pulling the terminal down. This connects the other terminal and closes the circuit
    and current flows through the circuit from the **6V** battery to the DC lamp.
    You can see this in action in Figure 2 in the preceding image. And when the coil
    is de-energized, as shown in Figure 1, the terminal is left open, which cuts off
    the circuit and opens it up so the lamp is in the off state, as no current flows
    through the circuit. Again, in the preceding example, you can see that a mechanical
    switch is used to switch the low voltage supply (3V) and the electrical relay
    is switching the high voltage supply.
  prefs: []
  type: TYPE_NORMAL
- en: Usually the easily available relays are off 5V DC operated where the voltage
    needed to energize the coil is 5V and enough current supply. But the GPIOs available
    on BeagleBone board are 3.3V at HIGH and 0V at LOW states respectively. We will
    be using a new electronic element in between to switch the low voltage supply,
    and this element is the transistor. I won't be going into details of types of
    transistor and their operation. You can browse around to learn more about it in
    detail. But in basic terms, it's an electronically controlled switch whenever
    base of the transistor is given supply i.e. on conduction happens via collector
    emitter and when base of transistor is low i.e. off, no conduction takes place.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the following diagram to understand how our circuit is going to be
    with a transistor interfaced with the relay when the relay is used to make a connection
    for the AC Bulb:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transistors, relays, power switches](img/4602_06_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So whenever the base driver is ON, that is to say HIGH, it will switch on the
    relay and whenever the base of the transistor is OFF, or LOW it will switch off
    the relay and, in turn, switch off the AC bulb.
  prefs: []
  type: TYPE_NORMAL
- en: You can directory connect the base of the transistor to the GPIO of the BeagleBone
    board which will turn the transistor on and off whenever the GPIO pin is HIGH
    and LOW respectively.
  prefs: []
  type: TYPE_NORMAL
- en: 'Relays board are available that are ready-made with transistors and relays.
    You can directly interface these with BeagleBone boards or with any other microcontroller
    boards as you can see in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Transistors, relays, power switches](img/4602_06_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting one of these will make your work simple, but if you want to make one
    by yourself you can also do that researching it on the Internet. To make it easier
    for the next steps, I got one of the ready-made modules and interfaced it to the
    GPIO of the BeagleBone Black. The connections are pretty straightforward, as shown
    in the previous figures. D1 of the relay module is connected to GPIO_60 i.e. P9_12
    and Vcc to 5V on BeagleBone Black, and the Gnd pin of the relay module is connected
    to the Gnd Pin of the relay module. Connect the phase and neutral wire from the
    AC bulb via the K1 NO and C terminals of the relay, as the D1 input corresponds
    to switching the K1 relay in the module.
  prefs: []
  type: TYPE_NORMAL
- en: '![Transistors, relays, power switches](img/4602_06_47.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can see the schematic given above for more clear details about the circuit
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: '![Transistors, relays, power switches](img/4602_06_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you are done with the circuit connections, use the blink code that we used
    in the second chapter to test whether the relay is switching on and off, or else
    go ahead to the next topic to write down the code to control the circuit from
    the web page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Advanced project: An Internet controlled power switch – controlling an AC bulb
    from the Internet'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now we have set up the circuit from the previous topic, we will code it on
    Python to switch the GPIO to HIGH and LOW from the web page. You can proceed and
    write the code as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project: An Internet controlled power switch – controlling an AC
    bulb from the Internet](img/4602_06_34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now save the file as `GPIOControlWebApp.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s run the code to switch the lamp on and off, and go ahead and open the
    page from the Android tablet. The tablet is connected to the same LAN Wi-Fi router
    as the BeagleBone board. Click the on and off buttons and you will see the output
    in the shell terminal as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project: An Internet controlled power switch – controlling an AC
    bulb from the Internet](img/4602_06_35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'And the bulb will turn on and off as shown in the following pictures:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project: An Internet controlled power switch – controlling an AC
    bulb from the Internet](img/4602_06_36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bulb is in the off state
  prefs: []
  type: TYPE_NORMAL
- en: '![Advanced project: An Internet controlled power switch – controlling an AC
    bulb from the Internet](img/4602_06_37.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Bulb is in the on state
  prefs: []
  type: TYPE_NORMAL
- en: But right now, we are just doing this on our local network within our home router
    LAN network to which the BeagleBone board is connected. What if we wanted to control
    the bulb via a 3G connection available on our phone? In this case you need to
    route your BeagleBone Black and connect to it via the Internet from your phone,
    which is connected to the Internet via 3G. If you go back to web servers topic
    in this chapter you can see that there are lots of routers, DNS gateways in between
    to connect to a server from one end of the Internet from a client to the server.
    In our case, our BeagleBone board device itself is acting as a server. We will
    be just be port forwarding our router to redirect the requests that comes to the
    router's public IP address to the particular port at which BeagleBone Black is
    hosting its server, that is 5000, in our case, the default port at which Python-Flask
    routes its requests. So, let's go ahead and do the port forwarding to access the
    web server on the BeagleBone board via the public IP assigned to our router by
    the Internet service provider.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up port forwarding
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the steps to set up port forwarding:'
  prefs: []
  type: TYPE_NORMAL
- en: As we did in [Chapter 1](ch01.html "Chapter 1. Getting Started with BeagleBone")*,
    Getting Started with BeagleBone*, login into your router's configuration page:![Setting
    up port forwarding](img/4602_06_38.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **ADVANCED** settings:![Setting up port forwarding](img/4602_06_39.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to **Advanced Setup**:![Setting up port forwarding](img/4602_06_40.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Port Forwarding**:![Setting up port forwarding](img/4602_06_41.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **Add Custom Service**.You will see the page as shown in the following
    screenshot:![Setting up port forwarding](img/4602_06_42.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Fill in the details and save the configuration by clicking on **Apply**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up port forwarding](img/4602_06_43.jpg)![Setting up port forwarding](img/4602_06_44.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are done with this. Go to Google and type in `what is my ip?` This
    will check your public IP Address, and you should get the output as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up port forwarding](img/4602_06_45.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you have this, pull out your phone and connect to 3G, using this public
    IP address followed by port number `5000` to access your BeagleBone board. This
    will allow you to switch the AC bulb on and off from your phone. You will get
    a web page as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up port forwarding](img/4602_06_46.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now you can give the web link `183.82.111.33:5000` to any person who is connected
    to the Internet to access you BeagleBone board and control the bulb from any place
    around the world. Thus, you have your home automation system connected to the
    Internet. You can also call it as you have built your Internet of Things project
    by end of this chapter. Try it out on your own to control two appliances, change
    the style of the HTML webpage and add colors and control graphics to the webpage
    to learn and have more fun.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learnt how web servers work to setup our own home automation
    system where an AC bulb is controlled from any place around the world via the
    Internet. In the process of building it we learnt how to set up a web server on
    a BeagleBone board using a Python-Flask web framework. Then we also learnt how
    to interface an AC circuit with a BeagleBone board using a relay circuit to control
    an AC bulb via the web server running on the BeagleBone board. In this way, you
    have built an advanced Internet of Things project in this chapter. In the next
    chapter, we will be looking at how to interface a camera with the BeagleBone Black
    and work with OpenCV for image processing on BeagleBone Black.
  prefs: []
  type: TYPE_NORMAL
