- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Python Data Types and Structures
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 数据类型和结构
- en: Data structures and algorithms are important components in the development of
    any software system. An algorithm can be defined as a set of step-by-step instructions
    to solve any given problem; an algorithm processes the data and produces the output
    results based on the specific problem. The data used by the algorithm to solve
    the problem has to be stored and organized efficiently in the computer memory
    for the efficient implementation of the software. The performance of the system
    depends upon the efficient access and retrieval of the data, and that depends
    upon how well the data structures that store and organize the data in the system
    are chosen.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构和算法是任何软件开发的重要组件。算法可以被定义为解决任何给定问题的逐步指令集；算法处理数据并基于特定问题产生输出结果。算法用于解决问题的数据必须在计算机内存中高效地存储和组织，以便软件的高效实现。系统的性能取决于数据的有效访问和检索，这取决于存储和组织系统数据的结构选择得有多好。
- en: Data structures deal with how the data is stored and organized in the memory
    of the computer that is going to be used in a program. Computer scientists should
    understand how efficient an algorithm is and which data structure should be used
    in its implementation. The Python programming language is a robust, powerful,
    and widely used language to develop software-based systems. Python is a high-level,
    interpreted, and object-oriented language that is very convenient to learn and
    understand the concepts of data structures and algorithms.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构处理在程序中将使用的数据在计算机内存中的存储和组织方式。计算机科学家应该了解算法的效率以及在其实现中应该使用哪种数据结构。Python 编程语言是一种强大、稳健且广泛使用的语言，用于开发基于软件的系统。Python
    是一种高级、解释型、面向对象的语言，非常便于学习和理解数据结构和算法的概念。
- en: 'In this chapter, we briefly review the Python programming language components
    that we will be using to implement the various data structures discussed in this
    book. For a more detailed discussion on the Python language in broader terms,
    take a look at the Python documentation:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要回顾了我们将用于实现本书中讨论的各种数据结构的 Python 编程语言组件。对于更详细地讨论 Python 语言，请参阅 Python
    文档：
- en: '[https://docs.python.org/3/reference/index.html](https://docs.python.org/3/reference/index.html)'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/reference/index.html](https://docs.python.org/3/reference/index.html)'
- en: '[https://docs.python.org/3/tutorial/index.html](https://docs.python.org/3/tutorial/index.html)'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/tutorial/index.html](https://docs.python.org/3/tutorial/index.html)'
- en: 'In this chapter, we will look at the following topics:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主题：
- en: Introducing Python 3.10
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍 Python 3.10
- en: Installing Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Setting up a Python development environment
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置 Python 开发环境
- en: Overview of data types and objects
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据类型和对象概述
- en: Basic data types
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基本数据类型
- en: Complex data types
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 复杂数据类型
- en: Python’s collections module
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的 collections 模块
- en: Introducing Python 3.10
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍 Python 3.10
- en: 'Python is an interpreted language: the statements are executed line by line.
    It follows the concepts of object-oriented programming. Python is dynamically
    typed, which makes it an ideal candidate among languages for scripting and fast-paced
    development on many platforms. Its source code is open source, and there is a
    very big community that is using and developing it continuously, at a very fast
    pace. Python code can be written in any text editor and saved with the `.py` file
    extension. Python is easy to use and learn because of its compactness and elegant
    syntax.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种解释型语言：语句逐行执行。它遵循面向对象编程的概念。Python 是动态类型的，这使得它成为脚本和许多平台上快速开发的首选语言之一。其源代码是开源的，并且有一个非常大的社区在持续使用和快速开发它。Python
    代码可以用任何文本编辑器编写，并保存为 `.py` 文件扩展名。Python 由于其紧凑性和优雅的语法，易于使用和学习。
- en: Since the Python language will be used to write the algorithms, an explanation
    is provided of how to set up the environment to run the examples.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 由于将使用 Python 语言编写算法，因此提供了如何设置环境以运行示例的解释。
- en: Installing Python
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: Python is preinstalled on Linux- and Mac-based operating systems. However, you
    will want to install the latest version of Python, which can be done on different
    operating systems as per the following instructions.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Python 预装在基于 Linux 和 Mac 的操作系统上。然而，你可能希望安装最新版本的 Python，根据以下说明，可以在不同的操作系统上完成此操作。
- en: Windows operating system
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Windows 操作系统
- en: For Windows, Python can be installed through an executable `.exe` file.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 系统，Python 可以通过可执行文件 `.exe` 来安装。
- en: Go to [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://www.python.org/downloads/](https://www.python.org/downloads/).
- en: Choose the latest version of Python—currently, it is 3.10.0—according to your
    architecture. If you have a 32-bit version of Windows, choose the 32-bit installer;
    otherwise, choose the 64-bit installer.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 根据你的架构选择 Python 的最新版本——目前是 3.10.0。如果你有 32 位 Windows 版本，请选择 32 位安装程序；否则，请选择 64
    位安装程序。
- en: Download the `.exe` file.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 `.exe` 文件。
- en: Open the `python-3.10.0.exe` file.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `python-3.10.0.exe` 文件。
- en: Make sure to check **Add Python 3.10.0 to PATH**.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保检查 **将 Python 3.10.0 添加到 PATH**。
- en: Click **Install Now** and then wait until the installation is complete; you
    can now use Python.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **立即安装** 然后等待安装完成；现在你可以使用 Python 了。
- en: To verify that Python is installed correctly, open the Command Prompt and type
    the `python -–version` command. It should output `Python 3.10.0`.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证 Python 是否正确安装，请打开命令提示符并输入 `python -–version` 命令。它应该输出 `Python 3.10.0`。
- en: Linux-based operating systems
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于 Linux 的操作系统
- en: 'To install Python on a Linux machine, take the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Linux 机器上安装 Python，请按照以下步骤操作：
- en: Check whether you have Python preinstalled by entering the `python --version`
    command in the terminal.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在终端中输入 `python --version` 命令来检查你是否预先安装了 Python。
- en: 'If you do have not a version of Python, then install it through the following
    command:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你还没有 Python 版本，可以通过以下命令进行安装：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, verify that you have installed Python correctly by typing the `python3.10
    --version` command in the terminal. It should output `Python 3.10.0`.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，通过在终端中输入 `python3.10 --version` 命令来验证你是否正确安装了 Python。它应该输出 `Python 3.10.0`。
- en: Mac operating system
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Mac 操作系统
- en: 'To install Python on a Mac, take the following steps:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Mac 上安装 Python，请按照以下步骤操作：
- en: Go to [https://www.python.org/downloads/](https://www.python.org/downloads/).
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往 [https://www.python.org/downloads/](https://www.python.org/downloads/).
- en: Download and open the installer file for `Python 3.10.0`.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并打开 `Python 3.10.0` 的安装程序文件。
- en: Click **Install Now**.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **立即安装**。
- en: To verify that Python is installed correctly, open the terminal and type `python
    –version`. It should output `Python 3.10.0`.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要验证 Python 是否正确安装，请打开终端并输入 `python –version`。它应该输出 `Python 3.10.0`。
- en: Setting up a Python development environment
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置 Python 开发环境
- en: Once you have installed Python successfully for your respective OS, you can
    start this hands-on approach with data structures and algorithms. There are two
    popular methods to set up the development environment.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦在你的操作系统上成功安装了 Python，你就可以开始这个动手实践的数据结构和算法课程了。有两种流行的方法来设置开发环境。
- en: Setup via the command line
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过命令行设置
- en: The first method to set up the Python executing environment is via the command
    line, after installation of the Python package on your respective operating system.
    It can be set up using the following steps.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 设置 Python 执行环境的第一个方法是安装 Python 软件包后通过命令行进行，具体步骤如下。
- en: Open the terminal on Mac/Linux OS or Command Prompt on Windows.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Mac/Linux OS 上打开终端或在 Windows 上打开命令提示符。
- en: Execute the Python 3 command to start Python, or simply type `py` to start Python
    in the Windows Command Prompt.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行 Python 3 命令以启动 Python，或在 Windows 命令提示符中简单地输入 `py` 来启动 Python。
- en: Commands can be executed on the terminal.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 命令可以在终端中执行。
- en: '![Text, letter  Description automatically generated](img/B17217_01_01.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![文本，字母  描述自动生成](img/B17217_01_01.png)'
- en: 'Figure 1.1: Screenshot of the command-line interface for Python'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：Python 命令行界面的截图
- en: The User Interface for the command-line execution environment is shown in *Figure
    1.1.*
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 命令行执行环境的用户界面如图 1.1 所示。
- en: Setup via Jupyter Notebook
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过 Jupyter Notebook 设置
- en: The second method to run the Python program is through Jupyter Notebook, which
    is a browser-based interface where we can write the code. The User Interface of
    Jupyter Notebook is shown in *Figure 1.2*. The place where we can write the code
    is called a “cell.”
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 Python 程序的第二种方法是通过 Jupyter Notebook，这是一个基于浏览器的界面，我们可以在这里编写代码。Jupyter Notebook
    的用户界面如图 1.2 所示。我们可以编写代码的地方被称为“单元格”。
- en: '![](img/B17217_01_02.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17217_01_02.png)'
- en: 'Figure 1.2: Screenshot of the Jupyter Notebook interface'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：Jupyter Notebook 界面的截图
- en: Once Python is installed, on Windows, Jupyter Notebook can be easily installed
    and set up using a scientific Python distribution called Anaconda by taking the
    following steps.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 Python 安装完成，在 Windows 上，可以通过使用名为 Anaconda 的科学 Python 发行版来轻松安装和设置 Jupyter
    Notebook，具体步骤如下。
- en: Download the Anaconda distribution from [https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://www.anaconda.com/products/individual](https://www.anaconda.com/products/individual)
    下载 Anaconda 发行版。
- en: Install it according to the installation instructions.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按照安装说明进行安装。
- en: Once installed, on Windows, we can run the notebook by executing the `jupyter
    notebook` command at the Command Prompt. Alternatively, following installation,
    the `Jupyter Notebook` app can be searched for and run from the taskbar.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装，在 Windows 上，我们可以在命令提示符中执行 `jupyter notebook` 命令来运行笔记本。或者，安装后，可以从任务栏中搜索并运行
    `Jupyter Notebook` 应用程序。
- en: 'On Linux/Mac operating systems, Jupyter Notebook can be installed using `pip3`
    by running the following code in the terminal:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Linux/Mac 操作系统上，可以通过在终端中运行以下代码来使用 `pip3` 安装 Jupyter Notebook：
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After installation of Jupyter Notebook, we can run it by executing the following
    command at the Terminal:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Jupyter Notebook 后，我们可以在终端中执行以下命令来运行它：
- en: '[PRE2]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: On some systems, this command does not work, depending upon the operating system
    or system configuration. In that case, Jupyter Notebook should start by executing
    the following command on the terminal.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在某些系统上，此命令可能不起作用，具体取决于操作系统或系统配置。在这种情况下，应在终端中执行以下命令以启动 Jupyter Notebook。
- en: '[PRE3]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: It is important to note that we will be using Jupyter Notebook to execute all
    the commands and programs throughout the book, but the code will also function
    in the command line if you’d prefer to use that.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，我们将使用 Jupyter Notebook 执行本书中的所有命令和程序，但如果您更喜欢使用命令行，代码也将在该命令行中运行。
- en: Overview of data types and objects
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据类型和对象概述
- en: Given a problem, we can plan to solve it by writing a computer program or software.
    The first step is to develop an algorithm, essentially a step-by-step set of instructions
    to be followed by a computer system, to solve the problem. An algorithm can be
    converted into computer software using any programming language. It is always
    desired that the computer software or program be as efficient and fast as possible;
    the performance or efficiency of the computer program also depends highly on how
    the data is stored in the memory of a computer, which is then going to be used
    in the algorithm.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个问题，我们可以通过编写计算机程序或软件来计划解决它。第一步是开发算法，本质上是一系列计算机系统将遵循的指令，以解决问题。算法可以使用任何编程语言转换为计算机软件。总是希望计算机软件或程序尽可能高效和快速；计算机程序的性能或效率也高度依赖于数据在计算机内存中的存储方式，这些数据随后将在算法中使用。
- en: 'The data to be used in an algorithm has to be stored in variables, which differ
    depending upon what kind of values are going to be stored in those variables.
    These are called *data types*: an integer variable can store only integer numbers,
    and a float variable can store real numbers, characters, and so on. The variables
    are containers that can store the values, and the values are the contents of different
    data types.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法中使用的数据必须存储在变量中，这些变量取决于将要存储在其中的值的类型。这些被称为 *数据类型*：整数变量只能存储整数，浮点变量可以存储实数、字符等。变量是存储值的容器，而值是不同数据类型的内
    容。
- en: 'In most programming languages, variables and their data types must initially
    be declared, and then only that type of data can be statically stored in those
    variables. However, in Python, this is not the case. Python is a dynamically typed
    language; the data type of the variables is not required to be explicitly defined.
    The Python interpreter implicitly binds the value of the variable with its type
    at runtime. In Python, data types of the variable type can be checked using the
    function `type()`, which returns the type of variable passed. For example, if
    we enter the following code:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数编程语言中，变量及其数据类型必须最初声明，然后才能在那些变量中静态存储那种类型的数据。然而，在 Python 中并非如此。Python 是一种动态类型语言；变量的数据类型不需要显式定义。Python
    解释器在运行时隐式地将变量的值与其类型绑定。在 Python 中，可以使用 `type()` 函数检查变量的数据类型，该函数返回传递给它的变量的类型。例如，如果我们输入以下代码：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will get an output like the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将得到以下输出：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The following example, demonstrates a variable that has a `var` float value,
    which is substituted for a string value:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例演示了一个具有 `var` 浮点值的变量，该值被替换为字符串值：
- en: '[PRE6]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The output of the code is:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的输出如下：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'In Python, every item of data is an object of a specific type. Consider the
    preceding example; here, when a variable `var` is assigned a value of `13.2`,
    the interpreter initially creates a float object having a value of `13.2`; a variable
    `var` then points to that object as shown in *Figure 1.3*:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，每个数据项都是一个特定类型的对象。考虑前面的例子；在这里，当变量 `var` 被赋予值 `13.2` 时，解释器最初创建一个具有值
    `13.2` 的浮点对象；变量 `var` 然后指向该对象，如图 *图 1.3* 所示：
- en: '![](img/B17217_01_03.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17217_01_03.png)'
- en: 'Figure 1.3: Variable assignment'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：变量赋值
- en: 'Python is an easy-to-learn object-oriented language, with a rich set of built-in
    data types. The principal built-in types are as follows and will be discussed
    in more detail in the following sections:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种易于学习的面向对象语言，具有丰富的内置数据类型。主要内置类型如下，将在以下章节中更详细地讨论：
- en: 'Numeric types: `Integer (int)`, `float`, `complex`'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数值类型：`整数 (int)`，`浮点数 (float)`，`复数 (complex)`
- en: 'Boolean types: `bool`'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布尔类型：`bool`
- en: 'Sequence types: `String (str)`, `range`, `list`, `tuple`'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 序列类型：`字符串 (str)`，`range`，`列表 (list)`，`元组 (tuple)`
- en: 'Mapping types: `dictionary (dict)`'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 映射类型：`字典 (dict)`
- en: 'Set types: `set`, `frozenset`'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合类型：`集合 (set)`，`frozenset`
- en: We will divide these into basic (numeric, Boolean, and sequence) and complex
    (mapping and set) data types. In subsequent sections, we will discuss them one
    by one in detail.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把它们分为基本（数值、布尔和序列）和复杂（映射和集合）数据类型。在随后的章节中，我们将逐一详细讨论。
- en: Basic data types
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本数据类型
- en: The most basic data types are numeric and Boolean types. We’ll cover those first,
    followed by sequence data types.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的数据类型是数值和布尔类型。我们将首先介绍这些类型，然后是序列数据类型。
- en: Numeric
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数值
- en: 'Numeric data type variables store numeric values. Integer, float, and complex
    values belong to this data type. Python supports three types of numeric types:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 数值数据类型变量存储数值。整数、浮点数和复数值属于此数据类型。Python 支持三种数值类型：
- en: '**Integer** (**int**): In Python, the interpreter takes a sequence of decimal
    digits as a decimal value, such as the integers `45`, `1000`, or `-25`.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**整数**（**int**）：在 Python 中，解释器将一系列十进制数字视为十进制值，例如整数 `45`，`1000` 或 `-25`。'
- en: '**Float**: Python considers a value having a floating-point value as a float
    type; it is specified with a decimal point. It is used to store floating-point
    numbers such as `2.5` and `100.98`. It is accurate up to `15` decimal points.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**浮点数**：Python 将具有浮点值的值视为浮点类型；它用小数点指定。它用于存储浮点数，如 `2.5` 和 `100.98`。它精确到 `15`
    位小数。'
- en: '**Complex**: A complex number is represented using two floating-point values.
    It contains an ordered pair, such as a + *i*b. Here, a and b denote real numbers
    and *i* denotes the imaginary component. The complex numbers take the form of
    `3.0 + 1.3i`, `4.0i`, and so on.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**复杂数**：复数使用两个浮点值表示。它包含一个有序对，例如 a + *i*b。在这里，a 和 b 表示实数，而 *i* 表示虚部。复数的形式有 `3.0
    + 1.3i`，`4.0i` 等等。'
- en: Boolean
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔类型
- en: 'This provides a value of either `True` or `False`, checking whether any statement
    is true or false. `True` can be represented by any non-zero value, whereas `False`
    can be represented by 0\. For example:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将提供一个 `True` 或 `False` 的值，检查任何语句是否为真或假。`True` 可以用任何非零值表示，而 `False` 可以用 0 表示。例如：
- en: '[PRE8]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The output will be the following:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将是以下内容：
- en: '[PRE9]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'In Python, the numeric values can be used as bool values using the built-in
    `bool()` function. Any number (integer, float, complex) having a value of zero
    is regarded as `False`, and a non-zero value is regarded as `True`. For example:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可以使用内置的 `bool()` 函数将数值用作布尔值。任何值为零的数值（整数、浮点数、复数）被视为 `False`，而非零值被视为
    `True`。例如：
- en: '[PRE10]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The output of the above code will be as follows.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示。
- en: '[PRE11]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Sequence data types are also a very basic and common data type, which we’ll
    look at next.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 序列数据类型也是一种非常基本且常见的类型，我们将在下一节中探讨。
- en: Sequences
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 序列
- en: 'Sequence data types are used to store multiple values in a single variable
    in an organized and efficient way. There are four basic sequence types: string,
    range, lists, and tuples.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 序列数据类型用于以有组织和高效的方式在单个变量中存储多个值。有四种基本序列类型：字符串、范围、列表和元组。
- en: Strings
  id: totrans-106
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 字符串
- en: A string is an immutable sequence of characters represented in single, double,
    or triple quotes.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串是一个不可变的字符序列，用单引号、双引号或三引号表示。
- en: Immutable means that once a data type has been assigned some value, it can’t
    be changed.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 不可变意味着一旦数据类型被赋予某个值，就不能更改。
- en: 'The string type in Python is called `str`. A triple quote string can span into
    multiple lines that include all the whitespace in the string. For example:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的字符串类型称为 `str`。三引号字符串可以跨越多行，包括字符串中的所有空白。例如：
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'The output will be as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The `+` operator concatenates strings, which returns a string after concatenating
    the operands, joining them together. For example:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`+` 运算符用于连接字符串，连接操作数后返回一个字符串。例如：'
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The output will be as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE15]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `*` operator can be used to create multiple copies of a string. When it
    is applied with an integer (*n*, let’s say) and a string, the `*` operator returns
    a string consisting of *n* concatenated copies of the string. For example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` 运算符可以用来创建字符串的多个副本。当它与一个整数（例如 *n*）和一个字符串一起使用时，`*` 运算符返回一个由 *n* 个字符串连接副本组成的字符串。例如：'
- en: '[PRE16]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The output will be as follows.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE17]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Range
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 范围
- en: 'The `range` data type represents an immutable sequence of numbers. It is mainly
    used in `for` and `while` loops. It returns a sequence of numbers starting from
    a given number up to a number specified by the function argument. It is used as
    in the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`range` 数据类型表示一个不可变的数字序列。它主要用于 `for` 和 `while` 循环。它返回从给定数字开始到由函数参数指定的数字的序列。它用于以下命令中：'
- en: '[PRE18]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Here, the `start` argument specifies the start of the sequence, the `stop`
    argument specifies the end limit of the sequence, and the `step` argument specifies
    how the sequence should increase or decrease. This example Python code demonstrates
    the working of the range function:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`start` 参数指定序列的开始，`stop` 参数指定序列的结束限制，`step` 参数指定序列应如何增加或减少。以下 Python 代码示例演示了
    `range` 函数的工作原理：
- en: '[PRE19]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The output will be as follows.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE20]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Lists
  id: totrans-128
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列表
- en: 'Python lists are used to store multiple items in a single variable. Duplicate
    values are allowed in a list, and elements can be of different types: for example,
    you can have both numeric and string data in a Python list.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Python 列表用于在单个变量中存储多个项目。列表中允许有重复值，并且元素可以是不同类型：例如，你可以在 Python 列表中同时有数字和字符串数据。
- en: 'The items stored in the list are enclosed within square brackets, `[]`, and
    separated with a comma, as shown below:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中存储的项用方括号 `[]` 括起来，并用逗号分隔，如下所示：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The output of the above code will be as follows.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的输出将如下所示。
- en: '[PRE22]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The data element of the list is shown in *Figure 1.4*, showing the index value
    of each of the list items:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的数据元素在 *图 1.4* 中显示，显示了列表每个元素的索引值：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B17217_01_04.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序 描述自动生成](img/B17217_01_04.png)'
- en: 'Figure 1.4: Data elements of a sample list'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4：示例列表的数据元素
- en: The characteristics of a list in Python are as follows. Firstly, the list elements
    can be accessed by its index, as shown in *Figure 1.4*. The list elements are
    ordered and dynamic. It can contain any arbitrary objects that are so desired.
    In addition, the `list` data structure is mutable, whereas most of the other data
    types, such as `integer` and `float` are immutable.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Python 列表的特点如下。首先，可以通过索引访问列表元素，如图 *图 1.4* 所示。列表元素是有序和动态的。它可以包含任何所需的任意对象。此外，`list`
    数据结构是可变的，而大多数其他数据类型，如 `integer` 和 `float`，是不可变的。
- en: Seeing as a list is a mutable data type, once created, the list elements can
    be added, deleted, shifted, and moved within the list.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表是一种可变的数据类型，一旦创建，列表元素可以添加、删除、移动和在列表内部移动。
- en: 'All the properties of lists are explained in *Table 1.1* below for greater
    clarity:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的 *表 1.1* 中解释了列表的所有属性，以获得更清晰的了解：
- en: '| **Property** | **Description** | **Example** |'
  id: totrans-140
  prefs: []
  type: TYPE_TB
  zh: '| **属性** | **描述** | **示例** |'
- en: '| **Ordered** | The list elements are ordered in a sequence in which they are
    specified in the list at the time of defining them. This order does not need to
    change and remains innate for its lifetime. |'
  id: totrans-141
  prefs: []
  type: TYPE_TB
  zh: '| **有序** | 列表元素按照在定义时在列表中指定的顺序进行排序。这种顺序不需要改变，并且在其整个生命周期中保持固有。 |'
- en: '[PRE23]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '|'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Dynamic** | The list is dynamic. It can grow or shrink as needed by adding
    or removing list items. |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| **动态** | 列表是动态的。它可以通过添加或删除列表项来根据需要增长或缩小。 |'
- en: '[PRE25]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '|'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **List elements can be any arbitrary set of objects** | List elements can
    be of the same type or varying data types. |'
  id: totrans-149
  prefs: []
  type: TYPE_TB
  zh: '| **列表元素可以是任何任意集合的对象** | 列表元素可以是相同类型或不同数据类型。 |'
- en: '[PRE27]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '|'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **List elements can be accessed through an index** | Elements can be accessed
    using zero-based indexing in square brackets, similar to a string. Accessing elements
    in a list is similar to strings; negative list indexing also works in lists. A
    negative list index counts from the end of the list.Lists also support slicing.
    If `abc` is a list, the expression `abc[x:y]` will return the portion of elements
    from index `x` to index `y` (not including index `y`) |'
  id: totrans-153
  prefs: []
  type: TYPE_TB
  zh: '| **列表元素可以通过索引访问** | 列表中的元素可以通过方括号中的零基索引访问，类似于字符串。访问列表中的元素类似于字符串；负列表索引在列表中也有效。负列表索引从列表的末尾开始计数。列表还支持切片。如果`abc`是一个列表，则表达式`abc[x:y]`将返回从索引`x`到索引`y`（不包括索引`y`）的元素部分
    |'
- en: '[PRE29]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '|'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Mutable** | Single list value: Elements in a list can be updated through
    indexing and simple assignment.Modifying multiple list values is also possible
    through slicing. |'
  id: totrans-157
  prefs: []
  type: TYPE_TB
  zh: '| **可变** | 单个列表值：列表中的元素可以通过索引和简单赋值进行更新。也可以通过切片修改多个列表值。 |'
- en: '[PRE31]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '|'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '|  |  |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '|  |  |'
- en: '[PRE32]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '|'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| **Other operators** | Several operators and built-in functions can also be
    applied in lists, such as `in`, `not in`, concatenation (`+`), and replication
    (`*`) operators. Moreover, other built-in functions, such as `len()`, `min()`,
    and `max()`, are also available. |'
  id: totrans-163
  prefs: []
  type: TYPE_TB
  zh: '| **其他运算符** | 一些运算符和内置函数也可以应用于列表，例如`in`、`not in`、连接运算符（`+`）和复制运算符（`*`）。此外，其他内置函数，如`len()`、`min()`和`max()`，也是可用的。
    |'
- en: '[PRE33]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '|'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Table 1.1: Characteristics of list data structures with examples'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.1：具有示例的列表数据结构特征
- en: Now, while discussing list data types, we should first understand different
    operators, such as membership, identity, and logical operators, before discussing
    them and how they can be used in list data types or any other data types. In the
    coming section, we discuss how these operators work and are used in various data
    types.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在讨论列表数据类型之前，我们应该首先了解不同的运算符，例如成员、身份和逻辑运算符，然后再讨论它们以及它们如何在列表数据类型或其他数据类型中使用。在下一节中，我们将讨论这些运算符的工作原理以及它们在各种数据类型中的使用。
- en: Membership, identity, and logical operations
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 成员、身份和逻辑运算
- en: Python supports membership, identity, and logical operators. Several data types
    in Python support them. In order to understand how these operators work, we’ll
    discuss each of these operations in this section.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持成员、身份和逻辑运算符。Python中的几种数据类型支持这些运算符。为了理解这些运算符的工作原理，我们将在本节中讨论这些操作中的每一个。
- en: Membership operators
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 成员运算符
- en: These operators are used to validate the membership of an item. Membership means
    we wish to test if a given value is stored in the sequence variable, such as a
    string, list, or tuple. Membership operators are to test for membership in a sequence;
    that is, a string, list, or tuple. Two common membership operators used in Python
    are `in` and `not` `in`.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符用于验证项的成员资格。成员资格意味着我们希望测试给定的值是否存储在序列变量中，例如字符串、列表或元组。成员运算符用于测试序列中的成员资格；即字符串、列表或元组。Python中使用的两个常见成员运算符是`in`和`not
    in`。
- en: 'The `in` operator is used to check whether a value exists in a sequence. It
    returns `True` if it finds the given variable in the specified sequence, and `False`
    if it does not:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`in`运算符用于检查一个值是否存在于一个序列中。如果它在指定的序列中找到给定的变量，则返回`True`；如果没有找到，则返回`False`：'
- en: '[PRE35]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The output will be as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE36]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'The ‘`not in`'' operator returns to `True` if it does not find a variable in
    the specified sequence and `False` if it is found:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ‘`not in`’运算符在指定的序列中找不到变量时返回`True`，如果找到则返回`False`：
- en: '[PRE37]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The output will be as follows.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下。
- en: '[PRE38]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Identity operators
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 身份运算符
- en: Identity operators are used to compare objects. The different types of identity
    operators are `is` and `is` `not`, which are defined as follows.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 身份运算符用于比较对象。不同类型的身份运算符是`is`和`is not`，定义如下。
- en: 'The `is` operator is used to check whether two variables refer to the same
    object. This is different from the equality (`==`) operator. In the equality operator,
    we check whether two variables are equal. It returns `True` if both side variables
    point to the same object; if not, then it returns `False`:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`is`运算符用于检查两个变量是否指向同一个对象。这与相等运算符（`==`）不同。在相等运算符中，我们检查两个变量是否相等。如果两边变量指向同一个对象，则返回`True`；如果不指向同一个对象，则返回`False`：'
- en: '[PRE39]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The output will be as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE40]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `is` `not` operator is used to check whether two variables point to the
    same object or not. `True` is returned if both side variables point to different
    objects, otherwise, it returns `False`:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: “是”和“不是”运算符用于检查两个变量是否指向同一对象。如果两侧变量指向不同的对象，则返回True，否则返回False：
- en: '[PRE41]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The output will be as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE42]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: This section was about identity operators. Next, let us discuss logical operators.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了身份运算符。接下来，让我们讨论逻辑运算符。
- en: Logical operators
  id: totrans-192
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 逻辑运算符
- en: 'These operators are used to combine conditional statements (`True` or `False`).
    There are three types of logical operators: `AND`, `OR`, and `NOT`.'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这些运算符用于组合条件语句（`True`或`False`）。有三种类型的逻辑运算符：`AND`、`OR`和`NOT`。
- en: 'The logical `AND` operator returns True if both the statements are true, otherwise
    it returns False. It uses the following syntax: A and B:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑“与”运算符如果两个语句都为真，则返回True，否则返回False。它使用以下语法：A and B：
- en: '[PRE43]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The output will be as follows.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE44]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'The logical `OR` operator returns True if any of the statements are true, otherwise
    it returns False. It uses the following syntax: A or B:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑“或”运算符如果任何语句为真，则返回True，否则返回False。它使用以下语法：A or B：
- en: '[PRE45]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The output will be as follows.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE46]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The logical `NOT` operator is a Boolean operator, which can be applied to any
    object. It returns `True` if the object/operand is false, otherwise it returns
    `False`. Here, the operand is the unary expression/statement on which the operator
    is applied. It uses the following syntax: `not` `A`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 逻辑“非”运算符是一个布尔运算符，可以应用于任何对象。如果对象/操作数是假的，则返回True，否则返回False。在这里，操作数是运算符所应用的单一表达式/语句。它使用以下语法：`not`
    `A`：
- en: '[PRE47]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: The output will be as follows.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE48]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'In this section, we learned about different operators available in Python,
    and also saw how membership and identity operators can be applied to list data
    types. In the next section, we will continue discussing a final sequence data
    type: tuples.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们学习了Python中可用的不同运算符，并看到了如何将成员运算符和身份运算符应用于列表数据类型。在下一节中，我们将继续讨论最后一个序列数据类型：元组。
- en: Tuples
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元组
- en: Tuples are used to store multiple items in a single variable. It is a read-only
    collection where data is ordered (zero-based indexing) and unchangeable/immutable
    (items cannot be added, modified, removed). Duplicate values are allowed in a
    tuple, and elements can be of different types, similar to lists. Tuples are used
    instead of lists when we wish to store the data that should not be changed in
    the program.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 元组用于在单个变量中存储多个项。它是一个只读集合，其中数据是有序的（基于零的索引）且不可变/不可更改（无法添加、修改或删除项）。元组中允许有重复值，元素可以是不同类型，类似于列表。当希望存储在程序中不应更改的数据时，我们使用元组而不是列表。
- en: 'Tuples are written with round brackets and items are separated by a comma:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 元组使用圆括号编写，元素之间用逗号分隔：
- en: '[PRE49]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'For example:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE50]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Tuples support `+` (concatenation) and `*` (repetition) operations, similar
    to strings in Python. In addition, a membership operator and iteration operation
    are also available in a tuple. Different operations that tuples support are listed
    in *Table 1.2:*
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 元组支持`+`（连接）和`*`（重复）操作，类似于Python中的字符串。此外，元组中还有成员运算符和迭代操作。元组支持的运算列表如下所示：
- en: '| **Expression** | **Result** | **Description** |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **结果** | **描述** |'
- en: '|'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE51]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '|'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE52]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '| Length |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
  zh: '| 长度 |'
- en: '|'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE53]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '|'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE54]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '| Concatenation |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 连接 |'
- en: '|'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE55]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '|'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE56]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '| Repetition |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
  zh: '| 重复 |'
- en: '|'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE57]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '|'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE58]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '| Membership |'
  id: totrans-234
  prefs: []
  type: TYPE_TB
  zh: '| 成员关系 |'
- en: '|'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE59]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '|'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE60]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '| Iteration |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| 迭代 |'
- en: 'Table 1.2: Example of tuple operations'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.2：元组操作示例
- en: 'Tuples in Python support zero-based indexing, negative indexing, and slicing.
    To understand it, let’s take a sample tuple, as shown below:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: Python中的元组支持基于零的索引、负索引和切片。为了理解它，让我们看一个示例元组，如下所示：
- en: '[PRE61]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'We can see examples of zero-based indexing, negative indexing, and slicing
    operations in *Table 1.3*:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在*表1.3*中看到基于零的索引、负索引和切片操作的示例：
- en: '| **Expression** | **Result** | **Description** |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| **表达式** | **结果** | **描述** |'
- en: '|'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE62]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '|'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE63]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '| Zero-based indexing means that indexing starts from 0 rather than 1, and
    hence in this example, the first index refers to the second member of the tuple.
    |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| 基于零的索引意味着索引从0开始而不是1，因此在这个例子中，第一个索引指的是元组的第二个成员。 |'
- en: '|'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE64]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '|'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE65]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '| Negative: counting from the right-hand side. |'
  id: totrans-254
  prefs: []
  type: TYPE_TB
  zh: '| 负数：从右侧开始计数。 |'
- en: '|'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE66]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '|'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE67]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '| Slicing fetches a section. |'
  id: totrans-259
  prefs: []
  type: TYPE_TB
  zh: '| 切片获取一个部分。 |'
- en: 'Table 1.3: Example of tuple indexing and slicing'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.3：元组索引和切片示例
- en: Complex data types
  id: totrans-261
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复杂数据类型
- en: We have discussed basic data types. Next, we discuss complex data types, which
    are mapping data types, in other words, dictionary, and set data types, namely,
    set and frozenset. We will discuss these data types in detail in this section.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了基本数据类型。接下来，我们将讨论复杂的数据类型，即映射数据类型，换句话说，字典和集合数据类型，即集合和冻结集合。我们将在本节中详细讨论这些数据类型。
- en: Dictionaries
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典
- en: In Python, a dictionary is another of the important data types, similar to a
    list, in the sense that it is also a collection of objects. It stores the data
    in unordered {key-value} pairs; a key must be of a hashable and immutable data
    type, and value can be any arbitrary Python object. In this context, an object
    is hashable if it has a hash value that does not change during its lifetime in
    the program.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，字典是另一种重要的数据类型，类似于列表，因为它也是一个对象的集合。它以无序的 {键-值} 对的形式存储数据；键必须是可哈希的不可变数据类型，值可以是任何任意的
    Python 对象。在这种情况下，一个对象是可哈希的，如果它在程序生命周期中具有不变的哈希值。
- en: 'Items in the dictionary are enclosed in curly braces, `{}`, separated by a
    comma, and can be created using the `{key:value}` syntax, as shown below:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的项用花括号 `{}` 括起来，用逗号分隔，可以使用 `{key:value}` 语法创建，如下所示：
- en: '[PRE68]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Keys in dictionaries are case-sensitive, they should be unique, and cannot
    be duplicated; however, the values in the dictionary can be duplicated. For example,
    the following code can be used to create a dictionary:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的键是区分大小写的，它们应该是唯一的，不能重复；然而，字典中的值可以重复。例如，以下代码可以用来创建一个字典：
- en: '[PRE69]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '*Figure 1.5* shows the `{key-value}` pairs created by the preceding piece of
    code:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '*图 1.5* 展示了前面代码块创建的 `{键-值}` 对：'
- en: '![](img/B17217_01_05.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B17217_01_05.png)'
- en: 'Figure 1.5: Example dictionary data structure'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5：示例字典数据结构
- en: 'Values in a dictionary can be fetched based on the key. For example: `my_dict[''1'']`
    gives `data` as the output.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据键从字典中获取值。例如：`my_dict['1']` 返回 `data` 作为输出。
- en: 'The `dictionary` data type is mutable and dynamic. It differs from lists in
    the sense that dictionary elements can be accessed using keys, whereas the list
    elements are accessed via indexing. *Table 1.4* shows different characteristics
    of the dictionary data structure with examples:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`字典` 数据类型是可变和动态的。它与列表的不同之处在于，可以使用键访问字典元素，而列表元素是通过索引访问的。*表 1.4* 展示了具有示例的字典数据结构的不同特征：'
- en: '| **Item** | **Example** |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| **条目** | **示例** |'
- en: '| Creating a dictionary, and accessing elements from a dictionary |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 创建字典，并从字典中访问元素 |'
- en: '[PRE70]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '|'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `in` and `not` `in` operators |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| `in` 和 `not in` 操作符 |'
- en: '[PRE72]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '|'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Length of the dictionary |'
  id: totrans-283
  prefs: []
  type: TYPE_TB
  zh: '| 字典长度 |'
- en: '[PRE74]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '|'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Table 1.4: Characteristics of dictionary data structures with examples'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.4：具有示例的字典数据结构特征
- en: 'Python also includes the dictionary methods as shown in *Table 1.5*:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: Python 还包括以下表格 1.5 中所示的字典方法：
- en: '| **Function** | **Description** | **Example** |'
  id: totrans-289
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **描述** | **示例** |'
- en: '| `mydict.clear()` | Removes all elements from a dictionary. |'
  id: totrans-290
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.clear()` | 从字典中删除所有元素。 |'
- en: '[PRE76]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '|'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.get(<key>)` | Searches the dictionary for a key and returns the corresponding
    value, if it is found; otherwise, it returns `None`. |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.get(<key>)` | 在字典中搜索键，如果找到则返回相应的值；否则返回 `None`。 |'
- en: '[PRE78]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '|'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.items()` | Returns a list of dictionary items in (key, value) pairs.
    |'
  id: totrans-298
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.items()` | 返回一个包含字典项的列表，以（键，值）对的形式。 |'
- en: '[PRE80]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '|'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.keys()` | Returns a list of dictionary keys. |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.keys()` | 返回一个包含字典键的列表。 |'
- en: '[PRE82]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '|'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.values()` | Returns a list of dictionary values. |'
  id: totrans-306
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.values()` | 返回一个包含字典值的列表。 |'
- en: '[PRE84]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '|'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.pop()` | If a given key is present in the dictionary, then this function
    will remove the key and return the associated value. |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.pop()` | 如果字典中存在指定的键，则此函数将删除该键并返回关联的值。 |'
- en: '[PRE86]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '|'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.popitem()` | This method removes the last key-value pair added in
    the dictionary and returns it as a tuple. |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.popitem()` | 此方法删除字典中最后添加的键值对，并以元组的形式返回它。 |'
- en: '[PRE88]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '|'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| `mydict.update(<obj>)` | Merges one dictionary with another. Firstly, it
    checks whether a key of the second dictionary is present in the first dictionary;
    the corresponding value is then updated. If the key is not present in the first
    dictionary, then the key-value pair is added. |'
  id: totrans-318
  prefs: []
  type: TYPE_TB
  zh: '| `mydict.update(<obj>)` | 将一个字典与另一个字典合并。首先，它会检查第二个字典中的键是否存在于第一个字典中；然后更新相应的值。如果第一个字典中不存在该键，则添加键值对。
    |'
- en: '[PRE90]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '|'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Table 1.5: List of methods of dictionary data structures'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.5：字典数据结构的方法列表
- en: Sets
  id: totrans-323
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合
- en: 'A set is an unordered collection of hashable objects. It is iterable, mutable,
    and has unique elements. The order of the elements is also not defined. While
    the addition and removal of items are allowed, the items themselves within the
    set must be immutable and hashable. Sets support membership testing operators
    (`in, not in`), and operations such as intersection, union, difference, and symmetric
    difference. Sets cannot contain duplicate items. They are created by using the
    built-in `set()` function or curly braces `{}.` A `set()` returns a set object
    from an iterable. For example:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是无序的哈希对象集合。它是可迭代的、可变的，并且具有唯一元素。元素的顺序也是未定义的。虽然允许添加和删除项目，但集合内的项目本身必须是不可变的且可哈希的。集合支持成员资格测试运算符（`in,
    not in`），以及交集、并集、差集和对称差集等操作。集合不能包含重复的项目。它们是通过使用内置的`set()`函数或花括号`{}`创建的。`set()`从可迭代对象返回一个集合对象。例如：
- en: '[PRE92]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The output will be as follows:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE93]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: It is important to note that sets are unordered data structures, and the order
    of items in sets is not preserved. Therefore, your outputs in this section may
    be slightly different than those displayed here. However, this does not affect
    the function of the operations we will be demonstrating in this section.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要注意，集合是无序的数据结构，集合中项目的顺序不会被保留。因此，本节中的输出可能略不同于此处显示的输出。然而，这不会影响本节中我们将要展示的操作的功能。
- en: 'Sets are generally used to perform mathematical operations, such as intersection,
    union, difference, and complement. The `len()` method gives the number of items
    in a set, and the `in` and `not in` operators can be used in sets to test for
    membership:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 集合通常用于执行数学运算，如交集、并集、差集和补集。`len()`方法给出集合中元素的数量，`in`和`not in`运算符可以用于集合中测试成员资格：
- en: '[PRE94]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'The output will be as follows:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE95]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: 'The most commonly used methods and operations that can be applied to `set`
    data structures are as follows. The union of the two sets, say, `x1` and `x2`,
    is a set that consists of all elements in either set:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 可以应用于`set`数据结构的最常用方法和操作如下。两个集合，例如`x1`和`x2`的并集，是一个包含两个集合中所有元素的集合：
- en: '[PRE96]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '*Figure 1.6* shows a Venn diagram demonstrating the relationship between the
    two sets:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '*图1.6* 展示了一个维恩图，展示了两个集合之间的关系：'
- en: '![Diagram, venn diagram  Description automatically generated](img/B17217_01_06.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![图，维恩图 描述自动生成](img/B17217_01_06.png)'
- en: 'Figure 1.6: Venn diagram of sets'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 图1.6：集合的维恩图
- en: 'A description of the various operations that can be applied on set type variables
    is shown, with examples, in *Table 1.6*:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '*表1.6* 展示了可以应用于集合类型变量的各种操作，包括示例：'
- en: '| **Description** | **Example sample code** |'
  id: totrans-339
  prefs: []
  type: TYPE_TB
  zh: '| **描述** | **示例代码** |'
- en: '| Union of two sets, `x1` and `x2`. It can be done using two methods, (1) using
    the `&#124;` operator, (2) using the `union` method. |'
  id: totrans-340
  prefs: []
  type: TYPE_TB
  zh: '| 两个集合`x1`和`x2`的并集。可以通过两种方法实现，(1)使用`&#124;`运算符，(2)使用`union`方法。 |'
- en: '[PRE97]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '|'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Intersection of sets: to compute the intersection of two sets, an `&` operator
    and the `intersection()` method can be used, which returns a set of items common
    to both sets, `x1` and `x2`. |'
  id: totrans-344
  prefs: []
  type: TYPE_TB
  zh: '| 集合的交集：要计算两个集合的交集，可以使用`&`运算符和`intersection()`方法，它返回两个集合`x1`和`x2`共有的元素集合。 |'
- en: '[PRE99]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '|'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| The difference between sets can be obtained using `.difference()` and the
    subtraction operator, `-`, which returns a set of all elements that are in `x1`,
    but not in `x2`. |'
  id: totrans-348
  prefs: []
  type: TYPE_TB
  zh: '| 使用`.difference()`方法和减号`-`可以获取集合的差集，它返回一个集合，包含所有在`x1`中但不在`x2`中的元素。 |'
- en: '[PRE101]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-350
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '|'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| Symmetric difference can be obtained using `.symmetric_difference()` , while
    `^` returns a set of all data items that are present in either `x1` or `x2`, but
    not both. |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| 可以使用`.symmetric_difference()`方法获取对称差集，而`^`返回一个集合，包含在`x1`或`x2`中存在但不同时存在的所有数据项。
    |'
- en: '[PRE103]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '|'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '| To test whether a set is a subset of another, use `.issubset()` and the operator
    `<=`. |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| 要测试一个集合是否是另一个集合的子集，可以使用`.issubset()`方法和运算符`<=`。 |'
- en: '[PRE105]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '|'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: 'Table 1.6: Description of various operations applicable to set type variables'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.6：适用于集合类型变量的各种操作的描述
- en: Immutable sets
  id: totrans-361
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 不可变集合
- en: 'In Python, `frozenset` is another built-in type data structure, which is, in
    all respects, exactly like a set, except that it is immutable, and so cannot be
    changed after creation. The order of the elements is also undefined. A `frozenset`
    is created by using the built-in function `frozenset()`:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，`frozenset`是另一种内置类型数据结构，它在所有方面都与集合完全相同，除了它是不可变的，因此创建后不能更改。元素顺序也是未定义的。`frozenset`是通过使用内置函数`frozenset()`创建的：
- en: '[PRE107]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: 'The output is:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下：
- en: '[PRE108]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: 'Frozensets are useful when we want to use a set but require the use of an immutable
    object. Moreover, it is not possible to use set elements in the set, since they
    must also be immutable. Consider an example:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们想要使用集合但需要使用不可变对象时，Frozensets 是有用的。此外，由于集合元素也必须是不可变的，因此不可能在集合中使用集合元素。考虑以下示例：
- en: '[PRE109]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: 'The output will be:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下：
- en: '[PRE110]'
  id: totrans-369
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: 'Now with frozenset:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有了 `frozenset`：
- en: '[PRE111]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: 'The output is:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE112]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: In the above example, we create a set `x` of frozensets (`a1`, `a2`, and `a3`),
    which is possible because the frozensets are immutable.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述示例中，我们创建了一个包含 frozensets (`a1`、`a2` 和 `a3`) 的集合 `x`，这是可能的，因为 frozensets 是不可变的。
- en: We have discussed the most important and popular data types available in Python.
    Python also provides a collection of other important methods and modules, which
    we will discuss in the next section.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经讨论了 Python 中可用的最重要和最受欢迎的数据类型。Python 还提供了一系列其他重要的方法和模块，我们将在下一节中讨论。
- en: Python’s collections module
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的 collections 模块
- en: The `collections` module provides different types of containers, which are objects
    that are used to store different objects and provide a way to access them. Before
    accessing these, let’s consider briefly the role and relationships between modules,
    packages, and scripts.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`collections` 模块提供了不同类型的容器，这些容器是用于存储不同对象并提供访问它们的方式的对象。在访问这些之前，让我们简要地考虑模块、包和脚本之间的角色和关系。'
- en: A module is a Python script with the `.py` extension that contains a collection
    of functions, classes, and variables. A package is a directory that contains collections
    of modules; it has an `__init__.py` file, which lets the interpreter know that
    it is a package. A module can be called into a Python script, which can in turn
    make use of the module’s functions and variables in its code. In Python, we can
    import these to a script using the `import` statement. Whenever the interpreter
    encounters the `import` statement, it imports the code of the specified module.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 模块是一个具有 `.py` 扩展名的 Python 脚本，其中包含函数、类和变量的集合。包是一个包含模块的目录；它有一个 `__init__.py` 文件，它让解释器知道它是一个包。一个模块可以被调用到一个
    Python 脚本中，反过来，脚本可以使用模块中的函数和变量。在 Python 中，我们可以使用 `import` 语句将这些导入到脚本中。每当解释器遇到
    `import` 语句时，它就会导入指定模块的代码。
- en: '*Table 1.7* provides the data types and operations of the collections module
    and their descriptions:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '*表 1.7* 提供了 collections 模块的数据类型、操作及其描述：'
- en: '| **Container data type** | **Description** |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| **容器数据类型** | **描述** |'
- en: '| `namedtuple` | Creates a `tuple` with named fields similar to regular tuples.
    |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| `namedtuple` | 创建一个具有命名字段的 `tuple`，类似于常规的 `tuple`。|'
- en: '| `deque` | Doubly-linked lists that provide efficient adding and removing
    of items from both ends of the list. |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| `deque` | 双向链表，提供从列表两端高效添加和删除项的功能。|'
- en: '| `defaultdict` | A `dictionary` subclass that returns default values for missing
    keys. |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| `defaultdict` | 一个返回缺失键默认值的 `dictionary` 子类。|'
- en: '| `ChainMap` | A `dictionary` that merges multiple dictionaries. |'
  id: totrans-384
  prefs: []
  type: TYPE_TB
  zh: '| `ChainMap` | 一个合并多个字典的 `dictionary`。|'
- en: '| `Counter` | A `dictionary` that returns the counts corresponding to their
    objects/key. |'
  id: totrans-385
  prefs: []
  type: TYPE_TB
  zh: '| `Counter` | 一个返回其对象/键对应计数的 `dictionary`。|'
- en: '| `UserDict UserList UserString` | These data types are used to add more functionalities
    to their base data structure, such as a `dictionary`, `list`, and `string`. And
    we can create subclasses from them for custom `dict`/`list`/`string`. |'
  id: totrans-386
  prefs: []
  type: TYPE_TB
  zh: '| `UserDict UserList UserString` | 这些数据类型用于向其基本数据结构添加更多功能，例如 `dictionary`、`list`
    和 `string`。我们可以从它们创建自定义的 `dict`/`list`/`string` 子类。|'
- en: 'Table 1.7: Different container data type of the collections module'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 表 1.7：collections 模块的不同容器数据类型
- en: Let’s consider these types in more detail.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更详细地考虑这些类型。
- en: Named tuples
  id: totrans-389
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名元组
- en: The `namedtuple` of `collections` provides an extension of the built-in tuple
    data type. `namedtuple` objects are immutable, similar to standard tuples. Thus,
    we can’t add new fields or modify existing ones after the `namedtuple` instance
    is created. They contain keys that are mapped to a particular value, and we can
    iterate through named tuples either by index or key. The `namedtuple` function
    is mainly useful when several tuples are used in an application and it is important
    to keep track of each of the tuples in terms of what they represent.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`collections` 模块的 `namedtuple` 提供了对内置 `tuple` 数据类型的扩展。`namedtuple` 对象是不可变的，类似于标准
    `tuple`。因此，在创建 `namedtuple` 实例之后，我们无法添加新字段或修改现有字段。它们包含映射到特定值的键，我们可以通过索引或键迭代命名元组。`namedtuple`
    函数主要用于在应用程序中使用多个 `tuple` 时，并且需要跟踪每个 `tuple` 所代表的内容。'
- en: 'In this situation, namedtuple presents a more readable and self-documenting
    method. The syntax is as follows:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，namedtuple提供了一种更易读且具有自文档特性的方法。其语法如下：
- en: '[PRE113]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: 'Here is an example:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个例子：
- en: '[PRE114]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: The output will be as follows.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE115]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Here, in the above code, we firstly imported `namedtuple` from the `collections`
    module. `Book` is a named tuples, “`class`,” and then, `Book1` is created, which
    is an instance of `Book`. We also see that the data elements can be accessed using
    index and key methods.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们首先从`collections`模块导入了`namedtuple`。`Book`是一个命名元组，称为“`class`”，然后创建了`Book1`，它是`Book`的一个实例。我们还可以看到，数据元素可以通过索引和键方法访问。
- en: Deque
  id: totrans-398
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Deque
- en: A `deque` is a double-ended queue (deque) that supports append and pop elements
    from both sides of the list. Deques are implemented as double-linked lists, which
    are very efficient for inserting and deleting elements in O(1) time complexity.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`deque`是一个双端队列（deque），支持从列表的两端添加和弹出元素。Deques作为双链表实现，对于在O(1)时间复杂度内插入和删除元素非常高效。'
- en: 'Consider an example:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE116]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: The output will be as follows.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE117]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: 'You can also use some of the following predefined functions:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用以下预定义函数中的某些函数：
- en: '| **Function** | **Description** |'
  id: totrans-405
  prefs: []
  type: TYPE_TB
  zh: '| **函数** | **描述** |'
- en: '| `my_queue.append(''age'')` | Insert `''age''` at the right end of the list.
    |'
  id: totrans-406
  prefs: []
  type: TYPE_TB
  zh: '| `my_queue.append(''age'')` | 在列表的右端插入`''age''`。 |'
- en: '| `my_queue.appendleft(''age'')` | Insert `''age''` at the left end of the
    list. |'
  id: totrans-407
  prefs: []
  type: TYPE_TB
  zh: '| `my_queue.appendleft(''age'')` | 在列表的左端插入`''age''`。 |'
- en: '| `my_queue.pop()` | Delete the rightmost value. |'
  id: totrans-408
  prefs: []
  type: TYPE_TB
  zh: '| `my_queue.pop()` | 删除列表最右边的值。 |'
- en: '| `my_queue.popleft()` | Delete the leftmost value. |'
  id: totrans-409
  prefs: []
  type: TYPE_TB
  zh: '| `my_queue.popleft()` | 删除列表最左边的值。 |'
- en: 'Table 1.8: Description of different queue functions'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 表1.8：不同队列函数的描述
- en: In this section, we showed the use of the `deque` method of the `collections`
    module, and how elements can be added and deleted from the `queue`.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们展示了`collections`模块中`deque`方法的使用，以及如何向队列中添加和删除元素。
- en: Ordered dictionaries
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有序字典
- en: 'An ordered dictionary is a dictionary that preserves the order of the keys
    that are inserted. If the key order is important for any application, then `OrderedDict`
    can be used:'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 有序字典是一个保留插入键顺序的字典。如果键顺序对任何应用程序很重要，则可以使用`OrderedDict`：
- en: '[PRE118]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: 'An example could look like the following:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能如下所示：
- en: '[PRE119]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: The output will be as follows.
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE120]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: In the above code, we create a dictionary, `od`, using the `OrderedDict` module.
    We can observe that the order of the keys is the same as the order when we created
    the key.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们使用`OrderedDict`模块创建了字典`od`。我们可以观察到键的顺序与我们创建键时的顺序相同。
- en: Default dictionary
  id: totrans-420
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 默认字典
- en: 'The default dictionary (`defaultdict`) is a subclass of the built-in dictionary
    class (`dict)` that has the same methods and operations as that of the `dictionary`
    class, with the only difference being that it never raises a `KeyError`, as a
    normal dictionary would. `defaultdict` is a convenient way to initialize dictionaries:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 默认字典（`defaultdict`）是内置字典类（`dict`）的子类，它具有与`dictionary`类相同的方法和操作，唯一的区别是它永远不会像普通字典那样引发`KeyError`。`defaultdict`是初始化字典的一种方便方式：
- en: '[PRE121]'
  id: totrans-422
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: 'An example could look like the following:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能如下所示：
- en: '[PRE122]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: The output will be as follows.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示。
- en: '[PRE123]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: In the above example, if an ordinary dictionary had been used, then Python would
    have shown `KeyError` while the first key was added. `int`, which we supplied
    as an argument to `defaultdict`, is really the `int()` function, which simply
    returns a zero.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的例子中，如果使用了普通字典，那么在添加第一个键时，Python将显示`KeyError`。我们提供给`defaultdict`作为参数的`int`实际上是一个`int()`函数，它简单地返回零。
- en: ChainMap object
  id: totrans-428
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChainMap对象
- en: '`ChainMap` is used to create a list of dictionaries. The `collections.ChainMap`
    data structure combines several dictionaries into a single mapping. Whenever a
    key is searched in the `chainmap`, it looks through all the dictionaries one by
    one, until the key is not found:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`ChainMap`用于创建字典列表。`collections.ChainMap`数据结构将多个字典组合成一个单一映射。每当在`chainmap`中搜索键时，它会逐个遍历所有字典，直到找不到该键：'
- en: '[PRE124]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: 'An example could look like the following:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能如下所示：
- en: '[PRE125]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: 'The output will be:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE126]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: In the above code, we create two dictionaries, namely, `dict1` and `dict2`,
    and then we can combine both of these dictionaries using the `ChainMap` method.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，我们创建了两个字典，即`dict1`和`dict2`，然后我们可以使用`ChainMap`方法将这两个字典组合起来。
- en: Counter objects
  id: totrans-436
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Counter对象
- en: As we discussed earlier, a hashable object is one whose hash value will remain
    the same during its lifetime in the program. `counter` is used to count the number
    of hashable objects. Here, the dictionary key is a hashable object, while the
    corresponding value is the count of that object. In other words, `counter` objects
    create a hash table in which the elements and their count are stored as dictionary
    keys and value pairs.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前讨论的，一个可哈希的对象是在程序生命周期内其哈希值将保持不变的对象。`counter`用于计算可哈希对象的数量。在这里，字典键是一个可哈希对象，而相应的值是该对象的计数。换句话说，`counter`对象创建了一个哈希表，其中元素及其计数作为字典键值对存储。
- en: '`Dictionary` and `counter` objects are similar in the sense that data is stored
    in `a {key, value}` pair, but in `counter` objects, the value is the count of
    the key whereas it can be anything in the case of `dictionary`. Thus, when we
    only want to see how many times each unique word is occurring in a string, we
    use the `counter` object.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`Dictionary`和`counter`对象在数据以`{key, value}`对的形式存储方面相似，但在`counter`对象中，值是键的计数，而在`dictionary`中可以是任何东西。因此，当我们只想查看字符串中每个唯一单词出现的次数时，我们使用`counter`对象。'
- en: 'An example could look like the following:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 一个例子可能看起来像这样：
- en: '[PRE127]'
  id: totrans-440
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: 'The output will be:'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下：
- en: '[PRE128]'
  id: totrans-442
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: In the above code, the `inventory` variable is created, which holds the counts
    of all the characters using the `counter` module. The count values of these characters
    can be accessed using dictionary-like key access (`[key]`).
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，创建了`inventory`变量，它使用`counter`模块来存储所有字符的计数。可以使用类似字典的键访问方式（`[key]`）访问这些字符的计数值。
- en: UserDict
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UserDict
- en: 'Python supports a container, `UserDict`, present in the collections module,
    that wraps the dictionary objects. We can add customized functions to the dictionary.
    This is very useful for applications where we want to add/update/modify the functionalities
    of the dictionary. Consider the example code below where pushing/adding a new
    data element is not allowed in the dictionary:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: Python支持一个容器，`UserDict`，存在于collections模块中，它封装了字典对象。我们可以向字典添加自定义函数。这对于我们想要添加/更新/修改字典功能的应用程序非常有用。考虑下面的示例代码，其中不允许在字典中推送/添加新的数据元素：
- en: '[PRE129]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: 'The output is as follows:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE130]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: In the above code, a customized push function in the `MyDict` class is created
    to add the customized functionality, which does not allow you to insert an element
    into the dictionary.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，在`MyDict`类中创建了一个自定义的`push`函数，以添加不允许将元素插入到字典中的自定义功能。
- en: UserList
  id: totrans-450
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UserList
- en: 'A `UserList` is a container that wraps list objects. It can be used to extend
    the functionality of the `list` data structure. Consider the example code below,
    where pushing/adding a new data element is not allowed in the `list` data structure:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserList`是一个封装列表对象的容器。它可以用来扩展`list`数据结构的功能。考虑下面的示例代码，其中不允许在`list`数据结构中推送/添加新的数据元素：'
- en: '[PRE131]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: 'The output is as follows:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE132]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: In the above code, a customized `push` function in the `MyList` class is created
    to add the functionality to not allow you to insert an element into the `list`
    variable.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的代码中，在`MyList`类中创建了一个自定义的`push`函数，以添加不允许将元素插入到`list`变量的功能。
- en: UserString
  id: totrans-456
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: UserString
- en: 'Strings can be considered as an array of characters. In Python, a character
    is a string of one length and acts as a container that wraps a string object.
    It can be used to create strings with customized functionalities. An example could
    look like the following:'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串可以被视为字符数组。在Python中，一个字符是一个长度为1的字符串，它作为一个容器，封装一个字符串对象。它可以用来创建具有自定义功能的字符串。一个例子可能看起来像这样：
- en: '[PRE133]'
  id: totrans-458
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: 'The output is:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE134]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: In the above example code, a customized append function in the `MyString` class
    is created to add the functionality to append a string.
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 在上面的示例代码中，在`MyString`类中创建了一个自定义的`append`函数，以添加将字符串附加到字符串的功能。
- en: Summary
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have discussed different built-in data types supported by
    Python. We have also looked at a few basic Python functions, libraries, and modules,
    such as the collections module. The main objective of this chapter was to give
    an overview of Python and make a user acquainted with the language so that it
    is easy to implement the advanced algorithms of data structures.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了Python支持的不同内置数据类型。我们还查看了一些基本的Python函数、库和模块，例如collections模块。本章的主要目标是概述Python，使用户熟悉该语言，以便于实现数据结构的先进算法。
- en: Overall, this chapter has provided an overview of several data structures available
    in Python that are pivotal for understanding the internals of data structures.
    In the next chapter, we will introduce the basic concepts of algorithm design
    and analysis.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，本章概述了Python中可用的几个关键数据结构，这些数据结构对于理解数据结构的内部机制至关重要。在下一章中，我们将介绍算法设计和分析的基本概念。
- en: Join our community on Discord
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the author and other
    readers: [https://packt.link/MEvK4](https://packt.link/MEvK4)'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间，与作者和其他读者进行讨论：[https://packt.link/MEvK4](https://packt.link/MEvK4)
- en: '![](img/QR_Code1421249772551223062.png)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
  zh: '![二维码](img/QR_Code1421249772551223062.png)'
