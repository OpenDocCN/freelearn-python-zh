- en: Getting Started with Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 入门
- en: The Python language had a humble beginning in the late 1980s when a Dutchman
    Guido Von Rossum started working on a fun project, which would be a successor
    to ABC language with better exception handling and capability to interface with
    OS Amoeba at Centrum Wiskunde and Informatica. It first appeared in 1991\. Python
    2.0 was released in the year 2000 and Python 3.0 was released in the year 2008\.
    The language was named Python after the famous British television comedy show
    Monty Python's Flying Circus, which was one of Guido's favorite television programmes.
    Here we will see why Python has suddenly influenced our lives and the various
    applications that use Python and its implementations. In this chapter, you will
    be learning the basic installation steps that are required to perform on different
    platforms (that is Windows, Linux, and Mac), about environment variables, setting
    up of environment variables, file formats, Python interactive shell, basic syntaxes
    and finally printing out formatted output.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语言在 20 世纪 80 年代末期起步，当时一位荷兰人吉多·范罗苏姆开始着手一个有趣的项目，该项目将成为 ABC 语言的继承者，具有更好的异常处理能力和与荷兰计算与信息中心（Centrum
    Wiskunde en Informatica）的 Amoeba 操作系统接口的能力。它首次出现在 1991 年。Python 2.0 在 2000 年发布，Python
    3.0 在 2008 年发布。这种语言被命名为 Python，是为了纪念吉多最喜欢的英国电视喜剧节目《蒙提·派森的飞行马戏团》。在这里，我们将探讨为什么 Python
    突然影响了我们的生活，以及使用 Python 及其实现的各个应用。在本章中，你将学习在不同平台（即 Windows、Linux 和 Mac）上执行的基本安装步骤，关于环境变量，设置环境变量，文件格式，Python
    交互式 shell，基本语法，以及最终打印格式化输出。
- en: Why Python?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择 Python？
- en: Now you might be suddenly bogged with the question, why Python? According to
     Institute of Electrical and Electronics Engineers (IEEE) 2016 ranking Python
    ranked third after C and Java. As per Indeed.com's data of 2016, the Python job
    market search ranked fifth. Clearly, all the data points to the ever rising demand
    in the job market for Python. Its a cool language if you want to learn just for
    fun or if you want to build your career around Python, you will adore the language.
    At school level, many schools have started including Python programming for kids.
    With new technologies taking the market by surprise Python has been playing a
    dominant role. Whether it is cloud platform, mobile app development, BigData,
    IoT with Raspberry Pi, or the new Blockchain technology, Python is being seen
    as a niche language platform to develop and deliver a scalable and robust applications.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能突然被一个问题困扰，为什么选择 Python？根据电气和电子工程师协会（IEEE）2016 年的排名，Python 在 C 和 Java 之后排名第三。根据
    Indeed.com 2016 年的数据，Python 求职市场搜索排名第五。显然，所有数据都指向 Python 在就业市场需求的持续增长。如果你只是想为了乐趣学习，或者你想围绕
    Python 建立自己的职业生涯，你将热爱这门语言。在学校的层面，许多学校已经开始为孩子们提供 Python 编程课程。随着新技术出人意料地占领市场，Python
    已经扮演了主导角色。无论是云平台、移动应用开发、大数据、使用树莓派的物联网，还是新的区块链技术，Python 都被视为一个专门的语言平台，用于开发和交付可扩展且健壮的应用程序。
- en: 'Some key features of the language are:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 语言的一些关键特性包括：
- en: Python programs can run on any platform, you can carry code created in Windows
    machine and run it on Mac or Linux
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 程序可以在任何平台上运行，你可以将 Windows 机器上创建的代码携带到 Mac 或 Linux 上运行
- en: Python has inbuilt large library with prebuilt and portable functionality, also
    known as the standard library
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 内置了大型库，具有预构建和可移植的功能，也称为标准库
- en: Python is an expressive language
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 是一种表达性语言
- en: Python is free and open source
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 是免费且开源的
- en: Python code is about one third of the size of equivalent C++ and Java code
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 代码的大小大约是等效 C++ 和 Java 代码的三分之一
- en: Python can be both dynamically and strongly typed--dynamically typed means it
    is a type of variable that is interpreted at runtime, which means, in Python,
    there is no need to define the type (`int` or `float`) of the variable
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 可以是动态类型和强类型——动态类型意味着它是一种在运行时解释的类型，这意味着在 Python 中，不需要定义变量的类型（`int` 或 `float`）
- en: Python applications
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 应用
- en: One of the most famous platforms where Python is extensively used is YouTube.
    The other places where you will find Python being extensively used are the special
    effects in Hollywood movies, drug evolution and discovery, traffic control systems,
    ERP systems, cloud hosting, e-commerce platform, CRM systems, and whatever field
    you can think of.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 广泛使用的最著名的平台之一是 YouTube。你还会在其他地方发现 Python 被广泛使用，比如好莱坞电影中的特效、药物进化与发现、交通控制系统、ERP
    系统、云托管、电子商务平台、CRM 系统，以及你能想到的任何领域。
- en: Versions
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 版本
- en: At the time of writing this book, two main versions of the Python programming
    language were available in the market, which are Python 2.x and Python 3.x. The
    stable release as of writing the book were Python 2.7.13 and Python 3.6.0.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在撰写本书时，市场上可用的 Python 编程语言有两个主要版本，即 Python 2.x 和 Python 3.x。本书撰写时的稳定版本是 Python
    2.7.13 和 Python 3.6.0。
- en: Implementations of Python
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的实现
- en: Major implementations include CPython, Jython, IronPython, MicroPython, and
    PyPy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 主要实现包括 CPython、Jython、IronPython、MicroPython 和 PyPy。
- en: Installation
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装
- en: Here we will look forward to the installation of Python on three different OS
    platforms, namely, Windows, Linux, and Mac OS. Let's begin with the Windows platform.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将期待在三个不同的操作系统平台上安装 Python，即 Windows、Linux 和 Mac OS。让我们从 Windows 平台开始。
- en: Installation on Windows platform
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Windows 平台上安装
- en: 'Python 2.x can be downloaded from [https://www.python.org/downloads](https://www.python.org/downloads).
    The installer is simple and easy to install. Perform the following steps to install
    the setup:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.x 可以从 [https://www.python.org/downloads](https://www.python.org/downloads)
    下载。安装程序简单且易于安装。执行以下步骤来安装设置：
- en: 'Once you click on setup installer, you will get a small window on your desktop
    screen as shown here; click on Next:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击安装程序，您将在桌面屏幕上看到一个小的窗口，如图所示；点击下一步：
- en: '![](img/Capture1-1.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Capture1-1.jpg)'
- en: 'Provide a suitable installation folder to install Python. If you don''t provide
    the installation folder, then the installer will automatically create an installation
    folder for you, as shown in the following screenshot. Click on Next:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供一个合适的安装文件夹来安装 Python。如果您不提供安装文件夹，则安装程序将自动为您创建一个安装文件夹，如图所示。点击下一步：
- en: '![](img/Capture2.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Capture2.jpg)'
- en: 'After completion of step 2, you will get a window to customize Python as shown
    in the preceding screenshot. Notice that the Add python.exe to Path option has
    been marked x. Select this option to add it to system path variable (which will
    be explained later in the chapter), and click on Next:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成步骤 2 后，您将获得一个窗口来定制 Python，如图所示。注意，将 python.exe 添加到路径选项已被标记 x。选择此选项将其添加到系统路径变量（将在本章后面解释），然后点击下一步：
- en: '![](img/Capture3.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Capture3.jpg)'
- en: 'Finally, click on Finish to complete the installation:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，点击完成以完成安装：
- en: '![](img/Capture4.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Capture4.jpg)'
- en: Installation on Linux platform
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Linux 平台上安装
- en: 'These days most of the Linux-based systems come preloaded with Python, so in
    most cases, you do not need to install it separately. However, if you do not find
    your desired version of Python on the Linux platform, you can download your desired
    version for a particular Linux platform from the site [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/).
    Perform the following steps:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，大多数基于 Linux 的系统都预装了 Python，所以在大多数情况下，您不需要单独安装它。但是，如果您在 Linux 平台上找不到您想要的
    Python 版本，您可以从网站 [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/)
    下载特定 Linux 平台的所需版本。执行以下步骤：
- en: Extract the compressed file using the `tar -xvzf python_versionx.x` command.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `tar -xvzf python_versionx.x` 命令解压缩文件。
- en: 'Browse the directory of the compressed file as shown in the screenshot:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览如图所示的压缩文件目录：
- en: '![](img/image6.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image6.jpg)'
- en: 'Run the following commands:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令：
- en: '[PRE0]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Use the command as shown in screenshot to ensure that Python is running:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用截图所示的命令来确保 Python 正在运行：
- en: '![](img/image7.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image7.jpg)'
- en: Installation on Mac OS
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Mac OS 上安装
- en: For Mac OS, you will get the installer from the site [https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/).
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Mac OS，您可以从网站 [https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/)
    获取安装程序。
- en: 'For the new Mac OS X, Sierra comes loaded with Python 2.7 and it''s good for
    learning but the same cannot be used to develop advanced-level programs. You do
    not need to separately install Python on the new Mac OS X. However, a word of
    caution is that the version of Python packed with the Mac OS could be out of date
    and might require updating. If you still want to install a separate version, you
    can follow the simple steps mentioned as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新的 Mac OS X，Sierra 预装了 Python 2.7，这对于学习很好，但不能用于开发高级程序。您不需要在新的 Mac OS X 上单独安装
    Python。但是，有一个警告，即与 Mac OS 打包的 Python 版本可能已过时，可能需要更新。如果您仍然想安装一个单独的版本，可以按照以下简单步骤进行：
- en: First of all, you might require to install Xcode, Xcode is the IDE for  platform
    and can be downloaded from the Apple appstore.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，你可能需要安装 Xcode，Xcode 是平台 IDE，可以从 Apple App Store 下载。
- en: 'Once Xcode is installed, you need to install the command-line tools, which
    can be installed by running the `xcode-select --install` command on the terminal
    found under `/Applications/Utilities/`, as shown in the following screenshot:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦安装了 Xcode，你需要安装命令行工具，这些工具可以通过在 `/Applications/Utilities/` 下的终端中运行 `xcode-select
    --install` 命令来安装，如下面的截图所示：
- en: '![](img/image-6-1.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image-6-1.jpg)'
- en: 'A pop-up window appears with three different options as shown here:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 出现一个带有三个不同选项的弹出窗口，如下所示：
- en: '![](img/image-7.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/image-7.jpg)'
- en: Once you click on Install and agree to their terms and conditions, the command-line
    tools will start to download and will be installed in few minutes depending on
    the Internet connection.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦点击“安装”并同意他们的条款和条件，命令行工具将开始下载，并将在几分钟内安装完成，具体取决于网络连接速度。
- en: 'The next step in the process would be to install Homebrew, which is a package
    manager for Mac OS and handles the Python package. In order to install Homebrew,
    simply provide the following inputs to the terminal:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来的步骤将是安装 Homebrew，它是 Mac OS 的包管理器，处理 Python 包。为了安装 Homebrew，只需在终端中提供以下输入：
- en: '[PRE1]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'To install the latest `python2` version, simply type `brew install python`
    on the terminal:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装最新的 `python2` 版本，只需在终端中输入 `brew install python`：
- en: '[PRE2]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In order to install `python3`, you need to use `brew install python3`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装 `python3`，你需要使用 `brew install python3`。
- en: Notepad++ installation
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Notepad++ 安装
- en: Notepad++ is one of the easy-to-use text editors and is a free open source software
    program, which could be easily downloaded from [https://notepad-plus-plus.org/](https://notepad-plus-plus.org/).
    We will be using this text editor to create simple programs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Notepad++ 是一款易于使用的文本编辑器，也是一个免费的开源软件程序，可以从 [https://notepad-plus-plus.org/](https://notepad-plus-plus.org/)
    容易地下载。我们将使用这个文本编辑器来创建简单的程序。
- en: Python file formats
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 文件格式
- en: Every language understands a file format, for example, like the C language file
    extension is `.c` likewise java language has a file extension `.java`. The Python
    file extension is `.py` while bytecode file extension is `.pyc`.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 每种语言都理解文件格式，例如，像 C 语言文件扩展名是 `.c` 一样，Java 语言也有文件扩展名 `.java`。Python 的文件扩展名是 `.py`，而字节码文件扩展名是
    `.pyc`。
- en: Python interactive shell
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 交互式 shell
- en: 'Python interactive shell is also known as **Integrated Development Environment**
    (**IDLE**). With the Python installer, two interactive shells are provided: one
    is IDLE (Python GUI) and the other is Python (command line). Both can be used
    for running simple programs.'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Python 交互式 shell 也被称为 **集成开发环境** (**IDLE**)。Python 安装程序提供了两个交互式 shell：一个是 IDLE（Python
    图形用户界面）和另一个是 Python（命令行）。两者都可以用于运行简单的程序。
- en: For complex programs and executing large files, the windows command prompt is
    used, where after the system variables are set automatically, large files are
    recognized and executed by the system.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 对于复杂的程序和执行大文件，使用 Windows 命令提示符，在那里系统变量自动设置后，大文件被系统识别并执行。
- en: '![](img/Capture6-1.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Capture6-1.jpg)'
- en: 'The preceding screenshot is what we call Python IDLE, which comes bundled with
    the Python installation. The next screenshot is of the command line that also
    comes bundled with the Python installation, or we can simply launch the Python
    command through the windows command line and get Python command line. For most
    of our programming instructions, we will be using the Python command line:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 上述截图是我们所说的 Python IDLE，它是 Python 安装的一部分。下一个截图是 Python 安装捆绑的命令行，或者我们也可以通过 Windows
    命令行简单地启动 Python 命令来获取 Python 命令行。对于我们的大多数编程指令，我们将使用 Python 命令行：
- en: '![](img/Capture7-2.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Capture7-2.jpg)'
- en: System or environment variables
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 系统或环境变量
- en: If you remember the installation steps explained earlier, you might be still
    thinking what are system variables? They are a set of predefined variables, which
    are available to all programming units. If it's not set, then each and every time
    you want to run your program or execute a Python file, you will have to manually
    provide path for each Python executable, but if `python.exe` is set as a system
    variable, then the system automatically recognizes your programming instruction
    and starts executing.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还记得之前解释的安装步骤，您可能还在想系统变量是什么？它们是一组预定义的变量，对所有编程单元都可用。如果没有设置，那么每次您想要运行程序或执行Python文件时，您都必须手动为每个Python可执行文件提供路径，但如果`python.exe`被设置为系统变量，那么系统将自动识别您的编程指令并开始执行。
- en: Setting environment variables in Windows
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Windows中设置环境变量
- en: 'Here, if `python.exe` is not provided to the path variable, then the system
    does not recognize `python` as a command, as shown in the following screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，如果路径变量中没有提供`python.exe`，那么系统将不会识别`python`命令，如下面的截图所示：
- en: '![](img/Capture8.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![截图8](img/Capture8.jpg)'
- en: 'The Windows command prompt does not recognize `python` as shown in the previous
    screenshot. Once Python has been updated in the path variables or system variables,
    the windows command line recognizes the `python` command and executes as shown
    here:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Windows命令提示符不识别`python`，如前一个截图所示。一旦在路径变量或系统变量中更新了Python，Windows命令行将识别`python`命令并执行，如下所示：
- en: '![](img/Capture9.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![截图9](img/Capture9.jpg)'
- en: 'During installation, the installer provides an option to set system variables,
    which we have seen in our installation steps. But in case you missed that out,
    you need not worry. You can manually set the system variables. Simply follow these
    steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，安装程序提供了一个设置系统变量的选项，我们在安装步骤中已经看到。但如果您错过了，不必担心。您可以手动设置系统变量。只需按照以下步骤操作：
- en: 'Just right-click on My Computer (older version of Windows PC) or Computer (win
    7 onwards) and select Properties. Once you have selected the properties, you will
    get the following screenshot where you need to select Advanced system settings:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 只需右键单击我的电脑（Windows PC的旧版本）或计算机（Windows 7及以后版本）并选择属性。一旦选择了属性，您将看到以下截图，您需要选择“高级系统设置”：
- en: '![](img/Capture10.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![截图10](img/Capture10.jpg)'
- en: After you have clicked on Advanced system settings, you will get System Properties.
    Click on the Environment Variables button.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在点击了“高级系统设置”之后，您将看到系统属性。点击“环境变量”按钮。
- en: After completing Step 2, a window will pop up. From the System variables pane,
    select Path and click on the Edit button.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成第二步后，会出现一个窗口。从“系统变量”面板中选择“Path”，然后点击“编辑”按钮。
- en: 'Your Python installation will look something like the following screenshot,
    where you need to right-click on the address bar and select the Copy address as
    text option:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您的Python安装将类似于以下截图，您需要右键单击地址栏并选择“将地址作为文本复制”选项：
- en: '![](img/capture14-1.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![截图14-1](img/capture14-1.jpg)'
- en: Add the Python installation folder path to the Path variable.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Python安装文件夹路径添加到Path变量中。
- en: 'Click on OK and then again on OK to close all the windows. Our system variable
    is set:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击“确定”然后再次点击“确定”以关闭所有窗口。我们的系统变量已设置：
- en: '![](img/Capture11.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![截图11](img/Capture11.jpg)'
- en: Setting environment variables in Linux
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Linux中设置环境变量
- en: 'Linux comes with different types of shells and the Python directory path is
    usually `/usr/local/bin/python`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Linux有不同类型的shell，Python目录路径通常是`/usr/local/bin/python`：
- en: '**csh shell**: Open the terminal and enter `setenv PATH "$PATH:/usr/local/bin/python"`
    followed by pressing *Enter*'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**csh shell**：打开终端并输入`setenv PATH "$PATH:/usr/local/bin/python"`然后按下*Enter*'
- en: '**bash shell**: On the terminal, enter `export PATH="$PATH:/usr/local/bin/python"`
    followed by pressing *Enter*'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**bash shell**：在终端中输入`export PATH="$PATH:/usr/local/bin/python"`然后按下*Enter*'
- en: '**sh or ksh shell**: Enter `PATH="$PATH:/usr/local/bin/python"` followed by
    pressing *Enter*'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**sh或ksh shell**：输入`PATH="$PATH:/usr/local/bin/python"`然后按下*Enter*'
- en: Setting environment variables in Mac OS (OS 10.9)
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在Mac OS（OS 10.9）中设置环境变量
- en: 'Here, simply you need to edit the `launchd.conf` file and add the path variable
    to the file:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您只需编辑`launchd.conf`文件并将路径变量添加到文件中：
- en: '[PRE3]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Writing a simple Hello World! program
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写一个简单的Hello World!程序
- en: 'Congratulations on your successful installation. Now you can start programming.
    Open Notepad++ and create a new file. In the new file, type the following:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜您成功安装。现在您可以开始编程了。打开Notepad++并创建一个新文件。在新文件中，输入以下内容：
- en: '[PRE4]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Save the file as `hello.py`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件保存为`hello.py`。
- en: 'Open the command prompt and traverse to the folder where your file is located
    using `cd` and then the path of the folder. For executing the file, the command
    will be `python hello.py` as shown in the following screenshot:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令提示符，使用`cd`命令切换到你的文件所在的文件夹，然后输入文件夹路径。执行文件时，命令将是`python hello.py`，如下截图所示：
- en: '![](img/Capture14.jpg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Capture14.jpg)'
- en: It is quite easy, isn't it? Likewise, you can execute all the Python files.
    Once you start working on projects and large files, it's always good to remain
    organized by creating a folder structure.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当简单，不是吗？同样，你也可以执行所有的Python文件。一旦你开始处理项目和大型文件，保持组织性总是好的，通过创建文件夹结构来实现。
- en: Basic Python syntax
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本Python语法
- en: Basic syntaxes can be referred to as simple guidelines that every programming
    language requires. Let's try to understand from our daily lives. Let's say you
    can't eat your food without having it dressed and placed properly on the platter.
    You need to have proper dressing of food before you can consume it. You prepare
    a special drink comprising three measures of Gordon gin, one of vodka, half of
    Kina Lillet, and follow the process to mix in steps. The process is necessary
    to have a perfect blend. These are sort of syntaxes when we talk in terms of programming
    languages.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 基本语法可以被视为每个编程语言都需要的一些简单指南。让我们从我们的日常生活中来理解。比如说，你没有把食物打扮好并正确地放在盘子上，你就不能吃你的食物。在你可以消费食物之前，你需要给食物适当的装饰。你准备一种特殊的饮料，包括三份戈登金酒，一份伏特加，一半的基纳利莱特，然后按照步骤混合。这个过程是必要的，以获得完美的混合。当我们从编程语言的角度来谈论时，这些就是类似语法的概念。
- en: 'Kina Lillet-Lillet (French pronunciation: [li''le]), classed as an aromatized
    wine within EU law, is a French aperitif wine from Podensac, a small village south
    of Bordeaux. It is a blend of 85% Bordeaux region wines (Semillon for the Blanc
    and for the Rosé, Merlot for the Rouge) and 15% macerated liqueurs, mostly citrus
    liqueurs (peels of sweet oranges from Spain and Morocco and peels of bitter green
    oranges from Haiti). The mix is then stirred in oak vats until blended. During
    the aging process, Lillet is handled as a Bordeaux wine (undergoing fining, racking,
    filtering, and so on).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基纳利莱特-利莱特（法语发音：[li'le]），根据欧盟法律归类为香料酒，是来自波登萨克的一个小村庄的法国开胃酒。它是由85%波尔多地区葡萄酒（白葡萄酒和桃红葡萄酒使用赛美隆，红葡萄酒使用梅洛）和15%浸泡利口酒混合而成，主要是柑橘利口酒（西班牙和摩洛哥甜橙皮和海地苦绿橙皮）。然后将混合物在橡木桶中搅拌，直到混合均匀。在陈化过程中，利莱特被当作波尔多葡萄酒处理（进行澄清、过滤等）。
- en: The preceding information has been taken from [https://en.wikipedia.org/wiki/Lillet](https://en.wikipedia.org/wiki/Lillet).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的信息来源于[https://en.wikipedia.org/wiki/Lillet](https://en.wikipedia.org/wiki/Lillet)。
- en: Comments in Python
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的注释
- en: 'In Python, there are two types of comments--one is a single-line comment and
    the other is multiline comment. For a single-line comment, `#` is used, while
    for a multiline comment, triple quotes `"""` are used:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，有两种类型的注释——一种是单行注释，另一种是多行注释。对于单行注释，使用`#`，而对于多行注释，使用三引号`"""`：
- en: '[PRE5]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Triple, double and single quotes
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 三重、双和单引号
- en: Python doesn't care if you use single quotes or double quotes to print a single
    statement. But, surely, both has some significance while printing complex statements,
    which we will see soon.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Python并不关心你使用单引号还是双引号来打印单个语句。但是，在打印复杂语句时，两者肯定都有一些意义，我们很快就会看到。
- en: '`print "Hello World!"` and `print ''Hello World!''` will give the same output
    `Hello World!` two times:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`print "Hello World!"`和`print ''Hello World!''`将给出相同的输出`Hello World!`两次：'
- en: '![](img/image18.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/image18.jpg)'
- en: 'How will you print something like this:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你将如何打印这样的内容：
- en: 'I am mad in love  do you think  I am doing the right thing? One way is to enclose
    the complete thing within the triple quotes as shown here:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我疯狂地爱着，你认为我做得对吗？一种方法是将整个内容用三引号括起来，如下所示：
- en: '[PRE6]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Alternatively, you can also use double quotes three times to achieve the same
    thing:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你也可以使用三次双引号来达到同样的效果：
- en: '[PRE7]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The preceding two examples are not in formatted form, they are just to show
    how we can achieve multiline printing.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的两个例子不是格式化的，它们只是用来展示我们如何实现多行打印。
- en: Let's try another example. What should be the outcome of the following statement?
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试另一个例子。以下语句的结果应该是什么？
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding piece of code gives the following results:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段给出了以下结果：
- en: '[PRE9]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Python simply interprets that the statement terminated with a single quote
    after it. The solution is to enclose the complete sentence within double quotes
    as shown:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Python简单地解释为，在它之后语句以单引号结束。解决方案是将整个句子放在双引号内，如下所示：
- en: '[PRE10]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Adding double quotes (`"`) gives an error-free output as shown:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 添加双引号(`"`)将给出无错误的输出，如下所示：
- en: '[PRE11]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Python back slash
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python转义反斜杠
- en: 'The Python back slash is used for continuation of the `print` statement. You
    can stretch a single statement across multiple lines:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Python的转义反斜杠用于`print`语句的延续。您可以将单个语句扩展到多行：
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This gives the following output:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下输出：
- en: '[PRE13]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: String inside the quotes
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 引号内的字符串
- en: 'For printing a string, either a pair of single (`'' ''`) quotes or pair of
    double quotes (`" "`) can be used as shown in the succeeding examples:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 对于打印字符串，可以使用一对单引号(`' '`)或一对双引号(`" "`)，如下面的示例所示：
- en: '[PRE14]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This gives the following results:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生以下结果：
- en: '[PRE15]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Escape sequence in Python
  id: totrans-129
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python中的转义序列
- en: 'The escape sequence is used to insert the tab, the newline, the backspace,
    and other special characters into your code. They give you greater control and
    flexibility to format your statements and code:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 转义序列用于将制表符、换行符、退格和其他特殊字符插入到您的代码中。它们为您提供了更大的控制和灵活性，以格式化语句和代码：
- en: '| Escape | Sequence Meaning |'
  id: totrans-131
  prefs: []
  type: TYPE_TB
  zh: '| 转义 | 序列含义 |'
- en: '| b | Backspace |'
  id: totrans-132
  prefs: []
  type: TYPE_TB
  zh: '| b | 退格键 |'
- en: '| a | Sound system bell |'
  id: totrans-133
  prefs: []
  type: TYPE_TB
  zh: '| a | 声音系统蜂鸣器 |'
- en: '| n | Newline |'
  id: totrans-134
  prefs: []
  type: TYPE_TB
  zh: '| n | 换行符 |'
- en: '| t | Horizontal tab |'
  id: totrans-135
  prefs: []
  type: TYPE_TB
  zh: '| t | 水平制表符 |'
- en: '|  | The character |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '|  | 字符 |'
- en: '| '' | Single quotation mark |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| '' | 单引号 |'
- en: '| " | Double quotation mark |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| " | 双引号 |'
- en: '[PRE16]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The output is as follows:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code executes with a beep sound. If you did not hear the beep
    sound, check your speakers.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码执行时会发出蜂鸣声。如果您没有听到蜂鸣声，请检查您的扬声器。
- en: String concatenation
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串连接
- en: 'Two strings can be joined using the `+` operator:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 两个字符串可以使用`+`运算符连接：
- en: '[PRE18]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The following is the output of the preceding code:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为之前代码的输出：
- en: '[PRE19]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Formatted output
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 格式化输出
- en: 'Consider an example where you would want to print the name, marks, and the
    age of the person:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个例子，您想要打印人的姓名、分数和年龄：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The output will be as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE21]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'You can see the output, but the output that is displayed is not formatted.
    Python allows you to set the formatted output. If you have done some coding in
    C language, then you should be familiar with `%d`, `%f`, `%s`. In order to represent
    an integer `%d` is used, `%f` is used for float, and `%s` is used for string.
    If you used `%5d`, it means 5 spaces. If you used `%5.2f`, it means `5` spaces
    and `.2` means precision. The decimal part of the number or the precision is set
    to 2\. Let''s use the formatting on the preceding example:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到输出，但显示的输出未格式化。Python允许您设置格式化输出。如果您在C语言中编写过一些代码，那么您应该熟悉`%d`、`%f`、`%s`。为了表示整数，使用`%d`，`%f`用于浮点数，`%s`用于字符串。如果您使用了`%5d`，则表示5个空格。如果您使用了`%5.2f`，则表示`5`个空格和`.2`表示精度。数字的小数部分或精度设置为2。让我们在先前的示例中使用格式化：
- en: '[PRE22]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The output we get is as follows:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的输出如下：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The preceding output is much better than the previous one. You can see `Marks`
    `76.901` set to `76.90` automatically.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的输出比之前的输出要好得多。您可以看到`分数` `76.901`已自动设置为`76.90`。
- en: Indentation
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 缩进
- en: 'The most unique characteristic of Python, unlike other programming languages,
    is indentation. Indentation not only makes Python code readable, but also distinguishes
    each block of code from the other. Let''s explain this with an example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他编程语言不同，Python最独特的特性是缩进。缩进不仅使Python代码可读，而且将每个代码块与其他代码块区分开来。让我们用一个例子来解释这一点：
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: While writing the code, a new block of code starts with a colon followed by
    a tab. Here, after the function `fun()`, a colon is provided which will start
    the function body, `pass` is part of the function `fun()` and it is placed at
    one tab space. Likewise, the for loop starts with a colon. Here, most people get
    confused whether to use a tab or space. It is advisable to stick to only one type
    and follow the same across the whole code. If the indentation is not strictly
    implemented, then code execution will throw an error.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时，新的代码块从冒号后跟制表符开始。在这里，在函数`fun()`之后提供了一个冒号，这将开始函数体，`pass`是函数`fun()`的一部分，它放置在一个制表符空间。同样，for循环以冒号开始。在这里，大多数人会困惑是否使用制表符或空格。建议坚持只使用一种类型，并在整个代码中保持一致。如果缩进没有严格实施，那么代码执行将抛出错误。
- en: Summary
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So far, we did a walkthrough of the beginning and the brief history of Python.
    We looked through various implementations and flavors of Python. We also learned
    about installation on various platforms. We learned about basic syntaxes that
    are used in writing the code and also we learned about various escape sequences
    that would make writing the code simple. We finally learned about the importance
    of indentation in Python.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经对Python的起源和简要历史进行了概述。我们浏览了Python的各种实现和版本。我们还学习了在各个平台上安装Python的方法。我们了解了在编写代码时使用的各种基本语法，以及使编写代码变得简单的各种转义序列。最后，我们学习了缩进在Python中的重要性。
- en: In the next chapter, we will see immutable data types.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨不可变数据类型。
