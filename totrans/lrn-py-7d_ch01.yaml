- en: Getting Started with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python language had a humble beginning in the late 1980s when a Dutchman
    Guido Von Rossum started working on a fun project, which would be a successor
    to ABC language with better exception handling and capability to interface with
    OS Amoeba at Centrum Wiskunde and Informatica. It first appeared in 1991\. Python
    2.0 was released in the year 2000 and Python 3.0 was released in the year 2008\.
    The language was named Python after the famous British television comedy show
    Monty Python's Flying Circus, which was one of Guido's favorite television programmes.
    Here we will see why Python has suddenly influenced our lives and the various
    applications that use Python and its implementations. In this chapter, you will
    be learning the basic installation steps that are required to perform on different
    platforms (that is Windows, Linux, and Mac), about environment variables, setting
    up of environment variables, file formats, Python interactive shell, basic syntaxes
    and finally printing out formatted output.
  prefs: []
  type: TYPE_NORMAL
- en: Why Python?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now you might be suddenly bogged with the question, why Python? According to
     Institute of Electrical and Electronics Engineers (IEEE) 2016 ranking Python
    ranked third after C and Java. As per Indeed.com's data of 2016, the Python job
    market search ranked fifth. Clearly, all the data points to the ever rising demand
    in the job market for Python. Its a cool language if you want to learn just for
    fun or if you want to build your career around Python, you will adore the language.
    At school level, many schools have started including Python programming for kids.
    With new technologies taking the market by surprise Python has been playing a
    dominant role. Whether it is cloud platform, mobile app development, BigData,
    IoT with Raspberry Pi, or the new Blockchain technology, Python is being seen
    as a niche language platform to develop and deliver a scalable and robust applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Some key features of the language are:'
  prefs: []
  type: TYPE_NORMAL
- en: Python programs can run on any platform, you can carry code created in Windows
    machine and run it on Mac or Linux
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python has inbuilt large library with prebuilt and portable functionality, also
    known as the standard library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python is an expressive language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python is free and open source
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python code is about one third of the size of equivalent C++ and Java code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python can be both dynamically and strongly typed--dynamically typed means it
    is a type of variable that is interpreted at runtime, which means, in Python,
    there is no need to define the type (`int` or `float`) of the variable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most famous platforms where Python is extensively used is YouTube.
    The other places where you will find Python being extensively used are the special
    effects in Hollywood movies, drug evolution and discovery, traffic control systems,
    ERP systems, cloud hosting, e-commerce platform, CRM systems, and whatever field
    you can think of.
  prefs: []
  type: TYPE_NORMAL
- en: Versions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At the time of writing this book, two main versions of the Python programming
    language were available in the market, which are Python 2.x and Python 3.x. The
    stable release as of writing the book were Python 2.7.13 and Python 3.6.0.
  prefs: []
  type: TYPE_NORMAL
- en: Implementations of Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Major implementations include CPython, Jython, IronPython, MicroPython, and
    PyPy.
  prefs: []
  type: TYPE_NORMAL
- en: Installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we will look forward to the installation of Python on three different OS
    platforms, namely, Windows, Linux, and Mac OS. Let's begin with the Windows platform.
  prefs: []
  type: TYPE_NORMAL
- en: Installation on Windows platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python 2.x can be downloaded from [https://www.python.org/downloads](https://www.python.org/downloads).
    The installer is simple and easy to install. Perform the following steps to install
    the setup:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click on setup installer, you will get a small window on your desktop
    screen as shown here; click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Capture1-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Provide a suitable installation folder to install Python. If you don''t provide
    the installation folder, then the installer will automatically create an installation
    folder for you, as shown in the following screenshot. Click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Capture2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'After completion of step 2, you will get a window to customize Python as shown
    in the preceding screenshot. Notice that the Add python.exe to Path option has
    been marked x. Select this option to add it to system path variable (which will
    be explained later in the chapter), and click on Next:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Capture3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, click on Finish to complete the installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Capture4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installation on Linux platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These days most of the Linux-based systems come preloaded with Python, so in
    most cases, you do not need to install it separately. However, if you do not find
    your desired version of Python on the Linux platform, you can download your desired
    version for a particular Linux platform from the site [https://www.python.org/downloads/source/](https://www.python.org/downloads/source/).
    Perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Extract the compressed file using the `tar -xvzf python_versionx.x` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Browse the directory of the compressed file as shown in the screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Run the following commands:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Use the command as shown in screenshot to ensure that Python is running:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installation on Mac OS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For Mac OS, you will get the installer from the site [https://www.python.org/downloads/mac-osx/](https://www.python.org/downloads/mac-osx/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the new Mac OS X, Sierra comes loaded with Python 2.7 and it''s good for
    learning but the same cannot be used to develop advanced-level programs. You do
    not need to separately install Python on the new Mac OS X. However, a word of
    caution is that the version of Python packed with the Mac OS could be out of date
    and might require updating. If you still want to install a separate version, you
    can follow the simple steps mentioned as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: First of all, you might require to install Xcode, Xcode is the IDE for  platform
    and can be downloaded from the Apple appstore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once Xcode is installed, you need to install the command-line tools, which
    can be installed by running the `xcode-select --install` command on the terminal
    found under `/Applications/Utilities/`, as shown in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image-6-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'A pop-up window appears with three different options as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/image-7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once you click on Install and agree to their terms and conditions, the command-line
    tools will start to download and will be installed in few minutes depending on
    the Internet connection.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step in the process would be to install Homebrew, which is a package
    manager for Mac OS and handles the Python package. In order to install Homebrew,
    simply provide the following inputs to the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'To install the latest `python2` version, simply type `brew install python`
    on the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In order to install `python3`, you need to use `brew install python3`.
  prefs: []
  type: TYPE_NORMAL
- en: Notepad++ installation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Notepad++ is one of the easy-to-use text editors and is a free open source software
    program, which could be easily downloaded from [https://notepad-plus-plus.org/](https://notepad-plus-plus.org/).
    We will be using this text editor to create simple programs.
  prefs: []
  type: TYPE_NORMAL
- en: Python file formats
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every language understands a file format, for example, like the C language file
    extension is `.c` likewise java language has a file extension `.java`. The Python
    file extension is `.py` while bytecode file extension is `.pyc`.
  prefs: []
  type: TYPE_NORMAL
- en: Python interactive shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Python interactive shell is also known as **Integrated Development Environment**
    (**IDLE**). With the Python installer, two interactive shells are provided: one
    is IDLE (Python GUI) and the other is Python (command line). Both can be used
    for running simple programs.'
  prefs: []
  type: TYPE_NORMAL
- en: For complex programs and executing large files, the windows command prompt is
    used, where after the system variables are set automatically, large files are
    recognized and executed by the system.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Capture6-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The preceding screenshot is what we call Python IDLE, which comes bundled with
    the Python installation. The next screenshot is of the command line that also
    comes bundled with the Python installation, or we can simply launch the Python
    command through the windows command line and get Python command line. For most
    of our programming instructions, we will be using the Python command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Capture7-2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: System or environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you remember the installation steps explained earlier, you might be still
    thinking what are system variables? They are a set of predefined variables, which
    are available to all programming units. If it's not set, then each and every time
    you want to run your program or execute a Python file, you will have to manually
    provide path for each Python executable, but if `python.exe` is set as a system
    variable, then the system automatically recognizes your programming instruction
    and starts executing.
  prefs: []
  type: TYPE_NORMAL
- en: Setting environment variables in Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, if `python.exe` is not provided to the path variable, then the system
    does not recognize `python` as a command, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Capture8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The Windows command prompt does not recognize `python` as shown in the previous
    screenshot. Once Python has been updated in the path variables or system variables,
    the windows command line recognizes the `python` command and executes as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Capture9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'During installation, the installer provides an option to set system variables,
    which we have seen in our installation steps. But in case you missed that out,
    you need not worry. You can manually set the system variables. Simply follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Just right-click on My Computer (older version of Windows PC) or Computer (win
    7 onwards) and select Properties. Once you have selected the properties, you will
    get the following screenshot where you need to select Advanced system settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Capture10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After you have clicked on Advanced system settings, you will get System Properties.
    Click on the Environment Variables button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After completing Step 2, a window will pop up. From the System variables pane,
    select Path and click on the Edit button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Your Python installation will look something like the following screenshot,
    where you need to right-click on the address bar and select the Copy address as
    text option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/capture14-1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Add the Python installation folder path to the Path variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on OK and then again on OK to close all the windows. Our system variable
    is set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Capture11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting environment variables in Linux
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Linux comes with different types of shells and the Python directory path is
    usually `/usr/local/bin/python`:'
  prefs: []
  type: TYPE_NORMAL
- en: '**csh shell**: Open the terminal and enter `setenv PATH "$PATH:/usr/local/bin/python"`
    followed by pressing *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**bash shell**: On the terminal, enter `export PATH="$PATH:/usr/local/bin/python"`
    followed by pressing *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**sh or ksh shell**: Enter `PATH="$PATH:/usr/local/bin/python"` followed by
    pressing *Enter*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting environment variables in Mac OS (OS 10.9)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here, simply you need to edit the `launchd.conf` file and add the path variable
    to the file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Writing a simple Hello World! program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Congratulations on your successful installation. Now you can start programming.
    Open Notepad++ and create a new file. In the new file, type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Save the file as `hello.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the command prompt and traverse to the folder where your file is located
    using `cd` and then the path of the folder. For executing the file, the command
    will be `python hello.py` as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Capture14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: It is quite easy, isn't it? Likewise, you can execute all the Python files.
    Once you start working on projects and large files, it's always good to remain
    organized by creating a folder structure.
  prefs: []
  type: TYPE_NORMAL
- en: Basic Python syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Basic syntaxes can be referred to as simple guidelines that every programming
    language requires. Let's try to understand from our daily lives. Let's say you
    can't eat your food without having it dressed and placed properly on the platter.
    You need to have proper dressing of food before you can consume it. You prepare
    a special drink comprising three measures of Gordon gin, one of vodka, half of
    Kina Lillet, and follow the process to mix in steps. The process is necessary
    to have a perfect blend. These are sort of syntaxes when we talk in terms of programming
    languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Kina Lillet-Lillet (French pronunciation: [li''le]), classed as an aromatized
    wine within EU law, is a French aperitif wine from Podensac, a small village south
    of Bordeaux. It is a blend of 85% Bordeaux region wines (Semillon for the Blanc
    and for the Rosé, Merlot for the Rouge) and 15% macerated liqueurs, mostly citrus
    liqueurs (peels of sweet oranges from Spain and Morocco and peels of bitter green
    oranges from Haiti). The mix is then stirred in oak vats until blended. During
    the aging process, Lillet is handled as a Bordeaux wine (undergoing fining, racking,
    filtering, and so on).'
  prefs: []
  type: TYPE_NORMAL
- en: The preceding information has been taken from [https://en.wikipedia.org/wiki/Lillet](https://en.wikipedia.org/wiki/Lillet).
  prefs: []
  type: TYPE_NORMAL
- en: Comments in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Python, there are two types of comments--one is a single-line comment and
    the other is multiline comment. For a single-line comment, `#` is used, while
    for a multiline comment, triple quotes `"""` are used:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Triple, double and single quotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python doesn't care if you use single quotes or double quotes to print a single
    statement. But, surely, both has some significance while printing complex statements,
    which we will see soon.
  prefs: []
  type: TYPE_NORMAL
- en: '`print "Hello World!"` and `print ''Hello World!''` will give the same output
    `Hello World!` two times:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/image18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'How will you print something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'I am mad in love  do you think  I am doing the right thing? One way is to enclose
    the complete thing within the triple quotes as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Alternatively, you can also use double quotes three times to achieve the same
    thing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The preceding two examples are not in formatted form, they are just to show
    how we can achieve multiline printing.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try another example. What should be the outcome of the following statement?
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding piece of code gives the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Python simply interprets that the statement terminated with a single quote
    after it. The solution is to enclose the complete sentence within double quotes
    as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding double quotes (`"`) gives an error-free output as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Python back slash
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Python back slash is used for continuation of the `print` statement. You
    can stretch a single statement across multiple lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: String inside the quotes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'For printing a string, either a pair of single (`'' ''`) quotes or pair of
    double quotes (`" "`) can be used as shown in the succeeding examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This gives the following results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Escape sequence in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The escape sequence is used to insert the tab, the newline, the backspace,
    and other special characters into your code. They give you greater control and
    flexibility to format your statements and code:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Escape | Sequence Meaning |'
  prefs: []
  type: TYPE_TB
- en: '| b | Backspace |'
  prefs: []
  type: TYPE_TB
- en: '| a | Sound system bell |'
  prefs: []
  type: TYPE_TB
- en: '| n | Newline |'
  prefs: []
  type: TYPE_TB
- en: '| t | Horizontal tab |'
  prefs: []
  type: TYPE_TB
- en: '|  | The character |'
  prefs: []
  type: TYPE_TB
- en: '| '' | Single quotation mark |'
  prefs: []
  type: TYPE_TB
- en: '| " | Double quotation mark |'
  prefs: []
  type: TYPE_TB
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code executes with a beep sound. If you did not hear the beep
    sound, check your speakers.
  prefs: []
  type: TYPE_NORMAL
- en: String concatenation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Two strings can be joined using the `+` operator:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Formatted output
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Consider an example where you would want to print the name, marks, and the
    age of the person:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see the output, but the output that is displayed is not formatted.
    Python allows you to set the formatted output. If you have done some coding in
    C language, then you should be familiar with `%d`, `%f`, `%s`. In order to represent
    an integer `%d` is used, `%f` is used for float, and `%s` is used for string.
    If you used `%5d`, it means 5 spaces. If you used `%5.2f`, it means `5` spaces
    and `.2` means precision. The decimal part of the number or the precision is set
    to 2\. Let''s use the formatting on the preceding example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The output we get is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The preceding output is much better than the previous one. You can see `Marks`
    `76.901` set to `76.90` automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Indentation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most unique characteristic of Python, unlike other programming languages,
    is indentation. Indentation not only makes Python code readable, but also distinguishes
    each block of code from the other. Let''s explain this with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: While writing the code, a new block of code starts with a colon followed by
    a tab. Here, after the function `fun()`, a colon is provided which will start
    the function body, `pass` is part of the function `fun()` and it is placed at
    one tab space. Likewise, the for loop starts with a colon. Here, most people get
    confused whether to use a tab or space. It is advisable to stick to only one type
    and follow the same across the whole code. If the indentation is not strictly
    implemented, then code execution will throw an error.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we did a walkthrough of the beginning and the brief history of Python.
    We looked through various implementations and flavors of Python. We also learned
    about installation on various platforms. We learned about basic syntaxes that
    are used in writing the code and also we learned about various escape sequences
    that would make writing the code simple. We finally learned about the importance
    of indentation in Python.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will see immutable data types.
  prefs: []
  type: TYPE_NORMAL
