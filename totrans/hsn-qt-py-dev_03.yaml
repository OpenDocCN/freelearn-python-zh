- en: An Overview of QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are various approaches that you can take and design decisions that you
    can make when creating a GUI. One of them is creating a GUI with the **Qt Modeling
    Language **(**QML**) implementation. This chapter will explore the basics of QML,
    uncover the most commonly used types, and conclude with some practice of using
    the QML when building applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to QML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The basic syntax of QML
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Language and engine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QML styling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QML animation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QML is a UI markup language and a multi-paradigm declarative language that's
    similar to CSS and JSON. It is used for designing applications with a GUI. QML
    is popular and is very important for creating high quality GUIs. QML is a language
    that allows developers to describe different interfaces in terms of their visual
    components and how they interact with and relate to each other.
  prefs: []
  type: TYPE_NORMAL
- en: QML is a highly readable language that allows the components to be interconnected
    dynamically. In this sense, components will be reused and customized within a
    UI. QML provides a readable and declarative JSON-like syntax with support for
    imperative JavaScript expressions, combined with dynamic property bindings. Application
    functionality can be scripted through JavaScript. QML uses Qt, which lets Qt features
    to be attainable from QML applications. In the Qt framework, the QML language
    and engine infrastructure is provided by the `QtQml` module. To fully understand
    QML, it is recommended to read the official Qt documentation ([https://doc.qt.io](https://doc.qt.io)).
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will present many examples of QML that will be shown as a script
    in a QML file. Commonly used modules such as `QtQML` and `QtQuick` (which will
    be discussed in [Chapter 3](519d24a6-7d2c-4f82-8c24-da4460c1ed29.xhtml), *Qt Quick
    Library* ) illustrate QML implementation with Qt. To run QML scripts and display
    the results, you can use the Qt Creator. To do this, you need to implement the
    following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory with the name `Qt/` inside the `App/` folder, for example, `App/Qt/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open Qt Creator and navigate to File | New File or Project:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/ac4e56db-f0eb-460e-946d-14230c9b4ba3.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Navigate to Choose a template | Application | Qt Quick Application - Empty
    and click on Choose...:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6ec963e2-d83f-4620-aff0-05cf2fa48dda.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Set the Name as `qml1` and enter `Path/To/The/App/Qt/` in the Create in field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/31a05958-73f2-42ec-b751-1f2fd9589ff6.png)'
  prefs: []
  type: TYPE_IMG
- en: Click Next through the windows that follow and select all kits when you reach
    the Kits window. Then, click Next and Finish.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add the `Rectangle` QML type to the `Window` QML type inside the `main.qml`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on the Build Project button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, click on the Run button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/458e7492-ad0a-413b-a33f-d561823ba054.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot depicts the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/7654cf0c-65a3-4c48-9519-26b9c6b70833.png)'
  prefs: []
  type: TYPE_IMG
- en: Alternatively, you can use Python. To run these examples using Python and PyQt5
    binding (PySide2 can be used), you need to create a file, for example, `u_qml.qml`,
    inside the `App/` directory, as described in [Chapter 1](9de812dc-9446-4955-8437-4aebb2d991b3.xhtml),
    *Introduction to Python and Qt*, and then make some changes in the `u_app.py`
    and `u_tools.py` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes in the `u_tools.py` file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `u_qml()` function that's created in this class will be used to display
    the QML application. Using the QML application engine will load the QML file with
    a specified URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'The changes in the `u_app.py` file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `start_qml()`function will start the `u_qml()` function of the `UTools`
    class, which will display the QML application. Then, we need to create the `u_qml.qml`
    file in the `App/` folder, which will be the QML application.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `u_qml.qml`file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You should see a blank window with the title First Qml.
  prefs: []
  type: TYPE_NORMAL
- en: Basics of the syntax
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's describe the basics of the QML syntax, step by step.
  prefs: []
  type: TYPE_NORMAL
- en: Import statements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A QML document may have one or more imports at the beginning of the file. An
    import can be any one of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A namespace into which types have been registered:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The version number of the `QtQuick` module and other QML-related modules may
    vary, depending on your installed Qt version.
  prefs: []
  type: TYPE_NORMAL
- en: 'A directory that contains type definitions as QML documents:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'A JavaScript file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Import types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QML has three different types of imports. Each import type has a slightly different
    syntax and semantics.
  prefs: []
  type: TYPE_NORMAL
- en: Module namespace imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Module namespace imports are imported QML modules that register QML object
    types and JavaScript resources into a given namespace. An example is `import <ModuleIdentifier>
    <Version.Number> [as <Qualifier>]`. Here is an example of an unqualified module
    import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This allows us to use all types of `QtQuick 2.7` without specifying a qualifier.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `u_qml.qml` file demonstrates using the imports in QML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a qualified module import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This code imports `QtQuick.Window` as `UQml` and declares a window with properties.
    This prevents conflicting type names from being imported.
  prefs: []
  type: TYPE_NORMAL
- en: Non-module namespace imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Types can also be registered into namespaces in C++ with registration functions
    such as `qmlRegisterType()`. If we import a namespace as if it were a module identifier,
    then these types can be imported. Similar to importing into a qualified local
    namespace, the `import` statement can use the `as` keyword to indicate that the
    types should be imported into a specific document-local namespace. Any references
    to the types that are made accessible by the import must be prefixed by the local
    namespace qualifier if a namespace is defined.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example in the `u_qml.qml`file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: First is the declaration of the `Rectangle` QML type. Then, the hexadecimal
    value for the `color` of the `Rectangle` is set, along with the `width` and the
    `height`. Then, the hexadecimal value for the color of border is set, including
    the `border.width` of the `Rectangle` and the `radius`.
  prefs: []
  type: TYPE_NORMAL
- en: Directory imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These import a directory containing QML documents that provides segmentation
    for QML types into reusable groups and directories in the filesystem.
  prefs: []
  type: TYPE_NORMAL
- en: 'An example of these imports is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: To demonstrate this, divide the `u_qml.qml` file into two parts. The first part
    creates a window, while the second part creates a circle. Create the `qmls/` directory
    inside `App/` and put the `UCircle.qml` file inside it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of the `UCircle.qml` file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: First is the declaration of the `Rectangle` QML type. Then, the RGBA value for
    the color of the `Rectangle`, the `width` of the `Rectangle`, the `height` of
    the `Rectangle`, the `border.width` of the `Rectangle`, and the `radius` for the
    change of the rectangle to the circle are set.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `u_qml.qml` file, we can add this circle by importing the `App/qmls/`
    folder:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We used the circle that was created in a separate QML file.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript resource imports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These imports can import JavaScript resources directly into a QML document.
    Each JavaScript resource must have an identifier that it can be accessed with
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To demonstrate this, let''s create a directory inside our `App/` folder called `App/jscripts/`
    and put the `u_js.js` file there:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `u_qml.qml` file, we can add an import of JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code shows how to add the circle and the mouse area to `UQml.Window`
    in the `u_qml.qml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we imported JavaScript to resize the circle. The `MouseArea`
    QML type realizes the area that can be clicked.
  prefs: []
  type: TYPE_NORMAL
- en: QML object declaration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QML has the following object declaration syntax in the QML document.
  prefs: []
  type: TYPE_NORMAL
- en: Objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Objects are specified by the type, with a pair of braces. Each object type
    begins with a capital letter. Inside the curly brackets, we can specify information
    about the object, such as its properties. Properties are set as `property: value`. Each
    object may declare a child object as a nested object and may contain any number
    of child objects, as shown in the preceding examples. Let''s see some new examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new QML file in the `qmls/` directory called `URect.qml` – this will
    be a rectangle. Add the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `u_qml.qml` file, add the created rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We're rewriting the previously created lines and adding the `Window` QML type
    and new properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now,`rect1` will be added to the bottom of `UQml.Window`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: We added the rectangle that was created in `URect.qml` file with the `id`, `width`,
    `height`, and `color` properties. The `MouseArea` QML type is used to click on
    the rectangle and, as a result, changes its color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add `rect2` after the first rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: The second rectangle is the nested object of the window. The `id` attribute
    must be unique. The position of `rect2` is dependent on the position of `rect1` .
  prefs: []
  type: TYPE_NORMAL
- en: Comments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: QML comments can be both single and multilined. A single comment starts with
    `//` and ends at the end of the line. Multiline comments begin with `/*` and end
    with `*/`.
  prefs: []
  type: TYPE_NORMAL
- en: Object attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Each QML object type has a set of attributes. The instance of an object type
    is built with the set of attributes that has been defined for that object type. The
    QML object attribute types are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `id` attribute
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`property` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`signal` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal handler attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attached properties and attached signal handler attributes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: id attribute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Every QML object type has an `id` attribute that is provided by the language
    itself, and it can't be redefined or overridden by any object type. A value can
    be assigned to the `id` attribute of an object instance, which identifies the
    object and allows it to be referred to by other objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'An `id` attribute must begin with a lowercase letter or an underscore and can
    include characters such as numbers, letters, and underscores. Objects can be referred
    to by `id` from anywhere within the component scope in which it is declared. It
    is important that the `id` value is always unique. When an object is created,
    the value of its `id` attribute cannot be changed. To demonstrate this, implement
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `UText.qml` inside the `qmls/` directory, and add the
    following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This code creates text that will be displayed with a white color.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `Uqmls.UText` at the bottom of `rect1` in the `u_qml.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This demonstrates properties such as font family and font size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second rectangle, which will be used as a right panel, to `UQml.Window`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'This code will add new features that will be used when `rect2` is clicked,
    such as changing the color and setting text of `rect2`. We can see the result
    of this QML as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/61b9adc1-8b19-436e-a290-7110291a5759.png)'
  prefs: []
  type: TYPE_IMG
- en: If we click on the left area of this window, the color of this area will change.
    If the right area is clicked, two pieces of text will be displayed, and the color
    of the right panel will change.
  prefs: []
  type: TYPE_NORMAL
- en: Property attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Properties in QML are attributes of an object that can be assigned as static
    values or can be bound to a dynamic expression. You can define a property for
    a type in C++ by registering a `Q_PROPERTY()` macro and registering it with the
    QML type system. As described in the preceding examples, a custom property can
    be defined in an object declaration with the following syntax: `property propertyType
    propertyName`. The name of the declared property must begin with a lowercase letter
    and can contain letters, numbers, and underscores. It is not permitted to use
    reserved JavaScript words as property names. Custom properties implicitly create
    a value-change signal for that property. The signal handler associated with this
    property will be in the form of `onPropertyNameChanged`, where `PropertyName` is the
    name of the property, with the first letter capitalized. One of the main features
    of QML is the binding of properties. Binding allows us to use dynamic object behavior
    by specifying relationships between object properties, depending on changes. Let''s
    implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `UButton.qml` file in the `qmls/` directory with a simple `Button`
    type inside it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This will create the standard QML button.
  prefs: []
  type: TYPE_NORMAL
- en: Look at the features in the `u_qml.qml` file. Change some lines and add the
    standard QML button.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a custom property to the first rectangle and change the `MouseArea` so
    that you have something similar to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '`rzwidth` is a custom property on the initialization.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the second rectangle and add the button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Setting the visible property to `false` means that `rect2` will not be visible.
    When the button is clicked, the imperative value assignment is used for resizing
    `rect1`. The result looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df329f31-a3cf-4d1a-8790-ae90c4d0a025.png)'
  prefs: []
  type: TYPE_IMG
- en: 'QML allows the following valid types with custom property definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int 1`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string "String"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url "https://doc.qt.io"`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any QML object type can be used as a property type, for example, `property Rectangle
    YouRectangle`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The value of the property of the object instance may be specified as a value
    assignment on initialization or by imperative value assignment. Assigning a value
    to a property on initialization will be done in the following form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Imperative value assignment is where a property value is assigned to a property
    using imperative JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Values that can be assigned to a property can be in static or binding expression
    form. A static value is a constant value that does not depend on other properties,
    and a binding expression is a JavaScript expression that describes the binding
    of a property with other properties. The property value must match the property
    type. Also, it can be assigned a list type property, where the list consists of
    QML object-type values as states, for example, `[State {name: "value1"}, State
    {name: "value2"}]`.  Properties can be grouped like so for `font` values of the
    `Text` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The property can be declared as an alias property, which means that the property
    connects the aliasing property as a reference to the aliased property. A property
    alias declaration is similar to an ordinary property definition with an added
    alias keyword and valid alias reference.
  prefs: []
  type: TYPE_NORMAL
- en: Signal attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A **signal** is a notification from an emitter object stating that an event
    has occurred. This may be a change in text, pressing a button, moving the cursor,
    and so on. Through the signal handler, some objects can be notified that a signal
    has been emitted. Signal declarations can be in the following forms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: With such a property, a signal may be defined for a type in C++ by registering
    a `Q_SIGNAL` macro with the QML type system. Also, a custom signal can be defined
    in a QML document. Typically, a QML signal handler definition is provided inside
    the object where the signal will be issued, as in the preceding `MouseArea` example.
    Also, QML allows us to use signals separately from the object with the `Connections` type.
  prefs: []
  type: TYPE_NORMAL
- en: Signal handler attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate the implementation of signal handlers, let''s look at the `u_qml.qml`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This adds a background color to the application window. Now, let''s perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `Connections` type and a custom handler to the first rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: This adds the `onColored`signal handler and creates the connections for the
    mouse area of the rectangle. It also sets the target for `Connections` as the
    mouse area of `rect1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add some additional properties for the button of the second rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This code adds the `width` and `height` properties to the button with the `id`
    specified. We can see the result of this if we run the `u_app.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ab46069b-b525-4e78-a569-7b8c3a56fb33.png)'
  prefs: []
  type: TYPE_IMG
- en: As we can see, the `colored()` signal was declared in the `rect1` object, and
    then was emitted with the `onPressed` signal handler of the `Connections` related
    to the `MouseArea` by `id`. This signal was received by the `onColored` signal
    handler of `rect1`.  A lot of QML types have defined signals. For example, text
    fields have `accepted()`, `editingFinished()`, `textEdited()`; buttons have `Button`,
    `RadioButton`, and `CheckBox`, while `ComboBox` has `clicked()`, `accepted()`,
    and `activated()` signals, respectively. Signals will be described in more detail
    in [Chapter 15](a3094641-a532-4f1a-adf1-72c85526f7bf.xhtml), *Signals, Slots,
    and Event Handler*s, along with how they are related to PyQt and PySide, but their
    logic is similar.
  prefs: []
  type: TYPE_NORMAL
- en: Method attributes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some functions can be defined to realize a certain functionality. Methods can
    be registered with the QML type system with the `Q_INVOKABLE` macro or by registering
    it as a `Q_SLOT` macro, such as with signals. A custom method can be defined by
    adding `function functionName(parameterName) {body of the function}` to the object
    declaration. Usually, methods provide some functionality related to the calculation
    or usage of the JavaScript code. Let's look at an example of using this function
    with QML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s add a method to `rect1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `onUcolor` function will return a white color if `rect1` is not white and
    return *shuttle* color (the color that looks similar to dark blue) if the color
    is white.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript and QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the strongest features of QML is the ability to provide JavaScript functionality.
    This allows us to use various expressions and methods as JavaScript functions.
    QML has deep JavaScript integration, which allows it to use the definitions of
    methods and signal handlers in JavaScript form. We discussed using JavaScript
    as an imported resource in the *Import statements* section. Let's take a look
    at the JavaScript host environment and the restrictions of its use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The QML engine provides a JavaScript environment, and this environment is slightly
    different from the environments provided by web browsers. QML documents may contain
    JavaScript code in the following forms:'
  prefs: []
  type: TYPE_NORMAL
- en: With property bindings, where the code describes relationships between QML object
    properties.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With the implementation of the signal handlers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the definition of the custom methods, where functions are defined within
    the body of a QML object and may consist of the variable setting, arrays, loops,
    and conditional operators.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As an import of the standalone JavaScript files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'There are environment restrictions for JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript code cannot modify the global object if this code is located inside
    `somefile.qml`, and can modify the global object from `somefile.js`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Global code is run in a reduced scope, except for code with local script variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `this` keyword is only available with binding properties and is not defined
    in QML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type system and QML documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In QML, types can be used in the definition of an object natively by the QML
    language, registered via C++, or QML documents. This can be represented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Basic types**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bool`: `true`/`false` values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`double`: Decimal numbers with double precision.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enumeration`: Named values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`int`: Integer numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`list`: Lists of QML objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`real`: Decimal numbers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`string`: Text strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url`: Universal resource locators.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`var`: Generic property.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**JavaScript types**: Any JavaScript objects allowed by the QML engine.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**QML object types**: Modules provided by QML, such as the `QtQuick` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A QML document, represented as a string, written using the syntactical rules
    of a QML document, has a file extension of `.qml` and contains a validated structure.
    The structure of the document is usually in two parts. The first part is an `import`
    section while the second part is an object declaration section, separated by an
    empty line. Since QML is transparent to the network, this makes it possible to
    import QML documents from local and remote paths.
  prefs: []
  type: TYPE_NORMAL
- en: The QtQml module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In contrast with the `QtQuick` module, which provides the UI components and
    functionality, the `QtQml` module provides a framework for developing applications
    with QML and realizes the language and engine infrastructure. This module provides
    an API to extend QML with custom type implementation and allows us to integrate
    QML with JavaScript and C++. Some of the types that are usually used with `QtQml`
    are described here. The module has the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'This can be interpreted as a C++ preprocessor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Let's go over the types of infrastructure objects that ` QtQml` includes.
  prefs: []
  type: TYPE_NORMAL
- en: Component
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A QML component definition has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress`: A `real` value that shows the progress of loading the component,
    and can range from `0.0` to `1.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`status`: This `enumeration` shows the status of the component loading.'
  prefs: []
  type: TYPE_NORMAL
- en: '`url`: This is the **Universal Resource Locator** (**URL**) that''s used for
    component construction.'
  prefs: []
  type: TYPE_NORMAL
- en: QtObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type contains the `objectName` property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`objectName`: This is the name of the object for a specific string.'
  prefs: []
  type: TYPE_NORMAL
- en: Binding
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type is for creating property bindings. This type has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`delayed`: This can be `true` or `false`. If it''s `true`, the binding will
    be delayed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`property`: This can be any string and specifies the name of the property to
    be updated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`target`: This is the object to be updated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`: This can be any object or property and sets the value for the target
    object and property.'
  prefs: []
  type: TYPE_NORMAL
- en: '`when`: This can be `true` or `false` and is set when a binding is active.
    An expression should return `true` or `false`.'
  prefs: []
  type: TYPE_NORMAL
- en: Connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides connections to signals. These are the available properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enabled`: This can be `true` or `false`. Connections and events are enabled
    for an item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ignoreUnknownSignals`: This can be `true` or `false` and allows us to ignore
    unknown signals, such as errors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`target`: This is an object, and the emitter of the signal.'
  prefs: []
  type: TYPE_NORMAL
- en: Timer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This QML type provides the timer that triggers an action with an interval.
    It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`interval`: This integer sets the interval in milliseconds (the default is
    `1000` ms).'
  prefs: []
  type: TYPE_NORMAL
- en: '`repeat`: This can be `true` or `false`, and repeats this trigger if this property
    is `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`running`: This can be `true` or `false`. If the property is `true`, it starts
    the timer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`triggeredOnStart`: This can be `true` or `false`. If the property is `true`,
    it starts the trigger when the timer starts.'
  prefs: []
  type: TYPE_NORMAL
- en: In addition, `QtQml` includes a submodule, `QtQml.Models`, that defines data
    models in QML.
  prefs: []
  type: TYPE_NORMAL
- en: Styling in QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We've completed the short introduction to QML syntax. Let's try to implement
    some of the properties of objects to better visualize the elements and improve
    their style.
  prefs: []
  type: TYPE_NORMAL
- en: Item
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most commonly used QML type that is inherited by almost all geometrical
    visualized object types is `Item`. This is a base type for all visual items in
    `QtQuick`. The `import` statement that''s used in QML is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Note that versions of `QtQuick` can vary, depending on the version of Qt that
    you have installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The properties of the item type are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enabled`: This can be `true` or `false`. The item is enabled to receive mouse
    and keyboard events (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`: This is a `real` number that sets the position of this item on the *x*
    axis (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`y`: This is a `real` number that sets the position of this item on the *y*
    axis (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`z`: This is a `real` number that sets the stacking order of sibling items.
    Items with a `z` that are higher than other items will cover other items (the
    default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`width`: This is a `real` number that sets the width of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`height`: This is a `real` number that sets the height of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`implicitWidth`: This is a `real` number that sets the natural width of this
    item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`implicitHeight`:  This is a `real` number that sets the natural height of
    this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity`:  This is a `real` number that sets the opacity of this item. `0.0`
    is fully transparent and `1.0` is fully opaque (the default is `1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`parent`: This (name of the parent) sets the parent for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`resources`: This is the resources list for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`clip`: This can be `true` or `false` and allows this item to clip its own
    painting. Clipping will be enabled (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`rotation`: This is a `real` number that rotates this item in degrees clockwise
    around its own axis (the default is `0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scale`: This is a real number and is the scale factor for this item (the default
    is `1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`smooth`: This can be `true` or `false`. If `true`, smooth sampling will be
    used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`state`: This string sets the name of the current state of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`states`: This is the list of possible states for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transform`: This is the list of transformations to apply to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transformOrigin`: This `enumeration` sets the origin point around which scaling
    and rotation will transform this item (the default is `Item.Center`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`transitions`:This is the list of transitions for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`visible`: This can be `true` or `false` and sets this item to be visible (the
    default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`visibleChildren`: This is the list of children that will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`antialiasing`**:** This can be `true` or `false` and provides antialiasing
    for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocus`: This can be `true` or `false` and sets whether this item will
    have active focus or not.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnTab`: This can be `true` or `false` and sets whether the item
    will have active focus in the tab focus chain (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`focus`: This can be `true` or `false`. If `true`, it will gain active focus
    when the enclosing `FocusScope` gains active focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.top`: This `AnchorLine` is the relationship between the top position
    of an item to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.bottom`: This `AnchorLine` is the relationship between the bottom
    position of an item to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.left`: This `AnchorLine` is the relationship between the left position
    of an item to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.right`: This `AnchorLine` is the relationship between the right position
    of the item to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.horizontalCenter`: This `AnchorLine` is the relationship between the
    horizontal center position of an item to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.verticalCenter`: This `AnchorLine` is the relationship between the
    vertical center position of an item to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.baseline`: This `AnchorLine` is the relationship between the positions
    of the imaginary line of text of this item and another item. If the text does
    not exist, this will be same as `anchors.top`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.fill`: This `Item` is the relationship between the positions that makes the
    geometry of one item the same as another item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.centerIn`: This `Item` in the relationship between the positions that sets
    the position of this item to the center of the specified `Item`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.margins`: This is a `real` number that sets the margins between anchors
    of the related items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.topMargin`: This is a `real` number that sets the top margin between
    this item and another.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.bottomMargin`: This is a `real` number that sets the bottom margin
    between this item and another.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.leftMargin`: This is a `real` number that sets the left margin between
    this item and another.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.rightMargin`: This is a `real` number that sets the right margin between
    this item and another.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.horizontalCenterOffset`: This is a `real` number that sets the offset
    of the horizontal center position of the related item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.verticalCenterOffset`: This is a `real` number that sets the offset
    of the vertical center position of the related item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.baselineOffset`: This is a `real` number that sets the offset to the
    imaginary line of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.alignWhenCentered`: This can be `true` or `false` and centers anchors
    to align to a whole pixel (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`baselineOffset`: This integer is the position of the item''s baseline in local
    coordinates. For text items, it is the imaginary line where the text is located.
    For non-text items, it is `0` (the default is `0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`children`: This is a list of the children of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`childrenRect.x`: This is a `real` number and is the *x* axis coordinate of
    the children of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`childrenRect.y`: This is a `real` number and is the *y* axis coordinate of
    the children of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`childrenRect.width`: This is a `real` number and is the width of the children
    of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`childrenRect.height`**:** This is a `real` number and is the height of the
    children of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`: This list allows us to mix visual children and resources in an item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.effect`: The component has the effect (for example, the `ShaderEffect` component)
    applied to the layer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.enabled`: This can be `true` or `false`. If `true`, it allows this item
    to be layered (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.format`: This `enumeration` defines the internal OpenGL format of the
    texture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.mipmap`: This can be `true` or `false`. If `true`, it generates mipmaps for
    the texture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.samplerName`: This string is the name of the effect''s source texture
    property.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.smooth`: This can be `true` or `false`. If `true`, it smoothly transforms
    the layer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.sourceRect`: This `Rectangle` is the rectangular area of this item that
    should be rendered into the texture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.textureMirroring`: This `enumeration` sets how the OpenGL texture will
    be mirrored (the default is `ShaderEffectSource.MirrorVertically`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.textureSize`: This `size` is the pixel size of the layer''s texture.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layer.wrapMode`: This `enumeration` is the OpenGL wrap modes associated with
    the texture.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines of code partially explain the features of `Item`. Create
    a file called `UItem.qml` in the `qmls/` directory and add the code that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`main_item` is the parent item of all the items inside this `Item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `id` of this item is `main_item`. This item will have a size that's similar
    to the `parent`, with a margin of `20` pixels.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the first item to the `Item` with `id: main_item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This `Item` describes properties such as the `z` index (this item will cover
    the item with less index), `opacity` (this item will be half opaque), and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second item to the `Item` with `id: main_item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The second item has `parent` and `scale` properties. The `parent` property sets
    the `parent` for this item and the `scale` property sets the size, which will
    be two times more than the `parent` item's size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the third item to the `Item` with `id: main_item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: The third item has the `anchors.centerIn` and `rotation` properties. The `anchors.centerIn` property
    sets this item to the center of the `parent`, and the `rotation` property will
    rotate this item by `90` degrees. This item is almost opaque.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the fourth item to `main_item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `rotation` property will rotate this item by `45` degrees clockwise, while
    the `scale` factor sets the size of this item equal to 70% of the parent item.
    The `antialiasing` property has been added to the rectangle of this item to get
    the best performance of the element visualization.
  prefs: []
  type: TYPE_NORMAL
- en: 'To run this file, you can use Qt Creator or add the following lines to the
    `u_qml.qml` file, somewhere after the first rectangle. Add the items to the QML
    application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'The main item will be visible, with a `width` and `height` related to `rect1`. This
    is the result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/8284f7ec-03e6-4ddc-84a6-dcad336b0325.png)'
  prefs: []
  type: TYPE_IMG
- en: Rectangle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `Rectangle` type is a popular type when creating QML objects. `Rectangle`
    inherits from the `Item` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `import` statement for using the `Rectangle` QML type is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'The `Rectangle` properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`antialiasing`: This can be `true` or `false`. It is provided if the rectangle
    should use antialiasing.'
  prefs: []
  type: TYPE_NORMAL
- en: '`border.width`: This `int` is the width of the rectangle''s borders.'
  prefs: []
  type: TYPE_NORMAL
- en: '`border.color`:  This is the color of the rectangle''s borders.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color`: This is the color of the rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient`: This is the gradient color of the rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`radius`: This is the radius of the rectangle item.'
  prefs: []
  type: TYPE_NORMAL
- en: RectangularGlow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used to create a blurred and colorized rectangle with a glowing effect.
    The import statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The properties of `RectangularGlow` are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color`: This is the color that''s used for the glow.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cornerRadius`: This is a `real` number to set the radius that is used to draw
    a glow with rounded corners.'
  prefs: []
  type: TYPE_NORMAL
- en: '`glowRadius`: This is a `real` number  that sets the radius in pixels that
    is reached by the glow.'
  prefs: []
  type: TYPE_NORMAL
- en: '`spread`: This is a `real` number that sets the strength of the glow color
    near the edges of the source.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To demonstrate this effect, create a file called `URectGlow.qml` in the `qmls/`
    directory and implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the parent rectangle and rectangular glow to the `URectGlow.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: This code imports the graphical effects and adds the custom properties `glowcolor`
    and `txglow`. The `glowcolor` property is used to specify the color of the glow,
    while `txglow` is used for the color of the text glow.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the central rectangle after the `RectangularGlow`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: The rectangle will have a glow effect with a color that's similar to the parent's
    rectangle color. Set the radius of the rectangle corners.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Text` and `Glow` types to the central rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code adds the `Text` and `Glow` QML types to the central rectangle.
    `Text` is used to display the text on the rectangle, while `Glow` is used to make
    the text inside the rectangle glow.
  prefs: []
  type: TYPE_NORMAL
- en: Gradients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Gradients are used to visualize objects better. They provide more effective
    colors than using a simple color property.
  prefs: []
  type: TYPE_NORMAL
- en: Gradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This QML type provides a gradient color for the element. Here''s the `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: It has a property called `stops` that provides a list of the stops for the gradient.
    You can do this by using `GradientStop`.
  prefs: []
  type: TYPE_NORMAL
- en: GradientStop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type defines the color at a position in a gradient. Here''s the `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`color`: This is the color of the gradient. It allows named, hexadecimal, and
    RGBA colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`position`: This is the position of the color in the gradient in a range from
    `0.0` to `1.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a directory inside `App/qmls/` called `gradients/` and make a
    file called `UGradient1.qml` inside it. Then, add the gradient colors using the
    `Gradient` and `GradientStop` types:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The first gradient stop and last gradient stop `position` properties must equal
    `0.0` and `1.0`, respectively. All gradient stops between these positions realize
    the gradient color. Named, RGB, and RGBA colors can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, all you need to do is change the `UCircle.qml` file by adding a gradient
    color to the rectangle:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: The created circle will have a gradient color instead of a simple color.
  prefs: []
  type: TYPE_NORMAL
- en: LinearGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This gradient object provides some extended features. With `LinearGradient`,
    colors start at the start point and end at the end point. Here''s the `import`
    statement that we need:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the properties it takes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`start`: The starting point in pixels where the color at position `0.0` is
    rendered (the default is `Qt.point(0, 0)`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`end`: The ending point in pixels where the color at position `1.0` is rendered
    (the default is `Qt.point(0, height)`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient`: The gradient, of the gradient type, with two or more colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`source`: The item that is going to be filled with the gradient (such as an
    image or QML type).'
  prefs: []
  type: TYPE_NORMAL
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example. Create a file called `URectLG.qml` in the `qmls/` directory
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In the linear gradient, use start and end points as Qt points. The gradient
    can only be defined with visual type objects, such as rectangle, and can blend
    two or more colors seamlessly.
  prefs: []
  type: TYPE_NORMAL
- en: RadialGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides radial gradients. The following  `import` statement is used
    for radial gradient:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angle`: This is a `real` number, and the angle of rotation of the gradient
    around the center point (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient`: This is a gradient of the gradient type, with two or more colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`source`: This is an item that is going to be filled with the gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalRadius`: This is a `real` number,  that is, the shape and size of
    the gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`verticalRadius`: This is a `real` number, that is, the shape and size of the
    gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalOffset`: This is a `real` number, that is, the offset in pixels
    from the center point of the gradient compared to the item center (the default
    is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`verticalOffset`: This is a `real` number, that is, the offset in pixels from
    the center point of the gradient compared to the item center (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example of a radial gradient. Create a file called `URectRG.qml`
    inside the `qmls/` directory and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The source for this radial gradient is a parent rectangle. We've set the `angle`
    rotation around the center.
  prefs: []
  type: TYPE_NORMAL
- en: ConicalGradient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides a conical gradient. The `import` statement for this type
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The properties of this type are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angle`: This is a `real` number and sets the angle of the gradient around
    the center point (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`gradient`: The gradient of the `Gradient` type, with two or more colors.'
  prefs: []
  type: TYPE_NORMAL
- en: '`source`:  The item that is going to be filled with a gradient.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalOffset`: This is a `real` number, that is, the offset in pixels
    from the center point of the gradient compared to the item center (the default
    is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`verticalOffset`: This is a `real` number, that is, the offset in pixels for
    the center point of the gradient compared to the item center (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`cached`: This can be `true` or `false`. It allows the effect''s output pixels
    to be cached to improve performance.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example. Create a file called`URectCG.qml` inside the `qmls/` directory
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The gradient of the color will be conical. The `source` is also the parent rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: Completion of the examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To complete the examples in this section, let''s combine them into one grid
    and look at the result. To do this, add the grid somewhere after `rect1` in the
    `u_qml.qml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Adding the grid positioning mechanism of the items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: We've used the `Grid` type to arrange items in the grid. Here, we've created
    four circles with gradients such as  `UCircle`, `URectLG`, `URectRG`, and `URectCG`,
    and four `URectGlow` items that can be added.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the *Item* section where we created items, we need to change the `visible`
    property to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: With the addition of these lines, the gradient elements will be visible, whereas previously
    created items will be invisible. The full file with some changes to the background
    color is available at [https://github.com/PacktPublishing/Hands-On-QT-for-Python-developers](https://github.com/PacktPublishing/Hands-On-QT-for-Python-developers).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the top-right corner of the application window, we will see
    the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b5b79a26-a863-4086-9162-4ef19e2b120c.png)'
  prefs: []
  type: TYPE_IMG
- en: We've looked at a short explanation of styling with QML. In the next chapter,
    will continue learning about Qt Quick and will learn about important positioning
    instruments, such as layouts.
  prefs: []
  type: TYPE_NORMAL
- en: Animations with QML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Qt Quick is a standard library for creating user interfaces with QML, and it
    gives you the ability to implement animations. This animation can be implemented
    in several ways, such as states, transitions, and animation property changes.
    Animation can also be implemented with other animation-related approaches.
  prefs: []
  type: TYPE_NORMAL
- en: State and transition objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This way of creating animations with QML uses the `State` object to declare
    the state of an object, and the `Transition` object to declare properties of the
    state changes during the animation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'This approach can be described with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '`Item` has `states` and `transitions` properties. `states` has a `State` object,
    and `transitions` has a list of `Transition` objects.'
  prefs: []
  type: TYPE_NORMAL
- en: State
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As part of the `QtQuick` module, the QML `State` type provides a set of changes
    related to the configuration of objects and properties. It has the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'These are its properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: `string` (the name of the state).'
  prefs: []
  type: TYPE_NORMAL
- en: '`changes`: List (changes to apply for the state).'
  prefs: []
  type: TYPE_NORMAL
- en: '`extend`: `string` (the name of the state); state extends as the state.'
  prefs: []
  type: TYPE_NORMAL
- en: '`when`: This can be `true` or `false` and sets when the state will be applied.
    An object for this property should return a Boolean value. For example, if `MouseArea.pressed` is
    pressed, then it returns `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: PropertyChanges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`PropertyChanges` is used to define the property values in the state. This
    allows us to define new properties of the target object. The `import` statement
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target`: An object whose properties need to be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`explicit`: Can be `true` or `false`. It provides explicit bindings of the
    properties (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`restoreEntryValues`: Can be `true` or `false`. If it''s `true`, the previous
    values should be restored when leaving the state.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here''s an example. Open the `UItem.qml` file and add this `MouseArea` to the
    rectangle with  `id: r1`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the states of the item with `id: i1`to the mouse area''s `onClicked` signal
    handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: When `MouseArea` is clicked, the states of `Item` will be changed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the states and transitions properties to the bottom of the `Item` with
    `id: i1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: In the `states` property, the `State` type with the `name` and `PropertyChanges`
    have been added, which will be used for the target item's *x* axis. The `transitions`
    property realizes animations.
  prefs: []
  type: TYPE_NORMAL
- en: AnchorChanges
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type is used when you need to change the anchors of an item in the `State`
    of the object. The `import` statement of this type is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The following properties are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`target`: The item for which anchors will be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.left`: This `AnchorLine` will modify the left anchor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.right`: This `AnchorLine` will modify the right anchor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.horizontalCenter`: This `AnchorLine` will modify the horizontal center
    anchor''s position relation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.top`: This `AnchorLine` will modify the top anchor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.bottom`: This `AnchorLine` will modify the bottom anchor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.verticalCenter`: This `AnchorLine` will modify the vertical center
    anchor position relation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`anchors.baseline`: This `AnchorLine` will modify the baseline anchors.'
  prefs: []
  type: TYPE_NORMAL
- en: StateChangeScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `StateChangeScript` QML type is used to run a script in the state. The
    `import` statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is a string, which is the name of the script. Use it with `ScriptAction`
    to target a specific script.'
  prefs: []
  type: TYPE_NORMAL
- en: '`script`: The script that will be used, such as function.'
  prefs: []
  type: TYPE_NORMAL
- en: StateGroup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'With this type, QML provides support for non-item types. The `import` statement
    is the same as before:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`state`:  This is a `string`. It''s the name of the state for this state group.'
  prefs: []
  type: TYPE_NORMAL
- en: '`states`: This is a list that defines the list of the states related to the
    state group.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transitions`: This is a list. It provides the list of the transition objects
    for the state group.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `QtQml` module also provides the `state` type, which is a part of the declarative
    State Machine framework. This is the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`childMode`: This is an `enumeration` that specifies how states are treated.
    It can be `QState.ExclusiveStates` (states are mutually exclusive) or `QState.ParallelStates`
    (states are parallel).'
  prefs: []
  type: TYPE_NORMAL
- en: '`errorState`: This `QAbstractState` is the error state.'
  prefs: []
  type: TYPE_NORMAL
- en: '`initialState`:This `QAbstractState` is the initial state.'
  prefs: []
  type: TYPE_NORMAL
- en: This type is related to the QML language infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Transition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This QML type is used to implement the animations of the state changes and
    define animated transitions. The `import` statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animations`: This is a list of the animations that are provided in list form.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enabled`: This can be `true` or `false` (the default is `true`) and shows
    whether the transition is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`running`: This can be `true` or `false` and shows whether the transition is
    currently running.'
  prefs: []
  type: TYPE_NORMAL
- en: '`from`: This is a `string` and shows that the transition is from these state
    changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`: This is a `string` and shows that the transition is to these state changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`reversible`: This can be `true` or `false`. If it''s `true`, the transition
    is automatically applied when a state change is reversed.'
  prefs: []
  type: TYPE_NORMAL
- en: Animating property changes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another approach to implementing animations with QML is to use behaviors.
  prefs: []
  type: TYPE_NORMAL
- en: Behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This QML type provides a default animation that will be applied if a property
    value changes. The `import` statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animation`: This sets the animation to run when the behavior is triggered.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enabled`: This can be `true` or `false`. This enables the type for use (the
    default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: Here, the construction is using the `Behavior` of the `width` property. The
    animation will run depending on the behaviors of width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `UItem.qml` file and add the `MouseArea` and `Behavior` types to the
    rectangle with `id: r2`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: If `MouseArea` is clicked, the green rectangle will move. We've set `Behavior`
    on the *y* axis, which will use an animation as the green rectangle falls down with
    a duration of seven seconds and the type of easing curve set to elastic (an exponentially
    decaying sine wave).
  prefs: []
  type: TYPE_NORMAL
- en: Animation types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QtQuick` provides the following types to implement animations.'
  prefs: []
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the base type for all QML animations. It has the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alwaysRunToEnd`: This can be `true` or `false`. If the animation is stopped,
    the animation loop should be completed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`loops`: This is an `int` and sets how many times the animation will play.'
  prefs: []
  type: TYPE_NORMAL
- en: '`paused`: This is `true` or `false`. If `true`, the animation will pause.'
  prefs: []
  type: TYPE_NORMAL
- en: '`running`: This is `true` or `false`. If `true`, the animation is running.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following signals are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`started()`: This is emitted when the animation begins.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stopped()`: This is emitted when the animation stops.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`complete()`: Jumps to the final property values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pause()`: Pauses the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`restart()`: Restarts the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`resume()`: Starts the paused animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`start()`: Starts the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stop()`: Stops the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: AnimationController
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This allows the manual control of animations. This is the required `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animation`: The  `Animation` to be controlled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress`: The animation progresses between the values `0.0` and `1.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: PropertyAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a useful type for animating changes to a property''s value. The `import`
    statement is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`duration`: This `int` is the duration of the animation in milliseconds.'
  prefs: []
  type: TYPE_NORMAL
- en: '`target`: This object sets the item whose properties need to be animated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`targets`: This list sets the items whose properties need to be animated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`property`: This `string` sets the property to be animated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`properties`: This `string` sets the properties to be animated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`from`: This is the starting value of the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`:  This is the end value of the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`exclude`: This is a list of objects that will not be animated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.type`: This is an `enumeration` and is the type of easing curve that
    is used for the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.amplitude`: This is the amplitude of the easing curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.overshoot`: This is the overshoot of the easing curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.period`: This is the period of the easing curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.bezierCurve`: This list is applicable if the easing type is `Easing.Bezier`.
    It''s a list of `real` numbers containing groups of three points defining a curve
    from (0,0) to (1,1)—[x1, y1, x2, y2, endx, endy]. The last point must be (1,1).'
  prefs: []
  type: TYPE_NORMAL
- en: NumberAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used to animate properties with numerical values. Use the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from`: This is a `real` number, and is the starting value of the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`: This is a `real` number, and is the end value of the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: SequentialAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This animation is used to run multiple animations, one after the other. This
    is the `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: This realizes a sequential animation of the specified animations.
  prefs: []
  type: TYPE_NORMAL
- en: ParallelAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to `SequentialAnimation`, this type is used to run multiple animations
    together, but they will run at the same time. Use the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s an example of the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: This realizes the parallel animation of the specified animations.
  prefs: []
  type: TYPE_NORMAL
- en: PauseAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type is used to set a pause between animations. Use the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'It has one property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`duration`: This is an `int` that sets the duration of the pause between animations
    in milliseconds'
  prefs: []
  type: TYPE_NORMAL
- en: ColorAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a specialized property animation that will be applied when a color
    value changes. You need this `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`from`: This is the color of the animation when it begins.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`: This is the color of the animation when it ends.'
  prefs: []
  type: TYPE_NORMAL
- en: CoordinateAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is an animation for geographical coordinate properties that are implemented
    between two coordinates. You need to use the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`direction`: This is an `enumeration` of the direction of the longitude animation
    of the coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`from`: This is the coordinate where the animation begins.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`: This is the coordinate where the animation ends.'
  prefs: []
  type: TYPE_NORMAL
- en: RotationAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type is used to control the direction of rotation during an animation.
    Use the following  `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`direction`: This is an `enumeration` of the direction of rotation (the default
    is `RotationAnimation.Numerical`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`from`: This `real` number is the starting value of the rotation of the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`to`: This `real` number is the end value of the rotation of the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: AnchorAnimation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type animates anchors. You need the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`targets`: This is a list of the items to reanchor.'
  prefs: []
  type: TYPE_NORMAL
- en: '`duration`: This `int` is the duration of the animation in milliseconds.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.type`: This `enumeration` is the type of easing curve that''s used
    for the animation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.amplitude`: This `real` number is the amplitude of the easing curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.overshoot`: This `real` number is the overshoot of the easing curve.'
  prefs: []
  type: TYPE_NORMAL
- en: '`easing.period`: This `real` number is the period of the easing curve.'
  prefs: []
  type: TYPE_NORMAL
- en: These types are not a complete list of the animation instruments available in
    `QtQuick`.
  prefs: []
  type: TYPE_NORMAL
- en: Animation examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we need to practice using the animations types that we''ve looked at:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `UItem.qml` file and add the following lines to the bottom of the
    rectangle with `id: r3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: The sequential animation is used for two `NumberAnimation` implementations.
    Animations will change the position of the rectangles with some pause specified
    with the `PauseAnimation` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following animation to the bottom of the rectangle with `id: r4`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: The parallel animation is used for two `PropertyAnimation` implementations.
    These animations will rotate the rectangles. To view these animations, we need
    to make some changes in the `u_qml.qml` file with the visible properties of the
    items and set the visible property of the `Grid` to `false`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the `visible` property of the group of animated items to `true`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The group of items will be visible.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set the `visible` property of the `Grid` to `false`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: 'The grid with items will be invisible. We have successfully implemented several
    animations with different approaches. The result is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/023c580e-0aa9-4740-a5ce-909b8ea99823.png)'
  prefs: []
  type: TYPE_IMG
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter has covered QML and its basic syntax. QML is useful when creating
    a GUI. Qt provides instruments to make GUIs, such as the `QtQml` and `QtQuick`
    modules. `QtQml` is more of a tool for working with the language and the QML engine
    infrastructure, but the `QtQuick` module provides libraries that help us to construct
    GUIs with wide functionality and visualization instruments. The language and QML
    engine infrastructure represent the core functionality of the library, and includes
    elements such as signal construction, binding properties, and running QML applications
    with Python. Almost all of the examples in this chapter use the `QtQuick` module
    to implement the visual components and functionality of the QML application.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will be devoted to the `QtQuick` module and submodules, with
    a focus on control elements, positioning, layouts, and visualization.
  prefs: []
  type: TYPE_NORMAL
