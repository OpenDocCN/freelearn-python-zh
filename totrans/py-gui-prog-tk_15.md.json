["```py\n# simple_canvas_demo.py\nimport tkinter as tk\nroot = tk.Tk()\ncanvas = tk.Canvas(\n  root, background='black',\n  width=1024, height=768\n)\ncanvas.pack() \n```", "```py\n# simple_canvas_demo.py\ncanvas.create_rectangle(240, 240, 260, 260, fill='orange') \n```", "```py\ncanvas.create_rectangle(\n  (300, 240), (320, 260),\n  fill='#FF8800'\n) \n```", "```py\ncanvas.create_oval(\n  (350, 200), (450, 250), fill='blue'\n) \n```", "```py\ncanvas.create_arc(\n  (100, 200), (200, 300),\n  fill='yellow', extent=315, start=25\n) \n```", "```py\ncanvas.create_line(\n  (0, 180), (1024, 180),\n  width=5, fill='cyan'\n) \n```", "```py\ncanvas.create_line(\n  (0, 320), (500, 320), (500, 768), (640, 768),\n  (640, 320), (1024, 320),\n  width=5, fill='cyan'\n) \n```", "```py\ncanvas.create_polygon(\n  (350, 225), (350,  300), (375, 275), (400, 300),\n  (425, 275), (450, 300), (450, 225),\n  fill='blue'\n) \n```", "```py\ncanvas.create_text(\n  (500, 100), text='Insert a Quarter',\n  fill='yellow', font='TkDefaultFont 64'\n) \n```", "```py\n# simple_canvas_demo.py\nsmiley = tk.PhotoImage(file='smile.gif')\ncanvas.create_image((570, 250), image=smiley) \n```", "```py\nquit = tk.Button(\n  root, text='Quit', bg='black', fg='cyan', font='TkFixedFont 24',\n  activeforeground='black', activebackground='cyan',  \n  command=root.quit\n)\ncanvas.create_window((100, 700), height=100, width=100, window=quit) \n```", "```py\n# simple_canvas_demo.py\n**image_item =** canvas.create_image((570, 250), image=smiley)\n**canvas.tag_bind(**\n **image_item,**\n**'<Button-1>'****,**\n**lambda** **e: canvas.delete(image_item)**\n**)** \n```", "```py\n# canvas_scroll.py\nimport tkinter as tk\nfrom random import randint, choice\n# Create root and canvas\nroot = tk.Tk()\nwidth = 1024\nheight = 768\ncanvas = tk.Canvas(\n  root, background='black',\n  width=width, height=height,\n)\ncanvas.grid(row=0, column=0) \n```", "```py\ncolors = ['#FCC', '#CFC', '#CCF', '#FFC', '#FFF', '#CFF']\nfor _ in range(1000):\n  x = randint(0, width * 2)\n  y = randint(0, height * 2)\n  z = randint(1, 10)\n  c = choice(colors)\n  canvas.create_oval((x - z, y - z), (x + z, y + z), fill=c) \n```", "```py\ncanvas.configure(scrollregion=(0, 0, width * 2, height * 2)) \n```", "```py\nxscroll = tk.Scrollbar(\n  root,\n  command=canvas.xview,\n  orient=tk.HORIZONTAL\n)\nxscroll.grid(row=1, column=0, sticky='new')\nyscroll = tk.Scrollbar(root, command=canvas.yview)\nyscroll.grid(row=0, column=1, sticky='nsw')\ncanvas.configure(yscrollcommand=yscroll.set)\ncanvas.configure(xscrollcommand=xscroll.set) \n```", "```py\n# bug_race.py\nimport tkinter as tk\nclass App(tk.Tk):\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.canvas = tk.Canvas(self, background='black')\n    self.canvas.pack(fill='both', expand=1)\n    self.geometry('800x600')\nApp().mainloop() \n```", "```py\n def setup(self):\n    self.canvas.left = 0\n    self.canvas.top = 0\n    self.canvas.right = self.canvas.winfo_width()\n    self.canvas.bottom = self.canvas.winfo_height()\n    self.canvas.center_x = self.canvas.right // 2\n    self.canvas.center_y = self.canvas.bottom // 2\n    self.finish_line = self.canvas.create_rectangle(\n      (self.canvas.right - 50, 0),\n      (self.canvas.right, self.canvas.bottom),\n      fill='yellow', stipple='gray50'\n    ) \n```", "```py\n# bug_race.py, in App.__init__()\n        self.canvas.wait_visibility()\n        self.setup() \n```", "```py\n# bug_race.py\nclass Racer:\n  def __init__(self, canvas, color):\n    self.canvas = canvas\n    self.name = f\"{color.title()} player\"\n    size = 50\n    self.id = canvas.create_oval(\n      (canvas.left, canvas.center_y),\n      (canvas.left + size, canvas.center_y + size),\n      fill=color\n    ) \n```", "```py\n# bug_race.py, in App.setup()\n    self.racers = [\n      Racer(self.canvas, 'red'),\n      Racer(self.canvas, 'green')\n    ] \n```", "```py\nfrom random import randint\n# inside Racer\n  def move_racer(self):\n    x = randint(0, 100)\n    y = randint(-50, 50)\n    t = randint(500, 2000)\n    self.canvas.after(t, self.canvas.move, self.id, x, y)\n    if self.canvas.bbox(self.id)[0] < self.canvas.right:\n      self.canvas.after(t, self.move_racer) \n```", "```py\nclass Racer:\n  FRAME_RES = 50 \n```", "```py\n# bug_race.py, at top\nfrom queue import Queue\n# inside Racer.__init__()\n    self.movement_queue = Queue() \n```", "```py\n# bug_race.py, inside Racer\n  def plot_course(self):\n    start_x = self.canvas.left\n    start_y = self.canvas.center_y\n    total_dx, total_dy = (0, 0)\n    while start_x + total_dx < self.canvas.right:\n      dx = randint(0, 100)\n      dy = randint(-50, 50)\n      target_y = start_y + total_dy + dy\n      if not (self.canvas.top < target_y < self.canvas.bottom):\n        dy = -dy\n      total_dx += dx\n      total_dy += dy\n      time = randint(500, 2000)\n      self.queue_move(dx, dy, time) \n```", "```py\n# bug_race.py, inside Racer\n  @staticmethod\n  def partition(n, k):\n    \"\"\"Return a list of k integers that sum to n\"\"\"\n    if n == 0:\n      return [0] * k \n```", "```py\n base_step = n // k\n    parts = [base_step] * k\n    for i in range(n % k):\n      parts[i] += 1\n    return parts \n```", "```py\n def queue_move(self, dx, dy, time):\n    num_steps = time // self.FRAME_RES\n    steps = zip(\n      self.partition(dx, num_steps),\n      self.partition(dy, num_steps)\n    )\n    for step in steps:\n      self.movement_queue.put(step) \n```", "```py\n def next_move(self):\n    if not self.movement_queue.empty():\n      nextmove = self.movement_queue.get()\n      self.canvas.move(self.id, *nextmove) \n```", "```py\n# bug_race.py, at the end of Racer.__init__()\n    self.plot_course() \n```", "```py\n# bug_race.py, inside App\n  def execute_frame(self):\n    for racer in self.racers:\n      racer.next_move() \n```", "```py\n# bug_race.py, inside Racer\n  @property\n  def overlapping(self):\n    bbox = self.canvas.bbox(self.id)\n    overlappers = self.canvas.find_overlapping(*bbox)\n    return [x for x in overlappers if x!=self.id] \n```", "```py\n# bug_race.py, inside App\n  def execute_frame(self):\n    for racer in self.racers:\n      racer.next_move()\n      **if** **self.finish_line** **in** **racer.overlapping:**\n        **self.declare_winner(racer)**\n        **return**\n    **self.after(Racer.FRAME_RES, self.execute_frame)** \n```", "```py\n def declare_winner(self, racer):\n    wintext = self.canvas.create_text(\n      (self.canvas.center_x, self.canvas.center_y),\n      text=f'{racer.name} wins!\\nClick to play again.',\n      fill='white',\n      font='TkDefaultFont 32',\n      activefill='violet'\n    )\n    self.canvas.tag_bind(wintext, '<Button-1>', self.reset) \n```", "```py\n def reset(self, *args):\n    self.canvas.delete('all')\n    self.setup() \n```", "```py\n# bug_race.py, in App.setup()\n  def setup():\n    # ...\n    self.execute_frame() \n```", "```py\nSELECT\n  date - (SELECT min(date) FROM plot_checks) AS \"Day\",\n  lab_id,\n  avg(median_height) AS \"Average Height (cm)\"\nFROM plot_checks\nGROUP BY date, lab_id\nORDER BY \"Day\", lab_id; \n```", "```py\n# models.py, inside SQLModel\n  def get_growth_by_lab(self):\n    query = (\n      'SELECT date - (SELECT min(date) FROM plot_checks) AS \"Day\", '\n      'lab_id, avg(median_height) AS \"Avg Height (cm)\" '\n      'FROM plot_checks '\n      'GROUP BY date, lab_id ORDER BY \"Day\", lab_id;'\n    )\n    return self.query(query) \n```", "```py\n# views.py\nclass LineChartView(tk.Canvas):\n  \"\"\"A generic view for plotting a line chart\"\"\"\n  margin = 20\n  colors = [\n    'red', 'orange', 'yellow', 'green',\n    'blue', 'purple', 'violet'\n  ] \n```", "```py\n# views.py, inside LineChartView\n  def __init__(\n    self, parent, data, plot_size,\n    x_field, y_field, plot_by_field\n  ):\n    self.data = data\n    self.x_field = x_field\n    self.y_field = y_field\n    self.plot_by_field = plot_by_field \n```", "```py\n self.plot_width, self.plot_height = plot_size\n    view_width = self.plot_width + (2 * self.margin)\n    view_height = self.plot_height + (2 * self.margin)\n    super().__init__(\n      parent, width=view_width,\n      height=view_height, background='lightgrey'\n    ) \n```", "```py\n self.origin = (self.margin, view_height - self.margin)\n   # X axis\n    self.create_line(\n      self.origin,\n      (view_width - self.margin, view_height - self.margin)\n    )\n    # Y axis\n    self.create_line(\n      self.origin, (self.margin, self.margin), width=2\n    ) \n```", "```py\n self.create_text(\n      (view_width // 2, view_height - self.margin),\n      text=x_field, anchor='n'\n    )\n    self.create_text(\n       (self.margin, view_height // 2),\n       text=y_field, angle=90, anchor='s'\n    ) \n```", "```py\n self.plot_area = tk.Canvas(\n      self, background='#555',\n      width=self.plot_width, height=self.plot_height\n    )\n    self.create_window(\n      self.origin, window=self.plot_area, anchor='sw'\n    ) \n```", "```py\n def _plot_line(self, data, color):\n    max_x = max([row[0] for row in data])\n    max_y = max([row[1] for row in data])\n    x_scale = self.plot_width / max_x\n    y_scale = self.plot_height / max_y \n```", "```py\n coords = [\n      (round(x * x_scale), self.plot_height - round(y * y_scale))\n      for x, y in data\n    ] \n```", "```py\n self.plot_area.create_line(\n      *coords, width=4, fill=color, smooth=True\n    ) \n```", "```py\n# views.py, in LineChartView.__init__()\n    plot_names = sorted(set([\n      row[self.plot_by_field]\n      for row in self.data\n    ]))\n    color_map = list(zip(plot_names, self.colors)) \n```", "```py\n for plot_name, color in color_map:\n      dataxy = [\n        (row[x_field], row[y_field])\n        for row in data\n        if row[plot_by_field] == plot_name\n      ]\n      self._plot_line(dataxy, color) \n```", "```py\n# views.py, inside LineChartView\n  def _draw_legend(self, color_map):\n    for i, (label, color) in enumerate(color_map):\n      self.plot_area.create_text(\n        (10, 10 + (i * 20), text=label, fill=color, anchor='w'\n      ) \n```", "```py\n# views.py, inside LineChartView.__init__()\n    self._draw_legend(color_map) \n```", "```py\n# application.py, in Application\n  def show_growth_chart(self, *_):\n    data = self.model.get_growth_by_lab()\n    popup = tk.Toplevel()\n    chart = v.LineChartView(\n      popup, data, (800, 400),\n      'Day', 'Avg Height (cm)', 'lab_id'\n    )\n    chart.pack(fill='both', expand=1) \n```", "```py\n# application.py, inside Application.__init__()\n    event_callbacks = {\n      #...\n      '<<ShowGrowthChart>>': self.show_growth_chart\n     } \n```", "```py\n def _add_growth_chart(self, menu):\n    menu.add_command(\n      label='Show Growth Chart',\n      command=self._event('<<ShowGrowthChart>>')\n    ) \n```", "```py\n# mainmenu.py, in any class's _build_menu() method\n    self._add_growth_chart(self._menus['Tools']) \n```", "```py\n$ pip install --user matplotlib \n```", "```py\nSELECT\n  seed_sample,\n  MAX(fruit) AS yield,\n  AVG(humidity) AS avg_humidity,\n  AVG(temperature) AS avg_temperature\nFROM plot_checks\nWHERE NOT equipment_fault\nGROUP BY lab_id, plot, seed_sample \n```", "```py\n# models.py, in SQLModel\n  def get_yield_by_plot(self):\n    query = (\n      'SELECT seed_sample, MAX(fruit) AS yield, '\n      'AVG(humidity) AS avg_humidity, '\n      'AVG(temperature) AS avg_temperature '\n      'FROM plot_checks WHERE NOT equipment_fault '\n      'GROUP BY lab_id, plot, seed_sample'\n    )\n    return self.query(query) \n```", "```py\nimport matplotlib\nmatplotlib.use('TkAgg') \n```", "```py\nfrom matplotlib.figure import Figure\nfrom matplotlib.backends.backend_tkagg import (\n  FigureCanvasTkAgg,\n  NavigationToolbar2Tk\n) \n```", "```py\n# views.py\nclass YieldChartView(tk.Frame):\n  def __init__(self, parent, x_axis, y_axis, title):\n    super().__init__(parent)\n    self.figure = Figure(figsize=(6, 4), dpi=100)\n    self.canvas_tkagg = FigureCanvasTkAgg(self.figure, master=self) \n```", "```py\n canvas = self.canvas_tkagg.get_tk_widget()\n    canvas.pack(fill='both', expand=True) \n```", "```py\n self.toolbar = NavigationToolbar2Tk(self.canvas_tkagg, self) \n```", "```py\n self.axes = self.figure.add_subplot(1, 1, 1)\n    self.axes.set_xlabel(x_axis)\n    self.axes.set_ylabel(y_axis)\n    self.axes.set_title(title) \n```", "```py\n def draw_scatter(self, data, color, label):\n    x, y, size = zip(*data)\n    scaled_size = [(s ** 2)//2 for s in size]\n    scatter = self.axes.scatter(\n      x, y, scaled_size,\n      c=color, label=label, alpha=0.5\n    ) \n```", "```py\n# views.py, in YieldChartView.__init__()\n    self.scatters = list()\n    self.scatter_labels = list() \n```", "```py\n# views.py, in YieldChartView.draw_scatter()\n    self.scatters.append(scatter)\n    self.scatter_labels.append(label)\n    self.axes.legend(self.scatters, self.scatter_labels) \n```", "```py\n# application.py, inside Application\n  def show_yield_chart(self, *_):\n     popup = tk.Toplevel()\n     chart = v.YieldChartView(\n        popup,\n       'Average plot humidity', 'Average plot temperature',\n       'Yield as a product of humidity and temperature'\n     )\n     chart.pack(fill='both', expand=True) \n```", "```py\n data = self.data_model.get_yield_by_plot()\n    seed_colors = {\n      'AXM477': 'red', 'AXM478': 'yellow',\n      'AXM479': 'green', 'AXM480': 'blue'\n    } \n```", "```py\n for seed, color in seed_colors.items():\n      seed_data = [\n        (x['avg_humidity'], x['avg_temperature'], x['yield'])\n        for x in data if x['seed_sample'] == seed\n      ]\n      chart.draw_scatter(seed_data, color, seed) \n```"]