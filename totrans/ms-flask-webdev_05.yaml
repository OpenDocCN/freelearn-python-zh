- en: Advanced Application Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our application has gone from a very simple example to an extendable foundation
    on which powerful features can easily be built. However, having our application
    entirely reside in one file needlessly clutters our code. This is one of the advantages
    of Flask; you can write a small REST service or web application on a single file,
    or a full-blown enterprise application. The framework won't get in your way and
    won't impose any project layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the application code clearer and more comprehensible, we will transform
    the entire code into a Python module and each feature into a module by itself.
    This modular approach enables you to scale easily and in a predictable way, so
    new features will have an obvious place and structure. In this chapter, you will
    learn the best practices for the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a modular application that easily scales
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Application factory pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modular application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Currently, your folder structure should look like the following (take a look
    at the code provided for the previous chapter):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'To convert our code into a more modular application, our files will be structured
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first change to make is to create a folder in your application that will
    hold the module. In this example, it will be called `webapp`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, for each module in our application, we will create a respective Python
    module. If the module is a classic web application using web templates and forms,
    we would create the following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The idea is to have separation of concerns, so each module will contain all
    the necessary views (declared and contained inside a Flask blueprint), web forms,
    and modules. This modular structure will translate into predictable namespaces
    for URIs, templates, and Python modules. Continuing to reason with an abstract
    approach, each module will have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python module (folder with `__init__.py`) using its name: `MODULE_NAME`. Inside
    the module is a `controllers` Python module that declares a blueprint named `<MODULE_NAME>_blueprint`
    attached to a URL, `prefix /<MODULE_NAME>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Template folder inside `templates` named `<MODULE_NAME>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This pattern will make the code very predictable to other team members, and
    very easy to change and extend. If you want to create a brand new feature, just
    create a new module using the proposed structure, and all team members will immediately
    guess the new feature's URI namespace, where all views are declared, and where
    the database models are defined for this feature. If some bug is identified, you
    can easily identify where to look for it, and have a much more restricted code
    base to worry about.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At first, it looks like a lot has changed but you will see that, taking into
    account the previously explained structure, the changes are simple and natural.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have moved our SQLAlchemy code to the `models.py` file inside the
    `blog module` folder. We just want to move the model definitions, not any database
    initialization code. All initialization code will be kept in the main application
    module, `webapp`, inside `__init__.py`. The import section and database-related
    object creation appear as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The main application module will be responsible for creating the Flask application
    (factory pattern, explained in the next section) and initializing SQLAlchemy.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `blog/models.py` file will import the initialized `db` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, the `CommentForm` object, along with all the WTForms imports, should be
    moved to the `blog/forms.py` file. The `forms.py` file will hold all the WTForms
    objects related to the blog feature.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `forms.py` file should look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `blog_blueprint` object, all its routes, and the `sidebar_data` data function
    need to be moved to the `blog/controllers.py` file in the `controllers` folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `blog/controllers.py` file should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: So, whenever a new feature is needed that is big enough to be a candidate for
    an application module, a new Python module (folder with an `__init__.py` file) with
    the name of the feature is needed with the previously described files. We will
    be breaking down the application code into logical groups.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we need to import the new feature blueprint into the main `__init__.py` file
    and register it in Flask:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Application factories
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we are using blueprints in a modular manner, there is another improvement
    we can make to our abstraction, which creates a **factory** for our application.
    The concept of a factory comes from the **object-oriented programming** (**OOP**)
    world, and it simply means a function or an object that creates another object.
    Our application factory will take one of our `config` objects, which we created
    at the beginning of the book, and return a Flask application object.
  prefs: []
  type: TYPE_NORMAL
- en: 'The object factory design was popularized by the now famous book, *Design Patterns:
    Elements of Reusable Object-Oriented Software*, by the Gang of Four. To learn
    more about these design patterns and how they can help simplify a project''s code,
    look at [https://en.wikipedia.org/wiki/Structural_pattern](https://en.wikipedia.org/wiki/Structural_pattern).'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a factory function for our application object has several benefits.
    First, it allows the context of the environment to change the configuration of
    the application. When your server creates the application object to serve, it
    can take into account any changes in the server that are necessary, and change
    the configuration object given to the app accordingly. Second, it makes testing
    much easier because it allows differently configured applications to be tested
    quickly. Third, multiple instances of the same application using the same configuration
    can be created very easily. This is useful for situations where web traffic is
    balanced across several different servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that the benefits of application factories are clear, let''s modify our
    `__init__.py` file to implement one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'The change to the file is very simple: we contained our code in a function
    that takes a `config` object and returns an application object. To start our application
    using the right configuration from an environment variable, we need to change `main.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We also need to modify our `manage.py` file in order to work with the `create_app`
    function as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'When we created our configuration objects, it was mentioned that the environment
    that the application is running in could change the configuration of the application.
    This code has a very simple example of that functionality, where an environment
    variable is loaded and determines which `config` object to give to the `create_app`
    function. Environment variables are dynamic name values that are part of a process
    environment. These environments can be shared by multiple processes, system-wide,
    user-wide, or for a single process. They can be set in Bash with the following
    syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Use this to read a variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also delete the variable easily, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: On your production server, you would set `WEBAPP_ENV` to `prod`. The true power
    of this setup will become clearer once you deploy to production in [Chapter 13](380101ac-fb85-4e2e-b664-8d6de77928f4.xhtml),
    *Deploying Flask Apps*, and when we get to [Chapter 12](9ffdc8da-2c26-4e97-8738-eebc7629535c.xhtml),
    *Testing Flask Apps*, which covers testing our project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have transformed our application into a much more manageable and scalable
    structure, which will save us a lot of headaches as we move further through the
    book and add more advanced features. In the next chapter, we will add a login
    and registration system to our application, and other features to make our site
    more secure.
  prefs: []
  type: TYPE_NORMAL
