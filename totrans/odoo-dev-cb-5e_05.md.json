["```py\nfrom odoo import api, fields, models\nclass HostelRoom(models.Model):\n    # [...]\n    state = fields.Selection([\n        ('draft', 'Unavailable'),\n        ('available', 'Available'),\n        ('closed', 'Closed')],\n        'State', default=\"draft\")\n```", "```py\n        @api.model\n        def is_allowed_transition(self, old_state, new_state):\n            allowed = [('draft', 'available'),\n                       ('available', 'closed'),\n                       ('closed', 'draft')]\n            return (old_state, new_state) in allowed\n    ```", "```py\n        def change_state(self, new_state):\n            for room in self:\n                if room.is_allowed_transition(room.state,\\ \n                new_state):\n                    room.state = new_state\n                else:\n                    continue\n    ```", "```py\n        def make_available(self):\n            self.change_state('available')\n        def make_closed(self):\n            self.change_state('closed')\n    ```", "```py\n    <form>\n    ...\n        <button name=\"make_available\" string=\"Make Available\" type=\"object\"/>\n        <button name=\"make_closed\" string=\"Make Borrowed\" type=\"object\"/>\n        <field name=\"state\" widget=\"statusbar\"/>\n    ...\n    </form>\n    ```", "```py\n    from odoo.exceptions import UserError\n    from odoo.tools.translate import _\n    ```", "```py\n    def change_state(self, new_state):\n        for room in self:\n            if room.is_allowed_transition(room.state, new_state):\n                room.state = new_state\n            else:\n                msg = _('Moving from %s to %s is not\n    allowed') % (room.state, new_state)\n                raise UserError(msg)\n    ```", "```py\ndef post_to_webservice(self, data):\n    try:\n        req = requests.post('http://my-test-service.com', data=data, timeout=10)\n        content = req.json()\n    except IOError:\n        error_msg = _(\"Something went wrong during data submission\")\n        raise UserError(error_msg)\n    return content\n```", "```py\n    class HostelRoom(models.Model):\n        # ...\n        def log_all_room_members(self):\n            # This is an empty recordset of model hostel.room.member\n            hostel_room_obj = self.env['hostel.room.member']\n            all_members = hostel_room_obj.search([])\n            print(\"ALL MEMBERS:\", all_members)\n            return True\n    ```", "```py\n    <button name=\"log_all_room_members\"  string=\"Log Members\" type=\"object\"/>\n    ```", "```py\nclass RoomCategory(models.Model):\n    _name = 'hostel.room.category'\n    _description = 'Hostel Room Category'\n    name = fields.Char('Category')\n    description = fields.Text('Description')\n    parent_id = fields.Many2one(\n        'hostel.room.category',\n        string='Parent Category',\n        ondelete='restrict',\n        index=True\n    )\n    child_ids = fields.One2many(\n        'hostel.room.category', 'parent_id',\n        string='Child Categories')\n```", "```py\n    def create_categories(self):\n        ......\n    ```", "```py\n    categ1 = {\n        'name': 'Child category 1',\n        'description': 'Description for child 1'\n    }\n    ```", "```py\n    categ2 = {\n        'name': 'Child category 2',\n        'description': 'Description for child 2'\n    }\n    ```", "```py\n    parent_category_val = {\n        'name': 'Parent category',\n        'description': 'Description for parent category',\n        'child_ids': [\n            (0, 0, categ1),\n            (0, 0, categ2),\n        ]\n    }\n    ```", "```py\n    record = self.env['hostel.room.category'].create(parent_category_val)\n    ```", "```py\n    <button name=\"create_categories\" string=\"Create Categories\" type=\"object\"/>\n    ```", "```py\ncateg1 = {\n    'name': 'Category 1',\n    'description': 'Description for Category 1'\n}\ncateg2 = {\n    'name': 'Category 2',\n    'description': 'Description for Category 2'\n}\nmultiple_records = self.env['hostel.room.category'].create([categ1, categ2])\n```", "```py\n    def update_room_no(self):\n        self.ensure_one()\n        self.room_no = \"RM002\"\n    ```", "```py\n    <button name=\"update_room_no\" string=\"Update Room No\" type=\"object\"/>\n    ```", "```py\n    def change_room_no(self):\n        self.ensure_one()\n        self.update({\n            'room_no': \"RM002\",\n            'another_field': 'value'\n            ...\n        })\n    ```", "```py\n    def find_room(self):\n        ...\n    ```", "```py\n    domain = [\n        '|',\n            '&', ('name', 'ilike', 'Room Name'),\n                 ('category_id.name', 'ilike', 'Category Name'),\n            '&', ('name', 'ilike', 'Second Room Name 2'),\n                 ('category_id.name', 'ilike', 'SecondCategory Name 2')\n    ]\n    ```", "```py\n    rooms = self.search(domain)\n    ```", "```py\ndef find_partner(self):\n    PartnerObj = self.env['res.partner']\n    domain = [\n        '&', ('name', 'ilike', 'SerpentCS'),\n             ('company_id.name', '=', 'SCS')\n    ]\n    partner = PartnerObj.search(domain)\n```", "```py\n    result = recordset1 + recordset2\n    ```", "```py\n    result = recordset1 | recordset2\n    ```", "```py\n    result = recordset1 & recordset2\n    ```", "```py\n           def filter_members(room):\n            all_rooms = self.search([])\n            filtered_rooms = self.rooms_with_multiple_members(all_rooms)\n    ```", "```py\n        @api.model\n        def room_with_multiple_members(self, all_rooms):\n    ```", "```py\n        def predicate(room):\n            if len(room.member_ids) > 1:\n                return True\n            return False\n    ```", "```py\n    return all_room.filter (predicate)\n    ```", "```py\n@api.model\ndef room_with_multiple_rooms(self, all_rooms):\n    return all_rooms.filter(lambda b: len(b.member_ids) > 1)\n```", "```py\n        @api.model\n        def get_members_names(self, rooms):\n    ```", "```py\n        return rooms.mapped('member_ids.name')\n    ```", "```py\n        @api.model\n        def sort_rooms_by_rating(self, rooms):\n    ```", "```py\n        return rooms.sorted(key='room_rating')\n    ```", "```py\nrooms.sorted(key='room_rating', reverse=True)\n```", "```py\nclass HostelRoom(models.Model):\n    _inherit = 'hostel.room'\n    date_terminate = fields.Date('Date of Termination')\n```", "```py\nclass RoomCategory(models.Model):\n    _inherit = 'hostel.room.category'\n    max_allow_days = fields.Integer(\n        'Maximum allows days',\n        help=\"For how many days room can be borrowed\",\n        default=365)\n```", "```py\n    def make_closed(self):\n        day_to_allocate = self.category_id.max_allow_days or 10\n        self.date_return = fields.Date.today() + timedelta(days=day_to_allocate)\n        return super(HostelRoom, self).make_closed()\n    ```", "```py\n        def make_available(self):\n            self.date_terminate = False\n            return super(HostelRoom, self).make_available()\n    ```", "```py\nreturn super(HostelRoom, self).make_closed()\n```", "```py\nfrom odoo import models, api, exceptions\nclass HostelRoom(models.Model):\n    _name = 'hostel.room'\n    remarks = fields.Text('Remarks')\n```", "```py\n<field name=\"remarks\"/>\n```", "```py\nid,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink\naccess_hostel,hostel.room.user,model_hostel_room,base.group_user,1,1,0,0\n```", "```py\n        @api.model\n        def create(self, values):\n            if not self.user_has_groups('my_hostel.group_hostel_manager'):\n                if values.get('remarks'):\n                    raise UserError(\n                        'You are not allowed to modify '\n                        'remarks'\n                    )\n            return super(HostelRoom, self).create(values)\n    ```", "```py\n        def write(self, values):\n            if not self.user_has_groups('my_hostel.group_hostel_manager'):\n                if values.get('remarks'):\n                    raise UserError(\n                        'You are not allowed to modify '\n                        'manager_remarks'\n                    )\n            return super(HostelRoom, self).write(values)\n    ```", "```py\ndef unlink(self):\n    # your logic\n    return super(HostelRoom, self).unlink()\n```", "```py\nsuper(…).unlink(), records would not be deleted.\n```", "```py\ndef write(self, values):\n    if not self.user_has_groups('my_hostel.group_hostel_manager'):\n        if values.get('remarks'):\n            del values['remarks']\n    return super(HostelRoom, self).write(values)\n```", "```py\nclass MyModel(models.Model):\n    def write(self, values):\n        sup = super(MyModel, self).write(values)\n        if self.env.context.get('MyModelLoopBreaker'):\n            return\n        self = self.with_context(MyModelLoopBreaker=True)\n        self.compute_things() # can cause calls to writes\n        return sup\n```", "```py\nclass HostelRoom(models.Model):\n    def name_get(self):\n        result = []\n        for room in self:\n            member = room.member_ids.mapped('name')\n            name = '%s (%s)' % (room.name, ', '.join(member))\n            result.append((room.id, name))\n            return result\n```", "```py\n    @api.model\n    def _name_search(self, name='', args=None, operator='ilike',\n                      limit=100, name_get_uid=None):\n         args = [] if args is None else args.copy()\n         if not(name == '' and operator == 'ilike'):\n             args += ['|', '|',\n                      ('name', operator, name),\n                      ('isbn', operator, name),\n                      ('author_ids.name', operator, name)\n                      ]\n         return super(HostelRoom, self)._name_search(\n             name=name, args=args, operator=operator,\n             limit=limit, name_get_uid=name_get_uid)\n    ```", "```py\n    previous_room = fields.Many2one('hostel.room', string='Previous Room')\n    ```", "```py\n    <field name=\"previous_room_id\" />\n    ```", "```py\nclass HostelRoom(models.Model):\n    _name = 'hostel.room'\n    name = fields.Char('Name', required=True)\n    cost_price = fields.Float('Room Cost')\n    category_id = fields.Many2one('hostel.room.category')\n```", "```py\nclass HostelCategory(models.Model):\n    _name = 'hostel.room.category'\n    name = fields.Char('Category')\n    description = fields.Text('Description')\n```", "```py\n    @api.model\n    def _get_average_cost(self):\n        grouped_result = self.read_group(\n            [('cost_price', \"!=\", False)], # Domain\n            ['category_id', 'cost_price:avg'], # Fields to access\n            ['category_id'] # group_by\n            )\n        return grouped_result\n```"]