["```py\nauth.define_tables()\n\n```", "```py\nauth.settings.extra_fields['auth_user'] = [\n\tField('phone_number',requires=IS_MATCH('\\d{3}\\-\\d{3}\\-\\d{4}')),\n\tField('address','text')]\nauth.define_tables(username=True)\n\n```", "```py\nauth.define_tables(username=True)\n\n```", "```py\nauth.settings.extra_fields['auth_user'] = [\n\tField('phone_number',requires=IS_MATCH('\\d{3}\\-\\d{3}\\-\\d{4}'),\n\tcomment = \"i.e. 123-123-1234\"),\n\tField('address','text'),\n\tField('complete_registration',default=False,update=True,\n\t\twritable=False, readable=False)]\nuth.define_tables(username=True)\n\n```", "```py\nif auth.user and not auth.user.complete_registration:\n\tif not (request.controller,request.function) == ('default','user'):\n\t\tredirect(URL('default','user/profile'))\n\n```", "```py\nMAX_LOGIN_FAILURES = 3\n# You must request the ReCaptcha keys\n# in order to use this feature\nRECAPTCHA_PUBLIC_KEY = ''\nRECAPTCHA_PRIVATE_KEY = ''\n\ndef _():\n\tfrom gluon.tools import Recaptcha\n\tkey = 'login_from:%s' % request.env.remote_addr\n\tnum_login_attempts = cache.ram(key,lambda:0,None)\n\n\tif num_login_attempts >= MAX_LOGIN_FAILURES:\n\t\tauth.settings.login_captcha = Recaptcha(\n\t\t\trequest,RECAPTCHA_PUBLIC_KEY,RECAPTCHA_PRIVATE_KEY)\n\n\t\tdef login_attempt(form,key=key,n=num_login_attempts+1):\n\t\t\tcache.ram(key,lambda n=n:n,0)\n\n\t\tdef login_success(form,key=key):\n\t\t\tcache.ram(key,lambda:0,0)\n\n\t\tauth.settings.login_onvalidation.append(login_attempt)\n\t\tauth.settings.login_onaccept.append(login_success)\n_()\n\n```", "```py\n<script>\nvar RecaptchaOptions = {\n\ttheme : 'clean',\n\ttabindex : 2\n};\n</script>\n\n```", "```py\n{{=form}}\n\n```", "```py\npip install pyGravatar\n\n```", "```py\nfrom gravatar import Gravatar\n\n```", "```py\n{{extend 'layout.html'}}\n<h3>{{=T( request.args(0).replace('_',' ').capitalize() )}}</h3>\n<div id=\"web2py_user_form\">\n{{if 'profile' in request.args:}}\n\t<img src=\"img/{{=Gravatar(auth.user.email).thumb}}\" />\n{{pass}}\n\n```", "```py\n<img src='{{=Gravatar(auth.user.email).thumb}}' />\n<img src='{{=Gravatar('email@domain.com').thumb}}' />\n\n```", "```py\n{extend 'layout.html'}}\n<h2>{{=T( request.args(0).replace('_',' ').capitalize() )}}</h2>\n<div id=\"web2py_user_form\">\n{{if 'profile' in request.args:}}\n\t{{user = Gravatar(auth.user.email)}}\n\t<img src=\"img/{{=user.thumb}}\" />\n\t<blockquote style='width:300px;'>\n\n\t\t{{try:}}\n\t\t\t{{=user.profile['aboutMe']}}\n\n\t\t{{except Exception:}}\n\t\t\tNo profile information\n\t\t{{pass}}\n\n\t</blockquote>\n{{pass}}\n\n```", "```py\n{extend 'layout.html'}}\n<div id=\"web2py_user_form\">\n{{if 'profile' in request.args:}}\n\t{{user = Gravatar(auth.user.email)}}\n\t<img src=\"img/{{=user.thumb}}\" />\n\t<blockquote style='width:300px;'>\n\n\t\t{{try:}}\n\t\t\t{{=user.profile['aboutMe']}}\n\t\t\t{{services = user.profile.get('accounts', {})}}\n\t\t\t{{=UL(*[LI(A(service['shortname'], _href=service['url'])) for\n\t\t\t\tservice in services])}}\n\n\t\t{{except Exception:}}\n\t\t\tNo profile information\n\n\t\t\t{{pass}}\n\t</blockquote>\n{{pass}}\n\n```", "```py\n# for web2py\nfrom gluon.contrib import simplejson\n_parse_json = lambda s: simplejson.loads(s)\n\n```", "```py\n    CLIENT_ID=\"xxxxxxxxxxxxxxxx\"\n    CLIENT_SECRET=\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n\n    ```", "```py\n    #########################################\n    ## use fb auth\n    ## for facebook \"graphbook\" application\n    #########################################\n\n    import sys, os\n    from fbappauth import CLIENT_ID,CLIENT_SECRET\n    from facebook import GraphAPI, GraphAPIError\n    from gluon.contrib.login_methods.oauth20_account import\n    OAuthAccount\n\n    class FaceBookAccount(OAuthAccount):\n    \t\"\"\"OAuth impl for FaceBook\"\"\"\n    \tAUTH_URL=\"https://graph.facebook.com/oauth/authorize\"\n    \tTOKEN_URL=\"https://graph.facebook.com/oauth/access_token\"\n\n    def __init__(self, g):\n    \tOAuthAccount.__init__(self, g, CLIENT_ID, CLIENT_SECRET,\n    \t\tself.AUTH_URL, self.TOKEN_URL,\n    \t\tscope='user_photos,friends_photos')\n    \tself.graph = None\n\n    def get_user(self):\n    \t'''Returns the user using the Graph API.'''\n    \tif not self.accessToken():\n    \t\treturn None\n\n    \tif not self.graph:\n    \t\tself.graph = GraphAPI((self.accessToken()))\n    \t\tuser = None\n\n    \ttry:\n    \t\tuser = self.graph.get_object(\"me\")\n    \t\texcept GraphAPIError, e:\n    \t\t\tself.session.token = None\n    \t\t\tself.graph = None\n\n    \t\tif user:\n    \t\t\treturn dict(first_name = user['first_name'],\n    \t\t\t\tlast_name = user['last_name'],\n    \t\t\t\tusername = user['id'])\n\n    auth.settings.actions_disabled = ['register','change_password',\n    \t'request_reset_password','profile']\n    auth.settings.login_form=FaceBookAccount(globals())\n    auth.settings.login_next=URL(f='index')\n\n    ```", "```py\nauth.settings.login_next=URL(f='index')\n\n```", "```py\n# fb app testing setup\n127.0.0.1 bozzatest.example.com\n\n```", "```py\n# python web2py.py -p 80 -a <secret>\n\n```"]