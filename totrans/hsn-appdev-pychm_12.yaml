- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Turning On Scientific Mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the third section of the book. One of my favorite video game franchises
    is Sid Meier’s *Civilization*. It takes many days to complete a single game, which
    starts you off as the head of a civilization at the dawn of history. You progress
    through prehistoric eras, through medieval, renaissance, and industrial areas.
    With each new age comes unique challenges as players vie for various facets of
    global domination. The game truly speeds up once the players reach the information
    age. I can just hear my editor saying, *“Put down the video game, and type faster!”*
    OK, I will. Talking about the book, I feel like we’ve reached a similar milestone
    with this chapter. We’ve come a long way since our *hello world* message in `main.py`
    back in the first few chapters of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'PyCharm is aimed at Python developers, but PyCharm Professional really targets
    two groups: web developers and data scientists. The latter group seems like it
    is a little harder to nail down given JetBrains has multiple products for data
    science. Besides PyCharm Professional, JetBrains also makes a separate IDE called
    **DataSpell** which is billed as *The IDE for Professional Data Scientists*. What
    gives?'
  prefs: []
  type: TYPE_NORMAL
- en: I wondered the same thing. According to the company’s FAQ for DataSpell, PyCharm
    is supposed to support software developers who engage in data-sciency activities
    as part of their job as software developers. DataSpell is for professionals who
    are not developers, but who simply do analytics. There is some cross-over in terms
    of features, but unlike what we’ve seen with WebStorm and DataGrip which are fully
    embedded in PyCharm, DataSpell has features PyCharm doesn’t, and there are no
    plans to change that. They are targeting two different sets of professionals.
  prefs: []
  type: TYPE_NORMAL
- en: 'Support for scientific and analytical workflows entails turning on scientific
    mode in PyCharm. This opens up new UI layouts and tool panels you wouldn’t normally
    with scientific mode turned off. In this chapter, we’ll be covering the following
    topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Starting a scientific project in PyCharm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Advanced features of PyCharm’s scientific projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand how these features can improve
    productivity in scientific computing projects. This chapter will serve as a general,
    high-level discussion on the various tools PyCharm offers and will help you understand
    scientific computing and how these tools are integrated and work with each other.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to proceed through this chapter, and indeed the rest of the book,
    you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Since we’re switching to the topic of data science, I’ll be switching my preferred
    Python distribution to Anaconda, which is a Python distribution tailored to data
    science workloads. You can find it, along with installation instructions for your
    operating system at [https://anaconda.com](https://anaconda.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Likewise, instead of the usual `pip`, I’ll be leveraging `conda`, which is Anaconda’s
    package manager. It is installed alongside Anaconda.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An installed and working copy of PyCharm. Installation was covered in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*, in case
    you are jumping into the middle of the book.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book’s sample source code from GitHub. We covered cloning the code in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)*, Installation and Configuration*. You’ll
    find this chapter’s relevant code at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-12.](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-12
    )
  prefs: []
  type: TYPE_NORMAL
- en: Creating a scientific project in PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By now, you’re intimately familiar with the New Project dialog in PyCharm.
    Let’s create a science project! Click **File** | **New Project**, and you’ll find
    a template called **Scientific**, as shown in *Figure 12**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.1: Stand back! We’re about to do SCIENCE!](img/B19644_12_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Stand back! We’re about to do SCIENCE!'
  prefs: []
  type: TYPE_NORMAL
- en: 'I mentioned earlier, I will be using Anaconda for this section of the book
    because this is what most data science pros use. The only interesting setting
    beyond the change in interpreter is the **Data folder** setting under **More Settings**.
    It is setting a folder in our soon-to-be-created project that will hold, you guessed
    it: data. More on this after we create the project. Go ahead and click **Create**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the creation process is complete, you’ll find a setup like mine in *Figure
    12**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.2: Behold! We have created a science project in PyCharm!](img/B19644_12_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Behold! We have created a science project in PyCharm!'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s talk about what just happened. We generated a project, per usual. We got
    a folder called data, which must be special because it is a different color than
    the rest. We got more empty folders for notebooks and models. We got a `main.py`
    file, a `requirements.txt` file, and a Markdown file called `README.md`, all of
    which are empty. We usually get some boilerplate code but not this time.
  prefs: []
  type: TYPE_NORMAL
- en: Each file and folder serves a purpose. As I mentioned, the data folder must
    be special because it is a different color. Mine is highlighted in yellow. This
    folder is important because it is meant to contain data files for your scientific
    analysis. Since it isn’t code, and since your data files might be very large,
    PyCharm marks this folder as special to the project. You might have noticed the
    template folder in Flask and Django apps were also colored differently than the
    rest. There are special folders in many project types.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can gain some clues about this in the project’s properties. I have the project
    properties window up in *Figure 12**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.3: You can set several types of special folders in many of the
    project types in PyCharm including scientific projects](img/B19644_12_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: You can set several types of special folders in many of the project
    types in PyCharm including scientific projects'
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the data folder is excluded from the rest of the project. PyCharm
    will not index or scan this folder in any way. We need this for the data folder
    because it is fairly normal for your data files to be very large. There is no
    code in this folder, so really, there is no reason to scan it for the purposes
    of providing the usual help and insights you’ve come to expect from code files.
    You might even consider having your revision control system disregard this folder
    as well, since it might not be appropriate to check your data into a repository
    for a number of reasons ranging from privacy issues, depending on the nature of
    the data, as well as file size. Git has limitations on the size of files it can
    handle, and GitHub will limit the size of your repository. The data folder is
    an obvious bloat that probably doesn’t need to be in the repo.
  prefs: []
  type: TYPE_NORMAL
- en: With that mystery solved, let’s look at the `requirements.txt` file. We have
    seen this before. This file is used by the Python project, regardless of which
    IDE you use, to track the library requirements for the project. Anytime you use
    a third-party library from PyPi, you need to include it in `requirements.txt`.
    This file should be checked into your repository so other developers can replicate
    your virtual environment. The file is empty, and we saw the tooling around `requirements.txt`
    in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052).
  prefs: []
  type: TYPE_NORMAL
- en: 'There is something here we have not seen before: the `README.md` file. The
    `.md` extension indicates this is a Markdown file. Markdown is an alternative
    to HTML, which is a markup language. See what they did there? Markdown allows
    you to create a formatted text file without all the overhead of HTML. While you
    get rid of the overhead, you also lose a lot of capability. Markdown is just used
    to create documentation files. If you’ve ever browsed a repository on GitHub,
    and the project has a snazzy landing page, you’re really looking at the `README.md`
    file rendered to HTML by GitHub and your browser. There’s an example of a nice
    `README.md` page for one of my repos in *Figure 12**.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.4: The README.md file gets rendered as the landing page on GitHub
    and is used to document the contents of the repository](img/B19644_12_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: The README.md file gets rendered as the landing page on GitHub
    and is used to document the contents of the repository'
  prefs: []
  type: TYPE_NORMAL
- en: For this project, PyCharm has generated an empty `README.md` file. The `main.py`
    file is just a plain old Python file. Really, this is a very minimal project template.
  prefs: []
  type: TYPE_NORMAL
- en: Additional configuration for science projects in PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyCharm’s out-of-the-box configuration is normally very complete. For scientific
    projects, though, there are some plugins you might want to add. We have a whole
    chapter on some amazing plugins later in the book, but you need them right now,
    so let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: 'Plugins are installed using the PyCharm Marketplace. You can get to the Marketplace
    using the gear icon you normally use to get to settings. You’ll recognize it in
    *Figure 12**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.5: The plugins menu option will take you to the plugins window
    which includes the PyCharm Marketplace](img/B19644_12_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: The plugins menu option will take you to the plugins window which
    includes the PyCharm Marketplace'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **Plugins** window. You can see mine in *Figure 12**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.6: The Marketplace allows you to find all kinds of plugins for
    PyCharm and other JetBrains IDEs](img/B19644_12_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: The Marketplace allows you to find all kinds of plugins for PyCharm
    and other JetBrains IDEs'
  prefs: []
  type: TYPE_NORMAL
- en: Note it takes you straight to the **Marketplace** tab. This reminds me of the
    inevitable gift shop at the end of every museum tour I’ve ever taken. There’s
    a tab to the right that lets you see what is already installed. That’s boring
    though, right? It is more enticing to browse what we don’t yet have. Many of the
    plugins here are free, and some are not. Likewise, many of the plugins here are
    well documented and supported by developers who carefully craft their Marketplace
    offering. Some are just short descriptions with a title. Let’s go shopping!
  prefs: []
  type: TYPE_NORMAL
- en: Markdown plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Your first stop is to find a good Markdown plugin. Markdown isn’t exactly rocket
    science, even though we find it in a science project. However, a good Markdown
    plugin will render your Markdown so you can see what it will look like when the
    Markdown code is converted to formatted text.
  prefs: []
  type: TYPE_NORMAL
- en: 'To find a Markdown plugin you need to search using the **Search** box indicated
    in *Figure 12**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.7: Search here for plugins and avoid the temptation of the search
    box that helps you find settings](img/B19644_12_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Search here for plugins and avoid the temptation of the search
    box that helps you find settings'
  prefs: []
  type: TYPE_NORMAL
- en: As it happens, JetBrains now bundles a Markdown plugin in the default installation.
    They haven’t always done that. You can see there are alternatives to explore.
    I’m just going to use the bundled one. If you have an older version of PyCharm,
    you might need to install this. In this case, there will be an **Install** button
    as you can see with the others.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try it out. Exit the settings window and open the `README.md` file. Add
    the following code to your `README.md` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see your Markdown code on the left, and the rendered preview on
    the right, as shown in *Figure 12**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.8: Markdown code is on the left; the rendered result is on the
    right](img/B19644_12_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Markdown code is on the left; the rendered result is on the right'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can change the layout of the preview, or hide it altogether using the buttons
    on the top right of the Markdown editor as shown in *Figure 12**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.9: You can adjust the layout of the preview window](img/B19644_12_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: You can adjust the layout of the preview window'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the left button hides the preview. Pushing the right one hides the
    code. You can click the button in the middle once to toggle the preview alongside
    the code. Click it again, and you’ll get code and preview stacked on top of one
    another.
  prefs: []
  type: TYPE_NORMAL
- en: Adding images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A needed characteristic of a good Markdown editor is the ability to easily
    add images. In PyCharm, if you need images in your Markdown, start by making a
    folder in your project called assets. Copy your image files to this folder. Then,
    just drag the image and drop it in the editor. In *Figure 12**.10*, I’m dragging
    an image from my assets folder and then dropping it in my Markdown editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.10: Drag images from outside PyCharm and drop them into the code
    to include them in your Markdown](img/B19644_12_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: Drag images from outside PyCharm and drop them into the code
    to include them in your Markdown'
  prefs: []
  type: TYPE_NORMAL
- en: 'The result can be seen in *Figure 12**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.11: The dragged image appears in your code and in the preview](img/B19644_12_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: The dragged image appears in your code and in the preview'
  prefs: []
  type: TYPE_NORMAL
- en: All in all, the default plugin is pretty good. Some of the others have more
    advanced features, but really the only one I’d want is one that converts the Markdown
    to other formats. If you need that, a few of the plugins in the marketplace can
    do that.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the CSV plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A common format for data storage is the **comma-separated values** (**CSV**)
    format. This is a format that is supported by every spreadsheet program ever devised.
    The marketplace has a CSV function that allows you to open CSVs and similar files
    such as **tab-separated values** (**TSV**) in a spreadsheet-like interface. You
    can see the Marketplace page for it in *Figure 12**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.12: You’ll probably be using CSV files at some point. Luckily,
    there’s a plugin for that](img/B19644_12_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: You’ll probably be using CSV files at some point. Luckily, there’s
    a plugin for that'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you click the install button for the CSV Editor plugin, you’ll be prompted
    to restart the IDE. This is very common. After you restart, you can try it out
    with any of your own CSV files, or you can use my sample of FDA study data in
    the sample code’s data folder. The CSV plugin renders my data in full color as
    seen in *Figure 12**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.13: The CSV Editor plugin renders data in columns in different
    colors. It’s like having a pretty spreadsheet embedded in your IDE](img/B19644_12_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: The CSV Editor plugin renders data in columns in different colors.
    It’s like having a pretty spreadsheet embedded in your IDE'
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, you can edit the data, but this isn’t a spreadsheet. Don’t expect
    to be able to add formulas and expressions to your cells. At the bottom you’ll
    see you can switch between the **Table Editor** view the **Text view**.
  prefs: []
  type: TYPE_NORMAL
- en: There’s one more you’re going to want for sure and that’s the cell mode plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the cell mode plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'I’m not going into great depth on what the cell mode plugin does just yet.
    Just trust me when I say it is extremely handy when you are working with PyCharm
    code cells, which we’ll be covering shortly. Since we’re already in the Marketplace,
    let’s grab it now. *Figure 12**.14* shows the Marketplace page for the cell mode
    plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.14: The cell mode plugin will make working with code cells easy
    a little later in this chapter](img/B19644_12_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: The cell mode plugin will make working with code cells easy a
    little later in this chapter'
  prefs: []
  type: TYPE_NORMAL
- en: Install it by clicking the **Install** button. At this point, you have PyCharm
    fairly kitted out for data work.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are getting ready to do some science, but first, we need to set some requirements
    for our project. We’ve covered this in earlier chapters, but we’ll quickly review
    it here.
  prefs: []
  type: TYPE_NORMAL
- en: 'The newest way to add packages to any Python project is to use the **Python
    Packages** panel shown in *Figure 12**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.15: Use the Python Packages panel to manage Python packages. If
    it isn’t on the right-hand toolbar, you can add it](img/B19644_12_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: Use the Python Packages panel to manage Python packages. If it
    isn’t on the right-hand toolbar, you can add it'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve used the panel before, it will be on the right-hand toolbar. If you
    haven’t used it before, you can add it by clicking the three dots, and then picking
    the **Python Packages** option. Once you’ve located the button to open the panel,
    you’ll find the **Search** box shown in *Figure 12**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.16: You can search packages from PyPI easily from this panel and
    add them using conda](img/B19644_12_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: You can search packages from PyPI easily from this panel and
    add them using conda'
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to add `numpy` and `matplotlib` to our project. Type each into the
    **Search** box indicated in *Figure 12**.17*, then install the package using the
    **Install with conda** button. If you’ve opted to stick with vanilla Python, the
    button will say **Install** **with pip**.
  prefs: []
  type: TYPE_NORMAL
- en: Backfill your requirements.txt file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that you have the two packages installed, open the `requirements.txt` file.
    PyCharm will let you know that the requirements installed in the conda environment
    don’t match the empty file. *Figure 12**.17* shows you the option to add the packages
    we just installed to the `requirements.txt` file automatically.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.17: PyCharm helps you keep your requirements.txt file up to date](img/B19644_12_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.17: PyCharm helps you keep your requirements.txt file up to date'
  prefs: []
  type: TYPE_NORMAL
- en: Click the link button to update your requirements file.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some sciency code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: My editor keeps saying “sciency” isn’t a word. A wise man once said, “Science
    isn’t about why. It’s about why not!?” I’m going to keep using it and if you’re
    actually reading this, it means I got away with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ve set up the IDE, and installed our required packages. Let’s open up `main.py`
    and add some code so we can see PyCharm strut its stuff! In `main.py`, add this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'These first two imports just bring in `numpy` and `matplotlib` with aliases.
    It turns out scientists hate typing more than normal developers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Using NumPy, we are simply creating two sample 100-element datasets from normal
    distributions. The values of `x` are created from a distribution with a mean of
    0 and a standard deviation of 1, while `y` is from a distribution with a mean
    of 2 and a standard deviation of 3\. Then, we draw their corresponding histograms
    using Matplotlib. Run the program per usual and note the results in *Figure 12**.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.18: Click the run button (1) and the matplotlib graphical plot
    is displayed in SciView](img/B19644_12_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.18: Click the run button (1) and the matplotlib graphical plot is
    displayed in SciView'
  prefs: []
  type: TYPE_NORMAL
- en: Our Python script ran, but doing so triggered SciView to turn on. SciView is
    the centerpiece of PyCharm’s data analytics feature set. It allows you to view
    plots alongside the complex API documentation common to libraries such as NumPy,
    pandas, and PyTorch.
  prefs: []
  type: TYPE_NORMAL
- en: I highlighted the run button at **(1)** in *Figure 12**.18* in case you’re joining
    us late, and you skipped the earlier chapters on running your code in the IDE.
    The icon at **(2)** indicates SciView is turned on. You can toggle it on or off
    just like any other panel. When SciView is turned on, you get a panel for visualizations
    **(3)** and a panel for documentation **(4)**. We’ll be working with these tools
    more over the next few chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Toggling scientific mode
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I have mentioned the term *scientific mode* a couple of times before; now, we
    will see the significance of this mode in PyCharm projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**Scientific mode** consists of multiple components that we will be exploring
    in this and the upcoming chapters, the most notable being the **SciView** and
    **Documentation** panels. It is important to note that this special mode in PyCharm
    is not equivalent to having a scientific project. Moreover, it is more of a configuration
    setting where various PyCharm features that support scientific computing are easier
    to access and use.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a great many programs that have different UI configurations depending
    on how you intend to use the software. Adobe Photoshop has different view sets
    for photographers versus web designers. Many browsers have chromeless options
    or modes optimized for distraction-free reading. PyCharm itself has a *Zen mode,*
    which removes all of the UI except for the editor. You can see it in *Figure 12**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.19: In Zen mode’s embrace. PyCharm’s code dances with peace. Clarity
    in lines](img/B19644_12_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.19: In Zen mode’s embrace. PyCharm’s code dances with peace. Clarity
    in lines'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’re interested in Zen mode, you’ll find it by clicking **View** | **Appearance**
    | **Enter Zen** mode from the main menu. That’s nice and all, but we’re here for
    scientific mode and the point I was making is that this mode is more of a configuration
    of the appearance of PyCharm rather than being dedicated tool panels unique to
    the scientific project. You can enable scientific mode in any project type. To
    turn it in, click **View** | **Scientific Mode**, as shown in *Figure 12**.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 12.20: You can toggle Scientific Mode on the view menu. When \uFEFF\
    scientific mode is on, you can toggle the two panels using the buttons on the\
    \ toolbar to the right edge of the screen](img/B19644_12_20.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.20: You can toggle Scientific Mode on the view menu. When scientific
    mode is on, you can toggle the two panels using the buttons on the toolbar to
    the right edge of the screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'PyCharm is also a little bit nosy. If it sees you are using NumPy, it prompts
    you to turn scientific mode on with a little toast in the bottom-right corner
    of the IDE. See *Figure 12**.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.21: Your Pythonic big brother is watching you, but at least it’s
    trying to be helpful](img/B19644_12_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.21: Your Pythonic big brother is watching you, but at least it’s
    trying to be helpful'
  prefs: []
  type: TYPE_NORMAL
- en: Overall, scientific mode offers an intuitive interface that can improve your
    productivity in scientific computing projects. In the next section, we will examine
    other advanced features within a scientific project in more detail, namely the
    **Documentation** panel and PyCharm’s code cells.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the advanced features of PyCharm’s scientific projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Equipped with the features we discussed in the previous section, you can navigate
    and work with PyCharm’s scientific projects efficiently and productively. However,
    there are still other subtle features that PyCharm offers that can prove to be
    useful in this context. First, we will consider the **Documentation** panel and
    its usage.
  prefs: []
  type: TYPE_NORMAL
- en: The documentation viewer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Documentation is an essential part of programming and software development,
    and PyCharm offers the most powerful and straightforward features to support the
    task of working with documentation in Python. We saw it in action first in [*Chapter
    4*](B19644_04.xhtml#_idTextAnchor077), *Editing and Formatting with Ease* *in
    PyCharm*.
  prefs: []
  type: TYPE_NORMAL
- en: In a scientific project, the **Documentation** panel, as we have seen, is pinned
    as one of the main panels of the project window. This documentation viewer displays
    real-time documentation data in a dynamic way. Specifically, as you move your
    caret to a particular method or function call in the editor, the **Documentation**
    panel will show the official documentation corresponding to that method or function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back into the code we wrote earlier, and place your cursor on line 10\.
    Place your cursor in the word legend and the **Documentation** window will instantly
    display the documentation for that method, which is part of the Matplotlib library.
    You can see this in *Figure 12**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.22: Click on pretty much anything, and the Documentation panel
    will show documentation on any property or method](img/B19644_12_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.22: Click on pretty much anything, and the Documentation panel will
    show documentation on any property or method'
  prefs: []
  type: TYPE_NORMAL
- en: The thing with these scientific libraries that are popular with data science
    is they can have complicated data structures being used as arguments and return
    types. Having instance reference material is extremely useful. I’d recommend a
    larger screen to truly take advantage of it. My screenshot in *Figure 12**.22*
    is a little crowded only because it’s on a smaller screen with the fonts dialed
    up to make them clear for the printed book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides showing you documentation for wherever you click, the **Documentation**
    panel will update as you type your code. Not only do you get the usual auto-completion,
    but you see the full documentation at the same time. The **Document** panel has
    a few configuration options reached by clicking the three vertical dots at the
    top of the panel, shown in *Figure 12**.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.23: There are a few configuration options for the Documentation
    panel found beneath the menu at the top of the panel](img/B19644_12_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.23: There are a few configuration options for the Documentation panel
    found beneath the menu at the top of the panel'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will examine a unique feature in PyCharm when it comes to executing
    Python code, that is, implementing code cells.
  prefs: []
  type: TYPE_NORMAL
- en: Using code cells in PyCharm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyCharm’s code cells are a way to separate and execute different portions of
    a large Python program sequentially. You’ll recognize this feature if you have
    ever used the **Jupyter Notebook**. Code cells in PyCharm are basically a trimmed-down
    version of that tool. PyCharm also has direct support for Jupyter notebooks, but
    I’m saving that for the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The needs of data science are different from the needs of a general software
    developer. A data scientist isn’t worried about writing shipable code with the
    same architectural and scaling constraints as a software developer. They also
    don’t deal with your typical variables that are mostly primitives, or smallish
    objects with a handful of properties and methods. They deal in volume, and the
    programs they write are algorithmic. Don’t get overly wrapped up around the word
    **algorithm**. An *algorithm* is simply a set of steps that make up a process.
    Sure, the algorithm that powers Google’s search business, PageRank, is an amazing
    feat of proprietary engineering. It’s an algorithm, but so is the recipe for a
    good old peanut butter and jelly sandwich. Complexity isn’t a requirement, in
    fact the best algorithms are usually simple.
  prefs: []
  type: TYPE_NORMAL
- en: Data scientists study problems by collecting, filtering, and processing large
    amounts of data using a series of aggregate steps. Each step is very discrete
    with an input and an output. Code cells make it easy to construct and work with
    these discrete steps rather than having to deal with complicated code structures
    the way a regular software developer would.
  prefs: []
  type: TYPE_NORMAL
- en: Using PyCharm code cells
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Code cells in PyCharm are defined by lines of code that start with the following
    characters: `#%%`. These lines are treated as standard comments in the low-level
    execution of Python, but PyCharm will recognize them as code cell separators in
    its editor. Let’s see this feature in action.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s go back to our demo code from earlier and make some small changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Note the addition of the two lines beginning with `#%%`. Those lines define
    our code cells. Moreover, they also serve as regular comments that explain what
    the code block is doing. Now look at how the PyCharm UI has changed. You should
    now see some run buttons appear in the gutter, as shown in *Figure 12**.24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.24: Run buttons appear in the gutter in response to the special
    comment format](img/B19644_12_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.24: Run buttons appear in the gutter in response to the special comment
    format'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can run each cell and review the result before running the next. If
    we need to make an adjustment in the middle cell, we can re-run that cell and
    those that are subsequent. When you click the run buttons, the code is being executed
    in the PyCharm console. If your console isn’t visible, you can get to it by clicking
    **View** | **Tool Windows** | **Python Console**. With the **Python Console**
    panel open you can inspect the code as it runs, as shown in *Figure 12**.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.25: You can see the code is being run in the console. There is
    an inspection panel allowing you to see what happened after the cell executed](img/B19644_12_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.25: You can see the code is being run in the console. There is an
    inspection panel allowing you to see what happened after the cell executed'
  prefs: []
  type: TYPE_NORMAL
- en: As each step runs, you can see the code execute in the console window. Remember,
    the console is accessing Python REPL, it isn’t a terminal window. We discussed
    this in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052). The **Python Console**
    window has an inspection panel allowing you to inspect state much as you would
    if you were debugging.
  prefs: []
  type: TYPE_NORMAL
- en: Since it is a PyCharm console that is executing your code, if you need to start
    over, you can just kill the console and run your steps again. This will spawn
    a fresh console.
  prefs: []
  type: TYPE_NORMAL
- en: The cell mode plugin
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Earlier, when we were discussing some cool plugins you can use for data science
    work, we installed a plugin called cell mode. The cell mode plugin extends the
    features of code cells.
  prefs: []
  type: TYPE_NORMAL
- en: 'For starters, with the cell mode plugin, you need to use double pound/hashtag
    signs (`##`) instead of the usual `#%%`. When you do this, the plugin takes over
    and gives you some extra run options. Take a look at *Figure 12**.26*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.26: This time when you click you get some additional options](img/B19644_12_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.26: This time when you click you get some additional options'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your run buttons now allow you to run the cell and immediately jump to the
    next, rather than simply stopping at the bottom of the cell you just ran. *Figure
    12**.27* shows you have some additional control at the menu level:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 12.27: The cell mode plugin adds additional menu items to the Code
    menu](img/B19644_12_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.27: The cell mode plugin adds additional menu items to the Code menu'
  prefs: []
  type: TYPE_NORMAL
- en: When you click **Code** | **Cell Mode** you get even more granular run options
    for your code cells. Overall, we can see that this plugin offers all the advantages
    of using Jupyter notebooks without having to actually switch to Jupyter applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A scientific project in PyCharm is created with a general structure that is
    common among projects in real life, including good practices such as a data folder
    that is excluded from version control, the `README.md` file, and the `requirements.txt`
    file. As you can imagine, having to manually create this setup for every project
    can prove to be difficult and time-consuming. This feature helps PyCharm users
    get right down to the development process after the project has been created so
    that they don’t have to worry about taking care of miscellaneous details. This
    will allow us to be faster and more productive in our development workflow.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, PyCharm’s Scientific mode includes various features that support
    the development process of scientific computing or data science projects, namely
    the Documentation and SciView panels. In combination with this mode, you can also
    take advantage of other powerful features, such as code cells and the CSV plugin,
    to streamline various tasks and effectively improve your productivity in data
    science projects.
  prefs: []
  type: TYPE_NORMAL
- en: However, these features only mark the beginning of what PyCharm has to offer
    when assisting us in data-related projects. Building on these topics, in the next
    chapter, we will look into the usage of the SciView panel and Jupyter notebooks,
    which are a big part of the Python data science ecosystem within PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to check out the companion website for the book at [https://www.pycharm-book.com](https://www.pycharm-book.com).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the Markdown language? What purpose does a `README.md` file in a GitHub
    repository serve?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why is the data folder in a scientific project in PyCharm excluded from version
    control?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you turn scientific mode on and off in PyCharm? What effect will this
    have on a given project window?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What features are available within PyCharm’s **Documentation** panel?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are code cells in PyCharm and how can you implement them?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What features are available within the CSV plugin in PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
