- en: Implementing Buttons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will describe the main control elements of a GUI application—**buttons**.
    Buttons are the most commonly used graphical components of any GUI application. The
    different types of buttons provide the user with the option to operate an application
    according to its defined functionality. The user can click on a button to start
    a process and choose the option available, or open the file dialog window. All
    of these actions require an element that will realize these operations. The Qt
    framework, and the corresponding Python bindings (PySide2 and PyQt5), have extensive
    classes for creating buttons for a variety of tasks. These elements are very customizable
    and allow software developers to realize these components in a modern style.
  prefs: []
  type: TYPE_NORMAL
- en: 'The elements that will be covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Buttons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checkbox
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QAbstractButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is an abstract base class that's used with button widgets and provides
    functionality related to buttons in the Qt framework. The buttons described in
    this chapter will inherit this class.
  prefs: []
  type: TYPE_NORMAL
- en: QAbstractButton functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QAbstractButton` inherits the `QWidget` and improves functionality by means
    of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the button, including the setting of text, alignment, or functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAutoExclusive(bool)`: If the parameter is `True`, this enables the autoexclusivity
    of the button. This means that this button is a part of the exclusive button group
    with the same parent group. In the exclusive button group, only a single button
    can be checked at one time and, if a button was checked previously, it automatically
    gets unchecked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAutoRepeat(bool)`: If the parameter is `True`, this enables autorepetition
    for the button when pushed. This is related to buttons that move the sliders,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAutoRepeatDelay(int)`: This sets the delay for the autorepetition of the
    button, or when the repetition will begin after the number of milliseconds specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAutoRepeatInterval(int)`: This sets the interval that will be used for
    the autorepetition of this button, or the interval in milliseconds, as specified
    in the parameter, at which repetition will occur.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setChecked(bool)`: If the parameter is `True`, this sets the button in the
    checked state. This button needs to be capable of being checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setDown(bool)`: If the parameter is `True`, this sets the button to a pushed
    down state.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setIcon(QtGui.QIcon)`: This specifies the icon for the button that will be
    used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setIconSize(QtCore.QSize)`: This sets the size of the icon for the button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setShortcut(QtGui.QKeySequence)`: This sets the mnemonic that will be associated
    with this button, or the keys that will be used together to perform an action
    as keyboard shortcuts.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setText("Okay")`: This sets the text for the button.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the button
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isCheckable()`: This returns `True` if the button is checkable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isChecked()`: This returns `True` if the button was checked and is checkable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isDown()`: This returns `True` if the button is in a pushed down state.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the current values of the button, changes
    in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`animateClick(int)`: This performs the animated click for the button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoExclusive()`: This returns `True` if auto-exclusivity is enabled for this
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoRepeat()`: This returns `True` if auto-repetition is enabled for this
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoRepeatDelay()`: This returns a delay in regard to the auto-repetition
    function of this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`autoRepeatInterval()`: This returns an interval in regard to the auto-repetition
    function of this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`click()`: This performs the clicking of the button. All the signals associated
    with a click on this button are emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`group()`: This returns the group that the button belongs to.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hitButton(QtCore.QPoint)`: This returns `True` if the position specified in
    the parameter is inside the button rectangle; otherwise, it returns `False`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`icon()`: This returns the icon that this button contains, and is of the `QtGui.QIcon`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`iconSize()`: This returns the size of the icon that this button contains,
    and is of the `QtCore.QSize` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`shortcut()`: This returns the keyboard shortcut that is used with this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text()`: This returns the text that''s displayed on this button.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`changeEvent(QtCore.QEvent)`: This handles state changes associated with the
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`checkStateSet()`: This is the virtual handler that''s called when `QAbstractButton.setChecked()`
    is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event(QtCore.QEvent)`: This is the `QtCore.QObject` function that receives
    events to the object, and should return `True` if the event is recognized and
    processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focusOutEvent(QtGui.QFocusEvent)`: This is an event handler that''s designed to receive
    the keyboard focus events for the buttons that are passed with focus event parameters
    when the focus is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focusInEvent(QtGui.QFocusEvent)`: This is an event handler that''s designed to receive
    the keyboard focus events for the buttons that are passed with focus event parameters
    when the focus is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyPressEvent(QtGui.QKeyEvent)`: This is an event handler that''s designed to receive
    key press events for the button, along with the key event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyReleaseEvent(QtGui.QKeyEvent)`: This is an event handler that''s designed to receive
    key release events for the button, along with the key event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s designed to receive
    mouse press events for this button, along with mouse events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s designed to receive
    mouse release events for the button, along with mouse events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`nextCheckState()`: This is the virtual handler that''s called when the button
    is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s designed to receive
    paint events for this button, along with paint events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s designed to receive
    timer events for the button, along with timer events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals for the `QAbstractButton` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clicked(bool)`: This signal is emitted once the button is activated, when
    the shortcut key is typed, or when we call the `click()` or `animateClick()` function.
    The parameter is `True` when checked and `False` if unchecked, if the button is
    checkable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed()`: This signal is emitted when the button is pushed down.'
  prefs: []
  type: TYPE_NORMAL
- en: '`released()`: This signal is emitted when the button is released.'
  prefs: []
  type: TYPE_NORMAL
- en: '`toggled(bool)`: This signal is emitted when the button changes state. The
    parameter is `True` when checked, and `False` if unchecked, if this button is
    checkable.'
  prefs: []
  type: TYPE_NORMAL
- en: QPushButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most commonly used graphical component in the application is the push button.
    The user can click on the button to perform an action or achieve an effect as
    a result of using their favorite app. The Qt framework provides the `QPushButton`
    class for implementing the standard push button in the application and can be
    used with the PySide and PyQt Python bindings. A wide variety of customization
    options give this element a modern style that can be used anywhere in a variety
    of forms. The declaration syntax of the push button in the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: QPushButton functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QPushButton` inherits from the `QAbstractButton` class and improves functionality
    with the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions related to the setting of the parameters/properties in
    relation to the push button:'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.setAutoDefault(bool)`: If the parameter is `True`, this establishes
    this push button as the auto default button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.setDefault(bool)`: If the parameter is `True`, this establishes this
    push button as the default button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.setFlat(bool)`: If the parameter is `True`, this establishes this
    push button as flat.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.setMenu(QtWidgets.QMenu)`: This sets the popup menu specified
    in the parameter in relation to the push button.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return a Boolean value (`bool`) related to the current
    states of the push button:'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.isDefault()`: This returns `True` if this push button is the default
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.isFlat()`: This returns `True` if this push button is flat.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the push button, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.autoDefault()`: This returns `True` if the push button is the
    auto default button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.menu()`: This returns the popup menu of the `QtWidgets.QMenu`
    type associated with this push button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.showMenu()`: This shows the popup menu associated with this push
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.changeEvent(QtCore.QEvent)`: This handles state changes within
    the push button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.enterEvent(QtCore.QEvent)`: This is an event handler that''s designed to receive
    the enter events of the push button that is passed with an event parameter, and
    is sent when the mouse cursor enters the push button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.event(QtCore.QEvent)`: This receives events to the object and
    should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.focusOutEvent(QtGui.QFocusEvent)`: This is an event handler that''s
    designed to receive the keyboard focus events for this push button and are passed
    with event parameters when the focus is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.focusInEvent(QtGui.QFocusEvent)`: This is an event handler that''s
    designed to receive the keyboard focus events for this push button and are passed
    with event parameters when the focus is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.keyPressEvent(QtGui.QKeyEvent)`: This is an event handler that''s
    designed to receive key press events for this push button, with events passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.keyReleaseEvent(QtGui.QKeyEvent)`: This is an event handler that''s
    designed to receive key release events for this push button, with events passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.leaveEvent(QEvent)`: This is an event handler that''s designed to
    receive leave events for this push button, with events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse press events for this push button, with events
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse release events for this push button, with events
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for this push button, with events passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push_button.timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s
    designed to receive timer events for this push button, with events passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QToolButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QToolButton` class constructs the quick-access tool button in the application,
    which is used for the commands or options that are usually defined with the toolbar.
    The declaration syntax for this kind of button is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: QToolButton functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QToolButton` inherits from the `QAbstractButton` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the tool button:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.setArrowType(QtCore.Qt.ArrowType)`: This sets the arrow type for
    this tool button, with the arrow displayed instead of the normal icon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.setAutoRaise(bool)`: If the parameter is `True`, this sets auto-raising
    to be enabled for this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.setDefaultAction(QtWidgets.QAction)`: This sets the default action
    specified in the parameter for this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.setMenu(QtWidgets.QMenu)`: This associates the menu specified
    in the parameter in relation to this tool button. The menu will be displayed according
    to the popup mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.setPopupMode(QtWidgets.QToolButton.ToolButtonPopupMode)`: This
    sets the popup mode for this tool button. The popup modes that are available are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QToolButton.DelayedPopup`—`0`: The menu will be displayed with some
    delay'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QToolButton.MenuButtonPopup`—`1`: The menu will be displayed with
    a special arrow'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QToolButton.InstantPopup`—`2`: The menu will be displayed without
    delay, and an action is not triggered'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tool_button.setToolButtonStyle(QtCore.Qt.ToolButtonStyle)`: This sets the
    style specified in the parameter for this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the tool button, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.arrowType()`: This returns the arrow of the `QtCore.Qt.ArrowType`
    type that is used with this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.autoRaise()`: This returns `True` if the auto-raising function
    is enabled for this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.defaultAction()`: This returns the default action of the `QtWidgets.QAction`
    type that''s used with this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.menu()`: This returns the menu associated with this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.popupMode()`: This returns the mode of the `QtWidgets.QToolButton.ToolButtonPopupMode` type
    that is used with the popup menu of this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.showMenu()`: This shows the popup menu associated with this tool
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.toolButtonStyle()`: This returns the style of the `QtCore.Qt.ToolButtonStyle`
    type that is used with this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.actionEvent(QtGui.QActionEvent)`: This event handler is called
    when actions are changed in relation to this tool button, with events passed in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.changeEvent(QtCore.QEvent)`: This handles state changes associated
    with this tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.enterEvent(QtCore.QEvent)`: This is an event handler that''s designed to
    receive the enter events of this tool button, which are passed with event parameters,
    and are sent when the mouse cursor enters the tool button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.event(QtCore.QEvent)`: This receives events to the object and
    should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.leaveEvent(QEvent)`: This is an event handler that''s designed to
    receive leave events for this tool button, with events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse press events for this tool button, with mouse
    events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler
    that''s designed to receive mouse release events for this tool button, with mouse
    events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.nextCheckState()`: The virtual handler is called in the event
    that the tool button is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for this tool button, with paint events passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s
    designed to receive timer events for this tool button, with timer events passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal for the `QToolButton` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tool_button.triggered(QtWidgets.QAction)`: This signal is emitted when the
    action that''s passed to the parameter is triggered.'
  prefs: []
  type: TYPE_NORMAL
- en: QRadioButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Another kind of button can be implemented within the application, and is known
    as a radio button. This component is an option button, as the user can make a
    choice between different options. Only one radio button of the group that contains
    the radio buttons can be checked at one time. If the radio button is selected
    by the user, other radio buttons within this group will be deselected. The `QRadioButton` class
    inherits from the `QAbstractButton` class and provides functions, signals, and
    events that are represented there. The radio button can also display text and
    icons. The declaration syntax for the radio button in the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The icon for this button can be used like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of text, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The radio button can be styled in the same way as every widget that uses the `setStyleSheet()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: QButtonGroup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class implements the container for groups of buttons. Containers with
    buttons are useful for creating a set of radio buttons with several options or
    check boxes to convey the complexity of the information. This class provides an
    abstract container and does not provide a visual representation. The button group
    manages the states of each button in the group. The declaration syntax for the
    button group in the application is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: QButtonGroup functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QButtonGroup` inherits from the `QObject` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following function is related to the addition of elements to the button
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.addButton(QtWidgets.QAbstractButton, int)`: This adds the button
    specified in the first parameter to this button group with the ID specified in
    the second parameter. If the ID is `1` (the default), the ID will be assigned
    to the button that''s added.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the button group:'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.setExclusive(bool)`: If the parameter is `True`, this sets this
    button group as exclusive. In this case, only one button in this group can be
    checked at any one time.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.setId(QtWidgets.QAbstractButton, int)`: This sets the ID specified
    in the second parameter to the button specified in the first parameter of this
    button group.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the button group, changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.button(int)`: This returns the button with the ID specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttons()`: This returns the list of buttons in this button group.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.checkedButton()`: This returns the checked buttons within this
    button group, or `0` if the group does not contain the checked buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.checkedId()`: This returns the IDs of the checked buttons within
    this button group, or `-1` if the group does not contain the checked buttons.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.exclusive()`: This returns `True` if the button group is exclusive.
    This means that only one button in this group can be checked at any one time.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.id(QtWidgets.QAbstractButton)`: This returns the ID of the button
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.removeButton(QtWidgets.QAbstractButton)`: This removes the button
    specified in the parameter from this button group.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals for the `QButtonGroup` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonClicked(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button specified in the parameter is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonClicked(int)`: This signal is emitted when the button with
    the ID specified in the parameter is clicked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonPressed(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button specified in the parameter is pushed down.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonPressed(int)`: This signal is emitted when the button with
    the ID specified in the parameter is pushed down.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonReleased(QtWidgets.QAbstractButton)`: This signal is emitted
    when the button specified in the parameter is released.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonReleased(int)`: This signal is emitted when the button
    with the ID specified in the parameter is released.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonToggled(QtWidgets.QAbstractButton, bool)`: This signal
    is emitted when the button specified in the first parameter is toggled. The second
    parameter is `True` if the button is checked, or `False` if unchecked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`button_group.buttonToggled(int, bool)`: This signal is emitted when the button
    with the ID specified in the first parameter is toggled. The second parameter
    is `True` if the button is checked, or `False` if unchecked.'
  prefs: []
  type: TYPE_NORMAL
- en: Buttons example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, let''s try and create a push button that will be used with the application.
    Other types of buttons, in addition to the ones described here, will be implemented,
    as required, later in this book. By way of an example, let''s create the push
    button:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, construct the `UBut1` class in both `u_style.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have added various parameters to the `__init__()` function of the `UBut1`
    class. The maximum width and height can be adjusted with respect to the appearance
    of the button in the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `but_style()` function, which will be used for styling this button, to
    the `UBut1`class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This function will be used to avoid repetition in the code and will style this
    button if events occur. Add the functions that will be used with events that occur; in
    the first instance, we will add the function that handles button resize events,
    or when the button is resized, depending on the window size, and changes the font
    of the text of this button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the function that handles resize events:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This function handles the resize event with the `event` passed in the parameter.
    It changes the font of the button, depending on the button's size.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `enterEvent` function, which handles the enter event of the button
    when the mouse enters the button area. The `enterEvent` function is added as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This function handles the enter events of this button and changes the style
    accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `leaveEvent` function for this button''s leave events when the mouse
    pointer leaves this button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This function handles the leave events of this button and changes the style
    accordingly. This is an example of an attempt to create a class that provides
    the push button for a variety of uses. Or, in other words, it gives the user the
    opportunity to style the button component, depending on the application tasks
    and functionality. All of these styling parameters can be changed within this
    class, as well as outside, for example, when used in the main application or elsewhere.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the `UBut1` class to the main application class in the `u_app.py` files with
    some customized parameters. Follow these steps to do so:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following line to the `import` section of the `u_app.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, we need to add this button to the `UApp` class, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: We have added the button instance and created the layout that will contain this
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the layout that was created with this button to the layout of the
    second frame:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ee6e5e9-3a6a-426f-8181-f77682cc109f.png)'
  prefs: []
  type: TYPE_IMG
- en: In the right-bottom corner, we can see the `Ok` button. This will provide a
    hover effect of being a lighter green color if the mouse pointer rolls over the
    button.
  prefs: []
  type: TYPE_NORMAL
- en: QCheckBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Just like the radio button, the checkbox is an option button that allows the
    user to make a choice. These buttons are usually implemented in combination with
    the features that will be used with a particular action. These options can be
    switched on or off as per the user''s preference. The checkbox can display the
    text of the option, as well as the icon. The declaration syntax for this kind
    of button is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: QCheckBox functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QCheckBox` inherits from the `QAbstractButton` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.setCheckState(QtCore.Qt.CheckState)`: This sets the check state
    for this checkbox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.setTristate(bool)`: This sets the three-state availability that
    will be used with this checkbox. The states that can be used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Unchecked`: The checkbox is unchecked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.PartiallyChecked`: The checkbox is partially checked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.Checked`: The checkbox is checked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the checkbox states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.isTristate()`: This returns `True` if this checkbox has three states.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to the returns of the current values of the checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.checkState()`: This returns the check state of the `QtCore.Qt.CheckState`
    type for this checkbox.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.event(QtCore.QEvent)`: This is the `QtCore.QObject` function that
    receives events to the object and should return `True` if the event is recognized
    and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for the checkbox, with events passed in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for the checkbox, with events passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal for the `QCheckBox` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_box.stateChanged(int)`: This signal is emitted when the state of this
    checkbox is changed, with states passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: Additional components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Alongside what we've covered in this chapter, let's consider sliders and other
    useful components that can be used with GUI applications. The different types
    of sliders make it possible to provide the functionality with some additional
    special actions, such as scrolling windows and sliding values.
  prefs: []
  type: TYPE_NORMAL
- en: QAbstractSlider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This class is a super class for components, including the scrollbar, slider,
    and dial. `QAbstractSlider` inherits from the `QWidget` class and improves functionality
    by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting the parameters/properties,
    including size, range, and functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setInvertedAppearance(bool)`: If the parameter is `True`, the inherited component
    will show its values inverted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setInvertedControls(bool)`: If the parameter is `True`, this sets the wheel
    and key events as inverted for the component that''s used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setMaximum(int)`: This sets the maximum value specified in the parameter for
    the component that''s used. In the case of the slider, this will be the maximum
    value in the range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setMinimum(int)`: This sets the minimum value specified in the parameter for
    the component that''s used. In the case of the slider, this will be the minimum
    value in the range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setOrientation(QtCore.Qt.Orientation)`: This sets the orientation for the
    used component as `QtCore.Qt.Horizontal` or `QtCore.Qt.Vertical` (the default).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setPageStep(int)`: This sets the page step specified in the parameter that
    will be used with this component.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setRange(int, int)`: This sets the range values for the component used, from
    minimum (the first parameter) to maximum (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setRepeatAction(QtWidgets.QAbstractSlider.SliderAction, int, int)`: This sets
    the action (the first parameter) that will be triggered at intervals (the third
    parameter), or with a delay (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSingleStep(int)`: This sets the single step for the component used, typically
    by responding to pushing an arrow key of one of the components.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSliderDown(bool)`: If the parameter is `True`, the slider will be pulled down.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSliderPosition(int)`: This sets the current position specified in the parameter
    for the slider component.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setTracking(bool)`: If the parameter is `True`, this sets the tracking as
    enabled. If this property is enabled, the component emits the `valueChanged()`
    signal when dragged. In another instance, this signal will only be emitted when
    released.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setValue(int)`: This sets the current value specified in the parameter of
    the component in the range. For example, the slider''s handle will move to this
    value.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These function returns a Boolean value (`bool`) related to states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`isSliderDown()`: This returns `True` if the component is pressed down'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values,
    changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`invertedAppearance()`: This returns `True` if the inherited component shows
    its values inverted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`invertedControls()`: This returns `True` if the wheel and key events are inverted
    for the component being used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximum()`: This returns the maximum value of the integer type for the component
    being used. In the case of the slider, this will be the maximum value in the range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimum()`: This returns the minimum value of the integer type for the component
    being used. In the case of the slider, this will be the minimum value in the range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`orientation()`: This returns the orientation of the `QtCore.Qt.Orientation`
    type for the component being used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pageStep()`: This returns the page step, as an integer value, of the component
    being used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`repeatAction()`: This returns the repeat action of the `QtWidgets.QAbstractSlider.SliderAction`
    type for the component being used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`singleStep()`: This returns the single step of the component being used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sliderChange(QtWidgets.QAbstractSlider.SliderChange)`: This tracks slider
    changes with the available parameters, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractSlider.SliderRangeChange`—`0`: Range changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractSlider.SliderOrientationChange`—`1`: Orientation changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractSlider.SliderStepsChange`—`2`: Step changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QAbstractSlider.SliderValueChange`—`3`: Value changes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sliderPosition()`: This returns the current position of the slider component
    in the range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`triggerAction(QtWidgets.QAbstractSlider.SliderAction)`: This triggers the
    slider action specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`value()`: This returns the current value of the slider component.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events such as event handlers, and
    so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`changeEvent(QtCore.QEvent)`: This handles state changes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event(QtCore.QEvent)`: This is the `QtCore.QObject` function, which receives
    events to the object and should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyPressEvent(QtGui.QKeyEvent)`: This is an event handler that''s designed to receive
    key press events for the component being used, with a key event passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`timerEvent(QtCore.QTimerEvent)`: This is an event handler that''s designed to
    receive timer events for the component being used, with a timer event passed in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheelEvent(QtGui.QWheelEvent)`: This is an event handler that''s designed to
    receive mouse wheel events for the component being used, with a wheel event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals for the `QAbstractSlider` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`actionTriggered(int)`: This signal is emitted when the slider is triggered
    by an action that''s passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rangeChanged(int, int)`: This signal is emitted when the slider''s range has
    been modified with new minimum and maximum range parameters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sliderMoved(int)`: This signal is emitted when the slider moves and `sliderDown()`
    is `True`, with a new slider position passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sliderPressed()`: This signal is emitted when the slider is pressed, also
    programmatically with `setSliderDown(True)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sliderReleased()`: This signal is emitted when the slider is released, also
    programmatically with `setSliderDown(True)`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`valueChanged(int)`: This signal is emitted when the slider value is revised,
    with new values passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QSlider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a vertical or horizontal slider in the GUI application
    that can be used to move a slider handle along a groove and translates the position
    of the handle into an integer value. `QSlider` inherits from the `QAbstractSlider`
    class. The declaration syntax for the slider is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The `QSlider` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting the parameters/properties in
    relation to the slider:'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.setTickInterval(int)`: This sets the interval between the tick marks
    of this slider.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.setTickPosition(QtWidgets.QSlider.TickPosition)`: This sets the tick
    mark position of this slider. The available parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QSlider.NoTicks`—`0`: No tick marks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSlider.TicksBothSides`—`3`: Tick marks on both sides.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSlider.TicksAbove`—`1`: Tick marks above (horizontal).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSlider.TicksBelow`—`2`: Tick marks below (horizontal).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSlider.TicksLeft`—`TicksAbove`: Tick marks left (vertical).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QSlider.TicksRight`—`TicksBelow`: Tick marks right (vertical).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that return the current values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.tickInterval()`: This returns the interval between the tick marks of
    the slider.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.tickPosition()`: This returns the tick mark position of the `QtWidgets.QSlider.TickPosition`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.event(QtCore.QEvent)`: This is the `QtCore.QObject` function, which
    receives events to the object and should return `True` if the event is recognized
    and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for the slider, with a mouse event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse press events for the slider, with a mouse event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse release events for the slider, with a mouse event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`slider.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s designed to
    receive paint events for the slider, with a paint event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QDial
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides a rounded range component that can be wrapped around in
    a range of `0` to `359` degrees. `QDial` inherits from the `QAbstractSlider` class.
    The declaration syntax for the dial is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The `QDial`  class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters/properties in relation
    to the dial:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.setNotchesVisible(bool)`: If the parameter is `True`, this sets the notches
    of this dial as being visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.setNotchTarget(float)`: This sets the target number in the pixels specified
    in the parameter between each notch of this dial.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.setWrapping(bool)`: If the parameter is `True`, this sets wrapping as
    enabled for this dial.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.notchesVisible()`: This returns `True` if the notches are visible on
    this dial.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.notchSize()`: This returns the current size of the dial''s notches.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.notchTarget()`: This returns the target number of pixels as float values,
    and are used between the notches of this dial.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.wrapping()`: This returns `True` if the wrapping is enabled for this
    dial.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to events such as event handlers, and
    so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for this dial, with a mouse event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse press events for this dial, with a mouse event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse release events for this dial, with a mouse event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s designed to
    receive paint events for this dial, with a paint event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dial.resizeEvent(QtGui.QResizeEvent)`: This is an event handler that''s designed to
    receive widget resize events for this dial, with a resize event passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QProgressBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The progress bar provides a horizontal or vertical component to indicate the
    operation''s progress. This can be implemented in the application. The declaration
    syntax for the application as is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '`QProgressBar` inherits from the `QWidget` class and improves functionality
    by means of the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the setting of the parameters/properties
    in relation to the progress bar:'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment that
    will be used with the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setFormat("%p%")`: This sets the format for the text that will be
    used with progression. The available formats are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`"%p%"`: The values will be replaced by the percentage (the default)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"%v%"`: The values will be replaced by the current value'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"%m%"`: The values will be replaced by the total number of completed steps'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress.setInvertedAppearance(bool)`: If the parameter is `True`, the bar
    will display its progress as inverted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setMaximum(int)`: This sets the maximum value for this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setMinimum(int)`: This sets the minimum value for this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setOrientation(QtCore.Qt.Orientation)`: This sets the orientation
    of this progress bar. In the parameter, the `QtCore.Qt.Vertical` or `QtCore.Qt.Horizontal`
    (the default) orientations can be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setRange(int, int)`: This sets the range for the values of the progress
    bar, with the minimum (the first parameter) and maximum (the second parameter)
    specified. By using `setRange(0, 0)`, the progress bar will be set to an indeterminate
    state.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setTextDirection(QtWidgets.QProgressBar.Direction)`: This sets the
    direction specified in the parameter for the text displayed with this progress
    bar. The available directions for the vertical progress bar are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QProgressBar.TopToBottom`—`0`: The text will be rotated by `90`
    degrees clockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QProgressBar.BottomToTop`—`1`: The text will be rotated by `90`
    degrees counter-clockwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress.setTextVisible(bool)`: If the parameter is `True`, the current completed
    percentage will be displayed through this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.setValue(int)`: This sets the current value specified in the parameter
    for this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.isTextVisible()`: This returns `True` if the current completed percentage
    is displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to the returns of the current values, changes in
    functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.alignment()`: This returns the alignment of the `QtCore.Qt.Alignment`
    type that will be used with this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.format()`: This returns the string with the format that will be used
    to generate the text displayed in the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.maximum()`: This returns the maximum value of the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.minimum()`: This returns the minimum value of the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.orientation()`: This returns the orientation of the `QtCore.Qt.Orientation`
    type for the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.reset()`: This will reset the progress bar. The progress bar does
    not progress and rewinds.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.resetFormat()`: This will reset the format of the text used with
    the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.text()`: This returns the text displayed with this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.value()`: This returns the current value of this progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events such as event handlers, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.event(QtCore.QEvent)`: This receives events to the object and should
    return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.mouseMoveEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse move events for the progress bar, with a mouse event
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.mousePressEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse press events for the progress bar, with a mouse event
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.mouseReleaseEvent(QtGui.QMouseEvent)`: This is an event handler that''s
    designed to receive mouse release events for the progress bar, with a mouse event
    passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`progress.paintEvent(QtGui.QPaintEvent)`: This is an event handler that''s
    designed to receive paint events for this progress bar, with a paint event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal for the `QProgressBar` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`valueChanged(int)`: This signal is emitted when the progress bar value has
    changed, with the new value passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QProgressBar example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we can create the progress bar for the application. This will indicate
    the progress of certain operations that will be run. To do this, create a class
    named `UProgress` in the `u_style.py` files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UProgress` class for the progress bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: We have successfully added the styling properties for the progress bar. These
    can be reimplemented in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the `pgrs_style()` function  to this class. This will be used to
    style the progress bar:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This function will restyle the progress bar and is dependent on certain events.
    The handlers of these events can be added later. Now, we need to realize this
    progress bar in the GUI by adding some classes to the `u_app.py` files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `UProgress` class to the import section:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the progress bar to the `UApp` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'We are using the `setRange()` method of the bar to set the progress in indeterminate
    mode. When we run the `u_app.py` file, we will see the following result (the progress
    bar slides indefinitely in indeterminate mode):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5b3516fc-f18d-427e-a051-d8792f855b20.png)'
  prefs: []
  type: TYPE_IMG
- en: We added the progress bar below the button. At the moment, it is in an indeterminate
    state.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter demonstrated the basic features and properties of the most popular
    components that can be used in the GUI application. These elements are buttons,
    as well as some controls and indication bars. Not all of them were covered in
    our examples, but they can be used and added later, as required, in the implementation
    of the functionality to the app.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter draws a line under the description of the main components of the
    GUI application. In the next chapter, we will dive into the basics of graphics
    in our GUI application.
  prefs: []
  type: TYPE_NORMAL
