- en: '20'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '20'
- en: Remote Procedure Calls in Odoo
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Odoo 中的远程过程调用
- en: The Odoo server supports **remote procedure calls** (**RPCs**), which means
    that you can connect Odoo instances from external applications. An example is
    if you want to show the status of a delivery order in Fan Android application
    that is written in Java Here, you can fetch the delivery status from Odoo via
    RPC. With the Odoo RPC API, you can perform any CRUD operations on a database.
    Odoo RPC is not limited to CRUD operations; you can also invoke public methods
    of any model. Of course, you will need to have proper access to rights to perform
    these operations because RPC respects all of the access rights and record rules
    you have defined in your database. Consequently, it is very safe to use because
    the RPC respects all access rights and record rules. Odoo RPC is not platform-dependent,
    so you can use it on any platform, including Odoo.sh, online, or self-hosted platforms.
    Odoo RPC can be used with any programming language, so you can integrate Odoo
    with any external application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 服务器支持 **远程过程调用**（**RPC**），这意味着您可以从外部应用程序连接 Odoo 实例。例如，如果您想在用 Java 编写的 Fan
    Android 应用程序中显示发货订单的状态，您可以通过 RPC 从 Odoo 获取发货状态。使用 Odoo RPC API，您可以在数据库上执行任何 CRUD
    操作。Odoo RPC 不仅限于 CRUD 操作；您还可以调用任何模型的公共方法。当然，您需要适当的访问权限来执行这些操作，因为 RPC 尊重您在数据库中定义的所有访问权限和记录规则。因此，它非常安全，因为
    RPC 尊重所有访问权限和记录规则。Odoo RPC 不依赖于平台，因此您可以在任何平台上使用它，包括 Odoo.sh、在线或自托管平台。Odoo RPC
    可以与任何编程语言一起使用，因此您可以将 Odoo 集成到任何外部应用程序中。
- en: 'Odoo provides two types of RPC API: XML-RPC and JSON-RPC. In this chapter,
    we will learn how to use these RPCs from an external program. Finally, you will
    learn how to use Odoo RPC through OCA’s `odoorpc` library.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 提供两种类型的 RPC API：XML-RPC 和 JSON-RPC。在本章中，我们将学习如何从外部程序使用这些 RPC。最后，您将学习如何通过
    OCA 的 `odoorpc` 库使用 Odoo RPC。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: Logging in to/connecting Odoo with XML-RPC
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 登录/连接 Odoo
- en: Searching/reading records using XML-RPC
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 搜索/读取记录
- en: Creating/updating/deleting records using XML-RPC
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 创建/更新/删除记录
- en: Calling methods using XML-RPC
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 调用方法
- en: Logging in to/connecting Odoo with JSON-RPC
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON-RPC 登录/连接 Odoo
- en: Fetching/searching records using JSON-RPC
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON-RPC 获取/搜索记录
- en: Creating/updating/deleting records using JSON-RPC
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON-RPC 创建/更新/删除记录
- en: Calling methods using JSON-RPC
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 JSON-RPC 调用方法
- en: The OCA odoorpc library
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OCA odoorpc 库
- en: Generating API keys
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成 API 密钥
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will be using the `my_hostel` module, which we created
    in [*Chapter 19*](B20997_19.xhtml#_idTextAnchor1030), *Managing, Deploying, and
    Testing with Odoo.sh*. You can find the same initial `my_hostel` module in the
    GitHub repository: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter20](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter20).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用我们在 [*第 19 章*](B20997_19.xhtml#_idTextAnchor1030) 中创建的 `my_hostel`
    模块，*使用 Odoo.sh 进行管理、部署和测试*。您可以在 GitHub 仓库中找到相同的初始 `my_hostel` 模块：[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter20](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter20)。
- en: Here, we will not Introduce a new language as you may not be familiar with it.
    We will continue using Python to access the RPC API. You can use another language
    if you want to, as the same procedure can be applied in any language to access
    the RPC.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们不会介绍一种新的语言，因为您可能不熟悉它。我们将继续使用 Python 来访问 RPC API。如果您想使用其他语言，也可以，因为相同的程序可以在任何语言中应用以访问
    RPC。
- en: To connect Odoo through the RPC, you will need a running Odoo instance to connect
    with. Throughout this chapter, we will assume that you have the Odoo server running
    on `http://localhost:8017`, that you called the `cookbook_17e` database, and that
    you have installed the `my_hostel` module therein. Note that you can connect any
    valid IP or domain through the RPC.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 RPC 连接 Odoo，您需要一个正在运行的 Odoo 实例来连接。在本章中，我们将假设您有一个运行在 `http://localhost:8017`
    的 Odoo 服务器，您调用了 `cookbook_17e` 数据库，并在其中安装了 `my_hostel` 模块。请注意，您可以通过 RPC 连接到任何有效的
    IP 或域名。
- en: Logging in to/connecting Odoo with XML-RPC
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 登录/连接 Odoo
- en: In this recipe, we will carry out user authentication through RPC to check whether
    the credentials (server_url, db_name, username, and password) supplied are valid.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个食谱中，我们将通过 RPC 执行用户身份验证，以检查提供的凭据（服务器_url、db_name、username 和 password）是否有效。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To connect an Odoo instance through RPC, you will need a running Odoo instance
    to connect with. We will assume that you have the Odoo server running on `http://localhost:8017`
    and that you have installed the `my_hostel` module.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过 RPC 连接到 Odoo 实例，您需要一个正在运行的 Odoo 实例来连接。我们将假设您在 `http://localhost:8017` 上运行了
    Odoo 服务器，并且您已安装了 `my_hostel` 模块。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to carry out user authentication through RPC:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以通过 RPC 进行用户身份验证：
- en: Add the `odoo_authenticate.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `odoo_authenticate.py` 文件。您可以将此文件放在任何您想要的位置，因为 RPC 程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE0]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Run the following Python script from the Terminal with the following command:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从终端运行以下 Python 脚本：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This will print a success message with the user ID if you have provided a valid
    login name and password.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您提供了有效的登录名和密码，它将打印一个包含用户 ID 的成功消息。
- en: How it works...
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we used the Python `xmlrpc` library to access Odoo instances
    through XML-RPC. This is a standard Python library, and you do not have to install
    anything else to use it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们使用了 Python 的 `xmlrpc` 库通过 XML-RPC 访问 Odoo 实例。这是一个标准的 Python 库，您不需要安装任何其他东西来使用它。
- en: For authentication, Odoo provides XML-RPC on the `/xmlrpc/2/common` endpoint.
    This endpoint is used for meta methods, which do not require authentication. The
    `authentication()` method itself is a public method, so it can be called publicly.
    The `authentication()` method accepts four arguments—database name, username,
    password, and user agent environment. The user agent environment is a compulsory
    argument, but if you do not want to pass the user agent parameter, at least pass
    the empty dictionary.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 对于身份验证，Odoo 在 `/xmlrpc/2/common` 端点上提供 XML-RPC。此端点用于元方法，不需要身份验证。`authentication()`
    方法本身是一个公开方法，因此可以公开调用。`authentication()` 方法接受四个参数——数据库名称、用户名、密码和用户代理环境。用户代理环境是一个必填参数，但如果您不想传递用户代理参数，至少传递一个空字典。
- en: When you execute the `authenticate()` method with all valid arguments, it will
    make a call to the Odoo server and perform authentication. It will then return
    the user ID, provided the given login ID and password are correct. It will return
    `False` if the user is not present or if the password is incorrect.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用所有有效参数执行 `authenticate()` 方法时，它将对 Odoo 服务器进行调用并执行身份验证。如果提供的登录 ID 和密码正确，它将返回用户
    ID。如果用户不存在或密码不正确，它将返回 `False`。
- en: You need to use the `authenticate()` method before accessing any data through
    RPC. This is because accessing data with the wrong credentials will generate an
    error.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在通过 RPC 访问任何数据之前，您需要使用 `authenticate()` 方法。这是因为使用错误的凭证访问数据将生成错误。
- en: Important note
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Odoo’s online instances `(*.odoo.com`) use OAuth authentication, so the local
    password is not set on the instance. To use XML-RPC on these instances, you will
    need to set the user’s password manually from the **Settings** | **Users** | **Users**
    menu of your instance.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 的在线实例（`*.odoo.com`）使用 OAuth 身份验证，因此实例上不设置本地密码。要在这些实例上使用 XML-RPC，您需要从实例的
    **设置** | **用户** | **用户** 菜单手动设置用户的密码。
- en: Additionally, the methods used to access data require a user ID instead of a
    username, so the `authenticate()` method is needed to get the ID of the user.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，用于访问数据的方法需要用户 ID 而不是用户名，因此需要 `authenticate()` 方法来获取用户的 ID。
- en: There’s more...
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'The `/xmlrpc/2/common` endpoint provides one more method: `version()`. You
    can call this method without credentials. It will return the version information
    of the Odoo instance. The following is an example of the `version()` method usage:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`/xmlrpc/2/common` 端点提供了一种额外的方法：`version()`。您可以在没有凭证的情况下调用此方法。它将返回 Odoo 实例的版本信息。以下是一个
    `version()` 方法使用的示例：'
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding program will generate the following output:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序将生成以下输出：
- en: '[PRE3]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This program will print version information based on your server.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序将根据您的服务器打印版本信息。
- en: Searching/reading records using XML-RPC
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 XML-RPC 搜索/读取记录
- en: In this recipe, we will see how you can fetch the data from an Odoo instance
    through RPC. The user can access most data, except data that are restricted by
    the security access control and record rules. RPC can be used in many situations,
    such as collecting data for analysis, manipulating a lot of data at once, or fetching
    data for display in another software/system. There are endless possibilities,
    and you can use RPCs whenever necessary.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将了解如何通过 RPC 从 Odoo 实例获取数据。用户可以访问大部分数据，除了那些受安全访问控制和记录规则限制的数据。RPC 可以用在许多情况下，例如收集数据进行分析、一次性操作大量数据或获取数据以在其他软件/系统中显示。可能性无穷无尽，你可以在需要时随时使用
    RPC。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备中
- en: We will create a Python program to fetch the room data from the `hostel.room`
    model. Make sure you have installed the `my_hostel` module and that the server
    is running on `http://localhost:8017`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 Python 程序来从 `hostel.room` 模型获取房间数据。确保你已经安装了 `my_hostel` 模块，并且服务器正在 `http://localhost:8017`
    上运行。
- en: How to do it...
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to fetch a room’s information through RPC:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤通过 RPC 获取房间信息：
- en: Add the `rooms_data.py` file. You can place this file anywhere you want because
    the RPC program will work independently.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `rooms_data.py` 文件。你可以将此文件放置在任何你想要的位置，因为 RPC 程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the Python script from the Terminal with the following command:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从终端运行 Python 脚本：
- en: '[PRE5]'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The preceding program will fetch the room data and give you the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个程序将获取房间数据并给出以下输出：
- en: '[PRE6]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The output shown in the preceding screenshot is based on data in my database.
    The data in your Odoo instance may be different data, so the output will also
    be different.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 之前截图中的输出是基于我的数据库中的数据。你的 Odoo 实例中的数据可能不同，因此输出也将不同。
- en: How it works...
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to access the room data, you first have to authenticate. At the beginning
    of the program, we did authentication in the same way as we did in the *Logging
    in to/connecting Odoo with XML-RPC* recipe earlier. If you provided valid credentials,
    the `authentication()` method will return the `id` of the user’s record. We will
    use this user ID to fetch the room data.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问房间数据，你首先必须进行身份验证。在程序开始时，我们像在之前的 *通过 XML-RPC 登录/连接 Odoo* 菜谱中做的那样进行了身份验证。如果你提供了有效的凭证，`authentication()`
    方法将返回用户记录的 `id`。我们将使用此用户 ID 来获取房间数据。
- en: 'The `/xmlrpc/2/object` endpoint is used for database operation. In our recipe,
    we used the `object` endpoint to fetch the room data. In contrast to the `/xmlrpc/2/common`
    endpoint, this endpoint does not work without credentials. With this endpoint,
    you can access the public method of any model through the `execute_kw()` method.
    `execute_kw()` takes the following arguments:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`/xmlrpc/2/object` 端点用于数据库操作。在我们的菜谱中，我们使用了 `object` 端点来获取房间数据。与 `/xmlrpc/2/common`
    端点不同，此端点没有凭证将无法工作。使用此端点，你可以通过 `execute_kw()` 方法访问任何模型的公共方法。`execute_kw()` 接受以下参数：'
- en: Database name
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库名称
- en: User ID (we get this from the `authenticate()` method)
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户 ID（我们从 `authenticate()` 方法中获取）
- en: Password
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Model name, for example, `res.partner` or `hostel.room`
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型名称，例如，`res.partner` 或 `hostel.room`
- en: Method name, for example, `search`, `read`, or `create`
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法名称，例如，`search`、`read` 或 `create`
- en: An array of positional arguments
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置参数数组
- en: A dictionary for keyword arguments (optional)
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数的字典（可选）
- en: In our example, we want to fetch the room’s information. This can be done through
    a combination of `search()` and `read()`. Room information is stored in the `hostel.room`
    model, so in `execute_kw()`, we use `hostel.room` as the model name and `search`
    as the method name. This will call the ORM’s `search` method and return record
    IDs. The only difference here is that the ORM’s `search` method returns a record
    set, while this search method returns a list of IDs.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们想要获取房间信息。这可以通过 `search()` 和 `read()` 的组合来完成。房间信息存储在 `hostel.room`
    模型中，所以在 `execute_kw()` 中，我们使用 `hostel.room` 作为模型名称，`search` 作为方法名称。这将调用 ORM 的
    `search` 方法并返回记录 ID。这里唯一的区别是 ORM 的 `search` 方法返回一个记录集，而此搜索方法返回一个 ID 列表。
- en: In `execute_kw()`, you can pass arguments and keyword arguments for the method
    provided. The `search()` method accepts a domain as a positional argument, so
    we passed a domain to filter rooms. The `search` method has other optional keyword
    arguments, such as `limit`, `offset`, `count`, and `order`, from which we have
    used the `limit` parameter to fetch only five records. This will return the list
    of room IDs whose names contain the `Standard` strings.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`execute_kw()`中，你可以为提供的方法传递参数和关键字参数。`search()`方法接受一个域作为位置参数，因此我们传递了一个域来过滤房间。`search`方法还有其他可选的关键字参数，如`limit`、`offset`、`count`和`order`，我们使用了`limit`参数来获取仅五条记录。这将返回包含名称中包含`Standard`字符串的房间ID的列表。
- en: However, we need to fetch room data from the database. We will use the `read`
    method to do this. The `read` method accepts a list of IDs and fields to complete
    the task. At the end of *step 3*, we used the list of room IDs that we received
    from the `search` method and then used the room IDs to fetch the `name` and `room_no`
    of the rooms. This will return the list of the dictionary with the room’s information.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们需要从数据库中获取房间数据。我们将使用`read`方法来完成这项任务。`read`方法接受一个ID列表和字段列表来完成任务。在*步骤3*的末尾，我们使用了从`search`方法接收到的房间ID列表，然后使用房间ID来获取房间的`name`和`room_no`。这将返回包含房间信息的字典列表。
- en: Important note
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that the arguments and keyword arguments passed in `execute_kw()` are based
    on the passed method. You can use any public ORM method via `execute_kw()`. You
    just need to give the method a name, the valid arguments, and the keyword arguments.
    These arguments are going to be passed on in the method in the ORM.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`execute_kw()`中传递的参数和关键字参数基于传递的方法。你可以通过`execute_kw()`使用任何公共ORM方法。你只需要给方法一个名称，有效的参数和关键字参数。这些参数将被传递到ORM中的方法。
- en: There’s more...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The data fetched through a combination of the `search()` and `read()` methods
    is slightly time-consuming because it will make two calls. `search_read` is an
    alternative method for fetching data. You can search and fetch the data in a single
    call. Here is the alternative way to fetch a room’s data with `search_read()`.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`search()`和`read()`方法的组合获取的数据稍微有些耗时，因为它将进行两次调用。`search_read`是获取数据的另一种方法。你可以通过单个调用搜索和获取数据。以下是使用`search_read()`获取房间数据的替代方法。
- en: Important note
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'The `read` and `search_read` methods will return `id` fields even if the `id`
    field is not requested. Furthermore, for the `many2one` field, you will get an
    array made up of the `id` and display name. For example, the `create_uid` `many2one`
    field will return data like this: `[07, ''``Deepak ahir'']`.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`read`和`search_read`方法即使在未请求`id`字段的情况下也会返回`id`字段。此外，对于`many2one`字段，你将得到一个由`id`和显示名称组成的数组。例如，`create_uid`
    `many2one`字段将返回如下数据：`[07, ''``Deepak ahir'']`。'
- en: 'It will return the same output as in the previous example:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回与上一个示例相同的输出：
- en: '[PRE7]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The `search_read` methods improve performance significantly as you get your
    result in one RPC call, so use the `search_read` method instead of a combination
    of the `search` and `read` methods.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_read`方法显著提高了性能，因为你可以在一个RPC调用中获取结果，所以使用`search_read`方法而不是`search`和`read`方法的组合。'
- en: Creating/updating/deleting records using XML-RPC
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XML-RPC创建/更新/删除记录
- en: In the previous recipe, we saw how to search and read data through RPC. In this
    recipe, we will perform the remaining **CRUD** operations through RPC, which are
    **create**, **update** (write), and **delete** (unlink).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们看到了如何通过RPC搜索和读取数据。在这个菜谱中，我们将通过RPC执行剩余的**CRUD**操作，这些操作包括**创建**、**更新**（写入）和**删除**（解除链接）。
- en: Getting ready
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create the Python program to `create`, `write`, and `unlink` data in
    the `hostel.room` model. Make sure you have installed the `my_hostel` module and
    that the server is running on `http://localhost:8017`.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个Python程序，在`hostel.room`模型中`create`、`write`和`unlink`数据。确保你已经安装了`my_hostel`模块，并且服务器正在`http://localhost:8017`上运行。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to create, write, and update a room’s information
    through RPC:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤通过RPC创建、写入和更新房间信息：
- en: Add the `rooms_operation.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`rooms_operation.py`文件。你可以将此文件放在任何你想要的位置，因为RPC程序将独立工作。
- en: 'Add the following code to the `rooms_operation.py` file:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`rooms_operation.py`文件中：
- en: '[PRE8]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Run the Python script from the Terminal with the given command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用给定的命令在终端中运行Python脚本：
- en: '[PRE9]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The preceding program will create four records of the rooms. Updating the data
    in the room records and later deleting two records gives you the following output
    (the IDs created may be different depending on your database):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '上述程序将创建四个房间记录。在房间记录中更新数据并随后删除两个记录将给出以下输出（创建的ID可能因数据库而异）： '
- en: '[PRE10]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `write` and `unlink` methods return `True` if the operation is successful.
    This means that if you get `True` in response, assume that a record has been updated
    or deleted successfully.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`write`和`unlink`方法在操作成功时返回`True`。这意味着如果你收到`True`响应，假设记录已成功更新或删除。'
- en: How it works...
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In this recipe, we performed `create`, `write`, and `delete` operations through
    XML-RPC. This operation also uses the `/xmlrpc/2/` object endpoint and the `execute_kw()`
    method.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们通过XML-RPC执行了`create`、`write`和`delete`操作。此操作也使用了`/xmlrpc/2/`对象端点和`execute_kw()`方法。
- en: 'The `create()` method supports the creation of multiple records in a single
    call. In *step 2*, we first created a dictionary with the room’s information.
    Then, we used the room’s dictionary to create new records of the rooms through
    XML-RPC. The XML-RPC call needs two parameters to create new records: the `create`
    method name and the room data. This will create the four room records in the `hostel.room`
    model. In ORM, when you create the record, it returns a record set of created
    records, but if you create the record’s RPC, this will return a list of IDs.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()`方法支持在单个调用中创建多个记录。在*步骤2*中，我们首先创建了一个包含房间信息的字典。然后，我们使用房间的字典通过XML-RPC创建新的房间记录。创建新记录的XML-RPC调用需要两个参数：`create`方法名称和房间数据。这将创建`hostel.room`模型中的四个房间记录。在ORM中，当你创建记录时，它返回创建的记录集，但如果创建记录的RPC，这将返回一个ID列表。'
- en: The `write` method works in a similar way to the `create` method. In the `write`
    method, you will need to pass a list of record IDs and the field values to be
    written. In our example, we updated the name of the room created in the first
    section. This will update the name of the second room from `Room 3` to `Room 2`.
    Here, we passed only one `id` for a room, but you can pass a list of IDs if you
    want to update multiple records in a single call.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`write`方法的工作方式与`create`方法类似。在`write`方法中，你需要传递一个记录ID列表和要写入的字段值。在我们的例子中，我们更新了第一部分创建的房间名称。这将把第二个房间的名称从`Room
    3`更新为`Room 2`。在这里，我们只为一个房间传递了一个`id`，但如果你想在一个调用中更新多个记录，你可以传递一个ID列表。'
- en: In the third section of the program, we deleted two rooms that we created in
    the first section. You can delete records using the `unlink` method and a list
    of record IDs.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的第三部分，我们删除了第一部分创建的两个房间。你可以使用`unlink`方法和记录ID列表来删除记录。
- en: After the program is executed successfully, you will find two room records in
    the database, as indicated in *Figure 20**.3*. In the program, we have created
    four records, but we have also deleted two of them, so you will only find two
    new records in the database.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 程序执行成功后，你将在数据库中找到两个房间记录，如图*图20**.3*所示。在程序中，我们创建了四个记录，但我们还删除了两个，所以你只能在数据库中找到两个新记录。
- en: There’s more...
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'When you are performing a CRUD operation through RPC, this may generate an
    error if you don’t have permission to do that operation. With the `check_access_rights`
    method, you can check whether the user has the proper access rights to perform
    a certain operation. The `check_access_rights` method returns `True` or `False`
    values based on the access rights of the user. Here is an example showing whether
    a user has the right to create a room record:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过RPC执行CRUD操作时，如果你没有权限执行该操作，可能会产生错误。使用`check_access_rights`方法，你可以检查用户是否有执行特定操作的适当访问权限。`check_access_rights`方法根据用户的访问权限返回`True`或`False`值。以下是一个示例，显示用户是否有创建房间记录的权限：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When you are doing complex operations via RPC, the `check_access_rights` method
    can be used prior to performing the operation to make sure you have proper access
    rights.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过RPC执行复杂操作时，可以在执行操作之前使用`check_access_rights`方法来确保你有适当的访问权限。
- en: Calling methods using XML-RPC
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用XML-RPC调用方法
- en: With Odoo, the RPC API is not limited to CRUD operations; you can also invoke
    business methods. In this recipe, we will call the `make_available` method to
    change the room’s state.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Odoo，RPC API不仅限于CRUD操作；你还可以调用业务方法。在这个菜谱中，我们将调用`make_available`方法来更改房间的状态。
- en: Getting ready
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create the Python program to call `make_available` on the `hostel.room`
    model. Make sure that you have installed the `my_hostel` module and that the server
    is running on `http://localhost:8017`.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个Python程序来在`hostel.room`模型上调用`make_available`。确保你已经安装了`my_hostel`模块，并且服务器正在`http://localhost:8017`上运行。
- en: How to do it...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Perform the following steps to create, write, and update a room’s information
    through RPC:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤通过RPC创建、写入和更新房间信息：
- en: Add the `rooms_method.py` file. You can place this file anywhere you want because
    the RPC program will work independently.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`rooms_method.py`文件。你可以将此文件放在任何你想要的位置，因为RPC程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE12]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Run the Python script from the Terminal with the following command:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令在终端中运行Python脚本：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The preceding program will create one room using `draft` and then we will change
    the room’s state by calling the `make_available` method. After that, we will fetch
    the room data to check the room’s status, which will generate the following output:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序将使用`draft`创建一个房间，然后我们将通过调用`make_available`方法来更改房间状态。之后，我们将获取房间数据以检查房间状态，这将生成以下输出：
- en: '[PRE14]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The program of this recipe will create a new room record and change the state
    of the room by calling the `model` method. By the end of the program, we have
    read the room record and printed the updated state.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此食谱的程序将创建一个新的房间记录并通过调用`model`方法来更改房间状态。到程序结束时，我们已经读取了房间记录并打印了更新的状态。
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You can call any modal method from RPC. This helps you to perform business logic
    without encountering any side effects. For example, you created the sales order
    from RPC and then called the `action_confirm` method of the `sale.order` method.
    This is equivalent to clicking on the **Confirm** button on a sales order form.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从RPC调用任何模型方法。这有助于你在不遇到任何副作用的情况下执行业务逻辑。例如，你从RPC创建了销售订单，然后调用了`sale.order`方法的`action_confirm`方法。这相当于在销售订单表单上点击**确认**按钮。
- en: You can call any public method of the model, but you cannot call a private method
    from RPC. A method name that starts with `_` is called a private method, such
    as `_get_share_url()` and `_get_data()`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以调用模型的任何公共方法，但不能从RPC调用私有方法。以`_`开头的方法称为私有方法，例如`_get_share_url()`和`_get_data()`。
- en: It is safe to use these methods, as they go through the ORM and follow all security
    rules. If the method is accessing unauthorized records, it will generate errors.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些方法是安全的，因为它们通过ORM执行并遵循所有安全规则。如果方法访问未经授权的记录，它将生成错误。
- en: In our example, we created a room with a state of `draft`. Then, we made one
    more RPC call to invoke the `make_available` method, which will change the room’s
    state to `available`. Finally, we made one more RPC call to check the state of
    the room. This will show that the room’s state has changed to **Available**, as
    indicated in *Figure 20**.4*.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们创建了一个状态为`draft`的房间。然后，我们进行了另一个RPC调用以调用`make_available`方法，这将更改房间状态为`available`。最后，我们进行了另一个RPC调用以检查房间状态。这将显示房间状态已更改为**可用**，如*图20**.4*所示。
- en: Methods that do not return anything internally return `None` by default. Such
    methods cannot be used from RPC. Consequently, if you want to use your method
    from RPC, at least add the return `True` statement.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在内部不返回任何内容的方法默认返回`None`。此类方法不能从RPC使用。因此，如果你想从RPC使用你的方法，至少添加返回`True`的语句。
- en: There’s more...
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: If an exception is generated from a method, all of the operations performed
    in the transaction will be automatically rolled back to the initial state. This
    is only applicable to a single transaction (a single RPC call). For example, imagine
    you are making two RPC calls to the server, and an exception is generated during
    the second call. This will roll back the operation that was carried out during
    the second RPC call. The operation performed through the first RPC call won’t
    be rolled back. Consequently, you want to perform a complex operation through
    RPC. It is recommended that this be performed in a single RPC call by creating
    a method in the model.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 如果从方法中生成异常，事务中执行的所有操作将自动回滚到初始状态。这仅适用于单个事务（单个RPC调用）。例如，假设你向服务器发出两个RPC调用，第二个调用期间生成了异常。这将回滚第二个RPC调用期间执行的操作。第一个RPC调用执行的操作不会回滚。因此，你希望通过RPC执行复杂操作。建议通过在模型中创建方法来在一个RPC调用中执行此操作。
- en: Logging in to/connecting Odoo with JSON-RPC
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过JSON-RPC登录/连接Odoo
- en: 'Odoo provides one more type of RPC API: JSON-RPC. As its name suggests, JSON-RPC
    works in the JSON format and uses the `jsonrpc` 2.0 specification. In this recipe,
    we will see how you can log in with JSON-RPC. The Odoo web client itself uses
    JSON-RPC to fetch data from the server.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 提供了一种类型的 RPC API：JSON-RPC。正如其名所示，JSON-RPC 使用 JSON 格式，并使用 `jsonrpc` 2.0
    规范。在这个菜谱中，我们将看到如何使用 JSON-RPC 登录。Odoo 网页客户端本身使用 JSON-RPC 从服务器获取数据。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will perform user authentication through JSON-RPC to check
    whether the given credentials are valid. Make sure you have installed the `my_hostel`
    module and that the server is running on `http://localhost:8017`.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将通过 JSON-RPC 进行用户认证，以检查提供的凭据是否有效。请确保您已安装了 `my_hostel` 模块，并且服务器正在 `http://localhost:8017`
    上运行。
- en: How to do it...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Perform the following steps to perform user authentication through RPC:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以通过 RPC 进行用户认证：
- en: Add the `jsonrpc_authenticate.py` file. You can place this file anywhere you
    want because the RPC program will work independently.
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `jsonrpc_authenticate.py` 文件。你可以把这个文件放在你想要的地方，因为 RPC 程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE15]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Run the Python script from the Terminal with the following command:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从终端运行 Python 脚本：
- en: '[PRE16]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'When you run the preceding program, and you have passed a valid login name
    and password, the program will print a success message with the `id` of the user,
    as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行前面的程序，并且你已经传递了有效的登录名和密码时，程序将打印一条包含用户 `id` 的成功消息，如下所示：
- en: '[PRE17]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The JSON authentication works just like XML-RPC, but it returns a result in
    the JSON format.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: JSON 认证的工作方式与 XML-RPC 类似，但它返回 JSON 格式的结果。
- en: How it works...
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: JSON-RPC uses the JSON format to communicate with the server using the `/jsonrpc`
    endpoint. In our example, we used the Python requests package to make `POST` requests,
    but if you want to, you can use other packages, such as `urllib`.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: JSON-RPC 使用 JSON 格式通过 `/jsonrpc` 端点与服务器进行通信。在我们的示例中，我们使用了 Python 的 requests
    包来发送 `POST` 请求，但如果你愿意，你也可以使用其他包，例如 `urllib`。
- en: 'JSON-RPC only accepts a payload formatted in the `get_json_payload()` method.
    This method will prepare the payload in the valid JSON-RPC 2.0 format. This method
    accepts the `service` name and the `method` to call, and the remaining arguments
    will be placed in `*args`. We will be using this method in all subsequent recipes.
    JSON-RPC accepts requests in JSON format, and these requests are only accepted
    if the request contains a `{"Content-Type": "application/json"}` header. The results
    of the requests will be in JSON format.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'JSON-RPC 只接受 `get_json_payload()` 方法格式化的负载。这个方法将以有效的 JSON-RPC 2.0 格式准备负载。这个方法接受要调用的
    `service` 名称和 `method`，其余参数将放在 `*args` 中。我们将在所有后续菜谱中使用这个方法。JSON-RPC 接受 JSON 格式的请求，并且只有当请求包含
    `{"Content-Type": "application/json"}` 头信息时，这些请求才会被接受。请求的结果将以 JSON 格式返回。'
- en: Like XML-RPC, all public methods, including login, come under the common service.
    For this reason, we passed `common` as a service and `login` as a method to prepare
    the JSON payload. The login method required some extra arguments, so we passed
    the database name, username, and password. Then, we made the `POST` request to
    the JSON endpoint with the payload and headers. If you passed the correct username
    and password, the method returns the user ID. The response will be in JSON format,
    and you will get the result in the result key.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XML-RPC 类似，所有公共方法，包括登录，都属于公共服务。因此，我们将 `common` 作为服务，将 `login` 作为方法来准备 JSON
    负载。登录方法需要一些额外的参数，所以我们传递了数据库名、用户名和密码。然后，我们使用负载和头信息向 JSON 端点发送 `POST` 请求。如果你提供了正确的用户名和密码，该方法将返回用户
    ID。响应将以 JSON 格式返回，你将在 `result` 键中获取结果。
- en: Important note
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that the `get_json_payload()` method created in this recipe is used to
    remove repetitive code from the example. It is not compulsory to use it, so feel
    free to apply your own adaptations.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在这个菜谱中创建的 `get_json_payload()` 方法用于从示例中移除重复的代码。这不是强制性的，所以请随意应用您自己的修改。
- en: There’s more...
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Like XML-RPC, the version method is also available in JSON-RPC. This version
    of the method comes under the common service and is accessible publicly. You can
    get version information without login information. See the following example showing
    how to fetch the version info of the Odoo server:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XML-RPC 类似，JSON-RPC 也提供了版本方法。这个版本的方法属于公共服务，并且可以公开访问。你可以不提供登录信息就获取版本信息。以下是一个示例，展示了如何获取
    Odoo 服务器的版本信息：
- en: '[PRE18]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'This program will display the following output:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将显示以下输出：
- en: '[PRE19]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This program will print version information based on your server.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序将根据你的服务器打印版本信息。
- en: Fetching/searching records using JSON-RPC
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON-RPC获取/搜索记录
- en: In the previous recipe, we saw how you can do authentication through JSON-RPC.
    In this recipe, we will see how you can fetch the data from the Odoo instance
    with JSON-RPC.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们看到了如何通过JSON-RPC进行身份验证。在这个菜谱中，我们将看到如何使用JSON-RPC从Odoo实例中获取数据。
- en: Getting ready
  id: totrans-155
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will fetch room information with JSON-RPC. Make sure you
    have installed the `my_hostel` module and that the server is running on `http://localhost:8017`.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用JSON-RPC获取房间信息。确保你已经安装了`my_hostel`模块，并且服务器正在`http://localhost:8017`上运行。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to fetch room data from the `hostel.room` model:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以从`hostel.room`模型获取房间数据：
- en: Add the `jsonrpc_fetch_data.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`jsonrpc_fetch_data.py`文件。你可以将此文件放在任何你想要的位置，因为RPC程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE20]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the Python script from the Terminal with the following command:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从终端运行Python脚本：
- en: '[PRE21]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding program will give you the following output. The first RPC call
    will print the room’s ID, and the second one will print the information for the
    room’s ID:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的程序将给出以下输出。第一个RPC调用将打印房间ID，第二个将打印房间ID的信息：
- en: '[PRE22]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The output shown in the preceding screenshot is based on data in my database.
    The data in your Odoo instance may be different data, so the output will also
    be different.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的截图显示的输出基于我的数据库中的数据。你的Odoo实例中的数据可能不同，因此输出也将不同。
- en: How it works...
  id: totrans-167
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the *Logging in to/connecting Odoo with JSON-RPC* recipe, we saw that you
    can validate `username` and `password`. If the login details are correct, the
    RPC call will return `user_id`. You can then use this `user_id` to fetch the model’s
    data. Like XML-RPC, we need to use the `search` and `read` combination to fetch
    the data from the model. To fetch the data, we use `object` as a service and `execute_kw()`
    as the method. `execute_kw()` is the same method that we used in XML-RPC for data,
    so it accepts the same argument as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在*使用JSON-RPC登录/连接Odoo*的菜谱中，我们看到了你可以验证`username`和`password`。如果登录信息正确，RPC调用将返回`user_id`。然后你可以使用这个`user_id`来获取模型的数据。像XML-RPC一样，我们需要使用`search`和`read`的组合来从模型获取数据。为了获取数据，我们使用`object`作为服务，`execute_kw()`作为方法。`execute_kw()`与我们在XML-RPC中用于数据的方法相同，因此它接受以下相同的参数：
- en: Database name
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据库名称
- en: User ID (we get this from the `authenticate()` method)
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户ID（我们从`authenticate()`方法中获取）
- en: Password
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 密码
- en: Model name, for example, `res.partner` or `hostel.room`
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型名称，例如，`res.partner`或`hostel.room`
- en: Method name, for example, `search`, `read`, or `create`
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 方法名称，例如，`search`、`read`或`create`
- en: An array of positional arguments (`args`)
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置参数数组（`args`）
- en: A dictionary for keyword arguments (`optional`) (`kwargs`)
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关键字参数字典（`optional`）（`kwargs`）
- en: In our example, we called the `search` method first. The `execute_kw()` method
    usually takes mandatory arguments as positional arguments and optional arguments
    as keyword arguments. In the `search` method, `domain` is a mandatory argument,
    so we passed it in the list and passed the `optional` argument limit as the `keyword`
    argument (dictionary). You will get a response in JSON format, and in this recipe,
    the response of the `search()` method RPC will have the room’s IDs in the `result`
    key.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们首先调用了`search`方法。`execute_kw()`方法通常将强制参数作为位置参数，将可选参数作为关键字参数。在`search`方法中，`domain`是一个强制参数，所以我们将其放入列表中，并将`optional`参数限制作为`keyword`参数（字典）。你将得到一个JSON格式的响应，在这个菜谱中，`search()`方法RPC的响应将在`result`键中包含房间ID。
- en: 'In *step 2*, we made an RPC call using the `read` method. To read the room’s
    information, we passed two positional arguments: the list of room IDs and the
    list of fields to fetch. This RPC call will return the room information in JSON
    format, and you can access it in using the `result` key.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤2*中，我们使用`read`方法进行了RPC调用。为了读取房间信息，我们传递了两个位置参数：房间ID列表和要获取的字段列表。这个RPC调用将以JSON格式返回房间信息，你可以使用`result`键访问它。
- en: Important note
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Instead of `execute_kw()`, you can use `execute` as the method. This does not
    support keyword arguments, so you need to pass all of the intermediate arguments
    if you want to pass some optional arguments.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 与`execute_kw()`方法相比，你可以使用`execute`作为方法。这个方法不支持关键字参数，因此如果你想传递一些可选参数，你需要传递所有中间参数。
- en: There’s more...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'Similar to XML-RPC, you can use the `search_read()` method instead of the `search()`
    and `read()` method combination, as it is slightly time-consuming. Take a look
    at the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 与XML-RPC类似，您可以使用`search_read()`方法代替`search()`和`read()`方法组合，因为它稍微耗时一些。请看以下代码：
- en: '[PRE23]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The code snippet is an alternative way of fetching room data with `search_read()`.
    It will return the same output as in the previous example.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段是使用`search_read()`获取房间数据的另一种方式。它将返回与上一个示例相同的输出。
- en: Creating/updating/deleting records using JSON-RPC
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用JSON-RPC创建/更新/删除记录
- en: 'In the previous recipe, we looked at how to search and read data through JSON-RPC.
    In this recipe, we will perform the remaining **CRUD** operations through RPC:
    **create**, **update** (write), and **delete** (unlink).'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们探讨了如何通过JSON-RPC搜索和读取数据。在本菜谱中，我们将通过RPC执行剩余的**CRUD**操作：**创建**、**更新**（写入）和**删除**（解除链接）。
- en: Getting ready
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create a Python program to `create`, `write`, and `unlink` data in the
    `hostel.room` model. Make sure you have installed the `my_hostel` module and that
    the server is running on `http://localhost:8017`.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个Python程序来在`hostel.room`模型中`create`、`write`和`unlink`数据。请确保您已安装`my_hostel`模块，并且服务器正在`http://localhost:8017`上运行。
- en: How to do it...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to create, write, and unlink a room’s information
    through RPC:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤通过RPC创建、写入和解除链接房间信息：
- en: Add the `jsonrpc_operation.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加`jsonrpc_operation.py`文件。您可以将此文件放在任何您想要的位置，因为RPC程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE24]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Run the Python script from the Terminal with the following command:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令从终端运行Python脚本：
- en: '[PRE25]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The preceding program will create four rooms. Writing one room and deleting
    two rooms gives you the following output (the IDs created may be different based
    on your database):'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 上述程序将创建四个房间。写一个房间并删除两个房间将给出以下输出（创建的ID可能因数据库的不同而不同）：
- en: '[PRE26]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `write` and `unlink` methods return `True` if the operation is successful.
    This means that if you get `True` in response, assume that a record has been updated
    or deleted successfully.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`write`和`unlink`方法在操作成功时返回`True`。这意味着如果您收到`True`响应，则假设记录已成功更新或删除。'
- en: How it works...
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '`execute_kw()` is used for the `create`, `update`, and `delete` operations.
    From Odoo version 12, the `create` method supports the creation of multiple records.
    So, we prepared the dictionary with information from the four rooms. Then, we
    made the JSON-RPC call with `hostel.room` as the model name and `create` as the
    method name. This will create four room records in the database and return a JSON
    response with the IDs of these newly created rooms. In the next RPC calls, we
    want to use these IDs to make an RPC call for the `update` and `delete` operations,
    so we assign it to the `rooms_ids` variable.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`execute_kw()`用于`create`、`update`和`delete`操作。从Odoo版本12开始，`create`方法支持创建多个记录。因此，我们准备了包含四个房间信息的数据字典。然后，我们使用`hostel.room`作为模型名称和`create`作为方法名称进行了JSON-RPC调用。这将创建数据库中的四个房间记录，并返回包含这些新创建房间ID的JSON响应。在下一个RPC调用中，我们想要使用这些ID来执行`update`和`delete`操作的RPC调用，因此我们将其分配给`rooms_ids`变量。'
- en: Important note
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Both JSON-RPC and XML-RPC generate an error when you try to create the record
    without providing values for the required field, so make sure you have added all
    the required fields to the `create` values.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当您尝试创建不提供所需字段值的记录时，JSON-RPC和XML-RPC都会生成错误，所以请确保您已将所有必需字段添加到`create`值中。
- en: In the next RPC call, we used the `write` method to update the existing records.
    The `write` method accepts two positional arguments; the records to update and
    the values to write. In our example, we have updated the name of the room by using
    the ID of the second room from a created room’s IDs. This will change the name
    of the second room from `Room 3` to `Room 2`.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个RPC调用中，我们使用了`write`方法来更新现有记录。`write`方法接受两个位置参数；要更新的记录和要写入的值。在我们的例子中，我们通过使用创建的房间ID的第二个ID来更新房间的名称。这将把第二个房间的名称从`Room
    3`改为`Room 2`。
- en: Then, we made the last RPC call to delete two room records. To do so, we used
    the `unlink` method. The `unlink` method accepts only one argument, which is the
    ID of the records you want to delete. This RPC call will delete the last two rooms.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们进行了最后一个RPC调用以删除两个房间记录。为此，我们使用了`unlink`方法。`unlink`方法只接受一个参数，即您想要删除的记录ID。此RPC调用将删除最后两个房间。
- en: There’s more...
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Like XML-RPC, you can use the `check_access_rights` method in JSON-RPC to check
    whether you have access rights to perform the operation. This method requires
    two parameters: the model name and the operation name. In the following example,
    we check access rights for the `create` operation on the `hostel.room` model:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 与 XML-RPC 类似，您可以在 JSON-RPC 中使用 `check_access_rights` 方法来检查您是否有执行操作的访问权限。此方法需要两个参数：模型名称和操作名称。在以下示例中，我们检查对
    `hostel.room` 模型的 `create` 操作的访问权限：
- en: '[PRE27]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'This program will generate the following output:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序将生成以下输出：
- en: '[PRE28]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: When you are performing complex operations via RPC, the use of the `check_access_rights`
    method can be used before performing an operation to make sure you have proper
    access rights.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 当您通过 RPC 执行复杂操作时，在执行操作之前使用 `check_access_rights` 方法可以确保您有适当的访问权限。
- en: Calling methods using JSON-RPC
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JSON-RPC 调用方法
- en: In this recipe, we will learn how to invoke a custom method of the model through
    JSON-RPC. We will change the status of the room by calling the `make_available()`
    method.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在本菜谱中，我们将学习如何通过 JSON-RPC 调用模型的自定义方法。我们将通过调用 `make_available()` 方法来更改房间的状态。
- en: Getting ready
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will create the Python program to call `make_available` on the `hostel.room`
    model. Make sure you have installed the `my_hostel` module and that the server
    is running on `http://localhost:8017`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个 Python 程序来在 `hostel.room` 模型上调用 `make_available`。请确保您已安装 `my_hostel`
    模块，并且服务器正在 `http://localhost:8017` 上运行。
- en: How to do it...
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Perform the following steps to create, write, and update a room’s information
    through RPC:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以通过 RPC 创建、写入和更新房间信息：
- en: Add the `jsonrpc_method.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `jsonrpc_method.py` 文件。您可以将此文件放在任何您想要的位置，因为 RPC 程序将独立工作。
- en: 'Add the following code to the file:'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到文件中：
- en: '[PRE29]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '3. Run the Python script from the Terminal with the following command:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 3. 使用以下命令在终端中运行 Python 脚本：
- en: '[PRE31]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: $ python3 jsonrpc_method.py
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: $ python3 jsonrpc_method.py
- en: 'Room created with id: 53'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的房间 ID：53
- en: 'Room state after the method call: [{''id'': 53, ''name'': ''Room 1'', ''state'':
    ''available''}]'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '方法调用后的房间状态：[{''id'': 53, ''name'': ''Room 1'', ''state'': ''available''}]'
- en: '[PRE32]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: pip install OdooRPC
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: pip install OdooRPC
- en: '[PRE33]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: import odoorpc
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: import odoorpc
- en: db_name = 'cookbook_17e'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: db_name = 'cookbook_17e'
- en: user_name = 'admin'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: user_name = 'admin'
- en: password = 'admin'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: password = 'admin'
- en: Prepare the connection to the server
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备与服务器建立连接
- en: odoo = odoorpc.ODOO('localhost', port=8017)
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: odoo = odoorpc.ODOO('localhost', port=8017)
- en: odoo.login(db_name, user_name, password)  # login
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: odoo.login(db_name, user_name, password)  # 登录
- en: User information
  id: totrans-235
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用户信息
- en: user = odoo.env.user
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: user = odoo.env.user
- en: print(user.name)             # name of the user connected
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print(user.name)             # 连接用户的名称
- en: print(user.company_id.name)  # the name of user's company
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print(user.company_id.name)  # 用户的公司的名称
- en: print(user.email)            # the email of user
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print(user.email)            # 用户的电子邮件
- en: RoomModel = odoo.env['hostel.room']
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: RoomModel = odoo.env['hostel.room']
- en: search_domain = [['name', 'ilike', 'Standard']]
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: search_domain = [['name', 'ilike', 'Standard']]
- en: rooms_ids = RoomModel.search(search_domain, limit=5)
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: rooms_ids = RoomModel.search(search_domain, limit=5)
- en: 'for room in RoomModel.browse(rooms_ids):'
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'for room in RoomModel.browse(rooms_ids):'
- en: print(room.name, room.room_no)
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print(room.name, room.room_no)
- en: create the room and update the state
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建房间并更新状态
- en: room_id = RoomModel.create({
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: room_id = RoomModel.create({
- en: '''name'': ''Test Room'','
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''name'': ''测试房间'','
- en: '''room_no'': ''103'','
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''room_no'': ''103'','
- en: '''state'': ''draft'''
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''state'': ''draft'''
- en: '})'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '})'
- en: room = RoomModel.browse(room_id)
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: room = RoomModel.browse(room_id)
- en: print("Room state before make_available:", room.state)
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("Room state before make_available:", room.state)
- en: room.make_available()
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: room.make_available()
- en: room = RoomModel.browse(room_id)
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: room = RoomModel.browse(room_id)
- en: print("Room state after make_available:", room.state)
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print("Room state after make_available:", room.state)
- en: '[PRE34]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: python3 odoorpc_hostel.py
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: python3 odoorpc_hostel.py
- en: '[PRE35]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: $ python3 odoorpc_hostel.py
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: $ python3 odoorpc_hostel.py
- en: Mitchell Admin
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 米切尔管理员
- en: Packt publishing
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: Packt 出版
- en: admin@yourcompany.example.com
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: admin@yourcompany.example.com
- en: 8th Standard 1
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 8年级1班
- en: 9th Standard 2
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 9年级2班
- en: 10th Standard 3
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 10年级3班
- en: 11th Standard 4
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 11年级4班
- en: 12th Standard 5
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 12年级5班
- en: 'Room state before make_available: draft'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 可用前的房间状态：草稿
- en: 'Room state after make_available: available'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 可用后的房间状态：可用
- en: '[PRE36]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: import odoorpc
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: import odoorpc
- en: db_name = 'cookbook_17e'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: db_name = 'cookbook_17e'
- en: user_name = 'admin'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: user_name = 'admin'
- en: password = 'admin'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: password = 'admin'
- en: Prepare the connection to the server
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备与服务器建立连接
- en: odoo = odoorpc.ODOO('localhost', port=8017)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: odoo = odoorpc.ODOO('localhost', port=8017)
- en: odoo.login(db_name, user_name, password)  # login
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: odoo.login(db_name, user_name, password)  # 登录
- en: rooms_info = odoo.execute('hostel.room', 'search_read',
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: rooms_info = odoo.execute('hostel.room', 'search_read',
- en: '[[''name'', ''ilike'', ''Standard'']])'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[[''name'', ''ilike'', ''Standard'']])'
- en: print(rooms_info)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: print(rooms_info)
- en: '[PRE37]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
