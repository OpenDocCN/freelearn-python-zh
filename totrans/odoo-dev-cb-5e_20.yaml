- en: '20'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Remote Procedure Calls in Odoo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo server supports **remote procedure calls** (**RPCs**), which means
    that you can connect Odoo instances from external applications. An example is
    if you want to show the status of a delivery order in Fan Android application
    that is written in Java Here, you can fetch the delivery status from Odoo via
    RPC. With the Odoo RPC API, you can perform any CRUD operations on a database.
    Odoo RPC is not limited to CRUD operations; you can also invoke public methods
    of any model. Of course, you will need to have proper access to rights to perform
    these operations because RPC respects all of the access rights and record rules
    you have defined in your database. Consequently, it is very safe to use because
    the RPC respects all access rights and record rules. Odoo RPC is not platform-dependent,
    so you can use it on any platform, including Odoo.sh, online, or self-hosted platforms.
    Odoo RPC can be used with any programming language, so you can integrate Odoo
    with any external application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo provides two types of RPC API: XML-RPC and JSON-RPC. In this chapter,
    we will learn how to use these RPCs from an external program. Finally, you will
    learn how to use Odoo RPC through OCA’s `odoorpc` library.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to/connecting Odoo with XML-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Searching/reading records using XML-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating/updating/deleting records using XML-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling methods using XML-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in to/connecting Odoo with JSON-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetching/searching records using JSON-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating/updating/deleting records using JSON-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling methods using JSON-RPC
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The OCA odoorpc library
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating API keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will be using the `my_hostel` module, which we created
    in [*Chapter 19*](B20997_19.xhtml#_idTextAnchor1030), *Managing, Deploying, and
    Testing with Odoo.sh*. You can find the same initial `my_hostel` module in the
    GitHub repository: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter20](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter20).'
  prefs: []
  type: TYPE_NORMAL
- en: Here, we will not Introduce a new language as you may not be familiar with it.
    We will continue using Python to access the RPC API. You can use another language
    if you want to, as the same procedure can be applied in any language to access
    the RPC.
  prefs: []
  type: TYPE_NORMAL
- en: To connect Odoo through the RPC, you will need a running Odoo instance to connect
    with. Throughout this chapter, we will assume that you have the Odoo server running
    on `http://localhost:8017`, that you called the `cookbook_17e` database, and that
    you have installed the `my_hostel` module therein. Note that you can connect any
    valid IP or domain through the RPC.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to/connecting Odoo with XML-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will carry out user authentication through RPC to check whether
    the credentials (server_url, db_name, username, and password) supplied are valid.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To connect an Odoo instance through RPC, you will need a running Odoo instance
    to connect with. We will assume that you have the Odoo server running on `http://localhost:8017`
    and that you have installed the `my_hostel` module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to carry out user authentication through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `odoo_authenticate.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the following Python script from the Terminal with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will print a success message with the user ID if you have provided a valid
    login name and password.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we used the Python `xmlrpc` library to access Odoo instances
    through XML-RPC. This is a standard Python library, and you do not have to install
    anything else to use it.
  prefs: []
  type: TYPE_NORMAL
- en: For authentication, Odoo provides XML-RPC on the `/xmlrpc/2/common` endpoint.
    This endpoint is used for meta methods, which do not require authentication. The
    `authentication()` method itself is a public method, so it can be called publicly.
    The `authentication()` method accepts four arguments—database name, username,
    password, and user agent environment. The user agent environment is a compulsory
    argument, but if you do not want to pass the user agent parameter, at least pass
    the empty dictionary.
  prefs: []
  type: TYPE_NORMAL
- en: When you execute the `authenticate()` method with all valid arguments, it will
    make a call to the Odoo server and perform authentication. It will then return
    the user ID, provided the given login ID and password are correct. It will return
    `False` if the user is not present or if the password is incorrect.
  prefs: []
  type: TYPE_NORMAL
- en: You need to use the `authenticate()` method before accessing any data through
    RPC. This is because accessing data with the wrong credentials will generate an
    error.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Odoo’s online instances `(*.odoo.com`) use OAuth authentication, so the local
    password is not set on the instance. To use XML-RPC on these instances, you will
    need to set the user’s password manually from the **Settings** | **Users** | **Users**
    menu of your instance.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, the methods used to access data require a user ID instead of a
    username, so the `authenticate()` method is needed to get the ID of the user.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `/xmlrpc/2/common` endpoint provides one more method: `version()`. You
    can call this method without credentials. It will return the version information
    of the Odoo instance. The following is an example of the `version()` method usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding program will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This program will print version information based on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Searching/reading records using XML-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will see how you can fetch the data from an Odoo instance
    through RPC. The user can access most data, except data that are restricted by
    the security access control and record rules. RPC can be used in many situations,
    such as collecting data for analysis, manipulating a lot of data at once, or fetching
    data for display in another software/system. There are endless possibilities,
    and you can use RPCs whenever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a Python program to fetch the room data from the `hostel.room`
    model. Make sure you have installed the `my_hostel` module and that the server
    is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to fetch a room’s information through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `rooms_data.py` file. You can place this file anywhere you want because
    the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Python script from the Terminal with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding program will fetch the room data and give you the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The output shown in the preceding screenshot is based on data in my database.
    The data in your Odoo instance may be different data, so the output will also
    be different.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to access the room data, you first have to authenticate. At the beginning
    of the program, we did authentication in the same way as we did in the *Logging
    in to/connecting Odoo with XML-RPC* recipe earlier. If you provided valid credentials,
    the `authentication()` method will return the `id` of the user’s record. We will
    use this user ID to fetch the room data.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `/xmlrpc/2/object` endpoint is used for database operation. In our recipe,
    we used the `object` endpoint to fetch the room data. In contrast to the `/xmlrpc/2/common`
    endpoint, this endpoint does not work without credentials. With this endpoint,
    you can access the public method of any model through the `execute_kw()` method.
    `execute_kw()` takes the following arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: Database name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User ID (we get this from the `authenticate()` method)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model name, for example, `res.partner` or `hostel.room`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method name, for example, `search`, `read`, or `create`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of positional arguments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dictionary for keyword arguments (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, we want to fetch the room’s information. This can be done through
    a combination of `search()` and `read()`. Room information is stored in the `hostel.room`
    model, so in `execute_kw()`, we use `hostel.room` as the model name and `search`
    as the method name. This will call the ORM’s `search` method and return record
    IDs. The only difference here is that the ORM’s `search` method returns a record
    set, while this search method returns a list of IDs.
  prefs: []
  type: TYPE_NORMAL
- en: In `execute_kw()`, you can pass arguments and keyword arguments for the method
    provided. The `search()` method accepts a domain as a positional argument, so
    we passed a domain to filter rooms. The `search` method has other optional keyword
    arguments, such as `limit`, `offset`, `count`, and `order`, from which we have
    used the `limit` parameter to fetch only five records. This will return the list
    of room IDs whose names contain the `Standard` strings.
  prefs: []
  type: TYPE_NORMAL
- en: However, we need to fetch room data from the database. We will use the `read`
    method to do this. The `read` method accepts a list of IDs and fields to complete
    the task. At the end of *step 3*, we used the list of room IDs that we received
    from the `search` method and then used the room IDs to fetch the `name` and `room_no`
    of the rooms. This will return the list of the dictionary with the room’s information.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the arguments and keyword arguments passed in `execute_kw()` are based
    on the passed method. You can use any public ORM method via `execute_kw()`. You
    just need to give the method a name, the valid arguments, and the keyword arguments.
    These arguments are going to be passed on in the method in the ORM.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data fetched through a combination of the `search()` and `read()` methods
    is slightly time-consuming because it will make two calls. `search_read` is an
    alternative method for fetching data. You can search and fetch the data in a single
    call. Here is the alternative way to fetch a room’s data with `search_read()`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'The `read` and `search_read` methods will return `id` fields even if the `id`
    field is not requested. Furthermore, for the `many2one` field, you will get an
    array made up of the `id` and display name. For example, the `create_uid` `many2one`
    field will return data like this: `[07, ''``Deepak ahir'']`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It will return the same output as in the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The `search_read` methods improve performance significantly as you get your
    result in one RPC call, so use the `search_read` method instead of a combination
    of the `search` and `read` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Creating/updating/deleting records using XML-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how to search and read data through RPC. In this
    recipe, we will perform the remaining **CRUD** operations through RPC, which are
    **create**, **update** (write), and **delete** (unlink).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the Python program to `create`, `write`, and `unlink` data in
    the `hostel.room` model. Make sure you have installed the `my_hostel` module and
    that the server is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create, write, and update a room’s information
    through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `rooms_operation.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the `rooms_operation.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Python script from the Terminal with the given command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding program will create four records of the rooms. Updating the data
    in the room records and later deleting two records gives you the following output
    (the IDs created may be different depending on your database):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `write` and `unlink` methods return `True` if the operation is successful.
    This means that if you get `True` in response, assume that a record has been updated
    or deleted successfully.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we performed `create`, `write`, and `delete` operations through
    XML-RPC. This operation also uses the `/xmlrpc/2/` object endpoint and the `execute_kw()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `create()` method supports the creation of multiple records in a single
    call. In *step 2*, we first created a dictionary with the room’s information.
    Then, we used the room’s dictionary to create new records of the rooms through
    XML-RPC. The XML-RPC call needs two parameters to create new records: the `create`
    method name and the room data. This will create the four room records in the `hostel.room`
    model. In ORM, when you create the record, it returns a record set of created
    records, but if you create the record’s RPC, this will return a list of IDs.'
  prefs: []
  type: TYPE_NORMAL
- en: The `write` method works in a similar way to the `create` method. In the `write`
    method, you will need to pass a list of record IDs and the field values to be
    written. In our example, we updated the name of the room created in the first
    section. This will update the name of the second room from `Room 3` to `Room 2`.
    Here, we passed only one `id` for a room, but you can pass a list of IDs if you
    want to update multiple records in a single call.
  prefs: []
  type: TYPE_NORMAL
- en: In the third section of the program, we deleted two rooms that we created in
    the first section. You can delete records using the `unlink` method and a list
    of record IDs.
  prefs: []
  type: TYPE_NORMAL
- en: After the program is executed successfully, you will find two room records in
    the database, as indicated in *Figure 20**.3*. In the program, we have created
    four records, but we have also deleted two of them, so you will only find two
    new records in the database.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you are performing a CRUD operation through RPC, this may generate an
    error if you don’t have permission to do that operation. With the `check_access_rights`
    method, you can check whether the user has the proper access rights to perform
    a certain operation. The `check_access_rights` method returns `True` or `False`
    values based on the access rights of the user. Here is an example showing whether
    a user has the right to create a room record:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When you are doing complex operations via RPC, the `check_access_rights` method
    can be used prior to performing the operation to make sure you have proper access
    rights.
  prefs: []
  type: TYPE_NORMAL
- en: Calling methods using XML-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: With Odoo, the RPC API is not limited to CRUD operations; you can also invoke
    business methods. In this recipe, we will call the `make_available` method to
    change the room’s state.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the Python program to call `make_available` on the `hostel.room`
    model. Make sure that you have installed the `my_hostel` module and that the server
    is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create, write, and update a room’s information
    through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `rooms_method.py` file. You can place this file anywhere you want because
    the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Python script from the Terminal with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding program will create one room using `draft` and then we will change
    the room’s state by calling the `make_available` method. After that, we will fetch
    the room data to check the room’s status, which will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The program of this recipe will create a new room record and change the state
    of the room by calling the `model` method. By the end of the program, we have
    read the room record and printed the updated state.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can call any modal method from RPC. This helps you to perform business logic
    without encountering any side effects. For example, you created the sales order
    from RPC and then called the `action_confirm` method of the `sale.order` method.
    This is equivalent to clicking on the **Confirm** button on a sales order form.
  prefs: []
  type: TYPE_NORMAL
- en: You can call any public method of the model, but you cannot call a private method
    from RPC. A method name that starts with `_` is called a private method, such
    as `_get_share_url()` and `_get_data()`.
  prefs: []
  type: TYPE_NORMAL
- en: It is safe to use these methods, as they go through the ORM and follow all security
    rules. If the method is accessing unauthorized records, it will generate errors.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we created a room with a state of `draft`. Then, we made one
    more RPC call to invoke the `make_available` method, which will change the room’s
    state to `available`. Finally, we made one more RPC call to check the state of
    the room. This will show that the room’s state has changed to **Available**, as
    indicated in *Figure 20**.4*.
  prefs: []
  type: TYPE_NORMAL
- en: Methods that do not return anything internally return `None` by default. Such
    methods cannot be used from RPC. Consequently, if you want to use your method
    from RPC, at least add the return `True` statement.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If an exception is generated from a method, all of the operations performed
    in the transaction will be automatically rolled back to the initial state. This
    is only applicable to a single transaction (a single RPC call). For example, imagine
    you are making two RPC calls to the server, and an exception is generated during
    the second call. This will roll back the operation that was carried out during
    the second RPC call. The operation performed through the first RPC call won’t
    be rolled back. Consequently, you want to perform a complex operation through
    RPC. It is recommended that this be performed in a single RPC call by creating
    a method in the model.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in to/connecting Odoo with JSON-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Odoo provides one more type of RPC API: JSON-RPC. As its name suggests, JSON-RPC
    works in the JSON format and uses the `jsonrpc` 2.0 specification. In this recipe,
    we will see how you can log in with JSON-RPC. The Odoo web client itself uses
    JSON-RPC to fetch data from the server.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will perform user authentication through JSON-RPC to check
    whether the given credentials are valid. Make sure you have installed the `my_hostel`
    module and that the server is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to perform user authentication through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `jsonrpc_authenticate.py` file. You can place this file anywhere you
    want because the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Python script from the Terminal with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When you run the preceding program, and you have passed a valid login name
    and password, the program will print a success message with the `id` of the user,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The JSON authentication works just like XML-RPC, but it returns a result in
    the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JSON-RPC uses the JSON format to communicate with the server using the `/jsonrpc`
    endpoint. In our example, we used the Python requests package to make `POST` requests,
    but if you want to, you can use other packages, such as `urllib`.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSON-RPC only accepts a payload formatted in the `get_json_payload()` method.
    This method will prepare the payload in the valid JSON-RPC 2.0 format. This method
    accepts the `service` name and the `method` to call, and the remaining arguments
    will be placed in `*args`. We will be using this method in all subsequent recipes.
    JSON-RPC accepts requests in JSON format, and these requests are only accepted
    if the request contains a `{"Content-Type": "application/json"}` header. The results
    of the requests will be in JSON format.'
  prefs: []
  type: TYPE_NORMAL
- en: Like XML-RPC, all public methods, including login, come under the common service.
    For this reason, we passed `common` as a service and `login` as a method to prepare
    the JSON payload. The login method required some extra arguments, so we passed
    the database name, username, and password. Then, we made the `POST` request to
    the JSON endpoint with the payload and headers. If you passed the correct username
    and password, the method returns the user ID. The response will be in JSON format,
    and you will get the result in the result key.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `get_json_payload()` method created in this recipe is used to
    remove repetitive code from the example. It is not compulsory to use it, so feel
    free to apply your own adaptations.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like XML-RPC, the version method is also available in JSON-RPC. This version
    of the method comes under the common service and is accessible publicly. You can
    get version information without login information. See the following example showing
    how to fetch the version info of the Odoo server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This program will display the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: This program will print version information based on your server.
  prefs: []
  type: TYPE_NORMAL
- en: Fetching/searching records using JSON-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we saw how you can do authentication through JSON-RPC.
    In this recipe, we will see how you can fetch the data from the Odoo instance
    with JSON-RPC.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will fetch room information with JSON-RPC. Make sure you
    have installed the `my_hostel` module and that the server is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to fetch room data from the `hostel.room` model:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `jsonrpc_fetch_data.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Python script from the Terminal with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding program will give you the following output. The first RPC call
    will print the room’s ID, and the second one will print the information for the
    room’s ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The output shown in the preceding screenshot is based on data in my database.
    The data in your Odoo instance may be different data, so the output will also
    be different.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the *Logging in to/connecting Odoo with JSON-RPC* recipe, we saw that you
    can validate `username` and `password`. If the login details are correct, the
    RPC call will return `user_id`. You can then use this `user_id` to fetch the model’s
    data. Like XML-RPC, we need to use the `search` and `read` combination to fetch
    the data from the model. To fetch the data, we use `object` as a service and `execute_kw()`
    as the method. `execute_kw()` is the same method that we used in XML-RPC for data,
    so it accepts the same argument as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Database name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User ID (we get this from the `authenticate()` method)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Model name, for example, `res.partner` or `hostel.room`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Method name, for example, `search`, `read`, or `create`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An array of positional arguments (`args`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A dictionary for keyword arguments (`optional`) (`kwargs`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, we called the `search` method first. The `execute_kw()` method
    usually takes mandatory arguments as positional arguments and optional arguments
    as keyword arguments. In the `search` method, `domain` is a mandatory argument,
    so we passed it in the list and passed the `optional` argument limit as the `keyword`
    argument (dictionary). You will get a response in JSON format, and in this recipe,
    the response of the `search()` method RPC will have the room’s IDs in the `result`
    key.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, we made an RPC call using the `read` method. To read the room’s
    information, we passed two positional arguments: the list of room IDs and the
    list of fields to fetch. This RPC call will return the room information in JSON
    format, and you can access it in using the `result` key.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Instead of `execute_kw()`, you can use `execute` as the method. This does not
    support keyword arguments, so you need to pass all of the intermediate arguments
    if you want to pass some optional arguments.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Similar to XML-RPC, you can use the `search_read()` method instead of the `search()`
    and `read()` method combination, as it is slightly time-consuming. Take a look
    at the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The code snippet is an alternative way of fetching room data with `search_read()`.
    It will return the same output as in the previous example.
  prefs: []
  type: TYPE_NORMAL
- en: Creating/updating/deleting records using JSON-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous recipe, we looked at how to search and read data through JSON-RPC.
    In this recipe, we will perform the remaining **CRUD** operations through RPC:
    **create**, **update** (write), and **delete** (unlink).'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a Python program to `create`, `write`, and `unlink` data in the
    `hostel.room` model. Make sure you have installed the `my_hostel` module and that
    the server is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create, write, and unlink a room’s information
    through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `jsonrpc_operation.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the Python script from the Terminal with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding program will create four rooms. Writing one room and deleting
    two rooms gives you the following output (the IDs created may be different based
    on your database):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `write` and `unlink` methods return `True` if the operation is successful.
    This means that if you get `True` in response, assume that a record has been updated
    or deleted successfully.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`execute_kw()` is used for the `create`, `update`, and `delete` operations.
    From Odoo version 12, the `create` method supports the creation of multiple records.
    So, we prepared the dictionary with information from the four rooms. Then, we
    made the JSON-RPC call with `hostel.room` as the model name and `create` as the
    method name. This will create four room records in the database and return a JSON
    response with the IDs of these newly created rooms. In the next RPC calls, we
    want to use these IDs to make an RPC call for the `update` and `delete` operations,
    so we assign it to the `rooms_ids` variable.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Both JSON-RPC and XML-RPC generate an error when you try to create the record
    without providing values for the required field, so make sure you have added all
    the required fields to the `create` values.
  prefs: []
  type: TYPE_NORMAL
- en: In the next RPC call, we used the `write` method to update the existing records.
    The `write` method accepts two positional arguments; the records to update and
    the values to write. In our example, we have updated the name of the room by using
    the ID of the second room from a created room’s IDs. This will change the name
    of the second room from `Room 3` to `Room 2`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we made the last RPC call to delete two room records. To do so, we used
    the `unlink` method. The `unlink` method accepts only one argument, which is the
    ID of the records you want to delete. This RPC call will delete the last two rooms.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Like XML-RPC, you can use the `check_access_rights` method in JSON-RPC to check
    whether you have access rights to perform the operation. This method requires
    two parameters: the model name and the operation name. In the following example,
    we check access rights for the `create` operation on the `hostel.room` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'This program will generate the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: When you are performing complex operations via RPC, the use of the `check_access_rights`
    method can be used before performing an operation to make sure you have proper
    access rights.
  prefs: []
  type: TYPE_NORMAL
- en: Calling methods using JSON-RPC
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to invoke a custom method of the model through
    JSON-RPC. We will change the status of the room by calling the `make_available()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create the Python program to call `make_available` on the `hostel.room`
    model. Make sure you have installed the `my_hostel` module and that the server
    is running on `http://localhost:8017`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to create, write, and update a room’s information
    through RPC:'
  prefs: []
  type: TYPE_NORMAL
- en: Add the `jsonrpc_method.py` file. You can place this file anywhere you want
    because the RPC program will work independently.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following code to the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '3. Run the Python script from the Terminal with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: $ python3 jsonrpc_method.py
  prefs: []
  type: TYPE_NORMAL
- en: 'Room created with id: 53'
  prefs: []
  type: TYPE_NORMAL
- en: 'Room state after the method call: [{''id'': 53, ''name'': ''Room 1'', ''state'':
    ''available''}]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: pip install OdooRPC
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: import odoorpc
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: db_name = 'cookbook_17e'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: user_name = 'admin'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: password = 'admin'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Prepare the connection to the server
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: odoo = odoorpc.ODOO('localhost', port=8017)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: odoo.login(db_name, user_name, password)  # login
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: User information
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: user = odoo.env.user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print(user.name)             # name of the user connected
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print(user.company_id.name)  # the name of user's company
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print(user.email)            # the email of user
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: RoomModel = odoo.env['hostel.room']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: search_domain = [['name', 'ilike', 'Standard']]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: rooms_ids = RoomModel.search(search_domain, limit=5)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'for room in RoomModel.browse(rooms_ids):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print(room.name, room.room_no)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: create the room and update the state
  prefs:
  - PREF_IND
  - PREF_H1
  type: TYPE_NORMAL
- en: room_id = RoomModel.create({
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''name'': ''Test Room'','
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''room_no'': ''103'','
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''state'': ''draft'''
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '})'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: room = RoomModel.browse(room_id)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Room state before make_available:", room.state)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: room.make_available()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: room = RoomModel.browse(room_id)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print("Room state after make_available:", room.state)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: python3 odoorpc_hostel.py
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ python3 odoorpc_hostel.py
  prefs: []
  type: TYPE_NORMAL
- en: Mitchell Admin
  prefs: []
  type: TYPE_NORMAL
- en: Packt publishing
  prefs: []
  type: TYPE_NORMAL
- en: admin@yourcompany.example.com
  prefs: []
  type: TYPE_NORMAL
- en: 8th Standard 1
  prefs: []
  type: TYPE_NORMAL
- en: 9th Standard 2
  prefs: []
  type: TYPE_NORMAL
- en: 10th Standard 3
  prefs: []
  type: TYPE_NORMAL
- en: 11th Standard 4
  prefs: []
  type: TYPE_NORMAL
- en: 12th Standard 5
  prefs: []
  type: TYPE_NORMAL
- en: 'Room state before make_available: draft'
  prefs: []
  type: TYPE_NORMAL
- en: 'Room state after make_available: available'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: import odoorpc
  prefs: []
  type: TYPE_NORMAL
- en: db_name = 'cookbook_17e'
  prefs: []
  type: TYPE_NORMAL
- en: user_name = 'admin'
  prefs: []
  type: TYPE_NORMAL
- en: password = 'admin'
  prefs: []
  type: TYPE_NORMAL
- en: Prepare the connection to the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: odoo = odoorpc.ODOO('localhost', port=8017)
  prefs: []
  type: TYPE_NORMAL
- en: odoo.login(db_name, user_name, password)  # login
  prefs: []
  type: TYPE_NORMAL
- en: rooms_info = odoo.execute('hostel.room', 'search_read',
  prefs: []
  type: TYPE_NORMAL
- en: '[[''name'', ''ilike'', ''Standard'']])'
  prefs: []
  type: TYPE_NORMAL
- en: print(rooms_info)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
