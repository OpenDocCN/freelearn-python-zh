- en: Chapter 7. Programming Across Machine Boundaries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第7章 编程跨越机器边界
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Executing a remote shell command using telnet
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用telnet执行远程shell命令
- en: Copying a file to a remote machine by SFTP
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过SFTP将文件复制到远程机器
- en: Printing a remote machine's CPU information
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印远程机器的CPU信息
- en: Installing a Python package remotely
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程安装Python包
- en: Running a MySQL command remotely
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程运行MySQL命令
- en: Transferring files to a remote machine over SSH
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过SSH将文件传输到远程机器
- en: Configuring Apache remotely to host a website
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 远程配置Apache以托管网站
- en: Introduction
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: This chapter promotes some interesting Python libraries. The recipes are presented
    aiming at the system administrators and advanced Python programmers who like to
    write code that connects to remote systems and executes commands. The chapter
    begins with lightweight recipes with a built-in Python library, `telnetlib`. It
    then brings `Paramiko`, a well-known remote access library. Finally, the powerful
    remote system administration library, `fabric`, is presented. The `fabric` library
    is loved by developers who regularly script for automatic deployments, for example,
    deploying web applications or building custom application binaries.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本章推荐一些有趣的Python库。这些配方旨在面向系统管理员和喜欢编写连接到远程系统并执行命令的代码的高级Python程序员。本章从使用内置的Python库`telnetlib`的轻量级配方开始。然后引入了著名的远程访问库`Paramiko`。最后，介绍了功能强大的远程系统管理库`fabric`。`fabric`库受到经常为自动部署编写脚本的开发者的喜爱，例如部署Web应用程序或构建自定义应用程序的二进制文件。
- en: Executing a remote shell command using telnet
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用telnet执行远程shell命令
- en: If you need to connect an old network switch or router via telnet, you can do
    so from a Python script instead of using a bash script or an interactive shell.
    This recipe will create a simple telnet session. It will show you how to execute
    shell commands to the remote host.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要通过telnet连接到旧的网络交换机或路由器，您可以从Python脚本而不是使用bash脚本或交互式shell中这样做。此配方将创建一个简单的telnet会话。它将向您展示如何向远程主机执行shell命令。
- en: Getting ready
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need to install the telnet server on your machine and ensure that it''s
    up and running. You can use a package manager that is specific to your operating
    system to install the telnet server package. For example, on Debian/Ubuntu, you
    can use `apt-get` or `aptitude` to install the `telnetd` package, as shown in
    the following command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要在您的机器上安装telnet服务器并确保它已启动并运行。您可以使用针对您操作系统的包管理器来安装telnet服务器包。例如，在Debian/Ubuntu上，您可以使用`apt-get`或`aptitude`来安装`telnetd`包，如下面的命令所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let us define a function that will take a user's login credentials from the
    command prompt and connect to a telnet server.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们定义一个函数，该函数将从命令提示符获取用户的登录凭证并连接到telnet服务器。
- en: Upon successful connection, it will send the Unix `'ls'` command. Then, it will
    display the output of the command, for example, listing the contents of a directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 连接成功后，它将发送Unix的`'ls'`命令。然后，它将显示命令的输出，例如，列出目录的内容。
- en: 'Listing 7.1 shows the code for a telnet session that executes a Unix command
    remotely as follows:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.1显示了执行远程Unix命令的telnet会话的代码如下：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you run a telnet server on your local machine and run this code, it will
    ask you for your remote user account and password. The following output shows
    a telnet session executed on a Debian machine:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在本地机器上运行telnet服务器并运行此代码，它将要求您输入远程用户账户和密码。以下输出显示了在Debian机器上执行的telnet会话：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How it works...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe relies on Python's built-in `telnetlib` networking library to create
    a telnet session. The `run_telnet_session()` function takes the username and password
    from the command prompt. The `getpass` module's `getpass()` function is used to
    get the password as this function won't let you see what is typed on the screen.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方依赖于Python的内置`telnetlib`网络库来创建一个telnet会话。`run_telnet_session()`函数从命令提示符获取用户名和密码。使用`getpass`模块的`getpass()`函数来获取密码，因为这个函数不会让您看到屏幕上输入的内容。
- en: In order to create a telnet session, you need to instantiate a `Telnet()` class,
    which takes a hostname parameter to initialize. In this case, `localhost` is used
    as the hostname. You can use the `argparse` module to pass a hostname to this
    script.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建一个telnet会话，您需要实例化一个`Telnet()`类，该类需要一个主机名参数来初始化。在这种情况下，使用`localhost`作为主机名。您可以使用`argparse`模块将主机名传递给此脚本。
- en: The telnet session's remote output can be captured with the `read_until()` method.
    In the first case, the login prompt is detected using this method. Then, the username
    with a new line feed is sent to the remote machine by the `write()` method (in
    this case, the same machine accessed as if it's remote). Similarly, the password
    was supplied to the remote host.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`read_until()`方法捕获telnet会话的远程输出。在第一种情况下，使用此方法检测到登录提示。然后，通过`write()`方法（在这种情况下，与远程访问相同的机器）将带有新行换行的用户名发送到远程机器。同样，密码也被提供给远程主机。
- en: Then, the `ls` command is sent to be executed. Finally, to disconnect from the
    remote host, the `exit` command is sent, and all session data received from the
    remote host is printed on screen using the `read_all()` method.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，将`ls`命令发送以执行。最后，为了从远程主机断开连接，发送`exit`命令，并使用`read_all()`方法在屏幕上打印从远程主机接收到的所有会话数据。
- en: Copying a file to a remote machine by SFTP
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过SFTP将文件复制到远程机器
- en: If you want to upload or copy a file from your local machine to a remote machine
    securely, you can do so via **Secure File Transfer Protocol** (**SFTP**).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想安全地将文件从本地机器上传或复制到远程机器，您可以通过**安全文件传输协议**（**SFTP**）来实现。
- en: Getting ready
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe uses a powerful third-party networking library, `Paramiko`, to
    show you an example of file copying by SFTP, as shown in the following command.
    You can grab the latest code of `Paramiko` from GitHub ([https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko))
    or PyPI:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱使用了一个强大的第三方网络库`Paramiko`，展示了如何通过SFTP进行文件复制的示例，如下所示命令。您可以从GitHub([https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko))或PyPI获取`Paramiko`的最新代码：
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'This recipe takes a few command-line inputs: the remote hostname, server port,
    source filename, and destination filename. For the sake of simplicity, we can
    use default or hard-coded values for these input parameters.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱接受一些命令行输入：远程主机名、服务器端口、源文件名和目标文件名。为了简单起见，我们可以为这些输入参数使用默认值或硬编码值。
- en: In order to connect to the remote host, we need the username and password, which
    can be obtained from the user from the command line.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了连接到远程主机，我们需要用户名和密码，这些可以从命令行中的用户那里获取。
- en: 'Listing 7.2 explains how to copy a file remotely by SFTP, as shown in the following
    code:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.2解释了如何通过SFTP远程复制文件，如下所示代码：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'If you run this script, you will see an output similar to the following:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您运行此脚本，您将看到类似以下输出的结果：
- en: '[PRE5]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How it works...
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: This recipe can take the various inputs for connecting to a remote machine and
    copying a file over SFTP.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱可以接受连接到远程机器和通过SFTP复制文件的多种输入。
- en: This recipe passes the command-line input to the `copy_file()` function. It
    then creates a SSH client calling the `SSHClient` class of `paramiko`. The client
    needs to load the system host keys. It then connects to the remote system, thus
    creating an instance of the `transport` class. The actual SFTP connection object,
    `sftp,` is created by calling the `SFTPClient.from_transport()` function of `paramiko`.
    This takes the `transport` instance as an input.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将命令行输入传递给`copy_file()`函数。然后，它创建一个SSH客户端，调用`paramiko`的`SSHClient`类。客户端需要加载系统主机密钥。然后，它连接到远程系统，从而创建`transport`类的实例。实际的SFTP连接对象`sftp`是通过调用`paramiko`的`SFTPClient.from_transport()`函数创建的。这个函数需要一个`transport`实例作为输入。
- en: After the SFTP connection is ready, the local file is copied over this connection
    to the remote host using the `put()` method.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在SFTP连接就绪后，使用`put()`方法将本地文件通过此连接复制到远程主机。
- en: Finally, it's a good idea to clean up the SFTP connection and underlying objects
    by calling the `close()` method separately on each object.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，通过分别在每个对象上调用`close()`方法来清理SFTP连接和底层对象是个好主意。
- en: Printing a remote machine's CPU information
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打印远程机器的CPU信息
- en: Sometimes, we need to run a simple command on a remote machine over SSH. For
    example, we need to query the remote machine's CPU or RAM information. This can
    be done from a Python script as shown in this recipe.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要通过SSH在远程机器上运行一个简单的命令。例如，我们需要查询远程机器的CPU或RAM信息。这可以通过如下的Python脚本实现。
- en: Getting ready
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You need to install the third-party package, `Paramiko`, as shown in the following
    command, from the source available from GitHub''s repository at [https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装第三方包`Paramiko`，如下所示命令，从GitHub仓库[https://github.com/paramiko/paramiko](https://github.com/paramiko/paramiko)提供的源代码中安装：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How to do it...
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: We can use the `paramiko` module to create a remote session to a Unix machine.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`paramiko`模块创建到Unix机器的远程会话。
- en: Then, from this session, we can read the remote machine's `/proc/cpuinfo` file
    to extract the CPU information.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，从本次会话中，我们可以读取远程机器的`/proc/cpuinfo`文件以提取CPU信息。
- en: 'Listing 7.3 gives the code for printing a remote machine''s CPU information,
    as follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.3给出了打印远程机器CPU信息的代码，如下所示：
- en: '[PRE7]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Running this script will show the CPU information of a given host, in this
    case, the local machine, as follows:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此脚本将显示指定主机的CPU信息，在本例中，为本地计算机，如下所示：
- en: '[PRE8]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we collect the connection parameters such as hostname, port, username,
    and password. These parameters are then passed to the `print_remote_cpu_info()`
    function.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们收集连接参数，如主机名、端口、用户名和密码。然后，将这些参数传递给`print_remote_cpu_info()`函数。
- en: This function creates an SSH client session by calling the `transport` class
    of `paramiko`. The connection is made thereafter using the supplied username and
    password. We can create a raw communication session using `open_channel()` on
    the SSH client. In order to execute a command on the remote host, `exec_command()`
    can be used.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数通过调用`paramiko`的`transport`类创建SSH客户端会话。之后使用提供的用户名和密码建立连接。我们可以使用SSH客户端上的`open_channel()`创建原始通信会话。为了在远程主机上执行命令，可以使用`exec_command()`。
- en: After sending the command to the remote host, the response from the remote host
    can be caught by blocking the `recv_ready()` event of the session object. We can
    create two lists, `stdout_data` and `stderr_data`, and use them to store the remote
    output and error messages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在向远程主机发送命令后，可以通过阻塞会话对象的`recv_ready()`事件来捕获远程主机的响应。我们可以创建两个列表，`stdout_data`和`stderr_data`，并使用它们来存储远程输出和错误消息。
- en: When the command exits in the remote machine, it can be detected using the `exit_status_ready()`
    method, and the remote session data can be concatenated using the `join()` string
    method.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当命令在远程机器上退出时，可以使用`exit_status_ready()`方法检测，并使用`join()`字符串方法连接远程会话数据。
- en: Finally, the session and client connection can be closed using the `close()`
    method on each object.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，可以使用每个对象的`close()`方法关闭会话和客户端连接。
- en: Installing a Python package remotely
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程安装Python包
- en: While dealing with the remote host in the previous recipes, you may have noticed
    that we need to do a lot of stuff related to the connection setup. For efficient
    execution, it is desirable that they become abstract and only the relevant high-level
    part is exposed to the programmers. It is cumbersome and slow to always explicitly
    set up connections to execute commands remotely.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理远程主机的前一个示例中，您可能已经注意到我们需要做很多与连接设置相关的事情。为了高效执行，最好将它们抽象化，只将相关的高级部分暴露给程序员。总是明确设置连接以执行远程命令既繁琐又慢。
- en: Fabric ([http://fabfile.org/](http://fabfile.org/)), a third-party Python module,
    solves this problem. It only exposes as many APIs as can be used to efficiently
    interact with remote machines.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric ([http://fabfile.org/](http://fabfile.org/))，一个第三方Python模块，解决了这个问题。它只暴露了可以用来高效与远程机器交互的API。
- en: In this recipe, a simple example of using Fabric will be shown.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本例中，将展示使用Fabric的简单示例。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We need Fabric to be installed first. You can install Fabric using the Python
    packing tools, `pip` or `easy_install`, as shown in the following command. Fabric
    relies on the `paramiko` module, which will be installed automatically.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要首先安装Fabric。您可以使用Python打包工具`pip`或`easy_install`安装Fabric，如下所示。Fabric依赖于`paramiko`模块，它将自动安装。
- en: '[PRE9]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, we will connect the remote host using the SSH protocol. So, it''s necessary
    to run the SSH server on the remote end. If you like to test with your local machine
    (pretending to access as a remote machine), you may install the `openssh` server
    package locally. On a Debian/Ubuntu machine, this can be done with the package
    manager, `apt-get`, as shown in the following command:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用SSH协议连接远程主机。因此，在远程端运行SSH服务器是必要的。如果您想使用本地计算机进行测试（假装访问远程机器），您可以在本地安装`openssh`服务器包。在Debian/Ubuntu机器上，可以使用包管理器`apt-get`完成此操作，如下所示：
- en: '[PRE10]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: How to do it...
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Here's the code for installing a Python package using Fabric.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这是使用Fabric安装Python包的代码。
- en: 'Listing 7.4 gives the code for installing a Python package remotely as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.4给出了远程安装Python包的代码，如下所示：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Fabric scripts are run in a different way as compared to the normal Python scripts.
    All functions using the `fabric` library must be referred to a Python script called
    `fabfile.py`. There's no traditional `__main__` directive in this script. Instead,
    you can define your method using the Fabric APIs and execute these methods using
    the command-line tool, `fab`. So, instead of calling `python <script>.py`, you
    can run a Fabric script, which is defined in a `fabfile.py` script and located
    under the current directory, by calling `fab one_function_name another_function_name`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 与常规 Python 脚本相比，Fabric 脚本的运行方式不同。所有使用 `fabric` 库的函数都必须引用一个名为 `fabfile.py` 的
    Python 脚本。在这个脚本中没有传统的 `__main__` 指令。相反，你可以使用 Fabric API 定义你的方法，并使用命令行工具 `fab`
    执行这些方法。因此，你不需要调用 `python <script>.py`，而是可以通过调用 `fab one_function_name another_function_name`
    来运行定义在 `fabfile.py` 脚本中并位于当前目录下的 Fabric 脚本。
- en: 'So, let''s create a `fabfile.py` script as shown in the following command.
    For the sake of simplicity, you can create a file shortcut or link from any file
    to a `fabfile.py` script. First, delete any previously created `fabfile.py` file
    and create a shortcut to `fabfile`:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，让我们创建一个 `fabfile.py` 脚本，如下所示命令。为了简化，你可以从任何文件创建一个到 `fabfile.py` 脚本的文件快捷方式或链接。首先，删除任何之前创建的
    `fabfile.py` 文件，并创建一个到 `fabfile` 的快捷方式：
- en: '[PRE12]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If you call the fabfile now, it will produce the following output after installing
    the Python package, `yolk`, remotely as follows:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你现在调用 fabfile，它将在远程安装 Python 包 `yolk` 后产生以下输出：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: How it works...
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe demonstrates how a system administration task can be done remotely
    using a Python script. There are two functions present in this script. The `remote_server()`
    function sets up the Fabric `env` environment variables, for example, the hostname,
    user, password, and so on.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱演示了如何使用 Python 脚本远程执行系统管理任务。在这个脚本中有两个函数。`remote_server()` 函数设置 Fabric `env`
    环境变量，例如主机名、用户、密码等。
- en: The other function, `install_package()`, calls the `run()` function. This takes
    the commands that you usually type in the command line. In this case, the command
    is `pip install yolk`. This installs the Python package, `yolk`, with `pip`. As
    compared to the previously described recipes, this method of running a remote
    command using Fabric is easier and more efficient.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个功能，`install_package()`，调用 `run()` 函数。这接受你在命令行中通常输入的命令。在这种情况下，命令是 `pip install
    yolk`。这使用 `pip` 安装 Python 包 `yolk`。与之前描述的食谱相比，使用 Fabric 运行远程命令的方法更简单、更高效。
- en: Running a MySQL command remotely
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在远程运行 MySQL 命令
- en: If you ever need to administer a MySQL server remotely, this recipe is for you.
    It will show you how to send database commands to a remote MySQL server from a
    Python script. If you need to set up a web application that relies on a backend
    database, this recipe can be used as a part of your web application setup process.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要远程管理 MySQL 服务器，这个食谱就适合你。它将展示如何从 Python 脚本向远程 MySQL 服务器发送数据库命令。如果你需要设置一个依赖于后端数据库的
    Web 应用程序，这个食谱可以作为你的 Web 应用程序设置过程的一部分使用。
- en: Getting ready
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe also needs Fabric to be installed first. You can install Fabric
    using the Python packing tools, `pip` or `easy_install`, as shown in the following
    command. Fabric relies on the `paramiko` module, which will be installed automatically.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 这个食谱也需要首先安装 Fabric。你可以使用 Python 打包工具 `pip` 或 `easy_install` 来安装 Fabric，如下所示命令。Fabric
    依赖于 `paramiko` 模块，它将被自动安装。
- en: '[PRE14]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Here, we will connect the remote host using the SSH protocol. So, it''s necessary
    to run the SSH server on the remote end. You also need to run a MySQL server on
    the remote host. On a Debian/Ubuntu machine, this can be done with the package
    manager, `apt-get`, as shown in the following command:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用 SSH 协议连接到远程主机。因此，在远程端运行 SSH 服务器是必要的。你还需要在远程主机上运行一个 MySQL 服务器。在 Debian/Ubuntu
    系统上，可以使用包管理器 `apt-get` 来完成，如下所示命令：
- en: '[PRE15]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We defined the Fabric environment settings and a few functions for administering
    MySQL remotely. In these functions, instead of calling the `mysql` executable
    directly, we send the SQL commands to `mysql` via `echo`. This ensures that arguments
    are passed properly to the `mysql` executable.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了 Fabric 环境设置和一些用于远程管理 MySQL 的函数。在这些函数中，我们不是直接调用 `mysql` 可执行文件，而是通过 `echo`
    将 SQL 命令发送到 `mysql`。这确保了参数被正确传递给 `mysql` 可执行文件。
- en: 'Listing 7.5 gives the code for running MySQL commands remotely, as follows:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.5 给出了运行 MySQL 命令的远程代码，如下所示：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In order to run this script, you should create a shortcut, `fabfile.py`. From
    the command line, you can do this by typing the following command:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行此脚本，你应该创建一个快捷方式，`fabfile.py`。从命令行，你可以通过输入以下命令来完成：
- en: '[PRE17]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Then, you can call the `fab` executable in various forms.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以以各种形式调用 `fab` 可执行文件。
- en: 'The following command will show a list of databases (using the SQL query, `show
    databases`):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将显示数据库列表（使用 SQL 查询，`show databases`）：
- en: '[PRE18]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The following command will create a new MySQL database. If you haven't defined
    the Fabric environment variable, `db_name`, a prompt will be shown to enter the
    target database name. This database will be created using the SQL command, `CREATE
    DATABASE <database_name> default character set utf8 collate utf8_unicode_ci;`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下命令将创建一个新的 MySQL 数据库。如果你没有定义 Fabric 环境变量 `db_name`，将显示提示输入目标数据库名称。此数据库将使用 SQL
    命令 `CREATE DATABASE <database_name> default character set utf8 collate utf8_unicode_ci;`
    创建。
- en: '[PRE19]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This Fabric command will show the size of a database:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 Fabric 命令将显示数据库的大小：
- en: '[PRE20]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following Fabric command will use the `mysqldump` and `mysql` executables
    to empty a database. This behavior of this function is similar to the truncating
    of a database, except it removes all the tables. The result is as if you created
    a fresh database without any tables:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Fabric 命令将使用 `mysqldump` 和 `mysql` 可执行文件来清空数据库。此函数的行为类似于数据库截断，但会删除所有表。结果是创建了一个没有任何表的全新数据库：
- en: '[PRE21]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The following will be the output:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以下将是输出：
- en: '[PRE22]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This script defines a few functions that are used with Fabric. The first function,
    `remote_server()`, sets the environment variables. The local loopback IP (`127.0.0.1`)
    is put to the list of hosts. The local system user and MySQL login credentials
    are set and collected via `getpass()`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本定义了一些与 Fabric 一起使用的函数。第一个函数 `remote_server()` 设置环境变量。将本地回环 IP (`127.0.0.1`)
    放到主机列表中。设置本地系统用户和 MySQL 登录凭证，并通过 `getpass()` 收集。
- en: The other function utilizes the Fabric `run()` function to send MySQL commands
    to the remote MySQL server by echoing the command to the `mysql` executable.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个函数利用 Fabric 的 `run()` 函数通过将命令回显到 `mysql` 可执行文件来向远程 MySQL 服务器发送 MySQL 命令。
- en: The `run_sql()` function is a generic function that can be used as a wrapper
    in other functions. For example, the `empty_db()` function calls it to execute
    the SQL commands. This can keep your code a bit more organized and cleaner.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`run_sql()` 函数是一个通用函数，可以用作其他函数的包装器。例如，`empty_db()` 函数调用它来执行 SQL 命令。这可以使你的代码更加有组织且更干净。'
- en: Transferring files to a remote machine over SSH
  id: totrans-112
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过 SSH 将文件传输到远程机器
- en: While automating a remote system administration task using Fabric, if you want
    to transfer files between your local machine and the remote machine with SSH,
    you can use the Fabric's built-in `get()` and `put()` functions. This recipe shows
    you how we can create custom functions to transfer files smartly by checking the
    disk space before and after the transfer.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Fabric 自动化远程系统管理任务时，如果你想通过 SSH 在本地机器和远程机器之间传输文件，你可以使用 Fabric 内置的 `get()`
    和 `put()` 函数。这个菜谱展示了我们如何通过在传输前后检查磁盘空间来创建自定义函数，以智能地传输文件。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe also needs Fabric to be installed first. You can install Fabric
    using Python packing tools, `pip` or `easy_install`, as shown in the following
    command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此菜谱也需要首先安装 Fabric。你可以使用 Python 打包工具 `pip` 或 `easy_install` 来安装 Fabric，如下所示：
- en: '[PRE23]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Here, we will connect the remote host using the SSH protocol. So, it's necessary
    to install and run the SSH server on the remote host.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用 SSH 协议连接远程主机。因此，在远程主机上安装和运行 SSH 服务器是必要的。
- en: How to do it...
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let us first set up the Fabric environment variables and then create two functions,
    one for downloading files and the other for uploading files.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先设置 Fabric 环境变量，然后创建两个函数，一个用于下载文件，另一个用于上传文件。
- en: 'Listing 7.6 gives the code for transferring files to a remote machine over
    SSH as follows:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 列表 7.6 给出了通过 SSH 将文件传输到远程机器的代码如下：
- en: '[PRE24]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'In order to run this script, you should create a shortcut, `fabfile.py`. From
    the command line, you can do this by typing the following command:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行此脚本，你应该创建一个快捷方式，`fabfile.py`。从命令行，你可以通过输入以下命令来完成：
- en: '[PRE25]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Then, you can call the `fab` executable in various forms.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你可以以各种形式调用 `fab` 可执行文件。
- en: 'First, to log on to a remote server using your script, you can run the following
    Fabric function:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，为了使用你的脚本登录到远程服务器，你可以运行以下 Fabric 函数：
- en: '[PRE26]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'This will give you a minimum shell-like environment. Then, you can download
    a file from a remote server to your local machine using the following command:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为您提供最小化的shell-like环境。然后，您可以使用以下命令从远程服务器下载文件到本地机器：
- en: '[PRE27]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Similarly, to upload a file, you can use the following command:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，要上传文件，可以使用以下命令：
- en: '[PRE28]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In this example, the local machine is used via SSH. So, you have to install
    the SSH server locally to run these scripts. Otherwise, you can modify the `remote_server()`
    function and point it to a remote server, as follows:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中，通过SSH使用本地机器。因此，您必须在本地上安装SSH服务器才能运行这些脚本。否则，您可以修改`remote_server()`函数并将其指向远程服务器，如下所示：
- en: '[PRE29]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: In this recipe, we used a few of Fabric's built-in functions to transfer files
    between local and remote machines. The `local()` function does an action on the
    local machine, whereas the remote actions are carried out by the `run()` function.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在此配方中，我们使用了一些Fabric的内置函数在本地机和远程机之间传输文件。`local()`函数在本地机上执行操作，而远程操作由`run()`函数执行。
- en: This is useful to check the available disk space on the target machine before
    uploading a file and vice versa.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在上传文件之前检查目标机器上的可用磁盘空间非常有用，反之亦然。
- en: This is achieved by using the Unix command, `df`. The source and destination
    file paths can be specified via the command prompt or can be hard coded in the
    source file in case of an unattended automatic execution.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过使用Unix命令`df`实现的。源文件路径和目标文件路径可以通过命令提示符指定，或者在无人值守的自动执行的情况下，可以在源文件中硬编码。
- en: Configuring Apache remotely to host a website
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 远程配置Apache托管网站
- en: Fabric functions can be run as both regular and super users. If you need to
    host a website in a remote Apache web server, you need the administrative user
    privileges to create configuration files and restart the web server. This recipe
    introduces the Fabric `sudo()` function that runs commands in the remote machine
    as a superuser. Here, we would like to configure the Apache virtual host for running
    a website.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: Fabric函数可以作为普通用户和超级用户运行。如果您需要在远程Apache Web服务器上托管网站，则需要管理员用户权限来创建配置文件和重新启动Web服务器。此配方介绍了Fabric的`sudo()`函数，该函数在远程机器上以超级用户身份运行命令。在此，我们希望配置Apache虚拟主机以运行网站。
- en: Getting ready
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This recipe needs Fabric to be installed first on your local machine. You can
    install Fabric using the Python packing tools, `pip` or `easy_install`, as shown
    in the following command:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方需要首先在您的本地机器上安装Fabric。您可以使用Python打包工具`pip`或`easy_install`安装Fabric，如下所示：
- en: '[PRE30]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Here, we will connect the remote host using the SSH protocol. So, it''s necessary
    to install and run the SSH server on the remote host. It is also assumed that
    the Apache web server is installed and running on the remote server. On a Debian/Ubuntu
    machine, this can be done with the package manager, `apt-get`, as shown in the
    following command:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将使用SSH协议连接远程主机。因此，在远程主机上安装和运行SSH服务器是必要的。还假设Apache Web服务器已安装在远程服务器上。在Debian/Ubuntu机器上，可以使用包管理器`apt-get`完成此操作，如下所示：
- en: '[PRE31]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: First, we collect our Apache installation paths and some configuration parameters,
    such as web server user, group, virtual host configuration path, and initialization
    scripts. These parameters can be defined as constants.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们收集Apache安装路径和一些配置参数，例如，Web服务器用户、组、虚拟主机配置路径和初始化脚本。这些参数可以定义为常量。
- en: Then, we set up two functions, `remote_server()` and `setup_vhost()`, to execute
    the Apache configuration task using Fabric.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们设置两个函数，`remote_server()`和`setup_vhost()`，使用Fabric执行Apache配置任务。
- en: 'Listing 7.7 gives the code for configuring Apache remotely to host a website
    as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 列表7.7提供了以下配置Apache远程托管网站的代码：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In order to run this script, the following line should be appended on your
    host file, for example,. `/etc/hosts`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行此脚本，应在您的宿主文件中添加以下行，例如，`/etc/hosts`：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'You should also create a shortcut, `fabfile.py`. From the command line, you
    can do this by typing the following command:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 您还应该创建一个快捷方式，`fabfile.py`。从命令行，您可以通过输入以下命令来完成此操作：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Then, you can call the `fab` executable in various forms.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您可以通过多种形式调用`fab`可执行文件。
- en: 'First, to log on to a remote server using your script, you can run the following
    Fabric function. This will result in the following output:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，要使用您的脚本登录到远程服务器，您可以运行以下Fabric函数。这将产生以下输出：
- en: '[PRE35]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'After you run this recipe, you can open your browser and try to access the
    path you set up on the host file (for example, `/etc/hosts`). It should show the
    following output on your browser:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此配方后，您可以在浏览器中打开并尝试访问您在主机文件（例如，`/etc/hosts`）上设置的路径。它应该在您的浏览器上显示以下输出：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works...
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This recipe sets up the initial Apache configuration parameters as constants
    and then defines two functions. In the `remote_server()` function, the usual Fabric
    environment parameters, for example, hosts, user, password, and so on, are placed.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 此配方将初始 Apache 配置参数设置为常量，然后定义两个函数。在 `remote_server()` 函数中，放置了常用的 Fabric 环境参数，例如，主机、用户、密码等。
- en: The `setup_vhost()` function executes a series of privileged commands. First,
    it checks whether the website's document root path is already created using the
    `exists()` function. If it exists, it removes that path and creates it in the
    next step. Using `chown`, it ensures that the path is owned by the current user.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`setup_vhost()` 函数执行一系列特权命令。首先，它使用 `exists()` 函数检查网站的文档根路径是否已经创建。如果已存在，它将删除该路径并在下一步中重新创建。使用
    `chown` 命令确保该路径由当前用户拥有。'
- en: In the next step, it uploads a bare bone HTML file, `index.html`, to the document
    root path. After uploading the file, it reverts the permission of the files to
    the web server user.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，它将一个裸骨 HTML 文件，`index.html`，上传到文档根路径。上传文件后，它将文件的权限重置为 web 服务器用户。
- en: After setting up the document root, the `setup_vhost()` function uploads the
    supplied `vhost.conf` file to the Apache site configuration path. Then, it sets
    its owner as the root user.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置文档根目录后，`setup_vhost()` 函数将提供的 `vhost.conf` 文件上传到 Apache 网站配置路径。然后，它将该路径的所有者设置为
    root 用户。
- en: Finally, the script restarts the Apache service so that the configuration is
    activated. If the configuration is successful, you should see the sample output
    shown earlier when you open the URL, [http://abc.remote-server.org/](http://abc.remote-server.org/),
    in your browser.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，脚本重新启动 Apache 服务，以便激活配置。如果配置成功，当您在浏览器中打开 URL [http://abc.remote-server.org/](http://abc.remote-server.org/)
    时，您应该看到之前显示的示例输出。
