- en: Chapter 13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Exercises With a Quotient and a Remainder
  prefs: []
  type: TYPE_NORMAL
- en: 13.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'What types of problems might require the use of the quotient and the remainder
    of an integer division? While there may not be a simple answer to this question,
    quotients and remainders can be used to:'
  prefs: []
  type: TYPE_NORMAL
- en: ►split a number into individual digits
  prefs: []
  type: TYPE_NORMAL
- en: ►examine if an integer is odd or even
  prefs: []
  type: TYPE_NORMAL
- en: ►examine if a number is a multiple of another number
  prefs: []
  type: TYPE_NORMAL
- en: ►convert an elapsed time (in seconds) to hours, minutes, and seconds
  prefs: []
  type: TYPE_NORMAL
- en: ►convert an amount of money (in USD) to a number of $100 notes, $50 notes, $20
    notes, and such
  prefs: []
  type: TYPE_NORMAL
- en: ►calculate the greatest common divisor
  prefs: []
  type: TYPE_NORMAL
- en: ►determine if a number is a palindrome
  prefs: []
  type: TYPE_NORMAL
- en: ►count the number of digits within a number
  prefs: []
  type: TYPE_NORMAL
- en: ►determine how many times a specific digit occurs within a number
  prefs: []
  type: TYPE_NORMAL
- en: Of course, these are some of the uses and certainly you can find so many others.
    Next you will see some exercises that make use of the quotient and the remainder
    of integer division.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1-1 Calculating the Quotient and Remainder of Integer Division
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter two integers and then
    calculates the quotient and the remainder of the integer division.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: You can use the ( // ) and the ( % ) operators of Python. The former performs
    an integer division and returns the integer quotient whereas the latter performs
    an integer division and returns the integer remainder. The solution is presented
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-1a'
  prefs: []
  type: TYPE_NORMAL
- en: 'number1 = int(input("Enter first number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'number2 = int(input("Enter second number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: q = number1 // number2
  prefs: []
  type: TYPE_NORMAL
- en: r = number1 % number2
  prefs: []
  type: TYPE_NORMAL
- en: print("Integer Quotient:", q, "\nInteger Remainder:", r)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In flowcharts, in order to calculate the quotient and the
    remainder of an integer division, you can use the popular DIV and MOD operators.
    An example is shown here.'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter13-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: A more “Pythonic” way is to use the divmod() function as shown in the example
    that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-1b'
  prefs: []
  type: TYPE_NORMAL
- en: 'number1 = int(input("Enter first number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'number2 = int(input("Enter second number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: q, r = divmod(number1, number2)
  prefs: []
  type: TYPE_NORMAL
- en: print("Integer Quotient:", q, "\nInteger Remainder:", r)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1-2 Finding the Sum of Digits
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a four-digit integer and
    then calculates the sum of its digits.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: What you should keep in mind here is that statements like this one
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a four-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: assign the user-provided four-digit integer to one single variable, number,
    and not to four individual variables. So, after the user enters the four-digit
    integer, the program must split the integer into its four digits and assign each
    digit to a separate variable. Then it can calculate the sum of these four variables
    and get the required result. There are two approaches available.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to understand the first approach using an arithmetic example. Take
    the number 6753, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '| First digit = 6 | The first digit can be isolated if you divide the user‑provided
    number by 1000 using the ( // ) operator to get the integer quotient digit1 =
    6753 // 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| Remaining digits = 753 | The remaining digits can be isolated if you divide
    the user‑provided number by 1000 again, this time using the ( % ) operator to
    get the integer remainder r = 6753 % 1000 |'
  prefs: []
  type: TYPE_TB
- en: '| Second digit = 7 | The second digit can be isolated if you divide the remaining
    digits by 100 using the ( // ) operator to get the integer quotient digit2 = 753
    // 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Remaining digits = 53 | The remaining digits are now r = 753 % 100 |'
  prefs: []
  type: TYPE_TB
- en: '| Third digit = 5 | The third digit can be isolated if you divide the remaining
    digits by 10 using the ( // ) operator to get the integer quotient digit3 = 53
    // 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Fourth digit = 3 | The last remaining digit, which happens to be the fourth
    digit, is digit4 = 53 % 10 |'
  prefs: []
  type: TYPE_TB
- en: The Python program that solves this algorithm is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-2a'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a four-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = number // 1000
  prefs: []
  type: TYPE_NORMAL
- en: r = number % 1000
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = r // 100
  prefs: []
  type: TYPE_NORMAL
- en: r = r % 100
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit4 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: total = digit1 + digit2 + digit3 + digit4
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: The trace table for the program that you have just seen is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | number | digit1 | digit2 | digit3 | digit4 | r
    | total |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | number = int(input("Enter … | User enters 6753 | 6753 | ? | ? | ? | ?
    | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | digit1 = number // 1000 |   | 6753 | 6 | ? | ? | ? | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | r = number % 1000 |   | 6753 | 6 | ? | ? | ? | 753 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | digit2 = r // 100 |   | 6753 | 6 | 7 | ? | ? | 753 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | r = r % 100 |   | 6753 | 6 | 7 | ? | ? | 53 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | digit3 = r // 10 |   | 6753 | 6 | 7 | 5 | ? | 53 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | digit4 = r % 10 |   | 6753 | 6 | 7 | 5 | 3 | 53 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | total = digit1 + digit2 + digit3 + digit4 |   | 6753 | 6 | 7 | 5 | 3
    | 53 | 21 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | print(total) | It displays: 21 |'
  prefs: []
  type: TYPE_TB
- en: To further help you, find below a general purpose Python program that can be
    used to split any given integer. Since the length of your program depends on the
    number of digits, N, all you have to do is write N−1 pairs of statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter an N-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = number // 10^(N-1)
  prefs: []
  type: TYPE_NORMAL
- en: r = number % 10^(N-1)
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = r // 10^(N-2)
  prefs: []
  type: TYPE_NORMAL
- en: r = r % 10^(N-2)
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: digit(N-2) = r // 100
  prefs: []
  type: TYPE_NORMAL
- en: r = r % 100
  prefs: []
  type: TYPE_NORMAL
- en: digit(N-1) = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit(N) = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to split a six-digit integer, you need to write five
    pairs of statements as shown in the program that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-2b'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter an six-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = number // 100000
  prefs: []
  type: TYPE_NORMAL
- en: r = number % 100000
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = r // 10000
  prefs: []
  type: TYPE_NORMAL
- en: r = r % 10000
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = r // 1000
  prefs: []
  type: TYPE_NORMAL
- en: r = r % 1000
  prefs: []
  type: TYPE_NORMAL
- en: digit4 = r // 100
  prefs: []
  type: TYPE_NORMAL
- en: r = r % 100
  prefs: []
  type: TYPE_NORMAL
- en: digit5 = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit6 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: print(digit1, digit2, digit3, digit4, digit5, digit6)
  prefs: []
  type: TYPE_NORMAL
- en: This approach, however, can be refined a little using the divmod() function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-2c'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter an six-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit1, r = divmod(number, 100000)
  prefs: []
  type: TYPE_NORMAL
- en: digit2, r = divmod(r, 10000)
  prefs: []
  type: TYPE_NORMAL
- en: digit3, r = divmod(r, 1000)
  prefs: []
  type: TYPE_NORMAL
- en: digit4, r = divmod(r, 100)
  prefs: []
  type: TYPE_NORMAL
- en: digit5, digit6 = divmod(r, 10)
  prefs: []
  type: TYPE_NORMAL
- en: print(digit1, digit2, digit3, digit4, digit5, digit6)
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: 'For a four-digit given integer, the first approach performs three pairs of
    divisions—first by 1000, then by 100, and finally by 10—isolating the digits from
    left to right. In contrast, the three pairs of divisions in this second approach
    are all by 10, isolating the digits from right to left. Once again, to delve deeper
    into this approach, let''s use an arithmetic example. Consider the same user-provided
    number: 6753.'
  prefs: []
  type: TYPE_NORMAL
- en: '| Fourth digit = 3 | The fourth digit can be isolated if you divide the user‑provided
    number by 10 using the ( % ) operator to get the integer remainder digit4 = 6753
    % 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Remaining digits = 675 | The remaining digits can be isolated if you divide
    the user‑provided number by 10 again, this time using the ( // ) operator to get
    the integer quotient r = 6753 // 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Third digit = 5 | The third digit can be isolated if you divide the remaining
    digits by 10 using the ( % ) operator to get the integer remainder digit3 = 675
    % 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Remaining digits = 67 | The remaining digits are now r = 675 // 10 |'
  prefs: []
  type: TYPE_TB
- en: '| Second digit = 7 | The second digit can be isolated if you divide the remaining
    digits by 10 using the ( % ) operator to get the integer remainder digit2 = 67
    % 10 |'
  prefs: []
  type: TYPE_TB
- en: '| First digit = 6 | The last remaining digit, which happens to be the first
    digit, is digit1 = 67 // 10 |'
  prefs: []
  type: TYPE_TB
- en: The Python program for this algorithm is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-2d'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a four-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit4 = number % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = number // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: total = digit1 + digit2 + digit3 + digit4
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: To further help you, find below a general purpose Python program that can be
    used to split any given integer. This program uses the second approach. Once again,
    since the length of your program depends on the number of the digits, N, all you
    have to do is write N−1 pairs of statements.
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a N-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit(N) = number % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = number // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit(N-1) = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: For example, if you want to split a five-digit integer, you must use four pairs
    of statements as shown in the program that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-2e'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a five-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit5 = number % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = number // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit4 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: r = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = r % 10
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = r // 10
  prefs: []
  type: TYPE_NORMAL
- en: print(digit1, digit2, digit3, digit4, digit5)
  prefs: []
  type: TYPE_NORMAL
- en: As with the previous example, this approach can be refined a little, using the
    divmod() function.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-2f'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter an five-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: r, digit5 = divmod(number, 10)
  prefs: []
  type: TYPE_NORMAL
- en: r, digit4 = divmod(r, 10)
  prefs: []
  type: TYPE_NORMAL
- en: r, digit3 = divmod(r, 10)
  prefs: []
  type: TYPE_NORMAL
- en: digit1, digit2 = divmod(r, 10)
  prefs: []
  type: TYPE_NORMAL
- en: print(digit1, digit2, digit3, digit4, digit5)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1-3 Displaying an Elapsed Time
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter an integer that represents
    an elapsed time in seconds and then displays it in the format “DD day(s) HH hour(s)
    MM minute(s) and SS second(s)”. For example, if the user enters the number 700005,
    the message “8 day(s) 2 hours 26 minute(s) and 45 second(s)” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: As you may already know, there are 60 seconds in a minute, 3600 seconds in an
    hour (60 × 60), and 86400 seconds in a day (3600 × 24). Let's try to analyze the
    number 700005 using the first approach that you learned in the previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '| Days = 8 | The number of days can be isolated if you divide the user‑provided
    integer by 86400 using the ( // ) operator to get the integer quotient days =
    700005 // 86400 |'
  prefs: []
  type: TYPE_TB
- en: '| Remaining seconds = 8805 | The remaining seconds can be isolated if you divide
    the user‑provided integer by 86400 again, this time using the ( % ) operator to
    get the integer remainder r = 700005 % 86400 |'
  prefs: []
  type: TYPE_TB
- en: '| Hours = 2 | The number of hours can be isolated if you divide the remaining
    seconds by 3600 using the ( // ) operator to get the integer quotient hours =
    8805 // 3600 |'
  prefs: []
  type: TYPE_TB
- en: '| Remaining seconds = 1605 | The remaining seconds are now r = 8805 % 3600
    |'
  prefs: []
  type: TYPE_TB
- en: '| Minutes = 26 | The number of minutes can be isolated if you divide the remaining
    seconds by 60 using the ( // ) operator to get the integer quotient minutes =
    1605 // 60 |'
  prefs: []
  type: TYPE_TB
- en: '| Seconds = 45 | The last remainder, which happens to be the number of seconds
    left, is seconds = 1605 % 60 |'
  prefs: []
  type: TYPE_TB
- en: The Python program for this algorithm is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-3a'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a period of time in seconds: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'days, r = divmod(number, 86400)   # 60 * 60 * 24 = 86400'
  prefs: []
  type: TYPE_NORMAL
- en: hours, r = divmod(r, 3600)        # 60 * 60 = 3600
  prefs: []
  type: TYPE_NORMAL
- en: minutes, seconds = divmod(r, 60)
  prefs: []
  type: TYPE_NORMAL
- en: print(days, "day(s)", hours, "hour(s)")
  prefs: []
  type: TYPE_NORMAL
- en: print(minutes, "minute(s) and", seconds, "second(s)")
  prefs: []
  type: TYPE_NORMAL
- en: You can also solve this exercise using the second approach from the previous
    exercise. All you have to do is first divide by 60, then divide by 60 again, and
    finally divide by 24, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-3b'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a period of time in seconds: "))'
  prefs: []
  type: TYPE_NORMAL
- en: r, seconds = divmod(number, 60)
  prefs: []
  type: TYPE_NORMAL
- en: r, minutes = divmod(r, 60)
  prefs: []
  type: TYPE_NORMAL
- en: days, hours = divmod(r, 24)
  prefs: []
  type: TYPE_NORMAL
- en: print(days, "day(s)", hours, "hour(s)")
  prefs: []
  type: TYPE_NORMAL
- en: print(minutes, "minute(s) and", seconds, "second(s)")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 13.1-4 Reversing a Number
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a three-digit integer
    and then builds and displays its reverse. For example, if the user enters the
    number 875, the program must display 578.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: To isolate the three digits of the user-provided integer, you can use either
    first or second approach. Afterward, the only difficulty in this exercise is to
    build the reversed number.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take the number 875, for example. The three digits, after isolation, will be:'
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = 8
  prefs: []
  type: TYPE_NORMAL
- en: digit2 = 7
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'You can then build the reversed number by simply calculating the sum of the
    products:'
  prefs: []
  type: TYPE_NORMAL
- en: digit3 × 100 + digit2 × 10 + digit1 × 1 = 5 × 100 + 7 × 10 + 8 × 1 = 578
  prefs: []
  type: TYPE_NORMAL
- en: For a change, let's split the user-provided number using the second approach.
    The Python program will look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_13.1-4'
  prefs: []
  type: TYPE_NORMAL
- en: 'number = int(input("Enter a three-digit integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: digit3 = number % 10    #This is the rightmost digit
  prefs: []
  type: TYPE_NORMAL
- en: r = number // 10
  prefs: []
  type: TYPE_NORMAL
- en: 'digit2 = r % 10         #This is the digit in the middle'
  prefs: []
  type: TYPE_NORMAL
- en: digit1 = r // 10        #This is the leftmost digit
  prefs: []
  type: TYPE_NORMAL
- en: reversedNumber = digit3 * 100 + digit2 * 10 + digit1
  prefs: []
  type: TYPE_NORMAL
- en: print(reversedNumber)
  prefs: []
  type: TYPE_NORMAL
- en: 13.2 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Write a Python program that prompts the user to enter any integer and then
    multiplies its last digit by 8 and displays the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: It is not necessary to know the exact number of digits. You can isolate
    the last digit of any integer using a modulus 10 operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 2)Write a Python program that prompts the user to enter a five-digit integer.
    The program must then find and display the sum of the original number and its
    reverse. For example, if the user enters the number 32675, the program must display
    the message “32675 + 57623 = 90298”.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write a Python program that prompts the user to enter an integer and then
    it displays 1 when the number is odd; otherwise, it displays 0\. Try not to use
    any decision control structures since you haven't learned anything about them
    yet!
  prefs: []
  type: TYPE_NORMAL
- en: 4)Write a Python program that prompts the user to enter an integer and then
    it displays 1 when the number is even; otherwise, it displays 0\. Try not to use
    any decision control structures since you haven't learned anything about them
    yet!
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that prompts the user to enter an integer representing
    an elapsed time in seconds and then displays it in the format “WW week(s) DD day(s)
    HH hour(s) MM minute(s) and SS second(s)”. For example, if the user enters the
    number 2000000, the message “3 week(s) 2 day(s) 3 hour(s) 33 minute(s) and 20
    second(s)” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Inside an ATM bank machine there are notes of $20, $10, $5, and $1\. Write
    a Python program that prompts the user to enter the amount of money they want
    to withdraw (using an integer value) and then displays the least number of notes
    the ATM must give. For example, if the user enters an amount of $76, the program
    must display the message “3 note(s) of $20, 1 note(s) of $10, 1 note(s) of $5,
    and 1 note(s) of $1”.
  prefs: []
  type: TYPE_NORMAL
- en: 7)A robot arrives on the moon in order to perform some experiments. Each of
    the robot's steps is 25 inches long. Write a Python program that prompts the user
    to enter the number of steps the robot made and then calculates and displays the
    distance traveled in miles, feet, yards, and inches. For example, if the distance
    traveled is 100000 inches, the program must display the message “1 mile(s), 1017
    yard(s), 2 foot/feet, and 4 inch(es)”.
  prefs: []
  type: TYPE_NORMAL
- en: It is given that
  prefs: []
  type: TYPE_NORMAL
- en: ►1 mile = 63360 inches
  prefs: []
  type: TYPE_NORMAL
- en: ►1 yard = 36 inches
  prefs: []
  type: TYPE_NORMAL
- en: ►1 foot = 12 inches
  prefs: []
  type: TYPE_NORMAL
