["```py\n* Connected to google.com (74.125.236.35) port 80 (#0)\n> GET / HTTP/1.1\n> User-Agent: curl/7.35.0\n> Host: google.com\n> Accept: */*\n>\n< HTTP/1.1 302 Found\n< Cache-Control: private\n< Content-Type: text/html; charset=UTF-8\n< Location: http://www.google.co.in/?gfe_rd=cr&ei=_qMUVKLCIa3M8gewuoCYBQ\n< Content-Length: 261\n< Date: Sat, 13 Sep 2014 20:07:26 GMT\n* Server GFE/2.0 is not blacklisted\n< Server: GFE/2.0\n< Alternate-Protocol: 80:quic,p=0.002\n```", "```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport urllib2\n\ngh_url = 'https://api.github.com'\n\nreq = urllib2.Request(gh_url)\n\npassword_manager = urllib2.HTTPPasswordMgrWithDefaultRealm()\npassword_manager.add_password(None, gh_url, 'user', 'pass')\n\nauth_manager = urllib2.HTTPBasicAuthHandler(password_manager)\nopener = urllib2.build_opener(auth_manager)\n\nurllib2.install_opener(opener)\n\nhandler = urllib2.urlopen(req)\n\nprint handler.getcode()\nprint handler.headers.getheader('content-type')\n\n# ------\n# 200\n# 'application/json'\n\n```", "```py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport requests\n\nr = requests.get('https://api.github.com', auth=('user', 'pass'))\n\nprint r.status_code\nprint r.headers['content-type']\n\n# ------\n# 200\n# 'application/json'\n\n```", "```py\n>>> import requests\n>>> r =  requests.get('http://google.com')\n\n```", "```py\nparameters = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get('url', params=parameters)\n```", "```py\n>>> r = requests.get('https://api.github.com/user', auth=('myemailid.mail.com', 'password'))\n>>> r.status_code\n200\n>>> r.url\nu'https://api.github.com/user'\n>>> r.request\n<PreparedRequest [GET]>\n\n```", "```py\n>>> import requests\n>>> r = requests.get('https://google.com')\n>>> r.content\n'<!doctype html><html itemscope=\"\" itemtype=\"http://schema.org/WebPage\" …..'\n>>> type(r.content)\n<type 'str'>\n>>> r.text\nu'<!doctype html><html itemscope=\"\"\\ itemtype=\"http://schema.org/WebPage\" lang=\"en-IN\"><head><meta content=\"........\n>>> type(r.text)\n<type 'unicode'>\n\n```", "```py\n>>> r.encoding\n'ISO-8859-1'\n>>> r.encoding = 'utf-8'\n\n```", "```py\n>>> r.encoding = None\n>>> r.apparent_encoding\n'ascii'\n\n```", "```py\n>>> r.apparent_encoding = 'ISO-8859-1'\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nAttributeError: can't set attribute\n\n```", "```py\n>>> import json\n>>> url = 'https://api.github.com/some/endpoint'\n>>>  payload = {'some': 'data'}\n>>> headers = {'Content-Type': 'application/json'}\n>>> r = requests.post(url, data=json.dumps(payload), headers=headers)\n\n```", "```py\n>>> url = 'some url'\n>>>  header = {'Authorization' : 'some token'}\n>>> r.request.post(url, headers=headers)\n\n```", "```py\n>>> payload = {'key1': 'value1', 'key2': 'value2'}\n>>> r = request.post(\"some_url/post\", data=payload)\n>>> print(r.text)\n{\n …\n \"form\": {\n \"key2\": \"value2\",\n \"key1\": \"value1\"\n },\n …\n}\n\n```", "```py\n{'name' : file-like-objects} or\n{'name': ('filename',  fileobj)}\n\n```", "```py\n>>> url = 'some api endpoint'\n>>> files = {'file': open('plan.csv', 'rb')}\n>>> r = requests.post(url, files=files)\n\nWe can access the response using 'r.text'.\n>>>  r.text\n{\n …\n \"files\": {\n \"file\": \"< some data … >\"\n },\n ….\n}\n\n```", "```py\n>>> url = 'some url'\n>>> files = {'file': ('plan.csv', open('plan.csv', 'rb'), 'application/csv', {'Expires': '0'})}\n>>> r = requests.post(url, files)\n>>> r.text\n{\n …\n \"files\"\n \"file\": \"< data...>\"\n },\n …\n}\n\n```", "```py\n>>> url = 'some url'\n>>> files = {'file' : ('plan.csv', 'some, strings, to, send')}\n>>> r.text\n{\n …\n \"files\": {\n \"file\": \"some, strings, to, send\"\n },\n …\n}\n\n```", "```py\n>>> r = requests.get('http://google.com')\n>>> r.status_code\n200\n\n```", "```py\n>>> r = requests.get('http://google.com')\n>>> r.status_code == requests.codes.ok\nTrue\n\n```", "```py\n>>> r = requests.get('http://google.com/404')\n>>> r.status_code == requests.codes.ok\nFalse\n\n```", "```py\n>>> bad_request = requests.get('http://google.com/404')\n>>> bad_request.status_code\n404\n>>>bad_request.raise_for_status()\n---------------------------------------------------------------------------\nHTTPError                              Traceback (most recent call last)\n----> bad_request..raise_for_status()\n\nFile \"requests/models.py\",  in raise_for_status(self)\n 771\n 772         if http_error_msg:\n--> 773             raise HTTPError(http_error_msg, response=self)\n 774\n 775     def close(self):\n\nHTTPError: 404 Client Error: Not Found\n\n```", "```py\n>>> bad_request = requests.get('http://google.com')\n>>> bad_request.status_code\n200\n>>> bad_request.raise_for_status()\n>>>\n\n```", "```py\n>>> r = requests.get('http://google.com')\n>>> r.headers\nCaseInsensitiveDict({'alternate-protocol': '80:quic', 'x-xss-protection': '1; mode=block', 'transfer-encoding': 'chunked', 'set-cookie': 'PREF=ID=3c5de2786273fce1:FF=0:TM=1410378309:LM=1410378309:S=DirRRD4dRAxp2Q_3; …..\n\n```", "```py\n>>> r.headers['Content-Type']\n'text/html; charset=ISO-8859-1'\n\n>>>  r.headers.get('content-type')\n'text/html; charset=ISO-8859-1'\n\n```", "```py\n>>> url = 'http://somewebsite/some/cookie/setting/url'\n>>> r = requests.get(url)\n\n>>> r.cookies['some_cookie_name']\n'some_cookie_value'\n\n```", "```py\n>>> url = 'http://httpbin.org/cookies'\n>>> cookies = dict(cookies_are='working')\n\n>>> r = requests.get(url, cookies=cookies)\n>>> r.text\n'{\"cookies\": {\"cookies_are\": \"working\"}}'\n\n```", "```py\n>>> r = requests.get('http:google.com')\n>>> r.url\nu'http://www.google.co.in/?gfe_rd=cr&ei=rgMSVOjiFKnV8ge37YGgCA'\n>>> r.status_code\n200\n>>> r.history\n(<Response [302]>,)\n\n```", "```py\n>>> r = requests.get('http://google.com', allow_redirects=False)\n>>> r.url\nu'http://google.com/'\n>> r.status_code\n302\n>>> r.history\n[ ]\n\n```", "```py\n>>> r = requests.head('http://google.com', allow_redirects=True)\n>>> r.url\nu'http://www.google.co.in/?gfe_rd=cr&ei=RggSVMbIKajV8gfxzID4Ag'\n>>> r.history\n(<Response [302]>,)\n\n```", "```py\n>>> requests.get('http://google.com', timeout=0.03)\n---------------------------------------------------------------------------\nTimeout                                   Traceback (most recent call last)\n…….\n……..\nTimeout: HTTPConnectionPool(host='google.com', port=80): Read timed\\ out. (read timeout=0.03)\n\n```"]