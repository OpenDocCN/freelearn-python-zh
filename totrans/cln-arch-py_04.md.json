["```py\nx = 5        # x is an integer\nx = \"hello\"  # Now x is a string \n```", "```py\ndef add_numbers(a, b):\n    return a + b\n# Works fine, result is 8:\nresult = add_numbers(5, 3)\n# Raises TypeError: unsupported operand type(s) for +: 'int' and 'str':  \nresult = add_numbers(5, \"3\") \n```", "```py\ndef add_numbers(a: int, b: int) -> int:\n    return a + b\n# Works fine, result is 8:\nresult = add_numbers(5, 3)\n# IDE or type checker would flag this as an error:\nresult = add_numbers(5, \"3\") \n```", "```py\nfrom abc import ABC, abstractmethod\nimport math\nclass Shape(ABC):\n    @abstractmethod\n    def area(self) -> float:\n        pass\nclass Rectangle(Shape):\n    def __init__(self, width: float, height: float) -> None:\n        self.width = width\n        self.height = height\n    def area(self) -> float:\n        return self.width * self.height\nclass Circle(Shape):\n    def __init__(self, radius: float) -> None:\n        self.radius = radius\n    def area(self) -> float:\n        return math.pi * self.radius ** 2\nclass AreaCalculator:\n    def calculate_area(self, shape: Shape) -> float:\n        return shape.area() \n```", "```py\ndef process_order(items: list[str],\n                  quantities: list[int]) -> dict[str, int]:\n    return {item: quantity for item,\n            quantity in zip(items, quantities)}\n# Usage\norder = process_order(['apple', 'banana', 'orange'], [2, 3, 1])\nprint(order)\n# Output: {'apple': 2, 'banana': 3, 'orange': 1} \n```", "```py\nfrom typing import Sequence\ndef calculate_total(items: Sequence[float]) -> float:\n    return sum(items)\n# Usage\nprint(calculate_total([1.0, 2.0, 3.0]))  # Works with list\nprint(calculate_total((4.0, 5.0, 6.0)))  # Also works with tuple \n```", "```py\nfrom typing import Union, Optional\ndef process_input(data: Union[str, int]) -> str:\n    return str(data)\ndef find_user(user_id: Optional[int] = None) -> Optional[str]:\n    if user_id is None:\n        return None\n    # ... logic to find user ...\n    return \"User found\"\n# Usage\nresult1 = process_input(\"Hello\")  # Works with str\nresult2 = process_input(42)       # Works with int\nuser = find_user()                # Optional parameter \n```", "```py\ndef process_input(data: Union[str, int]) -> str: \n```", "```py\ndef process_input(data: str | int) -> str: \n```", "```py\nfrom typing import Literal\nLogLevel = Literal[\"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\"]\ndef set_log_level(level: LogLevel) -> None:\n    print(f\"Setting log level to {level}\")\n# Usage\nset_log_level(\"DEBUG\")  # Valid\nset_log_level(\"CRITICAL\")  # Type checker would flag this as an error \n```", "```py\n# Type aliases\nUserDict = dict[str, str]\nUserList = list[UserDict]\ndef process_users(users: UserList) -> None:\n    for user in users:\n        print(f\"Processing user: {user['name']}\")\n# Usage\nusers: UserList = [{\"name\": \"Alice\"}, {\"name\": \"Bob\"}]\nprocess_users(users) \n```", "```py\nfrom typing import NewType\nUserId = NewType('UserId', int)\nProductId = NewType('ProductId', int)\ndef process_order(user_id: UserId,\n                  product_id: ProductId) -> None:\n    print(f\"Processing order for User {user_id} and Product {product_id}\")\n# Usage\nuser_id = UserId(1)\nproduct_id = ProductId(1)  # Same underlying int, but distinct type\nprocess_order(user_id, product_id)\n# This would raise a type error:\n# process_order(product_id, user_id) \n```", "```py\nfrom typing import Any\ndef log_data(data: Any) -> None:\n    print(f\"Logged: {data}\")\n# Usage\nlog_data(\"A string\")\nlog_data(42)\nlog_data({\"key\": \"value\"}) \n```", "```py\n$ pip install mypy \n```", "```py\ndef get_user(user_id: int) -> dict:\n    # Simulating user retrieval\n    return {\"id\": user_id,\n            \"name\": \"John Doe\",\n            \"email\": \"john@example.com\"}\ndef send_email(user: dict, subject: str) -> None:\n    print(f\"Sending email to {user['email']} with subject: {subject}\")\n# Usage\nuser = get_user(\"123\")\nsend_email(user, \"Welcome!\") \n```", "```py\n$ mypy user_service.py\nuser_service.py:9: error: Argument 1 to \"get_user\" has incompatible type \"str\"; expected \"int\"  [arg-type]\nFound 1 error in 1 file (checked 1 source file) \n```", "```py\n$ mypy user_service.py\nSuccess: no issues found in 1 source file \n```", "```py\n[mypy]\nignore_missing_imports = True\nstrict_optional = True\nwarn_redundant_casts = True\nwarn_unused_ignores = True\nwarn_return_any = True\nwarn_unreachable = True \n```", "```py\nname: Python Type Check and Test\non: [push, pull_request]\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.13'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install mypy pytest\n    - name: Run mypy\n      run: mypy .\n    - name: Run tests\n      run: pytest \n```", "```py\n    [mypy.unwanted_module]\n    ignore_errors = True\n    [mypy.some_package.*]\n    ignore_errors = True \n    ```"]