- en: Utilizing the Python Interpreter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will talk about the Python interpreter, both as an interactive
    tool and for launching Python programs. Specifically, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Launching Python environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Utilizing Python command options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with environment variables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making scripts executable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modifying interactive interpreter startup
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternative Python implementations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embedding Python with other applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using alternative Python shells – IPython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using alternative Python shells – bpython
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using alternative Python shells – DreamPie
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the benefits of the Python programming language is that it is interpreted,
    not compiled. This means that Python code is processed when it is called, rather
    than having to be pre-compiled before use. Because of this, interpreted languages
    generally have an interactive shell, allowing users to test code and otherwise
    have immediate feedback without having to create a separate source code file.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, to get the most functionality out of a programming language, having
    permanent code files is necessary. When using an interactive prompt, the code
    lives in RAM; once the interactive session is closed, that code is lost. Thus,
    using an interactive prompt is a great way to quickly test programming ideas,
    but you wouldn't want to run a full-blown program from it.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will talk about using the Command Prompt to launch programs, as
    well as Python's functionality using the interactive shell. Special functionality
    with the Windows operating system will be discussed, and we will end by talking
    about alternative Python shells that developers may be interested in trying.
  prefs: []
  type: TYPE_NORMAL
- en: Launching Python environments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, Python is installed on a computer with the Python interpreter included
    on the system path. This means that the interpreter will monitor the Command Prompt
    for any call to `python`.
  prefs: []
  type: TYPE_NORMAL
- en: The most common usage for Python is to run a script. However, it may be desirable
    to launch a specific version of Python for a specific program.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most basic command to execute a Python program is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following examples show how to launch specific versions of Python, as needed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Calling `python2` or `python3` opens the latest installed version of the respective
    branch, whereas the other examples show how to invoke a specific version number.
    Regardless of whether a newer version is available from the Python site, only
    versions that are installed on the system are available for use.
  prefs: []
  type: TYPE_NORMAL
- en: This is beneficial, because a developer may have to support legacy software
    and some features of those programs may not be compatible with newer Python versions.
    Thus, being able to call a specific version ensures that the developer is using
    the correct environment.
  prefs: []
  type: TYPE_NORMAL
- en: Utilizing Python command options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When used non-interactively, the Python interpreter monitors the command line
    and parses all input before the command is actually executed. The following snippet
    shows all the possible options available when calling Python from the command
    line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'When working with a **command line interface** (**CLI**), examples of shell
    commands often show square brackets `[]` to indicate optional instructions. In
    this case, there are three groups of optional input that can be provided to the
    `python` command: generic options, interface options, and arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A number of options are available for the Python command-line call. To enter
    interactive mode, call Python with no additional options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute a regular Python program with no special options, add the program
    name:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'To execute a series of Python commands without entering interactive mode or
    calling a file, use `-c`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'To call a Python module as a standalone program, use `-m`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Discussion of the other possible options is provided in the following section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python command line accepts interface options, generic options, miscellaneous
    options, and arguments. Each group is optional and most developers don't need
    to bother with anything special most of the time. However, it is good to know
    what is available in case you decide to move beyond the basics.
  prefs: []
  type: TYPE_NORMAL
- en: Interface options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When called with no options, the Python interpreter starts in interactive mode.
    In this mode, the interpreter monitors the command line for Python commands and
    executes them as they are entered.
  prefs: []
  type: TYPE_NORMAL
- en: To exit, an `EOF` (end-of-file) character is entered; in *NIX operating systems,
    this is `Ctl-D` and `Ctl-Z` on Windows (normally, the EOF character is automatically
    provided when reading from a file but, as this is not the case in interactive
    mode, the user must provide it).
  prefs: []
  type: TYPE_NORMAL
- en: 'The options in this section can be combined with miscellaneous options, which
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-c <"command">`: Entering this option causes Python to execute the entered
    command. The command can be one or more statements, separated by new lines, and
    with normal Python whitespace considerations. The quotations (single or double)
    must be included and surround all the statements that make up the command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-m <module>`: This option causes Python to search `sys.path` for the indicated
    module and then execute its contents as the `__main__` module. Modules executed
    via this method do not require the `.py` extension. In addition, a package of
    modules can be provided; in this case, Python will execute the `<pkg>.__main__`
    as the `__main__` module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This option cannot be used with any compiled C modules, including built-in modules,
    as they are not Python code. However, `.pyc` pre-compiled Python files can use
    this option, even if the original source code files are not available, as they
    are pure Python code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: When this option is invoked, any code that is below the `if __name__ == "__main__"`
    line will be executed. This is a good place to put self-testing or configuration
    code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<script>`: This option causes the Python code in the indicated script to be
    executed. The script provided must have a filesystem path (absolute or relative)
    that points to a regular Python file, a directory containing a `__main__.py` file,
    or a zipped file with a `__main__.py` file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-`: An empty dash option tells the interpreter to read from standard input
    (`sys.stdin`); if the standard input is connected to a Terminal, then normal interactive
    mode is started. While a keyboard is the default input device, `sys.stdin` actually
    accepts any `File` object, so anything from the user''s keyboard to a file can
    be used as the input method. Hence, any sort of file can be used as input, ranging
    from a normal text file to a CSV file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generic options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like most programs, Python has generic options that are common to commercial
    products, and most home-grown software as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-?`, `-h`, `--help`: Any one of these options will print out a short description
    of the command and all available command-line options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-V`, `-VV`, `--version`: Calling `-V` or `-version` will print the version
    number of the Python interpreter. Using `-VV` puts it into verbose mode (only
    when using Python 3), which provides more information, such as the Python environment,
    for example, Anaconda, or the GCC version used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Miscellaneous options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More than a dozen miscellaneous options are available for the `python` command.
    While most options are available in both Python 2 and Python 3, there may be some
    differences between versions. It is best to double-check [https://docs.python.org/2.7/using/cmdline.html](https://docs.python.org/2.7/using/cmdline.html)
    if questions arise (make sure to switch to the version you're using).
  prefs: []
  type: TYPE_NORMAL
- en: 'Each option is explained here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-b`, `-bb`: Provide a warning when comparing `bytes/bytesarray` with `str`
    or `bytes` with `int`. A double `b` will provide an error rather than a warning.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-B`: Do not write `.pyc` bytecode files when importing source modules. Related
    to `PYTHONDONTWRITEBYTECODE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-d`: Turn on parser debugging output. Related to `PYTHONDEBUG`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-E`: Ignore all `PYTHON*` environment variables, such as `PYTHONDEBUG`, that
    are set.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-i`: When a script is the first argument to the `python` command, or the `-c`
    option is used, this option causes the Python interpreter to enter interactive
    mode after executing the script or command. This mode change occurs even if `sys.stdin`
    isn''t a Terminal. This is useful when an exception is thrown and a developer
    needs to interactively review the stack trace.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-I`: Run the interpreter in isolated mode (automatically implies `-E` and
    `-s` options as well). Isolated mode causes `sys.path` to not capture the script''s
    directory or the user''s site-packages directory. In addition, all `PYTHON*` environment
    variables are ignored. Additional restrictions can be employed to prevent a user
    from injecting malicious code into the Python program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-J`: Reserved for use by Jython implementation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-O`, `-OO`: Turn on basic optimizations. As mentioned in the *Comparing source
    code to byte code *recipe in [Chapter 1](sct-rcp-py-nj_ch01.html),* Working with
    Python Modules*, this removes `assert` statements from the Python code. Related
    to `PYTHONOPTIMIZE`. Using `-OO` also removes docstrings from the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-q`: Quiet mode; prevents the Python interpreter from displaying copyright
    and version messages, even in interactive mode. Useful when running programs that
    read data from remote systems and don''t need that information presented.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-R`: Irrelevant for Python 3.3 or newer. Turns on hash randomization by salting
    `__hash__()` values for `str`, `bytes`, and `datetime`. They are constant within
    an individual Python process, but are randomized between Python calls. Related
    to `PYTHONHASHSEED`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-s`: Do not add the user''s `site-packages` directory to `sys.path`. This
    would require the user to explicitly provide the path to the desired `site-packages`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-S`: Disables importing the `site` module and site-dependent modifications
    of `sys.path`. Even if `site` is explicitly imported later, these modifications
    are still disabled. A call to `site.main()` is required to allow them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-u`: Forces unbuffered binary output from the `stdout` and `stderr` streams.
    Does not affect the text I/O layer in interactive mode or block-buffering in non-interactive
    mode. Related to `PYTHONUNBUFFERED`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-v`, `-vv`: Prints a message every time a module is initialized, indicating
    the location (file or built-in module) that loads it; also gives information about
    module cleanup when exiting. Using `-vv`, a message is printed every time a file
    is checked when searching for a module. Related to `PYTHONVERBOSE`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-W <arg>`: Controls when warnings are printed; by default, each warning is
    only printed once for each code line that causes the warning. Multiple `-W` options
    may be used, each with a different argument; if a warning matches more than one
    option, the last matching option is returned. Related to `PYTHONWARNINGS`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Available arguments are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ignore`: Ignore all warnings'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default`: Explicitly request the default behavior, that is, print each warning
    once per source code line, regardless of how often the line is processed'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all`: Print a warning every time it occurs; multiple messages may be printed
    if a warning is triggered multiple times by the same line of code, such as within
    a loop'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module`: Print a warning the first time it occurs in each module'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`once`: Print a warning the first time it occurs in the program'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`error`: Instead of printing a warning, an exception will be raised'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `warnings` module can be imported into a Python program to control warnings
    from within the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '`-x`: Skips the first source code line. As *NIX scripts normally have something
    such as `#!/usr/bin/python` as the first line to specify where to look for the
    Python environment, this option skips that line. Thus, this allows use of non-Unix
    `#!<command>` formats.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`-X <value>`: Reserved for implementation-specific options, as well as for
    passing arbitrary values and retrieving them via the `sys._xoptions` dictionary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Currently, the following values are defined:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`faulthandler`: Enables the `faulthandler` module, which dumps Python tracebacks
    when there are program errors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showrefcount`: Only works when debugging. Outputs the total reference count
    and number of used memory blocks when a program finishes or after each interactive
    session statement.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tracemalloc`: Starts tracing Python memory allocations via the `tracemalloc` module.
    By default, the most recent frame is stored in the traceback.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showalloccount`: When a program finishes, the total count of allocated objects
    for each type is returned. Only works when `COUNT_ALLOCS` is defined when Python
    is built.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: See also...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More information can be found in the *Python Compilation Tips* recipe from [Chapter
    1](sct-rcp-py-nj_ch01.html), *Working with Python Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: Working with environment variables
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Environment variables are part of operating systems and affect system operations.
    Python has Python-specific variables that affect how Python functions, that is,
    the behavior of the Python interpreter. While they are processed before command-line
    options, the command-line switches will override environment variables if there
    is a conflict.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Environment variables are accessed via Python's `os.environ`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Because the `environ` object is a dictionary, you can specify a particular
    variable to view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Adding a new variable is as simple as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are a large number of Python-specific environment variables available.
    Some of them are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PYTHONHOME`: Used to change the location of the standard Python libraries.
    By default, libraries are searched in `/usr/local/lib/<python_version>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONPATH`: Modifies the default search path for modules files; the format
    is the same as the shell''s `PATH`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While directories are normally placed in the `PYTHONPATH`, individual entries
    can point to ZIP files that contain pure Python modules. These `zipfile` modules
    can be either source code or compiled Python files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`PYTHONSTARTUP`: Executes Python commands in the indicated startup file before
    the interactive mode prompt appears. The file is executed in the same namespace
    as the interactive prompt, so objects defined or imported in the startup file
    can be used natively, that is, dot-nomenclature is not necessary.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Interactive mode prompts can be modified via this file. Specifically, the `sys.ps1`
    (`>>>`) and `sys.ps2` (`...`) prompts used in interactive mode can be changed
    to other symbols.
  prefs: []
  type: TYPE_NORMAL
- en: Also, the `sys.__interactivehook__` hook can be modified via this file. The
    hook configures the `rlcompleter` module, which defines how Python will complete
    valid identifiers and keywords for the GNU `readline` module. In other words,
    the hook is responsible for setting up Python tab-completion for commands and
    setting the default command history file to `~/.python_history`.
  prefs: []
  type: TYPE_NORMAL
- en: '`PYTHONOPTIMIZE`: If set to a non-empty string, it is the same as using the
    `-O` option. If set to a string number, for example, "2", it is the same as setting
    `-O` multiple times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONDEBUG`: If set to a non-empty string, it is the same as using the `-d`
    option. If set to a string number, for example, "2", it is the same as setting
    `-d` multiple times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONINSPECT`: If set to a non-empty string, it is the same as using the
    `-i` option. This environment variable can also be modified using Python code
    by using the `os.environ` command to force inspection mode when the program ends.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONUNBUFFERED`: When set to a non-empty string, this acts in the same way
    as the `-u` option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONVERBOSE`: If set to a non-empty string, it is the same as using the
    `-v` option. If set to an integer value, it is the same as setting `-v` multiple
    times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONCASEOK`: When set, Python will ignore character case in `import` statements.
    This is only applicable to Windows and macOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONDONTWRITEBYTECODE`: When set to a non-empty string, the interpreter
    will not write bytecode (`.pyc`) files when importing source code files. This
    is the same functionality as using the `-B` option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONHASHSEED`: When set to `random` or not set at all, a random value is
    used to seed hash digests for `str`, `bytes`, and `datetime` objects. If set to
    an integer value, the integer will be used as the seed value for generating hashes;
    this allows reproducibility of results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONIOENCODING`: If set prior to running the interpreter, encoding is overridden
    for `stdin`, `stdout`, and `stderr`; the syntax used is `encodingname:errorhandler`.
    Both parts of the syntax are optional and have the same meaning as the `str.encode()`
    function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As of Python version 3.6, encoding specified by this variable is ignored on
    Windows when using the interactive console unless `PYTHONLEGACYWINDOWSSTDIO` is
    set.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`PYTHONNOUSERSITE`: When set, Python will not add the user `site-packages`
    directory to `sys.path`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONUSERBASE`: Defines the user `base` directory. The `base` directory is
    used to computer the path for `site-packages` and the `Distutils` installation
    paths when calling `python setup.py install -user`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONEXECUTABLE`: When set, `sys.argv[0]` is set to the value passed in rather
    than the value in the C runtime. This variable only works with macOS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONWARNINGS`: When set, this is the same as using the `-W` option; setting
    it to a comma-separated string is equivalent to setting multiple `-W`s.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONFAULTHANDLER`: When set to a non-empty string, during Python startup
    the `faulthandler.enable()` function is called. This is the same as using the
    `-X faulthandler` option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONTRACEMALLOC`: When set to a non-empty string, the `tracemalloc` module
    starts to trace Python memory allocations. The variable value specified dictates
    how many frames are stored in the traceback.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONASYNCIODEBUG`: When set to a non-empty string, the `asyncio` module''s
    `debug` mode is enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONMALLOC`: Sets Python''s memory allocators, as well as installing debug
    hooks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The memory allocators available include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`malloc`: Uses the C `malloc()` function for all domains'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pymalloc`: Uses the `pymalloc` allocator for `PYMEM_DOMAIN_MEM` and `PYMEM_DOMAIN_OBJ`
    domains, but uses C''s `malloc()` function for the `PYMEM_DOMAIN_RAW` domain'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The debug hooks available include:'
  prefs: []
  type: TYPE_NORMAL
- en: '`debug`: Installs debug hooks on top of the default memory allocator.'
  prefs:
  - PREF_UL
  - PREF_UL
  type: TYPE_NORMAL
- en: '`malloc_debug`: Same as `malloc` (previously shown), but also installs debug
    hooks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pymalloc_debug`: Same as `pymalloc` (previously shown), but also installs
    debug hooks.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When Python is compiled in debug mode, `pymalloc_debug` is set and debug hooks
    are used automatically. When compiled in release mode, the normal `pymalloc` mode
    is set. If neither of the `pymalloc` modes is available, regular `malloc` modes
    are used.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONMALLOCSTATS`: When set to a non-empty string, Python prints the statistics
    for the `pymalloc` allocator every time a new `pymalloc` object is created and
    when the program shuts down. If `pymalloc` is not available, then this variable
    is ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONLEGACYWINDOWSENCODING`: When set, the default filesystem encoding and
    error mode revert to pre-3.6 version values. If using 3.6 or later, encoding is
    set to `utf-8` and error mode is set to `surrogatepass`. This is only available
    on Windows systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONLEGACYWINDOWSTDIO`: When set, the new console reader and writer are
    not used, causing Unicode characters to be encoded based on the active console
    code page rather than UTF-8\. This is only available on Windows systems.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONTHREADDEBUG`: When set, Python will print debug information for threading
    (only set when Python is compiled in debug mode).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PYTHONDUMPREFS`: When set, Python will dump objects and reference counts that
    are still alive after shutting down the interpreter (only set when Python is compiled
    in debug mode).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making scripts executable
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Normally, executing a Python program requires typing `python <program>.py`.
    However, it is possible to make Python programs self-executing so they don't require
    typing `python` as the calling command.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: On *NIX systems, putting `#!/usr/bin/env python` as the first line of a program
    allows the program to be executable by referencing the location of Python on the
    user's `PATH`. Of course, this assumes Python is on the `PATH`; if not, then the
    program will have to be invoked like normal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After this has been added to the program, the file itself needs to be modified
    to make it executable, that is, `$ chmod +x <program>.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using a terminal program that displays files and directories in different
    colors depending on their modes, running the command `ls` on the directory where
    the file is located should show it with a different color than non-executable
    files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To execute the program, simply type `./<program>.py` and the program will execute
    without calling `python` first.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Windows doesn't have an executable mode, these additions to the file are
    only necessary for *NIX compatibility. Windows automatically associates `.py`
    files with `python.exe`, so they are already associated with the Python interpreter.
    In addition, `.pyw` extensions can be used to suppress the opening of the console
    window when a Windows Python program is run.
  prefs: []
  type: TYPE_NORMAL
- en: Modifying interactive interpreter startup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned in the *Working with environment variables *recipe, the `PYTHONSTARTUP`
    environment variable can be set to point to a file that contains commands that
    run prior to the Python interpreter starting up. This functionality is similar
    to `.profile` on *NIX shells.
  prefs: []
  type: TYPE_NORMAL
- en: 'As this startup file is only examined when interactive mode is used, there
    is no need to worry about trying to set configurations for running scripts (though
    later on we will show how to include the startup file in a script). The commands
    in this file are executed within the same namespace as the interactive interpreter,
    so there is no need to qualify functions or other imports with dot-nomenclature.
    This file is also responsible for making changes to interactive prompts: `>>>`
    (`sys.ps1`) and `...` (`sys.ps2`).'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To read an additional startup file from the current directory, the following
    example command shows how to code it in the global startup file (`read_startup.py`):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'While the startup file is only looked at for interactive mode, it can be referenced
    within a script. `startup_script.py` shows how to do this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can also refer to the *Working with environment variables* recipe in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Alternative Python implementations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python has been ported to a number of other environments, such as Java and .NET.
    This means Python can be used in these environments like normal, but gains access
    to the APIs and code underpinnings for these environments.
  prefs: []
  type: TYPE_NORMAL
- en: Jython is used for Java integration, IronPython is used for the .NET framework,
    Stackless Python is available for enhanced threading performance, and MicroPython
    is for use with microcontrollers.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To use Jython, a Java `.jar` file provides the installation executable. Two
    options are available for installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Normal GUI installation is available by using the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'For console-based systems, such as headless servers, the following command
    can be used for installation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: IronPython can be installed using a Windows `.msi` installer, via a `.zip` file,
    or downloading source code. Installation with the `.msi` file is like a normal
    Windows software installation; the `.zip` file or source code can be used for
    non-Windows platforms.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'NuGet is the package manager for the .NET framework. IronPython can be installed
    via NuGet just like `pip` packages. Two files are required, as the standard library
    is a separate package. In this case, the NuGet commands are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'To install Stackless, the method depends on the OS being used. For *NIX systems,
    installation is a standard `configure`/`make`/`install` process:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: For macOS, it is a little more complicated. Python should be configured with
    the `--enable-framework` option, then use `make frameworkinstall` to complete
    the Stackless installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: For Windows, it's even more complicated. Microsoft Visual Studio 2015 must be
    installed, along with the `Subversion` version control software. The command `build.bat
    -e` is used to build Stackless Python. There is a lot more in-depth information
    in the documentation, so it is recommended you to review it prior to installing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'MicroPython is available in `.zip `and `.tar.gz` files, as well as via GitHub.
    A number of options and dependencies are required for installation, but the general
    build commands are:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Here we will talk about the various implementations of Python available for
    different platforms and frameworks:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jython**: Jython is an implementation of Python for **Java Virtual Machine**
    (**JVM**). Jython takes the normal Python interpreter and modifies it to be able
    to communicate with, and run on, the Java platform. Thus, seamless integration
    is established between the two, allowing use of Java libraries and Java-based
    applications within Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: While the Jython project has endeavored to ensure that all Python modules will
    run on JVM, some differences can be found. The main difference is that C extensions
    will not work in Jython; most Python modules will work without modification in
    Jython. Any C extensions included in the Python code will not port over correctly.
    These C extensions should be rewritten in Java to ensure that they work correctly.
  prefs: []
  type: TYPE_NORMAL
- en: Jython code works well within the Java environment, but using standard CPython
    code (the default Python environment) can have problems. However, Jython code
    normally runs without issues in the CPython environment, unless it utilizes some
    sort of Java integration.
  prefs: []
  type: TYPE_NORMAL
- en: '**IronPython**: IronPython is Python for Microsoft''s .NET framework. IronPython
    programs can utilize the .NET Framework, as well as regular Python libraries;
    in addition, other .NET languages (such as C#) can implement IronPython code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Because of this .NET functionality, IronPython is a great tool for Windows developers
    or Linux developers using Mono. While normal Python projects can be coded in IronPython,
    it also allows developers to use Python in place of other scripting languages,
    such as VBScript or PowerShell. Microsoft's development environment, Visual Studio,
    has a Python Tools plugin, allowing the full functionality of Visual Studio to
    be used with Python code.
  prefs: []
  type: TYPE_NORMAL
- en: IronPython is only available for Python 2.7\. It has not been ported to Python
    3 yet. Back-porting Python 3 code using `3to2` is not guaranteed to work due to
    the incompatible nature of Python 3 versus Python 2.
  prefs: []
  type: TYPE_NORMAL
- en: '**Stackless Python**: Stackless is an enhanced version of Python, focused on
    improving thread-based programming without the normal complications of regular
    Python threads. Utilizing microthreads, Stackless aims to improve program structure,
    make multi-threaded code more readable, and increase programmer productivity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These improvements are achieved by avoiding the regular C call stack and utilizing
    a custom stack that is managed by the interpreter. Microthreads handle task execution
    for a program within the same CPU, providing an alternative to traditional asynchronous
    programming methods. They also eliminate the overhead associated with multi-threading
    with single CPU programs, as there is no delay switching between user mode and
    kernel mode.
  prefs: []
  type: TYPE_NORMAL
- en: Microthreads employ tasklets to represent small tasks within a Python thread
    and they can be used instead of full-featured threads or processes. Bidirectional
    communication between microthreads is handled by channels, and scheduling is configured
    in a round-robin setup, allowing tasklet scheduling either cooperatively or preemptively.
    Finally, serialization is available via Python pickles to allow delayed resumption
    of a microthread.
  prefs: []
  type: TYPE_NORMAL
- en: One caveat with Stackless is that, even though microthreads improve upon normal
    Python threads, they do not eliminate Global Interpreter Lock. Also, tasklets
    are within a single thread; multi-threading or multi-processing is not being performed.
  prefs: []
  type: TYPE_NORMAL
- en: In other words, true parallel processing is not occurring, only cooperative
    multitasking within a single CPU that is shared among the tasklets; this is the
    same functionality as Python multi-threading provides. To utilize parallelism
    across multiple CPUs, an interprocess communication system would have to be configured
    on top of Stackless processes.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, because of the changes to the underlying Python source code to implement
    microthreads, Stackless cannot be installed on top of an existing Python installation.
    Thus, a complete Stackless installation needs to be installed, separate from any
    other Python distributions.
  prefs: []
  type: TYPE_NORMAL
- en: '**MicroPython**: MicroPython is a stripped-down version of Python 3.4, designed
    for use with microcontrollers and embedded systems. While MicroPython includes
    the majority of features within standard Python, a minor number of changes have
    been made to make the language work well with microcontroller devices. A key feature
    of MicroPython is that it can run on just 16 KB RAM, with the source code taking
    up only 256 KB of storage space.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A unique microcontroller, the pyboard, is available for purchase and is designed
    for use with MicroPython. The pyboard is similar to a Raspberry Pi, except it
    is even smaller. Yet, it has 30 GPIO connections, four LEDs built-in, an accelerometer,
    and many other features. As it is designed for use with MicroPython, you essentially
    get a Python OS that is capable of running on bare metal.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Compared to *NIX computers, which come with Python installed by default, Windows
    OS does not include Python out of the box. However, MSI installer packages are
    available to install Python on a number of Windows-based environments. These installers
    are designed to be used by a single user, rather than all users of a particular
    computer. However, it is possible to configure them during installation to allow
    all system users of a single machine to access Python.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As Python contains platform-specific code for a variety of operating systems,
    to minimize the amount of unneeded code, Python only supports Windows OSes as
    long as they are supported by Microsoft; this includes extended support, so anything
    that has reached end of life is not supported.
  prefs: []
  type: TYPE_NORMAL
- en: As such, Windows XP and older cannot install any Python version beyond 3.4\.
    The Python documentation still states that Windows Vista and newer can install
    3.6 and later versions, but Windows Vista reached end of life in 2017, so Python
    support on that OS will no longer continue. In addition, it is important to know
    what type of CPU your computer uses, that is, 32-bit or 64-bit. While 32-bit software
    will run on 64-bit systems, the reverse is not true.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, two types of installers are available: offline and web-based. The
    offline installer includes all components necessary for a default installation;
    internet access is only required to install optional features. The web installer
    is a smaller file than the offline version and allows the user to install only
    specific features, downloading them as necessary.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When the Windows installer is first ran, two options are available: default
    installation or custom. Select *default* if the following apply:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You are installing for just yourself, that is, other users do not require access
    to Python
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: You only need to install the Python standard library, test suite, *pip*, and
    Windows launcher
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Python-related shortcuts are only visible to the current user
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Use a custom installation if you need more control, specifically over:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The features to install
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The installation location
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing debugging symbols or binaries
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing for all system users
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pre-compiling the standard library into bytecode
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Custom installation will require admin credentials. The GUI is the normal way
    to install Python, using the installation wizard to walk through the process.
    Alternatively, command-line scripts can be used to automate installation on multiple
    machines without user interaction. To use the command-line installation, several
    base options are available when running the installer `.exe`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using the Windows Python launcher
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with version 3.3, Python defaults to installing the Python launcher
    when installing the rest of the language. The launcher allows Python scripts or
    the Windows command-line to specify a particular Python version and will locate
    and launch that version.
  prefs: []
  type: TYPE_NORMAL
- en: While installed with v3.3 or later, the launcher is compatible with all versions
    of Python. The Python launcher will select the most appropriate version of Python
    for the script and will use per-user Python installations rather than all-user
    installs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To check that the launcher is installed, simply type `py` on the Windows Command
    Prompt. If installed, the latest version of Python is launched.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If not installed, you will receive the following error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Assuming different versions of Python are installed, to use a different version
    simply indicate it via a `-` option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: If using a Python virtual environment and the Python launcher is executed without
    specifying a Python version explicitly, the launcher will use the virtual environment's
    interpreter rather than the system one. To use the system interpreter, the virtual
    environment must first be deactivated or the system's Python version number must
    be explicitly called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The launcher allows the `shebang` (`#!`) line used in *NIX programs to be used
    with Windows. While a number of variations of the Python environment path are
    available, it is worth noting that one of the most common, `/usr/bin/env python`,
    will be executed in Windows the same way as in *NIX. This means that Windows will
    search the `PATH` for a Python executable before it looks for installed interpreters,
    which is how *NIX systems function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Shebang lines can include Python interpreter options, just as if you were including
    them on the command line. For example, `#! /usr/bin/python -v` will provide the
    Python version being used; this is the same behavior as using `python -v` on the
    command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Embedding Python with other applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The embedded distribution of Python is a `zipfile` that holds a minimal Python
    interpreter. Its purpose is to provide a Python environment for other programs,
    rather than being used directly by end users.
  prefs: []
  type: TYPE_NORMAL
- en: When extracted from the `zipfile`, the environment is essentially isolated from
    the underlying OS, that is, the Python environment is self-contained. The standard
    library is pre-compiled into bytecode and all Python-related `.exe` and `.dll`
    files are included. However, `pip`, documentation files and the `Tcl/tk` environment
    are not included. Because `Tcl/tk` is not available, the IDLE development environment
    and associated Tkinter files are not available for use.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the Microsoft C runtime is not included with the embedded distribution.
    While it is frequently installed on the user's system from other software or via
    Windows Update, it is ultimately up to the program installer to ensure that it
    is available for Python's use.
  prefs: []
  type: TYPE_NORMAL
- en: Necessary third-party Python packages need to be installed by the program installer,
    in addition to the embedded Python environment. As `pip` is not available, these
    packages should be included with the overall application so they are updated whenever
    the application itself is updated.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Write a Python application as normal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the use of Python should not be evident to the end user, then a customized
    executable launcher should be coded as well. This executable needs to merely call
    the Python program's `__main__` module via a hard-coded command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If using a custom launcher, Python packages can be located in any location on
    the filesystem, since the launcher can be coded to indicate the specific search
    path when the program is launched.
  prefs: []
  type: TYPE_NORMAL
- en: If the use of Python doesn't need to be so transparent, a simple batch file
    or shortcut file can directly call `python.exe` with the necessary arguments.
    If done this way, the use of Python will be evident, as the program's true name
    won't be used, but will appear to be the Python interpreter itself. Thus, it can
    be difficult for the end user to identify the specific program among other running
    Python processes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If this method is used, it is recommended to install Python packages as directories
    in the same location as the Python executable. This way the packages will be included
    in `PATH`, as they are subdirectories of the main program.
  prefs: []
  type: TYPE_NORMAL
- en: An alternative use of embedded Python is as a glue language that provides scripting
    capabilities for native code, for example, C++ programs. In this case, the majority
    of the software is written in a non-Python language and will call Python either
    via `python.exe` or through the `python3.dll`. Either way, Python is extracted
    from the embedded distribution into a subdirectory, allowing the Python interpreter
    to be called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Packages can be installed in any directory on the filesystem, as their paths
    can be provided in the code prior to configuring the Python interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of very high-level embedding, courtesy of [https://docs.python.org/3/extending/embedding.html](https://docs.python.org/3/extending/embedding.html):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/5c816b81-21bc-488b-8550-c6d0de380776.png)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the preceding C code `(fprintf())` is being used to access Python. As this
    isn''t a C programming book, I won''t provide the in-depth workings of the code,
    but here is a brief rundown of what is happening:'
  prefs: []
  type: TYPE_NORMAL
- en: Python is being imported into the code as a header file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The C code is told about the paths to Python runtime libraries.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python interpreter is initialized.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A Python script is hard-coded into the C code and processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python interpreter is shut down.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The C program finishes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In real practice, the Python program to be executed would be pulled from a file,
    rather than being hard-coded, as it removes the need for the programmer to allocate
    memory and load the file contents.
  prefs: []
  type: TYPE_NORMAL
- en: Using alternative Python shells – IPython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While usable, the default shell for the Python interpreter has significant limitations
    when compared to what computers can do nowadays. For starters, the regular Python
    interactive interpreter does not support syntax highlight or auto-indenting, among
    other features.
  prefs: []
  type: TYPE_NORMAL
- en: 'IPython is one of the most popular replacement interactive shells for Python.
    Some of the features IPython offers compared to vanilla Python include:'
  prefs: []
  type: TYPE_NORMAL
- en: Comprehensive object introspection, allowing access to docstrings, source code,
    and other objects accessible to the interpreter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Persistent input history
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caching output results
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extendable tab completion, with support for variables, keywords, functions,
    and filenames
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`magic` commands (denoted by a prepended `%`) to control the environment and
    interact with the OS'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extensive configuration system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Session logging and reload
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Embeddable within Python programs and GUIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Integrated access to debugger and profiler
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multi-line editing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Syntax highlighting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Included with IPython is Jupyter, which provides the ability to create notebooks.
    Notebooks were originally part of IPython, but Jupyter split into a separate project,
    bringing the power of notebooks to other languages. Thus, IPython and Jupyter
    can be used separately from each other, with different frontends and backends
    providing different features as needed.
  prefs: []
  type: TYPE_NORMAL
- en: Jupyter notebooks provide a browser-based application that can be used for development,
    documentation, and executing code, including displaying the results as text, images,
    or other media types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Jupyter notebooks, as web apps, provide the following features:'
  prefs: []
  type: TYPE_NORMAL
- en: In-browser editing, including syntax highlighting, automatic indentation, introspection,
    and tab completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In-browser code execution, with the results attached to the source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to display rich media, including HTML, LaTeX, PNG, SVG, and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rich text editing using Markdown
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mathematical notation using LaTeX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another package that is part of the IPython family is IPython Parallel, also
    known as `ipyparallel`. IPython Parallel supports the following parallel programming
    models:'
  prefs: []
  type: TYPE_NORMAL
- en: SPMD (single program, multiple data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MPMD (multiple programs, multiple data)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Message passing via MPI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Task farming
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Data parallel
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Combinations of the previous
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom-defined approaches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main benefit from `ipyparallel` is that it allows parallel-processed applications
    to be developed, tested, and used interactively. Normally, parallelism is performed
    by writing the code and then executing it to see the results; interactive coding
    can greatly increase development speed by showing whether a particular algorithm
    is worth pursuing further without sinking a fair amount of time into writing the
    supporting code.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'IPython can be installed simply via `pip`, but you may have to install `setuptools`
    first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: IPython is also available as part of Anaconda, a data science/machine learning
    distribution of Python. In addition to IPython, Anaconda provides a large number
    of packages for science, data analysis, and artificial intelligence work.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are not using a pre-built environment such as, Anaconda, to incorporate
    Jupyter functionality with IPython, use the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '`user` specifies the installation is for the current user rather than being
    for global use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name` gives a name to the IPython kernel. This is only necessary if multiple
    IPython kernels will be operating at the same time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`display-name` is the name for a particular IPython kernel. Most useful when
    multiple kernels are present.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To start an interactive session with IPython, use the command `ipython`. If
    you have different Python versions installed, you have to specify `ipython3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/f0f911b7-2889-467a-9676-1b499b10ec9a.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice that the input prompt is `In [N]:`, rather than `>>>`. The `N` number
    refers to the command in IPython history and can be recalled for use again, just
    like the Bash shell's history.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'IPython''s interpreter functions just like the vanilla Python interpreter,
    while adding functionality. The static text in these examples doesn''t do the
    environment justice, as syntax highlighting, auto-indenting, and tab completion
    occur in real time. The following is an example of some simple commands within
    the IPython interpreter:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/528ef2c8-ce64-4ff9-852b-679ef024bfa6.png)'
  prefs: []
  type: TYPE_IMG
- en: Notice in the preceding example that the second command prints the results with
    the `Out[N]:` prompt. Like the `In [N]:` prompt, this line number can be referenced
    again in future code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To learn more about any object, use a question mark: `<object>?`. For more
    information, add two question marks: `<object>??`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Magic functions are a unique part of IPython. They are essentially built-in
    shortcuts to control how IPython operates, as well as providing system-type functions,
    similar to accessing Bash commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Instances of line magic are prefixed with the `%` character and operate like
    Bash commands: an argument is passed to the magic function. Anything on the line
    beyond the function call itself is considered part of the argument.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Instances of line magic return results, just like a regular function. As such,
    they can be used to assign results to a variable.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Instances of cell magic are prefixed with `%%`. They operate like line magics
    except that multiple lines can be used as the argument, rather than a single line.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Magic functions are available to affect the IPython shell, interact with code,
    and provide general utility functions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IPython includes a built-in command history log that tracks both input commands
    and their results. The `%history` magic function will display the command history.
    Additional magic functions can be used to interact with the history, such as rerunning
    past commands or copying them into the current session.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'OS shell interaction is available by using the `!` prefix with a command. Thus,
    to utilize the Bash shell in IPython without exiting the session or opening a
    new Terminal, `!<command>` will send a command, such as the `ping` command to
    Bash for execution:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/11e02324-65cc-4991-9fcf-aecf5ddd9a3d.png)'
  prefs: []
  type: TYPE_IMG
- en: IPython supports rich media output when used as a kernel for other frontend
    software. Plotting via `matplotlib` is available; this is particularly useful
    when using Jupyter notebooks to show the code and the resulting plots in a browser
    window.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Support is also available for interactive GUI development. In this instance,
    IPython will wait for input from the GUI toolkit's event loop. To launch this
    functionality, simply use the magic function `%gui <toolkit_name>`. Supported
    GUI frameworks include wxPython, PyQT, PyGTK, and Tk.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: IPython has the ability to run scripts interactively, such as with presentations.
    Adding a few tags to comments embedded within the source code divides the code
    into separate blocks, with each block being run separately. IPython will print
    the block before running the code, and then drop back to the interactive shell,
    allowing interactive use of the results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Support for embedding IPython within other programs is available, much like
    the embedded distribution of Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Starting with IPython version 6.0, Python versions below 3.3 are not supported.
    To use older versions of Python, IPython 5 LTS should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Using alternative Python shells – bpython
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'bpython was created for developers who want more functionality in their Python
    environment without the overhead or learning curve associated with IPython. Hence,
    bpython provides many IDE-style features, but in a lightweight package. Some of
    the features available include:'
  prefs: []
  type: TYPE_NORMAL
- en: In-line syntax highlighting
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Autocomplete suggestions as you type
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suggested parameters for function completion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A code `rewind` feature that pops out the last line and re-evaluates the entire
    source code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pastebin integration, allowing visible code to be sent to the Pastebin site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To use bpython, in addition to downloading the package itself you will also
    have to ensure that the following packages are installed on your system:'
  prefs: []
  type: TYPE_NORMAL
- en: Pygments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requests
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sphinx (optional; for documentation only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: mock (optional; for the test suite only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: babel (optional; for internationalization purposes)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: curtsies
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: greenlet
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: urwid (optional; for bpython-urwind only)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: requests[security] for Python versions < 2.7.7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Create a virtual environment for your project, such as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Clone the `bpython` GitHub repository to your development system:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Install bypython and dependencies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'As an alternative to the pip installations, your *NIX distribution most likely
    has the necessary files. Running apt search `python-<package>` will show if a
    particular package is available. To install a particular package, use the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `3` is optional if you are installing for Python 2, but necessary if you
    want the Python 3 version of the package.
  prefs: []
  type: TYPE_NORMAL
- en: bpython can also be installed using `easyinstall`, `pip`, and via normal `apt
    install`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The documentation for bpython is included with the bpython repository. To create
    a local copy of the documentation, ensure that you have sphinx installed and run
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Once the documentation is generated, it can be reached by using the URL `doc/sphinx/build/html/index.html`
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: A large number of configuration options are available in the `bpython` config
    file (by default, it is located at `~/.config/bpython/config`). Options are available
    to set auto-completion, the color scheme, auto-indentation, keyboard mapping,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Theme configuration is available as well; the theme is set in the config file
    via the `color_scheme` option. The theme is used to control syntax highlighting,
    as well as the Python shell itself.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The current version, at the time of writing, is 0.17\. While it is classified
    as betaware, the author indicates that it works well enough for most day-to-day
    work. Support is available via IRC, a Google Groups mailing list, and various
    social media sites. More information, including screenshots, is available on the
    project's website.
  prefs: []
  type: TYPE_NORMAL
- en: Using alternative Python shells – DreamPie
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Continuing in the vein of improving upon the vanilla Python experience, DreamPie
    provides some new ideas on alternative shells. The functionality provided by DreamPie
    includes:'
  prefs: []
  type: TYPE_NORMAL
- en: Splitting the interactive shell into a history box and a code box. Like IPython,
    the history box is a list of previous commands and results, while the code box
    is the current code being edited. The difference with the code box is that it
    functions more like a text editor, allowing you to write as much code as desired
    before executing it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A copy code only command that copies only the code desired, allowing it to be
    pasted into a file while retaining indentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic attribute and filename completion.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Code introspection, displaying function arguments and documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The session history can be saved to an HTML file for future reference; the HTML
    file can be loaded back into DreamPie for quick reuse.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automatic addition of parentheses and quotes after functions and methods.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Matploblib integration for interactive plots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Support for nearly all Python implementations, including Jython, IronPython,
    and PyPy.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cross-platform support.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before installing DreamPie, you will need to install Python 2.7, PyGTK, and
    `pygtksourceview` (the reason for Python 2.7 is that PyGTK has not been rewritten
    for Python 3 support).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The recommended way to download DreamPie is to clone the GitHub repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, a binary is available for Windows, macOS, and Linux (links can
    be found on the DreamPie website [(http://www.dreampie.org/download.html).](http://www.dreampie.org/download.html)This
    is generally slower to be updated than the GitHub repository and tends to be less
    stable for that reason.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I was unable to get DreamPie working using Xubuntu 16.04 and Python 2.7.11;
    an error kept occurring indicating that the GLib Object System `(gobject)` module
    could not be imported. Even when attempting to install the `gobject` package manually,
    I was unable to install DreamPie and validate how useful it is.
  prefs: []
  type: TYPE_NORMAL
- en: The last update to the DreamPie website was 2012, and there is no documentation
    on how to use the software on either the website or the GitHub site. According
    to the GitHub site, it was last updated in November, 2017, so it appears that
    the GitHub site is now the main location for the project.
  prefs: []
  type: TYPE_NORMAL
