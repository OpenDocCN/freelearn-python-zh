["```py\nMIDDLEWARE = ['django.middleware.security.SecurityMiddleware',\\\n              'django.contrib.sessions.middleware.SessionMiddleware',\\\n              'django.middleware.common.CommonMiddleware',\\\n              'django.middleware.csrf.CsrfViewMiddleware',\\\n              'django.contrib.auth.middleware.AuthenticationMiddleware',\\\n              'django.contrib.messages.middleware.MessageMiddleware',\\\n              'django.middleware.clickjacking.XFrameOptionsMiddleware',\\]\n```", "```py\ndjango.core.management.base.SystemCheckError: SystemCheckError: System check identified some issues:\nERRORS:\n?: (admin.E408) 'django.contrib.auth.middleware.AuthenticationMiddleware' must be in MIDDLEWARE in order to use the admin application.\n?: (admin.E409) 'django.contrib.messages.middleware.MessageMiddleware' must be in MIDDLEWARE in order to use the admin application.\n?: (admin.E410) 'django.contrib.sessions.middleware.SessionMiddleware' must be in MIDDLEWARE in order to use the admin application.\n```", "```py\nurlpatterns = [path('login/', views.LoginView.as_view(), \\\n                    name='login'),\n               path('logout/', views.LogoutView.as_view(), \\\n                    name='logout'),\n               path('password_change/', \\\n                    views.PasswordChangeView.as_view()),\\\n                    (name='password_change'),\\\n               path('password_change/done/', \\\n                    views.PasswordChangeDoneView.as_view()),\\\n                    (name='password_change_done'),\\\n               path('password_reset/', \\\n                    views.PasswordResetView.as_view()),\\\n                    (name='password_reset'),\\\n               path('password_reset/done/', \\\n                    views.PasswordResetDoneView.as_view()),\\\n                    (name='password_reset_done'),\\\n               path('reset/<uidb64>/<token>/', \\\n                    views.PasswordResetConfirmView.as_view()),\\\n                    (name='password_reset_confirm'),\\\n               path('reset/done/', \\\n                    views.PasswordResetCompleteView.as_view()),\\\n                    (name='password_reset_complete'),]\n```", "```py\nurlpatterns = [path('accounts/', \\\n                    include(('django.contrib.auth.urls', 'auth')),\\\n                    (namespace='accounts')),\\\n               path('admin/', admin.site.urls),\\\n               path('', include('reviews.urls'))]\n```", "```py\n    {% extends \"admin/base_site.html\" %}\n    {% load i18n %}\n    {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}  {% if docsroot %}<a href=\"{{ docsroot }}\">{% trans 'Documentation' %}    </a> / {% endif %}{% trans 'Change password' %} / <a href=\"{% url       'admin:logout' %}\">{% trans 'Log out' %}</a>{% endblock %}\n    {% block breadcrumbs %}\n    <div class=\"breadcrumbs\">\n    <a href=\"{% url 'admin:index' %}\">{% trans 'Home' %}</a>\n    &rsaquo; {% trans 'Password change' %}\n    </div>\n    {% endblock %}\n    {% block title %}{{ title }}{% endblock %}\n    {% block content_title %}<h1>{{ title }}</h1>{% endblock %}\n    {% block content %}\n    <p>{% trans 'Your password was changed.' %}</p>\n    {% endblock %}\n    ```", "```py\n    {% extends \"base.html\" %}\n    {% load i18n %}\n    {% block title %}{{ title }}{% endblock %}\n    {% block content %}\n    <h1>{{ title }}</h1>\n    <p>{% trans 'Your password was changed.' %}</p>\n    {% endblock %}\n    ```", "```py\n    {% extends \"admin/base_site.html\" %}\n    {% load i18n static %}\n    {% block extrastyle %}{{ block.super }}…\n    {% endblock %}\n    {% block bodyclass %}{{ block.super }} login{% endblock %}\n    {% block usertools %}{% endblock %}\n    {% block nav-global %}{% endblock %}\n    {% block content_title %}{% endblock %}\n    {% block breadcrumbs %}{% endblock %}\n    ```", "```py\n    {% extends \"base.html\" %}\n    ```", "```py\n    {% load i18n static %}\n    {% block content %}\n    …\n    {% endblock %}\n    ```", "```py\n    <form action=\"{{ app_path }}\" method=\"post\" id=\"login-form\">\n    ```", "```py\n    <form action=\"{% url 'accounts:login' %}\" method=\"post\" id=\"login-form\">\n    ```", "```py\n    {% url 'admin_password_reset' as password_reset_url %}\n    ```", "```py\n    {% url 'accounts:password_reset' as password_reset_url %}\n    ```", "```py\n    templates/registration/login.html\n    1  {% extends \"base.html\" %}\n    2  {% load i18n static %}\n    3\n    4  {% block content %}\n    5  {% if form.errors and not form.non_field_errors %}\n    6  <p class=\"errornote\">\n    7  {% if form.errors.items|length == 1 %}{% trans \"Please correct the error     below.\" %}{% else %}{% trans \"Please correct the errors below.\" %}{% endif %}\n    8  </p>\n    9  {% endif %}\n    You can find the complete code for this file at http://packt.live/2MILJtF.\n    ```", "```py\n    urlpatterns = [path('accounts/', \\\n                        include(('django.contrib.auth.urls', 'auth')),\\\n                        (namespace='accounts')),\\\n                   path('admin/', admin.site.urls),\\\n                   path('', include('reviews.urls'))]\n    ```", "```py\nsqlite> select password from auth_user;pbkdf2_sha256$180000$qgDCHSUv1E4w$jnh69TEIO6kypHMQPOknkNWMlE1e2ux8Q1Ow4AHjJDU=\n```", "```py\n    from django.shortcuts import render\n    def profile(request):\n        return render(request, 'profile.html')\n    ```", "```py\n    {% extends \"base.html\" %}\n    {% block title %}Bookr{% endblock %}\n    {% block content %}\n    <h2>Profile</h2>\n    <div>\n      <p>\n          Username: {{ request.user.username }} <br>\n          Name: {{ request.user.first_name }} {{ request.user.last_name }}<br>\n          Date Joined: {{ request.user.date_joined }} <br>\n          Email: {{ request.user.email }}<br>\n          Last Login: {{ request.user.last_login }}<br>\n      </p>\n    </div>\n    {% endblock %}\n    ```", "```py\n    from bookr.views import profile\n    urlpatterns = [path('accounts/', \\\n                        include(('django.contrib.auth.urls', 'auth')),\\\n                       (namespace='accounts')),\\\n                   http://localhost:8000/accounts/profile/, it is rendered as shown in the screenshot in *Figure 9.4*. Remember, if the server needs to be started, use the python manage.py runserver command:![Figure 9:4: Alice visits her user profile\n    ](img/B15509_09_04.jpg)\n    ```", "```py\nfrom django.contrib.auth.decorators import login_required\n@login_required\ndef profile(request):\n    …\n```", "```py\n@login_required(login_url='/accounts/profile2')\n```", "```py\n@login_required(redirect_field_argument='redirect_to')\n```", "```py\nfrom django.contrib.auth.decorators \\\nimport login_required, permission_required\n…\n@permission_required('view_group')\ndef user_profile(request, uid):\n    user = get_object_or_404(User, id=uid)\n    permissions = user.get_all_permissions()\n    return render(request, 'user_profile.html',\\\n                  {'user': user, 'permissions': permissions}\n```", "```py\nuser_passes_test(test_func, login_url=None, redirect_field_name='next')\n```", "```py\nfrom django.contrib.auth.decorators import (login_required),\\\n                                           (permission_required),\\\n                                           (user_passes_test)\n…\ndef veteran_user(user):\n    now = datetime.datetime.now()\n    if user.date_joined is None:\n        return False\n    return now - user.date_joined > datetime.timedelta(days=365)\n@user_passes_test(veteran_user)\ndef veteran_features(request):\n    user = request.user\n    permissions = user.get_all_permissions()\n    return render(request, 'veteran_profile.html',\\\n                  {'user': user, 'permissions': permissions}\n```", "```py\nredirect_to_login(next, login_url=None, redirect_field_name='next')\n```", "```py\n    from django.contrib.auth.decorators import permission_required \n    …\n    @permission_required('edit_publisher')\n    def publisher_edit(request, pk=None):\n        …\n    ```", "```py\n    from django.contrib.auth.decorators import user_passes_test\n    …\n    def is_staff_user(user):\n        return user.is_staff\n    @user_passes_test(is_staff_user)\n        …\n    ```", "```py\n    …\n    from django.contrib.auth.decorators import login_required, \\\n                                               user_passes_test\n    …\n    @login_required\n    def review_edit(request, book_pk, review_pk=None):\n    @login_required\n    def book_media(request, pk):\n    …\n    ```", "```py\n    …\n    from django.core.exceptions import PermissionDenied\n    from PIL import Image\n    from django.contrib import messages\n    …\n    @login_required\n    def review_edit(request, book_pk, review_pk=None):\n        book = get_object_or_404(Book, pk=book_pk)\n        if review_pk is not None:\n            review = get_object_or_404(Review),\\\n                                     (book_id=book_pk),\\\n                                     (pk=review_pk)\n            user = request.user\n            if not user.is_staff and review.creator.id != user.id:\n                raise PermissionDenied\n        else:\n            review = None\n    …\n    ```", "```py\n{% if user.is_staff %}\n  <p><a href=\"{% url 'review:edit' %}\">Edit this Review</a></p>\n{% endif %}\n```", "```py\n<li class=\"nav-item\">\n  <a class=\"nav-link\" href=\"#\">Logout</a>\n</li>\n```", "```py\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"/accounts/logout\">Logout</a>\n    </li>\n    <li class=\"nav-item\">\n      <a class=\"nav-link\" href=\"/accounts/login\">Login</a>\n    </li>\n    ```", "```py\n    {% if user.is_authenticated %}\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/accounts/logout\">Logout</a>\n      </li>\n        {% else %}\n      <li class=\"nav-item\">\n        <a class=\"nav-link\" href=\"/accounts/login\">Login</a>\n      </li>\n    {% endif %}\n    ```", "```py\nimport datetime\ndata = dict(viewed_books=[17, 18, 3, 2, 1],\\\n            search_history=['1981', 'Machine Learning', 'Bronte'],\\\n            background_rgb=(96, 91, 92),\\\n            foreground_rgb=(17, 17, 17),\\\n            last_login_login=datetime.datetime(2019, 12, 3, 15, 30, 30),\\\n            password_change=datetime.datetime(2019, 9, 2, 8, 41, 25),\\\n            user_class='Veteran',\\\n            average_rating=4.75,\\\n            reviewed_books={18, 3, 7})\n```", "```py\nimport pickle\ndata_pickle = pickle.dumps(data)\n```", "```py\nimport json\ndata_json = json.dumps(data)\n```", "```py\nTypeError: Object of type datetime is not JSON serializable\n```", "```py\ndata['last_login_login'] = data['last_login_login'].strftime(\"%Y%d%m%H%M%S\")\ndata['password_change'] = data['password_change'].strftime(\"%Y%d%m%H%M%S\")\ndata['reviewed_books'] = list(data['reviewed_books'])\n```", "```py\n{\"viewed_books\": [17, 18, 3, 2, 1], \"search_history\": [\"1981\", \"Machine Learning\", \"Bronte\"], \"background_rgb\": [96, 91, 92], \"foreground_rgb\": [17, 17, 17], \"last_login_login\": \"20190312153030\", \"password_change\": \"20190209084125\", \"user_class\": \"Veteran\", \"average_rating\": 4.75, \"reviewed_books\": [18, 3, 7]}\n```", "```py\nSESSION_SERIALIZER = 'django.contrib.sessions.serializers.JSONSerializer'\n```", "```py\n    sqlite3 db.sqlite3\n    ```", "```py\n    sqlite> .schema django_session\n    CREATE TABLE IF NOT EXISTS \"django_session\" (\"django_session table in the database stores session information in the following fields:`session_key``session_data``expire_date`\n    ```", "```py\n    b'\\x82\\x1e\"z\\xc9\\xb4\\xd7\\xbf8\\x83K…5e02:{\"_auth_user_id\":\"1\"…}'\n    ```", "```py\n    import base64\n    import json\n    import pprint\n    import sys\n    ```", "```py\n    def get_session_dictionary(session_key):\n        binary_key, payload = base64.b64decode\\\n                              (session_key).split(b':', 1)\n        session_dictionary = json.loads(payload.decode())\n        return session_dictionary\n    ```", "```py\n    if __name__ == '__main__':\n        if len(sys.argv)>1:\n            session_key = sys.argv[1]\n            session_dictionary = get_session_dictionary(session_key)\n            pp = pprint.PrettyPrinter(indent=4)\n            pp.pprint(session_dictionary)\n    ```", "```py\n        python session_info.py <session_data>\n    ```", "```py\nrequest.session['books_reviewed_count'] = 39\n```", "```py\nrequest.session = {'books_read_count':30, 'books_reviewed_count': 39}\n```", "```py\nrequest.session['books_read_count'] = 30\nrequest.session['books_reviewed_count'] = 39\n```", "```py\n    def book_detail(request, pk):\n        …\n        if request.user.is_authenticated:\n            max_viewed_books_length = 10\n    ```", "```py\n            viewed_books = request.session.get('viewed_books', [])\n    ```", "```py\n            viewed_book = [book.id, book.title]\n            if viewed_book in viewed_books:\n                viewed_books.pop(viewed_books.index(viewed_book))\n    ```", "```py\n            viewed_books.insert(0, viewed_book)\n    ```", "```py\n            viewed_books = viewed_books[:max_viewed_books_length]\n    ```", "```py\n            request.session['viewed_books'] = viewed_books\n    ```", "```py\n        return render(request, \"reviews/book_detail.html\", context)\n    ```", "```py\n    def book_detail(request, pk):\n        …\n        if request.user.is_authenticated:\n            max_viewed_books_length = 10\n            viewed_books = request.session.get('viewed_books', [])\n            viewed_book = [book.id, book.title]\n            if viewed_book in viewed_books:\n                viewed_books.pop(viewed_books.index(viewed_book))\n            viewed_books.insert(0, viewed_book)\n            viewed_books = viewed_books[:max_viewed_books_length]\n            request.session['viewed_books'] = viewed_books\n        return render(request, \"reviews/book_detail.html\", context)\n    ```", "```py\n    <style>\n    .flexrow { display: flex;\n               border: 2px black;\n    }\n    .flexrow > div { flex: 1; }\n    .infocell {\n      border: 2px solid green;\n      border-radius: 5px 25px;\n      background-color: white;\n      padding: 5px;\n      margin: 20px 5px 5px 5px;\n    }\n    </style>\n      <div class=\"flexrow\" >\n        <div class=\"infocell\" >\n          <p>Profile</p>\n          …\n        </div>\n        <div class=\"infocell\" >\n          <p>Viewed Books</p>\n          …\n        </div>\n      </div>\n    ```", "```py\n    <a href=\"/books/1\">Advanced Deep Learning with Keras</a><br>\n    ```", "```py\n        <div class=\"infocell\" >\n          <p>Viewed Books</p>\n          <p>\n          {% for book_id, book_title in request.session.viewed_books %}\n          <a href=\"/books/{{ book_id }}\">{{ book_title }}</a><br>\n          {% empty %}\n                No recently viewed books found.\n          {% endfor %}\n          </p>\n        </div>\n    ```", "```py\ntemplates/profile.html\n1  {% extends \"base.html\" %}\n2\n3  {% block title %}Bookr{% endblock %}\n4\n5  {% block heading %}Profile{% endblock %}\n6\n7  {% block content %}\n8\n9  <style>\nYou can find the complete code for this file at http://packt.live/3btvSJZ.\n```", "```py\n    python session_info.py <session_data>\n```"]