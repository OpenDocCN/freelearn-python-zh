["```py\npip install HTTPretty\n\n```", "```py\n>>> pip install requests sure mock\n\n```", "```py\n method: register_uri(class, uri, body)\n\n```", "```py\nimport httpretty\nimport requests\nfrom sure import expect\n\ndef example():\n httpretty.enable()\n httpretty.register_uri(httpretty.GET, \"http://google.com/\",\n body=\"This is the mocked body\",\n status=201)\n response = requests.get(\"http://google.com/\")\n expect(response.status_code).to.equal(201)\n httpretty.disable()\n\n```", "```py\nimport httpretty\nimport requests\n\nfrom sure import expect\n\n@httpretty.activate\ndef example():\n httpretty.register_uri(httpretty.GET, \"http://google.com/\",\n body=\"This is the mocked body\",\n status=201)\n response = requests.get(\"http://google.com/\")\n expect(response.status_code).to.equal(201)\n\n```", "```py\nimport httpretty\nimport requests\n\nfrom sure import expect\n\n@httpretty.activate\ndef setting_header_example():\n httpretty.register_uri(httpretty.GET,\n \"http://api.example.com/some/path\",\n body='{\"success\": true}',\n status=200,\n content_type='text/json')\n\n response = requests.get(\"http://api.example.com/some/path\")\n\n expect(response.json()).to.equal({'success': True})\n expect(response.status_code).to.equal(200)\n\n```", "```py\nimport httpretty\nimport requests\n\nfrom sure import expect\n\n@httpretty.activate\ndef rotating_responses_example():\n URL = \"http://example.com/some/path\"\n RESPONSE_1 = \"This is Response 1.\"\n RESPONSE_2 = \"This is Response 2.\"\n RESPONSE_3 = \"This is Last Response.\"\n\n httpretty.register_uri(httpretty.GET,\n URL,\n responses=[\n httpretty.Response(body=RESPONSE_1,\n status=201),\n httpretty.Response(body=RESPONSE_2,\n status=202),\n httpretty.Response(body=RESPONSE_3,\n status=201)])\n\n response_1 = requests.get(URL)\n expect(response_1.status_code).to.equal(201)\n expect(response_1.text).to.equal(RESPONSE_1)\n\n response_2 = requests.get(URL)\n expect(response_2.status_code).to.equal(202)\n expect(response_2.text).to.equal(RESPONSE_2)\n\n response_3 = requests.get(URL)\n expect(response_3.status_code).to.equal(201)\n expect(response_3.text).to.equal(RESPONSE_3)\n\n response_4 = requests.get(URL)\n expect(response_4.status_code).to.equal(201)\n expect(response_4.text).to.equal(RESPONSE_3)\n\n```", "```py\nimport httpretty\nimport requests\nfrom time import sleep\nfrom sure import expect\n\ndef mock_streaming_repos(repos):\n for repo in repos:\n sleep(.5)\n yield repo\n\n@httpretty.activate\ndef streaming_responses_example():\n URL = \"https://api.github.com/orgs/python/repos\"\n REPOS = ['{\"name\": \"repo-1\", \"id\": 1}\\r\\n',\n '\\r\\n',\n '{\"name\": \"repo-2\", \"id\": 2}\\r\\n']\n\n httpretty.register_uri(httpretty.GET,\n URL,\n body=mock_streaming_repos(REPOS),\n streaming=True)\n\n response = requests.get(URL,\n data={\"track\": \"requests\"})\n\n line_iter = response.iter_lines()\n for i in xrange(len(REPOS)):\n expect(line_iter.next().strip()).to.equal(REPOS[i].strip())\n\n```", "```py\nimport httpretty\nimport requests\n\nfrom sure import expect\n\n@httpretty.activate\ndef dynamic_responses_example():\n def request_callback(method, uri, headers):\n return (200, headers, \"The {} response from {}\".format(method, uri)\n httpretty.register_uri(\n httpretty.GET, \"http://example.com/sample/path\",\n body=request_callback)\n\n response = requests.get(\"http://example.com/sample/path\")\n\n expect(response.text).to.equal(' http://example.com/sample/path')\n\n```"]