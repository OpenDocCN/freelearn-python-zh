["```py\nbl_info = {\n    \"name\": \"A Structured Add-on\",\n    \"author\": \"John Doe\",\n    \"version\": (1, 0),\n    \"blender\": (3, 2, 0),\n    \"description\": \"Add-on consisting of multiple files\",\n    \"category\": \"Learning\",\n}\n```", "```py\ndef register():\n    pass\ndef unregister():\n    pass\n```", "```py\nfrom bpy.utils import previews\nimport os\n```", "```py\n_CUSTOM_ICONS = None\n```", "```py\ndef register_icons():\n    \"\"\"Load icons from the add-on folder\"\"\"\n    global _CUSTOM_ICONS\n    if _CUSTOM_ICONS:  # avoid loading icons twice\n        return\n    collection = previews.new()\n```", "```py\n    img_extensions = ('.png', '.jpg')\n```", "```py\n    module_path = os.path.dirname(__file__)\n    picture_path = os.path.join(module_path, 'pictures')\n```", "```py\n    for img_file in os.listdir(picture_path):\n        img_name, ext = os.path.splitext(img_file)\n        if ext.lower() not in img_extensions:\n            # skip non image files\n            continue\n```", "```py\n        disk_path = os.path.join(picture_path, img_file)\n        collection.load(img_name, disk_path, 'IMAGE')\n```", "```py\n    _CUSTOM_ICONS = collection\n```", "```py\ndef unregister_icons():\n    global _CUSTOM_ICONS\n    if _CUSTOM_ICONS:\n        previews.remove(_CUSTOM_ICONS)\n    _CUSTOM_ICONS = None\n```", "```py\n>>> img_loader._CUSTOM_ICONS\n```", "```py\ndef get_icons_collection():\n    \"\"\"Get icons loaded from folder\"\"\"\n    register_icons()  # load icons from disk\n    assert _CUSTOM_ICONS  # if None something is wrong\n    return _CUSTOM_ICONS\n```", "```py\nfrom . import img_loader\n```", "```py\ndef register():\n    img_loader.register_icons()\ndef unregister():\n    img_loader.unregister_icons()\n```", "```py\nimport bpy\nfrom . import img_loader\n```", "```py\nclass OBJECT_PT_structured(bpy.types.Panel):\n    \"\"\"Creates a Panel in the object context\"\"\"\n    bl_label = \"A Modular Panel\"\n    bl_idname = \"MODULAR_PT_layout\"\n    bl_space_type = 'PROPERTIES'\n    bl_region_type = 'WINDOW'\n    bl_context = 'object'\n```", "```py\n    def draw(self, context):\n        layout = self.layout\n        icons = img_loader.get_icons_collection()\n        layout.label(text=\"A Custom Icon\",\n                     icon_value=icons['pack_64'].icon_id)\n```", "```py\ndef register_classes():\n    bpy.utils.register_class(OBJECT_PT_structured)\ndef unregister_classes():\n    bpy.utils.unregister_class(OBJECT_PT_structured)\n```", "```py\nfrom . import img_loader\nfrom . import panel\ndef register():\n    img_loader.register_icons()\n    panel.register_classes()\ndef unregister():\n    panel.unregister_classes()\n    img_loader.unregister_icons()\n```", "```py\nclass OBJECT_PT_structured(bpy.types.Panel):\n    \"\"\"Creates a Panel in the object context\"\"\"\n    bl_label = \"A Modular Panel\"\n    bl_idname = \"MODULAR_PT_layout\"\n    bl_space_type = 'PROPERTIES'\n    bl_region_type = 'WINDOW'\n    bl_context = 'object'\n    max_objects = 3  # limit displayed list to 3 objects\n```", "```py\n    def draw(self, context):\n        layout = self.layout\n        icons = img_loader.get_icons_collection()\n        row = layout.row(align=True)\n        row.label(text=\"Scene Objects\",\n                  icon_value=icons['pack_64'].icon_id)\n        row.label(text=\" \",\n                  icon_value=icons[\"smile_64\"].icon_id)\n        grid = layout.grid_flow(columns=2,\n                                row_major=True)\n        for i, ob in enumerate(context.scene.objects):\n            if i > self.max_objects:\n                grid.label(text=\"...\")\n                break\n            # display object name and type icon\n            grid.label(text=ob.name,\n                       icon=f'OUTLINER_OB_{ob.type}')\n```", "```py\nfrom importlib import reload\nreload(img_loader)\n```", "```py\nfrom . import img_loader\nfrom . import panel\nfrom importlib import reload\nreload(img_loader)\nreload(panel)\n```", "```py\nfrom importlib import reload\nimport sys\nimport bpy\nfrom . import *\n```", "```py\nShow options for developers (edit source in context …\nPython: PreferencesView.show_developer_ui\n```", "```py\nbpy.context.preferences.view.show_developer_ui\n```", "```py\ndef reload_modules():\n    if not bpy.context.preferences.view.show_developer_ui:\n        return\n```", "```py\ndef reload_modules():\n    if not bpy.context.preferences.view.show_developer_ui:\n        return\n    reload(sys.modules[__name__])\n    reload(img_loader)\n    reload(panel)\n```", "```py\nfrom . import img_loader\nfrom . import panel\nfrom . import _refresh_\n_refresh_.reload_modules()\n```", "```py\nimport bpy\nclass StructuredPreferences(bpy.types.AddonPreferences):\n    bl_idname = __package__\n    def draw(self, context):\n        layout = self.layout\n        layout.label(text=\"Structured Add-On Preferences\")\n```", "```py\ndef register_classes():\n    bpy.utils.register_class(StructuredPreferences)\ndef unregister_classes():\n    bpy.utils.unregister_class(StructuredPreferences)\n```", "```py\nfrom . import panel\nfrom . import img_loader\nfrom . import preferences\nfrom . import _refresh_\n_refresh_.reload_modules()\n```", "```py\ndef register():\n    img_loader.register_icons()\n    preferences.register_classes()\n    panel.register_classes()\ndef unregister():\n    panel.unregister_classes()\n    preferences.unregister_classes()\n    img_loader.unregister_icons()\n```", "```py\ndef _reload_modules():\n    reload(sys.modules[__name__])\n    reload(img_loader)\n    reload(preferences)\n    reload(panel)\n```", "```py\nimport bpy\nfrom bpy.props import IntProperty\nclass StructuredPreferences(bpy.types.AddonPreferences):\n    bl_idname = __package__\n    max_objects: IntProperty(\n        name=\"Maximum number of displayed objects\",\n        default=3\n    )\n```", "```py\nself.layout.prop(self, max_objects)\n```", "```py\n    def draw(self, context):\n        layout = self.layout\n        split = layout.split(factor=0.5)\n        split.separator()\n        split.label(text=\"Max Objects\")\n        split.prop(self, 'max_objects', text=\"\")\n```", "```py\nbpy.context.preferences.addons[ADDON_NAME].preferences\n```", "```py\nclass OBJECT_PT_structured(bpy.types.Panel):\n    \"\"\"Creates a Panel in the object context\"\"\"\n    bl_label = \"A Modular Panel\"\n    bl_idname = \"MODULAR_PT_layout\"\n    bl_space_type = 'PROPERTIES'\n    bl_region_type = 'WINDOW'\n    bl_context = 'object'\n```", "```py\n    add_on = context.preferences.addons[__package__]\n    preferences = add_on.preferences\n    for i, ob in enumerate(context.scene.objects):\n        if i >= preferences.max_objects:\n            grid.label(text=\"...\")\n            break\n```", "```py\nimport bpy\nimport random\ndef add_random_location(objects, amount=1,\n                        do_axis=(True, True, True)):\n    \"\"\"Add units to the locations of given objects\"\"\"\n    for ob in objects:\n        for i in range(3):\n            if do_axis[i]:\n                loc = ob.location\n                loc[i] += random.randint(-amount, amount)\n```", "```py\nclass TRANSFORM_OT_random_location(bpy.types.Operator):\n    \"\"\"Add units to the locations of selected objects\"\"\"\n    bl_idname = \"transform.add_random_location\"\n    bl_label = \"Add random Location\"\n    amount: bpy.props.IntProperty(name=\"Amount\",\n                                  default=1)\n    axis: bpy.props.BoolVectorProperty(\n                               name=\"Displace Axis\",\n                               default=(True, True, True)\n                               )\n@classmethod\n    def poll(cls, context):\n        return context.selected_objects\n    def execute(self, context):\n        add_random_location(context.selected_objects,\n                            self.amount,\n                            self.axis)\n        return {'FINISHED'}\n```", "```py\ndef register_classes():\n    bpy.utils.register_class(TRANSFORM_OT_random_location)\ndef unregister_classes():\n    bpy.utils.unregister_class(\n                              TRANSFORM_OT_random_location\n                              )\n```", "```py\nfrom . import operators\nfrom . import img_load\nfrom . import panel\nfrom . import preferences\nfrom . import _refresh_\n```", "```py\ndef register():\n    preferences.unregister_classes()\n    operators.register_classes()\n    img_load.register_icons()\n    panel.register_classes()\ndef unregister():\n    panel.unregister_classes()\n    img_load.unregister_icons()\n    operators.register_classes()\n    preferences.unregister_classes()\n```", "```py\nimport sys\nfrom importlib import reload\nimport bpy\nfrom . import *\ndef reload_modules():\n    if not bpy.context.preferences.view.show_developer_ui:\n        return\n    reload(sys.modules[__name__])\n    reload(img_load)\n    reload(preferences)\n    reload(operators)\n    reload(panel)\n```", "```py\nimport bpy\nfrom . import img_loader\nfrom . import operators\n```", "```py\n    layout.operator(\n          operators.TRANSFORM_OT_random_location.bl_idname\n          )\n```"]