["```py\n{\n    \"type\": \"TICKER\",\n    \"instrument_id\": \"eur-usd\",\n    \"timestamp\": \"2022-07-29T11:10:54.755Z\",\n    \"best_bid\": \"1.180970\",\n    \"best_ask\": \"1.181010\",\n    \"trade_id\": \"0B5WMAAAAAAAAAAS\",\n    \"last_quantity\": \"1000.0000\",\n    \"last_price\": \"1.180970\",\n    \"session_open\": \"1.181070\",\n    \"session_low\": \"1.180590\",\n    \"session_high\": \"1.181390\"\n}\n```", "```py\ninstrument_id.replace(\"-\", \"/\").upper()\n```", "```py\nfrom datetime import datetime\nts_str1 = '2022-07-29T11:10:54.755Z'\nts1 = datetime.strptime(ts_str1, '%Y-%m-%dT%H:%M:%S.%fZ')\n```", "```py\nIn [21]: ts1\nOut[21]: datetime.datetime(2022, 7, 29, 11, 10, 54, 755000)\n```", "```py\nIn [27]: ts1 > ts2\nOut[27]: False\n```", "```py\n    class data:\n    ```", "```py\n        def __init__ (self):\n    ```", "```py\n            self.series = {}\n    ```", "```py\n    def add(self, sample):\n    ```", "```py\n            ts = datetime.strptime(sample[\"timestamp\"], '%Y-%m-%dT%H:%M:%S.%fZ')\n    ```", "```py\n            self.series[ts] = sample\n    ```", "```py\n    def get(self, ts, key):\n    ```", "```py\n            return self.series[ts][key]\n    ```", "```py\nresult = [(key, value) for key, value in self.series.items() if key.startswith(\"2022-07-29T11:10:54\")]\nreturn result\n```", "```py\n    sample = {\n    ```", "```py\n        \"type\": \"TICKER\",\n    ```", "```py\n        \"instrument_id\": \"eur-usd\",\n    ```", "```py\n        \"timestamp\": \"2022-07-29T11:10:54.755Z\",\n    ```", "```py\n        \"best_bid\": \"1.180970\",\n    ```", "```py\n        \"best_ask\": \"1.181010\",\n    ```", "```py\n        \"trade_id\": \"0B5WMAAAAAAAAAAS\",\n    ```", "```py\n        \"last_quantity\": \"1000.0000\",\n    ```", "```py\n        \"last_price\": \"1.180970\",\n    ```", "```py\n        \"session_open\": \"1.181070\",\n    ```", "```py\n        \"session_low\": \"1.180590\",\n    ```", "```py\n        \"session_high\": \"1.181390\"\n    ```", "```py\n    }\n    ```", "```py\n    series = data()\n    ```", "```py\n    series.add(sample)\n    ```", "```py\n    timestamp = datetime.strptime(sample[\"timestamp\"], '%Y-%m-%dT%H:%M:%S.%fZ')\n    ```", "```py\n    print(series.get(timestamp, \"trade_id\"))\n    ```", "```py\n    {\n    ```", "```py\n        \"type\": \"ORDER_BOOK\",\n    ```", "```py\n        \"instrument_id\": \"eur-usd\",\n    ```", "```py\n        \"timestamp\": \"2022-07-29T11:10:54.755Z\",\n    ```", "```py\n        \"status\": \"OPEN\",\n    ```", "```py\n        \"bids\":\n    ```", "```py\n          [\n    ```", "```py\n                {\n    ```", "```py\n                    \"price\": \"1.181060\",\n    ```", "```py\n                    \"quantity\": \"500000.0000\"\n    ```", "```py\n                },\n    ```", "```py\n                {\n    ```", "```py\n                    \"price\": \"1.181050\",\n    ```", "```py\n                    \"quantity\": \"200000.0000\"\n    ```", "```py\n                }\n    ```", "```py\n          ],\n    ```", "```py\n          \"asks\": [\n    ```", "```py\n                {\n    ```", "```py\n                    \"price\": \"1.181100\",\n    ```", "```py\n                    \"quantity\": \"250000.0000\"\n    ```", "```py\n                },\n    ```", "```py\n                {\n    ```", "```py\n                    \"price\": \"1.181110\",\n    ```", "```py\n                    \"quantity\": \"350000.0000\"\n    ```", "```py\n                }\n    ```", "```py\n          ]\n    ```", "```py\n    }\n    ```", "```py\nbest_bid = series.get(timestamp, \"bids\")[0][\"price\"]\n```", "```py\nDate,Time,Open,High,Low,Close,UpVolume,DownVolume,TotalVolume,\nUpTicks,DownTicks,TotalTicks\n1/27/2015,13:29:00,1.12942,1.12950,1.12942,1.12949,200,150,639,3,2,8\n1/27/2015,13:30:00,1.12947,1.12959,1.12941,1.12941,230,438,888,4,7,12\n1/27/2015,13:31:00,1.12953,1.12970,1.12951,1.12965,400,240,650,9,4,14\n1/27/2015,13:32:00,1.12944,1.12944,1.12883,1.12883,90,609,749,2,10,13\n```", "```py\n    from datetime import datetime\n    ```", "```py\n    historical_data = {}\n    ```", "```py\n    sample = {}\n    ```", "```py\n    file_name = '/path/to/the/data/file'\n    ```", "```py\n    f = open(file_name)\n    ```", "```py\n    f.readline()\n    ```", "```py\n    for line in f:\n    ```", "```py\n        values = line.rstrip(\"\\n\").split(\",\")\n    ```", "```py\n        timestamp_string = values[0] + \" \" + values[1]\n    ```", "```py\n        ts = datetime.strptime(timestamp_string, \"%m/%d/%Y %H:%M:%S\")\n    ```", "```py\n        sample[\"open\"] = float(values[2])\n    ```", "```py\n        sample[\"high\"] = float(values[3])\n    ```", "```py\n        sample[\"low\"]  = float(values[4])\n    ```", "```py\n        sample[\"close\"]= float(values[5])\n    ```", "```py\n        sample[\"UpVolume\"] = int(values[6])\n    ```", "```py\n        sample[\"DownVolume\"] = int(values[7])\n    ```", "```py\n          historical_data[ts] = sample\n    ```", "```py\n    {'open': 1.12942, 'high': 1.1295, 'low': 1.12942, 'close': 1.12949, 'UpVolume': 200, 'DownVolume': 150}\n    ```", "```py\n    historical_data[timestamp]['close']\n    ```", "```py\nfor ts in sorted(historical_data):\n    print(historical_data[ts])\n```", "```py\n    file_name = '<your_path_name>/EURUSD 1 Tick.csv'\n    ```", "```py\n    f = open(file_name)\n    ```", "```py\n    f.readline()\n    ```", "```py\n    from datetime import datetime\n    ```", "```py\n    bars = {}\n    ```", "```py\n    bar = {}\n    ```", "```py\n    resolution = 60\n    ```", "```py\n    values = f.readline().rstrip(\"\\n\").split(\",\")\n    ```", "```py\n    timestamp_string = values[0] + \" \" + values[1]\n    ```", "```py\n    last_sample_ts = datetime.strptime(timestamp_string, \"%m/%d/%Y %H:%M:%S.%f\")\n    ```", "```py\nfor line in f:\n    values = line.rstrip(\"\\n\").split(\",\")\n    timestamp_string = values[0] + \" \" + values[1]\n    ts = datetime.strptime(timestamp_string, \"%m/%d/%Y %H:%M:%S.%f\")\n```", "```py\n    delta = ts - last_sample_ts\n```", "```py\n        if delta.seconds >= resolution:\n    ```", "```py\n            bars[ts] = bar\n    ```", "```py\n            bar[\"open\"]  = float(values[2])\n    ```", "```py\n            bar[\"high\"]  = float(values[2])\n    ```", "```py\n            bar[\"low\"]   = float(values[2])\n    ```", "```py\n            last_sample_ts = ts\n    ```", "```py\n    else:\n       bar[\"high\"] = max([bar[\"high\"], float(values[2])])\n       bar[\"low\"] = min([bar[\"low\"], float(values[2])])\n       bar[\"close\"] = float(values[2])\n```", "```py\nFile \"/.../example5.py\", line 36, in <module>\n    bar[\"high\"] = max([bar[\"high\"], float(values[2])])\nKeyError: 'high'\n```", "```py\nelse:\n        try:\n            bar[\"high\"] = max([bar[\"high\"], float(values[2])])\n            bar[\"low\"] = min([bar[\"low\"], float(values[2])])\n            bar[\"close\"] = float(values[2])\n        except:\n            print('first bar forming...')\n```", "```py\n    datetime.datetime(2022, 8, 8, 18, 53, 8, 64000): {'open': 1.01973,\n    ```", "```py\n      'high': 1.01984,\n    ```", "```py\n      'low': 1.01972,\n    ```", "```py\n      'close': 1.01972},\n    ```", "```py\n     datetime.datetime(2022, 8, 8, 18, 54, 8, 347000): {'open': 1.01973,\n    ```", "```py\n      'high': 1.01984,\n    ```", "```py\n      'low': 1.01972,\n    ```", "```py\n      'close': 1.01972},\n    ```", "```py\n     datetime.datetime(2022, 8, 8, 18, 55, 10, 731000): {'open': 1.01973,\n    ```", "```py\n      'high': 1.01984,\n    ```", "```py\n      'low': 1.01972,\n    ```", "```py\n      'close': 1.01972},\n    ```", "```py\n     datetime.datetime(2022, 8, 8, 18, 56, 12, 81000): {'open': 1.01973,\n    ```", "```py\n      'high': 1.01984,\n    ```", "```py\n      'low': 1.01972,\n    ```", "```py\n      'close': 1.01972}}\n    ```", "```py\ndatetime.datetime(2022, 8, 8, 18, 53, 8, 64000): {'open': 1.01982,\n  'high': 1.02007,\n  'low': 1.01982,\n  'close': 1.02001},\n datetime.datetime(2022, 8, 8, 18, 54, 8, 347000): {'open': 1.01996,\n  'high': 1.01998,\n  'low': 1.01979,\n  'close': 1.01981},\n datetime.datetime(2022, 8, 8, 18, 55, 10, 731000): {'open': 1.01977,\n  'high': 1.01982,\n  'low': 1.01965,\n  'close': 1.01965},\n datetime.datetime(2022, 8, 8, 18, 56, 12, 81000): {'open': 1.01968,\n  'high': 1.01971,\n  'low': 1.01964,\n  'close': 1.01968}}\n```", "```py\nimport queue\nq = queue.Queue()\nq.put(\"Sample 1\")\nq.put(\"Sample 2\")\nprint(q.get())\n```", "```py\n    file_name = '<your_file_path>/EURUSD 1 Tick.csv'\n    ```", "```py\n    f = open(file_name)\n    ```", "```py\n    f.readline()\n    ```", "```py\n    from datetime import datetime\n    ```", "```py\n    import threading\n    ```", "```py\n    import queue\n    ```", "```py\n    import time\n    ```", "```py\n    datastream = queue.Queue()\n    ```", "```py\n    def get_tick():\n    ```", "```py\n        tick = {}\n    ```", "```py\n        values = f.readline().rstrip(\"\\n\").split(\",\")\n    ```", "```py\n        timestamp_string = values[0] + \" \" + values[1]\n    ```", "```py\n        ts = datetime.strptime(timestamp_string, \"%m/%d/%Y %H:%M:%S.%f\")\n    ```", "```py\n        tick[ts] = float(values[2])\n    ```", "```py\n        return tick\n    ```", "```py\ndef emulate_tick_stream():\n    while True:\n        time.sleep(1)\n        temp = get_tick()\n        datastream.put(temp)\ndef trading_algo():\n    while True:\n      temp = datastream.get()\n        print('Received tick ', temp)\n```", "```py\n    data_source_thread = threading.Thread(target = emulate_tick_stream)\n    ```", "```py\n    data_receiver_thread = threading.Thread(target = trading_algo)\n    ```", "```py\n    data_source_thread.start()\n    ```", "```py\n    data_receiver_thread.start()\n    ```", "```py\n('Received tick ', {datetime.datetime(2022, 8, 8, 13, 50, 30, 446000): 1.01896})\n('Received tick ', {datetime.datetime(2022, 8, 8, 13, 50, 31, 505000): 1.01895})\n('Received tick ', {datetime.datetime(2022, 8, 8, 13, 50, 33, 619000): 1.019})\n('Received tick ', {datetime.datetime(2022, 8, 8, 13, 50, 36, 793000): 1.01901})\n```", "```py\n    def compressor():\n    ```", "```py\n          bar = {}\n    ```", "```py\n          while True:\n    ```", "```py\n              tick = datastream.get()\n    ```", "```py\n              current_time = datetime.now()\n    ```", "```py\n              if current_time.second == 0:\n    ```", "```py\n                  bars[current_time] = dict(bar)\n    ```", "```py\n                  bar[\"open\"]  = tick.values()[0]\n    ```", "```py\n                  bar[\"high\"]  = tick.values()[0]\n    ```", "```py\n                  bar[\"low\"]   = tick.values()[0]\n    ```", "```py\n                  print(bars)\n    ```", "```py\n            else:\n                try:\n                    bar[\"high\"] = max([bar[\"high\"], tick.values()[0]])\n                    bar[\"low\"] = min([bar[\"low\"], tick.values()[0]])\n                    bar[\"close\"] = tick.values()[0]\n                except:\n                    print(str(current_time), ' bar forming...')\n```", "```py\n{datetime.datetime(2022, 8, 10, 20, 4, 0, 287224): {}, datetime.datetime(2022, 8, 10, 20, 5, 0, 456837): {'high': 1.01947, 'close': 1.01947, 'open': 1.01918, 'low': 1.01918}, datetime.datetime(2022, 8, 10, 20, 6, 0, 639863): {'high': 1.0195, 'close': 1.01925, 'open': 1.01945, 'low': 1.01925}}\n```"]