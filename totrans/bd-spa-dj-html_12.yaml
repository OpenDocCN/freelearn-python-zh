- en: 'Chapter 8: Simplifying the Frontend'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Throughout the chapters (e.g., doing the chat project or the blog), we wrote
    sloppy JavaScript code. We were forced to repeat tasks every time the backend
    sent new HTML, cleaning up orphaned events and reassigning new ones to the newly
    created DOM. Our ambitions with the frontend have been quite modest. We’ve limited
    ourselves to surviving by focusing all our energies on the Django code. If we
    had had a tool to handle events via HTML rendered by the server, the JavaScript
    code would have been less verbose and much easier to work with. It’s time to refactor
    the frontend, but we need help to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stimulus is ideal for the job. We are talking about a framework whose objective
    is to constantly monitor changes in the page by connecting attributes and events
    with functions that we indicate. We can create controllers that we will assign
    through datasets to the inputs or any other element that we need to incorporate
    an event. And, in turn, we will associate each event to some logic in JavaScript.
    A fantastic definition that is in Stimulus’ own documentation: you should think
    of Stimulus as a CSS class that connects an HTML element with a set of styles.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will focus on creating a minimal example with Stimulus
    that will serve as a basis for understanding how it works and that can be implemented
    in any event on the website. In order, we will cover the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Stimulus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining a controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing events with actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Capturing references with targets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building an application that converts text into uppercase letters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final goal is to build a small application where we write in a text box
    and in real time, we visualize the same string but in capital letters. For this,
    we will use Stimulus to capture the event and the input value and communicate
    with the consumer. You will be surprised at how elegant the frontend will become
    when everything is in place.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The example is based on the template we used in [*Chapter 4*](B18321_04_ePub.xhtml#_idTextAnchor090)*,
    Working with the Database*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The finished code can be found in the following repository:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-8](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-8)'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also recommended that you visit Stimulus’ own documentation to learn
    more about important concepts such as controllers, actions, and targets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://stimulus.hotwired.dev/handbook/](https://stimulus.hotwired.dev/handbook/)'
  prefs: []
  type: TYPE_NORMAL
- en: And, optionally, it’s recommended that you have a modern version of Node.js
    along with the latest version of `npm`. We will use it to install the Stimulus
    package, but we can also use the CDN.
  prefs: []
  type: TYPE_NORMAL
- en: CDN or Content delivery network
  prefs: []
  type: TYPE_NORMAL
- en: A CDN is a group of servers located around the world that work together to deliver
    content to users quickly and efficiently. It is used with static content such
    as images, CSS and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: With the resources clear, we can now start implementing a better version of
    the frontend. We will start by installing Stimulus and talking about its different
    configurations.
  prefs: []
  type: TYPE_NORMAL
- en: Installing and configuring Stimulus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Before you can use Stimulus, you will need to download and install the framework.
    If you don’t want to complicate things, you can import it from its CDN. Just add
    the following script in the HTML template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: If you opt for this solution, you can ignore the rest of this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, if you want to download Stimulus, which is very good practice, please
    note that it is available in the `npm` packages, so let’s install it with a command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, you have three different configuration possibilities: using Webpack,
    using another build system, or using the native JavaScript module system. We are
    going to focus on the last option, using modules, to simplify your implementation
    and not add more complexity:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the Stimulus file to a folder inside `static`, for example, in the `static/js/vendors/`
    path:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We create a JavaScript file called `main.js` that will contain all future frontend
    logic and imports (including Stimulus):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the file we just created, `main.js`, we will import Stimulus and run
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we import the JavaScript module into a script that will be present
    in the main HTML template of the application so that the browser can load it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Stimulus is ready! It’s up and running and waiting for our events.
  prefs: []
  type: TYPE_NORMAL
- en: 'The best way to understand all the elementary concepts is to create a simple
    application. As we said in the introduction, we are going to build an app that
    has a basic functionality: convert some text from lowercase to uppercase. We will
    have an input and a button; when pressed, the button will show the uppercase text
    at the bottom.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To achieve the objective, we will learn about the three basic pillars of Stimulus:
    **controllers**, **actions** (not to be confused with those created in the backend),
    and **targets**. We will start by looking at controllers and their importance
    in organizing logic.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining a controller
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The purpose of the controller is to connect the DOM with JavaScript. It will
    bind the inputs to a variable and the events that we indicate to a function created
    inside the controller.
  prefs: []
  type: TYPE_NORMAL
- en: 'The structure is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We have imported the `Controller` class that belongs to the framework itself
    with a combination of `import` and `from`. Then, we created a class that extends
    `Controller` and is also accessible from an import (`export default`). Inside,
    we have an example of a target called `input1` and two functions: `connect()`
    will be executed when Stimulus is ready and `myFunction()`is an example function
    that can be executed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For the application, we will create a file in `static/js/controllers/transformer_controller.js`
    with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'As you can see, it is a reorganization of the code we used in the frontend
    during the previous chapters. Let’s take a closer look at each part:'
  prefs: []
  type: TYPE_NORMAL
- en: In `targets`, we define a variable called `myText` that will be linked later,
    in the *Capturing references with targets* section, where we get the value of
    the input. Inside the controller, we can use the input with `this.mytextTarget`.
    A target contains all the elements of an input, such as `value`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`connect()` is a function that is executed when the driver is fully mounted.
    It is a good place to connect to the WebSockets server and set a listener event
    for messages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lowercaseToUppercase(event)` is a function that sends the backend the text
    to convert to uppercase. In the next section, *Managing events with actions*,
    we will link the button click event to the function. For now, we just declare
    its logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After declaring the controller, we need to register it in Stimulus and give
    it a name. We edit `static/js/main.js` with the following code.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Basically, we have imported the `TransformerController` class and registered
    it in Stimulus with the alias `transformer`.
  prefs: []
  type: TYPE_NORMAL
- en: At the moment, Stimulus already has a controller registered, but it doesn’t
    know which area of the DOM it should be watching and where to apply it. Let’s
    take care of that.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a new template, for example with the name `index.html`, we are going to
    create a simple form and an element to render everything coming from the backend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The form has a field to write the text and a button that will execute the action.
    On the other hand, we have included a HTML `div` tag with the ID `results`, which
    will be the place to show the text already converted into uppercase processed
    by the backend
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to tell Stimulus to make the controller work with the DOM of our
    choice. The way to do this is by means of a `data-controller` dataset:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'In our case, we update the opening of `<main>`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Easy, isn’t it? Stimulus already has a registered controller and now knows where
    to apply it.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to indicate which event is related to which function, and which
    input is related to which target.
  prefs: []
  type: TYPE_NORMAL
- en: Managing events with actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Actions are a structure used by Stimulus to link events to controller functions.
    They are declared in the DOM by means of a `data-action` dataset with the following
    structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: It will only work if it is inside a controller with the same alias; you cannot
    place an action in DOMs outside the tree.
  prefs: []
  type: TYPE_NORMAL
- en: 'Following the example, we modify our button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s analyze what we have done with `data-action`, since it contains its own
    format that we must follow:'
  prefs: []
  type: TYPE_NORMAL
- en: The event is `click`. It could be any other event, such as a `submit` event
    if we were in a HTML `<form>` tag, a `scroll` event, and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the arrow, `->`, which acts as a separator, we indicate the alias of the
    controller where it is enclosed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, after `#`, which is another separator, we indicate the function to
    be executed (`lowercaseToUppercase`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We have simplified the definition of the events, but now they will also be self-managed
    as we include or remove elements in the DOM. Not only that, but the backend now
    has the superpower to add new events. Yes, you read that right, the backend can
    include JavaScript events! They have become datasets in the HTML that we can remove
    or add as needed.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is only one step left to finish with Stimulus: detailing the inputs that
    can be accessed with the targets. Otherwise, we will not be able to collect the
    information from the forms.'
  prefs: []
  type: TYPE_NORMAL
- en: Capturing references with targets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Stimulus connects to form inputs via targets, or a special dataset. Internally,
    Stimulus creates a variable that can be used anywhere in the controller. For example,
    we define in the DOM an alias called `name`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'While in the controller, we define the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'From here, I can call the target within any function/method in the following
    way:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: As you can see, the alias is joined with the target text.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the application we are developing, we have defined the target with the name
    `myText`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'We update the DOM of the input as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: The whole frontend is ready. We have installed Stimulus, created a controller,
    and defined an action to trigger actions and a target to collect the input text.
    We only need to define the functionality in the consumer. We go to Django.
  prefs: []
  type: TYPE_NORMAL
- en: An application that converts text into uppercase letters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have already simplified the frontend with Stimulus, installing, configuring,
    and implementing the tools provided by this fantastic framework. However, we still
    have one last step left in the application that converts the text from lowercase
    to uppercase: implementing the backend in the consumer.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `app/app_template/consumers.py` with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: The code is so basic that it looks like it belongs in the first chapters. We
    have removed the `actions.py` file and some other elements, as we are just looking
    for the minimum necessary to make it work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s review where the information enters the backend, where it is transformed,
    and where it is returned:'
  prefs: []
  type: TYPE_NORMAL
- en: The information from the frontend goes to `receive_json`, which in turn receives
    the `'text in capital letters'` action by executing the `self.send_uppercase(data)`
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self.send_uppercase(data)` converts the text to uppercase and sends the information
    to the frontend, specifically to the `#results` selector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It’s time to test that everything works. We pull up Docker and go to `http://hello.localhost`.
    Type in the input and click on the **Transform** button.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 8.1 – We tested that the application works by transforming lowercase
    letters into uppercase'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_8.01_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 8.1 – We tested that the application works by transforming lowercase
    letters into uppercase
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom, the text will be displayed in capitals – we’ve done it!
  prefs: []
  type: TYPE_NORMAL
- en: 'We can even improve it. The local delay between pressing the button and displaying
    the final result is negligible, in my case, 0.002 seconds. We can incorporate
    the `input` event into the input to see the result as we type, giving a feeling
    that there is no apparent delay:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: And with this small optimization, we can conclude the backend implementation
    of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'You might be tempted to take Stimulus to the examples in the previous chapters
    – I can only tell you: go ahead. It will be neater, you will learn a lot more
    about Stimulus, and things will be easier to maintain.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our journey of learning HTML over the wire with Django comes to an end. We are
    now able to create SPAs in real time by gathering all the logic in the backend,
    avoiding duplicating tasks such as validations or HTML structures. We have relieved
    the frontend of a big responsibility; it now only needs to handle events or animations,
    thanks to Stimulus controllers and internal automation from datasets.
  prefs: []
  type: TYPE_NORMAL
- en: 'I would love to tell you that you already know everything you need to know,
    but the journey continues. The book is just a first push. There is still a lot
    of work ahead of you: practice, adopt Stimulus in your workflow (or any other
    similar framework), solve small difficulties typical of any SPA (such as managing
    when the user clicks on the back button in the history), explore other related
    protocols such as Server-Side Events, train your colleagues, convince your boss,
    define your line between backend and frontend (the infinite struggle of any web
    developer), and even adopt some other framework. The limit is set by you.'
  prefs: []
  type: TYPE_NORMAL
- en: It has been a pleasure to join you in this real-time Python adventure. I have
    enjoyed writing every line and preparing every example. Thank you.
  prefs: []
  type: TYPE_NORMAL
- en: 'I can only say to you: I expect big things from you.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
