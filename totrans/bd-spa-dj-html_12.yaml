- en: 'Chapter 8: Simplifying the Frontend'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 8 章：简化前端
- en: Throughout the chapters (e.g., doing the chat project or the blog), we wrote
    sloppy JavaScript code. We were forced to repeat tasks every time the backend
    sent new HTML, cleaning up orphaned events and reassigning new ones to the newly
    created DOM. Our ambitions with the frontend have been quite modest. We’ve limited
    ourselves to surviving by focusing all our energies on the Django code. If we
    had had a tool to handle events via HTML rendered by the server, the JavaScript
    code would have been less verbose and much easier to work with. It’s time to refactor
    the frontend, but we need help to do that.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在整个章节（例如，进行聊天项目或博客），我们编写了混乱的 JavaScript 代码。每当后端发送新的 HTML 时，我们被迫重复任务，清理孤儿事件并将新事件重新分配给新创建的
    DOM。我们对前端的目标相当谦虚。我们限制自己通过专注于 Django 代码来生存。如果我们有一个通过服务器渲染的 HTML 处理事件的工具，JavaScript
    代码将更加简洁，并且更容易处理。是时候重构前端了，但我们需要帮助来完成这项工作。
- en: 'Stimulus is ideal for the job. We are talking about a framework whose objective
    is to constantly monitor changes in the page by connecting attributes and events
    with functions that we indicate. We can create controllers that we will assign
    through datasets to the inputs or any other element that we need to incorporate
    an event. And, in turn, we will associate each event to some logic in JavaScript.
    A fantastic definition that is in Stimulus’ own documentation: you should think
    of Stimulus as a CSS class that connects an HTML element with a set of styles.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Stimulus 是这项工作的理想选择。我们谈论的是一个框架，其目标是通过对我们指定的函数连接属性和事件来不断监控页面上的变化。我们可以创建控制器，通过数据集将它们分配给输入或任何其他需要添加事件的元素。然后，我们将每个事件与
    JavaScript 中的某些逻辑相关联。这是一个在 Stimulus 的官方文档中找到的精彩定义：你应该将 Stimulus 视为一个 CSS 类，它将一个
    HTML 元素与一组样式连接起来。
- en: 'In this chapter, we will focus on creating a minimal example with Stimulus
    that will serve as a basis for understanding how it works and that can be implemented
    in any event on the website. In order, we will cover the following points:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于创建一个使用 Stimulus 的最小示例，它将作为理解其工作原理的基础，并且可以在网站上的任何事件中实现。我们将按顺序介绍以下内容：
- en: Installing and configuring Stimulus
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置 Stimulus
- en: Defining a controller
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义控制器
- en: Managing events with actions
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用动作管理事件
- en: Capturing references with targets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用目标捕获引用
- en: Building an application that converts text into uppercase letters
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建一个将文本转换为 uppercase 字母的应用程序
- en: The final goal is to build a small application where we write in a text box
    and in real time, we visualize the same string but in capital letters. For this,
    we will use Stimulus to capture the event and the input value and communicate
    with the consumer. You will be surprised at how elegant the frontend will become
    when everything is in place.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 最终目标是构建一个小的应用程序，我们在文本框中编写，实时可视化相同的字符串，但以大写字母形式。为此，我们将使用 Stimulus 来捕获事件和输入值并与消费者进行通信。当一切就绪时，你将惊讶于前端将多么优雅。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The example is based on the template we used in [*Chapter 4*](B18321_04_ePub.xhtml#_idTextAnchor090)*,
    Working with the Database*:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 示例基于我们在 [*第 4 章*](B18321_04_ePub.xhtml#_idTextAnchor090) *“与数据库一起工作”* 中使用的模板：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Django 和 HTML Over-the-Wire 构建 SPAs 的第 4 章/初始模板](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-4/initial-template)'
- en: 'The finished code can be found in the following repository:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的代码可以在以下存储库中找到：
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-8](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-8)'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[使用 Django 和 HTML Over-the-Wire 构建 SPAs 的第 8 章](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-8)'
- en: 'It is also recommended that you visit Stimulus’ own documentation to learn
    more about important concepts such as controllers, actions, and targets:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 还建议您访问 Stimulus 的官方文档，以了解更多关于控制器、动作和目标等重要概念的信息：
- en: '[https://stimulus.hotwired.dev/handbook/](https://stimulus.hotwired.dev/handbook/)'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '[Stimulus 手册](https://stimulus.hotwired.dev/handbook/)'
- en: And, optionally, it’s recommended that you have a modern version of Node.js
    along with the latest version of `npm`. We will use it to install the Stimulus
    package, but we can also use the CDN.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，建议你拥有一个现代版本的Node.js以及最新版本的`npm`。我们将使用它来安装Stimulus包，但我们也可以使用CDN。
- en: CDN or Content delivery network
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: CDN或内容分发网络
- en: A CDN is a group of servers located around the world that work together to deliver
    content to users quickly and efficiently. It is used with static content such
    as images, CSS and JavaScript.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: CDN是一组位于世界各地的服务器，它们协同工作以快速有效地向用户交付内容。它与静态内容（如图像、CSS和JavaScript）一起使用。
- en: With the resources clear, we can now start implementing a better version of
    the frontend. We will start by installing Stimulus and talking about its different
    configurations.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源明确之后，我们现在可以开始实现前端的一个更好版本。我们将从安装Stimulus并讨论其不同的配置开始。
- en: Installing and configuring Stimulus
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和配置Stimulus
- en: 'Before you can use Stimulus, you will need to download and install the framework.
    If you don’t want to complicate things, you can import it from its CDN. Just add
    the following script in the HTML template:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在你能够使用Stimulus之前，你需要下载并安装该框架。如果你不想使事情复杂化，你可以从其CDN导入。只需在HTML模板中添加以下脚本即可：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If you opt for this solution, you can ignore the rest of this section.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你选择这种解决方案，你可以忽略本节的其余部分。
- en: 'However, if you want to download Stimulus, which is very good practice, please
    note that it is available in the `npm` packages, so let’s install it with a command:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你想下载Stimulus，这是一个非常好的实践，请注意它可以在`npm`包中找到，所以让我们用命令来安装它：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'From here, you have three different configuration possibilities: using Webpack,
    using another build system, or using the native JavaScript module system. We are
    going to focus on the last option, using modules, to simplify your implementation
    and not add more complexity:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，你有三种不同的配置可能性：使用Webpack，使用另一个构建系统，或者使用原生的JavaScript模块系统。我们将专注于最后一个选项，使用模块，以简化你的实现并避免增加复杂性：
- en: 'Copy the Stimulus file to a folder inside `static`, for example, in the `static/js/vendors/`
    path:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Stimulus文件复制到`static`文件夹内的一个文件夹中，例如，在`static/js/vendors/`路径下：
- en: '[PRE4]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We create a JavaScript file called `main.js` that will contain all future frontend
    logic and imports (including Stimulus):'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们创建一个名为`main.js`的JavaScript文件，该文件将包含所有未来的前端逻辑和导入（包括Stimulus）：
- en: '[PRE5]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Inside the file we just created, `main.js`, we will import Stimulus and run
    it:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们刚刚创建的文件中，`main.js`，我们将导入Stimulus并运行它：
- en: '[PRE6]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Finally, we import the JavaScript module into a script that will be present
    in the main HTML template of the application so that the browser can load it:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将JavaScript模块导入一个将在应用程序的主要HTML模板中存在的脚本中，以便浏览器可以加载它：
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Stimulus is ready! It’s up and running and waiting for our events.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Stimulus已准备就绪！它正在运行，等待我们的事件。
- en: 'The best way to understand all the elementary concepts is to create a simple
    application. As we said in the introduction, we are going to build an app that
    has a basic functionality: convert some text from lowercase to uppercase. We will
    have an input and a button; when pressed, the button will show the uppercase text
    at the bottom.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 理解所有基本概念的最佳方式是创建一个简单的应用程序。正如我们在介绍中提到的，我们将构建一个具有基本功能的应用程序：将一些文本从小写转换为大写。我们将有一个输入和一个按钮；当按钮被按下时，按钮将在底部显示大写文本。
- en: 'To achieve the objective, we will learn about the three basic pillars of Stimulus:
    **controllers**, **actions** (not to be confused with those created in the backend),
    and **targets**. We will start by looking at controllers and their importance
    in organizing logic.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现目标，我们将了解Stimulus的三个基本支柱：**控制器**、**动作**（不要与后端创建的动作混淆）和**目标**。我们将首先查看控制器及其在组织逻辑中的重要性。
- en: Defining a controller
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义一个控制器
- en: The purpose of the controller is to connect the DOM with JavaScript. It will
    bind the inputs to a variable and the events that we indicate to a function created
    inside the controller.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器的目的是将DOM与JavaScript连接起来。它将输入绑定到一个变量，并将我们指示的事件绑定到控制器内部创建的函数。
- en: 'The structure is as follows:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 结构如下：
- en: '[PRE8]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We have imported the `Controller` class that belongs to the framework itself
    with a combination of `import` and `from`. Then, we created a class that extends
    `Controller` and is also accessible from an import (`export default`). Inside,
    we have an example of a target called `input1` and two functions: `connect()`
    will be executed when Stimulus is ready and `myFunction()`is an example function
    that can be executed.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过`import`和`from`的组合导入了框架自带的`Controller`类。然后，我们创建了一个扩展`Controller`的类，并且可以通过导入来访问它（`export
    default`）。在内部，我们有一个名为`input1`的目标示例和两个函数：当Stimulus准备就绪时将执行`connect()`函数，而`myFunction()`是一个示例函数，它可以被执行。
- en: 'For the application, we will create a file in `static/js/controllers/transformer_controller.js`
    with the following content:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 对于应用程序，我们将在`static/js/controllers/transformer_controller.js`中创建一个文件，内容如下：
- en: '[PRE20]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'As you can see, it is a reorganization of the code we used in the frontend
    during the previous chapters. Let’s take a closer look at each part:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，这是我们在前几章的前端代码中的重构。让我们更仔细地看看每个部分：
- en: In `targets`, we define a variable called `myText` that will be linked later,
    in the *Capturing references with targets* section, where we get the value of
    the input. Inside the controller, we can use the input with `this.mytextTarget`.
    A target contains all the elements of an input, such as `value`.
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`targets`中，我们定义了一个名为`myText`的变量，它将在*使用目标捕获引用*部分稍后链接，在那里我们获取输入的值。在控制器内部，我们可以使用`this.mytextTarget`使用输入。一个目标包含所有输入元素，如`value`。
- en: '`connect()` is a function that is executed when the driver is fully mounted.
    It is a good place to connect to the WebSockets server and set a listener event
    for messages.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`connect()`是一个在驱动程序完全挂载时执行的函数。这是一个连接到WebSocket服务器并设置消息监听事件的好地方。'
- en: '`lowercaseToUppercase(event)` is a function that sends the backend the text
    to convert to uppercase. In the next section, *Managing events with actions*,
    we will link the button click event to the function. For now, we just declare
    its logic.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lowercaseToUppercase(event)`是一个将文本发送到后端以转换为大写的函数。在下一节*使用动作管理事件*中，我们将按钮点击事件链接到该函数。目前，我们只是声明其逻辑。'
- en: After declaring the controller, we need to register it in Stimulus and give
    it a name. We edit `static/js/main.js` with the following code.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在声明控制器之后，我们需要在Stimulus中注册它并给它一个名字。我们使用以下代码编辑`static/js/main.js`。
- en: '[PRE52]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Basically, we have imported the `TransformerController` class and registered
    it in Stimulus with the alias `transformer`.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，我们已经导入了`TransformerController`类，并在Stimulus中用别名`transformer`注册了它。
- en: At the moment, Stimulus already has a controller registered, but it doesn’t
    know which area of the DOM it should be watching and where to apply it. Let’s
    take care of that.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，Stimulus已经注册了一个控制器，但它不知道应该监视DOM的哪个区域以及在哪里应用它。让我们来处理这个问题。
- en: 'In a new template, for example with the name `index.html`, we are going to
    create a simple form and an element to render everything coming from the backend:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个新的模板中，例如名为`index.html`的模板，我们将创建一个简单的表单和一个用于渲染来自后端的所有内容的元素：
- en: '[PRE58]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The form has a field to write the text and a button that will execute the action.
    On the other hand, we have included a HTML `div` tag with the ID `results`, which
    will be the place to show the text already converted into uppercase processed
    by the backend
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 表单有一个用于写入文本的字段和一个将执行动作的按钮。另一方面，我们包含了一个带有ID `results`的HTML `div`标签，它将是显示由后端处理并转换为大写的文本的地方
- en: 'We are going to tell Stimulus to make the controller work with the DOM of our
    choice. The way to do this is by means of a `data-controller` dataset:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将告诉Stimulus使用我们选择的DOM来使控制器工作。这样做的方式是通过`data-controller`数据集：
- en: '[PRE65]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'In our case, we update the opening of `<main>`:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们更新了`<main>`的打开方式：
- en: '[PRE66]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Easy, isn’t it? Stimulus already has a registered controller and now knows where
    to apply it.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 很简单，不是吗？Stimulus已经注册了一个控制器，现在知道在哪里应用它。
- en: The next step is to indicate which event is related to which function, and which
    input is related to which target.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是指出哪个事件与哪个函数相关联，哪个输入与哪个目标相关联。
- en: Managing events with actions
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用动作管理事件
- en: 'Actions are a structure used by Stimulus to link events to controller functions.
    They are declared in the DOM by means of a `data-action` dataset with the following
    structure:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 动作是Stimulus用来将事件链接到控制器函数的结构。它们通过具有以下结构的`data-action`数据集在DOM中声明：
- en: '[PRE67]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: It will only work if it is inside a controller with the same alias; you cannot
    place an action in DOMs outside the tree.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它只有在它位于具有相同别名的控制器内部时才会工作；你不能在树外的DOM中放置一个动作。
- en: 'Following the example, we modify our button:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 按照示例，我们修改我们的按钮：
- en: '[PRE73]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Let’s analyze what we have done with `data-action`, since it contains its own
    format that we must follow:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分析一下我们用 `data-action` 做了什么，因为它包含我们必须遵循的格式：
- en: The event is `click`. It could be any other event, such as a `submit` event
    if we were in a HTML `<form>` tag, a `scroll` event, and so on.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 事件是 `click`。它可以是任何其他事件，例如，如果我们在一个 HTML `<form>` 标签中，则可能是 `submit` 事件，或者是一个 `scroll`
    事件等等。
- en: After the arrow, `->`, which acts as a separator, we indicate the alias of the
    controller where it is enclosed.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在箭头 `->` 之后，它作为分隔符，我们指出包含它的控制器别名。
- en: Finally, after `#`, which is another separator, we indicate the function to
    be executed (`lowercaseToUppercase`).
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在 `#` 之后，它是另一个分隔符，我们指出要执行的函数（`lowercaseToUppercase`）。
- en: We have simplified the definition of the events, but now they will also be self-managed
    as we include or remove elements in the DOM. Not only that, but the backend now
    has the superpower to add new events. Yes, you read that right, the backend can
    include JavaScript events! They have become datasets in the HTML that we can remove
    or add as needed.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简化了事件的定义，但现在它们也会在包含或删除 DOM 元素时自动管理。不仅如此，后端现在还具有添加新事件的超级能力。是的，你没听错，后端可以包含 JavaScript
    事件！它们已成为 HTML 中的数据集，我们可以根据需要删除或添加。
- en: 'There is only one step left to finish with Stimulus: detailing the inputs that
    can be accessed with the targets. Otherwise, we will not be able to collect the
    information from the forms.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 完成与 Stimulus 相关的最后一个步骤只剩下：详细说明可以通过目标访问的输入。否则，我们将无法从表单中收集信息。
- en: Capturing references with targets
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用目标捕获引用
- en: 'Stimulus connects to form inputs via targets, or a special dataset. Internally,
    Stimulus creates a variable that can be used anywhere in the controller. For example,
    we define in the DOM an alias called `name`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 刺激通过目标或特殊数据集连接到输入。在内部，Stimulus 创建一个可以在控制器中任何地方使用的变量。例如，我们在 DOM 中定义了一个名为 `name`
    的别名：
- en: '[PRE78]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'While in the controller, we define the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 当在控制器中时，我们定义以下内容：
- en: '[PRE81]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'From here, I can call the target within any function/method in the following
    way:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 从这里，我可以在以下任何函数/方法中调用目标：
- en: '[PRE82]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: As you can see, the alias is joined with the target text.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，别名与目标文本连接在一起。
- en: 'In the application we are developing, we have defined the target with the name
    `myText`:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们正在开发的应用程序中，我们使用名称 `myText` 定义了目标：
- en: '[PRE83]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'We update the DOM of the input as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照以下方式更新输入的 DOM：
- en: '[PRE84]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The whole frontend is ready. We have installed Stimulus, created a controller,
    and defined an action to trigger actions and a target to collect the input text.
    We only need to define the functionality in the consumer. We go to Django.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 整个前端已经准备就绪。我们已经安装了 Stimulus，创建了一个控制器，并定义了一个触发动作的动作和一个收集输入文本的目标。我们只需要在消费者中定义功能。我们转向
    Django。
- en: An application that converts text into uppercase letters
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个将文本转换为上档字母的应用程序
- en: 'We have already simplified the frontend with Stimulus, installing, configuring,
    and implementing the tools provided by this fantastic framework. However, we still
    have one last step left in the application that converts the text from lowercase
    to uppercase: implementing the backend in the consumer.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 Stimulus 简化了前端，安装、配置和实现了这个出色框架提供的工具。然而，在将文本从小写转换为上档的应用程序中，我们还有最后一个步骤：在消费者中实现后端。
- en: 'Edit `app/app_template/consumers.py` with the following code:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下代码编辑 `app/app_template/consumers.py`：
- en: '[PRE86]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: '[PRE106]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: The code is so basic that it looks like it belongs in the first chapters. We
    have removed the `actions.py` file and some other elements, as we are just looking
    for the minimum necessary to make it work.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 代码如此简单，看起来就像属于第一章节。我们已经删除了 `actions.py` 文件和一些其他元素，因为我们只寻找使它工作的最小必要部分。
- en: 'Let’s review where the information enters the backend, where it is transformed,
    and where it is returned:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下信息进入后端、转换和返回的地方：
- en: The information from the frontend goes to `receive_json`, which in turn receives
    the `'text in capital letters'` action by executing the `self.send_uppercase(data)`
    function.
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前端的信息传递到 `receive_json`，然后通过执行 `self.send_uppercase(data)` 函数接收 `'text in capital
    letters'` 动作。
- en: '`self.send_uppercase(data)` converts the text to uppercase and sends the information
    to the frontend, specifically to the `#results` selector.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self.send_uppercase(data)` 将文本转换为上档并发送信息到前端，特别是到 `#results` 选择器。'
- en: It’s time to test that everything works. We pull up Docker and go to `http://hello.localhost`.
    Type in the input and click on the **Transform** button.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候测试一切是否正常工作了。我们启动Docker并访问`http://hello.localhost`。输入内容并点击**转换**按钮。
- en: '![Figure 8.1 – We tested that the application works by transforming lowercase
    letters into uppercase'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '![图8.1 – 我们测试了应用程序通过将小写字母转换为大写字母来工作'
- en: '](img/Figure_8.01_B18321.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_8.01_B18321.jpg)'
- en: Figure 8.1 – We tested that the application works by transforming lowercase
    letters into uppercase
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 我们测试了应用程序通过将小写字母转换为大写字母来工作
- en: At the bottom, the text will be displayed in capitals – we’ve done it!
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，文本将以大写形式显示——我们做到了！
- en: 'We can even improve it. The local delay between pressing the button and displaying
    the final result is negligible, in my case, 0.002 seconds. We can incorporate
    the `input` event into the input to see the result as we type, giving a feeling
    that there is no apparent delay:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们甚至可以进一步改进它。在按按钮和显示最终结果之间的本地延迟是可以忽略不计的，在我的情况下，是0.002秒。我们可以将`input`事件整合到输入中，以便我们在输入时就能看到结果，给人一种没有明显延迟的感觉：
- en: '[PRE107]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: '[PRE111]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: And with this small optimization, we can conclude the backend implementation
    of the application.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个小优化，我们可以得出结论，应用程序的后端实现已经完成。
- en: 'You might be tempted to take Stimulus to the examples in the previous chapters
    – I can only tell you: go ahead. It will be neater, you will learn a lot more
    about Stimulus, and things will be easier to maintain.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想将Stimulus应用到前几章的示例中——我只能告诉你：继续吧。这样会更整洁，你会对Stimulus了解得更多，而且维护起来会更简单。
- en: Summary
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Our journey of learning HTML over the wire with Django comes to an end. We are
    now able to create SPAs in real time by gathering all the logic in the backend,
    avoiding duplicating tasks such as validations or HTML structures. We have relieved
    the frontend of a big responsibility; it now only needs to handle events or animations,
    thanks to Stimulus controllers and internal automation from datasets.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用Django学习HTML的旅程就此结束。现在我们能够通过将所有逻辑集中在后端来实时创建单页应用（SPAs），避免了重复任务，如验证或HTML结构。我们减轻了前端的大负担；现在它只需要处理事件或动画，多亏了Stimulus控制器和来自数据集的内部自动化。
- en: 'I would love to tell you that you already know everything you need to know,
    but the journey continues. The book is just a first push. There is still a lot
    of work ahead of you: practice, adopt Stimulus in your workflow (or any other
    similar framework), solve small difficulties typical of any SPA (such as managing
    when the user clicks on the back button in the history), explore other related
    protocols such as Server-Side Events, train your colleagues, convince your boss,
    define your line between backend and frontend (the infinite struggle of any web
    developer), and even adopt some other framework. The limit is set by you.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我很想告诉你，你已经知道你需要知道的一切，但旅程还在继续。这本书只是一个起点。你面前还有许多工作要做：练习，将Stimulus应用到你的工作流程中（或任何其他类似框架），解决任何SPA典型的微小困难（例如，当用户在历史记录中点击后退按钮时），探索其他相关协议，如服务器端事件，培训你的同事，说服你的老板，定义后端和前端之间的界限（任何网络开发者的无限斗争），甚至采用其他框架。限制由你自己设定。
- en: It has been a pleasure to join you in this real-time Python adventure. I have
    enjoyed writing every line and preparing every example. Thank you.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 能够与你们一起加入这场实时Python冒险，我感到非常高兴。我喜欢写每一行代码，准备每一个示例。谢谢。
- en: 'I can only say to you: I expect big things from you.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我只能对你说：我对你寄予厚望。
- en: '[PRE113]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
