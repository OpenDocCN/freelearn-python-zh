["```py\n# Using a scrolled Text control\nscrolW  = 40; scrolH  =  10\nself.scr = scrolledtext.ScrolledText(self.monty, width=scrolW, height=scrolH, wrap=tk.WORD)\nself.scr.grid(column=0, row=3, sticky='WE', columnspan=3)\n```", "```py\n# Adding a Spinbox widget using a set of values\nself.spin = Spinbox(self.monty, values=(1, 2, 4, 42, 100), width=5, bd=8, command=self._spin) \nself.spin.grid(column=0, row=2, sticky='W')\n```", "```py\n# Adding a Textbox Entry widget\nself.name = tk.StringVar()\nnameEntered = ttk.Entry(self.monty, width=24, textvariable=self.name)\nnameEntered.grid(column=0, row=1, sticky='W')\n```", "```py\nttk.Label(self.monty, text=\"Choose a number:\").grid(column=1, row=0)\nnumber = tk.StringVar()\nnumberChosen = ttk.Combobox(self.monty, width=14, textvariable=number)\nnumberChosen['values'] = (1, 2, 4, 42, 100)\nnumberChosen.grid(column=1, row=1)\nnumberChosen.current(0)\n```", "```py\n#======================\n# imports\n#======================\nimport tkinter as tk\nfrom tkinter import ttk\nfrom tkinter import scrolledtext\nfrom tkinter import Menu  \nfrom tkinter import Spinbox\nimport B04829_Ch06_ToolTip as tt\n\nfrom threading import Thread\n\nGLOBAL_CONST = 42\n```", "```py\nclass OOP():\n    def methodInAThread(self):\n        print('Hi, how are you?')\n```", "```py\n#======================\n# Start GUI\n#======================\noop = OOP()\n\n# Running methods in Threads\nrunT = Thread(target=oop.methodInAThread)\noop.win.mainloop())\n```", "```py\n# Button callback\ndef clickMe(self):\n  self.action.configure(text='Hello ' + self.name.get())\n  # Non-threaded code with sleep freezes the GUI\n  for idx in range(10):\n    sleep(5)\n    self.scr.insert(tk.INSERT, str(idx) + '\\n')\n```", "```py\n# Running methods in Threads\ndef createThread(self):\n  runT = Thread(target=self.methodInAThread)\n  runT.start()\n# Button callback\ndef clickMe(self):\n  self.action.configure(text='Hello ' + self.name.get())\n  self.createThread()\n```", "```py\n# Running methods in Threads\ndef createThread(self):\n  runT = Thread(target=self.methodInAThread)\n  runT.start()\n  print(runT)\n```", "```py\ndef methodInAThread(self):\n  print('Hi, how are you?')\n  for idx in range(10):\n    sleep(5)\n    self.scr.insert(tk.INSERT, str(idx) + '\\n')\n```", "```py\ndef methodInAThread(self, numOfLoops=10):\n  for idx in range(numOfLoops):\n    sleep(1)\n    self.scr.insert(tk.INSERT, str(idx) + '\\n')\n```", "```py\n\n# Running methods in Threads\ndef createThread(self):\n  runT = Thread(target=self.methodInAThread, args=[8])\n  runT.start()\n```", "```py\n# Running methods in Threads\ndef createThread(self):\n  self.runT = Thread(target=self.methodInAThread, args=[8])\n  self.runT.start()\n  print(self.runT)\n  print('createThread():', self.runT.isAlive())\n```", "```py\n    def methodInAThread(self, numOfLoops=10):\n        for idx in range(numOfLoops):\n            sleep(1)\n            self.scr.insert(tk.INSERT, str(idx) + '\\n')\n        sleep(1)\n        print('methodInAThread():', self.runT.isAlive())\n```", "```py\n# Running methods in Threads\ndef createThread(self):\n  runT = Thread(target=self.methodInAThread)\n  runT.setDaemon(True)\n  runT.start()\n  print(runT)\n```", "```py\nfrom threading import Thread\nfrom time import sleep\nfrom queue import Queue\n```", "```py\ndef useQueues(self):\n    guiQueue = Queue()     # create queue instance\n```", "```py\n# Create Queue instance  \ndef useQueues(self):\n    guiQueue = Queue()\n    print(guiQueue)\n    guiQueue.put('Message from a queue')\n    print(guiQueue.get())\n```", "```py\n# Create Queue instance  \ndef useQueues(self):\n    guiQueue = Queue()\n    print(guiQueue)\n    for idx in range(10):\n        guiQueue.put('Message from a queue: ' + str(idx))\n    print(guiQueue.get())\n```", "```py\n# Create Queue instance\ndef useQueues(self):\n    guiQueue = Queue()\n    print(guiQueue)\n    for idx in range(10):\n        guiQueue.put('Message from a queue: ' + str(idx))\n\n    while True: \n        print(guiQueue.get())\n```", "```py\n# Running methods in Threads\ndef createThread(self, num):\n    self.runT = Thread(target=self.methodInAThread, args=[num])\n    self.runT.setDaemon(True)\n    self.runT.start()\n    print(self.runT)\n    print('createThread():', self.runT.isAlive())\n\n    # textBoxes are the Consumers of Queue data\n    writeT = Thread(target=self.useQueues, daemon=True)\n    writeT.start()\n\n# Create Queue instance  \ndef useQueues(self):\n    guiQueue = Queue()\n    print(guiQueue)\n    for idx in range(10):\n        guiQueue.put('Message from a queue: ' + str(idx))\n    while True: \n        print(guiQueue.get())\n```", "```py\nimport B04829_Queues as bq\n\nclass OOP():\n    # Button callback\n    def clickMe(self):\n      # Passing in the current class instance (self)\n        print(self)\n        bq.writeToScrol(self)\n```", "```py\ndef writeToScrol(inst):\n    print('hi from Queue', inst)\n    inst.createThread(6)\n\n```", "```py\n# Threaded method does not freeze our GUI\n# self.createThread()\n```", "```py\nclass OOP():\n    def __init__(self):\n        # Create a Queue\n        self.guiQueue = Queue()\n```", "```py\ndef writeToScrol(inst):\n    print('hi from Queue', inst)\n    for idx in range(10):\n        inst.guiQueue.put('Message from a queue: ' + str(idx))\n    inst.createThread(6)\n```", "```py\ndef useQueues(self):\n    # Now using a class member Queue\n    while True:\n        print(self.guiQueue.get())\n```", "```py\n###########################################################\n    def createWidgets(self):\n        tabControl = ttk.Notebook(self.win)  # Create Tab  \n        tab2 = ttk.Frame(tabControl)         # Add a second tab\n        tabControl.add(tab2, text='Tab 2')\n\n# Create Manage Files Frame \nmngFilesFrame = ttk.LabelFrame(tab2, text=' Manage Files: ')\nmngFilesFrame.grid(column=0, row=1, sticky='WE', padx=10, pady=5)\n\n# Button Callback\ndef getFileName():\n    print('hello from getFileName')\n\n# Add Widgets to Manage Files Frame\nlb = ttk.Button(mngFilesFrame, text=\"Browse to File...\", command=getFileName)\nlb.grid(column=0, row=0, sticky=tk.W) \n\nfile = tk.StringVar()\nself.entryLen = scrolW\nself.fileEntry = ttk.Entry(mngFilesFrame, width=self.entryLen, textvariable=file)\nself.fileEntry.grid(column=1, row=0, sticky=tk.W)\n\nlogDir = tk.StringVar()\nself.netwEntry = ttk.Entry(mngFilesFrame, width=self.entryLen, textvariable=logDir)\nself.netwEntry.grid(column=1, row=1, sticky=tk.W) \n        def copyFile():\n        import shutil   \n        src  = self.fileEntry.get()\n        file = src.split('/')[-1]  \n        dst  = self.netwEntry.get() + '\\\\'+ file\n        try:\n            shutil.copy(src, dst)   \n            mBox.showinfo('Copy File to Network', 'Success: File copied.')\n        except FileNotFoundError as err:\n            mBox.showerror('Copy File to Network', '*** Failed to copy file! ***\\n\\n' + str(err))\n        except Exception as ex:\n            mBox.showerror('Copy File to Network', '*** Failed to copy file! ***\\n\\n' + str(ex))\n\n        cb = ttk.Button(mngFilesFrame, text=\"Copy File To :   \", command=copyFile)\n        cb.grid(column=0, row=1, sticky=tk.E)\n\n        # Add some space around each label\n        for child in mngFilesFrame.winfo_children(): \n            child.grid_configure(padx=6, pady=6)\n```", "```py\nfrom tkinter import filedialog as fd\nfrom os import path\n```", "```py\ndef getFileName():\n    print('hello from getFileName')\n    fDir  = path.dirname(__file__)\n    fName = fd.askopenfilename(parent=self.win, initialdir=fDir)\n```", "```py\n# Adding a Textbox Entry widget\nself.name = tk.StringVar()\nnameEntered = ttk.Entry(self.monty, width=24, textvariable=self.name)\nnameEntered.grid(column=0, row=1, sticky='W')\nnameEntered.delete(0, tk.END)\nnameEntered.insert(0, '< default name >')\n```", "```py\n# Module level GLOBALS\nGLOBAL_CONST = 42\nfDir   = path.dirname(__file__)\nnetDir = fDir + '\\\\Backup'\n\ndef __init__(self):\n    self.createWidgets()       \n    self.defaultFileEntries()\n\ndef defaultFileEntries(self):\n    self.fileEntry.delete(0, tk.END)\n    self.fileEntry.insert(0, fDir) \n    if len(fDir) > self.entryLen:\n        self.fileEntry.config(width=len(fDir) + 3)\n        self.fileEntry.config(state='readonly')\n\n    self.netwEntry.delete(0, tk.END)\n    self.netwEntry.insert(0, netDir) \n    if len(netDir) > self.entryLen:\n        self.netwEntry.config(width=len(netDir) + 3)\n```", "```py\n# Place cursor into name Entry\n# nameEntered.focus()             \ntabControl.select(1)\n```", "```py\n# Module level GLOBALS\nGLOBAL_CONST = 42\n\nfrom os import makedirs\nfDir   = path.dirname(__file__)\nnetDir = fDir + '\\\\Backup' \nif not path.exists(netDir):\n    makedirs(netDir, exist_ok = True)\n```", "```py\nfrom tkinter import messagebox as mBox\n\ndef copyFile():\n    import shutil   \n    src = self.fileEntry.get()\n    file = src.split('/')[-1]  \n    dst = self.netwEntry.get() + '\\\\'+ file\n    try:\n      shutil.copy(src, dst)   \n      mBox.showinfo('Copy File to Network', 'Success: File copied.')\n    except FileNotFoundError as err:\n      mBox.showerror('Copy File to Network', '*** Failed to copy file! ***\\n\\n' + str(err))\n    except Exception as ex:\n      mBox.showerror('Copy File to Network', '*** Failed to copy file! ***\\n\\n' + str(ex))\n```", "```py\nfrom socketserver import BaseRequestHandler, TCPServer\n\nclass RequestHandler(BaseRequestHandler):\n    # override base class handle method\n    def handle(self):\n        print('Server connected to: ', self.client_address)\n        while True:\n            rsp = self.request.recv(512)\n            if not rsp: break\n            self.request.send(b'Server received: ' + rsp)\n\ndef startServer():\n    serv = TCPServer(('', 24000), RequestHandler)\n    serv.serve_forever()\n```", "```py\nfrom socket import socket, AF_INET, SOCK_STREAM\n\ndef writeToScrol(inst):\n    print('hi from Queue', inst)\n    sock = socket(AF_INET, SOCK_STREAM)\n    sock.connect(('localhost', 24000))\n    for idx in range(10):\n        sock.send(b'Message from a queue: ' + bytes(str(idx).encode()) )\n        recv = sock.recv(8192).decode()\n        inst.guiQueue.put(recv)      \n    inst.createThread(6)\n```", "```py\nsock.send(b'Message from a queue: ' + bytes(str(idx).encode()) )\n```", "```py\nclass OOP():\n    def __init__(self):\n    # Start TCP/IP server in its own thread\n        svrT = Thread(target=startServer, daemon=True)\n        svrT.start()\n```", "```py\nfrom urllib.request import urlopen\nlink = 'http://python.org/' \ntry:\n    f = urlopen(link)\n    print(f)\n    html = f.read()\n    print(html)\n    htmldecoded = html.decode()\n    print(htmldecoded)\n\nexcept Exception as ex:\n    print('*** Failed to get Html! ***\\n\\n' + str(ex))\n```", "```py\nfrom urllib.request import urlopen\nlink = 'http://python.org/'\ndef getHtml():\n    try:\n        f = urlopen(link)\n        #print(f)\n        html = f.read()\n        #print(html)\n        htmldecoded = html.decode()\n        #print(htmldecoded)     \n    except Exception as ex:\n        print('*** Failed to get Html! ***\\n\\n' + str(ex))\n    else:\n        return htmldecoded  \n```", "```py\nimport B04829_Ch06_URL as url\n\n# Button callback\ndef clickMe(self):\n  bq.writeToScrol(self)       \n  sleep(2)\n  htmlData = url.getHtml()\n  print(htmlData)\n  self.scr.insert(tk.INSERT, htmlData)\n```"]