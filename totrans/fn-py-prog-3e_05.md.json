["```py\n>>> max(1, 2, 3) \n3 \n>>> max((1,2,3,4)) \n4\n```", "```py\n[ \n ((37.54901619777347, -76.33029518659048), (37.840832, -76.273834), 17.7246), \n ((37.840832, -76.273834), (38.331501, -76.459503), 30.7382), \n ((38.331501, -76.459503), (38.845501, -76.537331), 31.0756), \n ((36.843334, -76.298668), (37.549, -76.331169), 42.3962), \n ((37.549, -76.331169), (38.330166, -76.458504), 47.2866), \n ((38.330166, -76.458504), (38.976334, -76.473503), 38.8019) \n]\n```", "```py\n>>> from Chapter04.ch04_ex1 import ( \n...    floats_from_pair, float_lat_lon, row_iter_kml, haversine, legs \n... ) \n>>> import urllib.request \n>>> data = \"file:./Winter%202012-2013.kml\" \n\n>>> with urllib.request.urlopen(data) as source: \n...     path = floats_from_pair(float_lat_lon(row_iter_kml(source))) \n...     trip = list( \n...         (start, end, round(haversine(start, end), 4)) \n...         for start, end in legs(path) \n...     )\n```", "```py\n>>> longest = max(dist for start, end, dist in trip) \n>>> shortest = min(dist for start, end, dist in trip)\n```", "```py\n>>> longest \n129.7748 \n>>> shortest \n0.1731\n```", "```py\nfrom collections.abc import Iterator, Iterable \nfrom typing import Any \n\ndef wrap(leg_iter: Iterable[Any]) -> Iterable[tuple[Any, Any]]: \n    return ((leg[2], leg) for leg in leg_iter) \n\ndef unwrap(dist_leg: tuple[Any, Any]) -> Any: \n    distance, leg = dist_leg \n    return leg\n```", "```py\n>>> longest = unwrap(max(wrap(trip))) \n>>> longest \n((27.154167, -80.195663), (29.195168, -81.002998), 129.7748) \n\n>>> short = unwrap(min(wrap(trip))) \n>>> short \n((35.505665, -76.653664), (35.508335, -76.654999), 0.1731)\n```", "```py\ndef by_dist(leg: tuple[Any, Any, Any]) -> Any: \n    lat, lon, dist = leg \n    return dist\n```", "```py\n>>> longest = max(trip, key=by_dist) \n>>> longest \n((27.154167, -80.195663), (29.195168, -81.002998), 129.7748) \n\n>>> short = min(trip, key=by_dist) \n>>> short \n((35.505665, -76.653664), (35.508335, -76.654999), 0.1731)\n```", "```py\n>>> longest = max(trip, key=lambda leg: leg[2]) \n>>> shortest = min(trip, key=lambda leg: leg[2])\n```", "```py\nstart = lambda x: x[0] \nend = lambda x: x[1] \ndist = lambda x: x[2]\n```", "```py\n>>> longest = ((27.154167, -80.195663), (29.195168, -81.002998), 129.7748) \n>>> dist(longest) \n129.7748\n```", "```py\n>>> from operator import itemgetter \n>>> start = itemgetter(0) \n>>> start(longest) \n(27.154167, -80.195663) \n\n>>> lat = itemgetter(0) \n>>> lon = itemgetter(1) \n>>> lat(start(longest)) \n27.154167\n```", "```py\n>>> text= \"\"\"\\ \n... 2 3 5 7 11 13 17 19 23 29 \n... 31 37 41 43 47 53 59 61 67 71 \n... 73 79 83 89 97 101 103 107 109 113 \n... 127 131 137 139 149 151 157 163 167 173 \n... 179 181 191 193 197 199 211 223 227 229 \n... \"\"\"\n```", "```py\n>>> data = list( \n...     v \n...     for line in text.splitlines() \n...         for v in line.split() \n... )\n```", "```py\n[’2’, ’3’, ’5’, ’7’, ’11’, ’13’, ’17’, ’19’, ’23’, ’29’, \n’31’, ’37’, ’41’, ’43’, ’47’, ’53’, ’59’, ’61’, ’67’, ’71’, \n’73’, ’79’, ’83’, ’89’, ’97’, ’101’, ’103’, ’107’, ’109’, ’113’, \n’127’, ’131’, ’137’, ’139’, ’149’, ’151’, ’157’, ’163’, ’167’, \n’173’, ’179’, ’181’, ’191’, ’193’, ’197’, ’199’, ’211’, ’223’, \n’227’, ’229’]\n```", "```py\n>>> list(map(int, data)) \n[2, 3, 5, 7, 11, 13, 17, 19, ..., 229]\n```", "```py\n>>> from operator import itemgetter \n>>> start = itemgetter(0) \n>>> end = itemgetter(1) \n>>> dist = itemgetter(2) \n>>> sm_trip = map( \n...     lambda x: (start(x), end(x), dist(x) * 6076.12 / 5280), \n...     trip \n... )\n```", "```py\n>>> sm_trip = ( \n...     (start(x), end(x), dist(x) * 6076.12 / 5280) \n...     for x in trip \n... )\n```", "```py\nmap(function, zip(one_iterable, another_iterable))\n```", "```py\n( \n    function(x, y) \n    for x, y in zip(one_iterable, another_iterable) \n)\n```", "```py\n >>> waypoints = range(4)\n>>> zip(waypoints, waypoints[1:])\n<zip object at ...>\n\n>>> list(zip(waypoints, waypoints[1:]))\n[(0, 1), (1, 2), (2, 3)] \n```", "```py\n>>> from Chapter04.ch04_ex1 import ( \n...    floats_from_pair, float_lat_lon, row_iter_kml, haversine \n... ) \n>>> import urllib.request \n\n>>> data = \"file:./Winter%202012-2013.kml\" \n>>> with urllib.request.urlopen(data) as source: \n...     path_gen = floats_from_pair( \n...         float_lat_lon(row_iter_kml(source))) \n...     path = list(path_gen) \n\n>>> distances_1 = map( \n...     lambda s_e: (s_e[0], s_e[1], haversine(*s_e)), \n...     zip(path, path[1:]) \n... )\n```", "```py\n>>> distances_2 = map( \n...     lambda s, e: (s, e, haversine(s, e)), \n...     path, path[1:] \n... )\n```", "```py\n>>> long_legs = list( \n...     filter(lambda leg: dist(leg) >= 50, trip) \n... )\n```", "```py\n>>> filter(lambda x: x % 3 == 0 or x % 5 == 0, range(10)) \n<filter object at ...> \n>>> sum(_) \n23\n```", "```py\n>>> list(x for x in range(10) if x % 3 == 0 or x % 5 == 0) \n[0, 3, 5, 6, 9]\n```", "```py\n>>> from Chapter02.ch02_ex1 import isprimeg \n\n>>> list(filter(isprimeg, range(100))) \n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n```", "```py\n>>> from Chapter04.ch04_ex3 import mean, stdev, z \n\n>>> dist_data = list(map(dist, trip)) \n>>> μ_d = mean(dist_data) \n>>> σ_d = stdev(dist_data) \n\n>>> outlier = lambda leg: abs(z(dist(leg), μ_d, σ_d)) > 3 \n\n>>> list(filter(outlier, trip))\n```", "```py\n>>> source = [1, 2, 3, None, 4, 5, 6] \n>>> tail = iter(source.pop, None) \n>>> list(tail) \n[6, 5, 4]\n```", "```py\n[ \n ((37.54901619777347, -76.33029518659048), (37.840832, -76.273834), 17.7246), \n ((37.840832, -76.273834), (38.331501, -76.459503), 30.7382), \n ((38.331501, -76.459503), (38.845501, -76.537331), 31.0756), \n ((36.843334, -76.298668), (37.549, -76.331169), 42.3962), \n ((37.549, -76.331169), (38.330166, -76.458504), 47.2866), \n ((38.330166, -76.458504), (38.976334, -76.473503), 38.8019) \n]\n```", "```py\n>>> sorted(dist(x) for x in trip) \n[0.1731, 0.1898, 1.4235, 4.3155, ... 86.2095, 115.1751, 129.7748]\n```", "```py\n>>> sorted(trip, key=dist) \n[((35.505665, -76.653664), (35.508335, -76.654999), 0.1731), ...\n```", "```py\n>>> from operator import itemgetter \n>>> dist = itemgetter(2)\n```", "```py\n    map(f, C)\n    ```", "```py\n    (f(x) for x in C)\n    ```", "```py\n    from collections.abc import Callable, Iterable, Iterator \n    from typing import Any \n\n    def mymap(f: Callable[[Any], Any], C: Iterable[Any]) -> Iterator[Any]: \n        for x in C: \n            yield f(x)\n    ```", "```py\n    mymap(f, C)\n    ```", "```py\n    filter(f, C)\n    ```", "```py\n    (x for x in C if f(x))\n    ```", "```py\n    from collections.abc import Callable, Iterable, Iterator \n    from typing import Any \n\n    def myfilter(f: Callable[[Any], bool], C: Iterable[Any]) -> Iterator[Any]: \n        for x in C: \n            if f(x): \n                yield x\n    ```", "```py\n    myfilter(f, C)\n    ```", "```py\nfrom collections.abc import Callable, Iterable, Iterator \nfrom typing import Any, TypeAlias \n\nConv_F: TypeAlias = Callable[[float], float] \nLeg: TypeAlias = tuple[Any, Any, float] \n\ndef convert( \n        conversion: Conv_F, \n        trip: Iterable[Leg]) -> Iterator[float]: \n    return ( \n        conversion(distance) \n        for start, end, distance in trip \n    )\n```", "```py\nfrom collections.abc import Callable \nfrom typing import TypeAlias \n\nConversion: TypeAlias = Callable[[float], float] \n\nto_miles: Conversion = lambda nm: nm * 6076.12 / 5280 \n\nto_km: Conversion = lambda nm: nm * 1.852 \n\nto_nm: Conversion = lambda nm: nm\n```", "```py\n>>> convert(to_miles, trip) \n<generator object ...> \n>>> miles = list(convert(to_miles, trip)) \n>>> trip[0] \n((37.54901619777347, -76.33029518659048), (37.840832, -76.273834), 17.7246) \n>>> miles[0] \n20.397120559090908 \n>>> trip[-1] \n((38.330166, -76.458504), (38.976334, -76.473503), 38.8019) \n>>> miles[-1] \n44.652462240151515\n```", "```py\n[20.397120559090908, 35.37291511060606, ..., 44.652462240151515]\n```", "```py\nfrom collections.abc import Callable \nfrom operator import itemgetter \nfrom typing import TypeAlias \n\nSelector: TypeAlias = Callable[[tuple[Any, ...]], Any] \n\nfst: Selector = itemgetter(0) \n\nsnd: Selector = itemgetter(1) \n\nsel2: Selector = itemgetter(2)\n```", "```py\nfrom collections.abc import Callable \n\nto_miles_sel2: Callable[[tuple[Any, Any, float]], float] = ( \n    lambda s_e_d: to_miles(sel2(s_e_d)) \n)\n```", "```py\n>>> miles2 = list( \n...     to_miles_sel2(s_e_d) for s_e_d in trip \n... )\n```", "```py\n>>> from Chapter04.ch04_ex1 import ( \n...    floats_from_pair, float_lat_lon, row_iter_kml, haversine, legs \n... ) \n>>> import urllib.request \n>>> data = \"file:./Winter%202012-2013.kml\" \n\n>>> with urllib.request.urlopen(data) as source: \n...     path = floats_from_pair(float_lat_lon(row_iter_kml(source))) \n...     trip = tuple( \n...         (start, end, round(haversine(start, end), 4)) \n...         for start, end in legs(path) \n...     )\n```", "```py\nfrom collections.abc import Callable, Iterable, Iterator \nfrom typing import TypeAlias \n\nPoint: TypeAlias = tuple[float, float] \nLeg_Raw: TypeAlias = tuple[Point, Point] \nPoint_Func: TypeAlias = Callable[[Point, Point], float] \nLeg_D: TypeAlias = tuple[Point, Point, float] \n\ndef cons_distance( \n        distance: Point_Func, \n        legs_iter: Iterable[Leg_Raw]) -> Iterator[Leg_D]: \n    return ( \n        (start, end, round(distance(start,end), 4)) \n        for start, end in legs_iter \n    )\n```", "```py\n>>> source_url = \"file:./Winter%202012-2013.kml\" \n>>> with urllib.request.urlopen(source_url) as source: \n...    path = floats_from_pair( \n...        float_lat_lon(row_iter_kml(source)) \n...    ) \n...    trip2 = tuple( \n...        cons_distance(haversine, legs(iter(path))) \n...    )\n```", "```py\n>>> text = \"\"\"2 3 5 7 11 13 17 19 23 29 \n... 31 37 41 43 47 53 59 61 67 71 \n... 73 79 83 89 97 101 103 107 109 113 \n... 127 131 137 139 149 151 157 163 167 173 \n... 179 181 191 193 197 199 211 223 227 229 \n... \"\"\"\n```", "```py\n>>> data = list( \n...     v \n...     for line in text.splitlines() \n...         for v in line.split() \n... )\n```", "```py\n[’2’, ’3’, ’5’, ’7’, ’11’, ’13’, ’17’, ’19’, ’23’, ’29’, ’31’, ’37’, \n’41’, ’43’, ’47’, ’53’, ’59’, ’61’, ’67’, ’71’, ’73’, ’79’, ’83’, \n’89’, ’97’, ’101’, ’103’, ’107’, ’109’, ’113’, ’127’, ’131’, ’137’, \n’139’, ’149’, ’151’, ’157’, ’163’, ’167’, ’173’, ’179’, ’181’, ’191’, \n’193’, ’197’, ’199’, ’211’, ’223’, ’227’, ’229’]\n```", "```py\nfrom collections.abc import Callable, Iterator \nfrom typing import TypeAlias \n\nNum_Conv: TypeAlias = Callable[[str], float] \n\ndef numbers_from_rows( \n        conversion: Num_Conv, \n        text: str) -> Iterator[float]: \n    return ( \n        conversion(value) \n        for line in text.splitlines() \n        for value in line.split() \n    )\n```", "```py\n>>> list(numbers_from_rows(float, text))\n```", "```py\n>>> text = (value \n...     for line in text.splitlines() \n...        for value in line.split() \n... ) \n>>> numbers = map(float, text) \n>>> list(numbers)\n```", "```py\nfrom collections.abc import Iterator \nfrom typing import TypeVar \n\nItemT = TypeVar(\"ItemT\") \n\ndef group_by_iter( \n        n: int, \n        iterable: Iterator[ItemT] \n) -> Iterator[tuple[ItemT, ...]]: \n    def group(n: int, iterable: Iterator[ItemT]) -> Iterator[ItemT]: \n        for i in range(n): \n            try: \n                yield next(iterable) \n            except StopIteration: \n                return \n\n    while row := tuple(group(n, iterable)): \n        yield row\n```", "```py\n>>> from pprint import pprint \n>>> data = list( \n...     filter(lambda x: x % 3 == 0 or x % 5 == 0, range(1, 50)) \n... ) \n>>> data \n[3, 5, 6, 9, 10, ..., 48] \n>>> grouped = list(group_by_iter(7, iter(data))) \n>>> pprint(grouped) \n[(3, 5, 6, 9, 10, 12, 15), \n (18, 20, 21, 24, 25, 27, 30), \n (33, 35, 36, 39, 40, 42, 45), \n (48,)]\n```", "```py\nfrom collections.abc import Callable, Iterator, Iterable \nfrom typing import Any, TypeAlias \n\nItemFilterPredicate: TypeAlias = Callable[[Any], bool] \n\ndef group_filter_iter( \n        n: int, \n        predicate: ItemFilterPredicate, \n        items: Iterator[ItemT] \n) -> Iterator[tuple[ItemT, ...]]: \n    def group(n: int, iterable: Iterator[ItemT]) -> Iterator[ItemT]: \n        for i in range(n): \n            try: \n                yield next(iterable) \n            except StopIteration: \n                return \n\n    subset = filter(predicate, items) \n    # ^-- Added this to apply the filter \n    while row := tuple(group(n, subset)): \n                              # ^-- Changed to use the filter \n        yield row\n```", "```py\n>>> rule: ItemFilterPredicate = lambda x: x % 3 == 0 or x % 5 == 0 \n>>> groups_explicit = list( \n...    group_by_iter(7, filter(rule, range(1, 50))) \n... ) \n>>> groups = list( \n...     group_filter_iter(7, rule, iter(range(1, 50))) \n... )\n```", "```py\nfrom collections.abc import Callable \nfrom typing import Any \n\nclass NullAware: \n    def __init__(self, some_func: Callable[[Any], Any]) -> None: \n        self.some_func = some_func \n\n    def __call__(self, arg: Any) -> Any: \n        return None if arg is None else self.some_func(arg)\n```", "```py\nimport math \n\nnull_log_scale = NullAware(math.log) \n\nnull_round_4 = NullAware(lambda x: round(x, 4))\n```", "```py\n>>> some_data = [10, 100, None, 50, 60] \n>>> scaled = map(null_log_scale, some_data) \n>>> [null_round_4(v) for v in scaled] \n[2.3026, 4.6052, None, 3.912, 4.0943]\n```", "```py\nfrom collections.abc import Callable, Iterable \n\nclass Sum_Filter: \n    __slots__ = [\"filter\", \"function\"] \n\n    def __init__(self, \n            filter: Callable[[float], bool], \n            func: Callable[[float], float]) -> None: \n        self.filter = filter \n        self.function = func \n\n    def __call__(self, iterable: Iterable[float]) -> float: \n        return sum( \n            self.function(x) \n            for x in iterable \n            if self.filter(x) \n        )\n```", "```py\ncount_not_none = Sum_Filter( \n    lambda x: x is not None, \n    lambda x: 1 \n)\n```", "```py\n>>> some_data = [10, 100, None, 50, 60] \n>>> count_not_none(some_data) \n4\n```", "```py\n( \n    v \n    for line in text.splitlines() \n        for v in line.split() \n)\n```", "```py\n>>> text = \"\"\"2,3,5,7,11,13,17,19,23,29 \n... 31,37,41,43,47,53,59,61,67,71 \n... 73,79,83,89,97,101,103,107,109,113 \n... 127,131,137,139,149,151,157,163,167,173 \n... 179,181,191,193,197,199,211,223,227,229 \n... \"\"\"\n```"]