["```py\n <!DOCTYPE html>\n    <html>\n\n    <head lang=\"en\">\n        <meta charset=\"UTF-8\">\n    </head>\n\n    <body>\n        <div id=\"content\"></div>\n        <script src=\"img/react.development.js\" crossorigin></script>\n        <script src=\"img/react-dom.development.js\" crossorigin></script>\n        <script src=\"img/babel.min.js\" crossorigin></script>\n        <script type=\"text/babel\">\n            var greeting = (\n                <div>\n                    Hello World\n                </div>)\n            ReactDOM.render(greeting, document.getElementById('content'));\n        </script>\n    </body>\n    </html> \n```", "```py\nclass Person extends React.Component {\n    render() {\n        return (\n            <div>{this.props.name} ({this.props.email})</div>\n        );\n    }\n}\nclass People extends React.Component {\n    render() {\n        var peopleNodes = this.props.data.map(function (person) {\n            return (\n                <Person\n                    key={person.email}\n                    name={person.name}\n                    email={person.email}\n                />\n            );\n        });\n        return (\n            <div>\n                {peopleNodes}\n            </div>\n        );\n    }\n} \n```", "```py\nclass PeopleBox extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { data: [] };\n    }\n    loadPeopleFromServer() {\n        fetch('http://localhost:5000/api/users')\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                this.setState({\n                    data: data,\n                });\n                console.log(this.state);\n            })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n    componentDidMount() {\n        this.loadPeopleFromServer();\n    }\n        render() {\n            return (\n                <div>\n                    <h2>People</h2>\n                    <People data={this.state.data} />\n                </div>\n            );\n        }\n\n    }\n\n    const domContainer = document.querySelector('#people_list');\n    ReactDOM.render(React.createElement(PeopleBox), domContainer); \n```", "```py\n <!DOCTYPE html>\n    <html>\n\n    <head lang=\"en\">\n        <meta charset=\"UTF-8\">\n    </head>\n\n    <body>\n        <div class=\"container\">\n            <h1>Jeeves Dashboard</h1>\n            <br>\n            <div id=\"people_list\"></div>\n        </div>\n\n        <script src=\"img/react.development.js\" crossorigin></script>\n        <script src=\"img/react-dom.development.js\" crossorigin></script>\n        <script src=\"img/babel.min.js\" crossorigin></script>\n        <script src=\"img/people.jsx\" type=\"text/babel\"></script>\n        <script type=\"text/babel\">\n\n        </script>\n\n    </body>\n\n    </html> \n```", "```py\n$ npm -v \n7.7.6 \n```", "```py\n$ npm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/preset-react \n```", "```py\n$ npx babel --watch js-src/ --out-dir static/  --presets @babel/preset-react \n```", "```py\n$ npx babel js-src/ --out-dir static/ --presets @babel/preset-react \n```", "```py\n <script src=\"img/people.js\"></script> \n```", "```py\n from quart import Quart, render_template \n    app = Quart(__name__) \n\n    @app.route('/') \n    def index(): \n        return render_template('index.html') \n\n    if __name__ == '__main__': \n        app.run() \n```", "```py\n # quart_cors_example.py\n    from quart import Quart\n    from quart_cors import cors\n    app = Quart(__name__)\n    app = cors(app, allow_origin=\"https://quart.com\")\n    @app.route(\"/api\")\n    async def my_microservice():\n        return {\"Hello\": \"World!\"} \n```", "```py\n$ curl -H \"Origin: https://quart.com\" -vvv http://127.0.0.1:5000/api\n*   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to 127.0.0.1 (127.0.0.1) port 5200 (#0)\n> GET /api HTTP/1.1\n> Host: 127.0.0.1:5000\n> User-Agent: curl/7.64.1\n> Accept: */*\n> Origin: https://quart.com\n>\n< HTTP/1.1 200\n< content-type: application/json\n< content-length: 18\n< access-control-allow-origin: quart.com\n< access-control-expose-headers:\n< vary: Origin\n< date: Sat, 10 Apr 2021 18:20:32 GMT\n< server: hypercorn-h11\n<\n* Connection #0 to host 127.0.0.1 left intact\n{\"Hello\":\"World!\"}* Closing connection 0 \n```", "```py\n @login.route(\"/login/slack\")\n    async def slack_login():\n        query = {\n            \"client_id\": current_app.config[\"JEEVES_CLIENT_ID\"],\n            \"scope\": \"identify\",\n            \"redirect_uri\": current_app.config[\"SLACK_REDIRECT_URI\"],\n        }\n        url = f\"https://slack.com/oauth/authorize?{urlencode(query)}\"\n        return redirect(url) \n```", "```py\n @login.route(\"/\")\n    async def index():\n        return await render_template(\"index.html\", user=session.get(\"user\")) \n```", "```py\n {% if not user %}\n    <a href=\"{{url_for('login.slack_login')}}\">Login via Slack</a>\n    {% else %}\n    Hi {{user}}!\n    <a href=\"/logout\">Logout</a>\n    {% endif %} \n```", "```py\n @login.route(\"/slack/callback\")\n    async def slack_callback():\n        query = {\n            \"code\": request.args.get(\"code\"),\n            \"client_id\": current_app.config[\"JEEVES_CLIENT_ID\"],\n            \"client_secret\": current_app.config[\"JEEVES_CLIENT_SECRET\"],\n            \"redirect_uri\": current_app.config[\"SLACK_REDIRECT_URI\"],\n        }\n        url = \"https://slack.com/api/oauth.access\"\n        response = requests.get(url, params=query)\n        response_data = response.json()\n        session[\"user\"] = response_data[\"user_id\"]\n        return redirect(url_for(\"login.index\")) \n```"]