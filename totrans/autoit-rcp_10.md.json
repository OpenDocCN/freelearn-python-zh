["```py\n    chetans-MacBookPro:ch11 Chetan$ virtualenv analyze\n    New python executable in analyze/bin/python2.7\n    Also creating executable in analyze/bin/python\n    Installing setuptools, pip, wheel...done.\n    chetans-MacBookPro:ch11 Chetan$ source analyze/bin/activate\n    (analyze)chetans-MacBookPro:ch11 Chetan$\n\n    ```", "```py\n    (analyze)chetans-MacBookPro:ch11 Chetan$ pip install pandas\n    Collecting pandas\n    Collecting pytz>=2011k (from pandas)\n     Using cached pytz-2016.7-py2.py3-none-any.whl\n    Collecting python-dateutil (from pandas)\n     Using cached python_dateutil-2.6.0-py2.py3-none-any.whl\n    Collecting numpy>=1.7.0 (from pandas)\n    Collecting six>=1.5 (from python-dateutil->pandas)\n     Using cached six-1.10.0-py2.py3-none-any.whl\n    Installing collected packages: pytz, six, \n            python-dateutil, numpy, pandas\n    Successfully installed numpy-1.11.2 pandas-0.19.1 \n            python-dateutil-2.6.0 pytz-2016.7 six-1.10.0\n\n    ```", "```py\n    (analyze)chetans-MacBookPro:ch11 Chetan$ pip install matplotlib\n    Collecting matplotlib\n    Requirement already satisfied (use --upgrade to upgrade):\n              numpy>=1.6 in ./analyze/lib/python2.7/site-packages \n              (from matplotlib)\n    Requirement already satisfied (use --upgrade to upgrade):\n              pytz in ./analyze/lib/python2.7/site-packages \n              (from matplotlib)\n    Requirement already satisfied (use --upgrade to upgrade):\n              python-dateutil in ./analyze/lib/python2.7/site-packages\n              (from matplotlib)\n    Collecting cycler (from matplotlib)\n     Using cached cycler-0.10.0-py2.py3-none-any.whl\n    Collecting pyparsing!=2.0.0,!=2.0.4,!=2.1.2,>=1.5.6\n            (from matplotlib)\n     Using cached pyparsing-2.1.10-py2.py3-none-any.whl\n    Requirement already satisfied (use --upgrade to upgrade):\n            six>=1.5 in ./analyze/lib/python2.7/site-packages \n            (from python-dateutil->matplotlib)\n    Installing collected packages: cycler, pyparsing, \n            matplotlib\n    Successfully installed cycler-0.10.0 \n            matplotlib-1.5.3 pyparsing-2.1.10\n\n    ```", "```py\n    (analyze)chetans-MacBookPro:ch11 Chetan$ pip install seaborn\n    Collecting seaborn\n    Collecting scipy (from seaborn)\n    Requirement already satisfied (use --upgrade to upgrade):\n            numpy>=1.7.1 in ./analyze/lib/python2.7/site-packages\n            (from scipy->seaborn)\n    Installing collected packages: scipy, seaborn\n    Successfully installed scipy-0.18.1 seaborn-0.7.1\n\n    ```", "```py\n    (analyze)chetans-MacBookPro:ch11 Chetan$ \n              wget http://samplecsvs.s3.amazonaws.com/\n              TechCrunchcontinentalUSA.csv\n    --2016-11-20 16:01:57--\n              http://samplecsvs.s3.amazonaws.com/\n              TechCrunchcontinentalUSA.csv\n    Resolving samplecsvs.s3.amazonaws.com... 54.231.97.224\n    Connecting to samplecsvs.s3.amazonaws.com\n              |54.231.97.224|:80... connected.\n    HTTP request sent, awaiting response... 200 OK\n    Length: 93536 (91K) [application/x-csv]\n    Saving to: 'TechCrunchcontinentalUSA.csv'\n    TechCrunchcontinentalUSA.csv              100%\n            [=======================================================\n             =========================================>]\n                                         91.34K  20.3KB/s   in 4.5s \n    2016-11-20 16:02:03 (20.3 KB/s) - \n            'TechCrunchcontinentalUSA.csv' saved [93536/93536]\n\n    ```", "```py\n          import pandas as pd\n\n          pd.set_option('display.line_width', 5000)\n          pd.set_option('display.max_columns', 60)\n\n          df = pd.read_csv('TechCrunchcontinentalUSA.csv')\n          print \"First five rows:\\n\", df[:5]\n\n    ```", "```py\n            import pandas as pd \n\n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n            df = pd.read_csv('TechCrunchcontinentalUSA.csv',\n                      index_col='fundedDate', \\ \n                      parse_dates=['fundedDate'], dayfirst=True,) \n            print \"Top five rows:\\n\", df[:5] \n\n    ```", "```py\n            import pandas as pd \n\n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n            df = pd.read_csv('TechCrunchcontinentalUSA.csv', \n                      index_col='fundedDate', \\ \n                      parse_dates=['fundedDate'], dayfirst=True,) \n\n            raised = df['raisedAmt'][:5] \n            print \"Funding Raised by Companies over time:\\n\", raised \n\n    ```", "```py\n            import pandas as pd \n            from matplotlib import pyplot as plt \n            import seaborn as sns \n\n            plt.style.use('default') \n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n            df = pd.read_csv('TechCrunchcontinentalUSA.csv') \n            print \"First five rows:\\n\", df[:5] \n\n            df = pd.read_csv('TechCrunchcontinentalUSA.csv', \n                      index_col='fundedDate', \\ \n                      parse_dates=['fundedDate'], dayfirst=True,) \n            print \"Top five rows:\\n\", df[:5] \n            raised = df['raisedAmt'][:5] \n            print \"Funding Raised by Companies over time:\\n\", raised \n\n            sns.set_style(\"darkgrid\") \n            sns_plot = df['raisedAmt'].plot() \n            plt.ylabel(\"Amount Raised in USD\");\n            plt.xlabel(\"Funding Year\") \n            plt.savefig('amountRaisedOverTime.pdf') \n\n    ```", "```py\n          import pandas as pd \n          from matplotlib import pyplot as plt \n          plt.style.use('default') \n          pd.set_option('display.line_width', 5000) \n          pd.set_option('display.max_columns', 60) \n\n          fundings = pd.read_csv('TechcrunchcontinentalUSA.csv') \n          print \"Type of funding:\\n\", fundings[:5]['round'] \n\n          # Selecting multiple columns \n          print \"Selected company, category and date of \n                 funding:\\n\",\\ \n          fundings[['company', 'category', \n                'fundedDate']][600:650] \n\n    ```", "```py\n            import pandas as pd \n            from matplotlib import pyplot as plt \n            plt.style.use('default') \n\n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n            fundings = pd.read_csv('TechcrunchcontinentalUSA.csv') \n            print \"Type of funding:\\n\", fundings[:5]['round'] \n\n            # Selecting multiple columns \n            print \"Selected company, category and date of funding:\\n\",\\ \n                fundings[['company', 'category', 'fundedDate']][600:650] \n\n            # Most common category of company that got funded \n            counts = fundings['category'].value_counts() \n            print \"Count of common categories of company \n                   that raised funds:\\n\", \\ \n                   counts \n\n    ```", "```py\n    Count of common categories of company that raised funds:\n    web           1208\n    software       102\n    mobile          48\n    hardware        39\n    other           16\n    cleantech       14\n    consulting       5\n    biotech          4\n    Name: category, dtype: int64\n\n    ```", "```py\n            import pandas as pd \n            from matplotlib import pyplot as plt \n            plt.style.use('default') \n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n            fundings = pd.read_csv('TechcrunchcontinentalUSA.csv') \n            print \"Type of funding:\\n\", fundings[:5]['round'] \n\n            # Selecting multiple columns \n            print \"Selected company, category and date of funding:\\n\",\\ \n                fundings[['company', 'category', 'fundedDate']][600:650] \n\n            # Most common category of company that got funded \n            counts = fundings['category'].value_counts() \n            print \"Count of common categoris of company \n                   that raised funds:\\n\", \\ \n                   counts \n            counts.plot(kind='barh') \n            plt.xlabel(\"Count of categories\") \n\n            plt.savefig('categoriesFunded.pdf') \n\n    ```", "```py\n            import pandas as pd \n\n            from matplotlib import pyplot as plt \n            import seaborn as sns \n\n            plt.style.use('default') \n\n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n            fundings = pd.read_csv(\n                       'TechcrunchcontinentalUSA.csv', \n                       index_col='fundedDate', \\ \n                       parse_dates=['fundedDate'], dayfirst=True) \n\n    ```", "```py\n            import pandas as pd \n            from matplotlib import pyplot as plt \n            import seaborn as sns \n\n            plt.style.use('default') \n\n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n           funding = pd.read_csv(\n                      'TechcrunchcontinentalUSA.csv', \n                      index_col='fundedDate', \\ \n                      parse_dates=['fundedDate'], dayfirst=True) \n\n           #Web fundings in CA \n           web_funding = funding['category'] == 'web' \n           in_CA = funding['state'] == 'CA' \n           in_city = funding['city'].isin(['Palo Alto',\n                             'San Francisco', 'San Mateo', \n                             'Los Angeles', 'Redwood City']) \n\n    ```", "```py\n            web_funding = funding[web_funding & in_CA & in_city] \n            web_counts = web_funding['city'].value_counts() \n            print \"Funding rounds for companies in 'web' \n                       category by cities in CA:\\n\", web_counts \n\n    ```", "```py\n            total_funding = funding[in_CA & in_city] \n            total_counts = total_funding['city'].value_counts() \n            print \"Funding rounds for companies in 'all' \n                   categories by cities in CA:\\n\",total_counts \n\n    ```", "```py\n            sns.set_style(\"darkgrid\") \n            sns_plot = (web_counts*100/total_counts.astype(\n                                  float)).plot(kind='barh') \n\n    ```", "```py\n            plt.xlabel(\"(Funding Rounds in Web Category) / (\n                  Funding Rounds in All Categories) * (100)\") \n            plt.savefig('webFundedByCity.pdf') \n\n    ```", "```py\n            import pandas as pd \n            from matplotlib import pyplot as plt \n            import seaborn as sns \n\n            plt.style.use('default') \n\n            pd.set_option('display.line_width', 5000) \n            pd.set_option('display.max_columns', 60) \n\n            df = pd.read_csv('TechCrunchcontinentalUSA.csv',\n                         index_col='fundedDate', \\ \n                         parse_dates=['fundedDate'], dayfirst=True,) \n\n            funds = df[['raisedAmt', 'round']] \n            funds['month'] = funds.index.month \n            print \"Funding Rounds with Month Index:\\n\", funds \n\n    ```", "```py\n            funding_by_month = funds.groupby('month').aggregate('sum') \n            funding_by_month.index = ['Jan', 'Feb', 'Mar',\n                                      'Apr', 'May', 'June', 'July', \\ \n                                      'Aug', 'Sept', 'Oct', 'Nov', 'Dec'] \n            print \"Funding Rounds Grouped By Month:\\n\", funding_by_month \n\n    ```", "```py\n            funds['month'] = funds.index.month \n            funding_by_stage = funds.groupby(['month', \n                               'round']).aggregate('sum') \n            print funding_by_stage \n\n    ```", "```py\n(analyze)chetans-MacBookPro:ch11 Chetan$ pip install tweepy\nYou are using pip version 7.1.0, however version 9.0.1 is available.\nYou should consider upgrading via the 'pip install --upgrade pip' command.\nCollecting tweepy\n Downloading tweepy-3.5.0-py2.py3-none-any.whl\nCollecting requests>=2.4.3 (from tweepy)\n Downloading requests-2.12.1-py2.py3-none-any.whl (574kB)\n 100% |████████████████████████████████| 577kB 161kB/s \nRequirement already satisfied (use --upgrade to upgrade): six>=1.7.3 in ./analyze/lib/python2.7/site-packages (from tweepy)\nCollecting requests-oauthlib>=0.4.1 (from tweepy)\n Downloading requests_oauthlib-0.7.0-py2.py3-none-any.whl\nCollecting oauthlib>=0.6.2 (from requests-oauthlib>=0.4.1->tweepy)\n Downloading oauthlib-2.0.0.tar.gz (122kB)\n 100% |████████████████████████████████| 122kB 345kB/s \nBuilding wheels for collected packages: oauthlib\n Running setup.py bdist_wheel for oauthlib\n Stored in directory: /Users/chetan/Library/Caches/pip/wheels/e4/e1/92/68af4b20ac26182fbd623647af92118fc4cdbdb2c613030a67\nSuccessfully built oauthlib\nInstalling collected packages: requests, oauthlib, requests-oauthlib, tweepy\nSuccessfully installed oauthlib-2.0.0 requests-2.12.1 requests-oauthlib-0.7.0 tweepy-3.5.0\n\n```", "```py\n            from tweepy import Stream\n            from tweepy import OAuthHandler\n            from tweepy.streaming import StreamListener\n            import json\n\n            #consumer key, consumer secret, access token, access secret.\n            ckey=\"<>\"\n            csecret=\"<>\"\n            atoken=\"<>\"\n            asecret=\"<>\"\n\n            tweets_data_path = 'twitter_data.txt'\n            f = open(tweets_data_path, \"w\")\n\n            class listener(StreamListener):\n\n                def on_data(self, data):\n                    print data\n                    f.write(data)\n                    #all_data = json.loads(data)\n                    #tweet = all_data[\"text\"]\n                    #lang = all_data[\"lang\"]\n                    #username = all_data[\"user\"][\"screen_name\"]\n                    #print \"username:%s, tweet:%s, \n                         language:%s\" %(username, tweet, lang)\n                    return True\n\n                def on_error(self, status):\n                    print \"Error:\", status\n\n            auth = OAuthHandler(ckey, csecret)\n            auth.set_access_token(atoken, asecret)\n\n            twitterStream = Stream(auth, listener())\n            twitterStream.filter(track=[\"iPhone 7\",\"Note 5\"])\n            f.close()\n\n    ```", "```py\n            import json\n            import pandas as pd\n            import matplotlib.pyplot as plt\n            import seaborn as sns\n\n            tweets = []\n            fh = open(\"twitter_data.txt\", \"r\")\n            for data in fh:\n                try:\n                    tweets.append(json.loads(data))\n                except:\n                    continue\n\n            tweet_df = pd.DataFrame()\n            tweet_df['lang'] = map(lambda x: x['lang'], tweets)\n            tweets_by_lang = tweet_df['lang'].value_counts()\n\n            fig, axis = plt.subplots()\n            sns.set_style(\"darkgrid\")\n            axis.set_xlabel('Languages', fontsize=15)\n            axis.set_ylabel('Tweets' , fontsize=15)\n            clrs = ['green', 'blue', 'red', 'black']\n            sns_plot = tweets_by_lang[:4].plot(ax=axis, kind='bar', color=clrs)\n            plt.savefig('language.pdf')\n\n    ```", "```py\n            import json \n            import pandas as pd \n            import matplotlib.pyplot as plt \n            import seaborn as sns \n            import requests \n\n            tweets = [] \n            fh = open(\"twitter_data.txt\", \"r\") \n            for data in fh: \n                try: \n                    tweets.append(json.loads(data)) \n                except: \n                    continue \n\n            probablities = pd.DataFrame() \n            prob = [] \n            for tweet in tweets: \n                text = tweet['text'] \n                r = requests.post(url=\"http://text-processing.com/api/sentiment/\", \n                                  data={\"text\":text},) \n                print r.text \n                if r.status_code == 200: \n                    ans = json.loads(r.text) \n                    prob.append(ans[\"label\"]) \n            probablities['data'] = map(lambda x: x, prob) \n            p_df = probablities['data'].value_counts() \n\n            fig, axis = plt.subplots() \n            sns.set_style(\"darkgrid\") \n            axis.set_xlabel('Sentiments', fontsize=15) \n            axis.set_ylabel('Tweets' , fontsize=15) \n            clrs = ['green', 'yellow', 'red'] \n            sns_plot = p_df.plot(ax=axis, kind='bar', color=clrs) \n            plt.savefig('sentiments.pdf') \n\n    ```"]