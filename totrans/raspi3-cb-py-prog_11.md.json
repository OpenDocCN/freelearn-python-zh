["```py\nimport os \nimport sys \nimport cv2 \nimport numpy as np \n```", "```py\nin_file = 'words.data'  \n```", "```py\nscale_factor = 10 \ns_index = 6 \ne_index = -1 \nh, w = 16, 8 \n```", "```py\nwith open(in_file, 'r') as f: \n  for line in f.readlines(): \n    information = np.array([255*float(x) for x in line.split('t')[s_index:e_index]]) \n    image = np.reshape(information, (h,w)) \n    image_scaled = cv2.resize(image, None, fx=scale_factor, fy=scale_factor) \n    cv2.imshow('Image', image_scaled) \n    a = cv2.waitKey() \n    if a == 10: \n      break \n```", "```py\nimport numpy as np \nimport neurolab as nl \n```", "```py\nin_file = 'words.data'\n```", "```py\n# Number of datapoints to load from the input file \nnum_of_datapoints = 20\n```", "```py\noriginal_labels = 'omandig' \n# Number of distinct characters \nnum_of_charect = len(original_labels) \n```", "```py\ntrain_param = int(0.9 * num_of_datapoints) \ntest_param = num_of_datapoints - train_param \n```", "```py\ns_index = 6 \ne_index = -1 \n```", "```py\ninformation = [] \nlabels = [] \nwith open(in_file, 'r') as f: \n  for line in f.readlines(): \n    # Split the line tabwise \n    list_of_values = line.split('t') \n```", "```py\n    if list_of_values[1] not in original_labels: \n      continue \n```", "```py\n    label = np.zeros((num_of_charect , 1)) \n    label[original_labels.index(list_of_values[1])] = 1 \n    labels.append(label)\n```", "```py\n    extract_char = np.array([float(x) for x in     list_of_values[s_index:e_index]]) \n    information.append(extract_char)\n```", "```py\n    if len(information) >= num_of_datapoints: \n      break \n```", "```py\ninformation = np.array(information) \nlabels = np.array(labels).reshape(num_of_datapoints, num_of_charect) \n```", "```py\nnum_dimension = len(information[0]) \n```", "```py\nneural_net = nl.net.newff([[0, 1] for _ in range(len(information[0]))], [128, 16, num_of_charect]) \nneural_net.trainf = nl.train.train_gd \nerror = neural_net.train(information[:train_param,:], labels[:train_param,:], epochs=10000, show=100, goal=0.01) \n```", "```py\np_output = neural_net.sim(information[train_param:, :]) \nprint \"nTesting on unknown data:\" \n  for i in range(test_param): \n    print \"nOriginal:\", original_labels[np.argmax(labels[i])] \n    print \"Predicted:\", original_labels[np.argmax(p_output[i])]\n```"]