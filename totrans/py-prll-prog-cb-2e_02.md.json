["```py\nclass threading.Thread(group=None, \n                       target=None, \n                       name=None, \n                       args=(), \n                       kwargs={})  \n```", "```py\nimport threading\n```", "```py\nt = threading.Thread(target=function , args=(i,))\n```", "```py\nimport threading\n\ndef my_func(thread_number):\n    return print('my_func called by thread N°\\\n        {}'.format(thread_number))\n\ndef main():\n    threads = []\n    for i in range(10):\n        t = threading.Thread(target=my_func, args=(i,))\n        threads.append(t)\n        t.start()\n        t.join()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nmy_func called by thread N°0\nmy_func called by thread N°1\nmy_func called by thread N°2\nmy_func called by thread N°3\nmy_func called by thread N°4\nmy_func called by thread N°5\nmy_func called by thread N°6\nmy_func called by thread N°7\nmy_func called by thread N°8\nmy_func called by thread N°9\n```", "```py\nimport threading\nimport time\n\ndef function_A():\n    print (threading.currentThread().getName()+str('-->\\\n        starting \\n'))\n    time.sleep(2)\n    print (threading.currentThread().getName()+str( '-->\\\n        exiting \\n'))\n\ndef function_B():\n    print (threading.currentThread().getName()+str('-->\\\n        starting \\n'))\n    time.sleep(2)\n    print (threading.currentThread().getName()+str( '-->\\\n        exiting \\n'))\n\ndef function_C():\n    print (threading.currentThread().getName()+str('-->\\\n        starting \\n'))\n    time.sleep(2)\n    print (threading.currentThread().getName()+str( '-->\\\n        exiting \\n'))\n\n```", "```py\nif __name__ == \"__main__\":\n\n    t1 = threading.Thread(name='function_A', target=function_A)\n    t2 = threading.Thread(name='function_B', target=function_B)\n    t3 = threading.Thread(name='function_C',target=function_C) \n\n    t1.start()\n    t2.start()\n    t3.start()\n\n    t1.join()\n    t2.join()\n    t3.join()\n```", "```py\nfunction_A--> starting \nfunction_B--> starting \nfunction_C--> starting \n\nfunction_A--> exiting \nfunction_B--> exiting \nfunction_C--> exiting\n```", "```py\nimport time\nimport os\nfrom random import randint\nfrom threading import Thread\n\nclass MyThreadClass (Thread):\n```", "```py\ndef __init__(self, name, duration):\n      Thread.__init__(self)\n      self.name = name\n      self.duration = duration \n\n   def run(self):\n      print (\"---> \" + self.name +\\\n             \" running, belonging to process ID \"\\\n             + str(os.getpid()) + \"\\n\")\n      time.sleep(self.duration)\n      print (\"---> \" + self.name + \" over\\n\")\n```", "```py\ndef main():\n\n    start_time = time.time()\n\n    # Thread Creation\n    thread1 = MyThreadClass(\"Thread#1 \", randint(1,10))\n    thread2 = MyThreadClass(\"Thread#2 \", randint(1,10))\n    thread3 = MyThreadClass(\"Thread#3 \", randint(1,10))\n    thread4 = MyThreadClass(\"Thread#4 \", randint(1,10))\n    thread5 = MyThreadClass(\"Thread#5 \", randint(1,10))\n    thread6 = MyThreadClass(\"Thread#6 \", randint(1,10))\n    thread7 = MyThreadClass(\"Thread#7 \", randint(1,10))\n    thread8 = MyThreadClass(\"Thread#8 \", randint(1,10)) \n    thread9 = MyThreadClass(\"Thread#9 \", randint(1,10))\n\n    # Thread Running\n    thread1.start()\n    thread2.start()\n    thread3.start()\n    thread4.start()\n    thread5.start()\n    thread6.start()\n    thread7.start()\n    thread8.start()\n    thread9.start()\n\n    # Thread joining\n    thread1.join()\n    thread2.join()\n    thread3.join()\n    thread4.join()\n    thread5.join()\n    thread6.join()\n    thread7.join()\n    thread8.join()\n    thread9.join()\n\n    # End \n    print(\"End\")\n\n    #Execution Time\n    print(\"--- %s seconds ---\" % (time.time() - start_time))\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n---> Thread#1 running, belonging to process ID 13084\n---> Thread#5 running, belonging to process ID 13084\n---> Thread#2 running, belonging to process ID 13084\n---> Thread#6 running, belonging to process ID 13084\n---> Thread#7 running, belonging to process ID 13084\n---> Thread#3 running, belonging to process ID 13084\n---> Thread#4 running, belonging to process ID 13084\n---> Thread#8 running, belonging to process ID 13084\n---> Thread#9 running, belonging to process ID 13084\n\n---> Thread#6 over\n---> Thread#9 over\n---> Thread#5 over\n---> Thread#2 over\n---> Thread#7 over\n---> Thread#4 over\n---> Thread#3 over\n---> Thread#8 over\n---> Thread#1 over\n\nEnd\n\n--- 9.117518663406372 seconds ---\n```", "```py\nimport threading\nimport time\nimport os\nfrom threading import Thread\nfrom random import randint\n\n# Lock Definition\nthreadLock = threading.Lock()\n\nclass MyThreadClass (Thread):\n   def __init__(self, name, duration):\n      Thread.__init__(self)\n      self.name = name\n      self.duration = duration\n   def run(self):\n      #Acquire the Lock\n      threadLock.acquire() \n      print (\"---> \" + self.name + \\\n             \" running, belonging to process ID \"\\\n             + str(os.getpid()) + \"\\n\")\n      time.sleep(self.duration)\n      print (\"---> \" + self.name + \" over\\n\")\n      #Release the Lock\n      threadLock.release()\n```", "```py\ndef main():\n    start_time = time.time()\n    # Thread Creation\n    thread1 = MyThreadClass(\"Thread#1 \", randint(1,10))\n    thread2 = MyThreadClass(\"Thread#2 \", randint(1,10))\n    thread3 = MyThreadClass(\"Thread#3 \", randint(1,10))\n    thread4 = MyThreadClass(\"Thread#4 \", randint(1,10))\n    thread5 = MyThreadClass(\"Thread#5 \", randint(1,10))\n    thread6 = MyThreadClass(\"Thread#6 \", randint(1,10))\n    thread7 = MyThreadClass(\"Thread#7 \", randint(1,10))\n    thread8 = MyThreadClass(\"Thread#8 \", randint(1,10))\n    thread9 = MyThreadClass(\"Thread#9 \", randint(1,10))\n\n    # Thread Running\n    thread1.start()\n    thread2.start()\n    thread3.start()\n    thread4.start()\n    thread5.start()\n    thread6.start()\n    thread7.start()\n    thread8.start()\n    thread9.start()\n\n    # Thread joining\n    thread1.join()\n    thread2.join()\n    thread3.join()\n    thread4.join()\n    thread5.join()\n    thread6.join()\n    thread7.join()\n    thread8.join()\n    thread9.join()\n\n    # End \n    print(\"End\")\n    #Execution Time\n    print(\"--- %s seconds ---\" % (time.time() - start_time))\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n---> Thread#1 running, belonging to process ID 10632\n---> Thread#1 over\n---> Thread#2 running, belonging to process ID 10632\n---> Thread#2 over\n---> Thread#3 running, belonging to process ID 10632\n---> Thread#3 over\n---> Thread#4 running, belonging to process ID 10632\n---> Thread#4 over\n---> Thread#5 running, belonging to process ID 10632\n---> Thread#5 over\n---> Thread#6 running, belonging to process ID 10632\n---> Thread#6 over\n---> Thread#7 running, belonging to process ID 10632\n---> Thread#7 over\n---> Thread#8 running, belonging to process ID 10632\n---> Thread#8 over\n---> Thread#9 running, belonging to process ID 10632\n---> Thread#9 over\n\nEnd\n\n--- 47.3672661781311 seconds ---\n```", "```py\nimport threading\nimport time\nimport os\nfrom threading import Thread\nfrom random import randint\n\n# Lock Definition\nthreadLock = threading.Lock()\n\nclass MyThreadClass (Thread):\n   def __init__(self, name, duration):\n      Thread.__init__(self)\n      self.name = name\n      self.duration = duration\n   def run(self):\n      #Acquire the Lock\n      threadLock.acquire() \n      print (\"---> \" + self.name + \\\n             \" running, belonging to process ID \"\\ \n             + str(os.getpid()) + \"\\n\")\n      #Release the Lock in this new point\n      threadLock.release()\n      time.sleep(self.duration)\n      print (\"---> \" + self.name + \" over\\n\")\n```", "```py\n---> Thread#1 running, belonging to process ID 11228\n---> Thread#2 running, belonging to process ID 11228\n---> Thread#3 running, belonging to process ID 11228\n---> Thread#4 running, belonging to process ID 11228\n---> Thread#5 running, belonging to process ID 11228\n---> Thread#6 running, belonging to process ID 11228\n---> Thread#7 running, belonging to process ID 11228\n---> Thread#8 running, belonging to process ID 11228\n---> Thread#9 running, belonging to process ID 11228\n\n---> Thread#2 over\n---> Thread#4 over\n---> Thread#6 over\n---> Thread#5 over\n---> Thread#1 over\n---> Thread#3 over\n---> Thread#9 over\n---> Thread#7 over\n---> Thread#8 over\n\nEnd\n--- 6.11468243598938 seconds ---\n```", "```py\nimport threading\nimport time\nimport random\n\nclass Box:\n    def __init__(self):\n        self.lock = threading.RLock()\n        self.total_items = 0\n\n    def execute(self, value):\n        with self.lock:\n            self.total_items += value\n\n    def add(self):\n        with self.lock:\n            self.execute(1)\n\n    def remove(self):\n        with self.lock:\n            self.execute(-1)\n```", "```py\ndef adder(box, items):\n    print(\"N° {} items to ADD \\n\".format(items))\n    while items:\n        box.add()\n        time.sleep(1)\n        items -= 1\n        print(\"ADDED one item -->{} item to ADD \\n\".format(items))\n\ndef remover(box, items):\n    print(\"N° {} items to REMOVE\\n\".format(items))\n    while items:\n        box.remove()\n        time.sleep(1)\n        items -= 1\n        print(\"REMOVED one item -->{} item to REMOVE\\\n            \\n\".format(items))\n```", "```py\ndef main():\n    items = 10\n    box = Box()\n\n    t1 = threading.Thread(target=adder, \\\n                          args=(box, random.randint(10,20)))\n    t2 = threading.Thread(target=remover, \\\n                          args=(box, random.randint(1,10)))\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nclass Box:\n    def __init__(self):\n        self.lock = threading.RLock()\n        self.total_items = 0\n```", "```py\nN° 16 items to ADD \nN° 1 items to REMOVE \n\nADDED one item -->15 item to ADD \nREMOVED one item -->0 item to REMOVE \n\nADDED one item -->14 item to ADD \nADDED one item -->13 item to ADD \nADDED one item -->12 item to ADD \nADDED one item -->11 item to ADD \nADDED one item -->10 item to ADD \nADDED one item -->9 item to ADD \nADDED one item -->8 item to ADD \nADDED one item -->7 item to ADD \nADDED one item -->6 item to ADD \nADDED one item -->5 item to ADD \nADDED one item -->4 item to ADD \nADDED one item -->3 item to ADD \nADDED one item -->2 item to ADD \nADDED one item -->1 item to ADD \nADDED one item -->0 item to ADD \n>>>\n```", "```py\nsemaphore = threading.Semaphore(0)\n```", "```py\nsemaphore.release()\n```", "```py\nsemaphore.acquire()\n```", "```py\nimport logging\nimport threading\nimport time\nimport random\n\nLOG_FORMAT = '%(asctime)s %(threadName)-17s %(levelname)-8s %\\\n              (message)s'\nlogging.basicConfig(level=logging.INFO, format=LOG_FORMAT)\n\nsemaphore = threading.Semaphore(0)\nitem = 0\n\ndef consumer():\n    logging.info('Consumer is waiting')\n    semaphore.acquire()\n    logging.info('Consumer notify: item number {}'.format(item))\n\ndef producer():\n    global item\n    time.sleep(3)\n    item = random.randint(0, 1000)\n    logging.info('Producer notify: item number {}'.format(item))\n    semaphore.release()\n\n#Main program\ndef main():\n    for i in range(10):\n        t1 = threading.Thread(target=consumer)\n        t2 = threading.Thread(target=producer)\n\n        t1.start()\n        t2.start()\n\n        t1.join()\n        t2.join()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nprint (\"Consumer notify : consumed item number %s \" %item)\n```", "```py\n2019-01-27 19:21:19,354 Thread-1 INFO Consumer is waiting\n2019-01-27 19:21:22,360 Thread-2 INFO Producer notify: item number 388\n2019-01-27 19:21:22,385 Thread-1 INFO Consumer notify: item number 388\n2019-01-27 19:21:22,395 Thread-3 INFO Consumer is waiting\n2019-01-27 19:21:25,398 Thread-4 INFO Producer notify: item number 939\n2019-01-27 19:21:25,450 Thread-3 INFO Consumer notify: item number 939\n2019-01-27 19:21:25,453 Thread-5 INFO Consumer is waiting\n2019-01-27 19:21:28,459 Thread-6 INFO Producer notify: item number 388\n2019-01-27 19:21:28,468 Thread-5 INFO Consumer notify: item number 388\n2019-01-27 19:21:28,476 Thread-7 INFO Consumer is waiting\n2019-01-27 19:21:31,478 Thread-8 INFO Producer notify: item number 700\n2019-01-27 19:21:31,529 Thread-7 INFO Consumer notify: item number 700\n2019-01-27 19:21:31,538 Thread-9 INFO Consumer is waiting\n2019-01-27 19:21:34,539 Thread-10 INFO Producer notify: item number 685\n2019-01-27 19:21:34,593 Thread-9 INFO Consumer notify: item number 685\n2019-01-27 19:21:34,603 Thread-11 INFO Consumer is waiting\n2019-01-27 19:21:37,604 Thread-12 INFO Producer notify: item number 503\n2019-01-27 19:21:37,658 Thread-11 INFO Consumer notify: item number 503\n2019-01-27 19:21:37,668 Thread-13 INFO Consumer is waiting\n2019-01-27 19:21:40,670 Thread-14 INFO Producer notify: item number 690\n2019-01-27 19:21:40,719 Thread-13 INFO Consumer notify: item number 690\n2019-01-27 19:21:40,729 Thread-15 INFO Consumer is waiting\n2019-01-27 19:21:43,731 Thread-16 INFO Producer notify: item number 873\n2019-01-27 19:21:43,788 Thread-15 INFO Consumer notify: item number 873\n2019-01-27 19:21:43,802 Thread-17 INFO Consumer is waiting\n2019-01-27 19:21:46,807 Thread-18 INFO Producer notify: item number 691\n2019-01-27 19:21:46,861 Thread-17 INFO Consumer notify: item number 691\n2019-01-27 19:21:46,874 Thread-19 INFO Consumer is waiting\n2019-01-27 19:21:49,876 Thread-20 INFO Producer notify: item number 138\n2019-01-27 19:21:49,924 Thread-19 INFO Consumer notify: item number 138\n>>>\n```", "```py\ncondition.acquire()\n```", "```py\nif len(items) == 0:\n   condition.wait()\n```", "```py\nitems.pop()\n```", "```py\ncondition.notify()\n```", "```py\ncondition.acquire()\nif len(items) == 10:\n   condition.wait()\n```", "```py\ncondition.notify()\ncondition.release()\n```", "```py\nimport logging\nimport threading\nimport time\n\nLOG_FORMAT = '%(asctime)s %(threadName)-17s %(levelname)-8s %\\\n             (message)s'\nlogging.basicConfig(level=logging.INFO, format=LOG_FORMAT)\n\nitems = []\ncondition = threading.Condition()\n\nclass Consumer(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def consume(self):\n\n        with condition:\n\n            if len(items) == 0:\n                logging.info('no items to consume')\n                condition.wait()\n\n            items.pop()\n            logging.info('consumed 1 item')\n\n            condition.notify()\n\n    def run(self):\n        for i in range(20):\n            time.sleep(2)\n            self.consume()\n\nclass Producer(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def produce(self):\n\n        with condition:\n\n            if len(items) == 10:\n                logging.info('items produced {}.\\\n                    Stopped'.format(len(items)))\n                condition.wait()\n\n            items.append(1)\n            logging.info('total items {}'.format(len(items)))\n\n            condition.notify()\n\n    def run(self):\n        for i in range(20):\n            time.sleep(0.5)\n            self.produce()\n```", "```py\n2019-08-05 14:33:44,285 Producer INFO total items 1\n2019-08-05 14:33:44,786 Producer INFO total items 2\n2019-08-05 14:33:45,286 Producer INFO total items 3\n2019-08-05 14:33:45,786 Consumer INFO consumed 1 item\n2019-08-05 14:33:45,787 Producer INFO total items 3\n2019-08-05 14:33:46,287 Producer INFO total items 4\n2019-08-05 14:33:46,788 Producer INFO total items 5\n2019-08-05 14:33:47,289 Producer INFO total items 6\n2019-08-05 14:33:47,787 Consumer INFO consumed 1 item\n2019-08-05 14:33:47,790 Producer INFO total items 6\n2019-08-05 14:33:48,291 Producer INFO total items 7\n2019-08-05 14:33:48,792 Producer INFO total items 8\n2019-08-05 14:33:49,293 Producer INFO total items 9\n2019-08-05 14:33:49,788 Consumer INFO consumed 1 item\n2019-08-05 14:33:49,794 Producer INFO total items 9\n2019-08-05 14:33:50,294 Producer INFO total items 10\n2019-08-05 14:33:50,795 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:33:51,789 Consumer INFO consumed 1 item\n2019-08-05 14:33:51,790 Producer INFO total items 10\n2019-08-05 14:33:52,290 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:33:53,790 Consumer INFO consumed 1 item\n2019-08-05 14:33:53,790 Producer INFO total items 10\n2019-08-05 14:33:54,291 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:33:55,790 Consumer INFO consumed 1 item\n2019-08-05 14:33:55,791 Producer INFO total items 10\n2019-08-05 14:33:56,291 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:33:57,791 Consumer INFO consumed 1 item\n2019-08-05 14:33:57,791 Producer INFO total items 10\n2019-08-05 14:33:58,292 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:33:59,791 Consumer INFO consumed 1 item\n2019-08-05 14:33:59,791 Producer INFO total items 10\n2019-08-05 14:34:00,292 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:34:01,791 Consumer INFO consumed 1 item\n2019-08-05 14:34:01,791 Producer INFO total items 10\n2019-08-05 14:34:02,291 Producer INFO items produced 10\\. Stopped\n2019-08-05 14:34:03,791 Consumer INFO consumed 1 item\n2019-08-05 14:34:03,792 Producer INFO total items 10\n2019-08-05 14:34:05,792 Consumer INFO consumed 1 item\n2019-08-05 14:34:07,793 Consumer INFO consumed 1 item\n2019-08-05 14:34:09,794 Consumer INFO consumed 1 item\n2019-08-05 14:34:11,795 Consumer INFO consumed 1 item\n2019-08-05 14:34:13,795 Consumer INFO consumed 1 item\n2019-08-05 14:34:15,833 Consumer INFO consumed 1 item\n2019-08-05 14:34:17,833 Consumer INFO consumed 1 item\n2019-08-05 14:34:19,833 Consumer INFO consumed 1 item\n2019-08-05 14:34:21,834 Consumer INFO consumed 1 item\n2019-08-05 14:34:23,835 Consumer INFO consumed 1 item\n```", "```py\nclass _Condition(_Verbose):\n    def __init__(self, lock=None, verbose=None):\n        _Verbose.__init__(self, verbose)\n        if lock is None:\n            lock = RLock()\n        self.__lock = lock\n```", "```py\nimport logging\nimport threading\nimport time\nimport random\n```", "```py\nLOG_FORMAT = '%(asctime)s %(threadName)-17s %(levelname)-8s %\\\n             (message)s'\nlogging.basicConfig(level=logging.INFO, format=LOG_FORMAT)\n```", "```py\nitems = []\n```", "```py\nevent = threading.Event()\n```", "```py\nclass Consumer(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n\n    def run(self):\n        while True:\n            time.sleep(2)\n            event.wait()\n            item = items.pop()\n            logging.info('Consumer notify: {} popped by {}'\\\n                        .format(item, self.name))\n```", "```py\nclass Producer(threading.Thread):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n```", "```py\n    def run(self):\n        for i in range(5):\n            time.sleep(2)\n            item = random.randint(0, 100)\n            items.append(item)\n            logging.info('Producer notify: item {} appended by\\ \n                         {}'\\.format(item, self.name))\n```", "```py\n            event.set()\n            event.clear()\n```", "```py\nif __name__ == \"__main__\":\n    t1 = Producer()\n    t2 = Consumer()\n\n    t1.start()\n    t2.start()\n\n    t1.join()\n    t2.join()\n```", "```py\n2019-02-02 18:23:35,125 Thread-1 INFO Producer notify: item 68 appended by Thread-1\n2019-02-02 18:23:35,133 Thread-2 INFO Consumer notify: 68 popped by Thread-2\n2019-02-02 18:23:37,138 Thread-1 INFO Producer notify: item 45 appended by Thread-1\n2019-02-02 18:23:37,143 Thread-2 INFO Consumer notify: 45 popped by Thread-2\n2019-02-02 18:23:39,148 Thread-1 INFO Producer notify: item 78 appended by Thread-1\n2019-02-02 18:23:39,153 Thread-2 INFO Consumer notify: 78 popped by Thread-2\n2019-02-02 18:23:41,158 Thread-1 INFO Producer notify: item 22 appended by Thread-1\n2019-02-02 18:23:43,173 Thread-1 INFO Producer notify: item 48 appended by Thread-1\n2019-02-02 18:23:43,178 Thread-2 INFO Consumer notify: 48 popped by Thread-2\n```", "```py\nfrom random import randrange\nfrom threading import Barrier, Thread\nfrom time import ctime, sleep\n\nnum_runners = 3\nfinish_line = Barrier(num_runners)\nrunners = ['Huey', 'Dewey', 'Louie']\n\ndef runner():\n    name = runners.pop()\n    sleep(randrange(2, 5))\n    print('%s reached the barrier at: %s \\n' % (name, ctime()))\n    finish_line.wait()\n\ndef main():\n    threads = []\n    print('START RACE!!!!')\n    for i in range(num_runners):\n        threads.append(Thread(target=runner))\n        threads[-1].start()\n    for thread in threads:\n        thread.join()\n    print('Race over!')\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nSTART RACE!!!!\nDewey reached the barrier at: Sat Feb 2 21:44:48 2019 \n\nHuey reached the barrier at: Sat Feb 2 21:44:49 2019 \n\nLouie reached the barrier at: Sat Feb 2 21:44:50 2019 \n\nRace over!\n```", "```py\nfrom threading import Thread\nfrom queue import Queue\nimport time\nimport random\n\nclass Producer(Thread):\n    def __init__(self, queue):\n        Thread.__init__(self)\n        self.queue = queue\n    def run(self):\n        for i in range(5):\n            item = random.randint(0, 256)\n            self.queue.put(item)\n            print('Producer notify : item N°%d appended to queue by\\ \n                  %s\\n'\\\n                  % (item, self.name))\n            time.sleep(1)\n\nclass Consumer(Thread):\n    def __init__(self, queue):\n        Thread.__init__(self)\n        self.queue = queue\n\n    def run(self):\n        while True:\n            item = self.queue.get()\n            print('Consumer notify : %d popped from queue by %s'\\\n                  % (item, self.name))\n            self.queue.task_done()\n\nif __name__ == '__main__':\n    queue = Queue()\n    t1 = Producer(queue)\n    t2 = Consumer(queue)\n    t3 = Consumer(queue)\n    t4 = Consumer(queue)\n\n    t1.start()\n    t2.start()\n    t3.start()\n    t4.start()\n\n    t1.join()\n    t2.join()\n    t3.join()\n    t4.join()\n```", "```py\nProducer notify : item N°186 appended to queue by Thread-1\nConsumer notify : 186 popped from queue by Thread-2\n\nProducer notify : item N°16 appended to queue by Thread-1\nConsumer notify : 16 popped from queue by Thread-3\n\nProducer notify : item N°72 appended to queue by Thread-1\nConsumer notify : 72 popped from queue by Thread-4\n\nProducer notify : item N°178 appended to queue by Thread-1\nConsumer notify : 178 popped from queue by Thread-2\n\nProducer notify : item N°214 appended to queue by Thread-1\nConsumer notify : 214 popped from queue by Thread-3\n```"]