["```py\n@app.route('/a-get-request')\ndef get_request():\n    bar = request.args.get('foo', 'bar')\n    return 'A simple Flask request where foo is %s' % bar\n```", "```py\n@app.route('/a-post-request', methods=['POST'])\ndef post_request():\n    bar = request.form.get('foo', 'bar')\n    return 'A simple Flask request where foo is %s' % bar\n```", "```py\n@app.route('/a-request', methods=['GET', 'POST'])\ndef some_request():\n    if request.method == 'GET':\n        bar = request.args.get('foo', 'bar')\n    else:\n        bar = request.form.get('foo', 'bar')\n    return 'A simple Flask request where foo is %s' % bar\n```", "```py\ndef get_request():\n    bar = request.args.get('foo', 'bar')\n    return 'A simple Flask request where foo is %s' % bar\napp = Flask(__name__)\napp.add_url_rule('/a-get-request', view_func=get_request)\n```", "```py\nfrom flask.views import View\nclass GetRequest(View):\n    def dispatch_request(self):\n        bar = request.args.get('foo', 'bar')\n        return 'A simple Flask request where foo is %s' %\n          bar\napp.add_url_rule(\n    '/a-get-request',\n      view_func=GetRequest.as_view('get_request')\n)\n```", "```py\nclass GetPostRequest(View):\n    methods = ['GET', 'POST']\n    def dispatch_request(self):\n        if request.method == 'GET':\n            bar = request.args.get('foo', 'bar')\n        if request.method == 'POST':\n            bar = request.form.get('foo', 'bar')\n        return 'A simple Flask request where foo is %s' %\n          bar\napp.add_url_rule(\n    '/a-request',\n    view_func=GetPostRequest.as_view('a_request')\n)\n```", "```py\nfrom flask.views import MethodView\nclass GetPostRequest(MethodView):\n    def get(self):\n        bar = request.args.get('foo', 'bar')\n        return 'A simple Flask request where foo is %s' %\n          bar\n    def post(self):\n        bar = request.form.get('foo', 'bar')\n        return 'A simple Flask request where foo is %s' %\n          bar\napp.add_url_rule(\n    '/a-request',\n    view_func=GetPostRequest.as_view('a_request')\n)\n```", "```py\n@app.route('/test/<name>')\ndef get_name(name):\n    return name\n```", "```py\n@app.route('/test/<string(minlength=2,maxlength=3):code>')\ndef get_name(code):\n    return code\n```", "```py\n@app.route('/test/<int:age>')\ndef get_age(age):\n    return str(age)\n```", "```py\n@catalog.route('/products')\n@catalog.route('/products/<int:page>')\ndef products(page=1):\n    products = Product.query.paginate(page, 10).items\n    res = {}\n    for product in products:\n        res[product.id] = {\n            'name': product.name,\n            'price': product.price,\n            'category': product.category.name\n        }\n    return jsonify(res)\n```", "```py\nfrom flask import request, Blueprint, render_template\nfrom my_app import db\nfrom my_app.catalog.models import Product, Category\ncatalog = Blueprint('catalog', __name__)\n@catalog.route('/')\n@catalog.route('/home')\ndef home():\n    return render_template('home.html')\n```", "```py\n@catalog.route('/product/<id>')\ndef product(id):\n    product = Product.query.get_or_404(id)\n    return render_template('product.html', product=product)\n```", "```py\n@catalog.route('/products')\n@catalog.route('/products/<int:page>')\ndef products(page=1):\n    products = Product.query.paginate(page, 10)\n    return render_template('products.html',\n      products=products)\n```", "```py\n@catalog.route('/product-create', methods=['POST',])\ndef create_product():\n    # ...Same code as before ...\n    return render_template('product.html', product=product)\n```", "```py\n@catalog.route('/category-create', methods=['POST',])\ndef create_category():\n    # ...Same code as before ...\n    return render_template('category.html',\n      category=category)\n@catalog.route('/category/<id>')\ndef category(id):\n    category = Category.query.get_or_404(id)\n    return render_template('category.html',\n      category=category)\n@catalog.route('/categories')\ndef categories():\n    categories = Category.query.all()\n    return render_template(\n        'categories.html', categories=categories)\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,\n      initial-scale=1\">\n    <title>Flask Framework Cookbook</title>\n    <link href=\"{{ url_for('static', filename\n      ='css/bootstrap.min.css') }}\" rel=\"stylesheet\">\n    <link href=\"{{ url_for('static', filename\n      ='css/main.css') }}\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <div class=\"navbar navbar-inverse navbar-fixed-top\"\n      role=\"navigation\">\n      <div class=\"container\">\n        <div class=\"navbar-header\">\n          <a class=\"navbar-brand\" href=\"{{ url_for\n            ('catalog.home') }}\">Flask Cookbook</a>\n        </div>\n      </div>\n    </div>\n    <div class=\"container\">\n    {% block container %}{% endblock %}\n    </div>\n    <!-- jQuery (necessary for Bootstrap's JavaScript\n      plugins) -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs\n      /jquery/2.0.0/jquery.min.js\"></script>\n    <script src=\"{{ url_for('static', filename\n      ='js/bootstrap.min.js') }}\"></script>\n  </body>\n</html>\n```", "```py\n{% extends 'base.html' %}\n{% block container %}\n  <h1>Welcome to the Catalog Home</h1>\n  <a href=\"{{ url_for('catalog.products') }}\">Click here to\n    see the catalog</a>\n{% endblock %}\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <h1>{{ product.name }}<small> {{ product.category.name\n      }}</small></h1>\n    <h4>{{ product.company }}</h4>\n    <h3>{{ product.price }}</h3>\n  </div>\n{% endblock %}\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    {% for product in products.items %}\n      <div class=\"well\">\n        <h2>\n          <a href=\"{{ url_for('catalog.product', id\n            =product.id) }}\">{{ product.name }}</a>\n          <small>$ {{ product.price }}</small>\n        </h2>\n      </div>\n    {% endfor %}\n    {% if products.has_prev %}\n      <a href=\"{{ url_for(request.endpoint, page\n        =products.prev_num) }}\">\n        {{\"<< Previous Page\"}}\n      </a>\n    {% else %}\n      {{\"<< Previous Page\"}}\n    {% endif %} |\n    {% if products.has_next %}\n      <a href=\"{{ url_for(request.endpoint, page\n        =products.next_num) }}\">\n        {{\"Next page >>\"}}\n      </a>\n    {% else %}\n      {{\"Next page >>\"}}\n    {% endif %}\n  </div>\n{% endblock %}\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <h2>{{ category.name }}</h2>\n    <div class=\"well\">\n      {% for product in category.products %}\n        <h3>\n          <a href=\"{{ url_for('catalog.product', id\n            =product.id) }}\">{{ product.name }}</a>\n          <small>$ {{ product.price }}</small>\n        </h3>\n      {% endfor %}\n    </div>\n  </div>\n{% endblock %}\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    {% for category in categories %}\n    <a href=\"{{ url_for('catalog.category',\n      id=category.id) }}\">\n      <h2>{{ category.name }}</h2>\n    </a>\n    {% endfor %}\n  </div>\n{% endblock %}\n```", "```py\nfrom flask import request, render_template, jsonify\n@catalog.route('/')\n@catalog.route('/home')\ndef home():\n    if request.headers.get(\"X-Requested-With\") ==\n      \"XMLHttpRequest\":\n        products = Product.query.all()\n        return jsonify({\n            'count': len(products)\n        })\n    return render_template('home.html')\n```", "```py\n{% block scripts %}\n{% endblock %}\n```", "```py\n{% extends 'base.html' %}\n{% block container %}\n  <h1>Welcome to the Catalog Home</h1>\n  <a href=\"{{ url_for('catalog.products') }}\"\n    id=\"catalog_link\">\n    Click here to see the catalog\n  </a>\n{% endblock %}\n{% block scripts %}\n<script>\n$(document).ready(function(){\n  $.getJSON(\"/home\", function(data) {\n    $('#catalog_link').append('<span class=\"badge\">' +\n      data.count + '</span>');\n  });\n});\n</script>\n{% endblock %}\n```", "```py\nfrom functools import wraps\ndef template_or_json(template=None):\n    \"\"\"\"Return a dict from your view and this will either\n    pass it to a template or render json. Use like:\n    @template_or_json('template.html')\n    \"\"\"\n    def decorated(f):\n        @wraps(f)\n        def decorated_fn(*args, **kwargs):\n            ctx = f(*args, **kwargs)\n            if request.headers.get(\"X-Requested-With\") ==\n              \"XMLHttpRequest\" or not template:\n                return jsonify(ctx)\n            else:\n                return render_template(template, **ctx)\n        return decorated_fn\n    return decorated\n```", "```py\n@catalog.route('/')\n@catalog.route('/home')\n@template_or_json('home.html')\ndef home():\n    products = Product.query.all()\n    return {'count': len(products)}\n```", "```py\n@app.errorhandler(404)\ndef page_not_found(e):\n    return render_template('404.html'), 404\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <h3>Hola Friend! Looks like in your quest you have\n      reached a location which does not exist yet.</h3>\n    <h4>To continue, either check your map location (URL)\n      or go back <a href=\"{{ url_for('catalog.home')\n      }}\">home</a></h4>\n  </div>\n{% endblock %}\n```", "```py\nclass MyCustom404(Exception):\n    pass\n@app.errorhandler(MyCustom404)\ndef special_page_not_found(error):\n    return render_template(\"errors/custom_404.html\"), 404\n```", "```py\napp.secret_key = 'some_random_key'\n```", "```py\n@catalog.route('/product-create', methods=['GET', 'POST'])\ndef create_product():\n    if request.method == 'POST':\n        name = request.form.get('name')\n        price = request.form.get('price')\n        categ_name = request.form.get('category')\n        category = Category.query.filter_by(\n            name=categ_name).first()\n        if not category:\n            category = Category(categ_name)\n        product = Product(name, price, category)\n        db.session.add(product)\n        db.session.commit()\n        flash('The product %s has been created' % name,\n          'success')\n        return redirect(\n            url_for('catalog.product', id=product.id))\n    return render_template('product-create.html')\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <form\n        class=\"form-horizontal\"\n        method=\"POST\"\n        action=\"{{ url_for('catalog.create_product') }}\"\n        role=\"form\">\n      <div class=\"form-group\">\n        <label for=\"name\" class=\"col-sm-2 control-\n          label\">Name</label>\n        <div class=\"col-sm-10\">\n          <input type=\"text\" class=\"form-control\" id=\"name\"\n            name=\"name\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"price\" class=\"col-sm-2 control-\n          label\">Price</label>\n        <div class=\"col-sm-10\">\n          <input type=\"number\" class=\"form-control\"\n            id=\"price\" name=\"price\">\n        </div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"category\" class=\"col-sm-2 control-\n          label\">Category</label>\n        <div class=\"col-sm-10\">\n          <input type=\"text\" class=\"form-control\"\n            id=\"category\" name=\"category\">\n        </div>\n      </div>\n      <button type=\"submit\" class=\"btn\n        btn-default\">Submit</button>\n    </form>\n  </div>\n{% endblock %}\n```", "```py\n    <br/>\n    <div>\n      {% for category, message in\n        get_flashed_messages(with_categories=true) %}\n        <div class=\"alert alert-{{category}}\n          alert-dismissable\">\n          <button type=\"button\" class=\"close\" data-dismiss\n            =\"alert\" aria-hidden=\"true\">&times;</button>\n          {{ message }}\n        </div>\n      {% endfor %}\n    </div>\n```", "```py\nfrom sqlalchemy.orm import join\n@catalog.route('/product-search')\n@catalog.route('/product-search/<int:page>')\ndef product_search(page=1):\n    name = request.args.get('name')\n    price = request.args.get('price')\n    company = request.args.get('company')\n    category = request.args.get('category')\n    products = Product.query\n    if name:\n        products = products.filter(Product.name.like('%' +\n          name + '%'))\n    if price:\n        products = products.filter(Product.price == price)\n    if company:\n        products = products.filter(Product.company.like('%'\n          + company + '%'))\n    if category:\n        products = products.select_from(join(Product,\n          Category)).filter(\n            Category.name.like('%' + category + '%')\n        )\n    return render_template(\n        'products.html', products=products.paginate(page,\n          10)\n    )\n```"]