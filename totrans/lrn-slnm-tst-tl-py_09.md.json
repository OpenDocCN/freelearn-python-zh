["```py\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.common.action_chains import ActionChains\nfrom selenium.webdriver.common.keys import Keys\nimport unittest\n\nclass HotkeyTest(unittest.TestCase):\n    URL = \"https://rawgit.com/jeresig/jquery.hotkeys/master/test-static-05.html\"\n\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n        self.driver.get(self.URL)\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n    def test_hotkey(self):\n        driver = self.driver\n\n        shift_n_label = WebDriverWait(self.driver, 10).\\\n            until(expected_conditions.visibility_of_element_located((By.ID, \"_shift_n\")))\n\n        ActionChains(driver).\\\n            key_down(Keys.SHIFT).\\\n            send_keys('n').\\\n            key_up(Keys.SHIFT).perform()\n        self.assertEqual(\"rgba(12, 162, 255, 1)\",\n                         shift_n_label.value_of_css_property(\"background-color\"))\n\n    def tearDown(self):\n        self.driver.close()\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\nActionChains(driver).\\\n    key_down(Keys.SHIFT).\\\n    send_keys('n').\\\n    key_up(Keys.SHIFT).perform()\n```", "```py\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport unittest\n\nclass ToolTipTest (unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get(\"http://jqueryui.com/tooltip/\")\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n    def test_tool_tip(self):\n        driver = self.driver\n\n        frame_elm = driver.find_element_by_class_name(\"demo-frame\")\n        driver.switch_to.frame(frame_elm)\n\n        age_field = driver.find_element_by_id(\"age\")\n        ActionChains(self.driver).move_to_element(age_field).perform()\n\n        tool_tip_elm = WebDriverWait(self.driver, 10)\\            .until(expected_conditions.visibility_of_element_located((By.CLASS_NAME, \"ui-tooltip-content\")))\n\n        # verify tooltip message\n        self.assertEqual(\"We ask for your age only for statistical purposes.\", tool_tip_elm.text)\n\n    def tearDown(self):\n        self.driver.close()\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\nfrom selenium import webdriver\n\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport unittest\n\nclass DoubleClickTest (unittest.TestCase):\n    URL = \"http://api.jquery.com/dblclick/\"\n\n    def setUp(self):\n        self.driver = webdriver.Chrome()\n        self.driver.get(self.URL)\n        self.driver.maximize_window()\n\n    def test_double_click(self):\n        driver = self.driver\n        frame = driver.find_element_by_tag_name(\"iframe\")\n        driver.switch_to.frame(frame)\n        box = driver.find_element_by_tag_name(\"div\")\n\n        # verify color is Blue\n        self.assertEqual(\"rgba(0, 0, 255, 1)\",\n                         box.value_of_css_property(\"background-color\"))\n\n        ActionChains(driver).move_to_element(\n            driver.find_element_by_tag_name(\"span\"))\\\n            .perform()\n\n        ActionChains(driver).double_click(box).perform()\n\n        # verify Color is Yellow\n        self.assertEqual(\"rgba(255, 255, 0, 1)\",\n                         box.value_of_css_property(\"background-color\"))\n\n    def tearDown(self):\n        self.driver.close()\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\nfrom selenium import webdriver\nfrom selenium.webdriver.common.action_chains import ActionChains\nimport unittest\n\nclass DragAndDropTest (unittest.TestCase):\n\n    URL = \"http://jqueryui.com/resources/demos/droppable/default.html\"\n\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get(self.URL)\n        self.driver.maximize_window(30)\n        self.driver.maximize_window()\n\n    def test_drag_and_drop(self):\n        driver = self.driver\n\n        source = driver.find_element_by_id(\"draggable\")\n        target = driver.find_element_by_id(\"droppable\")\n\n        ActionChains(self.driver).drag_and_drop(source, target).perform()\n        self.assertEqual(\"Dropped!\", target.text)\n\n    def tearDown(self):\n        self.driver.close()\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\nfrom selenium import webdriver\nimport unittest\n\nclass ExecuteJavaScriptTest (unittest.TestCase):â€© def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_search_by_category(self):\n\n        # get the search textbox\n        search_field = self.driver.find_element_by_name(\"q\")\n        self.highlightElement(search_field)\n        search_field.clear()\n\n        # enter search keyword and submit\n        self.highlightElement(search_field)\n        search_field.send_keys(\"phones\")\n        search_field.submit()\n\n        # get all the anchor elements which have product names # displayed currently on result page using # find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n\n        # check count of products shown in results\n        self.assertEqual(2, len(products))\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\n    def highlightElement(self, element):\n        self.driver.execute_script(\"arguments[0].setAttribute('style', arguments[1]);\",\n        element, \"color: green; border: 2px solid green;\")\n        self.driver.execute_script(\"arguments[0].setAttribute('style', arguments[1]);\",\n        element , \"\")\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\ndef highlightElement(self, element):\n      self.driver.execute_script(\"arguments[0].setAttribute('style', arguments[1]);\",\n      element, \"color: green; border: 2px solid green;\")\n      self.driver.execute_script(\"arguments[0].setAttribute('style', arguments[1]);\",\n      element , \"\")\n```", "```py\nfrom selenium import webdriver\nimport datetime, time, unittest\nfrom selenium.common.exceptions import NoSuchElementException\n\nclass ScreenShotTest(unittest.TestCase):\n    def setUp(self):\n        self.driver = webdriver.Firefox()\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_screen_shot(self):\n        driver = self.driver\n        try:\n            promo_banner_elem = driver.find_element_by_id(\"promo_banner\")\n            self.assertEqual(\"Promotions\", promo_banner_elem.text)\n        except NoSuchElementException:\n            st = datetime.datetime\\\n                .fromtimestamp(time.time()).strftime('%Y%m%d_%H%M%S')\n            file_name = \"main_page_missing_banner\" + st + \".png\"\n            driver.save_screenshot(file_name)\n            raise\n\n    def tearDown(self):\n        self.driver.close()\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\ntry:\n    promo_banner_elem = driver.find_element_by_id(\"promo_banner\")\n    self.assertEqual(\"Promotions\", promo_banner_elem.text)\nexcept NoSuchElementException:\n    st = datetime.datetime.fromtimestamp(time.time()).strftime('%Y%m%d_%H%M%S')\n    file__name = \"main_page_missing_banner\" + st + \".png\"\n    driver.save_screenshot(file__name)\n    raise\n```", "```py\npip install Castro\n\n```", "```py\nimport unittest\nfrom selenium import webdriver\nfrom castro import Castro\n\nclass SearchProductTest(unittest.TestCase):\n    def setUp(self):\n        # create an instance of Castro and provide name for the output # file\n        self.screenCapture = Castro(filename=\"testSearchByCategory.swf\")\n        # start the recording of movie\n        self.screenCapture.start()\n\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_search_by_category(self):\n\n        # get the search textbox\n        search_field = self.driver.find_element_by_name(\"q\")\n        search_field.clear()\n\n        # enter search keyword and submit\n        search_field.send_keys(\"phones\")\n        search_field.submit()\n\n        # get all the anchor elements which have product names # displayed\n        # currently on result page using find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n\n        # check count of products shown in results\n        self.assertEqual(2, len(products))\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n        # Stop the recording\n        self.screenCapture.stop()\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```", "```py\ndef setUp(self):\n      #Create an instance of Castro and provide name for the output # file\n      self.screenCapture = Castro(filename=\"testSearchByCategory.swf\")\n      # Start the recording of movie\n      self.screenCapture.start()\n\n      # create a new Firefox session\n      self.driver = webdriver.Firefox()\n      self.driver.implicitly_wait(30)\n      self.driver.maximize_window()\n\n      # navigate to the application home page\n      self.driver.get(\"http://demo.magentocommerce.com/\")\n```", "```py\ndef tearDown(self):\n    # close the browser window\n    self.driver.quit()\n    # Stop the recording\n    self.screenCapture.stop()\n\n```", "```py\nfrom selenium import webdriver\nimport unittest\n\nclass PopupWindowTest(unittest.TestCase):\n\n    URL = \"https://rawgit.com/upgundecha/learnsewithpython/master/pages/Config.html\"\n\n    def setUp(self)    :\n        self.driver = webdriver.Firefox()\n        self.driver.get(self.URL)\n        self.driver.maximize_window()\n\n    def test_window_popup(self):\n        driver = self.driver\n\n        # save the WindowHandle of Parent Browser Window\n        parent_window_id = driver.current_window_handle\n\n        # clicking Help Button will open Help Page in a new Popup # Browser Window\n        help_button = driver.find_element_by_id(\"helpbutton\")\n        help_button.click()\n        driver.switch_to.window(\"HelpWindow\")\n        driver.close()\n        driver.switch_to.window(parent_window_id)\n\n    def tearDown(self):\n        self.driver.close()\n\nif __name__ == \"__main__\":\n    unittest.main(verbosity=2)\n```", "```py\ndriver.switch_to_window(\"HelpWindow\")\n```", "```py\ndriver.close()\n\n# switch back to Home page window using the handle\ndriver.switch_to_window(default_window)\n```", "```py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.webdriver.support.ui import Select\n\nclass CookiesTest(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_store_cookie(self):\n        driver = self.driver\n        # get the Your language dropdown as instance of Select class\n        select_language = \\\n            Select(self.driver.find_element_by_id(\"select-language\"))\n\n        # check default selected option is English\n        self.assertEqual(\"ENGLISH\", select_language.first_selected_option.text)\n        # store cookies should be none\n        store_cookie = driver.get_cookie(\"store\")\n        self.assertEqual(None, store_cookie)\n\n         # select an option using select_by_visible text\n        select_language.select_by_visible_text(\"French\")\n\n        # store cookie should be populated with selected country\n        store_cookie = driver.get_cookie(\"store\")['value']\n        self.assertEqual(\"french\", store_cookie)\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```"]