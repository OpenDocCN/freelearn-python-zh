["```py\n'''\nGeneric Salt Cloud module\n\nThis module is not designed for any specific cloud provider, but is generic\nenough that only minimal changes may be required for some providers.\n\nThis file should be saved as salt/cloud/clouds/generic.py\n\nSet up the cloud configuration at ``/etc/salt/cloud.providers`` or\n``/etc/salt/cloud.providers.d/generic.conf``:\n\n.. code-block:: yaml\n\n    my-cloud-config:\n      driver: generic\n      # The login user\n      user: larry\n      # The user's password\n      password: 123pass\n      # The user's API key\n      api_key: 0123456789abcdef\n'''\n__virtualname__ = 'generic'\n\ndef __virtual__():\n    '''\n    Check for cloud configs\n    '''\n    # No special libraries required\n\n    if get_configured_provider() is False:\n        return False\n\n    return __virtualname__\n\ndef get_configured_provider():\n    '''\n    Make sure configuration is correct\n    '''\n    return config.is_provider_configured(\n        __opts__,\n        __active_provider_name__ or __virtualname__,\n        ('user', 'password', 'apikey')\n    )\n```", "```py\nimport salt.utils.http\nresult = salt.utils.http.query(\n    'https://api.example.com/v1/resource/action/id',\n    'POST',\n    data=post_data_dict,\n    decode=True,\n    decode_type='json',\n    opts=__opts__\n)\nprint(result['dict'])\n```", "```py\nhttps://<hostname>/<version>/<resource>[/<action>[/<id>]]\n```", "```py\ndef _query(\n    resource=None,\n    action=None,\n    method='GET',\n    location=None,\n    data=None,\n):\n```", "```py\nimport json\nimport salt.utils.http\nimport salt.config as config\n\ndef _query(\n        resource=None,\n        action=None,\n        params=None,\n        method='GET',\n        data=None\n    ):\n    '''\n    Make a web call to the cloud provider\n    '''\n    user = config.get_cloud_config_value(\n        'user', get_configured_provider(), __opts__,\n    )\n\n    password = config.get_cloud_config_value(\n        'password', get_configured_provider(), __opts__,\n    )\n\n    api_key = config.get_cloud_config_value(\n        'api_key', get_configured_provider(), __opts__,\n    )\n\n    location = config.get_cloud_config_value(\n        'location', get_configured_provider(), __opts__, default=None\n    )\n\n    if location is None:\n        location = 'eu-north'\n\n    url = 'https://{0}.api.example.com/v1'.format(location)\n\n    if resource:\n        url += '/{0}'.format(resource)\n\n    if action:\n        url += '/{0}'.format(action)\n\n    if not isinstance(params, dict):\n        params = {}\n\n    params['api_key'] = api_key\n\n    if data is not None:\n        data = json.dumps(data)\n\n    result = salt.utils.http.query(\n        url,\n        method,\n        params=params,\n        data=data,\n        decode=True,\n        decode_type='json',\n        hide_fields=['api_key'],\n        opts=__opts__,\n    )\n\n    return result['dict']\n```", "```py\nhttp://example.com/form.cgi?name1=value1&name2=value2&name3=value3\n```", "```py\nhttps://example.com/?api_key=0123456789abcdef\n```", "```py\nhttps://example.com/?api_key=XXXXXXXXXX\n```", "```py\ndef avail_images():\n    '''\n    Get list of available VM images\n    '''\n    return _query(resource='images')\n```", "```py\ndef avail_sizes():\n    '''\n    Get list of available VM sizes\n    '''\n    return _query(resource='sizes')\n```", "```py\ndef avail_locations():\n    '''\n    Get list of available locations\n    '''\n    return _query(resource='locations')\n```", "```py\ndef list_nodes():\n    '''\n    List of nodes, with standard query data\n    '''\n    ret = {}\n    nodes = _query(resource='instances')\n    for node in nodes:\n        ret[node] = {\n            'id': nodes[node]['id'],\n            'image': nodes[node].get('image', None),\n            'size': nodes[node].get('size', None),\n            'state': nodes[node].get('state', None),\n            'private_ips': nodes[node].get('private_ips', []),\n            'public_ips': nodes[node].get('public_ips', []),\n        }\n    return ret\n```", "```py\ndef list_nodes_full():\n    '''\n    List of nodes, with full node data\n    '''\n    return _query(resource='instances')\n```", "```py\nquery.selection:\n  - id\n  - public_ips\n  - state\n```", "```py\nimport salt.utils.cloud\n\ndef list_nodes_select():\n    '''\n    Return a list of the VMs that are on the provider, with select fields\n    '''\n    return salt.utils.cloud.list_nodes_select(\n        list_nodes_full('function'), __opts__['query.selection'],\n    )\n```", "```py\ndef request_instance(vm_):\n    '''\n    Request that a VM be created\n    '''\n    request_kwargs = {\n        'name': vm_['name'],\n        'image': vm_['image'],\n        'size': vm_['size'],\n        'location': vm_['location']\n    }\n\n    salt.utils.cloud.fire_event(\n        'event',\n        'requesting instance',\n        'salt/cloud/{0}/requesting'.format(vm_['name']),\n        {'kwargs': request_kwargs},\n        transport=__opts__['transport']\n    )\n\n    return _query(\n        resource='instances',\n        method='POST',\n        data=request_kwargs,\n    )\n```", "```py\ndef query_instance(vm_):\n    '''\n    Query a VM upon creation\n    '''\n    salt.utils.cloud.fire_event(\n        'event',\n        'querying instance',\n        'salt/cloud/{0}/querying'.format(vm_['name']),\n        transport=__opts__['transport']\n    )\n\n    def _query_ip_address():\n        nodes = list_nodes_full()\n        data = nodes.get(vm_['name'], None)\n        if not data:\n            return False\n\n        if 'public_ips' in data:\n            return data['public_ips']\n        return None\n\n    data = salt.utils.cloud.wait_for_ip(\n        _query_ip_address,\n        timeout=config.get_cloud_config_value(\n            'wait_for_ip_timeout', vm_, __opts__, default=10 * 60),\n        interval=config.get_cloud_config_value(\n            'wait_for_ip_interval', vm_, __opts__, default=10),\n        interval_multiplier=config.get_cloud_config_value(\n            'wait_for_ip_interval_multiplier', vm_, __opts__, default=1),\n    )\n\n    return data\n```", "```py\ndef create(vm_):\n    '''\n    Create a single VM\n    '''\n    salt.utils.cloud.fire_event(\n        'event',\n        'starting create',\n        'salt/cloud/{0}/creating'.format(vm_['name']),\n        {\n            'name': vm_['name'],\n            'profile': vm_['profile'],\n            'provider': vm_['driver'],\n        },\n        transport=__opts__['transport']\n    )\n\n    create_data = request_instance(vm_)\n    query_data = query_instance(vm_)\n\n    vm_['key_filename'] = config.get_cloud_config_value(\n        'private_key', vm_, __opts__, search_global=False, default=None\n    )\n    vm_['ssh_host'] = query_data['public_ips'][0]\n\n    salt.utils.cloud.bootstrap(vm_, __opts__)\n\n    salt.utils.cloud.fire_event(\n        'event',\n        'created instance',\n        'salt/cloud/{0}/created'.format(vm_['name']),\n        {\n            'name': vm_['name'],\n            'profile': vm_['profile'],\n            'provider': vm_['driver'],\n        },\n        transport=__opts__['transport']\n    )\n\n    return query_data\n```", "```py\ndef destroy(name):\n    '''\n    Destroy a machine by name\n    '''\n    salt.utils.cloud.fire_event(\n        'event',\n        'destroying instance',\n        'salt/cloud/{0}/destroying'.format(name),\n        {'name': name},\n        transport=__opts__['transport']\n    )\n\n    nodes = list_nodes_full()\n    ret = _query(\n        resource='instances/{0}'.format(nodes[name]['id']),\n        location=node['location'],\n        method='DELETE'\n    )\n\n    salt.utils.cloud.fire_event(\n        'event',\n        'destroyed instance',\n        'salt/cloud/{0}/destroyed'.format(name),\n        {'name': name},\n        transport=__opts__['transport']\n    )\n\n    if __opts__.get('update_cachedir', False) is True:\n        salt.utils.cloud.delete_minion_cachedir(\n            name, __active_provider_name__.split(':')[0], __opts__\n        )\n\n    return ret\n```", "```py\ndef rename(name, kwargs, call=None):\n    '''\n    Properly rename a node. Pass in the new name as \"newname\".\n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The rename action must be called with -a or --action.'\n        )\n\n    salt.utils.cloud.rename_key(\n        __opts__['pki_dir'], name, kwargs['newname']\n    )\n\n    nodes = list_nodes_full()\n    return _query(\n        resource='instances/{0}'.format(nodes[name]['id']),\n        action='rename',\n        method='POST',\n        data={'name': kwargs['newname']}\n    )\n```", "```py\ndef show_image(kwargs, call=None):\n    '''\n    Show the details for a VM image\n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_image function must be called with -f or --function.'\n        )\n\n    return _query(resource='images/{0}'.format(kwargs['image']))\n```", "```py\n'''\nGeneric Salt Cloud module\n\nThis module is not designed for any specific cloud provider, but is generic\nenough that only minimal changes may be required for some providers.\n\nThis file should be saved as salt/cloud/clouds/generic.py\n\nSet up the cloud configuration at ``/etc/salt/cloud.providers`` or\n``/etc/salt/cloud.providers.d/generic.conf``:\n\n.. code-block:: yaml\n\n    my-cloud-config:\n      driver: generic\n      # The login user\n      user: larry\n      # The user's password\n      password: 123pass\n'''\nimport json\nimport salt.utils.http\nimport salt.utils.cloud\nimport salt.config as config\nfrom salt.exceptions import SaltCloudSystemExit\n\n__virtualname__ = 'generic'\n\ndef __virtual__():\n    '''\n    Check for cloud configs\n    '''\n    if get_configured_provider() is False:\n        return False\n\n    return __virtualname__\n\ndef get_configured_provider():\n    '''\n    Make sure configuration is correct\n    '''\n    return config.is_provider_configured(\n        __opts__,\n        __active_provider_name__ or __virtualname__,\n        ('user', 'password')\n    )\n\ndef request_instance(vm_):\n    '''\n    Request that a VM be created\n    '''\n    request_kwargs = {\n        'name': vm_['name'],\n        'image': vm_['image'],\n        'size': vm_['size'],\n        'location': vm_['location']\n    }\n\n    salt.utils.cloud.fire_event(\n        'event',\n        'requesting instance',\n        'salt/cloud/{0}/requesting'.format(vm_['name']),\n        {'kwargs': request_kwargs},\n        transport=__opts__['transport']\n    )\n\n    return _query(\n        resource='instances',\n        method='POST',\n        data=request_kwargs,\n    )\n\ndef query_instance(vm_):\n    '''\n    Query a VM upon creation\n    '''\n    salt.utils.cloud.fire_event(\n        'event',\n        'querying instance',\n        'salt/cloud/{0}/querying'.format(vm_['name']),\n        transport=__opts__['transport']\n    )\n\n    def _query_ip_address():\n        nodes = list_nodes_full()\n        data = nodes.get(vm_['name'], None)\n        if not data:\n            log.error('There was an empty response from the cloud provider')\n            return False\n\n        log.debug('Returned query data: {0}'.format(data))\n\n        if 'public_ips' in data:\n            return data['public_ips']\n        return None\n\n    data = salt.utils.cloud.wait_for_ip(\n        _query_ip_address,\n        timeout=config.get_cloud_config_value(\n            'wait_for_ip_timeout', vm_, __opts__, default=10 * 60),\n        interval=config.get_cloud_config_value(\n            'wait_for_ip_interval', vm_, __opts__, default=10),\n        interval_multiplier=config.get_cloud_config_value(\n            'wait_for_ip_interval_multiplier', vm_, __opts__, default=1),\n    )\n\n    return data\n\ndef create(vm_):\n    '''\n    Create a single VM\n    '''\n    salt.utils.cloud.fire_event(\n        'event',\n        'starting create',\n        'salt/cloud/{0}/creating'.format(vm_['name']),\n        {\n            'name': vm_['name'],\n            'profile': vm_['profile'],\n            'provider': vm_['driver'],\n        },\n        transport=__opts__['transport']\n    )\n\n    create_data = request_instance(vm_)\n    query_data = query_instance(vm_)\n\n    vm_['key_filename'] = config.get_cloud_config_value(\n        'private_key', vm_, __opts__, search_global=False, default=None\n    )\n    vm_['ssh_host'] = query_data['public_ips'][0]\n\n    salt.utils.cloud.bootstrap(vm_, __opts__)\n\n    salt.utils.cloud.fire_event(\n        'event',\n        'created instance',\n        'salt/cloud/{0}/created'.format(vm_['name']),\n        {\n            'name': vm_['name'],\n            'profile': vm_['profile'],\n            'provider': vm_['driver'],\n        },\n        transport=__opts__['transport']\n    )\n\n    return query_data\n\ndef destroy(name, call=None):\n    '''\n    Destroy a machine by name\n    '''\n    salt.utils.cloud.fire_event(\n        'event',\n        'destroying instance',\n        'salt/cloud/{0}/destroying'.format(name),\n        {'name': name},\n        transport=__opts__['transport']\n    )\n\n    nodes = list_nodes_full()\n    ret = _query(\n        resource='instances/{0}'.format(nodes[name]['id']),\n        location=node['location'],\n        method='DELETE'\n    )\n\n    salt.utils.cloud.fire_event(\n        'event',\n        'destroyed instance',\n        'salt/cloud/{0}/destroyed'.format(name),\n        {'name': name},\n        transport=__opts__['transport']\n    )\n\n    if __opts__.get('update_cachedir', False) is True:\n        salt.utils.cloud.delete_minion_cachedir(\n            name, __active_provider_name__.split(':')[0], __opts__\n        )\n\n    return ret\n\ndef rename(name, kwargs, call=None):\n    '''\n    Properly rename a node. Pass in the new name as \"newname\".\n    '''\n    if call != 'action':\n        raise SaltCloudSystemExit(\n            'The rename action must be called with -a or --action.'\n        )\n\n    salt.utils.cloud.rename_key(\n        __opts__['pki_dir'], name, kwargs['newname']\n    )\n\n    nodes = list_nodes_full()\n    return _query(\n        resource='instances/{0}'.format(nodes[name]['id']),\n        action='rename',\n        method='POST',\n        data={'name': kwargs['newname']}\n    )\n\ndef show_image(kwargs, call=None):\n    '''\n    Show the details for a VM image\n    '''\n    if call != 'function':\n        raise SaltCloudSystemExit(\n            'The show_image function must be called with -f or --function.'\n        )\n\n    return _query(resource='images/{0}'.format(kwargs['image']))\n\ndef list_nodes(call=None):\n    '''\n    List of nodes, with standard query data\n    '''\n    ret = {}\n    nodes = _query(resource='instances')\n    for node in nodes:\n        ret[node] = {\n            'id': nodes[node]['id'],\n            'image': nodes[node].get('image', None),\n            'size': nodes[node].get('size', None),\n            'state': nodes[node].get('state', None),\n            'private_ips': nodes[node].get('private_ips', []),\n            'public_ips': nodes[node].get('public_ips', []),\n        }\n    return ret\n\ndef list_nodes_full(call=None):\n    '''\n    List of nodes, with full node data\n    '''\n    return _query(resource='instances')\n\ndef list_nodes_select(call=None):\n    '''\n    Return a list of the VMs that are on the provider, with select fields\n    '''\n    return salt.utils.cloud.list_nodes_select(\n        list_nodes_full('function'), __opts__['query.selection'], call,\n    )\n\ndef avail_images(call=None):\n    '''\n    Get list of available VM images\n    '''\n    return _query(resource='images')\n\ndef avail_sizes(call=None):\n    '''\n    Get list of available VM sizes\n    '''\n    return _query(resource='sizes')\n\ndef avail_locations(call=None):\n    '''\n    Get list of available locations\n    '''\n    return _query(resource='locations')\n\ndef _query(\n        resource=None,\n        action=None,\n        params=None,\n        method='GET',\n        location=None,\n        data=None\n    ):\n    '''\n    Make a web call to the cloud provider\n    '''\n    user = config.get_cloud_config_value(\n        'user', get_configured_provider(), __opts__, search_global=False\n    )\n    password = config.get_cloud_config_value(\n        'password', get_configured_provider(), __opts__,\n    )\n    api_key = config.get_cloud_config_value(\n        'api_key', get_configured_provider(), __opts__,\n    )\n    location = config.get_cloud_config_value(\n        'location', get_configured_provider(), __opts__, default=None\n    )\n\n    if location is None:\n        location = 'eu-north'\n\n    url = 'https://{0}.api.example.com/v1'.format(location)\n\n    if resource:\n        url += '/{0}'.format(resource)\n\n    if action:\n        url += '/{0}'.format(action)\n\n    if not isinstance(params, dict):\n        params = {}\n\n    params['api_key'] = api_key\n\n    if data is not None:\n        data = json.dumps(data)\n\n    result = salt.utils.http.query(\n        url,\n        method,\n        params=params,\n        data=data,\n        decode=True,\n        decode_type='json',\n        hide_fields=['api_key'],\n        opts=__opts__,\n    )\n\n    return result['dict']\n```"]