- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Development with JavaScript, HTML, and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter marks the beginning of a series of five chapters on web programming
    with PyCharm, all of which will cover the development of general web applications.
    I have been looking forward to writing this section because this is my bread and
    butter. I have been developing web applications for as long as there has been
    a web. The professional edition of PyCharm contains something of a treat for web
    developers: a full copy of JetBrains’ **WebStorm**, which is provided through
    a pre-installed plugin. This means we get a lot more than just syntax highlighting
    for **HTML**, **CSS**, and **JavaScript**! We also have full access to **Node.js**
    tooling and modern web UI frameworks such as **React**. I might be tempted to
    call it overkill, but it isn’t. The product I work on every day has a mixture
    of **microservices** written in **Python 3**, **NodeJS**, and **React** for the
    frontend. I leverage three different databases: **Microsoft SQL Server**, **MongoDB**,
    and **Redis**. I never have to leave PyCharm! As I just mentioned, I have robust
    tooling for JavaScript, NodeJS, and React built-in. The databases are all supported
    in PyCharm, which we’ll cover in [*Chapter 11*](B19644_11.xhtml#_idTextAnchor266),
    *Understanding Database Management with PyCharm*. I can create debug run configurations
    in PyCharm, run several services that communicate with each other via REST calls,
    and perform inter-service debugging. I can also place a breakpoint in the React
    frontend and another in a separate project using **Flask** or **FastAPI**; as
    I work through the application’s workflow, my breakpoints stop, regardless of
    which project I’m in or which language the project is using. I would not attempt
    this in any other IDE. Did I mention how excited I was to start writing this set
    of chapters? I’m getting ahead of myself.'
  prefs: []
  type: TYPE_NORMAL
- en: The topics that will be discussed in this chapter include integrating common
    web programming languages (JavaScript, HTML, and CSS) in PyCharm and how to develop
    with them in straightforward and intuitive ways. By the end of this chapter, you
    will have gained comprehensive knowledge of how to use the three languages so
    that you can start a web development project using PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing JavaScript, HTML, and CSS in the process of web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The options for working with JavaScript, HTML, and CSS code in PyCharm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to implement live editing and debugging for web projects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to work with HTML boilerplate options in PyCharm
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the prerequisites for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: A working installation of Python 3.10 or later.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working installation of PyCharm Professional. If you are using the community
    edition, most of what we’ll cover in this chapter won’t work since you’ll only
    get limited HTML support. You can still work with CSS and JavaScript files, but
    the experience will be very limited compared to the professional edition.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Chrome web browser. You will need it if you want to debug JavaScript code
    running in the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A working installation of NodeJS and **node package manager** (**npm**). This
    is optional. You will only need these if you want to work with React or modern
    JavaScript frameworks such as Angular, Vue, or Express. React is an advanced topic
    and won’t be covered extensively beyond setting up and working with a React project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: I’ll be showing you how to use PyCharm’s deployment features. For this, I assume
    you understand how to deploy a web project to a remote host using a tool such
    as WinSCP or FileZilla, or how to transfer files using command-line tools such
    as **secure copy** (**SCP**) or **file transfer** **protocol** (**FTP**).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can find the sample code for this chapter at [https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-07](https://github.com/PacktPublishing/Hands-On-Application-Development-with-PyCharm---Second-Edition/tree/main/chapter-07).
    We covered how to clone the repository in [*Chapter 2*](B19644_02.xhtml#_idTextAnchor028),
    *Installation* *and Configuration*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to HTML, JavaScript, and CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I call these *the triumvirate of web development*. They constitute the most
    basic skills you can learn as you progress toward becoming a full stack web developer.
    The term **full stack**, when referencing a full stack developer, just means you
    are skilled at developing the frontend portion of the application, along with
    the backend and the database. The next six chapters are devoted to full stack
    web development with PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: 'Strictly speaking, only one of the three languages we’ll be covering here is
    a programming language. **Hypertext Markup Language** (**HTML**) is used to create
    the structure and layout of a web page or application UI. **Cascading Style Sheets**
    (**CSS**) is used to control the look of the UI while honoring the separation
    of concerns: we split the layout of buttons, text, and interactive elements from
    the definitions of visual appearance. Neither HTML nor CSS has any ability to
    create any level of interactivity by themselves beyond a few CSS tricks, such
    as changing a button’s color when the user hovers their cursor over it.'
  prefs: []
  type: TYPE_NORMAL
- en: The real interactivity in a web-based frontend comes from JavaScript, or as
    it is properly called, ECMAScript. About a million internet years ago, a company
    called Netscape was battling for the hearts and minds of the nascent web browser
    user community. It was David versus Goliath, where Goliath was Microsoft. Netscape’s
    browser cost a small fee to license while Microsoft’s Internet Explorer was free,
    built into the Windows operating system, and sported a set of tools that allowed
    IT managers to centrally customize their browser’s behavior while rolling it out
    to large corporate user bases. Netscape’s value proposition was non-existent.
    They needed a game-changer.
  prefs: []
  type: TYPE_NORMAL
- en: At about this time, Sun Microsystems was heavily marketing its new flagship
    programming language called **Java**. Like Netscape, Sun was plagued by competition
    from Microsoft, so the two teamed up. Netscape started creating what would become
    the in-browser programming language called ECMAScript, while Sun licensed the
    name Java with the understanding that the newly renamed JavaScript would never
    run anywhere but within a browser. Sun’s end game was to make sure everyone was
    using Java to create their web application backends, with Netscape winning the
    market share for frontend rendering by offering an interactive experience. JavaScript
    has absolutely nothing to do with Java beyond marketing. They are very different
    languages and should never be confused.
  prefs: []
  type: TYPE_NORMAL
- en: I’m going to assume you have some knowledge of the vast world of HTML development.
    I also want to remind you that this is a book on PyCharm and not web development.
    Given this is how I earn my living, my experience here is deep, and I will move
    from “this is an HTML tag” (that is the absolute basics) to “and here’s React”
    (that is, there be dragons if all you’ve ever done is Python work) pretty quickly.
    My only regret here is that Packt won’t let me write “there be dragons” in a scary
    horror film-style font. I’ll leave you references to books and other resources
    in the *Further reading* section of this chapter in case you want to learn more
    about frontend or full stack development in general.
  prefs: []
  type: TYPE_NORMAL
- en: Writing code with HTML
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'HTML, like any other code, is created within a text file. In the case of HTML,
    the text is highly structured using a set of HTML tags. You can think of the tags
    as being like keywords in a programming language, except these are set apart using
    angle brackets. Remember, HTML is for content structure and layout. It was created
    by Tim Berners-Lee (not Al Gore) as a way to present scientific journal articles
    on the internet’s predecessor called the **Defense Advanced Research Projects
    Agency Network** (**DARPANET**). This is an adjunct of the United States Department
    of Defense. One problem in the scientific world with this was the time it took
    to publish a peer-reviewed journal article. In cases where science had to advance
    rapidly, we needed a format to electronically publish research without going through
    the peer review and print publication process, which can take months. HTML was
    designed to electronically mimic a paper publication. Since this is the case,
    it should be no surprise that the structure of HTML elements refers to a **document
    object model** (**DOM**). The document is organized into paragraphs, headers,
    sub-headers, sections, figures, images, and the like. Consider this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is an HTML document that is structured like a typical research paper. It
    has a title, which appears in the browser’s tab. `<title>` is in the `<head>`
    tag of the document, which might also contain metadata and references to CSS files
    and JavaScript used on the page.
  prefs: []
  type: TYPE_NORMAL
- en: The `<body>` tag holds the document’s contents. The head and body are enclosed
    within an HTML tag. Remember, the tags are enclosed in angle brackets; for example,
    `<body>`. Every tag has an opening tag and a closing tag with content in between.
    For example, the header opens with `<h1>`, the content, *Introduction*, is inserted,
    and the tag is closed with `</h1>`. The closing tag adds a forward slash to the
    matching element.
  prefs: []
  type: TYPE_NORMAL
- en: This structure enables the web browser to easily parse the document and display
    the content as an electronic page. In modern HTML, though, only the structure
    is defined. How the elements are laid out on the page, along with visual definitions
    for fonts, colors, sizes, and so on, are all controlled by an externally linked
    CSS document.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we add this code to our earlier document, within the `<head>` tag, we get
    a page that looks very different in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the added link tag is a little different: it doesn’t have a closing
    tag. There are a few exceptions in HTML like this. Additionally, the link tag
    has some attributes attached. You can think of attributes as being like arguments
    for a function. They define additional input used by the tag. In this case, several
    different types of link tags are possible in HTML. We are defining this one as
    a stylesheet using the `rel` attribute. The `href` attribute tells the HTML page
    where to find the CSS file. Here, the page will be looking for a file called `mystyle.css`
    in the same folder as the HTML file.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating HTML in PyCharm
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The HTML frontend development experience is only available with PyCharm Professional.
    The community edition allows you to create HTML files in a Python project, but
    that’s about all. I’ll be strictly considering the professional edition in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to create a new project, but this time, we’re not going to create
    a Python project. In fact, we’re not going to create a new project in PyCharm
    at all. PyCharm used to have the option to create an empty project. At some point,
    it was removed, but that’s OK. PyCharm projects are simply a folder with a `.idea`
    folder inside it.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating an empty project, which will bypass the process of setting up a virtual
    environment, which we don’t need, is easy. Just make a folder somewhere on your
    computer. I created mine on the desktop and called it `html-project`. I like to
    name my projects that aren’t using Python in kebab case instead of snake case
    so that I can easily spot the difference. Naturally, you can call it whatever
    you like.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure PyCharm doesn’t have an open project. If it does, use **File** | **Close**
    to close the current project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, just drag your empty folder into PyCharm. You’ll get the usual **Trust
    and Open Project** dialog, as shown in *Figure 7**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1: Drag an empty folder onto the PyCharm project window to create
    an empty project with no Python environment](img/B19644_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.1: Drag an empty folder onto the PyCharm project window to create
    an empty project with no Python environment'
  prefs: []
  type: TYPE_NORMAL
- en: You may have noticed that there are HTML project types in PyCharm Professional’s
    new project window and wonder why I am ignoring them. I would rather start you
    off with a basic example before I show you the HTML boilerplate project, which
    creates a whole site based on ideals established by Google. Let’s walk before
    we fly. If you are already a full stack veteran, don’t skip this section. Given
    this isn’t a book on HTML, I don’t intend to linger on the basics. I’m going to
    go over a few features in this simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you create a project in this way, it is effectively a Python project without
    an interpreter. You’ll get a message stating that the default Python installation
    is being used as an environment, which is fine. We won’t need it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2: Right-click the project folder to create a new HTML file](img/B19644_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.2: Right-click the project folder to create a new HTML file'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will be prompted to give the file a name. Call it `index.html`. This is
    the default file that will be displayed on a web server, so it is the most common
    file you’d want to create first. PyCharm will generate a basic HTML page structure
    based on a template. More than that, though, PyCharm will prompt you to fill in
    the basic elements of the template as part of the creation process. Take a look
    at *Figure 7**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.3: PyCharm presents a template for you to fill in](img/B19644_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.3: PyCharm presents a template for you to fill in'
  prefs: []
  type: TYPE_NORMAL
- en: 'This template only has one template variable in it: `Title`. As you can see,
    line 5 is highlighted and the word `Title` is highlighted even more. PyCharm is
    expecting you to type a title, then press the *Tab* key. Doing this sets the title
    and then takes you straight down to the inside of the body tag.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Upon adding this code, a few things become evident:'
  prefs: []
  type: TYPE_NORMAL
- en: All the autocompletion you’ve come to expect with Python is also applied to
    HTML tags. Valid attributes are also supplied in code completion. You’ll notice
    this when you type in the link tag for the style sheet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: PyCharm will automatically create the closing tag for you. When you type `<h1>Introduction`,
    as soon as you complete the `<h1>` tag, PyCharm will insert the `</h1>` closer
    for you. Failure to close your tags can lead to layout issues or missing content.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The same documentation features for Python keywords and libraries exist for
    HTML. Hover over any element and you’ll see documentation for that element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The same linting we saw in Python code is at play in the HTML code too. *Figure
    7**.4* shows the same kind of warnings in the same areas we saw when we talked
    about these features in the editor for Python code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4: We can see a lot of similarities between the editor’s treatment
    of Python and its treatment of HTML](img/B19644_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.4: We can see a lot of similarities between the editor’s treatment
    of Python and its treatment of HTML'
  prefs: []
  type: TYPE_NORMAL
- en: The problem summary at the top of the screen (*1*) indicates that there are
    a few typographical errors. There aren’t really any, it’s just that the dictionary
    is assuming English, and my placeholder verbiage is in Latin. There is a warning,
    though. If you click the yellow triangle next to *1*, the problem window opens
    (*3*). I can also see a yellow warning marker at *2*. All these point to the fact
    that we have yet to create the CSS file referenced on line 6.
  prefs: []
  type: TYPE_NORMAL
- en: 'In addition to the usual things we normally see in the editor, we can see something
    new at *4*: there are a few icons that correspond to the web browsers PyCharm
    is aware of on your computer.'
  prefs: []
  type: TYPE_NORMAL
- en: Previewing web pages
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clicking any of the browser icons will allow you to preview your code in that
    browser. In my case, I have three browsers: Chrome, Firefox, and PyCharm’s built-in
    preview window. These icons will fade in and out as your mouse cursor approaches
    the top right of the editor window.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In honor of Netscape’s shoutout at the beginning of this chapter, let’s take
    a look at Firefox in *Figure 7**.5* since it is Netscape’s successor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.5: The browser launches and displays our page](img/B19644_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.5: The browser launches and displays our page'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three things worth noting in *Figure 7**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm didn’t just open the page in the browser with a file:/// URL. If you
    want to do that, you can hold down *Alt* or *Option* when clicking the browser
    icon. In our case, PyCharm launched its internal web server. This is handy because
    previewing your work in the browser with a file:/// URL is very limiting. Many
    features simply won’t work.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The content in the `<title>` tag appears as the title on the tab in the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The year 1991 called and they want their website back. HTML just creates structure.
    This page is pretty ugly without the CSS. We should fix that.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Before we do, though, I want to point out a nifty feature that PyCharm gives
    us: auto-reloading.'
  prefs: []
  type: TYPE_NORMAL
- en: Reloading the browser view on save
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you study the URL in the browser in *Figure 7**.5*, you’ll notice the `RELOAD_ON_SAVE`
    attribute. You can probably guess what this does, but let’s cover it anyway. In
    *Figure 7**.6*, I have tiled my windows so that PyCharm is on the left, and my
    browser is on the right. This is a common configuration used by web developers,
    though it usually plays out on several monitors:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.6: PyCharm will automatically reload the page in the browser every
    time you save changes to the file](img/B19644_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.6: PyCharm will automatically reload the page in the browser every
    time you save changes to the file'
  prefs: []
  type: TYPE_NORMAL
- en: 'I’ve added a second `<p>` tag that reads as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The moment I pressed *Ctrl* + *S* (*Cmd* + *S* on Mac), the browser updated
    with the new content. This seriously speeds up development! This is hardly revolutionary;
    most editors support this in some way, but so does PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: The Live Edit plugin
  prefs: []
  type: TYPE_NORMAL
- en: In older versions of JetBrains IDEs that support HTML development, you used
    to need a plugin called Live Edit to get this auto-reload feature. You don’t need
    it anymore since the feature is integrated into the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: Using the PyCharm HTML preview
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you’d rather keep 100% of your work in PyCharm rather than have an external
    browser, there is a new HTML preview feature, as shown in *Figure 7**.7*, that
    launches an internal version of the Chromium browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7: The PyCharm preview window allows you to view your work in a
    Chromium browser window implemented as a PyCharm UI tab](img/B19644_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.7: The PyCharm preview window allows you to view your work in a Chromium
    browser window implemented as a PyCharm UI tab'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re not familiar, Chromium is the open source version of Chrome. This
    is important to note since over the years, I’ve seen a lot of web development
    products with goofy preview products bundled in that bear little relevance to
    how your work will be displayed in a real browser.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the available browsers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The browser icons that appear as preview browsers are configurable. You can
    add or remove any browser on your computer to or from the configuration. You’ll
    find this by going to **Settings** under **Tools** | **Web Browsers**, and then
    **Preview**, as shown in *Figure 7**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.8: You can add and remove browsers for preview and configure reload
    behaviors](img/B19644_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.8: You can add and remove browsers for preview and configure reload
    behaviors'
  prefs: []
  type: TYPE_NORMAL
- en: I think you’ll find adding new browsers as easy as clicking the **+** icon and
    locating the browser’s executable. If you’d like to remove the unsightly presence
    of Internet Explorer, just click it, and click the **–** icon.
  prefs: []
  type: TYPE_NORMAL
- en: Note the dropdown that allows you to set the default launch browser to the system
    default, which is the first in the list, or a custom path. You can also configure
    whether you see the launch icons for HTML files and/or XML files.
  prefs: []
  type: TYPE_NORMAL
- en: The reload behavior can be configured at the bottom of the screen. You can set
    the reload to happen on save, on change, or turn it off. In my opinion, the **On
    Change** setting fires too often. I leave it set to **On Save**.
  prefs: []
  type: TYPE_NORMAL
- en: Navigating structure code with the structure window
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The structure window allows you to view the structure of your code. Most of
    the time, the structure window just shows a list of functions and global variables.
    If you open a class file, you’ll see the properties and methods of the class.
    *Figure 7**.09* shows what happens when you use the structure window with an HTML
    document:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.9: The structure window allows you to see and navigate the DOM in
    the code window](img/B19644_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.9: The structure window allows you to see and navigate the DOM in
    the code window'
  prefs: []
  type: TYPE_NORMAL
- en: When you open the structure view on an HTML page, you can see and easily navigate
    the entire DOM structure of the HTML document.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the CSS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Right-click the project folder and add a Stylesheet file called `mystyle.css`,
    as shown in *Figure 7**.10*. You will be prompted to choose a Stylesheet type.
    We’re sticking to CSS files. The rest of the options are fancy, but they all transpile,
    usually via the **Babel** library and a **WebPack** build script, to regular CSS
    at the end of the day. If you are new to frontend work, I recommend learning plain
    CSS before branching off into exotic topics such as **Less** or **Sass**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.10: Create a new CSS file using File | New | Stylesheet](img/B19644_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.10: Create a new CSS file using File | New | Stylesheet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Be sure to name the file `mystyle.css` so that it matches what we have in the
    `<link>` tag in our HTML file. It also needs to be in the same folder as `index.html`.
    Add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Save the file and return to your browser. Don’t expect it to have updated; PyCharm’s
    reload feature is watching the `index.html` file, not the newly created `mystyle.css`
    file. Hit the reload button in your browser. I won’t bother with a black-and-white
    screenshot of a colored HTML page. The change should be immediately noticeable.
    Now that the browser has loaded the CSS, you can edit the CSS in PyCharm. With
    each save, the page will update, just as it did when you edited the HTML in the
    `index.html` page.
  prefs: []
  type: TYPE_NORMAL
- en: 'You no doubt noticed the excellent code completion as you typed in the CSS
    code. The color codes were all displayed by name, as well as hex value, as shown
    in *Figure 7**.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.11: As you type CSS color names, you’ll see the name, the hex value,
    and a preview of the color](img/B19644_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.11: As you type CSS color names, you’ll see the name, the hex value,
    and a preview of the color'
  prefs: []
  type: TYPE_NORMAL
- en: There is a preview of the color next to the CSS color name as well so that you
    can see what color you’re setting.
  prefs: []
  type: TYPE_NORMAL
- en: Using color selectors
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can set the color using a name or a hex value, or you can edit an existing
    color using the swatch, as shown in *Figure 7**.12*. Here, I’ve clicked the color
    swatch in the gutter on line 10 of the `mystyle.css` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.12: You can edit the color by clicking the swatch in the gutter
    and picking a new color](img/B19644_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.12: You can edit the color by clicking the swatch in the gutter and
    picking a new color'
  prefs: []
  type: TYPE_NORMAL
- en: From here, I can pick the color using an RGBA or hex value or just drag the
    cursor around the color window. There’s a hue slider as well as a slider for the
    alpha channel. This controls the opacity, which the UI is displaying as a percentage
    rather than the traditional 0-255 integer value.
  prefs: []
  type: TYPE_NORMAL
- en: You’ll also notice that there is an eye dropper tool. You can use the eye dropper
    to select any color that’s visible on your screen. This allows you to, for example,
    match a color to be used on your type with a color from an image that’s visible
    on your screen.
  prefs: []
  type: TYPE_NORMAL
- en: Adding JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s time to round out our experience with HTML, CSS, and JavaScript by adding
    some interactivity to our page. Right-click on the project folder and add a JavaScript
    file called `index.js`.
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to add a button to our HTML file, then have that button react when
    we click it using JavaScript. We’ll write the JavaScript code first; then, we’ll
    go back and add the button.
  prefs: []
  type: TYPE_NORMAL
- en: Adding some JavaScript code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Enter this code into your `index.js` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: We’ll add some elements to the HTML file that are referenced in this JavaScript
    in a minute. First, we’ll add a button with an ID of `btnClickMe`. Then, we’ll
    add a span tag inside a paragraph with an ID of `textDisplay`. Finally, we’ll
    create a variable called `clickCount`. You can probably see where this is going.
    When you load the page, the value of `clickCount` will be `0`. Each time you click
    the button, we increment the `clickCount` variable, then update the HTML within
    the span tag to reflect the new value.
  prefs: []
  type: TYPE_NORMAL
- en: 'To make this work, we need an `onclick` handler for the button. Add this code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The button’s `onclick` handler is assigned to the anonymous function, which
    increments `clickCount` and updates the display. I even went the extra mile and
    cast `clickCount` to a string.
  prefs: []
  type: TYPE_NORMAL
- en: With our JavaScript in place, let’s update our HTML.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the elements to the HTML file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, let’s go back to the `index.html` file and add two new elements. First,
    we''ll add a text area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s add a button:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The button has an ID attribute of `btnClickMe`, which I used in the JavaScript
    to the `onclick` event in the browser. Each time the `clickCount`. Then, the function
    changes the text that appears in the span tag with an `id` of `textArea`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We’re almost done! We just need to add a script tag to the bottom of the HTML
    file. Add this line just above the closing body tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'This line will load your JavaScript file after all the HTML has loaded into
    the browser window. Manually refresh your browser. You can click the **Click me**
    button and see the counter increment. You can see mine in *Figure 7**.13*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.13: Our web page is now interactive!](img/B19644_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.13: Our web page is now interactive!'
  prefs: []
  type: TYPE_NORMAL
- en: As you were working, you no doubt took advantage of the usual code completion
    we’ve been discussing. That’s pretty nice, right? But it gets even better! I’m
    going to show you how to debug from your IDE. Normally, you’d have to rely solely
    on the debugging tools in your browser, which means switching back and forth between
    the code display in your browser and your IDE. I have, at least once or twice,
    forgotten which tool I was in and found myself trying to directly edit in the
    browser’s debugging tool. This works, except that it doesn’t save your file back
    to the actual code file. Admittedly, this only happens when I’m really tired,
    but with two middle-school-aged daughters, a full-time job running a development
    team, and writing books, I’m pretty much always really tired. I did mention earlier
    that the debugger is my favorite feature, so without further ado, I give you client-side
    JavaScript debugging!
  prefs: []
  type: TYPE_NORMAL
- en: Debugging client-side JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can debug the JavaScript that runs in your browser by setting up Google
    Chrome as your default browser. Chrome has a very good remote debugging server
    built into the browser. PyCharm can connect to it and display the debugging information
    directly in the PyCharm UI, just as it would appear when we debugged Python code
    back in [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145), *Seamless Testing, Debugging,*
    *and Profiling*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `index.js` file and set a breakpoint in our click handler function
    on line 7, as shown in *Figure 7**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.14: By setting a breakpoint in your client-side code, you can debug
    your client-side JavaScript just as easily as you can debug Python code](img/B19644_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.14: By setting a breakpoint in your client-side code, you can debug
    your client-side JavaScript just as easily as you can debug Python code'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use the JavaScript debugger directly in PyCharm, you need to create a run
    configuration. We covered creating run configurations in detail in *Chapter 6*,
    *Seamless Testing, Debugging, and Profiling*. To create a run configuration that’s
    capable of working with a JavaScript file loaded into HTML, create a run configuration
    using the JavaScript Debug template, as shown in *Figure 7**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.15: Use the JavaScript Debug template to set up a run configuration
    that allows you to debug your JavaScript code directly in PyCharm](img/B19644_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.15: Use the JavaScript Debug template to set up a run configuration
    that allows you to debug your JavaScript code directly in PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you’ve selected the template, you’ll see a settings screen, similar to
    the one in *Figure 7**.16*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.16: Fill in the settings to run your HTML page, which loads your
    JavaScript for debugging](img/B19644_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.16: Fill in the settings to run your HTML page, which loads your JavaScript
    for debugging'
  prefs: []
  type: TYPE_NORMAL
- en: The key settings fields are numbered in *Figure 7**.16*.
  prefs: []
  type: TYPE_NORMAL
- en: At position *1*, you can fill in a name for the run configuration. It can be
    anything you like since the name doesn’t affect the workings of the run configuration.
    For the URL, you want to click the folder icon at *2* and just browse to your
    `index.html` file. When you do that, PyCharm will fill in the localhost URL, along
    with the port number used by PyCharm’s built-in web server. The selection at *3*
    determines which web browser is launched. PyCharm only supports debugging in browsers
    based on Chromium. For example, Chrome, Chromium, Edge, or Brave would work fine,
    but Safari or Firefox would not.
  prefs: []
  type: TYPE_NORMAL
- en: The setting at *4* is important since it loads your JavaScript breakpoints before
    the `OnPageLoad` event fires. If you are using JavaScript that loads based on
    an `$(function()` call, you should check this box. Our script is very simple,
    so for me, it’s fine to leave this unchecked. Note that checking this box will
    slow the load time for your debugger to start.
  prefs: []
  type: TYPE_NORMAL
- en: To start your debugging session, click the usual debugging button. If you don’t
    remember where this is, refer back to [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145).
    Chrome will launch with your web page. Upon clicking the **Click me** button we
    made earlier, the debugger in PyCharm should intercept the event. As with our
    debugger coverage in [*Chapter 6*](B19644_06.xhtml#_idTextAnchor145), you can
    use all the same features to inspect and step through your JavaScript code.
  prefs: []
  type: TYPE_NORMAL
- en: Working with Emmet templating
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Emmet is a powerful and widely used plugin in PyCharm that provides an efficient
    and streamlined way of writing HTML, **JavaScript XML** (**JSX**), and CSS code.
    It offers a range of templating features that significantly boost developer productivity
    and speed up the coding process. By leveraging the Emmet abbreviations and snippets,
    developers can write code snippets in a shorthand syntax and expand them into
    complete HTML or CSS structures with just a few keystrokes. The only downside
    is that you need to learn and memorize the Emmet abbreviations. I don’t have the
    space to turn this into an Emmet tutorial. There is a cheat sheet available at
    [https://docs.emmet.io/cheat-sheet/](https://docs.emmet.io/cheat-sheet/).
  prefs: []
  type: TYPE_NORMAL
- en: To use Emmet in PyCharm, you only need to type some Emmet shorthand into the
    editor window and press *Tab*. For instance, by typing `ul>li.item$*5`, followed
    by pressing the *Tab* key, Emmet can generate an unordered list with five list
    items, where the `$` symbol is automatically incremented for each item. This feature
    is particularly useful when dealing with repetitive HTML structures and eliminates
    the need to manually type out repetitive code blocks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another powerful feature of Emmet in PyCharm is that you can navigate and edit
    HTML and CSS code efficiently. With the **Go to Edit Point** feature, developers
    can navigate between predefined edit points within an expanded abbreviation, allowing
    for quick modifications and adjustments. Additionally, Emmet’s automatic tag closing
    feature ensures that HTML tags are automatically closed, reducing the chance of
    syntax errors and saving time in the coding process. The **Go to Edit Point**
    feature effectively allows you to put placeholders in the code template. If you
    tried out the earlier example with the unordered list, you might have noticed
    that the code was generated, but your cursor was sitting inside the first list
    item tag, as seen in *Figure 7**.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.17: Emmet generated the unordered list thanks to the edit point
    defined in the template](img/B19644_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.17: Emmet generated the unordered list thanks to the edit point defined
    in the template'
  prefs: []
  type: TYPE_NORMAL
- en: Emmet also provides intelligent CSS abbreviations that simplify the process
    of writing and expanding CSS properties. By using shortcuts such as “bg” for “background”
    or “p” for “padding,” developers can quickly generate CSS code snippets without
    having to remember the full property names. This feature speeds up the CSS development
    process and enhances code readability.
  prefs: []
  type: TYPE_NORMAL
- en: HTML project types in PyCharm Professional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Earlier, I mentioned that I wanted to start you off with a basic empty project
    with some simple HTML, CSS, and JavaScript code we created from scratch. PyCharm
    Professional offers new additional pure HTML project types. By pure, I mean they
    don’t use any modern JavaScript frameworks such as React or Angular. These modern
    frameworks represent a paradigm shift in frontend development. A pure HTML project
    will continue to use very traditional DOM manipulation, as we did in our JavaScript
    example earlier. To change the content of our click counter span, we used this
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Since client-side JavaScript like this runs in the browser, the code has access
    to the document object, which is effectively the browser window. JavaScript can
    manipulate the currently loaded document or even update the contents of the browser
    window itself.
  prefs: []
  type: TYPE_NORMAL
- en: Modern JavaScript frameworks no longer manipulate the DOM. Instead, they rely
    on a state change mechanism coupled with the idea of a shadow DOM. In the case
    of React, your program, which consists mainly of JavaScript, CSS, and HTML markup
    generated by JSX, maintains a component-driven state machine. Changes to the state
    trigger events within the React framework, which, in turn, trigger a re-render
    of the affected areas in the UI.
  prefs: []
  type: TYPE_NORMAL
- en: This is a fairly complicated paradigm to explain to the uninitiated, and since
    this isn’t a book on modern JavaScript, I’ll punt the idea of a deeper explanation
    to other books in the *Further reading* section at the end of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There are two project types we can look at that are DOM-based. Let’s check them
    out.
  prefs: []
  type: TYPE_NORMAL
- en: HTML 5 Boilerplate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **HTML 5 Boilerplate** (**H5BP**) project can be found at [https://html5boilerplate.com/](https://html5boilerplate.com/).
    This project has been around since 2011, and it represents a site generation tool
    that epitomizes HTML development best practices. If you could generate a 100%
    by-the-book website as a starting point, and then alter it to make pretty much
    anything, you’d have H5BP.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are a few of its key features:'
  prefs: []
  type: TYPE_NORMAL
- en: A well-thought-out and structured `index.html` file replete with metadata tags
    and every optimization you could want. Just add content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Normalize.css` and `Main.css` take care of your CSS resets and provide some
    base styles for helpers, media queries for responsive design, and even print-friendly
    options.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Google Analytics baked in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Modernizr library is included so that you can detect which browser is running
    your code and react accordingly.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server setting files so that you can deliver performance and security.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placeholder icons for mobile devices, favicons, and progressive web apps.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As I said, it is the ultimate HTML 5 starter kit for any website that doesn’t
    lock you into a lot. Older versions use jQuery, but like so many other frameworks,
    more recent builds remove it as a dependency should you not want to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create an H5BP project in PyCharm. Click `h5bp` and I’m just putting it
    in the default PyCharm `Projects` folder on my computer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Behind the scenes, PyCharm will generate a large project using H5BP via npm.
    *Figure 7**.18* shows my generated project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.18: My HTML 5 Boilerplate project with index.html open](img/B19644_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.18: My HTML 5 Boilerplate project with index.html open'
  prefs: []
  type: TYPE_NORMAL
- en: Wow! Just look at all that code you didn’t have to type, look up, or remember!
    With a more extensive project loaded, let’s look at a few helpful features that
    I haven’t pointed out yet.
  prefs: []
  type: TYPE_NORMAL
- en: Previewing and editing graphics with external tools
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can preview graphics in PyCharm by simply double-clicking the file. I’ll
    open the `tile.png` file, as seen in *Figure 7**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.19: You can view graphics in PyCharm by simply opening them](img/B19644_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.19: You can view graphics in PyCharm by simply opening them'
  prefs: []
  type: TYPE_NORMAL
- en: I may have teased you a bit by implying that you can edit images in PyCharm.
    You can’t. But you can configure an external editor that will launch when you
    open a graphic.
  prefs: []
  type: TYPE_NORMAL
- en: 'Launch the settings window and find **Tools** | **External Tools**. Click the
    **+** icon in the top toolbar. In *Figure 7**.20*, I’m setting up the **Gnu Image
    Manipulation Program** (**GIMP**), which is an open source alternative to **Adobe
    Photoshop**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.20: You can configure GIMP as an external editor to open images
    in your project](img/B19644_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.20: You can configure GIMP as an external editor to open images in
    your project'
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t get me wrong here: I prefer Photoshop. If you have it, use that. It doesn’t
    run in Linux (to me, Wine doesn’t count), so GIMP is the next best thing. Any
    kind of file that PyCharm can’t edit can benefit from an external editor. Another
    good addition I often make is **Inkscape** or **Adobe Illustrator** for working
    with **Scalable Vector Graphics** (**SVG**) files. These are useful because they
    are resolution independent. Likewise, if you serve PDF files, adding **Adobe Acrobat**
    or some other program to manipulate PDFs is a good candidate for adding as an
    external tool.'
  prefs: []
  type: TYPE_NORMAL
- en: To open a file in the external editor, just right-click the file, click the
    **External Tools** menu option, and select the appropriate external tool.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading your site to a server
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many large sites and software projects use a continuous deployment system to
    deploy code to servers. If your project isn’t that far along yet, or maybe you
    just need something simple, PyCharm has a publishing mechanism designed to help
    you easily publish a website or application. For that matter, it can be used to
    publish any kind of software, but I most often see it used to deploy web projects
    to web servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'You’ll find the deployment configuration and tools in the **Tools** menu, as
    shown in *Figure 7**.21*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.21: The deployment settings and tools can be found by going to Tools
    | Deployment](img/B19644_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.21: The deployment settings and tools can be found by going to Tools
    | Deployment'
  prefs: []
  type: TYPE_NORMAL
- en: The process of setting up deployment entails configuring one or more remote
    servers. Let’s take a look at how this is done.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the remote server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click the **Configuration…** menu option shown in *Figure 7**.21*. You’ll be
    greeted by a plain gray window that says **Please add a web server to configure**.
    Click the **+** icon in the top-left corner of the window and select the type
    of connection you intend to use. You can see the choices in *Figure 7**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.22: Select the type of server connection you’d like to use](img/B19644_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.22: Select the type of server connection you’d like to use'
  prefs: []
  type: TYPE_NORMAL
- en: 'You have several connection protocols from which to choose:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Secure File Transfer Protocol** (**SFTP**). This should be your go-to. Out
    of the options on the list, it is the most secure since it relies on the **Secure
    Shell** **Protocol** (**SSH**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Transfer Protocol** (**FTP**). In the real world, you should never use
    this option. FTP by itself sends all of its authentication data in an unencrypted
    text stream. Only use it if you want your site to be hacked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**File Transfer Protocol Secured** (**FTPS**) is FTP with **Secure Sockets
    Layer** (**SSL**) encryption. The same encryption certificates you’d use to secure
    your website with HTTPS can be used with FTP to become FTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web Distributed Authoring and Versioning** (**WebDAV**) was created back
    in the day when companies such as Microsoft and Macromedia (which were bought
    by Adobe) were selling web authoring tools for web designers – that is to say,
    people who write HTML but who aren’t overly technical. Most of them died in the
    great developer rebellion of 1998\. WebDAV allowed an authoring tool to connect
    to a server seamlessly with minimal fuss. Like FTP, though, it has its share of
    security issues. I don’t recommend using it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Local or mounted folder** is used when you have direct network access to
    the folder being used to serve your site or application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`build`, then copy the necessary files into that folder. I find the **Local
    or mounted folder** option to be more useful.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'I’m going to walk you through connecting to a server using SFTP. When you click
    the `Web Server`, as seen in *Figure 7**.23*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.23: Give your server a descriptive name](img/B19644_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.23: Give your server a descriptive name'
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you’ll need credentials. You generally get these from your friendly local
    system administrator or hosting service. These are entered into an SSH configuration,
    which is distinct from your deployment server configuration. The UI gets a little
    bit funky right here. To set up the SSH configuration, click the ellipsis button
    shown in *Figure 7**.24*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.24: Creating a deployment requires you to also create an SSH configuration
    by clicking the ellipsis shown here](img/B19644_07_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.24: Creating a deployment requires you to also create an SSH configuration
    by clicking the ellipsis shown here'
  prefs: []
  type: TYPE_NORMAL
- en: This brings up yet another empty gray window. Click the **+** sign in the top
    corner of this window and you’ll see a screen like mine, as shown in *Figure 7**.25*.
  prefs: []
  type: TYPE_NORMAL
- en: Fill in your connection details – that is, your host, port, username, and password.
    Besides a password, you can also use SSH keys or a connection to an OpenSSH config
    and authentication agent. I’ll keep it simple and stick with a password. Clicking
    the **Test Connection** button tells me whether or not my credentials are working.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need a root path. This should be the root of your web server’s document
    folder, assuming you mean to deploy a website. There is an autodetect button there
    that will find the SSH user’s home folder. This is fine if you’re serving from
    that location. It is common to serve from a location such as `/var/www/html` on
    the remote server. If that is the folder your server uses, make sure your system
    admin gives you the credentials needed to access that location.
  prefs: []
  type: TYPE_NORMAL
- en: 'Below that, you’ll see an entry for the web server’s URL. The root path on
    the server should map to the web server URL. You can see my settings in *Figure
    7**.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.25: My deployment settings (so far)](img/B19644_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.25: My deployment settings (so far)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Your next stop is the **Mappings** tab. *Figure 7**.26* shows the **Mappings**
    tab with a mapping specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.26: The Mappings tab specifies the mappings between the folders
    on your computer and the folders on the server](img/B19644_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.26: The Mappings tab specifies the mappings between the folders on
    your computer and the folders on the server'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a web project, you usually just need one mapping between the folder containing
    your code on your computer, and the document root of the web server. Next, switch
    to the **Excluded Paths** tab, as shown in *Figure 7**.27*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.27: Exclude paths you don’t need to copy to the server](img/B19644_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.27: Exclude paths you don’t need to copy to the server'
  prefs: []
  type: TYPE_NORMAL
- en: Exclude any files you don’t want to be copied. You can specify local files that
    shouldn’t be copied to the server, and remote files that should not be copied
    down to your computer. I added the contents of the `doc` folder, which contains
    documentation for the developer, and the contents of the `.idea` folder, which
    is used by PyCharm. Click **OK**, and your deployment will be configured.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading to the server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You are now ready to upload your project. Go back to the **Tools** | **Deployment**
    menu, and this time, click **Upload to Web Server**, as shown in *Figure 7**.28*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.28: The upload controls are in the deployment menu](img/B19644_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.28: The upload controls are in the deployment menu'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you named your remote server something besides Web Server, that is what
    will appear in the menu. You will be asked to confirm the upload operation. PyCharm
    will display a message stating that the upload was successful, as seen in *Figure
    7**.29*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.29: The index.html file was successfully transferred](img/B19644_07_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.29: The index.html file was successfully transferred'
  prefs: []
  type: TYPE_NORMAL
- en: 'The upload operation only copied the open `index.html` file. We can check this
    by clicking **Tools** | **Deployment** | **Browse Remote Host**. This brings up
    a view of the remote host, allowing you to see the files on the host. You can
    see mine in *Figure 7**.30*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.30: You can view the mapped project root folder on the server](img/B19644_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.30: You can view the mapped project root folder on the server'
  prefs: []
  type: TYPE_NORMAL
- en: 'You probably want to transfer the whole site rather than just the open file.
    Right-click inside the remote host window and click **Upload here**, as seen in
    *Figure 7**.31*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.31: Right-click and then select Upload here to upload the whole
    site](img/B19644_07_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.31: Right-click and then select Upload here to upload the whole site'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see from the menu, you have full graphical control over files on
    the server, including all file operations, such as rename, copy, or delete. You
    can compare operations that will diff the local file with the remote, and of course,
    the file operations are two-way, so you can synchronize work done directly on
    the server back to your computer.
  prefs: []
  type: TYPE_NORMAL
- en: All in all, this tool is more capable than a standalone file transport program
    such as FileZilla. It is integrated directly into the IDE, and there is even an
    auto-sync setting that uploads the local copy to the remote whenever you save
    a file. PyCharm has everything you need to work on the HTML frontend of a website
    or application, including the ability to publish right from PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Bootstrap project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bootstrap is another DOM-oriented HTML 5 project type you can use in PyCharm
    Professional. This one is more useful if you are building an application rather
    than a website. Bootstrap is a library of styled HTML components developed by
    Twitter that help users rapidly develop applications. Essentially, you can make
    a nice-looking application by simply generating this project, then copying and
    pasting Bootstrap snippets for elements such as buttons, card layouts, sliders,
    switches, and a mobile-first grid system.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can create a Bootstrap project by clicking **File** | **New Project**,
    then picking **Bootstrap** from the templates on the right, as shown in *Figure
    7**.32*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.32: Creating a Bootstrap project](img/B19644_07_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.32: Creating a Bootstrap project'
  prefs: []
  type: TYPE_NORMAL
- en: All this template does is create a `js` folder and a `css` folder. PyCharm then
    downloads Bootstrap and places the library files in their respective folders.
    That’s it. It doesn’t even generate an `index.html` file for you. It is just a
    quick way to set up a project with Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Working with modern JavaScript and NodeJS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PyCharm has all its features and templates available in the Web Storm product,
    which is designed for working with modern JavaScript projects. Since I assume
    you are mostly interested in Python projects, I won’t spend a lot of time delving
    into the details of server-side JavaScript development since we will be covering
    the Python options, such as Flask, FastAPI, Pyramid, and Django, in the next few
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: However, you should know that if you have JavaScript projects and Python projects,
    there is no need to buy two separate products.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a NodeJS project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a new Node JS project, just click `NodeJS` project template. This
    is the equivalent of generating a project with the `npm init -y` command. All
    you get is a generic `package.json` file. It is pretty bare-bones, but it does
    save you the trouble of firing up a terminal and running the `init` command.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to a basic Node project, you can also generate a **Next.js** project
    or an **Express** project. Express is JavaScript’s answer to Flask, which we’ll
    cover in the next chapter. It is used to develop the backend of your project.
    Next.JS, on the other hand, is a fusion of frontend and backend development with
    an easy-to-use hosting service. For more on this, see [https://nextjs.org](https://nextjs.org).
  prefs: []
  type: TYPE_NORMAL
- en: Creating a React project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React is one of the most popular frontend frameworks available today. It represents
    a paradigm shift in frontend development as it doesn’t use the DOM to manipulate
    the way a web UI looks. Instead of using the DOM to show and hide components in
    a **single-page application** (**SPA**) as appropriate, you instead manipulate
    a state object, which causes React to update the page.
  prefs: []
  type: TYPE_NORMAL
- en: React UIs are developed as a set of components that work together along with
    life cycle methods or hooks to handle traditional or even custom events. I’m showing
    a little more work with React here because it is what I use in my daily work,
    and because in a later chapter, I’ll present how to use FastAPI with a React frontend.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a React project is as easy as the others we’ve seen so far. Just click
    `create-react-app`, which is normally executed from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.33: Create React App can be run from the PyCharm GUI](img/B19644_07_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 7.33: Create React App can be run from the PyCharm GUI'
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm also gives you an easy way to select between JavaScript, which is the
    default, and TypeScript, which is the preference for many developers. TypeScript
    is a variant of JavaScript pioneered by Microsoft in the wake of Douglas Crockford’s
    book titled *JavaScript, the Good Parts*. TypeScript aims to fix many of the bad
    parts, such as the lack of a strong type system.
  prefs: []
  type: TYPE_NORMAL
- en: Other frontend frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PyCharm has support for several other modern frontend frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: '**Angular** is like React in that it uses components driven by a state machine.
    The biggest difference, besides being infamous for major releases not being backward
    compatible, is bi-directional communications between components. In React, properties
    drill down from top to bottom. In Angular, communications between components go
    both directions. This can make your applications harder to debug.'
  prefs: []
  type: TYPE_NORMAL
- en: '**React Native** is an offshoot of React that’s designed to create native user
    experiences for mobile and desktop applications. The latest edition of the .NET
    framework from Microsoft includes a React Native variant for creating Windows
    user interfaces for desktop applications.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vite** is a modern framework that aims to solve performance problems associated
    with bloat. It is easy for a project in any other framework to require dozens
    or even hundreds of JavaScript module imports, which slows the performance of
    development and the application itself. Vite uses advanced bundling tools to streamline
    the frontend development process.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vue** is yet another frontend framework that provides a declarative component-based
    programming model. While React relies heavily on JSX, Vue uses standard HTML,
    CSS, and JavaScript and can be configured to include elements such as routing,
    server-side rendering, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered using PyCharm as a frontend development tool for web pages
    and applications. We discovered PyCharm has a very rich set of capabilities in
    this area because the JetBrains Web Storm product is integrated directly into
    PyCharm Professional as a pre-installed plugin.
  prefs: []
  type: TYPE_NORMAL
- en: This provides all the functionality of a robust, dedicated tool specializing
    in the development of HTML, JavaScript, and CSS. All the same debugging capabilities
    available to us in Python are also afforded in JavaScript code, whether it be
    client or server side. While we didn’t spend any time talking about server-side
    JavaScript, the capability to work with NodeJS projects is there.
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm Professional gives us a great many project templates in both traditional
    DOM-based development strategies, such as HTML 5 Boilerplate and Bootstrap, and
    modern state machine-based systems such as Angular and React.
  prefs: []
  type: TYPE_NORMAL
- en: We learned how to leverage PyCharm’s deployment tools to upload sites and applications
    to remote servers. We also learned how to configure external tools such as image
    editors so that they’re launched directly from PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: Having covered the frontend tooling, in the next chapter, we will discover how
    to develop a full stack web application using the Flask framework.
  prefs: []
  type: TYPE_NORMAL
- en: Be sure to check out the companion website for the book at [https://www.pycharm-book.com](https://www.pycharm-book.com).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Answer the following questions to test your knowledge of this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: What is the purpose of HTML code? How is an HTML file structured?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of CSS code? How is a CSS file structured?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of JavaScript code? In general, what makes it one of the
    most popular web programming languages?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can you include a CSS style sheet or a JavaScript script in an HTML file
    in PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is Emmet? How is it supported by PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What options are available when it comes to debugging JavaScript in PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the most secure way to deploy a web application from PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
