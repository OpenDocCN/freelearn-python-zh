- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Deploying and Managing FastAPI Applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we delve into the essential aspects of deploying and managing
    FastAPI applications. As you develop your FastAPI projects, understanding how
    to effectively run, secure, and scale them is crucial for ensuring performance
    and reliability in production environments. This chapter will equip you with the
    knowledge and tools needed to deploy your FastAPI applications seamlessly, leveraging
    various technologies and best practices.
  prefs: []
  type: TYPE_NORMAL
- en: You will learn how to utilize the **FastAPI CLI** to run your server efficiently,
    enabling **HTTPS** to secure your applications, and containerizing your FastAPI
    projects with **Docker**. Additionally, we will explore techniques for scaling
    your applications across multiple workers, packaging your applications for distribution,
    and deploying them on cloud platforms such as **Railway**. Each recipe in this
    chapter provides step-by-step instructions, practical examples, and insights into
    optimizing your deployment workflow.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will be proficient in deploying FastAPI applications
    using modern tools and methodologies. You’ll be able to always secure your applications
    with HTTPS, run them in Docker containers, scale them with multiple workers, and
    deploy them on the cloud. These skills are invaluable for any developer aiming
    to take their FastAPI applications from development to production.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Running the server with the FastAPI CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling HTTPS on FastAPI applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running FastAPI applications in Docker containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the server across multiple workers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying your FastAPI application on the cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shipping FastAPI applications with Hatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is for advanced users who want to learn how to deploy their FastAPI
    applications on the cloud. If you are new to FastAPI or Python, you might want
    to check out the first two chapters of the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find the chapter’s code on GitHub here: [https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter12](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter12).'
  prefs: []
  type: TYPE_NORMAL
- en: To manage dependencies and isolate the project, set up a virtual environment
    in the project root folder.
  prefs: []
  type: TYPE_NORMAL
- en: For the *Running FastAPI applications in Docker containers* and *Running the
    server across multiple workers* recipes, we will be using Docker. Make sure to
    install it on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: Running the server with the FastAPI CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The FastAPI `$ fastapi` command to run a FastAPI application, manage a FastAPI
    project, and do other things. This feature was added in version 0.111.0 recently.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll explore how to run a FastAPI application using the FastAPI
    CLI. This approach can streamline your development workflow and provide a more
    intuitive way to manage your server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To run the recipe, ensure you have a minimum FastAPI module with the application
    with at least one endpoint. We will work on a new application called `Live Application`,
    so create a new project folder called `live_application` with an `app` subfolder
    containing a `main.py` module as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Also, make sure you have a version of FastAPI higher than `0.111.0` in your
    environment by running the following from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you already have installed it, make sure to have the latest version of `fastapi`
    in your environment. You can do it by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Once the installation or the upgrade is completed, we can start the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With your application set up, simply run the following from the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: You will see detailed information printed on the terminal. Let’s check the most
    important ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first message is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In the `fastapi dev` command, we didn’t specify an `app.main:app` argument as
    we used to do with the `uvicorn` command. The FastAPI CLI automatically detects
    the `FastAPI` object class in the code according to a set of default paths.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following messages are about the building of the server by looking at the
    packages and modules to be considered. Then, it explicitly shows the resolved
    import for the `FastAPI` object class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will see messages specifying the running mode with the main addresses
    similar to this one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This message indicates that the application is operating in development mode.
  prefs: []
  type: TYPE_NORMAL
- en: This means that it will restart the server automatically when there are code
    updates, and the server will run on the local address `127.0.0.1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can alternatively run the server in production mode by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This won’t apply any reload and the server will make the application visible
    to the local network of the machine hosting the server.
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the basic commands that you can use to run your FastAPI application
    with different settings and options. For more advanced features and configurations,
    you can refer to the FastAPI documentation.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The FastAPI CLI relies on the `uvicorn` command to run. Some of the arguments
    are similar. For instance, if we want to run the service on a different port number
    than `8000`, we can use the `--port` parameter, or to specify the host address,
    we can use `--host`. You can use the `--help` parameter to see the command-line
    documentation with the list of all the available parameters. For example, you
    can run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'As an example, to run the application visible to the network, you can pass
    the unspecified address `0.0.0.0` to the host as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the equivalent of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Your application will now be visible to the hosting local network.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can check more on the functionalities of the FastAPI CLI on the official
    documentation page:'
  prefs: []
  type: TYPE_NORMAL
- en: '*FastAPI* *CLI*: https://fastapi.tiangolo.com/fastapi-cli/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enabling HTTPS on FastAPI applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web applications need security, and **Hypertext Transfer Protocol Secure** (**HTTPS**)
    is a basic way to secure communication between clients and servers.
  prefs: []
  type: TYPE_NORMAL
- en: HTTPS scrambles the data sent over the network, preventing unauthorized access
    and modification.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will learn how to enable HTTPS on FastAPI applications for
    local testing. We’ll use `mkcert` to make a **Secure Sockets Layer/Transport Layer
    Security** (**SSL/TLS**) certificate for local development and give some advice
    for production deployment. By the end of the recipe, you’ll be able to protect
    your FastAPI application with HTTPS, improving its security and reliability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some background information about HTTPS and SSL/TLS certificates can help with
    this recipe. From a consumer perspective, you can find a good overview at this
    link: [https://howhttps.works/](https://howhttps.works/).'
  prefs: []
  type: TYPE_NORMAL
- en: We will also use an existing application as an example. You can either apply
    the recipe to your own application or use `Live Application` as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also need `mkcert`, so install it correctly on your machine. Installation
    depends on your operating system, and you can see the instructions here: [https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation](https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation).'
  prefs: []
  type: TYPE_NORMAL
- en: 'After installing, run this command from your terminal to see how to use it
    and check that it works:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: When the installation is complete, we can start the recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s set up our certificates through the following steps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by allowing our browser to trust certificates created locally with
    `mkcert`. Run this simple command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command has added a local certificate in your operating system trust store
    so that your browsers will automatically accept it as a reliable source of certificates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We can then create the certificates and the private key that the server will
    use for some domain ranges by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: To ensure security, do not include certificates and keys in your Git history
    when you create them. Add the `*.pem` file extension to the `.``gitignore` file
  prefs: []
  type: TYPE_NORMAL
- en: 'We will have to give the key and the certificate to the server when it starts.
    At the time of writing, the `fastapi` command does not support the arguments to
    pass the key and the certificate to the server, so we will start the server with
    `uvicorn` by running the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This command will start the server with the certificate and the key.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is all you need to set up an HTTPS server connection.
  prefs: []
  type: TYPE_NORMAL
- en: To test it, open your browser, and go to the `localhost` address.
  prefs: []
  type: TYPE_NORMAL
- en: You will see the lock icon on the address bar, which means that the connection
    is HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: However, if you try to reach the address with an HTTP connection at `http://localhost:443`,
    you will get an error response.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can fix this by adding automatic redirection to the HTTPS of the server
    by using a dedicated middleware provided by FastAPI. Change the `main.py` file
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Then, restart the server. If you try to connect to `localhost` with an HTTP
    connection, (for example, `http://localhost:443`), it will automatically redirect
    you to an HTTPS connection, `https://localhost`. However, since it does not support
    port redirection, you have to specify port `443` anyway.
  prefs: []
  type: TYPE_NORMAL
- en: You have just enabled an HTTPS connection for your FastAPI application within
    the server. By enabling HTTPS for your FastAPI application, you have taken an
    important step toward enhancing web security and user experience. You can now
    enjoy the features of FastAPI with more confidence and trust.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen how to generate TLS/SSL certificates for local testing. In a production
    environment, it will be similar with the difference that this will involve the
    **Domain Name System** (**DNS**) hosting provider.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are general guidelines on how to do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Generate a private key and a **certificate signing request** (**CSR**) for your
    domain name. Use tools such as **OpenSSL** or **mkcert** as well. Keep the private
    key secret. The CSR has information about your domain name and organization that
    a **certificate authority** (**CA**) will verify.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit the CSR to a CA and get a signed certificate. A CA is a trusted entity
    that issues and validates TLS/SSL certificates. There are self-signed, free, or
    paid CAs. You may need to provide more proof of your identity and domain ownership
    depending on the CA. Some popular CAs are **Let’s Encrypt**, **DigiCert**, and
    **Comodo**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the certificate and the private key on your web server. The procedure
    may differ based on the server software and the operating system. You may also
    need to install intermediate certificates from the CA. Configure your web server
    to use HTTPS and redirect HTTP to HTTPS.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Often, your hosting service provider may handle the TLS/SSL certificates and
    configuration for you. Some providers use tools such as **Certbot** to get and
    renew certificates from Let’s Encrypt, or they use their own CA. Check with your
    provider to see whether they offer such options and how to use them.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The GitHub repository at the following link shows you more possibilities of
    `mkcert`:'
  prefs: []
  type: TYPE_NORMAL
- en: '*mkcert:* [https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the FastAPI official documentation, you can have a look at HTTPS functioning
    on the page:'
  prefs: []
  type: TYPE_NORMAL
- en: '*About* *HTTPS:* [https://fastapi.tiangolo.com/deployment/https/](https://fastapi.tiangolo.com/deployment/https/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Instructions on how to run `uvicorn` in HTTPS mode can be found at the following
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Running with* *HTTPS*: [https://www.uvicorn.org/deployment/#running-with-https](https://www.uvicorn.org/deployment/#running-with-https)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can find details on `HTTPSRedirectMiddle` on the official documentation
    page at this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*HTTPSRedirectMiddleware:* [https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware](https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running FastAPI applications in Docker containers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Docker** is a useful tool that lets developers wrap applications with their
    dependencies into a container. This method makes sure that the application operates
    reliably in different environments, avoiding the common *works on my machine*
    issue. In this recipe, we will see how to make a Dockerfile and run a FastAPI
    application inside a Docker container. By the end of this guide, you will know
    how to put your FastAPI application into a container, making it more flexible
    and simpler to deploy.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You will benefit from some knowledge of container technology, especially Docker,
    to follow the recipe better. But first, check that **Docker Engine** is set up
    properly on your machine. You can see how to do it at this link: [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).'
  prefs: []
  type: TYPE_NORMAL
- en: If you use Windows, it is better to install **Docker Desktop**, which is a Docker
    virtual machine distribution with a built-in graphical interface.
  prefs: []
  type: TYPE_NORMAL
- en: 'Whether you have Docker Engine or Docker Desktop, make sure the daemon is running
    by typing this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: If you don’t see any error about the daemon, that means that Docker is installed
    and working on the machine. The way to start the Docker daemon depends on the
    installation you choose. Look at the related documentation to see how to do it.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the recipe for your applications or follow along with the `Live
    Application` application that we introduced in the first recipe, which we are
    using throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is not very complicated to run a simple FastAPI application in a Docker
    container. The process consists of three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create the Dockerfile.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Build the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Generate the container.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, you just have to run the container to have the application working.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Dockerfile
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Dockerfile contains the instructions needed to build the image from an operating
    system and the file we want to specify.
  prefs: []
  type: TYPE_NORMAL
- en: It is good practice to create a separate Dockerfile for the development environment.
    We will name it `Dockerfile.dev` and place it under the project root folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'We start the file by specifying the base image, which will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will pull an image from the Docker Hub, which already comes with Python
    3.10 integrated. Then, we create a folder called `/code` that will host our code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we copy `requirements.txt` into the image and install the packages inside
    the image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The `pip install` command runs with the `--no-cache-dir` parameter to avoid
    `pip` caching operations that wouldn’t be beneficial inside a container. Also,
    in a production environment, for larger applications, it is recommended to pin
    fixed versions of the packages in `requirements.txt` to avoid potential compatibility
    issues due to package upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we can copy the `app` folder containing the application into the image
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we define the server startup instruction as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is all we need to create our `Dockerfile.dev` file.
  prefs: []
  type: TYPE_NORMAL
- en: Building the image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once we have `Dockerfile.dev`, we can build the image. We can do it by running
    the following from the command line at the project root folder level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Since we named our Dockerfile `Dockerfile.dev`, we should specify it in an
    argument. Once the build is finished, you can check that the image has been correctly
    built by running the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'You should see the details of the image on the output print like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: With the image built, we can proceed with creating the container creation.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the container
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To create the container and run it; simply run the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the container and run it. We can see the container by running
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Since we didn’t specify a container name, it will automatically affect a fancy
    name. Mine, for example, is `bold_robinson`.
  prefs: []
  type: TYPE_NORMAL
- en: Open the browser on `http://localhost:8000` and you will see the home page response
    of our application.
  prefs: []
  type: TYPE_NORMAL
- en: This is all you need to run a FastAPI application inside a Docker container.
    Running a FastAPI application in a Docker container is a great way to use the
    advantages of both technologies. You can easily scale, update, and deploy your
    web app with minimal configuration.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Dockerfile can be used to specify several features of the image. Check
    the list of commands in the official documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Dockerfile* *reference*: [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Also, you can have a look at the Docker CLI documentation on the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Docker:* [https://docs.docker.com/reference/cli/docker/](https://docs.docker.com/reference/cli/docker/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can have a look at the FastAPI documentation page dedicated to the integration
    with Docker at this link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*FastAPI in Containers - Docker:* [https://fastapi.tiangolo.com/deployment/docker/](https://fastapi.tiangolo.com/deployment/docker/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running the server across multiple workers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In high-traffic environments, running a FastAPI application with a single worker
    may not be sufficient to handle all incoming requests efficiently. To improve
    performance and ensure better resource use, you can run your FastAPI instance
    across multiple workers. This can be achieved using tools such as **Gunicorn**.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to run a FastAPI application with multiple
    workers using Gunicorn in a Docker container, and we will also discuss Uvicorn’s
    ability to handle multiple workers along with its limitations.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `gunicorn` package is not Windows compatible. To ensure operating system
    operability, we will run our `Live Application` in a Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: The recipe will be based on the project created in the previous recipe, *Running
    FastAPI applications in* *Docker containers*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FastAPI with multiple workers runs multiple copies of the app on different CPU
    processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To see this better, let’s make the endpoint show the `main.py`, add these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s add the `gunicorn` dependency in the `requirements.txt` file as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: $ pip install gunicorn
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: $ gunicorn app.main:app --workers 4 \
  prefs: []
  type: TYPE_NORMAL
- en: --worker-class uvicorn.workers.UvicornWorker
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: CMD ["gunicorn",\
  prefs: []
  type: TYPE_NORMAL
- en: '"app.main:app",\'
  prefs: []
  type: TYPE_NORMAL
- en: '"--bind", "0.0.0.0:80",\'
  prefs: []
  type: TYPE_NORMAL
- en: '"--workers", "4",\'
  prefs: []
  type: TYPE_NORMAL
- en: '"--worker-class",\'
  prefs: []
  type: TYPE_NORMAL
- en: '"uvicorn.workers.UvicornWorker",\'
  prefs: []
  type: TYPE_NORMAL
- en: '"--log-level", "debug"]'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: $ docker build -t live-application-gunicorn \
  prefs: []
  type: TYPE_NORMAL
- en: -f Dockerfile.dev .
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: $ docker run -p 8000:80 -i live-application-gunicorn
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'web: fastapi run --port $PORT'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"Hello": "World"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch --version
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: Hatch, version 1.11.1
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch new "FCA Server"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: fca-server
  prefs: []
  type: TYPE_NORMAL
- en: ├──src
  prefs: []
  type: TYPE_NORMAL
- en: │  └── fca_server
  prefs: []
  type: TYPE_NORMAL
- en: │      ├── __about__.py
  prefs: []
  type: TYPE_NORMAL
- en: │      └── __init__.py
  prefs: []
  type: TYPE_NORMAL
- en: ├──tests
  prefs: []
  type: TYPE_NORMAL
- en: │  └── __init__.py
  prefs: []
  type: TYPE_NORMAL
- en: ├──LICENSE.txt
  prefs: []
  type: TYPE_NORMAL
- en: ├──README.md
  prefs: []
  type: TYPE_NORMAL
- en: └──pyproject.tomt
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch shell
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: (fca-server) path/to/fca-server $
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: $ python -c "import sys; print(sys.executable)"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch run python -c "import sys; print(sys.executable)"
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[project]'
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: dependencies = [
  prefs: []
  type: TYPE_NORMAL
- en: '"fastapi"'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch run fastapi --help
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: from fastapi import APIRouter
  prefs: []
  type: TYPE_NORMAL
- en: app = APIRouter()
  prefs: []
  type: TYPE_NORMAL
- en: '@app.get("/")'
  prefs: []
  type: TYPE_NORMAL
- en: 'def read_root():'
  prefs: []
  type: TYPE_NORMAL
- en: return {
  prefs: []
  type: TYPE_NORMAL
- en: '"message":'
  prefs: []
  type: TYPE_NORMAL
- en: '"Welcome to the FastAPI Cookbook Application!"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: from fca_server.main import router
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch build -t sdist ../dist
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: $ python -m venv .venv
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: $ source .venv/Scripts/activate
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: $ .venv\Scripts\activate
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: $ pip install ..\dist\fca_server-0.0.1.tar.gz
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: from fastapi import FastAPI
  prefs: []
  type: TYPE_NORMAL
- en: from fca_server import router
  prefs: []
  type: TYPE_NORMAL
- en: app = FastAPI(
  prefs: []
  type: TYPE_NORMAL
- en: title="Import FCA Server Application"
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: app.include_router(router)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: $ fastapi run
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: $ hatch config find
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
