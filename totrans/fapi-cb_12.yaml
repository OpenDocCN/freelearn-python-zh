- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Deploying and Managing FastAPI Applications
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署和管理 FastAPI 应用程序
- en: In this chapter, we delve into the essential aspects of deploying and managing
    FastAPI applications. As you develop your FastAPI projects, understanding how
    to effectively run, secure, and scale them is crucial for ensuring performance
    and reliability in production environments. This chapter will equip you with the
    knowledge and tools needed to deploy your FastAPI applications seamlessly, leveraging
    various technologies and best practices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将深入探讨部署和管理 FastAPI 应用程序的基本方面。随着您开发 FastAPI 项目，了解如何有效地运行、安全和扩展它们对于确保生产环境中的性能和可靠性至关重要。本章将为您提供部署
    FastAPI 应用程序所需的知识和工具，利用各种技术和最佳实践，使部署过程无缝进行。
- en: You will learn how to utilize the **FastAPI CLI** to run your server efficiently,
    enabling **HTTPS** to secure your applications, and containerizing your FastAPI
    projects with **Docker**. Additionally, we will explore techniques for scaling
    your applications across multiple workers, packaging your applications for distribution,
    and deploying them on cloud platforms such as **Railway**. Each recipe in this
    chapter provides step-by-step instructions, practical examples, and insights into
    optimizing your deployment workflow.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您将学习如何利用 **FastAPI CLI** 高效地运行您的服务器，启用 **HTTPS** 以保护您的应用程序，以及使用 **Docker** 容器化您的
    FastAPI 项目。此外，我们将探讨跨多个工作进程扩展应用程序、打包应用程序以进行分发以及在 **Railway** 等云平台上部署的技术。本章中的每个配方都提供了逐步说明、实际示例以及优化部署工作流程的见解。
- en: By the end of this chapter, you will be proficient in deploying FastAPI applications
    using modern tools and methodologies. You’ll be able to always secure your applications
    with HTTPS, run them in Docker containers, scale them with multiple workers, and
    deploy them on the cloud. These skills are invaluable for any developer aiming
    to take their FastAPI applications from development to production.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将熟练使用现代工具和方法部署 FastAPI 应用程序。您将能够始终使用 HTTPS 保护应用程序，在 Docker 容器中运行它们，使用多个工作进程进行扩展，并在云平台上部署它们。这些技能对于任何希望将
    FastAPI 应用程序从开发推向生产的开发者来说是无价的。
- en: 'In this chapter, we’re going to cover the following recipes:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下配方：
- en: Running the server with the FastAPI CLI
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 FastAPI CLI 运行服务器
- en: Enabling HTTPS on FastAPI applications
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 FastAPI 应用程序上启用 HTTPS
- en: Running FastAPI applications in Docker containers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Docker 容器中运行 FastAPI 应用程序
- en: Running the server across multiple workers
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跨多个工作进程运行服务器
- en: Deploying your FastAPI application on the cloud
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在云上部署您的 FastAPI 应用程序
- en: Shipping FastAPI applications with Hatch
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Hatch 打包 FastAPI 应用程序
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter is for advanced users who want to learn how to deploy their FastAPI
    applications on the cloud. If you are new to FastAPI or Python, you might want
    to check out the first two chapters of the book.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章是为希望学习如何在云上部署 FastAPI 应用程序的高级用户而编写的。如果您是 FastAPI 或 Python 的新手，您可能想查看本书的前两章。
- en: 'You can find the chapter’s code on GitHub here: [https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter12](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter12).'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 GitHub 上找到本章的代码：[https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter12](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter12).
- en: To manage dependencies and isolate the project, set up a virtual environment
    in the project root folder.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为了管理依赖项并隔离项目，在项目根目录中设置虚拟环境。
- en: For the *Running FastAPI applications in Docker containers* and *Running the
    server across multiple workers* recipes, we will be using Docker. Make sure to
    install it on your machine.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 *在 Docker 容器中运行 FastAPI 应用程序* 和 *跨多个工作进程运行服务器* 的配方，我们将使用 Docker。请确保在您的机器上安装它。
- en: Running the server with the FastAPI CLI
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 FastAPI CLI 运行服务器
- en: The FastAPI `$ fastapi` command to run a FastAPI application, manage a FastAPI
    project, and do other things. This feature was added in version 0.111.0 recently.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 的 `$ fastapi` 命令用于运行 FastAPI 应用程序、管理 FastAPI 项目以及执行其他操作。这个功能最近在版本 0.111.0
    中添加。
- en: In this recipe, we’ll explore how to run a FastAPI application using the FastAPI
    CLI. This approach can streamline your development workflow and provide a more
    intuitive way to manage your server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将探讨如何使用 FastAPI CLI 运行 FastAPI 应用程序。这种方法可以简化您的开发工作流程，并提供一种更直观的方式来管理您的服务器。
- en: Getting ready
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'To run the recipe, ensure you have a minimum FastAPI module with the application
    with at least one endpoint. We will work on a new application called `Live Application`,
    so create a new project folder called `live_application` with an `app` subfolder
    containing a `main.py` module as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行配方，请确保你有一个至少包含一个端点的最小FastAPI模块的应用程序。我们将工作于一个名为`Live Application`的新应用程序，因此创建一个名为`live_application`的新项目文件夹，其中包含一个`app`子文件夹，并包含一个`main.py`模块，如下所示：
- en: '[PRE0]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Also, make sure you have a version of FastAPI higher than `0.111.0` in your
    environment by running the following from the command line:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，确保你的环境中安装的FastAPI版本高于`0.111.0`，可以通过在命令行中运行以下命令来检查：
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you already have installed it, make sure to have the latest version of `fastapi`
    in your environment. You can do it by running the following:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经安装了它，请确保你的环境中安装的是`fastapi`的最新版本。你可以通过运行以下命令来完成：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Once the installation or the upgrade is completed, we can start the recipe.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 安装或升级完成后，我们可以开始执行配方。
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'With your application set up, simply run the following from the command line:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在设置好你的应用程序后，只需从命令行运行以下命令：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: You will see detailed information printed on the terminal. Let’s check the most
    important ones.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在终端上看到打印的详细信息。让我们检查其中最重要的几个。
- en: 'The first message is like this:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条消息是这样的：
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In the `fastapi dev` command, we didn’t specify an `app.main:app` argument as
    we used to do with the `uvicorn` command. The FastAPI CLI automatically detects
    the `FastAPI` object class in the code according to a set of default paths.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在`fastapi dev`命令中，我们没有指定`app.main:app`参数，就像我们以前使用`uvicorn`命令时做的那样。FastAPI CLI会根据一组默认路径自动检测代码中的`FastAPI`对象类。
- en: 'The following messages are about the building of the server by looking at the
    packages and modules to be considered. Then, it explicitly shows the resolved
    import for the `FastAPI` object class:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下消息是关于通过查看要考虑的包和模块来构建服务器。然后，它明确显示了`FastAPI`对象类的解析导入：
- en: '[PRE5]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, you will see messages specifying the running mode with the main addresses
    similar to this one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你会看到指定运行模式的主地址类似于以下内容：
- en: '[PRE6]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This message indicates that the application is operating in development mode.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这条消息表明应用程序正在开发模式下运行。
- en: This means that it will restart the server automatically when there are code
    updates, and the server will run on the local address `127.0.0.1`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着当有代码更新时，服务器将自动重启，并且服务器将在本地地址`127.0.0.1`上运行。
- en: 'You can alternatively run the server in production mode by running the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以选择通过运行以下命令以生产模式运行服务器：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This won’t apply any reload and the server will make the application visible
    to the local network of the machine hosting the server.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会应用任何重载，服务器将使应用程序对托管服务器的本地网络可见。
- en: These are some of the basic commands that you can use to run your FastAPI application
    with different settings and options. For more advanced features and configurations,
    you can refer to the FastAPI documentation.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是一些你可以使用的基本命令，以不同的设置和选项运行你的FastAPI应用程序。对于更高级的功能和配置，你可以参考FastAPI文档。
- en: There’s more…
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The FastAPI CLI relies on the `uvicorn` command to run. Some of the arguments
    are similar. For instance, if we want to run the service on a different port number
    than `8000`, we can use the `--port` parameter, or to specify the host address,
    we can use `--host`. You can use the `--help` parameter to see the command-line
    documentation with the list of all the available parameters. For example, you
    can run the following:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI CLI依赖于`uvicorn`命令来运行。一些参数是相似的。例如，如果我们想在不同于`8000`的端口号上运行服务，我们可以使用`--port`参数，或者要指定主机地址，我们可以使用`--host`。你可以使用`--help`参数来查看带有所有可用参数的命令行文档。例如，你可以运行以下命令：
- en: '[PRE8]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'As an example, to run the application visible to the network, you can pass
    the unspecified address `0.0.0.0` to the host as follows:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要运行对网络可见的应用程序，你可以将未指定的地址`0.0.0.0`传递给主机，如下所示：
- en: '[PRE9]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'This is the equivalent of the following:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这相当于以下命令：
- en: '[PRE10]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Your application will now be visible to the hosting local network.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你的应用程序现在将可见于托管本地网络。
- en: See also
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'You can check more on the functionalities of the FastAPI CLI on the official
    documentation page:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在官方文档页面上了解更多关于FastAPI CLI的功能：
- en: '*FastAPI* *CLI*: https://fastapi.tiangolo.com/fastapi-cli/'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*FastAPI* *CLI*: https://fastapi.tiangolo.com/fastapi-cli/'
- en: Enabling HTTPS on FastAPI applications
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在FastAPI应用程序上启用HTTPS
- en: Web applications need security, and **Hypertext Transfer Protocol Secure** (**HTTPS**)
    is a basic way to secure communication between clients and servers.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序需要安全性，**超文本传输协议安全** (**HTTPS**) 是在客户端和服务器之间安全通信的基本方式。
- en: HTTPS scrambles the data sent over the network, preventing unauthorized access
    and modification.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: HTTPS 对通过网络发送的数据进行加密，防止未经授权的访问和修改。
- en: In this recipe, we will learn how to enable HTTPS on FastAPI applications for
    local testing. We’ll use `mkcert` to make a **Secure Sockets Layer/Transport Layer
    Security** (**SSL/TLS**) certificate for local development and give some advice
    for production deployment. By the end of the recipe, you’ll be able to protect
    your FastAPI application with HTTPS, improving its security and reliability.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在本配方中，我们将学习如何在 FastAPI 应用程序上启用 HTTPS 以进行本地测试。我们将使用 `mkcert` 为本地开发创建 **安全套接字层/传输层安全性**
    (**SSL/TLS**) 证书，并为生产部署提供一些建议。到配方结束时，您将能够使用 HTTPS 保护您的 FastAPI 应用程序，提高其安全性和可靠性。
- en: Getting ready
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Some background information about HTTPS and SSL/TLS certificates can help with
    this recipe. From a consumer perspective, you can find a good overview at this
    link: [https://howhttps.works/](https://howhttps.works/).'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 HTTPS 和 SSL/TLS 证书的一些背景信息可以帮助您完成此配方。从消费者角度来看，您可以在以下链接中找到良好的概述：[https://howhttps.works/](https://howhttps.works/)。
- en: We will also use an existing application as an example. You can either apply
    the recipe to your own application or use `Live Application` as a reference.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用一个现有的应用程序作为示例。您可以将配方应用于您自己的应用程序，或者使用 `Live Application` 作为参考。
- en: 'You will also need `mkcert`, so install it correctly on your machine. Installation
    depends on your operating system, and you can see the instructions here: [https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation](https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation).'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 您还需要 `mkcert`，因此请确保在您的机器上正确安装它。安装取决于您的操作系统，您可以在以下位置查看说明：[https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation](https://github.com/FiloSottile/mkcert?tab=readme-ov-file#installation)。
- en: 'After installing, run this command from your terminal to see how to use it
    and check that it works:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 安装后，从您的终端运行此命令以了解如何使用它并检查它是否正常工作：
- en: '[PRE11]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: When the installation is complete, we can start the recipe.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，我们可以开始执行配方。
- en: How to do it…
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Let’s set up our certificates through the following steps.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们按照以下步骤设置我们的证书。
- en: 'Let’s start by allowing our browser to trust certificates created locally with
    `mkcert`. Run this simple command:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先允许我们的浏览器信任使用 `mkcert` 本地创建的证书。运行以下简单命令：
- en: '[PRE12]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This command has added a local certificate in your operating system trust store
    so that your browsers will automatically accept it as a reliable source of certificates.
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令已将本地证书添加到您的操作系统信任存储中，以便您的浏览器会自动将其作为证书的可靠来源接受。
- en: 'We can then create the certificates and the private key that the server will
    use for some domain ranges by running the following:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们可以通过运行以下命令创建服务器将用于某些域名范围的证书和私钥：
- en: '[PRE13]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Warning
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: To ensure security, do not include certificates and keys in your Git history
    when you create them. Add the `*.pem` file extension to the `.``gitignore` file
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 为了确保安全，在创建证书和密钥时，不要将它们包含在您的 Git 历史记录中。将 `*.pem` 文件扩展名添加到 `.gitignore` 文件中
- en: 'We will have to give the key and the certificate to the server when it starts.
    At the time of writing, the `fastapi` command does not support the arguments to
    pass the key and the certificate to the server, so we will start the server with
    `uvicorn` by running the following:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当服务器启动时，我们必须将密钥和证书提供给服务器。在撰写本文时，`fastapi` 命令不支持将密钥和证书传递给服务器的参数，因此我们将通过运行以下命令使用
    `uvicorn` 启动服务器：
- en: '[PRE14]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This command will start the server with the certificate and the key.
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此命令将使用证书和密钥启动服务器。
- en: This is all you need to set up an HTTPS server connection.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您设置 HTTPS 服务器连接所需的所有内容。
- en: To test it, open your browser, and go to the `localhost` address.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试它，请打开您的浏览器，并转到 `localhost` 地址。
- en: You will see the lock icon on the address bar, which means that the connection
    is HTTPS.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您将在地址栏中看到锁形图标，这意味着连接是 HTTPS。
- en: However, if you try to reach the address with an HTTP connection at `http://localhost:443`,
    you will get an error response.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果您尝试通过 `http://localhost:443` 使用 HTTP 连接访问地址，您将收到错误响应。
- en: 'You can fix this by adding automatic redirection to the HTTPS of the server
    by using a dedicated middleware provided by FastAPI. Change the `main.py` file
    as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 FastAPI 提供的专用中间件将服务器的 HTTPS 自动重定向来修复此问题。按照以下方式更改 `main.py` 文件：
- en: '[PRE15]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Then, restart the server. If you try to connect to `localhost` with an HTTP
    connection, (for example, `http://localhost:443`), it will automatically redirect
    you to an HTTPS connection, `https://localhost`. However, since it does not support
    port redirection, you have to specify port `443` anyway.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，重新启动服务器。如果您尝试使用 HTTP 连接连接到 `localhost`（例如，`http://localhost:443`），它将自动将您重定向到
    HTTPS 连接，`https://localhost`。然而，由于它不支持端口重定向，您仍然需要指定端口 `443`。
- en: You have just enabled an HTTPS connection for your FastAPI application within
    the server. By enabling HTTPS for your FastAPI application, you have taken an
    important step toward enhancing web security and user experience. You can now
    enjoy the features of FastAPI with more confidence and trust.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 您已在服务器内为您的 FastAPI 应用程序启用 HTTPS 连接。通过为您的 FastAPI 应用程序启用 HTTPS，您已经迈出了增强网络安全和用户体验的重要一步。现在您可以更有信心和信任地享受
    FastAPI 的功能。
- en: There’s more…
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: We have seen how to generate TLS/SSL certificates for local testing. In a production
    environment, it will be similar with the difference that this will involve the
    **Domain Name System** (**DNS**) hosting provider.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何为本地测试生成 TLS/SSL 证书。在生产环境中，这将是类似的，区别在于这将涉及域名系统（**DNS**）托管提供商。
- en: 'Here are general guidelines on how to do it:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于如何操作的通用指南：
- en: Generate a private key and a **certificate signing request** (**CSR**) for your
    domain name. Use tools such as **OpenSSL** or **mkcert** as well. Keep the private
    key secret. The CSR has information about your domain name and organization that
    a **certificate authority** (**CA**) will verify.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为您的域名生成一个私钥和一个 **证书签名请求（CSR**）。使用 **OpenSSL** 或 **mkcert** 等工具。请保密私钥。CSR 包含证书颁发机构将验证的关于您的域名和组织的信息。
- en: Submit the CSR to a CA and get a signed certificate. A CA is a trusted entity
    that issues and validates TLS/SSL certificates. There are self-signed, free, or
    paid CAs. You may need to provide more proof of your identity and domain ownership
    depending on the CA. Some popular CAs are **Let’s Encrypt**, **DigiCert**, and
    **Comodo**.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 CSR 提交给证书颁发机构并获取已签名的证书。证书颁发机构是一个受信任的实体，负责颁发和验证 TLS/SSL 证书。有自签名、免费或付费的证书颁发机构。根据证书颁发机构的不同，您可能需要提供更多关于您身份和域名所有权的信息。一些流行的证书颁发机构包括
    **Let’s Encrypt**、**DigiCert** 和 **Comodo**。
- en: Install the certificate and the private key on your web server. The procedure
    may differ based on the server software and the operating system. You may also
    need to install intermediate certificates from the CA. Configure your web server
    to use HTTPS and redirect HTTP to HTTPS.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的 Web 服务器上安装证书和私钥。根据服务器软件和操作系统，程序可能会有所不同。您可能还需要从证书颁发机构安装中间证书。配置您的 Web 服务器以使用
    HTTPS 并将 HTTP 重定向到 HTTPS。
- en: Often, your hosting service provider may handle the TLS/SSL certificates and
    configuration for you. Some providers use tools such as **Certbot** to get and
    renew certificates from Let’s Encrypt, or they use their own CA. Check with your
    provider to see whether they offer such options and how to use them.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，您的托管服务提供商可能会为您处理 TLS/SSL 证书和配置。一些提供商使用 **Certbot** 等工具从 Let’s Encrypt 获取和更新证书，或者他们使用自己的证书颁发机构。请咨询您的提供商以了解他们是否提供此类选项以及如何使用它们。
- en: See also
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参考以下内容
- en: 'The GitHub repository at the following link shows you more possibilities of
    `mkcert`:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以下链接中的 GitHub 仓库展示了 `mkcert` 的更多可能性：
- en: '*mkcert:* [https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert)'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*mkcert:* [https://github.com/FiloSottile/mkcert](https://github.com/FiloSottile/mkcert)'
- en: 'In the FastAPI official documentation, you can have a look at HTTPS functioning
    on the page:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 FastAPI 官方文档中，您可以在以下页面上查看 HTTPS 的工作原理：
- en: '*About* *HTTPS:* [https://fastapi.tiangolo.com/deployment/https/](https://fastapi.tiangolo.com/deployment/https/)'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*关于 HTTPS:* [https://fastapi.tiangolo.com/deployment/https/](https://fastapi.tiangolo.com/deployment/https/)'
- en: 'Instructions on how to run `uvicorn` in HTTPS mode can be found at the following
    link:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下链接中可以找到如何以 HTTPS 模式运行 `uvicorn` 的说明：
- en: '*Running with* *HTTPS*: [https://www.uvicorn.org/deployment/#running-with-https](https://www.uvicorn.org/deployment/#running-with-https)'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用 HTTPS 运行*：[https://www.uvicorn.org/deployment/#running-with-https](https://www.uvicorn.org/deployment/#running-with-https)'
- en: 'You can find details on `HTTPSRedirectMiddle` on the official documentation
    page at this link:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下链接的官方文档页面上找到有关 `HTTPSRedirectMiddle` 的详细信息：
- en: '*HTTPSRedirectMiddleware:* [https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware](https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware)'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*HTTPSRedirectMiddleware:* [https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware](https://fastapi.tiangolo.com/advanced/middleware/#httpsredirectmiddleware)'
- en: Running FastAPI applications in Docker containers
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Docker 容器中运行 FastAPI 应用程序
- en: '**Docker** is a useful tool that lets developers wrap applications with their
    dependencies into a container. This method makes sure that the application operates
    reliably in different environments, avoiding the common *works on my machine*
    issue. In this recipe, we will see how to make a Dockerfile and run a FastAPI
    application inside a Docker container. By the end of this guide, you will know
    how to put your FastAPI application into a container, making it more flexible
    and simpler to deploy.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Docker** 是一个有用的工具，它允许开发者将应用程序及其依赖项打包到容器中。这种方法确保应用程序在不同的环境中可靠运行，避免了常见的“在我的机器上工作”问题。在本教程中，我们将了解如何创建
    Dockerfile 并在 Docker 容器中运行 FastAPI 应用程序。到本指南结束时，您将知道如何将 FastAPI 应用程序放入容器中，使其更加灵活且易于部署。'
- en: Getting ready
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'You will benefit from some knowledge of container technology, especially Docker,
    to follow the recipe better. But first, check that **Docker Engine** is set up
    properly on your machine. You can see how to do it at this link: [https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地遵循本教程，您需要了解一些容器技术知识，特别是 Docker。但首先，请检查您的机器上是否已正确设置 **Docker Engine**。您可以通过以下链接了解如何操作：[https://docs.docker.com/engine/install/](https://docs.docker.com/engine/install/)。
- en: If you use Windows, it is better to install **Docker Desktop**, which is a Docker
    virtual machine distribution with a built-in graphical interface.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用 Windows，则最好安装 **Docker Desktop**，这是一个带有内置图形界面的 Docker 虚拟机发行版。
- en: 'Whether you have Docker Engine or Docker Desktop, make sure the daemon is running
    by typing this command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您使用 Docker Engine 还是 Docker Desktop，请通过输入以下命令确保守护程序正在运行：
- en: '[PRE16]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If you don’t see any error about the daemon, that means that Docker is installed
    and working on the machine. The way to start the Docker daemon depends on the
    installation you choose. Look at the related documentation to see how to do it.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有看到关于守护程序的任何错误，这意味着 Docker 已安装并在机器上运行。启动 Docker 守护程序的方式取决于您选择的安装方式。查看相关文档了解如何操作。
- en: You can use the recipe for your applications or follow along with the `Live
    Application` application that we introduced in the first recipe, which we are
    using throughout the chapter.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用此教程为您的应用程序或跟随我们在第一个教程中介绍的“实时应用程序”应用程序，我们将在本章中使用它。
- en: How to do it…
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'It is not very complicated to run a simple FastAPI application in a Docker
    container. The process consists of three steps:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Docker 容器中运行简单的 FastAPI 应用程序并不复杂。该过程包括三个步骤：
- en: Create the Dockerfile.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建 Dockerfile。
- en: Build the image.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构建镜像。
- en: Generate the container.
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 生成容器。
- en: Then, you just have to run the container to have the application working.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，您只需运行容器即可使应用程序工作。
- en: Creating the Dockerfile
  id: totrans-118
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建 Dockerfile
- en: The Dockerfile contains the instructions needed to build the image from an operating
    system and the file we want to specify.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile 包含从操作系统和我们要指定的文件构建镜像所需的指令。
- en: It is good practice to create a separate Dockerfile for the development environment.
    We will name it `Dockerfile.dev` and place it under the project root folder.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为开发环境创建一个单独的 Dockerfile 是一种良好的实践。我们将将其命名为 `Dockerfile.dev` 并将其放置在项目根目录下。
- en: 'We start the file by specifying the base image, which will be as follows:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过指定以下基本镜像来开始文件：
- en: '[PRE17]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will pull an image from the Docker Hub, which already comes with Python
    3.10 integrated. Then, we create a folder called `/code` that will host our code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从 Docker Hub 拉取一个镜像，该镜像已经集成了 Python 3.10。然后，我们创建一个名为 `/code` 的文件夹，它将托管我们的代码：
- en: '[PRE18]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Next, we copy `requirements.txt` into the image and install the packages inside
    the image:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将 `requirements.txt` 复制到镜像中，并在镜像内安装这些包：
- en: '[PRE19]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `pip install` command runs with the `--no-cache-dir` parameter to avoid
    `pip` caching operations that wouldn’t be beneficial inside a container. Also,
    in a production environment, for larger applications, it is recommended to pin
    fixed versions of the packages in `requirements.txt` to avoid potential compatibility
    issues due to package upgrades.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip install` 命令使用 `--no-cache-dir` 参数运行，以避免在容器内进行不会带来益处的 `pip` 缓存操作。此外，在生产环境中，对于较大的应用程序，建议在
    `requirements.txt` 中固定包的版本，以避免由于包升级而可能出现的兼容性问题。'
- en: 'Then, we can copy the `app` folder containing the application into the image
    with the following command:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以使用以下命令将包含应用程序的 `app` 文件夹复制到镜像中：
- en: '[PRE20]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Finally, we define the server startup instruction as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们定义服务器启动指令如下：
- en: '[PRE21]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This is all we need to create our `Dockerfile.dev` file.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们需要创建`Dockerfile.dev`文件的所有内容。
- en: Building the image
  id: totrans-133
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 构建镜像
- en: 'Once we have `Dockerfile.dev`, we can build the image. We can do it by running
    the following from the command line at the project root folder level:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们有了`Dockerfile.dev`，我们就可以构建镜像。我们可以在项目根目录级别通过以下命令进行构建：
- en: '[PRE22]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Since we named our Dockerfile `Dockerfile.dev`, we should specify it in an
    argument. Once the build is finished, you can check that the image has been correctly
    built by running the following:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们命名了Dockerfile为`Dockerfile.dev`，我们应该在参数中指定它。一旦构建完成，你可以通过运行以下命令来检查镜像是否已正确构建：
- en: '[PRE23]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'You should see the details of the image on the output print like this:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该能在输出打印中看到镜像的详细信息，如下所示：
- en: '[PRE24]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: With the image built, we can proceed with creating the container creation.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像构建完成后，我们可以继续创建容器。
- en: Creating the container
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建容器
- en: 'To create the container and run it; simply run the following:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建容器并运行它，只需运行以下命令：
- en: '[PRE25]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'This will create the container and run it. We can see the container by running
    the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建容器并运行它。我们可以通过运行以下命令来查看容器：
- en: '[PRE26]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Since we didn’t specify a container name, it will automatically affect a fancy
    name. Mine, for example, is `bold_robinson`.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们没有指定容器名称，它将自动赋予一个花哨的名称。例如，我的名称是`bold_robinson`。
- en: Open the browser on `http://localhost:8000` and you will see the home page response
    of our application.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 打开浏览器到`http://localhost:8000`，你将看到我们应用程序的主页响应。
- en: This is all you need to run a FastAPI application inside a Docker container.
    Running a FastAPI application in a Docker container is a great way to use the
    advantages of both technologies. You can easily scale, update, and deploy your
    web app with minimal configuration.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是你在Docker容器内运行FastAPI应用程序所需的所有内容。在Docker容器中运行FastAPI应用程序是利用两种技术优势的绝佳方式。你可以轻松地进行扩展、更新和部署你的Web应用程序，而配置量最小。
- en: See also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The Dockerfile can be used to specify several features of the image. Check
    the list of commands in the official documentation:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: Dockerfile可以用来指定镜像的几个特性。请查看官方文档中的命令列表：
- en: '*Dockerfile* *reference*: [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/)'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Dockerfile* *参考*: [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/)'
- en: 'Also, you can have a look at the Docker CLI documentation on the following
    page:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你还可以查看以下页面上的Docker CLI文档：
- en: '*Docker:* [https://docs.docker.com/reference/cli/docker/](https://docs.docker.com/reference/cli/docker/)'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Docker:* [https://docs.docker.com/reference/cli/docker/](https://docs.docker.com/reference/cli/docker/)'
- en: 'You can have a look at the FastAPI documentation page dedicated to the integration
    with Docker at this link:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在此链接查看FastAPI与Docker集成的专用文档页面：
- en: '*FastAPI in Containers - Docker:* [https://fastapi.tiangolo.com/deployment/docker/](https://fastapi.tiangolo.com/deployment/docker/)'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*容器中的FastAPI - Docker:* [https://fastapi.tiangolo.com/deployment/docker/](https://fastapi.tiangolo.com/deployment/docker/)'
- en: Running the server across multiple workers
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在多个工作进程中运行服务器
- en: In high-traffic environments, running a FastAPI application with a single worker
    may not be sufficient to handle all incoming requests efficiently. To improve
    performance and ensure better resource use, you can run your FastAPI instance
    across multiple workers. This can be achieved using tools such as **Gunicorn**.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在高流量环境中，使用单个工作进程运行FastAPI应用程序可能不足以高效处理所有传入请求。为了提高性能并确保更好的资源使用，你可以在多个工作进程中运行你的FastAPI实例。这可以通过使用如**Gunicorn**等工具实现。
- en: In this recipe, we will explore how to run a FastAPI application with multiple
    workers using Gunicorn in a Docker container, and we will also discuss Uvicorn’s
    ability to handle multiple workers along with its limitations.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们将探讨如何使用Gunicorn在Docker容器中运行具有多个工作进程的FastAPI应用程序，我们还将讨论Uvicorn处理多个工作进程的能力及其局限性。
- en: Getting ready
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The `gunicorn` package is not Windows compatible. To ensure operating system
    operability, we will run our `Live Application` in a Docker container.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`gunicorn`包与Windows不兼容。为了确保操作系统兼容性，我们将在我们的`Live Application`中运行Docker容器。'
- en: The recipe will be based on the project created in the previous recipe, *Running
    FastAPI applications in* *Docker containers*.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个配方将基于上一个配方中创建的项目，*在Docker容器中运行FastAPI应用程序*。
- en: How to do it…
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: FastAPI with multiple workers runs multiple copies of the app on different CPU
    processes.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 使用多个工作进程的FastAPI会同时在不同的CPU进程中运行应用程序的多个副本。
- en: 'To see this better, let’s make the endpoint show the `main.py`, add these lines:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地查看，让我们让端点显示`main.py`，添加以下行：
- en: '[PRE27]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Let’s add the `gunicorn` dependency in the `requirements.txt` file as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: $ pip install gunicorn
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: $ gunicorn app.main:app --workers 4 \
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: --worker-class uvicorn.workers.UvicornWorker
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: CMD ["gunicorn",\
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '"app.main:app",\'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '"--bind", "0.0.0.0:80",\'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '"--workers", "4",\'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '"--worker-class",\'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '"uvicorn.workers.UvicornWorker",\'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: '"--log-level", "debug"]'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: $ docker build -t live-application-gunicorn \
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: -f Dockerfile.dev .
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: $ docker run -p 8000:80 -i live-application-gunicorn
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'web: fastapi run --port $PORT'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '{'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '"Hello": "World"'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: $ hatch --version
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: Hatch, version 1.11.1
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: $ hatch new "FCA Server"
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: fca-server
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: ├──src
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: │  └── fca_server
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: │      ├── __about__.py
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: │      └── __init__.py
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: ├──tests
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: │  └── __init__.py
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: ├──LICENSE.txt
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: ├──README.md
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: └──pyproject.tomt
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: $ hatch shell
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: (fca-server) path/to/fca-server $
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: $ python -c "import sys; print(sys.executable)"
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: $ hatch run python -c "import sys; print(sys.executable)"
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[project]'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: dependencies = [
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '"fastapi"'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: $ hatch run fastapi --help
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: from fastapi import APIRouter
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: app = APIRouter()
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '@app.get("/")'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'def read_root():'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: return {
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '"message":'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '"Welcome to the FastAPI Cookbook Application!"'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: from fca_server.main import router
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: $ hatch build -t sdist ../dist
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: $ python -m venv .venv
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: $ source .venv/Scripts/activate
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: $ .venv\Scripts\activate
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: $ pip install ..\dist\fca_server-0.0.1.tar.gz
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: from fastapi import FastAPI
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: from fca_server import router
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: app = FastAPI(
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: title="Import FCA Server Application"
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: )
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: app.include_router(router)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: $ fastapi run
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: $ hatch config find
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
