["```py\n    # line_1.py\n    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n    from Tkinter import *\n    root = Tk()\n    root.title('Basic Tkinter straight line')\n    cw = 800 # canvas width, in pixels\n    ch = 200 # canvas height, in pixels\n    canvas_1 = Canvas(root, width=cw, height=ch)\n    canvas_1.grid(row=0, column=1) # placement of the canvas\n    x_start = 10 # bottom left\n    y_start = 10\n    x_end = 50 # top right\n    y_end = 30\n    canvas_1.create_line(x_start, y_start, x_end,y_end)\n    root.mainloop()\n    #>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n    ```", "```py\n# dashed_line.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Dashed line')\ncw = 800 # canvas width\nch = 200 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch)\ncanvas_1.grid(row=0, column=1)\nx_start = 10\ny_start = 10\nx_end = 500\ny_end = 20\ncanvas_1.create_line(x_start, y_start, x_end,y_end, dash=(3,5), width = 3)\nroot.mainloop()#\n\n```", "```py\n#4lines.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Different line styles')\ncw = 280 # canvas width\nch = 120 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"spring \\ green\")\ncanvas_1.grid(row=0, column=1)\nx_start, y_start = 20, 20\nx_end, y_end = 180, 20\ncanvas_1.create_line(x_start, y_start, x_end,y_end,\\\ndash=(3,5), arrow=\"first\", width = 3)\nx_start, y_start = x_end, y_end\nx_end, y_end = 50, 70\ncanvas_1.create_line(x_start, y_start, x_end,y_end,\\\ndash=(9,5), width = 5, fill= \"red\")\nx_start, y_start = x_end, y_end\nx_end, y_end = 150, 70\ncanvas_1.create_line(x_start, y_start, x_end,y_end, \\\ndash=(19,5),width= 15, caps=\"round\", \\ fill= \"dark blue\")\nx_start, y_start = x_end, y_end\nx_end, y_end = 80, 100\ncanvas_1.create_line(x_start, y_start, x_end,y_end, fill=\"purple\")\n#width reverts to default= 1 in absence of explicit spec.\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n#sharp_bend.py\n#>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Sharp bend')\ncw = 300 # canvas width\nch = 200 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\nx1 = 50\ny1 = 10\nx2 = 20\ny2 = 80\nx3 = 150\ny3 = 60\ncanvas_1.create_line(x1,y1, x2,y2, x3,y3)\nroot.mainloop()\n\n```", "```py\n# vine_1.py\n#>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Curley vine ')\ncw = 180 # canvas width.\nch = 160 # canvas height.\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\n# The curly vine coordinates as measured from a paper sketch.\nvine_x = [23, 20, 11, 9, 29, 52, 56, 39, 24, 32, 53, 69, 63, 47, 35, 35, 51,\\\n82, 116, 130, 95, 67, 95, 114, 95, 78, 95, 103, 95, 85, 95, 94.5]\nvine_y = [36, 44, 39, 22, 16, 32, 56, 72, 91, 117,125, 138, 150, 151, 140, 123, 107,\\\n92, 70, 41, 5, 41, 66, 41, 24, 41, 53, 41, 33, 41, 41, 39]\n#=======================================\n# The merging of the separate x and y lists into a single sequence.\n#=======================================\nQ = [ ]\n# Reference copies of the original vine lists - keep the originals # intact\nX = vine_x[0:]\nY = vine_y[0:]\n# Name the compact, merged x & y list Q\n# Merge (alternate interleaves of x and y) into a single polygon of # points.\nfor i in range(0,len(X)):\nQ.append(X[i]) # append the x coordinate\nQ.append(Y[i]) # then the y - so they alternate and you end # with a Tkinter polygon.\ncanvas_1.create_line(Q, smooth='true')\nroot.mainloop()\n#>>>>>>>>>>>>\n\n```", "```py\nX = vine_x[0:]\nY = vine_y[0:]\n\n```", "```py\nfor i in range(0,len(X)):\nQ.append(X[i]) # append the x coordinate\nQ.append(Y[i]) # then the y\n\n```", "```py\n# rectangle.py\n#>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Basic Rectangle')\ncw = 200 # canvas width\nch =130 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=200, background=\"white\")\ncanvas_1.grid(row=0, column=1)\nx_start = 10\ny_start = 30\nx_width =70\ny_height = 90\nkula =\"darkblue\"\ncanvas_1.create_rectangle( x_start, y_start,\\\nx_start + x_width, y_start + y_height, fill=kula)\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# 3rectangles.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Overlapping rectangles')\ncw = 240 # canvas width\nch = 180 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=200, background=\"green\")\ncanvas_1.grid(row=0, column=1)\n# dark blue rectangle - painted first therefore at the bottom\nx_start = 10\ny_start = 30\nx_width =70\ny_height = 90\nkula =\"darkblue\"\ncanvas_1.create_rectangle( x_start, y_start,\\\nx_start + x_width, y_start + y_height, fill=kula)\n# dark red rectangle - second therefore in the middle\nx_start = 30\ny_start = 50\nkula =\"darkred\"\ncanvas_1.create_rectangle( x_start, y_start,\\\nx_start + x_width, y_start + y_height, fill=kula)\n# dark green rectangle - painted last therefore on top of previous # ones.\nx_start = 50\ny_start = 70\nkula =\"darkgreen\"\ncanvas_1.create_rectangle( x_start, y_start,\\\nx_start + x_width, y_start + y_height, fill=kula)\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\ncanvas_1.create_rectangle( 10, 30, 70 ,90, , fill='darkblue')\ncanvas_1.create_rectangle( 30, 50, 70 ,90, , fill='darkred')\ncanvas_1.create_rectangle( 50, 70, 70 ,90, , fill='darkgreen')\n\n```", "```py\n# 3concentric_squares.py\n#>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Concentric squares')\ncw = 200 # canvas width\nch = 400 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=200, background=\"green\")\ncanvas_1.grid(row=0, column=1)\n# dark blue\nx_center= 100\ny_center= 100\nx_width= 100\ny_height= 100\nkula= \"darkblue\"\ncanvas_1.create_rectangle( x_center - x_width/2, \\\ny_center - y_height/2,\\\nx_center + x_width/2, y_center + y_height/2, fill=kula)\n#dark red\nx_width= 80\ny_height= 80\nkula =\"darkred\"\ncanvas_1.create_rectangle( x_center - x_width/2, \\\ny_center - y_height/2,\\\nx_center + x_width/2, y_center + y_height/2, fill=kula)\n#dark green\nx_width= 60\ny_height= 60\nkula =\"darkgreen\"\ncanvas_1.create_rectangle( x_center - x_width/2, \\\ny_center - y_height/2,\\\nx_center + x_width/2, y_center + y_height/2, fill=kula)\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n#circle_1.py\n#>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('A circle')\ncw = 150 # canvas width\nch = 140 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\n# specify bottom-left and top-right as a set of four numbers named # 'xy'\nxy = 20, 20, 120, 120\ncanvas_1.create_oval(xy)\nroot.mainloop()\n\n```", "```py\n# arc_circle.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Should be a circle')\ncw = 210 # canvas width\nch = 130 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\nxy = 20, 20, 320, 320 # bounding box from x0,y0 to x1, y1\n# The Arc is drawn from start_angle, in degrees to finish_angle.\n# but if you try to complete the circle at 360 degrees it evaporates.\ncanvas_1.create_arc(xy, start=0, extent=359.999999999, fill=\"cyan\")\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# 3arc_ellipses.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('3arc ellipses')\ncw = 180 # canvas width\nch = 180 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch)\ncanvas_1.grid(row=0, column=1)\nxy_1 = 20, 80, 80, 20\nxy_2 = 20, 130, 80, 100\nxy_3 = 100, 130, 140, 20\ncanvas_1.create_arc(xy_1, start=20, extent=270, fill=\"red\")\ncanvas_1.create_arc(xy_2, start=-50, extent=290, fill=\"cyan\")\ncanvas_1.create_arc(xy_3, start=150, extent=-290, fill=\"blue\")\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# triangle_polygon.py\n#>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('triangle')\ncw = 160 # canvas width\nch = 80 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\n# point 1 point 2 point 3\ncanvas_1.create_polygon(140,30, 130,70, 10,50, fill=\"red\")\nroot.mainloop()\n\n```", "```py\n# star_polygon.py\n#>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(Polygon')\ncw = 140 # canvas width\nch = 80 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\n# blue star, anchored to an anchor point.\nx_anchor = 15\ny_anchor = 50\ncanvas_1.create_polygon(x_anchor, y_anchor,\\\nx_anchor + 20, y_anchor - 40,\\\nx_anchor + 30, y_anchor + 10,\\\nx_anchor, y_anchor - 30,\\\nx_anchor + 40, y_anchor - 20,\\\nfill=\"blue\")\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# clone_stars.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title('Re-sized and re-positioned polygon stars')\ncw = 200 # canvas width\nch = 100 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, background=\"white\")\ncanvas_1.grid(row=0, column=1)\n# blue star, anchored to an anchor point.\nx_anchor = 15\ny_anchor = 150\nsize_scaling = 1\ncanvas_1.create_polygon(x_anchor, y_anchor,\\\nx_anchor + 20 * size_scaling, y_anchor - \\ 40* size_scaling,\\\nx_anchor + 30 * size_scaling, y_anchor + \\ 10* size_scaling,\\\nx_anchor, y_anchor - 30* size_scaling,\\\nx_anchor + 40 * size_scaling, y_anchor - \\ 20* size_scaling,\\\nfill=\"green\")\nsize_scaling = 2\nx_anchor = 80\ny_anchor = 120\ncanvas_1.create_polygon(x_anchor, y_anchor,\\\nx_anchor + 20 * size_scaling, y_anchor - \\ 40* size_scaling,\\\nx_anchor + 30 * size_scaling, y_anchor + \\ 10* size_scaling,\\\nx_anchor, y_anchor - 30* size_scaling,\\\nx_anchor + 40 * size_scaling, y_anchor - \\ 20* size_scaling,\\\nstarsresizingfill=\"darkgreen\")\nsize_scaling = 3\nx_anchor = 160\ny_anchor = 110\ncanvas_1.create_polygon(x_anchor, y_anchor,\\\nx_anchor + 20 * size_scaling, y_anchor - \\ 40* size_scaling,\\\nx_anchor + 30 * size_scaling, y_anchor + \\ 10* size_scaling,\\\nx_anchor, y_anchor - 30* size_scaling,\\\nx_anchor + 40 * size_scaling, y_anchor - \\ 20* size_scaling,\\\nfill=\"lightgreen\")\nsize_scaling = 3\nx_anchor = 160\ny_anchor = 110\ncanvas_1.create_polygon(x_anchor, y_anchor,\\\nx_anchor + 20 * size_scaling, y_anchor - \\ 40* size_scaling,\\\nx_anchor + 30 * size_scaling, y_anchor + \\ 10* size_scaling,\\\nx_anchor, y_anchor - 30* size_scaling,\\\nx_anchor + 40 * size_scaling, y_anchor - \\ 20* size_scaling,\\\nfill=\"forestgreen\")\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```"]