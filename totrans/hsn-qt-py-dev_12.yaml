- en: Graphics Representation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at the next part of the creation of various graphical
    components and implement them in the GUI application. These classes are mostly
    used by the user to create graphical elements and visualize them with the help
    of the Qt library standard graphics classes. The Qt framework has basic classes
    for representing these graphics. These classes are `QGraphicsScene`, `QGraphicsView`,
    and `QGraphicsItem`. There are more than 50 classes that realize special functionalities,
    such as animation and graphical elements. The Qt library implements the model-view
    paradigm in regards to the graphics that are created in the application. The model-view
    architecture describes how we can split the view from the model and use different
    models with one view. A scene with graphical elements can be represented with
    different views. Based on this, the scene provides a place for the items, which
    can be various geometrical figures, and the view visualizes this scene. While
    Qt is a graphical library, we will not cover all classes and will describe just
    the main ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The `QObject` class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: View
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: QObject
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class is the base class of all objects that are used with Qt. As we mentioned
    in the introduction, this class is inherited by the `QWidget` class (same as `QPaintDevice`). We
    will start with this class because `QGraphicsScene` inherits this class. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: QObject functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QObject` class improves functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties of an object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.setObjectName(str)`: This sets the name specified in the parameter
    for this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.setParent(QtCore.QObject)`: This sets the parent specified in the parameter
    for this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.setProperty(str, object)`: This sets the object''s name (the first
    parameter) property to the value (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to this object''s states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.isSignalConnected(QtCore.QMetaMethod)`: This returns `True` if the
    signal specified in the parameter is connected to at least one receiver.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.isWidgetType()`: This returns `True` if this object has a widget type
    (or is a widget).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.isWindowType()`: This returns `True` if this object has a window type
    (or is a window).'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to the return of the current values for this object,
    changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.blockSignals(bool)`: If the parameter is `True`, this object will be
    blocked from emitting signals.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.children()`: This returns a list of the child objects for this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.connect(QtCore.QObject, str, QtCore.QObject, str, QtCore.Qt.ConnectionType)`:
    This creates a connection of the type (the fifth parameter) from the signal (the
    second parameter) in the sender (the first parameter) to the method (the fourth
    parameter) in the receiver (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.connectNotify(QtCore.QMetaMethod)`: This function will be called with
    the connection to the signal specified in the parameter of this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.deleteLater()`: This schedules the deletion of this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.disconnect(QtCore.QObject, str)`: This disconnects all signals of the
    object from the method (the second parameter) of the receiver (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.disconnect(str, QtCore.QObject, str)`: This disconnects the signal
    (the first parameter) from the method (the third parameter) of the receiver (the
    second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.disconnect(QtCore.QObject, str, QtCore.QObject, str)`: This disconnects
    the signal (the second parameter) in the object sender (the first parameter) from
    the method (the fourth parameter) of the receiver (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.disconnect(QtCore.QObject, QtCore.QMetaMethod, QtCore.QObject, QtCore.QMetaMethod)`:
    This disconnects the signal (the second parameter) in the object sender (the first
    parameter) from the method (the fourth parameter) of the receiver (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.disconnectNotify(QtCore.QMetaMethod)`: This function will be called
    when the object is disconnected from the signal specified in the parameter of
    this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.dumpObjectInfo()`: This dumps the signal connections of this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.dumpObjectTree()`: This dumps a tree of the children of this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.dynamicPropertyNames()`: This returns the names of all properties that
    are dynamically added to this object''s `setProperty()` function.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.findChild(type, str)`: This finds the child of the object with the
    child''s type (the first parameter) and the name (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.findChildren(type, str)`: This finds the children of the object with
    the child''s type (the first parameter) and the name (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.inherits(str)`: This returns `True` if this object is an instance of
    a class or a subclass that inherits the class specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.killTimer(int)`: This kills the timer with the ID specified in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.metaObject()`: This returns the meta-object of this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.moveToThread(QtCore.QThread)`: This changes the thread affinity for
    this object and its children to the thread specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.objectName()`: This returns the name of the object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.parent()`: This returns the parent of the `QtCore.QObject` type for
    this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.property(str)`: This returns the value of the object''s name property.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.receivers(SIGNAL)`: This returns the number of receivers connected
    to the signal specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.sender()`: This returns the sender of the `QtCore.QObject` type that
    sent the signal.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.senderSignalIndex()`: This returns the signal''s meta-method index
    that called the slot, which is a member of the class returned by the `sender()`
    function.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.signalsBlocked()`: This returns `True` if the signals are blocked for
    this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.startTimer(int, QtCore.Qt.TimerType)`: This starts the timer with an
    interval (the first parameter) and a type (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.thread()`: This returns the thread where this object is running.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.childEvent(QtCore.QChildEvent)`: This event handler receives child
    events of this object, with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.customEvent(QtCore.QEvent)`: This event handler receives custom events
    of this object, with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.event(QtCore.QEvent)`: This function receives events sent to the object
    and should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.eventFilter(QtCore.QObject, QtCore.QEvent)`: This filters events if
    the object is installed as an event filter for the object (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.installEventFilter(QtCore.QObject)`: This installs the event filter
    specified in the parameter on this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.removeEventFilter(QtCore.QObject)`: This removes the event filter specified
    in the parameter from this object.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.timerEvent(QtCore.QTimerEvent)`: This event handler receives timer
    events for the component with the event that''s passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the available signals in the `QObject` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.destroyed(QtCore.QObject)`: This signal is emitted before the object
    is destroyed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`object.objectNameChanged(str)`: This signal is emitted when the object''s
    name has been changed. The new name is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsScene
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class represents the scene for various graphical items. This is a part
    of the Graphics View architecture and provides the graphics view scene. The roles
    of the scene in the application are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Fast interface for managing items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Untransformed rendering
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events for each item in the scene
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing item states
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The declaration syntax of the scene is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: QGraphicsScene functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QGraphicsScene` class improves functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: add
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions add scene elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addEllipse(QtCore.QRectF, QtGui.QPen, QtGui.QBrush)`: This adds an ellipse using
    the geometry of a rectangle (the first parameter), with the pen (the second parameter)
    and brush (the third parameter) that''s specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addEllipse(x, y, w, h, QtGui.QPen, QtGui.QBrush)`: This adds an ellipse
    beginning at `x` on the *x* axis and `y` on the *y* axis, with `w` as the width
    and `h` as the height. The pen (the fifth parameter) and brush (the sixth parameter)
    are specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addItem(QtWidgets.QGraphicsItem)`: This adds a graphics item to the
    scene, specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addLine(QtCore.QLineF, QtGui.QPen)`: This adds a line whose geometry
    is specified in the first parameter, while the pen is specified in the second
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addLine(x1, y1, x2, y2, QtGui.QPen)`: This adds a line beginning at
    point `x1`/`y1` and ending at point `x2`/`y2`. The pen is specified by the fifth
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addPath(QtGui.QPainterPath, QtGui.QPen, QtGui.QBrush)`: This adds a
    path whose geometry is specified by the first parameter, with a pen (the second
    parameter) and brush (the third parameter) also specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addPixmap(QtGui.QPixmap)`: This adds a pixmap, specified in the parameter,
    to the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addPolygon(QtGui.QPolygonF, QtGui.QPen, QtGui.QBrush)`: This adds a
    polygon whose geometry is specified by the first parameter, with a pen (the second
    parameter) and brush (the third parameter) also specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addRect(QtCore.QRectF, QtGui.QPen, QtGui.QBrush)`: This adds a rectangle
    whose geometry is specified by the first parameter, with a pen (the second parameter)
    and brush (the third parameter) also specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addRect(x, y, w, h, QtGui.QPen, QtGui.QBrush)`: This adds a rectangle
    beginning at `x`/`y`, with a width of `w` and a height of `h`. The pen (the fifth
    parameter) and brush (the sixth parameter) are also specified.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addSimpleText(str, QtGui.QFont)`: This adds some simple text (the first
    parameter) of the `QtWidgets.QGraphicsSimpleTextItem` type to the scene with a
    font (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addText(str, QtGui.QFont)`: This adds some formatted text (the first
    parameter) of the `QtWidgets.QGraphicsTextItem` type to the scene with a font
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.addWidget(QtWidgets.QWidget, QtCore.Qt.WindowFlags)`: This adds a new
    widget of the `QtWidgets.QGraphicsProxyWidget` type to the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties to the scene:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setActivePanel(QtWidgets.QGraphicsItem)`: This sets the item, specified
    in the parameter, as active.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setActiveWindow(QtWidgets.QGraphicsWidget)`: This sets the widget, specified
    in the parameter, as active.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setBackgroundBrush(QtGui.QBrush)`: This sets the background brush, specified
    in the parameter, for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setBspTreeDepth(int)`: This sets the depth of a **Binary Space Partitioning**
    (**BSP**) index tree, specified in the parameter, in this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setFocus(QtCore.Qt.FocusReason)`: This sets the focus on the scene,
    with the focus reason passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setFocusItem(QtWidgets.QGraphicsItem, QtCore.Qt.FocusReason)`: This
    sets the focus item (the first parameter) of the scene, with the focus reason
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setFocusOnTouch(bool)`: If the parameter is `True`, items will gain
    focus when they receive a touch begin event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setFont(QtGui.QFont)`: This sets the font, specified in the parameter,
    that will be the default font of the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setForegroundBrush(QtGui.QBrush)`: This sets the foreground brush, specified
    in the parameter, for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setItemIndexMethod(QtWidgets.QGraphicsScene.ItemIndexMethod)`: This
    sets the item indexing method. The available methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsScene.BspTreeIndex`—`0`: BSP is applied (static scenes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsScene.NoIndex`—`1`: No index is applied (dynamic scenes).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scene.setMinimumRenderSize(float)`: This sets the minimum view-transformed
    size of an item that to be is drawn. This will speed up the rendering of scenes,
    with many objects rendered in a zoomed out view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setPalette(QtGui.QPalette)`: This sets the palette, specified in the
    parameter, that will be used with this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setSceneRect(QtCore.QRectF)`: This sets a bounding rectangle, specified
    in the parameter, for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setSceneRect(x, y, w, h)`: This sets a bounding rectangle beginning
    at `x`/`y`, with a width of `w` and a height of `h`, for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setSelectionArea(QtGui.QPainterPath, QtGui.QTransform)`: This sets the
    selection area to a path (the first parameter) with the applied transformation
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setSelectionArea(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode, QtGui.QTransform)`:
    This sets the selection area to a path (the first parameter) with the mode (the
    second parameter) and the applied transformation (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setSelectionArea(QtGui.QPainterPath, QtCore.Qt.ItemSelectionOperation,
    QtCore.Qt.ItemSelectionMode, QtGui.QTransform)`: This sets the selection area
    to a path (the first parameter) with the mode (the third parameter), the applied
    transformation (the fourth parameter), and the selection operation (the second
    parameter) for currently selected items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setStickyFocus(bool)`: If the parameter is `True`, the focus will remain
    unchanged, with clicks on the scene''s background or on an item that does not
    accept focus. Otherwise, the focus will be cleared.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.setStyle(QtWidgets.QStyle)`: This sets the style, specified in the parameter,
    for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: has/is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to the scene''s states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.hasFocus()`: This returns `True` if this scene has a focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.isActive()`: This returns `True` if this scene is active.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to the returns of the current values of the scene,
    changes in functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.activePanel()`: This returns the active panel of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.activeWindow()`: This returns the active window of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.advance()`: This advances the scene by one step (for all items on the
    scene).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.backgroundBrush()`: This returns the brush of the `QtGui.QBrush` type
    for the background of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.bspTreeDepth()`: This returns the depth of a BSP index tree in this
    scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.clear()`: This clears all the items from this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.clearFocus()`: This clears the focus from this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.clearSelection()`: This clears the current selection from this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.collidingItems(QtWidgets.QGraphicsItem, QtCore.Qt.ItemSelectionMode)`:
    This returns the list of items that collide with the item (the first parameter),
    with colliding detection specified in the mode (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.createItemGroup([QtWidgets.QGraphicsItem])`: This groups all the items
    specified in the parameter as a list of items in the new item group.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.destroyItemGroup(QtWidgets.QGraphicsItemGroup)`: This deletes the item
    group specified in the parameter from the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.drawBackground(QtGui.QPainter, QtCore.QRectF)`: This draws the background
    for this scene with the painter (the first parameter) and the rectangle (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.drawForeground(QtGui.QPainter, QtCore.QRectF)`: This draws the foreground
    for this scene with the painter (the first parameter) and the rectangle (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.focusItem()`: This returns the current focus item of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.focusOnTouch()`: This returns `True` if the items gain focus when they
    receive a touch begin event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.font()`: This returns the current font for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.foregroundBrush()`: This returns the brush of the `QtGui.QBrush` type
    for the foreground of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.invalidate(QtCore.QRectF, QtWidgets.QGraphicsScene.SceneLayers)`: This
    schedules a redraw of the layers (the second parameter) in the rectangle (the
    first parameter) in the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.invalidate(x, y, w, h, QtWidgets.QGraphicsScene.SceneLayers)`: This
    schedules a redraw of the layers (the fifth parameter) in a rectangle beginning
    at `x`/`y`, with a width of `w` and a height of `h`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.itemAt(QtCore.QPointF, QtGui.QTransform)`: This returns the topmost
    item at a certain point (the first parameter) with the applied transformation
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.itemAt(x, y, QtGui.QTransform)`: This returns the topmost item at the
    position specified by `x` and `y` with the applied transformation (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.itemIndexMethod()`: This returns the indexing method of the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.items(QtCore.Qt.SortOrder)`: This returns the ordered list of all items
    on the scene in the stacking order specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.items(QtCore.QRectF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the rectangle (the first
    parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.items(QtCore.QPointF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the point (the first
    parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.items(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the specified path (the
    first parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.items(QtGui.QPolygonF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the polygon (the first
    parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.items(x, y, w, h, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    fifth parameter) that is inside or that intersects with a rectangle  beginning
    at `x`/`y`, with a width of `w` and a height of `h`, sorted (the sixth parameter),
    and with the applied transformation (the seventh parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.itemsBoundingRect()`: This returns the bounding rectangle for all the
    items of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.minimumRenderSize()`: This returns the minimal view-transformed size
    of an item to be drawn.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.mouseGrabberItem()`: This returns the current mouse grabber item that
    receives all mouse events sent to the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.palette()`: This returns the default palette of the `QtGui.QPalette`
    type that is used with this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.removeItem(QtWidgets.QGraphicsItem)`: This removes the item, specified
    in the parameter, and all its children from the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.render(QtGui.QPainter, QtCore.QRectF, QtCore.QRectF, QtCore.Qt.AspectRatioMode)`:
    This renders the source rectangle (the third parameter) from the scene into a
    rectangle (the second parameter) with the painter (the first parameter) and the
    mode (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.sceneRect()`: This returns the bounding rectangle of the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.selectedItems()`: This returns all the currently selected items as a
    list.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.selectionArea()`: This returns the selection area of this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.stickyFocus()`: This returns `True` if the focus will remain unchanged
    when the user clicks on the scene''s background or items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.style()`: This returns the style of the `QtWidgets.QStyle` type that
    is used for this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.update(QtCore.QRectF)`: This schedules a redraw of the rectangle, specified
    in the parameter, in this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.update(x, y, w, h)`: This schedules a redraw of an area beginning at
    `x`/`y`, with a width of `w` and a height of `h`, on this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.views()`: This returns all the views that are displayed on this scene
    as a list of views.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.contextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)`: This event
    handler receives context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.dragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receives drag enter events specified in the parameter for the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.dragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drag leave events specified in the parameter for the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.dragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receives drag move events specified in the parameter for the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.dropEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drop events specified in the parameter for the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.event(QtCore.QEvent)`: This receives events to the scene and should
    return `True` if the events are recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the scene''s
    keyboard focus events, which are passed with the event parameter when focus is
    lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.focusInEvent(QtGui.QFocusEvent)`: This event handler receives the scene''s
    keyboard focus events, which are passed with the event parameter when focus is
    received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.helpEvent(QtWidgets.QGraphicsSceneHelpEvent)`: This event handler receives
    help events specified in the parameter for the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives
    input method events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key press
    events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives key release
    events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.mouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event
    handler receives mouse double-click events for the scene with the event passed
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.mouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse move events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.mousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse press events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.mouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse release events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.sendEvent(QtWidgets.QGraphicsItem, QtCore.QEvent)`: This sends an event
    (the second parameter) to an item (the first parameter) through event filters.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.wheelEvent(QtWidgets.QGraphicsSceneWheelEvent)`: This event handler
    receives mouse wheel events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QGraphicsScene` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.changed([QtCore.QRectF])`: This signal is emitted if the scene content
    changes, with a parameter that contains a list of rectangles.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.focusItemChanged(QtWidgets.QGraphicsItem, QtWidgets.QGraphicsItem, QtCore.Qt.FocusReason)`:
    This signal is emitted when the focus changes in the scene. The parameters include
    an item that previously had focus (the second parameter), the item that gained
    input focus (the first parameter), and the focus reason (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.sceneRectChanged(QtCore.QRectF)`: This signal is emitted when the rectangle
    of the scene changes. A new rectangle is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene.selectionChanged()`: This signal is emitted when the selection of the
    scene changes.'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class represents a view that has a widget to display the scene. This is
    a part of the Graphics View architecture and provides a graphical representation
    of the scene in the application. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: QGraphicsView functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`QGraphicsView` enhances functionality with the following functions.'
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties for the graphics view:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment
    for this scene in the graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setBackgroundBrush(QtGui.QBrush)`: This sets the background
    brush, specified in the parameter, for this scene in the graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setCacheMode(QtWidgets.QGraphicsView.CacheMode)`: This sets
    the cache mode that describes which parts of the view are cached. The available
    modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.CacheNone`: All painting is done directly on the viewport.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.CacheBackground`: The background is cached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphics_view.setDragMode(QtWidgets.QGraphicsView.DragMode)`: This sets the
    drag mode. The available modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.NoDrag`—`0`: The mouse event is ignored.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.ScrollHandDrag`—`1`: The cursor will be a pointing
    hand, and dragging the mouse will scroll the scrollbars.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.RubberBandDrag`—`2`: A rubber band will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphics_view.setForegroundBrush(QtGui.QBrush)`: This sets the foreground
    brush, specified in the parameter, for the scene in the graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setInteractive(bool)`: This sets the scene interaction that
    will be allowed in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setOptimizationFlag(QtWidgets.QGraphicsView.OptimizationFlag,
    bool)`: If the second parameter is `True`, this enables the flag specified in
    the first parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setOptimizationFlags(QtWidgets.QGraphicsView.OptimizationFlag
    | QtWidgets.QGraphicsView.OptimizationFlag)`: This sets optimization flags, specified
    in the parameter, that will be used for graphics view performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setRenderHint(QtGui.QPainter.RenderHint, bool)`: If the second
    parameter is `True`, this enables the render hint specified in the first parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setRenderHints(QtGui.QPainter.RenderHint | QtGui.QPainter.RenderHint)`:
    This sets render hints, specified in the parameter, that will be used as default
    render hints for this view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setResizeAnchor(QtWidgets.QGraphicsView.ViewportAnchor)`: This
    sets the anchor specified in the parameter that will describe how the view will
    position the scene when the view is resized. The available anchors are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.NoAnchor`—`0`: No anchor, position unchanged.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.AnchorViewCenter`—`1`: Anchor as a center of the view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.AnchorUnderMouse`—`2`: Anchor as a point under the
    mouse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`graphics_view.setRubberBandSelectionMode(QtCore.Qt.ItemSelectionMode)`: This
    sets the mode that will describe how items will be selected using rubber band
    drag.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setScene(QtWidgets.QGraphicsScene)`: This sets the current graphics
    scene, specified in the parameter, to the graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setSceneRect(QtCore.QRectF)`: This sets the area of the scene,
    specified in the parameter, that will be visualized with this graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setSceneRect(x, y, w, h)`: This sets the area of the scene beginning
    at `x`/`y`, with a width of `w` and a height of `h`, that will be visualized with
    this graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setTransform(QtGui.QTransform, bool)`: This sets the transformation
    matrix specified in the first parameter. If the second parameter is `True`, the
    matrix will be combined with the current matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setTransformationAnchor(QtWidgets.QGraphicsView.ViewportAnchor)`:
    This sets the transformation anchor specified in the parameter. This will describe
    how the graphics view will position the scene during transformations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setViewportUpdateMode(QtWidgets.QGraphicsView.ViewportUpdateMode)`:
    This sets the mode that will be used to update the viewport''s contents. The available
    parameters are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.FullViewportUpdate`—`0`: The entire viewport will
    be updated with the changes that are made to the visible part of the scene.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.MinimalViewportUpdate`—`1`: The minimal viewport region will
    be updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.SmartViewportUpdate`—`2`: The optimal viewport areas will
    be updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.NoViewportUpdate`—`3`: The viewport will not be updated with
    changes of the scene.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsView.BoundingRectViewportUpdate`—`4`: The bounding rectangle
    of all the changes in the viewport will be updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to the graphics view
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.isInteractive()`: This returns `True` if this view allows interaction
    in the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.isTransformed()`: This returns `True` if this view is transformed.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the graphics view, changes in
    functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.alignment()`: This returns the alignment of the scene in the
    graphics view widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.backgroundBrush()`: This returns the background brush of the
    `QtGui.QBrush` type used for this scene in the graphics view widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.cacheMode()`: This returns the cache mode of the `QtWidgets.QGraphicsView.CacheMode`
    type. The parts of this view are cached.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.centerOn(QtCore.QPointF)`: This scrolls the contents of the
    viewport to the scene coordinate point, specified in the parameter, that will
    be centered in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.centerOn(QtWidgets.QGraphicsItem)`: This scrolls the contents
    of the viewport to the scene item, specified in the parameter, that will be centered
    in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.centerOn(x, y)`: This scrolls the contents of the viewport to
    the scene coordinates `x` and `y`, which will be centered in the view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.dragMode()`: This returns the mode of the `QtWidgets.QGraphicsView.DragMode`
    type for dragging the mouse over this scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.drawBackground(QtGui.QPainter, QtCore.QRectF)`: This draws the
    background of this scene with the painter (the first parameter) in the coordinates
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.drawForeground(QtGui.QPainter, QtCore.QRectF)`: This draws the
    foreground of this scene with the painter (the first parameter) in the coordinates
    (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.ensureVisible(QtCore.QRectF, int, int)`: This scrolls the contents
    of the viewport to the scene rectangle (the first parameter) that will be visible,
    with an *x* margin (the second parameter) and a *y* margin (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.ensureVisible(QtWidgets.QGraphicsItem, int, int)`: This scrolls
    the contents of the viewport to the scene item (the first parameter) that will
    be visible, with an *x* margin (the second parameter) and a *y* margin (the third
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.ensureVisible(x, y, w, h, int, int)`: This scrolls the contents
    of the viewport to the scene beginning at `x`/`y`**,** with a width of `w` and
    a height of `h`, that will be visible within an *x* margin (the fifth parameter)
    and a *y* margin (the sixth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.fitInView(QtCore.QRectF, QtCore.Qt.AspectRatioMode)`: This scales
    the view matrix and scrolls the scroll bars so that the scene rectangle (the first
    parameter) fits inside the viewport, according to the aspect ratio (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.fitInView(QtWidgets.QGraphicsItem, QtCore.Qt.AspectRatioMode)`:
    This scales the view matrix and scrolls the scroll bars so that the scene''s item
    fits tightly inside the view, according to the aspect ratio (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.fitInView(x, y, w, h, QtCore.Qt.AspectRatioMode)`: This scales
    the view matrix and scrolls the scroll bars to the scene beginning at `x`/`y`**,**
    with a width of `w` and a height of `h`, so that the item fits inside the viewport
    according to the aspect ratio (the fifth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.foregroundBrush()`: This returns the foreground brush of the
    `QtGui.QBrush` type that''s used for this scene in the graphics view widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.invalidateScene(QtCore.QRectF, QtWidgets.QGraphicsScene.SceneLayers)`:
    This invalidates and schedules a redraw of layers (the second parameter) inside
    a rectangle (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.itemAt(QtCore.QPointF)`: This returns the item at the point
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.itemAt(x, y)`: This returns the item at the position specified
    by the `x` and `y` coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items()`: This returns a list of all the items in the scene
    in descending stacking order.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items(QtCore.QRect, QtCore.Qt.ItemSelectionMode)`: This returns
    all visible items, depending on the mode (the second parameter) that is inside,
    or that intersects with, the rectangle (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items(QtCore.QPoint)`: This returns all the items at the point
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode)`: This
    returns all items, depending on the mode (the second parameter) that is inside,
    or that intersects with, the specified path (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items(QtGui.QPolygon, QtCore.Qt.ItemSelectionMode)`: This returns
    all items, depending on the mode (the second parameter) that is inside, or that
    intersects with, the polygon (the first parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items(x, y)`: This returns all items at the coordinates *x*
    and *y*.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.items(x, y, w, h, QtCore.Qt.ItemSelectionMode)`: This returns
    all items, depending on the mode (the fifth parameter) that is inside, or that
    intersects with, the area beginning at `x`/`y`, with a width of `w` and a height
    of `h`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.optimizationFlags()`: This returns the flags that are used to
    tune view performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.render(QtGui.QPainter, QtCore.QRectF, QtCore.QRect, QtCore.Qt.AspectRatioMode)`:
    This renders the source rectangle (the third parameter) from the scene into the
    rectangle (the second parameter) with the painter (the first parameter) and the
    mode (the fourth parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.renderHints()`: This returns the default render hints for this
    view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.resetCachedContent()`: This resets cached content and clears
    the view cache.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.resetTransform()`: This resets the view transformation to the
    identity matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.resizeAnchor()`: This returns the anchor that will be used with
    the position of the scene when the view is resized.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.rotate(float)`: This rotates, clockwise, the current view transformation
    by the angle degree specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.rubberBandRect()`: This returns the rubber band area of the
    `QtCore.QRect` type (in viewport coordinates) if item selection was used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.rubberBandSelectionMode()`: This returns the mode that is used
    to select items with a rubber band selection rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.scale(float, float)`: This scales the view transformation by
    `x` (the first parameter) and `y` (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.scene()`: This returns the scene of the `QtWidgets.QGraphicsScene`
    type that is visualized by this graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.sceneRect()`: This returns the area of the scene of the `QtCore.QRectF`
    type that is visualized by this graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.setupViewport(QtWidgets.QWidget)`: This initializes a new viewport
    widget before it is used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.shear(float, float)`: This shears the current view transformation
    horizontally (the first parameter) and vertically (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.transform()`: This returns the current transformation matrix
    of the `QtGui.QTransform` type for this graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.transformationAnchor()`: This returns the anchor of the `QtWidgets.QGraphicsView.ViewportAnchor` type
    that is used with the transformation of this graphics view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.translate(float, float)`: This translates the view transformation
    by `x` (the first parameter) and `y` (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.updateScene([QtCore.QRectF])`: This schedules an update of the
    scene rectangles, specified in the parameter as a list of rectangles.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.updateSceneRect(QtCore.QRectF)`: This notifies the graphics
    view that the rectangle of the scene has changed, with the new scene rectangle
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.viewportTransform()`: This returns the matrix of the `QtGui.QTransform`
    type, which maps scene coordinates to viewport coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.viewportUpdateMode()`: This returns the update mode of the viewport.'
  prefs: []
  type: TYPE_NORMAL
- en: map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapFromScene(QtCore.QRectF)`: This returns the rectangle, specified
    in the parameter, to a viewport coordinate polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapFromScene(QtCore.QPointF)`: This returns the point, specified
    in the parameter, to a viewport coordinate point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapFromScene(QtGui.QPainterPath)`: This returns the scene coordinate
    painter path, specified in the parameter, to a viewport coordinate painter path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapFromScene(QtGui.QPolygonF)`: This returns the scene coordinate
    polygon, specified in the parameter, to a viewport coordinate polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapToScene(QtCore.QRectF)`: This returns a viewport coordinate
    polygon, specified in the parameter, to a scene coordinate polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapToScene(QtCore.QPointF)`: This returns a viewport coordinate
    point, specified in the parameter, mapped to scene coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapToScene(QtGui.QPainterPath)`: This returns a viewport painter
    path, specified in the parameter, to the scene coordinate painter path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mapToScene(QtGui.QPolygonF)`: This returns a viewport coordinate
    polygon, specified in the parameter, to the scene coordinate polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler
    receives context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is
    called with an event parameter when the mouse enters this scene and a drag is
    in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is
    called with an event parameter when the mouse leaves this scene and a drag is
    in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is
    called with an event parameter when certain conditions occur, such as the cursor
    entering or moving within the area, the modifier key being pressed on the keyboard
    while the scene has focus, or if a drag is in progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    an event parameter when the drag is dropped onto the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.event(QtCore.QEvent)`: This receives events to the scene and
    should return `True` if the event is recognized and processed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives
    the scene''s keyboard focus events, which are passed with an event parameter when
    focus is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.focusInEvent(QtGui.QFocusEvent)`: This event handler receives
    the scene''s keyboard focus events, which are passed with an event parameter when
    focus is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler
    receives input method events for the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives
    key press events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives
    key release events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This event handler
    receives mouse double-click events for the scene with the event passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse move events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse press events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse release events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.paintEvent(QtGui.QPaintEvent)`: This event handler receives
    paint events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.resizeEvent(QtGui.QResizeEvent)`: This event handler receives
    resize events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.showEvent(QtGui.QShowEvent)`: This event handler receives show
    events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.viewportEvent(QtCore.QEvent)`: This is the main event handler
    for the scrolling area with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.wheelEvent(QtGui.QWheelEvent)`: This event handler receives
    mouse wheel events for the scene with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signal of the `QGraphicsView` class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphics_view.rubberBandChanged(QtCore.QRect, QtCore.QPointF, QtCore.QPointF)`:
    This signal is emitted when the rubber band rectangle is changed. The viewport
    rectangle is specified in the first parameter with the drag start position (the
    second parameter) and the drag end position (the third parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsItem
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is a base class for all graphical items that can be realized with the `QGraphicsScene`
    class in the scene. With this base class, the Qt framework provides a set of standard
    graphics items, such as `QGraphicsEllipseItem`, `QGraphicsLineItem`, `QGraphicsPathItem`,
    `QGraphicsPixmapItem`, `QGraphicsPolygonItem`, `QGraphicsRectItem`, `QGraphicsSimpleTextItem`,
    and `QGraphicsTextItem`. These are commonly used to create internal graphical
    components in the application.
  prefs: []
  type: TYPE_NORMAL
- en: QGraphicsItem functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `QGraphicsItem` class enhances functionality with the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions set the parameters/properties to the graphics item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAcceptDrops(bool)`: If the parameter is `True`, drag and drop events will
    be accepted for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAcceptedMouseButtons(QtCore.Qt.MouseButtons)`: This sets the mouse buttons,
    specified in the parameter, that will be accepted for this item''s mouse events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAcceptHoverEvents(bool)`: If the parameter is `True`, hover events will
    be accepted for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setAcceptTouchEvents(bool)`: If the parameter is `True`, touch events will
    be accepted for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setActive(bool)`: If the parameter is `True`, the panel of this item will
    be activated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setBoundingRegionGranularity(float)`: This sets the item''s bounding region
    granularity (`0.0` - `1.0`), specified in the parameter. That is the ratio between
    the resolution of the device and the bounding region.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setCacheMode(QtWidgets.QGraphicsItem.CacheMode, QtCore.QSize)`: This sets
    the cache mode (the first parameter) for this item, with a size (the second parameter)
    that is optional. The available cache modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsItem.NoCache`—`0`: Caching is disabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsItem.ItemCoordinateCache`—`1`: Caching is enabled for the
    local coordinate system of the item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsItem.DeviceCoordinateCache`—`2`: Caching is enabled for
    the device coordinate system of the item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setCursor(QtGui.QCursor)`: This sets the cursor shape, specified in the parameter,
    for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setData(int, object)`: This sets the custom data of this item for the key
    (the first parameter) to a value (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setEnabled(bool)`: If the parameter is `True`, this item will be enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setFiltersChildEvents(bool)`: If the parameter is `True`, it sets this item
    to filter all events for all its children.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag, bool)`: If the second parameter
    is `True`, the item''s flag (the first parameter) will be enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setFlags(QtWidgets.QGraphicsItem.GraphicsItemFlag | QtWidgets.QGraphicsItem.GraphicsItemFlag)`:
    This sets the item''s flags that are specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setFocus(QtCore.Qt.FocusReason)`: This gives keyboard input focus to this
    item. The specified parameter will be passed into any focus event that''s generated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setFocusProxy(QtWidgets.QGraphicsItem)`: This sets the focus proxy of this
    item to the item specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setGraphicsEffect(QtWidgets.QGraphicsEffect)`: This sets the graphics effect,
    specified in the parameter, for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setGroup(QtWidgets.QGraphicsItemGroup)`: This sets this item to the group
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setHandlesChildEvents(bool)`: If the parameter is `True`, this item will handle
    all child events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setInputMethodHints(QtCore.Qt.InputMethodHints)`: This sets the input method
    hints, specified in the parameter, for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setOpacity(float)`: This sets the local opacity for this item between `0.0`
    (full transparent) and `1.0` (full opaque).'
  prefs: []
  type: TYPE_NORMAL
- en: '`setPanelModality(QtWidgets.QGraphicsItem.PanelModality)`: This sets the modality,
    specified in the parameter, for this item. The available modalities are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsItem.NonModal`—`0`: The panel is not modal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsItem.PanelModal`—`1`: The panel is modal (item).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtWidgets.QGraphicsItem.SceneModal`—`2`: The window is modal (scene).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`setParentItem(QtWidgets.QGraphicsItem)`: This sets the parent item, specified
    in the parameter, for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setPos(QtCore.QPointF)`: This sets the position of this item to the position
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setPos(x, y)`: This sets the position of this item to the position specified
    by the `x` and `y` coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setRotation(float)`: This sets the rotation for this item, in degrees, around
    the *z* axis. The item will be rotated clockwise if the value is positive, and
    counter-clockwise if it is negative.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setScale(float)`: This sets the scale factor for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setSelected(bool)`: If the parameter is `True`, this item will be selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setToolTip("Tool tip")`: This sets the tooltip for this item, specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setTransform(QtGui.QTransform, bool)`: This sets the transformation matrix
    (the first parameter) for this item. If the second parameter is `True`, the matrix
    will be combined with the current matrix.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setTransformations([QGraphicsTransform])`: This sets a list of graphics transformations
    that will be applied to this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setTransformOriginPoint(QtCore.QPointF)`: This sets the point of the transformation,
    specified in the parameter, for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setTransformOriginPoint(x, y)`: This sets the point of the transformation,
    specified by the `x` and `y` coordinates, for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setVisible(bool)`: If the parameter is `True`, it sets this item as visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setX(float)`: This sets the *x* coordinate, specified in the parameter, for
    the position of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setY(float)`: This sets the *y* coordinate, specified in the parameter, for
    the position of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`setZValue(float)`: This sets the `Z` value, specified in the parameter, of
    this item. The `Z` value is a stacking order of sibling items, where the item
    with the highest `Z` value is at the top.'
  prefs: []
  type: TYPE_NORMAL
- en: has/is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return a Boolean value (`bool`) related to the graphics items''
    states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`hasCursor()`: This returns `True` if a cursor is set for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hasFocus()`: This returns `True` if this item has keyboard input focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isActive()`: This returns `True` if this item is active.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isAncestorOf(QtWidgets.QGraphicsItem)`: This returns `True` if this item is
    an ancestor of a child specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isBlockedByModalPanel()`: This returns `True` if this item is blocked by a
    modal panel.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isClipped()`: This returns `True` if this item is clipped.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isEnabled()`: This returns `True` if this item is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isObscured(QtCore.QRectF)`: This returns `True` if the rectangle specified
    in the parameter is obscured by the opaque shape of any of colliding items above
    this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isObscured(x, y, w, h)`: This returns `True` if the area beginning at `x`/`y`,
    with a width of `w` and a height of `h`, is obscured by the opaque shape of any
    colliding items above this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isObscuredBy(QtWidgets.QGraphicsItem)`: This returns `True` if the bounding
    rectangle of this item is obscured by the opaque shape of the item specified in
    the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isPanel():` This returns `True` if this item is a panel.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isSelected()`: This returns `True` if this item is selected.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isUnderMouse()`: This returns `True` if this item is under the mouse pointer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isVisible()`: This returns `True` if this item is visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isVisibleTo(QtWidgets.QGraphicsItem)`: This returns `True` if this item is
    visible to the parent item specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isWidget()`: This returns `True` if this item is a `QGraphicsWidget` widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isWindow()`: This returns `True` if this item is a `QGraphicsWidget` window.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions return the current values of the graphics item, changes in
    functionality, and so on:'
  prefs: []
  type: TYPE_NORMAL
- en: '`acceptDrops()`: This returns `True` if the item accepts drag and drop events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`acceptedMouseButtons()`: This returns the mouse buttons of the `QtCore.Qt.MouseButtons`
    type that this item accepts for mouse events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`acceptHoverEvents()`: This returns `True` if the item accepts hover events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`acceptTouchEvents()`: This returns `True` if the item accepts touch events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`advance(int)`: This returns the phase. In the first phase, all items are called
    with phase equal to `0`. This means that items on the scene are about to advance
    by one step, and then all items are called with phase equal to `1`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`boundingRect()`: This returns the rectangle of the `QtCore.QRectF` type that
    describes the outer bounds of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`boundingRegion(QtGui.QTransform)`: This returns the bounding region for the
    item using the specified parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`boundingRegionGranularity()`: This returns the item''s bounding region''s
    granularity (should be a number between `0` and `1`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`cacheMode()`: This returns the cache mode of the `QtWidgets.QGraphicsItem.CacheMode`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`childItems()`: This returns a list with children of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`childrenBoundingRect()`: This returns the bounding rectangle of the descendants
    of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`clearFocus()`: This takes the keyboard input focus from this item and sends
    a focus out event if this item has a focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`clipPath()`: This returns the clip path of the `QtGui.QPainterPath` type for
    this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`collidesWithItem(QtWidgets.QGraphicsItem, QtCore.Qt.ItemSelectionMode)`: This
    returns `True` if this item collides with the item in the first parameter, with
    the mode (the second parameter) related to the specified item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`collidesWithPath(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode)`: This returns
    `True` if this item collides with the path (the first parameter), with the mode
    (the second parameter) related to the specified path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`collidingItems(QtCore.Qt.ItemSelectionMode)`: This returns the list of all
    items that collide with this item. The detection of the collisions is determined
    by the mode specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`commonAncestorItem(QtWidgets.QGraphicsItem)`: This returns the closest ancestor
    item for this item and for the item specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`contains(QtCore.QPointF)`: This returns `True` if this item contains the point
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursor()`: This returns the cursor shape for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`data(int)`: This returns the custom data of this item for the key specified
    in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`deviceTransform(QtGui.QTransform)`: This returns the device transformation
    matrix of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`effectiveOpacity()`: This returns the effective opacity for this item, which
    can be `0.0` (fully transparent) or `1.0` (fully opaque).'
  prefs: []
  type: TYPE_NORMAL
- en: '`filtersChildEvents()`: This returns `True` if this item filters child events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`flags()`: This returns the flags that are used for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focusItem()`: This returns item of the `QtWidgets.QGraphicsItem` type, if
    the item descendant, or child of this item, has input focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focusProxy()`: This returns focus proxy of the `QtWidgets.QGraphicsItem` type
    for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grabKeyboard()`: This grabs the keyboard input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`grabMouse()`: This grabs the mouse input.'
  prefs: []
  type: TYPE_NORMAL
- en: '`graphicsEffect()`: This returns an effect of the `QtWidgets.QGraphicsEffect`
    type if it exists for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`group()`: This returns the group of the `QtWidgets.QGraphicsItemGroup` type
    for this item if it is a member of a group.'
  prefs: []
  type: TYPE_NORMAL
- en: '`handlesChildEvents()`: This returns `True` if this item handles child events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hide()`: This function hides the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`itemChange(QtWidgets.QGraphicsItem.GraphicsItemChange, value)`: This notifies
    the custom items that some part of the state has changed. The change (the first
    parameter) of the item that is changing and the new value (the second parameter)
    are both passed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`itemTransform(QtWidgets.QGraphicsItem)`: This returns a transform of the `QtGui.QTransform`
    type that maps the coordinates from this item to the item specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveBy(float, float)`: This moves the item horizontally (the first parameter)
    and vertically (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity()`: This returns the local opacity for the item, and is between `0.0`
    (fully transparent) and `1.0` (fully opaque).'
  prefs: []
  type: TYPE_NORMAL
- en: '`opaqueArea()`: This returns the area of the `QtGui.QPainterPath` type where
    this item is opaque.'
  prefs: []
  type: TYPE_NORMAL
- en: '`paint(QtGui.QPainter, QtWidgets.QStyleOptionGraphicsItem, QtWidgets.QWidget)`:
    This paints the item''s content using the painter (the first parameter), style
    options (the second parameter), and the widget (optional third parameter) where
    the painting takes place.'
  prefs: []
  type: TYPE_NORMAL
- en: '`panel()`: This returns the panel of the `QtWidgets.QGraphicsItem` type for
    this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`panelModality()`: This returns the modality of the `QtWidgets.QGraphicsItem.PanelModality`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`parentItem()`: This returns the parent item of the `QtWidgets.QGraphicsItem`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`parentObject()`: This returns the parent object of the `QtWidgets.QGraphicsObject`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`parentWidget()`: This returns the parent widget of the `QtWidgets.QGraphicsWidget`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pos()`: This returns the position of the `QtCore.QPointF` type for this item
    in parent (or scene) coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`prepareGeometryChange()`: This prepares this item for a geometry change.'
  prefs: []
  type: TYPE_NORMAL
- en: '`resetTransform()`: This resets the transformation matrix for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rotation()`: This returns the rotation of this item, in degrees, clockwise
    around the *z* axis.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scale()`: This returns the scale factor for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scene()`: This returns the scene of the `QtWidgets.QGraphicsScene` type that
    is current for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sceneBoundingRect()`: This returns the bounding rectangle of the `QtCore.QRectF`
    type for this item in scene coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scenePos()`: This returns the position of this item in scene coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sceneTransform()`: This returns a transformation matrix of the `QtGui.QTransform`
    type for this item''s scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`scroll(float, float, QtCore.QRectF)`: This scrolls the contents of the rectangle
    (the third parameter) by the *x* (the first parameter) and *y* values (the second
    parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`shape()`: This returns the item''s shape of the `QtGui.QPainterPath` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`show()`: This shows this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`stackBefore(QtWidgets.QGraphicsItem)`: This stacks this item before the sibling
    item specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`toGraphicsObject()`: This returns the graphics item cast to a graphics object
    of the `QtWidgets.QGraphicsObject` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`toolTip()`: This returns the tooltip of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`topLevelItem()`: This returns the top-level item of the `QtWidgets.QGraphicsItem`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`topLevelWidget()`: This returns the top-level widget of the `QtWidgets.QGraphicsWidget`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transform()`: This returns the transformation matrix of the `QtGui.QTransform`
    type for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transformations()`: This returns a list of graphics transforms of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`transformOriginPoint()`: This returns the origin point of the `QtCore.QPointF`
    type for the transformation of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`type()`: This returns the item''s type as an integer value.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ungrabKeyboard()`: This releases the keyboard grab.'
  prefs: []
  type: TYPE_NORMAL
- en: '`ungrabMouse()`: This releases the mouse grab.'
  prefs: []
  type: TYPE_NORMAL
- en: '`unsetCursor()`: This unsets the cursor of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`update(QtCore.QRectF)`: This schedules a redraw of the area specified in the
    parameter in this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`update(x, y, w, h)`: This schedules a redraw of the area beginning at `x`/`y`,
    with a width of `w` and a height of `h`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`updateMicroFocus()`: This updates the micro focus of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`window()`: This returns the window of the `QtWidgets.QGraphicsWidget` type
    for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`zValue()`: This returns the z-value of this item.'
  prefs: []
  type: TYPE_NORMAL
- en: map
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to the mapping of the graphics item:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtCore.QPointF)`: This maps the point
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtGui.QPolygonF)`: This maps the polygon
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtGui.QPainterPath)`: This maps the path
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromItem(QtWidgets.QGraphicsItem, x, y)`: This maps the point at the position
    set by `x` and `y`, which is in the coordinate system of the item (the first parameter),
    to the coordinate system of this item, and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of the item (the first parameter), to the coordinate system of this item,
    and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromParent(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromParent(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromParent(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromParent(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromParent(x, y)`: This maps the point at the position by `x` and `y`,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromParent(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the item''s parent coordinate
    system, to the coordinate system of this item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromScene(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped coordinate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromScene(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromScene(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromScene(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromScene(x, y)`: This maps the point at the position by `x` and `y`, which
    is in the item''s scene coordinate system, to the coordinate system of this item,
    and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapFromScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with a
    width of `w` and a height of `h`, which is in the item''s scene coordinate system,
    to the coordinate system of this item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectFromItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the new mapped
    rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectFromItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area
    beginning at `x`/`y`, with a width of `w` and a height of `h`, which is in the
    coordinate system of the item (the first parameter), to the coordinate system
    of this item, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectFromParent(QtCore.QRectF)`: This maps the rectangle specified in the
    parameter, which is in this item''s parent coordinate system, to the coordinate
    system of this item, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectFromParent(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in this item''s parent coordinate
    system, to the coordinate system of this item, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectFromScene(QtCore.QRectF)`: This maps the rectangle specified in the
    parameter, which is in the scene coordinate system, to the coordinate system of
    this item, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectFromScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the scene coordinate system, to
    the coordinate system of this item, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectToItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the new mapped
    rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectToItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of this item, to the coordinate system of the item (the first parameter),
    and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectToParent(QtCore.QRectF)`: This maps the rectangle specified in the
    parameter, which is in the coordinate system of this item, to the parent coordinate
    system of this item, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectToParent(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the coordinate system of this
    item, to the parent coordinate system of this item, and returns the new mapped
    rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectToScene(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the coordinate system of this item, to the scene coordinate system,
    and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapRectToScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the coordinate system of this
    item, to the scene coordinate system, and returns the new mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtCore.QPointF)`: This maps the point (the
    second parameter), which is in the coordinate system of this item, to the coordinate
    system of the item (the first parameter), and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtGui.QPolygonF)`: This maps the polygon
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtGui.QPainterPath)`: This maps the path
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the mapped path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToItem(QtWidgets.QGraphicsItem, x, y)`: This maps the point at the position
    set by `x` and `y`, which is in the coordinate system of this item, to the coordinate
    system of the item (the first parameter), and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of this item, to the coordinate system of the item (the first parameter),
    and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToParent(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToParent(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToParent(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped rectangle'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToParent(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToParent(x, y)`: This maps the point at the position by `x` and `y`, which
    is in the coordinate system of this item, to the coordinate system of the parent
    of this item, and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToParent(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of this item, to the coordinate system of the parent of this item, and
    returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToScene(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToScene(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToScene(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToScene(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped path.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToScene(x, y)`: This maps the point at the position by `x` and `y`, which
    is in the coordinate system of this item, to the coordinate system of the scene,
    and returns the mapped point.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mapToScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with a width
    of `w` and a height of `h`, which is in the coordinate system of this item, to
    the coordinate system of the scene, and returns the mapped polygon.'
  prefs: []
  type: TYPE_NORMAL
- en: events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These functions are related to events, such as event handlers:'
  prefs: []
  type: TYPE_NORMAL
- en: '`contextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)`: This event handler
    receives context menu events for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drag enter events for this item for the event specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receive drag leave events for this item for the event specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receives drag move events for this item for the event specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`dropEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drop events for this item for the event specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the keyboard
    focus events that are passed with an event parameter when the focus is lost.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focusInEvent(QtGui.QFocusEvent)`: This event handler receives the keyboard
    focus events that are passed with an event parameter when the focus is received.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)`: This event handler receives
    hover enter events for this item for the event specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)`: This event handler receives
    hover leave events for this item for the event specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)`: This event handler receives
    hover move events for this item for the event specified in the parameter'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives input
    method events for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`installSceneEventFilter(QtWidgets.QGraphicsItem)`: This installs the event
    filter specified in the parameter for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key press events
    for this item with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives key release
    events for this item with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse double-click events for this item with the event passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler receives
    mouse move events for this item with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler receives
    mouse press events for this item with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse release events for this item with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeSceneEventFilter(QtWidgets.QGraphicsItem)`: This removes the event filter
    specified in the parameter for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sceneEvent(QtCore.QEvent)`: This receives events for this item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sceneEventFilter(QtWidgets.QGraphicsItem, QtCore.QEvent)`: This filters events
    for the item (the first parameter) with the filtered event (the second parameter).'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheelEvent(QtWidgets.QGraphicsSceneWheelEvent)`: This event handler receives
    mouse wheel events for this item with the event passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we provided descriptions for the most commonly used classes
    of the graphical elements that can be used with GUI applications.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will describe various graphical effects for these elements.
    We'll also cover special modules for implementing additional technologies during
    the application's development.
  prefs: []
  type: TYPE_NORMAL
