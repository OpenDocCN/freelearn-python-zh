- en: Graphics Representation
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 图形表示
- en: In this chapter, we will look at the next part of the creation of various graphical
    components and implement them in the GUI application. These classes are mostly
    used by the user to create graphical elements and visualize them with the help
    of the Qt library standard graphics classes. The Qt framework has basic classes
    for representing these graphics. These classes are `QGraphicsScene`, `QGraphicsView`,
    and `QGraphicsItem`. There are more than 50 classes that realize special functionalities,
    such as animation and graphical elements. The Qt library implements the model-view
    paradigm in regards to the graphics that are created in the application. The model-view
    architecture describes how we can split the view from the model and use different
    models with one view. A scene with graphical elements can be represented with
    different views. Based on this, the scene provides a place for the items, which
    can be various geometrical figures, and the view visualizes this scene. While
    Qt is a graphical library, we will not cover all classes and will describe just
    the main ones.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨创建各种图形组件的下一部分，并在GUI应用程序中实现它们。这些类主要被用户用于创建图形元素，并在Qt库的标准图形类帮助下可视化它们。Qt框架提供了表示这些图形的基本类。这些类是`QGraphicsScene`、`QGraphicsView`和`QGraphicsItem`。还有超过50个类实现了特殊功能，例如动画和图形元素。Qt库实现了应用程序中创建的图形的模型-视图范式。模型-视图架构描述了如何将视图从模型中分离出来，并使用一个视图与不同的模型一起使用。具有图形元素的场景可以用不同的视图来表示。基于此，场景为项目提供了一个位置，这些项目可以是各种几何图形，而视图则可视化这个场景。虽然Qt是一个图形库，但我们将不会涵盖所有类，而只描述主要的一些。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The `QObject` class
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QObject`类'
- en: Scene
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场景
- en: View
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图
- en: Items
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目
- en: QObject
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QObject
- en: 'This class is the base class of all objects that are used with Qt. As we mentioned
    in the introduction, this class is inherited by the `QWidget` class (same as `QPaintDevice`). We
    will start with this class because `QGraphicsScene` inherits this class. The declaration
    syntax of this class is as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此类是所有与Qt一起使用的对象的基类。正如我们在引言中提到的，此类由`QWidget`类（与`QPaintDevice`相同）继承。我们将从这个类开始，因为`QGraphicsScene`继承了这个类。此类的声明语法如下：
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: QObject functions
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QObject函数
- en: The `QObject` class improves functionality with the following functions.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '`QObject`类通过以下函数增强了功能。'
- en: set
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These functions set the parameters/properties of an object:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置对象的参数/属性：
- en: '`object.setObjectName(str)`: This sets the name specified in the parameter
    for this object.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.setObjectName(str)`: 为此对象设置参数中指定的名称。'
- en: '`object.setParent(QtCore.QObject)`: This sets the parent specified in the parameter
    for this object.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.setParent(QtCore.QObject)`: 为此对象设置参数中指定的父对象。'
- en: '`object.setProperty(str, object)`: This sets the object''s name (the first
    parameter) property to the value (the second parameter).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.setProperty(str, object)`: 将对象的名称（第一个参数）属性设置为值（第二个参数）。'
- en: is
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'These functions return a Boolean value (`bool`) related to this object''s states:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与该对象状态相关的布尔值（`bool`）：
- en: '`object.isSignalConnected(QtCore.QMetaMethod)`: This returns `True` if the
    signal specified in the parameter is connected to at least one receiver.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.isSignalConnected(QtCore.QMetaMethod)`: 如果在参数中指定的信号至少连接到一个接收器，则返回`True`。'
- en: '`object.isWidgetType()`: This returns `True` if this object has a widget type
    (or is a widget).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.isWidgetType()`: 如果此对象具有小部件类型（或是一个小部件），则返回`True`。'
- en: '`object.isWindowType()`: This returns `True` if this object has a window type
    (or is a window).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.isWindowType()`: 如果此对象具有窗口类型（或是一个窗口），则返回`True`。'
- en: functional
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These functions are related to the return of the current values for this object,
    changes in functionality, and so on:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与返回此对象的当前值、功能变化等相关：
- en: '`object.blockSignals(bool)`: If the parameter is `True`, this object will be
    blocked from emitting signals.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.blockSignals(bool)`: 如果参数为`True`，则此对象将阻止发出信号。'
- en: '`object.children()`: This returns a list of the child objects for this object.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.children()`: 返回此对象的子对象列表。'
- en: '`object.connect(QtCore.QObject, str, QtCore.QObject, str, QtCore.Qt.ConnectionType)`:
    This creates a connection of the type (the fifth parameter) from the signal (the
    second parameter) in the sender (the first parameter) to the method (the fourth
    parameter) in the receiver (the third parameter).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.connect(QtCore.QObject, str, QtCore.QObject, str, QtCore.Qt.ConnectionType)`:
    这从发送者（第一个参数）的信号（第二个参数）创建到接收者（第三个参数）的方法（第四个参数）的连接（第五个参数）。'
- en: '`object.connectNotify(QtCore.QMetaMethod)`: This function will be called with
    the connection to the signal specified in the parameter of this object.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.connectNotify(QtCore.QMetaMethod)`: 当对象与参数中指定的信号连接时，此函数将被调用。'
- en: '`object.deleteLater()`: This schedules the deletion of this object.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.deleteLater()`: 这安排删除此对象。'
- en: '`object.disconnect(QtCore.QObject, str)`: This disconnects all signals of the
    object from the method (the second parameter) of the receiver (the first parameter).'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.disconnect(QtCore.QObject, str)`: 这将断开对象的所有信号与接收者（第一个参数）的方法（第二个参数）的连接。'
- en: '`object.disconnect(str, QtCore.QObject, str)`: This disconnects the signal
    (the first parameter) from the method (the third parameter) of the receiver (the
    second parameter).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.disconnect(str, QtCore.QObject, str)`: 这将断开信号（第一个参数）与接收者（第二个参数）的方法（第三个参数）的连接。'
- en: '`object.disconnect(QtCore.QObject, str, QtCore.QObject, str)`: This disconnects
    the signal (the second parameter) in the object sender (the first parameter) from
    the method (the fourth parameter) of the receiver (the third parameter).'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.disconnect(QtCore.QObject, str, QtCore.QObject, str)`: 这将断开对象发送者（第一个参数）中的信号（第二个参数）与接收者（第三个参数）的方法（第四个参数）的连接。'
- en: '`object.disconnect(QtCore.QObject, QtCore.QMetaMethod, QtCore.QObject, QtCore.QMetaMethod)`:
    This disconnects the signal (the second parameter) in the object sender (the first
    parameter) from the method (the fourth parameter) of the receiver (the third parameter).'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.disconnect(QtCore.QObject, QtCore.QMetaMethod, QtCore.QObject, QtCore.QMetaMethod)`:
    这将断开对象发送者（第一个参数）中的信号（第二个参数）与接收者（第三个参数）的方法（第四个参数）的连接。'
- en: '`object.disconnectNotify(QtCore.QMetaMethod)`: This function will be called
    when the object is disconnected from the signal specified in the parameter of
    this object.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.disconnectNotify(QtCore.QMetaMethod)`: 当对象从参数中指定的信号断开连接时，此函数将被调用。'
- en: '`object.dumpObjectInfo()`: This dumps the signal connections of this object.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.dumpObjectInfo()`: 这将输出该对象的信号连接。'
- en: '`object.dumpObjectTree()`: This dumps a tree of the children of this object.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.dumpObjectTree()`: 这将输出该对象的子对象树。'
- en: '`object.dynamicPropertyNames()`: This returns the names of all properties that
    are dynamically added to this object''s `setProperty()` function.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.dynamicPropertyNames()`: 这返回所有动态添加到该对象的`setProperty()`函数的所有属性的名称。'
- en: '`object.findChild(type, str)`: This finds the child of the object with the
    child''s type (the first parameter) and the name (the second parameter).'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.findChild(type, str)`: 这将找到具有指定类型（第一个参数）和名称（第二个参数）的子对象。'
- en: '`object.findChildren(type, str)`: This finds the children of the object with
    the child''s type (the first parameter) and the name (the second parameter).'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.findChildren(type, str)`: 这将找到具有指定类型（第一个参数）和名称（第二个参数）的子对象。'
- en: '`object.inherits(str)`: This returns `True` if this object is an instance of
    a class or a subclass that inherits the class specified in the parameter.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.inherits(str)`: 如果该对象是参数中指定的类或其子类的实例，则返回`True`。'
- en: '`object.killTimer(int)`: This kills the timer with the ID specified in the
    parameter.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.killTimer(int)`: 这将杀死具有指定ID（参数）的计时器。'
- en: '`object.metaObject()`: This returns the meta-object of this object.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.metaObject()`: 这返回该对象的元对象。'
- en: '`object.moveToThread(QtCore.QThread)`: This changes the thread affinity for
    this object and its children to the thread specified in the parameter.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.moveToThread(QtCore.QThread)`: 这将此对象及其子对象的线程亲和力更改为参数中指定的线程。'
- en: '`object.objectName()`: This returns the name of the object.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.objectName()`: 这返回该对象的名字。'
- en: '`object.parent()`: This returns the parent of the `QtCore.QObject` type for
    this object.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.parent()`: 这返回该对象的`QtCore.QObject`类型的父对象。'
- en: '`object.property(str)`: This returns the value of the object''s name property.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.property(str)`: 这返回对象名称属性的价值。'
- en: '`object.receivers(SIGNAL)`: This returns the number of receivers connected
    to the signal specified in the parameter.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.receivers(SIGNAL)`: 这返回连接到参数中指定的信号的接收者数量。'
- en: '`object.sender()`: This returns the sender of the `QtCore.QObject` type that
    sent the signal.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.sender()`: 这返回发送信号的 `QtCore.QObject` 类型的发送者。'
- en: '`object.senderSignalIndex()`: This returns the signal''s meta-method index
    that called the slot, which is a member of the class returned by the `sender()`
    function.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.senderSignalIndex()`: 这返回调用槽的信号的元方法索引，该槽是 `sender()` 函数返回的类的成员。'
- en: '`object.signalsBlocked()`: This returns `True` if the signals are blocked for
    this object.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.signalsBlocked()`: 如果此对象的信号被阻止，则返回 `True`。'
- en: '`object.startTimer(int, QtCore.Qt.TimerType)`: This starts the timer with an
    interval (the first parameter) and a type (the second parameter).'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.startTimer(int, QtCore.Qt.TimerType)`: 这以间隔（第一个参数）和类型（第二个参数）启动计时器。'
- en: '`object.thread()`: This returns the thread where this object is running.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.thread()`: 这返回此对象正在运行的线程。'
- en: events
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: events
- en: 'These functions are related to events, such as event handlers:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，例如事件处理器：
- en: '`object.childEvent(QtCore.QChildEvent)`: This event handler receives child
    events of this object, with the event passed in the parameter.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.childEvent(QtCore.QChildEvent)`: 此事件处理器接收此对象的子事件，事件通过参数传入。'
- en: '`object.customEvent(QtCore.QEvent)`: This event handler receives custom events
    of this object, with the event passed in the parameter.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.customEvent(QtCore.QEvent)`: 此事件处理器接收此对象的自定义事件，事件通过参数传入。'
- en: '`object.event(QtCore.QEvent)`: This function receives events sent to the object
    and should return `True` if the event is recognized and processed.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.event(QtCore.QEvent)`: 此函数接收发送给对象的信号，如果事件被识别并处理，则应返回 `True`。'
- en: '`object.eventFilter(QtCore.QObject, QtCore.QEvent)`: This filters events if
    the object is installed as an event filter for the object (the first parameter).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.eventFilter(QtCore.QObject, QtCore.QEvent)`: 如果对象作为事件过滤器安装在此对象上，则过滤事件。'
- en: '`object.installEventFilter(QtCore.QObject)`: This installs the event filter
    specified in the parameter on this object.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.installEventFilter(QtCore.QObject)`: 这在此对象上安装参数中指定的事件过滤器。'
- en: '`object.removeEventFilter(QtCore.QObject)`: This removes the event filter specified
    in the parameter from this object.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.removeEventFilter(QtCore.QObject)`: 这将从对象中移除参数中指定的事件过滤器。'
- en: '`object.timerEvent(QtCore.QTimerEvent)`: This event handler receives timer
    events for the component with the event that''s passed in the parameter.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.timerEvent(QtCore.QTimerEvent)`: 此事件处理器接收具有传入参数的事件的组件的计时器事件。'
- en: signals
  id: totrans-61
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: signals
- en: 'The following are the available signals in the `QObject` class:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在 `QObject` 类中可用的信号：
- en: '`object.destroyed(QtCore.QObject)`: This signal is emitted before the object
    is destroyed.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.destroyed(QtCore.QObject)`: 在对象被销毁之前发出此信号。'
- en: '`object.objectNameChanged(str)`: This signal is emitted when the object''s
    name has been changed. The new name is passed in the parameter.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`object.objectNameChanged(str)`: 当对象名称已更改时发出此信号。新名称通过参数传入。'
- en: QGraphicsScene
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsScene
- en: 'This class represents the scene for various graphical items. This is a part
    of the Graphics View architecture and provides the graphics view scene. The roles
    of the scene in the application are as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此类表示各种图形项的场景。这是图形视图架构的一部分，并提供图形视图场景。场景在应用程序中的作用如下：
- en: Fast interface for managing items
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理项目的快速接口
- en: Untransformed rendering
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 未变换渲染
- en: Events for each item in the scene
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 场中每个项目的信号
- en: Managing item states
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理项目状态
- en: 'The declaration syntax of the scene is as follows:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 场景的声明语法如下：
- en: '[PRE1]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: QGraphicsScene functions
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsScene 函数
- en: The `QGraphicsScene` class improves functionality with the following functions.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsScene` 类通过以下函数提高功能。'
- en: add
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: add
- en: 'These functions add scene elements:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数添加场景元素：
- en: '`scene.addEllipse(QtCore.QRectF, QtGui.QPen, QtGui.QBrush)`: This adds an ellipse using
    the geometry of a rectangle (the first parameter), with the pen (the second parameter)
    and brush (the third parameter) that''s specified.'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addEllipse(QtCore.QRectF, QtGui.QPen, QtGui.QBrush)`: 使用矩形（第一个参数）的几何形状添加椭圆，指定笔（第二个参数）和刷（第三个参数）。'
- en: '`scene.addEllipse(x, y, w, h, QtGui.QPen, QtGui.QBrush)`: This adds an ellipse
    beginning at `x` on the *x* axis and `y` on the *y* axis, with `w` as the width
    and `h` as the height. The pen (the fifth parameter) and brush (the sixth parameter)
    are specified.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addEllipse(x, y, w, h, QtGui.QPen, QtGui.QBrush)`: 这在 *x* 轴上的 `x` 和
    *y* 轴上的 `y` 处添加一个椭圆，宽度为 `w`，高度为 `h`。笔（第五个参数）和刷（第六个参数）被指定。'
- en: '`scene.addItem(QtWidgets.QGraphicsItem)`: This adds a graphics item to the
    scene, specified in the parameter.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addItem(QtWidgets.QGraphicsItem)`: 这将在场景中添加一个由参数指定的图形项目。'
- en: '`scene.addLine(QtCore.QLineF, QtGui.QPen)`: This adds a line whose geometry
    is specified in the first parameter, while the pen is specified in the second
    parameter.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addLine(QtCore.QLineF, QtGui.QPen)`: 这将在场景中添加一条线，其几何形状由第一个参数指定，而笔由第二个参数指定。'
- en: '`scene.addLine(x1, y1, x2, y2, QtGui.QPen)`: This adds a line beginning at
    point `x1`/`y1` and ending at point `x2`/`y2`. The pen is specified by the fifth
    parameter.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addLine(x1, y1, x2, y2, QtGui.QPen)`: 这将在点`(x1, y1)`开始并结束于点`(x2, y2)`的位置添加一条线。笔由第五个参数指定。'
- en: '`scene.addPath(QtGui.QPainterPath, QtGui.QPen, QtGui.QBrush)`: This adds a
    path whose geometry is specified by the first parameter, with a pen (the second
    parameter) and brush (the third parameter) also specified.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addPath(QtGui.QPainterPath, QtGui.QPen, QtGui.QBrush)`: 这将在场景中添加一个由第一个参数指定的路径，并带有笔（第二个参数）和画刷（第三个参数）。'
- en: '`scene.addPixmap(QtGui.QPixmap)`: This adds a pixmap, specified in the parameter,
    to the scene.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addPixmap(QtGui.QPixmap)`: 这将在场景中添加一个指定的参数图样。'
- en: '`scene.addPolygon(QtGui.QPolygonF, QtGui.QPen, QtGui.QBrush)`: This adds a
    polygon whose geometry is specified by the first parameter, with a pen (the second
    parameter) and brush (the third parameter) also specified.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addPolygon(QtGui.QPolygonF, QtGui.QPen, QtGui.QBrush)`: 这将在场景中添加一个由第一个参数指定的多边形，并带有笔（第二个参数）和画刷（第三个参数）。'
- en: '`scene.addRect(QtCore.QRectF, QtGui.QPen, QtGui.QBrush)`: This adds a rectangle
    whose geometry is specified by the first parameter, with a pen (the second parameter)
    and brush (the third parameter) also specified.'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addRect(QtCore.QRectF, QtGui.QPen, QtGui.QBrush)`: 这将在场景中添加一个矩形，其几何形状由第一个参数指定，同时指定了笔（第二个参数）和画刷（第三个参数）。'
- en: '`scene.addRect(x, y, w, h, QtGui.QPen, QtGui.QBrush)`: This adds a rectangle
    beginning at `x`/`y`, with a width of `w` and a height of `h`. The pen (the fifth
    parameter) and brush (the sixth parameter) are also specified.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addRect(x, y, w, h, QtGui.QPen, QtGui.QBrush)`: 这将在`(x, y)`处开始，宽度为`w`，高度为`h`的位置添加一个矩形。笔（第五个参数）和画刷（第六个参数）也进行了指定。'
- en: '`scene.addSimpleText(str, QtGui.QFont)`: This adds some simple text (the first
    parameter) of the `QtWidgets.QGraphicsSimpleTextItem` type to the scene with a
    font (the second parameter).'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addSimpleText(str, QtGui.QFont)`: 这将在场景中添加一些简单文本（第一个参数），为`QtWidgets.QGraphicsSimpleTextItem`类型，并带有字体（第二个参数）。'
- en: '`scene.addText(str, QtGui.QFont)`: This adds some formatted text (the first
    parameter) of the `QtWidgets.QGraphicsTextItem` type to the scene with a font
    (the second parameter).'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addText(str, QtGui.QFont)`: 这将在场景中添加一些格式化文本（第一个参数），为`QtWidgets.QGraphicsTextItem`类型，并带有字体（第二个参数）。'
- en: '`scene.addWidget(QtWidgets.QWidget, QtCore.Qt.WindowFlags)`: This adds a new
    widget of the `QtWidgets.QGraphicsProxyWidget` type to the scene.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.addWidget(QtWidgets.QWidget, QtCore.Qt.WindowFlags)`: 这将在场景中添加一个`QtWidgets.QGraphicsProxyWidget`类型的新小部件。'
- en: set
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties to the scene:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将参数/属性设置到场景中：
- en: '`scene.setActivePanel(QtWidgets.QGraphicsItem)`: This sets the item, specified
    in the parameter, as active.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setActivePanel(QtWidgets.QGraphicsItem)`: 这将参数指定的项目设置为活动项目。'
- en: '`scene.setActiveWindow(QtWidgets.QGraphicsWidget)`: This sets the widget, specified
    in the parameter, as active.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setActiveWindow(QtWidgets.QGraphicsWidget)`: 这将为参数指定的窗口设置活动状态。'
- en: '`scene.setBackgroundBrush(QtGui.QBrush)`: This sets the background brush, specified
    in the parameter, for this scene.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setBackgroundBrush(QtGui.QBrush)`: 这将为场景设置参数指定的背景画刷。'
- en: '`scene.setBspTreeDepth(int)`: This sets the depth of a **Binary Space Partitioning**
    (**BSP**) index tree, specified in the parameter, in this scene.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setBspTreeDepth(int)`: 这将为场景设置参数指定的二叉空间划分（BSP）索引树的深度。'
- en: '`scene.setFocus(QtCore.Qt.FocusReason)`: This sets the focus on the scene,
    with the focus reason passed in the parameter.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setFocus(QtCore.Qt.FocusReason)`: 这将设置场景的焦点，并通过参数传递焦点原因。'
- en: '`scene.setFocusItem(QtWidgets.QGraphicsItem, QtCore.Qt.FocusReason)`: This
    sets the focus item (the first parameter) of the scene, with the focus reason
    (the second parameter).'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setFocusItem(QtWidgets.QGraphicsItem, QtCore.Qt.FocusReason)`: 这将为场景设置焦点项目（第一个参数），并带有焦点原因（第二个参数）。'
- en: '`scene.setFocusOnTouch(bool)`: If the parameter is `True`, items will gain
    focus when they receive a touch begin event.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setFocusOnTouch(bool)`: 如果参数为`True`，则在接收到触摸开始事件时，项目将获得焦点。'
- en: '`scene.setFont(QtGui.QFont)`: This sets the font, specified in the parameter,
    that will be the default font of the scene.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setFont(QtGui.QFont)`: 这将为场景设置指定的参数，作为场景的默认字体。'
- en: '`scene.setForegroundBrush(QtGui.QBrush)`: This sets the foreground brush, specified
    in the parameter, for this scene.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setForegroundBrush(QtGui.QBrush)`: 这将为场景设置指定的前景画笔。'
- en: '`scene.setItemIndexMethod(QtWidgets.QGraphicsScene.ItemIndexMethod)`: This
    sets the item indexing method. The available methods are as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setItemIndexMethod(QtWidgets.QGraphicsScene.ItemIndexMethod)`: 这将设置项目索引方法。可用方法如下：'
- en: '`QtWidgets.QGraphicsScene.BspTreeIndex`—`0`: BSP is applied (static scenes).'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsScene.BspTreeIndex`—`0`: 应用了BSP（静态场景）。'
- en: '`QtWidgets.QGraphicsScene.NoIndex`—`1`: No index is applied (dynamic scenes).'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsScene.NoIndex`—`1`: 未应用索引（动态场景）。'
- en: '`scene.setMinimumRenderSize(float)`: This sets the minimum view-transformed
    size of an item that to be is drawn. This will speed up the rendering of scenes,
    with many objects rendered in a zoomed out view.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setMinimumRenderSize(float)`: 这将为要绘制的项目的最小视图变换大小设置。这将加快场景的渲染速度，在缩放视图下渲染许多对象。'
- en: '`scene.setPalette(QtGui.QPalette)`: This sets the palette, specified in the
    parameter, that will be used with this scene.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setPalette(QtGui.QPalette)`: 这将为场景设置指定的调色板。'
- en: '`scene.setSceneRect(QtCore.QRectF)`: This sets a bounding rectangle, specified
    in the parameter, for this scene.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setSceneRect(QtCore.QRectF)`: 这将为场景设置指定的参数作为边界矩形。'
- en: '`scene.setSceneRect(x, y, w, h)`: This sets a bounding rectangle beginning
    at `x`/`y`, with a width of `w` and a height of `h`, for this scene.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setSceneRect(x, y, w, h)`: 这将为场景设置一个以`x`/`y`为起点，宽度为`w`，高度为`h`的边界矩形。'
- en: '`scene.setSelectionArea(QtGui.QPainterPath, QtGui.QTransform)`: This sets the
    selection area to a path (the first parameter) with the applied transformation
    (the second parameter).'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setSelectionArea(QtGui.QPainterPath, QtGui.QTransform)`: 这将设置选择区域为一个路径（第一个参数）以及应用了变换（第二个参数）。'
- en: '`scene.setSelectionArea(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode, QtGui.QTransform)`:
    This sets the selection area to a path (the first parameter) with the mode (the
    second parameter) and the applied transformation (the third parameter).'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setSelectionArea(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode, QtGui.QTransform)`:
    这将设置选择区域为一个路径（第一个参数），带有模式（第二个参数）和应用了变换（第三个参数）。'
- en: '`scene.setSelectionArea(QtGui.QPainterPath, QtCore.Qt.ItemSelectionOperation,
    QtCore.Qt.ItemSelectionMode, QtGui.QTransform)`: This sets the selection area
    to a path (the first parameter) with the mode (the third parameter), the applied
    transformation (the fourth parameter), and the selection operation (the second
    parameter) for currently selected items.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setSelectionArea(QtGui.QPainterPath, QtCore.Qt.ItemSelectionOperation,
    QtCore.Qt.ItemSelectionMode, QtGui.QTransform)`: 这将设置选择区域为一个路径（第一个参数），带有模式（第三个参数）、应用了变换（第四个参数）以及当前选中项的选择操作（第二个参数）。'
- en: '`scene.setStickyFocus(bool)`: If the parameter is `True`, the focus will remain
    unchanged, with clicks on the scene''s background or on an item that does not
    accept focus. Otherwise, the focus will be cleared.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setStickyFocus(bool)`: 如果参数为`True`，则焦点将保持不变，点击场景的背景或不接受焦点的项。否则，焦点将被清除。'
- en: '`scene.setStyle(QtWidgets.QStyle)`: This sets the style, specified in the parameter,
    for this scene.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.setStyle(QtWidgets.QStyle)`: 这将为场景设置指定的参数作为样式。'
- en: has/is
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has/is
- en: 'These functions return a Boolean value (`bool`) related to the scene''s states:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与场景状态相关的布尔值（`bool`）：
- en: '`scene.hasFocus()`: This returns `True` if this scene has a focus.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.hasFocus()`: 如果此场景有焦点，则返回`True`。'
- en: '`scene.isActive()`: This returns `True` if this scene is active.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.isActive()`: 如果此场景是活动的，则返回`True`。'
- en: functional
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions are related to the returns of the current values of the scene,
    changes in functionality, and so on:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与场景当前值的返回、功能变化等相关：
- en: '`scene.activePanel()`: This returns the active panel of this scene.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.activePanel()`: 这将返回此场景的活动面板。'
- en: '`scene.activeWindow()`: This returns the active window of this scene.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.activeWindow()`: 这将返回此场景的活动窗口。'
- en: '`scene.advance()`: This advances the scene by one step (for all items on the
    scene).'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.advance()`: 这将场景向前推进一步（适用于场景上的所有项目）。'
- en: '`scene.backgroundBrush()`: This returns the brush of the `QtGui.QBrush` type
    for the background of this scene.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.backgroundBrush()`: 这将返回此场景背景的`QtGui.QBrush`类型的画笔。'
- en: '`scene.bspTreeDepth()`: This returns the depth of a BSP index tree in this
    scene.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.bspTreeDepth()`: 这将返回此场景中BSP索引树的深度。'
- en: '`scene.clear()`: This clears all the items from this scene.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.clear()`: 这清除此场景中的所有项目。'
- en: '`scene.clearFocus()`: This clears the focus from this scene.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.clearFocus()`: 这清除此场景的焦点。'
- en: '`scene.clearSelection()`: This clears the current selection from this scene.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.clearSelection()`: 这清除此场景的当前选择。'
- en: '`scene.collidingItems(QtWidgets.QGraphicsItem, QtCore.Qt.ItemSelectionMode)`:
    This returns the list of items that collide with the item (the first parameter),
    with colliding detection specified in the mode (the second parameter).'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.collidingItems(QtWidgets.QGraphicsItem, QtCore.Qt.ItemSelectionMode)`:
    这返回与项目（第一个参数）碰撞的项目列表，碰撞检测由模式（第二个参数）指定。'
- en: '`scene.createItemGroup([QtWidgets.QGraphicsItem])`: This groups all the items
    specified in the parameter as a list of items in the new item group.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.createItemGroup([QtWidgets.QGraphicsItem])`: 这将参数中指定的所有项目作为一个项目列表分组到新的项目组中。'
- en: '`scene.destroyItemGroup(QtWidgets.QGraphicsItemGroup)`: This deletes the item
    group specified in the parameter from the scene.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.destroyItemGroup(QtWidgets.QGraphicsItemGroup)`: 这从场景中删除参数中指定的项目组。'
- en: '`scene.drawBackground(QtGui.QPainter, QtCore.QRectF)`: This draws the background
    for this scene with the painter (the first parameter) and the rectangle (the second
    parameter).'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.drawBackground(QtGui.QPainter, QtCore.QRectF)`: 这使用画家（第一个参数）和矩形（第二个参数）为此场景绘制背景。'
- en: '`scene.drawForeground(QtGui.QPainter, QtCore.QRectF)`: This draws the foreground
    for this scene with the painter (the first parameter) and the rectangle (the second
    parameter).'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.drawForeground(QtGui.QPainter, QtCore.QRectF)`: 这使用画家（第一个参数）和矩形（第二个参数）为此场景绘制前景。'
- en: '`scene.focusItem()`: This returns the current focus item of this scene.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.focusItem()`: 这返回此场景的当前焦点项目。'
- en: '`scene.focusOnTouch()`: This returns `True` if the items gain focus when they
    receive a touch begin event.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.focusOnTouch()`: 如果项目在接收到触摸开始事件时获得焦点，则返回 `True`。'
- en: '`scene.font()`: This returns the current font for this scene.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.font()`: 这返回此场景的当前字体。'
- en: '`scene.foregroundBrush()`: This returns the brush of the `QtGui.QBrush` type
    for the foreground of this scene.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.foregroundBrush()`: 这返回此场景前景的 `QtGui.QBrush` 类型的画笔。'
- en: '`scene.invalidate(QtCore.QRectF, QtWidgets.QGraphicsScene.SceneLayers)`: This
    schedules a redraw of the layers (the second parameter) in the rectangle (the
    first parameter) in the scene.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.invalidate(QtCore.QRectF, QtWidgets.QGraphicsScene.SceneLayers)`: 这安排在场景中矩形（第一个参数）的层（第二个参数）的重绘。'
- en: '`scene.invalidate(x, y, w, h, QtWidgets.QGraphicsScene.SceneLayers)`: This
    schedules a redraw of the layers (the fifth parameter) in a rectangle beginning
    at `x`/`y`, with a width of `w` and a height of `h`.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.invalidate(x, y, w, h, QtWidgets.QGraphicsScene.SceneLayers)`: 这安排在以
    `x`/`y` 开始的矩形中重绘层（第五个参数），宽度为 `w`，高度为 `h`。'
- en: '`scene.itemAt(QtCore.QPointF, QtGui.QTransform)`: This returns the topmost
    item at a certain point (the first parameter) with the applied transformation
    (the second parameter).'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.itemAt(QtCore.QPointF, QtGui.QTransform)`: 这返回在特定点（第一个参数）的最顶层项目，带有应用变换（第二个参数）。'
- en: '`scene.itemAt(x, y, QtGui.QTransform)`: This returns the topmost item at the
    position specified by `x` and `y` with the applied transformation (the third parameter).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.itemAt(x, y, QtGui.QTransform)`: 这返回由 `x` 和 `y` 指定的位置（带有应用变换的第三个参数）的最顶层项目。'
- en: '`scene.itemIndexMethod()`: This returns the indexing method of the item.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.itemIndexMethod()`: 这返回项目的索引方法。'
- en: '`scene.items(QtCore.Qt.SortOrder)`: This returns the ordered list of all items
    on the scene in the stacking order specified in the parameter.'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.items(QtCore.Qt.SortOrder)`: 这返回在参数中指定的堆叠顺序中所有场景项目的有序列表。'
- en: '`scene.items(QtCore.QRectF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the rectangle (the first
    parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.items(QtCore.QRectF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: 这返回根据模式（第二个参数）在矩形（第一个参数）内或与之相交的所有可见项目，排序（第三个参数），并应用变换（第四个参数）。'
- en: '`scene.items(QtCore.QPointF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the point (the first
    parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.items(QtCore.QPointF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: 此函数根据模式（第二个参数）返回所有可见项目，该模式位于或与点（第一个参数）内部或相交，排序（第三个参数），并应用了变换（第四个参数）。'
- en: '`scene.items(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the specified path (the
    first parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.items(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: 此函数根据模式（第二个参数）返回所有可见项目，该模式位于或与指定的路径（第一个参数）内部或相交，排序（第三个参数），并应用了变换（第四个参数）。'
- en: '`scene.items(QtGui.QPolygonF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    second parameter) that is inside or that intersects with the polygon (the first
    parameter), sorted (the third parameter), and with the applied transformation
    (the fourth parameter).'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.items(QtGui.QPolygonF, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: 此函数根据模式（第二个参数）返回所有可见项目，该模式位于或与多边形（第一个参数）内部或相交，排序（第三个参数），并应用了变换（第四个参数）。'
- en: '`scene.items(x, y, w, h, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: This returns all visible items depending on the mode (the
    fifth parameter) that is inside or that intersects with a rectangle  beginning
    at `x`/`y`, with a width of `w` and a height of `h`, sorted (the sixth parameter),
    and with the applied transformation (the seventh parameter).'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.items(x, y, w, h, QtCore.Qt.ItemSelectionMode, QtCore.Qt.SortOrder,
    QtGui.QTransform)`: 此函数根据模式（第五个参数）返回所有可见项目，该模式位于或与以`x`/`y`为起始点、宽度为`w`、高度为`h`的矩形内部或相交，排序（第六个参数），并应用了变换（第七个参数）。'
- en: '`scene.itemsBoundingRect()`: This returns the bounding rectangle for all the
    items of this scene.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.itemsBoundingRect()`: 此函数返回场景中所有项目的边界矩形。'
- en: '`scene.minimumRenderSize()`: This returns the minimal view-transformed size
    of an item to be drawn.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.minimumRenderSize()`: 此函数返回要绘制的项目的最小视图变换大小。'
- en: '`scene.mouseGrabberItem()`: This returns the current mouse grabber item that
    receives all mouse events sent to the scene.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.mouseGrabberItem()`: 此函数返回当前鼠标抓取项，该项接收发送到场景的所有鼠标事件。'
- en: '`scene.palette()`: This returns the default palette of the `QtGui.QPalette`
    type that is used with this scene.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.palette()`: 此函数返回与场景一起使用的`QtGui.QPalette`类型的默认调色板。'
- en: '`scene.removeItem(QtWidgets.QGraphicsItem)`: This removes the item, specified
    in the parameter, and all its children from the scene.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.removeItem(QtWidgets.QGraphicsItem)`: 此函数移除由参数指定的项目及其所有子项。'
- en: '`scene.render(QtGui.QPainter, QtCore.QRectF, QtCore.QRectF, QtCore.Qt.AspectRatioMode)`:
    This renders the source rectangle (the third parameter) from the scene into a
    rectangle (the second parameter) with the painter (the first parameter) and the
    mode (the fourth parameter).'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.render(QtGui.QPainter, QtCore.QRectF, QtCore.QRectF, QtCore.Qt.AspectRatioMode)`:
    此函数将场景中的源矩形（第三个参数）渲染到由画家（第一个参数）和模式（第四个参数）指定的矩形中。'
- en: '`scene.sceneRect()`: This returns the bounding rectangle of the scene.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.sceneRect()`: 此函数返回场景的边界矩形。'
- en: '`scene.selectedItems()`: This returns all the currently selected items as a
    list.'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.selectedItems()`: 此函数返回当前选定的项目列表。'
- en: '`scene.selectionArea()`: This returns the selection area of this scene.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.selectionArea()`: 此函数返回此场景的选择区域。'
- en: '`scene.stickyFocus()`: This returns `True` if the focus will remain unchanged
    when the user clicks on the scene''s background or items.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.stickyFocus()`: 当用户点击场景的背景或项目时，此函数返回`True`，表示焦点将保持不变。'
- en: '`scene.style()`: This returns the style of the `QtWidgets.QStyle` type that
    is used for this scene.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.style()`: 此函数返回用于此场景的`QtWidgets.QStyle`类型的样式。'
- en: '`scene.update(QtCore.QRectF)`: This schedules a redraw of the rectangle, specified
    in the parameter, in this scene.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.update(QtCore.QRectF)`: 此函数安排在场景中重绘由参数指定的矩形。'
- en: '`scene.update(x, y, w, h)`: This schedules a redraw of an area beginning at
    `x`/`y`, with a width of `w` and a height of `h`, on this scene.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.update(x, y, w, h)`: 此函数安排在场景上重绘以`x`/`y`为起始点、宽度为`w`、高度为`h`的区域。'
- en: '`scene.views()`: This returns all the views that are displayed on this scene
    as a list of views.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.views()`: 这返回显示在此场景上的所有视图，作为一个视图列表。'
- en: events
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These functions are related to events, such as event handlers:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，例如事件处理程序：
- en: '`scene.contextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)`: This event
    handler receives context menu events.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.contextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)`: 此事件处理程序接收上下文菜单事件。'
- en: '`scene.dragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receives drag enter events specified in the parameter for the scene.'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.dragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理程序接收场景参数中指定的拖动进入事件。'
- en: '`scene.dragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drag leave events specified in the parameter for the scene.'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.dragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理程序接收场景参数中指定的拖动离开事件。'
- en: '`scene.dragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receives drag move events specified in the parameter for the scene.'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.dragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理程序接收场景参数中指定的拖动移动事件。'
- en: '`scene.dropEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drop events specified in the parameter for the scene.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.dropEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理程序接收场景参数中指定的放下事件。'
- en: '`scene.event(QtCore.QEvent)`: This receives events to the scene and should
    return `True` if the events are recognized and processed.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.event(QtCore.QEvent)`: 这接收场景的事件，并且如果事件被识别和处理，应返回 `True`。'
- en: '`scene.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the scene''s
    keyboard focus events, which are passed with the event parameter when focus is
    lost.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.focusOutEvent(QtGui.QFocusEvent)`: 此事件处理程序接收场景的键盘焦点事件，当失去焦点时，这些事件通过事件参数传递。'
- en: '`scene.focusInEvent(QtGui.QFocusEvent)`: This event handler receives the scene''s
    keyboard focus events, which are passed with the event parameter when focus is
    received.'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.focusInEvent(QtGui.QFocusEvent)`: 此事件处理程序接收场景的键盘焦点事件，当获得焦点时，这些事件通过事件参数传递。'
- en: '`scene.helpEvent(QtWidgets.QGraphicsSceneHelpEvent)`: This event handler receives
    help events specified in the parameter for the scene.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.helpEvent(QtWidgets.QGraphicsSceneHelpEvent)`: 此事件处理程序接收场景参数中指定的帮助事件。'
- en: '`scene.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives
    input method events.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.inputMethodEvent(QtGui.QInputMethodEvent)`: 此事件处理程序接收输入法事件。'
- en: '`scene.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key press
    events for the scene with the event passed in the parameter.'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.keyPressEvent(QtGui.QKeyEvent)`: 此事件处理程序接收场景的按键按下事件，事件通过参数传递。'
- en: '`scene.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives key release
    events for the scene with the event passed in the parameter.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.keyReleaseEvent(QtGui.QKeyEvent)`: 此事件处理程序接收场景的按键释放事件，事件通过参数传递。'
- en: '`scene.mouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event
    handler receives mouse double-click events for the scene with the event passed
    in the parameter.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.mouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理程序接收场景的鼠标双击事件，事件通过参数传递。'
- en: '`scene.mouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse move events for the scene with the event passed in the parameter.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.mouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理程序接收场景的鼠标移动事件，事件通过参数传递。'
- en: '`scene.mousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse press events for the scene with the event passed in the parameter.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.mousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理程序接收场景的鼠标按下事件，事件通过参数传递。'
- en: '`scene.mouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse release events for the scene with the event passed in the parameter.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.mouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理程序接收场景的鼠标释放事件，事件通过参数传递。'
- en: '`scene.sendEvent(QtWidgets.QGraphicsItem, QtCore.QEvent)`: This sends an event
    (the second parameter) to an item (the first parameter) through event filters.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.sendEvent(QtWidgets.QGraphicsItem, QtCore.QEvent)`: 这通过事件过滤器将事件（第二个参数）发送到项目（第一个参数）。'
- en: '`scene.wheelEvent(QtWidgets.QGraphicsSceneWheelEvent)`: This event handler
    receives mouse wheel events for the scene with the event passed in the parameter.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.wheelEvent(QtWidgets.QGraphicsSceneWheelEvent)`: 此事件处理程序接收场景的鼠标滚轮事件，事件通过参数传递。'
- en: signals
  id: totrans-181
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QGraphicsScene` class are as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsScene` 类的可用的信号如下：'
- en: '`scene.changed([QtCore.QRectF])`: This signal is emitted if the scene content
    changes, with a parameter that contains a list of rectangles.'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.changed([QtCore.QRectF])`: 如果场景内容发生变化，会发出此信号，参数包含一个矩形列表。'
- en: '`scene.focusItemChanged(QtWidgets.QGraphicsItem, QtWidgets.QGraphicsItem, QtCore.Qt.FocusReason)`:
    This signal is emitted when the focus changes in the scene. The parameters include
    an item that previously had focus (the second parameter), the item that gained
    input focus (the first parameter), and the focus reason (the third parameter).'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.focusItemChanged(QtWidgets.QGraphicsItem, QtWidgets.QGraphicsItem, QtCore.Qt.FocusReason)`:
    当场景中的焦点发生变化时，会发出此信号。参数包括一个之前有焦点的项目（第二个参数）、获得输入焦点的项目（第一个参数）和焦点原因（第三个参数）。'
- en: '`scene.sceneRectChanged(QtCore.QRectF)`: This signal is emitted when the rectangle
    of the scene changes. A new rectangle is passed in the parameter.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.sceneRectChanged(QtCore.QRectF)`: 当场景的矩形发生变化时，会发出此信号。新矩形通过参数传递。'
- en: '`scene.selectionChanged()`: This signal is emitted when the selection of the
    scene changes.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene.selectionChanged()`: 当场景的选择发生变化时，会发出此信号。'
- en: QGraphicsView
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsView
- en: 'This class represents a view that has a widget to display the scene. This is
    a part of the Graphics View architecture and provides a graphical representation
    of the scene in the application. The declaration syntax of this class is as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 此类表示一个具有显示场景小部件的视图。这是图形视图架构的一部分，并为应用程序中的场景提供图形表示。此类的声明语法如下：
- en: '[PRE2]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: QGraphicsView functions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsView 函数
- en: '`QGraphicsView` enhances functionality with the following functions.'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsView` 通过以下函数增强功能。'
- en: set
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties for the graphics view:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数设置图形视图的参数/属性：
- en: '`graphics_view.setAlignment(QtCore.Qt.Alignment)`: This sets the alignment
    for this scene in the graphics view.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setAlignment(QtCore.Qt.Alignment)`: 这将设置图形视图中的场景对齐方式。'
- en: '`graphics_view.setBackgroundBrush(QtGui.QBrush)`: This sets the background
    brush, specified in the parameter, for this scene in the graphics view.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setBackgroundBrush(QtGui.QBrush)`: 这将为图形视图中的场景设置指定的背景画刷。'
- en: '`graphics_view.setCacheMode(QtWidgets.QGraphicsView.CacheMode)`: This sets
    the cache mode that describes which parts of the view are cached. The available
    modes are as follows:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setCacheMode(QtWidgets.QGraphicsView.CacheMode)`: 这将设置描述视图哪些部分被缓存的缓存模式。可用的模式如下：'
- en: '`QtWidgets.QGraphicsView.CacheNone`: All painting is done directly on the viewport.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.CacheNone`: 所有绘图都直接在视口中完成。'
- en: '`QtWidgets.QGraphicsView.CacheBackground`: The background is cached.'
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.CacheBackground`: 背景被缓存。'
- en: '`graphics_view.setDragMode(QtWidgets.QGraphicsView.DragMode)`: This sets the
    drag mode. The available modes are as follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setDragMode(QtWidgets.QGraphicsView.DragMode)`: 这将设置拖动模式。可用的模式如下：'
- en: '`QtWidgets.QGraphicsView.NoDrag`—`0`: The mouse event is ignored.'
  id: totrans-200
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.NoDrag`—`0`: 鼠标事件将被忽略。'
- en: '`QtWidgets.QGraphicsView.ScrollHandDrag`—`1`: The cursor will be a pointing
    hand, and dragging the mouse will scroll the scrollbars.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.ScrollHandDrag`—`1`: 光标将变为指向手，拖动鼠标将滚动滚动条。'
- en: '`QtWidgets.QGraphicsView.RubberBandDrag`—`2`: A rubber band will be used.'
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.RubberBandDrag`—`2`: 将使用橡皮筋。'
- en: '`graphics_view.setForegroundBrush(QtGui.QBrush)`: This sets the foreground
    brush, specified in the parameter, for the scene in the graphics view.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setForegroundBrush(QtGui.QBrush)`: 这将为图形视图中的场景设置指定的前景画刷。'
- en: '`graphics_view.setInteractive(bool)`: This sets the scene interaction that
    will be allowed in the view.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setInteractive(bool)`: 这将设置在视图中允许的场景交互。'
- en: '`graphics_view.setOptimizationFlag(QtWidgets.QGraphicsView.OptimizationFlag,
    bool)`: If the second parameter is `True`, this enables the flag specified in
    the first parameter.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setOptimizationFlag(QtWidgets.QGraphicsView.OptimizationFlag,
    bool)`: 如果第二个参数是 `True`，则启用第一个参数指定的标志。'
- en: '`graphics_view.setOptimizationFlags(QtWidgets.QGraphicsView.OptimizationFlag
    | QtWidgets.QGraphicsView.OptimizationFlag)`: This sets optimization flags, specified
    in the parameter, that will be used for graphics view performance.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setOptimizationFlags(QtWidgets.QGraphicsView.OptimizationFlag
    | QtWidgets.QGraphicsView.OptimizationFlag)`: 这将设置用于图形视图性能的优化标志，标志由参数指定。'
- en: '`graphics_view.setRenderHint(QtGui.QPainter.RenderHint, bool)`: If the second
    parameter is `True`, this enables the render hint specified in the first parameter.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setRenderHint(QtGui.QPainter.RenderHint, bool)`: 如果第二个参数是 `True`，则启用第一个参数指定的渲染提示。'
- en: '`graphics_view.setRenderHints(QtGui.QPainter.RenderHint | QtGui.QPainter.RenderHint)`:
    This sets render hints, specified in the parameter, that will be used as default
    render hints for this view.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setRenderHints(QtGui.QPainter.RenderHint | QtGui.QPainter.RenderHint)`:
    这将设置参数中指定的渲染提示，这些提示将用作此视图的默认渲染提示。'
- en: '`graphics_view.setResizeAnchor(QtWidgets.QGraphicsView.ViewportAnchor)`: This
    sets the anchor specified in the parameter that will describe how the view will
    position the scene when the view is resized. The available anchors are as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setResizeAnchor(QtWidgets.QGraphicsView.ViewportAnchor)`: 这将设置参数中指定的锚点，该锚点将描述视图在调整大小时如何定位场景。可用的锚点如下：'
- en: '`QtWidgets.QGraphicsView.NoAnchor`—`0`: No anchor, position unchanged.'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.NoAnchor`—`0`: 无锚点，位置不变。'
- en: '`QtWidgets.QGraphicsView.AnchorViewCenter`—`1`: Anchor as a center of the view.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.AnchorViewCenter`—`1`: 将锚点设置为视图的中心。'
- en: '`QtWidgets.QGraphicsView.AnchorUnderMouse`—`2`: Anchor as a point under the
    mouse.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.AnchorUnderMouse`—`2`: 将锚点设置为鼠标下方的点。'
- en: '`graphics_view.setRubberBandSelectionMode(QtCore.Qt.ItemSelectionMode)`: This
    sets the mode that will describe how items will be selected using rubber band
    drag.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setRubberBandSelectionMode(QtCore.Qt.ItemSelectionMode)`: 这将设置描述如何使用橡皮筋拖动选择项的模式。'
- en: '`graphics_view.setScene(QtWidgets.QGraphicsScene)`: This sets the current graphics
    scene, specified in the parameter, to the graphics view.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setScene(QtWidgets.QGraphicsScene)`: 这将参数中指定的当前图形场景设置为图形视图。'
- en: '`graphics_view.setSceneRect(QtCore.QRectF)`: This sets the area of the scene,
    specified in the parameter, that will be visualized with this graphics view.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setSceneRect(QtCore.QRectF)`: 这将设置参数中指定的场景区域，该区域将使用此图形视图进行可视化。'
- en: '`graphics_view.setSceneRect(x, y, w, h)`: This sets the area of the scene beginning
    at `x`/`y`, with a width of `w` and a height of `h`, that will be visualized with
    this graphics view.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setSceneRect(x, y, w, h)`: 这将设置从`x`/`y`开始的场景区域，宽度为`w`，高度为`h`，该区域将使用此图形视图进行可视化。'
- en: '`graphics_view.setTransform(QtGui.QTransform, bool)`: This sets the transformation
    matrix specified in the first parameter. If the second parameter is `True`, the
    matrix will be combined with the current matrix.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setTransform(QtGui.QTransform, bool)`: 这将设置第一个参数中指定的变换矩阵。如果第二个参数为`True`，则矩阵将与当前矩阵合并。'
- en: '`graphics_view.setTransformationAnchor(QtWidgets.QGraphicsView.ViewportAnchor)`:
    This sets the transformation anchor specified in the parameter. This will describe
    how the graphics view will position the scene during transformations.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setTransformationAnchor(QtWidgets.QGraphicsView.ViewportAnchor)`:
    这将设置参数中指定的变换锚点。这将描述图形视图在变换期间如何定位场景。'
- en: '`graphics_view.setViewportUpdateMode(QtWidgets.QGraphicsView.ViewportUpdateMode)`:
    This sets the mode that will be used to update the viewport''s contents. The available
    parameters are as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setViewportUpdateMode(QtWidgets.QGraphicsView.ViewportUpdateMode)`:
    这将设置用于更新视口内容的模式。可用的参数如下：'
- en: '`QtWidgets.QGraphicsView.FullViewportUpdate`—`0`: The entire viewport will
    be updated with the changes that are made to the visible part of the scene.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.FullViewportUpdate`—`0`: 将更新整个视口，以反映对场景可见部分所做的更改。'
- en: '`QtWidgets.QGraphicsView.MinimalViewportUpdate`—`1`: The minimal viewport region will
    be updated.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.MinimalViewportUpdate`—`1`: 将更新最少的视口区域。'
- en: '`QtWidgets.QGraphicsView.SmartViewportUpdate`—`2`: The optimal viewport areas will
    be updated.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.SmartViewportUpdate`—`2`: 将更新最优的视口区域。'
- en: '`QtWidgets.QGraphicsView.NoViewportUpdate`—`3`: The viewport will not be updated with
    changes of the scene.'
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.NoViewportUpdate`—`3`: 视口不会随着场景的变化而更新。'
- en: '`QtWidgets.QGraphicsView.BoundingRectViewportUpdate`—`4`: The bounding rectangle
    of all the changes in the viewport will be updated.'
  id: totrans-224
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsView.BoundingRectViewportUpdate`—`4`: 将更新视口中所有更改的边界矩形。'
- en: is
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'These functions return a Boolean value (`bool`) related to the graphics view
    states:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与图形视图状态相关的布尔值（`bool`）：
- en: '`graphics_view.isInteractive()`: This returns `True` if this view allows interaction
    in the scene.'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.isInteractive()`: 如果此视图允许在场景中进行交互，则返回`True`。'
- en: '`graphics_view.isTransformed()`: This returns `True` if this view is transformed.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.isTransformed()`: 如果此视图已变换，则返回`True`。'
- en: functional
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These functions return the current values of the graphics view, changes in
    functionality, and so on:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回图形视图的当前值、功能更改等：
- en: '`graphics_view.alignment()`: This returns the alignment of the scene in the
    graphics view widget.'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.alignment()`: 这返回了图形视图小部件中场景的对齐方式。'
- en: '`graphics_view.backgroundBrush()`: This returns the background brush of the
    `QtGui.QBrush` type used for this scene in the graphics view widget.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.backgroundBrush()`: 这返回了在图形视图小部件中用于此场景的`QtGui.QBrush`类型的背景画刷。'
- en: '`graphics_view.cacheMode()`: This returns the cache mode of the `QtWidgets.QGraphicsView.CacheMode`
    type. The parts of this view are cached.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.cacheMode()`: 这返回了`QtWidgets.QGraphicsView.CacheMode`类型的缓存模式。此视图的部分被缓存。'
- en: '`graphics_view.centerOn(QtCore.QPointF)`: This scrolls the contents of the
    viewport to the scene coordinate point, specified in the parameter, that will
    be centered in the view.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.centerOn(QtCore.QPointF)`: 这将视口的内容滚动到场景坐标点，由参数指定，这将位于视图中心。'
- en: '`graphics_view.centerOn(QtWidgets.QGraphicsItem)`: This scrolls the contents
    of the viewport to the scene item, specified in the parameter, that will be centered
    in the view.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.centerOn(QtWidgets.QGraphicsItem)`: 这将视口的内容滚动到场景项，由参数指定，这将位于视图中心。'
- en: '`graphics_view.centerOn(x, y)`: This scrolls the contents of the viewport to
    the scene coordinates `x` and `y`, which will be centered in the view.'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.centerOn(x, y)`: 这将视口的内容滚动到场景坐标`x`和`y`，这将位于视图中心。'
- en: '`graphics_view.dragMode()`: This returns the mode of the `QtWidgets.QGraphicsView.DragMode`
    type for dragging the mouse over this scene.'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.dragMode()`: 这返回了在鼠标拖动此场景时的`QtWidgets.QGraphicsView.DragMode`类型的模式。'
- en: '`graphics_view.drawBackground(QtGui.QPainter, QtCore.QRectF)`: This draws the
    background of this scene with the painter (the first parameter) in the coordinates
    (the second parameter).'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.drawBackground(QtGui.QPainter, QtCore.QRectF)`: 这使用画家（第一个参数）在坐标（第二个参数）中绘制此场景的背景。'
- en: '`graphics_view.drawForeground(QtGui.QPainter, QtCore.QRectF)`: This draws the
    foreground of this scene with the painter (the first parameter) in the coordinates
    (the second parameter).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.drawForeground(QtGui.QPainter, QtCore.QRectF)`: 这使用画家（第一个参数）在坐标（第二个参数）中绘制此场景的前景。'
- en: '`graphics_view.ensureVisible(QtCore.QRectF, int, int)`: This scrolls the contents
    of the viewport to the scene rectangle (the first parameter) that will be visible,
    with an *x* margin (the second parameter) and a *y* margin (the third parameter).'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.ensureVisible(QtCore.QRectF, int, int)`: 这将视口的内容滚动到将可见的场景矩形（第一个参数），带有*x*边距（第二个参数）和*y*边距（第三个参数）。'
- en: '`graphics_view.ensureVisible(QtWidgets.QGraphicsItem, int, int)`: This scrolls
    the contents of the viewport to the scene item (the first parameter) that will
    be visible, with an *x* margin (the second parameter) and a *y* margin (the third
    parameter).'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.ensureVisible(QtWidgets.QGraphicsItem, int, int)`: 这将视口的内容滚动到将可见的场景项（第一个参数），带有*x*边距（第二个参数）和*y*边距（第三个参数）。'
- en: '`graphics_view.ensureVisible(x, y, w, h, int, int)`: This scrolls the contents
    of the viewport to the scene beginning at `x`/`y`**,** with a width of `w` and
    a height of `h`, that will be visible within an *x* margin (the fifth parameter)
    and a *y* margin (the sixth parameter).'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.ensureVisible(x, y, w, h, int, int)`: 这将视口的内容滚动到场景的起始位置`x`/`y`，宽度为`w`，高度为`h`，将在*x*边距（第五个参数）和*y*边距（第六个参数）内可见。'
- en: '`graphics_view.fitInView(QtCore.QRectF, QtCore.Qt.AspectRatioMode)`: This scales
    the view matrix and scrolls the scroll bars so that the scene rectangle (the first
    parameter) fits inside the viewport, according to the aspect ratio (the second
    parameter).'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.fitInView(QtCore.QRectF, QtCore.Qt.AspectRatioMode)`: 这缩放视图矩阵并滚动滚动条，使场景矩形（第一个参数）根据纵横比（第二个参数）适合视口内。'
- en: '`graphics_view.fitInView(QtWidgets.QGraphicsItem, QtCore.Qt.AspectRatioMode)`:
    This scales the view matrix and scrolls the scroll bars so that the scene''s item
    fits tightly inside the view, according to the aspect ratio (the second parameter).'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.fitInView(QtWidgets.QGraphicsItem, QtCore.Qt.AspectRatioMode)`:
    这缩放视图矩阵并滚动滚动条，使场景的项根据纵横比（第二个参数）紧密适合视图内。'
- en: '`graphics_view.fitInView(x, y, w, h, QtCore.Qt.AspectRatioMode)`: This scales
    the view matrix and scrolls the scroll bars to the scene beginning at `x`/`y`**,**
    with a width of `w` and a height of `h`, so that the item fits inside the viewport
    according to the aspect ratio (the fifth parameter).'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.fitInView(x, y, w, h, QtCore.Qt.AspectRatioMode)`: 这缩放视图矩阵并滚动滚动条到场景的起始位置`x`/`y`，宽度为`w`，高度为`h`，使项目根据纵横比（第五个参数）适合视口内。'
- en: '`graphics_view.foregroundBrush()`: This returns the foreground brush of the
    `QtGui.QBrush` type that''s used for this scene in the graphics view widget.'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.foregroundBrush()`: 这返回了用于图形视图小部件中此场景的 `QtGui.QBrush` 类型的前景画笔。'
- en: '`graphics_view.invalidateScene(QtCore.QRectF, QtWidgets.QGraphicsScene.SceneLayers)`:
    This invalidates and schedules a redraw of layers (the second parameter) inside
    a rectangle (the first parameter).'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.invalidateScene(QtCore.QRectF, QtWidgets.QGraphicsScene.SceneLayers)`:
    这使矩形（第一个参数）内的层（第二个参数）无效并安排重绘。'
- en: '`graphics_view.itemAt(QtCore.QPointF)`: This returns the item at the point
    specified in the parameter.'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.itemAt(QtCore.QPointF)`: 这返回了参数中指定的点的项目。'
- en: '`graphics_view.itemAt(x, y)`: This returns the item at the position specified
    by the `x` and `y` coordinates.'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.itemAt(x, y)`: 这返回了由 `x` 和 `y` 坐标指定的位置的项。'
- en: '`graphics_view.items()`: This returns a list of all the items in the scene
    in descending stacking order.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items()`: 这返回了场景中所有项目的列表，按降序堆叠顺序排列。'
- en: '`graphics_view.items(QtCore.QRect, QtCore.Qt.ItemSelectionMode)`: This returns
    all visible items, depending on the mode (the second parameter) that is inside,
    or that intersects with, the rectangle (the first parameter).'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items(QtCore.QRect, QtCore.Qt.ItemSelectionMode)`: 这返回了所有可见项目，取决于模式（第二个参数），这些项目位于或与矩形（第一个参数）内部或相交。'
- en: '`graphics_view.items(QtCore.QPoint)`: This returns all the items at the point
    specified in the parameter.'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items(QtCore.QPoint)`: 这返回了参数中指定的点的所有项。'
- en: '`graphics_view.items(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode)`: This
    returns all items, depending on the mode (the second parameter) that is inside,
    or that intersects with, the specified path (the first parameter).'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode)`: 这返回了所有项目，取决于模式（第二个参数），这些项目位于或与指定的路径（第一个参数）内部或相交。'
- en: '`graphics_view.items(QtGui.QPolygon, QtCore.Qt.ItemSelectionMode)`: This returns
    all items, depending on the mode (the second parameter) that is inside, or that
    intersects with, the polygon (the first parameter).'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items(QtGui.QPolygon, QtCore.Qt.ItemSelectionMode)`: 这返回了所有项目，取决于模式（第二个参数），这些项目位于或与多边形（第一个参数）内部或相交。'
- en: '`graphics_view.items(x, y)`: This returns all items at the coordinates *x*
    and *y*.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items(x, y)`: 这返回了坐标 *x* 和 *y* 处的所有项。'
- en: '`graphics_view.items(x, y, w, h, QtCore.Qt.ItemSelectionMode)`: This returns
    all items, depending on the mode (the fifth parameter) that is inside, or that
    intersects with, the area beginning at `x`/`y`, with a width of `w` and a height
    of `h`.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.items(x, y, w, h, QtCore.Qt.ItemSelectionMode)`: 这返回了所有项目，取决于模式（第五个参数），这些项目位于或与以
    `x`/`y` 为起点、宽度为 `w` 和高度为 `h` 的区域内部或相交。'
- en: '`graphics_view.optimizationFlags()`: This returns the flags that are used to
    tune view performance.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.optimizationFlags()`: 这返回了用于调整视图性能的标志。'
- en: '`graphics_view.render(QtGui.QPainter, QtCore.QRectF, QtCore.QRect, QtCore.Qt.AspectRatioMode)`:
    This renders the source rectangle (the third parameter) from the scene into the
    rectangle (the second parameter) with the painter (the first parameter) and the
    mode (the fourth parameter).'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.render(QtGui.QPainter, QtCore.QRectF, QtCore.QRect, QtCore.Qt.AspectRatioMode)`:
    这使用画家（第一个参数）和模式（第四个参数）将场景中的源矩形（第三个参数）渲染到矩形（第二个参数）中。'
- en: '`graphics_view.renderHints()`: This returns the default render hints for this
    view.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.renderHints()`: 这返回了此视图的默认渲染提示。'
- en: '`graphics_view.resetCachedContent()`: This resets cached content and clears
    the view cache.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.resetCachedContent()`: 这重置了缓存内容并清除了视图缓存。'
- en: '`graphics_view.resetTransform()`: This resets the view transformation to the
    identity matrix.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.resetTransform()`: 这将视图变换重置为恒等矩阵。'
- en: '`graphics_view.resizeAnchor()`: This returns the anchor that will be used with
    the position of the scene when the view is resized.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.resizeAnchor()`: 这返回了在视图大小调整时将与场景位置一起使用的锚点。'
- en: '`graphics_view.rotate(float)`: This rotates, clockwise, the current view transformation
    by the angle degree specified in the parameter.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.rotate(float)`: 这按顺时针方向将当前视图变换旋转到参数中指定的角度度数。'
- en: '`graphics_view.rubberBandRect()`: This returns the rubber band area of the
    `QtCore.QRect` type (in viewport coordinates) if item selection was used.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.rubberBandRect()`: 这返回了使用项目选择时 `QtCore.QRect` 类型（在视口坐标中）的橡皮筋区域。'
- en: '`graphics_view.rubberBandSelectionMode()`: This returns the mode that is used
    to select items with a rubber band selection rectangle.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.rubberBandSelectionMode()`: 这返回了用于使用橡皮筋选择矩形选择项目的模式。'
- en: '`graphics_view.scale(float, float)`: This scales the view transformation by
    `x` (the first parameter) and `y` (the second parameter).'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.scale(float, float)`: 此函数通过 `x`（第一个参数）和 `y`（第二个参数）缩放视图转换。'
- en: '`graphics_view.scene()`: This returns the scene of the `QtWidgets.QGraphicsScene`
    type that is visualized by this graphics view.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.scene()`: 这将返回由此图形视图可视化的 `QtWidgets.QGraphicsScene` 类型的场景。'
- en: '`graphics_view.sceneRect()`: This returns the area of the scene of the `QtCore.QRectF`
    type that is visualized by this graphics view.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.sceneRect()`: 这将返回由此图形视图可视化的 `QtCore.QRectF` 类型的场景区域。'
- en: '`graphics_view.setupViewport(QtWidgets.QWidget)`: This initializes a new viewport
    widget before it is used.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.setupViewport(QtWidgets.QWidget)`: 在使用之前，此函数初始化一个新的视口小部件。'
- en: '`graphics_view.shear(float, float)`: This shears the current view transformation
    horizontally (the first parameter) and vertically (the second parameter).'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.shear(float, float)`: 此函数将当前视图转换水平（第一个参数）和垂直（第二个参数）剪切。'
- en: '`graphics_view.transform()`: This returns the current transformation matrix
    of the `QtGui.QTransform` type for this graphics view.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.transform()`: 这将返回此图形视图的当前转换矩阵，其类型为 `QtGui.QTransform`。'
- en: '`graphics_view.transformationAnchor()`: This returns the anchor of the `QtWidgets.QGraphicsView.ViewportAnchor` type
    that is used with the transformation of this graphics view.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.transformationAnchor()`: 这将返回与该图形视图转换一起使用的 `QtWidgets.QGraphicsView.ViewportAnchor`
    类型的锚点。'
- en: '`graphics_view.translate(float, float)`: This translates the view transformation
    by `x` (the first parameter) and `y` (the second parameter).'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.translate(float, float)`: 此函数通过 `x`（第一个参数）和 `y`（第二个参数）平移视图转换。'
- en: '`graphics_view.updateScene([QtCore.QRectF])`: This schedules an update of the
    scene rectangles, specified in the parameter as a list of rectangles.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.updateScene([QtCore.QRectF])`: 这将安排更新场景矩形，参数为一个矩形列表。'
- en: '`graphics_view.updateSceneRect(QtCore.QRectF)`: This notifies the graphics
    view that the rectangle of the scene has changed, with the new scene rectangle
    in the parameter.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.updateSceneRect(QtCore.QRectF)`: 此函数通知图形视图场景的矩形已更改，参数为新的场景矩形。'
- en: '`graphics_view.viewportTransform()`: This returns the matrix of the `QtGui.QTransform`
    type, which maps scene coordinates to viewport coordinates.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.viewportTransform()`: 这将返回一个 `QtGui.QTransform` 类型的矩阵，该矩阵将场景坐标映射到视口坐标。'
- en: '`graphics_view.viewportUpdateMode()`: This returns the update mode of the viewport.'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.viewportUpdateMode()`: 这将返回视口的更新模式。'
- en: map
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 映射
- en: 'These functions are related to mapping:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与映射相关：
- en: '`graphics_view.mapFromScene(QtCore.QRectF)`: This returns the rectangle, specified
    in the parameter, to a viewport coordinate polygon.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapFromScene(QtCore.QRectF)`: 这将返回一个指定参数的矩形，并将其转换为视口坐标多边形。'
- en: '`graphics_view.mapFromScene(QtCore.QPointF)`: This returns the point, specified
    in the parameter, to a viewport coordinate point.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapFromScene(QtCore.QPointF)`: 这将返回一个指定参数的点，并将其转换为视口坐标点。'
- en: '`graphics_view.mapFromScene(QtGui.QPainterPath)`: This returns the scene coordinate
    painter path, specified in the parameter, to a viewport coordinate painter path.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapFromScene(QtGui.QPainterPath)`: 这将返回一个指定参数的场景坐标画家路径，并将其转换为视口坐标画家路径。'
- en: '`graphics_view.mapFromScene(QtGui.QPolygonF)`: This returns the scene coordinate
    polygon, specified in the parameter, to a viewport coordinate polygon.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapFromScene(QtGui.QPolygonF)`: 这将返回一个指定参数的场景坐标多边形，并将其转换为视口坐标多边形。'
- en: '`graphics_view.mapToScene(QtCore.QRectF)`: This returns a viewport coordinate
    polygon, specified in the parameter, to a scene coordinate polygon.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapToScene(QtCore.QRectF)`: 这将返回一个指定参数的视口坐标多边形，并将其转换为场景坐标多边形。'
- en: '`graphics_view.mapToScene(QtCore.QPointF)`: This returns a viewport coordinate
    point, specified in the parameter, mapped to scene coordinates.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapToScene(QtCore.QPointF)`: 这将返回一个指定参数的视口坐标点，并将其映射到场景坐标。'
- en: '`graphics_view.mapToScene(QtGui.QPainterPath)`: This returns a viewport painter
    path, specified in the parameter, to the scene coordinate painter path.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapToScene(QtGui.QPainterPath)`: 这将返回一个指定参数的视口画家路径，并将其转换为场景坐标画家路径。'
- en: '`graphics_view.mapToScene(QtGui.QPolygonF)`: This returns a viewport coordinate
    polygon, specified in the parameter, to the scene coordinate polygon.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mapToScene(QtGui.QPolygonF)`: 这将返回一个指定参数的视口坐标多边形，并将其转换为场景坐标多边形。'
- en: events
  id: totrans-288
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These functions are related to events, such as event handlers:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，例如事件处理器：
- en: '`graphics_view.contextMenuEvent(QtGui.QContextMenuEvent)`: This event handler
    receives context menu events.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.contextMenuEvent(QtGui.QContextMenuEvent)`: 此事件处理程序接收上下文菜单事件。'
- en: '`graphics_view.dragEnterEvent(QtGui.QDragEnterEvent)`: This event handler is
    called with an event parameter when the mouse enters this scene and a drag is
    in progress.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.dragEnterEvent(QtGui.QDragEnterEvent)`: 当鼠标进入此场景且正在拖动时，此事件处理程序会使用事件参数被调用。'
- en: '`graphics_view.dragLeaveEvent(QtGui.QDragLeaveEvent)`: This event handler is
    called with an event parameter when the mouse leaves this scene and a drag is
    in progress.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.dragLeaveEvent(QtGui.QDragLeaveEvent)`: 当鼠标离开此场景且正在拖动时，此事件处理程序会使用事件参数被调用。'
- en: '`graphics_view.dragMoveEvent(QtGui.QDragMoveEvent)`: This event handler is
    called with an event parameter when certain conditions occur, such as the cursor
    entering or moving within the area, the modifier key being pressed on the keyboard
    while the scene has focus, or if a drag is in progress.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.dragMoveEvent(QtGui.QDragMoveEvent)`: 当发生某些条件时，例如光标进入或移动到该区域内，键盘上的修饰键在场景具有焦点时被按下，或者正在拖动时，此事件处理程序会使用事件参数被调用。'
- en: '`graphics_view.dropEvent(QtGui.QDropEvent)`: This event handler is called with
    an event parameter when the drag is dropped onto the scene.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.dropEvent(QtGui.QDropEvent)`: 当拖动被放置到场景上时，此事件处理程序会使用事件参数被调用。'
- en: '`graphics_view.event(QtCore.QEvent)`: This receives events to the scene and
    should return `True` if the event is recognized and processed.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.event(QtCore.QEvent)`: 此接收场景的事件，如果事件被识别并处理，则应返回`True`。'
- en: '`graphics_view.focusOutEvent(QtGui.QFocusEvent)`: This event handler receives
    the scene''s keyboard focus events, which are passed with an event parameter when
    focus is lost.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.focusOutEvent(QtGui.QFocusEvent)`: 此事件处理程序接收场景的键盘焦点事件，当失去焦点时，这些事件会通过事件参数传递。'
- en: '`graphics_view.focusInEvent(QtGui.QFocusEvent)`: This event handler receives
    the scene''s keyboard focus events, which are passed with an event parameter when
    focus is received.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.focusInEvent(QtGui.QFocusEvent)`: 此事件处理程序接收场景的键盘焦点事件，当获得焦点时，这些事件会通过事件参数传递。'
- en: '`graphics_view.inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler
    receives input method events for the scene.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.inputMethodEvent(QtGui.QInputMethodEvent)`: 此事件处理程序接收场景的输入法事件。'
- en: '`graphics_view.keyPressEvent(QtGui.QKeyEvent)`: This event handler receives
    key press events for the scene with the event passed in the parameter.'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.keyPressEvent(QtGui.QKeyEvent)`: 此事件处理程序接收传入参数的事件的按键事件。'
- en: '`graphics_view.keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives
    key release events for the scene with the event passed in the parameter.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.keyReleaseEvent(QtGui.QKeyEvent)`: 此事件处理程序接收传入参数的事件的按键释放事件。'
- en: '`graphics_view.mouseDoubleClickEvent(QtGui.QMouseEvent)`: This event handler
    receives mouse double-click events for the scene with the event passed in the
    parameter.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mouseDoubleClickEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传入参数的事件的鼠标双击事件。'
- en: '`graphics_view.mouseMoveEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse move events for the scene with the event passed in the parameter.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mouseMoveEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传入参数的事件的鼠标移动事件。'
- en: '`graphics_view.mousePressEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse press events for the scene with the event passed in the parameter.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mousePressEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传入参数的事件的鼠标按下事件。'
- en: '`graphics_view.mouseReleaseEvent(QtGui.QMouseEvent)`: This event handler receives
    mouse release events for the scene with the event passed in the parameter.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.mouseReleaseEvent(QtGui.QMouseEvent)`: 此事件处理程序接收传入参数的事件的鼠标释放事件。'
- en: '`graphics_view.paintEvent(QtGui.QPaintEvent)`: This event handler receives
    paint events for the scene with the event passed in the parameter.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.paintEvent(QtGui.QPaintEvent)`: 此事件处理程序接收传入参数的事件的绘制事件。'
- en: '`graphics_view.resizeEvent(QtGui.QResizeEvent)`: This event handler receives
    resize events for the scene with the event passed in the parameter.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.resizeEvent(QtGui.QResizeEvent)`: 此事件处理程序接收传入参数的事件的尺寸调整事件。'
- en: '`graphics_view.showEvent(QtGui.QShowEvent)`: This event handler receives show
    events for the scene with the event passed in the parameter.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.showEvent(QtGui.QShowEvent)`: 此事件处理程序接收传入参数的事件的显示事件。'
- en: '`graphics_view.viewportEvent(QtCore.QEvent)`: This is the main event handler
    for the scrolling area with the event passed in the parameter.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.viewportEvent(QtCore.QEvent)`: 这是带有传入参数的事件的滚动区域的主要事件处理程序。'
- en: '`graphics_view.wheelEvent(QtGui.QWheelEvent)`: This event handler receives
    mouse wheel events for the scene with the event passed in the parameter.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.wheelEvent(QtGui.QWheelEvent)`: 此事件处理器接收场景的鼠标滚轮事件，事件通过参数传入。'
- en: signals
  id: totrans-310
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signal of the `QGraphicsView` class is as follows:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsView` 类的可用的信号如下：'
- en: '`graphics_view.rubberBandChanged(QtCore.QRect, QtCore.QPointF, QtCore.QPointF)`:
    This signal is emitted when the rubber band rectangle is changed. The viewport
    rectangle is specified in the first parameter with the drag start position (the
    second parameter) and the drag end position (the third parameter).'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphics_view.rubberBandChanged(QtCore.QRect, QtCore.QPointF, QtCore.QPointF)`:
    当橡皮筋矩形改变时，发出此信号。视口矩形由第一个参数指定，其中包含拖动开始位置（第二个参数）和拖动结束位置（第三个参数）。'
- en: QGraphicsItem
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsItem
- en: This is a base class for all graphical items that can be realized with the `QGraphicsScene`
    class in the scene. With this base class, the Qt framework provides a set of standard
    graphics items, such as `QGraphicsEllipseItem`, `QGraphicsLineItem`, `QGraphicsPathItem`,
    `QGraphicsPixmapItem`, `QGraphicsPolygonItem`, `QGraphicsRectItem`, `QGraphicsSimpleTextItem`,
    and `QGraphicsTextItem`. These are commonly used to create internal graphical
    components in the application.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是所有可以通过 `QGraphicsScene` 类在场景中实现的图形项的基类。使用此基类，Qt 框架提供了一套标准图形项，如 `QGraphicsEllipseItem`、`QGraphicsLineItem`、`QGraphicsPathItem`、`QGraphicsPixmapItem`、`QGraphicsPolygonItem`、`QGraphicsRectItem`、`QGraphicsSimpleTextItem`
    和 `QGraphicsTextItem`。这些通常用于在应用程序中创建内部图形组件。
- en: QGraphicsItem functions
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QGraphicsItem 函数
- en: The `QGraphicsItem` class enhances functionality with the following functions.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`QGraphicsItem` 类通过以下函数增强功能。'
- en: set
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These functions set the parameters/properties to the graphics item:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数将参数/属性设置到图形项中：
- en: '`setAcceptDrops(bool)`: If the parameter is `True`, drag and drop events will
    be accepted for this item.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAcceptDrops(bool)`: 如果参数为 `True`，则为此项接受拖放事件。'
- en: '`setAcceptedMouseButtons(QtCore.Qt.MouseButtons)`: This sets the mouse buttons,
    specified in the parameter, that will be accepted for this item''s mouse events.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAcceptedMouseButtons(QtCore.Qt.MouseButtons)`: 这为此项的鼠标事件设置参数中指定的鼠标按钮。'
- en: '`setAcceptHoverEvents(bool)`: If the parameter is `True`, hover events will
    be accepted for this item.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAcceptHoverEvents(bool)`: 如果参数为 `True`，则为此项接受悬停事件。'
- en: '`setAcceptTouchEvents(bool)`: If the parameter is `True`, touch events will
    be accepted for this item.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`setAcceptTouchEvents(bool)`: 如果参数为 `True`，则为此项接受触摸事件。'
- en: '`setActive(bool)`: If the parameter is `True`, the panel of this item will
    be activated.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`setActive(bool)`: 如果参数为 `True`，则激活此项的面板。'
- en: '`setBoundingRegionGranularity(float)`: This sets the item''s bounding region
    granularity (`0.0` - `1.0`), specified in the parameter. That is the ratio between
    the resolution of the device and the bounding region.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`setBoundingRegionGranularity(float)`: 这为此项的边界区域粒度（`0.0` - `1.0`）设置参数，即设备分辨率与边界区域的比率。'
- en: '`setCacheMode(QtWidgets.QGraphicsItem.CacheMode, QtCore.QSize)`: This sets
    the cache mode (the first parameter) for this item, with a size (the second parameter)
    that is optional. The available cache modes are as follows:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`setCacheMode(QtWidgets.QGraphicsItem.CacheMode, QtCore.QSize)`: 这为此项设置缓存模式（第一个参数），并可选地设置大小（第二个参数）。可用的缓存模式如下：'
- en: '`QtWidgets.QGraphicsItem.NoCache`—`0`: Caching is disabled.'
  id: totrans-326
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsItem.NoCache`—`0`: 禁用缓存。'
- en: '`QtWidgets.QGraphicsItem.ItemCoordinateCache`—`1`: Caching is enabled for the
    local coordinate system of the item.'
  id: totrans-327
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsItem.ItemCoordinateCache`—`1`: 为该项的局部坐标系启用缓存。'
- en: '`QtWidgets.QGraphicsItem.DeviceCoordinateCache`—`2`: Caching is enabled for
    the device coordinate system of the item.'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsItem.DeviceCoordinateCache`—`2`: 为该项的设备坐标系启用缓存。'
- en: '`setCursor(QtGui.QCursor)`: This sets the cursor shape, specified in the parameter,
    for this item.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`setCursor(QtGui.QCursor)`: 这为此项设置参数中指定的光标形状。'
- en: '`setData(int, object)`: This sets the custom data of this item for the key
    (the first parameter) to a value (the second parameter).'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`setData(int, object)`: 这将为此项的键（第一个参数）设置自定义数据为值（第二个参数）。'
- en: '`setEnabled(bool)`: If the parameter is `True`, this item will be enabled.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`setEnabled(bool)`: 如果参数为 `True`，则启用此项。'
- en: '`setFiltersChildEvents(bool)`: If the parameter is `True`, it sets this item
    to filter all events for all its children.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFiltersChildEvents(bool)`: 如果参数为 `True`，则设置此项以过滤所有子项的事件。'
- en: '`setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag, bool)`: If the second parameter
    is `True`, the item''s flag (the first parameter) will be enabled.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFlag(QtWidgets.QGraphicsItem.GraphicsItemFlag, bool)`: 如果第二个参数为 `True`，则将启用此项的标志（第一个参数）。'
- en: '`setFlags(QtWidgets.QGraphicsItem.GraphicsItemFlag | QtWidgets.QGraphicsItem.GraphicsItemFlag)`:
    This sets the item''s flags that are specified in the parameter.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFlags(QtWidgets.QGraphicsItem.GraphicsItemFlag | QtWidgets.QGraphicsItem.GraphicsItemFlag)`:
    这将为此项设置在参数中指定的标志。'
- en: '`setFocus(QtCore.Qt.FocusReason)`: This gives keyboard input focus to this
    item. The specified parameter will be passed into any focus event that''s generated.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFocus(QtCore.Qt.FocusReason)`: 这将为此项提供键盘输入焦点。指定的参数将被传递到任何生成的焦点事件中。'
- en: '`setFocusProxy(QtWidgets.QGraphicsItem)`: This sets the focus proxy of this
    item to the item specified in the parameter.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`setFocusProxy(QtWidgets.QGraphicsItem)`: 这将为此项设置焦点代理为参数中指定的项。'
- en: '`setGraphicsEffect(QtWidgets.QGraphicsEffect)`: This sets the graphics effect,
    specified in the parameter, for this item.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`setGraphicsEffect(QtWidgets.QGraphicsEffect)`: 这将为此项设置在参数中指定的图形效果。'
- en: '`setGroup(QtWidgets.QGraphicsItemGroup)`: This sets this item to the group
    specified in the parameter.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`setGroup(QtWidgets.QGraphicsItemGroup)`: 这将为此项设置在参数中指定的组。'
- en: '`setHandlesChildEvents(bool)`: If the parameter is `True`, this item will handle
    all child events.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`setHandlesChildEvents(bool)`: 如果参数为 `True`，此项将处理所有子事件。'
- en: '`setInputMethodHints(QtCore.Qt.InputMethodHints)`: This sets the input method
    hints, specified in the parameter, for this item.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`setInputMethodHints(QtCore.Qt.InputMethodHints)`: 这将为此项设置在参数中指定的输入法提示。'
- en: '`setOpacity(float)`: This sets the local opacity for this item between `0.0`
    (full transparent) and `1.0` (full opaque).'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`setOpacity(float)`: 这将为此项设置局部透明度，介于 `0.0`（完全透明）和 `1.0`（完全不透明）之间。'
- en: '`setPanelModality(QtWidgets.QGraphicsItem.PanelModality)`: This sets the modality,
    specified in the parameter, for this item. The available modalities are as follows:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPanelModality(QtWidgets.QGraphicsItem.PanelModality)`: 这将为此项设置在参数中指定的模态。可用的模态如下：'
- en: '`QtWidgets.QGraphicsItem.NonModal`—`0`: The panel is not modal.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsItem.NonModal`—`0`: 面板不是模态的。'
- en: '`QtWidgets.QGraphicsItem.PanelModal`—`1`: The panel is modal (item).'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsItem.PanelModal`—`1`: 面板是模态的（项）。'
- en: '`QtWidgets.QGraphicsItem.SceneModal`—`2`: The window is modal (scene).'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtWidgets.QGraphicsItem.SceneModal`—`2`: 窗口是模态的（场景）。'
- en: '`setParentItem(QtWidgets.QGraphicsItem)`: This sets the parent item, specified
    in the parameter, for this item.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`setParentItem(QtWidgets.QGraphicsItem)`: 这将为此项设置由参数指定的父项。'
- en: '`setPos(QtCore.QPointF)`: This sets the position of this item to the position
    specified in the parameter.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPos(QtCore.QPointF)`: 这将为此项设置由参数指定的位置。'
- en: '`setPos(x, y)`: This sets the position of this item to the position specified
    by the `x` and `y` coordinates.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`setPos(x, y)`: 这将为此项设置由 `x` 和 `y` 坐标指定的位置。'
- en: '`setRotation(float)`: This sets the rotation for this item, in degrees, around
    the *z* axis. The item will be rotated clockwise if the value is positive, and
    counter-clockwise if it is negative.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '`setRotation(float)`: 这将为此项设置围绕 *z* 轴的旋转，以度为单位。如果值为正，则项将顺时针旋转；如果值为负，则逆时针旋转。'
- en: '`setScale(float)`: This sets the scale factor for this item.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`setScale(float)`: 这将为此项设置缩放因子。'
- en: '`setSelected(bool)`: If the parameter is `True`, this item will be selected.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`setSelected(bool)`: 如果参数为 `True`，则此项将被选中。'
- en: '`setToolTip("Tool tip")`: This sets the tooltip for this item, specified in
    the parameter.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`setToolTip("Tool tip")`: 这将为此项设置在参数中指定的工具提示。'
- en: '`setTransform(QtGui.QTransform, bool)`: This sets the transformation matrix
    (the first parameter) for this item. If the second parameter is `True`, the matrix
    will be combined with the current matrix.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTransform(QtGui.QTransform, bool)`: 这将为此项设置变换矩阵（第一个参数）。如果第二个参数为 `True`，则矩阵将与当前矩阵合并。'
- en: '`setTransformations([QGraphicsTransform])`: This sets a list of graphics transformations
    that will be applied to this item.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTransformations([QGraphicsTransform])`: 这将为此项设置要应用到此项的图形变换列表。'
- en: '`setTransformOriginPoint(QtCore.QPointF)`: This sets the point of the transformation,
    specified in the parameter, for this item.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTransformOriginPoint(QtCore.QPointF)`: 这将为此项设置在参数中指定的变换点。'
- en: '`setTransformOriginPoint(x, y)`: This sets the point of the transformation,
    specified by the `x` and `y` coordinates, for this item.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`setTransformOriginPoint(x, y)`: 这将为此项设置由 `x` 和 `y` 坐标指定的变换点。'
- en: '`setVisible(bool)`: If the parameter is `True`, it sets this item as visible.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`setVisible(bool)`: 如果参数为 `True`，则将此项设置为可见。'
- en: '`setX(float)`: This sets the *x* coordinate, specified in the parameter, for
    the position of this item.'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`setX(float)`: 设置此项目位置的 *x* 坐标，该坐标由参数指定。'
- en: '`setY(float)`: This sets the *y* coordinate, specified in the parameter, for
    the position of this item.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`setY(float)`: 设置此项目位置的 *y* 坐标，该坐标由参数指定。'
- en: '`setZValue(float)`: This sets the `Z` value, specified in the parameter, of
    this item. The `Z` value is a stacking order of sibling items, where the item
    with the highest `Z` value is at the top.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`setZValue(float)`: 设置此项目的 `Z` 值，该值由参数指定。`Z` 值是兄弟项目的堆叠顺序，其中 `Z` 值最高的项目位于顶部。'
- en: has/is
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: has/is
- en: 'These functions return a Boolean value (`bool`) related to the graphics items''
    states:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回与图形项目状态相关的布尔值 (`bool`)：
- en: '`hasCursor()`: This returns `True` if a cursor is set for this item.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasCursor()`: 如果为此项目设置了光标，则返回 `True`。'
- en: '`hasFocus()`: This returns `True` if this item has keyboard input focus.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`hasFocus()`: 如果此项目具有键盘输入焦点，则返回 `True`。'
- en: '`isActive()`: This returns `True` if this item is active.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`isActive()`: 如果此项目处于活动状态，则返回 `True`。'
- en: '`isAncestorOf(QtWidgets.QGraphicsItem)`: This returns `True` if this item is
    an ancestor of a child specified in the parameter.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`isAncestorOf(QtWidgets.QGraphicsItem)`: 如果此项目是参数中指定的子项目的祖先，则返回 `True`。'
- en: '`isBlockedByModalPanel()`: This returns `True` if this item is blocked by a
    modal panel.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`isBlockedByModalPanel()`: 如果此项目被模态面板阻塞，则返回 `True`。'
- en: '`isClipped()`: This returns `True` if this item is clipped.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`isClipped()`: 如果此项目被裁剪，则返回 `True`。'
- en: '`isEnabled()`: This returns `True` if this item is enabled.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`isEnabled()`: 如果此项目处于启用状态，则返回 `True`。'
- en: '`isObscured(QtCore.QRectF)`: This returns `True` if the rectangle specified
    in the parameter is obscured by the opaque shape of any of colliding items above
    this item.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`isObscured(QtCore.QRectF)`: 如果参数中指定的矩形被此项目上方的任何碰撞项目的非透明形状遮挡，则返回 `True`。'
- en: '`isObscured(x, y, w, h)`: This returns `True` if the area beginning at `x`/`y`,
    with a width of `w` and a height of `h`, is obscured by the opaque shape of any
    colliding items above this item.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`isObscured(x, y, w, h)`: 如果从 `x`/`y` 开始，宽度为 `w`，高度为 `h` 的区域被此项目上方的任何碰撞项目的非透明形状遮挡，则返回
    `True`。'
- en: '`isObscuredBy(QtWidgets.QGraphicsItem)`: This returns `True` if the bounding
    rectangle of this item is obscured by the opaque shape of the item specified in
    the parameter.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`isObscuredBy(QtWidgets.QGraphicsItem)`: 如果此项目的边界矩形被参数中指定的项目的非透明形状遮挡，则返回 `True`。'
- en: '`isPanel():` This returns `True` if this item is a panel.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`isPanel():` 如果此项目是一个面板，则返回 `True`。'
- en: '`isSelected()`: This returns `True` if this item is selected.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`isSelected()`: 如果此项目被选中，则返回 `True`。'
- en: '`isUnderMouse()`: This returns `True` if this item is under the mouse pointer.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`isUnderMouse()`: 如果此项目位于鼠标指针下方，则返回 `True`。'
- en: '`isVisible()`: This returns `True` if this item is visible.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`isVisible()`: 如果此项目可见，则返回 `True`。'
- en: '`isVisibleTo(QtWidgets.QGraphicsItem)`: This returns `True` if this item is
    visible to the parent item specified in the parameter.'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`isVisibleTo(QtWidgets.QGraphicsItem)`: 如果此项目对参数中指定的父项目可见，则返回 `True`。'
- en: '`isWidget()`: This returns `True` if this item is a `QGraphicsWidget` widget.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`isWidget()`: 如果此项目是 `QGraphicsWidget` 小部件，则返回 `True`。'
- en: '`isWindow()`: This returns `True` if this item is a `QGraphicsWidget` window.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`isWindow()`: 如果此项目是 `QGraphicsWidget` 窗口，则返回 `True`。'
- en: functional
  id: totrans-380
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These functions return the current values of the graphics item, changes in
    functionality, and so on:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数返回图形项目的当前值，功能更改等：
- en: '`acceptDrops()`: This returns `True` if the item accepts drag and drop events.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`acceptDrops()`: 如果项目接受拖放事件，则返回 `True`。'
- en: '`acceptedMouseButtons()`: This returns the mouse buttons of the `QtCore.Qt.MouseButtons`
    type that this item accepts for mouse events.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`acceptedMouseButtons()`: 返回此项目接受鼠标事件时 `QtCore.Qt.MouseButtons` 类型的鼠标按钮。'
- en: '`acceptHoverEvents()`: This returns `True` if the item accepts hover events.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`acceptHoverEvents()`: 如果项目接受悬停事件，则返回 `True`。'
- en: '`acceptTouchEvents()`: This returns `True` if the item accepts touch events.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`acceptTouchEvents()`: 如果项目接受触摸事件，则返回 `True`。'
- en: '`advance(int)`: This returns the phase. In the first phase, all items are called
    with phase equal to `0`. This means that items on the scene are about to advance
    by one step, and then all items are called with phase equal to `1`.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`advance(int)`: 返回相位。在第一个阶段，所有项目都使用相等于 `0` 的相位被调用。这意味着场景中的项目即将前进一步，然后所有项目都使用相等于
    `1` 的相位被调用。'
- en: '`boundingRect()`: This returns the rectangle of the `QtCore.QRectF` type that
    describes the outer bounds of this item.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: '`boundingRect()`: 返回描述此项目外边界的 `QtCore.QRectF` 类型的矩形。'
- en: '`boundingRegion(QtGui.QTransform)`: This returns the bounding region for the
    item using the specified parameter.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`boundingRegion(QtGui.QTransform)`: 这返回使用指定参数的项目边界区域。'
- en: '`boundingRegionGranularity()`: This returns the item''s bounding region''s
    granularity (should be a number between `0` and `1`).'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`boundingRegionGranularity()`: 这返回项目边界区域的粒度（应该是一个介于 `0` 和 `1` 之间的数字）。'
- en: '`cacheMode()`: This returns the cache mode of the `QtWidgets.QGraphicsItem.CacheMode`
    type.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`cacheMode()`: 这返回 `QtWidgets.QGraphicsItem.CacheMode` 类型的缓存模式。'
- en: '`childItems()`: This returns a list with children of this item.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '`childItems()`: 这返回一个包含此项目子项的列表。'
- en: '`childrenBoundingRect()`: This returns the bounding rectangle of the descendants
    of this item.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`childrenBoundingRect()`: 这返回此项目的后代项的边界矩形。'
- en: '`clearFocus()`: This takes the keyboard input focus from this item and sends
    a focus out event if this item has a focus.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`clearFocus()`: 这将从该项目中获取键盘输入焦点，并在该项目有焦点的情况下发送焦点外事件。'
- en: '`clipPath()`: This returns the clip path of the `QtGui.QPainterPath` type for
    this item.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`clipPath()`: 这返回此项目的 `QtGui.QPainterPath` 类型的裁剪路径。'
- en: '`collidesWithItem(QtWidgets.QGraphicsItem, QtCore.Qt.ItemSelectionMode)`: This
    returns `True` if this item collides with the item in the first parameter, with
    the mode (the second parameter) related to the specified item.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`collidesWithItem(QtWidgets.QGraphicsItem, QtCore.Qt.ItemSelectionMode)`: 如果此项目与第一个参数中的项目碰撞，并且模式（第二个参数）与指定项目相关，则返回
    `True`。'
- en: '`collidesWithPath(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode)`: This returns
    `True` if this item collides with the path (the first parameter), with the mode
    (the second parameter) related to the specified path.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`collidesWithPath(QtGui.QPainterPath, QtCore.Qt.ItemSelectionMode)`: 如果此项目与路径（第一个参数）碰撞，并且模式（第二个参数）与指定路径相关，则返回
    `True`。'
- en: '`collidingItems(QtCore.Qt.ItemSelectionMode)`: This returns the list of all
    items that collide with this item. The detection of the collisions is determined
    by the mode specified in the parameter.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`collidingItems(QtCore.Qt.ItemSelectionMode)`: 这返回与该项目碰撞的所有项目的列表。碰撞检测由参数中指定的模式确定。'
- en: '`commonAncestorItem(QtWidgets.QGraphicsItem)`: This returns the closest ancestor
    item for this item and for the item specified in the parameter.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`commonAncestorItem(QtWidgets.QGraphicsItem)`: 这返回此项目和指定参数中的项目的最近祖先项。'
- en: '`contains(QtCore.QPointF)`: This returns `True` if this item contains the point
    specified in the parameter.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`contains(QtCore.QPointF)`: 如果此项目包含指定参数中的点，则返回 `True`。'
- en: '`cursor()`: This returns the cursor shape for this item.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`cursor()`: 这返回此项目的光标形状。'
- en: '`data(int)`: This returns the custom data of this item for the key specified
    in the parameter.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`data(int)`: 这返回指定参数中指定的键的此项目的自定义数据。'
- en: '`deviceTransform(QtGui.QTransform)`: This returns the device transformation
    matrix of this item.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`deviceTransform(QtGui.QTransform)`: 这返回此项目的设备变换矩阵。'
- en: '`effectiveOpacity()`: This returns the effective opacity for this item, which
    can be `0.0` (fully transparent) or `1.0` (fully opaque).'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`effectiveOpacity()`: 这返回此项目的有效不透明度，可以是 `0.0`（完全透明）或 `1.0`（完全不透明）。'
- en: '`filtersChildEvents()`: This returns `True` if this item filters child events.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`filtersChildEvents()`: 如果此项目过滤子事件，则返回 `True`。'
- en: '`flags()`: This returns the flags that are used for this item.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`flags()`: 这返回用于此项目的标志。'
- en: '`focusItem()`: This returns item of the `QtWidgets.QGraphicsItem` type, if
    the item descendant, or child of this item, has input focus.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`focusItem()`: 如果此项目的后代或子项具有输入焦点，则返回 `QtWidgets.QGraphicsItem` 类型的项目。'
- en: '`focusProxy()`: This returns focus proxy of the `QtWidgets.QGraphicsItem` type
    for this item.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`focusProxy()`: 这返回该项目的 `QtWidgets.QGraphicsItem` 类型的焦点代理。'
- en: '`grabKeyboard()`: This grabs the keyboard input.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`grabKeyboard()`: 这获取键盘输入。'
- en: '`grabMouse()`: This grabs the mouse input.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '`grabMouse()`: 这获取鼠标输入。'
- en: '`graphicsEffect()`: This returns an effect of the `QtWidgets.QGraphicsEffect`
    type if it exists for this item.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`graphicsEffect()`: 如果此项目存在 `QtWidgets.QGraphicsEffect` 类型的效果，则返回该效果。'
- en: '`group()`: This returns the group of the `QtWidgets.QGraphicsItemGroup` type
    for this item if it is a member of a group.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '`group()`: 如果该项目是组的一部分，则返回 `QtWidgets.QGraphicsItemGroup` 类型的该项目组。'
- en: '`handlesChildEvents()`: This returns `True` if this item handles child events.'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '`handlesChildEvents()`: 如果此项目处理子事件，则返回 `True`。'
- en: '`hide()`: This function hides the item.'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`hide()`: 此函数隐藏项目。'
- en: '`itemChange(QtWidgets.QGraphicsItem.GraphicsItemChange, value)`: This notifies
    the custom items that some part of the state has changed. The change (the first
    parameter) of the item that is changing and the new value (the second parameter)
    are both passed.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemChange(QtWidgets.QGraphicsItem.GraphicsItemChange, value)`: 这会通知自定义项目状态的一部分已更改。更改（第一个参数）是正在更改的项目，新值（第二个参数）都传递过去。'
- en: '`itemTransform(QtWidgets.QGraphicsItem)`: This returns a transform of the `QtGui.QTransform`
    type that maps the coordinates from this item to the item specified in the parameter.'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemTransform(QtWidgets.QGraphicsItem)`: 这返回一个映射从该项目到参数中指定的项目的坐标的 `QtGui.QTransform`
    类型的转换。'
- en: '`moveBy(float, float)`: This moves the item horizontally (the first parameter)
    and vertically (the second parameter).'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveBy(float, float)`: 这将项目水平（第一个参数）和垂直（第二个参数）移动。'
- en: '`opacity()`: This returns the local opacity for the item, and is between `0.0`
    (fully transparent) and `1.0` (fully opaque).'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity()`: 这返回项目的局部不透明度，介于 `0.0`（完全透明）和 `1.0`（完全不透明）之间。'
- en: '`opaqueArea()`: This returns the area of the `QtGui.QPainterPath` type where
    this item is opaque.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`opaqueArea()`: 这返回此项目不透明的 `QtGui.QPainterPath` 类型的区域。'
- en: '`paint(QtGui.QPainter, QtWidgets.QStyleOptionGraphicsItem, QtWidgets.QWidget)`:
    This paints the item''s content using the painter (the first parameter), style
    options (the second parameter), and the widget (optional third parameter) where
    the painting takes place.'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '`paint(QtGui.QPainter, QtWidgets.QStyleOptionGraphicsItem, QtWidgets.QWidget)`:
    这使用绘图器（第一个参数）、样式选项（第二个参数）和绘画发生的窗口（可选第三个参数）来绘制项目的内容。'
- en: '`panel()`: This returns the panel of the `QtWidgets.QGraphicsItem` type for
    this item.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`panel()`: 这返回此项目的 `QtWidgets.QGraphicsItem` 类型的面板。'
- en: '`panelModality()`: This returns the modality of the `QtWidgets.QGraphicsItem.PanelModality`
    type for this item.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`panelModality()`: 这返回此项目的 `QtWidgets.QGraphicsItem.PanelModality` 类型的模式。'
- en: '`parentItem()`: This returns the parent item of the `QtWidgets.QGraphicsItem`
    type for this item.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`parentItem()`: 这返回此项目的 `QtWidgets.QGraphicsItem` 类型的父级项目。'
- en: '`parentObject()`: This returns the parent object of the `QtWidgets.QGraphicsObject`
    type for this item.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`parentObject()`: 这返回此项目的 `QtWidgets.QGraphicsObject` 类型的父级对象。'
- en: '`parentWidget()`: This returns the parent widget of the `QtWidgets.QGraphicsWidget`
    type for this item.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`parentWidget()`: 这返回此项目的 `QtWidgets.QGraphicsWidget` 类型的父级窗口。'
- en: '`pos()`: This returns the position of the `QtCore.QPointF` type for this item
    in parent (or scene) coordinates.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`pos()`: 这返回此项目在父级（或场景）坐标中的 `QtCore.QPointF` 类型的位置。'
- en: '`prepareGeometryChange()`: This prepares this item for a geometry change.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepareGeometryChange()`: 这为此项目准备几何更改。'
- en: '`resetTransform()`: This resets the transformation matrix for this item.'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`resetTransform()`: 这重置此项目的转换矩阵。'
- en: '`rotation()`: This returns the rotation of this item, in degrees, clockwise
    around the *z* axis.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`rotation()`: 这返回此项目的旋转，以度为单位，沿 *z* 轴顺时针旋转。'
- en: '`scale()`: This returns the scale factor for this item.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`scale()`: 这返回此项目的缩放因子。'
- en: '`scene()`: This returns the scene of the `QtWidgets.QGraphicsScene` type that
    is current for this item.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`scene()`: 这返回对此项目当前有效的 `QtWidgets.QGraphicsScene` 类型的场景。'
- en: '`sceneBoundingRect()`: This returns the bounding rectangle of the `QtCore.QRectF`
    type for this item in scene coordinates.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`sceneBoundingRect()`: 这返回此项目在场景坐标中的 `QtCore.QRectF` 类型的边界矩形。'
- en: '`scenePos()`: This returns the position of this item in scene coordinates.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`scenePos()`: 这返回此项目在场景坐标中的位置。'
- en: '`sceneTransform()`: This returns a transformation matrix of the `QtGui.QTransform`
    type for this item''s scene.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`sceneTransform()`: 这返回此项目场景的 `QtGui.QTransform` 类型的转换矩阵。'
- en: '`scroll(float, float, QtCore.QRectF)`: This scrolls the contents of the rectangle
    (the third parameter) by the *x* (the first parameter) and *y* values (the second
    parameter).'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`scroll(float, float, QtCore.QRectF)`: 这通过 *x*（第一个参数）和 *y* 值（第二个参数）滚动矩形（第三个参数）的内容。'
- en: '`shape()`: This returns the item''s shape of the `QtGui.QPainterPath` type.'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`shape()`: 这返回项目的 `QtGui.QPainterPath` 类型的形状。'
- en: '`show()`: This shows this item.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`show()`: 这将显示此项目。'
- en: '`stackBefore(QtWidgets.QGraphicsItem)`: This stacks this item before the sibling
    item specified in the parameter.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`stackBefore(QtWidgets.QGraphicsItem)`: 这将此项目堆叠在参数中指定的兄弟项目之前。'
- en: '`toGraphicsObject()`: This returns the graphics item cast to a graphics object
    of the `QtWidgets.QGraphicsObject` type.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`toGraphicsObject()`: 这返回将图形项目转换为 `QtWidgets.QGraphicsObject` 类型的图形对象。'
- en: '`toolTip()`: This returns the tooltip of this item.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`toolTip()`: 这返回此项目的工具提示。'
- en: '`topLevelItem()`: This returns the top-level item of the `QtWidgets.QGraphicsItem`
    type for this item.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`topLevelItem()`: 这返回此项目的 `QtWidgets.QGraphicsItem` 类型的顶级项目。'
- en: '`topLevelWidget()`: This returns the top-level widget of the `QtWidgets.QGraphicsWidget`
    type for this item.'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`topLevelWidget()`: 这返回此项目的 `QtWidgets.QGraphicsWidget` 类型的顶级小部件。'
- en: '`transform()`: This returns the transformation matrix of the `QtGui.QTransform`
    type for this item.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`transform()`: 这返回此项目的 `QtGui.QTransform` 类型的变换矩阵。'
- en: '`transformations()`: This returns a list of graphics transforms of this item.'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformations()`: 这返回此项目的图形变换列表。'
- en: '`transformOriginPoint()`: This returns the origin point of the `QtCore.QPointF`
    type for the transformation of this item.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`transformOriginPoint()`: 这返回此项目 `QtCore.QPointF` 类型的变换原点。'
- en: '`type()`: This returns the item''s type as an integer value.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`type()`: 这以整数值返回项目的类型。'
- en: '`ungrabKeyboard()`: This releases the keyboard grab.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`ungrabKeyboard()`: 这释放键盘捕获。'
- en: '`ungrabMouse()`: This releases the mouse grab.'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '`ungrabMouse()`: 这释放鼠标捕获。'
- en: '`unsetCursor()`: This unsets the cursor of this item.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`unsetCursor()`: 这取消此项目的光标。'
- en: '`update(QtCore.QRectF)`: This schedules a redraw of the area specified in the
    parameter in this item.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`update(QtCore.QRectF)`: 这安排在此项目中重绘参数指定的区域。'
- en: '`update(x, y, w, h)`: This schedules a redraw of the area beginning at `x`/`y`,
    with a width of `w` and a height of `h`.'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '`update(x, y, w, h)`: 这安排从 `x`/`y` 开始的区域的重绘，宽度为 `w` 和高度为 `h`。'
- en: '`updateMicroFocus()`: This updates the micro focus of this item.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateMicroFocus()`: 这将更新此项目的微焦点。'
- en: '`window()`: This returns the window of the `QtWidgets.QGraphicsWidget` type
    for this item.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`window()`: 这返回此项目的 `QtWidgets.QGraphicsWidget` 类型的窗口。'
- en: '`zValue()`: This returns the z-value of this item.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`zValue()`: 这返回此项目的 z 值。'
- en: map
  id: totrans-454
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: map
- en: 'These functions are related to the mapping of the graphics item:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与图形项的映射相关：
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtCore.QPointF)`: This maps the point
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromItem(QtWidgets.QGraphicsItem, QtCore.QPointF)`: 这将把点（第二个参数），映射到项目（第一个参数）的坐标系中，并返回映射后的坐标。'
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtGui.QPolygonF)`: This maps the polygon
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromItem(QtWidgets.QGraphicsItem, QtGui.QPolygonF)`: 这将把多边形（第二个参数），映射到项目（第一个参数）的坐标系中，并返回映射后的坐标。'
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: 这将把矩形（第二个参数），映射到项目（第一个参数）的坐标系中，并返回映射后的坐标。'
- en: '`mapFromItem(QtWidgets.QGraphicsItem, QtGui.QPainterPath)`: This maps the path
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the mapped coordinate.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromItem(QtWidgets.QGraphicsItem, QtGui.QPainterPath)`: 这将把路径（第二个参数），映射到项目（第一个参数）的坐标系中，并返回映射后的坐标。'
- en: '`mapFromItem(QtWidgets.QGraphicsItem, x, y)`: This maps the point at the position
    set by `x` and `y`, which is in the coordinate system of the item (the first parameter),
    to the coordinate system of this item, and returns the mapped coordinate.'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromItem(QtWidgets.QGraphicsItem, x, y)`: 这将把由 `x` 和 `y` 设置的位置的点映射到项目（第一个参数）的坐标系中，并返回映射后的坐标。'
- en: '`mapFromItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of the item (the first parameter), to the coordinate system of this item,
    and returns the mapped coordinate.'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromItem(QtWidgets.QGraphicsItem, x, y, w, h)`: 这将把从 `x`/`y` 开始的区域，宽度为
    `w` 和高度为 `h`，映射到项目（第一个参数）的坐标系中，并将其映射到本项目的坐标系中，并返回映射后的坐标。'
- en: '`mapFromParent(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped point.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromParent(QtCore.QPointF)`: 这将把参数指定的点映射到项目的父坐标系中，并返回映射后的点。'
- en: '`mapFromParent(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped polygon.'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromParent(QtGui.QPolygonF)`: 这将参数中指定的多边形（位于项的父坐标系中）映射到该项的坐标系，并返回映射后的多边形。'
- en: '`mapFromParent(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped polygon.'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromParent(QtCore.QRectF)`: 这将参数中指定的矩形（位于项的父坐标系中）映射到该项的坐标系，并返回映射后的多边形。'
- en: '`mapFromParent(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped path.'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromParent(QtGui.QPainterPath)`: 这将参数中指定的路径（位于项的父坐标系中）映射到该项的坐标系，并返回映射后的路径。'
- en: '`mapFromParent(x, y)`: This maps the point at the position by `x` and `y`,
    which is in the item''s parent coordinate system, to the coordinate system of
    this item, and returns the mapped point.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromParent(x, y)`: 这将位于 `x` 和 `y` 位置的点（位于项的父坐标系中）映射到该项的坐标系，并返回映射后的点。'
- en: '`mapFromParent(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the item''s parent coordinate
    system, to the coordinate system of this item, and returns the mapped polygon.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromParent(x, y, w, h)`: 这将位于 `x`/`y` 位置，宽度为 `w` 和高度为 `h` 的区域（位于项的父坐标系中）映射到该项的坐标系，并返回映射后的多边形。'
- en: '`mapFromScene(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped coordinate.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromScene(QtCore.QPointF)`: 这将参数中指定的点（位于项的场景坐标系中）映射到该项的坐标系，并返回映射后的坐标。'
- en: '`mapFromScene(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped polygon.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromScene(QtGui.QPolygonF)`: 这将参数中指定的多边形（位于项的场景坐标系中）映射到该项的坐标系，并返回映射后的多边形。'
- en: '`mapFromScene(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped polygon.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromScene(QtCore.QRectF)`: 这将参数中指定的矩形（位于项的场景坐标系中）映射到该项的坐标系，并返回映射后的多边形。'
- en: '`mapFromScene(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the item''s scene coordinate system, to the coordinate system of this
    item, and returns the mapped path.'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromScene(QtGui.QPainterPath)`: 这将参数中指定的路径（位于项的场景坐标系中）映射到该项的坐标系，并返回映射后的路径。'
- en: '`mapFromScene(x, y)`: This maps the point at the position by `x` and `y`, which
    is in the item''s scene coordinate system, to the coordinate system of this item,
    and returns the mapped point.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromScene(x, y)`: 这将位于 `x` 和 `y` 位置的点（位于项的场景坐标系中）映射到该项的坐标系，并返回映射后的点。'
- en: '`mapFromScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with a
    width of `w` and a height of `h`, which is in the item''s scene coordinate system,
    to the coordinate system of this item, and returns the mapped polygon.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapFromScene(x, y, w, h)`: 这将位于 `x`/`y` 位置，宽度为 `w` 和高度为 `h` 的区域（位于项的场景坐标系中）映射到该项的坐标系，并返回映射后的多边形。'
- en: '`mapRectFromItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of the item (the first
    parameter), to the coordinate system of this item, and returns the new mapped
    rectangle.'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectFromItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: 这将位于项（第一个参数）坐标系中的矩形（第二个参数）映射到该项的坐标系，并返回新的映射矩形。'
- en: '`mapRectFromItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area
    beginning at `x`/`y`, with a width of `w` and a height of `h`, which is in the
    coordinate system of the item (the first parameter), to the coordinate system
    of this item, and returns the new mapped rectangle.'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectFromItem(QtWidgets.QGraphicsItem, x, y, w, h)`: 这将位于 `x`/`y` 位置，宽度为
    `w` 和高度为 `h` 的区域（位于项的坐标系中，第一个参数）映射到该项的坐标系，并返回新的映射矩形。'
- en: '`mapRectFromParent(QtCore.QRectF)`: This maps the rectangle specified in the
    parameter, which is in this item''s parent coordinate system, to the coordinate
    system of this item, and returns the new mapped rectangle.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectFromParent(QtCore.QRectF)`: 这将参数中指定的矩形（在该项目的父坐标系中）映射到该项目的坐标系，并返回新的映射矩形。'
- en: '`mapRectFromParent(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in this item''s parent coordinate
    system, to the coordinate system of this item, and returns the new mapped rectangle.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectFromParent(x, y, w, h)`: 这将起始于 `x`/`y`，宽度为 `w` 和高度为 `h` 的区域（在该项目的父坐标系中）映射到该项目的坐标系，并返回新的映射矩形。'
- en: '`mapRectFromScene(QtCore.QRectF)`: This maps the rectangle specified in the
    parameter, which is in the scene coordinate system, to the coordinate system of
    this item, and returns the new mapped rectangle.'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectFromScene(QtCore.QRectF)`: 这将参数中指定的矩形（在场景坐标系中）映射到该项目的坐标系，并返回新的映射矩形。'
- en: '`mapRectFromScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the scene coordinate system, to
    the coordinate system of this item, and returns the new mapped rectangle.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectFromScene(x, y, w, h)`: 这将起始于 `x`/`y`，宽度为 `w` 和高度为 `h` 的区域（在场景坐标系中）映射到该项目的坐标系，并返回新的映射矩形。'
- en: '`mapRectToItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the new mapped
    rectangle.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectToItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: 这将矩形（第二个参数，即第二个参数），映射到项目（第一个参数，即第一个参数）的坐标系，并返回新的映射矩形。'
- en: '`mapRectToItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of this item, to the coordinate system of the item (the first parameter),
    and returns the new mapped rectangle.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectToItem(QtWidgets.QGraphicsItem, x, y, w, h)`: 这将起始于 `x`/`y`，宽度为 `w`
    和高度为 `h` 的区域（在该项目的坐标系中）映射到项目（第一个参数）的坐标系，并返回新的映射矩形。'
- en: '`mapRectToParent(QtCore.QRectF)`: This maps the rectangle specified in the
    parameter, which is in the coordinate system of this item, to the parent coordinate
    system of this item, and returns the new mapped rectangle.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectToParent(QtCore.QRectF)`: 这将参数中指定的矩形（在该项目的坐标系中）映射到该项目的父坐标系，并返回新的映射矩形。'
- en: '`mapRectToParent(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the coordinate system of this
    item, to the parent coordinate system of this item, and returns the new mapped
    rectangle.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectToParent(x, y, w, h)`: 这将起始于 `x`/`y`，宽度为 `w` 和高度为 `h` 的区域（在该项目的坐标系中）映射到该项目的父坐标系，并返回新的映射矩形。'
- en: '`mapRectToScene(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the coordinate system of this item, to the scene coordinate system,
    and returns the new mapped rectangle.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectToScene(QtCore.QRectF)`: 这将参数中指定的矩形（在该项目的坐标系中）映射到场景坐标系，并返回新的映射矩形。'
- en: '`mapRectToScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with
    a width of `w` and a height of `h`, which is in the coordinate system of this
    item, to the scene coordinate system, and returns the new mapped rectangle.'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapRectToScene(x, y, w, h)`: 这将起始于 `x`/`y`，宽度为 `w` 和高度为 `h` 的区域（在该项目的坐标系中）映射到场景坐标系，并返回新的映射矩形。'
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtCore.QPointF)`: This maps the point (the
    second parameter), which is in the coordinate system of this item, to the coordinate
    system of the item (the first parameter), and returns the mapped point.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToItem(QtWidgets.QGraphicsItem, QtCore.QPointF)`: 这将点（第二个参数），映射到项目（第一个参数）的坐标系，并返回映射的点。'
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtGui.QPolygonF)`: This maps the polygon
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the mapped polygon.'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToItem(QtWidgets.QGraphicsItem, QtGui.QPolygonF)`: 这将多边形（第二个参数），映射到项目（第一个参数）的坐标系，并返回映射的多边形。'
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: This maps the rectangle
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the mapped rectangle.'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToItem(QtWidgets.QGraphicsItem, QtCore.QRectF)`: 将矩形（第二个参数），位于此项目的坐标系中，映射到项目（第一个参数）的坐标系中，并返回映射后的矩形。'
- en: '`mapToItem(QtWidgets.QGraphicsItem, QtGui.QPainterPath)`: This maps the path
    (the second parameter), which is in the coordinate system of this item, to the
    coordinate system of the item (the first parameter), and returns the mapped path.'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToItem(QtWidgets.QGraphicsItem, QtGui.QPainterPath)`: 将路径（第二个参数），位于此项目的坐标系中，映射到项目（第一个参数）的坐标系中，并返回映射后的路径。'
- en: '`mapToItem(QtWidgets.QGraphicsItem, x, y)`: This maps the point at the position
    set by `x` and `y`, which is in the coordinate system of this item, to the coordinate
    system of the item (the first parameter), and returns the mapped point.'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToItem(QtWidgets.QGraphicsItem, x, y)`: 将由 `x` 和 `y` 设置的位置的点（位于此项目的坐标系中）映射到项目（第一个参数）的坐标系中，并返回映射后的点。'
- en: '`mapToItem(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of this item, to the coordinate system of the item (the first parameter),
    and returns the mapped polygon.'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToItem(QtWidgets.QGraphicsItem, x, y, w, h)`: 将从 `x`/`y` 开始，宽度为 `w` 和高度为
    `h` 的区域（位于此项目的坐标系中）映射到项目（第一个参数）的坐标系中，并返回映射后的多边形。'
- en: '`mapToParent(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped point.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToParent(QtCore.QPointF)`: 将参数中指定的点（位于此项目的坐标系中）映射到此项目父项目的坐标系中，并返回映射后的点。'
- en: '`mapToParent(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped polygon.'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToParent(QtGui.QPolygonF)`: 将参数中指定的多边形（位于此项目的坐标系中）映射到此项目父项目的坐标系中，并返回映射后的多边形。'
- en: '`mapToParent(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped rectangle'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToParent(QtCore.QRectF)`: 将参数中指定的矩形（位于此项目的坐标系中）映射到此项目父项目的坐标系中，并返回映射后的矩形'
- en: '`mapToParent(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    parent of this item, and returns the mapped path.'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToParent(QtGui.QPainterPath)`: 将参数中指定的路径（位于此项目的坐标系中）映射到此项目父项目的坐标系中，并返回映射后的路径。'
- en: '`mapToParent(x, y)`: This maps the point at the position by `x` and `y`, which
    is in the coordinate system of this item, to the coordinate system of the parent
    of this item, and returns the mapped point.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToParent(x, y)`: 将由 `x` 和 `y` 定位的点（位于此项目的坐标系中）映射到此项目父项目的坐标系中，并返回映射后的点。'
- en: '`mapToParent(QtWidgets.QGraphicsItem, x, y, w, h)`: This maps the area beginning
    at `x`/`y`, with a width of `w` and a height of `h`, which is in the coordinate
    system of this item, to the coordinate system of the parent of this item, and
    returns the mapped polygon.'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToParent(QtWidgets.QGraphicsItem, x, y, w, h)`: 将从 `x`/`y` 开始，宽度为 `w` 和高度为
    `h` 的区域（位于此项目的坐标系中）映射到此项目父项目的坐标系中，并返回映射后的多边形。'
- en: '`mapToScene(QtCore.QPointF)`: This maps the point specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped point.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToScene(QtCore.QPointF)`: 将参数中指定的点（位于此项目的坐标系中）映射到场景的坐标系中，并返回映射后的点。'
- en: '`mapToScene(QtGui.QPolygonF)`: This maps the polygon specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped polygon.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToScene(QtGui.QPolygonF)`: 将参数中指定的多边形（位于此项目的坐标系中）映射到场景的坐标系中，并返回映射后的多边形。'
- en: '`mapToScene(QtCore.QRectF)`: This maps the rectangle specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped rectangle.'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToScene(QtCore.QRectF)`: 将参数中指定的矩形（位于此项目的坐标系中）映射到场景的坐标系中，并返回映射后的矩形。'
- en: '`mapToScene(QtGui.QPainterPath)`: This maps the path specified in the parameter,
    which is in the coordinate system of this item, to the coordinate system of the
    scene, and returns the mapped path.'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToScene(QtGui.QPainterPath)`: 此函数将位于此项目坐标系中的参数中指定的路径映射到场景坐标系，并返回映射的路径。'
- en: '`mapToScene(x, y)`: This maps the point at the position by `x` and `y`, which
    is in the coordinate system of this item, to the coordinate system of the scene,
    and returns the mapped point.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToScene(x, y)`: 此函数将位于此项目坐标系中的由 `x` 和 `y` 定位的点映射到场景坐标系，并返回映射的点。'
- en: '`mapToScene(x, y, w, h)`: This maps the area beginning at `x`/`y`, with a width
    of `w` and a height of `h`, which is in the coordinate system of this item, to
    the coordinate system of the scene, and returns the mapped polygon.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapToScene(x, y, w, h)`: 此函数将位于此项目坐标系中的以 `x`/`y` 为起点，宽度为 `w`，高度为 `h` 的区域映射到场景坐标系，并返回映射的多边形。'
- en: events
  id: totrans-504
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件
- en: 'These functions are related to events, such as event handlers:'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 这些函数与事件相关，例如事件处理器：
- en: '`contextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)`: This event handler
    receives context menu events for this item.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`contextMenuEvent(QtWidgets.QGraphicsSceneContextMenuEvent)`: 此事件处理器接收此项目的上下文菜单事件。'
- en: '`dragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drag enter events for this item for the event specified in the parameter.'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragEnterEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理器接收此项目针对参数中指定事件的拖动进入事件。'
- en: '`dragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receive drag leave events for this item for the event specified in the parameter.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragLeaveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理器接收此项目针对参数中指定事件的拖动离开事件。'
- en: '`dragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler
    receives drag move events for this item for the event specified in the parameter.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: '`dragMoveEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理器接收此项目针对参数中指定事件的拖动移动事件。'
- en: '`dropEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: This event handler receives
    drop events for this item for the event specified in the parameter.'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`dropEvent(QtWidgets.QGraphicsSceneDragDropEvent)`: 此事件处理器接收此项目针对参数中指定事件的放下事件。'
- en: '`focusOutEvent(QtGui.QFocusEvent)`: This event handler receives the keyboard
    focus events that are passed with an event parameter when the focus is lost.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`focusOutEvent(QtGui.QFocusEvent)`: 此事件处理器接收在失去焦点时带有事件参数传递的键盘焦点事件。'
- en: '`focusInEvent(QtGui.QFocusEvent)`: This event handler receives the keyboard
    focus events that are passed with an event parameter when the focus is received.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '`focusInEvent(QtGui.QFocusEvent)`: 此事件处理器接收在获得焦点时带有事件参数传递的键盘焦点事件。'
- en: '`hoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)`: This event handler receives
    hover enter events for this item for the event specified in the parameter.'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`hoverEnterEvent(QtWidgets.QGraphicsSceneHoverEvent)`: 此事件处理器接收此项目针对参数中指定事件的悬停进入事件。'
- en: '`hoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)`: This event handler receives
    hover leave events for this item for the event specified in the parameter.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`hoverLeaveEvent(QtWidgets.QGraphicsSceneHoverEvent)`: 此事件处理器接收此项目针对参数中指定事件的悬停离开事件。'
- en: '`hoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)`: This event handler receives
    hover move events for this item for the event specified in the parameter'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: '`hoverMoveEvent(QtWidgets.QGraphicsSceneHoverEvent)`: 此事件处理器接收此项目针对参数中指定的事件的悬停移动事件'
- en: '`inputMethodEvent(QtGui.QInputMethodEvent)`: This event handler receives input
    method events for this item.'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodEvent(QtGui.QInputMethodEvent)`: 此事件处理器接收此项目的输入法事件。'
- en: '`installSceneEventFilter(QtWidgets.QGraphicsItem)`: This installs the event
    filter specified in the parameter for this item.'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`installSceneEventFilter(QtWidgets.QGraphicsItem)`: 此函数为此项目安装参数中指定的事件过滤器。'
- en: '`keyPressEvent(QtGui.QKeyEvent)`: This event handler receives key press events
    for this item with the event passed in the parameter.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyPressEvent(QtGui.QKeyEvent)`: 此事件处理器接收通过参数传递的事件的按键事件为此项目。'
- en: '`keyReleaseEvent(QtGui.QKeyEvent)`: This event handler receives key release
    events for this item with the event passed in the parameter.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`keyReleaseEvent(QtGui.QKeyEvent)`: 此事件处理器接收通过参数传递的事件的按键释放事件为此项目。'
- en: '`mouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse double-click events for this item with the event passed in the
    parameter.'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseDoubleClickEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理器接收通过参数传递的事件的鼠标双击事件为此项目。'
- en: '`mouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler receives
    mouse move events for this item with the event passed in the parameter.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseMoveEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理器接收此项目的鼠标移动事件，事件通过参数传入。'
- en: '`mousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler receives
    mouse press events for this item with the event passed in the parameter.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`mousePressEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理器接收此项目的鼠标按下事件，事件通过参数传入。'
- en: '`mouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)`: This event handler
    receives mouse release events for this item with the event passed in the parameter.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`mouseReleaseEvent(QtWidgets.QGraphicsSceneMouseEvent)`: 此事件处理器接收此项目的鼠标释放事件，事件通过参数传入。'
- en: '`removeSceneEventFilter(QtWidgets.QGraphicsItem)`: This removes the event filter
    specified in the parameter for this item.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeSceneEventFilter(QtWidgets.QGraphicsItem)`: 这将移除为此项目指定的参数中的事件过滤器。'
- en: '`sceneEvent(QtCore.QEvent)`: This receives events for this item.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`sceneEvent(QtCore.QEvent)`: 这接收此项目的事件。'
- en: '`sceneEventFilter(QtWidgets.QGraphicsItem, QtCore.QEvent)`: This filters events
    for the item (the first parameter) with the filtered event (the second parameter).'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`sceneEventFilter(QtWidgets.QGraphicsItem, QtCore.QEvent)`: 这个过滤器为项目（第一个参数）和过滤事件（第二个参数）过滤事件。'
- en: '`wheelEvent(QtWidgets.QGraphicsSceneWheelEvent)`: This event handler receives
    mouse wheel events for this item with the event passed in the parameter.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`wheelEvent(QtWidgets.QGraphicsSceneWheelEvent)`: 此事件处理器接收此项目的鼠标滚轮事件，事件通过参数传入。'
- en: Summary
  id: totrans-528
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we provided descriptions for the most commonly used classes
    of the graphical elements that can be used with GUI applications.
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们提供了可用于GUI应用程序的图形元素最常用类的描述。
- en: In the next chapter, we will describe various graphical effects for these elements.
    We'll also cover special modules for implementing additional technologies during
    the application's development.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将描述这些元素的各种图形效果。我们还将介绍在应用程序开发期间实现附加技术的特殊模块。
