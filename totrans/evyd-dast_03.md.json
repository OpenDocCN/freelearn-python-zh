["```py\n    //Array backed lists \n    ArrayList myArrayList = new ArrayList(); \n    List<string> myOtherArrayList = new List<string>(); \n\n    //Linked lists \n    LinkedList<string> myLinkedList = new LinkedList<string>(); \n\n```", "```py\n    //Array backed lists \n    List<string> myArrayList = new ArrayList<string>(); \n\n    //Linked lists \n    LinkedList<string> myLinkedList = new LinkedList<string>(); \n\n```", "```py\n    //Array backed lists \n    NSArray *myArrayList = [NSArray array]; \n\n    //Linked lists \n    NSMutableArray *myLinkedList = [NSMutableArray array]; \n\n```", "```py\n    //Lists \n    var myArray = [string]() \n    var myOtherArray: Array<string> = [String]() \n\n```", "```py\n    List<User> _users; \n    public LoggedInUserList() \n    { \n        _users = new List<User>(); \n    } \n\n    bool CanAddUser(User user) \n    { \n        if (_users.Contains(user) || _users.Count >= 30) \n        { \n            return false; \n        } else { \n            return true; \n        } \n    } \n\n    public void UserAuthenticated(User user) \n    { \n        if (this.CanAddUser(user)) \n        { \n            _users.Add(user); \n        } \n    } \n\n    public void UserLoggedOut(User user) \n    { \n        _users.Remove(user); \n    } \n\n```", "```py\n    List<User> _users; \n    public LoggedInUserList() \n    { \n        _users = new LinkedList<User>; \n    } \n\n    boolean CanAddUser(User user) \n    { \n        if (_users.contains(user) || _users.size() >= 30) \n        { \n            return false; \n        } else { \n            return true; \n        } \n    } \n\n    public void UserAuthenticated(User user) \n    { \n        if (this.CanAddUser(user)) \n        { \n            _users.add(user); \n        } \n    } \n\n    public void UserLoggedOut(User user) \n    { \n        _users.remove(user); \n    } \n\n```", "```py\n    @interface EDSLoggedInUserList() \n    { \n        NSMutableArray *_users; \n    } \n    -(instancetype)init \n    { \n        if (self = [super init]) \n        { \n            _users = [NSMutableArray array]; \n        }   \n        return self; \n    } \n\n    -(BOOL)canAddUser:(EDSUser *)user \n    { \n        if ([_users containsObject:user] || [_users count] >= 30) \n        { \n            return false; \n        } else { \n            return true; \n        } \n    } \n\n    -(void)userAuthenticated:(EDSUser *)user \n    { \n        if ([self canAddUser:user]) \n        { \n            [_users addObject:user]; \n        } \n    } \n\n    -(void)userLoggedOut:(EDSUser *)user \n    { \n        [_users removeObject:user]; \n    } \n\n```", "```py\n    var _users: Array = [User]() \n    init() { } \n\n    func canAddUser(user: User) -> Bool \n    { \n        if (_users.contains(user) || _users.count >= 30) \n        { \n            return false; \n        } else { \n            return true; \n        } \n    } \n\n    public func userAuthenticated(user: User) \n    { \n        if (self.canAddUser(user)) \n        { \n            _users.append(user) \n        } \n    } \n\n    public func userLoggedOut(user: User) \n    { \n        if let index = _users.indexOf(user) \n        { \n            _users.removeAtIndex(index) \n        } \n    } \n\n```", "```py\n    //C# \n    public int Add(int a, int b) \n    public double Add(double a, double b) \n    public float Add(float a, float b) \n\n```", "```py\n    public T Add<T>(T a, T b) \n\n```", "```py\n    LinkedList<Waypoint> route; \n    LinkedListNode<Waypoint> current; \n    public WaypointList() \n    { \n        this.route = new LinkedList<Waypoint>(); \n    } \n\n```", "```py\n    public void AddWaypoints(List<Waypoint> waypoints) \n    { \n        foreach (Waypoint w in waypoints) \n        { \n            this.route.AddLast(w); \n        } \n    } \n\n    public bool RemoveWaypoint(Waypoint waypoint) \n    { \n        return this.route.Remove(waypoint); \n    } \n\n```", "```py\n    public void InsertWaypointsBefore(List<Waypoint> waypoints, Waypoint before) \n    { \n        LinkedListNode<Waypoint> node = this.route.Find(before); \n        if (node != null) \n        { \n            foreach (Waypoint w in waypoints) \n            { \n                this.route.AddBefore(node, w); \n            } \n        } else { \n                this.AddWaypoints(waypoints); \n        }  \n    } \n\n```", "```py\n    public bool StartRoute() \n    { \n        if (this.route.Count > 1) \n        { \n            this.current = this.StartingLine(); \n            return this.MoveToNextWaypoint(); \n        } \n        return false; \n    } \n\n```", "```py\n    public bool MoveToNextWaypoint() \n    { \n        if (this.current != null) \n        { \n            this.current.Value.DeactivateWaypoint(); \n            if (this.current != this.FinishLine()) \n            { \n                this.current = this.current.Next; \n                return true; \n            } \n            return false; \n        } \n        return false; \n    } \n\n    public bool MoveToPreviousWaypoint() \n    { \n        if (this.current != null && this.current != this.StartingLine()) \n        { \n            this.current = this.current.Previous; \n            this.current.Value.ReactivateWaypoint(); \n            return true; \n        } \n        return false; \n    } \n\n```", "```py\n    public LinkedListNode<Waypoint> StartingLine() \n    { \n        return this.route.First; \n    } \n\n    public LinkedListNode<Waypoint> FinishLine() \n    { \n        return this.route.Last; \n    } \n\n    public LinkedListNode<Waypoint> CurrentPosition() \n    { \n        return this.current; \n    } \n\n```", "```py\n    LinkedList<Waypoint> route; \n    Waypoint current; \n    public WaypointList() \n    { \n        this.route = new LinkedList<Waypoint>(); \n    } \n\n```", "```py\n    public void AddWaypoints(List<Waypoint> waypoints) \n    { \n        this.route.addAll(waypoints); \n    } \n\n    public boolean RemoveWaypoint(Waypoint waypoint) \n    { \n        return this.route.remove(waypoint); \n    } \n\n```", "```py\n    public void InsertWaypointsBefore(List<Waypoint> waypoints, Waypoint before) \n    { \n        int index = this.route.indexOf(before); \n        if (index >= 0) \n        { \n            this.route.addAll(index, waypoints); \n        } else { \n            this.AddWaypoints(waypoints); \n        } \n    } \n\n```", "```py\n    public boolean StartRoute() \n    { \n        if (this.route.size() > 1) \n        { \n            this.current = this.StartingLine(); \n            return this.MoveToNextWaypoint(); \n        } \n        return false; \n    } \n\n```", "```py\n    public boolean MoveToNextWaypoint() \n    { \n        if (this.current != null) \n        { \n            this.current.DeactivateWaypoint(); \n            if (this.current != this.FinishLine()) \n            { \n                int index = this.route.indexOf(this.current); \n                this.current = this.route.listIterator(index).next(); \n                return true; \n            } \n            return false; \n        } \n        return false; \n    } \n\n    public boolean MoveToPreviousWaypoint() \n    { \n        if (this.current != null && this.current != this.StartingLine()) \n        { \n            int index = this.route.indexOf(this.current); \n            this.current = this.route.listIterator(index).previous(); \n            this.current.ReactivateWaypoint(); \n            return true; \n        } \n        return false; \n    } \n\n```", "```py\n    public Waypoint StartingLine() \n    { \n        return this.route.getFirst(); \n    } \n\n    public Waypoint FinishLine() \n    { \n        return this.route.getLast(); \n    } \n\n    public Waypoint CurrentWaypoint() \n    { \n        return this.current; \n    } \n\n```", "```py\n    @interface EDSWaypointList() \n    { \n        NSMutableArray *_route; \n        EDSWaypoint *_current; \n    } \n    -(instancetype)init \n    { \n        if (self = [super init]) \n        { \n            _route = [NSMutableArray array]; \n        } \n        return self; \n    } \n\n```", "```py\n    -(void)addWaypoints:(NSArray*)waypoints \n    { \n        [_route addObjectsFromArray:waypoints]; \n    } \n\n    -(BOOL)removeWaypoint:(EDSWaypoint*)waypoint \n    { \n        if ([_route containsObject:waypoint]) \n        { \n            [_route removeObject:waypoint]; \n            return YES; \n        } \n        return NO; \n    } \n\n```", "```py\n    -(void)insertWaypoints:(NSArray*)waypoints beforeWaypoint:(EDSWaypoint*)before \n    { \n        NSUInteger index = [_route indexOfObject:before]; \n        if (index == NSNotFound) \n        { \n            [self addWaypoints:waypoints]; \n        } else { \n            NSRange range = NSMakeRange(index, [waypoints count]); \n            NSIndexSet *indexSet = [NSIndexSetindexSetWithIndexesInRange:range]; \n            [_route insertObjects:waypoints atIndexes:indexSet]; \n        } \n    } \n\n```", "```py\n    -(BOOL)startRoute \n    { \n        if ([_route count] > 1) \n        { \n            _current = [self startingLine]; \n            return [self moveToNextWaypoint]; \n        } \n        return NO; \n    } \n\n```", "```py\n    -(BOOL)moveToNextWaypoint \n    { \n        if (_current) \n        { \n            [_current deactivateWaypoint]; \n            if (_current != [self finishLine]) \n            { \n                NSUInteger index = [_route indexOfObject:_current]; \n                _current = [_route objectAtIndex:index+1]; \n                return YES; \n            } \n            return NO; \n        } \n        return NO; \n    } \n\n    -(BOOL)moveToPreviousWaypoint \n    { \n        if (_current && _current != [self startingLine]) \n        { \n            NSUInteger index = [_route indexOfObject:_current]; \n            _current = [_route objectAtIndex:index-1]; \n            [_current reactivateWaypoint]; \n            return YES; \n        } \n        return NO; \n    } \n\n```", "```py\n    -(EDSWaypoint*)startingLine \n    { \n        return [_route firstObject]; \n    } \n\n    -(EDSWaypoint*)finishLine \n    { \n        return [_route lastObject]; \n    } \n\n    -(EDSWaypoint*)currentWaypoint \n    { \n        return _current; \n    } \n\n```", "```py\n    var _route: Array = [Waypoint]() \n    var _current: Waypoint?  \n    init() { } \n\n```", "```py\n    public func addWaypoints(waypoints: Array<Waypoint>) \n    { \n        _route.appendContentsOf(waypoints) \n    } \n\n    public func removeWaypoint(waypoint: Waypoint) -> Bool \n    { \n        if let index = _route.indexOf(waypoint) \n        { \n            _route.removeAtIndex(index) \n            return true \n        } \n        return false \n    } \n\n```", "```py\n    public func insertWaypoints(waypoints: Array<Waypoint>, before: Waypoint) \n    { \n        if let index = _route.indexOf(before) \n        { \n            _route.insertContentsOf(waypoints, at:index) \n        } else { \n            addWaypoints(waypoints) \n        } \n    } \n\n```", "```py\n    public func startRoute() -> Bool \n    { \n        if _route.count > 1 \n        { \n            _current = startingLine() \n            return moveToNextWaypoint() \n        } \n        return false \n    } \n\n```", "```py\n    public func moveToNextWaypoint() -> Bool \n    { \n        if (_current != nil) \n        { \n            _current!.DeactivateWaypoint() \n            if _current != self.finishLine() \n            { \n                let index = _route.indexOf(_current!) \n                _current = _route[index!+1] \n                return true \n            } \n            return false; \n        } \n        return false \n    } \n\n    public func moveToPreviousWaypoint() -> Bool \n    { \n        if (_current != nil && _current != self.startingLine()) \n        { \n            let index = _route.indexOf(_current!) \n            _current = _route[index!-1] \n            _current!.ReactivateWaypoint() \n            return true \n        } \n    return false \n} \n\n```", "```py\n    public func startingLine() -> Waypoint \n    { \n        return _route.first! \n    } \n\n    public func finishLine() -> Waypoint \n    { \n        return _route.last! \n    } \n\n    public func currentWaypoint() -> Waypoint \n    { \n        return _current!; \n    } \n\n```"]