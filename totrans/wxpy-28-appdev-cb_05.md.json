["```py\nclass MyFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(MyFrame, self).__init__(parent, *args, **kwargs)\n\n        # Layout\n        self.CreateStatusBar()\n        self.PushStatusText(\"Close this window\")\n\n        # Event Handlers\n        self.Bind(wx.EVT_CLOSE, \n\n    def OnClose(self, event):\n        result = wx.MessageBox(\"Are you sure you want \"\n                               \"to close this window?\",\n                               style=wx.CENTER|\\\n                                     wx.ICON_QUESTION|\\\n                                     wx.YES_NO)\n        if result == wx.NO:\n            event.Veto()\n        else:\n            event.Skip()\n\n```", "```py\nwx.MessageBox(message, caption=””, style=wx.OK|wx.CENTER,\n                               parent=None, x=-1, y=-1)\n\n```", "```py\nclass ToolTipTestPanel(wx.Panel):\n    def __init__(self, parent):\n        super(ToolTipTestPanel, self).__init__(parent)\n\n        # Attributes\n        self.button = wx.Button(self, label=\"Go\")\n\n        # Setup\n        self.button.SetToolTipString(\"Launch the shuttle\")\n        self.timer = wx.Timer(self)\n        self.count = 11\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.button, 0, wx.ALIGN_CENTER)\n        msizer = wx.BoxSizer(wx.HORIZONTAL)\n        msizer.Add(sizer, 1, wx.ALIGN_CENTER)\n        self.SetSizer(msizer)\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnGo, self.button)\n        self.Bind(wx.EVT_TIMER, self.OnTimer, self.timer)\n\n    def OnGo(self, event):\n        self.button.Disable()\n        print self.timer.Start(1000)\n        tlw = self.GetTopLevelParent()\n        tlw.PushStatusText(\"Launch initiated...\")\n\n    def OnTimer(self, event):\n        tlw = self.GetTopLevelParent()\n        self.count -= 1\n        tlw.PushStatusText(\"%d\" % self.count)\n        if self.count == 0:\n            self.timer.Stop()\n            wx.MessageBox(\"Shuttle Launched!\")\n\n```", "```py\nimport wx.lib.agw.supertooltip as supertooltip\n\nclass SuperToolTipTestPanel (wx.Panel):\n    def __init__(self, parent):\n        super(SuperToolTipTestPanel, self).__init__(parent)\n\n        # Attributes\n        self.button = wx.Button(self, label=\"Go\")\n        msg = \"Launches the shuttle\"\n        self.stip = supertooltip.SuperToolTip(msg)\n\n        # Setup SuperToolTip\n        bodybmp = wx.Bitmap(\"earth.png\", wx.BITMAP_TYPE_PNG)\n        self.stip.SetBodyImage(bodybmp)\n        self.stip.SetHeader(\"Launch Control\")\n        footbmp = wx.Bitmap(\"warning.png\", wx.BITMAP_TYPE_PNG)\n        self.stip.SetFooterBitmap(footbmp)\n        footer = \"Warning: This is serious business\"\n        self.stip.SetFooter(footer)          \n        self.stip.ApplyStyle(\"XP Blue\")\n        self.stip.SetTarget(self.button)\n\n```", "```py\nimport wx.lib.agw.balloontip as btip\n\nclass TaskBarBalloon(wx.TaskBarIcon):\n    def __init__(self):\n        super(TaskBarBalloon, self).__init__()\n\n        # Setup\n        icon = wx.Icon(\"face-monkey.png\", wx.BITMAP_TYPE_PNG)\n        self.SetIcon(icon)\n\n        # Setup BallooTip\n        title=\"BalloonTip Recipe\"\n        msg = \"Welcome to the Balloon Tip Recipe\"\n        bmp = wx.BitmapFromIcon(icon)\n        self.tip = btip.BalloonTip(topicon=bmp,\n                                   toptitle=title,\n                                   message=msg,\n                                   shape=btip.BT_ROUNDED,\n                                   tipstyle=btip.BT_BUTTON)\n        self.tip.SetStartDelay(1000)\n        self.tip.SetTarget(self)\n\n        # Event Handlers\n        self.Bind(wx.EVT_MENU, self.OnMenu)\n\n    def CreatePopupMenu(self):\n        menu = wx.Menu()\n        menu.Append(wx.ID_CLOSE, \"Exit\")\n        return menu\n\n    def OnMenu(self, event):\n        self.RemoveIcon()\n        self.tip.DestroyTimer()\n        self.Destroy()\n\n```", "```py\nclass ProgressSplashScreen(wx.SplashScreen):\n    def __init__(self, *args, **kwargs):\n        super(ProgressSplashScreen, self).__init__(*args,\n                                                   **kwargs)\n\n        # Attributes\n        self.gauge = wx.Gauge(self, size=(-1, 16))\n\n        # Setup\n        rect = self.GetClientRect()\n        new_size = (rect.width, 16)\n        self.gauge.SetSize(new_size)\n        self.SetSize((rect.width, rect.height + 16))\n        self.gauge.SetPosition((0, rect.height))\n\n    def SetProgress(self, percent):\n        \"\"\"Set the indicator gauges progress\"\"\"\n        self.gauge.SetValue(percent)\n\n    def GetProgress(self):\n        \"\"\"Get the current progress of the gauge\"\"\"\n        return self.gauge.GetValue()\n\n```", "```py\nimport wx\nimport os\nimport sys\nimport urllib2\n\nclass DownloaderApp(wx.App):\n    def OnInit(self):\n        # Create a hidden frame so that the eventloop\n        # does not automatically exit before we show\n        # the download dialog.\n        self.frame = wx.Frame(None)\n        self.frame.Hide()\n        return True\n\n    def Cleanup(self):\n        self.frame.Destroy()\n\n```", "```py\n    def DownloadFile(self, url):\n        \"\"\"Downloads the file\n        @return: bool (success/fail)\n        \"\"\"\n        dialog = None\n        try:\n            # Open the url to read from and\n            # the local file to write the downloaded\n            # data to.\n            webfile = urllib2.urlopen(url)\n            size = int(webfile.info()['Content-Length'])\n            dlpath = os.path.abspath(os.getcwd())\n            dlfile = url.split('/')[-1]\n            dlpath = GetUniqueName(dlpath, dlfile)\n            localfile = open(dlpath, 'wb')\n\n            # Create the ProgressDialog\n            dlmsg = \"Downloading: %s\" % dlfile\n            style = (wx.PD_APP_MODAL\n                     |wx.PD_CAN_ABORT\n                     |wx.PD_ELAPSED_TIME\n                     |wx.PD_REMAINING_TIME)\n            dialog = wx.ProgressDialog(\"Download Dialog\",\n                                       dlmsg,\n                                       maximum=size,\n                                       parent=self.frame,\n                                       style=style)\n\n            # Download the file\n            blk_sz = 4096\n            read = 0\n            keep_going = True\n            while read < size and keep_going:\n                data = webfile.read(blk_sz)\n                localfile.write(data)\n                read += len(data)\n                keep_going, skip = dialog.Update(read)\n\n            localfile.close()\n            webfile.close()\n        finally:\n            # All done so cleanup top level windows\n            # to cause the event loop to exit.\n            if dialog:\n                dialog.Destroy()\n            self.Cleanup()\n\n```", "```py\n#--- Utility Functions ----#\n\ndef GetUniqueName(path, name):\n    \"\"\"Make a file name that will be unique in case a file\n    of the same name already exists at that path.\n    @param path: Root path to folder of files destination\n    @param name: desired file name base\n    @return: string\n    \"\"\"\n    tmpname = os.path.join(path, name)\n    if os.path.exists(tmpname):\n        if '.' not in name:\n            ext = ''\n            fbase = name\n        else:\n            ext = '.' + name.split('.')[-1]\n            fbase = name[:-1 * len(ext)]\n\n        inc = len([x for x in os.listdir(path)\n                   if x.startswith(fbase)])\n        newname = \"%s-%d%s\" % (fbase, inc, ext)\n        tmpname = os.path.join(path, newname)\n        while os.path.exists(tmpname):\n            inc = inc + 1\n            newname = \"%s-%d%s\" % (fbase, inc, ext)\n            tmpname = os.path.join(path, newname)\n\n    return tmpname\n\n```", "```py\n#---- Main Execution ----#\nif __name__ == \"__main__\":\n    if len(sys.argv) > 1:\n        url = sys.argv[1]\n        app = DownloaderApp(False)\n        # Start with a slight delay so the eventloop\n        # can start running, to ensure our dialog gets\n        # shown\n        wx.CallLater(2000, app.DownloadFile, url)\n        app.MainLoop()\n    else:\n        # Print some help text\n        print((\"wxPython Cookbook - ProgressDialog\\n\"\n               \"usage: downloader url\\n\"))\n\n```", "```py\nimport wx\nimport sys\n\nclass AboutRecipeFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(AboutRecipeFrame, self).__init__(*args,\n                                               **kwargs)\n\n        # Attributes\n        self.panel = wx.Panel(self)\n\n        # Setup Menus\n        menubar = wx.MenuBar()\n        helpmenu = wx.Menu()\n        helpmenu.Append(wx.ID_ABOUT, \"About\")\n        menubar.Append(helpmenu, \"Help\")\n        self.SetMenuBar(menubar)\n\n        # Setup StatusBar\n        self.CreateStatusBar()\n        self.PushStatusText(\"See About in the Menu\")\n\n        # Event Handlers\n        self.Bind(wx.EVT_MENU, self.OnAbout, id=wx.ID_ABOUT)\n\n    def OnAbout(self, event):\n        \"\"\"Show the about dialog\"\"\"\n        info = wx.AboutDialogInfo()\n\n        # Make a template for the description\n        desc = [\"\\nwxPython Cookbook Chapter 5\\n\",\n                \"Platform Info: (%s,%s)\",\n                \"License: Public Domain\"]\n        desc = \"\\n\".join(desc)\n\n        # Get the platform information\n        py_version = [sys.platform,\n                      \", python \",\n                      sys.version.split()[0]]\n        platform = list(wx.PlatformInfo[1:])\n        platform[0] += (\" \" + wx.VERSION_STRING)\n        wx_info = \", \".join(platform)\n\n        # Populate with information\n        info.SetName(\"AboutBox Recipe\")\n        info.SetVersion(\"1.0\")\n        info.SetCopyright(\"Copyright (C) Joe Programmer\")\n        info.SetDescription(desc % (py_version, wx_info))\n\n        # Create and show the dialog\n        wx.AboutBox(info)\n\nclass AboutRecipeApp(wx.App):\n    def OnInit(self):\n        self.frame = AboutRecipeFrame(None, \n                                      title=\"AboutDialog\", \n                                      size=(300,200))\n        self.SetTopWindow(self.frame)\n        self.frame.Show()\n\n        return True\n\nif __name__ == \"__main__\":\n    app = AboutRecipeApp(False)\n    app.MainLoop()\n\n```"]