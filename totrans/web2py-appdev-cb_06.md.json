["```py\nlogging.getLogger('name')\n\n```", "```py\nlogging.getLogger(request.application)\n\n```", "```py\ndef get_configured_logger(name):\n\tlogger = logging.getLogger(name)\n\tif len(logger.handlers) == 0:\n\t\t# This logger has no handlers, so we can assume\n\t\t# it hasn't yet been configured.\n\t\t# (Configure logger)\n\treturn logger\n\n```", "```py\nimport logging, logging.handlers\ndef get_configured_logger(name):\n\tlogger = logging.getLogger(name)\n\tif (len(logger.handlers) == 0):\n\t\t# This logger has no handlers, so we can assume\n\t\t# it hasn't yet been configured\n\t\t# (Configure logger)\n\t\tpass\n\treturn logger\nlogger = get_configured_logger(request.application)\n\n```", "```py\nlogger.debug('debug message')\nlogger.warn('warning message')\nlogger.info('information message')\nlogger.error('error message')\n\n```", "```py\nimport logging, logging.handlers\n\nclass GAEHandler(logging.Handler):\n\t\"\"\"\n\tLogging handler for GAE DataStore\n\t\"\"\"\n\tdef emit(self, record):\n\t\tfrom google.appengine.ext import db\n\t\tclass Log(db.Model):\n\t\tname = db.StringProperty()\n\t\tlevel = db.StringProperty()\n\t\tmodule = db.StringProperty()\n\t\tfunc_name = db.StringProperty()\n\t\tline_no = db.IntegerProperty()\n\t\tthread = db.IntegerProperty()\n\t\tthread_name = db.StringProperty()\n\t\tprocess = db.IntegerProperty()\n\t\tmessage = db.StringProperty(multiline=True)\n\t\targs = db.StringProperty(multiline=True)\n\t\tdate = db.DateTimeProperty(auto_now_add=True)\n\tlog = Log()\n\tlog.name = record.name\n\tlog.level = record.levelname\n\tlog.module = record.module\n\tlog.func_name = record.funcName\n\tlog.line_no = record.lineno\n\tlog.thread = record.thread\n\tlog.thread_name = record.threadName\n\tlog.process = record.process\n\tlog.message = record.msg\n\tlog.args = str(record.args)\n\tlog.put()\n\ndef get_configured_logger(name):\n\tlogger = logging.getLogger(name)\n\tif len(logger.handlers) == 0:\n\t\tif request.env.web2py_runtime_gae:\n\t\t\t# Create GAEHandler\n\t\t\thandler = GAEHandler()\n\t\telse:\n\t\t\t# Create RotatingFileHandler\n\t\t\timport os\n\t\t\tformatter = \"%(asctime)s %(levelname)s \" + \\\n\t\t\t\t\"%(process)s %(thread)s \"+ \\\n\t\t\t\t\"%(funcName)s():%(lineno)d %(message)s\"\n\t\t\thandler = logging.handlers.RotatingFileHandler(\n\t\t\t\tos.path.join(request.folder,'private/app.log'),\n\t\t\t\tmaxBytes=1024,backupCount=2)\n\t\t\thandler.setFormatter(logging.Formatter(formatter))\n\t\t\thandler.setLevel(logging.DEBUG)\n\t\t\tlogger.addHandler(handler)\n\t\t\tlogger.setLevel(logging.DEBUG)\n\t\t\tlogger.debug(name + ' logger created') # Test entry\n\t\telse:\n\t\t\tlogger.debug(name + ' already exists') # Test entry\n\treturn logger\n\n#### Assign application logger to a global var\nlogger = get_configured_logger(request.application)\n\n```", "```py\n    db.define_table(\"feed\",\n    \tField(\"name\"),\n    \tField(\"author\"),\n    \tField(\"email\", requires=IS_EMAIL()),\n    \tField(\"url\", requires=IS_URL(), comment=\"RSS/Atom feed\"),\n    \tField(\"link\", requires=IS_URL(), comment=\"Blog href\"),\n    \tField(\"general\", \"boolean\", comment=\"Many categories (needs filters)\"),\n    )\n\n    ```", "```py\n    def planet():\n    \tFILTER = 'web2py'\n    \timport datetime\n    \timport re\n    \timport gluon.contrib.rss2 as rss2\n    \timport gluon.contrib.feedparser as feedparser\n\n    \t# filter for general (not categorized) feeds\n    \tregex = re.compile(FILTER,re.I)\n    \t# select all feeds\n    \tfeeds = db(db.feed).select()\n    \tentries = []\n\n    \tfor feed in feeds:\n    \t\t# fetch and parse feeds\n    \t\td = feedparser.parse(feed.url)\n    \t\tfor entry in d.entries:\n    \t\t\t# filter feed entries\n    \t\t\tif not feed.general or regex.search(entry.description):\n    \t\t\t\t# extract entry attributes\n    \t\t\t\tentries.append({\n    \t\t\t\t\t'feed': {'author':feed.author,\n    \t\t\t\t\t\t\t'link':feed.link,\n    \t\t\t\t\t\t\t'url':feed.url,\n    \t\t\t\t\t\t\t'name':feed.name},\n    \t\t\t\t\t\t\t'title': entry.title,\n    \t\t\t\t\t\t\t'link': entry.link,\n    \t\t\t\t\t\t\t'description': entry.description,\n    \t\t\t\t\t\t\t'author': hasattr(entry, 'author_detail') \\\n    \t\t\t\t\t\t\tand entry.author_detail.name \\\n    \t\t\t\t\t\t\tor feed.author,\n    \t\t\t\t\t\t\t'date': datetime.datetime(*entry.date_parsed[:6])\n    \t\t\t\t\t\t\t})\n\n    \t# sort entries by date, descending\n    \tentries.sort(key=lambda x: x['date'],reverse=True)\n    \tnow = datetime.datetime.now()\n\n    \t# aggregate rss2 feed with parsed entries\n    \trss = rss2.RSS2(title=\"Planet web2py\",\n    \tlink = URL(\"planet\").encode(\"utf8\"),\n    \tdescription = \"planet author\",\n    \t\tlastBuildDate = now,\n    \t\titems = [rss2.RSSItem(\n    \t\t\t\ttitle = entry['title'],\n    \t\t\t\tlink = entry['link'],\n    \t\t\t\tdescription = entry['description'],\n    \t\t\t\tauthor = entry['author'],\n    \t\t\t\t# guid = rss2.Guid('unknown'),\n    \t\t\tpubDate = entry['date']) for entry in entries]\n    \t\t)\n    \t# return new rss feed xml\n    \tresponse.headers['Content-Type']='application/rss+xml'\n    \treturn rss2.dumps(rss)\n\n    ```", "```py\n    TWITTER_HASH = \"web2py\"\n\n    ```", "```py\n    @cache(request.env.path_info,time_expire=60*15,\n    \tcache_model=cache.r\n    \tam)\n    def twitter():\n    \tsession.forget()\n    \tsession._unlock(response)\n    \timport gluon.tools\n    \timport gluon.contrib.simplejson as sj\n    \ttry:\n    \t\t\tpage = gluon.tools.fetch(' http://search.twitter.com/search.\n    \tjson?q=%%40%s'\n    \t\t\t\t% TWITTER_HASH)\n    \t\t\tdata = sj.loads(page, encoding=\"utf-8\")['results']\n    \t\t\td = dict()\n    \t\t\tfor e in data:\n    \t\t\t\td[e[\"id\"]] = e\n    \t\t\tr = reversed(sorted(d))\n    \t\t\treturn dict(tweets = [d[k] for k in r])\n    \t\telse:\n    \t\t\treturn 'disabled'\n    \texcept Exception, e:\n    \t\treturn DIV(T('Unable to download because:'),BR(),str(e))\n\n    ```", "```py\n    <OL>\n    {{ for t in tweets: }}\n    \t<LI>\n    \t{{ =DIV(H5(t[\"from_user_name\"])) }}\n    \t{{ =DIV(t[\"text\"]) }}\n    \t</LI>\n    {{ pass }}\n    </OL>\n\n    ```", "```py\n    {{if TWITTER_HASH:}}\n    \t<div class=\"box\">\n    \t\t<h3>{{=T(\"%s Recent Tweets\") % TWITTER_HASH}}</h3>\n    \t\t<div id=\"tweets\"> {{=LOAD('default','twitter.\n    load',ajax=True)}}</div>\n    \t</div>{{pass}}\n\n    ```", "```py\n/* Tweets */\n\n#tweets ol {\n\tmargin: 1em 0;\n}\n\n#tweets ol li {\n\tbackground: #d3e5ff;\n\tlist-style: none;\n\t-moz-border-radius: 0.5em;\n\tborder-radius: 0.5em;\n\tpadding: 0.5em;\n\tmargin: 1em 0;\n\tborder: 1px solid #aaa;\n}\n\n#tweets .entry-date {\n\tfont-weight: bold;\n\tdisplay: block;\n}\n\n```", "```py\ndef index():\n\tresponse.files.append(URL(\"static\",\"css/tweets.css\"))\n\tresponse.flash = T('You are successfully running web2py.')\n\treturn dict(message=T('Hello World'))\n\n```", "```py\nname = [(x0,y0),(x1,y1),...(xn,yn)]\n\n```", "```py\n    from matplotlib.backends.backend_agg import FigureCanvasAgg as\n    \tFigureCanvas\n    from matplotlib.figure import Figure\n    import cStringIO\n\n    def myplot(title='title',xlab='x',ylab='y',mode='plot',\n    \tdata={'xxx':[(0,0),(1,1),(1,2),(3,3)],\n    \t\t'yyy':[(0,0,.2,.2),(2,1,0.2,0.2),(2,2,0.2,0.2),\n    \t\t\t(3,3,0.2,0.3)]}):\n    \tfig=Figure()\n    \tfig.set_facecolor('white')\n    \tax=fig.add_subplot(111)\n    \tif title: ax.set_title(title)\n    \tif xlab: ax.set_xlabel(xlab)\n    \tif ylab: ax.set_ylabel(ylab)\n    \tlegend=[]\n    \tkeys=sorted(data)\n    \tfor key in keys:\n    \t\tstream = data[key]\n    \t\t(x,y)=([],[])\n    \tfor point in stream:\n    \t\tx.append(point[0])\n    \t\ty.append(point[1])\n    \tif mode=='plot':\n    \t\tell=ax.plot(x, y)\n    \t\tlegend.append((ell,key))\n    \tif mode=='hist':\n    \t\tell=ax.hist(y,20)\n    \tif legend:\n    \t\tax.legend([x for (x,y) in legend], [y for (x,y) in\n    \t\t\tlegend],\n    \t\t\t'upper right', shadow=True)\n    \tcanvas=FigureCanvas(fig)\n    \tstream=cStringIO.StringIO()\n    \tcanvas.print_png(stream)\n    return stream.getvalue()\n\n    ```", "```py\n    def test_images():\n    \treturn HTML(BODY(\n    \t\tIMG(_src=URL('a_plot')),\n    \t\tIMG(_src=URL('a_histogram'))))\n\n    def a_plot():\n    \t\tresponse.headers['Content-Type']='image/png'\n    \t\treturn myplot(data={'data':[(0,0),(1,1),(2,4),(3,9),(4,16)]})\n\n    def a_histogram():\n    \t\tresponse.headers['Content-Type']='image/png'\n    \t\treturn myplot(data={'data':[(0,0),(1,1),(2,4),(3,9),(4,16)]},\n    \t\t\tmode='hist')\n\n    ```", "```py\n<img src=\"img/a_plot.png\"/>\n<img src=\"img/a_histogram.png\"/>\n\n```", "```py\n    class PluginWikiWidgets(PluginWikiWidgets):\n    \t@staticmethod\n    \tdef aggregator(feed, max_entries=5):\n    \t\timport gluon.contrib.feedparser as feedparser\n    \t\td = feedparser.parse(feed)\n    \t\ttitle = d.channel.title\n    \t\tlink = d.channel.link\n    \t\tdescription = d.channel.description\n    \t\tdiv = DIV(A(B(title[0], _href=link[0])))\n    \t\tcreated_on = request.now\n    \t\tfor entry in d.entries[0:max_entries]:\n    \t\t\tdiv.append(A(entry.title,' - ', entry.updated,\n    \t\t\t\t_href=entry.link))\n    \t\t\tdiv.append(DIV(description))\n    \t\treturn div\n\n    ```", "```py\n    name:aggregator\n    feed:http://rss.cbc.ca/lineup/topstories.xml\n    max_entries:4\n\n    ```", "```py\n    {{=plugin_wiki.widget('aggregator',max_entries=4,\n    \tfeed='http://rss.cbc.ca/lineup/topstories.xml')}}\n\n    ```", "```py\nclass PluginWikiWidgets(PluginWikiWidgets):\n\t@staticmethod\n\tdef aggregator(feeds, max_entries=5):\n\t\timport gluon.contrib.feedparser as feedparser\n\t\tlfeeds = feeds.split(\",\")\n\t\tstrg='''\n\t\t\t<script>\n\t\t\t\tvar divDia = document.createElement(\"div\");\n\t\t\t\tdivDia.id =\"dialog\";\n\t\t\t\tdocument.body.appendChild(divDia);\n\t\t\t\tvar jQuerydialog=jQuery(\"#dialog\").dialog({\n\t\t\t\tautoOpen: false,\n\t\t\t\tdraggable: false,\n\t\t\t\tresizable: false,\n\t\t\t\twidth: 500\n\t\t\t\t});\n\t\t\t</script>\n\t\t\t'''\n\n\tfor feed in lfeeds:\n\t\td = feedparser.parse(feed)\n\t\ttitle=d.channel.title\n\t\tlink = d.channel.link\n\t\tdescription = d.channel.description\n\t\tcreated_on = request.now\n\t\tstrg+='<a class=\"feed_title\" href=\"%s\">%s</a>' % \\\n\t\t(link[0],title[0])\n\tfor entry in d.entries[0:max_entries]:\n\tstrg+='''\n\t\t<div class=\"feed_entry\">\n\t\t<a rel=\"%(description)s\" href=\"%(link)s\">\n\t\t%(title)s - %(updated)s</a>\n\t\t<script>\n\t\t\tjQuery(\"a\").mouseover(function () {\n\t\t\tvar msg = jQuery(this).attr(\"rel\");\n\t\t\tif (msg) {\n\t\t\t\tjQuerydialog[0].innerHTML = msg;\n\t\t\t\tjQuerydialog.dialog(\"open\");\n\t\t\t\tjQuery(\".ui-dialog-titlebar\").hide();\n\t\t\t\t}\n\t\t\t}).mousemove(function(event) {\n\t\t\tjQuerydialog.dialog(\"option\", \"position\", {\n\t\t\t\tmy: \"left top\",\n\t\t\t\tat: \"right bottom\",\n\t\t\t\tof: event,\n\t\t\t\toffset: \"10 10\"\n\t\t\t\t});\n\t\t\t}).mouseout(function(){\n\t\t\t\tjQuerydialog.dialog(\"close\");\n\t\t\t});\n\t\t\t</script></div>''' % entry\n\nreturn XML(strg)\n\n```"]