- en: Strings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: In this chapter, you will learn Python strings and tuples. You will learn how
    to use string, string slicing, string methods, and useful functions. You will
    learn what is an immutable sequence. In the tuple section, you will see how to
    use the Python tuple.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习Python字符串和元组。你将学习如何使用字符串、字符串切片、字符串方法和有用的函数。你将学习什么是不可变序列。在元组部分，你将看到如何使用Python元组。
- en: Python strings
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python字符串
- en: 'A Python string is a sequence, which consists of zero or more characters. The
    string is an immutable data structure, which means they cannot be changed. For
    example, if you define string `str1 = "Satyamev jayate"`, then `str1` will always
    remain `"Satyamev jayate"`.  You cannot edit the value of the `str1` variable.
    Although you can reassign `str1`, let''s discuss this with examples:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Python字符串是一个序列，由零个或多个字符组成。字符串是一个不可变的数据结构，这意味着它们不能被更改。例如，如果你定义字符串`str1 = "Satyamev
    jayate"`，那么`str1`将始终是`"Satyamev jayate"`。你不能编辑`str1`变量的值。尽管你可以重新分配`str1`，但让我们通过示例来讨论这一点：
- en: '[PRE0]'
  id: totrans-4
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the preceding example, a `"satyamev jayate"` string has been assigned to
    an `str1` variable. By using the ID function, we obtained the memory address.
    Now, reassign the `str1` variable as shown here:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，字符串`"satyamev jayate"`已被分配给变量`str1`。通过使用ID函数，我们获得了内存地址。现在，按照以下方式重新分配`str1`变量：
- en: '[PRE1]'
  id: totrans-6
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'You can see that the memory address of the `str1` variable has been changed.
    But string value at memory address `47173288` will not change. Python memory management
    might delete the value if it is not referred by any variable. If the value exists
    at memory address, then you can get the value using `ctypes` modules as shown
    here:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到，`str1`变量的内存地址已经改变。但内存地址`47173288`处的字符串值不会改变。如果值没有被任何变量引用，Python内存管理可能会删除该值。如果值存在于内存地址中，那么你可以使用`ctypes`模块来获取该值，如下所示：
- en: '[PRE2]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In order to find the length of the string, the `len()` function is used as
    shown in the following example:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到字符串的长度，可以使用`len()`函数，如下面的示例所示：
- en: '[PRE3]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Sometimes, you may want to access a particular character(s)  at a given position
    in the string. The subscript operator makes this possible.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能想访问字符串中特定位置的特定字符。下标运算符使得这一点成为可能。
- en: The subscript operator
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下标运算符
- en: 'The subscript operator is defined as square brackets `[]`. It is used to access
    the elements of string, list tuple, and so on. Let''s discuss the syntax with
    an example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 下标运算符定义为方括号`[]`。它用于访问字符串、列表、元组等元素。让我们通过一个例子来讨论其语法：
- en: '[PRE4]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The `given string` is the string you want to examine and the `index` is the
    position of the character you want to obtain. Let''s discuss this with an example:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '`给定字符串`是你想要检查的字符串，`索引`是你想要获取的字符的位置。让我们通过一个例子来讨论这个问题：'
- en: '[PRE5]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The `"The Avengers"` string is 12 characters long, which means it ranges from
    0 to 11 index. The `name[0]` represents the character `'T'`.  If you give the
    12^(th) index value, then the Python interpreter generates an error out of range.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '`"The Avengers"`字符串长度为12个字符，这意味着它的索引范围从0到11。`name[0]`表示字符`''T''`。如果你给出第12个索引值，那么Python解释器会生成一个越界错误。'
- en: 'Let''s see what is negative indexing:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看什么是负索引：
- en: '[PRE6]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `-1` index represents the last character and `-12` represents the first
    character.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '`-1`索引表示最后一个字符，`-12`表示第一个字符。'
- en: In the computer world, the computer counts the index from 0 itself.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机世界中，计算机从0开始计数索引。
- en: 'The following diagram will clear all your doubts:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表将消除你所有的疑惑：
- en: '![](img/chapter3-first-.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter3-first-.jpg)'
- en: Positive and negative indexing
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 正负索引
- en: Slicing for substrings
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 子字符串切片
- en: 'In many situations, you might need a particular portion of strings such as
    the first three characters of the string. Python''s subscript operator uses slicing.
    In slicing, colon `:` is used. An integer value will appear on either side of
    the colon. Refer to the following example:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你可能需要字符串的特定部分，例如字符串的前三个字符。Python的下标运算符使用切片。在切片中，冒号`:`被使用。整数值将出现在冒号的两侧。参考以下示例：
- en: '[PRE7]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Refer to the following diagram to clear your remaining doubts:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下图表以消除你剩余的疑惑：
- en: '![](img/chapter3-second.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter3-second.jpg)'
- en: String positive and negative slicing
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串正负切片
- en: If you want to print a reverse of the given string `str1`, then use `str1[::-1]`
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要打印给定字符串`str1`的逆序，那么使用`str1[::-1]`
- en: 'To find the length of a string, you can use the `len()` function:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要找到字符串的长度，你可以使用`len()`函数：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now, let's see some useful string methods.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些有用的字符串方法。
- en: Python string methods
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python字符串方法
- en: There are several string methods, which will be discussed one by one. To represent
    strings, we use the `str1` variable.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种字符串方法，我们将逐一讨论。为了表示字符串，我们使用`str1`变量。
- en: 'Sometimes, we want to count the characters or substrings in the given string.
    The string method `count` helps to achieve this:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们想要计算给定字符串中的字符或子字符串的数量。字符串方法`count`有助于实现这一点：
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'The syntax for the method is as follows:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE10]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The count method returns the number of occurrences of the substring `substr`
    in string `str1.` By using the parameter `start` and `end` you can obtain a slice
    of `str1`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`count`方法返回子字符串`substr`在字符串`str1`中出现的次数。通过使用参数`start`和`end`，你可以获取`str1`的切片。'
- en: 'Consider the following example:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE11]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In many situations, we need to find the index of the substring in the given
    string. The `find()` method can do the task.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们需要在给定的字符串中找到子字符串的索引。`find()`方法可以完成这个任务。
- en: 'The syntax for the `find()` method is given as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()`方法的语法如下：'
- en: '[PRE12]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `find()` method is used to find out whether a string occurs in a given string
    or its substrings.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`find()`方法用于确定一个字符串是否出现在给定的字符串或其子字符串中。'
- en: '[PRE13]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'So `13` is the index value of substring `"with"` as shown here:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以`13`是子字符串`"with"`的索引值，如上图所示：
- en: '![](img/chapter-3third.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/chapter-3third.png)'
- en: Showing index value of substring
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 显示子字符串的索引值
- en: 'Let''s discuss another example of the `find` method:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论`find`方法的另一个例子：
- en: '[PRE14]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'In the preceding example, the  `"we"` substring occurs two times, but the `find`
    method will only give the index of the first occurrence.  If you want to find
    the occurrence from right, you can use the `rfind` method. Let''s learn by example:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，子字符串`"we"`出现了两次，但`find`方法只会给出第一次出现的索引。如果你想从右侧查找出现，可以使用`rfind`方法。让我们通过例子来学习：
- en: '[PRE15]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Sometimes, the user wants to find the index of a substring but is not sure about
    the cases. The substring may occur in lower, upper, or title cases. Python gives
    you some methods to deal with cases.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，用户想要找到子字符串的索引，但不确定大小写。子字符串可能以小写、大写或标题形式出现。Python为你提供了一些处理大小写的方法。
- en: String case methods
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串大小写方法
- en: Let's see one by one, first is the `lower()` method.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐一看看，首先是`lower()`方法。
- en: 'The syntax for the `lower()` method is given as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower()`方法的语法如下：'
- en: '[PRE16]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `lower()` method returns a string in which all case-based characters are
    present in lowercase. Let''s see an example:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower()`方法返回一个字符串，其中所有基于案例的字符都显示为小写。让我们看一个例子：'
- en: '[PRE17]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: You can see that case-based characters get converted into lowercase; as we know
    that the string is immutable, the original string remains the same. If you like
    uppercase, you can use the `upper()` method.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到基于案例的字符会被转换为小写；正如我们所知，字符串是不可变的，原始字符串保持不变。如果你喜欢大写，可以使用`upper()`方法。
- en: 'The syntax for the `upper()` method is given as follows:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`upper()`方法的语法如下：'
- en: '[PRE18]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'The `upper` method returns a copy of string `str1`, which contains all uppercase
    characters. Consider the following example:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`upper`方法返回一个字符串副本，其中包含所有大写字符。考虑以下例子：'
- en: '[PRE19]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Sometimes, we need to capitalize the first character of the line. In this case,
    the `capitalize()` method allows you to do that for you.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要将行首的第一个字符大写。在这种情况下，`capitalize()`方法允许你这样做。
- en: 'The syntax for the method is given as follows:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE20]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'This method capitalizes the first letter of the returned string:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法将返回字符串的首字母大写：
- en: '[PRE21]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you want to convert the first character of every word of the string in uppercase,
    you can use the `title()` method:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将字符串中每个单词的首字母转换为大写，可以使用`title()`方法：
- en: 'The syntax for the method is given as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE22]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `title()` method returns a copy of the string in which the first character
    of every word of the string is capitalized:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`title()`方法返回一个字符串副本，其中每个单词的首字母都被大写：'
- en: '[PRE23]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'A `swapcase` method allows the user to swap the cases:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`swapcase`方法允许用户交换大小写：'
- en: '[PRE24]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'The syntax for it is as follows:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 其语法如下：
- en: '[PRE25]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: It returns a copy of the string in which the cases are swapped.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 它返回一个字符串副本，其中大小写被交换。
- en: 'Consider the following example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE26]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: String strip methods
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串去除方法
- en: Dealing with the strings, many times programmers encounter the problem of undesirable
    character/characters at the end or beginning of the string, such as space or new
    line character at the end, for example,  `" Baba saheb "` and `"Dr Ambedkar n"`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 处理字符串时，程序员经常遇到字符串末尾或开头出现不想要的字符/字符的问题，例如末尾的空格或换行符，例如 `" Baba saheb "` 和 `"Dr
    Ambedkar n"`。
- en: To handle these problems, the Python string class comes loaded with three methods.
    We will discuss them one by one. Let's start with `rstrip()`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这些问题，Python 字符串类预加载了三个方法。我们将逐一讨论它们。让我们从 `rstrip()` 开始。
- en: 'The syntax for the method is given as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE27]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This method returns a copy of string `str1` in which unwanted character/characters
    get removed from the right side of the string.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个字符串 `str1` 的副本，其中从字符串右侧移除了不需要的字符/字符。
- en: 'Consider the following example:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE28]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'If you do not provide any *chars* as argument, then space is taken as default.
    Look at following the example:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有提供任何 *chars* 作为参数，那么默认使用空格。看看以下示例：
- en: '[PRE29]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: If you want to strip from the left-side use the `lstrip()` method. If you want
    to strip from both sides, use the `strip()` method.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要从左侧去除，使用 `lstrip()` 方法。如果你想要从两侧去除，使用 `strip()` 方法。
- en: 'Consider the following example:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: String split methods
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串分割方法
- en: Sometimes we see strings in the form of parts such as `"27-12-2016"` and `"Mohit
    raj"`. Our requirement is to get the last part or first part. So, based upon delimiters,
    we can split strings into parts and take the desirable part. Let's understand
    how it works; from the first string, we need only the year part.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 有时我们看到的字符串形式为部分，例如 `"27-12-2016"` 和 `"Mohit raj"`。我们的要求是获取最后一部分或第一部分。因此，基于分隔符，我们可以将字符串分割成部分并获取所需的部分。让我们了解它是如何工作的；从第一个字符串中，我们只需要年份部分。
- en: We have an interesting method called `split()`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个有趣的方法叫做 `split()`。
- en: 'The syntax for the method is given as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE31]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Let''s look at an example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个示例：
- en: '[PRE32]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The `split` method returns a list of all the words of the string separated
    by a delimiter and the `num` integer specifies the maximum splits. If `num` is
    not specified, then all the possible splits are made. Refer to the following example:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`split` 方法返回一个列表，其中包含所有由分隔符分隔的字符串单词，`num` 整数指定最大分割次数。如果 `num` 未指定，则进行所有可能的分割。参看以下示例：'
- en: '[PRE33]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'So far, we have not learned about lists, which we will be covering later. But
    using this method, we can access a particular value of the list:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们还没有学习列表，我们将在稍后讨论。但使用此方法，我们可以访问列表的特定值：
- en: '[PRE34]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you don''t provide any delimiter, then the space is taken as the default,
    as shown here:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有提供任何分隔符，那么默认使用空格，如下所示：
- en: '[PRE35]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you want that splits should be started from the right, then you can use
    the `rsplit()` method, as shown in the following example:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望分割从右侧开始，那么你可以使用 `rsplit()` 方法，如下面的示例所示：
- en: '[PRE36]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: I hope you got the idea of splitting[.]
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你已经理解了分割的概念[.]。
- en: String justify methods
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串对齐方法
- en: methods to deal with these types of situations.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这些类型场景的方法。
- en: In many situations, you might need to justify the string length. The requirement
    may be string, which must possess a certain length. We have four string methods
    to deal with these types of situations. Let's start from ljust(), which means
    left justify.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，你可能需要调整字符串的长度。要求可能是字符串，它必须具有特定的长度。我们有四种字符串方法来处理这些类型的场景。让我们从 `ljust()`
    开始，它的意思是左对齐。
- en: 'The syntax for the method is given as follows:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE37]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: When you provide the string to the `ljust()` method, it returns the string left
    justified. The minimum string length is specified by width and the padding on
    the left side is specified by the `fillchar` character(s), the space is default.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 当你将字符串提供给 `ljust()` 方法时，它返回左对齐的字符串。最小字符串长度由宽度指定，左侧的填充由 `fillchar` 字符指定，默认为空格。
- en: 'Consider the following examples:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE38]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'In the preceding example, the length of `str2` is greater than `15`. So padding
    is not made, which means `fillchars` has not been used. Let''s see the example
    of `rjust`, which does the same thing but justifies the length from the right
    side:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`str2` 的长度大于 `15`。因此没有进行填充，这意味着没有使用 `fillchars`。让我们看看 `rjust` 的示例，它执行相同的功能，但只是从右侧对齐长度：
- en: '[PRE39]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Consider the situation where you want to justify the string from both sides.
    In this case, we will use the `center()` method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑你想从两侧对齐字符串的情况。在这种情况下，我们将使用 `center()` 方法。
- en: 'Let''s see an example of `center()`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看 `center()` 的一个示例：
- en: '[PRE40]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Sometimes when you are dealing with strings such as bank account number, binary
    numbers, and so on, you may need to justify the string with zeros. Although we
    can do this using the `ljust` method, Python offers you a special method called
    `zfill()`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 有时当你处理诸如银行账户号码、二进制数字等字符串时，你可能需要用零来调整字符串。虽然我们可以使用 `ljust` 方法来做这件事，但 Python 提供了一个名为
    `zfill()` 的特殊方法。
- en: 'The syntax for the method is given as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE41]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This method pads the string on the left with zeros to fill the width.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法通过在左侧用零填充字符串来调整字符串的宽度。
- en: 'Consider the following examples:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE42]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Many times we deal with the situation where we may want to replace a word from
    a line or a substring from the string. Python's `replace()` string method can
    do the task.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 许多时候我们处理的情况可能需要从一行中替换一个单词或从字符串中替换一个子字符串。Python 的 `replace()` 字符串方法可以完成这项任务。
- en: '**replace()**'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**replace()**'
- en: 'The syntax for the method is as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE43]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: This method returns a copy of the string in which the old character(s) are replaced
    with new character(s). The `max` parameter specifies the number of replacements.
    If no number is specified, then it means all the occurrences would be replaced.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法返回一个字符串副本，其中旧字符被新字符替换。`max` 参数指定替换次数。如果没有指定数字，则表示替换所有出现。
- en: 'Consider the following example:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE44]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Consider you have a sequence (list or tuple) of string and you want to join
    values of the sequence.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑你有一个字符串序列（列表或元组）并想要连接序列的值。
- en: Consider the sequence `["Mohit","raj"]` and you want to make it `"Mohit raj"`
    or `"Mohit-raj"`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑序列 `["Mohit","raj"]`，你想要将其变为 `"Mohit raj"` 或 `"Mohit-raj"`。
- en: 'To deal with these type of situations, use the `join` method:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这类情况，可以使用 `join` 方法：
- en: '[PRE45]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The syntax for the method is:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE46]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'The `seq`  contains the sequence of separated strings; here,  `str1` acts as
    a separator. Let’s see different examples of `join()`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`seq` 包含分隔的字符串序列；在这里，`str1` 作为分隔符。让我们看看 `join()` 的不同示例：'
- en: 'The space as the separator:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用空格作为分隔符：
- en: '[PRE47]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Nothing as separator:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不使用分隔符：
- en: '[PRE48]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'A hyphen `-` as the separator:'
  id: totrans-151
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分隔符为一个连字符 `-`：
- en: '[PRE49]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: You can try with different-2 separators.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用不同的分隔符尝试。
- en: String Boolean methods
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串布尔方法
- en: Let's discuss some string methods, which return the value in the form of `True`
    or `False` based upon certain conditions. Sometime we are interested in strings
    which are ends with particular substring. For this we use string method endswith()
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一些字符串方法，这些方法根据某些条件返回 `True` 或 `False` 的值。有时我们可能对以特定子字符串结尾的字符串感兴趣。为此，我们使用字符串方法
    `endswith()`。
- en: 'The syntax of the method is as follows:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE50]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The method returns `True` if string `str1` ends with specified substring. The
    `begin` and `end` parameter represent the slice of string `str1`:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果字符串 `str1` 以指定的子字符串结尾，则该方法返回 `True`。`begin` 和 `end` 参数代表字符串 `str1` 的切片：
- en: 'Consider the following example:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE51]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The next method is `startswith()`, which works the same way as the previous method,
    just check the condition from the beginning.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法是 `startswith()`，它的工作方式与上一个方法相同，只是检查条件从开始处开始。
- en: 'Let''s understand with the help of an example:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来理解：
- en: '[PRE52]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Consider you may want to be sure that the given string must contain only letters.
    The `isalpha()` methods helps you to do that.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你可能想要确保给定的字符串必须只包含字母。`isalpha()` 方法可以帮助你做到这一点。
- en: 'The syntax is given as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE53]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The method returns `True` only if string `str1` contains letters alone.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法仅在字符串 `str1` 只包含字母时返回 `True`。
- en: 'Consider the following example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE54]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Even spaces are not allowed.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 即使空格也不允许。
- en: If you want to check the alphanumeric characters appearing in the string, then
    you can use the `isalnum()` method. This method returns `True` if the string contains
    only alphanumeric characters.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要检查字符串中出现的字母数字字符，则可以使用 `isalnum()` 方法。如果字符串只包含字母数字字符，则该方法返回 `True`。
- en: 'Consider the following examples:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE55]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: If you only want to check digits, then you can use the `isdigit()` method.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想检查数字，则可以使用 `isdigit()` 方法。
- en: 'The syntax is given as follows:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE56]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: This method returns `True` if the string contains only digits.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法如果字符串只包含数字则返回 `True`。
- en: 'Consider the following example:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE57]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'To deal with only white spaces, Python string offers a method called `isspace()`,
    which returns `True` if the string contains only spaces:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理只有空白的情况，Python 字符串提供了一个名为 `isspace()` 的方法，如果字符串只包含空格，则返回 `True`：
- en: '[PRE58]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The syntax is given as follows:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE59]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Consider the following example:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE60]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Let''s see methods that deal with cases:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看处理大小写的函数：
- en: '[PRE61]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The syntax is given as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE62]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'The `istitle()` method returns `True` if the string is in title case. The following
    example shows the rest of the story:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`istitle()`方法如果字符串是标题格式，则返回`True`。以下示例显示了剩余的故事：'
- en: '[PRE63]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: To check for lowercase, we can use the `islower()` method.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 为了检查小写，我们可以使用`islower()`方法。
- en: 'The syntax for the method is given as follows:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE64]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This method returns `True` if the string contains all lowercase characters:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法如果字符串包含所有小写字符则返回`True`：
- en: '[PRE65]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The `islower()` method does not care about the special character and digits.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '`islower()`方法不考虑特殊字符和数字。'
- en: 'Similarly, to check for uppercase you can use `isupper()`:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，为了检查大写，你可以使用`isupper()`：
- en: '[PRE66]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'The syntax is given as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE67]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This method returns `True` if the string contains only uppercase characters:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法如果字符串只包含大写字符则返回`True`：
- en: '[PRE68]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: String functions
  id: totrans-204
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串函数
- en: So far you have seen string methods. Let's see built-in functions of sequences
    and what values they would return when the string is passed as an argument. At
    the beginning of the chapter, we have already discussed the `len()` function.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经看到了字符串方法。让我们看看序列的内置函数以及当字符串作为参数传递时它们会返回什么值。在章节的开头，我们已经讨论了`len()`函数。
- en: 'Consider you need to find the minimum character from a given string according
    to the ASCII value. To handle this situation, you can use the `min()` function:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑你需要根据ASCII值从给定字符串中找到最小字符。为了处理这种情况，你可以使用`min()`函数：
- en: '[PRE69]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'The syntax is given as follows:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE70]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The `min()` function returns the min character from string `str1` according
    to the ASCII value:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`min()`函数根据ASCII值从字符串`str1`中返回最小字符：'
- en: '[PRE71]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'The next method is `max()`, which returns the max characters from string `str`
    according to the ASCII value. Let''s see some examples:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个方法是`max()`，它根据ASCII值从字符串`str`中返回最大字符。让我们看看一些示例：
- en: '[PRE72]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: In many situations, we might need to convert integers or floats into a string.
    In order to do this conversion, the `str()` function is used.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，我们可能需要将整数或浮点数转换为字符串。为了进行这种转换，我们使用`str()`函数。
- en: 'The syntax is given as follows:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 语法如下：
- en: '[PRE73]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: This function converts an argument value to string type. The argument value
    can be any type.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将参数值转换为字符串类型。参数值可以是任何类型。
- en: 'Consider the following examples:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE74]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'In order to find a substring in the string, you can use the `in` operator.
    The `in` operator is used with the if statement as shown in the following example:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在字符串中查找子字符串，你可以使用`in`运算符。`in`运算符与if语句一起使用，如下面的示例所示：
- en: '[PRE75]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: You have gained enough knowledge on Python strings. Now we move on to our next
    immutable data structure.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经对Python字符串有了足够的了解。现在我们继续学习我们的下一个不可变数据结构。
- en: Tuple
  id: totrans-223
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: Python tuple is a sequence, which can store heterogeneous data types such as integers,
    floats, strings, lists, and dictionaries. Like strings, tuple is immutable.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: Python元组是一个序列，可以存储异构数据类型，如整数、浮点数、字符串、列表和字典。像字符串一样，元组是不可变的。
- en: Creating an empty tuple
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建空元组
- en: '[PRE76]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The empty tuple is written as two parentheses containing nothing.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 空元组写作两个空括号，其中不包含任何内容。
- en: Creating tuple with elements
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用元素创建元组
- en: 'To create a tuple, fill the values in tuple separated by commas:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个元组，用逗号分隔的值填充元组：
- en: '[PRE77]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'If you define the variable as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你定义变量如下：
- en: '[PRE78]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'The variable a would be a tuple:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 变量a将是一个元组：
- en: '[PRE79]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: Indexing tuple
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组索引
- en: In order to access a particular value of tuple, specify a position number, in
    brackets. Let's discuss with an example. I am going to make a tuple of the heroes
    from the movie *Avengers*.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问元组的特定值，指定一个位置数字，用括号括起来。让我们用一个例子来讨论。我将制作一个包含电影《复仇者联盟》中英雄的元组。
- en: '[PRE80]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The following diagram will clear the doubts:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 以下图表将消除疑虑：
- en: '![](img/chapter-3-fouth.jpg)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter-3-fouth.jpg)'
- en: Tuple indexing
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 元组索引
- en: Now you can see positive and negative indexing.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可以看到正负索引。
- en: Slicing of tuple
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组的切片
- en: In order to do slicing, use the square brackets with the index or indices.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 为了进行切片，使用带有索引或索引的方括号。
- en: 'Consider the following example:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例：
- en: '[PRE81]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Let’s discuss with this diagram:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们用这张图来讨论：
- en: '![](img/Chapter-3-fifth.jpg)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Chapter-3-fifth.jpg)'
- en: Slicing of tuple
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 元组的切片
- en: '[PRE82]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'The preceding example means we need start from `0` to `3`:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 上述示例意味着我们需要从`0`开始到`3`：
- en: '[PRE83]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The preceding example means we start from `1` to the last index.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子意味着我们从`1`开始到最后一个索引。
- en: 'If you use slicing index out of range, then the empty tuple would be returned:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用超出范围的切片索引，则返回空元组：
- en: '[PRE84]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'For negative indexing, use the following code:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 对于负索引，使用以下代码：
- en: '[PRE85]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: Now, let's see some generic function, which can be applied on the tuple.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些通用的函数，这些函数可以应用于元组。
- en: Unpacking the items of tuples
  id: totrans-258
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解包元组项
- en: 'In this section, we will learn how to unpack the tuple variable. Let''s learn
    by example:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何解包元组变量。让我们通过例子来学习：
- en: '[PRE86]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: In the preceding example, tuple's items have been assigned to `a`, `b`, and `c`
    variables correspondingly.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，元组的项已经被分别赋值给了`a`、`b`和`c`变量。
- en: 'What happens if you use more number of variables than the number of items in
    a tuple. Let''s see more examples:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的变量数量多于元组中的项数，会发生什么？让我们看更多的例子：
- en: '[PRE87]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: So, interpreter throws a `ValueError`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，解释器抛出一个`ValueError`。
- en: 'What happens if you use less number of variables than the number of items in
    a tuple. Let''s see more examples:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的变量数量少于元组中的项数，会发生什么？让我们看更多的例子：
- en: '[PRE88]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: So, the interpreter once again shows an error with a different description.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，解释器再次显示一个不同描述的错误。
- en: Tuple functions
  id: totrans-268
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组函数
- en: If you want to know the length of the tuple, then you can use the `len()` function.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道元组的长度，则可以使用`len()`函数。
- en: '**len()**'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '**len()**'
- en: 'The syntax for the method is as follows:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE89]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: The `len()` function returns the length of the tuple, which means the total
    number of elements in a tuple.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`len()`函数返回元组的长度，这意味着元组中元素的总数。'
- en: '[PRE90]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Let's see how to use the `max()` function on a tuple.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何在元组上使用`max()`函数。
- en: '**max()**'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '**max()**'
- en: 'The syntax for the method is as follows:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE91]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The `max(tuple)` function returns the element of tuple with the maximum value.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`max(tuple)`函数返回元组中具有最大值的元素。'
- en: You must be in doubt with the meaning of maximum value.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能对最大值的含义感到怀疑。
- en: 'Let''s understand with examples:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过例子来理解：
- en: '[PRE92]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The `max` function returns the maximum integer value.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`max`函数返回最大整数值。'
- en: 'If the tuple contains int and float with the same numeric value, which value
    would be returned can you guess? Let’s see with this example:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 如果元组包含具有相同数值的int和float，你能猜到返回哪个值吗？让我们通过这个例子来看：
- en: '[PRE93]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'If you are thinking it returns a float value, see the next example:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你认为它返回一个浮点值，请看下一个例子：
- en: '[PRE94]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: 'Both `450` and `450.0` possess the same numeric value. The `max` function returns
    the first occurrence in the tuple:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`450`和`450.0`具有相同的数值。`max`函数返回元组中的第一个出现：'
- en: '[PRE95]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: The `max()` function returns the string as the max value.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()`函数返回作为最大值的字符串。'
- en: 'Let''s see an example of string comparison:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看字符串比较的例子：
- en: '[PRE96]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: The max value decision is taken on the basis of the first character. So, `'z'`
    has been taken as the max value.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 最大值决策是基于第一个字符。所以，`'z'`被选为最大值。
- en: 'Let''s see the next example:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看下一个例子：
- en: '[PRE97]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: You can see that the second and fourth strings both have the `'z'` character
    in the first position; this is when the decision is taken by judging the second
    character.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到第二个和第四个字符串在第一个位置都有`'z'`字符；这是当决策是通过判断第二个字符来做出的时候。
- en: '**min()**'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '**min()**'
- en: 'The syntax for this method is as follows:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE98]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: The `min(tuple)` function returns the element of tuple with a minimum value.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`min(tuple)`函数返回元组中具有最小值的元素。'
- en: 'Consider the following examples:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE99]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: If you want to convert a string or list into a tuple, then you can use the `tuple()` function.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要将字符串或列表转换为元组，则可以使用`tuple()`函数。
- en: 'Consider the following example:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下例子：
- en: '[PRE100]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: 'You can delete the tuple using `del` keyword, as shown in the following example:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`del`关键字删除元组，如下面的例子所示：
- en: '[PRE101]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: Operations of tuples
  id: totrans-308
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组的操作
- en: In this section, you will see addition and multiplication.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将看到加法和乘法。
- en: 'By using the `+` operator, two tuples can be added as shown:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`+`运算符，两个元组可以相加，如下所示：
- en: '[PRE102]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: 'By using the `*` operator, you can perform multiplication:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`*`运算符，你可以执行乘法：
- en: '[PRE103]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: 'Let''s check the memory address of the tuple after multiplication:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们检查乘法后的元组的内存地址：
- en: '[PRE104]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Now, you can see that the first and third strings both possess the same memory
    location.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以看到第一行和第三行都拥有相同的内存位置。
- en: Exercise
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: Obtain the domain (thapar.edu) name from the URL `http://www.thapar.edu/index.php/about-us/mission`.
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从URL `http://www.thapar.edu/index.php/about-us/mission` 获取域名（thapar.edu）。
- en: You have the tuple `tup = ('www', 'thapar', 'edu','index', 'php','about-us','mission')`;
    now you can make a full URL like this  [www.thapar.edu/index.php/about-us/mission](http://www.thapar.edu/index.php/about-us/mission)
  id: totrans-319
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你有这个元组 `tup = ('www', 'thapar', 'edu','index', 'php','about-us','mission')`；现在你可以创建一个完整的URL，例如这样
    [www.thapar.edu/index.php/about-us/mission](http://www.thapar.edu/index.php/about-us/mission)
- en: Summary
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you have learned about strings, how to define strings, string
    functions, and string methods. Strings are immutable, they cannot be changed.
    In the tuple section, you have seen how to create a tuple. Like strings, tuples
    are immutable. There is no method that exists, which can change the existing tuple
    or string.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你已经学习了字符串，如何定义字符串，字符串函数和字符串方法。字符串是不可变的，它们不能被更改。在元组部分，你已经看到了如何创建一个元组。像字符串一样，元组也是不可变的。不存在可以更改现有元组或字符串的方法。
