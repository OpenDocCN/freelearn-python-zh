- en: Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you will learn Python strings and tuples. You will learn how
    to use string, string slicing, string methods, and useful functions. You will
    learn what is an immutable sequence. In the tuple section, you will see how to
    use the Python tuple.
  prefs: []
  type: TYPE_NORMAL
- en: Python strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A Python string is a sequence, which consists of zero or more characters. The
    string is an immutable data structure, which means they cannot be changed. For
    example, if you define string `str1 = "Satyamev jayate"`, then `str1` will always
    remain `"Satyamev jayate"`.  You cannot edit the value of the `str1` variable.
    Although you can reassign `str1`, let''s discuss this with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, a `"satyamev jayate"` string has been assigned to
    an `str1` variable. By using the ID function, we obtained the memory address.
    Now, reassign the `str1` variable as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that the memory address of the `str1` variable has been changed.
    But string value at memory address `47173288` will not change. Python memory management
    might delete the value if it is not referred by any variable. If the value exists
    at memory address, then you can get the value using `ctypes` modules as shown
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to find the length of the string, the `len()` function is used as
    shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, you may want to access a particular character(s)  at a given position
    in the string. The subscript operator makes this possible.
  prefs: []
  type: TYPE_NORMAL
- en: The subscript operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The subscript operator is defined as square brackets `[]`. It is used to access
    the elements of string, list tuple, and so on. Let''s discuss the syntax with
    an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The `given string` is the string you want to examine and the `index` is the
    position of the character you want to obtain. Let''s discuss this with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `"The Avengers"` string is 12 characters long, which means it ranges from
    0 to 11 index. The `name[0]` represents the character `'T'`.  If you give the
    12^(th) index value, then the Python interpreter generates an error out of range.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see what is negative indexing:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `-1` index represents the last character and `-12` represents the first
    character.
  prefs: []
  type: TYPE_NORMAL
- en: In the computer world, the computer counts the index from 0 itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram will clear all your doubts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/chapter3-first-.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Positive and negative indexing
  prefs: []
  type: TYPE_NORMAL
- en: Slicing for substrings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In many situations, you might need a particular portion of strings such as
    the first three characters of the string. Python''s subscript operator uses slicing.
    In slicing, colon `:` is used. An integer value will appear on either side of
    the colon. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Refer to the following diagram to clear your remaining doubts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/chapter3-second.jpg)'
  prefs: []
  type: TYPE_IMG
- en: String positive and negative slicing
  prefs: []
  type: TYPE_NORMAL
- en: If you want to print a reverse of the given string `str1`, then use `str1[::-1]`
  prefs: []
  type: TYPE_NORMAL
- en: 'To find the length of a string, you can use the `len()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see some useful string methods.
  prefs: []
  type: TYPE_NORMAL
- en: Python string methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are several string methods, which will be discussed one by one. To represent
    strings, we use the `str1` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, we want to count the characters or substrings in the given string.
    The string method `count` helps to achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The count method returns the number of occurrences of the substring `substr`
    in string `str1.` By using the parameter `start` and `end` you can obtain a slice
    of `str1`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In many situations, we need to find the index of the substring in the given
    string. The `find()` method can do the task.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `find()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `find()` method is used to find out whether a string occurs in a given string
    or its substrings.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'So `13` is the index value of substring `"with"` as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/chapter-3third.png)'
  prefs: []
  type: TYPE_IMG
- en: Showing index value of substring
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss another example of the `find` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the  `"we"` substring occurs two times, but the `find`
    method will only give the index of the first occurrence.  If you want to find
    the occurrence from right, you can use the `rfind` method. Let''s learn by example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, the user wants to find the index of a substring but is not sure about
    the cases. The substring may occur in lower, upper, or title cases. Python gives
    you some methods to deal with cases.
  prefs: []
  type: TYPE_NORMAL
- en: String case methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see one by one, first is the `lower()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `lower()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The `lower()` method returns a string in which all case-based characters are
    present in lowercase. Let''s see an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You can see that case-based characters get converted into lowercase; as we know
    that the string is immutable, the original string remains the same. If you like
    uppercase, you can use the `upper()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the `upper()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'The `upper` method returns a copy of string `str1`, which contains all uppercase
    characters. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes, we need to capitalize the first character of the line. In this case,
    the `capitalize()` method allows you to do that for you.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'This method capitalizes the first letter of the returned string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to convert the first character of every word of the string in uppercase,
    you can use the `title()` method:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `title()` method returns a copy of the string in which the first character
    of every word of the string is capitalized:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'A `swapcase` method allows the user to swap the cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for it is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: It returns a copy of the string in which the cases are swapped.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: String strip methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dealing with the strings, many times programmers encounter the problem of undesirable
    character/characters at the end or beginning of the string, such as space or new
    line character at the end, for example,  `" Baba saheb "` and `"Dr Ambedkar n"`.
  prefs: []
  type: TYPE_NORMAL
- en: To handle these problems, the Python string class comes loaded with three methods.
    We will discuss them one by one. Let's start with `rstrip()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: This method returns a copy of string `str1` in which unwanted character/characters
    get removed from the right side of the string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do not provide any *chars* as argument, then space is taken as default.
    Look at following the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: If you want to strip from the left-side use the `lstrip()` method. If you want
    to strip from both sides, use the `strip()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: String split methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes we see strings in the form of parts such as `"27-12-2016"` and `"Mohit
    raj"`. Our requirement is to get the last part or first part. So, based upon delimiters,
    we can split strings into parts and take the desirable part. Let's understand
    how it works; from the first string, we need only the year part.
  prefs: []
  type: TYPE_NORMAL
- en: We have an interesting method called `split()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `split` method returns a list of all the words of the string separated
    by a delimiter and the `num` integer specifies the maximum splits. If `num` is
    not specified, then all the possible splits are made. Refer to the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'So far, we have not learned about lists, which we will be covering later. But
    using this method, we can access a particular value of the list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don''t provide any delimiter, then the space is taken as the default,
    as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want that splits should be started from the right, then you can use
    the `rsplit()` method, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: I hope you got the idea of splitting[.]
  prefs: []
  type: TYPE_NORMAL
- en: String justify methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: methods to deal with these types of situations.
  prefs: []
  type: TYPE_NORMAL
- en: In many situations, you might need to justify the string length. The requirement
    may be string, which must possess a certain length. We have four string methods
    to deal with these types of situations. Let's start from ljust(), which means
    left justify.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: When you provide the string to the `ljust()` method, it returns the string left
    justified. The minimum string length is specified by width and the padding on
    the left side is specified by the `fillchar` character(s), the space is default.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, the length of `str2` is greater than `15`. So padding
    is not made, which means `fillchars` has not been used. Let''s see the example
    of `rjust`, which does the same thing but justifies the length from the right
    side:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Consider the situation where you want to justify the string from both sides.
    In this case, we will use the `center()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example of `center()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Sometimes when you are dealing with strings such as bank account number, binary
    numbers, and so on, you may need to justify the string with zeros. Although we
    can do this using the `ljust` method, Python offers you a special method called
    `zfill()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This method pads the string on the left with zeros to fill the width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Many times we deal with the situation where we may want to replace a word from
    a line or a substring from the string. Python's `replace()` string method can
    do the task.
  prefs: []
  type: TYPE_NORMAL
- en: '**replace()**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This method returns a copy of the string in which the old character(s) are replaced
    with new character(s). The `max` parameter specifies the number of replacements.
    If no number is specified, then it means all the occurrences would be replaced.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Consider you have a sequence (list or tuple) of string and you want to join
    values of the sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Consider the sequence `["Mohit","raj"]` and you want to make it `"Mohit raj"`
    or `"Mohit-raj"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To deal with these type of situations, use the `join` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax for the method is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'The `seq`  contains the sequence of separated strings; here,  `str1` acts as
    a separator. Let’s see different examples of `join()`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The space as the separator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing as separator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'A hyphen `-` as the separator:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: You can try with different-2 separators.
  prefs: []
  type: TYPE_NORMAL
- en: String Boolean methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's discuss some string methods, which return the value in the form of `True`
    or `False` based upon certain conditions. Sometime we are interested in strings
    which are ends with particular substring. For this we use string method endswith()
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax of the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'The method returns `True` if string `str1` ends with specified substring. The
    `begin` and `end` parameter represent the slice of string `str1`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The next method is `startswith()`, which works the same way as the previous method,
    just check the condition from the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand with the help of an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: Consider you may want to be sure that the given string must contain only letters.
    The `isalpha()` methods helps you to do that.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The method returns `True` only if string `str1` contains letters alone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Even spaces are not allowed.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to check the alphanumeric characters appearing in the string, then
    you can use the `isalnum()` method. This method returns `True` if the string contains
    only alphanumeric characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: If you only want to check digits, then you can use the `isdigit()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This method returns `True` if the string contains only digits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'To deal with only white spaces, Python string offers a method called `isspace()`,
    which returns `True` if the string contains only spaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see methods that deal with cases:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'The `istitle()` method returns `True` if the string is in title case. The following
    example shows the rest of the story:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: To check for lowercase, we can use the `islower()` method.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'This method returns `True` if the string contains all lowercase characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The `islower()` method does not care about the special character and digits.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, to check for uppercase you can use `isupper()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'This method returns `True` if the string contains only uppercase characters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: String functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far you have seen string methods. Let's see built-in functions of sequences
    and what values they would return when the string is passed as an argument. At
    the beginning of the chapter, we have already discussed the `len()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider you need to find the minimum character from a given string according
    to the ASCII value. To handle this situation, you can use the `min()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'The `min()` function returns the min character from string `str1` according
    to the ASCII value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'The next method is `max()`, which returns the max characters from string `str`
    according to the ASCII value. Let''s see some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: In many situations, we might need to convert integers or floats into a string.
    In order to do this conversion, the `str()` function is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: This function converts an argument value to string type. The argument value
    can be any type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to find a substring in the string, you can use the `in` operator.
    The `in` operator is used with the if statement as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: You have gained enough knowledge on Python strings. Now we move on to our next
    immutable data structure.
  prefs: []
  type: TYPE_NORMAL
- en: Tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python tuple is a sequence, which can store heterogeneous data types such as integers,
    floats, strings, lists, and dictionaries. Like strings, tuple is immutable.
  prefs: []
  type: TYPE_NORMAL
- en: Creating an empty tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: The empty tuple is written as two parentheses containing nothing.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tuple with elements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To create a tuple, fill the values in tuple separated by commas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'If you define the variable as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: 'The variable a would be a tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Indexing tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to access a particular value of tuple, specify a position number, in
    brackets. Let's discuss with an example. I am going to make a tuple of the heroes
    from the movie *Avengers*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'The following diagram will clear the doubts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/chapter-3-fouth.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Tuple indexing
  prefs: []
  type: TYPE_NORMAL
- en: Now you can see positive and negative indexing.
  prefs: []
  type: TYPE_NORMAL
- en: Slicing of tuple
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to do slicing, use the square brackets with the index or indices.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s discuss with this diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Chapter-3-fifth.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Slicing of tuple
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding example means we need start from `0` to `3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example means we start from `1` to the last index.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you use slicing index out of range, then the empty tuple would be returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'For negative indexing, use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: Now, let's see some generic function, which can be applied on the tuple.
  prefs: []
  type: TYPE_NORMAL
- en: Unpacking the items of tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn how to unpack the tuple variable. Let''s learn
    by example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, tuple's items have been assigned to `a`, `b`, and `c`
    variables correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens if you use more number of variables than the number of items in
    a tuple. Let''s see more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: So, interpreter throws a `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: 'What happens if you use less number of variables than the number of items in
    a tuple. Let''s see more examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: So, the interpreter once again shows an error with a different description.
  prefs: []
  type: TYPE_NORMAL
- en: Tuple functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want to know the length of the tuple, then you can use the `len()` function.
  prefs: []
  type: TYPE_NORMAL
- en: '**len()**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: The `len()` function returns the length of the tuple, which means the total
    number of elements in a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: Let's see how to use the `max()` function on a tuple.
  prefs: []
  type: TYPE_NORMAL
- en: '**max()**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: The `max(tuple)` function returns the element of tuple with the maximum value.
  prefs: []
  type: TYPE_NORMAL
- en: You must be in doubt with the meaning of maximum value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s understand with examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: The `max` function returns the maximum integer value.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the tuple contains int and float with the same numeric value, which value
    would be returned can you guess? Let’s see with this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are thinking it returns a float value, see the next example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: 'Both `450` and `450.0` possess the same numeric value. The `max` function returns
    the first occurrence in the tuple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: The `max()` function returns the string as the max value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see an example of string comparison:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: The max value decision is taken on the basis of the first character. So, `'z'`
    has been taken as the max value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the next example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the second and fourth strings both have the `'z'` character
    in the first position; this is when the decision is taken by judging the second
    character.
  prefs: []
  type: TYPE_NORMAL
- en: '**min()**'
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: The `min(tuple)` function returns the element of tuple with a minimum value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: If you want to convert a string or list into a tuple, then you can use the `tuple()` function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: 'You can delete the tuple using `del` keyword, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: Operations of tuples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will see addition and multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: 'By using the `+` operator, two tuples can be added as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the `*` operator, you can perform multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s check the memory address of the tuple after multiplication:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: Now, you can see that the first and third strings both possess the same memory
    location.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Obtain the domain (thapar.edu) name from the URL `http://www.thapar.edu/index.php/about-us/mission`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have the tuple `tup = ('www', 'thapar', 'edu','index', 'php','about-us','mission')`;
    now you can make a full URL like this  [www.thapar.edu/index.php/about-us/mission](http://www.thapar.edu/index.php/about-us/mission)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you have learned about strings, how to define strings, string
    functions, and string methods. Strings are immutable, they cannot be changed.
    In the tuple section, you have seen how to create a tuple. Like strings, tuples
    are immutable. There is no method that exists, which can change the existing tuple
    or string.
  prefs: []
  type: TYPE_NORMAL
