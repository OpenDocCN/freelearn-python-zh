["```py\n    class Particle: \n        def __init__(self, x, y, ang_vel): \n            self.x = x \n            self.y = y \n            self.ang_vel = ang_vel\n```", "```py\nclass ParticleSimulator:\n    def __init__(self, particles):\n        self.particles = particles\n```", "```py\n    v_x = -y / (x**2 + y**2)**0.5\n    v_y = x / (x**2 + y**2)**0.5\n```", "```py\n    class ParticleSimulator: \n        def __init__(self, particles): \n            self.particles = particles \n        def evolve(self, dt): \n            timestep = 0.00001 \n            nsteps = int(dt/timestep) \n\n            for i in range(nsteps):\n                for p in self.particles:\n                    # 1\\. calculate the direction \n                    norm = (p.x**2 + p.y**2)**0.5 \n                    v_x = -p.y/norm \n                    v_y = p.x/norm \n                    # 2\\. calculate the displacement \n                    d_x = timestep * p.ang_vel * v_x \n                    d_y = timestep * p.ang_vel * v_y \n                    p.x += d_x \n                    p.y += d_y \n                    # 3\\. repeat for all the time steps\n```", "```py\n        from matplotlib import pyplot as plt \n        from matplotlib import animation \n        def visualize(simulator): \n            X = [p.x for p in simulator.particles] \n            Y = [p.y for p in simulator.particles] \n            fig = plt.figure() \n            ax = plt.subplot(111, aspect='equal') \n            line, = ax.plot(X, Y, 'ro') \n\n            # Axis limits \n            plt.xlim(-1, 1) \n            plt.ylim(-1, 1) \n            # It will be run when the animation starts \n            def init(): \n                line.set_data([], []) \n                return line, # The comma is important!\n            def animate(i): \n                # We let the particle evolve for 0.01 time \n                  units \n                simulator.evolve(0.01) \n                X = [p.x for p in simulator.particles] \n                Y = [p.y for p in simulator.particles] \n                line.set_data(X, Y) \n                return line, \n            # Call the animate function each 10 ms \n            anim = animation.FuncAnimation(fig,\n              animate,init_func=init,blit=True,\n                interval=10) \n            plt.show()\n    ```", "```py\n    def test_visualize(): \n        particles = [\n                     Particle(0.3, 0.5, 1), \n                     Particle(0.0, -0.5, -1), \n                     Particle(-0.1, -0.4, 3)\n        ] \n        simulator = ParticleSimulator(particles) \n        visualize(simulator) \n    if __name__ == '__main__': \n        test_visualize()\n```", "```py\n    def test_evolve(): \n        particles = [Particle( 0.3,  0.5, +1), \n                     Particle( 0.0, -0.5, -1), \n                     Particle(-0.1, -0.4, +3)\n            ] \n        simulator = ParticleSimulator(particles) \n        simulator.evolve(0.1) \n        p0, p1, p2 = particles \n        def fequal(a, b, eps=1e-5): \n            return abs(a - b) < eps \n        assert fequal(p0.x, 0.210269) \n        assert fequal(p0.y, 0.543863) \n        assert fequal(p1.x, -0.099334) \n        assert fequal(p1.y, -0.490034) \n        assert fequal(p2.x,  0.191358) \n        assert fequal(p2.y, -0.365227) \n    if __name__ == '__main__': \n        test_evolve()\n```", "```py\n    from random import uniform \n    def benchmark(): \n        particles = [\n          Particle(uniform(-1.0, 1.0), uniform(-1.0, 1.0), \n            uniform(-1.0, 1.0)) \n          for i in range(1000)] \n        simulator = ParticleSimulator(particles) \n        simulator.evolve(0.1) \n    if __name__ == '__main__': \n        benchmark()\n```", "```py\n    $ time python simul.py\nreal    0m1.051s\nuser    0m1.022s\nsys     0m0.028s\n```", "```py\n# IPython Interface \n$ ipython \nIn [1]: from simul import benchmark \nIn [2]: %timeit benchmark() \n1 loops, best of 3: 782 ms per loop \n# Command Line Interface \n$ python -m timeit -s 'from simul import benchmark' \n'benchmark()'\n10 loops, best of 3: 826 msec per loop \n# Python Interface \n# put this function into the simul.py script \nimport timeit\nresult = timeit.timeit('benchmark()',\n setup='from __main__ import benchmark', number=10)\n# result is the time (in seconds) to run the whole loop \nresult = timeit.repeat('benchmark()',\n  setup='from __main__ import benchmark', number=10, \\\n    repeat=3) \n# result is a list containing the time of each repetition \n(repeat=3 in this case)\n```", "```py\n    from simul import Particle, ParticleSimulator\n    def test_evolve():\n        particles = [\n                     Particle( 0.3,  0.5, +1),\n                     Particle( 0.0, -0.5, -1),\n                     Particle(-0.1, -0.4, +3)\n          ]\n        simulator = ParticleSimulator(particles)\n        simulator.evolve(0.1)\n\n        p0, p1, p2 = particles\n        def fequal(a, b, eps=1e-5):\n            return abs(a - b) < eps\n        assert fequal(p0.x, 0.210269)\n        assert fequal(p0.y, 0.543863)\n        assert fequal(p1.x, -0.099334)\n        assert fequal(p1.y, -0.490034)\n        assert fequal(p2.x,  0.191358)\n        assert fequal(p2.y, -0.365227)\n```", "```py\n$ pytest test_simul.py::test_evolve\nplatform linux -- Python 3.5.2, pytest-3.0.5, py-1.4.32, \npluggy-0.4.0\nrootdir: /home/gabriele/workspace/hiperf/chapter1, inifile: \nplugins:\ncollected 2 items \ntest_simul.py .\n=========================== 1 passed in 0.43 seconds ===========================\n```", "```py\n    from simul import Particle, ParticleSimulator\n    def test_evolve(benchmark):\n        # ... previous code\n        benchmark(simulator.evolve, 0.1)\n```", "```py\n$ python -m cProfile simul.py\n```", "```py\n$ python -m cProfile -s tottime simul.py\n```", "```py\n$ python -m cProfile -o prof.out simul.py\n```", "```py\n    from simul import benchmark\n    import cProfile\n    cProfile.run(\"benchmark()\")\n```", "```py\n    from simul import benchmark\n    import cProfile\n    pr = cProfile.Profile()\n    pr.enable()\n    benchmark()\n    pr.disable()\n    pr.print_stats()\n```", "```py\n    def factorial(n): \n        if n == 0: \n            return 1.0 \n        else: \n            return n * factorial(n-1) \n    def taylor_exp(n): \n        return [1.0/factorial(i) for i in range(n)] \n    def taylor_sin(n): \n        res = [] \n        for i in range(n): \n            if i % 2 == 1: \n               res.append((-1)**((i-1)/2)/\n                   float(factorial(i))) \n            else: \n               res.append(0.0) \n        return res \n    def benchmark(): \n        taylor_exp(500) \n        taylor_sin(500) \n    if __name__ == '__main__': \n        benchmark()\n```", "```py\n$ python -m cProfile -o prof.out taylor.py\n```", "```py\n$ pyprof2calltree -i prof.out -o prof.calltree\n$ kcachegrind prof.calltree # or qcachegrind prof.calltree\n```", "```py\n    @profile \n    def evolve(self, dt): \n        # code\n```", "```py\n$ kernprof.py -l -v simul.py\n```", "```py\n    x = r * cos(alpha) \n    y = r * sin(alpha)\n```", "```py\n    v_x = (-p.y)/norm\n```", "```py\n    p.x, p.y = p.x - t_x_ang*p.y/norm, p.y + t_x_ang * \n    p.x/norm\n```", "```py\n        def evolve_fast(self, dt): \n            timestep = 0.00001 \n            nsteps = int(dt/timestep) \n            # Loop order is changed \n            for p in self.particles: \n                t_x_ang = timestep * p.ang_vel \n                for i in range(nsteps): \n                    norm = (p.x**2 + p.y**2)**0.5 \n                    p.x, p.y = (p.x - t_x_ang * p.y/norm,\n                        p.y + t_x_ang * p.x/norm)\n```", "```py\n$ time python simul.py # Performance Tuned\nreal    0m0.756s\nuser    0m0.714s\nsys    0m0.036s\n$ time python simul.py # Original\nreal    0m0.863s\nuser    0m0.831s\nsys    0m0.028s\n```", "```py\n    import dis \n    from simul import ParticleSimulator \n    dis.dis(ParticleSimulator.evolve)\n```", "```py\n    29           85 LOAD_FAST                5 (p) \n                 88 LOAD_ATTR                4 (y) \n                 91 UNARY_NEGATIVE        \n                 92 LOAD_FAST                6 (norm) \n                 95 BINARY_TRUE_DIVIDE    \n                 96 STORE_FAST               7 (v_x)\n```", "```py\n    def benchmark_memory(): \n        particles = [\n                     Particle(uniform(-1.0, 1.0), \n                              uniform(-1.0, 1.0), \n                              uniform(-1.0, 1.0)) \n                      for i in range(100000)\n            ] \n        simulator = ParticleSimulator(particles) \n        simulator.evolve(0.001)\n```", "```py\n    class Particle:\n        __slots__ = ('x', 'y', 'ang_vel') \n        def __init__(self, x, y, ang_vel): \n            self.x = x \n            self.y = y \n            self.ang_vel = ang_vel\n```"]