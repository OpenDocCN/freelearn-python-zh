["```py\n # sqlalchemy-async.py\n\n    from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\n    from sqlalchemy.orm import declarative_base, sessionmaker\n    from sqlalchemy import Column, Integer, String, Boolean, JSON\n    from sqlalchemy.orm import Session\n    from sqlalchemy.future import select\n    from sqlalchemy import update\n\n    # Initialize SQLAlchemy with a test database\n    DATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n    engine = create_async_engine(DATABASE_URL, future=True, echo=True)\n    async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)\n    Base = declarative_base()\n\n    # Data Model\n    class User(Base):\n        __tablename__ = \"user\"\n        id = Column(Integer, primary_key=True, autoincrement=True)\n        name = Column(String)\n        email = Column(String)\n        slack_id = Column(String)\n        password = Column(String)\n        config = Column(JSON)\n        is_active = Column(Boolean, default=True)\n        is_admin = Column(Boolean, default=False)\n        def json(self):\n            return {\"id\": self.id, \"email\": self.email, \"config\": self.config} \n```", "```py\n class UserDAL:\n      def __init__(self, db_session):\n         self.db_session = db_session\n      async def create_user(self, name, email, slack_id):\n         new_user = User(name=name, email=email, slack_id=slack_id)\n         self.db_session.add(new_user)\n         await self.db_session.flush()\n         return new_user.json()\n      async def get_all_users(self):\n         query_result = await self.db_session.execute(select(User).order_by(User.id))\n         return {\"users\": [user.json() for user in query_result.scalars().all()]}\n      async def get_user(self, user_id):\n         query = select(User).where(User.id == user_id)\n         query_result = await self.db_session.execute(query)\n         user = query_result.one()\n         return user[0].json() \n```", "```py\n @asynccontextmanager\n    async def user_dal():\n        async with async_session() as session:\n            async with session.begin():\n                yield UserDAL(session) \n```", "```py\n @app.get(\"/users\")\n    async def get_all_users():\n        async with user_dal() as ud:\n            return await ud.get_all_users() \n```", "```py\n # sqlalchemy-async.py\n    from contextlib import asynccontextmanager\n    from quart import Quart\n    from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession\n    from sqlalchemy.orm import declarative_base, sessionmaker\n    from sqlalchemy import Column, Integer, String, Boolean, JSON\n    from sqlalchemy.orm import Session\n    from sqlalchemy.future import select\n    from sqlalchemy import update\n    # Initialize SQLAlchemy with a test database\n    DATABASE_URL = \"sqlite+aiosqlite:///./test.db\"\n    engine = create_async_engine(DATABASE_URL, future=True, echo=True)\n    async_session = sessionmaker(engine, expire_on_commit=False, class_=AsyncSession)\n    Base = declarative_base()\n    # Data Model\n    class User(Base):\n        __tablename__ = \"user\"\n        id = Column(Integer, primary_key=True, autoincrement=True)\n        name = Column(String)\n        email = Column(String)\n        slack_id = Column(String)\n        password = Column(String)\n        config = Column(JSON)\n        is_active = Column(Boolean, default=True)\n        is_admin = Column(Boolean, default=False)\n        def json(self):\n            return {\n                \"id\": self.id,\n                \"email\": self.email,\n                \"slack_id\": self.slack_id,\n                \"config\": self.config,\n                \"is_active\": self.is_active,\n                \"is_admin\": self.is_admin,\n            }\n    # Data Access Layer\n    class UserDAL:\n        def __init__(self, db_session):\n            self.db_session = db_session\n        async def create_user(\n            self,\n            name,\n            email,\n            slack_id,\n            password=None,\n            config=None,\n            is_active=True,\n            is_admin=False,\n        ):\n            new_user = User(\n                name=name,\n                email=email,\n                slack_id=slack_id,\n                password=password,\n                config=config,\n                is_active=is_active,\n                is_admin=is_admin,\n            )\n            self.db_session.add(new_user)\n            await self.db_session.flush()\n            return new_user.json()\n        async def get_all_users(self):\n            query_result = await self.db_session.execute(select(User).order_by(User.id))\n            return [user.json() for user in query_result.scalars().all()]\n        async def get_user(self, user_id):\n            query = select(User).where(User.id == user_id)\n            query_result = await self.db_session.execute(query)\n            user = query_result.one()\n            return user[0].json()\n    app = Quart(__name__)\n    @app.before_serving\n    async def startup():\n        # create db tables\n        async with engine.begin() as conn:\n            # This resets the database – remove for a real project!\n            await conn.run_sync(Base.metadata.drop_all)\n            await conn.run_sync(Base.metadata.create_all)\n            async with user_dal() as bd:\n                await bd.create_user(\"name\", \"email\", \"slack_id\")\n    @asynccontextmanager\n    async def user_dal():\n        async with async_session() as session:\n            async with session.begin():\n                yield UserDAL(session)\n    @app.get(\"/users/<int:user_id>\")\n    async def get_user(user_id):\n        async with user_dal() as ud:\n            return await ud.get_user(user_id)\n    @app.get(\"/users\")\n    async def get_all_users():\n        async with user_dal() as ud:\n            return await ud.get_all_users()\n    if __name__ == \"__main__\":\n        app.run() \n```", "```py\n @app.get(\"/users/page\")\n    async def get_all_users_templated():\n        async with user_dal() as ud:\n            users = await ud.get_all_users()\n            return await render_template(\"users.html\", users=users) \n```", "```py\n <html>\n      <body>\n        <h1>User List</h1>\n        <ul>\n          {% for user in users %}\n          <li>\n          {{ user.email }} {{ user.slack_id }} \n          </li>\n          {% endfor %}\n        </ul>\n      </body>\n    </html> \n```", "```py\n import quart.flask_patch\n    from flask_wtf import FlaskForm \n    import wtforms as f \n    from wtforms.validators import DataRequired \n\n    class UserForm(FlaskForm):\n        email = f.StringField(\"email\", validators=[DataRequired()])\n        slack_id = f.StringField(\"Slack ID\")\n        password = f.PasswordField(\"password\")\n\n        display = [\"email\", slack_id, \"password\"] \n```", "```py\n @app.route(\"/create_user\", methods=[\"GET\", \"POST\"])\n    async def create_user():\n        form = UserForm()\n        if request.method == \"POST\" and form.validate():\n            async with user_dal() as ud:\n                await ud.create_user(form.name.data, form.email.data, form.slack_id.data)\n            return redirect(\"/users\")\n        return await render_template(\"create_user.html\", form=form) \n```", "```py\n <html> \n     <body> \n      <form action=\"\" method=\"POST\"> \n        {{ form.hidden_tag() }} \n        <dl> \n         {% for field in form.display %} \n         <dt>{{ form[field].label }}</dt> \n         <dd>{{ form[field]() }} \n           {% if form[field].errors %} \n             {% for e in form[field].errors %}{{ e }} {% endfor %} \n           {% endif %} \n           </dd>\n         {% endfor %} \n        </dl> \n        <p> \n        <input type=submit value=\"Publish\"> \n      </form> \n     </body> \n    </html> \n```", "```py\n{\n    \"event\": {\n        \"client_msg_id\": \"79cd47ec-4586-4677-a50d-4db58bdfcd4b\",\n        \"type\": \"app_mention\",\n        \"text\": \"<@U01HYK05BLM>\\u00a0weather in London, UK\",\n        \"user\": \"U136F44A0\",\n        \"ts\": \"1611254457.003600\",\n        \"team\": \"T136F4492\",\n        \"blocks\": [\n            {\n                \"type\": \"rich_text\",\n                \"block_id\": \"pqx\",\n                \"elements\": [\n                    {\n                        \"type\": \"rich_text_section\",\n                        \"elements\": [\n                            {\n                                \"type\": \"user\",\n                                \"user_id\": \"U01HYK05BLM\"\n                            },\n                            {\n                                \"type\": \"text\",\n                                \"text\": \" weather in London, UK\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        ],\n    … \n} \n```", "```py\n ACTION_MAP = {\n        \"help\": show_help_text,\n        \"weather\": fetch_weather,\n        \"config\": user_config,\n    }\n    def process_message(message, metadata):\n        \"\"\"Decide on an action for a chat message.\n        Arguments:\n            message (str): The body of the chat message\n            metadata (dict): Data about who sent the message,\n                  the time and channel.\n        \"\"\"\n        reply = None\n        for test, action in ACTION_MAP.items():\n            if message.startswith(test):\n                reply = action(message.lstrip(test), metadata)\n                break\n        if reply:\n            post_to_slack(reply, metadata) \n```", "```py\n # slack_oauth2.py\n    import os\n    from quart import Quart, request, render_template\n    import aiohttp\n    app = Quart(__name__)\n    @app.route(\"/\")\n    async def welcome_page():\n        client_id = os.environ[\"SLACK_CLIENT_ID\"]\n        return await render_template(\"welcome.html\", client_id=client_id)\n    @app.route(\"/slack/callback\")\n    async def oauth2_slack_callback():\n        code = request.args[\"code\"]\n        client_id = os.environ[\"SLACK_CLIENT_ID\"]\n        client_secret = os.environ[\"SLACK_CLIENT_SECRET\"]\n        access_url = f\"https://slack.com/api/oauth.v2.access?client_id={client_id}&client_secret={client_secret}&code={code}\"\n        async with aiohttp.ClientSession() as session:\n            async with session.get(access_url) as resp:\n                access_data = await resp.json()\n                print(access_data)\n        return await render_template(\"logged_in.html\")\n    if __name__ == \"__main__\":\n        app.run() \n```", "```py\n @app.route(\"/\")\n    @login_required\n    async def welcome_page():\n        return await render_template(\"welcome.html\") \n```", "```py\n @app.route(\"/slack_login\")\n    async def slack_login():\n        client_id = os.environ[\"SLACK_CLIENT_ID\"]\n        return await render_template(\"login.html\", client_id=client_id)\n    @app.errorhandler(Unauthorized)\n    async def redirect_to_login(_):\n        return redirect(url_for(\"slack_login\")) \n```", "```py\n # logging_in.py\n    import os\n    from quart import Quart, request, render_template, redirect, url_for\n    from quart_auth import (\n        AuthManager,\n        login_required,\n        logout_user,\n        login_user,\n        AuthUser,\n        Unauthorized,\n    )\n    import aiohttp\n    import secrets\n    app = Quart(__name__)\n    AuthManager(app)\n    app.secret_key = secrets.token_urlsafe(16)\n    @app.route(\"/\")\n    @login_required\n    async def welcome_page():\n        return await render_template(\"welcome.html\")\n    @app.route(\"/slack_login\")\n    async def slack_login():\n        client_id = os.environ[\"SLACK_CLIENT_ID\"]\n        return await render_template(\"login.html\", client_id=client_id)\n    @app.errorhandler(Unauthorized)\n    async def redirect_to_login(_):\n        return redirect(url_for(\"slack_login\"))\n    @app.route(\"/slack/callback\")\n    async def oauth2_slack_callback():\n        code = request.args[\"code\"]\n        client_id = os.environ[\"SLACK_CLIENT_ID\"]\n        client_secret = os.environ[\"SLACK_CLIENT_SECRET\"]\n        access_url = f\"https://slack.com/api/oauth.v2.access?client_id={client_id}&client_secret={client_secret}&code={code}\"\n        async with aiohttp.ClientSession() as session:\n            async with session.get(access_url) as resp:\n            access_data = await resp.json()\n            if access_data[\"ok\"] is True:\n                authed_user = access_data[\"authed_user\"][\"id\"]\n                login_user(AuthUser(authed_user))\n                return redirect(url_for(\"welcome_page\")\n        return redirect(url_for(\"slack_login\")) \n```", "```py\n class UserDAL:\n        ...\n        async def get_users_with_locations(self):\n            query = select(User).where(User.location is not None)\n            return await self.db_session.execute(query) \n```", "```py\n # weather_worker.py\n    import asyncio\n    from asgiref.sync import async_to_sync\n    from celery import Celery\n    from database import user_dal\n    celery_app = Celery(\"tasks\", broker=\"amqp://localhost\")\n    async def fetch_weather(location):\n        return \"This is where we would call the weather service\"\n    async def post_to_slack(message, options):\n        print(f\"This is where we would post {message}\")\n    async def weather_alerts_async():\n        async with user_dal() as ud:\n            query_results = await ud.get_users_with_locations()\n            for user in query_results:\n                user = user[0] # the database returns a tuple\n                weather_message = await fetch_weather(user.location)\n                username = user.slack_id\n                if not username.startswith(\"@\"):\n                    username = \"@\" + username\n                await post_to_slack(weather_message, {\"channel\": username})\n    @celery_app.task\n    def do_weather_alerts():\n        async_to_sync(weather_alerts_async)()\n    @celery_app.on_after_configure.connect\n    def setup_periodic_tasks(sender, **kwargs):\n        sender.add_periodic_task(10.0, do_weather_alerts, name=\"fetch the weather\", expires=30) \n```", "```py\n docker run -d -p 5672:5672 rabbitmq \n    celery -A background worker  --loglevel=INFO\n    celery -A background beat --loglevel=INFO \n```", "```py\n from celery.schedules import crontab\n    @celery_app.on_after_configure.connect\n    def setup_periodic_tasks(sender, **kwargs):\n        sender.add_periodic_task(       \n            crontab(hour=7, minute=30, day_of_week='monday'),\n            do_weather_alerts, name=\"fetch the weather\", expires=30\n        ) \n```"]