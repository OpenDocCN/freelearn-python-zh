- en: Chapter 2. Getting Started with Grok
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 2 章：开始使用 Grok
- en: 'Now that we know something about Grok and its history, let''s get started with
    it. The first thing to do, of course, is to install the programs on which Grok
    is dependent. Luckily, most of this work will be performed automatically for us,
    but there are three key programs that you may need to install manually: Python,
    a C compiler (not necessary on Windows systems), and EasyInstall. Also, please
    be aware that Grok installs itself over the network, so an internet connection
    is required.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经对 Grok 及其历史有所了解，让我们开始使用它吧。当然，首先要做的是安装 Grok 所依赖的程序。幸运的是，大部分工作将自动为我们完成，但有三项关键程序你可能需要手动安装：Python、一个
    C 编译器（Windows 系统上不需要），以及 EasyInstall。另外，请注意 Grok 会通过网络安装自身，因此需要互联网连接。
- en: 'In this chapter, we will cover:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖：
- en: How to install Python on different platforms
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何在不同的平台上安装 Python
- en: What the Python Package Index (PyPI) is
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 软件包索引（PyPI）是什么
- en: How to work with EasyInstall to quickly install packages from the PyPI over
    the network
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 EasyInstall 通过网络快速安装 PyPI 上的软件包
- en: How `virtualenv` allows us to set up clean Python environments for our development
    work
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`virtualenv` 如何让我们为开发工作设置干净的 Python 环境'
- en: How to create a project using `grokproject`
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 `grokproject` 创建项目
- en: How to run an application using paster
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用 paster 运行应用程序
- en: What the Grok admin UI is, and how to use it
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grok 管理员用户界面是什么，以及如何使用它
- en: 'Because Python runs on many different platforms, Grok can be installed almost
    anywhere. In this chapter, we will provide instructions for installing it on three
    specific platforms: Unix/Linux, Mac OS X, and Windows.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Python 支持许多不同的平台，Grok 几乎可以在任何地方安装。在本章中，我们将提供在三个特定平台上安装它的说明：Unix/Linux、Mac
    OS X 和 Windows。
- en: Getting a C compiler
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取 C 编译器
- en: If you use Linux or Mac OS X, your first step is to obtain a compiler. Grok
    depends on the Zope Toolkit, which includes some C extensions in its source code,
    and thus we need a compiler to build these extensions, on most platforms.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用 Linux 或 Mac OS X，你的第一步是获取一个编译器。Grok 依赖于 Zope 工具包，该工具包在其源代码中包含一些 C 扩展，因此我们需要一个编译器来构建这些扩展，在大多数平台上。
- en: Windows users need not worry about this because the Grok installation process
    uses precompiled packages, but the other systems do require a compiler to be installed,
    in order for Grok to be built.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 用户无需担心这个问题，因为 Grok 安装过程使用的是预编译包，但其他系统确实需要安装编译器，以便构建 Grok。
- en: 'Many Linux distributions include a compiler in the default setup, so no action
    is needed for these distributions, but Ubuntu in particular needs a special package
    containing the compiler and other development tools to be installed. The package
    name in this case is `build-essential` and you install it by using the following
    command:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Linux 发行版在默认设置中包含编译器，因此对于这些发行版不需要采取任何行动，但 Ubuntu 需要安装一个包含编译器和其他开发工具的特殊软件包。在这种情况下，软件包名称是
    `build-essential`，你可以通过以下命令安装它：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On Mac OS X systems, there's a compiler included in the Developer Tools package
    on the system DVD. See[http://developer.apple.com/tools/xcode/](http://developer.apple.com/tools/xcode/)
    for more information.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Mac OS X 系统中，系统 DVD 上的开发者工具包中包含了一个编译器。更多信息请参阅[http://developer.apple.com/tools/xcode/](http://developer.apple.com/tools/xcode/)。
- en: Installing Python
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: One of Grok's greatest strengths is that it is written in Python. Grok requires
    Python version 2.4 or 2.5 to run (at the time of writing, 2.6 support is around
    the corner), but be aware that it won't run on the recently released 3.0 version,
    because this version breaks compatibility with older versions of Python and thus
    is still not supported by most libraries and frameworks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 最伟大的优势之一是它是用 Python 编写的。Grok 需要 Python 版本 2.4 或 2.5 来运行（在撰写本文时，2.6 版本的支持即将到来），但请注意，它不能在最近发布的
    3.0 版本上运行，因为该版本与旧版本的 Python 不兼容，因此大多数库和框架仍然不支持它。
- en: Installing Python on Unix/Linux
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Unix/Linux 上安装 Python
- en: 'Unix/Linux distributions generally come with Python already installed, so the
    chances are that your system already has a suitable version of Python installed.
    To see which version you have, type the command `python V` at the shell prompt;
    you''ll get a result similar to this:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Unix/Linux 发行版通常已经预装了 Python，所以你的系统可能已经安装了合适的 Python 版本。要查看你的版本，请在 shell 提示符下输入命令
    `python V`；你将得到类似以下的结果：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you get an error, then this means that Python is not installed on your machine,
    and so you will have to install it yourself. This should not happen in any mainstream
    Linux distribution, but it could conceivably happen with some Unix variants. This
    is highly unlikely though, so you should get a version number similar to the previous
    example.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您遇到错误，这意味着 Python 没有安装到您的机器上，因此您必须自行安装它。这在任何主流 Linux 发行版中都不太可能发生，但可能在某些 Unix
    变体中发生。尽管如此，这种情况非常罕见，因此您应该得到一个类似于上一个示例的版本号。
- en: If your version number is 2.4 or 2.5, you may use your system's Python installation
    for developing with Grok. However, depending on your Linux distribution, you may
    need additional packages. Some distributions bundle the development libraries
    and headers for Python in separate packages, so it could be necessary to install
    these on your system.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的版本号是 2.4 或 2.5，您可以使用系统上的 Python 安装来开发 Grok。然而，根据您的 Linux 发行版，您可能需要额外的包。一些发行版将
    Python 的开发库和头文件捆绑在单独的包中，因此可能需要在您的系统上安装这些包。
- en: If you use Ubuntu or Debian, for example, you will need to install the `python-dev`
    package as well. You can easily do this by using the command line.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果您使用 Ubuntu 或 Debian，您还需要安装 `python-dev` 包。您可以通过使用命令行轻松完成此操作。
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Other distributions may require different packages to be installed. Consult
    your system's documentation for instructions.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其他发行版可能需要安装不同的包。请参阅您系统的文档以获取说明。
- en: 'If you don''t have Python installed, you should be able to install it easily
    using your system''s package manager, similar to the way we set up additional
    packages:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有安装 Python，您应该能够使用系统包管理器轻松安装它，类似于我们设置附加包的方式：
- en: '[PRE3]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If you have Python, but it''s not version 2.4 or 2.5, it''s very likely that
    your Linux distribution includes the package for version 2.5\. In Ubuntu or Debian,
    you can use the following command:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有 Python，但不是 2.4 或 2.5 版本，那么您的 Linux 发行版很可能包含了 2.5 版本的包。在 Ubuntu 或 Debian
    中，您可以使用以下命令：
- en: '[PRE4]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You don't necessarily have to use the system's version of Python. Some developers
    prefer to manually compile their own Python from the source. This can give you
    more flexibility and also avoid package conflicts, which can occur when different
    Python frameworks or tools are installed on the same system (note that similar
    goals may be accomplished without compiling your own version, by using the `virtualenv`
    tool, as described elsewhere in this chapter).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您不一定必须使用系统版本的 Python。一些开发者更喜欢从源代码手动编译自己的 Python。这可以给您带来更多的灵活性，并且还可以避免包冲突，当不同的
    Python 框架或工具在同一系统上安装时可能会发生包冲突（请注意，在不编译自己的版本的情况下，也可以通过使用本章其他地方描述的 `virtualenv`
    工具实现类似的目标）。
- en: To install from the source you need to download the desired version from [http://www.python.org/download/](http://www.python.org/download/)
    and go through the usual **configure-build-install** cycle required for Unix/Linux
    packages. Remember to use Python 2.4 or 2.5.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要从源代码安装，您需要从 [http://www.python.org/download/](http://www.python.org/download/)
    下载所需的版本，并完成 Unix/Linux 软件包所需的常规 **configure-build-install** 循环。请记住使用 Python 2.4
    或 2.5。
- en: Installing Python on Mac OS X
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Mac OS X 上安装 Python
- en: Mac OS X always comes with Python pre-installed, but due to the Mac release
    cycle, the version installed on your computer can be one or even two years old.
    Therefore, in many cases, Python-Mac community members recommend that you install
    your own version.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Mac OS X 总是预装了 Python，但由于 Mac 发布周期，安装到您计算机上的版本可能是一年甚至两年前的版本。因此，在许多情况下，Python-Mac
    社区成员建议您安装自己的版本。
- en: If your OS X version is 10.5, you should be fine with the installed version
    of Python. For older versions, you might want to check [http://www.python.org/download/mac/](http://www.python.org/download/mac/)
    for available installers and suggestions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的 OS X 版本是 10.5，您应该可以使用已安装的 Python 版本。对于更早的版本，您可能需要查看 [http://www.python.org/download/mac/](http://www.python.org/download/mac/)
    以获取可用的安装程序和建议。
- en: Grok has a known dependency clash with **Twisted**, a networking package included
    in recent versions of Mac OS X, so it's best to use a separate Python environment
    for Grok. You could, of course, build your own version, as described at the end
    of the *Installing Python on Unix/Linux* section of this chapter. If, for some
    reason, you are not comfortable with building your own Python from the source,
    the recommended approach is to use a virtual environment. This will be covered
    later in this chapter.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: Grok与Mac OS X最新版本中包含的网络包**Twisted**存在已知的依赖冲突，因此最好为Grok使用单独的Python环境。当然，您可以按照本章末尾的*在Unix/Linux上安装Python*部分所述构建自己的版本。如果您出于某种原因不习惯从源代码构建自己的Python，建议的方法是使用虚拟环境。这将在本章后面进行介绍。
- en: Installing Python on Windows
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Windows上安装Python
- en: In addition to the source download, Python releases come with a very good Windows
    installer. All you have to do to install Python on Windows (we suggest you use
    at least XP or Vista) is to select a Python version from [http://www.python.org/download/](http://www.python.org/download/)
    and choose to download the corresponding `.msi` installer from the available options.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了源代码下载外，Python发行版还附带了一个非常好的Windows安装程序。要在Windows上安装Python（我们建议您使用至少XP或Vista），您只需从[http://www.python.org/download/](http://www.python.org/download/)选择一个Python版本，然后从提供的选项中选择下载相应的`.msi`安装程序。
- en: After downloading the installer, double-click the installer file, select an
    appropriate directory to install Python (the default should be fine), and you
    can begin to use Python. Since you need to work from the command line to use Grok,
    you might want to add the Python installation path to your system path so that
    you can easily access the Python interpreter from any directory.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 下载安装程序后，双击安装文件，选择一个合适的目录来安装Python（默认设置应该没问题），然后您就可以开始使用Python了。由于您需要从命令行使用Grok，您可能希望将Python安装路径添加到系统路径中，这样您就可以从任何目录轻松访问Python解释器。
- en: To do this, go to the Windows **Control Panel**, click on the **System** icon,
    and select the **Advanced** tab. From there, click on the **Environment Variables**
    button and select **Path** from the **System Variables** windows (the one at the
    bottom). Click on **Edit**, and a window with a text box will be displayed, in
    which you can edit the current value. Be sure to leave the current value exactly
    as it is, and add the path to your Python installation at the end. The path is
    the one you selected when running the installer, and is usually in the form `C:\PythonXX`,
    where XX represents the Python version without a dot (for example, **C:\Python25**,
    as shown in the following screenshot). Separate this path from the previous paths
    already present in the system path by using a semicolon. You might also want to
    add `C:\PythonXX\Scripts` after this, so that the Python scripts that we are going
    to install in this chapter can also be invoked from anywhere.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要这样做，请转到Windows **控制面板**，单击**系统**图标，然后选择**高级**选项卡。从那里，单击**环境变量**按钮，并从**系统变量**窗口（位于底部）中选择**Path**。单击**编辑**，将显示一个带有文本框的窗口，您可以在其中编辑当前值。请确保将当前值保持原样，并在末尾添加Python安装路径。路径是您运行安装程序时选择的路径，通常形式为`C:\PythonXX`，其中XX代表不带点的Python版本（例如，**C:\Python25**，如以下截图所示）。使用分号将此路径与系统路径中已存在的路径分开。您还可能希望在后面添加`C:\PythonXX\Scripts`，这样我们将在本章中安装的Python脚本也可以从任何位置调用。
- en: '![Installing Python on Windows](img/7481_02_01.jpg)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![在Windows上安装Python](img/7481_02_01.jpg)'
- en: To use Grok, you will also need to install the `win32all` package, which includes
    the Win32 API, COM support, and Pythonwin. This package also comes with an installer,
    so it should be easy to set up. Just go to [http://sourceforge.net/projects/pywin32/files](http://sourceforge.net/projects/pywin32/files)
    and download the corresponding `win32all` version for your already installed version
    of Python. Simply run the installer after downloading it, and everything will
    be ready.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用Grok，您还需要安装`win32all`包，该包包括Win32 API、COM支持和Pythonwin。此包还附带安装程序，因此应该很容易设置。只需访问[http://sourceforge.net/projects/pywin32/files](http://sourceforge.net/projects/pywin32/files)，下载与您已安装的Python版本对应的`win32all`版本。下载后，只需运行安装程序，一切就绪。
- en: EasyInstall and the Python Package Index (PyPI)
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: EasyInstall和Python包索引（PyPI）
- en: The **Python Package Index** (**PyPI**) is a repository of software for Python,
    where thousands of packages are available for download. You can find many kinds
    of libraries and applications there, and Zope and Grok are well represented, with
    hundreds of packages at your disposal.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 包索引**（**PyPI**）是 Python 软件的仓库，其中提供了数千个可供下载的软件包。您可以在那里找到许多种类的库和应用程序，Zope
    和 Grok 都有很好的代表，您有数百个软件包可供使用。'
- en: What makes PyPI much more powerful is a Python script called `easy_install`
    a script that allows Python developers to install any package indexed on the PyPI
    over the network, keeping track of dependencies and versions. Packages that can
    be easy installed are packaged either as compressed files or in a special format,
    using the `.egg` extension, and are known as **Python eggs.**
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使 PyPI 变得更有力的一个因素是名为 `easy_install` 的 Python 脚本，它允许 Python 开发者通过网络安装 PyPI 上索引的任何软件包，同时跟踪依赖关系和版本。可以轻松安装的软件包要么打包为压缩文件，要么使用特殊格式，即
    `.egg` 扩展名，并被称为 **Python eggs**。
- en: The `easy_install` module is a part of a package known as `setuptools`, so you
    need to install that in order to obtain it. There's an installer for Windows and
    a `.egg` file for Unix/Linux/Mac available at the setuptools PyPI page on [http://pypi.python.org/pypi/setuptools](http://pypi.python.org/pypi/setuptools).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy_install` 模块是 `setuptools` 软件包的一部分，因此您需要安装它才能获取它。在 setuptools PyPI 页面上有
    Windows 安装程序和 Unix/Linux/Mac 的 `.egg` 文件可供下载，网址为 [http://pypi.python.org/pypi/setuptools](http://pypi.python.org/pypi/setuptools)。'
- en: 'To install `setuptools` on Windows, just run the installer. For Unix/Linux/Mac
    systems, run the `.egg` file as a shell script, like in this example (your version
    may vary):'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 上安装 `setuptools`，只需运行安装程序。对于 Unix/Linux/Mac 系统，将 `.egg` 文件作为 shell
    脚本运行，如下例所示（您的版本可能不同）：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Many Linux distributions include a package for `setuptools`. In Ubuntu or Debian,
    for example, you can use `apt-get` to install it:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 许多 Linux 发行版都包含 `setuptools` 的软件包。例如，在 Ubuntu 或 Debian 中，您可以使用 `apt-get` 来安装它：
- en: '[PRE6]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: However, we recommend that you install the newest version manually, even if
    there's a package available for your system, as this way you are assured of getting
    the latest version.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们建议您手动安装最新版本，即使您的系统有可用的软件包也是如此，因为这样您可以确保获得最新版本。
- en: 'After this, the `easy_install` script will be available on the system Python''s
    path, and from then onwards any package from PyPI can be installed on your system
    using:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，`easy_install` 脚本将出现在系统 Python 的路径上，从那时起，您可以使用以下命令在您的系统上安装 PyPI 上的任何软件包：
- en: '[PRE7]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It could be possible that you already have `setuptools` installed, but some
    package that you want to easy install might need a more recent version. In this
    case, you will receive an error informing you of this fact. To quickly update
    your `setuptools` version, use the following command:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 可能您已经安装了 `setuptools`，但您想要轻松安装的某些软件包可能需要更近期的版本。在这种情况下，您将收到一个错误信息，告知您这一事实。要快速更新您的
    `setuptools` 版本，请使用以下命令：
- en: '[PRE8]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `-U` switch tells `easy_install` to get the latest version of a package
    and update the previous version in place. The `easy_install` commands are identical
    on Windows systems. Just leave out the word `sudo` at the beginning.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`-U` 开关告诉 `easy_install` 获取软件包的最新版本，并就地更新之前的版本。在 Windows 系统上，`easy_install`
    命令是相同的。只需在开头省略 `sudo` 这个词即可。'
- en: As mentioned before, Grok and dozens of packages that you can use with both
    Grok and plain Zope, are available on PyPI, so we will use `easy_install` to install
    the packages required by Grok. But first, we'll learn how to set up a clean environment
    for our Grok development work.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Grok 和您可以使用 Grok 和纯 Zope 一起使用的数十个软件包，可在 PyPI 上找到，因此我们将使用 `easy_install`
    安装 Grok 所需的软件包。但首先，我们将学习如何为我们的 Grok 开发工作设置一个干净的环境。
- en: Grok and the Python environment
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grok 和 Python 环境
- en: Grok uses a fairly large number of packages. If other large Python packages,
    or even a number of smaller Python packages, are installed under the same installation
    of Python dependency problems or version conflicts can sometimes arise. This is
    because, the code for Python packages installed by `easy_install` or other Python
    installation methods are usually stored inside the `site-packages` directory of
    the Python library.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 使用相当多的软件包。如果其他大型 Python 软件包，甚至是一系列较小的 Python 软件包，在相同的 Python 安装下安装，有时可能会出现依赖关系问题或版本冲突。这是因为，通过
    `easy_install` 或其他 Python 安装方法安装的 Python 软件包的代码通常存储在 Python 库的 `site-packages`
    目录中。
- en: Grok isolates its packages by placing them inside the `.buildout/eggs` directory,
    but the Python interpreter still looks into `site-packages` for finding a required
    package, which means that if another Python tool installs a different version
    of a library used by Grok, a conflict could occur.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 通过将它们放置在 `.buildout/eggs` 目录中来隔离其包，但 Python 解释器仍然会查找 `site-packages` 以找到所需的包，这意味着如果另一个
    Python 工具安装了 Grok 所用库的不同版本，可能会发生冲突。
- en: This probably will not be a problem for you unless you use another Zope-based
    technology, such as **Plone**. If you are starting with Grok, the easiest course
    is probably to just go ahead and install it, but if you run into any version conflicts
    there's a tool that can help you out of the mess; it's called `virtualenv`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能不会给你带来问题，除非你使用其他基于 Zope 的技术，例如 **Plone**。如果你是从 Grok 开始的，最简单的做法可能是直接安装它，但如果在那里遇到任何版本冲突，有一个工具可以帮助你摆脱混乱；它被称为
    `virtualenv`。
- en: Virtualenv
  id: totrans-62
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Virtualenv
- en: '`virtualenv` is a Python package that allows the creation of isolated Python
    environments. This is a way to avoid conflicting packages inside the `site-packages`
    directory from interfering with your Grok application.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualenv` 是一个 Python 包，允许创建独立的 Python 环境。这是一种避免 `site-packages` 目录内的冲突包干扰你的
    Grok 应用程序的方法。'
- en: '`virtualenv` can be installed by using `easy_install:`'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用 `easy_install:` 安装 `virtualenv`。
- en: '[PRE9]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Once it''s installed, you can work with it by creating environments for any
    new projects. For example, to create a test environment for Grok, go to a directory
    of your choice under your home directory, and type:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你可以通过为任何新项目创建环境来使用它。例如，为了为 Grok 创建一个测试环境，前往你主目录下的任意目录，并输入：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: This command will create a directory named `testgrok`, with subdirectories `bin`
    and `lib` (Scripts and `Lib` under Windows). Inside the `bin` directory you will
    find the `python` and `easy_install` commands, which will run under the context
    of the virtual environment that you just created. This means, `python` will run
    the Python interpreter by using the `lib` directory under `testgrok`, and `easy_install`
    will add new packages under the `site-packages` directory there.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为 `testgrok` 的目录，其中包含子目录 `bin` 和 `lib`（Windows 下的脚本和 `Lib`）。在 `bin`
    目录中，你可以找到 `python` 和 `easy_install` 命令，它们将在你刚刚创建的虚拟环境上下文中运行。这意味着 `python` 将使用
    `testgrok` 下的 `lib` 目录来运行 Python 解释器，而 `easy_install` 将在该 `site-packages` 目录下添加新包。
- en: The `--no-site-packages` option tells `virtualenv` that none of the existing
    packages under the system's Python `site-packages` should be available in the
    new `virtualenv`. It is recommended that you use this option when building environments
    for Grok. However, if you have many different environments for applications that
    tend to use the same general libraries, it is possible to install those libraries
    under the main Python environment and just add the required packages for each
    application under the virtual environment. In this case, the `no-site-packages`
    option should not be used, but you will need to plan your setup very carefully.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`--no-site-packages` 选项告诉 `virtualenv`，系统 Python `site-packages` 目录下的现有包都不应该在新
    `virtualenv` 中可用。建议在为 Grok 构建环境时使用此选项。然而，如果你有多个不同的环境，这些环境倾向于使用相同的通用库，你可以在主 Python
    环境下安装这些库，只需在虚拟环境中添加每个应用程序所需的包即可。在这种情况下，不应使用 `no-site-packages` 选项，但你需要非常仔细地规划你的设置。'
- en: When working inside a `virtualenv`, you must remember to use the full path to
    the `python` and `easy_install` commands, or you may inadvertently install a package
    in the main Python environment, or run your application with a different set of
    packages than you intended. To prevent this problem, a batch script named `activate`
    is included in the `bin` directory of the `virtualenv` (Scripts directory under
    Windows). Once you run it, all further invocations of the `python` and `easy_install`
    commands will use their `virtualenv` versions until you end the session by using
    the corresponding `deactivate` script.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `virtualenv` 内工作的时候，你必须记得使用 `python` 和 `easy_install` 命令的完整路径，否则你可能会无意中在主
    Python 环境中安装包，或者使用与你预期不同的包集运行你的应用程序。为了防止这个问题，`virtualenv` 的 `bin` 目录（Windows 下的脚本目录）中包含了一个名为
    `activate` 的批处理脚本。一旦运行它，所有后续的 `python` 和 `easy_install` 命令都将使用它们的 `virtualenv`
    版本，直到你使用相应的 `deactivate` 脚本结束会话。
- en: 'Use the following command to activate the `virtualenv` under Unix/Linux/Mac
    for our `testgrok` environment:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在 Unix/Linux/Mac 下激活 `virtualenv` 的 `testgrok` 环境：
- en: '[PRE11]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'And in Windows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 上：
- en: '[PRE12]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: As `buildout` itself takes care of this, the `activate` and `deactivate` scripts
    are not needed for Grok; they are only mentioned here for completeness.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`buildout`本身负责这一点，因此对于Grok不需要`activate`和`deactivate`脚本；这里只是提及以示完整。
- en: Installing Grok using grokproject
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用grokproject安装Grok
- en: 'We are finally ready to install Grok. To make it easy to create a project along
    with a basic directory structure, Grok uses the `grokproject` package, which can
    be installed using `easy_install`. Go to a directory where you want to create
    your application (if you are using `virtualenv`, go inside the `testgrok virtualenv`
    we created in the previous section). Now type the following command:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们终于准备好安装Grok了。为了便于创建项目以及基本目录结构，Grok使用了`grokproject`包，可以使用`easy_install`来安装。前往你想要创建应用程序的目录（如果你使用`virtualenv`，请进入我们在上一节中创建的`testgrok
    virtualenv`内部）。现在输入以下命令：
- en: '[PRE13]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: You have now installed it, but keep in mind the `-U` switch for `easy_install`
    that allows you to update a package in place, because `grokproject` is under continuous
    development, and updating it frequently is a good idea. Now we can create our
    first Grok project.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经安装了它，但请记住`easy_install`的`-U`开关，它允许你在原地更新一个包，因为`grokproject`正在持续开发中，频繁更新是个好主意。现在我们可以创建我们的第一个Grok项目。
- en: Creating our first project
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个项目
- en: As mentioned earlier, the `grokproject` package we just installed is a tool
    for creating projects. A Grok project is a directory that constitutes a working
    environment in which Grok applications can be developed. It's a template that
    includes a simple executable application that can be used as a base for development
    and as a guide for where things usually go in Grok.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，我们刚刚安装的`grokproject`包是一个用于创建项目的工具。Grok项目是一个目录，它构成了一个工作环境，其中可以开发Grok应用程序。它是一个模板，包括一个简单的可执行应用程序，可以用作开发的基础，并作为Grok中事物通常去向的指南。
- en: 'Creating a project is very easy. Let''s create the traditional hello world
    example using Grok:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 创建项目非常简单。让我们使用Grok创建传统的hello world示例：
- en: '[PRE14]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '`grokproject` takes as an argument, the name of directory where the project
    will be created. After you run the command, you will immediately be asked for
    an administrator username and password. Take note of this because you will need
    it later, to run the application for the first time.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`grokproject`将作为参数接受将要创建项目的目录名称。运行命令后，你将立即被要求输入管理员用户名和密码。请注意这一点，因为稍后你需要它来运行应用程序的第一次。'
- en: Once it has the required information, `grokproject` downloads and installs the
    Zope Toolkit packages that Grok requires, as well as Grok itself. This can take
    a few minutes, depending on the speed of your network connection, because Grok
    consists of many packages. Once the download is finished, `grokproject` configures
    Grok, and sets up the Grok application template, leaving it ready for use.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它有了所需的信息，`grokproject`将下载并安装Grok所需的Zope Toolkit包，以及Grok本身。这可能需要几分钟，具体取决于你的网络连接速度，因为Grok由许多包组成。下载完成后，`grokproject`将配置Grok，并设置Grok应用程序模板，使其准备好使用。
- en: Running the default application
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行默认应用程序
- en: To run the default application that is created along with the project workspace,
    we need to start up Grok. Let's change the current directory to that of our hello
    world example, and do that.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行与项目工作空间一起创建的默认应用程序，我们需要启动Grok。让我们将当前目录更改为我们的hello world示例所在的目录，并执行该操作。
- en: '[PRE15]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note that the command needs to be run directly from the project's directory.
    Please do not change to the `bin` directory and try to run `paster` there. In
    general, all project scripts and commands are meant to be run from the main project
    directory.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，该命令需要直接在项目目录中运行。请不要切换到`bin`目录并尝试在那里运行`paster`。一般来说，所有项目脚本和命令都旨在从主项目目录运行。
- en: This command will start Grok on port 8080, which is its default port. Now you
    can see Grok in action at last by opening a web browser and pointing it to `http://localhost:8080`.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将在8080端口启动Grok，这是它的默认端口。现在你可以通过打开网页浏览器并将它指向`http://localhost:8080`来最后看到Grok的实际运行情况。
- en: 'If, for some reason, you have to use a different port on your system, you will
    need to edit the `deploy.ini` file inside the `parts/etc/` directory. This file
    holds Grok''s deployment configuration. You will find the line where the port
    is set (very near to the bottom of the file). Simply change it to whatever number
    you want, and run `paster` again. Here is an example of how the relevant part
    of the file should look:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，您必须在系统上使用不同的端口，您需要编辑`parts/etc/`目录内的`deploy.ini`文件。此文件包含Grok的部署配置。您将找到设置端口的行（文件底部附近）。只需将其更改为您想要的任何数字，然后再次运行`paster`。以下是文件相关部分的示例：
- en: '[PRE16]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: When you go to that URL, you will see a login prompt. Here you have to use the
    login and password that you selected when you created the project in the previous
    section. After that, you will be inside the Grok administration interface (refer
    the following screenshot).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当您访问该URL时，您将看到一个登录提示。在这里，您必须使用您在上一节创建项目时选择的登录名和密码。之后，您将进入Grok管理界面（参考以下截图）。
- en: '![Running the default application](img/7481_02_02.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![运行默认应用程序](img/7481_02_02.jpg)'
- en: All you need to do to create a copy of the default application is to type a
    name for it in the text box with the label **Name your new app** label and click
    the **Create** button. Call it **hello**, for example. After that, you will see
    a new section on the page where installed applications are shown, and **hello**
    should be the only one in the list, as shown in the next screenshot. You can either
    click the name from there, or point your browser to `http://localhost:8080/hello`,
    to see the application running.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建默认应用程序的副本，您只需在标签为**命名您的应用程序**的文本框中输入名称，然后点击**创建**按钮。例如，可以命名为**hello**。之后，您将在页面上看到一个新部分，显示已安装的应用程序，其中**hello**应该是列表中唯一的，如下一张截图所示。您可以从那里点击名称，或者将浏览器指向`http://localhost:8080/hello`，以查看正在运行的应用程序。
- en: '![Running the default application](img/7481_02_03.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![运行默认应用程序](img/7481_02_03.jpg)'
- en: 'At this point, your browser should display a very simple HTML page with a message
    telling you that Grok is up and running, as seen in the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，您的浏览器应显示一个非常简单的HTML页面，其中有一条消息告诉您Grok正在运行，如下面的截图所示：
- en: '![Running the default application](img/7481_02_04.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![运行默认应用程序](img/7481_02_04.jpg)'
- en: To stop the server, you need to press *Ctrl + C*, which will let you regain
    control of the shell. To restart it again, just rerun the `paster serve` command.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 要停止服务器，您需要按*Ctrl + C*，这将让您重新控制shell。要重新启动它，只需再次运行`paster serve`命令。
- en: What's inside a Grok project?
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grok项目内部有什么？
- en: As we mentioned earlier, the `grokproject` command that we used to create a
    project in the last section uses (behind the scenes) a tool called `zc.buildout`
    a system for managing repeatable development and production environments. `buildout`
    took care of downloading all of Grok's dependencies, building and installing them
    under the project directory. It also installed all of the scripts required to
    run Grok, like the `paster` command that we used before.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们之前提到的，我们在上一节中创建项目时使用的`grokproject`命令（幕后）使用了一个名为`zc.buildout`的工具，这是一个用于管理可重复的开发和生产环境的系统。`buildout`负责下载Grok的所有依赖项，并在项目目录下构建和安装它们。它还安装了运行Grok所需的所有脚本，例如我们之前使用的`paster`命令。
- en: We'll take a closer look at `buildout` and its directory structure later in
    this book. For now, just note that the files in the main project directory are
    a part of the `buildout`. The actual Grok application will be stored under the
    `src` directory.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的后面部分更详细地探讨`buildout`及其目录结构。现在，只需注意主项目目录中的文件是`buildout`的一部分。实际的Grok应用程序将存储在`src`目录下。
- en: Let's take a look at the directories and files specifically associated with
    the hello world Grok application that we created.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看与我们所创建的“hello world”Grok应用程序特别相关的目录和文件。
- en: Overview of the application structure
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序结构概述
- en: 'The hello world application code is stored inside the `src` subdirectory under
    the `helloworld` directory that `grokproject` created for us, earlier in this
    chapter. Let''s take a look at the files stored there:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: “hello world”应用程序代码存储在`grokproject`在本书早期为我们创建的`helloworld`目录下的`src`子目录中。让我们来看看那里存储的文件：
- en: '| File | Description |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| 文件 | 描述 |'
- en: '| --- | --- |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `app.py` | Contains the models and views for the application |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `app.py` | 包含应用程序的模型和视图 |'
- en: '| `app_templates` | Directory where application templates are stored |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `app_templates` | 存储应用程序模板的目录 |'
- en: '| `app.txt` | Functional tests for the application |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `app.txt` | 应用程序的功能测试 |'
- en: '| `configure.zcml` | Zope 3 XML configuration file |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `configure.zcml` | Zope 3 XML 配置文件 |'
- en: '| `ftesting.zcml` | XML configuration for functional tests |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `ftesting.zcml` | 功能测试的 XML 配置 |'
- en: '| `__init__.py` | This file exists to make the directory a package |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `__init__.py` | 此文件存在是为了使目录成为一个包 |'
- en: '| `startup.py` | WSGI application factory |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `startup.py` | WSGI 应用程序工厂 |'
- en: '| `static` | Directory for static resources, such as images and CSS |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `static` | 静态资源目录，例如图像和 CSS |'
- en: '| `tests.py` | Contains application testing code |'
  id: totrans-116
  prefs: []
  type: TYPE_TB
  zh: '| `tests.py` | 包含应用程序测试代码 |'
- en: 'We''ll have more to say about all of these files in further chapters, but for
    now the most important points to take home are:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在后续章节中详细介绍所有这些文件，但到目前为止，最重要的要点是：
- en: The file `app.py` contains the actual application code, which in this case is
    minimal.
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文件 `app.py` 包含实际的应用程序代码，在这个例子中是最小的。
- en: The message that was displayed in the browser window when we executed the application
    comes from the `index.pt` template stored inside the `app_templates` directory.
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们执行应用程序时在浏览器窗口中显示的消息来自存储在 `app_templates` 目录中的 `index.pt` 模板。
- en: An XML configuration file, which is used mainly to load Grok's configuration.
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 XML 配置文件，主要用于加载 Grok 的配置。
- en: Creating our first template
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建我们的第一个模板
- en: In the last section, we presented a template that comprises the only visible
    part of the hello world application. This template can be found inside the `src/app_templates`
    directory of our Grok project. To get our feet wet with Grok, let's change that
    template and add a message of our own.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一节中，我们展示了一个仅包含 hello world 应用程序可见部分的模板。这个模板可以在我们的 Grok 项目的 `src/app_templates`
    目录中找到。为了让我们对 Grok 有所了解，让我们更改这个模板并添加我们自己的消息。
- en: 'From the `helloworld` directory, open the file `src/app_templates/index.pt`
    using your favorite text editor. The file has the following contents:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从 `helloworld` 目录中，使用你喜欢的文本编辑器打开 `src/app_templates/index.pt` 文件。该文件具有以下内容：
- en: '[PRE17]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Change the file to look like this:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 将文件更改为如下所示：
- en: '[PRE18]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Actually, you can change the message to say whatever you like; just be aware
    that Grok templates require XHTML.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你可以更改消息以显示你喜欢的任何内容；只需注意 Grok 模板需要 XHTML。
- en: 'Finally, save the template and run the server instance using `paster` again:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，保存模板并再次使用 `paster` 运行服务器实例：
- en: '[PRE19]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: If you left the server running before, there's no need to restart it for this
    change, as modifications to page templates, images, and CSS can be viewed immediately.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你之前让服务器运行过，由于页面模板、图像和 CSS 的修改可以立即查看，因此无需重新启动服务器以进行此更改。
- en: 'Open the URL `http://localhost:8080/hello` in your browser. You should see
    something similar to the following screenshot:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开 URL `http://localhost:8080/hello`。你应该看到以下截图类似的内容：
- en: '![Creating our first template](img/7481_02_05.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![创建我们的第一个模板](img/7481_02_05.jpg)'
- en: Grok says hi. Now rejoice, you have finished your first Grok application.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 说你好。现在欢呼吧，你已经完成了你的第一个 Grok 应用程序。
- en: The Grok admin UI
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grok 管理员用户界面
- en: You briefly interacted with the Grok admin application manager before, when
    you named and launched the hello world application. Let's take a look in more
    detail at the three tabs in this admin UI.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在你命名并启动 hello world 应用程序之前，你已经简要地与 Grok 管理应用程序管理器进行了交互。让我们更详细地看看这个管理员用户界面中的三个标签页。
- en: Applications
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用程序
- en: In this tab, you can manage all your application instances. For any application
    that you define, you will see its dotted class path, such as `helloworld.app.Helloworld`
    in our example, and a text box and button for creating and naming an instance.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在此标签页中，你可以管理所有你的应用程序实例。对于你定义的任何应用程序，你将看到其点状类路径，例如在我们的例子中是 `helloworld.app.Helloworld`，以及一个用于创建和命名实例的文本框和按钮。
- en: Once you create an instance of an application, you will see it listed at the
    top of the page, along with any other application that you might have created
    before. From there you can launch an application by clicking on its name, or can
    delete it, or rename it by using the checkbox on its left and the corresponding
    button.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了一个应用程序实例，你将在页面顶部看到它，以及你之前可能创建的任何其他应用程序。从那里，你可以通过点击其名称来启动应用程序，或者可以通过使用其左侧的复选框和相应的按钮来删除它或重命名它。
- en: You can also use the **object browser** link next to the application's name
    to inspect the instance and take a look at its base classes, attributes, properties,
    and methods. For example, it's possible to explore the documentation included
    in the docstrings of a class or module. You can take a look at the second screenshot
    under the *Running the default application* section to see the link to the object
    browser in the Grok admin UI.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用应用程序名称旁边的**对象浏览器**链接来检查实例，并查看其基类、属性、属性和方法。例如，您可以探索类或模块的 docstrings 中包含的文档。您可以在**运行默认应用**部分的第二个截图下查看
    Grok 管理界面中的对象浏览器链接。
- en: Server control
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 服务器控制
- en: The **Server Control** tab allows you to take a look at the server process information,
    such as uptime, platform, and software versions. It also allows you to start,
    stop, or restart the server process, provided you are running it as a daemon and
    not from the command line. See the next screenshot for an example of the information
    found in this tab.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器控制**标签页允许您查看服务器进程信息，例如运行时间、平台和软件版本。它还允许您启动、停止或重启服务器进程，前提是您以守护进程方式运行它，而不是从命令行运行。请参阅下一张截图，以查看此标签页中找到的信息示例。'
- en: '![Server control](img/7481_02_06.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![服务器控制](img/7481_02_06.jpg)'
- en: Because the **ZODB** that Grok uses for persistence is transactional and supports
    undo, it tends to grow a lot in size as more and more objects are added to it
    and modified constantly. To keep your project's database neat and tidy, it is
    recommended to "pack" it regularly. The packing process deletes older revisions
    of your objects and keeps only the latest information, thus reducing file size.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Grok 用于持久化的 **ZODB** 是事务性的并且支持撤销，因此随着越来越多的对象被添加并不断修改，它的大小往往会变得很大。为了保持您项目数据库的整洁有序，建议您定期“打包”它。打包过程删除了您对象的旧版本，只保留最新信息，从而减小文件大小。
- en: You can pack the ZODB from Grok from the server control panel. Just pick the
    number of days for which you would like to preserve object information and click
    on the **Pack** button. A value of **0** clears all previous object revisions
    leaving only the latest versions of all objects. The packing process runs on the
    background, so your application can still serve requests while it takes place.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从服务器控制面板中打包 Grok 的 ZODB。只需选择您希望保留对象信息的天数，然后点击**打包**按钮。**0**的值会清除所有之前的对象修订版本，只保留所有对象的最新版本。打包过程在后台运行，因此您的应用程序在打包过程中仍然可以处理请求。
- en: One last feature you can use from this tab is administrative message, which
    allows you to type in a message that will be seen by all administrators on every
    page of the Grok admin UI until someone resets the text.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从此标签页使用的一个最后功能是管理消息，它允许您输入一条消息，该消息将在 Grok 管理界面的每一页上显示给所有管理员，直到有人重置文本。
- en: Documentation
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档
- en: The **Documentation** tab presents links to the DocGrok package and object browsers,
    which allow you to look at all the information provided by most of the things
    living under the running Grok process. This includes, but is not limited to objects,
    classes, modules, functions, and text files.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**文档**标签页提供了到 DocGrok 包和对象浏览器的链接，这些链接允许您查看运行中的 Grok 进程下大多数事物的所有信息。这包括但不限于对象、类、模块、函数和文本文件。'
- en: Summary
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we installed Grok and its dependencies and created our first
    Grok project and application.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们安装了 Grok 及其依赖项，并创建了我们的第一个 Grok 项目和应用。
- en: Now that we can create our own Grok projects, it's time to learn how to define
    and create different kinds of views and develop our first working application
    using that knowledge.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经可以创建自己的 Grok 项目了，是时候学习如何定义和创建不同类型的视图，并使用这些知识开发我们的第一个工作应用了。
