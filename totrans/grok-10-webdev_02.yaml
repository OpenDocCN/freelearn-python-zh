- en: Chapter 2. Getting Started with Grok
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that we know something about Grok and its history, let''s get started with
    it. The first thing to do, of course, is to install the programs on which Grok
    is dependent. Luckily, most of this work will be performed automatically for us,
    but there are three key programs that you may need to install manually: Python,
    a C compiler (not necessary on Windows systems), and EasyInstall. Also, please
    be aware that Grok installs itself over the network, so an internet connection
    is required.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: How to install Python on different platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the Python Package Index (PyPI) is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to work with EasyInstall to quickly install packages from the PyPI over
    the network
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How `virtualenv` allows us to set up clean Python environments for our development
    work
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create a project using `grokproject`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to run an application using paster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What the Grok admin UI is, and how to use it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Because Python runs on many different platforms, Grok can be installed almost
    anywhere. In this chapter, we will provide instructions for installing it on three
    specific platforms: Unix/Linux, Mac OS X, and Windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting a C compiler
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you use Linux or Mac OS X, your first step is to obtain a compiler. Grok
    depends on the Zope Toolkit, which includes some C extensions in its source code,
    and thus we need a compiler to build these extensions, on most platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Windows users need not worry about this because the Grok installation process
    uses precompiled packages, but the other systems do require a compiler to be installed,
    in order for Grok to be built.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many Linux distributions include a compiler in the default setup, so no action
    is needed for these distributions, but Ubuntu in particular needs a special package
    containing the compiler and other development tools to be installed. The package
    name in this case is `build-essential` and you install it by using the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: On Mac OS X systems, there's a compiler included in the Developer Tools package
    on the system DVD. See[http://developer.apple.com/tools/xcode/](http://developer.apple.com/tools/xcode/)
    for more information.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of Grok's greatest strengths is that it is written in Python. Grok requires
    Python version 2.4 or 2.5 to run (at the time of writing, 2.6 support is around
    the corner), but be aware that it won't run on the recently released 3.0 version,
    because this version breaks compatibility with older versions of Python and thus
    is still not supported by most libraries and frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Unix/Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Unix/Linux distributions generally come with Python already installed, so the
    chances are that your system already has a suitable version of Python installed.
    To see which version you have, type the command `python V` at the shell prompt;
    you''ll get a result similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If you get an error, then this means that Python is not installed on your machine,
    and so you will have to install it yourself. This should not happen in any mainstream
    Linux distribution, but it could conceivably happen with some Unix variants. This
    is highly unlikely though, so you should get a version number similar to the previous
    example.
  prefs: []
  type: TYPE_NORMAL
- en: If your version number is 2.4 or 2.5, you may use your system's Python installation
    for developing with Grok. However, depending on your Linux distribution, you may
    need additional packages. Some distributions bundle the development libraries
    and headers for Python in separate packages, so it could be necessary to install
    these on your system.
  prefs: []
  type: TYPE_NORMAL
- en: If you use Ubuntu or Debian, for example, you will need to install the `python-dev`
    package as well. You can easily do this by using the command line.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Other distributions may require different packages to be installed. Consult
    your system's documentation for instructions.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don''t have Python installed, you should be able to install it easily
    using your system''s package manager, similar to the way we set up additional
    packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have Python, but it''s not version 2.4 or 2.5, it''s very likely that
    your Linux distribution includes the package for version 2.5\. In Ubuntu or Debian,
    you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You don't necessarily have to use the system's version of Python. Some developers
    prefer to manually compile their own Python from the source. This can give you
    more flexibility and also avoid package conflicts, which can occur when different
    Python frameworks or tools are installed on the same system (note that similar
    goals may be accomplished without compiling your own version, by using the `virtualenv`
    tool, as described elsewhere in this chapter).
  prefs: []
  type: TYPE_NORMAL
- en: To install from the source you need to download the desired version from [http://www.python.org/download/](http://www.python.org/download/)
    and go through the usual **configure-build-install** cycle required for Unix/Linux
    packages. Remember to use Python 2.4 or 2.5.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Mac OS X
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mac OS X always comes with Python pre-installed, but due to the Mac release
    cycle, the version installed on your computer can be one or even two years old.
    Therefore, in many cases, Python-Mac community members recommend that you install
    your own version.
  prefs: []
  type: TYPE_NORMAL
- en: If your OS X version is 10.5, you should be fine with the installed version
    of Python. For older versions, you might want to check [http://www.python.org/download/mac/](http://www.python.org/download/mac/)
    for available installers and suggestions.
  prefs: []
  type: TYPE_NORMAL
- en: Grok has a known dependency clash with **Twisted**, a networking package included
    in recent versions of Mac OS X, so it's best to use a separate Python environment
    for Grok. You could, of course, build your own version, as described at the end
    of the *Installing Python on Unix/Linux* section of this chapter. If, for some
    reason, you are not comfortable with building your own Python from the source,
    the recommended approach is to use a virtual environment. This will be covered
    later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python on Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In addition to the source download, Python releases come with a very good Windows
    installer. All you have to do to install Python on Windows (we suggest you use
    at least XP or Vista) is to select a Python version from [http://www.python.org/download/](http://www.python.org/download/)
    and choose to download the corresponding `.msi` installer from the available options.
  prefs: []
  type: TYPE_NORMAL
- en: After downloading the installer, double-click the installer file, select an
    appropriate directory to install Python (the default should be fine), and you
    can begin to use Python. Since you need to work from the command line to use Grok,
    you might want to add the Python installation path to your system path so that
    you can easily access the Python interpreter from any directory.
  prefs: []
  type: TYPE_NORMAL
- en: To do this, go to the Windows **Control Panel**, click on the **System** icon,
    and select the **Advanced** tab. From there, click on the **Environment Variables**
    button and select **Path** from the **System Variables** windows (the one at the
    bottom). Click on **Edit**, and a window with a text box will be displayed, in
    which you can edit the current value. Be sure to leave the current value exactly
    as it is, and add the path to your Python installation at the end. The path is
    the one you selected when running the installer, and is usually in the form `C:\PythonXX`,
    where XX represents the Python version without a dot (for example, **C:\Python25**,
    as shown in the following screenshot). Separate this path from the previous paths
    already present in the system path by using a semicolon. You might also want to
    add `C:\PythonXX\Scripts` after this, so that the Python scripts that we are going
    to install in this chapter can also be invoked from anywhere.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Python on Windows](img/7481_02_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To use Grok, you will also need to install the `win32all` package, which includes
    the Win32 API, COM support, and Pythonwin. This package also comes with an installer,
    so it should be easy to set up. Just go to [http://sourceforge.net/projects/pywin32/files](http://sourceforge.net/projects/pywin32/files)
    and download the corresponding `win32all` version for your already installed version
    of Python. Simply run the installer after downloading it, and everything will
    be ready.
  prefs: []
  type: TYPE_NORMAL
- en: EasyInstall and the Python Package Index (PyPI)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **Python Package Index** (**PyPI**) is a repository of software for Python,
    where thousands of packages are available for download. You can find many kinds
    of libraries and applications there, and Zope and Grok are well represented, with
    hundreds of packages at your disposal.
  prefs: []
  type: TYPE_NORMAL
- en: What makes PyPI much more powerful is a Python script called `easy_install`
    a script that allows Python developers to install any package indexed on the PyPI
    over the network, keeping track of dependencies and versions. Packages that can
    be easy installed are packaged either as compressed files or in a special format,
    using the `.egg` extension, and are known as **Python eggs.**
  prefs: []
  type: TYPE_NORMAL
- en: The `easy_install` module is a part of a package known as `setuptools`, so you
    need to install that in order to obtain it. There's an installer for Windows and
    a `.egg` file for Unix/Linux/Mac available at the setuptools PyPI page on [http://pypi.python.org/pypi/setuptools](http://pypi.python.org/pypi/setuptools).
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `setuptools` on Windows, just run the installer. For Unix/Linux/Mac
    systems, run the `.egg` file as a shell script, like in this example (your version
    may vary):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Many Linux distributions include a package for `setuptools`. In Ubuntu or Debian,
    for example, you can use `apt-get` to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: However, we recommend that you install the newest version manually, even if
    there's a package available for your system, as this way you are assured of getting
    the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: 'After this, the `easy_install` script will be available on the system Python''s
    path, and from then onwards any package from PyPI can be installed on your system
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It could be possible that you already have `setuptools` installed, but some
    package that you want to easy install might need a more recent version. In this
    case, you will receive an error informing you of this fact. To quickly update
    your `setuptools` version, use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The `-U` switch tells `easy_install` to get the latest version of a package
    and update the previous version in place. The `easy_install` commands are identical
    on Windows systems. Just leave out the word `sudo` at the beginning.
  prefs: []
  type: TYPE_NORMAL
- en: As mentioned before, Grok and dozens of packages that you can use with both
    Grok and plain Zope, are available on PyPI, so we will use `easy_install` to install
    the packages required by Grok. But first, we'll learn how to set up a clean environment
    for our Grok development work.
  prefs: []
  type: TYPE_NORMAL
- en: Grok and the Python environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Grok uses a fairly large number of packages. If other large Python packages,
    or even a number of smaller Python packages, are installed under the same installation
    of Python dependency problems or version conflicts can sometimes arise. This is
    because, the code for Python packages installed by `easy_install` or other Python
    installation methods are usually stored inside the `site-packages` directory of
    the Python library.
  prefs: []
  type: TYPE_NORMAL
- en: Grok isolates its packages by placing them inside the `.buildout/eggs` directory,
    but the Python interpreter still looks into `site-packages` for finding a required
    package, which means that if another Python tool installs a different version
    of a library used by Grok, a conflict could occur.
  prefs: []
  type: TYPE_NORMAL
- en: This probably will not be a problem for you unless you use another Zope-based
    technology, such as **Plone**. If you are starting with Grok, the easiest course
    is probably to just go ahead and install it, but if you run into any version conflicts
    there's a tool that can help you out of the mess; it's called `virtualenv`.
  prefs: []
  type: TYPE_NORMAL
- en: Virtualenv
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`virtualenv` is a Python package that allows the creation of isolated Python
    environments. This is a way to avoid conflicting packages inside the `site-packages`
    directory from interfering with your Grok application.'
  prefs: []
  type: TYPE_NORMAL
- en: '`virtualenv` can be installed by using `easy_install:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Once it''s installed, you can work with it by creating environments for any
    new projects. For example, to create a test environment for Grok, go to a directory
    of your choice under your home directory, and type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: This command will create a directory named `testgrok`, with subdirectories `bin`
    and `lib` (Scripts and `Lib` under Windows). Inside the `bin` directory you will
    find the `python` and `easy_install` commands, which will run under the context
    of the virtual environment that you just created. This means, `python` will run
    the Python interpreter by using the `lib` directory under `testgrok`, and `easy_install`
    will add new packages under the `site-packages` directory there.
  prefs: []
  type: TYPE_NORMAL
- en: The `--no-site-packages` option tells `virtualenv` that none of the existing
    packages under the system's Python `site-packages` should be available in the
    new `virtualenv`. It is recommended that you use this option when building environments
    for Grok. However, if you have many different environments for applications that
    tend to use the same general libraries, it is possible to install those libraries
    under the main Python environment and just add the required packages for each
    application under the virtual environment. In this case, the `no-site-packages`
    option should not be used, but you will need to plan your setup very carefully.
  prefs: []
  type: TYPE_NORMAL
- en: When working inside a `virtualenv`, you must remember to use the full path to
    the `python` and `easy_install` commands, or you may inadvertently install a package
    in the main Python environment, or run your application with a different set of
    packages than you intended. To prevent this problem, a batch script named `activate`
    is included in the `bin` directory of the `virtualenv` (Scripts directory under
    Windows). Once you run it, all further invocations of the `python` and `easy_install`
    commands will use their `virtualenv` versions until you end the session by using
    the corresponding `deactivate` script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the following command to activate the `virtualenv` under Unix/Linux/Mac
    for our `testgrok` environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'And in Windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: As `buildout` itself takes care of this, the `activate` and `deactivate` scripts
    are not needed for Grok; they are only mentioned here for completeness.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Grok using grokproject
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We are finally ready to install Grok. To make it easy to create a project along
    with a basic directory structure, Grok uses the `grokproject` package, which can
    be installed using `easy_install`. Go to a directory where you want to create
    your application (if you are using `virtualenv`, go inside the `testgrok virtualenv`
    we created in the previous section). Now type the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You have now installed it, but keep in mind the `-U` switch for `easy_install`
    that allows you to update a package in place, because `grokproject` is under continuous
    development, and updating it frequently is a good idea. Now we can create our
    first Grok project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating our first project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, the `grokproject` package we just installed is a tool
    for creating projects. A Grok project is a directory that constitutes a working
    environment in which Grok applications can be developed. It's a template that
    includes a simple executable application that can be used as a base for development
    and as a guide for where things usually go in Grok.
  prefs: []
  type: TYPE_NORMAL
- en: 'Creating a project is very easy. Let''s create the traditional hello world
    example using Grok:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '`grokproject` takes as an argument, the name of directory where the project
    will be created. After you run the command, you will immediately be asked for
    an administrator username and password. Take note of this because you will need
    it later, to run the application for the first time.'
  prefs: []
  type: TYPE_NORMAL
- en: Once it has the required information, `grokproject` downloads and installs the
    Zope Toolkit packages that Grok requires, as well as Grok itself. This can take
    a few minutes, depending on the speed of your network connection, because Grok
    consists of many packages. Once the download is finished, `grokproject` configures
    Grok, and sets up the Grok application template, leaving it ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: Running the default application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run the default application that is created along with the project workspace,
    we need to start up Grok. Let's change the current directory to that of our hello
    world example, and do that.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Note that the command needs to be run directly from the project's directory.
    Please do not change to the `bin` directory and try to run `paster` there. In
    general, all project scripts and commands are meant to be run from the main project
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: This command will start Grok on port 8080, which is its default port. Now you
    can see Grok in action at last by opening a web browser and pointing it to `http://localhost:8080`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If, for some reason, you have to use a different port on your system, you will
    need to edit the `deploy.ini` file inside the `parts/etc/` directory. This file
    holds Grok''s deployment configuration. You will find the line where the port
    is set (very near to the bottom of the file). Simply change it to whatever number
    you want, and run `paster` again. Here is an example of how the relevant part
    of the file should look:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: When you go to that URL, you will see a login prompt. Here you have to use the
    login and password that you selected when you created the project in the previous
    section. After that, you will be inside the Grok administration interface (refer
    the following screenshot).
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the default application](img/7481_02_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All you need to do to create a copy of the default application is to type a
    name for it in the text box with the label **Name your new app** label and click
    the **Create** button. Call it **hello**, for example. After that, you will see
    a new section on the page where installed applications are shown, and **hello**
    should be the only one in the list, as shown in the next screenshot. You can either
    click the name from there, or point your browser to `http://localhost:8080/hello`,
    to see the application running.
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the default application](img/7481_02_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At this point, your browser should display a very simple HTML page with a message
    telling you that Grok is up and running, as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Running the default application](img/7481_02_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: To stop the server, you need to press *Ctrl + C*, which will let you regain
    control of the shell. To restart it again, just rerun the `paster serve` command.
  prefs: []
  type: TYPE_NORMAL
- en: What's inside a Grok project?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we mentioned earlier, the `grokproject` command that we used to create a
    project in the last section uses (behind the scenes) a tool called `zc.buildout`
    a system for managing repeatable development and production environments. `buildout`
    took care of downloading all of Grok's dependencies, building and installing them
    under the project directory. It also installed all of the scripts required to
    run Grok, like the `paster` command that we used before.
  prefs: []
  type: TYPE_NORMAL
- en: We'll take a closer look at `buildout` and its directory structure later in
    this book. For now, just note that the files in the main project directory are
    a part of the `buildout`. The actual Grok application will be stored under the
    `src` directory.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at the directories and files specifically associated with
    the hello world Grok application that we created.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of the application structure
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The hello world application code is stored inside the `src` subdirectory under
    the `helloworld` directory that `grokproject` created for us, earlier in this
    chapter. Let''s take a look at the files stored there:'
  prefs: []
  type: TYPE_NORMAL
- en: '| File | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `app.py` | Contains the models and views for the application |'
  prefs: []
  type: TYPE_TB
- en: '| `app_templates` | Directory where application templates are stored |'
  prefs: []
  type: TYPE_TB
- en: '| `app.txt` | Functional tests for the application |'
  prefs: []
  type: TYPE_TB
- en: '| `configure.zcml` | Zope 3 XML configuration file |'
  prefs: []
  type: TYPE_TB
- en: '| `ftesting.zcml` | XML configuration for functional tests |'
  prefs: []
  type: TYPE_TB
- en: '| `__init__.py` | This file exists to make the directory a package |'
  prefs: []
  type: TYPE_TB
- en: '| `startup.py` | WSGI application factory |'
  prefs: []
  type: TYPE_TB
- en: '| `static` | Directory for static resources, such as images and CSS |'
  prefs: []
  type: TYPE_TB
- en: '| `tests.py` | Contains application testing code |'
  prefs: []
  type: TYPE_TB
- en: 'We''ll have more to say about all of these files in further chapters, but for
    now the most important points to take home are:'
  prefs: []
  type: TYPE_NORMAL
- en: The file `app.py` contains the actual application code, which in this case is
    minimal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The message that was displayed in the browser window when we executed the application
    comes from the `index.pt` template stored inside the `app_templates` directory.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An XML configuration file, which is used mainly to load Grok's configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating our first template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the last section, we presented a template that comprises the only visible
    part of the hello world application. This template can be found inside the `src/app_templates`
    directory of our Grok project. To get our feet wet with Grok, let's change that
    template and add a message of our own.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the `helloworld` directory, open the file `src/app_templates/index.pt`
    using your favorite text editor. The file has the following contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Change the file to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Actually, you can change the message to say whatever you like; just be aware
    that Grok templates require XHTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, save the template and run the server instance using `paster` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: If you left the server running before, there's no need to restart it for this
    change, as modifications to page templates, images, and CSS can be viewed immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the URL `http://localhost:8080/hello` in your browser. You should see
    something similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first template](img/7481_02_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Grok says hi. Now rejoice, you have finished your first Grok application.
  prefs: []
  type: TYPE_NORMAL
- en: The Grok admin UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You briefly interacted with the Grok admin application manager before, when
    you named and launched the hello world application. Let's take a look in more
    detail at the three tabs in this admin UI.
  prefs: []
  type: TYPE_NORMAL
- en: Applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this tab, you can manage all your application instances. For any application
    that you define, you will see its dotted class path, such as `helloworld.app.Helloworld`
    in our example, and a text box and button for creating and naming an instance.
  prefs: []
  type: TYPE_NORMAL
- en: Once you create an instance of an application, you will see it listed at the
    top of the page, along with any other application that you might have created
    before. From there you can launch an application by clicking on its name, or can
    delete it, or rename it by using the checkbox on its left and the corresponding
    button.
  prefs: []
  type: TYPE_NORMAL
- en: You can also use the **object browser** link next to the application's name
    to inspect the instance and take a look at its base classes, attributes, properties,
    and methods. For example, it's possible to explore the documentation included
    in the docstrings of a class or module. You can take a look at the second screenshot
    under the *Running the default application* section to see the link to the object
    browser in the Grok admin UI.
  prefs: []
  type: TYPE_NORMAL
- en: Server control
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Server Control** tab allows you to take a look at the server process information,
    such as uptime, platform, and software versions. It also allows you to start,
    stop, or restart the server process, provided you are running it as a daemon and
    not from the command line. See the next screenshot for an example of the information
    found in this tab.
  prefs: []
  type: TYPE_NORMAL
- en: '![Server control](img/7481_02_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Because the **ZODB** that Grok uses for persistence is transactional and supports
    undo, it tends to grow a lot in size as more and more objects are added to it
    and modified constantly. To keep your project's database neat and tidy, it is
    recommended to "pack" it regularly. The packing process deletes older revisions
    of your objects and keeps only the latest information, thus reducing file size.
  prefs: []
  type: TYPE_NORMAL
- en: You can pack the ZODB from Grok from the server control panel. Just pick the
    number of days for which you would like to preserve object information and click
    on the **Pack** button. A value of **0** clears all previous object revisions
    leaving only the latest versions of all objects. The packing process runs on the
    background, so your application can still serve requests while it takes place.
  prefs: []
  type: TYPE_NORMAL
- en: One last feature you can use from this tab is administrative message, which
    allows you to type in a message that will be seen by all administrators on every
    page of the Grok admin UI until someone resets the text.
  prefs: []
  type: TYPE_NORMAL
- en: Documentation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Documentation** tab presents links to the DocGrok package and object browsers,
    which allow you to look at all the information provided by most of the things
    living under the running Grok process. This includes, but is not limited to objects,
    classes, modules, functions, and text files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we installed Grok and its dependencies and created our first
    Grok project and application.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we can create our own Grok projects, it's time to learn how to define
    and create different kinds of views and develop our first working application
    using that knowledge.
  prefs: []
  type: TYPE_NORMAL
