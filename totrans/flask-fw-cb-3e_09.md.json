["```py\n$ pip install Flask-Babel\n```", "```py\n    from flask import request\n    ```", "```py\n    from flask_babel import Babel\n    ```", "```py\n    ALLOWED_LANGUAGES = {\n    ```", "```py\n        'en': 'English',\n    ```", "```py\n        'fr': 'French',\n    ```", "```py\n    }\n    ```", "```py\n    babel = Babel(app)\n    ```", "```py\n    def get_locale():\n    ```", "```py\n        return request.accept_languages.best_match\n    ```", "```py\n          (ALLOWED_LANGUAGES.keys())\n    ```", "```py\n    babel.init_app(app, locale_selector=get_locale)\n    ```", "```py\n    [python: catalog/**.py]\n    ```", "```py\n    [jinja2: templates/**.html]\n    ```", "```py\n    {% block container %}\n    ```", "```py\n    <h1>{{ _('Welcome to the Catalog Home') }}</h1>\n    ```", "```py\n      <a href=\"{{ url_for('catalog.products') }}\"\n    ```", "```py\n        id=\"catalog_link\">\n    ```", "```py\n      {{ _('Click here to see the catalog ') }}\n    ```", "```py\n      </a>\n    ```", "```py\n    {% endblock %}\n    ```", "```py\n     $ pybabel extract -F my_app/babel.cfg -o\n    ```", "```py\n       my_app/messages.pot my_app/\n    ```", "```py\nextracting messages from my_app/catalog/__init__.py\nextracting messages from my_app/catalog/models.py\nextracting messages from my_app/catalog/views.py\nextracting messages from my_app/templates/404.html\nextracting messages from my_app/templates/base.html\nextracting messages from\n  my_app/templates/categories.html\nextracting messages from my_app/templates/category-\n  create.html\nextracting messages from\n  my_app/templates/category.html\nextracting messages from my_app/templates/home.html\nextracting messages from my_app/templates/product-\n  create.html\nextracting messages from my_app/templates/product.html\nextracting messages from\n  my_app/templates/products.html\nwriting PO template file to my_app/messages.pot\n```", "```py\n    $ pybabel init -i my_app/messages.pot -d\n    ```", "```py\n      my_app/translations -l fr\n    ```", "```py\n#: my_app/catalog/models.py:75\nmsgid \"Not a valid choice\"\nmsgstr \"Pas un choix valable\"\n```", "```py\n    $ pybabel compile -d my_app/translations\n    ```", "```py\n $ pybabel update -i my_app/messages.pot -d\n   my_app/translations\n```", "```py\n    from flask_babel import _\n    ```", "```py\n    class NameForm(FlaskForm):\n    ```", "```py\n        name = StringField(\n    ```", "```py\n            _('Name'), validators=[InputRequired()])\n    ```", "```py\n    class ProductForm(NameForm):\n    ```", "```py\n        price = DecimalField(_('Price'), validators=[\n    ```", "```py\n            InputRequired(),\n    ```", "```py\n              NumberRange(min=Decimal('0.0'))\n    ```", "```py\n        ])\n    ```", "```py\n        category = CategoryField(\n    ```", "```py\n            _('Category'), validators=[InputRequired()],\n    ```", "```py\n              coerce=int\n    ```", "```py\n        )\n    ```", "```py\n        image = FileField(\n    ```", "```py\n            _('Product Image'),\n    ```", "```py\n              validators=[FileRequired()])\n    ```", "```py\n    class CategoryForm(NameForm):\n    ```", "```py\n        name = StringField(_('Name'), validators=[\n    ```", "```py\n            InputRequired(), check_duplicate_category()\n    ```", "```py\n        ])\n    ```", "```py\nfrom flask_babel import lazy_gettext as _\n```", "```py\n    flash('The product %s has been created' % name)\n    ```", "```py\nflash(_('The product %(name)s has been created',\n  name=name), 'success')\n```", "```py\n    {{ ngettext('%(num)d page', '%(num)d pages',\n    ```", "```py\n      products.pages) }}\n    ```", "```py\n#: my_app/templates/products.html:20\n#, python-format\nmsgid \"%(num)d page\"\nmsgid_plural \"%(num)d pages\"\nmsgstr[0] \"%(num)d page\"\nmsgstr[1] \"%(num)d pages\"\n```", "```py\n    @app.before_request\n    ```", "```py\n    def before():\n    ```", "```py\n        if request.view_args and 'lang' in\n    ```", "```py\n          request.view_args:\n    ```", "```py\n            g.current_lang = request.view_args['lang']\n    ```", "```py\n            request.view_args.pop('lang')\n    ```", "```py\n    from flask import url_for as flask_url_for\n    ```", "```py\n    @app.context_processor\n    ```", "```py\n    def inject_url_for():\n    ```", "```py\n        return {\n    ```", "```py\n            'url_for': lambda endpoint, **kwargs:\n    ```", "```py\n              flask_url_for(\n    ```", "```py\n                endpoint, lang=g.get('current_lang',\n    ```", "```py\n                  'en'), **kwargs\n    ```", "```py\n            )\n    ```", "```py\n        }\n    ```", "```py\n    url_for = inject_url_for()['url_for']\n    ```", "```py\n>>> from babel import numbers\n>>> numbers.format_number(12345, 'en_US')\n'12,345'\n>>> numbers.format_number(12345, 'fr_FR')\n'12\\u202f345'\n>>> numbers.format_number(12345, 'de_DE')\n'12.345'\n>>> numbers.format_decimal(12.345, locale='de_DE')\n'12,345'\n>>> numbers.format_decimal(12.345, locale='en_US')\n'12.345'\n>>> numbers.format_currency(12.345, 'USD', locale='en_US')\n'$12.34'\n>>> numbers.format_currency(12345789, 'USD', locale='en_US')\n'$12,345,789.00'\n>>> numbers.format_compact_currency(12345789, 'USD', locale='de_DE')\n'12\\xa0Mio.\\xa0$'\n>>> numbers.format_compact_currency(12345789, 'USD', locale='en_US')\n'$12M'\n```"]