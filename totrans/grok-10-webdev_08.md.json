["```py\n<unauthenticatedPrincipal id=\"zope.anybody\" title=\"Unauthenticated User\" />\n\n```", "```py\n<unauthenticatedGroup id=\"zope.Anybody\" title=\"Unauthenticated Users\" />\n\n```", "```py\n<authenticatedGroup id=\"zope.Authenticated\" title=\"Authenticated Users\" />\n\n```", "```py\n<everybodyGroup id=\"zope.Everybody\" title=\"All Users\" />\n\n```", "```py\n<principal id=\"zope.manager\"\ntitle=\"Manager\"\nlogin=\"admin\"\npassword_manager=\"Plain Text\"\npassword=\"admin\"\n/>\n\n```", "```py\n<grant permission=\"zope.View\"\nprincipal=\"zope.Anybody\" />\n<grant permission=\"zope.app.dublincore.view\"\nprincipal=\"zope.Anybody\" />\n\n```", "```py\n<role id=\"zope.Manager\" title=\"Site Manager\" />\n<role id=\"zope.Member\" title=\"Site Member\" />\n\n```", "```py\n<grantAll role=\"zope.Manager\" />\n<grant role=\"zope.Manager\"\nprincipal=\"zope.manager\" />\n\n```", "```py\n<grant permission=\"zope.View\"\nprincipal=\"zope.Authenticated\" />\n<grant permission=\"zope.app.dublincore.view\"\nprincipal=\"zope.Authenticated\" />\n\n```", "```py\n<principal id=\"todo.user\"\ntitle=\"User\"\nlogin=\"user\"\npassword_manager=\"Plain Text\"\npassword=\"user\"\n/>\n\n```", "```py\nclass DashBoard(grok.View):\ngrok.context(Todo)\ngrok.name('index')\ngrok.require('zope.View')\n\n```", "```py\nclass ViewTodos(grok.Permission):\ngrok.name('todo.view')\nclass AddProjects(grok.Permission):\ngrok.name('todo.addprojects')\nclass AddLists(grok.Permission):\ngrok.name('todo.addlists')\nclass ChangeItems(grok.Permission):\ngrok.name('todo.changeitems')\n\n```", "```py\nclass DashBoard(grok.View):\ngrok.context(Todo)\ngrok.name('index')\ngrok.require('todo.view')\nclass ProjectIndex(grok.View):\ngrok.context(Project)\ngrok.name('index')\ngrok.require('todo.view')\nclass TodoAddList(grok.View):\ngrok.context(Project)\ngrok.name('addlist')\ngrok.require('todo.addlists')\nclass TodoDeleteProject(grok.View):\ngrok.context(Todo)\ngrok.name('deleteproject')\ngrok.require('todo.addprojects')\n\n```", "```py\nclass ProjectMemberRole(grok.Role):\ngrok.name('todo.ProjectMember')\ngrok.permissions('todo.view','todo.changeitems')\nclass ProjectManagerRole(grok.Role):\ngrok.name('todo.ProjectManager')\ngrok.permissions('todo.view','todo.changeitems','todo.addlists')\nclass AppManagerRole(grok.Role):\ngrok.name('todo.AppManager')\ngrok.permissions('todo.view','todo.changeitems', 'todo.addlists','todo.addprojects')\n\n```", "```py\nfrom zope.app.authentication.authentication import PluggableAuthentication\nfrom zope.app.security.interfaces import IAuthentication\nfrom auth import setup_authentication\n\n```", "```py\nclass Todo(grok.Application, grok.Container):\ngrok.implements(ITodo)\ngrok.local_utility(\nPluggableAuthentication, provides=IAuthentication,\nsetup=setup_authentication,\n)\n\n```", "```py\ndef setup_authentication(pau):\npau.credentialsPlugins = ['credentials']\npau.authenticatorPlugins = ['users']\n\n```", "```py\nfrom zope.app.authentication.session import SessionCredentialsPlugin\nfrom zope.app.authentication.interfaces import ICredentialsPlugin\nclass MySessionCredentialsPlugin(grok.GlobalUtility, SessionCredentialsPlugin):\ngrok.provides(ICredentialsPlugin)\ngrok.name('credentials')\nloginpagename = 'login'\nloginfield = 'login'\npasswordfield = 'password'\n\n```", "```py\nclass ILoginForm(Interface):\nlogin = schema.BytesLine(title=u'Username', required=True)\ncamefrom = schema.BytesLine(title=u'', required=False)\npassword = schema.Password(title=u'Password', required=True)\n\n```", "```py\nclass Login(grok.Form):\ngrok.context(Interface)\ngrok.require('zope.Public')\nlabel = \"Login\"\ntemplate = grok.PageTemplateFile('custom_edit_form.pt')\nprefix = ''\nform_fields = grok.Fields(ILoginForm)\n\n```", "```py\ndef setUpWidgets(self, ignore_request=False):\nsuper(Login,self).setUpWidgets(ignore_request)\nself.widgets['camefrom'].type = 'hidden'\n\n```", "```py\n@grok.action('login')\ndef handle_login(self, **data):\nself.redirect(self.request.form.get('camefrom', self.url(grok.getSite())))\n\n```", "```py\nfrom zope.app.security.interfaces import IAuthentication, IUnauthenticatedPrincipal, ILogout\nclass Logout(grok.View):\ngrok.context(Interface)\ngrok.require('zope.Public')\ndef update(self):\nif not IUnauthenticatedPrincipal.providedBy( self.request.principal):\nauth = component.getUtility(IAuthentication)\nIlogout(auth).logout(self.request)\n\n```", "```py\n<html>\n<head>\n<title>Logged out</title>\n</head>\n<body>\n<p>You are now logged out.</p>\n<p><a tal:attributes=\"href python:view.url(context)\"> Log in again</a>.\n</p>\n</body>\n</html>\n\n```", "```py\nfrom auth import UserAuthenticatorPlugin\ngrok.local_utility(\nUserAuthenticatorPlugin, provides=IAuthenticatorPlugin,\nname='users',\n)\n\n```", "```py\nfrom zope.app.authentication.session import SessionCredentialsPlugin\nfrom zope.app.authentication.interfaces import ICredentialsPlugin\nfrom zope.app.authentication.interfaces import IAuthenticatorPlugin\nfrom zope.app.authentication.interfaces import IprincipalInfo\nclass UserAuthenticatorPlugin(grok.LocalUtility):\ngrok.implements(IAuthenticatorPlugin)\ngrok.name('users')\ndef __init__(self):\nself.user_folder = UserFolder()\n\n```", "```py\nclass UserFolder(grok.Container):\npass\n\n```", "```py\ndef authenticateCredentials(self, credentials):\nif not isinstance(credentials, dict):\nreturn None\nif not ('login' in credentials and 'password' in credentials):\nreturn None\naccount = self.getAccount(credentials['login'])\nif account is None:\nreturn None\nif not account.checkPassword(credentials['password']):\nreturn None\nreturn PrincipalInfo(id=account.name,\ntitle=account.real_name,\ndescription=account.real_name)\n\n```", "```py\nclass PrincipalInfo(object):\ngrok.implements(IPrincipalInfo)\ndef __init__(self, id, title, description):\nself.id = id\nself.title = title\nself.description = description\nself.credentialsPlugin = None\nself.authenticatorPlugin = None\n\n```", "```py\ndef principalInfo(self, id):\naccount = self.getAccount(id)\nif account is None:\nreturn None\nreturn PrincipalInfo(id=account.name,\ntitle=account.real_name,\ndescription=account.real_name)\n\n```", "```py\ndef getAccount(self, login):\nreturn login in self.user_folder and self.user_folder[login] or None\n\n```", "```py\ndef addUser(self, username, password, real_name, role):\nif username not in self.user_folder:\nuser = Account(username, password, real_name, role)\nself.user_folder[username] = user\nrole_manager = IPrincipalRoleManager(grok.getSite())\nif role==u'Project Manager':\nrole_manager.assignRoleToPrincipal ('todo.ProjectManager',username)\nelif role==u'Application Manager':\nrole_manager.assignRoleToPrincipal ('todo.AppManager',username)\nelse:\nrole_manager.assignRoleToPrincipal ('todo.ProjectMember',username)\n\n```", "```py\nrole_manager = IprincipalRoleManager(grok.getSite())\n\n```", "```py\nrole_manager.assignRoleToPrincipal('todo.ProjectMember',username)\n\n```", "```py\nfrom zope.app.authentication.interfaces import IpasswordManager\nclass Account(grok.Model):\ndef __init__(self, name, password, real_name, role):\nself.name = name\nself.real_name = real_name\nself.role = role\nself.setPassword(password)\ndef setPassword(self, password):\npasswordmanager = component.getUtility(IPasswordManager, 'SHA1')\nself.password = passwordmanager.encodePassword(password)\ndef checkPassword(self, password):\npasswordmanager = component.getUtility(IPasswordManager, 'SHA1')\nreturn passwordmanager.checkPassword(self.password, password)\n\n```", "```py\nclass IAddUserForm(Interface):\nlogin = schema.BytesLine(title=u'Username', required=True)\npassword = schema.Password(title=u'Password', required=True)\nconfirm_password = schema.Password(title=u'Confirm password', required=True)\nreal_name = schema.BytesLine(title=u'Real name', required=True)\nrole = schema.Choice(title=u'User role', values=[u'Project Member', u'Project Manager', u'Application Manager'], required=True)\n\n```", "```py\nclass AddUser(grok.Form):\ngrok.context(Interface)\ngrok.require('zope.ManageApplication')\nlabel = \"Add user\"\ntemplate = grok.PageTemplateFile('custom_edit_form.pt')\nform_fields = grok.Fields(IAddUserForm)\n@grok.action('add')\ndef handle_add(self, **data):\nusers = component.getUtility(IAuthenticatorPlugin,'users')\nusers.addUser(data['login'],data['password'], data['real_name'],data['role'])\nself.redirect(self.url(grok.getSite(),'userlist'))\n\n```", "```py\nclass UserList(grok.View):\ngrok.context(Interface)\ngrok.require('zope.ManageApplication')\ndef update(self):\nusers = component.getUtility(IAuthenticatorPlugin,'users')\nself.users = users.listUsers()\n\n```", "```py\n<html>\n<head>\n<title tal:content=\"context/title\">To-Do list manager</title>\n<link rel=\"stylesheet\" type=\"text/css\" tal:attributes=\"href static/styles.css\" />\n</head>\n\n```", "```py\n<body>\n<div id=\"appheader\">\n<form id=\"search\" tal:attributes=\"action python:view.url('search')\">\n<input type=\"text\" name=\"query\" />\n<input class=\"new_button\" type=\"submit\" value=\"search\" />\n</form>\n<h1 id=\"apptitle\" tal:content=\"context/title\"> To-Do list manager</h1>\n</div>\n<p class=\"create\"><a href=\"adduser\">Add a new user</a></p>\n\n```", "```py\n<h2 tal:condition=\"view/users\">These are the existing users</h2>\n<div class=\"projects\">\n<table>\n<tr>\n<th>Login</th>\n<th>Real name</th>\n<th>Role</th>\n</tr>\n<tr tal:repeat=\"user view/users\">\n<td tal:content=\"user/name\">type</td>\n<td tal:content=\"user/real_name\">type</td>\n<td tal:content=\"user/role\">type</td>\n</tr>\n</table>\n</div>\n</body>\n</html>\n\n```"]