["```py\na = \"hello\" \nb = 'world' \nc = '''a multiple \nline string''' \nd = \"\"\"More \nmultiple\"\"\" \ne = (\"Three \" \"Strings \" \n        \"Together\") \n```", "```py\n>>> float('45\\u06602')\n4502.0  \n```", "```py\n>>> s = \"hello world\"\n>>> s.count('l')\n3\n>>> s.find('l')\n2\n>>> s.rindex('m')\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nValueError: substring not found  \n```", "```py\n>>> s = \"hello world, how are you\"\n>>> s2 = s.split(' ')\n>>> s2\n['hello', 'world,', 'how', 'are', 'you']\n>>> '#'.join(s2)\n'hello#world,#how#are#you'\n>>> s.replace(' ', '**')\n'hello**world,**how**are**you'\n>>> s.partition(' ')\n('hello', ' ', 'world, how are you')  \n```", "```py\nname = \"Dusty\"\nactivity = \"writing\"\nformatted = f\"Hello {name}, you are currently {activity}.\"\nprint(formatted)\n```", "```py\nHello Dusty, you are currently writing. \n```", "```py\nclassname = \"MyClass\"\npython_code = \"print('hello world')\"\ntemplate = f\"\"\"\npublic class {classname} {{\n    public static void main(String[] args) {{\n        System.out.println(\"{python_code}\");\n    }}\n}}\"\"\"\n\nprint(template)\n```", "```py\npublic class MyClass {\n public static void main(String[] args) {\n System.out.println(\"print('hello world')\");\n }\n}  \n```", "```py\nemails = (\"a@example.com\", \"b@example.com\")\nmessage = {\n    \"subject\": \"You Have Mail!\",\n    \"message\": \"Here's some mail for you!\",\n}\n\nformatted = f\"\"\"\nFrom: <{emails[0]}>\nTo: <{emails[1]}>\nSubject: {message['subject']}\n{message['message']}\"\"\"\nprint(formatted)\n```", "```py\nmessage[\"emails\"] = emails\n\nformatted = f\"\"\"\nFrom: <{message['emails'][0]}>\nTo: <{message['emails'][1]}>\nSubject: {message['subject']}\n{message['message']}\"\"\"\nprint(formatted)\n```", "```py\nclass EMail:\n    def __init__(self, from_addr, to_addr, subject, message):\n        self.from_addr = from_addr\n        self.to_addr = to_addr\n        self.subject = subject\n        self._message = message\n\n    def message(self):\n        return self._message\n\nemail = EMail(\n    \"a@example.com\",\n    \"b@example.com\",\n    \"You Have Mail!\",\n    \"Here's some mail for you!\",\n)\n\nformatted = f\"\"\"\nFrom: <{email.from_addr}>\nTo: <{email.to_addr}>\nSubject: {email.subject}\n\n{email.message()}\"\"\"\nprint(formatted)\n```", "```py\n>>> f\"['a' for a in range(5)]\"\n\"['a' for a in range(5)]\"\n>>> f\"{'yes' if True else 'no'}\"\n'yes'\n```", "```py\nsubtotal = 12.32\ntax = subtotal * 0.07\ntotal = subtotal + tax\n\nprint(\n    \"Sub: ${0} Tax: ${1} Total: ${total}\".format(\n        subtotal, tax, total=total\n    )\n)\n```", "```py\nSub: $12.32 Tax: $0.8624 Total: $13.182400000000001\n```", "```py\n\nprint(\n    \"Sub: ${0:0.2f} Tax: ${1:0.2f} \"\n    \"Total: ${total:0.2f}\".format(subtotal, tax, total=total)\n)\n\n```", "```py\norders = [(\"burger\", 2, 5), (\"fries\", 3.5, 1), (\"cola\", 1.75, 3)]\n\nprint(\"PRODUCT QUANTITY PRICE SUBTOTAL\")\nfor product, price, quantity in orders:\n    subtotal = price * quantity\n    print(\n f\"{product:10s}{quantity: ^9d} \"\n f\"${price: <8.2f}${subtotal: >7.2f}\"\n    )\n```", "```py\nPRODUCT    QUANTITY    PRICE    SUBTOTAL\nburger        5        $2.00    $  10.00\nfries         1        $3.50    $   3.50\ncola          3        $1.75    $   5.25  \n```", "```py\nimport datetime \nprint(\"{the_date:%Y-%m-%d %I:%M%p }\".format( \n    datetime.datetime.now())) \n```", "```py\n>>> template = \"abc {number:*^10d}\"\n>>> template.format(number=32)\n'abc ****32****'\n>>> template.format(number=84)\n'abc ****84****'\n```", "```py\ncharacters = b'\\x63\\x6c\\x69\\x63\\x68\\xe9' \nprint(characters) \nprint(characters.decode(\"latin-1\")) \n```", "```py\nb'clich\\xe9'\ncliché  \n```", "```py\ncharacters = \"cliché\" \nprint(characters.encode(\"UTF-8\")) \nprint(characters.encode(\"latin-1\")) \nprint(characters.encode(\"CP437\")) \nprint(characters.encode(\"ascii\")) \n```", "```py\n    b'clich\\xc3\\xa9'\n    b'clich\\xe9'\n    b'clich\\x82'\n    Traceback (most recent call last):\n      File \"1261_10_16_decode_unicode.py\", line 5, in <module>\n        print(characters.encode(\"ascii\"))\n    UnicodeEncodeError: 'ascii' codec can't encode character '\\xe9' in position 5: ordinal not in range(128)  \n```", "```py\nb = bytearray(b\"abcdefgh\") \nb[4:6] = b\"\\x15\\xa3\" \nprint(b) \n```", "```py\nbytearray(b'abcd\\x15\\xa3gh')  \n```", "```py\nb = bytearray(b\"abcdef\")\nb[3] = ord(b\"g\")\nb[4] = 68\nprint(b)\n```", "```py\nbytearray(b'abcgDf')  \n```", "```py\nimport re \n\nsearch_string = \"hello world\" \npattern = \"hello world\" \n\nmatch = re.match(pattern, search_string) \n\nif match: \n    print(\"regex matches\") \n```", "```py\nimport sys \nimport re \n\npattern = sys.argv[1] \nsearch_string = sys.argv[2] \nmatch = re.match(pattern, search_string) \n\nif match: \n    template = \"'{}' matches pattern '{}'\" \nelse: \n    template = \"'{}' does not match pattern '{}'\" \n\nprint(template.format(search_string, pattern)) \n```", "```py\n$ python regex_generic.py \"hello worl\" \"hello world\"\n'hello world' matches pattern 'hello worl'\n$ python regex_generic.py \"ello world\" \"hello world\"\n'hello world' does not match pattern 'ello world'  \n```", "```py\n'hello world' matches pattern '^hello world$'\n'hello worl' does not match pattern '^hello world$'  \n```", "```py\n'hello world' matches pattern 'hel.o world'\n'helpo world' matches pattern 'hel.o world'\n'hel o world' matches pattern 'hel.o world'\n'helo world' does not match pattern 'hel.o world'  \n```", "```py\n'hello world' matches pattern 'hel[lp]o world'\n'helpo world' matches pattern 'hel[lp]o world'\n'helPo world' does not match pattern 'hel[lp]o world'  \n```", "```py\n 'hello   world' does not match pattern 'hello [a-z] world'\n 'hello b world' matches pattern 'hello [a-z] world'\n 'hello B world' matches pattern 'hello [a-zA-Z] world'\n 'hello 2 world' matches pattern 'hello [a-zA-Z0-9] world'  \n```", "```py\n'0.05' matches pattern '0\\.[0-9][0-9]'\n'005' does not match pattern '0\\.[0-9][0-9]'\n'0,05' does not match pattern '0\\.[0-9][0-9]'  \n```", "```py\n'(abc]' matches pattern '\\(abc\\]'\n' 1a' matches pattern '\\s\\d\\w'\n'\\t5n' does not match pattern '\\s\\d\\w'\n'5n' matches pattern '\\s\\d\\w'  \n```", "```py\n'hello' matches pattern 'hel*o'\n'heo' matches pattern 'hel*o'\n'helllllo' matches pattern 'hel*o'  \n```", "```py\n'A string.' matches pattern '[A-Z][a-z]* [a-z]*\\.'\n'No .' matches pattern '[A-Z][a-z]* [a-z]*\\.'\n'' matches pattern '[a-z]*.*'  \n```", "```py\n'0.4' matches pattern '\\d+\\.\\d+'\n'1.002' matches pattern '\\d+\\.\\d+'\n'1.' does not match pattern '\\d+\\.\\d+'\n'1%' matches pattern '\\d?\\d%'\n'99%' matches pattern '\\d?\\d%'\n'999%' does not match pattern '\\d?\\d%'  \n```", "```py\n'abccc' matches pattern 'abc{3}'\n'abccc' does not match pattern '(abc){3}'\n'abcabcabc' matches pattern '(abc){3}'  \n```", "```py\n'Eat.' matches pattern '[A-Z][a-z]*( [a-z]+)*\\.$'\n'Eat more good food.' matches pattern '[A-Z][a-z]*( [a-z]+)*\\.$'\n'A good meal.' matches pattern '[A-Z][a-z]*( [a-z]+)*\\.$'  \n```", "```py\npattern = \"^[a-zA-Z.]+@([a-z.]*\\.[a-z]+)$\" \nsearch_string = \"some.user@example.com\" \nmatch = re.match(pattern, search_string) \n\nif match: \n    domain = match.groups()[0] \n    print(domain) \n```", "```py\n>>> import re\n>>> re.findall('a.', 'abacadefagah')\n['ab', 'ac', 'ad', 'ag', 'ah']\n>>> re.findall('a(.)', 'abacadefagah')\n['b', 'c', 'd', 'g', 'h']\n>>> re.findall('(a)(.)', 'abacadefagah')\n[('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'g'), ('a', 'h')]\n>>> re.findall('((a)(.))', 'abacadefagah')\n[('ab', 'a', 'b'), ('ac', 'a', 'c'), ('ad', 'a', 'd'), ('ag', 'a', 'g'), ('ah', 'a', \n'h')]  \n```", "```py\n>>> path = os.path.abspath(os.sep.join(['.', 'subdir', 'subsubdir', 'file.ext']))\n>>> print(path)\n/home/dusty/subdir/subsubdir/file.ext\n```", "```py\n>>> path = (pathlib.Path(\".\") / \"subdir\" / \" subsubdir\" / \"file.ext\").absolute()\n>>> print(path)\n/home/dusty/subdir/subsubdir/file.ext\n```", "```py\nimport pathlib\n\ndef count_sloc(dir_path):\n    sloc = 0\n    for path in dir_path.iterdir():\n        if path.name.startswith(\".\"):\n            continue\n        if path.is_dir():\n            sloc += count_sloc(path)\n            continue\n        if path.suffix != \".py\":\n            continue\n        with path.open() as file:\n            for line in file:\n                line = line.strip()\n                if line and not line.startswith(\"#\"):\n                    sloc += 1\n    return sloc\n\nroot_path = pathlib.Path(\".\")\n\nprint(f\"{count_sloc(root_path)} lines of python code\")\n\n```", "```py\n>>> zipfile.ZipFile(Path('nothing.zip'), 'w').writestr('filename', 'contents')\n```", "```py\nimport pickle \n\nsome_data = [\"a list\", \"containing\", 5, \n        \"values including another list\", \n        [\"inner\", \"list\"]] \n\nwith open(\"pickled_list\", 'wb') as file: \n    pickle.dump(some_data, file) \n\nwith open(\"pickled_list\", 'rb') as file: \n    loaded_data = pickle.load(file) \n\nprint(loaded_data) \nassert loaded_data == some_data \n```", "```py\nfrom threading import Timer \nimport datetime \nfrom urllib.request import urlopen \n\nclass UpdatedURL: \n    def __init__(self, url): \n        self.url = url \n        self.contents = '' \n        self.last_updated = None \n        self.update() \n\n    def update(self): \n        self.contents = urlopen(self.url).read() \n        self.last_updated = datetime.datetime.now() \n        self.schedule() \n\n    def schedule(self): \n        self.timer = Timer(3600, self.update) \n        self.timer.setDaemon(True) \n        self.timer.start() \n```", "```py\n>>> u = UpdatedURL(\"http://dusty.phillips.codes\")\n^[[Apickle.dumps(u)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: can't pickle _thread.lock objects\n```", "```py\n    def __getstate__(self): \n        new_state = self.__dict__.copy() \n        if 'timer' in new_state: \n            del new_state['timer'] \n        return new_state \n```", "```py\n def __setstate__(self, data): self.__dict__ = data self.schedule() \n```", "```py\nclass Contact: \n    def __init__(self, first, last): \n        self.first = first \n        self.last = last \n\n    @property \n    def full_name(self): \n        return(\"{} {}\".format(self.first, self.last)) \n```", "```py\n    >>> c = Contact(\"John\", \"Smith\")\n    >>> json.dumps(c.__dict__)\n    '{\"last\": \"Smith\", \"first\": \"John\"}'  \n```", "```py\nimport json\n\nclass ContactEncoder(json.JSONEncoder):\n    def default(self, obj):\n        if isinstance(obj, Contact):\n            return {\n                \"is_contact\": True,\n                \"first\": obj.first,\n                \"last\": obj.last,\n                \"full\": obj.full_name,\n            }\n        return super().default(obj)\n```", "```py\n    >>> c = Contact(\"John\", \"Smith\")\n    >>> json.dumps(c, cls=ContactEncoder)\n    '{\"is_contact\": true, \"last\": \"Smith\", \"full\": \"John Smith\",\n    \"first\": \"John\"}'  \n```", "```py\ndef decode_contact(dic):\n    if dic.get(\"is_contact\"):\n        return Contact(dic[\"first\"], dic[\"last\"])\n    else:\n        return dic\n```", "```py\n    >>> data = ('{\"is_contact\": true, \"last\": \"smith\",'\n         '\"full\": \"john smith\", \"first\": \"john\"}')\n\n    >>> c = json.loads(data, object_hook=decode_contact)\n    >>> c\n    <__main__.Contact object at 0xa02918c>\n    >>> c.full_name\n    'john smith'  \n```", "```py\n/** include header.html **/ \n<h1>This is the title of the front page</h1> \n/** include menu.html **/ \n<p>My name is /** variable name **/. \nThis is the content of my front page. It goes below the menu.</p> \n<table> \n<tr><th>Favourite Books</th></tr> \n/** loopover book_list **/ \n<tr><td>/** loopvar **/</td></tr> \n\n/** endloop **/ \n</table> \n/** include footer.html **/ \nCopyright &copy; Today \n```", "```py\n{ \n    \"name\": \"Dusty\", \n    \"book_list\": [ \n        \"Thief Of Time\", \n        \"The Thief\", \n        \"Snow Crash\", \n        \"Lathe Of Heaven\" \n    ] \n} \n```", "```py\nimport re \nimport sys \nimport json \nfrom pathlib import Path \n\nDIRECTIVE_RE = re.compile( \n    r'/\\*\\*\\s*(include|variable|loopover|endloop|loopvar)' \n    r'\\s*([^ *]*)\\s*\\*\\*/') \n\nclass TemplateEngine: \n    def __init__(self, infilename, outfilename, contextfilename): \n        self.template = open(infilename).read() \n        self.working_dir = Path(infilename).absolute().parent \n        self.pos = 0 \n        self.outfile = open(outfilename, 'w') \n        with open(contextfilename) as contextfile: \n            self.context = json.load(contextfile) \n\n    def process(self): \n        print(\"PROCESSING...\") \n\nif __name__ == '__main__': \n    infilename, outfilename, contextfilename = sys.argv[1:] \n    engine = TemplateEngine(infilename, outfilename, contextfilename) \n    engine.process() \n```", "```py\ndef process(self): \n    match = DIRECTIVE_RE.search(self.template, pos=self.pos) \n    while match: \n        self.outfile.write(self.template[self.pos:match.start()]) \n        self.pos = match.end() \n        match = DIRECTIVE_RE.search(self.template, pos=self.pos) \n    self.outfile.write(self.template[self.pos:]) \n```", "```py\ndef process(self): \n    match = DIRECTIVE_RE.search(self.template, pos=self.pos) \n    while match: \n        self.outfile.write(self.template[self.pos:match.start()]) \n        directive, argument = match.groups() \n        method_name = 'process_{}'.format(directive) \n        getattr(self, method_name)(match, argument) \n        match = DIRECTIVE_RE.search(self.template, pos=self.pos) \n    self.outfile.write(self.template[self.pos:]) \n```", "```py\ndef process_include(self, match, argument): \n    with (self.working_dir / argument).open() as includefile: \n        self.outfile.write(includefile.read()) \n        self.pos = match.end() \n\ndef process_variable(self, match, argument): \n    self.outfile.write(self.context.get(argument, '')) \n    self.pos = match.end() \n```", "```py\n    def process_loopover(self, match, argument): \n        self.loop_index = 0 \n        self.loop_list = self.context.get(argument, []) \n        self.pos = self.loop_pos = match.end() \n\n    def process_loopvar(self, match, argument): \n        self.outfile.write(self.loop_list[self.loop_index]) \n        self.pos = match.end() \n\n    def process_endloop(self, match, argument): \n        self.loop_index += 1 \n        if self.loop_index >= len(self.loop_list): \n            self.pos = match.end() \n            del self.loop_index \n            del self.loop_list \n            del self.loop_pos \n        else: \n            self.pos = self.loop_pos \n```", "```py\n<html>\n\n<body>\n\n<h1>This is the title of the front page</h1>\n<a href=\"link1.html\">First Link</a>\n<a href=\"link2.html\">Second Link</a>\n\n<p>My name is Dusty. This is the content of my front page. It goes below the menu.</p>\n<table>\n    <tr>\n        <th>Favourite Books</th>\n    </tr>\n\n    <tr>\n        <td>Thief Of Time</td>\n    </tr>\n\n    <tr>\n        <td>The Thief</td>\n    </tr>\n\n    <tr>\n        <td>Snow Crash</td>\n    </tr>\n\n    <tr>\n        <td>Lathe Of Heaven</td>\n    </tr>\n\n</table>\n</body>\n\n</html>\n Copyright &copy; Today\n```"]