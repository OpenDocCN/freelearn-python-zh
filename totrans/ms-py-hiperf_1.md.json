["```py\nimport sys\n\ndef profiler(frame, event, arg):\n    print 'PROFILER: %r %r' % (event, arg)\n\nsys.setprofile(profiler)\n\n#simple (and very ineficient) example of how to calculate the Fibonacci sequence for a number.\ndef fib(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fib(n-1) + fib(n-2)\n\ndef fib_seq(n):\n    seq = [ ]\n    if n > 0:\n        seq.extend(fib_seq(n-1))\n    seq.append(fib(n))\n    return seq\n\nprint fib_seq(2)\n```", "```py\nPROFILER: 'call' None\nPROFILER: 'call' None\nPROFILER: 'call' None\nPROFILER: 'call' None\nPROFILER: 'return' 0\nPROFILER: 'c_call' <built-in method append of list object at 0x7f570ca215f0>\nPROFILER: 'c_return' <built-in method append of list object at 0x7f570ca215f0>\nPROFILER: 'return' [0]\nPROFILER: 'c_call' <built-in method extend of list object at 0x7f570ca21bd8>\nPROFILER: 'c_return' <built-in method extend of list object at 0x7f570ca21bd8>\nPROFILER: 'call' None\nPROFILER: 'return' 1\nPROFILER: 'c_call' <built-in method append of list object at 0x7f570ca21bd8>\nPROFILER: 'c_return' <built-in method append of list object at 0x7f570ca21bd8>\nPROFILER: 'return' [0, 1]\nPROFILER: 'c_call' <built-in method extend of list object at 0x7f570ca55bd8>\nPROFILER: 'c_return' <built-in method extend of list object at 0x7f570ca55bd8>\nPROFILER: 'call' None\nPROFILER: 'call' None\nPROFILER: 'return' 1\nPROFILER: 'call' None\nPROFILER: 'return' 0\nPROFILER: 'return' 1\nPROFILER: 'c_call' <built-in method append of list object at 0x7f570ca55bd8>\nPROFILER: 'c_return' <built-in method append of list object at 0x7f570ca55bd8>\nPROFILER: 'return' [0, 1, 1]\n[0, 1, 1]\nPROFILER: 'return' None\nPROFILER: 'call' None\nPROFILER: 'c_call' <built-in method discard of set object at 0x7f570ca8a960>\nPROFILER: 'c_return' <built-in method discard of set object at 0x7f570ca8a960>\nPROFILER: 'return' None\nPROFILER: 'call' None\nPROFILER: 'c_call' <built-in method discard of set object at 0x7f570ca8f3f0>\nPROFILER: 'c_return' <built-in method discard of set object at 0x7f570ca8f3f0>\nPROFILER: 'return' None\n```", "```py\nFunction name,File name,Times Encountered,Percentage\n\"func80000\",\"statistical_profiling.c\",30760,48.96%\n\"func40000\",\"statistical_profiling.c\",17515,27.88%\n\"func20000\",\"static_functions.c\",7141,11.37%\n\"func10000\",\"static_functions.c\",3572,5.69%\n\"func5000\",\"static_functions.c\",1787,2.84%\n\"func2000\",\"static_functions.c\",768,1.22%\n\"func1500\",\"statistical_profiling.c\",701,1.12%\n\"func1000\",\"static_functions.c\",385,0.61%\n\"func500\",\"statistical_profiling.c\",194,0.31%\n```", "```py\n  %   cumulative      self          \n time    seconds   seconds  name    \n100.00      0.01      0.01  B02088_01_03.py:11:fib\n  0.00      0.01      0.00  B02088_01_03.py:17:fib_seq\n  0.00      0.01      0.00  B02088_01_03.py:21:<module>\n---\nSample count: 1\nTotal time: 0.010000 seconds\n```", "```py\nimport datetime\n\ntstart = None\ntend = None\n\ndef start_time():\n    global tstart\n    tstart = datetime.datetime.now()\ndef get_delta():\n    global tstart\n    tend = datetime.datetime.now()\n    return tend - tstart\n\n def fib(n):\n     return n if n == 0 or n == 1 else fib(n-1) + fib(n-2)\n\ndef fib_seq(n):\n    seq = [ ]\n    if n > 0:\n        seq.extend(fib_seq(n-1))\n    seq.append(fib(n))\n    return seq\n\nstart_time()\nprint \"About to calculate the fibonacci sequence for the number 30\"\ndelta1 = get_delta()\n\nstart_time()\nseq = fib_seq(30) \ndelta2 = get_delta()\n\nprint \"Now we print the numbers: \"\nstart_time()\nfor n in seq:\n    print n\ndelta3 = get_delta()\n\nprint \"====== Profiling results =======\"\nprint \"Time required to print a simple message: %(delta1)s\" % locals()\nprint \"Time required to calculate fibonacci: %(delta2)s\" % locals()\nprint \"Time required to iterate and print the numbers: %(delta3)s\" % locals()\nprint \"======  =======\"\n```", "```py\nAbout to calculate the Fibonacci sequence for the number 30\nNow we print the numbers: \n0\n1\n1\n2\n3\n5\n8\n13\n21\n#...more numbers\n4181\n6765\n10946\n17711\n28657\n46368\n75025\n121393\n196418\n317811\n514229\n832040\n====== Profiling results =======\nTime required to print a simple message: 0:00:00.000030\nTime required to calculate fibonacci: 0:00:00.642092\nTime required to iterate and print the numbers: 0:00:00.000102\n\n```", "```py\n    if number % 2:\n      odd = True \n    else:\n      odd = False\n    ```", "```py\n    print \"Hello world!\"\n    ```"]