["```py\n$ python3 -m venv envs/your_env\n$ source envs/your_env/bin/activate\n(your_env) $ \n```", "```py\nC:\\Users\\wolph>python.exe -m venv envs\\your_env\nC:\\Users\\wolph>envs\\your_env\\Scripts\\activate.bat\n(your_env) C:\\Users\\wolph> \n```", "```py\nPS C:\\Users\\wolph>python.exe -m venv envs\\your_env\nPS C:\\Users\\wolph> envs\\your_env\\Scripts\\Activate.ps1\n(your_env) PS C:\\Users\\wolph> \n```", "```py\n$ python3 -m venv envs/your_env \n```", "```py\n$ virtualenv envs/your_env \n```", "```py\n$ virtualenv -p python3.8 envs/your_env \n```", "```py\n$ python3.8 -m venv envs/your_env \n```", "```py\n$ source envs/your_env/bin/activate\n(your_env) $ \n```", "```py\nC:\\Users\\wolph>envs\\your_env\\Scripts\\activate.bat\n(your_env) C:\\Users\\wolph> \n```", "```py\nPS C:\\Users\\wolph> envs\\your_env\\Scripts\\Activate.ps1\n(your_env) PS C:\\Users\\wolph> \n```", "```py\nSet-ExecutionPolicy Unrestricted -Scope Process \n```", "```py\nSet-ExecutionPolicy Unrestricted -Scope CurrentUser \n```", "```py\n/home/wolph/envs/your_env/bin/python script.py \n```", "```py\n/home/wolph/envs/your_env/bin/pip \n```", "```py\n$ pip3 install <package> \n```", "```py\n$ pip3 freeze \n```", "```py\n$ python3 -m venv --system-site-packages envs/your_env \n```", "```py\n$ pip3 freeze --local \n```", "```py\n$ curl https://pyenv.run | bash \n```", "```py\n$ pyenv install --list \n```", "```py\n$ pyenv install --list | grep 3.10\n  3.10.0\n  3.10-dev\n... \n```", "```py\n$ pyenv install 3.10-dev\nCloning https://github.com/python/cpython...\nInstalling Python-3.10-dev...\nInstalled Python-3.10-dev to /home/wolph/.pyenv/versions/3.10-dev \n```", "```py\n$ pyenv virtualenv 3.10-dev your_pyenv \n```", "```py\n$ pyenv activate your_pyenv \n```", "```py\n$ conda init zsh \n```", "```py\n$ conda config --set auto_activate_base false \n```", "```py\n$ conda activate\n(base) $ \n```", "```py\n$ conda activate conda_env\n(conda_env) $ \n```", "```py\n$ conda create --name conda_env\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n...\nProceed ([y]/n)? y\n\nPreparing transaction: done\nVerifying transaction: done\nExecuting transaction: done\n... \n```", "```py\n$ conda info --envs\n# conda environments\n#\nbase                  *  /usr/local/anaconda3\nconda_env                /usr/local/anaconda3/envs/conda_env \n```", "```py\n(conda_env) $ conda install progressbar2\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n\n## Package Plan ##\n  environment location: /usr/local/anaconda3/envs/conda_env\n\n  added / updated specs:\n    - progressbar2\nThe following packages will be downloaded:\n...\nThe following NEW packages will be INSTALLED:\n...\nProceed ([y]/n)? y\n\nDownloading and Extracting Packages\n... \n```", "```py\n(conda_env) $ python\nPython 3.8.0 (default, Nov  6 2019, 15:49:01)\n[Clang 4.0.1 (tags/RELEASE_401/final)] :: Anaconda, Inc. on darwin\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import progressbar\n\n>>> for _ in progressbar.progressbar(range(5)): pass\n...\n100% (5 of 5) |##############################| Elapsed Time: 0:00:00 Time:  0:00:00 \n```", "```py\n(conda_env) $ conda list\n# packages in environment at /usr/local/anaconda3/envs/conda_env:\n#\n# Name                    Version                   Build  Channel\n... \n```", "```py\n$ conda config --set pip_interop_enabled True \n```", "```py\n(conda_env) $ conda skeleton pypi progressbar2\nWarning, the following versions were found for progressbar2\n...\nUse --version to specify a different version.\n...\n## Package Plan ##\n...\nThe following NEW packages will be INSTALLED:\n...\nINFO:conda_build.config:--dirty flag and --keep-old-work not specified. Removing build/test folder after successful build/test. \n```", "```py\n(conda_env) $ conda build progressbar2\n...\n(conda_env) $ conda install --use-local progressbar2\nCollecting package metadata (current_repodata.json): done\nSolving environment: done\n... \n```", "```py\n(conda_env) $ conda env export –file environment.yml\n(conda_env) $ cat environment.yml\nname: conda_env\nchannels:\n  - defaults\ndependencies:\n...\nprefix: /usr/local/anaconda3/envs/conda_env \n```", "```py\n$ conda env create --name conda_env –file environment.yml \n```", "```py\n(conda_env) $ conda env update --file environment.yml\nCollecting package metadata (repodata.json): done\n... \n```", "```py\n(your_env) $ pip3 freeze\npkg-resources==0.0.0 \n```", "```py\n(your_env) $ pip3 freeze > requirements.txt\n(your_env) $ pip3 install progressbar2\nCollecting progressbar2\n...\nInstalling collected packages: six, python-utils, progressbar2\nSuccessfully installed progressbar2-3.47.0 python-utils-2.3.0 six-1.13.0\n(your_env) $ pip3 freeze -r requirements.txt \npkg-resources==0.0.0\n## The following requirements were added by pip freeze:\nprogressbar2==3.47.0\npython-utils==2.3.0\nsix==1.13.0 \n```", "```py\n$ pip3 install 'progressbar2==3.47.0' \n```", "```py\n# We want a progressbar that is at least version 3.47.0 since we've tested that.\n# But newer versions are ok as well.\nprogressbar2>=3.47.0 \n```", "```py\n(your_env) $ pip3 install -r requirements.txt \nRequirement already satisfied: progressbar2>=3.47.0 in your_env/lib/python3.9/site-packages (from -r requirements.txt (line 1))\nRequirement already satisfied: python-utils>=2.3.0 in your_env/lib/python3.9/site-packages (from progressbar2>=3.47.0->-r requirements.txt (line 1))\nRequirement already satisfied: six in your_env/lib/python3.9/site-packages (from progressbar2>=3.47.0->-r requirements.txt (line 1)) \n```", "```py\n# Progressbar 2 version 3.47.0 has a silly bug but anything beyond 3.46.0 still works with our code\nprogressbar2>=3.46,!=3.47.0 \n```", "```py\n# Basic wildcard:\nprogressbar2 ==3.47.*\n# Compatible release:\nprogressbar2 ~=3.47.1\n# Compatible release above is identical to:\nprogressbar2 >=3.47.1, ==3.47.* \n```", "```py\n(your_env) $ pip3 install --editable 'git+https://github.com/wolph/python-progressbar@develop#egg=progressbar2'\nObtaining progressbar2 from git+https://github.com/wolph/python-progressbar@develop#egg=progressbar2\n  Updating your_env/src/progressbar2 clone (to develop)\nRequirement already satisfied: python-utils>=2.3.0 in your_env/lib/python3.9/site-packages (from progressbar2)\nRequirement already satisfied: six in your_env/lib/python3.9/site-packages (from progressbar2)\nInstalling collected packages: progressbar2\n  Found existing installation: progressbar2 3.47.0\n    Uninstalling progressbar2-3.47.0:\n      Successfully uninstalled progressbar2-3.47.0\n  Running setup.py develop for progressbar2\nSuccessfully installed progressbar2 \n```", "```py\n# Install the documentation and test extras in addition to the progressbar\nprogressbar2[docs,tests]\n# A popular example is the installation of encryption libraries when using the requests library:\nrequests[security] \n```", "```py\npywin32!=226; platform_system == \"Windows\" \n```", "```py\ndataclasses; python_version < '3.7' \n```", "```py\n$ poetry init\nThis command will guide you through creating your pyproject.toml config.\n\nPackage name [t_00_poetry]:\nVersion [0.1.0]:\nDescription []:\nAuthor [Rick van Hattem <Wolph@wol.ph>, n to skip]:\nLicense []:\nCompatible Python versions [^3.10]:\n\nWould you like to define your main dependencies interactively? (yes/no) [yes] no\nWould you like to define your development dependencies interact...? (yes/no) [yes] no\n...\nDo you confirm generation? (yes/no) [yes] \n```", "```py\n    $ git config --global user.name \"Rick van Hattem\"\n    $ git config --global user.email \"Wolph@wol.ph\" \n    ```", "```py\n[tool.poetry]\nname = \"t_00_poetry\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Rick van Hattem <Wolph@wol.ph>\"]\n\n[tool.poetry.dependencies]\npython = \"^3.10\"\n\n[tool.poetry.dev-dependencies]\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\" \n```", "```py\n$ poetry add progressbar2\nUsing version ^3.55.0 for progressbar2\n...\nWriting lock file\n...\n  • Installing progressbar2 (3.55.0) \n```", "```py\n[tool.poetry.dependencies]\npython = \"^3.10\"\nprogressbar2 = \"^3.55.0\" \n```", "```py\n[[package]]\nname = \"progressbar2\"\nversion = \"3.55.0\"\n... \n[package.dependencies]\npython-utils = \">=2.3.0\"\n...\n[package.extras]\ndocs = [\"sphinx (>=1.7.4)\"]\n...\n[metadata]\nlock-version = \"1.1\"\npython-versions = \"^3.10\"\ncontent-hash = \"c4235fba0428ce7877f5a94075e19731e5d45caa73ff2e0345e5dd269332bff0\"\n\n[metadata.files]\nprogressbar2 = [\n    {file = \"progressbar2-3.55.0-py2.py3-none-any.whl\", hash = \"sha256:...\"},\n    {file = \"progressbar2-3.55.0.tar.gz\", hash = \"sha256:...\"},\n]\n... \n```", "```py\n$ poetry install\nInstalling dependencies from lock file\n... \n```", "```py\n$ poetry add 'progressbar2=3.1.0' \n```", "```py\n[tool.poetry.dependencies]\nprogressbar2 = \"^3.1.0\" \n```", "```py\n$ poetry update\n...\n  • Updating progressbar2 (3.1.0 -> 3.55.0) \n```", "```py\n$ poetry run pip \n```", "```py\n$ poetry shell \n```", "```py\n0 3 * * *       cd /home/wolph/workspace/poetry_project/ && poetry run python script.py \n```", "```py\n$ which poetry\n/usr/local/bin/poetry \n```", "```py\n$ pipenv install progressbar2\nCreating a virtualenv for this project...\n...\nUsing /usr/local/bin/python3 (3.10.4) to create virtualenv...\n...\n![](img/B15882_01_001.png) Successfully created virtual environment!\n...\nCreating a Pipfile for this project...\nInstalling progressbar2...\nAdding progressbar2 to Pipfile's [packages]...\n![](img/B15882_01_001.png) Installation Succeeded\nPipfile.lock not found, creating...\n...\n![](img/B15882_01_001.png) Success!\nUpdated Pipfile.lock (996b11)!\nInstalling dependencies from Pipfile.lock (996b11)...\n  ![](img/B15882_01_002.png) 0/0 — 00:00:0 \n```", "```py\n[[source]]\nname = \"pypi\"\nurl = \"https://pypi.org/simple\"\nverify_ssl = true\n\n[dev-packages]\n\n[packages]\nprogressbar2 = \"*\"\n\n[requires]\npython_version = \"3.10\" \n```", "```py\n{\n    ...\n    \"default\": {\n        \"progressbar2\": {\n            \"hashes\": [\n                \"sha256:14d3165a1781d053...\",\n                \"sha256:2562ba3e554433f0...\"\n            ],\n            \"index\": \"pypi\",\n            \"version\": \"==4.0.0\"\n        },\n        \"python-utils\": {\n            \"hashes\": [\n                \"sha256:4dace6420c5f50d6...\",\n                \"sha256:93d9cdc8b8580669...\"\n            ],\n            \"markers\": \"python_version >= '3.7'\",\n            \"version\": \"==3.1.0\"\n        },\n        ...\n    },\n    \"develop\": {}\n} \n```", "```py\n$ pipenv install\nInstalling dependencies from Pipfile.lock (5c99e1)…\n  ![](img/B15882_01_002.png) 3/3 — 00:00:00\nTo activate this project's virtualenv, run pipenv shell.\nAlternatively, run a command inside the virtualenv with pipenv run. \n```", "```py\n$ pipenv update \n```", "```py\n$ pipenv install 'progressbar2!=3.47.0'\nInstalling progressbar2!=3.47.0…\nAdding progressbar2 to Pipfile's [packages]…\n![](img/B15882_01_001.png) Installation Succeeded \nPipfile.lock (c9327e) out of date, updating to (5c99e1)…\n![](img/B15882_01_001.png) Success! \nUpdated Pipfile.lock (c9327e)!\nInstalling dependencies from Pipfile.lock (c9327e)…\n  ![](img/B15882_01_002.png) 3/3 — 00:00:00 \n```", "```py\n[packages]\nprogressbar2 = \"!=3.47.0\" \n```", "```py\n$ mkdir ../pipenv_production\n$ cp Pipfile Pipfile.lock ../pipenv_production/\n$ cd ../pipenv_production/\n$ pipenv install --deploy\nCreating a virtualenv for this project...\nPipfile: /home/wolph/workspace/pipenv_production/Pipfile\nUsing /usr/bin/python3 (3.10.4) to create virtualenv...\n...\n![](img/B15882_01_001.png) Successfully created virtual environment!\n...\nInstalling dependencies from Pipfile.lock (996b11)...\n  ![](img/B15882_01_002.png) 2/2 — 00:00:01\n$ pipenv shell\nLaunching subshell in virtual environment...\n(pipenv_production) $ pip3 freeze\nprogressbar2==4.0.0\npython-utils==3.1.0 \n```", "```py\n0 3 * * *       cd /home/wolph/workspace/pipenv_project/ && pipenv run python script.py \n```"]