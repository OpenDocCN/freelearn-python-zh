["```py\nFROM python:3.10-alpine\n# pull official base image\n```", "```py\nWORKDIR /app\n```", "```py\n# install psycopg2 dependencies\nRUN apk update \\\n    && apk add postgresql-dev gcc python3-dev musl-dev\n    jpeg-dev zlib-dev\n```", "```py\n# install python dependencies\nCOPY requirements.txt /app/requirements.txt\nRUN pip install --upgrade pip\nRUN pip install --no-cache-dir -r requirements.txt\n```", "```py\n# add app\nCOPY . .\n```", "```py\nEXPOSE 8000\nCMD [\"python\", \"manage.py\", \"migrate\"]\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n```", "```py\n# pull official base image\nFROM python:3.10-alpine\n# set work directory\nWORKDIR /app\n# set environment variables\nENV PYTHONDONTWRITEBYTECODE 1\nENV PYTHONUNBUFFERED 1\n# install psycopg2 dependencies\nRUN apk update \\\n   && apk add postgresql-dev gcc python3-dev musl-dev\n# install python dependencies\nCOPY requirements.txt /app/requirements.txt\nRUN pip install --upgrade pip\nRUN pip install --no-cache-dir -r requirements.txt\n# copy project\nCOPY . .\nEXPOSE 8000\nCMD [\"python\", \"manage.py\", \"migrate\"]\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n```", "```py\ndocker build -t django-postagram .\n```", "```py\ndocker run --name django-postagram -d -p 8000:8000 django-postagram:latest\n```", "```py\ndocker container ps\n```", "```py\ndocker logs --details django-postagram\n```", "```py\nEXPOSE 8000\nCMD [\"python\", \"manage.py\", \"migrate\"]\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n```", "```py\nversion: '3.8'\nservices:\n nginx:\n   container_name: postagram_web\n   restart: always\n   image: nginx:latest\n   volumes:\n     - ./nginx.conf:/etc/nginx/conf.d/default.conf\n     - uploads_volume:/app/uploads\n   ports:\n     - \"80:80\"\n   depends_on:\n     - api\n```", "```py\ndb:\n container_name: postagram_db\n image: postgres:14.3-alpine\n env_file: .env\n volumes:\n   - postgres_data:/var/lib/postgresql/data/\n```", "```py\napi:\n container_name: postagram_api\n build: .\n restart: always\n env_file: .env\n ports:\n   - \"8000:8000\"\n command: >\n   sh -c \"python manage.py migrate --no-input && gunicorn\n          CoreRoot.wsgi:application --bind 0.0.0.0:8000\"\n volumes:\n  - .:/app\n  - uploads_volume:/app/uploads\n depends_on:\n  - db\n```", "```py\npip install gunicorn\n```", "```py\ngunicorn==20.1.0\n```", "```py\nvolumes:\n uploads_volume:\n postgres_data:\n```", "```py\nSECRET_KEY=foo\nDATABASE_NAME=coredb\nDATABASE_USER=core\nDATABASE_PASSWORD=wCh29&HE&T83\nDATABASE_HOST=postagram_db\nDATABASE_PORT=5432\nPOSTGRES_USER=core\nPOSTGRES_PASSWORD=wCh29&HE&T83\nPOSTGRES_DB=coredb\nENV=DEV\nDJANGO_ALLOWED_HOSTS=127.0.0.1,localhost\n```", "```py\npip install python-dotenv\n```", "```py\nDjango==4.0.1\npsycopg2-binary==2.9.3\ndjangorestframework==3.13.1\ndjango-filter==21.1\npillow==9.0.0\ndjangorestframework-simplejwt==5.0.0\ndrf-nested-routers==0.93.4\npytest-django==4.5.2\ndjango-cors-headers==3.11.0\npython-dotenv==0.20.0\ngunicorn==20.1.0\n```", "```py\nfrom dotenv import load_dotenv\nload_dotenv()\n```", "```py\nENV = os.environ.get(\"ENV\")\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get(\n   \"SECRET_KEY\", default=\n     \"qkl+xdr8aimpf-&x(mi7)dwt^-q77aji#j*d#02-5usa32r9!y\"\n)\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = False if ENV == \"PROD\" else True\nALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\", default=\"*\").split(\",\")\n```", "```py\nDATABASES = {\n   \"default\": {\n       \"ENGINE\": \"django.db.backends.postgresql_psycopg2\",\n       \"NAME\": os.getenv(\"DATABASE_NAME\", \"coredb\"),\n       \"USER\": os.getenv(\"DATABASE_USER\", \"core\"),\n       \"PASSWORD\": os.getenv(\"DATABASE_PASSWORD\",\n                             \"wCh29&HE&T83\"),\n       \"HOST\": os.environ.get(\"DATABASE_HOST\",\n                              \"localhost\"),\n       \"PORT\": os.getenv(\"DATABASE_PORT\", \"5432\"),\n   }\n}\n```", "```py\nupstream webapp {\n   server postagram_api:8000;\n}\n```", "```py\nupstream upstream_name {\n   server host:PORT;\n}\n```", "```py\nserver {\n   listen 80;\n   server_name localhost;\n   location / {\n       proxy_pass http://webapp;\n       proxy_set_header X-Forwarded-For\n         $proxy_add_x_forwarded_for;\n       proxy_set_header Host $host;\n       proxy_redirect off;\n   }\n   location /media/ {\n    alias /app/uploads/;\n   }\n}\n```", "```py\ndocker compose up -d –build\n```", "```py\ndocker compose exec -T api pytest\n```"]