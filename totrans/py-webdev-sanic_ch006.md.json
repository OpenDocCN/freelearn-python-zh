["```py\nHTTP 1.1 200 OK\nContent-Length: 13\nConnection: keep-alive\nContent-Type: text/plain; charset=utf-8\nHello, world.\n```", "```py\nfrom sanic.exceptions import NotFound\n@app.get(\"/playlist/<playlist_name:str>\")\nasync def show_playlist(request, playlist_name: str):\n    can_view = async check_if_current_user_can_see_playlist(\n        request,\n        playlist_name\n    )\n    if not can_view:\n        raise NotFound(\"Oops, that page does not exist\")\n    ...\n```", "```py\n$ curl localhost:7777/playlist/adams-awesome-music -i\nHTTP/1.1 404 Not Found\ncontent-length: 83\nconnection: keep-alive\ncontent-type: application/json\n{\"description\":\"Not Found\",\"status\":404,\"message\":\"Oops, that page does not exist\"}\n```", "```py\nfrom sanic.exceptions import SanicException\nclass NotAcceptable(SanicException):\n    status_code = 406\n    quiet = True\n@app.post(\"/\")\nasync def handler(request):\n    if \"foobar\" not in request.headers:\n        raise NotAcceptable(\"You must supply a Foobar header\")\n    return text(\"OK\")\n```", "```py\n    from sanic.headers import _HTTP1_STATUSLINES\n    _HTTP1_STATUSLINES[999] = b\"HTTP/1.1 999 ROCK ON\\r\\n\"\n    @app.get(\"/rockon\")\n    async def handler(request):\n        return empty(status=999)\n    ```", "```py\n    $ curl localhost:7777/rockon -i\n    HTTP/1.1 999 ROCK ON\n    content-length: 0\n    connection: keep-alive\n    content-type: None\n    ```", "```py\n    @app.get(\"/coffee\")\n    async def handler(request):\n        return text(\"Coffee?\", status=418)\n    ```", "```py\n$ curl localhost:7777/coffee -i\n```", "```py\n    @app.get(\"/\")\n    async def handler(request):\n        return empty(headers={\"the-square-root-of-four\": \"two\"})\n    ```", "```py\n    $ curl localhost:7777/ -i\n    HTTP/1.1 204 No Content\n    the-square-root-of-four: two\n    connection: keep-alive\n    ```", "```py\n    from sanic.compat import Header\n    @app.get(\"/\")\n    async def handler(request):\n        return empty(\n            headers=Header(\n                [\n                    (\"the-square-root-of-four\", \"positive two\"),\n                    (\"the-square-root-of-four\", \"negative two\"),\n                ]\n            )\n        )\n    ```", "```py\n    $ curl localhost:7777/ -i\n    HTTP/1.1 204 No Content\n    the-square-root-of-four: positive two\n    the-square-root-of-four: negative two\n    connection: keep-alive\n    ```", "```py\nHTTP/1.1 200 OK\ncontent-length: 70\nconnection: keep-alive\ncontent-type: text/html; charset=utf-8\n<!DOCTYPE html><html lang=\"en\"><meta charset=\"UTF-8\"><title>Hello</title><div>Hi!</div>\nNotice the critical HTTP response header: content-type: text/html; charset=utf-8\\. Sanic has a convenient reponse function:\nfrom sanic import html, HTTPResponse\n@app.route(\"/\")\nasync def handler(request) -> HTTPResponse:\n    return html(\n        '<!DOCTYPE html><html lang=\"en\"><meta charset=\"UTF-8\"><title>Hello</title><div>Hi!</div>'\n    )\n```", "```py\n@app.route(\"/\")\nasync def handler(request) -> HTTPResponse:\n    path = \"/path/to/whatsnew.html\" if request.ctx.user else \"/path/to/login.html\"\n    with open(path, \"r\") as f:\n        doc = f.read()\n    return html(doc)\n```", "```py\n@app.route(\"/<name:str>\")\nasync def handler(request, name: str) -> HTTPResponse:\n    return html(f\"<div>Hi {name}</div>\")\n```", "```py\n<!-- Boilerplate HTML here -->\n    <textarea id=\"source\">\nclass: center, middle\n# Title\n---\n# Agenda\n1\\. Introduction\n2\\. Deep-dive\n3\\. ...\n---\n# Introduction\n    </textarea>\n    <script src=\"https://remarkjs.com/downloads/remark-latest.min.js\">\n<!-- Boilerplate HTML and here -->\n```", "```py\n<!-- Boilerplate HTML here -->\n    <textarea id=\"source\">\n__SLIDES__\n    </textarea>\n    <script src=\"https://remarkjs.com/downloads/remark-latest.min.js\">\n<!-- Boilerplate HTML and here -->\n```", "```py\nfrom pathlib import Path\nPRESENTATION = Path(__file__).parent / \"presentation\"\n@app.get(\"/\")\ndef index(_):\n    with open(PRESENTATION / \"index.html\", \"r\") as f:\n        doc = f.read()\n    with open(PRESENTATION / \"slides.md\", \"r\") as f:\n        slides = f.read()\n    return html(doc.replace(\"__SLIDES__\", slides))\n```", "```py\n<p>\n    Hi, my name is <strong>__NAME__</strong>.\n</p>\n<p>\n    I am <em>__AGE__</em> years old.\n</p>\n```", "```py\ndef render(template: str, context: Dict[str, Any]) -> str:\n    ...\n@app.get(\"/hello\")\nasync def hello(request) -> HTTPResponse:\n    return html(\n        render(\"hello.html\", {\"name\": \"Adam\", \"age\": 38})\n    )\n```", "```py\nfrom jinja2 import Template\ntemplate = Template(\"<b>Hello {{name}}</b>\")\n@app.get(\"/<name>\")\nasync def handler(request, name):\n    return html(template.render(name=name))\n```", "```py\n$ curl localhost:7777/Adam\n<b>Hello Adam</b>\n```", "```py\n    <!DOCTYPE html>\n    <html>\n        <head>\n            <title>Adam's Top Songs</title>\n        </head>\n        <body>\n            <h1>Adam's Top Songs</h1>\n            <ul>\n                {% for song in songs %}\n                    <li>{{song}}</li>\n                {% endfor %}\n            </ul>\n        </body>\n    </html>\n    ```", "```py\n    from pathlib import Path\n    from jinja2.loaders import FileSystemLoader\n    from jinja2 import Environment\n    @app.before_server_start\n    def setup_template_env(app, _):\n        app.ctx.env = Environment(\n            loader=FileSystemLoader(Path(__file__).parent / \"templates\"),\n            autoescape=True,\n        )\n    ```", "```py\n    @app.get(\"/\")\n    async def handler(request):\n        template = request.app.ctx.env.get_template(\"index.html\")\n        output = template.render(\n            songs=[\n                \"Stairway to Heaven\",\n                \"Kashmir\",\n                \"All along the Watchtower\",\n                \"Black Hole Sun\",\n                \"Under the Bridge\",\n            ]\n        )\n        return html(output)\n    ```", "```py\n return json(\n        {\n            \"homepage\": request.app.url_for(\n                \"index\",\n                _external=True,\n                _server=\"example.com\",\n            )\n        },\n    )\n```", "```py\n$ curl localhost:7777\n{\"homepage\":\"http:\\/\\/example.com\\/index.html\"}\n```", "```py\ndumps = partial(ujson.dumps, escape_forward_slashes=False)\n@app.get(\"/\")\nasync def handler(request):\n    return json(\n        {\n            \"homepage\": request.app.url_for(\n                \"index\",\n                _external=True,\n                _server=\"example.com\",\n            )\n        },\n        dumps=dumps,\n    )\n```", "```py\n$ curl localhost:7777 \n{\"homepage\":\"http://example.com/index.html\"}\n```", "```py\n$ export SANIC_NO_UJSON=true\n$ pip install --no-binary :all: sanic\n```", "```py\nimport orjson\napp = Sanic(__name__, dumps=orjson.dumps)\n```", "```py\nreturn json(..., dumps=orjson.dumps)\n```", "```py\nSanic(..., dumps=orjson.dumps)\n```", "```py\nclass Thing:\n    ...\ndata = {\"thing\": Thing()}\n```", "```py\nclass Thing:\n    def __json__(self):\n        return json.dumps(\"something\")\nujson.dumps(data)\n```", "```py\ndef default(obj):\n    if hasattr(obj, \"__json__\"):\n        return json.loads(obj.__json__())\n    raise TypeError\norjson.dumps(data, default=default)\n```", "```py\nfrom functools import partial\nodumps = partial(orjson.dumps, default=default)\nodumps(data)\n```", "```py\nclass CustomEncoder(json.JSONEncoder):\n    def default(self, obj):\n        return default(obj)\njson.dumps(data, cls=CustomEncoder)\n```", "```py\n{\n    \"name\": \"Kashmir\",\n    \"song_uid\": \"75b723e3-1132-4f73-931b-78bbaf2a7c04\",\n    \"released\": \"1975-02-24\",\n    \"runtime\": 581\n}\n```", "```py\n{\n    \"songs\": [\n        {...},\n        {...}\n    ]\n}\n```", "```py\n[\n    {...},\n    {...}\n]\n```", "```py\n{\n    \"meta\": {\n        \"search_term\": \"Led Zeppelin\",\n        \"results\": 74,\n        \"limit\": 2,\n        \"offset\": 0\n    },\n    \"songs\": [\n        {...},\n        {...}\n    ]\n}\n```", "```py\n{\n    \"song\": {\n        \"name\": \"Kashmir\",\n        \"song_uid\": \"75b723e3-1132-4f73-931b-78bbaf2a7c04\",\n        \"released\": \"1975-02-24\",\n        \"runtime\": 581\n    }\n}\n```", "```py\n1a\\r\\n\nNow I'm free, free-falling\\r\\n\"\n```", "```py\n0\\r\\n\n\\r\\n\n```", "```py\n@app.get(\"/\")\nasync def handler(request: Request):\n    resp = await request.respond()\n    await resp.send(b\"Now I'm free, free-falling\")\n    await resp.eof()\n```", "```py\n@app.get(\"/\")\nasync def handler(request: Request):\n    resp = await request.respond()\n    for _ in range(4):\n        await resp.send(b\"Now I'm free, free-falling\")\n        await asyncio.sleep(1)\n    await resp.eof()\n```", "```py\nfrom sanic.response import file_stream\n@app.route(\"/herecomesthesun\")\nasync def handler(request):\n    return file_stream(\"/path/to/herecomesthesun.mp4\")\n```", "```py\n<audio controls src=\"http://localhost:7777/herecomesthesun\" />\n```", "```py\nreturn file_stream(\"/path/to/herecomesthesun.mp4\", chunk_size=8192)\n```", "```py\ndata: foo\n```", "```py\ndata: foo\ndata: bar\n```", "```py\napp.static(\"/index.html\", \"./index.html\", name=\"index\")\n@app.route(\"/\")\ndef home(request: Request):\n    return redirect(request.app.url_for(\"index\"))\n```", "```py\n@app.get(\"/sse\")\nasync def simple_sse(request: Request):\n    headers = {\"Cache-Control\": \"no-cache\"}\n    resp = await request.respond(\n        headers=headers,\n        content_type=\"text/event-stream\"\n    )\n    await resp.send(\"data: hello\\n\\n\")\n    await asyncio.sleep(1)\n    await resp.send(\"event: bye\\ndata: goodbye\\n\\n\")\n    await resp.eof()\n```", "```py\nclass BaseField(str):\n    name: str\n    def __str__(self) -> str:\n        return f\"{self.name}: {super().__str__()}\\n\"\nclass Event(BaseField):\n    name = \"event\"\nclass Data(BaseField):\n    name = \"data\"\nclass ID(BaseField):\n    name = \"id\"\nclass Retry(BaseField):\n    name = \"retry\"\nclass Heartbeat(BaseField):\n    name = \"\"\n```", "```py\n>>> print(Event(\"foo\"))\nevent: foo\n```", "```py\ndef message(*fields: BaseField):\n    return \"\".join(map(str, fields)) + \"\\n\"\n```", "```py\n>>> print(f\"{message(Event('foo'), Data('thing'))}\".encode())\nb'event: foo\\ndata: thing\\n\\n'\n```", "```py\n@app.get(\"/sse\")\nasync def simple_sse(request: Request):\n    headers = {\"Cache-Control\": \"no-cache\"}\n    resp = await request.respond(headers=headers, content_type=\"text/event-stream\")\n    await resp.send(message(Data(\"hello!\")))\n    for i in range(4):\n        await resp.send(message(Data(f\"{i=}\")))\n        await asyncio.sleep(1)\n    await resp.send(message(Event(\"bye\"), Data(\"goodbye!\")))\n    await resp.eof()\n```", "```py\n    @app.after_server_start\n    async def setup_notification_queue(app: Sanic, _):\n        app.ctx.notification_queue = asyncio.Queue()\n    ```", "```py\n    class Notifier:\n        def __init__(\n            self,\n            send: Callable[..., Coroutine[None, None, None]],\n            queue: asyncio.Queue,\n        ):\n            self.send = send\n            self.queue = queue\n        async def run(self):\n            await self.send(message(Heartbeat()))\n            while True:\n                fields = await self.queue.get()\n                if fields:\n                    if not isinstance(fields, (list, tuple)):\n                        fields = [fields]\n                    await self.send(message(*fields))\n    ```", "```py\n    @app.get(\"/sse\")\n    async def simple_sse(request: Request):\n        headers = {\"Cache-Control\": \"no-cache\"}\n        resp = await request.respond(\n            headers=headers,\n            content_type=\"text/event-stream\"\n        )\n        notifier = Notifier(resp.send, request.app.ctx.notification_queue)\n        await notifier.run()\n        await resp.eof()\n    ```", "```py\n    @app.post(\"login\")\n    async def login(request: Request):\n        request.app.ctx.notification_queue.put_nowait(\n            [Event(\"login\"), Data(\"So-and-so just logged in\")]\n        )\n        return text(\"Logged in. Imagine we did something here.\")\n    ```", "```py\n    $ curl localhost:7777/login -X POST\n    Logged in. Imagine we did something here.\n    ```", "```py\n    class Client:\n        def __init__(self, send) -> None:\n            self.uid = uuid4()\n            self.send = send\n        def __hash__(self) -> int:\n            return self.uid.int\n    ```", "```py\n    @app.websocket(\"/chat\")\n    async def feed(request, ws):\n        client = Client(ws.send)\n    ```", "```py\n    class ChatRoom:\n        def __init__(self) -> None:\n            self.clients: Set[Client] = set()\n        def enter(self, client: Client):\n            self.clients.add(client)\n        def exit(self, client: Client):\n            self.clients.remove(client)\n        async def push(self, message: str, sender: UUID):\n            recipients = (client for client in self.clients if client.uid != sender)\n            await asyncio.gather(*[client.send(message) for client in recipients])\n    ```", "```py\n    @app.before_server_start\n    async def setup_chatroom(app, _):\n        app.ctx.chatroom = ChatRoom()\n    ```", "```py\n    @app.websocket(\"/chat\")\n    async def feed(request, ws):\n        try:\n            client = Client(ws.send)\n            request.app.ctx.chatroom.enter(client)\n            while True:\n                message = await ws.recv()\n                if not message:\n                    break\n                await request.app.ctx.chatroom.push(message, client.uid)\n        finally:\n            request.app.ctx.chatroom.exit(client)\n    ```", "```py\ntext(\"some message\", headers={\n    \"X-Foobar\": \"Hello\"\n})\n```", "```py\n@app.route(\"/\")\nasync def handler(request):\n    ...\n    return text(\"...\", headers={\"x-request-id\": request.id})\n```", "```py\n@app.get(\"/ilikecookies\")\nasync def cookie_setter(request):\n    resp = text(\"Yum!\")\n    resp.cookies[\"flavor\"] = \"chocolatechip\"\n    return resp\n```", "```py\n$ curl localhost:7777/ilikecookies -i\nHTTP/1.1 200 OK\nSet-Cookie: flavor=chocolatechip; Path=/\ncontent-length: 4\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\nYum!\n```", "```py\n{\n    \"flavor\": \"chocolatechip\"\n}\n```", "```py\nresp.cookies[\"flavor\"] = \"chocolatechip\"\n```", "```py\nresp.cookies[\"session\"] = \"somesessiontoken\"\nresp.cookies[\"session\"][\"max-age\"] = 3600\n```", "```py\nresp.cookies[\"session\"][\"secure\"] = True\nresp.cookies[\"session\"][\"httponly\"] = True\nresp.cookies[\"session\"][\"samesite\"] = \"Strict\"\n```", "```py\nSet-Cookie: flavor=chocolatechip; Path=/\nSet-Cookie: session=somesessiontoken; Path=/; Max-Age=3600; Secure; HttpOnly; SameSite=Strict\n```", "```py\nresp.cookies[\"session\"][\"max-age\"] = 0\n```"]