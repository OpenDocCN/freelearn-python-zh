["```py\n    $ pip install gevent\n```", "```py\n    from gevent.wsgi import WSGIServer\n    from webapp import create_app\n\n    app = create_app('webapp.config.ProdConfig')\n\n    server = WSGIServer(('', 80), app)\n    server.serve_forever()\n```", "```py\n    [program:webapp]\n    command=python gserver.py \n    directory=/home/deploy/webapp\n    user=deploy\n```", "```py\n    from tornado.wsgi import WSGIContainer\n    from tornado.httpserver import HTTPServer\n    from tornado.ioloop import IOLoop\n    from webapp import create_app\n\n    app = WSGIContainer(create_app(\"webapp.config.ProdConfig\"))\n    http_server = HTTPServer(app)\n    http_server.listen(80)\n    IOLoop.instance().start()\n```", "```py\n    [program:webapp]\n    command=python tserver.py \n    directory=/home/deploy/webapp\n    user=deploy\n```", "```py\n    $ pip install uwsgi\n```", "```py\n    $ uwsgi --socket 127.0.0.1:8080 \n    --wsgi-file wsgi.py \n    --callable app \n    --processes 4 \n    --threads 2 \n```", "```py\n    [uwsgi]\n    socket = 127.0.0.1:8080\n    wsgi-file = wsgi.py\n    callable = app\n    processes = 4\n    threads = 2\n\n```", "```py\n    [program:webapp]\n    command=uwsgi uwsgi.ini\n    directory=/home/deploy/webapp\n    user=deploy\n\n```", "```py\nserver { \n    listen 80; \n    server_name your_domain_name; \n\n    location / { \n        include uwsgi_params; \n        uwsgi_pass 127.0.0.1:8080; \n    } \n\n    location /static { \n        alias /home/deploy/webapp/webapp/static; \n    } \n} \n```", "```py\n<VirtualHost *:80> \n    <Location /> \n        ProxyPass / uwsgi://127.0.0.1:8080/ \n    </Location> \n</VirtualHost> \n```", "```py\nweb: uwsgi heroku-uwsgi.ini\n```", "```py\npython-3.7.0\n```", "```py\n    [uwsgi]\n    http-socket = :$(PORT)\n    die-on-term = true\n    wsgi-file = wsgi.py\n    callable = app\n    processes = 4\n    threads = 2\n```", "```py\n$ heroku login\n```", "```py\n$ foreman start web\n```", "```py\n$ heroku create\n$ git push heroku master\n```", "```py\n$ heroku open\n```", "```py\nweb: uwsgi heroku-uwsgi.ini celery: celery worker -A celery_runner\n```", "```py\n$  heroku addons:create cloudamqp:lemur\n```", "```py\n$ pip install awsebcli --upgrade --user\n```", "```py\n$ eb init Enter Application Name\n(default is \"Chapter-13\"): myblog Application myblog has been created.\n\nIt appears you are using Python. Is this correct?\n(Y/n): Y Select a platform version.\n1) Python 3.6\n2) Python 3.4\n3) Python 3.4 (Preconfigured - Docker)\n4) Python 2.7\n5) Python\n(default is 1): 1 Cannot setup CodeCommit because there is no Source Control setup, continuing with initialization\nDo you want to set up SSH for your instances?\n(Y/n): Y Select a keypair.\n1) aws-sshkey\n2) [ Create new KeyPair ]\n(default is 1): 1 \n```", "```py\nimport os\nfrom webapp import create_app\nfrom webapp.cli import register\n\nenv = os.environ.get('WEBAPP_ENV', 'dev')\napplication = create_app('config.%sConfig' % env.capitalize())\nregister(application)\n```", "```py\nfiles:\n   \"/opt/elasticbeanstalk/hooks/appdeploy/post/01_install_flask_youtube.sh\":\n        mode: \"000755\"\n        owner: root\n        group: root\n        content: |\n            #!/usr/bin/env bash\n\n            cd /opt/python/current/app\n            . /opt/python/current/env\n            source /opt/python/run/venv/bin/activate\n            sh install_flask_youtube.sh\n\n    \"/opt/elasticbeanstalk/hooks/appdeploy/post/02_migrate_database.sh\":\n        mode: \"000755\"\n        owner: root\n        group: root\n        content: |\n            #!/usr/bin/env bash\n...\n```", "```py\n$ eb create myblog-dev\n$ # Setup this environment variable\n$ eb setenv WEBAPP_ENV=Dev\n```", "```py\n$ eb open\n```", "```py\n$ eb deploy\n```", "```py\nclass ProdConfig(Config):\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DB_URI', '')\n\n    CELERY_BROKER_URL = os.environ.get('CELERY_BROKER_URL', '')\n    CELERY_RESULT_BACKEND = os.environ.get('CELERY_BROKER_URL', '')\n\n    CACHE_TYPE = 'redis'\n    CACHE_REDIS_HOST = os.environ.get('REDIS_HOST', '')\n    CACHE_REDIS_PORT = '6379'\n    CACHE_REDIS_PASSWORD = ''\n    CACHE_REDIS_DB = '0'\n```", "```py\noption_settings:\n  aws:elasticbeanstalk:application:environment:\n    WEBAPP_ENV: Prod\n    DB_URI: mysql://admin:password@myblog.c4pdwhkmbyqm.eu-central-1.rds.amazonaws.com:3306/myblog\n    CELERY_BROKER_URL: sqs://sqs.us-east-1.amazonaws.com/arn:aws:sqs:eu-central-1:633393569065:myblog-sqs/myblog-sqs\n```", "```py\n$ eb create myblog-prod \n```", "```py\n$ eb setenv CELERY_BROKER_URL=sqs://sqs.us-east-1.amazonaws.com/arn:aws:sqs:us-east-1:<AWS_ACCOUNT_ID>:myblog-sqs/myblog-sqs\n```", "```py\ncommands:\n    celery_start:\n        command: |\n              #!/usr/bin/env bash\n              cd /opt/python/current/app\n              . /opt/python/current/env\n              source /opt/python/run/venv/bin/activate\n              celery multi start worker1 -A celery_runner\n```", "```py\n/\n  deploy/\n  docker/\n    docker-compose.yml -> Compose file\n    ecs-docker-compose.yml -> Specific compose file for AWS ECS\n    Dockerfile_frontend -> Dockerfile for the frontends\n    Dockerfile_worker -> Dockerfile for the workers\n    prod.env -> Production environment variables\n    worker_entrypoing.sh -> entrypoint for the celery worker\n  supervisor_worker.sh -> Supervisor conf file for the celery worker\n  uwsgi.ini -> Conf. file for uWSGI\n```", "```py\nFROM tiangolo/uwsgi-nginx:python3.6\n\n# Create and set directory where the code will live\nRUN mkdir /srv/app\nWORKDIR /srv/app\n\n# Copy our code\nCOPY . .\n# Install all python packages required\nRUN pip install -r requirements.txt\nRUN sh install_flask_youtube.sh\n\n# Setup NGINX and uWSGI\nCOPY ./deploy/uwsgi.ini /etc/uwsgi/uwsgi.ini\nENV NGINX_WORKER_OPEN_FILES 2048\nENV NGINX_WORKER_CONNECTIONS 2048\nENV LISTEN_PORT 80\n\nEXPOSE 80\n```", "```py\nFROM ubuntu\nRUN  apt-get update && \\\n     apt-get install -y supervisor python3-pip python3-dev libmysqlclient-dev mysql-client\nRUN mkdir /srv/app\nWORKDIR /srv/app\nCOPY . .\nRUN pip3 install -r requirements.txt\nRUN sh install_flask_youtube.sh\n\nCOPY ./deploy/supervisor_worker.conf /etc/supervisor/conf.d/celery_worker.conf\nCOPY ./deploy/docker/worker_entrypoint.sh .\nENTRYPOINT [\"sh\", \"./worker_entrypoint.sh\"]\n```", "```py\n$ docker build -f deploy/docker/Dockerfile_frontend -t myblog:latest . \n```", "```py\n$ docker build -f deploy/docker/Dockerfile_worker -t myblog_worker:latest . \n```", "```py\nversion: '3'\nservices:\n  db:\n    image: mysql:5.7\n    env_file:\n      - prod.env\n  rmq:\n    image: rabbitmq:3-management\n    env_file:\n      - prod.env\n    ports:\n      - 15672:15672\n  redis:\n      image: redis\n  worker:\n    image: myblog_worker:latest\n    depends_on:\n      - db\n      - rmq\n    env_file:\n      - prod.env\n  frontend:\n    image: myblog\n    depends_on:\n      - db\n      - rmq\n    env_file:\n      - prod.env\n    restart: always\n    ports:\n      - 80:80\n```", "```py\nWEBAPP_ENV=Prod\nDB_HOST=db\nDB_URI=mysql://myblog:password@db:3306/myblog\nCELERY_BROKER_URL=amqp://rabbitmq:rabbitmq@rmq//\nREDIS_HOST=redis\nMYSQL_ROOT_PASSWORD=rootpassword\nMYSQL_DATABASE=myblog\nMYSQL_USER=myblog\nMYSQL_PASSWORD=password\nRABBITMQ_ERLANG_COOKIE=SWQOKODSQALRPCLNMEQG\nRABBITMQ_DEFAULT_USER=rabbitmq\nRABBITMQ_DEFAULT_PASS=rabbitmq\nRABBITMQ_DEFAULT_VHOST=/\n```", "```py\n$ docker-compose -f deploy/docker/docker-compose.yml up\n```", "```py\nAWSTemplateFormatVersion: \"version date\"\nDescription: \"Some description about the stack\"\nParameters: Input parameters to configure the stack\nMetadata: Aditional data about the template, also useful to group parameters on the UI\nMappings: Data mappings definitions\nConditions: Setup conditions to setup resources or configuration\nTransform: Mainly used for AWS serverless\nResources: Resource definitions, this is the only required section\nOutput: Section to output data, you can use it return the DNS name to access the created application\n\n```", "```py\n...\nParameters:\n  ApplicationName:\n    Description: The application name\n    Type: String\n    Default: ecs001\n  Environment:\n    Description: Application environment that will use the Stack\n    Type: String\n    Default: prod\n    AllowedValues:\n    - dev\n    - stg\n    - prod\n  InstanceType:\n    Description: Which instance type should we use to build the ECS cluster?\n    Type: String\n    Default: t2.medium\n...\n```", "```py\n...\nMappings:\n  AWSRegionToAMI:\n    us-east-2:\n        AMI: ami-b86a5ddd\n    us-east-1:\n        AMI: ami-a7a242da\n    us-west-2:\n        AMI: ami-92e06fea\n...\n```", "```py\n...\nMetadata:\n  AWS::CloudFormation::Interface:\n    ParameterGroups:\n    - Label:\n        default: System Information (Tags)\n      Parameters:\n      - Environment\n      - ApplicationName\n    - Label:\n        default: Networking\n      Parameters:\n      - VPC\n      - Subnets\n...\n```", "```py\nResources:\n...\nDB:\n Type: AWS::RDS::DBInstance\n  Properties:\n    AllocatedStorage: \"30\"\n    DBInstanceClass: \"db.t2.medium\"\n    Engine: \"MariaDB\"\n    EngineVersion: \"10.2.11\"\n    MasterUsername: !Ref DBUsername\n    MasterUserPassword: !Ref DBPassword\n    DBSubnetGroupName: !Ref DBSubnetGroup\n    VPCSecurityGroups:\n      - Ref: DBSecurityGroup\n```", "```py\nECSCluster:\n  Type: \"AWS::ECS::Cluster\"\n  Properties:\n    ClusterName: !Sub ${Environment}-${ApplicationName}\n\nECSAutoScalingGroup:\n  Type: AWS::AutoScaling::AutoScalingGroup\n  Properties:\n...\n\nECSLaunchConfiguration:\n  Type: AWS::AutoScaling::LaunchConfiguration\n  Properties:\n...\n\nECSRole:\n  Type: AWS::IAM::Role\n  Properties:\n...\nECSInstanceProfile:\n  Type: AWS::IAM::InstanceProfile\n  Properties:\n...\nECSServiceRole:\n  Type: AWS::IAM::Role\n  Properties:\n...\n```", "```py\nFrontEndTask:\n  DependsOn: WorkerTask\n  Type: \"AWS::ECS::TaskDefinition\"\n  Properties:\n    ContainerDefinitions:\n      -\n        Name: \"frontend\"\n        Image: !Ref DockerFrontEndImageArn\n        Cpu: \"10\"\n        Memory: \"500\"\n        PortMappings:\n          -\n            ContainerPort: \"80\"\n            HostPort: \"80\"\n        Environment:\n          -\n            Name: \"WEBAPP_ENV\"\n            Value: !Ref Environment\n          -\n            Name: \"CELERY_BROKER_URL\"\n            Value: !Sub \"amqp://${RMQUsername}:${RMQPassword}@${ELBRMQ.DNSName}:5672//\"\n          -\n            Name: \"DB_URI\"\n            Value: !Sub \"mysql://${DBUsername}:${DBPassword}@${DB.Endpoint.Address}:3306/myblog\"\n          -\n            Name: \"REDIS_HOST\"\n            Value: !Sub ${ELBRedis.DNSName}\n```", "```py\n-\n            Name: \"DB_URI\"\n            Value: !Sub \"mysql://${DBUsername}:${DBPassword}@${DB.Endpoint.Address}:3306/myblog\"\n```", "```py\nMyBlogFrontendService:\n  Type: \"AWS::ECS::Service\"\n  Properties:\n    Cluster: !Ref ECSCluster\n    DeploymentConfiguration:\n      MaximumPercent: 200\n      MinimumHealthyPercent: 50\n    DesiredCount: 2\n    TaskDefinition: !Ref FrontEndTask\n    LoadBalancers:\n      -\n        ContainerName: 'frontend'\n        ContainerPort: 80\n        LoadBalancerName: !Ref ELBFrontEnd\n  DependsOn:\n    - ECSServiceRole\n    - FrontEndTask\n```", "```py\nELBFrontEnd:\n  Type: AWS::ElasticLoadBalancing::LoadBalancer\n  Properties:\n    SecurityGroups:\n    - Fn::GetAtt:\n      - ELBFrontEndSecurityGroup\n      - GroupId\n    Subnets:\n      Ref: Subnets\n    Scheme: internet-facing\n    CrossZone: true\n    Listeners:\n    - LoadBalancerPort: '80'\n      InstancePort: '80'\n      Protocol: HTTP\n      InstanceProtocol: HTTP\n    HealthCheck:\n      Target: TCP:80\n      HealthyThreshold: '2'\n      UnhealthyThreshold: '3'\n      Interval: '10'\n      Timeout: '5'\n```", "```py\n...\n<h1><a class=\"text-white\" href=\"{{ url_for('blog.home') }}\">My Blog</a></h1>\n...\n```", "```py\n...\n<h1><a class=\"text-white\" href=\"{{ url_for('blog.home') }}\">My Blog v2</a></h1>\n...\n```", "```py\n$ docker build -f deploy/docker/Dockerfile_frontend -t myblog:v2 .\n```", "```py\n$ ecs-cli push myblog:v2\n```", "```py\nlanguage: python\npython:\n  - \"3.6\"\n  - \"3.3\"\n  - \"2.7\"\ninstall:\n  - \"pip install --upgrade\"\n  - \"pip -V\"\n  - \"pip install -r requirements.txt\"\n  - \"pip install coveralls\"\nscript:\n  - coverage run --source webapp --branch -m unittest discover\nafter_success:\n  coveralls\n```", "```py\nignore-paths:\n  - migrations\n  - deploy\n  - babel\n```", "```py\n\ndocker run \\\n  --rm \\\n  -u root \\\n  -p 8080:8080 \\\n  -v jenkins-data:/var/jenkins_home \\\n  -v /var/run/docker.sock:/var/run/docker.sock \\\n  -v \"$HOME\":/home \\\n  jenkinsci/blueocean\n```", "```py\n...\nINFO: Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@340c828a: defining beans [filter,legacy]; root of factory hierarchy\nSep 16, 2018 11:39:39 AM jenkins.install.SetupWizard init\nINFO:\n\n*************************************************************\n*************************************************************\n*************************************************************\n\nJenkins initial setup is required. An admin user has been created and a password generated.\nPlease use the following password to proceed to installation:\n\n476c3b81f2gf4n30a7f9325568dec9f7\n\nThis may also be found at: /var/jenkins_home/secrets/initialAdminPassword\n\n*************************************************************\n*************************************************************\n*************************************************************\n\n```", "```py\npipeline {\n    agent any\n\n    parameters {\n        string(description: 'Your AWS ECR URL: http://<AWS ACCOUNT NUMBER>.dkr.ecr.<REGION>.amazonaws.com', name: 'ecrURL')\n    }\n\n    environment {\n        CHAPTER = 'Chapter-13'\n        ECRURL = \"${params.ecrURL}\"\n        ECRCRED = 'ecr:eu-central-1:ecr-credentials'\n    }\n...\n```", "```py\n....\nstages {\n    stage('Build') {\n        steps {\n            echo \"Building\"\n            checkout scm\n        }\n    }\n    stage('Style') {\n        agent {\n            docker 'python:3'\n        }\n\n        steps {\n            sh '''\n                #!/bin/bash\n\n                cd \"${CHAPTER}\"\n                python -m pip install -r requirements.txt\n                cd Flask-YouTube\n                python setup.py build\n                python setup.py install\n                cd ..\n                python -m pip install flake8\n                flake8 --max-line-length 120 webapp\n            '''\n        }\n    }\n...\n```", "```py\nstage('Build docker images') {\n    agent any\n    steps {\n        echo 'Creating new images...'\n        script {\n             def frontend = docker.build(\"myblog:${env.BUILD_ID}\", \"-f ${CHAPTER}/deploy/docker/Dockerfile_frontend ${CHAPTER}\")\n             def worker = docker.build(\"myblog_worker:${env.BUILD_ID}\", \"-f ${CHAPTER}/deploy/docker/Dockerfile_worker ${CHAPTER}\")\n        }\n    }\n}\n```", "```py\nstage('Publish Docker Image') {\n    agent any\n    steps {\n        echo 'Publishing new images...'\n        script {\n            docker.withRegistry(ECRURL, ECRCRED)\n            {\n                docker.image(\"myblog:${env.BUILD_ID}\").push()\n                docker.image(\"myblog_worker:${env.BUILD_ID}\").push()\n            }\n        }\n    }\n}\n```"]