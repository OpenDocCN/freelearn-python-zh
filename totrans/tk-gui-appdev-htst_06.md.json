["```py\nmenuitems = ('File- &New/Ctrl+N/self.new_file, &Open/Ctrl+O/self.open_file','Edit- Undo/Ctrl+Z/self.undo, Sep','About- About//self.about')\n```", "```py\nimport Tkinter as tk\nclass GUIFramework(object):\n\tmenuitems = None\n\tdef __init__(self, root):\n\t\tself.root = root\n\t\tif self.menuitems is not None:\n\t\t\tself.build_menu()\n```", "```py\ndef build_menu(self):\n        self.menubar = tk.Menu(self.root)\n        for v in self.menuitems:\n            menu = tk.Menu(self.menubar, tearoff=0)\n            label, items = v.split('-')\n            items = map(str.strip, items.split(','))\n            for item in items:\n                self.__add_menu_command(menu, item)\n            self.menubar.add_cascade(label=label, menu=menu)\n        self.root.config(menu=self.menubar)\n\n    def __add_menu_command(self, menu, item):\n        if item == 'Sep':\n            menu.add_separator()\n        else:\n            name, acc, cmd = item.split('/')\n            try:\n                underline = name.index('&')\n                name = name.replace('&', '', 1)\n            except ValueError:\n                underline = None\n            menu.add_command(label=name, underline=underline,\n                           accelerator=acc, command=eval(cmd))\n```", "```py\nclass TestThisFramework(GUIFramework):\n    menuitems = (\n        'File- &New/Ctrl+N/self.new_file,&Open/Ctrl+O/self.openFile',\n        'Edit- Undo/Ctrl+Z/self.undo, Sep',\n        'About- About//self.about'\n    )    \n    def new_file(self):\n        print 'newfile tested OK'\n    def openFile(self):\n        print 'openfile tested OK'\n    def undo(self):\n        print 'undo tested OK'\n    def about(self):\n        print 'about tested OK'\n\nif __name__ == '__main__':\n\troot= tk.Tk()\n\tapp = TestThisFramework(root)\n\troot.mainloop()\n```", "```py\nimport framework\nclass GUI(framework.GUIFramework):\n```", "```py\ndef create_menu(self):\n\tself.menubar = Menu(self.root)\n\tself.menuitems = (\n\t\t\t\t'File- &New/Ctrl+N/self.new_file,\t\t\t\t\t\t\t\t\t&Open/Ctrl+O/self.open_file, \n\t\t\t\tSave/Ctrl+S/self.save, \n\t\t\t\tSaveAs//self.save_as, \n\t\t\t\tSep, \n\t\t\t\tExit/Alt+F4/self.close', \n\t\t\t\t'Edit- Undo/Ctrl+Z/self.undo, Sep',\n\t\t\t\t'About- About//self.about')\n\tself.build_menu()\n\tself.root.config(menu=self.menubar)\n```", "```py\ndef undo(self, event=None):\n\tself.canvas.delete(self.currentobject)\n```", "```py\ndef actual_save(self):\n\tself.canvas.postscript(file=self.filename, colormode='color')\n\tself.root.title(self.filename)\n```", "```py\ndef create_tool_bar_buttons(self):\n\tfor i in range(8):\n\t\tself.button = Button(self.toolbar, text=i, command=lambda i=i:self.selected_tool_bar_item(i))\n\t\tself.button.grid(row=i/2, column=1+i%2, sticky='nsew')\n```", "```py\ndef selected_tool_bar_item(self, i):\n\tprint'You selected button {}'.format(i)\n```", "```py\n((r,g,b), 'hex color code')\n```", "```py\nfrom tkColorChooser import askcolor\n\tdef create_color_pallete(self):\n\t\tself.colorpallete= Canvas(self.toolbar, height=55, width =55)\n\t\tself.colorpallete.grid(row=10, column=1, columnspan=2, \t\t\t\t\t\t\tpady=5, padx=3)\n\t\tself.backgroundpallete = \t\t\t\t\t\t\t\t\tself.colorpallete.create_rectangle\t(15, \t\t\t\t\t\t15,48,48,tags=\"backgroundpallete\", \t\t\t\t\t\t\toutline=self.background, fill=self.background)\n\t\tself.foregroundpallete = \t\t\t\t\t\t\t\t\tself.colorpallete.create_rectangle(1,1,33,33,tags=\"foregroundpallete\", outline=self.foreground, fill=self.foreground)\n\t\tself.colorpallete.tag_bind(self.backgroundpallete, \n\t\t\t\t\"<Button-1>\", self.set_background_color)\n\t\tself.colorpallete.tag_bind(self.foregroundpallete, \t\t\t\t\t\"<Button-1>\", self.set_foreground_color)\n```", "```py\ndef set_background_color(self, event=None):\n\tself.background = askcolor()[-1]\n\tself.colorpallete.itemconfig(self.backgroundpallete, \t\t\t\t\toutline=self.background, fill=self.background) \n\ndef set_foreground_color(self, event=None):\n\tself.foreground = askcolor()[-1]\n\tself.colorpallete.itemconfig(self.foregroundpallete,outline=self.foreground, fill=self.foreground)\n```", "```py\nself.curcoordlabel = Label(self.toolbar, text='x: 0\\ny:0') self.curcoordlabel.grid(row=13, column=1, columnspan=2, pady=5, \t\t\t\t\t\tpadx=1, sticky='w')\n```", "```py\ncanx = canvas.canvasx(event.x)\ncany = canvas.canvasy(event.y)\n```", "```py\nself.canvas.bind(\"<Button-1>\", self.mouse_down)\nself.canvas.bind(\"<Button1-Motion>\", self.mouse_down_motion)\nself.canvas.bind(\"<Button1-ButtonRelease>\", self.mouse_up)\n```", "```py\ndef mouse_down(self, event):\n\tself.currentobject = None\n\tself.lastx = self.startx = self.canvas.canvasx(event.x)\n\tself.lasty = self.starty = self.canvas.canvasy(event.y)\n```", "```py\ndef mouse_down_motion(self, event):\n\tself.lastx = self.canvas.canvasx(event.x)\n\tself.lasty = self.canvas.canvasy(event.y)\n```", "```py\ndef mouse_up(self, event):\n\tself.lastx = self.canvas.canvasx(event.x)\n\tself.lasty = self.canvas.canvasy(event.y)\n```", "```py\nself.canvas.bind(\"<Motion>\", self.show_current_coordinates)\n\ndef show_current_coordinates(self, event = None):\n\tlx = self.canvas.canvasx(event.x)\n\tly = self.canvas.canvasy(event.y)\n\tcord = 'x: %d \\ny: %d '%(lx, ly)\n\tself.curcoordlabel.config(text = cord)\n```", "```py\ncanvas.bbox(item=itemName)\n```", "```py\nall_toolbar_functions = ('draw_line', 'draw_rectangle', 'draw_oval', 'draw_brush')\n```", "```py\ngetattr(self, self.all_toolbar_functions[index])\n```", "```py\ndef create_tool_bar_buttons(self):\n\tfor i, item in enumerate(self.all_toolbar_functions):\n\t\ttbicon = PhotoImage(file='icons/'+item+'.gif')\n\t\tself.button = Button(self.toolbar, image=tbicon, \t\t\t\t\tcommand=lambda i=i:self.selected_tool_bar_item(i))\n\t\tself.button.grid(row=i/2, column=1+i%2, sticky='nsew')\n\t\tself.button.image = tbicon\n```", "```py\ndef selected_tool_bar_item(self, i):\n\tself.selected_toolbar_func_index = i\n```", "```py\ndef draw_line(self, x, y, x2, y2):\n\tself.currentobject = self.canvas.create_line(x, y, x2, y2, fill= \t\t\t\t\tself.foreground )\n\ndef draw_rectangle(self, x, y, x2, y2):\n\tself.currentobject = self.canvas.create_rectangle(x, y, x2, \t\t\t\t\t\ty2, fill= self.foreground)\ndef draw_oval(self, x, y, x2, y2):\n\tself.currentobject=  self.canvas.create_oval(x, y, x2, \t\t\t\t\t\ty2, fill= self.foreground)\n```", "```py\nmywidget.bind(\"<SomeEvent>\", method1, add=\"+\")\nmywidget.bind(\"<SameEvent>\", method2, add=\"+\")\n```", "```py\ndef draw_brush(self, x, y, x2, y2):\n\tif not self.all_toolbar_functions[ \t\t\t\t\t\t\tself.selected_toolbar_func_index] == 'draw_brush':\n\t\tself.canvas.bind(\"<Button1-Motion>\",\t\t\t\t\t\t\t\tself.mouse_down_motion)\n\t\treturn# if condition to break out of draw_brush loop\n\tself.currentobject = \t\t\t\t\t\t\t\t\tself.canvas.create_line(x,y,x2,y2,fill=self.foreground)\n\nself.canvas.bind(\"<B1-Motion>\", self.draw_brush_update_xy)\n\ndef draw_brush_update_xy(self, event):\n\tself.startx, self.starty = self.lastx, self.lasty\n\tself.lastx, self.lasty = event.x, event.y\n\tself.draw_brush(self.startx, self.starty,self.lastx, self.lasty)\n```", "```py\ndef execute_method():\n\tfnc = getattr(self, self.all_toolbar_functions [self.selected_toolbar_func_index])\n\tfnc(self.startx, self.starty,self.lastx, self.lasty)\n```", "```py\ndef mouse_down_motion(self, event):\n\tself.lastx = self.canvas.canvasx(event.x)\n\tself.lasty = self.canvas.canvasy(event.y)\n\tif self.selected_toolbar_func_index:\n\t\tself.canvas.delete(self.currentobject)\n\t\tself.execute_method()\n\ndef mouse_up(self, event):\n\tself.lastx = self.canvas.canvasx(event.x)\n\tself.lasty = self.canvas.canvasy(event.y)\n\tself.canvas.delete(self.currentobject)\n\tself.currentobject = None\n\tself.execute_method()\n```", "```py\ndef selected_tool_bar_item(self, i):\n\tself.selected_toolbar_func_index = i\n\tself.remove_options_from_topbar()\n\tself.show_selected_tool_icon_in_topbar()\n\ndef remove_options_from_topbar(self):\n\tfor child in self.topbar.winfo_children():\n\t\tchild.destroy()\n\ndef show_selected_tool_icon_in_topbar(self):\n\tLabel(self.topbar,text='Selected Tool:').pack(side=LEFT)\n\tphoto = PhotoImage(file='icons/'+\t\t\t\t\t\t\t\t'self.all_toolbar_functions[self.selected_toolbar_func_index]+'.gif')\n\tlabel = Label(self.topbar, image=photo)\n\tlabel.image = photo\n\tlabel.pack(side=LEFT)\n```", "```py\nimport ttk\n```", "```py\ndef fill_options_combobox(self):\n\tLabel(self.topbar,text='Fill:').pack(side=LEFT)\n\tself.fillcmbobx = ttk.Combobox(self.topbar, \t\t\t\t\t\t\tstate='readonly', width=5)\n\tself.fillcmbobx.pack(side=LEFT)\n\tself.fillcmbobx['values'] = ('none', 'fg', 'bg', 'black', 'white' )\n\tself.fillcmbobx.bind('<<ComboboxSelected>>',\tself.set_fill)\n\tself.fillcmbobx.set(self.fill)\n\ndef set_fill(self, event=None):\n\tfl = self.fillcmbobx.get()\n\tif fl == 'none': self.fill = '' #transparent\n\telif fl == 'fg': self.fill = self.foreground\n\telif fl == 'bg': self.fill = self.background\n\telse: self.fill = fl\n```", "```py\ndef draw_line(self, x, y, x2, y2):\n\tself.currentobject = self.canvas.create_line(x, y, x2, y2,\n\t\tfill= self.fill, arrow=self.arrow, width=self.width, \t\t\t\tdash=self.dash )\n\ndef draw_rectangle(self, x, y, x2, y2):\n\tself.currentobject = self.canvas.create_rectangle(x, y,x2, \t\t\t\ty2, outline=self.outline, fill=self.fill, \t\t\t\t\t\twidth=self.width)\n\ndef draw_oval(self, x, y, x2, y2):\n\tself.currentobject=  self.canvas.create_oval(x, y, x2, \t\t\t\ty2, outline=self.outline, fill=self.fill, \t\t\t\t\t\twidth=self.width)\n\ndef draw_brush(self, x, y, x2, y2):\n\tif not self.all_toolbar_functions[self.selected_toolbar_func_index]=='draw_brush':\n\t\tself.canvas.bind(\"<Button1-Motion>\", \t\t\t\t\t\tself.mouse_down_motion)\n\t\treturn\n\tself.currentobject = self.canvas.create_line(x,y,x2,y2,\t\t\t\tfill=self.fill, width=self.width)\n\nself.canvas.bind(\"<B1-Motion>\", self.draw_brush_update_xy)\n```", "```py\ndef draw_line_options(self):\n\tself.fill_options_combobox()\n\tself.width_options_combobox()\n\tself.arrow_options_combobox()\n\tself.dash_options_combobox()\n\ndef draw_rectangle_options(self):\n\tself.fill_options_combobox()\n\tself.outline_options_combobox()\n\tself.width_options_combobox()\n\ndef draw_oval_options(self):\n\tself.fill_options_combobox()\n\tself.outline_options_combobox()\n\tself.width_options_combobox()\n\ndef draw_brush_options(self):\n\tself.fill_options_combobox()\n\tself.width_options_combobox()\n```", "```py\ndef selected_tool_bar_item(self, i):\n\tself.selected_toolbar_func_index = i\n\tself.remove_options_from_topbar()\n\tself.show_selected_tool_icon_in_topbar()\n\topt = self.all_toolbar_functions[ self.selected_toolbar_func_index] +'_options'\n\tfnc = getattr(self, opt)\n\tfnc()\n```", "```py\nall_toolbar_functions = ('draw_line', 'draw_rectangle', 'draw_oval', 'draw_brush', 'delete_object', 'fill_object', 'move_to_top', 'drag_item')\n```", "```py\ndef mouse_down(self, event):\n\tself.currentobject = None\n\tself.lastx = self.startx = self.canvas.canvasx(event.x)\n\tself.lasty = self.starty = self.canvas.canvasy(event.y)\n\tif self.all_toolbar_functions[\t\t\t\t\t\t\t\t\t\tself.selected_toolbar_func_index] \n\tin ['fill_object',\t'delete_object', 'move_to_top', drag_item']:            \t\t\n\t\ttry:\n\t\t\tself.selected_object = \t\t\t\t\t\t\t\t\tself.canvas.find_closest(self.startx, self.starty)[0]\n\t\texcept:\n\t\t\tself.selected_object = self.canvas\n```", "```py\ndef delete_object(self, x0, y0, x1, y1):\n\tself.canvas.delete(self.selected_object)\n```", "```py\ndef delete_object_options(self):\n\tpass\n```", "```py\ndef fill_object(self,x0,y0,x1,y1):\n\tif self.selected_object == self.canvas:\n\t\tself.canvas.config(bg=self.fill)\n\telse:\n\t\tself.canvas.itemconfig(self.selected_object, fill=self.fill)\n```", "```py\ndef fill_object_options(self):\n\tself.fill_options_combobox()\n```", "```py\ndef move_to_top(self,x0,y0,x1,y1):\n\tself.canvas.tag_raise(self.selected_object)\ndef move_to_top_options(self):\n\tpass # no items to display on the top bar\n```", "```py\ndef drag_item(self,x0,y0,x1,y1):\n\tif not self.all_toolbar_functions[ \t\t\t\t\t\t\tself.selected_toolbar_func_index] == 'drag_item':\n\t\tself.canvas.bind(\"<Button1-Motion>\",\t\t\t\t\t\t\t\t\tself.mouse_down_motion)\n\t\treturn # break out of loop\n\tself.currentobject = self.canvas.move(\t\t\t\t\t\t\t\t\tself.selected_object, x1-x0, y1-\ty0)\n\tself.canvas.bind(\"<B1-Motion>\", self.drag_item_update_xy)\n\ndef drag_item_update_xy(self, event):\n\tself.startx, self.starty = self.lastx, self.lasty\n\tself.lastx, self.lasty = event.x, event.y\n\tself.drag_item(self.startx, self.starty,self.lastx, \t\t\t\t\tself.lasty)\n\ndef drag_item_options(self):\n\tpass # we want no options to be displayed at the top\n```", "```py\nmy_item_identifier = self.canvas.create_oval(x, y, x2, y2)\n```", "```py\nrectid = canvas.create_rectangle(10, 10, 50, 50, tags=\"myshiny\")\ncanvas.itemconfig(rectid, tags=\"shiv\")\ncanvas.addtag_withtag(\"shiv\", \"takeonemore\")\n```", "```py\ncanvas.itemconfig(rectid, tags=(\"tagA\", \"tagB\"))\n```", "```py\nprintcanvas.gettags(rectid)\n```", "```py\n(\"myshiny\", \"shiv\", \"takeonemore\", \"tagA\", \"tagB\")\n```", "```py\nprint canvas.find_withtag(\"shiv\")\n```"]