["```py\n(bots)chetans-MacBookPro:ch09 Chetan$ pip install python-telegram-bot --upgrade \n\nCollecting python-telegram-bot \n  Downloading python_telegram_bot-5.1.0-py2.py3-none-any.whl (134kB) \n    100% |████████████████████████████████| 135kB 681kB/s  \nCollecting certifi (from python-telegram-bot) \n  Downloading certifi-2016.8.31-py2.py3-none-any.whl (379kB) \n    100% |████████████████████████████████| 380kB 612kB/s  \nCollecting future>=0.15.2 (from python-telegram-bot) \n  Downloading future-0.15.2.tar.gz (1.6MB) \n    100% |████████████████████████████████| 1.6MB 251kB/s  \nCollecting urllib3>=1.10 (from python-telegram-bot) \n  Downloading urllib3-1.17-py2.py3-none-any.whl (101kB) \n    100% |████████████████████████████████| 102kB 1.2MB/s  \nBuilding wheels for collected packages: future \n  Running setup.py bdist_wheel for future \n  Stored in directory: /Users/chetan/Library/Caches/pip/wheels/11/c5/d2/ad287de27d0f0d646f119dcffb921f4e63df128f28ab0a1bda \nSuccessfully built future \nInstalling collected packages: certifi, future, urllib3, python-telegram-bot \nSuccessfully installed certifi-2016.8.31 future-0.15.2 python-telegram-bot-5.1.0 urllib3-1.17\n\n```", "```py\n(bots)chetans-MacBookPro:ch09 Chetan$ pip install emoji --upgrade \n\nCollecting emoji \n  Downloading emoji-0.3.9.tar.gz \nBuilding wheels for collected packages: emoji \n  Running setup.py bdist_wheel for emoji \n  Stored in directory: /Users/chetan/Library/Caches/pip/wheels/94/fc/67/441fb0ca2ed262d6db44d9ac2dfc953e421f57730004dff44d \nSuccessfully built emoji \nInstalling collected packages: emoji \nSuccessfully installed emoji-0.3.9\n\n```", "```py\n            import logging \n            from telegram import InlineKeyboardButton, \n              InlineKeyboardMarkup \n            from telegram.ext import Updater,  \n              CommandHandler, CallbackQueryHandler \n            import emoji \n\n            logging.basicConfig(format='%(asctime)s  \n              - %(name)s - %(levelname)s - %(message)s', \n            level=logging.INFO) \n\n            def start(bot, update): \n                keyboard = [ \n                    [InlineKeyboardButton(\"Happy\", callback_data='1'), \n                    InlineKeyboardButton(\"Whatever\", callback_data='2')], \n                    [InlineKeyboardButton(\"Sad\", callback_data='3')]] \n\n                reply_markup = InlineKeyboardMarkup(keyboard) \n\n                update.message.reply_text('Hey there!  \n                  How do you feel today?', reply_markup=reply_markup) \n\n            def button(bot, update): \n                query = update.callback_query \n            if query.data == \"1\": \n                    em = emoji.emojize(':smile:', use_aliases=True) \n                    bot.editMessageText(text=\"Oh wow! %s \" % em, \n            chat_id=query.message.chat_id, \n            message_id=query.message.message_id) \n\n            if query.data == \"2\": \n                    em = emoji.emojize(':expressionless:', use_aliases=True) \n                    bot.editMessageText(text=\"Does it matter? %s \" % em, \n            chat_id=query.message.chat_id, \n            message_id=query.message.message_id) \n\n            if query.data == \"3\": \n                em = emoji.emojize(':disappointed:', use_aliases=True) \n                bot.editMessageText(text=\"Oh man! %s \" % em, \n            chat_id=query.message.chat_id, \n            message_id=query.message.message_id) \n\n            def help(bot, update): \n                update.message.reply_text(\"Use /start to test this bot.\") \n\n            def error(bot, update, error): \n                logging.warning('Update \"%s\" caused error \"%s\"' % (update,\n                error)) \n\n            # Create the Updater and pass it your bot's token. \n            updater = Updater('Token') \n\n            updater.dispatcher.add_handler( \n              CommandHandler('start', start)) \n            updater.dispatcher.add_handler( \n              CallbackQueryHandler(button)) \n            updater.dispatcher.add_handler( \n              CommandHandler('help', help)) \n            updater.dispatcher.add_error_handler(error) \n\n            # Start the Bot \n            updater.start_polling() \n\n            # Run the bot until the user presses Ctrl-C  \n              or the process receives SIGINT, \n            # SIGTERM or SIGABRT \n            updater.idle() \n\n    ```", "```py\n    python bot.py\n\n    ```", "```py\nchetans-MacBookPro:ch09 Chetan$ source bots/bin/activate \n(bots)chetans-MacBookPro:ch09 Chetan$  \n(bots)chetans-MacBookPro:ch09 Chetan$ pip install aiml \n\nCollecting aiml \nInstalling collected packages: aiml \nSuccessfully installed aiml-0.8.6\n\n```", "```py\n            <aiml version=\"1.0.1\" encoding=\"UTF-8\"> \n            <!-chat.aiml à \n\n              <category> \n                <pattern>HELLO</pattern> \n                <template> \n                    Hi, hello! \n                </template> \n              </category> \n\n              <category> \n                <pattern>WHO ARE *</pattern> \n                <template> \n                  <random> \n                    <li>I'm a bot!</li> \n                    <li>Bad guy!</li> \n                    <li>My name is superman!</li> \n                  </random> \n                </template> \n              </category> \n\n              <category> \n                <pattern>AWESOME *</pattern> \n                <template> \n                    You're nice too! J \n                </template> \n              </category> \n\n            </aiml> \n\n    ```", "```py\n            <aiml version=\"1.0.1\" encoding=\"UTF-8\">\n                <!-- init.xml -->\n\n                <!-- Category is an atomic AIML unit -->\n                <category>\n\n                    <!-- Pattern to match in user input -->\n                    <!-- If user enters \"LOAD AIML B\" -->\n                    <pattern>LOAD AIML B</pattern>\n\n                    <!-- Template is the response to the pattern -->\n                    <!-- This learn an aiml file -->\n                    <template>\n                        <learn>chat.aiml</learn>\n                        <!-- You can add more aiml files here -->\n                        <!--<learn>more_aiml.aiml</learn>-->\n                    </template>\n\n                </category>\n\n            </aiml> \n\n    ```", "```py\n            import aiml \n\n            # Create the kernel and learn AIML files \n            kernel = aiml.Kernel() \n            kernel.learn(\"init.xml\") \n            kernel.respond(\"load aiml b\") \n\n            # Press CTRL-C to break this loop \n            while True: \n                print kernel.respond(raw_input(\"Enter your message >>\")) \n\n    ```", "```py\n(bots)chetans-MacBookPro:ch09 Chetan$ pip install flask \n\nCollecting flask \n  Using cached Flask-0.11.1-py2.py3-none-any.whl \nCollecting click>=2.0 (from flask) \nCollecting itsdangerous>=0.21 (from flask) \nCollecting Werkzeug>=0.7 (from flask) \n  Downloading Werkzeug-0.11.11-py2.py3-none-any.whl (306kB) \n    100% |████████████████████████████████| 307kB 1.4MB/s  \nCollecting Jinja2>=2.4 (from flask) \n  Using cached Jinja2-2.8-py2.py3-none-any.whl \nCollecting MarkupSafe (from Jinja2>=2.4->flask) \nInstalling collected packages: click, itsdangerous, Werkzeug, MarkupSafe, Jinja2, flask \nSuccessfully installed Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.11 click-6.6 flask-0.11.1 itsdangerous-0.24 \n\n(bots)chetans-MacBookPro:ch09 Chetan$ pip install requests \n\nCollecting requests \n  Using cached requests-2.11.1-py2.py3-none-any.whl \nInstalling collected packages: requests \nSuccessfully installed requests-2.11.1\n\n```", "```py\n            from flask import Flask \n            from flask import request \n            import sys, requests, json, os \n\n            app = Flask(__name__) \n\n            @app.route(\"/bot/\", methods=['GET', 'POST']) \n            def hello(): \n            if request.method == 'GET': \n            return request.args.get('hub.challenge') \n\n    ```", "```py\n     /Users/chetan/book/ch09/bots/bin/python  \n            /Users/chetan/book/ch09/bookbot.py \n             * Running on http://127.0.0.1:5000/ \n              (Press CTRL+C to quit) \n\n            127.0.0.1 - - [01/Oct/2016 10:17:43] \"GET  \n            /bot/?hub.mode=subscribe&hub \n            .challenge=1742124657&hub.verify_token= \n            token HTTP/1.1\" 200 -\n\n    ```", "```py\n            from flask import Flask \n            from flask import request \n            import requests, json\n\n            app = Flask(__name__) \n\n            def send_weburl(payload, recipient_id): \n                headers = { \n                   \"Content-Type\": \"application/json\" \n                } \n                token = { \n                   \"access_token\": \n                   \"TOKEN\" \n                 } \n\n            if payload == 'Python': \n              data = json.dumps({ \n                \"recipient\": { \n                  \"id\": recipient_id \n                }, \n                \"message\":{ \n                  \"attachment\":{ \n                    \"type\":\"template\", \n                    \"payload\":{ \n                      \"template_type\":\"generic\", \n                      \"elements\":[ \n                      { \n                        \"title\":\"Learn Python Design Patterns: Chetan\n                        Giridhar\", \n                        \"item_url\":\"https://www.amazon.com/Learning-Python-\n                        Design-Patterns-Second/dp/178588803X\", \n                        \"image_url\":\"https://images-na.ssl-images-\n                        amazon.com/images/I/51bNOsKpItL._SX404_BO1,\n                        204,203,200_.jpg\", \n                        \"subtitle\":\"Python Book for software architects and\n                        developers\", \n                        \"buttons\":[ \n                        { \n                          \"type\":\"web_url\", \n                          \"url\":\"https://www.amazon.com/Learning-Python-\n                          Design-Patterns-Second/dp/178588803X\", \n                          \"title\":\"Buy\", \n                          \"webview_height_ratio\":\"full\" \n                        } \n                        ] \n                      } \n                      ] \n                  } \n                } \n                } \n              }) \n\n            if payload == 'Java': \n              data = json.dumps({ \n                \"recipient\": { \n                  \"id\": recipient_id \n                }, \n                \"message\":{ \n                  \"attachment\":{ \n                  \"type\":\"template\", \n                  \"payload\":{ \n                    \"template_type\":\"generic\", \n                    \"elements\":[ \n                    { \n                      \"title\":\"RESTful Java Patterns and Best \n                      Practices: Bhakti Mehta\", \n                      \"item_url\":\"https://www.amazon.com/RESTful-Java-\n                      Patterns-Best-Practices/dp/1783287969\", \n                      \"image_url\":\"https://images-na.ssl-images-\n                      amazon.com/images/I/51YnSP6uqeL._SX403_BO1,\n                      204,203,200_.jpg\", \n                      \"subtitle\":\"Python Book for software architects and \n                      developers\", \n                      \"buttons\":[ \n                        { \n                          \"type\":\"web_url\", \n                          \"url\":\"https://www.amazon.com/RESTful-Java-\n                          Patterns-Best-Practices/dp/1783287969\", \n                          \"title\":\"Buy\", \n                          \"webview_height_ratio\":\"full\" \n                        } \n                      ] \n                    } \n                    ] \n                  } \n                  } \n                } \n              }) \n\n            r = requests.post(\"https://graph.facebook.com/v2.6/me/messages\", \n            params=token, headers=headers, data=data) \n\n            def send_postback(recipient_id): \n              headers = { \n                \"Content-Type\": \"application/json\" \n              } \n              token = { \n                \"access_token\": \n                  \"TOKEN\" \n              } \n\n            data = json.dumps({ \n              \"recipient\": { \n                \"id\": recipient_id \n              }, \n              \"message\": { \n                \"attachment\": { \n                  \"type\": \"template\", \n                  \"payload\": { \n                    \"template_type\": \"button\", \n                    \"text\": \"Hey there, Welcome to MyBooks.  \n                    What are you interested in?\", \n                    \"buttons\": [ \n                    { \n                      \"type\":\"postback\", \n                      \"title\":\"Java\", \n                      \"payload\":\"Java\" \n                    }, \n                    { \n                      \"type\":\"postback\", \n                      \"title\":\"Python\", \n                      \"payload\":\"Python\" \n                    } \n                    ] \n                  } \n                } \n              } \n            }) \n\n            r = requests.post(\"https://graph.facebook.com/v2.6/me/messages\", \n            params=token, headers=headers, data=data) \n\n            @app.route(\"/bot/\", methods=['GET', 'POST']) \n            def hello(): \n              print request.data \n            if request.method == 'GET': \n              return request.args.get('hub.challenge') \n\n            data = request.get_json() \n            if data[\"object\"] == \"page\": \n              for entry in data[\"entry\"]: \n                for messaging_event in entry[\"messaging\"]: \n                  if messaging_event.get(\"postback\"): \n                    sender_id = messaging_event[\"sender\"][\"id\"] \n                    payload = messaging_event[\"postback\"][\"payload\"] \n                    send_weburl(payload, sender_id) \n\n                  if messaging_event.get(\"message\"):  # readers send us a\n                  message \n                    sender_id = messaging_event[\"sender\"][\"id\"] \n                    send_postback(sender_id) \n\n                    return \"ok\", 200 \n\n                   if __name__ == \"__main__\": \n                     app.run() \n\n    ```"]