- en: Chapter 15
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第15章
- en: Making Questions
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 提出问题
- en: 15.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.1 简介
- en: All you have learned so far is the sequence control structure, where statements
    are executed sequentially, in the same order in which they appear in the program.
    However, in serious Python programming, rarely do you want the statements to be
    executed sequentially. Many times you want a block of statements to be executed
    in one situation and an entirely different block of statements to be executed
    in another situation.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你已经学到了顺序控制结构，其中语句是按顺序执行的，与它们在程序中出现的顺序相同。然而，在严肃的Python编程中，很少希望语句按顺序执行。很多时候，你希望在一情况下执行一组语句，而在另一情况下执行完全不同的语句块。
- en: 15.2 What is a Boolean Expression?
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.2 什么是布尔表达式？
- en: Let's say that variable x contains a value of 5\. This means that if you ask
    the question “is x greater than 2?” the answer is obviously “Yes”. For a computer,
    these questions are called Boolean expressions. For example, if you write x >
    2, this is a Boolean expression, and the computer must check whether or not the
    expression x > 2 is True or False.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 假设变量x包含值为5。这意味着如果你问“x是否大于2？”答案显然是“是”。对于计算机来说，这些问题被称为布尔表达式。例如，如果你写x > 2，这是一个布尔表达式，计算机必须检查表达式x
    > 2是否为True或False。
- en: '![](img/notice.jpg)A Boolean expression is an expression that results in a
    Boolean value, that is, either True or False.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)布尔表达式是一个结果为布尔值（即True或False）的表达式。'
- en: '![](img/notice.jpg)Boolean expressions are questions and they should be read
    as “Is something equal to/greater than/less than something else?” and the answer
    is just a “Yes” or a “No” (True or False).'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)布尔表达式是问题，应该读作“某物是否等于/大于/小于另一物？”答案只是一个“是”或“否”（True或False）。'
- en: '![](img/remember.jpg)A decision control structure can evaluate a Boolean expression
    or a set of Boolean expressions and then decide which block of statements to execute.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '![记住](img/remember.jpg)决策控制结构可以评估布尔表达式或一组布尔表达式，然后决定执行哪个语句块。'
- en: 15.3 How to Write Simple Boolean Expressions
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.3 如何编写简单的布尔表达式
- en: A simple Boolean expression is written as
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的布尔表达式写法如下
- en: Operand1  Comparison_Operator  Operand2
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 操作数1  比较运算符  操作数2
- en: where
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►Operand1 and Operand2 can be values, variables or mathematical expressions
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: ►操作数1和操作数2可以是值、变量或数学表达式
- en: ►Comparison_Operator can be one of those shown in Table 15-1.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: ►比较运算符可以是表15-1中显示的其中之一。
- en: '| Comparison Operator | Description |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| 比较运算符 | 描述 |'
- en: '| == | Equal (not assignment) |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| == | 等于（非赋值）|'
- en: '| != | Not equal |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| != | 不等于 |'
- en: '| > | Greater than |'
  id: totrans-18
  prefs: []
  type: TYPE_TB
  zh: '| > | 大于 |'
- en: '| < | Less than |'
  id: totrans-19
  prefs: []
  type: TYPE_TB
  zh: '| < | 小于 |'
- en: '| >= | Greater than or equal to |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| >= | 大于或等于 |'
- en: '| <= | Less than or equal to |'
  id: totrans-21
  prefs: []
  type: TYPE_TB
  zh: '| <= | 小于或等于 |'
- en: Table 15-1 Comparison Operators in Python
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 表15-1 Python中的比较运算符
- en: 'Here are some examples of Boolean expressions:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些布尔表达式的例子：
- en: ►x > y. This Boolean expression is a question to the computer and can be read
    as “is x greater than y?”
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: ►x > y。这个布尔表达式是对计算机的一个问题，可以读作“x是否大于y？”
- en: ►x <= y. This Boolean expression is also a question to the computer and can
    be read as “is x less than or equal to y?”
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ►x <= y。这个布尔表达式也是对计算机的一个问题，可以读作“x是否小于或等于y？”
- en: ►x != 3 * y + 4\. This can be read as “is x not equal to the result of the expression
    3 * y + 4?”
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ►x != 3 * y + 4。这可以读作“x是否不等于表达式3 * y + 4的结果？”
- en: ►s == "Hello". This can be read as “is s equal to the word 'Hello'?” In other
    words, this question can be read as “does s contain the word 'Hello'?”
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: ►s == "Hello"。这可以读作“s是否等于单词'Hello'？”换句话说，这个问题可以读作“s是否包含单词'Hello'？”
- en: ►x == 5 . This can be read as “is x equal to 5?”
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: ►x == 5。这可以读作“x是否等于5？”
- en: '![](img/notice.jpg)A very common mistake that novice programmers make when
    writing Python programs is to confuse the value assignment operator with the equal
    operator. They frequently make the mistake of writing x = 5 when they actually
    want to say x == 5.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)新手程序员在编写Python程序时经常犯的一个非常常见的错误是将值赋值运算符与等于运算符混淆。他们经常犯的错误是在实际上想表达x
    == 5时写成x = 5。'
- en: Exercise 15.3-1 Filling in the Table
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习15.3-1 填写表格
- en: Fill in the following table with the words “True” or “False” according to the
    values of the variables a, b, and c.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 根据变量a、b和c的值，用“True”或“False”填写以下表格。
- en: '| a | b | c | a == 10 | b <= a | c > 3 * a − b |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| a | b | c | a == 10 | b <= a | c > 3 * a − b |'
- en: '| 3 | −5 | 7 |   |   |   |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 3 | −5 | 7 |   |   |   |'
- en: '| 10 | 10 | 21 |   |   |   |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 10 | 21 |   |   |   |'
- en: '| −4 | −2 | −9 |   |   |   |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| −4 | −2 | −9 |   |   |   |'
- en: Solution
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The first two Boolean expressions are straightforward and need no further explanation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个布尔表达式很简单，不需要进一步解释。
- en: Regarding the Boolean expression c > 3 * a − b, be careful with the cases where
    b is negative. For example, in the first line, a is equal to 3 and b is equal
    to −5\. The result of the expression 3 * a - b is 3 * 3 − (−5) = 3 * 3 + 5 = 14\.
    Since the content of variable c (in the first line ) is not greater than 14, the
    result of the Boolean expression c > 3 * a − b is False.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 关于布尔表达式c > 3 * a − b，请注意b为负数的情况。例如，在第一行中，a等于3，b等于−5。表达式3 * a - b的结果是3 * 3 −
    (−5) = 3 * 3 + 5 = 14。由于变量c（在第一行中的）的内容不大于14，布尔表达式c > 3 * a − b的结果是False。
- en: After a little work , the table becomes
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 经过一点工作，表格变为
- en: '| a | b | c | a == 10 | b <= a | c > 3 * a − b |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| a | b | c | a == 10 | b <= a | c > 3 * a − b |'
- en: '| 3 | −5 | 7 | False | True | False |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| 3 | −5 | 7 | False | True | False |'
- en: '| 10 | 10 | 21 | True | True | True |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 10 | 21 | True | True | True |'
- en: '| −4 | −2 | −9 | False | False | True |'
  id: totrans-43
  prefs: []
  type: TYPE_TB
  zh: '| −4 | −2 | −9 | False | False | True |'
- en: 15.4 Logical Operators and Complex Boolean Expressions
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.4 逻辑运算符和复杂布尔表达式
- en: A complex Boolean expression can be built of simpler Boolean expressions and
    can be written as
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 一个复杂布尔表达式可以由更简单的布尔表达式组成，可以写成
- en: BE1 Logical_Operator BE2
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: BE1 Logical_Operator BE2
- en: where
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: where
- en: ►BE1 and BE2 can be any Boolean expression.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: ►BE1和BE2可以是任何布尔表达式。
- en: ►Logical_Operator can be one of those shown in Table 15-2.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: ►逻辑运算符可以是表15-2中显示的其中之一。
- en: '| Logical Operator | Description |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑运算符 | 描述 |'
- en: '| and | Also known as logical conjunction |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| and | 也称为逻辑合取 |'
- en: '| or | Also known as logical disjunction |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| or | 也称为逻辑析取 |'
- en: '| not | Also known as negation or logical complement |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| not | 也称为否定或逻辑补码 |'
- en: Table 15-2 Logical Operators in Python
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 表15-2 Python中的逻辑运算符
- en: '![](img/notice.jpg)When you combine simple Boolean expressions with logical
    operators, the whole Boolean expression is called a “complex Boolean expression”.
    For example, the expression x == 3 and y > 5 is a complex Boolean expression.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)当你将简单的布尔表达式与逻辑运算符结合时，整个布尔表达式称为“复杂布尔表达式”。例如，表达式x == 3 and
    y > 5是一个复杂布尔表达式。'
- en: The and operator
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: and运算符
- en: When you use the and operator between two Boolean expressions (BE1 and BE2),
    it means that the result of the whole complex Boolean expression is True only
    when both (BE1 and BE2 ) Boolean expressions are True.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在两个布尔表达式（BE1和BE2）之间使用and运算符时，这意味着整个复杂布尔表达式的结果是True，只有当两个布尔表达式（BE1和BE2）都是True时。
- en: You can organize this information in something known as a truth table. A truth
    table shows the result of a logical operation between two or more Boolean expressions
    for all their possible combinations of values. The truth table for the and operator
    is shown here.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将这些信息组织成一种称为真值表的东西。真值表显示了两个或多个布尔表达式之间逻辑运算的结果，以及它们所有可能值的组合。and运算符的真值表如下所示。
- en: '| BE1 (Boolean Expression 1) | BE2 (Boolean Expression 2) | BE1 and BE2 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| BE1（布尔表达式1） | BE2（布尔表达式2） | BE1 and BE2 |'
- en: '| False | False | False |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| False | False | False |'
- en: '| False | True | False |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| False | True | False |'
- en: '| True | False | False |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| True | False | False |'
- en: '| True | True | True |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| True | True | True |'
- en: Are you still confused? You shouldn't be! It is quite simple! Let's see an example.
    The complex Boolean expression
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你还感到困惑吗？你不应该感到困惑！这很简单！让我们看看一个例子。复杂布尔表达式
- en: name == "John" and age > 5
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: name == "John" and age > 5
- en: is True only when the variable name contains the word “John” (without the double
    quotes) and variable age contains a value greater than 5\. Both Boolean expressions
    must be True. If at least one of them is False, for example, the variable age
    contains a value of 3, then the whole complex Boolean expression is False.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 只有当变量name包含单词“John”（不带双引号）且变量age包含一个大于5的值时，结果才是True。两个布尔表达式都必须为True。如果至少有一个为False，例如，变量age包含一个值为3，那么整个复杂布尔表达式就是False。
- en: The or operator
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: or运算符
- en: When you use the or operator between two Boolean expressions (BE1 or BE2), it
    means that the result of the whole complex Boolean expression is True when either
    the first (BE1) or the second (BE2) Boolean expression is True (at least one).
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在两个布尔表达式（BE1或BE2）之间使用or运算符时，这意味着整个复杂布尔表达式的结果是True，当第一个（BE1）或第二个（BE2）布尔表达式为True（至少一个）时。
- en: The truth table for the or operator is shown here.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: or运算符的真值表如下所示。
- en: '| BE1 (Boolean Expression 1) | BE2 (Boolean Expression 2) | BE1 or BE2 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| BE1（布尔表达式1） | BE2（布尔表达式2） | BE1 or BE2 |'
- en: '| False | False | False |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| False | False | False |'
- en: '| False | True | True |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
  zh: '| False | True | True |'
- en: '| True | False | True |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
  zh: '| True | False | True |'
- en: '| True | True | True |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| True | True | True |'
- en: Let's see an example. The complex Boolean expression
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个例子。复杂布尔表达式
- en: name == "John" or name == "George"
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: name == "John" 或 name == "George"
- en: is True when the variable name contains the word “John” or the word “George”
    (without the double quotes). At least one Boolean expression must be True. If
    both Boolean expressions are False, for example, the variable name contains the
    word “Maria”, then the whole complex Boolean expression is False.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当变量名包含单词“John”或单词“George”（不带引号）时为真。至少有一个布尔表达式必须为真。如果两个布尔表达式都为假，例如，变量名包含单词“Maria”，那么整个复杂布尔表达式为假。
- en: The not operator
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 非运算符
- en: When you use the not operator in front of a Boolean expression (not BE), it
    means that the result of the whole complex Boolean expression is True when the
    Boolean expression BE is False and vice versa.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在布尔表达式（BE）前使用非运算符（not BE）时，意味着当布尔表达式 BE 为假时，整个复杂布尔表达式的结果是真，反之亦然。
- en: The truth table for the not operator is shown here.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 非运算符的真值表如下所示。
- en: '| BE (Boolean Expression) | not BE |'
  id: totrans-81
  prefs: []
  type: TYPE_TB
  zh: '| BE (布尔表达式) | not BE |'
- en: '| False | True |'
  id: totrans-82
  prefs: []
  type: TYPE_TB
  zh: '| False | True |'
- en: '| True | False |'
  id: totrans-83
  prefs: []
  type: TYPE_TB
  zh: '| True | False |'
- en: For example, the complex Boolean expression
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，复杂布尔表达式
- en: not age > 5
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: not age > 5
- en: is True when the variable age contains a value less than or equal to 5\. For
    instance, if the variable age contains a value of 6, then the whole complex Boolean
    expression is False.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当变量 age 包含的值小于或等于 5 时为真。例如，如果变量 age 包含的值为 6，那么整个复杂布尔表达式为假。
- en: '![](img/notice.jpg)The logical operator not reverses the result of a Boolean
    expression.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)逻辑运算符非（not）会反转布尔表达式的结果。'
- en: Exercise 15.4-1 Calculating the Results of Complex Boolean Expressions
  id: totrans-88
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 15.4-1 计算复杂布尔表达式的结果
- en: Calculate the results of the following complex Boolean expressions when variables
    a, b, c, and d contain the values 5, 2, 7, and −3 respectively.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当变量 a、b、c 和 d 分别包含值 5、2、7 和 -3 时，计算以下复杂布尔表达式的结果。
- en: i)(3 * a + b / 47 - c * b / a > 23) and (b != 2)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: i)(3 * a + b / 47 - c * b / a > 23) 且 (b != 2)
- en: ii)(a * b - c / 2 + 21 * c / 3) or (a >= 5)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ii)(a * b - c / 2 + 21 * c / 3) 或 (a >= 5)
- en: Solution
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Don't be scared! The results can be found very easily. All you need is to recall
    what applies to and and or operators.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 别害怕！结果很容易找到。你只需要回忆一下与和或运算符相关的规则。
- en: i)The result of an and operator is True when both Boolean expressions are True.
    If you take a closer look, the result of the Boolean expression on the right (b
    != 2) is False. So, you don't have to waste your time calculating the result of
    the Boolean expression on the left. The final result is definitely False.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: i)当两个布尔表达式都为真时，与运算符的结果为真。如果你仔细观察，右边的布尔表达式（b != 2）的结果是假的。所以，你不必浪费时间计算左边布尔表达式的结果。最终结果一定是假的。
- en: ii)The result of an or operator is True when at least one Boolean expression
    is True. If you take a closer look, the result of the Boolean expression on the
    right (a >= 5) is actually True. So, don't bother calculating the result of the
    Boolean expression on the left. The final result is definitely True.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ii)当至少有一个布尔表达式为真时，或运算符的结果为真。如果你仔细观察，右边的布尔表达式（a >= 5）的结果实际上是真。所以，不必计算左边布尔表达式的结果。最终结果一定是真的。
- en: 15.5 Python's Membership Operators
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.5 Python 的成员运算符
- en: In Python, a membership operator evaluates whether or not an operand exists
    in a specified sequence. There are two membership operators, as shown in Table
    15-3.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，成员运算符用于判断操作数是否存在于指定的序列中。有两个成员运算符，如表 15-3 所示。
- en: '| Membership Operator | Description |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| 成员运算符 | 描述 |'
- en: '| in | It evaluates to True if it finds a value in the specified sequence;
    it evaluates to False otherwise. |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| in | 如果在指定的序列中找到值，则返回真；否则返回假。|'
- en: '| not in | It evaluates to True if it does not find a value in the specified
    sequence; it evaluates to False otherwise. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| not in | 如果在指定的序列中找不到值，则返回真；否则返回假。|'
- en: Table 15-3 Membership Operators in Python
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15-3 Python 中的成员运算符
- en: Next are some examples of Boolean expressions that use membership operators.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是一些使用成员运算符的布尔表达式的例子。
- en: ►x in [3, 5, 9]. This can be read as “is x equal to 3, or equal to 5, or equal
    to 9?”
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ►x 在 [3, 5, 9] 范围内。这可以读作“x 是否等于 3，或者等于 5，或者等于 9？”
- en: It can also be written as
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以写成
- en: x == 3 or x == 5 or x == 9
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: x == 3 或 x == 5 或 x == 9
- en: ►3 in [x, y, z]. This can be read as “is 3 equal to x, or equal to y, or equal
    to z?”
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ►3 在 [x, y, z] 范围内。这可以读作“3 是否等于 x，或者等于 y，或者等于 z？”
- en: It can also be written as
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以写成
- en: 3 == x or 3 == y or 3 == z
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 3 == x 或 3 == y 或 3 == z
- en: ►s in "ace". This can be read as 'does the content of variable s appear in the
    word “ace”' or in other words, 'is s equal to letter “a”, or equal to letter “c”,
    or equal to letter “e”, or equal to word “ac”, or equal to word “ce”, or equal
    to word “ace”?'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: ►s 在 "ace" 中。这可以读作 '变量 s 的内容是否出现在单词 “ace” 中'，或者换句话说，'s 是否等于字母 “a”，或等于字母 “c”，或等于字母
    “e”，或等于单词 “ac”，或等于单词 “ce”，或等于单词 “ace”？'
- en: It can be written equivalently as
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以写成等价的形式
- en: s == "a" or s == "c" or s == "e" or s == "ac" or s == "ce" or s == "ace"
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: s == "a" or s == "c" or s == "e" or s == "ac" or s == "ce" or s == "ace"
- en: '![](img/notice.jpg)The Boolean expression s in "ace" checks if the string s
    can be found as a consecutive sequence of characters within the string "ace".
    In other words, it looks for s as a continuous substring in "ace". This is why
    it does not check for the substring "ae"; because the letters “a” and “e” are
    not continuous.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)布尔表达式 s 在 "ace" 中检查字符串 s 是否可以作为连续字符序列在字符串 "ace" 中找到。换句话说，它将
    s 作为 "ace" 中的连续子串来查找。这就是为什么它不会检查子串 "ae"；因为字母 “a” 和 “e” 不是连续的。'
- en: ►s in ["a", "c", "e"]. This can be read as 'is s equal to letter “a”, or equal
    to letter “c” , or equal to letter “e”?'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ►s 在 ["a", "c", "e"] 中。这可以读作 's 是否等于字母 “a”，或等于字母 “c”，或等于字母 “e”？'
- en: It can also be written as
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以写成
- en: s == "a" or s == "c" or s == "e"
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: s == "a" or s == "c" or s == "e"
- en: ►s not in ["a", "c", "e"]. This can be read as 'is s not equal to letter “a”,
    nor equal to letter “c”, nor equal to letter “e”?'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ►s 不在 ["a", "c", "e"] 中。这可以读作 's 是否不等于字母 “a”，也不等于字母 “c”，也不等于字母 “e”？'
- en: It can also be written as
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 它也可以写成
- en: not(s == "a" or s == "c" or s == "e")
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: not(s == "a" or s == "c" or s == "e")
- en: or as
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 或者作为
- en: s != "a" and s != "c" and s != "e"
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: s != "a" and s != "c" and s != "e"
- en: 15.6 Assigning the Result of a Boolean Expression to a Variable
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.6 将布尔表达式的结果赋给变量
- en: Given that a Boolean expression actually returns a value (True or False), this
    value can be directly assigned to a variable. For example, the statement
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 由于布尔表达式实际上返回一个值（True 或 False），这个值可以直接赋给一个变量。例如，以下语句
- en: a = x > y
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: a = x > y
- en: assigns a value of True or False to Boolean variable a. It can be read as “If
    the content of variable x is greater than the content of variable y, assign the
    value True to variable a; otherwise, assign the value False”. This next example
    displays the value True on the screen.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 将 True 或 False 的值赋给布尔变量 a。它可以读作“如果变量 x 的内容大于变量 y 的内容，将 True 赋值给变量 a；否则，将 False
    赋值”。下一个示例将在屏幕上显示 True 值。
- en: '![](img/my_exercise_header.png) file_15.6'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_15.6'
- en: x, y = 8, 5
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: x, y = 8, 5
- en: a = x > y
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: a = x > y
- en: print(a)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: 15.7 What is the Order of Precedence of Logical Operators?
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.7 逻辑运算符的优先级顺序是什么？
- en: A more complex Boolean expression may use several logical operators like the
    expression shown here
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更复杂的布尔表达式可能使用多个逻辑运算符，如这里所示的表达式
- en: name == "Peter" or age > 10 and not name == "Maria"
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: name == "Peter" or age > 10 and not name == "Maria"
- en: So, a reasonable question is “which logical operation is performed first?”
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，一个合理的问题是“哪种逻辑运算首先执行？”
- en: 'Logical operators in Python follow the same precedence rules that apply to
    the majority of programming languages. The order of precedence is: logical complements
    (not) are performed first, logical conjunctions (and) are performed next, and
    logical disjunctions (or) are performed at the end.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的逻辑运算符遵循大多数编程语言中适用的相同优先级规则。优先级顺序是：首先执行逻辑补码（not），然后执行逻辑合取（and），最后执行逻辑析取（or）。
- en: '| Higher Precedence ![Image](img/arrow_up.jpg)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '| 高优先级 ![Image](img/arrow_up.jpg)'
- en: Lower Precedence | Logical Operator |
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 低优先级 | 逻辑运算符 |
- en: '| not |'
  id: totrans-136
  prefs: []
  type: TYPE_TB
  zh: '| 非 |'
- en: '| and |'
  id: totrans-137
  prefs: []
  type: TYPE_TB
  zh: '| 和 |'
- en: '| or |'
  id: totrans-138
  prefs: []
  type: TYPE_TB
  zh: '| 或 |'
- en: Table 15-4 The Order of Precedence of Logical Operators
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15-4 逻辑运算符的优先级顺序
- en: '![](img/notice.jpg)You can always use parentheses to change the default precedence.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)你可以始终使用括号来改变默认的优先级。'
- en: Exercise 15.7-1 Filling in the Truth Table
  id: totrans-141
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 15.7-1 填写真值表
- en: Fill in the following table with the words “True” or “False” according to the
    values of the variables a, b and c.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 根据变量 a、b 和 c 的值，在下面的表格中填写“True”或“False”。
- en: '| a | b | c | a > 2 or c > b and c > 2 | not(a > 2 or c > b and c > 2) |'
  id: totrans-143
  prefs: []
  type: TYPE_TB
  zh: '| a | b | c | a > 2 or c > b and c > 2 | not(a > 2 or c > b and c > 2) |'
- en: '| 1 | −5 | 7 |   |   |'
  id: totrans-144
  prefs: []
  type: TYPE_TB
  zh: '| 1 | −5 | 7 |   |   |'
- en: '| 10 | 10 | 3 |   |   |'
  id: totrans-145
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 10 | 3 |   |   |'
- en: '| −4 | −2 | −9 |   |   |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
  zh: '| −4 | −2 | −9 |   |   |'
- en: Solution
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: To calculate the result of complex Boolean expressions you can use the following
    graphical method.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要计算复杂布尔表达式的结果，你可以使用以下图形方法。
- en: For a = 1, b = −5, c = 7, the final result is True as shown here.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 a = 1，b = −5，c = 7，最终结果如这里所示为 True。
- en: '![Image](img/chapter15-01.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter15-01.png)'
- en: '![](img/remember.jpg)The and operation has a higher precedence and is performed
    before the or operation.'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)与操作具有更高的优先级，并且在与操作之前执行。'
- en: For a = 10, b = 10, c = 3, the final result is True as shown here.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 对于a = 10, b = 10, c = 3，最终结果为True，如下所示。
- en: '![Image](img/chapter15-02.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter15-02.png)'
- en: For a = −4, b = −2, c = −9, the final result is False as shown here.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于a = −4, b = −2, c = −9，最终结果为False，如下所示。
- en: '![Image](img/chapter15-03.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter15-03.png)'
- en: The values in the table's fifth column can be calculated very easily because
    the Boolean expression in its column heading is almost identical to the one in
    the fourth column. The only difference is the not operator in front of the expression.
    So, the values in the fifth column can be calculated by simply negating the results
    in the fourth column!
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 表格第五列的值可以非常容易地计算出来，因为其列标题中的布尔表达式几乎与第四列中的相同。唯一的区别是表达式前面的not运算符。因此，第五列的值可以通过简单地否定第四列的结果来计算！
- en: The final truth table is shown here.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的真值表如下所示。
- en: '| a | b | c | a > 2 or c > b and c > 2 | not(a > 2 or c > b and c > 2) |'
  id: totrans-158
  prefs: []
  type: TYPE_TB
  zh: '| a | b | c | a > 2 或 c > b 且 c > 2 | not(a > 2 或 c > b 且 c > 2) |'
- en: '| 1 | −5 | 7 | True | False |'
  id: totrans-159
  prefs: []
  type: TYPE_TB
  zh: '| 1 | −5 | 7 | True | False |'
- en: '| 10 | 10 | 3 | True | False |'
  id: totrans-160
  prefs: []
  type: TYPE_TB
  zh: '| 10 | 10 | 3 | True | False |'
- en: '| −4 | −2 | −9 | False | True |'
  id: totrans-161
  prefs: []
  type: TYPE_TB
  zh: '| −4 | −2 | −9 | False | True |'
- en: Exercise 15.7-2 Converting English Sentences to Boolean Expressions
  id: totrans-162
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习15.7-2 将英语句子转换为布尔表达式
- en: A head teacher asks the students to raise their hands according to their age.
    He wants to find the students who are
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 一位班主任要求学生根据他们的年龄举手。他想找到那些
- en: i)between the ages of 9 and 12.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: i) 9至12岁之间。
- en: ii)under the age of 8 and over the age of 11.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 8岁以下且11岁以上。
- en: iii)8, 10, and 12 years old.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: iii) 8岁、10岁和12岁。
- en: iv)between the ages of 6 and 8, and between the ages of 10 and 12.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: iv) 6至8岁之间，以及10至12岁之间。
- en: v)neither 10 nor 12 years old.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: v) 既不是10岁也不是12岁。
- en: Solution
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: To compose the required Boolean expressions, a variable age is used.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写所需的布尔表达式，使用了一个变量age。
- en: i)The sentence “between the ages of 9 and 12” can be graphically represented
    as shown here.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: i) 句子“9至12岁之间”可以如图所示图形化表示。
- en: '![Image](img/chapter15-04.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter15-04.png)'
- en: Be careful though! It is valid to write 9 ≤ age ≤ 12 in mathematics, as well
    as in Python where you can write it as
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 但是要注意！在数学中以及在Python中，可以写成9 ≤ age ≤ 12是有效的
- en: 9 <= age <= 12
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 9 <= age <= 12
- en: In most computer languages, however, this is not a valid Boolean expression.
    What you can do is to split the expression into two parts, as shown here
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在大多数计算机语言中，这并不是一个有效的布尔表达式。你可以做的是将表达式分成两部分，如下所示
- en: age >= 9 and age <= 12
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: age >= 9 and age <= 12
- en: This last expression is valid in most computer languages, including Python!
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这个最后的表达式在大多数计算机语言中都是有效的，包括Python！
- en: '![](img/notice.jpg)For your confirmation, you can test this Boolean expression
    for several values inside and outside of the “region of interest” (the range of
    data that you have specified). For example, the result of the expression is False
    for the age values 7, 8, 13, and 17\. On the contrary, for the age values 9, 10,
    11, and 12, the result is True.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)为了确认，你可以在“感兴趣区域”内和区域外（你指定的数据范围）测试这个布尔表达式。例如，对于年龄值7、8、13和17，表达式的结果是False。相反，对于年龄值9、10、11和12，结果是True。'
- en: ii)The sentence “under the age of 8 and over the age of 11” can be graphically
    represented as shown here.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 句子“8岁以下且11岁以上”可以如图所示图形化表示。
- en: '![Image](img/chapter15-05.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter15-05.png)'
- en: '![](img/notice.jpg)Note the absence of the two circles that you saw in solution
    (i). This means the values 8 and 11 are not included within the two regions of
    interest.'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意与解决方案(i)中看到的两个圆圈不同。这意味着8和11这两个值不包括在感兴趣的区域内。'
- en: Be careful with the sentence “Under the age of 8 and over the age of 11”. It's
    a trap! Don't make the mistake of writing
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意句子“8岁以下且11岁以上”。这是一个陷阱！不要犯下写
- en: age < 8 and age > 11
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: age < 8 and age > 11
- en: There is no person on the planet Earth that can be under the age of 8 and over
    the age of 11 concurrently!
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 地球上没有一个人可以同时8岁以下且11岁以上！
- en: The trap is in the word “and”. Try to rephrase the sentence and make it “Children!
    Please raise your hand if you are under the age of 8 or over the age of 11”. Now
    it's better and the correct Boolean expression becomes
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 陷阱在于单词“和”。尝试重新措辞句子，使其变为“孩子们！如果你8岁以下或11岁以上，请举手”。现在它更好，正确的布尔表达式变为
- en: age < 8 or age > 11
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: age < 8 or age > 11
- en: '![](img/notice.jpg)For your confirmation, you can test this expression for
    several values inside and outside of the regions of interest. For example, the
    result of the expression is False for the age values 8, 9, 10 and 11\. On the
    contrary, for the age values 6, 7, 12, and 15, the result is True.'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)为了确认，您可以在感兴趣区域内部和外部测试这个表达式。例如，对于年龄值为 8、9、10 和 11 的表达式结果是
    False。相反，对于年龄值为 6、7、12 和 15 的表达式结果是 True。'
- en: In Python, however, don't make the mistake of writing
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，然而，不要犯这样的错误
- en: 8 > age > 11
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 8 > age > 11
- en: because, if you split the expression into two parts, it is equivalent to
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 因为，如果你将表达式分成两部分，它等同于
- en: age < 8 and age > 11
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: age < 8 and age > 11
- en: which, as already mentioned, is incorrect!
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这，正如已经提到的，是错误的！
- en: iii)Oops! Another trap in the sentence “8, 10, and 12 years old” with the “and”
    word again! Obviously, the next Boolean expression is wrong.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: iii)哎呀！在句子“8, 10, 和 12 岁”中，再次出现了“和”这个词！显然，下一个布尔表达式是错误的。
- en: age == 8 and age == 10 and age == 12
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: age == 8 and age == 10 and age == 12
- en: As before, there isn't any student who is 8 and 10 and 12 years old concurrently!
    Once again, the correct Boolean expression must use the or operator.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，没有学生同时是 8、10 和 12 岁！再次强调，正确的布尔表达式必须使用或运算符。
- en: age == 8 or age == 10 or age == 12
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: age == 8 or age == 10 or age == 12
- en: '![](img/notice.jpg)For your confirmation, you can test this expression for
    several values. For example, the result of the expression is False for the age
    values 7, 9, 11, and 13\. For the age values 8, 10, and 12, the result is True.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)为了确认，您可以测试这个表达式的几个值。例如，对于年龄值为 7、9、11 和 13 的表达式结果是 False。对于年龄值为
    8、10 和 12 的表达式结果是 True。'
- en: In Python, this complex Boolean expression can also be written as
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，这个复杂的布尔表达式也可以写成
- en: age in [8, 10, 12]
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: age in [8, 10, 12]
- en: iv)The sentence “between the ages of 6 and 8, and between the ages of 10 and
    12” can be graphically represented as shown here.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: iv)句子“在 6 到 8 岁之间，以及在 10 到 12 岁之间”可以如图所示图形化表示。
- en: '![Image](img/chapter15-06.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter15-06.png)'
- en: and the Boolean expression is
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 布尔表达式是
- en: age >= 6 and age <= 8 or age >= 10 and age <= 12
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: age >= 6 and age <= 8 or age >= 10 and age <= 12
- en: '![](img/notice.jpg)For your confirmation, the result of the expression is False
    for the age values 5, 9, 13, and 16\. For the age values 6, 7, 8, 10, 11, and
    12, the result is True.'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)为了确认，对于年龄值为 5、9、13 和 16 的表达式结果是 False。对于年龄值为 6、7、8、10、11
    和 12 的表达式结果是 True。'
- en: In Python, this complex Boolean expression can also be written as
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，这个复杂的布尔表达式也可以写成
- en: 6 <= age <= 8 or 10 <= age <= 12
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 6 <= age <= 8 or 10 <= age <= 12
- en: v)The Boolean expression for the sentence “neither 10 nor 12 years old” can
    be written as
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: v)句子“既不是 10 岁也不是 12 岁”的布尔表达式可以写成
- en: age != 10 and age != 12
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: age != 10 and age != 12
- en: or as
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 或者也可以写成
- en: not(age == 10 or age == 12)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: not(age == 10 or age == 12)
- en: In Python, this complex Boolean expression can also be written as
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，这个复杂的布尔表达式也可以写成
- en: age not in [10, 12]
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: age not in [10, 12]
- en: '![](img/notice.jpg)When the arrows of the region of interest point towards
    each other, use the logical operator and. Otherwise, use or when the arrows point
    in opposite directions.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)当感兴趣区域的箭头指向彼此时，使用逻辑运算符和。否则，当箭头指向相反方向时，使用或。'
- en: '![Image](img/chapter15-07.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![图像](img/chapter15-07.png)'
- en: 15.8 What is the Order of Precedence of Arithmetic, Comparison, Membership,
    and Logical Operators?
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.8 算术、比较、成员和逻辑运算符的优先级顺序是什么？
- en: In many cases, an expression may contain different type of operators, such as
    the one shown here.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，一个表达式可能包含不同类型的运算符，如这里所示。
- en: a * b + 2 > 21 or not(c == b / 2) and c > 13
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: a * b + 2 > 21 or not(c == b / 2) and c > 13
- en: In such cases, arithmetic operations are performed first, comparison and membership
    operations are performed next, and logical operations are performed at the end,
    as shown in the following table.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，首先执行算术运算，然后执行比较和成员运算，最后执行逻辑运算，如下表所示。
- en: '| Higher Precedence ![Image](img/arrow_up.jpg)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '| 高优先级 ![图像](img/arrow_up.jpg)'
- en: Lower Precedence | Arithmetic Operators | ** |
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 低优先级 | 算术运算符 | ** |
- en: '| *, /, //, % |'
  id: totrans-221
  prefs: []
  type: TYPE_TB
  zh: '| *, /, //, % |'
- en: '| +, − |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
  zh: '| +, − |'
- en: '| Comparison and Membership Operators | <, <=, >, >=, ==, !=, in, not in |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
  zh: '| 比较和成员运算符 | <, <=, >, >=, ==, !=, in, not in |'
- en: '| Logical Operators | not |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
  zh: '| 逻辑运算符 | 非 |'
- en: '| and |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
  zh: '| 和 |'
- en: '| or |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
  zh: '| 或 |'
- en: Table 15-5 The Order of Precedence of Arithmetic, Comparison, Membership, and
    Logical Operators
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 表 15-5 算术、比较、成员和逻辑运算符的优先级顺序
- en: 15.9 How to Negate Boolean Expressions
  id: totrans-228
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.9 如何否定布尔表达式
- en: Negation is the process of reversing the meaning of a Boolean expression. There
    are two approaches used to negate a Boolean expression.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 否定是将布尔表达式的意义反转的过程。否定布尔表达式有两种方法。
- en: First approach
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: The first approach is the easiest one. Just use a not operator in front of the
    original Boolean expression and your negated Boolean expression is ready! For
    example, if the original Boolean expression is
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是最简单的一种。只需在原始布尔表达式前加上not运算符，你的否定布尔表达式就准备好了！例如，如果原始布尔表达式是
- en: x > 5 and y == 3
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: x > 5 且 y == 3
- en: the negated Boolean expression becomes
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 否定后的布尔表达式变为
- en: not(x > 5 and y == 3)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: not(x > 5 and y == 3)
- en: '![](img/notice.jpg)Note that the entire expression must be enclosed in parentheses.
    It would be completely incorrect if you had written the expression without parentheses,
    as not x > 5 and y == 3\. In this case the not operator would negate only the
    first Boolean expression, x > 5.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)注意，整个表达式必须用括号括起来。如果你没有括号就写下这个表达式，那就完全错误了，就像not x > 5 and
    y == 3这样的写法。在这种情况下，not运算符只会否定第一个布尔表达式，x > 5。'
- en: Second approach
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: The second approach is a little bit more complex but not difficult to learn.
    All you must do is negate every operator according to the following table.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法稍微复杂一些，但并不难学。你只需要根据以下表格对每个算子进行否定。
- en: '| Original Operator | Negated Operator |'
  id: totrans-238
  prefs: []
  type: TYPE_TB
  zh: '| 原始运算符 | 否定运算符 |'
- en: '| == | != |'
  id: totrans-239
  prefs: []
  type: TYPE_TB
  zh: '| == | != |'
- en: '| != | == |'
  id: totrans-240
  prefs: []
  type: TYPE_TB
  zh: '| != | == |'
- en: '| > | <= |'
  id: totrans-241
  prefs: []
  type: TYPE_TB
  zh: '| > | <= |'
- en: '| < | >= |'
  id: totrans-242
  prefs: []
  type: TYPE_TB
  zh: '| < | >= |'
- en: '| <= | > |'
  id: totrans-243
  prefs: []
  type: TYPE_TB
  zh: '| <= | > |'
- en: '| >= | < |'
  id: totrans-244
  prefs: []
  type: TYPE_TB
  zh: '| >= | < |'
- en: '| in | not in |'
  id: totrans-245
  prefs: []
  type: TYPE_TB
  zh: '| in | not in |'
- en: '| not in | in |'
  id: totrans-246
  prefs: []
  type: TYPE_TB
  zh: '| not in | in |'
- en: '| and | or |'
  id: totrans-247
  prefs: []
  type: TYPE_TB
  zh: '| and | or |'
- en: '| or | and |'
  id: totrans-248
  prefs: []
  type: TYPE_TB
  zh: '| or | and |'
- en: '| not | not |'
  id: totrans-249
  prefs: []
  type: TYPE_TB
  zh: '| not | not |'
- en: '![](img/notice.jpg)Note that the not operator remains intact.'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)注意，not运算符保持不变。'
- en: For example, if the original Boolean expression is
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果原始布尔表达式是
- en: x > 5 and y == 3
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: x > 5 且 y == 3
- en: the negated Boolean expression becomes
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 否定后的布尔表达式变为
- en: x <= 5 or y != 3
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: x <= 5 或 y != 3
- en: However, there is a small detail that you should be careful with. If both and
    and or operators co-exist in a complex Boolean expression, then the expressions
    that use the or operators in the negated Boolean expression must be enclosed in
    parentheses, in order to preserve the initial order of precedence. For example,
    if the original Boolean expression is
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一个小细节需要注意。如果一个复杂的布尔表达式中同时存在and和or运算符，那么在否定布尔表达式中使用or运算符的表达式必须用括号括起来，以保持初始的优先级顺序。例如，如果原始布尔表达式是
- en: x >= 5 and x <= 10 or y == 3
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: x >= 5 且 x <= 10 或 y == 3
- en: the negated Boolean expression must be
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 否定后的布尔表达式必须是
- en: (x < 5 or x > 10) and y != 3
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: (x < 5 或 x > 10) 且 y != 3
- en: '![](img/notice.jpg)If you forget to enclose the expression x < 5 or x > 10
    in parentheses, since the and operator has a higher precedence than the or operator,
    the expression x > 10 and y != 3 is evaluated first, which is wrong of course!'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)如果你忘记将表达式x < 5 或 x > 10用括号括起来，因为and运算符的优先级高于or运算符，所以表达式x
    > 10 and y != 3会被首先评估，这当然是错误的！'
- en: Exercise 15.9-1 Negating Boolean Expressions
  id: totrans-260
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 15.9-1 否定布尔表达式
- en: Negate the following Boolean expressions using both approaches.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 使用两种方法否定以下布尔表达式。
- en: i)b != 4
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: i)b != 4
- en: ii)a * 3 + 2 > 0
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: ii)a * 3 + 2 > 0
- en: iii)not(a == 5 and b >= 7)
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: iii)not(a == 5 and b >= 7)
- en: iv)a == True
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: iv)a == True
- en: v)b > 7 and not(x > 4)
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: v)b > 7 且 not(x > 4)
- en: vi)a == 4 or b != 2
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: vi)a == 4 或 b != 2
- en: Solution
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: First approach
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: i)not(b != 4)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: i)not(b != 4)
- en: ii)not(a * 3 + 2 > 0)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: ii)not(a * 3 + 2 > 0)
- en: iii)not(not(a == 5 and b >= 7)), or the equivalent a == 5 and b >= 7
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: iii)not(not(a == 5 and b >= 7))，或等价的表达式 a == 5 and b >= 7
- en: '![](img/notice.jpg)Two negations result in an affirmative. That is, two not
    operators in a row negate each other.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)两次否定结果为肯定。也就是说，连续两个not算子会相互抵消。'
- en: iv)not(a == True)
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: iv)not(a == True)
- en: v)not(b > 7 and not(x > 4))
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: v)not(b > 7 and not(x > 4))
- en: vi)not(a == 4 or b != 2)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: vi)not(a == 4 或 b != 2)
- en: Second approach
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: i)b == 4
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: i)b == 4
- en: ii)a * 3 + 2 <= 0
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: ii)a * 3 + 2 <= 0
- en: '![](img/notice.jpg)Note that arithmetic operators are not “negated”. Never
    substitute, for example, the plus ( + ) with a minus ( − ) operator!'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)注意，算术运算符不会被“否定”。永远不要用减号(−)替换加号(+)等运算符！'
- en: iii)not(a != 5 or b < 7)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: iii)not(a != 5 or b < 7)
- en: '![](img/notice.jpg)Note that the not operator remains intact.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)注意，not运算符保持不变。'
- en: iv)a != True
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: iv)a != True
- en: v)b <= 7 or not(x <= 4)
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: v)b <= 7 或 not(x <= 4)
- en: vi)a != 4 and b == 2
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: vi)a != 4 且 b == 2
- en: '15.10 Review Questions: True/False'
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.10 复习问题：判断对错
- en: Choose true or false for each of the following statements.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确或错误。
- en: 1)A Boolean expression is an expression that always results in one of two values.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 1)布尔表达式是一个总是产生两个值之一的表达式。
- en: 2)A Boolean expression includes at least one logical operator.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 2)布尔表达式至少包含一个逻辑运算符。
- en: 3)In Python, the expression x = 5 tests if the variable x is equal to 5.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 3)在 Python 中，表达式 x = 5 检查变量 x 是否等于 5。
- en: 4)The statement a = b == c is not a valid Python statement.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 4)语句 a = b == c 不是一个有效的 Python 语句。
- en: 5)The Boolean expression b < 5 tests if the variable b is 5 or less.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 5)布尔表达式 b < 5 检查变量 b 是否小于或等于 5。
- en: 6)The and operator is also known as a logical disjunction operator.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 6)与运算符也称为逻辑析取运算符。
- en: 7)The or operator is also known as a logical complement operator.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 7)或运算符也称为逻辑补运算符。
- en: 8)The result of a logical conjunction of two Boolean expressions equals the
    result of the logical disjunction of them, given that both Boolean expressions
    are True.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 8)如果两个布尔表达式都为 True，则两个布尔表达式的逻辑合取等于它们的逻辑析取的结果。
- en: 9)The result of a logical disjunction of two Boolean expressions is definitely
    True, given that the Boolean expressions have different values.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 9)如果两个布尔表达式具有不同的值，则两个布尔表达式的逻辑析取的结果一定是 True。
- en: 10)The expression c == 3 and d > 7 is considered a complex Boolean expression.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 10)表达式 c == 3 and d > 7 被认为是复杂的布尔表达式。
- en: 11)The result of the logical operator or is True when both operands (Boolean
    expressions) are True.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 11)当两个操作数（布尔表达式）都为 True 时，逻辑运算符或的结果为 True。
- en: 12)The result of the Boolean expression not(x == 5) is True when the variable
    x contains any value except 5.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 12)当变量 x 包含除 5 以外的任何值时，布尔表达式 not(x == 5) 的结果为 True。
- en: 13)The not operator has the highest precedence among logical operators.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 13)非运算符在逻辑运算符中优先级最高。
- en: 14)The or operator has the lowest precedence among logical operators.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 14)或运算符在逻辑运算符中优先级最低。
- en: 15)In the Boolean expression (x > y or x == 5) and x <= z, the and operation
    is performed before the or operation.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 15)在布尔表达式 (x > y or x == 5) and x <= z 中，与运算先于或运算执行。
- en: 16)In the Boolean expression a * b + c > 21 or c == b / 2, the program first
    tests if c is greater than 21.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 16)在布尔表达式 a * b + c > 21 or c == b / 2 中，程序首先检查 c 是否大于 21。
- en: 17)When a teacher wants to find the students who are under the age of 8 and
    over the age of 11, the corresponding Boolean expression is 8 > age > 11.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 17)当老师想要找到年龄在 8 岁以下且超过 11 岁的学生时，相应的布尔表达式是 8 > age > 11。
- en: 18)The Boolean expression x < 0 and x > 100 is, for any value of x, always False.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 18)对于任何 x 的值，布尔表达式 x < 0 and x > 100 总是 False。
- en: 19)The Boolean expression x > 0 or x < 100 is, for any value of x, always True.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 19)对于任何 x 的值，布尔表达式 x > 0 or x < 100 总是 True。
- en: 20)The Boolean expression x > 5 is equivalent to not(x < 5).
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 20)布尔表达式 x > 5 等价于 not(x < 5)。
- en: 21)The Boolean expression not(x > 5 and y == 5) is not equivalent to not(x >
    5) and y == 5.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 21)布尔表达式 not(x > 5 and y == 5) 不等价于 not(x > 5) and y == 5。
- en: '22)In William Shakespeare^([[13]](footnotes.html#Endnote_13))''s Hamlet (Act
    3, Scene 1), the main character says “To be, or not to be: that is the question:….
    ” If you write this down as a Boolean expression toBe or not toBe, the result
    of this “Shakesboolean” expression is True for the following code fragment.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 22)在威廉·莎士比亚^([[13]](footnotes.html#Endnote_13))的《哈姆雷特》（第三幕，第一场）中，主要角色说“生存，还是毁灭：这是一个问题：……”。如果你将其写成布尔表达式
    toBe or not toBe，这个“Shakesboolean”表达式的结果在以下代码片段中为 True。
- en: toBe = 1 > 0
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: toBe = 1 > 0
- en: thatIsTheQuestion = toBe or not toBe
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: thatIsTheQuestion = toBe or not toBe
- en: 23)The Boolean expression not(not(x > 5)) is equivalent to x > 5.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 23)布尔表达式 not(not(x > 5)) 等价于 x > 5。
- en: '15.11 Review Questions: Multiple Choice'
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.11 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下每个陈述的正确答案。
- en: 1)Which of the following is not a comparison operator?
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 1)以下哪个不是比较运算符？
- en: a)>=
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: a)>=
- en: b)=<
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: b)=<
- en: c)<
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: c)<
- en: d)All of the above are comparison operators.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: d)所有这些都是比较运算符。
- en: 2)Which of the following is not a Python logical operator?
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 2)以下哪个不是 Python 逻辑运算符？
- en: a)nor
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: a)nor
- en: b)not
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: b)not
- en: c)All of the above are logical operators.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: c)所有这些都是逻辑运算符。
- en: d)None of the above is a logical operator.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是逻辑运算符。
- en: 3)If variable x contains a value of 5, what value does the statement y = x %
    2 == 1 assign to variable y?
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 3)如果变量 x 包含值为 5，那么语句 y = x % 2 == 1 将把什么值赋给变量 y？
- en: a)True
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: a)正确
- en: b)False
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: b)False
- en: c)1
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: c)1
- en: d)none of the above
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 4)If variable x contains a value of 5, what value does the statement y = x %
    2 == 0 or int(x / 2.0) == 2 assign to variable y?
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 4)如果变量 x 包含值为 5，那么语句 y = x % 2 == 0 or int(x / 2.0) == 2 将把什么值赋给变量 y？
- en: a)True
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: a)正确
- en: b)False
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: b)False
- en: c)none of the above
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上都不是
- en: 5)The temperature in a laboratory room must be between 50 and 80 degrees Fahrenheit.
    Which of the following Boolean expressions tests for this condition?
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 5)实验室的温度必须在50到80华氏度之间。以下哪个布尔表达式用于测试这个条件？
- en: a)t >= 50 or t <= 80
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: a)t >= 50 or t <= 80
- en: b)50 >= t >= 80
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: b)50 >= t >= 80
- en: c)t >= 50 and t <= 80
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: c)t >= 50 and t <= 80
- en: d)t > 50 or t < 80
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: d)t > 50 或 t < 80
- en: e)none of the above
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: e)以上皆非
- en: 6)Which of the following is equivalent to the Boolean expression t == 3 or t
    > 30?
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 6)以下哪个与布尔表达式t == 3 或 t > 30等价？
- en: a)t == 3 and not(t <= 30)
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: a)t == 3 且 not(t <= 30)
- en: b)t == 3 and not(t < 30)
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: b)t == 3 and not(t < 30)
- en: c)not(t != 3) or not(t < 30)
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: c)not(t != 3) 或 not(t < 30)
- en: d)not(t != 3 and t <= 30)
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: d)not(t != 3 and t <= 30)
- en: e)none of the above
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: e)以上皆非
- en: 15.12 Review Exercises
  id: totrans-346
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 15.12 复习练习
- en: Complete the following exercises.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Match each element from the first column with one or more elements from the
    second column.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将第一列的每个元素与第二列的一个或多个元素匹配。
- en: '| Description | Operator |'
  id: totrans-349
  prefs: []
  type: TYPE_TB
  zh: '| 描述 | 运算符 |'
- en: '| i) Logical operator | a) % |'
  id: totrans-350
  prefs: []
  type: TYPE_TB
  zh: '| i) 逻辑运算符 | a) % |'
- en: '| ii) Arithmetic operator | b) += |'
  id: totrans-351
  prefs: []
  type: TYPE_TB
  zh: '| ii) 算术运算符 | b) += |'
- en: '| iii) Comparison operator | c) and |'
  id: totrans-352
  prefs: []
  type: TYPE_TB
  zh: '| iii) 比较运算符 | c) and |'
- en: '| ii) Assignment operator (in general) | d) == |'
  id: totrans-353
  prefs: []
  type: TYPE_TB
  zh: '| ii) 赋值运算符（一般） | d) == |'
- en: '|   | e) or |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '|   | e) 或 |'
- en: '|   | f) >= |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '|   | f) >= |'
- en: '|   | g) not |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '|   | g) not |'
- en: '|   | h) = |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '|   | h) = |'
- en: '|   | i) *= |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '|   | i) *= |'
- en: '|   | j) / |'
  id: totrans-359
  prefs: []
  type: TYPE_TB
  zh: '|   | j) / |'
- en: 2)Fill in the following table with the words “True” or “False” according to
    the values of variables a, b, and c.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 2)根据变量a、b和c的值，用“True”或“False”填写以下表格。
- en: '| a | b | c | a != 1 | b > a | c / 2 > 2 * a |'
  id: totrans-361
  prefs: []
  type: TYPE_TB
  zh: '| a | b | c | a != 1 | b > a | c / 2 > 2 * a |'
- en: '| 3 | −5 | 8 |   |   |   |'
  id: totrans-362
  prefs: []
  type: TYPE_TB
  zh: '| 3 | −5 | 8 |   |   |   |'
- en: '| 1 | 10 | 20 |   |   |   |'
  id: totrans-363
  prefs: []
  type: TYPE_TB
  zh: '| 1 | 10 | 20 |   |   |   |'
- en: '| −4 | −2 | −9 |   |   |   |'
  id: totrans-364
  prefs: []
  type: TYPE_TB
  zh: '| −4 | −2 | −9 |   |   |   |'
- en: 3)Fill in the following table with the words “True” or “False” according to
    the values of the Boolean expressions BE1 and BE2.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 3)根据布尔表达式BE1和BE2的值，用“True”或“False”填写以下表格。
- en: '| BE1 (Boolean Expression 1) | BE2 (Boolean Expression 2) | BE1 or BE2 | BE1
    and BE2 | not(BE2) |'
  id: totrans-366
  prefs: []
  type: TYPE_TB
  zh: '| BE1 (布尔表达式1) | BE2 (布尔表达式2) | BE1 或 BE2 | BE1 且 BE2 | 非(BE2) |'
- en: '| False | False |   |   |   |'
  id: totrans-367
  prefs: []
  type: TYPE_TB
  zh: '| False | False |   |   |   |'
- en: '| False | True |   |   |   |'
  id: totrans-368
  prefs: []
  type: TYPE_TB
  zh: '| False | True |   |   |   |'
- en: '| True | False |   |   |   |'
  id: totrans-369
  prefs: []
  type: TYPE_TB
  zh: '| True | False |   |   |   |'
- en: '| True | True |   |   |   |'
  id: totrans-370
  prefs: []
  type: TYPE_TB
  zh: '| True | True |   |   |   |'
- en: 4)Fill in the following table with the words “True” or “False” according to
    the values of variables a, b, and c.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 4)根据变量a、b和c的值，用“True”或“False”填写以下表格。
- en: '| a | b | c | a > 3 or c > b and c > 1 | a > 3 and c > b or c > 1 |'
  id: totrans-372
  prefs: []
  type: TYPE_TB
  zh: '| a | b | c | a > 3 或 c > b 且 c > 1 | a > 3 且 c > b 或 c > 1 |'
- en: '| 4 | −6 | 2 |   |   |'
  id: totrans-373
  prefs: []
  type: TYPE_TB
  zh: '| 4 | −6 | 2 |   |   |   |'
- en: '| −3 | 2 | −4 |   |   |'
  id: totrans-374
  prefs: []
  type: TYPE_TB
  zh: '| −3 | 2 | −4 |   |   |   |'
- en: '| 2 | 5 | 5 |   |   |'
  id: totrans-375
  prefs: []
  type: TYPE_TB
  zh: '| 2 | 5 | 5 |   |   |   |'
- en: 5)For x = 4, y = −2 and flag = True, fill in the following table with the corresponding
    values.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 5)对于x = 4，y = −2和flag = True，用相应的值填写以下表格。
- en: '| Expression | Value |'
  id: totrans-377
  prefs: []
  type: TYPE_TB
  zh: '| 表达式 | 值 |'
- en: '| (x + y) ** 3 |   |'
  id: totrans-378
  prefs: []
  type: TYPE_TB
  zh: '| (x + y) ** 3 |   |'
- en: '| (x + y) / (x ** 2 − 14) |   |'
  id: totrans-379
  prefs: []
  type: TYPE_TB
  zh: '| (x + y) / (x ** 2 − 14) |   |'
- en: '| x − 1 == y + 5 |   |'
  id: totrans-380
  prefs: []
  type: TYPE_TB
  zh: '| x − 1 == y + 5 |   |'
- en: '| x > 2 and y == 1 |   |'
  id: totrans-381
  prefs: []
  type: TYPE_TB
  zh: '| x > 2 and y == 1 |   |'
- en: '| x == 1 or y == −2 and not(flag == False) |   |'
  id: totrans-382
  prefs: []
  type: TYPE_TB
  zh: '| x == 1 or y == −2 and not(flag == False) |   |'
- en: '| not(x >= 3) and (x % 2 > 1) |   |'
  id: totrans-383
  prefs: []
  type: TYPE_TB
  zh: '| not(x >= 3) and (x % 2 > 1) |   |'
- en: 6)Calculate the result of each the following complex Boolean expressions when
    variables a, b, c, and d contain the values 6, −3, 4, and 7 respectively.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 6)当变量a、b、c和d分别包含值6、−3、4和7时，计算以下每个复杂布尔表达式的结果。
- en: i)(3 * a + b / 5 - c * b / a > 4) and (b != -3)
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: i)(3 * a + b / 5 - c * b / a > 4) and (b != -3)
- en: ii)(a * b - c / 2 + 21 * c / 3 != 8) or (a >= 5)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: ii)(a * b - c / 2 + 21 * c / 3 != 8) 或 (a >= 5)
- en: 'Hint: Start by evaluating the simpler parts of the expressions.'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：从表达式的简单部分开始评估。
- en: '7)A head teacher asks the students to raise their hands according to their
    age. He wants to find the students who are:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 7)班主任要求学生根据年龄举手。他想找到的是：
- en: i)under the age of 12, but not those who are 8 years old.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: i)小于12岁，但不是8岁的人。
- en: ii)between the ages of 6 and 9, and also those who are 11 years old.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: ii)在6到9岁之间，也是11岁的人。
- en: iii)over the age of 7, but not those who are 10 or 12 years old.
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: iii)超过7岁，但不是10或12岁的那些人。
- en: iv)6, 9, and 11 years old.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: iv)6岁、9岁和11岁。
- en: v)between the ages of 6 and 12, but not those who are 8 years old.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: v)在6到12岁之间，但不是8岁的人。
- en: vi)neither 7 nor 10 years old.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: vi)既不是7岁也不是10岁。
- en: To compose the required Boolean expressions, use a variable named age.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 要编写所需的布尔表达式，请使用名为age的变量。
- en: 8)Negate the following Boolean expressions without adding the not operator in
    front of the expressions.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 8)在不给表达式前面添加not运算符的情况下，否定以下布尔表达式。
- en: i)x == 4 and y != 3
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: i)x == 4 且 y != 3
- en: ii)x + 4 <= 0
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: ii)x + 4 <= 0
- en: iii)not(x > 5) or y == 4
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: iii)not(x > 5) 或 y == 4
- en: iv)x != False
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: iv)x != False
- en: v)not(x >= 4 or z > 4)
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: v)not(x >= 4 or z > 4)
- en: vi)x != 2 and x >= −5
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: vi)x != 2 and x >= −5
- en: 9)As you already know, two negations result in an affirmative. Write the equivalent
    of the following Boolean expressions by negating them twice (applying both methods).
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 如您所知，两次否定会产生肯定。通过两次否定（应用两种方法）写出以下布尔表达式的等价形式。
- en: i)x >= 4 and y != 10
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: i)x >= 4 and y != 10
- en: ii)x - 2 >= 9
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: ii)x - 2 >= 9
- en: iii)not(x >= 2) or y != 4
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: iii)not(x >= 2) or y != 4
- en: iv)x != False or y == 3
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: iv)x != False or y == 3
- en: v)not(x >= 2 and y >= 2)
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: v)not(x >= 2 and y >= 2)
- en: vi)x != −2 and x <= 2
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: vi)x != −2 and x <= 2
