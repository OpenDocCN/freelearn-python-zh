["```py\nclass HostelStudent(models.Model):\n   _name = \"hostel.student\"\n   _description = \"Hostel Student Information\"\n   name = fields.Char(\"Student Name\")\n   gender = fields.Selection([(\"male\", \"Male\"),\n       (\"female\", \"Female\"), (\"other\", \"Other\")],\n       string=\"Gender\", help=\"Student gender\")\n   active = fields.Boolean(\"Active\", default=True,\n       help=\"Activate/Deactivate hostel record\")\n   hostel_id = fields.Many2one(\"hostel.hostel\", \"hostel\", help=\"Name of hostel\")\n   room_id = fields.Many2one(\"hostel.room\", \"Room\",\n       help=\"Select hostel room\")\n   status = fields.Selection([(\"draft\", \"Draft\"),\n       (\"reservation\", \"Reservation\"), (\"pending\", \"Pending\"),\n       (\"paid\", \"Done\"),(\"discharge\", \"Discharge\"), (\"cancel\", \"Cancel\")],\n       string=\"Status\", copy=False, default=\"draft\",\n       help=\"State of the student hostel\")\n   admission_date = fields.Date(\"Admission Date\",\n       help=\"Date of admission in hostel\",\n       default=fields.Datetime.today)\n   discharge_date = fields.Date(\"Discharge Date\",\n       help=\"Date on which student discharge\")\n   duration = fields.Integer(\"Duration\", compute=\"_compute_check_duration\", inverse=\"_inverse_duration\",\n                              help=\"Enter duration of living\")\n```", "```py\n    class HostelStudent(models.Model):\n       _name = \"hostel.student\"\n        ...\n        def action_assign_room(self):\n    ```", "```py\n    self.ensure_one()\n    ```", "```py\n    if self.status != \"paid\":\n               raise UserError(_(\"You can't assign a room if it's not paid.\"))\n    ```", "```py\n    room_as_superuser = self.env['hostel.room'].sudo()\n    ```", "```py\n    room_rec = room_as_superuser.create({\n               \"name\": \"Room A-103\",\n               \"room_no\": \"A-103\",\n               \"floor_no\": 1,\n               \"room_category_id\": self.env.ref(\"my_hostel.single_room_categ\").id,\n               \"hostel_id\": self.hostel_id.id,\n           })\n    ```", "```py\n    <button name=\"action_assign_room\"\n                               string=\"Assign Room\"\n                               type=\"object\"\n                               class=\"btn-primary\"\n                           />\n    ```", "```py\npublic_user = self.env.ref('base.public_user')\nhostel_room = self.env['hostel.room'].with_user(public_user)\nhostel_room.search([('name', 'ilike', 'Room 101')])\n```", "```py\n    <button name=\"action_remove_room_members\"\n                               string=\"Remove Room Members\"\n                               type=\"object\"\n                               class=\"btn-primary\"\n                           />\n    ```", "```py\n    def action_remove_room_members(self):\n       ...\n    ```", "```py\n    student.with_context(is_hostel_room=True).action_remove_room()\n    ```", "```py\n    def action_remove_room(self):\n           if self.env.context.get(\"is_hostel_room\"):\n               self.room_id = False\n    ```", "```py\nnew_context = self.env.context.copy()\nnew_context.update({'is_hostel_room': True})\nstudent.with_context(new_context)\n```", "```py\n    def action_category_with_amount(self):\n        ...\n    ```", "```py\n    \"\"\"\n               SELECT\n                   hrc.name,\n                   hrc.amount\n               FROM\n                   hostel_room AS hostel_room\n               JOIN\n                   hostel_room_category as hrc ON hrc.id = hostel_room.room_category_id\n               WHERE hostel_room.room_category_id = %(cate_id)s;\"\"\",\n               {'cate_id': self.room_category_id.id}\n    ```", "```py\n    self.env.cr.execute(\"\"\"\n               SELECT\n                   hrc.name,\n                   hrc.amount\n               FROM\n                   hostel_room AS hostel_room\n               JOIN\n                   hostel_room_category as hrc ON hrc.id = hostel_room.room_category_id\n               WHERE hostel_room.room_category_id = %(cate_id)s;\"\"\",\n               {'cate_id': self.room_category_id.id})\n    ```", "```py\n    result = self.env.cr.fetchall()\n           _logger.warning(\"Hostel Room With Amount: %s\", result)\n    ```", "```py\n    <button name=\"action_category_with_amount\"\n                               string=\"Log Category With Amount\"\n                               type=\"object\"\n                               class=\"btn-primary\"/>\n    ```", "```py\n+---------------------------------------+-------+\n| name                                  | amount|\n|---------------------------------------+-------|\n| Single Room                           | 3000  |\n+---------------------------------------+-------+\n```", "```py\n    class AssignRoomStudentWizard(models.TransientModel):\n       _name = 'assign.room.student.wizard'\n       room_id = fields.Many2one(\"hostel.room\", \"Room\", required=True)\n    ```", "```py\n    def add_room_in_student(self):\n           hostel_room_student = self.env['hostel.student'].browse(\n               self.env.context.get('active_id'))\n           if hostel_room_student:\n               hostel_room_student.update({\n                   'hostel_id': self.room_id.hostel_id.id,\n                   'room_id': self.room_id.id,\n                   'admission_date': datetime.today(),\n               })\n    ```", "```py\n    <record id='assign_room_student_wizard_form' model='ir.ui.view'>\n       <field name='name'>assign room student wizard form view</field>\n       <field name='model'>assign.room.student.wizard</field>\n       <field name='arch' type='xml'>\n           <form string=\"Assign Room\">\n               <sheet>\n                   <group>\n                       <field name='room_id'/>\n                   </group>\n               </sheet>\n               <footer>\n                   <button string='Update' name='add_room_in_student' class='btn-primary' type='object'/>\n                   <button string='Cancel' class='btn-default' special='cancel'/>\n               </footer>\n           </form>\n       </field>\n    </record>\n    ```", "```py\n    <record model=\"ir.actions.act_window\" id=\"action_assign_room_student_wizard\">\n       <field name=\"name\">Assign Room</field>\n       <field name=\"res_model\">assign.room.student.wizard</field>\n       <field name=\"view_mode\">form</field>\n       <field name=\"target\">new</field>\n    </record>\n    ```", "```py\n    access_assign_room_student_wizard_manager,access.assign.room.student.wizard.manager,model_assign_room_student_wizard,my_hostel.group_hostel_manager,1,1,1,1\n    ```", "```py\ndef _default_member(self):\n    if self.context.get('active_model') == 'hostel.room':\n        return self.context.get('active_id', False)\n```", "```py\ndef add_room_in_student(self):\n       hostel_room_student = self.env['hostel.student'].browse(\n           self.env.context.get('active_id'))\n       if hostel_room_student:\n           hostel_room_student.update({\n               'hostel_id': self.room_id.hostel_id.id,\n               'room_id': self.room_id.id,\n               'admission_date': datetime.today(),\n           })\n```", "```py\ndef add_room_in_student(self):\n       hostel_room_student = self.env['hostel.student'].browse(\n           self.env.context.get('active_id'))\n       if hostel_room_student:\n           hostel_room_student.update({\n               'hostel_id': self.room_id.hostel_id.id,\n               'room_id': self.room_id.id,\n               'admission_date': datetime.today(),\n           })\n       rooms = self.mapped('room_id')\n       action = rooms.get_formview_action()\n       if len(rooms.ids) > 1:\n           action['domain'] = [('id', 'in', tuple(rooms.ids))]\n           action['view_mode'] = 'tree,form'\n       return action\n```", "```py\nclass HostelStudent(models.Model):\n   _name = \"hostel.student\"\n   _description = \"Hostel Student Information\"\n   admission_date = fields.Date(\"Admission Date\",\n       help=\"Date of admission in hostel\",\n       default=fields.Datetime.today)\n   discharge_date = fields.Date(\"Discharge Date\",\n       help=\"Date on which student discharge\")\n   duration = fields.Integer(\"Duration\",          inverse=\"_inverse_duration\",help=\"Enter duration of living\")\n```", "```py\n   @api.onchange('admission_date', 'discharge_date')\n   def onchange_duration(self):\n       if self.discharge_date and self.admission_date:\n           self.duration = (self.discharge_date.year - \\\n                           self.admission_date.year) * 12 + \\\n                           (self.discharge_date.month - \\\n                           self.admission_date.month)\n```", "```py\n    from odoo.tests.common import Form\n    ```", "```py\n    def return_room(self):\n        self.ensure_one()\n    ```", "```py\n    wizard = self.env['assign.room.student.wizard']\n    ```", "```py\n    with Form(wizard) as return_form:\n    ```", "```py\n    return_form.room_id = self.env.ref('my_hostel.101_room')\n           record = return_form.save()                            record.with_context(active_id=self.id).add_room_in_student()\n    ```", "```py\n    @api.depends('admission_date', 'discharge_date')\n     def onchange_duration(self):\n            ...\n    ```", "```py\n    duration = fields.Integer(\"Duration\", compute=\"onchange_duration\", inverse=\"_inverse_duration\",\n                                  help=\"Enter duration of living\")\n    ```", "```py\n    class HostelRoomAvailability(models.Model):\n       _name = 'hostel.room.availability'\n       _auto = False\n    ```", "```py\n    room_id = fields.Many2one('hostel.room', 'Room', readonly=True)\n    student_per_room = fields.Integer(string=\"Student Per Rooom\",                   readonly=True)\n    availability = fields.Integer(string=\"Availability\",readonly=True)\n    amount = fields.Integer(string=\"Amount\", readonly=True)\n    ```", "```py\n    def init(self):\n           tools.drop_view_if_exists(self.env.cr, self._table)\n           query = \"\"\"\n           CREATE OR REPLACE VIEW hostel_room_availability AS (\n           SELECT\n                   min(h_room.id) as id,\n                   h_room.id as room_id,\n                   h_room.student_per_room as student_per_room,\n                   h_room.availability as availability,\n                   h_room.rent_amount as amount\n               FROM\n                   hostel_room AS h_room\n               GROUP BY h_room.id\n           );\n           \"\"\"\n           self.env.cr.execute(query)\n    ```", "```py\n    class ResConfigSettings(models.TransientModel):\n       _inherit = 'res.config.settings'\n       group_hostel_user = fields.Boolean(string=\"Hostel User\", implied_group='my_hostel.group_hostel_user')\n    ```", "```py\n    <record id=\"res_config_settings_view_form\" model=\"ir.ui.view\">\n           <field name=\"name\">res.config.settings.view.form.inherit.hostel</field>\n           <field name=\"model\">res.config.settings</field>\n           <field name=\"priority\" eval=\"5\"/>\n           <field name=\"inherit_id\" ref=\"base.res_config_settings_view_form\"/>\n           <field name=\"arch\" type=\"xml\">\n               <xpath expr=\"//div[hasclass('settings')]\" position=\"inside\">\n                   <div class=\"app_settings_block\" data-string=\"Hostel\" string=\"Hostel\" data-key=\"my_hostel\" groups=\"my_hostel.group_hostel_manager\">\n                       <h2>Hostel</h2>\n                       <div class=\"row mt16 o_settings_container\">\n                           <div class=\"col-12 col-lg-6 o_setting_box\" id=\"hostel\">\n                               <div class=\"o_setting_left_pane\">\n                                   <field name=\"group_hostel_user\"/>\n                               </div>\n                               <div class=\"o_setting_right_pane\">\n                                   <label for=\"group_hostel_user\"/>\n                                   <div class=\"text-muted\">\n                                       Allow users to hostel user\n                                   </div>\n                               </div>\n                           </div>\n                       </div>\n                   </div>\n               </xpath>\n           </field>\n       </record>\n    ```", "```py\n    <record id=\"hostel_config_settings_action\" model=\"ir.actions.act_window\">\n           <field name=\"name\">Settings</field>\n           <field name=\"type\">ir.actions.act_window</field>\n           <field name=\"res_model\">res.config.settings</field>\n           <field name=\"view_id\" ref=\"res_config_settings_view_form\"/>\n           <field name=\"view_mode\">form</field>\n           <field name=\"target\">inline</field>\n           <field name=\"context\">{'module' : 'my_hostel'}</field>\n       </record>\n       <menuitem name=\"Settings\" id=\"hostel_setting_menu\" parent=\"hostel_main_menu\" action=\"hostel_config_settings_action\" sequence=\"50\"/>\n    ```", "```py\nmodule_my_hostel_extras = fields.Boolean(\n    string='Hostel Extra Features')\n```", "```py\ndigest_emails = fields.Boolean(\n        string=\"Digest Emails\",\n        config_parameter='digest.default_digest_emails')\n```", "```py\n    ...\n    'post_init_hook': 'add_room_hook',\n    ...\n    ```", "```py\n    from odoo import api, SUPERUSER_ID\n    def add_room_hook(cr, registry):\n       env = api.Environment(cr, SUPERUSER_ID, {})\n       room_data1 = {'name': 'Room 1', 'room_no': '01'}\n       room_data2 = {'name': 'Room 2', 'room_no': '02'}\n       env['hostel.room'].create([room_data1, room_data2])\n    ```", "```py\n    ...\n    'pre_init_hook': 'pre_init_hook_hostel',\n    ...\n    ```", "```py\ndef pre_init_hook_hostel(env):\n   env['ir.model.data'].search([\n       ('model', 'like', 'hostel.hostel'),\n   ]).unlink()\n```", "```py\n...\n'uninstall_hook': 'uninstall_hook_user',\n...\n```", "```py\ndef uninstall_hook_user(env):\n   hostel = env['res.users'].search([])\n   hostel.write({'active': False})\n```"]