- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Getting Full Stack Ready with React and Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The creator of the first website, Sir Tim Berners-Lee, envisaged the web as
    an open platform that would allow internet users to share information, access
    opportunities, and collaborate without geographic and cultural restrictions. Interestingly,
    software developers are innovatively driving the realization of this mission.
  prefs: []
  type: TYPE_NORMAL
- en: As developers, we enable feature-rich web applications that make positive impacts
    on individuals and businesses around the world. Apart from sharing information,
    the web has drastically changed from mere static web pages to dynamic and database-driven
    web applications. Web technologists are coming up with new tools and techniques
    to make access to information on the internet hassle-free and natively convenient.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you’ll have a better understanding of full stack
    web development in the context of client-server architectures. We’ll discuss major
    interactions that exist between the **frontend** of web applications and a database-driven
    **backend**.
  prefs: []
  type: TYPE_NORMAL
- en: Having these skill sets will usher you into the hall of fame of full stack web
    developers. This comes with complete knowledge of what it takes to start a web
    application development project from scratch and transform it into a full-blown
    web application. Whether you are a lone developer or a developer functioning in
    a collaborative team role, knowledge of full stack web development will boost
    your confidence to perform efficiently. In addition, you’ll have the flexibility
    to fit any assigned role in a team setting.
  prefs: []
  type: TYPE_NORMAL
- en: Further, we’ll dive into the reasons to use React, a UI library for building
    the user-facing end of web applications. You’ll briefly be introduced to the world
    of React and the reasons why React is essential to build complex modern web application
    interface components that allow users to have a smooth experience.
  prefs: []
  type: TYPE_NORMAL
- en: Developing web applications requires setting up the development environments.
    In full stack web application development, the frontend and backend have separate
    development environments. We’ll discuss how to set up React for the frontend and
    Flask as backend technology to power server-based processing and database interactions.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, we’ll dive into getting ready with **Git**, which is a source
    version control tool that helps developers to track changes to the code base.
    You are expected to acquire enough basic knowledge to kickstart deploying your
    code to **GitHub**, an online platform for version control.
  prefs: []
  type: TYPE_NORMAL
- en: In this age of technological innovation and the proliferation of creative software
    developments, source version control is an integral part of development. It fosters
    collaboration among software developers to solve problems in open source or commercial
    projects.
  prefs: []
  type: TYPE_NORMAL
- en: We’ll end the chapter by discussing the implementation of a real-world project
    we will build in this book, *Bizza*. The project takes you on a journey from a
    frontend web application perspective to a database-driven backend, connected to
    the REST API layer to facilitate communication.
  prefs: []
  type: TYPE_NORMAL
- en: So, without further ado, let’s start to experience the world of full stack web
    application development using two in-demand tech stacks, **React** and **Flask**.
    By the end of this book, you will be able to develop full stack applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to full stack web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why should we choose React?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why should we choose Flask?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready with Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What are we building?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete code for this chapter is available on GitHub at:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter01)'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to full stack web development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modern web applications are complex and rapidly evolving. The business community’s
    needs and system requirements are motivating software developers to stretch beyond
    being able to function only as either a frontend or backend developer. The ability
    of web developers to develop full stack applications is now essential more than
    ever and on the rise.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will focus on full stack web development, which refers to both
    the frontend and backend parts of web development. The frontend, sometimes referred
    to as the *client side*, is the visible part of any web application that users
    can see and interact with. The backend, sometimes referred to as the *server side*,
    is that portion where programmer code resides, coupled with a database and other
    server infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Web developers who are skilled in both the client side (frontend development)
    and server side (backend development) are usually referred to as *full* *stack
    developers*.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we will use React as a library to develop an intuitive **user
    interface** (**UI**), or frontend, and Flask, a **microframework**, to build backend
    business logic components.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s take a closer look at these tools and the reasons we have chosen them.
  prefs: []
  type: TYPE_NORMAL
- en: Why should we choose React?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building UIs for web applications is an essential part of web development. Interestingly,
    most web developers find it difficult to choose the most suitable JavaScript frontend
    library or framework to build UIs. In a moment, we will see why choosing React
    will help your career growth and projects.
  prefs: []
  type: TYPE_NORMAL
- en: '**React** is a popular open source library, with an excellent community of
    developers at Meta Platforms (formerly Facebook) actively maintaining it. React
    is the most commonly used library according to the *Stack Overflow 2021 Developer
    Survey* report, in which 41.4% of professional developers stated they had used
    React in the past year ([https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-framewors](https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-framewors)).
    So, what is the fuss about React?'
  prefs: []
  type: TYPE_NORMAL
- en: React is simple to use to develop rich interactive interfaces for end users.
    You can start building reusable interface components for your web projects in
    no time. It is also easy to learn, as you will see in the implementation of the
    frontend project we’ll embark upon in this book. If you are already familiar with
    JavaScript, learning React is really simple, as React is JavaScript-centric.
  prefs: []
  type: TYPE_NORMAL
- en: One of the main reasons React might be with us as long as the internet lives
    is due to its usage among technology giants such as *Facebook*, *Uber Eats*, *Skype*,
    and *Netflix*. Additionally, React, being a library, focuses specifically on building
    UI components – and nothing more. Its component-based approach to developing web
    and mobile applications makes it insanely popular among developers.
  prefs: []
  type: TYPE_NORMAL
- en: The further abstraction of the **Document Object Model** (**DOM**) in React
    to what is called the virtual DOM improves efficiency and performance in React
    applications. React uses special syntax, referred to as **JavaScript XML** (**JSX**),
    that allows you to write HTML elements in JavaScript, in contrast to the convention
    of putting JavaScript in HTML elements.
  prefs: []
  type: TYPE_NORMAL
- en: You don’t have to learn complex templating languages such as Handlebars, EJS,
    and Pug. JSX helps you write React components using familiar HTML syntax with
    the help of a transpiler called **Babel**. Some JavaScript frameworks are very
    opinionated – for instance, Angular, Ember.js, and Vue. These frameworks have
    a rigid structural way of building web applications, unlike React, which gives
    you the freedom and flexibility to select your libraries, architectures, and tools.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you are interested in developing mobile applications, React Native
    can be a valuable tool. Your knowledge of React and its components, which seamlessly
    integrate with native views, empowers you to create both Android and iOS apps
    efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let’s get our hands dirty and set up environments with React.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment with React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, you will set up a development environment for the React application
    project we’ll build in the course of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'To code and test React applications on your local machine, there are a few
    steps you need to take:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Node.js:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To download and install the stable version of Node.js, go to [https://nodejs.org/en/](https://nodejs.org/en/).
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Node.js** is a runtime development environment for JavaScript and, by extension,
    React applications. Node.js comes bundled with a command-line utility tool and
    package manager called **Node Package Manager** (**NPM**). Node.js and NPM are
    the tools required to successfully build and run any React applications.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Click and download the version recommended for most users. Install by following
    the installation steps.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To check whether Node.js was successfully installed, type the following into
    your command prompt:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'To check the version of NPM, type the following in the terminal or command
    prompt (`cmd`) for Windows:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: The following screenshot shows that node and `npm` are working.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.1 – A screenshot showing that Node.js and NPM are working](img/Figure_1.1_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.1 – A screenshot showing that Node.js and NPM are working
  prefs: []
  type: TYPE_NORMAL
- en: Install **Visual Studio Code** (**VS Code**).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**VS Code** is a free code editor you can use to build and debug web applications.
    The ready-set-code approach of the VS Code editor makes it a great tool for development.
    VS Code has built-in support for IntelliSense code completion and features for
    code refactoring. Third-party extensions in VS Code with hundreds of web technologies
    tools allow you to be more productive and efficient.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: There are other code editors available to developers, but VS Code is highly
    recommended.
  prefs: []
  type: TYPE_NORMAL
- en: Install Git Client.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Git Client is the command-line interface used to interact with Git repositories.
    There’ll be more on Git later in the chapter. We need this tool to track changes
    in our project files. To install Git Client, download it from [https://git-scm.com/downloads](https://git-scm.com/downloads):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Choose your **operating system** (**OS**) type and install the software.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.2 – A screenshot of the Git download page](img/Figure_1.2_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.2 – A screenshot of the Git download page
  prefs: []
  type: TYPE_NORMAL
- en: 'To test whether you successfully installed Git, type the following in your
    system’s command prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: "![Figure 1.3 – A screenshot showing the Git Client \uFEFFversion in Windows](img/Figure_1.3_B18554.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 1.3 – A screenshot showing the Git Client version in Windows
  prefs: []
  type: TYPE_NORMAL
- en: We have now set up the development environment for the React applications we’ll
    be building. This completes the frontend development environment. Let’s do the
    same for Flask as well, and delve into why you need to choose Flask to build your
    backend.
  prefs: []
  type: TYPE_NORMAL
- en: Why should we choose Flask?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Flask** is a minimalistic framework to develop modern Python web applications.
    It is a great toolkit for building enterprise-grade, scalable, reliable, and maintainable
    applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the framework is easy to learn. Flask has no boilerplate code that
    must be used by developers, unlike many alternative frameworks such as Django.
    It is absolutely lightweight to the core. Flask as a microframework only provides
    developers with starting components to build web applications, while Django tends
    to suggest you build your web apps in a certain structure using a complete set
    of gears or components within its framework.
  prefs: []
  type: TYPE_NORMAL
- en: With Flask, developers have amazing freedom to choose their database, template
    engine, and deployment process; they can also decide how to manage users, sessions,
    web applications, and security.
  prefs: []
  type: TYPE_NORMAL
- en: Flask’s scalability has encouraged some technology companies to migrate to Flask
    to efficiently implement their microservices infrastructure. A **microservice**
    is a small, independent, and loosely coupled software component that focuses on
    performing a specific function within a larger application architecture.
  prefs: []
  type: TYPE_NORMAL
- en: A microservice is like having a team of specialists, each focusing on a particular
    task, working together harmoniously to create something amazing. As I’m sure you
    would agree, cloud computing has revolutionized application development and deployment
    irrevocably. The science of scale that is at play with cloud computing is making
    it the new normal for both start-ups and enterprises. *Pinterest* is one such
    example.
  prefs: []
  type: TYPE_NORMAL
- en: Pinterest is one of the most visited websites in the world. It is an image-sharing
    and social media services platform. According to Statista, as of the fourth quarter
    of 2021, Pinterest had an average of 431 million monthly active users ([https://www.statista.com/statistics/463353/pinterest-global-mau/](https://www.statista.com/statistics/463353/pinterest-global-mau/)).
    Having started their platform with the Django framework, they opted for Flask
    to develop their API and build a more stable microservice architecture.
  prefs: []
  type: TYPE_NORMAL
- en: Flask is still currently the main core backend technology powering Pinterest,
    a heavily trafficked social web application. In summary, it is easier to develop
    APIs and integrate varied databases in Flask. You can take it to the bank with
    such simplicity and flexibility assurance. If you understand Python well, then
    you should be able to contribute to a Flask application easily.
  prefs: []
  type: TYPE_NORMAL
- en: Flask is less opinionated, so there are fewer standards to learn. Django, conversely,
    gives you all you need to develop web applications – complete solutions in a box.
    However, the issue of scaling is what most experienced Python developers have
    had to deal with in their Django projects.
  prefs: []
  type: TYPE_NORMAL
- en: When you implement an out-of-the-box solution in your project, you have got
    a giant Django framework to deal with, which may impact negatively your project’s
    time to market and performance.
  prefs: []
  type: TYPE_NORMAL
- en: When you combine these battle-tested technology stacks, React and Flask, in
    your project, you can be sure of development gains in scalability, reliability,
    reusability, maintainability, and secure web and mobile applications.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we discussed why you should add React and Flask to your web
    application’s development toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up the development environment with Flask
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to start developing web applications on your local computer with
    Flask as your backend framework, you need to have Python and a few other packages
    installed. In this section, we will set up a Flask development environment. To
    do so, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Python.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.4 – A screenshot showing the Python version](img/Figure_1.4_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.4 – A screenshot showing the Python version
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can use the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In macOS or Linux, the `Python3 —version` command also works to check the Python
    version number and, by extension, the Python installation.
  prefs: []
  type: TYPE_NORMAL
- en: If Python has not been installed on your computer system, go to [https://www.python.org/downloads/](https://www.python.org/downloads/),
    choose the latest version suitable for your OS, and download and install it on
    your system.
  prefs: []
  type: TYPE_NORMAL
- en: Update `pip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pip`, type in this command on your terminal:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create a virtual environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'For Windows users, try typing the following if you have issues:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You use `venv` for Python version 3 and `virtualenv` for Python version 2, depending
    on the Python version on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the virtual environment in Windows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note:'
  prefs: []
  type: TYPE_NORMAL
- en: If executing the command `$ venv\Scripts\activate` doesn't function as expected,
    I recommend readers to attempt using `$` `venv\Scripts\activate.bat` instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the virtual environment on macOS or Linux:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Flask:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following screenshot shows the Flask installation command operation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.5 – A screenshot showing the terminal commands for the flask installation](img/Figure_1.5_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.5 – A screenshot showing the terminal commands for the flask installation
  prefs: []
  type: TYPE_NORMAL
- en: 'To test the Flask development environment, create a file named `app.py` in
    your project directory. Open the `app.py` file in the VS code editor and paste
    in the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open the terminal and set your environment variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`.env` or `.flaskenv` to store your environment variables and secrets. Inside
    `.flaskenv`, add the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, enter the `pip install python-dotenv` command in the terminal to install
    `Python-dotenv`. With `python-dotenv`, you can load the variables from the `.env`
    or `.flaskenv` file into your application’s environment, making them accessible
    as if they were set directly as system environment variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To run the Flask app, use the following command, and you will get output similar
    to *Figure 1**.6*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.6 – A screenshot showing how to run the Flask application](img/Figure_1.6_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.6 – A screenshot showing how to run the Flask application
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To deactivate the virtual environment, simply run `$` `deactivate`.
  prefs: []
  type: TYPE_NORMAL
- en: Having set up and tested the development environment for Flask, we’ll briefly
    discuss Git to understand the place of source version control in web application
    development and how GitHub has provided an online collaborative platform to tackle
    source code and encourage teamwork.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready with Git
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Git** is a tool for version control in software development. So, what does
    version control mean?'
  prefs: []
  type: TYPE_NORMAL
- en: As a professional developer, you will need to write code as often as possible.
    Let’s say you work on a project and it’s 80% complete. The project lead has asked
    you to add a new feature to your code base, and it is urgent as the client wants
    your team to add that as part of the features required in the minimum viable product
    you will be presenting in a few days’ time.
  prefs: []
  type: TYPE_NORMAL
- en: You quickly abandon what you were working on before and start working on this
    new feature. You make changes to one or two files to incorporate the new features.
    In the shortest time possible, you made the new feature work. Unfortunately, while
    trying to add the new feature, you unintentionally tampered with code in other
    files as well, and you don’t even know which one of them is affected.
  prefs: []
  type: TYPE_NORMAL
- en: Now imagine you have a genie that can tell you where in your code you made your
    change and the exact altered line of code. Wouldn’t that be awesome? Life would
    be super easy, saving you lots of development time. That’s the magic of version
    control!
  prefs: []
  type: TYPE_NORMAL
- en: Version control helps you keep track of changes to the code base in your software
    project. It is a great way of helping developers monitor changes in their source
    code. Moreover, it eases the collaborative work of the development team. With
    version control, you can track code base changes, who is changing the code base,
    and when the change happens. And, if changes are not desirable, you can quickly
    reverse them.
  prefs: []
  type: TYPE_NORMAL
- en: Developers have used many different version control tools over the years. Git
    happens to be the current market leader.
  prefs: []
  type: TYPE_NORMAL
- en: How does Git work?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Git is known as **distributed version control software**. In a work environment
    where collaboration among team members is necessary, a complete copy of the entire
    source code will be available on every contributor’s local computer system; we
    can call this a local repository.
  prefs: []
  type: TYPE_NORMAL
- en: Git tracks the local repository, maintaining a record of all the changes that
    occur within the local repository. It saves you the time and energy of keeping
    multiple versions of the project in separate local directories on your computer.
    This makes sharing changes to the source code between collaborators effortless.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are three primary states in Git you should know about:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Modified**: In this state, files have been changed, but the changes have
    not yet been added to the local database by Git. These changes are the ones made
    since the last commit on the files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staged**: In this state, the changes have been tracked by Git and will be
    added to the Git local database as such in the next commit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Committed**: In this state, the changed files have successfully been added
    to the git local database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s dive deeper into version control concepts and learn how to create local
    and remote repositories. Before that, it will be helpful to understand the difference
    between Git and GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Git versus GitHub
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As discussed earlier, Git is an open source tool for version control. It is
    simply used to track changes in a code base, track the identity of the person
    who made the change, and allow team coding collaboration among developers. When
    you set up your project on your local machine, Git is used to track changes in
    all the activities – adding files, updating existing files, or creating new folders.
  prefs: []
  type: TYPE_NORMAL
- en: It basically keeps a historical record of your source code. Conversely, GitHub
    is a cloud-based source code hosting and project management service. It simply
    allows you to use Git as a tool to keep your code base in a remotely hosted environment
    to track changes in your code base or collaboratively allow developers to work
    on projects.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a local repository
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Install Git Client from [https://git-scm.com/download/](https://git-scm.com/download/).
    Ignore this step if you already have it installed on your machine:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating a working directory named `local_repository` in the
    terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the directory as a working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 1.7 – A screenshot creating index.html](img/Figure_1.7_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.7 – A screenshot creating index.html
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are getting an error, `'touch' is not recognized as an internal or external
    command, operable program or batch file`, with `touch index.html`, type `npm install
    -g touch-cli` in your terminal if you have Node.js installed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Set up your global credentials:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: With the preceding commands, you set a global username and email address as
    credentials to track your contributions in the project source code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Your working directory now has a new file, `index.html`. Enter this command
    in the terminal, and you will get output similar to *Figure 1**.8*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.8 – A screenshot showing the creation of the empty Git repository](img/Figure_1.8_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.8 – A screenshot showing the creation of the empty Git repository
  prefs: []
  type: TYPE_NORMAL
- en: With `git init`, you create an empty local git repository. Git now has a local
    database or directory that contains all the metadata to track changes in your
    working directory. The `.git` folder is usually hidden in your working directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the content of your working directory to your repository, enter the
    following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This represents the staging state in Git. The changes are tracked by Git and
    will be added to the Git local database in the next commit.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'To verify this, enter the following command, and you will get output similar
    to *Figure 1**.9*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.9 – A screenshot showing the staging state of Git](img/Figure_1.9_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.9 – A screenshot showing the staging state of Git
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To add multiple contents, enter `git add`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you will need to commit to a local repository. This commit stage helps
    you track changes in your code base with a user-friendly message. To commit with
    a message flag, enter the following command, and you will get output similar to
    *Figure 1**.10*:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![Figure 1.10 – A screenshot showing the commit state of Git](img/Figure_1.10_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.10 – A screenshot showing the commit state of Git
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is always best practice to include a message in your commit command. This
    helps track changes, and if you have to revert, you can use a commit message as
    your saving point.
  prefs: []
  type: TYPE_NORMAL
- en: Now you understand how to create a local repository, add files to it, and transition
    files from the staging area to the committed state. Let’s briefly discuss how
    you can create a remote repository on GitHub for the cloud-based storage of your
    source code for possible collaboration.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a remote repository with GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In today’s digital age, GitHub has become an essential skill for seamless collaboration
    and version control in software development projects. Let’s delve into setting
    up a remote repository with GitHub:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a developer account on the GitHub site: [https://github.com/](https://github.com/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.11 – A screenshot showing the GitHub signup page](img/Figure_1.11_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.11 – A screenshot showing the GitHub signup page
  prefs: []
  type: TYPE_NORMAL
- en: 'Log in and click on **New**, and you will get the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 1.12 – A screenshot showing the staging state of Git](img/Figure_1.12_B18554.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1.12 – A screenshot showing the staging state of Git
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have created your new repository, enter the following command in your
    current working directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding commands move your local repository to a remote cloud-based repository
    to track your code base changes.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In summary, we discussed Git as a required tool for web developers in the modern
    age. You now know the difference between Git and GitHub. We also discussed basic,
    useful commands for a version control operation, either in a local or remote repository.
    Next, we’ll dive into the real-world project we will build in this book using
    React and Flask.
  prefs: []
  type: TYPE_NORMAL
- en: What will we build?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we will build a full stack, database-driven web application for
    conference speakers. It is called *Bizza*. Users will be able to see the directory
    of speakers for events of interest to them, events, schedules, and the titles
    of the papers those speakers are presenting. The solution will include frontend
    development with React, authentication, authorizations, and REST API design with
    Flask.
  prefs: []
  type: TYPE_NORMAL
- en: We will start by implementing the frontend in the initial few chapters of the
    book and subsequently implement the backend in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we provided a brief introduction to modern full stack web development,
    with an emphasis on the distinction between frontend and backend developers. We
    discussed the importance of React in building the user interfaces of web applications,
    and we explained how React and Flask are perfect tools to develop full stack web
    applications, owing to their simplicity, efficiency, and high performance when
    compared to rivals in the industry. The development environments for React and
    Flask were covered as well.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we discussed the importance of Git as a tool for version control and
    the project we will build in this book, *Bizza*.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll dive deeper into explaining components, props, and
    states in React to better understand how React applications are built. A typical
    React project structure will be discussed, with the aim of learning the functions
    of files and directories.
  prefs: []
  type: TYPE_NORMAL
