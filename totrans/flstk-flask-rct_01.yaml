- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: Getting Full Stack Ready with React and Flask
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React和Flask准备全栈开发
- en: The creator of the first website, Sir Tim Berners-Lee, envisaged the web as
    an open platform that would allow internet users to share information, access
    opportunities, and collaborate without geographic and cultural restrictions. Interestingly,
    software developers are innovatively driving the realization of this mission.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 首个网站创造者，蒂姆·伯纳斯-李爵士，设想了互联网作为一个开放平台，将允许互联网用户在没有地理和文化限制的情况下共享信息、获取机会和协作。有趣的是，软件开发者正在创新地推动这一使命的实现。
- en: As developers, we enable feature-rich web applications that make positive impacts
    on individuals and businesses around the world. Apart from sharing information,
    the web has drastically changed from mere static web pages to dynamic and database-driven
    web applications. Web technologists are coming up with new tools and techniques
    to make access to information on the internet hassle-free and natively convenient.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 作为开发者，我们使功能丰富的Web应用程序成为可能，对全球的个人和企业产生积极影响。除了共享信息外，互联网已经从单纯的静态网页转变为动态和数据库驱动的Web应用程序。Web技术专家正在提出新的工具和技术，使互联网上信息的访问变得无烦恼且方便。
- en: By the end of this chapter, you’ll have a better understanding of full stack
    web development in the context of client-server architectures. We’ll discuss major
    interactions that exist between the **frontend** of web applications and a database-driven
    **backend**.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将更好地理解在客户端-服务器架构背景下全栈Web开发。我们将讨论Web应用程序的前端与数据库驱动的后端之间存在的重大交互。
- en: Having these skill sets will usher you into the hall of fame of full stack web
    developers. This comes with complete knowledge of what it takes to start a web
    application development project from scratch and transform it into a full-blown
    web application. Whether you are a lone developer or a developer functioning in
    a collaborative team role, knowledge of full stack web development will boost
    your confidence to perform efficiently. In addition, you’ll have the flexibility
    to fit any assigned role in a team setting.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有这些技能集将使你进入全栈Web开发者的名人堂。这包括从零开始启动Web应用程序开发项目并将其转变为完整Web应用程序所需的所有知识。无论你是独立开发者还是在协作团队中担任开发者角色，全栈Web开发的知识将增强你高效执行的能力。此外，你将拥有灵活性，以适应团队设置中分配的任何角色。
- en: Further, we’ll dive into the reasons to use React, a UI library for building
    the user-facing end of web applications. You’ll briefly be introduced to the world
    of React and the reasons why React is essential to build complex modern web application
    interface components that allow users to have a smooth experience.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将深入了解使用React的原因，这是一个用于构建Web应用程序用户界面的UI库。你将简要了解React的世界以及为什么React对于构建复杂的现代Web应用程序界面组件至关重要，这些组件使用户能够拥有流畅的体验。
- en: Developing web applications requires setting up the development environments.
    In full stack web application development, the frontend and backend have separate
    development environments. We’ll discuss how to set up React for the frontend and
    Flask as backend technology to power server-based processing and database interactions.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 开发Web应用程序需要设置开发环境。在全栈Web应用程序开发中，前端和后端有各自独立的开发环境。我们将讨论如何设置React作为前端以及Flask作为后端技术，以支持基于服务器的处理和数据库交互。
- en: Additionally, we’ll dive into getting ready with **Git**, which is a source
    version control tool that helps developers to track changes to the code base.
    You are expected to acquire enough basic knowledge to kickstart deploying your
    code to **GitHub**, an online platform for version control.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还将深入了解如何准备使用**Git**，这是一个源代码版本控制工具，帮助开发者跟踪代码库的变化。你应掌握足够的基本知识，以便启动将代码部署到**GitHub**，一个在线版本控制平台。
- en: In this age of technological innovation and the proliferation of creative software
    developments, source version control is an integral part of development. It fosters
    collaboration among software developers to solve problems in open source or commercial
    projects.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个技术创新和创意软件开发盛行的时代，源代码版本控制是开发的一个基本组成部分。它促进了软件开发者之间的协作，以解决开源或商业项目中的问题。
- en: We’ll end the chapter by discussing the implementation of a real-world project
    we will build in this book, *Bizza*. The project takes you on a journey from a
    frontend web application perspective to a database-driven backend, connected to
    the REST API layer to facilitate communication.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以讨论本书中将要构建的实战项目*Bizza*来结束本章。该项目将带你从前端Web应用的角度，到数据库驱动的后端，连接到REST API层以促进通信。
- en: So, without further ado, let’s start to experience the world of full stack web
    application development using two in-demand tech stacks, **React** and **Flask**.
    By the end of this book, you will be able to develop full stack applications.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，无需多言，让我们开始体验使用两个热门技术栈——**React**和**Flask**——的全栈Web应用开发世界。到本书结束时，你将能够开发全栈应用。
- en: 'In this chapter, we will cover the following main topics:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主要主题：
- en: An introduction to full stack web development
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 全栈Web开发的介绍
- en: Why should we choose React?
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为什么选择React？
- en: Why should we choose Flask?
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为什么选择Flask？
- en: Getting ready with Git
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 准备使用Git
- en: What are we building?
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们在构建什么？
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter is available on GitHub at:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在GitHub上找到：
- en: '[https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter01)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter01](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter01)'
- en: An introduction to full stack web development
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 全栈Web开发的介绍
- en: Modern web applications are complex and rapidly evolving. The business community’s
    needs and system requirements are motivating software developers to stretch beyond
    being able to function only as either a frontend or backend developer. The ability
    of web developers to develop full stack applications is now essential more than
    ever and on the rise.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现代Web应用复杂且快速演变。商业社区的需求和系统要求正在推动软件开发者超越仅作为前端或后端开发者的能力。Web开发者开发全栈应用的能力现在比以往任何时候都更加重要，并且正在上升。
- en: In this book, we will focus on full stack web development, which refers to both
    the frontend and backend parts of web development. The frontend, sometimes referred
    to as the *client side*, is the visible part of any web application that users
    can see and interact with. The backend, sometimes referred to as the *server side*,
    is that portion where programmer code resides, coupled with a database and other
    server infrastructure.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将专注于全栈Web开发，这指的是Web开发的客户端和后端部分。前端，有时被称为*客户端*，是用户可以看到并与之交互的任何Web应用的可见部分。后端，有时被称为*服务器端*，是程序员代码所在的部分，与数据库和其他服务器基础设施相结合。
- en: Web developers who are skilled in both the client side (frontend development)
    and server side (backend development) are usually referred to as *full* *stack
    developers*.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 精通客户端（前端开发）和服务器端（后端开发）的Web开发者通常被称为*全栈*开发者。
- en: In this book, we will use React as a library to develop an intuitive **user
    interface** (**UI**), or frontend, and Flask, a **microframework**, to build backend
    business logic components.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将使用React作为库来开发直观的**用户界面**（**UI**）或前端，以及使用**微框架**Flask来构建后端业务逻辑组件。
- en: Let’s take a closer look at these tools and the reasons we have chosen them.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更仔细地看看这些工具以及我们选择它们的原因。
- en: Why should we choose React?
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们为什么选择React？
- en: Building UIs for web applications is an essential part of web development. Interestingly,
    most web developers find it difficult to choose the most suitable JavaScript frontend
    library or framework to build UIs. In a moment, we will see why choosing React
    will help your career growth and projects.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为Web应用构建用户界面是Web开发的一个基本部分。有趣的是，大多数Web开发者发现很难选择最合适的JavaScript前端库或框架来构建用户界面。稍后我们将看到为什么选择React将有助于你的职业发展和项目。
- en: '**React** is a popular open source library, with an excellent community of
    developers at Meta Platforms (formerly Facebook) actively maintaining it. React
    is the most commonly used library according to the *Stack Overflow 2021 Developer
    Survey* report, in which 41.4% of professional developers stated they had used
    React in the past year ([https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-framewors](https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-framewors)).
    So, what is the fuss about React?'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**React** 是一个流行的开源库，Meta Platforms（前身为 Facebook）的出色开发者社区正在积极维护它。根据 *Stack Overflow
    2021 开发者调查* 报告，React 是最常用的库，其中 41.4% 的专业开发者表示他们在过去一年中使用了 React ([https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-framewors](https://insights.stackoverflow.com/survey/2021#section-most-popular-technologies-web-framewors))。那么，React
    的争议在哪里呢？'
- en: React is simple to use to develop rich interactive interfaces for end users.
    You can start building reusable interface components for your web projects in
    no time. It is also easy to learn, as you will see in the implementation of the
    frontend project we’ll embark upon in this book. If you are already familiar with
    JavaScript, learning React is really simple, as React is JavaScript-centric.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: React 简单易用，可以开发丰富的交互式用户界面。你可以立即开始为你的网络项目构建可重用的界面组件。它也易于学习，正如你在本书中将要开始的 frontend
    项目实现中将会看到的那样。如果你已经熟悉 JavaScript，学习 React 真的非常简单，因为 React 以 JavaScript 为中心。
- en: One of the main reasons React might be with us as long as the internet lives
    is due to its usage among technology giants such as *Facebook*, *Uber Eats*, *Skype*,
    and *Netflix*. Additionally, React, being a library, focuses specifically on building
    UI components – and nothing more. Its component-based approach to developing web
    and mobile applications makes it insanely popular among developers.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: React 能够与互联网共存这么长时间的主要原因是它在像 *Facebook*、*Uber Eats*、*Skype* 和 *Netflix* 这样的技术巨头中的使用。此外，作为一个库，React
    专注于构建 UI 组件——仅此而已。它以组件为基础的方法开发 Web 和移动应用程序，使其在开发者中非常受欢迎。
- en: The further abstraction of the **Document Object Model** (**DOM**) in React
    to what is called the virtual DOM improves efficiency and performance in React
    applications. React uses special syntax, referred to as **JavaScript XML** (**JSX**),
    that allows you to write HTML elements in JavaScript, in contrast to the convention
    of putting JavaScript in HTML elements.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: React 中对 **文档对象模型**（**DOM**）的进一步抽象化，称为虚拟 DOM，提高了 React 应用程序中的效率和性能。React 使用一种特殊的语法，称为
    **JavaScript XML**（**JSX**），允许你在 JavaScript 中编写 HTML 元素，这与在 HTML 元素中放置 JavaScript
    的传统做法相反。
- en: You don’t have to learn complex templating languages such as Handlebars, EJS,
    and Pug. JSX helps you write React components using familiar HTML syntax with
    the help of a transpiler called **Babel**. Some JavaScript frameworks are very
    opinionated – for instance, Angular, Ember.js, and Vue. These frameworks have
    a rigid structural way of building web applications, unlike React, which gives
    you the freedom and flexibility to select your libraries, architectures, and tools.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你不必学习像 Handlebars、EJS 和 Pug 这样的复杂模板语言。JSX 帮助你使用熟悉的 HTML 语法编写 React 组件，这得益于一个名为
    **Babel** 的转换器。一些 JavaScript 框架非常具有意见性——例如 Angular、Ember.js 和 Vue。这些框架有严格的构建 Web
    应用程序的结构方式，与 React 不同，React 给你选择库、架构和工具的自由和灵活性。
- en: Also, if you are interested in developing mobile applications, React Native
    can be a valuable tool. Your knowledge of React and its components, which seamlessly
    integrate with native views, empowers you to create both Android and iOS apps
    efficiently.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你对开发移动应用程序感兴趣，React Native 可以是一个非常有价值的工具。你对 React 及其组件的了解，这些组件可以无缝地与原生视图集成，使你能够高效地创建
    Android 和 iOS 应用程序。
- en: Now, let’s get our hands dirty and set up environments with React.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们动手设置 React 环境。
- en: Setting up the development environment with React
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 React 设置开发环境
- en: In this section, you will set up a development environment for the React application
    project we’ll build in the course of this book.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将为本书中我们将构建的 React 应用程序项目设置开发环境。
- en: 'To code and test React applications on your local machine, there are a few
    steps you need to take:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要在你的本地机器上编码和测试 React 应用程序，你需要采取以下几步：
- en: 'Install Node.js:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Node.js：
- en: To download and install the stable version of Node.js, go to [https://nodejs.org/en/](https://nodejs.org/en/).
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要下载和安装 Node.js 的稳定版本，请访问 [https://nodejs.org/en/](https://nodejs.org/en/)。
- en: '**Node.js** is a runtime development environment for JavaScript and, by extension,
    React applications. Node.js comes bundled with a command-line utility tool and
    package manager called **Node Package Manager** (**NPM**). Node.js and NPM are
    the tools required to successfully build and run any React applications.'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**Node.js** 是 JavaScript 及其扩展（如 React 应用程序）的运行时开发环境。Node.js 随附一个命令行实用工具和包管理器，称为
    **Node 包管理器** （**NPM**）。Node.js 和 NPM 是成功构建和运行任何 React 应用程序所需的工具。'
- en: Click and download the version recommended for most users. Install by following
    the installation steps.
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击并下载为大多数用户推荐的版本。按照安装步骤进行安装。
- en: 'To check whether Node.js was successfully installed, type the following into
    your command prompt:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查 Node.js 是否成功安装，请在您的命令提示符中输入以下内容：
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To check the version of NPM, type the following in the terminal or command
    prompt (`cmd`) for Windows:'
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要检查 NPM 的版本，请在终端或 Windows 的命令提示符 (`cmd`) 中输入以下内容：
- en: '[PRE1]'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The following screenshot shows that node and `npm` are working.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示 node 和 `npm` 正在运行。
- en: '![Figure 1.1 – A screenshot showing that Node.js and NPM are working](img/Figure_1.1_B18554.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.1 – 显示 Node.js 和 NPM 正在工作的截图](img/Figure_1.1_B18554.jpg)'
- en: Figure 1.1 – A screenshot showing that Node.js and NPM are working
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1 – 显示 Node.js 和 NPM 正在工作的截图
- en: Install **Visual Studio Code** (**VS Code**).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 **Visual Studio Code** （**VS Code**）。
- en: '**VS Code** is a free code editor you can use to build and debug web applications.
    The ready-set-code approach of the VS Code editor makes it a great tool for development.
    VS Code has built-in support for IntelliSense code completion and features for
    code refactoring. Third-party extensions in VS Code with hundreds of web technologies
    tools allow you to be more productive and efficient.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**VS Code** 是一个免费的代码编辑器，您可以使用它来构建和调试网络应用。VS Code 编辑器的即点即用的代码方法使其成为开发的一个优秀工具。VS
    Code 具有内置的 IntelliSense 代码补全和代码重构功能。VS Code 中的第三方扩展和数百种网络技术工具可以让您更高效地工作。'
- en: Note
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: There are other code editors available to developers, but VS Code is highly
    recommended.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者还有其他代码编辑器可供选择，但 VS Code 非常推荐。
- en: Install Git Client.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Git 客户端。
- en: 'Git Client is the command-line interface used to interact with Git repositories.
    There’ll be more on Git later in the chapter. We need this tool to track changes
    in our project files. To install Git Client, download it from [https://git-scm.com/downloads](https://git-scm.com/downloads):'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Git 客户端是用于与 Git 仓库交互的命令行界面。在本章的后面部分将有更多关于 Git 的内容。我们需要这个工具来跟踪项目文件中的更改。要安装 Git
    客户端，从 [https://git-scm.com/downloads](https://git-scm.com/downloads) 下载它：
- en: Choose your **operating system** (**OS**) type and install the software.
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择您的 **操作系统** （**OS**） 类型并安装软件。
- en: '![Figure 1.2 – A screenshot of the Git download page](img/Figure_1.2_B18554.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.2 – Git 下载页面的截图](img/Figure_1.2_B18554.jpg)'
- en: Figure 1.2 – A screenshot of the Git download page
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2 – Git 下载页面的截图
- en: 'To test whether you successfully installed Git, type the following in your
    system’s command prompt:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试您是否成功安装了 Git，请在您的系统命令提示符中输入以下内容：
- en: '[PRE2]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: "![Figure 1.3 – A screenshot showing the Git Client \uFEFFversion in Windows](img/Figure_1.3_B18554.jpg)"
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.3 – 显示 Windows 中 Git 客户端版本的截图](img/Figure_1.3_B18554.jpg)'
- en: Figure 1.3 – A screenshot showing the Git Client version in Windows
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3 – 显示 Windows 中 Git 客户端版本的截图
- en: We have now set up the development environment for the React applications we’ll
    be building. This completes the frontend development environment. Let’s do the
    same for Flask as well, and delve into why you need to choose Flask to build your
    backend.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经为将要构建的 React 应用程序设置了开发环境。这完成了前端开发环境。让我们也为 Flask 做同样的事情，并深入探讨为什么你需要选择 Flask
    来构建你的后端。
- en: Why should we choose Flask?
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么我们应该选择 Flask？
- en: '**Flask** is a minimalistic framework to develop modern Python web applications.
    It is a great toolkit for building enterprise-grade, scalable, reliable, and maintainable
    applications.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Flask** 是一个用于开发现代 Python 网络应用的简约框架。它是一个构建企业级、可扩展、可靠和可维护应用的优秀工具包。'
- en: Moreover, the framework is easy to learn. Flask has no boilerplate code that
    must be used by developers, unlike many alternative frameworks such as Django.
    It is absolutely lightweight to the core. Flask as a microframework only provides
    developers with starting components to build web applications, while Django tends
    to suggest you build your web apps in a certain structure using a complete set
    of gears or components within its framework.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，该框架易于学习。Flask 没有开发者必须使用的样板代码，与许多替代框架（如 Django）不同。它核心上绝对轻量。作为微框架的 Flask 只为开发者提供构建网络应用的起始组件，而
    Django 则倾向于建议你使用其框架内完整的一套齿轮或组件以某种结构来构建你的网络应用。
- en: With Flask, developers have amazing freedom to choose their database, template
    engine, and deployment process; they can also decide how to manage users, sessions,
    web applications, and security.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Flask，开发者有惊人的自由度来选择他们的数据库、模板引擎和部署流程；他们还可以决定如何管理用户、会话、网络应用和安全。
- en: Flask’s scalability has encouraged some technology companies to migrate to Flask
    to efficiently implement their microservices infrastructure. A **microservice**
    is a small, independent, and loosely coupled software component that focuses on
    performing a specific function within a larger application architecture.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 的可扩展性促使一些科技公司迁移到 Flask 以高效地实施他们的微服务基础设施。**微服务**是一个小型、独立且松散耦合的软件组件，专注于在更大的应用架构中执行特定功能。
- en: A microservice is like having a team of specialists, each focusing on a particular
    task, working together harmoniously to create something amazing. As I’m sure you
    would agree, cloud computing has revolutionized application development and deployment
    irrevocably. The science of scale that is at play with cloud computing is making
    it the new normal for both start-ups and enterprises. *Pinterest* is one such
    example.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 微服务就像拥有一支由专家组成的团队，每个专家专注于特定任务，和谐地共同工作以创造惊人的成果。正如你可能会同意的，云计算已经不可逆转地改变了应用开发和部署。云计算中的规模科学正在使其成为初创公司和企业的常态。*Pinterest*
    就是这样一个例子。
- en: Pinterest is one of the most visited websites in the world. It is an image-sharing
    and social media services platform. According to Statista, as of the fourth quarter
    of 2021, Pinterest had an average of 431 million monthly active users ([https://www.statista.com/statistics/463353/pinterest-global-mau/](https://www.statista.com/statistics/463353/pinterest-global-mau/)).
    Having started their platform with the Django framework, they opted for Flask
    to develop their API and build a more stable microservice architecture.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Pinterest 是世界上访问量最大的网站之一。它是一个图片分享和社交媒体服务平台。根据 Statista 的数据，截至 2021 年第四季度，Pinterest
    平均每月有 4.31 亿活跃用户 ([https://www.statista.com/statistics/463353/pinterest-global-mau/](https://www.statista.com/statistics/463353/pinterest-global-mau/))。他们最初使用
    Django 框架启动平台，后来选择了 Flask 来开发他们的 API 并构建一个更稳定的微服务架构。
- en: Flask is still currently the main core backend technology powering Pinterest,
    a heavily trafficked social web application. In summary, it is easier to develop
    APIs and integrate varied databases in Flask. You can take it to the bank with
    such simplicity and flexibility assurance. If you understand Python well, then
    you should be able to contribute to a Flask application easily.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 仍然是 Pinterest，一个高流量社交网络应用的主要核心后端技术。总的来说，在 Flask 中开发 API 和集成各种数据库更容易。你可以凭借这样的简单性和灵活性保证来信赖它。如果你精通
    Python，那么你应该能够轻松地为 Flask 应用做出贡献。
- en: Flask is less opinionated, so there are fewer standards to learn. Django, conversely,
    gives you all you need to develop web applications – complete solutions in a box.
    However, the issue of scaling is what most experienced Python developers have
    had to deal with in their Django projects.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Flask 更少地强加观点，因此需要学习的标准更少。相反，Django 提供了你开发网络应用所需的一切——一个盒子里的完整解决方案。然而，扩展问题是最有经验的
    Python 开发者在他们的 Django 项目中必须处理的问题。
- en: When you implement an out-of-the-box solution in your project, you have got
    a giant Django framework to deal with, which may impact negatively your project’s
    time to market and performance.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在项目中实施现成的解决方案时，你将不得不处理一个庞大的 Django 框架，这可能会对你的项目上市时间和性能产生负面影响。
- en: When you combine these battle-tested technology stacks, React and Flask, in
    your project, you can be sure of development gains in scalability, reliability,
    reusability, maintainability, and secure web and mobile applications.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在项目中结合这些经过实战考验的技术栈，React 和 Flask，你可以确信在可扩展性、可靠性、可重用性、可维护性以及安全的网页和移动应用开发方面将获得开发上的收益。
- en: In this section, we discussed why you should add React and Flask to your web
    application’s development toolkit.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们讨论了为什么你应该将 React 和 Flask 添加到你的网络应用程序开发工具包中。
- en: Setting up the development environment with Flask
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Flask 设置开发环境
- en: 'If you want to start developing web applications on your local computer with
    Flask as your backend framework, you need to have Python and a few other packages
    installed. In this section, we will set up a Flask development environment. To
    do so, follow these steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想在本地计算机上使用 Flask 作为后端框架来开发网络应用程序，你需要安装 Python 和一些其他包。在本节中，我们将设置 Flask 开发环境。为此，请按照以下步骤操作：
- en: Install Python.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Python。
- en: '[PRE3]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'You will get the following output:'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![Figure 1.4 – A screenshot showing the Python version](img/Figure_1.4_B18554.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – 显示 Python 版本的截图](img/Figure_1.4_B18554.jpg)'
- en: Figure 1.4 – A screenshot showing the Python version
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – 显示 Python 版本的截图
- en: 'Alternatively, you can use the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以使用以下命令：
- en: '[PRE4]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In macOS or Linux, the `Python3 —version` command also works to check the Python
    version number and, by extension, the Python installation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 或 Linux 中，`Python3 —version` 命令也可以用来检查 Python 版本号，以及扩展到 Python 安装。
- en: If Python has not been installed on your computer system, go to [https://www.python.org/downloads/](https://www.python.org/downloads/),
    choose the latest version suitable for your OS, and download and install it on
    your system.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的计算机系统上尚未安装 Python，请访问 [https://www.python.org/downloads/](https://www.python.org/downloads/)，选择适合你操作系统的最新版本，并在你的系统上下载和安装它。
- en: Update `pip`.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `pip`。
- en: '`pip`, type in this command on your terminal:'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`pip`，在你的终端中输入此命令：'
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Create a virtual environment.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境。
- en: '[PRE6]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'For Windows users, try typing the following if you have issues:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows 用户，如果你遇到问题，请尝试输入以下内容：
- en: '[PRE7]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: You use `venv` for Python version 3 and `virtualenv` for Python version 2, depending
    on the Python version on your local machine.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你本地机器上的 Python 版本，使用 `venv` 用于 Python 3，使用 `virtualenv` 用于 Python 2。
- en: 'Activate the virtual environment in Windows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Windows 中激活虚拟环境：
- en: '[PRE8]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Note:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：
- en: If executing the command `$ venv\Scripts\activate` doesn't function as expected,
    I recommend readers to attempt using `$` `venv\Scripts\activate.bat` instead.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 如果执行命令 `$ venv\Scripts\activate` 没有按预期工作，我建议读者尝试使用 `$` `venv\Scripts\activate.bat`。
- en: 'Activate the virtual environment on macOS or Linux:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 或 Linux 上激活虚拟环境：
- en: '[PRE9]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Install Flask:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '安装 Flask:'
- en: '[PRE10]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The following screenshot shows the Flask installation command operation.
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图显示了 Flask 安装命令的操作。
- en: '![Figure 1.5 – A screenshot showing the terminal commands for the flask installation](img/Figure_1.5_B18554.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.5 – 显示 Flask 安装终端命令的截图](img/Figure_1.5_B18554.jpg)'
- en: Figure 1.5 – A screenshot showing the terminal commands for the flask installation
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.5 – 显示 Flask 安装终端命令的截图
- en: 'To test the Flask development environment, create a file named `app.py` in
    your project directory. Open the `app.py` file in the VS code editor and paste
    in the following:'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要测试 Flask 开发环境，在你的项目目录中创建一个名为 `app.py` 的文件。在 VS 代码编辑器中打开 `app.py` 文件，并粘贴以下内容：
- en: '[PRE11]'
  id: totrans-109
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Open the terminal and set your environment variables:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开终端并设置你的环境变量：
- en: '`.env` or `.flaskenv` to store your environment variables and secrets. Inside
    `.flaskenv`, add the following:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用 `.env` 或 `.flaskenv` 来存储你的环境变量和秘密。在 `.flaskenv` 中，添加以下内容：
- en: '[PRE12]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Then, enter the `pip install python-dotenv` command in the terminal to install
    `Python-dotenv`. With `python-dotenv`, you can load the variables from the `.env`
    or `.flaskenv` file into your application’s environment, making them accessible
    as if they were set directly as system environment variables.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在终端中输入 `pip install python-dotenv` 命令来安装 `Python-dotenv`。使用 `python-dotenv`，你可以将
    `.env` 或 `.flaskenv` 文件中的变量加载到你的应用程序环境中，使它们像直接设置系统环境变量一样可访问。
- en: 'To run the Flask app, use the following command, and you will get output similar
    to *Figure 1**.6*:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行 Flask 应用程序，使用以下命令，你将得到类似于 *图 1**.6* 的输出：
- en: '[PRE13]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![Figure 1.6 – A screenshot showing how to run the Flask application](img/Figure_1.6_B18554.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 显示如何运行 Flask 应用程序的截图](img/Figure_1.6_B18554.jpg)'
- en: Figure 1.6 – A screenshot showing how to run the Flask application
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.6 – 显示如何运行 Flask 应用程序的截图
- en: Note
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To deactivate the virtual environment, simply run `$` `deactivate`.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要取消激活虚拟环境，只需运行 `$` `deactivate`。
- en: Having set up and tested the development environment for Flask, we’ll briefly
    discuss Git to understand the place of source version control in web application
    development and how GitHub has provided an online collaborative platform to tackle
    source code and encourage teamwork.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在为Flask设置并测试了开发环境之后，我们将简要讨论Git，以了解源代码版本控制在Web应用开发中的位置以及GitHub如何提供了一个在线协作平台来处理源代码并鼓励团队合作。
- en: Getting ready with Git
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 准备使用Git
- en: '**Git** is a tool for version control in software development. So, what does
    version control mean?'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git**是软件开发中的版本控制工具。那么，版本控制是什么意思呢？'
- en: As a professional developer, you will need to write code as often as possible.
    Let’s say you work on a project and it’s 80% complete. The project lead has asked
    you to add a new feature to your code base, and it is urgent as the client wants
    your team to add that as part of the features required in the minimum viable product
    you will be presenting in a few days’ time.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一名专业开发者，你需要尽可能多地编写代码。假设你正在处理一个项目，并且已经完成了80%。项目负责人要求你向代码库添加一个新功能，这是紧急的，因为客户希望你的团队将此作为将在几天内展示的最小可行产品所需的功能之一。
- en: You quickly abandon what you were working on before and start working on this
    new feature. You make changes to one or two files to incorporate the new features.
    In the shortest time possible, you made the new feature work. Unfortunately, while
    trying to add the new feature, you unintentionally tampered with code in other
    files as well, and you don’t even know which one of them is affected.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你迅速放弃了之前正在处理的工作，开始着手这个新功能。你更改了一个或两个文件以整合新功能。在尽可能短的时间内，你使新功能工作。不幸的是，在尝试添加新功能时，你不小心修改了其他文件中的代码，甚至不知道哪个文件受到了影响。
- en: Now imagine you have a genie that can tell you where in your code you made your
    change and the exact altered line of code. Wouldn’t that be awesome? Life would
    be super easy, saving you lots of development time. That’s the magic of version
    control!
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在想象一下，你有一个可以告诉你代码中更改了什么以及确切更改的代码行的神灯。那不是太棒了吗？生活将变得超级简单，节省你大量的开发时间。这就是版本控制的魔力！
- en: Version control helps you keep track of changes to the code base in your software
    project. It is a great way of helping developers monitor changes in their source
    code. Moreover, it eases the collaborative work of the development team. With
    version control, you can track code base changes, who is changing the code base,
    and when the change happens. And, if changes are not desirable, you can quickly
    reverse them.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 版本控制帮助您跟踪软件项目中代码库的变化。这是帮助开发者监控其源代码变化的一种很好的方式。此外，它简化了开发团队的协作工作。有了版本控制，您可以跟踪代码库的变化、谁在更改代码库以及何时发生更改。而且，如果更改不可取，您可以快速撤销它们。
- en: Developers have used many different version control tools over the years. Git
    happens to be the current market leader.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者多年来使用了许多不同的版本控制工具。Git恰好是当前的市场领导者。
- en: How does Git work?
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git是如何工作的？
- en: Git is known as **distributed version control software**. In a work environment
    where collaboration among team members is necessary, a complete copy of the entire
    source code will be available on every contributor’s local computer system; we
    can call this a local repository.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Git被称为**分布式版本控制软件**。在一个需要团队成员之间协作的工作环境中，整个源代码的完整副本将存储在每个贡献者的本地计算机系统上；我们可以称之为本地仓库。
- en: Git tracks the local repository, maintaining a record of all the changes that
    occur within the local repository. It saves you the time and energy of keeping
    multiple versions of the project in separate local directories on your computer.
    This makes sharing changes to the source code between collaborators effortless.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Git跟踪本地仓库，记录本地仓库中发生的所有更改。它节省了你将多个项目版本保存在计算机上不同本地目录中的时间和精力。这使得在协作者之间共享源代码更改变得轻而易举。
- en: 'There are three primary states in Git you should know about:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Git中有三个主要的状态，你应该了解：
- en: '**Modified**: In this state, files have been changed, but the changes have
    not yet been added to the local database by Git. These changes are the ones made
    since the last commit on the files.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**修改状态**：在这个状态下，文件已经更改，但这些更改尚未被Git添加到本地数据库中。这些更改是自上次提交到文件以来的更改。'
- en: '**Staged**: In this state, the changes have been tracked by Git and will be
    added to the Git local database as such in the next commit.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**暂存状态**：在这个状态下，Git已经跟踪了这些更改，将在下一次提交中将这些更改添加到Git本地数据库中。'
- en: '**Committed**: In this state, the changed files have successfully been added
    to the git local database.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**已提交**：在此状态下，更改的文件已成功添加到 git 本地数据库中。'
- en: Let’s dive deeper into version control concepts and learn how to create local
    and remote repositories. Before that, it will be helpful to understand the difference
    between Git and GitHub.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入了解版本控制概念，并学习如何创建本地和远程仓库。在此之前，了解 Git 和 GitHub 之间的区别将很有帮助。
- en: Git versus GitHub
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 与 GitHub 的区别
- en: As discussed earlier, Git is an open source tool for version control. It is
    simply used to track changes in a code base, track the identity of the person
    who made the change, and allow team coding collaboration among developers. When
    you set up your project on your local machine, Git is used to track changes in
    all the activities – adding files, updating existing files, or creating new folders.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Git 是一个开源的版本控制工具。它简单用于跟踪代码库中的更改，跟踪更改的人的身份，并允许开发者之间的团队编码协作。当你将项目设置在本地机器上时，Git
    用于跟踪所有活动的更改 – 添加文件、更新现有文件或创建新文件夹。
- en: It basically keeps a historical record of your source code. Conversely, GitHub
    is a cloud-based source code hosting and project management service. It simply
    allows you to use Git as a tool to keep your code base in a remotely hosted environment
    to track changes in your code base or collaboratively allow developers to work
    on projects.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上保存了你的源代码的历史记录。相反，GitHub 是一个基于云的源代码托管和项目管理服务。它简单允许你使用 Git 作为工具，将你的代码库保存在远程托管环境中以跟踪代码库中的更改，或允许开发者协作工作在项目上。
- en: Setting up a local repository
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设置本地仓库
- en: 'Install Git Client from [https://git-scm.com/download/](https://git-scm.com/download/).
    Ignore this step if you already have it installed on your machine:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://git-scm.com/download/](https://git-scm.com/download/) 安装 Git 客户端。如果你已经在你的机器上安装了它，则忽略此步骤：
- en: 'Let’s start by creating a working directory named `local_repository` in the
    terminal:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在终端中创建一个名为 `local_repository` 的工作目录：
- en: '[PRE14]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Set the directory as a working directory:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将目录设置为工作目录：
- en: '[PRE15]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'You will get the following output:'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![Figure 1.7 – A screenshot creating index.html](img/Figure_1.7_B18554.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 创建 index.html 的屏幕截图](img/Figure_1.7_B18554.jpg)'
- en: Figure 1.7 – A screenshot creating index.html
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.7 – 创建 index.html 的屏幕截图
- en: Note
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are getting an error, `'touch' is not recognized as an internal or external
    command, operable program or batch file`, with `touch index.html`, type `npm install
    -g touch-cli` in your terminal if you have Node.js installed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到错误，`'touch'` 不是一个内部或外部命令，不是一个可操作的程序或批处理文件，使用 `touch index.html`，如果你的终端上安装了
    Node.js，请输入 `npm install -g touch-cli`。
- en: 'Set up your global credentials:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置你的全局凭据：
- en: '[PRE16]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: With the preceding commands, you set a global username and email address as
    credentials to track your contributions in the project source code.
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用前面的命令，你设置了全局用户名和电子邮件地址作为凭据，以跟踪你在项目源代码中的贡献。
- en: 'Your working directory now has a new file, `index.html`. Enter this command
    in the terminal, and you will get output similar to *Figure 1**.8*:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你的工作目录现在有一个新文件，`index.html`。在终端中输入此命令，你将得到类似于 *图 1.8* 的输出：
- en: '[PRE17]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![Figure 1.8 – A screenshot showing the creation of the empty Git repository](img/Figure_1.8_B18554.jpg)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 显示创建空 Git 仓库的屏幕截图](img/Figure_1.8_B18554.jpg)'
- en: Figure 1.8 – A screenshot showing the creation of the empty Git repository
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.8 – 显示创建空 Git 仓库的屏幕截图
- en: With `git init`, you create an empty local git repository. Git now has a local
    database or directory that contains all the metadata to track changes in your
    working directory. The `.git` folder is usually hidden in your working directory.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `git init`，你创建了一个空的本地 Git 仓库。Git 现在有一个本地数据库或目录，其中包含跟踪工作目录中更改的所有元数据。`.git`
    文件夹通常隐藏在你的工作目录中。
- en: 'To add the content of your working directory to your repository, enter the
    following command:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要将工作目录的内容添加到你的仓库中，请输入以下命令：
- en: '[PRE18]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This represents the staging state in Git. The changes are tracked by Git and
    will be added to the Git local database in the next commit.
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这代表了 Git 中的暂存状态。更改将由 Git 跟踪，并在下一次提交时添加到 Git 本地数据库中。
- en: 'To verify this, enter the following command, and you will get output similar
    to *Figure 1**.9*:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了验证这一点，输入以下命令，你将得到类似于 *图 1.9* 的输出：
- en: '[PRE19]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '![Figure 1.9 – A screenshot showing the staging state of Git](img/Figure_1.9_B18554.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 显示 Git 暂存状态的屏幕截图](img/Figure_1.9_B18554.jpg)'
- en: Figure 1.9 – A screenshot showing the staging state of Git
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.9 – 显示 Git 暂存状态的屏幕截图
- en: Note
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To add multiple contents, enter `git add`.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加多个内容，请输入 `git add`。
- en: 'Now, you will need to commit to a local repository. This commit stage helps
    you track changes in your code base with a user-friendly message. To commit with
    a message flag, enter the following command, and you will get output similar to
    *Figure 1**.10*:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，你需要将本地仓库提交。这个提交阶段可以帮助你通过友好的消息跟踪代码库中的更改。要使用消息标志进行提交，请输入以下命令，你将得到类似于 *图 1**.10*
    的输出：
- en: '[PRE20]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '![Figure 1.10 – A screenshot showing the commit state of Git](img/Figure_1.10_B18554.jpg)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 展示 Git 提交状态的截图](img/Figure_1.10_B18554.jpg)'
- en: Figure 1.10 – A screenshot showing the commit state of Git
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.10 – 展示 Git 提交状态的截图
- en: Note
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is always best practice to include a message in your commit command. This
    helps track changes, and if you have to revert, you can use a commit message as
    your saving point.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交命令中包含消息始终是最好的实践。这有助于跟踪更改，如果你需要回滚，你可以使用提交消息作为你的保存点。
- en: Now you understand how to create a local repository, add files to it, and transition
    files from the staging area to the committed state. Let’s briefly discuss how
    you can create a remote repository on GitHub for the cloud-based storage of your
    source code for possible collaboration.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经了解了如何创建本地仓库，向其中添加文件，以及将文件从暂存区过渡到提交状态。让我们简要讨论如何你在 GitHub 上创建远程仓库，以在云端存储你的源代码，以便可能的协作。
- en: Setting up a remote repository with GitHub
  id: totrans-174
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 GitHub 设置远程仓库
- en: 'In today’s digital age, GitHub has become an essential skill for seamless collaboration
    and version control in software development projects. Let’s delve into setting
    up a remote repository with GitHub:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在当今的数字时代，GitHub 已经成为软件开发项目中无缝协作和版本控制的一项基本技能。让我们深入了解如何使用 GitHub 设置远程仓库：
- en: 'Create a developer account on the GitHub site: [https://github.com/](https://github.com/).'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 GitHub 网站上创建一个开发者账户：[https://github.com/](https://github.com/)。
- en: '![Figure 1.11 – A screenshot showing the GitHub signup page](img/Figure_1.11_B18554.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – 展示 GitHub 注册页面的截图](img/Figure_1.11_B18554.jpg)'
- en: Figure 1.11 – A screenshot showing the GitHub signup page
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 展示 GitHub 注册页面的截图
- en: 'Log in and click on **New**, and you will get the following screen:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录并点击 **新建**，你将看到以下屏幕：
- en: '![Figure 1.12 – A screenshot showing the staging state of Git](img/Figure_1.12_B18554.jpg)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.12 – 展示 Git 预发布状态的截图](img/Figure_1.12_B18554.jpg)'
- en: Figure 1.12 – A screenshot showing the staging state of Git
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.12 – 展示 Git 预发布状态的截图
- en: 'Once you have created your new repository, enter the following command in your
    current working directory:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦你创建了新的仓库，请在当前工作目录中输入以下命令：
- en: '[PRE21]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The preceding commands move your local repository to a remote cloud-based repository
    to track your code base changes.
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前面的命令将你的本地仓库移动到一个远程云端仓库，以跟踪你的代码库更改。
- en: In summary, we discussed Git as a required tool for web developers in the modern
    age. You now know the difference between Git and GitHub. We also discussed basic,
    useful commands for a version control operation, either in a local or remote repository.
    Next, we’ll dive into the real-world project we will build in this book using
    React and Flask.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，我们讨论了 Git 作为现代网络开发者所需的一项工具。你现在知道了 Git 和 GitHub 之间的区别。我们还讨论了用于版本控制操作的基本、有用的命令，无论是在本地还是远程仓库中。接下来，我们将深入探讨本书中我们将使用
    React 和 Flask 构建的实际项目。
- en: What will we build?
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 我们将构建什么？
- en: In this book, we will build a full stack, database-driven web application for
    conference speakers. It is called *Bizza*. Users will be able to see the directory
    of speakers for events of interest to them, events, schedules, and the titles
    of the papers those speakers are presenting. The solution will include frontend
    development with React, authentication, authorizations, and REST API design with
    Flask.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们将构建一个全栈、数据库驱动的网络应用程序，用于会议演讲者。它被称为 *Bizza*。用户将能够查看他们感兴趣的活动演讲者目录、活动、日程以及演讲者所展示的论文标题。解决方案将包括使用
    React 进行前端开发、身份验证、授权以及使用 Flask 设计 REST API。
- en: We will start by implementing the frontend in the initial few chapters of the
    book and subsequently implement the backend in later chapters.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先在本书的前几章中实现前端，然后在后面的章节中实现后端。
- en: Summary
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we provided a brief introduction to modern full stack web development,
    with an emphasis on the distinction between frontend and backend developers. We
    discussed the importance of React in building the user interfaces of web applications,
    and we explained how React and Flask are perfect tools to develop full stack web
    applications, owing to their simplicity, efficiency, and high performance when
    compared to rivals in the industry. The development environments for React and
    Flask were covered as well.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们简要介绍了现代全栈Web开发，重点介绍了前端和后端开发者的区别。我们讨论了React在构建Web应用程序用户界面中的重要性，并解释了为什么React和Flask是开发全栈Web应用程序的完美工具，因为与行业中的竞争对手相比，它们具有简单、高效和高性能的特点。同时，我们也涵盖了React和Flask的开发环境。
- en: Lastly, we discussed the importance of Git as a tool for version control and
    the project we will build in this book, *Bizza*.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们讨论了Git作为版本控制工具的重要性以及本书中将要构建的项目*Bizza*。
- en: In the next chapter, we’ll dive deeper into explaining components, props, and
    states in React to better understand how React applications are built. A typical
    React project structure will be discussed, with the aim of learning the functions
    of files and directories.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将更深入地解释React中的组件、属性和状态，以便更好地理解React应用程序是如何构建的。我们将讨论典型的React项目结构，目的是学习文件和目录的功能。
