["```py\ndef lambda_handler(event, context):\n    ...\n    return some_value\n```", "```py\n{\n  \"Temperature\": 10,\n  \"Wind\": -5\n}\n```", "```py\ndef handler_name(event, context):\n    message = 'Weather details. Temperature: {} and Wind: {}!'.format(event['Temperature'], event['Wind'])\n    return message\n```", "```py\ndef handler_name(event, context):\n    return {\n     \"statusCode\": 200,\n     \"Temperature\": 10,\n     \"Wind\": -5\n    }\n```", "```py\nimport logging\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\ndef handler_name(event, context):\n    logger.info('Process has finished and result will be returned')\n    return {\n     \"statusCode\": 200,\n     \"Temperature\": 10,\n     \"Wind\": -5\n    }\n```", "```py\n    import json\n    import urllib.parse\n    import boto3\n    print('Loading function')\n    s3 = boto3.client('s3')\n    def lambda_handler(event, context):\n        #print(\"Received event: \" + json.dumps(event, indent=2))\n        # Get the object from the event and show its content type\n        bucket = event['Records'][0]['s3']['bucket']['name']\n        key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')\n        try:\n            response = s3.get_object(Bucket=bucket, Key=key)\n            print(\"CONTENT TYPE: \" + response['ContentType'])\n            return response['ContentType']\n        except Exception as e:\n            print(e)\n            print('Error getting object {} from bucket {}. Make sure they exist and your zbucket is in the same region as this function.'.format(key, bucket))\n            raise e\n    ```"]