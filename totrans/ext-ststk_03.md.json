["```py\n'''\nTest module for Extending SaltStack\n\nThis module should be saved as salt/grains/testdata.py\n'''\n\ndef testdata():\n    '''\n    Return some test data\n    '''\n    return {'ztest1': True}\n```", "```py\n# salt-call --local grains.items\nlocal:\n ----------\n...\n virtual:\n physical\n zmqversion:\n 4.1.3\n ztest1:\n True\n\n```", "```py\n# salt-call --local grains.item ztest\nlocal:\n ----------\n ztest1:\n True\n\n```", "```py\nimport os.path\n\ndef __virtual__():\n    '''\n    Only load these grains if /tmp/ztest exists\n    '''\n    if os.path.exists('/tmp/ztest'):\n        return True\n    return False\n```", "```py\n# salt-call --local grains.item ztest\nlocal:\n ----------\n ztest:\n# touch /tmp/ztest\n# salt-call --local grains.item ztest\nlocal:\n ----------\n ztest:\n True\n\n```", "```py\ndef __virtual__():\n    '''\n    Only load these grains if /tmp/ztest exists\n    '''\n    if os.path.exists('/tmp/ztest'):\n        return True\n    if __opts__.get('ztest', False):\n        return True\n    return False\n```", "```py\n# rm /tmp/ztest\n# echo 'ztest: True' >> /etc/salt/minion\n# salt-call --local grains.item ztest\nlocal:\n ----------\n ztest:\n True\n\n```", "```py\nimport yaml\nimport salt.utils\n\ndef yaml_test():\n    '''\n    Return sample data from /etc/salt/test.yaml\n    '''\n    with salt.utils.fopen('/etc/salt/yamltest.yaml', 'r') as fh_:\n        return yaml.safe_load(fh_)\n```", "```py\n# echo 'yamltest: True' > /etc/salt/yamltest.yaml\n# salt-call --local grains.item yamltest\nlocal:\n ----------\n yamltest:\n True\n\n```", "```py\n'''\nTest module for Extending SaltStack.\n\nThis module should be saved as salt/grains/testdata.py\n'''\nimport os.path\nimport yaml\nimport salt.utils\n\ndef __virtual__():\n    '''\n    Only load these grains if /tmp/ztest exists\n    '''\n    if os.path.exists('/tmp/ztest'):\n        return True\n    if __opts__.get('ztest', False):\n        return True\n    return False\n\ndef testdata():\n    '''\n    Return some test data\n    '''\n    return {'ztest1': True}\n\ndef yaml_test():\n    '''\n    Return sample data from /etc/salt/test.yaml\n    '''\n    with salt.utils.fopen('/etc/salt/yamltest.yaml', 'r') as fh_:\n        return yaml.safe_load(fh_)\n```", "```py\n# cat /srv/pillar/top.sls\nbase:\n '*':\n - test\n\n```", "```py\n# cat /srv/pillar/test.sls\ntest_pillar: True\n\n```", "```py\next_pillar:\n  - test_pillar: True\n```", "```py\n'''\nThis is a test external pillar\n'''\n\ndef ext_pillar(minion_id, pillar, config):\n    '''\n    Return the pillar data\n    '''\n    return {'test_pillar': minion_id}\n```", "```py\n# salt-call --local pillar.item test_pillar\nlocal:\n ----------\n test_pillar:\n dufresne\n\n```", "```py\ndef ext_pillar(minion_id, pillar, command):\n    '''\n    Return the pillar data\n    '''\n    return {'test_pillar': {\n        'minion_id': minion_id,\n        'pillar': pillar,\n        'config': config,\n    }}\n```", "```py\next_pillar:\n  - test_pillar: Alas, poor Yorik. I knew him, Horatio.\n```", "```py\n# salt-call --local pillar.item test_pillar\nlocal:\n ----------\n test_pillar:\n ----------\n config:\n Alas, poor Yorik. I knew him, Horatio.\n minion_id:\n dufresne\n pillar:\n ----------\n test_pillar:\n True\n\n```", "```py\next_pillar:\n- cmd_yaml: cat /etc/salt/testyaml.yaml\n```", "```py\n[CRITICAL] The \"ext_pillar\" option is malformed\n```", "```py\n'''\nGet status from HTTP service in JSON format.\n\nThis file should be saved as salt/pillar/http_status.py\n'''\nimport salt.utils.http\n\ndef ext_pillar(minion_id, pillar, config):\n    '''\n    Call a web service which returns status in JSON format\n    '''\n    comps = config.split()\n    key = comps[0]\n    url = comps[1]\n    status = salt.utils.http.query(url, decode=True)\n    return {key: status['dict']}\n```", "```py\next_pillar\n  - http_status: github https://status.github.com/api/status.json\n```", "```py\n# salt-call --local pillar.item github\nlocal:\n ----------\n github:\n ----------\n last_updated:\n 2015-12-02T05:22:16Z\n status:\n good\n\n```", "```py\next_pillar\n  - http_status: github https://status.github.com/api/status.json\n  - http_status: github2 https://status.github.com/api/status.json\n```", "```py\n'''\nGet status from HTTP service in JSON format.\n\nThis file should be saved as salt/pillar/http_status.py\n'''\nimport json\nimport time\nimport datetime\nimport os.path\nimport salt.utils.http\n\ndef ext_pillar(minion_id,  # pylint: disable=W0613\n               pillar,  # pylint: disable=W0613\n               config):\n    '''\n    Return the pillar data\n    '''\n    comps = config.split()\n\n    key = comps[0]\n    url = comps[1]\n\n    refresh = False\n    status_file = '/tmp/status-{0}.json'.format(key)\n    if not os.path.exists(status_file):\n        refresh = True\n    else:\n        stamp = os.path.getmtime(status_file)\n        now = int(time.mktime(datetime.datetime.now().timetuple()))\n        if now - 60 >= stamp:\n            refresh = True\n\n    if refresh:\n        salt.utils.http.query(url, decode=True, decode_out=status_file)\n\n    with salt.utils.fopen(status_file, 'r') as fp_:\n        return {key: json.load(fp_)}\n```", "```py\n        stamp = os.path.getmtime(status_file)\n        now = int(time.mktime(datetime.datetime.now().timetuple()))\n```", "```py\n# salt-master --log-level debug\n\n```", "```py\n# salt <minionid> pillar.items\n\n```", "```py\n{\n    \"user\": \"larry\",\n    \"password\": \"123pass\"\n}\n```", "```py\nmyjson:\n    driver: json\n    json_file: /root/mydata.json\n```", "```py\n'''\nSDB module for JSON\n\nThis file should be saved as salt/sdb/json.py\n'''\nfrom __future__ import absolute_import\nimport salt.utils\nimport json\n\ndef get(key, profile=None):\n    '''\n    Get a value from a JSON file\n    '''\n    with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n        json_data = json.load(fp_)\n    return json_data.get(key, None)\n```", "```py\nsdb://<profile_name>/<key>\n```", "```py\n# salt-call --local sdb.get sdb://myjson/user\nlocal:\n larry\n\n```", "```py\nusername: sdb://myjson/user\npassword: sdb://myjson/password\n\n```", "```py\nfrom __future__ import absolute_import\nfrom salt.exceptions import CommandExecutionError\nimport salt.utils\nimport json\n\ndef get(key, profile=None):\n    '''\n    Get a value from a JSON file\n    '''\n    try:\n        with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n            json_data = json.load(fp_)\n        return json_data.get(key, None)\n    except IOError as exc:\n        raise CommandExecutionError (exc)\n    except KeyError as exc:\n        raise CommandExecutionError ('{0} needs to be configured'.format(exc))\n    except ValueError as exc:\n        raise CommandExecutionError (\n            'There was an error with the JSON data: {0}'.format(exc)\n        )\n```", "```py\nTraceback (most recent call last):\n  File \"/usr/bin/salt-call\", line 11, in <module>\n    salt_call()\n  File \"/usr/lib/python2.7/site-packages/salt/scripts.py\", line 333, in salt_call\n    client.run()\n  File \"/usr/lib/python2.7/site-packages/salt/cli/call.py\", line 58, in run\n    caller.run()\n  File \"/usr/lib/python2.7/site-packages/salt/cli/caller.py\", line 133, in run\n    ret = self.call()\n  File \"/usr/lib/python2.7/site-packages/salt/cli/caller.py\", line 196, in call\n    ret['return'] = func(*args, **kwargs)\n  File \"/usr/lib/python2.7/site-packages/salt/modules/sdb.py\", line 28, in get\n    return salt.utils.sdb.sdb_get(uri, __opts__)\n  File \"/usr/lib/python2.7/site-packages/salt/utils/sdb.py\", line 37, in sdb_get\n    return loaded_db[fun](query, profile=profile)\n  File \"/usr/lib/python2.7/site-packages/salt/sdb/json_sdb.py\", line 49, in get\n    with salt.utils.fopen(profile['json_fil']) as fp_:\nKeyError: 'json_fil'\n```", "```py\nError running 'sdb.get': 'json_fil' needs to be configured\n```", "```py\n__func_alias__ = {\n    'set_': 'set'\n}\n\ndef set_(key, value, profile=None):\n    '''\n    Set a key/value pair in a JSON file\n    '''\n    return value\n```", "```py\n# salt-call --local sdb.set sdb://myjson/password 321pass\nlocal:\n 321pass\n\n```", "```py\ndef set_(key, value, profile=None):\n    '''\n    Set a key/value pair in a JSON file\n    '''\n    with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n        json_data = json.load(fp_)\n\n    json_data[key] = value\n\n    with salt.utils.fopen(profile['json_file'], 'w') as fp_:\n        json.dump(json_data, fp_)\n\n    return get(key, profile)\n```", "```py\ndef set_(key, value, profile=None):\n    '''\n    Set a key/value pair in a JSON file\n    '''\n    try:\n        with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n            json_data = json.load(fp_)\n    except IOError as exc:\n        raise CommandExecutionError (exc)\n    except KeyError as exc:\n        raise CommandExecutionError ('{0} needs to be configured'.format(exc))\n    except ValueError as exc:\n        raise CommandExecutionError (\n            'There was an error with the JSON data: {0}'.format(exc)\n        )\n\n    json_data[key] = value\n\n    try:\n        with salt.utils.fopen(profile['json_file'], 'w') as fp_:\n            json.dump(json_data, fp_)\n    except IOError as exc:\n        raise CommandExecutionError (exc)\n\n    return get(key, profile)\n```", "```py\n# chattr +i /root/mydata.json\n# salt-call --local sdb.set sdb://myjson/password 456pass\nError running 'sdb.set': [Errno 13] Permission denied: '/root/mydata.json'\n\n```", "```py\n# chattr -i /root/mydata.json\n# salt-call --local sdb.set sdb://myjson/password 456pass\nlocal:\n 456pass\n\n```", "```py\n'''\nSDB module for JSON\n\nLike all sdb modules, the JSON module requires a configuration profile to\nbe configured in either the minion or master configuration file. This profile\nrequires very little. In the example:\n\n.. code-block:: yaml\n\n    myjson:\n      driver: json\n      json_file: /root/mydata.json\n\nThe ``driver`` refers to the json module and json_file is the path to the JSON\nfile that contains the data.\n\n.. code-block:: yaml\n\n    password: sdb://myjson/somekey\n'''\n```", "```py\nsdb://mydb/user=curly&group=ops&day=monday\n```", "```py\nuser=curly&group=ops&day=monday\n```", "```py\nmydb:\n  driver: <some SDB module>\n  fields:\n    user: sdbkey\n    group: ops\n    day: monday\n```", "```py\nsdb://mydb/curly\n```", "```py\nusername: sdb://mydb/curly\n```", "```py\n'''\nSDB module for JSON\n\nLike all sdb modules, the JSON module requires a configuration profile to\nbe configured in either the minion or master configuration file. This profile\nrequires very little. In the example:\n\n.. code-block:: yaml\n\n    myjson:\n      driver: json\n      json_file: /root/mydata.json\n\nThe ``driver`` refers to the json module and json_file is the path to the JSON\nfile that contains the data.\n\n.. code-block:: yaml\n\n    password: sdb://myjson/somekey\n'''\nfrom __future__ import absolute_import\nfrom salt.exceptions import CommandExecutionError\nimport salt.utils\nimport json\n\n__func_alias__ = {\n    'set_': 'set'\n}\n\ndef get(key, profile=None):\n    '''\n    Get a value from a JSON file\n    '''\n    try:\n        with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n            json_data = json.load(fp_)\n        return json_data.get(key, None)\n    except IOError as exc:\n        raise CommandExecutionError (exc)\n    except KeyError as exc:\n        raise CommandExecutionError ('{0} needs to be configured'.format(exc))\n    except ValueError as exc:\n        raise CommandExecutionError (\n            'There was an error with the JSON data: {0}'.format(exc)\n        )\n\ndef set_(key, value, profile=None):  # pylint: disable=W0613\n    '''\n    Set a key/value pair in a JSON file\n    '''\n    try:\n        with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n            json_data = json.load(fp_)\n    except IOError as exc:\n        raise CommandExecutionError (exc)\n    except KeyError as exc:\n        raise CommandExecutionError ('{0} needs to be configured'.format(exc))\n    except ValueError as exc:\n        raise CommandExecutionError (\n            'There was an error with the JSON data: {0}'.format(exc)\n        )\n\n    json_data[key] = value\n\n    try:\n        with salt.utils.fopen(profile['json_file'], 'w') as fp_:\n            json.dump(json_data, fp_)\n    except IOError as exc:\n        raise CommandExecutionError (exc)\n\n    return get(key, profile)\n```", "```py\n<setting name>: sdb://<profile name>/<key>\n```", "```py\nmy-openstack-config:\n  identity_url: https://keystone.example.com:35357/v2.0/\n  compute_region: intermountain\n  compute_name: Compute\n  tenant: sdb://openstack_creds/tenant\n  user: sdb://openstack_creds/username\n  ssh_key_name: sdb://openstack_creds/keyname\n```", "```py\nimport logging\nlog = logging.getLogger(__name__)\n```", "```py\ndef get(key, profile=None):\n    '''\n    Get a value from a JSON file\n    '''\n    import pprint\n    log.debug(key)\n    log.debug(pprint.pformat(profile))\n    with salt.utils.fopen(profile['json_file'], 'r') as fp_:\n        json_data = json.load(fp_)\n    return json_data.get(key, None)\n```"]