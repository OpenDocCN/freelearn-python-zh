- en: Chapter 20. Jake Vanderplas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![Jake Vanderplas](img/B08180_04_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Jake Vanderplas is a data scientist and the author of *Python Data Science Handbook*.
    He is a director of open software for the University of Washington's eScience
    Institute, where he works with researchers from a variety of disciplines. Previous
    roles at the University of Washington include director of research in physical
    sciences. Jake is a long-time contributor to the Python scientific stack and has
    worked on projects such as SciPy, scikit-learn and Altair. He regularly speaks
    at Python conferences in the US and has delivered keynote speeches at PyCon, PyData
    and SciPy. Jake is a visiting researcher at Google and writes a tech blog.
  prefs: []
  type: TYPE_NORMAL
- en: '**Discussion themes: Python in data science and astronomy.**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Jake Vanderplas here: @jakevd**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mike Driscoll**: Could you tell me a little about your background?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas**: I studied physics as an undergraduate and spent a few
    years after college working in the outdoors as an environmental educator and a
    mountaineering guide.'
  prefs: []
  type: TYPE_NORMAL
- en: After a few summers sleeping under the stars each night in California's Sierra
    Nevada, I fell in love with astronomy and decided to take advantage of my physics
    background to head to graduate school and learn more.
  prefs: []
  type: TYPE_NORMAL
- en: Up until my first year of graduate school, I'd only done a bit of coding. I
    had messed around with HyperCard in middle school and taken a C++ class in high
    school. I had also learned some basic Mathematica in college.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How did you get started using the Python programming language?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: Astronomy is very computationally-driven these days and so
    when I started graduate school, I needed to relearn how to code.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''Astronomy is very computationally-driven these days...''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Most of my department was using IDL in those days, but I was lucky enough to
    do a quarter-long research project with a professor who recommended Python. He
    told me that Python was the future and in retrospect he was entirely correct!
  prefs: []
  type: TYPE_NORMAL
- en: I taught myself Python over winter break by writing a Sudoku puzzle solver and
    then turning that into a Sudoku puzzle generator. Much later on, I arrived at
    PyCon 2017 and explained why Python is liked and used by so many scientists.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What do you like about Python?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: I like Python first of all because it is open, which is a huge
    advantage over some other tools favored by academics (Mathematica, IDL and MATLAB
    come to mind).'
  prefs: []
  type: TYPE_NORMAL
- en: When I first started using Python, I found the syntax and semantics to be incredibly
    clean and intuitive, which made coding fun for me in a way that it never was when
    I was first learning C++.
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''I found Python''s syntax and semantics to be incredibly
    clean and intuitive.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Also, the scientific Python ecosystem, even though it was fairly nascent when
    I started, is a huge boon. No matter what you want to do with Python in science,
    it's likely that someone has created a package for it.
  prefs: []
  type: TYPE_NORMAL
- en: Python's interoperability with so many other languages means that it can act
    like the glue between the various tools that scientists need to use together.
    Then the 'batteries included' aspect of Python means that there's a built-in library
    for nearly everything and a third-party library for everything else.
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''Python…can act like the glue between the various tools
    that scientists need to use together.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Python's simple and dynamic nature makes it perfect for day-to-day scientific
    data exploration, where speed of development is primary and speed of execution
    is often secondary.
  prefs: []
  type: TYPE_NORMAL
- en: Last but not least, Python's open ethos does fit well with science and we're
    seeing an increasing number of scientists hosting their research code on GitHub
    and similar services, to aid in reproducibility.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How is Python''s open ethos helping the scientific community?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: Python''s open ethos is a great match for how science should
    be done. I made the point in my keynote at PyCon 2017 that over the past five
    to ten years, scientists have really absorbed many of the best-practice lessons
    from the open source community.'
  prefs: []
  type: TYPE_NORMAL
- en: Code sharing, version control, unit testing, and code documentation are essential
    for making sure that modern science is reproducible. The people doing the best
    computational work in the scientific community have adapted many of these practices
    from the open source (and particularly Python open source) community.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: What is Python missing that would be great for scientists?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: The biggest challenge with Python for scientists is that the
    scaling of computation requires writing code in a language other than Python.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''The biggest challenge with Python for scientists is that
    the scaling of computation requires writing code in a language other than Python.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Tools like Cython and Numba address part of this problem by letting you convert
    Python or Python-like code to fast compiled code, but there is a cognitive overhead
    involved in deciding when and where to switch to these additional tools. PyPy
    is promising, but the problem is that it doesn't support CPython's C-API, which
    the bulk of the scientific ecosystem requires.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is why some people in the community are attracted to Julia. It''s a language
    built for scientific computation, with fast LLVM-based execution built-in from
    the ground up. That said, Julia feels a bit clunky to me in some areas and I wish
    we could have a happy medium: Python''s syntax with Julia''s performance.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How can the Python community help the scientific community to
    learn Python? What projects are you currently using Python in?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: I do all of my daily work in Python. Currently I''m involved
    in several research projects at the University of Washington (UW). I''m mentoring
    students working on astronomy and on transportation-focused data science.'
  prefs: []
  type: TYPE_NORMAL
- en: I'm helping to develop the Altair library, which is a Python interface to the
    Vega-Lite grammar of visualization. I think it will be a good fit for one of the
    current holes in the Python scientific space, which is exploratory data analysis.
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''I generally push Python...and these days, I rarely have
    to push very hard!''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Part of my job at UW is essentially consulting with researchers around the university
    to help with computational or statistical aspects of their research. I generally
    push Python in most of those cases and these days, I rarely have to push very
    hard!
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Do most astronomists do a lot of computer programming?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: Computing is absolutely essential in modern astronomy! The
    field has, for the most part, moved beyond the romantic days of traveling to remote
    peaks to peer through telescopes. Even when observing on-site, observations are
    recorded by CCDs attached to the telescopes.'
  prefs: []
  type: TYPE_NORMAL
- en: Beyond that, it's generally true that all of the *easy* observations have already
    been made. To really push forward our understanding of the universe requires novel
    studies. That novelty might mean observing very faint objects (in which case detailed
    noise models are a necessity), or observing many objects to learn about their
    statistical properties (in which a scalable computing environment is essential).
  prefs: []
  type: TYPE_NORMAL
- en: At either end of that spectrum, you better know how to write code to ingest
    telescope images, model the interesting feature and spit out useful results.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: How common is it for scientists to need to write code?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: Like in astronomy, scientists in most fields are finding coding
    to be essential.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''Scientists in most fields are finding coding to be essential.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: We astronomers have been a bit ahead of the curve when it comes to data volumes,
    but as sensors, cameras, satellites and other devices become cheaper and more
    abundant, the *data deluge* is starting to be a feature in most other domains
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Which scientific fields use programming the most?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: It''s very hard to say, but immense volumes of data are being
    produced in astronomy.'
  prefs: []
  type: TYPE_NORMAL
- en: So in radio astronomy, for example, there are projects that are producing data
    at rates of about 5GB/s. In physics, the LHC produces data at a rate of about
    25GB/s. Then in biostatistics, gene sequencing data for an individual is typically
    ~100s of GB. All of these fields are using sophisticated algorithms to extract
    meaning from that data.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: On the other side of the coin, are you aware of any scientific
    fields where Python is weak in? If so, what are they?'
  prefs: []
  type: TYPE_NORMAL
- en: '**Vanderplas**: Some fields have long histories of ingrained toolchains. For
    example, MATLAB could probably be described as standard in many engineering and
    applied math departments.'
  prefs: []
  type: TYPE_NORMAL
- en: Ten years ago, a language called IDL dominated most of astronomy research, but
    that has changed and now Python is the dominant language mentioned in refereed
    publications.
  prefs: []
  type: TYPE_NORMAL
- en: The way this changed in astronomy was two-fold. You had some visionaries in
    positions of influence that pushed for Python early on (for example, Perry Greenfield
    at the Space Telescope Science Institute). Then there was a real groundswell coming
    from graduate students and postdocs, who worked hard to train each other (examples
    are software carpentry workshops and the SciCoder program).
  prefs: []
  type: TYPE_NORMAL
- en: '**Jake Vanderplas: ''The momentum of Python sort of took over.''**'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: There has also been a community-wide push to standardize the astronomy Python
    tool stack. The result is the (phenomenal) Astropy project. Beyond that, the momentum
    of Python sort of took over.
  prefs: []
  type: TYPE_NORMAL
- en: '**Driscoll**: Thank you, Jake Vanderplas.'
  prefs: []
  type: TYPE_NORMAL
