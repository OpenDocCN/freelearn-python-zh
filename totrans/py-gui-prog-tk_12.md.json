["```py\n$ sudo -u postgres createuser -sP myusername\n$ sudo -u postgres createdb -O myusername abq\n$ psql -d abq -U myusername \n```", "```py\n# create_db.sql\nCREATE TABLE labs (id CHAR(1) PRIMARY KEY);\nCREATE TABLE lab_techs (\n  id SMALLINT PRIMARY KEY,\n  name VARCHAR(512) UNIQUE NOT NULL\n);\nCREATE TABLE plots (\n  lab_id CHAR(1) NOT NULL REFERENCES labs(id),\n  plot SMALLINT NOT NULL,\n  current_seed_sample CHAR(6),\n  PRIMARY KEY(lab_id, plot),\n  CONSTRAINT valid_plot CHECK (plot BETWEEN 1 AND 20)\n); \n```", "```py\nCREATE TABLE lab_checks(\n  date DATE NOT NULL, time TIME NOT NULL,\n  lab_id CHAR(1) NOT NULL REFERENCES labs(id),\n  lab_tech_id SMALLINT NOT NULL REFERENCES lab_techs(id),\n  PRIMARY KEY(date, time, lab_id)\n); \n```", "```py\nCREATE TABLE plot_checks(\n  date DATE NOT NULL,\n  time TIME NOT NULL,\n  lab_id CHAR(1) NOT NULL REFERENCES labs(id),\n  plot SMALLINT NOT NULL, \n```", "```py\n PRIMARY KEY(date, time, lab_id, plot),\n  FOREIGN KEY(date, time, lab_id)\n    REFERENCES lab_checks(date, time, lab_id),\n  FOREIGN KEY(lab_id, plot) REFERENCES plots(lab_id, plot), \n```", "```py\n seed_sample CHAR(6) NOT NULL,\n  humidity NUMERIC(4, 2) CHECK (humidity BETWEEN 0.5 AND 52.0),\n  light NUMERIC(5, 2) CHECK (light BETWEEN 0 AND 100),\n  temperature NUMERIC(4, 2) CHECK (temperature BETWEEN 4 AND 40),\n  equipment_fault BOOLEAN NOT NULL,\n  blossoms SMALLINT NOT NULL CHECK (blossoms BETWEEN 0 AND 1000),\n  plants SMALLINT NOT NULL CHECK (plants BETWEEN 0 AND 20),\n  fruit SMALLINT NOT NULL CHECK (fruit BETWEEN 0 AND 1000),\n  max_height NUMERIC(6, 2) NOT NULL\n    CHECK (max_height BETWEEN 0 AND 1000),\n  min_height NUMERIC(6, 2) NOT NULL\n    CHECK (min_height BETWEEN 0 AND 1000),\n  median_height NUMERIC(6, 2) NOT NULL\n  CHECK (median_height BETWEEN min_height AND max_height),\n  notes TEXT\n); \n```", "```py\n# create_db.sql\nCREATE VIEW data_record_view AS ( \n```", "```py\nSELECT pc.date AS \"Date\", to_char(pc.time, 'FMHH24:MI') AS \"Time\",\n  lt.name AS \"Technician\", pc.lab_id AS \"Lab\", pc.plot AS \"Plot\",\n  pc.seed_sample AS \"Seed Sample\", pc.humidity AS \"Humidity\",\n  pc.light AS \"Light\", pc.temperature AS \"Temperature\",\n  pc.plants AS \"Plants\", pc.blossoms AS \"Blossoms\",\n  pc.fruit AS \"Fruit\", pc.max_height AS \"Max Height\",\n  pc.min_height AS \"Min Height\", pc.median_height AS \"Med Height\",\n  pc.notes AS \"Notes\"\nFROM plot_checks AS pc\n  JOIN lab_checks AS lc ON pc.lab_id = lc.lab_id\n  AND pc.date = lc.date AND pc.time = lc.time\n  JOIN lab_techs AS lt ON lc.lab_tech_id = lt.id\n ); \n```", "```py\n$ cd ABQ_Data_Entry/sql\n$ psql -U myuser -d abq < create_db.sql \n```", "```py\n$ pip install --user psycopg2-binary \n```", "```py\n# psycopg2_demo.py\nimport psycopg2 as pg\nfrom getpass import getpass\ncx = pg.connect(\n  host='localhost',  database='abq',\n  user=input('Username: '),\n  password=getpass('Password: ')\n)\ncur = cx.cursor()\ncur.execute(\"\"\"\n  CREATE TABLE test\n  (id SERIAL PRIMARY KEY, val TEXT)\n\"\"\")\ncur.execute(\"\"\"\n  INSERT INTO test (val)\n  VALUES ('Banana'), ('Orange'), ('Apple');\n\"\"\") \n```", "```py\ncur.execute(\"SELECT * FROM test\")\nnum_rows = cur.rowcount\ndata = cur.fetchall()\nprint(f'Got {num_rows} rows from database:')\nprint(data) \n```", "```py\ncx.commit() \n```", "```py\ncx.close() \n```", "```py\nnew_item = input('Enter new item: ')\ncur.execute(f\"INSERT INTO test (val) VALUES ('{new_item}')\")\ncur.execute('SELECT * FROM test')\nprint(cur.fetchall()) \n```", "```py\n$ python psycopg2_demo.py\nUsername: alanm\nPassword:\nGot 3 rows from database:\n[(1, 'Banana'), (2, 'Orange'), (3, 'Apple')]\nEnter new item: '); DROP TABLE test; SELECT ('\nTraceback (most recent call last):\n  File \"/home/alanm/psycopg2_demo.py\", line 37, in <module>\n    cur.execute('SELECT * FROM test')\npsycopg2.errors.UndefinedTable: relation \"test\" does not exist\nLINE 1: SELECT * FROM test \n```", "```py\nnew_item = input('Enter new item: ')\n**cur.execute(****\"INSERT INTO test (val) VALUES (%s)\"****, (new_item,))**\ncur.execute('SELECT * FROM test')\nprint(cur.fetchall()) \n```", "```py\ncur.execute(\n  \"INSERT INTO test (val) VALUES (%(item)s)\",\n  {'item': new_item}\n) \n```", "```py\nEnter new item: '); DROP TABLE test; SELECT ('\n[(1, 'Banana'), (2, 'Orange'), (3, 'Apple'), (4, \"'); DROP TABLE test; SELECT ('\")] \n```", "```py\n# psycopg2_demo.py\n**from** **psycopg2.extras** **import** **DictCursor**\ncx = pg.connect(\n  host='localhost',  database='abq',\n  user=input('Username: '),\n  password=getpass('Password: '),\n  **cursor_factory=DictCursor**\n) \n```", "```py\ncur.execute(\"SELECT * FROM test\")\ndata = cur.fetchall()\nfor row in data:\n    print(row['val']) \n```", "```py\n# models.py\nimport psycopg2 as pg\nfrom psycopg2.extras import DictCursor \n```", "```py\n# models.py\nclass SQLModel:\n  \"\"\"Data Model for SQL data storage\"\"\"\n  fields = {\n    \"Date\": {'req': True, 'type': FT.iso_date_string},\n    \"Time\": {'req': True, 'type': FT.string_list,\n     'values': ['8:00', '12:00', '16:00', '20:00']},\n    # etc. ... \n```", "```py\n# models.py, in the SQLModel.fields property\n    \"Technician\": {\n      'req': True, 'type':  FT.string_list, 'values': []\n    },\n    \"Lab\": {\n      'req': True, 'type': FT.short_string_list, 'values': []\n    },\n    \"Plot\": {\n      'req': True, 'type': FT.string_list, 'values': []\n    }, \n```", "```py\n# models.py, inside SQLModel\n  def query(self, query, parameters=None):\n    with self.connection:\n      with self.connection.cursor() as cursor:\n        cursor.execute(query, parameters)\n\n        if cursor.description is not None:\n          return cursor.fetchall() \n```", "```py\n cursor = self.connection.cursor()\n    try:\n      cursor.execute(query, parameters)\n    except (pg.Error) as e:\n      self.connection.rollback()\n      raise e\n    finally:\n      cursor.close() \n```", "```py\n def some_method(self):\n    return self.query('SELECT * FROM table') \n```", "```py\n# models.py, inside SQLModel\n  def __init__(self, host, database, user, password):\n    self.connection = pg.connect(\n      host=host, database=database,\n      user=user, password=password,\n      cursor_factory=DictCursor\n    )\n    techs = self.query(\"SELECT name FROM lab_techs ORDER BY name\")\n    labs = self.query(\"SELECT id FROM labs ORDER BY id\")\n    plots = self.query(\n      \"SELECT DISTINCT plot FROM plots ORDER BY plot\"\n    )\n    self.fields['Technician']['values'] = [\n      x['name'] for x in techs\n    ]\n    self.fields['Lab']['values'] = [x['id'] for x in labs]\n    self.fields['Plot']['values'] = [\n      str(x['plot']) for x in plots\n    ] \n```", "```py\n def get_all_records(self, all_dates=False):\n    query = (\n      'SELECT * FROM data_record_view '\n      'WHERE NOT %(all_dates)s OR \"Date\" = CURRENT_DATE '\n      'ORDER BY \"Date\" DESC, \"Time\", \"Lab\", \"Plot\"'\n    )\n    return self.query(query, {'all_dates': all_dates}) \n```", "```py\n def get_record(self, rowkey):\n    date, time, lab, plot = rowkey\n    query = (\n      'SELECT * FROM data_record_view '\n      'WHERE \"Date\" = %(date)s AND \"Time\" = %(time)s '\n      'AND \"Lab\" = %(lab)s AND \"Plot\" = %(plot)s'\n    )\n    result = self.query(\n      query,\n      {\"date\": date, \"time\": time, \"lab\": lab, \"plot\": plot}\n    )\n    return result[0] if result else dict() \n```", "```py\n def get_lab_check(self, date, time, lab):\n    query = (\n      'SELECT date, time, lab_id, lab_tech_id, '\n      'lt.name as lab_tech FROM lab_checks JOIN lab_techs lt '\n      'ON lab_checks.lab_tech_id = lt.id WHERE '\n      'lab_id = %(lab)s AND date = %(date)s AND time = %(time)s'\n    )\n    results = self.query(\n      query, {'date': date, 'time': time, 'lab': lab}\n    )\n    return results[0] if results else dict() \n```", "```py\n# models.py, in SQLModel\n  lc_update_query = (\n    'UPDATE lab_checks SET lab_tech_id = '\n    '(SELECT id FROM lab_techs WHERE name = %(Technician)s) '\n    'WHERE date=%(Date)s AND time=%(Time)s AND lab=%(Lab)s'\n  )\n  lc_insert_query = (\n    'INSERT INTO lab_checks VALUES (%(Date)s, %(Time)s, %(Lab)s, '\n    '(SELECT id FROM lab_techs WHERE name LIKE %(Technician)s))'\n  ) \n```", "```py\n pc_update_query = (\n    'UPDATE plot_checks SET seed_sample = %(Seed Sample)s, '\n    'humidity = %(Humidity)s, light = %(Light)s, '\n    'temperature = %(Temperature)s, '\n    'equipment_fault = %(Equipment Fault)s, '\n    'blossoms = %(Blossoms)s, plants = %(Plants)s, '\n    'fruit = %(Fruit)s, max_height = %(Max Height)s, '\n    'min_height = %(Min Height)s, median_height = %(Med Height)s, '\n    'notes = %(Notes)s WHERE date=%(key_date)s AND time=%(key_time)s '\n    'AND lab_id=%(key_lab)s AND plot=%(key_plot)s')\n  pc_insert_query = (\n    'INSERT INTO plot_checks VALUES (%(Date)s, %(Time)s, %(Lab)s,'\n    ' %(Plot)s, %(Seed Sample)s, %(Humidity)s, %(Light)s,'\n    ' %(Temperature)s, %(Equipment Fault)s, %(Blossoms)s,'\n    ' %(Plants)s, %(Fruit)s, %(Max Height)s, %(Min Height)s,'\n    ' %(Med Height)s, %(Notes)s)') \n```", "```py\n# models.py, inside SQLModel\n  def save_record(self, record, rowkey):\n    if rowkey:\n      key_date, key_time, key_lab, key_plot = rowkey\n      record.update({\n        \"key_date\": key_date,\n        \"key_time\": key_time,\n        \"key_lab\": key_lab,\n        \"key_plot\": key_plot\n      }) \n```", "```py\n if self.get_lab_check(\n      record['Date'], record['Time'], record['Lab']\n    ):\n      lc_query = self.lc_update_query\n    else:\n      lc_query = self.lc_insert_query \n```", "```py\n if rowkey:\n      pc_query = self.pc_update_query\n    else:\n      pc_query = self.pc_insert_query \n```", "```py\n self.query(lc_query, record)\n    self.query(pc_query, record) \n```", "```py\n def get_current_seed_sample(self, lab, plot):\n    result = self.query(\n      'SELECT current_seed_sample FROM plots '\n      'WHERE lab_id=%(lab)s AND plot=%(plot)s',\n      {'lab': lab, 'plot': plot}\n    )\n    return result[0]['current_seed_sample'] if result else '' \n```", "```py\n# models.py, inside SettingsModel\nclass SettingsModel:\n  fields = {\n    #...\n    **'db_host'****: {****'type'****:** **'str'****,** **'value'****:** **'localhost'****},**\n    **'db_name'****: {****'type'****:** **'str'****,** **'value'****:** **'abq'****}**\n  } \n```", "```py\n# application.py, inside Application\n  def _database_login(self, username, password):\n    db_host = self.settings['db_host'].get()\n    db_name = self.settings['db_name'].get()\n    try:\n      self.model = m.SQLModel(\n        db_host, db_name, username, password\n      )\n    except m.pg.OperationalError as e:\n      print(e)\n      return False\n    return True \n```", "```py\n# application.py, in Application\n  def _show_login(self):\n    #...\n      **if** **self._database_login(username, password):**\n        return True \n```", "```py\n# application.py, in Application\n  def __init__(self, *args, **kwargs):\n    super().__init__(*args, **kwargs)\n    self.settings_model = m.SettingsModel()\n    self._load_settings()\n    self.withdraw()\n    if not self._show_login():\n      self.destroy()\n      return\n    self.deiconify() \n```", "```py\n# application,py, in Application._on_save()\n    data = self.recordform.get()\n    **rowkey = self.recordform.current_record**\n    **self.model.save_record(data, rowkey)**\n    **if** **rowkey** **is****not****None****:**\n      **self.recordlist.add_updated_row(rowkey)**\n    **else:**\n      **rowkey = (**\n        **data[****'Date'****], data[****'Time'****], data[****'Lab'****], data[****'Plot'****]**\n      **)**\n      **self.recordlist.add_inserted_row(rowkey)**\n    # remainder of method as before \n```", "```py\n# views.py, inside DataRecordForm.__init__()\n    # line 1\n    w.LabelInput(\n      r_info, \"Date\",\n      #...\n    ).grid(row=0, column=0)\n    w.LabelInput(\n      r_info, \"Time\",\n      #...\n    ).grid(row=0, column=1)\n    # swap order for chapter 12\n    w.LabelInput(\n      r_info, \"Lab\",\n      #...\n    ).grid(row=0, column=2)\n    # line 2\n    w.LabelInput(\n      r_info, \"Plot\",\n      #...\n    ).grid(row=1, column=0)\n    w.LabelInput(\n      r_info, \"Technician\",\n      #...\n    ).grid(row=1, column=1)\n    w.LabelInput(\n      r_info, \"Seed Sample\",\n      #...\n    ).grid(row=1, column=2) \n```", "```py\n#views.py, inside DataRecordForm.load_record()\n    if **rowkey** is None:\n      self.reset()\n      self.record_label.config(text='New Record')\n    else:\n      **date, time, lab, plot = rowkey**\n      **title =** **f'Record for Lab****{lab}, Plot****{plot}****at****{date}****{time}****'**\n      self.record_label.config(text=title) \n```", "```py\n# views.py, inside DataRecordForm\n  def _populate_current_seed_sample(self, *_):\n    \"\"\"Auto-populate the current seed sample for Lab and Plot\"\"\"\n    if not self.settings['autofill sheet data'].get():\n      return\n    plot = self._vars['Plot'].get()\n    lab = self._vars['Lab'].get()\n    if plot and lab:\n      seed = self.model.get_current_seed_sample(lab, plot)\n      self._vars['Seed Sample'].set(seed) \n```", "```py\n# views.py, inside DataRecordForm\n  def _populate_tech_for_lab_check(self, *_):\n    \"\"\"Populate technician based on the current lab check\"\"\"\n    if not self.settings['autofill sheet data'].get():\n      return\n    date = self._vars['Date'].get()\n    try:\n      datetime.fromisoformat(date)\n    except ValueError:\n      return\n    time = self._vars['Time'].get()\n    lab = self._vars['Lab'].get()\n    if all([date, time, lab]):\n      check = self.model.get_lab_check(date, time, lab)\n      tech = check['lab_tech'] if check else ''\n      self._vars['Technician'].set(tech) \n```", "```py\n# views.py, inside DataRecordForm.__init__()\n    for field in ('Lab', 'Plot'):\n      self._vars[field].trace_add(\n        'write', self._populate_current_seed_sample\n      )\n    for field in ('Date', 'Time', 'Lab'):\n      self._vars[field].trace_add(\n        'write', self._populate_tech_for_lab_check\n      ) \n```", "```py\n# views.py, near the beginning of RecordList.__init__()\n    self.iid_map = dict() \n```", "```py\n# views.py, in RecordList.populate()\n    self.iid_map.clear() \n```", "```py\n for rowdata in rows:\n      values = [rowdata[key] for key in cids]\n      rowkey = tuple([str(v) for v in values])\n      if rowkey in self._inserted:\n        tag = 'inserted'\n      elif rowkey in self._updated:\n        tag = 'updated'\n      else:\n        tag = ''\n      iid = self.treeview.insert(\n        '', 'end', values=values, tag=tag\n      )\n      self.iid_map[iid] = rowkey \n```", "```py\n# views.py, in RecordList.populate()\n    if len(rows) > 0:\n      firstrow = self.treeview.identify_row(0)\n      self.treeview.focus_set()\n      self.treeview.selection_set(firstrow)\n      self.treeview.focus(firstrow) \n```", "```py\n# views.py, in RecordList\n  @property\n  def selected_id(self):\n    selection = self.treeview.selection()\n    return **self.iid_map[selection[0]]** if selection else None \n```", "```py\n# views.py, inside RecordList.__init__()\n    self.treeview.config(show='headings') \n```"]