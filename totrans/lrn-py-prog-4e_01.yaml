- en: '1'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '1'
- en: A Gentle Introduction to Python
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python入门指南
- en: ”Give a man a fish and you feed him for a day. Teach a man to fish and you feed
    him for a lifetime.”
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “给一个人一条鱼，你就能养活他一天。教一个人捕鱼，你就能养活他一辈子。”
- en: ''
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: —Chinese proverb
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: ——中国谚语
- en: Computer programming, or coding, as it is sometimes known, is telling a computer
    to do something using a language it understands.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机编程，有时也称为编码，就是用计算机能理解的语言告诉计算机做某事。
- en: 'Computers are very powerful tools, but unfortunately, they cannot think for
    themselves. They need to be told everything: how to perform a task; how to evaluate
    a condition to decide which path to follow; how to handle data that comes from
    a device, such as a network or a disk; and how to react when something unforeseen
    happens, in the case of, say, something being broken or missing.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机是非常强大的工具，但不幸的是，它们不能自己思考。它们需要被告知一切：如何执行任务；如何评估条件以决定走哪条路；如何处理来自设备的数据，比如网络或磁盘；以及当发生不可预见的事情时，比如某物损坏或丢失时，如何反应。
- en: You can code in many different styles and languages. Is it hard? We would say
    *yes* and *no* . It is a bit like writing—it is something that everybody can learn.
    But what if you want to become a poet? Writing alone is not enough. You have to
    acquire a whole other set of skills, and this will involve a longer and greater
    effort.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用许多不同的风格和语言进行编码。这很难吗？我们会说“是”和“不是”。这有点像写作——这是每个人都可以学习的东西。但如果你想成为一名诗人呢？仅仅写作是不够的。你必须掌握另一套技能，这将涉及更长和更大的努力。
- en: In the end, it all comes down to how far you want to go down the road. Coding
    is not just putting together some instructions that work. It is so much more!
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一切都取决于你想要走多远。编码不仅仅是把一些能工作的指令组合起来。它要复杂得多！
- en: Good code is short, fast, elegant, easy to read and understand, simple, easy
    to modify and extend, easy to scale and refactor, and easy to test. It takes time
    to be able to write code that has all these qualities at the same time, but the
    good news is that you are taking the first step toward it at this very moment
    by reading this book. And we have no doubt you can do it. Anyone can; in fact,
    we all program all the time, only we are not aware of it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 好的代码应该是简短、快速、优雅、易于阅读和理解、简单、易于修改和扩展、易于扩展和重构、易于测试。要同时具备所有这些品质的代码需要时间，但好消息是，你通过阅读这本书已经迈出了第一步。我们确信你可以做到。任何人都可以；事实上，我们每天都在编程，只是我们没有意识到这一点。
- en: Let’s say, for example, that you want to make instant coffee. You have to get
    a mug, the instant coffee jar, a teaspoon, water, and a kettle. Even if you are
    not aware of it, you are evaluating a lot of data. You are making sure that there
    is water in the kettle and that the kettle is plugged in, that the mug is clean,
    and that there is enough coffee in the jar. Then you boil the water and, maybe
    in the meantime, you put some coffee in the mug. When the water is ready, you
    pour it into the mug, and stir.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 假设，比如说，你想冲泡速溶咖啡。你需要一个杯子、速溶咖啡罐、茶匙、水和水壶。即使你没有意识到，你也在评估大量的数据。你确保水壶里有水，水壶已插电，杯子干净，罐子里有足够的咖啡。然后你烧水，也许同时，你在杯子里放了一些咖啡。当水烧好后，你把它倒入杯子，并搅拌。
- en: So, how is this programming?
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，这是怎样的编程呢？
- en: Well, we gathered resources (the kettle, coffee, water, teaspoon, and mug) and
    we verified some conditions concerning them (the kettle is plugged in, the mug
    is clean, and there is enough coffee). Then we started two actions (boiling the
    water and putting coffee in the mug), and when both of them were completed, we
    finally ended the procedure by pouring water into the mug and stirring.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们收集了资源（水壶、咖啡、水、茶匙和杯子）并验证了一些与它们相关的条件（水壶已插电，杯子干净，咖啡足够）。然后我们开始执行两个动作（烧水和把咖啡倒入杯子），当这两个动作都完成后，我们通过往杯子里倒水并搅拌来结束整个程序。
- en: 'Can you see the parallel? We have just described the high-level functionality
    of a coffee program. It was not that hard because this is what the brain does
    all day long: evaluate conditions, decide to take actions, carry out tasks, repeat
    some of them, and stop at some point.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你能看出其中的相似之处吗？我们刚刚描述了一个咖啡程序的顶层功能。这并不难，因为这就是大脑整天在做的事情：评估条件、决定采取行动、执行任务、重复一些任务，并在某个时候停止。
- en: All you need now is to learn how to deconstruct all those actions you do automatically
    in real life so that a computer can actually make some sense of them. You need
    to learn a language as well so that the computer can be instructed.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要学习如何分解你在现实生活中自动执行的所有动作，以便计算机能够真正理解它们。你还需要学习一种语言，以便能够指导计算机。
- en: So, this is what this book is for. We will show you one way in which you can
    code successfully, and we will try to do that by means of many simple but focused
    examples (our favorite kind).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这本书的目的就在于此。我们将向你展示一种成功编码的方法，我们将通过许多简单但专注的示例（我们最喜欢的那种）来实现这一点。
- en: 'In this chapter, we are going to cover the following:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下内容：
- en: Python’s characteristics and ecosystem
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python的特点和生态系统
- en: Guidelines on how to get up and running with Python and virtual environments
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于如何使用Python和虚拟环境的指南
- en: How to run Python programs
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何运行Python程序
- en: How to organize Python code and its execution model
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何组织Python代码及其执行模型
- en: A brief introduction to programming
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编程简介
- en: We love to make references to the real world when we teach coding; we believe
    they help people to better retain the concepts they are learning. However, now
    is the time to be a bit more rigorous and see what coding is from a more technical
    perspective.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在教授编码时，我们喜欢引用现实世界；我们相信这有助于人们更好地保留他们正在学习的概念。然而，现在是时候更加严谨一点，从更技术性的角度看待编码了。
- en: 'When we write code, we are instructing a computer about the things it has to
    do. Where does the action happen? In many places: the computer memory, hard drives,
    network cables, the CPU, and so on. It is a whole world, which most of the time
    is the representation of a subset of the real world.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写代码时，我们是在指导计算机执行它必须完成的任务。动作发生在哪里？在许多地方：计算机内存、硬盘驱动器、网络电缆、CPU等等。这是一个整体的世界，大多数时候是现实世界的一个子集的表示。
- en: If you write a piece of software that allows people to buy clothes online, you
    will have to represent real people, real clothes, real brands, sizes, and so on
    and so forth, within the boundaries of a program.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你编写一个允许人们在线购买衣服的软件，你将不得不在程序的范围内表示真实的人、真实的衣服、真实的品牌、尺寸等等。
- en: To do this, you will need to create and handle objects in your program. A person
    can be an object. A car is an object. A pair of trousers is an object. Luckily,
    Python understands objects very well.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 要做到这一点，你需要在程序中创建和处理对象。人可以是一个对象。一辆车是一个对象。一条裤子是一个对象。幸运的是，Python非常理解对象。
- en: 'The two key features any object has are **properties** and **methods** . Let
    us take the example of a person as an object. Typically, in a computer program,
    you will represent people as customers or employees. The properties that you store
    against them are things like a name, a social security number, an age, whether
    they have a driving license, an email, and so on. In a computer program, you store
    all the data needed in order to use an object for the purpose that needs to be
    served. If you are coding a website to sell clothes, you probably want to store
    the heights and weights as well as other measures of your customers so that the
    appropriate clothes can be suggested to them. So, properties are characteristics
    of an object. We use them all the time: *Could you pass me that pen? —Which one?
    —The black one* . Here, we used the color ( *black* ) property of a pen to identify
    it (most likely it was being kept alongside different colored pens for the distinction
    to be necessary).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 任何对象都具有的两个关键特性是**属性**和**方法**。让我们以人作为一个对象的例子。通常，在计算机程序中，你会将人表示为客户或员工。你存储在他们身上的属性可能包括姓名、社会保险号、年龄、是否有驾驶执照、电子邮件等等。在计算机程序中，你存储所有必要的数据，以便使用对象来完成需要的服务。如果你正在编写一个销售衣服的网站，你可能还想存储客户的高度和体重以及其他尺寸，以便向他们推荐合适的衣服。因此，属性是对象的特性。我们经常使用它们：*你能把那支笔递给我吗？——哪一支？——黑色的那支*。在这里，我们使用了笔的颜色（*黑色*）属性来识别它（很可能是与其他颜色的笔放在一起，以便区分）。
- en: Methods are actions that an object can perform. As a person, I have methods
    such as *speak, walk, sleep, wake up, eat, dream, write, read,* and so on. All
    the things that I can do could be seen as methods of the objects that represent
    me.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是对象可以执行的动作。作为一个人类，我有诸如*说话、走路、睡觉、醒来、吃饭、做梦、写作、阅读*等方法。我能做的所有事情都可以看作是代表我的对象的方法的体现。
- en: So, now that you know what objects are, that they provide methods that can be
    run and properties that you can inspect, you are ready to start coding. Coding,
    in fact, is simply about managing those objects that live in the subset of the
    world we’re reproducing in our software. You can create, use, reuse, and delete
    objects as you please.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在你已经知道了什么是对象，它们提供了可以运行的方法和你可以检查的属性，你就可以开始编码了。实际上，编码只是关于管理那些存在于我们软件中复制的世界的子集中的对象。你可以随意创建、使用、重用和删除对象。
- en: 'According to the *Data Model* chapter on the official Python documentation
    ( [https://docs.python.org/3/reference/datamodel.html](https://docs.python.org/3/reference/datamodel.html)
    ):'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 根据官方Python文档中的*数据模型*章节（[https://docs.python.org/3/reference/datamodel.html](https://docs.python.org/3/reference/datamodel.html)）：
- en: '*“Objects are Python’s abstraction for data. All data in a Python program is
    represented by objects or by relations between objects.”*'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '*“对象是Python对数据的抽象。Python程序中的所有数据都由对象或对象之间的关系表示。”*'
- en: We will take a closer look at Python objects in *Chapter 6* , *OOP, Decorators,
    and Iterators* . For now, all we need to know is that every object in Python has
    an **ID** (or identity), a **type** , and a **value** .
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在*第六章*，*面向对象编程（OOP）、装饰器和迭代器*中更详细地研究Python对象。现在，我们只需要知道Python中的每个对象都有一个**ID**（或身份）、一个**类型**和一个**值**。
- en: '**Object-Oriented Programming** ( **OOP** ) is just one of many programming
    paradigms. In Python, we can write code using a functional or imperative style,
    as well as object-oriented. However, as we previously stated, everything in Python
    is an object, therefore we employ them all the time, regardless of the chosen
    coding style.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**面向对象编程**（**OOP**）只是许多编程范式之一。在Python中，我们可以使用函数式或命令式风格编写代码，也可以使用面向对象。然而，正如我们之前所述，Python中的所有东西都是对象，因此我们始终使用它们，无论选择的编码风格如何。'
- en: Once created, the ID of an object never changes. It is a unique identifier for
    it, and it is used behind the scenes by Python to retrieve the object when we
    want to use it. The type also never changes. The type states what operations are
    supported by the object and the possible values that can be assigned to it. We
    will see Python’s most important data types in *Chapter 2* , *Built-In Data Types*
    . The value of some objects can change. Such objects are said to be **mutable**
    . If the value cannot be changed, the object is said to be **immutable** .
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建，对象的ID永远不会改变。它是它的唯一标识符，Python在幕后使用它来检索对象，当我们想要使用它时。类型也永远不会改变。类型说明了对象支持的操作以及可以分配给它的可能值。我们将在*第二章*，*内置数据类型*中看到Python最重要的数据类型。某些对象的值可以改变。这样的对象被称为**可变的**。如果值不能改变，则该对象被称为**不可变的**。
- en: How, then, do we use an object? We give it a name, of course! When you give
    an object a name, then you can use the name to retrieve the object and use it.
    In a more generic sense, objects, such as numbers, strings (text), and collections,
    are associated with a name. In other languages, the name is normally called a
    *variable* . You can see the variable as being like a box, which you can use to
    hold data.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，我们如何使用一个对象呢？当然，我们给它一个名字！当你给一个对象一个名字时，你就可以使用这个名字来检索对象并使用它。在更通用的意义上，对象，如数字、字符串（文本）和集合，都与一个名字相关联。在其他语言中，这个名字通常被称为*变量*。你可以把变量看作是一个盒子，你可以用它来存储数据。
- en: Objects represent data. It is stored in databases or sent over network connections.
    It is what you see when you open any web page, or work on a document. Computer
    programs manipulate that data to perform all sorts of actions. They regulate its
    flow, evaluate conditions, react to events, and much more.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 对象代表数据。它存储在数据库中或通过网络连接发送。当你打开任何网页或处理文档时，你所看到的就是数据。计算机程序通过操作这些数据来执行各种动作。它们调节其流动，评估条件，对事件做出反应，等等。
- en: To do all this, we need a language. That is what Python is for. Python is the
    language we will use together throughout this book to instruct the computer to
    do something for us.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成所有这些，我们需要一种语言。这正是Python的作用所在。Python是我们将在整本书中使用的语言，用来指导计算机为我们做某些事情。
- en: Enter the Python
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进入Python
- en: Python is the marvelous creation of Guido Van Rossum, a Dutch computer scientist
    and mathematician who decided to gift the world with a project he was playing
    around with over Christmas 1989. The language appeared to the public somewhere
    around 1991, and since then has evolved to be one of the leading programming languages
    used worldwide today.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是 Guido Van Rossum 的杰作，他是荷兰的一位计算机科学家和数学家，决定在 1989 年圣诞节期间将他在玩的项目赠予世界。这种语言大约在
    1991 年对公众亮相，从那时起，它已经发展成为今天全球使用的主要编程语言之一。
- en: 'We (the authors) started programming when we were both very young. Fabrizio
    started at the age of 7, on a Commodore VIC-20, which was later replaced by its
    bigger brother, the Commodore 64. The language it used was **BASIC** . Heinrich
    started when he learned Pascal in high school. Between us, we’ve programmed in
    Pascal, Assembly, C, C++, Java, JavaScript, Visual Basic, PHP, ASP, ASP .NET,
    C#, and plenty of others we can’t even remember; only when we landed on Python
    did we finally get the feeling that you go through when you find the right couch
    in the shop, when all of your body is yelling: *Buy this one! This one is perfect!*'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们（作者）都很小的时候就开始编程了。Fabrizio 从 7 岁开始，在 Commodore VIC-20 上，后来被更大的兄弟 Commodore
    64 所取代。它使用的语言是 **BASIC**。Heinrich 在高中时开始学习 Pascal。在我们之间，我们使用过 Pascal、汇编、C、C++、Java、JavaScript、Visual
    Basic、PHP、ASP、ASP .NET、C# 以及我们甚至无法记住的许多其他语言；只有当我们到达 Python 时，我们才终于有了那种感觉，就像你在商店里找到正确的沙发时，你的整个身体都在喊：*买这个！这个就是完美的！*
- en: It took us about a day to become accustomed to it. Its syntax is a bit different
    from what we were used to, but after getting past that initial feeling of discomfort
    (like having new shoes), we both just fell in love with it. Deeply. Let us see
    why.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大约花了一天时间来适应它。它的语法与我们习惯的不同，但一旦我们克服了那种不适感（就像穿新鞋一样），我们俩都深深地爱上了它。让我们看看原因。
- en: About Python
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 Python
- en: Before we get into the gory details, let us get a sense of why someone would
    want to use Python. It embodies the following qualities.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入细节之前，让我们了解一下为什么有人想使用 Python。它体现了以下品质。
- en: Portability
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 便携性
- en: Python runs everywhere, and porting a program from Linux to Windows or Mac is
    usually just a matter of fixing paths and settings. Python is designed for portability,
    and it takes care of specific **operating system** ( **OS** ) quirks behind interfaces
    that shield you from the pain of having to write code tailored to a specific platform.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在任何地方都能运行，将程序从 Linux 迁移到 Windows 或 Mac 通常只是修复路径和设置的问题。Python 是为便携性设计的，它处理了特定
    **操作系统**（**OS**）的怪癖，这些怪癖在接口后面保护你免受编写针对特定平台定制的代码的痛苦。
- en: Coherence
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一致性
- en: Python is extremely logical and coherent. You can see it was designed by a brilliant
    computer scientist. Most of the time, you can just guess what a method is called
    if you do not know it.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Python 非常逻辑和连贯。你可以看出它是由一位杰出的计算机科学家设计的。大多数时候，如果你不知道一个方法的名称，你只需猜测一下就可以了。
- en: You may not realize how important this is right now, especially if you are not
    that experienced as a programmer, but this is a major feature. It means less clutter
    in your head, as well as less skimming through the documentation, and less need
    for mappings in your brain when you code.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能现在还没有意识到这一点有多重要，尤其是如果你作为一个程序员不是那么有经验的话，但这是一个主要特点。这意味着你的头脑中杂乱无章的东西更少，以及当你编码时，你大脑中映射的需求也更少。
- en: Developer productivity
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开发者生产力
- en: According to Mark Lutz ( *Learning Python, 5th Edition, O’Reilly Media* ), a
    Python program is typically one-fifth to one-third the size of equivalent Java
    or C++ code. This means the job gets done faster. And faster is good. Faster means
    being able to respond more quickly to the market. Less code not only means less
    code to write, but also less code to read (and professional coders read much more
    than they write), maintain, debug, and refactor.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 根据马克·卢茨（*《Python 学习，第 5 版，O’Reilly 媒体*）的说法，Python 程序通常比等价的 Java 或 C++ 代码小五分之一到三分之一。这意味着工作可以更快完成。更快是好事。更快意味着能够更快地响应市场。更少的代码不仅意味着要编写的代码更少，而且意味着要阅读（专业程序员读的比写的多）、维护、调试和重构的代码也更少。
- en: Another important aspect is that Python runs without the need for lengthy and
    time-consuming compilation and linkage steps, so there is no need to wait to see
    the results of your work.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要方面是，Python 可以在没有漫长的和耗时的编译和链接步骤的情况下运行，因此不需要等待看到你工作的结果。
- en: An extensive library
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 丰富的库
- en: Python has an incredibly extensive standard library (it is said to come with
    *batteries included* ). If that wasn’t enough, the Python international community
    maintains a body of third-party libraries, tailored to specific needs, which you
    can access freely at the **Python Package Index** ( **PyPI** ). When you code
    in Python and realize that a certain feature is required, in most cases, there
    is at least one library where that feature has already been implemented.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Python拥有一个极其广泛的标准库（据说它包含了*内置电池*）。如果这还不够的话，Python的国际社区还维护了一系列第三方库，这些库针对特定需求定制，你可以在**Python包索引**（**PyPI**）上免费访问它们。当你用Python编码并意识到需要某个特性时，在大多数情况下，至少有一个库已经实现了这个特性。
- en: Software quality
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件质量
- en: Python is heavily focused on readability, coherence, and quality. The language’s
    uniformity allows high readability, and this is crucial nowadays, as coding is
    more of a collective effort than a solo endeavor. Another important aspect of
    Python is its intrinsic multiparadigm nature. You can use it as a scripting language,
    but you can also employ object-oriented, imperative, and functional programming
    styles—it is extremely versatile.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Python非常注重可读性、连贯性和质量。语言的统一性使得可读性很高，这在当今时代尤为重要，因为编码越来越多地是集体努力而非个人奋斗。Python的另一个重要方面是其固有的多范式特性。你可以将其用作脚本语言，但也可以使用面向对象、命令式和函数式编程风格——它极其灵活。
- en: Software integration
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件集成
- en: Another important aspect is that Python can be extended and integrated with
    many other languages, which means that even when a company is using a different
    language as their mainstream tool, Python can come in and act as a gluing agent
    between complex applications that need to talk to each other in some way. This
    is more of an advanced topic, but in the real world, this feature is important.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要方面是Python可以扩展并与许多其他语言集成，这意味着即使一家公司使用不同的语言作为主流工具，Python也可以介入并作为需要以某种方式相互通信的复杂应用程序之间的粘合剂。这是一个更高级的话题，但在现实世界中，这个特性很重要。
- en: Data science
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据科学
- en: Python is among the most popular (if not **the** most popular) languages used
    in the fields of data science, machine learning, and artificial intelligence today.
    Knowledge of Python is therefore almost essential for those who want to have a
    career in these fields.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Python是目前数据科学、机器学习和人工智能领域使用最流行（如果不是**最流行**）的语言之一。因此，对于那些希望在这些领域有职业发展的人来说，掌握Python几乎是必需的。
- en: Satisfaction and enjoyment
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 满足与享受
- en: Last, but by no means least, there is the fun of it! Working with Python is
    fun; we can code for eight hours and leave the office happy and satisfied, unaffected
    by the struggle other coders have to endure because they use languages that do
    not provide them with the same amount of well-designed data structures and constructs.
    Python makes coding fun, no doubt about it, and fun promotes motivation and productivity.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但同样重要的是，是它的乐趣！使用Python很有趣；我们可以连续编码八小时，然后快乐而满足地离开办公室，不受其他程序员因使用不提供同样数量精心设计的数据结构和构造的语言而必须忍受的挣扎的影响。毫无疑问，Python让编码变得有趣，而乐趣可以促进动力和生产力。
- en: These are the major reasons why we would recommend Python to everyone. Of course,
    there are many other technical and advanced features that we could have mentioned,
    but they do not really pertain to an introductory section like this one. They
    will come up naturally, chapter after chapter, as we learn about Python in greater
    detail.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们推荐Python给每个人的主要原因。当然，我们还可以提到许多其他的技术和高级特性，但它们并不真正适用于像这样一个入门章节。随着我们更深入地了解Python，这些特性会自然而然地出现，一章接一章。
- en: Now, let’s look at what the potential limitations of Python are.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们来看看Python可能存在的局限性。
- en: What are the drawbacks?
  id: totrans-63
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有什么缺点？
- en: Aside from personal preferences, the primary drawback of Python lies in its
    execution speed. Typically, Python is slower than its compiled siblings. The standard
    implementation of Python produces, when you run an application, a compiled version
    of the source code called byte code (with the extension `.pyc` ), which is then
    run by the Python interpreter. The advantage of this approach is portability,
    which we pay for with increased runtimes because Python is not compiled down to
    the machine level, as other languages are.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 除了个人偏好之外，Python 的主要缺点在于其执行速度。通常，Python 的速度比编译型语言慢。Python 的标准实现会在运行应用程序时生成源代码的编译版本，称为字节码（扩展名为
    `.pyc`），然后由 Python 解释器运行。这种方法的优点是可移植性，我们为此付出了运行时间增加的代价，因为 Python 并没有像其他语言那样编译到机器级别。
- en: Despite this, Python speed is rarely a problem today, hence its wide use regardless
    of this downside. What happens is that, in real life, hardware cost is no longer
    a problem, and usually you can gain speed by parallelizing tasks. Moreover, many
    programs spend a great proportion of the time waiting for I/O operations to complete;
    therefore, the raw execution speed is often a secondary factor to the overall
    performance.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，Python 的速度在今天很少成为问题，因此无论这个缺点如何，它都得到了广泛的应用。实际情况是，硬件成本不再是问题，通常您可以通过并行化任务来提高速度。此外，许多程序花费大量时间等待
    I/O 操作完成；因此，原始的执行速度往往是整体性能的次要因素。
- en: It is worth noting that Python’s core developers have put great effort into
    speeding up operations on the most common data structures in the last few years.
    This effort, in some cases very successful, has somewhat alleviated this issue.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，Python 的核心开发者在过去几年里投入了大量精力来加速对最常见数据结构的操作。这种努力在某些情况下非常成功，在一定程度上缓解了这个问题。
- en: In situations where speed really is crucial, one can switch to faster Python
    implementations, such as **PyPy** , which provides, on average, just over a four-fold
    speedup by implementing advanced compilation techniques (check [https://pypy.org/](https://pypy.org/)
    for reference). It is also possible to write performance-critical parts of your
    code in faster languages, such as C or C++, and integrate that with your Python
    code. Libraries such as **pandas** and **NumPy** (which are commonly used for
    doing data science in Python) use such techniques.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在速度真正至关重要的场合，人们可以切换到更快的 Python 实现，例如 **PyPy**，它通过实现高级编译技术，平均提供超过四倍的速度提升（参考[https://pypy.org/](https://pypy.org/)获取更多信息）。您还可以将代码中性能关键的部分用更快的语言编写，例如
    C 或 C++，并将其与 Python 代码集成。例如，**pandas** 和 **NumPy**（在 Python 中进行数据科学时常用）就使用了这样的技术。
- en: There are a few different implementations of the Python language. In this book,
    we will use the reference implementation, known as CPython. You can find a list
    of other implementations at [https://www.python.org/download/alternatives/](https://www.python.org/download/alternatives/)
    .
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Python 语言有几种不同的实现方式。在这本书中，我们将使用被称为 CPython 的参考实现。您可以在[https://www.python.org/download/alternatives/](https://www.python.org/download/alternatives/)找到其他实现方式的列表。
- en: If that is not convincing enough, you can always consider that Python has been
    used to drive the backend of services such as Spotify and Instagram, where performance
    is a concern. From this, it can be seen that Python has done its job perfectly
    well.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这还不足以说服您，您可以考虑这样一个事实：Python 已被用于驱动 Spotify 和 Instagram 等服务的后端，在这些服务中性能是一个关注点。从这个角度来看，Python
    已经完美地完成了它的任务。
- en: Who is using Python today?
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 今天谁在使用 Python？
- en: Python is used in many different contexts, such as system programming, web and
    API programming, GUI applications, gaming and robotics, rapid prototyping, system
    integration, data science, database applications, real-time communication, and
    much more. Several prestigious universities have also adopted Python as their
    main language in computer science courses.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python 被用于许多不同的环境，例如系统编程、Web 和 API 编程、GUI 应用程序、游戏和机器人技术、快速原型设计、系统集成、数据科学、数据库应用程序、实时通信等等。一些著名的大学也将
    Python 作为计算机科学课程的主要语言。
- en: 'Here is a list of major companies and organizations that are known to use Python
    in their technology stack, product development, data analysis, or automation processes:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个已知使用 Python 的主要公司和组织的列表，它们在技术栈、产品开发、数据分析或自动化流程中使用 Python：
- en: Tech industry
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科技行业
- en: 'Google: Uses Python for many tasks including backend services, data analysis,
    and artificial intelligence (AI)'
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google：使用 Python 进行许多任务，包括后端服务、数据分析以及人工智能（AI）
- en: 'Facebook: Utilizes Python for various purposes, including infrastructure management
    and operational automation'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Facebook: 利用Python进行各种目的，包括基础设施管理和运营自动化'
- en: 'Instagram: Relies heavily on Python for its backend, making it one of the largest
    Django (a Python web framework) users'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Instagram: 严重依赖Python进行其后端，使其成为最大的Django（一个Python网络框架）用户之一'
- en: 'Spotify: Employs Python mainly for data analysis and backend services'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Spotify: 主要使用Python进行数据分析和服务后端'
- en: 'Netflix: Uses Python for data analysis, operational automation, and security'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Netflix: 使用Python进行数据分析、运营自动化和安全'
- en: Financial sector
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融行业
- en: 'JP Morgan Chase: Uses Python for financial models, data analysis, and algorithmic
    trading'
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '摩根大通（JP Morgan Chase）: 使用Python进行金融模型、数据分析和算法交易'
- en: 'Goldman Sachs: Employs Python for various financial models and applications'
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '高盛（Goldman Sachs）: 使用Python进行各种金融模型和应用'
- en: 'Bloomberg: Uses Python for financial data analysis and its Bloomberg Terminal
    interface'
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '彭博社（Bloomberg）: 使用Python进行金融数据分析及其彭博终端界面'
- en: Technology and software
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 科技和软件
- en: 'IBM: Utilizes Python for AI, machine learning, and cybersecurity'
  id: totrans-84
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '国际商业机器公司（IBM）: 利用Python进行人工智能、机器学习和网络安全'
- en: 'Intel: Uses Python for hardware testing and development processes'
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '英特尔（Intel）: 使用Python进行硬件测试和开发流程'
- en: 'Dropbox: The desktop client is largely written in Python'
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Dropbox: 桌面客户端主要用Python编写'
- en: Space and research
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间和研究
- en: 'NASA: Uses Python for various purposes, including data analysis and system
    integration'
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '美国国家航空航天局（NASA）: 使用Python进行多种目的，包括数据分析系统和系统集成'
- en: 'CERN: Employs Python for data processing and analysis in physics experiments'
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '欧洲核子研究中心（CERN）: 使用Python进行物理实验中的数据处理和分析'
- en: Retail and e-Commerce
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 零售和电子商务
- en: 'Amazon: Uses Python for data analysis, product recommendations, and operational
    automation'
  id: totrans-91
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '亚马逊（Amazon）: 使用Python进行数据分析、产品推荐和运营自动化'
- en: 'eBay: Utilizes Python for various backend services and data analysis'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'eBay: 利用Python进行各种后端服务和数据分析'
- en: Entertainment and media
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 娱乐和媒体
- en: 'Pixar: Uses Python for animation software and scripting in the animation process'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '皮克斯（Pixar）: 使用Python进行动画软件和动画过程中的脚本编写'
- en: 'Industrial Light & Magic (ILM): Employs Python for visual effects and image
    processing'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '工业光魔（Industrial Light & Magic, ILM）: 使用Python进行视觉效果和图像处理'
- en: Education and learning platforms
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 教育和学习平台
- en: 'Coursera: Utilizes Python for web development and backend services'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Coursera: 利用Python进行网络开发和后端服务'
- en: 'Khan Academy: Uses Python for educational content delivery and backend services'
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '可汗学院（Khan Academy）: 使用Python进行教育内容交付和后端服务'
- en: Government and non-profit
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 政府和非营利组织
- en: 'The United States Federal Government: Has various departments and agencies
    using Python for data analysis, cybersecurity, and automation'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 美国联邦政府：有多个部门和机构使用Python进行数据分析、网络安全和自动化
- en: 'The Raspberry Pi Foundation: Uses Python as a primary programming language
    for educational purposes and projects'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '树莓派基金会（The Raspberry Pi Foundation）: 将Python作为教育目的和项目的首选编程语言'
- en: Setting up the environment
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'On our machines (MacBook Pro), this is the latest Python version:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的机器（MacBook Pro）上，这是最新的Python版本：
- en: '[PRE0]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: So, you can see that the version is 3.12.2, which was out on October 2, 2023.
    The preceding text is a little bit of Python code that was typed into a console.
    We will talk about this in a moment.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您可以看到版本是3.12.2，该版本于2023年10月2日发布。前面的文本是一段输入到控制台中的Python代码。我们稍后会讨论这个问题。
- en: All the examples in this book will be run using Python 3.12. If you wish to
    follow the examples and download the source code for this book, please make sure
    you are using the same version.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的所有示例都将使用Python 3.12运行。如果您希望跟随示例并下载本书的源代码，请确保您使用的是相同的版本。
- en: Installing Python
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Python
- en: The process of installing Python on your computer depends on the operating system
    you have. First of all, Python is fully integrated and, most likely, already installed
    in almost every Linux distribution. If you have a recent version of macOS, it
    is likely that Python 3 is already there as well, whereas if you are using Windows,
    you probably need to install it.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的计算机上安装Python的过程取决于您所使用的操作系统。首先，Python在几乎每个Linux发行版中都是完全集成的，并且很可能已经安装。如果您有较新的macOS版本，Python
    3可能也已经安装，而如果您使用的是Windows，您可能需要安装它。
- en: Regardless of Python being already installed in your system, you will need to
    make sure that you have version 3.12 installed.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 无论Python是否已安装在您的系统中，您都需要确保已安装版本3.12。
- en: To check if you have Python already installed on your system, try typing `python
    --version` or `python3 --version` in a command prompt (more on this later).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查您是否已在系统上安装了 Python，请在命令提示符中尝试输入 `python --version` 或 `python3 --version`（关于这一点稍后会有更多介绍）。
- en: 'The place you want to start is the official Python website: [https://www.python.org](https://www.python.org)
    . This website hosts the official Python documentation and many other resources
    that you will find very useful.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要开始的地方是官方的 Python 网站：[https://www.python.org](https://www.python.org) 。这个网站托管了官方的
    Python 文档以及许多其他你会发现非常有用的资源。
- en: Useful installation resources
  id: totrans-112
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 有用的安装资源
- en: The Python website hosts useful information regarding the installation of Python
    on various operating systems. Please refer to the relevant page for your operating
    system.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Python 网站提供了有关在各个操作系统上安装 Python 的有用信息。请参考您操作系统的相关页面。
- en: 'Windows and macOS:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: Windows 和 macOS：
- en: '[https://docs.python.org/3/using/windows.html](https://docs.python.org/3/using/windows.html)'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/using/windows.html](https://docs.python.org/3/using/windows.html)'
- en: '[https://docs.python.org/3/using/mac.html](https://docs.python.org/3/using/mac.html)'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/using/mac.html](https://docs.python.org/3/using/mac.html)'
- en: 'For Linux, please refer to the following links:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Linux，请参考以下链接：
- en: '[https://docs.python.org/3/using/unix.html](https://docs.python.org/3/using/unix.html)'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://docs.python.org/3/using/unix.html](https://docs.python.org/3/using/unix.html)'
- en: '[https://ubuntuhandbook.org/index.php/2023/05/install-python-3-12-ubuntu/](https://ubuntuhandbook.org/index.php/2023/05/install-python-3-12-ubuntu/)'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://ubuntuhandbook.org/index.php/2023/05/install-python-3-12-ubuntu/](https://ubuntuhandbook.org/index.php/2023/05/install-python-3-12-ubuntu/)'
- en: Installing Python on Windows
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Windows 上安装 Python
- en: As an example, this is the procedure to install Python on Windows. Head to [https://www.python.org/downloads/](https://www.python.org/downloads/)
    and download the appropriate installer according to the CPU of your computer.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这是在 Windows 上安装 Python 的步骤。前往 [https://www.python.org/downloads/](https://www.python.org/downloads/)
    下载适合您计算机 CPU 的相应安装程序。
- en: Once you have it, you can double-click on it in order to start the installation.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦下载，您可以通过双击它来启动安装。
- en: '![img](img/B30992_01_01.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B30992_01_01.png)'
- en: 'Figure 1.1: Starting the installation process on Windows'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.1：在 Windows 上开始安装过程
- en: We recommend choosing the default install, and NOT ticking the **Add python.exe
    to PATH** option to prevent clashes with other versions of Python that might be
    installed on your machine, potentially by other users.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议选择默认安装，并且不要勾选 **将 python.exe 添加到 PATH** 选项，以防止与您机器上可能已安装的其他版本的 Python 发生冲突，可能是由其他用户安装的。
- en: For a more comprehensive set of guidelines, please refer to the link indicated
    in the previous paragraph.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更全面的指南，请参考上一段中提到的链接。
- en: Once you click on **Install Now** , the installation procedure will begin.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦点击 **现在安装**，安装程序将开始。
- en: '![img](img/B30992_01_02.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B30992_01_02.png)'
- en: 'Figure 1.2: Installation in progress'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.2：安装进行中
- en: Once the installation is complete, you will land on the final screen.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您将进入最终屏幕。
- en: '![img](img/B30992_01_03.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/B30992_01_03.png)'
- en: 'Figure 1.3: Installation complete'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.3：安装完成
- en: Click on **Close** to finish the installation.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **关闭** 以完成安装。
- en: Now that Python is installed on your system, open a command prompt and run the
    **Python interactive shell** by typing `py` . This command will select the latest
    version of Python installed on your machine. At the time of writing, 3.12 is the
    latest available version of Python. If you have a more recent version installed,
    you can specify the version with the command `py -3.12` .
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Python 已安装到您的系统上，打开命令提示符，通过输入 `py` 来运行 **Python 交互式外壳**。此命令将选择您机器上安装的最新版本的
    Python。在撰写本文时，3.12 是可用的最新版本。如果您安装了更早的版本，您可以使用命令 `py -3.12` 指定版本。
- en: To open the command prompt in Windows, go to the **Start** menu and type `cmd`
    in the search box to start your terminal up. Alternatively, you can also use Powershell.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 Windows 中打开命令提示符，请前往 **开始** 菜单，在搜索框中输入 `cmd` 以启动终端。或者，您也可以使用 Powershell。
- en: Installing Python on macOS
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 macOS 上安装 Python
- en: On macOS, the installation procedure is similar to that of Windows. Once you
    have downloaded the appropriate installer for your machine, complete the installation
    steps, and then start a terminal by going to **Applications > Utilities > Terminal**
    . Alternatively, you can install it through Homebrew.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在 macOS 上，安装过程与 Windows 类似。一旦下载了适合您机器的相应安装程序，完成安装步骤，然后通过前往 **应用程序 > 工具 > 终端**
    来启动终端。或者，您也可以通过 Homebrew 安装它。
- en: Once in the terminal window, you can type `python` . If that launches the wrong
    version, you can try and specify the version with either `python3` or `python3.12`
    .
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦进入终端窗口，你可以输入 `python`。如果启动了错误的版本，你可以尝试使用 `python3` 或 `python3.12` 来指定版本。
- en: Installing Python on Linux
  id: totrans-139
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Python
- en: The process of installing Python on Linux is normally a bit more complex than
    that for Windows or macOS. The best course of action, if you are on a Linux machine,
    is to search for the most up-to-date set of steps for your distribution online.
    These will likely be quite different from one distribution to another, so it is
    difficult to give an example that would be relevant for everyone. Please refer
    to the link in the *Useful installation resources* section for guidance.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 上安装 Python 的过程通常比在 Windows 或 macOS 上复杂一些。如果你使用的是 Linux 机器，最佳做法是在网上搜索适用于你发行版的最新步骤。这些步骤可能因发行版而异，因此很难给出一个对每个人都有相关性的例子。请参考“有用的安装资源”部分中的链接以获取指导。
- en: The Python console
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 控制台
- en: 'We will use the term **console** interchangeably to indicate the Linux console,
    the Windows Command Prompt or Powershell, and the macOS Terminal. We will also
    indicate the command-line prompt with the default Linux format, like this:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 **控制台** 这个术语来交替表示 Linux 控制台、Windows 命令提示符或 PowerShell、macOS 终端。我们还将使用默认的
    Linux 格式来指示命令行提示符，如下所示：
- en: '[PRE1]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If you are not familiar with that, please take some time to learn the basics
    of how a console works. In a nutshell, after the `$` sign, you will type your
    instructions. Pay attention to capitalization and spaces, as they are very important.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对此不熟悉，请花些时间学习控制台的基本工作原理。简而言之，在 `$` 符号之后，你将输入你的指令。注意大小写和空格，因为它们非常重要。
- en: Whatever console you open, type `python` at the prompt ( `py` on Windows) and
    make sure the Python interactive shell appears. Type `exit()` to quit. Keep in
    mind that you may have to specify `python3` or `python3.12` if your OS comes with
    other Python versions preinstalled.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你打开哪个控制台，在提示符处输入 `python`（在 Windows 上是 `py`），确保出现 Python 交互式外壳。输入 `exit()`
    退出。请记住，如果你的操作系统预装了其他 Python 版本，你可能需要指定 `python3` 或 `python3.12`。
- en: We often refer to the Python interactive shell simply as the **Python console**
    .
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通常将 Python 交互式外壳简单地称为 **Python 控制台**。
- en: 'This is roughly what you should see when you run Python (some details will
    change according to the version and OS):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这大致是你运行 Python 时应该看到的内容（一些细节会根据版本和操作系统而变化）：
- en: '[PRE2]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now that Python is set up and you can run it, it is time to make sure you have
    the other tool that will be indispensable to follow the examples in the book:
    a virtual environment.'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在Python已经设置好了，你可以运行它了，是时候确保你拥有其他工具，这将对于跟随书中的示例至关重要：一个虚拟环境。
- en: About virtual environments
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关于虚拟环境
- en: When working with Python, it is very common to use virtual environments. Let
    us see what they are and why we need them by means of a simple example.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用 Python 时，使用虚拟环境是非常常见的。让我们通过一个简单的例子来看看它们是什么以及为什么我们需要它们。
- en: You install Python on your system, and you start working on a website for client
    X. You create a project folder and start coding. Along the way, you also install
    some libraries, for example, the Django framework. Let us say the Django version
    you installed for Project X is 4.2.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你在你的系统上安装了 Python，并开始为客户 X 制作网站。你创建了一个项目文件夹并开始编码。在这个过程中，你还安装了一些库，例如 Django 框架。假设你为项目
    X 安装的 Django 版本是 4.2。
- en: 'Now, your website is so good that you get another client, Y. She wants you
    to build another website, so you start Project Y and, along the way, you need
    to install Django again. The only issue is that now the Django version is 5.0
    and you cannot install it on your system because this would replace the version
    you installed for Project X. You do not want to risk introducing incompatibility
    issues, so you have two choices: either you stick with the version you have currently
    on your machine, or you upgrade it and make sure the first project is still fully
    working correctly with the new version.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你的网站如此出色，你得到了另一个客户 Y。她希望你再建一个网站，所以你开始项目 Y，在这个过程中，你需要再次安装 Django。唯一的问题是现在
    Django 的版本是 5.0，你无法在你的系统上安装它，因为这会替换掉为项目 X 安装的版本。你不想冒引入不兼容性问题的风险，所以你有两个选择：要么坚持使用你机器上当前的版本，要么升级它并确保第一个项目仍然可以完全正确地与新版本一起工作。
- en: 'Let us be honest; neither of these options is very appealing, right? Definitely
    not. But there is a solution: virtual environments!'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们坦诚地说；这两个选项都不太吸引人，对吧？绝对不是。但是有一个解决方案：虚拟环境！
- en: Virtual environments are isolated Python environments, each of which is a folder
    that contains all the necessary executables to use the packages that a Python
    project would need (think of packages as libraries for the time being).
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '虚拟环境是隔离的Python环境，每个环境都是一个包含所有必要可执行文件的文件夹，这些文件用于使用Python项目所需的包（暂时将包视为库）。 '
- en: So, you create a virtual environment for Project X, install all the dependencies,
    and then you create a virtual environment for Project Y, and install all its dependencies
    without the slightest worry because every library you install ends up within the
    boundaries of the appropriate virtual environment. In our example, Project X will
    hold Django 4.2, while Project Y will hold Django 5.0.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，您为项目X创建一个虚拟环境，安装所有依赖项，然后为项目Y创建一个虚拟环境并安装其所有依赖项，而无需担心，因为您安装的每个库最终都会在适当的虚拟环境边界内。在我们的例子中，项目X将包含Django
    4.2，而项目Y将包含Django 5.0。
- en: 'It is of great importance that you never install libraries directly at the
    system level. Linux, for example, relies on Python for many different tasks and
    operations, and if you fiddle with the system installation of Python, you risk
    compromising the integrity of the entire system. So, take this as a rule: always
    create a virtual environment when you start a new project.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 非常重要的一点是，您永远不要在系统级别直接安装库。例如，Linux依赖于Python执行许多不同的任务和操作，如果您篡改Python的系统安装，您可能会危及整个系统的完整性。所以，请记住这个规则：在开始新项目时，始终创建一个虚拟环境。
- en: When it comes to creating a virtual environment on your system, there are a
    few different methods to carry this out. Since Python 3.5, the suggested way to
    create a virtual environment is to use the `venv` module. You can look it up on
    the official documentation page ( [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)
    ) for further information.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到在您的系统上创建虚拟环境时，有几种不同的方法可以实现。自Python 3.5以来，建议使用`venv`模块来创建虚拟环境。您可以在官方文档页面（[https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)）上查找更多信息。
- en: 'If you are using a Debian-based distribution of Linux, for example, you will
    need to install the `venv` module before you can use it:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你使用的是基于Debian的Linux发行版，在使用之前，你需要安装`venv`模块：
- en: '[PRE3]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Another common way of creating virtual environments is to use the `virtualenv`
    third-party Python package. You can find it on its official website: [https://virtualenv.pypa.io](https://virtualenv.pypa.io)
    .'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟环境的另一种常见方法是使用第三方Python包`virtualenv`。您可以在其官方网站上找到它：[https://virtualenv.pypa.io](https://virtualenv.pypa.io)。
- en: In this book, we will use the recommended technique, which leverages the `venv`
    module from the Python standard library.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用推荐的技巧，该技巧利用了Python标准库中的`venv`模块。
- en: Your first virtual environment
  id: totrans-163
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 您的第一个虚拟环境
- en: 'It is very easy to create a virtual environment, but depending on how your
    system is configured and which Python version you want the virtual environment
    to run on, you need to run the command properly. Another thing you will need to
    do when you want to work with it is to activate it. Activating virtual environments
    produces some path juggling behind the scenes so that when you call the Python
    interpreter from that shell, it will come from within the virtual environment,
    instead of the system. We will show you a full example on macOS and Windows (on
    Linux, it will be very similar to that of macOS). We will:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 创建虚拟环境非常简单，但根据您的系统配置以及您希望虚拟环境运行的Python版本，您需要正确运行命令。当您想要使用它时，您还需要执行的操作是激活它。激活虚拟环境在幕后进行一些路径调整，以便当您从该shell调用Python解释器时，它将来自虚拟环境，而不是系统。我们将为您展示在macOS和Windows上的完整示例（在Linux上，它将与macOS非常相似）。我们将：
- en: Open a terminal and change into the folder (directory) we use as root for our
    projects (our folder is `code` ). We are going to create a new folder called `my-project`
    and change into it.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开一个终端，切换到我们用作项目根目录的文件夹（目录）（我们的文件夹是`code`）。我们将创建一个名为`my-project`的新文件夹，并切换到它。
- en: Create a virtual environment called `lpp4ed` .
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为`lpp4ed`的虚拟环境。
- en: After creating the virtual environment, we will activate it. The methods are
    slightly different between Linux, macOS, and Windows.
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建虚拟环境后，我们将激活它。在Linux、macOS和Windows之间，方法略有不同。
- en: Then, we will make sure that we are running the desired Python version (3.12.X)
    by running the Python interactive shell.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将确保我们正在运行所需的Python版本（3.12.X），通过运行Python交互式shell来实现。
- en: Finally, we will deactivate the virtual environment.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将取消虚拟环境的激活。
- en: Some developers prefer to call all virtual environments with the same name (for
    example, `.venv` ). This way, they can configure tools and run scripts against
    any virtual environment by just knowing their location. The dot in `.venv` is
    there because in Linux/macOS, prepending a name with a dot makes that file or
    folder “invisible.”
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 一些开发者喜欢将所有虚拟环境命名为相同的名称（例如，`.venv`）。这样，他们可以通过知道其位置来配置工具和运行脚本，针对任何虚拟环境。`.venv`
    中的点存在是因为在 Linux/macOS 中，在名称前加上点会使该文件或文件夹“不可见”。
- en: These steps are all you need to start a project.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤就是你开始一个项目所需的所有。
- en: 'We are going to start with an example on macOS (note that you might get a slightly
    different result, according to your OS, Python version, and so on). In this listing,
    lines that start with a hash, `#` , are comments, spaces have been introduced
    for readability, and an arrow, `→` , indicates where the line has wrapped around
    due to lack of space:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将以 macOS 上的一个示例开始（请注意，根据你的操作系统、Python 版本等，你可能会得到略有不同的结果）。在这个列表中，以井号 `#` 开头的行是注释，为了可读性添加了空格，箭头
    `→` 表示由于空间不足而换行的行：
- en: '[PRE4]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Each step has been marked with a comment, so you should be able to follow along
    quite easily.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每个步骤都带有注释，所以你应该能够很容易地跟随。
- en: Something to notice here is that to activate the virtual environment, we need
    to run the `lpp4ed/bin/activate` script, which needs to be sourced. When a script
    is *sourced* , it means that it is executed in the current shell, and its effects
    last after the execution. This is very important. Also notice how the prompt changes
    after we activate the virtual environment, showing its name on the left (and how
    it disappears when we deactivate it).
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这里需要注意的一点是，为了激活虚拟环境，我们需要运行 `lpp4ed/bin/activate` 脚本，该脚本需要被引用。当一个脚本被 *引用* 时，意味着它在当前
    shell 中执行，并且其效果在执行后仍然持续。这非常重要。同时注意，在激活虚拟环境后，提示符如何发生变化，显示其名称在左侧（以及当我们取消激活时它如何消失）。
- en: 'On a Windows 11 PowerShell, the steps are as follows:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 11 PowerShell 中，步骤如下：
- en: '[PRE5]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Notice how, on Windows, after activating the virtual environment, you can either
    use the `py` command or, more directly, `python` .
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在 Windows 上，激活虚拟环境后，你可以使用 `py` 命令，或者更直接地使用 `python`。
- en: 'At this point, you should be able to create and activate a virtual environment.
    Please try and create another one on your own. Get acquainted with this procedure—it
    is something that you will always be doing: *we never work system-wide with Python*
    , remember? Virtual environments are extremely important.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，你应该能够创建并激活一个虚拟环境。请尝试自己创建另一个。熟悉这个流程——这是你将一直要做的事情：*我们从不全局使用 Python*，记住？虚拟环境非常重要。
- en: The source code for the book contains a dedicated folder for each chapter. When
    the code shown in the chapter requires third-party libraries to be installed,
    we will include a `requirements.txt` file (or an equivalent `requirements` folder
    with more than one text file inside) that you can use to install the libraries
    required to run that code. We suggest that when experimenting with the code for
    a chapter, you create a dedicated virtual environment for that chapter. This way,
    you will be able to get some practice in the creation of virtual environments,
    and the installation of third-party libraries.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍的源代码为每个章节都包含一个专门的文件夹。当章节中显示的代码需要安装第三方库时，我们将包含一个 `requirements.txt` 文件（或一个包含多个文本文件的等效
    `requirements` 文件夹），你可以使用它来安装运行该代码所需的库。我们建议在实验章节的代码时，为该章节创建一个专门的虚拟环境。这样，你将能够在创建虚拟环境和安装第三方库方面获得一些实践。
- en: Installing third-party libraries
  id: totrans-181
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装第三方库
- en: 'In order to install third-party libraries, we need to use the Python Package
    Installer, known as **pip** . Chances are that it is already available to you
    within your virtual environment, but if not, you can learn all about it on its
    documentation page: [https://pip.pypa.io](https://pip.pypa.io) .'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 为了安装第三方库，我们需要使用 Python 包安装器，也就是 **pip**。很可能它已经在你虚拟环境中可用，如果没有，你可以在其文档页面上了解所有相关信息：[https://pip.pypa.io](https://pip.pypa.io)。
- en: 'The following example shows how to create a virtual environment and install
    a couple of third-party libraries taken from a requirements file:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了如何创建一个虚拟环境并安装从 requirements 文件中获取的几个第三方库：
- en: '[PRE6]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: As you can see at the bottom of the listing, `pip` has installed both libraries
    that are in the requirements file, plus a few more. This happened because both
    `django` and `requests` have their own list of third-party libraries that they
    depend upon, and therefore pip will install them automatically for us.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在列表底部可以看到的，`pip`安装了要求文件中的所有库，还有一些额外的库。这是因为`django`和`requests`都有自己的第三方库列表，它们依赖于这些库，因此`pip`会自动为我们安装它们。
- en: Using a `requirements.txt` file is just one of the many ways of installing third-party
    libraries in Python. You can also just specify the names of the packages you want
    to install directly, for example, `pip install django` .
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`requirements.txt`文件只是Python中安装第三方库的许多方法之一。你也可以直接指定要安装的包名，例如，`pip install
    django`。
- en: 'You can find more information in the pip user guide: [https://pip.pypa.io/en/stable/user_guide/](https://pip.pypa.io/en/stable/user_guide/)
    .'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在pip用户指南中找到更多信息：[https://pip.pypa.io/en/stable/user_guide/](https://pip.pypa.io/en/stable/user_guide/)。
- en: Now, with the scaffolding out of the way, we are ready to talk a bit more about
    Python and how it can be used. Before we do that, though, allow us to say a few
    words about the console.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，随着框架的搭建完成，我们准备更多地讨论Python及其用法。不过，在我们这样做之前，让我们先说几句关于控制台的话。
- en: The console
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制台
- en: In this era of GUIs and touchscreen devices, it may seem a little ridiculous
    to have to resort to a tool such as the console, when everything is just about
    one click away.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个GUI和触摸屏设备的时代，当一切似乎都只需一键即可完成时，不得不求助于像控制台这样的工具，这似乎有些荒谬。
- en: But the truth is every time you remove your hand from the keyboard to grab your
    mouse and move the cursor over to the spot you want to click on, you’re losing
    time. Getting things done with the console, counter-intuitive though it may at
    first seem, results in higher productivity and speed. Believe us, we know—you
    will have to trust us on this.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 但事实是，每当你从键盘上抬起手去抓鼠标，并将光标移动到你想要点击的位置时，你都在浪费时间。尽管一开始可能感觉不太直观，但使用控制台完成任务可以提高生产力和速度。相信我们，我们知道——你将不得不在这方面信任我们。
- en: 'Speed and productivity are important, and even though we have nothing against
    the mouse, being fluent with the console is very good for another reason: when
    you develop code that ends up on some server, the console might be the only available
    tool to access the code on that server. If you make friends with it, you will
    never get lost when it is of utmost importance that you do not (typically, when
    the website is down, and you have to investigate very quickly what has happened).'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 速度和生产率很重要，尽管我们并不反对使用鼠标，但熟练掌握控制台还有一个很好的原因：当你开发的代码最终部署到某个服务器上时，控制台可能是唯一可用的工具来访问该服务器上的代码。如果你与它成为朋友，当你最需要它的时候，你永远不会迷失方向（通常，当网站宕机时，你必须快速调查发生了什么）。
- en: If you are still not convinced, please give us the benefit of the doubt and
    give it a try. It is easier than you think, and you will not regret it. There
    is nothing more pitiful than a good developer who gets lost within an SSH connection
    to a server because they are used to their own custom set of tools, and only to
    that.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仍然没有说服自己，请给我们一个机会，试一试。这比你想象的要简单，你不会后悔的。没有什么比一个优秀的开发者因为习惯了自己定制的工具集，而迷失在服务器的SSH连接中更可怜的了。
- en: Now, let us get back to Python.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回到Python上来。
- en: How to run a Python program
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何运行Python程序
- en: There are a few different ways in which you can run a Python program.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过几种不同的方式来运行Python程序。
- en: Running Python scripts
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Python脚本
- en: Python can be used as a scripting language; in fact, it always proves itself
    very useful. Scripts are files (usually of small dimensions) that you normally
    execute to do something like a task. Many developers end up having an arsenal
    of tools that they use when they need to perform a task. For example, you can
    have scripts to parse data in a format and render it into another one, or you
    can use a script to work with files and folders; you can create or modify configuration
    files—technically, there is not much that cannot be done in a script.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Python可以用作脚本语言；事实上，它总是证明自己非常有用。脚本通常是执行某些任务（如任务）的文件（通常尺寸较小）。许多开发者最终会拥有一系列工具，他们在需要执行任务时使用这些工具。例如，你可以有脚本来解析一种格式的数据并将其渲染成另一种格式，或者你可以使用脚本来处理文件和文件夹；你可以创建或修改配置文件——从技术上讲，在脚本中几乎没有什么不能做的。
- en: It is rather common to have scripts running at a precise time on a server. For
    example, if your website database needs cleaning every 24 hours (for example,
    to regularly clean up expired user sessions), you could set up a Cron job that
    fires your script at 1:00 A.M. every day.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 在服务器上脚本在精确时间运行是很常见的事情。例如，如果你的网站数据库需要每24小时清理一次（例如，定期清理过期的用户会话），你可以设置一个Cron作业，每天凌晨1点触发你的脚本。
- en: According to Wikipedia, the software utility Cron is a time-based job scheduler
    in Unix-like computer operating systems. People who set up and maintain software
    environments use Cron (or a similar technology) to schedule jobs (commands or
    shell scripts) to run periodically at fixed times, dates, or intervals.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科，软件实用工具Cron是类Unix计算机操作系统中基于时间的作业调度器。那些设置和维护软件环境的人使用Cron（或类似技术）来安排作业（命令或shell脚本）在固定的时间、日期或间隔定期运行。
- en: We have Python scripts to do all the menial tasks that would take us minutes
    or more to do manually, and at some point, we decided to automate.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有Python脚本来完成所有那些需要我们花费几分钟甚至更多时间手动完成的琐事，在某个时候，我们决定自动化。
- en: Running the Python interactive shell
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 运行Python交互式Shell
- en: Another way of running Python is by calling the interactive shell. This is something
    we saw when we typed `python` in the command line of our console.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 运行Python的另一种方式是通过调用交互式Shell。这是我们之前在控制台命令行中输入`python`时看到的事情。
- en: 'So, open up a console, activate your virtual environment (which by now should
    be second nature to you, right?), and type `python` . You will be presented with
    a few lines that should look something like this:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，打开一个控制台，激活你的虚拟环境（到现在这应该已经变得很自然了，对吧？），然后输入`python`。你会看到几行，看起来应该像这样：
- en: '[PRE7]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Those `>>>` are the prompt of the shell. They tell you that Python is waiting
    for you to type something. If you type a simple instruction, something that fits
    in one line, that is all you will see. However, if you type something that requires
    more than one line of code, the shell will change the prompt to `...` , giving
    you a visual clue that you are typing a multiline statement (or anything that
    would require more than one line of code).
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 那些的`>>>`是Shell的提示符。它们告诉你Python正在等待你输入。如果你输入一个简单的指令，一行之内就能完成的指令，那么你将看到的就是这些。然而，如果你输入需要多行代码的指令，Shell会将提示符更改为`...`，给你一个视觉提示，表明你正在输入一个多行语句（或任何需要多行代码的事情）。
- en: 'Go on, try it out; let us do some basic math:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 继续尝试吧；让我们做一些基本的数学运算：
- en: '[PRE8]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The last operation is showing you something incredible. We raise `2` to the
    power of `1024` , and Python handles this task with no trouble at all. Try to
    do it in Java, C++, or C#. It will not work, unless you use special libraries
    to handle such big numbers.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个操作是向你展示一些令人难以置信的事情。我们将`2`的`1024`次方，Python处理这个任务毫无困难。尝试在Java、C++或C#中做这件事，除非你使用特殊库来处理这样的大数，否则它将无法工作。
- en: We use the interactive shell every day. It is extremely useful to debug very
    quickly; for example, to check if a data structure supports an operation, or to
    inspect or run a piece of code. You will find that the interactive shell soon
    becomes one of your dearest friends on this journey you are embarking on.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天都在使用交互式Shell。它对于快速调试来说极其有用；例如，检查一个数据结构是否支持某个操作，或者检查或运行一段代码。你会发现，交互式Shell很快就会成为你在旅途中最亲密的朋友之一。
- en: Another solution, which comes in a much nicer graphic layout, is to use the
    **Integrated Development and Learning Environment** ( **IDLE** ). It is quite
    a simple **Integrated Development Environment** ( **IDE** ), which is intended
    mostly for beginners. It has a slightly larger set of capabilities than the bare
    interactive shell you get in the console, so you may want to explore it. It comes
    for free in the Windows and macOS Python installers, and you can easily install
    it on any other system. You can find more information about it on the Python website.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个解决方案，它提供了一个更漂亮的图形布局，是使用**集成开发和学习环境**（**IDLE**）。它是一个非常简单的**集成开发环境**（**IDE**），主要面向初学者。它比控制台中获得的裸交互式Shell的功能集稍大，所以你可能想探索一下。它随Windows和macOS
    Python安装程序免费提供，你可以在任何其他系统上轻松安装它。你可以在Python网站上找到更多关于它的信息。
- en: Guido Van Rossum named Python after the British comedy group Monty Python, so
    it is rumored that the name *IDLE* was chosen in honor of Eric Idle, one of Monty
    Python’s founding members.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 吉多·范罗苏姆将Python命名为英国喜剧团体蒙提·派森的名字，所以据说选择*IDLE*这个名字是为了纪念蒙提·派森的创始人之一埃里克·艾德尔。
- en: Running Python as a service
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 将Python作为服务运行
- en: Apart from being run as a script, and within the boundaries of a shell, Python
    can be coded and run as an application. We will see examples throughout this book
    of this mode. We will look at it in more depth in a moment, when we talk about
    how Python code is organized and run.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 除了作为脚本运行和在壳内运行之外，Python 还可以编码并作为应用程序运行。在这本书的整个过程中，我们将看到这种模式的示例。我们将在讨论 Python
    代码的组织和运行方式时更深入地探讨这一点。
- en: Running Python as a GUI application
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 以 GUI 应用程序的形式运行 Python
- en: Python can also be used to create **Graphical User Interfaces (GUIs)** . There
    are several frameworks available, some of which are cross-platform, and some others
    that are platform-specific. A popular example of a GUI application library is
    **Tkinter** , which is an object-oriented layer that lives on top of `Tk` (Tkinter
    means Tk interface).
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Python 也可以用来创建 **图形用户界面 (GUI)**。有多个框架可供选择，其中一些是跨平台的，而另一些则是特定平台的。一个流行的 GUI 应用程序库示例是
    **Tkinter**，它是一个位于 `Tk` 之上的面向对象层（Tkinter 意味着 Tk 接口）。
- en: Tk is a GUI toolkit that takes desktop application development to a higher level
    than the conventional approach. It is the standard GUI for **Tool Command Language**
    ( **Tcl** ), but also for many other dynamic languages, and it can produce rich
    native applications that run seamlessly on Windows, Linux, macOS, and more.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: Tk 是一个将桌面应用程序开发提升到比传统方法更高的水平的 GUI 工具包。它是 **工具命令语言**（**Tcl**）的标准 GUI，也是许多其他动态语言的
    GUI，它可以在 Windows、Linux、macOS 等操作系统上无缝运行原生应用程序。
- en: Tkinter comes bundled with Python; therefore, it gives the programmer easy access
    to the GUI world.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: Tkinter 是 Python 的内置库，因此它为程序员提供了轻松访问 GUI 世界的方法。
- en: 'Other widely used GUI frameworks include:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 其他广泛使用的 GUI 框架包括：
- en: PyQT/PySide
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PyQT/PySide
- en: wxPython
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: wxPython
- en: Kivy
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Kivy
- en: 'Describing them in detail is outside the scope of this book, but you can find
    all the information you need on the Python website: [https://docs.python.org/3/faq/gui.html](https://docs.python.org/3/faq/gui.html)
    .'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 详细描述它们超出了本书的范围，但你可以在 Python 网站上找到所需的所有信息：[https://docs.python.org/3/faq/gui.html](https://docs.python.org/3/faq/gui.html)。
- en: 'Information can be found in the *What GUI toolkits exist for Python?* section.
    If GUIs are what you are looking for, remember to choose the one you want according
    to some basic principles. Make sure they:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 *Python 有哪些 GUI 工具包？* 这一部分找到信息。如果你正在寻找 GUI，记得根据一些基本原则选择你想要的。确保它们：
- en: Offer all the features you may need to develop your project
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供你可能需要的所有功能来开发你的项目
- en: Run on all the platforms you may need to support
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在你需要支持的平台上运行
- en: Rely on a community that is as wide and active as possible
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 依靠尽可能广泛和活跃的社区
- en: Wrap graphic drivers/tools that you can easily install/access
  id: totrans-228
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 包装你可以轻松安装/访问的图形驱动程序/工具
- en: How is Python code organized?
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 代码是如何组织的？
- en: Let us talk a little bit about how Python code is organized. In this section,
    we will start to enter the proverbial rabbit hole and introduce more technical
    names and concepts.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们简单谈谈 Python 代码是如何组织的。在本节中，我们将开始进入传说中的兔子洞，并介绍更多的技术名称和概念。
- en: Starting with the basics, how is Python code organized? Of course, you write
    your code into files. When you save a file with the extension `.py` , that file
    is said to be a Python **module** .
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 从基础知识开始，Python 代码是如何组织的？当然，你将你的代码写入文件。当你保存一个扩展名为 `.py` 的文件时，该文件被称为 Python **模块**。
- en: If you are on Windows or macOS, which typically hide file extensions from the
    user, we recommend that you change the configuration so that you can see the complete
    names of the files. This is not strictly a requirement, only a suggestion that
    may come in handy when discerning files from each other.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows 或 macOS，这些系统通常隐藏文件扩展名，我们建议你更改配置，以便可以看到文件的完整名称。这并不是严格的要求，而是一个建议，可能在区分文件时有所帮助。
- en: It would be impractical to save all the code that is required for software to
    work within one single file. That solution works for scripts, which are usually
    not longer than a few hundred lines (and often they are shorter than that).
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 将所有使软件工作的代码保存在一个单独的文件中是不切实际的。这种解决方案适用于脚本，通常不超过几百行（而且通常比这更短）。
- en: A complete Python application can be made of hundreds of thousands of lines
    of code, so you will have to scatter it through different modules, which is better,
    but not good enough. It turns out that even like this, it would still be impractical
    to work with the code. So, Python gives you another structure, called a **package**
    , which allows you to group modules together.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 一个完整的 Python 应用程序可能由成千上万行代码组成，所以你将不得不将它们分散到不同的模块中，这比没有组织要好，但还不够好。结果证明，即使这样，处理代码仍然是不切实际的。所以，Python
    给了你另一个结构，称为 **包**，它允许你将模块组合在一起。
- en: A package is nothing more than a folder. In earlier versions of Python, a special
    file, `__init__.py` , was required to mark a directory as a package. This file
    does not need to contain any code, and even though its presence is not mandatory
    anymore, there are practical reasons why it is always a good idea to include it
    nonetheless.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 包不过是一个文件夹。在 Python 的早期版本中，需要一个特殊的文件 `__init__.py` 来标记一个目录为包。这个文件不需要包含任何代码，尽管它的存在不再是强制性的，但仍然有实际的理由说明为什么总是包含它是一个好主意。
- en: 'As always, an example will make all this much clearer. We have created an illustration
    structure in our book project, and when we type in the console:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 总是如此，一个例子会让这一切变得更加清晰。我们在我们的书项目中创建了一个示例结构，当我们输入控制台：
- en: '[PRE9]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We get a tree representation of the contents of the `ch1/example` folder, which
    contains the code for the examples of this chapter. Here is what the structure
    of a simple application could look like:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了 `ch1/example` 文件夹内容的树形表示，它包含本章示例的代码。一个简单应用程序的结构可能看起来是这样的：
- en: '[PRE10]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'You can see that within the root of this example, we have two modules, `core.py`
    and `run.py` , and one package, `util` . Within `core.py` , there may be the core
    logic of our application. On the other hand, within the `run.py` module, we can
    probably find the logic to start the application. Within the `util` package, we
    expect to find various utility tools and, in fact, we can guess that the modules
    there are named based on the types of tools they hold: `db.py` would hold tools
    to work with databases, `maths.py` would, of course, hold mathematical tools (maybe
    our application deals with financial data), and `network.py` would probably hold
    tools to send/receive data on networks.'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到在这个示例的根目录下，我们有两个模块，`core.py` 和 `run.py`，以及一个包，`util`。在 `core.py` 中，可能会有我们应用程序的核心逻辑。另一方面，在
    `run.py` 模块中，我们可能可以找到启动应用程序的逻辑。在 `util` 包中，我们期望找到各种实用工具，实际上，我们可以猜测那里的模块是根据它们所持有的工具类型命名的：`db.py`
    会包含用于处理数据库的工具，`maths.py` 当然会包含数学工具（也许我们的应用程序处理财务数据），而 `network.py` 可能会包含用于在网络上发送/接收数据的工具。
- en: As explained before, the `__init__.py` file is there just to tell Python that
    `util` is a package and not just a simple folder.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，`__init__.py` 文件仅仅是为了告诉 Python `util` 是一个包，而不仅仅是一个简单的文件夹。
- en: 'Had this software been organized within modules only, it would have been harder
    to infer its structure. We placed a *module-only* example in the `ch1/files_only`
    folder; see it for yourself:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个软件仅仅在模块中组织，那么推断其结构将会更困难。我们在 `ch1/files_only` 文件夹中放置了一个仅模块的示例；请亲自查看：
- en: '[PRE11]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'This shows us a completely different picture:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了完全不同的画面：
- en: '[PRE12]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: It is a little harder to guess what each module does, right? Now, consider that
    this is just a simple example, so you can guess how much harder it would be to
    understand a real application if we could not organize the code into packages
    and modules.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 猜测每个模块的功能有点困难，对吧？现在，考虑到这仅仅是一个简单的示例，你可以猜测如果我们不能将代码组织成包和模块，理解一个真实的应用程序将会多么困难。
- en: How do we use modules and packages?
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 我们如何使用模块和包？
- en: When a developer is writing an application, it is likely that they will need
    to apply the same piece of logic in different parts of it. For example, when writing
    a parser for the data that comes from a form that a user can fill in a web page,
    the application will have to validate whether a certain field is holding a number
    or not. Regardless of how the logic for this kind of validation is written, it
    is likely that it will be needed for more than one field.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个开发者编写应用程序时，他们很可能会需要在它的不同部分应用相同的逻辑。例如，当编写一个用于处理用户可以在网页中填写的表单数据的解析器时，应用程序将需要验证某个字段是否包含数字。无论这种验证逻辑是如何编写的，它很可能会被多个字段需要。
- en: 'For example, in a poll application, where the user is asked many questions,
    it is likely that several of them will require a numeric answer. These might be:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在一个民意调查应用程序中，用户会被问及许多问题，其中很可能有几个需要数值答案。这些可能包括：
- en: What is your age?
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你多大年纪？
- en: How many pets do you own?
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有多少宠物？
- en: How many children do you have?
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你有多少孩子？
- en: How many times have you been married?
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你结过几次婚？
- en: 'It would be bad practice to copy/paste (or, said more formally, duplicate)
    the validation logic in every place where we expect a numeric answer. This would
    violate the **don’t repeat yourself (DRY)** principle, which states that you should
    never repeat the same piece of code more than once in your application. Despite
    the DRY principle, we feel the need here to stress the importance of this principle:
    *you should never repeat the same piece of code more than once in your application*
    !'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们期望得到数值答案的每个地方复制/粘贴（或者说得更正式一些，复制）验证逻辑是不良的做法。这会违反**不要重复自己（DRY）**原则，该原则指出，你永远不应该在应用程序中重复相同的代码片段超过一次。尽管有DRY原则，我们在这里仍然需要强调这个原则的重要性：**你永远不应该在应用程序中重复相同的代码片段超过一次**！
- en: 'There are several reasons why repeating the same piece of logic can be bad,
    the most important ones being:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 重复相同的逻辑可能有几个原因，其中最重要的原因是：
- en: There could be a bug in the logic, and therefore you would have to correct it
    in every copy.
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 逻辑中可能存在错误，因此你将不得不在每个副本中纠正它。
- en: You may want to amend the way you carry out the validation, and again, you would
    have to change it in every copy.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能想要修改你执行验证的方式，并且，你将不得不在每个副本中更改它。
- en: You may forget to fix or amend a piece of logic because you missed it when searching
    for all its occurrences. This would leave wrong or inconsistent behavior in your
    application.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可能会忘记修复或修改一段逻辑，因为你错过了在搜索所有其出现位置时找到它。这会在你的应用程序中留下错误或不一致的行为。
- en: Your code would be longer than needed for no good reason.
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的代码可能会因为没有任何原因而比所需的更长。
- en: Python is a wonderful language and provides you with all the tools you need
    to apply the coding best practices. For this example, we need to be able to reuse
    a piece of code. To do this effectively, we need to have a construct that will
    hold the code for us so that we can call that construct every time we need to
    repeat the logic inside it. That construct exists, and it is called a **function**
    .
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: Python是一种奇妙的语言，为你提供了应用编码最佳实践所需的所有工具。在这个例子中，我们需要能够重用一段代码。为了有效地做到这一点，我们需要有一个结构来为我们保存代码，这样我们就可以在需要重复其中逻辑时调用该结构。这个结构存在，它被称为**函数**。
- en: We are not going too deep into the specifics here, so please just remember that
    a function is a block of organized, reusable code that is used to perform a task.
    Functions can assume many forms and names, according to what kind of environment
    they belong to, but for now, this is not important. Details will be seen once
    we are able to appreciate them, later in the book. Functions are the building
    blocks of modularity in your application, and they are almost indispensable. Unless
    you are writing a super-simple script, functions will be used all the time. Functions
    will be explored in *Chapter 4* , *Functions, the Building Blocks of Code* .
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里不会深入探讨具体细节，所以请记住，函数是一个用于执行任务的有序、可重用代码块。函数可以采取许多形式和名称，根据它们所属的环境而定，但就目前而言，这并不重要。细节将在我们能够欣赏它们的时候，在本书的后面部分看到。函数是应用程序模块化的基石，它们几乎是不可或缺的。除非你正在编写一个非常简单的脚本，否则你将始终使用函数。函数将在**第4章**，**函数，代码的构建块**中探讨。
- en: 'Python comes with a very extensive library, as mentioned a few pages ago. Now
    is a good time to define what a **library** is: a collection of functions and
    objects that provide functionalities to enrich the abilities of a language. For
    example, within Python’s `math` library, a plethora of functions can be found,
    one of which is the `factorial` function, which calculates the factorial of a
    number.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 如前几页所述，Python附带了一个非常广泛的库。现在是一个定义**库**的好时机：库是一组提供功能以丰富语言能力的函数和对象。例如，在Python的`math`库中，可以找到大量的函数，其中之一是`factorial`函数，它计算一个数的阶乘。
- en: 'In mathematics, the factorial of a non-negative integer number, N, denoted
    as N!, is defined as the product of all positive integers less than or equal to
    N. For example, the factorial of 5 is calculated as:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学中，非负整数N的阶乘，表示为N!，定义为所有小于或等于N的正整数的乘积。例如，5的阶乘计算如下：
- en: '*N! = 1*2*3*4*5 = 120*'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*N! = 1*2*3*4*5 = 120*'
- en: The factorial of 0 is 0! = 1, to respect the convention for an empty product.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 0的阶乘是0! = 1，以尊重空乘积的惯例。
- en: 'So, if you want to use this function in your code, all you have to do is import
    it and call it with the right input values. Do not worry too much if input values
    and the concept of calling are not clear right now; please just concentrate on
    the import part. We use a library by importing specific components from it, which
    is then used for the intended purpose. In Python, to calculate 5!, we just need
    the following code:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果你想在代码中使用这个函数，你所要做的就是导入它，并用正确的输入值调用它。如果现在输入值和调用的概念还不清楚，请不要过于担心；请只专注于导入部分。我们通过从库中导入特定组件来使用库，然后将其用于预期目的。在Python中，要计算5!，我们只需要以下代码：
- en: '[PRE13]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Whatever we type in the shell, if it has a printable representation, will be
    printed in the console for us (in this case, the result of the function call:
    120).'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 无论我们在shell中输入什么，如果它有一个可打印的表示，它都会被打印在控制台上供我们使用（在这种情况下，函数调用的结果：120）。
- en: Let us go back to our example, the one with `core.py` , `run.py` , `util` ,
    and so on. Here, the `util` package is our utility library. This is our custom
    utility belt that holds all those reusable tools (that is, functions), which we
    need in our application. Some of them will deal with databases ( `db.py` ), some
    with the network ( `network.py` ), and some will perform mathematical calculations
    ( `maths.py` ) that are outside the scope of Python’s standard `math` library
    and, therefore, we must code them for ourselves.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的例子，即`core.py`、`run.py`、`util`等。在这里，`util`包是我们的实用库。这是我们自定义的实用工具带，它包含了我们在应用程序中需要的所有可重用工具（即函数）。其中一些将处理数据库（`db.py`），一些将处理网络（`network.py`），还有一些将执行超出Python标准`math`库范围的外部数学计算（`maths.py`），因此我们必须自己编写这些代码。
- en: 'We will see in detail how to import functions and use them in their dedicated
    chapter. Let us now talk about another important concept: *Python’s execution
    model* .'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在专门的章节中详细说明如何导入函数并使用它们。现在让我们谈谈另一个重要概念：*Python的执行模型*。
- en: Python’s execution model
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python的执行模型
- en: In this section, we would like to introduce you to some important concepts,
    such as scope, names, and namespaces. You can read all about Python’s execution
    model in the official language reference ( [https://docs.python.org/3/reference/executionmodel.html](https://docs.python.org/3/reference/executionmodel.html)
    ), of course, but we would argue that it is quite technical and abstract, so let
    us give you a less formal explanation first.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们想向您介绍一些重要概念，例如作用域、名称和命名空间。您当然可以在官方语言参考（[https://docs.python.org/3/reference/executionmodel.html](https://docs.python.org/3/reference/executionmodel.html)）中阅读有关Python执行模型的全部内容，但我们认为它相当技术性和抽象，所以让我们先给您一个不那么正式的解释。
- en: Names and namespaces
  id: totrans-273
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 名称和命名空间
- en: Say you are looking for a book, so you go to the library and ask someone for
    it. They tell you something like *Second Floor, Section X, Row Three* . So, you
    go up the stairs, look for Section X, and so on. It would be very different to
    enter a library where all the books are piled together in random order in one
    big room. No floors, no sections, no rows, no order. Fetching a book would be
    extremely hard.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你在找一本书，所以你去图书馆并请求某人帮忙。他们会告诉你类似“二楼，区X，行三”这样的信息。然后你上楼，寻找区X，等等。如果进入一个所有书籍都随机堆放在一个大房间里的图书馆将会非常不同。没有楼层，没有区，没有行，没有顺序。找一本书将会非常困难。
- en: 'When we write code, we have the same issue: we have to try and organize it
    so that it will be easy for someone who has no prior knowledge about it to find
    what they are looking for. When software is structured correctly, it also promotes
    code reuse. Furthermore, disorganized software is more likely to contain scattered
    pieces of duplicated logic.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们编写代码时，我们面临相同的问题：我们必须尝试组织它，以便对没有先验知识的人来说容易找到他们想要的东西。当软件结构正确时，它也促进了代码的重用。此外，无组织的软件更有可能包含散乱的重复逻辑片段。
- en: 'As a first example, let us take a book. We refer to a book by its title; in
    Python lingo, that would be a **name** . Python names are the closest abstraction
    to what other languages call variables. Names refer to objects and are introduced
    by **name-binding** operations. Let us see a quick example (again, notice that
    anything that follows a `#` is a comment):'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 作为第一个例子，让我们拿一本书。我们通过书名来引用它；在Python术语中，这将是**名称**。Python名称是其他语言所称为变量的最接近的抽象。名称引用对象，并通过**名称绑定**操作引入。让我们看一个快速示例（再次注意，任何跟在`#`后面的内容都是注释）：
- en: '[PRE14]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Remember that each Python object has an identity, a type, and a value. We defined
    three objects in the preceding code; let us now examine their types and values:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，每个Python对象都有一个身份、一个类型和一个值。我们在前面的代码中定义了三个对象；现在让我们检查它们的类型和值：
- en: 'An integer number `n` (type: `int` , value: `3` )'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个整数 `n`（类型：`int`，值：`3`）
- en: 'A string `address` (type: `str` , value: Sherlock Holmes’ address)'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字符串 `address`（类型：`str`，值：夏洛克·福尔摩斯的地址）
- en: 'A dictionary `employee` (type: `dict` , value: a dictionary object with three
    key/value pairs)'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个字典 `employee`（类型：`dict`，值：一个包含三个键/值对的字典对象）
- en: Fear not, we know we have not covered what a dictionary is. We will see, in
    *Chapter 2* , *Built-In Data Types* , that it is the king of Python data structures.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 不要担心，我们知道我们还没有涵盖字典是什么。我们将在*第2章*，*内置数据类型*中看到，它是Python数据结构之王。
- en: Have you noticed that the prompt changed from `>>>` to `...` when we typed in
    the definition of `employee` ? That is because the definition spans multiple lines.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 你有没有注意到，当我们输入 `employee` 的定义时，提示符从 `>>>` 变成了 `...`？这是因为定义跨越了多行。
- en: 'So, what are `n` , `address` , and `employee` ? They are **names** , and they
    can be used to retrieve data from within our code. They need to be kept somewhere
    so that whenever we need to retrieve those objects, we can use their names to
    fetch them. We need some space to hold them, hence: **namespaces** !'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，`n`、`address` 和 `employee` 是什么呢？它们是**名称**，并且可以用来从我们的代码中检索数据。它们需要被保存在某个地方，这样我们每次需要检索那些对象时，都可以使用它们的名称来获取它们。我们需要一些空间来存放它们，因此：**命名空间**！
- en: A **namespace** is a mapping from names to objects. Examples are the set of
    built-in names (containing functions that are always accessible in any Python
    program), the global names in a module, and the local names in a function. Even
    the set of attributes of an object can be considered a namespace.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '**命名空间**是从名称到对象的映射。例如，内置名称的集合（包含在任何Python程序中始终可用的函数）、模块中的全局名称以及函数中的局部名称。甚至一个对象的属性集合也可以被认为是命名空间。'
- en: 'The beauty of namespaces is that they allow you to define and organize names
    with clarity, without overlapping or interference. For example, the namespace
    associated with the book we were looking for in the library could be used to import
    the book itself, like this:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 命名空间的美妙之处在于，它们允许你清晰、无重叠或干扰地定义和组织名称。例如，在图书馆中我们寻找的那本书的命名空间可以用来导入这本书本身，如下所示：
- en: '[PRE15]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We start from the `library` namespace, and by means of the dot ( `.` ) operator,
    we walk into that namespace. Within this namespace, we look for `second_floor`
    and, again, we walk into it with the `.` operator. We then walk into `section_x`
    , and finally, within the last namespace, `row_three` , we find the name we were
    looking for: `book` .'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从 `library` 命名空间开始，通过点（`.`）操作符进入该命名空间。在这个命名空间内，我们寻找 `second_floor`，然后再次使用
    `.` 操作符进入它。然后我们进入 `section_x`，最后，在最后一个命名空间 `row_three` 中，我们找到了我们寻找的名称：`book`。
- en: Walking through a namespace will be clearer when dealing with real code examples.
    For now, just keep in mind that namespaces are places where names are associated
    with objects.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理实际的代码示例时，遍历命名空间将更加清晰。现在，只需记住，命名空间是名称与对象关联的地方。
- en: 'There is another concept, closely related to that of a namespace, which we
    would like to mention briefly: **scope** .'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 另有一个概念，与命名空间密切相关，我们想简要提及：**作用域**。
- en: Scopes
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 作用域
- en: 'According to Python’s documentation:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 根据Python的文档：
- en: '*“A scope is a textual region of a Python program, where a namespace is directly
    accessible.”*'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '*“作用域是Python程序中的一个文本区域，其中命名空间可以直接访问。”*'
- en: '**Directly accessible** means that, when looking for an unqualified reference
    to a name, Python tries to find it in the namespace.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '**直接可访问**意味着，当查找未指定名称的引用时，Python会尝试在命名空间中找到它。'
- en: 'Scopes are determined statically, but at runtime, they are used dynamically.
    This means that by inspecting the source code, you can tell what the scope of
    an object is. There are four different scopes that Python makes accessible (not
    necessarily all of them are present at the same time, though):'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 作用域是静态确定的，但在运行时是动态使用的。这意味着通过检查源代码，你可以知道一个对象的作用域。Python提供了四种不同的作用域可供访问（尽管不一定同时都存在）：
- en: The **local** scope, which is the innermost one and contains the local names.
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**局部**作用域，它是最内层的，包含局部名称。'
- en: The **enclosing** scope; that is, the scope of any enclosing function. It contains
    non-local names and non-global names.
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包含**作用域；即任何包含函数的作用域。它包含非局部名称和非全局名称。'
- en: The **global** scope contains the global names.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全局**作用域包含全局名称。'
- en: The **built-in** scope contains the built-in names. Python comes with a set
    of functions that you can use in an off-the-shelf fashion, such as `print` , `all`
    , `abs` , and so on. They live in the built-in scope.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内置**作用域包含内置名称。Python 提供了一套你可以直接使用的函数，例如 `print`、`all`、`abs` 等。它们位于内置作用域中。'
- en: 'The rule is the following: when we refer to a name, Python starts looking for
    it in the current namespace. If the name is not found, Python continues the search
    in the enclosing scope, and this continues until the built-in scope is searched.
    If a name has still not been found after searching the built-in scope, then Python
    raises a `NameError` **exception** , which basically means that the name has not
    been defined (as seen in the preceding example).'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 规则是这样的：当我们引用一个名称时，Python 会从当前命名空间开始查找。如果找不到该名称，Python 会继续在封装作用域中搜索，这个过程会一直持续到内置作用域被搜索。如果在搜索了内置作用域之后仍然找不到名称，那么
    Python 会抛出一个 `NameError` **异常**，这基本上意味着该名称尚未定义（如前例所示）。
- en: The order in which the namespaces are scanned when looking for a name is therefore
    **local** , **enclosing** , **global** , **built-in** ( **LEGB** ).
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在查找名称时，命名空间的搜索顺序是 **局部**、**封装**、**全局**、**内置**（**LEGB**）。
- en: 'This is all theoretical, so let us see an example. To demonstrate local and
    enclosing namespaces, we will have to define a few functions. Do not worry if
    you are not familiar with their syntax for the moment—we will cover that in *Chapter
    4* , *Functions, the Building Blocks of Code* . Just remember that in the following
    code, when you see `def` , it means we are defining a function:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是理论上的，所以让我们看一个例子。为了演示局部和封装命名空间，我们不得不定义几个函数。如果你目前不熟悉它们的语法，请不要担心——我们将在 *第
    4 章*、*函数，代码的构建块* 中介绍。只需记住，在下面的代码中，当你看到 `def` 时，这意味着我们正在定义一个函数：
- en: '[PRE16]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the preceding example, we define the same name, `age` , in both the global
    and local scopes. When we execute this program with the following command (have
    you activated your virtual environment?):'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们在全局和局部作用域中定义了相同的名称 `age`。当我们使用以下命令执行此程序时（你激活了虚拟环境吗？）：
- en: '[PRE17]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We see two numbers printed on the console: 7 and 5.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在控制台看到打印出两个数字：7 和 5。
- en: 'What happens is that the Python interpreter parses the file, top to bottom.
    First, it finds a couple of comment lines, which are skipped, then it parses the
    definition of the function `local` . When called, this function will do two things:
    it will set a name for an object representing the number `7` and will print it.
    The Python interpreter keeps going, and it finds another name binding. This time,
    the binding happens in the global scope and the value is `5` . On the next line,
    there is a call to the `local` function. At this point, Python executes the function,
    so this time, the binding `age = 7` happens in the local scope and is printed.
    Finally, there is a call to the `print` function, which is executed and will now
    print `5` .'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，Python 解释器从上到下解析文件。首先，它找到几行注释，这些注释会被跳过，然后它解析 `local` 函数的定义。当被调用时，这个函数将做两件事：它将为代表数字
    `7` 的对象设置一个名称，并将其打印出来。Python 解释器继续执行，并找到另一个名称绑定。这次，绑定发生在全局作用域，其值为 `5`。在下一行，有一个对
    `local` 函数的调用。此时，Python 执行该函数，因此这次 `age = 7` 的绑定发生在局部作用域，并被打印出来。最后，有一个对 `print`
    函数的调用，该调用被执行，现在将打印 `5`。
- en: One particularly important thing to note is that the part of the code that belongs
    to the definition of the `local` function is indented by four spaces on the right.
    Python, in fact, defines scopes by indenting the code. You walk into a scope by
    indenting, and walk out of it by dedenting. Some coders use two spaces, others
    three, but the suggested number of spaces to use is four. It is a good measure
    to maximize readability. We will talk more about all the conventions you should
    embrace when writing Python code later.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的一个特别重要的事情是，属于 `local` 函数定义部分的代码在右侧缩进了四个空格。实际上，Python 通过缩进来定义作用域。你通过缩进来进入一个作用域，通过取消缩进来退出。一些程序员使用两个空格，一些使用三个空格，但建议使用的空格数是四个。这是一个提高可读性的好方法。我们将在稍后更详细地讨论你在编写
    Python 代码时应遵循的所有约定。
- en: 'In other languages, such as Java, C#, and C++, scopes are created by writing
    code within a pair of curly braces: `{ … }` . Therefore, in Python, indenting
    code corresponds to opening a curly brace, while dedenting code corresponds to
    closing a curly brace.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他语言中，例如 Java、C# 和 C++，作用域是通过在成对的大括号 `{ … }` 内编写代码来创建的。因此，在 Python 中，缩进代码对应于打开大括号，而缩进代码对应于关闭大括号。
- en: 'What would happen if we removed that `age = 7` line? Remember the LEGB rule.
    Python would start looking for `age` in the local scope (function `local` ), and,
    not finding it, it would go to the next enclosing scope. The next one, in this
    case, is the global one. Therefore, we would see the number `5` printed twice
    on the console. Let us see what the code would look like in this case:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们删除那行 `age = 7` 会发生什么？记住 LEGB 规则。Python 将从局部作用域（函数 `local`）开始查找 `age`，如果没有找到，它将进入下一个封装作用域。在这种情况下，下一个是全局作用域。因此，我们会在控制台上看到数字
    `5` 被打印两次。让我们看看在这种情况下代码会是什么样子：
- en: '[PRE18]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Running `scopes2.py` will print this:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `scopes2.py` 将打印以下内容：
- en: '[PRE19]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'As expected, Python prints `age` the first time, then when the `local` function
    is called, `age` is not found in its scope, so Python looks for it following the
    LEGB chain until `age` is found in the global scope. Let us see an example with
    an extra layer, the enclosing scope:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如预期，Python 首次打印 `age`，然后当调用 `local` 函数时，`age` 在其作用域中未找到，因此 Python 沿着 LEGB 链查找，直到在全局作用域中找到
    `age`。让我们通过一个额外的层，即封装作用域，来看一个例子：
- en: '[PRE20]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Running `scopes3.py` will print on the console:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 运行 `scopes3.py` 将在控制台上打印以下内容：
- en: '[PRE21]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: As you can see, the `print` instruction from the `local` function is referring
    to `age` as before. `age` is still not defined within the function itself, so
    Python starts walking scopes following the LEGB order. This time, `age` is found
    in the *enclosing* scope.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，`local` 函数中的 `print` 指令仍然像之前一样引用 `age`。`age` 仍然在函数内部没有定义，所以 Python 按照LEGB顺序开始遍历作用域。这次，`age`
    在 *封装* 作用域中被找到。
- en: Do not worry if this is still not perfectly clear for now. It will become clearer
    as we go through the examples in the book. The *Classes* section of the Python
    tutorial ( [https://docs.python.org/3/tutorial/classes.html](https://docs.python.org/3/tutorial/classes.html)
    ) has an interesting paragraph about scopes and namespaces. Be sure you read it
    to gain a deeper understanding of the subject.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果现在这仍然不是很清楚，请不要担心。随着我们通过书中的例子进行学习，它将变得更加清晰。Python 教程的 *类* 部分（[https://docs.python.org/3/tutorial/classes.html](https://docs.python.org/3/tutorial/classes.html)）有一个关于作用域和命名空间的有趣段落。确保你阅读它，以获得对该主题的更深入理解。
- en: Guidelines for writing good code
  id: totrans-320
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写良好代码的指南
- en: 'Writing good code is not as easy as it seems. As we have already said, good
    code exhibits a long list of qualities that are difficult to combine. Writing
    good code is an art. Regardless of where on the path you will be happy to settle,
    there is something that you can embrace that will make your code instantly better:
    **PEP 8** .'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 编写良好的代码并不像看起来那么简单。正如我们之前所说的，良好的代码展示了一系列难以结合的品质。编写良好的代码是一种艺术。无论你将在哪个阶段感到满意，你都可以接受一些东西，这将使你的代码立即变得更好：**PEP
    8**。
- en: A **Python Enhancement Proposal** ( **PEP** ) is a document that describes a
    newly proposed Python feature. PEPs are also used to document processes around
    Python language development and to provide guidelines and information. You can
    find an index of all PEPs at [https://www.python.org/dev/peps](https://www.python.org/dev/peps)
    .
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '**Python 增强提案**（**PEP**）是一份描述新提出的 Python 功能的文档。PEP 还用于记录 Python 语言开发周围的流程，并提供指南和信息。你可以在
    [https://www.python.org/dev/peps](https://www.python.org/dev/peps) 找到所有 PEP 的索引。'
- en: 'PEP 8 is perhaps the most famous of all PEPs. It lays out a simple but effective
    set of guidelines to define Python aesthetics so that we write beautiful, idiomatic
    Python code. If you take just one suggestion out of this chapter, please let it
    be this: use PEP 8. Embrace it. You will thank us later.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: PEP 8 可能是所有 PEP 中最著名的。它概述了一套简单但有效的指南，用于定义 Python 美学，以便我们编写美观、惯用的 Python 代码。如果你只从这一章中取出一个建议，请让它成为这个：使用
    PEP 8。接受它。你将来会感谢我们的。
- en: Coding today is no longer a check-in/check-out business. Rather, it is more
    of a social effort. Several developers collaborate on a piece of code through
    tools such as Git and Mercurial, and the result is code that is produced by many
    different hands.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的编码不再是一个检查-签出业务。相反，它更多的是一种社会努力。几个开发者通过 Git 和 Mercurial 等工具共同协作编写代码，结果是许多不同人手的产品。
- en: Git and Mercurial are two of the most popular distributed revision control systems
    in use today. They are essential tools designed to help teams of developers collaborate
    on the same software.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: Git和Mercurial是目前使用最广泛的两个分布式版本控制系统。它们是旨在帮助开发团队在同一软件上协作的必要工具。
- en: These days, more than ever, we need to have a consistent way of writing code,
    so that readability is maximized. When all developers of a company abide by PEP
    8, it is not uncommon for any of them landing on a piece of code to think they
    wrote it themselves (it actually happens to Fabrizio all the time, because he
    quickly forgets any code he writes).
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天，比以往任何时候都更需要有一种一致的代码编写方式，以便最大限度地提高可读性。当一家公司的所有开发人员都遵守PEP 8时，任何一个人遇到一段代码时都会觉得是自己写的（实际上，Fabrizio总是这样，因为他很快就会忘记自己写的任何代码）。
- en: 'This has a tremendous advantage: when you read code that you could have written
    yourself, you read it easily. Without conventions, every coder would structure
    the code the way they like most, or simply the way they were taught or are used
    to, and this would mean having to interpret every line according to someone else’s
    style. It would mean having to lose much more time just trying to understand it.
    Thanks to PEP 8, we can avoid this. We are such fans of it that, in our team,
    we will not sign off a code review if the code does not respect PEP 8. So, please
    take the time to study it; this is very important.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 这带来了巨大的优势：当你阅读自己可能写的代码时，你会很容易地阅读它。如果没有约定，每个程序员都会以他们最喜欢的方式或简单地以他们被教导或习惯的方式结构化代码，这意味着必须根据别人的风格来解释每一行。这意味着需要花费更多的时间仅仅是为了理解它。感谢PEP
    8，我们可以避免这种情况。我们如此喜欢它，以至于在我们的团队中，如果代码不遵守PEP 8，我们不会通过代码审查。所以，请花时间学习它；这非常重要。
- en: Python developers can leverage several different tools to automatically format
    their code, according to PEP 8 guidelines. Popular tools are *black* and *ruff*
    . There are also other tools, called linters, which check if the code is formatted
    correctly, and issue warnings to the developer with instructions on how to fix
    errors. Famous ones are *flake8* and *PyLint* . We encourage you to use these
    tools, as they simplify the task of coding well-formatted software.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: Python开发者可以利用几个不同的工具自动根据PEP 8指南格式化他们的代码。流行的工具有*black*和*ruff*。还有其他一些工具，称为linters，它们检查代码是否格式正确，并向开发者发出警告，说明如何修复错误。著名的工具有*flake8*和*PyLint*。我们鼓励您使用这些工具，因为它们简化了编写格式良好软件的任务。
- en: In the examples in this book, we will try to respect PEP 8 as much as we can.
    Unfortunately, we do not have the luxury of 79 characters (which is the maximum
    line length suggested by PEP 8), and we will have to cut down on blank lines and
    other things, but we promise you we will try to lay out the code so that it is
    as readable as possible.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的示例中，我们将尽可能尊重PEP 8。不幸的是，我们没有79个字符的奢侈（这是PEP 8建议的最大行长度），我们不得不减少空白行和其他一些内容，但我们承诺我们会尽量使代码布局尽可能易于阅读。
- en: Python culture
  id: totrans-330
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python文化
- en: Python has been adopted widely in the software industry. It is used by many
    different companies for different purposes, while also being an excellent education
    tool (it is excellent for that purpose due to its simplicity, making it easy to
    learn; it encourages good habits for writing readable code; it is platform-agnostic;
    and it supports modern object-oriented programming paradigms).
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: Python已经在软件行业得到了广泛的应用。许多不同的公司出于不同的目的使用它，同时它也是一个出色的教育工具（由于它的简单性，这使得它易于学习；它鼓励编写可读性强的代码的好习惯；它是平台无关的；并且支持现代面向对象编程范式）。
- en: One of the reasons Python is so popular today is that the community around it
    is vast, vibrant, and full of brilliant people. Many events are organized all
    over the world, mostly either related to Python or to some of its most adopted
    web frameworks, such as Django.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: Python今天之所以如此受欢迎，其中一个原因是因为围绕它的社区庞大、充满活力，并且充满了杰出的人才。世界各地组织了许多活动，大多数活动要么与Python有关，要么与其最广泛采用的Web框架之一（如Django）有关。
- en: Python’s source is open, and very often so are the minds of those who embrace
    it. Check out the community page on the Python website for more information and
    get involved!
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Python的源代码是开放的，而且那些接受它的人的思想也往往是开放的。查看Python网站上的社区页面以获取更多信息并参与其中！
- en: There is another aspect of Python, which revolves around the notion of being
    **Pythonic** . It has to do with the fact that Python allows you to use some idioms
    that are not found elsewhere, at least not in the same form or ease of use (it
    can feel claustrophobic when one has to code in a language that is not Python,
    at times).
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: Python 另一个方面围绕着“Pythonic”这一概念。这与 Python 允许你使用一些在其他地方找不到的惯用语有关，至少不是以相同的形式或易用性（当不得不在非
    Python 语言中编码时，有时会感到压抑）。
- en: Anyway, over the years, this concept of being Pythonic has emerged and, the
    way we understand it, it is something along the lines of *doing things the way
    they are supposed to be done in Python* .
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，多年来，“Pythonic”这一概念已经出现，根据我们的理解，它类似于*按照 Python 应该做到的方式进行操作*。
- en: To help you understand a little bit more about Python’s culture and being Pythonic,
    we will show you the **Zen of Python** —a lovely *Easter egg* that is very popular.
    Open a Python console and type `import this` .
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 为了帮助你更好地了解 Python 的文化和“Pythonic”，我们将向你展示**Python 的禅宗**——一个非常受欢迎的*复活节彩蛋。打开 Python
    控制台，输入 `import this`。
- en: 'What follows is the result of that instruction:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 以下就是那项指导的结果：
- en: '[PRE22]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'There are two levels of reading here. One is to consider it as a set of guidelines
    that have been put together in a whimsical way. The other one is to keep it in
    mind and read it once in a while, trying to understand how it refers to something
    deeper: some Python characteristics that you will have to understand deeply in
    order to write Python the way it is supposed to be written. Start with the fun
    level, and then dig deeper. Always dig deeper.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两种阅读层次。一种是将它视为一组以随意方式组合在一起的指南。另一种是将其牢记在心，偶尔阅读，试图理解它如何引用更深层次的内容：一些你必须深入理解的
    Python 特性，以便以正确的方式编写 Python。从有趣层面开始，然后深入挖掘。总是深入挖掘。
- en: A note on IDEs
  id: totrans-340
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 IDE 的一些说明
- en: Just a few words about IDEs. To follow the examples in this book, you do not
    need one; any decent text editor will do fine. If you want to have more advanced
    features, such as syntax coloring and auto-completion, you will have to get yourself
    an IDE. You can find a comprehensive list of open-source IDEs (just Google “Python
    IDEs”) on the Python website.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 IDE 的一些简要说明。为了遵循这本书中的示例，你不需要一个 IDE；任何体面的文本编辑器都足够好。如果你想拥有更高级的功能，例如语法高亮和自动完成，你将需要为自己获取一个
    IDE。你可以在 Python 网站上找到一个开源 IDE 的综合列表（只需在 Google 上搜索“Python IDEs”）。
- en: Fabrizio uses Visual Studio Code, from Microsoft. It is free to use and it provides
    many features out of the box, which one can even expand by installing extensions.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Fabrizio 使用的是来自微软的 Visual Studio Code。它是免费使用的，并且提供了许多开箱即用的功能，甚至可以通过安装扩展来进一步扩展。
- en: After working for many years with several editors, including Sublime Text, this
    was the one that felt most productive to him.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 在与包括 Sublime Text 在内的几位编辑器合作多年后，这一个是让他觉得最有生产力的。
- en: Heinrich, on the other hand, is a hardcore Neovim user. Although it might have
    a steep learning curve, Neovim is a very powerful text editor that can also be
    extended with plugins. It also has the benefit of being compatible with its predecessor,
    Vim, which is installed in almost every system a software developer regularly
    works on.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，Heinrich 是一个坚定的 Neovim 用户。尽管它可能有一个陡峭的学习曲线，但 Neovim 是一个非常强大的文本编辑器，也可以通过插件进行扩展。它还有与它的前辈
    Vim 兼容的好处，Vim 几乎安装在每个软件开发者经常工作的系统上。
- en: 'Two important pieces of advice:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 两条重要的建议：
- en: Whatever IDE you decide to use, try to learn it well so that you can exploit
    its strengths, but *don’t depend on it too much* . Practice working with Vim (or
    any other text editor) once in a while; learn to be able to do some work on any
    platform, with any set of tools.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论你决定使用什么 IDE，都要努力学好，以便充分利用其优势，但*不要过度依赖它*。偶尔练习使用 Vim（或任何其他文本编辑器）；学会在任何平台上使用任何一组工具进行工作。
- en: Whatever text editor/IDE you use, when it comes to writing Python, *indentation
    is four spaces* . Do not use tabs, do not mix them with spaces. Use four spaces,
    not two, not three, not five. Just use four. The whole world works like that,
    and you do not want to become an outcast because you were fond of the three-space
    layout.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无论你使用什么文本编辑器/IDE，当涉及到编写 Python 时，*缩进应该是四个空格*。不要使用制表符，也不要将它们与空格混合。使用四个空格，不要用两个、三个或五个。就只用四个。全世界都是这样做的，你也不想因为喜欢三空格布局而成为局外人。
- en: A word about AI
  id: totrans-348
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 关于 AI 的一些话
- en: In the last year or so, the world has witnessed the advent of AI. There are
    quite a few options on the market now, some of which provide tools for programmers.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去一年左右的时间里，世界见证了人工智能的诞生。现在市场上有很多选择，其中一些为程序员提供了工具。
- en: The fact that there are instruments able to write pieces of code does not invalidate
    any of the reasons why one should learn a programming language. AI tools are far
    from being able to do what a person can do. They are not perfect, and at the time
    of writing, they are mostly used to help with repetitive and sometimes menial
    tasks.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 存在能够编写代码的工具的事实并不否定学习编程语言的所有理由。AI工具远远不能做到人类能做的事情。它们并不完美，在撰写本文时，它们主要用于帮助完成重复性任务，有时甚至是枯燥的任务。
- en: Several IDEs can be integrated with technologies like GitHub Copilot (and the
    like). Visual Studio Code, Zed, IntelliJ IDEA, and PyCharm, all provide ways to
    enhance their capabilities with AI plugins. There are even some new IDEs that
    were designed specifically around AI features, such as Cursor.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 几个集成开发环境（IDE）可以与GitHub Copilot（及其类似技术）等技术集成。Visual Studio Code、Zed、IntelliJ
    IDEA和PyCharm都提供了使用AI插件来增强其功能的方法。甚至还有一些专门围绕AI功能设计的全新IDE，例如Cursor。
- en: While we do use such tools in our work, we feel it is crucial to stress how
    important it is for you to try and understand the code examples from this book
    on your own. Please try to work them out without help from an AI assistant, as
    that will be an integral part of your learning process.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然我们在工作中确实使用这样的工具，但我们认为强调你尝试自己理解本书中的代码示例的重要性是至关重要的。请尽量在没有AI助手帮助的情况下解决这些问题，因为这将是你的学习过程中的一个重要部分。
- en: Summary
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we started exploring the world of programming and that of Python.
    We have barely scratched the surface, only touching upon concepts that will be
    discussed later on in the book in greater detail.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们开始探索编程世界和Python世界。我们只是触及了表面，只是简要地提到了书中稍后会更详细讨论的概念。
- en: We talked about Python’s main features, who is using it and for what, and the
    different ways in which we can write a Python program.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讨论了Python的主要特性，谁在使用它以及用它做什么，以及我们可以用不同的方式编写Python程序。
- en: In the last part of the chapter, we flew over the fundamental notions of namespaces,
    and scopes. We also saw how Python code can be organized using modules and packages.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，我们简要介绍了命名空间和作用域的基本概念。我们还看到了如何使用模块和包来组织Python代码。
- en: At a practical level, we learned how to install Python on our system and how
    to make sure we have the tools we need, such as `pip` ; we also created and activated
    our first virtual environment. This will allow us to work in a self-contained
    environment without the risk of compromising the Python system installation.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际层面，我们学习了如何在我们的系统上安装Python，以及如何确保我们拥有所需的工具，例如`pip`；我们还创建并激活了我们的第一个虚拟环境。这将使我们能够在不危及Python系统安装的情况下在一个自包含的环境中工作。
- en: Now you are ready to start this journey with us. All you need is enthusiasm,
    an activated virtual environment, this book, your fingers, and probably some coffee.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经准备好开始这段旅程了。你需要的是热情、一个激活的虚拟环境、这本书、你的手指，可能还有一些咖啡。
- en: Try to follow the examples; we will keep them simple and short. If you put them
    to use, you will retain them much better than if you just read them.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试跟随示例；我们将保持它们简单且简短。如果你能将它们应用到实践中，你将比仅仅阅读它们更好地记住它们。
- en: In the next chapter, we will explore Python’s rich set of built-in data types.
    There is much to cover, and much to learn!
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探索Python丰富的内置数据类型。有很多内容要介绍，也有很多东西要学习！
- en: Join our community on Discord
  id: totrans-361
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的Discord社区
- en: 'Join our community’s Discord space for discussions with the authors and other
    readers:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 加入我们的社区Discord空间，与作者和其他读者进行讨论：
- en: '[https://discord.com/invite/uaKmaz7FEC](https://discord.com/invite/uaKmaz7FEC)'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://discord.com/invite/uaKmaz7FEC](https://discord.com/invite/uaKmaz7FEC)'
- en: '![img](img/QR_Code119001106417026468.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![img](img/QR_Code119001106417026468.png)'
