["```py\n    form=SQLFORM(db.mytable,\n    \trecord=mytable_index,\n    \tdeletable=True,\n    \tsubmit_button=T('Update'))\n\n    ```", "```py\n    form[0][-1][1].append(TAG.BUTTON('Cancel',\n    \t_onclick=\"document.location='%s';\"%URL('index')))\n\n    ```", "```py\n    form.element('input[type=submit]').parent.append(TAG.BUTTON(...))\n\n    ```", "```py\n    form=SQLFORM.factory(db.mytable)\n\n    ```", "```py\n{{=form.custom.begin}}\n{{=form.custom.widget.field1}}\n{{=form.custom.widget.field2}}\n{{=form.custom.widget.field3}}\n{{=form.custom.submit}}\n{{=TAG.BUTTON(T('Cancel'), _onclick='...')}}\n{{=form.custom.end}}\n\n```", "```py\n    <script>\n    \tjQuery(function(){\n    \t\tjQuery('input[type=submit]').click(\n    \t\t\tfunction(){return confirm('Are you sure?');\n    \t\t});\n    \t});\n    </script>\n\n    ```", "```py\n    return confirm('Are you sure?')\n\n    ```", "```py\n    def my_action():\n    \tform = SQLFORM.factory(...)\n    \tform.element('input[type=submit]')['_onclick'] = \"return\n    \t\tconfirm('Are you sure?');\"\n    \treturn dict(form=form)\n\n    ```", "```py\ndef index():\n\tform, results = crud.search(db.things)\n\treturn dict(form=form, results=results)\n\n```", "```py\n    def build_query(field, op, value):\n    \tif op == 'equals':\n    \t\treturn field == value\n    \telif op == 'not equal':\n    \t\treturn field != value\n    \telif op == 'greater than':\n    \t\treturn field > value\n    \telif op == 'less than':\n    \t\treturn field < value\n    \telif op == 'starts with':\n    \t\treturn field.startswith(value)\n    \telif op == 'ends with':\n    \t\treturn field.endswith(value)\n    \telif op == 'contains':\n    \t\treturn field.contains(value)\n    def dynamic_search(table):\n    \ttbl = TABLE()\n    \tselected = []\n    \tops = ['equals','not equal','greater than','less than',\n    \t\t  'starts with','ends with','contains']\n    \tquery = table.id > 0\n    \tfor field in table.fields:\n    \t\tchkval = request.vars.get('chk'+field,None)\n    \t\ttxtval = request.vars.get('txt'+field,None)\n    \t\topval = request.vars.get('op'+field,None)\n    \t\trow = TR(TD(INPUT(_type=\"checkbox\",_name=\"chk\"+field,\n    \t\t\t\t\t\t\tvalue=chkval=='on')),\n    \t\t\t\tTD(field),TD(SELECT(ops,_name=\"op\"+field,\n    \t\t\t\t\t\t\tvalue=opval)),\n    \t\t\t\tTD(INPUT(_type=\"text\",_name=\"txt\"+field,\n    \t\t\t\t\t\t\t_value=txtval)))\n    \t\ttbl.append(row)\n    \t\tif chkval:\n    \t\t\tif txtval:\n    \t\t\t\tquery &= build_query(table[field], opval,txtval)\n    \t\t\t\tselected.append(table[field])\n    \tform = FORM(tbl,INPUT(_type=\"submit\"))\n    \tresults = db(query).select(*selected)\n    \treturn form, results\n\n    ```", "```py\n    def index():\n    \tform,results = dynamic_search(db.things)\n    \treturn dict(form=form,results=results)\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    {{=form}}\n    {{=results}}\n\n    ```", "```py\n    YEARS = range(1910, 2011)\n    DEGREES = ('BA', 'BS', 'MA', 'MS', 'MBA', 'JD', 'PhD')\n\n    db.define_table('school',\n    \tField('name', 'string', unique=True),\n    \tField('address', 'string'),\n    \tField('established', 'integer', requires=IS_IN_SET(YEARS)),\n    \tformat='%(name)s')\n\n    db.define_table('student',\n    \tField('name', 'string', unique=True),\n    \tField('birthday', 'date'),\n    \tformat='%(name)s')\n\n    db.define_table('education',\n    \tField('student', db.student),\n    \tField('school', db.school),\n    \tField('degree', 'string', requires=IS_IN_SET(DEGREES)),\n    \tField('graduated', 'integer', requires=IS_IN_SET(YEARS)))\n\n    ```", "```py\n    def index():\n\n    \tstudent_form = SQLFORM(db.student)\n    \tif student_form.accepts(request, session):\n    \t\tresponse.flash = 'Student Form Accepted'\n    \telif student_form.errors:\n    \t\tresponse.flash = 'Form has errors'\n\n    \tschool_form=SQLFORM(db.school)\n    \tif school_form.accepts(request, session):\n    \t\tredirect(URL('index'))\n    \t\tresponse.flash = 'School Form Accepted'\n    \telif school_form.errors:\n    \t\tresponse.flash = 'Form has errors'\n\n    \teducation_form=SQLFORM(db.education)\n    \tif education_form.accepts(request, session):\n    \t\tresponse.flash = 'Education Form Accepted'\n    \telif education_form.errors:\n    \t\tresponse.flash = 'Form has errors'\n\n    return locals()\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Education CV</h2>\n    <div id='form1'>{{=education_form}}</div>\n\n    <h2>Student</h2>\n    <div id='form1'>{{=student_form}}</div>\n\n    <h2>School</h2>\n    <div id='form1'>{{=school_form}}</div>\n\n    ```", "```py\ndef index():\n\treturn dict()\n\ndef create_student():\n\treturn crud.create(db.student, message='Student Form Accepted')\n\ndef create_school():\n\treturn crud.create(db.school, message='School Form Accepted')\n\ndef create_education():\n\treturn crud.create(db.education, message='Education Form Accepted')\n\n```", "```py\n{{extend 'layout.html'}}\n<h2>Education CV</h2>\n<div id='form1'>\n\t{{=LOAD('default','create_eduction',ajax_trap=True)}}\n</div>\n\n<h2>Student</h2>\n<div id='form1'>{{=LOAD('default', 'create_student')}}</div>\n\n<h2>School</h2>\n<div id='form1'>{{=LOAD('default', 'create_school')}}</div>\n\n```", "```py\ndb.define_table('page', Field('title', notnull=True), Field('body'))\n\n```", "```py\ndef edit():\n\tpage = db.page(request.args(0))\n\tform = SQLFORM(db.page,page)\n\tif form.accepts(request,session):\n\t\tresponse.flash = \"page saved\"\n\treturn dict(form=form)\n\n```", "```py\n    def edit():\n    \tpage = db.page(request.args(0))\n    \tform = SQLFORM(db.page,page)\n    \tif form.accepts(request,session, detect_record_change=True):\n    \t\tresponse.flash = \"page saved\"\n    \telif form.record_changed:\n    \t\tresponse.flash = \"page not saved because changed on server\"\n    \treturn dict(form=form)\n\n    ```", "```py\ndef edit():\n\tpage = db.page(request.args(0))\n\tform = crud.update(db.page,page)\n\tif form.record_changed:\n\t\tresponse.flash = \"page not saved; try resubmit\"\n\treturn dict(form=form)\n\n```", "```py\n    db.define_table('mytable',\n    \tField('field1'),\n    \tField('field2'),\n    \t...\n    \tField('fieldN'))\n\n    ```", "```py\n    def wizard():\n    \tSTEPS = {0: ('field1','field2'), # fields for 1st page\n    \t\t1: ('field3','field4'), # fields for 2nd page\n    \t\t2: ('field5,''field6'), # fields for 3rd page\n    \t\t3: URL('done')} # url when wizard completed\n\n    \tstep = int(request.args(0) or 0)\n    \tif not step in STEPS: redirect(URL(args=0))\n    \tfields = STEPS[step]\n    \tif step==0:\n    \t\tsession.wizard = {}\n    \tif isinstance(fields,tuple):\n    \t\tform = SQLFORM.factory(*[f for f in db.mytable if f.name in\n    \t\t\tfields])\n    \tif form.accepts(request,session):\n    \t\tsession.wizard.update(form.vars)\n    \t\tredirect(URL(args=step+1))\n    \telse:\n    \t\tdb.mytable.insert(**session.wizard)\n    \t\tsession.flash = T('wizard completed')\n    \t\tredirect(fields)\n    \treturn dict(form=form,step=step)\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h1>Wizard Step {{=step}}</h1>\n    {{=form}}\n\n    ```", "```py\ndb.define_table('data',Field('value'))\ndb.define_table('tag',Field('record_id',db.data),Field('name'))\n\n```", "```py\ndef edit():\n\trecord = db.data(request.args(0))\n\tform = crud.update(db.data,record)\n\treturn dict(form=form)\n\n```", "```py\ndef update_tags(form):\n\tdb(db.tag.record_id==form.record.id).delete()\n\tnew_tags = [tag.strip() for tag in request.vars.tags.split(',')]\n\tfor tag in new_tags:\n\t\tif tag:\n\t\t\tdb.tag.insert(record_id=form.record.id,name=tag)\n\ndef make_taggable(form):\n\ttags = [tag.name for tag in db(db.tag.record_id==form.record.id).\nselect()]\n\tvalue = ', '.join(tags)\n\t\tform.element('table').insert(-2, TR(LABEL('Tags:'),\n\t\t\tINPUT(_name='tags', value=value)))\n\treturn form\n\ndef edit():\nrecord = db.data(request.args(1))\nform = make_taggable(crud.update(db.data, record,\n\tonaccept=update_tags))\nreturn dict(form=form)\n\n```", "```py\ndb.tag.name.requires=IS_MATCH('\\w[\\w\\-\\./]+')\n\n```", "```py\ndef validate_tags(form):\n\tnew_tags = [tag.strip() for tag in request.vars.tags.split(',')]\n\tif tag in new_tags:\n\t\t(value, error) = db.tag.name.validate(tag)\n\tif error:\n\t\tform.errors['tags'] = error + '(%s)' % value\n\n```", "```py\ndef edit():\n\trecord = db.data(request.args(0))\n\tform = make_taggable(crud.update(db.data,record,\n\tonvalidation=validate_tags,\n\tonaccept=update_tags))\nreturn dict(form=form)\n\n```", "```py\n    db.define_table('mytable',Field('myfield'))\n    def index():\n    \tform = SQLFORM(db.mytable)\n    \tfor row in form.element('table'): del row[0]\n    \treturn dict(form=form)\n\n    ```", "```py\n    {{=form.custom.begin}}\n    <table>\n    \t<tr>\n    \t\t<td>{{=form.custom.widget.myfield}}</td>\n    \t\t<td>{{=db.mytable.myfield.comment}}</td>\n    \t</tr>\n    \t<tr>\n    \t\t<td>{{=form.custom.submit}}</td>\n    \t</tr>\n    </table>\n    {{=form.custom.end}}\n\n    ```", "```py\ndb.define_table('document',\n\tField('filename', 'upload'),\n\tField('uploaded_by', db.auth_user))\n\n```", "```py\n@auth.requires_login()\ndef upload_callback():\n\tif 'qqfile' in request.vars:\n\t\tfilename = request.vars.qqfile\n\t\tnewfilename = db.document.filename.store(request.body, filename)\n\t\tdb.document.insert(filename=newfilename,\n\t\t\tuploaded_by=auth.user.id)\n\treturn response.json({'success': 'true'})\n\n@auth.requires_login()\ndef upload():\n\treturn dict()\n\n```", "```py\n{{response.files.append(URL(request.application,'static','js/\nfileuploader.js'))}}\n{{response.files.append(URL(request.application,'static','css/\nfileuploader.css'))}}\n{{extend 'layout.html'}}\n\n<script>\njQuery(document).ready(function() {\n\tvar uploader = new qq.FileUploader({\n\t\t// pass the dom node (ex. jQuery(selector)[0] for jQuery users)\n\t\telement: document.getElementById('file-uploader'),\n\t\t// path to server-side upload script\n\t\taction: '{{=URL(\"upload_callback\")}}',\n\t\tsizeLimit: 15000000,\n\t\tminSizeLimit: 0,\n\t\tallowedExtensions: ['xls','jpg', 'jpeg', 'pdf',\n\t\t\t'txt','doc','htm','html','xml','xmls', 'txt','ppt','png',\n\t\t\t'gif'],\n\t\t// set to true to output server response to console\n\t\tdebug: true,\n\n\t\t// events\n\t\t// you can return false to abort submit\n\t\tonSubmit: function(id, fileName){},\n\t\tonProgress: function(id, fileName, loaded, total){},\n\t\tonComplete: function(id, fileName, responseJSON){},\n\t\tonCancel: function(id, fileName){},\n\n\t\tmessages: {\n\t\t\t// error messages, see qq.FileUploaderBasic for content\n\t\t\ttypeError: \"{file} {{=T('has invalid extension.')}}\n\t\t\t\t{{=T('Only')}} {extensions} {{=T('are allowed.')}}\",\n\t\t\t\tsizeError: \"{file} {{=T('is too large, maximum file size\n\t\t\t\tis')}} {sizeLimit}.\",\n\t\t\tminSizeError: \"{file} {{=T('is too small, minimum file size\n\t\t\t\tis')}} {minSizeLimit}.\",\n\t\t\temptyError: \"{file} {{=T('is empty, please select files again\n\t\t\t\twithout it.')}}\",\n\t\t\tonLeave: \"{{=T('The files are being uploaded, if you leave now\n\t\t\t\tthe upload will be cancelled.')}}\"\n\t\t\t},\n\t\t\tshowMessage: function(message){ alert(message); }\n\t\t});\n\t});\n</script>\n\n<div id=\"file-uploader\">\n\t<noscript>\n\t\t<p>Please enable JavaScript to use file uploader.</p>\n\t\t<!-- or put a simple form for upload here -->\n\t</noscript>\n</div>\n\n```", "```py\ndb.define_table('document',\n\tField('filename','upload',requires=IS_NOT_EMPTY()),\n\tField('uploaded_by',db.auth_user))\n\n```", "```py\ndef index():\n\treturn dict()\n\n@auth.requires_signature()\ndef component_list():\n\tdb.document.filename.represent = lambda f,r: f and A('file',_href\\\n\t\t=URL('download',args=f))\n\treturn db(db.document).select()\n\n@auth.requires_signature()\ndef component_form():\n\tdb.document.uploaded_by.default = auth.user_id\n\tdb.document.uploaded_by.writable = False\n\tform = SQLFORM(db.document)\n\tif form.accepts(request):\n\t\tresponse.flash = 'Thanks for filling the form'\n\t\tresponse.js = \"web2py_component('%s','doc_list');\" % \\\n\t\tURL('component_list.load',user_signature=True)\n\telif form.errors:\n\t\tresponse.flash = 'Fill the form correctly'\n\telse:\n\t\tresponse.flash = 'Please fill the form'\n\treturn dict(form=form)\n\n```", "```py\n{{extend 'layout.html'}}\n\n<h1>{{=T(\"Change the user's image!\")}}</h1>\n\n{{=LOAD('default', 'component_list.load', ajax=True,\n\ttarget='doc_list', user_signature=True)}}\n\n{{=LOAD('default', 'component_form.load', ajax=True,\n\tuser_signature=True)}}\n\n```", "```py\n    response.files.insert(2,URL('static','js/jquery.form.js'))\n\n    ```", "```py\n    function web2py_trap_form(action,target) {\n    \tjQuery('#'+target+' form').each(function(i){\n    \t\tvar form=jQuery(this);\n    \t\tif(!form.hasClass('no_trap'))\n    \t\t\tif(form.find('.upload').length>0) {\n    \t\t\t\tform.ajaxForm({\n    \t\t\t\t\turl: action,\n    \t\t\t\t\tsuccess: function(data, statusText, xhr) {\n    \t\t\t\t\t\tjQuery('#'+target).html(xhr.responseText);\n    \t\t\t\t\t\tweb2py_trap_form(action,target);\n    \t\t\t\t\t\tweb2py_ajax_init();\n    \t\t\t\t\t\t}\n    \t\t\t\t\t});\n    \t\t\t\t} else {\n    \t\t\t\t\tform.submit(function(e){\n    \t\t\t\t\t\tjQuery('.flash').hide().html('');\n    \t\t\t\t\t\tweb2py_ajax_page('post',action,form.serialize(),target);\n    \t\t\t\t\t\te.preventDefault();\n    \t\t\t\t\t});\n    \t\t\t\t}\n    \t\t});\n    }\n\n    ```", "```py\n    {{=form}}\n\n    <script>\n    /* hack because jquery.form.js does not properly passes headers */\n    \tjQuery('.flash').hide().html(\"{{=response.flash}}\").slideDown();\n    \teval(\"{{=XML(response.js or '')}}\");\n    </script>\n\n    ```", "```py\neasy_install PIL\n\n```", "```py\nsudo apt-get install python-imaging\n\n```", "```py\ndb.define_table('document',\n\tField('filename','upload'),\n\tField('thumbnail','upload', readable=False, writable=False))\n\n```", "```py\ndef make_thumbnail(table, image_id, size=(150, 150)):\n\timport os\n\tfrom PIL import Image\n\tthis_image = table(image_id)\n\tim = Image.open(os.path.join(request.folder, 'uploads',\n\t\tthis_image.filename))\n\tim.thumbnail(size, Image.ANTIALIAS)\n\tthumbnail = 'document.thumbnail.%s.jpg' %\n\t\tthis_image.filename.split('.')[2]\n\tim.save(os.path.join(request.folder, 'uploads', thumbnail), 'jpeg')\n\tthis_image.update_record(thumbnail=thumbnail)\n\ndef uploadimage():\n\tform = SQLFORM(db.document)\n\tif form.accepts(request, session):\n\t\tresponse.flash = 'form accepted'\n\t\tmake_thumbnail(db.document,form.vars.id,(175,175))\n\telif form.errors:\n\t\tresponse.flash = 'form has errors'\n\tdocs = db(db.document).select()\n\treturn dict(form=form,docs=docs)\n\n```", "```py\n    <form action=\"http://127.0.0.1:8000/example/upload/post?X-\n    Progress-ID=myuuid\">\n\n    ```", "```py\n    cache.ram(\"X-Progress-ID:myuuid:length\",lambda:0,None)\n\n    ```", "```py\n    cache.ram('X-Progress-ID:myuuid:uploaded',\n    \tlambda: 0, None)\n\n    ```", "```py\n    def post():\n    \tif request.extension=='json' and 'X-Progress-ID' in\n    \t\trequest.get_vars:\n    \t\tcache_key = 'X-Progress-ID:'+request.get_vars['X-Progress-ID']\n    \t\tlength=cache.ram(cache_key+':length', lambda: 0, None)\n    \t\tuploaded=cache.ram(cache_key+':uploaded', lambda: 0, None)\n    \t\tfrom gluon.serializers import json\n    \t\treturn json(dict(length=length, uploaded=uploaded))\n    \tform = FORM(INPUT(_type='file',\n    \t\t_name='file',requires=IS_NOT_EMPTY()),\n    \t\tINPUT(_type='submit', _value='SUBMIT'))\n    \treturn dict(form=form, myuuid = \"[server generated uuid]\")\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <script type=\"text/javascript\">\n    \t// Add upload progress for multipart forms.\n    \tjQuery(function() { jQuery('form[enctype=\"multipart/form-\n    \t\tdata\"]').submit(function(){\n    \t// Prevent multiple submits\n    \tif (jQuery.data(this, 'submitted')) return false;\n    \t// freqency of update in ms\n    \tvar freq = 1000;\n    \t// id for this upload so we can fetch progress info.\n    \tvar uuid = ''+Math.floor(Math.random() * 1000000);\n    \t// ajax view serving progress info\n    \tvar progress_url = '{{ =URL( extension= \"json\" )}}';\n    \t// Append X-Progress-ID uuid form action\n    \tthis.action += ((this.action.indexOf('?') == -1)?'?':'&') +\n    \t\t'X-Progress-ID=' + uuid;\n    \tvar progress = jQuery('<div id=\"upload-progress\"\n    \t\tclass=\"upload-progress\"></div>').insertAfter(\n    \t\tjQuery('input[type=\"submit\"]')).append('<div\n    \t\tclass=\"progress-container\">\n    \t\t<span class=\"progress-info\">uploading 0%</span>\n    \t\t<div class=\"progress-bar\"></div></div>');\n    \tjQuery('input[type=\"submit\"]').remove();\n    \t// style the progress bar\n    \tprogress.find('.progress-bar').height('1em').width(0);\n    \tprogress.css(\"background-color\", \"red\");\n\n    \t// Update progress bar\n    \tfunction update_progress_info() {\n    \t\tprogress.show();\n    \t\tjQuery.getJSON(progress_url,\n    \t\t{'X-Progress-ID': uuid, 'random': Math.random()},\n    \t\tfunction(data, status){ if (data) {\n    \t\t\tvar progress_coefficient=\n    \t\t\t\tparseInt(data.uploaded)/parseInt(data.length);\n    \t\t\tvar width=progress.find('.progress-container').width();\n    \t\t\tvar progress_width = width * progress_coefficient;\n    \t\t\tprogress.find('.progress-bar').width(progress_width);\n    \t\t\tprogress.find('.progress-info').text('uploading '\n    \t\t\t\t+ progress_coefficient*100 + '%');\n    \t\t}\n    \t\twindow.setTimeout(update_progress_info, freq);\n    \t\t});\n    \t};\n    \twindow.setTimeout(update_progress_info, freq);\n    \t// mark form as submitted.\n    \tjQuery.data(this, 'submitted', true);\n    \t});\n    });\n    </script>\n\n    {{=form}}\n\n    ```", "```py\nthis.action += (this.action.indexOf('?') == -1 ? '?' : '&')\n\t+ 'X-Progress-ID=' + uuid;\n\n```", "```py\nvar progress_url = '{{=URL(extension='json')}}';\njQuery.getJSON(progress_url,\n\t{'X-Progress-ID': uuid, 'random': Math.random()},\n\t...)\n\n```", "```py\ndb.define_table('board',\n\tField('message', comment='Let your message here.'))\n\n```", "```py\ndb.define_table('recados',\n\tField('message', comment=SPAN('Let here your ',B('message'))))\n\n```", "```py\n    {{\n    \tresponse.files.append(URL('static','js/jquery.tooltip.min.js'))\n    \tresponse.files.append(URL('static','css/jquery.tooltip.css'))\n    }}\n\n    ```", "```py\n    <script type=\"text/javascript\">\n    \tjQuery(function() {\n    \t// iterates over all form widgets\n    \tjQuery(\".w2p_fw\").each(function (){\n    \t\t// set title for the widget taken from the comment column\n    \t\tjQuery(this).attr('title',jQuery(this).next().html());\n    \t\t// clear the comment (optional)\n    \t\tjQuery(this).next().html('');\n    \t\t// create the tooltip with title attribute set\n    \t\tjQuery(this).tooltip();\n    \t});\n    });\n    </script>\n\n    ```", "```py\n    class ColorPickerWidget(object):\n    \t\"\"\"\n    \tColorpicker widget based on\n    \thttp://code.google.com/p/mcolorpicker/\n    \t\"\"\"\n    \tdef __init__ (self, js = colorpicker_js, button=True, style=\"\",\n    \t\t\ttransparency=False):\n    \t\timport uuid\n    \t\tuid = str(uuid.uuid4())[:8]\n    \t\tself._class = \"_%s\" % uid\n    \t\tself.style = style\n    \t\tif transparency == False:\n    \t\t\tself.transparency = 'false'\n    \t\telse:\n    \t\t\tself.transparency = 'true'\n    \t\tif button == True:\n    \t\t\tself.data = 'hidden'\n    \t\tif self.style == \"\":\n    \t\t\tself.style = \"height:20px;width:20px;\"\n    \t\telse:\n    \t\t\tself.data = 'display'\n    \t\tif not js in response.files:\n    \t\t\tresponse.files.append(js)\n    \t\tdef widget(self, f, v):\n    \t\t\twrapper = DIV()\n    \t\t\tinp = SQLFORM.widgets.string.widget(f,v, _value=v,\\\n    \t\t\t_type='color',\\\n    \t\t\t_data_text='hidden', _style=self.style, _hex='true',\\\n    \t\t\t_class=self._class)\n    \t\t\tscr = SCRIPT(\"jQuery.fn.mColorPicker.init.replace = false; \\\n    \t\t\tjQuery.fn.mColorPicker.init.allowTransparency=%s; \\\n    \t\t\tjQuery('input.%s').mColorPicker(\\\n    \t\t\t\t{'imageFolder': '/%s/static/mColorPicker/'});\"\\\n    \t\t\t% (self.transparency, self._class, request.application))\n    \t\t\twrapper.components.append(inp)\n    \t\t\twrapper.components.append(scr)\n    \t\t\treturn wrapper\n    color_widget = ColorPickerWidget()\n\n    ```", "```py\n    db.define_table('house',\n    \tField('color', widget = color_widget.widget))\n\n    ```", "```py\n    def index():\n    \tform = SQLFORM(db.house)\n    \tif form.accepts(request, session):\n    \t\tresponse.flash = T('New house inserted')\n    \treturn dict(form=form)\n\n    ```", "```py\ndb.define_table('post', Field('body', 'text'))\n\n```", "```py\n    def index():\n    \tposts = db(db.post).select()\n    \treturn dict(posts=posts)\n\n    ```", "```py\n    def index():\n    \tposts = db(db.post).select()\n    \tfor post in posts:\n    \t\tpost.short = TAG(post.body).flatten()[:100]+'...'\n    \treturn dict(posts=posts)\n\n    ```", "```py\n    {{for post in posts:}}<div\n    \tclass=\"post\">{{=post.short}}</div>{{pass}}\n\n    ```", "```py\n    def index():\n    \tposts = db(db.post).select()\n    \tfor post in posts:\n    \t\tpost.short = post.body[:100]+'...'\n    \treturn dict(posts=posts)\n\n    ```", "```py\n    {{for post in posts:}}<div\n    \tclass=\"post\">{{=MARKMIN(post.short)}}</div>{{pass}}\n\n    ```", "```py\ndef index():\n\tposts = db(db.post).select(db.post.body[:100]+'...')\n\tfor post in posts:\n\t\tpost.short = post(db.post.body[:100]+'...')\n\treturn dict(posts=posts)\n\n```", "```py\ndb.define_table('bottle', Field('name'), Field('year', 'integer'))\ndb.define_table('taster', Field('name'), Field('bottle', db.bottle))\n\n```", "```py\n    form=SQLFORM.factory(\n    \tdb.bottle,\n    \tField('tasters', type='list:string', label=T('Tasters')))\n\n    ```", "```py\n    def register_bottle():\n    \tform=SQLFORM.factory(\n    \t\tdb.bottle, Field('tasters', type='list:string',\n    \t\tlabel=T('Tasters')))\n    \tif form.accepts(request,session):\n    \t\tbottle_id =\n    \t\t\tdb.bottle.insert(**db.bottle._filter_fields(form.vars))\n    \tif isinstance(form.vars.tasters, basestring):\n    \t\tdb.taster.insert(name=form.vars.tasters, bottle=bottle_id)\n    \telse:\n    \t\tfor taster in form.vars.tasters:\n    \t\t\tdb.taster.insert(name=taster, bottle=bottle_id)\n    \t\tresponse.flash = 'Wine and guest data are now registered'\n    \t\treturn dict(form=form, bottles = db(db.bottle).select(), \\\n    \t\ttasters = db(db.taster).select())\n\n    ```", "```py\n    db.define_table('bottle', Field('name'), Field('year', 'integer'))\n    db.define_table('taster', Field('auth_user', db.auth_user),\n    \tField('bottle', db.bottle))\n\n    ```", "```py\n    def register_bottle():\n    \ttasters = range(10)\n    \tform=SQLFORM.factory(\n    \t\tdb.bottle,\n    \t\t\t*[Field('taster%i'%i, db.auth_user,label=T('Taster #%i'%i))\n    \t\t\tfor i in tasters])\n    \tif form.accepts(request,session):\n    \t\tbottle_id = \\\n    \t\t\tdb.bottle.insert(**db.bottle._filter_fields(form.vars))\n    \tfor i in tasters:\n    \t\tif 'taster%i'%i in form.vars:\n    \t\t\tdb.taster.insert(auth_user=\n    \t\t\t\tform.vars['taster%i'%i],bottle=bottle_id)\n    \t\tresponse.flash='Wine and guest data are now registered'\n    return dict(form=form)\n\n    ```", "```py\n{{extend 'layout.html'}}\n{{=form}}\n\n```", "```py\n{{extend 'layout.html'}}\n{{=form}}\n<script>\n\tvar taster_rows = new Array();\n\tfor(var i=0; i<10; i++){\n\ttaster_rows[i] = new Array();\n\ttaster_rows[i][0] = '#no_table_taster'+i;\n\ttaster_rows[i][1] = '#no_table_taster'+(i+1)+'__row';\n}\n\tjQuery(function(){\n\t\tfor(var i=1; i<10; i++){\n\t\t\tjQuery('#no_table_taster'+i+'__row').hide();\n\t}\n\tfor(var i=0; i<9; i++){\n\t\tjQuery('#no_table_taster'+i).change(\n\t\t\tfunction(){\n\t\t\t\tfor(var i=0; i<10; i++){\n\t\t\t\t\tif(taster_rows[i][0] == (\"#\" + $(this).attr(\"id\"))){\n\t\t\t\t\t\tjQuery(taster_rows[i][1]).slideDown();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\t);\n</script>\n\n```", "```py\ndef edit_bottle():\n\tbottle_id = request.args(0)\n\tbottle = db.bottle(bottle_id) or redirect(URL('error'))\n\tbottle_tasters = db(db.taster.bottle==bottle_id).select()\n\ttasters, actual_testers = range(10), len(bottle_tasters)\n\tform=SQLFORM.factory(\n\t\tField('name', default=bottle.name),\n\t\tField('year', 'integer', default=bottle.year),\n\t\t*[Field('taster%i'%i,db.auth_user, default=bottle_tasters[i].auth_user \\ if i<actual_testers else '', label=T('Taster #%i'%i)) for\ni in tasters])\n\tif form.accepts(request,session):\n\t\tbottle.update_record(**db.bottle._filter_fields(form.vars))\n\t\tdb(db.taster.bottle==bottle_id).delete()\n\tfor i in tasters:\n\t\tif 'taster%i'%i in form.vars:\n\t\t\tdb.taster.insert(auth_user=\n\t\t\t\tform.vars['taster%i'%i],bottle=bottle_id)\n\tresponse.flash = 'Wine and guest data are now updated'\n\treturn dict(form=form)\n\n```", "```py\n{{extend 'layout.html'}}\n{{=form}}\n<script>\n\tvar taster_rows = new Array();\n\tfor(var i=0; i<10; i++){\n\t\ttaster_rows[i] = new Array();\n\t\ttaster_rows[i][0] = '#no_table_taster'+i;\n\t\ttaster_rows[i][1] = '#no_table_taster'+(i+1)+'__row';\n\t}\n\tjQuery(function(){\n\t\tfor(var i=1; i<10; i++){\n\t\t\tif(!jQuery('#no_table_taster'+i).val()){\n\t\t\t\tjQuery('#no_table_taster'+i+'__row').hide();\n\t\t}\n\t}\n\tfor(var i=0; i<9; i++){\n\t\tjQuery('#no_table_taster'+i).change(\n\t\t\tfunction(){\n\t\t\t\tfor(var i=0; i<10; i++){\n\t\t\t\t\tif(taster_rows[i][0] == (\"#\" + $(this).attr(\"id\"))){\n\t\t\t\t\t\tjQuery(taster_rows[i][1]).slideDown();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n);\n</script>\n\n```", "```py\n    DEPENDENCIES = [\n    \t'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/jquery-\n    \t\tui.js',\n    \t'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.9/themes/ui-\n    \t\tdarkness/jquery-ui.css',\n    \tURL(c='static/stars',f='jquery.ui.stars.js'),\n    \tURL(c='static/stars',f='jquery.ui.stars.css')]\n\n    def rating_widget(f,v):\n    \tfrom gluon.sqlhtml import OptionsWidget\n    \timport uuid\n    \tid = str(uuid.uuid4())\n    \tfor path in DEPENDENCIES:\n    \t\tresponse.files.append(path)\n    \treturn DIV(SPAN(_id=\"stars-cap\"),\n    \t\tDIV(OptionsWidget.widget(f,v),_id=id),\n    \t\tSCRIPT(\"jQuery(function(){jQuery('#%s').stars({inputType:\n    \t\t\t'select'});});\" % id))\n\n    ```", "```py\n    db.define_table('song',\n    \tField('title'),\n    \tField('rating', 'integer'))\n\n    ```", "```py\n    db.song.rating.requires = IS_IN_SET(range(0, 6))\n    db.song.rating.widget = rating_widget\n\n    ```"]