["```py\n$ cp -R ~/Hands-On-ROS-for-Robotics-Programming/Chapter11_OpenAI_Gym ~/catkin_ws/src/\n```", "```py\n$ bash Anaconda2-2019.10-Linux-x86_64.sh\n```", "```py\n==> For changes to take effect, close and re-open your current shell. <==\nIf you'd prefer that conda's base environment not be activated on startup, \n set the auto_activate_base parameter to false:\n\n $ conda config --set auto_activate_base false\n```", "```py\n# >>> conda initialize >>>\n# !! Contents within this block are managed by 'conda init' !!\n__conda_setup=\"$('/home/${USER}/anaconda2/bin/conda' 'shell.bash' 'hook' 2> /dev/n$\nif [ $? -eq 0 ]; then\n eval \"$__conda_setup\"\nelse\n if [ -f \"/home/${USER}/anaconda2/etc/profile.d/conda.sh\" ]; then\n . \"/home/${USER}/anaconda2/etc/profile.d/conda.sh\"\n else\n export PATH=\"/home/${USER}/anaconda2/bin:$PATH\"\n fi\nfi\nunset __conda_setup\n# <<< conda initialize <<<\n```", "```py\n$ source ~/.bashrc\n```", "```py\n$ conda config --set auto_activate_base false\n```", "```py\n$ conda activate\n```", "```py\n(*base*) $ jupyter notebook\n```", "```py\n(*base*) $ conda deactivate\n```", "```py\n$ conda create -n gym pip python=2.7\n$ conda activate gym\n```", "```py\n(gym) $ pip install tensorflow keras gym box2d-py\n```", "```py\n(gym) $ pip show gym\n```", "```py\nName: gym\nVersion: 0.15.4\nSummary: The OpenAI Gym: A toolkit for developing and comparing your reinforcement learning agents.\nHome-page: https://github.com/openai/gym\nAuthor: OpenAI\nAuthor-email: gym@openai.com\nLicense: UNKNOWN\nLocation: ~/anaconda2/envs/gym/lib/python2.7/site-packages\nRequires: pyglet, cloudpickle, six, scipy, numpy, opencv-python, enum34\n```", "```py\n(gym) $ conda install jupyter\n```", "```py\n(gym) $ conda install -c https://conda.anaconda.org/kne pybox2d\n```", "```py\n$ pip install --user tensorflow keras tflearn gym\n\n```", "```py\n(gym) $ conda deactivate\n$ cd ~/catkin_ws\n$ git clone https://github.com/openai/gym\n$ cd gym\n$ pip install --user -e . \n```", "```py\n$ rm -rf gym.egg-info\n$ ls ~/.local/lib/python2.7/site-packages | grep gym | xargs rm\n```", "```py\n$ cd ~/catkin_ws/src\n$ git clone https://bitbucket.org/theconstructcore/openai_ros.git\n$ cd ~/ros_ws\n$ catkin_make\n$ source devel/setup.bash\n$ rosdep install openai_ros\n```", "```py\n$ cd ~/catkin_ws/src/Chapter12_OpenAI_Gym/cart-pole\n$ conda activate gym\n(*gym*) $ python cart-pole_env.py\n```", "```py\nimport gym\n\nenv = gym.make('CartPole-v0')\nenv.reset()\n\nfor _ in range(1000):\n    env.render()\n    env.step(env.action_space.sample())\n\nenv.close()\n```", "```py\n$ cd ~/catkin_ws/src/Chapter12_OpenAI_Gym/cart-pole\n$ conda activate\n(*gym*) $ python CartPole-v0.py\n```", "```py\nenv.render()\n\naction = agent.act(state)\nnext_state, reward, done, _ = env.step(action)\n\nscore += reward\n\nnext_state = np.reshape(next_state, (1, 4))\nagent.remember(state, action, reward, next_state, done)\n\nstate = next_state\n```", "```py\n$ conda activate gym\n```", "```py\n(gym) $ cd ~/catkin_ws/src/Chapter12_OpenAI_Gym/taxi\n```", "```py\n(gym) $ jupyter notebook\n```", "```py\n +---------+\n                    |R: | : :G|\n                    | : | : : |   \n                    | : : : : |\n                    | |o: | : |\n                    |Y| : |B: |\n                    +---------+\n```", "```py\nQ(state,action) ← (1−α)Q(state,action) + α(reward + γ maxQ(next state,all actions))\n```", "```py\n$ cd ~/catkin_ws/src/Chapter12_OpenAI_Gym/cart-pole_ROS\n```", "```py\n<launch>\n    <rosparam command=\"load\" file=\"$(find cartpole_dqn)/config/cartpole_dqn_params.yaml\" />\n    <!-- Launch the training system -->\n    <node pkg=\"cartpole_dqn\" name=\"cartpole_dqn\" type=\"cartpole_dqn.py\" output=\"screen\"/>\n</launch>\n\n```", "```py\nobservation, reward, done, info = env.step(action)\n```", "```py\n<rosparam command=\"load\" file=\"$(find cartpole_dqn)/config/cartpole_dqn_params.yaml\" />\n```", "```py\nalpha = rospy.get_param('/cartpole_v0/alpha')\ngamma = rospy.get_param('/cartpole_v0/gamma')\nepsilon = rospy.get_param('/cartpole_v0/epsilon')\n```", "```py\nT1 $ roslaunch cartpole_description main.launch\n```", "```py\nT2 $ conda activate gym\nT2 $ (gym) roslaunch cartpole_dqn start_training.launch\n```", "```py\n$ rqt_console\n```", "```py\n$ rosrun rqt_logger_level rqt_logger_level\n```"]