["```py\nimport os\nimport wx\n\nclass ImageCanvas(wx.PyPanel):\n    def __init__(self, parent):\n        super(SlideShowPanel, self).__init__(parent)\n\n        # Attributes\n        self.idx = 0 # Current index in image list\n        self.images = list() # list of images found to display\n\n        # Event Handlers\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n\n```", "```py\n    def DoGetBestSize(self):\n        \"\"\"Virtual override for PyPanel\"\"\"\n        newsize = wx.Size(0, 0)\n        if len(self.images):\n            imgpath = self.images[self.idx]\n            bmp = wx.Bitmap(imgpath)\n            newsize = bmp.GetSize()\n            newsize = newsize + (20, 20) # some padding\n        else:\n            tsize = self.GetTextExtent(\"No Image!\")\n            newsize = tsize + (20, 20)\n\n        # Ensure new size is at least 300x300\n        return wx.Size(max(300, newsize[0]),\n                       max(300, newsize[1]))\n\n```", "```py\n    def OnPaint(self, event):\n        \"\"\"Draw the image on to the panel\"\"\"\n        dc = wx.PaintDC(self) # Must create a PaintDC\n\n        # Get the working rectangle\n        rect = self.GetClientRect()\n\n        # Setup the DC\n        dc.SetTextForeground(wx.BLACK)\n\n        # Do the drawing\n        if len(self.images):\n            # Draw the current image\n            imgpath = self.images[self.idx]\n            bmp = wx.Bitmap(imgpath)\n            bsize = bmp.GetSize()\n            # Try and center the image\n            # Note: assumes image is smaller than canvas\n            xpos = (rect.width - bsize[0]) / 2\n            ypos = (rect.height - bsize[1]) / 2\n            dc.DrawBitmap(bmp, xpos, ypos)\n            # Draw a label under the image saying what\n            # number in the set it is.\n            imgcount = len(self.images)\n            number = \"%d / %d\" % (self.idx+1, imgcount)\n            tsize = dc.GetTextExtent(number)\n            xpos = (rect.width - tsize[0]) / 2\n            ypos = ypos + bsize[1] + 5 # 5px below image\n            dc.DrawText(number, xpos, ypos)\n        else:\n            # Display that there are no images\n            font = self.GetFont()\n            font.SetWeight(wx.FONTWEIGHT_BOLD)\n            dc.SetFont(font)\n            dc.DrawLabel(\"No Images!\", rect, wx.ALIGN_CENTER)\n\n```", "```py\ndef Next(self):\n        \"\"\"Goto next image\"\"\"\n        self.idx += 1\n        if self.idx >= len(self.images):\n            self.idx = 0 # Go back to zero\n        self.Refresh() # Causes a repaint\n\n    def Previous(self):\n        \"\"\"Goto previous image\"\"\"\n        self.idx -= 1\n        if self.idx < 0:\n            self.idx = len(self.images) - 1 # Goto end\n        self.Refresh() # Causes a repaint\n\n    def SetImageDir(self, imgpath):\n        \"\"\"Set the path to where the images are\"\"\"\n        assert os.path.exists(imgpath)\n        # Find all the images in the directory\n        self.images = [ os.path.join(imgpath, img)\n                        for img in os.listdir(imgpath)\n                        if img.lower().endswith('.png') or\n                           img.lower().endswith('.jpg') ]\n        self.idx = 0\n\n```", "```py\nclass Smiley(wx.PyControl):\n    def __init__(self, parent, size=(50,50)):\n        super(Smiley, self).__init__(parent,\n                                     size=size,\n                                     style=wx.NO_BORDER)\n\n        # Event Handlers\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n\n```", "```py\n    def OnPaint(self, event):\n        \"\"\"Draw the image on to the panel\"\"\"\n        dc = wx.PaintDC(self) # Must create a PaintDC\n\n        # Get the working rectangle we can draw in\n        rect = self.GetClientRect()\n\n        # Setup the DC\n        dc.SetPen(wx.BLACK_PEN) # for drawing lines / borders\n        yellowbrush = wx.Brush(wx.Colour(255, 255, 0))\n        dc.SetBrush(yellowbrush) # Yellow fill\n\n```", "```py\n        cx = (rect.width / 2) + rect.x\n        cy = (rect.width / 2) + rect.y\n        radius = min(rect.width, rect.height) / 2\n        dc.DrawCircle(cx, cy, radius)\n\n```", "```py\n        eyesz = (rect.width / 8, rect.height / 8)\n        eyepos = (cx / 2, cy / 2)\n        dc.SetBrush(wx.BLUE_BRUSH)\n        dc.DrawRectangle(eyepos[0], eyepos[1],\n                         eyesz[0], eyesz[1])\n        eyepos = (eyepos[0] + (cx - eyesz[0]), eyepos[1])\n        dc.DrawRectangle(eyepos[0], eyepos[1],\n                         eyesz[0], eyesz[1])\n\n```", "```py\n        dc.SetBrush(yellowbrush)\n        startpos = (cx / 2, (cy / 2) + cy)\n        endpos = (cx + startpos[0], startpos[1])\n        dc.DrawArc(startpos[0], startpos[1],\n                   endpos[0], endpos[1], cx, cy)\n        dc.SetPen(wx.TRANSPARENT_PEN)\n        dc.DrawRectangle(startpos[0], cy,\n                         endpos[0] - startpos[0],\n                         startpos[1] - cy)\n\n```", "```py\nclass CaptionBox(wx.PyPanel):\n    def __init__(self, parent, caption):\n        super(CaptionBox, self).__init__(parent,\n                                         style=wx.NO_BORDER)\n\n        # Attributes\n        self._caption = caption\n        self._csizer = wx.BoxSizer(wx.VERTICAL)\n\n        # Setup\n        self.__DoLayout()\n\n        # Event Handlers\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n\n    def __DoLayout(self):\n        msizer = wx.BoxSizer(wx.HORIZONTAL)\n        self._csizer.AddSpacer(12) # extra space for caption\n        msizer.Add(self._csizer, 0, wx.EXPAND|wx.ALL, 8)\n        self.SetSizer(msizer)\n\n    def DoGetBestSize(self):\n        size = super(CaptionBox, self).DoGetBestSize()\n\n        # Compensate for wide caption labels\n        tw = self.GetTextExtent(self._caption)[0]\n        size.SetWidth(max(size.width, tw+20))\n        return size\n\n    def AddItem(self, item):\n        \"\"\"Add a window or sizer item to the CaptionBox\"\"\"\n        self._csizer.Add(item, 0, wx.ALL, 5)\n\n```", "```py\n    def OnPaint(self, event):\n        \"\"\"Draws the Caption and border around the controls\"\"\"\n        dc = wx.PaintDC(self)\n\n        # Get the working rectangle we can draw in\n        rect = self.GetClientRect()\n\n        # Get the sytem color to draw the caption\n        ss = wx.SystemSettings\n        color = ss.GetColour(wx.SYS_COLOUR_ACTIVECAPTION)\n        txtcolor = ss.GetColour(wx.SYS_COLOUR_CAPTIONTEXT)\n        dc.SetTextForeground(txtcolor)\n\n        # Draw the border\n        rect.Inflate(-2, -2)\n        dc.SetPen(wx.Pen(color))\n        dc.SetBrush(wx.TRANSPARENT_BRUSH)\n        dc.DrawRectangleRect(rect)\n\n        # Add the Caption\n        rect = wx.Rect(rect.x, rect.y,\n                       rect.width, 16)\n        dc.SetBrush(wx.Brush(color))\n        dc.DrawRectangleRect(rect)\n        rect.Inflate(-5, 0)\n        dc.SetFont(self.GetFont())\n        dc.DrawLabel(self._caption, rect, wx.ALIGN_LEFT)\n\n```", "```py\nclass PodLabel(wx.PyControl):\n    def __init__(self, parent, label, color):\n        super(PodLabel, self).__init__(parent,\n                                       style=wx.NO_BORDER)\n\n        # Attributes\n        self._label = label\n        self._color = color\n\n        # Event Handlers\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n\n    def DoGetBestSize(self):\n        txtsz = self.GetTextExtent(self._label)\n        size = wx.Size(txtsz[0] + 10, txtsz[1] + 6)\n        return size\n\n```", "```py\n    def OnPaint(self, event):\n        \"\"\"Draws the Caption and border around the controls\"\"\"\n        dc = wx.PaintDC(self)\n        gcdc = wx.GCDC(dc)\n        gc = gcdc.GetGraphicsContext()\n\n        # Get the working rectangle we can draw in\n        rect = self.GetClientRect()\n\n        # Setup the GraphicsContext\n        pen = gc.CreatePen(wx.TRANSPARENT_PEN)\n        gc.SetPen(pen)\n        rgb = self._color.Get(False)\n        alpha = self._color.Alpha() *.2 # fade to transparent\n        color2 = wx.Colour(*rgb, alpha=alpha)\n        x1, y1 = rect.x, rect.y\n        y2 = y1 + rect.height\n        gradbrush = gc.CreateLinearGradientBrush(x1, y1,\n                                                 x1, y2,\n                                                 self._color,\n                                                 color2)\n        gc.SetBrush(gradbrush)\n\n        # Draw the background\n        gc.DrawRoundedRectangle(rect.x, rect.y,\n                                rect.width, rect.height,\n                                rect.height/2)\n        # Use the GCDC to help draw the aa text\n        gcdc.DrawLabel(self._label, rect, wx.ALIGN_CENTER)\n\n```", "```py\nclass DropArrowButton(wx.PyControl):\n    def __init__(self, parent, id=wx.ID_ANY,\n                 label=\"\", pos=wx.DefaultPosition,\n                 size=wx.DefaultSize, style=0,\n                 validator=wx.DefaultValidator,\n                 name=\"DropArrowButton\"):\n        style |= wx.BORDER_NONE\n        super(DropArrowButton, self).__init__(parent, id,\n                                              pos, size,\n                                              style,\n                                              validator, name)\n\n        # Attributes\n        self._label = label\n        self._menu = None\n        self._state = 0\n\n        # Event Handlers\n        self.Bind(wx.EVT_LEFT_DOWN, self.OnLeftDown)\n        self.Bind(wx.EVT_LEFT_UP, self.OnLeftUp)\n        self.Bind(wx.EVT_LEAVE_WINDOW,\n                  lambda event:\n                  self.SetState(0))\n        self.Bind(wx.EVT_ENTER_WINDOW,\n                  lambda event:\n                  self.SetState(wx.CONTROL_CURRENT))\n        self.Bind(wx.EVT_PAINT, self.OnPaint)\n\n```", "```py\n    def DoGetBestSize(self):\n        size = self.GetTextExtent(self._label)\n        size = (size[0]+16, size[1]+16) # Drop Arrow\n        size = (size[0]+8, size[1]+4) # Padding\n        self.CacheBestSize(size)\n        return size\n\n```", "```py\n    def OnLeftDown(self, event):\n        \"\"\"Show the drop menu\"\"\"\n        self.SetState(wx.CONTROL_PRESSED)\n        if self._menu:\n            size = self.GetSizeTuple()\n            self.PopupMenu(self._menu, (0, size[1]))\n\n    def OnLeftUp(self, event):\n        \"\"\"Send a button click event\"\"\"\n        if self._state != wx.CONTROL_PRESSED:\n            return\n\n        self.SetState(wx.CONTROL_CURRENT)\n\n```", "```py\n    def OnPaint(self, event):\n        \"\"\"Draw the Conrol\"\"\"\n        dc = wx.PaintDC(self)\n        gc = wx.GCDC(dc) # AA text\n\n        # Get the renderer singleton\n        render = wx.RendererNative.Get()\n\n        # Get the working rectangle we can draw in\n        rect = self.GetClientRect()\n\n        # Draw the button\n        render.DrawPushButton(self, gc, rect, self._state)\n        # Draw the label on the button\n        lblrect = wx.Rect(rect.x+4, rect.y+2,\n                          rect.width-24, rect.height-4)\n        gc.DrawLabel(self._label, lblrect, wx.ALIGN_CENTER)\n        # Draw drop arrow\n        droprect = wx.Rect((rect.x+rect.width)-20,\n                           rect.y+2, 16, rect.height-4)\n        state = self._state\n        if state != wx.CONTROL_PRESSED:\n            state = wx.CONTROL_CURRENT\n        render.DrawDropArrow(self, gc, droprect, state)\n\n```", "```py\n    def SetMenu(self, menu):\n        \"\"\"Set the buttons drop menu\n        @param menu: wx.Menu\n        \"\"\"\n        if self._menu:\n            self._menu.Destroy()\n        self._menu = menu\n\n    def SetState(self, state):\n        self._state = state\n        self.Refresh()\n\n```", "```py\nself.Bind(wx.EVT_ERASE_BACKGROUND, self.OnErase)\n\n```", "```py\n    def OnErase(self, event):\n        # Do nothing, reduces flicker by removing\n        # unneeded background erasures and redraws\n        pass\n\n```", "```py\n    def OnPaint(self, event):\n        \"\"\"Draw the image on to the panel\"\"\"\n        # Create a Buffered PaintDC\n        dc = wx.AutoBufferedPaintDCFactory(self)\n\n```", "```py\nself Refresh(rect=RectToUpdate)\n\n```"]