["```py\n# Macro Begin: /home/freecad/10x10x20mm box.FCMacro ++\n\timport FreeCAD\n\timport Part\n\n\t#Gui.activateWorkbench(\"PartWorkbench\")\n\tApp.ActiveDocument.addObject(\"Part::Box\",\"Box\")\n\t#App.ActiveDocument.recompute()\n\t#Gui.SendMsgToActiveView(\"ViewFit\")\n\tFreeCAD.getDocument(\"Unnamed\").getObject(\"Box\").Width = 20.00\n\n\t# Macro End: /home/freecad/10x10x20mm box.FCMacro ++\n\n```", "```py\nimport FreeCAD\n\timport Part\n\n\tApp.ActiveDocument.addObject(\"Part::Box\",\"Box\")\n\tFreeCAD.getDocument(\"Unnamed\").getObject(\"Box\").Width = 20.00\n\n```", "```py\nApp.ActiveDocument.addObject(\"Part::Box\",\"newbox\")\n\tFreeCAD.getDocument(\"Unnamed\").getObject(\"newbox\").Width=20.5\n\n```", "```py\n    import Part\n    \tfrom FreeCAD import Vector\n\n    \tplate = Part.makeBox(40,40,5,Vector(-20,-20,0))\n    \thole1= Part.makeCylinder(1.5,5,Vector(-15,-15,0))\n    \thole2= Part.makeCylinder(1.5,5,Vector(-15,15,0))\n    \thole3= Part.makeCylinder(1.5,5,Vector(15,15,0))\n    \thole4= Part.makeCylinder(1.5,5,Vector(15,-15,0))\n    \tfaceplate = plate.cut(hole1)\n    \tfaceplate = faceplate.cut(hole2)\n    \tfaceplate = faceplate.cut(hole3)\n    \tfaceplate = faceplate.cut(hole4)\n    \tmotorbody=Part.makeCylinder(17.5,60,Vector(0,0,5))\n    \tshaft = Part.makeCylinder(3.175,15,Vector(0,0,-15))\n    \tservo = motorbody.fuse(faceplate)\n    \tservo = servo.fuse(shaft)\n    \tservo.translate(Vector(-20,-20,0))\n    \tservo.rotate(Vector(0,0,0),Vector(0,1,0),-90)\n    \tPart.show(servo)\n\n    ```", "```py\nimport Part\n\tfrom FreeCAD import Vector\n\n```", "```py\n\tPart.show(servo)\n\n```", "```py\n    \tfrom PyQt4 import QtGui,QtCore\n    \timport Part,FreeCAD\n    \tfrom FreeCAD import Base,Vector\n\n    \tclass BoxExample(QtGui.QWidget):\n    \t    def __init__(self):\n    \t        super(BoxExample, self).__init__()\n    \t        self.initUI()\n    \t    def initUI(self):\n    \t        self.setGeometry(100, 100,300, 200)\n    \t        self.setWindowTitle('Make a Box!')\n    \t        self.lengthLabel = QtGui.QLabel(\"Length: \",self)\n    \t        self.lengthLabel.move(50, 15)\n    \t        self.length = QtGui.QLineEdit(self)\n    \t        self.length.move(100, 15)\n    \t        self.widthLabel = QtGui.QLabel(\"Width: \",self)\n    \t        self.widthLabel.move(50, 50)\n    \t        self.width = QtGui.QLineEdit(self)\n    \t        self.width.move(100, 50)\n    \t        self.heightLabel = QtGui.QLabel(\"Height: \",self)\n    \t        self.heightLabel.move(50, 85)\n    \t        self.height = QtGui.QLineEdit(self)\n    \t        self.height.move(100, 85)\n    \t        self.centered=QtGui.QCheckBox(\"Center on XY\",self)\n    \t        self.centered.move(80, 115)\n    \t        self.centerbox = False\n    \t        self.centered.stateChanged.connect(self.changeState)\n    \t        self.okButton = QtGui.QPushButton(\"Create Box\",self)\n    \t        self.okButton.move(160, 150)\n    \t        self.show()\n    \t        QtCore.QObject.connect \\\n    \t(self.okButton, QtCore.SIGNAL(\"pressed()\"),self.box)  \n    \t    def changeState(self, state):\n    \t        console=FreeCAD.Console\n    \t        if state == QtCore.Qt.Checked:\n    \t            console.PrintMessage(\"Box will be centered\\n\")\n    \t            self.centerbox = True\n    \t        else:\n    \t            self.centerbox = False\n    \t    def box(self):\n    \t        l = float(self.length.text())\n    \t        w = float(self.width.text())\n    \t        h = float(self.height.text())\n    \t        if self.centerbox == True:\n    \t            box = Part.makeBox(l,w,h)\n    \t            box.translate(Base.Vector(-l/2,-w/2,0))\n    \t        else:\n    \t            box = Part.makeBox(l,w,h)\n    \t        Part.show(box)\n\n    \td = BoxExample() \n\n    ```", "```py\n\tclass BoxExample(QtGui.QWidget): \n\n```", "```py\nQtCore.QObject.connect \\\n\t(self.okButton, QtCore.SIGNAL(\"pressed()\"),self.box)\n\n```", "```py\n    \tfrom Sketcher import *  \n    \timport Part\n    \timport FreeCAD as App\n    \tfrom FreeCAD import Vector\n    \tif(App.activeDocument() == None):App.newDocument()\n\n    \tf = App.activeDocument().addObject(\"Sketcher::SketchObject\",\"Sketch\")\n    \tf.addGeometry(Part.Line(Vector(0,0,0),Vector(2,20,0)))\n    \tf.addGeometry(Part.Line(Vector(0,0,0),Vector(20,2,0)))\n    \tf.Constraints = [Constraint('Vertical',0),\\ Constraint('Horizontal',1)]\n    \tApp.activeDocument().recompute()\n\n    ```", "```py\n    StartPoint = 1 ;\n    \tl = f.Constraints\n    \tl.append(Constraint('Coincident',0,StartPoint,1,StartPoint))\n    \tf.Constraints = l\n    \tApp.activeDocument().recompute()\n\n    ```", "```py\n    \tfrom Sketcher import *\n\n    ```", "```py\n    \timport Part\n\n    ```", "```py\n    \timport FreeCAD as App\n\n    ```", "```py\n    \tfrom FreeCAD import Vector\n\n    ```", "```py\n    \tif(App.activeDocument() == None): App.newDocument()\n\n    ```", "```py\n    \tf = App.activeDocument().addObject(\"Sketcher::SketchObject\",\\ \"Sketch\")\n\n    ```", "```py\n    f.addGeometry(Part.Line(Vector(0,0,0),Vector(2,20,0)))\n    \tf.addGeometry(Part.Line(Vector(0,0,0),Vector(20,2,0)))\n\n    ```", "```py\n    \tf.Constraints = [Constraint('Vertical',0),\\ Constraint('Horizontal',1)]\n\n    ```", "```py\n    \tApp.activeDocument().recompute()\n\n    ```", "```py\n    \tStartPoint = 1\n\n    ```", "```py\n    \tl = f.Constraints\n\n    ```", "```py\n    \tl.append(Constraint('Coincident',0,StartPoint,1,StartPoint))\n\n    ```", "```py\n    \tf.Constraints = l\n    \tApp.activeDocument().recompute()\n\n    ```", "```py\n\tl.append((Constraint('DistanceX',1,20.0)))\n\n```"]