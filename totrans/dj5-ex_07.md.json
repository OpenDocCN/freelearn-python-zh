["```py\nclass Contact(models.Model):\n    user_from = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        related_name='rel_from_set',\n        on_delete=models.CASCADE\n    )\n    user_to = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        related_name='rel_to_set',\n        on_delete=models.CASCADE\n    )\n    created = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        indexes = [\n            models.Index(fields=['-created']),\n        ]\n        ordering = ['-created']\n    def __str__(self):\n        return f'{self.user_from} follows {self.user_to}' \n```", "```py\nuser1 = User.objects.get(id=1)\nuser2 = User.objects.get(id=2)\nContact.objects.create(user_from=user1, user_to=user2) \n```", "```py\nfollowing = models.ManyToManyField(\n    'self',\n    through=Contact,\n    related_name='followers',\n    symmetrical=False\n) \n```", "```py\n**from** **django.contrib.auth** **import** **get_user_model**\n# ...\n**# Add the following field to User dynamically**\n**user_model = get_user_model()**\n**user_model.add_to_class(**\n**'following'****,**\n **models.ManyToManyField(**\n**'self'****,**\n **through=Contact,**\n **related_name=****'followers'****,**\n **symmetrical=****False**\n **)**\n**)** \n```", "```py\npython manage.py makemigrations account \n```", "```py\nMigrations for 'account':\n  account/migrations/0002_contact.py\n    - Create model Contact \n```", "```py\npython manage.py migrate account \n```", "```py\nApplying account.0002_contact... OK \n```", "```py\nfrom django.contrib.auth import authenticate, **get_user_model,** login\nfrom django.shortcuts import **get_object_or_404,** render\n# ...\n**User = get_user_model()**\n**@login_required**\n**def****user_list****(****request****):**\n **users = User.objects.****filter****(is_active=****True****)**\n**return** **render(**\n**request,**\n**'account/user/list.html'****,**\n**{****'section'****:** **'people'****,** **'users'****: users}**\n **)**\n**@login_required**\n**def****user_detail****(****request, username****):**\n **user = get_object_or_404(User, username=username, is_active=****True****)**\n**return** **render(**\n **request,**\n**'account/user/detail.html'****,**\n **{****'section'****:** **'people'****,** **'user'****: user}**\n **)** \n```", "```py\nurlpatterns = [\n    # ...\n    path('', include('django.contrib.auth.urls')),\n    path('', views.dashboard, name='dashboard'),\n    path('register/', views.register, name='register'),\n    path('edit/', views.edit, name='edit'),\n **path(****'users/'****, views.user_list, name=****'user_list'****),**\n **path(****'users/<username>/'****, views.user_detail, name=****'user_detail'****),**\n] \n```", "```py\n**from** **django.urls** **import** **reverse_lazy**\n# ...\n**ABSOLUTE_URL_OVERRIDES = {**\n**'auth.user'****:** **lambda** **u: reverse_lazy(****'user_detail'****, args=[u.username])**\n**}** \n```", "```py\npython manage.py shell \n```", "```py\n>>> from django.contrib.auth.models import User\n>>> user = User.objects.latest('id')\n>>> str(user.get_absolute_url())\n'/account/users/ellington/' \n```", "```py\n/user/\n    detail.html\n    list.html \n```", "```py\n{% extends \"base.html\" %}\n{% load thumbnail %}\n{% block title %}People{% endblock %}\n{% block content %}\n  <h1>People</h1>\n<div id=\"people-list\">\n    {% for user in users %}\n      <div class=\"user\">\n<a href=\"{{ user.get_absolute_url }}\">\n<img src=\"img/{% thumbnail user.profile.photo 180x180 %}\">\n</a>\n<div class=\"info\">\n<a href=\"{{ user.get_absolute_url }}\" class=\"title\">\n            {{ user.get_full_name }}\n          </a>\n</div>\n</div>\n    {% endfor %}\n  </div>\n{% endblock %} \n```", "```py\n<ul class=\"menu\">\n  ...\n  <li {% if section == \"people\" %}class=\"selected\"{% endif %}>\n<a href=\"**{% url \"****user_list****\" %}\"**>People</a>\n</li>\n</ul> \n```", "```py\npython manage.py runserver \n```", "```py\n{% extends \"base.html\" %}\n{% load thumbnail %}\n{% block title %}{{ user.get_full_name }}{% endblock %}\n{% block content %}\n  <h1>{{ user.get_full_name }}</h1>\n<div class=\"profile-info\">\n<img src=\"img/{% thumbnail user.profile.photo 180x180 %}\" class=\"user-detail\">\n</div>\n  {% with total_followers=user.followers.count %}\n    <span class=\"count\">\n<span class=\"total\">{{ total_followers }}</span>\n      follower{{ total_followers|pluralize }}\n    </span>\n<a href=\"#\" data-id=\"{{ user.id }}\" data-action=\"{% if request.user in user.followers.all %}un{% endif %}follow\" class=\"follow button\">\n      {% if request.user not in user.followers.all %}\n        Follow\n      {% else %}\n        Unfollow\n      {% endif %}\n    </a>\n<div id=\"image-list\" class=\"image-container\">\n      {% include \"images/image/list_images.html\" with images=user.images_created.all %}\n    </div>\n  {% endwith %}\n{% endblock %} \n```", "```py\nfrom django.http import HttpResponse**, JsonResponse**\n**from** **django.views.decorators.http** **import** **require_POST**\nfrom .models import **Contact,** Profile\n# ...\n**@require_POST**\n**@login_required**\n**def****user_follow****(****request****):**\n **user_id = request.POST.get(****'id'****)**\n **action = request.POST.get(****'action'****)**\n**if** **user_id** **and** **action:**\n**try****:**\n **user = User.objects.get(****id****=user_id)**\n**if** **action ==** **'follow'****:**\n **Contact.objects.get_or_create(**\n **user_from=request.user,**\n **user_to=user**\n **)**\n**else****:**\n **Contact.objects.****filter****(**\n **user_from=request.user,**\n **user_to=user**\n **).delete()**\n**return** **JsonResponse({****'status'****:****'ok'****})**\n**except** **User.DoesNotExist:**\n**return** **JsonResponse({****'status'****:****'error'****})**\n**return** **JsonResponse({****'status'****:****'error'****})** \n```", "```py\nurlpatterns = [\n    path('', include('django.contrib.auth.urls')),\n    path('', views.dashboard, name='dashboard'),\n    path('register/', views.register, name='register'),\n    path('edit/', views.edit, name='edit'),\n    path('users/', views.user_list, name='user_list'),\n    **path(****'****users/follow/'****, views.user_follow, name=****'user_follow'****),**\n    path('users/<username>/', views.user_detail, name='user_detail'),\n] \n```", "```py\n{% block domready %}\n  const url = '{% url \"user_follow\" %}';\n  var options = {\n    method: 'POST',\n    headers: {'X-CSRFToken': csrftoken},\n    mode: 'same-origin'\n  }\n  document.querySelector('a.follow')\n          .addEventListener('click', function(e){\n    e.preventDefault();\n    var followButton = this;\n    // add request body\nvar formData = new FormData();\n    formData.append('id', followButton.dataset.id);\n    formData.append('action', followButton.dataset.action);\n    options['body'] = formData;\n    // send HTTP request\nfetch(url, options)\n    .then(response => response.json())\n    .then(data => {\n      if (data['status'] === 'ok')\n      {\n        var previousAction = followButton.dataset.action;\n        // toggle button text and data-action\nvar action = previousAction === 'follow' ? 'unfollow' : 'follow';\n        followButton.dataset.action = action;\n        followButton.innerHTML = action;\n        // update follower count\nvar followerCount = document.querySelector('span.count .total');\n        var totalFollowers = parseInt(followerCount.innerHTML);\n        followerCount.innerHTML = previousAction === 'follow' ? totalFollowers + 1 : totalFollowers - 1;\n      }\n    })\n  });\n{% endblock %} \n```", "```py\npython manage.py startapp actions \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'actions.apps.ActionsConfig'****,**\n] \n```", "```py\n**from** **django.conf** **import** **settings**\nfrom django.db import models\n**class****Action****(models.Model):**\n **user = models.ForeignKey(**\n **settings.AUTH_USER_MODEL,**\n **related_name=****'actions'****,**\n **on_delete=models.CASCADE**\n **)**\n **verb = models.CharField(max_length=****255****)**\n **created = models.DateTimeField(auto_now_add=****True****)**\n**class****Meta****:**\n **indexes = [**\n **models.Index(fields=[****'-created'****]),**\n **]**\n **ordering = [****'-created'****]** \n```", "```py\npython manage.py shell \n```", "```py\n>>> from django.contrib.contenttypes.models import ContentType\n>>> image_type = ContentType.objects.get(app_label='images', model='image')\n>>> image_type\n<ContentType: images | image> \n```", "```py\n>>> image_type.model_class()\n<class 'images.models.Image'> \n```", "```py\n>>> from images.models import Image\n>>> ContentType.objects.get_for_model(Image)\n<ContentType: images | image> \n```", "```py\nfrom django.conf import settings\n**from** **django.contrib.contenttypes.fields** **import** **GenericForeignKey**\n**from** **django.contrib.contenttypes.models** **import** **ContentType**\nfrom django.db import models\nclass Action(models.Model):\n    user = models.ForeignKey(\n        settings.AUTH_USER_MODEL,\n        related_name='actions',\n        on_delete=models.CASCADE\n    )\n    verb = models.CharField(max_length=255)\n    created = models.DateTimeField(auto_now_add=True)\n **target_ct = models.ForeignKey(**\n **ContentType,**\n **blank=****True****,**\n **null=****True****,**\n **related_name=****'target_obj'****,**\n **on_delete=models.CASCADE**\n **)**\n **target_id = models.PositiveIntegerField(null=****True****, blank=****True****)**\n **target = GenericForeignKey(****'target_ct'****,** **'target_id'****)**\nclass Meta:\n        indexes = [\n            models.Index(fields=['-created']),\n **models.Index(fields=[****'target_ct'****,** **'target_id'****]),**\n        ]\n        ordering = ['-created'] \n```", "```py\npython manage.py makemigrations actions \n```", "```py\nMigrations for 'actions':\n  actions/migrations/0001_initial.py\n    - Create model Action\n    - Create index actions_act_created_64f10d_idx on field(s) -created of model action\n    - Create index actions_act_target__f20513_idx on field(s) target_ct, target_id of model action \n```", "```py\npython manage.py migrate \n```", "```py\nApplying actions.0001_initial... OK \n```", "```py\nfrom django.contrib import admin\n**from** **.models** **import** **Action**\n**@admin.register(****Action****)**\n**class****ActionAdmin****(admin.ModelAdmin):**\n **list_display = [****'user'****,** **'verb'****,** **'target'****,** **'created'****]**\n **list_filter = [****'created'****]**\n **search_fields = [****'verb'****]** \n```", "```py\npython manage.py runserver \n```", "```py\nfrom django.contrib.contenttypes.models import ContentType\nfrom .models import Action\ndef create_action(user, verb, target=None):\n    action = Action(user=user, verb=verb, target=target)\n    action.save() \n```", "```py\n**import** **datetime**\nfrom django.contrib.contenttypes.models import ContentType\n**from** **django.utils** **import** **timezone**\nfrom .models import Action\ndef create_action(user, verb, target=None):\n**# check for any similar action made in the last minute**\n **now = timezone.now()**\n **last_minute = now - datetime.timedelta(seconds=****60****)**\n **similar_actions = Action.objects.****filter****(**\n **user_id=user.****id****,**\n **verb= verb,**\n **created__gte=last_minute**\n **)**\n**if** **target:**\n **target_ct = ContentType.objects.get_for_model(target)**\n **similar_actions = similar_actions.****filter****(**\n **target_ct=target_ct,**\n **target_id=target.****id**\n**)**\n**if****not** **similar_actions:**\n**# no existing actions found**\n        action = Action(user=user, verb=verb, target=target)\n        action.save()\n**return****True**\n**return****False** \n```", "```py\nfrom actions.utils import create_action \n```", "```py\n@login_required\ndef image_create(request):\n    if request.method == 'POST':\n        # form is sent\n        form = ImageCreateForm(data=request.POST)\n        if form.is_valid():\n            # form data is valid\n            cd = form.cleaned_data\n            new_image = form.save(commit=False)\n            # assign current user to the item\n            new_image.user = request.user\n            new_image.save()\n **create_action(request.user,** **'bookmarked image'****, new_image)**\n            messages.success(request, 'Image added successfully')\n            # redirect to new created image detail view\nreturn redirect(new_image.get_absolute_url())\n    else:\n        # build form with data provided by the bookmarklet via GET\n        form = ImageCreateForm(data=request.GET)\n    return render(\n request,\n 'images/image/create.html',\n {'section': 'images', 'form': form}\n    ) \n```", "```py\n@login_required\n@require_POST\ndef image_like(request):\n    image_id = request.POST.get('id')\n    action = request.POST.get('action')\n    if image_id and action:\n        try:\n            image = Image.objects.get(id=image_id)\n            if action == 'like':\n                image.users_like.add(request.user)\n **create_action(request.user,** **'likes'****, image)**\nelse:\n                image.users_like.remove(request.user)\n            return JsonResponse({'status':'ok'})\n        except Image.DoesNotExist:\n            pass\nreturn JsonResponse({'status':'error'}) \n```", "```py\nfrom actions.utils import create_action \n```", "```py\ndef register(request):\n    if request.method == 'POST':\n        user_form = UserRegistrationForm(request.POST)\n        if user_form.is_valid():\n            # Create a new user object but avoid saving it yet\n            new_user = user_form.save(commit=False)\n            # Set the chosen password\n            new_user.set_password(\n                user_form.cleaned_data['password']\n            )\n            # Save the User object\n            new_user.save()\n            # Create the user profile\n            Profile.objects.create(user=new_user)\n **create_action(new_user,** **'has created an account'****)**\nreturn render(\n request,\n 'account/register_done.html',\n {'new_user': new_user}\n )\n    else:\n        user_form = UserRegistrationForm()\n    return render(\n request,\n 'account/register.html',\n {'user_form': user_form}\n ) \n```", "```py\n@require_POST\n@login_required\ndef user_follow(request):\n    user_id = request.POST.get('id')\n    action = request.POST.get('action')\n    if user_id and action:\n        try:\n            user = User.objects.get(id=user_id)\n            if action == 'follow':\n                Contact.objects.get_or_create(\n                    user_from=request.user,\n                    user_to=user\n                )\n **create_action(request.user,** **'****is following'****, user)**\nelse:\n                Contact.objects.filter(\n                    user_from=request.user,\n                    user_to=user\n                ).delete()\n            return JsonResponse({'status':'ok'})\n        except User.DoesNotExist:\n            return JsonResponse({'status':'error'})\n    return JsonResponse({'status':'error'}) \n```", "```py\n**from** **actions.models** **import** **Action**\n# ...\n@login_required\ndef dashboard(request):\n    # Display all actions by default\n **actions = Action.objects.exclude(user=request.user)**\n **following_ids = request.user.following.values_list(**\n**'id'****, flat=****True**\n**)**\n**if** **following_ids:**\n**# If user is following others, retrieve only their actions**\n **actions = actions.****filter****(user_id__in=following_ids)**\n **actions = actions[:****10****]**\nreturn render(\n request,\n 'account/dashboard.html',\n {'section': 'dashboard'**,** **'actions'****: actions}**\n    ) \n```", "```py\n@login_required\ndef dashboard(request):\n    # Display all actions by default\n    actions = Action.objects.exclude(user=request.user)\n    following_ids = request.user.following.values_list(\n        'id', flat=True\n )\n    if following_ids:\n        # If user is following others, retrieve only their actions\n        actions = actions.filter(user_id__in=following_ids)\n    actions = actions**.select_related(**\n**'user'****,** **'user__profile'**\n**)**[:10]\n    return render(\n request,\n 'account/dashboard.html',\n {'section': 'dashboard', 'actions': actions}\n    ) \n```", "```py\n@login_required\ndef dashboard(request):\n    # Display all actions by default\n    actions = Action.objects.exclude(user=request.user)\n    following_ids = request.user.following.values_list(\n        'id', flat=True\n )\n    if following_ids:\n        # If user is following others, retrieve only their actions\n        actions = actions.filter(user_id__in=following_ids)\n    actions = actions.select_related(\n        'user', 'user__profile'\n ) **.prefetch_related(****'target'****)**[:10]\n    return render(\n request,\n 'account/dashboard.html',\n {'section': 'dashboard', 'actions': actions}\n    ) \n```", "```py\nactions/\n    action/\n        detail.html \n```", "```py\n{% load thumbnail %}\n{% with user=action.user profile=action.user.profile %}\n<div class=\"action\">\n<div class=\"images\">\n    {% if profile.photo %}\n      {% thumbnail user.profile.photo \"80x80\" crop=\"100%\" as im %}\n      <a href=\"{{ user.get_absolute_url }}\">\n<img src=\"img/{{ im.url }}\" alt=\"{{ user.get_full_name }}\"\n class=\"item-img\">\n</a>\n    {% endif %}\n    {% if action.target %}\n      {% with target=action.target %}\n        {% if target.image %}\n          {% thumbnail target.image \"80x80\" crop=\"100%\" as im %}\n          <a href=\"{{ target.get_absolute_url }}\">\n<img src=\"img/{{ im.url }}\" class=\"item-img\">\n</a>\n        {% endif %}\n      {% endwith %}\n    {% endif %}\n  </div>\n<div class=\"info\">\n<p>\n<span class=\"date\">{{ action.created|timesince }} ago</span>\n<br />\n<a href=\"{{ user.get_absolute_url }}\">\n        {{ user.first_name }}\n      </a>\n      {{ action.verb }}\n      {% if action.target %}\n        {% with target=action.target %}\n          <a href=\"{{ target.get_absolute_url }}\">{{ target }}</a>\n        {% endwith %}\n      {% endif %}\n    </p>\n</div>\n</div>\n{% endwith %} \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Dashboard{% endblock %}\n{% block content %}\n  ...\n**<****h2****>****What's happening****</****h2****>**\n**<****div****id****=****\"action-list\"****>**\n **{% for action in actions %}**\n **{% include \"actions/action/detail.html\" %}**\n **{% endfor %}**\n**</****div****>**\n{% endblock %} \n```", "```py\nfrom django.db.models import Count\nfrom images.models import Image\nimages_by_popularity = Image.objects.annotate(\n    total_likes=Count('users_like')\n).order_by('-total_likes') \n```", "```py\nclass Image(models.Model):\n    # ...\n **total_likes = models.PositiveIntegerField(default=****0****)**\nclass Meta:\n        indexes = [\n            models.Index(fields=['-created']),\n **models.Index(fields=[****'-total_likes'****]),**\n        ]\n        ordering = ['-created'] \n```", "```py\npython manage.py makemigrations images \n```", "```py\nMigrations for 'images':\n  images/migrations/0002_image_total_likes_and_more.py\n    - Add field total_likes to image\n    - Create index images_imag_total_l_0bcd7e_idx on field(s) -total_likes of model image \n```", "```py\npython manage.py migrate images \n```", "```py\nApplying images.0002_image_total_likes_and_more... OK \n```", "```py\nfrom django.db.models.signals import m2m_changed\nfrom django.dispatch import receiver\nfrom .models import Image\n@receiver(m2m_changed, sender=Image.users_like.through)\ndef users_like_changed(sender, instance, **kwargs):\n    instance.total_likes = instance.users_like.count()\n    instance.save() \n```", "```py\nfrom django.apps import AppConfig\nclass ImagesConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'images'\n**def****ready****(****self****):**\n**# import signal handlers**\n**import** **images.signals** \n```", "```py\npython manage.py runserver \n```", "```py\nfrom django.db.models import Count\nimages_by_popularity = Image.objects.annotate(\n    likes=Count('users_like')\n).order_by('-likes') \n```", "```py\nimages_by_popularity = Image.objects.order_by('-total_likes') \n```", "```py\npython manage.py shell \n```", "```py\n>>> from images.models import Image\n>>> for image in Image.objects.all():\n...    image.total_likes = image.users_like.count()\n...    image.save() \n```", "```py\npython -m pip install django-debug-toolbar==4.3.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'debug_toolbar'****,**\n# ...\n] \n```", "```py\nMIDDLEWARE = [\n**'debug_toolbar.middleware.DebugToolbarMiddleware'****,**\n'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] \n```", "```py\nINTERNAL_IPS = [\n    '127.0.0.1',\n] \n```", "```py\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('account/', include('account.urls')),\n    path(\n        'social-auth/',\n        include('social_django.urls', namespace='social')\n    ),\n    path('images/', include('images.urls', namespace='images')),\n **path(****'__debug__/'****, include(****'debug_toolbar.urls'****)),**\n] \n```", "```py\npython manage.py runserver \n```", "```py\nif DEBUG:\n    import mimetypes\n    mimetypes.add_type('application/javascript', '.js', True)\n    mimetypes.add_type('text/css', '.css', True) \n```", "```py\npython manage.py debugsqlshell \n```", "```py\n>>> from images.models import Image\n>>> Image.objects.get(id=1) \n```", "```py\nSELECT \"images_image\".\"id\",\n       \"images_image\".\"user_id\",\n       \"images_image\".\"title\",\n       \"images_image\".\"slug\",\n       \"images_image\".\"url\",\n       \"images_image\".\"image\",\n       \"images_image\".\"description\",\n       \"images_image\".\"created\",\n       \"images_image\".\"total_likes\"\nFROM \"images_image\"\nWHERE \"images_image\".\"id\" = 1\nLIMIT 21 [0.44ms]\n<Image: Django and Duke> \n```", "```py\ndocker pull redis:7.2.4 \n```", "```py\ndocker run -it --rm --name redis -p 6379:6379 redis:7.2.4 \n```", "```py\n# Server initialized\n* Ready to accept connections \n```", "```py\ndocker exec -it redis sh \n```", "```py\n# \n```", "```py\n# redis-cli \n```", "```py\n127.0.0.1:6379> \n```", "```py\n127.0.0.1:6379> SET name \"Peter\"\nOK \n```", "```py\n127.0.0.1:6379> GET name\n\"Peter\" \n```", "```py\n127.0.0.1:6379> EXISTS name\n(integer) 1 \n```", "```py\n127.0.0.1:6379> GET name\n\"Peter\"\n127.0.0.1:6379> EXPIRE name 2\n(integer) 1 \n```", "```py\n127.0.0.1:6379> GET name\n(nil) \n```", "```py\n127.0.0.1:6379> SET total 1\nOK\n127.0.0.1:6379> DEL total\n(integer) 1\n127.0.0.1:6379> GET total\n(nil) \n```", "```py\npython -m pip install redis==5.0.4 \n```", "```py\npython manage.py shell \n```", "```py\n>>> import redis\n>>> r = redis.Redis(host='localhost', port=6379, db=0) \n```", "```py\n>>> r.set('foo', 'bar')\nTrue \n```", "```py\n>>> r.get('foo')\nb'bar' \n```", "```py\nREDIS_HOST = 'localhost'\nREDIS_PORT = 6379\nREDIS_DB = 0 \n```", "```py\nimport redis\nfrom django.conf import settings\n# connect to redis\nr = redis.Redis(\n    host=settings.REDIS_HOST,\n    port=settings.REDIS_PORT,\n    db=settings.REDIS_DB\n) \n```", "```py\ndef image_detail(request, id, slug):\n    image = get_object_or_404(Image, id=id, slug=slug)\n    # increment total image views by 1\n **total_views = r.incr(****f'image:****{image.****id****}****:views'****)**\nreturn render(\n        request,\n        'images/image/detail.html',\n        {\n            'section': 'images',\n            'image': image**,**\n**'total_views'****: total_views**\n        }\n    ) \n```", "```py\n...\n<div class=\"image-info\">\n  <div>\n    <span class=\"count\">\n      <span class=\"total\">{{ total_likes }}</span>\n      like{{ total_likes|pluralize }}\n    </span>\n **<span** **class****=****\"count\"****>**\n **{{ total_views }} view{{ total_views|pluralize }}**\n **</span>**\n    <a href=\"#\" data-id=\"{{ image.id }}\" data-action=\"{% if request.user in users_like %}un{% endif %}like\"\nclass=\"like button\">\n      {% if request.user not in users_like %}\n        Like\n      {% else %}\n        Unlike\n      {% endif %}\n    </a>\n  </div>\n  {{ image.description|linebreaks }}\n</div>\n... \n```", "```py\npython manage.py runserver \n```", "```py\ndef image_detail(request, id, slug):\n    image = get_object_or_404(Image, id=id, slug=slug)\n    # increment total image views by 1\n    total_views = r.incr(f'image:{image.id}:views')\n**# increment image ranking by 1**\n **r.zincrby(****'image_ranking'****,** **1****, image.****id****)**\nreturn render(\n        request,\n        'images/image/detail.html',\n        {\n            'section': 'images',\n            'image': image,\n            'total_views': total_views\n        }\n    ) \n```", "```py\n@login_required\ndef image_ranking(request):\n    # get image ranking dictionary\n    image_ranking = r.zrange(\n        'image_ranking', 0, -1,\n        desc=True\n )[:10]\n    image_ranking_ids = [int(id) for id in image_ranking]\n    # get most viewed images\n    most_viewed = list(\n        Image.objects.filter(\n            id__in=image_ranking_ids\n        )\n    )\n    most_viewed.sort(key=lambda x: image_ranking_ids.index(x.id))\n    return render(\n        request,\n        'images/image/ranking.html',\n        {'section': 'images', 'most_viewed': most_viewed}\n    ) \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Images ranking{% endblock %}\n{% block content %}\n  <h1>Images ranking</h1>\n<ol>\n    {% for image in most_viewed %}\n      <li>\n<a href=\"{{ image.get_absolute_url }}\">\n          {{ image.title }}\n        </a>\n</li>\n    {% endfor %}\n  </ol>\n{% endblock %} \n```", "```py\nurlpatterns = [\n    path('create/', views.image_create, name='create'),\n    path('detail/<int:id>/<slug:slug>/',\n         views.image_detail, name='detail'),\n    path('like/', views.image_like, name='like'),\n    path('', views.image_list, name='list'),\n **path(****'ranking/'****, views.image_ranking, name=****'ranking'****),**\n] \n```"]