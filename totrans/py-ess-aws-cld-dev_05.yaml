- en: '5'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running Python Applications with PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to run a Lambda application with PyCharm. Running
    Lambda applications via PyCharm is both useful and practical during development
    as it consists of a code editor, debugger, and common development tools with a
    developer-friendly graphical user interface. These features of PyCharm help us
    to easily find bugs in our code.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing the AWS Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the AWS Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a sample Lambda function in AWS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running an AWS Lambda function using the AWS Toolkit
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing the AWS Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will install the AWS Toolkit in PyCharm. The AWS Toolkit
    is an extension for PyCharm to develop, debug, and deploy your applications for
    AWS. Let’s get to it:'
  prefs: []
  type: TYPE_NORMAL
- en: Open PyCharm on your computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open **Preferences** from the **PyCharm** dropdown and select **Plugins**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.1_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.1 – Preferences
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `AWS Toolkit` in the search area and click **Install**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.2_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.2 — Install the AWS Toolkit
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, the IDE will ask you to restart it. Click the **Restart**
    **IDE** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.3_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.3 – Restart the IDE
  prefs: []
  type: TYPE_NORMAL
- en: We have installed the AWS Toolkit in PyCharm. As the next step, we are going
    to configure the credentials for our AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the AWS Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to configure the AWS Toolkit in order to connect it to our AWS
    account. We will start by setting the credentials for our AWS account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'After restarting the IDE, you will see the text **AWS: No credentials selected**
    at the bottom-right of the page. Click this text:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.4_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 5.4 – AWS: No credentials selected'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking it, you will see the **AWS Connection Settings** menu appear.
    We are now going to configure the credentials. In order for the IDE to connect
    to AWS, we need to provide the AWS access key and secret key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.5_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.5 – Click Region
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous chapter, [*Chapter 4*](B19195_04.xhtml#_idTextAnchor006), *Running
    Python Applications on EC2*, we created an S3User via the IAM service. For our
    current use case, we follow the same steps in order to create a user that has
    Lambda access:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the IAM console, add a user with the name `ProgrammaticUser` and click **Next:
    Permissions**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.6_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.6 – Add user
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next panel, select **AWSLambda_FullAccess** and proceed to create a
    new user. The steps are the same as those we used to create the user in the previous
    chapter. Click **Next: Tags** and proceed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.7_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.7 – Add permission
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now provide the access key ID and secret access key for the AWS connection
    setup. Open PyCharm again and click **Edit AWS** **Credential file(s)**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.8_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.8 – Edit credentials
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Create** button on the following dialog window that appears:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.9_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.9 – Create the credential file
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click **Create**, you will be presented with a file in which you can
    enter the credentials. Place the access key ID and secret access key in the file
    and save it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.10 – Edit the credential file
  prefs: []
  type: TYPE_NORMAL
- en: We have created the AWS credentials and adjusted them in the PyCharm. As a next
    step, we are ready to create a Lambda function.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a sample Lambda function in AWS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this step, we are going to create a Lambda function that reads and prints
    a file from S3\. In the previous chapter, we learned how to create the S3 bucket
    and Lambda function. Hence, we keep the explanation short here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We are going to copy a sample file to the S3 bucket:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.11 – File in S3
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Lambda function that reads the file from S3\. I’ve called the Lambda
    function `FileProcessing`; however, you can give it any name that you prefer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.12 – Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the Lambda is created, we paste the code to Lambda from the GitHub link
    under the image. In the code block, we are going to implement a simple function
    to read the content of the S3 bucket and print it. You can retrieve the code block
    from the GitHub page that I have shared after *Figure 5**.13*. Broadly speaking,
    the `s3.get_object` method reads the file with the given parameters of `bucket`
    and `key`. Once you have a file stored in S3, the content is under the `Body`
    JSON file and the final step is to print the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.13 – Code in Lambda
  prefs: []
  type: TYPE_NORMAL
- en: 'The following GitHub link consists of the code block for the S3 Reader application:
    [https://github.com/PacktPublishing/Python-Essentials-for-AWS-Cloud-Developers/blob/main/S3Reader.py](https://github.com/PacktPublishing/Python-Essentials-for-AWS-Cloud-Developers/blob/main/S3Reader.py).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Test** button in order to check whether the Lambda function is
    running. When you click the **Test** button the first time, you need to configure
    the sample event:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.14a_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (a)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_5.14b_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (b)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 5.14 – Configure and test the Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: We have created the Lambda function. In the next section, we are going to run
    this function within PyCharm via the AWS Toolkit.
  prefs: []
  type: TYPE_NORMAL
- en: Running an AWS Lambda function using the AWS Toolkit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to run our Lambda function within PyCharm. Let’s
    follow the steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **AWS Toolkit** on the left side of PyCharm and you will be able to see
    the Lambda functions that are defined in the AWS Lambda service. Seeing this means
    that the connection we configured works:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.15 – Open the AWS Toolkit menu
  prefs: []
  type: TYPE_NORMAL
- en: In the list, we can see the functions that we created in the **us-east-2** region.
    We are now ready to run the Lambda function that we created in the previous section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Right-click **FileProcessing** and, on the resulting menu, click the **Run
    ‘[Remote]** **FileProcess...’** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_5.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.16 – Run the function
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click the link, the AWS Toolkit will run the Lambda function via PyCharm:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_5.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 5.17 – Logs of the function
  prefs: []
  type: TYPE_NORMAL
- en: After running the function, some Lambda logs will appear in PyCharm. As you
    can see, this makes it easier to develop Python applications for AWS. You can
    test this from your local machine without logging into the AWS Management Console.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install and use the AWS Toolkit within PyCharm.
    It is always helpful when you implement and deploy AWS services within PyCharm
    in a practical way. AWS Toolkit has AWS services integration; therefore, instead
    of using the AWS Management Console, you can use PyCharm where it is installed
    on the local machine. In the following chapter, we will take a look at how to
    deploy a Python application to Elastic Beanstalk.
  prefs: []
  type: TYPE_NORMAL
