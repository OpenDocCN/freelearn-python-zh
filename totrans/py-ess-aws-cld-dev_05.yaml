- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Running Python Applications with PyCharm
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 PyCharm 运行 Python 应用程序
- en: In this chapter, we are going to run a Lambda application with PyCharm. Running
    Lambda applications via PyCharm is both useful and practical during development
    as it consists of a code editor, debugger, and common development tools with a
    developer-friendly graphical user interface. These features of PyCharm help us
    to easily find bugs in our code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 PyCharm 运行 Lambda 应用程序。在开发过程中，通过 PyCharm 运行 Lambda 应用程序既有用又实用，因为它包含代码编辑器、调试器和具有开发者友好的图形用户界面的常用开发工具。PyCharm
    的这些功能帮助我们轻松地找到代码中的错误。
- en: 'This chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Installing the AWS Toolkit
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装 AWS Toolkit
- en: Configuring the AWS Toolkit
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 AWS Toolkit
- en: Creating a sample Lambda function in AWS
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 AWS 中创建一个示例 Lambda 函数
- en: Running an AWS Lambda function using the AWS Toolkit
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 AWS Toolkit 运行 AWS Lambda 函数
- en: Installing the AWS Toolkit
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 AWS Toolkit
- en: 'In this section, we will install the AWS Toolkit in PyCharm. The AWS Toolkit
    is an extension for PyCharm to develop, debug, and deploy your applications for
    AWS. Let’s get to it:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将安装 PyCharm 的 AWS Toolkit。AWS Toolkit 是 PyCharm 的一个扩展，用于开发、调试和部署您针对 AWS
    的应用程序。让我们开始吧：
- en: Open PyCharm on your computer.
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您的计算机上打开 PyCharm。
- en: 'Open **Preferences** from the **PyCharm** dropdown and select **Plugins**:'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**PyCharm**下拉菜单中打开**首选项**并选择**插件**：
- en: '![](img/Figure_5.1_B19195.jpg)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.1_B19195.jpg)'
- en: Figure 5.1 – Preferences
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – 首选项
- en: 'Type `AWS Toolkit` in the search area and click **Install**:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索区域输入 `AWS Toolkit` 并点击**安装**：
- en: '![](img/Figure_5.2_B19195.jpg)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.2_B19195.jpg)'
- en: Figure 5.2 — Install the AWS Toolkit
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.2 — 安装 AWS Toolkit
- en: 'After installation, the IDE will ask you to restart it. Click the **Restart**
    **IDE** button:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，IDE 将要求您重新启动它。点击**重新启动****IDE**按钮：
- en: '![](img/Figure_5.3_B19195.jpg)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.3_B19195.jpg)'
- en: Figure 5.3 – Restart the IDE
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.3 – 重新启动 IDE
- en: We have installed the AWS Toolkit in PyCharm. As the next step, we are going
    to configure the credentials for our AWS account.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已在 PyCharm 中安装了 AWS Toolkit。作为下一步，我们将配置我们 AWS 账户的凭证。
- en: Configuring the AWS Toolkit
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置 AWS Toolkit
- en: 'We are going to configure the AWS Toolkit in order to connect it to our AWS
    account. We will start by setting the credentials for our AWS account:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将配置 AWS Toolkit 以将其连接到我们的 AWS 账户。我们将首先设置我们 AWS 账户的凭证：
- en: 'After restarting the IDE, you will see the text **AWS: No credentials selected**
    at the bottom-right of the page. Click this text:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动 IDE 后，您将在页面右下角看到文本**AWS：未选择凭证**。点击此文本：
- en: '![](img/Figure_5.4_B19195.jpg)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.4_B19195.jpg)'
- en: 'Figure 5.4 – AWS: No credentials selected'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.4 – AWS：未选择凭证
- en: 'After clicking it, you will see the **AWS Connection Settings** menu appear.
    We are now going to configure the credentials. In order for the IDE to connect
    to AWS, we need to provide the AWS access key and secret key:'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击后，您将看到**AWS 连接设置**菜单出现。我们现在将配置凭证。为了让 IDE 连接到 AWS，我们需要提供 AWS 访问密钥和秘密密钥：
- en: '![](img/Figure_5.5_B19195.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.5_B19195.jpg)'
- en: Figure 5.5 – Click Region
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.5 – 点击区域
- en: 'In the previous chapter, [*Chapter 4*](B19195_04.xhtml#_idTextAnchor006), *Running
    Python Applications on EC2*, we created an S3User via the IAM service. For our
    current use case, we follow the same steps in order to create a user that has
    Lambda access:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章[*第 4 章*](B19195_04.xhtml#_idTextAnchor006)，*在 EC2 上运行 Python 应用程序*中，我们通过
    IAM 服务创建了一个 S3User。对于我们的当前用例，我们将遵循相同的步骤来创建一个具有 Lambda 访问权限的用户：
- en: 'In the IAM console, add a user with the name `ProgrammaticUser` and click **Next:
    Permissions**:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 IAM 控制台中，添加一个名为 `ProgrammaticUser` 的用户并点击**下一步：权限**：
- en: '![](img/Figure_5.6_B19195.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.6_B19195.jpg)'
- en: Figure 5.6 – Add user
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.6 – 添加用户
- en: 'In the next panel, select **AWSLambda_FullAccess** and proceed to create a
    new user. The steps are the same as those we used to create the user in the previous
    chapter. Click **Next: Tags** and proceed:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一个面板中，选择**AWSLambda_FullAccess**并继续创建新用户。步骤与我们在上一章中创建用户时使用的步骤相同。点击**下一步：标签**并继续：
- en: '![](img/Figure_5.7_B19195.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.7_B19195.jpg)'
- en: Figure 5.7 – Add permission
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.7 – 添加权限
- en: 'We will now provide the access key ID and secret access key for the AWS connection
    setup. Open PyCharm again and click **Edit AWS** **Credential file(s)**:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将提供 AWS 连接设置的访问密钥 ID 和秘密访问密钥。再次打开 PyCharm 并点击**编辑 AWS****凭证文件**：
- en: '![](img/Figure_5.8_B19195.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.8_B19195.jpg)'
- en: Figure 5.8 – Edit credentials
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.8 – 编辑凭证
- en: 'Click the **Create** button on the following dialog window that appears:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在随后出现的对话框中点击**创建**按钮：
- en: '![](img/Figure_5.9_B19195.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.9_B19195.jpg)'
- en: Figure 5.9 – Create the credential file
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.9 – 创建凭证文件
- en: 'Once you click **Create**, you will be presented with a file in which you can
    enter the credentials. Place the access key ID and secret access key in the file
    and save it:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您点击 **创建**，您将看到一个文件，您可以在其中输入凭证。将访问密钥 ID 和秘密访问密钥放入文件并保存：
- en: '![](img/Figure_5.10_B19195.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.10_B19195.jpg)'
- en: Figure 5.10 – Edit the credential file
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.10 – 编辑凭证文件
- en: We have created the AWS credentials and adjusted them in the PyCharm. As a next
    step, we are ready to create a Lambda function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了 AWS 凭证并在 PyCharm 中进行了调整。作为下一步，我们准备创建 Lambda 函数。
- en: Creating a sample Lambda function in AWS
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 AWS 中创建一个示例 Lambda 函数
- en: 'In this step, we are going to create a Lambda function that reads and prints
    a file from S3\. In the previous chapter, we learned how to create the S3 bucket
    and Lambda function. Hence, we keep the explanation short here:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一步，我们将创建一个 Lambda 函数，用于从 S3 读取并打印文件。在上一章中，我们学习了如何创建 S3 存储桶和 Lambda 函数。因此，在这里我们简要说明：
- en: 'We are going to copy a sample file to the S3 bucket:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把一个示例文件复制到 S3 存储桶：
- en: '![](img/Figure_5.11_B19195.jpg)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.11_B19195.jpg)'
- en: Figure 5.11 – File in S3
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.11 – S3 中的文件
- en: 'Create a Lambda function that reads the file from S3\. I’ve called the Lambda
    function `FileProcessing`; however, you can give it any name that you prefer:'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个从 S3 读取文件的 Lambda 函数。我已经将其命名为 `FileProcessing`；然而，您可以根据自己的喜好给它起任何名字：
- en: '![](img/Figure_5.12_B19195.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.12_B19195.jpg)'
- en: Figure 5.12 – Lambda function
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.12 – Lambda 函数
- en: 'Once the Lambda is created, we paste the code to Lambda from the GitHub link
    under the image. In the code block, we are going to implement a simple function
    to read the content of the S3 bucket and print it. You can retrieve the code block
    from the GitHub page that I have shared after *Figure 5**.13*. Broadly speaking,
    the `s3.get_object` method reads the file with the given parameters of `bucket`
    and `key`. Once you have a file stored in S3, the content is under the `Body`
    JSON file and the final step is to print the content:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Lambda 函数创建完成后，我们将从图片下方的 GitHub 链接粘贴代码到 Lambda 中。在代码块中，我们将实现一个简单的函数来读取 S3 存储桶的内容并打印出来。您可以从我分享的
    *Figure 5**.13* 后的 GitHub 页面获取代码块。总的来说，`s3.get_object` 方法使用 `bucket` 和 `key` 的给定参数读取文件。一旦您在
    S3 中存储了文件，内容就在 `Body` JSON 文件中，最后一步是打印内容：
- en: '![](img/Figure_5.13_B19195.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.13_B19195.jpg)'
- en: Figure 5.13 – Code in Lambda
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.13 – Lambda 中的代码
- en: 'The following GitHub link consists of the code block for the S3 Reader application:
    [https://github.com/PacktPublishing/Python-Essentials-for-AWS-Cloud-Developers/blob/main/S3Reader.py](https://github.com/PacktPublishing/Python-Essentials-for-AWS-Cloud-Developers/blob/main/S3Reader.py).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 GitHub 链接包含 S3 读取应用程序的代码块：[https://github.com/PacktPublishing/Python-Essentials-for-AWS-Cloud-Developers/blob/main/S3Reader.py](https://github.com/PacktPublishing/Python-Essentials-for-AWS-Cloud-Developers/blob/main/S3Reader.py)。
- en: 'Click the **Test** button in order to check whether the Lambda function is
    running. When you click the **Test** button the first time, you need to configure
    the sample event:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **测试** 按钮以检查 Lambda 函数是否正在运行。当您第一次点击 **测试** 按钮时，需要配置示例事件：
- en: '![](img/Figure_5.14a_B19195.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.14a_B19195.jpg)'
- en: (a)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: (a)
- en: '![](img/Figure_5.14b_B19195.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.14b_B19195.jpg)'
- en: (b)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: (b)
- en: Figure 5.14 – Configure and test the Lambda function
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.14 – 配置和测试 Lambda 函数
- en: We have created the Lambda function. In the next section, we are going to run
    this function within PyCharm via the AWS Toolkit.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了 Lambda 函数。在下一节中，我们将通过 AWS Toolkit 在 PyCharm 中运行此函数。
- en: Running an AWS Lambda function using the AWS Toolkit
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 AWS Toolkit 运行 AWS Lambda 函数
- en: 'In this section, we are going to run our Lambda function within PyCharm. Let’s
    follow the steps:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过 PyCharm 运行我们的 Lambda 函数。让我们按照以下步骤进行：
- en: 'Open **AWS Toolkit** on the left side of PyCharm and you will be able to see
    the Lambda functions that are defined in the AWS Lambda service. Seeing this means
    that the connection we configured works:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 的左侧打开 **AWS Toolkit**，您将能够看到 AWS Lambda 服务中定义的 Lambda 函数。看到这一点意味着我们配置的连接是有效的：
- en: '![](img/Figure_5.15_B19195.jpg)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.15_B19195.jpg)'
- en: Figure 5.15 – Open the AWS Toolkit menu
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.15 – 打开 AWS Toolkit 菜单
- en: In the list, we can see the functions that we created in the **us-east-2** region.
    We are now ready to run the Lambda function that we created in the previous section.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中，我们可以看到我们在 **us-east-2** 区域创建的函数。我们现在准备运行上一节中创建的 Lambda 函数。
- en: 'Right-click **FileProcessing** and, on the resulting menu, click the **Run
    ‘[Remote]** **FileProcess...’** button:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**FileProcessing**，然后在出现的菜单中点击**运行‘[远程]** **FileProcess...’**按钮：
- en: '![](img/Figure_5.16_B19195.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.16_B19195.jpg)'
- en: Figure 5.16 – Run the function
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.16 – 运行函数
- en: 'When you click the link, the AWS Toolkit will run the Lambda function via PyCharm:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 当您点击链接时，AWS Toolkit将通过PyCharm运行Lambda函数：
- en: '![](img/Figure_5.17_B19195.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_5.17_B19195.jpg)'
- en: Figure 5.17 – Logs of the function
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.17 – 函数日志
- en: After running the function, some Lambda logs will appear in PyCharm. As you
    can see, this makes it easier to develop Python applications for AWS. You can
    test this from your local machine without logging into the AWS Management Console.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 函数运行后，PyCharm中会出现一些Lambda日志。如您所见，这使得开发AWS的Python应用程序变得更加容易。您可以从本地机器测试此功能，而无需登录AWS管理控制台。
- en: Summary
  id: totrans-78
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install and use the AWS Toolkit within PyCharm.
    It is always helpful when you implement and deploy AWS services within PyCharm
    in a practical way. AWS Toolkit has AWS services integration; therefore, instead
    of using the AWS Management Console, you can use PyCharm where it is installed
    on the local machine. In the following chapter, we will take a look at how to
    deploy a Python application to Elastic Beanstalk.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何在PyCharm中安装和使用AWS Toolkit。当你在PyCharm中以实际的方式实现和部署AWS服务时，这总是很有帮助。AWS
    Toolkit具有AWS服务集成功能；因此，您无需使用AWS管理控制台，可以直接在本地机器上使用PyCharm。在下一章中，我们将探讨如何将Python应用程序部署到Elastic
    Beanstalk。
