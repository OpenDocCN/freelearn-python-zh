["```py\nclass Wizard():\n\n    def __init__(self, src, rootdir):\n        self.choices = []\n        self.rootdir = rootdir\n        self.src = src\n\n    def preferences(self, command):\n        self.choices.append(command)\n\n    def execute(self):\n        for choice in self.choices:\n            if list(choice.values())[0]:\n                print(\"Copying binaries --\", self.src, \" to \", self.rootdir)\n            else:\n                print(\"No Operation\")\n\nif __name__ == '__main__':\n  ## Client code\n  wizard = Wizard('python3.5.gzip', '/usr/bin/')\n  ## Users chooses to install Python only\n  wizard.preferences({'python':True})\n  wizard.preferences({'java':False})\n  wizard.execute()\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass Command(metaclass=ABCMeta):\n    def __init__(self, recv):\n        self.recv = recv\n\n    def execute(self):\n        pass\n\nclass ConcreteCommand(Command):\n    def __init__(self, recv):\n        self.recv = recv\n\n    def execute(self):\n        self.recv.action()\n\nclass Receiver:\n    def action(self):\n        print(\"Receiver Action\")\n\nclass Invoker:\n    def command(self, cmd):\n        self.cmd = cmd\n\n    def execute(self):\n        self.cmd.execute()\n\nif __name__ == '__main__':\n    recv = Receiver()\n    cmd = ConcreteCommand(recv)\n    invoker = Invoker()\n    invoker.command(cmd)\n    invoker.execute()\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass Order(metaclass=ABCMeta):\n\n    @abstractmethod\n    def execute(self):\n        pass\n```", "```py\nclass BuyStockOrder(Order):\n    def __init__(self, stock):\n        self.stock = stock\n\n    def execute(self):\n        self.stock.buy()\n\nclass SellStockOrder(Order):\n    def __init__(self, stock):\n        self.stock = stock\n\n    def execute(self):\n        self.stock.sell()\n```", "```py\nclass StockTrade:\n    def buy(self):\n        print(\"You will buy stocks\")\n\n    def sell(self):\n        print(\"You will sell stocks\")\n```", "```py\nclass Agent:\n    def __init__(self):\n        self.__orderQueue = []\n\n    def placeOrder(self, order):\n        self.__orderQueue.append(order)\n        order.execute()\n```", "```py\nif __name__ == '__main__':\n    #Client\n    stock = StockTrade()\n    buyStock = BuyStockOrder(stock)\n    sellStock = SellStockOrder(stock)\n\n    #Invoker\n    agent = Agent()\n    agent.placeOrder(buyStock)\n    agent.placeOrder(sellStock)\n```"]