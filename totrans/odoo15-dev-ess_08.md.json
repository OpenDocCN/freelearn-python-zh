["```py\n$ python3 library.py add \"Moby-Dick\"\n$ python3 library.py list \"moby\"\n3 Moby-Dick\n$ python3 library.py set-title 3 \"Moby Dick\"\n```", "```py\n$ sudo apt-get install python3 python3-pip\n```", "```py\n>>> from xmlrpc import client\n>>> srv = \"http://localhost:8069\"\n>>> common = client.ServerProxy(\"%s/xmlrpc/2/common\" % srv)\n>>> common.version()\n{'server_version': '15.0', 'server_version_info': [15, 0, 0, 'final', 0, ''], 'server_serie': '15.0', 'protocol_version': 1}\n```", "```py\n>>> db, user, password = \"library\", \"admin\", \"admin\"\n>>> uid = common.authenticate(db, user, password, {})\n>>> print(uid)\n2\n```", "```py\n>>> api = xmlrpc.client.ServerProxy('%s/xmlrpc/2/object' % srv)\n>>> api.execute_kw(db, uid, password, \"res.users\", \"search_count\", [[]])\n3\n```", "```py\n>>> api = xmlrpc.client.ServerProxy(\"%s/xmlrpc/2/object\" % srv)\n>>> api.execute_kw(db, uid, password, \"res.users\", \"read\", [2, [\"login\", \"name\", \"company_id\"]])\n[{'id': 2, 'login': 'admin', 'name': 'Mitchell Admin', 'company_id': [1, 'YourCompany']}]\n```", "```py\n>>> domain = [(\"login\", \"=\", \"admin\")]\n>>> api.execute_kw(db, uid, password, \"res.users\", \"search\", [domain])\n[2]\n```", "```py\n>>> api.execute_kw(db, uid, password, \"res.users\", \"search_read\", [domain, [\"login\", \"name\"]])\n[{'id': 2, 'login': 'admin', 'name': 'Mitchell Admin'}]\n```", "```py\n>>> api.execute_kw(db, uid, password, \"res.users\", \"search_read\", [], {\"domain\": domain, \"fields\": [\"login\", \"name\"]})\n```", "```py\n>>> x = api.execute_kw(db, uid, password, \"res.partner\", \"create\", \n[{'name': 'Packt Pub'}])\n>>> print(x)\n49\n>>> api.execute_kw(db, uid, password, \"res.partner\", \"write\", \n[[x], {'name': 'Packt Publishing'}]) \nTrue\n>>> api.execute_kw(db, uid, password, \"res.partner\", \"read\", \n[[x], [\"name\"]])\n[{'id': 49, 'name': 'Packt Publishing'}]\n>>> api.execute_kw(db, uid, password, \"res.partner\", \"unlink\", [[x]])\nTrue\n>>> api.execute_kw(db, uid, password, \"res.partner\", \"read\", [[x]])\n[]\n```", "```py\nimport xmlrpc.client\nclass LibraryAPI(): \n    def __init__(self, host, port, db, user, pwd):\n        common = xmlrpc.client.ServerProxy(\n            \"http://%s:%d/xmlrpc/2/common\" % (host, port))\n        self.api = xmlrpc.client.ServerProxy(\n            \"http://%s:%d/xmlrpc/2/object\" % (host, port))\n        self.uid = common.authenticate(db, user, pwd, {})\n        self.pwd = pwd\n        self.db = db\n        self.model = \"library.book\"\n```", "```py\n    def _execute(self, method, arg_list, kwarg_dict=None): \n        return self.api.execute_kw( \n            self.db, self.uid, self.pwd, self.model,\n            method, arg_list, kwarg_dict or {})\n```", "```py\n    def search_read(self, title=None):\n        domain = [(\"name\", \"ilike\", title)] if title else \n                   [] \n        fields = [\"id\", \"name\"]\n        return self._execute(\"search_read\", [domain, \n          fields])\n```", "```py\n    def create(self, title):\n        vals = {\"name\": title}\n        return self._execute(\"create\", [vals])\n```", "```py\n    def write(self, id, title): \n        vals = {\"name\": title} \n        return self._execute(\"write\", [[id], vals])\n```", "```py\n    def unlink(self, id): \n        return self._execute(\"unlink\", [[id]])\n```", "```py\nif __name__ == \"__main__\": \n    # Sample test configurations \n    host, port, db = \"localhost\", 8069, \"library\" \n    user, pwd = \"admin\", \"admin\"\n    api = LibraryAPI(host, port, db, user, pwd) \n    from pprint import pprint \n    pprint(api.search_read())\n```", "```py\n$ python3 library_xmlrpc.py\n[{'id': 1, 'name': 'Odoo Development Essentials 11'},\n {'id': 2, 'name': 'Odoo 11 Development Cookbook'},\n {'id': 3, 'name': 'Brave New World'}]\n```", "```py\nfrom argparse import ArgumentParser\nfrom library_xmlrpc import LibraryAPI\n```", "```py\nparser = ArgumentParser()\nparser.add_argument(\n    \"command\",\n    choices=[\"list\", \"add\", \"set\", \"del\"])\nparser.add_argument(\"params\", nargs=\"*\")  # optional args\nargs = parser.parse_args()\n```", "```py\nhost, port, db = \"localhost\", 8069, \"library\"\nuser, pwd = \"admin\", \"admin\"\napi = LibraryAPI(host, port, db, user, pwd)\n```", "```py\nif args.command == \"list\":\n    title = args.params[:1]\n    books = api.search_read(title)\n    for book in books:\n        print(\"%(id)d %(name)s\" % book)\n```", "```py\nif args.command == \"add\":\n    title = args.params[0]\n    book_id = api.create(title)\n    print(\"Book added with ID %d for title %s.\" % (\n      book_id, title))\n```", "```py\nif args.command == \"set\":\n    if len(args.params) != 2:\n        print(\"set command requires a Title and ID.\")\n    else:\n        book_id, title = int(args.params[0]), \n          args.params[1]\n        api.write(book_id, title)\n        print(\"Title of Book ID %d set to %s.\" % (book_id, \n          title))\n```", "```py\nif args.command == \"del\":\n    book_id = int(args.params[0])\n    api.unlink(book_id)\n    print(\"Book with ID %s was deleted.\" % book_id)\n```", "```py\n$ pip3 install odoorpc\n```", "```py\nimport odoorpc\nclass LibraryAPI():\n    def __init__(self, host, port, db, user, pwd):\n        self.api = odoorpc.ODOO(host, port=port)\n        self.api.login(db, user, pwd)\n        self.uid = self.api.env.uid\n        self.model = \"library.book\"\n        self.Model = self.api.env[self.model]\n    def _execute(self, method, arg_list, kwarg_dict=None):\n        return self.api.execute(\n            self.model,\n            method, *arg_list, **kwarg_dict)\n```", "```py\n    def search_read(self, title=None):\n        domain = [(\"name\", \"ilike\", title)] if title else \n                  []\n        fields = [\"id\", \"name\"]\n        return self.Model.search_read(domain, fields)\n    def create(self, title):\n        vals = {\"name\": title}\n        return self.Model.create(vals)\n    def write(self, id, title):\n        vals = {\"name\": title}\n        self.Model.write(id, vals)\n    def unlink(self, id):\n        return self.Model.unlink(id)\n```"]