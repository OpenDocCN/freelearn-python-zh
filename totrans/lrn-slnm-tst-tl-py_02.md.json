["```py\nimport unittest\nfrom selenium import webdriver\n\nclass SearchTest(unittest.TestCase):\n```", "```py\nimport unittest\nfrom selenium import webdriver\n\nclass SearchTests(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n```", "```py\nimport unittest\nfrom selenium import webdriver\n\nclass SearchTests(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_search_by_category(self):\n        # get the search textbox\n        self.search_field = self.driver.find_element_by_name(\"q\")\n        self.search_field.clear()\n\n        # enter search keyword and submit\n        self.search_field.send_keys(\"phones\")\n        self.search_field.submit()\n\n        # get all the anchor elements which have product names         # displayed currently on result page using         # find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath          (\"//h2[@class='product-name']/a\")\n        self.assertEqual(2, len(products))\n\n```", "```py\nimport unittest\nfrom selenium import webdriver\n\nclass SearchTests(unittest.TestCase):\n    def setUp(self):\n        # create a new Firefox session\n        self.driver = webdriver.Firefox()\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n        # navigate to the application home page\n        self.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_search_by_category(self):\n        # get the search textbox\n        self.search_field = self.driver.find_element_by_name(\"q\")\n        self.search_field.clear()\n\n        # enter search keyword and submit\n        self.search_field.send_keys(\"phones\")\n        self.search_field.submit()\n\n        # get all the anchor elements which have product names # displayed currently on result page using # find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath (\"//h2[@class='product-name']/a\")\n        self.assertEqual(2, len(products))\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\n```", "```py\nif __name__ == '__main__':\n    unittest.main(verbosity=2)\n```", "```py\npython searchtests.py\n\n```", "```py\ndef test_search_by_name(self):\n    # get the search textbox\n    self.search_field = self.driver.find_element_by_name(\"q\")\n    self.search_field.clear()\n\n    # enter search keyword and submit\n    self.search_field.send_keys(\"salt shaker\")\n    self.search_field.submit()\n\n    # get all the anchor elements which have\n\t# product names displayed\n    # currently on result page using\n\t# find_elements_by_xpath method\n    products = self.driver.find_elements_by_xpath (\"//h2[@class='product-name']/a\")\n    self.assertEqual(1, len(products))\n```", "```py\nimport unittest\nfrom selenium import webdriver\n\nclass SearchTests(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # create a new Firefox session\n        cls.driver = webdriver.Firefox()\n        cls.driver.implicitly_wait(30)\n        cls.driver.maximize_window()\n\n        # navigate to the application home page\n        cls.driver.get(\"http://demo.magentocommerce.com/\")\n        cls.driver.title\n\n    def test_search_by_category(self):\n        # get the search textbox\n        self.search_field = self.driver.find_element_by_name(\"q\")\n        self.search_field.clear()\n\n        # enter search keyword and submit\n        self.search_field.send_keys(\"phones\")\n        self.search_field.submit()\n\n        # get all the anchor elements which have product names\n\t\t# displayed currently on result page using\n\t\t# find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n        self.assertEqual(2, len(products))\n\n    def test_search_by_name(self):\n        # get the search textbox\n        self.search_field = self.driver.find_element_by_name(\"q\")\n        self.search_field.clear()\n\n        # enter search keyword and submit\n        self.search_field.send_keys(\"salt shaker\")\n        self.search_field.submit()\n\n        # get all the anchor elements which have product names\n\t\t# displayed currently on result page using\n\t\t# find_elements_by_xpath method\n        products = self.driver.find_elements_by_xpath(\"//h2[@class='product-name']/a\")\n        self.assertEqual(1, len(products))\n\n    @classmethod\n    def tearDownClass(cls):\n        # close the browser window\n        cls.driver.quit()\n\n    if __name__ == '__main__':\n        unittest.main()\n\n```", "```py\nimport unittest\nfrom selenium import webdriver\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.by import By\nfrom __builtin__ import classmethod\n\nclass HomePageTest(unittest.TestCase):\n    @classmethod\n    def setUp(cls):\n        # create a new Firefox session \"\"\"\n        cls.driver = webdriver.Firefox()\n        cls.driver.implicitly_wait(30)\n        cls.driver.maximize_window()\n\n        # navigate to the application home page \"\"\"\n        cls.driver.get(\"http://demo.magentocommerce.com/\")\n\n    def test_search_field(self):\n        # check search field exists on Home page\n        self.assertTrue(self.is_element_present(By.NAME,\"q\"))\n\n    def test_language_option(self):\n        # check language options dropdown on Home page\n        self.assertTrue(self.is_element_present(By.ID,\"select-language\"))\n\n    def test_shopping_cart_empty_message(self):\n        # check content of My Shopping Cart block on Home page\n        shopping_cart_icon = \\\n            self.driver.find_element_by_css_selector(\"div.header-minicart span.icon\")\n        shopping_cart_icon.click()\n\n        shopping_cart_status = \\\n            self.driver.find_element_by_css_selector(\"p.empty\").text\n        self.assertEqual(\"You have no items in your shopping cart.\", shopping_cart_status)\n\n        close_button =  self.driver.find_element_by_css_selector(\"div.minicart-wrapper a.close\")\n        close_button.click()\n\n    @classmethod\n    def tearDown(cls):\n        # close the browser window\n        cls.driver.quit()\n\n    def is_element_present(self, how, what):\n        \"\"\"\n        Utility method to check presence of an element on page\n        :params how: By locator type\n        :params what: locator value\n        \"\"\"\n        try: self.driver.find_element(by=how, value=what)\n        except NoSuchElementException, e: return False\n        return True\n\n    if __name__ == '__main__':\n        unittest.main(verbosity=2)\n```", "```py\nimport unittest\nfrom searchtests import SearchTests\nfrom homepagetests import HomePageTest\n\n# get all tests from SearchProductTest and HomePageTest class\nsearch_tests = unittest.TestLoader().loadTestsFromTestCase(SearchTests)\nhome_page_tests = unittest.TestLoader().loadTestsFromTestCase(HomePageTest)\n\n# create a test suite combining search_test and home_page_test\nsmoke_tests = unittest.TestSuite([home_page_tests, search_tests])\n\n# run the suite\nunittest.TextTestRunner(verbosity=2).run(smoke_tests)\n```", "```py\npython smoketests.py\n\n```", "```py\nimport unittest\nimport HTMLTestRunner\nimport os\nfrom searchtests import SearchTests\nfrom homepagetests import HomePageTest\n\n# get the directory path to output report file\ndir = os.getcwd()\n\n# get all tests from SearchProductTest and HomePageTest class\nsearch_tests = unittest.TestLoader().loadTestsFromTestCase(SearchTests)\nhome_page_tests = unittest.TestLoader().loadTestsFromTestCase(HomePageTest)\n\n# create a test suite combining search_test and home_page_test\nsmoke_tests = unittest.TestSuite([home_page_tests, search_tests])\n\n# open the report file\noutfile = open(dir + \"\\SmokeTestReport.html\", \"w\")\n\n# configure HTMLTestRunner options\nrunner = HTMLTestRunner.HTMLTestRunner(\n                 stream=outfile,\n                 title='Test Report',\n                 description='Smoke Tests'\n                 )\n\n# run the suite using HTMLTestRunner\nrunner.run(smoke_tests)\n```"]