- en: Chapter 32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Tips and Tricks with Data Structures
  prefs: []
  type: TYPE_NORMAL
- en: 32.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Since lists are handled with the same sequence, decision, and loop control structures
    that you learned about in previous chapters, there is no need to repeat all of
    that information here. However, what you will discover in this chapter is how
    to process each row or column of a two-dimensional list individually, how to solve
    problems that require the use of more than one list, how to create a two-dimensional
    list from a one-dimensional list (and vice versa), and some useful built-in list
    functions and methods that Python supports.
  prefs: []
  type: TYPE_NORMAL
- en: 32.2 Processing Each Row Individually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Processing each row individually means that every row is processed separately
    and the result of each row (which can be the sum, the average value, and so on)
    can be used individually for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose you have the following 4 × 5 list.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter32-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: Let's try to find the sum of each row individually. Both of the following approaches
    iterate through rows.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Creating an auxiliary list
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the program processes each row individually and creates an
    auxiliary list in which each element stores the sum of one row. This approach
    gives you much flexibility since you can use this new list later in your program
    for further processing. The auxiliary list total is shown on the right.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's write the corresponding code fragment. To more easily understand
    the process, the “from inner to outer” method is used. The following code fragment
    calculates the sum of the first row (row index 0) and stores the result in the
    element at position 0 of the auxiliary list total. Assume variable i contains
    the value 0.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: s += b[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: total[i] = s
  prefs: []
  type: TYPE_NORMAL
- en: This code fragment can equivalently be written as
  prefs: []
  type: TYPE_NORMAL
- en: total[i] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[i] += b[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: Now, nesting this code fragment in a for-loop that iterates for all rows results
    in the following.
  prefs: []
  type: TYPE_NORMAL
- en: total = [None] * ROWS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[i] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[i] += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The same result, however, can be achieved using the magic forces of Python!
    The code fragment is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: total = []
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in b:'
  prefs: []
  type: TYPE_NORMAL
- en: total.append(fsum(row))
  prefs: []
  type: TYPE_NORMAL
- en: Second approach – Just find it and process it.
  prefs: []
  type: TYPE_NORMAL
- en: This approach uses no auxiliary list; it just calculates and directly processes
    the sum. The code fragment is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: process total
  prefs: []
  type: TYPE_NORMAL
- en: What does process total mean? It depends on the given problem. It may just display
    the sum, it may calculate the average value of each individual row and display
    it, or it may use the sum for calculating even more complex mathematical expressions.
  prefs: []
  type: TYPE_NORMAL
- en: For instance, the following example calculates and displays the average value
    of each row of list b.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average = total / COLUMNS
  prefs: []
  type: TYPE_NORMAL
- en: print(average)
  prefs: []
  type: TYPE_NORMAL
- en: The same result, however, can be achieved using the magic forces of Python!
    The code fragment is as follows
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in b:'
  prefs: []
  type: TYPE_NORMAL
- en: total = fsum(row)
  prefs: []
  type: TYPE_NORMAL
- en: print(total / COLUMNS)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 32.2-1 Finding the Average Value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are 20 students and each one of them has received their grades for 10
    lessons. Write a Python program that prompts the user to enter the grades of each
    student for all lessons and then calculates and displays, for each student, all
    average values that are greater than 89.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Since you've learned two approaches for processing each row individually, let's
    use them both.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Creating an auxiliary list
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the program processes each row individually and creates an
    auxiliary list in which each element stores the average value of one row. The
    two required lists are shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-03.png)'
  prefs: []
  type: TYPE_IMG
- en: After the list average is created, the program can find and display all average
    values that are greater than 89\. The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.2-1a'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 20
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 10
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print("For student No.", i + 1, "...")
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Create list average. Iterate through rows'
  prefs: []
  type: TYPE_NORMAL
- en: average = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: average[i] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: average[i] += grades[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average[i] /= LESSONS
  prefs: []
  type: TYPE_NORMAL
- en: '#Display all average values that are greater than 89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if average[i] > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(average[i])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Using Python's magic forces the auxiliary list average can also be created as
    shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.2-1b'
  prefs: []
  type: TYPE_NORMAL
- en: from math import fsum
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 20
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 10
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print("For student No.", i + 1, "...")
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Create list average. Iterate through rows'
  prefs: []
  type: TYPE_NORMAL
- en: average = []
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in grades:'
  prefs: []
  type: TYPE_NORMAL
- en: average.append(fsum(row) / LESSONS)
  prefs: []
  type: TYPE_NORMAL
- en: '#Display all average values that are greater than 89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if average[i] > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(average[i])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second approach – Just find it and display it!
  prefs: []
  type: TYPE_NORMAL
- en: This approach uses no auxiliary list; it just calculates and directly displays
    all average values that are greater than 89\. The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.2-1c'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 20
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 10
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print("For student No.", i + 1, "...")
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Calculate the average value of each row and directly display those who are
    greater than 89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: average = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: average += grades[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average /= LESSONS
  prefs: []
  type: TYPE_NORMAL
- en: 'if average > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(average)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Once again, using Python's magic forces and no auxiliary list, the Python program
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.2-1d'
  prefs: []
  type: TYPE_NORMAL
- en: from math import fsum
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 20
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 10
  prefs: []
  type: TYPE_NORMAL
- en: grades = []
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: grades.append([])
  prefs: []
  type: TYPE_NORMAL
- en: print("For student No.", i + 1, "...")
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i].append(int(input("enter grade for lesson No." + str(j + 1) + ": ")))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Calculate the average value of each row using Python''s magic forces!'
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in grades:'
  prefs: []
  type: TYPE_NORMAL
- en: average = fsum(row) / LESSONS
  prefs: []
  type: TYPE_NORMAL
- en: 'if average > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(average)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 32.3 Processing Each Column Individually
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Processing each column individually means that every column is processed separately
    and the result of each column (which can be the sum, the average value, and so
    on) can be used individually for further processing. Suppose you have the following
    4 × 5 list.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-04.png)'
  prefs: []
  type: TYPE_IMG
- en: As before, let's try to find the sum of each column individually. Yet again,
    there are two approaches that you can use. Both of these approaches iterate through
    columns.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Creating an auxiliary list
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the program processes each column individually and creates
    an auxiliary list in which each element stores the sum of one column. This approach
    gives you much flexibility since you can use this new list later in your program
    for further processing. The auxiliary list total is shown at the bottom.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-05.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, let's write the corresponding code fragment. To more easily understand
    the process, the “from inner to outer” method is used again. The following code
    fragment calculates the sum of the first column (column index 0) and stores the
    result in the element at position 0 of the auxiliary list total. Assume variable
    j contains the value 0.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: s += b[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: total[j] = s
  prefs: []
  type: TYPE_NORMAL
- en: This program can equivalently be written as
  prefs: []
  type: TYPE_NORMAL
- en: total[j] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[j] += b[i][j]
  prefs: []
  type: TYPE_NORMAL
- en: Now, nesting this code fragment in a for-loop that iterates for all columns
    results in the following.
  prefs: []
  type: TYPE_NORMAL
- en: total = [None] * COLUMNS
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[j] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[j] += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second approach – Just find it and process it.
  prefs: []
  type: TYPE_NORMAL
- en: This approach uses no auxiliary list; it just calculates and directly processes
    the sum. The code fragment is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: process total
  prefs: []
  type: TYPE_NORMAL
- en: Accordingly, the following code fragment calculates and displays the average
    value of each column.
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += b[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total / ROWS)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 32.3-1 Finding the Average Value
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are 10 students and each one of them has received their grades for five
    lessons. Write a Python program that prompts the user to enter the grades of each
    student for all lessons and then calculates and displays, for each lesson, all
    average values that are greater than 89.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Since you've learned two approaches for processing each column individually,
    let's use them both.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Creating an auxiliary list
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the program processes each column individually and creates
    an auxiliary list in which each element stores the average value of one column.
    The two required lists are shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-06.png)'
  prefs: []
  type: TYPE_IMG
- en: After the list average is created, the program can find and display all average
    values that are greater than 89\. The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.3-1a'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 10
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 5
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print("For student No.", i + 1, "...")
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Create list average. Iterate through columns'
  prefs: []
  type: TYPE_NORMAL
- en: average = [None] * LESSONS
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: average[j] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: average[j] += grades[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average[j] /= STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: '#Display all average values than are greater than 89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if average[j] > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(average[j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second approach – Just find it and display it!
  prefs: []
  type: TYPE_NORMAL
- en: This approach uses no auxiliary list; it just calculates and directly displays
    all average values that are greater than 89\. The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.3-1b'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 10
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 5
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print("For student No.", i + 1, "...")
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Calculate the average value of each column'
  prefs: []
  type: TYPE_NORMAL
- en: '#and directly display those who are greater than 89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: average = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: average += grades[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: average /= STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'if average > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(average)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 32.4 How to Use More Than One Data Structures in a Program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So far, every example or exercise has used just one list or one dictionary.
    But what if a problem requires you to use two lists, or one list and one dictionary,
    or one list and two dictionaries? Next you will find some exercises that show
    you how various data structures can be combined to tackle a variety of unique
    challenges.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 32.4-1 Using Three One-Dimensional Lists
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are 20 students and each one of them has received grades for two lessons.
    Write a Python program that prompts the user to enter the name and grades of each
    student for both lessons. The program must then find and display the names of
    all students who have grades greater than 89 for both lessons.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Following are the required lists containing some typical values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-07.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, there is a one-to-one correspondence between the elements in
    the list names and those in the lists gradesLesson1, and gradesLesson2\. The first
    of the twenty students is George, and he received grades of 95 and 92 for the
    two lessons. The name “George” is stored at index 0 of the list names, and at
    exactly the same index in the lists gradesLesson1 and gradesLesson2, his grades
    for the two lessons are stored. The next student (Anna) and her grades are stored
    at index 1 of the lists names, gradesLesson1, and gradesLesson2, respectively,
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.4-1'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 20
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: gradesLesson1 = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: gradesLesson2 = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[i] = input("Enter student name No" + str(i + 1) + ": ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'gradesLesson1[i] = int(input("Enter grade for lesson 1: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'gradesLesson2[i] = int(input("Enter grade for lesson 2: "))'
  prefs: []
  type: TYPE_NORMAL
- en: '#Display the names of those who have grades greater than 89 for both lessons'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if gradesLesson1[i] > 89 and gradesLesson2[i] > 89:'
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 32.4-2 Using a One-Dimensional List Along with a Two-Dimensional List
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are 10 students and each one of them has received their grades for five
    lessons. Write a Python program that prompts the user to enter the name of each
    student and the grades for all lessons and then calculates and displays the names
    of the students who have more than one grade greater than 89.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you could do what you did in the previous one. You could,
    for example, use a one-dimensional list to store the names of the students and
    five one-dimensional lists to store the grades for each student for each lesson.
    Not very convenient, but it could work. Obviously, when there are more than two
    grades, this is not the most suitable approach.
  prefs: []
  type: TYPE_NORMAL
- en: The best approach here is to use a one-dimensional list to store the names of
    the students and a two-dimensional list to store the grades for each student for
    each lesson.
  prefs: []
  type: TYPE_NORMAL
- en: There are actually two approaches. Which one to use depends clearly on you!
    If you decide that, in the two-dimensional list, the rows should refer to students
    and the columns should refer to lessons then you can use the first approach discussed
    below. If you decide that the rows should refer to lessons and the columns should
    refer to students then you can use the second approach that follows.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Rows for students, columns for lessons
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the two-dimensional list must have 10 rows, one for every
    student and 5 columns, one for every lesson. All other lists can be placed in
    relation to this two-dimensional list as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-08.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)The auxiliary list count will be created by the program
    and will store the number of grades for each student that are greater than 89.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how to read values and store them in the lists names and grades.
    One simple solution would be to use one for-loop for reading names, and then nested
    for-loops for reading grades. However, it may not be very practical for the user
    to first enter all names and then all grades. A more user-friendly approach would
    be to prompt the user to enter one student name and then all of their grades,
    then proceed to the next student name and their corresponding grades, and so on.
    The solution is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.4-2a'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 10
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 5
  prefs: []
  type: TYPE_NORMAL
- en: '#Read names and grades all together. Iterate through rows in list grades'
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[i] = input("Enter name for student No." + str(i + 1) + ": ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("Enter grade No." + str(j + 1) + " for " + names[i]
    + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Create list count. Iterate through rows'
  prefs: []
  type: TYPE_NORMAL
- en: count = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: count[i] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if grades[i][j] > 89:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count[i] += 1
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Displays the names of the students who have more than one grade greater than
    89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if count[i] > 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second approach – Rows for lessons, columns for students
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, the two dimensional list must have 5 rows, one for every lesson
    and 10 columns, one for every student. All other lists can be placed in relation
    to this two-dimensional list, as shown next.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-09.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)The auxiliary list count will be created by the program
    and will store the number of grades for each student that are greater than 89.'
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, to create the list count, the program will iterate through columns.
    The solution is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.4-2b'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 10
  prefs: []
  type: TYPE_NORMAL
- en: LESSONS = 5
  prefs: []
  type: TYPE_NORMAL
- en: '#Read names and grades all together. Iterate through columns in list grades'
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: grades = [[None] * STUDENTS for i in range(LESSONS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[j] = input("Enter name for student No." + str(j + 1) + ": ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i][j] = int(input("Enter grade No." + str(i + 1) + " for " + names[j]
    + ": "))'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Create list count. Iterate through columns'
  prefs: []
  type: TYPE_NORMAL
- en: count = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: count[j] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(LESSONS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if grades[i][j] > 89:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: count[j] += 1
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#Displays the names of the students who have more than one grade greater than
    89'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if count[j] > 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print(names[j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 32.4-3 Using a List Along with a Dictionary
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: There are 30 students and each one of them has received their grades for a test.
    Write a Python program that prompts the user to enter the grades (as a letter)
    for each student. It then displays, for each student, the grade as a percentage
    according to the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Grade | Percentage |'
  prefs: []
  type: TYPE_TB
- en: '| A | 90 ‐ 100 |'
  prefs: []
  type: TYPE_TB
- en: '| B | 80 ‐ 89 |'
  prefs: []
  type: TYPE_TB
- en: '| C | 70 ‐ 79 |'
  prefs: []
  type: TYPE_TB
- en: '| D | 60 ‐ 69 |'
  prefs: []
  type: TYPE_TB
- en: '| E / F | 0 ‐ 59 |'
  prefs: []
  type: TYPE_TB
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: A dictionary can be used to hold the given table. The solution is straightforward
    and requires no further explanation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.4-3'
  prefs: []
  type: TYPE_NORMAL
- en: STUDENTS = 30
  prefs: []
  type: TYPE_NORMAL
- en: 'gradesTable = {"A": "90-100", "B": "80-89", "C": "70-79",'
  prefs: []
  type: TYPE_NORMAL
- en: '"D": "60-69", "E": "0-59", "F": "0-59"}'
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: names = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: grades = [None] * STUDENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'names[i] = input("Enter student name No" + str(i + 1) + ": ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'grades[i] = input("Enter their grade: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: grade = grades[i]
  prefs: []
  type: TYPE_NORMAL
- en: gradeAsPercentage = gradesTable[grade]
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i], gradeAsPercentage)
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you fully understood how the last for-loop works, then take a look in
    the code fragment that follows. It is equivalent to that last for-loop, but it
    performs more efficiently, since it uses fewer variables!
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(STUDENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i], gradesTable[grades[i]])
  prefs: []
  type: TYPE_NORMAL
- en: 32.5 Creating a One-Dimensional List from a Two-Dimensional List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To more easily understand how to create a one-dimensional list from a two-dimensional
    list, let's use an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a Python program that creates a one-dimensional list of 12 elements from
    an existing two-dimensional list of 3 × 4 (shown below), as follows: The elements
    of the first column of the two-dimensional list must be placed in the first three
    positions of the one-dimensional list, the elements of the second column must
    be placed in the next three positions, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The two-dimensional 3 × 4 list along with the new one-dimensional list are presented
    below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-10.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program that follows creates the new one-dimensional list, iterating
    through columns, as it is more convenient. It uses the existing list given in
    the example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.5a'
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 3
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 4
  prefs: []
  type: TYPE_NORMAL
- en: ELEMENTS = ROWS * COLUMNS
  prefs: []
  type: TYPE_NORMAL
- en: a = [
  prefs: []
  type: TYPE_NORMAL
- en: '[5, 9, 3, 2],'
  prefs: []
  type: TYPE_NORMAL
- en: '[11, 12, 4, 1],'
  prefs: []
  type: TYPE_NORMAL
- en: '[10, 25, 22, 18]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: k = 0  #This is the index of the new list b.
  prefs: []
  type: TYPE_NORMAL
- en: b = [None] * ELEMENTS
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):        #Iterate through columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: b[k] = a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: k += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for k in range(ELEMENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[k], end = "\t")
  prefs: []
  type: TYPE_NORMAL
- en: Instead of using the index k for the new list, you can also use the append()
    method, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.5b'
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 3
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 4
  prefs: []
  type: TYPE_NORMAL
- en: ELEMENTS = ROWS * COLUMNS
  prefs: []
  type: TYPE_NORMAL
- en: a = [
  prefs: []
  type: TYPE_NORMAL
- en: '[5, 9, 3, 2],'
  prefs: []
  type: TYPE_NORMAL
- en: '[11, 12, 4, 1],'
  prefs: []
  type: TYPE_NORMAL
- en: '[10, 25, 22, 18]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: b = []  #Create a totally empty list
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):        #Iterate through columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: b.append(a[i][j])
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for k in range(ELEMENTS):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[k], end = "\t")
  prefs: []
  type: TYPE_NORMAL
- en: 32.6 Creating a Two-Dimensional List from a One-Dimensional List
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To more easily understand how to create a two-dimensional list from a one-dimensional
    list, let's use an example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a Python program that creates a two-dimensional list of 3 × 4 from an
    existing one-dimensional list of 12 elements (shown below), as follows: The first
    three elements of the one-dimensional list must be placed in the first column
    of the two-dimensional list, the next three elements of the one-dimensional list
    must be placed in the next column of the two-dimensional list, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: The one-dimensional list of 12 elements along with the new two-dimensional list
    are presented below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-11.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program that follows creates the new two-dimensional list, iterating
    through columns, which is more convenient. It uses the existing list given in
    the example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.6'
  prefs: []
  type: TYPE_NORMAL
- en: ROWS = 3
  prefs: []
  type: TYPE_NORMAL
- en: COLUMNS = 4
  prefs: []
  type: TYPE_NORMAL
- en: a = [5, 11, 10, 9, 12, 25, 3, 4, 22, 2, 1, 18]
  prefs: []
  type: TYPE_NORMAL
- en: 'k = 0   #This is the index of list a.'
  prefs: []
  type: TYPE_NORMAL
- en: b = [[None] * COLUMNS for i in range(ROWS)]
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):            #Iterate through columns'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] = a[k]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: k += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):               #Iterate through rows'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: print(b[i][j], end = "\t")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print()
  prefs: []
  type: TYPE_NORMAL
- en: 32.7 Useful Data Structures Functions/Methods (Subprograms)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Counting the number of elements
  prefs: []
  type: TYPE_NORMAL
- en: len(structure_name)
  prefs: []
  type: TYPE_NORMAL
- en: You already know this function from a previous chapter! In [Section 14.3](chapter14.html#toc_3)
    you learned that the len() function returns the number of characters in a string.
    Now it's time to learn that the function len() returns the number of elements
    of any structure such as a list or a dictionary!
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.7a'
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 12, 4, 2, 1]
  prefs: []
  type: TYPE_NORMAL
- en: 'print(len(a))                   #It displays: 7'
  prefs: []
  type: TYPE_NORMAL
- en: length = len(a[2:4])
  prefs: []
  type: TYPE_NORMAL
- en: 'print(length)                   #It displays: 2'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(a)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'print (a[i], end = "  ")    #It displays: 3  6  10  12  4  2  1'
  prefs: []
  type: TYPE_NORMAL
- en: b = [
  prefs: []
  type: TYPE_NORMAL
- en: '[5, 9, 3, 2],'
  prefs: []
  type: TYPE_NORMAL
- en: '[11, 12, 7, 1],'
  prefs: []
  type: TYPE_NORMAL
- en: '[10, 25, 22, 18]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(len(b))     #It displays: 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(len(b[0]))  #It displays: 4'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In the two-dimensional list b, the len(b) function returns
    the value of 3 (three rows), while len(b[0]) returns the value of 4 (four columns).
    If you want to get the total number of elements in all the dimensions of the list,
    you could use the product len(b) * len(b[0]), which would equal the value of 12.'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the maximum value
  prefs: []
  type: TYPE_NORMAL
- en: max(structure_name)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the greatest value of a list or tuple. In the case of
    a dictionary, it returns the greatest key.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.7b'
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 2, 1, 12, 4]
  prefs: []
  type: TYPE_NORMAL
- en: 'print(max(a))                   #It displays: 12'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = max(a[1:4])
  prefs: []
  type: TYPE_NORMAL
- en: 'print(maximum)                  #It displays: 10'
  prefs: []
  type: TYPE_NORMAL
- en: b = [
  prefs: []
  type: TYPE_NORMAL
- en: '[4, 6, 8],'
  prefs: []
  type: TYPE_NORMAL
- en: '[3, 11, 9],'
  prefs: []
  type: TYPE_NORMAL
- en: '[2, 9, 1]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(max(b[1]))                #It displays: 11'
  prefs: []
  type: TYPE_NORMAL
- en: c = ("Apollo", "Hermes", "Athena", "Aphrodite", "Dionysus")
  prefs: []
  type: TYPE_NORMAL
- en: 'print(max(c))                   #It displays: Hermes'
  prefs: []
  type: TYPE_NORMAL
- en: Finding the minimum value
  prefs: []
  type: TYPE_NORMAL
- en: min(structure_name)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the smallest value of a list or a tuple. In the case of
    a dictionary, it returns the smallest key.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.7c'
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 2, 1, 12, 4]
  prefs: []
  type: TYPE_NORMAL
- en: 'print(min(a))                   #It displays: 1'
  prefs: []
  type: TYPE_NORMAL
- en: minimum = min(a[1:4])
  prefs: []
  type: TYPE_NORMAL
- en: 'print(minimum)                  #It displays: 2'
  prefs: []
  type: TYPE_NORMAL
- en: b = [
  prefs: []
  type: TYPE_NORMAL
- en: '[4, 6, 8],'
  prefs: []
  type: TYPE_NORMAL
- en: '[3, 11, 9],'
  prefs: []
  type: TYPE_NORMAL
- en: '[2, 9, 1]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(min(b[0]))                #It displays: 4'
  prefs: []
  type: TYPE_NORMAL
- en: c = ("Apollo", "Hermes", "Athena", "Aphrodite", "Dionysus")
  prefs: []
  type: TYPE_NORMAL
- en: 'print(min(c))                   #It displays: Aphrodite'
  prefs: []
  type: TYPE_NORMAL
- en: Sorting a list
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorting is the process of putting the elements of a list in a certain order.
    Here you have two options: you can sort a list using the sort() method, or you
    can get a new sorted list from an initial list using the sorted() function, leaving
    the initial list intact.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the sort() method
  prefs: []
  type: TYPE_NORMAL
- en: list_name.sort([reverse = True])
  prefs: []
  type: TYPE_NORMAL
- en: This method sorts a list in ascending or in descending order.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.7d'
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 2, 1, 12, 4]
  prefs: []
  type: TYPE_NORMAL
- en: a.sort()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)   #It displays: [1  2  3  4  6  10  12]'
  prefs: []
  type: TYPE_NORMAL
- en: '#Sort in reverse order'
  prefs: []
  type: TYPE_NORMAL
- en: a.sort(reverse = True)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)   #It displays: [12  10  6  4  3  2  1]'
  prefs: []
  type: TYPE_NORMAL
- en: b = [
  prefs: []
  type: TYPE_NORMAL
- en: '[4, 6, 8],'
  prefs: []
  type: TYPE_NORMAL
- en: '[3, 11, 9],'
  prefs: []
  type: TYPE_NORMAL
- en: '[2, 9, 1]'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '#Sort the last row'
  prefs: []
  type: TYPE_NORMAL
- en: b[2].sort()
  prefs: []
  type: TYPE_NORMAL
- en: 'for row in b:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in row:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(element, end = "\t")  #It displays: 4   6   8'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 3   11  9
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
- en: print()                        #             1   2   9
  prefs: []
  type: TYPE_NORMAL
- en: c = ["Hermes", "Apollo", "Dionysus"]
  prefs: []
  type: TYPE_NORMAL
- en: c.sort()
  prefs: []
  type: TYPE_NORMAL
- en: 'print(c)   #It displays: [''Apollo'', ''Dionysus'', ''Hermes'']'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The sort() method cannot be used with immutable data types,
    such as tuples.'
  prefs: []
  type: TYPE_NORMAL
- en: Using the sorted() function
  prefs: []
  type: TYPE_NORMAL
- en: sorted(structure_name [, reverse = True])
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a new sorted list or a tuple, either in ascending or in
    descending order, leaving the initial list/tuple intact.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_32.7e'
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 2, 1, 12, 4]
  prefs: []
  type: TYPE_NORMAL
- en: b = sorted(a)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)   #It displays: [3, 6, 10, 2, 1, 12, 4]'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)   #It displays: [1  2  3  4  6  10  12]'
  prefs: []
  type: TYPE_NORMAL
- en: c = ["Hermes", "Apollo", "Dionysus"]
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sorted(c, reverse = True):'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(element, end = "  ")   #It displays: Hermes  Dionysus  Apollo'
  prefs: []
  type: TYPE_NORMAL
- en: '32.8 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Processing each row individually means that every row is processed separately,
    and the result of each row can then be used individually for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: 2)The following code fragment displays the word “Okay” when the sum of the elements
    of each column is less than 100.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if total < 100: print("Okay")'
  prefs: []
  type: TYPE_NORMAL
- en: 3)Processing each column individually means that every column is processed separately
    and the result of each row can be then used individually for further processing.
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following code fragment displays the sum of the elements of each column.
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Suppose that there are 10 students and each one of them has received their
    grades for five lessons. Given this information, it is possible to design a list
    so that the rows refer to students and the columns refer to lessons, but not the
    other way around, that is, the rows referring to lessons and the columns referring
    to students.
  prefs: []
  type: TYPE_NORMAL
- en: 6)A one-dimensional list can be created from a two-dimensional list, but not
    the opposite.
  prefs: []
  type: TYPE_NORMAL
- en: 7)A one-dimensional list can be created from a three-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following two code fragments display the same value.
  prefs: []
  type: TYPE_NORMAL
- en: a = [1, 6, 12, 2, 1]
  prefs: []
  type: TYPE_NORMAL
- en: print(len(a))
  prefs: []
  type: TYPE_NORMAL
- en: a = "Hello"
  prefs: []
  type: TYPE_NORMAL
- en: print(len(a))
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following code fragment displays three values.
  prefs: []
  type: TYPE_NORMAL
- en: a = [10, 20, 30, 40, 50]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, len(a)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i])
  prefs: []
  type: TYPE_NORMAL
- en: 10)The following code fragment displays the values of all elements of the list
    b.
  prefs: []
  type: TYPE_NORMAL
- en: b = [10, 20, 30, 40, 50]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(b)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i)
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following code fragment doubles the values of all elements of the list
    b.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(b)):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i] *= 2
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment displays the value of 30 on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: a = [20, 50, 10, 30, 15]
  prefs: []
  type: TYPE_NORMAL
- en: print(max(a[2:len(a)]))
  prefs: []
  type: TYPE_NORMAL
- en: 13)The following code fragment displays the value of 50 on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: a = [20, 50, 10, 30, 15]
  prefs: []
  type: TYPE_NORMAL
- en: b = [-1, -3, -2, -4, -1]
  prefs: []
  type: TYPE_NORMAL
- en: print(a[min(b)])
  prefs: []
  type: TYPE_NORMAL
- en: 14)The following code fragment displays the smallest value of list b.
  prefs: []
  type: TYPE_NORMAL
- en: b = [3, 6, 10, 2, 1, 12, 4]
  prefs: []
  type: TYPE_NORMAL
- en: b.sort()
  prefs: []
  type: TYPE_NORMAL
- en: print(b[0])
  prefs: []
  type: TYPE_NORMAL
- en: 15)The following code fragment displays the smallest value of list b.
  prefs: []
  type: TYPE_NORMAL
- en: b = [3, 1, 2, 10, 4, 12, 6]
  prefs: []
  type: TYPE_NORMAL
- en: print(sorted(a, reverse = True)[-1])
  prefs: []
  type: TYPE_NORMAL
- en: 16)The following code fragment throws an error.
  prefs: []
  type: TYPE_NORMAL
- en: b = [3, 1, 2]
  prefs: []
  type: TYPE_NORMAL
- en: a = sort(b)
  prefs: []
  type: TYPE_NORMAL
- en: '32.9 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[i] = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total[i] += a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total[i])
  prefs: []
  type: TYPE_NORMAL
- en: a)displays the sum of the elements of each row.
  prefs: []
  type: TYPE_NORMAL
- en: b)displays the sum of the elements of each column.
  prefs: []
  type: TYPE_NORMAL
- en: c)displays the sum of all the elements of the list.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: a)displays the sum of the elements of each row.
  prefs: []
  type: TYPE_NORMAL
- en: b)displays the sum of the elements of each column.
  prefs: []
  type: TYPE_NORMAL
- en: c)displays the sum of all the elements of the list.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: total += a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: a)displays the sum of the elements of each row.
  prefs: []
  type: TYPE_NORMAL
- en: b)displays the sum of the elements of each column.
  prefs: []
  type: TYPE_NORMAL
- en: c)displays the sum of all the elements of the list.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: b = [None] * (ROWS * COLUMNS)
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS - 1, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(0, COLUMNS, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: b[k] = a[i][j]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: k += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a)creates a one-dimensional list from a two-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: b)creates a two-dimensional list from a one-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of definiteness
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: b = [[None] * COLUMNS for i in range(ROWS)]
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(ROWS):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(COLUMNS - 1, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: b[i][j] = a[k]
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: k += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: a)creates a one-dimensional list from a two-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: b)creates a two-dimensional list from a one-dimensional list.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following two code fragments
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 2, 4, 12, 1]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(7):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i])
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 2, 4, 12, 1]
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(a)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i])
  prefs: []
  type: TYPE_NORMAL
- en: a)produce the same results.
  prefs: []
  type: TYPE_NORMAL
- en: b)do not produce the same results.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)The following two code fragments
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(a)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(a[i])
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in a:'
  prefs: []
  type: TYPE_NORMAL
- en: print(element)
  prefs: []
  type: TYPE_NORMAL
- en: a)produce the same results.
  prefs: []
  type: TYPE_NORMAL
- en: b)do not produce the same results.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 8)The statement min(b[1:len(b)])
  prefs: []
  type: TYPE_NORMAL
- en: a)returns the lowest value of a portion of list b.
  prefs: []
  type: TYPE_NORMAL
- en: b)returns the lowest value of list b.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: a = [3, 6, 10, 1, 4, 12, 2]
  prefs: []
  type: TYPE_NORMAL
- en: print(a[-min(a)])
  prefs: []
  type: TYPE_NORMAL
- en: a)displays the value of 1 on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: b)displays the value of 3 on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: c)displays the value of 2 on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 10)The following two code fragments
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(len(a)):'
  prefs: []
  type: TYPE_NORMAL
- en: print(sorted(a)[i])
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in sorted(a):'
  prefs: []
  type: TYPE_NORMAL
- en: print(element)
  prefs: []
  type: TYPE_NORMAL
- en: a)produce the same results, but the left program is faster.
  prefs: []
  type: TYPE_NORMAL
- en: b)produce the same results, but the right program is faster.
  prefs: []
  type: TYPE_NORMAL
- en: c)do not produce the same results.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following three code fragments
  prefs: []
  type: TYPE_NORMAL
- en: b.sort(reverse = True)
  prefs: []
  type: TYPE_NORMAL
- en: print(b[0])
  prefs: []
  type: TYPE_NORMAL
- en: print(sorted(b)[-1])
  prefs: []
  type: TYPE_NORMAL
- en: print(max(b))
  prefs: []
  type: TYPE_NORMAL
- en: a)display the greatest value of the list b on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: b)display the smallest value of the list b on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 32.10 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)There are 15 students and each one of them has received their grades for five
    tests. Write a Python program that lets the user enter the grades (as a percentage)
    for each student for all tests. It then calculates, for each student, the average
    grade and displays it as a letter grade according to the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Grade | Percentage |'
  prefs: []
  type: TYPE_TB
- en: '| A | 90 ‐ 100 |'
  prefs: []
  type: TYPE_TB
- en: '| B | 80 ‐ 89 |'
  prefs: []
  type: TYPE_TB
- en: '| C | 70 ‐ 79 |'
  prefs: []
  type: TYPE_TB
- en: '| D | 60 ‐ 69 |'
  prefs: []
  type: TYPE_TB
- en: '| E / F | 0 ‐ 59 |'
  prefs: []
  type: TYPE_TB
- en: 2)On Earth, a free-falling object has an acceleration of 9.81 m/s² downward.
    This value is denoted by g. A student wants to calculate that value using an experiment.
    She allows five different objects to fall downward from a known height and measures
    the time they need to reach the floor. She does this 10 times for each object.
    Then, using a formula she calculates g for each object, for each fall. But since
    her chronometer is not so accurate, she needs a Python program that lets her enter
    all calculated values of g in a 5 × 10 list and then, it calculates and displays
  prefs: []
  type: TYPE_NORMAL
- en: a)for each object, the average value of g
  prefs: []
  type: TYPE_NORMAL
- en: b)for each fall, the average value of g
  prefs: []
  type: TYPE_NORMAL
- en: c)the overall average value of g
  prefs: []
  type: TYPE_NORMAL
- en: 3)A basketball team with 15 players plays 12 matches. Write a Python program
    that lets the user enter, for each player, the number of points scored in each
    match. The program must then display
  prefs: []
  type: TYPE_NORMAL
- en: a)for each player, the total number of points scored
  prefs: []
  type: TYPE_NORMAL
- en: b)for each match, the total number of points scored
  prefs: []
  type: TYPE_NORMAL
- en: 4)Write a Python program that lets the user enter the hourly measured temperatures
    of 20 cities for a period of one day, and then displays the hours in which the
    average temperature of all the cities was below 10 degrees Fahrenheit.
  prefs: []
  type: TYPE_NORMAL
- en: 5)In a football tournament, a football team with 24 players plays 10 matches.
    Write a Python program that lets the user enter, for each player, a name as well
    as the number of goals they scored in each match. The program must then display
  prefs: []
  type: TYPE_NORMAL
- en: a)for each player, his name and the average number of goals he scored
  prefs: []
  type: TYPE_NORMAL
- en: b)for each match, the index number of the match (1, 2, 3, and so on) and the
    total number of goals scored
  prefs: []
  type: TYPE_NORMAL
- en: 6)There are 12 students and each one of them has received their grades for six
    lessons. Write a Python program that lets the user enter the name of the student
    as well as their grades in all lessons and then displays
  prefs: []
  type: TYPE_NORMAL
- en: a)for each student, their name and average grade
  prefs: []
  type: TYPE_NORMAL
- en: b)for each lesson, the average grade
  prefs: []
  type: TYPE_NORMAL
- en: c)the names of the students who have an average grade less than 60
  prefs: []
  type: TYPE_NORMAL
- en: d)the names of the students who have an average grade greater than 89, and the
    message “Bravo!” next to it
  prefs: []
  type: TYPE_NORMAL
- en: Assume that the user enters valid values between 0 and 100.
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a song contest, each artist sings a song of their choice. There are five
    judges and 15 artists, each of whom is scored for their performance. Write a Python
    program that prompts the user to enter the names of the judges, the names of the
    artists, the title of the song that each artist sings, and the score they get
    from each judge. The program must then display
  prefs: []
  type: TYPE_NORMAL
- en: a)for each artist, their name, the title of the song, and their total score
  prefs: []
  type: TYPE_NORMAL
- en: b)for each judge, their name and the average value of the score they gave
  prefs: []
  type: TYPE_NORMAL
- en: 8)The Body Mass Index (BMI) is often used to determine whether a person is overweight
    or underweight for their height. The formula used to calculate BMI is
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-08.png)
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that lets the user enter into two lists the weight (in
    pounds) and height (in inches) of 30 people, measured on a monthly basis, for
    a period of one year (January to December). The program must then calculate and
    display
  prefs: []
  type: TYPE_NORMAL
- en: a)for each person, their average weight, average height, and average BMI
  prefs: []
  type: TYPE_NORMAL
- en: b)for each person, their BMI in May and in August
  prefs: []
  type: TYPE_NORMAL
- en: Please note that all people are adults but some of them are between the ages
    of 18 and 25\. This means they may still grow taller, thus their height might
    be different each month!
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that lets the user enter the electric meter reading
    in kilowatt-hours (kWh) at the beginning and at the end of a month for 1000 consumers.
    The program must then calculate and display
  prefs: []
  type: TYPE_NORMAL
- en: a)for each consumer, the amount of kWh consumed and the amount of money that
    must be paid given a cost of each kWh of $0.07 and a value added tax (VAT) rate
    of 19%
  prefs: []
  type: TYPE_NORMAL
- en: b)the total consumption and the total amount of money that must be paid.
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that prompts the user to enter an amount in US dollars
    and calculates and displays the corresponding currency value in Euros, British
    Pounds Sterling, Australian Dollars, and Canadian Dollars. The tables below contain
    the exchange rates for each currency for a period of five working days. The program
    must calculate the average value of each currency and do the conversions based
    on that average value.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-12.png)'
  prefs: []
  type: TYPE_IMG
- en: 11)Gross pay depends on the pay rate and the total number of hours worked per
    week. However, if someone works more than 40 hours, they get paid time-and-a-half
    for all hours worked over 40\. Write a Python program that lets the user enter
    a pay rate, as well as the names of 10 employees and the number of hours that
    they worked each day (Monday to Friday). The program must then calculate and display
  prefs: []
  type: TYPE_NORMAL
- en: a)the names of employees who worked overtime
  prefs: []
  type: TYPE_NORMAL
- en: b)for each employee, their name and the average daily gross pay
  prefs: []
  type: TYPE_NORMAL
- en: c)the total gross pay for all employees
  prefs: []
  type: TYPE_NORMAL
- en: d)for each employee, their name, the name of the day they worked overtime (more
    than 8 hours), and the message “Overtime!”
  prefs: []
  type: TYPE_NORMAL
- en: e)for each day, the name of the day and the total gross pay
  prefs: []
  type: TYPE_NORMAL
- en: '12)Write a Python program to create a one-dimensional list of 12 elements from
    the two-dimensional list shown below, as follows: the first row of the two-dimensional
    list must be placed in the first four positions of the one-dimensional list, the
    second row of the two-dimensional list must be placed in the next four positions
    of the one-dimensional list, and the last row of the two-dimensional list must
    be placed in the last four positions of the one-dimensional list.'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter32-13.png)
  prefs: []
  type: TYPE_NORMAL
- en: '13)Write a Python program to create a 3 × 3 list from the one-dimensional list
    shown below, as follows: the first three elements of the one-dimensional list
    must be placed in the last row of the two-dimensional list, the next three elements
    of the one-dimensional list must be placed in the second row of the two-dimensional
    list, and the last three elements of the one-dimensional list must be placed in
    the first row of the two-dimensional list.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter32-14.png)'
  prefs: []
  type: TYPE_IMG
