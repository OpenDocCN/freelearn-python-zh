- en: Chapter 32
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第32章
- en: Tips and Tricks with Data Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构技巧与窍门
- en: 32.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.1 简介
- en: Since lists are handled with the same sequence, decision, and loop control structures
    that you learned about in previous chapters, there is no need to repeat all of
    that information here. However, what you will discover in this chapter is how
    to process each row or column of a two-dimensional list individually, how to solve
    problems that require the use of more than one list, how to create a two-dimensional
    list from a one-dimensional list (and vice versa), and some useful built-in list
    functions and methods that Python supports.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 由于列表是使用与之前章节中学习的相同序列、决策和循环控制结构处理的，因此在这里不需要重复所有这些信息。然而，在本章中，你将发现如何单独处理二维列表的每一行或每一列，如何解决需要使用多个列表的问题，如何从一个一维列表创建二维列表（反之亦然），以及Python支持的一些有用的内置列表函数和方法。
- en: 32.2 Processing Each Row Individually
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.2 单独处理每一行
- en: Processing each row individually means that every row is processed separately
    and the result of each row (which can be the sum, the average value, and so on)
    can be used individually for further processing.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 单独处理每一行意味着每一行都是单独处理的，每一行的结果（可以是总和、平均值等）可以单独用于进一步处理。
- en: Suppose you have the following 4 × 5 list.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个4×5的列表。
- en: .![Image](img/chapter32-01.png)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter32-01.png)
- en: Let's try to find the sum of each row individually. Both of the following approaches
    iterate through rows.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试找到每一行的总和。以下两种方法都会遍历行。
- en: First approach – Creating an auxiliary list
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 创建辅助列表
- en: In this approach, the program processes each row individually and creates an
    auxiliary list in which each element stores the sum of one row. This approach
    gives you much flexibility since you can use this new list later in your program
    for further processing. The auxiliary list total is shown on the right.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，程序单独处理每一行并创建一个辅助列表，其中每个元素存储一行之和。这种方法提供了很大的灵活性，因为您可以在程序中稍后使用这个新列表进行进一步处理。辅助列表total显示在右侧。
- en: '![Image](img/chapter32-02.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter32-02.png)'
- en: Now, let's write the corresponding code fragment. To more easily understand
    the process, the “from inner to outer” method is used. The following code fragment
    calculates the sum of the first row (row index 0) and stores the result in the
    element at position 0 of the auxiliary list total. Assume variable i contains
    the value 0.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写相应的代码片段。为了更易于理解这个过程，我们使用“从内到外”的方法。以下代码片段计算第一行的总和（行索引为0），并将结果存储在辅助列表total的位置0处。假设变量i包含值0。
- en: s = 0
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: s += b[i][j]
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: s += b[i][j]
- en: total[i] = s
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: total[i] = s
- en: This code fragment can equivalently be written as
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个代码片段可以等价地写成
- en: total[i] = 0
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: total[i] = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total[i] += b[i][j]
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: total[i] += b[i][j]
- en: Now, nesting this code fragment in a for-loop that iterates for all rows results
    in the following.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将此代码片段嵌套在一个遍历所有行的for循环中，结果如下。
- en: total = [None] * ROWS
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: total = [None] * ROWS
- en: 'for i in range(ROWS):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total[i] = 0
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: total[i] = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total[i] += b[i][j]
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total[i] += b[i][j]
- en: The same result, however, can be achieved using the magic forces of Python!
    The code fragment is as follows.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，同样可以使用Python的神奇力量来实现相同的结果！代码片段如下。
- en: total = []
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: total = []
- en: 'for row in b:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in b:'
- en: total.append(fsum(row))
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: total.append(fsum(row))
- en: Second approach – Just find it and process it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 – 只找到它并处理它。
- en: This approach uses no auxiliary list; it just calculates and directly processes
    the sum. The code fragment is as follows.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不使用任何辅助列表；它只是计算并直接处理总和。代码片段如下。
- en: 'for i in range(ROWS):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total = 0
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total += b[i][j]
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += b[i][j]
- en: process total
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 过程总和
- en: What does process total mean? It depends on the given problem. It may just display
    the sum, it may calculate the average value of each individual row and display
    it, or it may use the sum for calculating even more complex mathematical expressions.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 过程总和是什么意思？这取决于给定的问题。它可能只是显示总和，也可能计算每一行的平均值并显示，或者它可能使用总和来计算更复杂的数学表达式。
- en: For instance, the following example calculates and displays the average value
    of each row of list b.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下示例计算并显示列表b每一行的平均值。
- en: 'for i in range(ROWS):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total = 0
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total += b[i][j]
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += b[i][j]
- en: average = total / COLUMNS
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: average = total / COLUMNS
- en: print(average)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: print(average)
- en: The same result, however, can be achieved using the magic forces of Python!
    The code fragment is as follows
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的结果，可以使用 Python 的魔法力实现！以下是一个代码片段
- en: 'for row in b:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in b:'
- en: total = fsum(row)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: total = fsum(row)
- en: print(total / COLUMNS)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: print(total / COLUMNS)
- en: Exercise 32.2-1 Finding the Average Value
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 32.2-1 查找平均值
- en: There are 20 students and each one of them has received their grades for 10
    lessons. Write a Python program that prompts the user to enter the grades of each
    student for all lessons and then calculates and displays, for each student, all
    average values that are greater than 89.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有 20 名学生，每个学生都完成了 10 节课的评分。编写一个 Python 程序，提示用户输入每个学生的所有课程成绩，然后计算并显示每个学生的所有大于
    89 的平均值。
- en: Solution
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Since you've learned two approaches for processing each row individually, let's
    use them both.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 由于你已经学会了两种逐行处理的方法，让我们同时使用它们。
- en: First approach – Creating an auxiliary list
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 创建辅助列表
- en: In this approach, the program processes each row individually and creates an
    auxiliary list in which each element stores the average value of one row. The
    two required lists are shown next.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，程序逐行处理，并在辅助列表中创建每个元素，存储一行平均值。以下显示两个所需的列表。
- en: '![Image](img/chapter32-03.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter32-03.png)'
- en: After the list average is created, the program can find and display all average
    values that are greater than 89\. The Python program is as follows.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建列表 average 之后，程序可以找到并显示所有大于 89 的平均值。以下是一个 Python 程序。
- en: '![](img/my_exercise_header.png) file_32.2-1a'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.2-1a'
- en: STUDENTS = 20
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 20
- en: LESSONS = 10
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 10
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * LESSONS for i in range(STUDENTS)]
- en: 'for i in range(STUDENTS):'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: print("For student No.", i + 1, "...")
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: print("对于学生编号", i + 1, "...")
- en: 'for j in range(LESSONS):'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  id: totrans-65
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("输入第 " + str(j + 1) + " 节课的成绩: "))'
- en: '#Create list average. Iterate through rows'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建列表 average。遍历行'
- en: average = [None] * STUDENTS
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: average = [None] * STUDENTS
- en: 'for i in range(STUDENTS):'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: average[i] = 0
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: average[i] = 0
- en: 'for j in range(LESSONS):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: average[i] += grades[i][j]
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: average[i] += grades[i][j]
- en: average[i] /= LESSONS
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: average[i] /= LESSONS
- en: '#Display all average values that are greater than 89'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示所有大于 89 的平均值'
- en: 'for i in range(STUDENTS):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'if average[i] > 89:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average[i] > 89:'
- en: print(average[i])
  id: totrans-76
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(average[i])
- en: Using Python's magic forces the auxiliary list average can also be created as
    shown here.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 的魔法力，辅助列表 average 也可以像下面这样创建。
- en: '![](img/my_exercise_header.png) file_32.2-1b'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.2-1b'
- en: from math import fsum
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: from math import fsum
- en: STUDENTS = 20
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 20
- en: LESSONS = 10
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 10
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * LESSONS for i in range(STUDENTS)]
- en: 'for i in range(STUDENTS):'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: print("For student No.", i + 1, "...")
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: print("对于学生编号", i + 1, "...")
- en: 'for j in range(LESSONS):'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("输入第 " + str(j + 1) + " 节课的成绩: "))'
- en: '#Create list average. Iterate through rows'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建列表 average。遍历行'
- en: average = []
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: average = []
- en: 'for row in grades:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in grades:'
- en: average.append(fsum(row) / LESSONS)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: average.append(fsum(row) / LESSONS)
- en: '#Display all average values that are greater than 89'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示所有大于 89 的平均值'
- en: 'for i in range(STUDENTS):'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'if average[i] > 89:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average[i] > 89:'
- en: print(average[i])
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(average[i])
- en: Second approach – Just find it and display it!
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 – 只找到并显示它！
- en: This approach uses no auxiliary list; it just calculates and directly displays
    all average values that are greater than 89\. The Python program is as follows.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不使用任何辅助列表；它只是计算并直接显示所有大于 89 的平均值。以下是一个 Python 程序。
- en: '![](img/my_exercise_header.png) file_32.2-1c'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.2-1c'
- en: STUDENTS = 20
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 20
- en: LESSONS = 10
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 10
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * LESSONS for i in range(STUDENTS)]
- en: 'for i in range(STUDENTS):'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: print("For student No.", i + 1, "...")
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: print("对于学生编号", i + 1, "...")
- en: 'for j in range(LESSONS):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("输入第 " + str(j + 1) + " 节课的成绩: "))'
- en: '#Calculate the average value of each row and directly display those who are
    greater than 89'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '# 计算每行的平均值并直接显示大于 89 的那些'
- en: 'for i in range(STUDENTS):'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: average = 0
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: average = 0
- en: 'for j in range(LESSONS):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: average += grades[i][j]
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: average += grades[i][j]
- en: average /= LESSONS
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: average /= LESSONS
- en: 'if average > 89:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average > 89:'
- en: print(average)
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(average)
- en: Once again, using Python's magic forces and no auxiliary list, the Python program
    is as follows.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，使用Python的魔法力量和不使用任何辅助列表，Python程序如下。
- en: '![](img/my_exercise_header.png) file_32.2-1d'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.2-1d'
- en: from math import fsum
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: from math import fsum
- en: STUDENTS = 20
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 20
- en: LESSONS = 10
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 10
- en: grades = []
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: grades = []
- en: 'for i in range(STUDENTS):'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: grades.append([])
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: grades.append([])
- en: print("For student No.", i + 1, "...")
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: print("对于学生编号", i + 1, "...")
- en: 'for j in range(LESSONS):'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i].append(int(input("enter grade for lesson No." + str(j + 1) + ": ")))'
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i].append(int(input("输入第" + str(j + 1) + "节课的成绩: ")))'
- en: '#Calculate the average value of each row using Python''s magic forces!'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '# 使用Python的魔法力量计算每行的平均值！'
- en: 'for row in grades:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in grades:'
- en: average = fsum(row) / LESSONS
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: average = fsum(row) / LESSONS
- en: 'if average > 89:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average > 89:'
- en: print(average)
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(average)
- en: 32.3 Processing Each Column Individually
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.3 逐列处理
- en: Processing each column individually means that every column is processed separately
    and the result of each column (which can be the sum, the average value, and so
    on) can be used individually for further processing. Suppose you have the following
    4 × 5 list.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 逐列处理意味着每列都是单独处理的，每列的结果（可以是总和、平均值等）可以单独用于进一步处理。假设你有一个以下4 × 5的列表。
- en: '![Image](img/chapter32-04.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter32-04.png)'
- en: As before, let's try to find the sum of each column individually. Yet again,
    there are two approaches that you can use. Both of these approaches iterate through
    columns.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，让我们尝试逐列求和。再次，你可以使用两种方法。这两种方法都是遍历列。
- en: First approach – Creating an auxiliary list
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 - 创建辅助列表
- en: In this approach, the program processes each column individually and creates
    an auxiliary list in which each element stores the sum of one column. This approach
    gives you much flexibility since you can use this new list later in your program
    for further processing. The auxiliary list total is shown at the bottom.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，程序逐列处理并创建一个辅助列表，其中每个元素存储一列的总和。这种方法提供了很大的灵活性，因为你可以稍后在程序中使用这个新列表进行进一步处理。辅助列表total显示在底部。
- en: '![Image](img/chapter32-05.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter32-05.png)'
- en: Now, let's write the corresponding code fragment. To more easily understand
    the process, the “from inner to outer” method is used again. The following code
    fragment calculates the sum of the first column (column index 0) and stores the
    result in the element at position 0 of the auxiliary list total. Assume variable
    j contains the value 0.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们编写相应的代码片段。为了更易于理解过程，再次使用“从内到外”的方法。以下代码片段计算第一列（列索引0）的总和，并将结果存储在辅助列表total的位置0。假设变量j包含值0。
- en: s = 0
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(ROWS):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: s += b[i][j]
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: s += b[i][j]
- en: total[j] = s
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: total[j] = s
- en: This program can equivalently be written as
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序可以等价地写成
- en: total[j] = 0
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: total[j] = 0
- en: 'for i in range(ROWS):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total[j] += b[i][j]
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: total[j] += b[i][j]
- en: Now, nesting this code fragment in a for-loop that iterates for all columns
    results in the following.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将此代码片段嵌套在一个遍历所有列的for循环中，结果如下。
- en: total = [None] * COLUMNS
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: total = [None] * COLUMNS
- en: 'for j in range(COLUMNS):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total[j] = 0
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: total[j] = 0
- en: 'for i in range(ROWS):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total[j] += b[i][j]
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total[j] += b[i][j]
- en: Second approach – Just find it and process it.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 - 只找到它并处理它。
- en: This approach uses no auxiliary list; it just calculates and directly processes
    the sum. The code fragment is as follows.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不使用任何辅助列表；它只是计算并直接处理总和。代码片段如下。
- en: 'for j in range(COLUMNS):'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total = 0
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(ROWS):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total += b[i][j]
  id: totrans-156
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += b[i][j]
- en: process total
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 处理总和
- en: Accordingly, the following code fragment calculates and displays the average
    value of each column.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，以下代码片段计算并显示每列的平均值。
- en: 'for j in range(COLUMNS):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total = 0
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(ROWS):'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total += b[i][j]
  id: totrans-162
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += b[i][j]
- en: print(total / ROWS)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: print(total / ROWS)
- en: Exercise 32.3-1 Finding the Average Value
  id: totrans-164
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习32.3-1 查找平均值
- en: There are 10 students and each one of them has received their grades for five
    lessons. Write a Python program that prompts the user to enter the grades of each
    student for all lessons and then calculates and displays, for each lesson, all
    average values that are greater than 89.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 有10名学生，他们每人已经完成了5节课的成绩。编写一个Python程序，提示用户输入每个学生的所有课程成绩，然后计算并显示每节课的平均值，其中平均值大于89。
- en: Solution
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Since you've learned two approaches for processing each column individually,
    let's use them both.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 既然你已经学会了两种逐列处理的方法，让我们都使用它们。
- en: First approach – Creating an auxiliary list
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 创建辅助列表
- en: In this approach, the program processes each column individually and creates
    an auxiliary list in which each element stores the average value of one column.
    The two required lists are shown next.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，程序逐列处理每个列，并创建一个辅助列表，其中每个元素存储一个列的平均值。接下来将展示两个所需的列表。
- en: '![Image](img/chapter32-06.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter32-06.png)'
- en: After the list average is created, the program can find and display all average
    values that are greater than 89\. The Python program is as follows.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建列表average之后，程序可以找到并显示所有大于89的平均值。Python程序如下。
- en: '![](img/my_exercise_header.png) file_32.3-1a'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.3-1a'
- en: STUDENTS = 10
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 10
- en: LESSONS = 5
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 5
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * LESSONS for i in range(STUDENTS)]
- en: 'for i in range(STUDENTS):'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: print("For student No.", i + 1, "...")
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: print("学生编号", i + 1, "...")
- en: 'for j in range(LESSONS):'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  id: totrans-179
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("输入第" + str(j + 1) + "课的分数: "))'
- en: '#Create list average. Iterate through columns'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '#创建列表average。遍历列'
- en: average = [None] * LESSONS
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: average = [None] * LESSONS
- en: 'for j in range(LESSONS):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: average[j] = 0
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: average[j] = 0
- en: 'for i in range(STUDENTS):'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: average[j] += grades[i][j]
  id: totrans-185
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: average[j] += grades[i][j]
- en: average[j] /= STUDENTS
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: average[j] /= STUDENTS
- en: '#Display all average values than are greater than 89'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '#显示所有大于89的平均值'
- en: 'for j in range(LESSONS):'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'if average[j] > 89:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average[j] > 89:'
- en: print(average[j])
  id: totrans-190
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(average[j])
- en: Second approach – Just find it and display it!
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 – 只找到它并显示它！
- en: This approach uses no auxiliary list; it just calculates and directly displays
    all average values that are greater than 89\. The Python program is as follows.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不使用辅助列表；它只是计算并直接显示所有大于89的平均值。Python程序如下。
- en: '![](img/my_exercise_header.png) file_32.3-1b'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.3-1b'
- en: STUDENTS = 10
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 10
- en: LESSONS = 5
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 5
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * LESSONS for i in range(STUDENTS)]
- en: 'for i in range(STUDENTS):'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: print("For student No.", i + 1, "...")
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: print("学生编号", i + 1, "...")
- en: 'for j in range(LESSONS):'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i][j] = int(input("enter grade for lesson No." + str(j + 1) + ": "))'
  id: totrans-200
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("输入第" + str(j + 1) + "课的分数: "))'
- en: '#Calculate the average value of each column'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '#计算每列的平均值'
- en: '#and directly display those who are greater than 89'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '#直接显示分数大于89的学生'
- en: 'for j in range(LESSONS):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: average = 0
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: average = 0
- en: 'for i in range(STUDENTS):'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: average += grades[i][j]
  id: totrans-206
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: average += grades[i][j]
- en: average /= STUDENTS
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: average /= STUDENTS
- en: 'if average > 89:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average > 89:'
- en: print(average)
  id: totrans-209
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(average)
- en: 32.4 How to Use More Than One Data Structures in a Program
  id: totrans-210
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.4 在程序中使用多个数据结构
- en: So far, every example or exercise has used just one list or one dictionary.
    But what if a problem requires you to use two lists, or one list and one dictionary,
    or one list and two dictionaries? Next you will find some exercises that show
    you how various data structures can be combined to tackle a variety of unique
    challenges.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，每个示例或练习都只使用了一个列表或一个字典。但如果一个问题需要你使用两个列表，或者一个列表和一个字典，或者一个列表和两个字典呢？接下来你将找到一些练习，展示如何将各种数据结构组合起来以应对各种独特的挑战。
- en: Exercise 32.4-1 Using Three One-Dimensional Lists
  id: totrans-212
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 32.4-1 使用三个一维列表
- en: There are 20 students and each one of them has received grades for two lessons.
    Write a Python program that prompts the user to enter the name and grades of each
    student for both lessons. The program must then find and display the names of
    all students who have grades greater than 89 for both lessons.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 有20名学生，每个学生都为两节课获得了分数。编写一个Python程序，提示用户输入每个学生的姓名和两节课的分数。然后程序必须找到并显示所有两节课分数都大于89的学生姓名。
- en: Solution
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Following are the required lists containing some typical values.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是包含一些典型值的所需列表。
- en: '![Image](img/chapter32-07.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter32-07.png)'
- en: As you can see, there is a one-to-one correspondence between the elements in
    the list names and those in the lists gradesLesson1, and gradesLesson2\. The first
    of the twenty students is George, and he received grades of 95 and 92 for the
    two lessons. The name “George” is stored at index 0 of the list names, and at
    exactly the same index in the lists gradesLesson1 and gradesLesson2, his grades
    for the two lessons are stored. The next student (Anna) and her grades are stored
    at index 1 of the lists names, gradesLesson1, and gradesLesson2, respectively,
    and so on.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，列表 names 中的元素与列表 gradesLesson1 和 gradesLesson2 中的元素之间存在一一对应关系。前二十名学生是乔治，他在两门课程中分别获得了
    95 和 92 分。姓名“乔治”存储在列表 names 的索引 0 处，在列表 gradesLesson1 和 gradesLesson2 中，他的两门课程的分数存储在完全相同的索引位置。下一个学生（安娜）及其分数存储在列表
    names、gradesLesson1 和 gradesLesson2 的索引 1 处，依此类推。
- en: The Python program is as follows.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个 Python 程序。
- en: '![](img/my_exercise_header.png) file_32.4-1'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.4-1'
- en: STUDENTS = 20
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 20
- en: names = [None] * STUDENTS
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: names = [None] * STUDENTS
- en: gradesLesson1 = [None] * STUDENTS
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: gradesLesson1 = [None] * STUDENTS
- en: gradesLesson2 = [None] * STUDENTS
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: gradesLesson2 = [None] * STUDENTS
- en: 'for i in range(STUDENTS):'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'names[i] = input("Enter student name No" + str(i + 1) + ": ")'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[i] = input("输入学生姓名 No" + str(i + 1) + ": ")'
- en: 'gradesLesson1[i] = int(input("Enter grade for lesson 1: "))'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 'gradesLesson1[i] = int(input("输入课程 1 的分数: "))'
- en: 'gradesLesson2[i] = int(input("Enter grade for lesson 2: "))'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 'gradesLesson2[i] = int(input("输入课程 2 的分数: "))'
- en: '#Display the names of those who have grades greater than 89 for both lessons'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示那些两门课程分数都超过 89 的学生的姓名'
- en: 'for i in range(STUDENTS):'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'if gradesLesson1[i] > 89 and gradesLesson2[i] > 89:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 'if gradesLesson1[i] > 89 and gradesLesson2[i] > 89:'
- en: print(names[i])
  id: totrans-231
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(names[i])
- en: Exercise 32.4-2 Using a One-Dimensional List Along with a Two-Dimensional List
  id: totrans-232
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 32.4-2 使用一维列表和二维列表
- en: There are 10 students and each one of them has received their grades for five
    lessons. Write a Python program that prompts the user to enter the name of each
    student and the grades for all lessons and then calculates and displays the names
    of the students who have more than one grade greater than 89.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 有 10 名学生，他们每人已经完成了五门课程的考试。编写一个 Python 程序，提示用户输入每个学生的姓名和所有课程的分数，然后计算并显示那些有两门以上课程分数超过
    89 的学生的姓名。
- en: Solution
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise, you could do what you did in the previous one. You could,
    for example, use a one-dimensional list to store the names of the students and
    five one-dimensional lists to store the grades for each student for each lesson.
    Not very convenient, but it could work. Obviously, when there are more than two
    grades, this is not the most suitable approach.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您可以像上一个练习那样做。例如，您可以使用一个一维列表来存储学生的姓名，以及五个一维列表来存储每个学生在每门课程的分数。这不太方便，但可以工作。显然，当分数超过两个时，这不是最合适的方法。
- en: The best approach here is to use a one-dimensional list to store the names of
    the students and a two-dimensional list to store the grades for each student for
    each lesson.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最好的方法是使用一个一维列表来存储学生的姓名，以及一个二维列表来存储每个学生在每门课程的分数。
- en: There are actually two approaches. Which one to use depends clearly on you!
    If you decide that, in the two-dimensional list, the rows should refer to students
    and the columns should refer to lessons then you can use the first approach discussed
    below. If you decide that the rows should refer to lessons and the columns should
    refer to students then you can use the second approach that follows.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上存在两种方法。使用哪一种取决于您！如果您决定在二维列表中，行应指学生，列应指课程，那么您可以使用下面讨论的第一种方法。如果您决定行应指课程，列应指学生，那么您可以使用下面的第二种方法。
- en: First approach – Rows for students, columns for lessons
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 行为学生，列为课程
- en: In this approach, the two-dimensional list must have 10 rows, one for every
    student and 5 columns, one for every lesson. All other lists can be placed in
    relation to this two-dimensional list as follows.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，二维列表必须有 10 行，每行代表一个学生，5 列，每列代表一门课程。所有其他列表都可以根据这个二维列表如下排列。
- en: '![Image](img/chapter32-08.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter32-08.png)'
- en: '![](img/notice.jpg)The auxiliary list count will be created by the program
    and will store the number of grades for each student that are greater than 89.'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)程序将创建辅助列表 count，并存储每个学生分数超过 89 的分数数量。'
- en: Now, let's see how to read values and store them in the lists names and grades.
    One simple solution would be to use one for-loop for reading names, and then nested
    for-loops for reading grades. However, it may not be very practical for the user
    to first enter all names and then all grades. A more user-friendly approach would
    be to prompt the user to enter one student name and then all of their grades,
    then proceed to the next student name and their corresponding grades, and so on.
    The solution is as follows.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看如何读取值并将它们存储在names和grades列表中。一个简单的解决方案是使用一个for循环读取姓名，然后使用嵌套的for循环读取成绩。然而，对于用户来说，首先输入所有姓名然后所有成绩可能不太实用。一个更用户友好的方法是提示用户输入一个学生姓名然后所有他们的成绩，然后继续下一个学生姓名及其对应的成绩，依此类推。解决方案如下。
- en: '![](img/my_exercise_header.png) file_32.4-2a'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_32.4-2a'
- en: STUDENTS = 10
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 10
- en: LESSONS = 5
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 5
- en: '#Read names and grades all together. Iterate through rows in list grades'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '# 一次性读取姓名和成绩。遍历grades列表中的行'
- en: names = [None] * STUDENTS
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: names = [None] * STUDENTS
- en: grades = [[None] * LESSONS for i in range(STUDENTS)]
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * LESSONS for i in range(STUDENTS)]
- en: 'for i in range(STUDENTS):'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'names[i] = input("Enter name for student No." + str(i + 1) + ": ")'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[i] = input("Enter name for student No." + str(i + 1) + ": ")'
- en: 'for j in range(LESSONS):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'grades[i][j] = int(input("Enter grade No." + str(j + 1) + " for " + names[i]
    + ": "))'
  id: totrans-252
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("Enter grade No." + str(j + 1) + " for " + names[i]
    + ": "))'
- en: '#Create list count. Iterate through rows'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建count列表。遍历行'
- en: count = [None] * STUDENTS
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: count = [None] * STUDENTS
- en: 'for i in range(STUDENTS):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: count[i] = 0
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: count[i] = 0
- en: 'for j in range(LESSONS):'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(LESSONS):'
- en: 'if grades[i][j] > 89:'
  id: totrans-258
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if grades[i][j] > 89:'
- en: count[i] += 1
  id: totrans-259
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count[i] += 1
- en: '#Displays the names of the students who have more than one grade greater than
    89'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示成绩超过89分的学生姓名'
- en: 'for i in range(STUDENTS):'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'if count[i] > 1:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 'if count[i] > 1:'
- en: print(names[i])
  id: totrans-263
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(names[i])
- en: Second approach – Rows for lessons, columns for students
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 - 行对应课程，列对应学生
- en: In this approach, the two dimensional list must have 5 rows, one for every lesson
    and 10 columns, one for every student. All other lists can be placed in relation
    to this two-dimensional list, as shown next.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，二维列表必须包含5行，每行对应一个课程，10列，每列对应一个学生。所有其他列表都可以相对于这个二维列表放置，如下所示。
- en: '![Image](img/chapter32-09.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter32-09.png)'
- en: '![](img/notice.jpg)The auxiliary list count will be created by the program
    and will store the number of grades for each student that are greater than 89.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/notice.jpg]辅助列表count将由程序创建，并将存储每个学生成绩超过89分的数量。'
- en: Obviously, to create the list count, the program will iterate through columns.
    The solution is as follows.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，为了创建count列表，程序将遍历列。解决方案如下。
- en: '![](img/my_exercise_header.png) file_32.4-2b'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_32.4-2b'
- en: STUDENTS = 10
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 10
- en: LESSONS = 5
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: LESSONS = 5
- en: '#Read names and grades all together. Iterate through columns in list grades'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '# 一次性读取姓名和成绩。遍历grades列表中的列'
- en: names = [None] * STUDENTS
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: names = [None] * STUDENTS
- en: grades = [[None] * STUDENTS for i in range(LESSONS)]
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [[None] * STUDENTS for i in range(LESSONS)]
- en: 'for j in range(STUDENTS):'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(STUDENTS):'
- en: 'names[j] = input("Enter name for student No." + str(j + 1) + ": ")'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[j] = input("Enter name for student No." + str(j + 1) + ": ")'
- en: 'for i in range(LESSONS):'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(LESSONS):'
- en: 'grades[i][j] = int(input("Enter grade No." + str(i + 1) + " for " + names[j]
    + ": "))'
  id: totrans-278
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'grades[i][j] = int(input("Enter grade No." + str(i + 1) + " for " + names[j]
    + ": "))'
- en: '#Create list count. Iterate through columns'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '# 创建count列表。遍历列'
- en: count = [None] * STUDENTS
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: count = [None] * STUDENTS
- en: 'for j in range(STUDENTS):'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(STUDENTS):'
- en: count[j] = 0
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: count[j] = 0
- en: 'for i in range(LESSONS):'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(LESSONS):'
- en: 'if grades[i][j] > 89:'
  id: totrans-284
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if grades[i][j] > 89:'
- en: count[j] += 1
  id: totrans-285
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: count[j] += 1
- en: '#Displays the names of the students who have more than one grade greater than
    89'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示成绩超过89分的学生姓名'
- en: 'for j in range(STUDENTS):'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(STUDENTS):'
- en: 'if count[j] > 1:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 'if count[j] > 1:'
- en: print(names[j])
  id: totrans-289
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(names[j])
- en: Exercise 32.4-3 Using a List Along with a Dictionary
  id: totrans-290
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习32.4-3 使用列表和字典
- en: There are 30 students and each one of them has received their grades for a test.
    Write a Python program that prompts the user to enter the grades (as a letter)
    for each student. It then displays, for each student, the grade as a percentage
    according to the following table.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 有30名学生，他们每个人都已经收到了他们的测试成绩。编写一个Python程序，提示用户输入每个学生的成绩（作为字母）。然后根据以下表格显示每个学生的成绩百分比。
- en: '| Grade | Percentage |'
  id: totrans-292
  prefs: []
  type: TYPE_TB
  zh: '| Grade | Percentage |'
- en: '| A | 90 ‐ 100 |'
  id: totrans-293
  prefs: []
  type: TYPE_TB
  zh: '| A | 90 – 100 |'
- en: '| B | 80 ‐ 89 |'
  id: totrans-294
  prefs: []
  type: TYPE_TB
  zh: '| B | 80 – 89 |'
- en: '| C | 70 ‐ 79 |'
  id: totrans-295
  prefs: []
  type: TYPE_TB
  zh: '| C | 70 – 79 |'
- en: '| D | 60 ‐ 69 |'
  id: totrans-296
  prefs: []
  type: TYPE_TB
  zh: '| D | 60 – 69 |'
- en: '| E / F | 0 ‐ 59 |'
  id: totrans-297
  prefs: []
  type: TYPE_TB
  zh: '| E / F | 0 – 59 |'
- en: Solution
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: A dictionary can be used to hold the given table. The solution is straightforward
    and requires no further explanation.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 字典可以用来存储给定的表格。解决方案简单明了，无需进一步解释。
- en: '![](img/my_exercise_header.png) file_32.4-3'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.4-3'
- en: STUDENTS = 30
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: STUDENTS = 30
- en: 'gradesTable = {"A": "90-100", "B": "80-89", "C": "70-79",'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 'gradesTable = {"A": "90-100", "B": "80-89", "C": "70-79",'
- en: '"D": "60-69", "E": "0-59", "F": "0-59"}'
  id: totrans-303
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '"D": "60-69", "E": "0-59", "F": "0-59"}'
- en: names = [None] * STUDENTS
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: names = [None] * STUDENTS
- en: grades = [None] * STUDENTS
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: grades = [None] * STUDENTS
- en: 'for i in range(STUDENTS):'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: 'names[i] = input("Enter student name No" + str(i + 1) + ": ")'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[i] = input("Enter student name No" + str(i + 1) + ": ")'
- en: 'grades[i] = input("Enter their grade: ")'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 'grades[i] = input("Enter their grade: ")'
- en: 'for i in range(STUDENTS):'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: grade = grades[i]
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: grade = grades[i]
- en: gradeAsPercentage = gradesTable[grade]
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: gradeAsPercentage = gradesTable[grade]
- en: print(names[i], gradeAsPercentage)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: print(names[i], gradeAsPercentage)
- en: Now, if you fully understood how the last for-loop works, then take a look in
    the code fragment that follows. It is equivalent to that last for-loop, but it
    performs more efficiently, since it uses fewer variables!
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果您完全理解了最后一个for循环的工作原理，那么请查看下面的代码片段。它与最后一个for循环等效，但效率更高，因为它使用了更少的变量！
- en: 'for i in range(STUDENTS):'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(STUDENTS):'
- en: print(names[i], gradesTable[grades[i]])
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: print(names[i], gradesTable[grades[i]])
- en: 32.5 Creating a One-Dimensional List from a Two-Dimensional List
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.5 从二维列表创建一维列表
- en: To more easily understand how to create a one-dimensional list from a two-dimensional
    list, let's use an example.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更轻松地理解如何从二维列表创建一维列表，让我们用一个例子来说明。
- en: 'Write a Python program that creates a one-dimensional list of 12 elements from
    an existing two-dimensional list of 3 × 4 (shown below), as follows: The elements
    of the first column of the two-dimensional list must be placed in the first three
    positions of the one-dimensional list, the elements of the second column must
    be placed in the next three positions, and so on.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，从现有的3 × 4二维列表（如下所示）创建一个包含12个元素的一维列表，如下所示：二维列表的第一列的元素必须放置在一维列表的前三个位置，第二列的元素必须放置在接下来的三个位置，依此类推。
- en: The two-dimensional 3 × 4 list along with the new one-dimensional list are presented
    below.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是二维3 × 4列表和新的一个维列表的展示。
- en: '![Image](img/chapter32-10.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter32-10.png)'
- en: The Python program that follows creates the new one-dimensional list, iterating
    through columns, as it is more convenient. It uses the existing list given in
    the example.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的Python程序创建了一个新的一个维列表，通过遍历列来实现，这更为方便。它使用示例中给出的现有列表。
- en: '![](img/my_exercise_header.png) file_32.5a'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.5a'
- en: ROWS = 3
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 3
- en: COLUMNS = 4
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 4
- en: ELEMENTS = ROWS * COLUMNS
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = ROWS * COLUMNS
- en: a = [
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: a = [
- en: '[5, 9, 3, 2],'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '[5, 9, 3, 2],'
- en: '[11, 12, 4, 1],'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '[11, 12, 4, 1],'
- en: '[10, 25, 22, 18]'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '[10, 25, 22, 18]'
- en: ']'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: k = 0  #This is the index of the new list b.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0  #这是新列表b的索引。
- en: b = [None] * ELEMENTS
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: b = [None] * ELEMENTS
- en: 'for j in range(COLUMNS):        #Iterate through columns'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):        #遍历列'
- en: 'for i in range(ROWS):'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: b[k] = a[i][j]
  id: totrans-335
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b[k] = a[i][j]
- en: k += 1
  id: totrans-336
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: k += 1
- en: 'for k in range(ELEMENTS):'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 'for k in range(ELEMENTS):'
- en: print(b[k], end = "\t")
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: print(b[k], end = "\t")
- en: Instead of using the index k for the new list, you can also use the append()
    method, as shown here.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用新列表的索引k，您还可以使用append()方法，如下所示。
- en: '![](img/my_exercise_header.png) file_32.5b'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.5b'
- en: ROWS = 3
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 3
- en: COLUMNS = 4
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 4
- en: ELEMENTS = ROWS * COLUMNS
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = ROWS * COLUMNS
- en: a = [
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: a = [
- en: '[5, 9, 3, 2],'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '[5, 9, 3, 2],'
- en: '[11, 12, 4, 1],'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '[11, 12, 4, 1],'
- en: '[10, 25, 22, 18]'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '[10, 25, 22, 18]'
- en: ']'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: b = []  #Create a totally empty list
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: b = []  #创建一个完全空的列表
- en: 'for j in range(COLUMNS):        #Iterate through columns'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):        #遍历列'
- en: 'for i in range(ROWS):'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: b.append(a[i][j])
  id: totrans-352
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b.append(a[i][j])
- en: 'for k in range(ELEMENTS):'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 'for k in range(ELEMENTS):'
- en: print(b[k], end = "\t")
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: print(b[k], end = "\t")
- en: 32.6 Creating a Two-Dimensional List from a One-Dimensional List
  id: totrans-355
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.6 从一维列表创建二维列表
- en: To more easily understand how to create a two-dimensional list from a one-dimensional
    list, let's use an example.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更轻松地理解如何从一维列表创建二维列表，让我们用一个例子来说明。
- en: 'Write a Python program that creates a two-dimensional list of 3 × 4 from an
    existing one-dimensional list of 12 elements (shown below), as follows: The first
    three elements of the one-dimensional list must be placed in the first column
    of the two-dimensional list, the next three elements of the one-dimensional list
    must be placed in the next column of the two-dimensional list, and so on.'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，将一个包含12个元素的现有单维列表（如下所示）转换为一个3 × 4的二维列表，具体如下：单维列表的前三个元素必须放置在二维列表的第一列中，单维列表的下一个三个元素必须放置在二维列表的下一列中，依此类推。
- en: The one-dimensional list of 12 elements along with the new two-dimensional list
    are presented below.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是12个元素的单一列表和新的二维列表。
- en: '![Image](img/chapter32-11.png)'
  id: totrans-359
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter32-11.png)'
- en: The Python program that follows creates the new two-dimensional list, iterating
    through columns, which is more convenient. It uses the existing list given in
    the example.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的Python程序创建新的二维列表，通过遍历列来实现，这更为方便。它使用示例中给出的现有列表。
- en: '![](img/my_exercise_header.png) file_32.6'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.6'
- en: ROWS = 3
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: ROWS = 3
- en: COLUMNS = 4
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: COLUMNS = 4
- en: a = [5, 11, 10, 9, 12, 25, 3, 4, 22, 2, 1, 18]
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: a = [5, 11, 10, 9, 12, 25, 3, 4, 22, 2, 1, 18]
- en: 'k = 0   #This is the index of list a.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 'k = 0   #这是列表a的索引。'
- en: b = [[None] * COLUMNS for i in range(ROWS)]
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: b = [[None] * COLUMNS for i in range(ROWS)]
- en: 'for j in range(COLUMNS):            #Iterate through columns'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):            #遍历列'
- en: 'for i in range(ROWS):'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: b[i][j] = a[k]
  id: totrans-369
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b[i][j] = a[k]
- en: k += 1
  id: totrans-370
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: k += 1
- en: 'for i in range(ROWS):               #Iterate through rows'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):               #遍历行'
- en: 'for j in range(COLUMNS):'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: print(b[i][j], end = "\t")
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(b[i][j], end = "\t")
- en: print()
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: print()
- en: 32.7 Useful Data Structures Functions/Methods (Subprograms)
  id: totrans-375
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.7 有用的数据结构函数/方法（子程序）
- en: Counting the number of elements
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 计算元素数量
- en: len(structure_name)
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: len(structure_name)
- en: You already know this function from a previous chapter! In [Section 14.3](chapter14.html#toc_3)
    you learned that the len() function returns the number of characters in a string.
    Now it's time to learn that the function len() returns the number of elements
    of any structure such as a list or a dictionary!
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经从之前章节中了解过这个函数！在[第14.3节](chapter14.html#toc_3)中，您了解到len()函数返回字符串中的字符数。现在您需要了解的是，len()函数返回任何结构（如列表或字典）的元素数量！
- en: Example
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_32.7a'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.7a'
- en: a = [3, 6, 10, 12, 4, 2, 1]
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 12, 4, 2, 1]
- en: 'print(len(a))                   #It displays: 7'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(len(a))                   #它显示：7'
- en: length = len(a[2:4])
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: length = len(a[2:4])
- en: 'print(length)                   #It displays: 2'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(length)                   #它显示：2'
- en: 'for i in range(len(a)):'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(a)):'
- en: 'print (a[i], end = "  ")    #It displays: 3  6  10  12  4  2  1'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: print (a[i], end = "  ")    #它显示：3  6  10  12  4  2  1
- en: b = [
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: b = [
- en: '[5, 9, 3, 2],'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '[5, 9, 3, 2],'
- en: '[11, 12, 7, 1],'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[11, 12, 7, 1],'
- en: '[10, 25, 22, 18]'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '[10, 25, 22, 18]'
- en: ']'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: 'print(len(b))     #It displays: 3'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(len(b))     #它显示：3'
- en: 'print(len(b[0]))  #It displays: 4'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: print(len(b[0]))  #它显示：4
- en: '![](img/notice.jpg)In the two-dimensional list b, the len(b) function returns
    the value of 3 (three rows), while len(b[0]) returns the value of 4 (four columns).
    If you want to get the total number of elements in all the dimensions of the list,
    you could use the product len(b) * len(b[0]), which would equal the value of 12.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在二维列表b中，len(b)函数返回3（三行），而len(b[0])返回4（四列）。如果您想获取列表所有维度的元素总数，可以使用product
    len(b) * len(b[0])，这将等于12。'
- en: Finding the maximum value
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 查找最大值
- en: max(structure_name)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: max(structure_name)
- en: This function returns the greatest value of a list or tuple. In the case of
    a dictionary, it returns the greatest key.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回列表或元组中的最大值。在字典的情况下，它返回最大的键。
- en: Example
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_32.7b'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.7b'
- en: a = [3, 6, 10, 2, 1, 12, 4]
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 2, 1, 12, 4]
- en: 'print(max(a))                   #It displays: 12'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(max(a))                   #它显示：12'
- en: maximum = max(a[1:4])
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = max(a[1:4])
- en: 'print(maximum)                  #It displays: 10'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: print(maximum)                  #它显示：10
- en: b = [
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: b = [
- en: '[4, 6, 8],'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, 6, 8],'
- en: '[3, 11, 9],'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[3, 11, 9],'
- en: '[2, 9, 1]'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[2, 9, 1]'
- en: ']'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: 'print(max(b[1]))                #It displays: 11'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: print(max(b[1]))                #它显示：11
- en: c = ("Apollo", "Hermes", "Athena", "Aphrodite", "Dionysus")
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: c = ("Apollo", "Hermes", "Athena", "Aphrodite", "Dionysus")
- en: 'print(max(c))                   #It displays: Hermes'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(max(c))                   #它显示：Hermes'
- en: Finding the minimum value
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 查找最小值
- en: min(structure_name)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: min(structure_name)
- en: This function returns the smallest value of a list or a tuple. In the case of
    a dictionary, it returns the smallest key.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回列表或元组中的最小值。在字典的情况下，它返回最小的键。
- en: Example
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_32.7c'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.7c'
- en: a = [3, 6, 10, 2, 1, 12, 4]
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 2, 1, 12, 4]
- en: 'print(min(a))                   #It displays: 1'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(min(a))   #它显示：1'
- en: minimum = min(a[1:4])
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: minimum = min(a[1:4])
- en: 'print(minimum)                  #It displays: 2'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(minimum)   #它显示：2'
- en: b = [
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: b = [
- en: '[4, 6, 8],'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, 6, 8],'
- en: '[3, 11, 9],'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '[3, 11, 9],'
- en: '[2, 9, 1]'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '[2, 9, 1]'
- en: ']'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: 'print(min(b[0]))                #It displays: 4'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(min(b[0]))   #它显示：4'
- en: c = ("Apollo", "Hermes", "Athena", "Aphrodite", "Dionysus")
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: c = ("Apollo", "Hermes", "Athena", "Aphrodite", "Dionysus")
- en: 'print(min(c))                   #It displays: Aphrodite'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(min(c))   #它显示：Aphrodite'
- en: Sorting a list
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 排序列表
- en: 'Sorting is the process of putting the elements of a list in a certain order.
    Here you have two options: you can sort a list using the sort() method, or you
    can get a new sorted list from an initial list using the sorted() function, leaving
    the initial list intact.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 排序是将列表中的元素按照一定顺序排列的过程。这里你有两个选择：你可以使用 sort() 方法对列表进行排序，或者你可以使用 sorted() 函数从一个初始列表中获取一个新的排序后的列表，同时保持初始列表不变。
- en: Using the sort() method
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 sort() 方法
- en: list_name.sort([reverse = True])
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.sort([reverse = True])
- en: This method sorts a list in ascending or in descending order.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法可以按升序或降序对列表进行排序。
- en: Example
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_32.7d'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.7d'
- en: a = [3, 6, 10, 2, 1, 12, 4]
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 2, 1, 12, 4]
- en: a.sort()
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: a.sort()
- en: 'print(a)   #It displays: [1  2  3  4  6  10  12]'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)   #它显示：[1   2   3   4   6   10   12]'
- en: '#Sort in reverse order'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '#以降序排序'
- en: a.sort(reverse = True)
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: a.sort(reverse = True)
- en: 'print(a)   #It displays: [12  10  6  4  3  2  1]'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)   #它显示：[12   10   6   4   3   2   1]'
- en: b = [
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: b = [
- en: '[4, 6, 8],'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '[4, 6, 8],'
- en: '[3, 11, 9],'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '[3, 11, 9],'
- en: '[2, 9, 1]'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '[2, 9, 1]'
- en: ']'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '#Sort the last row'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: '#对最后一行进行排序'
- en: b[2].sort()
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: b[2].sort()
- en: 'for row in b:'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 'for row in b:'
- en: 'for element in row:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in row:'
- en: 'print(element, end = "\t")  #It displays: 4   6   8'
  id: totrans-451
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'print(element, end = "\t")   #它显示：4   6   8'
- en: 3   11  9
  id: totrans-452
  prefs:
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_BQ
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3   11   9
- en: print()                        #             1   2   9
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 'print()   #   1   2   9'
- en: c = ["Hermes", "Apollo", "Dionysus"]
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: c = ["Hermes", "Apollo", "Dionysus"]
- en: c.sort()
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: c.sort()
- en: 'print(c)   #It displays: [''Apollo'', ''Dionysus'', ''Hermes'']'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(c)   #它显示：[''Apollo'', ''Dionysus'', ''Hermes'']'
- en: '![](img/notice.jpg)The sort() method cannot be used with immutable data types,
    such as tuples.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)sort() 方法不能与不可变数据类型一起使用，例如元组。'
- en: Using the sorted() function
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 sorted() 函数
- en: sorted(structure_name [, reverse = True])
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: sorted(structure_name [, reverse = True])
- en: This function returns a new sorted list or a tuple, either in ascending or in
    descending order, leaving the initial list/tuple intact.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回一个新的排序后的列表或元组，可以是升序或降序，同时保持初始列表/元组不变。
- en: Example
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 示例
- en: '![](img/my_exercise_header.png) file_32.7e'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_32.7e'
- en: a = [3, 6, 10, 2, 1, 12, 4]
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 2, 1, 12, 4]
- en: b = sorted(a)
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: b = sorted(a)
- en: 'print(a)   #It displays: [3, 6, 10, 2, 1, 12, 4]'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)   #它显示：[3, 6, 10, 2, 1, 12, 4]'
- en: 'print(b)   #It displays: [1  2  3  4  6  10  12]'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(b)   #它显示：[1   2   3   4   6   10   12]'
- en: c = ["Hermes", "Apollo", "Dionysus"]
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: c = ["Hermes", "Apollo", "Dionysus"]
- en: 'for element in sorted(c, reverse = True):'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in sorted(c, reverse = True):'
- en: 'print(element, end = "  ")   #It displays: Hermes  Dionysus  Apollo'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(element, end = "   ")   #它显示：Hermes   Dionysus   Apollo'
- en: '32.8 Review Questions: True/False'
  id: totrans-470
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.8 复习问题：对错
- en: Choose true or false for each of the following statements.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择对或错。
- en: 1)Processing each row individually means that every row is processed separately,
    and the result of each row can then be used individually for further processing.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 1)逐行处理意味着每一行都是单独处理的，然后每一行的结果可以单独用于进一步处理。
- en: 2)The following code fragment displays the word “Okay” when the sum of the elements
    of each column is less than 100.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 2)以下代码片段在每列元素的总和小于100时显示单词“Okay”。
- en: 'for i in range(ROWS):'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total = 0
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total += a[i][j]
  id: totrans-477
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += a[i][j]
- en: 'if total < 100: print("Okay")'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 'if total < 100: print("Okay")'
- en: 3)Processing each column individually means that every column is processed separately
    and the result of each row can be then used individually for further processing.
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 3)逐列处理意味着每一列都是单独处理的，然后每一行的结果可以单独用于进一步处理。
- en: 4)The following code fragment displays the sum of the elements of each column.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 4)以下代码片段显示了每列元素的总和。
- en: total = 0
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'for i in range(ROWS):'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total += a[i][j]
  id: totrans-484
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += a[i][j]
- en: print(total)
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: 5)Suppose that there are 10 students and each one of them has received their
    grades for five lessons. Given this information, it is possible to design a list
    so that the rows refer to students and the columns refer to lessons, but not the
    other way around, that is, the rows referring to lessons and the columns referring
    to students.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 5)假设有10名学生，他们每人已经收到了五门课程的分数。根据这个信息，可以设计一个列表，其中行代表学生，列代表课程，但不能反过来，即行代表课程，列代表学生。
- en: 6)A one-dimensional list can be created from a two-dimensional list, but not
    the opposite.
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 6)可以从二维列表创建一维列表，但不能反过来。
- en: 7)A one-dimensional list can be created from a three-dimensional list.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 7)可以从三维列表创建一维列表。
- en: 8)The following two code fragments display the same value.
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 8)以下两个代码片段显示相同的值。
- en: a = [1, 6, 12, 2, 1]
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: a = [1, 6, 12, 2, 1]
- en: print(len(a))
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: print(len(a))
- en: a = "Hello"
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: a = "Hello"
- en: print(len(a))
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: print(len(a))
- en: 9)The following code fragment displays three values.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 9)以下代码片段显示三个值。
- en: a = [10, 20, 30, 40, 50]
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: a = [10, 20, 30, 40, 50]
- en: 'for i in range(3, len(a)):'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3, len(a)):'
- en: print(a[i])
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[i])
- en: 10)The following code fragment displays the values of all elements of the list
    b.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 10)以下代码片段显示列表b中所有元素的值。
- en: b = [10, 20, 30, 40, 50]
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: b = [10, 20, 30, 40, 50]
- en: 'for i in range(len(b)):'
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(b)):'
- en: print(i)
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: print(i)
- en: 11)The following code fragment doubles the values of all elements of the list
    b.
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 11)以下代码片段将列表b中所有元素的值加倍。
- en: 'for i in range(len(b)):'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(b)):'
- en: b[i] *= 2
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: b[i] *= 2
- en: 12)The following code fragment displays the value of 30 on the screen.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 12)以下代码片段在屏幕上显示30的值。
- en: a = [20, 50, 10, 30, 15]
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: a = [20, 50, 10, 30, 15]
- en: print(max(a[2:len(a)]))
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: print(max(a[2:len(a)]))
- en: 13)The following code fragment displays the value of 50 on the screen.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 13)以下代码片段在屏幕上显示50的值。
- en: a = [20, 50, 10, 30, 15]
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: a = [20, 50, 10, 30, 15]
- en: b = [-1, -3, -2, -4, -1]
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: b = [-1, -3, -2, -4, -1]
- en: print(a[min(b)])
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: print(a[min(b)])
- en: 14)The following code fragment displays the smallest value of list b.
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 14)以下代码片段显示列表b的最小值。
- en: b = [3, 6, 10, 2, 1, 12, 4]
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: b = [3, 6, 10, 2, 1, 12, 4]
- en: b.sort()
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: b.sort()
- en: print(b[0])
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: print(b[0])
- en: 15)The following code fragment displays the smallest value of list b.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 15)以下代码片段显示列表b的最小值。
- en: b = [3, 1, 2, 10, 4, 12, 6]
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: b = [3, 1, 2, 10, 4, 12, 6]
- en: print(sorted(a, reverse = True)[-1])
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: print(sorted(a, reverse = True)[-1])
- en: 16)The following code fragment throws an error.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 16)以下代码片段会抛出错误。
- en: b = [3, 1, 2]
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: b = [3, 1, 2]
- en: a = sort(b)
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: a = sort(b)
- en: '32.9 Review Questions: Multiple Choice'
  id: totrans-522
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.9 复习问题：多项选择题
- en: Select the correct answer for each of the following statements.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 选择以下每个陈述的正确答案。
- en: 1)The following code fragment
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 1)以下代码片段
- en: 'for i in range(ROWS):'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total[i] = 0
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: total[i] = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total[i] += a[i][j]
  id: totrans-528
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total[i] += a[i][j]
- en: print(total[i])
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: print(total[i])
- en: a)displays the sum of the elements of each row.
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: a)显示每行的元素总和。
- en: b)displays the sum of the elements of each column.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: b)显示每列的元素总和。
- en: c)displays the sum of all the elements of the list.
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: c)显示列表中所有元素的总和。
- en: d)none of the above
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 2)The following code fragment
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 2)以下代码片段
- en: 'for j in range(COLUMNS):'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: total = 0
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(ROWS):'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total += a[i][j]
  id: totrans-538
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += a[i][j]
- en: print(total)
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: a)displays the sum of the elements of each row.
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: a)显示每行的元素总和。
- en: b)displays the sum of the elements of each column.
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: b)显示每列的元素总和。
- en: c)displays the sum of all the elements of the list.
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: c)显示列表中所有元素的总和。
- en: d)none of the above
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 3)The following code fragment
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 3)以下代码片段
- en: total = 0
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for j in range(COLUMNS):'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS):'
- en: 'for i in range(ROWS):'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: total += a[i][j]
  id: totrans-548
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += a[i][j]
- en: print(total)
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: a)displays the sum of the elements of each row.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: a)显示每行的元素总和。
- en: b)displays the sum of the elements of each column.
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: b)显示每列的元素总和。
- en: c)displays the sum of all the elements of the list.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: c)显示列表中所有元素的总和。
- en: d)none of the above
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 4)The following code fragment
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 4)以下代码片段
- en: b = [None] * (ROWS * COLUMNS)
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: b = [None] * (ROWS * COLUMNS)
- en: k = 0
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0
- en: 'for i in range(ROWS - 1, -1, -1):'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS - 1, -1, -1):'
- en: 'for j in range(0, COLUMNS, -1):'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(0, COLUMNS, -1):'
- en: b[k] = a[i][j]
  id: totrans-559
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b[k] = a[i][j]
- en: k += 1
  id: totrans-560
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: k += 1
- en: a)creates a one-dimensional list from a two-dimensional list.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: a)从二维列表创建一维列表。
- en: b)creates a two-dimensional list from a one-dimensional list.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: b)从一维列表创建二维列表。
- en: c)does not satisfy the property of definiteness
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: c)不满足确定性的性质
- en: d)none of the above
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上都不是
- en: 5)The following code fragment
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 5)以下代码片段
- en: b = [[None] * COLUMNS for i in range(ROWS)]
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: b = [[None] * COLUMNS for i in range(ROWS)]
- en: k = 0
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0
- en: 'for i in range(ROWS):'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ROWS):'
- en: 'for j in range(COLUMNS - 1, -1, -1):'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(COLUMNS - 1, -1, -1):'
- en: b[i][j] = a[k]
  id: totrans-570
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: b[i][j] = a[k]
- en: k += 1
  id: totrans-571
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: k += 1
- en: a)creates a one-dimensional list from a two-dimensional list.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: a)从二维列表创建一维列表。
- en: b)creates a two-dimensional list from a one-dimensional list.
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: b)从一维列表创建二维列表。
- en: c)none of the above
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上皆非
- en: 6)The following two code fragments
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 6)以下两个代码片段
- en: a = [3, 6, 10, 2, 4, 12, 1]
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 2, 4, 12, 1]
- en: 'for i in range(7):'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(7):'
- en: print(a[i])
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 打印a[i]
- en: a = [3, 6, 10, 2, 4, 12, 1]
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 2, 4, 12, 1]
- en: 'for i in range(len(a)):'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(a)):'
- en: print(a[i])
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: 打印a[i]
- en: a)produce the same results.
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: a)产生相同的结果。
- en: b)do not produce the same results.
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: b)不会产生相同的结果。
- en: c)none of the above
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上皆非
- en: 7)The following two code fragments
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 7)以下两个代码片段
- en: 'for i in range(len(a)):'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(a)):'
- en: print(a[i])
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 打印a[i]
- en: 'for element in a:'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in a:'
- en: print(element)
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: 打印element
- en: a)produce the same results.
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: a)产生相同的结果。
- en: b)do not produce the same results.
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: b)不会产生相同的结果。
- en: c)none of the above
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上皆非
- en: 8)The statement min(b[1:len(b)])
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 8)以下语句min(b[1:len(b)])
- en: a)returns the lowest value of a portion of list b.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: a)返回列表b一部分的最低值。
- en: b)returns the lowest value of list b.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: b)返回列表b的最低值。
- en: c)none of the above
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上皆非
- en: 9)The following code fragment
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 9)以下代码片段
- en: a = [3, 6, 10, 1, 4, 12, 2]
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: a = [3, 6, 10, 1, 4, 12, 2]
- en: print(a[-min(a)])
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 打印a[-min(a)]
- en: a)displays the value of 1 on the screen.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: a)在屏幕上显示1的值。
- en: b)displays the value of 3 on the screen.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: b)在屏幕上显示3的值。
- en: c)displays the value of 2 on the screen.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: c)在屏幕上显示2的值。
- en: d)none of the above
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 10)The following two code fragments
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 10)以下两个代码片段
- en: 'for i in range(len(a)):'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(len(a)):'
- en: print(sorted(a)[i])
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: 打印sorted(a)[i]
- en: 'for element in sorted(a):'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: 'for element in sorted(a):'
- en: print(element)
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: 打印element
- en: a)produce the same results, but the left program is faster.
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: a)产生相同的结果，但左边的程序更快。
- en: b)produce the same results, but the right program is faster.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: b)产生相同的结果，但右边的程序更快。
- en: c)do not produce the same results.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: c)不会产生相同的结果。
- en: d)none of the above
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: d)以上皆非
- en: 11)The following three code fragments
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: 11)以下三个代码片段
- en: b.sort(reverse = True)
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: b.sort(reverse = True)
- en: print(b[0])
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 打印b[0]
- en: print(sorted(b)[-1])
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 打印sorted(b)[-1]
- en: print(max(b))
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 打印max(b)
- en: a)display the greatest value of the list b on the screen.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: a)在屏幕上显示列表b的最大值。
- en: b)display the smallest value of the list b on the screen.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: b)在屏幕上显示列表b的最小值。
- en: c)none of the above
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: c)以上皆非
- en: 32.10 Review Exercises
  id: totrans-621
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 32.10 复习练习
- en: Complete the following exercises.
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)There are 15 students and each one of them has received their grades for five
    tests. Write a Python program that lets the user enter the grades (as a percentage)
    for each student for all tests. It then calculates, for each student, the average
    grade and displays it as a letter grade according to the following table.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 1)有15名学生，他们每个人都已经收到了五次测试的成绩。编写一个Python程序，让用户输入每个学生在所有测试中的成绩（作为百分比）。然后，为每个学生计算平均成绩，并根据以下表格显示为字母等级。
- en: '| Grade | Percentage |'
  id: totrans-624
  prefs: []
  type: TYPE_TB
  zh: '| Grade | Percentage |'
- en: '| A | 90 ‐ 100 |'
  id: totrans-625
  prefs: []
  type: TYPE_TB
  zh: '| A | 90 - 100 |'
- en: '| B | 80 ‐ 89 |'
  id: totrans-626
  prefs: []
  type: TYPE_TB
  zh: '| B | 80 - 89 |'
- en: '| C | 70 ‐ 79 |'
  id: totrans-627
  prefs: []
  type: TYPE_TB
  zh: '| C | 70 - 79 |'
- en: '| D | 60 ‐ 69 |'
  id: totrans-628
  prefs: []
  type: TYPE_TB
  zh: '| D | 60 - 69 |'
- en: '| E / F | 0 ‐ 59 |'
  id: totrans-629
  prefs: []
  type: TYPE_TB
  zh: '| E / F | 0 - 59 |'
- en: 2)On Earth, a free-falling object has an acceleration of 9.81 m/s² downward.
    This value is denoted by g. A student wants to calculate that value using an experiment.
    She allows five different objects to fall downward from a known height and measures
    the time they need to reach the floor. She does this 10 times for each object.
    Then, using a formula she calculates g for each object, for each fall. But since
    her chronometer is not so accurate, she needs a Python program that lets her enter
    all calculated values of g in a 5 × 10 list and then, it calculates and displays
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 2)在地球上，自由落体的加速度为9.81 m/s²向下。这个值用g表示。一名学生想通过实验计算这个值。她允许五个不同的物体从已知高度落下，并测量它们到达地板所需的时间。她为每个物体做了10次。然后，使用公式，她为每个物体、每次落下计算g值。但由于她的计时器不够准确，她需要一个Python程序，让她输入所有计算出的g值在一个5
    × 10的列表中，然后计算并显示
- en: a)for each object, the average value of g
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每个物体，g的平均值
- en: b)for each fall, the average value of g
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: b)对于每个秋季，g的平均值
- en: c)the overall average value of g
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: c)g的整体平均值
- en: 3)A basketball team with 15 players plays 12 matches. Write a Python program
    that lets the user enter, for each player, the number of points scored in each
    match. The program must then display
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 3)一个有15名球员的篮球队打了12场比赛。编写一个Python程序，让用户输入每个球员在每场比赛中得分的数量。然后程序必须显示
- en: a)for each player, the total number of points scored
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每个球员，总得分
- en: b)for each match, the total number of points scored
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: b)对于每场比赛，得分的总数
- en: 4)Write a Python program that lets the user enter the hourly measured temperatures
    of 20 cities for a period of one day, and then displays the hours in which the
    average temperature of all the cities was below 10 degrees Fahrenheit.
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 4)编写一个Python程序，让用户输入20个城市在一天内每小时测量的温度，然后显示所有城市的平均温度低于10华氏度的时段。
- en: 5)In a football tournament, a football team with 24 players plays 10 matches.
    Write a Python program that lets the user enter, for each player, a name as well
    as the number of goals they scored in each match. The program must then display
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 5)在一个足球锦标赛中，一支有24名球员的足球队进行了10场比赛。编写一个Python程序，让用户为每位球员输入姓名以及他们在每场比赛中进球的数量。然后程序必须显示
- en: a)for each player, his name and the average number of goals he scored
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每位球员，他的姓名和他平均进球数
- en: b)for each match, the index number of the match (1, 2, 3, and so on) and the
    total number of goals scored
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: b)对于每场比赛，比赛的索引编号（1、2、3等等）和总进球数
- en: 6)There are 12 students and each one of them has received their grades for six
    lessons. Write a Python program that lets the user enter the name of the student
    as well as their grades in all lessons and then displays
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 6)有12名学生，他们每人已经完成了六节课的评分。编写一个Python程序，让用户输入学生的姓名以及他们在所有课程中的成绩，然后显示
- en: a)for each student, their name and average grade
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每位学生，他们的姓名和平均成绩
- en: b)for each lesson, the average grade
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: b)对于每节课，平均成绩
- en: c)the names of the students who have an average grade less than 60
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: c)平均成绩低于60分的学生的姓名
- en: d)the names of the students who have an average grade greater than 89, and the
    message “Bravo!” next to it
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: d)平均成绩高于89分的学生的姓名，旁边还有“Bravo！”的消息
- en: Assume that the user enters valid values between 0 and 100.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用户输入的值在0到100之间有效。
- en: 7)In a song contest, each artist sings a song of their choice. There are five
    judges and 15 artists, each of whom is scored for their performance. Write a Python
    program that prompts the user to enter the names of the judges, the names of the
    artists, the title of the song that each artist sings, and the score they get
    from each judge. The program must then display
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在一场歌唱比赛中，每位艺术家唱一首自己选择的歌曲。有五位评委和15位艺术家，每位艺术家的表演都会得到评分。编写一个Python程序，提示用户输入评委的姓名、艺术家的姓名、每位艺术家唱的歌曲标题以及每位评委给出的分数。然后程序必须显示
- en: a)for each artist, their name, the title of the song, and their total score
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每位艺术家，他们的姓名、歌曲标题和他们的总分
- en: b)for each judge, their name and the average value of the score they gave
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
  zh: b)对于每位评委，他们的姓名和他们给出的平均分数
- en: 8)The Body Mass Index (BMI) is often used to determine whether a person is overweight
    or underweight for their height. The formula used to calculate BMI is
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 8)身体质量指数（BMI）常用于确定一个人是否因身高而超重或体重不足。计算BMI使用的公式是
- en: .![Image](img/chapter10-08.png)
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter10-08.png)
- en: Write a Python program that lets the user enter into two lists the weight (in
    pounds) and height (in inches) of 30 people, measured on a monthly basis, for
    a period of one year (January to December). The program must then calculate and
    display
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入30个人的体重（以磅为单位）和身高（以英寸为单位），这些数据是按月度测量的，为期一年（从一月到十二月）。然后程序必须计算并显示
- en: a)for each person, their average weight, average height, and average BMI
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每个人，他们的平均体重、平均身高和平均BMI
- en: b)for each person, their BMI in May and in August
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: b)对于每个人，他们在五月份和八月份的BMI
- en: Please note that all people are adults but some of them are between the ages
    of 18 and 25\. This means they may still grow taller, thus their height might
    be different each month!
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，所有人都是成年人，但其中一些人的年龄在18到25岁之间。这意味着他们可能还会长高，因此他们的身高可能会每个月都不同！
- en: 9)Write a Python program that lets the user enter the electric meter reading
    in kilowatt-hours (kWh) at the beginning and at the end of a month for 1000 consumers.
    The program must then calculate and display
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 9)编写一个Python程序，让用户输入1000个消费者在一个月开始和结束时的电表读数（千瓦时，kWh）。然后程序必须计算并显示
- en: a)for each consumer, the amount of kWh consumed and the amount of money that
    must be paid given a cost of each kWh of $0.07 and a value added tax (VAT) rate
    of 19%
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: a)对于每位消费者，消耗的千瓦时数和根据每千瓦时0.07美元的价格以及19%的增值税（VAT）率必须支付的费用
- en: b)the total consumption and the total amount of money that must be paid.
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: b)总消耗量和必须支付的总金额。
- en: 10)Write a Python program that prompts the user to enter an amount in US dollars
    and calculates and displays the corresponding currency value in Euros, British
    Pounds Sterling, Australian Dollars, and Canadian Dollars. The tables below contain
    the exchange rates for each currency for a period of five working days. The program
    must calculate the average value of each currency and do the conversions based
    on that average value.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: 10) 编写一个Python程序，提示用户输入美元金额，并计算并显示相应的欧元、英镑、澳大利亚元和加拿大元的货币价值。下表包含每种货币在五个工作日内的汇率。程序必须计算每种货币的平均价值，并基于该平均价值进行转换。
- en: '![Image](img/chapter32-12.png)'
  id: totrans-660
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter32-12.png)'
- en: 11)Gross pay depends on the pay rate and the total number of hours worked per
    week. However, if someone works more than 40 hours, they get paid time-and-a-half
    for all hours worked over 40\. Write a Python program that lets the user enter
    a pay rate, as well as the names of 10 employees and the number of hours that
    they worked each day (Monday to Friday). The program must then calculate and display
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: 11) 毛收入取决于工资率和每周工作的小时总数。然而，如果有人工作超过40小时，他们将获得加班费，即超过40小时的所有工作时间的1.5倍。编写一个Python程序，让用户输入工资率以及10名员工的姓名和每天（周一至周五）工作的小时数。然后程序必须计算并显示
- en: a)the names of employees who worked overtime
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: a) 加班员工的姓名
- en: b)for each employee, their name and the average daily gross pay
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: b) 对于每位员工，显示他们的名字和平均每日毛收入
- en: c)the total gross pay for all employees
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: c) 所有员工的总毛收入
- en: d)for each employee, their name, the name of the day they worked overtime (more
    than 8 hours), and the message “Overtime!”
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: d) 对于每位员工，显示他们的名字、加班工作（超过8小时）的日期，以及信息“加班！”
- en: e)for each day, the name of the day and the total gross pay
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: e) 对于每一天，显示日期和总毛收入
- en: '12)Write a Python program to create a one-dimensional list of 12 elements from
    the two-dimensional list shown below, as follows: the first row of the two-dimensional
    list must be placed in the first four positions of the one-dimensional list, the
    second row of the two-dimensional list must be placed in the next four positions
    of the one-dimensional list, and the last row of the two-dimensional list must
    be placed in the last four positions of the one-dimensional list.'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: 12) 编写一个Python程序，从以下二维列表创建一个包含12个元素的列表，如下所示：二维列表的第一行必须放置在一维列表的前四个位置，二维列表的第二行必须放置在一维列表的下一个四个位置，二维列表的最后一行必须放置在一维列表的最后四个位置。
- en: .![Image](img/chapter32-13.png)
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter32-13.png)
- en: '13)Write a Python program to create a 3 × 3 list from the one-dimensional list
    shown below, as follows: the first three elements of the one-dimensional list
    must be placed in the last row of the two-dimensional list, the next three elements
    of the one-dimensional list must be placed in the second row of the two-dimensional
    list, and the last three elements of the one-dimensional list must be placed in
    the first row of the two-dimensional list.'
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: 13) 编写一个Python程序，从以下一维列表创建一个3 × 3的列表，如下所示：一维列表的前三个元素必须放置在二维列表的最后一行，一维列表的下一个三个元素必须放置在二维列表的第二行，一维列表的最后三个元素必须放置在二维列表的第一行。
- en: '![Image](img/chapter32-14.png)'
  id: totrans-670
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter32-14.png)'
