- en: <st c="0">2</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Adding Advanced Core Features</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="31">After the setup, configuration, and initial development of a Flask
    web application in</st> [*<st c="118">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="127">, it is time to include other essential components of the Flask framework
    that will complete a web application.</st> <st c="239">These components, such
    as</st> *<st c="265">session handling</st>*<st c="281">,</st> *<st c="283">flash
    messaging</st>*<st c="298">,</st> *<st c="300">error handling</st>*<st c="314">,
    and</st> *<st c="320">software logging</st>*<st c="336">, can monitor and manage
    the interactions between the user and the internal transactions.</st> <st c="426">Moreover,
    Flask can also provide an understanding of how the system will cope with critical
    issues such as running time, security, smooth performance, and changes to adapt
    to the ever-changing</st> <st c="619">production environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="642">These major web components for building enterprise-grade applications
    supported by Flask will be the focus of this chapter.</st> <st c="767">We will
    also discuss the various approaches in designing the project structure once these
    core components become part of</st> <st c="888">the application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="904">Here are the topics that we will cover in</st> <st c="947">this
    chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="960">Structuring huge and</st> <st c="982">scalable projects</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="999">Applying object-relational</st> <st c="1027">mapping (ORM)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1040">Configuring the</st> <st c="1057">logging mechanism</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1074">Creating</st> <st c="1084">user sessions</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1097">Applying</st> <st c="1107">flash messages</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1121">Utilizing some advanced</st> <st c="1146">Jinja2 features</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1161">Implementing</st> <st c="1175">error-handling solutions</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1199">Adding</st> <st c="1207">static resources</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1223">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1246">This chapter will focus on ordering and product management transactions.</st>
    <st c="1320">The application prototype for this chapter, an</st> *<st c="1367">Online
    Shipping Management System</st>*<st c="1400">, covers some generic product inventory,
    an ordering module, a basic shipping flow structure, and some parts of the delivery
    management module.</st> <st c="1544">This prototype comes in three different implementations
    suited for a complex and scalable Flask web application, namely,</st> <st c="1665">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1679">The</st> `<st c="1684">ch02-factory</st>` <st c="1696">project
    that utilizes the application factory</st> <st c="1743">design pattern.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1758">The</st> `<st c="1763">ch02-blueprint</st>` <st c="1777">project
    that uses the</st> <st c="1800">Flask blueprint.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1816">The</st> `<st c="1821">ch02-blueprint-factory</st>` <st c="1843">project
    that uses both the application factory and</st> <st c="1895">blueprint structure.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1915">Like in</st> [*<st c="1924">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="1933">, the application uses</st> *<st c="1956">PostgreSQL</st>* <st c="1966">as
    a database, but this time with an ORM called</st> **<st c="2015">SQLAlchemy</st>**<st
    c="2025">. All these projects are uploaded</st> <st c="2059">at</st> [<st c="2062">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch02</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch02)<st
    c="2143">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2144">Structuring huge and scalable projects</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2183">Creating a directory structure for a</st> *<st c="2221">simple</st>*
    <st c="2227">Flask web application is very handy and easy, especially if there
    is only one module to build with few software features.</st> <st c="2350">But
    for complex and scalable</st> <st c="2378">enterprise-grade applications with
    an overwhelming number of features to support, the most common issue is always
    the</st> *<st c="2497">circular</st>* *<st c="2506">import problem</st>*<st c="2520">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2521">Important note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2536">A</st> *<st c="2539">circular import problem</st>* <st c="2562">happens
    when two or</st> <st c="2583">more modules import each other, creating a mutual
    dependency loop before the application’s full-blown execution.</st> <st c="2696">This
    scenario always causes unexpected application loading errors, missing modules,
    and even weird</st> <st c="2795">runtime problems.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="2812">Flask as a framework is very Pythonic, which means developers
    can decide on their approaches to structuring their applications.</st> <st c="2941">Unfortunately,
    not all directory structure designs push through due to circular import problems.</st>
    <st c="3038">However, three design patterns can provide a baseline structure for</st>
    <st c="3105">Flask projects: the</st> *<st c="3126">application factory design</st>*<st
    c="3152">, the</st> *<st c="3158">Blueprint approach</st>*<st c="3176">, and the</st>
    *<st c="3186">combined application factory and</st>* *<st c="3219">Blueprint template</st>*<st
    c="3237">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3238">Using the application factory</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3268">In</st> [*<st c="3272">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="3281">, the project structure used in our application was composed of modules
    and packages of various components</st> <st c="3388">such as the models, repository,
    services, templates, and the</st> `<st c="3449">main.py</st>` <st c="3456">file.</st>
    <st c="3463">The code organization was not within Flask’s standard but was considered
    a clean</st> <st c="3544">directory structure.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3564">One approach in building</st> <st c="3590">a Flask project is to
    use the</st> *<st c="3620">application factory</st>*<st c="3639">, a method consisting
    of the instantiation and configuration of the Flask instance.</st> <st c="3723">It
    loads the configuration file into the platform, sets up the necessary extension
    modules such as SQLAlchemy, and initializes the Flask constructor with parameters,
    such as</st> `<st c="3897">template_folder</st>` <st c="3912">and</st> `<st c="3917">static_folder</st>`<st
    c="3930">, before the</st> `<st c="3943">app</st>`<st c="3946">’s instantiation.</st>
    <st c="3965">With factory application, there is flexibility in dealing with configurations.</st>
    <st c="4044">An application may have a separate factory method for</st> *<st c="4098">testing</st>*<st
    c="4105">,</st> *<st c="4107">development</st>*<st c="4118">, and</st> *<st c="4124">production</st>*<st
    c="4134">, depending on the stages the application</st> <st c="4176">will undergo.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4189">But where to place this method definition?</st> <st c="4233">Before
    implementing this approach, separate all views and their related components from
    the general application components, such as exception classes and error pages.</st>
    <st c="4400">Place the files in sub-folders, but you may also add more folders
    underneath to organize the modules further.</st> <st c="4510">Afterward, create
    an</st> `<st c="4531">__init__.py</st>` <st c="4542">file anywhere inside these
    sub-folders to implement the application factory method.</st> <st c="4627">In
    our case, the</st> `<st c="4644">__init__.py</st>` <st c="4655">file of the</st>
    `<st c="4668">app</st>` <st c="4671">sub-folder is where we defined the application
    factory.</st> *<st c="4728">Figure 2</st>**<st c="4736">.1</st>* <st c="4738">shows
    the directory structure for the</st> `<st c="4777">ch02-factory</st>` <st c="4789">project
    that contains the version of the</st> *<st c="4831">Online Shipping Management
    System</st>* <st c="4864">prototype with the</st> <st c="4884">application factory:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.1 – Flask project directory with application factory](img/B19383_02_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5064">Figure 2.1 – Flask project directory with application factory</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5125">The</st> `<st c="5130">__init__.py</st>` <st c="5141">file converts
    any directory to a package with files and folders importable to other modules.</st>
    <st c="5235">Any module script imported inside the</st> `<st c="5273">__init__.py</st>`
    <st c="5284">file exposes the script for import outside the package directory.</st>
    <st c="5351">Likewise, it also allows exposing modules from other packages that
    are out of reach of the internal modules due to relative path problems.</st> <st
    c="5490">On the other hand, the application automatically loads all imported modules
    and</st> <st c="5570">executes method calls</st> <st c="5592">found inside the</st>
    `<st c="5609">__init__.py</st>` <st c="5620">file.</st> <st c="5627">Thus, placing
    our application factory inside the</st> `<st c="5676">__init__.py</st>` <st c="5687">file
    of the</st> `<st c="5700">app</st>` <st c="5703">package exposes the function
    anywhere within the Flask project.</st> <st c="5768">The following is the content
    of our</st> `<st c="5804">app/__init__.py</st>` <st c="5819">file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6944">The common and standard name given to an application factory function
    is</st> `<st c="7018">create_app()</st>`<st c="7030">, but anyone can replace
    it with something appropriate for their project.</st> <st c="7104">In the given
    snippet, our application factory creates the Flask’s</st> `<st c="7170">app</st>`
    <st c="7173">instance, calls</st> `<st c="7190">db_init()</st>` <st c="7199">of
    the</st> <st c="7206">SQLAlchemy’s</st> `<st c="7220">db</st>` <st c="7222">instance
    to define and configure the ORM with the</st> `<st c="7273">app</st>` <st c="7276">object,
    and sets up the logging</st> <st c="7308">mechanism.</st> <st c="7320">Since it
    is in</st> `<st c="7335">__init__.py</st>`<st c="7346">, the</st> `<st c="7352">main.py</st>`
    <st c="7359">file must import the factory method to eventually create the object
    and run the application by calling the</st> `<st c="7467">app</st>`<st c="7470">’s</st>
    `<st c="7474">run()</st>` <st c="7479">method.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7487">To make the application factory method flexible and configurable,
    add local parameters to it.</st> <st c="7582">For instance, it can take a filename
    as a string parameter to accept a configuration filename, such that when an application
    runs in development mode, it can take</st> `<st c="7745">config_dev.toml</st>`
    <st c="7760">as its configuration file.</st> <st c="7788">When shifting the deployment
    to the production server, it can accept a new filename and replace the existing
    config with a production configuration file, say</st> `<st c="7946">config_prod.toml</st>`<st
    c="7962">, to reload all the environment variables intended for the</st> <st c="8021">production
    server.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8039">Utilizing the current_app proxy</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="8071">Using the application factory design</st> <st c="8109">pattern
    in structuring the application makes it impossible to access the</st> `<st c="8182">app</st>`
    <st c="8185">instance from</st> `<st c="8200">main.py</st>` <st c="8207">in the
    views and other components requiring it, without encountering</st> *<st c="8277">circular
    import issues</st>*<st c="8299">. Instead of importing the</st> `<st c="8326">app</st>`
    <st c="8329">object in the modules of the</st> `<st c="8359">app</st>` <st c="8362">directory,
    we establish the application context in</st> `<st c="8414">create_app()</st>`
    <st c="8426">to utilize the proxy</st> `<st c="8448">app</st>` <st c="8451">object</st>
    <st c="8459">called</st> `<st c="8466">current_app</st>`<st c="8477">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8478">In Flask, the application context manages configuration variables,
    view data, loggers, database details, and other custom objects at the application
    level during a request.</st> <st c="8652">There are two ways of creating the</st>
    <st c="8687">application context:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8707">Explicitly pushing the application context using the</st> `<st
    c="8761">push()</st>` <st c="8767">method, allowing access to the</st> `<st c="8799">current_app</st>`
    <st c="8810">from anywhere in the application for</st> <st c="8848">every request:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="9149">with app.app_context():</st> from app.views import login
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import menu
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import customer
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import admin
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import product
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import order
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import payment
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: from app.views import shipping
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="9406">Instead of accessing the</st> `<st c="9432">app</st>` <st c="9435">instance
    from the</st> `<st c="9454">__init__.py</st>` <st c="9465">file to implement views
    in the</st> `<st c="9497">views.shipping</st>` <st c="9511">module, which definitely
    can cause circular import problems due to the</st> `<st c="9583">current_app()</st>`<st
    c="9596">’s import to the</st> `<st c="9614">views.shipping</st>` <st c="9628">module,
    the application can now allow the use of the</st> `<st c="9682">current_app</st>`
    <st c="9693">proxy to build</st> `<st c="9709">views.shipping</st>` <st c="9723">because
    of the</st> `<st c="9739">with</st>`<st c="9743">-context block pushing the module
    script to the application context.</st> <st c="9813">The following code shows
    the use of the proxy object in creating the</st> `<st c="9882">add_delivery_officer</st>`
    <st c="9902">view function that inserts delivery officer profile details into</st>
    <st c="9968">the database:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10625">The</st> `<st c="10630">current_app</st>` <st c="10641">is part
    of the</st> `<st c="10657">flask</st>` <st c="10662">module that can provide all
    the necessary decorators and utilities for building the view functions and other
    components, as long as the module scripts are</st> *<st c="10818">within the bounds
    of the application context</st>* <st c="10862">pushed by</st> `<st c="10873">create_app()</st>`<st
    c="10885">. In the</st> `<st c="10894">add_delivery_officer</st>` <st c="10914">view
    function, the</st> `<st c="10934">current_app</st>` <st c="10945">provides</st>
    <st c="10954">the</st> `<st c="10959">route()</st>` <st c="10966">decorator and
    the</st> `<st c="10985">logger</st>` <st c="10991">instance configured by the</st>
    <st c="11019">application factory.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11039">Storing data to the application context</st>
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: <st c="11079">Now, the application context in</st> <st c="11111">Flask is like
    a mini-layer created on top of the request context for every request-response
    transaction.</st> <st c="11217">There is always a new context in every request,
    so all application-level data are short-lived in Flask applications.</st> <st
    c="11334">During this span, we can store data using another application-level
    proxy object, the</st> `<st c="11420">g</st>` <st c="11421">component.</st> <st
    c="11433">The following snippet shows how to create and destroy application context</st>
    <st c="11507">data objects:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11741">The</st> `<st c="11746">get_database()</st>` <st c="11760">method
    stores the</st> `<st c="11779">db</st>` <st c="11781">instance instantiated by</st>
    `<st c="11807">create_app()</st>` <st c="11819">into the context through the</st>
    `<st c="11849">g</st>` <st c="11850">proxy.</st> <st c="11858">Before storing
    the data, it is always a good practice to first verify whether the object is already
    in</st> `<st c="11961">g</st>`<st c="11962">. On the other hand, the</st> `<st
    c="11987">teardown_database()</st>` <st c="12006">has a</st> `<st c="12013">@app.teardown_appcontext</st>`
    <st c="12037">decorator that allows the automatic calling of the method before
    the request context ends.</st> <st c="12129">The</st> `<st c="12133">pop()</st>`
    <st c="12138">method of</st> `<st c="12149">g</st>` <st c="12150">removes or deallocates
    the data from the context before Flask destroys the whole</st> <st c="12232">application
    context.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12252">Accessing</st> `<st c="12263">g</st>` <st c="12264">for storing
    data</st> <st c="12282">will not always work in the application.</st> <st c="12323">The
    appropriate place to create the context data or call our</st> `<st c="12384">get_database()</st>`
    <st c="12398">method is in the</st> `<st c="12416">@before_request</st>` <st c="12431">method.</st>
    <st c="12440">This method automatically executes before any request transactions
    start.</st> <st c="12514">The context data in</st> `<st c="12534">g</st>` <st
    c="12535">will only be accessible to any view function after the execution of
    the</st> `<st c="12608">@before_request</st>` <st c="12623">event method.</st>
    <st c="12638">In other words, all resources shared through</st> `<st c="12683">g</st>`
    <st c="12684">will be accessible only within the request-response scope.</st>
    <st c="12744">Accessing</st> `<st c="12754">g</st>` <st c="12755">context data
    not set in</st> `<st c="12780">@before_request</st>` <st c="12795">can cause</st>
    `<st c="12806">ValueError</st>`<st c="12816">. Thus, we invoke our</st> `<st c="12838">get_database()</st>`
    <st c="12852">method in the following</st> `<st c="12877">@</st>``<st c="12878">before_request</st>`
    <st c="12892">implementation:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '@current_app.route(''/login/list'', methods=[''GET''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def list_login():'
  prefs: []
  type: TYPE_NORMAL
- en: repo = LoginRepository(<st c="13158">g.db</st>)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: users = repo.select_all()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: session['sample'] = 'trial'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: flash('List of user credentials')
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('login/login_list.html', users=users) , 200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: from flask import Blueprint <st c="16001">home_bp = Blueprint('home_bp', __name__,</st><st
    c="16041">template_folder='pages',</st><st c="16066">static_folder='resources',
    static_url_path='static')</st> import modules.home.views.menu
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: from flask import Blueprint <st c="16264">login_bp = Blueprint('login_bp', __name__,</st><st
    c="16306">template_folder='pages',</st><st c="16331">static_folder='resources',
    static_url_path='static')</st> import modules.login.views.login
  prefs: []
  type: TYPE_NORMAL
- en: import modules.login.views.admin
  prefs: []
  type: TYPE_NORMAL
- en: import modules.login.views.customer
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="17451">from modules.login import login_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="17486">@login_bp.route(''/admin/add'', methods = [''GET'', ''POST''])</st>
    def add_admin():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''POST'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: app.logger.info('add_admin POST view executed')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = AdminRepository(db_session)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('admin_details_form.html', logins=logins), 200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: app.logger.info('add_admin GET view executed')
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logins = get_login_id(1, db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('admin_details_form.html', logins=logins), 200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: from flask import Flask
  prefs: []
  type: TYPE_NORMAL
- en: app = Flask(__name__, template_folder='pages')
  prefs: []
  type: TYPE_NORMAL
- en: app.config.from_file('config.toml', toml.load) <st c="18512">from modules.home
    import home_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18544">from modules.login import login_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18579">from modules.order import order_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18614">from modules.payment import payment_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18653">from modules.shipping import shipping_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18694">from modules.product import product_bp</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18733">app.register_blueprint(home_bp, url_prefix='/ch02')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18785">app.register_blueprint(login_bp, url_prefix='/ch02')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18838">app.register_blueprint(order_bp, url_prefix='/ch02')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18891">app.register_blueprint(payment_bp, url_prefix='/ch02')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18946">app.register_blueprint(shipping_bp, url_prefix='/ch02')</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19002">app.register_blueprint(product_bp, url_prefix='/ch02')</st> from
    modules.model.db import *
  prefs: []
  type: TYPE_NORMAL
- en: 'if __name__ == ''__main__'':'
  prefs: []
  type: TYPE_NORMAL
- en: app.run()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: import toml
  prefs: []
  type: TYPE_NORMAL
- en: from flask import Flask
  prefs: []
  type: TYPE_NORMAL
- en: from flask_sqlalchemy import SQLAlchemy
  prefs: []
  type: TYPE_NORMAL
- en: db = SQLAlchemy() <st c="21209">def create_app(config_file):</st> app = Flask(__name__,
    template_folder='../pages', static_folder='../resources')
  prefs: []
  type: TYPE_NORMAL
- en: app.config.from_file(config_file, toml.load)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … … <st c="21387">with app.app_context():</st><st c="21410">from modules.home
    import home_bp</st><st c="21443">from modules.login import login_bp</st><st c="21478">from
    modules.order import order_bp</st> … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … … <st c="21537">app.register_blueprint(home_bp, url_prefix='/ch02')</st><st
    c="21588">app.register_blueprint(login_bp, url_prefix='/ch02')</st><st c="21641">app.register_blueprint(order_bp,
    url_prefix='/ch02')</st> … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return app
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: pip install psycopg2-binary flask-sqlalchemy
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: from sqlalchemy import create_engine
  prefs: []
  type: TYPE_NORMAL
- en: from sqlalchemy.ext.declarative import declarative_base
  prefs: []
  type: TYPE_NORMAL
- en: from sqlalchemy.orm import sessionmaker, scoped_session
  prefs: []
  type: TYPE_NORMAL
- en: DB_URL = "postgresql://<username>:<password>@localhost:5433/sms" <st c="24558">engine
    = create_engine(DB_URL)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="24588">db_session = scoped_session(sessionmaker(autocommit=False, autoflush=False,
    bind=engine))</st> Base = declarative_base()
  prefs: []
  type: TYPE_NORMAL
- en: 'def init_db():'
  prefs: []
  type: TYPE_NORMAL
- en: import modules.model.db
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <st c="25575">from sqlalchemy import Time, Column, ForeignKey, Integer, String,
    Float, Date, Sequence</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25663">from sqlalchemy.orm import relationship</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25703">from modules.model.config import Base</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="25741">class Login(Base):</st><st c="25760">__tablename__ = 'login'</st>
    id = <st c="25790">Column</st>(Integer, Sequence('login_id_seq', increment=1),
    <st c="25846">primary_key = True</st>)
  prefs: []
  type: TYPE_NORMAL
- en: username = <st c="25878">Column</st>(<st c="25886">String</st>(45))
  prefs: []
  type: TYPE_NORMAL
- en: password = <st c="25910">Column</st>(<st c="25918">String</st>(45))
  prefs: []
  type: TYPE_NORMAL
- en: user_type = <st c="25943">Column</st>(<st c="25951">Integer</st>)
  prefs: []
  type: TYPE_NORMAL
- en: admins = <st c="25970">relationship</st>('Admin', <st c="25993">back_populates="login"</st>,
    <st c="26017">uselist=False</st>)
  prefs: []
  type: TYPE_NORMAL
- en: customer = <st c="26044">relationship</st>('Customer', <st c="26070">back_populates="login"</st>,
    <st c="26094">uselist=False</st>)
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, username, password, user_type, id = None):'
  prefs: []
  type: TYPE_NORMAL
- en: self.id = id
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.username = username
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.password = password
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.user_type = user_type
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def __repr__(self):'
  prefs: []
  type: TYPE_NORMAL
- en: return f"<Login {self.id} {self.username} {self.password} {self.user_type}>"
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27134">class Customer(Base):</st> __tablename__ = 'customer'
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, ForeignKey('login.id'), primary_key = True)
  prefs: []
  type: TYPE_NORMAL
- en: firstname = Column(String(45))
  prefs: []
  type: TYPE_NORMAL
- en: lastname = Column(String(45))
  prefs: []
  type: TYPE_NORMAL
- en: middlename = Column(String(45))
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … … <st c="27354">login = relationship('Login', back_populates="customer")</st>
    orders = relationship('Orders', back_populates="customer")
  prefs: []
  type: TYPE_NORMAL
- en: shippings = relationship('Shipping', back_populates="customer")
  prefs: []
  type: TYPE_NORMAL
- en: …  … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'class Orders(Base):'
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'orders'
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, Sequence('orders_id_seq', increment=1), primary_key = True)
  prefs: []
  type: TYPE_NORMAL
- en: pid = Column(Integer, ForeignKey('products.id'), nullable = False)
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: product = relationship('Products', back_populates="orders")
  prefs: []
  type: TYPE_NORMAL
- en: customer = relationship('Customer', back_populates="orders")
  prefs: []
  type: TYPE_NORMAL
- en: payment = relationship('Payment', back_populates="order", uselist=False)
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'class Payment(Base):'
  prefs: []
  type: TYPE_NORMAL
- en: __tablename__ = 'payment'
  prefs: []
  type: TYPE_NORMAL
- en: id = Column(Integer, Sequence('payment_id_seq', increment=1), primary_key =
    True)
  prefs: []
  type: TYPE_NORMAL
- en: order_no = Column(String, ForeignKey('orders.order_no'), nullable = False)
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs: []
  type: TYPE_NORMAL
- en: order = relationship('Orders', back_populates="payment")
  prefs: []
  type: TYPE_NORMAL
- en: payment_types = relationship('PaymentType', back_populates="payment")
  prefs: []
  type: TYPE_NORMAL
- en: shipping  = relationship('Shipping', back_populates="payment", uselist=False)
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: from typing import List, Any, Dict
  prefs: []
  type: TYPE_NORMAL
- en: from modules.model.db import Products
  prefs: []
  type: TYPE_NORMAL
- en: 'from main import app <st c="29633">from sqlalchemy.orm import Session</st>
    class ProductRepository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, <st c="29712">sess:Session</st>): <st c="29728">self.sess
    = sess</st> app.logger.info(''ProductRepository instance created'')'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'def insert(self, <st c="30361">prod:Products</st>) -> bool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'try: <st c="30391">self.sess.add(prod)</st><st c="30410">self.sess.commit()</st>
    app.logger.info(''ProductRepository inserted record'')'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return True
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app.logger.info(f''ProductRepository insert error: {e}'')'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return False
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'def update(self, id:int, details:Dict[str, Any]) -> bool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'try: <st c="30833">self.sess.query(Products).filter(Products.id ==</st> <st
    c="30880">id).update(details)</st><st c="30900">self.sess.commit()</st> app.logger.info(''ProductRepository
    updated record'')'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return True
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app.logger.info(f''ProductRepository update error: {e}'')'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return False
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'def delete(self, id:int) -> bool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'try: <st c="31303">login = self.sess.query(Products).filter(</st> <st c="31344">Products.id
    == id).delete()</st><st c="31372">self.sess.commit()</st> app.logger.info(''ProductRepository
    deleted record'')'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return True
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app.logger.info(f''ProductRepository delete error: {e}'')'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return False
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'def select_all(self) -> List[Any]:'
  prefs: []
  type: TYPE_NORMAL
- en: users = self.sess.query(Products).all()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: app.logger.info('ProductRepository retrieved all record')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return users
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def select_one(self, id:int) -> Any:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: users =  self.sess.query(Products).filter( Products.id == id).one_or_none()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: app.logger.info('ProductRepository retrieved one record')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return users
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def select_one_code(self, code:str) -> Any:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: users =  self.sess.query(Products).filter( Products.code == code).one_or_none()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: app.logger.info('ProductRepository retrieved one record by product code')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return users
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'def configure_func_logging(log_path): <st c="35284">logging.getLogger("werkzeug").disabled
    = True</st> console_handler ='
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: logging.<st c="35356">StreamHandler</st>(stream=sys.stdout)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: console_handler.<st c="35407">setLevel(logging.DEBUG)</st> logging.basicConfig(<st
    c="35452">level=logging.DEBUG</st>,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: format='%(asctime)s %(levelname)s %(module)s
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '%(funcName)s %(message)s'','
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'datefmt=''%Y-%m-%d %H:%M:%S'', <st c="35702">dictConfig</st> using the JSON
    format, as shown in the following snippet:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '@current_app.route(''/payment/add'', methods = [''GET'', ''POST''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def add_payment():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''POST'': <st c="37169">current_app.logger.info(''add_payment
    POST view</st> <st c="37215">executed'')</st> repo_type = PaymentTypeRepository(db)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ptypes = repo_type.select_all()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: orders = get_all_order_no(db) <st c="37327">repo = PaymentRepository(db)</st>
    payment = Payment(order_no=request.form['order_no'], mode_payment=int(request.form['mode']),
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ref_no=request.form['ref_no'], date_payment=request.form['date_payment'],
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: amount=request.form['amount'])
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.insert(payment)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result == False:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: abort(500)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('payment/add_payment_form.html', orders=orders, ptypes=ptypes),
    200 <st c="37706">current_app.logger.info('add_payment GET view</st> <st c="37751">executed')</st>
    repo_type = PaymentTypeRepository(db)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ptypes = repo_type.select_all()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: orders = get_all_order_no(db)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('payment/add_payment_form.html', orders=orders, ptypes=ptypes),
    200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'class ShippingRepository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, db):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.db = db <st c="38192">current_app.logger.info(''ShippingRepository</st>
    <st c="38235">instance created'')</st> def insert(self, ship:Shipping) -> bool:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.db.session.add(ship)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.db.session.commit() <st c="38352">current_app.logger.info('ShippingRepository</st>
    <st c="38395">inserted record')</st> return True
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e: <st c="38449">current_app.logger.error(f''ShippingRepository</st>
    <st c="38494">insert error: {e}'')</st> return False'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: (config_dev.toml) <st c="39522">SECRET_KEY = "SpOn1ZyV4KE2FTlAUrWRZ_h7o5s"</st>
    (main.py)
  prefs: []
  type: TYPE_NORMAL
- en: app = Flask(__name__, template_folder='../app/pages', static_folder='../app/resources')
  prefs: []
  type: TYPE_NORMAL
- en: app.config.from_file("<st c="39748">config_dev.toml</st> file using the <st
    c="39779">from_file()</st> method of the property config, adding the <st c="39833">SECRET_KEY</st>
    environment variable in TOML file with the random key string to the config file
    will enable the user session automatically. Generally, it is always best practice
    to set a <st c="40015">SECRET_KEY</st> for any Flask applications.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="40053">Managing session data</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="40075">After successfully pushing the session</st> <st c="40115">context,
    our application can readily store data in the session by using the session object
    imported from the</st> `<st c="40224">flask</st>` <st c="40229">module.</st> <st
    c="40238">The following</st> `<st c="40252">login_db_ath()</st>` <st c="40266">view
    function stores the username in the session after a successful database validation
    of the</st> <st c="40362">user credentials:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: <st c="41157">Calling the</st> `<st c="41170">session</st>` <st c="41177">object
    with the</st> <st c="41193">name of the session attribute inside the brackets
    (e.g.,</st> `<st c="41251">session["username"]</st>`<st c="41270">) retrieves
    the session data at runtime.</st> <st c="41312">On the other hand, removing the
    session requires calling the</st> `<st c="41373">pop()</st>` <st c="41378">method
    of the session object.</st> <st c="41409">For instance, removing the username
    requires executing the</st> <st c="41468">following code:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <st c="41513">Validating the session attributes first before removing them or
    performing other transactions is always a</st> <st c="41620">recommendation, and
    the following snippet will show us how to validate</st> <st c="41691">session
    attributes:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: <st c="42193">As previously discussed, the method with the</st> `<st c="42239">@before_request</st>`
    <st c="42254">decorator always executes first before any route function performs.</st>
    <st c="42323">It processes some pre-condition transactions before the request
    reaches the route.</st> <st c="42406">In the given snippet,</st> `<st c="42428">@before_request</st>`
    <st c="42443">executes the</st> `<st c="42457">get_database()</st>` <st c="42471">method
    and checks whether an authenticated user has already logged into the applications.</st>
    <st c="42562">If there is a logged user, access to any endpoint, except for index
    and static resources, will always redirect the user to the menu page.</st> <st
    c="42700">Otherwise, it will always redirect the user to the</st> <st c="42751">login
    page.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="42762">Clearing all session data</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="42788">Instead of removing every session attribute, the</st> `<st c="42838">session</st>`
    <st c="42845">object has a</st> `<st c="42859">clear()</st>` <st c="42866">method
    that removes all session data in just one call.</st> <st c="42922">The following
    is a</st> `<st c="42941">logout</st>` <st c="42947">route that deletes all the
    session</st> <st c="42982">data before redirecting a user to the</st> <st c="43021">login
    page:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <st c="43188">There is no easy way in Flask to invalidate the session, but</st>
    `<st c="43250">clear()</st>` <st c="43257">can help prepare the session for another
    user to</st> <st c="43307">access it.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="43317">Now, another component that depends much on session handling is
    flash messaging, which stores messages of string type on</st> <st c="43439">a
    session.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="43449">Applying flash messages</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="43473">Flash messages are usually seen on validated forms rendering error
    messages for every text field with an invalid input</st> <st c="43592">value.</st>
    <st c="43600">Sometimes flash messages are headlines or important notifications
    printed in all caps on a</st> <st c="43691">web page.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="43700">Flask has a flash method that any view function can import to
    make flash messages.</st> <st c="43784">The following authentication process creates
    a flash message after validating the user credentials from</st> <st c="43888">the
    database:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: <st c="44535">The given</st> `<st c="44546">add_login()</st>` <st c="44557">view
    function uses</st> `<st c="44577">flash()</st>` <st c="44584">to create an error
    message if the credentials accepted by the route</st> <st c="44653">are already
    in the database.</st> <st c="44682">But it also sends a notification through</st>
    `<st c="44723">flash()</st>` <st c="44730">if the</st> `<st c="44738">insert</st>`
    <st c="44744">transaction</st> <st c="44757">is successful.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44771">Important note</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="44786">The Flask flashing system records messages to the user session
    at the end of every request and retrieves them on the following immediate</st>
    <st c="44924">request transaction.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="44944">Figure 2</st>**<st c="44953">.4</st>* <st c="44955">shows a
    sample screen result after adding an existing username</st> <st c="45019">and
    password:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 2.4 – A flash message for an invalid insert transaction](img/B19383_02_4.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="45153">Figure 2.4 – A flash message for an invalid insert transaction</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="45215">The Jinja2 template has</st> <st c="45240">access to Flask’s</st>
    `<st c="45258">get_flashed_messages()</st>` <st c="45280">method that retrieves
    all the flash messages or just the categorized ones.</st> <st c="45356">The following
    Jinja2 macro of the</st> `<st c="45390">/login/login_add.html</st>` <st c="45411">template
    renders the error flash message in</st> *<st c="45456">Figure 2</st>**<st c="45464">.4</st>*<st
    c="45466">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: <st c="45724">The</st> `<st c="45729">with</st>`<st c="45733">-block provides
    the context for checking whether there are error-typed flash messages that need
    rendering.</st> <st c="45841">If there are, a</st> `<st c="45857">for</st>`<st
    c="45860">-block will retrieve all these retrieved</st> <st c="45902">flash messages.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="45917">On the other hand, Jinja2</st> <st c="45944">can also retrieve
    uncategorized or generic flash messages from the view functions.</st> <st c="46027">The
    following macro retrieves a flash message from the</st> `<st c="46082">list_login()</st>`
    <st c="46094">route:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: <st c="46320">Given the use of macros in rendering flash messages, let us explore
    other advanced features of Jinja2 templates of our applications that can provide
    better</st> <st c="46477">template implementation.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46501">Utilizing some advanced Jinja2 features</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[*<st c="46541">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014) <st c="46551">introduced
    the Jinja2 engine and</st> <st c="46585">templating, and some of these Jinja constructs
    were applied to render</st> <st c="46655">HTML contents:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="46669">{{ variable }}</st>`<st c="46684">: The placeholder expression
    that renders a single-valued object from</st> <st c="46755">view functions.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="46770">{% statement %</st>`<st c="46785">}: The expression that implements</st>
    `<st c="46820">if</st>`<st c="46822">-</st>`<st c="46824">else</st>`<st c="46828">-conditions,</st>
    `<st c="46842">for</st>`<st c="46845">-loops,</st> `<st c="46854">block</st>`<st
    c="46859">-expressions</st> <st c="46873">for calling layout fragments,</st> `<st
    c="46903">with</st>`<st c="46907">-blocks for managing context, and</st> <st c="46942">macro
    calls.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="46954">But some Jinja2 features, such as applying the</st> `<st c="47002">with</st>`<st
    c="47006">-statement, macros, filters, and comments, can help generate better
    views for</st> <st c="47085">our routes.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47096">Applying with-blocks and macros</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47128">In the</st> *<st c="47136">Applying flash messages</st>* <st c="47159">section,
    templates used the</st> `<st c="47188">{% with %}</st>` <st c="47198">statement
    to extract the flash messages from the view</st> <st c="47252">functions and</st>
    `<st c="47267">{% macro %}</st>` <st c="47278">in optimizing our Jinja2 transactions.</st>
    <st c="47318">The</st> `<st c="47322">{% with %}</st>` <st c="47332">statement
    sets a context to limit the access or scope of some variables within the</st>
    `<st c="47416">with</st>`<st c="47420">-block.</st> <st c="47429">Access outside
    the block produces a</st> <st c="47465">Jinja2 error.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="47478">The</st> `<st c="47483">{% macro %}</st>` <st c="47494">block,
    on the other hand, pursues modular programming in Jinja2 templating.</st> <st
    c="47571">Every macro has a name and can have local parameters for reusability,
    and any templates can import and call them like typical methods.</st> <st c="47706">The
    following</st> `<st c="47720">/login/login_list.html</st>` <st c="47742">template
    renders the list of user credentials with a call on a macro that outputs an uncategorized</st>
    <st c="47842">flash message:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: <st c="48614">All macros are placed in a</st> <st c="48642">template file, like
    any Jinja2 expressions.</st> <st c="48686">In our application, the macros are
    found in</st> `<st c="48730">/macros/flask_segment.html</st>`<st c="48756">, and
    any template must import them from this file using the</st> `<st c="48817">{%
    from ...</st> <st c="48829">import ...</st> <st c="48840">with context %}</st>`
    <st c="48855">statement before utilizing them.</st> <st c="48889">In the given
    template,</st> `<st c="48912">render_list_flash()</st>` <st c="48931">is imported
    first before calling it like a method using the</st> `<st c="48992">{{}}</st>`
    <st c="48996">placeholder expression.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49020">Applying filters</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49037">To improve the look and feel and clarity of the rendered data,
    Jinja2 has several filter operations that can provide additional</st> <st c="49166">aesthetics
    that can make the rendition more appealing to the users.</st> <st c="49234">This</st>
    <st c="49239">process is called</st> `<st c="49296">|</st>`<st c="49298">) to
    pass the value to these operations.</st> <st c="49339">The following</st> `<st
    c="49353">product/list_product.html</st>` <st c="49378">page uses filter methods
    in rendering the list</st> <st c="49426">of products:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: <st c="50056">The given template uses the trim filter to strip the name data
    with leading and trailing whitespaces and an upper filter to convert the names
    to uppercase.</st> <st c="50213">Through the format filter, all the price data
    now</st> <st c="50263">includes a Philippine peso currency sign with two decimal
    places.</st> <st c="50329">Jinja2 supports several built-in filters that can help
    derive other features from, compute, manipulate, modify, compress, expand, and
    sanitize the raw data from the view functions to render all these details in a
    more</st> <st c="50547">presentable outcome.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50567">Adding comments</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="50583">It is always best practice to add comments in every template
    using the</st> `<st c="50655">{# comment #}</st>` <st c="50668">expression for
    sectioning and internal documentation purposes.</st> <st c="50732">These comments
    are not part of the rendition</st> <st c="50777">provided by the Jinja2</st> <st
    c="50800">template engine.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50816">Jinja2 expressions are not only applied to route views but also
    to error pages.</st> <st c="50897">Let us now learn how to render error pages
    in the Flask</st> <st c="50953">3.x framework.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50967">Implementing error-handling solutions</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[*<st c="51005">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014) <st c="51015">showcased
    the use of the</st> `<st c="51041">redirect()</st>` <st c="51051">method in rendering
    error pages given a status code, such as the status code</st> `<st c="51129">500</st>`<st
    c="51132">. We will now discuss a better way of managing exceptions</st> <st c="51189">and
    status codes, including triggering error pages per</st> <st c="51245">status code.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51257">Flask applications must always implement an error-handling mechanism
    using any of the</st> <st c="51344">following strategies:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51365">Registers a custom error function using the app’s</st> `<st c="51416">register_error_handler()</st>`
    <st c="51440">method.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51448">Creates an error handler using the app’s</st> `<st c="51490">errorhandler</st>`
    <st c="51502">decorator.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51513">Throws a</st> <st c="51523">custom</st> `<st c="51530">Exception</st>`
    <st c="51539">class.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="51546">Using the register_error_handler method</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51586">The declarative way to implement an</st> <st c="51623">error handler
    is to create a custom function</st> <st c="51668">and register it to the</st>
    `<st c="51691">app</st>`<st c="51694">’s</st> `<st c="51698">register_error_handler()</st>`
    <st c="51722">method.</st> <st c="51731">The custom function must have a single
    local parameter that will accept the injected error message from the platform.</st>
    <st c="51849">It must also return its assigned error page using the</st> `<st
    c="51903">make_response()</st>` <st c="51918">and</st> `<st c="51923">render_template()</st>`
    <st c="51940">methods with the option of passing the error message as context
    data to the template for rendering.</st> <st c="52041">The following is a snippet
    that shows</st> <st c="52079">the steps:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="52886">@app.errorhandler(404)</st> def not_found(e):'
  prefs: []
  type: TYPE_NORMAL
- en: 'return make_response(render_template("error/404.html", title="Page not found"),
    404) <st c="53013">@app.errorhandler(400)</st> def bad_request(e):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(render_template("error/400.html", title="Bad request"),
    400)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: <st c="53663">from werkzeug.exceptions import HTTPException</st> from flask
    import render_template, Response
  prefs: []
  type: TYPE_NORMAL
- en: 'class DuplicateRecordException(HTTPException):'
  prefs: []
  type: TYPE_NORMAL
- en: code = 500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'description = ''Record already exists.'' def get_response(self, environ=None):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: resp = Response()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: resp.response = render_template('error/generic.html',
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ex_message=self.description)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return resp
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="54900">@app.errorhandler(DuplicateRecordException)</st> def insert_record_exception(<st
    c="54973">e</st>): <st c="55045">DuplicateRecordException</st> class, the event
    handler will return its overridden <st c="55122">get_response()</st> method with
    the mapped Jinja2 error page and the HTTP status code <st c="55203">500</st>.
    But how about if the exception triggered is a Python-based type?'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="55272">Managing built-in exceptions</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="55301">All the handlers previously</st> <st c="55330">presented manage
    only the Flask exceptions, not the Python-specific exceptions.</st> <st c="55410">To
    include handling of those exceptions</st> <st c="55449">generated by some Python
    runtime issues, create a dedicated custom method handler that listens to all these
    exceptions, such as in the</st> <st c="55585">following implementation:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55844">The given error handler filters out all Flask-related exceptions
    and throws them for Flask handlers to process, but it renders a custom error page
    for any Python</st> <st c="56007">runtime exception.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56025">Triggering the error handlers</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56055">Sometimes it is recommended to explicitly trigger the error handler,
    especially in projects that utilize Blueprints as</st> <st c="56174">building
    blocks of their</st> <st c="56199">applications.</st> <st c="56214">A Blueprint
    module is not an independent sub-application that can own a URL context that listens
    to and calls the precise error handlers directly.</st> <st c="56361">So, to avoid
    some problems in calling the exact error handlers, transactions can invoke the</st>
    `<st c="56453">abort()</st>` <st c="56460">method with the proper HTTP status
    code, such as in the</st> <st c="56517">following snippet:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: <st c="57027">For custom or built-in exceptions, transactions can call the</st>
    `<st c="57089">raise()</st>` <st c="57096">method to trigger the error handler
    for the raised exception.</st> <st c="57159">The following view function raises
    the</st> `<st c="57198">DuplicateRecordException</st>` <st c="57222">class when
    an issue arises during order</st> <st c="57263">record insertion:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: <st c="57913">All the generic error</st> <st c="57936">handlers are placed in
    the</st> `<st c="57963">main.py</st>` <st c="57970">module, while the custom and
    component-specific exception classes are in separate</st> <st c="58053">modules
    outside of the Blueprints for coding standard purposes and</st> <st c="58120">easy
    debugging.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58135">Now, error pages and the rest of the Jinja2 templates can also
    use</st> *<st c="58203">CSS</st>*<st c="58206">,</st> *<st c="58208">JavaScript</st>*<st
    c="58218">,</st> *<st c="58220">images</st>*<st c="58226">, and other static resources
    to add look-and-feel features to</st> <st c="58288">their content.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58302">Adding static resources</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58326">Static resources provide the user experience for Flask web applications.</st>
    <st c="58400">These static resources include the needed CSS, JavaScript, images,
    and video files to be used by some template pages.</st> <st c="58518">Now, Flask</st>
    <st c="58528">does not allow adding these files anywhere in the project.</st>
    <st c="58588">Generally, the Flask constructor has a</st> `<st c="58627">static_folder</st>`
    <st c="58640">parameter that accepts a relative path of a dedicated directory
    for</st> <st c="58709">these files.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58721">In</st> `<st c="58725">ch02-factory</st>`<st c="58737">,</st>
    `<st c="58739">create_app()</st>` <st c="58751">configures the Flask instance
    to allow placing the resources in the</st> `<st c="58820">/resources</st>` <st
    c="58830">folder of the main project directory.</st> <st c="58869">The following
    snippet of</st> `<st c="58894">create_app()</st>` <st c="58906">shows the Flask
    instantiation with the</st> `<st c="58946">resource</st>` <st c="58954">folder
    setup:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: <st c="59198">Meanwhile, in the</st> `<st c="59217">ch02-blueprint</st>` <st
    c="59231">project, the main project and its Blueprints can have their respective</st>
    `<st c="59303">/resources</st>` <st c="59313">directory.</st> <st c="59325">The
    following snippet shows a Blueprint configuration with its own</st> `<st c="59392">resources</st>`
    <st c="59401">folder setup:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>Main Menu</title>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <link rel="stylesheet" href="<st c="61002">{{ url_for('static', filename='css/styles.css')}}</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <link rel="stylesheet" href="<st c="61085">{{ url_for('static', filename='css/bootstrap.min.css')}}</st>">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <script src="img/st>**<st c="61159">{{ url_for('static', filename='js/jquery-3.6.4.js')
    }}</st>**<st c="61214">"></script>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <script src="img/st>**<st c="61240">{{ url_for('static', filename='js/bootstrap.bundle.min.js')
    }}</st>**<st c="61303">"></script>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="container py-4 py-xl-5">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="row mb-5">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="col-md-8 col-xl-6 text-center mx-auto">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h2 class="display-4">Supply Management System Menu</h2>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p class="w-lg-50"><strong><em>{{ session['username']}}</em></strong> is logged
    in.</p>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="col">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="d-flex p-3">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="px-2">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <h5 class="mb-0 mt-1"><a href="#">Add Delivery Officer</a></h5>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="col">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="d-flex p-3">
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </html></st></st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
