- en: <st c="0">2</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">2</st>
- en: <st c="2">Adding Advanced Core Features</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">添加高级核心功能</st>
- en: <st c="31">After the setup, configuration, and initial development of a Flask
    web application in</st> [*<st c="118">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="127">, it is time to include other essential components of the Flask framework
    that will complete a web application.</st> <st c="239">These components, such
    as</st> *<st c="265">session handling</st>*<st c="281">,</st> *<st c="283">flash
    messaging</st>*<st c="298">,</st> *<st c="300">error handling</st>*<st c="314">,
    and</st> *<st c="320">software logging</st>*<st c="336">, can monitor and manage
    the interactions between the user and the internal transactions.</st> <st c="426">Moreover,
    Flask can also provide an understanding of how the system will cope with critical
    issues such as running time, security, smooth performance, and changes to adapt
    to the ever-changing</st> <st c="619">production environment.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="31">在完成 Flask 网络应用的设置、配置和初步开发后</st> [*<st c="118">第 1 章</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="127">，现在是时候包含 Flask 框架的其他基本组件，以完成一个网络应用。</st> <st c="239">这些组件，如</st> *<st
    c="265">会话处理</st>*<st c="281">、</st> *<st c="283">闪存消息</st>*<st c="298">、</st>
    *<st c="300">错误处理</st>*<st c="314">和</st> *<st c="320">软件日志</st>*<st c="336">，可以监控和管理用户与内部事务之间的交互。</st>
    <st c="426">此外，Flask 还可以提供对系统如何应对运行时间、安全性、平稳性能以及适应不断变化的</st> <st c="619">生产环境变化的理解。</st>
- en: <st c="642">These major web components for building enterprise-grade applications
    supported by Flask will be the focus of this chapter.</st> <st c="767">We will
    also discuss the various approaches in designing the project structure once these
    core components become part of</st> <st c="888">the application.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="642">这些由 Flask 支持的构建企业级应用的主要网络组件将是本章的重点。</st> <st c="767">一旦这些核心组件成为应用的一部分，我们还将讨论设计项目结构的各种方法。</st>
    <st c="888">应用。</st>
- en: <st c="904">Here are the topics that we will cover in</st> <st c="947">this
    chapter:</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="904">以下是本章我们将涉及的主题：</st> <st c="947">本章：</st>
- en: <st c="960">Structuring huge and</st> <st c="982">scalable projects</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="960">构建庞大且</st> <st c="982">可扩展的项目</st>
- en: <st c="999">Applying object-relational</st> <st c="1027">mapping (ORM)</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="999">应用对象关系映射（ORM）</st>
- en: <st c="1040">Configuring the</st> <st c="1057">logging mechanism</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1040">配置</st> <st c="1057">日志机制</st>
- en: <st c="1074">Creating</st> <st c="1084">user sessions</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1074">创建</st> <st c="1084">用户会话</st>
- en: <st c="1097">Applying</st> <st c="1107">flash messages</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1097">应用</st> <st c="1107">闪存消息</st>
- en: <st c="1121">Utilizing some advanced</st> <st c="1146">Jinja2 features</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1121">利用一些高级</st> <st c="1146">Jinja2 功能</st>
- en: <st c="1161">Implementing</st> <st c="1175">error-handling solutions</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1161">实现</st> <st c="1175">错误处理解决方案</st>
- en: <st c="1199">Adding</st> <st c="1207">static resources</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1199">添加</st> <st c="1207">静态资源</st>
- en: <st c="1223">Technical requirements</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1223">技术要求</st>
- en: <st c="1246">This chapter will focus on ordering and product management transactions.</st>
    <st c="1320">The application prototype for this chapter, an</st> *<st c="1367">Online
    Shipping Management System</st>*<st c="1400">, covers some generic product inventory,
    an ordering module, a basic shipping flow structure, and some parts of the delivery
    management module.</st> <st c="1544">This prototype comes in three different implementations
    suited for a complex and scalable Flask web application, namely,</st> <st c="1665">the
    following:</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1246">本章将专注于订单和产品管理交易。</st> <st c="1320">本章的应用原型，一个</st> *<st c="1367">在线货运管理系统</st>*<st
    c="1400">，涵盖了某些通用产品库存、一个订单模块、一个基本的货运流程结构以及交付管理模块的一些部分。</st> <st c="1544">这个原型提供了三种不同的实现方式，适合复杂且可扩展的
    Flask 网络应用，具体如下：</st> <st c="1665">以下：</st>
- en: <st c="1679">The</st> `<st c="1684">ch02-factory</st>` <st c="1696">project
    that utilizes the application factory</st> <st c="1743">design pattern.</st>
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1679">利用应用工厂设计模式的</st> `<st c="1684">ch02-factory</st>` <st c="1696">项目。</st>
- en: <st c="1758">The</st> `<st c="1763">ch02-blueprint</st>` <st c="1777">project
    that uses the</st> <st c="1800">Flask blueprint.</st>
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1758">使用</st> `<st c="1763">ch02-blueprint</st>` <st c="1777">项目的</st>
    <st c="1800">Flask 蓝图。</st>
- en: <st c="1816">The</st> `<st c="1821">ch02-blueprint-factory</st>` <st c="1843">project
    that uses both the application factory and</st> <st c="1895">blueprint structure.</st>
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1816">使用应用工厂和</st> `<st c="1821">ch02-blueprint-factory</st>` <st c="1843">项目同时使用蓝图结构。</st>
- en: <st c="1915">Like in</st> [*<st c="1924">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="1933">, the application uses</st> *<st c="1956">PostgreSQL</st>* <st c="1966">as
    a database, but this time with an ORM called</st> **<st c="2015">SQLAlchemy</st>**<st
    c="2025">. All these projects are uploaded</st> <st c="2059">at</st> [<st c="2062">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch02</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch02)<st
    c="2143">.</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1915">就像在</st> [*<st c="1924">第一章</st>](B19383_01.xhtml#_idTextAnchor014)<st
    c="1933">中一样，该应用程序使用</st> *<st c="1956">PostgreSQL</st> <st c="1966">作为数据库，但这次使用了一个名为</st>
    **<st c="2015">SQLAlchemy</st>** <st c="2025">的 ORM。</st> 所有这些项目都已上传至</st> <st
    c="2059">[https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch02](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch02)<st
    c="2143">。</st>
- en: <st c="2144">Structuring huge and scalable projects</st>
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2144">构建大型且可扩展的项目</st>
- en: <st c="2183">Creating a directory structure for a</st> *<st c="2221">simple</st>*
    <st c="2227">Flask web application is very handy and easy, especially if there
    is only one module to build with few software features.</st> <st c="2350">But
    for complex and scalable</st> <st c="2378">enterprise-grade applications with
    an overwhelming number of features to support, the most common issue is always
    the</st> *<st c="2497">circular</st>* *<st c="2506">import problem</st>*<st c="2520">.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2183">为</st> *<st c="2221">简单</st> <st c="2227">的 Flask 网络应用程序</st> 创建目录结构非常方便且简单，尤其是当只有一个模块需要构建且软件功能较少时。</st>
    <st c="2350">但对于复杂且可扩展的</st> <st c="2378">企业级应用程序，其中需要支持的功能数量庞大，最常见的问题总是</st>
    *<st c="2497">循环</st> *<st c="2506">导入问题</st> <st c="2520">。</st>
- en: <st c="2521">Important note</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2521">重要提示</st>
- en: <st c="2536">A</st> *<st c="2539">circular import problem</st>* <st c="2562">happens
    when two or</st> <st c="2583">more modules import each other, creating a mutual
    dependency loop before the application’s full-blown execution.</st> <st c="2696">This
    scenario always causes unexpected application loading errors, missing modules,
    and even weird</st> <st c="2795">runtime problems.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2536">当两个或更多模块相互导入时，就会发生</st> *<st c="2539">循环导入问题</st> <st c="2562">，在应用程序完全执行之前形成一个相互依赖的循环。</st>
    <st c="2696">这种情况总是会导致意外的应用程序加载错误、缺少模块，甚至奇怪的</st> <st c="2795">运行时问题</st>。
- en: '<st c="2812">Flask as a framework is very Pythonic, which means developers
    can decide on their approaches to structuring their applications.</st> <st c="2941">Unfortunately,
    not all directory structure designs push through due to circular import problems.</st>
    <st c="3038">However, three design patterns can provide a baseline structure for</st>
    <st c="3105">Flask projects: the</st> *<st c="3126">application factory design</st>*<st
    c="3152">, the</st> *<st c="3158">Blueprint approach</st>*<st c="3176">, and the</st>
    *<st c="3186">combined application factory and</st>* *<st c="3219">Blueprint template</st>*<st
    c="3237">.</st>'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2812">Flask 作为框架非常符合 Python 风格，这意味着开发者可以决定他们构建应用程序的结构方法。</st> <st c="2941">不幸的是，并非所有目录结构设计都能因为循环导入问题而成功实施。</st>
    <st c="3038">然而，三种设计模式可以为</st> <st c="3105">Flask 项目</st> 提供一个基本结构：即</st> *<st
    c="3126">应用程序工厂设计</st> <st c="3152">，</st> *<st c="3158">蓝图方法</st> <st c="3176">，以及</st>
    *<st c="3186">结合应用程序工厂和</st> *<st c="3219">蓝图模板</st> <st c="3237">。</st>
- en: <st c="3238">Using the application factory</st>
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3238">使用应用程序工厂</st>
- en: <st c="3268">In</st> [*<st c="3272">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="3281">, the project structure used in our application was composed of modules
    and packages of various components</st> <st c="3388">such as the models, repository,
    services, templates, and the</st> `<st c="3449">main.py</st>` <st c="3456">file.</st>
    <st c="3463">The code organization was not within Flask’s standard but was considered
    a clean</st> <st c="3544">directory structure.</st>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3268">在</st> [*<st c="3272">第一章</st>](B19383_01.xhtml#_idTextAnchor014)<st
    c="3281">中，我们应用程序中使用的项目结构由各种组件的模块和包组成，例如模型、存储库、服务、模板以及</st> `<st c="3449">main.py</st>`
    <st c="3456">文件。</st> <st c="3463">代码组织并不符合 Flask 的标准，但被认为是一个干净的</st> <st c="3544">目录结构</st>。
- en: <st c="3564">One approach in building</st> <st c="3590">a Flask project is to
    use the</st> *<st c="3620">application factory</st>*<st c="3639">, a method consisting
    of the instantiation and configuration of the Flask instance.</st> <st c="3723">It
    loads the configuration file into the platform, sets up the necessary extension
    modules such as SQLAlchemy, and initializes the Flask constructor with parameters,
    such as</st> `<st c="3897">template_folder</st>` <st c="3912">and</st> `<st c="3917">static_folder</st>`<st
    c="3930">, before the</st> `<st c="3943">app</st>`<st c="3946">’s instantiation.</st>
    <st c="3965">With factory application, there is flexibility in dealing with configurations.</st>
    <st c="4044">An application may have a separate factory method for</st> *<st c="4098">testing</st>*<st
    c="4105">,</st> *<st c="4107">development</st>*<st c="4118">, and</st> *<st c="4124">production</st>*<st
    c="4134">, depending on the stages the application</st> <st c="4176">will undergo.</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3564">构建Flask项目的一种方法是用</st> *<st c="3620">应用工厂</st>*<st c="3639">，这是一种由Flask实例的实例化和配置组成的方法。</st>
    <st c="3723">它将配置文件加载到平台中，设置必要的扩展模块，如SQLAlchemy，并在实例化`app`之前使用参数（如`template_folder`
    <st c="3897">和</st> `<st c="3912">static_folder</st>`<st c="3930">）初始化Flask构造函数。</st>
    <st c="3965">使用工厂应用，在处理配置方面具有灵活性。</st> <st c="4044">应用程序可能有一个单独的工厂方法用于</st> *<st
    c="4098">测试</st>*<st c="4105">、</st> *<st c="4107">开发</st>*<st c="4118">和</st>
    *<st c="4124">生产</st>*<st c="4134">，具体取决于应用程序将经历的阶段。</st>
- en: <st c="4189">But where to place this method definition?</st> <st c="4233">Before
    implementing this approach, separate all views and their related components from
    the general application components, such as exception classes and error pages.</st>
    <st c="4400">Place the files in sub-folders, but you may also add more folders
    underneath to organize the modules further.</st> <st c="4510">Afterward, create
    an</st> `<st c="4531">__init__.py</st>` <st c="4542">file anywhere inside these
    sub-folders to implement the application factory method.</st> <st c="4627">In
    our case, the</st> `<st c="4644">__init__.py</st>` <st c="4655">file of the</st>
    `<st c="4668">app</st>` <st c="4671">sub-folder is where we defined the application
    factory.</st> *<st c="4728">Figure 2</st>**<st c="4736">.1</st>* <st c="4738">shows
    the directory structure for the</st> `<st c="4777">ch02-factory</st>` <st c="4789">project
    that contains the version of the</st> *<st c="4831">Online Shipping Management
    System</st>* <st c="4864">prototype with the</st> <st c="4884">application factory:</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4189">但是这个方法定义应该放在哪里呢？</st> <st c="4233">在实施此方法之前，将所有视图及其相关组件从通用应用程序组件（如异常类和错误页面）中分离出来。</st>
    <st c="4400">将文件放在子文件夹中，但您也可以在下面添加更多文件夹以进一步组织模块。</st> <st c="4510">之后，在这些子文件夹中的任何位置创建一个</st>
    `<st c="4531">__init__.py</st>` <st c="4542">文件以实现应用工厂方法。</st> <st c="4627">在我们的案例中，</st>
    `<st c="4644">__init__.py</st>` <st c="4655">文件位于</st> `<st c="4668">app</st>`
    <st c="4671">子文件夹中，我们在这里定义了应用工厂。</st> *<st c="4728">图2</st>**<st c="4736">.1</st>*
    <st c="4738">显示了包含具有应用工厂的</st> `<st c="4777">ch02-factory</st>` <st c="4789">项目版本的原型目录结构：</st>
- en: '![Figure 2.1 – Flask project directory with application factory](img/B19383_02_1.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图2.1 – Flask项目目录与应用工厂](img/B19383_02_1.jpg)'
- en: <st c="5064">Figure 2.1 – Flask project directory with application factory</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5064">图2.1 – Flask项目目录与应用工厂</st>
- en: <st c="5125">The</st> `<st c="5130">__init__.py</st>` <st c="5141">file converts
    any directory to a package with files and folders importable to other modules.</st>
    <st c="5235">Any module script imported inside the</st> `<st c="5273">__init__.py</st>`
    <st c="5284">file exposes the script for import outside the package directory.</st>
    <st c="5351">Likewise, it also allows exposing modules from other packages that
    are out of reach of the internal modules due to relative path problems.</st> <st
    c="5490">On the other hand, the application automatically loads all imported modules
    and</st> <st c="5570">executes method calls</st> <st c="5592">found inside the</st>
    `<st c="5609">__init__.py</st>` <st c="5620">file.</st> <st c="5627">Thus, placing
    our application factory inside the</st> `<st c="5676">__init__.py</st>` <st c="5687">file
    of the</st> `<st c="5700">app</st>` <st c="5703">package exposes the function
    anywhere within the Flask project.</st> <st c="5768">The following is the content
    of our</st> `<st c="5804">app/__init__.py</st>` <st c="5819">file:</st>
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5125">`__init__.py`</st> <st c="5130">文件将任何目录转换为包含可导入其他模块的文件和文件夹的包。</st>
    <st c="5141">在`__init__.py` <st c="5273">文件内部导入的任何模块脚本都暴露给包目录外部的导入。</st> <st c="5284">同样，它还允许暴露由于相对路径问题而无法触及的来自其他包的模块。</st>
    <st c="5351">另一方面，应用程序自动加载所有导入的模块并</st> <st c="5570">执行`__init__.py` <st c="5609">文件内部的</st>
    <st c="5620">方法调用。</st> <st c="5627">因此，将我们的应用程序工厂放在`<st c="5676">__init__.py</st>
    <st c="5687">`文件中的`<st c="5700">app</st> <st c="5703">`包中，可以在Flask项目的任何地方暴露函数。</st>
    <st c="5768">以下是我们`<st c="5804">app/__init__.py</st> <st c="5819">`文件的内容：</st>
- en: '[PRE0]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="6944">The common and standard name given to an application factory function
    is</st> `<st c="7018">create_app()</st>`<st c="7030">, but anyone can replace
    it with something appropriate for their project.</st> <st c="7104">In the given
    snippet, our application factory creates the Flask’s</st> `<st c="7170">app</st>`
    <st c="7173">instance, calls</st> `<st c="7190">db_init()</st>` <st c="7199">of
    the</st> <st c="7206">SQLAlchemy’s</st> `<st c="7220">db</st>` <st c="7222">instance
    to define and configure the ORM with the</st> `<st c="7273">app</st>` <st c="7276">object,
    and sets up the logging</st> <st c="7308">mechanism.</st> <st c="7320">Since it
    is in</st> `<st c="7335">__init__.py</st>`<st c="7346">, the</st> `<st c="7352">main.py</st>`
    <st c="7359">file must import the factory method to eventually create the object
    and run the application by calling the</st> `<st c="7467">app</st>`<st c="7470">’s</st>
    `<st c="7474">run()</st>` <st c="7479">method.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6944">分配给应用程序工厂函数的通用和标准名称是</st> `<st c="7018">create_app()</st> <st c="7030">`，但任何人都可以用适合他们项目的适当名称替换它。</st>
    <st c="7104">在给定的代码片段中，我们的应用程序工厂创建了Flask的`<st c="7170">app</st> <st c="7173">`实例，调用了`<st
    c="7190">db_init()</st> <st c="7199">`的`<st c="7206">SQLAlchemy的`<st c="7220">db</st>
    <st c="7222">`实例，以使用`<st c="7273">app</st> <st c="7276">`对象定义和配置ORM，并设置了日志</st>
    <st c="7308">机制。</st> <st c="7320">由于它在`<st c="7335">__init__.py</st> <st c="7346">`中，所以`<st
    c="7352">main.py</st> <st c="7359">`文件必须导入工厂方法，最终通过调用`<st c="7467">app</st> <st
    c="7470">`的`<st c="7474">run()</st> <st c="7479">`方法来创建对象并运行应用程序。</st>
- en: <st c="7487">To make the application factory method flexible and configurable,
    add local parameters to it.</st> <st c="7582">For instance, it can take a filename
    as a string parameter to accept a configuration filename, such that when an application
    runs in development mode, it can take</st> `<st c="7745">config_dev.toml</st>`
    <st c="7760">as its configuration file.</st> <st c="7788">When shifting the deployment
    to the production server, it can accept a new filename and replace the existing
    config with a production configuration file, say</st> `<st c="7946">config_prod.toml</st>`<st
    c="7962">, to reload all the environment variables intended for the</st> <st c="8021">production
    server.</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使应用程序工厂方法灵活和可配置，向其中添加本地参数。</st> <st c="7582">例如，它可以接受一个字符串参数作为文件名，以接受配置文件名，这样当应用程序以开发模式运行时，它可以接受</st>
    `<st c="7745">config_dev.toml</st>` <st c="7760">作为其配置文件。</st> <st c="7788">当将部署转移到生产服务器时，它可以接受一个新的文件名，并用生产配置文件替换现有的配置，例如</st>
    `<st c="7946">config_prod.toml</st>`<st c="7962">，以重新加载所有针对</st> <st c="8021">生产服务器</st>
    的环境变量。
- en: <st c="8039">Utilizing the current_app proxy</st>
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="8039">利用当前应用程序代理</st>
- en: <st c="8071">Using the application factory design</st> <st c="8109">pattern
    in structuring the application makes it impossible to access the</st> `<st c="8182">app</st>`
    <st c="8185">instance from</st> `<st c="8200">main.py</st>` <st c="8207">in the
    views and other components requiring it, without encountering</st> *<st c="8277">circular
    import issues</st>*<st c="8299">. Instead of importing the</st> `<st c="8326">app</st>`
    <st c="8329">object in the modules of the</st> `<st c="8359">app</st>` <st c="8362">directory,
    we establish the application context in</st> `<st c="8414">create_app()</st>`
    <st c="8426">to utilize the proxy</st> `<st c="8448">app</st>` <st c="8451">object</st>
    <st c="8459">called</st> `<st c="8466">current_app</st>`<st c="8477">.</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8071">使用应用程序工厂设计</st> <st c="8109">模式来构建应用程序使得从</st> `<st c="8182">app</st>`
    <st c="8185">实例中访问</st> `<st c="8200">main.py</st>` <st c="8207">中的视图和其他需要它的组件变得不可能，否则会遇到</st>
    *<st c="8277">循环导入问题</st>*<st c="8299">。我们不是在</st> `<st c="8359">app</st>` <st
    c="8362">目录的模块中导入</st> `<st c="8326">app</st>` <st c="8329">对象，而是在</st> `<st c="8414">create_app()</st>`
    <st c="8426">中建立应用程序上下文，以利用名为</st> `<st c="8448">app</st>` <st c="8451">的代理</st>
    `<st c="8459">对象</st> <st c="8466">current_app</st>`<st c="8477">。</st>
- en: <st c="8478">In Flask, the application context manages configuration variables,
    view data, loggers, database details, and other custom objects at the application
    level during a request.</st> <st c="8652">There are two ways of creating the</st>
    <st c="8687">application context:</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8478">在Flask中，应用程序上下文在请求期间管理配置变量、视图数据、记录器、数据库细节和其他自定义对象。</st> <st c="8652">创建应用程序上下文有两种方法：</st>
- en: <st c="8707">Explicitly pushing the application context using the</st> `<st
    c="8761">push()</st>` <st c="8767">method, allowing access to the</st> `<st c="8799">current_app</st>`
    <st c="8810">from anywhere in the application for</st> <st c="8848">every request:</st>
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8707">显式地使用</st> `<st c="8761">push()</st>` <st c="8767">方法来推送应用程序上下文，允许在任何请求中从应用程序的任何地方访问</st>
    `<st c="8799">current_app</st>` <st c="8810">：</st>
- en: '[PRE1]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="9149">with app.app_context():</st> from app.views import login
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="9149">使用app.app_context():</st>从app.views导入login
- en: from app.views import menu
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入menu
- en: from app.views import customer
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入customer
- en: from app.views import admin
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入admin
- en: from app.views import product
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入product
- en: from app.views import order
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入order
- en: from app.views import payment
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入payment
- en: from app.views import shipping
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从app.views导入shipping
- en: '[PRE2]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="9406">Instead of accessing the</st> `<st c="9432">app</st>` <st c="9435">instance
    from the</st> `<st c="9454">__init__.py</st>` <st c="9465">file to implement views
    in the</st> `<st c="9497">views.shipping</st>` <st c="9511">module, which definitely
    can cause circular import problems due to the</st> `<st c="9583">current_app()</st>`<st
    c="9596">’s import to the</st> `<st c="9614">views.shipping</st>` <st c="9628">module,
    the application can now allow the use of the</st> `<st c="9682">current_app</st>`
    <st c="9693">proxy to build</st> `<st c="9709">views.shipping</st>` <st c="9723">because
    of the</st> `<st c="9739">with</st>`<st c="9743">-context block pushing the module
    script to the application context.</st> <st c="9813">The following code shows
    the use of the proxy object in creating the</st> `<st c="9882">add_delivery_officer</st>`
    <st c="9902">view function that inserts delivery officer profile details into</st>
    <st c="9968">the database:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9406">不是从</st> `<st c="9432">app</st>` <st c="9435">实例中通过</st> `<st c="9454">__init__.py</st>`
    <st c="9465">文件来在</st> `<st c="9497">views.shipping</st>` <st c="9511">模块中实现视图，这肯定会导致由于</st>
    `<st c="9583">current_app()</st>`<st c="9596">对</st> `<st c="9614">views.shipping</st>`
    <st c="9628">模块的导入而引起的循环导入问题，现在应用程序可以允许使用</st> `<st c="9682">current_app</st>`
    <st c="9693">代理来构建</st> `<st c="9709">views.shipping</st>` <st c="9723">，因为</st>
    `<st c="9739">with</st>`<st c="9743">-context block将模块脚本推送到应用程序上下文。</st> <st c="9813">以下代码展示了在创建将配送员资料详情插入到</st>
    `<st c="9882">add_delivery_officer</st>` <st c="9902">视图函数时使用代理对象的方法：</st>
- en: '[PRE3]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="10625">The</st> `<st c="10630">current_app</st>` <st c="10641">is part
    of the</st> `<st c="10657">flask</st>` <st c="10662">module that can provide all
    the necessary decorators and utilities for building the view functions and other
    components, as long as the module scripts are</st> *<st c="10818">within the bounds
    of the application context</st>* <st c="10862">pushed by</st> `<st c="10873">create_app()</st>`<st
    c="10885">. In the</st> `<st c="10894">add_delivery_officer</st>` <st c="10914">view
    function, the</st> `<st c="10934">current_app</st>` <st c="10945">provides</st>
    <st c="10954">the</st> `<st c="10959">route()</st>` <st c="10966">decorator and
    the</st> `<st c="10985">logger</st>` <st c="10991">instance configured by the</st>
    <st c="11019">application factory.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10625">`current_app`</st> <st c="10630">是</st> `<st c="10657">flask</st>`
    <st c="10662">模块的一部分，该模块可以提供构建视图函数和其他组件所需的所有必要的装饰器和实用工具，只要模块脚本位于</st> *<st c="10818">由</st>
    `<st c="10873">create_app()</st>`<st c="10885">创建的应用程序上下文范围内</st>* <st c="10862">。在</st>
    `<st c="10894">add_delivery_officer</st>` <st c="10914">视图函数中，</st> `<st c="10934">current_app</st>`
    <st c="10945">提供了</st> `<st c="10959">route()</st>` <st c="10966">装饰器和由</st> `<st
    c="10985">logger</st>` <st c="10991">实例配置的</st> `<st c="11019">application factory</st>`
    <st c="11091">。</st>
- en: <st c="11039">Storing data to the application context</st>
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <st c="11039">将数据存储到应用程序上下文中</st>
- en: <st c="11079">Now, the application context in</st> <st c="11111">Flask is like
    a mini-layer created on top of the request context for every request-response
    transaction.</st> <st c="11217">There is always a new context in every request,
    so all application-level data are short-lived in Flask applications.</st> <st
    c="11334">During this span, we can store data using another application-level
    proxy object, the</st> `<st c="11420">g</st>` <st c="11421">component.</st> <st
    c="11433">The following snippet shows how to create and destroy application context</st>
    <st c="11507">data objects:</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11079">现在，Flask中的应用程序上下文就像是在每个请求-响应事务之上创建的一个微型层。</st> <st c="11111">每次请求都会有一个新的上下文，因此Flask应用程序中的所有应用程序级数据都是短暂的。</st>
    <st c="11334">在这个时间段内，我们可以使用另一个应用程序级代理对象</st> `<st c="11420">g</st>` <st c="11421">组件来存储数据。</st>
    <st c="11433">以下代码片段展示了如何创建和销毁应用程序上下文</st> `<st c="11507">数据对象：</st>`
- en: '[PRE4]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="11741">The</st> `<st c="11746">get_database()</st>` <st c="11760">method
    stores the</st> `<st c="11779">db</st>` <st c="11781">instance instantiated by</st>
    `<st c="11807">create_app()</st>` <st c="11819">into the context through the</st>
    `<st c="11849">g</st>` <st c="11850">proxy.</st> <st c="11858">Before storing
    the data, it is always a good practice to first verify whether the object is already
    in</st> `<st c="11961">g</st>`<st c="11962">. On the other hand, the</st> `<st
    c="11987">teardown_database()</st>` <st c="12006">has a</st> `<st c="12013">@app.teardown_appcontext</st>`
    <st c="12037">decorator that allows the automatic calling of the method before
    the request context ends.</st> <st c="12129">The</st> `<st c="12133">pop()</st>`
    <st c="12138">method of</st> `<st c="12149">g</st>` <st c="12150">removes or deallocates
    the data from the context before Flask destroys the whole</st> <st c="12232">application
    context.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="11741">The</st> `<st c="11746">get_database()</st>` <st c="11760">方法将</st>
    `<st c="11779">db</st>` <st c="11781">实例存储到</st> `<st c="11807">create_app()</st>`
    <st c="11819">通过</st> `<st c="11849">g</st>` <st c="11850">代理创建的上下文中。</st> <st
    c="11858">在存储数据之前，始终先验证对象是否已经在</st> `<st c="11961">g</st>`<st c="11962">中，这是一个好的实践。</st>
    <st c="11987">另一方面，</st> `<st c="11987">teardown_database()</st>` <st c="12006">有一个</st>
    `<st c="12013">@app.teardown_appcontext</st>` <st c="12037">装饰器，允许在请求上下文结束时自动调用该方法。</st>
    <st c="12129">在Flask销毁整个</st> <st c="12232">应用程序上下文之前，</st> `<st c="12133">g</st>`
    <st c="12138">的</st> `<st c="12149">pop()</st>` <st c="12150">方法会从上下文中移除或释放数据。</st>
- en: <st c="12252">Accessing</st> `<st c="12263">g</st>` <st c="12264">for storing
    data</st> <st c="12282">will not always work in the application.</st> <st c="12323">The
    appropriate place to create the context data or call our</st> `<st c="12384">get_database()</st>`
    <st c="12398">method is in the</st> `<st c="12416">@before_request</st>` <st c="12431">method.</st>
    <st c="12440">This method automatically executes before any request transactions
    start.</st> <st c="12514">The context data in</st> `<st c="12534">g</st>` <st
    c="12535">will only be accessible to any view function after the execution of
    the</st> `<st c="12608">@before_request</st>` <st c="12623">event method.</st>
    <st c="12638">In other words, all resources shared through</st> `<st c="12683">g</st>`
    <st c="12684">will be accessible only within the request-response scope.</st>
    <st c="12744">Accessing</st> `<st c="12754">g</st>` <st c="12755">context data
    not set in</st> `<st c="12780">@before_request</st>` <st c="12795">can cause</st>
    `<st c="12806">ValueError</st>`<st c="12816">. Thus, we invoke our</st> `<st c="12838">get_database()</st>`
    <st c="12852">method in the following</st> `<st c="12877">@</st>``<st c="12878">before_request</st>`
    <st c="12892">implementation:</st>
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12252">访问</st> `<st c="12263">g</st>` <st c="12264">以存储数据</st> <st c="12282">在应用程序中并不总是有效。</st>
    <st c="12323">创建上下文数据或调用我们的</st> `<st c="12384">get_database()</st>` <st c="12398">方法适当的地点是在</st>
    `<st c="12416">@before_request</st>` <st c="12431">方法。</st> <st c="12440">此方法在请求事务开始之前自动执行。</st>
    <st c="12514">在</st> `<st c="12534">g</st>` <st c="12535">中的上下文数据将在</st> `<st
    c="12608">@before_request</st>` <st c="12623">事件方法执行后才能被任何视图函数访问。</st> <st c="12638">换句话说，通过</st>
    `<st c="12683">g</st>` <st c="12684">共享的所有资源都只能在请求-响应范围内访问。</st> <st c="12744">访问</st>
    `<st c="12754">g</st>` <st c="12755">上下文数据未在</st> `<st c="12780">@before_request</st>`
    <st c="12795">设置的情况下可能导致</st> `<st c="12806">ValueError</st>`<st c="12816">。因此，我们在以下</st>
    `<st c="12877">@</st>``<st c="12878">before_request</st>` <st c="12892">实现中调用我们的</st>
    `<st c="12838">get_database()</st>` <st c="12852">方法：</st>
- en: '[PRE5]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '@current_app.route(''/login/list'', methods=[''GET''])'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.route(''/login/list'', methods=[''GET''])'
- en: 'def list_login():'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 'def list_login():'
- en: repo = LoginRepository(<st c="13158">g.db</st>)
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = LoginRepository(<st c="13158">g.db</st>)
- en: users = repo.select_all()
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: users = repo.select_all()
- en: session['sample'] = 'trial'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: session['sample'] = 'trial'
- en: flash('List of user credentials')
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: flash('用户凭证列表')
- en: return render_template('login/login_list.html', users=users) , 200
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template('login/login_list.html', users=users) , 200
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: from flask import Blueprint <st c="16001">home_bp = Blueprint('home_bp', __name__,</st><st
    c="16041">template_folder='pages',</st><st c="16066">static_folder='resources',
    static_url_path='static')</st> import modules.home.views.menu
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 从 flask 导入 Blueprint <st c="16001">home_bp = Blueprint('home_bp', __name__,</st><st
    c="16041">template_folder='pages',</st><st c="16066">static_folder='resources',
    static_url_path='static')</st> 导入 modules.home.views.menu
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: from flask import Blueprint <st c="16264">login_bp = Blueprint('login_bp', __name__,</st><st
    c="16306">template_folder='pages',</st><st c="16331">static_folder='resources',
    static_url_path='static')</st> import modules.login.views.login
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 从 flask 导入 Blueprint <st c="16264">login_bp = Blueprint('login_bp', __name__,</st><st
    c="16306">template_folder='pages',</st><st c="16331">static_folder='resources',
    static_url_path='static')</st> 导入 modules.login.views.login
- en: import modules.login.views.admin
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 modules.login.views.admin
- en: import modules.login.views.customer
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 modules.login.views.customer
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="17451">from modules.login import login_bp</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="17451">从 modules.login 导入 login_bp</st>
- en: '<st c="17486">@login_bp.route(''/admin/add'', methods = [''GET'', ''POST''])</st>
    def add_admin():'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="17486">@login_bp.route(''/admin/add'', methods = [''GET'', ''POST''])</st>
    def add_admin():'
- en: 'if request.method == ''POST'':'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if request.method == ''POST'':'
- en: app.logger.info('add_admin POST view executed')
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.logger.info('add_admin POST view executed')
- en: repo = AdminRepository(db_session)
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = AdminRepository(db_session)
- en: … … … … … …
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: return render_template('admin_details_form.html', logins=logins), 200
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template('admin_details_form.html', logins=logins), 200
- en: app.logger.info('add_admin GET view executed')
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.logger.info('add_admin GET view executed')
- en: logins = get_login_id(1, db_session)
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: logins = get_login_id(1, db_session)
- en: return render_template('admin_details_form.html', logins=logins), 200
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template('admin_details_form.html', logins=logins), 200
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: from flask import Flask
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 从 flask 导入 Flask
- en: app = Flask(__name__, template_folder='pages')
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: app = Flask(__name__, template_folder='pages')
- en: app.config.from_file('config.toml', toml.load) <st c="18512">from modules.home
    import home_bp</st>
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: app.config.from_file('config.toml', toml.load) <st c="18512">从 modules.home
    导入 home_bp</st>
- en: <st c="18544">from modules.login import login_bp</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18544">从 modules.login 导入 login_bp</st>
- en: <st c="18579">from modules.order import order_bp</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18579">从 modules.order 导入 order_bp</st>
- en: <st c="18614">from modules.payment import payment_bp</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18614">从 modules.payment 导入 payment_bp</st>
- en: <st c="18653">from modules.shipping import shipping_bp</st>
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18653">从 modules.shipping 导入 shipping_bp</st>
- en: <st c="18694">from modules.product import product_bp</st>
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18694">从modules.product导入product_bp</st>
- en: <st c="18733">app.register_blueprint(home_bp, url_prefix='/ch02')</st>
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18733">app.register_blueprint(home_bp, url_prefix='/ch02')</st>
- en: <st c="18785">app.register_blueprint(login_bp, url_prefix='/ch02')</st>
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18785">app.register_blueprint(login_bp, url_prefix='/ch02')</st>
- en: <st c="18838">app.register_blueprint(order_bp, url_prefix='/ch02')</st>
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18838">app.register_blueprint(order_bp, url_prefix='/ch02')</st>
- en: <st c="18891">app.register_blueprint(payment_bp, url_prefix='/ch02')</st>
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18891">app.register_blueprint(payment_bp, url_prefix='/ch02')</st>
- en: <st c="18946">app.register_blueprint(shipping_bp, url_prefix='/ch02')</st>
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18946">app.register_blueprint(shipping_bp, url_prefix='/ch02')</st>
- en: <st c="19002">app.register_blueprint(product_bp, url_prefix='/ch02')</st> from
    modules.model.db import *
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19002">app.register_blueprint(product_bp, url_prefix='/ch02')</st> 从modules.model.db导入*
- en: 'if __name__ == ''__main__'':'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'if __name__ == ''__main__'':'
- en: app.run()
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.run()
- en: '[PRE10]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: import toml
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 导入toml
- en: from flask import Flask
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从flask导入Flask
- en: from flask_sqlalchemy import SQLAlchemy
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 从flask_sqlalchemy导入SQLAlchemy
- en: db = SQLAlchemy() <st c="21209">def create_app(config_file):</st> app = Flask(__name__,
    template_folder='../pages', static_folder='../resources')
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: db = SQLAlchemy() <st c="21209">def create_app(config_file):</st> app = Flask(__name__,
    template_folder='../pages', static_folder='../resources')
- en: app.config.from_file(config_file, toml.load)
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.config.from_file(config_file, toml.load)
- en: … … … … … …
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: … … … … … … <st c="21387">with app.app_context():</st><st c="21410">from modules.home
    import home_bp</st><st c="21443">from modules.login import login_bp</st><st c="21478">from
    modules.order import order_bp</st> … … … … … …
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … … <st c="21387">使用app.app_context():</st><st c="21410">从modules.home导入home_bp</st><st
    c="21443">从modules.login导入login_bp</st><st c="21478">从modules.order导入order_bp</st>
    … … … … … …
- en: … … … … … … <st c="21537">app.register_blueprint(home_bp, url_prefix='/ch02')</st><st
    c="21588">app.register_blueprint(login_bp, url_prefix='/ch02')</st><st c="21641">app.register_blueprint(order_bp,
    url_prefix='/ch02')</st> … … … … … …
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … … <st c="21537">app.register_blueprint(home_bp, url_prefix='/ch02')</st><st
    c="21588">app.register_blueprint(login_bp, url_prefix='/ch02')</st><st c="21641">app.register_blueprint(order_bp,
    url_prefix='/ch02')</st> … … … … … …
- en: return app
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回app
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: pip install psycopg2-binary flask-sqlalchemy
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: pip install psycopg2-binary flask-sqlalchemy
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: from sqlalchemy import create_engine
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 从sqlalchemy导入create_engine
- en: from sqlalchemy.ext.declarative import declarative_base
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 从sqlalchemy.ext.declarative导入declarative_base
- en: from sqlalchemy.orm import sessionmaker, scoped_session
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 从sqlalchemy.orm导入sessionmaker, scoped_session
- en: DB_URL = "postgresql://<username>:<password>@localhost:5433/sms" <st c="24558">engine
    = create_engine(DB_URL)</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: DB_URL = "postgresql://<username>:<password>@localhost:5433/sms" <st c="24558">engine
    = create_engine(DB_URL)</st>
- en: <st c="24588">db_session = scoped_session(sessionmaker(autocommit=False, autoflush=False,
    bind=engine))</st> Base = declarative_base()
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="24588">db_session = scoped_session(sessionmaker(autocommit=False, autoflush=False,
    bind=engine))</st> Base = declarative_base()
- en: 'def init_db():'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'def init_db():'
- en: import modules.model.db
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 导入modules.model.db
- en: '[PRE13]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="25575">from sqlalchemy import Time, Column, ForeignKey, Integer, String,
    Float, Date, Sequence</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25575">从sqlalchemy导入Time, Column, ForeignKey, Integer, String, Float,
    Date, Sequence</st>
- en: <st c="25663">from sqlalchemy.orm import relationship</st>
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25663">从sqlalchemy.orm导入关系</st>
- en: <st c="25703">from modules.model.config import Base</st>
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25703">从modules.model.config导入Base</st>
- en: <st c="25741">class Login(Base):</st><st c="25760">__tablename__ = 'login'</st>
    id = <st c="25790">Column</st>(Integer, Sequence('login_id_seq', increment=1),
    <st c="25846">primary_key = True</st>)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="25741">class Login(Base):</st><st c="25760">__tablename__ = 'login'</st>
    id = <st c="25790">列</st>(Integer, Sequence('login_id_seq', increment=1), <st
    c="25846">主键 = True</st>)
- en: username = <st c="25878">Column</st>(<st c="25886">String</st>(45))
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: username = <st c="25878">列</st>(<st c="25886">字符串</st>(45))
- en: password = <st c="25910">Column</st>(<st c="25918">String</st>(45))
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: password = <st c="25910">列</st>(<st c="25918">字符串</st>(45))
- en: user_type = <st c="25943">Column</st>(<st c="25951">Integer</st>)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: user_type = <st c="25943">列</st>(<st c="25951">整数</st>)
- en: admins = <st c="25970">relationship</st>('Admin', <st c="25993">back_populates="login"</st>,
    <st c="26017">uselist=False</st>)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: admins = <st c="25970">关系</st>('Admin', <st c="25993">反向填充="login"</st>, <st
    c="26017">uselist=False</st>)
- en: customer = <st c="26044">relationship</st>('Customer', <st c="26070">back_populates="login"</st>,
    <st c="26094">uselist=False</st>)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: customer = <st c="26044">关系</st>('Customer', <st c="26070">反向填充="login"</st>,
    <st c="26094">uselist=False</st>)
- en: 'def __init__(self, username, password, user_type, id = None):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __init__(self, username, password, user_type, id = None):'
- en: self.id = id
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.id = id
- en: self.username = username
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.username = username
- en: self.password = password
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.password = password
- en: self.user_type = user_type
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.user_type = user_type
- en: 'def __repr__(self):'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'def __repr__(self):'
- en: return f"<Login {self.id} {self.username} {self.password} {self.user_type}>"
  id: totrans-134
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 返回f"<Login {self.id} {self.username} {self.password} {self.user_type}>"
- en: '[PRE14]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: <st c="27134">class Customer(Base):</st> __tablename__ = 'customer'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="27134">class Customer(Base):</st> __tablename__ = 'customer'
- en: id = Column(Integer, ForeignKey('login.id'), primary_key = True)
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: id = Column(Integer, ForeignKey('login.id'), primary_key = True)
- en: firstname = Column(String(45))
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: firstname = Column(String(45))
- en: lastname = Column(String(45))
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: lastname = Column(String(45))
- en: middlename = Column(String(45))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: middlename = Column(String(45))
- en: … … … … … … <st c="27354">login = relationship('Login', back_populates="customer")</st>
    orders = relationship('Orders', back_populates="customer")
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: … … … … … … <st c="27354">login = relationship('Login', back_populates="customer")</st>
    orders = relationship('Orders', back_populates="customer")
- en: shippings = relationship('Shipping', back_populates="customer")
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: shippings = relationship('Shipping', back_populates="customer")
- en: …  … … … … …
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: …  … … … … …
- en: '[PRE15]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'class Orders(Base):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Orders(Base):'
- en: __tablename__ = 'orders'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: __tablename__ = 'orders'
- en: id = Column(Integer, Sequence('orders_id_seq', increment=1), primary_key = True)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: id = Column(Integer, Sequence('orders_id_seq', increment=1), primary_key = True)
- en: pid = Column(Integer, ForeignKey('products.id'), nullable = False)
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: pid = Column(Integer, ForeignKey('products.id'), nullable = False)
- en: … … … … … …
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: … … … … … …
- en: product = relationship('Products', back_populates="orders")
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: product = relationship('Products', back_populates="orders")
- en: customer = relationship('Customer', back_populates="orders")
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: customer = relationship('Customer', back_populates="orders")
- en: payment = relationship('Payment', back_populates="order", uselist=False)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: payment = relationship('Payment', back_populates="order", uselist=False)
- en: … … … … … …
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: 'class Payment(Base):'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'class Payment(Base):'
- en: __tablename__ = 'payment'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: __tablename__ = 'payment'
- en: id = Column(Integer, Sequence('payment_id_seq', increment=1), primary_key =
    True)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: id = Column(Integer, Sequence('payment_id_seq', increment=1), primary_key =
    True)
- en: order_no = Column(String, ForeignKey('orders.order_no'), nullable = False)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: order_no = Column(String, ForeignKey('orders.order_no'), nullable = False)
- en: … … … … … …
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: … … … … … …
- en: order = relationship('Orders', back_populates="payment")
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: order = relationship('Orders', back_populates="payment")
- en: payment_types = relationship('PaymentType', back_populates="payment")
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: payment_types = relationship('PaymentType', back_populates="payment")
- en: shipping  = relationship('Shipping', back_populates="payment", uselist=False)
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: shipping  = relationship('Shipping', back_populates="payment", uselist=False)
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: from typing import List, Any, Dict
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: from typing import List, Any, Dict
- en: from modules.model.db import Products
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: from modules.model.db import Products
- en: 'from main import app <st c="29633">from sqlalchemy.orm import Session</st>
    class ProductRepository:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 'from main import app <st c="29633">from sqlalchemy.orm import Session</st>
    class ProductRepository:'
- en: 'def __init__(self, <st c="29712">sess:Session</st>): <st c="29728">self.sess
    = sess</st> app.logger.info(''ProductRepository instance created'')'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, <st c="29712">sess:Session</st>): <st c="29728">self.sess
    = sess</st> app.logger.info(''产品仓库实例创建'')'
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'def insert(self, <st c="30361">prod:Products</st>) -> bool:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'def insert(self, <st c="30361">prod:Products</st>) -> bool:'
- en: 'try: <st c="30391">self.sess.add(prod)</st><st c="30410">self.sess.commit()</st>
    app.logger.info(''ProductRepository inserted record'')'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'try: <st c="30391">self.sess.add(prod)</st><st c="30410">self.sess.commit()</st>
    app.logger.info(''产品仓库插入记录'')'
- en: return True
  id: totrans-170
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return True
- en: 'except Exception as e:'
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'except Exception as e:'
- en: 'app.logger.info(f''ProductRepository insert error: {e}'')'
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'app.logger.info(f''产品仓库插入错误: {e}'')'
- en: return False
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return False
- en: '[PRE18]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'def update(self, id:int, details:Dict[str, Any]) -> bool:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 'def update(self, id:int, details:Dict[str, Any]) -> bool:'
- en: 'try: <st c="30833">self.sess.query(Products).filter(Products.id ==</st> <st
    c="30880">id).update(details)</st><st c="30900">self.sess.commit()</st> app.logger.info(''ProductRepository
    updated record'')'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'try: <st c="30833">self.sess.query(Products).filter(Products.id ==</st> <st
    c="30880">id).update(details)</st><st c="30900">self.sess.commit()</st> app.logger.info(''产品仓库更新记录'')'
- en: return True
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return True
- en: 'except Exception as e:'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'except Exception as e:'
- en: 'app.logger.info(f''ProductRepository update error: {e}'')'
  id: totrans-179
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'app.logger.info(f''产品仓库更新错误: {e}'')'
- en: return False
  id: totrans-180
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return False
- en: '[PRE19]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'def delete(self, id:int) -> bool:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'def delete(self, id:int) -> bool:'
- en: 'try: <st c="31303">login = self.sess.query(Products).filter(</st> <st c="31344">Products.id
    == id).delete()</st><st c="31372">self.sess.commit()</st> app.logger.info(''ProductRepository
    deleted record'')'
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'try: <st c="31303">login = self.sess.query(Products).filter(</st> <st c="31344">Products.id
    == id).delete()</st><st c="31372">self.sess.commit()</st> app.logger.info(''产品仓库删除记录'')'
- en: return True
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return True
- en: 'except Exception as e:'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'except Exception as e:'
- en: 'app.logger.info(f''ProductRepository delete error: {e}'')'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'app.logger.info(f''产品仓库删除错误: {e}'')'
- en: return False
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return False
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'def select_all(self) -> List[Any]:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'def select_all(self) -> List[Any]:'
- en: users = self.sess.query(Products).all()
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: users = self.sess.query(Products).all()
- en: app.logger.info('ProductRepository retrieved all record')
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.logger.info('产品仓库检索所有记录')
- en: return users
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return users
- en: 'def select_one(self, id:int) -> Any:'
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def select_one(self, id:int) -> Any:'
- en: users =  self.sess.query(Products).filter( Products.id == id).one_or_none()
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: users =  self.sess.query(Products).filter( Products.id == id).one_or_none()
- en: app.logger.info('ProductRepository retrieved one record')
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.logger.info('产品仓库检索一条记录')
- en: return users
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return users
- en: 'def select_one_code(self, code:str) -> Any:'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def select_one_code(self, code:str) -> Any:'
- en: users =  self.sess.query(Products).filter( Products.code == code).one_or_none()
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: users =  self.sess.query(Products).filter( Products.code == code).one_or_none()
- en: app.logger.info('ProductRepository retrieved one record by product code')
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: app.logger.info('ProductRepository 通过产品代码检索了一条记录')
- en: return users
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return users
- en: '[PRE21]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'def configure_func_logging(log_path): <st c="35284">logging.getLogger("werkzeug").disabled
    = True</st> console_handler ='
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def configure_func_logging(log_path): <st c="35284">禁用 "werkzeug" 的日志记录器</st>
    console_handler ='
- en: logging.<st c="35356">StreamHandler</st>(stream=sys.stdout)
  id: totrans-203
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: logging.<st c="35356">StreamHandler</st>(stream=sys.stdout)
- en: console_handler.<st c="35407">setLevel(logging.DEBUG)</st> logging.basicConfig(<st
    c="35452">level=logging.DEBUG</st>,
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: console_handler.<st c="35407">设置日志级别为logging.DEBUG</st> logging.basicConfig(<st
    c="35452">日志级别为logging.DEBUG</st>,
- en: format='%(asctime)s %(levelname)s %(module)s
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: format='%(asctime)s %(levelname)s %(module)s
- en: '%(funcName)s %(message)s'','
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '%(funcName)s %(message)s'','
- en: 'datefmt=''%Y-%m-%d %H:%M:%S'', <st c="35702">dictConfig</st> using the JSON
    format, as shown in the following snippet:'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: datefmt='%Y-%m-%d %H:%M:%S', <st c="35702">使用 JSON 格式进行 dictConfig，如下面的片段所示：
- en: '[PRE22]'
  id: totrans-208
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '@current_app.route(''/payment/add'', methods = [''GET'', ''POST''])'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.route(''/payment/add'', methods = [''GET'', ''POST''])'
- en: 'def add_payment():'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 'def add_payment():'
- en: 'if request.method == ''POST'': <st c="37169">current_app.logger.info(''add_payment
    POST view</st> <st c="37215">executed'')</st> repo_type = PaymentTypeRepository(db)'
  id: totrans-212
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if request.method == ''POST'': <st c="37169">当前应用日志器信息：add_payment POST 视图</st>
    <st c="37215">执行</st> repo_type = PaymentTypeRepository(db)'
- en: ptypes = repo_type.select_all()
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ptypes = repo_type.select_all()
- en: orders = get_all_order_no(db) <st c="37327">repo = PaymentRepository(db)</st>
    payment = Payment(order_no=request.form['order_no'], mode_payment=int(request.form['mode']),
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: orders = get_all_order_no(db) <st c="37327">repo = PaymentRepository(db)</st>
    payment = Payment(order_no=request.form['order_no'], mode_payment=int(request.form['mode']),
- en: ref_no=request.form['ref_no'], date_payment=request.form['date_payment'],
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ref_no=request.form['ref_no'], date_payment=request.form['date_payment'],
- en: amount=request.form['amount'])
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: amount=request.form['amount'])
- en: result = repo.insert(payment)
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.insert(payment)
- en: 'if result == False:'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result == False:'
- en: abort(500)
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: abort(500)
- en: return render_template('payment/add_payment_form.html', orders=orders, ptypes=ptypes),
    200 <st c="37706">current_app.logger.info('add_payment GET view</st> <st c="37751">executed')</st>
    repo_type = PaymentTypeRepository(db)
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template('payment/add_payment_form.html', orders=orders, ptypes=ptypes),
    200 <st c="37706">当前应用日志器信息：add_payment GET 视图</st> <st c="37751">执行</st> repo_type
    = PaymentTypeRepository(db)
- en: ptypes = repo_type.select_all()
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ptypes = repo_type.select_all()
- en: orders = get_all_order_no(db)
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: orders = get_all_order_no(db)
- en: return render_template('payment/add_payment_form.html', orders=orders, ptypes=ptypes),
    200
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return render_template('payment/add_payment_form.html', orders=orders, ptypes=ptypes),
    200
- en: '[PRE24]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'class ShippingRepository:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'class ShippingRepository:'
- en: 'def __init__(self, db):'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, db):'
- en: 'self.db = db <st c="38192">current_app.logger.info(''ShippingRepository</st>
    <st c="38235">instance created'')</st> def insert(self, ship:Shipping) -> bool:'
  id: totrans-227
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'self.db = db <st c="38192">当前应用日志器信息：ShippingRepository</st> <st c="38235">实例创建</st>
    def insert(self, ship:Shipping) -> bool:'
- en: 'try:'
  id: totrans-228
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'try:'
- en: self.db.session.add(ship)
  id: totrans-229
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.db.session.add(ship)
- en: self.db.session.commit() <st c="38352">current_app.logger.info('ShippingRepository</st>
    <st c="38395">inserted record')</st> return True
  id: totrans-230
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.db.session.commit() <st c="38352">当前应用日志器信息：ShippingRepository</st> <st
    c="38395">已插入记录</st> return True
- en: 'except Exception as e: <st c="38449">current_app.logger.error(f''ShippingRepository</st>
    <st c="38494">insert error: {e}'')</st> return False'
  id: totrans-231
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'except Exception as e: <st c="38449">当前应用日志器错误：ShippingRepository</st> <st
    c="38494">插入错误：{e}</st> return False'
- en: … … … … … …
  id: totrans-232
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: '[PRE25]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: (config_dev.toml) <st c="39522">SECRET_KEY = "SpOn1ZyV4KE2FTlAUrWRZ_h7o5s"</st>
    (main.py)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: (config_dev.toml) <st c="39522">SECRET_KEY = "SpOn1ZyV4KE2FTlAUrWRZ_h7o5s"</st>
    (main.py)
- en: app = Flask(__name__, template_folder='../app/pages', static_folder='../app/resources')
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: app = Flask(__name__, template_folder='../app/pages', static_folder='../app/resources')
- en: app.config.from_file("<st c="39748">config_dev.toml</st> file using the <st
    c="39779">from_file()</st> method of the property config, adding the <st c="39833">SECRET_KEY</st>
    environment variable in TOML file with the random key string to the config file
    will enable the user session automatically. Generally, it is always best practice
    to set a <st c="40015">SECRET_KEY</st> for any Flask applications.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: app.config.from_file("<st c="39748">config_dev.toml</st> 文件使用属性 config 的 <st
    c="39779">from_file()</st> 方法，在 TOML 文件中将 <st c="39833">SECRET_KEY</st> 环境变量与随机密钥字符串添加到配置文件中，将自动启用用户会话。通常，为任何
    Flask 应用程序设置 <st c="40015">SECRET_KEY</st> 总是最佳实践。
- en: <st c="40053">Managing session data</st>
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="40053">管理会话数据</st>
- en: <st c="40075">After successfully pushing the session</st> <st c="40115">context,
    our application can readily store data in the session by using the session object
    imported from the</st> `<st c="40224">flask</st>` <st c="40229">module.</st> <st
    c="40238">The following</st> `<st c="40252">login_db_ath()</st>` <st c="40266">view
    function stores the username in the session after a successful database validation
    of the</st> <st c="40362">user credentials:</st>
  id: totrans-238
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="40075">在成功推送会话</st> <st c="40115">上下文后，我们的应用程序可以通过从</st> `<st c="40224">flask</st>`
    <st c="40229">模块导入的会话对象轻松地将数据存储在会话中。</st> <st c="40238">以下</st> `<st c="40252">login_db_ath()</st>`
    <st c="40266">视图函数在成功验证用户凭据后会将用户名存储在会话中：</st>
- en: '[PRE26]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: <st c="41157">Calling the</st> `<st c="41170">session</st>` <st c="41177">object
    with the</st> <st c="41193">name of the session attribute inside the brackets
    (e.g.,</st> `<st c="41251">session["username"]</st>`<st c="41270">) retrieves
    the session data at runtime.</st> <st c="41312">On the other hand, removing the
    session requires calling the</st> `<st c="41373">pop()</st>` <st c="41378">method
    of the session object.</st> <st c="41409">For instance, removing the username
    requires executing the</st> <st c="41468">following code:</st>
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="41157">使用括号内的会话属性名称（例如，</st> `<st c="41251">session["username"]</st>`<st
    c="41270">）调用</st> `<st c="41170">session</st>` <st c="41177">对象可以在运行时检索会话数据。</st>
    <st c="41312">另一方面，删除会话需要调用会话对象的</st> `<st c="41373">pop()</st>` <st c="41378">方法。</st>
    <st c="41409">例如，删除用户名需要执行以下代码：</st>
- en: '[PRE27]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: <st c="41513">Validating the session attributes first before removing them or
    performing other transactions is always a</st> <st c="41620">recommendation, and
    the following snippet will show us how to validate</st> <st c="41691">session
    attributes:</st>
  id: totrans-242
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="41513">在删除它们或执行其他事务之前首先验证会话属性始终是一个</st> <st c="41620">建议，以下代码片段将展示我们如何验证</st>
    <st c="41691">会话属性：</st>
- en: '[PRE28]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: <st c="42193">As previously discussed, the method with the</st> `<st c="42239">@before_request</st>`
    <st c="42254">decorator always executes first before any route function performs.</st>
    <st c="42323">It processes some pre-condition transactions before the request
    reaches the route.</st> <st c="42406">In the given snippet,</st> `<st c="42428">@before_request</st>`
    <st c="42443">executes the</st> `<st c="42457">get_database()</st>` <st c="42471">method
    and checks whether an authenticated user has already logged into the applications.</st>
    <st c="42562">If there is a logged user, access to any endpoint, except for index
    and static resources, will always redirect the user to the menu page.</st> <st
    c="42700">Otherwise, it will always redirect the user to the</st> <st c="42751">login
    page.</st>
  id: totrans-244
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="42193">如前所述，带有</st> `<st c="42239">@before_request</st>` <st c="42254">装饰器的方法定总是在任何路由函数执行之前首先执行。</st>
    <st c="42323">它在请求到达路由之前处理一些前置事务。</st> <st c="42406">在给定的代码片段中，</st> `<st c="42428">@before_request</st>`
    <st c="42443">执行了</st> `<st c="42457">get_database()</st>` <st c="42471">方法，并检查是否有认证用户已经登录到应用程序中。</st>
    <st c="42562">如果有已登录用户，则除了索引和静态资源之外，对任何端点的访问都将始终重定向用户到菜单页面。</st> <st c="42700">否则，它将始终重定向用户到</st>
    <st c="42751">登录页面。</st>
- en: <st c="42762">Clearing all session data</st>
  id: totrans-245
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="42762">清除所有会话数据</st>
- en: <st c="42788">Instead of removing every session attribute, the</st> `<st c="42838">session</st>`
    <st c="42845">object has a</st> `<st c="42859">clear()</st>` <st c="42866">method
    that removes all session data in just one call.</st> <st c="42922">The following
    is a</st> `<st c="42941">logout</st>` <st c="42947">route that deletes all the
    session</st> <st c="42982">data before redirecting a user to the</st> <st c="43021">login
    page:</st>
  id: totrans-246
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="42788">而不是删除每个会话属性，会话对象有一个</st> `<st c="42838">clear()</st>` <st c="42845">方法，只需一次调用即可删除所有会话数据。</st>
    <st c="42922">以下是一个</st> `<st c="42941">logout</st>` <st c="42947">路由，在将用户重定向到</st>
    <st c="43021">登录页面</st>之前删除所有会话数据：</st>
- en: '[PRE29]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: <st c="43188">There is no easy way in Flask to invalidate the session, but</st>
    `<st c="43250">clear()</st>` <st c="43257">can help prepare the session for another
    user to</st> <st c="43307">access it.</st>
  id: totrans-248
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="43188">在Flask中没有简单的方法来使会话无效，但</st> `<st c="43250">clear()</st>` <st c="43257">可以帮助为另一个用户访问会话做准备。</st>
- en: <st c="43317">Now, another component that depends much on session handling is
    flash messaging, which stores messages of string type on</st> <st c="43439">a
    session.</st>
  id: totrans-249
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="43317">现在，另一个很大程度上依赖于会话处理的组件是闪存消息，它将字符串类型的消息存储在</st> <st c="43439">会话中。</st>
- en: <st c="43449">Applying flash messages</st>
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="43449">应用闪存消息</st>
- en: <st c="43473">Flash messages are usually seen on validated forms rendering error
    messages for every text field with an invalid input</st> <st c="43592">value.</st>
    <st c="43600">Sometimes flash messages are headlines or important notifications
    printed in all caps on a</st> <st c="43691">web page.</st>
  id: totrans-251
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="43473">闪存消息通常在经过验证的表单上显示，为每个具有无效输入值的文本字段提供错误消息。</st> <st c="43592">有时，闪存消息是标题或重要通知，以全大写形式打印在网页上。</st>
- en: <st c="43700">Flask has a flash method that any view function can import to
    make flash messages.</st> <st c="43784">The following authentication process creates
    a flash message after validating the user credentials from</st> <st c="43888">the
    database:</st>
  id: totrans-252
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="43700">Flask有一个闪存方法，任何视图函数都可以导入以创建闪存消息。</st> <st c="43784">以下认证过程在从</st>
    <st c="43888">数据库验证用户凭据后创建一个闪存消息：</st>
- en: '[PRE30]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: <st c="44535">The given</st> `<st c="44546">add_login()</st>` <st c="44557">view
    function uses</st> `<st c="44577">flash()</st>` <st c="44584">to create an error
    message if the credentials accepted by the route</st> <st c="44653">are already
    in the database.</st> <st c="44682">But it also sends a notification through</st>
    `<st c="44723">flash()</st>` <st c="44730">if the</st> `<st c="44738">insert</st>`
    <st c="44744">transaction</st> <st c="44757">is successful.</st>
  id: totrans-254
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="44535">给定的</st> `<st c="44546">add_login()</st>` <st c="44557">视图函数使用</st>
    `<st c="44577">flash()</st>` <st c="44584">在路由接受的凭据已在数据库中时创建错误消息。</st> <st c="44682">但它也通过</st>
    `<st c="44723">flash()</st>` <st c="44730">发送通知，如果</st> `<st c="44738">插入</st>`
    <st c="44744">事务</st> <st c="44757">成功。</st>
- en: <st c="44771">Important note</st>
  id: totrans-255
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="44771">重要提示</st>
- en: <st c="44786">The Flask flashing system records messages to the user session
    at the end of every request and retrieves them on the following immediate</st>
    <st c="44924">request transaction.</st>
  id: totrans-256
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="44786">Flask的闪存系统在每个请求结束时将消息记录到用户会话中，并在随后的立即请求事务中检索它们。</st> <st c="44924">请求事务。</st>
- en: '*<st c="44944">Figure 2</st>**<st c="44953">.4</st>* <st c="44955">shows a
    sample screen result after adding an existing username</st> <st c="45019">and
    password:</st>'
  id: totrans-257
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*<st c="44944">图2</st>**<st c="44953">.4</st>* <st c="44955">显示了添加现有用户名和密码后的样本屏幕结果：</st>'
- en: '![Figure 2.4 – A flash message for an invalid insert transaction](img/B19383_02_4.jpg)'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
  zh: '![图2.4 – 一个无效插入事务的闪存消息](img/B19383_02_4.jpg)'
- en: <st c="45153">Figure 2.4 – A flash message for an invalid insert transaction</st>
  id: totrans-259
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="45153">图2.4 – 一个无效插入事务的闪存消息</st>
- en: <st c="45215">The Jinja2 template has</st> <st c="45240">access to Flask’s</st>
    `<st c="45258">get_flashed_messages()</st>` <st c="45280">method that retrieves
    all the flash messages or just the categorized ones.</st> <st c="45356">The following
    Jinja2 macro of the</st> `<st c="45390">/login/login_add.html</st>` <st c="45411">template
    renders the error flash message in</st> *<st c="45456">Figure 2</st>**<st c="45464">.4</st>*<st
    c="45466">:</st>
  id: totrans-260
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="45215">Jinja2模板可以访问Flask的</st> `<st c="45240">get_flashed_messages()</st>`
    <st c="45280">方法，该方法检索所有闪存消息或只是分类的闪存消息。</st> <st c="45356">以下</st> `<st c="45390">/login/login_add.html</st>`
    <st c="45411">模板的Jinja2宏在</st> *<st c="45456">图2</st>**<st c="45464">.4</st>*<st
    c="45466">中渲染错误闪存消息：</st>
- en: '[PRE31]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: <st c="45724">The</st> `<st c="45729">with</st>`<st c="45733">-block provides
    the context for checking whether there are error-typed flash messages that need
    rendering.</st> <st c="45841">If there are, a</st> `<st c="45857">for</st>`<st
    c="45860">-block will retrieve all these retrieved</st> <st c="45902">flash messages.</st>
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="45724">The</st> `<st c="45729">with</st>`<st c="45733">-block提供检查是否需要渲染错误类型闪存消息的上下文。</st>
    <st c="45841">如果有，一个</st> `<st c="45857">for</st>`<st c="45860">-block将检索所有这些检索到的</st>
    <st c="45902">闪存消息。</st>
- en: <st c="45917">On the other hand, Jinja2</st> <st c="45944">can also retrieve
    uncategorized or generic flash messages from the view functions.</st> <st c="46027">The
    following macro retrieves a flash message from the</st> `<st c="46082">list_login()</st>`
    <st c="46094">route:</st>
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="45917">另一方面，Jinja2</st> <st c="45944">也可以从视图函数中检索未分类或通用的闪存消息。</st> <st
    c="46027">以下宏从</st> `<st c="46082">list_login()</st>` <st c="46094">路由中检索闪存消息：</st>
- en: '[PRE32]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: <st c="46320">Given the use of macros in rendering flash messages, let us explore
    other advanced features of Jinja2 templates of our applications that can provide
    better</st> <st c="46477">template implementation.</st>
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46320">鉴于宏在渲染闪存消息中的应用，让我们探索我们的应用程序中Jinja2模板的其他高级功能，这些功能可以提供更好的</st> <st
    c="46477">模板实现。</st>
- en: <st c="46501">Utilizing some advanced Jinja2 features</st>
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46501">利用一些高级Jinja2功能</st>
- en: '[*<st c="46541">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014) <st c="46551">introduced
    the Jinja2 engine and</st> <st c="46585">templating, and some of these Jinja constructs
    were applied to render</st> <st c="46655">HTML contents:</st>'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[*<st c="46541">第一章</st>*](B19383_01.xhtml#_idTextAnchor014) <st c="46551">介绍了
    Jinja2 引擎和</st> <st c="46585">模板，并将其中一些 Jinja 构造应用于渲染</st> <st c="46655">HTML
    内容：</st>'
- en: '`<st c="46669">{{ variable }}</st>`<st c="46684">: The placeholder expression
    that renders a single-valued object from</st> <st c="46755">view functions.</st>'
  id: totrans-268
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="46669">{{ variable }}</st>`<st c="46684">：这是一个占位符表达式，用于从</st> <st c="46755">视图函数中渲染单值对象。</st>'
- en: '`<st c="46770">{% statement %</st>`<st c="46785">}: The expression that implements</st>
    `<st c="46820">if</st>`<st c="46822">-</st>`<st c="46824">else</st>`<st c="46828">-conditions,</st>
    `<st c="46842">for</st>`<st c="46845">-loops,</st> `<st c="46854">block</st>`<st
    c="46859">-expressions</st> <st c="46873">for calling layout fragments,</st> `<st
    c="46903">with</st>`<st c="46907">-blocks for managing context, and</st> <st c="46942">macro
    calls.</st>'
  id: totrans-269
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<st c="46770">{% statement %</st>`<st c="46785">》：实现</st> `<st c="46820">if</st>`<st
    c="46822">-</st>`<st c="46824">else</st>`<st c="46828">-条件、</st> `<st c="46842">for</st>`<st
    c="46845">-循环、</st> `<st c="46854">block</st>`<st c="46859">-表达式</st> <st c="46873">用于调用布局片段、</st>
    `<st c="46903">with</st>`<st c="46907">-块用于管理上下文，以及</st> <st c="46942">宏调用。</st>'
- en: <st c="46954">But some Jinja2 features, such as applying the</st> `<st c="47002">with</st>`<st
    c="47006">-statement, macros, filters, and comments, can help generate better
    views for</st> <st c="47085">our routes.</st>
  id: totrans-270
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="46954">但是，一些 Jinja2 功能，如应用</st> `<st c="47002">with</st>`<st c="47006">-语句、宏、过滤器以及注释，可以帮助我们为</st>
    <st c="47085">路由生成更好的视图。</st>
- en: <st c="47096">Applying with-blocks and macros</st>
  id: totrans-271
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47096">应用 with 块和宏</st>
- en: <st c="47128">In the</st> *<st c="47136">Applying flash messages</st>* <st c="47159">section,
    templates used the</st> `<st c="47188">{% with %}</st>` <st c="47198">statement
    to extract the flash messages from the view</st> <st c="47252">functions and</st>
    `<st c="47267">{% macro %}</st>` <st c="47278">in optimizing our Jinja2 transactions.</st>
    <st c="47318">The</st> `<st c="47322">{% with %}</st>` <st c="47332">statement
    sets a context to limit the access or scope of some variables within the</st>
    `<st c="47416">with</st>`<st c="47420">-block.</st> <st c="47429">Access outside
    the block produces a</st> <st c="47465">Jinja2 error.</st>
  id: totrans-272
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47128">在</st> *<st c="47136">应用闪存消息</st>* <st c="47159">部分，模板使用了</st>
    `<st c="47188">{% with %}</st>` <st c="47198">语句从视图</st> <st c="47252">函数中提取闪存消息，并在</st>
    `<st c="47267">{% macro %}</st>` <st c="47278">中优化我们的 Jinja2 事务。</st> <st c="47318">`<st
    c="47322">{% with %}</st>` <st c="47332">语句设置一个上下文，以限制</st> `<st c="47416">with</st><st
    c="47420">-block</st>` <st c="47429">中某些变量的访问或作用域。</st> <st c="47465">在块外部访问会产生一个</st>
    <st c="47429">Jinja2 错误。</st>
- en: <st c="47478">The</st> `<st c="47483">{% macro %}</st>` <st c="47494">block,
    on the other hand, pursues modular programming in Jinja2 templating.</st> <st
    c="47571">Every macro has a name and can have local parameters for reusability,
    and any templates can import and call them like typical methods.</st> <st c="47706">The
    following</st> `<st c="47720">/login/login_list.html</st>` <st c="47742">template
    renders the list of user credentials with a call on a macro that outputs an uncategorized</st>
    <st c="47842">flash message:</st>
  id: totrans-273
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="47478">另一方面，</st> `<st c="47483">{% macro %}</st>` <st c="47494">块在 Jinja2
    模板中追求模块化编程。</st> <st c="47571">每个宏都有一个名称，并且可以具有用于重用的局部参数，任何模板都可以像典型方法一样导入和调用它们。</st>
    <st c="47706">以下</st> `<st c="47720">/login/login_list.html</st>` <st c="47742">模板通过调用输出未分类</st>
    <st c="47842">闪存消息的宏来渲染用户凭据列表：</st>
- en: '[PRE33]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: <st c="48614">All macros are placed in a</st> <st c="48642">template file, like
    any Jinja2 expressions.</st> <st c="48686">In our application, the macros are
    found in</st> `<st c="48730">/macros/flask_segment.html</st>`<st c="48756">, and
    any template must import them from this file using the</st> `<st c="48817">{%
    from ...</st> <st c="48829">import ...</st> <st c="48840">with context %}</st>`
    <st c="48855">statement before utilizing them.</st> <st c="48889">In the given
    template,</st> `<st c="48912">render_list_flash()</st>` <st c="48931">is imported
    first before calling it like a method using the</st> `<st c="48992">{{}}</st>`
    <st c="48996">placeholder expression.</st>
  id: totrans-275
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="48614">所有宏都放置在一个</st> <st c="48642">模板文件中，就像任何 Jinja2 表达式一样。</st> <st
    c="48686">在我们的应用程序中，宏位于</st> `<st c="48730">/macros/flask_segment.html</st>`<st
    c="48756">，并且任何模板都必须使用</st> `<st c="48817">{% from ...</st> <st c="48829">import
    ...</st> <st c="48840">with context %}</st>` <st c="48855">语句从该文件导入它们，在使用之前。</st>
    <st c="48889">在给定的模板中，</st> `<st c="48912">render_list_flash()</st>` <st c="48931">首先导入，然后像方法一样使用</st>
    `<st c="48992">{{}}</st>` <st c="48996">占位符表达式调用它。</st>
- en: <st c="49020">Applying filters</st>
  id: totrans-276
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49020">应用过滤器</st>
- en: <st c="49037">To improve the look and feel and clarity of the rendered data,
    Jinja2 has several filter operations that can provide additional</st> <st c="49166">aesthetics
    that can make the rendition more appealing to the users.</st> <st c="49234">This</st>
    <st c="49239">process is called</st> `<st c="49296">|</st>`<st c="49298">) to
    pass the value to these operations.</st> <st c="49339">The following</st> `<st
    c="49353">product/list_product.html</st>` <st c="49378">page uses filter methods
    in rendering the list</st> <st c="49426">of products:</st>
  id: totrans-277
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="49037">为了提高渲染数据的视觉效果、清晰度和可读性，Jinja2提供了几个过滤器操作，可以提供额外的</st> <st c="49166">美学，使渲染结果更吸引用户。</st>
    <st c="49234">这个过程被称为</st> `<st c="49296">|</st>`<st c="49298">) 以将这些值传递给这些操作。</st>
    <st c="49339">以下</st> `<st c="49353">product/list_product.html</st>` <st c="49378">页面在渲染产品列表时使用了过滤器方法：</st>
- en: '[PRE34]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: <st c="50056">The given template uses the trim filter to strip the name data
    with leading and trailing whitespaces and an upper filter to convert the names
    to uppercase.</st> <st c="50213">Through the format filter, all the price data
    now</st> <st c="50263">includes a Philippine peso currency sign with two decimal
    places.</st> <st c="50329">Jinja2 supports several built-in filters that can help
    derive other features from, compute, manipulate, modify, compress, expand, and
    sanitize the raw data from the view functions to render all these details in a
    more</st> <st c="50547">presentable outcome.</st>
  id: totrans-279
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50056">给定的模板使用trim过滤器去除名称数据的前后空白，并使用upper过滤器将名称转换为大写。</st> <st c="50213">通过格式过滤器，所有价格数据现在</st>
    <st c="50263">都包含带有两位小数的菲律宾比索货币符号。</st> <st c="50329">Jinja2支持几个内置过滤器，可以帮助从视图函数中派生其他功能、计算、操作、修改、压缩、扩展和清理原始数据，以便以更</st>
    <st c="50547">可展示的结果渲染所有这些细节。</st>
- en: <st c="50567">Adding comments</st>
  id: totrans-280
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50567">添加注释</st>
- en: '<st c="50583">It is always best practice to add comments in every template
    using the</st> `<st c="50655">{# comment #}</st>` <st c="50668">expression for
    sectioning and internal documentation purposes.</st> <st c="50732">These comments
    are not part of the rendition</st> <st c="50777">provided by the Jinja2</st> <st
    c="50800">template engine.</st>'
  id: totrans-281
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '<st c="50583">在模板中添加注释始终是最好的实践，使用</st> `<st c="50655">{# comment #}</st>` <st
    c="50668">表达式进行分节和内部文档目的。</st> <st c="50732">这些注释不是由Jinja2</st> <st c="50800">模板引擎提供的渲染的一部分。</st>'
- en: <st c="50816">Jinja2 expressions are not only applied to route views but also
    to error pages.</st> <st c="50897">Let us now learn how to render error pages
    in the Flask</st> <st c="50953">3.x framework.</st>
  id: totrans-282
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50816">Jinja2表达式不仅应用于路由视图，也应用于错误页面。</st> <st c="50897">现在让我们学习如何在Flask</st>
    <st c="50953">3.x框架中渲染错误页面。</st>
- en: <st c="50967">Implementing error-handling solutions</st>
  id: totrans-283
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="50967">实现错误处理解决方案</st>
- en: '[*<st c="51005">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014) <st c="51015">showcased
    the use of the</st> `<st c="51041">redirect()</st>` <st c="51051">method in rendering
    error pages given a status code, such as the status code</st> `<st c="51129">500</st>`<st
    c="51132">. We will now discuss a better way of managing exceptions</st> <st c="51189">and
    status codes, including triggering error pages per</st> <st c="51245">status code.</st>'
  id: totrans-284
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[*<st c="51005">第1章</st>*](B19383_01.xhtml#_idTextAnchor014) <st c="51015">展示了在给定状态码（如状态码</st>
    `<st c="51129">500</st>`<st c="51132">）的情况下渲染错误页面时使用redirect()方法的使用。我们现在将讨论一种更好的管理异常</st>
    <st c="51189">和状态码的方法，包括根据</st> <st c="51245">状态码触发错误页面。</st>'
- en: <st c="51257">Flask applications must always implement an error-handling mechanism
    using any of the</st> <st c="51344">following strategies:</st>
  id: totrans-285
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51257">Flask应用程序必须始终实现一个错误处理机制，使用以下任何一种策略：</st>
- en: <st c="51365">Registers a custom error function using the app’s</st> `<st c="51416">register_error_handler()</st>`
    <st c="51440">method.</st>
  id: totrans-286
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="51365">使用应用中的register_error_handler()方法注册一个自定义错误函数。</st>
- en: <st c="51448">Creates an error handler using the app’s</st> `<st c="51490">errorhandler</st>`
    <st c="51502">decorator.</st>
  id: totrans-287
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="51448">使用应用中的errorhandler装饰器创建一个错误处理器。</st>
- en: <st c="51513">Throws a</st> <st c="51523">custom</st> `<st c="51530">Exception</st>`
    <st c="51539">class.</st>
  id: totrans-288
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="51513">抛出一个</st> <st c="51523">自定义</st> `<st c="51530">异常</st>` <st c="51539">类。</st>
- en: <st c="51546">Using the register_error_handler method</st>
  id: totrans-289
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51546">使用register_error_handler方法</st>
- en: <st c="51586">The declarative way to implement an</st> <st c="51623">error handler
    is to create a custom function</st> <st c="51668">and register it to the</st>
    `<st c="51691">app</st>`<st c="51694">’s</st> `<st c="51698">register_error_handler()</st>`
    <st c="51722">method.</st> <st c="51731">The custom function must have a single
    local parameter that will accept the injected error message from the platform.</st>
    <st c="51849">It must also return its assigned error page using the</st> `<st
    c="51903">make_response()</st>` <st c="51918">and</st> `<st c="51923">render_template()</st>`
    <st c="51940">methods with the option of passing the error message as context
    data to the template for rendering.</st> <st c="52041">The following is a snippet
    that shows</st> <st c="52079">the steps:</st>
  id: totrans-290
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="51586">实现错误处理器的声明式方法是创建一个自定义函数</st> <st c="51623">并将其注册到</st> `<st c="51691">app</st>`<st
    c="51694">的</st> `<st c="51698">register_error_handler()</st>` <st c="51722">方法。</st>
    <st c="51731">自定义函数必须有一个局部参数，该参数将接受来自平台的注入的错误消息。</st> <st c="51849">它还必须使用</st>
    `<st c="51903">make_response()</st>` <st c="51918">和</st> `<st c="51923">render_template()</st>`
    <st c="51940">方法返回其分配的错误页面，并且可以选择将错误消息作为上下文数据传递给模板进行渲染。</st> <st c="52041">以下是一个示例代码片段，展示了</st>
    <st c="52079">以下步骤：</st>
- en: '[PRE35]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '<st c="52886">@app.errorhandler(404)</st> def not_found(e):'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="52886">@app.errorhandler(404)</st> def not_found(e):'
- en: 'return make_response(render_template("error/404.html", title="Page not found"),
    404) <st c="53013">@app.errorhandler(400)</st> def bad_request(e):'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'return make_response(render_template("error/404.html", title="页面未找到"), 404)
    <st c="53013">@app.errorhandler(400)</st> def bad_request(e):'
- en: return make_response(render_template("error/400.html", title="Bad request"),
    400)
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(render_template("error/400.html", title="请求错误"), 400)
- en: '[PRE36]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: <st c="53663">from werkzeug.exceptions import HTTPException</st> from flask
    import render_template, Response
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="53663">from werkzeug.exceptions import HTTPException</st> from flask
    import render_template, Response
- en: 'class DuplicateRecordException(HTTPException):'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 'class DuplicateRecordException(HTTPException):'
- en: code = 500
  id: totrans-298
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: code = 500
- en: 'description = ''Record already exists.'' def get_response(self, environ=None):'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'description = ''记录已存在。'' def get_response(self, environ=None):'
- en: resp = Response()
  id: totrans-300
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: resp = Response()
- en: resp.response = render_template('error/generic.html',
  id: totrans-301
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: resp.response = render_template('error/generic.html',
- en: ex_message=self.description)
  id: totrans-302
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: ex_message=self.description)
- en: return resp
  id: totrans-303
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return resp
- en: '[PRE37]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '<st c="54900">@app.errorhandler(DuplicateRecordException)</st> def insert_record_exception(<st
    c="54973">e</st>): <st c="55045">DuplicateRecordException</st> class, the event
    handler will return its overridden <st c="55122">get_response()</st> method with
    the mapped Jinja2 error page and the HTTP status code <st c="55203">500</st>.
    But how about if the exception triggered is a Python-based type?'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="54900">@app.errorhandler(DuplicateRecordException)</st> def insert_record_exception(<st
    c="54973">e</st>): <st c="55045">DuplicateRecordException</st> 类，事件处理器将返回其重写的
    <st c="55122">get_response()</st> 方法，该方法带有映射的Jinja2错误页面和HTTP状态码 <st c="55203">500</st>。但如果触发的异常是Python类型的呢？'
- en: <st c="55272">Managing built-in exceptions</st>
  id: totrans-306
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="55272">管理内置异常</st>
- en: <st c="55301">All the handlers previously</st> <st c="55330">presented manage
    only the Flask exceptions, not the Python-specific exceptions.</st> <st c="55410">To
    include handling of those exceptions</st> <st c="55449">generated by some Python
    runtime issues, create a dedicated custom method handler that listens to all these
    exceptions, such as in the</st> <st c="55585">following implementation:</st>
  id: totrans-307
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="55301">所有之前</st> <st c="55330">展示的处理程序仅管理Flask异常，而不是Python特定的异常。</st>
    <st c="55410">为了包括处理由某些Python运行时问题生成的异常，创建一个专门的定制方法处理程序，它监听所有这些异常，例如在以下实现中：</st>
    <st c="55585">以下是一个示例实现：</st>
- en: '[PRE38]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: <st c="55844">The given error handler filters out all Flask-related exceptions
    and throws them for Flask handlers to process, but it renders a custom error page
    for any Python</st> <st c="56007">runtime exception.</st>
  id: totrans-309
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="55844">给定的错误处理器过滤掉所有与Flask相关的异常，并将它们抛给Flask处理器处理，但对于任何Python</st> <st
    c="56007">运行时异常，它将渲染自定义错误页面。</st>
- en: <st c="56025">Triggering the error handlers</st>
  id: totrans-310
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="56025">触发错误处理器</st>
- en: <st c="56055">Sometimes it is recommended to explicitly trigger the error handler,
    especially in projects that utilize Blueprints as</st> <st c="56174">building
    blocks of their</st> <st c="56199">applications.</st> <st c="56214">A Blueprint
    module is not an independent sub-application that can own a URL context that listens
    to and calls the precise error handlers directly.</st> <st c="56361">So, to avoid
    some problems in calling the exact error handlers, transactions can invoke the</st>
    `<st c="56453">abort()</st>` <st c="56460">method with the proper HTTP status
    code, such as in the</st> <st c="56517">following snippet:</st>
  id: totrans-311
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="56055">有时建议显式触发错误处理程序，尤其是在使用Blueprints作为其应用程序构建块的项目中。</st>` `<st c="56174">Blueprint模块不是一个独立的子应用程序，它不能拥有一个URL上下文，该上下文可以监听并直接调用精确的错误处理程序。</st>`
    `<st c="56361">因此，为了避免调用精确错误处理程序时出现的一些问题，事务可以调用`<st c="56453">abort()</st>` `<st
    c="56460">方法，并使用适当的HTTP状态码，如下面的片段所示：</st>`'
- en: '[PRE39]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: <st c="57027">For custom or built-in exceptions, transactions can call the</st>
    `<st c="57089">raise()</st>` <st c="57096">method to trigger the error handler
    for the raised exception.</st> <st c="57159">The following view function raises
    the</st> `<st c="57198">DuplicateRecordException</st>` <st c="57222">class when
    an issue arises during order</st> <st c="57263">record insertion:</st>
  id: totrans-313
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="57027">对于自定义或内置异常，事务可以调用`<st c="57089">raise()</st>` `<st c="57096">方法来触发抛出异常的错误处理程序。</st>`
    `<st c="57159">以下视图函数在订单记录插入期间出现问题时抛出`<st c="57198">DuplicateRecordException</st>`
    `<st c="57222">类：</st>`'
- en: '[PRE40]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: <st c="57913">All the generic error</st> <st c="57936">handlers are placed in
    the</st> `<st c="57963">main.py</st>` <st c="57970">module, while the custom and
    component-specific exception classes are in separate</st> <st c="58053">modules
    outside of the Blueprints for coding standard purposes and</st> <st c="58120">easy
    debugging.</st>
  id: totrans-315
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 所有通用的错误处理程序都放置在`<st c="57963">main.py</st>` `<st c="57970">模块中，而自定义和组件特定的异常类则放在单独的`<st
    c="58053">模块中，以符合编码标准并便于调试。</st>`
- en: <st c="58135">Now, error pages and the rest of the Jinja2 templates can also
    use</st> *<st c="58203">CSS</st>*<st c="58206">,</st> *<st c="58208">JavaScript</st>*<st
    c="58218">,</st> *<st c="58220">images</st>*<st c="58226">, and other static resources
    to add look-and-feel features to</st> <st c="58288">their content.</st>
  id: totrans-316
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="58135">现在，错误页面和其他Jinja2模板也可以使用`*<st c="58203">CSS</st>` `<st c="58206">、`<st
    c="58208">JavaScript</st>` `<st c="58218">、`<st c="58220">图像</st>` `<st c="58226">和其他静态资源，为它们的内容添加外观和感觉功能。</st>`'
- en: <st c="58302">Adding static resources</st>
  id: totrans-317
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="58302">添加静态资源</st>`'
- en: <st c="58326">Static resources provide the user experience for Flask web applications.</st>
    <st c="58400">These static resources include the needed CSS, JavaScript, images,
    and video files to be used by some template pages.</st> <st c="58518">Now, Flask</st>
    <st c="58528">does not allow adding these files anywhere in the project.</st>
    <st c="58588">Generally, the Flask constructor has a</st> `<st c="58627">static_folder</st>`
    <st c="58640">parameter that accepts a relative path of a dedicated directory
    for</st> <st c="58709">these files.</st>
  id: totrans-318
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="58326">静态资源为Flask Web应用程序提供用户体验。</st>` `<st c="58400">这些静态资源包括一些模板页面所需的CSS、JavaScript、图像和视频文件。</st>`
    `<st c="58518">现在，Flask不允许在项目的任何地方添加这些文件。</st>` `<st c="58588">通常，Flask构造函数有一个`<st
    c="58627">static_folder</st>` `<st c="58640">参数，它接受一个专用目录的相对路径，用于存放这些文件。</st>`'
- en: <st c="58721">In</st> `<st c="58725">ch02-factory</st>`<st c="58737">,</st>
    `<st c="58739">create_app()</st>` <st c="58751">configures the Flask instance
    to allow placing the resources in the</st> `<st c="58820">/resources</st>` <st
    c="58830">folder of the main project directory.</st> <st c="58869">The following
    snippet of</st> `<st c="58894">create_app()</st>` <st c="58906">shows the Flask
    instantiation with the</st> `<st c="58946">resource</st>` <st c="58954">folder
    setup:</st>
  id: totrans-319
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`<st c="58725">ch02-factory</st>` `<st c="58737">中，`<st c="58739">create_app()</st>`
    `<st c="58751">配置了Flask实例，允许将资源放置在主项目目录的`<st c="58820">/resources</st>` `<st c="58830">文件夹中。</st>`
    `<st c="58869">以下`<st c="58894">create_app()</st>` `<st c="58906">的片段显示了使用`<st
    c="58946">resource</st>` `<st c="58954">文件夹设置的Flask实例化：</st>`
- en: '[PRE41]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: <st c="59198">Meanwhile, in the</st> `<st c="59217">ch02-blueprint</st>` <st
    c="59231">project, the main project and its Blueprints can have their respective</st>
    `<st c="59303">/resources</st>` <st c="59313">directory.</st> <st c="59325">The
    following snippet shows a Blueprint configuration with its own</st> `<st c="59392">resources</st>`
    <st c="59401">folder setup:</st>
  id: totrans-321
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 同时，在`<st c="59198">ch02-blueprint</st>` `<st c="59217">项目</st>`中，主项目和其蓝图可以分别拥有各自的`<st
    c="59303">/resources</st>` `<st c="59313">目录</st>`。以下片段展示了一个带有自己`<st c="59392">resources</st>`
    `<st c="59401">文件夹设置</st>`的蓝图配置：
- en: '[PRE42]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: <!DOCTYPE html>
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: <!DOCTYPE html>
- en: <html lang="en">
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: <html lang="en">
- en: <head>
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <head>
- en: <title>Main Menu</title>
  id: totrans-326
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <title>主菜单</title>
- en: <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
  id: totrans-327
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <meta name="viewport" content="width=device-width, initial-scale=1.0, shrink-to-fit=no">
- en: <link rel="stylesheet" href="<st c="61002">{{ url_for('static', filename='css/styles.css')}}</st>">
  id: totrans-328
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <link rel="stylesheet" href="<st c="61002">{{ url_for('static', filename='css/styles.css')}}</st>">
- en: <link rel="stylesheet" href="<st c="61085">{{ url_for('static', filename='css/bootstrap.min.css')}}</st>">
  id: totrans-329
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <link rel="stylesheet" href="<st c="61085">{{ url_for('static', filename='css/bootstrap.min.css')}}</st>">
- en: <script src="img/st>**<st c="61159">{{ url_for('static', filename='js/jquery-3.6.4.js')
    }}</st>**<st c="61214">"></script>
  id: totrans-330
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <script src="img/st>**<st c="61159">{{ url_for('static', filename='js/jquery-3.6.4.js')
    }}</st>**<st c="61214">"></script>
- en: <script src="img/st>**<st c="61240">{{ url_for('static', filename='js/bootstrap.bundle.min.js')
    }}</st>**<st c="61303">"></script>
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <script src="img/st>**<st c="61240">{{ url_for('static', filename='js/bootstrap.bundle.min.js')
    }}</st>**<st c="61303">"></script>
- en: </head>
  id: totrans-332
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </head>
- en: <body>
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: <body>
- en: <div class="container py-4 py-xl-5">
  id: totrans-334
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="container py-4 py-xl-5">
- en: <div class="row mb-5">
  id: totrans-335
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="row mb-5">
- en: <div class="col-md-8 col-xl-6 text-center mx-auto">
  id: totrans-336
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="col-md-8 col-xl-6 text-center mx-auto">
- en: <h2 class="display-4">Supply Management System Menu</h2>
  id: totrans-337
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h2 class="display-4">供应管理系统菜单</h2>
- en: <p class="w-lg-50"><strong><em>{{ session['username']}}</em></strong> is logged
    in.</p>
  id: totrans-338
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <p class="w-lg-50"><strong><em>{{ session['username']}}</em></strong> 已登录。</p>
- en: </div>
  id: totrans-339
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-340
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3">
  id: totrans-341
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="row row-cols-1 row-cols-md-2 row-cols-xl-3">
- en: <div class="col">
  id: totrans-342
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="col">
- en: <div class="d-flex p-3">
  id: totrans-343
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="d-flex p-3">
- en: <div class="px-2">
  id: totrans-344
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="px-2">
- en: <h5 class="mb-0 mt-1"><a href="#">Add Delivery Officer</a></h5>
  id: totrans-345
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <h5 class="mb-0 mt-1"><a href="#">添加配送员</a></h5>
- en: </div>
  id: totrans-346
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-347
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: </div>
  id: totrans-348
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: </div>
- en: <div class="col">
  id: totrans-349
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="col">
- en: <div class="d-flex p-3">
  id: totrans-350
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <div class="d-flex p-3">
- en: … … … … … …
  id: totrans-351
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: </body>
  id: totrans-352
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: </body>
- en: </html></st></st>
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: </html></st></st>
- en: '[PRE43]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: '[PRE44]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
