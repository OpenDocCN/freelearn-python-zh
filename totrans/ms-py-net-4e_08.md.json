["```py\n$ sudo apt-get install graphviz \n```", "```py\n$ dot -V\ndot - graphviz version 2.43.0 (0)$ dot -V \n```", "```py\n(venv)$ pip install graphviz\n>>> import graphviz\n>>> graphviz.__version__\n'0.20.1'\n>>> exit() \n```", "```py\ngraph my_network {\n    core -- distribution;\n    distribution -- access1;\n    distribution -- access2;\n} \n```", "```py\n$ mkdir output \n$ dot -Tpng chapter8_gv_1.gv -o output/chapter8_gv_1.png \n```", "```py\ndigraph my_network {\n    node [shape=box];\n    size = \"50 30\";\n    core -> distribution [label=\"2x10G\"];\n    distribution -> access1 [label=\"1G\"];\n    distribution -> access2 [label=\"1G\"];\n} \n```", "```py\n$ dot -Tpdf chapter8_gv_2.gv -o output/chapter8_gv_2.pdf \n```", "```py\n>>> from graphviz import Digraph\n>>> my_graph = Digraph(comment=\"My Network\")\n>>> my_graph.node(\"core\")\n>>> my_graph.node(\"distribution\")\n>>> my_graph.node(\"access1\")\n>>> my_graph.node(\"access2\")\n>>> my_graph.edge(\"core\", \"distribution\")\n>>> my_graph.edge(\"distribution\", \"access1\")\n>>> my_graph.edge(\"distribution\", \"access2\") \n```", "```py\n>>> print(my_graph.source)\n// My Network\ndigraph {\n    core\n    distribution\n    access1\n    access2\n    core -> distribution\n    distribution -> access1\n    distribution -> access2\n} \n```", "```py\n>>> my_graph.render(\"output/chapter8_gv_3.gv\")\n'output/chapter8_gv_3.gv.pdf' \n```", "```py\n$ cat hosts \n[devices]\nr1\nr2\nr3\nr5-tor\nr6-edge\n[edge-devices]\nr5-tor\nr6-edge \n```", "```py\n---\nansible_host: 192.168.2.218\nansible_user: cisco\nansible_ssh_pass: cisco\nansible_connection: network_cli\nansible_network_os: ios\nansbile_become: yes\nansible_become_method: enable\nansible_become_pass: cisco \n```", "```py\n---\n- name: Enable LLDP\n  hosts: \"devices\"\n  gather_facts: false\n  connection: network_cli\n  tasks:\n    - name: enable LLDP service\n      ios_lldp:\n        state: present\n      register: output\n    - name: show output\n      debug:\n        var: output \n```", "```py\n$ ansible-playbook -i hosts cisco_config_lldp.yml\n<skip>\nPLAY RECAP ****************************************************************************\nr1                         : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \nr2                         : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \nr3                         : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \nr5-tor                     : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0   \nr6-edge                    : ok=2    changed=0    unreachable=0    failed=0    skipped=0    rescued=0    ignored=0 \n```", "```py\nr1#sh lldp\nGlobal LLDP Information:\n    Status: ACTIVE\n    LLDP advertisements are sent every 30 seconds\n    LLDP hold time advertised is 120 seconds\n    LLDP interface reinitialisation delay is 2 seconds\nr1#sh lldp neighbors\nCapability codes:\n    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device\n    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other\nDevice ID           Local Intf     Hold-time  Capability      Port ID\nr6.virl.info        Gi0/1          120        R               Gi0/1\nr5.virl.info        Gi0/2          120        R               Gi0/1\nTotal entries displayed: 2 \n```", "```py\n$ mkdir tmp \n```", "```py\n tasks:\n    - name: Query for LLDP Neighbors\n      ios_command:\n        commands: show lldp neighbors\n      register: output\n    - name: show output\n      debug:\n        var: output\n    - name: copy output to file\n      copy: content=\"{{ output.stdout_lines }}\" dest=\"./tmp/{{ inventory_hostname }}_lldp_output.txt\" \n```", "```py\n$ ls -l tmp\ntotal 20\n-rw-rw-r-- 1 echou echou 413 Sep 18 10:44 r1_lldp_output.txt\n-rw-rw-r-- 1 echou echou 413 Sep 18 10:44 r2_lldp_output.txt\n-rw-rw-r-- 1 echou echou 413 Sep 18 10:44 r3_lldp_output.txt\n-rw-rw-r-- 1 echou echou 484 Sep 18 10:44 r5-tor_lldp_output.txt\n-rw-rw-r-- 1 echou echou 484 Sep 18 10:44 r6-edge_lldp_output.txt \n```", "```py\n$ cat tmp/r1_lldp_output.txt \n[[\"Capability codes:\", \"    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device\", \"    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other\", \"\", \"Device ID           Local Intf     Hold-time  Capability      Port ID\", \"r6.virl.info        Gi0/1          120        R               Gi0/1\", \"r5.virl.info        Gi0/2          120        R               Gi0/1\", \"\", \"Total entries displayed: 2\"]] \n```", "```py\nimport glob, re\nfrom graphviz import Digraph, Source\npattern = re.compile('Gi0/[1234]')\ndevice_lldp_neighbors = [] \n```", "```py\n$ python cisco_graph_lldp.py\ndevice: r6-edge\n  neighbors: r2\n  neighbors: r1\n  neighbors: r3\ndevice: r2\n  neighbors: r5\n  neighbors: r6\ndevice: r3\n  neighbors: r5\n  neighbors: r6\ndevice: r5-tor\n  neighbors: r3\n  neighbors: r1\n  neighbors: r2\ndevice: r1\n  neighbors: r5\n  neighbors: r6 \n```", "```py\nEdges: [('r6-edge', 'r2'), ('r6-edge', 'r1'), ('r6-edge', 'r3'), ('r2', 'r5'), ('r2', 'r6'), ('r3', 'r5'), ('r3', 'r6'), ('r5-tor', 'r3'), ('r5-tor', 'r1'), ('r5-tor', 'r2'), ('r1', 'r5'), ('r1', 'r6')] \n```", "```py\nmy_graph = Digraph(\"My_Network\")\nmy_graph.edge(\"Client\", \"r6-edge\")\nmy_graph.edge(\"r5-tor\", \"Server\")\n# construct the edge relationships\nfor neighbors in device_lldp_neighbors:\n    node1, node2 = neighbors\n    my_graph.edge(node1, node2) \n```", "```py\ndigraph My_Network {\n        Client -> \"r6-edge\"\n        \"r5-tor\" -> Server\n        \"r6-edge\" -> r2\n        \"r6-edge\" -> r1\n        \"r6-edge\" -> r3\n        r2 -> r5\n        r2 -> r6\n        r3 -> r5\n        r3 -> r6\n        \"r5-tor\" -> r3\n        \"r5-tor\" -> r1\n        \"r5-tor\" -> r2\n        r1 -> r5\n        r1 -> r6\n} \n```", "```py\nsource = my_graph.source\noriginal_text = \"digraph My_Network {\"\nnew_text = 'digraph My_Network {\\n{rank=same Client \"r6-edge\"}\\n{rank=same r1 r2 r3}\\n'\nnew_source = source.replace(original_text, new_text)\nprint(new_source)\nnew_graph = Source(new_source)\nnew_graph.render(\"output/chapter8_lldp_graph.gv\") \n```", "```py\ndigraph My_Network {\n{rank=same Client \"r6-edge\"}\n{rank=same r1 r2 r3}\n        Client -> \"r6-edge\"\n        \"r5-tor\" -> Server\n        \"r6-edge\" -> r2\n        \"r6-edge\" -> r1\n        \"r6-edge\" -> r3\n        r2 -> r5\n        r2 -> r6\n        r3 -> r5\n        r3 -> r6\n        \"r5-tor\" -> r3\n        \"r5-tor\" -> r1\n        \"r5-tor\" -> r2\n        r1 -> r5\n        r1 -> r6\n} \n```", "```py\nr6#confi t\nEnter configuration commands, one per line.  End with CNTL/Z.\nr6(config)#int gig 0/1\nr6(config-if)#shut\nr6(config-if)#int gig 0/2\nr6(config-if)#shut\nr6(config-if)#end\nr6# \n```", "```py\nr6#sh lldp neighbors\nCapability codes:\n    (R) Router, (B) Bridge, (T) Telephone, (C) DOCSIS Cable Device\n    (W) WLAN Access Point, (P) Repeater, (S) Station, (O) Other\nDevice ID           Local Intf     Hold-time  Capability      Port ID\nr1.virl.info        Gi0/0          120        R               Gi0/0\nr2.virl.info        Gi0/0          120        R               Gi0/0\nr3.virl.info        Gi0/0          120        R               Gi0/0\nr5.virl.info        Gi0/0          120        R               Gi0/0\nr3.virl.info        Gi0/3          120        R               Gi0/1\n\nDevice ID           Local Intf     Hold-time  Capability      Port ID\nTotal entries displayed: 5 \n```", "```py\ncisco@Server:~$ python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 ... \n```", "```py\ncisco@Client:~$ cat http_get.py\nimport requests\nimport time\nwhile True:\n    r = requests.get(\"http://10.0.0.5:8000\")\n    print(r.text)\n    time.sleep(5) \n```", "```py\ncisco@Client:~$ python3 http_get.py\n<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">\n<html>\n<head>\n<skip>\n</body>\n</html> \n```", "```py\ncisco@Server:~$ python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 ...\n10.0.0.9 - - [02/Oct/2019 00:55:57] \"GET / HTTP/1.1\" 200 -\n10.0.0.9 - - [02/Oct/2019 00:56:02] \"GET / HTTP/1.1\" 200 -\n10.0.0.9 - - [02/Oct/2019 00:56:07] \"GET / HTTP/1.1\" 200 â€“ \n```", "```py\n!\nip flow-export version 5\nip flow-export destination 192.168.2.126 9995 vrf Mgmt-intf\n!\ninterface GigabitEthernet0/4\n description to Client\n ip address 10.0.0.10 255.255.255.252\n ip flow ingress\n ip flow egress\n<skip> \n```", "```py\nsock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nsock.bind(('0.0.0.0', 9995)) \n```", "```py\nwhile True:\n    buf, addr = sock.recvfrom(1500) \n```", "```py\n(version, count) = struct.unpack('!HH',buf[0:4]) \n```", "```py\n (sys_uptime, unix_secs, unix_nsecs, flow_sequence) = struct.unpack('!IIII', buf[4:20])\n    (engine_type, engine_id, sampling_interval) = struct.unpack('!BBH', buf[20:24]) \n```", "```py\n nfdata = {}\n    for i in range(0, count):\n        try:\n            base = SIZE_OF_HEADER+(i*SIZE_OF_RECORD)\n            data = struct.unpack('!IIIIHH',buf[base+16:base+36])\n            input_int, output_int = struct.unpack('!HH', buf[base+12:base+16])\n            nfdata[i] = {}\n            nfdata[i]['saddr'] = inet_ntoa(buf[base+0:base+4])\n            nfdata[i]['daddr'] = inet_ntoa(buf[base+4:base+8])\n            nfdata[i]['pcount'] = data[0]\n            nfdata[i]['bcount'] = data[1]\n            nfdata[i]['stime'] = data[2]\n            nfdata[i]['etime'] = data[3]\n            nfdata[i]['sport'] = data[4]\n            nfdata[i]['dport'] = data[5]\n            print(i, \" {0}:{1} -> {2}:{3} {4} packts {5} bytes\".format(\n                nfdata[i]['saddr'], \n                nfdata[i]['sport'], \n                nfdata[i]['daddr'], \n                nfdata[i]['dport'], \n                nfdata[i]['pcount'],\n                nfdata[i]['bcount']),\n                ) \n```", "```py\n$ python3 netFlow_v5_parser.py\nHeaders:  \nNetFlow Version: 5\nFlow Count: 6\nSystem Uptime: 116262790\nEpoch Time in seconds: 1569974960\nEpoch Time in nanoseconds: 306899412\nSequence counter of total flow: 24930\n0  192.168.0.3:44779 -> 192.168.0.2:179 1 packts 59 bytes\n1  192.168.0.3:44779 -> 192.168.0.2:179 1 packts 59 bytes\n2  192.168.0.4:179 -> 192.168.0.5:30624 2 packts 99 bytes\n3  172.16.1.123:0 -> 172.16.1.222:771 1 packts 176 bytes\n4  192.168.0.2:179 -> 192.168.0.5:59660 2 packts 99 bytes\n5  192.168.0.1:179 -> 192.168.0.5:29975 2 packts 99 bytes\n**********\nHeaders:  \nNetFlow Version: 5 \nFlow Count: 15 \nSystem Uptime: 116284791 \nEpoch Time in seconds: 1569974982 \nEpoch Time in nanoseconds: 307891182 \nSequence counter of total flow: 24936\n0  10.0.0.9:35676 -> 10.0.0.5:8000 6 packts 463 bytes\n1  10.0.0.9:35676 -> 10.0.0.5:8000 6 packts 463 bytes\n<skip>\n11  10.0.0.9:35680 -> 10.0.0.5:8000 6 packts 463 bytes\n12  10.0.0.9:35680 -> 10.0.0.5:8000 6 packts 463 bytes\n13  10.0.0.5:8000 -> 10.0.0.9:35680 5 packts 973 bytes\n14  10.0.0.5:8000 -> 10.0.0.9:35680 5 packts 973 bytes \n```", "```py\n$ sudo apt-get install ntop \n```", "```py\n!\nip flow-export version 5\nip flow-export destination 192.168.2.126 5556 vrf Mgmt-intf\n! \n```", "```py\n!\ninterface GigabitEthernet0/0\n...\nip flow ingress \nip flow egress\n... \n```", "```py\n$ ansible-playbook -i hosts cisco_config_netflow.yml\nTASK [configure netflow export station] ****************************************************************************\nchanged: [r2]\nchanged: [r1]\nchanged: [r3]\nchanged: [r5-tor]\nchanged: [r6-edge]\nTASK [configure flow export on Gi0/0] ****************************************************************************\nok: [r1]\nok: [r3]\nok: [r2]\nok: [r5-tor]\nok: [r6-edge]\n<skip> \n```", "```py\nr2#sh run\n!\ninterface GigabitEthernet0/0\n description OOB Management\n vrf forwarding Mgmt-intf\n ip address 192.168.2.126 255.255.255.0\n ip flow ingress\n ip flow egress\n<skip>\n!\nip flow-export version 5\nip flow-export destination 192.168.2.126 5556 vrf Mgmt-intf\n! \n```", "```py\n$ pwd\n/usr/share/ntop/python \n```", "```py\n# Import modules for CGI handling \nimport cgi, cgitb\nimport ntop\n# Parse URL cgitb.enable(); \n```", "```py\nform = cgi.FieldStorage();\nname = form.getvalue('Name', default=\"Eric\")\nversion = ntop.version() \nos = ntop.os()\nuptime = ntop.uptime()\nntop.printHTMLHeader('Mastering Python Networking', 1, 0) ntop.sendString(\"Hello, \"+ name +\"<br>\")\nntop.sendString(\"Ntop Information: %s %s %s\" % (version, os, uptime))\nntop.printHTMLFooter() \n```", "```py\nimport ntop, interface, json\nifnames = []\ntry:\nfor i in range(interface.numInterfaces()):\n    ifnames.append(interface.name(i))\nexcept Exception as inst:\n    print(type(inst)) # the exception instance \n    print(inst.args) # arguments stored in .args\n    print(inst) #   str _ allows args to printed directly\n<skip> \n```", "```py\nNexus-2# sh run | i sflow feature sflow\nsflow max-sampled-size 256\nsflow counter-poll-interval 10\nsflow collector-ip 192.168.199.185 vrf management sflow agent-ip 192.168.199.148\nsflow data-source interface Ethernet1/48 \n```", "```py\n$ wget http://www.inmon.com/bin/sflowtool-3.22.tar.gz\n$ tar -xvzf sflowtool-3.22.tar.gz\n$ cd sflowtool-3.22/\n$ ./configure\n$ make\n$ sudo make install \n```", "```py\n$ sflowtool\nstartDatagram =================================\ndatagramSourceIP 192.168.199.148\ndatagramSize 88\nunixSecondsUTC 1489727283\ndatagramVersion 5\nagentSubId 100\nagent 192.168.199.148\npacketSequenceNo 5250248\nsysUpTime 4017060520\nsamplesInPacket 1\nstartSample ----------------------\nsampleType_tag 0:4 sampleType COUNTERSSAMPLE sampleSequenceNo 2503508\nsourceId 2:1\ncounterBlock_tag 0:1001\n5s_cpu 0.00\n1m_cpu 21.00\n5m_cpu 20.80\ntotal_memory_bytes 3997478912\nfree_memory_bytes 1083838464 endSample ----------------------\nendDatagram ================================= \n```", "```py\n#!/usr/bin/env python3\nimport sys, re\nfor line in iter(sys.stdin.readline, ''):\n    if re.search('agent ', line):\n         print(line.strip()) \n```", "```py\n$ sflowtool | python3 chapter8_sflowtool_1.py \nagent 192.168.199.148\nagent 192.168.199.148 \n```", "```py\n$ sflowtool --help\n...\ntcpdump output:\n-t - (output in binary tcpdump(1) format)\n-r file - (read binary tcpdump(1) format)\n-x - (remove all IPV4 content)\n-z pad - (extend tcpdump pkthdr with this many zeros\ne.g. try -z 8 for tcpdump on Red Hat Linux 6.2)\nNetFlow output:\n-c hostname_or_IP - (netflow collector host)\n-d port - (netflow collector UDP port)\n-e - (netflow collector peer_as (default = origin_as))\n-s - (disable scaling of netflow output by sampling rate)\n-S - spoof source of netflow packets to input agent IP \n```", "```py\n$ sudo apt-get install default-jre\n$ java -version\nopenjdk version \"1.8.0_121\"\nOpenJDK Runtime Environment (build 1.8.0_121-8u121-b13-0ubuntu1.16.04.2- b13)\nOpenJDK 64-Bit Server VM (build 25.121-b13, mixed mode) \n```", "```py\n$ wget http://www.inmon.com/products/sFlow-RT/sflow-rt.tar.gz\n$ tar -xvzf sflow-rt.tar.gz\n$ cd sflow-rt/\n$ ./start.sh\n2017-03-17T09:35:01-0700 INFO: Listening, sFlow port 6343\n2017-03-17T09:35:02-0700 INFO: Listening, HTTP port 8008 \n```", "```py\n>>> import requests\n>>> r = requests.get(\"http://192.168.199.185:8008/version\")\n>>> r.text '2.0-r1180'\n>>> r = requests.get(\"http://192.168.199.185:8008/agents/json\")\n>>> r.text\n'{\"192.168.199.148\": {n \"sFlowDatagramsLost\": 0,n \"sFlowDatagramSource\": [\"192.168.199.148\"],n \"firstSeen\": 2195541,n \"sFlowFlowDuplicateSamples\": 0,n \"sFlowDatagramsReceived\": 441,n \"sFlowCounterDatasources\": 2,n \"sFlowFlowOutOfOrderSamples\": 0,n \"sFlowFlowSamples\": 0,n \"sFlowDatagramsOutOfOrder\": 0,n \"uptime\": 4060470520,n \"sFlowCounterDuplicateSamples\": 0,n \"lastSeen\": 3631,n \"sFlowDatagramsDuplicates\": 0,n \"sFlowFlowDrops\": 0,n \"sFlowFlowLostSamples\": 0,n \"sFlowCounterSamples\": 438,n \"sFlowCounterLostSamples\": 0,n \"sFlowFlowDatasources\": 0,n \"sFlowCounterOutOfOrderSamples\": 0n}}' \n```"]