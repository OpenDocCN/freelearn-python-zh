["```py\n#salt-call mymodule.test\n\n```", "```py\n'''\nThis module should be saved as salt/modules/mysqltest.py\n'''\n__virtualname__ = 'mysqltest'\n\ndef __virtual__():\n    '''\n    For now, just return the __virtualname__\n    '''\n    return __virtualname__\n\ndef ping():\n    '''\n    Returns True\n\n    CLI Example:\n        salt '*' mysqltest.ping\n    '''\n    return True\n```", "```py\n'''\nThis module should be saved as salt/modules/mysqltest.py\n'''\nimport salt.utils\n\n__virtualname__ = 'mysqltest'\n\ndef __virtual__():\n    '''\n    Check for MySQL\n    '''\n    if not salt.utils.which('mysql'):\n        return False\n    return __virtualname__\n\ndef ping():\n    '''\n    Returns True\n\n    CLI Example:\n        salt '*' mysqltest.ping\n    '''\n    return True\n```", "```py\nfrom salt.utils import which\n```", "```py\nif which('myprogram'):\n```", "```py\n#salt winminon cmd.run 'dir C:\\'\n\n```", "```py\n__salt__['cmd.run']('dir C:\\')\n```", "```py\ndef check_mysqld():\n    '''\n    Check to see if sshd is running and listening\n\n    CLI Example:\n        salt '*' testmodule.check_mysqld\n    '''\n    output = __salt__['cmd.run']('netstat -tulpn | grep mysqld', python_shell=True)\n    if 'tcp' not in output:\n        return False\n    return True\n```", "```py\ntcp        0      0 0.0.0.0:3306              0.0.0.0:*               LISTEN      426/mysqld\ntcp6       0      0 :::3306                   :::*                    LISTEN      426/mysqld\n```", "```py\nusername = __opts__['username']\nhostname = __grains__['host']\npassword = __pillar__['password']\n```", "```py\nusername = __opts__.get('username', 'salt')\nhostname = __grains__.get('host', 'localhost')\npassword = __pillar__.get('password', None)\n```", "```py\nmaster_interface = __pillar__['master']['interface']\nmaster_sock_dir = __pillar__.get('master', {}).get('sock_dir', None)\n```", "```py\nusername = __salt__['config.get']('username')\n```", "```py\n'''\nThis module should be saved as salt/modules/mysqltest.py\n'''\nimport MySQLdb\n\ndef version():\n    '''\n    Returns MySQL Version\n\n    CLI Example:\n        salt '*' mysqltest.version\n    '''\n    user = __salt__['config.get']('mysql_user', 'root')\n    passwd = __salt__['config.get']('mysql_pass', '')\n    host = __salt__['config.get']('mysql_host', 'localhost')\n    port = __salt__['config.get']('mysql_port', 3306)\n    db_ = __salt__['config.get']('mysql_db', 'mysql')\n    dbc = MySQLdb.connect(\n        connection_user=user,\n        connection_pass=passwd,\n        connection_host=host,\n        connection_port=port,\n        connection_db=db_,\n    )\n    cur = dbc.cursor()\n    return cur.execute('SELECT VERSION()')\n```", "```py\ntry:\n    import MySQLdb\n    HAS_LIBS = True\nexcept ImportError:\n    HAS_LIBS = False\n\ndef __virtual__():\n    '''\n    Check dependencies\n    '''\n    return HAS_LIBS\n```", "```py\ndef __virtual__():\n    '''\n    Check dependencies\n    '''\n    if HAS_LIBS:\n        return __virtualname__\n    return False\n```", "```py\ndef _get_conn():\n    '''\n    Get a database connection object\n    '''\n    user = __salt__['config.get']('mysql_user', 'root')\n    passwd = __salt__['config.get']('mysql_pass', '')\n    host = __salt__['config.get']('mysql_host', 'localhost')\n    port = __salt__['config.get']('mysql_port', 3306)\n    db_ = __salt__['config.get']('mysql_db', 'mysql')\n    return MySQLdb.connect(\n        connection_user=user,\n        connection_pass=passwd,\n        connection_host=host,\n        connection_port=port,\n        connection_db=db_,\n    )\n\ndef version():\n    '''\n    Returns MySQL Version\n\n    CLI Example:\n        salt '*' mysqltest.version\n    '''\n    dbc = _get_conn()\n    cur = dbc.cursor()\n    return cur.execute('SELECT VERSION()')\n```", "```py\nimport logging\nlog = logging.getLogger(__name__)\n```", "```py\nlog.debug('This is a log message')\n```", "```py\ndef _get_conn():\n    '''\n    Get a database connection object\n    '''\n    user = __salt__['config.get']('mysql_user', 'root')\n    passwd = __salt__['config.get']('mysql_pass', '')\n    host = __salt__['config.get']('mysql_host', 'localhost')\n    port = __salt__['config.get']('mysql_port', 3306)\n    db_ = __salt__['config.get']('mysql_db', 'mysql')\n    dbc = MySQLdb.connect(\n        connection_user=user,\n        connection_pass=passwd,\n        connection_host=host,\n        connection_port=port,\n        connection_db=db_,\n    )\n    log.trace('Connected to the database')\n    return dbc\n```", "```py\n__func_alias__ = {\n    'list_': 'list'\n}\n\ndef list_(type_):\n    '''\n    List different resources in MySQL\n    CLI Examples:\n        salt '*' mysqltest.list tables\n        salt '*' mysqltest.list databases\n    '''\n    dbc = _get_conn()\n    cur = dbc.cursor()\n    return cur.execute('SHOW {0}()'.format(type_))\n```", "```py\n#salt myminion mysqltest.list 'tables; drop table users;'\n\n```", "```py\nfrom salt.exceptions import CommandExecutionError\n\ndef list_(type_):\n    '''\n    List different resources in MySQL\n    CLI Examples:\n        salt '*' mysqltest.list tables\n        salt '*' mysqltest.list databases\n    '''\n    dbc = _get_conn()\n    cur = dbc.cursor()\n    valid_types = ['tables', 'databases']\n    if type_ not in valid_types:\n        err_msg = 'A valid type was not specified'\n        log.error(err_msg)\n        raise CommandExecutionError(err_msg)\n    return cur.execute('SHOW {0}()'.format(type_))\n```", "```py\n'The variable's value is {0}'.format(myvar)\n'The variable's value is %s' % myvar\n```", "```py\n'The variable's value is {}'.format(myvar)\n```", "```py\n'''\nThis module should be saved as salt/modules/mysqltest.py\n'''\nimport salt.utils\n\ntry:\n    import MySQLdb\n    HAS_LIBS = True\nexcept ImportError:\n    HAS_LIBS = False\n\nimport logging\nlog = logging.getLogger(__name__)\n\n__func_alias__ = {\n    'list_': 'list'\n}\n\n__virtualname__ = 'mysqltest'\n\ndef __virtual__():\n    '''\n    Check dependencies, using both methods from the chapter\n    '''\n    if not salt.utils.which('mysql'):\n        return False\n\n    if HAS_LIBS:\n        return __virtualname__\n\n    return False\n\ndef ping():\n    '''\n    Returns True\n\n    CLI Example:\n        salt '*' mysqltest.ping\n    '''\n    return True\n\ndef check_mysqld():\n    '''\n    Check to see if sshd is running and listening\n\n    CLI Example:\n        salt '*' testmodule.check_mysqld\n    '''\n    output = __salt__['cmd.run']('netstat -tulpn | grep mysqld', python_shell=True)\n    if 'tcp' not in output:\n        return False\n    return True\n\ndef _get_conn():\n    '''\n    Get a database connection object\n    '''\n    user = __salt__['config.get']('mysql_user', 'root')\n    passwd = __salt__['config.get']('mysql_pass', '')\n    host = __salt__['config.get']('mysql_host', 'localhost')\n    port = __salt__['config.get']('mysql_port', 3306)\n    db_ = __salt__['config.get']('mysql_db', 'mysql')\n    dbc = MySQLdb.connect(\n        connection_user=user,\n        connection_pass=passwd,\n        connection_host=host,\n        connection_port=port,\n        connection_db=db_,\n    )\n    log.trace('Connected to the database')\n    return dbc\n\ndef version():\n    '''\n    Returns MySQL Version\n\n    CLI Example:\n        salt '*' mysqltest.version\n    '''\n    dbc = _get_conn()\n    cur = dbc.cursor()\n    return cur.execute('SELECT VERSION()')\n\ndef list_(type_):\n    '''\n    List different resources in MySQL\n    CLI Examples:\n        salt '*' mysqltest.list tables\n        salt '*' mysqltest.list databases\n    '''\n    dbc = _get_conn()\n    cur = dbc.cursor()\n    valid_types = ['tables', 'databases']\n    if type_ not in valid_types:\n        err_msg = 'A valid type was not specified'\n        log.error(err_msg)\n        raise CommandExecutionError(err_msg)\n    return cur.execute('SHOW {0}()'.format(type_))\n```", "```py\n#salt '*' mysqltest.ping\n#salt-call mysqltest.ping\n\n```", "```py\n# time salt-call test.ping\nlocal:\n True\nreal\t0m3.257s\nuser\t0m0.863s\nsys\t0m0.197s\n# time salt-call --skip-grains test.ping\nlocal:\n True\nreal\t0m0.675s\nuser\t0m0.507s\nsys\t0m0.080s\n\n```", "```py\n# time salt-call --local test.ping\nlocal:\n True\nreal\t0m2.820s\nuser\t0m0.797s\nsys\t0m0.120s\n\n```", "```py\n# scp -r saltmaster:/srv/salt /srv\n# scp -r saltmaster:/srv/pillar /srv\n\n```", "```py\n$ grep 'import salt' salt/modules/mysqltest.py\nimport salt.util\n# salt-call --local mysqltest.ping\n'mysqltest.ping' is not available.\n\n```", "```py\n# salt-call --local -l debug mysqltest.ping\n...\n[DEBUG   ] Failed to import module mysqltest:\nTraceback (most recent call last):\n File \"/usr/lib/python2.7/site-packages/salt/loader.py\", line 1217, in _load_module\n ), fn_, fpath, desc)\n File \"/usr/lib/python2.7/site-packages/salt/modules/mysqltest.py\", line 4, in <module>\n import salt.util\nImportError: No module named util\n...\n'mysqltest.ping' is not available.\n\n```", "```py\ndef __virtual__():\n    '''\n    Check dependencies, using both methods from the chapter\n    '''\n    log.debug('Checking for mysql command')\n    if not salt.utils.which('mysql'):\n        return False\n\n    log.debug('Checking for libs')\n    if HAS_LIBS:\n        return __virtualname__\n\n    return False\n```"]